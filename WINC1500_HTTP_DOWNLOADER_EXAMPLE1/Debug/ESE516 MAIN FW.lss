
ESE516 MAIN FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00029108  00012000  00012000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000002f4  20000000  0003b108  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000055d4  20000300  0003b410  00030300  2**4
                  ALLOC
  3 .stack        00002004  200058d4  000409e4  00030300  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000302f4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0003031c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00132e33  00000000  00000000  00030375  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00011179  00000000  00000000  001631a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000170f1  00000000  00000000  00174321  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00003de0  00000000  00000000  0018b412  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00003a38  00000000  00000000  0018f1f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00041452  00000000  00000000  00192c2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0005f09e  00000000  00000000  001d407c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000c3f12  00000000  00000000  0023311a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000e970  00000000  00000000  002f702c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00012000 <exception_table>:
   12000:	d8 78 00 20 01 bc 02 00 f9 bc 02 00 f9 bc 02 00     .x. ............
	...
   1202c:	31 ad 01 00 00 00 00 00 00 00 00 00 51 ae 01 00     1...........Q...
   1203c:	99 ae 01 00 f9 bc 02 00 f9 bc 02 00 f9 bc 02 00     ................
   1204c:	51 7d 02 00 7d 72 02 00 f9 bc 02 00 b9 30 01 00     Q}..}r.......0..
   1205c:	f9 bc 02 00 fd 31 01 00 f5 83 02 00 0d 84 02 00     .....1..........
   1206c:	25 84 02 00 3d 84 02 00 55 84 02 00 6d 84 02 00     %...=...U...m...
   1207c:	49 bb 02 00 5d bb 02 00 71 bb 02 00 1d 8a 01 00     I...]...q.......
   1208c:	31 8a 01 00 45 8a 01 00 00 00 00 00 00 00 00 00     1...E...........
   1209c:	41 2f 01 00 f9 bc 02 00 7d 30 01 00 f9 bc 02 00     A/......}0......
   120ac:	f9 bc 02 00 00 00 00 00                             ........

000120b4 <__do_global_dtors_aux>:
   120b4:	b510      	push	{r4, lr}
   120b6:	4c06      	ldr	r4, [pc, #24]	; (120d0 <__do_global_dtors_aux+0x1c>)
   120b8:	7823      	ldrb	r3, [r4, #0]
   120ba:	2b00      	cmp	r3, #0
   120bc:	d107      	bne.n	120ce <__do_global_dtors_aux+0x1a>
   120be:	4b05      	ldr	r3, [pc, #20]	; (120d4 <__do_global_dtors_aux+0x20>)
   120c0:	2b00      	cmp	r3, #0
   120c2:	d002      	beq.n	120ca <__do_global_dtors_aux+0x16>
   120c4:	4804      	ldr	r0, [pc, #16]	; (120d8 <__do_global_dtors_aux+0x24>)
   120c6:	e000      	b.n	120ca <__do_global_dtors_aux+0x16>
   120c8:	bf00      	nop
   120ca:	2301      	movs	r3, #1
   120cc:	7023      	strb	r3, [r4, #0]
   120ce:	bd10      	pop	{r4, pc}
   120d0:	20000300 	.word	0x20000300
   120d4:	00000000 	.word	0x00000000
   120d8:	0003b108 	.word	0x0003b108

000120dc <frame_dummy>:
   120dc:	4b08      	ldr	r3, [pc, #32]	; (12100 <frame_dummy+0x24>)
   120de:	b510      	push	{r4, lr}
   120e0:	2b00      	cmp	r3, #0
   120e2:	d003      	beq.n	120ec <frame_dummy+0x10>
   120e4:	4907      	ldr	r1, [pc, #28]	; (12104 <frame_dummy+0x28>)
   120e6:	4808      	ldr	r0, [pc, #32]	; (12108 <frame_dummy+0x2c>)
   120e8:	e000      	b.n	120ec <frame_dummy+0x10>
   120ea:	bf00      	nop
   120ec:	4807      	ldr	r0, [pc, #28]	; (1210c <frame_dummy+0x30>)
   120ee:	6803      	ldr	r3, [r0, #0]
   120f0:	2b00      	cmp	r3, #0
   120f2:	d100      	bne.n	120f6 <frame_dummy+0x1a>
   120f4:	bd10      	pop	{r4, pc}
   120f6:	4b06      	ldr	r3, [pc, #24]	; (12110 <frame_dummy+0x34>)
   120f8:	2b00      	cmp	r3, #0
   120fa:	d0fb      	beq.n	120f4 <frame_dummy+0x18>
   120fc:	4798      	blx	r3
   120fe:	e7f9      	b.n	120f4 <frame_dummy+0x18>
   12100:	00000000 	.word	0x00000000
   12104:	20000304 	.word	0x20000304
   12108:	0003b108 	.word	0x0003b108
   1210c:	0003b108 	.word	0x0003b108
   12110:	00000000 	.word	0x00000000

00012114 <ssd1306_hard_reset>:
 * \brief Perform a hard reset of the OLED controller
 *
 * This functions will reset the OLED controller by setting the reset pin low.
 */
static inline void ssd1306_hard_reset(void)
{
   12114:	b580      	push	{r7, lr}
   12116:	af00      	add	r7, sp, #0
	/*uint32_t delay_10us = 10 * (system_gclk_gen_get_hz(0)/1000000);
	port_pin_set_output_level(SSD1306_RES_PIN, false);
	delay_cycles(delay_10us); // At lest 10us
	port_pin_set_output_level(SSD1306_RES_PIN, true);
	delay_cycles(delay_10us); // At lest 10us*/
}
   12118:	46c0      	nop			; (mov r8, r8)
   1211a:	46bd      	mov	sp, r7
   1211c:	bd80      	pop	{r7, pc}

0001211e <ssd1306_interface_init>:
 *
 * Depending on what interface used for interfacing the OLED controller this
 * function will initialize the necessary hardware.
 */
static void ssd1306_interface_init(void)
{
   1211e:	b580      	push	{r7, lr}
   12120:	af00      	add	r7, sp, #0

}
   12122:	46c0      	nop			; (mov r8, r8)
   12124:	46bd      	mov	sp, r7
   12126:	bd80      	pop	{r7, pc}

00012128 <ssd1306_init>:
 * Call this function to initialize the hardware interface and the OLED
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void ssd1306_init(void)
{
   12128:	b580      	push	{r7, lr}
   1212a:	af00      	add	r7, sp, #0


	// Initialize the interface
	ssd1306_interface_init();
   1212c:	4b25      	ldr	r3, [pc, #148]	; (121c4 <ssd1306_init+0x9c>)
   1212e:	4798      	blx	r3

	// Do a hard reset of the OLED display controller
	ssd1306_hard_reset();
   12130:	4b25      	ldr	r3, [pc, #148]	; (121c8 <ssd1306_init+0xa0>)
   12132:	4798      	blx	r3

	// Set the reset pin to the default state
	//port_pin_set_output_level(SSD1306_RES_PIN, true);
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFF); //0xAE
   12134:	20ae      	movs	r0, #174	; 0xae
   12136:	4b25      	ldr	r3, [pc, #148]	; (121cc <ssd1306_init+0xa4>)
   12138:	4798      	blx	r3
	
	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO); //0XD5
   1213a:	20d5      	movs	r0, #213	; 0xd5
   1213c:	4b23      	ldr	r3, [pc, #140]	; (121cc <ssd1306_init+0xa4>)
   1213e:	4798      	blx	r3
	ssd1306_write_command(0x80);
   12140:	2080      	movs	r0, #128	; 0x80
   12142:	4b22      	ldr	r3, [pc, #136]	; (121cc <ssd1306_init+0xa4>)
   12144:	4798      	blx	r3
	
	
	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO); //0XA8
   12146:	20a8      	movs	r0, #168	; 0xa8
   12148:	4b20      	ldr	r3, [pc, #128]	; (121cc <ssd1306_init+0xa4>)
   1214a:	4798      	blx	r3
	ssd1306_write_command(0x2F); //2F
   1214c:	202f      	movs	r0, #47	; 0x2f
   1214e:	4b1f      	ldr	r3, [pc, #124]	; (121cc <ssd1306_init+0xa4>)
   12150:	4798      	blx	r3
	
	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET); //D3
   12152:	20d3      	movs	r0, #211	; 0xd3
   12154:	4b1d      	ldr	r3, [pc, #116]	; (121cc <ssd1306_init+0xa4>)
   12156:	4798      	blx	r3
	ssd1306_write_command(0x00);
   12158:	2000      	movs	r0, #0
   1215a:	4b1c      	ldr	r3, [pc, #112]	; (121cc <ssd1306_init+0xa4>)
   1215c:	4798      	blx	r3
	
	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));	
   1215e:	2040      	movs	r0, #64	; 0x40
   12160:	4b1a      	ldr	r3, [pc, #104]	; (121cc <ssd1306_init+0xa4>)
   12162:	4798      	blx	r3
	
	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING); //8D
   12164:	208d      	movs	r0, #141	; 0x8d
   12166:	4b19      	ldr	r3, [pc, #100]	; (121cc <ssd1306_init+0xa4>)
   12168:	4798      	blx	r3
	ssd1306_write_command(0x14);
   1216a:	2014      	movs	r0, #20
   1216c:	4b17      	ldr	r3, [pc, #92]	; (121cc <ssd1306_init+0xa4>)
   1216e:	4798      	blx	r3

	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY); //A6
   12170:	20a6      	movs	r0, #166	; 0xa6
   12172:	4b16      	ldr	r3, [pc, #88]	; (121cc <ssd1306_init+0xa4>)
   12174:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON); //0xA4
   12176:	20a4      	movs	r0, #164	; 0xa4
   12178:	4b14      	ldr	r3, [pc, #80]	; (121cc <ssd1306_init+0xa4>)
   1217a:	4798      	blx	r3
		
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL0_SEG0| 0x1); //0xA0
   1217c:	20a1      	movs	r0, #161	; 0xa1
   1217e:	4b13      	ldr	r3, [pc, #76]	; (121cc <ssd1306_init+0xa4>)
   12180:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN); //0xC8
   12182:	20c8      	movs	r0, #200	; 0xc8
   12184:	4b11      	ldr	r3, [pc, #68]	; (121cc <ssd1306_init+0xa4>)
   12186:	4798      	blx	r3
	
	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS); //0xDA
   12188:	20da      	movs	r0, #218	; 0xda
   1218a:	4b10      	ldr	r3, [pc, #64]	; (121cc <ssd1306_init+0xa4>)
   1218c:	4798      	blx	r3
	ssd1306_write_command(0x12);
   1218e:	2012      	movs	r0, #18
   12190:	4b0e      	ldr	r3, [pc, #56]	; (121cc <ssd1306_init+0xa4>)
   12192:	4798      	blx	r3
		
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0); //0x81
   12194:	2081      	movs	r0, #129	; 0x81
   12196:	4b0d      	ldr	r3, [pc, #52]	; (121cc <ssd1306_init+0xa4>)
   12198:	4798      	blx	r3
	ssd1306_write_command(0x8F);
   1219a:	208f      	movs	r0, #143	; 0x8f
   1219c:	4b0b      	ldr	r3, [pc, #44]	; (121cc <ssd1306_init+0xa4>)
   1219e:	4798      	blx	r3
	
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD); //0xD9
   121a0:	20d9      	movs	r0, #217	; 0xd9
   121a2:	4b0a      	ldr	r3, [pc, #40]	; (121cc <ssd1306_init+0xa4>)
   121a4:	4798      	blx	r3
	ssd1306_write_command(0xF1);	
   121a6:	20f1      	movs	r0, #241	; 0xf1
   121a8:	4b08      	ldr	r3, [pc, #32]	; (121cc <ssd1306_init+0xa4>)
   121aa:	4798      	blx	r3
	
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL); //DB
   121ac:	20db      	movs	r0, #219	; 0xdb
   121ae:	4b07      	ldr	r3, [pc, #28]	; (121cc <ssd1306_init+0xa4>)
   121b0:	4798      	blx	r3
	ssd1306_write_command(0x40);
   121b2:	2040      	movs	r0, #64	; 0x40
   121b4:	4b05      	ldr	r3, [pc, #20]	; (121cc <ssd1306_init+0xa4>)
   121b6:	4798      	blx	r3

	
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
   121b8:	20af      	movs	r0, #175	; 0xaf
   121ba:	4b04      	ldr	r3, [pc, #16]	; (121cc <ssd1306_init+0xa4>)
   121bc:	4798      	blx	r3

}
   121be:	46c0      	nop			; (mov r8, r8)
   121c0:	46bd      	mov	sp, r7
   121c2:	bd80      	pop	{r7, pc}
   121c4:	0001211f 	.word	0x0001211f
   121c8:	00012115 	.word	0x00012115
   121cc:	000121d1 	.word	0x000121d1

000121d0 <ssd1306_write_command>:
 * \param command the command to write
 */


void ssd1306_write_command(uint8_t command)
{
   121d0:	b580      	push	{r7, lr}
   121d2:	b084      	sub	sp, #16
   121d4:	af00      	add	r7, sp, #0
   121d6:	0002      	movs	r2, r0
   121d8:	1dfb      	adds	r3, r7, #7
   121da:	701a      	strb	r2, [r3, #0]
	//Send 0 command byte
	uint8_t data[2];
	data[0] = I2C_COMMAND_SSD1306;
   121dc:	230c      	movs	r3, #12
   121de:	18fb      	adds	r3, r7, r3
   121e0:	2200      	movs	r2, #0
   121e2:	701a      	strb	r2, [r3, #0]
	data[1] = command;
   121e4:	230c      	movs	r3, #12
   121e6:	18fb      	adds	r3, r7, r3
   121e8:	1dfa      	adds	r2, r7, #7
   121ea:	7812      	ldrb	r2, [r2, #0]
   121ec:	705a      	strb	r2, [r3, #1]
	i2cOled.address = SSD1306_I2C_ADDRESS;
   121ee:	4b0c      	ldr	r3, [pc, #48]	; (12220 <ssd1306_write_command+0x50>)
   121f0:	223c      	movs	r2, #60	; 0x3c
   121f2:	701a      	strb	r2, [r3, #0]
	i2cOled.msgOut = (const uint8_t*) &data[0];
   121f4:	4b0a      	ldr	r3, [pc, #40]	; (12220 <ssd1306_write_command+0x50>)
   121f6:	220c      	movs	r2, #12
   121f8:	18ba      	adds	r2, r7, r2
   121fa:	605a      	str	r2, [r3, #4]
	i2cOled.lenOut = sizeof(data);
   121fc:	4b08      	ldr	r3, [pc, #32]	; (12220 <ssd1306_write_command+0x50>)
   121fe:	2202      	movs	r2, #2
   12200:	81da      	strh	r2, [r3, #14]
	i2cOled.msgIn = 0;
   12202:	4b07      	ldr	r3, [pc, #28]	; (12220 <ssd1306_write_command+0x50>)
   12204:	2200      	movs	r2, #0
   12206:	609a      	str	r2, [r3, #8]
	i2cOled.lenIn = 0;
   12208:	4b05      	ldr	r3, [pc, #20]	; (12220 <ssd1306_write_command+0x50>)
   1220a:	2200      	movs	r2, #0
   1220c:	819a      	strh	r2, [r3, #12]
	
	I2cWriteDataWait(&i2cOled, 100);
   1220e:	4b04      	ldr	r3, [pc, #16]	; (12220 <ssd1306_write_command+0x50>)
   12210:	2164      	movs	r1, #100	; 0x64
   12212:	0018      	movs	r0, r3
   12214:	4b03      	ldr	r3, [pc, #12]	; (12224 <ssd1306_write_command+0x54>)
   12216:	4798      	blx	r3
}
   12218:	46c0      	nop			; (mov r8, r8)
   1221a:	46bd      	mov	sp, r7
   1221c:	b004      	add	sp, #16
   1221e:	bd80      	pop	{r7, pc}
   12220:	200043a8 	.word	0x200043a8
   12224:	00014fa5 	.word	0x00014fa5

00012228 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
   12228:	b580      	push	{r7, lr}
   1222a:	b084      	sub	sp, #16
   1222c:	af00      	add	r7, sp, #0
   1222e:	0002      	movs	r2, r0
   12230:	1dfb      	adds	r3, r7, #7
   12232:	701a      	strb	r2, [r3, #0]
	uint8_t msg[2];
	msg[0] = I2C_DATA_SSD1306;
   12234:	230c      	movs	r3, #12
   12236:	18fb      	adds	r3, r7, r3
   12238:	2240      	movs	r2, #64	; 0x40
   1223a:	701a      	strb	r2, [r3, #0]
	msg[1] = data;
   1223c:	230c      	movs	r3, #12
   1223e:	18fb      	adds	r3, r7, r3
   12240:	1dfa      	adds	r2, r7, #7
   12242:	7812      	ldrb	r2, [r2, #0]
   12244:	705a      	strb	r2, [r3, #1]
	i2cOled.address = SSD1306_I2C_ADDRESS;
   12246:	4b0c      	ldr	r3, [pc, #48]	; (12278 <ssd1306_write_data+0x50>)
   12248:	223c      	movs	r2, #60	; 0x3c
   1224a:	701a      	strb	r2, [r3, #0]
	i2cOled.msgOut = (const uint8_t*) &msg[0];
   1224c:	4b0a      	ldr	r3, [pc, #40]	; (12278 <ssd1306_write_data+0x50>)
   1224e:	220c      	movs	r2, #12
   12250:	18ba      	adds	r2, r7, r2
   12252:	605a      	str	r2, [r3, #4]
	i2cOled.lenOut = sizeof(msg);
   12254:	4b08      	ldr	r3, [pc, #32]	; (12278 <ssd1306_write_data+0x50>)
   12256:	2202      	movs	r2, #2
   12258:	81da      	strh	r2, [r3, #14]
	i2cOled.msgIn = 0;
   1225a:	4b07      	ldr	r3, [pc, #28]	; (12278 <ssd1306_write_data+0x50>)
   1225c:	2200      	movs	r2, #0
   1225e:	609a      	str	r2, [r3, #8]
	i2cOled.lenIn = 0;
   12260:	4b05      	ldr	r3, [pc, #20]	; (12278 <ssd1306_write_data+0x50>)
   12262:	2200      	movs	r2, #0
   12264:	819a      	strh	r2, [r3, #12]
	
	I2cWriteDataWait(&i2cOled, 100);
   12266:	4b04      	ldr	r3, [pc, #16]	; (12278 <ssd1306_write_data+0x50>)
   12268:	2164      	movs	r1, #100	; 0x64
   1226a:	0018      	movs	r0, r3
   1226c:	4b03      	ldr	r3, [pc, #12]	; (1227c <ssd1306_write_data+0x54>)
   1226e:	4798      	blx	r3
}
   12270:	46c0      	nop			; (mov r8, r8)
   12272:	46bd      	mov	sp, r7
   12274:	b004      	add	sp, #16
   12276:	bd80      	pop	{r7, pc}
   12278:	200043a8 	.word	0x200043a8
   1227c:	00014fa5 	.word	0x00014fa5

00012280 <gfx_mono_set_framebuffer>:
	uint8_t framebuffer[FRAMEBUFFER_SIZE];
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
   12280:	b580      	push	{r7, lr}
   12282:	b082      	sub	sp, #8
   12284:	af00      	add	r7, sp, #0
   12286:	6078      	str	r0, [r7, #4]
	fbpointer = framebuffer;
   12288:	4b03      	ldr	r3, [pc, #12]	; (12298 <gfx_mono_set_framebuffer+0x18>)
   1228a:	687a      	ldr	r2, [r7, #4]
   1228c:	601a      	str	r2, [r3, #0]
}
   1228e:	46c0      	nop			; (mov r8, r8)
   12290:	46bd      	mov	sp, r7
   12292:	b002      	add	sp, #8
   12294:	bd80      	pop	{r7, pc}
   12296:	46c0      	nop			; (mov r8, r8)
   12298:	2000031c 	.word	0x2000031c

0001229c <gfx_mono_framebuffer_put_byte>:
	gfx_mono_framebuffer_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
   1229c:	b590      	push	{r4, r7, lr}
   1229e:	b083      	sub	sp, #12
   122a0:	af00      	add	r7, sp, #0
   122a2:	0004      	movs	r4, r0
   122a4:	0008      	movs	r0, r1
   122a6:	0011      	movs	r1, r2
   122a8:	1dfb      	adds	r3, r7, #7
   122aa:	1c22      	adds	r2, r4, #0
   122ac:	701a      	strb	r2, [r3, #0]
   122ae:	1dbb      	adds	r3, r7, #6
   122b0:	1c02      	adds	r2, r0, #0
   122b2:	701a      	strb	r2, [r3, #0]
   122b4:	1d7b      	adds	r3, r7, #5
   122b6:	1c0a      	adds	r2, r1, #0
   122b8:	701a      	strb	r2, [r3, #0]
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
   122ba:	4b0a      	ldr	r3, [pc, #40]	; (122e4 <gfx_mono_framebuffer_put_byte+0x48>)
   122bc:	6819      	ldr	r1, [r3, #0]
   122be:	1dfb      	adds	r3, r7, #7
   122c0:	781a      	ldrb	r2, [r3, #0]
   122c2:	0013      	movs	r3, r2
   122c4:	011b      	lsls	r3, r3, #4
   122c6:	189b      	adds	r3, r3, r2
   122c8:	009b      	lsls	r3, r3, #2
   122ca:	001a      	movs	r2, r3
   122cc:	1dbb      	adds	r3, r7, #6
   122ce:	781b      	ldrb	r3, [r3, #0]
   122d0:	18d3      	adds	r3, r2, r3
   122d2:	18cb      	adds	r3, r1, r3
   122d4:	1d7a      	adds	r2, r7, #5
   122d6:	7812      	ldrb	r2, [r2, #0]
   122d8:	701a      	strb	r2, [r3, #0]
}
   122da:	46c0      	nop			; (mov r8, r8)
   122dc:	46bd      	mov	sp, r7
   122de:	b003      	add	sp, #12
   122e0:	bd90      	pop	{r4, r7, pc}
   122e2:	46c0      	nop			; (mov r8, r8)
   122e4:	2000031c 	.word	0x2000031c

000122e8 <gfx_mono_framebuffer_get_byte>:
 * \code
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
   122e8:	b580      	push	{r7, lr}
   122ea:	b082      	sub	sp, #8
   122ec:	af00      	add	r7, sp, #0
   122ee:	0002      	movs	r2, r0
   122f0:	1dfb      	adds	r3, r7, #7
   122f2:	701a      	strb	r2, [r3, #0]
   122f4:	1dbb      	adds	r3, r7, #6
   122f6:	1c0a      	adds	r2, r1, #0
   122f8:	701a      	strb	r2, [r3, #0]
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
   122fa:	4b09      	ldr	r3, [pc, #36]	; (12320 <gfx_mono_framebuffer_get_byte+0x38>)
   122fc:	6819      	ldr	r1, [r3, #0]
   122fe:	1dfb      	adds	r3, r7, #7
   12300:	781a      	ldrb	r2, [r3, #0]
   12302:	0013      	movs	r3, r2
   12304:	011b      	lsls	r3, r3, #4
   12306:	189b      	adds	r3, r3, r2
   12308:	009b      	lsls	r3, r3, #2
   1230a:	001a      	movs	r2, r3
   1230c:	1dbb      	adds	r3, r7, #6
   1230e:	781b      	ldrb	r3, [r3, #0]
   12310:	18d3      	adds	r3, r2, r3
   12312:	18cb      	adds	r3, r1, r3
   12314:	781b      	ldrb	r3, [r3, #0]
}
   12316:	0018      	movs	r0, r3
   12318:	46bd      	mov	sp, r7
   1231a:	b002      	add	sp, #8
   1231c:	bd80      	pop	{r7, pc}
   1231e:	46c0      	nop			; (mov r8, r8)
   12320:	2000031c 	.word	0x2000031c

00012324 <gfx_mono_generic_draw_vertical_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_vertical_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
   12324:	b5b0      	push	{r4, r5, r7, lr}
   12326:	b084      	sub	sp, #16
   12328:	af00      	add	r7, sp, #0
   1232a:	0005      	movs	r5, r0
   1232c:	000c      	movs	r4, r1
   1232e:	0010      	movs	r0, r2
   12330:	0019      	movs	r1, r3
   12332:	1dfb      	adds	r3, r7, #7
   12334:	1c2a      	adds	r2, r5, #0
   12336:	701a      	strb	r2, [r3, #0]
   12338:	1dbb      	adds	r3, r7, #6
   1233a:	1c22      	adds	r2, r4, #0
   1233c:	701a      	strb	r2, [r3, #0]
   1233e:	1d7b      	adds	r3, r7, #5
   12340:	1c02      	adds	r2, r0, #0
   12342:	701a      	strb	r2, [r3, #0]
   12344:	1d3b      	adds	r3, r7, #4
   12346:	1c0a      	adds	r2, r1, #0
   12348:	701a      	strb	r2, [r3, #0]
	if (length == 0) {
   1234a:	1d7b      	adds	r3, r7, #5
   1234c:	781b      	ldrb	r3, [r3, #0]
   1234e:	2b00      	cmp	r3, #0
   12350:	d100      	bne.n	12354 <gfx_mono_generic_draw_vertical_line+0x30>
   12352:	e0a7      	b.n	124a4 <gfx_mono_generic_draw_vertical_line+0x180>
		return;
	}

	gfx_coord_t y2 = y + length - 1;
   12354:	1dba      	adds	r2, r7, #6
   12356:	1d7b      	adds	r3, r7, #5
   12358:	7812      	ldrb	r2, [r2, #0]
   1235a:	781b      	ldrb	r3, [r3, #0]
   1235c:	18d3      	adds	r3, r2, r3
   1235e:	b2da      	uxtb	r2, r3
   12360:	230f      	movs	r3, #15
   12362:	18fb      	adds	r3, r7, r3
   12364:	3a01      	subs	r2, #1
   12366:	701a      	strb	r2, [r3, #0]

	if (y == y2) {
   12368:	1dba      	adds	r2, r7, #6
   1236a:	230f      	movs	r3, #15
   1236c:	18fb      	adds	r3, r7, r3
   1236e:	7812      	ldrb	r2, [r2, #0]
   12370:	781b      	ldrb	r3, [r3, #0]
   12372:	429a      	cmp	r2, r3
   12374:	d109      	bne.n	1238a <gfx_mono_generic_draw_vertical_line+0x66>
		gfx_mono_draw_pixel(x, y, color);
   12376:	1d3b      	adds	r3, r7, #4
   12378:	781a      	ldrb	r2, [r3, #0]
   1237a:	1dbb      	adds	r3, r7, #6
   1237c:	7819      	ldrb	r1, [r3, #0]
   1237e:	1dfb      	adds	r3, r7, #7
   12380:	781b      	ldrb	r3, [r3, #0]
   12382:	0018      	movs	r0, r3
   12384:	4b49      	ldr	r3, [pc, #292]	; (124ac <gfx_mono_generic_draw_vertical_line+0x188>)
   12386:	4798      	blx	r3
		return;
   12388:	e08d      	b.n	124a6 <gfx_mono_generic_draw_vertical_line+0x182>
	}

	if (y2 >= GFX_MONO_LCD_HEIGHT - 1) {
   1238a:	230f      	movs	r3, #15
   1238c:	18fb      	adds	r3, r7, r3
   1238e:	781b      	ldrb	r3, [r3, #0]
   12390:	2b2e      	cmp	r3, #46	; 0x2e
   12392:	d903      	bls.n	1239c <gfx_mono_generic_draw_vertical_line+0x78>
		y2 = GFX_MONO_LCD_HEIGHT - 1;
   12394:	230f      	movs	r3, #15
   12396:	18fb      	adds	r3, r7, r3
   12398:	222f      	movs	r2, #47	; 0x2f
   1239a:	701a      	strb	r2, [r3, #0]
	}

	gfx_coord_t y1page = y / 8;
   1239c:	230e      	movs	r3, #14
   1239e:	18fb      	adds	r3, r7, r3
   123a0:	1dba      	adds	r2, r7, #6
   123a2:	7812      	ldrb	r2, [r2, #0]
   123a4:	08d2      	lsrs	r2, r2, #3
   123a6:	701a      	strb	r2, [r3, #0]
	gfx_coord_t y2page = y2 / 8;
   123a8:	230d      	movs	r3, #13
   123aa:	18fb      	adds	r3, r7, r3
   123ac:	220f      	movs	r2, #15
   123ae:	18ba      	adds	r2, r7, r2
   123b0:	7812      	ldrb	r2, [r2, #0]
   123b2:	08d2      	lsrs	r2, r2, #3
   123b4:	701a      	strb	r2, [r3, #0]

	uint8_t y1bitpos = y & 0x07;
   123b6:	230c      	movs	r3, #12
   123b8:	18fb      	adds	r3, r7, r3
   123ba:	1dba      	adds	r2, r7, #6
   123bc:	7812      	ldrb	r2, [r2, #0]
   123be:	2107      	movs	r1, #7
   123c0:	400a      	ands	r2, r1
   123c2:	701a      	strb	r2, [r3, #0]
	uint8_t y2bitpos = y2 & 0x07;
   123c4:	230b      	movs	r3, #11
   123c6:	18fb      	adds	r3, r7, r3
   123c8:	220f      	movs	r2, #15
   123ca:	18ba      	adds	r2, r7, r2
   123cc:	7812      	ldrb	r2, [r2, #0]
   123ce:	2107      	movs	r1, #7
   123d0:	400a      	ands	r2, r1
   123d2:	701a      	strb	r2, [r3, #0]

	uint8_t y1pixelmask = 0xFF << y1bitpos;
   123d4:	230c      	movs	r3, #12
   123d6:	18fb      	adds	r3, r7, r3
   123d8:	781b      	ldrb	r3, [r3, #0]
   123da:	22ff      	movs	r2, #255	; 0xff
   123dc:	409a      	lsls	r2, r3
   123de:	230a      	movs	r3, #10
   123e0:	18fb      	adds	r3, r7, r3
   123e2:	701a      	strb	r2, [r3, #0]
	uint8_t y2pixelmask = 0xFF >> (7 - y2bitpos);
   123e4:	230b      	movs	r3, #11
   123e6:	18fb      	adds	r3, r7, r3
   123e8:	781b      	ldrb	r3, [r3, #0]
   123ea:	2207      	movs	r2, #7
   123ec:	1ad3      	subs	r3, r2, r3
   123ee:	22ff      	movs	r2, #255	; 0xff
   123f0:	411a      	asrs	r2, r3
   123f2:	2309      	movs	r3, #9
   123f4:	18fb      	adds	r3, r7, r3
   123f6:	701a      	strb	r2, [r3, #0]

	/* The pixels are on the same page; combine masks */
	if (y1page == y2page) {
   123f8:	230e      	movs	r3, #14
   123fa:	18fa      	adds	r2, r7, r3
   123fc:	230d      	movs	r3, #13
   123fe:	18fb      	adds	r3, r7, r3
   12400:	7812      	ldrb	r2, [r2, #0]
   12402:	781b      	ldrb	r3, [r3, #0]
   12404:	429a      	cmp	r2, r3
   12406:	d117      	bne.n	12438 <gfx_mono_generic_draw_vertical_line+0x114>
		uint8_t pixelmask = y1pixelmask & y2pixelmask;
   12408:	2308      	movs	r3, #8
   1240a:	18fb      	adds	r3, r7, r3
   1240c:	220a      	movs	r2, #10
   1240e:	18ba      	adds	r2, r7, r2
   12410:	2109      	movs	r1, #9
   12412:	1879      	adds	r1, r7, r1
   12414:	7812      	ldrb	r2, [r2, #0]
   12416:	7809      	ldrb	r1, [r1, #0]
   12418:	400a      	ands	r2, r1
   1241a:	701a      	strb	r2, [r3, #0]
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
   1241c:	1d3b      	adds	r3, r7, #4
   1241e:	781c      	ldrb	r4, [r3, #0]
   12420:	2308      	movs	r3, #8
   12422:	18fb      	adds	r3, r7, r3
   12424:	781a      	ldrb	r2, [r3, #0]
   12426:	1dfb      	adds	r3, r7, #7
   12428:	7819      	ldrb	r1, [r3, #0]
   1242a:	230e      	movs	r3, #14
   1242c:	18fb      	adds	r3, r7, r3
   1242e:	7818      	ldrb	r0, [r3, #0]
   12430:	0023      	movs	r3, r4
   12432:	4c1f      	ldr	r4, [pc, #124]	; (124b0 <gfx_mono_generic_draw_vertical_line+0x18c>)
   12434:	47a0      	blx	r4
   12436:	e036      	b.n	124a6 <gfx_mono_generic_draw_vertical_line+0x182>
	} else {
		gfx_mono_mask_byte(y1page, x, y1pixelmask, color);
   12438:	1d3b      	adds	r3, r7, #4
   1243a:	781c      	ldrb	r4, [r3, #0]
   1243c:	230a      	movs	r3, #10
   1243e:	18fb      	adds	r3, r7, r3
   12440:	781a      	ldrb	r2, [r3, #0]
   12442:	1dfb      	adds	r3, r7, #7
   12444:	7819      	ldrb	r1, [r3, #0]
   12446:	230e      	movs	r3, #14
   12448:	18fb      	adds	r3, r7, r3
   1244a:	7818      	ldrb	r0, [r3, #0]
   1244c:	0023      	movs	r3, r4
   1244e:	4c18      	ldr	r4, [pc, #96]	; (124b0 <gfx_mono_generic_draw_vertical_line+0x18c>)
   12450:	47a0      	blx	r4

		while (++y1page < y2page) {
   12452:	e00a      	b.n	1246a <gfx_mono_generic_draw_vertical_line+0x146>
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
   12454:	1d3b      	adds	r3, r7, #4
   12456:	781a      	ldrb	r2, [r3, #0]
   12458:	1dfb      	adds	r3, r7, #7
   1245a:	7819      	ldrb	r1, [r3, #0]
   1245c:	230e      	movs	r3, #14
   1245e:	18fb      	adds	r3, r7, r3
   12460:	7818      	ldrb	r0, [r3, #0]
   12462:	0013      	movs	r3, r2
   12464:	22ff      	movs	r2, #255	; 0xff
   12466:	4c12      	ldr	r4, [pc, #72]	; (124b0 <gfx_mono_generic_draw_vertical_line+0x18c>)
   12468:	47a0      	blx	r4
		while (++y1page < y2page) {
   1246a:	230e      	movs	r3, #14
   1246c:	18fb      	adds	r3, r7, r3
   1246e:	220e      	movs	r2, #14
   12470:	18ba      	adds	r2, r7, r2
   12472:	7812      	ldrb	r2, [r2, #0]
   12474:	3201      	adds	r2, #1
   12476:	701a      	strb	r2, [r3, #0]
   12478:	230e      	movs	r3, #14
   1247a:	18fa      	adds	r2, r7, r3
   1247c:	230d      	movs	r3, #13
   1247e:	18fb      	adds	r3, r7, r3
   12480:	7812      	ldrb	r2, [r2, #0]
   12482:	781b      	ldrb	r3, [r3, #0]
   12484:	429a      	cmp	r2, r3
   12486:	d3e5      	bcc.n	12454 <gfx_mono_generic_draw_vertical_line+0x130>
		}

		gfx_mono_mask_byte(y2page, x, y2pixelmask, color);
   12488:	1d3b      	adds	r3, r7, #4
   1248a:	781c      	ldrb	r4, [r3, #0]
   1248c:	2309      	movs	r3, #9
   1248e:	18fb      	adds	r3, r7, r3
   12490:	781a      	ldrb	r2, [r3, #0]
   12492:	1dfb      	adds	r3, r7, #7
   12494:	7819      	ldrb	r1, [r3, #0]
   12496:	230d      	movs	r3, #13
   12498:	18fb      	adds	r3, r7, r3
   1249a:	7818      	ldrb	r0, [r3, #0]
   1249c:	0023      	movs	r3, r4
   1249e:	4c04      	ldr	r4, [pc, #16]	; (124b0 <gfx_mono_generic_draw_vertical_line+0x18c>)
   124a0:	47a0      	blx	r4
   124a2:	e000      	b.n	124a6 <gfx_mono_generic_draw_vertical_line+0x182>
		return;
   124a4:	46c0      	nop			; (mov r8, r8)
	}
}
   124a6:	46bd      	mov	sp, r7
   124a8:	b004      	add	sp, #16
   124aa:	bdb0      	pop	{r4, r5, r7, pc}
   124ac:	00012aed 	.word	0x00012aed
   124b0:	00012cb1 	.word	0x00012cb1

000124b4 <gfx_mono_generic_draw_line>:
 * \param[in]  color       Pixel operation of the line.
 */
void gfx_mono_generic_draw_line(gfx_coord_t x1, gfx_coord_t y1,
		gfx_coord_t x2, gfx_coord_t y2,
		enum gfx_mono_color color)
{
   124b4:	b5b0      	push	{r4, r5, r7, lr}
   124b6:	b084      	sub	sp, #16
   124b8:	af00      	add	r7, sp, #0
   124ba:	0005      	movs	r5, r0
   124bc:	000c      	movs	r4, r1
   124be:	0010      	movs	r0, r2
   124c0:	0019      	movs	r1, r3
   124c2:	1dfb      	adds	r3, r7, #7
   124c4:	1c2a      	adds	r2, r5, #0
   124c6:	701a      	strb	r2, [r3, #0]
   124c8:	1dbb      	adds	r3, r7, #6
   124ca:	1c22      	adds	r2, r4, #0
   124cc:	701a      	strb	r2, [r3, #0]
   124ce:	1d7b      	adds	r3, r7, #5
   124d0:	1c02      	adds	r2, r0, #0
   124d2:	701a      	strb	r2, [r3, #0]
   124d4:	1d3b      	adds	r3, r7, #4
   124d6:	1c0a      	adds	r2, r1, #0
   124d8:	701a      	strb	r2, [r3, #0]
	int8_t dx;
	int8_t dy;
	int8_t e;

	/* swap x1,y1  with x2,y2 */
	if (x1 > x2) {
   124da:	1dfa      	adds	r2, r7, #7
   124dc:	1d7b      	adds	r3, r7, #5
   124de:	7812      	ldrb	r2, [r2, #0]
   124e0:	781b      	ldrb	r3, [r3, #0]
   124e2:	429a      	cmp	r2, r3
   124e4:	d91b      	bls.n	1251e <gfx_mono_generic_draw_line+0x6a>
		dx = x1;
   124e6:	230a      	movs	r3, #10
   124e8:	18fb      	adds	r3, r7, r3
   124ea:	1dfa      	adds	r2, r7, #7
   124ec:	7812      	ldrb	r2, [r2, #0]
   124ee:	701a      	strb	r2, [r3, #0]
		x1 = x2;
   124f0:	1dfb      	adds	r3, r7, #7
   124f2:	1d7a      	adds	r2, r7, #5
   124f4:	7812      	ldrb	r2, [r2, #0]
   124f6:	701a      	strb	r2, [r3, #0]
		x2 = dx;
   124f8:	1d7b      	adds	r3, r7, #5
   124fa:	220a      	movs	r2, #10
   124fc:	18ba      	adds	r2, r7, r2
   124fe:	7812      	ldrb	r2, [r2, #0]
   12500:	701a      	strb	r2, [r3, #0]
		dy = y1;
   12502:	2309      	movs	r3, #9
   12504:	18fb      	adds	r3, r7, r3
   12506:	1dba      	adds	r2, r7, #6
   12508:	7812      	ldrb	r2, [r2, #0]
   1250a:	701a      	strb	r2, [r3, #0]
		y1 = y2;
   1250c:	1dbb      	adds	r3, r7, #6
   1250e:	1d3a      	adds	r2, r7, #4
   12510:	7812      	ldrb	r2, [r2, #0]
   12512:	701a      	strb	r2, [r3, #0]
		y2 = dy;
   12514:	1d3b      	adds	r3, r7, #4
   12516:	2209      	movs	r2, #9
   12518:	18ba      	adds	r2, r7, r2
   1251a:	7812      	ldrb	r2, [r2, #0]
   1251c:	701a      	strb	r2, [r3, #0]
	}

	dx = x2 - x1;
   1251e:	1d7a      	adds	r2, r7, #5
   12520:	1dfb      	adds	r3, r7, #7
   12522:	7812      	ldrb	r2, [r2, #0]
   12524:	781b      	ldrb	r3, [r3, #0]
   12526:	1ad3      	subs	r3, r2, r3
   12528:	b2da      	uxtb	r2, r3
   1252a:	230a      	movs	r3, #10
   1252c:	18fb      	adds	r3, r7, r3
   1252e:	701a      	strb	r2, [r3, #0]
	dy = y2 - y1;
   12530:	1d3a      	adds	r2, r7, #4
   12532:	1dbb      	adds	r3, r7, #6
   12534:	7812      	ldrb	r2, [r2, #0]
   12536:	781b      	ldrb	r3, [r3, #0]
   12538:	1ad3      	subs	r3, r2, r3
   1253a:	b2da      	uxtb	r2, r3
   1253c:	2309      	movs	r3, #9
   1253e:	18fb      	adds	r3, r7, r3
   12540:	701a      	strb	r2, [r3, #0]

	x = x1;
   12542:	230e      	movs	r3, #14
   12544:	18fb      	adds	r3, r7, r3
   12546:	1dfa      	adds	r2, r7, #7
   12548:	7812      	ldrb	r2, [r2, #0]
   1254a:	701a      	strb	r2, [r3, #0]
	y = y1;
   1254c:	230d      	movs	r3, #13
   1254e:	18fb      	adds	r3, r7, r3
   12550:	1dba      	adds	r2, r7, #6
   12552:	7812      	ldrb	r2, [r2, #0]
   12554:	701a      	strb	r2, [r3, #0]

	if (dx < 0) {
   12556:	230a      	movs	r3, #10
   12558:	18fb      	adds	r3, r7, r3
   1255a:	781b      	ldrb	r3, [r3, #0]
   1255c:	2b7f      	cmp	r3, #127	; 0x7f
   1255e:	d90c      	bls.n	1257a <gfx_mono_generic_draw_line+0xc6>
		xinc = -1;
   12560:	230c      	movs	r3, #12
   12562:	18fb      	adds	r3, r7, r3
   12564:	22ff      	movs	r2, #255	; 0xff
   12566:	701a      	strb	r2, [r3, #0]
		dx = -dx;
   12568:	230a      	movs	r3, #10
   1256a:	18fb      	adds	r3, r7, r3
   1256c:	781b      	ldrb	r3, [r3, #0]
   1256e:	425b      	negs	r3, r3
   12570:	b2da      	uxtb	r2, r3
   12572:	230a      	movs	r3, #10
   12574:	18fb      	adds	r3, r7, r3
   12576:	701a      	strb	r2, [r3, #0]
   12578:	e003      	b.n	12582 <gfx_mono_generic_draw_line+0xce>
	} else {
		xinc = 1;
   1257a:	230c      	movs	r3, #12
   1257c:	18fb      	adds	r3, r7, r3
   1257e:	2201      	movs	r2, #1
   12580:	701a      	strb	r2, [r3, #0]
	}

	if (dy < 0) {
   12582:	2309      	movs	r3, #9
   12584:	18fb      	adds	r3, r7, r3
   12586:	781b      	ldrb	r3, [r3, #0]
   12588:	2b7f      	cmp	r3, #127	; 0x7f
   1258a:	d90c      	bls.n	125a6 <gfx_mono_generic_draw_line+0xf2>
		yinc = -1;
   1258c:	230b      	movs	r3, #11
   1258e:	18fb      	adds	r3, r7, r3
   12590:	22ff      	movs	r2, #255	; 0xff
   12592:	701a      	strb	r2, [r3, #0]
		dy = -dy;
   12594:	2309      	movs	r3, #9
   12596:	18fb      	adds	r3, r7, r3
   12598:	781b      	ldrb	r3, [r3, #0]
   1259a:	425b      	negs	r3, r3
   1259c:	b2da      	uxtb	r2, r3
   1259e:	2309      	movs	r3, #9
   125a0:	18fb      	adds	r3, r7, r3
   125a2:	701a      	strb	r2, [r3, #0]
   125a4:	e003      	b.n	125ae <gfx_mono_generic_draw_line+0xfa>
	} else {
		yinc = 1;
   125a6:	230b      	movs	r3, #11
   125a8:	18fb      	adds	r3, r7, r3
   125aa:	2201      	movs	r2, #1
   125ac:	701a      	strb	r2, [r3, #0]
	}

	if (dx > dy) {
   125ae:	230a      	movs	r3, #10
   125b0:	18fa      	adds	r2, r7, r3
   125b2:	2309      	movs	r3, #9
   125b4:	18fb      	adds	r3, r7, r3
   125b6:	7812      	ldrb	r2, [r2, #0]
   125b8:	b252      	sxtb	r2, r2
   125ba:	781b      	ldrb	r3, [r3, #0]
   125bc:	b25b      	sxtb	r3, r3
   125be:	429a      	cmp	r2, r3
   125c0:	dd5b      	ble.n	1267a <gfx_mono_generic_draw_line+0x1c6>
		e = dy - dx;
   125c2:	2309      	movs	r3, #9
   125c4:	18fb      	adds	r3, r7, r3
   125c6:	781a      	ldrb	r2, [r3, #0]
   125c8:	230a      	movs	r3, #10
   125ca:	18fb      	adds	r3, r7, r3
   125cc:	781b      	ldrb	r3, [r3, #0]
   125ce:	1ad3      	subs	r3, r2, r3
   125d0:	b2da      	uxtb	r2, r3
   125d2:	2308      	movs	r3, #8
   125d4:	18fb      	adds	r3, r7, r3
   125d6:	701a      	strb	r2, [r3, #0]
		for (i = 0; i <= dx; i++) {
   125d8:	230f      	movs	r3, #15
   125da:	18fb      	adds	r3, r7, r3
   125dc:	2200      	movs	r2, #0
   125de:	701a      	strb	r2, [r3, #0]
   125e0:	e041      	b.n	12666 <gfx_mono_generic_draw_line+0x1b2>
			gfx_mono_draw_pixel(x, y, color);
   125e2:	2320      	movs	r3, #32
   125e4:	18fb      	adds	r3, r7, r3
   125e6:	781a      	ldrb	r2, [r3, #0]
   125e8:	230d      	movs	r3, #13
   125ea:	18fb      	adds	r3, r7, r3
   125ec:	7819      	ldrb	r1, [r3, #0]
   125ee:	230e      	movs	r3, #14
   125f0:	18fb      	adds	r3, r7, r3
   125f2:	781b      	ldrb	r3, [r3, #0]
   125f4:	0018      	movs	r0, r3
   125f6:	4b50      	ldr	r3, [pc, #320]	; (12738 <gfx_mono_generic_draw_line+0x284>)
   125f8:	4798      	blx	r3
			if (e >= 0) {
   125fa:	2308      	movs	r3, #8
   125fc:	18fb      	adds	r3, r7, r3
   125fe:	781b      	ldrb	r3, [r3, #0]
   12600:	2b7f      	cmp	r3, #127	; 0x7f
   12602:	d814      	bhi.n	1262e <gfx_mono_generic_draw_line+0x17a>
				e -= dx;
   12604:	2308      	movs	r3, #8
   12606:	18fb      	adds	r3, r7, r3
   12608:	781a      	ldrb	r2, [r3, #0]
   1260a:	230a      	movs	r3, #10
   1260c:	18fb      	adds	r3, r7, r3
   1260e:	781b      	ldrb	r3, [r3, #0]
   12610:	1ad3      	subs	r3, r2, r3
   12612:	b2da      	uxtb	r2, r3
   12614:	2308      	movs	r3, #8
   12616:	18fb      	adds	r3, r7, r3
   12618:	701a      	strb	r2, [r3, #0]
				y += yinc;
   1261a:	230b      	movs	r3, #11
   1261c:	18fb      	adds	r3, r7, r3
   1261e:	7819      	ldrb	r1, [r3, #0]
   12620:	230d      	movs	r3, #13
   12622:	18fb      	adds	r3, r7, r3
   12624:	220d      	movs	r2, #13
   12626:	18ba      	adds	r2, r7, r2
   12628:	7812      	ldrb	r2, [r2, #0]
   1262a:	188a      	adds	r2, r1, r2
   1262c:	701a      	strb	r2, [r3, #0]
			}

			e += dy;
   1262e:	2308      	movs	r3, #8
   12630:	18fb      	adds	r3, r7, r3
   12632:	781a      	ldrb	r2, [r3, #0]
   12634:	2309      	movs	r3, #9
   12636:	18fb      	adds	r3, r7, r3
   12638:	781b      	ldrb	r3, [r3, #0]
   1263a:	18d3      	adds	r3, r2, r3
   1263c:	b2da      	uxtb	r2, r3
   1263e:	2308      	movs	r3, #8
   12640:	18fb      	adds	r3, r7, r3
   12642:	701a      	strb	r2, [r3, #0]
			x += xinc;
   12644:	230c      	movs	r3, #12
   12646:	18fb      	adds	r3, r7, r3
   12648:	7819      	ldrb	r1, [r3, #0]
   1264a:	230e      	movs	r3, #14
   1264c:	18fb      	adds	r3, r7, r3
   1264e:	220e      	movs	r2, #14
   12650:	18ba      	adds	r2, r7, r2
   12652:	7812      	ldrb	r2, [r2, #0]
   12654:	188a      	adds	r2, r1, r2
   12656:	701a      	strb	r2, [r3, #0]
		for (i = 0; i <= dx; i++) {
   12658:	230f      	movs	r3, #15
   1265a:	18fb      	adds	r3, r7, r3
   1265c:	781a      	ldrb	r2, [r3, #0]
   1265e:	230f      	movs	r3, #15
   12660:	18fb      	adds	r3, r7, r3
   12662:	3201      	adds	r2, #1
   12664:	701a      	strb	r2, [r3, #0]
   12666:	230f      	movs	r3, #15
   12668:	18fb      	adds	r3, r7, r3
   1266a:	781a      	ldrb	r2, [r3, #0]
   1266c:	230a      	movs	r3, #10
   1266e:	18fb      	adds	r3, r7, r3
   12670:	781b      	ldrb	r3, [r3, #0]
   12672:	b25b      	sxtb	r3, r3
   12674:	429a      	cmp	r2, r3
   12676:	ddb4      	ble.n	125e2 <gfx_mono_generic_draw_line+0x12e>

			e += dx;
			y += yinc;
		}
	}
}
   12678:	e05a      	b.n	12730 <gfx_mono_generic_draw_line+0x27c>
		e = dx - dy;
   1267a:	230a      	movs	r3, #10
   1267c:	18fb      	adds	r3, r7, r3
   1267e:	781a      	ldrb	r2, [r3, #0]
   12680:	2309      	movs	r3, #9
   12682:	18fb      	adds	r3, r7, r3
   12684:	781b      	ldrb	r3, [r3, #0]
   12686:	1ad3      	subs	r3, r2, r3
   12688:	b2da      	uxtb	r2, r3
   1268a:	2308      	movs	r3, #8
   1268c:	18fb      	adds	r3, r7, r3
   1268e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i <= dy; i++) {
   12690:	230f      	movs	r3, #15
   12692:	18fb      	adds	r3, r7, r3
   12694:	2200      	movs	r2, #0
   12696:	701a      	strb	r2, [r3, #0]
   12698:	e041      	b.n	1271e <gfx_mono_generic_draw_line+0x26a>
			gfx_mono_draw_pixel(x, y, color);
   1269a:	2320      	movs	r3, #32
   1269c:	18fb      	adds	r3, r7, r3
   1269e:	781a      	ldrb	r2, [r3, #0]
   126a0:	230d      	movs	r3, #13
   126a2:	18fb      	adds	r3, r7, r3
   126a4:	7819      	ldrb	r1, [r3, #0]
   126a6:	230e      	movs	r3, #14
   126a8:	18fb      	adds	r3, r7, r3
   126aa:	781b      	ldrb	r3, [r3, #0]
   126ac:	0018      	movs	r0, r3
   126ae:	4b22      	ldr	r3, [pc, #136]	; (12738 <gfx_mono_generic_draw_line+0x284>)
   126b0:	4798      	blx	r3
			if (e >= 0) {
   126b2:	2308      	movs	r3, #8
   126b4:	18fb      	adds	r3, r7, r3
   126b6:	781b      	ldrb	r3, [r3, #0]
   126b8:	2b7f      	cmp	r3, #127	; 0x7f
   126ba:	d814      	bhi.n	126e6 <gfx_mono_generic_draw_line+0x232>
				e -= dy;
   126bc:	2308      	movs	r3, #8
   126be:	18fb      	adds	r3, r7, r3
   126c0:	781a      	ldrb	r2, [r3, #0]
   126c2:	2309      	movs	r3, #9
   126c4:	18fb      	adds	r3, r7, r3
   126c6:	781b      	ldrb	r3, [r3, #0]
   126c8:	1ad3      	subs	r3, r2, r3
   126ca:	b2da      	uxtb	r2, r3
   126cc:	2308      	movs	r3, #8
   126ce:	18fb      	adds	r3, r7, r3
   126d0:	701a      	strb	r2, [r3, #0]
				x += xinc;
   126d2:	230c      	movs	r3, #12
   126d4:	18fb      	adds	r3, r7, r3
   126d6:	7819      	ldrb	r1, [r3, #0]
   126d8:	230e      	movs	r3, #14
   126da:	18fb      	adds	r3, r7, r3
   126dc:	220e      	movs	r2, #14
   126de:	18ba      	adds	r2, r7, r2
   126e0:	7812      	ldrb	r2, [r2, #0]
   126e2:	188a      	adds	r2, r1, r2
   126e4:	701a      	strb	r2, [r3, #0]
			e += dx;
   126e6:	2308      	movs	r3, #8
   126e8:	18fb      	adds	r3, r7, r3
   126ea:	781a      	ldrb	r2, [r3, #0]
   126ec:	230a      	movs	r3, #10
   126ee:	18fb      	adds	r3, r7, r3
   126f0:	781b      	ldrb	r3, [r3, #0]
   126f2:	18d3      	adds	r3, r2, r3
   126f4:	b2da      	uxtb	r2, r3
   126f6:	2308      	movs	r3, #8
   126f8:	18fb      	adds	r3, r7, r3
   126fa:	701a      	strb	r2, [r3, #0]
			y += yinc;
   126fc:	230b      	movs	r3, #11
   126fe:	18fb      	adds	r3, r7, r3
   12700:	7819      	ldrb	r1, [r3, #0]
   12702:	230d      	movs	r3, #13
   12704:	18fb      	adds	r3, r7, r3
   12706:	220d      	movs	r2, #13
   12708:	18ba      	adds	r2, r7, r2
   1270a:	7812      	ldrb	r2, [r2, #0]
   1270c:	188a      	adds	r2, r1, r2
   1270e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i <= dy; i++) {
   12710:	230f      	movs	r3, #15
   12712:	18fb      	adds	r3, r7, r3
   12714:	781a      	ldrb	r2, [r3, #0]
   12716:	230f      	movs	r3, #15
   12718:	18fb      	adds	r3, r7, r3
   1271a:	3201      	adds	r2, #1
   1271c:	701a      	strb	r2, [r3, #0]
   1271e:	230f      	movs	r3, #15
   12720:	18fb      	adds	r3, r7, r3
   12722:	781a      	ldrb	r2, [r3, #0]
   12724:	2309      	movs	r3, #9
   12726:	18fb      	adds	r3, r7, r3
   12728:	781b      	ldrb	r3, [r3, #0]
   1272a:	b25b      	sxtb	r3, r3
   1272c:	429a      	cmp	r2, r3
   1272e:	ddb4      	ble.n	1269a <gfx_mono_generic_draw_line+0x1e6>
}
   12730:	46c0      	nop			; (mov r8, r8)
   12732:	46bd      	mov	sp, r7
   12734:	b004      	add	sp, #16
   12736:	bdb0      	pop	{r4, r5, r7, pc}
   12738:	00012aed 	.word	0x00012aed

0001273c <gfx_mono_generic_draw_filled_circle>:
 * \param[in]  quadrant_mask Bitmask indicating which quadrants to draw.
 */
void gfx_mono_generic_draw_filled_circle(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t radius, enum gfx_mono_color color,
		uint8_t quadrant_mask)
{
   1273c:	b5b0      	push	{r4, r5, r7, lr}
   1273e:	b084      	sub	sp, #16
   12740:	af00      	add	r7, sp, #0
   12742:	0005      	movs	r5, r0
   12744:	000c      	movs	r4, r1
   12746:	0010      	movs	r0, r2
   12748:	0019      	movs	r1, r3
   1274a:	1dfb      	adds	r3, r7, #7
   1274c:	1c2a      	adds	r2, r5, #0
   1274e:	701a      	strb	r2, [r3, #0]
   12750:	1dbb      	adds	r3, r7, #6
   12752:	1c22      	adds	r2, r4, #0
   12754:	701a      	strb	r2, [r3, #0]
   12756:	1d7b      	adds	r3, r7, #5
   12758:	1c02      	adds	r2, r0, #0
   1275a:	701a      	strb	r2, [r3, #0]
   1275c:	1d3b      	adds	r3, r7, #4
   1275e:	1c0a      	adds	r2, r1, #0
   12760:	701a      	strb	r2, [r3, #0]
	gfx_coord_t offset_x;
	gfx_coord_t offset_y;
	int16_t error;

	/* Draw only a pixel if radius is zero. */
	if (radius == 0) {
   12762:	1d7b      	adds	r3, r7, #5
   12764:	781b      	ldrb	r3, [r3, #0]
   12766:	2b00      	cmp	r3, #0
   12768:	d109      	bne.n	1277e <gfx_mono_generic_draw_filled_circle+0x42>
		gfx_mono_draw_pixel(x, y, color);
   1276a:	1d3b      	adds	r3, r7, #4
   1276c:	781a      	ldrb	r2, [r3, #0]
   1276e:	1dbb      	adds	r3, r7, #6
   12770:	7819      	ldrb	r1, [r3, #0]
   12772:	1dfb      	adds	r3, r7, #7
   12774:	781b      	ldrb	r3, [r3, #0]
   12776:	0018      	movs	r0, r3
   12778:	4b8f      	ldr	r3, [pc, #572]	; (129b8 <gfx_mono_generic_draw_filled_circle+0x27c>)
   1277a:	4798      	blx	r3
		return;
   1277c:	e118      	b.n	129b0 <gfx_mono_generic_draw_filled_circle+0x274>
	}

	/* Set up start iterators. */
	offset_x = 0;
   1277e:	230f      	movs	r3, #15
   12780:	18fb      	adds	r3, r7, r3
   12782:	2200      	movs	r2, #0
   12784:	701a      	strb	r2, [r3, #0]
	offset_y = radius;
   12786:	230e      	movs	r3, #14
   12788:	18fb      	adds	r3, r7, r3
   1278a:	1d7a      	adds	r2, r7, #5
   1278c:	7812      	ldrb	r2, [r2, #0]
   1278e:	701a      	strb	r2, [r3, #0]
	error = 3 - 2 * radius;
   12790:	1d7b      	adds	r3, r7, #5
   12792:	781b      	ldrb	r3, [r3, #0]
   12794:	b29b      	uxth	r3, r3
   12796:	18db      	adds	r3, r3, r3
   12798:	b29b      	uxth	r3, r3
   1279a:	2203      	movs	r2, #3
   1279c:	1ad3      	subs	r3, r2, r3
   1279e:	b29a      	uxth	r2, r3
   127a0:	230c      	movs	r3, #12
   127a2:	18fb      	adds	r3, r7, r3
   127a4:	801a      	strh	r2, [r3, #0]

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
   127a6:	e0fa      	b.n	1299e <gfx_mono_generic_draw_filled_circle+0x262>
		/* Draw vertical lines tracking each quadrant. */
		if (quadrant_mask & GFX_QUADRANT0) {
   127a8:	2320      	movs	r3, #32
   127aa:	18fb      	adds	r3, r7, r3
   127ac:	781b      	ldrb	r3, [r3, #0]
   127ae:	2203      	movs	r2, #3
   127b0:	4013      	ands	r3, r2
   127b2:	d02d      	beq.n	12810 <gfx_mono_generic_draw_filled_circle+0xd4>
			gfx_mono_draw_vertical_line(x + offset_y,
   127b4:	1dfa      	adds	r2, r7, #7
   127b6:	230e      	movs	r3, #14
   127b8:	18fb      	adds	r3, r7, r3
   127ba:	7812      	ldrb	r2, [r2, #0]
   127bc:	781b      	ldrb	r3, [r3, #0]
   127be:	18d3      	adds	r3, r2, r3
   127c0:	b2d8      	uxtb	r0, r3
   127c2:	1dba      	adds	r2, r7, #6
   127c4:	230f      	movs	r3, #15
   127c6:	18fb      	adds	r3, r7, r3
   127c8:	7812      	ldrb	r2, [r2, #0]
   127ca:	781b      	ldrb	r3, [r3, #0]
   127cc:	1ad3      	subs	r3, r2, r3
   127ce:	b2d9      	uxtb	r1, r3
   127d0:	230f      	movs	r3, #15
   127d2:	18fb      	adds	r3, r7, r3
   127d4:	781b      	ldrb	r3, [r3, #0]
   127d6:	3301      	adds	r3, #1
   127d8:	b2da      	uxtb	r2, r3
   127da:	1d3b      	adds	r3, r7, #4
   127dc:	781b      	ldrb	r3, [r3, #0]
   127de:	4c77      	ldr	r4, [pc, #476]	; (129bc <gfx_mono_generic_draw_filled_circle+0x280>)
   127e0:	47a0      	blx	r4
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
   127e2:	1dfa      	adds	r2, r7, #7
   127e4:	230f      	movs	r3, #15
   127e6:	18fb      	adds	r3, r7, r3
   127e8:	7812      	ldrb	r2, [r2, #0]
   127ea:	781b      	ldrb	r3, [r3, #0]
   127ec:	18d3      	adds	r3, r2, r3
   127ee:	b2d8      	uxtb	r0, r3
   127f0:	1dba      	adds	r2, r7, #6
   127f2:	230e      	movs	r3, #14
   127f4:	18fb      	adds	r3, r7, r3
   127f6:	7812      	ldrb	r2, [r2, #0]
   127f8:	781b      	ldrb	r3, [r3, #0]
   127fa:	1ad3      	subs	r3, r2, r3
   127fc:	b2d9      	uxtb	r1, r3
   127fe:	230e      	movs	r3, #14
   12800:	18fb      	adds	r3, r7, r3
   12802:	781b      	ldrb	r3, [r3, #0]
   12804:	3301      	adds	r3, #1
   12806:	b2da      	uxtb	r2, r3
   12808:	1d3b      	adds	r3, r7, #4
   1280a:	781b      	ldrb	r3, [r3, #0]
   1280c:	4c6b      	ldr	r4, [pc, #428]	; (129bc <gfx_mono_generic_draw_filled_circle+0x280>)
   1280e:	47a0      	blx	r4
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT1) {
   12810:	2320      	movs	r3, #32
   12812:	18fb      	adds	r3, r7, r3
   12814:	781b      	ldrb	r3, [r3, #0]
   12816:	220c      	movs	r2, #12
   12818:	4013      	ands	r3, r2
   1281a:	d02d      	beq.n	12878 <gfx_mono_generic_draw_filled_circle+0x13c>
			gfx_mono_draw_vertical_line(x - offset_y,
   1281c:	1dfa      	adds	r2, r7, #7
   1281e:	230e      	movs	r3, #14
   12820:	18fb      	adds	r3, r7, r3
   12822:	7812      	ldrb	r2, [r2, #0]
   12824:	781b      	ldrb	r3, [r3, #0]
   12826:	1ad3      	subs	r3, r2, r3
   12828:	b2d8      	uxtb	r0, r3
   1282a:	1dba      	adds	r2, r7, #6
   1282c:	230f      	movs	r3, #15
   1282e:	18fb      	adds	r3, r7, r3
   12830:	7812      	ldrb	r2, [r2, #0]
   12832:	781b      	ldrb	r3, [r3, #0]
   12834:	1ad3      	subs	r3, r2, r3
   12836:	b2d9      	uxtb	r1, r3
   12838:	230f      	movs	r3, #15
   1283a:	18fb      	adds	r3, r7, r3
   1283c:	781b      	ldrb	r3, [r3, #0]
   1283e:	3301      	adds	r3, #1
   12840:	b2da      	uxtb	r2, r3
   12842:	1d3b      	adds	r3, r7, #4
   12844:	781b      	ldrb	r3, [r3, #0]
   12846:	4c5d      	ldr	r4, [pc, #372]	; (129bc <gfx_mono_generic_draw_filled_circle+0x280>)
   12848:	47a0      	blx	r4
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
   1284a:	1dfa      	adds	r2, r7, #7
   1284c:	230f      	movs	r3, #15
   1284e:	18fb      	adds	r3, r7, r3
   12850:	7812      	ldrb	r2, [r2, #0]
   12852:	781b      	ldrb	r3, [r3, #0]
   12854:	1ad3      	subs	r3, r2, r3
   12856:	b2d8      	uxtb	r0, r3
   12858:	1dba      	adds	r2, r7, #6
   1285a:	230e      	movs	r3, #14
   1285c:	18fb      	adds	r3, r7, r3
   1285e:	7812      	ldrb	r2, [r2, #0]
   12860:	781b      	ldrb	r3, [r3, #0]
   12862:	1ad3      	subs	r3, r2, r3
   12864:	b2d9      	uxtb	r1, r3
   12866:	230e      	movs	r3, #14
   12868:	18fb      	adds	r3, r7, r3
   1286a:	781b      	ldrb	r3, [r3, #0]
   1286c:	3301      	adds	r3, #1
   1286e:	b2da      	uxtb	r2, r3
   12870:	1d3b      	adds	r3, r7, #4
   12872:	781b      	ldrb	r3, [r3, #0]
   12874:	4c51      	ldr	r4, [pc, #324]	; (129bc <gfx_mono_generic_draw_filled_circle+0x280>)
   12876:	47a0      	blx	r4
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT2) {
   12878:	2320      	movs	r3, #32
   1287a:	18fb      	adds	r3, r7, r3
   1287c:	781b      	ldrb	r3, [r3, #0]
   1287e:	2230      	movs	r2, #48	; 0x30
   12880:	4013      	ands	r3, r2
   12882:	d025      	beq.n	128d0 <gfx_mono_generic_draw_filled_circle+0x194>
			gfx_mono_draw_vertical_line(x - offset_y,
   12884:	1dfa      	adds	r2, r7, #7
   12886:	230e      	movs	r3, #14
   12888:	18fb      	adds	r3, r7, r3
   1288a:	7812      	ldrb	r2, [r2, #0]
   1288c:	781b      	ldrb	r3, [r3, #0]
   1288e:	1ad3      	subs	r3, r2, r3
   12890:	b2d8      	uxtb	r0, r3
   12892:	230f      	movs	r3, #15
   12894:	18fb      	adds	r3, r7, r3
   12896:	781b      	ldrb	r3, [r3, #0]
   12898:	3301      	adds	r3, #1
   1289a:	b2da      	uxtb	r2, r3
   1289c:	1d3b      	adds	r3, r7, #4
   1289e:	781c      	ldrb	r4, [r3, #0]
   128a0:	1dbb      	adds	r3, r7, #6
   128a2:	7819      	ldrb	r1, [r3, #0]
   128a4:	0023      	movs	r3, r4
   128a6:	4c45      	ldr	r4, [pc, #276]	; (129bc <gfx_mono_generic_draw_filled_circle+0x280>)
   128a8:	47a0      	blx	r4
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
   128aa:	1dfa      	adds	r2, r7, #7
   128ac:	230f      	movs	r3, #15
   128ae:	18fb      	adds	r3, r7, r3
   128b0:	7812      	ldrb	r2, [r2, #0]
   128b2:	781b      	ldrb	r3, [r3, #0]
   128b4:	1ad3      	subs	r3, r2, r3
   128b6:	b2d8      	uxtb	r0, r3
   128b8:	230e      	movs	r3, #14
   128ba:	18fb      	adds	r3, r7, r3
   128bc:	781b      	ldrb	r3, [r3, #0]
   128be:	3301      	adds	r3, #1
   128c0:	b2da      	uxtb	r2, r3
   128c2:	1d3b      	adds	r3, r7, #4
   128c4:	781c      	ldrb	r4, [r3, #0]
   128c6:	1dbb      	adds	r3, r7, #6
   128c8:	7819      	ldrb	r1, [r3, #0]
   128ca:	0023      	movs	r3, r4
   128cc:	4c3b      	ldr	r4, [pc, #236]	; (129bc <gfx_mono_generic_draw_filled_circle+0x280>)
   128ce:	47a0      	blx	r4
					y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT3) {
   128d0:	2320      	movs	r3, #32
   128d2:	18fb      	adds	r3, r7, r3
   128d4:	781b      	ldrb	r3, [r3, #0]
   128d6:	22c0      	movs	r2, #192	; 0xc0
   128d8:	4013      	ands	r3, r2
   128da:	d025      	beq.n	12928 <gfx_mono_generic_draw_filled_circle+0x1ec>
			gfx_mono_draw_vertical_line(x + offset_y,
   128dc:	1dfa      	adds	r2, r7, #7
   128de:	230e      	movs	r3, #14
   128e0:	18fb      	adds	r3, r7, r3
   128e2:	7812      	ldrb	r2, [r2, #0]
   128e4:	781b      	ldrb	r3, [r3, #0]
   128e6:	18d3      	adds	r3, r2, r3
   128e8:	b2d8      	uxtb	r0, r3
   128ea:	230f      	movs	r3, #15
   128ec:	18fb      	adds	r3, r7, r3
   128ee:	781b      	ldrb	r3, [r3, #0]
   128f0:	3301      	adds	r3, #1
   128f2:	b2da      	uxtb	r2, r3
   128f4:	1d3b      	adds	r3, r7, #4
   128f6:	781c      	ldrb	r4, [r3, #0]
   128f8:	1dbb      	adds	r3, r7, #6
   128fa:	7819      	ldrb	r1, [r3, #0]
   128fc:	0023      	movs	r3, r4
   128fe:	4c2f      	ldr	r4, [pc, #188]	; (129bc <gfx_mono_generic_draw_filled_circle+0x280>)
   12900:	47a0      	blx	r4
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
   12902:	1dfa      	adds	r2, r7, #7
   12904:	230f      	movs	r3, #15
   12906:	18fb      	adds	r3, r7, r3
   12908:	7812      	ldrb	r2, [r2, #0]
   1290a:	781b      	ldrb	r3, [r3, #0]
   1290c:	18d3      	adds	r3, r2, r3
   1290e:	b2d8      	uxtb	r0, r3
   12910:	230e      	movs	r3, #14
   12912:	18fb      	adds	r3, r7, r3
   12914:	781b      	ldrb	r3, [r3, #0]
   12916:	3301      	adds	r3, #1
   12918:	b2da      	uxtb	r2, r3
   1291a:	1d3b      	adds	r3, r7, #4
   1291c:	781c      	ldrb	r4, [r3, #0]
   1291e:	1dbb      	adds	r3, r7, #6
   12920:	7819      	ldrb	r1, [r3, #0]
   12922:	0023      	movs	r3, r4
   12924:	4c25      	ldr	r4, [pc, #148]	; (129bc <gfx_mono_generic_draw_filled_circle+0x280>)
   12926:	47a0      	blx	r4
					y, offset_y + 1, color);
		}

		/* Update error value and step offset_y when required. */
		if (error < 0) {
   12928:	230c      	movs	r3, #12
   1292a:	18fb      	adds	r3, r7, r3
   1292c:	2200      	movs	r2, #0
   1292e:	5e9b      	ldrsh	r3, [r3, r2]
   12930:	2b00      	cmp	r3, #0
   12932:	da10      	bge.n	12956 <gfx_mono_generic_draw_filled_circle+0x21a>
			error += ((offset_x << 2) + 6);
   12934:	230f      	movs	r3, #15
   12936:	18fb      	adds	r3, r7, r3
   12938:	781b      	ldrb	r3, [r3, #0]
   1293a:	b29b      	uxth	r3, r3
   1293c:	009b      	lsls	r3, r3, #2
   1293e:	b29a      	uxth	r2, r3
   12940:	230c      	movs	r3, #12
   12942:	18fb      	adds	r3, r7, r3
   12944:	881b      	ldrh	r3, [r3, #0]
   12946:	18d3      	adds	r3, r2, r3
   12948:	b29b      	uxth	r3, r3
   1294a:	3306      	adds	r3, #6
   1294c:	b29a      	uxth	r2, r3
   1294e:	230c      	movs	r3, #12
   12950:	18fb      	adds	r3, r7, r3
   12952:	801a      	strh	r2, [r3, #0]
   12954:	e01c      	b.n	12990 <gfx_mono_generic_draw_filled_circle+0x254>
		} else {
			error += (((offset_x - offset_y) << 2) + 10);
   12956:	230f      	movs	r3, #15
   12958:	18fb      	adds	r3, r7, r3
   1295a:	781b      	ldrb	r3, [r3, #0]
   1295c:	b29a      	uxth	r2, r3
   1295e:	230e      	movs	r3, #14
   12960:	18fb      	adds	r3, r7, r3
   12962:	781b      	ldrb	r3, [r3, #0]
   12964:	b29b      	uxth	r3, r3
   12966:	1ad3      	subs	r3, r2, r3
   12968:	b29b      	uxth	r3, r3
   1296a:	009b      	lsls	r3, r3, #2
   1296c:	b29a      	uxth	r2, r3
   1296e:	230c      	movs	r3, #12
   12970:	18fb      	adds	r3, r7, r3
   12972:	881b      	ldrh	r3, [r3, #0]
   12974:	18d3      	adds	r3, r2, r3
   12976:	b29b      	uxth	r3, r3
   12978:	330a      	adds	r3, #10
   1297a:	b29a      	uxth	r2, r3
   1297c:	230c      	movs	r3, #12
   1297e:	18fb      	adds	r3, r7, r3
   12980:	801a      	strh	r2, [r3, #0]
			--offset_y;
   12982:	230e      	movs	r3, #14
   12984:	18fb      	adds	r3, r7, r3
   12986:	220e      	movs	r2, #14
   12988:	18ba      	adds	r2, r7, r2
   1298a:	7812      	ldrb	r2, [r2, #0]
   1298c:	3a01      	subs	r2, #1
   1298e:	701a      	strb	r2, [r3, #0]
		}

		/* Next X. */
		++offset_x;
   12990:	230f      	movs	r3, #15
   12992:	18fb      	adds	r3, r7, r3
   12994:	220f      	movs	r2, #15
   12996:	18ba      	adds	r2, r7, r2
   12998:	7812      	ldrb	r2, [r2, #0]
   1299a:	3201      	adds	r2, #1
   1299c:	701a      	strb	r2, [r3, #0]
	while (offset_x <= offset_y) {
   1299e:	230f      	movs	r3, #15
   129a0:	18fa      	adds	r2, r7, r3
   129a2:	230e      	movs	r3, #14
   129a4:	18fb      	adds	r3, r7, r3
   129a6:	7812      	ldrb	r2, [r2, #0]
   129a8:	781b      	ldrb	r3, [r3, #0]
   129aa:	429a      	cmp	r2, r3
   129ac:	d800      	bhi.n	129b0 <gfx_mono_generic_draw_filled_circle+0x274>
   129ae:	e6fb      	b.n	127a8 <gfx_mono_generic_draw_filled_circle+0x6c>
	}
}
   129b0:	46bd      	mov	sp, r7
   129b2:	b004      	add	sp, #16
   129b4:	bdb0      	pop	{r4, r5, r7, pc}
   129b6:	46c0      	nop			; (mov r8, r8)
   129b8:	00012aed 	.word	0x00012aed
   129bc:	00012325 	.word	0x00012325

000129c0 <ssd1306_set_page_address>:
 * RAM.
 *
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
   129c0:	b580      	push	{r7, lr}
   129c2:	b082      	sub	sp, #8
   129c4:	af00      	add	r7, sp, #0
   129c6:	0002      	movs	r2, r0
   129c8:	1dfb      	adds	r3, r7, #7
   129ca:	701a      	strb	r2, [r3, #0]
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
   129cc:	1dfb      	adds	r3, r7, #7
   129ce:	1dfa      	adds	r2, r7, #7
   129d0:	7812      	ldrb	r2, [r2, #0]
   129d2:	210f      	movs	r1, #15
   129d4:	400a      	ands	r2, r1
   129d6:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
   129d8:	1dfb      	adds	r3, r7, #7
   129da:	781b      	ldrb	r3, [r3, #0]
   129dc:	2250      	movs	r2, #80	; 0x50
   129de:	4252      	negs	r2, r2
   129e0:	4313      	orrs	r3, r2
   129e2:	b2db      	uxtb	r3, r3
   129e4:	0018      	movs	r0, r3
   129e6:	4b03      	ldr	r3, [pc, #12]	; (129f4 <ssd1306_set_page_address+0x34>)
   129e8:	4798      	blx	r3
}
   129ea:	46c0      	nop			; (mov r8, r8)
   129ec:	46bd      	mov	sp, r7
   129ee:	b002      	add	sp, #8
   129f0:	bd80      	pop	{r7, pc}
   129f2:	46c0      	nop			; (mov r8, r8)
   129f4:	000121d1 	.word	0x000121d1

000129f8 <ssd1306_set_column_address>:
 * \brief Set current column in display RAM
 *
 * \param address the column address
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
   129f8:	b580      	push	{r7, lr}
   129fa:	b082      	sub	sp, #8
   129fc:	af00      	add	r7, sp, #0
   129fe:	0002      	movs	r2, r0
   12a00:	1dfb      	adds	r3, r7, #7
   12a02:	701a      	strb	r2, [r3, #0]
	// Make sure the address is 7 bits
	address &= 0x7F;
   12a04:	1dfb      	adds	r3, r7, #7
   12a06:	1dfa      	adds	r2, r7, #7
   12a08:	7812      	ldrb	r2, [r2, #0]
   12a0a:	217f      	movs	r1, #127	; 0x7f
   12a0c:	400a      	ands	r2, r1
   12a0e:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
   12a10:	1dfb      	adds	r3, r7, #7
   12a12:	781b      	ldrb	r3, [r3, #0]
   12a14:	091b      	lsrs	r3, r3, #4
   12a16:	b2db      	uxtb	r3, r3
   12a18:	2210      	movs	r2, #16
   12a1a:	4313      	orrs	r3, r2
   12a1c:	b2db      	uxtb	r3, r3
   12a1e:	0018      	movs	r0, r3
   12a20:	4b06      	ldr	r3, [pc, #24]	; (12a3c <ssd1306_set_column_address+0x44>)
   12a22:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
   12a24:	1dfb      	adds	r3, r7, #7
   12a26:	781b      	ldrb	r3, [r3, #0]
   12a28:	220f      	movs	r2, #15
   12a2a:	4013      	ands	r3, r2
   12a2c:	b2db      	uxtb	r3, r3
   12a2e:	0018      	movs	r0, r3
   12a30:	4b02      	ldr	r3, [pc, #8]	; (12a3c <ssd1306_set_column_address+0x44>)
   12a32:	4798      	blx	r3
}
   12a34:	46c0      	nop			; (mov r8, r8)
   12a36:	46bd      	mov	sp, r7
   12a38:	b002      	add	sp, #8
   12a3a:	bd80      	pop	{r7, pc}
   12a3c:	000121d1 	.word	0x000121d1

00012a40 <ssd1306_set_display_start_line_address>:
 * \brief Set the display start draw line address
 *
 * This function will set which line should be the start draw line for the OLED.
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
   12a40:	b580      	push	{r7, lr}
   12a42:	b082      	sub	sp, #8
   12a44:	af00      	add	r7, sp, #0
   12a46:	0002      	movs	r2, r0
   12a48:	1dfb      	adds	r3, r7, #7
   12a4a:	701a      	strb	r2, [r3, #0]
	// Make sure address is 6 bits
	address &= 0x3F;
   12a4c:	1dfb      	adds	r3, r7, #7
   12a4e:	1dfa      	adds	r2, r7, #7
   12a50:	7812      	ldrb	r2, [r2, #0]
   12a52:	213f      	movs	r1, #63	; 0x3f
   12a54:	400a      	ands	r2, r1
   12a56:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
   12a58:	1dfb      	adds	r3, r7, #7
   12a5a:	781b      	ldrb	r3, [r3, #0]
   12a5c:	2240      	movs	r2, #64	; 0x40
   12a5e:	4313      	orrs	r3, r2
   12a60:	b2db      	uxtb	r3, r3
   12a62:	0018      	movs	r0, r3
   12a64:	4b02      	ldr	r3, [pc, #8]	; (12a70 <ssd1306_set_display_start_line_address+0x30>)
   12a66:	4798      	blx	r3
}
   12a68:	46c0      	nop			; (mov r8, r8)
   12a6a:	46bd      	mov	sp, r7
   12a6c:	b002      	add	sp, #8
   12a6e:	bd80      	pop	{r7, pc}
   12a70:	000121d1 	.word	0x000121d1

00012a74 <gfx_mono_ssd1306_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_ssd1306_init(void)
{
   12a74:	b590      	push	{r4, r7, lr}
   12a76:	b083      	sub	sp, #12
   12a78:	af00      	add	r7, sp, #0
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_SSD1306_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
   12a7a:	4b17      	ldr	r3, [pc, #92]	; (12ad8 <gfx_mono_ssd1306_init+0x64>)
   12a7c:	0018      	movs	r0, r3
   12a7e:	4b17      	ldr	r3, [pc, #92]	; (12adc <gfx_mono_ssd1306_init+0x68>)
   12a80:	4798      	blx	r3
#endif

	/* Initialize the low-level display controller. */
	ssd1306_init();
   12a82:	4b17      	ldr	r3, [pc, #92]	; (12ae0 <gfx_mono_ssd1306_init+0x6c>)
   12a84:	4798      	blx	r3

	/* Set display to output data from line 0 */
	ssd1306_set_display_start_line_address(0);
   12a86:	2000      	movs	r0, #0
   12a88:	4b16      	ldr	r3, [pc, #88]	; (12ae4 <gfx_mono_ssd1306_init+0x70>)
   12a8a:	4798      	blx	r3

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
   12a8c:	1dfb      	adds	r3, r7, #7
   12a8e:	2200      	movs	r2, #0
   12a90:	701a      	strb	r2, [r3, #0]
   12a92:	e019      	b.n	12ac8 <gfx_mono_ssd1306_init+0x54>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
   12a94:	1dbb      	adds	r3, r7, #6
   12a96:	2200      	movs	r2, #0
   12a98:	701a      	strb	r2, [r3, #0]
   12a9a:	e00c      	b.n	12ab6 <gfx_mono_ssd1306_init+0x42>
			gfx_mono_ssd1306_put_byte(page, column, 0xFF, true);
   12a9c:	1dbb      	adds	r3, r7, #6
   12a9e:	7819      	ldrb	r1, [r3, #0]
   12aa0:	1dfb      	adds	r3, r7, #7
   12aa2:	7818      	ldrb	r0, [r3, #0]
   12aa4:	2301      	movs	r3, #1
   12aa6:	22ff      	movs	r2, #255	; 0xff
   12aa8:	4c0f      	ldr	r4, [pc, #60]	; (12ae8 <gfx_mono_ssd1306_init+0x74>)
   12aaa:	47a0      	blx	r4
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
   12aac:	1dbb      	adds	r3, r7, #6
   12aae:	781a      	ldrb	r2, [r3, #0]
   12ab0:	1dbb      	adds	r3, r7, #6
   12ab2:	3201      	adds	r2, #1
   12ab4:	701a      	strb	r2, [r3, #0]
   12ab6:	1dbb      	adds	r3, r7, #6
   12ab8:	781b      	ldrb	r3, [r3, #0]
   12aba:	2b43      	cmp	r3, #67	; 0x43
   12abc:	d9ee      	bls.n	12a9c <gfx_mono_ssd1306_init+0x28>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
   12abe:	1dfb      	adds	r3, r7, #7
   12ac0:	781a      	ldrb	r2, [r3, #0]
   12ac2:	1dfb      	adds	r3, r7, #7
   12ac4:	3201      	adds	r2, #1
   12ac6:	701a      	strb	r2, [r3, #0]
   12ac8:	1dfb      	adds	r3, r7, #7
   12aca:	781b      	ldrb	r3, [r3, #0]
   12acc:	2b05      	cmp	r3, #5
   12ace:	d9e1      	bls.n	12a94 <gfx_mono_ssd1306_init+0x20>
		}
	}
}
   12ad0:	46c0      	nop			; (mov r8, r8)
   12ad2:	46bd      	mov	sp, r7
   12ad4:	b003      	add	sp, #12
   12ad6:	bd90      	pop	{r4, r7, pc}
   12ad8:	20000320 	.word	0x20000320
   12adc:	00012281 	.word	0x00012281
   12ae0:	00012129 	.word	0x00012129
   12ae4:	00012a41 	.word	0x00012a41
   12ae8:	00012be1 	.word	0x00012be1

00012aec <gfx_mono_ssd1306_draw_pixel>:
	gfx_mono_ssd1306_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
   12aec:	b590      	push	{r4, r7, lr}
   12aee:	b085      	sub	sp, #20
   12af0:	af00      	add	r7, sp, #0
   12af2:	0004      	movs	r4, r0
   12af4:	0008      	movs	r0, r1
   12af6:	0011      	movs	r1, r2
   12af8:	1dfb      	adds	r3, r7, #7
   12afa:	1c22      	adds	r2, r4, #0
   12afc:	701a      	strb	r2, [r3, #0]
   12afe:	1dbb      	adds	r3, r7, #6
   12b00:	1c02      	adds	r2, r0, #0
   12b02:	701a      	strb	r2, [r3, #0]
   12b04:	1d7b      	adds	r3, r7, #5
   12b06:	1c0a      	adds	r2, r1, #0
   12b08:	701a      	strb	r2, [r3, #0]
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
   12b0a:	1dfb      	adds	r3, r7, #7
   12b0c:	781b      	ldrb	r3, [r3, #0]
   12b0e:	2b43      	cmp	r3, #67	; 0x43
   12b10:	d85d      	bhi.n	12bce <gfx_mono_ssd1306_draw_pixel+0xe2>
   12b12:	1dbb      	adds	r3, r7, #6
   12b14:	781b      	ldrb	r3, [r3, #0]
   12b16:	2b2f      	cmp	r3, #47	; 0x2f
   12b18:	d859      	bhi.n	12bce <gfx_mono_ssd1306_draw_pixel+0xe2>
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
   12b1a:	230e      	movs	r3, #14
   12b1c:	18fb      	adds	r3, r7, r3
   12b1e:	1dba      	adds	r2, r7, #6
   12b20:	7812      	ldrb	r2, [r2, #0]
   12b22:	08d2      	lsrs	r2, r2, #3
   12b24:	701a      	strb	r2, [r3, #0]
	pixel_mask = (1 << (y - (page * 8)));
   12b26:	1dbb      	adds	r3, r7, #6
   12b28:	781a      	ldrb	r2, [r3, #0]
   12b2a:	230e      	movs	r3, #14
   12b2c:	18fb      	adds	r3, r7, r3
   12b2e:	781b      	ldrb	r3, [r3, #0]
   12b30:	00db      	lsls	r3, r3, #3
   12b32:	1ad3      	subs	r3, r2, r3
   12b34:	2201      	movs	r2, #1
   12b36:	409a      	lsls	r2, r3
   12b38:	230d      	movs	r3, #13
   12b3a:	18fb      	adds	r3, r7, r3
   12b3c:	701a      	strb	r2, [r3, #0]
	/*
	 * Read the page containing the pixel in interest, then perform the
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);
   12b3e:	230f      	movs	r3, #15
   12b40:	18fc      	adds	r4, r7, r3
   12b42:	1dfb      	adds	r3, r7, #7
   12b44:	781a      	ldrb	r2, [r3, #0]
   12b46:	230e      	movs	r3, #14
   12b48:	18fb      	adds	r3, r7, r3
   12b4a:	781b      	ldrb	r3, [r3, #0]
   12b4c:	0011      	movs	r1, r2
   12b4e:	0018      	movs	r0, r3
   12b50:	4b21      	ldr	r3, [pc, #132]	; (12bd8 <gfx_mono_ssd1306_draw_pixel+0xec>)
   12b52:	4798      	blx	r3
   12b54:	0003      	movs	r3, r0
   12b56:	7023      	strb	r3, [r4, #0]

	switch (color) {
   12b58:	1d7b      	adds	r3, r7, #5
   12b5a:	781b      	ldrb	r3, [r3, #0]
   12b5c:	2b01      	cmp	r3, #1
   12b5e:	d004      	beq.n	12b6a <gfx_mono_ssd1306_draw_pixel+0x7e>
   12b60:	2b02      	cmp	r3, #2
   12b62:	d01d      	beq.n	12ba0 <gfx_mono_ssd1306_draw_pixel+0xb4>
   12b64:	2b00      	cmp	r3, #0
   12b66:	d00b      	beq.n	12b80 <gfx_mono_ssd1306_draw_pixel+0x94>
	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
		break;

	default:
		break;
   12b68:	e025      	b.n	12bb6 <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value |= pixel_mask;
   12b6a:	230f      	movs	r3, #15
   12b6c:	18fb      	adds	r3, r7, r3
   12b6e:	220f      	movs	r2, #15
   12b70:	18b9      	adds	r1, r7, r2
   12b72:	220d      	movs	r2, #13
   12b74:	18ba      	adds	r2, r7, r2
   12b76:	7809      	ldrb	r1, [r1, #0]
   12b78:	7812      	ldrb	r2, [r2, #0]
   12b7a:	430a      	orrs	r2, r1
   12b7c:	701a      	strb	r2, [r3, #0]
		break;
   12b7e:	e01a      	b.n	12bb6 <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value &= ~pixel_mask;
   12b80:	230d      	movs	r3, #13
   12b82:	18fb      	adds	r3, r7, r3
   12b84:	781b      	ldrb	r3, [r3, #0]
   12b86:	b25b      	sxtb	r3, r3
   12b88:	43db      	mvns	r3, r3
   12b8a:	b25b      	sxtb	r3, r3
   12b8c:	220f      	movs	r2, #15
   12b8e:	18ba      	adds	r2, r7, r2
   12b90:	7812      	ldrb	r2, [r2, #0]
   12b92:	b252      	sxtb	r2, r2
   12b94:	4013      	ands	r3, r2
   12b96:	b25a      	sxtb	r2, r3
   12b98:	230f      	movs	r3, #15
   12b9a:	18fb      	adds	r3, r7, r3
   12b9c:	701a      	strb	r2, [r3, #0]
		break;
   12b9e:	e00a      	b.n	12bb6 <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value ^= pixel_mask;
   12ba0:	230f      	movs	r3, #15
   12ba2:	18fb      	adds	r3, r7, r3
   12ba4:	220f      	movs	r2, #15
   12ba6:	18b9      	adds	r1, r7, r2
   12ba8:	220d      	movs	r2, #13
   12baa:	18ba      	adds	r2, r7, r2
   12bac:	7809      	ldrb	r1, [r1, #0]
   12bae:	7812      	ldrb	r2, [r2, #0]
   12bb0:	404a      	eors	r2, r1
   12bb2:	701a      	strb	r2, [r3, #0]
		break;
   12bb4:	46c0      	nop			; (mov r8, r8)
	}

	gfx_mono_put_byte(page, x, pixel_value);
   12bb6:	230f      	movs	r3, #15
   12bb8:	18fb      	adds	r3, r7, r3
   12bba:	781a      	ldrb	r2, [r3, #0]
   12bbc:	1dfb      	adds	r3, r7, #7
   12bbe:	7819      	ldrb	r1, [r3, #0]
   12bc0:	230e      	movs	r3, #14
   12bc2:	18fb      	adds	r3, r7, r3
   12bc4:	7818      	ldrb	r0, [r3, #0]
   12bc6:	2300      	movs	r3, #0
   12bc8:	4c04      	ldr	r4, [pc, #16]	; (12bdc <gfx_mono_ssd1306_draw_pixel+0xf0>)
   12bca:	47a0      	blx	r4
   12bcc:	e000      	b.n	12bd0 <gfx_mono_ssd1306_draw_pixel+0xe4>
		return;
   12bce:	46c0      	nop			; (mov r8, r8)
}
   12bd0:	46bd      	mov	sp, r7
   12bd2:	b005      	add	sp, #20
   12bd4:	bd90      	pop	{r4, r7, pc}
   12bd6:	46c0      	nop			; (mov r8, r8)
   12bd8:	00012c81 	.word	0x00012c81
   12bdc:	00012be1 	.word	0x00012be1

00012be0 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
   12be0:	b5b0      	push	{r4, r5, r7, lr}
   12be2:	b082      	sub	sp, #8
   12be4:	af00      	add	r7, sp, #0
   12be6:	0005      	movs	r5, r0
   12be8:	000c      	movs	r4, r1
   12bea:	0010      	movs	r0, r2
   12bec:	0019      	movs	r1, r3
   12bee:	1dfb      	adds	r3, r7, #7
   12bf0:	1c2a      	adds	r2, r5, #0
   12bf2:	701a      	strb	r2, [r3, #0]
   12bf4:	1dbb      	adds	r3, r7, #6
   12bf6:	1c22      	adds	r2, r4, #0
   12bf8:	701a      	strb	r2, [r3, #0]
   12bfa:	1d7b      	adds	r3, r7, #5
   12bfc:	1c02      	adds	r2, r0, #0
   12bfe:	701a      	strb	r2, [r3, #0]
   12c00:	1d3b      	adds	r3, r7, #4
   12c02:	1c0a      	adds	r2, r1, #0
   12c04:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
   12c06:	1d3b      	adds	r3, r7, #4
   12c08:	781b      	ldrb	r3, [r3, #0]
   12c0a:	2201      	movs	r2, #1
   12c0c:	4053      	eors	r3, r2
   12c0e:	b2db      	uxtb	r3, r3
   12c10:	2b00      	cmp	r3, #0
   12c12:	d00d      	beq.n	12c30 <gfx_mono_ssd1306_put_byte+0x50>
   12c14:	1dbb      	adds	r3, r7, #6
   12c16:	781a      	ldrb	r2, [r3, #0]
   12c18:	1dfb      	adds	r3, r7, #7
   12c1a:	781b      	ldrb	r3, [r3, #0]
   12c1c:	0011      	movs	r1, r2
   12c1e:	0018      	movs	r0, r3
   12c20:	4b12      	ldr	r3, [pc, #72]	; (12c6c <gfx_mono_ssd1306_put_byte+0x8c>)
   12c22:	4798      	blx	r3
   12c24:	0003      	movs	r3, r0
   12c26:	001a      	movs	r2, r3
   12c28:	1d7b      	adds	r3, r7, #5
   12c2a:	781b      	ldrb	r3, [r3, #0]
   12c2c:	4293      	cmp	r3, r2
   12c2e:	d018      	beq.n	12c62 <gfx_mono_ssd1306_put_byte+0x82>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
   12c30:	1d7b      	adds	r3, r7, #5
   12c32:	781a      	ldrb	r2, [r3, #0]
   12c34:	1dbb      	adds	r3, r7, #6
   12c36:	7819      	ldrb	r1, [r3, #0]
   12c38:	1dfb      	adds	r3, r7, #7
   12c3a:	781b      	ldrb	r3, [r3, #0]
   12c3c:	0018      	movs	r0, r3
   12c3e:	4b0c      	ldr	r3, [pc, #48]	; (12c70 <gfx_mono_ssd1306_put_byte+0x90>)
   12c40:	4798      	blx	r3
#endif

	ssd1306_set_page_address(page);
   12c42:	1dfb      	adds	r3, r7, #7
   12c44:	781b      	ldrb	r3, [r3, #0]
   12c46:	0018      	movs	r0, r3
   12c48:	4b0a      	ldr	r3, [pc, #40]	; (12c74 <gfx_mono_ssd1306_put_byte+0x94>)
   12c4a:	4798      	blx	r3
	ssd1306_set_column_address(column);
   12c4c:	1dbb      	adds	r3, r7, #6
   12c4e:	781b      	ldrb	r3, [r3, #0]
   12c50:	0018      	movs	r0, r3
   12c52:	4b09      	ldr	r3, [pc, #36]	; (12c78 <gfx_mono_ssd1306_put_byte+0x98>)
   12c54:	4798      	blx	r3

	ssd1306_write_data(data);
   12c56:	1d7b      	adds	r3, r7, #5
   12c58:	781b      	ldrb	r3, [r3, #0]
   12c5a:	0018      	movs	r0, r3
   12c5c:	4b07      	ldr	r3, [pc, #28]	; (12c7c <gfx_mono_ssd1306_put_byte+0x9c>)
   12c5e:	4798      	blx	r3
   12c60:	e000      	b.n	12c64 <gfx_mono_ssd1306_put_byte+0x84>
		return;
   12c62:	46c0      	nop			; (mov r8, r8)
}
   12c64:	46bd      	mov	sp, r7
   12c66:	b002      	add	sp, #8
   12c68:	bdb0      	pop	{r4, r5, r7, pc}
   12c6a:	46c0      	nop			; (mov r8, r8)
   12c6c:	000122e9 	.word	0x000122e9
   12c70:	0001229d 	.word	0x0001229d
   12c74:	000129c1 	.word	0x000129c1
   12c78:	000129f9 	.word	0x000129f9
   12c7c:	00012229 	.word	0x00012229

00012c80 <gfx_mono_ssd1306_get_byte>:
 * \code
	data = gfx_mono_ssd1306_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
   12c80:	b580      	push	{r7, lr}
   12c82:	b082      	sub	sp, #8
   12c84:	af00      	add	r7, sp, #0
   12c86:	0002      	movs	r2, r0
   12c88:	1dfb      	adds	r3, r7, #7
   12c8a:	701a      	strb	r2, [r3, #0]
   12c8c:	1dbb      	adds	r3, r7, #6
   12c8e:	1c0a      	adds	r2, r1, #0
   12c90:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
   12c92:	1dbb      	adds	r3, r7, #6
   12c94:	781a      	ldrb	r2, [r3, #0]
   12c96:	1dfb      	adds	r3, r7, #7
   12c98:	781b      	ldrb	r3, [r3, #0]
   12c9a:	0011      	movs	r1, r2
   12c9c:	0018      	movs	r0, r3
   12c9e:	4b03      	ldr	r3, [pc, #12]	; (12cac <gfx_mono_ssd1306_get_byte+0x2c>)
   12ca0:	4798      	blx	r3
   12ca2:	0003      	movs	r3, r0
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
   12ca4:	0018      	movs	r0, r3
   12ca6:	46bd      	mov	sp, r7
   12ca8:	b002      	add	sp, #8
   12caa:	bd80      	pop	{r7, pc}
   12cac:	000122e9 	.word	0x000122e9

00012cb0 <gfx_mono_ssd1306_mask_byte>:
	gfx_mono_ssd1306_mask_byte(0,0,0xAA,GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_mask_byte(gfx_coord_t page, gfx_coord_t column,
		gfx_mono_color_t pixel_mask, gfx_mono_color_t color)
{
   12cb0:	b5b0      	push	{r4, r5, r7, lr}
   12cb2:	b084      	sub	sp, #16
   12cb4:	af00      	add	r7, sp, #0
   12cb6:	0005      	movs	r5, r0
   12cb8:	000c      	movs	r4, r1
   12cba:	0010      	movs	r0, r2
   12cbc:	0019      	movs	r1, r3
   12cbe:	1dfb      	adds	r3, r7, #7
   12cc0:	1c2a      	adds	r2, r5, #0
   12cc2:	701a      	strb	r2, [r3, #0]
   12cc4:	1dbb      	adds	r3, r7, #6
   12cc6:	1c22      	adds	r2, r4, #0
   12cc8:	701a      	strb	r2, [r3, #0]
   12cca:	1d7b      	adds	r3, r7, #5
   12ccc:	1c02      	adds	r2, r0, #0
   12cce:	701a      	strb	r2, [r3, #0]
   12cd0:	1d3b      	adds	r3, r7, #4
   12cd2:	1c0a      	adds	r2, r1, #0
   12cd4:	701a      	strb	r2, [r3, #0]
	gfx_mono_color_t temp = gfx_mono_get_byte(page, column);
   12cd6:	230f      	movs	r3, #15
   12cd8:	18fc      	adds	r4, r7, r3
   12cda:	1dbb      	adds	r3, r7, #6
   12cdc:	781a      	ldrb	r2, [r3, #0]
   12cde:	1dfb      	adds	r3, r7, #7
   12ce0:	781b      	ldrb	r3, [r3, #0]
   12ce2:	0011      	movs	r1, r2
   12ce4:	0018      	movs	r0, r3
   12ce6:	4b1f      	ldr	r3, [pc, #124]	; (12d64 <gfx_mono_ssd1306_mask_byte+0xb4>)
   12ce8:	4798      	blx	r3
   12cea:	0003      	movs	r3, r0
   12cec:	7023      	strb	r3, [r4, #0]

	switch (color) {
   12cee:	1d3b      	adds	r3, r7, #4
   12cf0:	781b      	ldrb	r3, [r3, #0]
   12cf2:	2b01      	cmp	r3, #1
   12cf4:	d004      	beq.n	12d00 <gfx_mono_ssd1306_mask_byte+0x50>
   12cf6:	2b02      	cmp	r3, #2
   12cf8:	d01b      	beq.n	12d32 <gfx_mono_ssd1306_mask_byte+0x82>
   12cfa:	2b00      	cmp	r3, #0
   12cfc:	d00a      	beq.n	12d14 <gfx_mono_ssd1306_mask_byte+0x64>
	case GFX_PIXEL_XOR:
		temp ^= pixel_mask;
		break;

	default:
		break;
   12cfe:	e022      	b.n	12d46 <gfx_mono_ssd1306_mask_byte+0x96>
		temp |= pixel_mask;
   12d00:	230f      	movs	r3, #15
   12d02:	18fb      	adds	r3, r7, r3
   12d04:	220f      	movs	r2, #15
   12d06:	18b9      	adds	r1, r7, r2
   12d08:	1d7a      	adds	r2, r7, #5
   12d0a:	7809      	ldrb	r1, [r1, #0]
   12d0c:	7812      	ldrb	r2, [r2, #0]
   12d0e:	430a      	orrs	r2, r1
   12d10:	701a      	strb	r2, [r3, #0]
		break;
   12d12:	e018      	b.n	12d46 <gfx_mono_ssd1306_mask_byte+0x96>
		temp &= ~pixel_mask;
   12d14:	1d7b      	adds	r3, r7, #5
   12d16:	781b      	ldrb	r3, [r3, #0]
   12d18:	b25b      	sxtb	r3, r3
   12d1a:	43db      	mvns	r3, r3
   12d1c:	b25b      	sxtb	r3, r3
   12d1e:	220f      	movs	r2, #15
   12d20:	18ba      	adds	r2, r7, r2
   12d22:	7812      	ldrb	r2, [r2, #0]
   12d24:	b252      	sxtb	r2, r2
   12d26:	4013      	ands	r3, r2
   12d28:	b25a      	sxtb	r2, r3
   12d2a:	230f      	movs	r3, #15
   12d2c:	18fb      	adds	r3, r7, r3
   12d2e:	701a      	strb	r2, [r3, #0]
		break;
   12d30:	e009      	b.n	12d46 <gfx_mono_ssd1306_mask_byte+0x96>
		temp ^= pixel_mask;
   12d32:	230f      	movs	r3, #15
   12d34:	18fb      	adds	r3, r7, r3
   12d36:	220f      	movs	r2, #15
   12d38:	18b9      	adds	r1, r7, r2
   12d3a:	1d7a      	adds	r2, r7, #5
   12d3c:	7809      	ldrb	r1, [r1, #0]
   12d3e:	7812      	ldrb	r2, [r2, #0]
   12d40:	404a      	eors	r2, r1
   12d42:	701a      	strb	r2, [r3, #0]
		break;
   12d44:	46c0      	nop			; (mov r8, r8)
	}

	gfx_mono_put_byte(page, column, temp);
   12d46:	230f      	movs	r3, #15
   12d48:	18fb      	adds	r3, r7, r3
   12d4a:	781a      	ldrb	r2, [r3, #0]
   12d4c:	1dbb      	adds	r3, r7, #6
   12d4e:	7819      	ldrb	r1, [r3, #0]
   12d50:	1dfb      	adds	r3, r7, #7
   12d52:	7818      	ldrb	r0, [r3, #0]
   12d54:	2300      	movs	r3, #0
   12d56:	4c04      	ldr	r4, [pc, #16]	; (12d68 <gfx_mono_ssd1306_mask_byte+0xb8>)
   12d58:	47a0      	blx	r4
}
   12d5a:	46c0      	nop			; (mov r8, r8)
   12d5c:	46bd      	mov	sp, r7
   12d5e:	b004      	add	sp, #16
   12d60:	bdb0      	pop	{r4, r5, r7, pc}
   12d62:	46c0      	nop			; (mov r8, r8)
   12d64:	00012c81 	.word	0x00012c81
   12d68:	00012be1 	.word	0x00012be1

00012d6c <adc_is_syncing>:
   12d6c:	b580      	push	{r7, lr}
   12d6e:	b084      	sub	sp, #16
   12d70:	af00      	add	r7, sp, #0
   12d72:	6078      	str	r0, [r7, #4]
   12d74:	687b      	ldr	r3, [r7, #4]
   12d76:	681b      	ldr	r3, [r3, #0]
   12d78:	60fb      	str	r3, [r7, #12]
   12d7a:	68fb      	ldr	r3, [r7, #12]
   12d7c:	7e5b      	ldrb	r3, [r3, #25]
   12d7e:	b2db      	uxtb	r3, r3
   12d80:	b25b      	sxtb	r3, r3
   12d82:	2b00      	cmp	r3, #0
   12d84:	da01      	bge.n	12d8a <adc_is_syncing+0x1e>
   12d86:	2301      	movs	r3, #1
   12d88:	e000      	b.n	12d8c <adc_is_syncing+0x20>
   12d8a:	2300      	movs	r3, #0
   12d8c:	0018      	movs	r0, r3
   12d8e:	46bd      	mov	sp, r7
   12d90:	b004      	add	sp, #16
   12d92:	bd80      	pop	{r7, pc}

00012d94 <adc_start_conversion>:
   12d94:	b580      	push	{r7, lr}
   12d96:	b084      	sub	sp, #16
   12d98:	af00      	add	r7, sp, #0
   12d9a:	6078      	str	r0, [r7, #4]
   12d9c:	687b      	ldr	r3, [r7, #4]
   12d9e:	681b      	ldr	r3, [r3, #0]
   12da0:	60fb      	str	r3, [r7, #12]
   12da2:	46c0      	nop			; (mov r8, r8)
   12da4:	687b      	ldr	r3, [r7, #4]
   12da6:	0018      	movs	r0, r3
   12da8:	4b0b      	ldr	r3, [pc, #44]	; (12dd8 <adc_start_conversion+0x44>)
   12daa:	4798      	blx	r3
   12dac:	1e03      	subs	r3, r0, #0
   12dae:	d1f9      	bne.n	12da4 <adc_start_conversion+0x10>
   12db0:	68fb      	ldr	r3, [r7, #12]
   12db2:	7b1b      	ldrb	r3, [r3, #12]
   12db4:	b2db      	uxtb	r3, r3
   12db6:	2202      	movs	r2, #2
   12db8:	4313      	orrs	r3, r2
   12dba:	b2da      	uxtb	r2, r3
   12dbc:	68fb      	ldr	r3, [r7, #12]
   12dbe:	731a      	strb	r2, [r3, #12]
   12dc0:	46c0      	nop			; (mov r8, r8)
   12dc2:	687b      	ldr	r3, [r7, #4]
   12dc4:	0018      	movs	r0, r3
   12dc6:	4b04      	ldr	r3, [pc, #16]	; (12dd8 <adc_start_conversion+0x44>)
   12dc8:	4798      	blx	r3
   12dca:	1e03      	subs	r3, r0, #0
   12dcc:	d1f9      	bne.n	12dc2 <adc_start_conversion+0x2e>
   12dce:	46c0      	nop			; (mov r8, r8)
   12dd0:	46bd      	mov	sp, r7
   12dd2:	b004      	add	sp, #16
   12dd4:	bd80      	pop	{r7, pc}
   12dd6:	46c0      	nop			; (mov r8, r8)
   12dd8:	00012d6d 	.word	0x00012d6d

00012ddc <adc_disable_interrupt>:
   12ddc:	b580      	push	{r7, lr}
   12dde:	b084      	sub	sp, #16
   12de0:	af00      	add	r7, sp, #0
   12de2:	6078      	str	r0, [r7, #4]
   12de4:	000a      	movs	r2, r1
   12de6:	1cfb      	adds	r3, r7, #3
   12de8:	701a      	strb	r2, [r3, #0]
   12dea:	687b      	ldr	r3, [r7, #4]
   12dec:	681b      	ldr	r3, [r3, #0]
   12dee:	60fb      	str	r3, [r7, #12]
   12df0:	68fb      	ldr	r3, [r7, #12]
   12df2:	1cfa      	adds	r2, r7, #3
   12df4:	7812      	ldrb	r2, [r2, #0]
   12df6:	759a      	strb	r2, [r3, #22]
   12df8:	46c0      	nop			; (mov r8, r8)
   12dfa:	46bd      	mov	sp, r7
   12dfc:	b004      	add	sp, #16
   12dfe:	bd80      	pop	{r7, pc}

00012e00 <_adc_interrupt_handler>:
   12e00:	b580      	push	{r7, lr}
   12e02:	b084      	sub	sp, #16
   12e04:	af00      	add	r7, sp, #0
   12e06:	0002      	movs	r2, r0
   12e08:	1dfb      	adds	r3, r7, #7
   12e0a:	701a      	strb	r2, [r3, #0]
   12e0c:	1dfb      	adds	r3, r7, #7
   12e0e:	781a      	ldrb	r2, [r3, #0]
   12e10:	4b47      	ldr	r3, [pc, #284]	; (12f30 <_adc_interrupt_handler+0x130>)
   12e12:	0092      	lsls	r2, r2, #2
   12e14:	58d3      	ldr	r3, [r2, r3]
   12e16:	60fb      	str	r3, [r7, #12]
   12e18:	68fb      	ldr	r3, [r7, #12]
   12e1a:	681b      	ldr	r3, [r3, #0]
   12e1c:	7e1b      	ldrb	r3, [r3, #24]
   12e1e:	b2da      	uxtb	r2, r3
   12e20:	68fb      	ldr	r3, [r7, #12]
   12e22:	681b      	ldr	r3, [r3, #0]
   12e24:	7ddb      	ldrb	r3, [r3, #23]
   12e26:	b2db      	uxtb	r3, r3
   12e28:	4013      	ands	r3, r2
   12e2a:	b2db      	uxtb	r3, r3
   12e2c:	60bb      	str	r3, [r7, #8]
   12e2e:	68bb      	ldr	r3, [r7, #8]
   12e30:	2201      	movs	r2, #1
   12e32:	4013      	ands	r3, r2
   12e34:	d045      	beq.n	12ec2 <_adc_interrupt_handler+0xc2>
   12e36:	68fb      	ldr	r3, [r7, #12]
   12e38:	681b      	ldr	r3, [r3, #0]
   12e3a:	2201      	movs	r2, #1
   12e3c:	761a      	strb	r2, [r3, #24]
   12e3e:	46c0      	nop			; (mov r8, r8)
   12e40:	68fb      	ldr	r3, [r7, #12]
   12e42:	0018      	movs	r0, r3
   12e44:	4b3b      	ldr	r3, [pc, #236]	; (12f34 <_adc_interrupt_handler+0x134>)
   12e46:	4798      	blx	r3
   12e48:	1e03      	subs	r3, r0, #0
   12e4a:	d1f9      	bne.n	12e40 <_adc_interrupt_handler+0x40>
   12e4c:	68fb      	ldr	r3, [r7, #12]
   12e4e:	695b      	ldr	r3, [r3, #20]
   12e50:	1c99      	adds	r1, r3, #2
   12e52:	68fa      	ldr	r2, [r7, #12]
   12e54:	6151      	str	r1, [r2, #20]
   12e56:	68fa      	ldr	r2, [r7, #12]
   12e58:	6812      	ldr	r2, [r2, #0]
   12e5a:	8b52      	ldrh	r2, [r2, #26]
   12e5c:	b292      	uxth	r2, r2
   12e5e:	801a      	strh	r2, [r3, #0]
   12e60:	68fb      	ldr	r3, [r7, #12]
   12e62:	8b1b      	ldrh	r3, [r3, #24]
   12e64:	b29b      	uxth	r3, r3
   12e66:	3b01      	subs	r3, #1
   12e68:	b29b      	uxth	r3, r3
   12e6a:	68fa      	ldr	r2, [r7, #12]
   12e6c:	1c19      	adds	r1, r3, #0
   12e6e:	8311      	strh	r1, [r2, #24]
   12e70:	2b00      	cmp	r3, #0
   12e72:	d008      	beq.n	12e86 <_adc_interrupt_handler+0x86>
   12e74:	68fb      	ldr	r3, [r7, #12]
   12e76:	7f5b      	ldrb	r3, [r3, #29]
   12e78:	2b00      	cmp	r3, #0
   12e7a:	d022      	beq.n	12ec2 <_adc_interrupt_handler+0xc2>
   12e7c:	68fb      	ldr	r3, [r7, #12]
   12e7e:	0018      	movs	r0, r3
   12e80:	4b2d      	ldr	r3, [pc, #180]	; (12f38 <_adc_interrupt_handler+0x138>)
   12e82:	4798      	blx	r3
   12e84:	e01d      	b.n	12ec2 <_adc_interrupt_handler+0xc2>
   12e86:	68fb      	ldr	r3, [r7, #12]
   12e88:	2101      	movs	r1, #1
   12e8a:	0018      	movs	r0, r3
   12e8c:	4b2b      	ldr	r3, [pc, #172]	; (12f3c <_adc_interrupt_handler+0x13c>)
   12e8e:	4798      	blx	r3
   12e90:	68fb      	ldr	r3, [r7, #12]
   12e92:	7f1b      	ldrb	r3, [r3, #28]
   12e94:	b2db      	uxtb	r3, r3
   12e96:	2b05      	cmp	r3, #5
   12e98:	d113      	bne.n	12ec2 <_adc_interrupt_handler+0xc2>
   12e9a:	68fb      	ldr	r3, [r7, #12]
   12e9c:	2200      	movs	r2, #0
   12e9e:	771a      	strb	r2, [r3, #28]
   12ea0:	68fb      	ldr	r3, [r7, #12]
   12ea2:	7edb      	ldrb	r3, [r3, #27]
   12ea4:	001a      	movs	r2, r3
   12ea6:	2301      	movs	r3, #1
   12ea8:	4013      	ands	r3, r2
   12eaa:	d00a      	beq.n	12ec2 <_adc_interrupt_handler+0xc2>
   12eac:	68fb      	ldr	r3, [r7, #12]
   12eae:	7e9b      	ldrb	r3, [r3, #26]
   12eb0:	001a      	movs	r2, r3
   12eb2:	2301      	movs	r3, #1
   12eb4:	4013      	ands	r3, r2
   12eb6:	d004      	beq.n	12ec2 <_adc_interrupt_handler+0xc2>
   12eb8:	68fb      	ldr	r3, [r7, #12]
   12eba:	689b      	ldr	r3, [r3, #8]
   12ebc:	68fa      	ldr	r2, [r7, #12]
   12ebe:	0010      	movs	r0, r2
   12ec0:	4798      	blx	r3
   12ec2:	68bb      	ldr	r3, [r7, #8]
   12ec4:	2204      	movs	r2, #4
   12ec6:	4013      	ands	r3, r2
   12ec8:	d014      	beq.n	12ef4 <_adc_interrupt_handler+0xf4>
   12eca:	68fb      	ldr	r3, [r7, #12]
   12ecc:	681b      	ldr	r3, [r3, #0]
   12ece:	2204      	movs	r2, #4
   12ed0:	761a      	strb	r2, [r3, #24]
   12ed2:	68fb      	ldr	r3, [r7, #12]
   12ed4:	7edb      	ldrb	r3, [r3, #27]
   12ed6:	001a      	movs	r2, r3
   12ed8:	2302      	movs	r3, #2
   12eda:	4013      	ands	r3, r2
   12edc:	d00a      	beq.n	12ef4 <_adc_interrupt_handler+0xf4>
   12ede:	68fb      	ldr	r3, [r7, #12]
   12ee0:	7e9b      	ldrb	r3, [r3, #26]
   12ee2:	001a      	movs	r2, r3
   12ee4:	2302      	movs	r3, #2
   12ee6:	4013      	ands	r3, r2
   12ee8:	d004      	beq.n	12ef4 <_adc_interrupt_handler+0xf4>
   12eea:	68fb      	ldr	r3, [r7, #12]
   12eec:	68db      	ldr	r3, [r3, #12]
   12eee:	68fa      	ldr	r2, [r7, #12]
   12ef0:	0010      	movs	r0, r2
   12ef2:	4798      	blx	r3
   12ef4:	68bb      	ldr	r3, [r7, #8]
   12ef6:	2202      	movs	r2, #2
   12ef8:	4013      	ands	r3, r2
   12efa:	d014      	beq.n	12f26 <_adc_interrupt_handler+0x126>
   12efc:	68fb      	ldr	r3, [r7, #12]
   12efe:	681b      	ldr	r3, [r3, #0]
   12f00:	2202      	movs	r2, #2
   12f02:	761a      	strb	r2, [r3, #24]
   12f04:	68fb      	ldr	r3, [r7, #12]
   12f06:	7edb      	ldrb	r3, [r3, #27]
   12f08:	001a      	movs	r2, r3
   12f0a:	2304      	movs	r3, #4
   12f0c:	4013      	ands	r3, r2
   12f0e:	d00a      	beq.n	12f26 <_adc_interrupt_handler+0x126>
   12f10:	68fb      	ldr	r3, [r7, #12]
   12f12:	7e9b      	ldrb	r3, [r3, #26]
   12f14:	001a      	movs	r2, r3
   12f16:	2304      	movs	r3, #4
   12f18:	4013      	ands	r3, r2
   12f1a:	d004      	beq.n	12f26 <_adc_interrupt_handler+0x126>
   12f1c:	68fb      	ldr	r3, [r7, #12]
   12f1e:	691b      	ldr	r3, [r3, #16]
   12f20:	68fa      	ldr	r2, [r7, #12]
   12f22:	0010      	movs	r0, r2
   12f24:	4798      	blx	r3
   12f26:	46c0      	nop			; (mov r8, r8)
   12f28:	46bd      	mov	sp, r7
   12f2a:	b004      	add	sp, #16
   12f2c:	bd80      	pop	{r7, pc}
   12f2e:	46c0      	nop			; (mov r8, r8)
   12f30:	200043bc 	.word	0x200043bc
   12f34:	00012d6d 	.word	0x00012d6d
   12f38:	00012d95 	.word	0x00012d95
   12f3c:	00012ddd 	.word	0x00012ddd

00012f40 <ADC_Handler>:
   12f40:	b580      	push	{r7, lr}
   12f42:	af00      	add	r7, sp, #0
   12f44:	2000      	movs	r0, #0
   12f46:	4b02      	ldr	r3, [pc, #8]	; (12f50 <ADC_Handler+0x10>)
   12f48:	4798      	blx	r3
   12f4a:	46c0      	nop			; (mov r8, r8)
   12f4c:	46bd      	mov	sp, r7
   12f4e:	bd80      	pop	{r7, pc}
   12f50:	00012e01 	.word	0x00012e01

00012f54 <system_interrupt_disable>:
   12f54:	b580      	push	{r7, lr}
   12f56:	b082      	sub	sp, #8
   12f58:	af00      	add	r7, sp, #0
   12f5a:	0002      	movs	r2, r0
   12f5c:	1dfb      	adds	r3, r7, #7
   12f5e:	701a      	strb	r2, [r3, #0]
   12f60:	4a07      	ldr	r2, [pc, #28]	; (12f80 <system_interrupt_disable+0x2c>)
   12f62:	1dfb      	adds	r3, r7, #7
   12f64:	781b      	ldrb	r3, [r3, #0]
   12f66:	0019      	movs	r1, r3
   12f68:	231f      	movs	r3, #31
   12f6a:	400b      	ands	r3, r1
   12f6c:	2101      	movs	r1, #1
   12f6e:	4099      	lsls	r1, r3
   12f70:	000b      	movs	r3, r1
   12f72:	0019      	movs	r1, r3
   12f74:	2380      	movs	r3, #128	; 0x80
   12f76:	50d1      	str	r1, [r2, r3]
   12f78:	46c0      	nop			; (mov r8, r8)
   12f7a:	46bd      	mov	sp, r7
   12f7c:	b002      	add	sp, #8
   12f7e:	bd80      	pop	{r7, pc}
   12f80:	e000e100 	.word	0xe000e100

00012f84 <_dac_interrupt_handler>:
   12f84:	b580      	push	{r7, lr}
   12f86:	b084      	sub	sp, #16
   12f88:	af00      	add	r7, sp, #0
   12f8a:	0002      	movs	r2, r0
   12f8c:	1dfb      	adds	r3, r7, #7
   12f8e:	701a      	strb	r2, [r3, #0]
   12f90:	1dfb      	adds	r3, r7, #7
   12f92:	781a      	ldrb	r2, [r3, #0]
   12f94:	4b37      	ldr	r3, [pc, #220]	; (13074 <_dac_interrupt_handler+0xf0>)
   12f96:	0092      	lsls	r2, r2, #2
   12f98:	58d3      	ldr	r3, [r2, r3]
   12f9a:	60fb      	str	r3, [r7, #12]
   12f9c:	68fb      	ldr	r3, [r7, #12]
   12f9e:	681b      	ldr	r3, [r3, #0]
   12fa0:	60bb      	str	r3, [r7, #8]
   12fa2:	68bb      	ldr	r3, [r7, #8]
   12fa4:	799b      	ldrb	r3, [r3, #6]
   12fa6:	b2db      	uxtb	r3, r3
   12fa8:	001a      	movs	r2, r3
   12faa:	2301      	movs	r3, #1
   12fac:	4013      	ands	r3, r2
   12fae:	d00e      	beq.n	12fce <_dac_interrupt_handler+0x4a>
   12fb0:	68bb      	ldr	r3, [r7, #8]
   12fb2:	2201      	movs	r2, #1
   12fb4:	719a      	strb	r2, [r3, #6]
   12fb6:	68fb      	ldr	r3, [r7, #12]
   12fb8:	3314      	adds	r3, #20
   12fba:	2b00      	cmp	r3, #0
   12fbc:	d007      	beq.n	12fce <_dac_interrupt_handler+0x4a>
   12fbe:	68fb      	ldr	r3, [r7, #12]
   12fc0:	7c5b      	ldrb	r3, [r3, #17]
   12fc2:	2b00      	cmp	r3, #0
   12fc4:	d003      	beq.n	12fce <_dac_interrupt_handler+0x4a>
   12fc6:	68fb      	ldr	r3, [r7, #12]
   12fc8:	699b      	ldr	r3, [r3, #24]
   12fca:	2000      	movs	r0, #0
   12fcc:	4798      	blx	r3
   12fce:	68bb      	ldr	r3, [r7, #8]
   12fd0:	799b      	ldrb	r3, [r3, #6]
   12fd2:	b2db      	uxtb	r3, r3
   12fd4:	001a      	movs	r2, r3
   12fd6:	2302      	movs	r3, #2
   12fd8:	4013      	ands	r3, r2
   12fda:	d047      	beq.n	1306c <_dac_interrupt_handler+0xe8>
   12fdc:	68bb      	ldr	r3, [r7, #8]
   12fde:	2202      	movs	r2, #2
   12fe0:	719a      	strb	r2, [r3, #6]
   12fe2:	68fb      	ldr	r3, [r7, #12]
   12fe4:	899b      	ldrh	r3, [r3, #12]
   12fe6:	b29b      	uxth	r3, r3
   12fe8:	2b00      	cmp	r3, #0
   12fea:	d033      	beq.n	13054 <_dac_interrupt_handler+0xd0>
   12fec:	68fb      	ldr	r3, [r7, #12]
   12fee:	689a      	ldr	r2, [r3, #8]
   12ff0:	68fb      	ldr	r3, [r7, #12]
   12ff2:	89db      	ldrh	r3, [r3, #14]
   12ff4:	b29b      	uxth	r3, r3
   12ff6:	1c59      	adds	r1, r3, #1
   12ff8:	b288      	uxth	r0, r1
   12ffa:	68f9      	ldr	r1, [r7, #12]
   12ffc:	81c8      	strh	r0, [r1, #14]
   12ffe:	005b      	lsls	r3, r3, #1
   13000:	18d3      	adds	r3, r2, r3
   13002:	881b      	ldrh	r3, [r3, #0]
   13004:	b29a      	uxth	r2, r3
   13006:	68bb      	ldr	r3, [r7, #8]
   13008:	819a      	strh	r2, [r3, #12]
   1300a:	68fb      	ldr	r3, [r7, #12]
   1300c:	899b      	ldrh	r3, [r3, #12]
   1300e:	b29b      	uxth	r3, r3
   13010:	3b01      	subs	r3, #1
   13012:	b29a      	uxth	r2, r3
   13014:	68fb      	ldr	r3, [r7, #12]
   13016:	819a      	strh	r2, [r3, #12]
   13018:	68fb      	ldr	r3, [r7, #12]
   1301a:	899b      	ldrh	r3, [r3, #12]
   1301c:	b29b      	uxth	r3, r3
   1301e:	2b00      	cmp	r3, #0
   13020:	d118      	bne.n	13054 <_dac_interrupt_handler+0xd0>
   13022:	68fb      	ldr	r3, [r7, #12]
   13024:	2220      	movs	r2, #32
   13026:	2100      	movs	r1, #0
   13028:	5499      	strb	r1, [r3, r2]
   1302a:	68bb      	ldr	r3, [r7, #8]
   1302c:	2202      	movs	r2, #2
   1302e:	711a      	strb	r2, [r3, #4]
   13030:	68bb      	ldr	r3, [r7, #8]
   13032:	2202      	movs	r2, #2
   13034:	719a      	strb	r2, [r3, #6]
   13036:	2019      	movs	r0, #25
   13038:	4b0f      	ldr	r3, [pc, #60]	; (13078 <_dac_interrupt_handler+0xf4>)
   1303a:	4798      	blx	r3
   1303c:	68fb      	ldr	r3, [r7, #12]
   1303e:	3314      	adds	r3, #20
   13040:	2b00      	cmp	r3, #0
   13042:	d007      	beq.n	13054 <_dac_interrupt_handler+0xd0>
   13044:	68fb      	ldr	r3, [r7, #12]
   13046:	7c9b      	ldrb	r3, [r3, #18]
   13048:	2b00      	cmp	r3, #0
   1304a:	d003      	beq.n	13054 <_dac_interrupt_handler+0xd0>
   1304c:	68fb      	ldr	r3, [r7, #12]
   1304e:	69db      	ldr	r3, [r3, #28]
   13050:	2000      	movs	r0, #0
   13052:	4798      	blx	r3
   13054:	68fb      	ldr	r3, [r7, #12]
   13056:	3314      	adds	r3, #20
   13058:	2b00      	cmp	r3, #0
   1305a:	d007      	beq.n	1306c <_dac_interrupt_handler+0xe8>
   1305c:	68fb      	ldr	r3, [r7, #12]
   1305e:	7c1b      	ldrb	r3, [r3, #16]
   13060:	2b00      	cmp	r3, #0
   13062:	d003      	beq.n	1306c <_dac_interrupt_handler+0xe8>
   13064:	68fb      	ldr	r3, [r7, #12]
   13066:	695b      	ldr	r3, [r3, #20]
   13068:	2000      	movs	r0, #0
   1306a:	4798      	blx	r3
   1306c:	46c0      	nop			; (mov r8, r8)
   1306e:	46bd      	mov	sp, r7
   13070:	b004      	add	sp, #16
   13072:	bd80      	pop	{r7, pc}
   13074:	200043c0 	.word	0x200043c0
   13078:	00012f55 	.word	0x00012f55

0001307c <DAC_Handler>:
   1307c:	b580      	push	{r7, lr}
   1307e:	af00      	add	r7, sp, #0
   13080:	2000      	movs	r0, #0
   13082:	4b02      	ldr	r3, [pc, #8]	; (1308c <DAC_Handler+0x10>)
   13084:	4798      	blx	r3
   13086:	46c0      	nop			; (mov r8, r8)
   13088:	46bd      	mov	sp, r7
   1308a:	bd80      	pop	{r7, pc}
   1308c:	00012f85 	.word	0x00012f85

00013090 <system_interrupt_enter_critical_section>:
   13090:	b580      	push	{r7, lr}
   13092:	af00      	add	r7, sp, #0
   13094:	4b02      	ldr	r3, [pc, #8]	; (130a0 <system_interrupt_enter_critical_section+0x10>)
   13096:	4798      	blx	r3
   13098:	46c0      	nop			; (mov r8, r8)
   1309a:	46bd      	mov	sp, r7
   1309c:	bd80      	pop	{r7, pc}
   1309e:	46c0      	nop			; (mov r8, r8)
   130a0:	00026edd 	.word	0x00026edd

000130a4 <system_interrupt_leave_critical_section>:
   130a4:	b580      	push	{r7, lr}
   130a6:	af00      	add	r7, sp, #0
   130a8:	4b02      	ldr	r3, [pc, #8]	; (130b4 <system_interrupt_leave_critical_section+0x10>)
   130aa:	4798      	blx	r3
   130ac:	46c0      	nop			; (mov r8, r8)
   130ae:	46bd      	mov	sp, r7
   130b0:	bd80      	pop	{r7, pc}
   130b2:	46c0      	nop			; (mov r8, r8)
   130b4:	00026f31 	.word	0x00026f31

000130b8 <DMAC_Handler>:
   130b8:	b580      	push	{r7, lr}
   130ba:	b086      	sub	sp, #24
   130bc:	af00      	add	r7, sp, #0
   130be:	4b49      	ldr	r3, [pc, #292]	; (131e4 <DMAC_Handler+0x12c>)
   130c0:	4798      	blx	r3
   130c2:	4b49      	ldr	r3, [pc, #292]	; (131e8 <DMAC_Handler+0x130>)
   130c4:	8c1b      	ldrh	r3, [r3, #32]
   130c6:	b29b      	uxth	r3, r3
   130c8:	b2da      	uxtb	r2, r3
   130ca:	2317      	movs	r3, #23
   130cc:	18fb      	adds	r3, r7, r3
   130ce:	210f      	movs	r1, #15
   130d0:	400a      	ands	r2, r1
   130d2:	701a      	strb	r2, [r3, #0]
   130d4:	2317      	movs	r3, #23
   130d6:	18fb      	adds	r3, r7, r3
   130d8:	781a      	ldrb	r2, [r3, #0]
   130da:	4b44      	ldr	r3, [pc, #272]	; (131ec <DMAC_Handler+0x134>)
   130dc:	0092      	lsls	r2, r2, #2
   130de:	58d3      	ldr	r3, [r2, r3]
   130e0:	613b      	str	r3, [r7, #16]
   130e2:	4a41      	ldr	r2, [pc, #260]	; (131e8 <DMAC_Handler+0x130>)
   130e4:	693b      	ldr	r3, [r7, #16]
   130e6:	781b      	ldrb	r3, [r3, #0]
   130e8:	210f      	movs	r1, #15
   130ea:	400b      	ands	r3, r1
   130ec:	b2d9      	uxtb	r1, r3
   130ee:	233f      	movs	r3, #63	; 0x3f
   130f0:	54d1      	strb	r1, [r2, r3]
   130f2:	493d      	ldr	r1, [pc, #244]	; (131e8 <DMAC_Handler+0x130>)
   130f4:	230f      	movs	r3, #15
   130f6:	18fb      	adds	r3, r7, r3
   130f8:	224e      	movs	r2, #78	; 0x4e
   130fa:	5c8a      	ldrb	r2, [r1, r2]
   130fc:	701a      	strb	r2, [r3, #0]
   130fe:	693b      	ldr	r3, [r7, #16]
   13100:	781b      	ldrb	r3, [r3, #0]
   13102:	4a3b      	ldr	r2, [pc, #236]	; (131f0 <DMAC_Handler+0x138>)
   13104:	011b      	lsls	r3, r3, #4
   13106:	18d3      	adds	r3, r2, r3
   13108:	3302      	adds	r3, #2
   1310a:	881b      	ldrh	r3, [r3, #0]
   1310c:	b29b      	uxth	r3, r3
   1310e:	60bb      	str	r3, [r7, #8]
   13110:	693b      	ldr	r3, [r7, #16]
   13112:	781b      	ldrb	r3, [r3, #0]
   13114:	4a37      	ldr	r2, [pc, #220]	; (131f4 <DMAC_Handler+0x13c>)
   13116:	011b      	lsls	r3, r3, #4
   13118:	18d3      	adds	r3, r2, r3
   1311a:	3302      	adds	r3, #2
   1311c:	881b      	ldrh	r3, [r3, #0]
   1311e:	b29b      	uxth	r3, r3
   13120:	607b      	str	r3, [r7, #4]
   13122:	68ba      	ldr	r2, [r7, #8]
   13124:	687b      	ldr	r3, [r7, #4]
   13126:	1ad2      	subs	r2, r2, r3
   13128:	693b      	ldr	r3, [r7, #16]
   1312a:	615a      	str	r2, [r3, #20]
   1312c:	230f      	movs	r3, #15
   1312e:	18fb      	adds	r3, r7, r3
   13130:	781b      	ldrb	r3, [r3, #0]
   13132:	2201      	movs	r2, #1
   13134:	4013      	ands	r3, r2
   13136:	d016      	beq.n	13166 <DMAC_Handler+0xae>
   13138:	4a2b      	ldr	r2, [pc, #172]	; (131e8 <DMAC_Handler+0x130>)
   1313a:	234e      	movs	r3, #78	; 0x4e
   1313c:	2101      	movs	r1, #1
   1313e:	54d1      	strb	r1, [r2, r3]
   13140:	693b      	ldr	r3, [r7, #16]
   13142:	2210      	movs	r2, #16
   13144:	745a      	strb	r2, [r3, #17]
   13146:	693b      	ldr	r3, [r7, #16]
   13148:	7c1b      	ldrb	r3, [r3, #16]
   1314a:	001a      	movs	r2, r3
   1314c:	2301      	movs	r3, #1
   1314e:	4013      	ands	r3, r2
   13150:	d042      	beq.n	131d8 <DMAC_Handler+0x120>
   13152:	693b      	ldr	r3, [r7, #16]
   13154:	685b      	ldr	r3, [r3, #4]
   13156:	2b00      	cmp	r3, #0
   13158:	d03e      	beq.n	131d8 <DMAC_Handler+0x120>
   1315a:	693b      	ldr	r3, [r7, #16]
   1315c:	685b      	ldr	r3, [r3, #4]
   1315e:	693a      	ldr	r2, [r7, #16]
   13160:	0010      	movs	r0, r2
   13162:	4798      	blx	r3
   13164:	e038      	b.n	131d8 <DMAC_Handler+0x120>
   13166:	230f      	movs	r3, #15
   13168:	18fb      	adds	r3, r7, r3
   1316a:	781b      	ldrb	r3, [r3, #0]
   1316c:	2202      	movs	r2, #2
   1316e:	4013      	ands	r3, r2
   13170:	d016      	beq.n	131a0 <DMAC_Handler+0xe8>
   13172:	4a1d      	ldr	r2, [pc, #116]	; (131e8 <DMAC_Handler+0x130>)
   13174:	234e      	movs	r3, #78	; 0x4e
   13176:	2102      	movs	r1, #2
   13178:	54d1      	strb	r1, [r2, r3]
   1317a:	693b      	ldr	r3, [r7, #16]
   1317c:	2200      	movs	r2, #0
   1317e:	745a      	strb	r2, [r3, #17]
   13180:	693b      	ldr	r3, [r7, #16]
   13182:	7c1b      	ldrb	r3, [r3, #16]
   13184:	001a      	movs	r2, r3
   13186:	2302      	movs	r3, #2
   13188:	4013      	ands	r3, r2
   1318a:	d025      	beq.n	131d8 <DMAC_Handler+0x120>
   1318c:	693b      	ldr	r3, [r7, #16]
   1318e:	689b      	ldr	r3, [r3, #8]
   13190:	2b00      	cmp	r3, #0
   13192:	d021      	beq.n	131d8 <DMAC_Handler+0x120>
   13194:	693b      	ldr	r3, [r7, #16]
   13196:	689b      	ldr	r3, [r3, #8]
   13198:	693a      	ldr	r2, [r7, #16]
   1319a:	0010      	movs	r0, r2
   1319c:	4798      	blx	r3
   1319e:	e01b      	b.n	131d8 <DMAC_Handler+0x120>
   131a0:	230f      	movs	r3, #15
   131a2:	18fb      	adds	r3, r7, r3
   131a4:	781b      	ldrb	r3, [r3, #0]
   131a6:	2204      	movs	r2, #4
   131a8:	4013      	ands	r3, r2
   131aa:	d015      	beq.n	131d8 <DMAC_Handler+0x120>
   131ac:	4a0e      	ldr	r2, [pc, #56]	; (131e8 <DMAC_Handler+0x130>)
   131ae:	234e      	movs	r3, #78	; 0x4e
   131b0:	2104      	movs	r1, #4
   131b2:	54d1      	strb	r1, [r2, r3]
   131b4:	693b      	ldr	r3, [r7, #16]
   131b6:	2206      	movs	r2, #6
   131b8:	745a      	strb	r2, [r3, #17]
   131ba:	693b      	ldr	r3, [r7, #16]
   131bc:	7c1b      	ldrb	r3, [r3, #16]
   131be:	001a      	movs	r2, r3
   131c0:	2304      	movs	r3, #4
   131c2:	4013      	ands	r3, r2
   131c4:	d008      	beq.n	131d8 <DMAC_Handler+0x120>
   131c6:	693b      	ldr	r3, [r7, #16]
   131c8:	68db      	ldr	r3, [r3, #12]
   131ca:	2b00      	cmp	r3, #0
   131cc:	d004      	beq.n	131d8 <DMAC_Handler+0x120>
   131ce:	693b      	ldr	r3, [r7, #16]
   131d0:	68db      	ldr	r3, [r3, #12]
   131d2:	693a      	ldr	r2, [r7, #16]
   131d4:	0010      	movs	r0, r2
   131d6:	4798      	blx	r3
   131d8:	4b07      	ldr	r3, [pc, #28]	; (131f8 <DMAC_Handler+0x140>)
   131da:	4798      	blx	r3
   131dc:	46c0      	nop			; (mov r8, r8)
   131de:	46bd      	mov	sp, r7
   131e0:	b006      	add	sp, #24
   131e2:	bd80      	pop	{r7, pc}
   131e4:	00013091 	.word	0x00013091
   131e8:	41004800 	.word	0x41004800
   131ec:	20000510 	.word	0x20000510
   131f0:	200043d0 	.word	0x200043d0
   131f4:	200004c0 	.word	0x200004c0
   131f8:	000130a5 	.word	0x000130a5

000131fc <EVSYS_Handler>:
   131fc:	b580      	push	{r7, lr}
   131fe:	b082      	sub	sp, #8
   13200:	af00      	add	r7, sp, #0
   13202:	4b15      	ldr	r3, [pc, #84]	; (13258 <EVSYS_Handler+0x5c>)
   13204:	691b      	ldr	r3, [r3, #16]
   13206:	607b      	str	r3, [r7, #4]
   13208:	4b14      	ldr	r3, [pc, #80]	; (1325c <EVSYS_Handler+0x60>)
   1320a:	699b      	ldr	r3, [r3, #24]
   1320c:	603b      	str	r3, [r7, #0]
   1320e:	4b12      	ldr	r3, [pc, #72]	; (13258 <EVSYS_Handler+0x5c>)
   13210:	689a      	ldr	r2, [r3, #8]
   13212:	683b      	ldr	r3, [r7, #0]
   13214:	431a      	orrs	r2, r3
   13216:	4b10      	ldr	r3, [pc, #64]	; (13258 <EVSYS_Handler+0x5c>)
   13218:	609a      	str	r2, [r3, #8]
   1321a:	4b10      	ldr	r3, [pc, #64]	; (1325c <EVSYS_Handler+0x60>)
   1321c:	4a10      	ldr	r2, [pc, #64]	; (13260 <EVSYS_Handler+0x64>)
   1321e:	619a      	str	r2, [r3, #24]
   13220:	e008      	b.n	13234 <EVSYS_Handler+0x38>
   13222:	687b      	ldr	r3, [r7, #4]
   13224:	685a      	ldr	r2, [r3, #4]
   13226:	687b      	ldr	r3, [r7, #4]
   13228:	681b      	ldr	r3, [r3, #0]
   1322a:	0018      	movs	r0, r3
   1322c:	4790      	blx	r2
   1322e:	687b      	ldr	r3, [r7, #4]
   13230:	689b      	ldr	r3, [r3, #8]
   13232:	607b      	str	r3, [r7, #4]
   13234:	687b      	ldr	r3, [r7, #4]
   13236:	2b00      	cmp	r3, #0
   13238:	d1f3      	bne.n	13222 <EVSYS_Handler+0x26>
   1323a:	4b07      	ldr	r3, [pc, #28]	; (13258 <EVSYS_Handler+0x5c>)
   1323c:	68db      	ldr	r3, [r3, #12]
   1323e:	603b      	str	r3, [r7, #0]
   13240:	4b05      	ldr	r3, [pc, #20]	; (13258 <EVSYS_Handler+0x5c>)
   13242:	689b      	ldr	r3, [r3, #8]
   13244:	683a      	ldr	r2, [r7, #0]
   13246:	43d2      	mvns	r2, r2
   13248:	401a      	ands	r2, r3
   1324a:	4b03      	ldr	r3, [pc, #12]	; (13258 <EVSYS_Handler+0x5c>)
   1324c:	609a      	str	r2, [r3, #8]
   1324e:	46c0      	nop			; (mov r8, r8)
   13250:	46bd      	mov	sp, r7
   13252:	b002      	add	sp, #8
   13254:	bd80      	pop	{r7, pc}
   13256:	46c0      	nop			; (mov r8, r8)
   13258:	20000000 	.word	0x20000000
   1325c:	42000400 	.word	0x42000400
   13260:	0f0fffff 	.word	0x0f0fffff

00013264 <system_apb_clock_set_mask>:
   13264:	b580      	push	{r7, lr}
   13266:	b082      	sub	sp, #8
   13268:	af00      	add	r7, sp, #0
   1326a:	0002      	movs	r2, r0
   1326c:	6039      	str	r1, [r7, #0]
   1326e:	1dfb      	adds	r3, r7, #7
   13270:	701a      	strb	r2, [r3, #0]
   13272:	1dfb      	adds	r3, r7, #7
   13274:	781b      	ldrb	r3, [r3, #0]
   13276:	2b01      	cmp	r3, #1
   13278:	d00a      	beq.n	13290 <system_apb_clock_set_mask+0x2c>
   1327a:	2b02      	cmp	r3, #2
   1327c:	d00f      	beq.n	1329e <system_apb_clock_set_mask+0x3a>
   1327e:	2b00      	cmp	r3, #0
   13280:	d114      	bne.n	132ac <system_apb_clock_set_mask+0x48>
   13282:	4b0e      	ldr	r3, [pc, #56]	; (132bc <system_apb_clock_set_mask+0x58>)
   13284:	4a0d      	ldr	r2, [pc, #52]	; (132bc <system_apb_clock_set_mask+0x58>)
   13286:	6991      	ldr	r1, [r2, #24]
   13288:	683a      	ldr	r2, [r7, #0]
   1328a:	430a      	orrs	r2, r1
   1328c:	619a      	str	r2, [r3, #24]
   1328e:	e00f      	b.n	132b0 <system_apb_clock_set_mask+0x4c>
   13290:	4b0a      	ldr	r3, [pc, #40]	; (132bc <system_apb_clock_set_mask+0x58>)
   13292:	4a0a      	ldr	r2, [pc, #40]	; (132bc <system_apb_clock_set_mask+0x58>)
   13294:	69d1      	ldr	r1, [r2, #28]
   13296:	683a      	ldr	r2, [r7, #0]
   13298:	430a      	orrs	r2, r1
   1329a:	61da      	str	r2, [r3, #28]
   1329c:	e008      	b.n	132b0 <system_apb_clock_set_mask+0x4c>
   1329e:	4b07      	ldr	r3, [pc, #28]	; (132bc <system_apb_clock_set_mask+0x58>)
   132a0:	4a06      	ldr	r2, [pc, #24]	; (132bc <system_apb_clock_set_mask+0x58>)
   132a2:	6a11      	ldr	r1, [r2, #32]
   132a4:	683a      	ldr	r2, [r7, #0]
   132a6:	430a      	orrs	r2, r1
   132a8:	621a      	str	r2, [r3, #32]
   132aa:	e001      	b.n	132b0 <system_apb_clock_set_mask+0x4c>
   132ac:	2317      	movs	r3, #23
   132ae:	e000      	b.n	132b2 <system_apb_clock_set_mask+0x4e>
   132b0:	2300      	movs	r3, #0
   132b2:	0018      	movs	r0, r3
   132b4:	46bd      	mov	sp, r7
   132b6:	b002      	add	sp, #8
   132b8:	bd80      	pop	{r7, pc}
   132ba:	46c0      	nop			; (mov r8, r8)
   132bc:	40000400 	.word	0x40000400

000132c0 <_system_events_init>:
   132c0:	b580      	push	{r7, lr}
   132c2:	af00      	add	r7, sp, #0
   132c4:	2102      	movs	r1, #2
   132c6:	2002      	movs	r0, #2
   132c8:	4b07      	ldr	r3, [pc, #28]	; (132e8 <_system_events_init+0x28>)
   132ca:	4798      	blx	r3
   132cc:	4b07      	ldr	r3, [pc, #28]	; (132ec <_system_events_init+0x2c>)
   132ce:	2201      	movs	r2, #1
   132d0:	701a      	strb	r2, [r3, #0]
   132d2:	46c0      	nop			; (mov r8, r8)
   132d4:	4b05      	ldr	r3, [pc, #20]	; (132ec <_system_events_init+0x2c>)
   132d6:	781b      	ldrb	r3, [r3, #0]
   132d8:	b2db      	uxtb	r3, r3
   132da:	001a      	movs	r2, r3
   132dc:	2301      	movs	r3, #1
   132de:	4013      	ands	r3, r2
   132e0:	d1f8      	bne.n	132d4 <_system_events_init+0x14>
   132e2:	46c0      	nop			; (mov r8, r8)
   132e4:	46bd      	mov	sp, r7
   132e6:	bd80      	pop	{r7, pc}
   132e8:	00013265 	.word	0x00013265
   132ec:	42000400 	.word	0x42000400

000132f0 <i2c_master_is_syncing>:
   132f0:	b580      	push	{r7, lr}
   132f2:	b084      	sub	sp, #16
   132f4:	af00      	add	r7, sp, #0
   132f6:	6078      	str	r0, [r7, #4]
   132f8:	687b      	ldr	r3, [r7, #4]
   132fa:	681b      	ldr	r3, [r3, #0]
   132fc:	60fb      	str	r3, [r7, #12]
   132fe:	68fb      	ldr	r3, [r7, #12]
   13300:	69db      	ldr	r3, [r3, #28]
   13302:	2207      	movs	r2, #7
   13304:	4013      	ands	r3, r2
   13306:	1e5a      	subs	r2, r3, #1
   13308:	4193      	sbcs	r3, r2
   1330a:	b2db      	uxtb	r3, r3
   1330c:	0018      	movs	r0, r3
   1330e:	46bd      	mov	sp, r7
   13310:	b004      	add	sp, #16
   13312:	bd80      	pop	{r7, pc}

00013314 <_i2c_master_wait_for_sync>:
   13314:	b580      	push	{r7, lr}
   13316:	b082      	sub	sp, #8
   13318:	af00      	add	r7, sp, #0
   1331a:	6078      	str	r0, [r7, #4]
   1331c:	46c0      	nop			; (mov r8, r8)
   1331e:	687b      	ldr	r3, [r7, #4]
   13320:	0018      	movs	r0, r3
   13322:	4b04      	ldr	r3, [pc, #16]	; (13334 <_i2c_master_wait_for_sync+0x20>)
   13324:	4798      	blx	r3
   13326:	1e03      	subs	r3, r0, #0
   13328:	d1f9      	bne.n	1331e <_i2c_master_wait_for_sync+0xa>
   1332a:	46c0      	nop			; (mov r8, r8)
   1332c:	46bd      	mov	sp, r7
   1332e:	b002      	add	sp, #8
   13330:	bd80      	pop	{r7, pc}
   13332:	46c0      	nop			; (mov r8, r8)
   13334:	000132f1 	.word	0x000132f1

00013338 <_i2c_master_read>:
   13338:	b580      	push	{r7, lr}
   1333a:	b084      	sub	sp, #16
   1333c:	af00      	add	r7, sp, #0
   1333e:	6078      	str	r0, [r7, #4]
   13340:	687b      	ldr	r3, [r7, #4]
   13342:	681b      	ldr	r3, [r3, #0]
   13344:	60fb      	str	r3, [r7, #12]
   13346:	68fb      	ldr	r3, [r7, #12]
   13348:	681b      	ldr	r3, [r3, #0]
   1334a:	011b      	lsls	r3, r3, #4
   1334c:	0fdb      	lsrs	r3, r3, #31
   1334e:	b2db      	uxtb	r3, r3
   13350:	001a      	movs	r2, r3
   13352:	230b      	movs	r3, #11
   13354:	18fb      	adds	r3, r7, r3
   13356:	1e51      	subs	r1, r2, #1
   13358:	418a      	sbcs	r2, r1
   1335a:	701a      	strb	r2, [r3, #0]
   1335c:	2308      	movs	r3, #8
   1335e:	18fb      	adds	r3, r7, r3
   13360:	687a      	ldr	r2, [r7, #4]
   13362:	8b52      	ldrh	r2, [r2, #26]
   13364:	801a      	strh	r2, [r3, #0]
   13366:	687b      	ldr	r3, [r7, #4]
   13368:	8b9b      	ldrh	r3, [r3, #28]
   1336a:	b29a      	uxth	r2, r3
   1336c:	2308      	movs	r3, #8
   1336e:	18fb      	adds	r3, r7, r3
   13370:	2108      	movs	r1, #8
   13372:	1879      	adds	r1, r7, r1
   13374:	8809      	ldrh	r1, [r1, #0]
   13376:	1a8a      	subs	r2, r1, r2
   13378:	801a      	strh	r2, [r3, #0]
   1337a:	687b      	ldr	r3, [r7, #4]
   1337c:	8b9b      	ldrh	r3, [r3, #28]
   1337e:	b29b      	uxth	r3, r3
   13380:	3b01      	subs	r3, #1
   13382:	b29a      	uxth	r2, r3
   13384:	687b      	ldr	r3, [r7, #4]
   13386:	839a      	strh	r2, [r3, #28]
   13388:	230b      	movs	r3, #11
   1338a:	18fb      	adds	r3, r7, r3
   1338c:	781b      	ldrb	r3, [r3, #0]
   1338e:	2b00      	cmp	r3, #0
   13390:	d010      	beq.n	133b4 <_i2c_master_read+0x7c>
   13392:	687b      	ldr	r3, [r7, #4]
   13394:	7adb      	ldrb	r3, [r3, #11]
   13396:	2b00      	cmp	r3, #0
   13398:	d01c      	beq.n	133d4 <_i2c_master_read+0x9c>
   1339a:	687b      	ldr	r3, [r7, #4]
   1339c:	8b9b      	ldrh	r3, [r3, #28]
   1339e:	b29b      	uxth	r3, r3
   133a0:	2b01      	cmp	r3, #1
   133a2:	d117      	bne.n	133d4 <_i2c_master_read+0x9c>
   133a4:	68fb      	ldr	r3, [r7, #12]
   133a6:	685b      	ldr	r3, [r3, #4]
   133a8:	2280      	movs	r2, #128	; 0x80
   133aa:	02d2      	lsls	r2, r2, #11
   133ac:	431a      	orrs	r2, r3
   133ae:	68fb      	ldr	r3, [r7, #12]
   133b0:	605a      	str	r2, [r3, #4]
   133b2:	e00f      	b.n	133d4 <_i2c_master_read+0x9c>
   133b4:	687b      	ldr	r3, [r7, #4]
   133b6:	7adb      	ldrb	r3, [r3, #11]
   133b8:	2b00      	cmp	r3, #0
   133ba:	d00b      	beq.n	133d4 <_i2c_master_read+0x9c>
   133bc:	687b      	ldr	r3, [r7, #4]
   133be:	8b9b      	ldrh	r3, [r3, #28]
   133c0:	b29b      	uxth	r3, r3
   133c2:	2b00      	cmp	r3, #0
   133c4:	d106      	bne.n	133d4 <_i2c_master_read+0x9c>
   133c6:	68fb      	ldr	r3, [r7, #12]
   133c8:	685b      	ldr	r3, [r3, #4]
   133ca:	2280      	movs	r2, #128	; 0x80
   133cc:	02d2      	lsls	r2, r2, #11
   133ce:	431a      	orrs	r2, r3
   133d0:	68fb      	ldr	r3, [r7, #12]
   133d2:	605a      	str	r2, [r3, #4]
   133d4:	687b      	ldr	r3, [r7, #4]
   133d6:	8b9b      	ldrh	r3, [r3, #28]
   133d8:	b29b      	uxth	r3, r3
   133da:	2b00      	cmp	r3, #0
   133dc:	d10e      	bne.n	133fc <_i2c_master_read+0xc4>
   133de:	687b      	ldr	r3, [r7, #4]
   133e0:	7a9b      	ldrb	r3, [r3, #10]
   133e2:	2b00      	cmp	r3, #0
   133e4:	d00a      	beq.n	133fc <_i2c_master_read+0xc4>
   133e6:	687b      	ldr	r3, [r7, #4]
   133e8:	0018      	movs	r0, r3
   133ea:	4b0e      	ldr	r3, [pc, #56]	; (13424 <_i2c_master_read+0xec>)
   133ec:	4798      	blx	r3
   133ee:	68fb      	ldr	r3, [r7, #12]
   133f0:	685b      	ldr	r3, [r3, #4]
   133f2:	22c0      	movs	r2, #192	; 0xc0
   133f4:	0292      	lsls	r2, r2, #10
   133f6:	431a      	orrs	r2, r3
   133f8:	68fb      	ldr	r3, [r7, #12]
   133fa:	605a      	str	r2, [r3, #4]
   133fc:	687b      	ldr	r3, [r7, #4]
   133fe:	0018      	movs	r0, r3
   13400:	4b08      	ldr	r3, [pc, #32]	; (13424 <_i2c_master_read+0xec>)
   13402:	4798      	blx	r3
   13404:	687b      	ldr	r3, [r7, #4]
   13406:	6a1a      	ldr	r2, [r3, #32]
   13408:	2308      	movs	r3, #8
   1340a:	18fb      	adds	r3, r7, r3
   1340c:	881b      	ldrh	r3, [r3, #0]
   1340e:	18d3      	adds	r3, r2, r3
   13410:	68fa      	ldr	r2, [r7, #12]
   13412:	2128      	movs	r1, #40	; 0x28
   13414:	5c52      	ldrb	r2, [r2, r1]
   13416:	b2d2      	uxtb	r2, r2
   13418:	701a      	strb	r2, [r3, #0]
   1341a:	46c0      	nop			; (mov r8, r8)
   1341c:	46bd      	mov	sp, r7
   1341e:	b004      	add	sp, #16
   13420:	bd80      	pop	{r7, pc}
   13422:	46c0      	nop			; (mov r8, r8)
   13424:	00013315 	.word	0x00013315

00013428 <_i2c_master_write>:
   13428:	b580      	push	{r7, lr}
   1342a:	b084      	sub	sp, #16
   1342c:	af00      	add	r7, sp, #0
   1342e:	6078      	str	r0, [r7, #4]
   13430:	687b      	ldr	r3, [r7, #4]
   13432:	681b      	ldr	r3, [r3, #0]
   13434:	60fb      	str	r3, [r7, #12]
   13436:	68fb      	ldr	r3, [r7, #12]
   13438:	8b5b      	ldrh	r3, [r3, #26]
   1343a:	b29b      	uxth	r3, r3
   1343c:	001a      	movs	r2, r3
   1343e:	2304      	movs	r3, #4
   13440:	4013      	ands	r3, r2
   13442:	d004      	beq.n	1344e <_i2c_master_write+0x26>
   13444:	687b      	ldr	r3, [r7, #4]
   13446:	2225      	movs	r2, #37	; 0x25
   13448:	211e      	movs	r1, #30
   1344a:	5499      	strb	r1, [r3, r2]
   1344c:	e024      	b.n	13498 <_i2c_master_write+0x70>
   1344e:	230a      	movs	r3, #10
   13450:	18fb      	adds	r3, r7, r3
   13452:	687a      	ldr	r2, [r7, #4]
   13454:	8b52      	ldrh	r2, [r2, #26]
   13456:	801a      	strh	r2, [r3, #0]
   13458:	687b      	ldr	r3, [r7, #4]
   1345a:	8b9b      	ldrh	r3, [r3, #28]
   1345c:	b29a      	uxth	r2, r3
   1345e:	230a      	movs	r3, #10
   13460:	18fb      	adds	r3, r7, r3
   13462:	210a      	movs	r1, #10
   13464:	1879      	adds	r1, r7, r1
   13466:	8809      	ldrh	r1, [r1, #0]
   13468:	1a8a      	subs	r2, r1, r2
   1346a:	801a      	strh	r2, [r3, #0]
   1346c:	687b      	ldr	r3, [r7, #4]
   1346e:	8b9b      	ldrh	r3, [r3, #28]
   13470:	b29b      	uxth	r3, r3
   13472:	3b01      	subs	r3, #1
   13474:	b29a      	uxth	r2, r3
   13476:	687b      	ldr	r3, [r7, #4]
   13478:	839a      	strh	r2, [r3, #28]
   1347a:	687b      	ldr	r3, [r7, #4]
   1347c:	0018      	movs	r0, r3
   1347e:	4b08      	ldr	r3, [pc, #32]	; (134a0 <_i2c_master_write+0x78>)
   13480:	4798      	blx	r3
   13482:	687b      	ldr	r3, [r7, #4]
   13484:	6a1a      	ldr	r2, [r3, #32]
   13486:	230a      	movs	r3, #10
   13488:	18fb      	adds	r3, r7, r3
   1348a:	881b      	ldrh	r3, [r3, #0]
   1348c:	18d3      	adds	r3, r2, r3
   1348e:	781b      	ldrb	r3, [r3, #0]
   13490:	b2d9      	uxtb	r1, r3
   13492:	68fb      	ldr	r3, [r7, #12]
   13494:	2228      	movs	r2, #40	; 0x28
   13496:	5499      	strb	r1, [r3, r2]
   13498:	46bd      	mov	sp, r7
   1349a:	b004      	add	sp, #16
   1349c:	bd80      	pop	{r7, pc}
   1349e:	46c0      	nop			; (mov r8, r8)
   134a0:	00013315 	.word	0x00013315

000134a4 <_i2c_master_async_address_response>:
   134a4:	b580      	push	{r7, lr}
   134a6:	b084      	sub	sp, #16
   134a8:	af00      	add	r7, sp, #0
   134aa:	6078      	str	r0, [r7, #4]
   134ac:	687b      	ldr	r3, [r7, #4]
   134ae:	681b      	ldr	r3, [r3, #0]
   134b0:	60fb      	str	r3, [r7, #12]
   134b2:	68fb      	ldr	r3, [r7, #12]
   134b4:	7e1b      	ldrb	r3, [r3, #24]
   134b6:	b2db      	uxtb	r3, r3
   134b8:	001a      	movs	r2, r3
   134ba:	2301      	movs	r3, #1
   134bc:	4013      	ands	r3, r2
   134be:	d02b      	beq.n	13518 <_i2c_master_async_address_response+0x74>
   134c0:	68fb      	ldr	r3, [r7, #12]
   134c2:	2201      	movs	r2, #1
   134c4:	761a      	strb	r2, [r3, #24]
   134c6:	68fb      	ldr	r3, [r7, #12]
   134c8:	8b5b      	ldrh	r3, [r3, #26]
   134ca:	b29b      	uxth	r3, r3
   134cc:	001a      	movs	r2, r3
   134ce:	2302      	movs	r3, #2
   134d0:	4013      	ands	r3, r2
   134d2:	d004      	beq.n	134de <_i2c_master_async_address_response+0x3a>
   134d4:	687b      	ldr	r3, [r7, #4]
   134d6:	2225      	movs	r2, #37	; 0x25
   134d8:	2141      	movs	r1, #65	; 0x41
   134da:	5499      	strb	r1, [r3, r2]
   134dc:	e01c      	b.n	13518 <_i2c_master_async_address_response+0x74>
   134de:	68fb      	ldr	r3, [r7, #12]
   134e0:	8b5b      	ldrh	r3, [r3, #26]
   134e2:	b29b      	uxth	r3, r3
   134e4:	001a      	movs	r2, r3
   134e6:	2304      	movs	r3, #4
   134e8:	4013      	ands	r3, r2
   134ea:	d015      	beq.n	13518 <_i2c_master_async_address_response+0x74>
   134ec:	687b      	ldr	r3, [r7, #4]
   134ee:	2225      	movs	r2, #37	; 0x25
   134f0:	2118      	movs	r1, #24
   134f2:	5499      	strb	r1, [r3, r2]
   134f4:	687b      	ldr	r3, [r7, #4]
   134f6:	2200      	movs	r2, #0
   134f8:	839a      	strh	r2, [r3, #28]
   134fa:	687b      	ldr	r3, [r7, #4]
   134fc:	7a9b      	ldrb	r3, [r3, #10]
   134fe:	2b00      	cmp	r3, #0
   13500:	d00a      	beq.n	13518 <_i2c_master_async_address_response+0x74>
   13502:	687b      	ldr	r3, [r7, #4]
   13504:	0018      	movs	r0, r3
   13506:	4b13      	ldr	r3, [pc, #76]	; (13554 <_i2c_master_async_address_response+0xb0>)
   13508:	4798      	blx	r3
   1350a:	68fb      	ldr	r3, [r7, #12]
   1350c:	685b      	ldr	r3, [r3, #4]
   1350e:	22c0      	movs	r2, #192	; 0xc0
   13510:	0292      	lsls	r2, r2, #10
   13512:	431a      	orrs	r2, r3
   13514:	68fb      	ldr	r3, [r7, #12]
   13516:	605a      	str	r2, [r3, #4]
   13518:	687b      	ldr	r3, [r7, #4]
   1351a:	8b9b      	ldrh	r3, [r3, #28]
   1351c:	b29a      	uxth	r2, r3
   1351e:	687b      	ldr	r3, [r7, #4]
   13520:	835a      	strh	r2, [r3, #26]
   13522:	687b      	ldr	r3, [r7, #4]
   13524:	2225      	movs	r2, #37	; 0x25
   13526:	5c9b      	ldrb	r3, [r3, r2]
   13528:	b2db      	uxtb	r3, r3
   1352a:	2b05      	cmp	r3, #5
   1352c:	d10e      	bne.n	1354c <_i2c_master_async_address_response+0xa8>
   1352e:	687b      	ldr	r3, [r7, #4]
   13530:	2224      	movs	r2, #36	; 0x24
   13532:	5c9b      	ldrb	r3, [r3, r2]
   13534:	b2db      	uxtb	r3, r3
   13536:	2b00      	cmp	r3, #0
   13538:	d104      	bne.n	13544 <_i2c_master_async_address_response+0xa0>
   1353a:	687b      	ldr	r3, [r7, #4]
   1353c:	0018      	movs	r0, r3
   1353e:	4b06      	ldr	r3, [pc, #24]	; (13558 <_i2c_master_async_address_response+0xb4>)
   13540:	4798      	blx	r3
   13542:	e003      	b.n	1354c <_i2c_master_async_address_response+0xa8>
   13544:	687b      	ldr	r3, [r7, #4]
   13546:	0018      	movs	r0, r3
   13548:	4b04      	ldr	r3, [pc, #16]	; (1355c <_i2c_master_async_address_response+0xb8>)
   1354a:	4798      	blx	r3
   1354c:	46c0      	nop			; (mov r8, r8)
   1354e:	46bd      	mov	sp, r7
   13550:	b004      	add	sp, #16
   13552:	bd80      	pop	{r7, pc}
   13554:	00013315 	.word	0x00013315
   13558:	00013429 	.word	0x00013429
   1355c:	00013339 	.word	0x00013339

00013560 <i2c_master_register_callback>:
   13560:	b580      	push	{r7, lr}
   13562:	b084      	sub	sp, #16
   13564:	af00      	add	r7, sp, #0
   13566:	60f8      	str	r0, [r7, #12]
   13568:	60b9      	str	r1, [r7, #8]
   1356a:	1dfb      	adds	r3, r7, #7
   1356c:	701a      	strb	r2, [r3, #0]
   1356e:	1dfb      	adds	r3, r7, #7
   13570:	781b      	ldrb	r3, [r3, #0]
   13572:	68fa      	ldr	r2, [r7, #12]
   13574:	3302      	adds	r3, #2
   13576:	009b      	lsls	r3, r3, #2
   13578:	18d3      	adds	r3, r2, r3
   1357a:	3304      	adds	r3, #4
   1357c:	68ba      	ldr	r2, [r7, #8]
   1357e:	601a      	str	r2, [r3, #0]
   13580:	68fb      	ldr	r3, [r7, #12]
   13582:	7e1b      	ldrb	r3, [r3, #24]
   13584:	b2db      	uxtb	r3, r3
   13586:	b25a      	sxtb	r2, r3
   13588:	1dfb      	adds	r3, r7, #7
   1358a:	781b      	ldrb	r3, [r3, #0]
   1358c:	2101      	movs	r1, #1
   1358e:	4099      	lsls	r1, r3
   13590:	000b      	movs	r3, r1
   13592:	b25b      	sxtb	r3, r3
   13594:	4313      	orrs	r3, r2
   13596:	b25b      	sxtb	r3, r3
   13598:	b2da      	uxtb	r2, r3
   1359a:	68fb      	ldr	r3, [r7, #12]
   1359c:	761a      	strb	r2, [r3, #24]
   1359e:	46c0      	nop			; (mov r8, r8)
   135a0:	46bd      	mov	sp, r7
   135a2:	b004      	add	sp, #16
   135a4:	bd80      	pop	{r7, pc}
	...

000135a8 <_i2c_master_read_packet>:
   135a8:	b590      	push	{r4, r7, lr}
   135aa:	b087      	sub	sp, #28
   135ac:	af00      	add	r7, sp, #0
   135ae:	6078      	str	r0, [r7, #4]
   135b0:	6039      	str	r1, [r7, #0]
   135b2:	687b      	ldr	r3, [r7, #4]
   135b4:	681b      	ldr	r3, [r3, #0]
   135b6:	613b      	str	r3, [r7, #16]
   135b8:	683b      	ldr	r3, [r7, #0]
   135ba:	685a      	ldr	r2, [r3, #4]
   135bc:	687b      	ldr	r3, [r7, #4]
   135be:	621a      	str	r2, [r3, #32]
   135c0:	683b      	ldr	r3, [r7, #0]
   135c2:	885a      	ldrh	r2, [r3, #2]
   135c4:	687b      	ldr	r3, [r7, #4]
   135c6:	839a      	strh	r2, [r3, #28]
   135c8:	687b      	ldr	r3, [r7, #4]
   135ca:	2224      	movs	r2, #36	; 0x24
   135cc:	2101      	movs	r1, #1
   135ce:	5499      	strb	r1, [r3, r2]
   135d0:	687b      	ldr	r3, [r7, #4]
   135d2:	2225      	movs	r2, #37	; 0x25
   135d4:	2105      	movs	r1, #5
   135d6:	5499      	strb	r1, [r3, r2]
   135d8:	693b      	ldr	r3, [r7, #16]
   135da:	681b      	ldr	r3, [r3, #0]
   135dc:	011b      	lsls	r3, r3, #4
   135de:	0fdb      	lsrs	r3, r3, #31
   135e0:	b2db      	uxtb	r3, r3
   135e2:	001a      	movs	r2, r3
   135e4:	230f      	movs	r3, #15
   135e6:	18fb      	adds	r3, r7, r3
   135e8:	1e51      	subs	r1, r2, #1
   135ea:	418a      	sbcs	r2, r1
   135ec:	701a      	strb	r2, [r3, #0]
   135ee:	683b      	ldr	r3, [r7, #0]
   135f0:	7a5b      	ldrb	r3, [r3, #9]
   135f2:	2b00      	cmp	r3, #0
   135f4:	d006      	beq.n	13604 <_i2c_master_read_packet+0x5c>
   135f6:	683b      	ldr	r3, [r7, #0]
   135f8:	7a9a      	ldrb	r2, [r3, #10]
   135fa:	687b      	ldr	r3, [r7, #4]
   135fc:	0011      	movs	r1, r2
   135fe:	0018      	movs	r0, r3
   13600:	4b3b      	ldr	r3, [pc, #236]	; (136f0 <_i2c_master_read_packet+0x148>)
   13602:	4798      	blx	r3
   13604:	230f      	movs	r3, #15
   13606:	18fb      	adds	r3, r7, r3
   13608:	781b      	ldrb	r3, [r3, #0]
   1360a:	2b00      	cmp	r3, #0
   1360c:	d00b      	beq.n	13626 <_i2c_master_read_packet+0x7e>
   1360e:	683b      	ldr	r3, [r7, #0]
   13610:	885b      	ldrh	r3, [r3, #2]
   13612:	2b01      	cmp	r3, #1
   13614:	d107      	bne.n	13626 <_i2c_master_read_packet+0x7e>
   13616:	693b      	ldr	r3, [r7, #16]
   13618:	685b      	ldr	r3, [r3, #4]
   1361a:	2280      	movs	r2, #128	; 0x80
   1361c:	02d2      	lsls	r2, r2, #11
   1361e:	431a      	orrs	r2, r3
   13620:	693b      	ldr	r3, [r7, #16]
   13622:	605a      	str	r2, [r3, #4]
   13624:	e005      	b.n	13632 <_i2c_master_read_packet+0x8a>
   13626:	693b      	ldr	r3, [r7, #16]
   13628:	685b      	ldr	r3, [r3, #4]
   1362a:	4a32      	ldr	r2, [pc, #200]	; (136f4 <_i2c_master_read_packet+0x14c>)
   1362c:	401a      	ands	r2, r3
   1362e:	693b      	ldr	r3, [r7, #16]
   13630:	605a      	str	r2, [r3, #4]
   13632:	683b      	ldr	r3, [r7, #0]
   13634:	7a1b      	ldrb	r3, [r3, #8]
   13636:	2b00      	cmp	r3, #0
   13638:	d045      	beq.n	136c6 <_i2c_master_read_packet+0x11e>
   1363a:	683b      	ldr	r3, [r7, #0]
   1363c:	881b      	ldrh	r3, [r3, #0]
   1363e:	005a      	lsls	r2, r3, #1
   13640:	683b      	ldr	r3, [r7, #0]
   13642:	7a5b      	ldrb	r3, [r3, #9]
   13644:	039b      	lsls	r3, r3, #14
   13646:	4313      	orrs	r3, r2
   13648:	001a      	movs	r2, r3
   1364a:	2380      	movs	r3, #128	; 0x80
   1364c:	021b      	lsls	r3, r3, #8
   1364e:	431a      	orrs	r2, r3
   13650:	693b      	ldr	r3, [r7, #16]
   13652:	625a      	str	r2, [r3, #36]	; 0x24
   13654:	2317      	movs	r3, #23
   13656:	18fc      	adds	r4, r7, r3
   13658:	687b      	ldr	r3, [r7, #4]
   1365a:	0018      	movs	r0, r3
   1365c:	4b26      	ldr	r3, [pc, #152]	; (136f8 <_i2c_master_read_packet+0x150>)
   1365e:	4798      	blx	r3
   13660:	0003      	movs	r3, r0
   13662:	7023      	strb	r3, [r4, #0]
   13664:	693b      	ldr	r3, [r7, #16]
   13666:	685b      	ldr	r3, [r3, #4]
   13668:	4a22      	ldr	r2, [pc, #136]	; (136f4 <_i2c_master_read_packet+0x14c>)
   1366a:	401a      	ands	r2, r3
   1366c:	693b      	ldr	r3, [r7, #16]
   1366e:	605a      	str	r2, [r3, #4]
   13670:	2317      	movs	r3, #23
   13672:	18fb      	adds	r3, r7, r3
   13674:	781b      	ldrb	r3, [r3, #0]
   13676:	2b00      	cmp	r3, #0
   13678:	d107      	bne.n	1368a <_i2c_master_read_packet+0xe2>
   1367a:	2317      	movs	r3, #23
   1367c:	18fc      	adds	r4, r7, r3
   1367e:	687b      	ldr	r3, [r7, #4]
   13680:	0018      	movs	r0, r3
   13682:	4b1e      	ldr	r3, [pc, #120]	; (136fc <_i2c_master_read_packet+0x154>)
   13684:	4798      	blx	r3
   13686:	0003      	movs	r3, r0
   13688:	7023      	strb	r3, [r4, #0]
   1368a:	2317      	movs	r3, #23
   1368c:	18fb      	adds	r3, r7, r3
   1368e:	781b      	ldrb	r3, [r3, #0]
   13690:	2b00      	cmp	r3, #0
   13692:	d114      	bne.n	136be <_i2c_master_read_packet+0x116>
   13694:	693b      	ldr	r3, [r7, #16]
   13696:	2203      	movs	r2, #3
   13698:	759a      	strb	r2, [r3, #22]
   1369a:	683b      	ldr	r3, [r7, #0]
   1369c:	881b      	ldrh	r3, [r3, #0]
   1369e:	0a1b      	lsrs	r3, r3, #8
   136a0:	b29b      	uxth	r3, r3
   136a2:	2278      	movs	r2, #120	; 0x78
   136a4:	4313      	orrs	r3, r2
   136a6:	b29b      	uxth	r3, r3
   136a8:	005a      	lsls	r2, r3, #1
   136aa:	683b      	ldr	r3, [r7, #0]
   136ac:	7a5b      	ldrb	r3, [r3, #9]
   136ae:	039b      	lsls	r3, r3, #14
   136b0:	4313      	orrs	r3, r2
   136b2:	2201      	movs	r2, #1
   136b4:	4313      	orrs	r3, r2
   136b6:	001a      	movs	r2, r3
   136b8:	693b      	ldr	r3, [r7, #16]
   136ba:	625a      	str	r2, [r3, #36]	; 0x24
   136bc:	e012      	b.n	136e4 <_i2c_master_read_packet+0x13c>
   136be:	2317      	movs	r3, #23
   136c0:	18fb      	adds	r3, r7, r3
   136c2:	781b      	ldrb	r3, [r3, #0]
   136c4:	e00f      	b.n	136e6 <_i2c_master_read_packet+0x13e>
   136c6:	693b      	ldr	r3, [r7, #16]
   136c8:	2203      	movs	r2, #3
   136ca:	759a      	strb	r2, [r3, #22]
   136cc:	683b      	ldr	r3, [r7, #0]
   136ce:	881b      	ldrh	r3, [r3, #0]
   136d0:	005b      	lsls	r3, r3, #1
   136d2:	2201      	movs	r2, #1
   136d4:	431a      	orrs	r2, r3
   136d6:	683b      	ldr	r3, [r7, #0]
   136d8:	7a5b      	ldrb	r3, [r3, #9]
   136da:	039b      	lsls	r3, r3, #14
   136dc:	4313      	orrs	r3, r2
   136de:	001a      	movs	r2, r3
   136e0:	693b      	ldr	r3, [r7, #16]
   136e2:	625a      	str	r2, [r3, #36]	; 0x24
   136e4:	2300      	movs	r3, #0
   136e6:	0018      	movs	r0, r3
   136e8:	46bd      	mov	sp, r7
   136ea:	b007      	add	sp, #28
   136ec:	bd90      	pop	{r4, r7, pc}
   136ee:	46c0      	nop			; (mov r8, r8)
   136f0:	000189c9 	.word	0x000189c9
   136f4:	fffbffff 	.word	0xfffbffff
   136f8:	0001896b 	.word	0x0001896b
   136fc:	0001890d 	.word	0x0001890d

00013700 <i2c_master_read_packet_job>:
   13700:	b580      	push	{r7, lr}
   13702:	b082      	sub	sp, #8
   13704:	af00      	add	r7, sp, #0
   13706:	6078      	str	r0, [r7, #4]
   13708:	6039      	str	r1, [r7, #0]
   1370a:	687b      	ldr	r3, [r7, #4]
   1370c:	8b9b      	ldrh	r3, [r3, #28]
   1370e:	b29b      	uxth	r3, r3
   13710:	2b00      	cmp	r3, #0
   13712:	d001      	beq.n	13718 <i2c_master_read_packet_job+0x18>
   13714:	2305      	movs	r3, #5
   13716:	e00c      	b.n	13732 <i2c_master_read_packet_job+0x32>
   13718:	687b      	ldr	r3, [r7, #4]
   1371a:	2201      	movs	r2, #1
   1371c:	729a      	strb	r2, [r3, #10]
   1371e:	687b      	ldr	r3, [r7, #4]
   13720:	2201      	movs	r2, #1
   13722:	72da      	strb	r2, [r3, #11]
   13724:	683a      	ldr	r2, [r7, #0]
   13726:	687b      	ldr	r3, [r7, #4]
   13728:	0011      	movs	r1, r2
   1372a:	0018      	movs	r0, r3
   1372c:	4b03      	ldr	r3, [pc, #12]	; (1373c <i2c_master_read_packet_job+0x3c>)
   1372e:	4798      	blx	r3
   13730:	0003      	movs	r3, r0
   13732:	0018      	movs	r0, r3
   13734:	46bd      	mov	sp, r7
   13736:	b002      	add	sp, #8
   13738:	bd80      	pop	{r7, pc}
   1373a:	46c0      	nop			; (mov r8, r8)
   1373c:	000135a9 	.word	0x000135a9

00013740 <_i2c_master_write_packet>:
   13740:	b580      	push	{r7, lr}
   13742:	b084      	sub	sp, #16
   13744:	af00      	add	r7, sp, #0
   13746:	6078      	str	r0, [r7, #4]
   13748:	6039      	str	r1, [r7, #0]
   1374a:	687b      	ldr	r3, [r7, #4]
   1374c:	681b      	ldr	r3, [r3, #0]
   1374e:	60fb      	str	r3, [r7, #12]
   13750:	683b      	ldr	r3, [r7, #0]
   13752:	7a5b      	ldrb	r3, [r3, #9]
   13754:	2b00      	cmp	r3, #0
   13756:	d006      	beq.n	13766 <_i2c_master_write_packet+0x26>
   13758:	683b      	ldr	r3, [r7, #0]
   1375a:	7a9a      	ldrb	r2, [r3, #10]
   1375c:	687b      	ldr	r3, [r7, #4]
   1375e:	0011      	movs	r1, r2
   13760:	0018      	movs	r0, r3
   13762:	4b1e      	ldr	r3, [pc, #120]	; (137dc <_i2c_master_write_packet+0x9c>)
   13764:	4798      	blx	r3
   13766:	68fb      	ldr	r3, [r7, #12]
   13768:	685b      	ldr	r3, [r3, #4]
   1376a:	4a1d      	ldr	r2, [pc, #116]	; (137e0 <_i2c_master_write_packet+0xa0>)
   1376c:	401a      	ands	r2, r3
   1376e:	68fb      	ldr	r3, [r7, #12]
   13770:	605a      	str	r2, [r3, #4]
   13772:	683b      	ldr	r3, [r7, #0]
   13774:	685a      	ldr	r2, [r3, #4]
   13776:	687b      	ldr	r3, [r7, #4]
   13778:	621a      	str	r2, [r3, #32]
   1377a:	683b      	ldr	r3, [r7, #0]
   1377c:	885a      	ldrh	r2, [r3, #2]
   1377e:	687b      	ldr	r3, [r7, #4]
   13780:	839a      	strh	r2, [r3, #28]
   13782:	687b      	ldr	r3, [r7, #4]
   13784:	2224      	movs	r2, #36	; 0x24
   13786:	2100      	movs	r1, #0
   13788:	5499      	strb	r1, [r3, r2]
   1378a:	687b      	ldr	r3, [r7, #4]
   1378c:	2225      	movs	r2, #37	; 0x25
   1378e:	2105      	movs	r1, #5
   13790:	5499      	strb	r1, [r3, r2]
   13792:	68fb      	ldr	r3, [r7, #12]
   13794:	2203      	movs	r2, #3
   13796:	759a      	strb	r2, [r3, #22]
   13798:	683b      	ldr	r3, [r7, #0]
   1379a:	7a1b      	ldrb	r3, [r3, #8]
   1379c:	2b00      	cmp	r3, #0
   1379e:	d00d      	beq.n	137bc <_i2c_master_write_packet+0x7c>
   137a0:	683b      	ldr	r3, [r7, #0]
   137a2:	881b      	ldrh	r3, [r3, #0]
   137a4:	005a      	lsls	r2, r3, #1
   137a6:	683b      	ldr	r3, [r7, #0]
   137a8:	7a5b      	ldrb	r3, [r3, #9]
   137aa:	039b      	lsls	r3, r3, #14
   137ac:	4313      	orrs	r3, r2
   137ae:	001a      	movs	r2, r3
   137b0:	2380      	movs	r3, #128	; 0x80
   137b2:	021b      	lsls	r3, r3, #8
   137b4:	431a      	orrs	r2, r3
   137b6:	68fb      	ldr	r3, [r7, #12]
   137b8:	625a      	str	r2, [r3, #36]	; 0x24
   137ba:	e009      	b.n	137d0 <_i2c_master_write_packet+0x90>
   137bc:	683b      	ldr	r3, [r7, #0]
   137be:	881b      	ldrh	r3, [r3, #0]
   137c0:	005a      	lsls	r2, r3, #1
   137c2:	683b      	ldr	r3, [r7, #0]
   137c4:	7a5b      	ldrb	r3, [r3, #9]
   137c6:	039b      	lsls	r3, r3, #14
   137c8:	4313      	orrs	r3, r2
   137ca:	001a      	movs	r2, r3
   137cc:	68fb      	ldr	r3, [r7, #12]
   137ce:	625a      	str	r2, [r3, #36]	; 0x24
   137d0:	2300      	movs	r3, #0
   137d2:	0018      	movs	r0, r3
   137d4:	46bd      	mov	sp, r7
   137d6:	b004      	add	sp, #16
   137d8:	bd80      	pop	{r7, pc}
   137da:	46c0      	nop			; (mov r8, r8)
   137dc:	000189c9 	.word	0x000189c9
   137e0:	fffbffff 	.word	0xfffbffff

000137e4 <i2c_master_write_packet_job>:
   137e4:	b580      	push	{r7, lr}
   137e6:	b082      	sub	sp, #8
   137e8:	af00      	add	r7, sp, #0
   137ea:	6078      	str	r0, [r7, #4]
   137ec:	6039      	str	r1, [r7, #0]
   137ee:	687b      	ldr	r3, [r7, #4]
   137f0:	8b9b      	ldrh	r3, [r3, #28]
   137f2:	b29b      	uxth	r3, r3
   137f4:	2b00      	cmp	r3, #0
   137f6:	d001      	beq.n	137fc <i2c_master_write_packet_job+0x18>
   137f8:	2305      	movs	r3, #5
   137fa:	e00c      	b.n	13816 <i2c_master_write_packet_job+0x32>
   137fc:	687b      	ldr	r3, [r7, #4]
   137fe:	2201      	movs	r2, #1
   13800:	729a      	strb	r2, [r3, #10]
   13802:	687b      	ldr	r3, [r7, #4]
   13804:	2201      	movs	r2, #1
   13806:	72da      	strb	r2, [r3, #11]
   13808:	683a      	ldr	r2, [r7, #0]
   1380a:	687b      	ldr	r3, [r7, #4]
   1380c:	0011      	movs	r1, r2
   1380e:	0018      	movs	r0, r3
   13810:	4b03      	ldr	r3, [pc, #12]	; (13820 <i2c_master_write_packet_job+0x3c>)
   13812:	4798      	blx	r3
   13814:	0003      	movs	r3, r0
   13816:	0018      	movs	r0, r3
   13818:	46bd      	mov	sp, r7
   1381a:	b002      	add	sp, #8
   1381c:	bd80      	pop	{r7, pc}
   1381e:	46c0      	nop			; (mov r8, r8)
   13820:	00013741 	.word	0x00013741

00013824 <_i2c_master_interrupt_handler>:
   13824:	b580      	push	{r7, lr}
   13826:	b086      	sub	sp, #24
   13828:	af00      	add	r7, sp, #0
   1382a:	0002      	movs	r2, r0
   1382c:	1dfb      	adds	r3, r7, #7
   1382e:	701a      	strb	r2, [r3, #0]
   13830:	1dfb      	adds	r3, r7, #7
   13832:	781a      	ldrb	r2, [r3, #0]
   13834:	4b93      	ldr	r3, [pc, #588]	; (13a84 <_i2c_master_interrupt_handler+0x260>)
   13836:	0092      	lsls	r2, r2, #2
   13838:	58d3      	ldr	r3, [r2, r3]
   1383a:	617b      	str	r3, [r7, #20]
   1383c:	697b      	ldr	r3, [r7, #20]
   1383e:	681b      	ldr	r3, [r3, #0]
   13840:	613b      	str	r3, [r7, #16]
   13842:	693b      	ldr	r3, [r7, #16]
   13844:	681b      	ldr	r3, [r3, #0]
   13846:	011b      	lsls	r3, r3, #4
   13848:	0fdb      	lsrs	r3, r3, #31
   1384a:	b2db      	uxtb	r3, r3
   1384c:	001a      	movs	r2, r3
   1384e:	230f      	movs	r3, #15
   13850:	18fb      	adds	r3, r7, r3
   13852:	1e51      	subs	r1, r2, #1
   13854:	418a      	sbcs	r2, r1
   13856:	701a      	strb	r2, [r3, #0]
   13858:	230e      	movs	r3, #14
   1385a:	18fb      	adds	r3, r7, r3
   1385c:	697a      	ldr	r2, [r7, #20]
   1385e:	7e52      	ldrb	r2, [r2, #25]
   13860:	701a      	strb	r2, [r3, #0]
   13862:	697b      	ldr	r3, [r7, #20]
   13864:	7e1b      	ldrb	r3, [r3, #24]
   13866:	b2da      	uxtb	r2, r3
   13868:	230e      	movs	r3, #14
   1386a:	18fb      	adds	r3, r7, r3
   1386c:	210e      	movs	r1, #14
   1386e:	1879      	adds	r1, r7, r1
   13870:	7809      	ldrb	r1, [r1, #0]
   13872:	400a      	ands	r2, r1
   13874:	701a      	strb	r2, [r3, #0]
   13876:	697b      	ldr	r3, [r7, #20]
   13878:	8b5b      	ldrh	r3, [r3, #26]
   1387a:	b29b      	uxth	r3, r3
   1387c:	2b00      	cmp	r3, #0
   1387e:	d109      	bne.n	13894 <_i2c_master_interrupt_handler+0x70>
   13880:	697b      	ldr	r3, [r7, #20]
   13882:	8b9b      	ldrh	r3, [r3, #28]
   13884:	b29b      	uxth	r3, r3
   13886:	2b00      	cmp	r3, #0
   13888:	d004      	beq.n	13894 <_i2c_master_interrupt_handler+0x70>
   1388a:	697b      	ldr	r3, [r7, #20]
   1388c:	0018      	movs	r0, r3
   1388e:	4b7e      	ldr	r3, [pc, #504]	; (13a88 <_i2c_master_interrupt_handler+0x264>)
   13890:	4798      	blx	r3
   13892:	e070      	b.n	13976 <_i2c_master_interrupt_handler+0x152>
   13894:	697b      	ldr	r3, [r7, #20]
   13896:	8b5b      	ldrh	r3, [r3, #26]
   13898:	b29b      	uxth	r3, r3
   1389a:	2b00      	cmp	r3, #0
   1389c:	d039      	beq.n	13912 <_i2c_master_interrupt_handler+0xee>
   1389e:	697b      	ldr	r3, [r7, #20]
   138a0:	8b9b      	ldrh	r3, [r3, #28]
   138a2:	b29b      	uxth	r3, r3
   138a4:	2b00      	cmp	r3, #0
   138a6:	d134      	bne.n	13912 <_i2c_master_interrupt_handler+0xee>
   138a8:	697b      	ldr	r3, [r7, #20]
   138aa:	2225      	movs	r2, #37	; 0x25
   138ac:	5c9b      	ldrb	r3, [r3, r2]
   138ae:	b2db      	uxtb	r3, r3
   138b0:	2b05      	cmp	r3, #5
   138b2:	d12e      	bne.n	13912 <_i2c_master_interrupt_handler+0xee>
   138b4:	697b      	ldr	r3, [r7, #20]
   138b6:	2224      	movs	r2, #36	; 0x24
   138b8:	5c9b      	ldrb	r3, [r3, r2]
   138ba:	b2db      	uxtb	r3, r3
   138bc:	2b00      	cmp	r3, #0
   138be:	d128      	bne.n	13912 <_i2c_master_interrupt_handler+0xee>
   138c0:	693b      	ldr	r3, [r7, #16]
   138c2:	2203      	movs	r2, #3
   138c4:	751a      	strb	r2, [r3, #20]
   138c6:	697b      	ldr	r3, [r7, #20]
   138c8:	2200      	movs	r2, #0
   138ca:	835a      	strh	r2, [r3, #26]
   138cc:	697b      	ldr	r3, [r7, #20]
   138ce:	2225      	movs	r2, #37	; 0x25
   138d0:	2100      	movs	r1, #0
   138d2:	5499      	strb	r1, [r3, r2]
   138d4:	697b      	ldr	r3, [r7, #20]
   138d6:	7a9b      	ldrb	r3, [r3, #10]
   138d8:	2b00      	cmp	r3, #0
   138da:	d00b      	beq.n	138f4 <_i2c_master_interrupt_handler+0xd0>
   138dc:	697b      	ldr	r3, [r7, #20]
   138de:	0018      	movs	r0, r3
   138e0:	4b6a      	ldr	r3, [pc, #424]	; (13a8c <_i2c_master_interrupt_handler+0x268>)
   138e2:	4798      	blx	r3
   138e4:	693b      	ldr	r3, [r7, #16]
   138e6:	685b      	ldr	r3, [r3, #4]
   138e8:	22c0      	movs	r2, #192	; 0xc0
   138ea:	0292      	lsls	r2, r2, #10
   138ec:	431a      	orrs	r2, r3
   138ee:	693b      	ldr	r3, [r7, #16]
   138f0:	605a      	str	r2, [r3, #4]
   138f2:	e002      	b.n	138fa <_i2c_master_interrupt_handler+0xd6>
   138f4:	693b      	ldr	r3, [r7, #16]
   138f6:	2201      	movs	r2, #1
   138f8:	761a      	strb	r2, [r3, #24]
   138fa:	230e      	movs	r3, #14
   138fc:	18fb      	adds	r3, r7, r3
   138fe:	781b      	ldrb	r3, [r3, #0]
   13900:	2201      	movs	r2, #1
   13902:	4013      	ands	r3, r2
   13904:	d037      	beq.n	13976 <_i2c_master_interrupt_handler+0x152>
   13906:	697b      	ldr	r3, [r7, #20]
   13908:	68db      	ldr	r3, [r3, #12]
   1390a:	697a      	ldr	r2, [r7, #20]
   1390c:	0010      	movs	r0, r2
   1390e:	4798      	blx	r3
   13910:	e031      	b.n	13976 <_i2c_master_interrupt_handler+0x152>
   13912:	697b      	ldr	r3, [r7, #20]
   13914:	8b5b      	ldrh	r3, [r3, #26]
   13916:	b29b      	uxth	r3, r3
   13918:	2b00      	cmp	r3, #0
   1391a:	d02c      	beq.n	13976 <_i2c_master_interrupt_handler+0x152>
   1391c:	697b      	ldr	r3, [r7, #20]
   1391e:	8b9b      	ldrh	r3, [r3, #28]
   13920:	b29b      	uxth	r3, r3
   13922:	2b00      	cmp	r3, #0
   13924:	d027      	beq.n	13976 <_i2c_master_interrupt_handler+0x152>
   13926:	693b      	ldr	r3, [r7, #16]
   13928:	8b5b      	ldrh	r3, [r3, #26]
   1392a:	b29b      	uxth	r3, r3
   1392c:	001a      	movs	r2, r3
   1392e:	2320      	movs	r3, #32
   13930:	4013      	ands	r3, r2
   13932:	d111      	bne.n	13958 <_i2c_master_interrupt_handler+0x134>
   13934:	230f      	movs	r3, #15
   13936:	18fb      	adds	r3, r7, r3
   13938:	781b      	ldrb	r3, [r3, #0]
   1393a:	2201      	movs	r2, #1
   1393c:	4053      	eors	r3, r2
   1393e:	b2db      	uxtb	r3, r3
   13940:	2b00      	cmp	r3, #0
   13942:	d104      	bne.n	1394e <_i2c_master_interrupt_handler+0x12a>
   13944:	697b      	ldr	r3, [r7, #20]
   13946:	8b9b      	ldrh	r3, [r3, #28]
   13948:	b29b      	uxth	r3, r3
   1394a:	2b01      	cmp	r3, #1
   1394c:	d004      	beq.n	13958 <_i2c_master_interrupt_handler+0x134>
   1394e:	697b      	ldr	r3, [r7, #20]
   13950:	2225      	movs	r2, #37	; 0x25
   13952:	2141      	movs	r1, #65	; 0x41
   13954:	5499      	strb	r1, [r3, r2]
   13956:	e00e      	b.n	13976 <_i2c_master_interrupt_handler+0x152>
   13958:	697b      	ldr	r3, [r7, #20]
   1395a:	2224      	movs	r2, #36	; 0x24
   1395c:	5c9b      	ldrb	r3, [r3, r2]
   1395e:	b2db      	uxtb	r3, r3
   13960:	2b00      	cmp	r3, #0
   13962:	d104      	bne.n	1396e <_i2c_master_interrupt_handler+0x14a>
   13964:	697b      	ldr	r3, [r7, #20]
   13966:	0018      	movs	r0, r3
   13968:	4b49      	ldr	r3, [pc, #292]	; (13a90 <_i2c_master_interrupt_handler+0x26c>)
   1396a:	4798      	blx	r3
   1396c:	e003      	b.n	13976 <_i2c_master_interrupt_handler+0x152>
   1396e:	697b      	ldr	r3, [r7, #20]
   13970:	0018      	movs	r0, r3
   13972:	4b48      	ldr	r3, [pc, #288]	; (13a94 <_i2c_master_interrupt_handler+0x270>)
   13974:	4798      	blx	r3
   13976:	697b      	ldr	r3, [r7, #20]
   13978:	8b5b      	ldrh	r3, [r3, #26]
   1397a:	b29b      	uxth	r3, r3
   1397c:	2b00      	cmp	r3, #0
   1397e:	d047      	beq.n	13a10 <_i2c_master_interrupt_handler+0x1ec>
   13980:	697b      	ldr	r3, [r7, #20]
   13982:	8b9b      	ldrh	r3, [r3, #28]
   13984:	b29b      	uxth	r3, r3
   13986:	2b00      	cmp	r3, #0
   13988:	d142      	bne.n	13a10 <_i2c_master_interrupt_handler+0x1ec>
   1398a:	697b      	ldr	r3, [r7, #20]
   1398c:	2225      	movs	r2, #37	; 0x25
   1398e:	5c9b      	ldrb	r3, [r3, r2]
   13990:	b2db      	uxtb	r3, r3
   13992:	2b05      	cmp	r3, #5
   13994:	d13c      	bne.n	13a10 <_i2c_master_interrupt_handler+0x1ec>
   13996:	697b      	ldr	r3, [r7, #20]
   13998:	2224      	movs	r2, #36	; 0x24
   1399a:	5c9b      	ldrb	r3, [r3, r2]
   1399c:	b2db      	uxtb	r3, r3
   1399e:	2b01      	cmp	r3, #1
   139a0:	d136      	bne.n	13a10 <_i2c_master_interrupt_handler+0x1ec>
   139a2:	693b      	ldr	r3, [r7, #16]
   139a4:	7e1b      	ldrb	r3, [r3, #24]
   139a6:	b2db      	uxtb	r3, r3
   139a8:	001a      	movs	r2, r3
   139aa:	2302      	movs	r3, #2
   139ac:	4013      	ands	r3, r2
   139ae:	d002      	beq.n	139b6 <_i2c_master_interrupt_handler+0x192>
   139b0:	693b      	ldr	r3, [r7, #16]
   139b2:	2202      	movs	r2, #2
   139b4:	761a      	strb	r2, [r3, #24]
   139b6:	693b      	ldr	r3, [r7, #16]
   139b8:	2203      	movs	r2, #3
   139ba:	751a      	strb	r2, [r3, #20]
   139bc:	697b      	ldr	r3, [r7, #20]
   139be:	2200      	movs	r2, #0
   139c0:	835a      	strh	r2, [r3, #26]
   139c2:	697b      	ldr	r3, [r7, #20]
   139c4:	2225      	movs	r2, #37	; 0x25
   139c6:	2100      	movs	r1, #0
   139c8:	5499      	strb	r1, [r3, r2]
   139ca:	230e      	movs	r3, #14
   139cc:	18fb      	adds	r3, r7, r3
   139ce:	781b      	ldrb	r3, [r3, #0]
   139d0:	2202      	movs	r2, #2
   139d2:	4013      	ands	r3, r2
   139d4:	d00b      	beq.n	139ee <_i2c_master_interrupt_handler+0x1ca>
   139d6:	697b      	ldr	r3, [r7, #20]
   139d8:	2224      	movs	r2, #36	; 0x24
   139da:	5c9b      	ldrb	r3, [r3, r2]
   139dc:	b2db      	uxtb	r3, r3
   139de:	2b01      	cmp	r3, #1
   139e0:	d105      	bne.n	139ee <_i2c_master_interrupt_handler+0x1ca>
   139e2:	697b      	ldr	r3, [r7, #20]
   139e4:	691b      	ldr	r3, [r3, #16]
   139e6:	697a      	ldr	r2, [r7, #20]
   139e8:	0010      	movs	r0, r2
   139ea:	4798      	blx	r3
   139ec:	e010      	b.n	13a10 <_i2c_master_interrupt_handler+0x1ec>
   139ee:	230e      	movs	r3, #14
   139f0:	18fb      	adds	r3, r7, r3
   139f2:	781b      	ldrb	r3, [r3, #0]
   139f4:	2201      	movs	r2, #1
   139f6:	4013      	ands	r3, r2
   139f8:	d00a      	beq.n	13a10 <_i2c_master_interrupt_handler+0x1ec>
   139fa:	697b      	ldr	r3, [r7, #20]
   139fc:	2224      	movs	r2, #36	; 0x24
   139fe:	5c9b      	ldrb	r3, [r3, r2]
   13a00:	b2db      	uxtb	r3, r3
   13a02:	2b00      	cmp	r3, #0
   13a04:	d104      	bne.n	13a10 <_i2c_master_interrupt_handler+0x1ec>
   13a06:	697b      	ldr	r3, [r7, #20]
   13a08:	68db      	ldr	r3, [r3, #12]
   13a0a:	697a      	ldr	r2, [r7, #20]
   13a0c:	0010      	movs	r0, r2
   13a0e:	4798      	blx	r3
   13a10:	697b      	ldr	r3, [r7, #20]
   13a12:	2225      	movs	r2, #37	; 0x25
   13a14:	5c9b      	ldrb	r3, [r3, r2]
   13a16:	b2db      	uxtb	r3, r3
   13a18:	2b05      	cmp	r3, #5
   13a1a:	d02e      	beq.n	13a7a <_i2c_master_interrupt_handler+0x256>
   13a1c:	697b      	ldr	r3, [r7, #20]
   13a1e:	2225      	movs	r2, #37	; 0x25
   13a20:	5c9b      	ldrb	r3, [r3, r2]
   13a22:	b2db      	uxtb	r3, r3
   13a24:	2b00      	cmp	r3, #0
   13a26:	d028      	beq.n	13a7a <_i2c_master_interrupt_handler+0x256>
   13a28:	693b      	ldr	r3, [r7, #16]
   13a2a:	2203      	movs	r2, #3
   13a2c:	751a      	strb	r2, [r3, #20]
   13a2e:	697b      	ldr	r3, [r7, #20]
   13a30:	2200      	movs	r2, #0
   13a32:	835a      	strh	r2, [r3, #26]
   13a34:	697b      	ldr	r3, [r7, #20]
   13a36:	2200      	movs	r2, #0
   13a38:	839a      	strh	r2, [r3, #28]
   13a3a:	697b      	ldr	r3, [r7, #20]
   13a3c:	2225      	movs	r2, #37	; 0x25
   13a3e:	5c9b      	ldrb	r3, [r3, r2]
   13a40:	b2db      	uxtb	r3, r3
   13a42:	2b41      	cmp	r3, #65	; 0x41
   13a44:	d00e      	beq.n	13a64 <_i2c_master_interrupt_handler+0x240>
   13a46:	697b      	ldr	r3, [r7, #20]
   13a48:	7a9b      	ldrb	r3, [r3, #10]
   13a4a:	2b00      	cmp	r3, #0
   13a4c:	d00a      	beq.n	13a64 <_i2c_master_interrupt_handler+0x240>
   13a4e:	697b      	ldr	r3, [r7, #20]
   13a50:	0018      	movs	r0, r3
   13a52:	4b0e      	ldr	r3, [pc, #56]	; (13a8c <_i2c_master_interrupt_handler+0x268>)
   13a54:	4798      	blx	r3
   13a56:	693b      	ldr	r3, [r7, #16]
   13a58:	685b      	ldr	r3, [r3, #4]
   13a5a:	22e0      	movs	r2, #224	; 0xe0
   13a5c:	02d2      	lsls	r2, r2, #11
   13a5e:	431a      	orrs	r2, r3
   13a60:	693b      	ldr	r3, [r7, #16]
   13a62:	605a      	str	r2, [r3, #4]
   13a64:	230e      	movs	r3, #14
   13a66:	18fb      	adds	r3, r7, r3
   13a68:	781b      	ldrb	r3, [r3, #0]
   13a6a:	2204      	movs	r2, #4
   13a6c:	4013      	ands	r3, r2
   13a6e:	d004      	beq.n	13a7a <_i2c_master_interrupt_handler+0x256>
   13a70:	697b      	ldr	r3, [r7, #20]
   13a72:	695b      	ldr	r3, [r3, #20]
   13a74:	697a      	ldr	r2, [r7, #20]
   13a76:	0010      	movs	r0, r2
   13a78:	4798      	blx	r3
   13a7a:	46c0      	nop			; (mov r8, r8)
   13a7c:	46bd      	mov	sp, r7
   13a7e:	b006      	add	sp, #24
   13a80:	bd80      	pop	{r7, pc}
   13a82:	46c0      	nop			; (mov r8, r8)
   13a84:	20005848 	.word	0x20005848
   13a88:	000134a5 	.word	0x000134a5
   13a8c:	00013315 	.word	0x00013315
   13a90:	00013429 	.word	0x00013429
   13a94:	00013339 	.word	0x00013339

00013a98 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
   13a98:	b580      	push	{r7, lr}
   13a9a:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   13a9c:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   13aa0:	4b02      	ldr	r3, [pc, #8]	; (13aac <NVIC_SystemReset+0x14>)
   13aa2:	4a03      	ldr	r2, [pc, #12]	; (13ab0 <NVIC_SystemReset+0x18>)
   13aa4:	60da      	str	r2, [r3, #12]
   13aa6:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
   13aaa:	e7fe      	b.n	13aaa <NVIC_SystemReset+0x12>
   13aac:	e000ed00 	.word	0xe000ed00
   13ab0:	05fa0004 	.word	0x05fa0004

00013ab4 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
   13ab4:	b580      	push	{r7, lr}
   13ab6:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   13ab8:	4b02      	ldr	r3, [pc, #8]	; (13ac4 <system_reset+0x10>)
   13aba:	4798      	blx	r3
}
   13abc:	46c0      	nop			; (mov r8, r8)
   13abe:	46bd      	mov	sp, r7
   13ac0:	bd80      	pop	{r7, pc}
   13ac2:	46c0      	nop			; (mov r8, r8)
   13ac4:	00013a99 	.word	0x00013a99

00013ac8 <vCommandConsoleTask>:
/******************************************************************************
 * CLI Thread
 ******************************************************************************/

void vCommandConsoleTask(void *pvParameters)
{
   13ac8:	b580      	push	{r7, lr}
   13aca:	b086      	sub	sp, #24
   13acc:	af00      	add	r7, sp, #0
   13ace:	6078      	str	r0, [r7, #4]
    // REGISTER COMMANDS HERE
    FreeRTOS_CLIRegisterCommand(&xOTAUCommand);
   13ad0:	4ba0      	ldr	r3, [pc, #640]	; (13d54 <vCommandConsoleTask+0x28c>)
   13ad2:	0018      	movs	r0, r3
   13ad4:	4ba0      	ldr	r3, [pc, #640]	; (13d58 <vCommandConsoleTask+0x290>)
   13ad6:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xImuGetCommand);
   13ad8:	4ba0      	ldr	r3, [pc, #640]	; (13d5c <vCommandConsoleTask+0x294>)
   13ada:	0018      	movs	r0, r3
   13adc:	4b9e      	ldr	r3, [pc, #632]	; (13d58 <vCommandConsoleTask+0x290>)
   13ade:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xClearScreen);
   13ae0:	4b9f      	ldr	r3, [pc, #636]	; (13d60 <vCommandConsoleTask+0x298>)
   13ae2:	0018      	movs	r0, r3
   13ae4:	4b9c      	ldr	r3, [pc, #624]	; (13d58 <vCommandConsoleTask+0x290>)
   13ae6:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xResetCommand);
   13ae8:	4b9e      	ldr	r3, [pc, #632]	; (13d64 <vCommandConsoleTask+0x29c>)
   13aea:	0018      	movs	r0, r3
   13aec:	4b9a      	ldr	r3, [pc, #616]	; (13d58 <vCommandConsoleTask+0x290>)
   13aee:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xNeotrellisTurnLEDCommand);
   13af0:	4b9d      	ldr	r3, [pc, #628]	; (13d68 <vCommandConsoleTask+0x2a0>)
   13af2:	0018      	movs	r0, r3
   13af4:	4b98      	ldr	r3, [pc, #608]	; (13d58 <vCommandConsoleTask+0x290>)
   13af6:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xNeotrellisProcessButtonCommand);
   13af8:	4b9c      	ldr	r3, [pc, #624]	; (13d6c <vCommandConsoleTask+0x2a4>)
   13afa:	0018      	movs	r0, r3
   13afc:	4b96      	ldr	r3, [pc, #600]	; (13d58 <vCommandConsoleTask+0x290>)
   13afe:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xDistanceSensorGetDistance);
   13b00:	4b9b      	ldr	r3, [pc, #620]	; (13d70 <vCommandConsoleTask+0x2a8>)
   13b02:	0018      	movs	r0, r3
   13b04:	4b94      	ldr	r3, [pc, #592]	; (13d58 <vCommandConsoleTask+0x290>)
   13b06:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xSendDummyGameData);
   13b08:	4b9a      	ldr	r3, [pc, #616]	; (13d74 <vCommandConsoleTask+0x2ac>)
   13b0a:	0018      	movs	r0, r3
   13b0c:	4b92      	ldr	r3, [pc, #584]	; (13d58 <vCommandConsoleTask+0x290>)
   13b0e:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xSendTestData);
   13b10:	4b99      	ldr	r3, [pc, #612]	; (13d78 <vCommandConsoleTask+0x2b0>)
   13b12:	0018      	movs	r0, r3
   13b14:	4b90      	ldr	r3, [pc, #576]	; (13d58 <vCommandConsoleTask+0x290>)
   13b16:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xI2cScan);
   13b18:	4b98      	ldr	r3, [pc, #608]	; (13d7c <vCommandConsoleTask+0x2b4>)
   13b1a:	0018      	movs	r0, r3
   13b1c:	4b8e      	ldr	r3, [pc, #568]	; (13d58 <vCommandConsoleTask+0x290>)
   13b1e:	4798      	blx	r3

    char cRxedChar[2];
    unsigned char cInputIndex = 0;
   13b20:	2317      	movs	r3, #23
   13b22:	18fb      	adds	r3, r7, r3
   13b24:	2200      	movs	r2, #0
   13b26:	701a      	strb	r2, [r3, #0]
    /* This code assumes the peripheral being used as the console has already
    been opened and configured, and is passed into the task as the task
    parameter.  Cast the task parameter to the correct type. */

    /* Send a welcome message to the user knows they are connected. */
    SerialConsoleWriteString((char *)pcWelcomeMessage);
   13b28:	4b95      	ldr	r3, [pc, #596]	; (13d80 <vCommandConsoleTask+0x2b8>)
   13b2a:	0018      	movs	r0, r3
   13b2c:	4b95      	ldr	r3, [pc, #596]	; (13d84 <vCommandConsoleTask+0x2bc>)
   13b2e:	4798      	blx	r3

    // Any semaphores/mutexes/etc you needed to be initialized, you can do them here
    cliCharReadySemaphore = xSemaphoreCreateBinary();
   13b30:	2203      	movs	r2, #3
   13b32:	2100      	movs	r1, #0
   13b34:	2001      	movs	r0, #1
   13b36:	4b94      	ldr	r3, [pc, #592]	; (13d88 <vCommandConsoleTask+0x2c0>)
   13b38:	4798      	blx	r3
   13b3a:	0002      	movs	r2, r0
   13b3c:	4b93      	ldr	r3, [pc, #588]	; (13d8c <vCommandConsoleTask+0x2c4>)
   13b3e:	601a      	str	r2, [r3, #0]
    if (cliCharReadySemaphore == NULL) {
   13b40:	4b92      	ldr	r3, [pc, #584]	; (13d8c <vCommandConsoleTask+0x2c4>)
   13b42:	681b      	ldr	r3, [r3, #0]
   13b44:	2b00      	cmp	r3, #0
   13b46:	d107      	bne.n	13b58 <vCommandConsoleTask+0x90>
        LogMessage(LOG_ERROR_LVL, "Could not allocate semaphore\r\n");
   13b48:	4b91      	ldr	r3, [pc, #580]	; (13d90 <vCommandConsoleTask+0x2c8>)
   13b4a:	0019      	movs	r1, r3
   13b4c:	2003      	movs	r0, #3
   13b4e:	4b91      	ldr	r3, [pc, #580]	; (13d94 <vCommandConsoleTask+0x2cc>)
   13b50:	4798      	blx	r3
        vTaskSuspend(NULL);
   13b52:	2000      	movs	r0, #0
   13b54:	4b90      	ldr	r3, [pc, #576]	; (13d98 <vCommandConsoleTask+0x2d0>)
   13b56:	4798      	blx	r3
    }

    for (;;) {
        FreeRTOS_read(&cRxedChar[0]);
   13b58:	230c      	movs	r3, #12
   13b5a:	18fb      	adds	r3, r7, r3
   13b5c:	0018      	movs	r0, r3
   13b5e:	4b8f      	ldr	r3, [pc, #572]	; (13d9c <vCommandConsoleTask+0x2d4>)
   13b60:	4798      	blx	r3

        if (cRxedChar[0] == '\n' || cRxedChar[0] == '\r') {
   13b62:	230c      	movs	r3, #12
   13b64:	18fb      	adds	r3, r7, r3
   13b66:	781b      	ldrb	r3, [r3, #0]
   13b68:	2b0a      	cmp	r3, #10
   13b6a:	d004      	beq.n	13b76 <vCommandConsoleTask+0xae>
   13b6c:	230c      	movs	r3, #12
   13b6e:	18fb      	adds	r3, r7, r3
   13b70:	781b      	ldrb	r3, [r3, #0]
   13b72:	2b0d      	cmp	r3, #13
   13b74:	d137      	bne.n	13be6 <vCommandConsoleTask+0x11e>
            /* A newline character was received, so the input command string is
            complete and can be processed.  Transmit a line separator, just to
            make the output easier to read. */
            SerialConsoleWriteString((char *)"\r\n");
   13b76:	4b8a      	ldr	r3, [pc, #552]	; (13da0 <vCommandConsoleTask+0x2d8>)
   13b78:	0018      	movs	r0, r3
   13b7a:	4b82      	ldr	r3, [pc, #520]	; (13d84 <vCommandConsoleTask+0x2bc>)
   13b7c:	4798      	blx	r3
            // Copy for last command
            isEscapeCode = false;
   13b7e:	4b89      	ldr	r3, [pc, #548]	; (13da4 <vCommandConsoleTask+0x2dc>)
   13b80:	2200      	movs	r2, #0
   13b82:	701a      	strb	r2, [r3, #0]
            pcEscapeCodePos = 0;
   13b84:	4b88      	ldr	r3, [pc, #544]	; (13da8 <vCommandConsoleTask+0x2e0>)
   13b86:	2200      	movs	r2, #0
   13b88:	701a      	strb	r2, [r3, #0]
            strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI - 1);
   13b8a:	4988      	ldr	r1, [pc, #544]	; (13dac <vCommandConsoleTask+0x2e4>)
   13b8c:	4b88      	ldr	r3, [pc, #544]	; (13db0 <vCommandConsoleTask+0x2e8>)
   13b8e:	2231      	movs	r2, #49	; 0x31
   13b90:	0018      	movs	r0, r3
   13b92:	4b88      	ldr	r3, [pc, #544]	; (13db4 <vCommandConsoleTask+0x2ec>)
   13b94:	4798      	blx	r3
            pcLastCommand[MAX_INPUT_LENGTH_CLI - 1] = 0;  // Ensure null termination
   13b96:	4b86      	ldr	r3, [pc, #536]	; (13db0 <vCommandConsoleTask+0x2e8>)
   13b98:	2231      	movs	r2, #49	; 0x31
   13b9a:	2100      	movs	r1, #0
   13b9c:	5499      	strb	r1, [r3, r2]
            explanation of why this is. */
            do {
                /* Send the command string to the command interpreter.  Any
                output generated by the command interpreter will be placed in the
                pcOutputString buffer. */
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString,        /* The command string.*/
   13b9e:	4986      	ldr	r1, [pc, #536]	; (13db8 <vCommandConsoleTask+0x2f0>)
   13ba0:	4b82      	ldr	r3, [pc, #520]	; (13dac <vCommandConsoleTask+0x2e4>)
   13ba2:	2264      	movs	r2, #100	; 0x64
   13ba4:	0018      	movs	r0, r3
   13ba6:	4b85      	ldr	r3, [pc, #532]	; (13dbc <vCommandConsoleTask+0x2f4>)
   13ba8:	4798      	blx	r3
   13baa:	0003      	movs	r3, r0
   13bac:	613b      	str	r3, [r7, #16]
                );

                /* Write the output generated by the command interpreter to the
                console. */
                // Ensure it is null terminated
                pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
   13bae:	4b82      	ldr	r3, [pc, #520]	; (13db8 <vCommandConsoleTask+0x2f0>)
   13bb0:	2263      	movs	r2, #99	; 0x63
   13bb2:	2100      	movs	r1, #0
   13bb4:	5499      	strb	r1, [r3, r2]
                SerialConsoleWriteString(pcOutputString);
   13bb6:	4b80      	ldr	r3, [pc, #512]	; (13db8 <vCommandConsoleTask+0x2f0>)
   13bb8:	0018      	movs	r0, r3
   13bba:	4b72      	ldr	r3, [pc, #456]	; (13d84 <vCommandConsoleTask+0x2bc>)
   13bbc:	4798      	blx	r3

            } while (xMoreDataToFollow != pdFALSE);
   13bbe:	693b      	ldr	r3, [r7, #16]
   13bc0:	2b00      	cmp	r3, #0
   13bc2:	d1ec      	bne.n	13b9e <vCommandConsoleTask+0xd6>

            /* All the strings generated by the input command have been sent.
            Processing of the command is complete.  Clear the input string ready
            to receive the next command. */
            cInputIndex = 0;
   13bc4:	2317      	movs	r3, #23
   13bc6:	18fb      	adds	r3, r7, r3
   13bc8:	2200      	movs	r2, #0
   13bca:	701a      	strb	r2, [r3, #0]
            memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   13bcc:	4b77      	ldr	r3, [pc, #476]	; (13dac <vCommandConsoleTask+0x2e4>)
   13bce:	2232      	movs	r2, #50	; 0x32
   13bd0:	2100      	movs	r1, #0
   13bd2:	0018      	movs	r0, r3
   13bd4:	4b7a      	ldr	r3, [pc, #488]	; (13dc0 <vCommandConsoleTask+0x2f8>)
   13bd6:	4798      	blx	r3
            memset(pcOutputString, 0, MAX_OUTPUT_LENGTH_CLI);
   13bd8:	4b77      	ldr	r3, [pc, #476]	; (13db8 <vCommandConsoleTask+0x2f0>)
   13bda:	2264      	movs	r2, #100	; 0x64
   13bdc:	2100      	movs	r1, #0
   13bde:	0018      	movs	r0, r3
   13be0:	4b77      	ldr	r3, [pc, #476]	; (13dc0 <vCommandConsoleTask+0x2f8>)
   13be2:	4798      	blx	r3
   13be4:	e0b5      	b.n	13d52 <vCommandConsoleTask+0x28a>
        } else {
            /* The if() clause performs the processing after a newline character
is received.  This else clause performs the processing if any other
character is received. */

            if (true == isEscapeCode) {
   13be6:	4b6f      	ldr	r3, [pc, #444]	; (13da4 <vCommandConsoleTask+0x2dc>)
   13be8:	781b      	ldrb	r3, [r3, #0]
   13bea:	2b00      	cmp	r3, #0
   13bec:	d059      	beq.n	13ca2 <vCommandConsoleTask+0x1da>
                if (pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
   13bee:	4b6e      	ldr	r3, [pc, #440]	; (13da8 <vCommandConsoleTask+0x2e0>)
   13bf0:	781b      	ldrb	r3, [r3, #0]
   13bf2:	2b03      	cmp	r3, #3
   13bf4:	d80c      	bhi.n	13c10 <vCommandConsoleTask+0x148>
                    pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
   13bf6:	4b6c      	ldr	r3, [pc, #432]	; (13da8 <vCommandConsoleTask+0x2e0>)
   13bf8:	781b      	ldrb	r3, [r3, #0]
   13bfa:	1c5a      	adds	r2, r3, #1
   13bfc:	b2d1      	uxtb	r1, r2
   13bfe:	4a6a      	ldr	r2, [pc, #424]	; (13da8 <vCommandConsoleTask+0x2e0>)
   13c00:	7011      	strb	r1, [r2, #0]
   13c02:	001a      	movs	r2, r3
   13c04:	230c      	movs	r3, #12
   13c06:	18fb      	adds	r3, r7, r3
   13c08:	7819      	ldrb	r1, [r3, #0]
   13c0a:	4b6e      	ldr	r3, [pc, #440]	; (13dc4 <vCommandConsoleTask+0x2fc>)
   13c0c:	5499      	strb	r1, [r3, r2]
   13c0e:	e005      	b.n	13c1c <vCommandConsoleTask+0x154>
                } else {
                    isEscapeCode = false;
   13c10:	4b64      	ldr	r3, [pc, #400]	; (13da4 <vCommandConsoleTask+0x2dc>)
   13c12:	2200      	movs	r2, #0
   13c14:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   13c16:	4b64      	ldr	r3, [pc, #400]	; (13da8 <vCommandConsoleTask+0x2e0>)
   13c18:	2200      	movs	r2, #0
   13c1a:	701a      	strb	r2, [r3, #0]
                }

                if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
   13c1c:	4b62      	ldr	r3, [pc, #392]	; (13da8 <vCommandConsoleTask+0x2e0>)
   13c1e:	781b      	ldrb	r3, [r3, #0]
   13c20:	2b01      	cmp	r3, #1
   13c22:	d999      	bls.n	13b58 <vCommandConsoleTask+0x90>
                    // UP ARROW SHOW LAST COMMAND
                    if (strcasecmp(pcEscapeCodes, "oa")) {
   13c24:	4a68      	ldr	r2, [pc, #416]	; (13dc8 <vCommandConsoleTask+0x300>)
   13c26:	4b67      	ldr	r3, [pc, #412]	; (13dc4 <vCommandConsoleTask+0x2fc>)
   13c28:	0011      	movs	r1, r2
   13c2a:	0018      	movs	r0, r3
   13c2c:	4b67      	ldr	r3, [pc, #412]	; (13dcc <vCommandConsoleTask+0x304>)
   13c2e:	4798      	blx	r3
   13c30:	1e03      	subs	r3, r0, #0
   13c32:	d02f      	beq.n	13c94 <vCommandConsoleTask+0x1cc>
                        /// Delete current line and add prompt (">")
                        sprintf(pcInputString, "%c[2K\r>", 27);
   13c34:	4966      	ldr	r1, [pc, #408]	; (13dd0 <vCommandConsoleTask+0x308>)
   13c36:	4b5d      	ldr	r3, [pc, #372]	; (13dac <vCommandConsoleTask+0x2e4>)
   13c38:	221b      	movs	r2, #27
   13c3a:	0018      	movs	r0, r3
   13c3c:	4b65      	ldr	r3, [pc, #404]	; (13dd4 <vCommandConsoleTask+0x30c>)
   13c3e:	4798      	blx	r3
                        SerialConsoleWriteString((char *)pcInputString);
   13c40:	4b5a      	ldr	r3, [pc, #360]	; (13dac <vCommandConsoleTask+0x2e4>)
   13c42:	0018      	movs	r0, r3
   13c44:	4b4f      	ldr	r3, [pc, #316]	; (13d84 <vCommandConsoleTask+0x2bc>)
   13c46:	4798      	blx	r3
                        /// Clear input buffer
                        cInputIndex = 0;
   13c48:	2317      	movs	r3, #23
   13c4a:	18fb      	adds	r3, r7, r3
   13c4c:	2200      	movs	r2, #0
   13c4e:	701a      	strb	r2, [r3, #0]
                        memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   13c50:	4b56      	ldr	r3, [pc, #344]	; (13dac <vCommandConsoleTask+0x2e4>)
   13c52:	2232      	movs	r2, #50	; 0x32
   13c54:	2100      	movs	r1, #0
   13c56:	0018      	movs	r0, r3
   13c58:	4b59      	ldr	r3, [pc, #356]	; (13dc0 <vCommandConsoleTask+0x2f8>)
   13c5a:	4798      	blx	r3
                        /// Send last command
                        strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1);
   13c5c:	4954      	ldr	r1, [pc, #336]	; (13db0 <vCommandConsoleTask+0x2e8>)
   13c5e:	4b53      	ldr	r3, [pc, #332]	; (13dac <vCommandConsoleTask+0x2e4>)
   13c60:	2231      	movs	r2, #49	; 0x31
   13c62:	0018      	movs	r0, r3
   13c64:	4b53      	ldr	r3, [pc, #332]	; (13db4 <vCommandConsoleTask+0x2ec>)
   13c66:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
   13c68:	4b50      	ldr	r3, [pc, #320]	; (13dac <vCommandConsoleTask+0x2e4>)
   13c6a:	0018      	movs	r0, r3
   13c6c:	4b5a      	ldr	r3, [pc, #360]	; (13dd8 <vCommandConsoleTask+0x310>)
   13c6e:	4798      	blx	r3
   13c70:	0003      	movs	r3, r0
   13c72:	2b30      	cmp	r3, #48	; 0x30
   13c74:	d806      	bhi.n	13c84 <vCommandConsoleTask+0x1bc>
   13c76:	4b4e      	ldr	r3, [pc, #312]	; (13db0 <vCommandConsoleTask+0x2e8>)
   13c78:	0018      	movs	r0, r3
   13c7a:	4b57      	ldr	r3, [pc, #348]	; (13dd8 <vCommandConsoleTask+0x310>)
   13c7c:	4798      	blx	r3
   13c7e:	0003      	movs	r3, r0
   13c80:	b2da      	uxtb	r2, r3
   13c82:	e000      	b.n	13c86 <vCommandConsoleTask+0x1be>
   13c84:	2231      	movs	r2, #49	; 0x31
   13c86:	2317      	movs	r3, #23
   13c88:	18fb      	adds	r3, r7, r3
   13c8a:	701a      	strb	r2, [r3, #0]
                        SerialConsoleWriteString(pcInputString);
   13c8c:	4b47      	ldr	r3, [pc, #284]	; (13dac <vCommandConsoleTask+0x2e4>)
   13c8e:	0018      	movs	r0, r3
   13c90:	4b3c      	ldr	r3, [pc, #240]	; (13d84 <vCommandConsoleTask+0x2bc>)
   13c92:	4798      	blx	r3
                    }

                    isEscapeCode = false;
   13c94:	4b43      	ldr	r3, [pc, #268]	; (13da4 <vCommandConsoleTask+0x2dc>)
   13c96:	2200      	movs	r2, #0
   13c98:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   13c9a:	4b43      	ldr	r3, [pc, #268]	; (13da8 <vCommandConsoleTask+0x2e0>)
   13c9c:	2200      	movs	r2, #0
   13c9e:	701a      	strb	r2, [r3, #0]
   13ca0:	e75a      	b.n	13b58 <vCommandConsoleTask+0x90>
            }
            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */

            else if (cRxedChar[0] == '\r') {
   13ca2:	230c      	movs	r3, #12
   13ca4:	18fb      	adds	r3, r7, r3
   13ca6:	781b      	ldrb	r3, [r3, #0]
   13ca8:	2b0d      	cmp	r3, #13
   13caa:	d100      	bne.n	13cae <vCommandConsoleTask+0x1e6>
   13cac:	e754      	b.n	13b58 <vCommandConsoleTask+0x90>
                /* Ignore carriage returns. */
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   13cae:	230c      	movs	r3, #12
   13cb0:	18fb      	adds	r3, r7, r3
   13cb2:	781b      	ldrb	r3, [r3, #0]
   13cb4:	2b08      	cmp	r3, #8
   13cb6:	d004      	beq.n	13cc2 <vCommandConsoleTask+0x1fa>
   13cb8:	230c      	movs	r3, #12
   13cba:	18fb      	adds	r3, r7, r3
   13cbc:	781b      	ldrb	r3, [r3, #0]
   13cbe:	2b7f      	cmp	r3, #127	; 0x7f
   13cc0:	d11c      	bne.n	13cfc <vCommandConsoleTask+0x234>
                char erase[4] = {0x08, 0x20, 0x08, 0x00};
   13cc2:	2308      	movs	r3, #8
   13cc4:	18fb      	adds	r3, r7, r3
   13cc6:	4a45      	ldr	r2, [pc, #276]	; (13ddc <vCommandConsoleTask+0x314>)
   13cc8:	6812      	ldr	r2, [r2, #0]
   13cca:	601a      	str	r2, [r3, #0]
                SerialConsoleWriteString(erase);
   13ccc:	2308      	movs	r3, #8
   13cce:	18fb      	adds	r3, r7, r3
   13cd0:	0018      	movs	r0, r3
   13cd2:	4b2c      	ldr	r3, [pc, #176]	; (13d84 <vCommandConsoleTask+0x2bc>)
   13cd4:	4798      	blx	r3
                /* Backspace was pressed.  Erase the last character in the input
                buffer - if there are any. */
                if (cInputIndex > 0) {
   13cd6:	2317      	movs	r3, #23
   13cd8:	18fb      	adds	r3, r7, r3
   13cda:	781b      	ldrb	r3, [r3, #0]
   13cdc:	2b00      	cmp	r3, #0
   13cde:	d037      	beq.n	13d50 <vCommandConsoleTask+0x288>
                    cInputIndex--;
   13ce0:	2317      	movs	r3, #23
   13ce2:	18fb      	adds	r3, r7, r3
   13ce4:	781a      	ldrb	r2, [r3, #0]
   13ce6:	2317      	movs	r3, #23
   13ce8:	18fb      	adds	r3, r7, r3
   13cea:	3a01      	subs	r2, #1
   13cec:	701a      	strb	r2, [r3, #0]
                    pcInputString[cInputIndex] = 0;
   13cee:	2317      	movs	r3, #23
   13cf0:	18fb      	adds	r3, r7, r3
   13cf2:	781b      	ldrb	r3, [r3, #0]
   13cf4:	4a2d      	ldr	r2, [pc, #180]	; (13dac <vCommandConsoleTask+0x2e4>)
   13cf6:	2100      	movs	r1, #0
   13cf8:	54d1      	strb	r1, [r2, r3]
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   13cfa:	e029      	b.n	13d50 <vCommandConsoleTask+0x288>
                }
            }
            // ESC
            else if (cRxedChar[0] == ASCII_ESC) {
   13cfc:	230c      	movs	r3, #12
   13cfe:	18fb      	adds	r3, r7, r3
   13d00:	781b      	ldrb	r3, [r3, #0]
   13d02:	2b1b      	cmp	r3, #27
   13d04:	d106      	bne.n	13d14 <vCommandConsoleTask+0x24c>
                isEscapeCode = true;  // Next characters will be code arguments
   13d06:	4b27      	ldr	r3, [pc, #156]	; (13da4 <vCommandConsoleTask+0x2dc>)
   13d08:	2201      	movs	r2, #1
   13d0a:	701a      	strb	r2, [r3, #0]
                pcEscapeCodePos = 0;
   13d0c:	4b26      	ldr	r3, [pc, #152]	; (13da8 <vCommandConsoleTask+0x2e0>)
   13d0e:	2200      	movs	r2, #0
   13d10:	701a      	strb	r2, [r3, #0]
   13d12:	e721      	b.n	13b58 <vCommandConsoleTask+0x90>
            } else {
                /* A character was entered.  It was not a new line, backspace
                or carriage return, so it is accepted as part of the input and
                placed into the input buffer.  When a n is entered the complete
                string will be passed to the command interpreter. */
                if (cInputIndex < MAX_INPUT_LENGTH_CLI) {
   13d14:	2317      	movs	r3, #23
   13d16:	18fb      	adds	r3, r7, r3
   13d18:	781b      	ldrb	r3, [r3, #0]
   13d1a:	2b31      	cmp	r3, #49	; 0x31
   13d1c:	d80e      	bhi.n	13d3c <vCommandConsoleTask+0x274>
                    pcInputString[cInputIndex] = cRxedChar[0];
   13d1e:	2317      	movs	r3, #23
   13d20:	18fb      	adds	r3, r7, r3
   13d22:	781b      	ldrb	r3, [r3, #0]
   13d24:	220c      	movs	r2, #12
   13d26:	18ba      	adds	r2, r7, r2
   13d28:	7811      	ldrb	r1, [r2, #0]
   13d2a:	4a20      	ldr	r2, [pc, #128]	; (13dac <vCommandConsoleTask+0x2e4>)
   13d2c:	54d1      	strb	r1, [r2, r3]
                    cInputIndex++;
   13d2e:	2317      	movs	r3, #23
   13d30:	18fb      	adds	r3, r7, r3
   13d32:	781a      	ldrb	r2, [r3, #0]
   13d34:	2317      	movs	r3, #23
   13d36:	18fb      	adds	r3, r7, r3
   13d38:	3201      	adds	r2, #1
   13d3a:	701a      	strb	r2, [r3, #0]
                }

                // Order Echo
                cRxedChar[1] = 0;
   13d3c:	230c      	movs	r3, #12
   13d3e:	18fb      	adds	r3, r7, r3
   13d40:	2200      	movs	r2, #0
   13d42:	705a      	strb	r2, [r3, #1]
                SerialConsoleWriteString(&cRxedChar[0]);
   13d44:	230c      	movs	r3, #12
   13d46:	18fb      	adds	r3, r7, r3
   13d48:	0018      	movs	r0, r3
   13d4a:	4b0e      	ldr	r3, [pc, #56]	; (13d84 <vCommandConsoleTask+0x2bc>)
   13d4c:	4798      	blx	r3
   13d4e:	e703      	b.n	13b58 <vCommandConsoleTask+0x90>
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   13d50:	46c0      	nop			; (mov r8, r8)
        FreeRTOS_read(&cRxedChar[0]);
   13d52:	e701      	b.n	13b58 <vCommandConsoleTask+0x90>
   13d54:	00036ea8 	.word	0x00036ea8
   13d58:	00018b11 	.word	0x00018b11
   13d5c:	00036e98 	.word	0x00036e98
   13d60:	00036f28 	.word	0x00036f28
   13d64:	00036eb8 	.word	0x00036eb8
   13d68:	00036ec8 	.word	0x00036ec8
   13d6c:	00036ed8 	.word	0x00036ed8
   13d70:	00036ee8 	.word	0x00036ee8
   13d74:	00036ef8 	.word	0x00036ef8
   13d78:	00036f18 	.word	0x00036f18
   13d7c:	00036f08 	.word	0x00036f08
   13d80:	00036ae4 	.word	0x00036ae4
   13d84:	0001ea39 	.word	0x0001ea39
   13d88:	0001b0d9 	.word	0x0001b0d9
   13d8c:	20004420 	.word	0x20004420
   13d90:	00036d20 	.word	0x00036d20
   13d94:	0001eb25 	.word	0x0001eb25
   13d98:	0001cec5 	.word	0x0001cec5
   13d9c:	00013de1 	.word	0x00013de1
   13da0:	00036d40 	.word	0x00036d40
   13da4:	20000534 	.word	0x20000534
   13da8:	20000535 	.word	0x20000535
   13dac:	2000056c 	.word	0x2000056c
   13db0:	20000538 	.word	0x20000538
   13db4:	00035aef 	.word	0x00035aef
   13db8:	200005a0 	.word	0x200005a0
   13dbc:	00018b81 	.word	0x00018b81
   13dc0:	00035707 	.word	0x00035707
   13dc4:	20000604 	.word	0x20000604
   13dc8:	00036d44 	.word	0x00036d44
   13dcc:	00035a09 	.word	0x00035a09
   13dd0:	00036d48 	.word	0x00036d48
   13dd4:	000359c5 	.word	0x000359c5
   13dd8:	00035abf 	.word	0x00035abf
   13ddc:	00036d50 	.word	0x00036d50

00013de0 <FreeRTOS_read>:
 * @brief		This function block the thread unless we received a character
 * @details		This function blocks until UartSemaphoreHandle is released to continue reading characters in CLI
 * @note
 */
static void FreeRTOS_read(char *character)
{
   13de0:	b580      	push	{r7, lr}
   13de2:	b084      	sub	sp, #16
   13de4:	af00      	add	r7, sp, #0
   13de6:	6078      	str	r0, [r7, #4]
    // We check if there are more characters in the buffer that arrived since the last time
    // This function returns -1 if the buffer is empty, other value otherwise
    int ret = SerialConsoleReadCharacter((uint8_t *)character);
   13de8:	687b      	ldr	r3, [r7, #4]
   13dea:	0018      	movs	r0, r3
   13dec:	4b0c      	ldr	r3, [pc, #48]	; (13e20 <FreeRTOS_read+0x40>)
   13dee:	4798      	blx	r3
   13df0:	0003      	movs	r3, r0
   13df2:	60fb      	str	r3, [r7, #12]

    while (ret == -1) {
   13df4:	e00d      	b.n	13e12 <FreeRTOS_read+0x32>
        // there are no more characters - block the thread until we receive a semaphore indicating reception of at least 1 character
        xSemaphoreTake(cliCharReadySemaphore, portMAX_DELAY);
   13df6:	4b0b      	ldr	r3, [pc, #44]	; (13e24 <FreeRTOS_read+0x44>)
   13df8:	681a      	ldr	r2, [r3, #0]
   13dfa:	2301      	movs	r3, #1
   13dfc:	425b      	negs	r3, r3
   13dfe:	0019      	movs	r1, r3
   13e00:	0010      	movs	r0, r2
   13e02:	4b09      	ldr	r3, [pc, #36]	; (13e28 <FreeRTOS_read+0x48>)
   13e04:	4798      	blx	r3

        // If we are here it means there are characters in the buffer - we re-read from the buffer to get the newly acquired character
        ret = SerialConsoleReadCharacter((uint8_t *)character);
   13e06:	687b      	ldr	r3, [r7, #4]
   13e08:	0018      	movs	r0, r3
   13e0a:	4b05      	ldr	r3, [pc, #20]	; (13e20 <FreeRTOS_read+0x40>)
   13e0c:	4798      	blx	r3
   13e0e:	0003      	movs	r3, r0
   13e10:	60fb      	str	r3, [r7, #12]
    while (ret == -1) {
   13e12:	68fb      	ldr	r3, [r7, #12]
   13e14:	3301      	adds	r3, #1
   13e16:	d0ee      	beq.n	13df6 <FreeRTOS_read+0x16>
    }
}
   13e18:	46c0      	nop			; (mov r8, r8)
   13e1a:	46bd      	mov	sp, r7
   13e1c:	b004      	add	sp, #16
   13e1e:	bd80      	pop	{r7, pc}
   13e20:	0001ead5 	.word	0x0001ead5
   13e24:	20004420 	.word	0x20004420
   13e28:	0001c091 	.word	0x0001c091

00013e2c <CliCharReadySemaphoreGiveFromISR>:
 * @brief		Give cliCharReadySemaphore binary semaphore from an ISR
 * @details
 * @note
 */
void CliCharReadySemaphoreGiveFromISR(void)
{
   13e2c:	b580      	push	{r7, lr}
   13e2e:	af00      	add	r7, sp, #0
    static BaseType_t xHigherPriorityTaskWoken;
    xHigherPriorityTaskWoken = pdFALSE;
   13e30:	4b0a      	ldr	r3, [pc, #40]	; (13e5c <CliCharReadySemaphoreGiveFromISR+0x30>)
   13e32:	2200      	movs	r2, #0
   13e34:	601a      	str	r2, [r3, #0]
    xSemaphoreGiveFromISR(cliCharReadySemaphore, &xHigherPriorityTaskWoken);
   13e36:	4b0a      	ldr	r3, [pc, #40]	; (13e60 <CliCharReadySemaphoreGiveFromISR+0x34>)
   13e38:	681b      	ldr	r3, [r3, #0]
   13e3a:	4a08      	ldr	r2, [pc, #32]	; (13e5c <CliCharReadySemaphoreGiveFromISR+0x30>)
   13e3c:	0011      	movs	r1, r2
   13e3e:	0018      	movs	r0, r3
   13e40:	4b08      	ldr	r3, [pc, #32]	; (13e64 <CliCharReadySemaphoreGiveFromISR+0x38>)
   13e42:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   13e44:	4b05      	ldr	r3, [pc, #20]	; (13e5c <CliCharReadySemaphoreGiveFromISR+0x30>)
   13e46:	681b      	ldr	r3, [r3, #0]
   13e48:	2b00      	cmp	r3, #0
   13e4a:	d003      	beq.n	13e54 <CliCharReadySemaphoreGiveFromISR+0x28>
   13e4c:	4b06      	ldr	r3, [pc, #24]	; (13e68 <CliCharReadySemaphoreGiveFromISR+0x3c>)
   13e4e:	2280      	movs	r2, #128	; 0x80
   13e50:	0552      	lsls	r2, r2, #21
   13e52:	601a      	str	r2, [r3, #0]
}
   13e54:	46c0      	nop			; (mov r8, r8)
   13e56:	46bd      	mov	sp, r7
   13e58:	bd80      	pop	{r7, pc}
   13e5a:	46c0      	nop			; (mov r8, r8)
   13e5c:	20000608 	.word	0x20000608
   13e60:	20004420 	.word	0x20004420
   13e64:	0001ba09 	.word	0x0001ba09
   13e68:	e000ed04 	.word	0xe000ed04

00013e6c <CLI_GetImuData>:
 * CLI Functions - Define here
 ******************************************************************************/

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_GetImuData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13e6c:	b5b0      	push	{r4, r5, r7, lr}
   13e6e:	b088      	sub	sp, #32
   13e70:	af02      	add	r7, sp, #8
   13e72:	60f8      	str	r0, [r7, #12]
   13e74:	60b9      	str	r1, [r7, #8]
   13e76:	607a      	str	r2, [r7, #4]
    static int16_t data_raw_acceleration[3];
    static float acceleration_mg[3];
    uint8_t reg;
    stmdev_ctx_t *dev_ctx = GetImuStruct();
   13e78:	4b2e      	ldr	r3, [pc, #184]	; (13f34 <CLI_GetImuData+0xc8>)
   13e7a:	4798      	blx	r3
   13e7c:	0003      	movs	r3, r0
   13e7e:	617b      	str	r3, [r7, #20]

    /* Read output only if new xl value is available */
    lsm6dso_xl_flag_data_ready_get(dev_ctx, &reg);
   13e80:	2313      	movs	r3, #19
   13e82:	18fa      	adds	r2, r7, r3
   13e84:	697b      	ldr	r3, [r7, #20]
   13e86:	0011      	movs	r1, r2
   13e88:	0018      	movs	r0, r3
   13e8a:	4b2b      	ldr	r3, [pc, #172]	; (13f38 <CLI_GetImuData+0xcc>)
   13e8c:	4798      	blx	r3

    if (reg) {
   13e8e:	2313      	movs	r3, #19
   13e90:	18fb      	adds	r3, r7, r3
   13e92:	781b      	ldrb	r3, [r3, #0]
   13e94:	2b00      	cmp	r3, #0
   13e96:	d041      	beq.n	13f1c <CLI_GetImuData+0xb0>
        memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
   13e98:	4b28      	ldr	r3, [pc, #160]	; (13f3c <CLI_GetImuData+0xd0>)
   13e9a:	2206      	movs	r2, #6
   13e9c:	2100      	movs	r1, #0
   13e9e:	0018      	movs	r0, r3
   13ea0:	4b27      	ldr	r3, [pc, #156]	; (13f40 <CLI_GetImuData+0xd4>)
   13ea2:	4798      	blx	r3
        lsm6dso_acceleration_raw_get(dev_ctx, data_raw_acceleration);
   13ea4:	4a25      	ldr	r2, [pc, #148]	; (13f3c <CLI_GetImuData+0xd0>)
   13ea6:	697b      	ldr	r3, [r7, #20]
   13ea8:	0011      	movs	r1, r2
   13eaa:	0018      	movs	r0, r3
   13eac:	4b25      	ldr	r3, [pc, #148]	; (13f44 <CLI_GetImuData+0xd8>)
   13eae:	4798      	blx	r3
        acceleration_mg[0] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[0]);
   13eb0:	4b22      	ldr	r3, [pc, #136]	; (13f3c <CLI_GetImuData+0xd0>)
   13eb2:	2200      	movs	r2, #0
   13eb4:	5e9b      	ldrsh	r3, [r3, r2]
   13eb6:	0018      	movs	r0, r3
   13eb8:	4b23      	ldr	r3, [pc, #140]	; (13f48 <CLI_GetImuData+0xdc>)
   13eba:	4798      	blx	r3
   13ebc:	1c02      	adds	r2, r0, #0
   13ebe:	4b23      	ldr	r3, [pc, #140]	; (13f4c <CLI_GetImuData+0xe0>)
   13ec0:	601a      	str	r2, [r3, #0]
        acceleration_mg[1] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[1]);
   13ec2:	4b1e      	ldr	r3, [pc, #120]	; (13f3c <CLI_GetImuData+0xd0>)
   13ec4:	2202      	movs	r2, #2
   13ec6:	5e9b      	ldrsh	r3, [r3, r2]
   13ec8:	0018      	movs	r0, r3
   13eca:	4b1f      	ldr	r3, [pc, #124]	; (13f48 <CLI_GetImuData+0xdc>)
   13ecc:	4798      	blx	r3
   13ece:	1c02      	adds	r2, r0, #0
   13ed0:	4b1e      	ldr	r3, [pc, #120]	; (13f4c <CLI_GetImuData+0xe0>)
   13ed2:	605a      	str	r2, [r3, #4]
        acceleration_mg[2] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[2]);
   13ed4:	4b19      	ldr	r3, [pc, #100]	; (13f3c <CLI_GetImuData+0xd0>)
   13ed6:	2204      	movs	r2, #4
   13ed8:	5e9b      	ldrsh	r3, [r3, r2]
   13eda:	0018      	movs	r0, r3
   13edc:	4b1a      	ldr	r3, [pc, #104]	; (13f48 <CLI_GetImuData+0xdc>)
   13ede:	4798      	blx	r3
   13ee0:	1c02      	adds	r2, r0, #0
   13ee2:	4b1a      	ldr	r3, [pc, #104]	; (13f4c <CLI_GetImuData+0xe0>)
   13ee4:	609a      	str	r2, [r3, #8]

        snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Acceleration [mg]:X %d\tY %d\tZ %d\r\n", (int)acceleration_mg[0], (int)acceleration_mg[1], (int)acceleration_mg[2]);
   13ee6:	4b19      	ldr	r3, [pc, #100]	; (13f4c <CLI_GetImuData+0xe0>)
   13ee8:	681a      	ldr	r2, [r3, #0]
   13eea:	4b19      	ldr	r3, [pc, #100]	; (13f50 <CLI_GetImuData+0xe4>)
   13eec:	1c10      	adds	r0, r2, #0
   13eee:	4798      	blx	r3
   13ef0:	0005      	movs	r5, r0
   13ef2:	4b16      	ldr	r3, [pc, #88]	; (13f4c <CLI_GetImuData+0xe0>)
   13ef4:	685a      	ldr	r2, [r3, #4]
   13ef6:	4b16      	ldr	r3, [pc, #88]	; (13f50 <CLI_GetImuData+0xe4>)
   13ef8:	1c10      	adds	r0, r2, #0
   13efa:	4798      	blx	r3
   13efc:	0004      	movs	r4, r0
   13efe:	4b13      	ldr	r3, [pc, #76]	; (13f4c <CLI_GetImuData+0xe0>)
   13f00:	689a      	ldr	r2, [r3, #8]
   13f02:	4b13      	ldr	r3, [pc, #76]	; (13f50 <CLI_GetImuData+0xe4>)
   13f04:	1c10      	adds	r0, r2, #0
   13f06:	4798      	blx	r3
   13f08:	0003      	movs	r3, r0
   13f0a:	4a12      	ldr	r2, [pc, #72]	; (13f54 <CLI_GetImuData+0xe8>)
   13f0c:	68b9      	ldr	r1, [r7, #8]
   13f0e:	68f8      	ldr	r0, [r7, #12]
   13f10:	9301      	str	r3, [sp, #4]
   13f12:	9400      	str	r4, [sp, #0]
   13f14:	002b      	movs	r3, r5
   13f16:	4c10      	ldr	r4, [pc, #64]	; (13f58 <CLI_GetImuData+0xec>)
   13f18:	47a0      	blx	r4
   13f1a:	e005      	b.n	13f28 <CLI_GetImuData+0xbc>
    } else {
        snprintf((char *)pcWriteBuffer, xWriteBufferLen, "No data ready! \r\n");
   13f1c:	4a0f      	ldr	r2, [pc, #60]	; (13f5c <CLI_GetImuData+0xf0>)
   13f1e:	68b9      	ldr	r1, [r7, #8]
   13f20:	68fb      	ldr	r3, [r7, #12]
   13f22:	0018      	movs	r0, r3
   13f24:	4b0c      	ldr	r3, [pc, #48]	; (13f58 <CLI_GetImuData+0xec>)
   13f26:	4798      	blx	r3
    }
    return pdFALSE;
   13f28:	2300      	movs	r3, #0
}
   13f2a:	0018      	movs	r0, r3
   13f2c:	46bd      	mov	sp, r7
   13f2e:	b006      	add	sp, #24
   13f30:	bdb0      	pop	{r4, r5, r7, pc}
   13f32:	46c0      	nop			; (mov r8, r8)
   13f34:	00015ee5 	.word	0x00015ee5
   13f38:	00015991 	.word	0x00015991
   13f3c:	2000060c 	.word	0x2000060c
   13f40:	00035707 	.word	0x00035707
   13f44:	000159cd 	.word	0x000159cd
   13f48:	00015221 	.word	0x00015221
   13f4c:	20000614 	.word	0x20000614
   13f50:	00033cad 	.word	0x00033cad
   13f54:	00036d54 	.word	0x00036d54
   13f58:	00035961 	.word	0x00035961
   13f5c:	00036d78 	.word	0x00036d78

00013f60 <xCliClearTerminalScreen>:
// THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
// SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
// CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen(char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13f60:	b590      	push	{r4, r7, lr}
   13f62:	b087      	sub	sp, #28
   13f64:	af00      	add	r7, sp, #0
   13f66:	60f8      	str	r0, [r7, #12]
   13f68:	60b9      	str	r1, [r7, #8]
   13f6a:	607a      	str	r2, [r7, #4]
    char clearScreen = ASCII_ESC;
   13f6c:	2317      	movs	r3, #23
   13f6e:	18fb      	adds	r3, r7, r3
   13f70:	221b      	movs	r2, #27
   13f72:	701a      	strb	r2, [r3, #0]
    snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
   13f74:	2317      	movs	r3, #23
   13f76:	18fb      	adds	r3, r7, r3
   13f78:	781b      	ldrb	r3, [r3, #0]
   13f7a:	4a08      	ldr	r2, [pc, #32]	; (13f9c <xCliClearTerminalScreen+0x3c>)
   13f7c:	4808      	ldr	r0, [pc, #32]	; (13fa0 <xCliClearTerminalScreen+0x40>)
   13f7e:	210f      	movs	r1, #15
   13f80:	4c08      	ldr	r4, [pc, #32]	; (13fa4 <xCliClearTerminalScreen+0x44>)
   13f82:	47a0      	blx	r4
    snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
   13f84:	4a06      	ldr	r2, [pc, #24]	; (13fa0 <xCliClearTerminalScreen+0x40>)
   13f86:	68b9      	ldr	r1, [r7, #8]
   13f88:	68fb      	ldr	r3, [r7, #12]
   13f8a:	0018      	movs	r0, r3
   13f8c:	4b05      	ldr	r3, [pc, #20]	; (13fa4 <xCliClearTerminalScreen+0x44>)
   13f8e:	4798      	blx	r3
    return pdFALSE;
   13f90:	2300      	movs	r3, #0
}
   13f92:	0018      	movs	r0, r3
   13f94:	46bd      	mov	sp, r7
   13f96:	b007      	add	sp, #28
   13f98:	bd90      	pop	{r4, r7, pc}
   13f9a:	46c0      	nop			; (mov r8, r8)
   13f9c:	00036d8c 	.word	0x00036d8c
   13fa0:	20000524 	.word	0x20000524
   13fa4:	00035961 	.word	0x00035961

00013fa8 <CLI_OTAU>:

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_OTAU(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13fa8:	b580      	push	{r7, lr}
   13faa:	b084      	sub	sp, #16
   13fac:	af00      	add	r7, sp, #0
   13fae:	60f8      	str	r0, [r7, #12]
   13fb0:	60b9      	str	r1, [r7, #8]
   13fb2:	607a      	str	r2, [r7, #4]
    WifiHandlerSetState(WIFI_DOWNLOAD_INIT);
   13fb4:	2002      	movs	r0, #2
   13fb6:	4b03      	ldr	r3, [pc, #12]	; (13fc4 <CLI_OTAU+0x1c>)
   13fb8:	4798      	blx	r3

    return pdFALSE;
   13fba:	2300      	movs	r3, #0
}
   13fbc:	0018      	movs	r0, r3
   13fbe:	46bd      	mov	sp, r7
   13fc0:	b004      	add	sp, #16
   13fc2:	bd80      	pop	{r7, pc}
   13fc4:	000180f5 	.word	0x000180f5

00013fc8 <CLI_ResetDevice>:

// Example CLI Command. Resets system.
BaseType_t CLI_ResetDevice(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13fc8:	b580      	push	{r7, lr}
   13fca:	b084      	sub	sp, #16
   13fcc:	af00      	add	r7, sp, #0
   13fce:	60f8      	str	r0, [r7, #12]
   13fd0:	60b9      	str	r1, [r7, #8]
   13fd2:	607a      	str	r2, [r7, #4]
    system_reset();
   13fd4:	4b03      	ldr	r3, [pc, #12]	; (13fe4 <CLI_ResetDevice+0x1c>)
   13fd6:	4798      	blx	r3
    return pdFALSE;
   13fd8:	2300      	movs	r3, #0
}
   13fda:	0018      	movs	r0, r3
   13fdc:	46bd      	mov	sp, r7
   13fde:	b004      	add	sp, #16
   13fe0:	bd80      	pop	{r7, pc}
   13fe2:	46c0      	nop			; (mov r8, r8)
   13fe4:	00013ab5 	.word	0x00013ab5

00013fe8 <CLI_NeotrellisSetLed>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_NeotrellisSetLed(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13fe8:	b580      	push	{r7, lr}
   13fea:	b084      	sub	sp, #16
   13fec:	af00      	add	r7, sp, #0
   13fee:	60f8      	str	r0, [r7, #12]
   13ff0:	60b9      	str	r1, [r7, #8]
   13ff2:	607a      	str	r2, [r7, #4]
    snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Students to fill out!");
   13ff4:	4a05      	ldr	r2, [pc, #20]	; (1400c <CLI_NeotrellisSetLed+0x24>)
   13ff6:	68b9      	ldr	r1, [r7, #8]
   13ff8:	68fb      	ldr	r3, [r7, #12]
   13ffa:	0018      	movs	r0, r3
   13ffc:	4b04      	ldr	r3, [pc, #16]	; (14010 <CLI_NeotrellisSetLed+0x28>)
   13ffe:	4798      	blx	r3
    // Check code SeesawSetLed and SeesawSetLed
    // How do you get parameters? Checl link in comments!
    // Check that the input is sanitized: Key between 0-15, RGB between 0-255. Print if there is an error!
    // return pdFalse to tell the FreeRTOS CLI your call is done and does not need to call again.
    // This function expects 4 arguments inside pcCommandString: key, R, G, B.
    return pdFALSE;
   14000:	2300      	movs	r3, #0
}
   14002:	0018      	movs	r0, r3
   14004:	46bd      	mov	sp, r7
   14006:	b004      	add	sp, #16
   14008:	bd80      	pop	{r7, pc}
   1400a:	46c0      	nop			; (mov r8, r8)
   1400c:	00036d94 	.word	0x00036d94
   14010:	00035961 	.word	0x00035961

00014014 <CLI_NeotrellProcessButtonBuffer>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_NeotrellProcessButtonBuffer(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   14014:	b590      	push	{r4, r7, lr}
   14016:	b099      	sub	sp, #100	; 0x64
   14018:	af00      	add	r7, sp, #0
   1401a:	60f8      	str	r0, [r7, #12]
   1401c:	60b9      	str	r1, [r7, #8]
   1401e:	607a      	str	r2, [r7, #4]
    // snprintf(pcWriteBuffer,xWriteBufferLen, "count: %d\num_req_eve:%d\t\n",count,num_req_eve);
    // Print to pcWriteBuffer in order.
    // If the string is too long to print, print what you can.
    // The function you write will be useful in the future.
    uint8_t buffer[64];
    uint8_t count = SeesawGetKeypadCount();
   14020:	235f      	movs	r3, #95	; 0x5f
   14022:	18fc      	adds	r4, r7, r3
   14024:	4b36      	ldr	r3, [pc, #216]	; (14100 <CLI_NeotrellProcessButtonBuffer+0xec>)
   14026:	4798      	blx	r3
   14028:	0003      	movs	r3, r0
   1402a:	7023      	strb	r3, [r4, #0]
    if (count >= 1) {
   1402c:	235f      	movs	r3, #95	; 0x5f
   1402e:	18fb      	adds	r3, r7, r3
   14030:	781b      	ldrb	r3, [r3, #0]
   14032:	2b00      	cmp	r3, #0
   14034:	d05d      	beq.n	140f2 <CLI_NeotrellProcessButtonBuffer+0xde>
        int32_t res = SeesawReadKeypad(buffer, 1);
   14036:	2310      	movs	r3, #16
   14038:	18fb      	adds	r3, r7, r3
   1403a:	2101      	movs	r1, #1
   1403c:	0018      	movs	r0, r3
   1403e:	4b31      	ldr	r3, [pc, #196]	; (14104 <CLI_NeotrellProcessButtonBuffer+0xf0>)
   14040:	4798      	blx	r3
   14042:	0003      	movs	r3, r0
   14044:	65bb      	str	r3, [r7, #88]	; 0x58
        if (res == 0) {
   14046:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   14048:	2b00      	cmp	r3, #0
   1404a:	d150      	bne.n	140ee <CLI_NeotrellProcessButtonBuffer+0xda>
            uint8_t pos, press;
            press = buffer[0] & 0x3;
   1404c:	2310      	movs	r3, #16
   1404e:	18fb      	adds	r3, r7, r3
   14050:	781a      	ldrb	r2, [r3, #0]
   14052:	2357      	movs	r3, #87	; 0x57
   14054:	18fb      	adds	r3, r7, r3
   14056:	2103      	movs	r1, #3
   14058:	400a      	ands	r2, r1
   1405a:	701a      	strb	r2, [r3, #0]
            pos = buffer[0] >> 2;
   1405c:	2310      	movs	r3, #16
   1405e:	18fb      	adds	r3, r7, r3
   14060:	781a      	ldrb	r2, [r3, #0]
   14062:	2356      	movs	r3, #86	; 0x56
   14064:	18fb      	adds	r3, r7, r3
   14066:	0892      	lsrs	r2, r2, #2
   14068:	701a      	strb	r2, [r3, #0]
            int num = NEO_TRELLIS_SEESAW_KEY(pos);
   1406a:	2356      	movs	r3, #86	; 0x56
   1406c:	18fb      	adds	r3, r7, r3
   1406e:	781b      	ldrb	r3, [r3, #0]
   14070:	08db      	lsrs	r3, r3, #3
   14072:	b2db      	uxtb	r3, r3
   14074:	009a      	lsls	r2, r3, #2
   14076:	2356      	movs	r3, #86	; 0x56
   14078:	18fb      	adds	r3, r7, r3
   1407a:	781b      	ldrb	r3, [r3, #0]
   1407c:	2107      	movs	r1, #7
   1407e:	400b      	ands	r3, r1
   14080:	18d3      	adds	r3, r2, r3
   14082:	653b      	str	r3, [r7, #80]	; 0x50
            if (press == 0x2) {
   14084:	2357      	movs	r3, #87	; 0x57
   14086:	18fb      	adds	r3, r7, r3
   14088:	781b      	ldrb	r3, [r3, #0]
   1408a:	2b02      	cmp	r3, #2
   1408c:	d115      	bne.n	140ba <CLI_NeotrellProcessButtonBuffer+0xa6>
                snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Button #%d is released\r\n", NEO_TRELLIS_SEESAW_KEY(num));
   1408e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   14090:	2b00      	cmp	r3, #0
   14092:	da00      	bge.n	14096 <CLI_NeotrellProcessButtonBuffer+0x82>
   14094:	3307      	adds	r3, #7
   14096:	10db      	asrs	r3, r3, #3
   14098:	009a      	lsls	r2, r3, #2
   1409a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1409c:	491a      	ldr	r1, [pc, #104]	; (14108 <CLI_NeotrellProcessButtonBuffer+0xf4>)
   1409e:	400b      	ands	r3, r1
   140a0:	d504      	bpl.n	140ac <CLI_NeotrellProcessButtonBuffer+0x98>
   140a2:	3b01      	subs	r3, #1
   140a4:	2108      	movs	r1, #8
   140a6:	4249      	negs	r1, r1
   140a8:	430b      	orrs	r3, r1
   140aa:	3301      	adds	r3, #1
   140ac:	18d3      	adds	r3, r2, r3
   140ae:	4a17      	ldr	r2, [pc, #92]	; (1410c <CLI_NeotrellProcessButtonBuffer+0xf8>)
   140b0:	68b9      	ldr	r1, [r7, #8]
   140b2:	68f8      	ldr	r0, [r7, #12]
   140b4:	4c16      	ldr	r4, [pc, #88]	; (14110 <CLI_NeotrellProcessButtonBuffer+0xfc>)
   140b6:	47a0      	blx	r4
   140b8:	e019      	b.n	140ee <CLI_NeotrellProcessButtonBuffer+0xda>
            } else if (press == 0x3) {
   140ba:	2357      	movs	r3, #87	; 0x57
   140bc:	18fb      	adds	r3, r7, r3
   140be:	781b      	ldrb	r3, [r3, #0]
   140c0:	2b03      	cmp	r3, #3
   140c2:	d114      	bne.n	140ee <CLI_NeotrellProcessButtonBuffer+0xda>
                snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Button #%d is pressed\r\n", NEO_TRELLIS_SEESAW_KEY(num));
   140c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   140c6:	2b00      	cmp	r3, #0
   140c8:	da00      	bge.n	140cc <CLI_NeotrellProcessButtonBuffer+0xb8>
   140ca:	3307      	adds	r3, #7
   140cc:	10db      	asrs	r3, r3, #3
   140ce:	009a      	lsls	r2, r3, #2
   140d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   140d2:	490d      	ldr	r1, [pc, #52]	; (14108 <CLI_NeotrellProcessButtonBuffer+0xf4>)
   140d4:	400b      	ands	r3, r1
   140d6:	d504      	bpl.n	140e2 <CLI_NeotrellProcessButtonBuffer+0xce>
   140d8:	3b01      	subs	r3, #1
   140da:	2108      	movs	r1, #8
   140dc:	4249      	negs	r1, r1
   140de:	430b      	orrs	r3, r1
   140e0:	3301      	adds	r3, #1
   140e2:	18d3      	adds	r3, r2, r3
   140e4:	4a0b      	ldr	r2, [pc, #44]	; (14114 <CLI_NeotrellProcessButtonBuffer+0x100>)
   140e6:	68b9      	ldr	r1, [r7, #8]
   140e8:	68f8      	ldr	r0, [r7, #12]
   140ea:	4c09      	ldr	r4, [pc, #36]	; (14110 <CLI_NeotrellProcessButtonBuffer+0xfc>)
   140ec:	47a0      	blx	r4
            }
        }
        return pdTRUE;
   140ee:	2301      	movs	r3, #1
   140f0:	e002      	b.n	140f8 <CLI_NeotrellProcessButtonBuffer+0xe4>
    } else {
        pcWriteBuffer = 0;
   140f2:	2300      	movs	r3, #0
   140f4:	60fb      	str	r3, [r7, #12]
        return pdFALSE;
   140f6:	2300      	movs	r3, #0
    }
}
   140f8:	0018      	movs	r0, r3
   140fa:	46bd      	mov	sp, r7
   140fc:	b019      	add	sp, #100	; 0x64
   140fe:	bd90      	pop	{r4, r7, pc}
   14100:	000160e5 	.word	0x000160e5
   14104:	0001614d 	.word	0x0001614d
   14108:	80000007 	.word	0x80000007
   1410c:	00036dac 	.word	0x00036dac
   14110:	00035961 	.word	0x00035961
   14114:	00036dc8 	.word	0x00036dc8

00014118 <CLI_DistanceSensorGetDistance>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_DistanceSensorGetDistance(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   14118:	b590      	push	{r4, r7, lr}
   1411a:	b087      	sub	sp, #28
   1411c:	af00      	add	r7, sp, #0
   1411e:	60f8      	str	r0, [r7, #12]
   14120:	60b9      	str	r1, [r7, #8]
   14122:	607a      	str	r2, [r7, #4]
    uint16_t distance = 0;
   14124:	2312      	movs	r3, #18
   14126:	18fb      	adds	r3, r7, r3
   14128:	2200      	movs	r2, #0
   1412a:	801a      	strh	r2, [r3, #0]
    int error = DistanceSensorGetDistance(&distance, 100);
   1412c:	2312      	movs	r3, #18
   1412e:	18fb      	adds	r3, r7, r3
   14130:	2164      	movs	r1, #100	; 0x64
   14132:	0018      	movs	r0, r3
   14134:	4b19      	ldr	r3, [pc, #100]	; (1419c <CLI_DistanceSensorGetDistance+0x84>)
   14136:	4798      	blx	r3
   14138:	0003      	movs	r3, r0
   1413a:	617b      	str	r3, [r7, #20]
    if (0 != error) {
   1413c:	697b      	ldr	r3, [r7, #20]
   1413e:	2b00      	cmp	r3, #0
   14140:	d006      	beq.n	14150 <CLI_DistanceSensorGetDistance+0x38>
        snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Sensor Error %d!\r\n", error);
   14142:	697b      	ldr	r3, [r7, #20]
   14144:	4a16      	ldr	r2, [pc, #88]	; (141a0 <CLI_DistanceSensorGetDistance+0x88>)
   14146:	68b9      	ldr	r1, [r7, #8]
   14148:	68f8      	ldr	r0, [r7, #12]
   1414a:	4c16      	ldr	r4, [pc, #88]	; (141a4 <CLI_DistanceSensorGetDistance+0x8c>)
   1414c:	47a0      	blx	r4
   1414e:	e007      	b.n	14160 <CLI_DistanceSensorGetDistance+0x48>
    } else {
        snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Distance: %d mm\r\n", distance);
   14150:	2312      	movs	r3, #18
   14152:	18fb      	adds	r3, r7, r3
   14154:	881b      	ldrh	r3, [r3, #0]
   14156:	4a14      	ldr	r2, [pc, #80]	; (141a8 <CLI_DistanceSensorGetDistance+0x90>)
   14158:	68b9      	ldr	r1, [r7, #8]
   1415a:	68f8      	ldr	r0, [r7, #12]
   1415c:	4c11      	ldr	r4, [pc, #68]	; (141a4 <CLI_DistanceSensorGetDistance+0x8c>)
   1415e:	47a0      	blx	r4
    }

    error = WifiAddDistanceDataToQueue(&distance);
   14160:	2312      	movs	r3, #18
   14162:	18fb      	adds	r3, r7, r3
   14164:	0018      	movs	r0, r3
   14166:	4b11      	ldr	r3, [pc, #68]	; (141ac <CLI_DistanceSensorGetDistance+0x94>)
   14168:	4798      	blx	r3
   1416a:	0003      	movs	r3, r0
   1416c:	617b      	str	r3, [r7, #20]
    if (error == pdTRUE) {
   1416e:	697b      	ldr	r3, [r7, #20]
   14170:	2b01      	cmp	r3, #1
   14172:	d10e      	bne.n	14192 <CLI_DistanceSensorGetDistance+0x7a>
        strcat((char *) pcWriteBuffer, "Distance Data MQTT Post\r\n");
   14174:	68fb      	ldr	r3, [r7, #12]
   14176:	0018      	movs	r0, r3
   14178:	4b0d      	ldr	r3, [pc, #52]	; (141b0 <CLI_DistanceSensorGetDistance+0x98>)
   1417a:	4798      	blx	r3
   1417c:	0003      	movs	r3, r0
   1417e:	001a      	movs	r2, r3
   14180:	68fb      	ldr	r3, [r7, #12]
   14182:	189a      	adds	r2, r3, r2
   14184:	4b0b      	ldr	r3, [pc, #44]	; (141b4 <CLI_DistanceSensorGetDistance+0x9c>)
   14186:	0010      	movs	r0, r2
   14188:	0019      	movs	r1, r3
   1418a:	231a      	movs	r3, #26
   1418c:	001a      	movs	r2, r3
   1418e:	4b0a      	ldr	r3, [pc, #40]	; (141b8 <CLI_DistanceSensorGetDistance+0xa0>)
   14190:	4798      	blx	r3
    }
    return pdFALSE;
   14192:	2300      	movs	r3, #0
}
   14194:	0018      	movs	r0, r3
   14196:	46bd      	mov	sp, r7
   14198:	b007      	add	sp, #28
   1419a:	bd90      	pop	{r4, r7, pc}
   1419c:	000147ad 	.word	0x000147ad
   141a0:	00036de0 	.word	0x00036de0
   141a4:	00035961 	.word	0x00035961
   141a8:	00036df4 	.word	0x00036df4
   141ac:	00018129 	.word	0x00018129
   141b0:	00035abf 	.word	0x00035abf
   141b4:	00036e08 	.word	0x00036e08
   141b8:	000356d1 	.word	0x000356d1

000141bc <CLI_SendDummyGameData>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_SendDummyGameData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   141bc:	b580      	push	{r7, lr}
   141be:	b08a      	sub	sp, #40	; 0x28
   141c0:	af00      	add	r7, sp, #0
   141c2:	60f8      	str	r0, [r7, #12]
   141c4:	60b9      	str	r1, [r7, #8]
   141c6:	607a      	str	r2, [r7, #4]
    struct GameDataPacket gamevar;

    gamevar.game[0] = 0;
   141c8:	2310      	movs	r3, #16
   141ca:	18fb      	adds	r3, r7, r3
   141cc:	2200      	movs	r2, #0
   141ce:	701a      	strb	r2, [r3, #0]
    gamevar.game[1] = 1;
   141d0:	2310      	movs	r3, #16
   141d2:	18fb      	adds	r3, r7, r3
   141d4:	2201      	movs	r2, #1
   141d6:	705a      	strb	r2, [r3, #1]
    gamevar.game[2] = 2;
   141d8:	2310      	movs	r3, #16
   141da:	18fb      	adds	r3, r7, r3
   141dc:	2202      	movs	r2, #2
   141de:	709a      	strb	r2, [r3, #2]
    gamevar.game[3] = 3;
   141e0:	2310      	movs	r3, #16
   141e2:	18fb      	adds	r3, r7, r3
   141e4:	2203      	movs	r2, #3
   141e6:	70da      	strb	r2, [r3, #3]
    gamevar.game[4] = 4;
   141e8:	2310      	movs	r3, #16
   141ea:	18fb      	adds	r3, r7, r3
   141ec:	2204      	movs	r2, #4
   141ee:	711a      	strb	r2, [r3, #4]
    gamevar.game[5] = 5;
   141f0:	2310      	movs	r3, #16
   141f2:	18fb      	adds	r3, r7, r3
   141f4:	2205      	movs	r2, #5
   141f6:	715a      	strb	r2, [r3, #5]
    gamevar.game[6] = 6;
   141f8:	2310      	movs	r3, #16
   141fa:	18fb      	adds	r3, r7, r3
   141fc:	2206      	movs	r2, #6
   141fe:	719a      	strb	r2, [r3, #6]
    gamevar.game[7] = 7;
   14200:	2310      	movs	r3, #16
   14202:	18fb      	adds	r3, r7, r3
   14204:	2207      	movs	r2, #7
   14206:	71da      	strb	r2, [r3, #7]
    gamevar.game[8] = 8;
   14208:	2310      	movs	r3, #16
   1420a:	18fb      	adds	r3, r7, r3
   1420c:	2208      	movs	r2, #8
   1420e:	721a      	strb	r2, [r3, #8]
    gamevar.game[9] = 9;
   14210:	2310      	movs	r3, #16
   14212:	18fb      	adds	r3, r7, r3
   14214:	2209      	movs	r2, #9
   14216:	725a      	strb	r2, [r3, #9]
    gamevar.game[10] = 0xFF;
   14218:	2310      	movs	r3, #16
   1421a:	18fb      	adds	r3, r7, r3
   1421c:	22ff      	movs	r2, #255	; 0xff
   1421e:	729a      	strb	r2, [r3, #10]

    int error = WifiAddGameDataToQueue(&gamevar);
   14220:	2310      	movs	r3, #16
   14222:	18fb      	adds	r3, r7, r3
   14224:	0018      	movs	r0, r3
   14226:	4b09      	ldr	r3, [pc, #36]	; (1424c <CLI_SendDummyGameData+0x90>)
   14228:	4798      	blx	r3
   1422a:	0003      	movs	r3, r0
   1422c:	627b      	str	r3, [r7, #36]	; 0x24
    if (error == pdTRUE) {
   1422e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14230:	2b01      	cmp	r3, #1
   14232:	d105      	bne.n	14240 <CLI_SendDummyGameData+0x84>
        snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Dummy Game Data MQTT Post\r\n");
   14234:	4a06      	ldr	r2, [pc, #24]	; (14250 <CLI_SendDummyGameData+0x94>)
   14236:	68b9      	ldr	r1, [r7, #8]
   14238:	68fb      	ldr	r3, [r7, #12]
   1423a:	0018      	movs	r0, r3
   1423c:	4b05      	ldr	r3, [pc, #20]	; (14254 <CLI_SendDummyGameData+0x98>)
   1423e:	4798      	blx	r3
    }
    return pdFALSE;
   14240:	2300      	movs	r3, #0
}
   14242:	0018      	movs	r0, r3
   14244:	46bd      	mov	sp, r7
   14246:	b00a      	add	sp, #40	; 0x28
   14248:	bd80      	pop	{r7, pc}
   1424a:	46c0      	nop			; (mov r8, r8)
   1424c:	00018155 	.word	0x00018155
   14250:	00036e24 	.word	0x00036e24
   14254:	00035961 	.word	0x00035961

00014258 <CLI_SendTestData>:

BaseType_t CLI_SendTestData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   14258:	b580      	push	{r7, lr}
   1425a:	b086      	sub	sp, #24
   1425c:	af00      	add	r7, sp, #0
   1425e:	60f8      	str	r0, [r7, #12]
   14260:	60b9      	str	r1, [r7, #8]
   14262:	607a      	str	r2, [r7, #4]
	struct TestPacket testvar;

	testvar.test = 6;
   14264:	2310      	movs	r3, #16
   14266:	18fb      	adds	r3, r7, r3
   14268:	2206      	movs	r2, #6
   1426a:	701a      	strb	r2, [r3, #0]

	int error = WifiAddTestDataToQueue(&testvar);
   1426c:	2310      	movs	r3, #16
   1426e:	18fb      	adds	r3, r7, r3
   14270:	0018      	movs	r0, r3
   14272:	4b09      	ldr	r3, [pc, #36]	; (14298 <CLI_SendTestData+0x40>)
   14274:	4798      	blx	r3
   14276:	0003      	movs	r3, r0
   14278:	617b      	str	r3, [r7, #20]
	if (error == pdTRUE) {
   1427a:	697b      	ldr	r3, [r7, #20]
   1427c:	2b01      	cmp	r3, #1
   1427e:	d105      	bne.n	1428c <CLI_SendTestData+0x34>
		snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Test Data MQTT Post\r\n");
   14280:	4a06      	ldr	r2, [pc, #24]	; (1429c <CLI_SendTestData+0x44>)
   14282:	68b9      	ldr	r1, [r7, #8]
   14284:	68fb      	ldr	r3, [r7, #12]
   14286:	0018      	movs	r0, r3
   14288:	4b05      	ldr	r3, [pc, #20]	; (142a0 <CLI_SendTestData+0x48>)
   1428a:	4798      	blx	r3
	}
	return pdFALSE;
   1428c:	2300      	movs	r3, #0
}
   1428e:	0018      	movs	r0, r3
   14290:	46bd      	mov	sp, r7
   14292:	b006      	add	sp, #24
   14294:	bd80      	pop	{r7, pc}
   14296:	46c0      	nop			; (mov r8, r8)
   14298:	00018181 	.word	0x00018181
   1429c:	00036e40 	.word	0x00036e40
   142a0:	00035961 	.word	0x00035961

000142a4 <CLI_i2cScan>:
 * @param    p_cli 
 * @param    argc 
 * @param    argv 
 ******************************************************************************/
BaseType_t CLI_i2cScan(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   142a4:	b590      	push	{r4, r7, lr}
   142a6:	b08f      	sub	sp, #60	; 0x3c
   142a8:	af00      	add	r7, sp, #0
   142aa:	60f8      	str	r0, [r7, #12]
   142ac:	60b9      	str	r1, [r7, #8]
   142ae:	607a      	str	r2, [r7, #4]

		I2C_Data i2cOled; 
        uint8_t address;
		//Send 0 command byte
		uint8_t dataOut[2] = {0,0};
   142b0:	2318      	movs	r3, #24
   142b2:	18fb      	adds	r3, r7, r3
   142b4:	2200      	movs	r2, #0
   142b6:	701a      	strb	r2, [r3, #0]
   142b8:	2318      	movs	r3, #24
   142ba:	18fb      	adds	r3, r7, r3
   142bc:	2200      	movs	r2, #0
   142be:	705a      	strb	r2, [r3, #1]
		uint8_t dataIn[2];
		dataOut[0] = 0;
   142c0:	2318      	movs	r3, #24
   142c2:	18fb      	adds	r3, r7, r3
   142c4:	2200      	movs	r2, #0
   142c6:	701a      	strb	r2, [r3, #0]
		dataOut[1] = 0;
   142c8:	2318      	movs	r3, #24
   142ca:	18fb      	adds	r3, r7, r3
   142cc:	2200      	movs	r2, #0
   142ce:	705a      	strb	r2, [r3, #1]
		i2cOled.address = 0;
   142d0:	231c      	movs	r3, #28
   142d2:	18fb      	adds	r3, r7, r3
   142d4:	2200      	movs	r2, #0
   142d6:	701a      	strb	r2, [r3, #0]
		i2cOled.msgIn = (uint8_t*) &dataIn[0];
   142d8:	231c      	movs	r3, #28
   142da:	18fb      	adds	r3, r7, r3
   142dc:	2214      	movs	r2, #20
   142de:	18ba      	adds	r2, r7, r2
   142e0:	609a      	str	r2, [r3, #8]
		i2cOled.lenOut = 1;
   142e2:	231c      	movs	r3, #28
   142e4:	18fb      	adds	r3, r7, r3
   142e6:	2201      	movs	r2, #1
   142e8:	81da      	strh	r2, [r3, #14]
		i2cOled.msgOut = (const uint8_t*) &dataOut[0];
   142ea:	231c      	movs	r3, #28
   142ec:	18fb      	adds	r3, r7, r3
   142ee:	2218      	movs	r2, #24
   142f0:	18ba      	adds	r2, r7, r2
   142f2:	605a      	str	r2, [r3, #4]
		i2cOled.lenIn = 1;
   142f4:	231c      	movs	r3, #28
   142f6:	18fb      	adds	r3, r7, r3
   142f8:	2201      	movs	r2, #1
   142fa:	819a      	strh	r2, [r3, #12]

            SerialConsoleWriteString("0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\r\n");
   142fc:	4b2c      	ldr	r3, [pc, #176]	; (143b0 <CLI_i2cScan+0x10c>)
   142fe:	0018      	movs	r0, r3
   14300:	4b2c      	ldr	r3, [pc, #176]	; (143b4 <CLI_i2cScan+0x110>)
   14302:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   14304:	2300      	movs	r3, #0
   14306:	637b      	str	r3, [r7, #52]	; 0x34
   14308:	e046      	b.n	14398 <CLI_i2cScan+0xf4>
            {
				snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i);
   1430a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1430c:	4a2a      	ldr	r2, [pc, #168]	; (143b8 <CLI_i2cScan+0x114>)
   1430e:	482b      	ldr	r0, [pc, #172]	; (143bc <CLI_i2cScan+0x118>)
   14310:	210f      	movs	r1, #15
   14312:	4c2b      	ldr	r4, [pc, #172]	; (143c0 <CLI_i2cScan+0x11c>)
   14314:	47a0      	blx	r4
                SerialConsoleWriteString(bufCli);
   14316:	4b29      	ldr	r3, [pc, #164]	; (143bc <CLI_i2cScan+0x118>)
   14318:	0018      	movs	r0, r3
   1431a:	4b26      	ldr	r3, [pc, #152]	; (143b4 <CLI_i2cScan+0x110>)
   1431c:	4798      	blx	r3

                for (int j = 0; j < 16; j++)
   1431e:	2300      	movs	r3, #0
   14320:	633b      	str	r3, [r7, #48]	; 0x30
   14322:	e02f      	b.n	14384 <CLI_i2cScan+0xe0>
                {

                    i2cOled.address = (i + j) << 1;
   14324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14326:	b2da      	uxtb	r2, r3
   14328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1432a:	b2db      	uxtb	r3, r3
   1432c:	18d3      	adds	r3, r2, r3
   1432e:	b2db      	uxtb	r3, r3
   14330:	18db      	adds	r3, r3, r3
   14332:	b2da      	uxtb	r2, r3
   14334:	231c      	movs	r3, #28
   14336:	18fb      	adds	r3, r7, r3
   14338:	701a      	strb	r2, [r3, #0]

                    	
                    int32_t ret = I2cWriteDataWait(&i2cOled, 100);
   1433a:	231c      	movs	r3, #28
   1433c:	18fb      	adds	r3, r7, r3
   1433e:	2164      	movs	r1, #100	; 0x64
   14340:	0018      	movs	r0, r3
   14342:	4b20      	ldr	r3, [pc, #128]	; (143c4 <CLI_i2cScan+0x120>)
   14344:	4798      	blx	r3
   14346:	0003      	movs	r3, r0
   14348:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if (ret == 0)
   1434a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1434c:	2b00      	cmp	r3, #0
   1434e:	d10c      	bne.n	1436a <CLI_i2cScan+0xc6>
                    {
						snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i2cOled.address);
   14350:	231c      	movs	r3, #28
   14352:	18fb      	adds	r3, r7, r3
   14354:	781b      	ldrb	r3, [r3, #0]
   14356:	4a18      	ldr	r2, [pc, #96]	; (143b8 <CLI_i2cScan+0x114>)
   14358:	4818      	ldr	r0, [pc, #96]	; (143bc <CLI_i2cScan+0x118>)
   1435a:	210f      	movs	r1, #15
   1435c:	4c18      	ldr	r4, [pc, #96]	; (143c0 <CLI_i2cScan+0x11c>)
   1435e:	47a0      	blx	r4
                        SerialConsoleWriteString(bufCli);
   14360:	4b16      	ldr	r3, [pc, #88]	; (143bc <CLI_i2cScan+0x118>)
   14362:	0018      	movs	r0, r3
   14364:	4b13      	ldr	r3, [pc, #76]	; (143b4 <CLI_i2cScan+0x110>)
   14366:	4798      	blx	r3
   14368:	e009      	b.n	1437e <CLI_i2cScan+0xda>
                    }
                    else
                    {
                        snprintf(bufCli, CLI_MSG_LEN - 1, "X ");
   1436a:	4b14      	ldr	r3, [pc, #80]	; (143bc <CLI_i2cScan+0x118>)
   1436c:	4a16      	ldr	r2, [pc, #88]	; (143c8 <CLI_i2cScan+0x124>)
   1436e:	8811      	ldrh	r1, [r2, #0]
   14370:	8019      	strh	r1, [r3, #0]
   14372:	7892      	ldrb	r2, [r2, #2]
   14374:	709a      	strb	r2, [r3, #2]
						SerialConsoleWriteString(bufCli);
   14376:	4b11      	ldr	r3, [pc, #68]	; (143bc <CLI_i2cScan+0x118>)
   14378:	0018      	movs	r0, r3
   1437a:	4b0e      	ldr	r3, [pc, #56]	; (143b4 <CLI_i2cScan+0x110>)
   1437c:	4798      	blx	r3
                for (int j = 0; j < 16; j++)
   1437e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   14380:	3301      	adds	r3, #1
   14382:	633b      	str	r3, [r7, #48]	; 0x30
   14384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   14386:	2b0f      	cmp	r3, #15
   14388:	ddcc      	ble.n	14324 <CLI_i2cScan+0x80>
                    }
                }
                SerialConsoleWriteString( "\r\n");
   1438a:	4b10      	ldr	r3, [pc, #64]	; (143cc <CLI_i2cScan+0x128>)
   1438c:	0018      	movs	r0, r3
   1438e:	4b09      	ldr	r3, [pc, #36]	; (143b4 <CLI_i2cScan+0x110>)
   14390:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   14392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14394:	3310      	adds	r3, #16
   14396:	637b      	str	r3, [r7, #52]	; 0x34
   14398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1439a:	2b7f      	cmp	r3, #127	; 0x7f
   1439c:	ddb5      	ble.n	1430a <CLI_i2cScan+0x66>
            }
            SerialConsoleWriteString( "\r\n");
   1439e:	4b0b      	ldr	r3, [pc, #44]	; (143cc <CLI_i2cScan+0x128>)
   143a0:	0018      	movs	r0, r3
   143a2:	4b04      	ldr	r3, [pc, #16]	; (143b4 <CLI_i2cScan+0x110>)
   143a4:	4798      	blx	r3
			return pdFALSE;
   143a6:	2300      	movs	r3, #0

}
   143a8:	0018      	movs	r0, r3
   143aa:	46bd      	mov	sp, r7
   143ac:	b00f      	add	sp, #60	; 0x3c
   143ae:	bd90      	pop	{r4, r7, pc}
   143b0:	00036e58 	.word	0x00036e58
   143b4:	0001ea39 	.word	0x0001ea39
   143b8:	00036e8c 	.word	0x00036e8c
   143bc:	20000524 	.word	0x20000524
   143c0:	00035961 	.word	0x00035961
   143c4:	00014fa5 	.word	0x00014fa5
   143c8:	00036e94 	.word	0x00036e94
   143cc:	00036d40 	.word	0x00036d40

000143d0 <vControlHandlerTask>:
 * @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
 * @return		Should not return! This is a task defining function.
 * @note
 */
void vControlHandlerTask(void *pvParameters)
{
   143d0:	b580      	push	{r7, lr}
   143d2:	b088      	sub	sp, #32
   143d4:	af00      	add	r7, sp, #0
   143d6:	6078      	str	r0, [r7, #4]
    SerialConsoleWriteString((char *)"ESE516 - Control Init Code\r\n");
   143d8:	4b33      	ldr	r3, [pc, #204]	; (144a8 <vControlHandlerTask+0xd8>)
   143da:	0018      	movs	r0, r3
   143dc:	4b33      	ldr	r3, [pc, #204]	; (144ac <vControlHandlerTask+0xdc>)
   143de:	4798      	blx	r3

    // Initialize Queues
    xQueueGameBufferIn = xQueueCreate(2, sizeof(struct GameDataPacket));
   143e0:	2200      	movs	r2, #0
   143e2:	2114      	movs	r1, #20
   143e4:	2002      	movs	r0, #2
   143e6:	4b32      	ldr	r3, [pc, #200]	; (144b0 <vControlHandlerTask+0xe0>)
   143e8:	4798      	blx	r3
   143ea:	0002      	movs	r2, r0
   143ec:	4b31      	ldr	r3, [pc, #196]	; (144b4 <vControlHandlerTask+0xe4>)
   143ee:	601a      	str	r2, [r3, #0]
    xQueueRgbColorBuffer = xQueueCreate(2, sizeof(struct RgbColorPacket));
   143f0:	2200      	movs	r2, #0
   143f2:	2103      	movs	r1, #3
   143f4:	2002      	movs	r0, #2
   143f6:	4b2e      	ldr	r3, [pc, #184]	; (144b0 <vControlHandlerTask+0xe0>)
   143f8:	4798      	blx	r3
   143fa:	0002      	movs	r2, r0
   143fc:	4b2e      	ldr	r3, [pc, #184]	; (144b8 <vControlHandlerTask+0xe8>)
   143fe:	601a      	str	r2, [r3, #0]

    if (xQueueGameBufferIn == NULL || xQueueRgbColorBuffer == NULL) {
   14400:	4b2c      	ldr	r3, [pc, #176]	; (144b4 <vControlHandlerTask+0xe4>)
   14402:	681b      	ldr	r3, [r3, #0]
   14404:	2b00      	cmp	r3, #0
   14406:	d003      	beq.n	14410 <vControlHandlerTask+0x40>
   14408:	4b2b      	ldr	r3, [pc, #172]	; (144b8 <vControlHandlerTask+0xe8>)
   1440a:	681b      	ldr	r3, [r3, #0]
   1440c:	2b00      	cmp	r3, #0
   1440e:	d103      	bne.n	14418 <vControlHandlerTask+0x48>
        SerialConsoleWriteString((char *)"ERROR Initializing Control Data queues!\r\n");
   14410:	4b2a      	ldr	r3, [pc, #168]	; (144bc <vControlHandlerTask+0xec>)
   14412:	0018      	movs	r0, r3
   14414:	4b25      	ldr	r3, [pc, #148]	; (144ac <vControlHandlerTask+0xdc>)
   14416:	4798      	blx	r3
    }
    controlState = CONTROL_WAIT_FOR_GAME;  // Initial state
   14418:	4b29      	ldr	r3, [pc, #164]	; (144c0 <vControlHandlerTask+0xf0>)
   1441a:	2200      	movs	r2, #0
   1441c:	701a      	strb	r2, [r3, #0]

    while (1) {
        switch (controlState) {
   1441e:	4b28      	ldr	r3, [pc, #160]	; (144c0 <vControlHandlerTask+0xf0>)
   14420:	781b      	ldrb	r3, [r3, #0]
   14422:	2b01      	cmp	r3, #1
   14424:	d01d      	beq.n	14462 <vControlHandlerTask+0x92>
   14426:	2b02      	cmp	r3, #2
   14428:	d035      	beq.n	14496 <vControlHandlerTask+0xc6>
   1442a:	2b00      	cmp	r3, #0
   1442c:	d12f      	bne.n	1448e <vControlHandlerTask+0xbe>
            case (CONTROL_WAIT_FOR_GAME): {  // Should set the UI to ignore button presses and should wait until there is a message from the server with a new play.
                struct GameDataPacket gamePacketIn;
                if (pdPASS == xQueueReceive(xQueueGameBufferIn, &gamePacketIn, 0)) {
   1442e:	4b21      	ldr	r3, [pc, #132]	; (144b4 <vControlHandlerTask+0xe4>)
   14430:	681b      	ldr	r3, [r3, #0]
   14432:	220c      	movs	r2, #12
   14434:	18b9      	adds	r1, r7, r2
   14436:	2200      	movs	r2, #0
   14438:	0018      	movs	r0, r3
   1443a:	4b22      	ldr	r3, [pc, #136]	; (144c4 <vControlHandlerTask+0xf4>)
   1443c:	4798      	blx	r3
   1443e:	0003      	movs	r3, r0
   14440:	2b01      	cmp	r3, #1
   14442:	d12a      	bne.n	1449a <vControlHandlerTask+0xca>
                    LogMessage(LOG_DEBUG_LVL, "Control Thread: Consumed game packet!\r\n");
   14444:	4b20      	ldr	r3, [pc, #128]	; (144c8 <vControlHandlerTask+0xf8>)
   14446:	0019      	movs	r1, r3
   14448:	2001      	movs	r0, #1
   1444a:	4b20      	ldr	r3, [pc, #128]	; (144cc <vControlHandlerTask+0xfc>)
   1444c:	4798      	blx	r3
                    UiOrderShowMoves(&gamePacketIn);
   1444e:	230c      	movs	r3, #12
   14450:	18fb      	adds	r3, r7, r3
   14452:	0018      	movs	r0, r3
   14454:	4b1e      	ldr	r3, [pc, #120]	; (144d0 <vControlHandlerTask+0x100>)
   14456:	4798      	blx	r3
                    controlState = CONTROL_PLAYING_MOVE;
   14458:	4b19      	ldr	r3, [pc, #100]	; (144c0 <vControlHandlerTask+0xf0>)
   1445a:	2201      	movs	r2, #1
   1445c:	701a      	strb	r2, [r3, #0]
                }

                break;
   1445e:	46c0      	nop			; (mov r8, r8)
   14460:	e01b      	b.n	1449a <vControlHandlerTask+0xca>
            }

            case (CONTROL_PLAYING_MOVE): {  // Should wait until the UI thread has showed the move AND comes back with the play from the user. Should go back to CONTROL_WAIT_FOR_GAME
                // after posting the game to MQTT
                if (UiPlayIsDone() == true) {
   14462:	4b1c      	ldr	r3, [pc, #112]	; (144d4 <vControlHandlerTask+0x104>)
   14464:	4798      	blx	r3
   14466:	1e03      	subs	r3, r0, #0
   14468:	d019      	beq.n	1449e <vControlHandlerTask+0xce>
                    // Send back local game packet
                    if (pdTRUE != WifiAddGameDataToQueue(UiGetGamePacketOut())) {
   1446a:	4b1b      	ldr	r3, [pc, #108]	; (144d8 <vControlHandlerTask+0x108>)
   1446c:	4798      	blx	r3
   1446e:	0003      	movs	r3, r0
   14470:	0018      	movs	r0, r3
   14472:	4b1a      	ldr	r3, [pc, #104]	; (144dc <vControlHandlerTask+0x10c>)
   14474:	4798      	blx	r3
   14476:	0003      	movs	r3, r0
   14478:	2b01      	cmp	r3, #1
   1447a:	d004      	beq.n	14486 <vControlHandlerTask+0xb6>
                        LogMessage(LOG_DEBUG_LVL, "Control Thread: Could not send game packet!\r\n");
   1447c:	4b18      	ldr	r3, [pc, #96]	; (144e0 <vControlHandlerTask+0x110>)
   1447e:	0019      	movs	r1, r3
   14480:	2001      	movs	r0, #1
   14482:	4b12      	ldr	r3, [pc, #72]	; (144cc <vControlHandlerTask+0xfc>)
   14484:	4798      	blx	r3
                    }
                    controlState = CONTROL_WAIT_FOR_GAME;
   14486:	4b0e      	ldr	r3, [pc, #56]	; (144c0 <vControlHandlerTask+0xf0>)
   14488:	2200      	movs	r2, #0
   1448a:	701a      	strb	r2, [r3, #0]
                }

                break;
   1448c:	e007      	b.n	1449e <vControlHandlerTask+0xce>
            case (CONTROL_END_GAME): {
                break;
            }

            default:
                controlState = CONTROL_WAIT_FOR_GAME;
   1448e:	4b0c      	ldr	r3, [pc, #48]	; (144c0 <vControlHandlerTask+0xf0>)
   14490:	2200      	movs	r2, #0
   14492:	701a      	strb	r2, [r3, #0]
                break;
   14494:	e004      	b.n	144a0 <vControlHandlerTask+0xd0>
                break;
   14496:	46c0      	nop			; (mov r8, r8)
   14498:	e002      	b.n	144a0 <vControlHandlerTask+0xd0>
                break;
   1449a:	46c0      	nop			; (mov r8, r8)
   1449c:	e000      	b.n	144a0 <vControlHandlerTask+0xd0>
                break;
   1449e:	46c0      	nop			; (mov r8, r8)
        }
        vTaskDelay(40);
   144a0:	2028      	movs	r0, #40	; 0x28
   144a2:	4b10      	ldr	r3, [pc, #64]	; (144e4 <vControlHandlerTask+0x114>)
   144a4:	4798      	blx	r3
        switch (controlState) {
   144a6:	e7ba      	b.n	1441e <vControlHandlerTask+0x4e>
   144a8:	00036f38 	.word	0x00036f38
   144ac:	0001ea39 	.word	0x0001ea39
   144b0:	0001b0d9 	.word	0x0001b0d9
   144b4:	20000620 	.word	0x20000620
   144b8:	20000624 	.word	0x20000624
   144bc:	00036f58 	.word	0x00036f58
   144c0:	20004424 	.word	0x20004424
   144c4:	0001bc39 	.word	0x0001bc39
   144c8:	00036f84 	.word	0x00036f84
   144cc:	0001eb25 	.word	0x0001eb25
   144d0:	00016785 	.word	0x00016785
   144d4:	000167c1 	.word	0x000167c1
   144d8:	000167d5 	.word	0x000167d5
   144dc:	00018155 	.word	0x00018155
   144e0:	00036fac 	.word	0x00036fac
   144e4:	0001cde5 	.word	0x0001cde5

000144e8 <ControlAddGameData>:
 * @return		Returns pdTrue if data can be added to queue, 0 if queue is full
 * @note

 */
int ControlAddGameData(struct GameDataPacket *gameIn)
{
   144e8:	b590      	push	{r4, r7, lr}
   144ea:	b085      	sub	sp, #20
   144ec:	af00      	add	r7, sp, #0
   144ee:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueGameBufferIn, gameIn, (TickType_t)10);
   144f0:	4b06      	ldr	r3, [pc, #24]	; (1450c <ControlAddGameData+0x24>)
   144f2:	6818      	ldr	r0, [r3, #0]
   144f4:	6879      	ldr	r1, [r7, #4]
   144f6:	2300      	movs	r3, #0
   144f8:	220a      	movs	r2, #10
   144fa:	4c05      	ldr	r4, [pc, #20]	; (14510 <ControlAddGameData+0x28>)
   144fc:	47a0      	blx	r4
   144fe:	0003      	movs	r3, r0
   14500:	60fb      	str	r3, [r7, #12]
    return error;
   14502:	68fb      	ldr	r3, [r7, #12]
}
   14504:	0018      	movs	r0, r3
   14506:	46bd      	mov	sp, r7
   14508:	b005      	add	sp, #20
   1450a:	bd90      	pop	{r4, r7, pc}
   1450c:	20000620 	.word	0x20000620
   14510:	0001b381 	.word	0x0001b381

00014514 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
   14514:	b580      	push	{r7, lr}
   14516:	b082      	sub	sp, #8
   14518:	af00      	add	r7, sp, #0
   1451a:	0002      	movs	r2, r0
   1451c:	1dfb      	adds	r3, r7, #7
   1451e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   14520:	4b06      	ldr	r3, [pc, #24]	; (1453c <system_interrupt_enable+0x28>)
   14522:	1dfa      	adds	r2, r7, #7
   14524:	7812      	ldrb	r2, [r2, #0]
   14526:	0011      	movs	r1, r2
   14528:	221f      	movs	r2, #31
   1452a:	400a      	ands	r2, r1
   1452c:	2101      	movs	r1, #1
   1452e:	4091      	lsls	r1, r2
   14530:	000a      	movs	r2, r1
   14532:	601a      	str	r2, [r3, #0]
}
   14534:	46c0      	nop			; (mov r8, r8)
   14536:	46bd      	mov	sp, r7
   14538:	b002      	add	sp, #8
   1453a:	bd80      	pop	{r7, pc}
   1453c:	e000e100 	.word	0xe000e100

00014540 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   14540:	b580      	push	{r7, lr}
   14542:	b084      	sub	sp, #16
   14544:	af00      	add	r7, sp, #0
   14546:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   14548:	687b      	ldr	r3, [r7, #4]
   1454a:	681b      	ldr	r3, [r3, #0]
   1454c:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   1454e:	68fb      	ldr	r3, [r7, #12]
   14550:	69db      	ldr	r3, [r3, #28]
   14552:	1e5a      	subs	r2, r3, #1
   14554:	4193      	sbcs	r3, r2
   14556:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   14558:	0018      	movs	r0, r3
   1455a:	46bd      	mov	sp, r7
   1455c:	b004      	add	sp, #16
   1455e:	bd80      	pop	{r7, pc}

00014560 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   14560:	b580      	push	{r7, lr}
   14562:	b082      	sub	sp, #8
   14564:	af00      	add	r7, sp, #0
   14566:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   14568:	46c0      	nop			; (mov r8, r8)
   1456a:	687b      	ldr	r3, [r7, #4]
   1456c:	0018      	movs	r0, r3
   1456e:	4b04      	ldr	r3, [pc, #16]	; (14580 <_usart_wait_for_sync+0x20>)
   14570:	4798      	blx	r3
   14572:	1e03      	subs	r3, r0, #0
   14574:	d1f9      	bne.n	1456a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   14576:	46c0      	nop			; (mov r8, r8)
   14578:	46bd      	mov	sp, r7
   1457a:	b002      	add	sp, #8
   1457c:	bd80      	pop	{r7, pc}
   1457e:	46c0      	nop			; (mov r8, r8)
   14580:	00014541 	.word	0x00014541

00014584 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   14584:	b580      	push	{r7, lr}
   14586:	b082      	sub	sp, #8
   14588:	af00      	add	r7, sp, #0
   1458a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   1458c:	687b      	ldr	r3, [r7, #4]
   1458e:	2280      	movs	r2, #128	; 0x80
   14590:	05d2      	lsls	r2, r2, #23
   14592:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   14594:	687b      	ldr	r3, [r7, #4]
   14596:	2200      	movs	r2, #0
   14598:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   1459a:	687b      	ldr	r3, [r7, #4]
   1459c:	22ff      	movs	r2, #255	; 0xff
   1459e:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   145a0:	687b      	ldr	r3, [r7, #4]
   145a2:	2200      	movs	r2, #0
   145a4:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   145a6:	687b      	ldr	r3, [r7, #4]
   145a8:	2200      	movs	r2, #0
   145aa:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   145ac:	687b      	ldr	r3, [r7, #4]
   145ae:	2296      	movs	r2, #150	; 0x96
   145b0:	0192      	lsls	r2, r2, #6
   145b2:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   145b4:	687b      	ldr	r3, [r7, #4]
   145b6:	2224      	movs	r2, #36	; 0x24
   145b8:	2101      	movs	r1, #1
   145ba:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   145bc:	687b      	ldr	r3, [r7, #4]
   145be:	2225      	movs	r2, #37	; 0x25
   145c0:	2101      	movs	r1, #1
   145c2:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   145c4:	687b      	ldr	r3, [r7, #4]
   145c6:	2226      	movs	r2, #38	; 0x26
   145c8:	2100      	movs	r1, #0
   145ca:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   145cc:	687b      	ldr	r3, [r7, #4]
   145ce:	2227      	movs	r2, #39	; 0x27
   145d0:	2100      	movs	r1, #0
   145d2:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   145d4:	687b      	ldr	r3, [r7, #4]
   145d6:	2200      	movs	r2, #0
   145d8:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   145da:	687b      	ldr	r3, [r7, #4]
   145dc:	2288      	movs	r2, #136	; 0x88
   145de:	0352      	lsls	r2, r2, #13
   145e0:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   145e2:	687b      	ldr	r3, [r7, #4]
   145e4:	222c      	movs	r2, #44	; 0x2c
   145e6:	2100      	movs	r1, #0
   145e8:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   145ea:	687b      	ldr	r3, [r7, #4]
   145ec:	222d      	movs	r2, #45	; 0x2d
   145ee:	2100      	movs	r1, #0
   145f0:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   145f2:	687b      	ldr	r3, [r7, #4]
   145f4:	2200      	movs	r2, #0
   145f6:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   145f8:	687b      	ldr	r3, [r7, #4]
   145fa:	2200      	movs	r2, #0
   145fc:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   145fe:	687b      	ldr	r3, [r7, #4]
   14600:	2200      	movs	r2, #0
   14602:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   14604:	687b      	ldr	r3, [r7, #4]
   14606:	2200      	movs	r2, #0
   14608:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   1460a:	687b      	ldr	r3, [r7, #4]
   1460c:	2200      	movs	r2, #0
   1460e:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   14610:	687b      	ldr	r3, [r7, #4]
   14612:	2200      	movs	r2, #0
   14614:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   14616:	687b      	ldr	r3, [r7, #4]
   14618:	2200      	movs	r2, #0
   1461a:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   1461c:	687b      	ldr	r3, [r7, #4]
   1461e:	2200      	movs	r2, #0
   14620:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   14622:	687b      	ldr	r3, [r7, #4]
   14624:	2200      	movs	r2, #0
   14626:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   14628:	687b      	ldr	r3, [r7, #4]
   1462a:	2200      	movs	r2, #0
   1462c:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   1462e:	687b      	ldr	r3, [r7, #4]
   14630:	2213      	movs	r2, #19
   14632:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   14634:	687b      	ldr	r3, [r7, #4]
   14636:	2200      	movs	r2, #0
   14638:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   1463a:	46c0      	nop			; (mov r8, r8)
   1463c:	46bd      	mov	sp, r7
   1463e:	b002      	add	sp, #8
   14640:	bd80      	pop	{r7, pc}
	...

00014644 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   14644:	b580      	push	{r7, lr}
   14646:	b084      	sub	sp, #16
   14648:	af00      	add	r7, sp, #0
   1464a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1464c:	687b      	ldr	r3, [r7, #4]
   1464e:	681b      	ldr	r3, [r3, #0]
   14650:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   14652:	687b      	ldr	r3, [r7, #4]
   14654:	681b      	ldr	r3, [r3, #0]
   14656:	0018      	movs	r0, r3
   14658:	4b09      	ldr	r3, [pc, #36]	; (14680 <usart_enable+0x3c>)
   1465a:	4798      	blx	r3
   1465c:	0003      	movs	r3, r0
   1465e:	0018      	movs	r0, r3
   14660:	4b08      	ldr	r3, [pc, #32]	; (14684 <usart_enable+0x40>)
   14662:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   14664:	687b      	ldr	r3, [r7, #4]
   14666:	0018      	movs	r0, r3
   14668:	4b07      	ldr	r3, [pc, #28]	; (14688 <usart_enable+0x44>)
   1466a:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   1466c:	68fb      	ldr	r3, [r7, #12]
   1466e:	681b      	ldr	r3, [r3, #0]
   14670:	2202      	movs	r2, #2
   14672:	431a      	orrs	r2, r3
   14674:	68fb      	ldr	r3, [r7, #12]
   14676:	601a      	str	r2, [r3, #0]
}
   14678:	46c0      	nop			; (mov r8, r8)
   1467a:	46bd      	mov	sp, r7
   1467c:	b004      	add	sp, #16
   1467e:	bd80      	pop	{r7, pc}
   14680:	000283b1 	.word	0x000283b1
   14684:	00014515 	.word	0x00014515
   14688:	00014561 	.word	0x00014561

0001468c <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
   1468c:	b580      	push	{r7, lr}
   1468e:	b082      	sub	sp, #8
   14690:	af00      	add	r7, sp, #0
   14692:	6078      	str	r0, [r7, #4]
   14694:	000a      	movs	r2, r1
   14696:	1cfb      	adds	r3, r7, #3
   14698:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
   1469a:	687b      	ldr	r3, [r7, #4]
   1469c:	2231      	movs	r2, #49	; 0x31
   1469e:	5c9b      	ldrb	r3, [r3, r2]
   146a0:	b25a      	sxtb	r2, r3
   146a2:	1cfb      	adds	r3, r7, #3
   146a4:	781b      	ldrb	r3, [r3, #0]
   146a6:	2101      	movs	r1, #1
   146a8:	4099      	lsls	r1, r3
   146aa:	000b      	movs	r3, r1
   146ac:	b25b      	sxtb	r3, r3
   146ae:	4313      	orrs	r3, r2
   146b0:	b25b      	sxtb	r3, r3
   146b2:	b2d9      	uxtb	r1, r3
   146b4:	687b      	ldr	r3, [r7, #4]
   146b6:	2231      	movs	r2, #49	; 0x31
   146b8:	5499      	strb	r1, [r3, r2]

}
   146ba:	46c0      	nop			; (mov r8, r8)
   146bc:	46bd      	mov	sp, r7
   146be:	b002      	add	sp, #8
   146c0:	bd80      	pop	{r7, pc}
	...

000146c4 <distUsartWritecallback>:
/******************************************************************************
 *  Callback Declaration
 ******************************************************************************/
// Callback for when we finish writing characters to UART
void distUsartWritecallback(struct usart_module *const usart_module)
{
   146c4:	b580      	push	{r7, lr}
   146c6:	b084      	sub	sp, #16
   146c8:	af00      	add	r7, sp, #0
   146ca:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   146cc:	2300      	movs	r3, #0
   146ce:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorDistanceSemaphoreHandle, &xHigherPriorityTaskWoken);
   146d0:	4b09      	ldr	r3, [pc, #36]	; (146f8 <distUsartWritecallback+0x34>)
   146d2:	681b      	ldr	r3, [r3, #0]
   146d4:	220c      	movs	r2, #12
   146d6:	18ba      	adds	r2, r7, r2
   146d8:	0011      	movs	r1, r2
   146da:	0018      	movs	r0, r3
   146dc:	4b07      	ldr	r3, [pc, #28]	; (146fc <distUsartWritecallback+0x38>)
   146de:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   146e0:	68fb      	ldr	r3, [r7, #12]
   146e2:	2b00      	cmp	r3, #0
   146e4:	d003      	beq.n	146ee <distUsartWritecallback+0x2a>
   146e6:	4b06      	ldr	r3, [pc, #24]	; (14700 <distUsartWritecallback+0x3c>)
   146e8:	2280      	movs	r2, #128	; 0x80
   146ea:	0552      	lsls	r2, r2, #21
   146ec:	601a      	str	r2, [r3, #0]
}
   146ee:	46c0      	nop			; (mov r8, r8)
   146f0:	46bd      	mov	sp, r7
   146f2:	b004      	add	sp, #16
   146f4:	bd80      	pop	{r7, pc}
   146f6:	46c0      	nop			; (mov r8, r8)
   146f8:	2000442c 	.word	0x2000442c
   146fc:	0001ba09 	.word	0x0001ba09
   14700:	e000ed04 	.word	0xe000ed04

00014704 <distUsartReadcallback>:
// Callback for when we finish writing characters to UART

void distUsartReadcallback(struct usart_module *const usart_module)
{
   14704:	b580      	push	{r7, lr}
   14706:	b084      	sub	sp, #16
   14708:	af00      	add	r7, sp, #0
   1470a:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   1470c:	2300      	movs	r3, #0
   1470e:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorDistanceSemaphoreHandle, &xHigherPriorityTaskWoken);
   14710:	4b09      	ldr	r3, [pc, #36]	; (14738 <distUsartReadcallback+0x34>)
   14712:	681b      	ldr	r3, [r3, #0]
   14714:	220c      	movs	r2, #12
   14716:	18ba      	adds	r2, r7, r2
   14718:	0011      	movs	r1, r2
   1471a:	0018      	movs	r0, r3
   1471c:	4b07      	ldr	r3, [pc, #28]	; (1473c <distUsartReadcallback+0x38>)
   1471e:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   14720:	68fb      	ldr	r3, [r7, #12]
   14722:	2b00      	cmp	r3, #0
   14724:	d003      	beq.n	1472e <distUsartReadcallback+0x2a>
   14726:	4b06      	ldr	r3, [pc, #24]	; (14740 <distUsartReadcallback+0x3c>)
   14728:	2280      	movs	r2, #128	; 0x80
   1472a:	0552      	lsls	r2, r2, #21
   1472c:	601a      	str	r2, [r3, #0]
}
   1472e:	46c0      	nop			; (mov r8, r8)
   14730:	46bd      	mov	sp, r7
   14732:	b004      	add	sp, #16
   14734:	bd80      	pop	{r7, pc}
   14736:	46c0      	nop			; (mov r8, r8)
   14738:	2000442c 	.word	0x2000442c
   1473c:	0001ba09 	.word	0x0001ba09
   14740:	e000ed04 	.word	0xe000ed04

00014744 <InitializeDistanceSensor>:
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 */

void InitializeDistanceSensor(void)
{
   14744:	b580      	push	{r7, lr}
   14746:	af00      	add	r7, sp, #0
    // Configure USART and Callbacks
    configure_usart();
   14748:	4b10      	ldr	r3, [pc, #64]	; (1478c <InitializeDistanceSensor+0x48>)
   1474a:	4798      	blx	r3
    configure_usart_callbacks();
   1474c:	4b10      	ldr	r3, [pc, #64]	; (14790 <InitializeDistanceSensor+0x4c>)
   1474e:	4798      	blx	r3

    sensorDistanceMutexHandle = xSemaphoreCreateMutex();
   14750:	2001      	movs	r0, #1
   14752:	4b10      	ldr	r3, [pc, #64]	; (14794 <InitializeDistanceSensor+0x50>)
   14754:	4798      	blx	r3
   14756:	0002      	movs	r2, r0
   14758:	4b0f      	ldr	r3, [pc, #60]	; (14798 <InitializeDistanceSensor+0x54>)
   1475a:	601a      	str	r2, [r3, #0]
    sensorDistanceSemaphoreHandle = xSemaphoreCreateBinary();
   1475c:	2203      	movs	r2, #3
   1475e:	2100      	movs	r1, #0
   14760:	2001      	movs	r0, #1
   14762:	4b0e      	ldr	r3, [pc, #56]	; (1479c <InitializeDistanceSensor+0x58>)
   14764:	4798      	blx	r3
   14766:	0002      	movs	r2, r0
   14768:	4b0d      	ldr	r3, [pc, #52]	; (147a0 <InitializeDistanceSensor+0x5c>)
   1476a:	601a      	str	r2, [r3, #0]

    if (NULL == sensorDistanceMutexHandle || NULL == sensorDistanceSemaphoreHandle) {
   1476c:	4b0a      	ldr	r3, [pc, #40]	; (14798 <InitializeDistanceSensor+0x54>)
   1476e:	681b      	ldr	r3, [r3, #0]
   14770:	2b00      	cmp	r3, #0
   14772:	d003      	beq.n	1477c <InitializeDistanceSensor+0x38>
   14774:	4b0a      	ldr	r3, [pc, #40]	; (147a0 <InitializeDistanceSensor+0x5c>)
   14776:	681b      	ldr	r3, [r3, #0]
   14778:	2b00      	cmp	r3, #0
   1477a:	d103      	bne.n	14784 <InitializeDistanceSensor+0x40>
        SerialConsoleWriteString((char *)"Could not initialize Distance Sensor!");
   1477c:	4b09      	ldr	r3, [pc, #36]	; (147a4 <InitializeDistanceSensor+0x60>)
   1477e:	0018      	movs	r0, r3
   14780:	4b09      	ldr	r3, [pc, #36]	; (147a8 <InitializeDistanceSensor+0x64>)
   14782:	4798      	blx	r3
    }
}
   14784:	46c0      	nop			; (mov r8, r8)
   14786:	46bd      	mov	sp, r7
   14788:	bd80      	pop	{r7, pc}
   1478a:	46c0      	nop			; (mov r8, r8)
   1478c:	0001487d 	.word	0x0001487d
   14790:	000148f5 	.word	0x000148f5
   14794:	0001b341 	.word	0x0001b341
   14798:	20004430 	.word	0x20004430
   1479c:	0001b0d9 	.word	0x0001b0d9
   147a0:	2000442c 	.word	0x2000442c
   147a4:	00036fdc 	.word	0x00036fdc
   147a8:	0001ea39 	.word	0x0001ea39

000147ac <DistanceSensorGetDistance>:
 * @fn			int32_t DistanceSensorGetDistance (uint16_t *distance)
 * @brief		Gets the distance from the distance sensor.
 * @note			Returns 0 if successful. -1 if an error occurred
 */
int32_t DistanceSensorGetDistance(uint16_t *distance, const TickType_t xMaxBlockTime)
{
   147ac:	b580      	push	{r7, lr}
   147ae:	b084      	sub	sp, #16
   147b0:	af00      	add	r7, sp, #0
   147b2:	6078      	str	r0, [r7, #4]
   147b4:	6039      	str	r1, [r7, #0]
    int error = ERROR_NONE;
   147b6:	2300      	movs	r3, #0
   147b8:	60fb      	str	r3, [r7, #12]

    // 1. Get MUTEX. DistanceSensorGetMutex. If we cant get it, goto
    error = DistanceSensorGetMutex(WAIT_I2C_LINE_MS);
   147ba:	2396      	movs	r3, #150	; 0x96
   147bc:	005b      	lsls	r3, r3, #1
   147be:	0018      	movs	r0, r3
   147c0:	4b25      	ldr	r3, [pc, #148]	; (14858 <DistanceSensorGetDistance+0xac>)
   147c2:	4798      	blx	r3
   147c4:	0003      	movs	r3, r0
   147c6:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exitf;
   147c8:	68fb      	ldr	r3, [r7, #12]
   147ca:	2b00      	cmp	r3, #0
   147cc:	d139      	bne.n	14842 <DistanceSensorGetDistance+0x96>

    //---2. Initiate sending data. First populate TX with the distance command. Use usart_write_buffer_job to transmit 1 character
    distTx = DISTANCE_US_100_CMD_READ_DISTANCE;
   147ce:	4b23      	ldr	r3, [pc, #140]	; (1485c <DistanceSensorGetDistance+0xb0>)
   147d0:	2255      	movs	r2, #85	; 0x55
   147d2:	701a      	strb	r2, [r3, #0]
    if (STATUS_OK != usart_write_buffer_job(&usart_instance_dist, (uint8_t *)&distTx, 1)) {
   147d4:	4921      	ldr	r1, [pc, #132]	; (1485c <DistanceSensorGetDistance+0xb0>)
   147d6:	4b22      	ldr	r3, [pc, #136]	; (14860 <DistanceSensorGetDistance+0xb4>)
   147d8:	2201      	movs	r2, #1
   147da:	0018      	movs	r0, r3
   147dc:	4b21      	ldr	r3, [pc, #132]	; (14864 <DistanceSensorGetDistance+0xb8>)
   147de:	4798      	blx	r3
   147e0:	1e03      	subs	r3, r0, #0
   147e2:	d130      	bne.n	14846 <DistanceSensorGetDistance+0x9a>
        goto exitf;
    }

    // 3. )Wait until the TX finished. TX should release the binary semaphore - so wait until semaphore
    if (xSemaphoreTake(sensorDistanceSemaphoreHandle, xMaxBlockTime) == pdTRUE) {
   147e4:	4b20      	ldr	r3, [pc, #128]	; (14868 <DistanceSensorGetDistance+0xbc>)
   147e6:	681b      	ldr	r3, [r3, #0]
   147e8:	683a      	ldr	r2, [r7, #0]
   147ea:	0011      	movs	r1, r2
   147ec:	0018      	movs	r0, r3
   147ee:	4b1f      	ldr	r3, [pc, #124]	; (1486c <DistanceSensorGetDistance+0xc0>)
   147f0:	4798      	blx	r3
   147f2:	0003      	movs	r3, r0
   147f4:	2b01      	cmp	r3, #1
   147f6:	d003      	beq.n	14800 <DistanceSensorGetDistance+0x54>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */

    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   147f8:	2303      	movs	r3, #3
   147fa:	425b      	negs	r3, r3
   147fc:	60fb      	str	r3, [r7, #12]
        goto exitf;
   147fe:	e023      	b.n	14848 <DistanceSensorGetDistance+0x9c>
    }

    // 4. Initiate an rx job - usart_read_buffer_job - to read two characters. Read into variable latestRxDistance
    usart_read_buffer_job(&usart_instance_dist, (uint8_t *)&latestRxDistance, 2);  // Kicks off constant reading of characters
   14800:	491b      	ldr	r1, [pc, #108]	; (14870 <DistanceSensorGetDistance+0xc4>)
   14802:	4b17      	ldr	r3, [pc, #92]	; (14860 <DistanceSensorGetDistance+0xb4>)
   14804:	2202      	movs	r2, #2
   14806:	0018      	movs	r0, r3
   14808:	4b1a      	ldr	r3, [pc, #104]	; (14874 <DistanceSensorGetDistance+0xc8>)
   1480a:	4798      	blx	r3

    //---7. Wait for notification
    if (xSemaphoreTake(sensorDistanceSemaphoreHandle, xMaxBlockTime) == pdTRUE) {
   1480c:	4b16      	ldr	r3, [pc, #88]	; (14868 <DistanceSensorGetDistance+0xbc>)
   1480e:	681b      	ldr	r3, [r3, #0]
   14810:	683a      	ldr	r2, [r7, #0]
   14812:	0011      	movs	r1, r2
   14814:	0018      	movs	r0, r3
   14816:	4b15      	ldr	r3, [pc, #84]	; (1486c <DistanceSensorGetDistance+0xc0>)
   14818:	4798      	blx	r3
   1481a:	0003      	movs	r3, r0
   1481c:	2b01      	cmp	r3, #1
   1481e:	d10c      	bne.n	1483a <DistanceSensorGetDistance+0x8e>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        *distance = (latestRxDistance[0] << 8) + latestRxDistance[1];
   14820:	4b13      	ldr	r3, [pc, #76]	; (14870 <DistanceSensorGetDistance+0xc4>)
   14822:	781b      	ldrb	r3, [r3, #0]
   14824:	b29b      	uxth	r3, r3
   14826:	021b      	lsls	r3, r3, #8
   14828:	b29a      	uxth	r2, r3
   1482a:	4b11      	ldr	r3, [pc, #68]	; (14870 <DistanceSensorGetDistance+0xc4>)
   1482c:	785b      	ldrb	r3, [r3, #1]
   1482e:	b29b      	uxth	r3, r3
   14830:	18d3      	adds	r3, r2, r3
   14832:	b29a      	uxth	r2, r3
   14834:	687b      	ldr	r3, [r7, #4]
   14836:	801a      	strh	r2, [r3, #0]
   14838:	e006      	b.n	14848 <DistanceSensorGetDistance+0x9c>
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   1483a:	2303      	movs	r3, #3
   1483c:	425b      	negs	r3, r3
   1483e:	60fb      	str	r3, [r7, #12]
        goto exitf;
   14840:	e002      	b.n	14848 <DistanceSensorGetDistance+0x9c>
    if (ERROR_NONE != error) goto exitf;
   14842:	46c0      	nop			; (mov r8, r8)
   14844:	e000      	b.n	14848 <DistanceSensorGetDistance+0x9c>
        goto exitf;
   14846:	46c0      	nop			; (mov r8, r8)
    }

exitf:
    // Release mutex and return error
    DistanceSensorFreeMutex();
   14848:	4b0b      	ldr	r3, [pc, #44]	; (14878 <DistanceSensorGetDistance+0xcc>)
   1484a:	4798      	blx	r3

    return error;
   1484c:	68fb      	ldr	r3, [r7, #12]
}
   1484e:	0018      	movs	r0, r3
   14850:	46bd      	mov	sp, r7
   14852:	b004      	add	sp, #16
   14854:	bd80      	pop	{r7, pc}
   14856:	46c0      	nop			; (mov r8, r8)
   14858:	00014979 	.word	0x00014979
   1485c:	2000442a 	.word	0x2000442a
   14860:	20004434 	.word	0x20004434
   14864:	00029c11 	.word	0x00029c11
   14868:	2000442c 	.word	0x2000442c
   1486c:	0001c091 	.word	0x0001c091
   14870:	20004428 	.word	0x20004428
   14874:	00029c59 	.word	0x00029c59
   14878:	00014941 	.word	0x00014941

0001487c <configure_usart>:
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 */
static void configure_usart(void)
{
   1487c:	b580      	push	{r7, lr}
   1487e:	b090      	sub	sp, #64	; 0x40
   14880:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
   14882:	003b      	movs	r3, r7
   14884:	0018      	movs	r0, r3
   14886:	4b14      	ldr	r3, [pc, #80]	; (148d8 <configure_usart+0x5c>)
   14888:	4798      	blx	r3

    config_usart.baudrate = 9600;
   1488a:	003b      	movs	r3, r7
   1488c:	2296      	movs	r2, #150	; 0x96
   1488e:	0192      	lsls	r2, r2, #6
   14890:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = USART_RX_1_TX_0_XCK_1;
   14892:	003b      	movs	r3, r7
   14894:	2280      	movs	r2, #128	; 0x80
   14896:	0352      	lsls	r2, r2, #13
   14898:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = PINMUX_PB02D_SERCOM5_PAD0;
   1489a:	003b      	movs	r3, r7
   1489c:	4a0f      	ldr	r2, [pc, #60]	; (148dc <configure_usart+0x60>)
   1489e:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = PINMUX_PB03D_SERCOM5_PAD1;
   148a0:	003b      	movs	r3, r7
   148a2:	4a0f      	ldr	r2, [pc, #60]	; (148e0 <configure_usart+0x64>)
   148a4:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = PINMUX_UNUSED;
   148a6:	003b      	movs	r3, r7
   148a8:	2201      	movs	r2, #1
   148aa:	4252      	negs	r2, r2
   148ac:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = PINMUX_UNUSED;
   148ae:	003b      	movs	r3, r7
   148b0:	2201      	movs	r2, #1
   148b2:	4252      	negs	r2, r2
   148b4:	63da      	str	r2, [r3, #60]	; 0x3c

    while (usart_init(&usart_instance_dist, SERCOM5, &config_usart) != STATUS_OK) {
   148b6:	46c0      	nop			; (mov r8, r8)
   148b8:	003a      	movs	r2, r7
   148ba:	490a      	ldr	r1, [pc, #40]	; (148e4 <configure_usart+0x68>)
   148bc:	4b0a      	ldr	r3, [pc, #40]	; (148e8 <configure_usart+0x6c>)
   148be:	0018      	movs	r0, r3
   148c0:	4b0a      	ldr	r3, [pc, #40]	; (148ec <configure_usart+0x70>)
   148c2:	4798      	blx	r3
   148c4:	1e03      	subs	r3, r0, #0
   148c6:	d1f7      	bne.n	148b8 <configure_usart+0x3c>
    }

    usart_enable(&usart_instance_dist);
   148c8:	4b07      	ldr	r3, [pc, #28]	; (148e8 <configure_usart+0x6c>)
   148ca:	0018      	movs	r0, r3
   148cc:	4b08      	ldr	r3, [pc, #32]	; (148f0 <configure_usart+0x74>)
   148ce:	4798      	blx	r3
}
   148d0:	46c0      	nop			; (mov r8, r8)
   148d2:	46bd      	mov	sp, r7
   148d4:	b010      	add	sp, #64	; 0x40
   148d6:	bd80      	pop	{r7, pc}
   148d8:	00014585 	.word	0x00014585
   148dc:	00220003 	.word	0x00220003
   148e0:	00230003 	.word	0x00230003
   148e4:	42001c00 	.word	0x42001c00
   148e8:	20004434 	.word	0x20004434
   148ec:	00029815 	.word	0x00029815
   148f0:	00014645 	.word	0x00014645

000148f4 <configure_usart_callbacks>:
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 */
static void configure_usart_callbacks(void)
{
   148f4:	b580      	push	{r7, lr}
   148f6:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance_dist, distUsartWritecallback, USART_CALLBACK_BUFFER_TRANSMITTED);
   148f8:	490c      	ldr	r1, [pc, #48]	; (1492c <configure_usart_callbacks+0x38>)
   148fa:	4b0d      	ldr	r3, [pc, #52]	; (14930 <configure_usart_callbacks+0x3c>)
   148fc:	2200      	movs	r2, #0
   148fe:	0018      	movs	r0, r3
   14900:	4b0c      	ldr	r3, [pc, #48]	; (14934 <configure_usart_callbacks+0x40>)
   14902:	4798      	blx	r3
    usart_register_callback(&usart_instance_dist, distUsartReadcallback, USART_CALLBACK_BUFFER_RECEIVED);
   14904:	490c      	ldr	r1, [pc, #48]	; (14938 <configure_usart_callbacks+0x44>)
   14906:	4b0a      	ldr	r3, [pc, #40]	; (14930 <configure_usart_callbacks+0x3c>)
   14908:	2201      	movs	r2, #1
   1490a:	0018      	movs	r0, r3
   1490c:	4b09      	ldr	r3, [pc, #36]	; (14934 <configure_usart_callbacks+0x40>)
   1490e:	4798      	blx	r3
    usart_enable_callback(&usart_instance_dist, USART_CALLBACK_BUFFER_TRANSMITTED);
   14910:	4b07      	ldr	r3, [pc, #28]	; (14930 <configure_usart_callbacks+0x3c>)
   14912:	2100      	movs	r1, #0
   14914:	0018      	movs	r0, r3
   14916:	4b09      	ldr	r3, [pc, #36]	; (1493c <configure_usart_callbacks+0x48>)
   14918:	4798      	blx	r3
    usart_enable_callback(&usart_instance_dist, USART_CALLBACK_BUFFER_RECEIVED);
   1491a:	4b05      	ldr	r3, [pc, #20]	; (14930 <configure_usart_callbacks+0x3c>)
   1491c:	2101      	movs	r1, #1
   1491e:	0018      	movs	r0, r3
   14920:	4b06      	ldr	r3, [pc, #24]	; (1493c <configure_usart_callbacks+0x48>)
   14922:	4798      	blx	r3
}
   14924:	46c0      	nop			; (mov r8, r8)
   14926:	46bd      	mov	sp, r7
   14928:	bd80      	pop	{r7, pc}
   1492a:	46c0      	nop			; (mov r8, r8)
   1492c:	000146c5 	.word	0x000146c5
   14930:	20004434 	.word	0x20004434
   14934:	00029bc9 	.word	0x00029bc9
   14938:	00014705 	.word	0x00014705
   1493c:	0001468d 	.word	0x0001468d

00014940 <DistanceSensorFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
static int32_t DistanceSensorFreeMutex(void)
{
   14940:	b590      	push	{r4, r7, lr}
   14942:	b083      	sub	sp, #12
   14944:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
   14946:	2300      	movs	r3, #0
   14948:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorDistanceMutexHandle) != pdTRUE) {
   1494a:	4b09      	ldr	r3, [pc, #36]	; (14970 <DistanceSensorFreeMutex+0x30>)
   1494c:	6818      	ldr	r0, [r3, #0]
   1494e:	2300      	movs	r3, #0
   14950:	2200      	movs	r2, #0
   14952:	2100      	movs	r1, #0
   14954:	4c07      	ldr	r4, [pc, #28]	; (14974 <DistanceSensorFreeMutex+0x34>)
   14956:	47a0      	blx	r4
   14958:	0003      	movs	r3, r0
   1495a:	2b01      	cmp	r3, #1
   1495c:	d002      	beq.n	14964 <DistanceSensorFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
   1495e:	2314      	movs	r3, #20
   14960:	425b      	negs	r3, r3
   14962:	607b      	str	r3, [r7, #4]
    }
    return error;
   14964:	687b      	ldr	r3, [r7, #4]
}
   14966:	0018      	movs	r0, r3
   14968:	46bd      	mov	sp, r7
   1496a:	b003      	add	sp, #12
   1496c:	bd90      	pop	{r4, r7, pc}
   1496e:	46c0      	nop			; (mov r8, r8)
   14970:	20004430 	.word	0x20004430
   14974:	0001b381 	.word	0x0001b381

00014978 <DistanceSensorGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
static int32_t DistanceSensorGetMutex(TickType_t waitTime)
{
   14978:	b580      	push	{r7, lr}
   1497a:	b084      	sub	sp, #16
   1497c:	af00      	add	r7, sp, #0
   1497e:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14980:	2300      	movs	r3, #0
   14982:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorDistanceMutexHandle, waitTime) != pdTRUE) {
   14984:	4b08      	ldr	r3, [pc, #32]	; (149a8 <DistanceSensorGetMutex+0x30>)
   14986:	681b      	ldr	r3, [r3, #0]
   14988:	687a      	ldr	r2, [r7, #4]
   1498a:	0011      	movs	r1, r2
   1498c:	0018      	movs	r0, r3
   1498e:	4b07      	ldr	r3, [pc, #28]	; (149ac <DistanceSensorGetMutex+0x34>)
   14990:	4798      	blx	r3
   14992:	0003      	movs	r3, r0
   14994:	2b01      	cmp	r3, #1
   14996:	d002      	beq.n	1499e <DistanceSensorGetMutex+0x26>
        error = ERROR_NOT_READY;
   14998:	231d      	movs	r3, #29
   1499a:	425b      	negs	r3, r3
   1499c:	60fb      	str	r3, [r7, #12]
    }
    return error;
   1499e:	68fb      	ldr	r3, [r7, #12]
   149a0:	0018      	movs	r0, r3
   149a2:	46bd      	mov	sp, r7
   149a4:	b004      	add	sp, #16
   149a6:	bd80      	pop	{r7, pc}
   149a8:	20004430 	.word	0x20004430
   149ac:	0001c091 	.word	0x0001c091

000149b0 <system_interrupt_enable>:
{
   149b0:	b580      	push	{r7, lr}
   149b2:	b082      	sub	sp, #8
   149b4:	af00      	add	r7, sp, #0
   149b6:	0002      	movs	r2, r0
   149b8:	1dfb      	adds	r3, r7, #7
   149ba:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   149bc:	4b06      	ldr	r3, [pc, #24]	; (149d8 <system_interrupt_enable+0x28>)
   149be:	1dfa      	adds	r2, r7, #7
   149c0:	7812      	ldrb	r2, [r2, #0]
   149c2:	0011      	movs	r1, r2
   149c4:	221f      	movs	r2, #31
   149c6:	400a      	ands	r2, r1
   149c8:	2101      	movs	r1, #1
   149ca:	4091      	lsls	r1, r2
   149cc:	000a      	movs	r2, r1
   149ce:	601a      	str	r2, [r3, #0]
}
   149d0:	46c0      	nop			; (mov r8, r8)
   149d2:	46bd      	mov	sp, r7
   149d4:	b002      	add	sp, #8
   149d6:	bd80      	pop	{r7, pc}
   149d8:	e000e100 	.word	0xe000e100

000149dc <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
   149dc:	b580      	push	{r7, lr}
   149de:	b084      	sub	sp, #16
   149e0:	af00      	add	r7, sp, #0
   149e2:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   149e4:	687b      	ldr	r3, [r7, #4]
   149e6:	681b      	ldr	r3, [r3, #0]
   149e8:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   149ea:	68fb      	ldr	r3, [r7, #12]
   149ec:	69db      	ldr	r3, [r3, #28]
   149ee:	2207      	movs	r2, #7
   149f0:	4013      	ands	r3, r2
   149f2:	1e5a      	subs	r2, r3, #1
   149f4:	4193      	sbcs	r3, r2
   149f6:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
   149f8:	0018      	movs	r0, r3
   149fa:	46bd      	mov	sp, r7
   149fc:	b004      	add	sp, #16
   149fe:	bd80      	pop	{r7, pc}

00014a00 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
   14a00:	b580      	push	{r7, lr}
   14a02:	b082      	sub	sp, #8
   14a04:	af00      	add	r7, sp, #0
   14a06:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
   14a08:	46c0      	nop			; (mov r8, r8)
   14a0a:	687b      	ldr	r3, [r7, #4]
   14a0c:	0018      	movs	r0, r3
   14a0e:	4b04      	ldr	r3, [pc, #16]	; (14a20 <_i2c_master_wait_for_sync+0x20>)
   14a10:	4798      	blx	r3
   14a12:	1e03      	subs	r3, r0, #0
   14a14:	d1f9      	bne.n	14a0a <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
   14a16:	46c0      	nop			; (mov r8, r8)
   14a18:	46bd      	mov	sp, r7
   14a1a:	b002      	add	sp, #8
   14a1c:	bd80      	pop	{r7, pc}
   14a1e:	46c0      	nop			; (mov r8, r8)
   14a20:	000149dd 	.word	0x000149dd

00014a24 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
   14a24:	b580      	push	{r7, lr}
   14a26:	b082      	sub	sp, #8
   14a28:	af00      	add	r7, sp, #0
   14a2a:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   14a2c:	687b      	ldr	r3, [r7, #4]
   14a2e:	2264      	movs	r2, #100	; 0x64
   14a30:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   14a32:	687b      	ldr	r3, [r7, #4]
   14a34:	4a1b      	ldr	r2, [pc, #108]	; (14aa4 <i2c_master_get_config_defaults+0x80>)
   14a36:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   14a38:	687b      	ldr	r3, [r7, #4]
   14a3a:	2200      	movs	r2, #0
   14a3c:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
   14a3e:	687b      	ldr	r3, [r7, #4]
   14a40:	2200      	movs	r2, #0
   14a42:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
   14a44:	687b      	ldr	r3, [r7, #4]
   14a46:	2200      	movs	r2, #0
   14a48:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   14a4a:	687b      	ldr	r3, [r7, #4]
   14a4c:	2280      	movs	r2, #128	; 0x80
   14a4e:	0392      	lsls	r2, r2, #14
   14a50:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
   14a52:	687b      	ldr	r3, [r7, #4]
   14a54:	2201      	movs	r2, #1
   14a56:	4252      	negs	r2, r2
   14a58:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
   14a5a:	687b      	ldr	r3, [r7, #4]
   14a5c:	2201      	movs	r2, #1
   14a5e:	4252      	negs	r2, r2
   14a60:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   14a62:	687b      	ldr	r3, [r7, #4]
   14a64:	2200      	movs	r2, #0
   14a66:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
   14a68:	687b      	ldr	r3, [r7, #4]
   14a6a:	2200      	movs	r2, #0
   14a6c:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
   14a6e:	687b      	ldr	r3, [r7, #4]
   14a70:	2224      	movs	r2, #36	; 0x24
   14a72:	2100      	movs	r1, #0
   14a74:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
   14a76:	687b      	ldr	r3, [r7, #4]
   14a78:	2200      	movs	r2, #0
   14a7a:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
   14a7c:	687b      	ldr	r3, [r7, #4]
   14a7e:	222c      	movs	r2, #44	; 0x2c
   14a80:	2100      	movs	r1, #0
   14a82:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
   14a84:	687b      	ldr	r3, [r7, #4]
   14a86:	222d      	movs	r2, #45	; 0x2d
   14a88:	2100      	movs	r1, #0
   14a8a:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
   14a8c:	687b      	ldr	r3, [r7, #4]
   14a8e:	222e      	movs	r2, #46	; 0x2e
   14a90:	2100      	movs	r1, #0
   14a92:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
   14a94:	687b      	ldr	r3, [r7, #4]
   14a96:	22d7      	movs	r2, #215	; 0xd7
   14a98:	861a      	strh	r2, [r3, #48]	; 0x30
}
   14a9a:	46c0      	nop			; (mov r8, r8)
   14a9c:	46bd      	mov	sp, r7
   14a9e:	b002      	add	sp, #8
   14aa0:	bd80      	pop	{r7, pc}
   14aa2:	46c0      	nop			; (mov r8, r8)
   14aa4:	00000d48 	.word	0x00000d48

00014aa8 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
   14aa8:	b580      	push	{r7, lr}
   14aaa:	b084      	sub	sp, #16
   14aac:	af00      	add	r7, sp, #0
   14aae:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   14ab0:	687b      	ldr	r3, [r7, #4]
   14ab2:	681b      	ldr	r3, [r3, #0]
   14ab4:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
   14ab6:	2300      	movs	r3, #0
   14ab8:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   14aba:	687b      	ldr	r3, [r7, #4]
   14abc:	0018      	movs	r0, r3
   14abe:	4b14      	ldr	r3, [pc, #80]	; (14b10 <i2c_master_enable+0x68>)
   14ac0:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
   14ac2:	68bb      	ldr	r3, [r7, #8]
   14ac4:	681b      	ldr	r3, [r3, #0]
   14ac6:	2202      	movs	r2, #2
   14ac8:	431a      	orrs	r2, r3
   14aca:	68bb      	ldr	r3, [r7, #8]
   14acc:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   14ace:	687b      	ldr	r3, [r7, #4]
   14ad0:	681b      	ldr	r3, [r3, #0]
   14ad2:	0018      	movs	r0, r3
   14ad4:	4b0f      	ldr	r3, [pc, #60]	; (14b14 <i2c_master_enable+0x6c>)
   14ad6:	4798      	blx	r3
   14ad8:	0003      	movs	r3, r0
   14ada:	0018      	movs	r0, r3
   14adc:	4b0e      	ldr	r3, [pc, #56]	; (14b18 <i2c_master_enable+0x70>)
   14ade:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   14ae0:	e00c      	b.n	14afc <i2c_master_enable+0x54>
		timeout_counter++;
   14ae2:	68fb      	ldr	r3, [r7, #12]
   14ae4:	3301      	adds	r3, #1
   14ae6:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   14ae8:	687b      	ldr	r3, [r7, #4]
   14aea:	88db      	ldrh	r3, [r3, #6]
   14aec:	001a      	movs	r2, r3
   14aee:	68fb      	ldr	r3, [r7, #12]
   14af0:	429a      	cmp	r2, r3
   14af2:	d803      	bhi.n	14afc <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
   14af4:	68bb      	ldr	r3, [r7, #8]
   14af6:	2210      	movs	r2, #16
   14af8:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
   14afa:	e006      	b.n	14b0a <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   14afc:	68bb      	ldr	r3, [r7, #8]
   14afe:	8b5b      	ldrh	r3, [r3, #26]
   14b00:	b29b      	uxth	r3, r3
   14b02:	001a      	movs	r2, r3
   14b04:	2310      	movs	r3, #16
   14b06:	4013      	ands	r3, r2
   14b08:	d0eb      	beq.n	14ae2 <i2c_master_enable+0x3a>
		}
	}
}
   14b0a:	46bd      	mov	sp, r7
   14b0c:	b004      	add	sp, #16
   14b0e:	bd80      	pop	{r7, pc}
   14b10:	00014a01 	.word	0x00014a01
   14b14:	000283b1 	.word	0x000283b1
   14b18:	000149b1 	.word	0x000149b1

00014b1c <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
   14b1c:	b580      	push	{r7, lr}
   14b1e:	b082      	sub	sp, #8
   14b20:	af00      	add	r7, sp, #0
   14b22:	6078      	str	r0, [r7, #4]
   14b24:	000a      	movs	r2, r1
   14b26:	1cfb      	adds	r3, r7, #3
   14b28:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
   14b2a:	687b      	ldr	r3, [r7, #4]
   14b2c:	7e5b      	ldrb	r3, [r3, #25]
   14b2e:	b2db      	uxtb	r3, r3
   14b30:	b25a      	sxtb	r2, r3
   14b32:	1cfb      	adds	r3, r7, #3
   14b34:	781b      	ldrb	r3, [r3, #0]
   14b36:	2101      	movs	r1, #1
   14b38:	4099      	lsls	r1, r3
   14b3a:	000b      	movs	r3, r1
   14b3c:	b25b      	sxtb	r3, r3
   14b3e:	4313      	orrs	r3, r2
   14b40:	b25b      	sxtb	r3, r3
   14b42:	b2da      	uxtb	r2, r3
   14b44:	687b      	ldr	r3, [r7, #4]
   14b46:	765a      	strb	r2, [r3, #25]
}
   14b48:	46c0      	nop			; (mov r8, r8)
   14b4a:	46bd      	mov	sp, r7
   14b4c:	b002      	add	sp, #8
   14b4e:	bd80      	pop	{r7, pc}

00014b50 <I2cDriverConfigureSensorBus>:
struct i2c_master_packet sensorPacketWrite;
/******************************************************************************
 * Forward Declarations
 ******************************************************************************/
static int32_t I2cDriverConfigureSensorBus(void)
{
   14b50:	b590      	push	{r4, r7, lr}
   14b52:	b091      	sub	sp, #68	; 0x44
   14b54:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   14b56:	2300      	movs	r3, #0
   14b58:	63fb      	str	r3, [r7, #60]	; 0x3c
    status_code_genare_t errCodeAsf = STATUS_OK;
   14b5a:	233a      	movs	r3, #58	; 0x3a
   14b5c:	18fb      	adds	r3, r7, r3
   14b5e:	2200      	movs	r2, #0
   14b60:	701a      	strb	r2, [r3, #0]
    /* Initialize config structure and software module */
    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
   14b62:	1d3b      	adds	r3, r7, #4
   14b64:	0018      	movs	r0, r3
   14b66:	4b21      	ldr	r3, [pc, #132]	; (14bec <I2cDriverConfigureSensorBus+0x9c>)
   14b68:	4798      	blx	r3

    config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
   14b6a:	1d3b      	adds	r3, r7, #4
   14b6c:	4a20      	ldr	r2, [pc, #128]	; (14bf0 <I2cDriverConfigureSensorBus+0xa0>)
   14b6e:	61da      	str	r2, [r3, #28]
    config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
   14b70:	1d3b      	adds	r3, r7, #4
   14b72:	4a20      	ldr	r2, [pc, #128]	; (14bf4 <I2cDriverConfigureSensorBus+0xa4>)
   14b74:	621a      	str	r2, [r3, #32]
    /* Change buffer timeout to something longer */
    config_i2c_master.buffer_timeout = 1000;
   14b76:	1d3b      	adds	r3, r7, #4
   14b78:	22fa      	movs	r2, #250	; 0xfa
   14b7a:	0092      	lsls	r2, r2, #2
   14b7c:	82da      	strh	r2, [r3, #22]
    /* Initialize and enable device with config. Try three times to initialize */

    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   14b7e:	233b      	movs	r3, #59	; 0x3b
   14b80:	18fb      	adds	r3, r7, r3
   14b82:	2203      	movs	r2, #3
   14b84:	701a      	strb	r2, [r3, #0]
   14b86:	e01e      	b.n	14bc6 <I2cDriverConfigureSensorBus+0x76>
        errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
   14b88:	233a      	movs	r3, #58	; 0x3a
   14b8a:	18fc      	adds	r4, r7, r3
   14b8c:	1d3a      	adds	r2, r7, #4
   14b8e:	491a      	ldr	r1, [pc, #104]	; (14bf8 <I2cDriverConfigureSensorBus+0xa8>)
   14b90:	4b1a      	ldr	r3, [pc, #104]	; (14bfc <I2cDriverConfigureSensorBus+0xac>)
   14b92:	0018      	movs	r0, r3
   14b94:	4b1a      	ldr	r3, [pc, #104]	; (14c00 <I2cDriverConfigureSensorBus+0xb0>)
   14b96:	4798      	blx	r3
   14b98:	0003      	movs	r3, r0
   14b9a:	7023      	strb	r3, [r4, #0]
        if (STATUS_OK == errCodeAsf) {
   14b9c:	233a      	movs	r3, #58	; 0x3a
   14b9e:	18fb      	adds	r3, r7, r3
   14ba0:	781b      	ldrb	r3, [r3, #0]
   14ba2:	2b00      	cmp	r3, #0
   14ba4:	d104      	bne.n	14bb0 <I2cDriverConfigureSensorBus+0x60>
            error = errCodeAsf;
   14ba6:	233a      	movs	r3, #58	; 0x3a
   14ba8:	18fb      	adds	r3, r7, r3
   14baa:	781b      	ldrb	r3, [r3, #0]
   14bac:	63fb      	str	r3, [r7, #60]	; 0x3c
            break;
   14bae:	e00f      	b.n	14bd0 <I2cDriverConfigureSensorBus+0x80>
        } else {
            i2c_master_reset(&i2cSensorBusInstance);
   14bb0:	4b12      	ldr	r3, [pc, #72]	; (14bfc <I2cDriverConfigureSensorBus+0xac>)
   14bb2:	0018      	movs	r0, r3
   14bb4:	4b13      	ldr	r3, [pc, #76]	; (14c04 <I2cDriverConfigureSensorBus+0xb4>)
   14bb6:	4798      	blx	r3
    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   14bb8:	233b      	movs	r3, #59	; 0x3b
   14bba:	18fb      	adds	r3, r7, r3
   14bbc:	781a      	ldrb	r2, [r3, #0]
   14bbe:	233b      	movs	r3, #59	; 0x3b
   14bc0:	18fb      	adds	r3, r7, r3
   14bc2:	3a01      	subs	r2, #1
   14bc4:	701a      	strb	r2, [r3, #0]
   14bc6:	233b      	movs	r3, #59	; 0x3b
   14bc8:	18fb      	adds	r3, r7, r3
   14bca:	781b      	ldrb	r3, [r3, #0]
   14bcc:	2b00      	cmp	r3, #0
   14bce:	d1db      	bne.n	14b88 <I2cDriverConfigureSensorBus+0x38>
        }
    }

    if (STATUS_OK != error) goto exit;
   14bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14bd2:	2b00      	cmp	r3, #0
   14bd4:	d104      	bne.n	14be0 <I2cDriverConfigureSensorBus+0x90>

    i2c_master_enable(&i2cSensorBusInstance);
   14bd6:	4b09      	ldr	r3, [pc, #36]	; (14bfc <I2cDriverConfigureSensorBus+0xac>)
   14bd8:	0018      	movs	r0, r3
   14bda:	4b0b      	ldr	r3, [pc, #44]	; (14c08 <I2cDriverConfigureSensorBus+0xb8>)
   14bdc:	4798      	blx	r3
   14bde:	e000      	b.n	14be2 <I2cDriverConfigureSensorBus+0x92>
    if (STATUS_OK != error) goto exit;
   14be0:	46c0      	nop			; (mov r8, r8)

exit:
    return error;
   14be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   14be4:	0018      	movs	r0, r3
   14be6:	46bd      	mov	sp, r7
   14be8:	b011      	add	sp, #68	; 0x44
   14bea:	bd90      	pop	{r4, r7, pc}
   14bec:	00014a25 	.word	0x00014a25
   14bf0:	00080002 	.word	0x00080002
   14bf4:	00090002 	.word	0x00090002
   14bf8:	42000800 	.word	0x42000800
   14bfc:	2000446c 	.word	0x2000446c
   14c00:	00018771 	.word	0x00018771
   14c04:	000188a5 	.word	0x000188a5
   14c08:	00014aa9 	.word	0x00014aa9

00014c0c <I2cSensorsTxComplete>:
  * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
  * @note
  */
void I2cSensorsTxComplete(struct i2c_master_module *const module)
{
   14c0c:	b580      	push	{r7, lr}
   14c0e:	b084      	sub	sp, #16
   14c10:	af00      	add	r7, sp, #0
   14c12:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   14c14:	4b0e      	ldr	r3, [pc, #56]	; (14c50 <I2cSensorsTxComplete+0x44>)
   14c16:	2200      	movs	r2, #0
   14c18:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   14c1a:	4b0d      	ldr	r3, [pc, #52]	; (14c50 <I2cSensorsTxComplete+0x44>)
   14c1c:	2201      	movs	r2, #1
   14c1e:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   14c20:	2300      	movs	r3, #0
   14c22:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   14c24:	4b0b      	ldr	r3, [pc, #44]	; (14c54 <I2cSensorsTxComplete+0x48>)
   14c26:	681b      	ldr	r3, [r3, #0]
   14c28:	220c      	movs	r2, #12
   14c2a:	18ba      	adds	r2, r7, r2
   14c2c:	0011      	movs	r1, r2
   14c2e:	0018      	movs	r0, r3
   14c30:	4b09      	ldr	r3, [pc, #36]	; (14c58 <I2cSensorsTxComplete+0x4c>)
   14c32:	4798      	blx	r3
    sensorTransmitError = false;
   14c34:	4b09      	ldr	r3, [pc, #36]	; (14c5c <I2cSensorsTxComplete+0x50>)
   14c36:	2200      	movs	r2, #0
   14c38:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   14c3a:	68fb      	ldr	r3, [r7, #12]
   14c3c:	2b00      	cmp	r3, #0
   14c3e:	d003      	beq.n	14c48 <I2cSensorsTxComplete+0x3c>
   14c40:	4b07      	ldr	r3, [pc, #28]	; (14c60 <I2cSensorsTxComplete+0x54>)
   14c42:	2280      	movs	r2, #128	; 0x80
   14c44:	0552      	lsls	r2, r2, #21
   14c46:	601a      	str	r2, [r3, #0]
}
   14c48:	46c0      	nop			; (mov r8, r8)
   14c4a:	46bd      	mov	sp, r7
   14c4c:	b004      	add	sp, #16
   14c4e:	bd80      	pop	{r7, pc}
   14c50:	2000062c 	.word	0x2000062c
   14c54:	20004494 	.word	0x20004494
   14c58:	0001ba09 	.word	0x0001ba09
   14c5c:	20000628 	.word	0x20000628
   14c60:	e000ed04 	.word	0xe000ed04

00014c64 <I2cSensorsRxComplete>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsRxComplete(struct i2c_master_module *const module)
{
   14c64:	b580      	push	{r7, lr}
   14c66:	b084      	sub	sp, #16
   14c68:	af00      	add	r7, sp, #0
   14c6a:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   14c6c:	4b0e      	ldr	r3, [pc, #56]	; (14ca8 <I2cSensorsRxComplete+0x44>)
   14c6e:	2200      	movs	r2, #0
   14c70:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   14c72:	4b0d      	ldr	r3, [pc, #52]	; (14ca8 <I2cSensorsRxComplete+0x44>)
   14c74:	2201      	movs	r2, #1
   14c76:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   14c78:	2300      	movs	r3, #0
   14c7a:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   14c7c:	4b0b      	ldr	r3, [pc, #44]	; (14cac <I2cSensorsRxComplete+0x48>)
   14c7e:	681b      	ldr	r3, [r3, #0]
   14c80:	220c      	movs	r2, #12
   14c82:	18ba      	adds	r2, r7, r2
   14c84:	0011      	movs	r1, r2
   14c86:	0018      	movs	r0, r3
   14c88:	4b09      	ldr	r3, [pc, #36]	; (14cb0 <I2cSensorsRxComplete+0x4c>)
   14c8a:	4798      	blx	r3
    sensorTransmitError = false;
   14c8c:	4b09      	ldr	r3, [pc, #36]	; (14cb4 <I2cSensorsRxComplete+0x50>)
   14c8e:	2200      	movs	r2, #0
   14c90:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   14c92:	68fb      	ldr	r3, [r7, #12]
   14c94:	2b00      	cmp	r3, #0
   14c96:	d003      	beq.n	14ca0 <I2cSensorsRxComplete+0x3c>
   14c98:	4b07      	ldr	r3, [pc, #28]	; (14cb8 <I2cSensorsRxComplete+0x54>)
   14c9a:	2280      	movs	r2, #128	; 0x80
   14c9c:	0552      	lsls	r2, r2, #21
   14c9e:	601a      	str	r2, [r3, #0]
}
   14ca0:	46c0      	nop			; (mov r8, r8)
   14ca2:	46bd      	mov	sp, r7
   14ca4:	b004      	add	sp, #16
   14ca6:	bd80      	pop	{r7, pc}
   14ca8:	2000062c 	.word	0x2000062c
   14cac:	20004494 	.word	0x20004494
   14cb0:	0001ba09 	.word	0x0001ba09
   14cb4:	20000628 	.word	0x20000628
   14cb8:	e000ed04 	.word	0xe000ed04

00014cbc <I2cSensorsError>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsError(struct i2c_master_module *const module)
{
   14cbc:	b580      	push	{r7, lr}
   14cbe:	b084      	sub	sp, #16
   14cc0:	af00      	add	r7, sp, #0
   14cc2:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   14cc4:	4b0e      	ldr	r3, [pc, #56]	; (14d00 <I2cSensorsError+0x44>)
   14cc6:	2200      	movs	r2, #0
   14cc8:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.txDoneFlag = true;
   14cca:	4b0d      	ldr	r3, [pc, #52]	; (14d00 <I2cSensorsError+0x44>)
   14ccc:	2201      	movs	r2, #1
   14cce:	605a      	str	r2, [r3, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   14cd0:	2300      	movs	r3, #0
   14cd2:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   14cd4:	4b0b      	ldr	r3, [pc, #44]	; (14d04 <I2cSensorsError+0x48>)
   14cd6:	681b      	ldr	r3, [r3, #0]
   14cd8:	220c      	movs	r2, #12
   14cda:	18ba      	adds	r2, r7, r2
   14cdc:	0011      	movs	r1, r2
   14cde:	0018      	movs	r0, r3
   14ce0:	4b09      	ldr	r3, [pc, #36]	; (14d08 <I2cSensorsError+0x4c>)
   14ce2:	4798      	blx	r3
    sensorTransmitError = true;
   14ce4:	4b09      	ldr	r3, [pc, #36]	; (14d0c <I2cSensorsError+0x50>)
   14ce6:	2201      	movs	r2, #1
   14ce8:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   14cea:	68fb      	ldr	r3, [r7, #12]
   14cec:	2b00      	cmp	r3, #0
   14cee:	d003      	beq.n	14cf8 <I2cSensorsError+0x3c>
   14cf0:	4b07      	ldr	r3, [pc, #28]	; (14d10 <I2cSensorsError+0x54>)
   14cf2:	2280      	movs	r2, #128	; 0x80
   14cf4:	0552      	lsls	r2, r2, #21
   14cf6:	601a      	str	r2, [r3, #0]
}
   14cf8:	46c0      	nop			; (mov r8, r8)
   14cfa:	46bd      	mov	sp, r7
   14cfc:	b004      	add	sp, #16
   14cfe:	bd80      	pop	{r7, pc}
   14d00:	2000062c 	.word	0x2000062c
   14d04:	20004494 	.word	0x20004494
   14d08:	0001ba09 	.word	0x0001ba09
   14d0c:	20000628 	.word	0x20000628
   14d10:	e000ed04 	.word	0xe000ed04

00014d14 <I2cDriverRegisterSensorBusCallbacks>:

void I2cDriverRegisterSensorBusCallbacks(void)
{
   14d14:	b580      	push	{r7, lr}
   14d16:	af00      	add	r7, sp, #0
    /* Register callback function. */
    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   14d18:	4911      	ldr	r1, [pc, #68]	; (14d60 <I2cDriverRegisterSensorBusCallbacks+0x4c>)
   14d1a:	4b12      	ldr	r3, [pc, #72]	; (14d64 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14d1c:	2200      	movs	r2, #0
   14d1e:	0018      	movs	r0, r3
   14d20:	4b11      	ldr	r3, [pc, #68]	; (14d68 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   14d22:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   14d24:	4b0f      	ldr	r3, [pc, #60]	; (14d64 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14d26:	2100      	movs	r1, #0
   14d28:	0018      	movs	r0, r3
   14d2a:	4b10      	ldr	r3, [pc, #64]	; (14d6c <I2cDriverRegisterSensorBusCallbacks+0x58>)
   14d2c:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
   14d2e:	4910      	ldr	r1, [pc, #64]	; (14d70 <I2cDriverRegisterSensorBusCallbacks+0x5c>)
   14d30:	4b0c      	ldr	r3, [pc, #48]	; (14d64 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14d32:	2201      	movs	r2, #1
   14d34:	0018      	movs	r0, r3
   14d36:	4b0c      	ldr	r3, [pc, #48]	; (14d68 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   14d38:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_READ_COMPLETE);
   14d3a:	4b0a      	ldr	r3, [pc, #40]	; (14d64 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14d3c:	2101      	movs	r1, #1
   14d3e:	0018      	movs	r0, r3
   14d40:	4b0a      	ldr	r3, [pc, #40]	; (14d6c <I2cDriverRegisterSensorBusCallbacks+0x58>)
   14d42:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError, I2C_MASTER_CALLBACK_ERROR);
   14d44:	490b      	ldr	r1, [pc, #44]	; (14d74 <I2cDriverRegisterSensorBusCallbacks+0x60>)
   14d46:	4b07      	ldr	r3, [pc, #28]	; (14d64 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14d48:	2202      	movs	r2, #2
   14d4a:	0018      	movs	r0, r3
   14d4c:	4b06      	ldr	r3, [pc, #24]	; (14d68 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   14d4e:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_ERROR);
   14d50:	4b04      	ldr	r3, [pc, #16]	; (14d64 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14d52:	2102      	movs	r1, #2
   14d54:	0018      	movs	r0, r3
   14d56:	4b05      	ldr	r3, [pc, #20]	; (14d6c <I2cDriverRegisterSensorBusCallbacks+0x58>)
   14d58:	4798      	blx	r3
}
   14d5a:	46c0      	nop			; (mov r8, r8)
   14d5c:	46bd      	mov	sp, r7
   14d5e:	bd80      	pop	{r7, pc}
   14d60:	00014c0d 	.word	0x00014c0d
   14d64:	2000446c 	.word	0x2000446c
   14d68:	00013561 	.word	0x00013561
   14d6c:	00014b1d 	.word	0x00014b1d
   14d70:	00014c65 	.word	0x00014c65
   14d74:	00014cbd 	.word	0x00014cbd

00014d78 <I2cInitializeDriver>:
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note
 */
int32_t I2cInitializeDriver(void)
{
   14d78:	b580      	push	{r7, lr}
   14d7a:	b082      	sub	sp, #8
   14d7c:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   14d7e:	2300      	movs	r3, #0
   14d80:	607b      	str	r3, [r7, #4]

    error = I2cDriverConfigureSensorBus();
   14d82:	4b14      	ldr	r3, [pc, #80]	; (14dd4 <I2cInitializeDriver+0x5c>)
   14d84:	4798      	blx	r3
   14d86:	0003      	movs	r3, r0
   14d88:	607b      	str	r3, [r7, #4]
    if (STATUS_OK != error) goto exit;
   14d8a:	687b      	ldr	r3, [r7, #4]
   14d8c:	2b00      	cmp	r3, #0
   14d8e:	d11a      	bne.n	14dc6 <I2cInitializeDriver+0x4e>

    I2cDriverRegisterSensorBusCallbacks();
   14d90:	4b11      	ldr	r3, [pc, #68]	; (14dd8 <I2cInitializeDriver+0x60>)
   14d92:	4798      	blx	r3

    sensorI2cMutexHandle = xSemaphoreCreateMutex();
   14d94:	2001      	movs	r0, #1
   14d96:	4b11      	ldr	r3, [pc, #68]	; (14ddc <I2cInitializeDriver+0x64>)
   14d98:	4798      	blx	r3
   14d9a:	0002      	movs	r2, r0
   14d9c:	4b10      	ldr	r3, [pc, #64]	; (14de0 <I2cInitializeDriver+0x68>)
   14d9e:	601a      	str	r2, [r3, #0]

    sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
   14da0:	2203      	movs	r2, #3
   14da2:	2100      	movs	r1, #0
   14da4:	2001      	movs	r0, #1
   14da6:	4b0f      	ldr	r3, [pc, #60]	; (14de4 <I2cInitializeDriver+0x6c>)
   14da8:	4798      	blx	r3
   14daa:	0002      	movs	r2, r0
   14dac:	4b0e      	ldr	r3, [pc, #56]	; (14de8 <I2cInitializeDriver+0x70>)
   14dae:	601a      	str	r2, [r3, #0]
    // xSemaphoreGive(sensorI2cSemaphoreHandle);

    if (NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle) {
   14db0:	4b0b      	ldr	r3, [pc, #44]	; (14de0 <I2cInitializeDriver+0x68>)
   14db2:	681b      	ldr	r3, [r3, #0]
   14db4:	2b00      	cmp	r3, #0
   14db6:	d003      	beq.n	14dc0 <I2cInitializeDriver+0x48>
   14db8:	4b0b      	ldr	r3, [pc, #44]	; (14de8 <I2cInitializeDriver+0x70>)
   14dba:	681b      	ldr	r3, [r3, #0]
   14dbc:	2b00      	cmp	r3, #0
   14dbe:	d103      	bne.n	14dc8 <I2cInitializeDriver+0x50>
        error = STATUS_SUSPEND;  // Could not initialize mutex!
   14dc0:	2306      	movs	r3, #6
   14dc2:	607b      	str	r3, [r7, #4]
        goto exit;
   14dc4:	e000      	b.n	14dc8 <I2cInitializeDriver+0x50>
    if (STATUS_OK != error) goto exit;
   14dc6:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   14dc8:	687b      	ldr	r3, [r7, #4]
}
   14dca:	0018      	movs	r0, r3
   14dcc:	46bd      	mov	sp, r7
   14dce:	b002      	add	sp, #8
   14dd0:	bd80      	pop	{r7, pc}
   14dd2:	46c0      	nop			; (mov r8, r8)
   14dd4:	00014b51 	.word	0x00014b51
   14dd8:	00014d15 	.word	0x00014d15
   14ddc:	0001b341 	.word	0x0001b341
   14de0:	20004468 	.word	0x20004468
   14de4:	0001b0d9 	.word	0x0001b0d9
   14de8:	20004494 	.word	0x20004494

00014dec <I2cWriteData>:
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */

int32_t I2cWriteData(I2C_Data *data)
{
   14dec:	b590      	push	{r4, r7, lr}
   14dee:	b085      	sub	sp, #20
   14df0:	af00      	add	r7, sp, #0
   14df2:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14df4:	2300      	movs	r3, #0
   14df6:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   14df8:	687b      	ldr	r3, [r7, #4]
   14dfa:	2b00      	cmp	r3, #0
   14dfc:	d003      	beq.n	14e06 <I2cWriteData+0x1a>
   14dfe:	687b      	ldr	r3, [r7, #4]
   14e00:	685b      	ldr	r3, [r3, #4]
   14e02:	2b00      	cmp	r3, #0
   14e04:	d103      	bne.n	14e0e <I2cWriteData+0x22>
        error = ERR_INVALID_ARG;
   14e06:	2308      	movs	r3, #8
   14e08:	425b      	negs	r3, r3
   14e0a:	60fb      	str	r3, [r7, #12]
        goto exit;
   14e0c:	e01f      	b.n	14e4e <I2cWriteData+0x62>
    }

    // Prepare to write
    sensorPacketWrite.address = data->address;
   14e0e:	687b      	ldr	r3, [r7, #4]
   14e10:	781b      	ldrb	r3, [r3, #0]
   14e12:	b29a      	uxth	r2, r3
   14e14:	4b10      	ldr	r3, [pc, #64]	; (14e58 <I2cWriteData+0x6c>)
   14e16:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = (uint8_t *)data->msgOut;
   14e18:	687b      	ldr	r3, [r7, #4]
   14e1a:	685a      	ldr	r2, [r3, #4]
   14e1c:	4b0e      	ldr	r3, [pc, #56]	; (14e58 <I2cWriteData+0x6c>)
   14e1e:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenOut;
   14e20:	687b      	ldr	r3, [r7, #4]
   14e22:	89da      	ldrh	r2, [r3, #14]
   14e24:	4b0c      	ldr	r3, [pc, #48]	; (14e58 <I2cWriteData+0x6c>)
   14e26:	805a      	strh	r2, [r3, #2]

    // Write

    hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   14e28:	230b      	movs	r3, #11
   14e2a:	18fc      	adds	r4, r7, r3
   14e2c:	4a0a      	ldr	r2, [pc, #40]	; (14e58 <I2cWriteData+0x6c>)
   14e2e:	4b0b      	ldr	r3, [pc, #44]	; (14e5c <I2cWriteData+0x70>)
   14e30:	0011      	movs	r1, r2
   14e32:	0018      	movs	r0, r3
   14e34:	4b0a      	ldr	r3, [pc, #40]	; (14e60 <I2cWriteData+0x74>)
   14e36:	4798      	blx	r3
   14e38:	0003      	movs	r3, r0
   14e3a:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   14e3c:	230b      	movs	r3, #11
   14e3e:	18fb      	adds	r3, r7, r3
   14e40:	781b      	ldrb	r3, [r3, #0]
   14e42:	2b00      	cmp	r3, #0
   14e44:	d003      	beq.n	14e4e <I2cWriteData+0x62>
        error = ERROR_IO;
   14e46:	2306      	movs	r3, #6
   14e48:	425b      	negs	r3, r3
   14e4a:	60fb      	str	r3, [r7, #12]
        goto exit;
   14e4c:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   14e4e:	68fb      	ldr	r3, [r7, #12]
}
   14e50:	0018      	movs	r0, r3
   14e52:	46bd      	mov	sp, r7
   14e54:	b005      	add	sp, #20
   14e56:	bd90      	pop	{r4, r7, pc}
   14e58:	20004498 	.word	0x20004498
   14e5c:	2000446c 	.word	0x2000446c
   14e60:	000137e5 	.word	0x000137e5

00014e64 <I2cReadData>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
int32_t I2cReadData(I2C_Data *data)
{
   14e64:	b590      	push	{r4, r7, lr}
   14e66:	b085      	sub	sp, #20
   14e68:	af00      	add	r7, sp, #0
   14e6a:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14e6c:	2300      	movs	r3, #0
   14e6e:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   14e70:	687b      	ldr	r3, [r7, #4]
   14e72:	2b00      	cmp	r3, #0
   14e74:	d003      	beq.n	14e7e <I2cReadData+0x1a>
   14e76:	687b      	ldr	r3, [r7, #4]
   14e78:	685b      	ldr	r3, [r3, #4]
   14e7a:	2b00      	cmp	r3, #0
   14e7c:	d103      	bne.n	14e86 <I2cReadData+0x22>
        error = ERR_INVALID_ARG;
   14e7e:	2308      	movs	r3, #8
   14e80:	425b      	negs	r3, r3
   14e82:	60fb      	str	r3, [r7, #12]
        goto exit;
   14e84:	e01f      	b.n	14ec6 <I2cReadData+0x62>
    }

    // Prepare to read
    sensorPacketWrite.address = data->address;
   14e86:	687b      	ldr	r3, [r7, #4]
   14e88:	781b      	ldrb	r3, [r3, #0]
   14e8a:	b29a      	uxth	r2, r3
   14e8c:	4b10      	ldr	r3, [pc, #64]	; (14ed0 <I2cReadData+0x6c>)
   14e8e:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = data->msgIn;
   14e90:	687b      	ldr	r3, [r7, #4]
   14e92:	689a      	ldr	r2, [r3, #8]
   14e94:	4b0e      	ldr	r3, [pc, #56]	; (14ed0 <I2cReadData+0x6c>)
   14e96:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenIn;
   14e98:	687b      	ldr	r3, [r7, #4]
   14e9a:	899a      	ldrh	r2, [r3, #12]
   14e9c:	4b0c      	ldr	r3, [pc, #48]	; (14ed0 <I2cReadData+0x6c>)
   14e9e:	805a      	strh	r2, [r3, #2]

    // Read

    hwError = i2c_master_read_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   14ea0:	230b      	movs	r3, #11
   14ea2:	18fc      	adds	r4, r7, r3
   14ea4:	4a0a      	ldr	r2, [pc, #40]	; (14ed0 <I2cReadData+0x6c>)
   14ea6:	4b0b      	ldr	r3, [pc, #44]	; (14ed4 <I2cReadData+0x70>)
   14ea8:	0011      	movs	r1, r2
   14eaa:	0018      	movs	r0, r3
   14eac:	4b0a      	ldr	r3, [pc, #40]	; (14ed8 <I2cReadData+0x74>)
   14eae:	4798      	blx	r3
   14eb0:	0003      	movs	r3, r0
   14eb2:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   14eb4:	230b      	movs	r3, #11
   14eb6:	18fb      	adds	r3, r7, r3
   14eb8:	781b      	ldrb	r3, [r3, #0]
   14eba:	2b00      	cmp	r3, #0
   14ebc:	d003      	beq.n	14ec6 <I2cReadData+0x62>
        error = ERROR_IO;
   14ebe:	2306      	movs	r3, #6
   14ec0:	425b      	negs	r3, r3
   14ec2:	60fb      	str	r3, [r7, #12]
        goto exit;
   14ec4:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   14ec6:	68fb      	ldr	r3, [r7, #12]
}
   14ec8:	0018      	movs	r0, r3
   14eca:	46bd      	mov	sp, r7
   14ecc:	b005      	add	sp, #20
   14ece:	bd90      	pop	{r4, r7, pc}
   14ed0:	20004498 	.word	0x20004498
   14ed4:	2000446c 	.word	0x2000446c
   14ed8:	00013701 	.word	0x00013701

00014edc <I2cFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cFreeMutex(void)
{
   14edc:	b590      	push	{r4, r7, lr}
   14ede:	b083      	sub	sp, #12
   14ee0:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
   14ee2:	2300      	movs	r3, #0
   14ee4:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE) {
   14ee6:	4b09      	ldr	r3, [pc, #36]	; (14f0c <I2cFreeMutex+0x30>)
   14ee8:	6818      	ldr	r0, [r3, #0]
   14eea:	2300      	movs	r3, #0
   14eec:	2200      	movs	r2, #0
   14eee:	2100      	movs	r1, #0
   14ef0:	4c07      	ldr	r4, [pc, #28]	; (14f10 <I2cFreeMutex+0x34>)
   14ef2:	47a0      	blx	r4
   14ef4:	0003      	movs	r3, r0
   14ef6:	2b01      	cmp	r3, #1
   14ef8:	d002      	beq.n	14f00 <I2cFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
   14efa:	2314      	movs	r3, #20
   14efc:	425b      	negs	r3, r3
   14efe:	607b      	str	r3, [r7, #4]
    }
    return error;
   14f00:	687b      	ldr	r3, [r7, #4]
}
   14f02:	0018      	movs	r0, r3
   14f04:	46bd      	mov	sp, r7
   14f06:	b003      	add	sp, #12
   14f08:	bd90      	pop	{r4, r7, pc}
   14f0a:	46c0      	nop			; (mov r8, r8)
   14f0c:	20004468 	.word	0x20004468
   14f10:	0001b381 	.word	0x0001b381

00014f14 <I2cGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cGetMutex(TickType_t waitTime)
{
   14f14:	b580      	push	{r7, lr}
   14f16:	b084      	sub	sp, #16
   14f18:	af00      	add	r7, sp, #0
   14f1a:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14f1c:	2300      	movs	r3, #0
   14f1e:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorI2cMutexHandle, waitTime) != pdTRUE) {
   14f20:	4b08      	ldr	r3, [pc, #32]	; (14f44 <I2cGetMutex+0x30>)
   14f22:	681b      	ldr	r3, [r3, #0]
   14f24:	687a      	ldr	r2, [r7, #4]
   14f26:	0011      	movs	r1, r2
   14f28:	0018      	movs	r0, r3
   14f2a:	4b07      	ldr	r3, [pc, #28]	; (14f48 <I2cGetMutex+0x34>)
   14f2c:	4798      	blx	r3
   14f2e:	0003      	movs	r3, r0
   14f30:	2b01      	cmp	r3, #1
   14f32:	d002      	beq.n	14f3a <I2cGetMutex+0x26>
        error = ERROR_NOT_READY;
   14f34:	231d      	movs	r3, #29
   14f36:	425b      	negs	r3, r3
   14f38:	60fb      	str	r3, [r7, #12]
    }
    return error;
   14f3a:	68fb      	ldr	r3, [r7, #12]
}
   14f3c:	0018      	movs	r0, r3
   14f3e:	46bd      	mov	sp, r7
   14f40:	b004      	add	sp, #16
   14f42:	bd80      	pop	{r7, pc}
   14f44:	20004468 	.word	0x20004468
   14f48:	0001c091 	.word	0x0001c091

00014f4c <I2cGetSemaphoreHandle>:

static int32_t I2cGetSemaphoreHandle(SemaphoreHandle_t *handle)
{
   14f4c:	b580      	push	{r7, lr}
   14f4e:	b084      	sub	sp, #16
   14f50:	af00      	add	r7, sp, #0
   14f52:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14f54:	2300      	movs	r3, #0
   14f56:	60fb      	str	r3, [r7, #12]
    *handle = sensorI2cSemaphoreHandle;
   14f58:	4b04      	ldr	r3, [pc, #16]	; (14f6c <I2cGetSemaphoreHandle+0x20>)
   14f5a:	681a      	ldr	r2, [r3, #0]
   14f5c:	687b      	ldr	r3, [r7, #4]
   14f5e:	601a      	str	r2, [r3, #0]
    return error;
   14f60:	68fb      	ldr	r3, [r7, #12]
}
   14f62:	0018      	movs	r0, r3
   14f64:	46bd      	mov	sp, r7
   14f66:	b004      	add	sp, #16
   14f68:	bd80      	pop	{r7, pc}
   14f6a:	46c0      	nop			; (mov r8, r8)
   14f6c:	20004494 	.word	0x20004494

00014f70 <I2cGetTaskErrorStatus>:
 *the I2C data structure).
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static uint8_t I2cGetTaskErrorStatus(void)
{
   14f70:	b580      	push	{r7, lr}
   14f72:	af00      	add	r7, sp, #0
    return sensorTransmitError;
   14f74:	4b02      	ldr	r3, [pc, #8]	; (14f80 <I2cGetTaskErrorStatus+0x10>)
   14f76:	781b      	ldrb	r3, [r3, #0]
}
   14f78:	0018      	movs	r0, r3
   14f7a:	46bd      	mov	sp, r7
   14f7c:	bd80      	pop	{r7, pc}
   14f7e:	46c0      	nop			; (mov r8, r8)
   14f80:	20000628 	.word	0x20000628

00014f84 <I2cSetTaskErrorStatus>:
 * @param[in]   value Value to which to set the error flag to.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static void I2cSetTaskErrorStatus(uint8_t value)
{
   14f84:	b580      	push	{r7, lr}
   14f86:	b082      	sub	sp, #8
   14f88:	af00      	add	r7, sp, #0
   14f8a:	0002      	movs	r2, r0
   14f8c:	1dfb      	adds	r3, r7, #7
   14f8e:	701a      	strb	r2, [r3, #0]
    sensorTransmitError = value;
   14f90:	4b03      	ldr	r3, [pc, #12]	; (14fa0 <I2cSetTaskErrorStatus+0x1c>)
   14f92:	1dfa      	adds	r2, r7, #7
   14f94:	7812      	ldrb	r2, [r2, #0]
   14f96:	701a      	strb	r2, [r3, #0]
}
   14f98:	46c0      	nop			; (mov r8, r8)
   14f9a:	46bd      	mov	sp, r7
   14f9c:	b002      	add	sp, #8
   14f9e:	bd80      	pop	{r7, pc}
   14fa0:	20000628 	.word	0x20000628

00014fa4 <I2cWriteDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error.
  * @note
  */
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime)
{
   14fa4:	b580      	push	{r7, lr}
   14fa6:	b084      	sub	sp, #16
   14fa8:	af00      	add	r7, sp, #0
   14faa:	6078      	str	r0, [r7, #4]
   14fac:	6039      	str	r1, [r7, #0]
    int32_t error = ERROR_NONE;
   14fae:	2300      	movs	r3, #0
   14fb0:	60fb      	str	r3, [r7, #12]
    SemaphoreHandle_t semHandle = NULL;
   14fb2:	2300      	movs	r3, #0
   14fb4:	60bb      	str	r3, [r7, #8]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   14fb6:	2396      	movs	r3, #150	; 0x96
   14fb8:	005b      	lsls	r3, r3, #1
   14fba:	0018      	movs	r0, r3
   14fbc:	4b28      	ldr	r3, [pc, #160]	; (15060 <I2cWriteDataWait+0xbc>)
   14fbe:	4798      	blx	r3
   14fc0:	0003      	movs	r3, r0
   14fc2:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   14fc4:	68fb      	ldr	r3, [r7, #12]
   14fc6:	2b00      	cmp	r3, #0
   14fc8:	d138      	bne.n	1503c <I2cWriteDataWait+0x98>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   14fca:	2308      	movs	r3, #8
   14fcc:	18fb      	adds	r3, r7, r3
   14fce:	0018      	movs	r0, r3
   14fd0:	4b24      	ldr	r3, [pc, #144]	; (15064 <I2cWriteDataWait+0xc0>)
   14fd2:	4798      	blx	r3
   14fd4:	0003      	movs	r3, r0
   14fd6:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   14fd8:	68fb      	ldr	r3, [r7, #12]
   14fda:	2b00      	cmp	r3, #0
   14fdc:	d130      	bne.n	15040 <I2cWriteDataWait+0x9c>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   14fde:	687b      	ldr	r3, [r7, #4]
   14fe0:	0018      	movs	r0, r3
   14fe2:	4b21      	ldr	r3, [pc, #132]	; (15068 <I2cWriteDataWait+0xc4>)
   14fe4:	4798      	blx	r3
   14fe6:	0003      	movs	r3, r0
   14fe8:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) {
   14fea:	68fb      	ldr	r3, [r7, #12]
   14fec:	2b00      	cmp	r3, #0
   14fee:	d12a      	bne.n	15046 <I2cWriteDataWait+0xa2>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   14ff0:	68bb      	ldr	r3, [r7, #8]
   14ff2:	683a      	ldr	r2, [r7, #0]
   14ff4:	0011      	movs	r1, r2
   14ff6:	0018      	movs	r0, r3
   14ff8:	4b1c      	ldr	r3, [pc, #112]	; (1506c <I2cWriteDataWait+0xc8>)
   14ffa:	4798      	blx	r3
   14ffc:	0003      	movs	r3, r0
   14ffe:	2b01      	cmp	r3, #1
   15000:	d111      	bne.n	15026 <I2cWriteDataWait+0x82>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   15002:	4b1b      	ldr	r3, [pc, #108]	; (15070 <I2cWriteDataWait+0xcc>)
   15004:	4798      	blx	r3
   15006:	1e03      	subs	r3, r0, #0
   15008:	d011      	beq.n	1502e <I2cWriteDataWait+0x8a>
            I2cSetTaskErrorStatus(false);
   1500a:	2000      	movs	r0, #0
   1500c:	4b19      	ldr	r3, [pc, #100]	; (15074 <I2cWriteDataWait+0xd0>)
   1500e:	4798      	blx	r3
            if (error != ERROR_NONE) {
   15010:	68fb      	ldr	r3, [r7, #12]
   15012:	2b00      	cmp	r3, #0
   15014:	d003      	beq.n	1501e <I2cWriteDataWait+0x7a>
                error = ERROR_I2C_HANG_RESET;
   15016:	2321      	movs	r3, #33	; 0x21
   15018:	425b      	negs	r3, r3
   1501a:	60fb      	str	r3, [r7, #12]
            } else {
                error = ERROR_ABORTED;
            }
            goto exitError0;
   1501c:	e014      	b.n	15048 <I2cWriteDataWait+0xa4>
                error = ERROR_ABORTED;
   1501e:	2303      	movs	r3, #3
   15020:	425b      	negs	r3, r3
   15022:	60fb      	str	r3, [r7, #12]
            goto exitError0;
   15024:	e010      	b.n	15048 <I2cWriteDataWait+0xa4>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   15026:	2303      	movs	r3, #3
   15028:	425b      	negs	r3, r3
   1502a:	60fb      	str	r3, [r7, #12]
        goto exitError0;
   1502c:	e00c      	b.n	15048 <I2cWriteDataWait+0xa4>
    }

    //---8. Release Mutex
    error |= I2cFreeMutex();
   1502e:	4b12      	ldr	r3, [pc, #72]	; (15078 <I2cWriteDataWait+0xd4>)
   15030:	4798      	blx	r3
   15032:	0002      	movs	r2, r0
   15034:	68fb      	ldr	r3, [r7, #12]
   15036:	4313      	orrs	r3, r2
   15038:	60fb      	str	r3, [r7, #12]
   1503a:	e002      	b.n	15042 <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   1503c:	46c0      	nop			; (mov r8, r8)
   1503e:	e000      	b.n	15042 <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   15040:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   15042:	68fb      	ldr	r3, [r7, #12]
   15044:	e007      	b.n	15056 <I2cWriteDataWait+0xb2>
        goto exitError0;
   15046:	46c0      	nop			; (mov r8, r8)

exitError0:
    error |= I2cFreeMutex();
   15048:	4b0b      	ldr	r3, [pc, #44]	; (15078 <I2cWriteDataWait+0xd4>)
   1504a:	4798      	blx	r3
   1504c:	0002      	movs	r2, r0
   1504e:	68fb      	ldr	r3, [r7, #12]
   15050:	4313      	orrs	r3, r2
   15052:	60fb      	str	r3, [r7, #12]
    // xSemaphoreGive(semHandle);
    return error;
   15054:	68fb      	ldr	r3, [r7, #12]
}
   15056:	0018      	movs	r0, r3
   15058:	46bd      	mov	sp, r7
   1505a:	b004      	add	sp, #16
   1505c:	bd80      	pop	{r7, pc}
   1505e:	46c0      	nop			; (mov r8, r8)
   15060:	00014f15 	.word	0x00014f15
   15064:	00014f4d 	.word	0x00014f4d
   15068:	00014ded 	.word	0x00014ded
   1506c:	0001c091 	.word	0x0001c091
   15070:	00014f71 	.word	0x00014f71
   15074:	00014f85 	.word	0x00014f85
   15078:	00014edd 	.word	0x00014edd

0001507c <I2cReadDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error. See ErrCodes.h
  * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!
  */
int32_t I2cReadDataWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime)
{
   1507c:	b580      	push	{r7, lr}
   1507e:	b086      	sub	sp, #24
   15080:	af00      	add	r7, sp, #0
   15082:	60f8      	str	r0, [r7, #12]
   15084:	60b9      	str	r1, [r7, #8]
   15086:	607a      	str	r2, [r7, #4]
    int32_t error = ERROR_NONE;
   15088:	2300      	movs	r3, #0
   1508a:	617b      	str	r3, [r7, #20]
    SemaphoreHandle_t semHandle = NULL;
   1508c:	2300      	movs	r3, #0
   1508e:	613b      	str	r3, [r7, #16]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   15090:	2396      	movs	r3, #150	; 0x96
   15092:	005b      	lsls	r3, r3, #1
   15094:	0018      	movs	r0, r3
   15096:	4b36      	ldr	r3, [pc, #216]	; (15170 <I2cReadDataWait+0xf4>)
   15098:	4798      	blx	r3
   1509a:	0003      	movs	r3, r0
   1509c:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   1509e:	697b      	ldr	r3, [r7, #20]
   150a0:	2b00      	cmp	r3, #0
   150a2:	d155      	bne.n	15150 <I2cReadDataWait+0xd4>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   150a4:	2310      	movs	r3, #16
   150a6:	18fb      	adds	r3, r7, r3
   150a8:	0018      	movs	r0, r3
   150aa:	4b32      	ldr	r3, [pc, #200]	; (15174 <I2cReadDataWait+0xf8>)
   150ac:	4798      	blx	r3
   150ae:	0003      	movs	r3, r0
   150b0:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   150b2:	697b      	ldr	r3, [r7, #20]
   150b4:	2b00      	cmp	r3, #0
   150b6:	d14d      	bne.n	15154 <I2cReadDataWait+0xd8>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   150b8:	68fb      	ldr	r3, [r7, #12]
   150ba:	0018      	movs	r0, r3
   150bc:	4b2e      	ldr	r3, [pc, #184]	; (15178 <I2cReadDataWait+0xfc>)
   150be:	4798      	blx	r3
   150c0:	0003      	movs	r3, r0
   150c2:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   150c4:	697b      	ldr	r3, [r7, #20]
   150c6:	2b00      	cmp	r3, #0
   150c8:	d147      	bne.n	1515a <I2cReadDataWait+0xde>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   150ca:	693b      	ldr	r3, [r7, #16]
   150cc:	687a      	ldr	r2, [r7, #4]
   150ce:	0011      	movs	r1, r2
   150d0:	0018      	movs	r0, r3
   150d2:	4b2a      	ldr	r3, [pc, #168]	; (1517c <I2cReadDataWait+0x100>)
   150d4:	4798      	blx	r3
   150d6:	0003      	movs	r3, r0
   150d8:	2b01      	cmp	r3, #1
   150da:	d118      	bne.n	1510e <I2cReadDataWait+0x92>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   150dc:	4b28      	ldr	r3, [pc, #160]	; (15180 <I2cReadDataWait+0x104>)
   150de:	4798      	blx	r3
   150e0:	1e03      	subs	r3, r0, #0
   150e2:	d006      	beq.n	150f2 <I2cReadDataWait+0x76>
            I2cSetTaskErrorStatus(false);
   150e4:	2000      	movs	r0, #0
   150e6:	4b27      	ldr	r3, [pc, #156]	; (15184 <I2cReadDataWait+0x108>)
   150e8:	4798      	blx	r3
            error = ERROR_ABORTED;
   150ea:	2303      	movs	r3, #3
   150ec:	425b      	negs	r3, r3
   150ee:	617b      	str	r3, [r7, #20]
            goto exitError0;
   150f0:	e034      	b.n	1515c <I2cReadDataWait+0xe0>
        }
        vTaskDelay(delay);
   150f2:	68bb      	ldr	r3, [r7, #8]
   150f4:	0018      	movs	r0, r3
   150f6:	4b24      	ldr	r3, [pc, #144]	; (15188 <I2cReadDataWait+0x10c>)
   150f8:	4798      	blx	r3
        error = ERR_TIMEOUT;
        goto exitError0;
    }

    //---6. Initiate Read data
    error = I2cReadData(data);
   150fa:	68fb      	ldr	r3, [r7, #12]
   150fc:	0018      	movs	r0, r3
   150fe:	4b23      	ldr	r3, [pc, #140]	; (1518c <I2cReadDataWait+0x110>)
   15100:	4798      	blx	r3
   15102:	0003      	movs	r3, r0
   15104:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   15106:	697b      	ldr	r3, [r7, #20]
   15108:	2b00      	cmp	r3, #0
   1510a:	d004      	beq.n	15116 <I2cReadDataWait+0x9a>
        goto exitError0;
   1510c:	e026      	b.n	1515c <I2cReadDataWait+0xe0>
        error = ERR_TIMEOUT;
   1510e:	2303      	movs	r3, #3
   15110:	425b      	negs	r3, r3
   15112:	617b      	str	r3, [r7, #20]
        goto exitError0;
   15114:	e022      	b.n	1515c <I2cReadDataWait+0xe0>
    }
    //---7. Wait for notification
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   15116:	693b      	ldr	r3, [r7, #16]
   15118:	687a      	ldr	r2, [r7, #4]
   1511a:	0011      	movs	r1, r2
   1511c:	0018      	movs	r0, r3
   1511e:	4b17      	ldr	r3, [pc, #92]	; (1517c <I2cReadDataWait+0x100>)
   15120:	4798      	blx	r3
   15122:	0003      	movs	r3, r0
   15124:	2b01      	cmp	r3, #1
   15126:	d10a      	bne.n	1513e <I2cReadDataWait+0xc2>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   15128:	4b15      	ldr	r3, [pc, #84]	; (15180 <I2cReadDataWait+0x104>)
   1512a:	4798      	blx	r3
   1512c:	1e03      	subs	r3, r0, #0
   1512e:	d00a      	beq.n	15146 <I2cReadDataWait+0xca>
            I2cSetTaskErrorStatus(false);
   15130:	2000      	movs	r0, #0
   15132:	4b14      	ldr	r3, [pc, #80]	; (15184 <I2cReadDataWait+0x108>)
   15134:	4798      	blx	r3
            error = ERROR_ABORTED;
   15136:	2303      	movs	r3, #3
   15138:	425b      	negs	r3, r3
   1513a:	617b      	str	r3, [r7, #20]
            goto exitError0;
   1513c:	e00e      	b.n	1515c <I2cReadDataWait+0xe0>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   1513e:	2303      	movs	r3, #3
   15140:	425b      	negs	r3, r3
   15142:	617b      	str	r3, [r7, #20]
        goto exitError0;
   15144:	e00a      	b.n	1515c <I2cReadDataWait+0xe0>
    }

    //---8. Release Mutex
    error = I2cFreeMutex();
   15146:	4b12      	ldr	r3, [pc, #72]	; (15190 <I2cReadDataWait+0x114>)
   15148:	4798      	blx	r3
   1514a:	0003      	movs	r3, r0
   1514c:	617b      	str	r3, [r7, #20]
   1514e:	e002      	b.n	15156 <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   15150:	46c0      	nop			; (mov r8, r8)
   15152:	e000      	b.n	15156 <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   15154:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   15156:	697b      	ldr	r3, [r7, #20]
   15158:	e005      	b.n	15166 <I2cReadDataWait+0xea>
        goto exitError0;
   1515a:	46c0      	nop			; (mov r8, r8)

exitError0:
    error = I2cFreeMutex();
   1515c:	4b0c      	ldr	r3, [pc, #48]	; (15190 <I2cReadDataWait+0x114>)
   1515e:	4798      	blx	r3
   15160:	0003      	movs	r3, r0
   15162:	617b      	str	r3, [r7, #20]
    // xSemaphoreGive(semHandle);
    return error;
   15164:	697b      	ldr	r3, [r7, #20]
}
   15166:	0018      	movs	r0, r3
   15168:	46bd      	mov	sp, r7
   1516a:	b006      	add	sp, #24
   1516c:	bd80      	pop	{r7, pc}
   1516e:	46c0      	nop			; (mov r8, r8)
   15170:	00014f15 	.word	0x00014f15
   15174:	00014f4d 	.word	0x00014f4d
   15178:	00014ded 	.word	0x00014ded
   1517c:	0001c091 	.word	0x0001c091
   15180:	00014f71 	.word	0x00014f71
   15184:	00014f85 	.word	0x00014f85
   15188:	0001cde5 	.word	0x0001cde5
   1518c:	00014e65 	.word	0x00014e65
   15190:	00014edd 	.word	0x00014edd

00015194 <lsm6dso_read_reg>:
  *
  */
int32_t lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
   15194:	b5b0      	push	{r4, r5, r7, lr}
   15196:	b086      	sub	sp, #24
   15198:	af00      	add	r7, sp, #0
   1519a:	60f8      	str	r0, [r7, #12]
   1519c:	0008      	movs	r0, r1
   1519e:	607a      	str	r2, [r7, #4]
   151a0:	0019      	movs	r1, r3
   151a2:	230b      	movs	r3, #11
   151a4:	18fb      	adds	r3, r7, r3
   151a6:	1c02      	adds	r2, r0, #0
   151a8:	701a      	strb	r2, [r3, #0]
   151aa:	2308      	movs	r3, #8
   151ac:	18fb      	adds	r3, r7, r3
   151ae:	1c0a      	adds	r2, r1, #0
   151b0:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
   151b2:	68fb      	ldr	r3, [r7, #12]
   151b4:	685c      	ldr	r4, [r3, #4]
   151b6:	68fb      	ldr	r3, [r7, #12]
   151b8:	6898      	ldr	r0, [r3, #8]
   151ba:	2308      	movs	r3, #8
   151bc:	18fb      	adds	r3, r7, r3
   151be:	881d      	ldrh	r5, [r3, #0]
   151c0:	687a      	ldr	r2, [r7, #4]
   151c2:	230b      	movs	r3, #11
   151c4:	18fb      	adds	r3, r7, r3
   151c6:	7819      	ldrb	r1, [r3, #0]
   151c8:	002b      	movs	r3, r5
   151ca:	47a0      	blx	r4
   151cc:	0003      	movs	r3, r0
   151ce:	617b      	str	r3, [r7, #20]

  return ret;
   151d0:	697b      	ldr	r3, [r7, #20]
}
   151d2:	0018      	movs	r0, r3
   151d4:	46bd      	mov	sp, r7
   151d6:	b006      	add	sp, #24
   151d8:	bdb0      	pop	{r4, r5, r7, pc}

000151da <lsm6dso_write_reg>:
  *
  */
int32_t lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
   151da:	b5b0      	push	{r4, r5, r7, lr}
   151dc:	b086      	sub	sp, #24
   151de:	af00      	add	r7, sp, #0
   151e0:	60f8      	str	r0, [r7, #12]
   151e2:	0008      	movs	r0, r1
   151e4:	607a      	str	r2, [r7, #4]
   151e6:	0019      	movs	r1, r3
   151e8:	230b      	movs	r3, #11
   151ea:	18fb      	adds	r3, r7, r3
   151ec:	1c02      	adds	r2, r0, #0
   151ee:	701a      	strb	r2, [r3, #0]
   151f0:	2308      	movs	r3, #8
   151f2:	18fb      	adds	r3, r7, r3
   151f4:	1c0a      	adds	r2, r1, #0
   151f6:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
   151f8:	68fb      	ldr	r3, [r7, #12]
   151fa:	681c      	ldr	r4, [r3, #0]
   151fc:	68fb      	ldr	r3, [r7, #12]
   151fe:	6898      	ldr	r0, [r3, #8]
   15200:	2308      	movs	r3, #8
   15202:	18fb      	adds	r3, r7, r3
   15204:	881d      	ldrh	r5, [r3, #0]
   15206:	687a      	ldr	r2, [r7, #4]
   15208:	230b      	movs	r3, #11
   1520a:	18fb      	adds	r3, r7, r3
   1520c:	7819      	ldrb	r1, [r3, #0]
   1520e:	002b      	movs	r3, r5
   15210:	47a0      	blx	r4
   15212:	0003      	movs	r3, r0
   15214:	617b      	str	r3, [r7, #20]

  return ret;
   15216:	697b      	ldr	r3, [r7, #20]
}
   15218:	0018      	movs	r0, r3
   1521a:	46bd      	mov	sp, r7
   1521c:	b006      	add	sp, #24
   1521e:	bdb0      	pop	{r4, r5, r7, pc}

00015220 <lsm6dso_from_fs2_to_mg>:
  * @brief     These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lsm6dso_from_fs2_to_mg(int16_t lsb)
{
   15220:	b580      	push	{r7, lr}
   15222:	b082      	sub	sp, #8
   15224:	af00      	add	r7, sp, #0
   15226:	0002      	movs	r2, r0
   15228:	1dbb      	adds	r3, r7, #6
   1522a:	801a      	strh	r2, [r3, #0]
  return ((float_t)lsb) * 0.061f;
   1522c:	1dbb      	adds	r3, r7, #6
   1522e:	2200      	movs	r2, #0
   15230:	5e9a      	ldrsh	r2, [r3, r2]
   15232:	4b06      	ldr	r3, [pc, #24]	; (1524c <lsm6dso_from_fs2_to_mg+0x2c>)
   15234:	0010      	movs	r0, r2
   15236:	4798      	blx	r3
   15238:	1c02      	adds	r2, r0, #0
   1523a:	4b05      	ldr	r3, [pc, #20]	; (15250 <lsm6dso_from_fs2_to_mg+0x30>)
   1523c:	4905      	ldr	r1, [pc, #20]	; (15254 <lsm6dso_from_fs2_to_mg+0x34>)
   1523e:	1c10      	adds	r0, r2, #0
   15240:	4798      	blx	r3
   15242:	1c03      	adds	r3, r0, #0
}
   15244:	1c18      	adds	r0, r3, #0
   15246:	46bd      	mov	sp, r7
   15248:	b002      	add	sp, #8
   1524a:	bd80      	pop	{r7, pc}
   1524c:	00033ced 	.word	0x00033ced
   15250:	00033a6d 	.word	0x00033a6d
   15254:	3d79db23 	.word	0x3d79db23

00015258 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
   15258:	b590      	push	{r4, r7, lr}
   1525a:	b085      	sub	sp, #20
   1525c:	af00      	add	r7, sp, #0
   1525e:	6078      	str	r0, [r7, #4]
   15260:	000a      	movs	r2, r1
   15262:	1cfb      	adds	r3, r7, #3
   15264:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   15266:	2308      	movs	r3, #8
   15268:	18fa      	adds	r2, r7, r3
   1526a:	6878      	ldr	r0, [r7, #4]
   1526c:	2301      	movs	r3, #1
   1526e:	2110      	movs	r1, #16
   15270:	4c12      	ldr	r4, [pc, #72]	; (152bc <lsm6dso_xl_full_scale_set+0x64>)
   15272:	47a0      	blx	r4
   15274:	0003      	movs	r3, r0
   15276:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15278:	68fb      	ldr	r3, [r7, #12]
   1527a:	2b00      	cmp	r3, #0
   1527c:	d119      	bne.n	152b2 <lsm6dso_xl_full_scale_set+0x5a>
  {
    reg.fs_xl = (uint8_t) val;
   1527e:	1cfb      	adds	r3, r7, #3
   15280:	781b      	ldrb	r3, [r3, #0]
   15282:	2203      	movs	r2, #3
   15284:	4013      	ands	r3, r2
   15286:	b2da      	uxtb	r2, r3
   15288:	2308      	movs	r3, #8
   1528a:	18fb      	adds	r3, r7, r3
   1528c:	2103      	movs	r1, #3
   1528e:	400a      	ands	r2, r1
   15290:	0090      	lsls	r0, r2, #2
   15292:	781a      	ldrb	r2, [r3, #0]
   15294:	210c      	movs	r1, #12
   15296:	438a      	bics	r2, r1
   15298:	1c11      	adds	r1, r2, #0
   1529a:	1c02      	adds	r2, r0, #0
   1529c:	430a      	orrs	r2, r1
   1529e:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   152a0:	2308      	movs	r3, #8
   152a2:	18fa      	adds	r2, r7, r3
   152a4:	6878      	ldr	r0, [r7, #4]
   152a6:	2301      	movs	r3, #1
   152a8:	2110      	movs	r1, #16
   152aa:	4c05      	ldr	r4, [pc, #20]	; (152c0 <lsm6dso_xl_full_scale_set+0x68>)
   152ac:	47a0      	blx	r4
   152ae:	0003      	movs	r3, r0
   152b0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   152b2:	68fb      	ldr	r3, [r7, #12]
}
   152b4:	0018      	movs	r0, r3
   152b6:	46bd      	mov	sp, r7
   152b8:	b005      	add	sp, #20
   152ba:	bd90      	pop	{r4, r7, pc}
   152bc:	00015195 	.word	0x00015195
   152c0:	000151db 	.word	0x000151db

000152c4 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
   152c4:	b590      	push	{r4, r7, lr}
   152c6:	b087      	sub	sp, #28
   152c8:	af00      	add	r7, sp, #0
   152ca:	6078      	str	r0, [r7, #4]
   152cc:	000a      	movs	r2, r1
   152ce:	1cfb      	adds	r3, r7, #3
   152d0:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_xl_t odr_xl =  val;
   152d2:	2317      	movs	r3, #23
   152d4:	18fb      	adds	r3, r7, r3
   152d6:	1cfa      	adds	r2, r7, #3
   152d8:	7812      	ldrb	r2, [r2, #0]
   152da:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
   152dc:	230c      	movs	r3, #12
   152de:	18fa      	adds	r2, r7, r3
   152e0:	687b      	ldr	r3, [r7, #4]
   152e2:	0011      	movs	r1, r2
   152e4:	0018      	movs	r0, r3
   152e6:	4ba4      	ldr	r3, [pc, #656]	; (15578 <lsm6dso_xl_data_rate_set+0x2b4>)
   152e8:	4798      	blx	r3
   152ea:	0003      	movs	r3, r0
   152ec:	613b      	str	r3, [r7, #16]

  if (ret == 0)
   152ee:	693b      	ldr	r3, [r7, #16]
   152f0:	2b00      	cmp	r3, #0
   152f2:	d000      	beq.n	152f6 <lsm6dso_xl_data_rate_set+0x32>
   152f4:	e113      	b.n	1551e <lsm6dso_xl_data_rate_set+0x25a>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   152f6:	230c      	movs	r3, #12
   152f8:	18fb      	adds	r3, r7, r3
   152fa:	781b      	ldrb	r3, [r3, #0]
   152fc:	07db      	lsls	r3, r3, #31
   152fe:	0fdb      	lsrs	r3, r3, #31
   15300:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   15302:	230c      	movs	r3, #12
   15304:	18fb      	adds	r3, r7, r3
   15306:	781b      	ldrb	r3, [r3, #0]
   15308:	079b      	lsls	r3, r3, #30
   1530a:	0fdb      	lsrs	r3, r3, #31
   1530c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   1530e:	4313      	orrs	r3, r2
   15310:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   15312:	230c      	movs	r3, #12
   15314:	18fb      	adds	r3, r7, r3
   15316:	781b      	ldrb	r3, [r3, #0]
   15318:	075b      	lsls	r3, r3, #29
   1531a:	0fdb      	lsrs	r3, r3, #31
   1531c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   1531e:	4313      	orrs	r3, r2
   15320:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   15322:	230c      	movs	r3, #12
   15324:	18fb      	adds	r3, r7, r3
   15326:	781b      	ldrb	r3, [r3, #0]
   15328:	071b      	lsls	r3, r3, #28
   1532a:	0fdb      	lsrs	r3, r3, #31
   1532c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   1532e:	4313      	orrs	r3, r2
   15330:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   15332:	230c      	movs	r3, #12
   15334:	18fb      	adds	r3, r7, r3
   15336:	781b      	ldrb	r3, [r3, #0]
   15338:	06db      	lsls	r3, r3, #27
   1533a:	0fdb      	lsrs	r3, r3, #31
   1533c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   1533e:	4313      	orrs	r3, r2
   15340:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   15342:	230c      	movs	r3, #12
   15344:	18fb      	adds	r3, r7, r3
   15346:	781b      	ldrb	r3, [r3, #0]
   15348:	069b      	lsls	r3, r3, #26
   1534a:	0fdb      	lsrs	r3, r3, #31
   1534c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   1534e:	4313      	orrs	r3, r2
   15350:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   15352:	230c      	movs	r3, #12
   15354:	18fb      	adds	r3, r7, r3
   15356:	781b      	ldrb	r3, [r3, #0]
   15358:	065b      	lsls	r3, r3, #25
   1535a:	0fdb      	lsrs	r3, r3, #31
   1535c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   1535e:	4313      	orrs	r3, r2
   15360:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   15362:	230c      	movs	r3, #12
   15364:	18fb      	adds	r3, r7, r3
   15366:	781b      	ldrb	r3, [r3, #0]
   15368:	061b      	lsls	r3, r3, #24
   1536a:	0fdb      	lsrs	r3, r3, #31
   1536c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   1536e:	4313      	orrs	r3, r2
   15370:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   15372:	230c      	movs	r3, #12
   15374:	18fb      	adds	r3, r7, r3
   15376:	785b      	ldrb	r3, [r3, #1]
   15378:	07db      	lsls	r3, r3, #31
   1537a:	0fdb      	lsrs	r3, r3, #31
   1537c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   1537e:	4313      	orrs	r3, r2
   15380:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   15382:	230c      	movs	r3, #12
   15384:	18fb      	adds	r3, r7, r3
   15386:	785b      	ldrb	r3, [r3, #1]
   15388:	079b      	lsls	r3, r3, #30
   1538a:	0fdb      	lsrs	r3, r3, #31
   1538c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   1538e:	4313      	orrs	r3, r2
   15390:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   15392:	230c      	movs	r3, #12
   15394:	18fb      	adds	r3, r7, r3
   15396:	785b      	ldrb	r3, [r3, #1]
   15398:	075b      	lsls	r3, r3, #29
   1539a:	0fdb      	lsrs	r3, r3, #31
   1539c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   1539e:	4313      	orrs	r3, r2
   153a0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   153a2:	230c      	movs	r3, #12
   153a4:	18fb      	adds	r3, r7, r3
   153a6:	785b      	ldrb	r3, [r3, #1]
   153a8:	071b      	lsls	r3, r3, #28
   153aa:	0fdb      	lsrs	r3, r3, #31
   153ac:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   153ae:	4313      	orrs	r3, r2
   153b0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   153b2:	230c      	movs	r3, #12
   153b4:	18fb      	adds	r3, r7, r3
   153b6:	785b      	ldrb	r3, [r3, #1]
   153b8:	06db      	lsls	r3, r3, #27
   153ba:	0fdb      	lsrs	r3, r3, #31
   153bc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   153be:	4313      	orrs	r3, r2
   153c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   153c2:	230c      	movs	r3, #12
   153c4:	18fb      	adds	r3, r7, r3
   153c6:	785b      	ldrb	r3, [r3, #1]
   153c8:	069b      	lsls	r3, r3, #26
   153ca:	0fdb      	lsrs	r3, r3, #31
   153cc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   153ce:	4313      	orrs	r3, r2
   153d0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   153d2:	230c      	movs	r3, #12
   153d4:	18fb      	adds	r3, r7, r3
   153d6:	785b      	ldrb	r3, [r3, #1]
   153d8:	065b      	lsls	r3, r3, #25
   153da:	0fdb      	lsrs	r3, r3, #31
   153dc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   153de:	4313      	orrs	r3, r2
   153e0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
   153e2:	230c      	movs	r3, #12
   153e4:	18fb      	adds	r3, r7, r3
   153e6:	785b      	ldrb	r3, [r3, #1]
   153e8:	061b      	lsls	r3, r3, #24
   153ea:	0fdb      	lsrs	r3, r3, #31
   153ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   153ee:	4313      	orrs	r3, r2
   153f0:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   153f2:	2b01      	cmp	r3, #1
   153f4:	d000      	beq.n	153f8 <lsm6dso_xl_data_rate_set+0x134>
   153f6:	e092      	b.n	1551e <lsm6dso_xl_data_rate_set+0x25a>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
   153f8:	230b      	movs	r3, #11
   153fa:	18fa      	adds	r2, r7, r3
   153fc:	687b      	ldr	r3, [r7, #4]
   153fe:	0011      	movs	r1, r2
   15400:	0018      	movs	r0, r3
   15402:	4b5e      	ldr	r3, [pc, #376]	; (1557c <lsm6dso_xl_data_rate_set+0x2b8>)
   15404:	4798      	blx	r3
   15406:	0003      	movs	r3, r0
   15408:	613b      	str	r3, [r7, #16]

      if (ret == 0)
   1540a:	693b      	ldr	r3, [r7, #16]
   1540c:	2b00      	cmp	r3, #0
   1540e:	d000      	beq.n	15412 <lsm6dso_xl_data_rate_set+0x14e>
   15410:	e085      	b.n	1551e <lsm6dso_xl_data_rate_set+0x25a>
      {
        switch (fsm_odr)
   15412:	230b      	movs	r3, #11
   15414:	18fb      	adds	r3, r7, r3
   15416:	781b      	ldrb	r3, [r3, #0]
   15418:	2b01      	cmp	r3, #1
   1541a:	d017      	beq.n	1544c <lsm6dso_xl_data_rate_set+0x188>
   1541c:	dc02      	bgt.n	15424 <lsm6dso_xl_data_rate_set+0x160>
   1541e:	2b00      	cmp	r3, #0
   15420:	d005      	beq.n	1542e <lsm6dso_xl_data_rate_set+0x16a>
   15422:	e076      	b.n	15512 <lsm6dso_xl_data_rate_set+0x24e>
   15424:	2b02      	cmp	r3, #2
   15426:	d029      	beq.n	1547c <lsm6dso_xl_data_rate_set+0x1b8>
   15428:	2b03      	cmp	r3, #3
   1542a:	d048      	beq.n	154be <lsm6dso_xl_data_rate_set+0x1fa>
   1542c:	e071      	b.n	15512 <lsm6dso_xl_data_rate_set+0x24e>
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
   1542e:	1cfb      	adds	r3, r7, #3
   15430:	781b      	ldrb	r3, [r3, #0]
   15432:	2b00      	cmp	r3, #0
   15434:	d104      	bne.n	15440 <lsm6dso_xl_data_rate_set+0x17c>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
   15436:	2317      	movs	r3, #23
   15438:	18fb      	adds	r3, r7, r3
   1543a:	2201      	movs	r2, #1
   1543c:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   1543e:	e06e      	b.n	1551e <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   15440:	2317      	movs	r3, #23
   15442:	18fb      	adds	r3, r7, r3
   15444:	1cfa      	adds	r2, r7, #3
   15446:	7812      	ldrb	r2, [r2, #0]
   15448:	701a      	strb	r2, [r3, #0]
            break;
   1544a:	e068      	b.n	1551e <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   1544c:	1cfb      	adds	r3, r7, #3
   1544e:	781b      	ldrb	r3, [r3, #0]
   15450:	2b00      	cmp	r3, #0
   15452:	d104      	bne.n	1545e <lsm6dso_xl_data_rate_set+0x19a>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
   15454:	2317      	movs	r3, #23
   15456:	18fb      	adds	r3, r7, r3
   15458:	2202      	movs	r2, #2
   1545a:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   1545c:	e05f      	b.n	1551e <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   1545e:	1cfb      	adds	r3, r7, #3
   15460:	781b      	ldrb	r3, [r3, #0]
   15462:	2b01      	cmp	r3, #1
   15464:	d104      	bne.n	15470 <lsm6dso_xl_data_rate_set+0x1ac>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
   15466:	2317      	movs	r3, #23
   15468:	18fb      	adds	r3, r7, r3
   1546a:	2202      	movs	r2, #2
   1546c:	701a      	strb	r2, [r3, #0]
            break;
   1546e:	e056      	b.n	1551e <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   15470:	2317      	movs	r3, #23
   15472:	18fb      	adds	r3, r7, r3
   15474:	1cfa      	adds	r2, r7, #3
   15476:	7812      	ldrb	r2, [r2, #0]
   15478:	701a      	strb	r2, [r3, #0]
            break;
   1547a:	e050      	b.n	1551e <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   1547c:	1cfb      	adds	r3, r7, #3
   1547e:	781b      	ldrb	r3, [r3, #0]
   15480:	2b00      	cmp	r3, #0
   15482:	d104      	bne.n	1548e <lsm6dso_xl_data_rate_set+0x1ca>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   15484:	2317      	movs	r3, #23
   15486:	18fb      	adds	r3, r7, r3
   15488:	2203      	movs	r2, #3
   1548a:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   1548c:	e047      	b.n	1551e <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   1548e:	1cfb      	adds	r3, r7, #3
   15490:	781b      	ldrb	r3, [r3, #0]
   15492:	2b01      	cmp	r3, #1
   15494:	d104      	bne.n	154a0 <lsm6dso_xl_data_rate_set+0x1dc>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   15496:	2317      	movs	r3, #23
   15498:	18fb      	adds	r3, r7, r3
   1549a:	2203      	movs	r2, #3
   1549c:	701a      	strb	r2, [r3, #0]
            break;
   1549e:	e03e      	b.n	1551e <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_26Hz)
   154a0:	1cfb      	adds	r3, r7, #3
   154a2:	781b      	ldrb	r3, [r3, #0]
   154a4:	2b02      	cmp	r3, #2
   154a6:	d104      	bne.n	154b2 <lsm6dso_xl_data_rate_set+0x1ee>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   154a8:	2317      	movs	r3, #23
   154aa:	18fb      	adds	r3, r7, r3
   154ac:	2203      	movs	r2, #3
   154ae:	701a      	strb	r2, [r3, #0]
            break;
   154b0:	e035      	b.n	1551e <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   154b2:	2317      	movs	r3, #23
   154b4:	18fb      	adds	r3, r7, r3
   154b6:	1cfa      	adds	r2, r7, #3
   154b8:	7812      	ldrb	r2, [r2, #0]
   154ba:	701a      	strb	r2, [r3, #0]
            break;
   154bc:	e02f      	b.n	1551e <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   154be:	1cfb      	adds	r3, r7, #3
   154c0:	781b      	ldrb	r3, [r3, #0]
   154c2:	2b00      	cmp	r3, #0
   154c4:	d104      	bne.n	154d0 <lsm6dso_xl_data_rate_set+0x20c>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   154c6:	2317      	movs	r3, #23
   154c8:	18fb      	adds	r3, r7, r3
   154ca:	2204      	movs	r2, #4
   154cc:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   154ce:	e026      	b.n	1551e <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   154d0:	1cfb      	adds	r3, r7, #3
   154d2:	781b      	ldrb	r3, [r3, #0]
   154d4:	2b01      	cmp	r3, #1
   154d6:	d104      	bne.n	154e2 <lsm6dso_xl_data_rate_set+0x21e>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   154d8:	2317      	movs	r3, #23
   154da:	18fb      	adds	r3, r7, r3
   154dc:	2204      	movs	r2, #4
   154de:	701a      	strb	r2, [r3, #0]
            break;
   154e0:	e01d      	b.n	1551e <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_26Hz)
   154e2:	1cfb      	adds	r3, r7, #3
   154e4:	781b      	ldrb	r3, [r3, #0]
   154e6:	2b02      	cmp	r3, #2
   154e8:	d104      	bne.n	154f4 <lsm6dso_xl_data_rate_set+0x230>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   154ea:	2317      	movs	r3, #23
   154ec:	18fb      	adds	r3, r7, r3
   154ee:	2204      	movs	r2, #4
   154f0:	701a      	strb	r2, [r3, #0]
            break;
   154f2:	e014      	b.n	1551e <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_52Hz)
   154f4:	1cfb      	adds	r3, r7, #3
   154f6:	781b      	ldrb	r3, [r3, #0]
   154f8:	2b03      	cmp	r3, #3
   154fa:	d104      	bne.n	15506 <lsm6dso_xl_data_rate_set+0x242>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   154fc:	2317      	movs	r3, #23
   154fe:	18fb      	adds	r3, r7, r3
   15500:	2204      	movs	r2, #4
   15502:	701a      	strb	r2, [r3, #0]
            break;
   15504:	e00b      	b.n	1551e <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   15506:	2317      	movs	r3, #23
   15508:	18fb      	adds	r3, r7, r3
   1550a:	1cfa      	adds	r2, r7, #3
   1550c:	7812      	ldrb	r2, [r2, #0]
   1550e:	701a      	strb	r2, [r3, #0]
            break;
   15510:	e005      	b.n	1551e <lsm6dso_xl_data_rate_set+0x25a>

          default:
            odr_xl = val;
   15512:	2317      	movs	r3, #23
   15514:	18fb      	adds	r3, r7, r3
   15516:	1cfa      	adds	r2, r7, #3
   15518:	7812      	ldrb	r2, [r2, #0]
   1551a:	701a      	strb	r2, [r3, #0]
            break;
   1551c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
   1551e:	693b      	ldr	r3, [r7, #16]
   15520:	2b00      	cmp	r3, #0
   15522:	d108      	bne.n	15536 <lsm6dso_xl_data_rate_set+0x272>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   15524:	2308      	movs	r3, #8
   15526:	18fa      	adds	r2, r7, r3
   15528:	6878      	ldr	r0, [r7, #4]
   1552a:	2301      	movs	r3, #1
   1552c:	2110      	movs	r1, #16
   1552e:	4c14      	ldr	r4, [pc, #80]	; (15580 <lsm6dso_xl_data_rate_set+0x2bc>)
   15530:	47a0      	blx	r4
   15532:	0003      	movs	r3, r0
   15534:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0)
   15536:	693b      	ldr	r3, [r7, #16]
   15538:	2b00      	cmp	r3, #0
   1553a:	d118      	bne.n	1556e <lsm6dso_xl_data_rate_set+0x2aa>
  {
    reg.odr_xl = (uint8_t) odr_xl;
   1553c:	2317      	movs	r3, #23
   1553e:	18fb      	adds	r3, r7, r3
   15540:	781b      	ldrb	r3, [r3, #0]
   15542:	220f      	movs	r2, #15
   15544:	4013      	ands	r3, r2
   15546:	b2da      	uxtb	r2, r3
   15548:	2308      	movs	r3, #8
   1554a:	18fb      	adds	r3, r7, r3
   1554c:	0110      	lsls	r0, r2, #4
   1554e:	781a      	ldrb	r2, [r3, #0]
   15550:	210f      	movs	r1, #15
   15552:	400a      	ands	r2, r1
   15554:	1c11      	adds	r1, r2, #0
   15556:	1c02      	adds	r2, r0, #0
   15558:	430a      	orrs	r2, r1
   1555a:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   1555c:	2308      	movs	r3, #8
   1555e:	18fa      	adds	r2, r7, r3
   15560:	6878      	ldr	r0, [r7, #4]
   15562:	2301      	movs	r3, #1
   15564:	2110      	movs	r1, #16
   15566:	4c07      	ldr	r4, [pc, #28]	; (15584 <lsm6dso_xl_data_rate_set+0x2c0>)
   15568:	47a0      	blx	r4
   1556a:	0003      	movs	r3, r0
   1556c:	613b      	str	r3, [r7, #16]
  }

  return ret;
   1556e:	693b      	ldr	r3, [r7, #16]
}
   15570:	0018      	movs	r0, r3
   15572:	46bd      	mov	sp, r7
   15574:	b007      	add	sp, #28
   15576:	bd90      	pop	{r4, r7, pc}
   15578:	00015da1 	.word	0x00015da1
   1557c:	00015df5 	.word	0x00015df5
   15580:	00015195 	.word	0x00015195
   15584:	000151db 	.word	0x000151db

00015588 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
   15588:	b590      	push	{r4, r7, lr}
   1558a:	b085      	sub	sp, #20
   1558c:	af00      	add	r7, sp, #0
   1558e:	6078      	str	r0, [r7, #4]
   15590:	000a      	movs	r2, r1
   15592:	1cfb      	adds	r3, r7, #3
   15594:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   15596:	2308      	movs	r3, #8
   15598:	18fa      	adds	r2, r7, r3
   1559a:	6878      	ldr	r0, [r7, #4]
   1559c:	2301      	movs	r3, #1
   1559e:	2111      	movs	r1, #17
   155a0:	4c12      	ldr	r4, [pc, #72]	; (155ec <lsm6dso_gy_full_scale_set+0x64>)
   155a2:	47a0      	blx	r4
   155a4:	0003      	movs	r3, r0
   155a6:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   155a8:	68fb      	ldr	r3, [r7, #12]
   155aa:	2b00      	cmp	r3, #0
   155ac:	d119      	bne.n	155e2 <lsm6dso_gy_full_scale_set+0x5a>
  {
    reg.fs_g = (uint8_t) val;
   155ae:	1cfb      	adds	r3, r7, #3
   155b0:	781b      	ldrb	r3, [r3, #0]
   155b2:	2207      	movs	r2, #7
   155b4:	4013      	ands	r3, r2
   155b6:	b2da      	uxtb	r2, r3
   155b8:	2308      	movs	r3, #8
   155ba:	18fb      	adds	r3, r7, r3
   155bc:	2107      	movs	r1, #7
   155be:	400a      	ands	r2, r1
   155c0:	1890      	adds	r0, r2, r2
   155c2:	781a      	ldrb	r2, [r3, #0]
   155c4:	210e      	movs	r1, #14
   155c6:	438a      	bics	r2, r1
   155c8:	1c11      	adds	r1, r2, #0
   155ca:	1c02      	adds	r2, r0, #0
   155cc:	430a      	orrs	r2, r1
   155ce:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   155d0:	2308      	movs	r3, #8
   155d2:	18fa      	adds	r2, r7, r3
   155d4:	6878      	ldr	r0, [r7, #4]
   155d6:	2301      	movs	r3, #1
   155d8:	2111      	movs	r1, #17
   155da:	4c05      	ldr	r4, [pc, #20]	; (155f0 <lsm6dso_gy_full_scale_set+0x68>)
   155dc:	47a0      	blx	r4
   155de:	0003      	movs	r3, r0
   155e0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   155e2:	68fb      	ldr	r3, [r7, #12]
}
   155e4:	0018      	movs	r0, r3
   155e6:	46bd      	mov	sp, r7
   155e8:	b005      	add	sp, #20
   155ea:	bd90      	pop	{r4, r7, pc}
   155ec:	00015195 	.word	0x00015195
   155f0:	000151db 	.word	0x000151db

000155f4 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
   155f4:	b590      	push	{r4, r7, lr}
   155f6:	b087      	sub	sp, #28
   155f8:	af00      	add	r7, sp, #0
   155fa:	6078      	str	r0, [r7, #4]
   155fc:	000a      	movs	r2, r1
   155fe:	1cfb      	adds	r3, r7, #3
   15600:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_g_t odr_gy =  val;
   15602:	2317      	movs	r3, #23
   15604:	18fb      	adds	r3, r7, r3
   15606:	1cfa      	adds	r2, r7, #3
   15608:	7812      	ldrb	r2, [r2, #0]
   1560a:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
   1560c:	230c      	movs	r3, #12
   1560e:	18fa      	adds	r2, r7, r3
   15610:	687b      	ldr	r3, [r7, #4]
   15612:	0011      	movs	r1, r2
   15614:	0018      	movs	r0, r3
   15616:	4ba4      	ldr	r3, [pc, #656]	; (158a8 <lsm6dso_gy_data_rate_set+0x2b4>)
   15618:	4798      	blx	r3
   1561a:	0003      	movs	r3, r0
   1561c:	613b      	str	r3, [r7, #16]

  if (ret == 0)
   1561e:	693b      	ldr	r3, [r7, #16]
   15620:	2b00      	cmp	r3, #0
   15622:	d000      	beq.n	15626 <lsm6dso_gy_data_rate_set+0x32>
   15624:	e113      	b.n	1584e <lsm6dso_gy_data_rate_set+0x25a>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   15626:	230c      	movs	r3, #12
   15628:	18fb      	adds	r3, r7, r3
   1562a:	781b      	ldrb	r3, [r3, #0]
   1562c:	07db      	lsls	r3, r3, #31
   1562e:	0fdb      	lsrs	r3, r3, #31
   15630:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   15632:	230c      	movs	r3, #12
   15634:	18fb      	adds	r3, r7, r3
   15636:	781b      	ldrb	r3, [r3, #0]
   15638:	079b      	lsls	r3, r3, #30
   1563a:	0fdb      	lsrs	r3, r3, #31
   1563c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   1563e:	4313      	orrs	r3, r2
   15640:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   15642:	230c      	movs	r3, #12
   15644:	18fb      	adds	r3, r7, r3
   15646:	781b      	ldrb	r3, [r3, #0]
   15648:	075b      	lsls	r3, r3, #29
   1564a:	0fdb      	lsrs	r3, r3, #31
   1564c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   1564e:	4313      	orrs	r3, r2
   15650:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   15652:	230c      	movs	r3, #12
   15654:	18fb      	adds	r3, r7, r3
   15656:	781b      	ldrb	r3, [r3, #0]
   15658:	071b      	lsls	r3, r3, #28
   1565a:	0fdb      	lsrs	r3, r3, #31
   1565c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   1565e:	4313      	orrs	r3, r2
   15660:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   15662:	230c      	movs	r3, #12
   15664:	18fb      	adds	r3, r7, r3
   15666:	781b      	ldrb	r3, [r3, #0]
   15668:	06db      	lsls	r3, r3, #27
   1566a:	0fdb      	lsrs	r3, r3, #31
   1566c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   1566e:	4313      	orrs	r3, r2
   15670:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   15672:	230c      	movs	r3, #12
   15674:	18fb      	adds	r3, r7, r3
   15676:	781b      	ldrb	r3, [r3, #0]
   15678:	069b      	lsls	r3, r3, #26
   1567a:	0fdb      	lsrs	r3, r3, #31
   1567c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   1567e:	4313      	orrs	r3, r2
   15680:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   15682:	230c      	movs	r3, #12
   15684:	18fb      	adds	r3, r7, r3
   15686:	781b      	ldrb	r3, [r3, #0]
   15688:	065b      	lsls	r3, r3, #25
   1568a:	0fdb      	lsrs	r3, r3, #31
   1568c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   1568e:	4313      	orrs	r3, r2
   15690:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   15692:	230c      	movs	r3, #12
   15694:	18fb      	adds	r3, r7, r3
   15696:	781b      	ldrb	r3, [r3, #0]
   15698:	061b      	lsls	r3, r3, #24
   1569a:	0fdb      	lsrs	r3, r3, #31
   1569c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   1569e:	4313      	orrs	r3, r2
   156a0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   156a2:	230c      	movs	r3, #12
   156a4:	18fb      	adds	r3, r7, r3
   156a6:	785b      	ldrb	r3, [r3, #1]
   156a8:	07db      	lsls	r3, r3, #31
   156aa:	0fdb      	lsrs	r3, r3, #31
   156ac:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   156ae:	4313      	orrs	r3, r2
   156b0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   156b2:	230c      	movs	r3, #12
   156b4:	18fb      	adds	r3, r7, r3
   156b6:	785b      	ldrb	r3, [r3, #1]
   156b8:	079b      	lsls	r3, r3, #30
   156ba:	0fdb      	lsrs	r3, r3, #31
   156bc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   156be:	4313      	orrs	r3, r2
   156c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   156c2:	230c      	movs	r3, #12
   156c4:	18fb      	adds	r3, r7, r3
   156c6:	785b      	ldrb	r3, [r3, #1]
   156c8:	075b      	lsls	r3, r3, #29
   156ca:	0fdb      	lsrs	r3, r3, #31
   156cc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   156ce:	4313      	orrs	r3, r2
   156d0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   156d2:	230c      	movs	r3, #12
   156d4:	18fb      	adds	r3, r7, r3
   156d6:	785b      	ldrb	r3, [r3, #1]
   156d8:	071b      	lsls	r3, r3, #28
   156da:	0fdb      	lsrs	r3, r3, #31
   156dc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   156de:	4313      	orrs	r3, r2
   156e0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   156e2:	230c      	movs	r3, #12
   156e4:	18fb      	adds	r3, r7, r3
   156e6:	785b      	ldrb	r3, [r3, #1]
   156e8:	06db      	lsls	r3, r3, #27
   156ea:	0fdb      	lsrs	r3, r3, #31
   156ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   156ee:	4313      	orrs	r3, r2
   156f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   156f2:	230c      	movs	r3, #12
   156f4:	18fb      	adds	r3, r7, r3
   156f6:	785b      	ldrb	r3, [r3, #1]
   156f8:	069b      	lsls	r3, r3, #26
   156fa:	0fdb      	lsrs	r3, r3, #31
   156fc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   156fe:	4313      	orrs	r3, r2
   15700:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   15702:	230c      	movs	r3, #12
   15704:	18fb      	adds	r3, r7, r3
   15706:	785b      	ldrb	r3, [r3, #1]
   15708:	065b      	lsls	r3, r3, #25
   1570a:	0fdb      	lsrs	r3, r3, #31
   1570c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   1570e:	4313      	orrs	r3, r2
   15710:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
   15712:	230c      	movs	r3, #12
   15714:	18fb      	adds	r3, r7, r3
   15716:	785b      	ldrb	r3, [r3, #1]
   15718:	061b      	lsls	r3, r3, #24
   1571a:	0fdb      	lsrs	r3, r3, #31
   1571c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   1571e:	4313      	orrs	r3, r2
   15720:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   15722:	2b01      	cmp	r3, #1
   15724:	d000      	beq.n	15728 <lsm6dso_gy_data_rate_set+0x134>
   15726:	e092      	b.n	1584e <lsm6dso_gy_data_rate_set+0x25a>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
   15728:	230b      	movs	r3, #11
   1572a:	18fa      	adds	r2, r7, r3
   1572c:	687b      	ldr	r3, [r7, #4]
   1572e:	0011      	movs	r1, r2
   15730:	0018      	movs	r0, r3
   15732:	4b5e      	ldr	r3, [pc, #376]	; (158ac <lsm6dso_gy_data_rate_set+0x2b8>)
   15734:	4798      	blx	r3
   15736:	0003      	movs	r3, r0
   15738:	613b      	str	r3, [r7, #16]

      if (ret == 0)
   1573a:	693b      	ldr	r3, [r7, #16]
   1573c:	2b00      	cmp	r3, #0
   1573e:	d000      	beq.n	15742 <lsm6dso_gy_data_rate_set+0x14e>
   15740:	e085      	b.n	1584e <lsm6dso_gy_data_rate_set+0x25a>
      {
        switch (fsm_odr)
   15742:	230b      	movs	r3, #11
   15744:	18fb      	adds	r3, r7, r3
   15746:	781b      	ldrb	r3, [r3, #0]
   15748:	2b01      	cmp	r3, #1
   1574a:	d017      	beq.n	1577c <lsm6dso_gy_data_rate_set+0x188>
   1574c:	dc02      	bgt.n	15754 <lsm6dso_gy_data_rate_set+0x160>
   1574e:	2b00      	cmp	r3, #0
   15750:	d005      	beq.n	1575e <lsm6dso_gy_data_rate_set+0x16a>
   15752:	e076      	b.n	15842 <lsm6dso_gy_data_rate_set+0x24e>
   15754:	2b02      	cmp	r3, #2
   15756:	d029      	beq.n	157ac <lsm6dso_gy_data_rate_set+0x1b8>
   15758:	2b03      	cmp	r3, #3
   1575a:	d048      	beq.n	157ee <lsm6dso_gy_data_rate_set+0x1fa>
   1575c:	e071      	b.n	15842 <lsm6dso_gy_data_rate_set+0x24e>
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
   1575e:	1cfb      	adds	r3, r7, #3
   15760:	781b      	ldrb	r3, [r3, #0]
   15762:	2b00      	cmp	r3, #0
   15764:	d104      	bne.n	15770 <lsm6dso_gy_data_rate_set+0x17c>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
   15766:	2317      	movs	r3, #23
   15768:	18fb      	adds	r3, r7, r3
   1576a:	2201      	movs	r2, #1
   1576c:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   1576e:	e06e      	b.n	1584e <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   15770:	2317      	movs	r3, #23
   15772:	18fb      	adds	r3, r7, r3
   15774:	1cfa      	adds	r2, r7, #3
   15776:	7812      	ldrb	r2, [r2, #0]
   15778:	701a      	strb	r2, [r3, #0]
            break;
   1577a:	e068      	b.n	1584e <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   1577c:	1cfb      	adds	r3, r7, #3
   1577e:	781b      	ldrb	r3, [r3, #0]
   15780:	2b00      	cmp	r3, #0
   15782:	d104      	bne.n	1578e <lsm6dso_gy_data_rate_set+0x19a>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
   15784:	2317      	movs	r3, #23
   15786:	18fb      	adds	r3, r7, r3
   15788:	2202      	movs	r2, #2
   1578a:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   1578c:	e05f      	b.n	1584e <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   1578e:	1cfb      	adds	r3, r7, #3
   15790:	781b      	ldrb	r3, [r3, #0]
   15792:	2b01      	cmp	r3, #1
   15794:	d104      	bne.n	157a0 <lsm6dso_gy_data_rate_set+0x1ac>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
   15796:	2317      	movs	r3, #23
   15798:	18fb      	adds	r3, r7, r3
   1579a:	2202      	movs	r2, #2
   1579c:	701a      	strb	r2, [r3, #0]
            break;
   1579e:	e056      	b.n	1584e <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   157a0:	2317      	movs	r3, #23
   157a2:	18fb      	adds	r3, r7, r3
   157a4:	1cfa      	adds	r2, r7, #3
   157a6:	7812      	ldrb	r2, [r2, #0]
   157a8:	701a      	strb	r2, [r3, #0]
            break;
   157aa:	e050      	b.n	1584e <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   157ac:	1cfb      	adds	r3, r7, #3
   157ae:	781b      	ldrb	r3, [r3, #0]
   157b0:	2b00      	cmp	r3, #0
   157b2:	d104      	bne.n	157be <lsm6dso_gy_data_rate_set+0x1ca>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   157b4:	2317      	movs	r3, #23
   157b6:	18fb      	adds	r3, r7, r3
   157b8:	2203      	movs	r2, #3
   157ba:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   157bc:	e047      	b.n	1584e <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   157be:	1cfb      	adds	r3, r7, #3
   157c0:	781b      	ldrb	r3, [r3, #0]
   157c2:	2b01      	cmp	r3, #1
   157c4:	d104      	bne.n	157d0 <lsm6dso_gy_data_rate_set+0x1dc>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   157c6:	2317      	movs	r3, #23
   157c8:	18fb      	adds	r3, r7, r3
   157ca:	2203      	movs	r2, #3
   157cc:	701a      	strb	r2, [r3, #0]
            break;
   157ce:	e03e      	b.n	1584e <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_26Hz)
   157d0:	1cfb      	adds	r3, r7, #3
   157d2:	781b      	ldrb	r3, [r3, #0]
   157d4:	2b02      	cmp	r3, #2
   157d6:	d104      	bne.n	157e2 <lsm6dso_gy_data_rate_set+0x1ee>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   157d8:	2317      	movs	r3, #23
   157da:	18fb      	adds	r3, r7, r3
   157dc:	2203      	movs	r2, #3
   157de:	701a      	strb	r2, [r3, #0]
            break;
   157e0:	e035      	b.n	1584e <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   157e2:	2317      	movs	r3, #23
   157e4:	18fb      	adds	r3, r7, r3
   157e6:	1cfa      	adds	r2, r7, #3
   157e8:	7812      	ldrb	r2, [r2, #0]
   157ea:	701a      	strb	r2, [r3, #0]
            break;
   157ec:	e02f      	b.n	1584e <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   157ee:	1cfb      	adds	r3, r7, #3
   157f0:	781b      	ldrb	r3, [r3, #0]
   157f2:	2b00      	cmp	r3, #0
   157f4:	d104      	bne.n	15800 <lsm6dso_gy_data_rate_set+0x20c>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   157f6:	2317      	movs	r3, #23
   157f8:	18fb      	adds	r3, r7, r3
   157fa:	2204      	movs	r2, #4
   157fc:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   157fe:	e026      	b.n	1584e <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   15800:	1cfb      	adds	r3, r7, #3
   15802:	781b      	ldrb	r3, [r3, #0]
   15804:	2b01      	cmp	r3, #1
   15806:	d104      	bne.n	15812 <lsm6dso_gy_data_rate_set+0x21e>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   15808:	2317      	movs	r3, #23
   1580a:	18fb      	adds	r3, r7, r3
   1580c:	2204      	movs	r2, #4
   1580e:	701a      	strb	r2, [r3, #0]
            break;
   15810:	e01d      	b.n	1584e <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_26Hz)
   15812:	1cfb      	adds	r3, r7, #3
   15814:	781b      	ldrb	r3, [r3, #0]
   15816:	2b02      	cmp	r3, #2
   15818:	d104      	bne.n	15824 <lsm6dso_gy_data_rate_set+0x230>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   1581a:	2317      	movs	r3, #23
   1581c:	18fb      	adds	r3, r7, r3
   1581e:	2204      	movs	r2, #4
   15820:	701a      	strb	r2, [r3, #0]
            break;
   15822:	e014      	b.n	1584e <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_52Hz)
   15824:	1cfb      	adds	r3, r7, #3
   15826:	781b      	ldrb	r3, [r3, #0]
   15828:	2b03      	cmp	r3, #3
   1582a:	d104      	bne.n	15836 <lsm6dso_gy_data_rate_set+0x242>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   1582c:	2317      	movs	r3, #23
   1582e:	18fb      	adds	r3, r7, r3
   15830:	2204      	movs	r2, #4
   15832:	701a      	strb	r2, [r3, #0]
            break;
   15834:	e00b      	b.n	1584e <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   15836:	2317      	movs	r3, #23
   15838:	18fb      	adds	r3, r7, r3
   1583a:	1cfa      	adds	r2, r7, #3
   1583c:	7812      	ldrb	r2, [r2, #0]
   1583e:	701a      	strb	r2, [r3, #0]
            break;
   15840:	e005      	b.n	1584e <lsm6dso_gy_data_rate_set+0x25a>

          default:
            odr_gy = val;
   15842:	2317      	movs	r3, #23
   15844:	18fb      	adds	r3, r7, r3
   15846:	1cfa      	adds	r2, r7, #3
   15848:	7812      	ldrb	r2, [r2, #0]
   1584a:	701a      	strb	r2, [r3, #0]
            break;
   1584c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
   1584e:	693b      	ldr	r3, [r7, #16]
   15850:	2b00      	cmp	r3, #0
   15852:	d108      	bne.n	15866 <lsm6dso_gy_data_rate_set+0x272>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   15854:	2308      	movs	r3, #8
   15856:	18fa      	adds	r2, r7, r3
   15858:	6878      	ldr	r0, [r7, #4]
   1585a:	2301      	movs	r3, #1
   1585c:	2111      	movs	r1, #17
   1585e:	4c14      	ldr	r4, [pc, #80]	; (158b0 <lsm6dso_gy_data_rate_set+0x2bc>)
   15860:	47a0      	blx	r4
   15862:	0003      	movs	r3, r0
   15864:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0)
   15866:	693b      	ldr	r3, [r7, #16]
   15868:	2b00      	cmp	r3, #0
   1586a:	d118      	bne.n	1589e <lsm6dso_gy_data_rate_set+0x2aa>
  {
    reg.odr_g = (uint8_t) odr_gy;
   1586c:	2317      	movs	r3, #23
   1586e:	18fb      	adds	r3, r7, r3
   15870:	781b      	ldrb	r3, [r3, #0]
   15872:	220f      	movs	r2, #15
   15874:	4013      	ands	r3, r2
   15876:	b2da      	uxtb	r2, r3
   15878:	2308      	movs	r3, #8
   1587a:	18fb      	adds	r3, r7, r3
   1587c:	0110      	lsls	r0, r2, #4
   1587e:	781a      	ldrb	r2, [r3, #0]
   15880:	210f      	movs	r1, #15
   15882:	400a      	ands	r2, r1
   15884:	1c11      	adds	r1, r2, #0
   15886:	1c02      	adds	r2, r0, #0
   15888:	430a      	orrs	r2, r1
   1588a:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   1588c:	2308      	movs	r3, #8
   1588e:	18fa      	adds	r2, r7, r3
   15890:	6878      	ldr	r0, [r7, #4]
   15892:	2301      	movs	r3, #1
   15894:	2111      	movs	r1, #17
   15896:	4c07      	ldr	r4, [pc, #28]	; (158b4 <lsm6dso_gy_data_rate_set+0x2c0>)
   15898:	47a0      	blx	r4
   1589a:	0003      	movs	r3, r0
   1589c:	613b      	str	r3, [r7, #16]
  }

  return ret;
   1589e:	693b      	ldr	r3, [r7, #16]
}
   158a0:	0018      	movs	r0, r3
   158a2:	46bd      	mov	sp, r7
   158a4:	b007      	add	sp, #28
   158a6:	bd90      	pop	{r4, r7, pc}
   158a8:	00015da1 	.word	0x00015da1
   158ac:	00015df5 	.word	0x00015df5
   158b0:	00015195 	.word	0x00015195
   158b4:	000151db 	.word	0x000151db

000158b8 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
   158b8:	b590      	push	{r4, r7, lr}
   158ba:	b085      	sub	sp, #20
   158bc:	af00      	add	r7, sp, #0
   158be:	6078      	str	r0, [r7, #4]
   158c0:	000a      	movs	r2, r1
   158c2:	1cfb      	adds	r3, r7, #3
   158c4:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   158c6:	2308      	movs	r3, #8
   158c8:	18fa      	adds	r2, r7, r3
   158ca:	6878      	ldr	r0, [r7, #4]
   158cc:	2301      	movs	r3, #1
   158ce:	2112      	movs	r1, #18
   158d0:	4c12      	ldr	r4, [pc, #72]	; (1591c <lsm6dso_block_data_update_set+0x64>)
   158d2:	47a0      	blx	r4
   158d4:	0003      	movs	r3, r0
   158d6:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   158d8:	68fb      	ldr	r3, [r7, #12]
   158da:	2b00      	cmp	r3, #0
   158dc:	d119      	bne.n	15912 <lsm6dso_block_data_update_set+0x5a>
  {
    reg.bdu = val;
   158de:	1cfb      	adds	r3, r7, #3
   158e0:	781b      	ldrb	r3, [r3, #0]
   158e2:	2201      	movs	r2, #1
   158e4:	4013      	ands	r3, r2
   158e6:	b2da      	uxtb	r2, r3
   158e8:	2308      	movs	r3, #8
   158ea:	18fb      	adds	r3, r7, r3
   158ec:	2101      	movs	r1, #1
   158ee:	400a      	ands	r2, r1
   158f0:	0190      	lsls	r0, r2, #6
   158f2:	781a      	ldrb	r2, [r3, #0]
   158f4:	2140      	movs	r1, #64	; 0x40
   158f6:	438a      	bics	r2, r1
   158f8:	1c11      	adds	r1, r2, #0
   158fa:	1c02      	adds	r2, r0, #0
   158fc:	430a      	orrs	r2, r1
   158fe:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   15900:	2308      	movs	r3, #8
   15902:	18fa      	adds	r2, r7, r3
   15904:	6878      	ldr	r0, [r7, #4]
   15906:	2301      	movs	r3, #1
   15908:	2112      	movs	r1, #18
   1590a:	4c05      	ldr	r4, [pc, #20]	; (15920 <lsm6dso_block_data_update_set+0x68>)
   1590c:	47a0      	blx	r4
   1590e:	0003      	movs	r3, r0
   15910:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15912:	68fb      	ldr	r3, [r7, #12]
}
   15914:	0018      	movs	r0, r3
   15916:	46bd      	mov	sp, r7
   15918:	b005      	add	sp, #20
   1591a:	bd90      	pop	{r4, r7, pc}
   1591c:	00015195 	.word	0x00015195
   15920:	000151db 	.word	0x000151db

00015924 <lsm6dso_xl_offset_weight_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_offset_weight_set(stmdev_ctx_t *ctx,
                                     lsm6dso_usr_off_w_t val)
{
   15924:	b590      	push	{r4, r7, lr}
   15926:	b085      	sub	sp, #20
   15928:	af00      	add	r7, sp, #0
   1592a:	6078      	str	r0, [r7, #4]
   1592c:	000a      	movs	r2, r1
   1592e:	1cfb      	adds	r3, r7, #3
   15930:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl6_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
   15932:	2308      	movs	r3, #8
   15934:	18fa      	adds	r2, r7, r3
   15936:	6878      	ldr	r0, [r7, #4]
   15938:	2301      	movs	r3, #1
   1593a:	2115      	movs	r1, #21
   1593c:	4c12      	ldr	r4, [pc, #72]	; (15988 <lsm6dso_xl_offset_weight_set+0x64>)
   1593e:	47a0      	blx	r4
   15940:	0003      	movs	r3, r0
   15942:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15944:	68fb      	ldr	r3, [r7, #12]
   15946:	2b00      	cmp	r3, #0
   15948:	d119      	bne.n	1597e <lsm6dso_xl_offset_weight_set+0x5a>
  {
    reg.usr_off_w = (uint8_t)val;
   1594a:	1cfb      	adds	r3, r7, #3
   1594c:	781b      	ldrb	r3, [r3, #0]
   1594e:	2201      	movs	r2, #1
   15950:	4013      	ands	r3, r2
   15952:	b2da      	uxtb	r2, r3
   15954:	2308      	movs	r3, #8
   15956:	18fb      	adds	r3, r7, r3
   15958:	2101      	movs	r1, #1
   1595a:	400a      	ands	r2, r1
   1595c:	00d0      	lsls	r0, r2, #3
   1595e:	781a      	ldrb	r2, [r3, #0]
   15960:	2108      	movs	r1, #8
   15962:	438a      	bics	r2, r1
   15964:	1c11      	adds	r1, r2, #0
   15966:	1c02      	adds	r2, r0, #0
   15968:	430a      	orrs	r2, r1
   1596a:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
   1596c:	2308      	movs	r3, #8
   1596e:	18fa      	adds	r2, r7, r3
   15970:	6878      	ldr	r0, [r7, #4]
   15972:	2301      	movs	r3, #1
   15974:	2115      	movs	r1, #21
   15976:	4c05      	ldr	r4, [pc, #20]	; (1598c <lsm6dso_xl_offset_weight_set+0x68>)
   15978:	47a0      	blx	r4
   1597a:	0003      	movs	r3, r0
   1597c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   1597e:	68fb      	ldr	r3, [r7, #12]
}
   15980:	0018      	movs	r0, r3
   15982:	46bd      	mov	sp, r7
   15984:	b005      	add	sp, #20
   15986:	bd90      	pop	{r4, r7, pc}
   15988:	00015195 	.word	0x00015195
   1598c:	000151db 	.word	0x000151db

00015990 <lsm6dso_xl_flag_data_ready_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
   15990:	b590      	push	{r4, r7, lr}
   15992:	b085      	sub	sp, #20
   15994:	af00      	add	r7, sp, #0
   15996:	6078      	str	r0, [r7, #4]
   15998:	6039      	str	r1, [r7, #0]
  lsm6dso_status_reg_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_STATUS_REG, (uint8_t *)&reg, 1);
   1599a:	2308      	movs	r3, #8
   1599c:	18fa      	adds	r2, r7, r3
   1599e:	6878      	ldr	r0, [r7, #4]
   159a0:	2301      	movs	r3, #1
   159a2:	211e      	movs	r1, #30
   159a4:	4c08      	ldr	r4, [pc, #32]	; (159c8 <lsm6dso_xl_flag_data_ready_get+0x38>)
   159a6:	47a0      	blx	r4
   159a8:	0003      	movs	r3, r0
   159aa:	60fb      	str	r3, [r7, #12]
  *val = reg.xlda;
   159ac:	2308      	movs	r3, #8
   159ae:	18fb      	adds	r3, r7, r3
   159b0:	781b      	ldrb	r3, [r3, #0]
   159b2:	07db      	lsls	r3, r3, #31
   159b4:	0fdb      	lsrs	r3, r3, #31
   159b6:	b2db      	uxtb	r3, r3
   159b8:	001a      	movs	r2, r3
   159ba:	683b      	ldr	r3, [r7, #0]
   159bc:	701a      	strb	r2, [r3, #0]

  return ret;
   159be:	68fb      	ldr	r3, [r7, #12]
}
   159c0:	0018      	movs	r0, r3
   159c2:	46bd      	mov	sp, r7
   159c4:	b005      	add	sp, #20
   159c6:	bd90      	pop	{r4, r7, pc}
   159c8:	00015195 	.word	0x00015195

000159cc <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
   159cc:	b590      	push	{r4, r7, lr}
   159ce:	b087      	sub	sp, #28
   159d0:	af00      	add	r7, sp, #0
   159d2:	6078      	str	r0, [r7, #4]
   159d4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
   159d6:	230c      	movs	r3, #12
   159d8:	18fa      	adds	r2, r7, r3
   159da:	6878      	ldr	r0, [r7, #4]
   159dc:	2306      	movs	r3, #6
   159de:	2128      	movs	r1, #40	; 0x28
   159e0:	4c26      	ldr	r4, [pc, #152]	; (15a7c <lsm6dso_acceleration_raw_get+0xb0>)
   159e2:	47a0      	blx	r4
   159e4:	0003      	movs	r3, r0
   159e6:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
   159e8:	230c      	movs	r3, #12
   159ea:	18fb      	adds	r3, r7, r3
   159ec:	785b      	ldrb	r3, [r3, #1]
   159ee:	b21a      	sxth	r2, r3
   159f0:	683b      	ldr	r3, [r7, #0]
   159f2:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
   159f4:	683b      	ldr	r3, [r7, #0]
   159f6:	2200      	movs	r2, #0
   159f8:	5e9b      	ldrsh	r3, [r3, r2]
   159fa:	b29b      	uxth	r3, r3
   159fc:	021b      	lsls	r3, r3, #8
   159fe:	b29a      	uxth	r2, r3
   15a00:	230c      	movs	r3, #12
   15a02:	18fb      	adds	r3, r7, r3
   15a04:	781b      	ldrb	r3, [r3, #0]
   15a06:	b29b      	uxth	r3, r3
   15a08:	18d3      	adds	r3, r2, r3
   15a0a:	b29b      	uxth	r3, r3
   15a0c:	b21a      	sxth	r2, r3
   15a0e:	683b      	ldr	r3, [r7, #0]
   15a10:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
   15a12:	683b      	ldr	r3, [r7, #0]
   15a14:	3302      	adds	r3, #2
   15a16:	220c      	movs	r2, #12
   15a18:	18ba      	adds	r2, r7, r2
   15a1a:	78d2      	ldrb	r2, [r2, #3]
   15a1c:	b212      	sxth	r2, r2
   15a1e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
   15a20:	683b      	ldr	r3, [r7, #0]
   15a22:	3302      	adds	r3, #2
   15a24:	683a      	ldr	r2, [r7, #0]
   15a26:	3202      	adds	r2, #2
   15a28:	2100      	movs	r1, #0
   15a2a:	5e52      	ldrsh	r2, [r2, r1]
   15a2c:	b292      	uxth	r2, r2
   15a2e:	0212      	lsls	r2, r2, #8
   15a30:	b291      	uxth	r1, r2
   15a32:	220c      	movs	r2, #12
   15a34:	18ba      	adds	r2, r7, r2
   15a36:	7892      	ldrb	r2, [r2, #2]
   15a38:	b292      	uxth	r2, r2
   15a3a:	188a      	adds	r2, r1, r2
   15a3c:	b292      	uxth	r2, r2
   15a3e:	b212      	sxth	r2, r2
   15a40:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
   15a42:	683b      	ldr	r3, [r7, #0]
   15a44:	3304      	adds	r3, #4
   15a46:	220c      	movs	r2, #12
   15a48:	18ba      	adds	r2, r7, r2
   15a4a:	7952      	ldrb	r2, [r2, #5]
   15a4c:	b212      	sxth	r2, r2
   15a4e:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
   15a50:	683b      	ldr	r3, [r7, #0]
   15a52:	3304      	adds	r3, #4
   15a54:	683a      	ldr	r2, [r7, #0]
   15a56:	3204      	adds	r2, #4
   15a58:	2100      	movs	r1, #0
   15a5a:	5e52      	ldrsh	r2, [r2, r1]
   15a5c:	b292      	uxth	r2, r2
   15a5e:	0212      	lsls	r2, r2, #8
   15a60:	b291      	uxth	r1, r2
   15a62:	220c      	movs	r2, #12
   15a64:	18ba      	adds	r2, r7, r2
   15a66:	7912      	ldrb	r2, [r2, #4]
   15a68:	b292      	uxth	r2, r2
   15a6a:	188a      	adds	r2, r1, r2
   15a6c:	b292      	uxth	r2, r2
   15a6e:	b212      	sxth	r2, r2
   15a70:	801a      	strh	r2, [r3, #0]

  return ret;
   15a72:	697b      	ldr	r3, [r7, #20]
}
   15a74:	0018      	movs	r0, r3
   15a76:	46bd      	mov	sp, r7
   15a78:	b007      	add	sp, #28
   15a7a:	bd90      	pop	{r4, r7, pc}
   15a7c:	00015195 	.word	0x00015195

00015a80 <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
   15a80:	b590      	push	{r4, r7, lr}
   15a82:	b085      	sub	sp, #20
   15a84:	af00      	add	r7, sp, #0
   15a86:	6078      	str	r0, [r7, #4]
   15a88:	000a      	movs	r2, r1
   15a8a:	1cfb      	adds	r3, r7, #3
   15a8c:	701a      	strb	r2, [r3, #0]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
   15a8e:	2308      	movs	r3, #8
   15a90:	18fa      	adds	r2, r7, r3
   15a92:	6878      	ldr	r0, [r7, #4]
   15a94:	2301      	movs	r3, #1
   15a96:	2101      	movs	r1, #1
   15a98:	4c11      	ldr	r4, [pc, #68]	; (15ae0 <lsm6dso_mem_bank_set+0x60>)
   15a9a:	47a0      	blx	r4
   15a9c:	0003      	movs	r3, r0
   15a9e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15aa0:	68fb      	ldr	r3, [r7, #12]
   15aa2:	2b00      	cmp	r3, #0
   15aa4:	d117      	bne.n	15ad6 <lsm6dso_mem_bank_set+0x56>
  {
    reg.reg_access = (uint8_t)val;
   15aa6:	1cfb      	adds	r3, r7, #3
   15aa8:	781b      	ldrb	r3, [r3, #0]
   15aaa:	2203      	movs	r2, #3
   15aac:	4013      	ands	r3, r2
   15aae:	b2da      	uxtb	r2, r3
   15ab0:	2308      	movs	r3, #8
   15ab2:	18fb      	adds	r3, r7, r3
   15ab4:	0190      	lsls	r0, r2, #6
   15ab6:	781a      	ldrb	r2, [r3, #0]
   15ab8:	213f      	movs	r1, #63	; 0x3f
   15aba:	400a      	ands	r2, r1
   15abc:	1c11      	adds	r1, r2, #0
   15abe:	1c02      	adds	r2, r0, #0
   15ac0:	430a      	orrs	r2, r1
   15ac2:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
   15ac4:	2308      	movs	r3, #8
   15ac6:	18fa      	adds	r2, r7, r3
   15ac8:	6878      	ldr	r0, [r7, #4]
   15aca:	2301      	movs	r3, #1
   15acc:	2101      	movs	r1, #1
   15ace:	4c05      	ldr	r4, [pc, #20]	; (15ae4 <lsm6dso_mem_bank_set+0x64>)
   15ad0:	47a0      	blx	r4
   15ad2:	0003      	movs	r3, r0
   15ad4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15ad6:	68fb      	ldr	r3, [r7, #12]
}
   15ad8:	0018      	movs	r0, r3
   15ada:	46bd      	mov	sp, r7
   15adc:	b005      	add	sp, #20
   15ade:	bd90      	pop	{r4, r7, pc}
   15ae0:	00015195 	.word	0x00015195
   15ae4:	000151db 	.word	0x000151db

00015ae8 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
   15ae8:	b590      	push	{r4, r7, lr}
   15aea:	b085      	sub	sp, #20
   15aec:	af00      	add	r7, sp, #0
   15aee:	6078      	str	r0, [r7, #4]
   15af0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
   15af2:	683a      	ldr	r2, [r7, #0]
   15af4:	6878      	ldr	r0, [r7, #4]
   15af6:	2301      	movs	r3, #1
   15af8:	210f      	movs	r1, #15
   15afa:	4c04      	ldr	r4, [pc, #16]	; (15b0c <lsm6dso_device_id_get+0x24>)
   15afc:	47a0      	blx	r4
   15afe:	0003      	movs	r3, r0
   15b00:	60fb      	str	r3, [r7, #12]

  return ret;
   15b02:	68fb      	ldr	r3, [r7, #12]
}
   15b04:	0018      	movs	r0, r3
   15b06:	46bd      	mov	sp, r7
   15b08:	b005      	add	sp, #20
   15b0a:	bd90      	pop	{r4, r7, pc}
   15b0c:	00015195 	.word	0x00015195

00015b10 <lsm6dso_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
   15b10:	b590      	push	{r4, r7, lr}
   15b12:	b085      	sub	sp, #20
   15b14:	af00      	add	r7, sp, #0
   15b16:	6078      	str	r0, [r7, #4]
   15b18:	000a      	movs	r2, r1
   15b1a:	1cfb      	adds	r3, r7, #3
   15b1c:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   15b1e:	2308      	movs	r3, #8
   15b20:	18fa      	adds	r2, r7, r3
   15b22:	6878      	ldr	r0, [r7, #4]
   15b24:	2301      	movs	r3, #1
   15b26:	2112      	movs	r1, #18
   15b28:	4c12      	ldr	r4, [pc, #72]	; (15b74 <lsm6dso_reset_set+0x64>)
   15b2a:	47a0      	blx	r4
   15b2c:	0003      	movs	r3, r0
   15b2e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15b30:	68fb      	ldr	r3, [r7, #12]
   15b32:	2b00      	cmp	r3, #0
   15b34:	d119      	bne.n	15b6a <lsm6dso_reset_set+0x5a>
  {
    reg.sw_reset = val;
   15b36:	1cfb      	adds	r3, r7, #3
   15b38:	781b      	ldrb	r3, [r3, #0]
   15b3a:	2201      	movs	r2, #1
   15b3c:	4013      	ands	r3, r2
   15b3e:	b2da      	uxtb	r2, r3
   15b40:	2308      	movs	r3, #8
   15b42:	18fb      	adds	r3, r7, r3
   15b44:	2101      	movs	r1, #1
   15b46:	400a      	ands	r2, r1
   15b48:	0010      	movs	r0, r2
   15b4a:	781a      	ldrb	r2, [r3, #0]
   15b4c:	2101      	movs	r1, #1
   15b4e:	438a      	bics	r2, r1
   15b50:	1c11      	adds	r1, r2, #0
   15b52:	1c02      	adds	r2, r0, #0
   15b54:	430a      	orrs	r2, r1
   15b56:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   15b58:	2308      	movs	r3, #8
   15b5a:	18fa      	adds	r2, r7, r3
   15b5c:	6878      	ldr	r0, [r7, #4]
   15b5e:	2301      	movs	r3, #1
   15b60:	2112      	movs	r1, #18
   15b62:	4c05      	ldr	r4, [pc, #20]	; (15b78 <lsm6dso_reset_set+0x68>)
   15b64:	47a0      	blx	r4
   15b66:	0003      	movs	r3, r0
   15b68:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15b6a:	68fb      	ldr	r3, [r7, #12]
}
   15b6c:	0018      	movs	r0, r3
   15b6e:	46bd      	mov	sp, r7
   15b70:	b005      	add	sp, #20
   15b72:	bd90      	pop	{r4, r7, pc}
   15b74:	00015195 	.word	0x00015195
   15b78:	000151db 	.word	0x000151db

00015b7c <lsm6dso_reset_get>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
   15b7c:	b590      	push	{r4, r7, lr}
   15b7e:	b085      	sub	sp, #20
   15b80:	af00      	add	r7, sp, #0
   15b82:	6078      	str	r0, [r7, #4]
   15b84:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   15b86:	2308      	movs	r3, #8
   15b88:	18fa      	adds	r2, r7, r3
   15b8a:	6878      	ldr	r0, [r7, #4]
   15b8c:	2301      	movs	r3, #1
   15b8e:	2112      	movs	r1, #18
   15b90:	4c08      	ldr	r4, [pc, #32]	; (15bb4 <lsm6dso_reset_get+0x38>)
   15b92:	47a0      	blx	r4
   15b94:	0003      	movs	r3, r0
   15b96:	60fb      	str	r3, [r7, #12]
  *val = reg.sw_reset;
   15b98:	2308      	movs	r3, #8
   15b9a:	18fb      	adds	r3, r7, r3
   15b9c:	781b      	ldrb	r3, [r3, #0]
   15b9e:	07db      	lsls	r3, r3, #31
   15ba0:	0fdb      	lsrs	r3, r3, #31
   15ba2:	b2db      	uxtb	r3, r3
   15ba4:	001a      	movs	r2, r3
   15ba6:	683b      	ldr	r3, [r7, #0]
   15ba8:	701a      	strb	r2, [r3, #0]

  return ret;
   15baa:	68fb      	ldr	r3, [r7, #12]
}
   15bac:	0018      	movs	r0, r3
   15bae:	46bd      	mov	sp, r7
   15bb0:	b005      	add	sp, #20
   15bb2:	bd90      	pop	{r4, r7, pc}
   15bb4:	00015195 	.word	0x00015195

00015bb8 <lsm6dso_xl_filter_lp2_set>:
  * @param  val      change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_filter_lp2_set(stmdev_ctx_t *ctx, uint8_t val)
{
   15bb8:	b590      	push	{r4, r7, lr}
   15bba:	b085      	sub	sp, #20
   15bbc:	af00      	add	r7, sp, #0
   15bbe:	6078      	str	r0, [r7, #4]
   15bc0:	000a      	movs	r2, r1
   15bc2:	1cfb      	adds	r3, r7, #3
   15bc4:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   15bc6:	2308      	movs	r3, #8
   15bc8:	18fa      	adds	r2, r7, r3
   15bca:	6878      	ldr	r0, [r7, #4]
   15bcc:	2301      	movs	r3, #1
   15bce:	2110      	movs	r1, #16
   15bd0:	4c12      	ldr	r4, [pc, #72]	; (15c1c <lsm6dso_xl_filter_lp2_set+0x64>)
   15bd2:	47a0      	blx	r4
   15bd4:	0003      	movs	r3, r0
   15bd6:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15bd8:	68fb      	ldr	r3, [r7, #12]
   15bda:	2b00      	cmp	r3, #0
   15bdc:	d119      	bne.n	15c12 <lsm6dso_xl_filter_lp2_set+0x5a>
  {
    reg.lpf2_xl_en = val;
   15bde:	1cfb      	adds	r3, r7, #3
   15be0:	781b      	ldrb	r3, [r3, #0]
   15be2:	2201      	movs	r2, #1
   15be4:	4013      	ands	r3, r2
   15be6:	b2da      	uxtb	r2, r3
   15be8:	2308      	movs	r3, #8
   15bea:	18fb      	adds	r3, r7, r3
   15bec:	2101      	movs	r1, #1
   15bee:	400a      	ands	r2, r1
   15bf0:	1890      	adds	r0, r2, r2
   15bf2:	781a      	ldrb	r2, [r3, #0]
   15bf4:	2102      	movs	r1, #2
   15bf6:	438a      	bics	r2, r1
   15bf8:	1c11      	adds	r1, r2, #0
   15bfa:	1c02      	adds	r2, r0, #0
   15bfc:	430a      	orrs	r2, r1
   15bfe:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   15c00:	2308      	movs	r3, #8
   15c02:	18fa      	adds	r2, r7, r3
   15c04:	6878      	ldr	r0, [r7, #4]
   15c06:	2301      	movs	r3, #1
   15c08:	2110      	movs	r1, #16
   15c0a:	4c05      	ldr	r4, [pc, #20]	; (15c20 <lsm6dso_xl_filter_lp2_set+0x68>)
   15c0c:	47a0      	blx	r4
   15c0e:	0003      	movs	r3, r0
   15c10:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15c12:	68fb      	ldr	r3, [r7, #12]
}
   15c14:	0018      	movs	r0, r3
   15c16:	46bd      	mov	sp, r7
   15c18:	b005      	add	sp, #20
   15c1a:	bd90      	pop	{r4, r7, pc}
   15c1c:	00015195 	.word	0x00015195
   15c20:	000151db 	.word	0x000151db

00015c24 <lsm6dso_xl_hp_path_on_out_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                      lsm6dso_hp_slope_xl_en_t val)
{
   15c24:	b590      	push	{r4, r7, lr}
   15c26:	b085      	sub	sp, #20
   15c28:	af00      	add	r7, sp, #0
   15c2a:	6078      	str	r0, [r7, #4]
   15c2c:	000a      	movs	r2, r1
   15c2e:	1cfb      	adds	r3, r7, #3
   15c30:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl8_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
   15c32:	2308      	movs	r3, #8
   15c34:	18fa      	adds	r2, r7, r3
   15c36:	6878      	ldr	r0, [r7, #4]
   15c38:	2301      	movs	r3, #1
   15c3a:	2117      	movs	r1, #23
   15c3c:	4c25      	ldr	r4, [pc, #148]	; (15cd4 <lsm6dso_xl_hp_path_on_out_set+0xb0>)
   15c3e:	47a0      	blx	r4
   15c40:	0003      	movs	r3, r0
   15c42:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15c44:	68fb      	ldr	r3, [r7, #12]
   15c46:	2b00      	cmp	r3, #0
   15c48:	d13f      	bne.n	15cca <lsm6dso_xl_hp_path_on_out_set+0xa6>
  {
    reg.hp_slope_xl_en = ((uint8_t)val & 0x10U) >> 4;
   15c4a:	1cfb      	adds	r3, r7, #3
   15c4c:	781b      	ldrb	r3, [r3, #0]
   15c4e:	091b      	lsrs	r3, r3, #4
   15c50:	b2db      	uxtb	r3, r3
   15c52:	1c1a      	adds	r2, r3, #0
   15c54:	2301      	movs	r3, #1
   15c56:	4013      	ands	r3, r2
   15c58:	b2da      	uxtb	r2, r3
   15c5a:	2308      	movs	r3, #8
   15c5c:	18fb      	adds	r3, r7, r3
   15c5e:	2101      	movs	r1, #1
   15c60:	400a      	ands	r2, r1
   15c62:	0090      	lsls	r0, r2, #2
   15c64:	781a      	ldrb	r2, [r3, #0]
   15c66:	2104      	movs	r1, #4
   15c68:	438a      	bics	r2, r1
   15c6a:	1c11      	adds	r1, r2, #0
   15c6c:	1c02      	adds	r2, r0, #0
   15c6e:	430a      	orrs	r2, r1
   15c70:	701a      	strb	r2, [r3, #0]
    reg.hp_ref_mode_xl = ((uint8_t)val & 0x20U) >> 5;
   15c72:	1cfb      	adds	r3, r7, #3
   15c74:	781b      	ldrb	r3, [r3, #0]
   15c76:	095b      	lsrs	r3, r3, #5
   15c78:	b2db      	uxtb	r3, r3
   15c7a:	1c1a      	adds	r2, r3, #0
   15c7c:	2301      	movs	r3, #1
   15c7e:	4013      	ands	r3, r2
   15c80:	b2da      	uxtb	r2, r3
   15c82:	2308      	movs	r3, #8
   15c84:	18fb      	adds	r3, r7, r3
   15c86:	2101      	movs	r1, #1
   15c88:	400a      	ands	r2, r1
   15c8a:	0110      	lsls	r0, r2, #4
   15c8c:	781a      	ldrb	r2, [r3, #0]
   15c8e:	2110      	movs	r1, #16
   15c90:	438a      	bics	r2, r1
   15c92:	1c11      	adds	r1, r2, #0
   15c94:	1c02      	adds	r2, r0, #0
   15c96:	430a      	orrs	r2, r1
   15c98:	701a      	strb	r2, [r3, #0]
    reg.hpcf_xl = (uint8_t)val & 0x07U;
   15c9a:	1cfb      	adds	r3, r7, #3
   15c9c:	781b      	ldrb	r3, [r3, #0]
   15c9e:	2207      	movs	r2, #7
   15ca0:	4013      	ands	r3, r2
   15ca2:	b2da      	uxtb	r2, r3
   15ca4:	2308      	movs	r3, #8
   15ca6:	18fb      	adds	r3, r7, r3
   15ca8:	0150      	lsls	r0, r2, #5
   15caa:	781a      	ldrb	r2, [r3, #0]
   15cac:	211f      	movs	r1, #31
   15cae:	400a      	ands	r2, r1
   15cb0:	1c11      	adds	r1, r2, #0
   15cb2:	1c02      	adds	r2, r0, #0
   15cb4:	430a      	orrs	r2, r1
   15cb6:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
   15cb8:	2308      	movs	r3, #8
   15cba:	18fa      	adds	r2, r7, r3
   15cbc:	6878      	ldr	r0, [r7, #4]
   15cbe:	2301      	movs	r3, #1
   15cc0:	2117      	movs	r1, #23
   15cc2:	4c05      	ldr	r4, [pc, #20]	; (15cd8 <lsm6dso_xl_hp_path_on_out_set+0xb4>)
   15cc4:	47a0      	blx	r4
   15cc6:	0003      	movs	r3, r0
   15cc8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15cca:	68fb      	ldr	r3, [r7, #12]
}
   15ccc:	0018      	movs	r0, r3
   15cce:	46bd      	mov	sp, r7
   15cd0:	b005      	add	sp, #20
   15cd2:	bd90      	pop	{r4, r7, pc}
   15cd4:	00015195 	.word	0x00015195
   15cd8:	000151db 	.word	0x000151db

00015cdc <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
   15cdc:	b590      	push	{r4, r7, lr}
   15cde:	b087      	sub	sp, #28
   15ce0:	af00      	add	r7, sp, #0
   15ce2:	6078      	str	r0, [r7, #4]
   15ce4:	000a      	movs	r2, r1
   15ce6:	1cfb      	adds	r3, r7, #3
   15ce8:	701a      	strb	r2, [r3, #0]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
   15cea:	230c      	movs	r3, #12
   15cec:	18fa      	adds	r2, r7, r3
   15cee:	6878      	ldr	r0, [r7, #4]
   15cf0:	2301      	movs	r3, #1
   15cf2:	2118      	movs	r1, #24
   15cf4:	4c28      	ldr	r4, [pc, #160]	; (15d98 <lsm6dso_i3c_disable_set+0xbc>)
   15cf6:	47a0      	blx	r4
   15cf8:	0003      	movs	r3, r0
   15cfa:	617b      	str	r3, [r7, #20]

  if (ret == 0)
   15cfc:	697b      	ldr	r3, [r7, #20]
   15cfe:	2b00      	cmp	r3, #0
   15d00:	d11c      	bne.n	15d3c <lsm6dso_i3c_disable_set+0x60>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
   15d02:	1cfb      	adds	r3, r7, #3
   15d04:	781b      	ldrb	r3, [r3, #0]
   15d06:	09db      	lsrs	r3, r3, #7
   15d08:	b2db      	uxtb	r3, r3
   15d0a:	1c1a      	adds	r2, r3, #0
   15d0c:	2301      	movs	r3, #1
   15d0e:	4013      	ands	r3, r2
   15d10:	b2da      	uxtb	r2, r3
   15d12:	230c      	movs	r3, #12
   15d14:	18fb      	adds	r3, r7, r3
   15d16:	2101      	movs	r1, #1
   15d18:	400a      	ands	r2, r1
   15d1a:	1890      	adds	r0, r2, r2
   15d1c:	781a      	ldrb	r2, [r3, #0]
   15d1e:	2102      	movs	r1, #2
   15d20:	438a      	bics	r2, r1
   15d22:	1c11      	adds	r1, r2, #0
   15d24:	1c02      	adds	r2, r0, #0
   15d26:	430a      	orrs	r2, r1
   15d28:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
   15d2a:	230c      	movs	r3, #12
   15d2c:	18fa      	adds	r2, r7, r3
   15d2e:	6878      	ldr	r0, [r7, #4]
   15d30:	2301      	movs	r3, #1
   15d32:	2118      	movs	r1, #24
   15d34:	4c19      	ldr	r4, [pc, #100]	; (15d9c <lsm6dso_i3c_disable_set+0xc0>)
   15d36:	47a0      	blx	r4
   15d38:	0003      	movs	r3, r0
   15d3a:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
   15d3c:	697b      	ldr	r3, [r7, #20]
   15d3e:	2b00      	cmp	r3, #0
   15d40:	d108      	bne.n	15d54 <lsm6dso_i3c_disable_set+0x78>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
   15d42:	2310      	movs	r3, #16
   15d44:	18fa      	adds	r2, r7, r3
   15d46:	6878      	ldr	r0, [r7, #4]
   15d48:	2301      	movs	r3, #1
   15d4a:	2162      	movs	r1, #98	; 0x62
   15d4c:	4c12      	ldr	r4, [pc, #72]	; (15d98 <lsm6dso_i3c_disable_set+0xbc>)
   15d4e:	47a0      	blx	r4
   15d50:	0003      	movs	r3, r0
   15d52:	617b      	str	r3, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
   15d54:	697b      	ldr	r3, [r7, #20]
   15d56:	2b00      	cmp	r3, #0
   15d58:	d119      	bne.n	15d8e <lsm6dso_i3c_disable_set+0xb2>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
   15d5a:	1cfb      	adds	r3, r7, #3
   15d5c:	781b      	ldrb	r3, [r3, #0]
   15d5e:	2203      	movs	r2, #3
   15d60:	4013      	ands	r3, r2
   15d62:	b2da      	uxtb	r2, r3
   15d64:	2310      	movs	r3, #16
   15d66:	18fb      	adds	r3, r7, r3
   15d68:	2103      	movs	r1, #3
   15d6a:	400a      	ands	r2, r1
   15d6c:	00d0      	lsls	r0, r2, #3
   15d6e:	781a      	ldrb	r2, [r3, #0]
   15d70:	2118      	movs	r1, #24
   15d72:	438a      	bics	r2, r1
   15d74:	1c11      	adds	r1, r2, #0
   15d76:	1c02      	adds	r2, r0, #0
   15d78:	430a      	orrs	r2, r1
   15d7a:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
   15d7c:	2310      	movs	r3, #16
   15d7e:	18fa      	adds	r2, r7, r3
   15d80:	6878      	ldr	r0, [r7, #4]
   15d82:	2301      	movs	r3, #1
   15d84:	2162      	movs	r1, #98	; 0x62
   15d86:	4c05      	ldr	r4, [pc, #20]	; (15d9c <lsm6dso_i3c_disable_set+0xc0>)
   15d88:	47a0      	blx	r4
   15d8a:	0003      	movs	r3, r0
   15d8c:	617b      	str	r3, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
   15d8e:	697b      	ldr	r3, [r7, #20]
}
   15d90:	0018      	movs	r0, r3
   15d92:	46bd      	mov	sp, r7
   15d94:	b007      	add	sp, #28
   15d96:	bd90      	pop	{r4, r7, pc}
   15d98:	00015195 	.word	0x00015195
   15d9c:	000151db 	.word	0x000151db

00015da0 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
   15da0:	b590      	push	{r4, r7, lr}
   15da2:	b085      	sub	sp, #20
   15da4:	af00      	add	r7, sp, #0
   15da6:	6078      	str	r0, [r7, #4]
   15da8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
   15daa:	687b      	ldr	r3, [r7, #4]
   15dac:	2102      	movs	r1, #2
   15dae:	0018      	movs	r0, r3
   15db0:	4b0e      	ldr	r3, [pc, #56]	; (15dec <lsm6dso_fsm_enable_get+0x4c>)
   15db2:	4798      	blx	r3
   15db4:	0003      	movs	r3, r0
   15db6:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15db8:	68fb      	ldr	r3, [r7, #12]
   15dba:	2b00      	cmp	r3, #0
   15dbc:	d107      	bne.n	15dce <lsm6dso_fsm_enable_get+0x2e>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
   15dbe:	683a      	ldr	r2, [r7, #0]
   15dc0:	6878      	ldr	r0, [r7, #4]
   15dc2:	2302      	movs	r3, #2
   15dc4:	2146      	movs	r1, #70	; 0x46
   15dc6:	4c0a      	ldr	r4, [pc, #40]	; (15df0 <lsm6dso_fsm_enable_get+0x50>)
   15dc8:	47a0      	blx	r4
   15dca:	0003      	movs	r3, r0
   15dcc:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0)
   15dce:	68fb      	ldr	r3, [r7, #12]
   15dd0:	2b00      	cmp	r3, #0
   15dd2:	d106      	bne.n	15de2 <lsm6dso_fsm_enable_get+0x42>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
   15dd4:	687b      	ldr	r3, [r7, #4]
   15dd6:	2100      	movs	r1, #0
   15dd8:	0018      	movs	r0, r3
   15dda:	4b04      	ldr	r3, [pc, #16]	; (15dec <lsm6dso_fsm_enable_get+0x4c>)
   15ddc:	4798      	blx	r3
   15dde:	0003      	movs	r3, r0
   15de0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15de2:	68fb      	ldr	r3, [r7, #12]
}
   15de4:	0018      	movs	r0, r3
   15de6:	46bd      	mov	sp, r7
   15de8:	b005      	add	sp, #20
   15dea:	bd90      	pop	{r4, r7, pc}
   15dec:	00015a81 	.word	0x00015a81
   15df0:	00015195 	.word	0x00015195

00015df4 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
   15df4:	b590      	push	{r4, r7, lr}
   15df6:	b085      	sub	sp, #20
   15df8:	af00      	add	r7, sp, #0
   15dfa:	6078      	str	r0, [r7, #4]
   15dfc:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
   15dfe:	687b      	ldr	r3, [r7, #4]
   15e00:	2102      	movs	r1, #2
   15e02:	0018      	movs	r0, r3
   15e04:	4b21      	ldr	r3, [pc, #132]	; (15e8c <lsm6dso_fsm_data_rate_get+0x98>)
   15e06:	4798      	blx	r3
   15e08:	0003      	movs	r3, r0
   15e0a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15e0c:	68fb      	ldr	r3, [r7, #12]
   15e0e:	2b00      	cmp	r3, #0
   15e10:	d108      	bne.n	15e24 <lsm6dso_fsm_data_rate_get+0x30>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
   15e12:	2308      	movs	r3, #8
   15e14:	18fa      	adds	r2, r7, r3
   15e16:	6878      	ldr	r0, [r7, #4]
   15e18:	2301      	movs	r3, #1
   15e1a:	215f      	movs	r1, #95	; 0x5f
   15e1c:	4c1c      	ldr	r4, [pc, #112]	; (15e90 <lsm6dso_fsm_data_rate_get+0x9c>)
   15e1e:	47a0      	blx	r4
   15e20:	0003      	movs	r3, r0
   15e22:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
   15e24:	68fb      	ldr	r3, [r7, #12]
   15e26:	2b00      	cmp	r3, #0
   15e28:	d12b      	bne.n	15e82 <lsm6dso_fsm_data_rate_get+0x8e>
  {
    switch (reg.fsm_odr)
   15e2a:	2308      	movs	r3, #8
   15e2c:	18fb      	adds	r3, r7, r3
   15e2e:	781b      	ldrb	r3, [r3, #0]
   15e30:	06db      	lsls	r3, r3, #27
   15e32:	0f9b      	lsrs	r3, r3, #30
   15e34:	b2db      	uxtb	r3, r3
   15e36:	2b01      	cmp	r3, #1
   15e38:	d00c      	beq.n	15e54 <lsm6dso_fsm_data_rate_get+0x60>
   15e3a:	dc02      	bgt.n	15e42 <lsm6dso_fsm_data_rate_get+0x4e>
   15e3c:	2b00      	cmp	r3, #0
   15e3e:	d005      	beq.n	15e4c <lsm6dso_fsm_data_rate_get+0x58>
   15e40:	e014      	b.n	15e6c <lsm6dso_fsm_data_rate_get+0x78>
   15e42:	2b02      	cmp	r3, #2
   15e44:	d00a      	beq.n	15e5c <lsm6dso_fsm_data_rate_get+0x68>
   15e46:	2b03      	cmp	r3, #3
   15e48:	d00c      	beq.n	15e64 <lsm6dso_fsm_data_rate_get+0x70>
   15e4a:	e00f      	b.n	15e6c <lsm6dso_fsm_data_rate_get+0x78>
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
   15e4c:	683b      	ldr	r3, [r7, #0]
   15e4e:	2200      	movs	r2, #0
   15e50:	701a      	strb	r2, [r3, #0]
        break;
   15e52:	e00f      	b.n	15e74 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
   15e54:	683b      	ldr	r3, [r7, #0]
   15e56:	2201      	movs	r2, #1
   15e58:	701a      	strb	r2, [r3, #0]
        break;
   15e5a:	e00b      	b.n	15e74 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
   15e5c:	683b      	ldr	r3, [r7, #0]
   15e5e:	2202      	movs	r2, #2
   15e60:	701a      	strb	r2, [r3, #0]
        break;
   15e62:	e007      	b.n	15e74 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
   15e64:	683b      	ldr	r3, [r7, #0]
   15e66:	2203      	movs	r2, #3
   15e68:	701a      	strb	r2, [r3, #0]
        break;
   15e6a:	e003      	b.n	15e74 <lsm6dso_fsm_data_rate_get+0x80>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
   15e6c:	683b      	ldr	r3, [r7, #0]
   15e6e:	2200      	movs	r2, #0
   15e70:	701a      	strb	r2, [r3, #0]
        break;
   15e72:	46c0      	nop			; (mov r8, r8)
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
   15e74:	687b      	ldr	r3, [r7, #4]
   15e76:	2100      	movs	r1, #0
   15e78:	0018      	movs	r0, r3
   15e7a:	4b04      	ldr	r3, [pc, #16]	; (15e8c <lsm6dso_fsm_data_rate_get+0x98>)
   15e7c:	4798      	blx	r3
   15e7e:	0003      	movs	r3, r0
   15e80:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15e82:	68fb      	ldr	r3, [r7, #12]
}
   15e84:	0018      	movs	r0, r3
   15e86:	46bd      	mov	sp, r7
   15e88:	b005      	add	sp, #20
   15e8a:	bd90      	pop	{r4, r7, pc}
   15e8c:	00015a81 	.word	0x00015a81
   15e90:	00015195 	.word	0x00015195

00015e94 <platform_write>:
 * @param[in]   len Length of the data sent
 * @return      Returns what the function "I2cWriteDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp,uint16_t len)
{
   15e94:	b580      	push	{r7, lr}
   15e96:	b084      	sub	sp, #16
   15e98:	af00      	add	r7, sp, #0
   15e9a:	60f8      	str	r0, [r7, #12]
   15e9c:	0008      	movs	r0, r1
   15e9e:	607a      	str	r2, [r7, #4]
   15ea0:	0019      	movs	r1, r3
   15ea2:	230b      	movs	r3, #11
   15ea4:	18fb      	adds	r3, r7, r3
   15ea6:	1c02      	adds	r2, r0, #0
   15ea8:	701a      	strb	r2, [r3, #0]
   15eaa:	2308      	movs	r3, #8
   15eac:	18fb      	adds	r3, r7, r3
   15eae:	1c0a      	adds	r2, r1, #0
   15eb0:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Use the array "msgOutImu" to copy the data to be sent. Remember that the position [0] of the array you send must be the register, and
	//starting from position [1] you can copy the data to be sent. Remember to adjust the length accordingly
return 0;
   15eb2:	2300      	movs	r3, #0

}
   15eb4:	0018      	movs	r0, r3
   15eb6:	46bd      	mov	sp, r7
   15eb8:	b004      	add	sp, #16
   15eba:	bd80      	pop	{r7, pc}

00015ebc <platform_read>:
 * @param[in]   len Length of the data to be read
 * @return      Returns what the function "I2cReadDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static  int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
   15ebc:	b580      	push	{r7, lr}
   15ebe:	b084      	sub	sp, #16
   15ec0:	af00      	add	r7, sp, #0
   15ec2:	60f8      	str	r0, [r7, #12]
   15ec4:	0008      	movs	r0, r1
   15ec6:	607a      	str	r2, [r7, #4]
   15ec8:	0019      	movs	r1, r3
   15eca:	230b      	movs	r3, #11
   15ecc:	18fb      	adds	r3, r7, r3
   15ece:	1c02      	adds	r2, r0, #0
   15ed0:	701a      	strb	r2, [r3, #0]
   15ed2:	2308      	movs	r3, #8
   15ed4:	18fb      	adds	r3, r7, r3
   15ed6:	1c0a      	adds	r2, r1, #0
   15ed8:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Check the structure "imuData" and notice that it has a msgOut and msgIn parameter. How do we fill this to our advantage?
return 0;
   15eda:	2300      	movs	r3, #0


}
   15edc:	0018      	movs	r0, r3
   15ede:	46bd      	mov	sp, r7
   15ee0:	b004      	add	sp, #16
   15ee2:	bd80      	pop	{r7, pc}

00015ee4 <GetImuStruct>:


stmdev_ctx_t * GetImuStruct(void)
{
   15ee4:	b580      	push	{r7, lr}
   15ee6:	af00      	add	r7, sp, #0
return &dev_ctx;
   15ee8:	4b01      	ldr	r3, [pc, #4]	; (15ef0 <GetImuStruct+0xc>)
}
   15eea:	0018      	movs	r0, r3
   15eec:	46bd      	mov	sp, r7
   15eee:	bd80      	pop	{r7, pc}
   15ef0:	20000014 	.word	0x20000014

00015ef4 <InitImu>:



int32_t InitImu(void)
{
   15ef4:	b580      	push	{r7, lr}
   15ef6:	b082      	sub	sp, #8
   15ef8:	af00      	add	r7, sp, #0
uint8_t rst;
int32_t error = 0;
   15efa:	2300      	movs	r3, #0
   15efc:	607b      	str	r3, [r7, #4]
/*
   * Restore default configuration
   */
  error = lsm6dso_reset_set(&dev_ctx, PROPERTY_ENABLE);
   15efe:	4b23      	ldr	r3, [pc, #140]	; (15f8c <InitImu+0x98>)
   15f00:	2101      	movs	r1, #1
   15f02:	0018      	movs	r0, r3
   15f04:	4b22      	ldr	r3, [pc, #136]	; (15f90 <InitImu+0x9c>)
   15f06:	4798      	blx	r3
   15f08:	0003      	movs	r3, r0
   15f0a:	607b      	str	r3, [r7, #4]
  do {
    error |= lsm6dso_reset_get(&dev_ctx, &rst);
   15f0c:	1cfa      	adds	r2, r7, #3
   15f0e:	4b1f      	ldr	r3, [pc, #124]	; (15f8c <InitImu+0x98>)
   15f10:	0011      	movs	r1, r2
   15f12:	0018      	movs	r0, r3
   15f14:	4b1f      	ldr	r3, [pc, #124]	; (15f94 <InitImu+0xa0>)
   15f16:	4798      	blx	r3
   15f18:	0002      	movs	r2, r0
   15f1a:	687b      	ldr	r3, [r7, #4]
   15f1c:	4313      	orrs	r3, r2
   15f1e:	607b      	str	r3, [r7, #4]
  } while (rst);
   15f20:	1cfb      	adds	r3, r7, #3
   15f22:	781b      	ldrb	r3, [r3, #0]
   15f24:	2b00      	cmp	r3, #0
   15f26:	d1f1      	bne.n	15f0c <InitImu+0x18>

  /* Disable I3C interface */
  lsm6dso_i3c_disable_set(&dev_ctx, LSM6DSO_I3C_DISABLE);
   15f28:	4b18      	ldr	r3, [pc, #96]	; (15f8c <InitImu+0x98>)
   15f2a:	2180      	movs	r1, #128	; 0x80
   15f2c:	0018      	movs	r0, r3
   15f2e:	4b1a      	ldr	r3, [pc, #104]	; (15f98 <InitImu+0xa4>)
   15f30:	4798      	blx	r3
  /* Enable Block Data Update */
  lsm6dso_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
   15f32:	4b16      	ldr	r3, [pc, #88]	; (15f8c <InitImu+0x98>)
   15f34:	2101      	movs	r1, #1
   15f36:	0018      	movs	r0, r3
   15f38:	4b18      	ldr	r3, [pc, #96]	; (15f9c <InitImu+0xa8>)
   15f3a:	4798      	blx	r3
  /* Weight of XL user offset to 2^(-10) g/LSB */
  lsm6dso_xl_offset_weight_set(&dev_ctx, LSM6DSO_LSb_1mg);
   15f3c:	4b13      	ldr	r3, [pc, #76]	; (15f8c <InitImu+0x98>)
   15f3e:	2100      	movs	r1, #0
   15f40:	0018      	movs	r0, r3
   15f42:	4b17      	ldr	r3, [pc, #92]	; (15fa0 <InitImu+0xac>)
   15f44:	4798      	blx	r3
  /* Accelerometer X,Y,Z axis user offset correction expressed
   * in two’s complement. Set X to 48mg, Y tp 64 mg, Z to -127 mg
   */

  /* Set Output Data Rate */
  lsm6dso_xl_data_rate_set(&dev_ctx, LSM6DSO_XL_ODR_12Hz5);
   15f46:	4b11      	ldr	r3, [pc, #68]	; (15f8c <InitImu+0x98>)
   15f48:	2101      	movs	r1, #1
   15f4a:	0018      	movs	r0, r3
   15f4c:	4b15      	ldr	r3, [pc, #84]	; (15fa4 <InitImu+0xb0>)
   15f4e:	4798      	blx	r3
  lsm6dso_gy_data_rate_set(&dev_ctx, LSM6DSO_GY_ODR_12Hz5);
   15f50:	4b0e      	ldr	r3, [pc, #56]	; (15f8c <InitImu+0x98>)
   15f52:	2101      	movs	r1, #1
   15f54:	0018      	movs	r0, r3
   15f56:	4b14      	ldr	r3, [pc, #80]	; (15fa8 <InitImu+0xb4>)
   15f58:	4798      	blx	r3
  /* Set full scale */
  lsm6dso_xl_full_scale_set(&dev_ctx, LSM6DSO_2g);
   15f5a:	4b0c      	ldr	r3, [pc, #48]	; (15f8c <InitImu+0x98>)
   15f5c:	2100      	movs	r1, #0
   15f5e:	0018      	movs	r0, r3
   15f60:	4b12      	ldr	r3, [pc, #72]	; (15fac <InitImu+0xb8>)
   15f62:	4798      	blx	r3
  lsm6dso_gy_full_scale_set(&dev_ctx, LSM6DSO_2000dps);
   15f64:	4b09      	ldr	r3, [pc, #36]	; (15f8c <InitImu+0x98>)
   15f66:	2106      	movs	r1, #6
   15f68:	0018      	movs	r0, r3
   15f6a:	4b11      	ldr	r3, [pc, #68]	; (15fb0 <InitImu+0xbc>)
   15f6c:	4798      	blx	r3
  /* Configure filtering chain(No aux interface). */
  /* Accelerometer - LPF1 + LPF2 path */
  lsm6dso_xl_hp_path_on_out_set(&dev_ctx, LSM6DSO_LP_ODR_DIV_100);
   15f6e:	4b07      	ldr	r3, [pc, #28]	; (15f8c <InitImu+0x98>)
   15f70:	2104      	movs	r1, #4
   15f72:	0018      	movs	r0, r3
   15f74:	4b0f      	ldr	r3, [pc, #60]	; (15fb4 <InitImu+0xc0>)
   15f76:	4798      	blx	r3
  lsm6dso_xl_filter_lp2_set(&dev_ctx, PROPERTY_ENABLE);
   15f78:	4b04      	ldr	r3, [pc, #16]	; (15f8c <InitImu+0x98>)
   15f7a:	2101      	movs	r1, #1
   15f7c:	0018      	movs	r0, r3
   15f7e:	4b0e      	ldr	r3, [pc, #56]	; (15fb8 <InitImu+0xc4>)
   15f80:	4798      	blx	r3

  return error;
   15f82:	687b      	ldr	r3, [r7, #4]
}
   15f84:	0018      	movs	r0, r3
   15f86:	46bd      	mov	sp, r7
   15f88:	b002      	add	sp, #8
   15f8a:	bd80      	pop	{r7, pc}
   15f8c:	20000014 	.word	0x20000014
   15f90:	00015b11 	.word	0x00015b11
   15f94:	00015b7d 	.word	0x00015b7d
   15f98:	00015cdd 	.word	0x00015cdd
   15f9c:	000158b9 	.word	0x000158b9
   15fa0:	00015925 	.word	0x00015925
   15fa4:	000152c5 	.word	0x000152c5
   15fa8:	000155f5 	.word	0x000155f5
   15fac:	00015259 	.word	0x00015259
   15fb0:	00015589 	.word	0x00015589
   15fb4:	00015c25 	.word	0x00015c25
   15fb8:	00015bb9 	.word	0x00015bb9

00015fbc <InitializeSeesaw>:

 * @return		Returns 0 if no errors.
 * @note
 */
int InitializeSeesaw(void)
{
   15fbc:	b580      	push	{r7, lr}
   15fbe:	b082      	sub	sp, #8
   15fc0:	af00      	add	r7, sp, #0
    uint8_t readData[2];
    seesawData.address = NEO_TRELLIS_ADDR;
   15fc2:	4b38      	ldr	r3, [pc, #224]	; (160a4 <InitializeSeesaw+0xe8>)
   15fc4:	222e      	movs	r2, #46	; 0x2e
   15fc6:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgBaseGetHWID[0];
   15fc8:	4b36      	ldr	r3, [pc, #216]	; (160a4 <InitializeSeesaw+0xe8>)
   15fca:	4a37      	ldr	r2, [pc, #220]	; (160a8 <InitializeSeesaw+0xec>)
   15fcc:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgBaseGetHWID);
   15fce:	4b35      	ldr	r3, [pc, #212]	; (160a4 <InitializeSeesaw+0xe8>)
   15fd0:	2202      	movs	r2, #2
   15fd2:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = &readData[0];
   15fd4:	4b33      	ldr	r3, [pc, #204]	; (160a4 <InitializeSeesaw+0xe8>)
   15fd6:	003a      	movs	r2, r7
   15fd8:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = 1;
   15fda:	4b32      	ldr	r3, [pc, #200]	; (160a4 <InitializeSeesaw+0xe8>)
   15fdc:	2201      	movs	r2, #1
   15fde:	819a      	strh	r2, [r3, #12]

    // Check if device is on the line - it should answer with its HW ID

    int error = I2cReadDataWait(&seesawData, 0, 100);
   15fe0:	4b30      	ldr	r3, [pc, #192]	; (160a4 <InitializeSeesaw+0xe8>)
   15fe2:	2264      	movs	r2, #100	; 0x64
   15fe4:	2100      	movs	r1, #0
   15fe6:	0018      	movs	r0, r3
   15fe8:	4b30      	ldr	r3, [pc, #192]	; (160ac <InitializeSeesaw+0xf0>)
   15fea:	4798      	blx	r3
   15fec:	0003      	movs	r3, r0
   15fee:	607b      	str	r3, [r7, #4]

    if (ERROR_NONE != error) {
   15ff0:	687b      	ldr	r3, [r7, #4]
   15ff2:	2b00      	cmp	r3, #0
   15ff4:	d004      	beq.n	16000 <InitializeSeesaw+0x44>
        SerialConsoleWriteString("Error initializing Seesaw!/r/n");
   15ff6:	4b2e      	ldr	r3, [pc, #184]	; (160b0 <InitializeSeesaw+0xf4>)
   15ff8:	0018      	movs	r0, r3
   15ffa:	4b2e      	ldr	r3, [pc, #184]	; (160b4 <InitializeSeesaw+0xf8>)
   15ffc:	4798      	blx	r3
   15ffe:	e00c      	b.n	1601a <InitializeSeesaw+0x5e>
    } else {
        if (readData[0] != SEESAW_HW_ID_CODE) {
   16000:	003b      	movs	r3, r7
   16002:	781b      	ldrb	r3, [r3, #0]
   16004:	2b55      	cmp	r3, #85	; 0x55
   16006:	d004      	beq.n	16012 <InitializeSeesaw+0x56>
            SerialConsoleWriteString("Error/r/n");
   16008:	4b2b      	ldr	r3, [pc, #172]	; (160b8 <InitializeSeesaw+0xfc>)
   1600a:	0018      	movs	r0, r3
   1600c:	4b29      	ldr	r3, [pc, #164]	; (160b4 <InitializeSeesaw+0xf8>)
   1600e:	4798      	blx	r3
   16010:	e003      	b.n	1601a <InitializeSeesaw+0x5e>
        } else {
            SerialConsoleWriteString("Found Seesaw!/r/n");
   16012:	4b2a      	ldr	r3, [pc, #168]	; (160bc <InitializeSeesaw+0x100>)
   16014:	0018      	movs	r0, r3
   16016:	4b27      	ldr	r3, [pc, #156]	; (160b4 <InitializeSeesaw+0xf8>)
   16018:	4798      	blx	r3
        }
    }

    // Tell the Seesaw which pins to use
    seesawData.msgOut = &msgNeopixelPin[0];
   1601a:	4b22      	ldr	r3, [pc, #136]	; (160a4 <InitializeSeesaw+0xe8>)
   1601c:	4a28      	ldr	r2, [pc, #160]	; (160c0 <InitializeSeesaw+0x104>)
   1601e:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgNeopixelPin);
   16020:	4b20      	ldr	r3, [pc, #128]	; (160a4 <InitializeSeesaw+0xe8>)
   16022:	2203      	movs	r2, #3
   16024:	81da      	strh	r2, [r3, #14]

    error = I2cWriteDataWait(&seesawData, 100);
   16026:	4b1f      	ldr	r3, [pc, #124]	; (160a4 <InitializeSeesaw+0xe8>)
   16028:	2164      	movs	r1, #100	; 0x64
   1602a:	0018      	movs	r0, r3
   1602c:	4b25      	ldr	r3, [pc, #148]	; (160c4 <InitializeSeesaw+0x108>)
   1602e:	4798      	blx	r3
   16030:	0003      	movs	r3, r0
   16032:	607b      	str	r3, [r7, #4]
    if (ERROR_NONE != error) {
   16034:	687b      	ldr	r3, [r7, #4]
   16036:	2b00      	cmp	r3, #0
   16038:	d003      	beq.n	16042 <InitializeSeesaw+0x86>
        SerialConsoleWriteString("Could not write Seesaw pin!/r/n");
   1603a:	4b23      	ldr	r3, [pc, #140]	; (160c8 <InitializeSeesaw+0x10c>)
   1603c:	0018      	movs	r0, r3
   1603e:	4b1d      	ldr	r3, [pc, #116]	; (160b4 <InitializeSeesaw+0xf8>)
   16040:	4798      	blx	r3
    }

    // Set seesaw Neopixel speed
    seesawData.msgOut = &msgNeopixelSpeed[0];
   16042:	4b18      	ldr	r3, [pc, #96]	; (160a4 <InitializeSeesaw+0xe8>)
   16044:	4a21      	ldr	r2, [pc, #132]	; (160cc <InitializeSeesaw+0x110>)
   16046:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgNeopixelSpeed);
   16048:	4b16      	ldr	r3, [pc, #88]	; (160a4 <InitializeSeesaw+0xe8>)
   1604a:	2203      	movs	r2, #3
   1604c:	81da      	strh	r2, [r3, #14]

    error = I2cWriteDataWait(&seesawData, 100);
   1604e:	4b15      	ldr	r3, [pc, #84]	; (160a4 <InitializeSeesaw+0xe8>)
   16050:	2164      	movs	r1, #100	; 0x64
   16052:	0018      	movs	r0, r3
   16054:	4b1b      	ldr	r3, [pc, #108]	; (160c4 <InitializeSeesaw+0x108>)
   16056:	4798      	blx	r3
   16058:	0003      	movs	r3, r0
   1605a:	607b      	str	r3, [r7, #4]
    if (ERROR_NONE != error) {
   1605c:	687b      	ldr	r3, [r7, #4]
   1605e:	2b00      	cmp	r3, #0
   16060:	d003      	beq.n	1606a <InitializeSeesaw+0xae>
        SerialConsoleWriteString("Could not set seesaw Neopixel speed!/r/n");
   16062:	4b1b      	ldr	r3, [pc, #108]	; (160d0 <InitializeSeesaw+0x114>)
   16064:	0018      	movs	r0, r3
   16066:	4b13      	ldr	r3, [pc, #76]	; (160b4 <InitializeSeesaw+0xf8>)
   16068:	4798      	blx	r3
    }

    // Set seesaw Neopixel number of devices
    seesawData.msgOut = &msgNeopixelBufLength[0];
   1606a:	4b0e      	ldr	r3, [pc, #56]	; (160a4 <InitializeSeesaw+0xe8>)
   1606c:	4a19      	ldr	r2, [pc, #100]	; (160d4 <InitializeSeesaw+0x118>)
   1606e:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgNeopixelBufLength);
   16070:	4b0c      	ldr	r3, [pc, #48]	; (160a4 <InitializeSeesaw+0xe8>)
   16072:	2204      	movs	r2, #4
   16074:	81da      	strh	r2, [r3, #14]

    error = I2cWriteDataWait(&seesawData, 100);
   16076:	4b0b      	ldr	r3, [pc, #44]	; (160a4 <InitializeSeesaw+0xe8>)
   16078:	2164      	movs	r1, #100	; 0x64
   1607a:	0018      	movs	r0, r3
   1607c:	4b11      	ldr	r3, [pc, #68]	; (160c4 <InitializeSeesaw+0x108>)
   1607e:	4798      	blx	r3
   16080:	0003      	movs	r3, r0
   16082:	607b      	str	r3, [r7, #4]
    if (ERROR_NONE != error) {
   16084:	687b      	ldr	r3, [r7, #4]
   16086:	2b00      	cmp	r3, #0
   16088:	d003      	beq.n	16092 <InitializeSeesaw+0xd6>
        SerialConsoleWriteString("Could not set seesaw Neopixel number of devices/r/n");
   1608a:	4b13      	ldr	r3, [pc, #76]	; (160d8 <InitializeSeesaw+0x11c>)
   1608c:	0018      	movs	r0, r3
   1608e:	4b09      	ldr	r3, [pc, #36]	; (160b4 <InitializeSeesaw+0xf8>)
   16090:	4798      	blx	r3
    }

    SeesawTurnOnLedTest();
   16092:	4b12      	ldr	r3, [pc, #72]	; (160dc <InitializeSeesaw+0x120>)
   16094:	4798      	blx	r3

    SeesawInitializeKeypad();
   16096:	4b12      	ldr	r3, [pc, #72]	; (160e0 <InitializeSeesaw+0x124>)
   16098:	4798      	blx	r3
    return error;
   1609a:	687b      	ldr	r3, [r7, #4]
}
   1609c:	0018      	movs	r0, r3
   1609e:	46bd      	mov	sp, r7
   160a0:	b002      	add	sp, #8
   160a2:	bd80      	pop	{r7, pc}
   160a4:	200044a4 	.word	0x200044a4
   160a8:	00037004 	.word	0x00037004
   160ac:	0001507d 	.word	0x0001507d
   160b0:	0003701c 	.word	0x0003701c
   160b4:	0001ea39 	.word	0x0001ea39
   160b8:	0003703c 	.word	0x0003703c
   160bc:	00037048 	.word	0x00037048
   160c0:	00037008 	.word	0x00037008
   160c4:	00014fa5 	.word	0x00014fa5
   160c8:	0003705c 	.word	0x0003705c
   160cc:	0003700c 	.word	0x0003700c
   160d0:	0003707c 	.word	0x0003707c
   160d4:	00037010 	.word	0x00037010
   160d8:	000370a8 	.word	0x000370a8
   160dc:	00016491 	.word	0x00016491
   160e0:	000163a1 	.word	0x000163a1

000160e4 <SeesawGetKeypadCount>:

 * @return		Returns the number of events in the buffer. Use SeesawReadKeypad to read these events.
 * @note
*/
uint8_t SeesawGetKeypadCount(void)
{
   160e4:	b580      	push	{r7, lr}
   160e6:	b082      	sub	sp, #8
   160e8:	af00      	add	r7, sp, #0
    uint8_t count = 0;
   160ea:	1cfb      	adds	r3, r7, #3
   160ec:	2200      	movs	r2, #0
   160ee:	701a      	strb	r2, [r3, #0]
    seesawData.address = NEO_TRELLIS_ADDR;
   160f0:	4b11      	ldr	r3, [pc, #68]	; (16138 <SeesawGetKeypadCount+0x54>)
   160f2:	222e      	movs	r2, #46	; 0x2e
   160f4:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgKeypadGetCount[0];
   160f6:	4b10      	ldr	r3, [pc, #64]	; (16138 <SeesawGetKeypadCount+0x54>)
   160f8:	4a10      	ldr	r2, [pc, #64]	; (1613c <SeesawGetKeypadCount+0x58>)
   160fa:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgKeypadGetCount);
   160fc:	4b0e      	ldr	r3, [pc, #56]	; (16138 <SeesawGetKeypadCount+0x54>)
   160fe:	2202      	movs	r2, #2
   16100:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = &count;
   16102:	4b0d      	ldr	r3, [pc, #52]	; (16138 <SeesawGetKeypadCount+0x54>)
   16104:	1cfa      	adds	r2, r7, #3
   16106:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = 1;
   16108:	4b0b      	ldr	r3, [pc, #44]	; (16138 <SeesawGetKeypadCount+0x54>)
   1610a:	2201      	movs	r2, #1
   1610c:	819a      	strh	r2, [r3, #12]

    int error = I2cReadDataWait(&seesawData, 0, 100);
   1610e:	4b0a      	ldr	r3, [pc, #40]	; (16138 <SeesawGetKeypadCount+0x54>)
   16110:	2264      	movs	r2, #100	; 0x64
   16112:	2100      	movs	r1, #0
   16114:	0018      	movs	r0, r3
   16116:	4b0a      	ldr	r3, [pc, #40]	; (16140 <SeesawGetKeypadCount+0x5c>)
   16118:	4798      	blx	r3
   1611a:	0003      	movs	r3, r0
   1611c:	607b      	str	r3, [r7, #4]

    if (ERROR_NONE != error) {
   1611e:	687b      	ldr	r3, [r7, #4]
   16120:	2b00      	cmp	r3, #0
   16122:	d003      	beq.n	1612c <SeesawGetKeypadCount+0x48>
        SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   16124:	4b07      	ldr	r3, [pc, #28]	; (16144 <SeesawGetKeypadCount+0x60>)
   16126:	0018      	movs	r0, r3
   16128:	4b07      	ldr	r3, [pc, #28]	; (16148 <SeesawGetKeypadCount+0x64>)
   1612a:	4798      	blx	r3
    }
    return count;
   1612c:	1cfb      	adds	r3, r7, #3
   1612e:	781b      	ldrb	r3, [r3, #0]
}
   16130:	0018      	movs	r0, r3
   16132:	46bd      	mov	sp, r7
   16134:	b002      	add	sp, #8
   16136:	bd80      	pop	{r7, pc}
   16138:	200044a4 	.word	0x200044a4
   1613c:	00037018 	.word	0x00037018
   16140:	0001507d 	.word	0x0001507d
   16144:	000370dc 	.word	0x000370dc
   16148:	0001ea39 	.word	0x0001ea39

0001614c <SeesawReadKeypad>:

 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Use SeesawGetKeypadCount to know how many events are in buffer.
*/
int32_t SeesawReadKeypad(uint8_t *buffer, uint8_t count)
{
   1614c:	b580      	push	{r7, lr}
   1614e:	b084      	sub	sp, #16
   16150:	af00      	add	r7, sp, #0
   16152:	6078      	str	r0, [r7, #4]
   16154:	000a      	movs	r2, r1
   16156:	1cfb      	adds	r3, r7, #3
   16158:	701a      	strb	r2, [r3, #0]
    if (count == 0) return ERROR_NONE;
   1615a:	1cfb      	adds	r3, r7, #3
   1615c:	781b      	ldrb	r3, [r3, #0]
   1615e:	2b00      	cmp	r3, #0
   16160:	d101      	bne.n	16166 <SeesawReadKeypad+0x1a>
   16162:	2300      	movs	r3, #0
   16164:	e026      	b.n	161b4 <SeesawReadKeypad+0x68>
    uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_FIFO};
   16166:	2308      	movs	r3, #8
   16168:	18fb      	adds	r3, r7, r3
   1616a:	4a14      	ldr	r2, [pc, #80]	; (161bc <SeesawReadKeypad+0x70>)
   1616c:	8812      	ldrh	r2, [r2, #0]
   1616e:	801a      	strh	r2, [r3, #0]
    seesawData.address = NEO_TRELLIS_ADDR;
   16170:	4b13      	ldr	r3, [pc, #76]	; (161c0 <SeesawReadKeypad+0x74>)
   16172:	222e      	movs	r2, #46	; 0x2e
   16174:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = (const uint8_t*) &cmd[0];
   16176:	4b12      	ldr	r3, [pc, #72]	; (161c0 <SeesawReadKeypad+0x74>)
   16178:	2208      	movs	r2, #8
   1617a:	18ba      	adds	r2, r7, r2
   1617c:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(cmd);
   1617e:	4b10      	ldr	r3, [pc, #64]	; (161c0 <SeesawReadKeypad+0x74>)
   16180:	2202      	movs	r2, #2
   16182:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = buffer;
   16184:	4b0e      	ldr	r3, [pc, #56]	; (161c0 <SeesawReadKeypad+0x74>)
   16186:	687a      	ldr	r2, [r7, #4]
   16188:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = count;
   1618a:	1cfb      	adds	r3, r7, #3
   1618c:	781b      	ldrb	r3, [r3, #0]
   1618e:	b29a      	uxth	r2, r3
   16190:	4b0b      	ldr	r3, [pc, #44]	; (161c0 <SeesawReadKeypad+0x74>)
   16192:	819a      	strh	r2, [r3, #12]

    int error = I2cReadDataWait(&seesawData, 0, 100);
   16194:	4b0a      	ldr	r3, [pc, #40]	; (161c0 <SeesawReadKeypad+0x74>)
   16196:	2264      	movs	r2, #100	; 0x64
   16198:	2100      	movs	r1, #0
   1619a:	0018      	movs	r0, r3
   1619c:	4b09      	ldr	r3, [pc, #36]	; (161c4 <SeesawReadKeypad+0x78>)
   1619e:	4798      	blx	r3
   161a0:	0003      	movs	r3, r0
   161a2:	60fb      	str	r3, [r7, #12]

    if (ERROR_NONE != error) {
   161a4:	68fb      	ldr	r3, [r7, #12]
   161a6:	2b00      	cmp	r3, #0
   161a8:	d003      	beq.n	161b2 <SeesawReadKeypad+0x66>
        SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   161aa:	4b07      	ldr	r3, [pc, #28]	; (161c8 <SeesawReadKeypad+0x7c>)
   161ac:	0018      	movs	r0, r3
   161ae:	4b07      	ldr	r3, [pc, #28]	; (161cc <SeesawReadKeypad+0x80>)
   161b0:	4798      	blx	r3
    }
    return error;
   161b2:	68fb      	ldr	r3, [r7, #12]
}
   161b4:	0018      	movs	r0, r3
   161b6:	46bd      	mov	sp, r7
   161b8:	b004      	add	sp, #16
   161ba:	bd80      	pop	{r7, pc}
   161bc:	00037100 	.word	0x00037100
   161c0:	200044a4 	.word	0x200044a4
   161c4:	0001507d 	.word	0x0001507d
   161c8:	000370dc 	.word	0x000370dc
   161cc:	0001ea39 	.word	0x0001ea39

000161d0 <SeesawActivateKey>:

 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note
*/
int32_t SeesawActivateKey(uint8_t key, uint8_t edge, bool enable)
{
   161d0:	b590      	push	{r4, r7, lr}
   161d2:	b087      	sub	sp, #28
   161d4:	af00      	add	r7, sp, #0
   161d6:	0004      	movs	r4, r0
   161d8:	0008      	movs	r0, r1
   161da:	0011      	movs	r1, r2
   161dc:	1dfb      	adds	r3, r7, #7
   161de:	1c22      	adds	r2, r4, #0
   161e0:	701a      	strb	r2, [r3, #0]
   161e2:	1dbb      	adds	r3, r7, #6
   161e4:	1c02      	adds	r2, r0, #0
   161e6:	701a      	strb	r2, [r3, #0]
   161e8:	1d7b      	adds	r3, r7, #5
   161ea:	1c0a      	adds	r2, r1, #0
   161ec:	701a      	strb	r2, [r3, #0]
    union keyState ks;
    ks.bit.STATE = enable;
   161ee:	2310      	movs	r3, #16
   161f0:	18fb      	adds	r3, r7, r3
   161f2:	1d7a      	adds	r2, r7, #5
   161f4:	7812      	ldrb	r2, [r2, #0]
   161f6:	2101      	movs	r1, #1
   161f8:	0010      	movs	r0, r2
   161fa:	4008      	ands	r0, r1
   161fc:	781a      	ldrb	r2, [r3, #0]
   161fe:	2101      	movs	r1, #1
   16200:	438a      	bics	r2, r1
   16202:	1c11      	adds	r1, r2, #0
   16204:	1c02      	adds	r2, r0, #0
   16206:	430a      	orrs	r2, r1
   16208:	701a      	strb	r2, [r3, #0]
    ks.bit.ACTIVE = (1 << edge);
   1620a:	1dbb      	adds	r3, r7, #6
   1620c:	781b      	ldrb	r3, [r3, #0]
   1620e:	2201      	movs	r2, #1
   16210:	409a      	lsls	r2, r3
   16212:	0013      	movs	r3, r2
   16214:	b2db      	uxtb	r3, r3
   16216:	1c1a      	adds	r2, r3, #0
   16218:	230f      	movs	r3, #15
   1621a:	4013      	ands	r3, r2
   1621c:	b2da      	uxtb	r2, r3
   1621e:	2310      	movs	r3, #16
   16220:	18fb      	adds	r3, r7, r3
   16222:	210f      	movs	r1, #15
   16224:	400a      	ands	r2, r1
   16226:	1890      	adds	r0, r2, r2
   16228:	781a      	ldrb	r2, [r3, #0]
   1622a:	211e      	movs	r1, #30
   1622c:	438a      	bics	r2, r1
   1622e:	1c11      	adds	r1, r2, #0
   16230:	1c02      	adds	r2, r0, #0
   16232:	430a      	orrs	r2, r1
   16234:	701a      	strb	r2, [r3, #0]
    uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_EVENT, key, ks.reg};
   16236:	230c      	movs	r3, #12
   16238:	18fb      	adds	r3, r7, r3
   1623a:	2210      	movs	r2, #16
   1623c:	701a      	strb	r2, [r3, #0]
   1623e:	230c      	movs	r3, #12
   16240:	18fb      	adds	r3, r7, r3
   16242:	2201      	movs	r2, #1
   16244:	705a      	strb	r2, [r3, #1]
   16246:	230c      	movs	r3, #12
   16248:	18fb      	adds	r3, r7, r3
   1624a:	1dfa      	adds	r2, r7, #7
   1624c:	7812      	ldrb	r2, [r2, #0]
   1624e:	709a      	strb	r2, [r3, #2]
   16250:	2310      	movs	r3, #16
   16252:	18fb      	adds	r3, r7, r3
   16254:	781a      	ldrb	r2, [r3, #0]
   16256:	230c      	movs	r3, #12
   16258:	18fb      	adds	r3, r7, r3
   1625a:	70da      	strb	r2, [r3, #3]

    seesawData.address = NEO_TRELLIS_ADDR;
   1625c:	4b0c      	ldr	r3, [pc, #48]	; (16290 <SeesawActivateKey+0xc0>)
   1625e:	222e      	movs	r2, #46	; 0x2e
   16260:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = (const uint8_t *) &cmd[0];
   16262:	4b0b      	ldr	r3, [pc, #44]	; (16290 <SeesawActivateKey+0xc0>)
   16264:	220c      	movs	r2, #12
   16266:	18ba      	adds	r2, r7, r2
   16268:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(cmd);
   1626a:	4b09      	ldr	r3, [pc, #36]	; (16290 <SeesawActivateKey+0xc0>)
   1626c:	2204      	movs	r2, #4
   1626e:	81da      	strh	r2, [r3, #14]
    seesawData.lenIn = 0;
   16270:	4b07      	ldr	r3, [pc, #28]	; (16290 <SeesawActivateKey+0xc0>)
   16272:	2200      	movs	r2, #0
   16274:	819a      	strh	r2, [r3, #12]
    int32_t error = I2cWriteDataWait(&seesawData, 100);
   16276:	4b06      	ldr	r3, [pc, #24]	; (16290 <SeesawActivateKey+0xc0>)
   16278:	2164      	movs	r1, #100	; 0x64
   1627a:	0018      	movs	r0, r3
   1627c:	4b05      	ldr	r3, [pc, #20]	; (16294 <SeesawActivateKey+0xc4>)
   1627e:	4798      	blx	r3
   16280:	0003      	movs	r3, r0
   16282:	617b      	str	r3, [r7, #20]
    return error;
   16284:	697b      	ldr	r3, [r7, #20]
}
   16286:	0018      	movs	r0, r3
   16288:	46bd      	mov	sp, r7
   1628a:	b007      	add	sp, #28
   1628c:	bd90      	pop	{r4, r7, pc}
   1628e:	46c0      	nop			; (mov r8, r8)
   16290:	200044a4 	.word	0x200044a4
   16294:	00014fa5 	.word	0x00014fa5

00016298 <SeesawSetLed>:
 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Note that the LEDs wont turn on until you send a "SeesawOrderLedUpdate" command.
         FOR ESE516 Board, please do not turn ALL the LEDs to maximum brightness (255,255,255)!
*/
int32_t SeesawSetLed(uint8_t key, uint8_t red, uint8_t green, uint8_t blue)
{
   16298:	b5b0      	push	{r4, r5, r7, lr}
   1629a:	b086      	sub	sp, #24
   1629c:	af00      	add	r7, sp, #0
   1629e:	0005      	movs	r5, r0
   162a0:	000c      	movs	r4, r1
   162a2:	0010      	movs	r0, r2
   162a4:	0019      	movs	r1, r3
   162a6:	1dfb      	adds	r3, r7, #7
   162a8:	1c2a      	adds	r2, r5, #0
   162aa:	701a      	strb	r2, [r3, #0]
   162ac:	1dbb      	adds	r3, r7, #6
   162ae:	1c22      	adds	r2, r4, #0
   162b0:	701a      	strb	r2, [r3, #0]
   162b2:	1d7b      	adds	r3, r7, #5
   162b4:	1c02      	adds	r2, r0, #0
   162b6:	701a      	strb	r2, [r3, #0]
   162b8:	1d3b      	adds	r3, r7, #4
   162ba:	1c0a      	adds	r2, r1, #0
   162bc:	701a      	strb	r2, [r3, #0]
    uint8_t write_buffer1[7] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_BUF, 0, 0, green, red, blue};
   162be:	2308      	movs	r3, #8
   162c0:	18fb      	adds	r3, r7, r3
   162c2:	220e      	movs	r2, #14
   162c4:	701a      	strb	r2, [r3, #0]
   162c6:	2308      	movs	r3, #8
   162c8:	18fb      	adds	r3, r7, r3
   162ca:	2204      	movs	r2, #4
   162cc:	705a      	strb	r2, [r3, #1]
   162ce:	2308      	movs	r3, #8
   162d0:	18fb      	adds	r3, r7, r3
   162d2:	2200      	movs	r2, #0
   162d4:	709a      	strb	r2, [r3, #2]
   162d6:	2308      	movs	r3, #8
   162d8:	18fb      	adds	r3, r7, r3
   162da:	2200      	movs	r2, #0
   162dc:	70da      	strb	r2, [r3, #3]
   162de:	2308      	movs	r3, #8
   162e0:	18fb      	adds	r3, r7, r3
   162e2:	1d7a      	adds	r2, r7, #5
   162e4:	7812      	ldrb	r2, [r2, #0]
   162e6:	711a      	strb	r2, [r3, #4]
   162e8:	2308      	movs	r3, #8
   162ea:	18fb      	adds	r3, r7, r3
   162ec:	1dba      	adds	r2, r7, #6
   162ee:	7812      	ldrb	r2, [r2, #0]
   162f0:	715a      	strb	r2, [r3, #5]
   162f2:	2308      	movs	r3, #8
   162f4:	18fb      	adds	r3, r7, r3
   162f6:	1d3a      	adds	r2, r7, #4
   162f8:	7812      	ldrb	r2, [r2, #0]
   162fa:	719a      	strb	r2, [r3, #6]

    uint16_t offset = 3 * key;  // RGB LED
   162fc:	1dfb      	adds	r3, r7, #7
   162fe:	781b      	ldrb	r3, [r3, #0]
   16300:	b29b      	uxth	r3, r3
   16302:	2216      	movs	r2, #22
   16304:	18ba      	adds	r2, r7, r2
   16306:	1c19      	adds	r1, r3, #0
   16308:	1c0b      	adds	r3, r1, #0
   1630a:	18db      	adds	r3, r3, r3
   1630c:	185b      	adds	r3, r3, r1
   1630e:	8013      	strh	r3, [r2, #0]
    write_buffer1[2] = (offset >> 8);
   16310:	2316      	movs	r3, #22
   16312:	18fb      	adds	r3, r7, r3
   16314:	881b      	ldrh	r3, [r3, #0]
   16316:	0a1b      	lsrs	r3, r3, #8
   16318:	b29b      	uxth	r3, r3
   1631a:	b2da      	uxtb	r2, r3
   1631c:	2308      	movs	r3, #8
   1631e:	18fb      	adds	r3, r7, r3
   16320:	709a      	strb	r2, [r3, #2]
    write_buffer1[3] = (offset);
   16322:	2316      	movs	r3, #22
   16324:	18fb      	adds	r3, r7, r3
   16326:	881b      	ldrh	r3, [r3, #0]
   16328:	b2da      	uxtb	r2, r3
   1632a:	2308      	movs	r3, #8
   1632c:	18fb      	adds	r3, r7, r3
   1632e:	70da      	strb	r2, [r3, #3]

    seesawData.msgOut = (const uint8_t *)&write_buffer1[0];
   16330:	4b09      	ldr	r3, [pc, #36]	; (16358 <SeesawSetLed+0xc0>)
   16332:	2208      	movs	r2, #8
   16334:	18ba      	adds	r2, r7, r2
   16336:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(write_buffer1);
   16338:	4b07      	ldr	r3, [pc, #28]	; (16358 <SeesawSetLed+0xc0>)
   1633a:	2207      	movs	r2, #7
   1633c:	81da      	strh	r2, [r3, #14]
    int error = I2cWriteDataWait(&seesawData, 100);
   1633e:	4b06      	ldr	r3, [pc, #24]	; (16358 <SeesawSetLed+0xc0>)
   16340:	2164      	movs	r1, #100	; 0x64
   16342:	0018      	movs	r0, r3
   16344:	4b05      	ldr	r3, [pc, #20]	; (1635c <SeesawSetLed+0xc4>)
   16346:	4798      	blx	r3
   16348:	0003      	movs	r3, r0
   1634a:	613b      	str	r3, [r7, #16]
    return error;
   1634c:	693b      	ldr	r3, [r7, #16]
}
   1634e:	0018      	movs	r0, r3
   16350:	46bd      	mov	sp, r7
   16352:	b006      	add	sp, #24
   16354:	bdb0      	pop	{r4, r5, r7, pc}
   16356:	46c0      	nop			; (mov r8, r8)
   16358:	200044a4 	.word	0x200044a4
   1635c:	00014fa5 	.word	0x00014fa5

00016360 <SeesawOrderLedUpdate>:
 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Use "SeesawSetLed" to send LED Data. The data will not be use to update the display until this function has been called!

*/
int32_t SeesawOrderLedUpdate(void)
{
   16360:	b580      	push	{r7, lr}
   16362:	b082      	sub	sp, #8
   16364:	af00      	add	r7, sp, #0
    uint8_t orderBuffer[2] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_SHOW};
   16366:	003b      	movs	r3, r7
   16368:	4a0a      	ldr	r2, [pc, #40]	; (16394 <SeesawOrderLedUpdate+0x34>)
   1636a:	8812      	ldrh	r2, [r2, #0]
   1636c:	801a      	strh	r2, [r3, #0]

    seesawData.msgOut = (const uint8_t *) &orderBuffer[0];
   1636e:	4b0a      	ldr	r3, [pc, #40]	; (16398 <SeesawOrderLedUpdate+0x38>)
   16370:	003a      	movs	r2, r7
   16372:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(orderBuffer);
   16374:	4b08      	ldr	r3, [pc, #32]	; (16398 <SeesawOrderLedUpdate+0x38>)
   16376:	2202      	movs	r2, #2
   16378:	81da      	strh	r2, [r3, #14]
    int error = I2cWriteDataWait(&seesawData, 100);
   1637a:	4b07      	ldr	r3, [pc, #28]	; (16398 <SeesawOrderLedUpdate+0x38>)
   1637c:	2164      	movs	r1, #100	; 0x64
   1637e:	0018      	movs	r0, r3
   16380:	4b06      	ldr	r3, [pc, #24]	; (1639c <SeesawOrderLedUpdate+0x3c>)
   16382:	4798      	blx	r3
   16384:	0003      	movs	r3, r0
   16386:	607b      	str	r3, [r7, #4]
    return error;
   16388:	687b      	ldr	r3, [r7, #4]
}
   1638a:	0018      	movs	r0, r3
   1638c:	46bd      	mov	sp, r7
   1638e:	b002      	add	sp, #8
   16390:	bd80      	pop	{r7, pc}
   16392:	46c0      	nop			; (mov r8, r8)
   16394:	00037104 	.word	0x00037104
   16398:	200044a4 	.word	0x200044a4
   1639c:	00014fa5 	.word	0x00014fa5

000163a0 <SeesawInitializeKeypad>:
/*****************************************************************************************
 *  @brief     Activates a given key on the keypad
 *  @return     Returns any error code found when executing task.
 ****************************************************************************************/
static void SeesawInitializeKeypad(void)
{
   163a0:	b580      	push	{r7, lr}
   163a2:	b082      	sub	sp, #8
   163a4:	af00      	add	r7, sp, #0
    seesawData.address = NEO_TRELLIS_ADDR;
   163a6:	4b33      	ldr	r3, [pc, #204]	; (16474 <SeesawInitializeKeypad+0xd4>)
   163a8:	222e      	movs	r2, #46	; 0x2e
   163aa:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgKeypadEnableInt[0];
   163ac:	4b31      	ldr	r3, [pc, #196]	; (16474 <SeesawInitializeKeypad+0xd4>)
   163ae:	4a32      	ldr	r2, [pc, #200]	; (16478 <SeesawInitializeKeypad+0xd8>)
   163b0:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgKeypadEnableInt);
   163b2:	4b30      	ldr	r3, [pc, #192]	; (16474 <SeesawInitializeKeypad+0xd4>)
   163b4:	2203      	movs	r2, #3
   163b6:	81da      	strh	r2, [r3, #14]
    seesawData.lenIn = 0;
   163b8:	4b2e      	ldr	r3, [pc, #184]	; (16474 <SeesawInitializeKeypad+0xd4>)
   163ba:	2200      	movs	r2, #0
   163bc:	819a      	strh	r2, [r3, #12]

    int32_t error = I2cWriteDataWait(&seesawData, 100);
   163be:	4b2d      	ldr	r3, [pc, #180]	; (16474 <SeesawInitializeKeypad+0xd4>)
   163c0:	2164      	movs	r1, #100	; 0x64
   163c2:	0018      	movs	r0, r3
   163c4:	4b2d      	ldr	r3, [pc, #180]	; (1647c <SeesawInitializeKeypad+0xdc>)
   163c6:	4798      	blx	r3
   163c8:	0003      	movs	r3, r0
   163ca:	603b      	str	r3, [r7, #0]
    if (ERROR_NONE != error) {
   163cc:	683b      	ldr	r3, [r7, #0]
   163ce:	2b00      	cmp	r3, #0
   163d0:	d003      	beq.n	163da <SeesawInitializeKeypad+0x3a>
        SerialConsoleWriteString("Could not initialize Keypad!/r/n");
   163d2:	4b2b      	ldr	r3, [pc, #172]	; (16480 <SeesawInitializeKeypad+0xe0>)
   163d4:	0018      	movs	r0, r3
   163d6:	4b2b      	ldr	r3, [pc, #172]	; (16484 <SeesawInitializeKeypad+0xe4>)
   163d8:	4798      	blx	r3
    }

    // Initialize all buttons to register an event for both press and release
    for (int i = 0; i < 16; i++) {
   163da:	2300      	movs	r3, #0
   163dc:	607b      	str	r3, [r7, #4]
   163de:	e041      	b.n	16464 <SeesawInitializeKeypad+0xc4>
        error = SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_RISING, true);
   163e0:	687b      	ldr	r3, [r7, #4]
   163e2:	2b00      	cmp	r3, #0
   163e4:	da00      	bge.n	163e8 <SeesawInitializeKeypad+0x48>
   163e6:	3303      	adds	r3, #3
   163e8:	109b      	asrs	r3, r3, #2
   163ea:	b2db      	uxtb	r3, r3
   163ec:	00db      	lsls	r3, r3, #3
   163ee:	b2da      	uxtb	r2, r3
   163f0:	687b      	ldr	r3, [r7, #4]
   163f2:	4925      	ldr	r1, [pc, #148]	; (16488 <SeesawInitializeKeypad+0xe8>)
   163f4:	400b      	ands	r3, r1
   163f6:	d504      	bpl.n	16402 <SeesawInitializeKeypad+0x62>
   163f8:	3b01      	subs	r3, #1
   163fa:	2104      	movs	r1, #4
   163fc:	4249      	negs	r1, r1
   163fe:	430b      	orrs	r3, r1
   16400:	3301      	adds	r3, #1
   16402:	b2db      	uxtb	r3, r3
   16404:	18d3      	adds	r3, r2, r3
   16406:	b2db      	uxtb	r3, r3
   16408:	2201      	movs	r2, #1
   1640a:	2103      	movs	r1, #3
   1640c:	0018      	movs	r0, r3
   1640e:	4b1f      	ldr	r3, [pc, #124]	; (1648c <SeesawInitializeKeypad+0xec>)
   16410:	4798      	blx	r3
   16412:	0003      	movs	r3, r0
   16414:	603b      	str	r3, [r7, #0]
        error |= SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_FALLING, true);
   16416:	687b      	ldr	r3, [r7, #4]
   16418:	2b00      	cmp	r3, #0
   1641a:	da00      	bge.n	1641e <SeesawInitializeKeypad+0x7e>
   1641c:	3303      	adds	r3, #3
   1641e:	109b      	asrs	r3, r3, #2
   16420:	b2db      	uxtb	r3, r3
   16422:	00db      	lsls	r3, r3, #3
   16424:	b2da      	uxtb	r2, r3
   16426:	687b      	ldr	r3, [r7, #4]
   16428:	4917      	ldr	r1, [pc, #92]	; (16488 <SeesawInitializeKeypad+0xe8>)
   1642a:	400b      	ands	r3, r1
   1642c:	d504      	bpl.n	16438 <SeesawInitializeKeypad+0x98>
   1642e:	3b01      	subs	r3, #1
   16430:	2104      	movs	r1, #4
   16432:	4249      	negs	r1, r1
   16434:	430b      	orrs	r3, r1
   16436:	3301      	adds	r3, #1
   16438:	b2db      	uxtb	r3, r3
   1643a:	18d3      	adds	r3, r2, r3
   1643c:	b2db      	uxtb	r3, r3
   1643e:	2201      	movs	r2, #1
   16440:	2102      	movs	r1, #2
   16442:	0018      	movs	r0, r3
   16444:	4b11      	ldr	r3, [pc, #68]	; (1648c <SeesawInitializeKeypad+0xec>)
   16446:	4798      	blx	r3
   16448:	0002      	movs	r2, r0
   1644a:	683b      	ldr	r3, [r7, #0]
   1644c:	4313      	orrs	r3, r2
   1644e:	603b      	str	r3, [r7, #0]
        if (ERROR_NONE != error) {
   16450:	683b      	ldr	r3, [r7, #0]
   16452:	2b00      	cmp	r3, #0
   16454:	d003      	beq.n	1645e <SeesawInitializeKeypad+0xbe>
            SerialConsoleWriteString("Could not initialize Keypad!/r/n");
   16456:	4b0a      	ldr	r3, [pc, #40]	; (16480 <SeesawInitializeKeypad+0xe0>)
   16458:	0018      	movs	r0, r3
   1645a:	4b0a      	ldr	r3, [pc, #40]	; (16484 <SeesawInitializeKeypad+0xe4>)
   1645c:	4798      	blx	r3
    for (int i = 0; i < 16; i++) {
   1645e:	687b      	ldr	r3, [r7, #4]
   16460:	3301      	adds	r3, #1
   16462:	607b      	str	r3, [r7, #4]
   16464:	687b      	ldr	r3, [r7, #4]
   16466:	2b0f      	cmp	r3, #15
   16468:	ddba      	ble.n	163e0 <SeesawInitializeKeypad+0x40>
        }
    }
}
   1646a:	46c0      	nop			; (mov r8, r8)
   1646c:	46bd      	mov	sp, r7
   1646e:	b002      	add	sp, #8
   16470:	bd80      	pop	{r7, pc}
   16472:	46c0      	nop			; (mov r8, r8)
   16474:	200044a4 	.word	0x200044a4
   16478:	00037014 	.word	0x00037014
   1647c:	00014fa5 	.word	0x00014fa5
   16480:	00037108 	.word	0x00037108
   16484:	0001ea39 	.word	0x0001ea39
   16488:	80000003 	.word	0x80000003
   1648c:	000161d1 	.word	0x000161d1

00016490 <SeesawTurnOnLedTest>:

static void SeesawTurnOnLedTest(void)
{
   16490:	b5b0      	push	{r4, r5, r7, lr}
   16492:	af00      	add	r7, sp, #0
    SeesawSetLed(15, 255, 255, 255);
   16494:	23ff      	movs	r3, #255	; 0xff
   16496:	22ff      	movs	r2, #255	; 0xff
   16498:	21ff      	movs	r1, #255	; 0xff
   1649a:	200f      	movs	r0, #15
   1649c:	4c09      	ldr	r4, [pc, #36]	; (164c4 <SeesawTurnOnLedTest+0x34>)
   1649e:	47a0      	blx	r4
    SeesawOrderLedUpdate();
   164a0:	4b09      	ldr	r3, [pc, #36]	; (164c8 <SeesawTurnOnLedTest+0x38>)
   164a2:	4798      	blx	r3
    vTaskDelay(400);
   164a4:	23c8      	movs	r3, #200	; 0xc8
   164a6:	005b      	lsls	r3, r3, #1
   164a8:	0018      	movs	r0, r3
   164aa:	4b08      	ldr	r3, [pc, #32]	; (164cc <SeesawTurnOnLedTest+0x3c>)
   164ac:	4798      	blx	r3

    SeesawSetLed(15, 0, 0, 0);
   164ae:	2300      	movs	r3, #0
   164b0:	2200      	movs	r2, #0
   164b2:	2100      	movs	r1, #0
   164b4:	200f      	movs	r0, #15
   164b6:	4c03      	ldr	r4, [pc, #12]	; (164c4 <SeesawTurnOnLedTest+0x34>)
   164b8:	47a0      	blx	r4
    SeesawOrderLedUpdate();
   164ba:	4b03      	ldr	r3, [pc, #12]	; (164c8 <SeesawTurnOnLedTest+0x38>)
   164bc:	4798      	blx	r3
   164be:	46c0      	nop			; (mov r8, r8)
   164c0:	46bd      	mov	sp, r7
   164c2:	bdb0      	pop	{r4, r5, r7, pc}
   164c4:	00016299 	.word	0x00016299
   164c8:	00016361 	.word	0x00016361
   164cc:	0001cde5 	.word	0x0001cde5

000164d0 <vUiHandlerTask>:
 * @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
 * @return		Should not return! This is a task defining function.
 * @note
 */
void vUiHandlerTask(void *pvParameters)
{
   164d0:	b590      	push	{r4, r7, lr}
   164d2:	b089      	sub	sp, #36	; 0x24
   164d4:	af02      	add	r7, sp, #8
   164d6:	6078      	str	r0, [r7, #4]
    // Do initialization code here
    SerialConsoleWriteString("UI Task Started!");
   164d8:	4b96      	ldr	r3, [pc, #600]	; (16734 <vUiHandlerTask+0x264>)
   164da:	0018      	movs	r0, r3
   164dc:	4b96      	ldr	r3, [pc, #600]	; (16738 <vUiHandlerTask+0x268>)
   164de:	4798      	blx	r3
    uiState = UI_STATE_IGNORE_PRESSES;  // Initial state
   164e0:	4b96      	ldr	r3, [pc, #600]	; (1673c <vUiHandlerTask+0x26c>)
   164e2:	2201      	movs	r2, #1
   164e4:	701a      	strb	r2, [r3, #0]

    // Graphics Test - Remove if not using
    gfx_mono_init();
   164e6:	4b96      	ldr	r3, [pc, #600]	; (16740 <vUiHandlerTask+0x270>)
   164e8:	4798      	blx	r3
    gfx_mono_draw_line(1, 1, 62, 46, GFX_PIXEL_SET);
   164ea:	2301      	movs	r3, #1
   164ec:	9300      	str	r3, [sp, #0]
   164ee:	232e      	movs	r3, #46	; 0x2e
   164f0:	223e      	movs	r2, #62	; 0x3e
   164f2:	2101      	movs	r1, #1
   164f4:	2001      	movs	r0, #1
   164f6:	4c93      	ldr	r4, [pc, #588]	; (16744 <vUiHandlerTask+0x274>)
   164f8:	47a0      	blx	r4
    // Draw a filled circle with all quadrant drawn
    gfx_mono_draw_filled_circle(36, 20, 20, GFX_PIXEL_SET, GFX_WHOLE);
   164fa:	23ff      	movs	r3, #255	; 0xff
   164fc:	9300      	str	r3, [sp, #0]
   164fe:	2301      	movs	r3, #1
   16500:	2214      	movs	r2, #20
   16502:	2114      	movs	r1, #20
   16504:	2024      	movs	r0, #36	; 0x24
   16506:	4c90      	ldr	r4, [pc, #576]	; (16748 <vUiHandlerTask+0x278>)
   16508:	47a0      	blx	r4

    // Here we start the loop for the UI State Machine
    while (1) {
        switch (uiState) {
   1650a:	4b8c      	ldr	r3, [pc, #560]	; (1673c <vUiHandlerTask+0x26c>)
   1650c:	781b      	ldrb	r3, [r3, #0]
   1650e:	2b01      	cmp	r3, #1
   16510:	d100      	bne.n	16514 <vUiHandlerTask+0x44>
   16512:	e107      	b.n	16724 <vUiHandlerTask+0x254>
   16514:	2b02      	cmp	r3, #2
   16516:	d002      	beq.n	1651e <vUiHandlerTask+0x4e>
   16518:	2b00      	cmp	r3, #0
   1651a:	d06e      	beq.n	165fa <vUiHandlerTask+0x12a>
   1651c:	e0fe      	b.n	1671c <vUiHandlerTask+0x24c>
            }

            case (UI_STATE_SHOW_MOVES): {
                // Set initial state variable that will be used on the
                // UI_STATE_Handle_Buttons and need to be initialized once
                pressedKeys = 0;  // Set number of keys pressed by player to 0.
   1651e:	4b8b      	ldr	r3, [pc, #556]	; (1674c <vUiHandlerTask+0x27c>)
   16520:	2200      	movs	r2, #0
   16522:	701a      	strb	r2, [r3, #0]
                keysToPress = 1;  // Set as an example to 1. STUDENTS should change this
   16524:	4b8a      	ldr	r3, [pc, #552]	; (16750 <vUiHandlerTask+0x280>)
   16526:	2201      	movs	r2, #1
   16528:	701a      	strb	r2, [r3, #0]
                                  // to the number of key presses needed.
                memset(gamePacketOut.game, 0xff,
   1652a:	4b8a      	ldr	r3, [pc, #552]	; (16754 <vUiHandlerTask+0x284>)
   1652c:	2214      	movs	r2, #20
   1652e:	21ff      	movs	r1, #255	; 0xff
   16530:	0018      	movs	r0, r3
   16532:	4b89      	ldr	r3, [pc, #548]	; (16758 <vUiHandlerTask+0x288>)
   16534:	4798      	blx	r3
                       sizeof(gamePacketOut.game));  // Erase gamePacketOut to an initial state
                playIsDone = false;                  // Set play to false
   16536:	4b89      	ldr	r3, [pc, #548]	; (1675c <vUiHandlerTask+0x28c>)
   16538:	2200      	movs	r2, #0
   1653a:	701a      	strb	r2, [r3, #0]
                uint8_t presses = SeesawGetKeypadCount();
   1653c:	2317      	movs	r3, #23
   1653e:	18fc      	adds	r4, r7, r3
   16540:	4b87      	ldr	r3, [pc, #540]	; (16760 <vUiHandlerTask+0x290>)
   16542:	4798      	blx	r3
   16544:	0003      	movs	r3, r0
   16546:	7023      	strb	r3, [r4, #0]
                if (presses >= BUTTON_PRESSES_MAX) presses = BUTTON_PRESSES_MAX;
   16548:	2317      	movs	r3, #23
   1654a:	18fb      	adds	r3, r7, r3
   1654c:	781b      	ldrb	r3, [r3, #0]
   1654e:	2b0f      	cmp	r3, #15
   16550:	d903      	bls.n	1655a <vUiHandlerTask+0x8a>
   16552:	2317      	movs	r3, #23
   16554:	18fb      	adds	r3, r7, r3
   16556:	2210      	movs	r2, #16
   16558:	701a      	strb	r2, [r3, #0]
                if (presses != 0)
   1655a:	2317      	movs	r3, #23
   1655c:	18fb      	adds	r3, r7, r3
   1655e:	781b      	ldrb	r3, [r3, #0]
   16560:	2b00      	cmp	r3, #0
   16562:	d007      	beq.n	16574 <vUiHandlerTask+0xa4>
                    SeesawReadKeypad(buttons,
   16564:	2317      	movs	r3, #23
   16566:	18fb      	adds	r3, r7, r3
   16568:	781a      	ldrb	r2, [r3, #0]
   1656a:	4b7e      	ldr	r3, [pc, #504]	; (16764 <vUiHandlerTask+0x294>)
   1656c:	0011      	movs	r1, r2
   1656e:	0018      	movs	r0, r3
   16570:	4b7d      	ldr	r3, [pc, #500]	; (16768 <vUiHandlerTask+0x298>)
   16572:	4798      	blx	r3
                                     presses);  // Empty Seesaw buffer just in case
                                                // it has latent presses on it!
                memset(buttons, 0, BUTTON_PRESSES_MAX);
   16574:	4b7b      	ldr	r3, [pc, #492]	; (16764 <vUiHandlerTask+0x294>)
   16576:	2210      	movs	r2, #16
   16578:	2100      	movs	r1, #0
   1657a:	0018      	movs	r0, r3
   1657c:	4b76      	ldr	r3, [pc, #472]	; (16758 <vUiHandlerTask+0x288>)
   1657e:	4798      	blx	r3
                // the message gets longer might be more fun! After you finish showing
                // the move should go to state UI_STATE_HANDLE_BUTTONS

                // In the beginner example we turn LED0 and LED15 will turn on for 500
                // ms then we go to UI_STATE_HANDLE_BUTTONS
                SeesawSetLed(0, red, green, blue);  // Turn button 1 on
   16580:	4b7a      	ldr	r3, [pc, #488]	; (1676c <vUiHandlerTask+0x29c>)
   16582:	781b      	ldrb	r3, [r3, #0]
   16584:	b2d9      	uxtb	r1, r3
   16586:	4b7a      	ldr	r3, [pc, #488]	; (16770 <vUiHandlerTask+0x2a0>)
   16588:	781b      	ldrb	r3, [r3, #0]
   1658a:	b2da      	uxtb	r2, r3
   1658c:	4b79      	ldr	r3, [pc, #484]	; (16774 <vUiHandlerTask+0x2a4>)
   1658e:	781b      	ldrb	r3, [r3, #0]
   16590:	b2db      	uxtb	r3, r3
   16592:	2000      	movs	r0, #0
   16594:	4c78      	ldr	r4, [pc, #480]	; (16778 <vUiHandlerTask+0x2a8>)
   16596:	47a0      	blx	r4
                SeesawOrderLedUpdate();
   16598:	4b78      	ldr	r3, [pc, #480]	; (1677c <vUiHandlerTask+0x2ac>)
   1659a:	4798      	blx	r3
                vTaskDelay(1000);
   1659c:	23fa      	movs	r3, #250	; 0xfa
   1659e:	009b      	lsls	r3, r3, #2
   165a0:	0018      	movs	r0, r3
   165a2:	4b77      	ldr	r3, [pc, #476]	; (16780 <vUiHandlerTask+0x2b0>)
   165a4:	4798      	blx	r3
                SeesawSetLed(0, 0, 0, 0);            // Turn button 1 off
   165a6:	2300      	movs	r3, #0
   165a8:	2200      	movs	r2, #0
   165aa:	2100      	movs	r1, #0
   165ac:	2000      	movs	r0, #0
   165ae:	4c72      	ldr	r4, [pc, #456]	; (16778 <vUiHandlerTask+0x2a8>)
   165b0:	47a0      	blx	r4
                SeesawSetLed(15, red, green, blue);  // Turn button 15 on
   165b2:	4b6e      	ldr	r3, [pc, #440]	; (1676c <vUiHandlerTask+0x29c>)
   165b4:	781b      	ldrb	r3, [r3, #0]
   165b6:	b2d9      	uxtb	r1, r3
   165b8:	4b6d      	ldr	r3, [pc, #436]	; (16770 <vUiHandlerTask+0x2a0>)
   165ba:	781b      	ldrb	r3, [r3, #0]
   165bc:	b2da      	uxtb	r2, r3
   165be:	4b6d      	ldr	r3, [pc, #436]	; (16774 <vUiHandlerTask+0x2a4>)
   165c0:	781b      	ldrb	r3, [r3, #0]
   165c2:	b2db      	uxtb	r3, r3
   165c4:	200f      	movs	r0, #15
   165c6:	4c6c      	ldr	r4, [pc, #432]	; (16778 <vUiHandlerTask+0x2a8>)
   165c8:	47a0      	blx	r4
                SeesawOrderLedUpdate();
   165ca:	4b6c      	ldr	r3, [pc, #432]	; (1677c <vUiHandlerTask+0x2ac>)
   165cc:	4798      	blx	r3
                vTaskDelay(1000);
   165ce:	23fa      	movs	r3, #250	; 0xfa
   165d0:	009b      	lsls	r3, r3, #2
   165d2:	0018      	movs	r0, r3
   165d4:	4b6a      	ldr	r3, [pc, #424]	; (16780 <vUiHandlerTask+0x2b0>)
   165d6:	4798      	blx	r3
                SeesawSetLed(15, 0, 0, 0);  // Turn button 15 off
   165d8:	2300      	movs	r3, #0
   165da:	2200      	movs	r2, #0
   165dc:	2100      	movs	r1, #0
   165de:	200f      	movs	r0, #15
   165e0:	4c65      	ldr	r4, [pc, #404]	; (16778 <vUiHandlerTask+0x2a8>)
   165e2:	47a0      	blx	r4
                SeesawOrderLedUpdate();
   165e4:	4b65      	ldr	r3, [pc, #404]	; (1677c <vUiHandlerTask+0x2ac>)
   165e6:	4798      	blx	r3
                vTaskDelay(1000);
   165e8:	23fa      	movs	r3, #250	; 0xfa
   165ea:	009b      	lsls	r3, r3, #2
   165ec:	0018      	movs	r0, r3
   165ee:	4b64      	ldr	r3, [pc, #400]	; (16780 <vUiHandlerTask+0x2b0>)
   165f0:	4798      	blx	r3
                uiState = UI_STATE_HANDLE_BUTTONS;
   165f2:	4b52      	ldr	r3, [pc, #328]	; (1673c <vUiHandlerTask+0x26c>)
   165f4:	2200      	movs	r2, #0
   165f6:	701a      	strb	r2, [r3, #0]

                break;
   165f8:	e097      	b.n	1672a <vUiHandlerTask+0x25a>
                // should be stored on "gamePacketOut". The keypresses that should count
                // are when the player RELEASES the button.

                // In this example, we return after only one button press!

                uint8_t numPresses = SeesawGetKeypadCount();
   165fa:	2316      	movs	r3, #22
   165fc:	18fc      	adds	r4, r7, r3
   165fe:	4b58      	ldr	r3, [pc, #352]	; (16760 <vUiHandlerTask+0x290>)
   16600:	4798      	blx	r3
   16602:	0003      	movs	r3, r0
   16604:	7023      	strb	r3, [r4, #0]
                memset(buttons, 0, BUTTON_PRESSES_MAX);
   16606:	4b57      	ldr	r3, [pc, #348]	; (16764 <vUiHandlerTask+0x294>)
   16608:	2210      	movs	r2, #16
   1660a:	2100      	movs	r1, #0
   1660c:	0018      	movs	r0, r3
   1660e:	4b52      	ldr	r3, [pc, #328]	; (16758 <vUiHandlerTask+0x288>)
   16610:	4798      	blx	r3

                if (numPresses >= BUTTON_PRESSES_MAX) {
   16612:	2316      	movs	r3, #22
   16614:	18fb      	adds	r3, r7, r3
   16616:	781b      	ldrb	r3, [r3, #0]
   16618:	2b0f      	cmp	r3, #15
   1661a:	d903      	bls.n	16624 <vUiHandlerTask+0x154>
                    numPresses = BUTTON_PRESSES_MAX;
   1661c:	2316      	movs	r3, #22
   1661e:	18fb      	adds	r3, r7, r3
   16620:	2210      	movs	r2, #16
   16622:	701a      	strb	r2, [r3, #0]
                }
                if (numPresses != 0 && ERROR_NONE == SeesawReadKeypad(buttons, numPresses)) {
   16624:	2316      	movs	r3, #22
   16626:	18fb      	adds	r3, r7, r3
   16628:	781b      	ldrb	r3, [r3, #0]
   1662a:	2b00      	cmp	r3, #0
   1662c:	d065      	beq.n	166fa <vUiHandlerTask+0x22a>
   1662e:	2316      	movs	r3, #22
   16630:	18fb      	adds	r3, r7, r3
   16632:	781a      	ldrb	r2, [r3, #0]
   16634:	4b4b      	ldr	r3, [pc, #300]	; (16764 <vUiHandlerTask+0x294>)
   16636:	0011      	movs	r1, r2
   16638:	0018      	movs	r0, r3
   1663a:	4b4b      	ldr	r3, [pc, #300]	; (16768 <vUiHandlerTask+0x298>)
   1663c:	4798      	blx	r3
   1663e:	1e03      	subs	r3, r0, #0
   16640:	d15b      	bne.n	166fa <vUiHandlerTask+0x22a>
                    // Process Buttons
                    for (int iter = 0; iter < numPresses; iter++) {
   16642:	2300      	movs	r3, #0
   16644:	613b      	str	r3, [r7, #16]
   16646:	e050      	b.n	166ea <vUiHandlerTask+0x21a>
                        uint8_t keynum = NEO_TRELLIS_SEESAW_KEY((buttons[iter] & 0xFD) >> 2);
   16648:	4a46      	ldr	r2, [pc, #280]	; (16764 <vUiHandlerTask+0x294>)
   1664a:	693b      	ldr	r3, [r7, #16]
   1664c:	18d3      	adds	r3, r2, r3
   1664e:	781b      	ldrb	r3, [r3, #0]
   16650:	089b      	lsrs	r3, r3, #2
   16652:	b2db      	uxtb	r3, r3
   16654:	2b00      	cmp	r3, #0
   16656:	da00      	bge.n	1665a <vUiHandlerTask+0x18a>
   16658:	3307      	adds	r3, #7
   1665a:	10db      	asrs	r3, r3, #3
   1665c:	b2db      	uxtb	r3, r3
   1665e:	009b      	lsls	r3, r3, #2
   16660:	b2d9      	uxtb	r1, r3
   16662:	4a40      	ldr	r2, [pc, #256]	; (16764 <vUiHandlerTask+0x294>)
   16664:	693b      	ldr	r3, [r7, #16]
   16666:	18d3      	adds	r3, r2, r3
   16668:	781b      	ldrb	r3, [r3, #0]
   1666a:	089b      	lsrs	r3, r3, #2
   1666c:	b2db      	uxtb	r3, r3
   1666e:	2207      	movs	r2, #7
   16670:	4013      	ands	r3, r2
   16672:	b2da      	uxtb	r2, r3
   16674:	230f      	movs	r3, #15
   16676:	18fb      	adds	r3, r7, r3
   16678:	188a      	adds	r2, r1, r2
   1667a:	701a      	strb	r2, [r3, #0]
                        uint8_t actionButton = buttons[iter] & 0x03;
   1667c:	4a39      	ldr	r2, [pc, #228]	; (16764 <vUiHandlerTask+0x294>)
   1667e:	693b      	ldr	r3, [r7, #16]
   16680:	18d3      	adds	r3, r2, r3
   16682:	781a      	ldrb	r2, [r3, #0]
   16684:	230e      	movs	r3, #14
   16686:	18fb      	adds	r3, r7, r3
   16688:	2103      	movs	r1, #3
   1668a:	400a      	ands	r2, r1
   1668c:	701a      	strb	r2, [r3, #0]
                        if (actionButton == 0x03) {
   1668e:	230e      	movs	r3, #14
   16690:	18fb      	adds	r3, r7, r3
   16692:	781b      	ldrb	r3, [r3, #0]
   16694:	2b03      	cmp	r3, #3
   16696:	d10f      	bne.n	166b8 <vUiHandlerTask+0x1e8>
                            SeesawSetLed(keynum, red, green, blue);
   16698:	4b34      	ldr	r3, [pc, #208]	; (1676c <vUiHandlerTask+0x29c>)
   1669a:	781b      	ldrb	r3, [r3, #0]
   1669c:	b2d9      	uxtb	r1, r3
   1669e:	4b34      	ldr	r3, [pc, #208]	; (16770 <vUiHandlerTask+0x2a0>)
   166a0:	781b      	ldrb	r3, [r3, #0]
   166a2:	b2da      	uxtb	r2, r3
   166a4:	4b33      	ldr	r3, [pc, #204]	; (16774 <vUiHandlerTask+0x2a4>)
   166a6:	781b      	ldrb	r3, [r3, #0]
   166a8:	b2dc      	uxtb	r4, r3
   166aa:	230f      	movs	r3, #15
   166ac:	18fb      	adds	r3, r7, r3
   166ae:	7818      	ldrb	r0, [r3, #0]
   166b0:	0023      	movs	r3, r4
   166b2:	4c31      	ldr	r4, [pc, #196]	; (16778 <vUiHandlerTask+0x2a8>)
   166b4:	47a0      	blx	r4
   166b6:	e015      	b.n	166e4 <vUiHandlerTask+0x214>
                        } else {
                            SeesawSetLed(keynum, 0, 0, 0);
   166b8:	230f      	movs	r3, #15
   166ba:	18fb      	adds	r3, r7, r3
   166bc:	7818      	ldrb	r0, [r3, #0]
   166be:	2300      	movs	r3, #0
   166c0:	2200      	movs	r2, #0
   166c2:	2100      	movs	r1, #0
   166c4:	4c2c      	ldr	r4, [pc, #176]	; (16778 <vUiHandlerTask+0x2a8>)
   166c6:	47a0      	blx	r4
                            // Button released! Count this into the buttons pressed by user.
                            gamePacketOut.game[pressedKeys] = keynum;
   166c8:	4b20      	ldr	r3, [pc, #128]	; (1674c <vUiHandlerTask+0x27c>)
   166ca:	781b      	ldrb	r3, [r3, #0]
   166cc:	0019      	movs	r1, r3
   166ce:	4b21      	ldr	r3, [pc, #132]	; (16754 <vUiHandlerTask+0x284>)
   166d0:	220f      	movs	r2, #15
   166d2:	18ba      	adds	r2, r7, r2
   166d4:	7812      	ldrb	r2, [r2, #0]
   166d6:	545a      	strb	r2, [r3, r1]
                            pressedKeys++;
   166d8:	4b1c      	ldr	r3, [pc, #112]	; (1674c <vUiHandlerTask+0x27c>)
   166da:	781b      	ldrb	r3, [r3, #0]
   166dc:	3301      	adds	r3, #1
   166de:	b2da      	uxtb	r2, r3
   166e0:	4b1a      	ldr	r3, [pc, #104]	; (1674c <vUiHandlerTask+0x27c>)
   166e2:	701a      	strb	r2, [r3, #0]
                    for (int iter = 0; iter < numPresses; iter++) {
   166e4:	693b      	ldr	r3, [r7, #16]
   166e6:	3301      	adds	r3, #1
   166e8:	613b      	str	r3, [r7, #16]
   166ea:	2316      	movs	r3, #22
   166ec:	18fb      	adds	r3, r7, r3
   166ee:	781a      	ldrb	r2, [r3, #0]
   166f0:	693b      	ldr	r3, [r7, #16]
   166f2:	429a      	cmp	r2, r3
   166f4:	dca8      	bgt.n	16648 <vUiHandlerTask+0x178>
                        }
                    }
                    SeesawOrderLedUpdate();
   166f6:	4b21      	ldr	r3, [pc, #132]	; (1677c <vUiHandlerTask+0x2ac>)
   166f8:	4798      	blx	r3
                }

                // Check if we are done!
                if (pressedKeys >= keysToPress || pressedKeys >= GAME_SIZE) {
   166fa:	4b14      	ldr	r3, [pc, #80]	; (1674c <vUiHandlerTask+0x27c>)
   166fc:	781a      	ldrb	r2, [r3, #0]
   166fe:	4b14      	ldr	r3, [pc, #80]	; (16750 <vUiHandlerTask+0x280>)
   16700:	781b      	ldrb	r3, [r3, #0]
   16702:	429a      	cmp	r2, r3
   16704:	d203      	bcs.n	1670e <vUiHandlerTask+0x23e>
   16706:	4b11      	ldr	r3, [pc, #68]	; (1674c <vUiHandlerTask+0x27c>)
   16708:	781b      	ldrb	r3, [r3, #0]
   1670a:	2b13      	cmp	r3, #19
   1670c:	d90c      	bls.n	16728 <vUiHandlerTask+0x258>
                    // Tell control gamePacketOut is ready to be send out AND go back to
                    // UI_STATE_IGNORE_PRESSES
                    playIsDone = true;
   1670e:	4b13      	ldr	r3, [pc, #76]	; (1675c <vUiHandlerTask+0x28c>)
   16710:	2201      	movs	r2, #1
   16712:	701a      	strb	r2, [r3, #0]
                    uiState = UI_STATE_IGNORE_PRESSES;
   16714:	4b09      	ldr	r3, [pc, #36]	; (1673c <vUiHandlerTask+0x26c>)
   16716:	2201      	movs	r2, #1
   16718:	701a      	strb	r2, [r3, #0]
                }

                break;
   1671a:	e005      	b.n	16728 <vUiHandlerTask+0x258>
            }

            default:  // In case of unforseen error, it is always good to sent state
                      // machine to an initial state.
                uiState = UI_STATE_HANDLE_BUTTONS;
   1671c:	4b07      	ldr	r3, [pc, #28]	; (1673c <vUiHandlerTask+0x26c>)
   1671e:	2200      	movs	r2, #0
   16720:	701a      	strb	r2, [r3, #0]
                break;
   16722:	e002      	b.n	1672a <vUiHandlerTask+0x25a>
                break;
   16724:	46c0      	nop			; (mov r8, r8)
   16726:	e000      	b.n	1672a <vUiHandlerTask+0x25a>
                break;
   16728:	46c0      	nop			; (mov r8, r8)
        }

        // After execution, you can put a thread to sleep for some time.
        vTaskDelay(50);
   1672a:	2032      	movs	r0, #50	; 0x32
   1672c:	4b14      	ldr	r3, [pc, #80]	; (16780 <vUiHandlerTask+0x2b0>)
   1672e:	4798      	blx	r3
        switch (uiState) {
   16730:	e6eb      	b.n	1650a <vUiHandlerTask+0x3a>
   16732:	46c0      	nop			; (mov r8, r8)
   16734:	0003712c 	.word	0x0003712c
   16738:	0001ea39 	.word	0x0001ea39
   1673c:	200044ec 	.word	0x200044ec
   16740:	00012a75 	.word	0x00012a75
   16744:	000124b5 	.word	0x000124b5
   16748:	0001273d 	.word	0x0001273d
   1674c:	20000641 	.word	0x20000641
   16750:	20000642 	.word	0x20000642
   16754:	200044b4 	.word	0x200044b4
   16758:	00035707 	.word	0x00035707
   1675c:	20000643 	.word	0x20000643
   16760:	000160e5 	.word	0x000160e5
   16764:	200044dc 	.word	0x200044dc
   16768:	0001614d 	.word	0x0001614d
   1676c:	20000640 	.word	0x20000640
   16770:	20000020 	.word	0x20000020
   16774:	20000021 	.word	0x20000021
   16778:	00016299 	.word	0x00016299
   1677c:	00016361 	.word	0x00016361
   16780:	0001cde5 	.word	0x0001cde5

00016784 <UiOrderShowMoves>:

/******************************************************************************
 * Functions
 ******************************************************************************/
void UiOrderShowMoves(struct GameDataPacket *packetIn)
{
   16784:	b580      	push	{r7, lr}
   16786:	b082      	sub	sp, #8
   16788:	af00      	add	r7, sp, #0
   1678a:	6078      	str	r0, [r7, #4]
    memcpy(&gamePacketIn, packetIn, sizeof(gamePacketIn));
   1678c:	4a08      	ldr	r2, [pc, #32]	; (167b0 <UiOrderShowMoves+0x2c>)
   1678e:	687b      	ldr	r3, [r7, #4]
   16790:	0010      	movs	r0, r2
   16792:	0019      	movs	r1, r3
   16794:	2314      	movs	r3, #20
   16796:	001a      	movs	r2, r3
   16798:	4b06      	ldr	r3, [pc, #24]	; (167b4 <UiOrderShowMoves+0x30>)
   1679a:	4798      	blx	r3
    uiState = UI_STATE_SHOW_MOVES;
   1679c:	4b06      	ldr	r3, [pc, #24]	; (167b8 <UiOrderShowMoves+0x34>)
   1679e:	2202      	movs	r2, #2
   167a0:	701a      	strb	r2, [r3, #0]
    playIsDone = false;  // Set play to false
   167a2:	4b06      	ldr	r3, [pc, #24]	; (167bc <UiOrderShowMoves+0x38>)
   167a4:	2200      	movs	r2, #0
   167a6:	701a      	strb	r2, [r3, #0]
}
   167a8:	46c0      	nop			; (mov r8, r8)
   167aa:	46bd      	mov	sp, r7
   167ac:	b002      	add	sp, #8
   167ae:	bd80      	pop	{r7, pc}
   167b0:	200044c8 	.word	0x200044c8
   167b4:	000356d1 	.word	0x000356d1
   167b8:	200044ec 	.word	0x200044ec
   167bc:	20000643 	.word	0x20000643

000167c0 <UiPlayIsDone>:

bool UiPlayIsDone(void)
{
   167c0:	b580      	push	{r7, lr}
   167c2:	af00      	add	r7, sp, #0
    return playIsDone;
   167c4:	4b02      	ldr	r3, [pc, #8]	; (167d0 <UiPlayIsDone+0x10>)
   167c6:	781b      	ldrb	r3, [r3, #0]
}
   167c8:	0018      	movs	r0, r3
   167ca:	46bd      	mov	sp, r7
   167cc:	bd80      	pop	{r7, pc}
   167ce:	46c0      	nop			; (mov r8, r8)
   167d0:	20000643 	.word	0x20000643

000167d4 <UiGetGamePacketOut>:

struct GameDataPacket *UiGetGamePacketOut(void)
{
   167d4:	b580      	push	{r7, lr}
   167d6:	af00      	add	r7, sp, #0
    return &gamePacketOut;
   167d8:	4b01      	ldr	r3, [pc, #4]	; (167e0 <UiGetGamePacketOut+0xc>)
}
   167da:	0018      	movs	r0, r3
   167dc:	46bd      	mov	sp, r7
   167de:	bd80      	pop	{r7, pc}
   167e0:	200044b4 	.word	0x200044b4

000167e4 <UIChangeColors>:
 * @return
 * @note

*/
void UIChangeColors(uint8_t r, uint8_t g, uint8_t b)
{
   167e4:	b590      	push	{r4, r7, lr}
   167e6:	b083      	sub	sp, #12
   167e8:	af00      	add	r7, sp, #0
   167ea:	0004      	movs	r4, r0
   167ec:	0008      	movs	r0, r1
   167ee:	0011      	movs	r1, r2
   167f0:	1dfb      	adds	r3, r7, #7
   167f2:	1c22      	adds	r2, r4, #0
   167f4:	701a      	strb	r2, [r3, #0]
   167f6:	1dbb      	adds	r3, r7, #6
   167f8:	1c02      	adds	r2, r0, #0
   167fa:	701a      	strb	r2, [r3, #0]
   167fc:	1d7b      	adds	r3, r7, #5
   167fe:	1c0a      	adds	r2, r1, #0
   16800:	701a      	strb	r2, [r3, #0]
    red = r;
   16802:	4b08      	ldr	r3, [pc, #32]	; (16824 <UIChangeColors+0x40>)
   16804:	1dfa      	adds	r2, r7, #7
   16806:	7812      	ldrb	r2, [r2, #0]
   16808:	701a      	strb	r2, [r3, #0]
    green = g;
   1680a:	4b07      	ldr	r3, [pc, #28]	; (16828 <UIChangeColors+0x44>)
   1680c:	1dba      	adds	r2, r7, #6
   1680e:	7812      	ldrb	r2, [r2, #0]
   16810:	701a      	strb	r2, [r3, #0]
    blue = b;
   16812:	4b06      	ldr	r3, [pc, #24]	; (1682c <UIChangeColors+0x48>)
   16814:	1d7a      	adds	r2, r7, #5
   16816:	7812      	ldrb	r2, [r2, #0]
   16818:	701a      	strb	r2, [r3, #0]
}
   1681a:	46c0      	nop			; (mov r8, r8)
   1681c:	46bd      	mov	sp, r7
   1681e:	b003      	add	sp, #12
   16820:	bd90      	pop	{r4, r7, pc}
   16822:	46c0      	nop			; (mov r8, r8)
   16824:	20000640 	.word	0x20000640
   16828:	20000020 	.word	0x20000020
   1682c:	20000021 	.word	0x20000021

00016830 <NVIC_SystemReset>:
{
   16830:	b580      	push	{r7, lr}
   16832:	af00      	add	r7, sp, #0
   16834:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   16838:	4b02      	ldr	r3, [pc, #8]	; (16844 <NVIC_SystemReset+0x14>)
   1683a:	4a03      	ldr	r2, [pc, #12]	; (16848 <NVIC_SystemReset+0x18>)
   1683c:	60da      	str	r2, [r3, #12]
   1683e:	f3bf 8f4f 	dsb	sy
  while(1);                                                    /* wait until reset */
   16842:	e7fe      	b.n	16842 <NVIC_SystemReset+0x12>
   16844:	e000ed00 	.word	0xe000ed00
   16848:	05fa0004 	.word	0x05fa0004

0001684c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   1684c:	b580      	push	{r7, lr}
   1684e:	b084      	sub	sp, #16
   16850:	af00      	add	r7, sp, #0
   16852:	0002      	movs	r2, r0
   16854:	1dfb      	adds	r3, r7, #7
   16856:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   16858:	230f      	movs	r3, #15
   1685a:	18fb      	adds	r3, r7, r3
   1685c:	1dfa      	adds	r2, r7, #7
   1685e:	7812      	ldrb	r2, [r2, #0]
   16860:	09d2      	lsrs	r2, r2, #7
   16862:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   16864:	230e      	movs	r3, #14
   16866:	18fb      	adds	r3, r7, r3
   16868:	1dfa      	adds	r2, r7, #7
   1686a:	7812      	ldrb	r2, [r2, #0]
   1686c:	0952      	lsrs	r2, r2, #5
   1686e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   16870:	4b0d      	ldr	r3, [pc, #52]	; (168a8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   16872:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   16874:	230f      	movs	r3, #15
   16876:	18fb      	adds	r3, r7, r3
   16878:	781b      	ldrb	r3, [r3, #0]
   1687a:	2b00      	cmp	r3, #0
   1687c:	d10f      	bne.n	1689e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1687e:	230f      	movs	r3, #15
   16880:	18fb      	adds	r3, r7, r3
   16882:	781b      	ldrb	r3, [r3, #0]
   16884:	009b      	lsls	r3, r3, #2
   16886:	2210      	movs	r2, #16
   16888:	4694      	mov	ip, r2
   1688a:	44bc      	add	ip, r7
   1688c:	4463      	add	r3, ip
   1688e:	3b08      	subs	r3, #8
   16890:	681a      	ldr	r2, [r3, #0]
   16892:	230e      	movs	r3, #14
   16894:	18fb      	adds	r3, r7, r3
   16896:	781b      	ldrb	r3, [r3, #0]
   16898:	01db      	lsls	r3, r3, #7
   1689a:	18d3      	adds	r3, r2, r3
   1689c:	e000      	b.n	168a0 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   1689e:	2300      	movs	r3, #0
	}
}
   168a0:	0018      	movs	r0, r3
   168a2:	46bd      	mov	sp, r7
   168a4:	b004      	add	sp, #16
   168a6:	bd80      	pop	{r7, pc}
   168a8:	41004400 	.word	0x41004400

000168ac <system_reset>:
{
   168ac:	b580      	push	{r7, lr}
   168ae:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   168b0:	4b02      	ldr	r3, [pc, #8]	; (168bc <system_reset+0x10>)
   168b2:	4798      	blx	r3
}
   168b4:	46c0      	nop			; (mov r8, r8)
   168b6:	46bd      	mov	sp, r7
   168b8:	bd80      	pop	{r7, pc}
   168ba:	46c0      	nop			; (mov r8, r8)
   168bc:	00016831 	.word	0x00016831

000168c0 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   168c0:	b580      	push	{r7, lr}
   168c2:	b082      	sub	sp, #8
   168c4:	af00      	add	r7, sp, #0
   168c6:	0002      	movs	r2, r0
   168c8:	1dfb      	adds	r3, r7, #7
   168ca:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   168cc:	1dfb      	adds	r3, r7, #7
   168ce:	781b      	ldrb	r3, [r3, #0]
   168d0:	0018      	movs	r0, r3
   168d2:	4b03      	ldr	r3, [pc, #12]	; (168e0 <port_get_group_from_gpio_pin+0x20>)
   168d4:	4798      	blx	r3
   168d6:	0003      	movs	r3, r0
}
   168d8:	0018      	movs	r0, r3
   168da:	46bd      	mov	sp, r7
   168dc:	b002      	add	sp, #8
   168de:	bd80      	pop	{r7, pc}
   168e0:	0001684d 	.word	0x0001684d

000168e4 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   168e4:	b580      	push	{r7, lr}
   168e6:	b084      	sub	sp, #16
   168e8:	af00      	add	r7, sp, #0
   168ea:	0002      	movs	r2, r0
   168ec:	1dfb      	adds	r3, r7, #7
   168ee:	701a      	strb	r2, [r3, #0]
   168f0:	1dbb      	adds	r3, r7, #6
   168f2:	1c0a      	adds	r2, r1, #0
   168f4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   168f6:	1dfb      	adds	r3, r7, #7
   168f8:	781b      	ldrb	r3, [r3, #0]
   168fa:	0018      	movs	r0, r3
   168fc:	4b0d      	ldr	r3, [pc, #52]	; (16934 <port_pin_set_output_level+0x50>)
   168fe:	4798      	blx	r3
   16900:	0003      	movs	r3, r0
   16902:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   16904:	1dfb      	adds	r3, r7, #7
   16906:	781b      	ldrb	r3, [r3, #0]
   16908:	221f      	movs	r2, #31
   1690a:	4013      	ands	r3, r2
   1690c:	2201      	movs	r2, #1
   1690e:	409a      	lsls	r2, r3
   16910:	0013      	movs	r3, r2
   16912:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   16914:	1dbb      	adds	r3, r7, #6
   16916:	781b      	ldrb	r3, [r3, #0]
   16918:	2b00      	cmp	r3, #0
   1691a:	d003      	beq.n	16924 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1691c:	68fb      	ldr	r3, [r7, #12]
   1691e:	68ba      	ldr	r2, [r7, #8]
   16920:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   16922:	e002      	b.n	1692a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   16924:	68fb      	ldr	r3, [r7, #12]
   16926:	68ba      	ldr	r2, [r7, #8]
   16928:	615a      	str	r2, [r3, #20]
}
   1692a:	46c0      	nop			; (mov r8, r8)
   1692c:	46bd      	mov	sp, r7
   1692e:	b004      	add	sp, #16
   16930:	bd80      	pop	{r7, pc}
   16932:	46c0      	nop			; (mov r8, r8)
   16934:	000168c1 	.word	0x000168c1

00016938 <init_state>:

/**
 * \brief Initialize download state to not ready.
 */
static void init_state(void)
{
   16938:	b580      	push	{r7, lr}
   1693a:	af00      	add	r7, sp, #0
    down_state = NOT_READY;
   1693c:	4b02      	ldr	r3, [pc, #8]	; (16948 <init_state+0x10>)
   1693e:	2200      	movs	r2, #0
   16940:	701a      	strb	r2, [r3, #0]
}
   16942:	46c0      	nop			; (mov r8, r8)
   16944:	46bd      	mov	sp, r7
   16946:	bd80      	pop	{r7, pc}
   16948:	2000065d 	.word	0x2000065d

0001694c <clear_state>:
/**
 * \brief Clear state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void clear_state(download_state mask)
{
   1694c:	b580      	push	{r7, lr}
   1694e:	b082      	sub	sp, #8
   16950:	af00      	add	r7, sp, #0
   16952:	0002      	movs	r2, r0
   16954:	1dfb      	adds	r3, r7, #7
   16956:	701a      	strb	r2, [r3, #0]
    down_state &= ~mask;
   16958:	1dfb      	adds	r3, r7, #7
   1695a:	781b      	ldrb	r3, [r3, #0]
   1695c:	b25b      	sxtb	r3, r3
   1695e:	43db      	mvns	r3, r3
   16960:	b25b      	sxtb	r3, r3
   16962:	4a06      	ldr	r2, [pc, #24]	; (1697c <clear_state+0x30>)
   16964:	7812      	ldrb	r2, [r2, #0]
   16966:	b252      	sxtb	r2, r2
   16968:	4013      	ands	r3, r2
   1696a:	b25b      	sxtb	r3, r3
   1696c:	b2da      	uxtb	r2, r3
   1696e:	4b03      	ldr	r3, [pc, #12]	; (1697c <clear_state+0x30>)
   16970:	701a      	strb	r2, [r3, #0]
}
   16972:	46c0      	nop			; (mov r8, r8)
   16974:	46bd      	mov	sp, r7
   16976:	b002      	add	sp, #8
   16978:	bd80      	pop	{r7, pc}
   1697a:	46c0      	nop			; (mov r8, r8)
   1697c:	2000065d 	.word	0x2000065d

00016980 <add_state>:
/**
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
   16980:	b580      	push	{r7, lr}
   16982:	b082      	sub	sp, #8
   16984:	af00      	add	r7, sp, #0
   16986:	0002      	movs	r2, r0
   16988:	1dfb      	adds	r3, r7, #7
   1698a:	701a      	strb	r2, [r3, #0]
    down_state |= mask;
   1698c:	4b05      	ldr	r3, [pc, #20]	; (169a4 <add_state+0x24>)
   1698e:	781a      	ldrb	r2, [r3, #0]
   16990:	1dfb      	adds	r3, r7, #7
   16992:	781b      	ldrb	r3, [r3, #0]
   16994:	4313      	orrs	r3, r2
   16996:	b2da      	uxtb	r2, r3
   16998:	4b02      	ldr	r3, [pc, #8]	; (169a4 <add_state+0x24>)
   1699a:	701a      	strb	r2, [r3, #0]
}
   1699c:	46c0      	nop			; (mov r8, r8)
   1699e:	46bd      	mov	sp, r7
   169a0:	b002      	add	sp, #8
   169a2:	bd80      	pop	{r7, pc}
   169a4:	2000065d 	.word	0x2000065d

000169a8 <is_state_set>:
 * \param[in] mask Check download_state.
 * \return true if this state is set, false otherwise.
 */

static inline bool is_state_set(download_state mask)
{
   169a8:	b580      	push	{r7, lr}
   169aa:	b082      	sub	sp, #8
   169ac:	af00      	add	r7, sp, #0
   169ae:	0002      	movs	r2, r0
   169b0:	1dfb      	adds	r3, r7, #7
   169b2:	701a      	strb	r2, [r3, #0]
    return ((down_state & mask) != 0);
   169b4:	4b06      	ldr	r3, [pc, #24]	; (169d0 <is_state_set+0x28>)
   169b6:	781b      	ldrb	r3, [r3, #0]
   169b8:	1dfa      	adds	r2, r7, #7
   169ba:	7812      	ldrb	r2, [r2, #0]
   169bc:	4013      	ands	r3, r2
   169be:	b2db      	uxtb	r3, r3
   169c0:	1e5a      	subs	r2, r3, #1
   169c2:	4193      	sbcs	r3, r2
   169c4:	b2db      	uxtb	r3, r3
}
   169c6:	0018      	movs	r0, r3
   169c8:	46bd      	mov	sp, r7
   169ca:	b002      	add	sp, #8
   169cc:	bd80      	pop	{r7, pc}
   169ce:	46c0      	nop			; (mov r8, r8)
   169d0:	2000065d 	.word	0x2000065d

000169d4 <is_exist_file>:
 * \param[in] fp The file pointer to check.
 * \param[in] file_path_name The file name to check.
 * \return true if this file name is exist, false otherwise.
 */
static bool is_exist_file(FIL *fp, const char *file_path_name)
{
   169d4:	b590      	push	{r4, r7, lr}
   169d6:	b085      	sub	sp, #20
   169d8:	af00      	add	r7, sp, #0
   169da:	6078      	str	r0, [r7, #4]
   169dc:	6039      	str	r1, [r7, #0]
    if (fp == NULL || file_path_name == NULL) {
   169de:	687b      	ldr	r3, [r7, #4]
   169e0:	2b00      	cmp	r3, #0
   169e2:	d002      	beq.n	169ea <is_exist_file+0x16>
   169e4:	683b      	ldr	r3, [r7, #0]
   169e6:	2b00      	cmp	r3, #0
   169e8:	d101      	bne.n	169ee <is_exist_file+0x1a>
        return false;
   169ea:	2300      	movs	r3, #0
   169ec:	e013      	b.n	16a16 <is_exist_file+0x42>
    }

    FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   169ee:	230f      	movs	r3, #15
   169f0:	18fc      	adds	r4, r7, r3
   169f2:	6839      	ldr	r1, [r7, #0]
   169f4:	4b0a      	ldr	r3, [pc, #40]	; (16a20 <is_exist_file+0x4c>)
   169f6:	2200      	movs	r2, #0
   169f8:	0018      	movs	r0, r3
   169fa:	4b0a      	ldr	r3, [pc, #40]	; (16a24 <is_exist_file+0x50>)
   169fc:	4798      	blx	r3
   169fe:	0003      	movs	r3, r0
   16a00:	7023      	strb	r3, [r4, #0]
    f_close(&file_object);
   16a02:	4b07      	ldr	r3, [pc, #28]	; (16a20 <is_exist_file+0x4c>)
   16a04:	0018      	movs	r0, r3
   16a06:	4b08      	ldr	r3, [pc, #32]	; (16a28 <is_exist_file+0x54>)
   16a08:	4798      	blx	r3
    return (ret == FR_OK);
   16a0a:	230f      	movs	r3, #15
   16a0c:	18fb      	adds	r3, r7, r3
   16a0e:	781b      	ldrb	r3, [r3, #0]
   16a10:	425a      	negs	r2, r3
   16a12:	4153      	adcs	r3, r2
   16a14:	b2db      	uxtb	r3, r3
}
   16a16:	0018      	movs	r0, r3
   16a18:	46bd      	mov	sp, r7
   16a1a:	b005      	add	sp, #20
   16a1c:	bd90      	pop	{r4, r7, pc}
   16a1e:	46c0      	nop			; (mov r8, r8)
   16a20:	20000890 	.word	0x20000890
   16a24:	0002e635 	.word	0x0002e635
   16a28:	0002f035 	.word	0x0002f035

00016a2c <rename_to_unique>:
 * \param[out] file_path_name The file name change to uniquely and changed name is returned to this buffer.
 * \param[in] max_len Maximum file name length.
 * \return true if this file name is unique, false otherwise.
 */
static bool rename_to_unique(FIL *fp, char *file_path_name, uint8_t max_len)
{
   16a2c:	b580      	push	{r7, lr}
   16a2e:	b09e      	sub	sp, #120	; 0x78
   16a30:	af00      	add	r7, sp, #0
   16a32:	60f8      	str	r0, [r7, #12]
   16a34:	60b9      	str	r1, [r7, #8]
   16a36:	1dfb      	adds	r3, r7, #7
   16a38:	701a      	strb	r2, [r3, #0]
#define NUMBRING_MAX (3)
#define ADDITION_SIZE (NUMBRING_MAX + 1) /* '-' character is added before the number. */
    uint16_t i = 1, name_len = 0, ext_len = 0, count = 0;
   16a3a:	2376      	movs	r3, #118	; 0x76
   16a3c:	18fb      	adds	r3, r7, r3
   16a3e:	2201      	movs	r2, #1
   16a40:	801a      	strh	r2, [r3, #0]
   16a42:	2374      	movs	r3, #116	; 0x74
   16a44:	18fb      	adds	r3, r7, r3
   16a46:	2200      	movs	r2, #0
   16a48:	801a      	strh	r2, [r3, #0]
   16a4a:	236e      	movs	r3, #110	; 0x6e
   16a4c:	18fb      	adds	r3, r7, r3
   16a4e:	2200      	movs	r2, #0
   16a50:	801a      	strh	r2, [r3, #0]
   16a52:	2372      	movs	r3, #114	; 0x72
   16a54:	18fb      	adds	r3, r7, r3
   16a56:	2200      	movs	r2, #0
   16a58:	801a      	strh	r2, [r3, #0]
    char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
   16a5a:	2324      	movs	r3, #36	; 0x24
   16a5c:	18fb      	adds	r3, r7, r3
   16a5e:	0018      	movs	r0, r3
   16a60:	2341      	movs	r3, #65	; 0x41
   16a62:	001a      	movs	r2, r3
   16a64:	2100      	movs	r1, #0
   16a66:	4b92      	ldr	r3, [pc, #584]	; (16cb0 <rename_to_unique+0x284>)
   16a68:	4798      	blx	r3
    char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
   16a6a:	2318      	movs	r3, #24
   16a6c:	18fb      	adds	r3, r7, r3
   16a6e:	0018      	movs	r0, r3
   16a70:	2309      	movs	r3, #9
   16a72:	001a      	movs	r2, r3
   16a74:	2100      	movs	r1, #0
   16a76:	4b8e      	ldr	r3, [pc, #568]	; (16cb0 <rename_to_unique+0x284>)
   16a78:	4798      	blx	r3
    char numbering[NUMBRING_MAX + 1] = {0};
   16a7a:	2314      	movs	r3, #20
   16a7c:	18fb      	adds	r3, r7, r3
   16a7e:	2200      	movs	r2, #0
   16a80:	601a      	str	r2, [r3, #0]
    char *p = NULL;
   16a82:	2300      	movs	r3, #0
   16a84:	66bb      	str	r3, [r7, #104]	; 0x68
    bool valid_ext = false;
   16a86:	2371      	movs	r3, #113	; 0x71
   16a88:	18fb      	adds	r3, r7, r3
   16a8a:	2200      	movs	r2, #0
   16a8c:	701a      	strb	r2, [r3, #0]

    if (file_path_name == NULL) {
   16a8e:	68bb      	ldr	r3, [r7, #8]
   16a90:	2b00      	cmp	r3, #0
   16a92:	d101      	bne.n	16a98 <rename_to_unique+0x6c>
        return false;
   16a94:	2300      	movs	r3, #0
   16a96:	e106      	b.n	16ca6 <rename_to_unique+0x27a>
    }

    if (!is_exist_file(fp, file_path_name)) {
   16a98:	68ba      	ldr	r2, [r7, #8]
   16a9a:	68fb      	ldr	r3, [r7, #12]
   16a9c:	0011      	movs	r1, r2
   16a9e:	0018      	movs	r0, r3
   16aa0:	4b84      	ldr	r3, [pc, #528]	; (16cb4 <rename_to_unique+0x288>)
   16aa2:	4798      	blx	r3
   16aa4:	0003      	movs	r3, r0
   16aa6:	001a      	movs	r2, r3
   16aa8:	2301      	movs	r3, #1
   16aaa:	4053      	eors	r3, r2
   16aac:	b2db      	uxtb	r3, r3
   16aae:	2b00      	cmp	r3, #0
   16ab0:	d001      	beq.n	16ab6 <rename_to_unique+0x8a>
        return true;
   16ab2:	2301      	movs	r3, #1
   16ab4:	e0f7      	b.n	16ca6 <rename_to_unique+0x27a>
    } else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
   16ab6:	68bb      	ldr	r3, [r7, #8]
   16ab8:	0018      	movs	r0, r3
   16aba:	4b7f      	ldr	r3, [pc, #508]	; (16cb8 <rename_to_unique+0x28c>)
   16abc:	4798      	blx	r3
   16abe:	0003      	movs	r3, r0
   16ac0:	2b40      	cmp	r3, #64	; 0x40
   16ac2:	d901      	bls.n	16ac8 <rename_to_unique+0x9c>
        return false;
   16ac4:	2300      	movs	r3, #0
   16ac6:	e0ee      	b.n	16ca6 <rename_to_unique+0x27a>
    }

    p = strrchr(file_path_name, '.');
   16ac8:	68bb      	ldr	r3, [r7, #8]
   16aca:	212e      	movs	r1, #46	; 0x2e
   16acc:	0018      	movs	r0, r3
   16ace:	4b7b      	ldr	r3, [pc, #492]	; (16cbc <rename_to_unique+0x290>)
   16ad0:	4798      	blx	r3
   16ad2:	0003      	movs	r3, r0
   16ad4:	66bb      	str	r3, [r7, #104]	; 0x68
    if (p != NULL) {
   16ad6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   16ad8:	2b00      	cmp	r3, #0
   16ada:	d052      	beq.n	16b82 <rename_to_unique+0x156>
        ext_len = strlen(p);
   16adc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   16ade:	0018      	movs	r0, r3
   16ae0:	4b75      	ldr	r3, [pc, #468]	; (16cb8 <rename_to_unique+0x28c>)
   16ae2:	4798      	blx	r3
   16ae4:	0002      	movs	r2, r0
   16ae6:	236e      	movs	r3, #110	; 0x6e
   16ae8:	18fb      	adds	r3, r7, r3
   16aea:	801a      	strh	r2, [r3, #0]
        if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
   16aec:	236e      	movs	r3, #110	; 0x6e
   16aee:	18fb      	adds	r3, r7, r3
   16af0:	881b      	ldrh	r3, [r3, #0]
   16af2:	2b07      	cmp	r3, #7
   16af4:	d837      	bhi.n	16b66 <rename_to_unique+0x13a>
            valid_ext = true;
   16af6:	2371      	movs	r3, #113	; 0x71
   16af8:	18fb      	adds	r3, r7, r3
   16afa:	2201      	movs	r2, #1
   16afc:	701a      	strb	r2, [r3, #0]
            strcpy(ext, p);
   16afe:	6eba      	ldr	r2, [r7, #104]	; 0x68
   16b00:	2318      	movs	r3, #24
   16b02:	18fb      	adds	r3, r7, r3
   16b04:	0011      	movs	r1, r2
   16b06:	0018      	movs	r0, r3
   16b08:	4b6d      	ldr	r3, [pc, #436]	; (16cc0 <rename_to_unique+0x294>)
   16b0a:	4798      	blx	r3
            if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
   16b0c:	68bb      	ldr	r3, [r7, #8]
   16b0e:	0018      	movs	r0, r3
   16b10:	4b69      	ldr	r3, [pc, #420]	; (16cb8 <rename_to_unique+0x28c>)
   16b12:	4798      	blx	r3
   16b14:	0002      	movs	r2, r0
   16b16:	236e      	movs	r3, #110	; 0x6e
   16b18:	18fb      	adds	r3, r7, r3
   16b1a:	881b      	ldrh	r3, [r3, #0]
   16b1c:	1ad3      	subs	r3, r2, r3
   16b1e:	2b3c      	cmp	r3, #60	; 0x3c
   16b20:	d911      	bls.n	16b46 <rename_to_unique+0x11a>
                name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
   16b22:	2374      	movs	r3, #116	; 0x74
   16b24:	18fb      	adds	r3, r7, r3
   16b26:	226e      	movs	r2, #110	; 0x6e
   16b28:	18ba      	adds	r2, r7, r2
   16b2a:	8812      	ldrh	r2, [r2, #0]
   16b2c:	213c      	movs	r1, #60	; 0x3c
   16b2e:	1a8a      	subs	r2, r1, r2
   16b30:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   16b32:	2374      	movs	r3, #116	; 0x74
   16b34:	18fb      	adds	r3, r7, r3
   16b36:	881a      	ldrh	r2, [r3, #0]
   16b38:	68b9      	ldr	r1, [r7, #8]
   16b3a:	2324      	movs	r3, #36	; 0x24
   16b3c:	18fb      	adds	r3, r7, r3
   16b3e:	0018      	movs	r0, r3
   16b40:	4b60      	ldr	r3, [pc, #384]	; (16cc4 <rename_to_unique+0x298>)
   16b42:	4798      	blx	r3
   16b44:	e02a      	b.n	16b9c <rename_to_unique+0x170>
            } else {
                name_len = (p - file_path_name);
   16b46:	6eba      	ldr	r2, [r7, #104]	; 0x68
   16b48:	68bb      	ldr	r3, [r7, #8]
   16b4a:	1ad2      	subs	r2, r2, r3
   16b4c:	2374      	movs	r3, #116	; 0x74
   16b4e:	18fb      	adds	r3, r7, r3
   16b50:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   16b52:	2374      	movs	r3, #116	; 0x74
   16b54:	18fb      	adds	r3, r7, r3
   16b56:	881a      	ldrh	r2, [r3, #0]
   16b58:	68b9      	ldr	r1, [r7, #8]
   16b5a:	2324      	movs	r3, #36	; 0x24
   16b5c:	18fb      	adds	r3, r7, r3
   16b5e:	0018      	movs	r0, r3
   16b60:	4b58      	ldr	r3, [pc, #352]	; (16cc4 <rename_to_unique+0x298>)
   16b62:	4798      	blx	r3
   16b64:	e01a      	b.n	16b9c <rename_to_unique+0x170>
            }
        } else {
            name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   16b66:	2374      	movs	r3, #116	; 0x74
   16b68:	18fb      	adds	r3, r7, r3
   16b6a:	223c      	movs	r2, #60	; 0x3c
   16b6c:	801a      	strh	r2, [r3, #0]
            strncpy(name, file_path_name, name_len);
   16b6e:	2374      	movs	r3, #116	; 0x74
   16b70:	18fb      	adds	r3, r7, r3
   16b72:	881a      	ldrh	r2, [r3, #0]
   16b74:	68b9      	ldr	r1, [r7, #8]
   16b76:	2324      	movs	r3, #36	; 0x24
   16b78:	18fb      	adds	r3, r7, r3
   16b7a:	0018      	movs	r0, r3
   16b7c:	4b51      	ldr	r3, [pc, #324]	; (16cc4 <rename_to_unique+0x298>)
   16b7e:	4798      	blx	r3
   16b80:	e00c      	b.n	16b9c <rename_to_unique+0x170>
        }
    } else {
        name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   16b82:	2374      	movs	r3, #116	; 0x74
   16b84:	18fb      	adds	r3, r7, r3
   16b86:	223c      	movs	r2, #60	; 0x3c
   16b88:	801a      	strh	r2, [r3, #0]
        strncpy(name, file_path_name, name_len);
   16b8a:	2374      	movs	r3, #116	; 0x74
   16b8c:	18fb      	adds	r3, r7, r3
   16b8e:	881a      	ldrh	r2, [r3, #0]
   16b90:	68b9      	ldr	r1, [r7, #8]
   16b92:	2324      	movs	r3, #36	; 0x24
   16b94:	18fb      	adds	r3, r7, r3
   16b96:	0018      	movs	r0, r3
   16b98:	4b4a      	ldr	r3, [pc, #296]	; (16cc4 <rename_to_unique+0x298>)
   16b9a:	4798      	blx	r3
    }

    name[name_len++] = '-';
   16b9c:	2374      	movs	r3, #116	; 0x74
   16b9e:	18fb      	adds	r3, r7, r3
   16ba0:	881b      	ldrh	r3, [r3, #0]
   16ba2:	2274      	movs	r2, #116	; 0x74
   16ba4:	18ba      	adds	r2, r7, r2
   16ba6:	1c59      	adds	r1, r3, #1
   16ba8:	8011      	strh	r1, [r2, #0]
   16baa:	001a      	movs	r2, r3
   16bac:	2324      	movs	r3, #36	; 0x24
   16bae:	18fb      	adds	r3, r7, r3
   16bb0:	212d      	movs	r1, #45	; 0x2d
   16bb2:	5499      	strb	r1, [r3, r2]

    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   16bb4:	2376      	movs	r3, #118	; 0x76
   16bb6:	18fb      	adds	r3, r7, r3
   16bb8:	2200      	movs	r2, #0
   16bba:	801a      	strh	r2, [r3, #0]
   16bbc:	2372      	movs	r3, #114	; 0x72
   16bbe:	18fb      	adds	r3, r7, r3
   16bc0:	2201      	movs	r2, #1
   16bc2:	801a      	strh	r2, [r3, #0]
   16bc4:	e010      	b.n	16be8 <rename_to_unique+0x1bc>
        count *= 10;
   16bc6:	2372      	movs	r3, #114	; 0x72
   16bc8:	18fa      	adds	r2, r7, r3
   16bca:	2372      	movs	r3, #114	; 0x72
   16bcc:	18fb      	adds	r3, r7, r3
   16bce:	881b      	ldrh	r3, [r3, #0]
   16bd0:	1c19      	adds	r1, r3, #0
   16bd2:	0089      	lsls	r1, r1, #2
   16bd4:	18cb      	adds	r3, r1, r3
   16bd6:	18db      	adds	r3, r3, r3
   16bd8:	8013      	strh	r3, [r2, #0]
    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   16bda:	2376      	movs	r3, #118	; 0x76
   16bdc:	18fb      	adds	r3, r7, r3
   16bde:	881a      	ldrh	r2, [r3, #0]
   16be0:	2376      	movs	r3, #118	; 0x76
   16be2:	18fb      	adds	r3, r7, r3
   16be4:	3201      	adds	r2, #1
   16be6:	801a      	strh	r2, [r3, #0]
   16be8:	2376      	movs	r3, #118	; 0x76
   16bea:	18fb      	adds	r3, r7, r3
   16bec:	881b      	ldrh	r3, [r3, #0]
   16bee:	2b02      	cmp	r3, #2
   16bf0:	d9e9      	bls.n	16bc6 <rename_to_unique+0x19a>
    }
    for (i = 1; i < count; i++) {
   16bf2:	2376      	movs	r3, #118	; 0x76
   16bf4:	18fb      	adds	r3, r7, r3
   16bf6:	2201      	movs	r2, #1
   16bf8:	801a      	strh	r2, [r3, #0]
   16bfa:	e04b      	b.n	16c94 <rename_to_unique+0x268>
        sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
   16bfc:	2376      	movs	r3, #118	; 0x76
   16bfe:	18fb      	adds	r3, r7, r3
   16c00:	881a      	ldrh	r2, [r3, #0]
   16c02:	4931      	ldr	r1, [pc, #196]	; (16cc8 <rename_to_unique+0x29c>)
   16c04:	2314      	movs	r3, #20
   16c06:	18fb      	adds	r3, r7, r3
   16c08:	0018      	movs	r0, r3
   16c0a:	4b30      	ldr	r3, [pc, #192]	; (16ccc <rename_to_unique+0x2a0>)
   16c0c:	4798      	blx	r3
        strncpy(&name[name_len], numbering, NUMBRING_MAX);
   16c0e:	2374      	movs	r3, #116	; 0x74
   16c10:	18fb      	adds	r3, r7, r3
   16c12:	881b      	ldrh	r3, [r3, #0]
   16c14:	2224      	movs	r2, #36	; 0x24
   16c16:	18ba      	adds	r2, r7, r2
   16c18:	18d3      	adds	r3, r2, r3
   16c1a:	2214      	movs	r2, #20
   16c1c:	18b9      	adds	r1, r7, r2
   16c1e:	2203      	movs	r2, #3
   16c20:	0018      	movs	r0, r3
   16c22:	4b28      	ldr	r3, [pc, #160]	; (16cc4 <rename_to_unique+0x298>)
   16c24:	4798      	blx	r3
        if (valid_ext) {
   16c26:	2371      	movs	r3, #113	; 0x71
   16c28:	18fb      	adds	r3, r7, r3
   16c2a:	781b      	ldrb	r3, [r3, #0]
   16c2c:	2b00      	cmp	r3, #0
   16c2e:	d00c      	beq.n	16c4a <rename_to_unique+0x21e>
            strcpy(&name[name_len + NUMBRING_MAX], ext);
   16c30:	2374      	movs	r3, #116	; 0x74
   16c32:	18fb      	adds	r3, r7, r3
   16c34:	881b      	ldrh	r3, [r3, #0]
   16c36:	3303      	adds	r3, #3
   16c38:	2224      	movs	r2, #36	; 0x24
   16c3a:	18ba      	adds	r2, r7, r2
   16c3c:	18d3      	adds	r3, r2, r3
   16c3e:	2218      	movs	r2, #24
   16c40:	18ba      	adds	r2, r7, r2
   16c42:	0011      	movs	r1, r2
   16c44:	0018      	movs	r0, r3
   16c46:	4b1e      	ldr	r3, [pc, #120]	; (16cc0 <rename_to_unique+0x294>)
   16c48:	4798      	blx	r3
        }

        if (!is_exist_file(fp, name)) {
   16c4a:	2324      	movs	r3, #36	; 0x24
   16c4c:	18fa      	adds	r2, r7, r3
   16c4e:	68fb      	ldr	r3, [r7, #12]
   16c50:	0011      	movs	r1, r2
   16c52:	0018      	movs	r0, r3
   16c54:	4b17      	ldr	r3, [pc, #92]	; (16cb4 <rename_to_unique+0x288>)
   16c56:	4798      	blx	r3
   16c58:	0003      	movs	r3, r0
   16c5a:	001a      	movs	r2, r3
   16c5c:	2301      	movs	r3, #1
   16c5e:	4053      	eors	r3, r2
   16c60:	b2db      	uxtb	r3, r3
   16c62:	2b00      	cmp	r3, #0
   16c64:	d00f      	beq.n	16c86 <rename_to_unique+0x25a>
            memset(file_path_name, 0, max_len);
   16c66:	1dfb      	adds	r3, r7, #7
   16c68:	781a      	ldrb	r2, [r3, #0]
   16c6a:	68bb      	ldr	r3, [r7, #8]
   16c6c:	2100      	movs	r1, #0
   16c6e:	0018      	movs	r0, r3
   16c70:	4b0f      	ldr	r3, [pc, #60]	; (16cb0 <rename_to_unique+0x284>)
   16c72:	4798      	blx	r3
            strcpy(file_path_name, name);
   16c74:	2324      	movs	r3, #36	; 0x24
   16c76:	18fa      	adds	r2, r7, r3
   16c78:	68bb      	ldr	r3, [r7, #8]
   16c7a:	0011      	movs	r1, r2
   16c7c:	0018      	movs	r0, r3
   16c7e:	4b10      	ldr	r3, [pc, #64]	; (16cc0 <rename_to_unique+0x294>)
   16c80:	4798      	blx	r3
            return true;
   16c82:	2301      	movs	r3, #1
   16c84:	e00f      	b.n	16ca6 <rename_to_unique+0x27a>
    for (i = 1; i < count; i++) {
   16c86:	2376      	movs	r3, #118	; 0x76
   16c88:	18fb      	adds	r3, r7, r3
   16c8a:	881a      	ldrh	r2, [r3, #0]
   16c8c:	2376      	movs	r3, #118	; 0x76
   16c8e:	18fb      	adds	r3, r7, r3
   16c90:	3201      	adds	r2, #1
   16c92:	801a      	strh	r2, [r3, #0]
   16c94:	2376      	movs	r3, #118	; 0x76
   16c96:	18fa      	adds	r2, r7, r3
   16c98:	2372      	movs	r3, #114	; 0x72
   16c9a:	18fb      	adds	r3, r7, r3
   16c9c:	8812      	ldrh	r2, [r2, #0]
   16c9e:	881b      	ldrh	r3, [r3, #0]
   16ca0:	429a      	cmp	r2, r3
   16ca2:	d3ab      	bcc.n	16bfc <rename_to_unique+0x1d0>
        }
    }
    return false;
   16ca4:	2300      	movs	r3, #0
}
   16ca6:	0018      	movs	r0, r3
   16ca8:	46bd      	mov	sp, r7
   16caa:	b01e      	add	sp, #120	; 0x78
   16cac:	bd80      	pop	{r7, pc}
   16cae:	46c0      	nop			; (mov r8, r8)
   16cb0:	00035707 	.word	0x00035707
   16cb4:	000169d5 	.word	0x000169d5
   16cb8:	00035abf 	.word	0x00035abf
   16cbc:	00035b19 	.word	0x00035b19
   16cc0:	00035a73 	.word	0x00035a73
   16cc4:	00035aef 	.word	0x00035aef
   16cc8:	00037154 	.word	0x00037154
   16ccc:	000359c5 	.word	0x000359c5

00016cd0 <start_download>:

/**
 * \brief Start file download via HTTP connection.
 */
static void start_download(void)
{
   16cd0:	b590      	push	{r4, r7, lr}
   16cd2:	b083      	sub	sp, #12
   16cd4:	af02      	add	r7, sp, #8
    if (!is_state_set(STORAGE_READY)) {
   16cd6:	2001      	movs	r0, #1
   16cd8:	4b22      	ldr	r3, [pc, #136]	; (16d64 <start_download+0x94>)
   16cda:	4798      	blx	r3
   16cdc:	0003      	movs	r3, r0
   16cde:	001a      	movs	r2, r3
   16ce0:	2301      	movs	r3, #1
   16ce2:	4053      	eors	r3, r2
   16ce4:	b2db      	uxtb	r3, r3
   16ce6:	2b00      	cmp	r3, #0
   16ce8:	d005      	beq.n	16cf6 <start_download+0x26>
        LogMessage(LOG_DEBUG_LVL, "start_download: MMC storage not ready.\r\n");
   16cea:	4b1f      	ldr	r3, [pc, #124]	; (16d68 <start_download+0x98>)
   16cec:	0019      	movs	r1, r3
   16cee:	2001      	movs	r0, #1
   16cf0:	4b1e      	ldr	r3, [pc, #120]	; (16d6c <start_download+0x9c>)
   16cf2:	4798      	blx	r3
        return;
   16cf4:	e032      	b.n	16d5c <start_download+0x8c>
    }

    if (!is_state_set(WIFI_CONNECTED)) {
   16cf6:	2002      	movs	r0, #2
   16cf8:	4b1a      	ldr	r3, [pc, #104]	; (16d64 <start_download+0x94>)
   16cfa:	4798      	blx	r3
   16cfc:	0003      	movs	r3, r0
   16cfe:	001a      	movs	r2, r3
   16d00:	2301      	movs	r3, #1
   16d02:	4053      	eors	r3, r2
   16d04:	b2db      	uxtb	r3, r3
   16d06:	2b00      	cmp	r3, #0
   16d08:	d005      	beq.n	16d16 <start_download+0x46>
        LogMessage(LOG_DEBUG_LVL, "start_download: Wi-Fi is not connected.\r\n");
   16d0a:	4b19      	ldr	r3, [pc, #100]	; (16d70 <start_download+0xa0>)
   16d0c:	0019      	movs	r1, r3
   16d0e:	2001      	movs	r0, #1
   16d10:	4b16      	ldr	r3, [pc, #88]	; (16d6c <start_download+0x9c>)
   16d12:	4798      	blx	r3
        return;
   16d14:	e022      	b.n	16d5c <start_download+0x8c>
    }

    if (is_state_set(GET_REQUESTED)) {
   16d16:	2004      	movs	r0, #4
   16d18:	4b12      	ldr	r3, [pc, #72]	; (16d64 <start_download+0x94>)
   16d1a:	4798      	blx	r3
   16d1c:	1e03      	subs	r3, r0, #0
   16d1e:	d005      	beq.n	16d2c <start_download+0x5c>
        LogMessage(LOG_DEBUG_LVL, "start_download: request is sent already.\r\n");
   16d20:	4b14      	ldr	r3, [pc, #80]	; (16d74 <start_download+0xa4>)
   16d22:	0019      	movs	r1, r3
   16d24:	2001      	movs	r0, #1
   16d26:	4b11      	ldr	r3, [pc, #68]	; (16d6c <start_download+0x9c>)
   16d28:	4798      	blx	r3
        return;
   16d2a:	e017      	b.n	16d5c <start_download+0x8c>
    }

    if (is_state_set(DOWNLOADING)) {
   16d2c:	2008      	movs	r0, #8
   16d2e:	4b0d      	ldr	r3, [pc, #52]	; (16d64 <start_download+0x94>)
   16d30:	4798      	blx	r3
   16d32:	1e03      	subs	r3, r0, #0
   16d34:	d005      	beq.n	16d42 <start_download+0x72>
        LogMessage(LOG_DEBUG_LVL, "start_download: running download already.\r\n");
   16d36:	4b10      	ldr	r3, [pc, #64]	; (16d78 <start_download+0xa8>)
   16d38:	0019      	movs	r1, r3
   16d3a:	2001      	movs	r0, #1
   16d3c:	4b0b      	ldr	r3, [pc, #44]	; (16d6c <start_download+0x9c>)
   16d3e:	4798      	blx	r3
        return;
   16d40:	e00c      	b.n	16d5c <start_download+0x8c>
    }

    /* Send the HTTP request. */
    LogMessage(LOG_DEBUG_LVL, "start_download: sending HTTP request...\r\n");
   16d42:	4b0e      	ldr	r3, [pc, #56]	; (16d7c <start_download+0xac>)
   16d44:	0019      	movs	r1, r3
   16d46:	2001      	movs	r0, #1
   16d48:	4b08      	ldr	r3, [pc, #32]	; (16d6c <start_download+0x9c>)
   16d4a:	4798      	blx	r3
    http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
   16d4c:	490c      	ldr	r1, [pc, #48]	; (16d80 <start_download+0xb0>)
   16d4e:	480d      	ldr	r0, [pc, #52]	; (16d84 <start_download+0xb4>)
   16d50:	2300      	movs	r3, #0
   16d52:	9300      	str	r3, [sp, #0]
   16d54:	2300      	movs	r3, #0
   16d56:	2201      	movs	r2, #1
   16d58:	4c0b      	ldr	r4, [pc, #44]	; (16d88 <start_download+0xb8>)
   16d5a:	47a0      	blx	r4
}
   16d5c:	46bd      	mov	sp, r7
   16d5e:	b001      	add	sp, #4
   16d60:	bd90      	pop	{r4, r7, pc}
   16d62:	46c0      	nop			; (mov r8, r8)
   16d64:	000169a9 	.word	0x000169a9
   16d68:	0003715c 	.word	0x0003715c
   16d6c:	0001eb25 	.word	0x0001eb25
   16d70:	00037188 	.word	0x00037188
   16d74:	000371b4 	.word	0x000371b4
   16d78:	000371e0 	.word	0x000371e0
   16d7c:	0003720c 	.word	0x0003720c
   16d80:	00037238 	.word	0x00037238
   16d84:	20004548 	.word	0x20004548
   16d88:	00031c89 	.word	0x00031c89

00016d8c <store_file_packet>:
 * \brief Store received packet to file.
 * \param[in] data Packet data.
 * \param[in] length Packet data length.
 */
static void store_file_packet(char *data, uint32_t length)
{
   16d8c:	b5b0      	push	{r4, r5, r7, lr}
   16d8e:	b086      	sub	sp, #24
   16d90:	af00      	add	r7, sp, #0
   16d92:	6078      	str	r0, [r7, #4]
   16d94:	6039      	str	r1, [r7, #0]
    FRESULT ret;
    if ((data == NULL) || (length < 1)) {
   16d96:	687b      	ldr	r3, [r7, #4]
   16d98:	2b00      	cmp	r3, #0
   16d9a:	d002      	beq.n	16da2 <store_file_packet+0x16>
   16d9c:	683b      	ldr	r3, [r7, #0]
   16d9e:	2b00      	cmp	r3, #0
   16da0:	d105      	bne.n	16dae <store_file_packet+0x22>
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: empty data.\r\n");
   16da2:	4b58      	ldr	r3, [pc, #352]	; (16f04 <store_file_packet+0x178>)
   16da4:	0019      	movs	r1, r3
   16da6:	2001      	movs	r0, #1
   16da8:	4b57      	ldr	r3, [pc, #348]	; (16f08 <store_file_packet+0x17c>)
   16daa:	4798      	blx	r3
        return;
   16dac:	e0a6      	b.n	16efc <store_file_packet+0x170>
    }

    if (!is_state_set(DOWNLOADING)) {
   16dae:	2008      	movs	r0, #8
   16db0:	4b56      	ldr	r3, [pc, #344]	; (16f0c <store_file_packet+0x180>)
   16db2:	4798      	blx	r3
   16db4:	0003      	movs	r3, r0
   16db6:	001a      	movs	r2, r3
   16db8:	2301      	movs	r3, #1
   16dba:	4053      	eors	r3, r2
   16dbc:	b2db      	uxtb	r3, r3
   16dbe:	2b00      	cmp	r3, #0
   16dc0:	d055      	beq.n	16e6e <store_file_packet+0xe2>
        char *cp = NULL;
   16dc2:	2300      	movs	r3, #0
   16dc4:	617b      	str	r3, [r7, #20]
        save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   16dc6:	4b52      	ldr	r3, [pc, #328]	; (16f10 <store_file_packet+0x184>)
   16dc8:	2230      	movs	r2, #48	; 0x30
   16dca:	701a      	strb	r2, [r3, #0]
        save_file_name[1] = ':';
   16dcc:	4b50      	ldr	r3, [pc, #320]	; (16f10 <store_file_packet+0x184>)
   16dce:	223a      	movs	r2, #58	; 0x3a
   16dd0:	705a      	strb	r2, [r3, #1]
        cp = (char *)(MAIN_HTTP_FILE_URL + strlen(MAIN_HTTP_FILE_URL));
   16dd2:	4b50      	ldr	r3, [pc, #320]	; (16f14 <store_file_packet+0x188>)
   16dd4:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   16dd6:	e002      	b.n	16dde <store_file_packet+0x52>
            cp--;
   16dd8:	697b      	ldr	r3, [r7, #20]
   16dda:	3b01      	subs	r3, #1
   16ddc:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   16dde:	697b      	ldr	r3, [r7, #20]
   16de0:	781b      	ldrb	r3, [r3, #0]
   16de2:	2b2f      	cmp	r3, #47	; 0x2f
   16de4:	d1f8      	bne.n	16dd8 <store_file_packet+0x4c>
        }
        if (strlen(cp) > 1) {
   16de6:	697b      	ldr	r3, [r7, #20]
   16de8:	0018      	movs	r0, r3
   16dea:	4b4b      	ldr	r3, [pc, #300]	; (16f18 <store_file_packet+0x18c>)
   16dec:	4798      	blx	r3
   16dee:	0003      	movs	r3, r0
   16df0:	2b01      	cmp	r3, #1
   16df2:	d924      	bls.n	16e3e <store_file_packet+0xb2>
            cp++;
   16df4:	697b      	ldr	r3, [r7, #20]
   16df6:	3301      	adds	r3, #1
   16df8:	617b      	str	r3, [r7, #20]
            strcpy(&save_file_name[2], cp);
   16dfa:	697a      	ldr	r2, [r7, #20]
   16dfc:	4b47      	ldr	r3, [pc, #284]	; (16f1c <store_file_packet+0x190>)
   16dfe:	0011      	movs	r1, r2
   16e00:	0018      	movs	r0, r3
   16e02:	4b47      	ldr	r3, [pc, #284]	; (16f20 <store_file_packet+0x194>)
   16e04:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
            add_state(CANCELED);
            return;
        }

        rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
   16e06:	4942      	ldr	r1, [pc, #264]	; (16f10 <store_file_packet+0x184>)
   16e08:	4b46      	ldr	r3, [pc, #280]	; (16f24 <store_file_packet+0x198>)
   16e0a:	2240      	movs	r2, #64	; 0x40
   16e0c:	0018      	movs	r0, r3
   16e0e:	4b46      	ldr	r3, [pc, #280]	; (16f28 <store_file_packet+0x19c>)
   16e10:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: creating file [%s]\r\n", save_file_name);
   16e12:	4a3f      	ldr	r2, [pc, #252]	; (16f10 <store_file_packet+0x184>)
   16e14:	4b45      	ldr	r3, [pc, #276]	; (16f2c <store_file_packet+0x1a0>)
   16e16:	0019      	movs	r1, r3
   16e18:	2001      	movs	r0, #1
   16e1a:	4b3b      	ldr	r3, [pc, #236]	; (16f08 <store_file_packet+0x17c>)
   16e1c:	4798      	blx	r3
        ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   16e1e:	2313      	movs	r3, #19
   16e20:	18fc      	adds	r4, r7, r3
   16e22:	493b      	ldr	r1, [pc, #236]	; (16f10 <store_file_packet+0x184>)
   16e24:	4b3f      	ldr	r3, [pc, #252]	; (16f24 <store_file_packet+0x198>)
   16e26:	220a      	movs	r2, #10
   16e28:	0018      	movs	r0, r3
   16e2a:	4b41      	ldr	r3, [pc, #260]	; (16f30 <store_file_packet+0x1a4>)
   16e2c:	4798      	blx	r3
   16e2e:	0003      	movs	r3, r0
   16e30:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   16e32:	2313      	movs	r3, #19
   16e34:	18fb      	adds	r3, r7, r3
   16e36:	781b      	ldrb	r3, [r3, #0]
   16e38:	2b00      	cmp	r3, #0
   16e3a:	d012      	beq.n	16e62 <store_file_packet+0xd6>
   16e3c:	e008      	b.n	16e50 <store_file_packet+0xc4>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
   16e3e:	4b3d      	ldr	r3, [pc, #244]	; (16f34 <store_file_packet+0x1a8>)
   16e40:	0019      	movs	r1, r3
   16e42:	2001      	movs	r0, #1
   16e44:	4b30      	ldr	r3, [pc, #192]	; (16f08 <store_file_packet+0x17c>)
   16e46:	4798      	blx	r3
            add_state(CANCELED);
   16e48:	2020      	movs	r0, #32
   16e4a:	4b3b      	ldr	r3, [pc, #236]	; (16f38 <store_file_packet+0x1ac>)
   16e4c:	4798      	blx	r3
            return;
   16e4e:	e055      	b.n	16efc <store_file_packet+0x170>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file creation error! ret:%d\r\n", ret);
   16e50:	2313      	movs	r3, #19
   16e52:	18fb      	adds	r3, r7, r3
   16e54:	781a      	ldrb	r2, [r3, #0]
   16e56:	4b39      	ldr	r3, [pc, #228]	; (16f3c <store_file_packet+0x1b0>)
   16e58:	0019      	movs	r1, r3
   16e5a:	2001      	movs	r0, #1
   16e5c:	4b2a      	ldr	r3, [pc, #168]	; (16f08 <store_file_packet+0x17c>)
   16e5e:	4798      	blx	r3
            return;
   16e60:	e04c      	b.n	16efc <store_file_packet+0x170>
        }

        received_file_size = 0;
   16e62:	4b37      	ldr	r3, [pc, #220]	; (16f40 <store_file_packet+0x1b4>)
   16e64:	2200      	movs	r2, #0
   16e66:	601a      	str	r2, [r3, #0]
        add_state(DOWNLOADING);
   16e68:	2008      	movs	r0, #8
   16e6a:	4b33      	ldr	r3, [pc, #204]	; (16f38 <store_file_packet+0x1ac>)
   16e6c:	4798      	blx	r3
    }

    if (data != NULL) {
   16e6e:	687b      	ldr	r3, [r7, #4]
   16e70:	2b00      	cmp	r3, #0
   16e72:	d043      	beq.n	16efc <store_file_packet+0x170>
        UINT wsize = 0;
   16e74:	2300      	movs	r3, #0
   16e76:	60fb      	str	r3, [r7, #12]
        ret = f_write(&file_object, (const void *)data, length, &wsize);
   16e78:	2313      	movs	r3, #19
   16e7a:	18fc      	adds	r4, r7, r3
   16e7c:	230c      	movs	r3, #12
   16e7e:	18fb      	adds	r3, r7, r3
   16e80:	683a      	ldr	r2, [r7, #0]
   16e82:	6879      	ldr	r1, [r7, #4]
   16e84:	4827      	ldr	r0, [pc, #156]	; (16f24 <store_file_packet+0x198>)
   16e86:	4d2f      	ldr	r5, [pc, #188]	; (16f44 <store_file_packet+0x1b8>)
   16e88:	47a8      	blx	r5
   16e8a:	0003      	movs	r3, r0
   16e8c:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   16e8e:	2313      	movs	r3, #19
   16e90:	18fb      	adds	r3, r7, r3
   16e92:	781b      	ldrb	r3, [r3, #0]
   16e94:	2b00      	cmp	r3, #0
   16e96:	d00c      	beq.n	16eb2 <store_file_packet+0x126>
            f_close(&file_object);
   16e98:	4b22      	ldr	r3, [pc, #136]	; (16f24 <store_file_packet+0x198>)
   16e9a:	0018      	movs	r0, r3
   16e9c:	4b2a      	ldr	r3, [pc, #168]	; (16f48 <store_file_packet+0x1bc>)
   16e9e:	4798      	blx	r3
            add_state(CANCELED);
   16ea0:	2020      	movs	r0, #32
   16ea2:	4b25      	ldr	r3, [pc, #148]	; (16f38 <store_file_packet+0x1ac>)
   16ea4:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file write error, download canceled.\r\n");
   16ea6:	4b29      	ldr	r3, [pc, #164]	; (16f4c <store_file_packet+0x1c0>)
   16ea8:	0019      	movs	r1, r3
   16eaa:	2001      	movs	r0, #1
   16eac:	4b16      	ldr	r3, [pc, #88]	; (16f08 <store_file_packet+0x17c>)
   16eae:	4798      	blx	r3
            return;
   16eb0:	e024      	b.n	16efc <store_file_packet+0x170>
        }

        received_file_size += wsize;
   16eb2:	4b23      	ldr	r3, [pc, #140]	; (16f40 <store_file_packet+0x1b4>)
   16eb4:	681a      	ldr	r2, [r3, #0]
   16eb6:	68fb      	ldr	r3, [r7, #12]
   16eb8:	18d2      	adds	r2, r2, r3
   16eba:	4b21      	ldr	r3, [pc, #132]	; (16f40 <store_file_packet+0x1b4>)
   16ebc:	601a      	str	r2, [r3, #0]
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
   16ebe:	4b20      	ldr	r3, [pc, #128]	; (16f40 <store_file_packet+0x1b4>)
   16ec0:	681a      	ldr	r2, [r3, #0]
   16ec2:	4b23      	ldr	r3, [pc, #140]	; (16f50 <store_file_packet+0x1c4>)
   16ec4:	681b      	ldr	r3, [r3, #0]
   16ec6:	4923      	ldr	r1, [pc, #140]	; (16f54 <store_file_packet+0x1c8>)
   16ec8:	2001      	movs	r0, #1
   16eca:	4c0f      	ldr	r4, [pc, #60]	; (16f08 <store_file_packet+0x17c>)
   16ecc:	47a0      	blx	r4
        if (received_file_size >= http_file_size) {
   16ece:	4b1c      	ldr	r3, [pc, #112]	; (16f40 <store_file_packet+0x1b4>)
   16ed0:	681a      	ldr	r2, [r3, #0]
   16ed2:	4b1f      	ldr	r3, [pc, #124]	; (16f50 <store_file_packet+0x1c4>)
   16ed4:	681b      	ldr	r3, [r3, #0]
   16ed6:	429a      	cmp	r2, r3
   16ed8:	d310      	bcc.n	16efc <store_file_packet+0x170>
            f_close(&file_object);
   16eda:	4b12      	ldr	r3, [pc, #72]	; (16f24 <store_file_packet+0x198>)
   16edc:	0018      	movs	r0, r3
   16ede:	4b1a      	ldr	r3, [pc, #104]	; (16f48 <store_file_packet+0x1bc>)
   16ee0:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file downloaded successfully.\r\n");
   16ee2:	4b1d      	ldr	r3, [pc, #116]	; (16f58 <store_file_packet+0x1cc>)
   16ee4:	0019      	movs	r1, r3
   16ee6:	2001      	movs	r0, #1
   16ee8:	4b07      	ldr	r3, [pc, #28]	; (16f08 <store_file_packet+0x17c>)
   16eea:	4798      	blx	r3
            port_pin_set_output_level(LED_0_PIN, false);
   16eec:	2100      	movs	r1, #0
   16eee:	2017      	movs	r0, #23
   16ef0:	4b1a      	ldr	r3, [pc, #104]	; (16f5c <store_file_packet+0x1d0>)
   16ef2:	4798      	blx	r3
            add_state(COMPLETED);
   16ef4:	2010      	movs	r0, #16
   16ef6:	4b10      	ldr	r3, [pc, #64]	; (16f38 <store_file_packet+0x1ac>)
   16ef8:	4798      	blx	r3
            return;
   16efa:	46c0      	nop			; (mov r8, r8)
        }
    }
}
   16efc:	46bd      	mov	sp, r7
   16efe:	b006      	add	sp, #24
   16f00:	bdb0      	pop	{r4, r5, r7, pc}
   16f02:	46c0      	nop			; (mov r8, r8)
   16f04:	00037258 	.word	0x00037258
   16f08:	0001eb25 	.word	0x0001eb25
   16f0c:	000169a9 	.word	0x000169a9
   16f10:	200000a8 	.word	0x200000a8
   16f14:	00037257 	.word	0x00037257
   16f18:	00035abf 	.word	0x00035abf
   16f1c:	200000aa 	.word	0x200000aa
   16f20:	00035a73 	.word	0x00035a73
   16f24:	20000890 	.word	0x20000890
   16f28:	00016a2d 	.word	0x00016a2d
   16f2c:	000372bc 	.word	0x000372bc
   16f30:	0002e635 	.word	0x0002e635
   16f34:	0003727c 	.word	0x0003727c
   16f38:	00016981 	.word	0x00016981
   16f3c:	000372e4 	.word	0x000372e4
   16f40:	200008b8 	.word	0x200008b8
   16f44:	0002eb65 	.word	0x0002eb65
   16f48:	0002f035 	.word	0x0002f035
   16f4c:	00037318 	.word	0x00037318
   16f50:	200008b4 	.word	0x200008b4
   16f54:	00037354 	.word	0x00037354
   16f58:	00037388 	.word	0x00037388
   16f5c:	000168e5 	.word	0x000168e5

00016f60 <http_client_callback>:
 * \param[in]  module_inst     Module instance of HTTP client module.
 * \param[in]  type            Type of event.
 * \param[in]  data            Data structure of the event. \refer http_client_data
 */
static void http_client_callback(struct http_client_module *module_inst, int type, union http_client_data *data)
{
   16f60:	b590      	push	{r4, r7, lr}
   16f62:	b085      	sub	sp, #20
   16f64:	af00      	add	r7, sp, #0
   16f66:	60f8      	str	r0, [r7, #12]
   16f68:	60b9      	str	r1, [r7, #8]
   16f6a:	607a      	str	r2, [r7, #4]
    switch (type) {
   16f6c:	68bb      	ldr	r3, [r7, #8]
   16f6e:	2b04      	cmp	r3, #4
   16f70:	d900      	bls.n	16f74 <http_client_callback+0x14>
   16f72:	e077      	b.n	17064 <http_client_callback+0x104>
   16f74:	68bb      	ldr	r3, [r7, #8]
   16f76:	009a      	lsls	r2, r3, #2
   16f78:	4b3c      	ldr	r3, [pc, #240]	; (1706c <http_client_callback+0x10c>)
   16f7a:	18d3      	adds	r3, r2, r3
   16f7c:	681b      	ldr	r3, [r3, #0]
   16f7e:	469f      	mov	pc, r3
        case HTTP_CLIENT_CALLBACK_SOCK_CONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: HTTP client socket connected.\r\n");
   16f80:	4b3b      	ldr	r3, [pc, #236]	; (17070 <http_client_callback+0x110>)
   16f82:	0019      	movs	r1, r3
   16f84:	2001      	movs	r0, #1
   16f86:	4b3b      	ldr	r3, [pc, #236]	; (17074 <http_client_callback+0x114>)
   16f88:	4798      	blx	r3
            break;
   16f8a:	e06b      	b.n	17064 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_REQUESTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: request completed.\r\n");
   16f8c:	4b3a      	ldr	r3, [pc, #232]	; (17078 <http_client_callback+0x118>)
   16f8e:	0019      	movs	r1, r3
   16f90:	2001      	movs	r0, #1
   16f92:	4b38      	ldr	r3, [pc, #224]	; (17074 <http_client_callback+0x114>)
   16f94:	4798      	blx	r3
            add_state(GET_REQUESTED);
   16f96:	2004      	movs	r0, #4
   16f98:	4b38      	ldr	r3, [pc, #224]	; (1707c <http_client_callback+0x11c>)
   16f9a:	4798      	blx	r3
            break;
   16f9c:	e062      	b.n	17064 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_RECV_RESPONSE:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: received response %u data size %u\r\n", (unsigned int)data->recv_response.response_code, (unsigned int)data->recv_response.content_length);
   16f9e:	687b      	ldr	r3, [r7, #4]
   16fa0:	881b      	ldrh	r3, [r3, #0]
   16fa2:	001a      	movs	r2, r3
   16fa4:	687b      	ldr	r3, [r7, #4]
   16fa6:	685b      	ldr	r3, [r3, #4]
   16fa8:	4935      	ldr	r1, [pc, #212]	; (17080 <http_client_callback+0x120>)
   16faa:	2001      	movs	r0, #1
   16fac:	4c31      	ldr	r4, [pc, #196]	; (17074 <http_client_callback+0x114>)
   16fae:	47a0      	blx	r4
            if ((unsigned int)data->recv_response.response_code == 200) {
   16fb0:	687b      	ldr	r3, [r7, #4]
   16fb2:	881b      	ldrh	r3, [r3, #0]
   16fb4:	2bc8      	cmp	r3, #200	; 0xc8
   16fb6:	d10d      	bne.n	16fd4 <http_client_callback+0x74>
                http_file_size = data->recv_response.content_length;
   16fb8:	687b      	ldr	r3, [r7, #4]
   16fba:	685a      	ldr	r2, [r3, #4]
   16fbc:	4b31      	ldr	r3, [pc, #196]	; (17084 <http_client_callback+0x124>)
   16fbe:	601a      	str	r2, [r3, #0]
                received_file_size = 0;
   16fc0:	4b31      	ldr	r3, [pc, #196]	; (17088 <http_client_callback+0x128>)
   16fc2:	2200      	movs	r2, #0
   16fc4:	601a      	str	r2, [r3, #0]
            } else {
                add_state(CANCELED);
                return;
            }
            if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
   16fc6:	687b      	ldr	r3, [r7, #4]
   16fc8:	685a      	ldr	r2, [r3, #4]
   16fca:	2380      	movs	r3, #128	; 0x80
   16fcc:	009b      	lsls	r3, r3, #2
   16fce:	429a      	cmp	r2, r3
   16fd0:	d843      	bhi.n	1705a <http_client_callback+0xfa>
   16fd2:	e003      	b.n	16fdc <http_client_callback+0x7c>
                add_state(CANCELED);
   16fd4:	2020      	movs	r0, #32
   16fd6:	4b29      	ldr	r3, [pc, #164]	; (1707c <http_client_callback+0x11c>)
   16fd8:	4798      	blx	r3
                return;
   16fda:	e043      	b.n	17064 <http_client_callback+0x104>
                store_file_packet(data->recv_response.content, data->recv_response.content_length);
   16fdc:	687b      	ldr	r3, [r7, #4]
   16fde:	689a      	ldr	r2, [r3, #8]
   16fe0:	687b      	ldr	r3, [r7, #4]
   16fe2:	685b      	ldr	r3, [r3, #4]
   16fe4:	0019      	movs	r1, r3
   16fe6:	0010      	movs	r0, r2
   16fe8:	4b28      	ldr	r3, [pc, #160]	; (1708c <http_client_callback+0x12c>)
   16fea:	4798      	blx	r3
                add_state(COMPLETED);
   16fec:	2010      	movs	r0, #16
   16fee:	4b23      	ldr	r3, [pc, #140]	; (1707c <http_client_callback+0x11c>)
   16ff0:	4798      	blx	r3
            }
            break;
   16ff2:	e032      	b.n	1705a <http_client_callback+0xfa>

        case HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA:
            store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
   16ff4:	687b      	ldr	r3, [r7, #4]
   16ff6:	685a      	ldr	r2, [r3, #4]
   16ff8:	687b      	ldr	r3, [r7, #4]
   16ffa:	681b      	ldr	r3, [r3, #0]
   16ffc:	0019      	movs	r1, r3
   16ffe:	0010      	movs	r0, r2
   17000:	4b22      	ldr	r3, [pc, #136]	; (1708c <http_client_callback+0x12c>)
   17002:	4798      	blx	r3
            if (data->recv_chunked_data.is_complete) {
   17004:	687b      	ldr	r3, [r7, #4]
   17006:	7a1b      	ldrb	r3, [r3, #8]
   17008:	2b00      	cmp	r3, #0
   1700a:	d028      	beq.n	1705e <http_client_callback+0xfe>
                add_state(COMPLETED);
   1700c:	2010      	movs	r0, #16
   1700e:	4b1b      	ldr	r3, [pc, #108]	; (1707c <http_client_callback+0x11c>)
   17010:	4798      	blx	r3
            }

            break;
   17012:	e024      	b.n	1705e <http_client_callback+0xfe>

        case HTTP_CLIENT_CALLBACK_DISCONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
   17014:	687b      	ldr	r3, [r7, #4]
   17016:	681a      	ldr	r2, [r3, #0]
   17018:	4b1d      	ldr	r3, [pc, #116]	; (17090 <http_client_callback+0x130>)
   1701a:	0019      	movs	r1, r3
   1701c:	2001      	movs	r0, #1
   1701e:	4b15      	ldr	r3, [pc, #84]	; (17074 <http_client_callback+0x114>)
   17020:	4798      	blx	r3

            /* If disconnect reason is equal to -ECONNRESET(-104),
             * It means the server has closed the connection (timeout).
             * This is normal operation.
             */
            if (data->disconnected.reason == -EAGAIN) {
   17022:	687b      	ldr	r3, [r7, #4]
   17024:	681b      	ldr	r3, [r3, #0]
   17026:	330b      	adds	r3, #11
   17028:	d11b      	bne.n	17062 <http_client_callback+0x102>
                /* Server has not responded. Retry immediately. */
                if (is_state_set(DOWNLOADING)) {
   1702a:	2008      	movs	r0, #8
   1702c:	4b19      	ldr	r3, [pc, #100]	; (17094 <http_client_callback+0x134>)
   1702e:	4798      	blx	r3
   17030:	1e03      	subs	r3, r0, #0
   17032:	d006      	beq.n	17042 <http_client_callback+0xe2>
                    f_close(&file_object);
   17034:	4b18      	ldr	r3, [pc, #96]	; (17098 <http_client_callback+0x138>)
   17036:	0018      	movs	r0, r3
   17038:	4b18      	ldr	r3, [pc, #96]	; (1709c <http_client_callback+0x13c>)
   1703a:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   1703c:	2008      	movs	r0, #8
   1703e:	4b18      	ldr	r3, [pc, #96]	; (170a0 <http_client_callback+0x140>)
   17040:	4798      	blx	r3
                }

                if (is_state_set(GET_REQUESTED)) {
   17042:	2004      	movs	r0, #4
   17044:	4b13      	ldr	r3, [pc, #76]	; (17094 <http_client_callback+0x134>)
   17046:	4798      	blx	r3
   17048:	1e03      	subs	r3, r0, #0
   1704a:	d002      	beq.n	17052 <http_client_callback+0xf2>
                    clear_state(GET_REQUESTED);
   1704c:	2004      	movs	r0, #4
   1704e:	4b14      	ldr	r3, [pc, #80]	; (170a0 <http_client_callback+0x140>)
   17050:	4798      	blx	r3
                }

                start_download();
   17052:	4b14      	ldr	r3, [pc, #80]	; (170a4 <http_client_callback+0x144>)
   17054:	4798      	blx	r3
            }

            break;
   17056:	46c0      	nop			; (mov r8, r8)
   17058:	e003      	b.n	17062 <http_client_callback+0x102>
            break;
   1705a:	46c0      	nop			; (mov r8, r8)
   1705c:	e002      	b.n	17064 <http_client_callback+0x104>
            break;
   1705e:	46c0      	nop			; (mov r8, r8)
   17060:	e000      	b.n	17064 <http_client_callback+0x104>
            break;
   17062:	46c0      	nop			; (mov r8, r8)
    }
}
   17064:	46bd      	mov	sp, r7
   17066:	b005      	add	sp, #20
   17068:	bd90      	pop	{r4, r7, pc}
   1706a:	46c0      	nop			; (mov r8, r8)
   1706c:	00037ac4 	.word	0x00037ac4
   17070:	000373bc 	.word	0x000373bc
   17074:	0001eb25 	.word	0x0001eb25
   17078:	000373f4 	.word	0x000373f4
   1707c:	00016981 	.word	0x00016981
   17080:	00037420 	.word	0x00037420
   17084:	200008b4 	.word	0x200008b4
   17088:	200008b8 	.word	0x200008b8
   1708c:	00016d8d 	.word	0x00016d8d
   17090:	0003745c 	.word	0x0003745c
   17094:	000169a9 	.word	0x000169a9
   17098:	20000890 	.word	0x20000890
   1709c:	0002f035 	.word	0x0002f035
   170a0:	0001694d 	.word	0x0001694d
   170a4:	00016cd1 	.word	0x00016cd1

000170a8 <socket_cb>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   170a8:	b580      	push	{r7, lr}
   170aa:	b082      	sub	sp, #8
   170ac:	af00      	add	r7, sp, #0
   170ae:	603a      	str	r2, [r7, #0]
   170b0:	1dfb      	adds	r3, r7, #7
   170b2:	1c02      	adds	r2, r0, #0
   170b4:	701a      	strb	r2, [r3, #0]
   170b6:	1dbb      	adds	r3, r7, #6
   170b8:	1c0a      	adds	r2, r1, #0
   170ba:	701a      	strb	r2, [r3, #0]
    http_client_socket_event_handler(sock, u8Msg, pvMsg);
   170bc:	683a      	ldr	r2, [r7, #0]
   170be:	1dbb      	adds	r3, r7, #6
   170c0:	7819      	ldrb	r1, [r3, #0]
   170c2:	1dfb      	adds	r3, r7, #7
   170c4:	781b      	ldrb	r3, [r3, #0]
   170c6:	b25b      	sxtb	r3, r3
   170c8:	0018      	movs	r0, r3
   170ca:	4b03      	ldr	r3, [pc, #12]	; (170d8 <socket_cb+0x30>)
   170cc:	4798      	blx	r3
}
   170ce:	46c0      	nop			; (mov r8, r8)
   170d0:	46bd      	mov	sp, r7
   170d2:	b002      	add	sp, #8
   170d4:	bd80      	pop	{r7, pc}
   170d6:	46c0      	nop			; (mov r8, r8)
   170d8:	00031999 	.word	0x00031999

000170dc <resolve_cb>:
 * \brief Callback for the gethostbyname function (DNS Resolution callback).
 * \param[in] pu8DomainName Domain name of the host.
 * \param[in] u32ServerIP Server IPv4 address encoded in NW byte order format. If it is Zero, then the DNS resolution failed.
 */
static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
   170dc:	b5b0      	push	{r4, r5, r7, lr}
   170de:	b086      	sub	sp, #24
   170e0:	af04      	add	r7, sp, #16
   170e2:	6078      	str	r0, [r7, #4]
   170e4:	6039      	str	r1, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
               "resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n",
               pu8DomainName,
               (int)IPV4_BYTE(u32ServerIP, 0),
   170e6:	683b      	ldr	r3, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
   170e8:	22ff      	movs	r2, #255	; 0xff
   170ea:	4013      	ands	r3, r2
   170ec:	001c      	movs	r4, r3
               (int)IPV4_BYTE(u32ServerIP, 1),
   170ee:	683b      	ldr	r3, [r7, #0]
   170f0:	0a1b      	lsrs	r3, r3, #8
   170f2:	001a      	movs	r2, r3
    LogMessage(LOG_DEBUG_LVL,
   170f4:	23ff      	movs	r3, #255	; 0xff
   170f6:	4013      	ands	r3, r2
               (int)IPV4_BYTE(u32ServerIP, 2),
   170f8:	683a      	ldr	r2, [r7, #0]
   170fa:	0c12      	lsrs	r2, r2, #16
   170fc:	0011      	movs	r1, r2
    LogMessage(LOG_DEBUG_LVL,
   170fe:	22ff      	movs	r2, #255	; 0xff
   17100:	400a      	ands	r2, r1
               (int)IPV4_BYTE(u32ServerIP, 3));
   17102:	6839      	ldr	r1, [r7, #0]
   17104:	0e09      	lsrs	r1, r1, #24
    LogMessage(LOG_DEBUG_LVL,
   17106:	000d      	movs	r5, r1
   17108:	6878      	ldr	r0, [r7, #4]
   1710a:	4909      	ldr	r1, [pc, #36]	; (17130 <resolve_cb+0x54>)
   1710c:	9502      	str	r5, [sp, #8]
   1710e:	9201      	str	r2, [sp, #4]
   17110:	9300      	str	r3, [sp, #0]
   17112:	0023      	movs	r3, r4
   17114:	0002      	movs	r2, r0
   17116:	2001      	movs	r0, #1
   17118:	4c06      	ldr	r4, [pc, #24]	; (17134 <resolve_cb+0x58>)
   1711a:	47a0      	blx	r4
    http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
   1711c:	683a      	ldr	r2, [r7, #0]
   1711e:	687b      	ldr	r3, [r7, #4]
   17120:	0011      	movs	r1, r2
   17122:	0018      	movs	r0, r3
   17124:	4b04      	ldr	r3, [pc, #16]	; (17138 <resolve_cb+0x5c>)
   17126:	4798      	blx	r3
}
   17128:	46c0      	nop			; (mov r8, r8)
   1712a:	46bd      	mov	sp, r7
   1712c:	b002      	add	sp, #8
   1712e:	bdb0      	pop	{r4, r5, r7, pc}
   17130:	0003748c 	.word	0x0003748c
   17134:	0001eb25 	.word	0x0001eb25
   17138:	00031afd 	.word	0x00031afd

0001713c <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
   1713c:	b590      	push	{r4, r7, lr}
   1713e:	b087      	sub	sp, #28
   17140:	af02      	add	r7, sp, #8
   17142:	0002      	movs	r2, r0
   17144:	6039      	str	r1, [r7, #0]
   17146:	1dfb      	adds	r3, r7, #7
   17148:	701a      	strb	r2, [r3, #0]
    switch (u8MsgType) {
   1714a:	1dfb      	adds	r3, r7, #7
   1714c:	781b      	ldrb	r3, [r3, #0]
   1714e:	2b2c      	cmp	r3, #44	; 0x2c
   17150:	d002      	beq.n	17158 <wifi_cb+0x1c>
   17152:	2b32      	cmp	r3, #50	; 0x32
   17154:	d03d      	beq.n	171d2 <wifi_cb+0x96>
                }
            }
        } break;

        default:
            break;
   17156:	e06f      	b.n	17238 <wifi_cb+0xfc>
            tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
   17158:	683b      	ldr	r3, [r7, #0]
   1715a:	60fb      	str	r3, [r7, #12]
            if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   1715c:	68fb      	ldr	r3, [r7, #12]
   1715e:	781b      	ldrb	r3, [r3, #0]
   17160:	2b01      	cmp	r3, #1
   17162:	d107      	bne.n	17174 <wifi_cb+0x38>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_CONNECTED\r\n");
   17164:	4b36      	ldr	r3, [pc, #216]	; (17240 <wifi_cb+0x104>)
   17166:	0019      	movs	r1, r3
   17168:	2001      	movs	r0, #1
   1716a:	4b36      	ldr	r3, [pc, #216]	; (17244 <wifi_cb+0x108>)
   1716c:	4798      	blx	r3
                m2m_wifi_request_dhcp_client();
   1716e:	4b36      	ldr	r3, [pc, #216]	; (17248 <wifi_cb+0x10c>)
   17170:	4798      	blx	r3
            break;
   17172:	e05e      	b.n	17232 <wifi_cb+0xf6>
            } else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   17174:	68fb      	ldr	r3, [r7, #12]
   17176:	781b      	ldrb	r3, [r3, #0]
   17178:	2b00      	cmp	r3, #0
   1717a:	d15a      	bne.n	17232 <wifi_cb+0xf6>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
   1717c:	4b33      	ldr	r3, [pc, #204]	; (1724c <wifi_cb+0x110>)
   1717e:	0019      	movs	r1, r3
   17180:	2001      	movs	r0, #1
   17182:	4b30      	ldr	r3, [pc, #192]	; (17244 <wifi_cb+0x108>)
   17184:	4798      	blx	r3
                clear_state(WIFI_CONNECTED);
   17186:	2002      	movs	r0, #2
   17188:	4b31      	ldr	r3, [pc, #196]	; (17250 <wifi_cb+0x114>)
   1718a:	4798      	blx	r3
                if (is_state_set(DOWNLOADING)) {
   1718c:	2008      	movs	r0, #8
   1718e:	4b31      	ldr	r3, [pc, #196]	; (17254 <wifi_cb+0x118>)
   17190:	4798      	blx	r3
   17192:	1e03      	subs	r3, r0, #0
   17194:	d006      	beq.n	171a4 <wifi_cb+0x68>
                    f_close(&file_object);
   17196:	4b30      	ldr	r3, [pc, #192]	; (17258 <wifi_cb+0x11c>)
   17198:	0018      	movs	r0, r3
   1719a:	4b30      	ldr	r3, [pc, #192]	; (1725c <wifi_cb+0x120>)
   1719c:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   1719e:	2008      	movs	r0, #8
   171a0:	4b2b      	ldr	r3, [pc, #172]	; (17250 <wifi_cb+0x114>)
   171a2:	4798      	blx	r3
                if (is_state_set(GET_REQUESTED)) {
   171a4:	2004      	movs	r0, #4
   171a6:	4b2b      	ldr	r3, [pc, #172]	; (17254 <wifi_cb+0x118>)
   171a8:	4798      	blx	r3
   171aa:	1e03      	subs	r3, r0, #0
   171ac:	d002      	beq.n	171b4 <wifi_cb+0x78>
                    clear_state(GET_REQUESTED);
   171ae:	2004      	movs	r0, #4
   171b0:	4b27      	ldr	r3, [pc, #156]	; (17250 <wifi_cb+0x114>)
   171b2:	4798      	blx	r3
                mqtt_disconnect(&mqtt_inst, 1);
   171b4:	4b2a      	ldr	r3, [pc, #168]	; (17260 <wifi_cb+0x124>)
   171b6:	2101      	movs	r1, #1
   171b8:	0018      	movs	r0, r3
   171ba:	4b2a      	ldr	r3, [pc, #168]	; (17264 <wifi_cb+0x128>)
   171bc:	4798      	blx	r3
                m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   171be:	4a2a      	ldr	r2, [pc, #168]	; (17268 <wifi_cb+0x12c>)
   171c0:	482a      	ldr	r0, [pc, #168]	; (1726c <wifi_cb+0x130>)
   171c2:	23ff      	movs	r3, #255	; 0xff
   171c4:	9300      	str	r3, [sp, #0]
   171c6:	0013      	movs	r3, r2
   171c8:	2201      	movs	r2, #1
   171ca:	210a      	movs	r1, #10
   171cc:	4c28      	ldr	r4, [pc, #160]	; (17270 <wifi_cb+0x134>)
   171ce:	47a0      	blx	r4
            break;
   171d0:	e02f      	b.n	17232 <wifi_cb+0xf6>
            uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
   171d2:	683b      	ldr	r3, [r7, #0]
   171d4:	60bb      	str	r3, [r7, #8]
            LogMessage(LOG_DEBUG_LVL, "wifi_cb: IP address is %u.%u.%u.%u\r\n", pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   171d6:	68bb      	ldr	r3, [r7, #8]
   171d8:	781b      	ldrb	r3, [r3, #0]
   171da:	0018      	movs	r0, r3
   171dc:	68bb      	ldr	r3, [r7, #8]
   171de:	3301      	adds	r3, #1
   171e0:	781b      	ldrb	r3, [r3, #0]
   171e2:	001c      	movs	r4, r3
   171e4:	68bb      	ldr	r3, [r7, #8]
   171e6:	3302      	adds	r3, #2
   171e8:	781b      	ldrb	r3, [r3, #0]
   171ea:	001a      	movs	r2, r3
   171ec:	68bb      	ldr	r3, [r7, #8]
   171ee:	3303      	adds	r3, #3
   171f0:	781b      	ldrb	r3, [r3, #0]
   171f2:	4920      	ldr	r1, [pc, #128]	; (17274 <wifi_cb+0x138>)
   171f4:	9301      	str	r3, [sp, #4]
   171f6:	9200      	str	r2, [sp, #0]
   171f8:	0023      	movs	r3, r4
   171fa:	0002      	movs	r2, r0
   171fc:	2001      	movs	r0, #1
   171fe:	4c11      	ldr	r4, [pc, #68]	; (17244 <wifi_cb+0x108>)
   17200:	47a0      	blx	r4
            add_state(WIFI_CONNECTED);
   17202:	2002      	movs	r0, #2
   17204:	4b1c      	ldr	r3, [pc, #112]	; (17278 <wifi_cb+0x13c>)
   17206:	4798      	blx	r3
            if (do_download_flag == 1) {
   17208:	4b1c      	ldr	r3, [pc, #112]	; (1727c <wifi_cb+0x140>)
   1720a:	781b      	ldrb	r3, [r3, #0]
   1720c:	2b01      	cmp	r3, #1
   1720e:	d102      	bne.n	17216 <wifi_cb+0xda>
                start_download();
   17210:	4b1b      	ldr	r3, [pc, #108]	; (17280 <wifi_cb+0x144>)
   17212:	4798      	blx	r3
        } break;
   17214:	e00f      	b.n	17236 <wifi_cb+0xfa>
                if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   17216:	4a1b      	ldr	r2, [pc, #108]	; (17284 <wifi_cb+0x148>)
   17218:	4b11      	ldr	r3, [pc, #68]	; (17260 <wifi_cb+0x124>)
   1721a:	0011      	movs	r1, r2
   1721c:	0018      	movs	r0, r3
   1721e:	4b1a      	ldr	r3, [pc, #104]	; (17288 <wifi_cb+0x14c>)
   17220:	4798      	blx	r3
   17222:	1e03      	subs	r3, r0, #0
   17224:	d007      	beq.n	17236 <wifi_cb+0xfa>
                    LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   17226:	4b19      	ldr	r3, [pc, #100]	; (1728c <wifi_cb+0x150>)
   17228:	0019      	movs	r1, r3
   1722a:	2001      	movs	r0, #1
   1722c:	4b05      	ldr	r3, [pc, #20]	; (17244 <wifi_cb+0x108>)
   1722e:	4798      	blx	r3
        } break;
   17230:	e001      	b.n	17236 <wifi_cb+0xfa>
            break;
   17232:	46c0      	nop			; (mov r8, r8)
   17234:	e000      	b.n	17238 <wifi_cb+0xfc>
        } break;
   17236:	46c0      	nop			; (mov r8, r8)
    }
}
   17238:	46c0      	nop			; (mov r8, r8)
   1723a:	46bd      	mov	sp, r7
   1723c:	b005      	add	sp, #20
   1723e:	bd90      	pop	{r4, r7, pc}
   17240:	000374bc 	.word	0x000374bc
   17244:	0001eb25 	.word	0x0001eb25
   17248:	00023169 	.word	0x00023169
   1724c:	000374dc 	.word	0x000374dc
   17250:	0001694d 	.word	0x0001694d
   17254:	000169a9 	.word	0x000169a9
   17258:	20000890 	.word	0x20000890
   1725c:	0002f035 	.word	0x0002f035
   17260:	200008bc 	.word	0x200008bc
   17264:	00030645 	.word	0x00030645
   17268:	00037500 	.word	0x00037500
   1726c:	0003750c 	.word	0x0003750c
   17270:	00022c95 	.word	0x00022c95
   17274:	00037518 	.word	0x00037518
   17278:	00016981 	.word	0x00016981
   1727c:	2000065c 	.word	0x2000065c
   17280:	00016cd1 	.word	0x00016cd1
   17284:	00037140 	.word	0x00037140
   17288:	00030511 	.word	0x00030511
   1728c:	00037540 	.word	0x00037540

00017290 <init_storage>:

/**
 * \brief Initialize SD/MMC storage.
 */
void init_storage(void)
{
   17290:	b590      	push	{r4, r7, lr}
   17292:	b083      	sub	sp, #12
   17294:	af00      	add	r7, sp, #0
    FRESULT res;
    Ctrl_status status;

    /* Initialize SD/MMC stack. */
    sd_mmc_init();
   17296:	4b29      	ldr	r3, [pc, #164]	; (1733c <init_storage+0xac>)
   17298:	4798      	blx	r3
    while (true) {
        LogMessage(LOG_DEBUG_LVL, "init_storage: please plug an SD/MMC card in slot...\r\n");
   1729a:	4b29      	ldr	r3, [pc, #164]	; (17340 <init_storage+0xb0>)
   1729c:	0019      	movs	r1, r3
   1729e:	2001      	movs	r0, #1
   172a0:	4b28      	ldr	r3, [pc, #160]	; (17344 <init_storage+0xb4>)
   172a2:	4798      	blx	r3

        /* Wait card present and ready. */
        do {
            status = sd_mmc_test_unit_ready(0);
   172a4:	1dfc      	adds	r4, r7, #7
   172a6:	2000      	movs	r0, #0
   172a8:	4b27      	ldr	r3, [pc, #156]	; (17348 <init_storage+0xb8>)
   172aa:	4798      	blx	r3
   172ac:	0003      	movs	r3, r0
   172ae:	7023      	strb	r3, [r4, #0]
            if (CTRL_FAIL == status) {
   172b0:	1dfb      	adds	r3, r7, #7
   172b2:	781b      	ldrb	r3, [r3, #0]
   172b4:	2b01      	cmp	r3, #1
   172b6:	d110      	bne.n	172da <init_storage+0x4a>
                LogMessage(LOG_DEBUG_LVL, "init_storage: SD Card install failed.\r\n");
   172b8:	4b24      	ldr	r3, [pc, #144]	; (1734c <init_storage+0xbc>)
   172ba:	0019      	movs	r1, r3
   172bc:	2001      	movs	r0, #1
   172be:	4b21      	ldr	r3, [pc, #132]	; (17344 <init_storage+0xb4>)
   172c0:	4798      	blx	r3
                LogMessage(LOG_DEBUG_LVL, "init_storage: try unplug and re-plug the card.\r\n");
   172c2:	4b23      	ldr	r3, [pc, #140]	; (17350 <init_storage+0xc0>)
   172c4:	0019      	movs	r1, r3
   172c6:	2001      	movs	r0, #1
   172c8:	4b1e      	ldr	r3, [pc, #120]	; (17344 <init_storage+0xb4>)
   172ca:	4798      	blx	r3
                while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
   172cc:	46c0      	nop			; (mov r8, r8)
   172ce:	2000      	movs	r0, #0
   172d0:	4b20      	ldr	r3, [pc, #128]	; (17354 <init_storage+0xc4>)
   172d2:	4798      	blx	r3
   172d4:	0003      	movs	r3, r0
   172d6:	2b02      	cmp	r3, #2
   172d8:	d1f9      	bne.n	172ce <init_storage+0x3e>
                }
            }
        } while (CTRL_GOOD != status);
   172da:	1dfb      	adds	r3, r7, #7
   172dc:	781b      	ldrb	r3, [r3, #0]
   172de:	2b00      	cmp	r3, #0
   172e0:	d1e0      	bne.n	172a4 <init_storage+0x14>

        LogMessage(LOG_DEBUG_LVL, "init_storage: mounting SD card...\r\n");
   172e2:	4b1d      	ldr	r3, [pc, #116]	; (17358 <init_storage+0xc8>)
   172e4:	0019      	movs	r1, r3
   172e6:	2001      	movs	r0, #1
   172e8:	4b16      	ldr	r3, [pc, #88]	; (17344 <init_storage+0xb4>)
   172ea:	4798      	blx	r3
        memset(&fatfs, 0, sizeof(FATFS));
   172ec:	238c      	movs	r3, #140	; 0x8c
   172ee:	009a      	lsls	r2, r3, #2
   172f0:	4b1a      	ldr	r3, [pc, #104]	; (1735c <init_storage+0xcc>)
   172f2:	2100      	movs	r1, #0
   172f4:	0018      	movs	r0, r3
   172f6:	4b1a      	ldr	r3, [pc, #104]	; (17360 <init_storage+0xd0>)
   172f8:	4798      	blx	r3
        res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
   172fa:	1dbc      	adds	r4, r7, #6
   172fc:	4b17      	ldr	r3, [pc, #92]	; (1735c <init_storage+0xcc>)
   172fe:	0019      	movs	r1, r3
   17300:	2000      	movs	r0, #0
   17302:	4b18      	ldr	r3, [pc, #96]	; (17364 <init_storage+0xd4>)
   17304:	4798      	blx	r3
   17306:	0003      	movs	r3, r0
   17308:	7023      	strb	r3, [r4, #0]
        if (FR_INVALID_DRIVE == res) {
   1730a:	1dbb      	adds	r3, r7, #6
   1730c:	781b      	ldrb	r3, [r3, #0]
   1730e:	2b0b      	cmp	r3, #11
   17310:	d107      	bne.n	17322 <init_storage+0x92>
            LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount failed! (res %d)\r\n", res);
   17312:	1dbb      	adds	r3, r7, #6
   17314:	781a      	ldrb	r2, [r3, #0]
   17316:	4b14      	ldr	r3, [pc, #80]	; (17368 <init_storage+0xd8>)
   17318:	0019      	movs	r1, r3
   1731a:	2001      	movs	r0, #1
   1731c:	4b09      	ldr	r3, [pc, #36]	; (17344 <init_storage+0xb4>)
   1731e:	4798      	blx	r3
            return;
   17320:	e008      	b.n	17334 <init_storage+0xa4>
        }

        LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount OK.\r\n");
   17322:	4b12      	ldr	r3, [pc, #72]	; (1736c <init_storage+0xdc>)
   17324:	0019      	movs	r1, r3
   17326:	2001      	movs	r0, #1
   17328:	4b06      	ldr	r3, [pc, #24]	; (17344 <init_storage+0xb4>)
   1732a:	4798      	blx	r3
        add_state(STORAGE_READY);
   1732c:	2001      	movs	r0, #1
   1732e:	4b10      	ldr	r3, [pc, #64]	; (17370 <init_storage+0xe0>)
   17330:	4798      	blx	r3
        return;
   17332:	46c0      	nop			; (mov r8, r8)
    }
}
   17334:	46bd      	mov	sp, r7
   17336:	b003      	add	sp, #12
   17338:	bd90      	pop	{r4, r7, pc}
   1733a:	46c0      	nop			; (mov r8, r8)
   1733c:	0001f93d 	.word	0x0001f93d
   17340:	00037564 	.word	0x00037564
   17344:	0001eb25 	.word	0x0001eb25
   17348:	0001fe19 	.word	0x0001fe19
   1734c:	0003759c 	.word	0x0003759c
   17350:	000375c4 	.word	0x000375c4
   17354:	0001f98d 	.word	0x0001f98d
   17358:	000375f8 	.word	0x000375f8
   1735c:	20000660 	.word	0x20000660
   17360:	00035707 	.word	0x00035707
   17364:	0002e5dd 	.word	0x0002e5dd
   17368:	0003761c 	.word	0x0003761c
   1736c:	0003764c 	.word	0x0003764c
   17370:	00016981 	.word	0x00016981

00017374 <configure_timer>:

/**
 * \brief Configure Timer module.
 */
static void configure_timer(void)
{
   17374:	b580      	push	{r7, lr}
   17376:	b082      	sub	sp, #8
   17378:	af00      	add	r7, sp, #0
    struct sw_timer_config swt_conf;
    sw_timer_get_config_defaults(&swt_conf);
   1737a:	1d3b      	adds	r3, r7, #4
   1737c:	0018      	movs	r0, r3
   1737e:	4b08      	ldr	r3, [pc, #32]	; (173a0 <configure_timer+0x2c>)
   17380:	4798      	blx	r3

    sw_timer_init(&swt_module_inst, &swt_conf);
   17382:	1d3a      	adds	r2, r7, #4
   17384:	4b07      	ldr	r3, [pc, #28]	; (173a4 <configure_timer+0x30>)
   17386:	0011      	movs	r1, r2
   17388:	0018      	movs	r0, r3
   1738a:	4b07      	ldr	r3, [pc, #28]	; (173a8 <configure_timer+0x34>)
   1738c:	4798      	blx	r3
    sw_timer_enable(&swt_module_inst);
   1738e:	4b05      	ldr	r3, [pc, #20]	; (173a4 <configure_timer+0x30>)
   17390:	0018      	movs	r0, r3
   17392:	4b06      	ldr	r3, [pc, #24]	; (173ac <configure_timer+0x38>)
   17394:	4798      	blx	r3
}
   17396:	46c0      	nop			; (mov r8, r8)
   17398:	46bd      	mov	sp, r7
   1739a:	b002      	add	sp, #8
   1739c:	bd80      	pop	{r7, pc}
   1739e:	46c0      	nop			; (mov r8, r8)
   173a0:	0003312d 	.word	0x0003312d
   173a4:	200044f0 	.word	0x200044f0
   173a8:	00033151 	.word	0x00033151
   173ac:	0003323d 	.word	0x0003323d

000173b0 <configure_http_client>:

/**
 * \brief Configure HTTP client module.
 */
static void configure_http_client(void)
{
   173b0:	b580      	push	{r7, lr}
   173b2:	b088      	sub	sp, #32
   173b4:	af00      	add	r7, sp, #0
    struct http_client_config httpc_conf;
    int ret;

    http_client_get_config_defaults(&httpc_conf);
   173b6:	003b      	movs	r3, r7
   173b8:	0018      	movs	r0, r3
   173ba:	4b12      	ldr	r3, [pc, #72]	; (17404 <configure_http_client+0x54>)
   173bc:	4798      	blx	r3

    httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   173be:	003b      	movs	r3, r7
   173c0:	2280      	movs	r2, #128	; 0x80
   173c2:	0092      	lsls	r2, r2, #2
   173c4:	611a      	str	r2, [r3, #16]
    httpc_conf.timer_inst = &swt_module_inst;
   173c6:	003b      	movs	r3, r7
   173c8:	4a0f      	ldr	r2, [pc, #60]	; (17408 <configure_http_client+0x58>)
   173ca:	605a      	str	r2, [r3, #4]
    //httpc_conf.port = 443;
    //httpc_conf.tls = 1;

    ret = http_client_init(&http_client_module_inst, &httpc_conf);
   173cc:	003a      	movs	r2, r7
   173ce:	4b0f      	ldr	r3, [pc, #60]	; (1740c <configure_http_client+0x5c>)
   173d0:	0011      	movs	r1, r2
   173d2:	0018      	movs	r0, r3
   173d4:	4b0e      	ldr	r3, [pc, #56]	; (17410 <configure_http_client+0x60>)
   173d6:	4798      	blx	r3
   173d8:	0003      	movs	r3, r0
   173da:	61fb      	str	r3, [r7, #28]
    if (ret < 0) {
   173dc:	69fb      	ldr	r3, [r7, #28]
   173de:	2b00      	cmp	r3, #0
   173e0:	da06      	bge.n	173f0 <configure_http_client+0x40>
        LogMessage(LOG_DEBUG_LVL, "configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   173e2:	69fa      	ldr	r2, [r7, #28]
   173e4:	4b0b      	ldr	r3, [pc, #44]	; (17414 <configure_http_client+0x64>)
   173e6:	0019      	movs	r1, r3
   173e8:	2001      	movs	r0, #1
   173ea:	4b0b      	ldr	r3, [pc, #44]	; (17418 <configure_http_client+0x68>)
   173ec:	4798      	blx	r3
        while (1) {
   173ee:	e7fe      	b.n	173ee <configure_http_client+0x3e>
        } /* Loop forever. */
    }

    http_client_register_callback(&http_client_module_inst, http_client_callback);
   173f0:	4a0a      	ldr	r2, [pc, #40]	; (1741c <configure_http_client+0x6c>)
   173f2:	4b06      	ldr	r3, [pc, #24]	; (1740c <configure_http_client+0x5c>)
   173f4:	0011      	movs	r1, r2
   173f6:	0018      	movs	r0, r3
   173f8:	4b09      	ldr	r3, [pc, #36]	; (17420 <configure_http_client+0x70>)
   173fa:	4798      	blx	r3
}
   173fc:	46c0      	nop			; (mov r8, r8)
   173fe:	46bd      	mov	sp, r7
   17400:	b008      	add	sp, #32
   17402:	bd80      	pop	{r7, pc}
   17404:	000317c1 	.word	0x000317c1
   17408:	200044f0 	.word	0x200044f0
   1740c:	20004548 	.word	0x20004548
   17410:	0003180d 	.word	0x0003180d
   17414:	00037670 	.word	0x00037670
   17418:	0001eb25 	.word	0x0001eb25
   1741c:	00016f61 	.word	0x00016f61
   17420:	000318f9 	.word	0x000318f9

00017424 <socket_event_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   17424:	b580      	push	{r7, lr}
   17426:	b082      	sub	sp, #8
   17428:	af00      	add	r7, sp, #0
   1742a:	603a      	str	r2, [r7, #0]
   1742c:	1dfb      	adds	r3, r7, #7
   1742e:	1c02      	adds	r2, r0, #0
   17430:	701a      	strb	r2, [r3, #0]
   17432:	1dbb      	adds	r3, r7, #6
   17434:	1c0a      	adds	r2, r1, #0
   17436:	701a      	strb	r2, [r3, #0]
    mqtt_socket_event_handler(sock, msg_type, msg_data);
   17438:	683a      	ldr	r2, [r7, #0]
   1743a:	1dbb      	adds	r3, r7, #6
   1743c:	7819      	ldrb	r1, [r3, #0]
   1743e:	1dfb      	adds	r3, r7, #7
   17440:	781b      	ldrb	r3, [r3, #0]
   17442:	b25b      	sxtb	r3, r3
   17444:	0018      	movs	r0, r3
   17446:	4b03      	ldr	r3, [pc, #12]	; (17454 <socket_event_handler+0x30>)
   17448:	4798      	blx	r3
}
   1744a:	46c0      	nop			; (mov r8, r8)
   1744c:	46bd      	mov	sp, r7
   1744e:	b002      	add	sp, #8
   17450:	bd80      	pop	{r7, pc}
   17452:	46c0      	nop			; (mov r8, r8)
   17454:	000304b9 	.word	0x000304b9

00017458 <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   17458:	b580      	push	{r7, lr}
   1745a:	b082      	sub	sp, #8
   1745c:	af00      	add	r7, sp, #0
   1745e:	6078      	str	r0, [r7, #4]
   17460:	6039      	str	r1, [r7, #0]
    mqtt_socket_resolve_handler(doamin_name, server_ip);
   17462:	683a      	ldr	r2, [r7, #0]
   17464:	687b      	ldr	r3, [r7, #4]
   17466:	0011      	movs	r1, r2
   17468:	0018      	movs	r0, r3
   1746a:	4b03      	ldr	r3, [pc, #12]	; (17478 <socket_resolve_handler+0x20>)
   1746c:	4798      	blx	r3
}
   1746e:	46c0      	nop			; (mov r8, r8)
   17470:	46bd      	mov	sp, r7
   17472:	b002      	add	sp, #8
   17474:	bd80      	pop	{r7, pc}
   17476:	46c0      	nop			; (mov r8, r8)
   17478:	000304ed 	.word	0x000304ed

0001747c <SubscribeHandlerLedTopic>:
 *
 * \param[in] msgData Data to be received.
 */

void SubscribeHandlerLedTopic(MessageData *msgData)
{
   1747c:	b590      	push	{r4, r7, lr}
   1747e:	b089      	sub	sp, #36	; 0x24
   17480:	af02      	add	r7, sp, #8
   17482:	6078      	str	r0, [r7, #4]
    uint8_t rgb[3] = {0, 0, 0};
   17484:	2310      	movs	r3, #16
   17486:	18fb      	adds	r3, r7, r3
   17488:	2200      	movs	r2, #0
   1748a:	701a      	strb	r2, [r3, #0]
   1748c:	2310      	movs	r3, #16
   1748e:	18fb      	adds	r3, r7, r3
   17490:	2200      	movs	r2, #0
   17492:	705a      	strb	r2, [r3, #1]
   17494:	2310      	movs	r3, #16
   17496:	18fb      	adds	r3, r7, r3
   17498:	2200      	movs	r2, #0
   1749a:	709a      	strb	r2, [r3, #2]
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   1749c:	687b      	ldr	r3, [r7, #4]
   1749e:	685b      	ldr	r3, [r3, #4]
   174a0:	685a      	ldr	r2, [r3, #4]
   174a2:	687b      	ldr	r3, [r7, #4]
   174a4:	685b      	ldr	r3, [r3, #4]
   174a6:	689b      	ldr	r3, [r3, #8]
   174a8:	492a      	ldr	r1, [pc, #168]	; (17554 <SubscribeHandlerLedTopic+0xd8>)
   174aa:	2001      	movs	r0, #1
   174ac:	4c2a      	ldr	r4, [pc, #168]	; (17558 <SubscribeHandlerLedTopic+0xdc>)
   174ae:	47a0      	blx	r4
    // Will receive something of the style "rgb(222, 224, 189)"
    if (strncmp(msgData->message->payload, "rgb(", 4) == 0) {
   174b0:	687b      	ldr	r3, [r7, #4]
   174b2:	681b      	ldr	r3, [r3, #0]
   174b4:	689b      	ldr	r3, [r3, #8]
   174b6:	4929      	ldr	r1, [pc, #164]	; (1755c <SubscribeHandlerLedTopic+0xe0>)
   174b8:	2204      	movs	r2, #4
   174ba:	0018      	movs	r0, r3
   174bc:	4b28      	ldr	r3, [pc, #160]	; (17560 <SubscribeHandlerLedTopic+0xe4>)
   174be:	4798      	blx	r3
   174c0:	1e03      	subs	r3, r0, #0
   174c2:	d143      	bne.n	1754c <SubscribeHandlerLedTopic+0xd0>
        char *p = (char *)&msgData->message->payload[4];
   174c4:	687b      	ldr	r3, [r7, #4]
   174c6:	681b      	ldr	r3, [r3, #0]
   174c8:	689b      	ldr	r3, [r3, #8]
   174ca:	3304      	adds	r3, #4
   174cc:	60fb      	str	r3, [r7, #12]
        int nb = 0;
   174ce:	2300      	movs	r3, #0
   174d0:	617b      	str	r3, [r7, #20]
        while (nb <= 2 && *p) {
   174d2:	e015      	b.n	17500 <SubscribeHandlerLedTopic+0x84>
            rgb[nb++] = strtol(p, &p, 10);
   174d4:	697c      	ldr	r4, [r7, #20]
   174d6:	1c63      	adds	r3, r4, #1
   174d8:	617b      	str	r3, [r7, #20]
   174da:	68fb      	ldr	r3, [r7, #12]
   174dc:	220c      	movs	r2, #12
   174de:	18b9      	adds	r1, r7, r2
   174e0:	220a      	movs	r2, #10
   174e2:	0018      	movs	r0, r3
   174e4:	4b1f      	ldr	r3, [pc, #124]	; (17564 <SubscribeHandlerLedTopic+0xe8>)
   174e6:	4798      	blx	r3
   174e8:	0003      	movs	r3, r0
   174ea:	b2da      	uxtb	r2, r3
   174ec:	2310      	movs	r3, #16
   174ee:	18fb      	adds	r3, r7, r3
   174f0:	551a      	strb	r2, [r3, r4]
            if (*p != ',') break;
   174f2:	68fb      	ldr	r3, [r7, #12]
   174f4:	781b      	ldrb	r3, [r3, #0]
   174f6:	2b2c      	cmp	r3, #44	; 0x2c
   174f8:	d10a      	bne.n	17510 <SubscribeHandlerLedTopic+0x94>
            p++; /* skip, */
   174fa:	68fb      	ldr	r3, [r7, #12]
   174fc:	3301      	adds	r3, #1
   174fe:	60fb      	str	r3, [r7, #12]
        while (nb <= 2 && *p) {
   17500:	697b      	ldr	r3, [r7, #20]
   17502:	2b02      	cmp	r3, #2
   17504:	dc05      	bgt.n	17512 <SubscribeHandlerLedTopic+0x96>
   17506:	68fb      	ldr	r3, [r7, #12]
   17508:	781b      	ldrb	r3, [r3, #0]
   1750a:	2b00      	cmp	r3, #0
   1750c:	d1e2      	bne.n	174d4 <SubscribeHandlerLedTopic+0x58>
   1750e:	e000      	b.n	17512 <SubscribeHandlerLedTopic+0x96>
            if (*p != ',') break;
   17510:	46c0      	nop			; (mov r8, r8)
        }
        LogMessage(LOG_DEBUG_LVL, "\r\nRGB %d %d %d\r\n", rgb[0], rgb[1], rgb[2]);
   17512:	2310      	movs	r3, #16
   17514:	18fb      	adds	r3, r7, r3
   17516:	781b      	ldrb	r3, [r3, #0]
   17518:	001a      	movs	r2, r3
   1751a:	2310      	movs	r3, #16
   1751c:	18fb      	adds	r3, r7, r3
   1751e:	785b      	ldrb	r3, [r3, #1]
   17520:	0018      	movs	r0, r3
   17522:	2310      	movs	r3, #16
   17524:	18fb      	adds	r3, r7, r3
   17526:	789b      	ldrb	r3, [r3, #2]
   17528:	490f      	ldr	r1, [pc, #60]	; (17568 <SubscribeHandlerLedTopic+0xec>)
   1752a:	9300      	str	r3, [sp, #0]
   1752c:	0003      	movs	r3, r0
   1752e:	2001      	movs	r0, #1
   17530:	4c09      	ldr	r4, [pc, #36]	; (17558 <SubscribeHandlerLedTopic+0xdc>)
   17532:	47a0      	blx	r4
        UIChangeColors(rgb[0], rgb[1], rgb[2]);
   17534:	2310      	movs	r3, #16
   17536:	18fb      	adds	r3, r7, r3
   17538:	7818      	ldrb	r0, [r3, #0]
   1753a:	2310      	movs	r3, #16
   1753c:	18fb      	adds	r3, r7, r3
   1753e:	7859      	ldrb	r1, [r3, #1]
   17540:	2310      	movs	r3, #16
   17542:	18fb      	adds	r3, r7, r3
   17544:	789b      	ldrb	r3, [r3, #2]
   17546:	001a      	movs	r2, r3
   17548:	4b08      	ldr	r3, [pc, #32]	; (1756c <SubscribeHandlerLedTopic+0xf0>)
   1754a:	4798      	blx	r3
    }
}
   1754c:	46c0      	nop			; (mov r8, r8)
   1754e:	46bd      	mov	sp, r7
   17550:	b007      	add	sp, #28
   17552:	bd90      	pop	{r4, r7, pc}
   17554:	000376b8 	.word	0x000376b8
   17558:	0001eb25 	.word	0x0001eb25
   1755c:	000376c0 	.word	0x000376c0
   17560:	00035acd 	.word	0x00035acd
   17564:	00035c79 	.word	0x00035c79
   17568:	000376c8 	.word	0x000376c8
   1756c:	000167e5 	.word	0x000167e5

00017570 <SubscribeHandlerGameTopic>:

void SubscribeHandlerGameTopic(MessageData *msgData)
{
   17570:	b590      	push	{r4, r7, lr}
   17572:	b08b      	sub	sp, #44	; 0x2c
   17574:	af00      	add	r7, sp, #0
   17576:	6078      	str	r0, [r7, #4]
    struct GameDataPacket game;
    memset(game.game, 0xff, sizeof(game.game));
   17578:	230c      	movs	r3, #12
   1757a:	18fb      	adds	r3, r7, r3
   1757c:	2214      	movs	r2, #20
   1757e:	21ff      	movs	r1, #255	; 0xff
   17580:	0018      	movs	r0, r3
   17582:	4b48      	ldr	r3, [pc, #288]	; (176a4 <SubscribeHandlerGameTopic+0x134>)
   17584:	4798      	blx	r3

    // Parse input. The start string must be '{"game":['
    if (strncmp(msgData->message->payload, "{\"game\":[", 9) == 0) {
   17586:	687b      	ldr	r3, [r7, #4]
   17588:	681b      	ldr	r3, [r3, #0]
   1758a:	689b      	ldr	r3, [r3, #8]
   1758c:	4946      	ldr	r1, [pc, #280]	; (176a8 <SubscribeHandlerGameTopic+0x138>)
   1758e:	2209      	movs	r2, #9
   17590:	0018      	movs	r0, r3
   17592:	4b46      	ldr	r3, [pc, #280]	; (176ac <SubscribeHandlerGameTopic+0x13c>)
   17594:	4798      	blx	r3
   17596:	1e03      	subs	r3, r0, #0
   17598:	d166      	bne.n	17668 <SubscribeHandlerGameTopic+0xf8>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received!\r\n");
   1759a:	4b45      	ldr	r3, [pc, #276]	; (176b0 <SubscribeHandlerGameTopic+0x140>)
   1759c:	0019      	movs	r1, r3
   1759e:	2001      	movs	r0, #1
   175a0:	4b44      	ldr	r3, [pc, #272]	; (176b4 <SubscribeHandlerGameTopic+0x144>)
   175a2:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   175a4:	687b      	ldr	r3, [r7, #4]
   175a6:	685b      	ldr	r3, [r3, #4]
   175a8:	685a      	ldr	r2, [r3, #4]
   175aa:	687b      	ldr	r3, [r7, #4]
   175ac:	685b      	ldr	r3, [r3, #4]
   175ae:	689b      	ldr	r3, [r3, #8]
   175b0:	4941      	ldr	r1, [pc, #260]	; (176b8 <SubscribeHandlerGameTopic+0x148>)
   175b2:	2001      	movs	r0, #1
   175b4:	4c3f      	ldr	r4, [pc, #252]	; (176b4 <SubscribeHandlerGameTopic+0x144>)
   175b6:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   175b8:	687b      	ldr	r3, [r7, #4]
   175ba:	681b      	ldr	r3, [r3, #0]
   175bc:	68da      	ldr	r2, [r3, #12]
   175be:	687b      	ldr	r3, [r7, #4]
   175c0:	681b      	ldr	r3, [r3, #0]
   175c2:	689b      	ldr	r3, [r3, #8]
   175c4:	493d      	ldr	r1, [pc, #244]	; (176bc <SubscribeHandlerGameTopic+0x14c>)
   175c6:	2001      	movs	r0, #1
   175c8:	4c3a      	ldr	r4, [pc, #232]	; (176b4 <SubscribeHandlerGameTopic+0x144>)
   175ca:	47a0      	blx	r4

        int nb = 0;
   175cc:	2300      	movs	r3, #0
   175ce:	627b      	str	r3, [r7, #36]	; 0x24
        char *p = &msgData->message->payload[9];
   175d0:	687b      	ldr	r3, [r7, #4]
   175d2:	681b      	ldr	r3, [r3, #0]
   175d4:	689b      	ldr	r3, [r3, #8]
   175d6:	3309      	adds	r3, #9
   175d8:	60bb      	str	r3, [r7, #8]
        while (nb < GAME_SIZE && *p) {
   175da:	e015      	b.n	17608 <SubscribeHandlerGameTopic+0x98>
            game.game[nb++] = strtol(p, &p, 10);
   175dc:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   175de:	1c63      	adds	r3, r4, #1
   175e0:	627b      	str	r3, [r7, #36]	; 0x24
   175e2:	68bb      	ldr	r3, [r7, #8]
   175e4:	2208      	movs	r2, #8
   175e6:	18b9      	adds	r1, r7, r2
   175e8:	220a      	movs	r2, #10
   175ea:	0018      	movs	r0, r3
   175ec:	4b34      	ldr	r3, [pc, #208]	; (176c0 <SubscribeHandlerGameTopic+0x150>)
   175ee:	4798      	blx	r3
   175f0:	0003      	movs	r3, r0
   175f2:	b2da      	uxtb	r2, r3
   175f4:	230c      	movs	r3, #12
   175f6:	18fb      	adds	r3, r7, r3
   175f8:	551a      	strb	r2, [r3, r4]
            if (*p != ',') break;
   175fa:	68bb      	ldr	r3, [r7, #8]
   175fc:	781b      	ldrb	r3, [r3, #0]
   175fe:	2b2c      	cmp	r3, #44	; 0x2c
   17600:	d10a      	bne.n	17618 <SubscribeHandlerGameTopic+0xa8>
            p++; /* skip, */
   17602:	68bb      	ldr	r3, [r7, #8]
   17604:	3301      	adds	r3, #1
   17606:	60bb      	str	r3, [r7, #8]
        while (nb < GAME_SIZE && *p) {
   17608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1760a:	2b13      	cmp	r3, #19
   1760c:	dc05      	bgt.n	1761a <SubscribeHandlerGameTopic+0xaa>
   1760e:	68bb      	ldr	r3, [r7, #8]
   17610:	781b      	ldrb	r3, [r3, #0]
   17612:	2b00      	cmp	r3, #0
   17614:	d1e2      	bne.n	175dc <SubscribeHandlerGameTopic+0x6c>
   17616:	e000      	b.n	1761a <SubscribeHandlerGameTopic+0xaa>
            if (*p != ',') break;
   17618:	46c0      	nop			; (mov r8, r8)
        }
        LogMessage(LOG_DEBUG_LVL, "\r\nParsed Command: ");
   1761a:	4b2a      	ldr	r3, [pc, #168]	; (176c4 <SubscribeHandlerGameTopic+0x154>)
   1761c:	0019      	movs	r1, r3
   1761e:	2001      	movs	r0, #1
   17620:	4b24      	ldr	r3, [pc, #144]	; (176b4 <SubscribeHandlerGameTopic+0x144>)
   17622:	4798      	blx	r3
        for (int i = 0; i < GAME_SIZE; i++) {
   17624:	2300      	movs	r3, #0
   17626:	623b      	str	r3, [r7, #32]
   17628:	e00d      	b.n	17646 <SubscribeHandlerGameTopic+0xd6>
            LogMessage(LOG_DEBUG_LVL, "%d,", game.game[i]);
   1762a:	230c      	movs	r3, #12
   1762c:	18fa      	adds	r2, r7, r3
   1762e:	6a3b      	ldr	r3, [r7, #32]
   17630:	18d3      	adds	r3, r2, r3
   17632:	781b      	ldrb	r3, [r3, #0]
   17634:	001a      	movs	r2, r3
   17636:	4b24      	ldr	r3, [pc, #144]	; (176c8 <SubscribeHandlerGameTopic+0x158>)
   17638:	0019      	movs	r1, r3
   1763a:	2001      	movs	r0, #1
   1763c:	4b1d      	ldr	r3, [pc, #116]	; (176b4 <SubscribeHandlerGameTopic+0x144>)
   1763e:	4798      	blx	r3
        for (int i = 0; i < GAME_SIZE; i++) {
   17640:	6a3b      	ldr	r3, [r7, #32]
   17642:	3301      	adds	r3, #1
   17644:	623b      	str	r3, [r7, #32]
   17646:	6a3b      	ldr	r3, [r7, #32]
   17648:	2b13      	cmp	r3, #19
   1764a:	ddee      	ble.n	1762a <SubscribeHandlerGameTopic+0xba>
        }

        if (pdTRUE == ControlAddGameData(&game)) {
   1764c:	230c      	movs	r3, #12
   1764e:	18fb      	adds	r3, r7, r3
   17650:	0018      	movs	r0, r3
   17652:	4b1e      	ldr	r3, [pc, #120]	; (176cc <SubscribeHandlerGameTopic+0x15c>)
   17654:	4798      	blx	r3
   17656:	0003      	movs	r3, r0
   17658:	2b01      	cmp	r3, #1
   1765a:	d11e      	bne.n	1769a <SubscribeHandlerGameTopic+0x12a>
            LogMessage(LOG_DEBUG_LVL, "\r\nSent play to control!\r\n");
   1765c:	4b1c      	ldr	r3, [pc, #112]	; (176d0 <SubscribeHandlerGameTopic+0x160>)
   1765e:	0019      	movs	r1, r3
   17660:	2001      	movs	r0, #1
   17662:	4b14      	ldr	r3, [pc, #80]	; (176b4 <SubscribeHandlerGameTopic+0x144>)
   17664:	4798      	blx	r3
    } else {
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
    }
}
   17666:	e018      	b.n	1769a <SubscribeHandlerGameTopic+0x12a>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
   17668:	4b1a      	ldr	r3, [pc, #104]	; (176d4 <SubscribeHandlerGameTopic+0x164>)
   1766a:	0019      	movs	r1, r3
   1766c:	2001      	movs	r0, #1
   1766e:	4b11      	ldr	r3, [pc, #68]	; (176b4 <SubscribeHandlerGameTopic+0x144>)
   17670:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   17672:	687b      	ldr	r3, [r7, #4]
   17674:	685b      	ldr	r3, [r3, #4]
   17676:	685a      	ldr	r2, [r3, #4]
   17678:	687b      	ldr	r3, [r7, #4]
   1767a:	685b      	ldr	r3, [r3, #4]
   1767c:	689b      	ldr	r3, [r3, #8]
   1767e:	490e      	ldr	r1, [pc, #56]	; (176b8 <SubscribeHandlerGameTopic+0x148>)
   17680:	2001      	movs	r0, #1
   17682:	4c0c      	ldr	r4, [pc, #48]	; (176b4 <SubscribeHandlerGameTopic+0x144>)
   17684:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   17686:	687b      	ldr	r3, [r7, #4]
   17688:	681b      	ldr	r3, [r3, #0]
   1768a:	68da      	ldr	r2, [r3, #12]
   1768c:	687b      	ldr	r3, [r7, #4]
   1768e:	681b      	ldr	r3, [r3, #0]
   17690:	689b      	ldr	r3, [r3, #8]
   17692:	490a      	ldr	r1, [pc, #40]	; (176bc <SubscribeHandlerGameTopic+0x14c>)
   17694:	2001      	movs	r0, #1
   17696:	4c07      	ldr	r4, [pc, #28]	; (176b4 <SubscribeHandlerGameTopic+0x144>)
   17698:	47a0      	blx	r4
}
   1769a:	46c0      	nop			; (mov r8, r8)
   1769c:	46bd      	mov	sp, r7
   1769e:	b00b      	add	sp, #44	; 0x2c
   176a0:	bd90      	pop	{r4, r7, pc}
   176a2:	46c0      	nop			; (mov r8, r8)
   176a4:	00035707 	.word	0x00035707
   176a8:	000376dc 	.word	0x000376dc
   176ac:	00035acd 	.word	0x00035acd
   176b0:	000376e8 	.word	0x000376e8
   176b4:	0001eb25 	.word	0x0001eb25
   176b8:	000376b8 	.word	0x000376b8
   176bc:	00037704 	.word	0x00037704
   176c0:	00035c79 	.word	0x00035c79
   176c4:	0003770c 	.word	0x0003770c
   176c8:	00037720 	.word	0x00037720
   176cc:	000144e9 	.word	0x000144e9
   176d0:	00037724 	.word	0x00037724
   176d4:	00037740 	.word	0x00037740

000176d8 <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
   176d8:	b590      	push	{r4, r7, lr}
   176da:	b08b      	sub	sp, #44	; 0x2c
   176dc:	af06      	add	r7, sp, #24
   176de:	60f8      	str	r0, [r7, #12]
   176e0:	60b9      	str	r1, [r7, #8]
   176e2:	607a      	str	r2, [r7, #4]
    switch (type) {
   176e4:	68bb      	ldr	r3, [r7, #8]
   176e6:	2b01      	cmp	r3, #1
   176e8:	d03b      	beq.n	17762 <mqtt_callback+0x8a>
   176ea:	2b05      	cmp	r3, #5
   176ec:	d058      	beq.n	177a0 <mqtt_callback+0xc8>
   176ee:	2b00      	cmp	r3, #0
   176f0:	d000      	beq.n	176f4 <mqtt_callback+0x1c>
            /* Stop timer and USART callback. */
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
            // usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
            break;
    }
}
   176f2:	e05b      	b.n	177ac <mqtt_callback+0xd4>
            if (data->sock_connected.result >= 0) {
   176f4:	687b      	ldr	r3, [r7, #4]
   176f6:	681b      	ldr	r3, [r3, #0]
   176f8:	2b00      	cmp	r3, #0
   176fa:	db25      	blt.n	17748 <mqtt_callback+0x70>
                LogMessage(LOG_DEBUG_LVL, "\r\nConnecting to Broker...");
   176fc:	4b2d      	ldr	r3, [pc, #180]	; (177b4 <mqtt_callback+0xdc>)
   176fe:	0019      	movs	r1, r3
   17700:	2001      	movs	r0, #1
   17702:	4b2d      	ldr	r3, [pc, #180]	; (177b8 <mqtt_callback+0xe0>)
   17704:	4798      	blx	r3
                if (0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0)) {
   17706:	492d      	ldr	r1, [pc, #180]	; (177bc <mqtt_callback+0xe4>)
   17708:	4a2d      	ldr	r2, [pc, #180]	; (177c0 <mqtt_callback+0xe8>)
   1770a:	68f8      	ldr	r0, [r7, #12]
   1770c:	2300      	movs	r3, #0
   1770e:	9305      	str	r3, [sp, #20]
   17710:	2300      	movs	r3, #0
   17712:	9304      	str	r3, [sp, #16]
   17714:	2300      	movs	r3, #0
   17716:	9303      	str	r3, [sp, #12]
   17718:	2300      	movs	r3, #0
   1771a:	9302      	str	r3, [sp, #8]
   1771c:	2300      	movs	r3, #0
   1771e:	9301      	str	r3, [sp, #4]
   17720:	4b27      	ldr	r3, [pc, #156]	; (177c0 <mqtt_callback+0xe8>)
   17722:	9300      	str	r3, [sp, #0]
   17724:	000b      	movs	r3, r1
   17726:	2101      	movs	r1, #1
   17728:	4c26      	ldr	r4, [pc, #152]	; (177c4 <mqtt_callback+0xec>)
   1772a:	47a0      	blx	r4
   1772c:	1e03      	subs	r3, r0, #0
   1772e:	d005      	beq.n	1773c <mqtt_callback+0x64>
                    LogMessage(LOG_DEBUG_LVL, "MQTT  Error - NOT Connected to broker\r\n");
   17730:	4b25      	ldr	r3, [pc, #148]	; (177c8 <mqtt_callback+0xf0>)
   17732:	0019      	movs	r1, r3
   17734:	2001      	movs	r0, #1
   17736:	4b20      	ldr	r3, [pc, #128]	; (177b8 <mqtt_callback+0xe0>)
   17738:	4798      	blx	r3
        } break;
   1773a:	e037      	b.n	177ac <mqtt_callback+0xd4>
                    LogMessage(LOG_DEBUG_LVL, "MQTT Connected to broker\r\n");
   1773c:	4b23      	ldr	r3, [pc, #140]	; (177cc <mqtt_callback+0xf4>)
   1773e:	0019      	movs	r1, r3
   17740:	2001      	movs	r0, #1
   17742:	4b1d      	ldr	r3, [pc, #116]	; (177b8 <mqtt_callback+0xe0>)
   17744:	4798      	blx	r3
        } break;
   17746:	e031      	b.n	177ac <mqtt_callback+0xd4>
                LogMessage(LOG_DEBUG_LVL, "Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
   17748:	4a21      	ldr	r2, [pc, #132]	; (177d0 <mqtt_callback+0xf8>)
   1774a:	4b22      	ldr	r3, [pc, #136]	; (177d4 <mqtt_callback+0xfc>)
   1774c:	0019      	movs	r1, r3
   1774e:	2001      	movs	r0, #1
   17750:	4b19      	ldr	r3, [pc, #100]	; (177b8 <mqtt_callback+0xe0>)
   17752:	4798      	blx	r3
                mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
   17754:	4a1e      	ldr	r2, [pc, #120]	; (177d0 <mqtt_callback+0xf8>)
   17756:	68fb      	ldr	r3, [r7, #12]
   17758:	0011      	movs	r1, r2
   1775a:	0018      	movs	r0, r3
   1775c:	4b1e      	ldr	r3, [pc, #120]	; (177d8 <mqtt_callback+0x100>)
   1775e:	4798      	blx	r3
        } break;
   17760:	e024      	b.n	177ac <mqtt_callback+0xd4>
            if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
   17762:	687b      	ldr	r3, [r7, #4]
   17764:	781b      	ldrb	r3, [r3, #0]
   17766:	2b00      	cmp	r3, #0
   17768:	d111      	bne.n	1778e <mqtt_callback+0xb6>
                mqtt_subscribe(module_inst, GAME_TOPIC_IN, 2, SubscribeHandlerGameTopic);
   1776a:	4b1c      	ldr	r3, [pc, #112]	; (177dc <mqtt_callback+0x104>)
   1776c:	491c      	ldr	r1, [pc, #112]	; (177e0 <mqtt_callback+0x108>)
   1776e:	68f8      	ldr	r0, [r7, #12]
   17770:	2202      	movs	r2, #2
   17772:	4c1c      	ldr	r4, [pc, #112]	; (177e4 <mqtt_callback+0x10c>)
   17774:	47a0      	blx	r4
                mqtt_subscribe(module_inst, LED_TOPIC, 2, SubscribeHandlerLedTopic);
   17776:	4b1c      	ldr	r3, [pc, #112]	; (177e8 <mqtt_callback+0x110>)
   17778:	491c      	ldr	r1, [pc, #112]	; (177ec <mqtt_callback+0x114>)
   1777a:	68f8      	ldr	r0, [r7, #12]
   1777c:	2202      	movs	r2, #2
   1777e:	4c19      	ldr	r4, [pc, #100]	; (177e4 <mqtt_callback+0x10c>)
   17780:	47a0      	blx	r4
                LogMessage(LOG_DEBUG_LVL, "MQTT Connected\r\n");
   17782:	4b1b      	ldr	r3, [pc, #108]	; (177f0 <mqtt_callback+0x118>)
   17784:	0019      	movs	r1, r3
   17786:	2001      	movs	r0, #1
   17788:	4b0b      	ldr	r3, [pc, #44]	; (177b8 <mqtt_callback+0xe0>)
   1778a:	4798      	blx	r3
            break;
   1778c:	e00e      	b.n	177ac <mqtt_callback+0xd4>
                LogMessage(LOG_DEBUG_LVL, "MQTT broker decline your access! error code %d\r\n", data->connected.result);
   1778e:	687b      	ldr	r3, [r7, #4]
   17790:	781b      	ldrb	r3, [r3, #0]
   17792:	001a      	movs	r2, r3
   17794:	4b17      	ldr	r3, [pc, #92]	; (177f4 <mqtt_callback+0x11c>)
   17796:	0019      	movs	r1, r3
   17798:	2001      	movs	r0, #1
   1779a:	4b07      	ldr	r3, [pc, #28]	; (177b8 <mqtt_callback+0xe0>)
   1779c:	4798      	blx	r3
            break;
   1779e:	e005      	b.n	177ac <mqtt_callback+0xd4>
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
   177a0:	4b15      	ldr	r3, [pc, #84]	; (177f8 <mqtt_callback+0x120>)
   177a2:	0019      	movs	r1, r3
   177a4:	2001      	movs	r0, #1
   177a6:	4b04      	ldr	r3, [pc, #16]	; (177b8 <mqtt_callback+0xe0>)
   177a8:	4798      	blx	r3
            break;
   177aa:	46c0      	nop			; (mov r8, r8)
}
   177ac:	46c0      	nop			; (mov r8, r8)
   177ae:	46bd      	mov	sp, r7
   177b0:	b005      	add	sp, #20
   177b2:	bd90      	pop	{r4, r7, pc}
   177b4:	0003779c 	.word	0x0003779c
   177b8:	0001eb25 	.word	0x0001eb25
   177bc:	000377b8 	.word	0x000377b8
   177c0:	000377c8 	.word	0x000377c8
   177c4:	00030559 	.word	0x00030559
   177c8:	000377d4 	.word	0x000377d4
   177cc:	000377fc 	.word	0x000377fc
   177d0:	00037140 	.word	0x00037140
   177d4:	00037818 	.word	0x00037818
   177d8:	00030511 	.word	0x00030511
   177dc:	00017571 	.word	0x00017571
   177e0:	00037850 	.word	0x00037850
   177e4:	000306f9 	.word	0x000306f9
   177e8:	0001747d 	.word	0x0001747d
   177ec:	00037778 	.word	0x00037778
   177f0:	00037864 	.word	0x00037864
   177f4:	00037878 	.word	0x00037878
   177f8:	000378ac 	.word	0x000378ac

000177fc <configure_mqtt>:

/**
 * \brief Configure MQTT service.
 */
static void configure_mqtt(void)
{
   177fc:	b580      	push	{r7, lr}
   177fe:	b088      	sub	sp, #32
   17800:	af00      	add	r7, sp, #0
    struct mqtt_config mqtt_conf;
    int result;

    mqtt_get_config_defaults(&mqtt_conf);
   17802:	1d3b      	adds	r3, r7, #4
   17804:	0018      	movs	r0, r3
   17806:	4b1f      	ldr	r3, [pc, #124]	; (17884 <configure_mqtt+0x88>)
   17808:	4798      	blx	r3
    /* To use the MQTT service, it is necessary to always set the buffer and the timer. */
    mqtt_conf.read_buffer = mqtt_read_buffer;
   1780a:	1d3b      	adds	r3, r7, #4
   1780c:	4a1e      	ldr	r2, [pc, #120]	; (17888 <configure_mqtt+0x8c>)
   1780e:	609a      	str	r2, [r3, #8]
    mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   17810:	1d3b      	adds	r3, r7, #4
   17812:	2280      	movs	r2, #128	; 0x80
   17814:	0092      	lsls	r2, r2, #2
   17816:	60da      	str	r2, [r3, #12]
    mqtt_conf.send_buffer = mqtt_send_buffer;
   17818:	1d3b      	adds	r3, r7, #4
   1781a:	4a1c      	ldr	r2, [pc, #112]	; (1788c <configure_mqtt+0x90>)
   1781c:	611a      	str	r2, [r3, #16]
    mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   1781e:	1d3b      	adds	r3, r7, #4
   17820:	2280      	movs	r2, #128	; 0x80
   17822:	0092      	lsls	r2, r2, #2
   17824:	615a      	str	r2, [r3, #20]
    mqtt_conf.port = CLOUDMQTT_PORT;
   17826:	1d3b      	adds	r3, r7, #4
   17828:	4a19      	ldr	r2, [pc, #100]	; (17890 <configure_mqtt+0x94>)
   1782a:	801a      	strh	r2, [r3, #0]
    mqtt_conf.keep_alive = 6000;
   1782c:	1d3b      	adds	r3, r7, #4
   1782e:	4a19      	ldr	r2, [pc, #100]	; (17894 <configure_mqtt+0x98>)
   17830:	809a      	strh	r2, [r3, #4]

    result = mqtt_init(&mqtt_inst, &mqtt_conf);
   17832:	1d3a      	adds	r2, r7, #4
   17834:	4b18      	ldr	r3, [pc, #96]	; (17898 <configure_mqtt+0x9c>)
   17836:	0011      	movs	r1, r2
   17838:	0018      	movs	r0, r3
   1783a:	4b18      	ldr	r3, [pc, #96]	; (1789c <configure_mqtt+0xa0>)
   1783c:	4798      	blx	r3
   1783e:	0003      	movs	r3, r0
   17840:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   17842:	69fb      	ldr	r3, [r7, #28]
   17844:	2b00      	cmp	r3, #0
   17846:	da06      	bge.n	17856 <configure_mqtt+0x5a>
        LogMessage(LOG_DEBUG_LVL, "MQTT initialization failed. Error code is (%d)\r\n", result);
   17848:	69fa      	ldr	r2, [r7, #28]
   1784a:	4b15      	ldr	r3, [pc, #84]	; (178a0 <configure_mqtt+0xa4>)
   1784c:	0019      	movs	r1, r3
   1784e:	2001      	movs	r0, #1
   17850:	4b14      	ldr	r3, [pc, #80]	; (178a4 <configure_mqtt+0xa8>)
   17852:	4798      	blx	r3
        while (1) {
   17854:	e7fe      	b.n	17854 <configure_mqtt+0x58>
        }
    }

    result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
   17856:	4a14      	ldr	r2, [pc, #80]	; (178a8 <configure_mqtt+0xac>)
   17858:	4b0f      	ldr	r3, [pc, #60]	; (17898 <configure_mqtt+0x9c>)
   1785a:	0011      	movs	r1, r2
   1785c:	0018      	movs	r0, r3
   1785e:	4b13      	ldr	r3, [pc, #76]	; (178ac <configure_mqtt+0xb0>)
   17860:	4798      	blx	r3
   17862:	0003      	movs	r3, r0
   17864:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   17866:	69fb      	ldr	r3, [r7, #28]
   17868:	2b00      	cmp	r3, #0
   1786a:	da06      	bge.n	1787a <configure_mqtt+0x7e>
        LogMessage(LOG_DEBUG_LVL, "MQTT register callback failed. Error code is (%d)\r\n", result);
   1786c:	69fa      	ldr	r2, [r7, #28]
   1786e:	4b10      	ldr	r3, [pc, #64]	; (178b0 <configure_mqtt+0xb4>)
   17870:	0019      	movs	r1, r3
   17872:	2001      	movs	r0, #1
   17874:	4b0b      	ldr	r3, [pc, #44]	; (178a4 <configure_mqtt+0xa8>)
   17876:	4798      	blx	r3
        while (1) {
   17878:	e7fe      	b.n	17878 <configure_mqtt+0x7c>
        }
    }
}
   1787a:	46c0      	nop			; (mov r8, r8)
   1787c:	46bd      	mov	sp, r7
   1787e:	b008      	add	sp, #32
   17880:	bd80      	pop	{r7, pc}
   17882:	46c0      	nop			; (mov r8, r8)
   17884:	00030451 	.word	0x00030451
   17888:	200008f4 	.word	0x200008f4
   1788c:	20000af4 	.word	0x20000af4
   17890:	0000075b 	.word	0x0000075b
   17894:	00001770 	.word	0x00001770
   17898:	200008bc 	.word	0x200008bc
   1789c:	000303a1 	.word	0x000303a1
   178a0:	000378c0 	.word	0x000378c0
   178a4:	0001eb25 	.word	0x0001eb25
   178a8:	000176d9 	.word	0x000176d9
   178ac:	00030491 	.word	0x00030491
   178b0:	000378f4 	.word	0x000378f4

000178b4 <configure_extint_channel>:

// SETUP FOR EXTERNAL BUTTON INTERRUPT -- Used to send an MQTT Message

void configure_extint_channel(void)
{
   178b4:	b580      	push	{r7, lr}
   178b6:	b084      	sub	sp, #16
   178b8:	af00      	add	r7, sp, #0
    struct extint_chan_conf config_extint_chan;
    extint_chan_get_config_defaults(&config_extint_chan);
   178ba:	1d3b      	adds	r3, r7, #4
   178bc:	0018      	movs	r0, r3
   178be:	4b0b      	ldr	r3, [pc, #44]	; (178ec <configure_extint_channel+0x38>)
   178c0:	4798      	blx	r3
    config_extint_chan.gpio_pin = BUTTON_0_EIC_PIN;
   178c2:	1d3b      	adds	r3, r7, #4
   178c4:	2237      	movs	r2, #55	; 0x37
   178c6:	601a      	str	r2, [r3, #0]
    config_extint_chan.gpio_pin_mux = BUTTON_0_EIC_MUX;
   178c8:	1d3b      	adds	r3, r7, #4
   178ca:	2200      	movs	r2, #0
   178cc:	605a      	str	r2, [r3, #4]
    config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   178ce:	1d3b      	adds	r3, r7, #4
   178d0:	2201      	movs	r2, #1
   178d2:	721a      	strb	r2, [r3, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   178d4:	1d3b      	adds	r3, r7, #4
   178d6:	2202      	movs	r2, #2
   178d8:	72da      	strb	r2, [r3, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
   178da:	1d3b      	adds	r3, r7, #4
   178dc:	0019      	movs	r1, r3
   178de:	2007      	movs	r0, #7
   178e0:	4b03      	ldr	r3, [pc, #12]	; (178f0 <configure_extint_channel+0x3c>)
   178e2:	4798      	blx	r3
}
   178e4:	46c0      	nop			; (mov r8, r8)
   178e6:	46bd      	mov	sp, r7
   178e8:	b004      	add	sp, #16
   178ea:	bd80      	pop	{r7, pc}
   178ec:	00027589 	.word	0x00027589
   178f0:	000275bd 	.word	0x000275bd

000178f4 <configure_extint_callbacks>:

void extint_detection_callback(void);
void configure_extint_callbacks(void)
{
   178f4:	b580      	push	{r7, lr}
   178f6:	af00      	add	r7, sp, #0
    extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   178f8:	4b06      	ldr	r3, [pc, #24]	; (17914 <configure_extint_callbacks+0x20>)
   178fa:	2200      	movs	r2, #0
   178fc:	2107      	movs	r1, #7
   178fe:	0018      	movs	r0, r3
   17900:	4b05      	ldr	r3, [pc, #20]	; (17918 <configure_extint_callbacks+0x24>)
   17902:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   17904:	2100      	movs	r1, #0
   17906:	2007      	movs	r0, #7
   17908:	4b04      	ldr	r3, [pc, #16]	; (1791c <configure_extint_callbacks+0x28>)
   1790a:	4798      	blx	r3
}
   1790c:	46c0      	nop			; (mov r8, r8)
   1790e:	46bd      	mov	sp, r7
   17910:	bd80      	pop	{r7, pc}
   17912:	46c0      	nop			; (mov r8, r8)
   17914:	00017921 	.word	0x00017921
   17918:	00027189 	.word	0x00027189
   1791c:	000271ed 	.word	0x000271ed

00017920 <extint_detection_callback>:

volatile bool isPressed = false;
void extint_detection_callback(void)
{
   17920:	b5b0      	push	{r4, r5, r7, lr}
   17922:	af00      	add	r7, sp, #0
    // Publish some data after a button press and release. Note: just an example! This is not the most elegant way of doing this!
    temperature++;
   17924:	4b0c      	ldr	r3, [pc, #48]	; (17958 <extint_detection_callback+0x38>)
   17926:	681b      	ldr	r3, [r3, #0]
   17928:	1c5a      	adds	r2, r3, #1
   1792a:	4b0b      	ldr	r3, [pc, #44]	; (17958 <extint_detection_callback+0x38>)
   1792c:	601a      	str	r2, [r3, #0]
    if (temperature > 40) temperature = 1;
   1792e:	4b0a      	ldr	r3, [pc, #40]	; (17958 <extint_detection_callback+0x38>)
   17930:	681b      	ldr	r3, [r3, #0]
   17932:	2b28      	cmp	r3, #40	; 0x28
   17934:	d902      	bls.n	1793c <extint_detection_callback+0x1c>
   17936:	4b08      	ldr	r3, [pc, #32]	; (17958 <extint_detection_callback+0x38>)
   17938:	2201      	movs	r2, #1
   1793a:	601a      	str	r2, [r3, #0]
    snprintf(mqtt_msg_temp, 63, "{\"d\":{\"temp\":%d}}", temperature);
   1793c:	4b06      	ldr	r3, [pc, #24]	; (17958 <extint_detection_callback+0x38>)
   1793e:	681b      	ldr	r3, [r3, #0]
   17940:	4a06      	ldr	r2, [pc, #24]	; (1795c <extint_detection_callback+0x3c>)
   17942:	4807      	ldr	r0, [pc, #28]	; (17960 <extint_detection_callback+0x40>)
   17944:	213f      	movs	r1, #63	; 0x3f
   17946:	4c07      	ldr	r4, [pc, #28]	; (17964 <extint_detection_callback+0x44>)
   17948:	47a0      	blx	r4
    isPressed = true;
   1794a:	4b07      	ldr	r3, [pc, #28]	; (17968 <extint_detection_callback+0x48>)
   1794c:	2201      	movs	r2, #1
   1794e:	701a      	strb	r2, [r3, #0]
    //Published in the Wifi thread main loop
}
   17950:	46c0      	nop			; (mov r8, r8)
   17952:	46bd      	mov	sp, r7
   17954:	bdb0      	pop	{r4, r5, r7, pc}
   17956:	46c0      	nop			; (mov r8, r8)
   17958:	200000a4 	.word	0x200000a4
   1795c:	00037928 	.word	0x00037928
   17960:	20000064 	.word	0x20000064
   17964:	00035961 	.word	0x00035961
   17968:	20000cf4 	.word	0x20000cf4

0001796c <HTTP_DownloadFileInit>:
 * @brief	Routine to initialize HTTP download of the OTAU file
 * @note

*/
static void HTTP_DownloadFileInit(void)
{
   1796c:	b580      	push	{r7, lr}
   1796e:	af00      	add	r7, sp, #0
    if (mqtt_disconnect(&mqtt_inst, main_mqtt_broker)) {
   17970:	4a15      	ldr	r2, [pc, #84]	; (179c8 <HTTP_DownloadFileInit+0x5c>)
   17972:	4b16      	ldr	r3, [pc, #88]	; (179cc <HTTP_DownloadFileInit+0x60>)
   17974:	0011      	movs	r1, r2
   17976:	0018      	movs	r0, r3
   17978:	4b15      	ldr	r3, [pc, #84]	; (179d0 <HTTP_DownloadFileInit+0x64>)
   1797a:	4798      	blx	r3
   1797c:	1e03      	subs	r3, r0, #0
   1797e:	d008      	beq.n	17992 <HTTP_DownloadFileInit+0x26>
        LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   17980:	4b14      	ldr	r3, [pc, #80]	; (179d4 <HTTP_DownloadFileInit+0x68>)
   17982:	0019      	movs	r1, r3
   17984:	2001      	movs	r0, #1
   17986:	4b14      	ldr	r3, [pc, #80]	; (179d8 <HTTP_DownloadFileInit+0x6c>)
   17988:	4798      	blx	r3
    }
    while ((mqtt_inst.isConnected)) {
   1798a:	e002      	b.n	17992 <HTTP_DownloadFileInit+0x26>
        m2m_wifi_handle_events(NULL);
   1798c:	2000      	movs	r0, #0
   1798e:	4b13      	ldr	r3, [pc, #76]	; (179dc <HTTP_DownloadFileInit+0x70>)
   17990:	4798      	blx	r3
    while ((mqtt_inst.isConnected)) {
   17992:	4b0e      	ldr	r3, [pc, #56]	; (179cc <HTTP_DownloadFileInit+0x60>)
   17994:	2234      	movs	r2, #52	; 0x34
   17996:	5c9b      	ldrb	r3, [r3, r2]
   17998:	2b00      	cmp	r3, #0
   1799a:	d1f7      	bne.n	1798c <HTTP_DownloadFileInit+0x20>
    }
    socketDeinit();
   1799c:	4b10      	ldr	r3, [pc, #64]	; (179e0 <HTTP_DownloadFileInit+0x74>)
   1799e:	4798      	blx	r3
    // DOWNLOAD A FILE
    do_download_flag = true;
   179a0:	4b10      	ldr	r3, [pc, #64]	; (179e4 <HTTP_DownloadFileInit+0x78>)
   179a2:	2201      	movs	r2, #1
   179a4:	701a      	strb	r2, [r3, #0]
    /* Register socket callback function. */
    registerSocketCallback(socket_cb, resolve_cb);
   179a6:	4a10      	ldr	r2, [pc, #64]	; (179e8 <HTTP_DownloadFileInit+0x7c>)
   179a8:	4b10      	ldr	r3, [pc, #64]	; (179ec <HTTP_DownloadFileInit+0x80>)
   179aa:	0011      	movs	r1, r2
   179ac:	0018      	movs	r0, r3
   179ae:	4b10      	ldr	r3, [pc, #64]	; (179f0 <HTTP_DownloadFileInit+0x84>)
   179b0:	4798      	blx	r3
    /* Initialize socket module. */
    socketInit();
   179b2:	4b10      	ldr	r3, [pc, #64]	; (179f4 <HTTP_DownloadFileInit+0x88>)
   179b4:	4798      	blx	r3

    start_download();
   179b6:	4b10      	ldr	r3, [pc, #64]	; (179f8 <HTTP_DownloadFileInit+0x8c>)
   179b8:	4798      	blx	r3
    wifiStateMachine = WIFI_DOWNLOAD_HANDLE;
   179ba:	4b10      	ldr	r3, [pc, #64]	; (179fc <HTTP_DownloadFileInit+0x90>)
   179bc:	2203      	movs	r2, #3
   179be:	701a      	strb	r2, [r3, #0]
}
   179c0:	46c0      	nop			; (mov r8, r8)
   179c2:	46bd      	mov	sp, r7
   179c4:	bd80      	pop	{r7, pc}
   179c6:	46c0      	nop			; (mov r8, r8)
   179c8:	00037140 	.word	0x00037140
   179cc:	200008bc 	.word	0x200008bc
   179d0:	00030645 	.word	0x00030645
   179d4:	00037540 	.word	0x00037540
   179d8:	0001eb25 	.word	0x0001eb25
   179dc:	00022c79 	.word	0x00022c79
   179e0:	00026235 	.word	0x00026235
   179e4:	2000065c 	.word	0x2000065c
   179e8:	000170dd 	.word	0x000170dd
   179ec:	000170a9 	.word	0x000170a9
   179f0:	0002627d 	.word	0x0002627d
   179f4:	000261e5 	.word	0x000261e5
   179f8:	00016cd1 	.word	0x00016cd1
   179fc:	20000644 	.word	0x20000644

00017a00 <HTTP_DownloadFileTransaction>:
 * @brief	Routine to handle the HTTP transaction of downloading a file
 * @note

*/
static void HTTP_DownloadFileTransaction(void)
{
   17a00:	b590      	push	{r4, r7, lr}
   17a02:	b085      	sub	sp, #20
   17a04:	af00      	add	r7, sp, #0
    /* Connect to router. */
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   17a06:	e009      	b.n	17a1c <HTTP_DownloadFileTransaction+0x1c>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   17a08:	2000      	movs	r0, #0
   17a0a:	4b30      	ldr	r3, [pc, #192]	; (17acc <HTTP_DownloadFileTransaction+0xcc>)
   17a0c:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   17a0e:	4b30      	ldr	r3, [pc, #192]	; (17ad0 <HTTP_DownloadFileTransaction+0xd0>)
   17a10:	0018      	movs	r0, r3
   17a12:	4b30      	ldr	r3, [pc, #192]	; (17ad4 <HTTP_DownloadFileTransaction+0xd4>)
   17a14:	4798      	blx	r3
        vTaskDelay(5);
   17a16:	2005      	movs	r0, #5
   17a18:	4b2f      	ldr	r3, [pc, #188]	; (17ad8 <HTTP_DownloadFileTransaction+0xd8>)
   17a1a:	4798      	blx	r3
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   17a1c:	2010      	movs	r0, #16
   17a1e:	4b2f      	ldr	r3, [pc, #188]	; (17adc <HTTP_DownloadFileTransaction+0xdc>)
   17a20:	4798      	blx	r3
   17a22:	0003      	movs	r3, r0
   17a24:	001a      	movs	r2, r3
   17a26:	2301      	movs	r3, #1
   17a28:	4053      	eors	r3, r2
   17a2a:	b2db      	uxtb	r3, r3
   17a2c:	2b00      	cmp	r3, #0
   17a2e:	d009      	beq.n	17a44 <HTTP_DownloadFileTransaction+0x44>
   17a30:	2020      	movs	r0, #32
   17a32:	4b2a      	ldr	r3, [pc, #168]	; (17adc <HTTP_DownloadFileTransaction+0xdc>)
   17a34:	4798      	blx	r3
   17a36:	0003      	movs	r3, r0
   17a38:	001a      	movs	r2, r3
   17a3a:	2301      	movs	r3, #1
   17a3c:	4053      	eors	r3, r2
   17a3e:	b2db      	uxtb	r3, r3
   17a40:	2b00      	cmp	r3, #0
   17a42:	d1e1      	bne.n	17a08 <HTTP_DownloadFileTransaction+0x8>
    }

    // Disable socket for HTTP Transfer
    socketDeinit();
   17a44:	4b26      	ldr	r3, [pc, #152]	; (17ae0 <HTTP_DownloadFileTransaction+0xe0>)
   17a46:	4798      	blx	r3
    vTaskDelay(1000);
   17a48:	23fa      	movs	r3, #250	; 0xfa
   17a4a:	009b      	lsls	r3, r3, #2
   17a4c:	0018      	movs	r0, r3
   17a4e:	4b22      	ldr	r3, [pc, #136]	; (17ad8 <HTTP_DownloadFileTransaction+0xd8>)
   17a50:	4798      	blx	r3
    // CONNECT TO MQTT BROKER
    do_download_flag = false;
   17a52:	4b24      	ldr	r3, [pc, #144]	; (17ae4 <HTTP_DownloadFileTransaction+0xe4>)
   17a54:	2200      	movs	r2, #0
   17a56:	701a      	strb	r2, [r3, #0]

    // Write Flag
    char test_file_name[] = "0:FlagA.txt";
   17a58:	003b      	movs	r3, r7
   17a5a:	4a23      	ldr	r2, [pc, #140]	; (17ae8 <HTTP_DownloadFileTransaction+0xe8>)
   17a5c:	ca13      	ldmia	r2!, {r0, r1, r4}
   17a5e:	c313      	stmia	r3!, {r0, r1, r4}
    test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   17a60:	003b      	movs	r3, r7
   17a62:	2230      	movs	r2, #48	; 0x30
   17a64:	701a      	strb	r2, [r3, #0]
    FRESULT res = f_open(&file_object, (char const *)test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   17a66:	230f      	movs	r3, #15
   17a68:	18fc      	adds	r4, r7, r3
   17a6a:	0039      	movs	r1, r7
   17a6c:	4b1f      	ldr	r3, [pc, #124]	; (17aec <HTTP_DownloadFileTransaction+0xec>)
   17a6e:	220a      	movs	r2, #10
   17a70:	0018      	movs	r0, r3
   17a72:	4b1f      	ldr	r3, [pc, #124]	; (17af0 <HTTP_DownloadFileTransaction+0xf0>)
   17a74:	4798      	blx	r3
   17a76:	0003      	movs	r3, r0
   17a78:	7023      	strb	r3, [r4, #0]
    res = f_open(&file_object, (char const *)test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   17a7a:	230f      	movs	r3, #15
   17a7c:	18fc      	adds	r4, r7, r3
   17a7e:	0039      	movs	r1, r7
   17a80:	4b1a      	ldr	r3, [pc, #104]	; (17aec <HTTP_DownloadFileTransaction+0xec>)
   17a82:	220a      	movs	r2, #10
   17a84:	0018      	movs	r0, r3
   17a86:	4b1a      	ldr	r3, [pc, #104]	; (17af0 <HTTP_DownloadFileTransaction+0xf0>)
   17a88:	4798      	blx	r3
   17a8a:	0003      	movs	r3, r0
   17a8c:	7023      	strb	r3, [r4, #0]

    if (res != FR_OK) {
   17a8e:	230f      	movs	r3, #15
   17a90:	18fb      	adds	r3, r7, r3
   17a92:	781b      	ldrb	r3, [r3, #0]
   17a94:	2b00      	cmp	r3, #0
   17a96:	d008      	beq.n	17aaa <HTTP_DownloadFileTransaction+0xaa>
        LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
   17a98:	230f      	movs	r3, #15
   17a9a:	18fb      	adds	r3, r7, r3
   17a9c:	781a      	ldrb	r2, [r3, #0]
   17a9e:	4b15      	ldr	r3, [pc, #84]	; (17af4 <HTTP_DownloadFileTransaction+0xf4>)
   17aa0:	0019      	movs	r1, r3
   17aa2:	2000      	movs	r0, #0
   17aa4:	4b14      	ldr	r3, [pc, #80]	; (17af8 <HTTP_DownloadFileTransaction+0xf8>)
   17aa6:	4798      	blx	r3
   17aa8:	e003      	b.n	17ab2 <HTTP_DownloadFileTransaction+0xb2>
    } else {
        SerialConsoleWriteString("FlagA.txt added!\r\n");
   17aaa:	4b14      	ldr	r3, [pc, #80]	; (17afc <HTTP_DownloadFileTransaction+0xfc>)
   17aac:	0018      	movs	r0, r3
   17aae:	4b14      	ldr	r3, [pc, #80]	; (17b00 <HTTP_DownloadFileTransaction+0x100>)
   17ab0:	4798      	blx	r3
    }
    delay_ms(100);
   17ab2:	2064      	movs	r0, #100	; 0x64
   17ab4:	4b13      	ldr	r3, [pc, #76]	; (17b04 <HTTP_DownloadFileTransaction+0x104>)
   17ab6:	4798      	blx	r3
    system_reset();
   17ab8:	4b13      	ldr	r3, [pc, #76]	; (17b08 <HTTP_DownloadFileTransaction+0x108>)
   17aba:	4798      	blx	r3
    wifiStateMachine = WIFI_MQTT_INIT;
   17abc:	4b13      	ldr	r3, [pc, #76]	; (17b0c <HTTP_DownloadFileTransaction+0x10c>)
   17abe:	2200      	movs	r2, #0
   17ac0:	701a      	strb	r2, [r3, #0]
}
   17ac2:	46c0      	nop			; (mov r8, r8)
   17ac4:	46bd      	mov	sp, r7
   17ac6:	b005      	add	sp, #20
   17ac8:	bd90      	pop	{r4, r7, pc}
   17aca:	46c0      	nop			; (mov r8, r8)
   17acc:	00022c79 	.word	0x00022c79
   17ad0:	200044f0 	.word	0x200044f0
   17ad4:	0003336d 	.word	0x0003336d
   17ad8:	0001cde5 	.word	0x0001cde5
   17adc:	000169a9 	.word	0x000169a9
   17ae0:	00026235 	.word	0x00026235
   17ae4:	2000065c 	.word	0x2000065c
   17ae8:	00037960 	.word	0x00037960
   17aec:	20000890 	.word	0x20000890
   17af0:	0002e635 	.word	0x0002e635
   17af4:	0003793c 	.word	0x0003793c
   17af8:	0001eb25 	.word	0x0001eb25
   17afc:	0003794c 	.word	0x0003794c
   17b00:	0001ea39 	.word	0x0001ea39
   17b04:	00020df1 	.word	0x00020df1
   17b08:	000168ad 	.word	0x000168ad
   17b0c:	20000644 	.word	0x20000644

00017b10 <MQTT_InitRoutine>:
 * @brief	Routine to initialize the MQTT socket to prepare for MQTT transactions
 * @note

*/
static void MQTT_InitRoutine(void)
{
   17b10:	b580      	push	{r7, lr}
   17b12:	af00      	add	r7, sp, #0
    socketDeinit();
   17b14:	4b18      	ldr	r3, [pc, #96]	; (17b78 <MQTT_InitRoutine+0x68>)
   17b16:	4798      	blx	r3
    configure_mqtt();
   17b18:	4b18      	ldr	r3, [pc, #96]	; (17b7c <MQTT_InitRoutine+0x6c>)
   17b1a:	4798      	blx	r3
    // Re-enable socket for MQTT Transfer
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   17b1c:	4a18      	ldr	r2, [pc, #96]	; (17b80 <MQTT_InitRoutine+0x70>)
   17b1e:	4b19      	ldr	r3, [pc, #100]	; (17b84 <MQTT_InitRoutine+0x74>)
   17b20:	0011      	movs	r1, r2
   17b22:	0018      	movs	r0, r3
   17b24:	4b18      	ldr	r3, [pc, #96]	; (17b88 <MQTT_InitRoutine+0x78>)
   17b26:	4798      	blx	r3
    socketInit();
   17b28:	4b18      	ldr	r3, [pc, #96]	; (17b8c <MQTT_InitRoutine+0x7c>)
   17b2a:	4798      	blx	r3
    /* Connect to router. */
    if (!(mqtt_inst.isConnected)) {
   17b2c:	4b18      	ldr	r3, [pc, #96]	; (17b90 <MQTT_InitRoutine+0x80>)
   17b2e:	2234      	movs	r2, #52	; 0x34
   17b30:	5c9b      	ldrb	r3, [r3, r2]
   17b32:	2201      	movs	r2, #1
   17b34:	4053      	eors	r3, r2
   17b36:	b2db      	uxtb	r3, r3
   17b38:	2b00      	cmp	r3, #0
   17b3a:	d00c      	beq.n	17b56 <MQTT_InitRoutine+0x46>
        if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   17b3c:	4a15      	ldr	r2, [pc, #84]	; (17b94 <MQTT_InitRoutine+0x84>)
   17b3e:	4b14      	ldr	r3, [pc, #80]	; (17b90 <MQTT_InitRoutine+0x80>)
   17b40:	0011      	movs	r1, r2
   17b42:	0018      	movs	r0, r3
   17b44:	4b14      	ldr	r3, [pc, #80]	; (17b98 <MQTT_InitRoutine+0x88>)
   17b46:	4798      	blx	r3
   17b48:	1e03      	subs	r3, r0, #0
   17b4a:	d004      	beq.n	17b56 <MQTT_InitRoutine+0x46>
            LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   17b4c:	4b13      	ldr	r3, [pc, #76]	; (17b9c <MQTT_InitRoutine+0x8c>)
   17b4e:	0019      	movs	r1, r3
   17b50:	2001      	movs	r0, #1
   17b52:	4b13      	ldr	r3, [pc, #76]	; (17ba0 <MQTT_InitRoutine+0x90>)
   17b54:	4798      	blx	r3
        }
    }

    if (mqtt_inst.isConnected) {
   17b56:	4b0e      	ldr	r3, [pc, #56]	; (17b90 <MQTT_InitRoutine+0x80>)
   17b58:	2234      	movs	r2, #52	; 0x34
   17b5a:	5c9b      	ldrb	r3, [r3, r2]
   17b5c:	2b00      	cmp	r3, #0
   17b5e:	d004      	beq.n	17b6a <MQTT_InitRoutine+0x5a>
        LogMessage(LOG_DEBUG_LVL, "Connected to MQTT Broker!\r\n");
   17b60:	4b10      	ldr	r3, [pc, #64]	; (17ba4 <MQTT_InitRoutine+0x94>)
   17b62:	0019      	movs	r1, r3
   17b64:	2001      	movs	r0, #1
   17b66:	4b0e      	ldr	r3, [pc, #56]	; (17ba0 <MQTT_InitRoutine+0x90>)
   17b68:	4798      	blx	r3
    }
    wifiStateMachine = WIFI_MQTT_HANDLE;
   17b6a:	4b0f      	ldr	r3, [pc, #60]	; (17ba8 <MQTT_InitRoutine+0x98>)
   17b6c:	2201      	movs	r2, #1
   17b6e:	701a      	strb	r2, [r3, #0]
}
   17b70:	46c0      	nop			; (mov r8, r8)
   17b72:	46bd      	mov	sp, r7
   17b74:	bd80      	pop	{r7, pc}
   17b76:	46c0      	nop			; (mov r8, r8)
   17b78:	00026235 	.word	0x00026235
   17b7c:	000177fd 	.word	0x000177fd
   17b80:	00017459 	.word	0x00017459
   17b84:	00017425 	.word	0x00017425
   17b88:	0002627d 	.word	0x0002627d
   17b8c:	000261e5 	.word	0x000261e5
   17b90:	200008bc 	.word	0x200008bc
   17b94:	00037140 	.word	0x00037140
   17b98:	00030511 	.word	0x00030511
   17b9c:	00037540 	.word	0x00037540
   17ba0:	0001eb25 	.word	0x0001eb25
   17ba4:	0003796c 	.word	0x0003796c
   17ba8:	20000644 	.word	0x20000644

00017bac <MQTT_HandleTransactions>:
 * @brief	Routine to handle MQTT transactions
 * @note

*/
static void MQTT_HandleTransactions(void)
{
   17bac:	b580      	push	{r7, lr}
   17bae:	af00      	add	r7, sp, #0
    /* Handle pending events from network controller. */
    m2m_wifi_handle_events(NULL);
   17bb0:	2000      	movs	r0, #0
   17bb2:	4b0c      	ldr	r3, [pc, #48]	; (17be4 <MQTT_HandleTransactions+0x38>)
   17bb4:	4798      	blx	r3
    sw_timer_task(&swt_module_inst);
   17bb6:	4b0c      	ldr	r3, [pc, #48]	; (17be8 <MQTT_HandleTransactions+0x3c>)
   17bb8:	0018      	movs	r0, r3
   17bba:	4b0c      	ldr	r3, [pc, #48]	; (17bec <MQTT_HandleTransactions+0x40>)
   17bbc:	4798      	blx	r3

    // Check if data has to be sent!
    MQTT_HandleGameMessages();
   17bbe:	4b0c      	ldr	r3, [pc, #48]	; (17bf0 <MQTT_HandleTransactions+0x44>)
   17bc0:	4798      	blx	r3
    MQTT_HandleImuMessages();
   17bc2:	4b0c      	ldr	r3, [pc, #48]	; (17bf4 <MQTT_HandleTransactions+0x48>)
   17bc4:	4798      	blx	r3
	MQTT_HandleTestMessages();
   17bc6:	4b0c      	ldr	r3, [pc, #48]	; (17bf8 <MQTT_HandleTransactions+0x4c>)
   17bc8:	4798      	blx	r3

    // Handle MQTT messages
    if (mqtt_inst.isConnected) mqtt_yield(&mqtt_inst, 100);
   17bca:	4b0c      	ldr	r3, [pc, #48]	; (17bfc <MQTT_HandleTransactions+0x50>)
   17bcc:	2234      	movs	r2, #52	; 0x34
   17bce:	5c9b      	ldrb	r3, [r3, r2]
   17bd0:	2b00      	cmp	r3, #0
   17bd2:	d004      	beq.n	17bde <MQTT_HandleTransactions+0x32>
   17bd4:	4b09      	ldr	r3, [pc, #36]	; (17bfc <MQTT_HandleTransactions+0x50>)
   17bd6:	2164      	movs	r1, #100	; 0x64
   17bd8:	0018      	movs	r0, r3
   17bda:	4b09      	ldr	r3, [pc, #36]	; (17c00 <MQTT_HandleTransactions+0x54>)
   17bdc:	4798      	blx	r3
}
   17bde:	46c0      	nop			; (mov r8, r8)
   17be0:	46bd      	mov	sp, r7
   17be2:	bd80      	pop	{r7, pc}
   17be4:	00022c79 	.word	0x00022c79
   17be8:	200044f0 	.word	0x200044f0
   17bec:	0003336d 	.word	0x0003336d
   17bf0:	00017d05 	.word	0x00017d05
   17bf4:	00017c05 	.word	0x00017c05
   17bf8:	00017c91 	.word	0x00017c91
   17bfc:	200008bc 	.word	0x200008bc
   17c00:	00030741 	.word	0x00030741

00017c04 <MQTT_HandleImuMessages>:

static void MQTT_HandleImuMessages(void)
{
   17c04:	b590      	push	{r4, r7, lr}
   17c06:	b085      	sub	sp, #20
   17c08:	af02      	add	r7, sp, #8
    struct ImuDataPacket imuDataVar;
    if (pdPASS == xQueueReceive(xQueueImuBuffer, &imuDataVar, 0)) {
   17c0a:	4b18      	ldr	r3, [pc, #96]	; (17c6c <MQTT_HandleImuMessages+0x68>)
   17c0c:	681b      	ldr	r3, [r3, #0]
   17c0e:	0039      	movs	r1, r7
   17c10:	2200      	movs	r2, #0
   17c12:	0018      	movs	r0, r3
   17c14:	4b16      	ldr	r3, [pc, #88]	; (17c70 <MQTT_HandleImuMessages+0x6c>)
   17c16:	4798      	blx	r3
   17c18:	0003      	movs	r3, r0
   17c1a:	2b01      	cmp	r3, #1
   17c1c:	d121      	bne.n	17c62 <MQTT_HandleImuMessages+0x5e>
        snprintf(mqtt_msg, 63, "{\"imux\":%d, \"imuy\": %d, \"imuz\": %d}", imuDataVar.xmg, imuDataVar.ymg, imuDataVar.zmg);
   17c1e:	003b      	movs	r3, r7
   17c20:	2200      	movs	r2, #0
   17c22:	5e9b      	ldrsh	r3, [r3, r2]
   17c24:	001c      	movs	r4, r3
   17c26:	003b      	movs	r3, r7
   17c28:	2202      	movs	r2, #2
   17c2a:	5e9b      	ldrsh	r3, [r3, r2]
   17c2c:	0019      	movs	r1, r3
   17c2e:	003b      	movs	r3, r7
   17c30:	2204      	movs	r2, #4
   17c32:	5e9b      	ldrsh	r3, [r3, r2]
   17c34:	4a0f      	ldr	r2, [pc, #60]	; (17c74 <MQTT_HandleImuMessages+0x70>)
   17c36:	4810      	ldr	r0, [pc, #64]	; (17c78 <MQTT_HandleImuMessages+0x74>)
   17c38:	9301      	str	r3, [sp, #4]
   17c3a:	9100      	str	r1, [sp, #0]
   17c3c:	0023      	movs	r3, r4
   17c3e:	213f      	movs	r1, #63	; 0x3f
   17c40:	4c0e      	ldr	r4, [pc, #56]	; (17c7c <MQTT_HandleImuMessages+0x78>)
   17c42:	47a0      	blx	r4
        mqtt_publish(&mqtt_inst, IMU_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   17c44:	4b0c      	ldr	r3, [pc, #48]	; (17c78 <MQTT_HandleImuMessages+0x74>)
   17c46:	0018      	movs	r0, r3
   17c48:	4b0d      	ldr	r3, [pc, #52]	; (17c80 <MQTT_HandleImuMessages+0x7c>)
   17c4a:	4798      	blx	r3
   17c4c:	0004      	movs	r4, r0
   17c4e:	4a0a      	ldr	r2, [pc, #40]	; (17c78 <MQTT_HandleImuMessages+0x74>)
   17c50:	490c      	ldr	r1, [pc, #48]	; (17c84 <MQTT_HandleImuMessages+0x80>)
   17c52:	480d      	ldr	r0, [pc, #52]	; (17c88 <MQTT_HandleImuMessages+0x84>)
   17c54:	2300      	movs	r3, #0
   17c56:	9301      	str	r3, [sp, #4]
   17c58:	2301      	movs	r3, #1
   17c5a:	9300      	str	r3, [sp, #0]
   17c5c:	0023      	movs	r3, r4
   17c5e:	4c0b      	ldr	r4, [pc, #44]	; (17c8c <MQTT_HandleImuMessages+0x88>)
   17c60:	47a0      	blx	r4
    }
}
   17c62:	46c0      	nop			; (mov r8, r8)
   17c64:	46bd      	mov	sp, r7
   17c66:	b003      	add	sp, #12
   17c68:	bd90      	pop	{r4, r7, pc}
   17c6a:	46c0      	nop			; (mov r8, r8)
   17c6c:	20000650 	.word	0x20000650
   17c70:	0001bc39 	.word	0x0001bc39
   17c74:	00037988 	.word	0x00037988
   17c78:	20000024 	.word	0x20000024
   17c7c:	00035961 	.word	0x00035961
   17c80:	00035abf 	.word	0x00035abf
   17c84:	000379ac 	.word	0x000379ac
   17c88:	200008bc 	.word	0x200008bc
   17c8c:	0003068d 	.word	0x0003068d

00017c90 <MQTT_HandleTestMessages>:

static void MQTT_HandleTestMessages(void)
{
   17c90:	b590      	push	{r4, r7, lr}
   17c92:	b085      	sub	sp, #20
   17c94:	af02      	add	r7, sp, #8
	struct TestPacket TestDataVar;
	if (pdPASS == xQueueReceive(xQueueTestBuffer, &TestDataVar, 0)) {
   17c96:	4b12      	ldr	r3, [pc, #72]	; (17ce0 <MQTT_HandleTestMessages+0x50>)
   17c98:	681b      	ldr	r3, [r3, #0]
   17c9a:	1d39      	adds	r1, r7, #4
   17c9c:	2200      	movs	r2, #0
   17c9e:	0018      	movs	r0, r3
   17ca0:	4b10      	ldr	r3, [pc, #64]	; (17ce4 <MQTT_HandleTestMessages+0x54>)
   17ca2:	4798      	blx	r3
   17ca4:	0003      	movs	r3, r0
   17ca6:	2b01      	cmp	r3, #1
   17ca8:	d115      	bne.n	17cd6 <MQTT_HandleTestMessages+0x46>
		snprintf(mqtt_msg, 63, "{\"test\":%d }", TestDataVar.test);
   17caa:	1d3b      	adds	r3, r7, #4
   17cac:	781b      	ldrb	r3, [r3, #0]
   17cae:	4a0e      	ldr	r2, [pc, #56]	; (17ce8 <MQTT_HandleTestMessages+0x58>)
   17cb0:	480e      	ldr	r0, [pc, #56]	; (17cec <MQTT_HandleTestMessages+0x5c>)
   17cb2:	213f      	movs	r1, #63	; 0x3f
   17cb4:	4c0e      	ldr	r4, [pc, #56]	; (17cf0 <MQTT_HandleTestMessages+0x60>)
   17cb6:	47a0      	blx	r4
		mqtt_publish(&mqtt_inst, TEST_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   17cb8:	4b0c      	ldr	r3, [pc, #48]	; (17cec <MQTT_HandleTestMessages+0x5c>)
   17cba:	0018      	movs	r0, r3
   17cbc:	4b0d      	ldr	r3, [pc, #52]	; (17cf4 <MQTT_HandleTestMessages+0x64>)
   17cbe:	4798      	blx	r3
   17cc0:	0004      	movs	r4, r0
   17cc2:	4a0a      	ldr	r2, [pc, #40]	; (17cec <MQTT_HandleTestMessages+0x5c>)
   17cc4:	490c      	ldr	r1, [pc, #48]	; (17cf8 <MQTT_HandleTestMessages+0x68>)
   17cc6:	480d      	ldr	r0, [pc, #52]	; (17cfc <MQTT_HandleTestMessages+0x6c>)
   17cc8:	2300      	movs	r3, #0
   17cca:	9301      	str	r3, [sp, #4]
   17ccc:	2301      	movs	r3, #1
   17cce:	9300      	str	r3, [sp, #0]
   17cd0:	0023      	movs	r3, r4
   17cd2:	4c0b      	ldr	r4, [pc, #44]	; (17d00 <MQTT_HandleTestMessages+0x70>)
   17cd4:	47a0      	blx	r4
	}
}
   17cd6:	46c0      	nop			; (mov r8, r8)
   17cd8:	46bd      	mov	sp, r7
   17cda:	b003      	add	sp, #12
   17cdc:	bd90      	pop	{r4, r7, pc}
   17cde:	46c0      	nop			; (mov r8, r8)
   17ce0:	20000658 	.word	0x20000658
   17ce4:	0001bc39 	.word	0x0001bc39
   17ce8:	000379c0 	.word	0x000379c0
   17cec:	20000024 	.word	0x20000024
   17cf0:	00035961 	.word	0x00035961
   17cf4:	00035abf 	.word	0x00035abf
   17cf8:	000379d0 	.word	0x000379d0
   17cfc:	200008bc 	.word	0x200008bc
   17d00:	0003068d 	.word	0x0003068d

00017d04 <MQTT_HandleGameMessages>:

static void MQTT_HandleGameMessages(void)
{
   17d04:	b590      	push	{r4, r7, lr}
   17d06:	b08b      	sub	sp, #44	; 0x2c
   17d08:	af02      	add	r7, sp, #8
    struct GameDataPacket gamePacket;
    if (pdPASS == xQueueReceive(xQueueGameBuffer, &gamePacket, 0)) {
   17d0a:	4b39      	ldr	r3, [pc, #228]	; (17df0 <MQTT_HandleGameMessages+0xec>)
   17d0c:	681b      	ldr	r3, [r3, #0]
   17d0e:	2208      	movs	r2, #8
   17d10:	18b9      	adds	r1, r7, r2
   17d12:	2200      	movs	r2, #0
   17d14:	0018      	movs	r0, r3
   17d16:	4b37      	ldr	r3, [pc, #220]	; (17df4 <MQTT_HandleGameMessages+0xf0>)
   17d18:	4798      	blx	r3
   17d1a:	0003      	movs	r3, r0
   17d1c:	2b01      	cmp	r3, #1
   17d1e:	d163      	bne.n	17de8 <MQTT_HandleGameMessages+0xe4>
        snprintf(mqtt_msg, 63, "{\"game\":[");
   17d20:	4b35      	ldr	r3, [pc, #212]	; (17df8 <MQTT_HandleGameMessages+0xf4>)
   17d22:	4a36      	ldr	r2, [pc, #216]	; (17dfc <MQTT_HandleGameMessages+0xf8>)
   17d24:	ca03      	ldmia	r2!, {r0, r1}
   17d26:	c303      	stmia	r3!, {r0, r1}
   17d28:	8812      	ldrh	r2, [r2, #0]
   17d2a:	801a      	strh	r2, [r3, #0]
        for (int iter = 0; iter < GAME_SIZE; iter++) {
   17d2c:	2300      	movs	r3, #0
   17d2e:	61fb      	str	r3, [r7, #28]
   17d30:	e02d      	b.n	17d8e <MQTT_HandleGameMessages+0x8a>
            char numGame[5];
            if (gamePacket.game[iter] != 0xFF) {
   17d32:	2308      	movs	r3, #8
   17d34:	18fa      	adds	r2, r7, r3
   17d36:	69fb      	ldr	r3, [r7, #28]
   17d38:	18d3      	adds	r3, r2, r3
   17d3a:	781b      	ldrb	r3, [r3, #0]
   17d3c:	2bff      	cmp	r3, #255	; 0xff
   17d3e:	d02a      	beq.n	17d96 <MQTT_HandleGameMessages+0x92>
                snprintf(numGame, 3, "%d", gamePacket.game[iter]);
   17d40:	2308      	movs	r3, #8
   17d42:	18fa      	adds	r2, r7, r3
   17d44:	69fb      	ldr	r3, [r7, #28]
   17d46:	18d3      	adds	r3, r2, r3
   17d48:	781b      	ldrb	r3, [r3, #0]
   17d4a:	4a2d      	ldr	r2, [pc, #180]	; (17e00 <MQTT_HandleGameMessages+0xfc>)
   17d4c:	0038      	movs	r0, r7
   17d4e:	2103      	movs	r1, #3
   17d50:	4c2c      	ldr	r4, [pc, #176]	; (17e04 <MQTT_HandleGameMessages+0x100>)
   17d52:	47a0      	blx	r4
                strcat(mqtt_msg, numGame);
   17d54:	003a      	movs	r2, r7
   17d56:	4b28      	ldr	r3, [pc, #160]	; (17df8 <MQTT_HandleGameMessages+0xf4>)
   17d58:	0011      	movs	r1, r2
   17d5a:	0018      	movs	r0, r3
   17d5c:	4b2a      	ldr	r3, [pc, #168]	; (17e08 <MQTT_HandleGameMessages+0x104>)
   17d5e:	4798      	blx	r3
                if (gamePacket.game[iter + 1] != 0xFF && iter + 1 < GAME_SIZE) {
   17d60:	69fb      	ldr	r3, [r7, #28]
   17d62:	3301      	adds	r3, #1
   17d64:	2208      	movs	r2, #8
   17d66:	18ba      	adds	r2, r7, r2
   17d68:	5cd3      	ldrb	r3, [r2, r3]
   17d6a:	2bff      	cmp	r3, #255	; 0xff
   17d6c:	d00c      	beq.n	17d88 <MQTT_HandleGameMessages+0x84>
   17d6e:	69fb      	ldr	r3, [r7, #28]
   17d70:	3301      	adds	r3, #1
   17d72:	2b13      	cmp	r3, #19
   17d74:	dc08      	bgt.n	17d88 <MQTT_HandleGameMessages+0x84>
                    snprintf(numGame, 5, ",");
   17d76:	003b      	movs	r3, r7
   17d78:	222c      	movs	r2, #44	; 0x2c
   17d7a:	801a      	strh	r2, [r3, #0]
                    strcat(mqtt_msg, numGame);
   17d7c:	003a      	movs	r2, r7
   17d7e:	4b1e      	ldr	r3, [pc, #120]	; (17df8 <MQTT_HandleGameMessages+0xf4>)
   17d80:	0011      	movs	r1, r2
   17d82:	0018      	movs	r0, r3
   17d84:	4b20      	ldr	r3, [pc, #128]	; (17e08 <MQTT_HandleGameMessages+0x104>)
   17d86:	4798      	blx	r3
        for (int iter = 0; iter < GAME_SIZE; iter++) {
   17d88:	69fb      	ldr	r3, [r7, #28]
   17d8a:	3301      	adds	r3, #1
   17d8c:	61fb      	str	r3, [r7, #28]
   17d8e:	69fb      	ldr	r3, [r7, #28]
   17d90:	2b13      	cmp	r3, #19
   17d92:	ddce      	ble.n	17d32 <MQTT_HandleGameMessages+0x2e>
   17d94:	e000      	b.n	17d98 <MQTT_HandleGameMessages+0x94>
                }
            } else {
                break;
   17d96:	46c0      	nop			; (mov r8, r8)
            }
        }
        strcat(mqtt_msg, "]}");
   17d98:	4b17      	ldr	r3, [pc, #92]	; (17df8 <MQTT_HandleGameMessages+0xf4>)
   17d9a:	0018      	movs	r0, r3
   17d9c:	4b1b      	ldr	r3, [pc, #108]	; (17e0c <MQTT_HandleGameMessages+0x108>)
   17d9e:	4798      	blx	r3
   17da0:	0003      	movs	r3, r0
   17da2:	001a      	movs	r2, r3
   17da4:	4b14      	ldr	r3, [pc, #80]	; (17df8 <MQTT_HandleGameMessages+0xf4>)
   17da6:	18d2      	adds	r2, r2, r3
   17da8:	4b19      	ldr	r3, [pc, #100]	; (17e10 <MQTT_HandleGameMessages+0x10c>)
   17daa:	0010      	movs	r0, r2
   17dac:	0019      	movs	r1, r3
   17dae:	2303      	movs	r3, #3
   17db0:	001a      	movs	r2, r3
   17db2:	4b18      	ldr	r3, [pc, #96]	; (17e14 <MQTT_HandleGameMessages+0x110>)
   17db4:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, mqtt_msg);
   17db6:	4b10      	ldr	r3, [pc, #64]	; (17df8 <MQTT_HandleGameMessages+0xf4>)
   17db8:	0019      	movs	r1, r3
   17dba:	2001      	movs	r0, #1
   17dbc:	4b16      	ldr	r3, [pc, #88]	; (17e18 <MQTT_HandleGameMessages+0x114>)
   17dbe:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n");
   17dc0:	4b16      	ldr	r3, [pc, #88]	; (17e1c <MQTT_HandleGameMessages+0x118>)
   17dc2:	0019      	movs	r1, r3
   17dc4:	2001      	movs	r0, #1
   17dc6:	4b14      	ldr	r3, [pc, #80]	; (17e18 <MQTT_HandleGameMessages+0x114>)
   17dc8:	4798      	blx	r3
        mqtt_publish(&mqtt_inst, GAME_TOPIC_OUT, mqtt_msg, strlen(mqtt_msg), 1, 0);
   17dca:	4b0b      	ldr	r3, [pc, #44]	; (17df8 <MQTT_HandleGameMessages+0xf4>)
   17dcc:	0018      	movs	r0, r3
   17dce:	4b0f      	ldr	r3, [pc, #60]	; (17e0c <MQTT_HandleGameMessages+0x108>)
   17dd0:	4798      	blx	r3
   17dd2:	0004      	movs	r4, r0
   17dd4:	4a08      	ldr	r2, [pc, #32]	; (17df8 <MQTT_HandleGameMessages+0xf4>)
   17dd6:	4912      	ldr	r1, [pc, #72]	; (17e20 <MQTT_HandleGameMessages+0x11c>)
   17dd8:	4812      	ldr	r0, [pc, #72]	; (17e24 <MQTT_HandleGameMessages+0x120>)
   17dda:	2300      	movs	r3, #0
   17ddc:	9301      	str	r3, [sp, #4]
   17dde:	2301      	movs	r3, #1
   17de0:	9300      	str	r3, [sp, #0]
   17de2:	0023      	movs	r3, r4
   17de4:	4c10      	ldr	r4, [pc, #64]	; (17e28 <MQTT_HandleGameMessages+0x124>)
   17de6:	47a0      	blx	r4
    }
}
   17de8:	46c0      	nop			; (mov r8, r8)
   17dea:	46bd      	mov	sp, r7
   17dec:	b009      	add	sp, #36	; 0x24
   17dee:	bd90      	pop	{r4, r7, pc}
   17df0:	2000064c 	.word	0x2000064c
   17df4:	0001bc39 	.word	0x0001bc39
   17df8:	20000024 	.word	0x20000024
   17dfc:	000376dc 	.word	0x000376dc
   17e00:	000379e4 	.word	0x000379e4
   17e04:	00035961 	.word	0x00035961
   17e08:	00035a45 	.word	0x00035a45
   17e0c:	00035abf 	.word	0x00035abf
   17e10:	000379e8 	.word	0x000379e8
   17e14:	000356d1 	.word	0x000356d1
   17e18:	0001eb25 	.word	0x0001eb25
   17e1c:	000379ec 	.word	0x000379ec
   17e20:	000379f0 	.word	0x000379f0
   17e24:	200008bc 	.word	0x200008bc
   17e28:	0003068d 	.word	0x0003068d

00017e2c <vWifiTask>:
 * Application entry point.
 *
 * \return program return value.
 */
void vWifiTask(void *pvParameters)
{
   17e2c:	b590      	push	{r4, r7, lr}
   17e2e:	b08d      	sub	sp, #52	; 0x34
   17e30:	af02      	add	r7, sp, #8
   17e32:	6078      	str	r0, [r7, #4]
    tstrWifiInitParam param;
    int8_t ret;
    vTaskDelay(100);
   17e34:	2064      	movs	r0, #100	; 0x64
   17e36:	4b7f      	ldr	r3, [pc, #508]	; (18034 <vWifiTask+0x208>)
   17e38:	4798      	blx	r3
    init_state();
   17e3a:	4b7f      	ldr	r3, [pc, #508]	; (18038 <vWifiTask+0x20c>)
   17e3c:	4798      	blx	r3
    // Create buffers to send data
    xQueueWifiState = xQueueCreate(5, sizeof(uint32_t));
   17e3e:	2200      	movs	r2, #0
   17e40:	2104      	movs	r1, #4
   17e42:	2005      	movs	r0, #5
   17e44:	4b7d      	ldr	r3, [pc, #500]	; (1803c <vWifiTask+0x210>)
   17e46:	4798      	blx	r3
   17e48:	0002      	movs	r2, r0
   17e4a:	4b7d      	ldr	r3, [pc, #500]	; (18040 <vWifiTask+0x214>)
   17e4c:	601a      	str	r2, [r3, #0]
    xQueueImuBuffer = xQueueCreate(5, sizeof(struct ImuDataPacket));
   17e4e:	2200      	movs	r2, #0
   17e50:	2106      	movs	r1, #6
   17e52:	2005      	movs	r0, #5
   17e54:	4b79      	ldr	r3, [pc, #484]	; (1803c <vWifiTask+0x210>)
   17e56:	4798      	blx	r3
   17e58:	0002      	movs	r2, r0
   17e5a:	4b7a      	ldr	r3, [pc, #488]	; (18044 <vWifiTask+0x218>)
   17e5c:	601a      	str	r2, [r3, #0]
    xQueueGameBuffer = xQueueCreate(2, sizeof(struct GameDataPacket));
   17e5e:	2200      	movs	r2, #0
   17e60:	2114      	movs	r1, #20
   17e62:	2002      	movs	r0, #2
   17e64:	4b75      	ldr	r3, [pc, #468]	; (1803c <vWifiTask+0x210>)
   17e66:	4798      	blx	r3
   17e68:	0002      	movs	r2, r0
   17e6a:	4b77      	ldr	r3, [pc, #476]	; (18048 <vWifiTask+0x21c>)
   17e6c:	601a      	str	r2, [r3, #0]
	xQueueTestBuffer = xQueueCreate(5, sizeof(struct TestPacket));
   17e6e:	2200      	movs	r2, #0
   17e70:	2101      	movs	r1, #1
   17e72:	2005      	movs	r0, #5
   17e74:	4b71      	ldr	r3, [pc, #452]	; (1803c <vWifiTask+0x210>)
   17e76:	4798      	blx	r3
   17e78:	0002      	movs	r2, r0
   17e7a:	4b74      	ldr	r3, [pc, #464]	; (1804c <vWifiTask+0x220>)
   17e7c:	601a      	str	r2, [r3, #0]
    xQueueDistanceBuffer = xQueueCreate(5, sizeof(uint16_t));
   17e7e:	2200      	movs	r2, #0
   17e80:	2102      	movs	r1, #2
   17e82:	2005      	movs	r0, #5
   17e84:	4b6d      	ldr	r3, [pc, #436]	; (1803c <vWifiTask+0x210>)
   17e86:	4798      	blx	r3
   17e88:	0002      	movs	r2, r0
   17e8a:	4b71      	ldr	r3, [pc, #452]	; (18050 <vWifiTask+0x224>)
   17e8c:	601a      	str	r2, [r3, #0]

    if (xQueueWifiState == NULL || xQueueImuBuffer == NULL || xQueueGameBuffer == NULL || xQueueDistanceBuffer == NULL || xQueueTestBuffer == NULL) {
   17e8e:	4b6c      	ldr	r3, [pc, #432]	; (18040 <vWifiTask+0x214>)
   17e90:	681b      	ldr	r3, [r3, #0]
   17e92:	2b00      	cmp	r3, #0
   17e94:	d00f      	beq.n	17eb6 <vWifiTask+0x8a>
   17e96:	4b6b      	ldr	r3, [pc, #428]	; (18044 <vWifiTask+0x218>)
   17e98:	681b      	ldr	r3, [r3, #0]
   17e9a:	2b00      	cmp	r3, #0
   17e9c:	d00b      	beq.n	17eb6 <vWifiTask+0x8a>
   17e9e:	4b6a      	ldr	r3, [pc, #424]	; (18048 <vWifiTask+0x21c>)
   17ea0:	681b      	ldr	r3, [r3, #0]
   17ea2:	2b00      	cmp	r3, #0
   17ea4:	d007      	beq.n	17eb6 <vWifiTask+0x8a>
   17ea6:	4b6a      	ldr	r3, [pc, #424]	; (18050 <vWifiTask+0x224>)
   17ea8:	681b      	ldr	r3, [r3, #0]
   17eaa:	2b00      	cmp	r3, #0
   17eac:	d003      	beq.n	17eb6 <vWifiTask+0x8a>
   17eae:	4b67      	ldr	r3, [pc, #412]	; (1804c <vWifiTask+0x220>)
   17eb0:	681b      	ldr	r3, [r3, #0]
   17eb2:	2b00      	cmp	r3, #0
   17eb4:	d103      	bne.n	17ebe <vWifiTask+0x92>
        SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
   17eb6:	4b67      	ldr	r3, [pc, #412]	; (18054 <vWifiTask+0x228>)
   17eb8:	0018      	movs	r0, r3
   17eba:	4b67      	ldr	r3, [pc, #412]	; (18058 <vWifiTask+0x22c>)
   17ebc:	4798      	blx	r3
    }

    SerialConsoleWriteString("ESE516 - Wifi Init Code\r\n");
   17ebe:	4b67      	ldr	r3, [pc, #412]	; (1805c <vWifiTask+0x230>)
   17ec0:	0018      	movs	r0, r3
   17ec2:	4b65      	ldr	r3, [pc, #404]	; (18058 <vWifiTask+0x22c>)
   17ec4:	4798      	blx	r3
    /* Initialize the Timer. */
    configure_timer();
   17ec6:	4b66      	ldr	r3, [pc, #408]	; (18060 <vWifiTask+0x234>)
   17ec8:	4798      	blx	r3

    /* Initialize the HTTP client service. */
    configure_http_client();
   17eca:	4b66      	ldr	r3, [pc, #408]	; (18064 <vWifiTask+0x238>)
   17ecc:	4798      	blx	r3

    /* Initialize the MQTT service. */
    configure_mqtt();
   17ece:	4b66      	ldr	r3, [pc, #408]	; (18068 <vWifiTask+0x23c>)
   17ed0:	4798      	blx	r3

    /* Initialize SD/MMC storage. */
    init_storage();
   17ed2:	4b66      	ldr	r3, [pc, #408]	; (1806c <vWifiTask+0x240>)
   17ed4:	4798      	blx	r3

    /*Initialize BUTTON 0 as an external interrupt*/
    configure_extint_channel();
   17ed6:	4b66      	ldr	r3, [pc, #408]	; (18070 <vWifiTask+0x244>)
   17ed8:	4798      	blx	r3
    configure_extint_callbacks();
   17eda:	4b66      	ldr	r3, [pc, #408]	; (18074 <vWifiTask+0x248>)
   17edc:	4798      	blx	r3

    /* Initialize Wi-Fi parameters structure. */
    memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   17ede:	230c      	movs	r3, #12
   17ee0:	18fb      	adds	r3, r7, r3
   17ee2:	2218      	movs	r2, #24
   17ee4:	2100      	movs	r1, #0
   17ee6:	0018      	movs	r0, r3
   17ee8:	4b63      	ldr	r3, [pc, #396]	; (18078 <vWifiTask+0x24c>)
   17eea:	4798      	blx	r3

    nm_bsp_init();
   17eec:	4b63      	ldr	r3, [pc, #396]	; (1807c <vWifiTask+0x250>)
   17eee:	4798      	blx	r3

    /* Initialize Wi-Fi driver with data and status callbacks. */
    param.pfAppWifiCb = wifi_cb;
   17ef0:	230c      	movs	r3, #12
   17ef2:	18fb      	adds	r3, r7, r3
   17ef4:	4a62      	ldr	r2, [pc, #392]	; (18080 <vWifiTask+0x254>)
   17ef6:	601a      	str	r2, [r3, #0]
    ret = m2m_wifi_init(&param);
   17ef8:	2327      	movs	r3, #39	; 0x27
   17efa:	18fc      	adds	r4, r7, r3
   17efc:	230c      	movs	r3, #12
   17efe:	18fb      	adds	r3, r7, r3
   17f00:	0018      	movs	r0, r3
   17f02:	4b60      	ldr	r3, [pc, #384]	; (18084 <vWifiTask+0x258>)
   17f04:	4798      	blx	r3
   17f06:	0003      	movs	r3, r0
   17f08:	7023      	strb	r3, [r4, #0]
    if (M2M_SUCCESS != ret) {
   17f0a:	2327      	movs	r3, #39	; 0x27
   17f0c:	18fb      	adds	r3, r7, r3
   17f0e:	781b      	ldrb	r3, [r3, #0]
   17f10:	b25b      	sxtb	r3, r3
   17f12:	2b00      	cmp	r3, #0
   17f14:	d009      	beq.n	17f2a <vWifiTask+0xfe>
        LogMessage(LOG_DEBUG_LVL, "main: m2m_wifi_init call error! (res %d)\r\n", ret);
   17f16:	2327      	movs	r3, #39	; 0x27
   17f18:	18fb      	adds	r3, r7, r3
   17f1a:	2200      	movs	r2, #0
   17f1c:	569a      	ldrsb	r2, [r3, r2]
   17f1e:	4b5a      	ldr	r3, [pc, #360]	; (18088 <vWifiTask+0x25c>)
   17f20:	0019      	movs	r1, r3
   17f22:	2001      	movs	r0, #1
   17f24:	4b59      	ldr	r3, [pc, #356]	; (1808c <vWifiTask+0x260>)
   17f26:	4798      	blx	r3
        while (1) {
   17f28:	e7fe      	b.n	17f28 <vWifiTask+0xfc>
        }
    }

    LogMessage(LOG_DEBUG_LVL, "main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   17f2a:	4a59      	ldr	r2, [pc, #356]	; (18090 <vWifiTask+0x264>)
   17f2c:	4b59      	ldr	r3, [pc, #356]	; (18094 <vWifiTask+0x268>)
   17f2e:	0019      	movs	r1, r3
   17f30:	2001      	movs	r0, #1
   17f32:	4b56      	ldr	r3, [pc, #344]	; (1808c <vWifiTask+0x260>)
   17f34:	4798      	blx	r3

    // Re-enable socket for MQTT Transfer
    socketInit();
   17f36:	4b58      	ldr	r3, [pc, #352]	; (18098 <vWifiTask+0x26c>)
   17f38:	4798      	blx	r3
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   17f3a:	4a58      	ldr	r2, [pc, #352]	; (1809c <vWifiTask+0x270>)
   17f3c:	4b58      	ldr	r3, [pc, #352]	; (180a0 <vWifiTask+0x274>)
   17f3e:	0011      	movs	r1, r2
   17f40:	0018      	movs	r0, r3
   17f42:	4b58      	ldr	r3, [pc, #352]	; (180a4 <vWifiTask+0x278>)
   17f44:	4798      	blx	r3

    m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   17f46:	4a58      	ldr	r2, [pc, #352]	; (180a8 <vWifiTask+0x27c>)
   17f48:	4851      	ldr	r0, [pc, #324]	; (18090 <vWifiTask+0x264>)
   17f4a:	23ff      	movs	r3, #255	; 0xff
   17f4c:	9300      	str	r3, [sp, #0]
   17f4e:	0013      	movs	r3, r2
   17f50:	2201      	movs	r2, #1
   17f52:	210a      	movs	r1, #10
   17f54:	4c55      	ldr	r4, [pc, #340]	; (180ac <vWifiTask+0x280>)
   17f56:	47a0      	blx	r4

    while (!(is_state_set(WIFI_CONNECTED))) {
   17f58:	e006      	b.n	17f68 <vWifiTask+0x13c>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   17f5a:	2000      	movs	r0, #0
   17f5c:	4b54      	ldr	r3, [pc, #336]	; (180b0 <vWifiTask+0x284>)
   17f5e:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   17f60:	4b54      	ldr	r3, [pc, #336]	; (180b4 <vWifiTask+0x288>)
   17f62:	0018      	movs	r0, r3
   17f64:	4b54      	ldr	r3, [pc, #336]	; (180b8 <vWifiTask+0x28c>)
   17f66:	4798      	blx	r3
    while (!(is_state_set(WIFI_CONNECTED))) {
   17f68:	2002      	movs	r0, #2
   17f6a:	4b54      	ldr	r3, [pc, #336]	; (180bc <vWifiTask+0x290>)
   17f6c:	4798      	blx	r3
   17f6e:	0003      	movs	r3, r0
   17f70:	001a      	movs	r2, r3
   17f72:	2301      	movs	r3, #1
   17f74:	4053      	eors	r3, r2
   17f76:	b2db      	uxtb	r3, r3
   17f78:	2b00      	cmp	r3, #0
   17f7a:	d1ee      	bne.n	17f5a <vWifiTask+0x12e>
    }

    vTaskDelay(1000);
   17f7c:	23fa      	movs	r3, #250	; 0xfa
   17f7e:	009b      	lsls	r3, r3, #2
   17f80:	0018      	movs	r0, r3
   17f82:	4b2c      	ldr	r3, [pc, #176]	; (18034 <vWifiTask+0x208>)
   17f84:	4798      	blx	r3

    wifiStateMachine = WIFI_MQTT_HANDLE;
   17f86:	4b4e      	ldr	r3, [pc, #312]	; (180c0 <vWifiTask+0x294>)
   17f88:	2201      	movs	r2, #1
   17f8a:	701a      	strb	r2, [r3, #0]
    while (1) {
        switch (wifiStateMachine) {
   17f8c:	4b4c      	ldr	r3, [pc, #304]	; (180c0 <vWifiTask+0x294>)
   17f8e:	781b      	ldrb	r3, [r3, #0]
   17f90:	b25b      	sxtb	r3, r3
   17f92:	2b01      	cmp	r3, #1
   17f94:	d00b      	beq.n	17fae <vWifiTask+0x182>
   17f96:	dc02      	bgt.n	17f9e <vWifiTask+0x172>
   17f98:	2b00      	cmp	r3, #0
   17f9a:	d005      	beq.n	17fa8 <vWifiTask+0x17c>
   17f9c:	e010      	b.n	17fc0 <vWifiTask+0x194>
   17f9e:	2b02      	cmp	r3, #2
   17fa0:	d008      	beq.n	17fb4 <vWifiTask+0x188>
   17fa2:	2b03      	cmp	r3, #3
   17fa4:	d009      	beq.n	17fba <vWifiTask+0x18e>
   17fa6:	e00b      	b.n	17fc0 <vWifiTask+0x194>
            case (WIFI_MQTT_INIT): {
                MQTT_InitRoutine();
   17fa8:	4b46      	ldr	r3, [pc, #280]	; (180c4 <vWifiTask+0x298>)
   17faa:	4798      	blx	r3

                break;
   17fac:	e00c      	b.n	17fc8 <vWifiTask+0x19c>
            }

            case (WIFI_MQTT_HANDLE): {
                MQTT_HandleTransactions();
   17fae:	4b46      	ldr	r3, [pc, #280]	; (180c8 <vWifiTask+0x29c>)
   17fb0:	4798      	blx	r3
                break;
   17fb2:	e009      	b.n	17fc8 <vWifiTask+0x19c>
            }

            case (WIFI_DOWNLOAD_INIT): {
                HTTP_DownloadFileInit();
   17fb4:	4b45      	ldr	r3, [pc, #276]	; (180cc <vWifiTask+0x2a0>)
   17fb6:	4798      	blx	r3
                break;
   17fb8:	e006      	b.n	17fc8 <vWifiTask+0x19c>
            }

            case (WIFI_DOWNLOAD_HANDLE): {
                HTTP_DownloadFileTransaction();
   17fba:	4b45      	ldr	r3, [pc, #276]	; (180d0 <vWifiTask+0x2a4>)
   17fbc:	4798      	blx	r3
                break;
   17fbe:	e003      	b.n	17fc8 <vWifiTask+0x19c>
            }

            default:
                wifiStateMachine = WIFI_MQTT_INIT;
   17fc0:	4b3f      	ldr	r3, [pc, #252]	; (180c0 <vWifiTask+0x294>)
   17fc2:	2200      	movs	r2, #0
   17fc4:	701a      	strb	r2, [r3, #0]
                break;
   17fc6:	46c0      	nop			; (mov r8, r8)
        }
        // Check if a new state was called
        uint8_t DataToReceive = 0;
   17fc8:	230b      	movs	r3, #11
   17fca:	18fb      	adds	r3, r7, r3
   17fcc:	2200      	movs	r2, #0
   17fce:	701a      	strb	r2, [r3, #0]
        if (pdPASS == xQueueReceive(xQueueWifiState, &DataToReceive, 0)) {
   17fd0:	4b1b      	ldr	r3, [pc, #108]	; (18040 <vWifiTask+0x214>)
   17fd2:	681b      	ldr	r3, [r3, #0]
   17fd4:	220b      	movs	r2, #11
   17fd6:	18b9      	adds	r1, r7, r2
   17fd8:	2200      	movs	r2, #0
   17fda:	0018      	movs	r0, r3
   17fdc:	4b3d      	ldr	r3, [pc, #244]	; (180d4 <vWifiTask+0x2a8>)
   17fde:	4798      	blx	r3
   17fe0:	0003      	movs	r3, r0
   17fe2:	2b01      	cmp	r3, #1
   17fe4:	d105      	bne.n	17ff2 <vWifiTask+0x1c6>
            wifiStateMachine = DataToReceive;  // Update new state
   17fe6:	230b      	movs	r3, #11
   17fe8:	18fb      	adds	r3, r7, r3
   17fea:	781b      	ldrb	r3, [r3, #0]
   17fec:	b25a      	sxtb	r2, r3
   17fee:	4b34      	ldr	r3, [pc, #208]	; (180c0 <vWifiTask+0x294>)
   17ff0:	701a      	strb	r2, [r3, #0]
        }

        //Check if we need to publis something. In this example, we publish the "temperature" when the button was pressed.
        if(isPressed)
   17ff2:	4b39      	ldr	r3, [pc, #228]	; (180d8 <vWifiTask+0x2ac>)
   17ff4:	781b      	ldrb	r3, [r3, #0]
   17ff6:	b2db      	uxtb	r3, r3
   17ff8:	2b00      	cmp	r3, #0
   17ffa:	d017      	beq.n	1802c <vWifiTask+0x200>
        {
            mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, mqtt_msg_temp, strlen(mqtt_msg_temp), 1, 0);
   17ffc:	4b37      	ldr	r3, [pc, #220]	; (180dc <vWifiTask+0x2b0>)
   17ffe:	0018      	movs	r0, r3
   18000:	4b37      	ldr	r3, [pc, #220]	; (180e0 <vWifiTask+0x2b4>)
   18002:	4798      	blx	r3
   18004:	0004      	movs	r4, r0
   18006:	4a35      	ldr	r2, [pc, #212]	; (180dc <vWifiTask+0x2b0>)
   18008:	4936      	ldr	r1, [pc, #216]	; (180e4 <vWifiTask+0x2b8>)
   1800a:	4837      	ldr	r0, [pc, #220]	; (180e8 <vWifiTask+0x2bc>)
   1800c:	2300      	movs	r3, #0
   1800e:	9301      	str	r3, [sp, #4]
   18010:	2301      	movs	r3, #1
   18012:	9300      	str	r3, [sp, #0]
   18014:	0023      	movs	r3, r4
   18016:	4c35      	ldr	r4, [pc, #212]	; (180ec <vWifiTask+0x2c0>)
   18018:	47a0      	blx	r4
            LogMessage(LOG_DEBUG_LVL, "MQTT send %s\r\n", mqtt_msg_temp);
   1801a:	4a30      	ldr	r2, [pc, #192]	; (180dc <vWifiTask+0x2b0>)
   1801c:	4b34      	ldr	r3, [pc, #208]	; (180f0 <vWifiTask+0x2c4>)
   1801e:	0019      	movs	r1, r3
   18020:	2001      	movs	r0, #1
   18022:	4b1a      	ldr	r3, [pc, #104]	; (1808c <vWifiTask+0x260>)
   18024:	4798      	blx	r3
            isPressed = false;
   18026:	4b2c      	ldr	r3, [pc, #176]	; (180d8 <vWifiTask+0x2ac>)
   18028:	2200      	movs	r2, #0
   1802a:	701a      	strb	r2, [r3, #0]

        }

        vTaskDelay(100);
   1802c:	2064      	movs	r0, #100	; 0x64
   1802e:	4b01      	ldr	r3, [pc, #4]	; (18034 <vWifiTask+0x208>)
   18030:	4798      	blx	r3
    while (1) {
   18032:	e7ab      	b.n	17f8c <vWifiTask+0x160>
   18034:	0001cde5 	.word	0x0001cde5
   18038:	00016939 	.word	0x00016939
   1803c:	0001b0d9 	.word	0x0001b0d9
   18040:	20000648 	.word	0x20000648
   18044:	20000650 	.word	0x20000650
   18048:	2000064c 	.word	0x2000064c
   1804c:	20000658 	.word	0x20000658
   18050:	20000654 	.word	0x20000654
   18054:	00037a04 	.word	0x00037a04
   18058:	0001ea39 	.word	0x0001ea39
   1805c:	00037a2c 	.word	0x00037a2c
   18060:	00017375 	.word	0x00017375
   18064:	000173b1 	.word	0x000173b1
   18068:	000177fd 	.word	0x000177fd
   1806c:	00017291 	.word	0x00017291
   18070:	000178b5 	.word	0x000178b5
   18074:	000178f5 	.word	0x000178f5
   18078:	00035707 	.word	0x00035707
   1807c:	00020fad 	.word	0x00020fad
   18080:	0001713d 	.word	0x0001713d
   18084:	00022a85 	.word	0x00022a85
   18088:	00037a48 	.word	0x00037a48
   1808c:	0001eb25 	.word	0x0001eb25
   18090:	0003750c 	.word	0x0003750c
   18094:	00037a74 	.word	0x00037a74
   18098:	000261e5 	.word	0x000261e5
   1809c:	00017459 	.word	0x00017459
   180a0:	00017425 	.word	0x00017425
   180a4:	0002627d 	.word	0x0002627d
   180a8:	00037500 	.word	0x00037500
   180ac:	00022c95 	.word	0x00022c95
   180b0:	00022c79 	.word	0x00022c79
   180b4:	200044f0 	.word	0x200044f0
   180b8:	0003336d 	.word	0x0003336d
   180bc:	000169a9 	.word	0x000169a9
   180c0:	20000644 	.word	0x20000644
   180c4:	00017b11 	.word	0x00017b11
   180c8:	00017bad 	.word	0x00017bad
   180cc:	0001796d 	.word	0x0001796d
   180d0:	00017a01 	.word	0x00017a01
   180d4:	0001bc39 	.word	0x0001bc39
   180d8:	20000cf4 	.word	0x20000cf4
   180dc:	20000064 	.word	0x20000064
   180e0:	00035abf 	.word	0x00035abf
   180e4:	00037a98 	.word	0x00037a98
   180e8:	200008bc 	.word	0x200008bc
   180ec:	0003068d 	.word	0x0003068d
   180f0:	00037ab4 	.word	0x00037ab4

000180f4 <WifiHandlerSetState>:
    }
    return;
}

void WifiHandlerSetState(uint8_t state)
{
   180f4:	b590      	push	{r4, r7, lr}
   180f6:	b083      	sub	sp, #12
   180f8:	af00      	add	r7, sp, #0
   180fa:	0002      	movs	r2, r0
   180fc:	1dfb      	adds	r3, r7, #7
   180fe:	701a      	strb	r2, [r3, #0]
    if (state <= WIFI_DOWNLOAD_HANDLE) {
   18100:	1dfb      	adds	r3, r7, #7
   18102:	781b      	ldrb	r3, [r3, #0]
   18104:	2b03      	cmp	r3, #3
   18106:	d806      	bhi.n	18116 <WifiHandlerSetState+0x22>
        xQueueSend(xQueueWifiState, &state, (TickType_t)10);
   18108:	4b05      	ldr	r3, [pc, #20]	; (18120 <WifiHandlerSetState+0x2c>)
   1810a:	6818      	ldr	r0, [r3, #0]
   1810c:	1df9      	adds	r1, r7, #7
   1810e:	2300      	movs	r3, #0
   18110:	220a      	movs	r2, #10
   18112:	4c04      	ldr	r4, [pc, #16]	; (18124 <WifiHandlerSetState+0x30>)
   18114:	47a0      	blx	r4
    }
}
   18116:	46c0      	nop			; (mov r8, r8)
   18118:	46bd      	mov	sp, r7
   1811a:	b003      	add	sp, #12
   1811c:	bd90      	pop	{r4, r7, pc}
   1811e:	46c0      	nop			; (mov r8, r8)
   18120:	20000648 	.word	0x20000648
   18124:	0001b381 	.word	0x0001b381

00018128 <WifiAddDistanceDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddDistanceDataToQueue(uint16_t *distance)
{
   18128:	b590      	push	{r4, r7, lr}
   1812a:	b085      	sub	sp, #20
   1812c:	af00      	add	r7, sp, #0
   1812e:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueDistanceBuffer, distance, (TickType_t)10);
   18130:	4b06      	ldr	r3, [pc, #24]	; (1814c <WifiAddDistanceDataToQueue+0x24>)
   18132:	6818      	ldr	r0, [r3, #0]
   18134:	6879      	ldr	r1, [r7, #4]
   18136:	2300      	movs	r3, #0
   18138:	220a      	movs	r2, #10
   1813a:	4c05      	ldr	r4, [pc, #20]	; (18150 <WifiAddDistanceDataToQueue+0x28>)
   1813c:	47a0      	blx	r4
   1813e:	0003      	movs	r3, r0
   18140:	60fb      	str	r3, [r7, #12]
    return error;
   18142:	68fb      	ldr	r3, [r7, #12]
}
   18144:	0018      	movs	r0, r3
   18146:	46bd      	mov	sp, r7
   18148:	b005      	add	sp, #20
   1814a:	bd90      	pop	{r4, r7, pc}
   1814c:	20000654 	.word	0x20000654
   18150:	0001b381 	.word	0x0001b381

00018154 <WifiAddGameDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddGameDataToQueue(struct GameDataPacket *game)
{
   18154:	b590      	push	{r4, r7, lr}
   18156:	b085      	sub	sp, #20
   18158:	af00      	add	r7, sp, #0
   1815a:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueGameBuffer, game, (TickType_t)10);
   1815c:	4b06      	ldr	r3, [pc, #24]	; (18178 <WifiAddGameDataToQueue+0x24>)
   1815e:	6818      	ldr	r0, [r3, #0]
   18160:	6879      	ldr	r1, [r7, #4]
   18162:	2300      	movs	r3, #0
   18164:	220a      	movs	r2, #10
   18166:	4c05      	ldr	r4, [pc, #20]	; (1817c <WifiAddGameDataToQueue+0x28>)
   18168:	47a0      	blx	r4
   1816a:	0003      	movs	r3, r0
   1816c:	60fb      	str	r3, [r7, #12]
    return error;
   1816e:	68fb      	ldr	r3, [r7, #12]
}
   18170:	0018      	movs	r0, r3
   18172:	46bd      	mov	sp, r7
   18174:	b005      	add	sp, #20
   18176:	bd90      	pop	{r4, r7, pc}
   18178:	2000064c 	.word	0x2000064c
   1817c:	0001b381 	.word	0x0001b381

00018180 <WifiAddTestDataToQueue>:

int WifiAddTestDataToQueue(struct TestPacket *test)
{
   18180:	b590      	push	{r4, r7, lr}
   18182:	b085      	sub	sp, #20
   18184:	af00      	add	r7, sp, #0
   18186:	6078      	str	r0, [r7, #4]
	int error = xQueueSend(xQueueTestBuffer, test, (TickType_t)10);
   18188:	4b06      	ldr	r3, [pc, #24]	; (181a4 <WifiAddTestDataToQueue+0x24>)
   1818a:	6818      	ldr	r0, [r3, #0]
   1818c:	6879      	ldr	r1, [r7, #4]
   1818e:	2300      	movs	r3, #0
   18190:	220a      	movs	r2, #10
   18192:	4c05      	ldr	r4, [pc, #20]	; (181a8 <WifiAddTestDataToQueue+0x28>)
   18194:	47a0      	blx	r4
   18196:	0003      	movs	r3, r0
   18198:	60fb      	str	r3, [r7, #12]
	return error;
   1819a:	68fb      	ldr	r3, [r7, #12]
   1819c:	0018      	movs	r0, r3
   1819e:	46bd      	mov	sp, r7
   181a0:	b005      	add	sp, #20
   181a2:	bd90      	pop	{r4, r7, pc}
   181a4:	20000658 	.word	0x20000658
   181a8:	0001b381 	.word	0x0001b381

000181ac <system_gclk_chan_get_config_defaults>:
   181ac:	b580      	push	{r7, lr}
   181ae:	b082      	sub	sp, #8
   181b0:	af00      	add	r7, sp, #0
   181b2:	6078      	str	r0, [r7, #4]
   181b4:	687b      	ldr	r3, [r7, #4]
   181b6:	2200      	movs	r2, #0
   181b8:	701a      	strb	r2, [r3, #0]
   181ba:	46c0      	nop			; (mov r8, r8)
   181bc:	46bd      	mov	sp, r7
   181be:	b002      	add	sp, #8
   181c0:	bd80      	pop	{r7, pc}
	...

000181c4 <system_apb_clock_set_mask>:
   181c4:	b580      	push	{r7, lr}
   181c6:	b082      	sub	sp, #8
   181c8:	af00      	add	r7, sp, #0
   181ca:	0002      	movs	r2, r0
   181cc:	6039      	str	r1, [r7, #0]
   181ce:	1dfb      	adds	r3, r7, #7
   181d0:	701a      	strb	r2, [r3, #0]
   181d2:	1dfb      	adds	r3, r7, #7
   181d4:	781b      	ldrb	r3, [r3, #0]
   181d6:	2b01      	cmp	r3, #1
   181d8:	d00a      	beq.n	181f0 <system_apb_clock_set_mask+0x2c>
   181da:	2b02      	cmp	r3, #2
   181dc:	d00f      	beq.n	181fe <system_apb_clock_set_mask+0x3a>
   181de:	2b00      	cmp	r3, #0
   181e0:	d114      	bne.n	1820c <system_apb_clock_set_mask+0x48>
   181e2:	4b0e      	ldr	r3, [pc, #56]	; (1821c <system_apb_clock_set_mask+0x58>)
   181e4:	4a0d      	ldr	r2, [pc, #52]	; (1821c <system_apb_clock_set_mask+0x58>)
   181e6:	6991      	ldr	r1, [r2, #24]
   181e8:	683a      	ldr	r2, [r7, #0]
   181ea:	430a      	orrs	r2, r1
   181ec:	619a      	str	r2, [r3, #24]
   181ee:	e00f      	b.n	18210 <system_apb_clock_set_mask+0x4c>
   181f0:	4b0a      	ldr	r3, [pc, #40]	; (1821c <system_apb_clock_set_mask+0x58>)
   181f2:	4a0a      	ldr	r2, [pc, #40]	; (1821c <system_apb_clock_set_mask+0x58>)
   181f4:	69d1      	ldr	r1, [r2, #28]
   181f6:	683a      	ldr	r2, [r7, #0]
   181f8:	430a      	orrs	r2, r1
   181fa:	61da      	str	r2, [r3, #28]
   181fc:	e008      	b.n	18210 <system_apb_clock_set_mask+0x4c>
   181fe:	4b07      	ldr	r3, [pc, #28]	; (1821c <system_apb_clock_set_mask+0x58>)
   18200:	4a06      	ldr	r2, [pc, #24]	; (1821c <system_apb_clock_set_mask+0x58>)
   18202:	6a11      	ldr	r1, [r2, #32]
   18204:	683a      	ldr	r2, [r7, #0]
   18206:	430a      	orrs	r2, r1
   18208:	621a      	str	r2, [r3, #32]
   1820a:	e001      	b.n	18210 <system_apb_clock_set_mask+0x4c>
   1820c:	2317      	movs	r3, #23
   1820e:	e000      	b.n	18212 <system_apb_clock_set_mask+0x4e>
   18210:	2300      	movs	r3, #0
   18212:	0018      	movs	r0, r3
   18214:	46bd      	mov	sp, r7
   18216:	b002      	add	sp, #8
   18218:	bd80      	pop	{r7, pc}
   1821a:	46c0      	nop			; (mov r8, r8)
   1821c:	40000400 	.word	0x40000400

00018220 <system_pinmux_get_config_defaults>:
   18220:	b580      	push	{r7, lr}
   18222:	b082      	sub	sp, #8
   18224:	af00      	add	r7, sp, #0
   18226:	6078      	str	r0, [r7, #4]
   18228:	687b      	ldr	r3, [r7, #4]
   1822a:	2280      	movs	r2, #128	; 0x80
   1822c:	701a      	strb	r2, [r3, #0]
   1822e:	687b      	ldr	r3, [r7, #4]
   18230:	2200      	movs	r2, #0
   18232:	705a      	strb	r2, [r3, #1]
   18234:	687b      	ldr	r3, [r7, #4]
   18236:	2201      	movs	r2, #1
   18238:	709a      	strb	r2, [r3, #2]
   1823a:	687b      	ldr	r3, [r7, #4]
   1823c:	2200      	movs	r2, #0
   1823e:	70da      	strb	r2, [r3, #3]
   18240:	46c0      	nop			; (mov r8, r8)
   18242:	46bd      	mov	sp, r7
   18244:	b002      	add	sp, #8
   18246:	bd80      	pop	{r7, pc}

00018248 <system_is_debugger_present>:
   18248:	b580      	push	{r7, lr}
   1824a:	af00      	add	r7, sp, #0
   1824c:	4b05      	ldr	r3, [pc, #20]	; (18264 <system_is_debugger_present+0x1c>)
   1824e:	789b      	ldrb	r3, [r3, #2]
   18250:	b2db      	uxtb	r3, r3
   18252:	001a      	movs	r2, r3
   18254:	2302      	movs	r3, #2
   18256:	4013      	ands	r3, r2
   18258:	1e5a      	subs	r2, r3, #1
   1825a:	4193      	sbcs	r3, r2
   1825c:	b2db      	uxtb	r3, r3
   1825e:	0018      	movs	r0, r3
   18260:	46bd      	mov	sp, r7
   18262:	bd80      	pop	{r7, pc}
   18264:	41002000 	.word	0x41002000

00018268 <system_interrupt_enter_critical_section>:
   18268:	b580      	push	{r7, lr}
   1826a:	af00      	add	r7, sp, #0
   1826c:	4b02      	ldr	r3, [pc, #8]	; (18278 <system_interrupt_enter_critical_section+0x10>)
   1826e:	4798      	blx	r3
   18270:	46c0      	nop			; (mov r8, r8)
   18272:	46bd      	mov	sp, r7
   18274:	bd80      	pop	{r7, pc}
   18276:	46c0      	nop			; (mov r8, r8)
   18278:	00026edd 	.word	0x00026edd

0001827c <system_interrupt_leave_critical_section>:
   1827c:	b580      	push	{r7, lr}
   1827e:	af00      	add	r7, sp, #0
   18280:	4b02      	ldr	r3, [pc, #8]	; (1828c <system_interrupt_leave_critical_section+0x10>)
   18282:	4798      	blx	r3
   18284:	46c0      	nop			; (mov r8, r8)
   18286:	46bd      	mov	sp, r7
   18288:	bd80      	pop	{r7, pc}
   1828a:	46c0      	nop			; (mov r8, r8)
   1828c:	00026f31 	.word	0x00026f31

00018290 <system_interrupt_disable>:
   18290:	b580      	push	{r7, lr}
   18292:	b082      	sub	sp, #8
   18294:	af00      	add	r7, sp, #0
   18296:	0002      	movs	r2, r0
   18298:	1dfb      	adds	r3, r7, #7
   1829a:	701a      	strb	r2, [r3, #0]
   1829c:	4a07      	ldr	r2, [pc, #28]	; (182bc <system_interrupt_disable+0x2c>)
   1829e:	1dfb      	adds	r3, r7, #7
   182a0:	781b      	ldrb	r3, [r3, #0]
   182a2:	0019      	movs	r1, r3
   182a4:	231f      	movs	r3, #31
   182a6:	400b      	ands	r3, r1
   182a8:	2101      	movs	r1, #1
   182aa:	4099      	lsls	r1, r3
   182ac:	000b      	movs	r3, r1
   182ae:	0019      	movs	r1, r3
   182b0:	2380      	movs	r3, #128	; 0x80
   182b2:	50d1      	str	r1, [r2, r3]
   182b4:	46c0      	nop			; (mov r8, r8)
   182b6:	46bd      	mov	sp, r7
   182b8:	b002      	add	sp, #8
   182ba:	bd80      	pop	{r7, pc}
   182bc:	e000e100 	.word	0xe000e100

000182c0 <i2c_master_is_syncing>:
   182c0:	b580      	push	{r7, lr}
   182c2:	b084      	sub	sp, #16
   182c4:	af00      	add	r7, sp, #0
   182c6:	6078      	str	r0, [r7, #4]
   182c8:	687b      	ldr	r3, [r7, #4]
   182ca:	681b      	ldr	r3, [r3, #0]
   182cc:	60fb      	str	r3, [r7, #12]
   182ce:	68fb      	ldr	r3, [r7, #12]
   182d0:	69db      	ldr	r3, [r3, #28]
   182d2:	2207      	movs	r2, #7
   182d4:	4013      	ands	r3, r2
   182d6:	1e5a      	subs	r2, r3, #1
   182d8:	4193      	sbcs	r3, r2
   182da:	b2db      	uxtb	r3, r3
   182dc:	0018      	movs	r0, r3
   182de:	46bd      	mov	sp, r7
   182e0:	b004      	add	sp, #16
   182e2:	bd80      	pop	{r7, pc}

000182e4 <_i2c_master_wait_for_sync>:
   182e4:	b580      	push	{r7, lr}
   182e6:	b082      	sub	sp, #8
   182e8:	af00      	add	r7, sp, #0
   182ea:	6078      	str	r0, [r7, #4]
   182ec:	46c0      	nop			; (mov r8, r8)
   182ee:	687b      	ldr	r3, [r7, #4]
   182f0:	0018      	movs	r0, r3
   182f2:	4b04      	ldr	r3, [pc, #16]	; (18304 <_i2c_master_wait_for_sync+0x20>)
   182f4:	4798      	blx	r3
   182f6:	1e03      	subs	r3, r0, #0
   182f8:	d1f9      	bne.n	182ee <_i2c_master_wait_for_sync+0xa>
   182fa:	46c0      	nop			; (mov r8, r8)
   182fc:	46bd      	mov	sp, r7
   182fe:	b002      	add	sp, #8
   18300:	bd80      	pop	{r7, pc}
   18302:	46c0      	nop			; (mov r8, r8)
   18304:	000182c1 	.word	0x000182c1

00018308 <i2c_master_disable>:
   18308:	b580      	push	{r7, lr}
   1830a:	b084      	sub	sp, #16
   1830c:	af00      	add	r7, sp, #0
   1830e:	6078      	str	r0, [r7, #4]
   18310:	687b      	ldr	r3, [r7, #4]
   18312:	681b      	ldr	r3, [r3, #0]
   18314:	60fb      	str	r3, [r7, #12]
   18316:	687b      	ldr	r3, [r7, #4]
   18318:	681b      	ldr	r3, [r3, #0]
   1831a:	0018      	movs	r0, r3
   1831c:	4b0d      	ldr	r3, [pc, #52]	; (18354 <i2c_master_disable+0x4c>)
   1831e:	4798      	blx	r3
   18320:	0003      	movs	r3, r0
   18322:	0018      	movs	r0, r3
   18324:	4b0c      	ldr	r3, [pc, #48]	; (18358 <i2c_master_disable+0x50>)
   18326:	4798      	blx	r3
   18328:	687b      	ldr	r3, [r7, #4]
   1832a:	0018      	movs	r0, r3
   1832c:	4b0b      	ldr	r3, [pc, #44]	; (1835c <i2c_master_disable+0x54>)
   1832e:	4798      	blx	r3
   18330:	68fb      	ldr	r3, [r7, #12]
   18332:	2283      	movs	r2, #131	; 0x83
   18334:	751a      	strb	r2, [r3, #20]
   18336:	68fb      	ldr	r3, [r7, #12]
   18338:	2283      	movs	r2, #131	; 0x83
   1833a:	761a      	strb	r2, [r3, #24]
   1833c:	68fb      	ldr	r3, [r7, #12]
   1833e:	681b      	ldr	r3, [r3, #0]
   18340:	2202      	movs	r2, #2
   18342:	4393      	bics	r3, r2
   18344:	001a      	movs	r2, r3
   18346:	68fb      	ldr	r3, [r7, #12]
   18348:	601a      	str	r2, [r3, #0]
   1834a:	46c0      	nop			; (mov r8, r8)
   1834c:	46bd      	mov	sp, r7
   1834e:	b004      	add	sp, #16
   18350:	bd80      	pop	{r7, pc}
   18352:	46c0      	nop			; (mov r8, r8)
   18354:	000283b1 	.word	0x000283b1
   18358:	00018291 	.word	0x00018291
   1835c:	000182e5 	.word	0x000182e5

00018360 <_i2c_master_set_config>:
   18360:	b5f0      	push	{r4, r5, r6, r7, lr}
   18362:	b097      	sub	sp, #92	; 0x5c
   18364:	af00      	add	r7, sp, #0
   18366:	6178      	str	r0, [r7, #20]
   18368:	6139      	str	r1, [r7, #16]
   1836a:	2300      	movs	r3, #0
   1836c:	63fb      	str	r3, [r7, #60]	; 0x3c
   1836e:	2300      	movs	r3, #0
   18370:	653b      	str	r3, [r7, #80]	; 0x50
   18372:	2300      	movs	r3, #0
   18374:	64fb      	str	r3, [r7, #76]	; 0x4c
   18376:	233b      	movs	r3, #59	; 0x3b
   18378:	2210      	movs	r2, #16
   1837a:	4694      	mov	ip, r2
   1837c:	44bc      	add	ip, r7
   1837e:	4463      	add	r3, ip
   18380:	2200      	movs	r2, #0
   18382:	701a      	strb	r2, [r3, #0]
   18384:	697b      	ldr	r3, [r7, #20]
   18386:	681b      	ldr	r3, [r3, #0]
   18388:	63bb      	str	r3, [r7, #56]	; 0x38
   1838a:	697b      	ldr	r3, [r7, #20]
   1838c:	681b      	ldr	r3, [r3, #0]
   1838e:	637b      	str	r3, [r7, #52]	; 0x34
   18390:	2323      	movs	r3, #35	; 0x23
   18392:	2210      	movs	r2, #16
   18394:	18ba      	adds	r2, r7, r2
   18396:	18d4      	adds	r4, r2, r3
   18398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1839a:	0018      	movs	r0, r3
   1839c:	4bc0      	ldr	r3, [pc, #768]	; (186a0 <_i2c_master_set_config+0x340>)
   1839e:	4798      	blx	r3
   183a0:	0003      	movs	r3, r0
   183a2:	7023      	strb	r3, [r4, #0]
   183a4:	230c      	movs	r3, #12
   183a6:	2210      	movs	r2, #16
   183a8:	4694      	mov	ip, r2
   183aa:	44bc      	add	ip, r7
   183ac:	4463      	add	r3, ip
   183ae:	0018      	movs	r0, r3
   183b0:	4bbc      	ldr	r3, [pc, #752]	; (186a4 <_i2c_master_set_config+0x344>)
   183b2:	4798      	blx	r3
   183b4:	693b      	ldr	r3, [r7, #16]
   183b6:	69db      	ldr	r3, [r3, #28]
   183b8:	647b      	str	r3, [r7, #68]	; 0x44
   183ba:	693b      	ldr	r3, [r7, #16]
   183bc:	6a1b      	ldr	r3, [r3, #32]
   183be:	643b      	str	r3, [r7, #64]	; 0x40
   183c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   183c2:	2b00      	cmp	r3, #0
   183c4:	d106      	bne.n	183d4 <_i2c_master_set_config+0x74>
   183c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   183c8:	2100      	movs	r1, #0
   183ca:	0018      	movs	r0, r3
   183cc:	4bb6      	ldr	r3, [pc, #728]	; (186a8 <_i2c_master_set_config+0x348>)
   183ce:	4798      	blx	r3
   183d0:	0003      	movs	r3, r0
   183d2:	647b      	str	r3, [r7, #68]	; 0x44
   183d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   183d6:	b2da      	uxtb	r2, r3
   183d8:	230c      	movs	r3, #12
   183da:	2110      	movs	r1, #16
   183dc:	468c      	mov	ip, r1
   183de:	44bc      	add	ip, r7
   183e0:	4463      	add	r3, ip
   183e2:	701a      	strb	r2, [r3, #0]
   183e4:	230c      	movs	r3, #12
   183e6:	2210      	movs	r2, #16
   183e8:	4694      	mov	ip, r2
   183ea:	44bc      	add	ip, r7
   183ec:	4463      	add	r3, ip
   183ee:	2202      	movs	r2, #2
   183f0:	705a      	strb	r2, [r3, #1]
   183f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   183f4:	0c1b      	lsrs	r3, r3, #16
   183f6:	b2db      	uxtb	r3, r3
   183f8:	220c      	movs	r2, #12
   183fa:	2110      	movs	r1, #16
   183fc:	468c      	mov	ip, r1
   183fe:	44bc      	add	ip, r7
   18400:	4462      	add	r2, ip
   18402:	0011      	movs	r1, r2
   18404:	0018      	movs	r0, r3
   18406:	4ba9      	ldr	r3, [pc, #676]	; (186ac <_i2c_master_set_config+0x34c>)
   18408:	4798      	blx	r3
   1840a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1840c:	2b00      	cmp	r3, #0
   1840e:	d106      	bne.n	1841e <_i2c_master_set_config+0xbe>
   18410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   18412:	2101      	movs	r1, #1
   18414:	0018      	movs	r0, r3
   18416:	4ba4      	ldr	r3, [pc, #656]	; (186a8 <_i2c_master_set_config+0x348>)
   18418:	4798      	blx	r3
   1841a:	0003      	movs	r3, r0
   1841c:	643b      	str	r3, [r7, #64]	; 0x40
   1841e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   18420:	b2da      	uxtb	r2, r3
   18422:	230c      	movs	r3, #12
   18424:	2110      	movs	r1, #16
   18426:	468c      	mov	ip, r1
   18428:	44bc      	add	ip, r7
   1842a:	4463      	add	r3, ip
   1842c:	701a      	strb	r2, [r3, #0]
   1842e:	230c      	movs	r3, #12
   18430:	2210      	movs	r2, #16
   18432:	4694      	mov	ip, r2
   18434:	44bc      	add	ip, r7
   18436:	4463      	add	r3, ip
   18438:	2202      	movs	r2, #2
   1843a:	705a      	strb	r2, [r3, #1]
   1843c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1843e:	0c1b      	lsrs	r3, r3, #16
   18440:	b2db      	uxtb	r3, r3
   18442:	220c      	movs	r2, #12
   18444:	2110      	movs	r1, #16
   18446:	468c      	mov	ip, r1
   18448:	44bc      	add	ip, r7
   1844a:	4462      	add	r2, ip
   1844c:	0011      	movs	r1, r2
   1844e:	0018      	movs	r0, r3
   18450:	4b96      	ldr	r3, [pc, #600]	; (186ac <_i2c_master_set_config+0x34c>)
   18452:	4798      	blx	r3
   18454:	693b      	ldr	r3, [r7, #16]
   18456:	8a9a      	ldrh	r2, [r3, #20]
   18458:	697b      	ldr	r3, [r7, #20]
   1845a:	80da      	strh	r2, [r3, #6]
   1845c:	693b      	ldr	r3, [r7, #16]
   1845e:	8ada      	ldrh	r2, [r3, #22]
   18460:	697b      	ldr	r3, [r7, #20]
   18462:	811a      	strh	r2, [r3, #8]
   18464:	693b      	ldr	r3, [r7, #16]
   18466:	7e1b      	ldrb	r3, [r3, #24]
   18468:	2b00      	cmp	r3, #0
   1846a:	d103      	bne.n	18474 <_i2c_master_set_config+0x114>
   1846c:	4b90      	ldr	r3, [pc, #576]	; (186b0 <_i2c_master_set_config+0x350>)
   1846e:	4798      	blx	r3
   18470:	1e03      	subs	r3, r0, #0
   18472:	d002      	beq.n	1847a <_i2c_master_set_config+0x11a>
   18474:	2380      	movs	r3, #128	; 0x80
   18476:	657b      	str	r3, [r7, #84]	; 0x54
   18478:	e001      	b.n	1847e <_i2c_master_set_config+0x11e>
   1847a:	2300      	movs	r3, #0
   1847c:	657b      	str	r3, [r7, #84]	; 0x54
   1847e:	693b      	ldr	r3, [r7, #16]
   18480:	691b      	ldr	r3, [r3, #16]
   18482:	2b00      	cmp	r3, #0
   18484:	d004      	beq.n	18490 <_i2c_master_set_config+0x130>
   18486:	693b      	ldr	r3, [r7, #16]
   18488:	691b      	ldr	r3, [r3, #16]
   1848a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1848c:	4313      	orrs	r3, r2
   1848e:	657b      	str	r3, [r7, #84]	; 0x54
   18490:	693b      	ldr	r3, [r7, #16]
   18492:	689b      	ldr	r3, [r3, #8]
   18494:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   18496:	4313      	orrs	r3, r2
   18498:	657b      	str	r3, [r7, #84]	; 0x54
   1849a:	693b      	ldr	r3, [r7, #16]
   1849c:	2224      	movs	r2, #36	; 0x24
   1849e:	5c9b      	ldrb	r3, [r3, r2]
   184a0:	2b00      	cmp	r3, #0
   184a2:	d004      	beq.n	184ae <_i2c_master_set_config+0x14e>
   184a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   184a6:	2280      	movs	r2, #128	; 0x80
   184a8:	05d2      	lsls	r2, r2, #23
   184aa:	4313      	orrs	r3, r2
   184ac:	657b      	str	r3, [r7, #84]	; 0x54
   184ae:	693b      	ldr	r3, [r7, #16]
   184b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   184b2:	2b00      	cmp	r3, #0
   184b4:	d004      	beq.n	184c0 <_i2c_master_set_config+0x160>
   184b6:	693b      	ldr	r3, [r7, #16]
   184b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   184ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   184bc:	4313      	orrs	r3, r2
   184be:	657b      	str	r3, [r7, #84]	; 0x54
   184c0:	693b      	ldr	r3, [r7, #16]
   184c2:	222c      	movs	r2, #44	; 0x2c
   184c4:	5c9b      	ldrb	r3, [r3, r2]
   184c6:	2b00      	cmp	r3, #0
   184c8:	d105      	bne.n	184d6 <_i2c_master_set_config+0x176>
   184ca:	693b      	ldr	r3, [r7, #16]
   184cc:	689a      	ldr	r2, [r3, #8]
   184ce:	2380      	movs	r3, #128	; 0x80
   184d0:	049b      	lsls	r3, r3, #18
   184d2:	429a      	cmp	r2, r3
   184d4:	d104      	bne.n	184e0 <_i2c_master_set_config+0x180>
   184d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   184d8:	2280      	movs	r2, #128	; 0x80
   184da:	0512      	lsls	r2, r2, #20
   184dc:	4313      	orrs	r3, r2
   184de:	657b      	str	r3, [r7, #84]	; 0x54
   184e0:	693b      	ldr	r3, [r7, #16]
   184e2:	222d      	movs	r2, #45	; 0x2d
   184e4:	5c9b      	ldrb	r3, [r3, r2]
   184e6:	2b00      	cmp	r3, #0
   184e8:	d004      	beq.n	184f4 <_i2c_master_set_config+0x194>
   184ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   184ec:	2280      	movs	r2, #128	; 0x80
   184ee:	0412      	lsls	r2, r2, #16
   184f0:	4313      	orrs	r3, r2
   184f2:	657b      	str	r3, [r7, #84]	; 0x54
   184f4:	693b      	ldr	r3, [r7, #16]
   184f6:	222e      	movs	r2, #46	; 0x2e
   184f8:	5c9b      	ldrb	r3, [r3, r2]
   184fa:	2b00      	cmp	r3, #0
   184fc:	d004      	beq.n	18508 <_i2c_master_set_config+0x1a8>
   184fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   18500:	2280      	movs	r2, #128	; 0x80
   18502:	03d2      	lsls	r2, r2, #15
   18504:	4313      	orrs	r3, r2
   18506:	657b      	str	r3, [r7, #84]	; 0x54
   18508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1850a:	681a      	ldr	r2, [r3, #0]
   1850c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1850e:	431a      	orrs	r2, r3
   18510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   18512:	601a      	str	r2, [r3, #0]
   18514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   18516:	2280      	movs	r2, #128	; 0x80
   18518:	0052      	lsls	r2, r2, #1
   1851a:	605a      	str	r2, [r3, #4]
   1851c:	2323      	movs	r3, #35	; 0x23
   1851e:	2210      	movs	r2, #16
   18520:	4694      	mov	ip, r2
   18522:	44bc      	add	ip, r7
   18524:	4463      	add	r3, ip
   18526:	781b      	ldrb	r3, [r3, #0]
   18528:	3314      	adds	r3, #20
   1852a:	b2db      	uxtb	r3, r3
   1852c:	0018      	movs	r0, r3
   1852e:	4b61      	ldr	r3, [pc, #388]	; (186b4 <_i2c_master_set_config+0x354>)
   18530:	4798      	blx	r3
   18532:	0003      	movs	r3, r0
   18534:	62fb      	str	r3, [r7, #44]	; 0x2c
   18536:	693b      	ldr	r3, [r7, #16]
   18538:	681b      	ldr	r3, [r3, #0]
   1853a:	22fa      	movs	r2, #250	; 0xfa
   1853c:	0092      	lsls	r2, r2, #2
   1853e:	4353      	muls	r3, r2
   18540:	62bb      	str	r3, [r7, #40]	; 0x28
   18542:	693b      	ldr	r3, [r7, #16]
   18544:	685b      	ldr	r3, [r3, #4]
   18546:	22fa      	movs	r2, #250	; 0xfa
   18548:	0092      	lsls	r2, r2, #2
   1854a:	4353      	muls	r3, r2
   1854c:	627b      	str	r3, [r7, #36]	; 0x24
   1854e:	693b      	ldr	r3, [r7, #16]
   18550:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   18552:	623b      	str	r3, [r7, #32]
   18554:	4b58      	ldr	r3, [pc, #352]	; (186b8 <_i2c_master_set_config+0x358>)
   18556:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   18558:	4798      	blx	r3
   1855a:	0005      	movs	r5, r0
   1855c:	000e      	movs	r6, r1
   1855e:	4b56      	ldr	r3, [pc, #344]	; (186b8 <_i2c_master_set_config+0x358>)
   18560:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   18562:	4798      	blx	r3
   18564:	60b8      	str	r0, [r7, #8]
   18566:	60f9      	str	r1, [r7, #12]
   18568:	4b53      	ldr	r3, [pc, #332]	; (186b8 <_i2c_master_set_config+0x358>)
   1856a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1856c:	4798      	blx	r3
   1856e:	4c53      	ldr	r4, [pc, #332]	; (186bc <_i2c_master_set_config+0x35c>)
   18570:	4a53      	ldr	r2, [pc, #332]	; (186c0 <_i2c_master_set_config+0x360>)
   18572:	4b54      	ldr	r3, [pc, #336]	; (186c4 <_i2c_master_set_config+0x364>)
   18574:	47a0      	blx	r4
   18576:	0003      	movs	r3, r0
   18578:	000c      	movs	r4, r1
   1857a:	603b      	str	r3, [r7, #0]
   1857c:	607c      	str	r4, [r7, #4]
   1857e:	4b4e      	ldr	r3, [pc, #312]	; (186b8 <_i2c_master_set_config+0x358>)
   18580:	6a38      	ldr	r0, [r7, #32]
   18582:	4798      	blx	r3
   18584:	0002      	movs	r2, r0
   18586:	000b      	movs	r3, r1
   18588:	4c4c      	ldr	r4, [pc, #304]	; (186bc <_i2c_master_set_config+0x35c>)
   1858a:	6838      	ldr	r0, [r7, #0]
   1858c:	6879      	ldr	r1, [r7, #4]
   1858e:	47a0      	blx	r4
   18590:	0003      	movs	r3, r0
   18592:	000c      	movs	r4, r1
   18594:	0018      	movs	r0, r3
   18596:	0021      	movs	r1, r4
   18598:	4c4b      	ldr	r4, [pc, #300]	; (186c8 <_i2c_master_set_config+0x368>)
   1859a:	2200      	movs	r2, #0
   1859c:	4b4b      	ldr	r3, [pc, #300]	; (186cc <_i2c_master_set_config+0x36c>)
   1859e:	47a0      	blx	r4
   185a0:	0003      	movs	r3, r0
   185a2:	000c      	movs	r4, r1
   185a4:	001a      	movs	r2, r3
   185a6:	0023      	movs	r3, r4
   185a8:	4c44      	ldr	r4, [pc, #272]	; (186bc <_i2c_master_set_config+0x35c>)
   185aa:	68b8      	ldr	r0, [r7, #8]
   185ac:	68f9      	ldr	r1, [r7, #12]
   185ae:	47a0      	blx	r4
   185b0:	0003      	movs	r3, r0
   185b2:	000c      	movs	r4, r1
   185b4:	001a      	movs	r2, r3
   185b6:	0023      	movs	r3, r4
   185b8:	4c45      	ldr	r4, [pc, #276]	; (186d0 <_i2c_master_set_config+0x370>)
   185ba:	0028      	movs	r0, r5
   185bc:	0031      	movs	r1, r6
   185be:	47a0      	blx	r4
   185c0:	0003      	movs	r3, r0
   185c2:	000c      	movs	r4, r1
   185c4:	001d      	movs	r5, r3
   185c6:	0026      	movs	r6, r4
   185c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   185ca:	005a      	lsls	r2, r3, #1
   185cc:	4b3a      	ldr	r3, [pc, #232]	; (186b8 <_i2c_master_set_config+0x358>)
   185ce:	0010      	movs	r0, r2
   185d0:	4798      	blx	r3
   185d2:	0002      	movs	r2, r0
   185d4:	000b      	movs	r3, r1
   185d6:	4c3c      	ldr	r4, [pc, #240]	; (186c8 <_i2c_master_set_config+0x368>)
   185d8:	0028      	movs	r0, r5
   185da:	0031      	movs	r1, r6
   185dc:	47a0      	blx	r4
   185de:	0003      	movs	r3, r0
   185e0:	000c      	movs	r4, r1
   185e2:	0018      	movs	r0, r3
   185e4:	0021      	movs	r1, r4
   185e6:	4c3a      	ldr	r4, [pc, #232]	; (186d0 <_i2c_master_set_config+0x370>)
   185e8:	2200      	movs	r2, #0
   185ea:	4b3a      	ldr	r3, [pc, #232]	; (186d4 <_i2c_master_set_config+0x374>)
   185ec:	47a0      	blx	r4
   185ee:	0003      	movs	r3, r0
   185f0:	000c      	movs	r4, r1
   185f2:	001d      	movs	r5, r3
   185f4:	0026      	movs	r6, r4
   185f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   185f8:	005a      	lsls	r2, r3, #1
   185fa:	4b2f      	ldr	r3, [pc, #188]	; (186b8 <_i2c_master_set_config+0x358>)
   185fc:	0010      	movs	r0, r2
   185fe:	4798      	blx	r3
   18600:	0002      	movs	r2, r0
   18602:	000b      	movs	r3, r1
   18604:	4c34      	ldr	r4, [pc, #208]	; (186d8 <_i2c_master_set_config+0x378>)
   18606:	0028      	movs	r0, r5
   18608:	0031      	movs	r1, r6
   1860a:	47a0      	blx	r4
   1860c:	0003      	movs	r3, r0
   1860e:	000c      	movs	r4, r1
   18610:	0019      	movs	r1, r3
   18612:	0022      	movs	r2, r4
   18614:	4b31      	ldr	r3, [pc, #196]	; (186dc <_i2c_master_set_config+0x37c>)
   18616:	0008      	movs	r0, r1
   18618:	0011      	movs	r1, r2
   1861a:	4798      	blx	r3
   1861c:	0003      	movs	r3, r0
   1861e:	63fb      	str	r3, [r7, #60]	; 0x3c
   18620:	693b      	ldr	r3, [r7, #16]
   18622:	689a      	ldr	r2, [r3, #8]
   18624:	2380      	movs	r3, #128	; 0x80
   18626:	049b      	lsls	r3, r3, #18
   18628:	429a      	cmp	r2, r3
   1862a:	d16a      	bne.n	18702 <_i2c_master_set_config+0x3a2>
   1862c:	4b22      	ldr	r3, [pc, #136]	; (186b8 <_i2c_master_set_config+0x358>)
   1862e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   18630:	4798      	blx	r3
   18632:	4c25      	ldr	r4, [pc, #148]	; (186c8 <_i2c_master_set_config+0x368>)
   18634:	0002      	movs	r2, r0
   18636:	000b      	movs	r3, r1
   18638:	47a0      	blx	r4
   1863a:	0003      	movs	r3, r0
   1863c:	000c      	movs	r4, r1
   1863e:	001d      	movs	r5, r3
   18640:	0026      	movs	r6, r4
   18642:	4b1d      	ldr	r3, [pc, #116]	; (186b8 <_i2c_master_set_config+0x358>)
   18644:	6a78      	ldr	r0, [r7, #36]	; 0x24
   18646:	4798      	blx	r3
   18648:	4c1c      	ldr	r4, [pc, #112]	; (186bc <_i2c_master_set_config+0x35c>)
   1864a:	2200      	movs	r2, #0
   1864c:	4b24      	ldr	r3, [pc, #144]	; (186e0 <_i2c_master_set_config+0x380>)
   1864e:	47a0      	blx	r4
   18650:	0003      	movs	r3, r0
   18652:	000c      	movs	r4, r1
   18654:	001a      	movs	r2, r3
   18656:	0023      	movs	r3, r4
   18658:	4c1f      	ldr	r4, [pc, #124]	; (186d8 <_i2c_master_set_config+0x378>)
   1865a:	0028      	movs	r0, r5
   1865c:	0031      	movs	r1, r6
   1865e:	47a0      	blx	r4
   18660:	0003      	movs	r3, r0
   18662:	000c      	movs	r4, r1
   18664:	0018      	movs	r0, r3
   18666:	0021      	movs	r1, r4
   18668:	4c19      	ldr	r4, [pc, #100]	; (186d0 <_i2c_master_set_config+0x370>)
   1866a:	2200      	movs	r2, #0
   1866c:	4b19      	ldr	r3, [pc, #100]	; (186d4 <_i2c_master_set_config+0x374>)
   1866e:	47a0      	blx	r4
   18670:	0003      	movs	r3, r0
   18672:	000c      	movs	r4, r1
   18674:	0019      	movs	r1, r3
   18676:	0022      	movs	r2, r4
   18678:	4b18      	ldr	r3, [pc, #96]	; (186dc <_i2c_master_set_config+0x37c>)
   1867a:	0008      	movs	r0, r1
   1867c:	0011      	movs	r1, r2
   1867e:	4798      	blx	r3
   18680:	0003      	movs	r3, r0
   18682:	64fb      	str	r3, [r7, #76]	; 0x4c
   18684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   18686:	2b00      	cmp	r3, #0
   18688:	d02e      	beq.n	186e8 <_i2c_master_set_config+0x388>
   1868a:	4b16      	ldr	r3, [pc, #88]	; (186e4 <_i2c_master_set_config+0x384>)
   1868c:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1868e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   18690:	4798      	blx	r3
   18692:	0003      	movs	r3, r0
   18694:	1e9a      	subs	r2, r3, #2
   18696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   18698:	1ad3      	subs	r3, r2, r3
   1869a:	653b      	str	r3, [r7, #80]	; 0x50
   1869c:	e031      	b.n	18702 <_i2c_master_set_config+0x3a2>
   1869e:	46c0      	nop			; (mov r8, r8)
   186a0:	000282e1 	.word	0x000282e1
   186a4:	00018221 	.word	0x00018221
   186a8:	00028125 	.word	0x00028125
   186ac:	0002aed1 	.word	0x0002aed1
   186b0:	00018249 	.word	0x00018249
   186b4:	0002ac95 	.word	0x0002ac95
   186b8:	000355a9 	.word	0x000355a9
   186bc:	00034a15 	.word	0x00034a15
   186c0:	e826d695 	.word	0xe826d695
   186c4:	3e112e0b 	.word	0x3e112e0b
   186c8:	00033d8d 	.word	0x00033d8d
   186cc:	40240000 	.word	0x40240000
   186d0:	00034f15 	.word	0x00034f15
   186d4:	3ff00000 	.word	0x3ff00000
   186d8:	000343ad 	.word	0x000343ad
   186dc:	00035541 	.word	0x00035541
   186e0:	40080000 	.word	0x40080000
   186e4:	0003372d 	.word	0x0003372d
   186e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   186ea:	005a      	lsls	r2, r3, #1
   186ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   186ee:	18d3      	adds	r3, r2, r3
   186f0:	1e5a      	subs	r2, r3, #1
   186f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   186f4:	0059      	lsls	r1, r3, #1
   186f6:	4b1d      	ldr	r3, [pc, #116]	; (1876c <_i2c_master_set_config+0x40c>)
   186f8:	0010      	movs	r0, r2
   186fa:	4798      	blx	r3
   186fc:	0003      	movs	r3, r0
   186fe:	3b01      	subs	r3, #1
   18700:	653b      	str	r3, [r7, #80]	; 0x50
   18702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18704:	2bff      	cmp	r3, #255	; 0xff
   18706:	dc08      	bgt.n	1871a <_i2c_master_set_config+0x3ba>
   18708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1870a:	2b00      	cmp	r3, #0
   1870c:	db05      	blt.n	1871a <_i2c_master_set_config+0x3ba>
   1870e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   18710:	2bff      	cmp	r3, #255	; 0xff
   18712:	dc02      	bgt.n	1871a <_i2c_master_set_config+0x3ba>
   18714:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   18716:	2b00      	cmp	r3, #0
   18718:	da06      	bge.n	18728 <_i2c_master_set_config+0x3c8>
   1871a:	233b      	movs	r3, #59	; 0x3b
   1871c:	2210      	movs	r2, #16
   1871e:	4694      	mov	ip, r2
   18720:	44bc      	add	ip, r7
   18722:	4463      	add	r3, ip
   18724:	2240      	movs	r2, #64	; 0x40
   18726:	701a      	strb	r2, [r3, #0]
   18728:	233b      	movs	r3, #59	; 0x3b
   1872a:	2210      	movs	r2, #16
   1872c:	4694      	mov	ip, r2
   1872e:	44bc      	add	ip, r7
   18730:	4463      	add	r3, ip
   18732:	781b      	ldrb	r3, [r3, #0]
   18734:	2b40      	cmp	r3, #64	; 0x40
   18736:	d00e      	beq.n	18756 <_i2c_master_set_config+0x3f6>
   18738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1873a:	22ff      	movs	r2, #255	; 0xff
   1873c:	401a      	ands	r2, r3
   1873e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   18740:	041b      	lsls	r3, r3, #16
   18742:	0019      	movs	r1, r3
   18744:	23ff      	movs	r3, #255	; 0xff
   18746:	041b      	lsls	r3, r3, #16
   18748:	400b      	ands	r3, r1
   1874a:	4313      	orrs	r3, r2
   1874c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   1874e:	0612      	lsls	r2, r2, #24
   18750:	431a      	orrs	r2, r3
   18752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   18754:	60da      	str	r2, [r3, #12]
   18756:	233b      	movs	r3, #59	; 0x3b
   18758:	2210      	movs	r2, #16
   1875a:	4694      	mov	ip, r2
   1875c:	44bc      	add	ip, r7
   1875e:	4463      	add	r3, ip
   18760:	781b      	ldrb	r3, [r3, #0]
   18762:	0018      	movs	r0, r3
   18764:	46bd      	mov	sp, r7
   18766:	b017      	add	sp, #92	; 0x5c
   18768:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1876a:	46c0      	nop			; (mov r8, r8)
   1876c:	0003372d 	.word	0x0003372d

00018770 <i2c_master_init>:
   18770:	b590      	push	{r4, r7, lr}
   18772:	b08b      	sub	sp, #44	; 0x2c
   18774:	af00      	add	r7, sp, #0
   18776:	60f8      	str	r0, [r7, #12]
   18778:	60b9      	str	r1, [r7, #8]
   1877a:	607a      	str	r2, [r7, #4]
   1877c:	68fb      	ldr	r3, [r7, #12]
   1877e:	68ba      	ldr	r2, [r7, #8]
   18780:	601a      	str	r2, [r3, #0]
   18782:	68fb      	ldr	r3, [r7, #12]
   18784:	681b      	ldr	r3, [r3, #0]
   18786:	627b      	str	r3, [r7, #36]	; 0x24
   18788:	68fb      	ldr	r3, [r7, #12]
   1878a:	681b      	ldr	r3, [r3, #0]
   1878c:	0018      	movs	r0, r3
   1878e:	4b3b      	ldr	r3, [pc, #236]	; (1887c <i2c_master_init+0x10c>)
   18790:	4798      	blx	r3
   18792:	0003      	movs	r3, r0
   18794:	623b      	str	r3, [r7, #32]
   18796:	6a3b      	ldr	r3, [r7, #32]
   18798:	3302      	adds	r3, #2
   1879a:	61fb      	str	r3, [r7, #28]
   1879c:	6a3b      	ldr	r3, [r7, #32]
   1879e:	3314      	adds	r3, #20
   187a0:	61bb      	str	r3, [r7, #24]
   187a2:	2201      	movs	r2, #1
   187a4:	69fb      	ldr	r3, [r7, #28]
   187a6:	409a      	lsls	r2, r3
   187a8:	0013      	movs	r3, r2
   187aa:	0019      	movs	r1, r3
   187ac:	2002      	movs	r0, #2
   187ae:	4b34      	ldr	r3, [pc, #208]	; (18880 <i2c_master_init+0x110>)
   187b0:	4798      	blx	r3
   187b2:	2314      	movs	r3, #20
   187b4:	18fb      	adds	r3, r7, r3
   187b6:	0018      	movs	r0, r3
   187b8:	4b32      	ldr	r3, [pc, #200]	; (18884 <i2c_master_init+0x114>)
   187ba:	4798      	blx	r3
   187bc:	687b      	ldr	r3, [r7, #4]
   187be:	7b1a      	ldrb	r2, [r3, #12]
   187c0:	2314      	movs	r3, #20
   187c2:	18fb      	adds	r3, r7, r3
   187c4:	701a      	strb	r2, [r3, #0]
   187c6:	69bb      	ldr	r3, [r7, #24]
   187c8:	b2db      	uxtb	r3, r3
   187ca:	2214      	movs	r2, #20
   187cc:	18ba      	adds	r2, r7, r2
   187ce:	0011      	movs	r1, r2
   187d0:	0018      	movs	r0, r3
   187d2:	4b2d      	ldr	r3, [pc, #180]	; (18888 <i2c_master_init+0x118>)
   187d4:	4798      	blx	r3
   187d6:	69bb      	ldr	r3, [r7, #24]
   187d8:	b2db      	uxtb	r3, r3
   187da:	0018      	movs	r0, r3
   187dc:	4b2b      	ldr	r3, [pc, #172]	; (1888c <i2c_master_init+0x11c>)
   187de:	4798      	blx	r3
   187e0:	687b      	ldr	r3, [r7, #4]
   187e2:	7b1b      	ldrb	r3, [r3, #12]
   187e4:	2100      	movs	r1, #0
   187e6:	0018      	movs	r0, r3
   187e8:	4b29      	ldr	r3, [pc, #164]	; (18890 <i2c_master_init+0x120>)
   187ea:	4798      	blx	r3
   187ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   187ee:	681b      	ldr	r3, [r3, #0]
   187f0:	2202      	movs	r2, #2
   187f2:	4013      	ands	r3, r2
   187f4:	d001      	beq.n	187fa <i2c_master_init+0x8a>
   187f6:	231c      	movs	r3, #28
   187f8:	e03b      	b.n	18872 <i2c_master_init+0x102>
   187fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   187fc:	681b      	ldr	r3, [r3, #0]
   187fe:	2201      	movs	r2, #1
   18800:	4013      	ands	r3, r2
   18802:	d001      	beq.n	18808 <i2c_master_init+0x98>
   18804:	2305      	movs	r3, #5
   18806:	e034      	b.n	18872 <i2c_master_init+0x102>
   18808:	68fb      	ldr	r3, [r7, #12]
   1880a:	681b      	ldr	r3, [r3, #0]
   1880c:	2217      	movs	r2, #23
   1880e:	18bc      	adds	r4, r7, r2
   18810:	0018      	movs	r0, r3
   18812:	4b1a      	ldr	r3, [pc, #104]	; (1887c <i2c_master_init+0x10c>)
   18814:	4798      	blx	r3
   18816:	0003      	movs	r3, r0
   18818:	7023      	strb	r3, [r4, #0]
   1881a:	4a1e      	ldr	r2, [pc, #120]	; (18894 <i2c_master_init+0x124>)
   1881c:	2317      	movs	r3, #23
   1881e:	18fb      	adds	r3, r7, r3
   18820:	781b      	ldrb	r3, [r3, #0]
   18822:	0011      	movs	r1, r2
   18824:	0018      	movs	r0, r3
   18826:	4b1c      	ldr	r3, [pc, #112]	; (18898 <i2c_master_init+0x128>)
   18828:	4798      	blx	r3
   1882a:	2317      	movs	r3, #23
   1882c:	18fb      	adds	r3, r7, r3
   1882e:	781a      	ldrb	r2, [r3, #0]
   18830:	4b1a      	ldr	r3, [pc, #104]	; (1889c <i2c_master_init+0x12c>)
   18832:	0092      	lsls	r2, r2, #2
   18834:	68f9      	ldr	r1, [r7, #12]
   18836:	50d1      	str	r1, [r2, r3]
   18838:	68fb      	ldr	r3, [r7, #12]
   1883a:	2200      	movs	r2, #0
   1883c:	761a      	strb	r2, [r3, #24]
   1883e:	68fb      	ldr	r3, [r7, #12]
   18840:	2200      	movs	r2, #0
   18842:	765a      	strb	r2, [r3, #25]
   18844:	68fb      	ldr	r3, [r7, #12]
   18846:	2200      	movs	r2, #0
   18848:	835a      	strh	r2, [r3, #26]
   1884a:	68fb      	ldr	r3, [r7, #12]
   1884c:	2200      	movs	r2, #0
   1884e:	839a      	strh	r2, [r3, #28]
   18850:	68fb      	ldr	r3, [r7, #12]
   18852:	2225      	movs	r2, #37	; 0x25
   18854:	2100      	movs	r1, #0
   18856:	5499      	strb	r1, [r3, r2]
   18858:	68fb      	ldr	r3, [r7, #12]
   1885a:	2200      	movs	r2, #0
   1885c:	621a      	str	r2, [r3, #32]
   1885e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18860:	2214      	movs	r2, #20
   18862:	601a      	str	r2, [r3, #0]
   18864:	687a      	ldr	r2, [r7, #4]
   18866:	68fb      	ldr	r3, [r7, #12]
   18868:	0011      	movs	r1, r2
   1886a:	0018      	movs	r0, r3
   1886c:	4b0c      	ldr	r3, [pc, #48]	; (188a0 <i2c_master_init+0x130>)
   1886e:	4798      	blx	r3
   18870:	0003      	movs	r3, r0
   18872:	0018      	movs	r0, r3
   18874:	46bd      	mov	sp, r7
   18876:	b00b      	add	sp, #44	; 0x2c
   18878:	bd90      	pop	{r4, r7, pc}
   1887a:	46c0      	nop			; (mov r8, r8)
   1887c:	000282e1 	.word	0x000282e1
   18880:	000181c5 	.word	0x000181c5
   18884:	000181ad 	.word	0x000181ad
   18888:	0002ab71 	.word	0x0002ab71
   1888c:	0002abb5 	.word	0x0002abb5
   18890:	00028099 	.word	0x00028099
   18894:	00013825 	.word	0x00013825
   18898:	00028345 	.word	0x00028345
   1889c:	20005848 	.word	0x20005848
   188a0:	00018361 	.word	0x00018361

000188a4 <i2c_master_reset>:
   188a4:	b580      	push	{r7, lr}
   188a6:	b084      	sub	sp, #16
   188a8:	af00      	add	r7, sp, #0
   188aa:	6078      	str	r0, [r7, #4]
   188ac:	687b      	ldr	r3, [r7, #4]
   188ae:	681b      	ldr	r3, [r3, #0]
   188b0:	60fb      	str	r3, [r7, #12]
   188b2:	687b      	ldr	r3, [r7, #4]
   188b4:	0018      	movs	r0, r3
   188b6:	4b0f      	ldr	r3, [pc, #60]	; (188f4 <i2c_master_reset+0x50>)
   188b8:	4798      	blx	r3
   188ba:	687b      	ldr	r3, [r7, #4]
   188bc:	0018      	movs	r0, r3
   188be:	4b0e      	ldr	r3, [pc, #56]	; (188f8 <i2c_master_reset+0x54>)
   188c0:	4798      	blx	r3
   188c2:	4b0e      	ldr	r3, [pc, #56]	; (188fc <i2c_master_reset+0x58>)
   188c4:	4798      	blx	r3
   188c6:	687b      	ldr	r3, [r7, #4]
   188c8:	681b      	ldr	r3, [r3, #0]
   188ca:	0018      	movs	r0, r3
   188cc:	4b0c      	ldr	r3, [pc, #48]	; (18900 <i2c_master_reset+0x5c>)
   188ce:	4798      	blx	r3
   188d0:	0003      	movs	r3, r0
   188d2:	0018      	movs	r0, r3
   188d4:	4b0b      	ldr	r3, [pc, #44]	; (18904 <i2c_master_reset+0x60>)
   188d6:	4798      	blx	r3
   188d8:	4b0b      	ldr	r3, [pc, #44]	; (18908 <i2c_master_reset+0x64>)
   188da:	4798      	blx	r3
   188dc:	687b      	ldr	r3, [r7, #4]
   188de:	0018      	movs	r0, r3
   188e0:	4b04      	ldr	r3, [pc, #16]	; (188f4 <i2c_master_reset+0x50>)
   188e2:	4798      	blx	r3
   188e4:	68fb      	ldr	r3, [r7, #12]
   188e6:	2201      	movs	r2, #1
   188e8:	601a      	str	r2, [r3, #0]
   188ea:	46c0      	nop			; (mov r8, r8)
   188ec:	46bd      	mov	sp, r7
   188ee:	b004      	add	sp, #16
   188f0:	bd80      	pop	{r7, pc}
   188f2:	46c0      	nop			; (mov r8, r8)
   188f4:	000182e5 	.word	0x000182e5
   188f8:	00018309 	.word	0x00018309
   188fc:	00018269 	.word	0x00018269
   18900:	000283b1 	.word	0x000283b1
   18904:	0002aced 	.word	0x0002aced
   18908:	0001827d 	.word	0x0001827d

0001890c <_i2c_master_address_response>:
   1890c:	b580      	push	{r7, lr}
   1890e:	b084      	sub	sp, #16
   18910:	af00      	add	r7, sp, #0
   18912:	6078      	str	r0, [r7, #4]
   18914:	687b      	ldr	r3, [r7, #4]
   18916:	681b      	ldr	r3, [r3, #0]
   18918:	60fb      	str	r3, [r7, #12]
   1891a:	68fb      	ldr	r3, [r7, #12]
   1891c:	7e1b      	ldrb	r3, [r3, #24]
   1891e:	b2db      	uxtb	r3, r3
   18920:	001a      	movs	r2, r3
   18922:	2302      	movs	r3, #2
   18924:	4013      	ands	r3, r2
   18926:	d00b      	beq.n	18940 <_i2c_master_address_response+0x34>
   18928:	68fb      	ldr	r3, [r7, #12]
   1892a:	2202      	movs	r2, #2
   1892c:	761a      	strb	r2, [r3, #24]
   1892e:	68fb      	ldr	r3, [r7, #12]
   18930:	8b5b      	ldrh	r3, [r3, #26]
   18932:	b29b      	uxth	r3, r3
   18934:	001a      	movs	r2, r3
   18936:	2302      	movs	r3, #2
   18938:	4013      	ands	r3, r2
   1893a:	d011      	beq.n	18960 <_i2c_master_address_response+0x54>
   1893c:	2341      	movs	r3, #65	; 0x41
   1893e:	e010      	b.n	18962 <_i2c_master_address_response+0x56>
   18940:	68fb      	ldr	r3, [r7, #12]
   18942:	8b5b      	ldrh	r3, [r3, #26]
   18944:	b29b      	uxth	r3, r3
   18946:	001a      	movs	r2, r3
   18948:	2304      	movs	r3, #4
   1894a:	4013      	ands	r3, r2
   1894c:	d008      	beq.n	18960 <_i2c_master_address_response+0x54>
   1894e:	68fb      	ldr	r3, [r7, #12]
   18950:	685b      	ldr	r3, [r3, #4]
   18952:	22c0      	movs	r2, #192	; 0xc0
   18954:	0292      	lsls	r2, r2, #10
   18956:	431a      	orrs	r2, r3
   18958:	68fb      	ldr	r3, [r7, #12]
   1895a:	605a      	str	r2, [r3, #4]
   1895c:	2318      	movs	r3, #24
   1895e:	e000      	b.n	18962 <_i2c_master_address_response+0x56>
   18960:	2300      	movs	r3, #0
   18962:	0018      	movs	r0, r3
   18964:	46bd      	mov	sp, r7
   18966:	b004      	add	sp, #16
   18968:	bd80      	pop	{r7, pc}

0001896a <_i2c_master_wait_for_bus>:
   1896a:	b580      	push	{r7, lr}
   1896c:	b084      	sub	sp, #16
   1896e:	af00      	add	r7, sp, #0
   18970:	6078      	str	r0, [r7, #4]
   18972:	687b      	ldr	r3, [r7, #4]
   18974:	681b      	ldr	r3, [r3, #0]
   18976:	60bb      	str	r3, [r7, #8]
   18978:	230e      	movs	r3, #14
   1897a:	18fb      	adds	r3, r7, r3
   1897c:	2200      	movs	r2, #0
   1897e:	801a      	strh	r2, [r3, #0]
   18980:	e00f      	b.n	189a2 <_i2c_master_wait_for_bus+0x38>
   18982:	230e      	movs	r3, #14
   18984:	18fb      	adds	r3, r7, r3
   18986:	220e      	movs	r2, #14
   18988:	18ba      	adds	r2, r7, r2
   1898a:	8812      	ldrh	r2, [r2, #0]
   1898c:	3201      	adds	r2, #1
   1898e:	801a      	strh	r2, [r3, #0]
   18990:	687b      	ldr	r3, [r7, #4]
   18992:	891b      	ldrh	r3, [r3, #8]
   18994:	220e      	movs	r2, #14
   18996:	18ba      	adds	r2, r7, r2
   18998:	8812      	ldrh	r2, [r2, #0]
   1899a:	429a      	cmp	r2, r3
   1899c:	d301      	bcc.n	189a2 <_i2c_master_wait_for_bus+0x38>
   1899e:	2312      	movs	r3, #18
   189a0:	e00e      	b.n	189c0 <_i2c_master_wait_for_bus+0x56>
   189a2:	68bb      	ldr	r3, [r7, #8]
   189a4:	7e1b      	ldrb	r3, [r3, #24]
   189a6:	b2db      	uxtb	r3, r3
   189a8:	001a      	movs	r2, r3
   189aa:	2301      	movs	r3, #1
   189ac:	4013      	ands	r3, r2
   189ae:	d106      	bne.n	189be <_i2c_master_wait_for_bus+0x54>
   189b0:	68bb      	ldr	r3, [r7, #8]
   189b2:	7e1b      	ldrb	r3, [r3, #24]
   189b4:	b2db      	uxtb	r3, r3
   189b6:	001a      	movs	r2, r3
   189b8:	2302      	movs	r3, #2
   189ba:	4013      	ands	r3, r2
   189bc:	d0e1      	beq.n	18982 <_i2c_master_wait_for_bus+0x18>
   189be:	2300      	movs	r3, #0
   189c0:	0018      	movs	r0, r3
   189c2:	46bd      	mov	sp, r7
   189c4:	b004      	add	sp, #16
   189c6:	bd80      	pop	{r7, pc}

000189c8 <_i2c_master_send_hs_master_code>:
   189c8:	b590      	push	{r4, r7, lr}
   189ca:	b085      	sub	sp, #20
   189cc:	af00      	add	r7, sp, #0
   189ce:	6078      	str	r0, [r7, #4]
   189d0:	000a      	movs	r2, r1
   189d2:	1cfb      	adds	r3, r7, #3
   189d4:	701a      	strb	r2, [r3, #0]
   189d6:	687b      	ldr	r3, [r7, #4]
   189d8:	681b      	ldr	r3, [r3, #0]
   189da:	60fb      	str	r3, [r7, #12]
   189dc:	68fb      	ldr	r3, [r7, #12]
   189de:	685b      	ldr	r3, [r3, #4]
   189e0:	2280      	movs	r2, #128	; 0x80
   189e2:	02d2      	lsls	r2, r2, #11
   189e4:	431a      	orrs	r2, r3
   189e6:	68fb      	ldr	r3, [r7, #12]
   189e8:	605a      	str	r2, [r3, #4]
   189ea:	1cfb      	adds	r3, r7, #3
   189ec:	781a      	ldrb	r2, [r3, #0]
   189ee:	68fb      	ldr	r3, [r7, #12]
   189f0:	625a      	str	r2, [r3, #36]	; 0x24
   189f2:	230b      	movs	r3, #11
   189f4:	18fc      	adds	r4, r7, r3
   189f6:	687b      	ldr	r3, [r7, #4]
   189f8:	0018      	movs	r0, r3
   189fa:	4b07      	ldr	r3, [pc, #28]	; (18a18 <_i2c_master_send_hs_master_code+0x50>)
   189fc:	4798      	blx	r3
   189fe:	0003      	movs	r3, r0
   18a00:	7023      	strb	r3, [r4, #0]
   18a02:	68fb      	ldr	r3, [r7, #12]
   18a04:	2201      	movs	r2, #1
   18a06:	761a      	strb	r2, [r3, #24]
   18a08:	230b      	movs	r3, #11
   18a0a:	18fb      	adds	r3, r7, r3
   18a0c:	781b      	ldrb	r3, [r3, #0]
   18a0e:	0018      	movs	r0, r3
   18a10:	46bd      	mov	sp, r7
   18a12:	b005      	add	sp, #20
   18a14:	bd90      	pop	{r4, r7, pc}
   18a16:	46c0      	nop			; (mov r8, r8)
   18a18:	0001896b 	.word	0x0001896b

00018a1c <TC3_Handler>:
   18a1c:	b580      	push	{r7, lr}
   18a1e:	af00      	add	r7, sp, #0
   18a20:	2000      	movs	r0, #0
   18a22:	4b02      	ldr	r3, [pc, #8]	; (18a2c <TC3_Handler+0x10>)
   18a24:	4798      	blx	r3
   18a26:	46c0      	nop			; (mov r8, r8)
   18a28:	46bd      	mov	sp, r7
   18a2a:	bd80      	pop	{r7, pc}
   18a2c:	00018a59 	.word	0x00018a59

00018a30 <TC4_Handler>:
   18a30:	b580      	push	{r7, lr}
   18a32:	af00      	add	r7, sp, #0
   18a34:	2001      	movs	r0, #1
   18a36:	4b02      	ldr	r3, [pc, #8]	; (18a40 <TC4_Handler+0x10>)
   18a38:	4798      	blx	r3
   18a3a:	46c0      	nop			; (mov r8, r8)
   18a3c:	46bd      	mov	sp, r7
   18a3e:	bd80      	pop	{r7, pc}
   18a40:	00018a59 	.word	0x00018a59

00018a44 <TC5_Handler>:
   18a44:	b580      	push	{r7, lr}
   18a46:	af00      	add	r7, sp, #0
   18a48:	2002      	movs	r0, #2
   18a4a:	4b02      	ldr	r3, [pc, #8]	; (18a54 <TC5_Handler+0x10>)
   18a4c:	4798      	blx	r3
   18a4e:	46c0      	nop			; (mov r8, r8)
   18a50:	46bd      	mov	sp, r7
   18a52:	bd80      	pop	{r7, pc}
   18a54:	00018a59 	.word	0x00018a59

00018a58 <_tc_interrupt_handler>:
   18a58:	b580      	push	{r7, lr}
   18a5a:	b084      	sub	sp, #16
   18a5c:	af00      	add	r7, sp, #0
   18a5e:	0002      	movs	r2, r0
   18a60:	1dfb      	adds	r3, r7, #7
   18a62:	701a      	strb	r2, [r3, #0]
   18a64:	1dfb      	adds	r3, r7, #7
   18a66:	781a      	ldrb	r2, [r3, #0]
   18a68:	4b28      	ldr	r3, [pc, #160]	; (18b0c <_tc_interrupt_handler+0xb4>)
   18a6a:	0092      	lsls	r2, r2, #2
   18a6c:	58d3      	ldr	r3, [r2, r3]
   18a6e:	60fb      	str	r3, [r7, #12]
   18a70:	68fb      	ldr	r3, [r7, #12]
   18a72:	681b      	ldr	r3, [r3, #0]
   18a74:	7b9b      	ldrb	r3, [r3, #14]
   18a76:	b2db      	uxtb	r3, r3
   18a78:	68fa      	ldr	r2, [r7, #12]
   18a7a:	7e12      	ldrb	r2, [r2, #24]
   18a7c:	4013      	ands	r3, r2
   18a7e:	b2da      	uxtb	r2, r3
   18a80:	68fb      	ldr	r3, [r7, #12]
   18a82:	7e59      	ldrb	r1, [r3, #25]
   18a84:	230b      	movs	r3, #11
   18a86:	18fb      	adds	r3, r7, r3
   18a88:	400a      	ands	r2, r1
   18a8a:	701a      	strb	r2, [r3, #0]
   18a8c:	230b      	movs	r3, #11
   18a8e:	18fb      	adds	r3, r7, r3
   18a90:	781b      	ldrb	r3, [r3, #0]
   18a92:	2201      	movs	r2, #1
   18a94:	4013      	ands	r3, r2
   18a96:	d008      	beq.n	18aaa <_tc_interrupt_handler+0x52>
   18a98:	68fb      	ldr	r3, [r7, #12]
   18a9a:	689b      	ldr	r3, [r3, #8]
   18a9c:	68fa      	ldr	r2, [r7, #12]
   18a9e:	0010      	movs	r0, r2
   18aa0:	4798      	blx	r3
   18aa2:	68fb      	ldr	r3, [r7, #12]
   18aa4:	681b      	ldr	r3, [r3, #0]
   18aa6:	2201      	movs	r2, #1
   18aa8:	739a      	strb	r2, [r3, #14]
   18aaa:	230b      	movs	r3, #11
   18aac:	18fb      	adds	r3, r7, r3
   18aae:	781b      	ldrb	r3, [r3, #0]
   18ab0:	2202      	movs	r2, #2
   18ab2:	4013      	ands	r3, r2
   18ab4:	d008      	beq.n	18ac8 <_tc_interrupt_handler+0x70>
   18ab6:	68fb      	ldr	r3, [r7, #12]
   18ab8:	68db      	ldr	r3, [r3, #12]
   18aba:	68fa      	ldr	r2, [r7, #12]
   18abc:	0010      	movs	r0, r2
   18abe:	4798      	blx	r3
   18ac0:	68fb      	ldr	r3, [r7, #12]
   18ac2:	681b      	ldr	r3, [r3, #0]
   18ac4:	2202      	movs	r2, #2
   18ac6:	739a      	strb	r2, [r3, #14]
   18ac8:	230b      	movs	r3, #11
   18aca:	18fb      	adds	r3, r7, r3
   18acc:	781b      	ldrb	r3, [r3, #0]
   18ace:	2210      	movs	r2, #16
   18ad0:	4013      	ands	r3, r2
   18ad2:	d008      	beq.n	18ae6 <_tc_interrupt_handler+0x8e>
   18ad4:	68fb      	ldr	r3, [r7, #12]
   18ad6:	691b      	ldr	r3, [r3, #16]
   18ad8:	68fa      	ldr	r2, [r7, #12]
   18ada:	0010      	movs	r0, r2
   18adc:	4798      	blx	r3
   18ade:	68fb      	ldr	r3, [r7, #12]
   18ae0:	681b      	ldr	r3, [r3, #0]
   18ae2:	2210      	movs	r2, #16
   18ae4:	739a      	strb	r2, [r3, #14]
   18ae6:	230b      	movs	r3, #11
   18ae8:	18fb      	adds	r3, r7, r3
   18aea:	781b      	ldrb	r3, [r3, #0]
   18aec:	2220      	movs	r2, #32
   18aee:	4013      	ands	r3, r2
   18af0:	d008      	beq.n	18b04 <_tc_interrupt_handler+0xac>
   18af2:	68fb      	ldr	r3, [r7, #12]
   18af4:	695b      	ldr	r3, [r3, #20]
   18af6:	68fa      	ldr	r2, [r7, #12]
   18af8:	0010      	movs	r0, r2
   18afa:	4798      	blx	r3
   18afc:	68fb      	ldr	r3, [r7, #12]
   18afe:	681b      	ldr	r3, [r3, #0]
   18b00:	2220      	movs	r2, #32
   18b02:	739a      	strb	r2, [r3, #14]
   18b04:	46c0      	nop			; (mov r8, r8)
   18b06:	46bd      	mov	sp, r7
   18b08:	b004      	add	sp, #16
   18b0a:	bd80      	pop	{r7, pc}
   18b0c:	20004630 	.word	0x20004630

00018b10 <FreeRTOS_CLIRegisterCommand>:
   18b10:	b580      	push	{r7, lr}
   18b12:	b084      	sub	sp, #16
   18b14:	af00      	add	r7, sp, #0
   18b16:	6078      	str	r0, [r7, #4]
   18b18:	2300      	movs	r3, #0
   18b1a:	60fb      	str	r3, [r7, #12]
   18b1c:	687b      	ldr	r3, [r7, #4]
   18b1e:	2b00      	cmp	r3, #0
   18b20:	d101      	bne.n	18b26 <FreeRTOS_CLIRegisterCommand+0x16>
   18b22:	b672      	cpsid	i
   18b24:	e7fe      	b.n	18b24 <FreeRTOS_CLIRegisterCommand+0x14>
   18b26:	2008      	movs	r0, #8
   18b28:	4b11      	ldr	r3, [pc, #68]	; (18b70 <FreeRTOS_CLIRegisterCommand+0x60>)
   18b2a:	4798      	blx	r3
   18b2c:	0003      	movs	r3, r0
   18b2e:	60bb      	str	r3, [r7, #8]
   18b30:	68bb      	ldr	r3, [r7, #8]
   18b32:	2b00      	cmp	r3, #0
   18b34:	d101      	bne.n	18b3a <FreeRTOS_CLIRegisterCommand+0x2a>
   18b36:	b672      	cpsid	i
   18b38:	e7fe      	b.n	18b38 <FreeRTOS_CLIRegisterCommand+0x28>
   18b3a:	68bb      	ldr	r3, [r7, #8]
   18b3c:	2b00      	cmp	r3, #0
   18b3e:	d012      	beq.n	18b66 <FreeRTOS_CLIRegisterCommand+0x56>
   18b40:	4b0c      	ldr	r3, [pc, #48]	; (18b74 <FreeRTOS_CLIRegisterCommand+0x64>)
   18b42:	4798      	blx	r3
   18b44:	68bb      	ldr	r3, [r7, #8]
   18b46:	687a      	ldr	r2, [r7, #4]
   18b48:	601a      	str	r2, [r3, #0]
   18b4a:	68bb      	ldr	r3, [r7, #8]
   18b4c:	2200      	movs	r2, #0
   18b4e:	605a      	str	r2, [r3, #4]
   18b50:	4b09      	ldr	r3, [pc, #36]	; (18b78 <FreeRTOS_CLIRegisterCommand+0x68>)
   18b52:	681b      	ldr	r3, [r3, #0]
   18b54:	68ba      	ldr	r2, [r7, #8]
   18b56:	605a      	str	r2, [r3, #4]
   18b58:	4b07      	ldr	r3, [pc, #28]	; (18b78 <FreeRTOS_CLIRegisterCommand+0x68>)
   18b5a:	68ba      	ldr	r2, [r7, #8]
   18b5c:	601a      	str	r2, [r3, #0]
   18b5e:	4b07      	ldr	r3, [pc, #28]	; (18b7c <FreeRTOS_CLIRegisterCommand+0x6c>)
   18b60:	4798      	blx	r3
   18b62:	2301      	movs	r3, #1
   18b64:	60fb      	str	r3, [r7, #12]
   18b66:	68fb      	ldr	r3, [r7, #12]
   18b68:	0018      	movs	r0, r3
   18b6a:	46bd      	mov	sp, r7
   18b6c:	b004      	add	sp, #16
   18b6e:	bd80      	pop	{r7, pc}
   18b70:	0001af21 	.word	0x0001af21
   18b74:	0001ade9 	.word	0x0001ade9
   18b78:	200000f4 	.word	0x200000f4
   18b7c:	0001ae0d 	.word	0x0001ae0d

00018b80 <FreeRTOS_CLIProcessCommand>:
   18b80:	b580      	push	{r7, lr}
   18b82:	b088      	sub	sp, #32
   18b84:	af00      	add	r7, sp, #0
   18b86:	60f8      	str	r0, [r7, #12]
   18b88:	60b9      	str	r1, [r7, #8]
   18b8a:	607a      	str	r2, [r7, #4]
   18b8c:	2301      	movs	r3, #1
   18b8e:	61fb      	str	r3, [r7, #28]
   18b90:	4b3d      	ldr	r3, [pc, #244]	; (18c88 <FreeRTOS_CLIProcessCommand+0x108>)
   18b92:	681b      	ldr	r3, [r3, #0]
   18b94:	2b00      	cmp	r3, #0
   18b96:	d144      	bne.n	18c22 <FreeRTOS_CLIProcessCommand+0xa2>
   18b98:	4b3b      	ldr	r3, [pc, #236]	; (18c88 <FreeRTOS_CLIProcessCommand+0x108>)
   18b9a:	4a3c      	ldr	r2, [pc, #240]	; (18c8c <FreeRTOS_CLIProcessCommand+0x10c>)
   18b9c:	601a      	str	r2, [r3, #0]
   18b9e:	e03a      	b.n	18c16 <FreeRTOS_CLIProcessCommand+0x96>
   18ba0:	4b39      	ldr	r3, [pc, #228]	; (18c88 <FreeRTOS_CLIProcessCommand+0x108>)
   18ba2:	681b      	ldr	r3, [r3, #0]
   18ba4:	681b      	ldr	r3, [r3, #0]
   18ba6:	681b      	ldr	r3, [r3, #0]
   18ba8:	61bb      	str	r3, [r7, #24]
   18baa:	69bb      	ldr	r3, [r7, #24]
   18bac:	0018      	movs	r0, r3
   18bae:	4b38      	ldr	r3, [pc, #224]	; (18c90 <FreeRTOS_CLIProcessCommand+0x110>)
   18bb0:	4798      	blx	r3
   18bb2:	0003      	movs	r3, r0
   18bb4:	617b      	str	r3, [r7, #20]
   18bb6:	68fa      	ldr	r2, [r7, #12]
   18bb8:	697b      	ldr	r3, [r7, #20]
   18bba:	18d3      	adds	r3, r2, r3
   18bbc:	781b      	ldrb	r3, [r3, #0]
   18bbe:	2b20      	cmp	r3, #32
   18bc0:	d005      	beq.n	18bce <FreeRTOS_CLIProcessCommand+0x4e>
   18bc2:	68fa      	ldr	r2, [r7, #12]
   18bc4:	697b      	ldr	r3, [r7, #20]
   18bc6:	18d3      	adds	r3, r2, r3
   18bc8:	781b      	ldrb	r3, [r3, #0]
   18bca:	2b00      	cmp	r3, #0
   18bcc:	d11e      	bne.n	18c0c <FreeRTOS_CLIProcessCommand+0x8c>
   18bce:	697a      	ldr	r2, [r7, #20]
   18bd0:	69b9      	ldr	r1, [r7, #24]
   18bd2:	68fb      	ldr	r3, [r7, #12]
   18bd4:	0018      	movs	r0, r3
   18bd6:	4b2f      	ldr	r3, [pc, #188]	; (18c94 <FreeRTOS_CLIProcessCommand+0x114>)
   18bd8:	4798      	blx	r3
   18bda:	1e03      	subs	r3, r0, #0
   18bdc:	d116      	bne.n	18c0c <FreeRTOS_CLIProcessCommand+0x8c>
   18bde:	4b2a      	ldr	r3, [pc, #168]	; (18c88 <FreeRTOS_CLIProcessCommand+0x108>)
   18be0:	681b      	ldr	r3, [r3, #0]
   18be2:	681b      	ldr	r3, [r3, #0]
   18be4:	7b1b      	ldrb	r3, [r3, #12]
   18be6:	b25b      	sxtb	r3, r3
   18be8:	2b00      	cmp	r3, #0
   18bea:	db19      	blt.n	18c20 <FreeRTOS_CLIProcessCommand+0xa0>
   18bec:	68fb      	ldr	r3, [r7, #12]
   18bee:	0018      	movs	r0, r3
   18bf0:	4b29      	ldr	r3, [pc, #164]	; (18c98 <FreeRTOS_CLIProcessCommand+0x118>)
   18bf2:	4798      	blx	r3
   18bf4:	0003      	movs	r3, r0
   18bf6:	001a      	movs	r2, r3
   18bf8:	4b23      	ldr	r3, [pc, #140]	; (18c88 <FreeRTOS_CLIProcessCommand+0x108>)
   18bfa:	681b      	ldr	r3, [r3, #0]
   18bfc:	681b      	ldr	r3, [r3, #0]
   18bfe:	7b1b      	ldrb	r3, [r3, #12]
   18c00:	b25b      	sxtb	r3, r3
   18c02:	429a      	cmp	r2, r3
   18c04:	d00c      	beq.n	18c20 <FreeRTOS_CLIProcessCommand+0xa0>
   18c06:	2300      	movs	r3, #0
   18c08:	61fb      	str	r3, [r7, #28]
   18c0a:	e009      	b.n	18c20 <FreeRTOS_CLIProcessCommand+0xa0>
   18c0c:	4b1e      	ldr	r3, [pc, #120]	; (18c88 <FreeRTOS_CLIProcessCommand+0x108>)
   18c0e:	681b      	ldr	r3, [r3, #0]
   18c10:	685a      	ldr	r2, [r3, #4]
   18c12:	4b1d      	ldr	r3, [pc, #116]	; (18c88 <FreeRTOS_CLIProcessCommand+0x108>)
   18c14:	601a      	str	r2, [r3, #0]
   18c16:	4b1c      	ldr	r3, [pc, #112]	; (18c88 <FreeRTOS_CLIProcessCommand+0x108>)
   18c18:	681b      	ldr	r3, [r3, #0]
   18c1a:	2b00      	cmp	r3, #0
   18c1c:	d1c0      	bne.n	18ba0 <FreeRTOS_CLIProcessCommand+0x20>
   18c1e:	e000      	b.n	18c22 <FreeRTOS_CLIProcessCommand+0xa2>
   18c20:	46c0      	nop			; (mov r8, r8)
   18c22:	4b19      	ldr	r3, [pc, #100]	; (18c88 <FreeRTOS_CLIProcessCommand+0x108>)
   18c24:	681b      	ldr	r3, [r3, #0]
   18c26:	2b00      	cmp	r3, #0
   18c28:	d00c      	beq.n	18c44 <FreeRTOS_CLIProcessCommand+0xc4>
   18c2a:	69fb      	ldr	r3, [r7, #28]
   18c2c:	2b00      	cmp	r3, #0
   18c2e:	d109      	bne.n	18c44 <FreeRTOS_CLIProcessCommand+0xc4>
   18c30:	687a      	ldr	r2, [r7, #4]
   18c32:	491a      	ldr	r1, [pc, #104]	; (18c9c <FreeRTOS_CLIProcessCommand+0x11c>)
   18c34:	68bb      	ldr	r3, [r7, #8]
   18c36:	0018      	movs	r0, r3
   18c38:	4b19      	ldr	r3, [pc, #100]	; (18ca0 <FreeRTOS_CLIProcessCommand+0x120>)
   18c3a:	4798      	blx	r3
   18c3c:	4b12      	ldr	r3, [pc, #72]	; (18c88 <FreeRTOS_CLIProcessCommand+0x108>)
   18c3e:	2200      	movs	r2, #0
   18c40:	601a      	str	r2, [r3, #0]
   18c42:	e01c      	b.n	18c7e <FreeRTOS_CLIProcessCommand+0xfe>
   18c44:	4b10      	ldr	r3, [pc, #64]	; (18c88 <FreeRTOS_CLIProcessCommand+0x108>)
   18c46:	681b      	ldr	r3, [r3, #0]
   18c48:	2b00      	cmp	r3, #0
   18c4a:	d010      	beq.n	18c6e <FreeRTOS_CLIProcessCommand+0xee>
   18c4c:	4b0e      	ldr	r3, [pc, #56]	; (18c88 <FreeRTOS_CLIProcessCommand+0x108>)
   18c4e:	681b      	ldr	r3, [r3, #0]
   18c50:	681b      	ldr	r3, [r3, #0]
   18c52:	689b      	ldr	r3, [r3, #8]
   18c54:	68fa      	ldr	r2, [r7, #12]
   18c56:	6879      	ldr	r1, [r7, #4]
   18c58:	68b8      	ldr	r0, [r7, #8]
   18c5a:	4798      	blx	r3
   18c5c:	0003      	movs	r3, r0
   18c5e:	61fb      	str	r3, [r7, #28]
   18c60:	69fb      	ldr	r3, [r7, #28]
   18c62:	2b00      	cmp	r3, #0
   18c64:	d10b      	bne.n	18c7e <FreeRTOS_CLIProcessCommand+0xfe>
   18c66:	4b08      	ldr	r3, [pc, #32]	; (18c88 <FreeRTOS_CLIProcessCommand+0x108>)
   18c68:	2200      	movs	r2, #0
   18c6a:	601a      	str	r2, [r3, #0]
   18c6c:	e007      	b.n	18c7e <FreeRTOS_CLIProcessCommand+0xfe>
   18c6e:	687a      	ldr	r2, [r7, #4]
   18c70:	490c      	ldr	r1, [pc, #48]	; (18ca4 <FreeRTOS_CLIProcessCommand+0x124>)
   18c72:	68bb      	ldr	r3, [r7, #8]
   18c74:	0018      	movs	r0, r3
   18c76:	4b0a      	ldr	r3, [pc, #40]	; (18ca0 <FreeRTOS_CLIProcessCommand+0x120>)
   18c78:	4798      	blx	r3
   18c7a:	2300      	movs	r3, #0
   18c7c:	61fb      	str	r3, [r7, #28]
   18c7e:	69fb      	ldr	r3, [r7, #28]
   18c80:	0018      	movs	r0, r3
   18c82:	46bd      	mov	sp, r7
   18c84:	b008      	add	sp, #32
   18c86:	bd80      	pop	{r7, pc}
   18c88:	20000cf8 	.word	0x20000cf8
   18c8c:	200000ec 	.word	0x200000ec
   18c90:	00035abf 	.word	0x00035abf
   18c94:	00035acd 	.word	0x00035acd
   18c98:	00018d09 	.word	0x00018d09
   18c9c:	00037b10 	.word	0x00037b10
   18ca0:	00035aef 	.word	0x00035aef
   18ca4:	00037b68 	.word	0x00037b68

00018ca8 <prvHelpCommand>:
   18ca8:	b580      	push	{r7, lr}
   18caa:	b086      	sub	sp, #24
   18cac:	af00      	add	r7, sp, #0
   18cae:	60f8      	str	r0, [r7, #12]
   18cb0:	60b9      	str	r1, [r7, #8]
   18cb2:	607a      	str	r2, [r7, #4]
   18cb4:	4b11      	ldr	r3, [pc, #68]	; (18cfc <prvHelpCommand+0x54>)
   18cb6:	681b      	ldr	r3, [r3, #0]
   18cb8:	2b00      	cmp	r3, #0
   18cba:	d102      	bne.n	18cc2 <prvHelpCommand+0x1a>
   18cbc:	4b0f      	ldr	r3, [pc, #60]	; (18cfc <prvHelpCommand+0x54>)
   18cbe:	4a10      	ldr	r2, [pc, #64]	; (18d00 <prvHelpCommand+0x58>)
   18cc0:	601a      	str	r2, [r3, #0]
   18cc2:	4b0e      	ldr	r3, [pc, #56]	; (18cfc <prvHelpCommand+0x54>)
   18cc4:	681b      	ldr	r3, [r3, #0]
   18cc6:	681b      	ldr	r3, [r3, #0]
   18cc8:	6859      	ldr	r1, [r3, #4]
   18cca:	68ba      	ldr	r2, [r7, #8]
   18ccc:	68fb      	ldr	r3, [r7, #12]
   18cce:	0018      	movs	r0, r3
   18cd0:	4b0c      	ldr	r3, [pc, #48]	; (18d04 <prvHelpCommand+0x5c>)
   18cd2:	4798      	blx	r3
   18cd4:	4b09      	ldr	r3, [pc, #36]	; (18cfc <prvHelpCommand+0x54>)
   18cd6:	681b      	ldr	r3, [r3, #0]
   18cd8:	685a      	ldr	r2, [r3, #4]
   18cda:	4b08      	ldr	r3, [pc, #32]	; (18cfc <prvHelpCommand+0x54>)
   18cdc:	601a      	str	r2, [r3, #0]
   18cde:	4b07      	ldr	r3, [pc, #28]	; (18cfc <prvHelpCommand+0x54>)
   18ce0:	681b      	ldr	r3, [r3, #0]
   18ce2:	2b00      	cmp	r3, #0
   18ce4:	d102      	bne.n	18cec <prvHelpCommand+0x44>
   18ce6:	2300      	movs	r3, #0
   18ce8:	617b      	str	r3, [r7, #20]
   18cea:	e001      	b.n	18cf0 <prvHelpCommand+0x48>
   18cec:	2301      	movs	r3, #1
   18cee:	617b      	str	r3, [r7, #20]
   18cf0:	697b      	ldr	r3, [r7, #20]
   18cf2:	0018      	movs	r0, r3
   18cf4:	46bd      	mov	sp, r7
   18cf6:	b006      	add	sp, #24
   18cf8:	bd80      	pop	{r7, pc}
   18cfa:	46c0      	nop			; (mov r8, r8)
   18cfc:	20000cfc 	.word	0x20000cfc
   18d00:	200000ec 	.word	0x200000ec
   18d04:	00035aef 	.word	0x00035aef

00018d08 <prvGetNumberOfParameters>:
   18d08:	b580      	push	{r7, lr}
   18d0a:	b084      	sub	sp, #16
   18d0c:	af00      	add	r7, sp, #0
   18d0e:	6078      	str	r0, [r7, #4]
   18d10:	230f      	movs	r3, #15
   18d12:	18fb      	adds	r3, r7, r3
   18d14:	2200      	movs	r2, #0
   18d16:	701a      	strb	r2, [r3, #0]
   18d18:	2300      	movs	r3, #0
   18d1a:	60bb      	str	r3, [r7, #8]
   18d1c:	e018      	b.n	18d50 <prvGetNumberOfParameters+0x48>
   18d1e:	687b      	ldr	r3, [r7, #4]
   18d20:	781b      	ldrb	r3, [r3, #0]
   18d22:	2b20      	cmp	r3, #32
   18d24:	d10f      	bne.n	18d46 <prvGetNumberOfParameters+0x3e>
   18d26:	68bb      	ldr	r3, [r7, #8]
   18d28:	2b01      	cmp	r3, #1
   18d2a:	d00e      	beq.n	18d4a <prvGetNumberOfParameters+0x42>
   18d2c:	230f      	movs	r3, #15
   18d2e:	18fb      	adds	r3, r7, r3
   18d30:	781b      	ldrb	r3, [r3, #0]
   18d32:	b25b      	sxtb	r3, r3
   18d34:	b2db      	uxtb	r3, r3
   18d36:	3301      	adds	r3, #1
   18d38:	b2da      	uxtb	r2, r3
   18d3a:	230f      	movs	r3, #15
   18d3c:	18fb      	adds	r3, r7, r3
   18d3e:	701a      	strb	r2, [r3, #0]
   18d40:	2301      	movs	r3, #1
   18d42:	60bb      	str	r3, [r7, #8]
   18d44:	e001      	b.n	18d4a <prvGetNumberOfParameters+0x42>
   18d46:	2300      	movs	r3, #0
   18d48:	60bb      	str	r3, [r7, #8]
   18d4a:	687b      	ldr	r3, [r7, #4]
   18d4c:	3301      	adds	r3, #1
   18d4e:	607b      	str	r3, [r7, #4]
   18d50:	687b      	ldr	r3, [r7, #4]
   18d52:	781b      	ldrb	r3, [r3, #0]
   18d54:	2b00      	cmp	r3, #0
   18d56:	d1e2      	bne.n	18d1e <prvGetNumberOfParameters+0x16>
   18d58:	68bb      	ldr	r3, [r7, #8]
   18d5a:	2b01      	cmp	r3, #1
   18d5c:	d109      	bne.n	18d72 <prvGetNumberOfParameters+0x6a>
   18d5e:	230f      	movs	r3, #15
   18d60:	18fb      	adds	r3, r7, r3
   18d62:	781b      	ldrb	r3, [r3, #0]
   18d64:	b25b      	sxtb	r3, r3
   18d66:	b2db      	uxtb	r3, r3
   18d68:	3b01      	subs	r3, #1
   18d6a:	b2da      	uxtb	r2, r3
   18d6c:	230f      	movs	r3, #15
   18d6e:	18fb      	adds	r3, r7, r3
   18d70:	701a      	strb	r2, [r3, #0]
   18d72:	230f      	movs	r3, #15
   18d74:	18fb      	adds	r3, r7, r3
   18d76:	781b      	ldrb	r3, [r3, #0]
   18d78:	b25b      	sxtb	r3, r3
   18d7a:	0018      	movs	r0, r3
   18d7c:	46bd      	mov	sp, r7
   18d7e:	b004      	add	sp, #16
   18d80:	bd80      	pop	{r7, pc}
	...

00018d84 <prvTraceGetQueueNumber>:
   18d84:	b580      	push	{r7, lr}
   18d86:	b082      	sub	sp, #8
   18d88:	af00      	add	r7, sp, #0
   18d8a:	6078      	str	r0, [r7, #4]
   18d8c:	687b      	ldr	r3, [r7, #4]
   18d8e:	0018      	movs	r0, r3
   18d90:	4b03      	ldr	r3, [pc, #12]	; (18da0 <prvTraceGetQueueNumber+0x1c>)
   18d92:	4798      	blx	r3
   18d94:	0003      	movs	r3, r0
   18d96:	0018      	movs	r0, r3
   18d98:	46bd      	mov	sp, r7
   18d9a:	b002      	add	sp, #8
   18d9c:	bd80      	pop	{r7, pc}
   18d9e:	46c0      	nop			; (mov r8, r8)
   18da0:	0001c549 	.word	0x0001c549

00018da4 <prvTraceGetQueueType>:
   18da4:	b580      	push	{r7, lr}
   18da6:	b082      	sub	sp, #8
   18da8:	af00      	add	r7, sp, #0
   18daa:	6078      	str	r0, [r7, #4]
   18dac:	687b      	ldr	r3, [r7, #4]
   18dae:	0018      	movs	r0, r3
   18db0:	4b03      	ldr	r3, [pc, #12]	; (18dc0 <prvTraceGetQueueType+0x1c>)
   18db2:	4798      	blx	r3
   18db4:	0003      	movs	r3, r0
   18db6:	0018      	movs	r0, r3
   18db8:	46bd      	mov	sp, r7
   18dba:	b002      	add	sp, #8
   18dbc:	bd80      	pop	{r7, pc}
   18dbe:	46c0      	nop			; (mov r8, r8)
   18dc0:	0001c575 	.word	0x0001c575

00018dc4 <prvTraceGetTaskNumberLow16>:
   18dc4:	b580      	push	{r7, lr}
   18dc6:	b082      	sub	sp, #8
   18dc8:	af00      	add	r7, sp, #0
   18dca:	6078      	str	r0, [r7, #4]
   18dcc:	687b      	ldr	r3, [r7, #4]
   18dce:	0018      	movs	r0, r3
   18dd0:	4b03      	ldr	r3, [pc, #12]	; (18de0 <prvTraceGetTaskNumberLow16+0x1c>)
   18dd2:	4798      	blx	r3
   18dd4:	0003      	movs	r3, r0
   18dd6:	b29b      	uxth	r3, r3
   18dd8:	0018      	movs	r0, r3
   18dda:	46bd      	mov	sp, r7
   18ddc:	b002      	add	sp, #8
   18dde:	bd80      	pop	{r7, pc}
   18de0:	0001d8a5 	.word	0x0001d8a5

00018de4 <prvTraceGetTaskNumberHigh16>:
   18de4:	b580      	push	{r7, lr}
   18de6:	b082      	sub	sp, #8
   18de8:	af00      	add	r7, sp, #0
   18dea:	6078      	str	r0, [r7, #4]
   18dec:	687b      	ldr	r3, [r7, #4]
   18dee:	0018      	movs	r0, r3
   18df0:	4b04      	ldr	r3, [pc, #16]	; (18e04 <prvTraceGetTaskNumberHigh16+0x20>)
   18df2:	4798      	blx	r3
   18df4:	0003      	movs	r3, r0
   18df6:	0c1b      	lsrs	r3, r3, #16
   18df8:	b29b      	uxth	r3, r3
   18dfa:	0018      	movs	r0, r3
   18dfc:	46bd      	mov	sp, r7
   18dfe:	b002      	add	sp, #8
   18e00:	bd80      	pop	{r7, pc}
   18e02:	46c0      	nop			; (mov r8, r8)
   18e04:	0001d8a5 	.word	0x0001d8a5

00018e08 <prvTraceSetTaskNumberLow16>:
   18e08:	b580      	push	{r7, lr}
   18e0a:	b082      	sub	sp, #8
   18e0c:	af00      	add	r7, sp, #0
   18e0e:	6078      	str	r0, [r7, #4]
   18e10:	000a      	movs	r2, r1
   18e12:	1cbb      	adds	r3, r7, #2
   18e14:	801a      	strh	r2, [r3, #0]
   18e16:	687b      	ldr	r3, [r7, #4]
   18e18:	0018      	movs	r0, r3
   18e1a:	4b08      	ldr	r3, [pc, #32]	; (18e3c <prvTraceSetTaskNumberLow16+0x34>)
   18e1c:	4798      	blx	r3
   18e1e:	0003      	movs	r3, r0
   18e20:	0c1b      	lsrs	r3, r3, #16
   18e22:	041a      	lsls	r2, r3, #16
   18e24:	1cbb      	adds	r3, r7, #2
   18e26:	881b      	ldrh	r3, [r3, #0]
   18e28:	431a      	orrs	r2, r3
   18e2a:	687b      	ldr	r3, [r7, #4]
   18e2c:	0011      	movs	r1, r2
   18e2e:	0018      	movs	r0, r3
   18e30:	4b03      	ldr	r3, [pc, #12]	; (18e40 <prvTraceSetTaskNumberLow16+0x38>)
   18e32:	4798      	blx	r3
   18e34:	46c0      	nop			; (mov r8, r8)
   18e36:	46bd      	mov	sp, r7
   18e38:	b002      	add	sp, #8
   18e3a:	bd80      	pop	{r7, pc}
   18e3c:	0001d8a5 	.word	0x0001d8a5
   18e40:	0001d8cd 	.word	0x0001d8cd

00018e44 <prvTraceSetTaskNumberHigh16>:
   18e44:	b580      	push	{r7, lr}
   18e46:	b082      	sub	sp, #8
   18e48:	af00      	add	r7, sp, #0
   18e4a:	6078      	str	r0, [r7, #4]
   18e4c:	000a      	movs	r2, r1
   18e4e:	1cbb      	adds	r3, r7, #2
   18e50:	801a      	strh	r2, [r3, #0]
   18e52:	687b      	ldr	r3, [r7, #4]
   18e54:	0018      	movs	r0, r3
   18e56:	4b09      	ldr	r3, [pc, #36]	; (18e7c <prvTraceSetTaskNumberHigh16+0x38>)
   18e58:	4798      	blx	r3
   18e5a:	0003      	movs	r3, r0
   18e5c:	041b      	lsls	r3, r3, #16
   18e5e:	0c1a      	lsrs	r2, r3, #16
   18e60:	1cbb      	adds	r3, r7, #2
   18e62:	881b      	ldrh	r3, [r3, #0]
   18e64:	041b      	lsls	r3, r3, #16
   18e66:	431a      	orrs	r2, r3
   18e68:	687b      	ldr	r3, [r7, #4]
   18e6a:	0011      	movs	r1, r2
   18e6c:	0018      	movs	r0, r3
   18e6e:	4b04      	ldr	r3, [pc, #16]	; (18e80 <prvTraceSetTaskNumberHigh16+0x3c>)
   18e70:	4798      	blx	r3
   18e72:	46c0      	nop			; (mov r8, r8)
   18e74:	46bd      	mov	sp, r7
   18e76:	b002      	add	sp, #8
   18e78:	bd80      	pop	{r7, pc}
   18e7a:	46c0      	nop			; (mov r8, r8)
   18e7c:	0001d8a5 	.word	0x0001d8a5
   18e80:	0001d8cd 	.word	0x0001d8cd

00018e84 <prvTraceGetQueueNumberLow16>:
   18e84:	b580      	push	{r7, lr}
   18e86:	b082      	sub	sp, #8
   18e88:	af00      	add	r7, sp, #0
   18e8a:	6078      	str	r0, [r7, #4]
   18e8c:	687b      	ldr	r3, [r7, #4]
   18e8e:	0018      	movs	r0, r3
   18e90:	4b03      	ldr	r3, [pc, #12]	; (18ea0 <prvTraceGetQueueNumberLow16+0x1c>)
   18e92:	4798      	blx	r3
   18e94:	0003      	movs	r3, r0
   18e96:	b29b      	uxth	r3, r3
   18e98:	0018      	movs	r0, r3
   18e9a:	46bd      	mov	sp, r7
   18e9c:	b002      	add	sp, #8
   18e9e:	bd80      	pop	{r7, pc}
   18ea0:	00018d85 	.word	0x00018d85

00018ea4 <prvTraceGetQueueNumberHigh16>:
   18ea4:	b580      	push	{r7, lr}
   18ea6:	b082      	sub	sp, #8
   18ea8:	af00      	add	r7, sp, #0
   18eaa:	6078      	str	r0, [r7, #4]
   18eac:	687b      	ldr	r3, [r7, #4]
   18eae:	0018      	movs	r0, r3
   18eb0:	4b04      	ldr	r3, [pc, #16]	; (18ec4 <prvTraceGetQueueNumberHigh16+0x20>)
   18eb2:	4798      	blx	r3
   18eb4:	0003      	movs	r3, r0
   18eb6:	0c1b      	lsrs	r3, r3, #16
   18eb8:	b29b      	uxth	r3, r3
   18eba:	0018      	movs	r0, r3
   18ebc:	46bd      	mov	sp, r7
   18ebe:	b002      	add	sp, #8
   18ec0:	bd80      	pop	{r7, pc}
   18ec2:	46c0      	nop			; (mov r8, r8)
   18ec4:	00018d85 	.word	0x00018d85

00018ec8 <prvTraceSetQueueNumberLow16>:
   18ec8:	b580      	push	{r7, lr}
   18eca:	b082      	sub	sp, #8
   18ecc:	af00      	add	r7, sp, #0
   18ece:	6078      	str	r0, [r7, #4]
   18ed0:	000a      	movs	r2, r1
   18ed2:	1cbb      	adds	r3, r7, #2
   18ed4:	801a      	strh	r2, [r3, #0]
   18ed6:	687b      	ldr	r3, [r7, #4]
   18ed8:	0018      	movs	r0, r3
   18eda:	4b08      	ldr	r3, [pc, #32]	; (18efc <prvTraceSetQueueNumberLow16+0x34>)
   18edc:	4798      	blx	r3
   18ede:	0003      	movs	r3, r0
   18ee0:	0c1b      	lsrs	r3, r3, #16
   18ee2:	041a      	lsls	r2, r3, #16
   18ee4:	1cbb      	adds	r3, r7, #2
   18ee6:	881b      	ldrh	r3, [r3, #0]
   18ee8:	431a      	orrs	r2, r3
   18eea:	687b      	ldr	r3, [r7, #4]
   18eec:	0011      	movs	r1, r2
   18eee:	0018      	movs	r0, r3
   18ef0:	4b03      	ldr	r3, [pc, #12]	; (18f00 <prvTraceSetQueueNumberLow16+0x38>)
   18ef2:	4798      	blx	r3
   18ef4:	46c0      	nop			; (mov r8, r8)
   18ef6:	46bd      	mov	sp, r7
   18ef8:	b002      	add	sp, #8
   18efa:	bd80      	pop	{r7, pc}
   18efc:	00018d85 	.word	0x00018d85
   18f00:	0001c55d 	.word	0x0001c55d

00018f04 <prvTraceSetQueueNumberHigh16>:
   18f04:	b580      	push	{r7, lr}
   18f06:	b082      	sub	sp, #8
   18f08:	af00      	add	r7, sp, #0
   18f0a:	6078      	str	r0, [r7, #4]
   18f0c:	000a      	movs	r2, r1
   18f0e:	1cbb      	adds	r3, r7, #2
   18f10:	801a      	strh	r2, [r3, #0]
   18f12:	687b      	ldr	r3, [r7, #4]
   18f14:	0018      	movs	r0, r3
   18f16:	4b09      	ldr	r3, [pc, #36]	; (18f3c <prvTraceSetQueueNumberHigh16+0x38>)
   18f18:	4798      	blx	r3
   18f1a:	0003      	movs	r3, r0
   18f1c:	041b      	lsls	r3, r3, #16
   18f1e:	0c1a      	lsrs	r2, r3, #16
   18f20:	1cbb      	adds	r3, r7, #2
   18f22:	881b      	ldrh	r3, [r3, #0]
   18f24:	041b      	lsls	r3, r3, #16
   18f26:	431a      	orrs	r2, r3
   18f28:	687b      	ldr	r3, [r7, #4]
   18f2a:	0011      	movs	r1, r2
   18f2c:	0018      	movs	r0, r3
   18f2e:	4b04      	ldr	r3, [pc, #16]	; (18f40 <prvTraceSetQueueNumberHigh16+0x3c>)
   18f30:	4798      	blx	r3
   18f32:	46c0      	nop			; (mov r8, r8)
   18f34:	46bd      	mov	sp, r7
   18f36:	b002      	add	sp, #8
   18f38:	bd80      	pop	{r7, pc}
   18f3a:	46c0      	nop			; (mov r8, r8)
   18f3c:	00018d85 	.word	0x00018d85
   18f40:	0001c55d 	.word	0x0001c55d

00018f44 <prvAddTaskToStackMonitor>:
   18f44:	b580      	push	{r7, lr}
   18f46:	b084      	sub	sp, #16
   18f48:	af00      	add	r7, sp, #0
   18f4a:	6078      	str	r0, [r7, #4]
   18f4c:	2300      	movs	r3, #0
   18f4e:	60fb      	str	r3, [r7, #12]
   18f50:	2300      	movs	r3, #0
   18f52:	60bb      	str	r3, [r7, #8]
   18f54:	e018      	b.n	18f88 <prvAddTaskToStackMonitor+0x44>
   18f56:	4b14      	ldr	r3, [pc, #80]	; (18fa8 <prvAddTaskToStackMonitor+0x64>)
   18f58:	68ba      	ldr	r2, [r7, #8]
   18f5a:	00d2      	lsls	r2, r2, #3
   18f5c:	58d3      	ldr	r3, [r2, r3]
   18f5e:	2b00      	cmp	r3, #0
   18f60:	d10f      	bne.n	18f82 <prvAddTaskToStackMonitor+0x3e>
   18f62:	4b11      	ldr	r3, [pc, #68]	; (18fa8 <prvAddTaskToStackMonitor+0x64>)
   18f64:	68ba      	ldr	r2, [r7, #8]
   18f66:	00d2      	lsls	r2, r2, #3
   18f68:	6879      	ldr	r1, [r7, #4]
   18f6a:	50d1      	str	r1, [r2, r3]
   18f6c:	4a0e      	ldr	r2, [pc, #56]	; (18fa8 <prvAddTaskToStackMonitor+0x64>)
   18f6e:	68bb      	ldr	r3, [r7, #8]
   18f70:	00db      	lsls	r3, r3, #3
   18f72:	18d3      	adds	r3, r2, r3
   18f74:	3304      	adds	r3, #4
   18f76:	2201      	movs	r2, #1
   18f78:	4252      	negs	r2, r2
   18f7a:	601a      	str	r2, [r3, #0]
   18f7c:	2301      	movs	r3, #1
   18f7e:	60fb      	str	r3, [r7, #12]
   18f80:	e005      	b.n	18f8e <prvAddTaskToStackMonitor+0x4a>
   18f82:	68bb      	ldr	r3, [r7, #8]
   18f84:	3301      	adds	r3, #1
   18f86:	60bb      	str	r3, [r7, #8]
   18f88:	68bb      	ldr	r3, [r7, #8]
   18f8a:	2b09      	cmp	r3, #9
   18f8c:	dde3      	ble.n	18f56 <prvAddTaskToStackMonitor+0x12>
   18f8e:	68fb      	ldr	r3, [r7, #12]
   18f90:	2b00      	cmp	r3, #0
   18f92:	d104      	bne.n	18f9e <prvAddTaskToStackMonitor+0x5a>
   18f94:	4b05      	ldr	r3, [pc, #20]	; (18fac <prvAddTaskToStackMonitor+0x68>)
   18f96:	681b      	ldr	r3, [r3, #0]
   18f98:	1c5a      	adds	r2, r3, #1
   18f9a:	4b04      	ldr	r3, [pc, #16]	; (18fac <prvAddTaskToStackMonitor+0x68>)
   18f9c:	601a      	str	r2, [r3, #0]
   18f9e:	46c0      	nop			; (mov r8, r8)
   18fa0:	46bd      	mov	sp, r7
   18fa2:	b004      	add	sp, #16
   18fa4:	bd80      	pop	{r7, pc}
   18fa6:	46c0      	nop			; (mov r8, r8)
   18fa8:	20000d04 	.word	0x20000d04
   18fac:	20000d54 	.word	0x20000d54

00018fb0 <prvReportStackUsage>:
   18fb0:	b590      	push	{r4, r7, lr}
   18fb2:	b085      	sub	sp, #20
   18fb4:	af00      	add	r7, sp, #0
   18fb6:	2300      	movs	r3, #0
   18fb8:	60fb      	str	r3, [r7, #12]
   18fba:	4b2b      	ldr	r3, [pc, #172]	; (19068 <prvReportStackUsage+0xb8>)
   18fbc:	681b      	ldr	r3, [r3, #0]
   18fbe:	60bb      	str	r3, [r7, #8]
   18fc0:	4b29      	ldr	r3, [pc, #164]	; (19068 <prvReportStackUsage+0xb8>)
   18fc2:	681a      	ldr	r2, [r3, #0]
   18fc4:	4b29      	ldr	r3, [pc, #164]	; (1906c <prvReportStackUsage+0xbc>)
   18fc6:	00d2      	lsls	r2, r2, #3
   18fc8:	58d3      	ldr	r3, [r2, r3]
   18fca:	2b00      	cmp	r3, #0
   18fcc:	d035      	beq.n	1903a <prvReportStackUsage+0x8a>
   18fce:	4b26      	ldr	r3, [pc, #152]	; (19068 <prvReportStackUsage+0xb8>)
   18fd0:	681a      	ldr	r2, [r3, #0]
   18fd2:	4b26      	ldr	r3, [pc, #152]	; (1906c <prvReportStackUsage+0xbc>)
   18fd4:	00d2      	lsls	r2, r2, #3
   18fd6:	58d3      	ldr	r3, [r2, r3]
   18fd8:	0018      	movs	r0, r3
   18fda:	4b25      	ldr	r3, [pc, #148]	; (19070 <prvReportStackUsage+0xc0>)
   18fdc:	4798      	blx	r3
   18fde:	0003      	movs	r3, r0
   18fe0:	607b      	str	r3, [r7, #4]
   18fe2:	4b21      	ldr	r3, [pc, #132]	; (19068 <prvReportStackUsage+0xb8>)
   18fe4:	681b      	ldr	r3, [r3, #0]
   18fe6:	4a21      	ldr	r2, [pc, #132]	; (1906c <prvReportStackUsage+0xbc>)
   18fe8:	00db      	lsls	r3, r3, #3
   18fea:	18d3      	adds	r3, r2, r3
   18fec:	3304      	adds	r3, #4
   18fee:	681a      	ldr	r2, [r3, #0]
   18ff0:	687b      	ldr	r3, [r7, #4]
   18ff2:	429a      	cmp	r2, r3
   18ff4:	d907      	bls.n	19006 <prvReportStackUsage+0x56>
   18ff6:	4b1c      	ldr	r3, [pc, #112]	; (19068 <prvReportStackUsage+0xb8>)
   18ff8:	681b      	ldr	r3, [r3, #0]
   18ffa:	4a1c      	ldr	r2, [pc, #112]	; (1906c <prvReportStackUsage+0xbc>)
   18ffc:	00db      	lsls	r3, r3, #3
   18ffe:	18d3      	adds	r3, r2, r3
   19000:	3304      	adds	r3, #4
   19002:	687a      	ldr	r2, [r7, #4]
   19004:	601a      	str	r2, [r3, #0]
   19006:	4b18      	ldr	r3, [pc, #96]	; (19068 <prvReportStackUsage+0xb8>)
   19008:	681a      	ldr	r2, [r3, #0]
   1900a:	4b18      	ldr	r3, [pc, #96]	; (1906c <prvReportStackUsage+0xbc>)
   1900c:	00d2      	lsls	r2, r2, #3
   1900e:	58d3      	ldr	r3, [r2, r3]
   19010:	0018      	movs	r0, r3
   19012:	4b18      	ldr	r3, [pc, #96]	; (19074 <prvReportStackUsage+0xc4>)
   19014:	4798      	blx	r3
   19016:	0003      	movs	r3, r0
   19018:	b2db      	uxtb	r3, r3
   1901a:	0019      	movs	r1, r3
   1901c:	4b12      	ldr	r3, [pc, #72]	; (19068 <prvReportStackUsage+0xb8>)
   1901e:	681b      	ldr	r3, [r3, #0]
   19020:	4a12      	ldr	r2, [pc, #72]	; (1906c <prvReportStackUsage+0xbc>)
   19022:	00db      	lsls	r3, r3, #3
   19024:	18d3      	adds	r3, r2, r3
   19026:	3304      	adds	r3, #4
   19028:	681b      	ldr	r3, [r3, #0]
   1902a:	000a      	movs	r2, r1
   1902c:	2103      	movs	r1, #3
   1902e:	20ea      	movs	r0, #234	; 0xea
   19030:	4c11      	ldr	r4, [pc, #68]	; (19078 <prvReportStackUsage+0xc8>)
   19032:	47a0      	blx	r4
   19034:	68fb      	ldr	r3, [r7, #12]
   19036:	3301      	adds	r3, #1
   19038:	60fb      	str	r3, [r7, #12]
   1903a:	4b0b      	ldr	r3, [pc, #44]	; (19068 <prvReportStackUsage+0xb8>)
   1903c:	681b      	ldr	r3, [r3, #0]
   1903e:	1c5a      	adds	r2, r3, #1
   19040:	4b0e      	ldr	r3, [pc, #56]	; (1907c <prvReportStackUsage+0xcc>)
   19042:	210a      	movs	r1, #10
   19044:	0010      	movs	r0, r2
   19046:	4798      	blx	r3
   19048:	000b      	movs	r3, r1
   1904a:	001a      	movs	r2, r3
   1904c:	4b06      	ldr	r3, [pc, #24]	; (19068 <prvReportStackUsage+0xb8>)
   1904e:	601a      	str	r2, [r3, #0]
   19050:	68fb      	ldr	r3, [r7, #12]
   19052:	2b00      	cmp	r3, #0
   19054:	dc04      	bgt.n	19060 <prvReportStackUsage+0xb0>
   19056:	4b04      	ldr	r3, [pc, #16]	; (19068 <prvReportStackUsage+0xb8>)
   19058:	681a      	ldr	r2, [r3, #0]
   1905a:	68bb      	ldr	r3, [r7, #8]
   1905c:	429a      	cmp	r2, r3
   1905e:	d1af      	bne.n	18fc0 <prvReportStackUsage+0x10>
   19060:	46c0      	nop			; (mov r8, r8)
   19062:	46bd      	mov	sp, r7
   19064:	b005      	add	sp, #20
   19066:	bd90      	pop	{r4, r7, pc}
   19068:	20000d58 	.word	0x20000d58
   1906c:	20000d04 	.word	0x20000d04
   19070:	0001da45 	.word	0x0001da45
   19074:	00018dc5 	.word	0x00018dc5
   19078:	0001990d 	.word	0x0001990d
   1907c:	00033a0d 	.word	0x00033a0d

00019080 <prvTraceGetCurrentTaskHandle>:
   19080:	b580      	push	{r7, lr}
   19082:	af00      	add	r7, sp, #0
   19084:	4b02      	ldr	r3, [pc, #8]	; (19090 <prvTraceGetCurrentTaskHandle+0x10>)
   19086:	4798      	blx	r3
   19088:	0003      	movs	r3, r0
   1908a:	0018      	movs	r0, r3
   1908c:	46bd      	mov	sp, r7
   1908e:	bd80      	pop	{r7, pc}
   19090:	0001daf1 	.word	0x0001daf1

00019094 <vTraceEnable>:
   19094:	b590      	push	{r4, r7, lr}
   19096:	b085      	sub	sp, #20
   19098:	af02      	add	r7, sp, #8
   1909a:	6078      	str	r0, [r7, #4]
   1909c:	4b14      	ldr	r3, [pc, #80]	; (190f0 <vTraceEnable+0x5c>)
   1909e:	4798      	blx	r3
   190a0:	687b      	ldr	r3, [r7, #4]
   190a2:	2b01      	cmp	r3, #1
   190a4:	d102      	bne.n	190ac <vTraceEnable+0x18>
   190a6:	4b13      	ldr	r3, [pc, #76]	; (190f4 <vTraceEnable+0x60>)
   190a8:	4798      	blx	r3
   190aa:	e00e      	b.n	190ca <vTraceEnable+0x36>
   190ac:	687b      	ldr	r3, [r7, #4]
   190ae:	2b02      	cmp	r3, #2
   190b0:	d104      	bne.n	190bc <vTraceEnable+0x28>
   190b2:	4b11      	ldr	r3, [pc, #68]	; (190f8 <vTraceEnable+0x64>)
   190b4:	0018      	movs	r0, r3
   190b6:	4b11      	ldr	r3, [pc, #68]	; (190fc <vTraceEnable+0x68>)
   190b8:	4798      	blx	r3
   190ba:	e006      	b.n	190ca <vTraceEnable+0x36>
   190bc:	687b      	ldr	r3, [r7, #4]
   190be:	2b00      	cmp	r3, #0
   190c0:	d003      	beq.n	190ca <vTraceEnable+0x36>
   190c2:	4b0f      	ldr	r3, [pc, #60]	; (19100 <vTraceEnable+0x6c>)
   190c4:	0018      	movs	r0, r3
   190c6:	4b0d      	ldr	r3, [pc, #52]	; (190fc <vTraceEnable+0x68>)
   190c8:	4798      	blx	r3
   190ca:	4b0e      	ldr	r3, [pc, #56]	; (19104 <vTraceEnable+0x70>)
   190cc:	681b      	ldr	r3, [r3, #0]
   190ce:	2b00      	cmp	r3, #0
   190d0:	d109      	bne.n	190e6 <vTraceEnable+0x52>
   190d2:	490d      	ldr	r1, [pc, #52]	; (19108 <vTraceEnable+0x74>)
   190d4:	480d      	ldr	r0, [pc, #52]	; (1910c <vTraceEnable+0x78>)
   190d6:	4b0b      	ldr	r3, [pc, #44]	; (19104 <vTraceEnable+0x70>)
   190d8:	9301      	str	r3, [sp, #4]
   190da:	2304      	movs	r3, #4
   190dc:	9300      	str	r3, [sp, #0]
   190de:	2300      	movs	r3, #0
   190e0:	22c8      	movs	r2, #200	; 0xc8
   190e2:	4c0b      	ldr	r4, [pc, #44]	; (19110 <vTraceEnable+0x7c>)
   190e4:	47a0      	blx	r4
   190e6:	46c0      	nop			; (mov r8, r8)
   190e8:	46bd      	mov	sp, r7
   190ea:	b003      	add	sp, #12
   190ec:	bd90      	pop	{r4, r7, pc}
   190ee:	46c0      	nop			; (mov r8, r8)
   190f0:	00019fd9 	.word	0x00019fd9
   190f4:	00019531 	.word	0x00019531
   190f8:	00037bc8 	.word	0x00037bc8
   190fc:	0001a681 	.word	0x0001a681
   19100:	00037c08 	.word	0x00037c08
   19104:	20000d00 	.word	0x20000d00
   19108:	00037c3c 	.word	0x00037c3c
   1910c:	00019115 	.word	0x00019115
   19110:	0001ca49 	.word	0x0001ca49

00019114 <TzCtrl>:
   19114:	b580      	push	{r7, lr}
   19116:	b082      	sub	sp, #8
   19118:	af00      	add	r7, sp, #0
   1911a:	6078      	str	r0, [r7, #4]
   1911c:	4b04      	ldr	r3, [pc, #16]	; (19130 <TzCtrl+0x1c>)
   1911e:	4798      	blx	r3
   19120:	1e03      	subs	r3, r0, #0
   19122:	d001      	beq.n	19128 <TzCtrl+0x14>
   19124:	4b03      	ldr	r3, [pc, #12]	; (19134 <TzCtrl+0x20>)
   19126:	4798      	blx	r3
   19128:	2004      	movs	r0, #4
   1912a:	4b03      	ldr	r3, [pc, #12]	; (19138 <TzCtrl+0x24>)
   1912c:	4798      	blx	r3
   1912e:	e7f5      	b.n	1911c <TzCtrl+0x8>
   19130:	00019575 	.word	0x00019575
   19134:	00018fb1 	.word	0x00018fb1
   19138:	0001cde5 	.word	0x0001cde5

0001913c <vTraceInitObjectPropertyTable>:
   1913c:	b580      	push	{r7, lr}
   1913e:	af00      	add	r7, sp, #0
   19140:	4b60      	ldr	r3, [pc, #384]	; (192c4 <vTraceInitObjectPropertyTable+0x188>)
   19142:	681b      	ldr	r3, [r3, #0]
   19144:	2209      	movs	r2, #9
   19146:	65da      	str	r2, [r3, #92]	; 0x5c
   19148:	4b5e      	ldr	r3, [pc, #376]	; (192c4 <vTraceInitObjectPropertyTable+0x188>)
   1914a:	681b      	ldr	r3, [r3, #0]
   1914c:	2264      	movs	r2, #100	; 0x64
   1914e:	210a      	movs	r1, #10
   19150:	5499      	strb	r1, [r3, r2]
   19152:	4b5c      	ldr	r3, [pc, #368]	; (192c4 <vTraceInitObjectPropertyTable+0x188>)
   19154:	681b      	ldr	r3, [r3, #0]
   19156:	2265      	movs	r2, #101	; 0x65
   19158:	210a      	movs	r1, #10
   1915a:	5499      	strb	r1, [r3, r2]
   1915c:	4b59      	ldr	r3, [pc, #356]	; (192c4 <vTraceInitObjectPropertyTable+0x188>)
   1915e:	681b      	ldr	r3, [r3, #0]
   19160:	2266      	movs	r2, #102	; 0x66
   19162:	210a      	movs	r1, #10
   19164:	5499      	strb	r1, [r3, r2]
   19166:	4b57      	ldr	r3, [pc, #348]	; (192c4 <vTraceInitObjectPropertyTable+0x188>)
   19168:	681b      	ldr	r3, [r3, #0]
   1916a:	2267      	movs	r2, #103	; 0x67
   1916c:	210f      	movs	r1, #15
   1916e:	5499      	strb	r1, [r3, r2]
   19170:	4b54      	ldr	r3, [pc, #336]	; (192c4 <vTraceInitObjectPropertyTable+0x188>)
   19172:	681b      	ldr	r3, [r3, #0]
   19174:	2268      	movs	r2, #104	; 0x68
   19176:	2105      	movs	r1, #5
   19178:	5499      	strb	r1, [r3, r2]
   1917a:	4b52      	ldr	r3, [pc, #328]	; (192c4 <vTraceInitObjectPropertyTable+0x188>)
   1917c:	681b      	ldr	r3, [r3, #0]
   1917e:	2269      	movs	r2, #105	; 0x69
   19180:	2105      	movs	r1, #5
   19182:	5499      	strb	r1, [r3, r2]
   19184:	4b4f      	ldr	r3, [pc, #316]	; (192c4 <vTraceInitObjectPropertyTable+0x188>)
   19186:	681b      	ldr	r3, [r3, #0]
   19188:	226a      	movs	r2, #106	; 0x6a
   1918a:	2105      	movs	r1, #5
   1918c:	5499      	strb	r1, [r3, r2]
   1918e:	4b4d      	ldr	r3, [pc, #308]	; (192c4 <vTraceInitObjectPropertyTable+0x188>)
   19190:	681b      	ldr	r3, [r3, #0]
   19192:	226b      	movs	r2, #107	; 0x6b
   19194:	2105      	movs	r1, #5
   19196:	5499      	strb	r1, [r3, r2]
   19198:	4b4a      	ldr	r3, [pc, #296]	; (192c4 <vTraceInitObjectPropertyTable+0x188>)
   1919a:	681b      	ldr	r3, [r3, #0]
   1919c:	226c      	movs	r2, #108	; 0x6c
   1919e:	2105      	movs	r1, #5
   191a0:	5499      	strb	r1, [r3, r2]
   191a2:	4b48      	ldr	r3, [pc, #288]	; (192c4 <vTraceInitObjectPropertyTable+0x188>)
   191a4:	681b      	ldr	r3, [r3, #0]
   191a6:	2270      	movs	r2, #112	; 0x70
   191a8:	210f      	movs	r1, #15
   191aa:	5499      	strb	r1, [r3, r2]
   191ac:	4b45      	ldr	r3, [pc, #276]	; (192c4 <vTraceInitObjectPropertyTable+0x188>)
   191ae:	681b      	ldr	r3, [r3, #0]
   191b0:	2271      	movs	r2, #113	; 0x71
   191b2:	210f      	movs	r1, #15
   191b4:	5499      	strb	r1, [r3, r2]
   191b6:	4b43      	ldr	r3, [pc, #268]	; (192c4 <vTraceInitObjectPropertyTable+0x188>)
   191b8:	681b      	ldr	r3, [r3, #0]
   191ba:	2272      	movs	r2, #114	; 0x72
   191bc:	210f      	movs	r1, #15
   191be:	5499      	strb	r1, [r3, r2]
   191c0:	4b40      	ldr	r3, [pc, #256]	; (192c4 <vTraceInitObjectPropertyTable+0x188>)
   191c2:	681b      	ldr	r3, [r3, #0]
   191c4:	2273      	movs	r2, #115	; 0x73
   191c6:	210f      	movs	r1, #15
   191c8:	5499      	strb	r1, [r3, r2]
   191ca:	4b3e      	ldr	r3, [pc, #248]	; (192c4 <vTraceInitObjectPropertyTable+0x188>)
   191cc:	681b      	ldr	r3, [r3, #0]
   191ce:	2274      	movs	r2, #116	; 0x74
   191d0:	210f      	movs	r1, #15
   191d2:	5499      	strb	r1, [r3, r2]
   191d4:	4b3b      	ldr	r3, [pc, #236]	; (192c4 <vTraceInitObjectPropertyTable+0x188>)
   191d6:	681b      	ldr	r3, [r3, #0]
   191d8:	2275      	movs	r2, #117	; 0x75
   191da:	210f      	movs	r1, #15
   191dc:	5499      	strb	r1, [r3, r2]
   191de:	4b39      	ldr	r3, [pc, #228]	; (192c4 <vTraceInitObjectPropertyTable+0x188>)
   191e0:	681b      	ldr	r3, [r3, #0]
   191e2:	2276      	movs	r2, #118	; 0x76
   191e4:	210f      	movs	r1, #15
   191e6:	5499      	strb	r1, [r3, r2]
   191e8:	4b36      	ldr	r3, [pc, #216]	; (192c4 <vTraceInitObjectPropertyTable+0x188>)
   191ea:	681b      	ldr	r3, [r3, #0]
   191ec:	2277      	movs	r2, #119	; 0x77
   191ee:	210f      	movs	r1, #15
   191f0:	5499      	strb	r1, [r3, r2]
   191f2:	4b34      	ldr	r3, [pc, #208]	; (192c4 <vTraceInitObjectPropertyTable+0x188>)
   191f4:	681b      	ldr	r3, [r3, #0]
   191f6:	2278      	movs	r2, #120	; 0x78
   191f8:	210f      	movs	r1, #15
   191fa:	5499      	strb	r1, [r3, r2]
   191fc:	4b31      	ldr	r3, [pc, #196]	; (192c4 <vTraceInitObjectPropertyTable+0x188>)
   191fe:	681b      	ldr	r3, [r3, #0]
   19200:	227c      	movs	r2, #124	; 0x7c
   19202:	2110      	movs	r1, #16
   19204:	5499      	strb	r1, [r3, r2]
   19206:	4b2f      	ldr	r3, [pc, #188]	; (192c4 <vTraceInitObjectPropertyTable+0x188>)
   19208:	681b      	ldr	r3, [r3, #0]
   1920a:	227d      	movs	r2, #125	; 0x7d
   1920c:	2110      	movs	r1, #16
   1920e:	5499      	strb	r1, [r3, r2]
   19210:	4b2c      	ldr	r3, [pc, #176]	; (192c4 <vTraceInitObjectPropertyTable+0x188>)
   19212:	681b      	ldr	r3, [r3, #0]
   19214:	227e      	movs	r2, #126	; 0x7e
   19216:	2110      	movs	r1, #16
   19218:	5499      	strb	r1, [r3, r2]
   1921a:	4b2a      	ldr	r3, [pc, #168]	; (192c4 <vTraceInitObjectPropertyTable+0x188>)
   1921c:	681b      	ldr	r3, [r3, #0]
   1921e:	227f      	movs	r2, #127	; 0x7f
   19220:	2113      	movs	r1, #19
   19222:	5499      	strb	r1, [r3, r2]
   19224:	4b27      	ldr	r3, [pc, #156]	; (192c4 <vTraceInitObjectPropertyTable+0x188>)
   19226:	681b      	ldr	r3, [r3, #0]
   19228:	2280      	movs	r2, #128	; 0x80
   1922a:	2111      	movs	r1, #17
   1922c:	5499      	strb	r1, [r3, r2]
   1922e:	4b25      	ldr	r3, [pc, #148]	; (192c4 <vTraceInitObjectPropertyTable+0x188>)
   19230:	681b      	ldr	r3, [r3, #0]
   19232:	2281      	movs	r2, #129	; 0x81
   19234:	2110      	movs	r1, #16
   19236:	5499      	strb	r1, [r3, r2]
   19238:	4b22      	ldr	r3, [pc, #136]	; (192c4 <vTraceInitObjectPropertyTable+0x188>)
   1923a:	681b      	ldr	r3, [r3, #0]
   1923c:	2282      	movs	r2, #130	; 0x82
   1923e:	2113      	movs	r1, #19
   19240:	5499      	strb	r1, [r3, r2]
   19242:	4b20      	ldr	r3, [pc, #128]	; (192c4 <vTraceInitObjectPropertyTable+0x188>)
   19244:	681b      	ldr	r3, [r3, #0]
   19246:	2283      	movs	r2, #131	; 0x83
   19248:	2113      	movs	r1, #19
   1924a:	5499      	strb	r1, [r3, r2]
   1924c:	4b1d      	ldr	r3, [pc, #116]	; (192c4 <vTraceInitObjectPropertyTable+0x188>)
   1924e:	681b      	ldr	r3, [r3, #0]
   19250:	2284      	movs	r2, #132	; 0x84
   19252:	2113      	movs	r1, #19
   19254:	5499      	strb	r1, [r3, r2]
   19256:	4b1b      	ldr	r3, [pc, #108]	; (192c4 <vTraceInitObjectPropertyTable+0x188>)
   19258:	681b      	ldr	r3, [r3, #0]
   1925a:	2288      	movs	r2, #136	; 0x88
   1925c:	2100      	movs	r1, #0
   1925e:	5299      	strh	r1, [r3, r2]
   19260:	4b18      	ldr	r3, [pc, #96]	; (192c4 <vTraceInitObjectPropertyTable+0x188>)
   19262:	681b      	ldr	r3, [r3, #0]
   19264:	228a      	movs	r2, #138	; 0x8a
   19266:	21a0      	movs	r1, #160	; 0xa0
   19268:	5299      	strh	r1, [r3, r2]
   1926a:	4b16      	ldr	r3, [pc, #88]	; (192c4 <vTraceInitObjectPropertyTable+0x188>)
   1926c:	681b      	ldr	r3, [r3, #0]
   1926e:	228c      	movs	r2, #140	; 0x8c
   19270:	21a0      	movs	r1, #160	; 0xa0
   19272:	0049      	lsls	r1, r1, #1
   19274:	5299      	strh	r1, [r3, r2]
   19276:	4b13      	ldr	r3, [pc, #76]	; (192c4 <vTraceInitObjectPropertyTable+0x188>)
   19278:	681b      	ldr	r3, [r3, #0]
   1927a:	228e      	movs	r2, #142	; 0x8e
   1927c:	21f0      	movs	r1, #240	; 0xf0
   1927e:	0049      	lsls	r1, r1, #1
   19280:	5299      	strh	r1, [r3, r2]
   19282:	4b10      	ldr	r3, [pc, #64]	; (192c4 <vTraceInitObjectPropertyTable+0x188>)
   19284:	681b      	ldr	r3, [r3, #0]
   19286:	2290      	movs	r2, #144	; 0x90
   19288:	490f      	ldr	r1, [pc, #60]	; (192c8 <vTraceInitObjectPropertyTable+0x18c>)
   1928a:	5299      	strh	r1, [r3, r2]
   1928c:	4b0d      	ldr	r3, [pc, #52]	; (192c4 <vTraceInitObjectPropertyTable+0x188>)
   1928e:	681b      	ldr	r3, [r3, #0]
   19290:	2292      	movs	r2, #146	; 0x92
   19292:	490e      	ldr	r1, [pc, #56]	; (192cc <vTraceInitObjectPropertyTable+0x190>)
   19294:	5299      	strh	r1, [r3, r2]
   19296:	4b0b      	ldr	r3, [pc, #44]	; (192c4 <vTraceInitObjectPropertyTable+0x188>)
   19298:	681b      	ldr	r3, [r3, #0]
   1929a:	2294      	movs	r2, #148	; 0x94
   1929c:	490c      	ldr	r1, [pc, #48]	; (192d0 <vTraceInitObjectPropertyTable+0x194>)
   1929e:	5299      	strh	r1, [r3, r2]
   192a0:	4b08      	ldr	r3, [pc, #32]	; (192c4 <vTraceInitObjectPropertyTable+0x188>)
   192a2:	681b      	ldr	r3, [r3, #0]
   192a4:	2296      	movs	r2, #150	; 0x96
   192a6:	490b      	ldr	r1, [pc, #44]	; (192d4 <vTraceInitObjectPropertyTable+0x198>)
   192a8:	5299      	strh	r1, [r3, r2]
   192aa:	4b06      	ldr	r3, [pc, #24]	; (192c4 <vTraceInitObjectPropertyTable+0x188>)
   192ac:	681b      	ldr	r3, [r3, #0]
   192ae:	2298      	movs	r2, #152	; 0x98
   192b0:	218c      	movs	r1, #140	; 0x8c
   192b2:	00c9      	lsls	r1, r1, #3
   192b4:	5299      	strh	r1, [r3, r2]
   192b6:	4b03      	ldr	r3, [pc, #12]	; (192c4 <vTraceInitObjectPropertyTable+0x188>)
   192b8:	681b      	ldr	r3, [r3, #0]
   192ba:	4a07      	ldr	r2, [pc, #28]	; (192d8 <vTraceInitObjectPropertyTable+0x19c>)
   192bc:	661a      	str	r2, [r3, #96]	; 0x60
   192be:	46c0      	nop			; (mov r8, r8)
   192c0:	46bd      	mov	sp, r7
   192c2:	bd80      	pop	{r7, pc}
   192c4:	20000e18 	.word	0x20000e18
   192c8:	000002fd 	.word	0x000002fd
   192cc:	00000352 	.word	0x00000352
   192d0:	000003a2 	.word	0x000003a2
   192d4:	00000401 	.word	0x00000401
   192d8:	000004bf 	.word	0x000004bf

000192dc <vTraceInitObjectHandleStack>:
   192dc:	b580      	push	{r7, lr}
   192de:	af00      	add	r7, sp, #0
   192e0:	4b2e      	ldr	r3, [pc, #184]	; (1939c <vTraceInitObjectHandleStack+0xc0>)
   192e2:	2200      	movs	r2, #0
   192e4:	825a      	strh	r2, [r3, #18]
   192e6:	4b2d      	ldr	r3, [pc, #180]	; (1939c <vTraceInitObjectHandleStack+0xc0>)
   192e8:	8a5a      	ldrh	r2, [r3, #18]
   192ea:	4b2c      	ldr	r3, [pc, #176]	; (1939c <vTraceInitObjectHandleStack+0xc0>)
   192ec:	801a      	strh	r2, [r3, #0]
   192ee:	4b2b      	ldr	r3, [pc, #172]	; (1939c <vTraceInitObjectHandleStack+0xc0>)
   192f0:	220a      	movs	r2, #10
   192f2:	829a      	strh	r2, [r3, #20]
   192f4:	4b29      	ldr	r3, [pc, #164]	; (1939c <vTraceInitObjectHandleStack+0xc0>)
   192f6:	8a9a      	ldrh	r2, [r3, #20]
   192f8:	4b28      	ldr	r3, [pc, #160]	; (1939c <vTraceInitObjectHandleStack+0xc0>)
   192fa:	805a      	strh	r2, [r3, #2]
   192fc:	4b27      	ldr	r3, [pc, #156]	; (1939c <vTraceInitObjectHandleStack+0xc0>)
   192fe:	2214      	movs	r2, #20
   19300:	82da      	strh	r2, [r3, #22]
   19302:	4b26      	ldr	r3, [pc, #152]	; (1939c <vTraceInitObjectHandleStack+0xc0>)
   19304:	8ada      	ldrh	r2, [r3, #22]
   19306:	4b25      	ldr	r3, [pc, #148]	; (1939c <vTraceInitObjectHandleStack+0xc0>)
   19308:	809a      	strh	r2, [r3, #4]
   1930a:	4b24      	ldr	r3, [pc, #144]	; (1939c <vTraceInitObjectHandleStack+0xc0>)
   1930c:	221e      	movs	r2, #30
   1930e:	831a      	strh	r2, [r3, #24]
   19310:	4b22      	ldr	r3, [pc, #136]	; (1939c <vTraceInitObjectHandleStack+0xc0>)
   19312:	8b1a      	ldrh	r2, [r3, #24]
   19314:	4b21      	ldr	r3, [pc, #132]	; (1939c <vTraceInitObjectHandleStack+0xc0>)
   19316:	80da      	strh	r2, [r3, #6]
   19318:	4b20      	ldr	r3, [pc, #128]	; (1939c <vTraceInitObjectHandleStack+0xc0>)
   1931a:	222d      	movs	r2, #45	; 0x2d
   1931c:	835a      	strh	r2, [r3, #26]
   1931e:	4b1f      	ldr	r3, [pc, #124]	; (1939c <vTraceInitObjectHandleStack+0xc0>)
   19320:	8b5a      	ldrh	r2, [r3, #26]
   19322:	4b1e      	ldr	r3, [pc, #120]	; (1939c <vTraceInitObjectHandleStack+0xc0>)
   19324:	811a      	strh	r2, [r3, #8]
   19326:	4b1d      	ldr	r3, [pc, #116]	; (1939c <vTraceInitObjectHandleStack+0xc0>)
   19328:	2232      	movs	r2, #50	; 0x32
   1932a:	839a      	strh	r2, [r3, #28]
   1932c:	4b1b      	ldr	r3, [pc, #108]	; (1939c <vTraceInitObjectHandleStack+0xc0>)
   1932e:	8b9a      	ldrh	r2, [r3, #28]
   19330:	4b1a      	ldr	r3, [pc, #104]	; (1939c <vTraceInitObjectHandleStack+0xc0>)
   19332:	815a      	strh	r2, [r3, #10]
   19334:	4b19      	ldr	r3, [pc, #100]	; (1939c <vTraceInitObjectHandleStack+0xc0>)
   19336:	2237      	movs	r2, #55	; 0x37
   19338:	83da      	strh	r2, [r3, #30]
   1933a:	4b18      	ldr	r3, [pc, #96]	; (1939c <vTraceInitObjectHandleStack+0xc0>)
   1933c:	8bda      	ldrh	r2, [r3, #30]
   1933e:	4b17      	ldr	r3, [pc, #92]	; (1939c <vTraceInitObjectHandleStack+0xc0>)
   19340:	819a      	strh	r2, [r3, #12]
   19342:	4b16      	ldr	r3, [pc, #88]	; (1939c <vTraceInitObjectHandleStack+0xc0>)
   19344:	223c      	movs	r2, #60	; 0x3c
   19346:	841a      	strh	r2, [r3, #32]
   19348:	4b14      	ldr	r3, [pc, #80]	; (1939c <vTraceInitObjectHandleStack+0xc0>)
   1934a:	8c1a      	ldrh	r2, [r3, #32]
   1934c:	4b13      	ldr	r3, [pc, #76]	; (1939c <vTraceInitObjectHandleStack+0xc0>)
   1934e:	81da      	strh	r2, [r3, #14]
   19350:	4b12      	ldr	r3, [pc, #72]	; (1939c <vTraceInitObjectHandleStack+0xc0>)
   19352:	2241      	movs	r2, #65	; 0x41
   19354:	845a      	strh	r2, [r3, #34]	; 0x22
   19356:	4b11      	ldr	r3, [pc, #68]	; (1939c <vTraceInitObjectHandleStack+0xc0>)
   19358:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
   1935a:	4b10      	ldr	r3, [pc, #64]	; (1939c <vTraceInitObjectHandleStack+0xc0>)
   1935c:	821a      	strh	r2, [r3, #16]
   1935e:	4b0f      	ldr	r3, [pc, #60]	; (1939c <vTraceInitObjectHandleStack+0xc0>)
   19360:	2209      	movs	r2, #9
   19362:	849a      	strh	r2, [r3, #36]	; 0x24
   19364:	4b0d      	ldr	r3, [pc, #52]	; (1939c <vTraceInitObjectHandleStack+0xc0>)
   19366:	2213      	movs	r2, #19
   19368:	84da      	strh	r2, [r3, #38]	; 0x26
   1936a:	4b0c      	ldr	r3, [pc, #48]	; (1939c <vTraceInitObjectHandleStack+0xc0>)
   1936c:	221d      	movs	r2, #29
   1936e:	851a      	strh	r2, [r3, #40]	; 0x28
   19370:	4b0a      	ldr	r3, [pc, #40]	; (1939c <vTraceInitObjectHandleStack+0xc0>)
   19372:	222c      	movs	r2, #44	; 0x2c
   19374:	855a      	strh	r2, [r3, #42]	; 0x2a
   19376:	4b09      	ldr	r3, [pc, #36]	; (1939c <vTraceInitObjectHandleStack+0xc0>)
   19378:	2231      	movs	r2, #49	; 0x31
   1937a:	859a      	strh	r2, [r3, #44]	; 0x2c
   1937c:	4b07      	ldr	r3, [pc, #28]	; (1939c <vTraceInitObjectHandleStack+0xc0>)
   1937e:	2236      	movs	r2, #54	; 0x36
   19380:	85da      	strh	r2, [r3, #46]	; 0x2e
   19382:	4b06      	ldr	r3, [pc, #24]	; (1939c <vTraceInitObjectHandleStack+0xc0>)
   19384:	223b      	movs	r2, #59	; 0x3b
   19386:	861a      	strh	r2, [r3, #48]	; 0x30
   19388:	4b04      	ldr	r3, [pc, #16]	; (1939c <vTraceInitObjectHandleStack+0xc0>)
   1938a:	2240      	movs	r2, #64	; 0x40
   1938c:	865a      	strh	r2, [r3, #50]	; 0x32
   1938e:	4b03      	ldr	r3, [pc, #12]	; (1939c <vTraceInitObjectHandleStack+0xc0>)
   19390:	2245      	movs	r2, #69	; 0x45
   19392:	869a      	strh	r2, [r3, #52]	; 0x34
   19394:	46c0      	nop			; (mov r8, r8)
   19396:	46bd      	mov	sp, r7
   19398:	bd80      	pop	{r7, pc}
   1939a:	46c0      	nop			; (mov r8, r8)
   1939c:	20000d88 	.word	0x20000d88

000193a0 <pszTraceGetErrorNotEnoughHandles>:
   193a0:	b580      	push	{r7, lr}
   193a2:	b082      	sub	sp, #8
   193a4:	af00      	add	r7, sp, #0
   193a6:	0002      	movs	r2, r0
   193a8:	1dfb      	adds	r3, r7, #7
   193aa:	701a      	strb	r2, [r3, #0]
   193ac:	1dfb      	adds	r3, r7, #7
   193ae:	781b      	ldrb	r3, [r3, #0]
   193b0:	2b08      	cmp	r3, #8
   193b2:	d816      	bhi.n	193e2 <pszTraceGetErrorNotEnoughHandles+0x42>
   193b4:	009a      	lsls	r2, r3, #2
   193b6:	4b0d      	ldr	r3, [pc, #52]	; (193ec <pszTraceGetErrorNotEnoughHandles+0x4c>)
   193b8:	18d3      	adds	r3, r2, r3
   193ba:	681b      	ldr	r3, [r3, #0]
   193bc:	469f      	mov	pc, r3
   193be:	4b0c      	ldr	r3, [pc, #48]	; (193f0 <pszTraceGetErrorNotEnoughHandles+0x50>)
   193c0:	e010      	b.n	193e4 <pszTraceGetErrorNotEnoughHandles+0x44>
   193c2:	4b0c      	ldr	r3, [pc, #48]	; (193f4 <pszTraceGetErrorNotEnoughHandles+0x54>)
   193c4:	e00e      	b.n	193e4 <pszTraceGetErrorNotEnoughHandles+0x44>
   193c6:	4b0c      	ldr	r3, [pc, #48]	; (193f8 <pszTraceGetErrorNotEnoughHandles+0x58>)
   193c8:	e00c      	b.n	193e4 <pszTraceGetErrorNotEnoughHandles+0x44>
   193ca:	4b0c      	ldr	r3, [pc, #48]	; (193fc <pszTraceGetErrorNotEnoughHandles+0x5c>)
   193cc:	e00a      	b.n	193e4 <pszTraceGetErrorNotEnoughHandles+0x44>
   193ce:	4b0c      	ldr	r3, [pc, #48]	; (19400 <pszTraceGetErrorNotEnoughHandles+0x60>)
   193d0:	e008      	b.n	193e4 <pszTraceGetErrorNotEnoughHandles+0x44>
   193d2:	4b0c      	ldr	r3, [pc, #48]	; (19404 <pszTraceGetErrorNotEnoughHandles+0x64>)
   193d4:	e006      	b.n	193e4 <pszTraceGetErrorNotEnoughHandles+0x44>
   193d6:	4b0c      	ldr	r3, [pc, #48]	; (19408 <pszTraceGetErrorNotEnoughHandles+0x68>)
   193d8:	e004      	b.n	193e4 <pszTraceGetErrorNotEnoughHandles+0x44>
   193da:	4b0c      	ldr	r3, [pc, #48]	; (1940c <pszTraceGetErrorNotEnoughHandles+0x6c>)
   193dc:	e002      	b.n	193e4 <pszTraceGetErrorNotEnoughHandles+0x44>
   193de:	4b0c      	ldr	r3, [pc, #48]	; (19410 <pszTraceGetErrorNotEnoughHandles+0x70>)
   193e0:	e000      	b.n	193e4 <pszTraceGetErrorNotEnoughHandles+0x44>
   193e2:	4b0c      	ldr	r3, [pc, #48]	; (19414 <pszTraceGetErrorNotEnoughHandles+0x74>)
   193e4:	0018      	movs	r0, r3
   193e6:	46bd      	mov	sp, r7
   193e8:	b002      	add	sp, #8
   193ea:	bd80      	pop	{r7, pc}
   193ec:	00037f44 	.word	0x00037f44
   193f0:	00037c44 	.word	0x00037c44
   193f4:	00037c8c 	.word	0x00037c8c
   193f8:	00037cd4 	.word	0x00037cd4
   193fc:	00037d28 	.word	0x00037d28
   19400:	00037d74 	.word	0x00037d74
   19404:	00037dc0 	.word	0x00037dc0
   19408:	00037e0c 	.word	0x00037e0c
   1940c:	00037e60 	.word	0x00037e60
   19410:	00037eb8 	.word	0x00037eb8
   19414:	00037f14 	.word	0x00037f14

00019418 <uiTraceStart>:
   19418:	b590      	push	{r4, r7, lr}
   1941a:	b087      	sub	sp, #28
   1941c:	af00      	add	r7, sp, #0
   1941e:	2317      	movs	r3, #23
   19420:	18fb      	adds	r3, r7, r3
   19422:	2200      	movs	r2, #0
   19424:	701a      	strb	r2, [r3, #0]
   19426:	4b36      	ldr	r3, [pc, #216]	; (19500 <uiTraceStart+0xe8>)
   19428:	681b      	ldr	r3, [r3, #0]
   1942a:	2b00      	cmp	r3, #0
   1942c:	d10b      	bne.n	19446 <uiTraceStart+0x2e>
   1942e:	4b34      	ldr	r3, [pc, #208]	; (19500 <uiTraceStart+0xe8>)
   19430:	681b      	ldr	r3, [r3, #0]
   19432:	2b00      	cmp	r3, #0
   19434:	d105      	bne.n	19442 <uiTraceStart+0x2a>
   19436:	4b33      	ldr	r3, [pc, #204]	; (19504 <uiTraceStart+0xec>)
   19438:	0018      	movs	r0, r3
   1943a:	4b33      	ldr	r3, [pc, #204]	; (19508 <uiTraceStart+0xf0>)
   1943c:	4798      	blx	r3
   1943e:	2300      	movs	r3, #0
   19440:	e059      	b.n	194f6 <uiTraceStart+0xde>
   19442:	2300      	movs	r3, #0
   19444:	e057      	b.n	194f6 <uiTraceStart+0xde>
   19446:	4b2e      	ldr	r3, [pc, #184]	; (19500 <uiTraceStart+0xe8>)
   19448:	681b      	ldr	r3, [r3, #0]
   1944a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1944c:	2b01      	cmp	r3, #1
   1944e:	d101      	bne.n	19454 <uiTraceStart+0x3c>
   19450:	2301      	movs	r3, #1
   19452:	e050      	b.n	194f6 <uiTraceStart+0xde>
   19454:	4b2d      	ldr	r3, [pc, #180]	; (1950c <uiTraceStart+0xf4>)
   19456:	681b      	ldr	r3, [r3, #0]
   19458:	2b00      	cmp	r3, #0
   1945a:	d149      	bne.n	194f0 <uiTraceStart+0xd8>
   1945c:	f3ef 8310 	mrs	r3, PRIMASK
   19460:	60bb      	str	r3, [r7, #8]
   19462:	68bb      	ldr	r3, [r7, #8]
   19464:	613b      	str	r3, [r7, #16]
   19466:	2301      	movs	r3, #1
   19468:	60fb      	str	r3, [r7, #12]
   1946a:	68fb      	ldr	r3, [r7, #12]
   1946c:	f383 8810 	msr	PRIMASK, r3
   19470:	4b27      	ldr	r3, [pc, #156]	; (19510 <uiTraceStart+0xf8>)
   19472:	681b      	ldr	r3, [r3, #0]
   19474:	1c5a      	adds	r2, r3, #1
   19476:	4b26      	ldr	r3, [pc, #152]	; (19510 <uiTraceStart+0xf8>)
   19478:	601a      	str	r2, [r3, #0]
   1947a:	4b21      	ldr	r3, [pc, #132]	; (19500 <uiTraceStart+0xe8>)
   1947c:	681b      	ldr	r3, [r3, #0]
   1947e:	2201      	movs	r2, #1
   19480:	631a      	str	r2, [r3, #48]	; 0x30
   19482:	4b24      	ldr	r3, [pc, #144]	; (19514 <uiTraceStart+0xfc>)
   19484:	4798      	blx	r3
   19486:	0003      	movs	r3, r0
   19488:	0018      	movs	r0, r3
   1948a:	4b23      	ldr	r3, [pc, #140]	; (19518 <uiTraceStart+0x100>)
   1948c:	4798      	blx	r3
   1948e:	0003      	movs	r3, r0
   19490:	001a      	movs	r2, r3
   19492:	2317      	movs	r3, #23
   19494:	18fb      	adds	r3, r7, r3
   19496:	701a      	strb	r2, [r3, #0]
   19498:	2317      	movs	r3, #23
   1949a:	18fb      	adds	r3, r7, r3
   1949c:	781b      	ldrb	r3, [r3, #0]
   1949e:	2b00      	cmp	r3, #0
   194a0:	d116      	bne.n	194d0 <uiTraceStart+0xb8>
   194a2:	2317      	movs	r3, #23
   194a4:	18fc      	adds	r4, r7, r3
   194a6:	2003      	movs	r0, #3
   194a8:	4b1c      	ldr	r3, [pc, #112]	; (1951c <uiTraceStart+0x104>)
   194aa:	4798      	blx	r3
   194ac:	0003      	movs	r3, r0
   194ae:	7023      	strb	r3, [r4, #0]
   194b0:	4a1b      	ldr	r2, [pc, #108]	; (19520 <uiTraceStart+0x108>)
   194b2:	2317      	movs	r3, #23
   194b4:	18fb      	adds	r3, r7, r3
   194b6:	781b      	ldrb	r3, [r3, #0]
   194b8:	0019      	movs	r1, r3
   194ba:	2003      	movs	r0, #3
   194bc:	4b19      	ldr	r3, [pc, #100]	; (19524 <uiTraceStart+0x10c>)
   194be:	4798      	blx	r3
   194c0:	2317      	movs	r3, #23
   194c2:	18fb      	adds	r3, r7, r3
   194c4:	781b      	ldrb	r3, [r3, #0]
   194c6:	2200      	movs	r2, #0
   194c8:	0019      	movs	r1, r3
   194ca:	2003      	movs	r0, #3
   194cc:	4b16      	ldr	r3, [pc, #88]	; (19528 <uiTraceStart+0x110>)
   194ce:	4798      	blx	r3
   194d0:	2317      	movs	r3, #23
   194d2:	18fb      	adds	r3, r7, r3
   194d4:	781b      	ldrb	r3, [r3, #0]
   194d6:	0018      	movs	r0, r3
   194d8:	4b14      	ldr	r3, [pc, #80]	; (1952c <uiTraceStart+0x114>)
   194da:	4798      	blx	r3
   194dc:	4b0c      	ldr	r3, [pc, #48]	; (19510 <uiTraceStart+0xf8>)
   194de:	681b      	ldr	r3, [r3, #0]
   194e0:	1e5a      	subs	r2, r3, #1
   194e2:	4b0b      	ldr	r3, [pc, #44]	; (19510 <uiTraceStart+0xf8>)
   194e4:	601a      	str	r2, [r3, #0]
   194e6:	693b      	ldr	r3, [r7, #16]
   194e8:	607b      	str	r3, [r7, #4]
   194ea:	687b      	ldr	r3, [r7, #4]
   194ec:	f383 8810 	msr	PRIMASK, r3
   194f0:	4b03      	ldr	r3, [pc, #12]	; (19500 <uiTraceStart+0xe8>)
   194f2:	681b      	ldr	r3, [r3, #0]
   194f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   194f6:	0018      	movs	r0, r3
   194f8:	46bd      	mov	sp, r7
   194fa:	b007      	add	sp, #28
   194fc:	bd90      	pop	{r4, r7, pc}
   194fe:	46c0      	nop			; (mov r8, r8)
   19500:	20000e18 	.word	0x20000e18
   19504:	00037f68 	.word	0x00037f68
   19508:	0001a681 	.word	0x0001a681
   1950c:	20000d78 	.word	0x20000d78
   19510:	20000d70 	.word	0x20000d70
   19514:	00019081 	.word	0x00019081
   19518:	00018dc5 	.word	0x00018dc5
   1951c:	0001a365 	.word	0x0001a365
   19520:	00037fac 	.word	0x00037fac
   19524:	0001a595 	.word	0x0001a595
   19528:	00019cf9 	.word	0x00019cf9
   1952c:	00019be1 	.word	0x00019be1

00019530 <vTraceStart>:
   19530:	b580      	push	{r7, lr}
   19532:	af00      	add	r7, sp, #0
   19534:	4b02      	ldr	r3, [pc, #8]	; (19540 <vTraceStart+0x10>)
   19536:	4798      	blx	r3
   19538:	46c0      	nop			; (mov r8, r8)
   1953a:	46bd      	mov	sp, r7
   1953c:	bd80      	pop	{r7, pc}
   1953e:	46c0      	nop			; (mov r8, r8)
   19540:	00019419 	.word	0x00019419

00019544 <vTraceStop>:
   19544:	b580      	push	{r7, lr}
   19546:	af00      	add	r7, sp, #0
   19548:	4b08      	ldr	r3, [pc, #32]	; (1956c <vTraceStop+0x28>)
   1954a:	681b      	ldr	r3, [r3, #0]
   1954c:	2b00      	cmp	r3, #0
   1954e:	d003      	beq.n	19558 <vTraceStop+0x14>
   19550:	4b06      	ldr	r3, [pc, #24]	; (1956c <vTraceStop+0x28>)
   19552:	681b      	ldr	r3, [r3, #0]
   19554:	2200      	movs	r2, #0
   19556:	631a      	str	r2, [r3, #48]	; 0x30
   19558:	4b05      	ldr	r3, [pc, #20]	; (19570 <vTraceStop+0x2c>)
   1955a:	681b      	ldr	r3, [r3, #0]
   1955c:	2b00      	cmp	r3, #0
   1955e:	d002      	beq.n	19566 <vTraceStop+0x22>
   19560:	4b03      	ldr	r3, [pc, #12]	; (19570 <vTraceStop+0x2c>)
   19562:	681b      	ldr	r3, [r3, #0]
   19564:	4798      	blx	r3
   19566:	46c0      	nop			; (mov r8, r8)
   19568:	46bd      	mov	sp, r7
   1956a:	bd80      	pop	{r7, pc}
   1956c:	20000e18 	.word	0x20000e18
   19570:	20000d80 	.word	0x20000d80

00019574 <xTraceIsRecordingEnabled>:
   19574:	b580      	push	{r7, lr}
   19576:	af00      	add	r7, sp, #0
   19578:	4b05      	ldr	r3, [pc, #20]	; (19590 <xTraceIsRecordingEnabled+0x1c>)
   1957a:	681b      	ldr	r3, [r3, #0]
   1957c:	2b00      	cmp	r3, #0
   1957e:	d003      	beq.n	19588 <xTraceIsRecordingEnabled+0x14>
   19580:	4b03      	ldr	r3, [pc, #12]	; (19590 <xTraceIsRecordingEnabled+0x1c>)
   19582:	681b      	ldr	r3, [r3, #0]
   19584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19586:	e000      	b.n	1958a <xTraceIsRecordingEnabled+0x16>
   19588:	2300      	movs	r3, #0
   1958a:	0018      	movs	r0, r3
   1958c:	46bd      	mov	sp, r7
   1958e:	bd80      	pop	{r7, pc}
   19590:	20000e18 	.word	0x20000e18

00019594 <prvTraceStoreTaskReady>:
   19594:	b590      	push	{r4, r7, lr}
   19596:	b089      	sub	sp, #36	; 0x24
   19598:	af00      	add	r7, sp, #0
   1959a:	0002      	movs	r2, r0
   1959c:	1dfb      	adds	r3, r7, #7
   1959e:	701a      	strb	r2, [r3, #0]
   195a0:	1dfb      	adds	r3, r7, #7
   195a2:	781b      	ldrb	r3, [r3, #0]
   195a4:	2b00      	cmp	r3, #0
   195a6:	d057      	beq.n	19658 <prvTraceStoreTaskReady+0xc4>
   195a8:	4b2e      	ldr	r3, [pc, #184]	; (19664 <prvTraceStoreTaskReady+0xd0>)
   195aa:	681b      	ldr	r3, [r3, #0]
   195ac:	2b00      	cmp	r3, #0
   195ae:	d055      	beq.n	1965c <prvTraceStoreTaskReady+0xc8>
   195b0:	1dfb      	adds	r3, r7, #7
   195b2:	781b      	ldrb	r3, [r3, #0]
   195b4:	2b0f      	cmp	r3, #15
   195b6:	d904      	bls.n	195c2 <prvTraceStoreTaskReady+0x2e>
   195b8:	4b2b      	ldr	r3, [pc, #172]	; (19668 <prvTraceStoreTaskReady+0xd4>)
   195ba:	0018      	movs	r0, r3
   195bc:	4b2b      	ldr	r3, [pc, #172]	; (1966c <prvTraceStoreTaskReady+0xd8>)
   195be:	4798      	blx	r3
   195c0:	e04d      	b.n	1965e <prvTraceStoreTaskReady+0xca>
   195c2:	4b2b      	ldr	r3, [pc, #172]	; (19670 <prvTraceStoreTaskReady+0xdc>)
   195c4:	681b      	ldr	r3, [r3, #0]
   195c6:	2b00      	cmp	r3, #0
   195c8:	d004      	beq.n	195d4 <prvTraceStoreTaskReady+0x40>
   195ca:	4b2a      	ldr	r3, [pc, #168]	; (19674 <prvTraceStoreTaskReady+0xe0>)
   195cc:	0018      	movs	r0, r3
   195ce:	4b27      	ldr	r3, [pc, #156]	; (1966c <prvTraceStoreTaskReady+0xd8>)
   195d0:	4798      	blx	r3
   195d2:	e044      	b.n	1965e <prvTraceStoreTaskReady+0xca>
   195d4:	f3ef 8310 	mrs	r3, PRIMASK
   195d8:	60fb      	str	r3, [r7, #12]
   195da:	68fb      	ldr	r3, [r7, #12]
   195dc:	61fb      	str	r3, [r7, #28]
   195de:	2301      	movs	r3, #1
   195e0:	613b      	str	r3, [r7, #16]
   195e2:	693b      	ldr	r3, [r7, #16]
   195e4:	f383 8810 	msr	PRIMASK, r3
   195e8:	4b21      	ldr	r3, [pc, #132]	; (19670 <prvTraceStoreTaskReady+0xdc>)
   195ea:	681b      	ldr	r3, [r3, #0]
   195ec:	1c5a      	adds	r2, r3, #1
   195ee:	4b20      	ldr	r3, [pc, #128]	; (19670 <prvTraceStoreTaskReady+0xdc>)
   195f0:	601a      	str	r2, [r3, #0]
   195f2:	4b21      	ldr	r3, [pc, #132]	; (19678 <prvTraceStoreTaskReady+0xe4>)
   195f4:	681b      	ldr	r3, [r3, #0]
   195f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   195f8:	2b00      	cmp	r3, #0
   195fa:	d022      	beq.n	19642 <prvTraceStoreTaskReady+0xae>
   195fc:	231a      	movs	r3, #26
   195fe:	18fc      	adds	r4, r7, r3
   19600:	4b1e      	ldr	r3, [pc, #120]	; (1967c <prvTraceStoreTaskReady+0xe8>)
   19602:	0018      	movs	r0, r3
   19604:	4b1e      	ldr	r3, [pc, #120]	; (19680 <prvTraceStoreTaskReady+0xec>)
   19606:	4798      	blx	r3
   19608:	0003      	movs	r3, r0
   1960a:	8023      	strh	r3, [r4, #0]
   1960c:	2319      	movs	r3, #25
   1960e:	18fb      	adds	r3, r7, r3
   19610:	1dfa      	adds	r2, r7, #7
   19612:	7812      	ldrb	r2, [r2, #0]
   19614:	701a      	strb	r2, [r3, #0]
   19616:	4b1b      	ldr	r3, [pc, #108]	; (19684 <prvTraceStoreTaskReady+0xf0>)
   19618:	4798      	blx	r3
   1961a:	0003      	movs	r3, r0
   1961c:	617b      	str	r3, [r7, #20]
   1961e:	697b      	ldr	r3, [r7, #20]
   19620:	2b00      	cmp	r3, #0
   19622:	d00e      	beq.n	19642 <prvTraceStoreTaskReady+0xae>
   19624:	697b      	ldr	r3, [r7, #20]
   19626:	2202      	movs	r2, #2
   19628:	701a      	strb	r2, [r3, #0]
   1962a:	697b      	ldr	r3, [r7, #20]
   1962c:	221a      	movs	r2, #26
   1962e:	18ba      	adds	r2, r7, r2
   19630:	8812      	ldrh	r2, [r2, #0]
   19632:	805a      	strh	r2, [r3, #2]
   19634:	697b      	ldr	r3, [r7, #20]
   19636:	2219      	movs	r2, #25
   19638:	18ba      	adds	r2, r7, r2
   1963a:	7812      	ldrb	r2, [r2, #0]
   1963c:	705a      	strb	r2, [r3, #1]
   1963e:	4b12      	ldr	r3, [pc, #72]	; (19688 <prvTraceStoreTaskReady+0xf4>)
   19640:	4798      	blx	r3
   19642:	4b0b      	ldr	r3, [pc, #44]	; (19670 <prvTraceStoreTaskReady+0xdc>)
   19644:	681b      	ldr	r3, [r3, #0]
   19646:	1e5a      	subs	r2, r3, #1
   19648:	4b09      	ldr	r3, [pc, #36]	; (19670 <prvTraceStoreTaskReady+0xdc>)
   1964a:	601a      	str	r2, [r3, #0]
   1964c:	69fb      	ldr	r3, [r7, #28]
   1964e:	60bb      	str	r3, [r7, #8]
   19650:	68bb      	ldr	r3, [r7, #8]
   19652:	f383 8810 	msr	PRIMASK, r3
   19656:	e002      	b.n	1965e <prvTraceStoreTaskReady+0xca>
   19658:	46c0      	nop			; (mov r8, r8)
   1965a:	e000      	b.n	1965e <prvTraceStoreTaskReady+0xca>
   1965c:	46c0      	nop			; (mov r8, r8)
   1965e:	46bd      	mov	sp, r7
   19660:	b009      	add	sp, #36	; 0x24
   19662:	bd90      	pop	{r4, r7, pc}
   19664:	20000100 	.word	0x20000100
   19668:	00038314 	.word	0x00038314
   1966c:	0001a681 	.word	0x0001a681
   19670:	20000d70 	.word	0x20000d70
   19674:	00038354 	.word	0x00038354
   19678:	20000e18 	.word	0x20000e18
   1967c:	0000ffff 	.word	0x0000ffff
   19680:	0001a895 	.word	0x0001a895
   19684:	0001a239 	.word	0x0001a239
   19688:	0001a83d 	.word	0x0001a83d

0001968c <vTraceStoreMemMangEvent>:
   1968c:	b580      	push	{r7, lr}
   1968e:	b08e      	sub	sp, #56	; 0x38
   19690:	af00      	add	r7, sp, #0
   19692:	60f8      	str	r0, [r7, #12]
   19694:	60b9      	str	r1, [r7, #8]
   19696:	607a      	str	r2, [r7, #4]
   19698:	4b48      	ldr	r3, [pc, #288]	; (197bc <vTraceStoreMemMangEvent+0x130>)
   1969a:	681b      	ldr	r3, [r3, #0]
   1969c:	2b00      	cmp	r3, #0
   1969e:	d100      	bne.n	196a2 <vTraceStoreMemMangEvent+0x16>
   196a0:	e088      	b.n	197b4 <vTraceStoreMemMangEvent+0x128>
   196a2:	687b      	ldr	r3, [r7, #4]
   196a4:	2b00      	cmp	r3, #0
   196a6:	da03      	bge.n	196b0 <vTraceStoreMemMangEvent+0x24>
   196a8:	687b      	ldr	r3, [r7, #4]
   196aa:	425b      	negs	r3, r3
   196ac:	637b      	str	r3, [r7, #52]	; 0x34
   196ae:	e001      	b.n	196b4 <vTraceStoreMemMangEvent+0x28>
   196b0:	687b      	ldr	r3, [r7, #4]
   196b2:	637b      	str	r3, [r7, #52]	; 0x34
   196b4:	f3ef 8310 	mrs	r3, PRIMASK
   196b8:	61bb      	str	r3, [r7, #24]
   196ba:	69bb      	ldr	r3, [r7, #24]
   196bc:	633b      	str	r3, [r7, #48]	; 0x30
   196be:	2301      	movs	r3, #1
   196c0:	61fb      	str	r3, [r7, #28]
   196c2:	69fb      	ldr	r3, [r7, #28]
   196c4:	f383 8810 	msr	PRIMASK, r3
   196c8:	4b3d      	ldr	r3, [pc, #244]	; (197c0 <vTraceStoreMemMangEvent+0x134>)
   196ca:	681b      	ldr	r3, [r3, #0]
   196cc:	1c5a      	adds	r2, r3, #1
   196ce:	4b3c      	ldr	r3, [pc, #240]	; (197c0 <vTraceStoreMemMangEvent+0x134>)
   196d0:	601a      	str	r2, [r3, #0]
   196d2:	68bb      	ldr	r3, [r7, #8]
   196d4:	2b00      	cmp	r3, #0
   196d6:	d005      	beq.n	196e4 <vTraceStoreMemMangEvent+0x58>
   196d8:	4b3a      	ldr	r3, [pc, #232]	; (197c4 <vTraceStoreMemMangEvent+0x138>)
   196da:	681a      	ldr	r2, [r3, #0]
   196dc:	687b      	ldr	r3, [r7, #4]
   196de:	18d2      	adds	r2, r2, r3
   196e0:	4b38      	ldr	r3, [pc, #224]	; (197c4 <vTraceStoreMemMangEvent+0x138>)
   196e2:	601a      	str	r2, [r3, #0]
   196e4:	4b35      	ldr	r3, [pc, #212]	; (197bc <vTraceStoreMemMangEvent+0x130>)
   196e6:	681b      	ldr	r3, [r3, #0]
   196e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   196ea:	2b00      	cmp	r3, #0
   196ec:	d057      	beq.n	1979e <vTraceStoreMemMangEvent+0x112>
   196ee:	20ff      	movs	r0, #255	; 0xff
   196f0:	4b35      	ldr	r3, [pc, #212]	; (197c8 <vTraceStoreMemMangEvent+0x13c>)
   196f2:	4798      	blx	r3
   196f4:	0003      	movs	r3, r0
   196f6:	001a      	movs	r2, r3
   196f8:	232f      	movs	r3, #47	; 0x2f
   196fa:	18fb      	adds	r3, r7, r3
   196fc:	701a      	strb	r2, [r3, #0]
   196fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   19700:	4a32      	ldr	r2, [pc, #200]	; (197cc <vTraceStoreMemMangEvent+0x140>)
   19702:	0019      	movs	r1, r3
   19704:	0010      	movs	r0, r2
   19706:	4b32      	ldr	r3, [pc, #200]	; (197d0 <vTraceStoreMemMangEvent+0x144>)
   19708:	4798      	blx	r3
   1970a:	0002      	movs	r2, r0
   1970c:	232c      	movs	r3, #44	; 0x2c
   1970e:	18fb      	adds	r3, r7, r3
   19710:	801a      	strh	r2, [r3, #0]
   19712:	4b30      	ldr	r3, [pc, #192]	; (197d4 <vTraceStoreMemMangEvent+0x148>)
   19714:	4798      	blx	r3
   19716:	0003      	movs	r3, r0
   19718:	62bb      	str	r3, [r7, #40]	; 0x28
   1971a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1971c:	2b00      	cmp	r3, #0
   1971e:	d03e      	beq.n	1979e <vTraceStoreMemMangEvent+0x112>
   19720:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19722:	222f      	movs	r2, #47	; 0x2f
   19724:	18ba      	adds	r2, r7, r2
   19726:	7812      	ldrb	r2, [r2, #0]
   19728:	705a      	strb	r2, [r3, #1]
   1972a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1972c:	2200      	movs	r2, #0
   1972e:	701a      	strb	r2, [r3, #0]
   19730:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19732:	222c      	movs	r2, #44	; 0x2c
   19734:	18ba      	adds	r2, r7, r2
   19736:	8812      	ldrh	r2, [r2, #0]
   19738:	805a      	strh	r2, [r3, #2]
   1973a:	4b27      	ldr	r3, [pc, #156]	; (197d8 <vTraceStoreMemMangEvent+0x14c>)
   1973c:	4798      	blx	r3
   1973e:	68bb      	ldr	r3, [r7, #8]
   19740:	4a22      	ldr	r2, [pc, #136]	; (197cc <vTraceStoreMemMangEvent+0x140>)
   19742:	0019      	movs	r1, r3
   19744:	0010      	movs	r0, r2
   19746:	4b22      	ldr	r3, [pc, #136]	; (197d0 <vTraceStoreMemMangEvent+0x144>)
   19748:	4798      	blx	r3
   1974a:	0002      	movs	r2, r0
   1974c:	2326      	movs	r3, #38	; 0x26
   1974e:	18fb      	adds	r3, r7, r3
   19750:	801a      	strh	r2, [r3, #0]
   19752:	2325      	movs	r3, #37	; 0x25
   19754:	18fb      	adds	r3, r7, r3
   19756:	2200      	movs	r2, #0
   19758:	701a      	strb	r2, [r3, #0]
   1975a:	4b1e      	ldr	r3, [pc, #120]	; (197d4 <vTraceStoreMemMangEvent+0x148>)
   1975c:	4798      	blx	r3
   1975e:	0003      	movs	r3, r0
   19760:	623b      	str	r3, [r7, #32]
   19762:	6a3b      	ldr	r3, [r7, #32]
   19764:	2b00      	cmp	r3, #0
   19766:	d01a      	beq.n	1979e <vTraceStoreMemMangEvent+0x112>
   19768:	6a3b      	ldr	r3, [r7, #32]
   1976a:	2226      	movs	r2, #38	; 0x26
   1976c:	18ba      	adds	r2, r7, r2
   1976e:	8812      	ldrh	r2, [r2, #0]
   19770:	805a      	strh	r2, [r3, #2]
   19772:	6a3b      	ldr	r3, [r7, #32]
   19774:	2225      	movs	r2, #37	; 0x25
   19776:	18ba      	adds	r2, r7, r2
   19778:	7812      	ldrb	r2, [r2, #0]
   1977a:	705a      	strb	r2, [r3, #1]
   1977c:	68fb      	ldr	r3, [r7, #12]
   1977e:	b2db      	uxtb	r3, r3
   19780:	3301      	adds	r3, #1
   19782:	b2da      	uxtb	r2, r3
   19784:	6a3b      	ldr	r3, [r7, #32]
   19786:	701a      	strb	r2, [r3, #0]
   19788:	68fb      	ldr	r3, [r7, #12]
   1978a:	b2da      	uxtb	r2, r3
   1978c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1978e:	701a      	strb	r2, [r3, #0]
   19790:	4b11      	ldr	r3, [pc, #68]	; (197d8 <vTraceStoreMemMangEvent+0x14c>)
   19792:	4798      	blx	r3
   19794:	4b09      	ldr	r3, [pc, #36]	; (197bc <vTraceStoreMemMangEvent+0x130>)
   19796:	681b      	ldr	r3, [r3, #0]
   19798:	4a0a      	ldr	r2, [pc, #40]	; (197c4 <vTraceStoreMemMangEvent+0x138>)
   1979a:	6812      	ldr	r2, [r2, #0]
   1979c:	651a      	str	r2, [r3, #80]	; 0x50
   1979e:	4b08      	ldr	r3, [pc, #32]	; (197c0 <vTraceStoreMemMangEvent+0x134>)
   197a0:	681b      	ldr	r3, [r3, #0]
   197a2:	1e5a      	subs	r2, r3, #1
   197a4:	4b06      	ldr	r3, [pc, #24]	; (197c0 <vTraceStoreMemMangEvent+0x134>)
   197a6:	601a      	str	r2, [r3, #0]
   197a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   197aa:	617b      	str	r3, [r7, #20]
   197ac:	697b      	ldr	r3, [r7, #20]
   197ae:	f383 8810 	msr	PRIMASK, r3
   197b2:	e000      	b.n	197b6 <vTraceStoreMemMangEvent+0x12a>
   197b4:	46c0      	nop			; (mov r8, r8)
   197b6:	46bd      	mov	sp, r7
   197b8:	b00e      	add	sp, #56	; 0x38
   197ba:	bd80      	pop	{r7, pc}
   197bc:	20000e18 	.word	0x20000e18
   197c0:	20000d70 	.word	0x20000d70
   197c4:	20000d84 	.word	0x20000d84
   197c8:	0001a895 	.word	0x0001a895
   197cc:	0000ffff 	.word	0x0000ffff
   197d0:	00019a59 	.word	0x00019a59
   197d4:	0001a239 	.word	0x0001a239
   197d8:	0001a83d 	.word	0x0001a83d

000197dc <prvTraceStoreKernelCall>:
   197dc:	b590      	push	{r4, r7, lr}
   197de:	b08b      	sub	sp, #44	; 0x2c
   197e0:	af00      	add	r7, sp, #0
   197e2:	60f8      	str	r0, [r7, #12]
   197e4:	607a      	str	r2, [r7, #4]
   197e6:	230b      	movs	r3, #11
   197e8:	18fb      	adds	r3, r7, r3
   197ea:	1c0a      	adds	r2, r1, #0
   197ec:	701a      	strb	r2, [r3, #0]
   197ee:	68fb      	ldr	r3, [r7, #12]
   197f0:	2bfe      	cmp	r3, #254	; 0xfe
   197f2:	d904      	bls.n	197fe <prvTraceStoreKernelCall+0x22>
   197f4:	4b39      	ldr	r3, [pc, #228]	; (198dc <prvTraceStoreKernelCall+0x100>)
   197f6:	0018      	movs	r0, r3
   197f8:	4b39      	ldr	r3, [pc, #228]	; (198e0 <prvTraceStoreKernelCall+0x104>)
   197fa:	4798      	blx	r3
   197fc:	e06b      	b.n	198d6 <prvTraceStoreKernelCall+0xfa>
   197fe:	230b      	movs	r3, #11
   19800:	18fb      	adds	r3, r7, r3
   19802:	781b      	ldrb	r3, [r3, #0]
   19804:	2b08      	cmp	r3, #8
   19806:	d904      	bls.n	19812 <prvTraceStoreKernelCall+0x36>
   19808:	4b36      	ldr	r3, [pc, #216]	; (198e4 <prvTraceStoreKernelCall+0x108>)
   1980a:	0018      	movs	r0, r3
   1980c:	4b34      	ldr	r3, [pc, #208]	; (198e0 <prvTraceStoreKernelCall+0x104>)
   1980e:	4798      	blx	r3
   19810:	e061      	b.n	198d6 <prvTraceStoreKernelCall+0xfa>
   19812:	4b35      	ldr	r3, [pc, #212]	; (198e8 <prvTraceStoreKernelCall+0x10c>)
   19814:	681a      	ldr	r2, [r3, #0]
   19816:	230b      	movs	r3, #11
   19818:	18fb      	adds	r3, r7, r3
   1981a:	781b      	ldrb	r3, [r3, #0]
   1981c:	2164      	movs	r1, #100	; 0x64
   1981e:	18d3      	adds	r3, r2, r3
   19820:	185b      	adds	r3, r3, r1
   19822:	781b      	ldrb	r3, [r3, #0]
   19824:	001a      	movs	r2, r3
   19826:	687b      	ldr	r3, [r7, #4]
   19828:	429a      	cmp	r2, r3
   1982a:	d204      	bcs.n	19836 <prvTraceStoreKernelCall+0x5a>
   1982c:	4b2f      	ldr	r3, [pc, #188]	; (198ec <prvTraceStoreKernelCall+0x110>)
   1982e:	0018      	movs	r0, r3
   19830:	4b2b      	ldr	r3, [pc, #172]	; (198e0 <prvTraceStoreKernelCall+0x104>)
   19832:	4798      	blx	r3
   19834:	e04f      	b.n	198d6 <prvTraceStoreKernelCall+0xfa>
   19836:	4b2e      	ldr	r3, [pc, #184]	; (198f0 <prvTraceStoreKernelCall+0x114>)
   19838:	681b      	ldr	r3, [r3, #0]
   1983a:	2b00      	cmp	r3, #0
   1983c:	d004      	beq.n	19848 <prvTraceStoreKernelCall+0x6c>
   1983e:	4b2d      	ldr	r3, [pc, #180]	; (198f4 <prvTraceStoreKernelCall+0x118>)
   19840:	0018      	movs	r0, r3
   19842:	4b27      	ldr	r3, [pc, #156]	; (198e0 <prvTraceStoreKernelCall+0x104>)
   19844:	4798      	blx	r3
   19846:	e046      	b.n	198d6 <prvTraceStoreKernelCall+0xfa>
   19848:	4b2b      	ldr	r3, [pc, #172]	; (198f8 <prvTraceStoreKernelCall+0x11c>)
   1984a:	781b      	ldrb	r3, [r3, #0]
   1984c:	2b00      	cmp	r3, #0
   1984e:	d041      	beq.n	198d4 <prvTraceStoreKernelCall+0xf8>
   19850:	f3ef 8310 	mrs	r3, PRIMASK
   19854:	617b      	str	r3, [r7, #20]
   19856:	697b      	ldr	r3, [r7, #20]
   19858:	627b      	str	r3, [r7, #36]	; 0x24
   1985a:	2301      	movs	r3, #1
   1985c:	61bb      	str	r3, [r7, #24]
   1985e:	69bb      	ldr	r3, [r7, #24]
   19860:	f383 8810 	msr	PRIMASK, r3
   19864:	4b22      	ldr	r3, [pc, #136]	; (198f0 <prvTraceStoreKernelCall+0x114>)
   19866:	681b      	ldr	r3, [r3, #0]
   19868:	1c5a      	adds	r2, r3, #1
   1986a:	4b21      	ldr	r3, [pc, #132]	; (198f0 <prvTraceStoreKernelCall+0x114>)
   1986c:	601a      	str	r2, [r3, #0]
   1986e:	4b1e      	ldr	r3, [pc, #120]	; (198e8 <prvTraceStoreKernelCall+0x10c>)
   19870:	681b      	ldr	r3, [r3, #0]
   19872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19874:	2b00      	cmp	r3, #0
   19876:	d022      	beq.n	198be <prvTraceStoreKernelCall+0xe2>
   19878:	2322      	movs	r3, #34	; 0x22
   1987a:	18fc      	adds	r4, r7, r3
   1987c:	4b1f      	ldr	r3, [pc, #124]	; (198fc <prvTraceStoreKernelCall+0x120>)
   1987e:	0018      	movs	r0, r3
   19880:	4b1f      	ldr	r3, [pc, #124]	; (19900 <prvTraceStoreKernelCall+0x124>)
   19882:	4798      	blx	r3
   19884:	0003      	movs	r3, r0
   19886:	8023      	strh	r3, [r4, #0]
   19888:	2321      	movs	r3, #33	; 0x21
   1988a:	18fb      	adds	r3, r7, r3
   1988c:	687a      	ldr	r2, [r7, #4]
   1988e:	701a      	strb	r2, [r3, #0]
   19890:	4b1c      	ldr	r3, [pc, #112]	; (19904 <prvTraceStoreKernelCall+0x128>)
   19892:	4798      	blx	r3
   19894:	0003      	movs	r3, r0
   19896:	61fb      	str	r3, [r7, #28]
   19898:	69fb      	ldr	r3, [r7, #28]
   1989a:	2b00      	cmp	r3, #0
   1989c:	d00f      	beq.n	198be <prvTraceStoreKernelCall+0xe2>
   1989e:	69fb      	ldr	r3, [r7, #28]
   198a0:	2222      	movs	r2, #34	; 0x22
   198a2:	18ba      	adds	r2, r7, r2
   198a4:	8812      	ldrh	r2, [r2, #0]
   198a6:	805a      	strh	r2, [r3, #2]
   198a8:	68fb      	ldr	r3, [r7, #12]
   198aa:	b2da      	uxtb	r2, r3
   198ac:	69fb      	ldr	r3, [r7, #28]
   198ae:	701a      	strb	r2, [r3, #0]
   198b0:	69fb      	ldr	r3, [r7, #28]
   198b2:	2221      	movs	r2, #33	; 0x21
   198b4:	18ba      	adds	r2, r7, r2
   198b6:	7812      	ldrb	r2, [r2, #0]
   198b8:	705a      	strb	r2, [r3, #1]
   198ba:	4b13      	ldr	r3, [pc, #76]	; (19908 <prvTraceStoreKernelCall+0x12c>)
   198bc:	4798      	blx	r3
   198be:	4b0c      	ldr	r3, [pc, #48]	; (198f0 <prvTraceStoreKernelCall+0x114>)
   198c0:	681b      	ldr	r3, [r3, #0]
   198c2:	1e5a      	subs	r2, r3, #1
   198c4:	4b0a      	ldr	r3, [pc, #40]	; (198f0 <prvTraceStoreKernelCall+0x114>)
   198c6:	601a      	str	r2, [r3, #0]
   198c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   198ca:	613b      	str	r3, [r7, #16]
   198cc:	693b      	ldr	r3, [r7, #16]
   198ce:	f383 8810 	msr	PRIMASK, r3
   198d2:	e000      	b.n	198d6 <prvTraceStoreKernelCall+0xfa>
   198d4:	46c0      	nop			; (mov r8, r8)
   198d6:	46bd      	mov	sp, r7
   198d8:	b00b      	add	sp, #44	; 0x2c
   198da:	bd90      	pop	{r4, r7, pc}
   198dc:	000383c4 	.word	0x000383c4
   198e0:	0001a681 	.word	0x0001a681
   198e4:	000383fc 	.word	0x000383fc
   198e8:	20000e18 	.word	0x20000e18
   198ec:	00038444 	.word	0x00038444
   198f0:	20000d70 	.word	0x20000d70
   198f4:	0003848c 	.word	0x0003848c
   198f8:	20000d7c 	.word	0x20000d7c
   198fc:	0000ffff 	.word	0x0000ffff
   19900:	0001a895 	.word	0x0001a895
   19904:	0001a239 	.word	0x0001a239
   19908:	0001a83d 	.word	0x0001a83d

0001990c <prvTraceStoreKernelCallWithParam>:
   1990c:	b580      	push	{r7, lr}
   1990e:	b08a      	sub	sp, #40	; 0x28
   19910:	af00      	add	r7, sp, #0
   19912:	60f8      	str	r0, [r7, #12]
   19914:	607a      	str	r2, [r7, #4]
   19916:	603b      	str	r3, [r7, #0]
   19918:	230b      	movs	r3, #11
   1991a:	18fb      	adds	r3, r7, r3
   1991c:	1c0a      	adds	r2, r1, #0
   1991e:	701a      	strb	r2, [r3, #0]
   19920:	68fb      	ldr	r3, [r7, #12]
   19922:	2bfe      	cmp	r3, #254	; 0xfe
   19924:	d904      	bls.n	19930 <prvTraceStoreKernelCallWithParam+0x24>
   19926:	4b40      	ldr	r3, [pc, #256]	; (19a28 <prvTraceStoreKernelCallWithParam+0x11c>)
   19928:	0018      	movs	r0, r3
   1992a:	4b40      	ldr	r3, [pc, #256]	; (19a2c <prvTraceStoreKernelCallWithParam+0x120>)
   1992c:	4798      	blx	r3
   1992e:	e077      	b.n	19a20 <prvTraceStoreKernelCallWithParam+0x114>
   19930:	230b      	movs	r3, #11
   19932:	18fb      	adds	r3, r7, r3
   19934:	781b      	ldrb	r3, [r3, #0]
   19936:	2b08      	cmp	r3, #8
   19938:	d904      	bls.n	19944 <prvTraceStoreKernelCallWithParam+0x38>
   1993a:	4b3d      	ldr	r3, [pc, #244]	; (19a30 <prvTraceStoreKernelCallWithParam+0x124>)
   1993c:	0018      	movs	r0, r3
   1993e:	4b3b      	ldr	r3, [pc, #236]	; (19a2c <prvTraceStoreKernelCallWithParam+0x120>)
   19940:	4798      	blx	r3
   19942:	e06d      	b.n	19a20 <prvTraceStoreKernelCallWithParam+0x114>
   19944:	4b3b      	ldr	r3, [pc, #236]	; (19a34 <prvTraceStoreKernelCallWithParam+0x128>)
   19946:	681a      	ldr	r2, [r3, #0]
   19948:	230b      	movs	r3, #11
   1994a:	18fb      	adds	r3, r7, r3
   1994c:	781b      	ldrb	r3, [r3, #0]
   1994e:	2164      	movs	r1, #100	; 0x64
   19950:	18d3      	adds	r3, r2, r3
   19952:	185b      	adds	r3, r3, r1
   19954:	781b      	ldrb	r3, [r3, #0]
   19956:	001a      	movs	r2, r3
   19958:	687b      	ldr	r3, [r7, #4]
   1995a:	429a      	cmp	r2, r3
   1995c:	d204      	bcs.n	19968 <prvTraceStoreKernelCallWithParam+0x5c>
   1995e:	4b36      	ldr	r3, [pc, #216]	; (19a38 <prvTraceStoreKernelCallWithParam+0x12c>)
   19960:	0018      	movs	r0, r3
   19962:	4b32      	ldr	r3, [pc, #200]	; (19a2c <prvTraceStoreKernelCallWithParam+0x120>)
   19964:	4798      	blx	r3
   19966:	e05b      	b.n	19a20 <prvTraceStoreKernelCallWithParam+0x114>
   19968:	4b34      	ldr	r3, [pc, #208]	; (19a3c <prvTraceStoreKernelCallWithParam+0x130>)
   1996a:	681b      	ldr	r3, [r3, #0]
   1996c:	2b00      	cmp	r3, #0
   1996e:	d004      	beq.n	1997a <prvTraceStoreKernelCallWithParam+0x6e>
   19970:	4b33      	ldr	r3, [pc, #204]	; (19a40 <prvTraceStoreKernelCallWithParam+0x134>)
   19972:	0018      	movs	r0, r3
   19974:	4b2d      	ldr	r3, [pc, #180]	; (19a2c <prvTraceStoreKernelCallWithParam+0x120>)
   19976:	4798      	blx	r3
   19978:	e052      	b.n	19a20 <prvTraceStoreKernelCallWithParam+0x114>
   1997a:	f3ef 8310 	mrs	r3, PRIMASK
   1997e:	617b      	str	r3, [r7, #20]
   19980:	697b      	ldr	r3, [r7, #20]
   19982:	627b      	str	r3, [r7, #36]	; 0x24
   19984:	2301      	movs	r3, #1
   19986:	61bb      	str	r3, [r7, #24]
   19988:	69bb      	ldr	r3, [r7, #24]
   1998a:	f383 8810 	msr	PRIMASK, r3
   1998e:	4b2b      	ldr	r3, [pc, #172]	; (19a3c <prvTraceStoreKernelCallWithParam+0x130>)
   19990:	681b      	ldr	r3, [r3, #0]
   19992:	1c5a      	adds	r2, r3, #1
   19994:	4b29      	ldr	r3, [pc, #164]	; (19a3c <prvTraceStoreKernelCallWithParam+0x130>)
   19996:	601a      	str	r2, [r3, #0]
   19998:	4b26      	ldr	r3, [pc, #152]	; (19a34 <prvTraceStoreKernelCallWithParam+0x128>)
   1999a:	681b      	ldr	r3, [r3, #0]
   1999c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1999e:	2b00      	cmp	r3, #0
   199a0:	d034      	beq.n	19a0c <prvTraceStoreKernelCallWithParam+0x100>
   199a2:	4b28      	ldr	r3, [pc, #160]	; (19a44 <prvTraceStoreKernelCallWithParam+0x138>)
   199a4:	781b      	ldrb	r3, [r3, #0]
   199a6:	2b00      	cmp	r3, #0
   199a8:	d030      	beq.n	19a0c <prvTraceStoreKernelCallWithParam+0x100>
   199aa:	20ff      	movs	r0, #255	; 0xff
   199ac:	4b26      	ldr	r3, [pc, #152]	; (19a48 <prvTraceStoreKernelCallWithParam+0x13c>)
   199ae:	4798      	blx	r3
   199b0:	0003      	movs	r3, r0
   199b2:	001a      	movs	r2, r3
   199b4:	2323      	movs	r3, #35	; 0x23
   199b6:	18fb      	adds	r3, r7, r3
   199b8:	701a      	strb	r2, [r3, #0]
   199ba:	683b      	ldr	r3, [r7, #0]
   199bc:	0019      	movs	r1, r3
   199be:	20ff      	movs	r0, #255	; 0xff
   199c0:	4b22      	ldr	r3, [pc, #136]	; (19a4c <prvTraceStoreKernelCallWithParam+0x140>)
   199c2:	4798      	blx	r3
   199c4:	0002      	movs	r2, r0
   199c6:	2322      	movs	r3, #34	; 0x22
   199c8:	18fb      	adds	r3, r7, r3
   199ca:	701a      	strb	r2, [r3, #0]
   199cc:	2321      	movs	r3, #33	; 0x21
   199ce:	18fb      	adds	r3, r7, r3
   199d0:	687a      	ldr	r2, [r7, #4]
   199d2:	701a      	strb	r2, [r3, #0]
   199d4:	4b1e      	ldr	r3, [pc, #120]	; (19a50 <prvTraceStoreKernelCallWithParam+0x144>)
   199d6:	4798      	blx	r3
   199d8:	0003      	movs	r3, r0
   199da:	61fb      	str	r3, [r7, #28]
   199dc:	69fb      	ldr	r3, [r7, #28]
   199de:	2b00      	cmp	r3, #0
   199e0:	d014      	beq.n	19a0c <prvTraceStoreKernelCallWithParam+0x100>
   199e2:	69fb      	ldr	r3, [r7, #28]
   199e4:	2223      	movs	r2, #35	; 0x23
   199e6:	18ba      	adds	r2, r7, r2
   199e8:	7812      	ldrb	r2, [r2, #0]
   199ea:	70da      	strb	r2, [r3, #3]
   199ec:	68fb      	ldr	r3, [r7, #12]
   199ee:	b2da      	uxtb	r2, r3
   199f0:	69fb      	ldr	r3, [r7, #28]
   199f2:	701a      	strb	r2, [r3, #0]
   199f4:	69fb      	ldr	r3, [r7, #28]
   199f6:	2221      	movs	r2, #33	; 0x21
   199f8:	18ba      	adds	r2, r7, r2
   199fa:	7812      	ldrb	r2, [r2, #0]
   199fc:	705a      	strb	r2, [r3, #1]
   199fe:	69fb      	ldr	r3, [r7, #28]
   19a00:	2222      	movs	r2, #34	; 0x22
   19a02:	18ba      	adds	r2, r7, r2
   19a04:	7812      	ldrb	r2, [r2, #0]
   19a06:	709a      	strb	r2, [r3, #2]
   19a08:	4b12      	ldr	r3, [pc, #72]	; (19a54 <prvTraceStoreKernelCallWithParam+0x148>)
   19a0a:	4798      	blx	r3
   19a0c:	4b0b      	ldr	r3, [pc, #44]	; (19a3c <prvTraceStoreKernelCallWithParam+0x130>)
   19a0e:	681b      	ldr	r3, [r3, #0]
   19a10:	1e5a      	subs	r2, r3, #1
   19a12:	4b0a      	ldr	r3, [pc, #40]	; (19a3c <prvTraceStoreKernelCallWithParam+0x130>)
   19a14:	601a      	str	r2, [r3, #0]
   19a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19a18:	613b      	str	r3, [r7, #16]
   19a1a:	693b      	ldr	r3, [r7, #16]
   19a1c:	f383 8810 	msr	PRIMASK, r3
   19a20:	46bd      	mov	sp, r7
   19a22:	b00a      	add	sp, #40	; 0x28
   19a24:	bd80      	pop	{r7, pc}
   19a26:	46c0      	nop			; (mov r8, r8)
   19a28:	000384c4 	.word	0x000384c4
   19a2c:	0001a681 	.word	0x0001a681
   19a30:	00038504 	.word	0x00038504
   19a34:	20000e18 	.word	0x20000e18
   19a38:	00038554 	.word	0x00038554
   19a3c:	20000d70 	.word	0x20000d70
   19a40:	000385a4 	.word	0x000385a4
   19a44:	20000d7c 	.word	0x20000d7c
   19a48:	0001a895 	.word	0x0001a895
   19a4c:	00019a59 	.word	0x00019a59
   19a50:	0001a239 	.word	0x0001a239
   19a54:	0001a83d 	.word	0x0001a83d

00019a58 <prvTraceGetParam>:
   19a58:	b580      	push	{r7, lr}
   19a5a:	b084      	sub	sp, #16
   19a5c:	af00      	add	r7, sp, #0
   19a5e:	6078      	str	r0, [r7, #4]
   19a60:	6039      	str	r1, [r7, #0]
   19a62:	687b      	ldr	r3, [r7, #4]
   19a64:	2bff      	cmp	r3, #255	; 0xff
   19a66:	d009      	beq.n	19a7c <prvTraceGetParam+0x24>
   19a68:	687b      	ldr	r3, [r7, #4]
   19a6a:	4a19      	ldr	r2, [pc, #100]	; (19ad0 <prvTraceGetParam+0x78>)
   19a6c:	4293      	cmp	r3, r2
   19a6e:	d005      	beq.n	19a7c <prvTraceGetParam+0x24>
   19a70:	4b18      	ldr	r3, [pc, #96]	; (19ad4 <prvTraceGetParam+0x7c>)
   19a72:	0018      	movs	r0, r3
   19a74:	4b18      	ldr	r3, [pc, #96]	; (19ad8 <prvTraceGetParam+0x80>)
   19a76:	4798      	blx	r3
   19a78:	683b      	ldr	r3, [r7, #0]
   19a7a:	e024      	b.n	19ac6 <prvTraceGetParam+0x6e>
   19a7c:	683a      	ldr	r2, [r7, #0]
   19a7e:	687b      	ldr	r3, [r7, #4]
   19a80:	429a      	cmp	r2, r3
   19a82:	d801      	bhi.n	19a88 <prvTraceGetParam+0x30>
   19a84:	683b      	ldr	r3, [r7, #0]
   19a86:	e01e      	b.n	19ac6 <prvTraceGetParam+0x6e>
   19a88:	4b14      	ldr	r3, [pc, #80]	; (19adc <prvTraceGetParam+0x84>)
   19a8a:	4798      	blx	r3
   19a8c:	0003      	movs	r3, r0
   19a8e:	60fb      	str	r3, [r7, #12]
   19a90:	68fb      	ldr	r3, [r7, #12]
   19a92:	2b00      	cmp	r3, #0
   19a94:	d014      	beq.n	19ac0 <prvTraceGetParam+0x68>
   19a96:	68fb      	ldr	r3, [r7, #12]
   19a98:	2201      	movs	r2, #1
   19a9a:	701a      	strb	r2, [r3, #0]
   19a9c:	687b      	ldr	r3, [r7, #4]
   19a9e:	43db      	mvns	r3, r3
   19aa0:	683a      	ldr	r2, [r7, #0]
   19aa2:	4013      	ands	r3, r2
   19aa4:	0a1b      	lsrs	r3, r3, #8
   19aa6:	b2da      	uxtb	r2, r3
   19aa8:	68fb      	ldr	r3, [r7, #12]
   19aaa:	705a      	strb	r2, [r3, #1]
   19aac:	687b      	ldr	r3, [r7, #4]
   19aae:	43db      	mvns	r3, r3
   19ab0:	683a      	ldr	r2, [r7, #0]
   19ab2:	4013      	ands	r3, r2
   19ab4:	0c1b      	lsrs	r3, r3, #16
   19ab6:	b29a      	uxth	r2, r3
   19ab8:	68fb      	ldr	r3, [r7, #12]
   19aba:	805a      	strh	r2, [r3, #2]
   19abc:	4b08      	ldr	r3, [pc, #32]	; (19ae0 <prvTraceGetParam+0x88>)
   19abe:	4798      	blx	r3
   19ac0:	683b      	ldr	r3, [r7, #0]
   19ac2:	687a      	ldr	r2, [r7, #4]
   19ac4:	4013      	ands	r3, r2
   19ac6:	0018      	movs	r0, r3
   19ac8:	46bd      	mov	sp, r7
   19aca:	b004      	add	sp, #16
   19acc:	bd80      	pop	{r7, pc}
   19ace:	46c0      	nop			; (mov r8, r8)
   19ad0:	0000ffff 	.word	0x0000ffff
   19ad4:	000385dc 	.word	0x000385dc
   19ad8:	0001a681 	.word	0x0001a681
   19adc:	0001a239 	.word	0x0001a239
   19ae0:	0001a83d 	.word	0x0001a83d

00019ae4 <prvTraceStoreKernelCallWithNumericParamOnly>:
   19ae4:	b580      	push	{r7, lr}
   19ae6:	b08a      	sub	sp, #40	; 0x28
   19ae8:	af00      	add	r7, sp, #0
   19aea:	6078      	str	r0, [r7, #4]
   19aec:	6039      	str	r1, [r7, #0]
   19aee:	2326      	movs	r3, #38	; 0x26
   19af0:	18fb      	adds	r3, r7, r3
   19af2:	2200      	movs	r2, #0
   19af4:	801a      	strh	r2, [r3, #0]
   19af6:	687b      	ldr	r3, [r7, #4]
   19af8:	2bfe      	cmp	r3, #254	; 0xfe
   19afa:	d904      	bls.n	19b06 <prvTraceStoreKernelCallWithNumericParamOnly+0x22>
   19afc:	4b2d      	ldr	r3, [pc, #180]	; (19bb4 <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
   19afe:	0018      	movs	r0, r3
   19b00:	4b2d      	ldr	r3, [pc, #180]	; (19bb8 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   19b02:	4798      	blx	r3
   19b04:	e053      	b.n	19bae <prvTraceStoreKernelCallWithNumericParamOnly+0xca>
   19b06:	4b2d      	ldr	r3, [pc, #180]	; (19bbc <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   19b08:	681b      	ldr	r3, [r3, #0]
   19b0a:	2b00      	cmp	r3, #0
   19b0c:	d004      	beq.n	19b18 <prvTraceStoreKernelCallWithNumericParamOnly+0x34>
   19b0e:	4b2c      	ldr	r3, [pc, #176]	; (19bc0 <prvTraceStoreKernelCallWithNumericParamOnly+0xdc>)
   19b10:	0018      	movs	r0, r3
   19b12:	4b29      	ldr	r3, [pc, #164]	; (19bb8 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   19b14:	4798      	blx	r3
   19b16:	e04a      	b.n	19bae <prvTraceStoreKernelCallWithNumericParamOnly+0xca>
   19b18:	f3ef 8310 	mrs	r3, PRIMASK
   19b1c:	613b      	str	r3, [r7, #16]
   19b1e:	693b      	ldr	r3, [r7, #16]
   19b20:	623b      	str	r3, [r7, #32]
   19b22:	2301      	movs	r3, #1
   19b24:	617b      	str	r3, [r7, #20]
   19b26:	697b      	ldr	r3, [r7, #20]
   19b28:	f383 8810 	msr	PRIMASK, r3
   19b2c:	4b23      	ldr	r3, [pc, #140]	; (19bbc <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   19b2e:	681b      	ldr	r3, [r3, #0]
   19b30:	1c5a      	adds	r2, r3, #1
   19b32:	4b22      	ldr	r3, [pc, #136]	; (19bbc <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   19b34:	601a      	str	r2, [r3, #0]
   19b36:	4b23      	ldr	r3, [pc, #140]	; (19bc4 <prvTraceStoreKernelCallWithNumericParamOnly+0xe0>)
   19b38:	681b      	ldr	r3, [r3, #0]
   19b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19b3c:	2b00      	cmp	r3, #0
   19b3e:	d02c      	beq.n	19b9a <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
   19b40:	4b21      	ldr	r3, [pc, #132]	; (19bc8 <prvTraceStoreKernelCallWithNumericParamOnly+0xe4>)
   19b42:	781b      	ldrb	r3, [r3, #0]
   19b44:	2b00      	cmp	r3, #0
   19b46:	d028      	beq.n	19b9a <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
   19b48:	20ff      	movs	r0, #255	; 0xff
   19b4a:	4b20      	ldr	r3, [pc, #128]	; (19bcc <prvTraceStoreKernelCallWithNumericParamOnly+0xe8>)
   19b4c:	4798      	blx	r3
   19b4e:	0003      	movs	r3, r0
   19b50:	001a      	movs	r2, r3
   19b52:	231f      	movs	r3, #31
   19b54:	18fb      	adds	r3, r7, r3
   19b56:	701a      	strb	r2, [r3, #0]
   19b58:	683b      	ldr	r3, [r7, #0]
   19b5a:	4a1d      	ldr	r2, [pc, #116]	; (19bd0 <prvTraceStoreKernelCallWithNumericParamOnly+0xec>)
   19b5c:	0019      	movs	r1, r3
   19b5e:	0010      	movs	r0, r2
   19b60:	4b1c      	ldr	r3, [pc, #112]	; (19bd4 <prvTraceStoreKernelCallWithNumericParamOnly+0xf0>)
   19b62:	4798      	blx	r3
   19b64:	0002      	movs	r2, r0
   19b66:	2326      	movs	r3, #38	; 0x26
   19b68:	18fb      	adds	r3, r7, r3
   19b6a:	801a      	strh	r2, [r3, #0]
   19b6c:	4b1a      	ldr	r3, [pc, #104]	; (19bd8 <prvTraceStoreKernelCallWithNumericParamOnly+0xf4>)
   19b6e:	4798      	blx	r3
   19b70:	0003      	movs	r3, r0
   19b72:	61bb      	str	r3, [r7, #24]
   19b74:	69bb      	ldr	r3, [r7, #24]
   19b76:	2b00      	cmp	r3, #0
   19b78:	d00f      	beq.n	19b9a <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
   19b7a:	69bb      	ldr	r3, [r7, #24]
   19b7c:	221f      	movs	r2, #31
   19b7e:	18ba      	adds	r2, r7, r2
   19b80:	7812      	ldrb	r2, [r2, #0]
   19b82:	705a      	strb	r2, [r3, #1]
   19b84:	687b      	ldr	r3, [r7, #4]
   19b86:	b2da      	uxtb	r2, r3
   19b88:	69bb      	ldr	r3, [r7, #24]
   19b8a:	701a      	strb	r2, [r3, #0]
   19b8c:	69bb      	ldr	r3, [r7, #24]
   19b8e:	2226      	movs	r2, #38	; 0x26
   19b90:	18ba      	adds	r2, r7, r2
   19b92:	8812      	ldrh	r2, [r2, #0]
   19b94:	805a      	strh	r2, [r3, #2]
   19b96:	4b11      	ldr	r3, [pc, #68]	; (19bdc <prvTraceStoreKernelCallWithNumericParamOnly+0xf8>)
   19b98:	4798      	blx	r3
   19b9a:	4b08      	ldr	r3, [pc, #32]	; (19bbc <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   19b9c:	681b      	ldr	r3, [r3, #0]
   19b9e:	1e5a      	subs	r2, r3, #1
   19ba0:	4b06      	ldr	r3, [pc, #24]	; (19bbc <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   19ba2:	601a      	str	r2, [r3, #0]
   19ba4:	6a3b      	ldr	r3, [r7, #32]
   19ba6:	60fb      	str	r3, [r7, #12]
   19ba8:	68fb      	ldr	r3, [r7, #12]
   19baa:	f383 8810 	msr	PRIMASK, r3
   19bae:	46bd      	mov	sp, r7
   19bb0:	b00a      	add	sp, #40	; 0x28
   19bb2:	bd80      	pop	{r7, pc}
   19bb4:	00038618 	.word	0x00038618
   19bb8:	0001a681 	.word	0x0001a681
   19bbc:	20000d70 	.word	0x20000d70
   19bc0:	00038670 	.word	0x00038670
   19bc4:	20000e18 	.word	0x20000e18
   19bc8:	20000d7c 	.word	0x20000d7c
   19bcc:	0001a895 	.word	0x0001a895
   19bd0:	0000ffff 	.word	0x0000ffff
   19bd4:	00019a59 	.word	0x00019a59
   19bd8:	0001a239 	.word	0x0001a239
   19bdc:	0001a83d 	.word	0x0001a83d

00019be0 <prvTraceStoreTaskswitch>:
   19be0:	b590      	push	{r4, r7, lr}
   19be2:	b089      	sub	sp, #36	; 0x24
   19be4:	af00      	add	r7, sp, #0
   19be6:	0002      	movs	r2, r0
   19be8:	1dfb      	adds	r3, r7, #7
   19bea:	701a      	strb	r2, [r3, #0]
   19bec:	1dfb      	adds	r3, r7, #7
   19bee:	781b      	ldrb	r3, [r3, #0]
   19bf0:	2b0f      	cmp	r3, #15
   19bf2:	d904      	bls.n	19bfe <prvTraceStoreTaskswitch+0x1e>
   19bf4:	4b34      	ldr	r3, [pc, #208]	; (19cc8 <prvTraceStoreTaskswitch+0xe8>)
   19bf6:	0018      	movs	r0, r3
   19bf8:	4b34      	ldr	r3, [pc, #208]	; (19ccc <prvTraceStoreTaskswitch+0xec>)
   19bfa:	4798      	blx	r3
   19bfc:	e061      	b.n	19cc2 <prvTraceStoreTaskswitch+0xe2>
   19bfe:	f3ef 8310 	mrs	r3, PRIMASK
   19c02:	60fb      	str	r3, [r7, #12]
   19c04:	68fb      	ldr	r3, [r7, #12]
   19c06:	61fb      	str	r3, [r7, #28]
   19c08:	2301      	movs	r3, #1
   19c0a:	613b      	str	r3, [r7, #16]
   19c0c:	693b      	ldr	r3, [r7, #16]
   19c0e:	f383 8810 	msr	PRIMASK, r3
   19c12:	4b2f      	ldr	r3, [pc, #188]	; (19cd0 <prvTraceStoreTaskswitch+0xf0>)
   19c14:	681b      	ldr	r3, [r3, #0]
   19c16:	1c5a      	adds	r2, r3, #1
   19c18:	4b2d      	ldr	r3, [pc, #180]	; (19cd0 <prvTraceStoreTaskswitch+0xf0>)
   19c1a:	601a      	str	r2, [r3, #0]
   19c1c:	4b2d      	ldr	r3, [pc, #180]	; (19cd4 <prvTraceStoreTaskswitch+0xf4>)
   19c1e:	781b      	ldrb	r3, [r3, #0]
   19c20:	1dfa      	adds	r2, r7, #7
   19c22:	7812      	ldrb	r2, [r2, #0]
   19c24:	429a      	cmp	r2, r3
   19c26:	d042      	beq.n	19cae <prvTraceStoreTaskswitch+0xce>
   19c28:	4b2b      	ldr	r3, [pc, #172]	; (19cd8 <prvTraceStoreTaskswitch+0xf8>)
   19c2a:	681b      	ldr	r3, [r3, #0]
   19c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19c2e:	2b00      	cmp	r3, #0
   19c30:	d03d      	beq.n	19cae <prvTraceStoreTaskswitch+0xce>
   19c32:	4b2a      	ldr	r3, [pc, #168]	; (19cdc <prvTraceStoreTaskswitch+0xfc>)
   19c34:	2200      	movs	r2, #0
   19c36:	601a      	str	r2, [r3, #0]
   19c38:	231a      	movs	r3, #26
   19c3a:	18fc      	adds	r4, r7, r3
   19c3c:	4b28      	ldr	r3, [pc, #160]	; (19ce0 <prvTraceStoreTaskswitch+0x100>)
   19c3e:	0018      	movs	r0, r3
   19c40:	4b28      	ldr	r3, [pc, #160]	; (19ce4 <prvTraceStoreTaskswitch+0x104>)
   19c42:	4798      	blx	r3
   19c44:	0003      	movs	r3, r0
   19c46:	8023      	strh	r3, [r4, #0]
   19c48:	4b22      	ldr	r3, [pc, #136]	; (19cd4 <prvTraceStoreTaskswitch+0xf4>)
   19c4a:	1dfa      	adds	r2, r7, #7
   19c4c:	7812      	ldrb	r2, [r2, #0]
   19c4e:	701a      	strb	r2, [r3, #0]
   19c50:	2319      	movs	r3, #25
   19c52:	18fb      	adds	r3, r7, r3
   19c54:	4a1f      	ldr	r2, [pc, #124]	; (19cd4 <prvTraceStoreTaskswitch+0xf4>)
   19c56:	7812      	ldrb	r2, [r2, #0]
   19c58:	701a      	strb	r2, [r3, #0]
   19c5a:	4b23      	ldr	r3, [pc, #140]	; (19ce8 <prvTraceStoreTaskswitch+0x108>)
   19c5c:	4798      	blx	r3
   19c5e:	0003      	movs	r3, r0
   19c60:	617b      	str	r3, [r7, #20]
   19c62:	697b      	ldr	r3, [r7, #20]
   19c64:	2b00      	cmp	r3, #0
   19c66:	d022      	beq.n	19cae <prvTraceStoreTaskswitch+0xce>
   19c68:	4b1a      	ldr	r3, [pc, #104]	; (19cd4 <prvTraceStoreTaskswitch+0xf4>)
   19c6a:	781b      	ldrb	r3, [r3, #0]
   19c6c:	0019      	movs	r1, r3
   19c6e:	2003      	movs	r0, #3
   19c70:	4b1e      	ldr	r3, [pc, #120]	; (19cec <prvTraceStoreTaskswitch+0x10c>)
   19c72:	4798      	blx	r3
   19c74:	0003      	movs	r3, r0
   19c76:	2b01      	cmp	r3, #1
   19c78:	d103      	bne.n	19c82 <prvTraceStoreTaskswitch+0xa2>
   19c7a:	697b      	ldr	r3, [r7, #20]
   19c7c:	2207      	movs	r2, #7
   19c7e:	701a      	strb	r2, [r3, #0]
   19c80:	e002      	b.n	19c88 <prvTraceStoreTaskswitch+0xa8>
   19c82:	697b      	ldr	r3, [r7, #20]
   19c84:	2206      	movs	r2, #6
   19c86:	701a      	strb	r2, [r3, #0]
   19c88:	697b      	ldr	r3, [r7, #20]
   19c8a:	221a      	movs	r2, #26
   19c8c:	18ba      	adds	r2, r7, r2
   19c8e:	8812      	ldrh	r2, [r2, #0]
   19c90:	805a      	strh	r2, [r3, #2]
   19c92:	697b      	ldr	r3, [r7, #20]
   19c94:	2219      	movs	r2, #25
   19c96:	18ba      	adds	r2, r7, r2
   19c98:	7812      	ldrb	r2, [r2, #0]
   19c9a:	705a      	strb	r2, [r3, #1]
   19c9c:	4b0d      	ldr	r3, [pc, #52]	; (19cd4 <prvTraceStoreTaskswitch+0xf4>)
   19c9e:	781b      	ldrb	r3, [r3, #0]
   19ca0:	2201      	movs	r2, #1
   19ca2:	0019      	movs	r1, r3
   19ca4:	2003      	movs	r0, #3
   19ca6:	4b12      	ldr	r3, [pc, #72]	; (19cf0 <prvTraceStoreTaskswitch+0x110>)
   19ca8:	4798      	blx	r3
   19caa:	4b12      	ldr	r3, [pc, #72]	; (19cf4 <prvTraceStoreTaskswitch+0x114>)
   19cac:	4798      	blx	r3
   19cae:	4b08      	ldr	r3, [pc, #32]	; (19cd0 <prvTraceStoreTaskswitch+0xf0>)
   19cb0:	681b      	ldr	r3, [r3, #0]
   19cb2:	1e5a      	subs	r2, r3, #1
   19cb4:	4b06      	ldr	r3, [pc, #24]	; (19cd0 <prvTraceStoreTaskswitch+0xf0>)
   19cb6:	601a      	str	r2, [r3, #0]
   19cb8:	69fb      	ldr	r3, [r7, #28]
   19cba:	60bb      	str	r3, [r7, #8]
   19cbc:	68bb      	ldr	r3, [r7, #8]
   19cbe:	f383 8810 	msr	PRIMASK, r3
   19cc2:	46bd      	mov	sp, r7
   19cc4:	b009      	add	sp, #36	; 0x24
   19cc6:	bd90      	pop	{r4, r7, pc}
   19cc8:	000386a8 	.word	0x000386a8
   19ccc:	0001a681 	.word	0x0001a681
   19cd0:	20000d70 	.word	0x20000d70
   19cd4:	20000d7c 	.word	0x20000d7c
   19cd8:	20000e18 	.word	0x20000e18
   19cdc:	20000d5c 	.word	0x20000d5c
   19ce0:	0000ffff 	.word	0x0000ffff
   19ce4:	0001a895 	.word	0x0001a895
   19ce8:	0001a239 	.word	0x0001a239
   19cec:	00019edd 	.word	0x00019edd
   19cf0:	00019e39 	.word	0x00019e39
   19cf4:	0001a83d 	.word	0x0001a83d

00019cf8 <prvTraceSetPriorityProperty>:
   19cf8:	b590      	push	{r4, r7, lr}
   19cfa:	b083      	sub	sp, #12
   19cfc:	af00      	add	r7, sp, #0
   19cfe:	0004      	movs	r4, r0
   19d00:	0008      	movs	r0, r1
   19d02:	0011      	movs	r1, r2
   19d04:	1dfb      	adds	r3, r7, #7
   19d06:	1c22      	adds	r2, r4, #0
   19d08:	701a      	strb	r2, [r3, #0]
   19d0a:	1dbb      	adds	r3, r7, #6
   19d0c:	1c02      	adds	r2, r0, #0
   19d0e:	701a      	strb	r2, [r3, #0]
   19d10:	1d7b      	adds	r3, r7, #5
   19d12:	1c0a      	adds	r2, r1, #0
   19d14:	701a      	strb	r2, [r3, #0]
   19d16:	1dfb      	adds	r3, r7, #7
   19d18:	781b      	ldrb	r3, [r3, #0]
   19d1a:	2b08      	cmp	r3, #8
   19d1c:	d904      	bls.n	19d28 <prvTraceSetPriorityProperty+0x30>
   19d1e:	4b1a      	ldr	r3, [pc, #104]	; (19d88 <prvTraceSetPriorityProperty+0x90>)
   19d20:	0018      	movs	r0, r3
   19d22:	4b1a      	ldr	r3, [pc, #104]	; (19d8c <prvTraceSetPriorityProperty+0x94>)
   19d24:	4798      	blx	r3
   19d26:	e02c      	b.n	19d82 <prvTraceSetPriorityProperty+0x8a>
   19d28:	4b19      	ldr	r3, [pc, #100]	; (19d90 <prvTraceSetPriorityProperty+0x98>)
   19d2a:	681a      	ldr	r2, [r3, #0]
   19d2c:	1dfb      	adds	r3, r7, #7
   19d2e:	781b      	ldrb	r3, [r3, #0]
   19d30:	2164      	movs	r1, #100	; 0x64
   19d32:	18d3      	adds	r3, r2, r3
   19d34:	185b      	adds	r3, r3, r1
   19d36:	781b      	ldrb	r3, [r3, #0]
   19d38:	1dba      	adds	r2, r7, #6
   19d3a:	7812      	ldrb	r2, [r2, #0]
   19d3c:	429a      	cmp	r2, r3
   19d3e:	d904      	bls.n	19d4a <prvTraceSetPriorityProperty+0x52>
   19d40:	4b14      	ldr	r3, [pc, #80]	; (19d94 <prvTraceSetPriorityProperty+0x9c>)
   19d42:	0018      	movs	r0, r3
   19d44:	4b11      	ldr	r3, [pc, #68]	; (19d8c <prvTraceSetPriorityProperty+0x94>)
   19d46:	4798      	blx	r3
   19d48:	e01b      	b.n	19d82 <prvTraceSetPriorityProperty+0x8a>
   19d4a:	4b11      	ldr	r3, [pc, #68]	; (19d90 <prvTraceSetPriorityProperty+0x98>)
   19d4c:	681c      	ldr	r4, [r3, #0]
   19d4e:	1dfb      	adds	r3, r7, #7
   19d50:	781a      	ldrb	r2, [r3, #0]
   19d52:	1dbb      	adds	r3, r7, #6
   19d54:	781b      	ldrb	r3, [r3, #0]
   19d56:	0011      	movs	r1, r2
   19d58:	0018      	movs	r0, r3
   19d5a:	4b0f      	ldr	r3, [pc, #60]	; (19d98 <prvTraceSetPriorityProperty+0xa0>)
   19d5c:	4798      	blx	r3
   19d5e:	0003      	movs	r3, r0
   19d60:	0018      	movs	r0, r3
   19d62:	4b0b      	ldr	r3, [pc, #44]	; (19d90 <prvTraceSetPriorityProperty+0x98>)
   19d64:	681a      	ldr	r2, [r3, #0]
   19d66:	1dfb      	adds	r3, r7, #7
   19d68:	781b      	ldrb	r3, [r3, #0]
   19d6a:	2170      	movs	r1, #112	; 0x70
   19d6c:	18d3      	adds	r3, r2, r3
   19d6e:	185b      	adds	r3, r3, r1
   19d70:	781b      	ldrb	r3, [r3, #0]
   19d72:	18c3      	adds	r3, r0, r3
   19d74:	3301      	adds	r3, #1
   19d76:	229c      	movs	r2, #156	; 0x9c
   19d78:	18e3      	adds	r3, r4, r3
   19d7a:	189b      	adds	r3, r3, r2
   19d7c:	1d7a      	adds	r2, r7, #5
   19d7e:	7812      	ldrb	r2, [r2, #0]
   19d80:	701a      	strb	r2, [r3, #0]
   19d82:	46bd      	mov	sp, r7
   19d84:	b003      	add	sp, #12
   19d86:	bd90      	pop	{r4, r7, pc}
   19d88:	0003883c 	.word	0x0003883c
   19d8c:	0001a681 	.word	0x0001a681
   19d90:	20000e18 	.word	0x20000e18
   19d94:	00038888 	.word	0x00038888
   19d98:	0001a28d 	.word	0x0001a28d

00019d9c <prvTraceGetPriorityProperty>:
   19d9c:	b590      	push	{r4, r7, lr}
   19d9e:	b083      	sub	sp, #12
   19da0:	af00      	add	r7, sp, #0
   19da2:	0002      	movs	r2, r0
   19da4:	1dfb      	adds	r3, r7, #7
   19da6:	701a      	strb	r2, [r3, #0]
   19da8:	1dbb      	adds	r3, r7, #6
   19daa:	1c0a      	adds	r2, r1, #0
   19dac:	701a      	strb	r2, [r3, #0]
   19dae:	1dfb      	adds	r3, r7, #7
   19db0:	781b      	ldrb	r3, [r3, #0]
   19db2:	2b08      	cmp	r3, #8
   19db4:	d905      	bls.n	19dc2 <prvTraceGetPriorityProperty+0x26>
   19db6:	4b1b      	ldr	r3, [pc, #108]	; (19e24 <prvTraceGetPriorityProperty+0x88>)
   19db8:	0018      	movs	r0, r3
   19dba:	4b1b      	ldr	r3, [pc, #108]	; (19e28 <prvTraceGetPriorityProperty+0x8c>)
   19dbc:	4798      	blx	r3
   19dbe:	2300      	movs	r3, #0
   19dc0:	e02b      	b.n	19e1a <prvTraceGetPriorityProperty+0x7e>
   19dc2:	4b1a      	ldr	r3, [pc, #104]	; (19e2c <prvTraceGetPriorityProperty+0x90>)
   19dc4:	681a      	ldr	r2, [r3, #0]
   19dc6:	1dfb      	adds	r3, r7, #7
   19dc8:	781b      	ldrb	r3, [r3, #0]
   19dca:	2164      	movs	r1, #100	; 0x64
   19dcc:	18d3      	adds	r3, r2, r3
   19dce:	185b      	adds	r3, r3, r1
   19dd0:	781b      	ldrb	r3, [r3, #0]
   19dd2:	1dba      	adds	r2, r7, #6
   19dd4:	7812      	ldrb	r2, [r2, #0]
   19dd6:	429a      	cmp	r2, r3
   19dd8:	d905      	bls.n	19de6 <prvTraceGetPriorityProperty+0x4a>
   19dda:	4b15      	ldr	r3, [pc, #84]	; (19e30 <prvTraceGetPriorityProperty+0x94>)
   19ddc:	0018      	movs	r0, r3
   19dde:	4b12      	ldr	r3, [pc, #72]	; (19e28 <prvTraceGetPriorityProperty+0x8c>)
   19de0:	4798      	blx	r3
   19de2:	2300      	movs	r3, #0
   19de4:	e019      	b.n	19e1a <prvTraceGetPriorityProperty+0x7e>
   19de6:	4b11      	ldr	r3, [pc, #68]	; (19e2c <prvTraceGetPriorityProperty+0x90>)
   19de8:	681c      	ldr	r4, [r3, #0]
   19dea:	1dfb      	adds	r3, r7, #7
   19dec:	781a      	ldrb	r2, [r3, #0]
   19dee:	1dbb      	adds	r3, r7, #6
   19df0:	781b      	ldrb	r3, [r3, #0]
   19df2:	0011      	movs	r1, r2
   19df4:	0018      	movs	r0, r3
   19df6:	4b0f      	ldr	r3, [pc, #60]	; (19e34 <prvTraceGetPriorityProperty+0x98>)
   19df8:	4798      	blx	r3
   19dfa:	0003      	movs	r3, r0
   19dfc:	0018      	movs	r0, r3
   19dfe:	4b0b      	ldr	r3, [pc, #44]	; (19e2c <prvTraceGetPriorityProperty+0x90>)
   19e00:	681a      	ldr	r2, [r3, #0]
   19e02:	1dfb      	adds	r3, r7, #7
   19e04:	781b      	ldrb	r3, [r3, #0]
   19e06:	2170      	movs	r1, #112	; 0x70
   19e08:	18d3      	adds	r3, r2, r3
   19e0a:	185b      	adds	r3, r3, r1
   19e0c:	781b      	ldrb	r3, [r3, #0]
   19e0e:	18c3      	adds	r3, r0, r3
   19e10:	3301      	adds	r3, #1
   19e12:	229c      	movs	r2, #156	; 0x9c
   19e14:	18e3      	adds	r3, r4, r3
   19e16:	189b      	adds	r3, r3, r2
   19e18:	781b      	ldrb	r3, [r3, #0]
   19e1a:	0018      	movs	r0, r3
   19e1c:	46bd      	mov	sp, r7
   19e1e:	b003      	add	sp, #12
   19e20:	bd90      	pop	{r4, r7, pc}
   19e22:	46c0      	nop			; (mov r8, r8)
   19e24:	000388c8 	.word	0x000388c8
   19e28:	0001a681 	.word	0x0001a681
   19e2c:	20000e18 	.word	0x20000e18
   19e30:	00038914 	.word	0x00038914
   19e34:	0001a28d 	.word	0x0001a28d

00019e38 <prvTraceSetObjectState>:
   19e38:	b590      	push	{r4, r7, lr}
   19e3a:	b083      	sub	sp, #12
   19e3c:	af00      	add	r7, sp, #0
   19e3e:	0004      	movs	r4, r0
   19e40:	0008      	movs	r0, r1
   19e42:	0011      	movs	r1, r2
   19e44:	1dfb      	adds	r3, r7, #7
   19e46:	1c22      	adds	r2, r4, #0
   19e48:	701a      	strb	r2, [r3, #0]
   19e4a:	1dbb      	adds	r3, r7, #6
   19e4c:	1c02      	adds	r2, r0, #0
   19e4e:	701a      	strb	r2, [r3, #0]
   19e50:	1d7b      	adds	r3, r7, #5
   19e52:	1c0a      	adds	r2, r1, #0
   19e54:	701a      	strb	r2, [r3, #0]
   19e56:	1dfb      	adds	r3, r7, #7
   19e58:	781b      	ldrb	r3, [r3, #0]
   19e5a:	2b08      	cmp	r3, #8
   19e5c:	d904      	bls.n	19e68 <prvTraceSetObjectState+0x30>
   19e5e:	4b1a      	ldr	r3, [pc, #104]	; (19ec8 <prvTraceSetObjectState+0x90>)
   19e60:	0018      	movs	r0, r3
   19e62:	4b1a      	ldr	r3, [pc, #104]	; (19ecc <prvTraceSetObjectState+0x94>)
   19e64:	4798      	blx	r3
   19e66:	e02b      	b.n	19ec0 <prvTraceSetObjectState+0x88>
   19e68:	4b19      	ldr	r3, [pc, #100]	; (19ed0 <prvTraceSetObjectState+0x98>)
   19e6a:	681a      	ldr	r2, [r3, #0]
   19e6c:	1dfb      	adds	r3, r7, #7
   19e6e:	781b      	ldrb	r3, [r3, #0]
   19e70:	2164      	movs	r1, #100	; 0x64
   19e72:	18d3      	adds	r3, r2, r3
   19e74:	185b      	adds	r3, r3, r1
   19e76:	781b      	ldrb	r3, [r3, #0]
   19e78:	1dba      	adds	r2, r7, #6
   19e7a:	7812      	ldrb	r2, [r2, #0]
   19e7c:	429a      	cmp	r2, r3
   19e7e:	d904      	bls.n	19e8a <prvTraceSetObjectState+0x52>
   19e80:	4b14      	ldr	r3, [pc, #80]	; (19ed4 <prvTraceSetObjectState+0x9c>)
   19e82:	0018      	movs	r0, r3
   19e84:	4b11      	ldr	r3, [pc, #68]	; (19ecc <prvTraceSetObjectState+0x94>)
   19e86:	4798      	blx	r3
   19e88:	e01a      	b.n	19ec0 <prvTraceSetObjectState+0x88>
   19e8a:	4b11      	ldr	r3, [pc, #68]	; (19ed0 <prvTraceSetObjectState+0x98>)
   19e8c:	681c      	ldr	r4, [r3, #0]
   19e8e:	1dfb      	adds	r3, r7, #7
   19e90:	781a      	ldrb	r2, [r3, #0]
   19e92:	1dbb      	adds	r3, r7, #6
   19e94:	781b      	ldrb	r3, [r3, #0]
   19e96:	0011      	movs	r1, r2
   19e98:	0018      	movs	r0, r3
   19e9a:	4b0f      	ldr	r3, [pc, #60]	; (19ed8 <prvTraceSetObjectState+0xa0>)
   19e9c:	4798      	blx	r3
   19e9e:	0003      	movs	r3, r0
   19ea0:	0018      	movs	r0, r3
   19ea2:	4b0b      	ldr	r3, [pc, #44]	; (19ed0 <prvTraceSetObjectState+0x98>)
   19ea4:	681a      	ldr	r2, [r3, #0]
   19ea6:	1dfb      	adds	r3, r7, #7
   19ea8:	781b      	ldrb	r3, [r3, #0]
   19eaa:	2170      	movs	r1, #112	; 0x70
   19eac:	18d3      	adds	r3, r2, r3
   19eae:	185b      	adds	r3, r3, r1
   19eb0:	781b      	ldrb	r3, [r3, #0]
   19eb2:	18c3      	adds	r3, r0, r3
   19eb4:	229c      	movs	r2, #156	; 0x9c
   19eb6:	18e3      	adds	r3, r4, r3
   19eb8:	189b      	adds	r3, r3, r2
   19eba:	1d7a      	adds	r2, r7, #5
   19ebc:	7812      	ldrb	r2, [r2, #0]
   19ebe:	701a      	strb	r2, [r3, #0]
   19ec0:	46bd      	mov	sp, r7
   19ec2:	b003      	add	sp, #12
   19ec4:	bd90      	pop	{r4, r7, pc}
   19ec6:	46c0      	nop			; (mov r8, r8)
   19ec8:	00038954 	.word	0x00038954
   19ecc:	0001a681 	.word	0x0001a681
   19ed0:	20000e18 	.word	0x20000e18
   19ed4:	00038998 	.word	0x00038998
   19ed8:	0001a28d 	.word	0x0001a28d

00019edc <prvTraceGetObjectState>:
   19edc:	b590      	push	{r4, r7, lr}
   19ede:	b083      	sub	sp, #12
   19ee0:	af00      	add	r7, sp, #0
   19ee2:	0002      	movs	r2, r0
   19ee4:	1dfb      	adds	r3, r7, #7
   19ee6:	701a      	strb	r2, [r3, #0]
   19ee8:	1dbb      	adds	r3, r7, #6
   19eea:	1c0a      	adds	r2, r1, #0
   19eec:	701a      	strb	r2, [r3, #0]
   19eee:	1dfb      	adds	r3, r7, #7
   19ef0:	781b      	ldrb	r3, [r3, #0]
   19ef2:	2b08      	cmp	r3, #8
   19ef4:	d905      	bls.n	19f02 <prvTraceGetObjectState+0x26>
   19ef6:	4b1a      	ldr	r3, [pc, #104]	; (19f60 <prvTraceGetObjectState+0x84>)
   19ef8:	0018      	movs	r0, r3
   19efa:	4b1a      	ldr	r3, [pc, #104]	; (19f64 <prvTraceGetObjectState+0x88>)
   19efc:	4798      	blx	r3
   19efe:	2300      	movs	r3, #0
   19f00:	e02a      	b.n	19f58 <prvTraceGetObjectState+0x7c>
   19f02:	4b19      	ldr	r3, [pc, #100]	; (19f68 <prvTraceGetObjectState+0x8c>)
   19f04:	681a      	ldr	r2, [r3, #0]
   19f06:	1dfb      	adds	r3, r7, #7
   19f08:	781b      	ldrb	r3, [r3, #0]
   19f0a:	2164      	movs	r1, #100	; 0x64
   19f0c:	18d3      	adds	r3, r2, r3
   19f0e:	185b      	adds	r3, r3, r1
   19f10:	781b      	ldrb	r3, [r3, #0]
   19f12:	1dba      	adds	r2, r7, #6
   19f14:	7812      	ldrb	r2, [r2, #0]
   19f16:	429a      	cmp	r2, r3
   19f18:	d905      	bls.n	19f26 <prvTraceGetObjectState+0x4a>
   19f1a:	4b14      	ldr	r3, [pc, #80]	; (19f6c <prvTraceGetObjectState+0x90>)
   19f1c:	0018      	movs	r0, r3
   19f1e:	4b11      	ldr	r3, [pc, #68]	; (19f64 <prvTraceGetObjectState+0x88>)
   19f20:	4798      	blx	r3
   19f22:	2300      	movs	r3, #0
   19f24:	e018      	b.n	19f58 <prvTraceGetObjectState+0x7c>
   19f26:	4b10      	ldr	r3, [pc, #64]	; (19f68 <prvTraceGetObjectState+0x8c>)
   19f28:	681c      	ldr	r4, [r3, #0]
   19f2a:	1dfb      	adds	r3, r7, #7
   19f2c:	781a      	ldrb	r2, [r3, #0]
   19f2e:	1dbb      	adds	r3, r7, #6
   19f30:	781b      	ldrb	r3, [r3, #0]
   19f32:	0011      	movs	r1, r2
   19f34:	0018      	movs	r0, r3
   19f36:	4b0e      	ldr	r3, [pc, #56]	; (19f70 <prvTraceGetObjectState+0x94>)
   19f38:	4798      	blx	r3
   19f3a:	0003      	movs	r3, r0
   19f3c:	0018      	movs	r0, r3
   19f3e:	4b0a      	ldr	r3, [pc, #40]	; (19f68 <prvTraceGetObjectState+0x8c>)
   19f40:	681a      	ldr	r2, [r3, #0]
   19f42:	1dfb      	adds	r3, r7, #7
   19f44:	781b      	ldrb	r3, [r3, #0]
   19f46:	2170      	movs	r1, #112	; 0x70
   19f48:	18d3      	adds	r3, r2, r3
   19f4a:	185b      	adds	r3, r3, r1
   19f4c:	781b      	ldrb	r3, [r3, #0]
   19f4e:	18c3      	adds	r3, r0, r3
   19f50:	229c      	movs	r2, #156	; 0x9c
   19f52:	18e3      	adds	r3, r4, r3
   19f54:	189b      	adds	r3, r3, r2
   19f56:	781b      	ldrb	r3, [r3, #0]
   19f58:	0018      	movs	r0, r3
   19f5a:	46bd      	mov	sp, r7
   19f5c:	b003      	add	sp, #12
   19f5e:	bd90      	pop	{r4, r7, pc}
   19f60:	000389d4 	.word	0x000389d4
   19f64:	0001a681 	.word	0x0001a681
   19f68:	20000e18 	.word	0x20000e18
   19f6c:	00038a18 	.word	0x00038a18
   19f70:	0001a28d 	.word	0x0001a28d

00019f74 <prvTraceSetTaskInstanceFinished>:
   19f74:	b590      	push	{r4, r7, lr}
   19f76:	b083      	sub	sp, #12
   19f78:	af00      	add	r7, sp, #0
   19f7a:	0002      	movs	r2, r0
   19f7c:	1dfb      	adds	r3, r7, #7
   19f7e:	701a      	strb	r2, [r3, #0]
   19f80:	4b11      	ldr	r3, [pc, #68]	; (19fc8 <prvTraceSetTaskInstanceFinished+0x54>)
   19f82:	681b      	ldr	r3, [r3, #0]
   19f84:	2267      	movs	r2, #103	; 0x67
   19f86:	5c9b      	ldrb	r3, [r3, r2]
   19f88:	1dfa      	adds	r2, r7, #7
   19f8a:	7812      	ldrb	r2, [r2, #0]
   19f8c:	429a      	cmp	r2, r3
   19f8e:	d904      	bls.n	19f9a <prvTraceSetTaskInstanceFinished+0x26>
   19f90:	4b0e      	ldr	r3, [pc, #56]	; (19fcc <prvTraceSetTaskInstanceFinished+0x58>)
   19f92:	0018      	movs	r0, r3
   19f94:	4b0e      	ldr	r3, [pc, #56]	; (19fd0 <prvTraceSetTaskInstanceFinished+0x5c>)
   19f96:	4798      	blx	r3
   19f98:	e013      	b.n	19fc2 <prvTraceSetTaskInstanceFinished+0x4e>
   19f9a:	4b0b      	ldr	r3, [pc, #44]	; (19fc8 <prvTraceSetTaskInstanceFinished+0x54>)
   19f9c:	681c      	ldr	r4, [r3, #0]
   19f9e:	1dfb      	adds	r3, r7, #7
   19fa0:	781b      	ldrb	r3, [r3, #0]
   19fa2:	2103      	movs	r1, #3
   19fa4:	0018      	movs	r0, r3
   19fa6:	4b0b      	ldr	r3, [pc, #44]	; (19fd4 <prvTraceSetTaskInstanceFinished+0x60>)
   19fa8:	4798      	blx	r3
   19faa:	0003      	movs	r3, r0
   19fac:	0019      	movs	r1, r3
   19fae:	4b06      	ldr	r3, [pc, #24]	; (19fc8 <prvTraceSetTaskInstanceFinished+0x54>)
   19fb0:	681b      	ldr	r3, [r3, #0]
   19fb2:	2273      	movs	r2, #115	; 0x73
   19fb4:	5c9b      	ldrb	r3, [r3, r2]
   19fb6:	18cb      	adds	r3, r1, r3
   19fb8:	229c      	movs	r2, #156	; 0x9c
   19fba:	18e3      	adds	r3, r4, r3
   19fbc:	189b      	adds	r3, r3, r2
   19fbe:	2200      	movs	r2, #0
   19fc0:	701a      	strb	r2, [r3, #0]
   19fc2:	46bd      	mov	sp, r7
   19fc4:	b003      	add	sp, #12
   19fc6:	bd90      	pop	{r4, r7, pc}
   19fc8:	20000e18 	.word	0x20000e18
   19fcc:	00038a54 	.word	0x00038a54
   19fd0:	0001a681 	.word	0x0001a681
   19fd4:	0001a28d 	.word	0x0001a28d

00019fd8 <prvTraceInitTraceData>:
   19fd8:	b580      	push	{r7, lr}
   19fda:	af00      	add	r7, sp, #0
   19fdc:	4b75      	ldr	r3, [pc, #468]	; (1a1b4 <prvTraceInitTraceData+0x1dc>)
   19fde:	681b      	ldr	r3, [r3, #0]
   19fe0:	2b00      	cmp	r3, #0
   19fe2:	d103      	bne.n	19fec <prvTraceInitTraceData+0x14>
   19fe4:	4b73      	ldr	r3, [pc, #460]	; (1a1b4 <prvTraceInitTraceData+0x1dc>)
   19fe6:	4a74      	ldr	r2, [pc, #464]	; (1a1b8 <prvTraceInitTraceData+0x1e0>)
   19fe8:	601a      	str	r2, [r3, #0]
   19fea:	e006      	b.n	19ffa <prvTraceInitTraceData+0x22>
   19fec:	4b71      	ldr	r3, [pc, #452]	; (1a1b4 <prvTraceInitTraceData+0x1dc>)
   19fee:	681b      	ldr	r3, [r3, #0]
   19ff0:	781b      	ldrb	r3, [r3, #0]
   19ff2:	b2db      	uxtb	r3, r3
   19ff4:	2b01      	cmp	r3, #1
   19ff6:	d100      	bne.n	19ffa <prvTraceInitTraceData+0x22>
   19ff8:	e0d8      	b.n	1a1ac <prvTraceInitTraceData+0x1d4>
   19ffa:	4b70      	ldr	r3, [pc, #448]	; (1a1bc <prvTraceInitTraceData+0x1e4>)
   19ffc:	681a      	ldr	r2, [r3, #0]
   19ffe:	4b70      	ldr	r3, [pc, #448]	; (1a1c0 <prvTraceInitTraceData+0x1e8>)
   1a000:	601a      	str	r2, [r3, #0]
   1a002:	4b6c      	ldr	r3, [pc, #432]	; (1a1b4 <prvTraceInitTraceData+0x1dc>)
   1a004:	6818      	ldr	r0, [r3, #0]
   1a006:	23bd      	movs	r3, #189	; 0xbd
   1a008:	011b      	lsls	r3, r3, #4
   1a00a:	001a      	movs	r2, r3
   1a00c:	2100      	movs	r1, #0
   1a00e:	4b6d      	ldr	r3, [pc, #436]	; (1a1c4 <prvTraceInitTraceData+0x1ec>)
   1a010:	4798      	blx	r3
   1a012:	4b68      	ldr	r3, [pc, #416]	; (1a1b4 <prvTraceInitTraceData+0x1dc>)
   1a014:	681b      	ldr	r3, [r3, #0]
   1a016:	4a6c      	ldr	r2, [pc, #432]	; (1a1c8 <prvTraceInitTraceData+0x1f0>)
   1a018:	819a      	strh	r2, [r3, #12]
   1a01a:	4b66      	ldr	r3, [pc, #408]	; (1a1b4 <prvTraceInitTraceData+0x1dc>)
   1a01c:	681b      	ldr	r3, [r3, #0]
   1a01e:	2205      	movs	r2, #5
   1a020:	739a      	strb	r2, [r3, #14]
   1a022:	4b64      	ldr	r3, [pc, #400]	; (1a1b4 <prvTraceInitTraceData+0x1dc>)
   1a024:	681b      	ldr	r3, [r3, #0]
   1a026:	2200      	movs	r2, #0
   1a028:	73da      	strb	r2, [r3, #15]
   1a02a:	4b62      	ldr	r3, [pc, #392]	; (1a1b4 <prvTraceInitTraceData+0x1dc>)
   1a02c:	681b      	ldr	r3, [r3, #0]
   1a02e:	22bd      	movs	r2, #189	; 0xbd
   1a030:	0112      	lsls	r2, r2, #4
   1a032:	611a      	str	r2, [r3, #16]
   1a034:	4b5f      	ldr	r3, [pc, #380]	; (1a1b4 <prvTraceInitTraceData+0x1dc>)
   1a036:	681b      	ldr	r3, [r3, #0]
   1a038:	2296      	movs	r2, #150	; 0x96
   1a03a:	0052      	lsls	r2, r2, #1
   1a03c:	619a      	str	r2, [r3, #24]
   1a03e:	4b5d      	ldr	r3, [pc, #372]	; (1a1b4 <prvTraceInitTraceData+0x1dc>)
   1a040:	681b      	ldr	r3, [r3, #0]
   1a042:	4a62      	ldr	r2, [pc, #392]	; (1a1cc <prvTraceInitTraceData+0x1f4>)
   1a044:	655a      	str	r2, [r3, #84]	; 0x54
   1a046:	4b5b      	ldr	r3, [pc, #364]	; (1a1b4 <prvTraceInitTraceData+0x1dc>)
   1a048:	681b      	ldr	r3, [r3, #0]
   1a04a:	2200      	movs	r2, #0
   1a04c:	659a      	str	r2, [r3, #88]	; 0x58
   1a04e:	4b59      	ldr	r3, [pc, #356]	; (1a1b4 <prvTraceInitTraceData+0x1dc>)
   1a050:	681b      	ldr	r3, [r3, #0]
   1a052:	2200      	movs	r2, #0
   1a054:	635a      	str	r2, [r3, #52]	; 0x34
   1a056:	4b5e      	ldr	r3, [pc, #376]	; (1a1d0 <prvTraceInitTraceData+0x1f8>)
   1a058:	4798      	blx	r3
   1a05a:	4b56      	ldr	r3, [pc, #344]	; (1a1b4 <prvTraceInitTraceData+0x1dc>)
   1a05c:	681b      	ldr	r3, [r3, #0]
   1a05e:	4a5d      	ldr	r2, [pc, #372]	; (1a1d4 <prvTraceInitTraceData+0x1fc>)
   1a060:	495d      	ldr	r1, [pc, #372]	; (1a1d8 <prvTraceInitTraceData+0x200>)
   1a062:	5099      	str	r1, [r3, r2]
   1a064:	4b53      	ldr	r3, [pc, #332]	; (1a1b4 <prvTraceInitTraceData+0x1dc>)
   1a066:	681a      	ldr	r2, [r3, #0]
   1a068:	23ac      	movs	r3, #172	; 0xac
   1a06a:	00db      	lsls	r3, r3, #3
   1a06c:	21c8      	movs	r1, #200	; 0xc8
   1a06e:	50d1      	str	r1, [r2, r3]
   1a070:	4b50      	ldr	r3, [pc, #320]	; (1a1b4 <prvTraceInitTraceData+0x1dc>)
   1a072:	681b      	ldr	r3, [r3, #0]
   1a074:	4a59      	ldr	r2, [pc, #356]	; (1a1dc <prvTraceInitTraceData+0x204>)
   1a076:	2101      	movs	r1, #1
   1a078:	5099      	str	r1, [r3, r2]
   1a07a:	4b4e      	ldr	r3, [pc, #312]	; (1a1b4 <prvTraceInitTraceData+0x1dc>)
   1a07c:	681a      	ldr	r2, [r3, #0]
   1a07e:	23d7      	movs	r3, #215	; 0xd7
   1a080:	00db      	lsls	r3, r3, #3
   1a082:	4957      	ldr	r1, [pc, #348]	; (1a1e0 <prvTraceInitTraceData+0x208>)
   1a084:	50d1      	str	r1, [r2, r3]
   1a086:	4b4b      	ldr	r3, [pc, #300]	; (1a1b4 <prvTraceInitTraceData+0x1dc>)
   1a088:	681b      	ldr	r3, [r3, #0]
   1a08a:	4a56      	ldr	r2, [pc, #344]	; (1a1e4 <prvTraceInitTraceData+0x20c>)
   1a08c:	4694      	mov	ip, r2
   1a08e:	4463      	add	r3, ip
   1a090:	4955      	ldr	r1, [pc, #340]	; (1a1e8 <prvTraceInitTraceData+0x210>)
   1a092:	2250      	movs	r2, #80	; 0x50
   1a094:	0018      	movs	r0, r3
   1a096:	4b55      	ldr	r3, [pc, #340]	; (1a1ec <prvTraceInitTraceData+0x214>)
   1a098:	4798      	blx	r3
   1a09a:	4b46      	ldr	r3, [pc, #280]	; (1a1b4 <prvTraceInitTraceData+0x1dc>)
   1a09c:	681b      	ldr	r3, [r3, #0]
   1a09e:	4a54      	ldr	r2, [pc, #336]	; (1a1f0 <prvTraceInitTraceData+0x218>)
   1a0a0:	4954      	ldr	r1, [pc, #336]	; (1a1f4 <prvTraceInitTraceData+0x21c>)
   1a0a2:	5099      	str	r1, [r3, r2]
   1a0a4:	4b43      	ldr	r3, [pc, #268]	; (1a1b4 <prvTraceInitTraceData+0x1dc>)
   1a0a6:	681b      	ldr	r3, [r3, #0]
   1a0a8:	4a53      	ldr	r2, [pc, #332]	; (1a1f8 <prvTraceInitTraceData+0x220>)
   1a0aa:	210a      	movs	r1, #10
   1a0ac:	5499      	strb	r1, [r3, r2]
   1a0ae:	4b41      	ldr	r3, [pc, #260]	; (1a1b4 <prvTraceInitTraceData+0x1dc>)
   1a0b0:	681b      	ldr	r3, [r3, #0]
   1a0b2:	4a52      	ldr	r2, [pc, #328]	; (1a1fc <prvTraceInitTraceData+0x224>)
   1a0b4:	210b      	movs	r1, #11
   1a0b6:	5499      	strb	r1, [r3, r2]
   1a0b8:	4b3e      	ldr	r3, [pc, #248]	; (1a1b4 <prvTraceInitTraceData+0x1dc>)
   1a0ba:	681b      	ldr	r3, [r3, #0]
   1a0bc:	4a50      	ldr	r2, [pc, #320]	; (1a200 <prvTraceInitTraceData+0x228>)
   1a0be:	210c      	movs	r1, #12
   1a0c0:	5499      	strb	r1, [r3, r2]
   1a0c2:	4b3c      	ldr	r3, [pc, #240]	; (1a1b4 <prvTraceInitTraceData+0x1dc>)
   1a0c4:	681b      	ldr	r3, [r3, #0]
   1a0c6:	4a4f      	ldr	r2, [pc, #316]	; (1a204 <prvTraceInitTraceData+0x22c>)
   1a0c8:	210d      	movs	r1, #13
   1a0ca:	5499      	strb	r1, [r3, r2]
   1a0cc:	4b39      	ldr	r3, [pc, #228]	; (1a1b4 <prvTraceInitTraceData+0x1dc>)
   1a0ce:	681b      	ldr	r3, [r3, #0]
   1a0d0:	4a4d      	ldr	r2, [pc, #308]	; (1a208 <prvTraceInitTraceData+0x230>)
   1a0d2:	2171      	movs	r1, #113	; 0x71
   1a0d4:	5499      	strb	r1, [r3, r2]
   1a0d6:	4b37      	ldr	r3, [pc, #220]	; (1a1b4 <prvTraceInitTraceData+0x1dc>)
   1a0d8:	681b      	ldr	r3, [r3, #0]
   1a0da:	4a4c      	ldr	r2, [pc, #304]	; (1a20c <prvTraceInitTraceData+0x234>)
   1a0dc:	2172      	movs	r1, #114	; 0x72
   1a0de:	5499      	strb	r1, [r3, r2]
   1a0e0:	4b34      	ldr	r3, [pc, #208]	; (1a1b4 <prvTraceInitTraceData+0x1dc>)
   1a0e2:	681b      	ldr	r3, [r3, #0]
   1a0e4:	4a4a      	ldr	r2, [pc, #296]	; (1a210 <prvTraceInitTraceData+0x238>)
   1a0e6:	2173      	movs	r1, #115	; 0x73
   1a0e8:	5499      	strb	r1, [r3, r2]
   1a0ea:	4b32      	ldr	r3, [pc, #200]	; (1a1b4 <prvTraceInitTraceData+0x1dc>)
   1a0ec:	681b      	ldr	r3, [r3, #0]
   1a0ee:	4a49      	ldr	r2, [pc, #292]	; (1a214 <prvTraceInitTraceData+0x23c>)
   1a0f0:	2174      	movs	r1, #116	; 0x74
   1a0f2:	5499      	strb	r1, [r3, r2]
   1a0f4:	4b2f      	ldr	r3, [pc, #188]	; (1a1b4 <prvTraceInitTraceData+0x1dc>)
   1a0f6:	681b      	ldr	r3, [r3, #0]
   1a0f8:	4a47      	ldr	r2, [pc, #284]	; (1a218 <prvTraceInitTraceData+0x240>)
   1a0fa:	21f1      	movs	r1, #241	; 0xf1
   1a0fc:	5499      	strb	r1, [r3, r2]
   1a0fe:	4b2d      	ldr	r3, [pc, #180]	; (1a1b4 <prvTraceInitTraceData+0x1dc>)
   1a100:	681b      	ldr	r3, [r3, #0]
   1a102:	4a46      	ldr	r2, [pc, #280]	; (1a21c <prvTraceInitTraceData+0x244>)
   1a104:	21f2      	movs	r1, #242	; 0xf2
   1a106:	5499      	strb	r1, [r3, r2]
   1a108:	4b2a      	ldr	r3, [pc, #168]	; (1a1b4 <prvTraceInitTraceData+0x1dc>)
   1a10a:	681b      	ldr	r3, [r3, #0]
   1a10c:	4a44      	ldr	r2, [pc, #272]	; (1a220 <prvTraceInitTraceData+0x248>)
   1a10e:	21f3      	movs	r1, #243	; 0xf3
   1a110:	5499      	strb	r1, [r3, r2]
   1a112:	4b28      	ldr	r3, [pc, #160]	; (1a1b4 <prvTraceInitTraceData+0x1dc>)
   1a114:	681b      	ldr	r3, [r3, #0]
   1a116:	4a43      	ldr	r2, [pc, #268]	; (1a224 <prvTraceInitTraceData+0x24c>)
   1a118:	21f4      	movs	r1, #244	; 0xf4
   1a11a:	5499      	strb	r1, [r3, r2]
   1a11c:	4b42      	ldr	r3, [pc, #264]	; (1a228 <prvTraceInitTraceData+0x250>)
   1a11e:	4798      	blx	r3
   1a120:	4b24      	ldr	r3, [pc, #144]	; (1a1b4 <prvTraceInitTraceData+0x1dc>)
   1a122:	681b      	ldr	r3, [r3, #0]
   1a124:	22f4      	movs	r2, #244	; 0xf4
   1a126:	72da      	strb	r2, [r3, #11]
   1a128:	4b22      	ldr	r3, [pc, #136]	; (1a1b4 <prvTraceInitTraceData+0x1dc>)
   1a12a:	681b      	ldr	r3, [r3, #0]
   1a12c:	22f3      	movs	r2, #243	; 0xf3
   1a12e:	729a      	strb	r2, [r3, #10]
   1a130:	4b20      	ldr	r3, [pc, #128]	; (1a1b4 <prvTraceInitTraceData+0x1dc>)
   1a132:	681b      	ldr	r3, [r3, #0]
   1a134:	22f2      	movs	r2, #242	; 0xf2
   1a136:	725a      	strb	r2, [r3, #9]
   1a138:	4b1e      	ldr	r3, [pc, #120]	; (1a1b4 <prvTraceInitTraceData+0x1dc>)
   1a13a:	681b      	ldr	r3, [r3, #0]
   1a13c:	22f1      	movs	r2, #241	; 0xf1
   1a13e:	721a      	strb	r2, [r3, #8]
   1a140:	4b1c      	ldr	r3, [pc, #112]	; (1a1b4 <prvTraceInitTraceData+0x1dc>)
   1a142:	681b      	ldr	r3, [r3, #0]
   1a144:	2274      	movs	r2, #116	; 0x74
   1a146:	71da      	strb	r2, [r3, #7]
   1a148:	4b1a      	ldr	r3, [pc, #104]	; (1a1b4 <prvTraceInitTraceData+0x1dc>)
   1a14a:	681b      	ldr	r3, [r3, #0]
   1a14c:	2273      	movs	r2, #115	; 0x73
   1a14e:	719a      	strb	r2, [r3, #6]
   1a150:	4b18      	ldr	r3, [pc, #96]	; (1a1b4 <prvTraceInitTraceData+0x1dc>)
   1a152:	681b      	ldr	r3, [r3, #0]
   1a154:	2272      	movs	r2, #114	; 0x72
   1a156:	715a      	strb	r2, [r3, #5]
   1a158:	4b16      	ldr	r3, [pc, #88]	; (1a1b4 <prvTraceInitTraceData+0x1dc>)
   1a15a:	681b      	ldr	r3, [r3, #0]
   1a15c:	2271      	movs	r2, #113	; 0x71
   1a15e:	711a      	strb	r2, [r3, #4]
   1a160:	4b14      	ldr	r3, [pc, #80]	; (1a1b4 <prvTraceInitTraceData+0x1dc>)
   1a162:	681b      	ldr	r3, [r3, #0]
   1a164:	2204      	movs	r2, #4
   1a166:	70da      	strb	r2, [r3, #3]
   1a168:	4b12      	ldr	r3, [pc, #72]	; (1a1b4 <prvTraceInitTraceData+0x1dc>)
   1a16a:	681b      	ldr	r3, [r3, #0]
   1a16c:	2203      	movs	r2, #3
   1a16e:	709a      	strb	r2, [r3, #2]
   1a170:	4b10      	ldr	r3, [pc, #64]	; (1a1b4 <prvTraceInitTraceData+0x1dc>)
   1a172:	681b      	ldr	r3, [r3, #0]
   1a174:	2202      	movs	r2, #2
   1a176:	705a      	strb	r2, [r3, #1]
   1a178:	4b0e      	ldr	r3, [pc, #56]	; (1a1b4 <prvTraceInitTraceData+0x1dc>)
   1a17a:	681b      	ldr	r3, [r3, #0]
   1a17c:	2201      	movs	r2, #1
   1a17e:	701a      	strb	r2, [r3, #0]
   1a180:	4b2a      	ldr	r3, [pc, #168]	; (1a22c <prvTraceInitTraceData+0x254>)
   1a182:	681b      	ldr	r3, [r3, #0]
   1a184:	2b00      	cmp	r3, #0
   1a186:	d012      	beq.n	1a1ae <prvTraceInitTraceData+0x1d6>
   1a188:	4b0a      	ldr	r3, [pc, #40]	; (1a1b4 <prvTraceInitTraceData+0x1dc>)
   1a18a:	681b      	ldr	r3, [r3, #0]
   1a18c:	4a15      	ldr	r2, [pc, #84]	; (1a1e4 <prvTraceInitTraceData+0x20c>)
   1a18e:	1898      	adds	r0, r3, r2
   1a190:	4b26      	ldr	r3, [pc, #152]	; (1a22c <prvTraceInitTraceData+0x254>)
   1a192:	681b      	ldr	r3, [r3, #0]
   1a194:	2250      	movs	r2, #80	; 0x50
   1a196:	0019      	movs	r1, r3
   1a198:	4b14      	ldr	r3, [pc, #80]	; (1a1ec <prvTraceInitTraceData+0x214>)
   1a19a:	4798      	blx	r3
   1a19c:	4b05      	ldr	r3, [pc, #20]	; (1a1b4 <prvTraceInitTraceData+0x1dc>)
   1a19e:	681b      	ldr	r3, [r3, #0]
   1a1a0:	4a23      	ldr	r2, [pc, #140]	; (1a230 <prvTraceInitTraceData+0x258>)
   1a1a2:	2101      	movs	r1, #1
   1a1a4:	5099      	str	r1, [r3, r2]
   1a1a6:	4b23      	ldr	r3, [pc, #140]	; (1a234 <prvTraceInitTraceData+0x25c>)
   1a1a8:	4798      	blx	r3
   1a1aa:	e000      	b.n	1a1ae <prvTraceInitTraceData+0x1d6>
   1a1ac:	46c0      	nop			; (mov r8, r8)
   1a1ae:	46bd      	mov	sp, r7
   1a1b0:	bd80      	pop	{r7, pc}
   1a1b2:	46c0      	nop			; (mov r8, r8)
   1a1b4:	20000e18 	.word	0x20000e18
   1a1b8:	2000463c 	.word	0x2000463c
   1a1bc:	e000e018 	.word	0xe000e018
   1a1c0:	2000520c 	.word	0x2000520c
   1a1c4:	00035707 	.word	0x00035707
   1a1c8:	00001aa1 	.word	0x00001aa1
   1a1cc:	f0f0f0f0 	.word	0xf0f0f0f0
   1a1d0:	0001913d 	.word	0x0001913d
   1a1d4:	0000055c 	.word	0x0000055c
   1a1d8:	f1f1f1f1 	.word	0xf1f1f1f1
   1a1dc:	00000564 	.word	0x00000564
   1a1e0:	f2f2f2f2 	.word	0xf2f2f2f2
   1a1e4:	000006bc 	.word	0x000006bc
   1a1e8:	00038a9c 	.word	0x00038a9c
   1a1ec:	0001a54d 	.word	0x0001a54d
   1a1f0:	0000070c 	.word	0x0000070c
   1a1f4:	f3f3f3f3 	.word	0xf3f3f3f3
   1a1f8:	00000bc4 	.word	0x00000bc4
   1a1fc:	00000bc5 	.word	0x00000bc5
   1a200:	00000bc6 	.word	0x00000bc6
   1a204:	00000bc7 	.word	0x00000bc7
   1a208:	00000bc8 	.word	0x00000bc8
   1a20c:	00000bc9 	.word	0x00000bc9
   1a210:	00000bca 	.word	0x00000bca
   1a214:	00000bcb 	.word	0x00000bcb
   1a218:	00000bcc 	.word	0x00000bcc
   1a21c:	00000bcd 	.word	0x00000bcd
   1a220:	00000bce 	.word	0x00000bce
   1a224:	00000bcf 	.word	0x00000bcf
   1a228:	000192dd 	.word	0x000192dd
   1a22c:	20000d78 	.word	0x20000d78
   1a230:	000006b4 	.word	0x000006b4
   1a234:	00019545 	.word	0x00019545

0001a238 <prvTraceNextFreeEventBufferSlot>:
   1a238:	b580      	push	{r7, lr}
   1a23a:	af00      	add	r7, sp, #0
   1a23c:	4b10      	ldr	r3, [pc, #64]	; (1a280 <prvTraceNextFreeEventBufferSlot+0x48>)
   1a23e:	681b      	ldr	r3, [r3, #0]
   1a240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1a242:	2b00      	cmp	r3, #0
   1a244:	d101      	bne.n	1a24a <prvTraceNextFreeEventBufferSlot+0x12>
   1a246:	2300      	movs	r3, #0
   1a248:	e017      	b.n	1a27a <prvTraceNextFreeEventBufferSlot+0x42>
   1a24a:	4b0d      	ldr	r3, [pc, #52]	; (1a280 <prvTraceNextFreeEventBufferSlot+0x48>)
   1a24c:	681b      	ldr	r3, [r3, #0]
   1a24e:	69da      	ldr	r2, [r3, #28]
   1a250:	232c      	movs	r3, #44	; 0x2c
   1a252:	33ff      	adds	r3, #255	; 0xff
   1a254:	429a      	cmp	r2, r3
   1a256:	d905      	bls.n	1a264 <prvTraceNextFreeEventBufferSlot+0x2c>
   1a258:	4b0a      	ldr	r3, [pc, #40]	; (1a284 <prvTraceNextFreeEventBufferSlot+0x4c>)
   1a25a:	0018      	movs	r0, r3
   1a25c:	4b0a      	ldr	r3, [pc, #40]	; (1a288 <prvTraceNextFreeEventBufferSlot+0x50>)
   1a25e:	4798      	blx	r3
   1a260:	2300      	movs	r3, #0
   1a262:	e00a      	b.n	1a27a <prvTraceNextFreeEventBufferSlot+0x42>
   1a264:	4b06      	ldr	r3, [pc, #24]	; (1a280 <prvTraceNextFreeEventBufferSlot+0x48>)
   1a266:	681a      	ldr	r2, [r3, #0]
   1a268:	4b05      	ldr	r3, [pc, #20]	; (1a280 <prvTraceNextFreeEventBufferSlot+0x48>)
   1a26a:	681b      	ldr	r3, [r3, #0]
   1a26c:	69db      	ldr	r3, [r3, #28]
   1a26e:	009b      	lsls	r3, r3, #2
   1a270:	21e2      	movs	r1, #226	; 0xe2
   1a272:	00c9      	lsls	r1, r1, #3
   1a274:	468c      	mov	ip, r1
   1a276:	4463      	add	r3, ip
   1a278:	18d3      	adds	r3, r2, r3
   1a27a:	0018      	movs	r0, r3
   1a27c:	46bd      	mov	sp, r7
   1a27e:	bd80      	pop	{r7, pc}
   1a280:	20000e18 	.word	0x20000e18
   1a284:	00038ab0 	.word	0x00038ab0
   1a288:	0001a681 	.word	0x0001a681

0001a28c <uiIndexOfObject>:
   1a28c:	b580      	push	{r7, lr}
   1a28e:	b082      	sub	sp, #8
   1a290:	af00      	add	r7, sp, #0
   1a292:	0002      	movs	r2, r0
   1a294:	1dfb      	adds	r3, r7, #7
   1a296:	701a      	strb	r2, [r3, #0]
   1a298:	1dbb      	adds	r3, r7, #6
   1a29a:	1c0a      	adds	r2, r1, #0
   1a29c:	701a      	strb	r2, [r3, #0]
   1a29e:	1dbb      	adds	r3, r7, #6
   1a2a0:	781b      	ldrb	r3, [r3, #0]
   1a2a2:	2b08      	cmp	r3, #8
   1a2a4:	d905      	bls.n	1a2b2 <uiIndexOfObject+0x26>
   1a2a6:	4b2a      	ldr	r3, [pc, #168]	; (1a350 <uiIndexOfObject+0xc4>)
   1a2a8:	0018      	movs	r0, r3
   1a2aa:	4b2a      	ldr	r3, [pc, #168]	; (1a354 <uiIndexOfObject+0xc8>)
   1a2ac:	4798      	blx	r3
   1a2ae:	2300      	movs	r3, #0
   1a2b0:	e049      	b.n	1a346 <uiIndexOfObject+0xba>
   1a2b2:	1dfb      	adds	r3, r7, #7
   1a2b4:	781b      	ldrb	r3, [r3, #0]
   1a2b6:	2b00      	cmp	r3, #0
   1a2b8:	d00b      	beq.n	1a2d2 <uiIndexOfObject+0x46>
   1a2ba:	4b27      	ldr	r3, [pc, #156]	; (1a358 <uiIndexOfObject+0xcc>)
   1a2bc:	681a      	ldr	r2, [r3, #0]
   1a2be:	1dbb      	adds	r3, r7, #6
   1a2c0:	781b      	ldrb	r3, [r3, #0]
   1a2c2:	2164      	movs	r1, #100	; 0x64
   1a2c4:	18d3      	adds	r3, r2, r3
   1a2c6:	185b      	adds	r3, r3, r1
   1a2c8:	781b      	ldrb	r3, [r3, #0]
   1a2ca:	1dfa      	adds	r2, r7, #7
   1a2cc:	7812      	ldrb	r2, [r2, #0]
   1a2ce:	429a      	cmp	r2, r3
   1a2d0:	d905      	bls.n	1a2de <uiIndexOfObject+0x52>
   1a2d2:	4b22      	ldr	r3, [pc, #136]	; (1a35c <uiIndexOfObject+0xd0>)
   1a2d4:	0018      	movs	r0, r3
   1a2d6:	4b1f      	ldr	r3, [pc, #124]	; (1a354 <uiIndexOfObject+0xc8>)
   1a2d8:	4798      	blx	r3
   1a2da:	2300      	movs	r3, #0
   1a2dc:	e033      	b.n	1a346 <uiIndexOfObject+0xba>
   1a2de:	1dbb      	adds	r3, r7, #6
   1a2e0:	781b      	ldrb	r3, [r3, #0]
   1a2e2:	2b08      	cmp	r3, #8
   1a2e4:	d82a      	bhi.n	1a33c <uiIndexOfObject+0xb0>
   1a2e6:	1dfb      	adds	r3, r7, #7
   1a2e8:	781b      	ldrb	r3, [r3, #0]
   1a2ea:	2b00      	cmp	r3, #0
   1a2ec:	d026      	beq.n	1a33c <uiIndexOfObject+0xb0>
   1a2ee:	4b1a      	ldr	r3, [pc, #104]	; (1a358 <uiIndexOfObject+0xcc>)
   1a2f0:	681a      	ldr	r2, [r3, #0]
   1a2f2:	1dbb      	adds	r3, r7, #6
   1a2f4:	781b      	ldrb	r3, [r3, #0]
   1a2f6:	2164      	movs	r1, #100	; 0x64
   1a2f8:	18d3      	adds	r3, r2, r3
   1a2fa:	185b      	adds	r3, r3, r1
   1a2fc:	781b      	ldrb	r3, [r3, #0]
   1a2fe:	1dfa      	adds	r2, r7, #7
   1a300:	7812      	ldrb	r2, [r2, #0]
   1a302:	429a      	cmp	r2, r3
   1a304:	d81a      	bhi.n	1a33c <uiIndexOfObject+0xb0>
   1a306:	4b14      	ldr	r3, [pc, #80]	; (1a358 <uiIndexOfObject+0xcc>)
   1a308:	681a      	ldr	r2, [r3, #0]
   1a30a:	1dbb      	adds	r3, r7, #6
   1a30c:	781b      	ldrb	r3, [r3, #0]
   1a30e:	3340      	adds	r3, #64	; 0x40
   1a310:	005b      	lsls	r3, r3, #1
   1a312:	18d3      	adds	r3, r2, r3
   1a314:	3308      	adds	r3, #8
   1a316:	881a      	ldrh	r2, [r3, #0]
   1a318:	4b0f      	ldr	r3, [pc, #60]	; (1a358 <uiIndexOfObject+0xcc>)
   1a31a:	6819      	ldr	r1, [r3, #0]
   1a31c:	1dbb      	adds	r3, r7, #6
   1a31e:	781b      	ldrb	r3, [r3, #0]
   1a320:	207c      	movs	r0, #124	; 0x7c
   1a322:	18cb      	adds	r3, r1, r3
   1a324:	181b      	adds	r3, r3, r0
   1a326:	781b      	ldrb	r3, [r3, #0]
   1a328:	b29b      	uxth	r3, r3
   1a32a:	1df9      	adds	r1, r7, #7
   1a32c:	7809      	ldrb	r1, [r1, #0]
   1a32e:	3901      	subs	r1, #1
   1a330:	b289      	uxth	r1, r1
   1a332:	434b      	muls	r3, r1
   1a334:	b29b      	uxth	r3, r3
   1a336:	18d3      	adds	r3, r2, r3
   1a338:	b29b      	uxth	r3, r3
   1a33a:	e004      	b.n	1a346 <uiIndexOfObject+0xba>
   1a33c:	4b08      	ldr	r3, [pc, #32]	; (1a360 <uiIndexOfObject+0xd4>)
   1a33e:	0018      	movs	r0, r3
   1a340:	4b04      	ldr	r3, [pc, #16]	; (1a354 <uiIndexOfObject+0xc8>)
   1a342:	4798      	blx	r3
   1a344:	2300      	movs	r3, #0
   1a346:	0018      	movs	r0, r3
   1a348:	46bd      	mov	sp, r7
   1a34a:	b002      	add	sp, #8
   1a34c:	bd80      	pop	{r7, pc}
   1a34e:	46c0      	nop			; (mov r8, r8)
   1a350:	00038ad8 	.word	0x00038ad8
   1a354:	0001a681 	.word	0x0001a681
   1a358:	20000e18 	.word	0x20000e18
   1a35c:	00038b18 	.word	0x00038b18
   1a360:	00038b58 	.word	0x00038b58

0001a364 <prvTraceGetObjectHandle>:
   1a364:	b580      	push	{r7, lr}
   1a366:	b088      	sub	sp, #32
   1a368:	af00      	add	r7, sp, #0
   1a36a:	0002      	movs	r2, r0
   1a36c:	1dfb      	adds	r3, r7, #7
   1a36e:	701a      	strb	r2, [r3, #0]
   1a370:	4b5a      	ldr	r3, [pc, #360]	; (1a4dc <prvTraceGetObjectHandle+0x178>)
   1a372:	681b      	ldr	r3, [r3, #0]
   1a374:	2b00      	cmp	r3, #0
   1a376:	d105      	bne.n	1a384 <prvTraceGetObjectHandle+0x20>
   1a378:	4b59      	ldr	r3, [pc, #356]	; (1a4e0 <prvTraceGetObjectHandle+0x17c>)
   1a37a:	0018      	movs	r0, r3
   1a37c:	4b59      	ldr	r3, [pc, #356]	; (1a4e4 <prvTraceGetObjectHandle+0x180>)
   1a37e:	4798      	blx	r3
   1a380:	2300      	movs	r3, #0
   1a382:	e0a7      	b.n	1a4d4 <prvTraceGetObjectHandle+0x170>
   1a384:	1dfb      	adds	r3, r7, #7
   1a386:	781b      	ldrb	r3, [r3, #0]
   1a388:	2b08      	cmp	r3, #8
   1a38a:	d905      	bls.n	1a398 <prvTraceGetObjectHandle+0x34>
   1a38c:	4b56      	ldr	r3, [pc, #344]	; (1a4e8 <prvTraceGetObjectHandle+0x184>)
   1a38e:	0018      	movs	r0, r3
   1a390:	4b54      	ldr	r3, [pc, #336]	; (1a4e4 <prvTraceGetObjectHandle+0x180>)
   1a392:	4798      	blx	r3
   1a394:	2300      	movs	r3, #0
   1a396:	e09d      	b.n	1a4d4 <prvTraceGetObjectHandle+0x170>
   1a398:	f3ef 8310 	mrs	r3, PRIMASK
   1a39c:	60fb      	str	r3, [r7, #12]
   1a39e:	68fb      	ldr	r3, [r7, #12]
   1a3a0:	61bb      	str	r3, [r7, #24]
   1a3a2:	2301      	movs	r3, #1
   1a3a4:	613b      	str	r3, [r7, #16]
   1a3a6:	693b      	ldr	r3, [r7, #16]
   1a3a8:	f383 8810 	msr	PRIMASK, r3
   1a3ac:	4b4f      	ldr	r3, [pc, #316]	; (1a4ec <prvTraceGetObjectHandle+0x188>)
   1a3ae:	681b      	ldr	r3, [r3, #0]
   1a3b0:	1c5a      	adds	r2, r3, #1
   1a3b2:	4b4e      	ldr	r3, [pc, #312]	; (1a4ec <prvTraceGetObjectHandle+0x188>)
   1a3b4:	601a      	str	r2, [r3, #0]
   1a3b6:	1dfb      	adds	r3, r7, #7
   1a3b8:	781a      	ldrb	r2, [r3, #0]
   1a3ba:	4b4d      	ldr	r3, [pc, #308]	; (1a4f0 <prvTraceGetObjectHandle+0x18c>)
   1a3bc:	0052      	lsls	r2, r2, #1
   1a3be:	5ad3      	ldrh	r3, [r2, r3]
   1a3c0:	001a      	movs	r2, r3
   1a3c2:	4b4c      	ldr	r3, [pc, #304]	; (1a4f4 <prvTraceGetObjectHandle+0x190>)
   1a3c4:	601a      	str	r2, [r3, #0]
   1a3c6:	4b4b      	ldr	r3, [pc, #300]	; (1a4f4 <prvTraceGetObjectHandle+0x190>)
   1a3c8:	681b      	ldr	r3, [r3, #0]
   1a3ca:	4a49      	ldr	r2, [pc, #292]	; (1a4f0 <prvTraceGetObjectHandle+0x18c>)
   1a3cc:	2148      	movs	r1, #72	; 0x48
   1a3ce:	18d3      	adds	r3, r2, r3
   1a3d0:	185b      	adds	r3, r3, r1
   1a3d2:	781b      	ldrb	r3, [r3, #0]
   1a3d4:	2b00      	cmp	r3, #0
   1a3d6:	d117      	bne.n	1a408 <prvTraceGetObjectHandle+0xa4>
   1a3d8:	4b46      	ldr	r3, [pc, #280]	; (1a4f4 <prvTraceGetObjectHandle+0x190>)
   1a3da:	681a      	ldr	r2, [r3, #0]
   1a3dc:	4b45      	ldr	r3, [pc, #276]	; (1a4f4 <prvTraceGetObjectHandle+0x190>)
   1a3de:	681b      	ldr	r3, [r3, #0]
   1a3e0:	b2d9      	uxtb	r1, r3
   1a3e2:	1dfb      	adds	r3, r7, #7
   1a3e4:	781b      	ldrb	r3, [r3, #0]
   1a3e6:	4842      	ldr	r0, [pc, #264]	; (1a4f0 <prvTraceGetObjectHandle+0x18c>)
   1a3e8:	3308      	adds	r3, #8
   1a3ea:	005b      	lsls	r3, r3, #1
   1a3ec:	18c3      	adds	r3, r0, r3
   1a3ee:	3302      	adds	r3, #2
   1a3f0:	881b      	ldrh	r3, [r3, #0]
   1a3f2:	b2db      	uxtb	r3, r3
   1a3f4:	1acb      	subs	r3, r1, r3
   1a3f6:	b2db      	uxtb	r3, r3
   1a3f8:	3301      	adds	r3, #1
   1a3fa:	b2d8      	uxtb	r0, r3
   1a3fc:	4b3c      	ldr	r3, [pc, #240]	; (1a4f0 <prvTraceGetObjectHandle+0x18c>)
   1a3fe:	2148      	movs	r1, #72	; 0x48
   1a400:	189b      	adds	r3, r3, r2
   1a402:	185b      	adds	r3, r3, r1
   1a404:	1c02      	adds	r2, r0, #0
   1a406:	701a      	strb	r2, [r3, #0]
   1a408:	4b3a      	ldr	r3, [pc, #232]	; (1a4f4 <prvTraceGetObjectHandle+0x190>)
   1a40a:	681a      	ldr	r2, [r3, #0]
   1a40c:	231f      	movs	r3, #31
   1a40e:	18fb      	adds	r3, r7, r3
   1a410:	4937      	ldr	r1, [pc, #220]	; (1a4f0 <prvTraceGetObjectHandle+0x18c>)
   1a412:	2048      	movs	r0, #72	; 0x48
   1a414:	188a      	adds	r2, r1, r2
   1a416:	1812      	adds	r2, r2, r0
   1a418:	7812      	ldrb	r2, [r2, #0]
   1a41a:	701a      	strb	r2, [r3, #0]
   1a41c:	1dfb      	adds	r3, r7, #7
   1a41e:	781a      	ldrb	r2, [r3, #0]
   1a420:	4b33      	ldr	r3, [pc, #204]	; (1a4f0 <prvTraceGetObjectHandle+0x18c>)
   1a422:	0052      	lsls	r2, r2, #1
   1a424:	5ad2      	ldrh	r2, [r2, r3]
   1a426:	1dfb      	adds	r3, r7, #7
   1a428:	781b      	ldrb	r3, [r3, #0]
   1a42a:	4931      	ldr	r1, [pc, #196]	; (1a4f0 <prvTraceGetObjectHandle+0x18c>)
   1a42c:	3310      	adds	r3, #16
   1a42e:	005b      	lsls	r3, r3, #1
   1a430:	18cb      	adds	r3, r1, r3
   1a432:	3304      	adds	r3, #4
   1a434:	881b      	ldrh	r3, [r3, #0]
   1a436:	429a      	cmp	r2, r3
   1a438:	d90d      	bls.n	1a456 <prvTraceGetObjectHandle+0xf2>
   1a43a:	1dfb      	adds	r3, r7, #7
   1a43c:	781b      	ldrb	r3, [r3, #0]
   1a43e:	0018      	movs	r0, r3
   1a440:	4b2d      	ldr	r3, [pc, #180]	; (1a4f8 <prvTraceGetObjectHandle+0x194>)
   1a442:	4798      	blx	r3
   1a444:	0003      	movs	r3, r0
   1a446:	0018      	movs	r0, r3
   1a448:	4b26      	ldr	r3, [pc, #152]	; (1a4e4 <prvTraceGetObjectHandle+0x180>)
   1a44a:	4798      	blx	r3
   1a44c:	231f      	movs	r3, #31
   1a44e:	18fb      	adds	r3, r7, r3
   1a450:	2200      	movs	r2, #0
   1a452:	701a      	strb	r2, [r3, #0]
   1a454:	e031      	b.n	1a4ba <prvTraceGetObjectHandle+0x156>
   1a456:	1dfb      	adds	r3, r7, #7
   1a458:	781b      	ldrb	r3, [r3, #0]
   1a45a:	4a25      	ldr	r2, [pc, #148]	; (1a4f0 <prvTraceGetObjectHandle+0x18c>)
   1a45c:	0059      	lsls	r1, r3, #1
   1a45e:	5a8a      	ldrh	r2, [r1, r2]
   1a460:	3201      	adds	r2, #1
   1a462:	b291      	uxth	r1, r2
   1a464:	4a22      	ldr	r2, [pc, #136]	; (1a4f0 <prvTraceGetObjectHandle+0x18c>)
   1a466:	005b      	lsls	r3, r3, #1
   1a468:	5299      	strh	r1, [r3, r2]
   1a46a:	1dfb      	adds	r3, r7, #7
   1a46c:	781a      	ldrb	r2, [r3, #0]
   1a46e:	4b20      	ldr	r3, [pc, #128]	; (1a4f0 <prvTraceGetObjectHandle+0x18c>)
   1a470:	0052      	lsls	r2, r2, #1
   1a472:	5ad3      	ldrh	r3, [r2, r3]
   1a474:	0019      	movs	r1, r3
   1a476:	1dfb      	adds	r3, r7, #7
   1a478:	781b      	ldrb	r3, [r3, #0]
   1a47a:	4a1d      	ldr	r2, [pc, #116]	; (1a4f0 <prvTraceGetObjectHandle+0x18c>)
   1a47c:	3308      	adds	r3, #8
   1a47e:	005b      	lsls	r3, r3, #1
   1a480:	18d3      	adds	r3, r2, r3
   1a482:	3302      	adds	r3, #2
   1a484:	881b      	ldrh	r3, [r3, #0]
   1a486:	1acb      	subs	r3, r1, r3
   1a488:	617b      	str	r3, [r7, #20]
   1a48a:	1dfb      	adds	r3, r7, #7
   1a48c:	781b      	ldrb	r3, [r3, #0]
   1a48e:	4a18      	ldr	r2, [pc, #96]	; (1a4f0 <prvTraceGetObjectHandle+0x18c>)
   1a490:	3318      	adds	r3, #24
   1a492:	005b      	lsls	r3, r3, #1
   1a494:	18d3      	adds	r3, r2, r3
   1a496:	3306      	adds	r3, #6
   1a498:	881b      	ldrh	r3, [r3, #0]
   1a49a:	001a      	movs	r2, r3
   1a49c:	697b      	ldr	r3, [r7, #20]
   1a49e:	429a      	cmp	r2, r3
   1a4a0:	da0b      	bge.n	1a4ba <prvTraceGetObjectHandle+0x156>
   1a4a2:	1dfb      	adds	r3, r7, #7
   1a4a4:	781b      	ldrb	r3, [r3, #0]
   1a4a6:	697a      	ldr	r2, [r7, #20]
   1a4a8:	b2d2      	uxtb	r2, r2
   1a4aa:	b291      	uxth	r1, r2
   1a4ac:	4a10      	ldr	r2, [pc, #64]	; (1a4f0 <prvTraceGetObjectHandle+0x18c>)
   1a4ae:	3318      	adds	r3, #24
   1a4b0:	005b      	lsls	r3, r3, #1
   1a4b2:	18d3      	adds	r3, r2, r3
   1a4b4:	3306      	adds	r3, #6
   1a4b6:	1c0a      	adds	r2, r1, #0
   1a4b8:	801a      	strh	r2, [r3, #0]
   1a4ba:	4b0c      	ldr	r3, [pc, #48]	; (1a4ec <prvTraceGetObjectHandle+0x188>)
   1a4bc:	681b      	ldr	r3, [r3, #0]
   1a4be:	1e5a      	subs	r2, r3, #1
   1a4c0:	4b0a      	ldr	r3, [pc, #40]	; (1a4ec <prvTraceGetObjectHandle+0x188>)
   1a4c2:	601a      	str	r2, [r3, #0]
   1a4c4:	69bb      	ldr	r3, [r7, #24]
   1a4c6:	60bb      	str	r3, [r7, #8]
   1a4c8:	68bb      	ldr	r3, [r7, #8]
   1a4ca:	f383 8810 	msr	PRIMASK, r3
   1a4ce:	231f      	movs	r3, #31
   1a4d0:	18fb      	adds	r3, r7, r3
   1a4d2:	781b      	ldrb	r3, [r3, #0]
   1a4d4:	0018      	movs	r0, r3
   1a4d6:	46bd      	mov	sp, r7
   1a4d8:	b008      	add	sp, #32
   1a4da:	bd80      	pop	{r7, pc}
   1a4dc:	20000e18 	.word	0x20000e18
   1a4e0:	00037fb8 	.word	0x00037fb8
   1a4e4:	0001a681 	.word	0x0001a681
   1a4e8:	00038b98 	.word	0x00038b98
   1a4ec:	20000d70 	.word	0x20000d70
   1a4f0:	20000d88 	.word	0x20000d88
   1a4f4:	20000e1c 	.word	0x20000e1c
   1a4f8:	000193a1 	.word	0x000193a1

0001a4fc <prvMarkObjectAsUsed>:
   1a4fc:	b590      	push	{r4, r7, lr}
   1a4fe:	b085      	sub	sp, #20
   1a500:	af00      	add	r7, sp, #0
   1a502:	0002      	movs	r2, r0
   1a504:	1dfb      	adds	r3, r7, #7
   1a506:	701a      	strb	r2, [r3, #0]
   1a508:	1dbb      	adds	r3, r7, #6
   1a50a:	1c0a      	adds	r2, r1, #0
   1a50c:	701a      	strb	r2, [r3, #0]
   1a50e:	230e      	movs	r3, #14
   1a510:	18fc      	adds	r4, r7, r3
   1a512:	1dfb      	adds	r3, r7, #7
   1a514:	781a      	ldrb	r2, [r3, #0]
   1a516:	1dbb      	adds	r3, r7, #6
   1a518:	781b      	ldrb	r3, [r3, #0]
   1a51a:	0011      	movs	r1, r2
   1a51c:	0018      	movs	r0, r3
   1a51e:	4b09      	ldr	r3, [pc, #36]	; (1a544 <prvMarkObjectAsUsed+0x48>)
   1a520:	4798      	blx	r3
   1a522:	0003      	movs	r3, r0
   1a524:	8023      	strh	r3, [r4, #0]
   1a526:	4b08      	ldr	r3, [pc, #32]	; (1a548 <prvMarkObjectAsUsed+0x4c>)
   1a528:	681a      	ldr	r2, [r3, #0]
   1a52a:	230e      	movs	r3, #14
   1a52c:	18fb      	adds	r3, r7, r3
   1a52e:	881b      	ldrh	r3, [r3, #0]
   1a530:	219c      	movs	r1, #156	; 0x9c
   1a532:	18d3      	adds	r3, r2, r3
   1a534:	185b      	adds	r3, r3, r1
   1a536:	2201      	movs	r2, #1
   1a538:	701a      	strb	r2, [r3, #0]
   1a53a:	46c0      	nop			; (mov r8, r8)
   1a53c:	46bd      	mov	sp, r7
   1a53e:	b005      	add	sp, #20
   1a540:	bd90      	pop	{r4, r7, pc}
   1a542:	46c0      	nop			; (mov r8, r8)
   1a544:	0001a28d 	.word	0x0001a28d
   1a548:	20000e18 	.word	0x20000e18

0001a54c <prvStrncpy>:
   1a54c:	b580      	push	{r7, lr}
   1a54e:	b086      	sub	sp, #24
   1a550:	af00      	add	r7, sp, #0
   1a552:	60f8      	str	r0, [r7, #12]
   1a554:	60b9      	str	r1, [r7, #8]
   1a556:	607a      	str	r2, [r7, #4]
   1a558:	2300      	movs	r3, #0
   1a55a:	617b      	str	r3, [r7, #20]
   1a55c:	e010      	b.n	1a580 <prvStrncpy+0x34>
   1a55e:	68fa      	ldr	r2, [r7, #12]
   1a560:	697b      	ldr	r3, [r7, #20]
   1a562:	18d3      	adds	r3, r2, r3
   1a564:	68b9      	ldr	r1, [r7, #8]
   1a566:	697a      	ldr	r2, [r7, #20]
   1a568:	188a      	adds	r2, r1, r2
   1a56a:	7812      	ldrb	r2, [r2, #0]
   1a56c:	701a      	strb	r2, [r3, #0]
   1a56e:	68ba      	ldr	r2, [r7, #8]
   1a570:	697b      	ldr	r3, [r7, #20]
   1a572:	18d3      	adds	r3, r2, r3
   1a574:	781b      	ldrb	r3, [r3, #0]
   1a576:	2b00      	cmp	r3, #0
   1a578:	d007      	beq.n	1a58a <prvStrncpy+0x3e>
   1a57a:	697b      	ldr	r3, [r7, #20]
   1a57c:	3301      	adds	r3, #1
   1a57e:	617b      	str	r3, [r7, #20]
   1a580:	697a      	ldr	r2, [r7, #20]
   1a582:	687b      	ldr	r3, [r7, #4]
   1a584:	429a      	cmp	r2, r3
   1a586:	d3ea      	bcc.n	1a55e <prvStrncpy+0x12>
   1a588:	e000      	b.n	1a58c <prvStrncpy+0x40>
   1a58a:	46c0      	nop			; (mov r8, r8)
   1a58c:	46c0      	nop			; (mov r8, r8)
   1a58e:	46bd      	mov	sp, r7
   1a590:	b006      	add	sp, #24
   1a592:	bd80      	pop	{r7, pc}

0001a594 <prvTraceSetObjectName>:
   1a594:	b580      	push	{r7, lr}
   1a596:	b082      	sub	sp, #8
   1a598:	af00      	add	r7, sp, #0
   1a59a:	603a      	str	r2, [r7, #0]
   1a59c:	1dfb      	adds	r3, r7, #7
   1a59e:	1c02      	adds	r2, r0, #0
   1a5a0:	701a      	strb	r2, [r3, #0]
   1a5a2:	1dbb      	adds	r3, r7, #6
   1a5a4:	1c0a      	adds	r2, r1, #0
   1a5a6:	701a      	strb	r2, [r3, #0]
   1a5a8:	683b      	ldr	r3, [r7, #0]
   1a5aa:	2b00      	cmp	r3, #0
   1a5ac:	d104      	bne.n	1a5b8 <prvTraceSetObjectName+0x24>
   1a5ae:	4b2a      	ldr	r3, [pc, #168]	; (1a658 <prvTraceSetObjectName+0xc4>)
   1a5b0:	0018      	movs	r0, r3
   1a5b2:	4b2a      	ldr	r3, [pc, #168]	; (1a65c <prvTraceSetObjectName+0xc8>)
   1a5b4:	4798      	blx	r3
   1a5b6:	e04b      	b.n	1a650 <prvTraceSetObjectName+0xbc>
   1a5b8:	1dfb      	adds	r3, r7, #7
   1a5ba:	781b      	ldrb	r3, [r3, #0]
   1a5bc:	2b08      	cmp	r3, #8
   1a5be:	d904      	bls.n	1a5ca <prvTraceSetObjectName+0x36>
   1a5c0:	4b27      	ldr	r3, [pc, #156]	; (1a660 <prvTraceSetObjectName+0xcc>)
   1a5c2:	0018      	movs	r0, r3
   1a5c4:	4b25      	ldr	r3, [pc, #148]	; (1a65c <prvTraceSetObjectName+0xc8>)
   1a5c6:	4798      	blx	r3
   1a5c8:	e042      	b.n	1a650 <prvTraceSetObjectName+0xbc>
   1a5ca:	1dbb      	adds	r3, r7, #6
   1a5cc:	781b      	ldrb	r3, [r3, #0]
   1a5ce:	2b00      	cmp	r3, #0
   1a5d0:	d104      	bne.n	1a5dc <prvTraceSetObjectName+0x48>
   1a5d2:	4b24      	ldr	r3, [pc, #144]	; (1a664 <prvTraceSetObjectName+0xd0>)
   1a5d4:	0018      	movs	r0, r3
   1a5d6:	4b21      	ldr	r3, [pc, #132]	; (1a65c <prvTraceSetObjectName+0xc8>)
   1a5d8:	4798      	blx	r3
   1a5da:	e039      	b.n	1a650 <prvTraceSetObjectName+0xbc>
   1a5dc:	4b22      	ldr	r3, [pc, #136]	; (1a668 <prvTraceSetObjectName+0xd4>)
   1a5de:	681a      	ldr	r2, [r3, #0]
   1a5e0:	1dfb      	adds	r3, r7, #7
   1a5e2:	781b      	ldrb	r3, [r3, #0]
   1a5e4:	2164      	movs	r1, #100	; 0x64
   1a5e6:	18d3      	adds	r3, r2, r3
   1a5e8:	185b      	adds	r3, r3, r1
   1a5ea:	781b      	ldrb	r3, [r3, #0]
   1a5ec:	1dba      	adds	r2, r7, #6
   1a5ee:	7812      	ldrb	r2, [r2, #0]
   1a5f0:	429a      	cmp	r2, r3
   1a5f2:	d909      	bls.n	1a608 <prvTraceSetObjectName+0x74>
   1a5f4:	1dfb      	adds	r3, r7, #7
   1a5f6:	781b      	ldrb	r3, [r3, #0]
   1a5f8:	0018      	movs	r0, r3
   1a5fa:	4b1c      	ldr	r3, [pc, #112]	; (1a66c <prvTraceSetObjectName+0xd8>)
   1a5fc:	4798      	blx	r3
   1a5fe:	0003      	movs	r3, r0
   1a600:	0018      	movs	r0, r3
   1a602:	4b16      	ldr	r3, [pc, #88]	; (1a65c <prvTraceSetObjectName+0xc8>)
   1a604:	4798      	blx	r3
   1a606:	e023      	b.n	1a650 <prvTraceSetObjectName+0xbc>
   1a608:	1dfb      	adds	r3, r7, #7
   1a60a:	781a      	ldrb	r2, [r3, #0]
   1a60c:	1dbb      	adds	r3, r7, #6
   1a60e:	781b      	ldrb	r3, [r3, #0]
   1a610:	0011      	movs	r1, r2
   1a612:	0018      	movs	r0, r3
   1a614:	4b16      	ldr	r3, [pc, #88]	; (1a670 <prvTraceSetObjectName+0xdc>)
   1a616:	4798      	blx	r3
   1a618:	0003      	movs	r3, r0
   1a61a:	001a      	movs	r2, r3
   1a61c:	4b15      	ldr	r3, [pc, #84]	; (1a674 <prvTraceSetObjectName+0xe0>)
   1a61e:	801a      	strh	r2, [r3, #0]
   1a620:	4b15      	ldr	r3, [pc, #84]	; (1a678 <prvTraceSetObjectName+0xe4>)
   1a622:	681b      	ldr	r3, [r3, #0]
   1a624:	2b00      	cmp	r3, #0
   1a626:	d113      	bne.n	1a650 <prvTraceSetObjectName+0xbc>
   1a628:	4b0f      	ldr	r3, [pc, #60]	; (1a668 <prvTraceSetObjectName+0xd4>)
   1a62a:	681a      	ldr	r2, [r3, #0]
   1a62c:	4b11      	ldr	r3, [pc, #68]	; (1a674 <prvTraceSetObjectName+0xe0>)
   1a62e:	881b      	ldrh	r3, [r3, #0]
   1a630:	3398      	adds	r3, #152	; 0x98
   1a632:	18d3      	adds	r3, r2, r3
   1a634:	1d18      	adds	r0, r3, #4
   1a636:	4b0c      	ldr	r3, [pc, #48]	; (1a668 <prvTraceSetObjectName+0xd4>)
   1a638:	681a      	ldr	r2, [r3, #0]
   1a63a:	1dfb      	adds	r3, r7, #7
   1a63c:	781b      	ldrb	r3, [r3, #0]
   1a63e:	2170      	movs	r1, #112	; 0x70
   1a640:	18d3      	adds	r3, r2, r3
   1a642:	185b      	adds	r3, r3, r1
   1a644:	781b      	ldrb	r3, [r3, #0]
   1a646:	001a      	movs	r2, r3
   1a648:	683b      	ldr	r3, [r7, #0]
   1a64a:	0019      	movs	r1, r3
   1a64c:	4b0b      	ldr	r3, [pc, #44]	; (1a67c <prvTraceSetObjectName+0xe8>)
   1a64e:	4798      	blx	r3
   1a650:	46bd      	mov	sp, r7
   1a652:	b002      	add	sp, #8
   1a654:	bd80      	pop	{r7, pc}
   1a656:	46c0      	nop			; (mov r8, r8)
   1a658:	00038c9c 	.word	0x00038c9c
   1a65c:	0001a681 	.word	0x0001a681
   1a660:	00038cd0 	.word	0x00038cd0
   1a664:	00038d00 	.word	0x00038d00
   1a668:	20000e18 	.word	0x20000e18
   1a66c:	000193a1 	.word	0x000193a1
   1a670:	0001a28d 	.word	0x0001a28d
   1a674:	20000e20 	.word	0x20000e20
   1a678:	20000d78 	.word	0x20000d78
   1a67c:	0001a54d 	.word	0x0001a54d

0001a680 <prvTraceError>:
   1a680:	b580      	push	{r7, lr}
   1a682:	b082      	sub	sp, #8
   1a684:	af00      	add	r7, sp, #0
   1a686:	6078      	str	r0, [r7, #4]
   1a688:	4b11      	ldr	r3, [pc, #68]	; (1a6d0 <prvTraceError+0x50>)
   1a68a:	681b      	ldr	r3, [r3, #0]
   1a68c:	2b00      	cmp	r3, #0
   1a68e:	d001      	beq.n	1a694 <prvTraceError+0x14>
   1a690:	4b10      	ldr	r3, [pc, #64]	; (1a6d4 <prvTraceError+0x54>)
   1a692:	4798      	blx	r3
   1a694:	4b10      	ldr	r3, [pc, #64]	; (1a6d8 <prvTraceError+0x58>)
   1a696:	681b      	ldr	r3, [r3, #0]
   1a698:	2b00      	cmp	r3, #0
   1a69a:	d115      	bne.n	1a6c8 <prvTraceError+0x48>
   1a69c:	4b0e      	ldr	r3, [pc, #56]	; (1a6d8 <prvTraceError+0x58>)
   1a69e:	687a      	ldr	r2, [r7, #4]
   1a6a0:	601a      	str	r2, [r3, #0]
   1a6a2:	4b0b      	ldr	r3, [pc, #44]	; (1a6d0 <prvTraceError+0x50>)
   1a6a4:	681b      	ldr	r3, [r3, #0]
   1a6a6:	2b00      	cmp	r3, #0
   1a6a8:	d00e      	beq.n	1a6c8 <prvTraceError+0x48>
   1a6aa:	4b09      	ldr	r3, [pc, #36]	; (1a6d0 <prvTraceError+0x50>)
   1a6ac:	681b      	ldr	r3, [r3, #0]
   1a6ae:	4a0b      	ldr	r2, [pc, #44]	; (1a6dc <prvTraceError+0x5c>)
   1a6b0:	1898      	adds	r0, r3, r2
   1a6b2:	4b09      	ldr	r3, [pc, #36]	; (1a6d8 <prvTraceError+0x58>)
   1a6b4:	681b      	ldr	r3, [r3, #0]
   1a6b6:	2250      	movs	r2, #80	; 0x50
   1a6b8:	0019      	movs	r1, r3
   1a6ba:	4b09      	ldr	r3, [pc, #36]	; (1a6e0 <prvTraceError+0x60>)
   1a6bc:	4798      	blx	r3
   1a6be:	4b04      	ldr	r3, [pc, #16]	; (1a6d0 <prvTraceError+0x50>)
   1a6c0:	681b      	ldr	r3, [r3, #0]
   1a6c2:	4a08      	ldr	r2, [pc, #32]	; (1a6e4 <prvTraceError+0x64>)
   1a6c4:	2101      	movs	r1, #1
   1a6c6:	5099      	str	r1, [r3, r2]
   1a6c8:	46c0      	nop			; (mov r8, r8)
   1a6ca:	46bd      	mov	sp, r7
   1a6cc:	b002      	add	sp, #8
   1a6ce:	bd80      	pop	{r7, pc}
   1a6d0:	20000e18 	.word	0x20000e18
   1a6d4:	00019545 	.word	0x00019545
   1a6d8:	20000d78 	.word	0x20000d78
   1a6dc:	000006bc 	.word	0x000006bc
   1a6e0:	0001a54d 	.word	0x0001a54d
   1a6e4:	000006b4 	.word	0x000006b4

0001a6e8 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
   1a6e8:	b580      	push	{r7, lr}
   1a6ea:	b086      	sub	sp, #24
   1a6ec:	af00      	add	r7, sp, #0
   1a6ee:	0002      	movs	r2, r0
   1a6f0:	1dfb      	adds	r3, r7, #7
   1a6f2:	701a      	strb	r2, [r3, #0]
   1a6f4:	2300      	movs	r3, #0
   1a6f6:	617b      	str	r3, [r7, #20]
   1a6f8:	2300      	movs	r3, #0
   1a6fa:	613b      	str	r3, [r7, #16]
   1a6fc:	1dfb      	adds	r3, r7, #7
   1a6fe:	781b      	ldrb	r3, [r3, #0]
   1a700:	2b00      	cmp	r3, #0
   1a702:	d000      	beq.n	1a706 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
   1a704:	e089      	b.n	1a81a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x132>
   1a706:	4b49      	ldr	r3, [pc, #292]	; (1a82c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x144>)
   1a708:	0018      	movs	r0, r3
   1a70a:	4b49      	ldr	r3, [pc, #292]	; (1a830 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x148>)
   1a70c:	4798      	blx	r3
   1a70e:	e08a      	b.n	1a826 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
   1a710:	4b48      	ldr	r3, [pc, #288]	; (1a834 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a712:	681b      	ldr	r3, [r3, #0]
   1a714:	69da      	ldr	r2, [r3, #28]
   1a716:	697b      	ldr	r3, [r7, #20]
   1a718:	18d3      	adds	r3, r2, r3
   1a71a:	613b      	str	r3, [r7, #16]
   1a71c:	4b45      	ldr	r3, [pc, #276]	; (1a834 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a71e:	6819      	ldr	r1, [r3, #0]
   1a720:	693b      	ldr	r3, [r7, #16]
   1a722:	009a      	lsls	r2, r3, #2
   1a724:	23e2      	movs	r3, #226	; 0xe2
   1a726:	00db      	lsls	r3, r3, #3
   1a728:	188a      	adds	r2, r1, r2
   1a72a:	18d3      	adds	r3, r2, r3
   1a72c:	781b      	ldrb	r3, [r3, #0]
   1a72e:	2b98      	cmp	r3, #152	; 0x98
   1a730:	d934      	bls.n	1a79c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
   1a732:	4b40      	ldr	r3, [pc, #256]	; (1a834 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a734:	6819      	ldr	r1, [r3, #0]
   1a736:	693b      	ldr	r3, [r7, #16]
   1a738:	009a      	lsls	r2, r3, #2
   1a73a:	23e2      	movs	r3, #226	; 0xe2
   1a73c:	00db      	lsls	r3, r3, #3
   1a73e:	188a      	adds	r2, r1, r2
   1a740:	18d3      	adds	r3, r2, r3
   1a742:	781b      	ldrb	r3, [r3, #0]
   1a744:	2ba7      	cmp	r3, #167	; 0xa7
   1a746:	d829      	bhi.n	1a79c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
   1a748:	4b3a      	ldr	r3, [pc, #232]	; (1a834 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a74a:	6819      	ldr	r1, [r3, #0]
   1a74c:	693b      	ldr	r3, [r7, #16]
   1a74e:	009a      	lsls	r2, r3, #2
   1a750:	23e2      	movs	r3, #226	; 0xe2
   1a752:	00db      	lsls	r3, r3, #3
   1a754:	188a      	adds	r2, r1, r2
   1a756:	18d3      	adds	r3, r2, r3
   1a758:	781a      	ldrb	r2, [r3, #0]
   1a75a:	230f      	movs	r3, #15
   1a75c:	18fb      	adds	r3, r7, r3
   1a75e:	3268      	adds	r2, #104	; 0x68
   1a760:	701a      	strb	r2, [r3, #0]
   1a762:	230f      	movs	r3, #15
   1a764:	18fb      	adds	r3, r7, r3
   1a766:	781a      	ldrb	r2, [r3, #0]
   1a768:	693b      	ldr	r3, [r7, #16]
   1a76a:	18d2      	adds	r2, r2, r3
   1a76c:	4b31      	ldr	r3, [pc, #196]	; (1a834 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a76e:	681b      	ldr	r3, [r3, #0]
   1a770:	699b      	ldr	r3, [r3, #24]
   1a772:	429a      	cmp	r2, r3
   1a774:	d24d      	bcs.n	1a812 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
   1a776:	4b2f      	ldr	r3, [pc, #188]	; (1a834 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a778:	681a      	ldr	r2, [r3, #0]
   1a77a:	693b      	ldr	r3, [r7, #16]
   1a77c:	009b      	lsls	r3, r3, #2
   1a77e:	21e2      	movs	r1, #226	; 0xe2
   1a780:	00c9      	lsls	r1, r1, #3
   1a782:	468c      	mov	ip, r1
   1a784:	4463      	add	r3, ip
   1a786:	18d0      	adds	r0, r2, r3
   1a788:	230f      	movs	r3, #15
   1a78a:	18fb      	adds	r3, r7, r3
   1a78c:	781b      	ldrb	r3, [r3, #0]
   1a78e:	3301      	adds	r3, #1
   1a790:	009b      	lsls	r3, r3, #2
   1a792:	001a      	movs	r2, r3
   1a794:	2100      	movs	r1, #0
   1a796:	4b28      	ldr	r3, [pc, #160]	; (1a838 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1a798:	4798      	blx	r3
   1a79a:	e03a      	b.n	1a812 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
   1a79c:	4b25      	ldr	r3, [pc, #148]	; (1a834 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a79e:	6819      	ldr	r1, [r3, #0]
   1a7a0:	693b      	ldr	r3, [r7, #16]
   1a7a2:	009a      	lsls	r2, r3, #2
   1a7a4:	23e2      	movs	r3, #226	; 0xe2
   1a7a6:	00db      	lsls	r3, r3, #3
   1a7a8:	188a      	adds	r2, r1, r2
   1a7aa:	18d3      	adds	r3, r2, r3
   1a7ac:	781b      	ldrb	r3, [r3, #0]
   1a7ae:	2b01      	cmp	r3, #1
   1a7b0:	d130      	bne.n	1a814 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
   1a7b2:	693b      	ldr	r3, [r7, #16]
   1a7b4:	1c5a      	adds	r2, r3, #1
   1a7b6:	4b1f      	ldr	r3, [pc, #124]	; (1a834 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a7b8:	681b      	ldr	r3, [r3, #0]
   1a7ba:	699b      	ldr	r3, [r3, #24]
   1a7bc:	429a      	cmp	r2, r3
   1a7be:	d20e      	bcs.n	1a7de <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
   1a7c0:	4b1c      	ldr	r3, [pc, #112]	; (1a834 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a7c2:	681a      	ldr	r2, [r3, #0]
   1a7c4:	693b      	ldr	r3, [r7, #16]
   1a7c6:	009b      	lsls	r3, r3, #2
   1a7c8:	21e2      	movs	r1, #226	; 0xe2
   1a7ca:	00c9      	lsls	r1, r1, #3
   1a7cc:	468c      	mov	ip, r1
   1a7ce:	4463      	add	r3, ip
   1a7d0:	18d3      	adds	r3, r2, r3
   1a7d2:	2208      	movs	r2, #8
   1a7d4:	2100      	movs	r1, #0
   1a7d6:	0018      	movs	r0, r3
   1a7d8:	4b17      	ldr	r3, [pc, #92]	; (1a838 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1a7da:	4798      	blx	r3
   1a7dc:	e01a      	b.n	1a814 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
   1a7de:	4b15      	ldr	r3, [pc, #84]	; (1a834 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a7e0:	681b      	ldr	r3, [r3, #0]
   1a7e2:	22e2      	movs	r2, #226	; 0xe2
   1a7e4:	00d2      	lsls	r2, r2, #3
   1a7e6:	4694      	mov	ip, r2
   1a7e8:	4463      	add	r3, ip
   1a7ea:	2204      	movs	r2, #4
   1a7ec:	2100      	movs	r1, #0
   1a7ee:	0018      	movs	r0, r3
   1a7f0:	4b11      	ldr	r3, [pc, #68]	; (1a838 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1a7f2:	4798      	blx	r3
   1a7f4:	4b0f      	ldr	r3, [pc, #60]	; (1a834 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a7f6:	681a      	ldr	r2, [r3, #0]
   1a7f8:	693b      	ldr	r3, [r7, #16]
   1a7fa:	009b      	lsls	r3, r3, #2
   1a7fc:	21e2      	movs	r1, #226	; 0xe2
   1a7fe:	00c9      	lsls	r1, r1, #3
   1a800:	468c      	mov	ip, r1
   1a802:	4463      	add	r3, ip
   1a804:	18d3      	adds	r3, r2, r3
   1a806:	2204      	movs	r2, #4
   1a808:	2100      	movs	r1, #0
   1a80a:	0018      	movs	r0, r3
   1a80c:	4b0a      	ldr	r3, [pc, #40]	; (1a838 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1a80e:	4798      	blx	r3
   1a810:	e000      	b.n	1a814 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
   1a812:	46c0      	nop			; (mov r8, r8)
   1a814:	697b      	ldr	r3, [r7, #20]
   1a816:	3301      	adds	r3, #1
   1a818:	617b      	str	r3, [r7, #20]
   1a81a:	1dfb      	adds	r3, r7, #7
   1a81c:	781a      	ldrb	r2, [r3, #0]
   1a81e:	697b      	ldr	r3, [r7, #20]
   1a820:	429a      	cmp	r2, r3
   1a822:	d900      	bls.n	1a826 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
   1a824:	e774      	b.n	1a710 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
   1a826:	46bd      	mov	sp, r7
   1a828:	b006      	add	sp, #24
   1a82a:	bd80      	pop	{r7, pc}
   1a82c:	00038d60 	.word	0x00038d60
   1a830:	0001a681 	.word	0x0001a681
   1a834:	20000e18 	.word	0x20000e18
   1a838:	00035707 	.word	0x00035707

0001a83c <prvTraceUpdateCounters>:
   1a83c:	b580      	push	{r7, lr}
   1a83e:	af00      	add	r7, sp, #0
   1a840:	4b12      	ldr	r3, [pc, #72]	; (1a88c <prvTraceUpdateCounters+0x50>)
   1a842:	681b      	ldr	r3, [r3, #0]
   1a844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1a846:	2b00      	cmp	r3, #0
   1a848:	d01c      	beq.n	1a884 <prvTraceUpdateCounters+0x48>
   1a84a:	4b10      	ldr	r3, [pc, #64]	; (1a88c <prvTraceUpdateCounters+0x50>)
   1a84c:	681b      	ldr	r3, [r3, #0]
   1a84e:	695a      	ldr	r2, [r3, #20]
   1a850:	3201      	adds	r2, #1
   1a852:	615a      	str	r2, [r3, #20]
   1a854:	4b0d      	ldr	r3, [pc, #52]	; (1a88c <prvTraceUpdateCounters+0x50>)
   1a856:	681b      	ldr	r3, [r3, #0]
   1a858:	69da      	ldr	r2, [r3, #28]
   1a85a:	3201      	adds	r2, #1
   1a85c:	61da      	str	r2, [r3, #28]
   1a85e:	4b0b      	ldr	r3, [pc, #44]	; (1a88c <prvTraceUpdateCounters+0x50>)
   1a860:	681b      	ldr	r3, [r3, #0]
   1a862:	69da      	ldr	r2, [r3, #28]
   1a864:	232c      	movs	r3, #44	; 0x2c
   1a866:	33ff      	adds	r3, #255	; 0xff
   1a868:	429a      	cmp	r2, r3
   1a86a:	d907      	bls.n	1a87c <prvTraceUpdateCounters+0x40>
   1a86c:	4b07      	ldr	r3, [pc, #28]	; (1a88c <prvTraceUpdateCounters+0x50>)
   1a86e:	681b      	ldr	r3, [r3, #0]
   1a870:	2201      	movs	r2, #1
   1a872:	621a      	str	r2, [r3, #32]
   1a874:	4b05      	ldr	r3, [pc, #20]	; (1a88c <prvTraceUpdateCounters+0x50>)
   1a876:	681b      	ldr	r3, [r3, #0]
   1a878:	2200      	movs	r2, #0
   1a87a:	61da      	str	r2, [r3, #28]
   1a87c:	2001      	movs	r0, #1
   1a87e:	4b04      	ldr	r3, [pc, #16]	; (1a890 <prvTraceUpdateCounters+0x54>)
   1a880:	4798      	blx	r3
   1a882:	e000      	b.n	1a886 <prvTraceUpdateCounters+0x4a>
   1a884:	46c0      	nop			; (mov r8, r8)
   1a886:	46bd      	mov	sp, r7
   1a888:	bd80      	pop	{r7, pc}
   1a88a:	46c0      	nop			; (mov r8, r8)
   1a88c:	20000e18 	.word	0x20000e18
   1a890:	0001a6e9 	.word	0x0001a6e9

0001a894 <prvTraceGetDTS>:
   1a894:	b5b0      	push	{r4, r5, r7, lr}
   1a896:	b086      	sub	sp, #24
   1a898:	af00      	add	r7, sp, #0
   1a89a:	0002      	movs	r2, r0
   1a89c:	1dbb      	adds	r3, r7, #6
   1a89e:	801a      	strh	r2, [r3, #0]
   1a8a0:	2300      	movs	r3, #0
   1a8a2:	617b      	str	r3, [r7, #20]
   1a8a4:	2300      	movs	r3, #0
   1a8a6:	613b      	str	r3, [r7, #16]
   1a8a8:	2300      	movs	r3, #0
   1a8aa:	60fb      	str	r3, [r7, #12]
   1a8ac:	1dbb      	adds	r3, r7, #6
   1a8ae:	881b      	ldrh	r3, [r3, #0]
   1a8b0:	2bff      	cmp	r3, #255	; 0xff
   1a8b2:	d00a      	beq.n	1a8ca <prvTraceGetDTS+0x36>
   1a8b4:	1dbb      	adds	r3, r7, #6
   1a8b6:	881b      	ldrh	r3, [r3, #0]
   1a8b8:	4a60      	ldr	r2, [pc, #384]	; (1aa3c <prvTraceGetDTS+0x1a8>)
   1a8ba:	4293      	cmp	r3, r2
   1a8bc:	d005      	beq.n	1a8ca <prvTraceGetDTS+0x36>
   1a8be:	4b60      	ldr	r3, [pc, #384]	; (1aa40 <prvTraceGetDTS+0x1ac>)
   1a8c0:	0018      	movs	r0, r3
   1a8c2:	4b60      	ldr	r3, [pc, #384]	; (1aa44 <prvTraceGetDTS+0x1b0>)
   1a8c4:	4798      	blx	r3
   1a8c6:	2300      	movs	r3, #0
   1a8c8:	e0b3      	b.n	1aa32 <prvTraceGetDTS+0x19e>
   1a8ca:	4b5f      	ldr	r3, [pc, #380]	; (1aa48 <prvTraceGetDTS+0x1b4>)
   1a8cc:	681b      	ldr	r3, [r3, #0]
   1a8ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a8d0:	2b00      	cmp	r3, #0
   1a8d2:	d118      	bne.n	1a906 <prvTraceGetDTS+0x72>
   1a8d4:	4b5d      	ldr	r3, [pc, #372]	; (1aa4c <prvTraceGetDTS+0x1b8>)
   1a8d6:	681b      	ldr	r3, [r3, #0]
   1a8d8:	2b00      	cmp	r3, #0
   1a8da:	d006      	beq.n	1a8ea <prvTraceGetDTS+0x56>
   1a8dc:	4b5a      	ldr	r3, [pc, #360]	; (1aa48 <prvTraceGetDTS+0x1b4>)
   1a8de:	681b      	ldr	r3, [r3, #0]
   1a8e0:	4a5a      	ldr	r2, [pc, #360]	; (1aa4c <prvTraceGetDTS+0x1b8>)
   1a8e2:	6812      	ldr	r2, [r2, #0]
   1a8e4:	0892      	lsrs	r2, r2, #2
   1a8e6:	625a      	str	r2, [r3, #36]	; 0x24
   1a8e8:	e00d      	b.n	1a906 <prvTraceGetDTS+0x72>
   1a8ea:	4b59      	ldr	r3, [pc, #356]	; (1aa50 <prvTraceGetDTS+0x1bc>)
   1a8ec:	681a      	ldr	r2, [r3, #0]
   1a8ee:	4b59      	ldr	r3, [pc, #356]	; (1aa54 <prvTraceGetDTS+0x1c0>)
   1a8f0:	681b      	ldr	r3, [r3, #0]
   1a8f2:	429a      	cmp	r2, r3
   1a8f4:	d007      	beq.n	1a906 <prvTraceGetDTS+0x72>
   1a8f6:	4b54      	ldr	r3, [pc, #336]	; (1aa48 <prvTraceGetDTS+0x1b4>)
   1a8f8:	681c      	ldr	r4, [r3, #0]
   1a8fa:	2000      	movs	r0, #0
   1a8fc:	4b56      	ldr	r3, [pc, #344]	; (1aa58 <prvTraceGetDTS+0x1c4>)
   1a8fe:	4798      	blx	r3
   1a900:	0003      	movs	r3, r0
   1a902:	089b      	lsrs	r3, r3, #2
   1a904:	6263      	str	r3, [r4, #36]	; 0x24
   1a906:	230c      	movs	r3, #12
   1a908:	18fb      	adds	r3, r7, r3
   1a90a:	0018      	movs	r0, r3
   1a90c:	4b53      	ldr	r3, [pc, #332]	; (1aa5c <prvTraceGetDTS+0x1c8>)
   1a90e:	4798      	blx	r3
   1a910:	68fa      	ldr	r2, [r7, #12]
   1a912:	4b53      	ldr	r3, [pc, #332]	; (1aa60 <prvTraceGetDTS+0x1cc>)
   1a914:	681b      	ldr	r3, [r3, #0]
   1a916:	1ad3      	subs	r3, r2, r3
   1a918:	613b      	str	r3, [r7, #16]
   1a91a:	68fa      	ldr	r2, [r7, #12]
   1a91c:	4b50      	ldr	r3, [pc, #320]	; (1aa60 <prvTraceGetDTS+0x1cc>)
   1a91e:	601a      	str	r2, [r3, #0]
   1a920:	4b49      	ldr	r3, [pc, #292]	; (1aa48 <prvTraceGetDTS+0x1b4>)
   1a922:	681b      	ldr	r3, [r3, #0]
   1a924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a926:	2b00      	cmp	r3, #0
   1a928:	d044      	beq.n	1a9b4 <prvTraceGetDTS+0x120>
   1a92a:	4b47      	ldr	r3, [pc, #284]	; (1aa48 <prvTraceGetDTS+0x1b4>)
   1a92c:	681b      	ldr	r3, [r3, #0]
   1a92e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1a930:	693b      	ldr	r3, [r7, #16]
   1a932:	429a      	cmp	r2, r3
   1a934:	d21e      	bcs.n	1a974 <prvTraceGetDTS+0xe0>
   1a936:	4b44      	ldr	r3, [pc, #272]	; (1aa48 <prvTraceGetDTS+0x1b4>)
   1a938:	681c      	ldr	r4, [r3, #0]
   1a93a:	4b43      	ldr	r3, [pc, #268]	; (1aa48 <prvTraceGetDTS+0x1b4>)
   1a93c:	681b      	ldr	r3, [r3, #0]
   1a93e:	6add      	ldr	r5, [r3, #44]	; 0x2c
   1a940:	4b41      	ldr	r3, [pc, #260]	; (1aa48 <prvTraceGetDTS+0x1b4>)
   1a942:	681b      	ldr	r3, [r3, #0]
   1a944:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1a946:	4b47      	ldr	r3, [pc, #284]	; (1aa64 <prvTraceGetDTS+0x1d0>)
   1a948:	0011      	movs	r1, r2
   1a94a:	6938      	ldr	r0, [r7, #16]
   1a94c:	4798      	blx	r3
   1a94e:	0003      	movs	r3, r0
   1a950:	18eb      	adds	r3, r5, r3
   1a952:	62e3      	str	r3, [r4, #44]	; 0x2c
   1a954:	4b3c      	ldr	r3, [pc, #240]	; (1aa48 <prvTraceGetDTS+0x1b4>)
   1a956:	681c      	ldr	r4, [r3, #0]
   1a958:	4b3b      	ldr	r3, [pc, #236]	; (1aa48 <prvTraceGetDTS+0x1b4>)
   1a95a:	681b      	ldr	r3, [r3, #0]
   1a95c:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   1a95e:	4b3a      	ldr	r3, [pc, #232]	; (1aa48 <prvTraceGetDTS+0x1b4>)
   1a960:	681b      	ldr	r3, [r3, #0]
   1a962:	6a59      	ldr	r1, [r3, #36]	; 0x24
   1a964:	693a      	ldr	r2, [r7, #16]
   1a966:	4b40      	ldr	r3, [pc, #256]	; (1aa68 <prvTraceGetDTS+0x1d4>)
   1a968:	0010      	movs	r0, r2
   1a96a:	4798      	blx	r3
   1a96c:	000b      	movs	r3, r1
   1a96e:	18eb      	adds	r3, r5, r3
   1a970:	62a3      	str	r3, [r4, #40]	; 0x28
   1a972:	e007      	b.n	1a984 <prvTraceGetDTS+0xf0>
   1a974:	4b34      	ldr	r3, [pc, #208]	; (1aa48 <prvTraceGetDTS+0x1b4>)
   1a976:	681b      	ldr	r3, [r3, #0]
   1a978:	4a33      	ldr	r2, [pc, #204]	; (1aa48 <prvTraceGetDTS+0x1b4>)
   1a97a:	6812      	ldr	r2, [r2, #0]
   1a97c:	6a91      	ldr	r1, [r2, #40]	; 0x28
   1a97e:	693a      	ldr	r2, [r7, #16]
   1a980:	188a      	adds	r2, r1, r2
   1a982:	629a      	str	r2, [r3, #40]	; 0x28
   1a984:	4b30      	ldr	r3, [pc, #192]	; (1aa48 <prvTraceGetDTS+0x1b4>)
   1a986:	681b      	ldr	r3, [r3, #0]
   1a988:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1a98a:	4b2f      	ldr	r3, [pc, #188]	; (1aa48 <prvTraceGetDTS+0x1b4>)
   1a98c:	681b      	ldr	r3, [r3, #0]
   1a98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a990:	429a      	cmp	r2, r3
   1a992:	d313      	bcc.n	1a9bc <prvTraceGetDTS+0x128>
   1a994:	4b2c      	ldr	r3, [pc, #176]	; (1aa48 <prvTraceGetDTS+0x1b4>)
   1a996:	681b      	ldr	r3, [r3, #0]
   1a998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a99a:	3201      	adds	r2, #1
   1a99c:	62da      	str	r2, [r3, #44]	; 0x2c
   1a99e:	4b2a      	ldr	r3, [pc, #168]	; (1aa48 <prvTraceGetDTS+0x1b4>)
   1a9a0:	681b      	ldr	r3, [r3, #0]
   1a9a2:	4a29      	ldr	r2, [pc, #164]	; (1aa48 <prvTraceGetDTS+0x1b4>)
   1a9a4:	6812      	ldr	r2, [r2, #0]
   1a9a6:	6a91      	ldr	r1, [r2, #40]	; 0x28
   1a9a8:	4a27      	ldr	r2, [pc, #156]	; (1aa48 <prvTraceGetDTS+0x1b4>)
   1a9aa:	6812      	ldr	r2, [r2, #0]
   1a9ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
   1a9ae:	1a8a      	subs	r2, r1, r2
   1a9b0:	629a      	str	r2, [r3, #40]	; 0x28
   1a9b2:	e003      	b.n	1a9bc <prvTraceGetDTS+0x128>
   1a9b4:	4b24      	ldr	r3, [pc, #144]	; (1aa48 <prvTraceGetDTS+0x1b4>)
   1a9b6:	681b      	ldr	r3, [r3, #0]
   1a9b8:	68fa      	ldr	r2, [r7, #12]
   1a9ba:	629a      	str	r2, [r3, #40]	; 0x28
   1a9bc:	1dbb      	adds	r3, r7, #6
   1a9be:	881a      	ldrh	r2, [r3, #0]
   1a9c0:	693b      	ldr	r3, [r7, #16]
   1a9c2:	429a      	cmp	r2, r3
   1a9c4:	d22f      	bcs.n	1aa26 <prvTraceGetDTS+0x192>
   1a9c6:	4b29      	ldr	r3, [pc, #164]	; (1aa6c <prvTraceGetDTS+0x1d8>)
   1a9c8:	4798      	blx	r3
   1a9ca:	0003      	movs	r3, r0
   1a9cc:	617b      	str	r3, [r7, #20]
   1a9ce:	697b      	ldr	r3, [r7, #20]
   1a9d0:	2b00      	cmp	r3, #0
   1a9d2:	d028      	beq.n	1aa26 <prvTraceGetDTS+0x192>
   1a9d4:	1dbb      	adds	r3, r7, #6
   1a9d6:	881b      	ldrh	r3, [r3, #0]
   1a9d8:	4a18      	ldr	r2, [pc, #96]	; (1aa3c <prvTraceGetDTS+0x1a8>)
   1a9da:	4293      	cmp	r3, r2
   1a9dc:	d10b      	bne.n	1a9f6 <prvTraceGetDTS+0x162>
   1a9de:	697b      	ldr	r3, [r7, #20]
   1a9e0:	22a9      	movs	r2, #169	; 0xa9
   1a9e2:	701a      	strb	r2, [r3, #0]
   1a9e4:	693b      	ldr	r3, [r7, #16]
   1a9e6:	0c1b      	lsrs	r3, r3, #16
   1a9e8:	b29a      	uxth	r2, r3
   1a9ea:	697b      	ldr	r3, [r7, #20]
   1a9ec:	805a      	strh	r2, [r3, #2]
   1a9ee:	697b      	ldr	r3, [r7, #20]
   1a9f0:	2200      	movs	r2, #0
   1a9f2:	705a      	strb	r2, [r3, #1]
   1a9f4:	e015      	b.n	1aa22 <prvTraceGetDTS+0x18e>
   1a9f6:	1dbb      	adds	r3, r7, #6
   1a9f8:	881b      	ldrh	r3, [r3, #0]
   1a9fa:	2bff      	cmp	r3, #255	; 0xff
   1a9fc:	d10d      	bne.n	1aa1a <prvTraceGetDTS+0x186>
   1a9fe:	697b      	ldr	r3, [r7, #20]
   1aa00:	22a8      	movs	r2, #168	; 0xa8
   1aa02:	701a      	strb	r2, [r3, #0]
   1aa04:	693b      	ldr	r3, [r7, #16]
   1aa06:	0a1b      	lsrs	r3, r3, #8
   1aa08:	b29a      	uxth	r2, r3
   1aa0a:	697b      	ldr	r3, [r7, #20]
   1aa0c:	805a      	strh	r2, [r3, #2]
   1aa0e:	693b      	ldr	r3, [r7, #16]
   1aa10:	0e1b      	lsrs	r3, r3, #24
   1aa12:	b2da      	uxtb	r2, r3
   1aa14:	697b      	ldr	r3, [r7, #20]
   1aa16:	705a      	strb	r2, [r3, #1]
   1aa18:	e003      	b.n	1aa22 <prvTraceGetDTS+0x18e>
   1aa1a:	4b15      	ldr	r3, [pc, #84]	; (1aa70 <prvTraceGetDTS+0x1dc>)
   1aa1c:	0018      	movs	r0, r3
   1aa1e:	4b09      	ldr	r3, [pc, #36]	; (1aa44 <prvTraceGetDTS+0x1b0>)
   1aa20:	4798      	blx	r3
   1aa22:	4b14      	ldr	r3, [pc, #80]	; (1aa74 <prvTraceGetDTS+0x1e0>)
   1aa24:	4798      	blx	r3
   1aa26:	693b      	ldr	r3, [r7, #16]
   1aa28:	b29b      	uxth	r3, r3
   1aa2a:	1dba      	adds	r2, r7, #6
   1aa2c:	8812      	ldrh	r2, [r2, #0]
   1aa2e:	4013      	ands	r3, r2
   1aa30:	b29b      	uxth	r3, r3
   1aa32:	0018      	movs	r0, r3
   1aa34:	46bd      	mov	sp, r7
   1aa36:	b006      	add	sp, #24
   1aa38:	bdb0      	pop	{r4, r5, r7, pc}
   1aa3a:	46c0      	nop			; (mov r8, r8)
   1aa3c:	0000ffff 	.word	0x0000ffff
   1aa40:	00038db8 	.word	0x00038db8
   1aa44:	0001a681 	.word	0x0001a681
   1aa48:	20000e18 	.word	0x20000e18
   1aa4c:	20000d74 	.word	0x20000d74
   1aa50:	e000e018 	.word	0xe000e018
   1aa54:	2000520c 	.word	0x2000520c
   1aa58:	0002aa99 	.word	0x0002aa99
   1aa5c:	0001aa79 	.word	0x0001aa79
   1aa60:	20000e24 	.word	0x20000e24
   1aa64:	0003372d 	.word	0x0003372d
   1aa68:	00033839 	.word	0x00033839
   1aa6c:	0001a239 	.word	0x0001a239
   1aa70:	00038df8 	.word	0x00038df8
   1aa74:	0001a83d 	.word	0x0001a83d

0001aa78 <prvTracePortGetTimeStamp>:
   1aa78:	b580      	push	{r7, lr}
   1aa7a:	b084      	sub	sp, #16
   1aa7c:	af00      	add	r7, sp, #0
   1aa7e:	6078      	str	r0, [r7, #4]
   1aa80:	2300      	movs	r3, #0
   1aa82:	60bb      	str	r3, [r7, #8]
   1aa84:	2300      	movs	r3, #0
   1aa86:	60fb      	str	r3, [r7, #12]
   1aa88:	4b2d      	ldr	r3, [pc, #180]	; (1ab40 <prvTracePortGetTimeStamp+0xc8>)
   1aa8a:	681b      	ldr	r3, [r3, #0]
   1aa8c:	2b01      	cmp	r3, #1
   1aa8e:	d107      	bne.n	1aaa0 <prvTracePortGetTimeStamp+0x28>
   1aa90:	687b      	ldr	r3, [r7, #4]
   1aa92:	2b00      	cmp	r3, #0
   1aa94:	d04f      	beq.n	1ab36 <prvTracePortGetTimeStamp+0xbe>
   1aa96:	4b2b      	ldr	r3, [pc, #172]	; (1ab44 <prvTracePortGetTimeStamp+0xcc>)
   1aa98:	681a      	ldr	r2, [r3, #0]
   1aa9a:	687b      	ldr	r3, [r7, #4]
   1aa9c:	601a      	str	r2, [r3, #0]
   1aa9e:	e04a      	b.n	1ab36 <prvTracePortGetTimeStamp+0xbe>
   1aaa0:	4b29      	ldr	r3, [pc, #164]	; (1ab48 <prvTracePortGetTimeStamp+0xd0>)
   1aaa2:	681a      	ldr	r2, [r3, #0]
   1aaa4:	4b29      	ldr	r3, [pc, #164]	; (1ab4c <prvTracePortGetTimeStamp+0xd4>)
   1aaa6:	681b      	ldr	r3, [r3, #0]
   1aaa8:	1ad3      	subs	r3, r2, r3
   1aaaa:	3301      	adds	r3, #1
   1aaac:	60bb      	str	r3, [r7, #8]
   1aaae:	4b28      	ldr	r3, [pc, #160]	; (1ab50 <prvTracePortGetTimeStamp+0xd8>)
   1aab0:	681a      	ldr	r2, [r3, #0]
   1aab2:	4b28      	ldr	r3, [pc, #160]	; (1ab54 <prvTracePortGetTimeStamp+0xdc>)
   1aab4:	681b      	ldr	r3, [r3, #0]
   1aab6:	1ad3      	subs	r3, r2, r3
   1aab8:	3b01      	subs	r3, #1
   1aaba:	2b00      	cmp	r3, #0
   1aabc:	db03      	blt.n	1aac6 <prvTracePortGetTimeStamp+0x4e>
   1aabe:	4b24      	ldr	r3, [pc, #144]	; (1ab50 <prvTracePortGetTimeStamp+0xd8>)
   1aac0:	681b      	ldr	r3, [r3, #0]
   1aac2:	60fb      	str	r3, [r7, #12]
   1aac4:	e002      	b.n	1aacc <prvTracePortGetTimeStamp+0x54>
   1aac6:	4b23      	ldr	r3, [pc, #140]	; (1ab54 <prvTracePortGetTimeStamp+0xdc>)
   1aac8:	681b      	ldr	r3, [r3, #0]
   1aaca:	60fb      	str	r3, [r7, #12]
   1aacc:	4b20      	ldr	r3, [pc, #128]	; (1ab50 <prvTracePortGetTimeStamp+0xd8>)
   1aace:	681b      	ldr	r3, [r3, #0]
   1aad0:	68fa      	ldr	r2, [r7, #12]
   1aad2:	429a      	cmp	r2, r3
   1aad4:	d107      	bne.n	1aae6 <prvTracePortGetTimeStamp+0x6e>
   1aad6:	4b20      	ldr	r3, [pc, #128]	; (1ab58 <prvTracePortGetTimeStamp+0xe0>)
   1aad8:	681b      	ldr	r3, [r3, #0]
   1aada:	68ba      	ldr	r2, [r7, #8]
   1aadc:	429a      	cmp	r2, r3
   1aade:	d202      	bcs.n	1aae6 <prvTracePortGetTimeStamp+0x6e>
   1aae0:	68fb      	ldr	r3, [r7, #12]
   1aae2:	3301      	adds	r3, #1
   1aae4:	60fb      	str	r3, [r7, #12]
   1aae6:	687b      	ldr	r3, [r7, #4]
   1aae8:	2b00      	cmp	r3, #0
   1aaea:	d016      	beq.n	1ab1a <prvTracePortGetTimeStamp+0xa2>
   1aaec:	4b16      	ldr	r3, [pc, #88]	; (1ab48 <prvTracePortGetTimeStamp+0xd0>)
   1aaee:	681b      	ldr	r3, [r3, #0]
   1aaf0:	3301      	adds	r3, #1
   1aaf2:	089b      	lsrs	r3, r3, #2
   1aaf4:	68fa      	ldr	r2, [r7, #12]
   1aaf6:	435a      	muls	r2, r3
   1aaf8:	4b12      	ldr	r3, [pc, #72]	; (1ab44 <prvTracePortGetTimeStamp+0xcc>)
   1aafa:	601a      	str	r2, [r3, #0]
   1aafc:	4b12      	ldr	r3, [pc, #72]	; (1ab48 <prvTracePortGetTimeStamp+0xd0>)
   1aafe:	681b      	ldr	r3, [r3, #0]
   1ab00:	3301      	adds	r3, #1
   1ab02:	2203      	movs	r2, #3
   1ab04:	4013      	ands	r3, r2
   1ab06:	68fa      	ldr	r2, [r7, #12]
   1ab08:	435a      	muls	r2, r3
   1ab0a:	68bb      	ldr	r3, [r7, #8]
   1ab0c:	18d3      	adds	r3, r2, r3
   1ab0e:	089a      	lsrs	r2, r3, #2
   1ab10:	4b0c      	ldr	r3, [pc, #48]	; (1ab44 <prvTracePortGetTimeStamp+0xcc>)
   1ab12:	681b      	ldr	r3, [r3, #0]
   1ab14:	18d2      	adds	r2, r2, r3
   1ab16:	4b0b      	ldr	r3, [pc, #44]	; (1ab44 <prvTracePortGetTimeStamp+0xcc>)
   1ab18:	601a      	str	r2, [r3, #0]
   1ab1a:	4b0d      	ldr	r3, [pc, #52]	; (1ab50 <prvTracePortGetTimeStamp+0xd8>)
   1ab1c:	68fa      	ldr	r2, [r7, #12]
   1ab1e:	601a      	str	r2, [r3, #0]
   1ab20:	687b      	ldr	r3, [r7, #4]
   1ab22:	2b00      	cmp	r3, #0
   1ab24:	d003      	beq.n	1ab2e <prvTracePortGetTimeStamp+0xb6>
   1ab26:	4b07      	ldr	r3, [pc, #28]	; (1ab44 <prvTracePortGetTimeStamp+0xcc>)
   1ab28:	681a      	ldr	r2, [r3, #0]
   1ab2a:	687b      	ldr	r3, [r7, #4]
   1ab2c:	601a      	str	r2, [r3, #0]
   1ab2e:	4b0a      	ldr	r3, [pc, #40]	; (1ab58 <prvTracePortGetTimeStamp+0xe0>)
   1ab30:	68ba      	ldr	r2, [r7, #8]
   1ab32:	601a      	str	r2, [r3, #0]
   1ab34:	e000      	b.n	1ab38 <prvTracePortGetTimeStamp+0xc0>
   1ab36:	46c0      	nop			; (mov r8, r8)
   1ab38:	46bd      	mov	sp, r7
   1ab3a:	b004      	add	sp, #16
   1ab3c:	bd80      	pop	{r7, pc}
   1ab3e:	46c0      	nop			; (mov r8, r8)
   1ab40:	20000d64 	.word	0x20000d64
   1ab44:	20000d68 	.word	0x20000d68
   1ab48:	e000e014 	.word	0xe000e014
   1ab4c:	e000e018 	.word	0xe000e018
   1ab50:	20000e28 	.word	0x20000e28
   1ab54:	20000d60 	.word	0x20000d60
   1ab58:	20000e2c 	.word	0x20000e2c

0001ab5c <vListInitialise>:
   1ab5c:	b580      	push	{r7, lr}
   1ab5e:	b082      	sub	sp, #8
   1ab60:	af00      	add	r7, sp, #0
   1ab62:	6078      	str	r0, [r7, #4]
   1ab64:	687b      	ldr	r3, [r7, #4]
   1ab66:	3308      	adds	r3, #8
   1ab68:	001a      	movs	r2, r3
   1ab6a:	687b      	ldr	r3, [r7, #4]
   1ab6c:	605a      	str	r2, [r3, #4]
   1ab6e:	687b      	ldr	r3, [r7, #4]
   1ab70:	2201      	movs	r2, #1
   1ab72:	4252      	negs	r2, r2
   1ab74:	609a      	str	r2, [r3, #8]
   1ab76:	687b      	ldr	r3, [r7, #4]
   1ab78:	3308      	adds	r3, #8
   1ab7a:	001a      	movs	r2, r3
   1ab7c:	687b      	ldr	r3, [r7, #4]
   1ab7e:	60da      	str	r2, [r3, #12]
   1ab80:	687b      	ldr	r3, [r7, #4]
   1ab82:	3308      	adds	r3, #8
   1ab84:	001a      	movs	r2, r3
   1ab86:	687b      	ldr	r3, [r7, #4]
   1ab88:	611a      	str	r2, [r3, #16]
   1ab8a:	687b      	ldr	r3, [r7, #4]
   1ab8c:	2200      	movs	r2, #0
   1ab8e:	601a      	str	r2, [r3, #0]
   1ab90:	46c0      	nop			; (mov r8, r8)
   1ab92:	46bd      	mov	sp, r7
   1ab94:	b002      	add	sp, #8
   1ab96:	bd80      	pop	{r7, pc}

0001ab98 <vListInitialiseItem>:
   1ab98:	b580      	push	{r7, lr}
   1ab9a:	b082      	sub	sp, #8
   1ab9c:	af00      	add	r7, sp, #0
   1ab9e:	6078      	str	r0, [r7, #4]
   1aba0:	687b      	ldr	r3, [r7, #4]
   1aba2:	2200      	movs	r2, #0
   1aba4:	611a      	str	r2, [r3, #16]
   1aba6:	46c0      	nop			; (mov r8, r8)
   1aba8:	46bd      	mov	sp, r7
   1abaa:	b002      	add	sp, #8
   1abac:	bd80      	pop	{r7, pc}

0001abae <vListInsertEnd>:
   1abae:	b580      	push	{r7, lr}
   1abb0:	b084      	sub	sp, #16
   1abb2:	af00      	add	r7, sp, #0
   1abb4:	6078      	str	r0, [r7, #4]
   1abb6:	6039      	str	r1, [r7, #0]
   1abb8:	687b      	ldr	r3, [r7, #4]
   1abba:	685b      	ldr	r3, [r3, #4]
   1abbc:	60fb      	str	r3, [r7, #12]
   1abbe:	683b      	ldr	r3, [r7, #0]
   1abc0:	68fa      	ldr	r2, [r7, #12]
   1abc2:	605a      	str	r2, [r3, #4]
   1abc4:	68fb      	ldr	r3, [r7, #12]
   1abc6:	689a      	ldr	r2, [r3, #8]
   1abc8:	683b      	ldr	r3, [r7, #0]
   1abca:	609a      	str	r2, [r3, #8]
   1abcc:	68fb      	ldr	r3, [r7, #12]
   1abce:	689b      	ldr	r3, [r3, #8]
   1abd0:	683a      	ldr	r2, [r7, #0]
   1abd2:	605a      	str	r2, [r3, #4]
   1abd4:	68fb      	ldr	r3, [r7, #12]
   1abd6:	683a      	ldr	r2, [r7, #0]
   1abd8:	609a      	str	r2, [r3, #8]
   1abda:	683b      	ldr	r3, [r7, #0]
   1abdc:	687a      	ldr	r2, [r7, #4]
   1abde:	611a      	str	r2, [r3, #16]
   1abe0:	687b      	ldr	r3, [r7, #4]
   1abe2:	681b      	ldr	r3, [r3, #0]
   1abe4:	1c5a      	adds	r2, r3, #1
   1abe6:	687b      	ldr	r3, [r7, #4]
   1abe8:	601a      	str	r2, [r3, #0]
   1abea:	46c0      	nop			; (mov r8, r8)
   1abec:	46bd      	mov	sp, r7
   1abee:	b004      	add	sp, #16
   1abf0:	bd80      	pop	{r7, pc}

0001abf2 <vListInsert>:
   1abf2:	b580      	push	{r7, lr}
   1abf4:	b084      	sub	sp, #16
   1abf6:	af00      	add	r7, sp, #0
   1abf8:	6078      	str	r0, [r7, #4]
   1abfa:	6039      	str	r1, [r7, #0]
   1abfc:	683b      	ldr	r3, [r7, #0]
   1abfe:	681b      	ldr	r3, [r3, #0]
   1ac00:	60bb      	str	r3, [r7, #8]
   1ac02:	68bb      	ldr	r3, [r7, #8]
   1ac04:	3301      	adds	r3, #1
   1ac06:	d103      	bne.n	1ac10 <vListInsert+0x1e>
   1ac08:	687b      	ldr	r3, [r7, #4]
   1ac0a:	691b      	ldr	r3, [r3, #16]
   1ac0c:	60fb      	str	r3, [r7, #12]
   1ac0e:	e00c      	b.n	1ac2a <vListInsert+0x38>
   1ac10:	687b      	ldr	r3, [r7, #4]
   1ac12:	3308      	adds	r3, #8
   1ac14:	60fb      	str	r3, [r7, #12]
   1ac16:	e002      	b.n	1ac1e <vListInsert+0x2c>
   1ac18:	68fb      	ldr	r3, [r7, #12]
   1ac1a:	685b      	ldr	r3, [r3, #4]
   1ac1c:	60fb      	str	r3, [r7, #12]
   1ac1e:	68fb      	ldr	r3, [r7, #12]
   1ac20:	685b      	ldr	r3, [r3, #4]
   1ac22:	681a      	ldr	r2, [r3, #0]
   1ac24:	68bb      	ldr	r3, [r7, #8]
   1ac26:	429a      	cmp	r2, r3
   1ac28:	d9f6      	bls.n	1ac18 <vListInsert+0x26>
   1ac2a:	68fb      	ldr	r3, [r7, #12]
   1ac2c:	685a      	ldr	r2, [r3, #4]
   1ac2e:	683b      	ldr	r3, [r7, #0]
   1ac30:	605a      	str	r2, [r3, #4]
   1ac32:	683b      	ldr	r3, [r7, #0]
   1ac34:	685b      	ldr	r3, [r3, #4]
   1ac36:	683a      	ldr	r2, [r7, #0]
   1ac38:	609a      	str	r2, [r3, #8]
   1ac3a:	683b      	ldr	r3, [r7, #0]
   1ac3c:	68fa      	ldr	r2, [r7, #12]
   1ac3e:	609a      	str	r2, [r3, #8]
   1ac40:	68fb      	ldr	r3, [r7, #12]
   1ac42:	683a      	ldr	r2, [r7, #0]
   1ac44:	605a      	str	r2, [r3, #4]
   1ac46:	683b      	ldr	r3, [r7, #0]
   1ac48:	687a      	ldr	r2, [r7, #4]
   1ac4a:	611a      	str	r2, [r3, #16]
   1ac4c:	687b      	ldr	r3, [r7, #4]
   1ac4e:	681b      	ldr	r3, [r3, #0]
   1ac50:	1c5a      	adds	r2, r3, #1
   1ac52:	687b      	ldr	r3, [r7, #4]
   1ac54:	601a      	str	r2, [r3, #0]
   1ac56:	46c0      	nop			; (mov r8, r8)
   1ac58:	46bd      	mov	sp, r7
   1ac5a:	b004      	add	sp, #16
   1ac5c:	bd80      	pop	{r7, pc}

0001ac5e <uxListRemove>:
   1ac5e:	b580      	push	{r7, lr}
   1ac60:	b084      	sub	sp, #16
   1ac62:	af00      	add	r7, sp, #0
   1ac64:	6078      	str	r0, [r7, #4]
   1ac66:	687b      	ldr	r3, [r7, #4]
   1ac68:	691b      	ldr	r3, [r3, #16]
   1ac6a:	60fb      	str	r3, [r7, #12]
   1ac6c:	687b      	ldr	r3, [r7, #4]
   1ac6e:	685b      	ldr	r3, [r3, #4]
   1ac70:	687a      	ldr	r2, [r7, #4]
   1ac72:	6892      	ldr	r2, [r2, #8]
   1ac74:	609a      	str	r2, [r3, #8]
   1ac76:	687b      	ldr	r3, [r7, #4]
   1ac78:	689b      	ldr	r3, [r3, #8]
   1ac7a:	687a      	ldr	r2, [r7, #4]
   1ac7c:	6852      	ldr	r2, [r2, #4]
   1ac7e:	605a      	str	r2, [r3, #4]
   1ac80:	68fb      	ldr	r3, [r7, #12]
   1ac82:	685a      	ldr	r2, [r3, #4]
   1ac84:	687b      	ldr	r3, [r7, #4]
   1ac86:	429a      	cmp	r2, r3
   1ac88:	d103      	bne.n	1ac92 <uxListRemove+0x34>
   1ac8a:	687b      	ldr	r3, [r7, #4]
   1ac8c:	689a      	ldr	r2, [r3, #8]
   1ac8e:	68fb      	ldr	r3, [r7, #12]
   1ac90:	605a      	str	r2, [r3, #4]
   1ac92:	687b      	ldr	r3, [r7, #4]
   1ac94:	2200      	movs	r2, #0
   1ac96:	611a      	str	r2, [r3, #16]
   1ac98:	68fb      	ldr	r3, [r7, #12]
   1ac9a:	681b      	ldr	r3, [r3, #0]
   1ac9c:	1e5a      	subs	r2, r3, #1
   1ac9e:	68fb      	ldr	r3, [r7, #12]
   1aca0:	601a      	str	r2, [r3, #0]
   1aca2:	68fb      	ldr	r3, [r7, #12]
   1aca4:	681b      	ldr	r3, [r3, #0]
   1aca6:	0018      	movs	r0, r3
   1aca8:	46bd      	mov	sp, r7
   1acaa:	b004      	add	sp, #16
   1acac:	bd80      	pop	{r7, pc}
	...

0001acb0 <pxPortInitialiseStack>:
   1acb0:	b580      	push	{r7, lr}
   1acb2:	b084      	sub	sp, #16
   1acb4:	af00      	add	r7, sp, #0
   1acb6:	60f8      	str	r0, [r7, #12]
   1acb8:	60b9      	str	r1, [r7, #8]
   1acba:	607a      	str	r2, [r7, #4]
   1acbc:	68fb      	ldr	r3, [r7, #12]
   1acbe:	3b04      	subs	r3, #4
   1acc0:	60fb      	str	r3, [r7, #12]
   1acc2:	68fb      	ldr	r3, [r7, #12]
   1acc4:	2280      	movs	r2, #128	; 0x80
   1acc6:	0452      	lsls	r2, r2, #17
   1acc8:	601a      	str	r2, [r3, #0]
   1acca:	68fb      	ldr	r3, [r7, #12]
   1accc:	3b04      	subs	r3, #4
   1acce:	60fb      	str	r3, [r7, #12]
   1acd0:	68ba      	ldr	r2, [r7, #8]
   1acd2:	68fb      	ldr	r3, [r7, #12]
   1acd4:	601a      	str	r2, [r3, #0]
   1acd6:	68fb      	ldr	r3, [r7, #12]
   1acd8:	3b04      	subs	r3, #4
   1acda:	60fb      	str	r3, [r7, #12]
   1acdc:	4a08      	ldr	r2, [pc, #32]	; (1ad00 <pxPortInitialiseStack+0x50>)
   1acde:	68fb      	ldr	r3, [r7, #12]
   1ace0:	601a      	str	r2, [r3, #0]
   1ace2:	68fb      	ldr	r3, [r7, #12]
   1ace4:	3b14      	subs	r3, #20
   1ace6:	60fb      	str	r3, [r7, #12]
   1ace8:	687a      	ldr	r2, [r7, #4]
   1acea:	68fb      	ldr	r3, [r7, #12]
   1acec:	601a      	str	r2, [r3, #0]
   1acee:	68fb      	ldr	r3, [r7, #12]
   1acf0:	3b20      	subs	r3, #32
   1acf2:	60fb      	str	r3, [r7, #12]
   1acf4:	68fb      	ldr	r3, [r7, #12]
   1acf6:	0018      	movs	r0, r3
   1acf8:	46bd      	mov	sp, r7
   1acfa:	b004      	add	sp, #16
   1acfc:	bd80      	pop	{r7, pc}
   1acfe:	46c0      	nop			; (mov r8, r8)
   1ad00:	0001ad05 	.word	0x0001ad05

0001ad04 <prvTaskExitError>:
   1ad04:	b580      	push	{r7, lr}
   1ad06:	b082      	sub	sp, #8
   1ad08:	af00      	add	r7, sp, #0
   1ad0a:	2300      	movs	r3, #0
   1ad0c:	607b      	str	r3, [r7, #4]
   1ad0e:	4b07      	ldr	r3, [pc, #28]	; (1ad2c <prvTaskExitError+0x28>)
   1ad10:	681b      	ldr	r3, [r3, #0]
   1ad12:	3301      	adds	r3, #1
   1ad14:	d001      	beq.n	1ad1a <prvTaskExitError+0x16>
   1ad16:	b672      	cpsid	i
   1ad18:	e7fe      	b.n	1ad18 <prvTaskExitError+0x14>
   1ad1a:	b672      	cpsid	i
   1ad1c:	46c0      	nop			; (mov r8, r8)
   1ad1e:	687b      	ldr	r3, [r7, #4]
   1ad20:	2b00      	cmp	r3, #0
   1ad22:	d0fc      	beq.n	1ad1e <prvTaskExitError+0x1a>
   1ad24:	46c0      	nop			; (mov r8, r8)
   1ad26:	46bd      	mov	sp, r7
   1ad28:	b002      	add	sp, #8
   1ad2a:	bd80      	pop	{r7, pc}
   1ad2c:	20000108 	.word	0x20000108

0001ad30 <SVC_Handler>:
   1ad30:	b580      	push	{r7, lr}
   1ad32:	af00      	add	r7, sp, #0
   1ad34:	46c0      	nop			; (mov r8, r8)
   1ad36:	46bd      	mov	sp, r7
   1ad38:	bd80      	pop	{r7, pc}
   1ad3a:	0000      	movs	r0, r0
   1ad3c:	0000      	movs	r0, r0
	...

0001ad40 <vPortStartFirstTask>:
   1ad40:	4a0b      	ldr	r2, [pc, #44]	; (1ad70 <pxCurrentTCBConst2>)
   1ad42:	6813      	ldr	r3, [r2, #0]
   1ad44:	6818      	ldr	r0, [r3, #0]
   1ad46:	3020      	adds	r0, #32
   1ad48:	f380 8809 	msr	PSP, r0
   1ad4c:	2002      	movs	r0, #2
   1ad4e:	f380 8814 	msr	CONTROL, r0
   1ad52:	f3bf 8f6f 	isb	sy
   1ad56:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   1ad58:	46ae      	mov	lr, r5
   1ad5a:	bc08      	pop	{r3}
   1ad5c:	bc04      	pop	{r2}
   1ad5e:	b662      	cpsie	i
   1ad60:	4718      	bx	r3
   1ad62:	46c0      	nop			; (mov r8, r8)
   1ad64:	46c0      	nop			; (mov r8, r8)
   1ad66:	46c0      	nop			; (mov r8, r8)
   1ad68:	46c0      	nop			; (mov r8, r8)
   1ad6a:	46c0      	nop			; (mov r8, r8)
   1ad6c:	46c0      	nop			; (mov r8, r8)
   1ad6e:	46c0      	nop			; (mov r8, r8)

0001ad70 <pxCurrentTCBConst2>:
   1ad70:	20003d18 	.word	0x20003d18
   1ad74:	46c0      	nop			; (mov r8, r8)
   1ad76:	46c0      	nop			; (mov r8, r8)

0001ad78 <xPortStartScheduler>:
   1ad78:	b580      	push	{r7, lr}
   1ad7a:	af00      	add	r7, sp, #0
   1ad7c:	4b0e      	ldr	r3, [pc, #56]	; (1adb8 <xPortStartScheduler+0x40>)
   1ad7e:	4a0e      	ldr	r2, [pc, #56]	; (1adb8 <xPortStartScheduler+0x40>)
   1ad80:	6812      	ldr	r2, [r2, #0]
   1ad82:	21ff      	movs	r1, #255	; 0xff
   1ad84:	0409      	lsls	r1, r1, #16
   1ad86:	430a      	orrs	r2, r1
   1ad88:	601a      	str	r2, [r3, #0]
   1ad8a:	4b0b      	ldr	r3, [pc, #44]	; (1adb8 <xPortStartScheduler+0x40>)
   1ad8c:	4a0a      	ldr	r2, [pc, #40]	; (1adb8 <xPortStartScheduler+0x40>)
   1ad8e:	6812      	ldr	r2, [r2, #0]
   1ad90:	21ff      	movs	r1, #255	; 0xff
   1ad92:	0609      	lsls	r1, r1, #24
   1ad94:	430a      	orrs	r2, r1
   1ad96:	601a      	str	r2, [r3, #0]
   1ad98:	4b08      	ldr	r3, [pc, #32]	; (1adbc <xPortStartScheduler+0x44>)
   1ad9a:	4798      	blx	r3
   1ad9c:	4b08      	ldr	r3, [pc, #32]	; (1adc0 <xPortStartScheduler+0x48>)
   1ad9e:	2200      	movs	r2, #0
   1ada0:	601a      	str	r2, [r3, #0]
   1ada2:	4b08      	ldr	r3, [pc, #32]	; (1adc4 <xPortStartScheduler+0x4c>)
   1ada4:	4798      	blx	r3
   1ada6:	4b08      	ldr	r3, [pc, #32]	; (1adc8 <xPortStartScheduler+0x50>)
   1ada8:	4798      	blx	r3
   1adaa:	4b08      	ldr	r3, [pc, #32]	; (1adcc <xPortStartScheduler+0x54>)
   1adac:	4798      	blx	r3
   1adae:	2300      	movs	r3, #0
   1adb0:	0018      	movs	r0, r3
   1adb2:	46bd      	mov	sp, r7
   1adb4:	bd80      	pop	{r7, pc}
   1adb6:	46c0      	nop			; (mov r8, r8)
   1adb8:	e000ed20 	.word	0xe000ed20
   1adbc:	0001aed9 	.word	0x0001aed9
   1adc0:	20000108 	.word	0x20000108
   1adc4:	0001ad41 	.word	0x0001ad41
   1adc8:	0001d439 	.word	0x0001d439
   1adcc:	0001ad05 	.word	0x0001ad05

0001add0 <vPortYield>:
   1add0:	b580      	push	{r7, lr}
   1add2:	af00      	add	r7, sp, #0
   1add4:	4b03      	ldr	r3, [pc, #12]	; (1ade4 <vPortYield+0x14>)
   1add6:	2280      	movs	r2, #128	; 0x80
   1add8:	0552      	lsls	r2, r2, #21
   1adda:	601a      	str	r2, [r3, #0]
   1addc:	46c0      	nop			; (mov r8, r8)
   1adde:	46bd      	mov	sp, r7
   1ade0:	bd80      	pop	{r7, pc}
   1ade2:	46c0      	nop			; (mov r8, r8)
   1ade4:	e000ed04 	.word	0xe000ed04

0001ade8 <vPortEnterCritical>:
   1ade8:	b580      	push	{r7, lr}
   1adea:	af00      	add	r7, sp, #0
   1adec:	b672      	cpsid	i
   1adee:	4b06      	ldr	r3, [pc, #24]	; (1ae08 <vPortEnterCritical+0x20>)
   1adf0:	681b      	ldr	r3, [r3, #0]
   1adf2:	1c5a      	adds	r2, r3, #1
   1adf4:	4b04      	ldr	r3, [pc, #16]	; (1ae08 <vPortEnterCritical+0x20>)
   1adf6:	601a      	str	r2, [r3, #0]
   1adf8:	f3bf 8f4f 	dsb	sy
   1adfc:	f3bf 8f6f 	isb	sy
   1ae00:	46c0      	nop			; (mov r8, r8)
   1ae02:	46bd      	mov	sp, r7
   1ae04:	bd80      	pop	{r7, pc}
   1ae06:	46c0      	nop			; (mov r8, r8)
   1ae08:	20000108 	.word	0x20000108

0001ae0c <vPortExitCritical>:
   1ae0c:	b580      	push	{r7, lr}
   1ae0e:	af00      	add	r7, sp, #0
   1ae10:	4b09      	ldr	r3, [pc, #36]	; (1ae38 <vPortExitCritical+0x2c>)
   1ae12:	681b      	ldr	r3, [r3, #0]
   1ae14:	2b00      	cmp	r3, #0
   1ae16:	d101      	bne.n	1ae1c <vPortExitCritical+0x10>
   1ae18:	b672      	cpsid	i
   1ae1a:	e7fe      	b.n	1ae1a <vPortExitCritical+0xe>
   1ae1c:	4b06      	ldr	r3, [pc, #24]	; (1ae38 <vPortExitCritical+0x2c>)
   1ae1e:	681b      	ldr	r3, [r3, #0]
   1ae20:	1e5a      	subs	r2, r3, #1
   1ae22:	4b05      	ldr	r3, [pc, #20]	; (1ae38 <vPortExitCritical+0x2c>)
   1ae24:	601a      	str	r2, [r3, #0]
   1ae26:	4b04      	ldr	r3, [pc, #16]	; (1ae38 <vPortExitCritical+0x2c>)
   1ae28:	681b      	ldr	r3, [r3, #0]
   1ae2a:	2b00      	cmp	r3, #0
   1ae2c:	d100      	bne.n	1ae30 <vPortExitCritical+0x24>
   1ae2e:	b662      	cpsie	i
   1ae30:	46c0      	nop			; (mov r8, r8)
   1ae32:	46bd      	mov	sp, r7
   1ae34:	bd80      	pop	{r7, pc}
   1ae36:	46c0      	nop			; (mov r8, r8)
   1ae38:	20000108 	.word	0x20000108

0001ae3c <ulSetInterruptMaskFromISR>:
   1ae3c:	f3ef 8010 	mrs	r0, PRIMASK
   1ae40:	b672      	cpsid	i
   1ae42:	4770      	bx	lr
   1ae44:	46c0      	nop			; (mov r8, r8)
   1ae46:	0018      	movs	r0, r3

0001ae48 <vClearInterruptMaskFromISR>:
   1ae48:	f380 8810 	msr	PRIMASK, r0
   1ae4c:	4770      	bx	lr
   1ae4e:	46c0      	nop			; (mov r8, r8)

0001ae50 <PendSV_Handler>:
   1ae50:	f3ef 8009 	mrs	r0, PSP
   1ae54:	4b0e      	ldr	r3, [pc, #56]	; (1ae90 <pxCurrentTCBConst>)
   1ae56:	681a      	ldr	r2, [r3, #0]
   1ae58:	3820      	subs	r0, #32
   1ae5a:	6010      	str	r0, [r2, #0]
   1ae5c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1ae5e:	4644      	mov	r4, r8
   1ae60:	464d      	mov	r5, r9
   1ae62:	4656      	mov	r6, sl
   1ae64:	465f      	mov	r7, fp
   1ae66:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1ae68:	b508      	push	{r3, lr}
   1ae6a:	b672      	cpsid	i
   1ae6c:	f002 fae4 	bl	1d438 <vTaskSwitchContext>
   1ae70:	b662      	cpsie	i
   1ae72:	bc0c      	pop	{r2, r3}
   1ae74:	6811      	ldr	r1, [r2, #0]
   1ae76:	6808      	ldr	r0, [r1, #0]
   1ae78:	3010      	adds	r0, #16
   1ae7a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1ae7c:	46a0      	mov	r8, r4
   1ae7e:	46a9      	mov	r9, r5
   1ae80:	46b2      	mov	sl, r6
   1ae82:	46bb      	mov	fp, r7
   1ae84:	f380 8809 	msr	PSP, r0
   1ae88:	3820      	subs	r0, #32
   1ae8a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1ae8c:	4718      	bx	r3
   1ae8e:	46c0      	nop			; (mov r8, r8)

0001ae90 <pxCurrentTCBConst>:
   1ae90:	20003d18 	.word	0x20003d18
   1ae94:	46c0      	nop			; (mov r8, r8)
   1ae96:	46c0      	nop			; (mov r8, r8)

0001ae98 <SysTick_Handler>:
   1ae98:	b580      	push	{r7, lr}
   1ae9a:	b082      	sub	sp, #8
   1ae9c:	af00      	add	r7, sp, #0
   1ae9e:	4b0a      	ldr	r3, [pc, #40]	; (1aec8 <SysTick_Handler+0x30>)
   1aea0:	4798      	blx	r3
   1aea2:	0003      	movs	r3, r0
   1aea4:	607b      	str	r3, [r7, #4]
   1aea6:	4b09      	ldr	r3, [pc, #36]	; (1aecc <SysTick_Handler+0x34>)
   1aea8:	4798      	blx	r3
   1aeaa:	1e03      	subs	r3, r0, #0
   1aeac:	d003      	beq.n	1aeb6 <SysTick_Handler+0x1e>
   1aeae:	4b08      	ldr	r3, [pc, #32]	; (1aed0 <SysTick_Handler+0x38>)
   1aeb0:	2280      	movs	r2, #128	; 0x80
   1aeb2:	0552      	lsls	r2, r2, #21
   1aeb4:	601a      	str	r2, [r3, #0]
   1aeb6:	687b      	ldr	r3, [r7, #4]
   1aeb8:	0018      	movs	r0, r3
   1aeba:	4b06      	ldr	r3, [pc, #24]	; (1aed4 <SysTick_Handler+0x3c>)
   1aebc:	4798      	blx	r3
   1aebe:	46c0      	nop			; (mov r8, r8)
   1aec0:	46bd      	mov	sp, r7
   1aec2:	b002      	add	sp, #8
   1aec4:	bd80      	pop	{r7, pc}
   1aec6:	46c0      	nop			; (mov r8, r8)
   1aec8:	0001ae3d 	.word	0x0001ae3d
   1aecc:	0001d249 	.word	0x0001d249
   1aed0:	e000ed04 	.word	0xe000ed04
   1aed4:	0001ae49 	.word	0x0001ae49

0001aed8 <prvSetupTimerInterrupt>:
   1aed8:	b5b0      	push	{r4, r5, r7, lr}
   1aeda:	af00      	add	r7, sp, #0
   1aedc:	4b0b      	ldr	r3, [pc, #44]	; (1af0c <prvSetupTimerInterrupt+0x34>)
   1aede:	2200      	movs	r2, #0
   1aee0:	601a      	str	r2, [r3, #0]
   1aee2:	4b0b      	ldr	r3, [pc, #44]	; (1af10 <prvSetupTimerInterrupt+0x38>)
   1aee4:	2200      	movs	r2, #0
   1aee6:	601a      	str	r2, [r3, #0]
   1aee8:	4c0a      	ldr	r4, [pc, #40]	; (1af14 <prvSetupTimerInterrupt+0x3c>)
   1aeea:	2000      	movs	r0, #0
   1aeec:	4b0a      	ldr	r3, [pc, #40]	; (1af18 <prvSetupTimerInterrupt+0x40>)
   1aeee:	4798      	blx	r3
   1aef0:	4b0a      	ldr	r3, [pc, #40]	; (1af1c <prvSetupTimerInterrupt+0x44>)
   1aef2:	22fa      	movs	r2, #250	; 0xfa
   1aef4:	0091      	lsls	r1, r2, #2
   1aef6:	4798      	blx	r3
   1aef8:	0003      	movs	r3, r0
   1aefa:	3b01      	subs	r3, #1
   1aefc:	6023      	str	r3, [r4, #0]
   1aefe:	4b03      	ldr	r3, [pc, #12]	; (1af0c <prvSetupTimerInterrupt+0x34>)
   1af00:	2207      	movs	r2, #7
   1af02:	601a      	str	r2, [r3, #0]
   1af04:	46c0      	nop			; (mov r8, r8)
   1af06:	46bd      	mov	sp, r7
   1af08:	bdb0      	pop	{r4, r5, r7, pc}
   1af0a:	46c0      	nop			; (mov r8, r8)
   1af0c:	e000e010 	.word	0xe000e010
   1af10:	e000e018 	.word	0xe000e018
   1af14:	e000e014 	.word	0xe000e014
   1af18:	0002aa99 	.word	0x0002aa99
   1af1c:	0003372d 	.word	0x0003372d

0001af20 <pvPortMalloc>:
   1af20:	b580      	push	{r7, lr}
   1af22:	b084      	sub	sp, #16
   1af24:	af00      	add	r7, sp, #0
   1af26:	6078      	str	r0, [r7, #4]
   1af28:	2300      	movs	r3, #0
   1af2a:	60fb      	str	r3, [r7, #12]
   1af2c:	687b      	ldr	r3, [r7, #4]
   1af2e:	2207      	movs	r2, #7
   1af30:	4013      	ands	r3, r2
   1af32:	d004      	beq.n	1af3e <pvPortMalloc+0x1e>
   1af34:	687b      	ldr	r3, [r7, #4]
   1af36:	2207      	movs	r2, #7
   1af38:	4393      	bics	r3, r2
   1af3a:	3308      	adds	r3, #8
   1af3c:	607b      	str	r3, [r7, #4]
   1af3e:	4b21      	ldr	r3, [pc, #132]	; (1afc4 <pvPortMalloc+0xa4>)
   1af40:	4798      	blx	r3
   1af42:	4b21      	ldr	r3, [pc, #132]	; (1afc8 <pvPortMalloc+0xa8>)
   1af44:	681b      	ldr	r3, [r3, #0]
   1af46:	2b00      	cmp	r3, #0
   1af48:	d105      	bne.n	1af56 <pvPortMalloc+0x36>
   1af4a:	4b20      	ldr	r3, [pc, #128]	; (1afcc <pvPortMalloc+0xac>)
   1af4c:	2207      	movs	r2, #7
   1af4e:	4393      	bics	r3, r2
   1af50:	001a      	movs	r2, r3
   1af52:	4b1d      	ldr	r3, [pc, #116]	; (1afc8 <pvPortMalloc+0xa8>)
   1af54:	601a      	str	r2, [r3, #0]
   1af56:	4b1e      	ldr	r3, [pc, #120]	; (1afd0 <pvPortMalloc+0xb0>)
   1af58:	681a      	ldr	r2, [r3, #0]
   1af5a:	687b      	ldr	r3, [r7, #4]
   1af5c:	18d3      	adds	r3, r2, r3
   1af5e:	4a1d      	ldr	r2, [pc, #116]	; (1afd4 <pvPortMalloc+0xb4>)
   1af60:	4293      	cmp	r3, r2
   1af62:	d813      	bhi.n	1af8c <pvPortMalloc+0x6c>
   1af64:	4b1a      	ldr	r3, [pc, #104]	; (1afd0 <pvPortMalloc+0xb0>)
   1af66:	681a      	ldr	r2, [r3, #0]
   1af68:	687b      	ldr	r3, [r7, #4]
   1af6a:	18d2      	adds	r2, r2, r3
   1af6c:	4b18      	ldr	r3, [pc, #96]	; (1afd0 <pvPortMalloc+0xb0>)
   1af6e:	681b      	ldr	r3, [r3, #0]
   1af70:	429a      	cmp	r2, r3
   1af72:	d90b      	bls.n	1af8c <pvPortMalloc+0x6c>
   1af74:	4b14      	ldr	r3, [pc, #80]	; (1afc8 <pvPortMalloc+0xa8>)
   1af76:	681a      	ldr	r2, [r3, #0]
   1af78:	4b15      	ldr	r3, [pc, #84]	; (1afd0 <pvPortMalloc+0xb0>)
   1af7a:	681b      	ldr	r3, [r3, #0]
   1af7c:	18d3      	adds	r3, r2, r3
   1af7e:	60fb      	str	r3, [r7, #12]
   1af80:	4b13      	ldr	r3, [pc, #76]	; (1afd0 <pvPortMalloc+0xb0>)
   1af82:	681a      	ldr	r2, [r3, #0]
   1af84:	687b      	ldr	r3, [r7, #4]
   1af86:	18d2      	adds	r2, r2, r3
   1af88:	4b11      	ldr	r3, [pc, #68]	; (1afd0 <pvPortMalloc+0xb0>)
   1af8a:	601a      	str	r2, [r3, #0]
   1af8c:	68fb      	ldr	r3, [r7, #12]
   1af8e:	2b00      	cmp	r3, #0
   1af90:	d006      	beq.n	1afa0 <pvPortMalloc+0x80>
   1af92:	68fb      	ldr	r3, [r7, #12]
   1af94:	687a      	ldr	r2, [r7, #4]
   1af96:	0019      	movs	r1, r3
   1af98:	2094      	movs	r0, #148	; 0x94
   1af9a:	4b0f      	ldr	r3, [pc, #60]	; (1afd8 <pvPortMalloc+0xb8>)
   1af9c:	4798      	blx	r3
   1af9e:	e005      	b.n	1afac <pvPortMalloc+0x8c>
   1afa0:	68fb      	ldr	r3, [r7, #12]
   1afa2:	687a      	ldr	r2, [r7, #4]
   1afa4:	0019      	movs	r1, r3
   1afa6:	20e8      	movs	r0, #232	; 0xe8
   1afa8:	4b0b      	ldr	r3, [pc, #44]	; (1afd8 <pvPortMalloc+0xb8>)
   1afaa:	4798      	blx	r3
   1afac:	4b0b      	ldr	r3, [pc, #44]	; (1afdc <pvPortMalloc+0xbc>)
   1afae:	4798      	blx	r3
   1afb0:	68fb      	ldr	r3, [r7, #12]
   1afb2:	2b00      	cmp	r3, #0
   1afb4:	d101      	bne.n	1afba <pvPortMalloc+0x9a>
   1afb6:	4b0a      	ldr	r3, [pc, #40]	; (1afe0 <pvPortMalloc+0xc0>)
   1afb8:	4798      	blx	r3
   1afba:	68fb      	ldr	r3, [r7, #12]
   1afbc:	0018      	movs	r0, r3
   1afbe:	46bd      	mov	sp, r7
   1afc0:	b004      	add	sp, #16
   1afc2:	bd80      	pop	{r7, pc}
   1afc4:	0001d0a5 	.word	0x0001d0a5
   1afc8:	20003d14 	.word	0x20003d14
   1afcc:	20000e38 	.word	0x20000e38
   1afd0:	20003d10 	.word	0x20003d10
   1afd4:	00002ed7 	.word	0x00002ed7
   1afd8:	0001968d 	.word	0x0001968d
   1afdc:	0001d0bd 	.word	0x0001d0bd
   1afe0:	000336fd 	.word	0x000336fd

0001afe4 <vPortFree>:
   1afe4:	b580      	push	{r7, lr}
   1afe6:	b082      	sub	sp, #8
   1afe8:	af00      	add	r7, sp, #0
   1afea:	6078      	str	r0, [r7, #4]
   1afec:	687b      	ldr	r3, [r7, #4]
   1afee:	2b00      	cmp	r3, #0
   1aff0:	d001      	beq.n	1aff6 <vPortFree+0x12>
   1aff2:	b672      	cpsid	i
   1aff4:	e7fe      	b.n	1aff4 <vPortFree+0x10>
   1aff6:	46c0      	nop			; (mov r8, r8)
   1aff8:	46bd      	mov	sp, r7
   1affa:	b002      	add	sp, #8
   1affc:	bd80      	pop	{r7, pc}
	...

0001b000 <xPortGetFreeHeapSize>:
   1b000:	b580      	push	{r7, lr}
   1b002:	af00      	add	r7, sp, #0
   1b004:	4b03      	ldr	r3, [pc, #12]	; (1b014 <xPortGetFreeHeapSize+0x14>)
   1b006:	681b      	ldr	r3, [r3, #0]
   1b008:	4a03      	ldr	r2, [pc, #12]	; (1b018 <xPortGetFreeHeapSize+0x18>)
   1b00a:	1ad3      	subs	r3, r2, r3
   1b00c:	0018      	movs	r0, r3
   1b00e:	46bd      	mov	sp, r7
   1b010:	bd80      	pop	{r7, pc}
   1b012:	46c0      	nop			; (mov r8, r8)
   1b014:	20003d10 	.word	0x20003d10
   1b018:	00002ed8 	.word	0x00002ed8

0001b01c <xQueueGenericReset>:
   1b01c:	b580      	push	{r7, lr}
   1b01e:	b084      	sub	sp, #16
   1b020:	af00      	add	r7, sp, #0
   1b022:	6078      	str	r0, [r7, #4]
   1b024:	6039      	str	r1, [r7, #0]
   1b026:	687b      	ldr	r3, [r7, #4]
   1b028:	60fb      	str	r3, [r7, #12]
   1b02a:	68fb      	ldr	r3, [r7, #12]
   1b02c:	2b00      	cmp	r3, #0
   1b02e:	d101      	bne.n	1b034 <xQueueGenericReset+0x18>
   1b030:	b672      	cpsid	i
   1b032:	e7fe      	b.n	1b032 <xQueueGenericReset+0x16>
   1b034:	4b23      	ldr	r3, [pc, #140]	; (1b0c4 <xQueueGenericReset+0xa8>)
   1b036:	4798      	blx	r3
   1b038:	68fb      	ldr	r3, [r7, #12]
   1b03a:	681a      	ldr	r2, [r3, #0]
   1b03c:	68fb      	ldr	r3, [r7, #12]
   1b03e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   1b040:	68fb      	ldr	r3, [r7, #12]
   1b042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b044:	434b      	muls	r3, r1
   1b046:	18d2      	adds	r2, r2, r3
   1b048:	68fb      	ldr	r3, [r7, #12]
   1b04a:	605a      	str	r2, [r3, #4]
   1b04c:	68fb      	ldr	r3, [r7, #12]
   1b04e:	2200      	movs	r2, #0
   1b050:	639a      	str	r2, [r3, #56]	; 0x38
   1b052:	68fb      	ldr	r3, [r7, #12]
   1b054:	681a      	ldr	r2, [r3, #0]
   1b056:	68fb      	ldr	r3, [r7, #12]
   1b058:	609a      	str	r2, [r3, #8]
   1b05a:	68fb      	ldr	r3, [r7, #12]
   1b05c:	681a      	ldr	r2, [r3, #0]
   1b05e:	68fb      	ldr	r3, [r7, #12]
   1b060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b062:	1e59      	subs	r1, r3, #1
   1b064:	68fb      	ldr	r3, [r7, #12]
   1b066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b068:	434b      	muls	r3, r1
   1b06a:	18d2      	adds	r2, r2, r3
   1b06c:	68fb      	ldr	r3, [r7, #12]
   1b06e:	60da      	str	r2, [r3, #12]
   1b070:	68fb      	ldr	r3, [r7, #12]
   1b072:	2244      	movs	r2, #68	; 0x44
   1b074:	21ff      	movs	r1, #255	; 0xff
   1b076:	5499      	strb	r1, [r3, r2]
   1b078:	68fb      	ldr	r3, [r7, #12]
   1b07a:	2245      	movs	r2, #69	; 0x45
   1b07c:	21ff      	movs	r1, #255	; 0xff
   1b07e:	5499      	strb	r1, [r3, r2]
   1b080:	683b      	ldr	r3, [r7, #0]
   1b082:	2b00      	cmp	r3, #0
   1b084:	d10d      	bne.n	1b0a2 <xQueueGenericReset+0x86>
   1b086:	68fb      	ldr	r3, [r7, #12]
   1b088:	691b      	ldr	r3, [r3, #16]
   1b08a:	2b00      	cmp	r3, #0
   1b08c:	d013      	beq.n	1b0b6 <xQueueGenericReset+0x9a>
   1b08e:	68fb      	ldr	r3, [r7, #12]
   1b090:	3310      	adds	r3, #16
   1b092:	0018      	movs	r0, r3
   1b094:	4b0c      	ldr	r3, [pc, #48]	; (1b0c8 <xQueueGenericReset+0xac>)
   1b096:	4798      	blx	r3
   1b098:	1e03      	subs	r3, r0, #0
   1b09a:	d00c      	beq.n	1b0b6 <xQueueGenericReset+0x9a>
   1b09c:	4b0b      	ldr	r3, [pc, #44]	; (1b0cc <xQueueGenericReset+0xb0>)
   1b09e:	4798      	blx	r3
   1b0a0:	e009      	b.n	1b0b6 <xQueueGenericReset+0x9a>
   1b0a2:	68fb      	ldr	r3, [r7, #12]
   1b0a4:	3310      	adds	r3, #16
   1b0a6:	0018      	movs	r0, r3
   1b0a8:	4b09      	ldr	r3, [pc, #36]	; (1b0d0 <xQueueGenericReset+0xb4>)
   1b0aa:	4798      	blx	r3
   1b0ac:	68fb      	ldr	r3, [r7, #12]
   1b0ae:	3324      	adds	r3, #36	; 0x24
   1b0b0:	0018      	movs	r0, r3
   1b0b2:	4b07      	ldr	r3, [pc, #28]	; (1b0d0 <xQueueGenericReset+0xb4>)
   1b0b4:	4798      	blx	r3
   1b0b6:	4b07      	ldr	r3, [pc, #28]	; (1b0d4 <xQueueGenericReset+0xb8>)
   1b0b8:	4798      	blx	r3
   1b0ba:	2301      	movs	r3, #1
   1b0bc:	0018      	movs	r0, r3
   1b0be:	46bd      	mov	sp, r7
   1b0c0:	b004      	add	sp, #16
   1b0c2:	bd80      	pop	{r7, pc}
   1b0c4:	0001ade9 	.word	0x0001ade9
   1b0c8:	0001d67d 	.word	0x0001d67d
   1b0cc:	0001add1 	.word	0x0001add1
   1b0d0:	0001ab5d 	.word	0x0001ab5d
   1b0d4:	0001ae0d 	.word	0x0001ae0d

0001b0d8 <xQueueGenericCreate>:
   1b0d8:	b590      	push	{r4, r7, lr}
   1b0da:	b08b      	sub	sp, #44	; 0x2c
   1b0dc:	af02      	add	r7, sp, #8
   1b0de:	60f8      	str	r0, [r7, #12]
   1b0e0:	60b9      	str	r1, [r7, #8]
   1b0e2:	1dfb      	adds	r3, r7, #7
   1b0e4:	701a      	strb	r2, [r3, #0]
   1b0e6:	68fb      	ldr	r3, [r7, #12]
   1b0e8:	2b00      	cmp	r3, #0
   1b0ea:	d101      	bne.n	1b0f0 <xQueueGenericCreate+0x18>
   1b0ec:	b672      	cpsid	i
   1b0ee:	e7fe      	b.n	1b0ee <xQueueGenericCreate+0x16>
   1b0f0:	68bb      	ldr	r3, [r7, #8]
   1b0f2:	2b00      	cmp	r3, #0
   1b0f4:	d102      	bne.n	1b0fc <xQueueGenericCreate+0x24>
   1b0f6:	2300      	movs	r3, #0
   1b0f8:	61fb      	str	r3, [r7, #28]
   1b0fa:	e003      	b.n	1b104 <xQueueGenericCreate+0x2c>
   1b0fc:	68fb      	ldr	r3, [r7, #12]
   1b0fe:	68ba      	ldr	r2, [r7, #8]
   1b100:	4353      	muls	r3, r2
   1b102:	61fb      	str	r3, [r7, #28]
   1b104:	69fb      	ldr	r3, [r7, #28]
   1b106:	3354      	adds	r3, #84	; 0x54
   1b108:	0018      	movs	r0, r3
   1b10a:	4b19      	ldr	r3, [pc, #100]	; (1b170 <xQueueGenericCreate+0x98>)
   1b10c:	4798      	blx	r3
   1b10e:	0003      	movs	r3, r0
   1b110:	61bb      	str	r3, [r7, #24]
   1b112:	69bb      	ldr	r3, [r7, #24]
   1b114:	2b00      	cmp	r3, #0
   1b116:	d00d      	beq.n	1b134 <xQueueGenericCreate+0x5c>
   1b118:	69bb      	ldr	r3, [r7, #24]
   1b11a:	3354      	adds	r3, #84	; 0x54
   1b11c:	617b      	str	r3, [r7, #20]
   1b11e:	1dfb      	adds	r3, r7, #7
   1b120:	781c      	ldrb	r4, [r3, #0]
   1b122:	697a      	ldr	r2, [r7, #20]
   1b124:	68b9      	ldr	r1, [r7, #8]
   1b126:	68f8      	ldr	r0, [r7, #12]
   1b128:	69bb      	ldr	r3, [r7, #24]
   1b12a:	9300      	str	r3, [sp, #0]
   1b12c:	0023      	movs	r3, r4
   1b12e:	4c11      	ldr	r4, [pc, #68]	; (1b174 <xQueueGenericCreate+0x9c>)
   1b130:	47a0      	blx	r4
   1b132:	e017      	b.n	1b164 <xQueueGenericCreate+0x8c>
   1b134:	4b10      	ldr	r3, [pc, #64]	; (1b178 <xQueueGenericCreate+0xa0>)
   1b136:	4798      	blx	r3
   1b138:	0003      	movs	r3, r0
   1b13a:	0018      	movs	r0, r3
   1b13c:	4b0f      	ldr	r3, [pc, #60]	; (1b17c <xQueueGenericCreate+0xa4>)
   1b13e:	4798      	blx	r3
   1b140:	0003      	movs	r3, r0
   1b142:	001a      	movs	r2, r3
   1b144:	4b0e      	ldr	r3, [pc, #56]	; (1b180 <xQueueGenericCreate+0xa8>)
   1b146:	881b      	ldrh	r3, [r3, #0]
   1b148:	4013      	ands	r3, r2
   1b14a:	b29b      	uxth	r3, r3
   1b14c:	2b00      	cmp	r3, #0
   1b14e:	d009      	beq.n	1b164 <xQueueGenericCreate+0x8c>
   1b150:	1dfb      	adds	r3, r7, #7
   1b152:	781b      	ldrb	r3, [r3, #0]
   1b154:	4a0b      	ldr	r2, [pc, #44]	; (1b184 <xQueueGenericCreate+0xac>)
   1b156:	5cd3      	ldrb	r3, [r2, r3]
   1b158:	3340      	adds	r3, #64	; 0x40
   1b15a:	b2db      	uxtb	r3, r3
   1b15c:	2100      	movs	r1, #0
   1b15e:	0018      	movs	r0, r3
   1b160:	4b09      	ldr	r3, [pc, #36]	; (1b188 <xQueueGenericCreate+0xb0>)
   1b162:	4798      	blx	r3
   1b164:	69bb      	ldr	r3, [r7, #24]
   1b166:	0018      	movs	r0, r3
   1b168:	46bd      	mov	sp, r7
   1b16a:	b009      	add	sp, #36	; 0x24
   1b16c:	bd90      	pop	{r4, r7, pc}
   1b16e:	46c0      	nop			; (mov r8, r8)
   1b170:	0001af21 	.word	0x0001af21
   1b174:	0001b18d 	.word	0x0001b18d
   1b178:	00019081 	.word	0x00019081
   1b17c:	00018de5 	.word	0x00018de5
   1b180:	20000104 	.word	0x20000104
   1b184:	200000f8 	.word	0x200000f8
   1b188:	00019ae5 	.word	0x00019ae5

0001b18c <prvInitialiseNewQueue>:
   1b18c:	b5b0      	push	{r4, r5, r7, lr}
   1b18e:	b084      	sub	sp, #16
   1b190:	af00      	add	r7, sp, #0
   1b192:	60f8      	str	r0, [r7, #12]
   1b194:	60b9      	str	r1, [r7, #8]
   1b196:	607a      	str	r2, [r7, #4]
   1b198:	001a      	movs	r2, r3
   1b19a:	1cfb      	adds	r3, r7, #3
   1b19c:	701a      	strb	r2, [r3, #0]
   1b19e:	68bb      	ldr	r3, [r7, #8]
   1b1a0:	2b00      	cmp	r3, #0
   1b1a2:	d103      	bne.n	1b1ac <prvInitialiseNewQueue+0x20>
   1b1a4:	6a3b      	ldr	r3, [r7, #32]
   1b1a6:	6a3a      	ldr	r2, [r7, #32]
   1b1a8:	601a      	str	r2, [r3, #0]
   1b1aa:	e002      	b.n	1b1b2 <prvInitialiseNewQueue+0x26>
   1b1ac:	6a3b      	ldr	r3, [r7, #32]
   1b1ae:	687a      	ldr	r2, [r7, #4]
   1b1b0:	601a      	str	r2, [r3, #0]
   1b1b2:	6a3b      	ldr	r3, [r7, #32]
   1b1b4:	68fa      	ldr	r2, [r7, #12]
   1b1b6:	63da      	str	r2, [r3, #60]	; 0x3c
   1b1b8:	6a3b      	ldr	r3, [r7, #32]
   1b1ba:	68ba      	ldr	r2, [r7, #8]
   1b1bc:	641a      	str	r2, [r3, #64]	; 0x40
   1b1be:	6a3b      	ldr	r3, [r7, #32]
   1b1c0:	2101      	movs	r1, #1
   1b1c2:	0018      	movs	r0, r3
   1b1c4:	4b41      	ldr	r3, [pc, #260]	; (1b2cc <prvInitialiseNewQueue+0x140>)
   1b1c6:	4798      	blx	r3
   1b1c8:	6a3b      	ldr	r3, [r7, #32]
   1b1ca:	1cfa      	adds	r2, r7, #3
   1b1cc:	2150      	movs	r1, #80	; 0x50
   1b1ce:	7812      	ldrb	r2, [r2, #0]
   1b1d0:	545a      	strb	r2, [r3, r1]
   1b1d2:	6a3b      	ldr	r3, [r7, #32]
   1b1d4:	2200      	movs	r2, #0
   1b1d6:	649a      	str	r2, [r3, #72]	; 0x48
   1b1d8:	6a3b      	ldr	r3, [r7, #32]
   1b1da:	0018      	movs	r0, r3
   1b1dc:	4b3c      	ldr	r3, [pc, #240]	; (1b2d0 <prvInitialiseNewQueue+0x144>)
   1b1de:	4798      	blx	r3
   1b1e0:	0003      	movs	r3, r0
   1b1e2:	001a      	movs	r2, r3
   1b1e4:	4b3b      	ldr	r3, [pc, #236]	; (1b2d4 <prvInitialiseNewQueue+0x148>)
   1b1e6:	5c9b      	ldrb	r3, [r3, r2]
   1b1e8:	0018      	movs	r0, r3
   1b1ea:	4b3b      	ldr	r3, [pc, #236]	; (1b2d8 <prvInitialiseNewQueue+0x14c>)
   1b1ec:	4798      	blx	r3
   1b1ee:	0003      	movs	r3, r0
   1b1f0:	b29a      	uxth	r2, r3
   1b1f2:	6a3b      	ldr	r3, [r7, #32]
   1b1f4:	0011      	movs	r1, r2
   1b1f6:	0018      	movs	r0, r3
   1b1f8:	4b38      	ldr	r3, [pc, #224]	; (1b2dc <prvInitialiseNewQueue+0x150>)
   1b1fa:	4798      	blx	r3
   1b1fc:	4b38      	ldr	r3, [pc, #224]	; (1b2e0 <prvInitialiseNewQueue+0x154>)
   1b1fe:	881a      	ldrh	r2, [r3, #0]
   1b200:	6a3b      	ldr	r3, [r7, #32]
   1b202:	0011      	movs	r1, r2
   1b204:	0018      	movs	r0, r3
   1b206:	4b37      	ldr	r3, [pc, #220]	; (1b2e4 <prvInitialiseNewQueue+0x158>)
   1b208:	4798      	blx	r3
   1b20a:	6a3b      	ldr	r3, [r7, #32]
   1b20c:	0018      	movs	r0, r3
   1b20e:	4b30      	ldr	r3, [pc, #192]	; (1b2d0 <prvInitialiseNewQueue+0x144>)
   1b210:	4798      	blx	r3
   1b212:	0003      	movs	r3, r0
   1b214:	001a      	movs	r2, r3
   1b216:	4b2f      	ldr	r3, [pc, #188]	; (1b2d4 <prvInitialiseNewQueue+0x148>)
   1b218:	5c9c      	ldrb	r4, [r3, r2]
   1b21a:	6a3b      	ldr	r3, [r7, #32]
   1b21c:	0018      	movs	r0, r3
   1b21e:	4b32      	ldr	r3, [pc, #200]	; (1b2e8 <prvInitialiseNewQueue+0x15c>)
   1b220:	4798      	blx	r3
   1b222:	0003      	movs	r3, r0
   1b224:	b2db      	uxtb	r3, r3
   1b226:	0019      	movs	r1, r3
   1b228:	0020      	movs	r0, r4
   1b22a:	4b30      	ldr	r3, [pc, #192]	; (1b2ec <prvInitialiseNewQueue+0x160>)
   1b22c:	4798      	blx	r3
   1b22e:	4b30      	ldr	r3, [pc, #192]	; (1b2f0 <prvInitialiseNewQueue+0x164>)
   1b230:	4798      	blx	r3
   1b232:	0003      	movs	r3, r0
   1b234:	0018      	movs	r0, r3
   1b236:	4b2f      	ldr	r3, [pc, #188]	; (1b2f4 <prvInitialiseNewQueue+0x168>)
   1b238:	4798      	blx	r3
   1b23a:	0003      	movs	r3, r0
   1b23c:	001a      	movs	r2, r3
   1b23e:	4b2e      	ldr	r3, [pc, #184]	; (1b2f8 <prvInitialiseNewQueue+0x16c>)
   1b240:	881b      	ldrh	r3, [r3, #0]
   1b242:	4013      	ands	r3, r2
   1b244:	b29b      	uxth	r3, r3
   1b246:	2b00      	cmp	r3, #0
   1b248:	d029      	beq.n	1b29e <prvInitialiseNewQueue+0x112>
   1b24a:	6a3b      	ldr	r3, [r7, #32]
   1b24c:	0018      	movs	r0, r3
   1b24e:	4b2b      	ldr	r3, [pc, #172]	; (1b2fc <prvInitialiseNewQueue+0x170>)
   1b250:	4798      	blx	r3
   1b252:	0003      	movs	r3, r0
   1b254:	001a      	movs	r2, r3
   1b256:	4b28      	ldr	r3, [pc, #160]	; (1b2f8 <prvInitialiseNewQueue+0x16c>)
   1b258:	881b      	ldrh	r3, [r3, #0]
   1b25a:	4013      	ands	r3, r2
   1b25c:	b29b      	uxth	r3, r3
   1b25e:	2b00      	cmp	r3, #0
   1b260:	d01d      	beq.n	1b29e <prvInitialiseNewQueue+0x112>
   1b262:	6a3b      	ldr	r3, [r7, #32]
   1b264:	0018      	movs	r0, r3
   1b266:	4b1a      	ldr	r3, [pc, #104]	; (1b2d0 <prvInitialiseNewQueue+0x144>)
   1b268:	4798      	blx	r3
   1b26a:	0003      	movs	r3, r0
   1b26c:	001a      	movs	r2, r3
   1b26e:	4b19      	ldr	r3, [pc, #100]	; (1b2d4 <prvInitialiseNewQueue+0x148>)
   1b270:	5c9b      	ldrb	r3, [r3, r2]
   1b272:	3318      	adds	r3, #24
   1b274:	b2db      	uxtb	r3, r3
   1b276:	001d      	movs	r5, r3
   1b278:	6a3b      	ldr	r3, [r7, #32]
   1b27a:	0018      	movs	r0, r3
   1b27c:	4b14      	ldr	r3, [pc, #80]	; (1b2d0 <prvInitialiseNewQueue+0x144>)
   1b27e:	4798      	blx	r3
   1b280:	0003      	movs	r3, r0
   1b282:	001a      	movs	r2, r3
   1b284:	4b13      	ldr	r3, [pc, #76]	; (1b2d4 <prvInitialiseNewQueue+0x148>)
   1b286:	5c9c      	ldrb	r4, [r3, r2]
   1b288:	6a3b      	ldr	r3, [r7, #32]
   1b28a:	0018      	movs	r0, r3
   1b28c:	4b16      	ldr	r3, [pc, #88]	; (1b2e8 <prvInitialiseNewQueue+0x15c>)
   1b28e:	4798      	blx	r3
   1b290:	0003      	movs	r3, r0
   1b292:	b2db      	uxtb	r3, r3
   1b294:	001a      	movs	r2, r3
   1b296:	0021      	movs	r1, r4
   1b298:	0028      	movs	r0, r5
   1b29a:	4b19      	ldr	r3, [pc, #100]	; (1b300 <prvInitialiseNewQueue+0x174>)
   1b29c:	4798      	blx	r3
   1b29e:	6a3b      	ldr	r3, [r7, #32]
   1b2a0:	0018      	movs	r0, r3
   1b2a2:	4b0b      	ldr	r3, [pc, #44]	; (1b2d0 <prvInitialiseNewQueue+0x144>)
   1b2a4:	4798      	blx	r3
   1b2a6:	0003      	movs	r3, r0
   1b2a8:	001a      	movs	r2, r3
   1b2aa:	4b0a      	ldr	r3, [pc, #40]	; (1b2d4 <prvInitialiseNewQueue+0x148>)
   1b2ac:	5c9c      	ldrb	r4, [r3, r2]
   1b2ae:	6a3b      	ldr	r3, [r7, #32]
   1b2b0:	0018      	movs	r0, r3
   1b2b2:	4b0d      	ldr	r3, [pc, #52]	; (1b2e8 <prvInitialiseNewQueue+0x15c>)
   1b2b4:	4798      	blx	r3
   1b2b6:	0003      	movs	r3, r0
   1b2b8:	b2db      	uxtb	r3, r3
   1b2ba:	2200      	movs	r2, #0
   1b2bc:	0019      	movs	r1, r3
   1b2be:	0020      	movs	r0, r4
   1b2c0:	4b10      	ldr	r3, [pc, #64]	; (1b304 <prvInitialiseNewQueue+0x178>)
   1b2c2:	4798      	blx	r3
   1b2c4:	46c0      	nop			; (mov r8, r8)
   1b2c6:	46bd      	mov	sp, r7
   1b2c8:	b004      	add	sp, #16
   1b2ca:	bdb0      	pop	{r4, r5, r7, pc}
   1b2cc:	0001b01d 	.word	0x0001b01d
   1b2d0:	00018da5 	.word	0x00018da5
   1b2d4:	200000f8 	.word	0x200000f8
   1b2d8:	0001a365 	.word	0x0001a365
   1b2dc:	00018ec9 	.word	0x00018ec9
   1b2e0:	20000106 	.word	0x20000106
   1b2e4:	00018f05 	.word	0x00018f05
   1b2e8:	00018e85 	.word	0x00018e85
   1b2ec:	0001a4fd 	.word	0x0001a4fd
   1b2f0:	00019081 	.word	0x00019081
   1b2f4:	00018de5 	.word	0x00018de5
   1b2f8:	20000104 	.word	0x20000104
   1b2fc:	00018ea5 	.word	0x00018ea5
   1b300:	000197dd 	.word	0x000197dd
   1b304:	00019e39 	.word	0x00019e39

0001b308 <prvInitialiseMutex>:
   1b308:	b590      	push	{r4, r7, lr}
   1b30a:	b083      	sub	sp, #12
   1b30c:	af00      	add	r7, sp, #0
   1b30e:	6078      	str	r0, [r7, #4]
   1b310:	687b      	ldr	r3, [r7, #4]
   1b312:	2b00      	cmp	r3, #0
   1b314:	d00e      	beq.n	1b334 <prvInitialiseMutex+0x2c>
   1b316:	687b      	ldr	r3, [r7, #4]
   1b318:	2200      	movs	r2, #0
   1b31a:	605a      	str	r2, [r3, #4]
   1b31c:	687b      	ldr	r3, [r7, #4]
   1b31e:	2200      	movs	r2, #0
   1b320:	601a      	str	r2, [r3, #0]
   1b322:	687b      	ldr	r3, [r7, #4]
   1b324:	2200      	movs	r2, #0
   1b326:	60da      	str	r2, [r3, #12]
   1b328:	6878      	ldr	r0, [r7, #4]
   1b32a:	2300      	movs	r3, #0
   1b32c:	2200      	movs	r2, #0
   1b32e:	2100      	movs	r1, #0
   1b330:	4c02      	ldr	r4, [pc, #8]	; (1b33c <prvInitialiseMutex+0x34>)
   1b332:	47a0      	blx	r4
   1b334:	46c0      	nop			; (mov r8, r8)
   1b336:	46bd      	mov	sp, r7
   1b338:	b003      	add	sp, #12
   1b33a:	bd90      	pop	{r4, r7, pc}
   1b33c:	0001b381 	.word	0x0001b381

0001b340 <xQueueCreateMutex>:
   1b340:	b580      	push	{r7, lr}
   1b342:	b086      	sub	sp, #24
   1b344:	af00      	add	r7, sp, #0
   1b346:	0002      	movs	r2, r0
   1b348:	1dfb      	adds	r3, r7, #7
   1b34a:	701a      	strb	r2, [r3, #0]
   1b34c:	2301      	movs	r3, #1
   1b34e:	617b      	str	r3, [r7, #20]
   1b350:	2300      	movs	r3, #0
   1b352:	613b      	str	r3, [r7, #16]
   1b354:	1dfb      	adds	r3, r7, #7
   1b356:	781a      	ldrb	r2, [r3, #0]
   1b358:	6939      	ldr	r1, [r7, #16]
   1b35a:	697b      	ldr	r3, [r7, #20]
   1b35c:	0018      	movs	r0, r3
   1b35e:	4b06      	ldr	r3, [pc, #24]	; (1b378 <xQueueCreateMutex+0x38>)
   1b360:	4798      	blx	r3
   1b362:	0003      	movs	r3, r0
   1b364:	60fb      	str	r3, [r7, #12]
   1b366:	68fb      	ldr	r3, [r7, #12]
   1b368:	0018      	movs	r0, r3
   1b36a:	4b04      	ldr	r3, [pc, #16]	; (1b37c <xQueueCreateMutex+0x3c>)
   1b36c:	4798      	blx	r3
   1b36e:	68fb      	ldr	r3, [r7, #12]
   1b370:	0018      	movs	r0, r3
   1b372:	46bd      	mov	sp, r7
   1b374:	b006      	add	sp, #24
   1b376:	bd80      	pop	{r7, pc}
   1b378:	0001b0d9 	.word	0x0001b0d9
   1b37c:	0001b309 	.word	0x0001b309

0001b380 <xQueueGenericSend>:
   1b380:	b5b0      	push	{r4, r5, r7, lr}
   1b382:	b08a      	sub	sp, #40	; 0x28
   1b384:	af00      	add	r7, sp, #0
   1b386:	60f8      	str	r0, [r7, #12]
   1b388:	60b9      	str	r1, [r7, #8]
   1b38a:	607a      	str	r2, [r7, #4]
   1b38c:	603b      	str	r3, [r7, #0]
   1b38e:	2300      	movs	r3, #0
   1b390:	627b      	str	r3, [r7, #36]	; 0x24
   1b392:	68fb      	ldr	r3, [r7, #12]
   1b394:	623b      	str	r3, [r7, #32]
   1b396:	6a3b      	ldr	r3, [r7, #32]
   1b398:	2b00      	cmp	r3, #0
   1b39a:	d101      	bne.n	1b3a0 <xQueueGenericSend+0x20>
   1b39c:	b672      	cpsid	i
   1b39e:	e7fe      	b.n	1b39e <xQueueGenericSend+0x1e>
   1b3a0:	68bb      	ldr	r3, [r7, #8]
   1b3a2:	2b00      	cmp	r3, #0
   1b3a4:	d103      	bne.n	1b3ae <xQueueGenericSend+0x2e>
   1b3a6:	6a3b      	ldr	r3, [r7, #32]
   1b3a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b3aa:	2b00      	cmp	r3, #0
   1b3ac:	d101      	bne.n	1b3b2 <xQueueGenericSend+0x32>
   1b3ae:	2301      	movs	r3, #1
   1b3b0:	e000      	b.n	1b3b4 <xQueueGenericSend+0x34>
   1b3b2:	2300      	movs	r3, #0
   1b3b4:	2b00      	cmp	r3, #0
   1b3b6:	d101      	bne.n	1b3bc <xQueueGenericSend+0x3c>
   1b3b8:	b672      	cpsid	i
   1b3ba:	e7fe      	b.n	1b3ba <xQueueGenericSend+0x3a>
   1b3bc:	683b      	ldr	r3, [r7, #0]
   1b3be:	2b02      	cmp	r3, #2
   1b3c0:	d103      	bne.n	1b3ca <xQueueGenericSend+0x4a>
   1b3c2:	6a3b      	ldr	r3, [r7, #32]
   1b3c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b3c6:	2b01      	cmp	r3, #1
   1b3c8:	d101      	bne.n	1b3ce <xQueueGenericSend+0x4e>
   1b3ca:	2301      	movs	r3, #1
   1b3cc:	e000      	b.n	1b3d0 <xQueueGenericSend+0x50>
   1b3ce:	2300      	movs	r3, #0
   1b3d0:	2b00      	cmp	r3, #0
   1b3d2:	d101      	bne.n	1b3d8 <xQueueGenericSend+0x58>
   1b3d4:	b672      	cpsid	i
   1b3d6:	e7fe      	b.n	1b3d6 <xQueueGenericSend+0x56>
   1b3d8:	4bbc      	ldr	r3, [pc, #752]	; (1b6cc <xQueueGenericSend+0x34c>)
   1b3da:	4798      	blx	r3
   1b3dc:	1e03      	subs	r3, r0, #0
   1b3de:	d102      	bne.n	1b3e6 <xQueueGenericSend+0x66>
   1b3e0:	687b      	ldr	r3, [r7, #4]
   1b3e2:	2b00      	cmp	r3, #0
   1b3e4:	d101      	bne.n	1b3ea <xQueueGenericSend+0x6a>
   1b3e6:	2301      	movs	r3, #1
   1b3e8:	e000      	b.n	1b3ec <xQueueGenericSend+0x6c>
   1b3ea:	2300      	movs	r3, #0
   1b3ec:	2b00      	cmp	r3, #0
   1b3ee:	d101      	bne.n	1b3f4 <xQueueGenericSend+0x74>
   1b3f0:	b672      	cpsid	i
   1b3f2:	e7fe      	b.n	1b3f2 <xQueueGenericSend+0x72>
   1b3f4:	4bb6      	ldr	r3, [pc, #728]	; (1b6d0 <xQueueGenericSend+0x350>)
   1b3f6:	4798      	blx	r3
   1b3f8:	6a3b      	ldr	r3, [r7, #32]
   1b3fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1b3fc:	6a3b      	ldr	r3, [r7, #32]
   1b3fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b400:	429a      	cmp	r2, r3
   1b402:	d303      	bcc.n	1b40c <xQueueGenericSend+0x8c>
   1b404:	683b      	ldr	r3, [r7, #0]
   1b406:	2b02      	cmp	r3, #2
   1b408:	d000      	beq.n	1b40c <xQueueGenericSend+0x8c>
   1b40a:	e08e      	b.n	1b52a <xQueueGenericSend+0x1aa>
   1b40c:	4bb1      	ldr	r3, [pc, #708]	; (1b6d4 <xQueueGenericSend+0x354>)
   1b40e:	4798      	blx	r3
   1b410:	0003      	movs	r3, r0
   1b412:	0018      	movs	r0, r3
   1b414:	4bb0      	ldr	r3, [pc, #704]	; (1b6d8 <xQueueGenericSend+0x358>)
   1b416:	4798      	blx	r3
   1b418:	0003      	movs	r3, r0
   1b41a:	001a      	movs	r2, r3
   1b41c:	4baf      	ldr	r3, [pc, #700]	; (1b6dc <xQueueGenericSend+0x35c>)
   1b41e:	881b      	ldrh	r3, [r3, #0]
   1b420:	4013      	ands	r3, r2
   1b422:	b29b      	uxth	r3, r3
   1b424:	2b00      	cmp	r3, #0
   1b426:	d02e      	beq.n	1b486 <xQueueGenericSend+0x106>
   1b428:	6a3b      	ldr	r3, [r7, #32]
   1b42a:	0018      	movs	r0, r3
   1b42c:	4bac      	ldr	r3, [pc, #688]	; (1b6e0 <xQueueGenericSend+0x360>)
   1b42e:	4798      	blx	r3
   1b430:	0003      	movs	r3, r0
   1b432:	001a      	movs	r2, r3
   1b434:	4ba9      	ldr	r3, [pc, #676]	; (1b6dc <xQueueGenericSend+0x35c>)
   1b436:	881b      	ldrh	r3, [r3, #0]
   1b438:	4013      	ands	r3, r2
   1b43a:	b29b      	uxth	r3, r3
   1b43c:	2b00      	cmp	r3, #0
   1b43e:	d022      	beq.n	1b486 <xQueueGenericSend+0x106>
   1b440:	683b      	ldr	r3, [r7, #0]
   1b442:	2b00      	cmp	r3, #0
   1b444:	d10b      	bne.n	1b45e <xQueueGenericSend+0xde>
   1b446:	6a3b      	ldr	r3, [r7, #32]
   1b448:	0018      	movs	r0, r3
   1b44a:	4ba6      	ldr	r3, [pc, #664]	; (1b6e4 <xQueueGenericSend+0x364>)
   1b44c:	4798      	blx	r3
   1b44e:	0003      	movs	r3, r0
   1b450:	001a      	movs	r2, r3
   1b452:	4ba5      	ldr	r3, [pc, #660]	; (1b6e8 <xQueueGenericSend+0x368>)
   1b454:	5c9b      	ldrb	r3, [r3, r2]
   1b456:	3320      	adds	r3, #32
   1b458:	b2db      	uxtb	r3, r3
   1b45a:	001d      	movs	r5, r3
   1b45c:	e000      	b.n	1b460 <xQueueGenericSend+0xe0>
   1b45e:	2525      	movs	r5, #37	; 0x25
   1b460:	6a3b      	ldr	r3, [r7, #32]
   1b462:	0018      	movs	r0, r3
   1b464:	4b9f      	ldr	r3, [pc, #636]	; (1b6e4 <xQueueGenericSend+0x364>)
   1b466:	4798      	blx	r3
   1b468:	0003      	movs	r3, r0
   1b46a:	001a      	movs	r2, r3
   1b46c:	4b9e      	ldr	r3, [pc, #632]	; (1b6e8 <xQueueGenericSend+0x368>)
   1b46e:	5c9c      	ldrb	r4, [r3, r2]
   1b470:	6a3b      	ldr	r3, [r7, #32]
   1b472:	0018      	movs	r0, r3
   1b474:	4b9d      	ldr	r3, [pc, #628]	; (1b6ec <xQueueGenericSend+0x36c>)
   1b476:	4798      	blx	r3
   1b478:	0003      	movs	r3, r0
   1b47a:	b2db      	uxtb	r3, r3
   1b47c:	001a      	movs	r2, r3
   1b47e:	0021      	movs	r1, r4
   1b480:	0028      	movs	r0, r5
   1b482:	4b9b      	ldr	r3, [pc, #620]	; (1b6f0 <xQueueGenericSend+0x370>)
   1b484:	4798      	blx	r3
   1b486:	6a3b      	ldr	r3, [r7, #32]
   1b488:	0018      	movs	r0, r3
   1b48a:	4b96      	ldr	r3, [pc, #600]	; (1b6e4 <xQueueGenericSend+0x364>)
   1b48c:	4798      	blx	r3
   1b48e:	0003      	movs	r3, r0
   1b490:	001a      	movs	r2, r3
   1b492:	4b95      	ldr	r3, [pc, #596]	; (1b6e8 <xQueueGenericSend+0x368>)
   1b494:	5c9c      	ldrb	r4, [r3, r2]
   1b496:	6a3b      	ldr	r3, [r7, #32]
   1b498:	0018      	movs	r0, r3
   1b49a:	4b94      	ldr	r3, [pc, #592]	; (1b6ec <xQueueGenericSend+0x36c>)
   1b49c:	4798      	blx	r3
   1b49e:	0003      	movs	r3, r0
   1b4a0:	b2dd      	uxtb	r5, r3
   1b4a2:	6a3b      	ldr	r3, [r7, #32]
   1b4a4:	0018      	movs	r0, r3
   1b4a6:	4b8f      	ldr	r3, [pc, #572]	; (1b6e4 <xQueueGenericSend+0x364>)
   1b4a8:	4798      	blx	r3
   1b4aa:	0003      	movs	r3, r0
   1b4ac:	001a      	movs	r2, r3
   1b4ae:	4b8e      	ldr	r3, [pc, #568]	; (1b6e8 <xQueueGenericSend+0x368>)
   1b4b0:	5c9b      	ldrb	r3, [r3, r2]
   1b4b2:	2b02      	cmp	r3, #2
   1b4b4:	d005      	beq.n	1b4c2 <xQueueGenericSend+0x142>
   1b4b6:	6a3b      	ldr	r3, [r7, #32]
   1b4b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b4ba:	b2db      	uxtb	r3, r3
   1b4bc:	3301      	adds	r3, #1
   1b4be:	b2db      	uxtb	r3, r3
   1b4c0:	e000      	b.n	1b4c4 <xQueueGenericSend+0x144>
   1b4c2:	2300      	movs	r3, #0
   1b4c4:	001a      	movs	r2, r3
   1b4c6:	0029      	movs	r1, r5
   1b4c8:	0020      	movs	r0, r4
   1b4ca:	4b8a      	ldr	r3, [pc, #552]	; (1b6f4 <xQueueGenericSend+0x374>)
   1b4cc:	4798      	blx	r3
   1b4ce:	683a      	ldr	r2, [r7, #0]
   1b4d0:	68b9      	ldr	r1, [r7, #8]
   1b4d2:	6a3b      	ldr	r3, [r7, #32]
   1b4d4:	0018      	movs	r0, r3
   1b4d6:	4b88      	ldr	r3, [pc, #544]	; (1b6f8 <xQueueGenericSend+0x378>)
   1b4d8:	4798      	blx	r3
   1b4da:	0003      	movs	r3, r0
   1b4dc:	61fb      	str	r3, [r7, #28]
   1b4de:	6a3b      	ldr	r3, [r7, #32]
   1b4e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1b4e2:	2b00      	cmp	r3, #0
   1b4e4:	d00a      	beq.n	1b4fc <xQueueGenericSend+0x17c>
   1b4e6:	683a      	ldr	r2, [r7, #0]
   1b4e8:	6a3b      	ldr	r3, [r7, #32]
   1b4ea:	0011      	movs	r1, r2
   1b4ec:	0018      	movs	r0, r3
   1b4ee:	4b83      	ldr	r3, [pc, #524]	; (1b6fc <xQueueGenericSend+0x37c>)
   1b4f0:	4798      	blx	r3
   1b4f2:	1e03      	subs	r3, r0, #0
   1b4f4:	d015      	beq.n	1b522 <xQueueGenericSend+0x1a2>
   1b4f6:	4b82      	ldr	r3, [pc, #520]	; (1b700 <xQueueGenericSend+0x380>)
   1b4f8:	4798      	blx	r3
   1b4fa:	e012      	b.n	1b522 <xQueueGenericSend+0x1a2>
   1b4fc:	6a3b      	ldr	r3, [r7, #32]
   1b4fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b500:	2b00      	cmp	r3, #0
   1b502:	d009      	beq.n	1b518 <xQueueGenericSend+0x198>
   1b504:	6a3b      	ldr	r3, [r7, #32]
   1b506:	3324      	adds	r3, #36	; 0x24
   1b508:	0018      	movs	r0, r3
   1b50a:	4b7e      	ldr	r3, [pc, #504]	; (1b704 <xQueueGenericSend+0x384>)
   1b50c:	4798      	blx	r3
   1b50e:	1e03      	subs	r3, r0, #0
   1b510:	d007      	beq.n	1b522 <xQueueGenericSend+0x1a2>
   1b512:	4b7b      	ldr	r3, [pc, #492]	; (1b700 <xQueueGenericSend+0x380>)
   1b514:	4798      	blx	r3
   1b516:	e004      	b.n	1b522 <xQueueGenericSend+0x1a2>
   1b518:	69fb      	ldr	r3, [r7, #28]
   1b51a:	2b00      	cmp	r3, #0
   1b51c:	d001      	beq.n	1b522 <xQueueGenericSend+0x1a2>
   1b51e:	4b78      	ldr	r3, [pc, #480]	; (1b700 <xQueueGenericSend+0x380>)
   1b520:	4798      	blx	r3
   1b522:	4b79      	ldr	r3, [pc, #484]	; (1b708 <xQueueGenericSend+0x388>)
   1b524:	4798      	blx	r3
   1b526:	2301      	movs	r3, #1
   1b528:	e142      	b.n	1b7b0 <xQueueGenericSend+0x430>
   1b52a:	687b      	ldr	r3, [r7, #4]
   1b52c:	2b00      	cmp	r3, #0
   1b52e:	d140      	bne.n	1b5b2 <xQueueGenericSend+0x232>
   1b530:	4b75      	ldr	r3, [pc, #468]	; (1b708 <xQueueGenericSend+0x388>)
   1b532:	4798      	blx	r3
   1b534:	4b67      	ldr	r3, [pc, #412]	; (1b6d4 <xQueueGenericSend+0x354>)
   1b536:	4798      	blx	r3
   1b538:	0003      	movs	r3, r0
   1b53a:	0018      	movs	r0, r3
   1b53c:	4b66      	ldr	r3, [pc, #408]	; (1b6d8 <xQueueGenericSend+0x358>)
   1b53e:	4798      	blx	r3
   1b540:	0003      	movs	r3, r0
   1b542:	001a      	movs	r2, r3
   1b544:	4b65      	ldr	r3, [pc, #404]	; (1b6dc <xQueueGenericSend+0x35c>)
   1b546:	881b      	ldrh	r3, [r3, #0]
   1b548:	4013      	ands	r3, r2
   1b54a:	b29b      	uxth	r3, r3
   1b54c:	2b00      	cmp	r3, #0
   1b54e:	d02e      	beq.n	1b5ae <xQueueGenericSend+0x22e>
   1b550:	6a3b      	ldr	r3, [r7, #32]
   1b552:	0018      	movs	r0, r3
   1b554:	4b62      	ldr	r3, [pc, #392]	; (1b6e0 <xQueueGenericSend+0x360>)
   1b556:	4798      	blx	r3
   1b558:	0003      	movs	r3, r0
   1b55a:	001a      	movs	r2, r3
   1b55c:	4b5f      	ldr	r3, [pc, #380]	; (1b6dc <xQueueGenericSend+0x35c>)
   1b55e:	881b      	ldrh	r3, [r3, #0]
   1b560:	4013      	ands	r3, r2
   1b562:	b29b      	uxth	r3, r3
   1b564:	2b00      	cmp	r3, #0
   1b566:	d022      	beq.n	1b5ae <xQueueGenericSend+0x22e>
   1b568:	683b      	ldr	r3, [r7, #0]
   1b56a:	2b00      	cmp	r3, #0
   1b56c:	d10b      	bne.n	1b586 <xQueueGenericSend+0x206>
   1b56e:	6a3b      	ldr	r3, [r7, #32]
   1b570:	0018      	movs	r0, r3
   1b572:	4b5c      	ldr	r3, [pc, #368]	; (1b6e4 <xQueueGenericSend+0x364>)
   1b574:	4798      	blx	r3
   1b576:	0003      	movs	r3, r0
   1b578:	001a      	movs	r2, r3
   1b57a:	4b5b      	ldr	r3, [pc, #364]	; (1b6e8 <xQueueGenericSend+0x368>)
   1b57c:	5c9b      	ldrb	r3, [r3, r2]
   1b57e:	3348      	adds	r3, #72	; 0x48
   1b580:	b2db      	uxtb	r3, r3
   1b582:	001d      	movs	r5, r3
   1b584:	e000      	b.n	1b588 <xQueueGenericSend+0x208>
   1b586:	254d      	movs	r5, #77	; 0x4d
   1b588:	6a3b      	ldr	r3, [r7, #32]
   1b58a:	0018      	movs	r0, r3
   1b58c:	4b55      	ldr	r3, [pc, #340]	; (1b6e4 <xQueueGenericSend+0x364>)
   1b58e:	4798      	blx	r3
   1b590:	0003      	movs	r3, r0
   1b592:	001a      	movs	r2, r3
   1b594:	4b54      	ldr	r3, [pc, #336]	; (1b6e8 <xQueueGenericSend+0x368>)
   1b596:	5c9c      	ldrb	r4, [r3, r2]
   1b598:	6a3b      	ldr	r3, [r7, #32]
   1b59a:	0018      	movs	r0, r3
   1b59c:	4b53      	ldr	r3, [pc, #332]	; (1b6ec <xQueueGenericSend+0x36c>)
   1b59e:	4798      	blx	r3
   1b5a0:	0003      	movs	r3, r0
   1b5a2:	b2db      	uxtb	r3, r3
   1b5a4:	001a      	movs	r2, r3
   1b5a6:	0021      	movs	r1, r4
   1b5a8:	0028      	movs	r0, r5
   1b5aa:	4b51      	ldr	r3, [pc, #324]	; (1b6f0 <xQueueGenericSend+0x370>)
   1b5ac:	4798      	blx	r3
   1b5ae:	2300      	movs	r3, #0
   1b5b0:	e0fe      	b.n	1b7b0 <xQueueGenericSend+0x430>
   1b5b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b5b4:	2b00      	cmp	r3, #0
   1b5b6:	d106      	bne.n	1b5c6 <xQueueGenericSend+0x246>
   1b5b8:	2314      	movs	r3, #20
   1b5ba:	18fb      	adds	r3, r7, r3
   1b5bc:	0018      	movs	r0, r3
   1b5be:	4b53      	ldr	r3, [pc, #332]	; (1b70c <xQueueGenericSend+0x38c>)
   1b5c0:	4798      	blx	r3
   1b5c2:	2301      	movs	r3, #1
   1b5c4:	627b      	str	r3, [r7, #36]	; 0x24
   1b5c6:	4b50      	ldr	r3, [pc, #320]	; (1b708 <xQueueGenericSend+0x388>)
   1b5c8:	4798      	blx	r3
   1b5ca:	4b51      	ldr	r3, [pc, #324]	; (1b710 <xQueueGenericSend+0x390>)
   1b5cc:	4798      	blx	r3
   1b5ce:	4b40      	ldr	r3, [pc, #256]	; (1b6d0 <xQueueGenericSend+0x350>)
   1b5d0:	4798      	blx	r3
   1b5d2:	6a3b      	ldr	r3, [r7, #32]
   1b5d4:	2244      	movs	r2, #68	; 0x44
   1b5d6:	5c9b      	ldrb	r3, [r3, r2]
   1b5d8:	b25b      	sxtb	r3, r3
   1b5da:	3301      	adds	r3, #1
   1b5dc:	d103      	bne.n	1b5e6 <xQueueGenericSend+0x266>
   1b5de:	6a3b      	ldr	r3, [r7, #32]
   1b5e0:	2244      	movs	r2, #68	; 0x44
   1b5e2:	2100      	movs	r1, #0
   1b5e4:	5499      	strb	r1, [r3, r2]
   1b5e6:	6a3b      	ldr	r3, [r7, #32]
   1b5e8:	2245      	movs	r2, #69	; 0x45
   1b5ea:	5c9b      	ldrb	r3, [r3, r2]
   1b5ec:	b25b      	sxtb	r3, r3
   1b5ee:	3301      	adds	r3, #1
   1b5f0:	d103      	bne.n	1b5fa <xQueueGenericSend+0x27a>
   1b5f2:	6a3b      	ldr	r3, [r7, #32]
   1b5f4:	2245      	movs	r2, #69	; 0x45
   1b5f6:	2100      	movs	r1, #0
   1b5f8:	5499      	strb	r1, [r3, r2]
   1b5fa:	4b43      	ldr	r3, [pc, #268]	; (1b708 <xQueueGenericSend+0x388>)
   1b5fc:	4798      	blx	r3
   1b5fe:	1d3a      	adds	r2, r7, #4
   1b600:	2314      	movs	r3, #20
   1b602:	18fb      	adds	r3, r7, r3
   1b604:	0011      	movs	r1, r2
   1b606:	0018      	movs	r0, r3
   1b608:	4b42      	ldr	r3, [pc, #264]	; (1b714 <xQueueGenericSend+0x394>)
   1b60a:	4798      	blx	r3
   1b60c:	1e03      	subs	r3, r0, #0
   1b60e:	d000      	beq.n	1b612 <xQueueGenericSend+0x292>
   1b610:	e08a      	b.n	1b728 <xQueueGenericSend+0x3a8>
   1b612:	6a3b      	ldr	r3, [r7, #32]
   1b614:	0018      	movs	r0, r3
   1b616:	4b40      	ldr	r3, [pc, #256]	; (1b718 <xQueueGenericSend+0x398>)
   1b618:	4798      	blx	r3
   1b61a:	1e03      	subs	r3, r0, #0
   1b61c:	d04f      	beq.n	1b6be <xQueueGenericSend+0x33e>
   1b61e:	4b2d      	ldr	r3, [pc, #180]	; (1b6d4 <xQueueGenericSend+0x354>)
   1b620:	4798      	blx	r3
   1b622:	0003      	movs	r3, r0
   1b624:	0018      	movs	r0, r3
   1b626:	4b2c      	ldr	r3, [pc, #176]	; (1b6d8 <xQueueGenericSend+0x358>)
   1b628:	4798      	blx	r3
   1b62a:	0003      	movs	r3, r0
   1b62c:	001a      	movs	r2, r3
   1b62e:	4b2b      	ldr	r3, [pc, #172]	; (1b6dc <xQueueGenericSend+0x35c>)
   1b630:	881b      	ldrh	r3, [r3, #0]
   1b632:	4013      	ands	r3, r2
   1b634:	b29b      	uxth	r3, r3
   1b636:	2b00      	cmp	r3, #0
   1b638:	d02e      	beq.n	1b698 <xQueueGenericSend+0x318>
   1b63a:	6a3b      	ldr	r3, [r7, #32]
   1b63c:	0018      	movs	r0, r3
   1b63e:	4b28      	ldr	r3, [pc, #160]	; (1b6e0 <xQueueGenericSend+0x360>)
   1b640:	4798      	blx	r3
   1b642:	0003      	movs	r3, r0
   1b644:	001a      	movs	r2, r3
   1b646:	4b25      	ldr	r3, [pc, #148]	; (1b6dc <xQueueGenericSend+0x35c>)
   1b648:	881b      	ldrh	r3, [r3, #0]
   1b64a:	4013      	ands	r3, r2
   1b64c:	b29b      	uxth	r3, r3
   1b64e:	2b00      	cmp	r3, #0
   1b650:	d022      	beq.n	1b698 <xQueueGenericSend+0x318>
   1b652:	683b      	ldr	r3, [r7, #0]
   1b654:	2b00      	cmp	r3, #0
   1b656:	d10b      	bne.n	1b670 <xQueueGenericSend+0x2f0>
   1b658:	6a3b      	ldr	r3, [r7, #32]
   1b65a:	0018      	movs	r0, r3
   1b65c:	4b21      	ldr	r3, [pc, #132]	; (1b6e4 <xQueueGenericSend+0x364>)
   1b65e:	4798      	blx	r3
   1b660:	0003      	movs	r3, r0
   1b662:	001a      	movs	r2, r3
   1b664:	4b20      	ldr	r3, [pc, #128]	; (1b6e8 <xQueueGenericSend+0x368>)
   1b666:	5c9b      	ldrb	r3, [r3, r2]
   1b668:	3370      	adds	r3, #112	; 0x70
   1b66a:	b2db      	uxtb	r3, r3
   1b66c:	001d      	movs	r5, r3
   1b66e:	e000      	b.n	1b672 <xQueueGenericSend+0x2f2>
   1b670:	2575      	movs	r5, #117	; 0x75
   1b672:	6a3b      	ldr	r3, [r7, #32]
   1b674:	0018      	movs	r0, r3
   1b676:	4b1b      	ldr	r3, [pc, #108]	; (1b6e4 <xQueueGenericSend+0x364>)
   1b678:	4798      	blx	r3
   1b67a:	0003      	movs	r3, r0
   1b67c:	001a      	movs	r2, r3
   1b67e:	4b1a      	ldr	r3, [pc, #104]	; (1b6e8 <xQueueGenericSend+0x368>)
   1b680:	5c9c      	ldrb	r4, [r3, r2]
   1b682:	6a3b      	ldr	r3, [r7, #32]
   1b684:	0018      	movs	r0, r3
   1b686:	4b19      	ldr	r3, [pc, #100]	; (1b6ec <xQueueGenericSend+0x36c>)
   1b688:	4798      	blx	r3
   1b68a:	0003      	movs	r3, r0
   1b68c:	b2db      	uxtb	r3, r3
   1b68e:	001a      	movs	r2, r3
   1b690:	0021      	movs	r1, r4
   1b692:	0028      	movs	r0, r5
   1b694:	4b16      	ldr	r3, [pc, #88]	; (1b6f0 <xQueueGenericSend+0x370>)
   1b696:	4798      	blx	r3
   1b698:	6a3b      	ldr	r3, [r7, #32]
   1b69a:	3310      	adds	r3, #16
   1b69c:	687a      	ldr	r2, [r7, #4]
   1b69e:	0011      	movs	r1, r2
   1b6a0:	0018      	movs	r0, r3
   1b6a2:	4b1e      	ldr	r3, [pc, #120]	; (1b71c <xQueueGenericSend+0x39c>)
   1b6a4:	4798      	blx	r3
   1b6a6:	6a3b      	ldr	r3, [r7, #32]
   1b6a8:	0018      	movs	r0, r3
   1b6aa:	4b1d      	ldr	r3, [pc, #116]	; (1b720 <xQueueGenericSend+0x3a0>)
   1b6ac:	4798      	blx	r3
   1b6ae:	4b1d      	ldr	r3, [pc, #116]	; (1b724 <xQueueGenericSend+0x3a4>)
   1b6b0:	4798      	blx	r3
   1b6b2:	1e03      	subs	r3, r0, #0
   1b6b4:	d000      	beq.n	1b6b8 <xQueueGenericSend+0x338>
   1b6b6:	e69d      	b.n	1b3f4 <xQueueGenericSend+0x74>
   1b6b8:	4b11      	ldr	r3, [pc, #68]	; (1b700 <xQueueGenericSend+0x380>)
   1b6ba:	4798      	blx	r3
   1b6bc:	e69a      	b.n	1b3f4 <xQueueGenericSend+0x74>
   1b6be:	6a3b      	ldr	r3, [r7, #32]
   1b6c0:	0018      	movs	r0, r3
   1b6c2:	4b17      	ldr	r3, [pc, #92]	; (1b720 <xQueueGenericSend+0x3a0>)
   1b6c4:	4798      	blx	r3
   1b6c6:	4b17      	ldr	r3, [pc, #92]	; (1b724 <xQueueGenericSend+0x3a4>)
   1b6c8:	4798      	blx	r3
   1b6ca:	e693      	b.n	1b3f4 <xQueueGenericSend+0x74>
   1b6cc:	0001db0d 	.word	0x0001db0d
   1b6d0:	0001ade9 	.word	0x0001ade9
   1b6d4:	00019081 	.word	0x00019081
   1b6d8:	00018de5 	.word	0x00018de5
   1b6dc:	20000104 	.word	0x20000104
   1b6e0:	00018ea5 	.word	0x00018ea5
   1b6e4:	00018da5 	.word	0x00018da5
   1b6e8:	200000f8 	.word	0x200000f8
   1b6ec:	00018e85 	.word	0x00018e85
   1b6f0:	000197dd 	.word	0x000197dd
   1b6f4:	00019e39 	.word	0x00019e39
   1b6f8:	0001c5b9 	.word	0x0001c5b9
   1b6fc:	0001c8bd 	.word	0x0001c8bd
   1b700:	0001add1 	.word	0x0001add1
   1b704:	0001d67d 	.word	0x0001d67d
   1b708:	0001ae0d 	.word	0x0001ae0d
   1b70c:	0001d7bd 	.word	0x0001d7bd
   1b710:	0001d0a5 	.word	0x0001d0a5
   1b714:	0001d7e5 	.word	0x0001d7e5
   1b718:	0001c80d 	.word	0x0001c80d
   1b71c:	0001d559 	.word	0x0001d559
   1b720:	0001c6e9 	.word	0x0001c6e9
   1b724:	0001d0bd 	.word	0x0001d0bd
   1b728:	6a3b      	ldr	r3, [r7, #32]
   1b72a:	0018      	movs	r0, r3
   1b72c:	4b22      	ldr	r3, [pc, #136]	; (1b7b8 <xQueueGenericSend+0x438>)
   1b72e:	4798      	blx	r3
   1b730:	4b22      	ldr	r3, [pc, #136]	; (1b7bc <xQueueGenericSend+0x43c>)
   1b732:	4798      	blx	r3
   1b734:	4b22      	ldr	r3, [pc, #136]	; (1b7c0 <xQueueGenericSend+0x440>)
   1b736:	4798      	blx	r3
   1b738:	0003      	movs	r3, r0
   1b73a:	0018      	movs	r0, r3
   1b73c:	4b21      	ldr	r3, [pc, #132]	; (1b7c4 <xQueueGenericSend+0x444>)
   1b73e:	4798      	blx	r3
   1b740:	0003      	movs	r3, r0
   1b742:	001a      	movs	r2, r3
   1b744:	4b20      	ldr	r3, [pc, #128]	; (1b7c8 <xQueueGenericSend+0x448>)
   1b746:	881b      	ldrh	r3, [r3, #0]
   1b748:	4013      	ands	r3, r2
   1b74a:	b29b      	uxth	r3, r3
   1b74c:	2b00      	cmp	r3, #0
   1b74e:	d02e      	beq.n	1b7ae <xQueueGenericSend+0x42e>
   1b750:	6a3b      	ldr	r3, [r7, #32]
   1b752:	0018      	movs	r0, r3
   1b754:	4b1d      	ldr	r3, [pc, #116]	; (1b7cc <xQueueGenericSend+0x44c>)
   1b756:	4798      	blx	r3
   1b758:	0003      	movs	r3, r0
   1b75a:	001a      	movs	r2, r3
   1b75c:	4b1a      	ldr	r3, [pc, #104]	; (1b7c8 <xQueueGenericSend+0x448>)
   1b75e:	881b      	ldrh	r3, [r3, #0]
   1b760:	4013      	ands	r3, r2
   1b762:	b29b      	uxth	r3, r3
   1b764:	2b00      	cmp	r3, #0
   1b766:	d022      	beq.n	1b7ae <xQueueGenericSend+0x42e>
   1b768:	683b      	ldr	r3, [r7, #0]
   1b76a:	2b00      	cmp	r3, #0
   1b76c:	d10b      	bne.n	1b786 <xQueueGenericSend+0x406>
   1b76e:	6a3b      	ldr	r3, [r7, #32]
   1b770:	0018      	movs	r0, r3
   1b772:	4b17      	ldr	r3, [pc, #92]	; (1b7d0 <xQueueGenericSend+0x450>)
   1b774:	4798      	blx	r3
   1b776:	0003      	movs	r3, r0
   1b778:	001a      	movs	r2, r3
   1b77a:	4b16      	ldr	r3, [pc, #88]	; (1b7d4 <xQueueGenericSend+0x454>)
   1b77c:	5c9b      	ldrb	r3, [r3, r2]
   1b77e:	3348      	adds	r3, #72	; 0x48
   1b780:	b2db      	uxtb	r3, r3
   1b782:	001d      	movs	r5, r3
   1b784:	e000      	b.n	1b788 <xQueueGenericSend+0x408>
   1b786:	254d      	movs	r5, #77	; 0x4d
   1b788:	6a3b      	ldr	r3, [r7, #32]
   1b78a:	0018      	movs	r0, r3
   1b78c:	4b10      	ldr	r3, [pc, #64]	; (1b7d0 <xQueueGenericSend+0x450>)
   1b78e:	4798      	blx	r3
   1b790:	0003      	movs	r3, r0
   1b792:	001a      	movs	r2, r3
   1b794:	4b0f      	ldr	r3, [pc, #60]	; (1b7d4 <xQueueGenericSend+0x454>)
   1b796:	5c9c      	ldrb	r4, [r3, r2]
   1b798:	6a3b      	ldr	r3, [r7, #32]
   1b79a:	0018      	movs	r0, r3
   1b79c:	4b0e      	ldr	r3, [pc, #56]	; (1b7d8 <xQueueGenericSend+0x458>)
   1b79e:	4798      	blx	r3
   1b7a0:	0003      	movs	r3, r0
   1b7a2:	b2db      	uxtb	r3, r3
   1b7a4:	001a      	movs	r2, r3
   1b7a6:	0021      	movs	r1, r4
   1b7a8:	0028      	movs	r0, r5
   1b7aa:	4b0c      	ldr	r3, [pc, #48]	; (1b7dc <xQueueGenericSend+0x45c>)
   1b7ac:	4798      	blx	r3
   1b7ae:	2300      	movs	r3, #0
   1b7b0:	0018      	movs	r0, r3
   1b7b2:	46bd      	mov	sp, r7
   1b7b4:	b00a      	add	sp, #40	; 0x28
   1b7b6:	bdb0      	pop	{r4, r5, r7, pc}
   1b7b8:	0001c6e9 	.word	0x0001c6e9
   1b7bc:	0001d0bd 	.word	0x0001d0bd
   1b7c0:	00019081 	.word	0x00019081
   1b7c4:	00018de5 	.word	0x00018de5
   1b7c8:	20000104 	.word	0x20000104
   1b7cc:	00018ea5 	.word	0x00018ea5
   1b7d0:	00018da5 	.word	0x00018da5
   1b7d4:	200000f8 	.word	0x200000f8
   1b7d8:	00018e85 	.word	0x00018e85
   1b7dc:	000197dd 	.word	0x000197dd

0001b7e0 <xQueueGenericSendFromISR>:
   1b7e0:	b5b0      	push	{r4, r5, r7, lr}
   1b7e2:	b088      	sub	sp, #32
   1b7e4:	af00      	add	r7, sp, #0
   1b7e6:	60f8      	str	r0, [r7, #12]
   1b7e8:	60b9      	str	r1, [r7, #8]
   1b7ea:	607a      	str	r2, [r7, #4]
   1b7ec:	603b      	str	r3, [r7, #0]
   1b7ee:	68fb      	ldr	r3, [r7, #12]
   1b7f0:	61bb      	str	r3, [r7, #24]
   1b7f2:	69bb      	ldr	r3, [r7, #24]
   1b7f4:	2b00      	cmp	r3, #0
   1b7f6:	d101      	bne.n	1b7fc <xQueueGenericSendFromISR+0x1c>
   1b7f8:	b672      	cpsid	i
   1b7fa:	e7fe      	b.n	1b7fa <xQueueGenericSendFromISR+0x1a>
   1b7fc:	68bb      	ldr	r3, [r7, #8]
   1b7fe:	2b00      	cmp	r3, #0
   1b800:	d103      	bne.n	1b80a <xQueueGenericSendFromISR+0x2a>
   1b802:	69bb      	ldr	r3, [r7, #24]
   1b804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b806:	2b00      	cmp	r3, #0
   1b808:	d101      	bne.n	1b80e <xQueueGenericSendFromISR+0x2e>
   1b80a:	2301      	movs	r3, #1
   1b80c:	e000      	b.n	1b810 <xQueueGenericSendFromISR+0x30>
   1b80e:	2300      	movs	r3, #0
   1b810:	2b00      	cmp	r3, #0
   1b812:	d101      	bne.n	1b818 <xQueueGenericSendFromISR+0x38>
   1b814:	b672      	cpsid	i
   1b816:	e7fe      	b.n	1b816 <xQueueGenericSendFromISR+0x36>
   1b818:	683b      	ldr	r3, [r7, #0]
   1b81a:	2b02      	cmp	r3, #2
   1b81c:	d103      	bne.n	1b826 <xQueueGenericSendFromISR+0x46>
   1b81e:	69bb      	ldr	r3, [r7, #24]
   1b820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b822:	2b01      	cmp	r3, #1
   1b824:	d101      	bne.n	1b82a <xQueueGenericSendFromISR+0x4a>
   1b826:	2301      	movs	r3, #1
   1b828:	e000      	b.n	1b82c <xQueueGenericSendFromISR+0x4c>
   1b82a:	2300      	movs	r3, #0
   1b82c:	2b00      	cmp	r3, #0
   1b82e:	d101      	bne.n	1b834 <xQueueGenericSendFromISR+0x54>
   1b830:	b672      	cpsid	i
   1b832:	e7fe      	b.n	1b832 <xQueueGenericSendFromISR+0x52>
   1b834:	4b68      	ldr	r3, [pc, #416]	; (1b9d8 <xQueueGenericSendFromISR+0x1f8>)
   1b836:	4798      	blx	r3
   1b838:	0003      	movs	r3, r0
   1b83a:	617b      	str	r3, [r7, #20]
   1b83c:	69bb      	ldr	r3, [r7, #24]
   1b83e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1b840:	69bb      	ldr	r3, [r7, #24]
   1b842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b844:	429a      	cmp	r2, r3
   1b846:	d303      	bcc.n	1b850 <xQueueGenericSendFromISR+0x70>
   1b848:	683b      	ldr	r3, [r7, #0]
   1b84a:	2b02      	cmp	r3, #2
   1b84c:	d000      	beq.n	1b850 <xQueueGenericSendFromISR+0x70>
   1b84e:	e088      	b.n	1b962 <xQueueGenericSendFromISR+0x182>
   1b850:	2313      	movs	r3, #19
   1b852:	18fb      	adds	r3, r7, r3
   1b854:	69ba      	ldr	r2, [r7, #24]
   1b856:	2145      	movs	r1, #69	; 0x45
   1b858:	5c52      	ldrb	r2, [r2, r1]
   1b85a:	701a      	strb	r2, [r3, #0]
   1b85c:	69bb      	ldr	r3, [r7, #24]
   1b85e:	0018      	movs	r0, r3
   1b860:	4b5e      	ldr	r3, [pc, #376]	; (1b9dc <xQueueGenericSendFromISR+0x1fc>)
   1b862:	4798      	blx	r3
   1b864:	0003      	movs	r3, r0
   1b866:	001a      	movs	r2, r3
   1b868:	4b5d      	ldr	r3, [pc, #372]	; (1b9e0 <xQueueGenericSendFromISR+0x200>)
   1b86a:	881b      	ldrh	r3, [r3, #0]
   1b86c:	4013      	ands	r3, r2
   1b86e:	b29b      	uxth	r3, r3
   1b870:	2b00      	cmp	r3, #0
   1b872:	d022      	beq.n	1b8ba <xQueueGenericSendFromISR+0xda>
   1b874:	683b      	ldr	r3, [r7, #0]
   1b876:	2b00      	cmp	r3, #0
   1b878:	d10b      	bne.n	1b892 <xQueueGenericSendFromISR+0xb2>
   1b87a:	69bb      	ldr	r3, [r7, #24]
   1b87c:	0018      	movs	r0, r3
   1b87e:	4b59      	ldr	r3, [pc, #356]	; (1b9e4 <xQueueGenericSendFromISR+0x204>)
   1b880:	4798      	blx	r3
   1b882:	0003      	movs	r3, r0
   1b884:	001a      	movs	r2, r3
   1b886:	4b58      	ldr	r3, [pc, #352]	; (1b9e8 <xQueueGenericSendFromISR+0x208>)
   1b888:	5c9b      	ldrb	r3, [r3, r2]
   1b88a:	3330      	adds	r3, #48	; 0x30
   1b88c:	b2db      	uxtb	r3, r3
   1b88e:	001d      	movs	r5, r3
   1b890:	e000      	b.n	1b894 <xQueueGenericSendFromISR+0xb4>
   1b892:	2535      	movs	r5, #53	; 0x35
   1b894:	69bb      	ldr	r3, [r7, #24]
   1b896:	0018      	movs	r0, r3
   1b898:	4b52      	ldr	r3, [pc, #328]	; (1b9e4 <xQueueGenericSendFromISR+0x204>)
   1b89a:	4798      	blx	r3
   1b89c:	0003      	movs	r3, r0
   1b89e:	001a      	movs	r2, r3
   1b8a0:	4b51      	ldr	r3, [pc, #324]	; (1b9e8 <xQueueGenericSendFromISR+0x208>)
   1b8a2:	5c9c      	ldrb	r4, [r3, r2]
   1b8a4:	69bb      	ldr	r3, [r7, #24]
   1b8a6:	0018      	movs	r0, r3
   1b8a8:	4b50      	ldr	r3, [pc, #320]	; (1b9ec <xQueueGenericSendFromISR+0x20c>)
   1b8aa:	4798      	blx	r3
   1b8ac:	0003      	movs	r3, r0
   1b8ae:	b2db      	uxtb	r3, r3
   1b8b0:	001a      	movs	r2, r3
   1b8b2:	0021      	movs	r1, r4
   1b8b4:	0028      	movs	r0, r5
   1b8b6:	4b4e      	ldr	r3, [pc, #312]	; (1b9f0 <xQueueGenericSendFromISR+0x210>)
   1b8b8:	4798      	blx	r3
   1b8ba:	69bb      	ldr	r3, [r7, #24]
   1b8bc:	0018      	movs	r0, r3
   1b8be:	4b49      	ldr	r3, [pc, #292]	; (1b9e4 <xQueueGenericSendFromISR+0x204>)
   1b8c0:	4798      	blx	r3
   1b8c2:	0003      	movs	r3, r0
   1b8c4:	001a      	movs	r2, r3
   1b8c6:	4b48      	ldr	r3, [pc, #288]	; (1b9e8 <xQueueGenericSendFromISR+0x208>)
   1b8c8:	5c9c      	ldrb	r4, [r3, r2]
   1b8ca:	69bb      	ldr	r3, [r7, #24]
   1b8cc:	0018      	movs	r0, r3
   1b8ce:	4b47      	ldr	r3, [pc, #284]	; (1b9ec <xQueueGenericSendFromISR+0x20c>)
   1b8d0:	4798      	blx	r3
   1b8d2:	0003      	movs	r3, r0
   1b8d4:	b2d9      	uxtb	r1, r3
   1b8d6:	69bb      	ldr	r3, [r7, #24]
   1b8d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b8da:	b2db      	uxtb	r3, r3
   1b8dc:	3301      	adds	r3, #1
   1b8de:	b2db      	uxtb	r3, r3
   1b8e0:	001a      	movs	r2, r3
   1b8e2:	0020      	movs	r0, r4
   1b8e4:	4b43      	ldr	r3, [pc, #268]	; (1b9f4 <xQueueGenericSendFromISR+0x214>)
   1b8e6:	4798      	blx	r3
   1b8e8:	683a      	ldr	r2, [r7, #0]
   1b8ea:	68b9      	ldr	r1, [r7, #8]
   1b8ec:	69bb      	ldr	r3, [r7, #24]
   1b8ee:	0018      	movs	r0, r3
   1b8f0:	4b41      	ldr	r3, [pc, #260]	; (1b9f8 <xQueueGenericSendFromISR+0x218>)
   1b8f2:	4798      	blx	r3
   1b8f4:	2313      	movs	r3, #19
   1b8f6:	18fb      	adds	r3, r7, r3
   1b8f8:	781b      	ldrb	r3, [r3, #0]
   1b8fa:	b25b      	sxtb	r3, r3
   1b8fc:	3301      	adds	r3, #1
   1b8fe:	d124      	bne.n	1b94a <xQueueGenericSendFromISR+0x16a>
   1b900:	69bb      	ldr	r3, [r7, #24]
   1b902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1b904:	2b00      	cmp	r3, #0
   1b906:	d00e      	beq.n	1b926 <xQueueGenericSendFromISR+0x146>
   1b908:	683a      	ldr	r2, [r7, #0]
   1b90a:	69bb      	ldr	r3, [r7, #24]
   1b90c:	0011      	movs	r1, r2
   1b90e:	0018      	movs	r0, r3
   1b910:	4b3a      	ldr	r3, [pc, #232]	; (1b9fc <xQueueGenericSendFromISR+0x21c>)
   1b912:	4798      	blx	r3
   1b914:	1e03      	subs	r3, r0, #0
   1b916:	d021      	beq.n	1b95c <xQueueGenericSendFromISR+0x17c>
   1b918:	687b      	ldr	r3, [r7, #4]
   1b91a:	2b00      	cmp	r3, #0
   1b91c:	d01e      	beq.n	1b95c <xQueueGenericSendFromISR+0x17c>
   1b91e:	687b      	ldr	r3, [r7, #4]
   1b920:	2201      	movs	r2, #1
   1b922:	601a      	str	r2, [r3, #0]
   1b924:	e01a      	b.n	1b95c <xQueueGenericSendFromISR+0x17c>
   1b926:	69bb      	ldr	r3, [r7, #24]
   1b928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b92a:	2b00      	cmp	r3, #0
   1b92c:	d016      	beq.n	1b95c <xQueueGenericSendFromISR+0x17c>
   1b92e:	69bb      	ldr	r3, [r7, #24]
   1b930:	3324      	adds	r3, #36	; 0x24
   1b932:	0018      	movs	r0, r3
   1b934:	4b32      	ldr	r3, [pc, #200]	; (1ba00 <xQueueGenericSendFromISR+0x220>)
   1b936:	4798      	blx	r3
   1b938:	1e03      	subs	r3, r0, #0
   1b93a:	d00f      	beq.n	1b95c <xQueueGenericSendFromISR+0x17c>
   1b93c:	687b      	ldr	r3, [r7, #4]
   1b93e:	2b00      	cmp	r3, #0
   1b940:	d00c      	beq.n	1b95c <xQueueGenericSendFromISR+0x17c>
   1b942:	687b      	ldr	r3, [r7, #4]
   1b944:	2201      	movs	r2, #1
   1b946:	601a      	str	r2, [r3, #0]
   1b948:	e008      	b.n	1b95c <xQueueGenericSendFromISR+0x17c>
   1b94a:	2313      	movs	r3, #19
   1b94c:	18fb      	adds	r3, r7, r3
   1b94e:	781b      	ldrb	r3, [r3, #0]
   1b950:	3301      	adds	r3, #1
   1b952:	b2db      	uxtb	r3, r3
   1b954:	b259      	sxtb	r1, r3
   1b956:	69bb      	ldr	r3, [r7, #24]
   1b958:	2245      	movs	r2, #69	; 0x45
   1b95a:	5499      	strb	r1, [r3, r2]
   1b95c:	2301      	movs	r3, #1
   1b95e:	61fb      	str	r3, [r7, #28]
   1b960:	e030      	b.n	1b9c4 <xQueueGenericSendFromISR+0x1e4>
   1b962:	69bb      	ldr	r3, [r7, #24]
   1b964:	0018      	movs	r0, r3
   1b966:	4b1d      	ldr	r3, [pc, #116]	; (1b9dc <xQueueGenericSendFromISR+0x1fc>)
   1b968:	4798      	blx	r3
   1b96a:	0003      	movs	r3, r0
   1b96c:	001a      	movs	r2, r3
   1b96e:	4b1c      	ldr	r3, [pc, #112]	; (1b9e0 <xQueueGenericSendFromISR+0x200>)
   1b970:	881b      	ldrh	r3, [r3, #0]
   1b972:	4013      	ands	r3, r2
   1b974:	b29b      	uxth	r3, r3
   1b976:	2b00      	cmp	r3, #0
   1b978:	d022      	beq.n	1b9c0 <xQueueGenericSendFromISR+0x1e0>
   1b97a:	683b      	ldr	r3, [r7, #0]
   1b97c:	2b00      	cmp	r3, #0
   1b97e:	d10b      	bne.n	1b998 <xQueueGenericSendFromISR+0x1b8>
   1b980:	69bb      	ldr	r3, [r7, #24]
   1b982:	0018      	movs	r0, r3
   1b984:	4b17      	ldr	r3, [pc, #92]	; (1b9e4 <xQueueGenericSendFromISR+0x204>)
   1b986:	4798      	blx	r3
   1b988:	0003      	movs	r3, r0
   1b98a:	001a      	movs	r2, r3
   1b98c:	4b16      	ldr	r3, [pc, #88]	; (1b9e8 <xQueueGenericSendFromISR+0x208>)
   1b98e:	5c9b      	ldrb	r3, [r3, r2]
   1b990:	3358      	adds	r3, #88	; 0x58
   1b992:	b2db      	uxtb	r3, r3
   1b994:	001d      	movs	r5, r3
   1b996:	e000      	b.n	1b99a <xQueueGenericSendFromISR+0x1ba>
   1b998:	255d      	movs	r5, #93	; 0x5d
   1b99a:	69bb      	ldr	r3, [r7, #24]
   1b99c:	0018      	movs	r0, r3
   1b99e:	4b11      	ldr	r3, [pc, #68]	; (1b9e4 <xQueueGenericSendFromISR+0x204>)
   1b9a0:	4798      	blx	r3
   1b9a2:	0003      	movs	r3, r0
   1b9a4:	001a      	movs	r2, r3
   1b9a6:	4b10      	ldr	r3, [pc, #64]	; (1b9e8 <xQueueGenericSendFromISR+0x208>)
   1b9a8:	5c9c      	ldrb	r4, [r3, r2]
   1b9aa:	69bb      	ldr	r3, [r7, #24]
   1b9ac:	0018      	movs	r0, r3
   1b9ae:	4b0f      	ldr	r3, [pc, #60]	; (1b9ec <xQueueGenericSendFromISR+0x20c>)
   1b9b0:	4798      	blx	r3
   1b9b2:	0003      	movs	r3, r0
   1b9b4:	b2db      	uxtb	r3, r3
   1b9b6:	001a      	movs	r2, r3
   1b9b8:	0021      	movs	r1, r4
   1b9ba:	0028      	movs	r0, r5
   1b9bc:	4b0c      	ldr	r3, [pc, #48]	; (1b9f0 <xQueueGenericSendFromISR+0x210>)
   1b9be:	4798      	blx	r3
   1b9c0:	2300      	movs	r3, #0
   1b9c2:	61fb      	str	r3, [r7, #28]
   1b9c4:	697b      	ldr	r3, [r7, #20]
   1b9c6:	0018      	movs	r0, r3
   1b9c8:	4b0e      	ldr	r3, [pc, #56]	; (1ba04 <xQueueGenericSendFromISR+0x224>)
   1b9ca:	4798      	blx	r3
   1b9cc:	69fb      	ldr	r3, [r7, #28]
   1b9ce:	0018      	movs	r0, r3
   1b9d0:	46bd      	mov	sp, r7
   1b9d2:	b008      	add	sp, #32
   1b9d4:	bdb0      	pop	{r4, r5, r7, pc}
   1b9d6:	46c0      	nop			; (mov r8, r8)
   1b9d8:	0001ae3d 	.word	0x0001ae3d
   1b9dc:	00018ea5 	.word	0x00018ea5
   1b9e0:	20000104 	.word	0x20000104
   1b9e4:	00018da5 	.word	0x00018da5
   1b9e8:	200000f8 	.word	0x200000f8
   1b9ec:	00018e85 	.word	0x00018e85
   1b9f0:	000197dd 	.word	0x000197dd
   1b9f4:	00019e39 	.word	0x00019e39
   1b9f8:	0001c5b9 	.word	0x0001c5b9
   1b9fc:	0001c8bd 	.word	0x0001c8bd
   1ba00:	0001d67d 	.word	0x0001d67d
   1ba04:	0001ae49 	.word	0x0001ae49

0001ba08 <xQueueGiveFromISR>:
   1ba08:	b580      	push	{r7, lr}
   1ba0a:	b082      	sub	sp, #8
   1ba0c:	af00      	add	r7, sp, #0
   1ba0e:	6078      	str	r0, [r7, #4]
   1ba10:	6039      	str	r1, [r7, #0]
   1ba12:	6839      	ldr	r1, [r7, #0]
   1ba14:	687b      	ldr	r3, [r7, #4]
   1ba16:	2200      	movs	r2, #0
   1ba18:	0018      	movs	r0, r3
   1ba1a:	4b03      	ldr	r3, [pc, #12]	; (1ba28 <xQueueGiveFromISR+0x20>)
   1ba1c:	4798      	blx	r3
   1ba1e:	0003      	movs	r3, r0
   1ba20:	0018      	movs	r0, r3
   1ba22:	46bd      	mov	sp, r7
   1ba24:	b002      	add	sp, #8
   1ba26:	bd80      	pop	{r7, pc}
   1ba28:	0001ba2d 	.word	0x0001ba2d

0001ba2c <MyWrapper>:
   1ba2c:	b5b0      	push	{r4, r5, r7, lr}
   1ba2e:	b08a      	sub	sp, #40	; 0x28
   1ba30:	af00      	add	r7, sp, #0
   1ba32:	60f8      	str	r0, [r7, #12]
   1ba34:	60b9      	str	r1, [r7, #8]
   1ba36:	607a      	str	r2, [r7, #4]
   1ba38:	68fb      	ldr	r3, [r7, #12]
   1ba3a:	623b      	str	r3, [r7, #32]
   1ba3c:	6a3b      	ldr	r3, [r7, #32]
   1ba3e:	2b00      	cmp	r3, #0
   1ba40:	d101      	bne.n	1ba46 <MyWrapper+0x1a>
   1ba42:	b672      	cpsid	i
   1ba44:	e7fe      	b.n	1ba44 <MyWrapper+0x18>
   1ba46:	6a3b      	ldr	r3, [r7, #32]
   1ba48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ba4a:	2b00      	cmp	r3, #0
   1ba4c:	d001      	beq.n	1ba52 <MyWrapper+0x26>
   1ba4e:	b672      	cpsid	i
   1ba50:	e7fe      	b.n	1ba50 <MyWrapper+0x24>
   1ba52:	6a3b      	ldr	r3, [r7, #32]
   1ba54:	681b      	ldr	r3, [r3, #0]
   1ba56:	2b00      	cmp	r3, #0
   1ba58:	d103      	bne.n	1ba62 <MyWrapper+0x36>
   1ba5a:	6a3b      	ldr	r3, [r7, #32]
   1ba5c:	685b      	ldr	r3, [r3, #4]
   1ba5e:	2b00      	cmp	r3, #0
   1ba60:	d101      	bne.n	1ba66 <MyWrapper+0x3a>
   1ba62:	2301      	movs	r3, #1
   1ba64:	e000      	b.n	1ba68 <MyWrapper+0x3c>
   1ba66:	2300      	movs	r3, #0
   1ba68:	2b00      	cmp	r3, #0
   1ba6a:	d101      	bne.n	1ba70 <MyWrapper+0x44>
   1ba6c:	b672      	cpsid	i
   1ba6e:	e7fe      	b.n	1ba6e <MyWrapper+0x42>
   1ba70:	4b66      	ldr	r3, [pc, #408]	; (1bc0c <MyWrapper+0x1e0>)
   1ba72:	4798      	blx	r3
   1ba74:	0003      	movs	r3, r0
   1ba76:	61fb      	str	r3, [r7, #28]
   1ba78:	6a3b      	ldr	r3, [r7, #32]
   1ba7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1ba7c:	61bb      	str	r3, [r7, #24]
   1ba7e:	6a3b      	ldr	r3, [r7, #32]
   1ba80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1ba82:	69bb      	ldr	r3, [r7, #24]
   1ba84:	429a      	cmp	r2, r3
   1ba86:	d800      	bhi.n	1ba8a <MyWrapper+0x5e>
   1ba88:	e085      	b.n	1bb96 <MyWrapper+0x16a>
   1ba8a:	2317      	movs	r3, #23
   1ba8c:	18fb      	adds	r3, r7, r3
   1ba8e:	6a3a      	ldr	r2, [r7, #32]
   1ba90:	2145      	movs	r1, #69	; 0x45
   1ba92:	5c52      	ldrb	r2, [r2, r1]
   1ba94:	701a      	strb	r2, [r3, #0]
   1ba96:	6a3b      	ldr	r3, [r7, #32]
   1ba98:	0018      	movs	r0, r3
   1ba9a:	4b5d      	ldr	r3, [pc, #372]	; (1bc10 <MyWrapper+0x1e4>)
   1ba9c:	4798      	blx	r3
   1ba9e:	0003      	movs	r3, r0
   1baa0:	001a      	movs	r2, r3
   1baa2:	4b5c      	ldr	r3, [pc, #368]	; (1bc14 <MyWrapper+0x1e8>)
   1baa4:	881b      	ldrh	r3, [r3, #0]
   1baa6:	4013      	ands	r3, r2
   1baa8:	b29b      	uxth	r3, r3
   1baaa:	2b00      	cmp	r3, #0
   1baac:	d022      	beq.n	1baf4 <MyWrapper+0xc8>
   1baae:	687b      	ldr	r3, [r7, #4]
   1bab0:	2b00      	cmp	r3, #0
   1bab2:	d10b      	bne.n	1bacc <MyWrapper+0xa0>
   1bab4:	6a3b      	ldr	r3, [r7, #32]
   1bab6:	0018      	movs	r0, r3
   1bab8:	4b57      	ldr	r3, [pc, #348]	; (1bc18 <MyWrapper+0x1ec>)
   1baba:	4798      	blx	r3
   1babc:	0003      	movs	r3, r0
   1babe:	001a      	movs	r2, r3
   1bac0:	4b56      	ldr	r3, [pc, #344]	; (1bc1c <MyWrapper+0x1f0>)
   1bac2:	5c9b      	ldrb	r3, [r3, r2]
   1bac4:	3330      	adds	r3, #48	; 0x30
   1bac6:	b2db      	uxtb	r3, r3
   1bac8:	001d      	movs	r5, r3
   1baca:	e000      	b.n	1bace <MyWrapper+0xa2>
   1bacc:	2535      	movs	r5, #53	; 0x35
   1bace:	6a3b      	ldr	r3, [r7, #32]
   1bad0:	0018      	movs	r0, r3
   1bad2:	4b51      	ldr	r3, [pc, #324]	; (1bc18 <MyWrapper+0x1ec>)
   1bad4:	4798      	blx	r3
   1bad6:	0003      	movs	r3, r0
   1bad8:	001a      	movs	r2, r3
   1bada:	4b50      	ldr	r3, [pc, #320]	; (1bc1c <MyWrapper+0x1f0>)
   1badc:	5c9c      	ldrb	r4, [r3, r2]
   1bade:	6a3b      	ldr	r3, [r7, #32]
   1bae0:	0018      	movs	r0, r3
   1bae2:	4b4f      	ldr	r3, [pc, #316]	; (1bc20 <MyWrapper+0x1f4>)
   1bae4:	4798      	blx	r3
   1bae6:	0003      	movs	r3, r0
   1bae8:	b2db      	uxtb	r3, r3
   1baea:	001a      	movs	r2, r3
   1baec:	0021      	movs	r1, r4
   1baee:	0028      	movs	r0, r5
   1baf0:	4b4c      	ldr	r3, [pc, #304]	; (1bc24 <MyWrapper+0x1f8>)
   1baf2:	4798      	blx	r3
   1baf4:	6a3b      	ldr	r3, [r7, #32]
   1baf6:	0018      	movs	r0, r3
   1baf8:	4b47      	ldr	r3, [pc, #284]	; (1bc18 <MyWrapper+0x1ec>)
   1bafa:	4798      	blx	r3
   1bafc:	0003      	movs	r3, r0
   1bafe:	001a      	movs	r2, r3
   1bb00:	4b46      	ldr	r3, [pc, #280]	; (1bc1c <MyWrapper+0x1f0>)
   1bb02:	5c9c      	ldrb	r4, [r3, r2]
   1bb04:	6a3b      	ldr	r3, [r7, #32]
   1bb06:	0018      	movs	r0, r3
   1bb08:	4b45      	ldr	r3, [pc, #276]	; (1bc20 <MyWrapper+0x1f4>)
   1bb0a:	4798      	blx	r3
   1bb0c:	0003      	movs	r3, r0
   1bb0e:	b2d9      	uxtb	r1, r3
   1bb10:	6a3b      	ldr	r3, [r7, #32]
   1bb12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1bb14:	b2db      	uxtb	r3, r3
   1bb16:	3301      	adds	r3, #1
   1bb18:	b2db      	uxtb	r3, r3
   1bb1a:	001a      	movs	r2, r3
   1bb1c:	0020      	movs	r0, r4
   1bb1e:	4b42      	ldr	r3, [pc, #264]	; (1bc28 <MyWrapper+0x1fc>)
   1bb20:	4798      	blx	r3
   1bb22:	69bb      	ldr	r3, [r7, #24]
   1bb24:	1c5a      	adds	r2, r3, #1
   1bb26:	6a3b      	ldr	r3, [r7, #32]
   1bb28:	639a      	str	r2, [r3, #56]	; 0x38
   1bb2a:	2317      	movs	r3, #23
   1bb2c:	18fb      	adds	r3, r7, r3
   1bb2e:	781b      	ldrb	r3, [r3, #0]
   1bb30:	b25b      	sxtb	r3, r3
   1bb32:	3301      	adds	r3, #1
   1bb34:	d123      	bne.n	1bb7e <MyWrapper+0x152>
   1bb36:	6a3b      	ldr	r3, [r7, #32]
   1bb38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1bb3a:	2b00      	cmp	r3, #0
   1bb3c:	d00d      	beq.n	1bb5a <MyWrapper+0x12e>
   1bb3e:	6a3b      	ldr	r3, [r7, #32]
   1bb40:	2100      	movs	r1, #0
   1bb42:	0018      	movs	r0, r3
   1bb44:	4b39      	ldr	r3, [pc, #228]	; (1bc2c <MyWrapper+0x200>)
   1bb46:	4798      	blx	r3
   1bb48:	1e03      	subs	r3, r0, #0
   1bb4a:	d021      	beq.n	1bb90 <MyWrapper+0x164>
   1bb4c:	68bb      	ldr	r3, [r7, #8]
   1bb4e:	2b00      	cmp	r3, #0
   1bb50:	d01e      	beq.n	1bb90 <MyWrapper+0x164>
   1bb52:	68bb      	ldr	r3, [r7, #8]
   1bb54:	2201      	movs	r2, #1
   1bb56:	601a      	str	r2, [r3, #0]
   1bb58:	e01a      	b.n	1bb90 <MyWrapper+0x164>
   1bb5a:	6a3b      	ldr	r3, [r7, #32]
   1bb5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1bb5e:	2b00      	cmp	r3, #0
   1bb60:	d016      	beq.n	1bb90 <MyWrapper+0x164>
   1bb62:	6a3b      	ldr	r3, [r7, #32]
   1bb64:	3324      	adds	r3, #36	; 0x24
   1bb66:	0018      	movs	r0, r3
   1bb68:	4b31      	ldr	r3, [pc, #196]	; (1bc30 <MyWrapper+0x204>)
   1bb6a:	4798      	blx	r3
   1bb6c:	1e03      	subs	r3, r0, #0
   1bb6e:	d00f      	beq.n	1bb90 <MyWrapper+0x164>
   1bb70:	68bb      	ldr	r3, [r7, #8]
   1bb72:	2b00      	cmp	r3, #0
   1bb74:	d00c      	beq.n	1bb90 <MyWrapper+0x164>
   1bb76:	68bb      	ldr	r3, [r7, #8]
   1bb78:	2201      	movs	r2, #1
   1bb7a:	601a      	str	r2, [r3, #0]
   1bb7c:	e008      	b.n	1bb90 <MyWrapper+0x164>
   1bb7e:	2317      	movs	r3, #23
   1bb80:	18fb      	adds	r3, r7, r3
   1bb82:	781b      	ldrb	r3, [r3, #0]
   1bb84:	3301      	adds	r3, #1
   1bb86:	b2db      	uxtb	r3, r3
   1bb88:	b259      	sxtb	r1, r3
   1bb8a:	6a3b      	ldr	r3, [r7, #32]
   1bb8c:	2245      	movs	r2, #69	; 0x45
   1bb8e:	5499      	strb	r1, [r3, r2]
   1bb90:	2301      	movs	r3, #1
   1bb92:	627b      	str	r3, [r7, #36]	; 0x24
   1bb94:	e030      	b.n	1bbf8 <MyWrapper+0x1cc>
   1bb96:	6a3b      	ldr	r3, [r7, #32]
   1bb98:	0018      	movs	r0, r3
   1bb9a:	4b1d      	ldr	r3, [pc, #116]	; (1bc10 <MyWrapper+0x1e4>)
   1bb9c:	4798      	blx	r3
   1bb9e:	0003      	movs	r3, r0
   1bba0:	001a      	movs	r2, r3
   1bba2:	4b1c      	ldr	r3, [pc, #112]	; (1bc14 <MyWrapper+0x1e8>)
   1bba4:	881b      	ldrh	r3, [r3, #0]
   1bba6:	4013      	ands	r3, r2
   1bba8:	b29b      	uxth	r3, r3
   1bbaa:	2b00      	cmp	r3, #0
   1bbac:	d022      	beq.n	1bbf4 <MyWrapper+0x1c8>
   1bbae:	687b      	ldr	r3, [r7, #4]
   1bbb0:	2b00      	cmp	r3, #0
   1bbb2:	d10b      	bne.n	1bbcc <MyWrapper+0x1a0>
   1bbb4:	6a3b      	ldr	r3, [r7, #32]
   1bbb6:	0018      	movs	r0, r3
   1bbb8:	4b17      	ldr	r3, [pc, #92]	; (1bc18 <MyWrapper+0x1ec>)
   1bbba:	4798      	blx	r3
   1bbbc:	0003      	movs	r3, r0
   1bbbe:	001a      	movs	r2, r3
   1bbc0:	4b16      	ldr	r3, [pc, #88]	; (1bc1c <MyWrapper+0x1f0>)
   1bbc2:	5c9b      	ldrb	r3, [r3, r2]
   1bbc4:	3358      	adds	r3, #88	; 0x58
   1bbc6:	b2db      	uxtb	r3, r3
   1bbc8:	001d      	movs	r5, r3
   1bbca:	e000      	b.n	1bbce <MyWrapper+0x1a2>
   1bbcc:	255d      	movs	r5, #93	; 0x5d
   1bbce:	6a3b      	ldr	r3, [r7, #32]
   1bbd0:	0018      	movs	r0, r3
   1bbd2:	4b11      	ldr	r3, [pc, #68]	; (1bc18 <MyWrapper+0x1ec>)
   1bbd4:	4798      	blx	r3
   1bbd6:	0003      	movs	r3, r0
   1bbd8:	001a      	movs	r2, r3
   1bbda:	4b10      	ldr	r3, [pc, #64]	; (1bc1c <MyWrapper+0x1f0>)
   1bbdc:	5c9c      	ldrb	r4, [r3, r2]
   1bbde:	6a3b      	ldr	r3, [r7, #32]
   1bbe0:	0018      	movs	r0, r3
   1bbe2:	4b0f      	ldr	r3, [pc, #60]	; (1bc20 <MyWrapper+0x1f4>)
   1bbe4:	4798      	blx	r3
   1bbe6:	0003      	movs	r3, r0
   1bbe8:	b2db      	uxtb	r3, r3
   1bbea:	001a      	movs	r2, r3
   1bbec:	0021      	movs	r1, r4
   1bbee:	0028      	movs	r0, r5
   1bbf0:	4b0c      	ldr	r3, [pc, #48]	; (1bc24 <MyWrapper+0x1f8>)
   1bbf2:	4798      	blx	r3
   1bbf4:	2300      	movs	r3, #0
   1bbf6:	627b      	str	r3, [r7, #36]	; 0x24
   1bbf8:	69fb      	ldr	r3, [r7, #28]
   1bbfa:	0018      	movs	r0, r3
   1bbfc:	4b0d      	ldr	r3, [pc, #52]	; (1bc34 <MyWrapper+0x208>)
   1bbfe:	4798      	blx	r3
   1bc00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bc02:	0018      	movs	r0, r3
   1bc04:	46bd      	mov	sp, r7
   1bc06:	b00a      	add	sp, #40	; 0x28
   1bc08:	bdb0      	pop	{r4, r5, r7, pc}
   1bc0a:	46c0      	nop			; (mov r8, r8)
   1bc0c:	0001ae3d 	.word	0x0001ae3d
   1bc10:	00018ea5 	.word	0x00018ea5
   1bc14:	20000104 	.word	0x20000104
   1bc18:	00018da5 	.word	0x00018da5
   1bc1c:	200000f8 	.word	0x200000f8
   1bc20:	00018e85 	.word	0x00018e85
   1bc24:	000197dd 	.word	0x000197dd
   1bc28:	00019e39 	.word	0x00019e39
   1bc2c:	0001c8bd 	.word	0x0001c8bd
   1bc30:	0001d67d 	.word	0x0001d67d
   1bc34:	0001ae49 	.word	0x0001ae49

0001bc38 <xQueueReceive>:
   1bc38:	b5b0      	push	{r4, r5, r7, lr}
   1bc3a:	b08a      	sub	sp, #40	; 0x28
   1bc3c:	af00      	add	r7, sp, #0
   1bc3e:	60f8      	str	r0, [r7, #12]
   1bc40:	60b9      	str	r1, [r7, #8]
   1bc42:	607a      	str	r2, [r7, #4]
   1bc44:	2300      	movs	r3, #0
   1bc46:	627b      	str	r3, [r7, #36]	; 0x24
   1bc48:	68fb      	ldr	r3, [r7, #12]
   1bc4a:	623b      	str	r3, [r7, #32]
   1bc4c:	6a3b      	ldr	r3, [r7, #32]
   1bc4e:	2b00      	cmp	r3, #0
   1bc50:	d101      	bne.n	1bc56 <xQueueReceive+0x1e>
   1bc52:	b672      	cpsid	i
   1bc54:	e7fe      	b.n	1bc54 <xQueueReceive+0x1c>
   1bc56:	68bb      	ldr	r3, [r7, #8]
   1bc58:	2b00      	cmp	r3, #0
   1bc5a:	d103      	bne.n	1bc64 <xQueueReceive+0x2c>
   1bc5c:	6a3b      	ldr	r3, [r7, #32]
   1bc5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1bc60:	2b00      	cmp	r3, #0
   1bc62:	d101      	bne.n	1bc68 <xQueueReceive+0x30>
   1bc64:	2301      	movs	r3, #1
   1bc66:	e000      	b.n	1bc6a <xQueueReceive+0x32>
   1bc68:	2300      	movs	r3, #0
   1bc6a:	2b00      	cmp	r3, #0
   1bc6c:	d101      	bne.n	1bc72 <xQueueReceive+0x3a>
   1bc6e:	b672      	cpsid	i
   1bc70:	e7fe      	b.n	1bc70 <xQueueReceive+0x38>
   1bc72:	4bbf      	ldr	r3, [pc, #764]	; (1bf70 <xQueueReceive+0x338>)
   1bc74:	4798      	blx	r3
   1bc76:	1e03      	subs	r3, r0, #0
   1bc78:	d102      	bne.n	1bc80 <xQueueReceive+0x48>
   1bc7a:	687b      	ldr	r3, [r7, #4]
   1bc7c:	2b00      	cmp	r3, #0
   1bc7e:	d101      	bne.n	1bc84 <xQueueReceive+0x4c>
   1bc80:	2301      	movs	r3, #1
   1bc82:	e000      	b.n	1bc86 <xQueueReceive+0x4e>
   1bc84:	2300      	movs	r3, #0
   1bc86:	2b00      	cmp	r3, #0
   1bc88:	d101      	bne.n	1bc8e <xQueueReceive+0x56>
   1bc8a:	b672      	cpsid	i
   1bc8c:	e7fe      	b.n	1bc8c <xQueueReceive+0x54>
   1bc8e:	4bb9      	ldr	r3, [pc, #740]	; (1bf74 <xQueueReceive+0x33c>)
   1bc90:	4798      	blx	r3
   1bc92:	6a3b      	ldr	r3, [r7, #32]
   1bc94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1bc96:	61fb      	str	r3, [r7, #28]
   1bc98:	69fb      	ldr	r3, [r7, #28]
   1bc9a:	2b00      	cmp	r3, #0
   1bc9c:	d100      	bne.n	1bca0 <xQueueReceive+0x68>
   1bc9e:	e07d      	b.n	1bd9c <xQueueReceive+0x164>
   1bca0:	68ba      	ldr	r2, [r7, #8]
   1bca2:	6a3b      	ldr	r3, [r7, #32]
   1bca4:	0011      	movs	r1, r2
   1bca6:	0018      	movs	r0, r3
   1bca8:	4bb3      	ldr	r3, [pc, #716]	; (1bf78 <xQueueReceive+0x340>)
   1bcaa:	4798      	blx	r3
   1bcac:	4bb3      	ldr	r3, [pc, #716]	; (1bf7c <xQueueReceive+0x344>)
   1bcae:	4798      	blx	r3
   1bcb0:	0003      	movs	r3, r0
   1bcb2:	0018      	movs	r0, r3
   1bcb4:	4bb2      	ldr	r3, [pc, #712]	; (1bf80 <xQueueReceive+0x348>)
   1bcb6:	4798      	blx	r3
   1bcb8:	0003      	movs	r3, r0
   1bcba:	001a      	movs	r2, r3
   1bcbc:	4bb1      	ldr	r3, [pc, #708]	; (1bf84 <xQueueReceive+0x34c>)
   1bcbe:	881b      	ldrh	r3, [r3, #0]
   1bcc0:	4013      	ands	r3, r2
   1bcc2:	b29b      	uxth	r3, r3
   1bcc4:	2b00      	cmp	r3, #0
   1bcc6:	d029      	beq.n	1bd1c <xQueueReceive+0xe4>
   1bcc8:	6a3b      	ldr	r3, [r7, #32]
   1bcca:	0018      	movs	r0, r3
   1bccc:	4bae      	ldr	r3, [pc, #696]	; (1bf88 <xQueueReceive+0x350>)
   1bcce:	4798      	blx	r3
   1bcd0:	0003      	movs	r3, r0
   1bcd2:	001a      	movs	r2, r3
   1bcd4:	4bab      	ldr	r3, [pc, #684]	; (1bf84 <xQueueReceive+0x34c>)
   1bcd6:	881b      	ldrh	r3, [r3, #0]
   1bcd8:	4013      	ands	r3, r2
   1bcda:	b29b      	uxth	r3, r3
   1bcdc:	2b00      	cmp	r3, #0
   1bcde:	d01d      	beq.n	1bd1c <xQueueReceive+0xe4>
   1bce0:	6a3b      	ldr	r3, [r7, #32]
   1bce2:	0018      	movs	r0, r3
   1bce4:	4ba9      	ldr	r3, [pc, #676]	; (1bf8c <xQueueReceive+0x354>)
   1bce6:	4798      	blx	r3
   1bce8:	0003      	movs	r3, r0
   1bcea:	001a      	movs	r2, r3
   1bcec:	4ba8      	ldr	r3, [pc, #672]	; (1bf90 <xQueueReceive+0x358>)
   1bcee:	5c9b      	ldrb	r3, [r3, r2]
   1bcf0:	3328      	adds	r3, #40	; 0x28
   1bcf2:	b2db      	uxtb	r3, r3
   1bcf4:	001d      	movs	r5, r3
   1bcf6:	6a3b      	ldr	r3, [r7, #32]
   1bcf8:	0018      	movs	r0, r3
   1bcfa:	4ba4      	ldr	r3, [pc, #656]	; (1bf8c <xQueueReceive+0x354>)
   1bcfc:	4798      	blx	r3
   1bcfe:	0003      	movs	r3, r0
   1bd00:	001a      	movs	r2, r3
   1bd02:	4ba3      	ldr	r3, [pc, #652]	; (1bf90 <xQueueReceive+0x358>)
   1bd04:	5c9c      	ldrb	r4, [r3, r2]
   1bd06:	6a3b      	ldr	r3, [r7, #32]
   1bd08:	0018      	movs	r0, r3
   1bd0a:	4ba2      	ldr	r3, [pc, #648]	; (1bf94 <xQueueReceive+0x35c>)
   1bd0c:	4798      	blx	r3
   1bd0e:	0003      	movs	r3, r0
   1bd10:	b2db      	uxtb	r3, r3
   1bd12:	001a      	movs	r2, r3
   1bd14:	0021      	movs	r1, r4
   1bd16:	0028      	movs	r0, r5
   1bd18:	4b9f      	ldr	r3, [pc, #636]	; (1bf98 <xQueueReceive+0x360>)
   1bd1a:	4798      	blx	r3
   1bd1c:	6a3b      	ldr	r3, [r7, #32]
   1bd1e:	0018      	movs	r0, r3
   1bd20:	4b9a      	ldr	r3, [pc, #616]	; (1bf8c <xQueueReceive+0x354>)
   1bd22:	4798      	blx	r3
   1bd24:	0003      	movs	r3, r0
   1bd26:	001a      	movs	r2, r3
   1bd28:	4b99      	ldr	r3, [pc, #612]	; (1bf90 <xQueueReceive+0x358>)
   1bd2a:	5c9c      	ldrb	r4, [r3, r2]
   1bd2c:	6a3b      	ldr	r3, [r7, #32]
   1bd2e:	0018      	movs	r0, r3
   1bd30:	4b98      	ldr	r3, [pc, #608]	; (1bf94 <xQueueReceive+0x35c>)
   1bd32:	4798      	blx	r3
   1bd34:	0003      	movs	r3, r0
   1bd36:	b2dd      	uxtb	r5, r3
   1bd38:	6a3b      	ldr	r3, [r7, #32]
   1bd3a:	0018      	movs	r0, r3
   1bd3c:	4b93      	ldr	r3, [pc, #588]	; (1bf8c <xQueueReceive+0x354>)
   1bd3e:	4798      	blx	r3
   1bd40:	0003      	movs	r3, r0
   1bd42:	001a      	movs	r2, r3
   1bd44:	4b92      	ldr	r3, [pc, #584]	; (1bf90 <xQueueReceive+0x358>)
   1bd46:	5c9b      	ldrb	r3, [r3, r2]
   1bd48:	2b02      	cmp	r3, #2
   1bd4a:	d108      	bne.n	1bd5e <xQueueReceive+0x126>
   1bd4c:	4b8b      	ldr	r3, [pc, #556]	; (1bf7c <xQueueReceive+0x344>)
   1bd4e:	4798      	blx	r3
   1bd50:	0003      	movs	r3, r0
   1bd52:	0018      	movs	r0, r3
   1bd54:	4b91      	ldr	r3, [pc, #580]	; (1bf9c <xQueueReceive+0x364>)
   1bd56:	4798      	blx	r3
   1bd58:	0003      	movs	r3, r0
   1bd5a:	b2db      	uxtb	r3, r3
   1bd5c:	e004      	b.n	1bd68 <xQueueReceive+0x130>
   1bd5e:	6a3b      	ldr	r3, [r7, #32]
   1bd60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1bd62:	b2db      	uxtb	r3, r3
   1bd64:	3b01      	subs	r3, #1
   1bd66:	b2db      	uxtb	r3, r3
   1bd68:	001a      	movs	r2, r3
   1bd6a:	0029      	movs	r1, r5
   1bd6c:	0020      	movs	r0, r4
   1bd6e:	4b8c      	ldr	r3, [pc, #560]	; (1bfa0 <xQueueReceive+0x368>)
   1bd70:	4798      	blx	r3
   1bd72:	69fb      	ldr	r3, [r7, #28]
   1bd74:	1e5a      	subs	r2, r3, #1
   1bd76:	6a3b      	ldr	r3, [r7, #32]
   1bd78:	639a      	str	r2, [r3, #56]	; 0x38
   1bd7a:	6a3b      	ldr	r3, [r7, #32]
   1bd7c:	691b      	ldr	r3, [r3, #16]
   1bd7e:	2b00      	cmp	r3, #0
   1bd80:	d008      	beq.n	1bd94 <xQueueReceive+0x15c>
   1bd82:	6a3b      	ldr	r3, [r7, #32]
   1bd84:	3310      	adds	r3, #16
   1bd86:	0018      	movs	r0, r3
   1bd88:	4b86      	ldr	r3, [pc, #536]	; (1bfa4 <xQueueReceive+0x36c>)
   1bd8a:	4798      	blx	r3
   1bd8c:	1e03      	subs	r3, r0, #0
   1bd8e:	d001      	beq.n	1bd94 <xQueueReceive+0x15c>
   1bd90:	4b85      	ldr	r3, [pc, #532]	; (1bfa8 <xQueueReceive+0x370>)
   1bd92:	4798      	blx	r3
   1bd94:	4b85      	ldr	r3, [pc, #532]	; (1bfac <xQueueReceive+0x374>)
   1bd96:	4798      	blx	r3
   1bd98:	2301      	movs	r3, #1
   1bd9a:	e15f      	b.n	1c05c <xQueueReceive+0x424>
   1bd9c:	687b      	ldr	r3, [r7, #4]
   1bd9e:	2b00      	cmp	r3, #0
   1bda0:	d13b      	bne.n	1be1a <xQueueReceive+0x1e2>
   1bda2:	4b82      	ldr	r3, [pc, #520]	; (1bfac <xQueueReceive+0x374>)
   1bda4:	4798      	blx	r3
   1bda6:	4b75      	ldr	r3, [pc, #468]	; (1bf7c <xQueueReceive+0x344>)
   1bda8:	4798      	blx	r3
   1bdaa:	0003      	movs	r3, r0
   1bdac:	0018      	movs	r0, r3
   1bdae:	4b74      	ldr	r3, [pc, #464]	; (1bf80 <xQueueReceive+0x348>)
   1bdb0:	4798      	blx	r3
   1bdb2:	0003      	movs	r3, r0
   1bdb4:	001a      	movs	r2, r3
   1bdb6:	4b73      	ldr	r3, [pc, #460]	; (1bf84 <xQueueReceive+0x34c>)
   1bdb8:	881b      	ldrh	r3, [r3, #0]
   1bdba:	4013      	ands	r3, r2
   1bdbc:	b29b      	uxth	r3, r3
   1bdbe:	2b00      	cmp	r3, #0
   1bdc0:	d029      	beq.n	1be16 <xQueueReceive+0x1de>
   1bdc2:	6a3b      	ldr	r3, [r7, #32]
   1bdc4:	0018      	movs	r0, r3
   1bdc6:	4b70      	ldr	r3, [pc, #448]	; (1bf88 <xQueueReceive+0x350>)
   1bdc8:	4798      	blx	r3
   1bdca:	0003      	movs	r3, r0
   1bdcc:	001a      	movs	r2, r3
   1bdce:	4b6d      	ldr	r3, [pc, #436]	; (1bf84 <xQueueReceive+0x34c>)
   1bdd0:	881b      	ldrh	r3, [r3, #0]
   1bdd2:	4013      	ands	r3, r2
   1bdd4:	b29b      	uxth	r3, r3
   1bdd6:	2b00      	cmp	r3, #0
   1bdd8:	d01d      	beq.n	1be16 <xQueueReceive+0x1de>
   1bdda:	6a3b      	ldr	r3, [r7, #32]
   1bddc:	0018      	movs	r0, r3
   1bdde:	4b6b      	ldr	r3, [pc, #428]	; (1bf8c <xQueueReceive+0x354>)
   1bde0:	4798      	blx	r3
   1bde2:	0003      	movs	r3, r0
   1bde4:	001a      	movs	r2, r3
   1bde6:	4b6a      	ldr	r3, [pc, #424]	; (1bf90 <xQueueReceive+0x358>)
   1bde8:	5c9b      	ldrb	r3, [r3, r2]
   1bdea:	3350      	adds	r3, #80	; 0x50
   1bdec:	b2db      	uxtb	r3, r3
   1bdee:	001d      	movs	r5, r3
   1bdf0:	6a3b      	ldr	r3, [r7, #32]
   1bdf2:	0018      	movs	r0, r3
   1bdf4:	4b65      	ldr	r3, [pc, #404]	; (1bf8c <xQueueReceive+0x354>)
   1bdf6:	4798      	blx	r3
   1bdf8:	0003      	movs	r3, r0
   1bdfa:	001a      	movs	r2, r3
   1bdfc:	4b64      	ldr	r3, [pc, #400]	; (1bf90 <xQueueReceive+0x358>)
   1bdfe:	5c9c      	ldrb	r4, [r3, r2]
   1be00:	6a3b      	ldr	r3, [r7, #32]
   1be02:	0018      	movs	r0, r3
   1be04:	4b63      	ldr	r3, [pc, #396]	; (1bf94 <xQueueReceive+0x35c>)
   1be06:	4798      	blx	r3
   1be08:	0003      	movs	r3, r0
   1be0a:	b2db      	uxtb	r3, r3
   1be0c:	001a      	movs	r2, r3
   1be0e:	0021      	movs	r1, r4
   1be10:	0028      	movs	r0, r5
   1be12:	4b61      	ldr	r3, [pc, #388]	; (1bf98 <xQueueReceive+0x360>)
   1be14:	4798      	blx	r3
   1be16:	2300      	movs	r3, #0
   1be18:	e120      	b.n	1c05c <xQueueReceive+0x424>
   1be1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1be1c:	2b00      	cmp	r3, #0
   1be1e:	d106      	bne.n	1be2e <xQueueReceive+0x1f6>
   1be20:	2314      	movs	r3, #20
   1be22:	18fb      	adds	r3, r7, r3
   1be24:	0018      	movs	r0, r3
   1be26:	4b62      	ldr	r3, [pc, #392]	; (1bfb0 <xQueueReceive+0x378>)
   1be28:	4798      	blx	r3
   1be2a:	2301      	movs	r3, #1
   1be2c:	627b      	str	r3, [r7, #36]	; 0x24
   1be2e:	4b5f      	ldr	r3, [pc, #380]	; (1bfac <xQueueReceive+0x374>)
   1be30:	4798      	blx	r3
   1be32:	4b60      	ldr	r3, [pc, #384]	; (1bfb4 <xQueueReceive+0x37c>)
   1be34:	4798      	blx	r3
   1be36:	4b4f      	ldr	r3, [pc, #316]	; (1bf74 <xQueueReceive+0x33c>)
   1be38:	4798      	blx	r3
   1be3a:	6a3b      	ldr	r3, [r7, #32]
   1be3c:	2244      	movs	r2, #68	; 0x44
   1be3e:	5c9b      	ldrb	r3, [r3, r2]
   1be40:	b25b      	sxtb	r3, r3
   1be42:	3301      	adds	r3, #1
   1be44:	d103      	bne.n	1be4e <xQueueReceive+0x216>
   1be46:	6a3b      	ldr	r3, [r7, #32]
   1be48:	2244      	movs	r2, #68	; 0x44
   1be4a:	2100      	movs	r1, #0
   1be4c:	5499      	strb	r1, [r3, r2]
   1be4e:	6a3b      	ldr	r3, [r7, #32]
   1be50:	2245      	movs	r2, #69	; 0x45
   1be52:	5c9b      	ldrb	r3, [r3, r2]
   1be54:	b25b      	sxtb	r3, r3
   1be56:	3301      	adds	r3, #1
   1be58:	d103      	bne.n	1be62 <xQueueReceive+0x22a>
   1be5a:	6a3b      	ldr	r3, [r7, #32]
   1be5c:	2245      	movs	r2, #69	; 0x45
   1be5e:	2100      	movs	r1, #0
   1be60:	5499      	strb	r1, [r3, r2]
   1be62:	4b52      	ldr	r3, [pc, #328]	; (1bfac <xQueueReceive+0x374>)
   1be64:	4798      	blx	r3
   1be66:	1d3a      	adds	r2, r7, #4
   1be68:	2314      	movs	r3, #20
   1be6a:	18fb      	adds	r3, r7, r3
   1be6c:	0011      	movs	r1, r2
   1be6e:	0018      	movs	r0, r3
   1be70:	4b51      	ldr	r3, [pc, #324]	; (1bfb8 <xQueueReceive+0x380>)
   1be72:	4798      	blx	r3
   1be74:	1e03      	subs	r3, r0, #0
   1be76:	d000      	beq.n	1be7a <xQueueReceive+0x242>
   1be78:	e0aa      	b.n	1bfd0 <xQueueReceive+0x398>
   1be7a:	6a3b      	ldr	r3, [r7, #32]
   1be7c:	0018      	movs	r0, r3
   1be7e:	4b4f      	ldr	r3, [pc, #316]	; (1bfbc <xQueueReceive+0x384>)
   1be80:	4798      	blx	r3
   1be82:	1e03      	subs	r3, r0, #0
   1be84:	d06d      	beq.n	1bf62 <xQueueReceive+0x32a>
   1be86:	4b3d      	ldr	r3, [pc, #244]	; (1bf7c <xQueueReceive+0x344>)
   1be88:	4798      	blx	r3
   1be8a:	0003      	movs	r3, r0
   1be8c:	0018      	movs	r0, r3
   1be8e:	4b3c      	ldr	r3, [pc, #240]	; (1bf80 <xQueueReceive+0x348>)
   1be90:	4798      	blx	r3
   1be92:	0003      	movs	r3, r0
   1be94:	001a      	movs	r2, r3
   1be96:	4b3b      	ldr	r3, [pc, #236]	; (1bf84 <xQueueReceive+0x34c>)
   1be98:	881b      	ldrh	r3, [r3, #0]
   1be9a:	4013      	ands	r3, r2
   1be9c:	b29b      	uxth	r3, r3
   1be9e:	2b00      	cmp	r3, #0
   1bea0:	d029      	beq.n	1bef6 <xQueueReceive+0x2be>
   1bea2:	6a3b      	ldr	r3, [r7, #32]
   1bea4:	0018      	movs	r0, r3
   1bea6:	4b38      	ldr	r3, [pc, #224]	; (1bf88 <xQueueReceive+0x350>)
   1bea8:	4798      	blx	r3
   1beaa:	0003      	movs	r3, r0
   1beac:	001a      	movs	r2, r3
   1beae:	4b35      	ldr	r3, [pc, #212]	; (1bf84 <xQueueReceive+0x34c>)
   1beb0:	881b      	ldrh	r3, [r3, #0]
   1beb2:	4013      	ands	r3, r2
   1beb4:	b29b      	uxth	r3, r3
   1beb6:	2b00      	cmp	r3, #0
   1beb8:	d01d      	beq.n	1bef6 <xQueueReceive+0x2be>
   1beba:	6a3b      	ldr	r3, [r7, #32]
   1bebc:	0018      	movs	r0, r3
   1bebe:	4b33      	ldr	r3, [pc, #204]	; (1bf8c <xQueueReceive+0x354>)
   1bec0:	4798      	blx	r3
   1bec2:	0003      	movs	r3, r0
   1bec4:	001a      	movs	r2, r3
   1bec6:	4b32      	ldr	r3, [pc, #200]	; (1bf90 <xQueueReceive+0x358>)
   1bec8:	5c9b      	ldrb	r3, [r3, r2]
   1beca:	3368      	adds	r3, #104	; 0x68
   1becc:	b2db      	uxtb	r3, r3
   1bece:	001d      	movs	r5, r3
   1bed0:	6a3b      	ldr	r3, [r7, #32]
   1bed2:	0018      	movs	r0, r3
   1bed4:	4b2d      	ldr	r3, [pc, #180]	; (1bf8c <xQueueReceive+0x354>)
   1bed6:	4798      	blx	r3
   1bed8:	0003      	movs	r3, r0
   1beda:	001a      	movs	r2, r3
   1bedc:	4b2c      	ldr	r3, [pc, #176]	; (1bf90 <xQueueReceive+0x358>)
   1bede:	5c9c      	ldrb	r4, [r3, r2]
   1bee0:	6a3b      	ldr	r3, [r7, #32]
   1bee2:	0018      	movs	r0, r3
   1bee4:	4b2b      	ldr	r3, [pc, #172]	; (1bf94 <xQueueReceive+0x35c>)
   1bee6:	4798      	blx	r3
   1bee8:	0003      	movs	r3, r0
   1beea:	b2db      	uxtb	r3, r3
   1beec:	001a      	movs	r2, r3
   1beee:	0021      	movs	r1, r4
   1bef0:	0028      	movs	r0, r5
   1bef2:	4b29      	ldr	r3, [pc, #164]	; (1bf98 <xQueueReceive+0x360>)
   1bef4:	4798      	blx	r3
   1bef6:	6a3b      	ldr	r3, [r7, #32]
   1bef8:	0018      	movs	r0, r3
   1befa:	4b24      	ldr	r3, [pc, #144]	; (1bf8c <xQueueReceive+0x354>)
   1befc:	4798      	blx	r3
   1befe:	0003      	movs	r3, r0
   1bf00:	001a      	movs	r2, r3
   1bf02:	4b23      	ldr	r3, [pc, #140]	; (1bf90 <xQueueReceive+0x358>)
   1bf04:	5c9b      	ldrb	r3, [r3, r2]
   1bf06:	2b02      	cmp	r3, #2
   1bf08:	d018      	beq.n	1bf3c <xQueueReceive+0x304>
   1bf0a:	4b1c      	ldr	r3, [pc, #112]	; (1bf7c <xQueueReceive+0x344>)
   1bf0c:	4798      	blx	r3
   1bf0e:	0003      	movs	r3, r0
   1bf10:	0018      	movs	r0, r3
   1bf12:	4b1b      	ldr	r3, [pc, #108]	; (1bf80 <xQueueReceive+0x348>)
   1bf14:	4798      	blx	r3
   1bf16:	0003      	movs	r3, r0
   1bf18:	001a      	movs	r2, r3
   1bf1a:	4b1a      	ldr	r3, [pc, #104]	; (1bf84 <xQueueReceive+0x34c>)
   1bf1c:	881b      	ldrh	r3, [r3, #0]
   1bf1e:	4013      	ands	r3, r2
   1bf20:	b29b      	uxth	r3, r3
   1bf22:	2b00      	cmp	r3, #0
   1bf24:	d00a      	beq.n	1bf3c <xQueueReceive+0x304>
   1bf26:	4b15      	ldr	r3, [pc, #84]	; (1bf7c <xQueueReceive+0x344>)
   1bf28:	4798      	blx	r3
   1bf2a:	0003      	movs	r3, r0
   1bf2c:	0018      	movs	r0, r3
   1bf2e:	4b1b      	ldr	r3, [pc, #108]	; (1bf9c <xQueueReceive+0x364>)
   1bf30:	4798      	blx	r3
   1bf32:	0003      	movs	r3, r0
   1bf34:	b2db      	uxtb	r3, r3
   1bf36:	0018      	movs	r0, r3
   1bf38:	4b21      	ldr	r3, [pc, #132]	; (1bfc0 <xQueueReceive+0x388>)
   1bf3a:	4798      	blx	r3
   1bf3c:	6a3b      	ldr	r3, [r7, #32]
   1bf3e:	3324      	adds	r3, #36	; 0x24
   1bf40:	687a      	ldr	r2, [r7, #4]
   1bf42:	0011      	movs	r1, r2
   1bf44:	0018      	movs	r0, r3
   1bf46:	4b1f      	ldr	r3, [pc, #124]	; (1bfc4 <xQueueReceive+0x38c>)
   1bf48:	4798      	blx	r3
   1bf4a:	6a3b      	ldr	r3, [r7, #32]
   1bf4c:	0018      	movs	r0, r3
   1bf4e:	4b1e      	ldr	r3, [pc, #120]	; (1bfc8 <xQueueReceive+0x390>)
   1bf50:	4798      	blx	r3
   1bf52:	4b1e      	ldr	r3, [pc, #120]	; (1bfcc <xQueueReceive+0x394>)
   1bf54:	4798      	blx	r3
   1bf56:	1e03      	subs	r3, r0, #0
   1bf58:	d000      	beq.n	1bf5c <xQueueReceive+0x324>
   1bf5a:	e698      	b.n	1bc8e <xQueueReceive+0x56>
   1bf5c:	4b12      	ldr	r3, [pc, #72]	; (1bfa8 <xQueueReceive+0x370>)
   1bf5e:	4798      	blx	r3
   1bf60:	e695      	b.n	1bc8e <xQueueReceive+0x56>
   1bf62:	6a3b      	ldr	r3, [r7, #32]
   1bf64:	0018      	movs	r0, r3
   1bf66:	4b18      	ldr	r3, [pc, #96]	; (1bfc8 <xQueueReceive+0x390>)
   1bf68:	4798      	blx	r3
   1bf6a:	4b18      	ldr	r3, [pc, #96]	; (1bfcc <xQueueReceive+0x394>)
   1bf6c:	4798      	blx	r3
   1bf6e:	e68e      	b.n	1bc8e <xQueueReceive+0x56>
   1bf70:	0001db0d 	.word	0x0001db0d
   1bf74:	0001ade9 	.word	0x0001ade9
   1bf78:	0001c699 	.word	0x0001c699
   1bf7c:	00019081 	.word	0x00019081
   1bf80:	00018de5 	.word	0x00018de5
   1bf84:	20000104 	.word	0x20000104
   1bf88:	00018ea5 	.word	0x00018ea5
   1bf8c:	00018da5 	.word	0x00018da5
   1bf90:	200000f8 	.word	0x200000f8
   1bf94:	00018e85 	.word	0x00018e85
   1bf98:	000197dd 	.word	0x000197dd
   1bf9c:	00018dc5 	.word	0x00018dc5
   1bfa0:	00019e39 	.word	0x00019e39
   1bfa4:	0001d67d 	.word	0x0001d67d
   1bfa8:	0001add1 	.word	0x0001add1
   1bfac:	0001ae0d 	.word	0x0001ae0d
   1bfb0:	0001d7bd 	.word	0x0001d7bd
   1bfb4:	0001d0a5 	.word	0x0001d0a5
   1bfb8:	0001d7e5 	.word	0x0001d7e5
   1bfbc:	0001c7d9 	.word	0x0001c7d9
   1bfc0:	00019f75 	.word	0x00019f75
   1bfc4:	0001d559 	.word	0x0001d559
   1bfc8:	0001c6e9 	.word	0x0001c6e9
   1bfcc:	0001d0bd 	.word	0x0001d0bd
   1bfd0:	6a3b      	ldr	r3, [r7, #32]
   1bfd2:	0018      	movs	r0, r3
   1bfd4:	4b23      	ldr	r3, [pc, #140]	; (1c064 <xQueueReceive+0x42c>)
   1bfd6:	4798      	blx	r3
   1bfd8:	4b23      	ldr	r3, [pc, #140]	; (1c068 <xQueueReceive+0x430>)
   1bfda:	4798      	blx	r3
   1bfdc:	6a3b      	ldr	r3, [r7, #32]
   1bfde:	0018      	movs	r0, r3
   1bfe0:	4b22      	ldr	r3, [pc, #136]	; (1c06c <xQueueReceive+0x434>)
   1bfe2:	4798      	blx	r3
   1bfe4:	1e03      	subs	r3, r0, #0
   1bfe6:	d100      	bne.n	1bfea <xQueueReceive+0x3b2>
   1bfe8:	e651      	b.n	1bc8e <xQueueReceive+0x56>
   1bfea:	4b21      	ldr	r3, [pc, #132]	; (1c070 <xQueueReceive+0x438>)
   1bfec:	4798      	blx	r3
   1bfee:	0003      	movs	r3, r0
   1bff0:	0018      	movs	r0, r3
   1bff2:	4b20      	ldr	r3, [pc, #128]	; (1c074 <xQueueReceive+0x43c>)
   1bff4:	4798      	blx	r3
   1bff6:	0003      	movs	r3, r0
   1bff8:	001a      	movs	r2, r3
   1bffa:	4b1f      	ldr	r3, [pc, #124]	; (1c078 <xQueueReceive+0x440>)
   1bffc:	881b      	ldrh	r3, [r3, #0]
   1bffe:	4013      	ands	r3, r2
   1c000:	b29b      	uxth	r3, r3
   1c002:	2b00      	cmp	r3, #0
   1c004:	d029      	beq.n	1c05a <xQueueReceive+0x422>
   1c006:	6a3b      	ldr	r3, [r7, #32]
   1c008:	0018      	movs	r0, r3
   1c00a:	4b1c      	ldr	r3, [pc, #112]	; (1c07c <xQueueReceive+0x444>)
   1c00c:	4798      	blx	r3
   1c00e:	0003      	movs	r3, r0
   1c010:	001a      	movs	r2, r3
   1c012:	4b19      	ldr	r3, [pc, #100]	; (1c078 <xQueueReceive+0x440>)
   1c014:	881b      	ldrh	r3, [r3, #0]
   1c016:	4013      	ands	r3, r2
   1c018:	b29b      	uxth	r3, r3
   1c01a:	2b00      	cmp	r3, #0
   1c01c:	d01d      	beq.n	1c05a <xQueueReceive+0x422>
   1c01e:	6a3b      	ldr	r3, [r7, #32]
   1c020:	0018      	movs	r0, r3
   1c022:	4b17      	ldr	r3, [pc, #92]	; (1c080 <xQueueReceive+0x448>)
   1c024:	4798      	blx	r3
   1c026:	0003      	movs	r3, r0
   1c028:	001a      	movs	r2, r3
   1c02a:	4b16      	ldr	r3, [pc, #88]	; (1c084 <xQueueReceive+0x44c>)
   1c02c:	5c9b      	ldrb	r3, [r3, r2]
   1c02e:	3350      	adds	r3, #80	; 0x50
   1c030:	b2db      	uxtb	r3, r3
   1c032:	001d      	movs	r5, r3
   1c034:	6a3b      	ldr	r3, [r7, #32]
   1c036:	0018      	movs	r0, r3
   1c038:	4b11      	ldr	r3, [pc, #68]	; (1c080 <xQueueReceive+0x448>)
   1c03a:	4798      	blx	r3
   1c03c:	0003      	movs	r3, r0
   1c03e:	001a      	movs	r2, r3
   1c040:	4b10      	ldr	r3, [pc, #64]	; (1c084 <xQueueReceive+0x44c>)
   1c042:	5c9c      	ldrb	r4, [r3, r2]
   1c044:	6a3b      	ldr	r3, [r7, #32]
   1c046:	0018      	movs	r0, r3
   1c048:	4b0f      	ldr	r3, [pc, #60]	; (1c088 <xQueueReceive+0x450>)
   1c04a:	4798      	blx	r3
   1c04c:	0003      	movs	r3, r0
   1c04e:	b2db      	uxtb	r3, r3
   1c050:	001a      	movs	r2, r3
   1c052:	0021      	movs	r1, r4
   1c054:	0028      	movs	r0, r5
   1c056:	4b0d      	ldr	r3, [pc, #52]	; (1c08c <xQueueReceive+0x454>)
   1c058:	4798      	blx	r3
   1c05a:	2300      	movs	r3, #0
   1c05c:	0018      	movs	r0, r3
   1c05e:	46bd      	mov	sp, r7
   1c060:	b00a      	add	sp, #40	; 0x28
   1c062:	bdb0      	pop	{r4, r5, r7, pc}
   1c064:	0001c6e9 	.word	0x0001c6e9
   1c068:	0001d0bd 	.word	0x0001d0bd
   1c06c:	0001c7d9 	.word	0x0001c7d9
   1c070:	00019081 	.word	0x00019081
   1c074:	00018de5 	.word	0x00018de5
   1c078:	20000104 	.word	0x20000104
   1c07c:	00018ea5 	.word	0x00018ea5
   1c080:	00018da5 	.word	0x00018da5
   1c084:	200000f8 	.word	0x200000f8
   1c088:	00018e85 	.word	0x00018e85
   1c08c:	000197dd 	.word	0x000197dd

0001c090 <xQueueSemaphoreTake>:
   1c090:	b5b0      	push	{r4, r5, r7, lr}
   1c092:	b08a      	sub	sp, #40	; 0x28
   1c094:	af00      	add	r7, sp, #0
   1c096:	6078      	str	r0, [r7, #4]
   1c098:	6039      	str	r1, [r7, #0]
   1c09a:	2300      	movs	r3, #0
   1c09c:	627b      	str	r3, [r7, #36]	; 0x24
   1c09e:	687b      	ldr	r3, [r7, #4]
   1c0a0:	61fb      	str	r3, [r7, #28]
   1c0a2:	2300      	movs	r3, #0
   1c0a4:	623b      	str	r3, [r7, #32]
   1c0a6:	69fb      	ldr	r3, [r7, #28]
   1c0a8:	2b00      	cmp	r3, #0
   1c0aa:	d101      	bne.n	1c0b0 <xQueueSemaphoreTake+0x20>
   1c0ac:	b672      	cpsid	i
   1c0ae:	e7fe      	b.n	1c0ae <xQueueSemaphoreTake+0x1e>
   1c0b0:	69fb      	ldr	r3, [r7, #28]
   1c0b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c0b4:	2b00      	cmp	r3, #0
   1c0b6:	d001      	beq.n	1c0bc <xQueueSemaphoreTake+0x2c>
   1c0b8:	b672      	cpsid	i
   1c0ba:	e7fe      	b.n	1c0ba <xQueueSemaphoreTake+0x2a>
   1c0bc:	4bcb      	ldr	r3, [pc, #812]	; (1c3ec <xQueueSemaphoreTake+0x35c>)
   1c0be:	4798      	blx	r3
   1c0c0:	1e03      	subs	r3, r0, #0
   1c0c2:	d102      	bne.n	1c0ca <xQueueSemaphoreTake+0x3a>
   1c0c4:	683b      	ldr	r3, [r7, #0]
   1c0c6:	2b00      	cmp	r3, #0
   1c0c8:	d101      	bne.n	1c0ce <xQueueSemaphoreTake+0x3e>
   1c0ca:	2301      	movs	r3, #1
   1c0cc:	e000      	b.n	1c0d0 <xQueueSemaphoreTake+0x40>
   1c0ce:	2300      	movs	r3, #0
   1c0d0:	2b00      	cmp	r3, #0
   1c0d2:	d101      	bne.n	1c0d8 <xQueueSemaphoreTake+0x48>
   1c0d4:	b672      	cpsid	i
   1c0d6:	e7fe      	b.n	1c0d6 <xQueueSemaphoreTake+0x46>
   1c0d8:	4bc5      	ldr	r3, [pc, #788]	; (1c3f0 <xQueueSemaphoreTake+0x360>)
   1c0da:	4798      	blx	r3
   1c0dc:	69fb      	ldr	r3, [r7, #28]
   1c0de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c0e0:	61bb      	str	r3, [r7, #24]
   1c0e2:	69bb      	ldr	r3, [r7, #24]
   1c0e4:	2b00      	cmp	r3, #0
   1c0e6:	d100      	bne.n	1c0ea <xQueueSemaphoreTake+0x5a>
   1c0e8:	e080      	b.n	1c1ec <xQueueSemaphoreTake+0x15c>
   1c0ea:	4bc2      	ldr	r3, [pc, #776]	; (1c3f4 <xQueueSemaphoreTake+0x364>)
   1c0ec:	4798      	blx	r3
   1c0ee:	0003      	movs	r3, r0
   1c0f0:	0018      	movs	r0, r3
   1c0f2:	4bc1      	ldr	r3, [pc, #772]	; (1c3f8 <xQueueSemaphoreTake+0x368>)
   1c0f4:	4798      	blx	r3
   1c0f6:	0003      	movs	r3, r0
   1c0f8:	001a      	movs	r2, r3
   1c0fa:	4bc0      	ldr	r3, [pc, #768]	; (1c3fc <xQueueSemaphoreTake+0x36c>)
   1c0fc:	881b      	ldrh	r3, [r3, #0]
   1c0fe:	4013      	ands	r3, r2
   1c100:	b29b      	uxth	r3, r3
   1c102:	2b00      	cmp	r3, #0
   1c104:	d029      	beq.n	1c15a <xQueueSemaphoreTake+0xca>
   1c106:	69fb      	ldr	r3, [r7, #28]
   1c108:	0018      	movs	r0, r3
   1c10a:	4bbd      	ldr	r3, [pc, #756]	; (1c400 <xQueueSemaphoreTake+0x370>)
   1c10c:	4798      	blx	r3
   1c10e:	0003      	movs	r3, r0
   1c110:	001a      	movs	r2, r3
   1c112:	4bba      	ldr	r3, [pc, #744]	; (1c3fc <xQueueSemaphoreTake+0x36c>)
   1c114:	881b      	ldrh	r3, [r3, #0]
   1c116:	4013      	ands	r3, r2
   1c118:	b29b      	uxth	r3, r3
   1c11a:	2b00      	cmp	r3, #0
   1c11c:	d01d      	beq.n	1c15a <xQueueSemaphoreTake+0xca>
   1c11e:	69fb      	ldr	r3, [r7, #28]
   1c120:	0018      	movs	r0, r3
   1c122:	4bb8      	ldr	r3, [pc, #736]	; (1c404 <xQueueSemaphoreTake+0x374>)
   1c124:	4798      	blx	r3
   1c126:	0003      	movs	r3, r0
   1c128:	001a      	movs	r2, r3
   1c12a:	4bb7      	ldr	r3, [pc, #732]	; (1c408 <xQueueSemaphoreTake+0x378>)
   1c12c:	5c9b      	ldrb	r3, [r3, r2]
   1c12e:	3328      	adds	r3, #40	; 0x28
   1c130:	b2db      	uxtb	r3, r3
   1c132:	001d      	movs	r5, r3
   1c134:	69fb      	ldr	r3, [r7, #28]
   1c136:	0018      	movs	r0, r3
   1c138:	4bb2      	ldr	r3, [pc, #712]	; (1c404 <xQueueSemaphoreTake+0x374>)
   1c13a:	4798      	blx	r3
   1c13c:	0003      	movs	r3, r0
   1c13e:	001a      	movs	r2, r3
   1c140:	4bb1      	ldr	r3, [pc, #708]	; (1c408 <xQueueSemaphoreTake+0x378>)
   1c142:	5c9c      	ldrb	r4, [r3, r2]
   1c144:	69fb      	ldr	r3, [r7, #28]
   1c146:	0018      	movs	r0, r3
   1c148:	4bb0      	ldr	r3, [pc, #704]	; (1c40c <xQueueSemaphoreTake+0x37c>)
   1c14a:	4798      	blx	r3
   1c14c:	0003      	movs	r3, r0
   1c14e:	b2db      	uxtb	r3, r3
   1c150:	001a      	movs	r2, r3
   1c152:	0021      	movs	r1, r4
   1c154:	0028      	movs	r0, r5
   1c156:	4bae      	ldr	r3, [pc, #696]	; (1c410 <xQueueSemaphoreTake+0x380>)
   1c158:	4798      	blx	r3
   1c15a:	69fb      	ldr	r3, [r7, #28]
   1c15c:	0018      	movs	r0, r3
   1c15e:	4ba9      	ldr	r3, [pc, #676]	; (1c404 <xQueueSemaphoreTake+0x374>)
   1c160:	4798      	blx	r3
   1c162:	0003      	movs	r3, r0
   1c164:	001a      	movs	r2, r3
   1c166:	4ba8      	ldr	r3, [pc, #672]	; (1c408 <xQueueSemaphoreTake+0x378>)
   1c168:	5c9c      	ldrb	r4, [r3, r2]
   1c16a:	69fb      	ldr	r3, [r7, #28]
   1c16c:	0018      	movs	r0, r3
   1c16e:	4ba7      	ldr	r3, [pc, #668]	; (1c40c <xQueueSemaphoreTake+0x37c>)
   1c170:	4798      	blx	r3
   1c172:	0003      	movs	r3, r0
   1c174:	b2dd      	uxtb	r5, r3
   1c176:	69fb      	ldr	r3, [r7, #28]
   1c178:	0018      	movs	r0, r3
   1c17a:	4ba2      	ldr	r3, [pc, #648]	; (1c404 <xQueueSemaphoreTake+0x374>)
   1c17c:	4798      	blx	r3
   1c17e:	0003      	movs	r3, r0
   1c180:	001a      	movs	r2, r3
   1c182:	4ba1      	ldr	r3, [pc, #644]	; (1c408 <xQueueSemaphoreTake+0x378>)
   1c184:	5c9b      	ldrb	r3, [r3, r2]
   1c186:	2b02      	cmp	r3, #2
   1c188:	d108      	bne.n	1c19c <xQueueSemaphoreTake+0x10c>
   1c18a:	4b9a      	ldr	r3, [pc, #616]	; (1c3f4 <xQueueSemaphoreTake+0x364>)
   1c18c:	4798      	blx	r3
   1c18e:	0003      	movs	r3, r0
   1c190:	0018      	movs	r0, r3
   1c192:	4ba0      	ldr	r3, [pc, #640]	; (1c414 <xQueueSemaphoreTake+0x384>)
   1c194:	4798      	blx	r3
   1c196:	0003      	movs	r3, r0
   1c198:	b2db      	uxtb	r3, r3
   1c19a:	e004      	b.n	1c1a6 <xQueueSemaphoreTake+0x116>
   1c19c:	69fb      	ldr	r3, [r7, #28]
   1c19e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c1a0:	b2db      	uxtb	r3, r3
   1c1a2:	3b01      	subs	r3, #1
   1c1a4:	b2db      	uxtb	r3, r3
   1c1a6:	001a      	movs	r2, r3
   1c1a8:	0029      	movs	r1, r5
   1c1aa:	0020      	movs	r0, r4
   1c1ac:	4b9a      	ldr	r3, [pc, #616]	; (1c418 <xQueueSemaphoreTake+0x388>)
   1c1ae:	4798      	blx	r3
   1c1b0:	69bb      	ldr	r3, [r7, #24]
   1c1b2:	1e5a      	subs	r2, r3, #1
   1c1b4:	69fb      	ldr	r3, [r7, #28]
   1c1b6:	639a      	str	r2, [r3, #56]	; 0x38
   1c1b8:	69fb      	ldr	r3, [r7, #28]
   1c1ba:	681b      	ldr	r3, [r3, #0]
   1c1bc:	2b00      	cmp	r3, #0
   1c1be:	d104      	bne.n	1c1ca <xQueueSemaphoreTake+0x13a>
   1c1c0:	4b96      	ldr	r3, [pc, #600]	; (1c41c <xQueueSemaphoreTake+0x38c>)
   1c1c2:	4798      	blx	r3
   1c1c4:	0002      	movs	r2, r0
   1c1c6:	69fb      	ldr	r3, [r7, #28]
   1c1c8:	605a      	str	r2, [r3, #4]
   1c1ca:	69fb      	ldr	r3, [r7, #28]
   1c1cc:	691b      	ldr	r3, [r3, #16]
   1c1ce:	2b00      	cmp	r3, #0
   1c1d0:	d008      	beq.n	1c1e4 <xQueueSemaphoreTake+0x154>
   1c1d2:	69fb      	ldr	r3, [r7, #28]
   1c1d4:	3310      	adds	r3, #16
   1c1d6:	0018      	movs	r0, r3
   1c1d8:	4b91      	ldr	r3, [pc, #580]	; (1c420 <xQueueSemaphoreTake+0x390>)
   1c1da:	4798      	blx	r3
   1c1dc:	1e03      	subs	r3, r0, #0
   1c1de:	d001      	beq.n	1c1e4 <xQueueSemaphoreTake+0x154>
   1c1e0:	4b90      	ldr	r3, [pc, #576]	; (1c424 <xQueueSemaphoreTake+0x394>)
   1c1e2:	4798      	blx	r3
   1c1e4:	4b90      	ldr	r3, [pc, #576]	; (1c428 <xQueueSemaphoreTake+0x398>)
   1c1e6:	4798      	blx	r3
   1c1e8:	2301      	movs	r3, #1
   1c1ea:	e18b      	b.n	1c504 <xQueueSemaphoreTake+0x474>
   1c1ec:	683b      	ldr	r3, [r7, #0]
   1c1ee:	2b00      	cmp	r3, #0
   1c1f0:	d140      	bne.n	1c274 <xQueueSemaphoreTake+0x1e4>
   1c1f2:	6a3b      	ldr	r3, [r7, #32]
   1c1f4:	2b00      	cmp	r3, #0
   1c1f6:	d001      	beq.n	1c1fc <xQueueSemaphoreTake+0x16c>
   1c1f8:	b672      	cpsid	i
   1c1fa:	e7fe      	b.n	1c1fa <xQueueSemaphoreTake+0x16a>
   1c1fc:	4b8a      	ldr	r3, [pc, #552]	; (1c428 <xQueueSemaphoreTake+0x398>)
   1c1fe:	4798      	blx	r3
   1c200:	4b7c      	ldr	r3, [pc, #496]	; (1c3f4 <xQueueSemaphoreTake+0x364>)
   1c202:	4798      	blx	r3
   1c204:	0003      	movs	r3, r0
   1c206:	0018      	movs	r0, r3
   1c208:	4b7b      	ldr	r3, [pc, #492]	; (1c3f8 <xQueueSemaphoreTake+0x368>)
   1c20a:	4798      	blx	r3
   1c20c:	0003      	movs	r3, r0
   1c20e:	001a      	movs	r2, r3
   1c210:	4b7a      	ldr	r3, [pc, #488]	; (1c3fc <xQueueSemaphoreTake+0x36c>)
   1c212:	881b      	ldrh	r3, [r3, #0]
   1c214:	4013      	ands	r3, r2
   1c216:	b29b      	uxth	r3, r3
   1c218:	2b00      	cmp	r3, #0
   1c21a:	d029      	beq.n	1c270 <xQueueSemaphoreTake+0x1e0>
   1c21c:	69fb      	ldr	r3, [r7, #28]
   1c21e:	0018      	movs	r0, r3
   1c220:	4b77      	ldr	r3, [pc, #476]	; (1c400 <xQueueSemaphoreTake+0x370>)
   1c222:	4798      	blx	r3
   1c224:	0003      	movs	r3, r0
   1c226:	001a      	movs	r2, r3
   1c228:	4b74      	ldr	r3, [pc, #464]	; (1c3fc <xQueueSemaphoreTake+0x36c>)
   1c22a:	881b      	ldrh	r3, [r3, #0]
   1c22c:	4013      	ands	r3, r2
   1c22e:	b29b      	uxth	r3, r3
   1c230:	2b00      	cmp	r3, #0
   1c232:	d01d      	beq.n	1c270 <xQueueSemaphoreTake+0x1e0>
   1c234:	69fb      	ldr	r3, [r7, #28]
   1c236:	0018      	movs	r0, r3
   1c238:	4b72      	ldr	r3, [pc, #456]	; (1c404 <xQueueSemaphoreTake+0x374>)
   1c23a:	4798      	blx	r3
   1c23c:	0003      	movs	r3, r0
   1c23e:	001a      	movs	r2, r3
   1c240:	4b71      	ldr	r3, [pc, #452]	; (1c408 <xQueueSemaphoreTake+0x378>)
   1c242:	5c9b      	ldrb	r3, [r3, r2]
   1c244:	3350      	adds	r3, #80	; 0x50
   1c246:	b2db      	uxtb	r3, r3
   1c248:	001d      	movs	r5, r3
   1c24a:	69fb      	ldr	r3, [r7, #28]
   1c24c:	0018      	movs	r0, r3
   1c24e:	4b6d      	ldr	r3, [pc, #436]	; (1c404 <xQueueSemaphoreTake+0x374>)
   1c250:	4798      	blx	r3
   1c252:	0003      	movs	r3, r0
   1c254:	001a      	movs	r2, r3
   1c256:	4b6c      	ldr	r3, [pc, #432]	; (1c408 <xQueueSemaphoreTake+0x378>)
   1c258:	5c9c      	ldrb	r4, [r3, r2]
   1c25a:	69fb      	ldr	r3, [r7, #28]
   1c25c:	0018      	movs	r0, r3
   1c25e:	4b6b      	ldr	r3, [pc, #428]	; (1c40c <xQueueSemaphoreTake+0x37c>)
   1c260:	4798      	blx	r3
   1c262:	0003      	movs	r3, r0
   1c264:	b2db      	uxtb	r3, r3
   1c266:	001a      	movs	r2, r3
   1c268:	0021      	movs	r1, r4
   1c26a:	0028      	movs	r0, r5
   1c26c:	4b68      	ldr	r3, [pc, #416]	; (1c410 <xQueueSemaphoreTake+0x380>)
   1c26e:	4798      	blx	r3
   1c270:	2300      	movs	r3, #0
   1c272:	e147      	b.n	1c504 <xQueueSemaphoreTake+0x474>
   1c274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c276:	2b00      	cmp	r3, #0
   1c278:	d106      	bne.n	1c288 <xQueueSemaphoreTake+0x1f8>
   1c27a:	230c      	movs	r3, #12
   1c27c:	18fb      	adds	r3, r7, r3
   1c27e:	0018      	movs	r0, r3
   1c280:	4b6a      	ldr	r3, [pc, #424]	; (1c42c <xQueueSemaphoreTake+0x39c>)
   1c282:	4798      	blx	r3
   1c284:	2301      	movs	r3, #1
   1c286:	627b      	str	r3, [r7, #36]	; 0x24
   1c288:	4b67      	ldr	r3, [pc, #412]	; (1c428 <xQueueSemaphoreTake+0x398>)
   1c28a:	4798      	blx	r3
   1c28c:	4b68      	ldr	r3, [pc, #416]	; (1c430 <xQueueSemaphoreTake+0x3a0>)
   1c28e:	4798      	blx	r3
   1c290:	4b57      	ldr	r3, [pc, #348]	; (1c3f0 <xQueueSemaphoreTake+0x360>)
   1c292:	4798      	blx	r3
   1c294:	69fb      	ldr	r3, [r7, #28]
   1c296:	2244      	movs	r2, #68	; 0x44
   1c298:	5c9b      	ldrb	r3, [r3, r2]
   1c29a:	b25b      	sxtb	r3, r3
   1c29c:	3301      	adds	r3, #1
   1c29e:	d103      	bne.n	1c2a8 <xQueueSemaphoreTake+0x218>
   1c2a0:	69fb      	ldr	r3, [r7, #28]
   1c2a2:	2244      	movs	r2, #68	; 0x44
   1c2a4:	2100      	movs	r1, #0
   1c2a6:	5499      	strb	r1, [r3, r2]
   1c2a8:	69fb      	ldr	r3, [r7, #28]
   1c2aa:	2245      	movs	r2, #69	; 0x45
   1c2ac:	5c9b      	ldrb	r3, [r3, r2]
   1c2ae:	b25b      	sxtb	r3, r3
   1c2b0:	3301      	adds	r3, #1
   1c2b2:	d103      	bne.n	1c2bc <xQueueSemaphoreTake+0x22c>
   1c2b4:	69fb      	ldr	r3, [r7, #28]
   1c2b6:	2245      	movs	r2, #69	; 0x45
   1c2b8:	2100      	movs	r1, #0
   1c2ba:	5499      	strb	r1, [r3, r2]
   1c2bc:	4b5a      	ldr	r3, [pc, #360]	; (1c428 <xQueueSemaphoreTake+0x398>)
   1c2be:	4798      	blx	r3
   1c2c0:	003a      	movs	r2, r7
   1c2c2:	230c      	movs	r3, #12
   1c2c4:	18fb      	adds	r3, r7, r3
   1c2c6:	0011      	movs	r1, r2
   1c2c8:	0018      	movs	r0, r3
   1c2ca:	4b5a      	ldr	r3, [pc, #360]	; (1c434 <xQueueSemaphoreTake+0x3a4>)
   1c2cc:	4798      	blx	r3
   1c2ce:	1e03      	subs	r3, r0, #0
   1c2d0:	d000      	beq.n	1c2d4 <xQueueSemaphoreTake+0x244>
   1c2d2:	e0bd      	b.n	1c450 <xQueueSemaphoreTake+0x3c0>
   1c2d4:	69fb      	ldr	r3, [r7, #28]
   1c2d6:	0018      	movs	r0, r3
   1c2d8:	4b57      	ldr	r3, [pc, #348]	; (1c438 <xQueueSemaphoreTake+0x3a8>)
   1c2da:	4798      	blx	r3
   1c2dc:	1e03      	subs	r3, r0, #0
   1c2de:	d100      	bne.n	1c2e2 <xQueueSemaphoreTake+0x252>
   1c2e0:	e07c      	b.n	1c3dc <xQueueSemaphoreTake+0x34c>
   1c2e2:	4b44      	ldr	r3, [pc, #272]	; (1c3f4 <xQueueSemaphoreTake+0x364>)
   1c2e4:	4798      	blx	r3
   1c2e6:	0003      	movs	r3, r0
   1c2e8:	0018      	movs	r0, r3
   1c2ea:	4b43      	ldr	r3, [pc, #268]	; (1c3f8 <xQueueSemaphoreTake+0x368>)
   1c2ec:	4798      	blx	r3
   1c2ee:	0003      	movs	r3, r0
   1c2f0:	001a      	movs	r2, r3
   1c2f2:	4b42      	ldr	r3, [pc, #264]	; (1c3fc <xQueueSemaphoreTake+0x36c>)
   1c2f4:	881b      	ldrh	r3, [r3, #0]
   1c2f6:	4013      	ands	r3, r2
   1c2f8:	b29b      	uxth	r3, r3
   1c2fa:	2b00      	cmp	r3, #0
   1c2fc:	d029      	beq.n	1c352 <xQueueSemaphoreTake+0x2c2>
   1c2fe:	69fb      	ldr	r3, [r7, #28]
   1c300:	0018      	movs	r0, r3
   1c302:	4b3f      	ldr	r3, [pc, #252]	; (1c400 <xQueueSemaphoreTake+0x370>)
   1c304:	4798      	blx	r3
   1c306:	0003      	movs	r3, r0
   1c308:	001a      	movs	r2, r3
   1c30a:	4b3c      	ldr	r3, [pc, #240]	; (1c3fc <xQueueSemaphoreTake+0x36c>)
   1c30c:	881b      	ldrh	r3, [r3, #0]
   1c30e:	4013      	ands	r3, r2
   1c310:	b29b      	uxth	r3, r3
   1c312:	2b00      	cmp	r3, #0
   1c314:	d01d      	beq.n	1c352 <xQueueSemaphoreTake+0x2c2>
   1c316:	69fb      	ldr	r3, [r7, #28]
   1c318:	0018      	movs	r0, r3
   1c31a:	4b3a      	ldr	r3, [pc, #232]	; (1c404 <xQueueSemaphoreTake+0x374>)
   1c31c:	4798      	blx	r3
   1c31e:	0003      	movs	r3, r0
   1c320:	001a      	movs	r2, r3
   1c322:	4b39      	ldr	r3, [pc, #228]	; (1c408 <xQueueSemaphoreTake+0x378>)
   1c324:	5c9b      	ldrb	r3, [r3, r2]
   1c326:	3368      	adds	r3, #104	; 0x68
   1c328:	b2db      	uxtb	r3, r3
   1c32a:	001d      	movs	r5, r3
   1c32c:	69fb      	ldr	r3, [r7, #28]
   1c32e:	0018      	movs	r0, r3
   1c330:	4b34      	ldr	r3, [pc, #208]	; (1c404 <xQueueSemaphoreTake+0x374>)
   1c332:	4798      	blx	r3
   1c334:	0003      	movs	r3, r0
   1c336:	001a      	movs	r2, r3
   1c338:	4b33      	ldr	r3, [pc, #204]	; (1c408 <xQueueSemaphoreTake+0x378>)
   1c33a:	5c9c      	ldrb	r4, [r3, r2]
   1c33c:	69fb      	ldr	r3, [r7, #28]
   1c33e:	0018      	movs	r0, r3
   1c340:	4b32      	ldr	r3, [pc, #200]	; (1c40c <xQueueSemaphoreTake+0x37c>)
   1c342:	4798      	blx	r3
   1c344:	0003      	movs	r3, r0
   1c346:	b2db      	uxtb	r3, r3
   1c348:	001a      	movs	r2, r3
   1c34a:	0021      	movs	r1, r4
   1c34c:	0028      	movs	r0, r5
   1c34e:	4b30      	ldr	r3, [pc, #192]	; (1c410 <xQueueSemaphoreTake+0x380>)
   1c350:	4798      	blx	r3
   1c352:	69fb      	ldr	r3, [r7, #28]
   1c354:	0018      	movs	r0, r3
   1c356:	4b2b      	ldr	r3, [pc, #172]	; (1c404 <xQueueSemaphoreTake+0x374>)
   1c358:	4798      	blx	r3
   1c35a:	0003      	movs	r3, r0
   1c35c:	001a      	movs	r2, r3
   1c35e:	4b2a      	ldr	r3, [pc, #168]	; (1c408 <xQueueSemaphoreTake+0x378>)
   1c360:	5c9b      	ldrb	r3, [r3, r2]
   1c362:	2b02      	cmp	r3, #2
   1c364:	d018      	beq.n	1c398 <xQueueSemaphoreTake+0x308>
   1c366:	4b23      	ldr	r3, [pc, #140]	; (1c3f4 <xQueueSemaphoreTake+0x364>)
   1c368:	4798      	blx	r3
   1c36a:	0003      	movs	r3, r0
   1c36c:	0018      	movs	r0, r3
   1c36e:	4b22      	ldr	r3, [pc, #136]	; (1c3f8 <xQueueSemaphoreTake+0x368>)
   1c370:	4798      	blx	r3
   1c372:	0003      	movs	r3, r0
   1c374:	001a      	movs	r2, r3
   1c376:	4b21      	ldr	r3, [pc, #132]	; (1c3fc <xQueueSemaphoreTake+0x36c>)
   1c378:	881b      	ldrh	r3, [r3, #0]
   1c37a:	4013      	ands	r3, r2
   1c37c:	b29b      	uxth	r3, r3
   1c37e:	2b00      	cmp	r3, #0
   1c380:	d00a      	beq.n	1c398 <xQueueSemaphoreTake+0x308>
   1c382:	4b1c      	ldr	r3, [pc, #112]	; (1c3f4 <xQueueSemaphoreTake+0x364>)
   1c384:	4798      	blx	r3
   1c386:	0003      	movs	r3, r0
   1c388:	0018      	movs	r0, r3
   1c38a:	4b22      	ldr	r3, [pc, #136]	; (1c414 <xQueueSemaphoreTake+0x384>)
   1c38c:	4798      	blx	r3
   1c38e:	0003      	movs	r3, r0
   1c390:	b2db      	uxtb	r3, r3
   1c392:	0018      	movs	r0, r3
   1c394:	4b29      	ldr	r3, [pc, #164]	; (1c43c <xQueueSemaphoreTake+0x3ac>)
   1c396:	4798      	blx	r3
   1c398:	69fb      	ldr	r3, [r7, #28]
   1c39a:	681b      	ldr	r3, [r3, #0]
   1c39c:	2b00      	cmp	r3, #0
   1c39e:	d10a      	bne.n	1c3b6 <xQueueSemaphoreTake+0x326>
   1c3a0:	4b13      	ldr	r3, [pc, #76]	; (1c3f0 <xQueueSemaphoreTake+0x360>)
   1c3a2:	4798      	blx	r3
   1c3a4:	69fb      	ldr	r3, [r7, #28]
   1c3a6:	685b      	ldr	r3, [r3, #4]
   1c3a8:	0018      	movs	r0, r3
   1c3aa:	4b25      	ldr	r3, [pc, #148]	; (1c440 <xQueueSemaphoreTake+0x3b0>)
   1c3ac:	4798      	blx	r3
   1c3ae:	0003      	movs	r3, r0
   1c3b0:	623b      	str	r3, [r7, #32]
   1c3b2:	4b1d      	ldr	r3, [pc, #116]	; (1c428 <xQueueSemaphoreTake+0x398>)
   1c3b4:	4798      	blx	r3
   1c3b6:	69fb      	ldr	r3, [r7, #28]
   1c3b8:	3324      	adds	r3, #36	; 0x24
   1c3ba:	683a      	ldr	r2, [r7, #0]
   1c3bc:	0011      	movs	r1, r2
   1c3be:	0018      	movs	r0, r3
   1c3c0:	4b20      	ldr	r3, [pc, #128]	; (1c444 <xQueueSemaphoreTake+0x3b4>)
   1c3c2:	4798      	blx	r3
   1c3c4:	69fb      	ldr	r3, [r7, #28]
   1c3c6:	0018      	movs	r0, r3
   1c3c8:	4b1f      	ldr	r3, [pc, #124]	; (1c448 <xQueueSemaphoreTake+0x3b8>)
   1c3ca:	4798      	blx	r3
   1c3cc:	4b1f      	ldr	r3, [pc, #124]	; (1c44c <xQueueSemaphoreTake+0x3bc>)
   1c3ce:	4798      	blx	r3
   1c3d0:	1e03      	subs	r3, r0, #0
   1c3d2:	d000      	beq.n	1c3d6 <xQueueSemaphoreTake+0x346>
   1c3d4:	e680      	b.n	1c0d8 <xQueueSemaphoreTake+0x48>
   1c3d6:	4b13      	ldr	r3, [pc, #76]	; (1c424 <xQueueSemaphoreTake+0x394>)
   1c3d8:	4798      	blx	r3
   1c3da:	e67d      	b.n	1c0d8 <xQueueSemaphoreTake+0x48>
   1c3dc:	69fb      	ldr	r3, [r7, #28]
   1c3de:	0018      	movs	r0, r3
   1c3e0:	4b19      	ldr	r3, [pc, #100]	; (1c448 <xQueueSemaphoreTake+0x3b8>)
   1c3e2:	4798      	blx	r3
   1c3e4:	4b19      	ldr	r3, [pc, #100]	; (1c44c <xQueueSemaphoreTake+0x3bc>)
   1c3e6:	4798      	blx	r3
   1c3e8:	e676      	b.n	1c0d8 <xQueueSemaphoreTake+0x48>
   1c3ea:	46c0      	nop			; (mov r8, r8)
   1c3ec:	0001db0d 	.word	0x0001db0d
   1c3f0:	0001ade9 	.word	0x0001ade9
   1c3f4:	00019081 	.word	0x00019081
   1c3f8:	00018de5 	.word	0x00018de5
   1c3fc:	20000104 	.word	0x20000104
   1c400:	00018ea5 	.word	0x00018ea5
   1c404:	00018da5 	.word	0x00018da5
   1c408:	200000f8 	.word	0x200000f8
   1c40c:	00018e85 	.word	0x00018e85
   1c410:	000197dd 	.word	0x000197dd
   1c414:	00018dc5 	.word	0x00018dc5
   1c418:	00019e39 	.word	0x00019e39
   1c41c:	0001dfd9 	.word	0x0001dfd9
   1c420:	0001d67d 	.word	0x0001d67d
   1c424:	0001add1 	.word	0x0001add1
   1c428:	0001ae0d 	.word	0x0001ae0d
   1c42c:	0001d7bd 	.word	0x0001d7bd
   1c430:	0001d0a5 	.word	0x0001d0a5
   1c434:	0001d7e5 	.word	0x0001d7e5
   1c438:	0001c7d9 	.word	0x0001c7d9
   1c43c:	00019f75 	.word	0x00019f75
   1c440:	0001db45 	.word	0x0001db45
   1c444:	0001d559 	.word	0x0001d559
   1c448:	0001c6e9 	.word	0x0001c6e9
   1c44c:	0001d0bd 	.word	0x0001d0bd
   1c450:	69fb      	ldr	r3, [r7, #28]
   1c452:	0018      	movs	r0, r3
   1c454:	4b2d      	ldr	r3, [pc, #180]	; (1c50c <xQueueSemaphoreTake+0x47c>)
   1c456:	4798      	blx	r3
   1c458:	4b2d      	ldr	r3, [pc, #180]	; (1c510 <xQueueSemaphoreTake+0x480>)
   1c45a:	4798      	blx	r3
   1c45c:	69fb      	ldr	r3, [r7, #28]
   1c45e:	0018      	movs	r0, r3
   1c460:	4b2c      	ldr	r3, [pc, #176]	; (1c514 <xQueueSemaphoreTake+0x484>)
   1c462:	4798      	blx	r3
   1c464:	1e03      	subs	r3, r0, #0
   1c466:	d100      	bne.n	1c46a <xQueueSemaphoreTake+0x3da>
   1c468:	e636      	b.n	1c0d8 <xQueueSemaphoreTake+0x48>
   1c46a:	6a3b      	ldr	r3, [r7, #32]
   1c46c:	2b00      	cmp	r3, #0
   1c46e:	d010      	beq.n	1c492 <xQueueSemaphoreTake+0x402>
   1c470:	4b29      	ldr	r3, [pc, #164]	; (1c518 <xQueueSemaphoreTake+0x488>)
   1c472:	4798      	blx	r3
   1c474:	69fb      	ldr	r3, [r7, #28]
   1c476:	0018      	movs	r0, r3
   1c478:	4b28      	ldr	r3, [pc, #160]	; (1c51c <xQueueSemaphoreTake+0x48c>)
   1c47a:	4798      	blx	r3
   1c47c:	0003      	movs	r3, r0
   1c47e:	617b      	str	r3, [r7, #20]
   1c480:	69fb      	ldr	r3, [r7, #28]
   1c482:	685b      	ldr	r3, [r3, #4]
   1c484:	697a      	ldr	r2, [r7, #20]
   1c486:	0011      	movs	r1, r2
   1c488:	0018      	movs	r0, r3
   1c48a:	4b25      	ldr	r3, [pc, #148]	; (1c520 <xQueueSemaphoreTake+0x490>)
   1c48c:	4798      	blx	r3
   1c48e:	4b25      	ldr	r3, [pc, #148]	; (1c524 <xQueueSemaphoreTake+0x494>)
   1c490:	4798      	blx	r3
   1c492:	4b25      	ldr	r3, [pc, #148]	; (1c528 <xQueueSemaphoreTake+0x498>)
   1c494:	4798      	blx	r3
   1c496:	0003      	movs	r3, r0
   1c498:	0018      	movs	r0, r3
   1c49a:	4b24      	ldr	r3, [pc, #144]	; (1c52c <xQueueSemaphoreTake+0x49c>)
   1c49c:	4798      	blx	r3
   1c49e:	0003      	movs	r3, r0
   1c4a0:	001a      	movs	r2, r3
   1c4a2:	4b23      	ldr	r3, [pc, #140]	; (1c530 <xQueueSemaphoreTake+0x4a0>)
   1c4a4:	881b      	ldrh	r3, [r3, #0]
   1c4a6:	4013      	ands	r3, r2
   1c4a8:	b29b      	uxth	r3, r3
   1c4aa:	2b00      	cmp	r3, #0
   1c4ac:	d029      	beq.n	1c502 <xQueueSemaphoreTake+0x472>
   1c4ae:	69fb      	ldr	r3, [r7, #28]
   1c4b0:	0018      	movs	r0, r3
   1c4b2:	4b20      	ldr	r3, [pc, #128]	; (1c534 <xQueueSemaphoreTake+0x4a4>)
   1c4b4:	4798      	blx	r3
   1c4b6:	0003      	movs	r3, r0
   1c4b8:	001a      	movs	r2, r3
   1c4ba:	4b1d      	ldr	r3, [pc, #116]	; (1c530 <xQueueSemaphoreTake+0x4a0>)
   1c4bc:	881b      	ldrh	r3, [r3, #0]
   1c4be:	4013      	ands	r3, r2
   1c4c0:	b29b      	uxth	r3, r3
   1c4c2:	2b00      	cmp	r3, #0
   1c4c4:	d01d      	beq.n	1c502 <xQueueSemaphoreTake+0x472>
   1c4c6:	69fb      	ldr	r3, [r7, #28]
   1c4c8:	0018      	movs	r0, r3
   1c4ca:	4b1b      	ldr	r3, [pc, #108]	; (1c538 <xQueueSemaphoreTake+0x4a8>)
   1c4cc:	4798      	blx	r3
   1c4ce:	0003      	movs	r3, r0
   1c4d0:	001a      	movs	r2, r3
   1c4d2:	4b1a      	ldr	r3, [pc, #104]	; (1c53c <xQueueSemaphoreTake+0x4ac>)
   1c4d4:	5c9b      	ldrb	r3, [r3, r2]
   1c4d6:	3350      	adds	r3, #80	; 0x50
   1c4d8:	b2db      	uxtb	r3, r3
   1c4da:	001d      	movs	r5, r3
   1c4dc:	69fb      	ldr	r3, [r7, #28]
   1c4de:	0018      	movs	r0, r3
   1c4e0:	4b15      	ldr	r3, [pc, #84]	; (1c538 <xQueueSemaphoreTake+0x4a8>)
   1c4e2:	4798      	blx	r3
   1c4e4:	0003      	movs	r3, r0
   1c4e6:	001a      	movs	r2, r3
   1c4e8:	4b14      	ldr	r3, [pc, #80]	; (1c53c <xQueueSemaphoreTake+0x4ac>)
   1c4ea:	5c9c      	ldrb	r4, [r3, r2]
   1c4ec:	69fb      	ldr	r3, [r7, #28]
   1c4ee:	0018      	movs	r0, r3
   1c4f0:	4b13      	ldr	r3, [pc, #76]	; (1c540 <xQueueSemaphoreTake+0x4b0>)
   1c4f2:	4798      	blx	r3
   1c4f4:	0003      	movs	r3, r0
   1c4f6:	b2db      	uxtb	r3, r3
   1c4f8:	001a      	movs	r2, r3
   1c4fa:	0021      	movs	r1, r4
   1c4fc:	0028      	movs	r0, r5
   1c4fe:	4b11      	ldr	r3, [pc, #68]	; (1c544 <xQueueSemaphoreTake+0x4b4>)
   1c500:	4798      	blx	r3
   1c502:	2300      	movs	r3, #0
   1c504:	0018      	movs	r0, r3
   1c506:	46bd      	mov	sp, r7
   1c508:	b00a      	add	sp, #40	; 0x28
   1c50a:	bdb0      	pop	{r4, r5, r7, pc}
   1c50c:	0001c6e9 	.word	0x0001c6e9
   1c510:	0001d0bd 	.word	0x0001d0bd
   1c514:	0001c7d9 	.word	0x0001c7d9
   1c518:	0001ade9 	.word	0x0001ade9
   1c51c:	0001c58b 	.word	0x0001c58b
   1c520:	0001de3d 	.word	0x0001de3d
   1c524:	0001ae0d 	.word	0x0001ae0d
   1c528:	00019081 	.word	0x00019081
   1c52c:	00018de5 	.word	0x00018de5
   1c530:	20000104 	.word	0x20000104
   1c534:	00018ea5 	.word	0x00018ea5
   1c538:	00018da5 	.word	0x00018da5
   1c53c:	200000f8 	.word	0x200000f8
   1c540:	00018e85 	.word	0x00018e85
   1c544:	000197dd 	.word	0x000197dd

0001c548 <uxQueueGetQueueNumber>:
   1c548:	b580      	push	{r7, lr}
   1c54a:	b082      	sub	sp, #8
   1c54c:	af00      	add	r7, sp, #0
   1c54e:	6078      	str	r0, [r7, #4]
   1c550:	687b      	ldr	r3, [r7, #4]
   1c552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1c554:	0018      	movs	r0, r3
   1c556:	46bd      	mov	sp, r7
   1c558:	b002      	add	sp, #8
   1c55a:	bd80      	pop	{r7, pc}

0001c55c <vQueueSetQueueNumber>:
   1c55c:	b580      	push	{r7, lr}
   1c55e:	b082      	sub	sp, #8
   1c560:	af00      	add	r7, sp, #0
   1c562:	6078      	str	r0, [r7, #4]
   1c564:	6039      	str	r1, [r7, #0]
   1c566:	687b      	ldr	r3, [r7, #4]
   1c568:	683a      	ldr	r2, [r7, #0]
   1c56a:	64da      	str	r2, [r3, #76]	; 0x4c
   1c56c:	46c0      	nop			; (mov r8, r8)
   1c56e:	46bd      	mov	sp, r7
   1c570:	b002      	add	sp, #8
   1c572:	bd80      	pop	{r7, pc}

0001c574 <ucQueueGetQueueType>:
   1c574:	b580      	push	{r7, lr}
   1c576:	b082      	sub	sp, #8
   1c578:	af00      	add	r7, sp, #0
   1c57a:	6078      	str	r0, [r7, #4]
   1c57c:	687b      	ldr	r3, [r7, #4]
   1c57e:	2250      	movs	r2, #80	; 0x50
   1c580:	5c9b      	ldrb	r3, [r3, r2]
   1c582:	0018      	movs	r0, r3
   1c584:	46bd      	mov	sp, r7
   1c586:	b002      	add	sp, #8
   1c588:	bd80      	pop	{r7, pc}

0001c58a <prvGetDisinheritPriorityAfterTimeout>:
   1c58a:	b580      	push	{r7, lr}
   1c58c:	b084      	sub	sp, #16
   1c58e:	af00      	add	r7, sp, #0
   1c590:	6078      	str	r0, [r7, #4]
   1c592:	687b      	ldr	r3, [r7, #4]
   1c594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c596:	2b00      	cmp	r3, #0
   1c598:	d006      	beq.n	1c5a8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
   1c59a:	687b      	ldr	r3, [r7, #4]
   1c59c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1c59e:	681b      	ldr	r3, [r3, #0]
   1c5a0:	2205      	movs	r2, #5
   1c5a2:	1ad3      	subs	r3, r2, r3
   1c5a4:	60fb      	str	r3, [r7, #12]
   1c5a6:	e001      	b.n	1c5ac <prvGetDisinheritPriorityAfterTimeout+0x22>
   1c5a8:	2300      	movs	r3, #0
   1c5aa:	60fb      	str	r3, [r7, #12]
   1c5ac:	68fb      	ldr	r3, [r7, #12]
   1c5ae:	0018      	movs	r0, r3
   1c5b0:	46bd      	mov	sp, r7
   1c5b2:	b004      	add	sp, #16
   1c5b4:	bd80      	pop	{r7, pc}
	...

0001c5b8 <prvCopyDataToQueue>:
   1c5b8:	b580      	push	{r7, lr}
   1c5ba:	b086      	sub	sp, #24
   1c5bc:	af00      	add	r7, sp, #0
   1c5be:	60f8      	str	r0, [r7, #12]
   1c5c0:	60b9      	str	r1, [r7, #8]
   1c5c2:	607a      	str	r2, [r7, #4]
   1c5c4:	2300      	movs	r3, #0
   1c5c6:	617b      	str	r3, [r7, #20]
   1c5c8:	68fb      	ldr	r3, [r7, #12]
   1c5ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c5cc:	613b      	str	r3, [r7, #16]
   1c5ce:	68fb      	ldr	r3, [r7, #12]
   1c5d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c5d2:	2b00      	cmp	r3, #0
   1c5d4:	d10e      	bne.n	1c5f4 <prvCopyDataToQueue+0x3c>
   1c5d6:	68fb      	ldr	r3, [r7, #12]
   1c5d8:	681b      	ldr	r3, [r3, #0]
   1c5da:	2b00      	cmp	r3, #0
   1c5dc:	d14e      	bne.n	1c67c <prvCopyDataToQueue+0xc4>
   1c5de:	68fb      	ldr	r3, [r7, #12]
   1c5e0:	685b      	ldr	r3, [r3, #4]
   1c5e2:	0018      	movs	r0, r3
   1c5e4:	4b2a      	ldr	r3, [pc, #168]	; (1c690 <prvCopyDataToQueue+0xd8>)
   1c5e6:	4798      	blx	r3
   1c5e8:	0003      	movs	r3, r0
   1c5ea:	617b      	str	r3, [r7, #20]
   1c5ec:	68fb      	ldr	r3, [r7, #12]
   1c5ee:	2200      	movs	r2, #0
   1c5f0:	605a      	str	r2, [r3, #4]
   1c5f2:	e043      	b.n	1c67c <prvCopyDataToQueue+0xc4>
   1c5f4:	687b      	ldr	r3, [r7, #4]
   1c5f6:	2b00      	cmp	r3, #0
   1c5f8:	d119      	bne.n	1c62e <prvCopyDataToQueue+0x76>
   1c5fa:	68fb      	ldr	r3, [r7, #12]
   1c5fc:	6898      	ldr	r0, [r3, #8]
   1c5fe:	68fb      	ldr	r3, [r7, #12]
   1c600:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1c602:	68bb      	ldr	r3, [r7, #8]
   1c604:	0019      	movs	r1, r3
   1c606:	4b23      	ldr	r3, [pc, #140]	; (1c694 <prvCopyDataToQueue+0xdc>)
   1c608:	4798      	blx	r3
   1c60a:	68fb      	ldr	r3, [r7, #12]
   1c60c:	689a      	ldr	r2, [r3, #8]
   1c60e:	68fb      	ldr	r3, [r7, #12]
   1c610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c612:	18d2      	adds	r2, r2, r3
   1c614:	68fb      	ldr	r3, [r7, #12]
   1c616:	609a      	str	r2, [r3, #8]
   1c618:	68fb      	ldr	r3, [r7, #12]
   1c61a:	689a      	ldr	r2, [r3, #8]
   1c61c:	68fb      	ldr	r3, [r7, #12]
   1c61e:	685b      	ldr	r3, [r3, #4]
   1c620:	429a      	cmp	r2, r3
   1c622:	d32b      	bcc.n	1c67c <prvCopyDataToQueue+0xc4>
   1c624:	68fb      	ldr	r3, [r7, #12]
   1c626:	681a      	ldr	r2, [r3, #0]
   1c628:	68fb      	ldr	r3, [r7, #12]
   1c62a:	609a      	str	r2, [r3, #8]
   1c62c:	e026      	b.n	1c67c <prvCopyDataToQueue+0xc4>
   1c62e:	68fb      	ldr	r3, [r7, #12]
   1c630:	68d8      	ldr	r0, [r3, #12]
   1c632:	68fb      	ldr	r3, [r7, #12]
   1c634:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1c636:	68bb      	ldr	r3, [r7, #8]
   1c638:	0019      	movs	r1, r3
   1c63a:	4b16      	ldr	r3, [pc, #88]	; (1c694 <prvCopyDataToQueue+0xdc>)
   1c63c:	4798      	blx	r3
   1c63e:	68fb      	ldr	r3, [r7, #12]
   1c640:	68da      	ldr	r2, [r3, #12]
   1c642:	68fb      	ldr	r3, [r7, #12]
   1c644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c646:	425b      	negs	r3, r3
   1c648:	18d2      	adds	r2, r2, r3
   1c64a:	68fb      	ldr	r3, [r7, #12]
   1c64c:	60da      	str	r2, [r3, #12]
   1c64e:	68fb      	ldr	r3, [r7, #12]
   1c650:	68da      	ldr	r2, [r3, #12]
   1c652:	68fb      	ldr	r3, [r7, #12]
   1c654:	681b      	ldr	r3, [r3, #0]
   1c656:	429a      	cmp	r2, r3
   1c658:	d207      	bcs.n	1c66a <prvCopyDataToQueue+0xb2>
   1c65a:	68fb      	ldr	r3, [r7, #12]
   1c65c:	685a      	ldr	r2, [r3, #4]
   1c65e:	68fb      	ldr	r3, [r7, #12]
   1c660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c662:	425b      	negs	r3, r3
   1c664:	18d2      	adds	r2, r2, r3
   1c666:	68fb      	ldr	r3, [r7, #12]
   1c668:	60da      	str	r2, [r3, #12]
   1c66a:	687b      	ldr	r3, [r7, #4]
   1c66c:	2b02      	cmp	r3, #2
   1c66e:	d105      	bne.n	1c67c <prvCopyDataToQueue+0xc4>
   1c670:	693b      	ldr	r3, [r7, #16]
   1c672:	2b00      	cmp	r3, #0
   1c674:	d002      	beq.n	1c67c <prvCopyDataToQueue+0xc4>
   1c676:	693b      	ldr	r3, [r7, #16]
   1c678:	3b01      	subs	r3, #1
   1c67a:	613b      	str	r3, [r7, #16]
   1c67c:	693b      	ldr	r3, [r7, #16]
   1c67e:	1c5a      	adds	r2, r3, #1
   1c680:	68fb      	ldr	r3, [r7, #12]
   1c682:	639a      	str	r2, [r3, #56]	; 0x38
   1c684:	697b      	ldr	r3, [r7, #20]
   1c686:	0018      	movs	r0, r3
   1c688:	46bd      	mov	sp, r7
   1c68a:	b006      	add	sp, #24
   1c68c:	bd80      	pop	{r7, pc}
   1c68e:	46c0      	nop			; (mov r8, r8)
   1c690:	0001dcd5 	.word	0x0001dcd5
   1c694:	000356d1 	.word	0x000356d1

0001c698 <prvCopyDataFromQueue>:
   1c698:	b580      	push	{r7, lr}
   1c69a:	b082      	sub	sp, #8
   1c69c:	af00      	add	r7, sp, #0
   1c69e:	6078      	str	r0, [r7, #4]
   1c6a0:	6039      	str	r1, [r7, #0]
   1c6a2:	687b      	ldr	r3, [r7, #4]
   1c6a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c6a6:	2b00      	cmp	r3, #0
   1c6a8:	d018      	beq.n	1c6dc <prvCopyDataFromQueue+0x44>
   1c6aa:	687b      	ldr	r3, [r7, #4]
   1c6ac:	68da      	ldr	r2, [r3, #12]
   1c6ae:	687b      	ldr	r3, [r7, #4]
   1c6b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c6b2:	18d2      	adds	r2, r2, r3
   1c6b4:	687b      	ldr	r3, [r7, #4]
   1c6b6:	60da      	str	r2, [r3, #12]
   1c6b8:	687b      	ldr	r3, [r7, #4]
   1c6ba:	68da      	ldr	r2, [r3, #12]
   1c6bc:	687b      	ldr	r3, [r7, #4]
   1c6be:	685b      	ldr	r3, [r3, #4]
   1c6c0:	429a      	cmp	r2, r3
   1c6c2:	d303      	bcc.n	1c6cc <prvCopyDataFromQueue+0x34>
   1c6c4:	687b      	ldr	r3, [r7, #4]
   1c6c6:	681a      	ldr	r2, [r3, #0]
   1c6c8:	687b      	ldr	r3, [r7, #4]
   1c6ca:	60da      	str	r2, [r3, #12]
   1c6cc:	687b      	ldr	r3, [r7, #4]
   1c6ce:	68d9      	ldr	r1, [r3, #12]
   1c6d0:	687b      	ldr	r3, [r7, #4]
   1c6d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1c6d4:	683b      	ldr	r3, [r7, #0]
   1c6d6:	0018      	movs	r0, r3
   1c6d8:	4b02      	ldr	r3, [pc, #8]	; (1c6e4 <prvCopyDataFromQueue+0x4c>)
   1c6da:	4798      	blx	r3
   1c6dc:	46c0      	nop			; (mov r8, r8)
   1c6de:	46bd      	mov	sp, r7
   1c6e0:	b002      	add	sp, #8
   1c6e2:	bd80      	pop	{r7, pc}
   1c6e4:	000356d1 	.word	0x000356d1

0001c6e8 <prvUnlockQueue>:
   1c6e8:	b580      	push	{r7, lr}
   1c6ea:	b084      	sub	sp, #16
   1c6ec:	af00      	add	r7, sp, #0
   1c6ee:	6078      	str	r0, [r7, #4]
   1c6f0:	4b34      	ldr	r3, [pc, #208]	; (1c7c4 <prvUnlockQueue+0xdc>)
   1c6f2:	4798      	blx	r3
   1c6f4:	230f      	movs	r3, #15
   1c6f6:	18fb      	adds	r3, r7, r3
   1c6f8:	687a      	ldr	r2, [r7, #4]
   1c6fa:	2145      	movs	r1, #69	; 0x45
   1c6fc:	5c52      	ldrb	r2, [r2, r1]
   1c6fe:	701a      	strb	r2, [r3, #0]
   1c700:	e022      	b.n	1c748 <prvUnlockQueue+0x60>
   1c702:	687b      	ldr	r3, [r7, #4]
   1c704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c706:	2b00      	cmp	r3, #0
   1c708:	d009      	beq.n	1c71e <prvUnlockQueue+0x36>
   1c70a:	687b      	ldr	r3, [r7, #4]
   1c70c:	2100      	movs	r1, #0
   1c70e:	0018      	movs	r0, r3
   1c710:	4b2d      	ldr	r3, [pc, #180]	; (1c7c8 <prvUnlockQueue+0xe0>)
   1c712:	4798      	blx	r3
   1c714:	1e03      	subs	r3, r0, #0
   1c716:	d00f      	beq.n	1c738 <prvUnlockQueue+0x50>
   1c718:	4b2c      	ldr	r3, [pc, #176]	; (1c7cc <prvUnlockQueue+0xe4>)
   1c71a:	4798      	blx	r3
   1c71c:	e00c      	b.n	1c738 <prvUnlockQueue+0x50>
   1c71e:	687b      	ldr	r3, [r7, #4]
   1c720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c722:	2b00      	cmp	r3, #0
   1c724:	d017      	beq.n	1c756 <prvUnlockQueue+0x6e>
   1c726:	687b      	ldr	r3, [r7, #4]
   1c728:	3324      	adds	r3, #36	; 0x24
   1c72a:	0018      	movs	r0, r3
   1c72c:	4b28      	ldr	r3, [pc, #160]	; (1c7d0 <prvUnlockQueue+0xe8>)
   1c72e:	4798      	blx	r3
   1c730:	1e03      	subs	r3, r0, #0
   1c732:	d001      	beq.n	1c738 <prvUnlockQueue+0x50>
   1c734:	4b25      	ldr	r3, [pc, #148]	; (1c7cc <prvUnlockQueue+0xe4>)
   1c736:	4798      	blx	r3
   1c738:	230f      	movs	r3, #15
   1c73a:	18fb      	adds	r3, r7, r3
   1c73c:	781b      	ldrb	r3, [r3, #0]
   1c73e:	3b01      	subs	r3, #1
   1c740:	b2da      	uxtb	r2, r3
   1c742:	230f      	movs	r3, #15
   1c744:	18fb      	adds	r3, r7, r3
   1c746:	701a      	strb	r2, [r3, #0]
   1c748:	230f      	movs	r3, #15
   1c74a:	18fb      	adds	r3, r7, r3
   1c74c:	781b      	ldrb	r3, [r3, #0]
   1c74e:	b25b      	sxtb	r3, r3
   1c750:	2b00      	cmp	r3, #0
   1c752:	dcd6      	bgt.n	1c702 <prvUnlockQueue+0x1a>
   1c754:	e000      	b.n	1c758 <prvUnlockQueue+0x70>
   1c756:	46c0      	nop			; (mov r8, r8)
   1c758:	687b      	ldr	r3, [r7, #4]
   1c75a:	2245      	movs	r2, #69	; 0x45
   1c75c:	21ff      	movs	r1, #255	; 0xff
   1c75e:	5499      	strb	r1, [r3, r2]
   1c760:	4b1c      	ldr	r3, [pc, #112]	; (1c7d4 <prvUnlockQueue+0xec>)
   1c762:	4798      	blx	r3
   1c764:	4b17      	ldr	r3, [pc, #92]	; (1c7c4 <prvUnlockQueue+0xdc>)
   1c766:	4798      	blx	r3
   1c768:	230e      	movs	r3, #14
   1c76a:	18fb      	adds	r3, r7, r3
   1c76c:	687a      	ldr	r2, [r7, #4]
   1c76e:	2144      	movs	r1, #68	; 0x44
   1c770:	5c52      	ldrb	r2, [r2, r1]
   1c772:	701a      	strb	r2, [r3, #0]
   1c774:	e014      	b.n	1c7a0 <prvUnlockQueue+0xb8>
   1c776:	687b      	ldr	r3, [r7, #4]
   1c778:	691b      	ldr	r3, [r3, #16]
   1c77a:	2b00      	cmp	r3, #0
   1c77c:	d017      	beq.n	1c7ae <prvUnlockQueue+0xc6>
   1c77e:	687b      	ldr	r3, [r7, #4]
   1c780:	3310      	adds	r3, #16
   1c782:	0018      	movs	r0, r3
   1c784:	4b12      	ldr	r3, [pc, #72]	; (1c7d0 <prvUnlockQueue+0xe8>)
   1c786:	4798      	blx	r3
   1c788:	1e03      	subs	r3, r0, #0
   1c78a:	d001      	beq.n	1c790 <prvUnlockQueue+0xa8>
   1c78c:	4b0f      	ldr	r3, [pc, #60]	; (1c7cc <prvUnlockQueue+0xe4>)
   1c78e:	4798      	blx	r3
   1c790:	230e      	movs	r3, #14
   1c792:	18fb      	adds	r3, r7, r3
   1c794:	781b      	ldrb	r3, [r3, #0]
   1c796:	3b01      	subs	r3, #1
   1c798:	b2da      	uxtb	r2, r3
   1c79a:	230e      	movs	r3, #14
   1c79c:	18fb      	adds	r3, r7, r3
   1c79e:	701a      	strb	r2, [r3, #0]
   1c7a0:	230e      	movs	r3, #14
   1c7a2:	18fb      	adds	r3, r7, r3
   1c7a4:	781b      	ldrb	r3, [r3, #0]
   1c7a6:	b25b      	sxtb	r3, r3
   1c7a8:	2b00      	cmp	r3, #0
   1c7aa:	dce4      	bgt.n	1c776 <prvUnlockQueue+0x8e>
   1c7ac:	e000      	b.n	1c7b0 <prvUnlockQueue+0xc8>
   1c7ae:	46c0      	nop			; (mov r8, r8)
   1c7b0:	687b      	ldr	r3, [r7, #4]
   1c7b2:	2244      	movs	r2, #68	; 0x44
   1c7b4:	21ff      	movs	r1, #255	; 0xff
   1c7b6:	5499      	strb	r1, [r3, r2]
   1c7b8:	4b06      	ldr	r3, [pc, #24]	; (1c7d4 <prvUnlockQueue+0xec>)
   1c7ba:	4798      	blx	r3
   1c7bc:	46c0      	nop			; (mov r8, r8)
   1c7be:	46bd      	mov	sp, r7
   1c7c0:	b004      	add	sp, #16
   1c7c2:	bd80      	pop	{r7, pc}
   1c7c4:	0001ade9 	.word	0x0001ade9
   1c7c8:	0001c8bd 	.word	0x0001c8bd
   1c7cc:	0001d891 	.word	0x0001d891
   1c7d0:	0001d67d 	.word	0x0001d67d
   1c7d4:	0001ae0d 	.word	0x0001ae0d

0001c7d8 <prvIsQueueEmpty>:
   1c7d8:	b580      	push	{r7, lr}
   1c7da:	b084      	sub	sp, #16
   1c7dc:	af00      	add	r7, sp, #0
   1c7de:	6078      	str	r0, [r7, #4]
   1c7e0:	4b08      	ldr	r3, [pc, #32]	; (1c804 <prvIsQueueEmpty+0x2c>)
   1c7e2:	4798      	blx	r3
   1c7e4:	687b      	ldr	r3, [r7, #4]
   1c7e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c7e8:	2b00      	cmp	r3, #0
   1c7ea:	d102      	bne.n	1c7f2 <prvIsQueueEmpty+0x1a>
   1c7ec:	2301      	movs	r3, #1
   1c7ee:	60fb      	str	r3, [r7, #12]
   1c7f0:	e001      	b.n	1c7f6 <prvIsQueueEmpty+0x1e>
   1c7f2:	2300      	movs	r3, #0
   1c7f4:	60fb      	str	r3, [r7, #12]
   1c7f6:	4b04      	ldr	r3, [pc, #16]	; (1c808 <prvIsQueueEmpty+0x30>)
   1c7f8:	4798      	blx	r3
   1c7fa:	68fb      	ldr	r3, [r7, #12]
   1c7fc:	0018      	movs	r0, r3
   1c7fe:	46bd      	mov	sp, r7
   1c800:	b004      	add	sp, #16
   1c802:	bd80      	pop	{r7, pc}
   1c804:	0001ade9 	.word	0x0001ade9
   1c808:	0001ae0d 	.word	0x0001ae0d

0001c80c <prvIsQueueFull>:
   1c80c:	b580      	push	{r7, lr}
   1c80e:	b084      	sub	sp, #16
   1c810:	af00      	add	r7, sp, #0
   1c812:	6078      	str	r0, [r7, #4]
   1c814:	4b09      	ldr	r3, [pc, #36]	; (1c83c <prvIsQueueFull+0x30>)
   1c816:	4798      	blx	r3
   1c818:	687b      	ldr	r3, [r7, #4]
   1c81a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1c81c:	687b      	ldr	r3, [r7, #4]
   1c81e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1c820:	429a      	cmp	r2, r3
   1c822:	d102      	bne.n	1c82a <prvIsQueueFull+0x1e>
   1c824:	2301      	movs	r3, #1
   1c826:	60fb      	str	r3, [r7, #12]
   1c828:	e001      	b.n	1c82e <prvIsQueueFull+0x22>
   1c82a:	2300      	movs	r3, #0
   1c82c:	60fb      	str	r3, [r7, #12]
   1c82e:	4b04      	ldr	r3, [pc, #16]	; (1c840 <prvIsQueueFull+0x34>)
   1c830:	4798      	blx	r3
   1c832:	68fb      	ldr	r3, [r7, #12]
   1c834:	0018      	movs	r0, r3
   1c836:	46bd      	mov	sp, r7
   1c838:	b004      	add	sp, #16
   1c83a:	bd80      	pop	{r7, pc}
   1c83c:	0001ade9 	.word	0x0001ade9
   1c840:	0001ae0d 	.word	0x0001ae0d

0001c844 <vQueueWaitForMessageRestricted>:
   1c844:	b580      	push	{r7, lr}
   1c846:	b086      	sub	sp, #24
   1c848:	af00      	add	r7, sp, #0
   1c84a:	60f8      	str	r0, [r7, #12]
   1c84c:	60b9      	str	r1, [r7, #8]
   1c84e:	607a      	str	r2, [r7, #4]
   1c850:	68fb      	ldr	r3, [r7, #12]
   1c852:	617b      	str	r3, [r7, #20]
   1c854:	4b15      	ldr	r3, [pc, #84]	; (1c8ac <vQueueWaitForMessageRestricted+0x68>)
   1c856:	4798      	blx	r3
   1c858:	697b      	ldr	r3, [r7, #20]
   1c85a:	2244      	movs	r2, #68	; 0x44
   1c85c:	5c9b      	ldrb	r3, [r3, r2]
   1c85e:	b25b      	sxtb	r3, r3
   1c860:	3301      	adds	r3, #1
   1c862:	d103      	bne.n	1c86c <vQueueWaitForMessageRestricted+0x28>
   1c864:	697b      	ldr	r3, [r7, #20]
   1c866:	2244      	movs	r2, #68	; 0x44
   1c868:	2100      	movs	r1, #0
   1c86a:	5499      	strb	r1, [r3, r2]
   1c86c:	697b      	ldr	r3, [r7, #20]
   1c86e:	2245      	movs	r2, #69	; 0x45
   1c870:	5c9b      	ldrb	r3, [r3, r2]
   1c872:	b25b      	sxtb	r3, r3
   1c874:	3301      	adds	r3, #1
   1c876:	d103      	bne.n	1c880 <vQueueWaitForMessageRestricted+0x3c>
   1c878:	697b      	ldr	r3, [r7, #20]
   1c87a:	2245      	movs	r2, #69	; 0x45
   1c87c:	2100      	movs	r1, #0
   1c87e:	5499      	strb	r1, [r3, r2]
   1c880:	4b0b      	ldr	r3, [pc, #44]	; (1c8b0 <vQueueWaitForMessageRestricted+0x6c>)
   1c882:	4798      	blx	r3
   1c884:	697b      	ldr	r3, [r7, #20]
   1c886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c888:	2b00      	cmp	r3, #0
   1c88a:	d106      	bne.n	1c89a <vQueueWaitForMessageRestricted+0x56>
   1c88c:	697b      	ldr	r3, [r7, #20]
   1c88e:	3324      	adds	r3, #36	; 0x24
   1c890:	687a      	ldr	r2, [r7, #4]
   1c892:	68b9      	ldr	r1, [r7, #8]
   1c894:	0018      	movs	r0, r3
   1c896:	4b07      	ldr	r3, [pc, #28]	; (1c8b4 <vQueueWaitForMessageRestricted+0x70>)
   1c898:	4798      	blx	r3
   1c89a:	697b      	ldr	r3, [r7, #20]
   1c89c:	0018      	movs	r0, r3
   1c89e:	4b06      	ldr	r3, [pc, #24]	; (1c8b8 <vQueueWaitForMessageRestricted+0x74>)
   1c8a0:	4798      	blx	r3
   1c8a2:	46c0      	nop			; (mov r8, r8)
   1c8a4:	46bd      	mov	sp, r7
   1c8a6:	b006      	add	sp, #24
   1c8a8:	bd80      	pop	{r7, pc}
   1c8aa:	46c0      	nop			; (mov r8, r8)
   1c8ac:	0001ade9 	.word	0x0001ade9
   1c8b0:	0001ae0d 	.word	0x0001ae0d
   1c8b4:	0001d59d 	.word	0x0001d59d
   1c8b8:	0001c6e9 	.word	0x0001c6e9

0001c8bc <prvNotifyQueueSetContainer>:
   1c8bc:	b5b0      	push	{r4, r5, r7, lr}
   1c8be:	b086      	sub	sp, #24
   1c8c0:	af00      	add	r7, sp, #0
   1c8c2:	6078      	str	r0, [r7, #4]
   1c8c4:	6039      	str	r1, [r7, #0]
   1c8c6:	687b      	ldr	r3, [r7, #4]
   1c8c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c8ca:	613b      	str	r3, [r7, #16]
   1c8cc:	2300      	movs	r3, #0
   1c8ce:	617b      	str	r3, [r7, #20]
   1c8d0:	693b      	ldr	r3, [r7, #16]
   1c8d2:	2b00      	cmp	r3, #0
   1c8d4:	d101      	bne.n	1c8da <prvNotifyQueueSetContainer+0x1e>
   1c8d6:	b672      	cpsid	i
   1c8d8:	e7fe      	b.n	1c8d8 <prvNotifyQueueSetContainer+0x1c>
   1c8da:	693b      	ldr	r3, [r7, #16]
   1c8dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1c8de:	693b      	ldr	r3, [r7, #16]
   1c8e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1c8e2:	429a      	cmp	r2, r3
   1c8e4:	d301      	bcc.n	1c8ea <prvNotifyQueueSetContainer+0x2e>
   1c8e6:	b672      	cpsid	i
   1c8e8:	e7fe      	b.n	1c8e8 <prvNotifyQueueSetContainer+0x2c>
   1c8ea:	693b      	ldr	r3, [r7, #16]
   1c8ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1c8ee:	693b      	ldr	r3, [r7, #16]
   1c8f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1c8f2:	429a      	cmp	r2, r3
   1c8f4:	d300      	bcc.n	1c8f8 <prvNotifyQueueSetContainer+0x3c>
   1c8f6:	e08b      	b.n	1ca10 <prvNotifyQueueSetContainer+0x154>
   1c8f8:	230f      	movs	r3, #15
   1c8fa:	18fb      	adds	r3, r7, r3
   1c8fc:	693a      	ldr	r2, [r7, #16]
   1c8fe:	2145      	movs	r1, #69	; 0x45
   1c900:	5c52      	ldrb	r2, [r2, r1]
   1c902:	701a      	strb	r2, [r3, #0]
   1c904:	4b45      	ldr	r3, [pc, #276]	; (1ca1c <prvNotifyQueueSetContainer+0x160>)
   1c906:	4798      	blx	r3
   1c908:	0003      	movs	r3, r0
   1c90a:	0018      	movs	r0, r3
   1c90c:	4b44      	ldr	r3, [pc, #272]	; (1ca20 <prvNotifyQueueSetContainer+0x164>)
   1c90e:	4798      	blx	r3
   1c910:	0003      	movs	r3, r0
   1c912:	001a      	movs	r2, r3
   1c914:	4b43      	ldr	r3, [pc, #268]	; (1ca24 <prvNotifyQueueSetContainer+0x168>)
   1c916:	881b      	ldrh	r3, [r3, #0]
   1c918:	4013      	ands	r3, r2
   1c91a:	b29b      	uxth	r3, r3
   1c91c:	2b00      	cmp	r3, #0
   1c91e:	d02e      	beq.n	1c97e <prvNotifyQueueSetContainer+0xc2>
   1c920:	693b      	ldr	r3, [r7, #16]
   1c922:	0018      	movs	r0, r3
   1c924:	4b40      	ldr	r3, [pc, #256]	; (1ca28 <prvNotifyQueueSetContainer+0x16c>)
   1c926:	4798      	blx	r3
   1c928:	0003      	movs	r3, r0
   1c92a:	001a      	movs	r2, r3
   1c92c:	4b3d      	ldr	r3, [pc, #244]	; (1ca24 <prvNotifyQueueSetContainer+0x168>)
   1c92e:	881b      	ldrh	r3, [r3, #0]
   1c930:	4013      	ands	r3, r2
   1c932:	b29b      	uxth	r3, r3
   1c934:	2b00      	cmp	r3, #0
   1c936:	d022      	beq.n	1c97e <prvNotifyQueueSetContainer+0xc2>
   1c938:	683b      	ldr	r3, [r7, #0]
   1c93a:	2b00      	cmp	r3, #0
   1c93c:	d10b      	bne.n	1c956 <prvNotifyQueueSetContainer+0x9a>
   1c93e:	693b      	ldr	r3, [r7, #16]
   1c940:	0018      	movs	r0, r3
   1c942:	4b3a      	ldr	r3, [pc, #232]	; (1ca2c <prvNotifyQueueSetContainer+0x170>)
   1c944:	4798      	blx	r3
   1c946:	0003      	movs	r3, r0
   1c948:	001a      	movs	r2, r3
   1c94a:	4b39      	ldr	r3, [pc, #228]	; (1ca30 <prvNotifyQueueSetContainer+0x174>)
   1c94c:	5c9b      	ldrb	r3, [r3, r2]
   1c94e:	3320      	adds	r3, #32
   1c950:	b2db      	uxtb	r3, r3
   1c952:	001d      	movs	r5, r3
   1c954:	e000      	b.n	1c958 <prvNotifyQueueSetContainer+0x9c>
   1c956:	2525      	movs	r5, #37	; 0x25
   1c958:	693b      	ldr	r3, [r7, #16]
   1c95a:	0018      	movs	r0, r3
   1c95c:	4b33      	ldr	r3, [pc, #204]	; (1ca2c <prvNotifyQueueSetContainer+0x170>)
   1c95e:	4798      	blx	r3
   1c960:	0003      	movs	r3, r0
   1c962:	001a      	movs	r2, r3
   1c964:	4b32      	ldr	r3, [pc, #200]	; (1ca30 <prvNotifyQueueSetContainer+0x174>)
   1c966:	5c9c      	ldrb	r4, [r3, r2]
   1c968:	693b      	ldr	r3, [r7, #16]
   1c96a:	0018      	movs	r0, r3
   1c96c:	4b31      	ldr	r3, [pc, #196]	; (1ca34 <prvNotifyQueueSetContainer+0x178>)
   1c96e:	4798      	blx	r3
   1c970:	0003      	movs	r3, r0
   1c972:	b2db      	uxtb	r3, r3
   1c974:	001a      	movs	r2, r3
   1c976:	0021      	movs	r1, r4
   1c978:	0028      	movs	r0, r5
   1c97a:	4b2f      	ldr	r3, [pc, #188]	; (1ca38 <prvNotifyQueueSetContainer+0x17c>)
   1c97c:	4798      	blx	r3
   1c97e:	693b      	ldr	r3, [r7, #16]
   1c980:	0018      	movs	r0, r3
   1c982:	4b2a      	ldr	r3, [pc, #168]	; (1ca2c <prvNotifyQueueSetContainer+0x170>)
   1c984:	4798      	blx	r3
   1c986:	0003      	movs	r3, r0
   1c988:	001a      	movs	r2, r3
   1c98a:	4b29      	ldr	r3, [pc, #164]	; (1ca30 <prvNotifyQueueSetContainer+0x174>)
   1c98c:	5c9c      	ldrb	r4, [r3, r2]
   1c98e:	693b      	ldr	r3, [r7, #16]
   1c990:	0018      	movs	r0, r3
   1c992:	4b28      	ldr	r3, [pc, #160]	; (1ca34 <prvNotifyQueueSetContainer+0x178>)
   1c994:	4798      	blx	r3
   1c996:	0003      	movs	r3, r0
   1c998:	b2dd      	uxtb	r5, r3
   1c99a:	693b      	ldr	r3, [r7, #16]
   1c99c:	0018      	movs	r0, r3
   1c99e:	4b23      	ldr	r3, [pc, #140]	; (1ca2c <prvNotifyQueueSetContainer+0x170>)
   1c9a0:	4798      	blx	r3
   1c9a2:	0003      	movs	r3, r0
   1c9a4:	001a      	movs	r2, r3
   1c9a6:	4b22      	ldr	r3, [pc, #136]	; (1ca30 <prvNotifyQueueSetContainer+0x174>)
   1c9a8:	5c9b      	ldrb	r3, [r3, r2]
   1c9aa:	2b02      	cmp	r3, #2
   1c9ac:	d005      	beq.n	1c9ba <prvNotifyQueueSetContainer+0xfe>
   1c9ae:	693b      	ldr	r3, [r7, #16]
   1c9b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c9b2:	b2db      	uxtb	r3, r3
   1c9b4:	3301      	adds	r3, #1
   1c9b6:	b2db      	uxtb	r3, r3
   1c9b8:	e000      	b.n	1c9bc <prvNotifyQueueSetContainer+0x100>
   1c9ba:	2300      	movs	r3, #0
   1c9bc:	001a      	movs	r2, r3
   1c9be:	0029      	movs	r1, r5
   1c9c0:	0020      	movs	r0, r4
   1c9c2:	4b1e      	ldr	r3, [pc, #120]	; (1ca3c <prvNotifyQueueSetContainer+0x180>)
   1c9c4:	4798      	blx	r3
   1c9c6:	683a      	ldr	r2, [r7, #0]
   1c9c8:	1d39      	adds	r1, r7, #4
   1c9ca:	693b      	ldr	r3, [r7, #16]
   1c9cc:	0018      	movs	r0, r3
   1c9ce:	4b1c      	ldr	r3, [pc, #112]	; (1ca40 <prvNotifyQueueSetContainer+0x184>)
   1c9d0:	4798      	blx	r3
   1c9d2:	0003      	movs	r3, r0
   1c9d4:	617b      	str	r3, [r7, #20]
   1c9d6:	230f      	movs	r3, #15
   1c9d8:	18fb      	adds	r3, r7, r3
   1c9da:	781b      	ldrb	r3, [r3, #0]
   1c9dc:	b25b      	sxtb	r3, r3
   1c9de:	3301      	adds	r3, #1
   1c9e0:	d10d      	bne.n	1c9fe <prvNotifyQueueSetContainer+0x142>
   1c9e2:	693b      	ldr	r3, [r7, #16]
   1c9e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c9e6:	2b00      	cmp	r3, #0
   1c9e8:	d012      	beq.n	1ca10 <prvNotifyQueueSetContainer+0x154>
   1c9ea:	693b      	ldr	r3, [r7, #16]
   1c9ec:	3324      	adds	r3, #36	; 0x24
   1c9ee:	0018      	movs	r0, r3
   1c9f0:	4b14      	ldr	r3, [pc, #80]	; (1ca44 <prvNotifyQueueSetContainer+0x188>)
   1c9f2:	4798      	blx	r3
   1c9f4:	1e03      	subs	r3, r0, #0
   1c9f6:	d00b      	beq.n	1ca10 <prvNotifyQueueSetContainer+0x154>
   1c9f8:	2301      	movs	r3, #1
   1c9fa:	617b      	str	r3, [r7, #20]
   1c9fc:	e008      	b.n	1ca10 <prvNotifyQueueSetContainer+0x154>
   1c9fe:	230f      	movs	r3, #15
   1ca00:	18fb      	adds	r3, r7, r3
   1ca02:	781b      	ldrb	r3, [r3, #0]
   1ca04:	3301      	adds	r3, #1
   1ca06:	b2db      	uxtb	r3, r3
   1ca08:	b259      	sxtb	r1, r3
   1ca0a:	693b      	ldr	r3, [r7, #16]
   1ca0c:	2245      	movs	r2, #69	; 0x45
   1ca0e:	5499      	strb	r1, [r3, r2]
   1ca10:	697b      	ldr	r3, [r7, #20]
   1ca12:	0018      	movs	r0, r3
   1ca14:	46bd      	mov	sp, r7
   1ca16:	b006      	add	sp, #24
   1ca18:	bdb0      	pop	{r4, r5, r7, pc}
   1ca1a:	46c0      	nop			; (mov r8, r8)
   1ca1c:	00019081 	.word	0x00019081
   1ca20:	00018de5 	.word	0x00018de5
   1ca24:	20000104 	.word	0x20000104
   1ca28:	00018ea5 	.word	0x00018ea5
   1ca2c:	00018da5 	.word	0x00018da5
   1ca30:	200000f8 	.word	0x200000f8
   1ca34:	00018e85 	.word	0x00018e85
   1ca38:	000197dd 	.word	0x000197dd
   1ca3c:	00019e39 	.word	0x00019e39
   1ca40:	0001c5b9 	.word	0x0001c5b9
   1ca44:	0001d67d 	.word	0x0001d67d

0001ca48 <xTaskCreate>:
   1ca48:	b590      	push	{r4, r7, lr}
   1ca4a:	b08d      	sub	sp, #52	; 0x34
   1ca4c:	af04      	add	r7, sp, #16
   1ca4e:	60f8      	str	r0, [r7, #12]
   1ca50:	60b9      	str	r1, [r7, #8]
   1ca52:	603b      	str	r3, [r7, #0]
   1ca54:	1dbb      	adds	r3, r7, #6
   1ca56:	801a      	strh	r2, [r3, #0]
   1ca58:	1dbb      	adds	r3, r7, #6
   1ca5a:	881b      	ldrh	r3, [r3, #0]
   1ca5c:	009b      	lsls	r3, r3, #2
   1ca5e:	0018      	movs	r0, r3
   1ca60:	4b1d      	ldr	r3, [pc, #116]	; (1cad8 <xTaskCreate+0x90>)
   1ca62:	4798      	blx	r3
   1ca64:	0003      	movs	r3, r0
   1ca66:	617b      	str	r3, [r7, #20]
   1ca68:	697b      	ldr	r3, [r7, #20]
   1ca6a:	2b00      	cmp	r3, #0
   1ca6c:	d010      	beq.n	1ca90 <xTaskCreate+0x48>
   1ca6e:	2054      	movs	r0, #84	; 0x54
   1ca70:	4b19      	ldr	r3, [pc, #100]	; (1cad8 <xTaskCreate+0x90>)
   1ca72:	4798      	blx	r3
   1ca74:	0003      	movs	r3, r0
   1ca76:	61fb      	str	r3, [r7, #28]
   1ca78:	69fb      	ldr	r3, [r7, #28]
   1ca7a:	2b00      	cmp	r3, #0
   1ca7c:	d003      	beq.n	1ca86 <xTaskCreate+0x3e>
   1ca7e:	69fb      	ldr	r3, [r7, #28]
   1ca80:	697a      	ldr	r2, [r7, #20]
   1ca82:	631a      	str	r2, [r3, #48]	; 0x30
   1ca84:	e006      	b.n	1ca94 <xTaskCreate+0x4c>
   1ca86:	697b      	ldr	r3, [r7, #20]
   1ca88:	0018      	movs	r0, r3
   1ca8a:	4b14      	ldr	r3, [pc, #80]	; (1cadc <xTaskCreate+0x94>)
   1ca8c:	4798      	blx	r3
   1ca8e:	e001      	b.n	1ca94 <xTaskCreate+0x4c>
   1ca90:	2300      	movs	r3, #0
   1ca92:	61fb      	str	r3, [r7, #28]
   1ca94:	69fb      	ldr	r3, [r7, #28]
   1ca96:	2b00      	cmp	r3, #0
   1ca98:	d016      	beq.n	1cac8 <xTaskCreate+0x80>
   1ca9a:	1dbb      	adds	r3, r7, #6
   1ca9c:	881a      	ldrh	r2, [r3, #0]
   1ca9e:	683c      	ldr	r4, [r7, #0]
   1caa0:	68b9      	ldr	r1, [r7, #8]
   1caa2:	68f8      	ldr	r0, [r7, #12]
   1caa4:	2300      	movs	r3, #0
   1caa6:	9303      	str	r3, [sp, #12]
   1caa8:	69fb      	ldr	r3, [r7, #28]
   1caaa:	9302      	str	r3, [sp, #8]
   1caac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1caae:	9301      	str	r3, [sp, #4]
   1cab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1cab2:	9300      	str	r3, [sp, #0]
   1cab4:	0023      	movs	r3, r4
   1cab6:	4c0a      	ldr	r4, [pc, #40]	; (1cae0 <xTaskCreate+0x98>)
   1cab8:	47a0      	blx	r4
   1caba:	69fb      	ldr	r3, [r7, #28]
   1cabc:	0018      	movs	r0, r3
   1cabe:	4b09      	ldr	r3, [pc, #36]	; (1cae4 <xTaskCreate+0x9c>)
   1cac0:	4798      	blx	r3
   1cac2:	2301      	movs	r3, #1
   1cac4:	61bb      	str	r3, [r7, #24]
   1cac6:	e002      	b.n	1cace <xTaskCreate+0x86>
   1cac8:	2301      	movs	r3, #1
   1caca:	425b      	negs	r3, r3
   1cacc:	61bb      	str	r3, [r7, #24]
   1cace:	69bb      	ldr	r3, [r7, #24]
   1cad0:	0018      	movs	r0, r3
   1cad2:	46bd      	mov	sp, r7
   1cad4:	b009      	add	sp, #36	; 0x24
   1cad6:	bd90      	pop	{r4, r7, pc}
   1cad8:	0001af21 	.word	0x0001af21
   1cadc:	0001afe5 	.word	0x0001afe5
   1cae0:	0001cae9 	.word	0x0001cae9
   1cae4:	0001cbf9 	.word	0x0001cbf9

0001cae8 <prvInitialiseNewTask>:
   1cae8:	b580      	push	{r7, lr}
   1caea:	b086      	sub	sp, #24
   1caec:	af00      	add	r7, sp, #0
   1caee:	60f8      	str	r0, [r7, #12]
   1caf0:	60b9      	str	r1, [r7, #8]
   1caf2:	607a      	str	r2, [r7, #4]
   1caf4:	603b      	str	r3, [r7, #0]
   1caf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1caf8:	6b18      	ldr	r0, [r3, #48]	; 0x30
   1cafa:	687b      	ldr	r3, [r7, #4]
   1cafc:	009b      	lsls	r3, r3, #2
   1cafe:	001a      	movs	r2, r3
   1cb00:	21a5      	movs	r1, #165	; 0xa5
   1cb02:	4b39      	ldr	r3, [pc, #228]	; (1cbe8 <prvInitialiseNewTask+0x100>)
   1cb04:	4798      	blx	r3
   1cb06:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cb08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1cb0a:	687b      	ldr	r3, [r7, #4]
   1cb0c:	4937      	ldr	r1, [pc, #220]	; (1cbec <prvInitialiseNewTask+0x104>)
   1cb0e:	468c      	mov	ip, r1
   1cb10:	4463      	add	r3, ip
   1cb12:	009b      	lsls	r3, r3, #2
   1cb14:	18d3      	adds	r3, r2, r3
   1cb16:	613b      	str	r3, [r7, #16]
   1cb18:	693b      	ldr	r3, [r7, #16]
   1cb1a:	2207      	movs	r2, #7
   1cb1c:	4393      	bics	r3, r2
   1cb1e:	613b      	str	r3, [r7, #16]
   1cb20:	693b      	ldr	r3, [r7, #16]
   1cb22:	2207      	movs	r2, #7
   1cb24:	4013      	ands	r3, r2
   1cb26:	d001      	beq.n	1cb2c <prvInitialiseNewTask+0x44>
   1cb28:	b672      	cpsid	i
   1cb2a:	e7fe      	b.n	1cb2a <prvInitialiseNewTask+0x42>
   1cb2c:	2300      	movs	r3, #0
   1cb2e:	617b      	str	r3, [r7, #20]
   1cb30:	e013      	b.n	1cb5a <prvInitialiseNewTask+0x72>
   1cb32:	68ba      	ldr	r2, [r7, #8]
   1cb34:	697b      	ldr	r3, [r7, #20]
   1cb36:	18d3      	adds	r3, r2, r3
   1cb38:	7818      	ldrb	r0, [r3, #0]
   1cb3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1cb3c:	2134      	movs	r1, #52	; 0x34
   1cb3e:	697b      	ldr	r3, [r7, #20]
   1cb40:	18d3      	adds	r3, r2, r3
   1cb42:	185b      	adds	r3, r3, r1
   1cb44:	1c02      	adds	r2, r0, #0
   1cb46:	701a      	strb	r2, [r3, #0]
   1cb48:	68ba      	ldr	r2, [r7, #8]
   1cb4a:	697b      	ldr	r3, [r7, #20]
   1cb4c:	18d3      	adds	r3, r2, r3
   1cb4e:	781b      	ldrb	r3, [r3, #0]
   1cb50:	2b00      	cmp	r3, #0
   1cb52:	d006      	beq.n	1cb62 <prvInitialiseNewTask+0x7a>
   1cb54:	697b      	ldr	r3, [r7, #20]
   1cb56:	3301      	adds	r3, #1
   1cb58:	617b      	str	r3, [r7, #20]
   1cb5a:	697b      	ldr	r3, [r7, #20]
   1cb5c:	2b07      	cmp	r3, #7
   1cb5e:	d9e8      	bls.n	1cb32 <prvInitialiseNewTask+0x4a>
   1cb60:	e000      	b.n	1cb64 <prvInitialiseNewTask+0x7c>
   1cb62:	46c0      	nop			; (mov r8, r8)
   1cb64:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cb66:	223b      	movs	r2, #59	; 0x3b
   1cb68:	2100      	movs	r1, #0
   1cb6a:	5499      	strb	r1, [r3, r2]
   1cb6c:	6a3b      	ldr	r3, [r7, #32]
   1cb6e:	2b04      	cmp	r3, #4
   1cb70:	d901      	bls.n	1cb76 <prvInitialiseNewTask+0x8e>
   1cb72:	2304      	movs	r3, #4
   1cb74:	623b      	str	r3, [r7, #32]
   1cb76:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cb78:	6a3a      	ldr	r2, [r7, #32]
   1cb7a:	62da      	str	r2, [r3, #44]	; 0x2c
   1cb7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cb7e:	6a3a      	ldr	r2, [r7, #32]
   1cb80:	645a      	str	r2, [r3, #68]	; 0x44
   1cb82:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cb84:	2200      	movs	r2, #0
   1cb86:	649a      	str	r2, [r3, #72]	; 0x48
   1cb88:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cb8a:	3304      	adds	r3, #4
   1cb8c:	0018      	movs	r0, r3
   1cb8e:	4b18      	ldr	r3, [pc, #96]	; (1cbf0 <prvInitialiseNewTask+0x108>)
   1cb90:	4798      	blx	r3
   1cb92:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cb94:	3318      	adds	r3, #24
   1cb96:	0018      	movs	r0, r3
   1cb98:	4b15      	ldr	r3, [pc, #84]	; (1cbf0 <prvInitialiseNewTask+0x108>)
   1cb9a:	4798      	blx	r3
   1cb9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cb9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1cba0:	611a      	str	r2, [r3, #16]
   1cba2:	6a3b      	ldr	r3, [r7, #32]
   1cba4:	2205      	movs	r2, #5
   1cba6:	1ad2      	subs	r2, r2, r3
   1cba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cbaa:	619a      	str	r2, [r3, #24]
   1cbac:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cbae:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1cbb0:	625a      	str	r2, [r3, #36]	; 0x24
   1cbb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cbb4:	2200      	movs	r2, #0
   1cbb6:	64da      	str	r2, [r3, #76]	; 0x4c
   1cbb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cbba:	2250      	movs	r2, #80	; 0x50
   1cbbc:	2100      	movs	r1, #0
   1cbbe:	5499      	strb	r1, [r3, r2]
   1cbc0:	683a      	ldr	r2, [r7, #0]
   1cbc2:	68f9      	ldr	r1, [r7, #12]
   1cbc4:	693b      	ldr	r3, [r7, #16]
   1cbc6:	0018      	movs	r0, r3
   1cbc8:	4b0a      	ldr	r3, [pc, #40]	; (1cbf4 <prvInitialiseNewTask+0x10c>)
   1cbca:	4798      	blx	r3
   1cbcc:	0002      	movs	r2, r0
   1cbce:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cbd0:	601a      	str	r2, [r3, #0]
   1cbd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1cbd4:	2b00      	cmp	r3, #0
   1cbd6:	d002      	beq.n	1cbde <prvInitialiseNewTask+0xf6>
   1cbd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1cbda:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1cbdc:	601a      	str	r2, [r3, #0]
   1cbde:	46c0      	nop			; (mov r8, r8)
   1cbe0:	46bd      	mov	sp, r7
   1cbe2:	b006      	add	sp, #24
   1cbe4:	bd80      	pop	{r7, pc}
   1cbe6:	46c0      	nop			; (mov r8, r8)
   1cbe8:	00035707 	.word	0x00035707
   1cbec:	3fffffff 	.word	0x3fffffff
   1cbf0:	0001ab99 	.word	0x0001ab99
   1cbf4:	0001acb1 	.word	0x0001acb1

0001cbf8 <prvAddNewTaskToReadyList>:
   1cbf8:	b580      	push	{r7, lr}
   1cbfa:	b082      	sub	sp, #8
   1cbfc:	af00      	add	r7, sp, #0
   1cbfe:	6078      	str	r0, [r7, #4]
   1cc00:	4b60      	ldr	r3, [pc, #384]	; (1cd84 <prvAddNewTaskToReadyList+0x18c>)
   1cc02:	4798      	blx	r3
   1cc04:	4b60      	ldr	r3, [pc, #384]	; (1cd88 <prvAddNewTaskToReadyList+0x190>)
   1cc06:	681b      	ldr	r3, [r3, #0]
   1cc08:	1c5a      	adds	r2, r3, #1
   1cc0a:	4b5f      	ldr	r3, [pc, #380]	; (1cd88 <prvAddNewTaskToReadyList+0x190>)
   1cc0c:	601a      	str	r2, [r3, #0]
   1cc0e:	4b5f      	ldr	r3, [pc, #380]	; (1cd8c <prvAddNewTaskToReadyList+0x194>)
   1cc10:	681b      	ldr	r3, [r3, #0]
   1cc12:	2b00      	cmp	r3, #0
   1cc14:	d109      	bne.n	1cc2a <prvAddNewTaskToReadyList+0x32>
   1cc16:	4b5d      	ldr	r3, [pc, #372]	; (1cd8c <prvAddNewTaskToReadyList+0x194>)
   1cc18:	687a      	ldr	r2, [r7, #4]
   1cc1a:	601a      	str	r2, [r3, #0]
   1cc1c:	4b5a      	ldr	r3, [pc, #360]	; (1cd88 <prvAddNewTaskToReadyList+0x190>)
   1cc1e:	681b      	ldr	r3, [r3, #0]
   1cc20:	2b01      	cmp	r3, #1
   1cc22:	d110      	bne.n	1cc46 <prvAddNewTaskToReadyList+0x4e>
   1cc24:	4b5a      	ldr	r3, [pc, #360]	; (1cd90 <prvAddNewTaskToReadyList+0x198>)
   1cc26:	4798      	blx	r3
   1cc28:	e00d      	b.n	1cc46 <prvAddNewTaskToReadyList+0x4e>
   1cc2a:	4b5a      	ldr	r3, [pc, #360]	; (1cd94 <prvAddNewTaskToReadyList+0x19c>)
   1cc2c:	681b      	ldr	r3, [r3, #0]
   1cc2e:	2b00      	cmp	r3, #0
   1cc30:	d109      	bne.n	1cc46 <prvAddNewTaskToReadyList+0x4e>
   1cc32:	4b56      	ldr	r3, [pc, #344]	; (1cd8c <prvAddNewTaskToReadyList+0x194>)
   1cc34:	681b      	ldr	r3, [r3, #0]
   1cc36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cc38:	687b      	ldr	r3, [r7, #4]
   1cc3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cc3c:	429a      	cmp	r2, r3
   1cc3e:	d802      	bhi.n	1cc46 <prvAddNewTaskToReadyList+0x4e>
   1cc40:	4b52      	ldr	r3, [pc, #328]	; (1cd8c <prvAddNewTaskToReadyList+0x194>)
   1cc42:	687a      	ldr	r2, [r7, #4]
   1cc44:	601a      	str	r2, [r3, #0]
   1cc46:	4b54      	ldr	r3, [pc, #336]	; (1cd98 <prvAddNewTaskToReadyList+0x1a0>)
   1cc48:	681b      	ldr	r3, [r3, #0]
   1cc4a:	1c5a      	adds	r2, r3, #1
   1cc4c:	4b52      	ldr	r3, [pc, #328]	; (1cd98 <prvAddNewTaskToReadyList+0x1a0>)
   1cc4e:	601a      	str	r2, [r3, #0]
   1cc50:	4b51      	ldr	r3, [pc, #324]	; (1cd98 <prvAddNewTaskToReadyList+0x1a0>)
   1cc52:	681a      	ldr	r2, [r3, #0]
   1cc54:	687b      	ldr	r3, [r7, #4]
   1cc56:	63da      	str	r2, [r3, #60]	; 0x3c
   1cc58:	687b      	ldr	r3, [r7, #4]
   1cc5a:	2b00      	cmp	r3, #0
   1cc5c:	d052      	beq.n	1cd04 <prvAddNewTaskToReadyList+0x10c>
   1cc5e:	2003      	movs	r0, #3
   1cc60:	4b4e      	ldr	r3, [pc, #312]	; (1cd9c <prvAddNewTaskToReadyList+0x1a4>)
   1cc62:	4798      	blx	r3
   1cc64:	0003      	movs	r3, r0
   1cc66:	b29a      	uxth	r2, r3
   1cc68:	687b      	ldr	r3, [r7, #4]
   1cc6a:	0011      	movs	r1, r2
   1cc6c:	0018      	movs	r0, r3
   1cc6e:	4b4c      	ldr	r3, [pc, #304]	; (1cda0 <prvAddNewTaskToReadyList+0x1a8>)
   1cc70:	4798      	blx	r3
   1cc72:	4b4c      	ldr	r3, [pc, #304]	; (1cda4 <prvAddNewTaskToReadyList+0x1ac>)
   1cc74:	881a      	ldrh	r2, [r3, #0]
   1cc76:	687b      	ldr	r3, [r7, #4]
   1cc78:	0011      	movs	r1, r2
   1cc7a:	0018      	movs	r0, r3
   1cc7c:	4b4a      	ldr	r3, [pc, #296]	; (1cda8 <prvAddNewTaskToReadyList+0x1b0>)
   1cc7e:	4798      	blx	r3
   1cc80:	687b      	ldr	r3, [r7, #4]
   1cc82:	0018      	movs	r0, r3
   1cc84:	4b49      	ldr	r3, [pc, #292]	; (1cdac <prvAddNewTaskToReadyList+0x1b4>)
   1cc86:	4798      	blx	r3
   1cc88:	0003      	movs	r3, r0
   1cc8a:	b2d9      	uxtb	r1, r3
   1cc8c:	687b      	ldr	r3, [r7, #4]
   1cc8e:	3334      	adds	r3, #52	; 0x34
   1cc90:	001a      	movs	r2, r3
   1cc92:	2003      	movs	r0, #3
   1cc94:	4b46      	ldr	r3, [pc, #280]	; (1cdb0 <prvAddNewTaskToReadyList+0x1b8>)
   1cc96:	4798      	blx	r3
   1cc98:	687b      	ldr	r3, [r7, #4]
   1cc9a:	0018      	movs	r0, r3
   1cc9c:	4b43      	ldr	r3, [pc, #268]	; (1cdac <prvAddNewTaskToReadyList+0x1b4>)
   1cc9e:	4798      	blx	r3
   1cca0:	0003      	movs	r3, r0
   1cca2:	b2d9      	uxtb	r1, r3
   1cca4:	687b      	ldr	r3, [r7, #4]
   1cca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cca8:	b2db      	uxtb	r3, r3
   1ccaa:	001a      	movs	r2, r3
   1ccac:	2003      	movs	r0, #3
   1ccae:	4b41      	ldr	r3, [pc, #260]	; (1cdb4 <prvAddNewTaskToReadyList+0x1bc>)
   1ccb0:	4798      	blx	r3
   1ccb2:	4b41      	ldr	r3, [pc, #260]	; (1cdb8 <prvAddNewTaskToReadyList+0x1c0>)
   1ccb4:	4798      	blx	r3
   1ccb6:	0003      	movs	r3, r0
   1ccb8:	0018      	movs	r0, r3
   1ccba:	4b40      	ldr	r3, [pc, #256]	; (1cdbc <prvAddNewTaskToReadyList+0x1c4>)
   1ccbc:	4798      	blx	r3
   1ccbe:	0003      	movs	r3, r0
   1ccc0:	001a      	movs	r2, r3
   1ccc2:	4b3f      	ldr	r3, [pc, #252]	; (1cdc0 <prvAddNewTaskToReadyList+0x1c8>)
   1ccc4:	881b      	ldrh	r3, [r3, #0]
   1ccc6:	4013      	ands	r3, r2
   1ccc8:	b29b      	uxth	r3, r3
   1ccca:	2b00      	cmp	r3, #0
   1cccc:	d016      	beq.n	1ccfc <prvAddNewTaskToReadyList+0x104>
   1ccce:	687b      	ldr	r3, [r7, #4]
   1ccd0:	0018      	movs	r0, r3
   1ccd2:	4b3a      	ldr	r3, [pc, #232]	; (1cdbc <prvAddNewTaskToReadyList+0x1c4>)
   1ccd4:	4798      	blx	r3
   1ccd6:	0003      	movs	r3, r0
   1ccd8:	001a      	movs	r2, r3
   1ccda:	4b39      	ldr	r3, [pc, #228]	; (1cdc0 <prvAddNewTaskToReadyList+0x1c8>)
   1ccdc:	881b      	ldrh	r3, [r3, #0]
   1ccde:	4013      	ands	r3, r2
   1cce0:	b29b      	uxth	r3, r3
   1cce2:	2b00      	cmp	r3, #0
   1cce4:	d00a      	beq.n	1ccfc <prvAddNewTaskToReadyList+0x104>
   1cce6:	687b      	ldr	r3, [r7, #4]
   1cce8:	0018      	movs	r0, r3
   1ccea:	4b30      	ldr	r3, [pc, #192]	; (1cdac <prvAddNewTaskToReadyList+0x1b4>)
   1ccec:	4798      	blx	r3
   1ccee:	0003      	movs	r3, r0
   1ccf0:	b2db      	uxtb	r3, r3
   1ccf2:	001a      	movs	r2, r3
   1ccf4:	2103      	movs	r1, #3
   1ccf6:	201b      	movs	r0, #27
   1ccf8:	4b32      	ldr	r3, [pc, #200]	; (1cdc4 <prvAddNewTaskToReadyList+0x1cc>)
   1ccfa:	4798      	blx	r3
   1ccfc:	687b      	ldr	r3, [r7, #4]
   1ccfe:	0018      	movs	r0, r3
   1cd00:	4b31      	ldr	r3, [pc, #196]	; (1cdc8 <prvAddNewTaskToReadyList+0x1d0>)
   1cd02:	4798      	blx	r3
   1cd04:	687b      	ldr	r3, [r7, #4]
   1cd06:	0018      	movs	r0, r3
   1cd08:	4b2c      	ldr	r3, [pc, #176]	; (1cdbc <prvAddNewTaskToReadyList+0x1c4>)
   1cd0a:	4798      	blx	r3
   1cd0c:	0003      	movs	r3, r0
   1cd0e:	001a      	movs	r2, r3
   1cd10:	4b2b      	ldr	r3, [pc, #172]	; (1cdc0 <prvAddNewTaskToReadyList+0x1c8>)
   1cd12:	881b      	ldrh	r3, [r3, #0]
   1cd14:	4013      	ands	r3, r2
   1cd16:	b29b      	uxth	r3, r3
   1cd18:	2b00      	cmp	r3, #0
   1cd1a:	d008      	beq.n	1cd2e <prvAddNewTaskToReadyList+0x136>
   1cd1c:	687b      	ldr	r3, [r7, #4]
   1cd1e:	0018      	movs	r0, r3
   1cd20:	4b22      	ldr	r3, [pc, #136]	; (1cdac <prvAddNewTaskToReadyList+0x1b4>)
   1cd22:	4798      	blx	r3
   1cd24:	0003      	movs	r3, r0
   1cd26:	b2db      	uxtb	r3, r3
   1cd28:	0018      	movs	r0, r3
   1cd2a:	4b28      	ldr	r3, [pc, #160]	; (1cdcc <prvAddNewTaskToReadyList+0x1d4>)
   1cd2c:	4798      	blx	r3
   1cd2e:	687b      	ldr	r3, [r7, #4]
   1cd30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cd32:	4b27      	ldr	r3, [pc, #156]	; (1cdd0 <prvAddNewTaskToReadyList+0x1d8>)
   1cd34:	681b      	ldr	r3, [r3, #0]
   1cd36:	429a      	cmp	r2, r3
   1cd38:	d903      	bls.n	1cd42 <prvAddNewTaskToReadyList+0x14a>
   1cd3a:	687b      	ldr	r3, [r7, #4]
   1cd3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cd3e:	4b24      	ldr	r3, [pc, #144]	; (1cdd0 <prvAddNewTaskToReadyList+0x1d8>)
   1cd40:	601a      	str	r2, [r3, #0]
   1cd42:	687b      	ldr	r3, [r7, #4]
   1cd44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cd46:	0013      	movs	r3, r2
   1cd48:	009b      	lsls	r3, r3, #2
   1cd4a:	189b      	adds	r3, r3, r2
   1cd4c:	009b      	lsls	r3, r3, #2
   1cd4e:	4a21      	ldr	r2, [pc, #132]	; (1cdd4 <prvAddNewTaskToReadyList+0x1dc>)
   1cd50:	189a      	adds	r2, r3, r2
   1cd52:	687b      	ldr	r3, [r7, #4]
   1cd54:	3304      	adds	r3, #4
   1cd56:	0019      	movs	r1, r3
   1cd58:	0010      	movs	r0, r2
   1cd5a:	4b1f      	ldr	r3, [pc, #124]	; (1cdd8 <prvAddNewTaskToReadyList+0x1e0>)
   1cd5c:	4798      	blx	r3
   1cd5e:	4b1f      	ldr	r3, [pc, #124]	; (1cddc <prvAddNewTaskToReadyList+0x1e4>)
   1cd60:	4798      	blx	r3
   1cd62:	4b0c      	ldr	r3, [pc, #48]	; (1cd94 <prvAddNewTaskToReadyList+0x19c>)
   1cd64:	681b      	ldr	r3, [r3, #0]
   1cd66:	2b00      	cmp	r3, #0
   1cd68:	d008      	beq.n	1cd7c <prvAddNewTaskToReadyList+0x184>
   1cd6a:	4b08      	ldr	r3, [pc, #32]	; (1cd8c <prvAddNewTaskToReadyList+0x194>)
   1cd6c:	681b      	ldr	r3, [r3, #0]
   1cd6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cd70:	687b      	ldr	r3, [r7, #4]
   1cd72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cd74:	429a      	cmp	r2, r3
   1cd76:	d201      	bcs.n	1cd7c <prvAddNewTaskToReadyList+0x184>
   1cd78:	4b19      	ldr	r3, [pc, #100]	; (1cde0 <prvAddNewTaskToReadyList+0x1e8>)
   1cd7a:	4798      	blx	r3
   1cd7c:	46c0      	nop			; (mov r8, r8)
   1cd7e:	46bd      	mov	sp, r7
   1cd80:	b002      	add	sp, #8
   1cd82:	bd80      	pop	{r7, pc}
   1cd84:	0001ade9 	.word	0x0001ade9
   1cd88:	20003df0 	.word	0x20003df0
   1cd8c:	20003d18 	.word	0x20003d18
   1cd90:	0001d919 	.word	0x0001d919
   1cd94:	20003dfc 	.word	0x20003dfc
   1cd98:	20003e0c 	.word	0x20003e0c
   1cd9c:	0001a365 	.word	0x0001a365
   1cda0:	00018e09 	.word	0x00018e09
   1cda4:	20000106 	.word	0x20000106
   1cda8:	00018e45 	.word	0x00018e45
   1cdac:	00018dc5 	.word	0x00018dc5
   1cdb0:	0001a595 	.word	0x0001a595
   1cdb4:	00019cf9 	.word	0x00019cf9
   1cdb8:	00019081 	.word	0x00019081
   1cdbc:	00018de5 	.word	0x00018de5
   1cdc0:	20000104 	.word	0x20000104
   1cdc4:	000197dd 	.word	0x000197dd
   1cdc8:	00018f45 	.word	0x00018f45
   1cdcc:	00019595 	.word	0x00019595
   1cdd0:	20003df8 	.word	0x20003df8
   1cdd4:	20003d1c 	.word	0x20003d1c
   1cdd8:	0001abaf 	.word	0x0001abaf
   1cddc:	0001ae0d 	.word	0x0001ae0d
   1cde0:	0001add1 	.word	0x0001add1

0001cde4 <vTaskDelay>:
   1cde4:	b580      	push	{r7, lr}
   1cde6:	b084      	sub	sp, #16
   1cde8:	af00      	add	r7, sp, #0
   1cdea:	6078      	str	r0, [r7, #4]
   1cdec:	2300      	movs	r3, #0
   1cdee:	60fb      	str	r3, [r7, #12]
   1cdf0:	687b      	ldr	r3, [r7, #4]
   1cdf2:	2b00      	cmp	r3, #0
   1cdf4:	d045      	beq.n	1ce82 <vTaskDelay+0x9e>
   1cdf6:	4b27      	ldr	r3, [pc, #156]	; (1ce94 <vTaskDelay+0xb0>)
   1cdf8:	681b      	ldr	r3, [r3, #0]
   1cdfa:	2b00      	cmp	r3, #0
   1cdfc:	d001      	beq.n	1ce02 <vTaskDelay+0x1e>
   1cdfe:	b672      	cpsid	i
   1ce00:	e7fe      	b.n	1ce00 <vTaskDelay+0x1c>
   1ce02:	4b25      	ldr	r3, [pc, #148]	; (1ce98 <vTaskDelay+0xb4>)
   1ce04:	4798      	blx	r3
   1ce06:	4b25      	ldr	r3, [pc, #148]	; (1ce9c <vTaskDelay+0xb8>)
   1ce08:	681b      	ldr	r3, [r3, #0]
   1ce0a:	0018      	movs	r0, r3
   1ce0c:	4b24      	ldr	r3, [pc, #144]	; (1cea0 <vTaskDelay+0xbc>)
   1ce0e:	4798      	blx	r3
   1ce10:	0003      	movs	r3, r0
   1ce12:	001a      	movs	r2, r3
   1ce14:	4b23      	ldr	r3, [pc, #140]	; (1cea4 <vTaskDelay+0xc0>)
   1ce16:	881b      	ldrh	r3, [r3, #0]
   1ce18:	4013      	ands	r3, r2
   1ce1a:	b29b      	uxth	r3, r3
   1ce1c:	2b00      	cmp	r3, #0
   1ce1e:	d00e      	beq.n	1ce3e <vTaskDelay+0x5a>
   1ce20:	687b      	ldr	r3, [r7, #4]
   1ce22:	0019      	movs	r1, r3
   1ce24:	2089      	movs	r0, #137	; 0x89
   1ce26:	4b20      	ldr	r3, [pc, #128]	; (1cea8 <vTaskDelay+0xc4>)
   1ce28:	4798      	blx	r3
   1ce2a:	4b1c      	ldr	r3, [pc, #112]	; (1ce9c <vTaskDelay+0xb8>)
   1ce2c:	681b      	ldr	r3, [r3, #0]
   1ce2e:	0018      	movs	r0, r3
   1ce30:	4b1e      	ldr	r3, [pc, #120]	; (1ceac <vTaskDelay+0xc8>)
   1ce32:	4798      	blx	r3
   1ce34:	0003      	movs	r3, r0
   1ce36:	b2db      	uxtb	r3, r3
   1ce38:	0018      	movs	r0, r3
   1ce3a:	4b1d      	ldr	r3, [pc, #116]	; (1ceb0 <vTaskDelay+0xcc>)
   1ce3c:	4798      	blx	r3
   1ce3e:	4b1d      	ldr	r3, [pc, #116]	; (1ceb4 <vTaskDelay+0xd0>)
   1ce40:	4798      	blx	r3
   1ce42:	0003      	movs	r3, r0
   1ce44:	0018      	movs	r0, r3
   1ce46:	4b16      	ldr	r3, [pc, #88]	; (1cea0 <vTaskDelay+0xbc>)
   1ce48:	4798      	blx	r3
   1ce4a:	0003      	movs	r3, r0
   1ce4c:	001a      	movs	r2, r3
   1ce4e:	4b15      	ldr	r3, [pc, #84]	; (1cea4 <vTaskDelay+0xc0>)
   1ce50:	881b      	ldrh	r3, [r3, #0]
   1ce52:	4013      	ands	r3, r2
   1ce54:	b29b      	uxth	r3, r3
   1ce56:	2b00      	cmp	r3, #0
   1ce58:	d00a      	beq.n	1ce70 <vTaskDelay+0x8c>
   1ce5a:	4b16      	ldr	r3, [pc, #88]	; (1ceb4 <vTaskDelay+0xd0>)
   1ce5c:	4798      	blx	r3
   1ce5e:	0003      	movs	r3, r0
   1ce60:	0018      	movs	r0, r3
   1ce62:	4b12      	ldr	r3, [pc, #72]	; (1ceac <vTaskDelay+0xc8>)
   1ce64:	4798      	blx	r3
   1ce66:	0003      	movs	r3, r0
   1ce68:	b2db      	uxtb	r3, r3
   1ce6a:	0018      	movs	r0, r3
   1ce6c:	4b10      	ldr	r3, [pc, #64]	; (1ceb0 <vTaskDelay+0xcc>)
   1ce6e:	4798      	blx	r3
   1ce70:	687b      	ldr	r3, [r7, #4]
   1ce72:	2100      	movs	r1, #0
   1ce74:	0018      	movs	r0, r3
   1ce76:	4b10      	ldr	r3, [pc, #64]	; (1ceb8 <vTaskDelay+0xd4>)
   1ce78:	4798      	blx	r3
   1ce7a:	4b10      	ldr	r3, [pc, #64]	; (1cebc <vTaskDelay+0xd8>)
   1ce7c:	4798      	blx	r3
   1ce7e:	0003      	movs	r3, r0
   1ce80:	60fb      	str	r3, [r7, #12]
   1ce82:	68fb      	ldr	r3, [r7, #12]
   1ce84:	2b00      	cmp	r3, #0
   1ce86:	d101      	bne.n	1ce8c <vTaskDelay+0xa8>
   1ce88:	4b0d      	ldr	r3, [pc, #52]	; (1cec0 <vTaskDelay+0xdc>)
   1ce8a:	4798      	blx	r3
   1ce8c:	46c0      	nop			; (mov r8, r8)
   1ce8e:	46bd      	mov	sp, r7
   1ce90:	b004      	add	sp, #16
   1ce92:	bd80      	pop	{r7, pc}
   1ce94:	20003e18 	.word	0x20003e18
   1ce98:	0001d0a5 	.word	0x0001d0a5
   1ce9c:	20003d18 	.word	0x20003d18
   1cea0:	00018de5 	.word	0x00018de5
   1cea4:	20000104 	.word	0x20000104
   1cea8:	00019ae5 	.word	0x00019ae5
   1ceac:	00018dc5 	.word	0x00018dc5
   1ceb0:	00019f75 	.word	0x00019f75
   1ceb4:	00019081 	.word	0x00019081
   1ceb8:	0001dffd 	.word	0x0001dffd
   1cebc:	0001d0bd 	.word	0x0001d0bd
   1cec0:	0001add1 	.word	0x0001add1

0001cec4 <vTaskSuspend>:
   1cec4:	b580      	push	{r7, lr}
   1cec6:	b084      	sub	sp, #16
   1cec8:	af00      	add	r7, sp, #0
   1ceca:	6078      	str	r0, [r7, #4]
   1cecc:	4b42      	ldr	r3, [pc, #264]	; (1cfd8 <vTaskSuspend+0x114>)
   1cece:	4798      	blx	r3
   1ced0:	687b      	ldr	r3, [r7, #4]
   1ced2:	2b00      	cmp	r3, #0
   1ced4:	d102      	bne.n	1cedc <vTaskSuspend+0x18>
   1ced6:	4b41      	ldr	r3, [pc, #260]	; (1cfdc <vTaskSuspend+0x118>)
   1ced8:	681b      	ldr	r3, [r3, #0]
   1ceda:	e000      	b.n	1cede <vTaskSuspend+0x1a>
   1cedc:	687b      	ldr	r3, [r7, #4]
   1cede:	60fb      	str	r3, [r7, #12]
   1cee0:	4b3f      	ldr	r3, [pc, #252]	; (1cfe0 <vTaskSuspend+0x11c>)
   1cee2:	4798      	blx	r3
   1cee4:	0003      	movs	r3, r0
   1cee6:	0018      	movs	r0, r3
   1cee8:	4b3e      	ldr	r3, [pc, #248]	; (1cfe4 <vTaskSuspend+0x120>)
   1ceea:	4798      	blx	r3
   1ceec:	0003      	movs	r3, r0
   1ceee:	001a      	movs	r2, r3
   1cef0:	4b3d      	ldr	r3, [pc, #244]	; (1cfe8 <vTaskSuspend+0x124>)
   1cef2:	881b      	ldrh	r3, [r3, #0]
   1cef4:	4013      	ands	r3, r2
   1cef6:	b29b      	uxth	r3, r3
   1cef8:	2b00      	cmp	r3, #0
   1cefa:	d016      	beq.n	1cf2a <vTaskSuspend+0x66>
   1cefc:	68fb      	ldr	r3, [r7, #12]
   1cefe:	0018      	movs	r0, r3
   1cf00:	4b38      	ldr	r3, [pc, #224]	; (1cfe4 <vTaskSuspend+0x120>)
   1cf02:	4798      	blx	r3
   1cf04:	0003      	movs	r3, r0
   1cf06:	001a      	movs	r2, r3
   1cf08:	4b37      	ldr	r3, [pc, #220]	; (1cfe8 <vTaskSuspend+0x124>)
   1cf0a:	881b      	ldrh	r3, [r3, #0]
   1cf0c:	4013      	ands	r3, r2
   1cf0e:	b29b      	uxth	r3, r3
   1cf10:	2b00      	cmp	r3, #0
   1cf12:	d00a      	beq.n	1cf2a <vTaskSuspend+0x66>
   1cf14:	68fb      	ldr	r3, [r7, #12]
   1cf16:	0018      	movs	r0, r3
   1cf18:	4b34      	ldr	r3, [pc, #208]	; (1cfec <vTaskSuspend+0x128>)
   1cf1a:	4798      	blx	r3
   1cf1c:	0003      	movs	r3, r0
   1cf1e:	b2db      	uxtb	r3, r3
   1cf20:	001a      	movs	r2, r3
   1cf22:	2103      	movs	r1, #3
   1cf24:	208a      	movs	r0, #138	; 0x8a
   1cf26:	4b32      	ldr	r3, [pc, #200]	; (1cff0 <vTaskSuspend+0x12c>)
   1cf28:	4798      	blx	r3
   1cf2a:	68fb      	ldr	r3, [r7, #12]
   1cf2c:	0018      	movs	r0, r3
   1cf2e:	4b2f      	ldr	r3, [pc, #188]	; (1cfec <vTaskSuspend+0x128>)
   1cf30:	4798      	blx	r3
   1cf32:	0003      	movs	r3, r0
   1cf34:	b2db      	uxtb	r3, r3
   1cf36:	0018      	movs	r0, r3
   1cf38:	4b2e      	ldr	r3, [pc, #184]	; (1cff4 <vTaskSuspend+0x130>)
   1cf3a:	4798      	blx	r3
   1cf3c:	68fb      	ldr	r3, [r7, #12]
   1cf3e:	3304      	adds	r3, #4
   1cf40:	0018      	movs	r0, r3
   1cf42:	4b2d      	ldr	r3, [pc, #180]	; (1cff8 <vTaskSuspend+0x134>)
   1cf44:	4798      	blx	r3
   1cf46:	68fb      	ldr	r3, [r7, #12]
   1cf48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1cf4a:	2b00      	cmp	r3, #0
   1cf4c:	d004      	beq.n	1cf58 <vTaskSuspend+0x94>
   1cf4e:	68fb      	ldr	r3, [r7, #12]
   1cf50:	3318      	adds	r3, #24
   1cf52:	0018      	movs	r0, r3
   1cf54:	4b28      	ldr	r3, [pc, #160]	; (1cff8 <vTaskSuspend+0x134>)
   1cf56:	4798      	blx	r3
   1cf58:	68fb      	ldr	r3, [r7, #12]
   1cf5a:	1d1a      	adds	r2, r3, #4
   1cf5c:	4b27      	ldr	r3, [pc, #156]	; (1cffc <vTaskSuspend+0x138>)
   1cf5e:	0011      	movs	r1, r2
   1cf60:	0018      	movs	r0, r3
   1cf62:	4b27      	ldr	r3, [pc, #156]	; (1d000 <vTaskSuspend+0x13c>)
   1cf64:	4798      	blx	r3
   1cf66:	68fb      	ldr	r3, [r7, #12]
   1cf68:	2250      	movs	r2, #80	; 0x50
   1cf6a:	5c9b      	ldrb	r3, [r3, r2]
   1cf6c:	b2db      	uxtb	r3, r3
   1cf6e:	2b01      	cmp	r3, #1
   1cf70:	d103      	bne.n	1cf7a <vTaskSuspend+0xb6>
   1cf72:	68fb      	ldr	r3, [r7, #12]
   1cf74:	2250      	movs	r2, #80	; 0x50
   1cf76:	2100      	movs	r1, #0
   1cf78:	5499      	strb	r1, [r3, r2]
   1cf7a:	4b22      	ldr	r3, [pc, #136]	; (1d004 <vTaskSuspend+0x140>)
   1cf7c:	4798      	blx	r3
   1cf7e:	4b22      	ldr	r3, [pc, #136]	; (1d008 <vTaskSuspend+0x144>)
   1cf80:	681b      	ldr	r3, [r3, #0]
   1cf82:	2b00      	cmp	r3, #0
   1cf84:	d005      	beq.n	1cf92 <vTaskSuspend+0xce>
   1cf86:	4b14      	ldr	r3, [pc, #80]	; (1cfd8 <vTaskSuspend+0x114>)
   1cf88:	4798      	blx	r3
   1cf8a:	4b20      	ldr	r3, [pc, #128]	; (1d00c <vTaskSuspend+0x148>)
   1cf8c:	4798      	blx	r3
   1cf8e:	4b1d      	ldr	r3, [pc, #116]	; (1d004 <vTaskSuspend+0x140>)
   1cf90:	4798      	blx	r3
   1cf92:	4b12      	ldr	r3, [pc, #72]	; (1cfdc <vTaskSuspend+0x118>)
   1cf94:	681b      	ldr	r3, [r3, #0]
   1cf96:	68fa      	ldr	r2, [r7, #12]
   1cf98:	429a      	cmp	r2, r3
   1cf9a:	d118      	bne.n	1cfce <vTaskSuspend+0x10a>
   1cf9c:	4b1a      	ldr	r3, [pc, #104]	; (1d008 <vTaskSuspend+0x144>)
   1cf9e:	681b      	ldr	r3, [r3, #0]
   1cfa0:	2b00      	cmp	r3, #0
   1cfa2:	d008      	beq.n	1cfb6 <vTaskSuspend+0xf2>
   1cfa4:	4b1a      	ldr	r3, [pc, #104]	; (1d010 <vTaskSuspend+0x14c>)
   1cfa6:	681b      	ldr	r3, [r3, #0]
   1cfa8:	2b00      	cmp	r3, #0
   1cfaa:	d001      	beq.n	1cfb0 <vTaskSuspend+0xec>
   1cfac:	b672      	cpsid	i
   1cfae:	e7fe      	b.n	1cfae <vTaskSuspend+0xea>
   1cfb0:	4b18      	ldr	r3, [pc, #96]	; (1d014 <vTaskSuspend+0x150>)
   1cfb2:	4798      	blx	r3
   1cfb4:	e00b      	b.n	1cfce <vTaskSuspend+0x10a>
   1cfb6:	4b11      	ldr	r3, [pc, #68]	; (1cffc <vTaskSuspend+0x138>)
   1cfb8:	681a      	ldr	r2, [r3, #0]
   1cfba:	4b17      	ldr	r3, [pc, #92]	; (1d018 <vTaskSuspend+0x154>)
   1cfbc:	681b      	ldr	r3, [r3, #0]
   1cfbe:	429a      	cmp	r2, r3
   1cfc0:	d103      	bne.n	1cfca <vTaskSuspend+0x106>
   1cfc2:	4b06      	ldr	r3, [pc, #24]	; (1cfdc <vTaskSuspend+0x118>)
   1cfc4:	2200      	movs	r2, #0
   1cfc6:	601a      	str	r2, [r3, #0]
   1cfc8:	e001      	b.n	1cfce <vTaskSuspend+0x10a>
   1cfca:	4b14      	ldr	r3, [pc, #80]	; (1d01c <vTaskSuspend+0x158>)
   1cfcc:	4798      	blx	r3
   1cfce:	46c0      	nop			; (mov r8, r8)
   1cfd0:	46bd      	mov	sp, r7
   1cfd2:	b004      	add	sp, #16
   1cfd4:	bd80      	pop	{r7, pc}
   1cfd6:	46c0      	nop			; (mov r8, r8)
   1cfd8:	0001ade9 	.word	0x0001ade9
   1cfdc:	20003d18 	.word	0x20003d18
   1cfe0:	00019081 	.word	0x00019081
   1cfe4:	00018de5 	.word	0x00018de5
   1cfe8:	20000104 	.word	0x20000104
   1cfec:	00018dc5 	.word	0x00018dc5
   1cff0:	000197dd 	.word	0x000197dd
   1cff4:	00019f75 	.word	0x00019f75
   1cff8:	0001ac5f 	.word	0x0001ac5f
   1cffc:	20003ddc 	.word	0x20003ddc
   1d000:	0001abaf 	.word	0x0001abaf
   1d004:	0001ae0d 	.word	0x0001ae0d
   1d008:	20003dfc 	.word	0x20003dfc
   1d00c:	0001daa9 	.word	0x0001daa9
   1d010:	20003e18 	.word	0x20003e18
   1d014:	0001add1 	.word	0x0001add1
   1d018:	20003df0 	.word	0x20003df0
   1d01c:	0001d439 	.word	0x0001d439

0001d020 <vTaskStartScheduler>:
   1d020:	b590      	push	{r4, r7, lr}
   1d022:	b085      	sub	sp, #20
   1d024:	af02      	add	r7, sp, #8
   1d026:	4916      	ldr	r1, [pc, #88]	; (1d080 <vTaskStartScheduler+0x60>)
   1d028:	4816      	ldr	r0, [pc, #88]	; (1d084 <vTaskStartScheduler+0x64>)
   1d02a:	4b17      	ldr	r3, [pc, #92]	; (1d088 <vTaskStartScheduler+0x68>)
   1d02c:	9301      	str	r3, [sp, #4]
   1d02e:	2300      	movs	r3, #0
   1d030:	9300      	str	r3, [sp, #0]
   1d032:	2300      	movs	r3, #0
   1d034:	2264      	movs	r2, #100	; 0x64
   1d036:	4c15      	ldr	r4, [pc, #84]	; (1d08c <vTaskStartScheduler+0x6c>)
   1d038:	47a0      	blx	r4
   1d03a:	0003      	movs	r3, r0
   1d03c:	607b      	str	r3, [r7, #4]
   1d03e:	687b      	ldr	r3, [r7, #4]
   1d040:	2b01      	cmp	r3, #1
   1d042:	d103      	bne.n	1d04c <vTaskStartScheduler+0x2c>
   1d044:	4b12      	ldr	r3, [pc, #72]	; (1d090 <vTaskStartScheduler+0x70>)
   1d046:	4798      	blx	r3
   1d048:	0003      	movs	r3, r0
   1d04a:	607b      	str	r3, [r7, #4]
   1d04c:	687b      	ldr	r3, [r7, #4]
   1d04e:	2b01      	cmp	r3, #1
   1d050:	d10d      	bne.n	1d06e <vTaskStartScheduler+0x4e>
   1d052:	b672      	cpsid	i
   1d054:	4b0f      	ldr	r3, [pc, #60]	; (1d094 <vTaskStartScheduler+0x74>)
   1d056:	2201      	movs	r2, #1
   1d058:	4252      	negs	r2, r2
   1d05a:	601a      	str	r2, [r3, #0]
   1d05c:	4b0e      	ldr	r3, [pc, #56]	; (1d098 <vTaskStartScheduler+0x78>)
   1d05e:	2201      	movs	r2, #1
   1d060:	601a      	str	r2, [r3, #0]
   1d062:	4b0e      	ldr	r3, [pc, #56]	; (1d09c <vTaskStartScheduler+0x7c>)
   1d064:	2200      	movs	r2, #0
   1d066:	601a      	str	r2, [r3, #0]
   1d068:	4b0d      	ldr	r3, [pc, #52]	; (1d0a0 <vTaskStartScheduler+0x80>)
   1d06a:	4798      	blx	r3
   1d06c:	e004      	b.n	1d078 <vTaskStartScheduler+0x58>
   1d06e:	687b      	ldr	r3, [r7, #4]
   1d070:	3301      	adds	r3, #1
   1d072:	d101      	bne.n	1d078 <vTaskStartScheduler+0x58>
   1d074:	b672      	cpsid	i
   1d076:	e7fe      	b.n	1d076 <vTaskStartScheduler+0x56>
   1d078:	46c0      	nop			; (mov r8, r8)
   1d07a:	46bd      	mov	sp, r7
   1d07c:	b003      	add	sp, #12
   1d07e:	bd90      	pop	{r4, r7, pc}
   1d080:	00038fe4 	.word	0x00038fe4
   1d084:	0001d8f1 	.word	0x0001d8f1
   1d088:	20003e14 	.word	0x20003e14
   1d08c:	0001ca49 	.word	0x0001ca49
   1d090:	0001e0b1 	.word	0x0001e0b1
   1d094:	20003e10 	.word	0x20003e10
   1d098:	20003dfc 	.word	0x20003dfc
   1d09c:	20003df4 	.word	0x20003df4
   1d0a0:	0001ad79 	.word	0x0001ad79

0001d0a4 <vTaskSuspendAll>:
   1d0a4:	b580      	push	{r7, lr}
   1d0a6:	af00      	add	r7, sp, #0
   1d0a8:	4b03      	ldr	r3, [pc, #12]	; (1d0b8 <vTaskSuspendAll+0x14>)
   1d0aa:	681b      	ldr	r3, [r3, #0]
   1d0ac:	1c5a      	adds	r2, r3, #1
   1d0ae:	4b02      	ldr	r3, [pc, #8]	; (1d0b8 <vTaskSuspendAll+0x14>)
   1d0b0:	601a      	str	r2, [r3, #0]
   1d0b2:	46c0      	nop			; (mov r8, r8)
   1d0b4:	46bd      	mov	sp, r7
   1d0b6:	bd80      	pop	{r7, pc}
   1d0b8:	20003e18 	.word	0x20003e18

0001d0bc <xTaskResumeAll>:
   1d0bc:	b580      	push	{r7, lr}
   1d0be:	b084      	sub	sp, #16
   1d0c0:	af00      	add	r7, sp, #0
   1d0c2:	2300      	movs	r3, #0
   1d0c4:	60fb      	str	r3, [r7, #12]
   1d0c6:	2300      	movs	r3, #0
   1d0c8:	60bb      	str	r3, [r7, #8]
   1d0ca:	4b45      	ldr	r3, [pc, #276]	; (1d1e0 <xTaskResumeAll+0x124>)
   1d0cc:	681b      	ldr	r3, [r3, #0]
   1d0ce:	2b00      	cmp	r3, #0
   1d0d0:	d101      	bne.n	1d0d6 <xTaskResumeAll+0x1a>
   1d0d2:	b672      	cpsid	i
   1d0d4:	e7fe      	b.n	1d0d4 <xTaskResumeAll+0x18>
   1d0d6:	4b43      	ldr	r3, [pc, #268]	; (1d1e4 <xTaskResumeAll+0x128>)
   1d0d8:	4798      	blx	r3
   1d0da:	4b41      	ldr	r3, [pc, #260]	; (1d1e0 <xTaskResumeAll+0x124>)
   1d0dc:	681b      	ldr	r3, [r3, #0]
   1d0de:	1e5a      	subs	r2, r3, #1
   1d0e0:	4b3f      	ldr	r3, [pc, #252]	; (1d1e0 <xTaskResumeAll+0x124>)
   1d0e2:	601a      	str	r2, [r3, #0]
   1d0e4:	4b3e      	ldr	r3, [pc, #248]	; (1d1e0 <xTaskResumeAll+0x124>)
   1d0e6:	681b      	ldr	r3, [r3, #0]
   1d0e8:	2b00      	cmp	r3, #0
   1d0ea:	d000      	beq.n	1d0ee <xTaskResumeAll+0x32>
   1d0ec:	e071      	b.n	1d1d2 <xTaskResumeAll+0x116>
   1d0ee:	4b3e      	ldr	r3, [pc, #248]	; (1d1e8 <xTaskResumeAll+0x12c>)
   1d0f0:	681b      	ldr	r3, [r3, #0]
   1d0f2:	2b00      	cmp	r3, #0
   1d0f4:	d100      	bne.n	1d0f8 <xTaskResumeAll+0x3c>
   1d0f6:	e06c      	b.n	1d1d2 <xTaskResumeAll+0x116>
   1d0f8:	e044      	b.n	1d184 <xTaskResumeAll+0xc8>
   1d0fa:	4b3c      	ldr	r3, [pc, #240]	; (1d1ec <xTaskResumeAll+0x130>)
   1d0fc:	68db      	ldr	r3, [r3, #12]
   1d0fe:	68db      	ldr	r3, [r3, #12]
   1d100:	60fb      	str	r3, [r7, #12]
   1d102:	68fb      	ldr	r3, [r7, #12]
   1d104:	3318      	adds	r3, #24
   1d106:	0018      	movs	r0, r3
   1d108:	4b39      	ldr	r3, [pc, #228]	; (1d1f0 <xTaskResumeAll+0x134>)
   1d10a:	4798      	blx	r3
   1d10c:	68fb      	ldr	r3, [r7, #12]
   1d10e:	3304      	adds	r3, #4
   1d110:	0018      	movs	r0, r3
   1d112:	4b37      	ldr	r3, [pc, #220]	; (1d1f0 <xTaskResumeAll+0x134>)
   1d114:	4798      	blx	r3
   1d116:	68fb      	ldr	r3, [r7, #12]
   1d118:	0018      	movs	r0, r3
   1d11a:	4b36      	ldr	r3, [pc, #216]	; (1d1f4 <xTaskResumeAll+0x138>)
   1d11c:	4798      	blx	r3
   1d11e:	0003      	movs	r3, r0
   1d120:	001a      	movs	r2, r3
   1d122:	4b35      	ldr	r3, [pc, #212]	; (1d1f8 <xTaskResumeAll+0x13c>)
   1d124:	881b      	ldrh	r3, [r3, #0]
   1d126:	4013      	ands	r3, r2
   1d128:	b29b      	uxth	r3, r3
   1d12a:	2b00      	cmp	r3, #0
   1d12c:	d008      	beq.n	1d140 <xTaskResumeAll+0x84>
   1d12e:	68fb      	ldr	r3, [r7, #12]
   1d130:	0018      	movs	r0, r3
   1d132:	4b32      	ldr	r3, [pc, #200]	; (1d1fc <xTaskResumeAll+0x140>)
   1d134:	4798      	blx	r3
   1d136:	0003      	movs	r3, r0
   1d138:	b2db      	uxtb	r3, r3
   1d13a:	0018      	movs	r0, r3
   1d13c:	4b30      	ldr	r3, [pc, #192]	; (1d200 <xTaskResumeAll+0x144>)
   1d13e:	4798      	blx	r3
   1d140:	68fb      	ldr	r3, [r7, #12]
   1d142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d144:	4b2f      	ldr	r3, [pc, #188]	; (1d204 <xTaskResumeAll+0x148>)
   1d146:	681b      	ldr	r3, [r3, #0]
   1d148:	429a      	cmp	r2, r3
   1d14a:	d903      	bls.n	1d154 <xTaskResumeAll+0x98>
   1d14c:	68fb      	ldr	r3, [r7, #12]
   1d14e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d150:	4b2c      	ldr	r3, [pc, #176]	; (1d204 <xTaskResumeAll+0x148>)
   1d152:	601a      	str	r2, [r3, #0]
   1d154:	68fb      	ldr	r3, [r7, #12]
   1d156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d158:	0013      	movs	r3, r2
   1d15a:	009b      	lsls	r3, r3, #2
   1d15c:	189b      	adds	r3, r3, r2
   1d15e:	009b      	lsls	r3, r3, #2
   1d160:	4a29      	ldr	r2, [pc, #164]	; (1d208 <xTaskResumeAll+0x14c>)
   1d162:	189a      	adds	r2, r3, r2
   1d164:	68fb      	ldr	r3, [r7, #12]
   1d166:	3304      	adds	r3, #4
   1d168:	0019      	movs	r1, r3
   1d16a:	0010      	movs	r0, r2
   1d16c:	4b27      	ldr	r3, [pc, #156]	; (1d20c <xTaskResumeAll+0x150>)
   1d16e:	4798      	blx	r3
   1d170:	68fb      	ldr	r3, [r7, #12]
   1d172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d174:	4b26      	ldr	r3, [pc, #152]	; (1d210 <xTaskResumeAll+0x154>)
   1d176:	681b      	ldr	r3, [r3, #0]
   1d178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d17a:	429a      	cmp	r2, r3
   1d17c:	d302      	bcc.n	1d184 <xTaskResumeAll+0xc8>
   1d17e:	4b25      	ldr	r3, [pc, #148]	; (1d214 <xTaskResumeAll+0x158>)
   1d180:	2201      	movs	r2, #1
   1d182:	601a      	str	r2, [r3, #0]
   1d184:	4b19      	ldr	r3, [pc, #100]	; (1d1ec <xTaskResumeAll+0x130>)
   1d186:	681b      	ldr	r3, [r3, #0]
   1d188:	2b00      	cmp	r3, #0
   1d18a:	d1b6      	bne.n	1d0fa <xTaskResumeAll+0x3e>
   1d18c:	68fb      	ldr	r3, [r7, #12]
   1d18e:	2b00      	cmp	r3, #0
   1d190:	d001      	beq.n	1d196 <xTaskResumeAll+0xda>
   1d192:	4b21      	ldr	r3, [pc, #132]	; (1d218 <xTaskResumeAll+0x15c>)
   1d194:	4798      	blx	r3
   1d196:	4b21      	ldr	r3, [pc, #132]	; (1d21c <xTaskResumeAll+0x160>)
   1d198:	681b      	ldr	r3, [r3, #0]
   1d19a:	607b      	str	r3, [r7, #4]
   1d19c:	687b      	ldr	r3, [r7, #4]
   1d19e:	2b00      	cmp	r3, #0
   1d1a0:	d00f      	beq.n	1d1c2 <xTaskResumeAll+0x106>
   1d1a2:	4b1f      	ldr	r3, [pc, #124]	; (1d220 <xTaskResumeAll+0x164>)
   1d1a4:	4798      	blx	r3
   1d1a6:	1e03      	subs	r3, r0, #0
   1d1a8:	d002      	beq.n	1d1b0 <xTaskResumeAll+0xf4>
   1d1aa:	4b1a      	ldr	r3, [pc, #104]	; (1d214 <xTaskResumeAll+0x158>)
   1d1ac:	2201      	movs	r2, #1
   1d1ae:	601a      	str	r2, [r3, #0]
   1d1b0:	687b      	ldr	r3, [r7, #4]
   1d1b2:	3b01      	subs	r3, #1
   1d1b4:	607b      	str	r3, [r7, #4]
   1d1b6:	687b      	ldr	r3, [r7, #4]
   1d1b8:	2b00      	cmp	r3, #0
   1d1ba:	d1f2      	bne.n	1d1a2 <xTaskResumeAll+0xe6>
   1d1bc:	4b17      	ldr	r3, [pc, #92]	; (1d21c <xTaskResumeAll+0x160>)
   1d1be:	2200      	movs	r2, #0
   1d1c0:	601a      	str	r2, [r3, #0]
   1d1c2:	4b14      	ldr	r3, [pc, #80]	; (1d214 <xTaskResumeAll+0x158>)
   1d1c4:	681b      	ldr	r3, [r3, #0]
   1d1c6:	2b00      	cmp	r3, #0
   1d1c8:	d003      	beq.n	1d1d2 <xTaskResumeAll+0x116>
   1d1ca:	2301      	movs	r3, #1
   1d1cc:	60bb      	str	r3, [r7, #8]
   1d1ce:	4b15      	ldr	r3, [pc, #84]	; (1d224 <xTaskResumeAll+0x168>)
   1d1d0:	4798      	blx	r3
   1d1d2:	4b15      	ldr	r3, [pc, #84]	; (1d228 <xTaskResumeAll+0x16c>)
   1d1d4:	4798      	blx	r3
   1d1d6:	68bb      	ldr	r3, [r7, #8]
   1d1d8:	0018      	movs	r0, r3
   1d1da:	46bd      	mov	sp, r7
   1d1dc:	b004      	add	sp, #16
   1d1de:	bd80      	pop	{r7, pc}
   1d1e0:	20003e18 	.word	0x20003e18
   1d1e4:	0001ade9 	.word	0x0001ade9
   1d1e8:	20003df0 	.word	0x20003df0
   1d1ec:	20003db0 	.word	0x20003db0
   1d1f0:	0001ac5f 	.word	0x0001ac5f
   1d1f4:	00018de5 	.word	0x00018de5
   1d1f8:	20000104 	.word	0x20000104
   1d1fc:	00018dc5 	.word	0x00018dc5
   1d200:	00019595 	.word	0x00019595
   1d204:	20003df8 	.word	0x20003df8
   1d208:	20003d1c 	.word	0x20003d1c
   1d20c:	0001abaf 	.word	0x0001abaf
   1d210:	20003d18 	.word	0x20003d18
   1d214:	20003e04 	.word	0x20003e04
   1d218:	0001daa9 	.word	0x0001daa9
   1d21c:	20003e00 	.word	0x20003e00
   1d220:	0001d249 	.word	0x0001d249
   1d224:	0001add1 	.word	0x0001add1
   1d228:	0001ae0d 	.word	0x0001ae0d

0001d22c <xTaskGetTickCount>:
   1d22c:	b580      	push	{r7, lr}
   1d22e:	b082      	sub	sp, #8
   1d230:	af00      	add	r7, sp, #0
   1d232:	4b04      	ldr	r3, [pc, #16]	; (1d244 <xTaskGetTickCount+0x18>)
   1d234:	681b      	ldr	r3, [r3, #0]
   1d236:	607b      	str	r3, [r7, #4]
   1d238:	687b      	ldr	r3, [r7, #4]
   1d23a:	0018      	movs	r0, r3
   1d23c:	46bd      	mov	sp, r7
   1d23e:	b002      	add	sp, #8
   1d240:	bd80      	pop	{r7, pc}
   1d242:	46c0      	nop			; (mov r8, r8)
   1d244:	20003df4 	.word	0x20003df4

0001d248 <xTaskIncrementTick>:
   1d248:	b580      	push	{r7, lr}
   1d24a:	b086      	sub	sp, #24
   1d24c:	af00      	add	r7, sp, #0
   1d24e:	2300      	movs	r3, #0
   1d250:	617b      	str	r3, [r7, #20]
   1d252:	4b64      	ldr	r3, [pc, #400]	; (1d3e4 <xTaskIncrementTick+0x19c>)
   1d254:	681b      	ldr	r3, [r3, #0]
   1d256:	2b01      	cmp	r3, #1
   1d258:	d003      	beq.n	1d262 <xTaskIncrementTick+0x1a>
   1d25a:	4b63      	ldr	r3, [pc, #396]	; (1d3e8 <xTaskIncrementTick+0x1a0>)
   1d25c:	681b      	ldr	r3, [r3, #0]
   1d25e:	2b00      	cmp	r3, #0
   1d260:	d107      	bne.n	1d272 <xTaskIncrementTick+0x2a>
   1d262:	4b62      	ldr	r3, [pc, #392]	; (1d3ec <xTaskIncrementTick+0x1a4>)
   1d264:	681b      	ldr	r3, [r3, #0]
   1d266:	1c5a      	adds	r2, r3, #1
   1d268:	4b60      	ldr	r3, [pc, #384]	; (1d3ec <xTaskIncrementTick+0x1a4>)
   1d26a:	601a      	str	r2, [r3, #0]
   1d26c:	2000      	movs	r0, #0
   1d26e:	4b60      	ldr	r3, [pc, #384]	; (1d3f0 <xTaskIncrementTick+0x1a8>)
   1d270:	4798      	blx	r3
   1d272:	4b5c      	ldr	r3, [pc, #368]	; (1d3e4 <xTaskIncrementTick+0x19c>)
   1d274:	681b      	ldr	r3, [r3, #0]
   1d276:	2b00      	cmp	r3, #0
   1d278:	d106      	bne.n	1d288 <xTaskIncrementTick+0x40>
   1d27a:	4b5e      	ldr	r3, [pc, #376]	; (1d3f4 <xTaskIncrementTick+0x1ac>)
   1d27c:	681b      	ldr	r3, [r3, #0]
   1d27e:	3301      	adds	r3, #1
   1d280:	0019      	movs	r1, r3
   1d282:	2003      	movs	r0, #3
   1d284:	4b5c      	ldr	r3, [pc, #368]	; (1d3f8 <xTaskIncrementTick+0x1b0>)
   1d286:	4798      	blx	r3
   1d288:	4b56      	ldr	r3, [pc, #344]	; (1d3e4 <xTaskIncrementTick+0x19c>)
   1d28a:	681b      	ldr	r3, [r3, #0]
   1d28c:	2b00      	cmp	r3, #0
   1d28e:	d000      	beq.n	1d292 <xTaskIncrementTick+0x4a>
   1d290:	e098      	b.n	1d3c4 <xTaskIncrementTick+0x17c>
   1d292:	4b58      	ldr	r3, [pc, #352]	; (1d3f4 <xTaskIncrementTick+0x1ac>)
   1d294:	681b      	ldr	r3, [r3, #0]
   1d296:	3301      	adds	r3, #1
   1d298:	613b      	str	r3, [r7, #16]
   1d29a:	4b56      	ldr	r3, [pc, #344]	; (1d3f4 <xTaskIncrementTick+0x1ac>)
   1d29c:	693a      	ldr	r2, [r7, #16]
   1d29e:	601a      	str	r2, [r3, #0]
   1d2a0:	693b      	ldr	r3, [r7, #16]
   1d2a2:	2b00      	cmp	r3, #0
   1d2a4:	d117      	bne.n	1d2d6 <xTaskIncrementTick+0x8e>
   1d2a6:	4b55      	ldr	r3, [pc, #340]	; (1d3fc <xTaskIncrementTick+0x1b4>)
   1d2a8:	681b      	ldr	r3, [r3, #0]
   1d2aa:	681b      	ldr	r3, [r3, #0]
   1d2ac:	2b00      	cmp	r3, #0
   1d2ae:	d001      	beq.n	1d2b4 <xTaskIncrementTick+0x6c>
   1d2b0:	b672      	cpsid	i
   1d2b2:	e7fe      	b.n	1d2b2 <xTaskIncrementTick+0x6a>
   1d2b4:	4b51      	ldr	r3, [pc, #324]	; (1d3fc <xTaskIncrementTick+0x1b4>)
   1d2b6:	681b      	ldr	r3, [r3, #0]
   1d2b8:	60fb      	str	r3, [r7, #12]
   1d2ba:	4b51      	ldr	r3, [pc, #324]	; (1d400 <xTaskIncrementTick+0x1b8>)
   1d2bc:	681a      	ldr	r2, [r3, #0]
   1d2be:	4b4f      	ldr	r3, [pc, #316]	; (1d3fc <xTaskIncrementTick+0x1b4>)
   1d2c0:	601a      	str	r2, [r3, #0]
   1d2c2:	4b4f      	ldr	r3, [pc, #316]	; (1d400 <xTaskIncrementTick+0x1b8>)
   1d2c4:	68fa      	ldr	r2, [r7, #12]
   1d2c6:	601a      	str	r2, [r3, #0]
   1d2c8:	4b4e      	ldr	r3, [pc, #312]	; (1d404 <xTaskIncrementTick+0x1bc>)
   1d2ca:	681b      	ldr	r3, [r3, #0]
   1d2cc:	1c5a      	adds	r2, r3, #1
   1d2ce:	4b4d      	ldr	r3, [pc, #308]	; (1d404 <xTaskIncrementTick+0x1bc>)
   1d2d0:	601a      	str	r2, [r3, #0]
   1d2d2:	4b4d      	ldr	r3, [pc, #308]	; (1d408 <xTaskIncrementTick+0x1c0>)
   1d2d4:	4798      	blx	r3
   1d2d6:	4b4d      	ldr	r3, [pc, #308]	; (1d40c <xTaskIncrementTick+0x1c4>)
   1d2d8:	681b      	ldr	r3, [r3, #0]
   1d2da:	693a      	ldr	r2, [r7, #16]
   1d2dc:	429a      	cmp	r2, r3
   1d2de:	d363      	bcc.n	1d3a8 <xTaskIncrementTick+0x160>
   1d2e0:	4b46      	ldr	r3, [pc, #280]	; (1d3fc <xTaskIncrementTick+0x1b4>)
   1d2e2:	681b      	ldr	r3, [r3, #0]
   1d2e4:	681b      	ldr	r3, [r3, #0]
   1d2e6:	2b00      	cmp	r3, #0
   1d2e8:	d101      	bne.n	1d2ee <xTaskIncrementTick+0xa6>
   1d2ea:	2301      	movs	r3, #1
   1d2ec:	e000      	b.n	1d2f0 <xTaskIncrementTick+0xa8>
   1d2ee:	2300      	movs	r3, #0
   1d2f0:	2b00      	cmp	r3, #0
   1d2f2:	d004      	beq.n	1d2fe <xTaskIncrementTick+0xb6>
   1d2f4:	4b45      	ldr	r3, [pc, #276]	; (1d40c <xTaskIncrementTick+0x1c4>)
   1d2f6:	2201      	movs	r2, #1
   1d2f8:	4252      	negs	r2, r2
   1d2fa:	601a      	str	r2, [r3, #0]
   1d2fc:	e054      	b.n	1d3a8 <xTaskIncrementTick+0x160>
   1d2fe:	4b3f      	ldr	r3, [pc, #252]	; (1d3fc <xTaskIncrementTick+0x1b4>)
   1d300:	681b      	ldr	r3, [r3, #0]
   1d302:	68db      	ldr	r3, [r3, #12]
   1d304:	68db      	ldr	r3, [r3, #12]
   1d306:	60bb      	str	r3, [r7, #8]
   1d308:	68bb      	ldr	r3, [r7, #8]
   1d30a:	685b      	ldr	r3, [r3, #4]
   1d30c:	607b      	str	r3, [r7, #4]
   1d30e:	693a      	ldr	r2, [r7, #16]
   1d310:	687b      	ldr	r3, [r7, #4]
   1d312:	429a      	cmp	r2, r3
   1d314:	d203      	bcs.n	1d31e <xTaskIncrementTick+0xd6>
   1d316:	4b3d      	ldr	r3, [pc, #244]	; (1d40c <xTaskIncrementTick+0x1c4>)
   1d318:	687a      	ldr	r2, [r7, #4]
   1d31a:	601a      	str	r2, [r3, #0]
   1d31c:	e044      	b.n	1d3a8 <xTaskIncrementTick+0x160>
   1d31e:	68bb      	ldr	r3, [r7, #8]
   1d320:	3304      	adds	r3, #4
   1d322:	0018      	movs	r0, r3
   1d324:	4b3a      	ldr	r3, [pc, #232]	; (1d410 <xTaskIncrementTick+0x1c8>)
   1d326:	4798      	blx	r3
   1d328:	68bb      	ldr	r3, [r7, #8]
   1d32a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1d32c:	2b00      	cmp	r3, #0
   1d32e:	d004      	beq.n	1d33a <xTaskIncrementTick+0xf2>
   1d330:	68bb      	ldr	r3, [r7, #8]
   1d332:	3318      	adds	r3, #24
   1d334:	0018      	movs	r0, r3
   1d336:	4b36      	ldr	r3, [pc, #216]	; (1d410 <xTaskIncrementTick+0x1c8>)
   1d338:	4798      	blx	r3
   1d33a:	68bb      	ldr	r3, [r7, #8]
   1d33c:	0018      	movs	r0, r3
   1d33e:	4b35      	ldr	r3, [pc, #212]	; (1d414 <xTaskIncrementTick+0x1cc>)
   1d340:	4798      	blx	r3
   1d342:	0003      	movs	r3, r0
   1d344:	001a      	movs	r2, r3
   1d346:	4b34      	ldr	r3, [pc, #208]	; (1d418 <xTaskIncrementTick+0x1d0>)
   1d348:	881b      	ldrh	r3, [r3, #0]
   1d34a:	4013      	ands	r3, r2
   1d34c:	b29b      	uxth	r3, r3
   1d34e:	2b00      	cmp	r3, #0
   1d350:	d008      	beq.n	1d364 <xTaskIncrementTick+0x11c>
   1d352:	68bb      	ldr	r3, [r7, #8]
   1d354:	0018      	movs	r0, r3
   1d356:	4b31      	ldr	r3, [pc, #196]	; (1d41c <xTaskIncrementTick+0x1d4>)
   1d358:	4798      	blx	r3
   1d35a:	0003      	movs	r3, r0
   1d35c:	b2db      	uxtb	r3, r3
   1d35e:	0018      	movs	r0, r3
   1d360:	4b2f      	ldr	r3, [pc, #188]	; (1d420 <xTaskIncrementTick+0x1d8>)
   1d362:	4798      	blx	r3
   1d364:	68bb      	ldr	r3, [r7, #8]
   1d366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d368:	4b2e      	ldr	r3, [pc, #184]	; (1d424 <xTaskIncrementTick+0x1dc>)
   1d36a:	681b      	ldr	r3, [r3, #0]
   1d36c:	429a      	cmp	r2, r3
   1d36e:	d903      	bls.n	1d378 <xTaskIncrementTick+0x130>
   1d370:	68bb      	ldr	r3, [r7, #8]
   1d372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d374:	4b2b      	ldr	r3, [pc, #172]	; (1d424 <xTaskIncrementTick+0x1dc>)
   1d376:	601a      	str	r2, [r3, #0]
   1d378:	68bb      	ldr	r3, [r7, #8]
   1d37a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d37c:	0013      	movs	r3, r2
   1d37e:	009b      	lsls	r3, r3, #2
   1d380:	189b      	adds	r3, r3, r2
   1d382:	009b      	lsls	r3, r3, #2
   1d384:	4a28      	ldr	r2, [pc, #160]	; (1d428 <xTaskIncrementTick+0x1e0>)
   1d386:	189a      	adds	r2, r3, r2
   1d388:	68bb      	ldr	r3, [r7, #8]
   1d38a:	3304      	adds	r3, #4
   1d38c:	0019      	movs	r1, r3
   1d38e:	0010      	movs	r0, r2
   1d390:	4b26      	ldr	r3, [pc, #152]	; (1d42c <xTaskIncrementTick+0x1e4>)
   1d392:	4798      	blx	r3
   1d394:	68bb      	ldr	r3, [r7, #8]
   1d396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d398:	4b25      	ldr	r3, [pc, #148]	; (1d430 <xTaskIncrementTick+0x1e8>)
   1d39a:	681b      	ldr	r3, [r3, #0]
   1d39c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d39e:	429a      	cmp	r2, r3
   1d3a0:	d39e      	bcc.n	1d2e0 <xTaskIncrementTick+0x98>
   1d3a2:	2301      	movs	r3, #1
   1d3a4:	617b      	str	r3, [r7, #20]
   1d3a6:	e79b      	b.n	1d2e0 <xTaskIncrementTick+0x98>
   1d3a8:	4b21      	ldr	r3, [pc, #132]	; (1d430 <xTaskIncrementTick+0x1e8>)
   1d3aa:	681b      	ldr	r3, [r3, #0]
   1d3ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d3ae:	491e      	ldr	r1, [pc, #120]	; (1d428 <xTaskIncrementTick+0x1e0>)
   1d3b0:	0013      	movs	r3, r2
   1d3b2:	009b      	lsls	r3, r3, #2
   1d3b4:	189b      	adds	r3, r3, r2
   1d3b6:	009b      	lsls	r3, r3, #2
   1d3b8:	585b      	ldr	r3, [r3, r1]
   1d3ba:	2b01      	cmp	r3, #1
   1d3bc:	d907      	bls.n	1d3ce <xTaskIncrementTick+0x186>
   1d3be:	2301      	movs	r3, #1
   1d3c0:	617b      	str	r3, [r7, #20]
   1d3c2:	e004      	b.n	1d3ce <xTaskIncrementTick+0x186>
   1d3c4:	4b08      	ldr	r3, [pc, #32]	; (1d3e8 <xTaskIncrementTick+0x1a0>)
   1d3c6:	681b      	ldr	r3, [r3, #0]
   1d3c8:	1c5a      	adds	r2, r3, #1
   1d3ca:	4b07      	ldr	r3, [pc, #28]	; (1d3e8 <xTaskIncrementTick+0x1a0>)
   1d3cc:	601a      	str	r2, [r3, #0]
   1d3ce:	4b19      	ldr	r3, [pc, #100]	; (1d434 <xTaskIncrementTick+0x1ec>)
   1d3d0:	681b      	ldr	r3, [r3, #0]
   1d3d2:	2b00      	cmp	r3, #0
   1d3d4:	d001      	beq.n	1d3da <xTaskIncrementTick+0x192>
   1d3d6:	2301      	movs	r3, #1
   1d3d8:	617b      	str	r3, [r7, #20]
   1d3da:	697b      	ldr	r3, [r7, #20]
   1d3dc:	0018      	movs	r0, r3
   1d3de:	46bd      	mov	sp, r7
   1d3e0:	b006      	add	sp, #24
   1d3e2:	bd80      	pop	{r7, pc}
   1d3e4:	20003e18 	.word	0x20003e18
   1d3e8:	20003e00 	.word	0x20003e00
   1d3ec:	20000d60 	.word	0x20000d60
   1d3f0:	0001aa79 	.word	0x0001aa79
   1d3f4:	20003df4 	.word	0x20003df4
   1d3f8:	00019ae5 	.word	0x00019ae5
   1d3fc:	20003da8 	.word	0x20003da8
   1d400:	20003dac 	.word	0x20003dac
   1d404:	20003e08 	.word	0x20003e08
   1d408:	0001daa9 	.word	0x0001daa9
   1d40c:	20003e10 	.word	0x20003e10
   1d410:	0001ac5f 	.word	0x0001ac5f
   1d414:	00018de5 	.word	0x00018de5
   1d418:	20000104 	.word	0x20000104
   1d41c:	00018dc5 	.word	0x00018dc5
   1d420:	00019595 	.word	0x00019595
   1d424:	20003df8 	.word	0x20003df8
   1d428:	20003d1c 	.word	0x20003d1c
   1d42c:	0001abaf 	.word	0x0001abaf
   1d430:	20003d18 	.word	0x20003d18
   1d434:	20003e04 	.word	0x20003e04

0001d438 <vTaskSwitchContext>:
   1d438:	b580      	push	{r7, lr}
   1d43a:	b082      	sub	sp, #8
   1d43c:	af00      	add	r7, sp, #0
   1d43e:	4b3a      	ldr	r3, [pc, #232]	; (1d528 <vTaskSwitchContext+0xf0>)
   1d440:	681b      	ldr	r3, [r3, #0]
   1d442:	2b00      	cmp	r3, #0
   1d444:	d003      	beq.n	1d44e <vTaskSwitchContext+0x16>
   1d446:	4b39      	ldr	r3, [pc, #228]	; (1d52c <vTaskSwitchContext+0xf4>)
   1d448:	2201      	movs	r2, #1
   1d44a:	601a      	str	r2, [r3, #0]
   1d44c:	e067      	b.n	1d51e <vTaskSwitchContext+0xe6>
   1d44e:	4b37      	ldr	r3, [pc, #220]	; (1d52c <vTaskSwitchContext+0xf4>)
   1d450:	2200      	movs	r2, #0
   1d452:	601a      	str	r2, [r3, #0]
   1d454:	4b36      	ldr	r3, [pc, #216]	; (1d530 <vTaskSwitchContext+0xf8>)
   1d456:	681b      	ldr	r3, [r3, #0]
   1d458:	681a      	ldr	r2, [r3, #0]
   1d45a:	4b35      	ldr	r3, [pc, #212]	; (1d530 <vTaskSwitchContext+0xf8>)
   1d45c:	681b      	ldr	r3, [r3, #0]
   1d45e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1d460:	429a      	cmp	r2, r3
   1d462:	d808      	bhi.n	1d476 <vTaskSwitchContext+0x3e>
   1d464:	4b32      	ldr	r3, [pc, #200]	; (1d530 <vTaskSwitchContext+0xf8>)
   1d466:	681a      	ldr	r2, [r3, #0]
   1d468:	4b31      	ldr	r3, [pc, #196]	; (1d530 <vTaskSwitchContext+0xf8>)
   1d46a:	681b      	ldr	r3, [r3, #0]
   1d46c:	3334      	adds	r3, #52	; 0x34
   1d46e:	0019      	movs	r1, r3
   1d470:	0010      	movs	r0, r2
   1d472:	4b30      	ldr	r3, [pc, #192]	; (1d534 <vTaskSwitchContext+0xfc>)
   1d474:	4798      	blx	r3
   1d476:	4b30      	ldr	r3, [pc, #192]	; (1d538 <vTaskSwitchContext+0x100>)
   1d478:	681b      	ldr	r3, [r3, #0]
   1d47a:	607b      	str	r3, [r7, #4]
   1d47c:	e007      	b.n	1d48e <vTaskSwitchContext+0x56>
   1d47e:	687b      	ldr	r3, [r7, #4]
   1d480:	2b00      	cmp	r3, #0
   1d482:	d101      	bne.n	1d488 <vTaskSwitchContext+0x50>
   1d484:	b672      	cpsid	i
   1d486:	e7fe      	b.n	1d486 <vTaskSwitchContext+0x4e>
   1d488:	687b      	ldr	r3, [r7, #4]
   1d48a:	3b01      	subs	r3, #1
   1d48c:	607b      	str	r3, [r7, #4]
   1d48e:	492b      	ldr	r1, [pc, #172]	; (1d53c <vTaskSwitchContext+0x104>)
   1d490:	687a      	ldr	r2, [r7, #4]
   1d492:	0013      	movs	r3, r2
   1d494:	009b      	lsls	r3, r3, #2
   1d496:	189b      	adds	r3, r3, r2
   1d498:	009b      	lsls	r3, r3, #2
   1d49a:	585b      	ldr	r3, [r3, r1]
   1d49c:	2b00      	cmp	r3, #0
   1d49e:	d0ee      	beq.n	1d47e <vTaskSwitchContext+0x46>
   1d4a0:	687a      	ldr	r2, [r7, #4]
   1d4a2:	0013      	movs	r3, r2
   1d4a4:	009b      	lsls	r3, r3, #2
   1d4a6:	189b      	adds	r3, r3, r2
   1d4a8:	009b      	lsls	r3, r3, #2
   1d4aa:	4a24      	ldr	r2, [pc, #144]	; (1d53c <vTaskSwitchContext+0x104>)
   1d4ac:	189b      	adds	r3, r3, r2
   1d4ae:	603b      	str	r3, [r7, #0]
   1d4b0:	683b      	ldr	r3, [r7, #0]
   1d4b2:	685b      	ldr	r3, [r3, #4]
   1d4b4:	685a      	ldr	r2, [r3, #4]
   1d4b6:	683b      	ldr	r3, [r7, #0]
   1d4b8:	605a      	str	r2, [r3, #4]
   1d4ba:	683b      	ldr	r3, [r7, #0]
   1d4bc:	685a      	ldr	r2, [r3, #4]
   1d4be:	683b      	ldr	r3, [r7, #0]
   1d4c0:	3308      	adds	r3, #8
   1d4c2:	429a      	cmp	r2, r3
   1d4c4:	d104      	bne.n	1d4d0 <vTaskSwitchContext+0x98>
   1d4c6:	683b      	ldr	r3, [r7, #0]
   1d4c8:	685b      	ldr	r3, [r3, #4]
   1d4ca:	685a      	ldr	r2, [r3, #4]
   1d4cc:	683b      	ldr	r3, [r7, #0]
   1d4ce:	605a      	str	r2, [r3, #4]
   1d4d0:	683b      	ldr	r3, [r7, #0]
   1d4d2:	685b      	ldr	r3, [r3, #4]
   1d4d4:	68da      	ldr	r2, [r3, #12]
   1d4d6:	4b16      	ldr	r3, [pc, #88]	; (1d530 <vTaskSwitchContext+0xf8>)
   1d4d8:	601a      	str	r2, [r3, #0]
   1d4da:	4b17      	ldr	r3, [pc, #92]	; (1d538 <vTaskSwitchContext+0x100>)
   1d4dc:	687a      	ldr	r2, [r7, #4]
   1d4de:	601a      	str	r2, [r3, #0]
   1d4e0:	4b17      	ldr	r3, [pc, #92]	; (1d540 <vTaskSwitchContext+0x108>)
   1d4e2:	2201      	movs	r2, #1
   1d4e4:	601a      	str	r2, [r3, #0]
   1d4e6:	4b17      	ldr	r3, [pc, #92]	; (1d544 <vTaskSwitchContext+0x10c>)
   1d4e8:	4798      	blx	r3
   1d4ea:	0003      	movs	r3, r0
   1d4ec:	0018      	movs	r0, r3
   1d4ee:	4b16      	ldr	r3, [pc, #88]	; (1d548 <vTaskSwitchContext+0x110>)
   1d4f0:	4798      	blx	r3
   1d4f2:	0003      	movs	r3, r0
   1d4f4:	001a      	movs	r2, r3
   1d4f6:	4b15      	ldr	r3, [pc, #84]	; (1d54c <vTaskSwitchContext+0x114>)
   1d4f8:	881b      	ldrh	r3, [r3, #0]
   1d4fa:	4013      	ands	r3, r2
   1d4fc:	b29b      	uxth	r3, r3
   1d4fe:	2b00      	cmp	r3, #0
   1d500:	d00a      	beq.n	1d518 <vTaskSwitchContext+0xe0>
   1d502:	4b10      	ldr	r3, [pc, #64]	; (1d544 <vTaskSwitchContext+0x10c>)
   1d504:	4798      	blx	r3
   1d506:	0003      	movs	r3, r0
   1d508:	0018      	movs	r0, r3
   1d50a:	4b11      	ldr	r3, [pc, #68]	; (1d550 <vTaskSwitchContext+0x118>)
   1d50c:	4798      	blx	r3
   1d50e:	0003      	movs	r3, r0
   1d510:	b2db      	uxtb	r3, r3
   1d512:	0018      	movs	r0, r3
   1d514:	4b0f      	ldr	r3, [pc, #60]	; (1d554 <vTaskSwitchContext+0x11c>)
   1d516:	4798      	blx	r3
   1d518:	4b09      	ldr	r3, [pc, #36]	; (1d540 <vTaskSwitchContext+0x108>)
   1d51a:	2202      	movs	r2, #2
   1d51c:	601a      	str	r2, [r3, #0]
   1d51e:	46c0      	nop			; (mov r8, r8)
   1d520:	46bd      	mov	sp, r7
   1d522:	b002      	add	sp, #8
   1d524:	bd80      	pop	{r7, pc}
   1d526:	46c0      	nop			; (mov r8, r8)
   1d528:	20003e18 	.word	0x20003e18
   1d52c:	20003e04 	.word	0x20003e04
   1d530:	20003d18 	.word	0x20003d18
   1d534:	00033715 	.word	0x00033715
   1d538:	20003df8 	.word	0x20003df8
   1d53c:	20003d1c 	.word	0x20003d1c
   1d540:	20000d6c 	.word	0x20000d6c
   1d544:	00019081 	.word	0x00019081
   1d548:	00018de5 	.word	0x00018de5
   1d54c:	20000104 	.word	0x20000104
   1d550:	00018dc5 	.word	0x00018dc5
   1d554:	00019be1 	.word	0x00019be1

0001d558 <vTaskPlaceOnEventList>:
   1d558:	b580      	push	{r7, lr}
   1d55a:	b082      	sub	sp, #8
   1d55c:	af00      	add	r7, sp, #0
   1d55e:	6078      	str	r0, [r7, #4]
   1d560:	6039      	str	r1, [r7, #0]
   1d562:	687b      	ldr	r3, [r7, #4]
   1d564:	2b00      	cmp	r3, #0
   1d566:	d101      	bne.n	1d56c <vTaskPlaceOnEventList+0x14>
   1d568:	b672      	cpsid	i
   1d56a:	e7fe      	b.n	1d56a <vTaskPlaceOnEventList+0x12>
   1d56c:	4b08      	ldr	r3, [pc, #32]	; (1d590 <vTaskPlaceOnEventList+0x38>)
   1d56e:	681b      	ldr	r3, [r3, #0]
   1d570:	3318      	adds	r3, #24
   1d572:	001a      	movs	r2, r3
   1d574:	687b      	ldr	r3, [r7, #4]
   1d576:	0011      	movs	r1, r2
   1d578:	0018      	movs	r0, r3
   1d57a:	4b06      	ldr	r3, [pc, #24]	; (1d594 <vTaskPlaceOnEventList+0x3c>)
   1d57c:	4798      	blx	r3
   1d57e:	683b      	ldr	r3, [r7, #0]
   1d580:	2101      	movs	r1, #1
   1d582:	0018      	movs	r0, r3
   1d584:	4b04      	ldr	r3, [pc, #16]	; (1d598 <vTaskPlaceOnEventList+0x40>)
   1d586:	4798      	blx	r3
   1d588:	46c0      	nop			; (mov r8, r8)
   1d58a:	46bd      	mov	sp, r7
   1d58c:	b002      	add	sp, #8
   1d58e:	bd80      	pop	{r7, pc}
   1d590:	20003d18 	.word	0x20003d18
   1d594:	0001abf3 	.word	0x0001abf3
   1d598:	0001dffd 	.word	0x0001dffd

0001d59c <vTaskPlaceOnEventListRestricted>:
   1d59c:	b580      	push	{r7, lr}
   1d59e:	b084      	sub	sp, #16
   1d5a0:	af00      	add	r7, sp, #0
   1d5a2:	60f8      	str	r0, [r7, #12]
   1d5a4:	60b9      	str	r1, [r7, #8]
   1d5a6:	607a      	str	r2, [r7, #4]
   1d5a8:	68fb      	ldr	r3, [r7, #12]
   1d5aa:	2b00      	cmp	r3, #0
   1d5ac:	d101      	bne.n	1d5b2 <vTaskPlaceOnEventListRestricted+0x16>
   1d5ae:	b672      	cpsid	i
   1d5b0:	e7fe      	b.n	1d5b0 <vTaskPlaceOnEventListRestricted+0x14>
   1d5b2:	4b28      	ldr	r3, [pc, #160]	; (1d654 <vTaskPlaceOnEventListRestricted+0xb8>)
   1d5b4:	681b      	ldr	r3, [r3, #0]
   1d5b6:	3318      	adds	r3, #24
   1d5b8:	001a      	movs	r2, r3
   1d5ba:	68fb      	ldr	r3, [r7, #12]
   1d5bc:	0011      	movs	r1, r2
   1d5be:	0018      	movs	r0, r3
   1d5c0:	4b25      	ldr	r3, [pc, #148]	; (1d658 <vTaskPlaceOnEventListRestricted+0xbc>)
   1d5c2:	4798      	blx	r3
   1d5c4:	687b      	ldr	r3, [r7, #4]
   1d5c6:	2b00      	cmp	r3, #0
   1d5c8:	d002      	beq.n	1d5d0 <vTaskPlaceOnEventListRestricted+0x34>
   1d5ca:	2301      	movs	r3, #1
   1d5cc:	425b      	negs	r3, r3
   1d5ce:	60bb      	str	r3, [r7, #8]
   1d5d0:	4b20      	ldr	r3, [pc, #128]	; (1d654 <vTaskPlaceOnEventListRestricted+0xb8>)
   1d5d2:	681b      	ldr	r3, [r3, #0]
   1d5d4:	0018      	movs	r0, r3
   1d5d6:	4b21      	ldr	r3, [pc, #132]	; (1d65c <vTaskPlaceOnEventListRestricted+0xc0>)
   1d5d8:	4798      	blx	r3
   1d5da:	0003      	movs	r3, r0
   1d5dc:	001a      	movs	r2, r3
   1d5de:	4b20      	ldr	r3, [pc, #128]	; (1d660 <vTaskPlaceOnEventListRestricted+0xc4>)
   1d5e0:	881b      	ldrh	r3, [r3, #0]
   1d5e2:	4013      	ands	r3, r2
   1d5e4:	b29b      	uxth	r3, r3
   1d5e6:	2b00      	cmp	r3, #0
   1d5e8:	d011      	beq.n	1d60e <vTaskPlaceOnEventListRestricted+0x72>
   1d5ea:	4b1e      	ldr	r3, [pc, #120]	; (1d664 <vTaskPlaceOnEventListRestricted+0xc8>)
   1d5ec:	681a      	ldr	r2, [r3, #0]
   1d5ee:	68bb      	ldr	r3, [r7, #8]
   1d5f0:	18d3      	adds	r3, r2, r3
   1d5f2:	0019      	movs	r1, r3
   1d5f4:	2088      	movs	r0, #136	; 0x88
   1d5f6:	4b1c      	ldr	r3, [pc, #112]	; (1d668 <vTaskPlaceOnEventListRestricted+0xcc>)
   1d5f8:	4798      	blx	r3
   1d5fa:	4b16      	ldr	r3, [pc, #88]	; (1d654 <vTaskPlaceOnEventListRestricted+0xb8>)
   1d5fc:	681b      	ldr	r3, [r3, #0]
   1d5fe:	0018      	movs	r0, r3
   1d600:	4b1a      	ldr	r3, [pc, #104]	; (1d66c <vTaskPlaceOnEventListRestricted+0xd0>)
   1d602:	4798      	blx	r3
   1d604:	0003      	movs	r3, r0
   1d606:	b2db      	uxtb	r3, r3
   1d608:	0018      	movs	r0, r3
   1d60a:	4b19      	ldr	r3, [pc, #100]	; (1d670 <vTaskPlaceOnEventListRestricted+0xd4>)
   1d60c:	4798      	blx	r3
   1d60e:	4b19      	ldr	r3, [pc, #100]	; (1d674 <vTaskPlaceOnEventListRestricted+0xd8>)
   1d610:	4798      	blx	r3
   1d612:	0003      	movs	r3, r0
   1d614:	0018      	movs	r0, r3
   1d616:	4b11      	ldr	r3, [pc, #68]	; (1d65c <vTaskPlaceOnEventListRestricted+0xc0>)
   1d618:	4798      	blx	r3
   1d61a:	0003      	movs	r3, r0
   1d61c:	001a      	movs	r2, r3
   1d61e:	4b10      	ldr	r3, [pc, #64]	; (1d660 <vTaskPlaceOnEventListRestricted+0xc4>)
   1d620:	881b      	ldrh	r3, [r3, #0]
   1d622:	4013      	ands	r3, r2
   1d624:	b29b      	uxth	r3, r3
   1d626:	2b00      	cmp	r3, #0
   1d628:	d00a      	beq.n	1d640 <vTaskPlaceOnEventListRestricted+0xa4>
   1d62a:	4b12      	ldr	r3, [pc, #72]	; (1d674 <vTaskPlaceOnEventListRestricted+0xd8>)
   1d62c:	4798      	blx	r3
   1d62e:	0003      	movs	r3, r0
   1d630:	0018      	movs	r0, r3
   1d632:	4b0e      	ldr	r3, [pc, #56]	; (1d66c <vTaskPlaceOnEventListRestricted+0xd0>)
   1d634:	4798      	blx	r3
   1d636:	0003      	movs	r3, r0
   1d638:	b2db      	uxtb	r3, r3
   1d63a:	0018      	movs	r0, r3
   1d63c:	4b0c      	ldr	r3, [pc, #48]	; (1d670 <vTaskPlaceOnEventListRestricted+0xd4>)
   1d63e:	4798      	blx	r3
   1d640:	687a      	ldr	r2, [r7, #4]
   1d642:	68bb      	ldr	r3, [r7, #8]
   1d644:	0011      	movs	r1, r2
   1d646:	0018      	movs	r0, r3
   1d648:	4b0b      	ldr	r3, [pc, #44]	; (1d678 <vTaskPlaceOnEventListRestricted+0xdc>)
   1d64a:	4798      	blx	r3
   1d64c:	46c0      	nop			; (mov r8, r8)
   1d64e:	46bd      	mov	sp, r7
   1d650:	b004      	add	sp, #16
   1d652:	bd80      	pop	{r7, pc}
   1d654:	20003d18 	.word	0x20003d18
   1d658:	0001abaf 	.word	0x0001abaf
   1d65c:	00018de5 	.word	0x00018de5
   1d660:	20000104 	.word	0x20000104
   1d664:	20003df4 	.word	0x20003df4
   1d668:	00019ae5 	.word	0x00019ae5
   1d66c:	00018dc5 	.word	0x00018dc5
   1d670:	00019f75 	.word	0x00019f75
   1d674:	00019081 	.word	0x00019081
   1d678:	0001dffd 	.word	0x0001dffd

0001d67c <xTaskRemoveFromEventList>:
   1d67c:	b580      	push	{r7, lr}
   1d67e:	b084      	sub	sp, #16
   1d680:	af00      	add	r7, sp, #0
   1d682:	6078      	str	r0, [r7, #4]
   1d684:	687b      	ldr	r3, [r7, #4]
   1d686:	68db      	ldr	r3, [r3, #12]
   1d688:	68db      	ldr	r3, [r3, #12]
   1d68a:	60bb      	str	r3, [r7, #8]
   1d68c:	68bb      	ldr	r3, [r7, #8]
   1d68e:	2b00      	cmp	r3, #0
   1d690:	d101      	bne.n	1d696 <xTaskRemoveFromEventList+0x1a>
   1d692:	b672      	cpsid	i
   1d694:	e7fe      	b.n	1d694 <xTaskRemoveFromEventList+0x18>
   1d696:	68bb      	ldr	r3, [r7, #8]
   1d698:	3318      	adds	r3, #24
   1d69a:	0018      	movs	r0, r3
   1d69c:	4b2a      	ldr	r3, [pc, #168]	; (1d748 <xTaskRemoveFromEventList+0xcc>)
   1d69e:	4798      	blx	r3
   1d6a0:	4b2a      	ldr	r3, [pc, #168]	; (1d74c <xTaskRemoveFromEventList+0xd0>)
   1d6a2:	681b      	ldr	r3, [r3, #0]
   1d6a4:	2b00      	cmp	r3, #0
   1d6a6:	d132      	bne.n	1d70e <xTaskRemoveFromEventList+0x92>
   1d6a8:	68bb      	ldr	r3, [r7, #8]
   1d6aa:	3304      	adds	r3, #4
   1d6ac:	0018      	movs	r0, r3
   1d6ae:	4b26      	ldr	r3, [pc, #152]	; (1d748 <xTaskRemoveFromEventList+0xcc>)
   1d6b0:	4798      	blx	r3
   1d6b2:	68bb      	ldr	r3, [r7, #8]
   1d6b4:	0018      	movs	r0, r3
   1d6b6:	4b26      	ldr	r3, [pc, #152]	; (1d750 <xTaskRemoveFromEventList+0xd4>)
   1d6b8:	4798      	blx	r3
   1d6ba:	0003      	movs	r3, r0
   1d6bc:	001a      	movs	r2, r3
   1d6be:	4b25      	ldr	r3, [pc, #148]	; (1d754 <xTaskRemoveFromEventList+0xd8>)
   1d6c0:	881b      	ldrh	r3, [r3, #0]
   1d6c2:	4013      	ands	r3, r2
   1d6c4:	b29b      	uxth	r3, r3
   1d6c6:	2b00      	cmp	r3, #0
   1d6c8:	d008      	beq.n	1d6dc <xTaskRemoveFromEventList+0x60>
   1d6ca:	68bb      	ldr	r3, [r7, #8]
   1d6cc:	0018      	movs	r0, r3
   1d6ce:	4b22      	ldr	r3, [pc, #136]	; (1d758 <xTaskRemoveFromEventList+0xdc>)
   1d6d0:	4798      	blx	r3
   1d6d2:	0003      	movs	r3, r0
   1d6d4:	b2db      	uxtb	r3, r3
   1d6d6:	0018      	movs	r0, r3
   1d6d8:	4b20      	ldr	r3, [pc, #128]	; (1d75c <xTaskRemoveFromEventList+0xe0>)
   1d6da:	4798      	blx	r3
   1d6dc:	68bb      	ldr	r3, [r7, #8]
   1d6de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d6e0:	4b1f      	ldr	r3, [pc, #124]	; (1d760 <xTaskRemoveFromEventList+0xe4>)
   1d6e2:	681b      	ldr	r3, [r3, #0]
   1d6e4:	429a      	cmp	r2, r3
   1d6e6:	d903      	bls.n	1d6f0 <xTaskRemoveFromEventList+0x74>
   1d6e8:	68bb      	ldr	r3, [r7, #8]
   1d6ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d6ec:	4b1c      	ldr	r3, [pc, #112]	; (1d760 <xTaskRemoveFromEventList+0xe4>)
   1d6ee:	601a      	str	r2, [r3, #0]
   1d6f0:	68bb      	ldr	r3, [r7, #8]
   1d6f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d6f4:	0013      	movs	r3, r2
   1d6f6:	009b      	lsls	r3, r3, #2
   1d6f8:	189b      	adds	r3, r3, r2
   1d6fa:	009b      	lsls	r3, r3, #2
   1d6fc:	4a19      	ldr	r2, [pc, #100]	; (1d764 <xTaskRemoveFromEventList+0xe8>)
   1d6fe:	189a      	adds	r2, r3, r2
   1d700:	68bb      	ldr	r3, [r7, #8]
   1d702:	3304      	adds	r3, #4
   1d704:	0019      	movs	r1, r3
   1d706:	0010      	movs	r0, r2
   1d708:	4b17      	ldr	r3, [pc, #92]	; (1d768 <xTaskRemoveFromEventList+0xec>)
   1d70a:	4798      	blx	r3
   1d70c:	e007      	b.n	1d71e <xTaskRemoveFromEventList+0xa2>
   1d70e:	68bb      	ldr	r3, [r7, #8]
   1d710:	3318      	adds	r3, #24
   1d712:	001a      	movs	r2, r3
   1d714:	4b15      	ldr	r3, [pc, #84]	; (1d76c <xTaskRemoveFromEventList+0xf0>)
   1d716:	0011      	movs	r1, r2
   1d718:	0018      	movs	r0, r3
   1d71a:	4b13      	ldr	r3, [pc, #76]	; (1d768 <xTaskRemoveFromEventList+0xec>)
   1d71c:	4798      	blx	r3
   1d71e:	68bb      	ldr	r3, [r7, #8]
   1d720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d722:	4b13      	ldr	r3, [pc, #76]	; (1d770 <xTaskRemoveFromEventList+0xf4>)
   1d724:	681b      	ldr	r3, [r3, #0]
   1d726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d728:	429a      	cmp	r2, r3
   1d72a:	d905      	bls.n	1d738 <xTaskRemoveFromEventList+0xbc>
   1d72c:	2301      	movs	r3, #1
   1d72e:	60fb      	str	r3, [r7, #12]
   1d730:	4b10      	ldr	r3, [pc, #64]	; (1d774 <xTaskRemoveFromEventList+0xf8>)
   1d732:	2201      	movs	r2, #1
   1d734:	601a      	str	r2, [r3, #0]
   1d736:	e001      	b.n	1d73c <xTaskRemoveFromEventList+0xc0>
   1d738:	2300      	movs	r3, #0
   1d73a:	60fb      	str	r3, [r7, #12]
   1d73c:	68fb      	ldr	r3, [r7, #12]
   1d73e:	0018      	movs	r0, r3
   1d740:	46bd      	mov	sp, r7
   1d742:	b004      	add	sp, #16
   1d744:	bd80      	pop	{r7, pc}
   1d746:	46c0      	nop			; (mov r8, r8)
   1d748:	0001ac5f 	.word	0x0001ac5f
   1d74c:	20003e18 	.word	0x20003e18
   1d750:	00018de5 	.word	0x00018de5
   1d754:	20000104 	.word	0x20000104
   1d758:	00018dc5 	.word	0x00018dc5
   1d75c:	00019595 	.word	0x00019595
   1d760:	20003df8 	.word	0x20003df8
   1d764:	20003d1c 	.word	0x20003d1c
   1d768:	0001abaf 	.word	0x0001abaf
   1d76c:	20003db0 	.word	0x20003db0
   1d770:	20003d18 	.word	0x20003d18
   1d774:	20003e04 	.word	0x20003e04

0001d778 <vTaskSetTimeOutState>:
   1d778:	b580      	push	{r7, lr}
   1d77a:	b082      	sub	sp, #8
   1d77c:	af00      	add	r7, sp, #0
   1d77e:	6078      	str	r0, [r7, #4]
   1d780:	687b      	ldr	r3, [r7, #4]
   1d782:	2b00      	cmp	r3, #0
   1d784:	d101      	bne.n	1d78a <vTaskSetTimeOutState+0x12>
   1d786:	b672      	cpsid	i
   1d788:	e7fe      	b.n	1d788 <vTaskSetTimeOutState+0x10>
   1d78a:	4b08      	ldr	r3, [pc, #32]	; (1d7ac <vTaskSetTimeOutState+0x34>)
   1d78c:	4798      	blx	r3
   1d78e:	4b08      	ldr	r3, [pc, #32]	; (1d7b0 <vTaskSetTimeOutState+0x38>)
   1d790:	681a      	ldr	r2, [r3, #0]
   1d792:	687b      	ldr	r3, [r7, #4]
   1d794:	601a      	str	r2, [r3, #0]
   1d796:	4b07      	ldr	r3, [pc, #28]	; (1d7b4 <vTaskSetTimeOutState+0x3c>)
   1d798:	681a      	ldr	r2, [r3, #0]
   1d79a:	687b      	ldr	r3, [r7, #4]
   1d79c:	605a      	str	r2, [r3, #4]
   1d79e:	4b06      	ldr	r3, [pc, #24]	; (1d7b8 <vTaskSetTimeOutState+0x40>)
   1d7a0:	4798      	blx	r3
   1d7a2:	46c0      	nop			; (mov r8, r8)
   1d7a4:	46bd      	mov	sp, r7
   1d7a6:	b002      	add	sp, #8
   1d7a8:	bd80      	pop	{r7, pc}
   1d7aa:	46c0      	nop			; (mov r8, r8)
   1d7ac:	0001ade9 	.word	0x0001ade9
   1d7b0:	20003e08 	.word	0x20003e08
   1d7b4:	20003df4 	.word	0x20003df4
   1d7b8:	0001ae0d 	.word	0x0001ae0d

0001d7bc <vTaskInternalSetTimeOutState>:
   1d7bc:	b580      	push	{r7, lr}
   1d7be:	b082      	sub	sp, #8
   1d7c0:	af00      	add	r7, sp, #0
   1d7c2:	6078      	str	r0, [r7, #4]
   1d7c4:	4b05      	ldr	r3, [pc, #20]	; (1d7dc <vTaskInternalSetTimeOutState+0x20>)
   1d7c6:	681a      	ldr	r2, [r3, #0]
   1d7c8:	687b      	ldr	r3, [r7, #4]
   1d7ca:	601a      	str	r2, [r3, #0]
   1d7cc:	4b04      	ldr	r3, [pc, #16]	; (1d7e0 <vTaskInternalSetTimeOutState+0x24>)
   1d7ce:	681a      	ldr	r2, [r3, #0]
   1d7d0:	687b      	ldr	r3, [r7, #4]
   1d7d2:	605a      	str	r2, [r3, #4]
   1d7d4:	46c0      	nop			; (mov r8, r8)
   1d7d6:	46bd      	mov	sp, r7
   1d7d8:	b002      	add	sp, #8
   1d7da:	bd80      	pop	{r7, pc}
   1d7dc:	20003e08 	.word	0x20003e08
   1d7e0:	20003df4 	.word	0x20003df4

0001d7e4 <xTaskCheckForTimeOut>:
   1d7e4:	b580      	push	{r7, lr}
   1d7e6:	b086      	sub	sp, #24
   1d7e8:	af00      	add	r7, sp, #0
   1d7ea:	6078      	str	r0, [r7, #4]
   1d7ec:	6039      	str	r1, [r7, #0]
   1d7ee:	687b      	ldr	r3, [r7, #4]
   1d7f0:	2b00      	cmp	r3, #0
   1d7f2:	d101      	bne.n	1d7f8 <xTaskCheckForTimeOut+0x14>
   1d7f4:	b672      	cpsid	i
   1d7f6:	e7fe      	b.n	1d7f6 <xTaskCheckForTimeOut+0x12>
   1d7f8:	683b      	ldr	r3, [r7, #0]
   1d7fa:	2b00      	cmp	r3, #0
   1d7fc:	d101      	bne.n	1d802 <xTaskCheckForTimeOut+0x1e>
   1d7fe:	b672      	cpsid	i
   1d800:	e7fe      	b.n	1d800 <xTaskCheckForTimeOut+0x1c>
   1d802:	4b1e      	ldr	r3, [pc, #120]	; (1d87c <xTaskCheckForTimeOut+0x98>)
   1d804:	4798      	blx	r3
   1d806:	4b1e      	ldr	r3, [pc, #120]	; (1d880 <xTaskCheckForTimeOut+0x9c>)
   1d808:	681b      	ldr	r3, [r3, #0]
   1d80a:	613b      	str	r3, [r7, #16]
   1d80c:	687b      	ldr	r3, [r7, #4]
   1d80e:	685b      	ldr	r3, [r3, #4]
   1d810:	693a      	ldr	r2, [r7, #16]
   1d812:	1ad3      	subs	r3, r2, r3
   1d814:	60fb      	str	r3, [r7, #12]
   1d816:	683b      	ldr	r3, [r7, #0]
   1d818:	681b      	ldr	r3, [r3, #0]
   1d81a:	3301      	adds	r3, #1
   1d81c:	d102      	bne.n	1d824 <xTaskCheckForTimeOut+0x40>
   1d81e:	2300      	movs	r3, #0
   1d820:	617b      	str	r3, [r7, #20]
   1d822:	e024      	b.n	1d86e <xTaskCheckForTimeOut+0x8a>
   1d824:	687b      	ldr	r3, [r7, #4]
   1d826:	681a      	ldr	r2, [r3, #0]
   1d828:	4b16      	ldr	r3, [pc, #88]	; (1d884 <xTaskCheckForTimeOut+0xa0>)
   1d82a:	681b      	ldr	r3, [r3, #0]
   1d82c:	429a      	cmp	r2, r3
   1d82e:	d007      	beq.n	1d840 <xTaskCheckForTimeOut+0x5c>
   1d830:	687b      	ldr	r3, [r7, #4]
   1d832:	685a      	ldr	r2, [r3, #4]
   1d834:	693b      	ldr	r3, [r7, #16]
   1d836:	429a      	cmp	r2, r3
   1d838:	d802      	bhi.n	1d840 <xTaskCheckForTimeOut+0x5c>
   1d83a:	2301      	movs	r3, #1
   1d83c:	617b      	str	r3, [r7, #20]
   1d83e:	e016      	b.n	1d86e <xTaskCheckForTimeOut+0x8a>
   1d840:	683b      	ldr	r3, [r7, #0]
   1d842:	681a      	ldr	r2, [r3, #0]
   1d844:	68fb      	ldr	r3, [r7, #12]
   1d846:	429a      	cmp	r2, r3
   1d848:	d90c      	bls.n	1d864 <xTaskCheckForTimeOut+0x80>
   1d84a:	683b      	ldr	r3, [r7, #0]
   1d84c:	681a      	ldr	r2, [r3, #0]
   1d84e:	68fb      	ldr	r3, [r7, #12]
   1d850:	1ad2      	subs	r2, r2, r3
   1d852:	683b      	ldr	r3, [r7, #0]
   1d854:	601a      	str	r2, [r3, #0]
   1d856:	687b      	ldr	r3, [r7, #4]
   1d858:	0018      	movs	r0, r3
   1d85a:	4b0b      	ldr	r3, [pc, #44]	; (1d888 <xTaskCheckForTimeOut+0xa4>)
   1d85c:	4798      	blx	r3
   1d85e:	2300      	movs	r3, #0
   1d860:	617b      	str	r3, [r7, #20]
   1d862:	e004      	b.n	1d86e <xTaskCheckForTimeOut+0x8a>
   1d864:	683b      	ldr	r3, [r7, #0]
   1d866:	2200      	movs	r2, #0
   1d868:	601a      	str	r2, [r3, #0]
   1d86a:	2301      	movs	r3, #1
   1d86c:	617b      	str	r3, [r7, #20]
   1d86e:	4b07      	ldr	r3, [pc, #28]	; (1d88c <xTaskCheckForTimeOut+0xa8>)
   1d870:	4798      	blx	r3
   1d872:	697b      	ldr	r3, [r7, #20]
   1d874:	0018      	movs	r0, r3
   1d876:	46bd      	mov	sp, r7
   1d878:	b006      	add	sp, #24
   1d87a:	bd80      	pop	{r7, pc}
   1d87c:	0001ade9 	.word	0x0001ade9
   1d880:	20003df4 	.word	0x20003df4
   1d884:	20003e08 	.word	0x20003e08
   1d888:	0001d7bd 	.word	0x0001d7bd
   1d88c:	0001ae0d 	.word	0x0001ae0d

0001d890 <vTaskMissedYield>:
   1d890:	b580      	push	{r7, lr}
   1d892:	af00      	add	r7, sp, #0
   1d894:	4b02      	ldr	r3, [pc, #8]	; (1d8a0 <vTaskMissedYield+0x10>)
   1d896:	2201      	movs	r2, #1
   1d898:	601a      	str	r2, [r3, #0]
   1d89a:	46c0      	nop			; (mov r8, r8)
   1d89c:	46bd      	mov	sp, r7
   1d89e:	bd80      	pop	{r7, pc}
   1d8a0:	20003e04 	.word	0x20003e04

0001d8a4 <uxTaskGetTaskNumber>:
   1d8a4:	b580      	push	{r7, lr}
   1d8a6:	b084      	sub	sp, #16
   1d8a8:	af00      	add	r7, sp, #0
   1d8aa:	6078      	str	r0, [r7, #4]
   1d8ac:	687b      	ldr	r3, [r7, #4]
   1d8ae:	2b00      	cmp	r3, #0
   1d8b0:	d005      	beq.n	1d8be <uxTaskGetTaskNumber+0x1a>
   1d8b2:	687b      	ldr	r3, [r7, #4]
   1d8b4:	60bb      	str	r3, [r7, #8]
   1d8b6:	68bb      	ldr	r3, [r7, #8]
   1d8b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1d8ba:	60fb      	str	r3, [r7, #12]
   1d8bc:	e001      	b.n	1d8c2 <uxTaskGetTaskNumber+0x1e>
   1d8be:	2300      	movs	r3, #0
   1d8c0:	60fb      	str	r3, [r7, #12]
   1d8c2:	68fb      	ldr	r3, [r7, #12]
   1d8c4:	0018      	movs	r0, r3
   1d8c6:	46bd      	mov	sp, r7
   1d8c8:	b004      	add	sp, #16
   1d8ca:	bd80      	pop	{r7, pc}

0001d8cc <vTaskSetTaskNumber>:
   1d8cc:	b580      	push	{r7, lr}
   1d8ce:	b084      	sub	sp, #16
   1d8d0:	af00      	add	r7, sp, #0
   1d8d2:	6078      	str	r0, [r7, #4]
   1d8d4:	6039      	str	r1, [r7, #0]
   1d8d6:	687b      	ldr	r3, [r7, #4]
   1d8d8:	2b00      	cmp	r3, #0
   1d8da:	d004      	beq.n	1d8e6 <vTaskSetTaskNumber+0x1a>
   1d8dc:	687b      	ldr	r3, [r7, #4]
   1d8de:	60fb      	str	r3, [r7, #12]
   1d8e0:	68fb      	ldr	r3, [r7, #12]
   1d8e2:	683a      	ldr	r2, [r7, #0]
   1d8e4:	641a      	str	r2, [r3, #64]	; 0x40
   1d8e6:	46c0      	nop			; (mov r8, r8)
   1d8e8:	46bd      	mov	sp, r7
   1d8ea:	b004      	add	sp, #16
   1d8ec:	bd80      	pop	{r7, pc}
	...

0001d8f0 <prvIdleTask>:
   1d8f0:	b580      	push	{r7, lr}
   1d8f2:	b082      	sub	sp, #8
   1d8f4:	af00      	add	r7, sp, #0
   1d8f6:	6078      	str	r0, [r7, #4]
   1d8f8:	4b04      	ldr	r3, [pc, #16]	; (1d90c <prvIdleTask+0x1c>)
   1d8fa:	4798      	blx	r3
   1d8fc:	4b04      	ldr	r3, [pc, #16]	; (1d910 <prvIdleTask+0x20>)
   1d8fe:	681b      	ldr	r3, [r3, #0]
   1d900:	2b01      	cmp	r3, #1
   1d902:	d9f9      	bls.n	1d8f8 <prvIdleTask+0x8>
   1d904:	4b03      	ldr	r3, [pc, #12]	; (1d914 <prvIdleTask+0x24>)
   1d906:	4798      	blx	r3
   1d908:	e7f6      	b.n	1d8f8 <prvIdleTask+0x8>
   1d90a:	46c0      	nop			; (mov r8, r8)
   1d90c:	0001d9a5 	.word	0x0001d9a5
   1d910:	20003d1c 	.word	0x20003d1c
   1d914:	0001add1 	.word	0x0001add1

0001d918 <prvInitialiseTaskLists>:
   1d918:	b580      	push	{r7, lr}
   1d91a:	b082      	sub	sp, #8
   1d91c:	af00      	add	r7, sp, #0
   1d91e:	2300      	movs	r3, #0
   1d920:	607b      	str	r3, [r7, #4]
   1d922:	e00c      	b.n	1d93e <prvInitialiseTaskLists+0x26>
   1d924:	687a      	ldr	r2, [r7, #4]
   1d926:	0013      	movs	r3, r2
   1d928:	009b      	lsls	r3, r3, #2
   1d92a:	189b      	adds	r3, r3, r2
   1d92c:	009b      	lsls	r3, r3, #2
   1d92e:	4a14      	ldr	r2, [pc, #80]	; (1d980 <prvInitialiseTaskLists+0x68>)
   1d930:	189b      	adds	r3, r3, r2
   1d932:	0018      	movs	r0, r3
   1d934:	4b13      	ldr	r3, [pc, #76]	; (1d984 <prvInitialiseTaskLists+0x6c>)
   1d936:	4798      	blx	r3
   1d938:	687b      	ldr	r3, [r7, #4]
   1d93a:	3301      	adds	r3, #1
   1d93c:	607b      	str	r3, [r7, #4]
   1d93e:	687b      	ldr	r3, [r7, #4]
   1d940:	2b04      	cmp	r3, #4
   1d942:	d9ef      	bls.n	1d924 <prvInitialiseTaskLists+0xc>
   1d944:	4b10      	ldr	r3, [pc, #64]	; (1d988 <prvInitialiseTaskLists+0x70>)
   1d946:	0018      	movs	r0, r3
   1d948:	4b0e      	ldr	r3, [pc, #56]	; (1d984 <prvInitialiseTaskLists+0x6c>)
   1d94a:	4798      	blx	r3
   1d94c:	4b0f      	ldr	r3, [pc, #60]	; (1d98c <prvInitialiseTaskLists+0x74>)
   1d94e:	0018      	movs	r0, r3
   1d950:	4b0c      	ldr	r3, [pc, #48]	; (1d984 <prvInitialiseTaskLists+0x6c>)
   1d952:	4798      	blx	r3
   1d954:	4b0e      	ldr	r3, [pc, #56]	; (1d990 <prvInitialiseTaskLists+0x78>)
   1d956:	0018      	movs	r0, r3
   1d958:	4b0a      	ldr	r3, [pc, #40]	; (1d984 <prvInitialiseTaskLists+0x6c>)
   1d95a:	4798      	blx	r3
   1d95c:	4b0d      	ldr	r3, [pc, #52]	; (1d994 <prvInitialiseTaskLists+0x7c>)
   1d95e:	0018      	movs	r0, r3
   1d960:	4b08      	ldr	r3, [pc, #32]	; (1d984 <prvInitialiseTaskLists+0x6c>)
   1d962:	4798      	blx	r3
   1d964:	4b0c      	ldr	r3, [pc, #48]	; (1d998 <prvInitialiseTaskLists+0x80>)
   1d966:	0018      	movs	r0, r3
   1d968:	4b06      	ldr	r3, [pc, #24]	; (1d984 <prvInitialiseTaskLists+0x6c>)
   1d96a:	4798      	blx	r3
   1d96c:	4b0b      	ldr	r3, [pc, #44]	; (1d99c <prvInitialiseTaskLists+0x84>)
   1d96e:	4a06      	ldr	r2, [pc, #24]	; (1d988 <prvInitialiseTaskLists+0x70>)
   1d970:	601a      	str	r2, [r3, #0]
   1d972:	4b0b      	ldr	r3, [pc, #44]	; (1d9a0 <prvInitialiseTaskLists+0x88>)
   1d974:	4a05      	ldr	r2, [pc, #20]	; (1d98c <prvInitialiseTaskLists+0x74>)
   1d976:	601a      	str	r2, [r3, #0]
   1d978:	46c0      	nop			; (mov r8, r8)
   1d97a:	46bd      	mov	sp, r7
   1d97c:	b002      	add	sp, #8
   1d97e:	bd80      	pop	{r7, pc}
   1d980:	20003d1c 	.word	0x20003d1c
   1d984:	0001ab5d 	.word	0x0001ab5d
   1d988:	20003d80 	.word	0x20003d80
   1d98c:	20003d94 	.word	0x20003d94
   1d990:	20003db0 	.word	0x20003db0
   1d994:	20003dc4 	.word	0x20003dc4
   1d998:	20003ddc 	.word	0x20003ddc
   1d99c:	20003da8 	.word	0x20003da8
   1d9a0:	20003dac 	.word	0x20003dac

0001d9a4 <prvCheckTasksWaitingTermination>:
   1d9a4:	b580      	push	{r7, lr}
   1d9a6:	b082      	sub	sp, #8
   1d9a8:	af00      	add	r7, sp, #0
   1d9aa:	e01a      	b.n	1d9e2 <prvCheckTasksWaitingTermination+0x3e>
   1d9ac:	4b11      	ldr	r3, [pc, #68]	; (1d9f4 <prvCheckTasksWaitingTermination+0x50>)
   1d9ae:	4798      	blx	r3
   1d9b0:	4b11      	ldr	r3, [pc, #68]	; (1d9f8 <prvCheckTasksWaitingTermination+0x54>)
   1d9b2:	68db      	ldr	r3, [r3, #12]
   1d9b4:	68db      	ldr	r3, [r3, #12]
   1d9b6:	607b      	str	r3, [r7, #4]
   1d9b8:	687b      	ldr	r3, [r7, #4]
   1d9ba:	3304      	adds	r3, #4
   1d9bc:	0018      	movs	r0, r3
   1d9be:	4b0f      	ldr	r3, [pc, #60]	; (1d9fc <prvCheckTasksWaitingTermination+0x58>)
   1d9c0:	4798      	blx	r3
   1d9c2:	4b0f      	ldr	r3, [pc, #60]	; (1da00 <prvCheckTasksWaitingTermination+0x5c>)
   1d9c4:	681b      	ldr	r3, [r3, #0]
   1d9c6:	1e5a      	subs	r2, r3, #1
   1d9c8:	4b0d      	ldr	r3, [pc, #52]	; (1da00 <prvCheckTasksWaitingTermination+0x5c>)
   1d9ca:	601a      	str	r2, [r3, #0]
   1d9cc:	4b0d      	ldr	r3, [pc, #52]	; (1da04 <prvCheckTasksWaitingTermination+0x60>)
   1d9ce:	681b      	ldr	r3, [r3, #0]
   1d9d0:	1e5a      	subs	r2, r3, #1
   1d9d2:	4b0c      	ldr	r3, [pc, #48]	; (1da04 <prvCheckTasksWaitingTermination+0x60>)
   1d9d4:	601a      	str	r2, [r3, #0]
   1d9d6:	4b0c      	ldr	r3, [pc, #48]	; (1da08 <prvCheckTasksWaitingTermination+0x64>)
   1d9d8:	4798      	blx	r3
   1d9da:	687b      	ldr	r3, [r7, #4]
   1d9dc:	0018      	movs	r0, r3
   1d9de:	4b0b      	ldr	r3, [pc, #44]	; (1da0c <prvCheckTasksWaitingTermination+0x68>)
   1d9e0:	4798      	blx	r3
   1d9e2:	4b08      	ldr	r3, [pc, #32]	; (1da04 <prvCheckTasksWaitingTermination+0x60>)
   1d9e4:	681b      	ldr	r3, [r3, #0]
   1d9e6:	2b00      	cmp	r3, #0
   1d9e8:	d1e0      	bne.n	1d9ac <prvCheckTasksWaitingTermination+0x8>
   1d9ea:	46c0      	nop			; (mov r8, r8)
   1d9ec:	46bd      	mov	sp, r7
   1d9ee:	b002      	add	sp, #8
   1d9f0:	bd80      	pop	{r7, pc}
   1d9f2:	46c0      	nop			; (mov r8, r8)
   1d9f4:	0001ade9 	.word	0x0001ade9
   1d9f8:	20003dc4 	.word	0x20003dc4
   1d9fc:	0001ac5f 	.word	0x0001ac5f
   1da00:	20003df0 	.word	0x20003df0
   1da04:	20003dd8 	.word	0x20003dd8
   1da08:	0001ae0d 	.word	0x0001ae0d
   1da0c:	0001da81 	.word	0x0001da81

0001da10 <prvTaskCheckFreeStackSpace>:
   1da10:	b580      	push	{r7, lr}
   1da12:	b084      	sub	sp, #16
   1da14:	af00      	add	r7, sp, #0
   1da16:	6078      	str	r0, [r7, #4]
   1da18:	2300      	movs	r3, #0
   1da1a:	60fb      	str	r3, [r7, #12]
   1da1c:	e005      	b.n	1da2a <prvTaskCheckFreeStackSpace+0x1a>
   1da1e:	687b      	ldr	r3, [r7, #4]
   1da20:	3301      	adds	r3, #1
   1da22:	607b      	str	r3, [r7, #4]
   1da24:	68fb      	ldr	r3, [r7, #12]
   1da26:	3301      	adds	r3, #1
   1da28:	60fb      	str	r3, [r7, #12]
   1da2a:	687b      	ldr	r3, [r7, #4]
   1da2c:	781b      	ldrb	r3, [r3, #0]
   1da2e:	2ba5      	cmp	r3, #165	; 0xa5
   1da30:	d0f5      	beq.n	1da1e <prvTaskCheckFreeStackSpace+0xe>
   1da32:	68fb      	ldr	r3, [r7, #12]
   1da34:	089b      	lsrs	r3, r3, #2
   1da36:	60fb      	str	r3, [r7, #12]
   1da38:	68fb      	ldr	r3, [r7, #12]
   1da3a:	b29b      	uxth	r3, r3
   1da3c:	0018      	movs	r0, r3
   1da3e:	46bd      	mov	sp, r7
   1da40:	b004      	add	sp, #16
   1da42:	bd80      	pop	{r7, pc}

0001da44 <uxTaskGetStackHighWaterMark>:
   1da44:	b580      	push	{r7, lr}
   1da46:	b086      	sub	sp, #24
   1da48:	af00      	add	r7, sp, #0
   1da4a:	6078      	str	r0, [r7, #4]
   1da4c:	687b      	ldr	r3, [r7, #4]
   1da4e:	2b00      	cmp	r3, #0
   1da50:	d102      	bne.n	1da58 <uxTaskGetStackHighWaterMark+0x14>
   1da52:	4b09      	ldr	r3, [pc, #36]	; (1da78 <uxTaskGetStackHighWaterMark+0x34>)
   1da54:	681b      	ldr	r3, [r3, #0]
   1da56:	e000      	b.n	1da5a <uxTaskGetStackHighWaterMark+0x16>
   1da58:	687b      	ldr	r3, [r7, #4]
   1da5a:	617b      	str	r3, [r7, #20]
   1da5c:	697b      	ldr	r3, [r7, #20]
   1da5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1da60:	613b      	str	r3, [r7, #16]
   1da62:	693b      	ldr	r3, [r7, #16]
   1da64:	0018      	movs	r0, r3
   1da66:	4b05      	ldr	r3, [pc, #20]	; (1da7c <uxTaskGetStackHighWaterMark+0x38>)
   1da68:	4798      	blx	r3
   1da6a:	0003      	movs	r3, r0
   1da6c:	60fb      	str	r3, [r7, #12]
   1da6e:	68fb      	ldr	r3, [r7, #12]
   1da70:	0018      	movs	r0, r3
   1da72:	46bd      	mov	sp, r7
   1da74:	b006      	add	sp, #24
   1da76:	bd80      	pop	{r7, pc}
   1da78:	20003d18 	.word	0x20003d18
   1da7c:	0001da11 	.word	0x0001da11

0001da80 <prvDeleteTCB>:
   1da80:	b580      	push	{r7, lr}
   1da82:	b082      	sub	sp, #8
   1da84:	af00      	add	r7, sp, #0
   1da86:	6078      	str	r0, [r7, #4]
   1da88:	687b      	ldr	r3, [r7, #4]
   1da8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1da8c:	0018      	movs	r0, r3
   1da8e:	4b05      	ldr	r3, [pc, #20]	; (1daa4 <prvDeleteTCB+0x24>)
   1da90:	4798      	blx	r3
   1da92:	687b      	ldr	r3, [r7, #4]
   1da94:	0018      	movs	r0, r3
   1da96:	4b03      	ldr	r3, [pc, #12]	; (1daa4 <prvDeleteTCB+0x24>)
   1da98:	4798      	blx	r3
   1da9a:	46c0      	nop			; (mov r8, r8)
   1da9c:	46bd      	mov	sp, r7
   1da9e:	b002      	add	sp, #8
   1daa0:	bd80      	pop	{r7, pc}
   1daa2:	46c0      	nop			; (mov r8, r8)
   1daa4:	0001afe5 	.word	0x0001afe5

0001daa8 <prvResetNextTaskUnblockTime>:
   1daa8:	b580      	push	{r7, lr}
   1daaa:	b082      	sub	sp, #8
   1daac:	af00      	add	r7, sp, #0
   1daae:	4b0e      	ldr	r3, [pc, #56]	; (1dae8 <prvResetNextTaskUnblockTime+0x40>)
   1dab0:	681b      	ldr	r3, [r3, #0]
   1dab2:	681b      	ldr	r3, [r3, #0]
   1dab4:	2b00      	cmp	r3, #0
   1dab6:	d101      	bne.n	1dabc <prvResetNextTaskUnblockTime+0x14>
   1dab8:	2301      	movs	r3, #1
   1daba:	e000      	b.n	1dabe <prvResetNextTaskUnblockTime+0x16>
   1dabc:	2300      	movs	r3, #0
   1dabe:	2b00      	cmp	r3, #0
   1dac0:	d004      	beq.n	1dacc <prvResetNextTaskUnblockTime+0x24>
   1dac2:	4b0a      	ldr	r3, [pc, #40]	; (1daec <prvResetNextTaskUnblockTime+0x44>)
   1dac4:	2201      	movs	r2, #1
   1dac6:	4252      	negs	r2, r2
   1dac8:	601a      	str	r2, [r3, #0]
   1daca:	e008      	b.n	1dade <prvResetNextTaskUnblockTime+0x36>
   1dacc:	4b06      	ldr	r3, [pc, #24]	; (1dae8 <prvResetNextTaskUnblockTime+0x40>)
   1dace:	681b      	ldr	r3, [r3, #0]
   1dad0:	68db      	ldr	r3, [r3, #12]
   1dad2:	68db      	ldr	r3, [r3, #12]
   1dad4:	607b      	str	r3, [r7, #4]
   1dad6:	687b      	ldr	r3, [r7, #4]
   1dad8:	685a      	ldr	r2, [r3, #4]
   1dada:	4b04      	ldr	r3, [pc, #16]	; (1daec <prvResetNextTaskUnblockTime+0x44>)
   1dadc:	601a      	str	r2, [r3, #0]
   1dade:	46c0      	nop			; (mov r8, r8)
   1dae0:	46bd      	mov	sp, r7
   1dae2:	b002      	add	sp, #8
   1dae4:	bd80      	pop	{r7, pc}
   1dae6:	46c0      	nop			; (mov r8, r8)
   1dae8:	20003da8 	.word	0x20003da8
   1daec:	20003e10 	.word	0x20003e10

0001daf0 <xTaskGetCurrentTaskHandle>:
   1daf0:	b580      	push	{r7, lr}
   1daf2:	b082      	sub	sp, #8
   1daf4:	af00      	add	r7, sp, #0
   1daf6:	4b04      	ldr	r3, [pc, #16]	; (1db08 <xTaskGetCurrentTaskHandle+0x18>)
   1daf8:	681b      	ldr	r3, [r3, #0]
   1dafa:	607b      	str	r3, [r7, #4]
   1dafc:	687b      	ldr	r3, [r7, #4]
   1dafe:	0018      	movs	r0, r3
   1db00:	46bd      	mov	sp, r7
   1db02:	b002      	add	sp, #8
   1db04:	bd80      	pop	{r7, pc}
   1db06:	46c0      	nop			; (mov r8, r8)
   1db08:	20003d18 	.word	0x20003d18

0001db0c <xTaskGetSchedulerState>:
   1db0c:	b580      	push	{r7, lr}
   1db0e:	b082      	sub	sp, #8
   1db10:	af00      	add	r7, sp, #0
   1db12:	4b0a      	ldr	r3, [pc, #40]	; (1db3c <xTaskGetSchedulerState+0x30>)
   1db14:	681b      	ldr	r3, [r3, #0]
   1db16:	2b00      	cmp	r3, #0
   1db18:	d102      	bne.n	1db20 <xTaskGetSchedulerState+0x14>
   1db1a:	2301      	movs	r3, #1
   1db1c:	607b      	str	r3, [r7, #4]
   1db1e:	e008      	b.n	1db32 <xTaskGetSchedulerState+0x26>
   1db20:	4b07      	ldr	r3, [pc, #28]	; (1db40 <xTaskGetSchedulerState+0x34>)
   1db22:	681b      	ldr	r3, [r3, #0]
   1db24:	2b00      	cmp	r3, #0
   1db26:	d102      	bne.n	1db2e <xTaskGetSchedulerState+0x22>
   1db28:	2302      	movs	r3, #2
   1db2a:	607b      	str	r3, [r7, #4]
   1db2c:	e001      	b.n	1db32 <xTaskGetSchedulerState+0x26>
   1db2e:	2300      	movs	r3, #0
   1db30:	607b      	str	r3, [r7, #4]
   1db32:	687b      	ldr	r3, [r7, #4]
   1db34:	0018      	movs	r0, r3
   1db36:	46bd      	mov	sp, r7
   1db38:	b002      	add	sp, #8
   1db3a:	bd80      	pop	{r7, pc}
   1db3c:	20003dfc 	.word	0x20003dfc
   1db40:	20003e18 	.word	0x20003e18

0001db44 <xTaskPriorityInherit>:
   1db44:	b590      	push	{r4, r7, lr}
   1db46:	b085      	sub	sp, #20
   1db48:	af00      	add	r7, sp, #0
   1db4a:	6078      	str	r0, [r7, #4]
   1db4c:	687b      	ldr	r3, [r7, #4]
   1db4e:	60bb      	str	r3, [r7, #8]
   1db50:	2300      	movs	r3, #0
   1db52:	60fb      	str	r3, [r7, #12]
   1db54:	687b      	ldr	r3, [r7, #4]
   1db56:	2b00      	cmp	r3, #0
   1db58:	d100      	bne.n	1db5c <xTaskPriorityInherit+0x18>
   1db5a:	e09d      	b.n	1dc98 <xTaskPriorityInherit+0x154>
   1db5c:	68bb      	ldr	r3, [r7, #8]
   1db5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1db60:	4b50      	ldr	r3, [pc, #320]	; (1dca4 <xTaskPriorityInherit+0x160>)
   1db62:	681b      	ldr	r3, [r3, #0]
   1db64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1db66:	429a      	cmp	r2, r3
   1db68:	d300      	bcc.n	1db6c <xTaskPriorityInherit+0x28>
   1db6a:	e08c      	b.n	1dc86 <xTaskPriorityInherit+0x142>
   1db6c:	68bb      	ldr	r3, [r7, #8]
   1db6e:	699b      	ldr	r3, [r3, #24]
   1db70:	2b00      	cmp	r3, #0
   1db72:	db06      	blt.n	1db82 <xTaskPriorityInherit+0x3e>
   1db74:	4b4b      	ldr	r3, [pc, #300]	; (1dca4 <xTaskPriorityInherit+0x160>)
   1db76:	681b      	ldr	r3, [r3, #0]
   1db78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1db7a:	2205      	movs	r2, #5
   1db7c:	1ad2      	subs	r2, r2, r3
   1db7e:	68bb      	ldr	r3, [r7, #8]
   1db80:	619a      	str	r2, [r3, #24]
   1db82:	68bb      	ldr	r3, [r7, #8]
   1db84:	6959      	ldr	r1, [r3, #20]
   1db86:	68bb      	ldr	r3, [r7, #8]
   1db88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1db8a:	0013      	movs	r3, r2
   1db8c:	009b      	lsls	r3, r3, #2
   1db8e:	189b      	adds	r3, r3, r2
   1db90:	009b      	lsls	r3, r3, #2
   1db92:	4a45      	ldr	r2, [pc, #276]	; (1dca8 <xTaskPriorityInherit+0x164>)
   1db94:	189b      	adds	r3, r3, r2
   1db96:	4299      	cmp	r1, r3
   1db98:	d101      	bne.n	1db9e <xTaskPriorityInherit+0x5a>
   1db9a:	2301      	movs	r3, #1
   1db9c:	e000      	b.n	1dba0 <xTaskPriorityInherit+0x5c>
   1db9e:	2300      	movs	r3, #0
   1dba0:	2b00      	cmp	r3, #0
   1dba2:	d037      	beq.n	1dc14 <xTaskPriorityInherit+0xd0>
   1dba4:	68bb      	ldr	r3, [r7, #8]
   1dba6:	3304      	adds	r3, #4
   1dba8:	0018      	movs	r0, r3
   1dbaa:	4b40      	ldr	r3, [pc, #256]	; (1dcac <xTaskPriorityInherit+0x168>)
   1dbac:	4798      	blx	r3
   1dbae:	4b3d      	ldr	r3, [pc, #244]	; (1dca4 <xTaskPriorityInherit+0x160>)
   1dbb0:	681b      	ldr	r3, [r3, #0]
   1dbb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dbb4:	68bb      	ldr	r3, [r7, #8]
   1dbb6:	62da      	str	r2, [r3, #44]	; 0x2c
   1dbb8:	68bb      	ldr	r3, [r7, #8]
   1dbba:	0018      	movs	r0, r3
   1dbbc:	4b3c      	ldr	r3, [pc, #240]	; (1dcb0 <xTaskPriorityInherit+0x16c>)
   1dbbe:	4798      	blx	r3
   1dbc0:	0003      	movs	r3, r0
   1dbc2:	001a      	movs	r2, r3
   1dbc4:	4b3b      	ldr	r3, [pc, #236]	; (1dcb4 <xTaskPriorityInherit+0x170>)
   1dbc6:	881b      	ldrh	r3, [r3, #0]
   1dbc8:	4013      	ands	r3, r2
   1dbca:	b29b      	uxth	r3, r3
   1dbcc:	2b00      	cmp	r3, #0
   1dbce:	d008      	beq.n	1dbe2 <xTaskPriorityInherit+0x9e>
   1dbd0:	68bb      	ldr	r3, [r7, #8]
   1dbd2:	0018      	movs	r0, r3
   1dbd4:	4b38      	ldr	r3, [pc, #224]	; (1dcb8 <xTaskPriorityInherit+0x174>)
   1dbd6:	4798      	blx	r3
   1dbd8:	0003      	movs	r3, r0
   1dbda:	b2db      	uxtb	r3, r3
   1dbdc:	0018      	movs	r0, r3
   1dbde:	4b37      	ldr	r3, [pc, #220]	; (1dcbc <xTaskPriorityInherit+0x178>)
   1dbe0:	4798      	blx	r3
   1dbe2:	68bb      	ldr	r3, [r7, #8]
   1dbe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dbe6:	4b36      	ldr	r3, [pc, #216]	; (1dcc0 <xTaskPriorityInherit+0x17c>)
   1dbe8:	681b      	ldr	r3, [r3, #0]
   1dbea:	429a      	cmp	r2, r3
   1dbec:	d903      	bls.n	1dbf6 <xTaskPriorityInherit+0xb2>
   1dbee:	68bb      	ldr	r3, [r7, #8]
   1dbf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dbf2:	4b33      	ldr	r3, [pc, #204]	; (1dcc0 <xTaskPriorityInherit+0x17c>)
   1dbf4:	601a      	str	r2, [r3, #0]
   1dbf6:	68bb      	ldr	r3, [r7, #8]
   1dbf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dbfa:	0013      	movs	r3, r2
   1dbfc:	009b      	lsls	r3, r3, #2
   1dbfe:	189b      	adds	r3, r3, r2
   1dc00:	009b      	lsls	r3, r3, #2
   1dc02:	4a29      	ldr	r2, [pc, #164]	; (1dca8 <xTaskPriorityInherit+0x164>)
   1dc04:	189a      	adds	r2, r3, r2
   1dc06:	68bb      	ldr	r3, [r7, #8]
   1dc08:	3304      	adds	r3, #4
   1dc0a:	0019      	movs	r1, r3
   1dc0c:	0010      	movs	r0, r2
   1dc0e:	4b2d      	ldr	r3, [pc, #180]	; (1dcc4 <xTaskPriorityInherit+0x180>)
   1dc10:	4798      	blx	r3
   1dc12:	e004      	b.n	1dc1e <xTaskPriorityInherit+0xda>
   1dc14:	4b23      	ldr	r3, [pc, #140]	; (1dca4 <xTaskPriorityInherit+0x160>)
   1dc16:	681b      	ldr	r3, [r3, #0]
   1dc18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dc1a:	68bb      	ldr	r3, [r7, #8]
   1dc1c:	62da      	str	r2, [r3, #44]	; 0x2c
   1dc1e:	68bb      	ldr	r3, [r7, #8]
   1dc20:	0018      	movs	r0, r3
   1dc22:	4b23      	ldr	r3, [pc, #140]	; (1dcb0 <xTaskPriorityInherit+0x16c>)
   1dc24:	4798      	blx	r3
   1dc26:	0003      	movs	r3, r0
   1dc28:	001a      	movs	r2, r3
   1dc2a:	4b22      	ldr	r3, [pc, #136]	; (1dcb4 <xTaskPriorityInherit+0x170>)
   1dc2c:	881b      	ldrh	r3, [r3, #0]
   1dc2e:	4013      	ands	r3, r2
   1dc30:	b29b      	uxth	r3, r3
   1dc32:	2b00      	cmp	r3, #0
   1dc34:	d024      	beq.n	1dc80 <xTaskPriorityInherit+0x13c>
   1dc36:	68bb      	ldr	r3, [r7, #8]
   1dc38:	0018      	movs	r0, r3
   1dc3a:	4b1f      	ldr	r3, [pc, #124]	; (1dcb8 <xTaskPriorityInherit+0x174>)
   1dc3c:	4798      	blx	r3
   1dc3e:	0003      	movs	r3, r0
   1dc40:	b2db      	uxtb	r3, r3
   1dc42:	001c      	movs	r4, r3
   1dc44:	68bb      	ldr	r3, [r7, #8]
   1dc46:	0018      	movs	r0, r3
   1dc48:	4b1b      	ldr	r3, [pc, #108]	; (1dcb8 <xTaskPriorityInherit+0x174>)
   1dc4a:	4798      	blx	r3
   1dc4c:	0003      	movs	r3, r0
   1dc4e:	b2db      	uxtb	r3, r3
   1dc50:	0019      	movs	r1, r3
   1dc52:	2003      	movs	r0, #3
   1dc54:	4b1c      	ldr	r3, [pc, #112]	; (1dcc8 <xTaskPriorityInherit+0x184>)
   1dc56:	4798      	blx	r3
   1dc58:	0003      	movs	r3, r0
   1dc5a:	0022      	movs	r2, r4
   1dc5c:	2103      	movs	r1, #3
   1dc5e:	208e      	movs	r0, #142	; 0x8e
   1dc60:	4c1a      	ldr	r4, [pc, #104]	; (1dccc <xTaskPriorityInherit+0x188>)
   1dc62:	47a0      	blx	r4
   1dc64:	68bb      	ldr	r3, [r7, #8]
   1dc66:	0018      	movs	r0, r3
   1dc68:	4b13      	ldr	r3, [pc, #76]	; (1dcb8 <xTaskPriorityInherit+0x174>)
   1dc6a:	4798      	blx	r3
   1dc6c:	0003      	movs	r3, r0
   1dc6e:	b2d9      	uxtb	r1, r3
   1dc70:	4b0c      	ldr	r3, [pc, #48]	; (1dca4 <xTaskPriorityInherit+0x160>)
   1dc72:	681b      	ldr	r3, [r3, #0]
   1dc74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1dc76:	b2db      	uxtb	r3, r3
   1dc78:	001a      	movs	r2, r3
   1dc7a:	2003      	movs	r0, #3
   1dc7c:	4b14      	ldr	r3, [pc, #80]	; (1dcd0 <xTaskPriorityInherit+0x18c>)
   1dc7e:	4798      	blx	r3
   1dc80:	2301      	movs	r3, #1
   1dc82:	60fb      	str	r3, [r7, #12]
   1dc84:	e008      	b.n	1dc98 <xTaskPriorityInherit+0x154>
   1dc86:	68bb      	ldr	r3, [r7, #8]
   1dc88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1dc8a:	4b06      	ldr	r3, [pc, #24]	; (1dca4 <xTaskPriorityInherit+0x160>)
   1dc8c:	681b      	ldr	r3, [r3, #0]
   1dc8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1dc90:	429a      	cmp	r2, r3
   1dc92:	d201      	bcs.n	1dc98 <xTaskPriorityInherit+0x154>
   1dc94:	2301      	movs	r3, #1
   1dc96:	60fb      	str	r3, [r7, #12]
   1dc98:	68fb      	ldr	r3, [r7, #12]
   1dc9a:	0018      	movs	r0, r3
   1dc9c:	46bd      	mov	sp, r7
   1dc9e:	b005      	add	sp, #20
   1dca0:	bd90      	pop	{r4, r7, pc}
   1dca2:	46c0      	nop			; (mov r8, r8)
   1dca4:	20003d18 	.word	0x20003d18
   1dca8:	20003d1c 	.word	0x20003d1c
   1dcac:	0001ac5f 	.word	0x0001ac5f
   1dcb0:	00018de5 	.word	0x00018de5
   1dcb4:	20000104 	.word	0x20000104
   1dcb8:	00018dc5 	.word	0x00018dc5
   1dcbc:	00019595 	.word	0x00019595
   1dcc0:	20003df8 	.word	0x20003df8
   1dcc4:	0001abaf 	.word	0x0001abaf
   1dcc8:	00019d9d 	.word	0x00019d9d
   1dccc:	0001990d 	.word	0x0001990d
   1dcd0:	00019cf9 	.word	0x00019cf9

0001dcd4 <xTaskPriorityDisinherit>:
   1dcd4:	b590      	push	{r4, r7, lr}
   1dcd6:	b085      	sub	sp, #20
   1dcd8:	af00      	add	r7, sp, #0
   1dcda:	6078      	str	r0, [r7, #4]
   1dcdc:	687b      	ldr	r3, [r7, #4]
   1dcde:	60bb      	str	r3, [r7, #8]
   1dce0:	2300      	movs	r3, #0
   1dce2:	60fb      	str	r3, [r7, #12]
   1dce4:	687b      	ldr	r3, [r7, #4]
   1dce6:	2b00      	cmp	r3, #0
   1dce8:	d100      	bne.n	1dcec <xTaskPriorityDisinherit+0x18>
   1dcea:	e089      	b.n	1de00 <xTaskPriorityDisinherit+0x12c>
   1dcec:	4b47      	ldr	r3, [pc, #284]	; (1de0c <xTaskPriorityDisinherit+0x138>)
   1dcee:	681b      	ldr	r3, [r3, #0]
   1dcf0:	68ba      	ldr	r2, [r7, #8]
   1dcf2:	429a      	cmp	r2, r3
   1dcf4:	d001      	beq.n	1dcfa <xTaskPriorityDisinherit+0x26>
   1dcf6:	b672      	cpsid	i
   1dcf8:	e7fe      	b.n	1dcf8 <xTaskPriorityDisinherit+0x24>
   1dcfa:	68bb      	ldr	r3, [r7, #8]
   1dcfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1dcfe:	2b00      	cmp	r3, #0
   1dd00:	d101      	bne.n	1dd06 <xTaskPriorityDisinherit+0x32>
   1dd02:	b672      	cpsid	i
   1dd04:	e7fe      	b.n	1dd04 <xTaskPriorityDisinherit+0x30>
   1dd06:	68bb      	ldr	r3, [r7, #8]
   1dd08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1dd0a:	1e5a      	subs	r2, r3, #1
   1dd0c:	68bb      	ldr	r3, [r7, #8]
   1dd0e:	649a      	str	r2, [r3, #72]	; 0x48
   1dd10:	68bb      	ldr	r3, [r7, #8]
   1dd12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dd14:	68bb      	ldr	r3, [r7, #8]
   1dd16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1dd18:	429a      	cmp	r2, r3
   1dd1a:	d071      	beq.n	1de00 <xTaskPriorityDisinherit+0x12c>
   1dd1c:	68bb      	ldr	r3, [r7, #8]
   1dd1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1dd20:	2b00      	cmp	r3, #0
   1dd22:	d16d      	bne.n	1de00 <xTaskPriorityDisinherit+0x12c>
   1dd24:	68bb      	ldr	r3, [r7, #8]
   1dd26:	3304      	adds	r3, #4
   1dd28:	0018      	movs	r0, r3
   1dd2a:	4b39      	ldr	r3, [pc, #228]	; (1de10 <xTaskPriorityDisinherit+0x13c>)
   1dd2c:	4798      	blx	r3
   1dd2e:	68bb      	ldr	r3, [r7, #8]
   1dd30:	0018      	movs	r0, r3
   1dd32:	4b38      	ldr	r3, [pc, #224]	; (1de14 <xTaskPriorityDisinherit+0x140>)
   1dd34:	4798      	blx	r3
   1dd36:	0003      	movs	r3, r0
   1dd38:	001a      	movs	r2, r3
   1dd3a:	4b37      	ldr	r3, [pc, #220]	; (1de18 <xTaskPriorityDisinherit+0x144>)
   1dd3c:	881b      	ldrh	r3, [r3, #0]
   1dd3e:	4013      	ands	r3, r2
   1dd40:	b29b      	uxth	r3, r3
   1dd42:	2b00      	cmp	r3, #0
   1dd44:	d023      	beq.n	1dd8e <xTaskPriorityDisinherit+0xba>
   1dd46:	68bb      	ldr	r3, [r7, #8]
   1dd48:	0018      	movs	r0, r3
   1dd4a:	4b34      	ldr	r3, [pc, #208]	; (1de1c <xTaskPriorityDisinherit+0x148>)
   1dd4c:	4798      	blx	r3
   1dd4e:	0003      	movs	r3, r0
   1dd50:	b2db      	uxtb	r3, r3
   1dd52:	001c      	movs	r4, r3
   1dd54:	68bb      	ldr	r3, [r7, #8]
   1dd56:	0018      	movs	r0, r3
   1dd58:	4b30      	ldr	r3, [pc, #192]	; (1de1c <xTaskPriorityDisinherit+0x148>)
   1dd5a:	4798      	blx	r3
   1dd5c:	0003      	movs	r3, r0
   1dd5e:	b2db      	uxtb	r3, r3
   1dd60:	0019      	movs	r1, r3
   1dd62:	2003      	movs	r0, #3
   1dd64:	4b2e      	ldr	r3, [pc, #184]	; (1de20 <xTaskPriorityDisinherit+0x14c>)
   1dd66:	4798      	blx	r3
   1dd68:	0003      	movs	r3, r0
   1dd6a:	0022      	movs	r2, r4
   1dd6c:	2103      	movs	r1, #3
   1dd6e:	208f      	movs	r0, #143	; 0x8f
   1dd70:	4c2c      	ldr	r4, [pc, #176]	; (1de24 <xTaskPriorityDisinherit+0x150>)
   1dd72:	47a0      	blx	r4
   1dd74:	68bb      	ldr	r3, [r7, #8]
   1dd76:	0018      	movs	r0, r3
   1dd78:	4b28      	ldr	r3, [pc, #160]	; (1de1c <xTaskPriorityDisinherit+0x148>)
   1dd7a:	4798      	blx	r3
   1dd7c:	0003      	movs	r3, r0
   1dd7e:	b2d9      	uxtb	r1, r3
   1dd80:	68bb      	ldr	r3, [r7, #8]
   1dd82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1dd84:	b2db      	uxtb	r3, r3
   1dd86:	001a      	movs	r2, r3
   1dd88:	2003      	movs	r0, #3
   1dd8a:	4b27      	ldr	r3, [pc, #156]	; (1de28 <xTaskPriorityDisinherit+0x154>)
   1dd8c:	4798      	blx	r3
   1dd8e:	68bb      	ldr	r3, [r7, #8]
   1dd90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1dd92:	68bb      	ldr	r3, [r7, #8]
   1dd94:	62da      	str	r2, [r3, #44]	; 0x2c
   1dd96:	68bb      	ldr	r3, [r7, #8]
   1dd98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1dd9a:	2205      	movs	r2, #5
   1dd9c:	1ad2      	subs	r2, r2, r3
   1dd9e:	68bb      	ldr	r3, [r7, #8]
   1dda0:	619a      	str	r2, [r3, #24]
   1dda2:	68bb      	ldr	r3, [r7, #8]
   1dda4:	0018      	movs	r0, r3
   1dda6:	4b1b      	ldr	r3, [pc, #108]	; (1de14 <xTaskPriorityDisinherit+0x140>)
   1dda8:	4798      	blx	r3
   1ddaa:	0003      	movs	r3, r0
   1ddac:	001a      	movs	r2, r3
   1ddae:	4b1a      	ldr	r3, [pc, #104]	; (1de18 <xTaskPriorityDisinherit+0x144>)
   1ddb0:	881b      	ldrh	r3, [r3, #0]
   1ddb2:	4013      	ands	r3, r2
   1ddb4:	b29b      	uxth	r3, r3
   1ddb6:	2b00      	cmp	r3, #0
   1ddb8:	d008      	beq.n	1ddcc <xTaskPriorityDisinherit+0xf8>
   1ddba:	68bb      	ldr	r3, [r7, #8]
   1ddbc:	0018      	movs	r0, r3
   1ddbe:	4b17      	ldr	r3, [pc, #92]	; (1de1c <xTaskPriorityDisinherit+0x148>)
   1ddc0:	4798      	blx	r3
   1ddc2:	0003      	movs	r3, r0
   1ddc4:	b2db      	uxtb	r3, r3
   1ddc6:	0018      	movs	r0, r3
   1ddc8:	4b18      	ldr	r3, [pc, #96]	; (1de2c <xTaskPriorityDisinherit+0x158>)
   1ddca:	4798      	blx	r3
   1ddcc:	68bb      	ldr	r3, [r7, #8]
   1ddce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ddd0:	4b17      	ldr	r3, [pc, #92]	; (1de30 <xTaskPriorityDisinherit+0x15c>)
   1ddd2:	681b      	ldr	r3, [r3, #0]
   1ddd4:	429a      	cmp	r2, r3
   1ddd6:	d903      	bls.n	1dde0 <xTaskPriorityDisinherit+0x10c>
   1ddd8:	68bb      	ldr	r3, [r7, #8]
   1ddda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dddc:	4b14      	ldr	r3, [pc, #80]	; (1de30 <xTaskPriorityDisinherit+0x15c>)
   1ddde:	601a      	str	r2, [r3, #0]
   1dde0:	68bb      	ldr	r3, [r7, #8]
   1dde2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dde4:	0013      	movs	r3, r2
   1dde6:	009b      	lsls	r3, r3, #2
   1dde8:	189b      	adds	r3, r3, r2
   1ddea:	009b      	lsls	r3, r3, #2
   1ddec:	4a11      	ldr	r2, [pc, #68]	; (1de34 <xTaskPriorityDisinherit+0x160>)
   1ddee:	189a      	adds	r2, r3, r2
   1ddf0:	68bb      	ldr	r3, [r7, #8]
   1ddf2:	3304      	adds	r3, #4
   1ddf4:	0019      	movs	r1, r3
   1ddf6:	0010      	movs	r0, r2
   1ddf8:	4b0f      	ldr	r3, [pc, #60]	; (1de38 <xTaskPriorityDisinherit+0x164>)
   1ddfa:	4798      	blx	r3
   1ddfc:	2301      	movs	r3, #1
   1ddfe:	60fb      	str	r3, [r7, #12]
   1de00:	68fb      	ldr	r3, [r7, #12]
   1de02:	0018      	movs	r0, r3
   1de04:	46bd      	mov	sp, r7
   1de06:	b005      	add	sp, #20
   1de08:	bd90      	pop	{r4, r7, pc}
   1de0a:	46c0      	nop			; (mov r8, r8)
   1de0c:	20003d18 	.word	0x20003d18
   1de10:	0001ac5f 	.word	0x0001ac5f
   1de14:	00018de5 	.word	0x00018de5
   1de18:	20000104 	.word	0x20000104
   1de1c:	00018dc5 	.word	0x00018dc5
   1de20:	00019d9d 	.word	0x00019d9d
   1de24:	0001990d 	.word	0x0001990d
   1de28:	00019cf9 	.word	0x00019cf9
   1de2c:	00019595 	.word	0x00019595
   1de30:	20003df8 	.word	0x20003df8
   1de34:	20003d1c 	.word	0x20003d1c
   1de38:	0001abaf 	.word	0x0001abaf

0001de3c <vTaskPriorityDisinheritAfterTimeout>:
   1de3c:	b590      	push	{r4, r7, lr}
   1de3e:	b087      	sub	sp, #28
   1de40:	af00      	add	r7, sp, #0
   1de42:	6078      	str	r0, [r7, #4]
   1de44:	6039      	str	r1, [r7, #0]
   1de46:	687b      	ldr	r3, [r7, #4]
   1de48:	613b      	str	r3, [r7, #16]
   1de4a:	2301      	movs	r3, #1
   1de4c:	60fb      	str	r3, [r7, #12]
   1de4e:	687b      	ldr	r3, [r7, #4]
   1de50:	2b00      	cmp	r3, #0
   1de52:	d100      	bne.n	1de56 <vTaskPriorityDisinheritAfterTimeout+0x1a>
   1de54:	e0a4      	b.n	1dfa0 <vTaskPriorityDisinheritAfterTimeout+0x164>
   1de56:	693b      	ldr	r3, [r7, #16]
   1de58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1de5a:	2b00      	cmp	r3, #0
   1de5c:	d101      	bne.n	1de62 <vTaskPriorityDisinheritAfterTimeout+0x26>
   1de5e:	b672      	cpsid	i
   1de60:	e7fe      	b.n	1de60 <vTaskPriorityDisinheritAfterTimeout+0x24>
   1de62:	693b      	ldr	r3, [r7, #16]
   1de64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1de66:	683b      	ldr	r3, [r7, #0]
   1de68:	429a      	cmp	r2, r3
   1de6a:	d202      	bcs.n	1de72 <vTaskPriorityDisinheritAfterTimeout+0x36>
   1de6c:	683b      	ldr	r3, [r7, #0]
   1de6e:	617b      	str	r3, [r7, #20]
   1de70:	e002      	b.n	1de78 <vTaskPriorityDisinheritAfterTimeout+0x3c>
   1de72:	693b      	ldr	r3, [r7, #16]
   1de74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1de76:	617b      	str	r3, [r7, #20]
   1de78:	693b      	ldr	r3, [r7, #16]
   1de7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1de7c:	697b      	ldr	r3, [r7, #20]
   1de7e:	429a      	cmp	r2, r3
   1de80:	d100      	bne.n	1de84 <vTaskPriorityDisinheritAfterTimeout+0x48>
   1de82:	e08d      	b.n	1dfa0 <vTaskPriorityDisinheritAfterTimeout+0x164>
   1de84:	693b      	ldr	r3, [r7, #16]
   1de86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1de88:	68fb      	ldr	r3, [r7, #12]
   1de8a:	429a      	cmp	r2, r3
   1de8c:	d000      	beq.n	1de90 <vTaskPriorityDisinheritAfterTimeout+0x54>
   1de8e:	e087      	b.n	1dfa0 <vTaskPriorityDisinheritAfterTimeout+0x164>
   1de90:	4b45      	ldr	r3, [pc, #276]	; (1dfa8 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
   1de92:	681b      	ldr	r3, [r3, #0]
   1de94:	693a      	ldr	r2, [r7, #16]
   1de96:	429a      	cmp	r2, r3
   1de98:	d101      	bne.n	1de9e <vTaskPriorityDisinheritAfterTimeout+0x62>
   1de9a:	b672      	cpsid	i
   1de9c:	e7fe      	b.n	1de9c <vTaskPriorityDisinheritAfterTimeout+0x60>
   1de9e:	693b      	ldr	r3, [r7, #16]
   1dea0:	0018      	movs	r0, r3
   1dea2:	4b42      	ldr	r3, [pc, #264]	; (1dfac <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1dea4:	4798      	blx	r3
   1dea6:	0003      	movs	r3, r0
   1dea8:	001a      	movs	r2, r3
   1deaa:	4b41      	ldr	r3, [pc, #260]	; (1dfb0 <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1deac:	881b      	ldrh	r3, [r3, #0]
   1deae:	4013      	ands	r3, r2
   1deb0:	b29b      	uxth	r3, r3
   1deb2:	2b00      	cmp	r3, #0
   1deb4:	d023      	beq.n	1defe <vTaskPriorityDisinheritAfterTimeout+0xc2>
   1deb6:	693b      	ldr	r3, [r7, #16]
   1deb8:	0018      	movs	r0, r3
   1deba:	4b3e      	ldr	r3, [pc, #248]	; (1dfb4 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1debc:	4798      	blx	r3
   1debe:	0003      	movs	r3, r0
   1dec0:	b2db      	uxtb	r3, r3
   1dec2:	001c      	movs	r4, r3
   1dec4:	693b      	ldr	r3, [r7, #16]
   1dec6:	0018      	movs	r0, r3
   1dec8:	4b3a      	ldr	r3, [pc, #232]	; (1dfb4 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1deca:	4798      	blx	r3
   1decc:	0003      	movs	r3, r0
   1dece:	b2db      	uxtb	r3, r3
   1ded0:	0019      	movs	r1, r3
   1ded2:	2003      	movs	r0, #3
   1ded4:	4b38      	ldr	r3, [pc, #224]	; (1dfb8 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
   1ded6:	4798      	blx	r3
   1ded8:	0003      	movs	r3, r0
   1deda:	0022      	movs	r2, r4
   1dedc:	2103      	movs	r1, #3
   1dede:	208f      	movs	r0, #143	; 0x8f
   1dee0:	4c36      	ldr	r4, [pc, #216]	; (1dfbc <vTaskPriorityDisinheritAfterTimeout+0x180>)
   1dee2:	47a0      	blx	r4
   1dee4:	693b      	ldr	r3, [r7, #16]
   1dee6:	0018      	movs	r0, r3
   1dee8:	4b32      	ldr	r3, [pc, #200]	; (1dfb4 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1deea:	4798      	blx	r3
   1deec:	0003      	movs	r3, r0
   1deee:	b2d9      	uxtb	r1, r3
   1def0:	693b      	ldr	r3, [r7, #16]
   1def2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1def4:	b2db      	uxtb	r3, r3
   1def6:	001a      	movs	r2, r3
   1def8:	2003      	movs	r0, #3
   1defa:	4b31      	ldr	r3, [pc, #196]	; (1dfc0 <vTaskPriorityDisinheritAfterTimeout+0x184>)
   1defc:	4798      	blx	r3
   1defe:	693b      	ldr	r3, [r7, #16]
   1df00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1df02:	60bb      	str	r3, [r7, #8]
   1df04:	693b      	ldr	r3, [r7, #16]
   1df06:	697a      	ldr	r2, [r7, #20]
   1df08:	62da      	str	r2, [r3, #44]	; 0x2c
   1df0a:	693b      	ldr	r3, [r7, #16]
   1df0c:	699b      	ldr	r3, [r3, #24]
   1df0e:	2b00      	cmp	r3, #0
   1df10:	db04      	blt.n	1df1c <vTaskPriorityDisinheritAfterTimeout+0xe0>
   1df12:	697b      	ldr	r3, [r7, #20]
   1df14:	2205      	movs	r2, #5
   1df16:	1ad2      	subs	r2, r2, r3
   1df18:	693b      	ldr	r3, [r7, #16]
   1df1a:	619a      	str	r2, [r3, #24]
   1df1c:	693b      	ldr	r3, [r7, #16]
   1df1e:	6959      	ldr	r1, [r3, #20]
   1df20:	68ba      	ldr	r2, [r7, #8]
   1df22:	0013      	movs	r3, r2
   1df24:	009b      	lsls	r3, r3, #2
   1df26:	189b      	adds	r3, r3, r2
   1df28:	009b      	lsls	r3, r3, #2
   1df2a:	4a26      	ldr	r2, [pc, #152]	; (1dfc4 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1df2c:	189b      	adds	r3, r3, r2
   1df2e:	4299      	cmp	r1, r3
   1df30:	d101      	bne.n	1df36 <vTaskPriorityDisinheritAfterTimeout+0xfa>
   1df32:	2301      	movs	r3, #1
   1df34:	e000      	b.n	1df38 <vTaskPriorityDisinheritAfterTimeout+0xfc>
   1df36:	2300      	movs	r3, #0
   1df38:	2b00      	cmp	r3, #0
   1df3a:	d031      	beq.n	1dfa0 <vTaskPriorityDisinheritAfterTimeout+0x164>
   1df3c:	693b      	ldr	r3, [r7, #16]
   1df3e:	3304      	adds	r3, #4
   1df40:	0018      	movs	r0, r3
   1df42:	4b21      	ldr	r3, [pc, #132]	; (1dfc8 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
   1df44:	4798      	blx	r3
   1df46:	693b      	ldr	r3, [r7, #16]
   1df48:	0018      	movs	r0, r3
   1df4a:	4b18      	ldr	r3, [pc, #96]	; (1dfac <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1df4c:	4798      	blx	r3
   1df4e:	0003      	movs	r3, r0
   1df50:	001a      	movs	r2, r3
   1df52:	4b17      	ldr	r3, [pc, #92]	; (1dfb0 <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1df54:	881b      	ldrh	r3, [r3, #0]
   1df56:	4013      	ands	r3, r2
   1df58:	b29b      	uxth	r3, r3
   1df5a:	2b00      	cmp	r3, #0
   1df5c:	d008      	beq.n	1df70 <vTaskPriorityDisinheritAfterTimeout+0x134>
   1df5e:	693b      	ldr	r3, [r7, #16]
   1df60:	0018      	movs	r0, r3
   1df62:	4b14      	ldr	r3, [pc, #80]	; (1dfb4 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1df64:	4798      	blx	r3
   1df66:	0003      	movs	r3, r0
   1df68:	b2db      	uxtb	r3, r3
   1df6a:	0018      	movs	r0, r3
   1df6c:	4b17      	ldr	r3, [pc, #92]	; (1dfcc <vTaskPriorityDisinheritAfterTimeout+0x190>)
   1df6e:	4798      	blx	r3
   1df70:	693b      	ldr	r3, [r7, #16]
   1df72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1df74:	4b16      	ldr	r3, [pc, #88]	; (1dfd0 <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1df76:	681b      	ldr	r3, [r3, #0]
   1df78:	429a      	cmp	r2, r3
   1df7a:	d903      	bls.n	1df84 <vTaskPriorityDisinheritAfterTimeout+0x148>
   1df7c:	693b      	ldr	r3, [r7, #16]
   1df7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1df80:	4b13      	ldr	r3, [pc, #76]	; (1dfd0 <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1df82:	601a      	str	r2, [r3, #0]
   1df84:	693b      	ldr	r3, [r7, #16]
   1df86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1df88:	0013      	movs	r3, r2
   1df8a:	009b      	lsls	r3, r3, #2
   1df8c:	189b      	adds	r3, r3, r2
   1df8e:	009b      	lsls	r3, r3, #2
   1df90:	4a0c      	ldr	r2, [pc, #48]	; (1dfc4 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1df92:	189a      	adds	r2, r3, r2
   1df94:	693b      	ldr	r3, [r7, #16]
   1df96:	3304      	adds	r3, #4
   1df98:	0019      	movs	r1, r3
   1df9a:	0010      	movs	r0, r2
   1df9c:	4b0d      	ldr	r3, [pc, #52]	; (1dfd4 <vTaskPriorityDisinheritAfterTimeout+0x198>)
   1df9e:	4798      	blx	r3
   1dfa0:	46c0      	nop			; (mov r8, r8)
   1dfa2:	46bd      	mov	sp, r7
   1dfa4:	b007      	add	sp, #28
   1dfa6:	bd90      	pop	{r4, r7, pc}
   1dfa8:	20003d18 	.word	0x20003d18
   1dfac:	00018de5 	.word	0x00018de5
   1dfb0:	20000104 	.word	0x20000104
   1dfb4:	00018dc5 	.word	0x00018dc5
   1dfb8:	00019d9d 	.word	0x00019d9d
   1dfbc:	0001990d 	.word	0x0001990d
   1dfc0:	00019cf9 	.word	0x00019cf9
   1dfc4:	20003d1c 	.word	0x20003d1c
   1dfc8:	0001ac5f 	.word	0x0001ac5f
   1dfcc:	00019595 	.word	0x00019595
   1dfd0:	20003df8 	.word	0x20003df8
   1dfd4:	0001abaf 	.word	0x0001abaf

0001dfd8 <pvTaskIncrementMutexHeldCount>:
   1dfd8:	b580      	push	{r7, lr}
   1dfda:	af00      	add	r7, sp, #0
   1dfdc:	4b06      	ldr	r3, [pc, #24]	; (1dff8 <pvTaskIncrementMutexHeldCount+0x20>)
   1dfde:	681b      	ldr	r3, [r3, #0]
   1dfe0:	2b00      	cmp	r3, #0
   1dfe2:	d004      	beq.n	1dfee <pvTaskIncrementMutexHeldCount+0x16>
   1dfe4:	4b04      	ldr	r3, [pc, #16]	; (1dff8 <pvTaskIncrementMutexHeldCount+0x20>)
   1dfe6:	681b      	ldr	r3, [r3, #0]
   1dfe8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1dfea:	3201      	adds	r2, #1
   1dfec:	649a      	str	r2, [r3, #72]	; 0x48
   1dfee:	4b02      	ldr	r3, [pc, #8]	; (1dff8 <pvTaskIncrementMutexHeldCount+0x20>)
   1dff0:	681b      	ldr	r3, [r3, #0]
   1dff2:	0018      	movs	r0, r3
   1dff4:	46bd      	mov	sp, r7
   1dff6:	bd80      	pop	{r7, pc}
   1dff8:	20003d18 	.word	0x20003d18

0001dffc <prvAddCurrentTaskToDelayedList>:
   1dffc:	b580      	push	{r7, lr}
   1dffe:	b084      	sub	sp, #16
   1e000:	af00      	add	r7, sp, #0
   1e002:	6078      	str	r0, [r7, #4]
   1e004:	6039      	str	r1, [r7, #0]
   1e006:	4b21      	ldr	r3, [pc, #132]	; (1e08c <prvAddCurrentTaskToDelayedList+0x90>)
   1e008:	681b      	ldr	r3, [r3, #0]
   1e00a:	60fb      	str	r3, [r7, #12]
   1e00c:	4b20      	ldr	r3, [pc, #128]	; (1e090 <prvAddCurrentTaskToDelayedList+0x94>)
   1e00e:	681b      	ldr	r3, [r3, #0]
   1e010:	3304      	adds	r3, #4
   1e012:	0018      	movs	r0, r3
   1e014:	4b1f      	ldr	r3, [pc, #124]	; (1e094 <prvAddCurrentTaskToDelayedList+0x98>)
   1e016:	4798      	blx	r3
   1e018:	687b      	ldr	r3, [r7, #4]
   1e01a:	3301      	adds	r3, #1
   1e01c:	d10b      	bne.n	1e036 <prvAddCurrentTaskToDelayedList+0x3a>
   1e01e:	683b      	ldr	r3, [r7, #0]
   1e020:	2b00      	cmp	r3, #0
   1e022:	d008      	beq.n	1e036 <prvAddCurrentTaskToDelayedList+0x3a>
   1e024:	4b1a      	ldr	r3, [pc, #104]	; (1e090 <prvAddCurrentTaskToDelayedList+0x94>)
   1e026:	681b      	ldr	r3, [r3, #0]
   1e028:	1d1a      	adds	r2, r3, #4
   1e02a:	4b1b      	ldr	r3, [pc, #108]	; (1e098 <prvAddCurrentTaskToDelayedList+0x9c>)
   1e02c:	0011      	movs	r1, r2
   1e02e:	0018      	movs	r0, r3
   1e030:	4b1a      	ldr	r3, [pc, #104]	; (1e09c <prvAddCurrentTaskToDelayedList+0xa0>)
   1e032:	4798      	blx	r3
   1e034:	e026      	b.n	1e084 <prvAddCurrentTaskToDelayedList+0x88>
   1e036:	68fa      	ldr	r2, [r7, #12]
   1e038:	687b      	ldr	r3, [r7, #4]
   1e03a:	18d3      	adds	r3, r2, r3
   1e03c:	60bb      	str	r3, [r7, #8]
   1e03e:	4b14      	ldr	r3, [pc, #80]	; (1e090 <prvAddCurrentTaskToDelayedList+0x94>)
   1e040:	681b      	ldr	r3, [r3, #0]
   1e042:	68ba      	ldr	r2, [r7, #8]
   1e044:	605a      	str	r2, [r3, #4]
   1e046:	68ba      	ldr	r2, [r7, #8]
   1e048:	68fb      	ldr	r3, [r7, #12]
   1e04a:	429a      	cmp	r2, r3
   1e04c:	d209      	bcs.n	1e062 <prvAddCurrentTaskToDelayedList+0x66>
   1e04e:	4b14      	ldr	r3, [pc, #80]	; (1e0a0 <prvAddCurrentTaskToDelayedList+0xa4>)
   1e050:	681a      	ldr	r2, [r3, #0]
   1e052:	4b0f      	ldr	r3, [pc, #60]	; (1e090 <prvAddCurrentTaskToDelayedList+0x94>)
   1e054:	681b      	ldr	r3, [r3, #0]
   1e056:	3304      	adds	r3, #4
   1e058:	0019      	movs	r1, r3
   1e05a:	0010      	movs	r0, r2
   1e05c:	4b11      	ldr	r3, [pc, #68]	; (1e0a4 <prvAddCurrentTaskToDelayedList+0xa8>)
   1e05e:	4798      	blx	r3
   1e060:	e010      	b.n	1e084 <prvAddCurrentTaskToDelayedList+0x88>
   1e062:	4b11      	ldr	r3, [pc, #68]	; (1e0a8 <prvAddCurrentTaskToDelayedList+0xac>)
   1e064:	681a      	ldr	r2, [r3, #0]
   1e066:	4b0a      	ldr	r3, [pc, #40]	; (1e090 <prvAddCurrentTaskToDelayedList+0x94>)
   1e068:	681b      	ldr	r3, [r3, #0]
   1e06a:	3304      	adds	r3, #4
   1e06c:	0019      	movs	r1, r3
   1e06e:	0010      	movs	r0, r2
   1e070:	4b0c      	ldr	r3, [pc, #48]	; (1e0a4 <prvAddCurrentTaskToDelayedList+0xa8>)
   1e072:	4798      	blx	r3
   1e074:	4b0d      	ldr	r3, [pc, #52]	; (1e0ac <prvAddCurrentTaskToDelayedList+0xb0>)
   1e076:	681b      	ldr	r3, [r3, #0]
   1e078:	68ba      	ldr	r2, [r7, #8]
   1e07a:	429a      	cmp	r2, r3
   1e07c:	d202      	bcs.n	1e084 <prvAddCurrentTaskToDelayedList+0x88>
   1e07e:	4b0b      	ldr	r3, [pc, #44]	; (1e0ac <prvAddCurrentTaskToDelayedList+0xb0>)
   1e080:	68ba      	ldr	r2, [r7, #8]
   1e082:	601a      	str	r2, [r3, #0]
   1e084:	46c0      	nop			; (mov r8, r8)
   1e086:	46bd      	mov	sp, r7
   1e088:	b004      	add	sp, #16
   1e08a:	bd80      	pop	{r7, pc}
   1e08c:	20003df4 	.word	0x20003df4
   1e090:	20003d18 	.word	0x20003d18
   1e094:	0001ac5f 	.word	0x0001ac5f
   1e098:	20003ddc 	.word	0x20003ddc
   1e09c:	0001abaf 	.word	0x0001abaf
   1e0a0:	20003dac 	.word	0x20003dac
   1e0a4:	0001abf3 	.word	0x0001abf3
   1e0a8:	20003da8 	.word	0x20003da8
   1e0ac:	20003e10 	.word	0x20003e10

0001e0b0 <xTimerCreateTimerTask>:
   1e0b0:	b590      	push	{r4, r7, lr}
   1e0b2:	b085      	sub	sp, #20
   1e0b4:	af02      	add	r7, sp, #8
   1e0b6:	2300      	movs	r3, #0
   1e0b8:	607b      	str	r3, [r7, #4]
   1e0ba:	4b0e      	ldr	r3, [pc, #56]	; (1e0f4 <xTimerCreateTimerTask+0x44>)
   1e0bc:	4798      	blx	r3
   1e0be:	4b0e      	ldr	r3, [pc, #56]	; (1e0f8 <xTimerCreateTimerTask+0x48>)
   1e0c0:	681b      	ldr	r3, [r3, #0]
   1e0c2:	2b00      	cmp	r3, #0
   1e0c4:	d00b      	beq.n	1e0de <xTimerCreateTimerTask+0x2e>
   1e0c6:	490d      	ldr	r1, [pc, #52]	; (1e0fc <xTimerCreateTimerTask+0x4c>)
   1e0c8:	480d      	ldr	r0, [pc, #52]	; (1e100 <xTimerCreateTimerTask+0x50>)
   1e0ca:	4b0e      	ldr	r3, [pc, #56]	; (1e104 <xTimerCreateTimerTask+0x54>)
   1e0cc:	9301      	str	r3, [sp, #4]
   1e0ce:	2302      	movs	r3, #2
   1e0d0:	9300      	str	r3, [sp, #0]
   1e0d2:	2300      	movs	r3, #0
   1e0d4:	2280      	movs	r2, #128	; 0x80
   1e0d6:	4c0c      	ldr	r4, [pc, #48]	; (1e108 <xTimerCreateTimerTask+0x58>)
   1e0d8:	47a0      	blx	r4
   1e0da:	0003      	movs	r3, r0
   1e0dc:	607b      	str	r3, [r7, #4]
   1e0de:	687b      	ldr	r3, [r7, #4]
   1e0e0:	2b00      	cmp	r3, #0
   1e0e2:	d101      	bne.n	1e0e8 <xTimerCreateTimerTask+0x38>
   1e0e4:	b672      	cpsid	i
   1e0e6:	e7fe      	b.n	1e0e6 <xTimerCreateTimerTask+0x36>
   1e0e8:	687b      	ldr	r3, [r7, #4]
   1e0ea:	0018      	movs	r0, r3
   1e0ec:	46bd      	mov	sp, r7
   1e0ee:	b003      	add	sp, #12
   1e0f0:	bd90      	pop	{r4, r7, pc}
   1e0f2:	46c0      	nop			; (mov r8, r8)
   1e0f4:	0001e5f9 	.word	0x0001e5f9
   1e0f8:	20003e4c 	.word	0x20003e4c
   1e0fc:	00038fec 	.word	0x00038fec
   1e100:	0001e231 	.word	0x0001e231
   1e104:	20003e50 	.word	0x20003e50
   1e108:	0001ca49 	.word	0x0001ca49

0001e10c <xTimerGenericCommand>:
   1e10c:	b590      	push	{r4, r7, lr}
   1e10e:	b089      	sub	sp, #36	; 0x24
   1e110:	af00      	add	r7, sp, #0
   1e112:	60f8      	str	r0, [r7, #12]
   1e114:	60b9      	str	r1, [r7, #8]
   1e116:	607a      	str	r2, [r7, #4]
   1e118:	603b      	str	r3, [r7, #0]
   1e11a:	2300      	movs	r3, #0
   1e11c:	61fb      	str	r3, [r7, #28]
   1e11e:	68fb      	ldr	r3, [r7, #12]
   1e120:	2b00      	cmp	r3, #0
   1e122:	d101      	bne.n	1e128 <xTimerGenericCommand+0x1c>
   1e124:	b672      	cpsid	i
   1e126:	e7fe      	b.n	1e126 <xTimerGenericCommand+0x1a>
   1e128:	4b1e      	ldr	r3, [pc, #120]	; (1e1a4 <xTimerGenericCommand+0x98>)
   1e12a:	681b      	ldr	r3, [r3, #0]
   1e12c:	2b00      	cmp	r3, #0
   1e12e:	d033      	beq.n	1e198 <xTimerGenericCommand+0x8c>
   1e130:	2310      	movs	r3, #16
   1e132:	18fb      	adds	r3, r7, r3
   1e134:	68ba      	ldr	r2, [r7, #8]
   1e136:	601a      	str	r2, [r3, #0]
   1e138:	2310      	movs	r3, #16
   1e13a:	18fb      	adds	r3, r7, r3
   1e13c:	687a      	ldr	r2, [r7, #4]
   1e13e:	605a      	str	r2, [r3, #4]
   1e140:	2310      	movs	r3, #16
   1e142:	18fb      	adds	r3, r7, r3
   1e144:	68fa      	ldr	r2, [r7, #12]
   1e146:	609a      	str	r2, [r3, #8]
   1e148:	68bb      	ldr	r3, [r7, #8]
   1e14a:	2b05      	cmp	r3, #5
   1e14c:	dc1a      	bgt.n	1e184 <xTimerGenericCommand+0x78>
   1e14e:	4b16      	ldr	r3, [pc, #88]	; (1e1a8 <xTimerGenericCommand+0x9c>)
   1e150:	4798      	blx	r3
   1e152:	0003      	movs	r3, r0
   1e154:	2b02      	cmp	r3, #2
   1e156:	d10a      	bne.n	1e16e <xTimerGenericCommand+0x62>
   1e158:	4b12      	ldr	r3, [pc, #72]	; (1e1a4 <xTimerGenericCommand+0x98>)
   1e15a:	6818      	ldr	r0, [r3, #0]
   1e15c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1e15e:	2310      	movs	r3, #16
   1e160:	18f9      	adds	r1, r7, r3
   1e162:	2300      	movs	r3, #0
   1e164:	4c11      	ldr	r4, [pc, #68]	; (1e1ac <xTimerGenericCommand+0xa0>)
   1e166:	47a0      	blx	r4
   1e168:	0003      	movs	r3, r0
   1e16a:	61fb      	str	r3, [r7, #28]
   1e16c:	e014      	b.n	1e198 <xTimerGenericCommand+0x8c>
   1e16e:	4b0d      	ldr	r3, [pc, #52]	; (1e1a4 <xTimerGenericCommand+0x98>)
   1e170:	6818      	ldr	r0, [r3, #0]
   1e172:	2310      	movs	r3, #16
   1e174:	18f9      	adds	r1, r7, r3
   1e176:	2300      	movs	r3, #0
   1e178:	2200      	movs	r2, #0
   1e17a:	4c0c      	ldr	r4, [pc, #48]	; (1e1ac <xTimerGenericCommand+0xa0>)
   1e17c:	47a0      	blx	r4
   1e17e:	0003      	movs	r3, r0
   1e180:	61fb      	str	r3, [r7, #28]
   1e182:	e009      	b.n	1e198 <xTimerGenericCommand+0x8c>
   1e184:	4b07      	ldr	r3, [pc, #28]	; (1e1a4 <xTimerGenericCommand+0x98>)
   1e186:	6818      	ldr	r0, [r3, #0]
   1e188:	683a      	ldr	r2, [r7, #0]
   1e18a:	2310      	movs	r3, #16
   1e18c:	18f9      	adds	r1, r7, r3
   1e18e:	2300      	movs	r3, #0
   1e190:	4c07      	ldr	r4, [pc, #28]	; (1e1b0 <xTimerGenericCommand+0xa4>)
   1e192:	47a0      	blx	r4
   1e194:	0003      	movs	r3, r0
   1e196:	61fb      	str	r3, [r7, #28]
   1e198:	69fb      	ldr	r3, [r7, #28]
   1e19a:	0018      	movs	r0, r3
   1e19c:	46bd      	mov	sp, r7
   1e19e:	b009      	add	sp, #36	; 0x24
   1e1a0:	bd90      	pop	{r4, r7, pc}
   1e1a2:	46c0      	nop			; (mov r8, r8)
   1e1a4:	20003e4c 	.word	0x20003e4c
   1e1a8:	0001db0d 	.word	0x0001db0d
   1e1ac:	0001b381 	.word	0x0001b381
   1e1b0:	0001b7e1 	.word	0x0001b7e1

0001e1b4 <prvProcessExpiredTimer>:
   1e1b4:	b590      	push	{r4, r7, lr}
   1e1b6:	b087      	sub	sp, #28
   1e1b8:	af02      	add	r7, sp, #8
   1e1ba:	6078      	str	r0, [r7, #4]
   1e1bc:	6039      	str	r1, [r7, #0]
   1e1be:	4b18      	ldr	r3, [pc, #96]	; (1e220 <prvProcessExpiredTimer+0x6c>)
   1e1c0:	681b      	ldr	r3, [r3, #0]
   1e1c2:	68db      	ldr	r3, [r3, #12]
   1e1c4:	68db      	ldr	r3, [r3, #12]
   1e1c6:	60fb      	str	r3, [r7, #12]
   1e1c8:	68fb      	ldr	r3, [r7, #12]
   1e1ca:	3304      	adds	r3, #4
   1e1cc:	0018      	movs	r0, r3
   1e1ce:	4b15      	ldr	r3, [pc, #84]	; (1e224 <prvProcessExpiredTimer+0x70>)
   1e1d0:	4798      	blx	r3
   1e1d2:	68fb      	ldr	r3, [r7, #12]
   1e1d4:	69db      	ldr	r3, [r3, #28]
   1e1d6:	2b01      	cmp	r3, #1
   1e1d8:	d119      	bne.n	1e20e <prvProcessExpiredTimer+0x5a>
   1e1da:	68fb      	ldr	r3, [r7, #12]
   1e1dc:	699a      	ldr	r2, [r3, #24]
   1e1de:	687b      	ldr	r3, [r7, #4]
   1e1e0:	18d1      	adds	r1, r2, r3
   1e1e2:	687b      	ldr	r3, [r7, #4]
   1e1e4:	683a      	ldr	r2, [r7, #0]
   1e1e6:	68f8      	ldr	r0, [r7, #12]
   1e1e8:	4c0f      	ldr	r4, [pc, #60]	; (1e228 <prvProcessExpiredTimer+0x74>)
   1e1ea:	47a0      	blx	r4
   1e1ec:	1e03      	subs	r3, r0, #0
   1e1ee:	d00e      	beq.n	1e20e <prvProcessExpiredTimer+0x5a>
   1e1f0:	687a      	ldr	r2, [r7, #4]
   1e1f2:	68f8      	ldr	r0, [r7, #12]
   1e1f4:	2300      	movs	r3, #0
   1e1f6:	9300      	str	r3, [sp, #0]
   1e1f8:	2300      	movs	r3, #0
   1e1fa:	2100      	movs	r1, #0
   1e1fc:	4c0b      	ldr	r4, [pc, #44]	; (1e22c <prvProcessExpiredTimer+0x78>)
   1e1fe:	47a0      	blx	r4
   1e200:	0003      	movs	r3, r0
   1e202:	60bb      	str	r3, [r7, #8]
   1e204:	68bb      	ldr	r3, [r7, #8]
   1e206:	2b00      	cmp	r3, #0
   1e208:	d101      	bne.n	1e20e <prvProcessExpiredTimer+0x5a>
   1e20a:	b672      	cpsid	i
   1e20c:	e7fe      	b.n	1e20c <prvProcessExpiredTimer+0x58>
   1e20e:	68fb      	ldr	r3, [r7, #12]
   1e210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1e212:	68fa      	ldr	r2, [r7, #12]
   1e214:	0010      	movs	r0, r2
   1e216:	4798      	blx	r3
   1e218:	46c0      	nop			; (mov r8, r8)
   1e21a:	46bd      	mov	sp, r7
   1e21c:	b005      	add	sp, #20
   1e21e:	bd90      	pop	{r4, r7, pc}
   1e220:	20003e44 	.word	0x20003e44
   1e224:	0001ac5f 	.word	0x0001ac5f
   1e228:	0001e399 	.word	0x0001e399
   1e22c:	0001e10d 	.word	0x0001e10d

0001e230 <prvTimerTask>:
   1e230:	b580      	push	{r7, lr}
   1e232:	b084      	sub	sp, #16
   1e234:	af00      	add	r7, sp, #0
   1e236:	6078      	str	r0, [r7, #4]
   1e238:	4b08      	ldr	r3, [pc, #32]	; (1e25c <prvTimerTask+0x2c>)
   1e23a:	4798      	blx	r3
   1e23c:	2308      	movs	r3, #8
   1e23e:	18fb      	adds	r3, r7, r3
   1e240:	0018      	movs	r0, r3
   1e242:	4b07      	ldr	r3, [pc, #28]	; (1e260 <prvTimerTask+0x30>)
   1e244:	4798      	blx	r3
   1e246:	0003      	movs	r3, r0
   1e248:	60fb      	str	r3, [r7, #12]
   1e24a:	68ba      	ldr	r2, [r7, #8]
   1e24c:	68fb      	ldr	r3, [r7, #12]
   1e24e:	0011      	movs	r1, r2
   1e250:	0018      	movs	r0, r3
   1e252:	4b04      	ldr	r3, [pc, #16]	; (1e264 <prvTimerTask+0x34>)
   1e254:	4798      	blx	r3
   1e256:	4b04      	ldr	r3, [pc, #16]	; (1e268 <prvTimerTask+0x38>)
   1e258:	4798      	blx	r3
   1e25a:	e7ef      	b.n	1e23c <prvTimerTask+0xc>
   1e25c:	00033465 	.word	0x00033465
   1e260:	0001e311 	.word	0x0001e311
   1e264:	0001e26d 	.word	0x0001e26d
   1e268:	0001e421 	.word	0x0001e421

0001e26c <prvProcessTimerOrBlockTask>:
   1e26c:	b580      	push	{r7, lr}
   1e26e:	b084      	sub	sp, #16
   1e270:	af00      	add	r7, sp, #0
   1e272:	6078      	str	r0, [r7, #4]
   1e274:	6039      	str	r1, [r7, #0]
   1e276:	4b1e      	ldr	r3, [pc, #120]	; (1e2f0 <prvProcessTimerOrBlockTask+0x84>)
   1e278:	4798      	blx	r3
   1e27a:	2308      	movs	r3, #8
   1e27c:	18fb      	adds	r3, r7, r3
   1e27e:	0018      	movs	r0, r3
   1e280:	4b1c      	ldr	r3, [pc, #112]	; (1e2f4 <prvProcessTimerOrBlockTask+0x88>)
   1e282:	4798      	blx	r3
   1e284:	0003      	movs	r3, r0
   1e286:	60fb      	str	r3, [r7, #12]
   1e288:	68bb      	ldr	r3, [r7, #8]
   1e28a:	2b00      	cmp	r3, #0
   1e28c:	d129      	bne.n	1e2e2 <prvProcessTimerOrBlockTask+0x76>
   1e28e:	683b      	ldr	r3, [r7, #0]
   1e290:	2b00      	cmp	r3, #0
   1e292:	d10c      	bne.n	1e2ae <prvProcessTimerOrBlockTask+0x42>
   1e294:	687a      	ldr	r2, [r7, #4]
   1e296:	68fb      	ldr	r3, [r7, #12]
   1e298:	429a      	cmp	r2, r3
   1e29a:	d808      	bhi.n	1e2ae <prvProcessTimerOrBlockTask+0x42>
   1e29c:	4b16      	ldr	r3, [pc, #88]	; (1e2f8 <prvProcessTimerOrBlockTask+0x8c>)
   1e29e:	4798      	blx	r3
   1e2a0:	68fa      	ldr	r2, [r7, #12]
   1e2a2:	687b      	ldr	r3, [r7, #4]
   1e2a4:	0011      	movs	r1, r2
   1e2a6:	0018      	movs	r0, r3
   1e2a8:	4b14      	ldr	r3, [pc, #80]	; (1e2fc <prvProcessTimerOrBlockTask+0x90>)
   1e2aa:	4798      	blx	r3
   1e2ac:	e01b      	b.n	1e2e6 <prvProcessTimerOrBlockTask+0x7a>
   1e2ae:	683b      	ldr	r3, [r7, #0]
   1e2b0:	2b00      	cmp	r3, #0
   1e2b2:	d006      	beq.n	1e2c2 <prvProcessTimerOrBlockTask+0x56>
   1e2b4:	4b12      	ldr	r3, [pc, #72]	; (1e300 <prvProcessTimerOrBlockTask+0x94>)
   1e2b6:	681b      	ldr	r3, [r3, #0]
   1e2b8:	681b      	ldr	r3, [r3, #0]
   1e2ba:	425a      	negs	r2, r3
   1e2bc:	4153      	adcs	r3, r2
   1e2be:	b2db      	uxtb	r3, r3
   1e2c0:	603b      	str	r3, [r7, #0]
   1e2c2:	4b10      	ldr	r3, [pc, #64]	; (1e304 <prvProcessTimerOrBlockTask+0x98>)
   1e2c4:	6818      	ldr	r0, [r3, #0]
   1e2c6:	687a      	ldr	r2, [r7, #4]
   1e2c8:	68fb      	ldr	r3, [r7, #12]
   1e2ca:	1ad3      	subs	r3, r2, r3
   1e2cc:	683a      	ldr	r2, [r7, #0]
   1e2ce:	0019      	movs	r1, r3
   1e2d0:	4b0d      	ldr	r3, [pc, #52]	; (1e308 <prvProcessTimerOrBlockTask+0x9c>)
   1e2d2:	4798      	blx	r3
   1e2d4:	4b08      	ldr	r3, [pc, #32]	; (1e2f8 <prvProcessTimerOrBlockTask+0x8c>)
   1e2d6:	4798      	blx	r3
   1e2d8:	1e03      	subs	r3, r0, #0
   1e2da:	d104      	bne.n	1e2e6 <prvProcessTimerOrBlockTask+0x7a>
   1e2dc:	4b0b      	ldr	r3, [pc, #44]	; (1e30c <prvProcessTimerOrBlockTask+0xa0>)
   1e2de:	4798      	blx	r3
   1e2e0:	e001      	b.n	1e2e6 <prvProcessTimerOrBlockTask+0x7a>
   1e2e2:	4b05      	ldr	r3, [pc, #20]	; (1e2f8 <prvProcessTimerOrBlockTask+0x8c>)
   1e2e4:	4798      	blx	r3
   1e2e6:	46c0      	nop			; (mov r8, r8)
   1e2e8:	46bd      	mov	sp, r7
   1e2ea:	b004      	add	sp, #16
   1e2ec:	bd80      	pop	{r7, pc}
   1e2ee:	46c0      	nop			; (mov r8, r8)
   1e2f0:	0001d0a5 	.word	0x0001d0a5
   1e2f4:	0001e351 	.word	0x0001e351
   1e2f8:	0001d0bd 	.word	0x0001d0bd
   1e2fc:	0001e1b5 	.word	0x0001e1b5
   1e300:	20003e48 	.word	0x20003e48
   1e304:	20003e4c 	.word	0x20003e4c
   1e308:	0001c845 	.word	0x0001c845
   1e30c:	0001add1 	.word	0x0001add1

0001e310 <prvGetNextExpireTime>:
   1e310:	b580      	push	{r7, lr}
   1e312:	b084      	sub	sp, #16
   1e314:	af00      	add	r7, sp, #0
   1e316:	6078      	str	r0, [r7, #4]
   1e318:	4b0c      	ldr	r3, [pc, #48]	; (1e34c <prvGetNextExpireTime+0x3c>)
   1e31a:	681b      	ldr	r3, [r3, #0]
   1e31c:	681b      	ldr	r3, [r3, #0]
   1e31e:	425a      	negs	r2, r3
   1e320:	4153      	adcs	r3, r2
   1e322:	b2db      	uxtb	r3, r3
   1e324:	001a      	movs	r2, r3
   1e326:	687b      	ldr	r3, [r7, #4]
   1e328:	601a      	str	r2, [r3, #0]
   1e32a:	687b      	ldr	r3, [r7, #4]
   1e32c:	681b      	ldr	r3, [r3, #0]
   1e32e:	2b00      	cmp	r3, #0
   1e330:	d105      	bne.n	1e33e <prvGetNextExpireTime+0x2e>
   1e332:	4b06      	ldr	r3, [pc, #24]	; (1e34c <prvGetNextExpireTime+0x3c>)
   1e334:	681b      	ldr	r3, [r3, #0]
   1e336:	68db      	ldr	r3, [r3, #12]
   1e338:	681b      	ldr	r3, [r3, #0]
   1e33a:	60fb      	str	r3, [r7, #12]
   1e33c:	e001      	b.n	1e342 <prvGetNextExpireTime+0x32>
   1e33e:	2300      	movs	r3, #0
   1e340:	60fb      	str	r3, [r7, #12]
   1e342:	68fb      	ldr	r3, [r7, #12]
   1e344:	0018      	movs	r0, r3
   1e346:	46bd      	mov	sp, r7
   1e348:	b004      	add	sp, #16
   1e34a:	bd80      	pop	{r7, pc}
   1e34c:	20003e44 	.word	0x20003e44

0001e350 <prvSampleTimeNow>:
   1e350:	b580      	push	{r7, lr}
   1e352:	b084      	sub	sp, #16
   1e354:	af00      	add	r7, sp, #0
   1e356:	6078      	str	r0, [r7, #4]
   1e358:	4b0c      	ldr	r3, [pc, #48]	; (1e38c <prvSampleTimeNow+0x3c>)
   1e35a:	4798      	blx	r3
   1e35c:	0003      	movs	r3, r0
   1e35e:	60fb      	str	r3, [r7, #12]
   1e360:	4b0b      	ldr	r3, [pc, #44]	; (1e390 <prvSampleTimeNow+0x40>)
   1e362:	681b      	ldr	r3, [r3, #0]
   1e364:	68fa      	ldr	r2, [r7, #12]
   1e366:	429a      	cmp	r2, r3
   1e368:	d205      	bcs.n	1e376 <prvSampleTimeNow+0x26>
   1e36a:	4b0a      	ldr	r3, [pc, #40]	; (1e394 <prvSampleTimeNow+0x44>)
   1e36c:	4798      	blx	r3
   1e36e:	687b      	ldr	r3, [r7, #4]
   1e370:	2201      	movs	r2, #1
   1e372:	601a      	str	r2, [r3, #0]
   1e374:	e002      	b.n	1e37c <prvSampleTimeNow+0x2c>
   1e376:	687b      	ldr	r3, [r7, #4]
   1e378:	2200      	movs	r2, #0
   1e37a:	601a      	str	r2, [r3, #0]
   1e37c:	4b04      	ldr	r3, [pc, #16]	; (1e390 <prvSampleTimeNow+0x40>)
   1e37e:	68fa      	ldr	r2, [r7, #12]
   1e380:	601a      	str	r2, [r3, #0]
   1e382:	68fb      	ldr	r3, [r7, #12]
   1e384:	0018      	movs	r0, r3
   1e386:	46bd      	mov	sp, r7
   1e388:	b004      	add	sp, #16
   1e38a:	bd80      	pop	{r7, pc}
   1e38c:	0001d22d 	.word	0x0001d22d
   1e390:	20003e54 	.word	0x20003e54
   1e394:	0001e539 	.word	0x0001e539

0001e398 <prvInsertTimerInActiveList>:
   1e398:	b580      	push	{r7, lr}
   1e39a:	b086      	sub	sp, #24
   1e39c:	af00      	add	r7, sp, #0
   1e39e:	60f8      	str	r0, [r7, #12]
   1e3a0:	60b9      	str	r1, [r7, #8]
   1e3a2:	607a      	str	r2, [r7, #4]
   1e3a4:	603b      	str	r3, [r7, #0]
   1e3a6:	2300      	movs	r3, #0
   1e3a8:	617b      	str	r3, [r7, #20]
   1e3aa:	68fb      	ldr	r3, [r7, #12]
   1e3ac:	68ba      	ldr	r2, [r7, #8]
   1e3ae:	605a      	str	r2, [r3, #4]
   1e3b0:	68fb      	ldr	r3, [r7, #12]
   1e3b2:	68fa      	ldr	r2, [r7, #12]
   1e3b4:	611a      	str	r2, [r3, #16]
   1e3b6:	68ba      	ldr	r2, [r7, #8]
   1e3b8:	687b      	ldr	r3, [r7, #4]
   1e3ba:	429a      	cmp	r2, r3
   1e3bc:	d812      	bhi.n	1e3e4 <prvInsertTimerInActiveList+0x4c>
   1e3be:	687a      	ldr	r2, [r7, #4]
   1e3c0:	683b      	ldr	r3, [r7, #0]
   1e3c2:	1ad2      	subs	r2, r2, r3
   1e3c4:	68fb      	ldr	r3, [r7, #12]
   1e3c6:	699b      	ldr	r3, [r3, #24]
   1e3c8:	429a      	cmp	r2, r3
   1e3ca:	d302      	bcc.n	1e3d2 <prvInsertTimerInActiveList+0x3a>
   1e3cc:	2301      	movs	r3, #1
   1e3ce:	617b      	str	r3, [r7, #20]
   1e3d0:	e01b      	b.n	1e40a <prvInsertTimerInActiveList+0x72>
   1e3d2:	4b10      	ldr	r3, [pc, #64]	; (1e414 <prvInsertTimerInActiveList+0x7c>)
   1e3d4:	681a      	ldr	r2, [r3, #0]
   1e3d6:	68fb      	ldr	r3, [r7, #12]
   1e3d8:	3304      	adds	r3, #4
   1e3da:	0019      	movs	r1, r3
   1e3dc:	0010      	movs	r0, r2
   1e3de:	4b0e      	ldr	r3, [pc, #56]	; (1e418 <prvInsertTimerInActiveList+0x80>)
   1e3e0:	4798      	blx	r3
   1e3e2:	e012      	b.n	1e40a <prvInsertTimerInActiveList+0x72>
   1e3e4:	687a      	ldr	r2, [r7, #4]
   1e3e6:	683b      	ldr	r3, [r7, #0]
   1e3e8:	429a      	cmp	r2, r3
   1e3ea:	d206      	bcs.n	1e3fa <prvInsertTimerInActiveList+0x62>
   1e3ec:	68ba      	ldr	r2, [r7, #8]
   1e3ee:	683b      	ldr	r3, [r7, #0]
   1e3f0:	429a      	cmp	r2, r3
   1e3f2:	d302      	bcc.n	1e3fa <prvInsertTimerInActiveList+0x62>
   1e3f4:	2301      	movs	r3, #1
   1e3f6:	617b      	str	r3, [r7, #20]
   1e3f8:	e007      	b.n	1e40a <prvInsertTimerInActiveList+0x72>
   1e3fa:	4b08      	ldr	r3, [pc, #32]	; (1e41c <prvInsertTimerInActiveList+0x84>)
   1e3fc:	681a      	ldr	r2, [r3, #0]
   1e3fe:	68fb      	ldr	r3, [r7, #12]
   1e400:	3304      	adds	r3, #4
   1e402:	0019      	movs	r1, r3
   1e404:	0010      	movs	r0, r2
   1e406:	4b04      	ldr	r3, [pc, #16]	; (1e418 <prvInsertTimerInActiveList+0x80>)
   1e408:	4798      	blx	r3
   1e40a:	697b      	ldr	r3, [r7, #20]
   1e40c:	0018      	movs	r0, r3
   1e40e:	46bd      	mov	sp, r7
   1e410:	b006      	add	sp, #24
   1e412:	bd80      	pop	{r7, pc}
   1e414:	20003e48 	.word	0x20003e48
   1e418:	0001abf3 	.word	0x0001abf3
   1e41c:	20003e44 	.word	0x20003e44

0001e420 <prvProcessReceivedCommands>:
   1e420:	b590      	push	{r4, r7, lr}
   1e422:	b08b      	sub	sp, #44	; 0x2c
   1e424:	af02      	add	r7, sp, #8
   1e426:	e068      	b.n	1e4fa <prvProcessReceivedCommands+0xda>
   1e428:	2308      	movs	r3, #8
   1e42a:	18fb      	adds	r3, r7, r3
   1e42c:	681b      	ldr	r3, [r3, #0]
   1e42e:	2b00      	cmp	r3, #0
   1e430:	db63      	blt.n	1e4fa <prvProcessReceivedCommands+0xda>
   1e432:	2308      	movs	r3, #8
   1e434:	18fb      	adds	r3, r7, r3
   1e436:	689b      	ldr	r3, [r3, #8]
   1e438:	61fb      	str	r3, [r7, #28]
   1e43a:	69fb      	ldr	r3, [r7, #28]
   1e43c:	695b      	ldr	r3, [r3, #20]
   1e43e:	2b00      	cmp	r3, #0
   1e440:	d004      	beq.n	1e44c <prvProcessReceivedCommands+0x2c>
   1e442:	69fb      	ldr	r3, [r7, #28]
   1e444:	3304      	adds	r3, #4
   1e446:	0018      	movs	r0, r3
   1e448:	4b33      	ldr	r3, [pc, #204]	; (1e518 <prvProcessReceivedCommands+0xf8>)
   1e44a:	4798      	blx	r3
   1e44c:	1d3b      	adds	r3, r7, #4
   1e44e:	0018      	movs	r0, r3
   1e450:	4b32      	ldr	r3, [pc, #200]	; (1e51c <prvProcessReceivedCommands+0xfc>)
   1e452:	4798      	blx	r3
   1e454:	0003      	movs	r3, r0
   1e456:	61bb      	str	r3, [r7, #24]
   1e458:	2308      	movs	r3, #8
   1e45a:	18fb      	adds	r3, r7, r3
   1e45c:	681b      	ldr	r3, [r3, #0]
   1e45e:	2b09      	cmp	r3, #9
   1e460:	d84a      	bhi.n	1e4f8 <prvProcessReceivedCommands+0xd8>
   1e462:	009a      	lsls	r2, r3, #2
   1e464:	4b2e      	ldr	r3, [pc, #184]	; (1e520 <prvProcessReceivedCommands+0x100>)
   1e466:	18d3      	adds	r3, r2, r3
   1e468:	681b      	ldr	r3, [r3, #0]
   1e46a:	469f      	mov	pc, r3
   1e46c:	2308      	movs	r3, #8
   1e46e:	18fb      	adds	r3, r7, r3
   1e470:	685a      	ldr	r2, [r3, #4]
   1e472:	69fb      	ldr	r3, [r7, #28]
   1e474:	699b      	ldr	r3, [r3, #24]
   1e476:	18d1      	adds	r1, r2, r3
   1e478:	2308      	movs	r3, #8
   1e47a:	18fb      	adds	r3, r7, r3
   1e47c:	685b      	ldr	r3, [r3, #4]
   1e47e:	69ba      	ldr	r2, [r7, #24]
   1e480:	69f8      	ldr	r0, [r7, #28]
   1e482:	4c28      	ldr	r4, [pc, #160]	; (1e524 <prvProcessReceivedCommands+0x104>)
   1e484:	47a0      	blx	r4
   1e486:	1e03      	subs	r3, r0, #0
   1e488:	d037      	beq.n	1e4fa <prvProcessReceivedCommands+0xda>
   1e48a:	69fb      	ldr	r3, [r7, #28]
   1e48c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1e48e:	69fa      	ldr	r2, [r7, #28]
   1e490:	0010      	movs	r0, r2
   1e492:	4798      	blx	r3
   1e494:	69fb      	ldr	r3, [r7, #28]
   1e496:	69db      	ldr	r3, [r3, #28]
   1e498:	2b01      	cmp	r3, #1
   1e49a:	d12e      	bne.n	1e4fa <prvProcessReceivedCommands+0xda>
   1e49c:	2308      	movs	r3, #8
   1e49e:	18fb      	adds	r3, r7, r3
   1e4a0:	685a      	ldr	r2, [r3, #4]
   1e4a2:	69fb      	ldr	r3, [r7, #28]
   1e4a4:	699b      	ldr	r3, [r3, #24]
   1e4a6:	18d2      	adds	r2, r2, r3
   1e4a8:	69f8      	ldr	r0, [r7, #28]
   1e4aa:	2300      	movs	r3, #0
   1e4ac:	9300      	str	r3, [sp, #0]
   1e4ae:	2300      	movs	r3, #0
   1e4b0:	2100      	movs	r1, #0
   1e4b2:	4c1d      	ldr	r4, [pc, #116]	; (1e528 <prvProcessReceivedCommands+0x108>)
   1e4b4:	47a0      	blx	r4
   1e4b6:	0003      	movs	r3, r0
   1e4b8:	617b      	str	r3, [r7, #20]
   1e4ba:	697b      	ldr	r3, [r7, #20]
   1e4bc:	2b00      	cmp	r3, #0
   1e4be:	d11c      	bne.n	1e4fa <prvProcessReceivedCommands+0xda>
   1e4c0:	b672      	cpsid	i
   1e4c2:	e7fe      	b.n	1e4c2 <prvProcessReceivedCommands+0xa2>
   1e4c4:	2308      	movs	r3, #8
   1e4c6:	18fb      	adds	r3, r7, r3
   1e4c8:	685a      	ldr	r2, [r3, #4]
   1e4ca:	69fb      	ldr	r3, [r7, #28]
   1e4cc:	619a      	str	r2, [r3, #24]
   1e4ce:	69fb      	ldr	r3, [r7, #28]
   1e4d0:	699b      	ldr	r3, [r3, #24]
   1e4d2:	2b00      	cmp	r3, #0
   1e4d4:	d101      	bne.n	1e4da <prvProcessReceivedCommands+0xba>
   1e4d6:	b672      	cpsid	i
   1e4d8:	e7fe      	b.n	1e4d8 <prvProcessReceivedCommands+0xb8>
   1e4da:	69fb      	ldr	r3, [r7, #28]
   1e4dc:	699a      	ldr	r2, [r3, #24]
   1e4de:	69bb      	ldr	r3, [r7, #24]
   1e4e0:	18d1      	adds	r1, r2, r3
   1e4e2:	69bb      	ldr	r3, [r7, #24]
   1e4e4:	69ba      	ldr	r2, [r7, #24]
   1e4e6:	69f8      	ldr	r0, [r7, #28]
   1e4e8:	4c0e      	ldr	r4, [pc, #56]	; (1e524 <prvProcessReceivedCommands+0x104>)
   1e4ea:	47a0      	blx	r4
   1e4ec:	e005      	b.n	1e4fa <prvProcessReceivedCommands+0xda>
   1e4ee:	69fb      	ldr	r3, [r7, #28]
   1e4f0:	0018      	movs	r0, r3
   1e4f2:	4b0e      	ldr	r3, [pc, #56]	; (1e52c <prvProcessReceivedCommands+0x10c>)
   1e4f4:	4798      	blx	r3
   1e4f6:	e000      	b.n	1e4fa <prvProcessReceivedCommands+0xda>
   1e4f8:	46c0      	nop			; (mov r8, r8)
   1e4fa:	4b0d      	ldr	r3, [pc, #52]	; (1e530 <prvProcessReceivedCommands+0x110>)
   1e4fc:	681b      	ldr	r3, [r3, #0]
   1e4fe:	2208      	movs	r2, #8
   1e500:	18b9      	adds	r1, r7, r2
   1e502:	2200      	movs	r2, #0
   1e504:	0018      	movs	r0, r3
   1e506:	4b0b      	ldr	r3, [pc, #44]	; (1e534 <prvProcessReceivedCommands+0x114>)
   1e508:	4798      	blx	r3
   1e50a:	1e03      	subs	r3, r0, #0
   1e50c:	d18c      	bne.n	1e428 <prvProcessReceivedCommands+0x8>
   1e50e:	46c0      	nop			; (mov r8, r8)
   1e510:	46bd      	mov	sp, r7
   1e512:	b009      	add	sp, #36	; 0x24
   1e514:	bd90      	pop	{r4, r7, pc}
   1e516:	46c0      	nop			; (mov r8, r8)
   1e518:	0001ac5f 	.word	0x0001ac5f
   1e51c:	0001e351 	.word	0x0001e351
   1e520:	00038ff4 	.word	0x00038ff4
   1e524:	0001e399 	.word	0x0001e399
   1e528:	0001e10d 	.word	0x0001e10d
   1e52c:	0001afe5 	.word	0x0001afe5
   1e530:	20003e4c 	.word	0x20003e4c
   1e534:	0001bc39 	.word	0x0001bc39

0001e538 <prvSwitchTimerLists>:
   1e538:	b590      	push	{r4, r7, lr}
   1e53a:	b089      	sub	sp, #36	; 0x24
   1e53c:	af02      	add	r7, sp, #8
   1e53e:	e03e      	b.n	1e5be <prvSwitchTimerLists+0x86>
   1e540:	4b28      	ldr	r3, [pc, #160]	; (1e5e4 <prvSwitchTimerLists+0xac>)
   1e542:	681b      	ldr	r3, [r3, #0]
   1e544:	68db      	ldr	r3, [r3, #12]
   1e546:	681b      	ldr	r3, [r3, #0]
   1e548:	617b      	str	r3, [r7, #20]
   1e54a:	4b26      	ldr	r3, [pc, #152]	; (1e5e4 <prvSwitchTimerLists+0xac>)
   1e54c:	681b      	ldr	r3, [r3, #0]
   1e54e:	68db      	ldr	r3, [r3, #12]
   1e550:	68db      	ldr	r3, [r3, #12]
   1e552:	613b      	str	r3, [r7, #16]
   1e554:	693b      	ldr	r3, [r7, #16]
   1e556:	3304      	adds	r3, #4
   1e558:	0018      	movs	r0, r3
   1e55a:	4b23      	ldr	r3, [pc, #140]	; (1e5e8 <prvSwitchTimerLists+0xb0>)
   1e55c:	4798      	blx	r3
   1e55e:	693b      	ldr	r3, [r7, #16]
   1e560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1e562:	693a      	ldr	r2, [r7, #16]
   1e564:	0010      	movs	r0, r2
   1e566:	4798      	blx	r3
   1e568:	693b      	ldr	r3, [r7, #16]
   1e56a:	69db      	ldr	r3, [r3, #28]
   1e56c:	2b01      	cmp	r3, #1
   1e56e:	d126      	bne.n	1e5be <prvSwitchTimerLists+0x86>
   1e570:	693b      	ldr	r3, [r7, #16]
   1e572:	699a      	ldr	r2, [r3, #24]
   1e574:	697b      	ldr	r3, [r7, #20]
   1e576:	18d3      	adds	r3, r2, r3
   1e578:	60fb      	str	r3, [r7, #12]
   1e57a:	68fa      	ldr	r2, [r7, #12]
   1e57c:	697b      	ldr	r3, [r7, #20]
   1e57e:	429a      	cmp	r2, r3
   1e580:	d90e      	bls.n	1e5a0 <prvSwitchTimerLists+0x68>
   1e582:	693b      	ldr	r3, [r7, #16]
   1e584:	68fa      	ldr	r2, [r7, #12]
   1e586:	605a      	str	r2, [r3, #4]
   1e588:	693b      	ldr	r3, [r7, #16]
   1e58a:	693a      	ldr	r2, [r7, #16]
   1e58c:	611a      	str	r2, [r3, #16]
   1e58e:	4b15      	ldr	r3, [pc, #84]	; (1e5e4 <prvSwitchTimerLists+0xac>)
   1e590:	681a      	ldr	r2, [r3, #0]
   1e592:	693b      	ldr	r3, [r7, #16]
   1e594:	3304      	adds	r3, #4
   1e596:	0019      	movs	r1, r3
   1e598:	0010      	movs	r0, r2
   1e59a:	4b14      	ldr	r3, [pc, #80]	; (1e5ec <prvSwitchTimerLists+0xb4>)
   1e59c:	4798      	blx	r3
   1e59e:	e00e      	b.n	1e5be <prvSwitchTimerLists+0x86>
   1e5a0:	697a      	ldr	r2, [r7, #20]
   1e5a2:	6938      	ldr	r0, [r7, #16]
   1e5a4:	2300      	movs	r3, #0
   1e5a6:	9300      	str	r3, [sp, #0]
   1e5a8:	2300      	movs	r3, #0
   1e5aa:	2100      	movs	r1, #0
   1e5ac:	4c10      	ldr	r4, [pc, #64]	; (1e5f0 <prvSwitchTimerLists+0xb8>)
   1e5ae:	47a0      	blx	r4
   1e5b0:	0003      	movs	r3, r0
   1e5b2:	60bb      	str	r3, [r7, #8]
   1e5b4:	68bb      	ldr	r3, [r7, #8]
   1e5b6:	2b00      	cmp	r3, #0
   1e5b8:	d101      	bne.n	1e5be <prvSwitchTimerLists+0x86>
   1e5ba:	b672      	cpsid	i
   1e5bc:	e7fe      	b.n	1e5bc <prvSwitchTimerLists+0x84>
   1e5be:	4b09      	ldr	r3, [pc, #36]	; (1e5e4 <prvSwitchTimerLists+0xac>)
   1e5c0:	681b      	ldr	r3, [r3, #0]
   1e5c2:	681b      	ldr	r3, [r3, #0]
   1e5c4:	2b00      	cmp	r3, #0
   1e5c6:	d1bb      	bne.n	1e540 <prvSwitchTimerLists+0x8>
   1e5c8:	4b06      	ldr	r3, [pc, #24]	; (1e5e4 <prvSwitchTimerLists+0xac>)
   1e5ca:	681b      	ldr	r3, [r3, #0]
   1e5cc:	607b      	str	r3, [r7, #4]
   1e5ce:	4b09      	ldr	r3, [pc, #36]	; (1e5f4 <prvSwitchTimerLists+0xbc>)
   1e5d0:	681a      	ldr	r2, [r3, #0]
   1e5d2:	4b04      	ldr	r3, [pc, #16]	; (1e5e4 <prvSwitchTimerLists+0xac>)
   1e5d4:	601a      	str	r2, [r3, #0]
   1e5d6:	4b07      	ldr	r3, [pc, #28]	; (1e5f4 <prvSwitchTimerLists+0xbc>)
   1e5d8:	687a      	ldr	r2, [r7, #4]
   1e5da:	601a      	str	r2, [r3, #0]
   1e5dc:	46c0      	nop			; (mov r8, r8)
   1e5de:	46bd      	mov	sp, r7
   1e5e0:	b007      	add	sp, #28
   1e5e2:	bd90      	pop	{r4, r7, pc}
   1e5e4:	20003e44 	.word	0x20003e44
   1e5e8:	0001ac5f 	.word	0x0001ac5f
   1e5ec:	0001abf3 	.word	0x0001abf3
   1e5f0:	0001e10d 	.word	0x0001e10d
   1e5f4:	20003e48 	.word	0x20003e48

0001e5f8 <prvCheckForValidListAndQueue>:
   1e5f8:	b580      	push	{r7, lr}
   1e5fa:	af00      	add	r7, sp, #0
   1e5fc:	4b10      	ldr	r3, [pc, #64]	; (1e640 <prvCheckForValidListAndQueue+0x48>)
   1e5fe:	4798      	blx	r3
   1e600:	4b10      	ldr	r3, [pc, #64]	; (1e644 <prvCheckForValidListAndQueue+0x4c>)
   1e602:	681b      	ldr	r3, [r3, #0]
   1e604:	2b00      	cmp	r3, #0
   1e606:	d115      	bne.n	1e634 <prvCheckForValidListAndQueue+0x3c>
   1e608:	4b0f      	ldr	r3, [pc, #60]	; (1e648 <prvCheckForValidListAndQueue+0x50>)
   1e60a:	0018      	movs	r0, r3
   1e60c:	4b0f      	ldr	r3, [pc, #60]	; (1e64c <prvCheckForValidListAndQueue+0x54>)
   1e60e:	4798      	blx	r3
   1e610:	4b0f      	ldr	r3, [pc, #60]	; (1e650 <prvCheckForValidListAndQueue+0x58>)
   1e612:	0018      	movs	r0, r3
   1e614:	4b0d      	ldr	r3, [pc, #52]	; (1e64c <prvCheckForValidListAndQueue+0x54>)
   1e616:	4798      	blx	r3
   1e618:	4b0e      	ldr	r3, [pc, #56]	; (1e654 <prvCheckForValidListAndQueue+0x5c>)
   1e61a:	4a0b      	ldr	r2, [pc, #44]	; (1e648 <prvCheckForValidListAndQueue+0x50>)
   1e61c:	601a      	str	r2, [r3, #0]
   1e61e:	4b0e      	ldr	r3, [pc, #56]	; (1e658 <prvCheckForValidListAndQueue+0x60>)
   1e620:	4a0b      	ldr	r2, [pc, #44]	; (1e650 <prvCheckForValidListAndQueue+0x58>)
   1e622:	601a      	str	r2, [r3, #0]
   1e624:	2200      	movs	r2, #0
   1e626:	210c      	movs	r1, #12
   1e628:	2005      	movs	r0, #5
   1e62a:	4b0c      	ldr	r3, [pc, #48]	; (1e65c <prvCheckForValidListAndQueue+0x64>)
   1e62c:	4798      	blx	r3
   1e62e:	0002      	movs	r2, r0
   1e630:	4b04      	ldr	r3, [pc, #16]	; (1e644 <prvCheckForValidListAndQueue+0x4c>)
   1e632:	601a      	str	r2, [r3, #0]
   1e634:	4b0a      	ldr	r3, [pc, #40]	; (1e660 <prvCheckForValidListAndQueue+0x68>)
   1e636:	4798      	blx	r3
   1e638:	46c0      	nop			; (mov r8, r8)
   1e63a:	46bd      	mov	sp, r7
   1e63c:	bd80      	pop	{r7, pc}
   1e63e:	46c0      	nop			; (mov r8, r8)
   1e640:	0001ade9 	.word	0x0001ade9
   1e644:	20003e4c 	.word	0x20003e4c
   1e648:	20003e1c 	.word	0x20003e1c
   1e64c:	0001ab5d 	.word	0x0001ab5d
   1e650:	20003e30 	.word	0x20003e30
   1e654:	20003e44 	.word	0x20003e44
   1e658:	20003e48 	.word	0x20003e48
   1e65c:	0001b0d9 	.word	0x0001b0d9
   1e660:	0001ae0d 	.word	0x0001ae0d

0001e664 <advance_pointer>:
   1e664:	b580      	push	{r7, lr}
   1e666:	b082      	sub	sp, #8
   1e668:	af00      	add	r7, sp, #0
   1e66a:	6078      	str	r0, [r7, #4]
   1e66c:	687b      	ldr	r3, [r7, #4]
   1e66e:	7c1b      	ldrb	r3, [r3, #16]
   1e670:	2b00      	cmp	r3, #0
   1e672:	d00b      	beq.n	1e68c <advance_pointer+0x28>
   1e674:	687b      	ldr	r3, [r7, #4]
   1e676:	689b      	ldr	r3, [r3, #8]
   1e678:	1c5a      	adds	r2, r3, #1
   1e67a:	687b      	ldr	r3, [r7, #4]
   1e67c:	68d9      	ldr	r1, [r3, #12]
   1e67e:	4b10      	ldr	r3, [pc, #64]	; (1e6c0 <advance_pointer+0x5c>)
   1e680:	0010      	movs	r0, r2
   1e682:	4798      	blx	r3
   1e684:	000b      	movs	r3, r1
   1e686:	001a      	movs	r2, r3
   1e688:	687b      	ldr	r3, [r7, #4]
   1e68a:	609a      	str	r2, [r3, #8]
   1e68c:	687b      	ldr	r3, [r7, #4]
   1e68e:	685b      	ldr	r3, [r3, #4]
   1e690:	1c5a      	adds	r2, r3, #1
   1e692:	687b      	ldr	r3, [r7, #4]
   1e694:	68d9      	ldr	r1, [r3, #12]
   1e696:	4b0a      	ldr	r3, [pc, #40]	; (1e6c0 <advance_pointer+0x5c>)
   1e698:	0010      	movs	r0, r2
   1e69a:	4798      	blx	r3
   1e69c:	000b      	movs	r3, r1
   1e69e:	001a      	movs	r2, r3
   1e6a0:	687b      	ldr	r3, [r7, #4]
   1e6a2:	605a      	str	r2, [r3, #4]
   1e6a4:	687b      	ldr	r3, [r7, #4]
   1e6a6:	685a      	ldr	r2, [r3, #4]
   1e6a8:	687b      	ldr	r3, [r7, #4]
   1e6aa:	689b      	ldr	r3, [r3, #8]
   1e6ac:	1ad3      	subs	r3, r2, r3
   1e6ae:	425a      	negs	r2, r3
   1e6b0:	4153      	adcs	r3, r2
   1e6b2:	b2da      	uxtb	r2, r3
   1e6b4:	687b      	ldr	r3, [r7, #4]
   1e6b6:	741a      	strb	r2, [r3, #16]
   1e6b8:	46c0      	nop			; (mov r8, r8)
   1e6ba:	46bd      	mov	sp, r7
   1e6bc:	b002      	add	sp, #8
   1e6be:	bd80      	pop	{r7, pc}
   1e6c0:	00033839 	.word	0x00033839

0001e6c4 <retreat_pointer>:
   1e6c4:	b580      	push	{r7, lr}
   1e6c6:	b082      	sub	sp, #8
   1e6c8:	af00      	add	r7, sp, #0
   1e6ca:	6078      	str	r0, [r7, #4]
   1e6cc:	687b      	ldr	r3, [r7, #4]
   1e6ce:	2200      	movs	r2, #0
   1e6d0:	741a      	strb	r2, [r3, #16]
   1e6d2:	687b      	ldr	r3, [r7, #4]
   1e6d4:	689b      	ldr	r3, [r3, #8]
   1e6d6:	1c5a      	adds	r2, r3, #1
   1e6d8:	687b      	ldr	r3, [r7, #4]
   1e6da:	68d9      	ldr	r1, [r3, #12]
   1e6dc:	4b05      	ldr	r3, [pc, #20]	; (1e6f4 <retreat_pointer+0x30>)
   1e6de:	0010      	movs	r0, r2
   1e6e0:	4798      	blx	r3
   1e6e2:	000b      	movs	r3, r1
   1e6e4:	001a      	movs	r2, r3
   1e6e6:	687b      	ldr	r3, [r7, #4]
   1e6e8:	609a      	str	r2, [r3, #8]
   1e6ea:	46c0      	nop			; (mov r8, r8)
   1e6ec:	46bd      	mov	sp, r7
   1e6ee:	b002      	add	sp, #8
   1e6f0:	bd80      	pop	{r7, pc}
   1e6f2:	46c0      	nop			; (mov r8, r8)
   1e6f4:	00033839 	.word	0x00033839

0001e6f8 <circular_buf_init>:
   1e6f8:	b580      	push	{r7, lr}
   1e6fa:	b084      	sub	sp, #16
   1e6fc:	af00      	add	r7, sp, #0
   1e6fe:	6078      	str	r0, [r7, #4]
   1e700:	6039      	str	r1, [r7, #0]
   1e702:	2014      	movs	r0, #20
   1e704:	4b09      	ldr	r3, [pc, #36]	; (1e72c <circular_buf_init+0x34>)
   1e706:	4798      	blx	r3
   1e708:	0003      	movs	r3, r0
   1e70a:	60fb      	str	r3, [r7, #12]
   1e70c:	68fb      	ldr	r3, [r7, #12]
   1e70e:	687a      	ldr	r2, [r7, #4]
   1e710:	601a      	str	r2, [r3, #0]
   1e712:	68fb      	ldr	r3, [r7, #12]
   1e714:	683a      	ldr	r2, [r7, #0]
   1e716:	60da      	str	r2, [r3, #12]
   1e718:	68fb      	ldr	r3, [r7, #12]
   1e71a:	0018      	movs	r0, r3
   1e71c:	4b04      	ldr	r3, [pc, #16]	; (1e730 <circular_buf_init+0x38>)
   1e71e:	4798      	blx	r3
   1e720:	68fb      	ldr	r3, [r7, #12]
   1e722:	0018      	movs	r0, r3
   1e724:	46bd      	mov	sp, r7
   1e726:	b004      	add	sp, #16
   1e728:	bd80      	pop	{r7, pc}
   1e72a:	46c0      	nop			; (mov r8, r8)
   1e72c:	000356a9 	.word	0x000356a9
   1e730:	0001e735 	.word	0x0001e735

0001e734 <circular_buf_reset>:
   1e734:	b580      	push	{r7, lr}
   1e736:	b082      	sub	sp, #8
   1e738:	af00      	add	r7, sp, #0
   1e73a:	6078      	str	r0, [r7, #4]
   1e73c:	687b      	ldr	r3, [r7, #4]
   1e73e:	2200      	movs	r2, #0
   1e740:	605a      	str	r2, [r3, #4]
   1e742:	687b      	ldr	r3, [r7, #4]
   1e744:	2200      	movs	r2, #0
   1e746:	609a      	str	r2, [r3, #8]
   1e748:	687b      	ldr	r3, [r7, #4]
   1e74a:	2200      	movs	r2, #0
   1e74c:	741a      	strb	r2, [r3, #16]
   1e74e:	46c0      	nop			; (mov r8, r8)
   1e750:	46bd      	mov	sp, r7
   1e752:	b002      	add	sp, #8
   1e754:	bd80      	pop	{r7, pc}
	...

0001e758 <circular_buf_put>:
   1e758:	b580      	push	{r7, lr}
   1e75a:	b082      	sub	sp, #8
   1e75c:	af00      	add	r7, sp, #0
   1e75e:	6078      	str	r0, [r7, #4]
   1e760:	000a      	movs	r2, r1
   1e762:	1cfb      	adds	r3, r7, #3
   1e764:	701a      	strb	r2, [r3, #0]
   1e766:	687b      	ldr	r3, [r7, #4]
   1e768:	681a      	ldr	r2, [r3, #0]
   1e76a:	687b      	ldr	r3, [r7, #4]
   1e76c:	685b      	ldr	r3, [r3, #4]
   1e76e:	18d3      	adds	r3, r2, r3
   1e770:	1cfa      	adds	r2, r7, #3
   1e772:	7812      	ldrb	r2, [r2, #0]
   1e774:	701a      	strb	r2, [r3, #0]
   1e776:	687b      	ldr	r3, [r7, #4]
   1e778:	0018      	movs	r0, r3
   1e77a:	4b03      	ldr	r3, [pc, #12]	; (1e788 <circular_buf_put+0x30>)
   1e77c:	4798      	blx	r3
   1e77e:	46c0      	nop			; (mov r8, r8)
   1e780:	46bd      	mov	sp, r7
   1e782:	b002      	add	sp, #8
   1e784:	bd80      	pop	{r7, pc}
   1e786:	46c0      	nop			; (mov r8, r8)
   1e788:	0001e665 	.word	0x0001e665

0001e78c <circular_buf_get>:
   1e78c:	b580      	push	{r7, lr}
   1e78e:	b084      	sub	sp, #16
   1e790:	af00      	add	r7, sp, #0
   1e792:	6078      	str	r0, [r7, #4]
   1e794:	6039      	str	r1, [r7, #0]
   1e796:	2301      	movs	r3, #1
   1e798:	425b      	negs	r3, r3
   1e79a:	60fb      	str	r3, [r7, #12]
   1e79c:	687b      	ldr	r3, [r7, #4]
   1e79e:	0018      	movs	r0, r3
   1e7a0:	4b0d      	ldr	r3, [pc, #52]	; (1e7d8 <circular_buf_get+0x4c>)
   1e7a2:	4798      	blx	r3
   1e7a4:	0003      	movs	r3, r0
   1e7a6:	001a      	movs	r2, r3
   1e7a8:	2301      	movs	r3, #1
   1e7aa:	4053      	eors	r3, r2
   1e7ac:	b2db      	uxtb	r3, r3
   1e7ae:	2b00      	cmp	r3, #0
   1e7b0:	d00d      	beq.n	1e7ce <circular_buf_get+0x42>
   1e7b2:	687b      	ldr	r3, [r7, #4]
   1e7b4:	681a      	ldr	r2, [r3, #0]
   1e7b6:	687b      	ldr	r3, [r7, #4]
   1e7b8:	689b      	ldr	r3, [r3, #8]
   1e7ba:	18d3      	adds	r3, r2, r3
   1e7bc:	781a      	ldrb	r2, [r3, #0]
   1e7be:	683b      	ldr	r3, [r7, #0]
   1e7c0:	701a      	strb	r2, [r3, #0]
   1e7c2:	687b      	ldr	r3, [r7, #4]
   1e7c4:	0018      	movs	r0, r3
   1e7c6:	4b05      	ldr	r3, [pc, #20]	; (1e7dc <circular_buf_get+0x50>)
   1e7c8:	4798      	blx	r3
   1e7ca:	2300      	movs	r3, #0
   1e7cc:	60fb      	str	r3, [r7, #12]
   1e7ce:	68fb      	ldr	r3, [r7, #12]
   1e7d0:	0018      	movs	r0, r3
   1e7d2:	46bd      	mov	sp, r7
   1e7d4:	b004      	add	sp, #16
   1e7d6:	bd80      	pop	{r7, pc}
   1e7d8:	0001e7e1 	.word	0x0001e7e1
   1e7dc:	0001e6c5 	.word	0x0001e6c5

0001e7e0 <circular_buf_empty>:
   1e7e0:	b580      	push	{r7, lr}
   1e7e2:	b082      	sub	sp, #8
   1e7e4:	af00      	add	r7, sp, #0
   1e7e6:	6078      	str	r0, [r7, #4]
   1e7e8:	687b      	ldr	r3, [r7, #4]
   1e7ea:	7c1b      	ldrb	r3, [r3, #16]
   1e7ec:	2201      	movs	r2, #1
   1e7ee:	4053      	eors	r3, r2
   1e7f0:	b2db      	uxtb	r3, r3
   1e7f2:	2b00      	cmp	r3, #0
   1e7f4:	d007      	beq.n	1e806 <circular_buf_empty+0x26>
   1e7f6:	687b      	ldr	r3, [r7, #4]
   1e7f8:	685a      	ldr	r2, [r3, #4]
   1e7fa:	687b      	ldr	r3, [r7, #4]
   1e7fc:	689b      	ldr	r3, [r3, #8]
   1e7fe:	429a      	cmp	r2, r3
   1e800:	d101      	bne.n	1e806 <circular_buf_empty+0x26>
   1e802:	2301      	movs	r3, #1
   1e804:	e000      	b.n	1e808 <circular_buf_empty+0x28>
   1e806:	2300      	movs	r3, #0
   1e808:	1c1a      	adds	r2, r3, #0
   1e80a:	2301      	movs	r3, #1
   1e80c:	4013      	ands	r3, r2
   1e80e:	b2db      	uxtb	r3, r3
   1e810:	0018      	movs	r0, r3
   1e812:	46bd      	mov	sp, r7
   1e814:	b002      	add	sp, #8
   1e816:	bd80      	pop	{r7, pc}

0001e818 <system_interrupt_enable>:
{
   1e818:	b580      	push	{r7, lr}
   1e81a:	b082      	sub	sp, #8
   1e81c:	af00      	add	r7, sp, #0
   1e81e:	0002      	movs	r2, r0
   1e820:	1dfb      	adds	r3, r7, #7
   1e822:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1e824:	4b06      	ldr	r3, [pc, #24]	; (1e840 <system_interrupt_enable+0x28>)
   1e826:	1dfa      	adds	r2, r7, #7
   1e828:	7812      	ldrb	r2, [r2, #0]
   1e82a:	0011      	movs	r1, r2
   1e82c:	221f      	movs	r2, #31
   1e82e:	400a      	ands	r2, r1
   1e830:	2101      	movs	r1, #1
   1e832:	4091      	lsls	r1, r2
   1e834:	000a      	movs	r2, r1
   1e836:	601a      	str	r2, [r3, #0]
}
   1e838:	46c0      	nop			; (mov r8, r8)
   1e83a:	46bd      	mov	sp, r7
   1e83c:	b002      	add	sp, #8
   1e83e:	bd80      	pop	{r7, pc}
   1e840:	e000e100 	.word	0xe000e100

0001e844 <usart_is_syncing>:
{
   1e844:	b580      	push	{r7, lr}
   1e846:	b084      	sub	sp, #16
   1e848:	af00      	add	r7, sp, #0
   1e84a:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   1e84c:	687b      	ldr	r3, [r7, #4]
   1e84e:	681b      	ldr	r3, [r3, #0]
   1e850:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   1e852:	68fb      	ldr	r3, [r7, #12]
   1e854:	69db      	ldr	r3, [r3, #28]
   1e856:	1e5a      	subs	r2, r3, #1
   1e858:	4193      	sbcs	r3, r2
   1e85a:	b2db      	uxtb	r3, r3
}
   1e85c:	0018      	movs	r0, r3
   1e85e:	46bd      	mov	sp, r7
   1e860:	b004      	add	sp, #16
   1e862:	bd80      	pop	{r7, pc}

0001e864 <_usart_wait_for_sync>:
{
   1e864:	b580      	push	{r7, lr}
   1e866:	b082      	sub	sp, #8
   1e868:	af00      	add	r7, sp, #0
   1e86a:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   1e86c:	46c0      	nop			; (mov r8, r8)
   1e86e:	687b      	ldr	r3, [r7, #4]
   1e870:	0018      	movs	r0, r3
   1e872:	4b04      	ldr	r3, [pc, #16]	; (1e884 <_usart_wait_for_sync+0x20>)
   1e874:	4798      	blx	r3
   1e876:	1e03      	subs	r3, r0, #0
   1e878:	d1f9      	bne.n	1e86e <_usart_wait_for_sync+0xa>
}
   1e87a:	46c0      	nop			; (mov r8, r8)
   1e87c:	46bd      	mov	sp, r7
   1e87e:	b002      	add	sp, #8
   1e880:	bd80      	pop	{r7, pc}
   1e882:	46c0      	nop			; (mov r8, r8)
   1e884:	0001e845 	.word	0x0001e845

0001e888 <usart_get_config_defaults>:
{
   1e888:	b580      	push	{r7, lr}
   1e88a:	b082      	sub	sp, #8
   1e88c:	af00      	add	r7, sp, #0
   1e88e:	6078      	str	r0, [r7, #4]
	config->data_order       = USART_DATAORDER_LSB;
   1e890:	687b      	ldr	r3, [r7, #4]
   1e892:	2280      	movs	r2, #128	; 0x80
   1e894:	05d2      	lsls	r2, r2, #23
   1e896:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   1e898:	687b      	ldr	r3, [r7, #4]
   1e89a:	2200      	movs	r2, #0
   1e89c:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   1e89e:	687b      	ldr	r3, [r7, #4]
   1e8a0:	22ff      	movs	r2, #255	; 0xff
   1e8a2:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   1e8a4:	687b      	ldr	r3, [r7, #4]
   1e8a6:	2200      	movs	r2, #0
   1e8a8:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   1e8aa:	687b      	ldr	r3, [r7, #4]
   1e8ac:	2200      	movs	r2, #0
   1e8ae:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   1e8b0:	687b      	ldr	r3, [r7, #4]
   1e8b2:	2296      	movs	r2, #150	; 0x96
   1e8b4:	0192      	lsls	r2, r2, #6
   1e8b6:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   1e8b8:	687b      	ldr	r3, [r7, #4]
   1e8ba:	2224      	movs	r2, #36	; 0x24
   1e8bc:	2101      	movs	r1, #1
   1e8be:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   1e8c0:	687b      	ldr	r3, [r7, #4]
   1e8c2:	2225      	movs	r2, #37	; 0x25
   1e8c4:	2101      	movs	r1, #1
   1e8c6:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   1e8c8:	687b      	ldr	r3, [r7, #4]
   1e8ca:	2226      	movs	r2, #38	; 0x26
   1e8cc:	2100      	movs	r1, #0
   1e8ce:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   1e8d0:	687b      	ldr	r3, [r7, #4]
   1e8d2:	2227      	movs	r2, #39	; 0x27
   1e8d4:	2100      	movs	r1, #0
   1e8d6:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   1e8d8:	687b      	ldr	r3, [r7, #4]
   1e8da:	2200      	movs	r2, #0
   1e8dc:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   1e8de:	687b      	ldr	r3, [r7, #4]
   1e8e0:	2288      	movs	r2, #136	; 0x88
   1e8e2:	0352      	lsls	r2, r2, #13
   1e8e4:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   1e8e6:	687b      	ldr	r3, [r7, #4]
   1e8e8:	222c      	movs	r2, #44	; 0x2c
   1e8ea:	2100      	movs	r1, #0
   1e8ec:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   1e8ee:	687b      	ldr	r3, [r7, #4]
   1e8f0:	222d      	movs	r2, #45	; 0x2d
   1e8f2:	2100      	movs	r1, #0
   1e8f4:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   1e8f6:	687b      	ldr	r3, [r7, #4]
   1e8f8:	2200      	movs	r2, #0
   1e8fa:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   1e8fc:	687b      	ldr	r3, [r7, #4]
   1e8fe:	2200      	movs	r2, #0
   1e900:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   1e902:	687b      	ldr	r3, [r7, #4]
   1e904:	2200      	movs	r2, #0
   1e906:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   1e908:	687b      	ldr	r3, [r7, #4]
   1e90a:	2200      	movs	r2, #0
   1e90c:	63da      	str	r2, [r3, #60]	; 0x3c
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   1e90e:	687b      	ldr	r3, [r7, #4]
   1e910:	2200      	movs	r2, #0
   1e912:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   1e914:	687b      	ldr	r3, [r7, #4]
   1e916:	2200      	movs	r2, #0
   1e918:	821a      	strh	r2, [r3, #16]
	config->lin_slave_enable      = false;
   1e91a:	687b      	ldr	r3, [r7, #4]
   1e91c:	2200      	movs	r2, #0
   1e91e:	76da      	strb	r2, [r3, #27]
	config->immediate_buffer_overflow_notification  = false;
   1e920:	687b      	ldr	r3, [r7, #4]
   1e922:	2200      	movs	r2, #0
   1e924:	761a      	strb	r2, [r3, #24]
	config->start_frame_detection_enable            = false;
   1e926:	687b      	ldr	r3, [r7, #4]
   1e928:	2200      	movs	r2, #0
   1e92a:	771a      	strb	r2, [r3, #28]
	config->encoding_format_enable                  = false;
   1e92c:	687b      	ldr	r3, [r7, #4]
   1e92e:	2200      	movs	r2, #0
   1e930:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   1e932:	687b      	ldr	r3, [r7, #4]
   1e934:	2213      	movs	r2, #19
   1e936:	769a      	strb	r2, [r3, #26]
	config->collision_detection_enable              = false;
   1e938:	687b      	ldr	r3, [r7, #4]
   1e93a:	2200      	movs	r2, #0
   1e93c:	775a      	strb	r2, [r3, #29]
}
   1e93e:	46c0      	nop			; (mov r8, r8)
   1e940:	46bd      	mov	sp, r7
   1e942:	b002      	add	sp, #8
   1e944:	bd80      	pop	{r7, pc}
	...

0001e948 <usart_enable>:
{
   1e948:	b580      	push	{r7, lr}
   1e94a:	b084      	sub	sp, #16
   1e94c:	af00      	add	r7, sp, #0
   1e94e:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   1e950:	687b      	ldr	r3, [r7, #4]
   1e952:	681b      	ldr	r3, [r3, #0]
   1e954:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1e956:	687b      	ldr	r3, [r7, #4]
   1e958:	681b      	ldr	r3, [r3, #0]
   1e95a:	0018      	movs	r0, r3
   1e95c:	4b09      	ldr	r3, [pc, #36]	; (1e984 <usart_enable+0x3c>)
   1e95e:	4798      	blx	r3
   1e960:	0003      	movs	r3, r0
   1e962:	0018      	movs	r0, r3
   1e964:	4b08      	ldr	r3, [pc, #32]	; (1e988 <usart_enable+0x40>)
   1e966:	4798      	blx	r3
	_usart_wait_for_sync(module);
   1e968:	687b      	ldr	r3, [r7, #4]
   1e96a:	0018      	movs	r0, r3
   1e96c:	4b07      	ldr	r3, [pc, #28]	; (1e98c <usart_enable+0x44>)
   1e96e:	4798      	blx	r3
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   1e970:	68fb      	ldr	r3, [r7, #12]
   1e972:	681b      	ldr	r3, [r3, #0]
   1e974:	2202      	movs	r2, #2
   1e976:	431a      	orrs	r2, r3
   1e978:	68fb      	ldr	r3, [r7, #12]
   1e97a:	601a      	str	r2, [r3, #0]
}
   1e97c:	46c0      	nop			; (mov r8, r8)
   1e97e:	46bd      	mov	sp, r7
   1e980:	b004      	add	sp, #16
   1e982:	bd80      	pop	{r7, pc}
   1e984:	000283b1 	.word	0x000283b1
   1e988:	0001e819 	.word	0x0001e819
   1e98c:	0001e865 	.word	0x0001e865

0001e990 <usart_enable_callback>:
{
   1e990:	b580      	push	{r7, lr}
   1e992:	b082      	sub	sp, #8
   1e994:	af00      	add	r7, sp, #0
   1e996:	6078      	str	r0, [r7, #4]
   1e998:	000a      	movs	r2, r1
   1e99a:	1cfb      	adds	r3, r7, #3
   1e99c:	701a      	strb	r2, [r3, #0]
	module->callback_enable_mask |= (1 << callback_type);
   1e99e:	687b      	ldr	r3, [r7, #4]
   1e9a0:	2231      	movs	r2, #49	; 0x31
   1e9a2:	5c9b      	ldrb	r3, [r3, r2]
   1e9a4:	b25a      	sxtb	r2, r3
   1e9a6:	1cfb      	adds	r3, r7, #3
   1e9a8:	781b      	ldrb	r3, [r3, #0]
   1e9aa:	2101      	movs	r1, #1
   1e9ac:	4099      	lsls	r1, r3
   1e9ae:	000b      	movs	r3, r1
   1e9b0:	b25b      	sxtb	r3, r3
   1e9b2:	4313      	orrs	r3, r2
   1e9b4:	b25b      	sxtb	r3, r3
   1e9b6:	b2d9      	uxtb	r1, r3
   1e9b8:	687b      	ldr	r3, [r7, #4]
   1e9ba:	2231      	movs	r2, #49	; 0x31
   1e9bc:	5499      	strb	r1, [r3, r2]
}
   1e9be:	46c0      	nop			; (mov r8, r8)
   1e9c0:	46bd      	mov	sp, r7
   1e9c2:	b002      	add	sp, #8
   1e9c4:	bd80      	pop	{r7, pc}
	...

0001e9c8 <InitializeSerialConsole>:
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 */

void InitializeSerialConsole(void)
{
   1e9c8:	b580      	push	{r7, lr}
   1e9ca:	af00      	add	r7, sp, #0
    // Initialize circular buffers for RX and TX
    cbufRx = circular_buf_init((uint8_t *)rxCharacterBuffer, RX_BUFFER_SIZE);
   1e9cc:	2380      	movs	r3, #128	; 0x80
   1e9ce:	009a      	lsls	r2, r3, #2
   1e9d0:	4b0f      	ldr	r3, [pc, #60]	; (1ea10 <InitializeSerialConsole+0x48>)
   1e9d2:	0011      	movs	r1, r2
   1e9d4:	0018      	movs	r0, r3
   1e9d6:	4b0f      	ldr	r3, [pc, #60]	; (1ea14 <InitializeSerialConsole+0x4c>)
   1e9d8:	4798      	blx	r3
   1e9da:	0002      	movs	r2, r0
   1e9dc:	4b0e      	ldr	r3, [pc, #56]	; (1ea18 <InitializeSerialConsole+0x50>)
   1e9de:	601a      	str	r2, [r3, #0]
    cbufTx = circular_buf_init((uint8_t *)txCharacterBuffer, RX_BUFFER_SIZE);
   1e9e0:	2380      	movs	r3, #128	; 0x80
   1e9e2:	009a      	lsls	r2, r3, #2
   1e9e4:	4b0d      	ldr	r3, [pc, #52]	; (1ea1c <InitializeSerialConsole+0x54>)
   1e9e6:	0011      	movs	r1, r2
   1e9e8:	0018      	movs	r0, r3
   1e9ea:	4b0a      	ldr	r3, [pc, #40]	; (1ea14 <InitializeSerialConsole+0x4c>)
   1e9ec:	4798      	blx	r3
   1e9ee:	0002      	movs	r2, r0
   1e9f0:	4b0b      	ldr	r3, [pc, #44]	; (1ea20 <InitializeSerialConsole+0x58>)
   1e9f2:	601a      	str	r2, [r3, #0]

    // Configure USART and Callbacks
    configure_usart();
   1e9f4:	4b0b      	ldr	r3, [pc, #44]	; (1ea24 <InitializeSerialConsole+0x5c>)
   1e9f6:	4798      	blx	r3
    configure_usart_callbacks();
   1e9f8:	4b0b      	ldr	r3, [pc, #44]	; (1ea28 <InitializeSerialConsole+0x60>)
   1e9fa:	4798      	blx	r3

    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Kicks off constant reading of characters
   1e9fc:	490b      	ldr	r1, [pc, #44]	; (1ea2c <InitializeSerialConsole+0x64>)
   1e9fe:	4b0c      	ldr	r3, [pc, #48]	; (1ea30 <InitializeSerialConsole+0x68>)
   1ea00:	2201      	movs	r2, #1
   1ea02:	0018      	movs	r0, r3
   1ea04:	4b0b      	ldr	r3, [pc, #44]	; (1ea34 <InitializeSerialConsole+0x6c>)
   1ea06:	4798      	blx	r3

    // Add any other calls you need to do to initialize your Serial Console
}
   1ea08:	46c0      	nop			; (mov r8, r8)
   1ea0a:	46bd      	mov	sp, r7
   1ea0c:	bd80      	pop	{r7, pc}
   1ea0e:	46c0      	nop			; (mov r8, r8)
   1ea10:	200054cc 	.word	0x200054cc
   1ea14:	0001e6f9 	.word	0x0001e6f9
   1ea18:	200052c4 	.word	0x200052c4
   1ea1c:	200052cc 	.word	0x200052cc
   1ea20:	200056d0 	.word	0x200056d0
   1ea24:	0001eb9d 	.word	0x0001eb9d
   1ea28:	0001ec15 	.word	0x0001ec15
   1ea2c:	200052c8 	.word	0x200052c8
   1ea30:	20005290 	.word	0x20005290
   1ea34:	00029c59 	.word	0x00029c59

0001ea38 <SerialConsoleWriteString>:
 * @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'. Modified to be
 *thread safe.
 * @note			Use to send a string of characters to the user via UART
 */
void SerialConsoleWriteString(const char *string)
{
   1ea38:	b580      	push	{r7, lr}
   1ea3a:	b084      	sub	sp, #16
   1ea3c:	af00      	add	r7, sp, #0
   1ea3e:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1ea40:	4b1a      	ldr	r3, [pc, #104]	; (1eaac <SerialConsoleWriteString+0x74>)
   1ea42:	4798      	blx	r3
    if (string != NULL) {
   1ea44:	687b      	ldr	r3, [r7, #4]
   1ea46:	2b00      	cmp	r3, #0
   1ea48:	d02a      	beq.n	1eaa0 <SerialConsoleWriteString+0x68>
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1ea4a:	2300      	movs	r3, #0
   1ea4c:	60fb      	str	r3, [r7, #12]
   1ea4e:	e00b      	b.n	1ea68 <SerialConsoleWriteString+0x30>
            circular_buf_put(cbufTx, string[iter]);
   1ea50:	4b17      	ldr	r3, [pc, #92]	; (1eab0 <SerialConsoleWriteString+0x78>)
   1ea52:	6818      	ldr	r0, [r3, #0]
   1ea54:	687a      	ldr	r2, [r7, #4]
   1ea56:	68fb      	ldr	r3, [r7, #12]
   1ea58:	18d3      	adds	r3, r2, r3
   1ea5a:	781b      	ldrb	r3, [r3, #0]
   1ea5c:	0019      	movs	r1, r3
   1ea5e:	4b15      	ldr	r3, [pc, #84]	; (1eab4 <SerialConsoleWriteString+0x7c>)
   1ea60:	4798      	blx	r3
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1ea62:	68fb      	ldr	r3, [r7, #12]
   1ea64:	3301      	adds	r3, #1
   1ea66:	60fb      	str	r3, [r7, #12]
   1ea68:	687b      	ldr	r3, [r7, #4]
   1ea6a:	0018      	movs	r0, r3
   1ea6c:	4b12      	ldr	r3, [pc, #72]	; (1eab8 <SerialConsoleWriteString+0x80>)
   1ea6e:	4798      	blx	r3
   1ea70:	0002      	movs	r2, r0
   1ea72:	68fb      	ldr	r3, [r7, #12]
   1ea74:	429a      	cmp	r2, r3
   1ea76:	d8eb      	bhi.n	1ea50 <SerialConsoleWriteString+0x18>
        }

        if (usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK) {
   1ea78:	4b10      	ldr	r3, [pc, #64]	; (1eabc <SerialConsoleWriteString+0x84>)
   1ea7a:	2101      	movs	r1, #1
   1ea7c:	0018      	movs	r0, r3
   1ea7e:	4b10      	ldr	r3, [pc, #64]	; (1eac0 <SerialConsoleWriteString+0x88>)
   1ea80:	4798      	blx	r3
   1ea82:	1e03      	subs	r3, r0, #0
   1ea84:	d10c      	bne.n	1eaa0 <SerialConsoleWriteString+0x68>
            circular_buf_get(cbufTx, (uint8_t *)&latestTx);  // Perform only if the SERCOM TX is free (not busy)
   1ea86:	4b0a      	ldr	r3, [pc, #40]	; (1eab0 <SerialConsoleWriteString+0x78>)
   1ea88:	681b      	ldr	r3, [r3, #0]
   1ea8a:	4a0e      	ldr	r2, [pc, #56]	; (1eac4 <SerialConsoleWriteString+0x8c>)
   1ea8c:	0011      	movs	r1, r2
   1ea8e:	0018      	movs	r0, r3
   1ea90:	4b0d      	ldr	r3, [pc, #52]	; (1eac8 <SerialConsoleWriteString+0x90>)
   1ea92:	4798      	blx	r3
            usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1ea94:	490b      	ldr	r1, [pc, #44]	; (1eac4 <SerialConsoleWriteString+0x8c>)
   1ea96:	4b09      	ldr	r3, [pc, #36]	; (1eabc <SerialConsoleWriteString+0x84>)
   1ea98:	2201      	movs	r2, #1
   1ea9a:	0018      	movs	r0, r3
   1ea9c:	4b0b      	ldr	r3, [pc, #44]	; (1eacc <SerialConsoleWriteString+0x94>)
   1ea9e:	4798      	blx	r3
        }
    }
    xTaskResumeAll();
   1eaa0:	4b0b      	ldr	r3, [pc, #44]	; (1ead0 <SerialConsoleWriteString+0x98>)
   1eaa2:	4798      	blx	r3
}
   1eaa4:	46c0      	nop			; (mov r8, r8)
   1eaa6:	46bd      	mov	sp, r7
   1eaa8:	b004      	add	sp, #16
   1eaaa:	bd80      	pop	{r7, pc}
   1eaac:	0001d0a5 	.word	0x0001d0a5
   1eab0:	200056d0 	.word	0x200056d0
   1eab4:	0001e759 	.word	0x0001e759
   1eab8:	00035abf 	.word	0x00035abf
   1eabc:	20005290 	.word	0x20005290
   1eac0:	00029ca1 	.word	0x00029ca1
   1eac4:	200056cc 	.word	0x200056cc
   1eac8:	0001e78d 	.word	0x0001e78d
   1eacc:	00029c11 	.word	0x00029c11
   1ead0:	0001d0bd 	.word	0x0001d0bd

0001ead4 <SerialConsoleReadCharacter>:
 * @param[in]	Pointer to a character. This function will return the character from the RX buffer into this pointer
 * @return		Returns -1 if there are no characters in the buffer
 * @note			Use to receive characters from the RX buffer (FIFO)
 */
int SerialConsoleReadCharacter(uint8_t *rxChar)
{
   1ead4:	b580      	push	{r7, lr}
   1ead6:	b084      	sub	sp, #16
   1ead8:	af00      	add	r7, sp, #0
   1eada:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1eadc:	4b08      	ldr	r3, [pc, #32]	; (1eb00 <SerialConsoleReadCharacter+0x2c>)
   1eade:	4798      	blx	r3
    int a = circular_buf_get(cbufRx, (uint8_t *)rxChar);
   1eae0:	4b08      	ldr	r3, [pc, #32]	; (1eb04 <SerialConsoleReadCharacter+0x30>)
   1eae2:	681b      	ldr	r3, [r3, #0]
   1eae4:	687a      	ldr	r2, [r7, #4]
   1eae6:	0011      	movs	r1, r2
   1eae8:	0018      	movs	r0, r3
   1eaea:	4b07      	ldr	r3, [pc, #28]	; (1eb08 <SerialConsoleReadCharacter+0x34>)
   1eaec:	4798      	blx	r3
   1eaee:	0003      	movs	r3, r0
   1eaf0:	60fb      	str	r3, [r7, #12]
    xTaskResumeAll();
   1eaf2:	4b06      	ldr	r3, [pc, #24]	; (1eb0c <SerialConsoleReadCharacter+0x38>)
   1eaf4:	4798      	blx	r3
    return a;
   1eaf6:	68fb      	ldr	r3, [r7, #12]
}
   1eaf8:	0018      	movs	r0, r3
   1eafa:	46bd      	mov	sp, r7
   1eafc:	b004      	add	sp, #16
   1eafe:	bd80      	pop	{r7, pc}
   1eb00:	0001d0a5 	.word	0x0001d0a5
   1eb04:	200052c4 	.word	0x200052c4
   1eb08:	0001e78d 	.word	0x0001e78d
   1eb0c:	0001d0bd 	.word	0x0001d0bd

0001eb10 <getLogLevel>:
 * @return		Returns the current debug level of the system.
 * @note
 */

enum eDebugLogLevels getLogLevel(void)
{
   1eb10:	b580      	push	{r7, lr}
   1eb12:	af00      	add	r7, sp, #0
    return currentDebugLevel;
   1eb14:	4b02      	ldr	r3, [pc, #8]	; (1eb20 <getLogLevel+0x10>)
   1eb16:	781b      	ldrb	r3, [r3, #0]
}
   1eb18:	0018      	movs	r0, r3
   1eb1a:	46bd      	mov	sp, r7
   1eb1c:	bd80      	pop	{r7, pc}
   1eb1e:	46c0      	nop			; (mov r8, r8)
   1eb20:	20003e58 	.word	0x20003e58

0001eb24 <LogMessage>:
 * @fn			LogMessage (Students to fill out this)
 * @brief
 * @note
 */
void LogMessage(enum eDebugLogLevels level, const char *format, ...)
{
   1eb24:	b40e      	push	{r1, r2, r3}
   1eb26:	b590      	push	{r4, r7, lr}
   1eb28:	b084      	sub	sp, #16
   1eb2a:	af00      	add	r7, sp, #0
   1eb2c:	0002      	movs	r2, r0
   1eb2e:	1dfb      	adds	r3, r7, #7
   1eb30:	701a      	strb	r2, [r3, #0]
    if (getLogLevel() <= level) {
   1eb32:	4b0e      	ldr	r3, [pc, #56]	; (1eb6c <LogMessage+0x48>)
   1eb34:	4798      	blx	r3
   1eb36:	0003      	movs	r3, r0
   1eb38:	001a      	movs	r2, r3
   1eb3a:	1dfb      	adds	r3, r7, #7
   1eb3c:	781b      	ldrb	r3, [r3, #0]
   1eb3e:	4293      	cmp	r3, r2
   1eb40:	d30c      	bcc.n	1eb5c <LogMessage+0x38>
        va_list ap;
        va_start(ap, format);
   1eb42:	2320      	movs	r3, #32
   1eb44:	18fb      	adds	r3, r7, r3
   1eb46:	60fb      	str	r3, [r7, #12]
        vsnprintf(debugBuffer, 127, format, ap);
   1eb48:	68fb      	ldr	r3, [r7, #12]
   1eb4a:	69fa      	ldr	r2, [r7, #28]
   1eb4c:	4808      	ldr	r0, [pc, #32]	; (1eb70 <LogMessage+0x4c>)
   1eb4e:	217f      	movs	r1, #127	; 0x7f
   1eb50:	4c08      	ldr	r4, [pc, #32]	; (1eb74 <LogMessage+0x50>)
   1eb52:	47a0      	blx	r4
        SerialConsoleWriteString(debugBuffer);
   1eb54:	4b06      	ldr	r3, [pc, #24]	; (1eb70 <LogMessage+0x4c>)
   1eb56:	0018      	movs	r0, r3
   1eb58:	4b07      	ldr	r3, [pc, #28]	; (1eb78 <LogMessage+0x54>)
   1eb5a:	4798      	blx	r3
        va_end(ap);
    }
};
   1eb5c:	46c0      	nop			; (mov r8, r8)
   1eb5e:	46bd      	mov	sp, r7
   1eb60:	b004      	add	sp, #16
   1eb62:	bc90      	pop	{r4, r7}
   1eb64:	bc08      	pop	{r3}
   1eb66:	b003      	add	sp, #12
   1eb68:	4718      	bx	r3
   1eb6a:	46c0      	nop			; (mov r8, r8)
   1eb6c:	0001eb11 	.word	0x0001eb11
   1eb70:	20005210 	.word	0x20005210
   1eb74:	00035cf9 	.word	0x00035cf9
   1eb78:	0001ea39 	.word	0x0001ea39

0001eb7c <LogMessageDebug>:
 * @fn			LogMessage Debug(Students to fill out this)
 * @brief
 * @note
 */
void LogMessageDebug(const char *format, ...)
{
   1eb7c:	b40f      	push	{r0, r1, r2, r3}
   1eb7e:	b580      	push	{r7, lr}
   1eb80:	af00      	add	r7, sp, #0
    LogMessage(LOG_DEBUG_LVL, format);
   1eb82:	68bb      	ldr	r3, [r7, #8]
   1eb84:	0019      	movs	r1, r3
   1eb86:	2001      	movs	r0, #1
   1eb88:	4b03      	ldr	r3, [pc, #12]	; (1eb98 <LogMessageDebug+0x1c>)
   1eb8a:	4798      	blx	r3
};
   1eb8c:	46c0      	nop			; (mov r8, r8)
   1eb8e:	46bd      	mov	sp, r7
   1eb90:	bc80      	pop	{r7}
   1eb92:	bc08      	pop	{r3}
   1eb94:	b004      	add	sp, #16
   1eb96:	4718      	bx	r3
   1eb98:	0001eb25 	.word	0x0001eb25

0001eb9c <configure_usart>:
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 */
static void configure_usart(void)
{
   1eb9c:	b580      	push	{r7, lr}
   1eb9e:	b090      	sub	sp, #64	; 0x40
   1eba0:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
   1eba2:	003b      	movs	r3, r7
   1eba4:	0018      	movs	r0, r3
   1eba6:	4b14      	ldr	r3, [pc, #80]	; (1ebf8 <configure_usart+0x5c>)
   1eba8:	4798      	blx	r3

    config_usart.baudrate = 115200;
   1ebaa:	003b      	movs	r3, r7
   1ebac:	22e1      	movs	r2, #225	; 0xe1
   1ebae:	0252      	lsls	r2, r2, #9
   1ebb0:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   1ebb2:	003b      	movs	r3, r7
   1ebb4:	22c4      	movs	r2, #196	; 0xc4
   1ebb6:	0392      	lsls	r2, r2, #14
   1ebb8:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   1ebba:	003b      	movs	r3, r7
   1ebbc:	2201      	movs	r2, #1
   1ebbe:	4252      	negs	r2, r2
   1ebc0:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   1ebc2:	003b      	movs	r3, r7
   1ebc4:	2201      	movs	r2, #1
   1ebc6:	4252      	negs	r2, r2
   1ebc8:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   1ebca:	003b      	movs	r3, r7
   1ebcc:	4a0b      	ldr	r2, [pc, #44]	; (1ebfc <configure_usart+0x60>)
   1ebce:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   1ebd0:	003b      	movs	r3, r7
   1ebd2:	4a0b      	ldr	r2, [pc, #44]	; (1ec00 <configure_usart+0x64>)
   1ebd4:	63da      	str	r2, [r3, #60]	; 0x3c
    while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
   1ebd6:	46c0      	nop			; (mov r8, r8)
   1ebd8:	003a      	movs	r2, r7
   1ebda:	490a      	ldr	r1, [pc, #40]	; (1ec04 <configure_usart+0x68>)
   1ebdc:	4b0a      	ldr	r3, [pc, #40]	; (1ec08 <configure_usart+0x6c>)
   1ebde:	0018      	movs	r0, r3
   1ebe0:	4b0a      	ldr	r3, [pc, #40]	; (1ec0c <configure_usart+0x70>)
   1ebe2:	4798      	blx	r3
   1ebe4:	1e03      	subs	r3, r0, #0
   1ebe6:	d1f7      	bne.n	1ebd8 <configure_usart+0x3c>
    }

    usart_enable(&usart_instance);
   1ebe8:	4b07      	ldr	r3, [pc, #28]	; (1ec08 <configure_usart+0x6c>)
   1ebea:	0018      	movs	r0, r3
   1ebec:	4b08      	ldr	r3, [pc, #32]	; (1ec10 <configure_usart+0x74>)
   1ebee:	4798      	blx	r3
}
   1ebf0:	46c0      	nop			; (mov r8, r8)
   1ebf2:	46bd      	mov	sp, r7
   1ebf4:	b010      	add	sp, #64	; 0x40
   1ebf6:	bd80      	pop	{r7, pc}
   1ebf8:	0001e889 	.word	0x0001e889
   1ebfc:	002a0003 	.word	0x002a0003
   1ec00:	002b0003 	.word	0x002b0003
   1ec04:	42001800 	.word	0x42001800
   1ec08:	20005290 	.word	0x20005290
   1ec0c:	00029815 	.word	0x00029815
   1ec10:	0001e949 	.word	0x0001e949

0001ec14 <configure_usart_callbacks>:
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 */
static void configure_usart_callbacks(void)
{
   1ec14:	b580      	push	{r7, lr}
   1ec16:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
   1ec18:	490c      	ldr	r1, [pc, #48]	; (1ec4c <configure_usart_callbacks+0x38>)
   1ec1a:	4b0d      	ldr	r3, [pc, #52]	; (1ec50 <configure_usart_callbacks+0x3c>)
   1ec1c:	2200      	movs	r2, #0
   1ec1e:	0018      	movs	r0, r3
   1ec20:	4b0c      	ldr	r3, [pc, #48]	; (1ec54 <configure_usart_callbacks+0x40>)
   1ec22:	4798      	blx	r3
    usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
   1ec24:	490c      	ldr	r1, [pc, #48]	; (1ec58 <configure_usart_callbacks+0x44>)
   1ec26:	4b0a      	ldr	r3, [pc, #40]	; (1ec50 <configure_usart_callbacks+0x3c>)
   1ec28:	2201      	movs	r2, #1
   1ec2a:	0018      	movs	r0, r3
   1ec2c:	4b09      	ldr	r3, [pc, #36]	; (1ec54 <configure_usart_callbacks+0x40>)
   1ec2e:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
   1ec30:	4b07      	ldr	r3, [pc, #28]	; (1ec50 <configure_usart_callbacks+0x3c>)
   1ec32:	2100      	movs	r1, #0
   1ec34:	0018      	movs	r0, r3
   1ec36:	4b09      	ldr	r3, [pc, #36]	; (1ec5c <configure_usart_callbacks+0x48>)
   1ec38:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
   1ec3a:	4b05      	ldr	r3, [pc, #20]	; (1ec50 <configure_usart_callbacks+0x3c>)
   1ec3c:	2101      	movs	r1, #1
   1ec3e:	0018      	movs	r0, r3
   1ec40:	4b06      	ldr	r3, [pc, #24]	; (1ec5c <configure_usart_callbacks+0x48>)
   1ec42:	4798      	blx	r3
}
   1ec44:	46c0      	nop			; (mov r8, r8)
   1ec46:	46bd      	mov	sp, r7
   1ec48:	bd80      	pop	{r7, pc}
   1ec4a:	46c0      	nop			; (mov r8, r8)
   1ec4c:	0001eca9 	.word	0x0001eca9
   1ec50:	20005290 	.word	0x20005290
   1ec54:	00029bc9 	.word	0x00029bc9
   1ec58:	0001ec61 	.word	0x0001ec61
   1ec5c:	0001e991 	.word	0x0001e991

0001ec60 <usart_read_callback>:
 * @fn			void usart_read_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
 * @note
 */
void usart_read_callback(struct usart_module *const usart_module)
{
   1ec60:	b580      	push	{r7, lr}
   1ec62:	b082      	sub	sp, #8
   1ec64:	af00      	add	r7, sp, #0
   1ec66:	6078      	str	r0, [r7, #4]
    circular_buf_put(cbufRx, (uint8_t)latestRx);                      // Add the latest read character into the RX circular Buffer
   1ec68:	4b09      	ldr	r3, [pc, #36]	; (1ec90 <usart_read_callback+0x30>)
   1ec6a:	681a      	ldr	r2, [r3, #0]
   1ec6c:	4b09      	ldr	r3, [pc, #36]	; (1ec94 <usart_read_callback+0x34>)
   1ec6e:	781b      	ldrb	r3, [r3, #0]
   1ec70:	0019      	movs	r1, r3
   1ec72:	0010      	movs	r0, r2
   1ec74:	4b08      	ldr	r3, [pc, #32]	; (1ec98 <usart_read_callback+0x38>)
   1ec76:	4798      	blx	r3
    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Order the MCU to keep reading
   1ec78:	4906      	ldr	r1, [pc, #24]	; (1ec94 <usart_read_callback+0x34>)
   1ec7a:	4b08      	ldr	r3, [pc, #32]	; (1ec9c <usart_read_callback+0x3c>)
   1ec7c:	2201      	movs	r2, #1
   1ec7e:	0018      	movs	r0, r3
   1ec80:	4b07      	ldr	r3, [pc, #28]	; (1eca0 <usart_read_callback+0x40>)
   1ec82:	4798      	blx	r3
    CliCharReadySemaphoreGiveFromISR();                               // Give binary semaphore
   1ec84:	4b07      	ldr	r3, [pc, #28]	; (1eca4 <usart_read_callback+0x44>)
   1ec86:	4798      	blx	r3
}
   1ec88:	46c0      	nop			; (mov r8, r8)
   1ec8a:	46bd      	mov	sp, r7
   1ec8c:	b002      	add	sp, #8
   1ec8e:	bd80      	pop	{r7, pc}
   1ec90:	200052c4 	.word	0x200052c4
   1ec94:	200052c8 	.word	0x200052c8
   1ec98:	0001e759 	.word	0x0001e759
   1ec9c:	20005290 	.word	0x20005290
   1eca0:	00029c59 	.word	0x00029c59
   1eca4:	00013e2d 	.word	0x00013e2d

0001eca8 <usart_write_callback>:
 * @fn			void usart_write_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
 * @note
 */
void usart_write_callback(struct usart_module *const usart_module)
{
   1eca8:	b580      	push	{r7, lr}
   1ecaa:	b082      	sub	sp, #8
   1ecac:	af00      	add	r7, sp, #0
   1ecae:	6078      	str	r0, [r7, #4]
    if (circular_buf_get(cbufTx, (uint8_t *)&latestTx) != -1)  // Only continue if there are more characters to send
   1ecb0:	4b09      	ldr	r3, [pc, #36]	; (1ecd8 <usart_write_callback+0x30>)
   1ecb2:	681b      	ldr	r3, [r3, #0]
   1ecb4:	4a09      	ldr	r2, [pc, #36]	; (1ecdc <usart_write_callback+0x34>)
   1ecb6:	0011      	movs	r1, r2
   1ecb8:	0018      	movs	r0, r3
   1ecba:	4b09      	ldr	r3, [pc, #36]	; (1ece0 <usart_write_callback+0x38>)
   1ecbc:	4798      	blx	r3
   1ecbe:	0003      	movs	r3, r0
   1ecc0:	3301      	adds	r3, #1
   1ecc2:	d005      	beq.n	1ecd0 <usart_write_callback+0x28>
    {
        usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1ecc4:	4905      	ldr	r1, [pc, #20]	; (1ecdc <usart_write_callback+0x34>)
   1ecc6:	4b07      	ldr	r3, [pc, #28]	; (1ece4 <usart_write_callback+0x3c>)
   1ecc8:	2201      	movs	r2, #1
   1ecca:	0018      	movs	r0, r3
   1eccc:	4b06      	ldr	r3, [pc, #24]	; (1ece8 <usart_write_callback+0x40>)
   1ecce:	4798      	blx	r3
    }
}
   1ecd0:	46c0      	nop			; (mov r8, r8)
   1ecd2:	46bd      	mov	sp, r7
   1ecd4:	b002      	add	sp, #8
   1ecd6:	bd80      	pop	{r7, pc}
   1ecd8:	200056d0 	.word	0x200056d0
   1ecdc:	200056cc 	.word	0x200056cc
   1ece0:	0001e78d 	.word	0x0001e78d
   1ece4:	20005290 	.word	0x20005290
   1ece8:	00029c11 	.word	0x00029c11

0001ecec <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
   1ecec:	b590      	push	{r4, r7, lr}
   1ecee:	b087      	sub	sp, #28
   1ecf0:	af00      	add	r7, sp, #0
   1ecf2:	60f8      	str	r0, [r7, #12]
   1ecf4:	000c      	movs	r4, r1
   1ecf6:	0010      	movs	r0, r2
   1ecf8:	0019      	movs	r1, r3
   1ecfa:	230a      	movs	r3, #10
   1ecfc:	18fb      	adds	r3, r7, r3
   1ecfe:	1c22      	adds	r2, r4, #0
   1ed00:	801a      	strh	r2, [r3, #0]
   1ed02:	2308      	movs	r3, #8
   1ed04:	18fb      	adds	r3, r7, r3
   1ed06:	1c02      	adds	r2, r0, #0
   1ed08:	801a      	strh	r2, [r3, #0]
   1ed0a:	1dfb      	adds	r3, r7, #7
   1ed0c:	1c0a      	adds	r2, r1, #0
   1ed0e:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   1ed10:	230a      	movs	r3, #10
   1ed12:	18fb      	adds	r3, r7, r3
   1ed14:	881a      	ldrh	r2, [r3, #0]
   1ed16:	2308      	movs	r3, #8
   1ed18:	18fb      	adds	r3, r7, r3
   1ed1a:	881b      	ldrh	r3, [r3, #0]
   1ed1c:	1ad3      	subs	r3, r2, r3
   1ed1e:	3307      	adds	r3, #7
   1ed20:	2b00      	cmp	r3, #0
   1ed22:	da00      	bge.n	1ed26 <SDMMC_UNSTUFF_BITS+0x3a>
   1ed24:	3307      	adds	r3, #7
   1ed26:	10db      	asrs	r3, r3, #3
   1ed28:	3b01      	subs	r3, #1
   1ed2a:	68fa      	ldr	r2, [r7, #12]
   1ed2c:	18d3      	adds	r3, r2, r3
   1ed2e:	781b      	ldrb	r3, [r3, #0]
   1ed30:	0019      	movs	r1, r3
   1ed32:	2308      	movs	r3, #8
   1ed34:	18fb      	adds	r3, r7, r3
   1ed36:	881b      	ldrh	r3, [r3, #0]
   1ed38:	2207      	movs	r2, #7
   1ed3a:	4013      	ands	r3, r2
   1ed3c:	4119      	asrs	r1, r3
   1ed3e:	000b      	movs	r3, r1
   1ed40:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
   1ed42:	2308      	movs	r3, #8
   1ed44:	18fb      	adds	r3, r7, r3
   1ed46:	881b      	ldrh	r3, [r3, #0]
   1ed48:	2207      	movs	r2, #7
   1ed4a:	401a      	ands	r2, r3
   1ed4c:	1dfb      	adds	r3, r7, #7
   1ed4e:	781b      	ldrb	r3, [r3, #0]
   1ed50:	18d3      	adds	r3, r2, r3
   1ed52:	2b08      	cmp	r3, #8
   1ed54:	dd1c      	ble.n	1ed90 <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   1ed56:	230a      	movs	r3, #10
   1ed58:	18fb      	adds	r3, r7, r3
   1ed5a:	881a      	ldrh	r2, [r3, #0]
   1ed5c:	2308      	movs	r3, #8
   1ed5e:	18fb      	adds	r3, r7, r3
   1ed60:	881b      	ldrh	r3, [r3, #0]
   1ed62:	1ad3      	subs	r3, r2, r3
   1ed64:	3307      	adds	r3, #7
   1ed66:	2b00      	cmp	r3, #0
   1ed68:	da00      	bge.n	1ed6c <SDMMC_UNSTUFF_BITS+0x80>
   1ed6a:	3307      	adds	r3, #7
   1ed6c:	10db      	asrs	r3, r3, #3
   1ed6e:	3b02      	subs	r3, #2
   1ed70:	68fa      	ldr	r2, [r7, #12]
   1ed72:	18d3      	adds	r3, r2, r3
   1ed74:	781b      	ldrb	r3, [r3, #0]
   1ed76:	0019      	movs	r1, r3
   1ed78:	2308      	movs	r3, #8
   1ed7a:	18fb      	adds	r3, r7, r3
   1ed7c:	881b      	ldrh	r3, [r3, #0]
   1ed7e:	2207      	movs	r2, #7
   1ed80:	4013      	ands	r3, r2
   1ed82:	2208      	movs	r2, #8
   1ed84:	1ad3      	subs	r3, r2, r3
   1ed86:	4099      	lsls	r1, r3
   1ed88:	000b      	movs	r3, r1
   1ed8a:	697a      	ldr	r2, [r7, #20]
   1ed8c:	4313      	orrs	r3, r2
   1ed8e:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1ed90:	2308      	movs	r3, #8
   1ed92:	18fb      	adds	r3, r7, r3
   1ed94:	881b      	ldrh	r3, [r3, #0]
   1ed96:	2207      	movs	r2, #7
   1ed98:	401a      	ands	r2, r3
   1ed9a:	1dfb      	adds	r3, r7, #7
   1ed9c:	781b      	ldrb	r3, [r3, #0]
   1ed9e:	18d3      	adds	r3, r2, r3
   1eda0:	2b10      	cmp	r3, #16
   1eda2:	dd1c      	ble.n	1edde <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1eda4:	230a      	movs	r3, #10
   1eda6:	18fb      	adds	r3, r7, r3
   1eda8:	881a      	ldrh	r2, [r3, #0]
   1edaa:	2308      	movs	r3, #8
   1edac:	18fb      	adds	r3, r7, r3
   1edae:	881b      	ldrh	r3, [r3, #0]
   1edb0:	1ad3      	subs	r3, r2, r3
   1edb2:	3307      	adds	r3, #7
   1edb4:	2b00      	cmp	r3, #0
   1edb6:	da00      	bge.n	1edba <SDMMC_UNSTUFF_BITS+0xce>
   1edb8:	3307      	adds	r3, #7
   1edba:	10db      	asrs	r3, r3, #3
   1edbc:	3b03      	subs	r3, #3
   1edbe:	68fa      	ldr	r2, [r7, #12]
   1edc0:	18d3      	adds	r3, r2, r3
   1edc2:	781b      	ldrb	r3, [r3, #0]
   1edc4:	0019      	movs	r1, r3
   1edc6:	2308      	movs	r3, #8
   1edc8:	18fb      	adds	r3, r7, r3
   1edca:	881b      	ldrh	r3, [r3, #0]
   1edcc:	2207      	movs	r2, #7
   1edce:	4013      	ands	r3, r2
   1edd0:	2210      	movs	r2, #16
   1edd2:	1ad3      	subs	r3, r2, r3
   1edd4:	4099      	lsls	r1, r3
   1edd6:	000b      	movs	r3, r1
   1edd8:	697a      	ldr	r2, [r7, #20]
   1edda:	4313      	orrs	r3, r2
   1eddc:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1edde:	2308      	movs	r3, #8
   1ede0:	18fb      	adds	r3, r7, r3
   1ede2:	881b      	ldrh	r3, [r3, #0]
   1ede4:	2207      	movs	r2, #7
   1ede6:	401a      	ands	r2, r3
   1ede8:	1dfb      	adds	r3, r7, #7
   1edea:	781b      	ldrb	r3, [r3, #0]
   1edec:	18d3      	adds	r3, r2, r3
   1edee:	2b10      	cmp	r3, #16
   1edf0:	dd1c      	ble.n	1ee2c <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1edf2:	230a      	movs	r3, #10
   1edf4:	18fb      	adds	r3, r7, r3
   1edf6:	881a      	ldrh	r2, [r3, #0]
   1edf8:	2308      	movs	r3, #8
   1edfa:	18fb      	adds	r3, r7, r3
   1edfc:	881b      	ldrh	r3, [r3, #0]
   1edfe:	1ad3      	subs	r3, r2, r3
   1ee00:	3307      	adds	r3, #7
   1ee02:	2b00      	cmp	r3, #0
   1ee04:	da00      	bge.n	1ee08 <SDMMC_UNSTUFF_BITS+0x11c>
   1ee06:	3307      	adds	r3, #7
   1ee08:	10db      	asrs	r3, r3, #3
   1ee0a:	3b03      	subs	r3, #3
   1ee0c:	68fa      	ldr	r2, [r7, #12]
   1ee0e:	18d3      	adds	r3, r2, r3
   1ee10:	781b      	ldrb	r3, [r3, #0]
   1ee12:	0019      	movs	r1, r3
   1ee14:	2308      	movs	r3, #8
   1ee16:	18fb      	adds	r3, r7, r3
   1ee18:	881b      	ldrh	r3, [r3, #0]
   1ee1a:	2207      	movs	r2, #7
   1ee1c:	4013      	ands	r3, r2
   1ee1e:	2210      	movs	r2, #16
   1ee20:	1ad3      	subs	r3, r2, r3
   1ee22:	4099      	lsls	r1, r3
   1ee24:	000b      	movs	r3, r1
   1ee26:	697a      	ldr	r2, [r7, #20]
   1ee28:	4313      	orrs	r3, r2
   1ee2a:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
   1ee2c:	1dfb      	adds	r3, r7, #7
   1ee2e:	781b      	ldrb	r3, [r3, #0]
   1ee30:	2201      	movs	r2, #1
   1ee32:	409a      	lsls	r2, r3
   1ee34:	0013      	movs	r3, r2
   1ee36:	1e5a      	subs	r2, r3, #1
   1ee38:	697b      	ldr	r3, [r7, #20]
   1ee3a:	4013      	ands	r3, r2
   1ee3c:	617b      	str	r3, [r7, #20]
	return value;
   1ee3e:	697b      	ldr	r3, [r7, #20]
}
   1ee40:	0018      	movs	r0, r3
   1ee42:	46bd      	mov	sp, r7
   1ee44:	b007      	add	sp, #28
   1ee46:	bd90      	pop	{r4, r7, pc}

0001ee48 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
   1ee48:	b580      	push	{r7, lr}
   1ee4a:	b082      	sub	sp, #8
   1ee4c:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1ee4e:	4b23      	ldr	r3, [pc, #140]	; (1eedc <mmc_spi_op_cond+0x94>)
   1ee50:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
   1ee52:	4b23      	ldr	r3, [pc, #140]	; (1eee0 <mmc_spi_op_cond+0x98>)
   1ee54:	2100      	movs	r1, #0
   1ee56:	0018      	movs	r0, r3
   1ee58:	4b22      	ldr	r3, [pc, #136]	; (1eee4 <mmc_spi_op_cond+0x9c>)
   1ee5a:	4798      	blx	r3
   1ee5c:	0003      	movs	r3, r0
   1ee5e:	001a      	movs	r2, r3
   1ee60:	2301      	movs	r3, #1
   1ee62:	4053      	eors	r3, r2
   1ee64:	b2db      	uxtb	r3, r3
   1ee66:	2b00      	cmp	r3, #0
   1ee68:	d001      	beq.n	1ee6e <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
   1ee6a:	2300      	movs	r3, #0
   1ee6c:	e031      	b.n	1eed2 <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
   1ee6e:	4b1e      	ldr	r3, [pc, #120]	; (1eee8 <mmc_spi_op_cond+0xa0>)
   1ee70:	4798      	blx	r3
   1ee72:	0003      	movs	r3, r0
   1ee74:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
   1ee76:	683b      	ldr	r3, [r7, #0]
   1ee78:	2201      	movs	r2, #1
   1ee7a:	4013      	ands	r3, r2
   1ee7c:	d006      	beq.n	1ee8c <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
   1ee7e:	687b      	ldr	r3, [r7, #4]
   1ee80:	1e5a      	subs	r2, r3, #1
   1ee82:	607a      	str	r2, [r7, #4]
   1ee84:	2b00      	cmp	r3, #0
   1ee86:	d1e4      	bne.n	1ee52 <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
   1ee88:	2300      	movs	r3, #0
   1ee8a:	e022      	b.n	1eed2 <mmc_spi_op_cond+0x8a>
			break;
   1ee8c:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1ee8e:	4b17      	ldr	r3, [pc, #92]	; (1eeec <mmc_spi_op_cond+0xa4>)
   1ee90:	2100      	movs	r1, #0
   1ee92:	0018      	movs	r0, r3
   1ee94:	4b13      	ldr	r3, [pc, #76]	; (1eee4 <mmc_spi_op_cond+0x9c>)
   1ee96:	4798      	blx	r3
   1ee98:	0003      	movs	r3, r0
   1ee9a:	001a      	movs	r2, r3
   1ee9c:	2301      	movs	r3, #1
   1ee9e:	4053      	eors	r3, r2
   1eea0:	b2db      	uxtb	r3, r3
   1eea2:	2b00      	cmp	r3, #0
   1eea4:	d001      	beq.n	1eeaa <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1eea6:	2300      	movs	r3, #0
   1eea8:	e013      	b.n	1eed2 <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
   1eeaa:	4b0f      	ldr	r3, [pc, #60]	; (1eee8 <mmc_spi_op_cond+0xa0>)
   1eeac:	4798      	blx	r3
   1eeae:	0002      	movs	r2, r0
   1eeb0:	23c0      	movs	r3, #192	; 0xc0
   1eeb2:	05db      	lsls	r3, r3, #23
   1eeb4:	401a      	ands	r2, r3
   1eeb6:	2380      	movs	r3, #128	; 0x80
   1eeb8:	05db      	lsls	r3, r3, #23
   1eeba:	429a      	cmp	r2, r3
   1eebc:	d108      	bne.n	1eed0 <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
   1eebe:	4b0c      	ldr	r3, [pc, #48]	; (1eef0 <mmc_spi_op_cond+0xa8>)
   1eec0:	681a      	ldr	r2, [r3, #0]
   1eec2:	4b0b      	ldr	r3, [pc, #44]	; (1eef0 <mmc_spi_op_cond+0xa8>)
   1eec4:	681b      	ldr	r3, [r3, #0]
   1eec6:	7adb      	ldrb	r3, [r3, #11]
   1eec8:	2108      	movs	r1, #8
   1eeca:	430b      	orrs	r3, r1
   1eecc:	b2db      	uxtb	r3, r3
   1eece:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1eed0:	2301      	movs	r3, #1
}
   1eed2:	0018      	movs	r0, r3
   1eed4:	46bd      	mov	sp, r7
   1eed6:	b002      	add	sp, #8
   1eed8:	bd80      	pop	{r7, pc}
   1eeda:	46c0      	nop			; (mov r8, r8)
   1eedc:	00001bee 	.word	0x00001bee
   1eee0:	00001101 	.word	0x00001101
   1eee4:	000208c5 	.word	0x000208c5
   1eee8:	00020b05 	.word	0x00020b05
   1eeec:	0000053a 	.word	0x0000053a
   1eef0:	20003e80 	.word	0x20003e80

0001eef4 <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
   1eef4:	b580      	push	{r7, lr}
   1eef6:	b086      	sub	sp, #24
   1eef8:	af00      	add	r7, sp, #0
   1eefa:	0002      	movs	r2, r0
   1eefc:	1dfb      	adds	r3, r7, #7
   1eefe:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1ef00:	4b2e      	ldr	r3, [pc, #184]	; (1efbc <sd_spi_op_cond+0xc8>)
   1ef02:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   1ef04:	4b2e      	ldr	r3, [pc, #184]	; (1efc0 <sd_spi_op_cond+0xcc>)
   1ef06:	2100      	movs	r1, #0
   1ef08:	0018      	movs	r0, r3
   1ef0a:	4b2e      	ldr	r3, [pc, #184]	; (1efc4 <sd_spi_op_cond+0xd0>)
   1ef0c:	4798      	blx	r3
   1ef0e:	0003      	movs	r3, r0
   1ef10:	001a      	movs	r2, r3
   1ef12:	2301      	movs	r3, #1
   1ef14:	4053      	eors	r3, r2
   1ef16:	b2db      	uxtb	r3, r3
   1ef18:	2b00      	cmp	r3, #0
   1ef1a:	d001      	beq.n	1ef20 <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
   1ef1c:	2300      	movs	r3, #0
   1ef1e:	e048      	b.n	1efb2 <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
   1ef20:	2300      	movs	r3, #0
   1ef22:	617b      	str	r3, [r7, #20]
		if (v2) {
   1ef24:	1dfb      	adds	r3, r7, #7
   1ef26:	781b      	ldrb	r3, [r3, #0]
   1ef28:	2b00      	cmp	r3, #0
   1ef2a:	d004      	beq.n	1ef36 <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
   1ef2c:	697b      	ldr	r3, [r7, #20]
   1ef2e:	2280      	movs	r2, #128	; 0x80
   1ef30:	05d2      	lsls	r2, r2, #23
   1ef32:	4313      	orrs	r3, r2
   1ef34:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
   1ef36:	697b      	ldr	r3, [r7, #20]
   1ef38:	4a23      	ldr	r2, [pc, #140]	; (1efc8 <sd_spi_op_cond+0xd4>)
   1ef3a:	0019      	movs	r1, r3
   1ef3c:	0010      	movs	r0, r2
   1ef3e:	4b21      	ldr	r3, [pc, #132]	; (1efc4 <sd_spi_op_cond+0xd0>)
   1ef40:	4798      	blx	r3
   1ef42:	0003      	movs	r3, r0
   1ef44:	001a      	movs	r2, r3
   1ef46:	2301      	movs	r3, #1
   1ef48:	4053      	eors	r3, r2
   1ef4a:	b2db      	uxtb	r3, r3
   1ef4c:	2b00      	cmp	r3, #0
   1ef4e:	d001      	beq.n	1ef54 <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
   1ef50:	2300      	movs	r3, #0
   1ef52:	e02e      	b.n	1efb2 <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
   1ef54:	4b1d      	ldr	r3, [pc, #116]	; (1efcc <sd_spi_op_cond+0xd8>)
   1ef56:	4798      	blx	r3
   1ef58:	0003      	movs	r3, r0
   1ef5a:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
   1ef5c:	68fb      	ldr	r3, [r7, #12]
   1ef5e:	2201      	movs	r2, #1
   1ef60:	4013      	ands	r3, r2
   1ef62:	d006      	beq.n	1ef72 <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
   1ef64:	693b      	ldr	r3, [r7, #16]
   1ef66:	1e5a      	subs	r2, r3, #1
   1ef68:	613a      	str	r2, [r7, #16]
   1ef6a:	2b00      	cmp	r3, #0
   1ef6c:	d1ca      	bne.n	1ef04 <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
   1ef6e:	2300      	movs	r3, #0
   1ef70:	e01f      	b.n	1efb2 <sd_spi_op_cond+0xbe>
			break;
   1ef72:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1ef74:	4b16      	ldr	r3, [pc, #88]	; (1efd0 <sd_spi_op_cond+0xdc>)
   1ef76:	2100      	movs	r1, #0
   1ef78:	0018      	movs	r0, r3
   1ef7a:	4b12      	ldr	r3, [pc, #72]	; (1efc4 <sd_spi_op_cond+0xd0>)
   1ef7c:	4798      	blx	r3
   1ef7e:	0003      	movs	r3, r0
   1ef80:	001a      	movs	r2, r3
   1ef82:	2301      	movs	r3, #1
   1ef84:	4053      	eors	r3, r2
   1ef86:	b2db      	uxtb	r3, r3
   1ef88:	2b00      	cmp	r3, #0
   1ef8a:	d001      	beq.n	1ef90 <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1ef8c:	2300      	movs	r3, #0
   1ef8e:	e010      	b.n	1efb2 <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
   1ef90:	4b0e      	ldr	r3, [pc, #56]	; (1efcc <sd_spi_op_cond+0xd8>)
   1ef92:	4798      	blx	r3
   1ef94:	0002      	movs	r2, r0
   1ef96:	2380      	movs	r3, #128	; 0x80
   1ef98:	05db      	lsls	r3, r3, #23
   1ef9a:	4013      	ands	r3, r2
   1ef9c:	d008      	beq.n	1efb0 <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
   1ef9e:	4b0d      	ldr	r3, [pc, #52]	; (1efd4 <sd_spi_op_cond+0xe0>)
   1efa0:	681a      	ldr	r2, [r3, #0]
   1efa2:	4b0c      	ldr	r3, [pc, #48]	; (1efd4 <sd_spi_op_cond+0xe0>)
   1efa4:	681b      	ldr	r3, [r3, #0]
   1efa6:	7adb      	ldrb	r3, [r3, #11]
   1efa8:	2108      	movs	r1, #8
   1efaa:	430b      	orrs	r3, r1
   1efac:	b2db      	uxtb	r3, r3
   1efae:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1efb0:	2301      	movs	r3, #1
}
   1efb2:	0018      	movs	r0, r3
   1efb4:	46bd      	mov	sp, r7
   1efb6:	b006      	add	sp, #24
   1efb8:	bd80      	pop	{r7, pc}
   1efba:	46c0      	nop			; (mov r8, r8)
   1efbc:	00001bee 	.word	0x00001bee
   1efc0:	00001137 	.word	0x00001137
   1efc4:	000208c5 	.word	0x000208c5
   1efc8:	00001129 	.word	0x00001129
   1efcc:	00020b05 	.word	0x00020b05
   1efd0:	0000053a 	.word	0x0000053a
   1efd4:	20003e80 	.word	0x20003e80

0001efd8 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
   1efd8:	b580      	push	{r7, lr}
   1efda:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
   1efdc:	2301      	movs	r3, #1
}
   1efde:	0018      	movs	r0, r3
   1efe0:	46bd      	mov	sp, r7
   1efe2:	bd80      	pop	{r7, pc}

0001efe4 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
   1efe4:	b580      	push	{r7, lr}
   1efe6:	b084      	sub	sp, #16
   1efe8:	af00      	add	r7, sp, #0
   1efea:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
   1efec:	687b      	ldr	r3, [r7, #4]
   1efee:	2200      	movs	r2, #0
   1eff0:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   1eff2:	23d5      	movs	r3, #213	; 0xd5
   1eff4:	005b      	lsls	r3, r3, #1
   1eff6:	4a14      	ldr	r2, [pc, #80]	; (1f048 <sd_cmd8+0x64>)
   1eff8:	0019      	movs	r1, r3
   1effa:	0010      	movs	r0, r2
   1effc:	4b13      	ldr	r3, [pc, #76]	; (1f04c <sd_cmd8+0x68>)
   1effe:	4798      	blx	r3
   1f000:	0003      	movs	r3, r0
   1f002:	001a      	movs	r2, r3
   1f004:	2301      	movs	r3, #1
   1f006:	4053      	eors	r3, r2
   1f008:	b2db      	uxtb	r3, r3
   1f00a:	2b00      	cmp	r3, #0
   1f00c:	d001      	beq.n	1f012 <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
   1f00e:	2301      	movs	r3, #1
   1f010:	e015      	b.n	1f03e <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
   1f012:	4b0f      	ldr	r3, [pc, #60]	; (1f050 <sd_cmd8+0x6c>)
   1f014:	4798      	blx	r3
   1f016:	0003      	movs	r3, r0
   1f018:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
   1f01a:	68fb      	ldr	r3, [r7, #12]
   1f01c:	3301      	adds	r3, #1
   1f01e:	d101      	bne.n	1f024 <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
   1f020:	2301      	movs	r3, #1
   1f022:	e00c      	b.n	1f03e <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   1f024:	68fb      	ldr	r3, [r7, #12]
   1f026:	051b      	lsls	r3, r3, #20
   1f028:	0d1a      	lsrs	r2, r3, #20
   1f02a:	23d5      	movs	r3, #213	; 0xd5
   1f02c:	005b      	lsls	r3, r3, #1
   1f02e:	429a      	cmp	r2, r3
   1f030:	d001      	beq.n	1f036 <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
   1f032:	2300      	movs	r3, #0
   1f034:	e003      	b.n	1f03e <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
   1f036:	687b      	ldr	r3, [r7, #4]
   1f038:	2201      	movs	r2, #1
   1f03a:	701a      	strb	r2, [r3, #0]
	return true;
   1f03c:	2301      	movs	r3, #1
}
   1f03e:	0018      	movs	r0, r3
   1f040:	46bd      	mov	sp, r7
   1f042:	b004      	add	sp, #16
   1f044:	bd80      	pop	{r7, pc}
   1f046:	46c0      	nop			; (mov r8, r8)
   1f048:	00005508 	.word	0x00005508
   1f04c:	000208c5 	.word	0x000208c5
   1f050:	00020b05 	.word	0x00020b05

0001f054 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
   1f054:	b590      	push	{r4, r7, lr}
   1f056:	b089      	sub	sp, #36	; 0x24
   1f058:	af02      	add	r7, sp, #8
   1f05a:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
   1f05c:	2380      	movs	r3, #128	; 0x80
   1f05e:	009a      	lsls	r2, r3, #2
   1f060:	4841      	ldr	r0, [pc, #260]	; (1f168 <mmc_cmd8+0x114>)
   1f062:	2300      	movs	r3, #0
   1f064:	9300      	str	r3, [sp, #0]
   1f066:	2301      	movs	r3, #1
   1f068:	2100      	movs	r1, #0
   1f06a:	4c40      	ldr	r4, [pc, #256]	; (1f16c <mmc_cmd8+0x118>)
   1f06c:	47a0      	blx	r4
   1f06e:	0003      	movs	r3, r0
   1f070:	001a      	movs	r2, r3
   1f072:	2301      	movs	r3, #1
   1f074:	4053      	eors	r3, r2
   1f076:	b2db      	uxtb	r3, r3
   1f078:	2b00      	cmp	r3, #0
   1f07a:	d001      	beq.n	1f080 <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
   1f07c:	2300      	movs	r3, #0
   1f07e:	e06e      	b.n	1f15e <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1f080:	2316      	movs	r3, #22
   1f082:	18fb      	adds	r3, r7, r3
   1f084:	2200      	movs	r2, #0
   1f086:	801a      	strh	r2, [r3, #0]
   1f088:	e014      	b.n	1f0b4 <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
   1f08a:	2310      	movs	r3, #16
   1f08c:	18fb      	adds	r3, r7, r3
   1f08e:	0018      	movs	r0, r3
   1f090:	4b37      	ldr	r3, [pc, #220]	; (1f170 <mmc_cmd8+0x11c>)
   1f092:	4798      	blx	r3
   1f094:	0003      	movs	r3, r0
   1f096:	001a      	movs	r2, r3
   1f098:	2301      	movs	r3, #1
   1f09a:	4053      	eors	r3, r2
   1f09c:	b2db      	uxtb	r3, r3
   1f09e:	2b00      	cmp	r3, #0
   1f0a0:	d001      	beq.n	1f0a6 <mmc_cmd8+0x52>
			return false;
   1f0a2:	2300      	movs	r3, #0
   1f0a4:	e05b      	b.n	1f15e <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1f0a6:	2316      	movs	r3, #22
   1f0a8:	18fb      	adds	r3, r7, r3
   1f0aa:	881a      	ldrh	r2, [r3, #0]
   1f0ac:	2316      	movs	r3, #22
   1f0ae:	18fb      	adds	r3, r7, r3
   1f0b0:	3201      	adds	r2, #1
   1f0b2:	801a      	strh	r2, [r3, #0]
   1f0b4:	2316      	movs	r3, #22
   1f0b6:	18fb      	adds	r3, r7, r3
   1f0b8:	881b      	ldrh	r3, [r3, #0]
   1f0ba:	2b31      	cmp	r3, #49	; 0x31
   1f0bc:	d9e5      	bls.n	1f08a <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
   1f0be:	693b      	ldr	r3, [r7, #16]
   1f0c0:	b2db      	uxtb	r3, r3
   1f0c2:	2202      	movs	r2, #2
   1f0c4:	4013      	ands	r3, r2
   1f0c6:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
   1f0c8:	687b      	ldr	r3, [r7, #4]
   1f0ca:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
   1f0cc:	4b29      	ldr	r3, [pc, #164]	; (1f174 <mmc_cmd8+0x120>)
   1f0ce:	681b      	ldr	r3, [r3, #0]
   1f0d0:	330e      	adds	r3, #14
   1f0d2:	0018      	movs	r0, r3
   1f0d4:	230c      	movs	r3, #12
   1f0d6:	223e      	movs	r2, #62	; 0x3e
   1f0d8:	2180      	movs	r1, #128	; 0x80
   1f0da:	4c27      	ldr	r4, [pc, #156]	; (1f178 <mmc_cmd8+0x124>)
   1f0dc:	47a0      	blx	r4
   1f0de:	0002      	movs	r2, r0
   1f0e0:	4b26      	ldr	r3, [pc, #152]	; (1f17c <mmc_cmd8+0x128>)
   1f0e2:	429a      	cmp	r2, r3
   1f0e4:	d135      	bne.n	1f152 <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1f0e6:	e014      	b.n	1f112 <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
   1f0e8:	230c      	movs	r3, #12
   1f0ea:	18fb      	adds	r3, r7, r3
   1f0ec:	0018      	movs	r0, r3
   1f0ee:	4b20      	ldr	r3, [pc, #128]	; (1f170 <mmc_cmd8+0x11c>)
   1f0f0:	4798      	blx	r3
   1f0f2:	0003      	movs	r3, r0
   1f0f4:	001a      	movs	r2, r3
   1f0f6:	2301      	movs	r3, #1
   1f0f8:	4053      	eors	r3, r2
   1f0fa:	b2db      	uxtb	r3, r3
   1f0fc:	2b00      	cmp	r3, #0
   1f0fe:	d001      	beq.n	1f104 <mmc_cmd8+0xb0>
				return false;
   1f100:	2300      	movs	r3, #0
   1f102:	e02c      	b.n	1f15e <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1f104:	2316      	movs	r3, #22
   1f106:	18fb      	adds	r3, r7, r3
   1f108:	881a      	ldrh	r2, [r3, #0]
   1f10a:	2316      	movs	r3, #22
   1f10c:	18fb      	adds	r3, r7, r3
   1f10e:	3201      	adds	r2, #1
   1f110:	801a      	strh	r2, [r3, #0]
   1f112:	2316      	movs	r3, #22
   1f114:	18fb      	adds	r3, r7, r3
   1f116:	881b      	ldrh	r3, [r3, #0]
   1f118:	2b35      	cmp	r3, #53	; 0x35
   1f11a:	d9e5      	bls.n	1f0e8 <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
   1f11c:	4b15      	ldr	r3, [pc, #84]	; (1f174 <mmc_cmd8+0x120>)
   1f11e:	681b      	ldr	r3, [r3, #0]
   1f120:	68fa      	ldr	r2, [r7, #12]
   1f122:	0852      	lsrs	r2, r2, #1
   1f124:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1f126:	e014      	b.n	1f152 <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
   1f128:	230c      	movs	r3, #12
   1f12a:	18fb      	adds	r3, r7, r3
   1f12c:	0018      	movs	r0, r3
   1f12e:	4b10      	ldr	r3, [pc, #64]	; (1f170 <mmc_cmd8+0x11c>)
   1f130:	4798      	blx	r3
   1f132:	0003      	movs	r3, r0
   1f134:	001a      	movs	r2, r3
   1f136:	2301      	movs	r3, #1
   1f138:	4053      	eors	r3, r2
   1f13a:	b2db      	uxtb	r3, r3
   1f13c:	2b00      	cmp	r3, #0
   1f13e:	d001      	beq.n	1f144 <mmc_cmd8+0xf0>
			return false;
   1f140:	2300      	movs	r3, #0
   1f142:	e00c      	b.n	1f15e <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1f144:	2316      	movs	r3, #22
   1f146:	18fb      	adds	r3, r7, r3
   1f148:	881a      	ldrh	r2, [r3, #0]
   1f14a:	2316      	movs	r3, #22
   1f14c:	18fb      	adds	r3, r7, r3
   1f14e:	3201      	adds	r2, #1
   1f150:	801a      	strh	r2, [r3, #0]
   1f152:	2316      	movs	r3, #22
   1f154:	18fb      	adds	r3, r7, r3
   1f156:	881b      	ldrh	r3, [r3, #0]
   1f158:	2b7f      	cmp	r3, #127	; 0x7f
   1f15a:	d9e5      	bls.n	1f128 <mmc_cmd8+0xd4>
		}
	}
	return true;
   1f15c:	2301      	movs	r3, #1
}
   1f15e:	0018      	movs	r0, r3
   1f160:	46bd      	mov	sp, r7
   1f162:	b007      	add	sp, #28
   1f164:	bd90      	pop	{r4, r7, pc}
   1f166:	46c0      	nop			; (mov r8, r8)
   1f168:	00081108 	.word	0x00081108
   1f16c:	000208ed 	.word	0x000208ed
   1f170:	00020b19 	.word	0x00020b19
   1f174:	20003e80 	.word	0x20003e80
   1f178:	0001eced 	.word	0x0001eced
   1f17c:	00000fff 	.word	0x00000fff

0001f180 <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
   1f180:	b590      	push	{r4, r7, lr}
   1f182:	b083      	sub	sp, #12
   1f184:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
   1f186:	4b15      	ldr	r3, [pc, #84]	; (1f1dc <sd_mmc_cmd9_spi+0x5c>)
   1f188:	681b      	ldr	r3, [r3, #0]
   1f18a:	891b      	ldrh	r3, [r3, #8]
   1f18c:	0419      	lsls	r1, r3, #16
   1f18e:	4814      	ldr	r0, [pc, #80]	; (1f1e0 <sd_mmc_cmd9_spi+0x60>)
   1f190:	2301      	movs	r3, #1
   1f192:	9300      	str	r3, [sp, #0]
   1f194:	2301      	movs	r3, #1
   1f196:	2210      	movs	r2, #16
   1f198:	4c12      	ldr	r4, [pc, #72]	; (1f1e4 <sd_mmc_cmd9_spi+0x64>)
   1f19a:	47a0      	blx	r4
   1f19c:	0003      	movs	r3, r0
   1f19e:	001a      	movs	r2, r3
   1f1a0:	2301      	movs	r3, #1
   1f1a2:	4053      	eors	r3, r2
   1f1a4:	b2db      	uxtb	r3, r3
   1f1a6:	2b00      	cmp	r3, #0
   1f1a8:	d001      	beq.n	1f1ae <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
   1f1aa:	2300      	movs	r3, #0
   1f1ac:	e012      	b.n	1f1d4 <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
   1f1ae:	4b0b      	ldr	r3, [pc, #44]	; (1f1dc <sd_mmc_cmd9_spi+0x5c>)
   1f1b0:	681b      	ldr	r3, [r3, #0]
   1f1b2:	330e      	adds	r3, #14
   1f1b4:	2101      	movs	r1, #1
   1f1b6:	0018      	movs	r0, r3
   1f1b8:	4b0b      	ldr	r3, [pc, #44]	; (1f1e8 <sd_mmc_cmd9_spi+0x68>)
   1f1ba:	4798      	blx	r3
   1f1bc:	0003      	movs	r3, r0
   1f1be:	001a      	movs	r2, r3
   1f1c0:	2301      	movs	r3, #1
   1f1c2:	4053      	eors	r3, r2
   1f1c4:	b2db      	uxtb	r3, r3
   1f1c6:	2b00      	cmp	r3, #0
   1f1c8:	d001      	beq.n	1f1ce <sd_mmc_cmd9_spi+0x4e>
		return false;
   1f1ca:	2300      	movs	r3, #0
   1f1cc:	e002      	b.n	1f1d4 <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
   1f1ce:	4b07      	ldr	r3, [pc, #28]	; (1f1ec <sd_mmc_cmd9_spi+0x6c>)
   1f1d0:	4798      	blx	r3
   1f1d2:	0003      	movs	r3, r0
}
   1f1d4:	0018      	movs	r0, r3
   1f1d6:	46bd      	mov	sp, r7
   1f1d8:	b001      	add	sp, #4
   1f1da:	bd90      	pop	{r4, r7, pc}
   1f1dc:	20003e80 	.word	0x20003e80
   1f1e0:	00081109 	.word	0x00081109
   1f1e4:	000208ed 	.word	0x000208ed
   1f1e8:	00020bbd 	.word	0x00020bbd
   1f1ec:	00020c61 	.word	0x00020c61

0001f1f0 <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
   1f1f0:	b5b0      	push	{r4, r5, r7, lr}
   1f1f2:	b084      	sub	sp, #16
   1f1f4:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   1f1f6:	4b45      	ldr	r3, [pc, #276]	; (1f30c <mmc_decode_csd+0x11c>)
   1f1f8:	681b      	ldr	r3, [r3, #0]
   1f1fa:	330e      	adds	r3, #14
   1f1fc:	0018      	movs	r0, r3
   1f1fe:	2304      	movs	r3, #4
   1f200:	227a      	movs	r2, #122	; 0x7a
   1f202:	2180      	movs	r1, #128	; 0x80
   1f204:	4c42      	ldr	r4, [pc, #264]	; (1f310 <mmc_decode_csd+0x120>)
   1f206:	47a0      	blx	r4
   1f208:	0003      	movs	r3, r0
   1f20a:	2b02      	cmp	r3, #2
   1f20c:	d011      	beq.n	1f232 <mmc_decode_csd+0x42>
   1f20e:	d802      	bhi.n	1f216 <mmc_decode_csd+0x26>
   1f210:	2b01      	cmp	r3, #1
   1f212:	d009      	beq.n	1f228 <mmc_decode_csd+0x38>
   1f214:	e003      	b.n	1f21e <mmc_decode_csd+0x2e>
   1f216:	2b03      	cmp	r3, #3
   1f218:	d010      	beq.n	1f23c <mmc_decode_csd+0x4c>
   1f21a:	2b04      	cmp	r3, #4
   1f21c:	d013      	beq.n	1f246 <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
   1f21e:	4b3b      	ldr	r3, [pc, #236]	; (1f30c <mmc_decode_csd+0x11c>)
   1f220:	681b      	ldr	r3, [r3, #0]
   1f222:	2212      	movs	r2, #18
   1f224:	731a      	strb	r2, [r3, #12]
		break;
   1f226:	e013      	b.n	1f250 <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
   1f228:	4b38      	ldr	r3, [pc, #224]	; (1f30c <mmc_decode_csd+0x11c>)
   1f22a:	681b      	ldr	r3, [r3, #0]
   1f22c:	2214      	movs	r2, #20
   1f22e:	731a      	strb	r2, [r3, #12]
		break;
   1f230:	e00e      	b.n	1f250 <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
   1f232:	4b36      	ldr	r3, [pc, #216]	; (1f30c <mmc_decode_csd+0x11c>)
   1f234:	681b      	ldr	r3, [r3, #0]
   1f236:	2222      	movs	r2, #34	; 0x22
   1f238:	731a      	strb	r2, [r3, #12]
		break;
   1f23a:	e009      	b.n	1f250 <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
   1f23c:	4b33      	ldr	r3, [pc, #204]	; (1f30c <mmc_decode_csd+0x11c>)
   1f23e:	681b      	ldr	r3, [r3, #0]
   1f240:	2230      	movs	r2, #48	; 0x30
   1f242:	731a      	strb	r2, [r3, #12]
		break;
   1f244:	e004      	b.n	1f250 <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
   1f246:	4b31      	ldr	r3, [pc, #196]	; (1f30c <mmc_decode_csd+0x11c>)
   1f248:	681b      	ldr	r3, [r3, #0]
   1f24a:	2240      	movs	r2, #64	; 0x40
   1f24c:	731a      	strb	r2, [r3, #12]
		break;
   1f24e:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1f250:	4b2e      	ldr	r3, [pc, #184]	; (1f30c <mmc_decode_csd+0x11c>)
   1f252:	681b      	ldr	r3, [r3, #0]
   1f254:	330e      	adds	r3, #14
   1f256:	0018      	movs	r0, r3
   1f258:	2308      	movs	r3, #8
   1f25a:	2260      	movs	r2, #96	; 0x60
   1f25c:	2180      	movs	r1, #128	; 0x80
   1f25e:	4c2c      	ldr	r4, [pc, #176]	; (1f310 <mmc_decode_csd+0x120>)
   1f260:	47a0      	blx	r4
   1f262:	0003      	movs	r3, r0
   1f264:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1f266:	68fb      	ldr	r3, [r7, #12]
   1f268:	2207      	movs	r2, #7
   1f26a:	401a      	ands	r2, r3
   1f26c:	4b29      	ldr	r3, [pc, #164]	; (1f314 <mmc_decode_csd+0x124>)
   1f26e:	0092      	lsls	r2, r2, #2
   1f270:	58d3      	ldr	r3, [r2, r3]
   1f272:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   1f274:	68fb      	ldr	r3, [r7, #12]
   1f276:	08db      	lsrs	r3, r3, #3
   1f278:	220f      	movs	r2, #15
   1f27a:	401a      	ands	r2, r3
   1f27c:	4b26      	ldr	r3, [pc, #152]	; (1f318 <mmc_decode_csd+0x128>)
   1f27e:	0092      	lsls	r2, r2, #2
   1f280:	58d3      	ldr	r3, [r2, r3]
   1f282:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1f284:	4b21      	ldr	r3, [pc, #132]	; (1f30c <mmc_decode_csd+0x11c>)
   1f286:	681b      	ldr	r3, [r3, #0]
   1f288:	68ba      	ldr	r2, [r7, #8]
   1f28a:	6879      	ldr	r1, [r7, #4]
   1f28c:	434a      	muls	r2, r1
   1f28e:	21fa      	movs	r1, #250	; 0xfa
   1f290:	0089      	lsls	r1, r1, #2
   1f292:	434a      	muls	r2, r1
   1f294:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
   1f296:	4b1d      	ldr	r3, [pc, #116]	; (1f30c <mmc_decode_csd+0x11c>)
   1f298:	681b      	ldr	r3, [r3, #0]
   1f29a:	330e      	adds	r3, #14
   1f29c:	0018      	movs	r0, r3
   1f29e:	230c      	movs	r3, #12
   1f2a0:	223e      	movs	r2, #62	; 0x3e
   1f2a2:	2180      	movs	r1, #128	; 0x80
   1f2a4:	4c1a      	ldr	r4, [pc, #104]	; (1f310 <mmc_decode_csd+0x120>)
   1f2a6:	47a0      	blx	r4
   1f2a8:	0002      	movs	r2, r0
   1f2aa:	4b1c      	ldr	r3, [pc, #112]	; (1f31c <mmc_decode_csd+0x12c>)
   1f2ac:	429a      	cmp	r2, r3
   1f2ae:	d028      	beq.n	1f302 <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1f2b0:	4b16      	ldr	r3, [pc, #88]	; (1f30c <mmc_decode_csd+0x11c>)
   1f2b2:	681b      	ldr	r3, [r3, #0]
   1f2b4:	330e      	adds	r3, #14
   1f2b6:	0018      	movs	r0, r3
   1f2b8:	230c      	movs	r3, #12
   1f2ba:	223e      	movs	r2, #62	; 0x3e
   1f2bc:	2180      	movs	r1, #128	; 0x80
   1f2be:	4c14      	ldr	r4, [pc, #80]	; (1f310 <mmc_decode_csd+0x120>)
   1f2c0:	47a0      	blx	r4
   1f2c2:	0003      	movs	r3, r0
   1f2c4:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1f2c6:	4b11      	ldr	r3, [pc, #68]	; (1f30c <mmc_decode_csd+0x11c>)
   1f2c8:	681b      	ldr	r3, [r3, #0]
   1f2ca:	330e      	adds	r3, #14
   1f2cc:	0018      	movs	r0, r3
   1f2ce:	2303      	movs	r3, #3
   1f2d0:	222f      	movs	r2, #47	; 0x2f
   1f2d2:	2180      	movs	r1, #128	; 0x80
   1f2d4:	4d0e      	ldr	r5, [pc, #56]	; (1f310 <mmc_decode_csd+0x120>)
   1f2d6:	47a8      	blx	r5
   1f2d8:	0003      	movs	r3, r0
   1f2da:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1f2dc:	409c      	lsls	r4, r3
   1f2de:	0023      	movs	r3, r4
   1f2e0:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1f2e2:	4b0a      	ldr	r3, [pc, #40]	; (1f30c <mmc_decode_csd+0x11c>)
   1f2e4:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1f2e6:	4b09      	ldr	r3, [pc, #36]	; (1f30c <mmc_decode_csd+0x11c>)
   1f2e8:	681b      	ldr	r3, [r3, #0]
   1f2ea:	330e      	adds	r3, #14
   1f2ec:	0018      	movs	r0, r3
   1f2ee:	2304      	movs	r3, #4
   1f2f0:	2250      	movs	r2, #80	; 0x50
   1f2f2:	2180      	movs	r1, #128	; 0x80
   1f2f4:	4d06      	ldr	r5, [pc, #24]	; (1f310 <mmc_decode_csd+0x120>)
   1f2f6:	47a8      	blx	r5
   1f2f8:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1f2fa:	683b      	ldr	r3, [r7, #0]
   1f2fc:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1f2fe:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1f300:	6063      	str	r3, [r4, #4]
	}
}
   1f302:	46c0      	nop			; (mov r8, r8)
   1f304:	46bd      	mov	sp, r7
   1f306:	b004      	add	sp, #16
   1f308:	bdb0      	pop	{r4, r5, r7, pc}
   1f30a:	46c0      	nop			; (mov r8, r8)
   1f30c:	20003e80 	.word	0x20003e80
   1f310:	0001eced 	.word	0x0001eced
   1f314:	0003901c 	.word	0x0003901c
   1f318:	00039078 	.word	0x00039078
   1f31c:	00000fff 	.word	0x00000fff

0001f320 <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
   1f320:	b5b0      	push	{r4, r5, r7, lr}
   1f322:	b084      	sub	sp, #16
   1f324:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1f326:	4b35      	ldr	r3, [pc, #212]	; (1f3fc <sd_decode_csd+0xdc>)
   1f328:	681b      	ldr	r3, [r3, #0]
   1f32a:	330e      	adds	r3, #14
   1f32c:	0018      	movs	r0, r3
   1f32e:	2308      	movs	r3, #8
   1f330:	2260      	movs	r2, #96	; 0x60
   1f332:	2180      	movs	r1, #128	; 0x80
   1f334:	4c32      	ldr	r4, [pc, #200]	; (1f400 <sd_decode_csd+0xe0>)
   1f336:	47a0      	blx	r4
   1f338:	0003      	movs	r3, r0
   1f33a:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1f33c:	68fb      	ldr	r3, [r7, #12]
   1f33e:	2207      	movs	r2, #7
   1f340:	401a      	ands	r2, r3
   1f342:	4b30      	ldr	r3, [pc, #192]	; (1f404 <sd_decode_csd+0xe4>)
   1f344:	0092      	lsls	r2, r2, #2
   1f346:	58d3      	ldr	r3, [r2, r3]
   1f348:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   1f34a:	68fb      	ldr	r3, [r7, #12]
   1f34c:	08db      	lsrs	r3, r3, #3
   1f34e:	220f      	movs	r2, #15
   1f350:	401a      	ands	r2, r3
   1f352:	4b2d      	ldr	r3, [pc, #180]	; (1f408 <sd_decode_csd+0xe8>)
   1f354:	0092      	lsls	r2, r2, #2
   1f356:	58d3      	ldr	r3, [r2, r3]
   1f358:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1f35a:	4b28      	ldr	r3, [pc, #160]	; (1f3fc <sd_decode_csd+0xdc>)
   1f35c:	681b      	ldr	r3, [r3, #0]
   1f35e:	68ba      	ldr	r2, [r7, #8]
   1f360:	6879      	ldr	r1, [r7, #4]
   1f362:	434a      	muls	r2, r1
   1f364:	21fa      	movs	r1, #250	; 0xfa
   1f366:	0089      	lsls	r1, r1, #2
   1f368:	434a      	muls	r2, r1
   1f36a:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
   1f36c:	4b23      	ldr	r3, [pc, #140]	; (1f3fc <sd_decode_csd+0xdc>)
   1f36e:	681b      	ldr	r3, [r3, #0]
   1f370:	330e      	adds	r3, #14
   1f372:	0018      	movs	r0, r3
   1f374:	2302      	movs	r3, #2
   1f376:	227e      	movs	r2, #126	; 0x7e
   1f378:	2180      	movs	r1, #128	; 0x80
   1f37a:	4c21      	ldr	r4, [pc, #132]	; (1f400 <sd_decode_csd+0xe0>)
   1f37c:	47a0      	blx	r4
   1f37e:	1e03      	subs	r3, r0, #0
   1f380:	d00f      	beq.n	1f3a2 <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
   1f382:	4b1e      	ldr	r3, [pc, #120]	; (1f3fc <sd_decode_csd+0xdc>)
   1f384:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
   1f386:	4b1d      	ldr	r3, [pc, #116]	; (1f3fc <sd_decode_csd+0xdc>)
   1f388:	681b      	ldr	r3, [r3, #0]
   1f38a:	330e      	adds	r3, #14
   1f38c:	0018      	movs	r0, r3
   1f38e:	2316      	movs	r3, #22
   1f390:	2230      	movs	r2, #48	; 0x30
   1f392:	2180      	movs	r1, #128	; 0x80
   1f394:	4d1a      	ldr	r5, [pc, #104]	; (1f400 <sd_decode_csd+0xe0>)
   1f396:	47a8      	blx	r5
   1f398:	0003      	movs	r3, r0
				* 512;
   1f39a:	3301      	adds	r3, #1
   1f39c:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
   1f39e:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
   1f3a0:	e028      	b.n	1f3f4 <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1f3a2:	4b16      	ldr	r3, [pc, #88]	; (1f3fc <sd_decode_csd+0xdc>)
   1f3a4:	681b      	ldr	r3, [r3, #0]
   1f3a6:	330e      	adds	r3, #14
   1f3a8:	0018      	movs	r0, r3
   1f3aa:	230c      	movs	r3, #12
   1f3ac:	223e      	movs	r2, #62	; 0x3e
   1f3ae:	2180      	movs	r1, #128	; 0x80
   1f3b0:	4c13      	ldr	r4, [pc, #76]	; (1f400 <sd_decode_csd+0xe0>)
   1f3b2:	47a0      	blx	r4
   1f3b4:	0003      	movs	r3, r0
   1f3b6:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1f3b8:	4b10      	ldr	r3, [pc, #64]	; (1f3fc <sd_decode_csd+0xdc>)
   1f3ba:	681b      	ldr	r3, [r3, #0]
   1f3bc:	330e      	adds	r3, #14
   1f3be:	0018      	movs	r0, r3
   1f3c0:	2303      	movs	r3, #3
   1f3c2:	222f      	movs	r2, #47	; 0x2f
   1f3c4:	2180      	movs	r1, #128	; 0x80
   1f3c6:	4d0e      	ldr	r5, [pc, #56]	; (1f400 <sd_decode_csd+0xe0>)
   1f3c8:	47a8      	blx	r5
   1f3ca:	0003      	movs	r3, r0
   1f3cc:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1f3ce:	409c      	lsls	r4, r3
   1f3d0:	0023      	movs	r3, r4
   1f3d2:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1f3d4:	4b09      	ldr	r3, [pc, #36]	; (1f3fc <sd_decode_csd+0xdc>)
   1f3d6:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
   1f3d8:	4b08      	ldr	r3, [pc, #32]	; (1f3fc <sd_decode_csd+0xdc>)
   1f3da:	681b      	ldr	r3, [r3, #0]
   1f3dc:	330e      	adds	r3, #14
   1f3de:	0018      	movs	r0, r3
   1f3e0:	2304      	movs	r3, #4
   1f3e2:	2250      	movs	r2, #80	; 0x50
   1f3e4:	2180      	movs	r1, #128	; 0x80
   1f3e6:	4d06      	ldr	r5, [pc, #24]	; (1f400 <sd_decode_csd+0xe0>)
   1f3e8:	47a8      	blx	r5
   1f3ea:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1f3ec:	683b      	ldr	r3, [r7, #0]
   1f3ee:	4093      	lsls	r3, r2
				/ 1024;
   1f3f0:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1f3f2:	6063      	str	r3, [r4, #4]
}
   1f3f4:	46c0      	nop			; (mov r8, r8)
   1f3f6:	46bd      	mov	sp, r7
   1f3f8:	b004      	add	sp, #16
   1f3fa:	bdb0      	pop	{r4, r5, r7, pc}
   1f3fc:	20003e80 	.word	0x20003e80
   1f400:	0001eced 	.word	0x0001eced
   1f404:	0003901c 	.word	0x0003901c
   1f408:	00039038 	.word	0x00039038

0001f40c <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
   1f40c:	b580      	push	{r7, lr}
   1f40e:	b082      	sub	sp, #8
   1f410:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
   1f412:	4b11      	ldr	r3, [pc, #68]	; (1f458 <sd_mmc_cmd13+0x4c>)
   1f414:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
   1f416:	4b11      	ldr	r3, [pc, #68]	; (1f45c <sd_mmc_cmd13+0x50>)
   1f418:	2100      	movs	r1, #0
   1f41a:	0018      	movs	r0, r3
   1f41c:	4b10      	ldr	r3, [pc, #64]	; (1f460 <sd_mmc_cmd13+0x54>)
   1f41e:	4798      	blx	r3
   1f420:	0003      	movs	r3, r0
   1f422:	001a      	movs	r2, r3
   1f424:	2301      	movs	r3, #1
   1f426:	4053      	eors	r3, r2
   1f428:	b2db      	uxtb	r3, r3
   1f42a:	2b00      	cmp	r3, #0
   1f42c:	d001      	beq.n	1f432 <sd_mmc_cmd13+0x26>
				return false;
   1f42e:	2300      	movs	r3, #0
   1f430:	e00e      	b.n	1f450 <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
   1f432:	4b0c      	ldr	r3, [pc, #48]	; (1f464 <sd_mmc_cmd13+0x58>)
   1f434:	4798      	blx	r3
   1f436:	0002      	movs	r2, r0
   1f438:	23ff      	movs	r3, #255	; 0xff
   1f43a:	4013      	ands	r3, r2
   1f43c:	d006      	beq.n	1f44c <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
   1f43e:	687b      	ldr	r3, [r7, #4]
   1f440:	1e5a      	subs	r2, r3, #1
   1f442:	607a      	str	r2, [r7, #4]
   1f444:	2b00      	cmp	r3, #0
   1f446:	d1e6      	bne.n	1f416 <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
   1f448:	2300      	movs	r3, #0
   1f44a:	e001      	b.n	1f450 <sd_mmc_cmd13+0x44>
				break;
   1f44c:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
   1f44e:	2301      	movs	r3, #1
}
   1f450:	0018      	movs	r0, r3
   1f452:	46bd      	mov	sp, r7
   1f454:	b002      	add	sp, #8
   1f456:	bd80      	pop	{r7, pc}
   1f458:	00030d40 	.word	0x00030d40
   1f45c:	00001b0d 	.word	0x00001b0d
   1f460:	000208c5 	.word	0x000208c5
   1f464:	00020b05 	.word	0x00020b05

0001f468 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
   1f468:	b590      	push	{r4, r7, lr}
   1f46a:	b085      	sub	sp, #20
   1f46c:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   1f46e:	4b38      	ldr	r3, [pc, #224]	; (1f550 <sd_acmd51+0xe8>)
   1f470:	681b      	ldr	r3, [r3, #0]
   1f472:	891b      	ldrh	r3, [r3, #8]
   1f474:	041b      	lsls	r3, r3, #16
   1f476:	4a37      	ldr	r2, [pc, #220]	; (1f554 <sd_acmd51+0xec>)
   1f478:	0019      	movs	r1, r3
   1f47a:	0010      	movs	r0, r2
   1f47c:	4b36      	ldr	r3, [pc, #216]	; (1f558 <sd_acmd51+0xf0>)
   1f47e:	4798      	blx	r3
   1f480:	0003      	movs	r3, r0
   1f482:	001a      	movs	r2, r3
   1f484:	2301      	movs	r3, #1
   1f486:	4053      	eors	r3, r2
   1f488:	b2db      	uxtb	r3, r3
   1f48a:	2b00      	cmp	r3, #0
   1f48c:	d001      	beq.n	1f492 <sd_acmd51+0x2a>
		return false;
   1f48e:	2300      	movs	r3, #0
   1f490:	e059      	b.n	1f546 <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
   1f492:	4832      	ldr	r0, [pc, #200]	; (1f55c <sd_acmd51+0xf4>)
   1f494:	2301      	movs	r3, #1
   1f496:	9300      	str	r3, [sp, #0]
   1f498:	2301      	movs	r3, #1
   1f49a:	2208      	movs	r2, #8
   1f49c:	2100      	movs	r1, #0
   1f49e:	4c30      	ldr	r4, [pc, #192]	; (1f560 <sd_acmd51+0xf8>)
   1f4a0:	47a0      	blx	r4
   1f4a2:	0003      	movs	r3, r0
   1f4a4:	001a      	movs	r2, r3
   1f4a6:	2301      	movs	r3, #1
   1f4a8:	4053      	eors	r3, r2
   1f4aa:	b2db      	uxtb	r3, r3
   1f4ac:	2b00      	cmp	r3, #0
   1f4ae:	d001      	beq.n	1f4b4 <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
   1f4b0:	2300      	movs	r3, #0
   1f4b2:	e048      	b.n	1f546 <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
   1f4b4:	003b      	movs	r3, r7
   1f4b6:	2101      	movs	r1, #1
   1f4b8:	0018      	movs	r0, r3
   1f4ba:	4b2a      	ldr	r3, [pc, #168]	; (1f564 <sd_acmd51+0xfc>)
   1f4bc:	4798      	blx	r3
   1f4be:	0003      	movs	r3, r0
   1f4c0:	001a      	movs	r2, r3
   1f4c2:	2301      	movs	r3, #1
   1f4c4:	4053      	eors	r3, r2
   1f4c6:	b2db      	uxtb	r3, r3
   1f4c8:	2b00      	cmp	r3, #0
   1f4ca:	d001      	beq.n	1f4d0 <sd_acmd51+0x68>
		return false;
   1f4cc:	2300      	movs	r3, #0
   1f4ce:	e03a      	b.n	1f546 <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
   1f4d0:	4b25      	ldr	r3, [pc, #148]	; (1f568 <sd_acmd51+0x100>)
   1f4d2:	4798      	blx	r3
   1f4d4:	0003      	movs	r3, r0
   1f4d6:	001a      	movs	r2, r3
   1f4d8:	2301      	movs	r3, #1
   1f4da:	4053      	eors	r3, r2
   1f4dc:	b2db      	uxtb	r3, r3
   1f4de:	2b00      	cmp	r3, #0
   1f4e0:	d001      	beq.n	1f4e6 <sd_acmd51+0x7e>
		return false;
   1f4e2:	2300      	movs	r3, #0
   1f4e4:	e02f      	b.n	1f546 <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
   1f4e6:	0038      	movs	r0, r7
   1f4e8:	2304      	movs	r3, #4
   1f4ea:	2238      	movs	r2, #56	; 0x38
   1f4ec:	2140      	movs	r1, #64	; 0x40
   1f4ee:	4c1f      	ldr	r4, [pc, #124]	; (1f56c <sd_acmd51+0x104>)
   1f4f0:	47a0      	blx	r4
   1f4f2:	0003      	movs	r3, r0
   1f4f4:	2b01      	cmp	r3, #1
   1f4f6:	d008      	beq.n	1f50a <sd_acmd51+0xa2>
   1f4f8:	d302      	bcc.n	1f500 <sd_acmd51+0x98>
   1f4fa:	2b02      	cmp	r3, #2
   1f4fc:	d00a      	beq.n	1f514 <sd_acmd51+0xac>
   1f4fe:	e01c      	b.n	1f53a <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1f500:	4b13      	ldr	r3, [pc, #76]	; (1f550 <sd_acmd51+0xe8>)
   1f502:	681b      	ldr	r3, [r3, #0]
   1f504:	2210      	movs	r2, #16
   1f506:	731a      	strb	r2, [r3, #12]
		break;
   1f508:	e01c      	b.n	1f544 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
   1f50a:	4b11      	ldr	r3, [pc, #68]	; (1f550 <sd_acmd51+0xe8>)
   1f50c:	681b      	ldr	r3, [r3, #0]
   1f50e:	221a      	movs	r2, #26
   1f510:	731a      	strb	r2, [r3, #12]
		break;
   1f512:	e017      	b.n	1f544 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
   1f514:	0038      	movs	r0, r7
   1f516:	2301      	movs	r3, #1
   1f518:	222f      	movs	r2, #47	; 0x2f
   1f51a:	2140      	movs	r1, #64	; 0x40
   1f51c:	4c13      	ldr	r4, [pc, #76]	; (1f56c <sd_acmd51+0x104>)
   1f51e:	47a0      	blx	r4
   1f520:	0003      	movs	r3, r0
   1f522:	2b01      	cmp	r3, #1
   1f524:	d104      	bne.n	1f530 <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
   1f526:	4b0a      	ldr	r3, [pc, #40]	; (1f550 <sd_acmd51+0xe8>)
   1f528:	681b      	ldr	r3, [r3, #0]
   1f52a:	2230      	movs	r2, #48	; 0x30
   1f52c:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
   1f52e:	e009      	b.n	1f544 <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
   1f530:	4b07      	ldr	r3, [pc, #28]	; (1f550 <sd_acmd51+0xe8>)
   1f532:	681b      	ldr	r3, [r3, #0]
   1f534:	2220      	movs	r2, #32
   1f536:	731a      	strb	r2, [r3, #12]
		break;
   1f538:	e004      	b.n	1f544 <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1f53a:	4b05      	ldr	r3, [pc, #20]	; (1f550 <sd_acmd51+0xe8>)
   1f53c:	681b      	ldr	r3, [r3, #0]
   1f53e:	2210      	movs	r2, #16
   1f540:	731a      	strb	r2, [r3, #12]
		break;
   1f542:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   1f544:	2301      	movs	r3, #1
}
   1f546:	0018      	movs	r0, r3
   1f548:	46bd      	mov	sp, r7
   1f54a:	b003      	add	sp, #12
   1f54c:	bd90      	pop	{r4, r7, pc}
   1f54e:	46c0      	nop			; (mov r8, r8)
   1f550:	20003e80 	.word	0x20003e80
   1f554:	00001137 	.word	0x00001137
   1f558:	000208c5 	.word	0x000208c5
   1f55c:	00081133 	.word	0x00081133
   1f560:	000208ed 	.word	0x000208ed
   1f564:	00020bbd 	.word	0x00020bbd
   1f568:	00020c61 	.word	0x00020c61
   1f56c:	0001eced 	.word	0x0001eced

0001f570 <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
   1f570:	b580      	push	{r7, lr}
   1f572:	b082      	sub	sp, #8
   1f574:	af00      	add	r7, sp, #0
   1f576:	0002      	movs	r2, r0
   1f578:	1dfb      	adds	r3, r7, #7
   1f57a:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
   1f57c:	1dfb      	adds	r3, r7, #7
   1f57e:	781b      	ldrb	r3, [r3, #0]
   1f580:	2b00      	cmp	r3, #0
   1f582:	d001      	beq.n	1f588 <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
   1f584:	2304      	movs	r3, #4
   1f586:	e047      	b.n	1f618 <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   1f588:	1dfb      	adds	r3, r7, #7
   1f58a:	781b      	ldrb	r3, [r3, #0]
   1f58c:	4a24      	ldr	r2, [pc, #144]	; (1f620 <sd_mmc_select_slot+0xb0>)
   1f58e:	015b      	lsls	r3, r3, #5
   1f590:	18d3      	adds	r3, r2, r3
   1f592:	330a      	adds	r3, #10
   1f594:	781b      	ldrb	r3, [r3, #0]
   1f596:	2b04      	cmp	r3, #4
   1f598:	d008      	beq.n	1f5ac <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
   1f59a:	1dfb      	adds	r3, r7, #7
   1f59c:	781b      	ldrb	r3, [r3, #0]
   1f59e:	4a20      	ldr	r2, [pc, #128]	; (1f620 <sd_mmc_select_slot+0xb0>)
   1f5a0:	015b      	lsls	r3, r3, #5
   1f5a2:	18d3      	adds	r3, r2, r3
   1f5a4:	330a      	adds	r3, #10
   1f5a6:	781b      	ldrb	r3, [r3, #0]
   1f5a8:	2b03      	cmp	r3, #3
   1f5aa:	d11d      	bne.n	1f5e8 <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   1f5ac:	1dfb      	adds	r3, r7, #7
   1f5ae:	781b      	ldrb	r3, [r3, #0]
   1f5b0:	4a1b      	ldr	r2, [pc, #108]	; (1f620 <sd_mmc_select_slot+0xb0>)
   1f5b2:	015b      	lsls	r3, r3, #5
   1f5b4:	18d3      	adds	r3, r2, r3
   1f5b6:	330a      	adds	r3, #10
   1f5b8:	2202      	movs	r2, #2
   1f5ba:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   1f5bc:	1dfb      	adds	r3, r7, #7
   1f5be:	781a      	ldrb	r2, [r3, #0]
   1f5c0:	4b17      	ldr	r3, [pc, #92]	; (1f620 <sd_mmc_select_slot+0xb0>)
   1f5c2:	0152      	lsls	r2, r2, #5
   1f5c4:	4917      	ldr	r1, [pc, #92]	; (1f624 <sd_mmc_select_slot+0xb4>)
   1f5c6:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
   1f5c8:	1dfb      	adds	r3, r7, #7
   1f5ca:	781b      	ldrb	r3, [r3, #0]
   1f5cc:	4a14      	ldr	r2, [pc, #80]	; (1f620 <sd_mmc_select_slot+0xb0>)
   1f5ce:	015b      	lsls	r3, r3, #5
   1f5d0:	18d3      	adds	r3, r2, r3
   1f5d2:	330d      	adds	r3, #13
   1f5d4:	2201      	movs	r2, #1
   1f5d6:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
   1f5d8:	1dfb      	adds	r3, r7, #7
   1f5da:	781b      	ldrb	r3, [r3, #0]
   1f5dc:	4a10      	ldr	r2, [pc, #64]	; (1f620 <sd_mmc_select_slot+0xb0>)
   1f5de:	015b      	lsls	r3, r3, #5
   1f5e0:	18d3      	adds	r3, r2, r3
   1f5e2:	331e      	adds	r3, #30
   1f5e4:	2200      	movs	r2, #0
   1f5e6:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
   1f5e8:	4b0f      	ldr	r3, [pc, #60]	; (1f628 <sd_mmc_select_slot+0xb8>)
   1f5ea:	1dfa      	adds	r2, r7, #7
   1f5ec:	7812      	ldrb	r2, [r2, #0]
   1f5ee:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   1f5f0:	1dfb      	adds	r3, r7, #7
   1f5f2:	781b      	ldrb	r3, [r3, #0]
   1f5f4:	015a      	lsls	r2, r3, #5
   1f5f6:	4b0a      	ldr	r3, [pc, #40]	; (1f620 <sd_mmc_select_slot+0xb0>)
   1f5f8:	18d2      	adds	r2, r2, r3
   1f5fa:	4b0c      	ldr	r3, [pc, #48]	; (1f62c <sd_mmc_select_slot+0xbc>)
   1f5fc:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
   1f5fe:	4b0c      	ldr	r3, [pc, #48]	; (1f630 <sd_mmc_select_slot+0xc0>)
   1f600:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
   1f602:	1dfb      	adds	r3, r7, #7
   1f604:	781b      	ldrb	r3, [r3, #0]
   1f606:	4a06      	ldr	r2, [pc, #24]	; (1f620 <sd_mmc_select_slot+0xb0>)
   1f608:	015b      	lsls	r3, r3, #5
   1f60a:	18d3      	adds	r3, r2, r3
   1f60c:	330a      	adds	r3, #10
   1f60e:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
   1f610:	3b02      	subs	r3, #2
   1f612:	425a      	negs	r2, r3
   1f614:	4153      	adcs	r3, r2
   1f616:	b2db      	uxtb	r3, r3
}
   1f618:	0018      	movs	r0, r3
   1f61a:	46bd      	mov	sp, r7
   1f61c:	b002      	add	sp, #8
   1f61e:	bd80      	pop	{r7, pc}
   1f620:	20003e5c 	.word	0x20003e5c
   1f624:	00061a80 	.word	0x00061a80
   1f628:	20003e7c 	.word	0x20003e7c
   1f62c:	20003e80 	.word	0x20003e80
   1f630:	0001f635 	.word	0x0001f635

0001f634 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
   1f634:	b5b0      	push	{r4, r5, r7, lr}
   1f636:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1f638:	4b09      	ldr	r3, [pc, #36]	; (1f660 <sd_mmc_configure_slot+0x2c>)
   1f63a:	7818      	ldrb	r0, [r3, #0]
   1f63c:	4b09      	ldr	r3, [pc, #36]	; (1f664 <sd_mmc_configure_slot+0x30>)
   1f63e:	681b      	ldr	r3, [r3, #0]
   1f640:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1f642:	4b08      	ldr	r3, [pc, #32]	; (1f664 <sd_mmc_configure_slot+0x30>)
   1f644:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1f646:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1f648:	4b06      	ldr	r3, [pc, #24]	; (1f664 <sd_mmc_configure_slot+0x30>)
   1f64a:	681b      	ldr	r3, [r3, #0]
   1f64c:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1f64e:	1e5c      	subs	r4, r3, #1
   1f650:	41a3      	sbcs	r3, r4
   1f652:	b2db      	uxtb	r3, r3
   1f654:	4c04      	ldr	r4, [pc, #16]	; (1f668 <sd_mmc_configure_slot+0x34>)
   1f656:	47a0      	blx	r4
}
   1f658:	46c0      	nop			; (mov r8, r8)
   1f65a:	46bd      	mov	sp, r7
   1f65c:	bdb0      	pop	{r4, r5, r7, pc}
   1f65e:	46c0      	nop			; (mov r8, r8)
   1f660:	20003e7c 	.word	0x20003e7c
   1f664:	20003e80 	.word	0x20003e80
   1f668:	000207ad 	.word	0x000207ad

0001f66c <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
   1f66c:	b580      	push	{r7, lr}
   1f66e:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   1f670:	4b05      	ldr	r3, [pc, #20]	; (1f688 <sd_mmc_deselect_slot+0x1c>)
   1f672:	781b      	ldrb	r3, [r3, #0]
   1f674:	2b00      	cmp	r3, #0
   1f676:	d104      	bne.n	1f682 <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
   1f678:	4b03      	ldr	r3, [pc, #12]	; (1f688 <sd_mmc_deselect_slot+0x1c>)
   1f67a:	781b      	ldrb	r3, [r3, #0]
   1f67c:	0018      	movs	r0, r3
   1f67e:	4b03      	ldr	r3, [pc, #12]	; (1f68c <sd_mmc_deselect_slot+0x20>)
   1f680:	4798      	blx	r3
	}
}
   1f682:	46c0      	nop			; (mov r8, r8)
   1f684:	46bd      	mov	sp, r7
   1f686:	bd80      	pop	{r7, pc}
   1f688:	20003e7c 	.word	0x20003e7c
   1f68c:	00020835 	.word	0x00020835

0001f690 <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
   1f690:	b580      	push	{r7, lr}
   1f692:	b082      	sub	sp, #8
   1f694:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
   1f696:	1dfb      	adds	r3, r7, #7
   1f698:	2200      	movs	r2, #0
   1f69a:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
   1f69c:	4b59      	ldr	r3, [pc, #356]	; (1f804 <sd_mmc_spi_card_init+0x174>)
   1f69e:	681b      	ldr	r3, [r3, #0]
   1f6a0:	2201      	movs	r2, #1
   1f6a2:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
   1f6a4:	4b57      	ldr	r3, [pc, #348]	; (1f804 <sd_mmc_spi_card_init+0x174>)
   1f6a6:	681b      	ldr	r3, [r3, #0]
   1f6a8:	2200      	movs	r2, #0
   1f6aa:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
   1f6ac:	4b55      	ldr	r3, [pc, #340]	; (1f804 <sd_mmc_spi_card_init+0x174>)
   1f6ae:	681b      	ldr	r3, [r3, #0]
   1f6b0:	2200      	movs	r2, #0
   1f6b2:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
   1f6b4:	4b54      	ldr	r3, [pc, #336]	; (1f808 <sd_mmc_spi_card_init+0x178>)
   1f6b6:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1f6b8:	2388      	movs	r3, #136	; 0x88
   1f6ba:	015b      	lsls	r3, r3, #5
   1f6bc:	2100      	movs	r1, #0
   1f6be:	0018      	movs	r0, r3
   1f6c0:	4b52      	ldr	r3, [pc, #328]	; (1f80c <sd_mmc_spi_card_init+0x17c>)
   1f6c2:	4798      	blx	r3
   1f6c4:	0003      	movs	r3, r0
   1f6c6:	001a      	movs	r2, r3
   1f6c8:	2301      	movs	r3, #1
   1f6ca:	4053      	eors	r3, r2
   1f6cc:	b2db      	uxtb	r3, r3
   1f6ce:	2b00      	cmp	r3, #0
   1f6d0:	d001      	beq.n	1f6d6 <sd_mmc_spi_card_init+0x46>
		return false;
   1f6d2:	2300      	movs	r3, #0
   1f6d4:	e092      	b.n	1f7fc <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
   1f6d6:	1dfb      	adds	r3, r7, #7
   1f6d8:	0018      	movs	r0, r3
   1f6da:	4b4d      	ldr	r3, [pc, #308]	; (1f810 <sd_mmc_spi_card_init+0x180>)
   1f6dc:	4798      	blx	r3
   1f6de:	0003      	movs	r3, r0
   1f6e0:	001a      	movs	r2, r3
   1f6e2:	2301      	movs	r3, #1
   1f6e4:	4053      	eors	r3, r2
   1f6e6:	b2db      	uxtb	r3, r3
   1f6e8:	2b00      	cmp	r3, #0
   1f6ea:	d001      	beq.n	1f6f0 <sd_mmc_spi_card_init+0x60>
		return false;
   1f6ec:	2300      	movs	r3, #0
   1f6ee:	e085      	b.n	1f7fc <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
   1f6f0:	4b48      	ldr	r3, [pc, #288]	; (1f814 <sd_mmc_spi_card_init+0x184>)
   1f6f2:	4798      	blx	r3
   1f6f4:	0003      	movs	r3, r0
   1f6f6:	001a      	movs	r2, r3
   1f6f8:	2301      	movs	r3, #1
   1f6fa:	4053      	eors	r3, r2
   1f6fc:	b2db      	uxtb	r3, r3
   1f6fe:	2b00      	cmp	r3, #0
   1f700:	d001      	beq.n	1f706 <sd_mmc_spi_card_init+0x76>
		return false;
   1f702:	2300      	movs	r3, #0
   1f704:	e07a      	b.n	1f7fc <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1f706:	4b3f      	ldr	r3, [pc, #252]	; (1f804 <sd_mmc_spi_card_init+0x174>)
   1f708:	681b      	ldr	r3, [r3, #0]
   1f70a:	7adb      	ldrb	r3, [r3, #11]
   1f70c:	001a      	movs	r2, r3
   1f70e:	2301      	movs	r3, #1
   1f710:	4013      	ands	r3, r2
   1f712:	d021      	beq.n	1f758 <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
   1f714:	1dfb      	adds	r3, r7, #7
   1f716:	781b      	ldrb	r3, [r3, #0]
   1f718:	0018      	movs	r0, r3
   1f71a:	4b3f      	ldr	r3, [pc, #252]	; (1f818 <sd_mmc_spi_card_init+0x188>)
   1f71c:	4798      	blx	r3
   1f71e:	0003      	movs	r3, r0
   1f720:	001a      	movs	r2, r3
   1f722:	2301      	movs	r3, #1
   1f724:	4053      	eors	r3, r2
   1f726:	b2db      	uxtb	r3, r3
   1f728:	2b00      	cmp	r3, #0
   1f72a:	d007      	beq.n	1f73c <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
   1f72c:	4b35      	ldr	r3, [pc, #212]	; (1f804 <sd_mmc_spi_card_init+0x174>)
   1f72e:	681b      	ldr	r3, [r3, #0]
   1f730:	2202      	movs	r2, #2
   1f732:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
   1f734:	4b39      	ldr	r3, [pc, #228]	; (1f81c <sd_mmc_spi_card_init+0x18c>)
   1f736:	4798      	blx	r3
   1f738:	0003      	movs	r3, r0
   1f73a:	e05f      	b.n	1f7fc <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1f73c:	4b38      	ldr	r3, [pc, #224]	; (1f820 <sd_mmc_spi_card_init+0x190>)
   1f73e:	2100      	movs	r1, #0
   1f740:	0018      	movs	r0, r3
   1f742:	4b32      	ldr	r3, [pc, #200]	; (1f80c <sd_mmc_spi_card_init+0x17c>)
   1f744:	4798      	blx	r3
   1f746:	0003      	movs	r3, r0
   1f748:	001a      	movs	r2, r3
   1f74a:	2301      	movs	r3, #1
   1f74c:	4053      	eors	r3, r2
   1f74e:	b2db      	uxtb	r3, r3
   1f750:	2b00      	cmp	r3, #0
   1f752:	d001      	beq.n	1f758 <sd_mmc_spi_card_init+0xc8>
			return false;
   1f754:	2300      	movs	r3, #0
   1f756:	e051      	b.n	1f7fc <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1f758:	4b2a      	ldr	r3, [pc, #168]	; (1f804 <sd_mmc_spi_card_init+0x174>)
   1f75a:	681b      	ldr	r3, [r3, #0]
   1f75c:	7adb      	ldrb	r3, [r3, #11]
   1f75e:	001a      	movs	r2, r3
   1f760:	2301      	movs	r3, #1
   1f762:	4013      	ands	r3, r2
   1f764:	d017      	beq.n	1f796 <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
   1f766:	4b2f      	ldr	r3, [pc, #188]	; (1f824 <sd_mmc_spi_card_init+0x194>)
   1f768:	4798      	blx	r3
   1f76a:	0003      	movs	r3, r0
   1f76c:	001a      	movs	r2, r3
   1f76e:	2301      	movs	r3, #1
   1f770:	4053      	eors	r3, r2
   1f772:	b2db      	uxtb	r3, r3
   1f774:	2b00      	cmp	r3, #0
   1f776:	d001      	beq.n	1f77c <sd_mmc_spi_card_init+0xec>
			return false;
   1f778:	2300      	movs	r3, #0
   1f77a:	e03f      	b.n	1f7fc <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
   1f77c:	4b2a      	ldr	r3, [pc, #168]	; (1f828 <sd_mmc_spi_card_init+0x198>)
   1f77e:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
   1f780:	4b2a      	ldr	r3, [pc, #168]	; (1f82c <sd_mmc_spi_card_init+0x19c>)
   1f782:	4798      	blx	r3
   1f784:	0003      	movs	r3, r0
   1f786:	001a      	movs	r2, r3
   1f788:	2301      	movs	r3, #1
   1f78a:	4053      	eors	r3, r2
   1f78c:	b2db      	uxtb	r3, r3
   1f78e:	2b00      	cmp	r3, #0
   1f790:	d001      	beq.n	1f796 <sd_mmc_spi_card_init+0x106>
			return false;
   1f792:	2300      	movs	r3, #0
   1f794:	e032      	b.n	1f7fc <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1f796:	4b1b      	ldr	r3, [pc, #108]	; (1f804 <sd_mmc_spi_card_init+0x174>)
   1f798:	681b      	ldr	r3, [r3, #0]
   1f79a:	7adb      	ldrb	r3, [r3, #11]
   1f79c:	001a      	movs	r2, r3
   1f79e:	2301      	movs	r3, #1
   1f7a0:	4013      	ands	r3, r2
   1f7a2:	d016      	beq.n	1f7d2 <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
   1f7a4:	4b17      	ldr	r3, [pc, #92]	; (1f804 <sd_mmc_spi_card_init+0x174>)
   1f7a6:	681b      	ldr	r3, [r3, #0]
   1f7a8:	7adb      	ldrb	r3, [r3, #11]
   1f7aa:	001a      	movs	r2, r3
   1f7ac:	2308      	movs	r3, #8
   1f7ae:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1f7b0:	d10f      	bne.n	1f7d2 <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1f7b2:	2380      	movs	r3, #128	; 0x80
   1f7b4:	009b      	lsls	r3, r3, #2
   1f7b6:	4a1e      	ldr	r2, [pc, #120]	; (1f830 <sd_mmc_spi_card_init+0x1a0>)
   1f7b8:	0019      	movs	r1, r3
   1f7ba:	0010      	movs	r0, r2
   1f7bc:	4b13      	ldr	r3, [pc, #76]	; (1f80c <sd_mmc_spi_card_init+0x17c>)
   1f7be:	4798      	blx	r3
   1f7c0:	0003      	movs	r3, r0
   1f7c2:	001a      	movs	r2, r3
   1f7c4:	2301      	movs	r3, #1
   1f7c6:	4053      	eors	r3, r2
   1f7c8:	b2db      	uxtb	r3, r3
   1f7ca:	2b00      	cmp	r3, #0
   1f7cc:	d001      	beq.n	1f7d2 <sd_mmc_spi_card_init+0x142>
			return false;
   1f7ce:	2300      	movs	r3, #0
   1f7d0:	e014      	b.n	1f7fc <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1f7d2:	4b0c      	ldr	r3, [pc, #48]	; (1f804 <sd_mmc_spi_card_init+0x174>)
   1f7d4:	681b      	ldr	r3, [r3, #0]
   1f7d6:	7adb      	ldrb	r3, [r3, #11]
   1f7d8:	001a      	movs	r2, r3
   1f7da:	2301      	movs	r3, #1
   1f7dc:	4013      	ands	r3, r2
   1f7de:	d00a      	beq.n	1f7f6 <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
   1f7e0:	4b14      	ldr	r3, [pc, #80]	; (1f834 <sd_mmc_spi_card_init+0x1a4>)
   1f7e2:	4798      	blx	r3
   1f7e4:	0003      	movs	r3, r0
   1f7e6:	001a      	movs	r2, r3
   1f7e8:	2301      	movs	r3, #1
   1f7ea:	4053      	eors	r3, r2
   1f7ec:	b2db      	uxtb	r3, r3
   1f7ee:	2b00      	cmp	r3, #0
   1f7f0:	d001      	beq.n	1f7f6 <sd_mmc_spi_card_init+0x166>
			return false;
   1f7f2:	2300      	movs	r3, #0
   1f7f4:	e002      	b.n	1f7fc <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1f7f6:	4b10      	ldr	r3, [pc, #64]	; (1f838 <sd_mmc_spi_card_init+0x1a8>)
   1f7f8:	4798      	blx	r3
	return true;
   1f7fa:	2301      	movs	r3, #1
}
   1f7fc:	0018      	movs	r0, r3
   1f7fe:	46bd      	mov	sp, r7
   1f800:	b002      	add	sp, #8
   1f802:	bd80      	pop	{r7, pc}
   1f804:	20003e80 	.word	0x20003e80
   1f808:	00020879 	.word	0x00020879
   1f80c:	000208c5 	.word	0x000208c5
   1f810:	0001efe5 	.word	0x0001efe5
   1f814:	0001efd9 	.word	0x0001efd9
   1f818:	0001eef5 	.word	0x0001eef5
   1f81c:	0001f83d 	.word	0x0001f83d
   1f820:	0000113b 	.word	0x0000113b
   1f824:	0001f181 	.word	0x0001f181
   1f828:	0001f321 	.word	0x0001f321
   1f82c:	0001f469 	.word	0x0001f469
   1f830:	00001110 	.word	0x00001110
   1f834:	0001f40d 	.word	0x0001f40d
   1f838:	0001f635 	.word	0x0001f635

0001f83c <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
   1f83c:	b580      	push	{r7, lr}
   1f83e:	b082      	sub	sp, #8
   1f840:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1f842:	2388      	movs	r3, #136	; 0x88
   1f844:	015b      	lsls	r3, r3, #5
   1f846:	2100      	movs	r1, #0
   1f848:	0018      	movs	r0, r3
   1f84a:	4b32      	ldr	r3, [pc, #200]	; (1f914 <sd_mmc_spi_install_mmc+0xd8>)
   1f84c:	4798      	blx	r3
   1f84e:	0003      	movs	r3, r0
   1f850:	001a      	movs	r2, r3
   1f852:	2301      	movs	r3, #1
   1f854:	4053      	eors	r3, r2
   1f856:	b2db      	uxtb	r3, r3
   1f858:	2b00      	cmp	r3, #0
   1f85a:	d001      	beq.n	1f860 <sd_mmc_spi_install_mmc+0x24>
		return false;
   1f85c:	2300      	movs	r3, #0
   1f85e:	e055      	b.n	1f90c <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
   1f860:	4b2d      	ldr	r3, [pc, #180]	; (1f918 <sd_mmc_spi_install_mmc+0xdc>)
   1f862:	4798      	blx	r3
   1f864:	0003      	movs	r3, r0
   1f866:	001a      	movs	r2, r3
   1f868:	2301      	movs	r3, #1
   1f86a:	4053      	eors	r3, r2
   1f86c:	b2db      	uxtb	r3, r3
   1f86e:	2b00      	cmp	r3, #0
   1f870:	d001      	beq.n	1f876 <sd_mmc_spi_install_mmc+0x3a>
		return false;
   1f872:	2300      	movs	r3, #0
   1f874:	e04a      	b.n	1f90c <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1f876:	4b29      	ldr	r3, [pc, #164]	; (1f91c <sd_mmc_spi_install_mmc+0xe0>)
   1f878:	2100      	movs	r1, #0
   1f87a:	0018      	movs	r0, r3
   1f87c:	4b25      	ldr	r3, [pc, #148]	; (1f914 <sd_mmc_spi_install_mmc+0xd8>)
   1f87e:	4798      	blx	r3
   1f880:	0003      	movs	r3, r0
   1f882:	001a      	movs	r2, r3
   1f884:	2301      	movs	r3, #1
   1f886:	4053      	eors	r3, r2
   1f888:	b2db      	uxtb	r3, r3
   1f88a:	2b00      	cmp	r3, #0
   1f88c:	d001      	beq.n	1f892 <sd_mmc_spi_install_mmc+0x56>
		return false;
   1f88e:	2300      	movs	r3, #0
   1f890:	e03c      	b.n	1f90c <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
   1f892:	4b23      	ldr	r3, [pc, #140]	; (1f920 <sd_mmc_spi_install_mmc+0xe4>)
   1f894:	4798      	blx	r3
   1f896:	0003      	movs	r3, r0
   1f898:	001a      	movs	r2, r3
   1f89a:	2301      	movs	r3, #1
   1f89c:	4053      	eors	r3, r2
   1f89e:	b2db      	uxtb	r3, r3
   1f8a0:	2b00      	cmp	r3, #0
   1f8a2:	d001      	beq.n	1f8a8 <sd_mmc_spi_install_mmc+0x6c>
		return false;
   1f8a4:	2300      	movs	r3, #0
   1f8a6:	e031      	b.n	1f90c <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
   1f8a8:	4b1e      	ldr	r3, [pc, #120]	; (1f924 <sd_mmc_spi_install_mmc+0xe8>)
   1f8aa:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
   1f8ac:	4b1e      	ldr	r3, [pc, #120]	; (1f928 <sd_mmc_spi_install_mmc+0xec>)
   1f8ae:	681b      	ldr	r3, [r3, #0]
   1f8b0:	7b1b      	ldrb	r3, [r3, #12]
   1f8b2:	2b3f      	cmp	r3, #63	; 0x3f
   1f8b4:	d90c      	bls.n	1f8d0 <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
   1f8b6:	1dfb      	adds	r3, r7, #7
   1f8b8:	0018      	movs	r0, r3
   1f8ba:	4b1c      	ldr	r3, [pc, #112]	; (1f92c <sd_mmc_spi_install_mmc+0xf0>)
   1f8bc:	4798      	blx	r3
   1f8be:	0003      	movs	r3, r0
   1f8c0:	001a      	movs	r2, r3
   1f8c2:	2301      	movs	r3, #1
   1f8c4:	4053      	eors	r3, r2
   1f8c6:	b2db      	uxtb	r3, r3
   1f8c8:	2b00      	cmp	r3, #0
   1f8ca:	d001      	beq.n	1f8d0 <sd_mmc_spi_install_mmc+0x94>
			return false;
   1f8cc:	2300      	movs	r3, #0
   1f8ce:	e01d      	b.n	1f90c <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1f8d0:	2380      	movs	r3, #128	; 0x80
   1f8d2:	009b      	lsls	r3, r3, #2
   1f8d4:	4a16      	ldr	r2, [pc, #88]	; (1f930 <sd_mmc_spi_install_mmc+0xf4>)
   1f8d6:	0019      	movs	r1, r3
   1f8d8:	0010      	movs	r0, r2
   1f8da:	4b0e      	ldr	r3, [pc, #56]	; (1f914 <sd_mmc_spi_install_mmc+0xd8>)
   1f8dc:	4798      	blx	r3
   1f8de:	0003      	movs	r3, r0
   1f8e0:	001a      	movs	r2, r3
   1f8e2:	2301      	movs	r3, #1
   1f8e4:	4053      	eors	r3, r2
   1f8e6:	b2db      	uxtb	r3, r3
   1f8e8:	2b00      	cmp	r3, #0
   1f8ea:	d001      	beq.n	1f8f0 <sd_mmc_spi_install_mmc+0xb4>
		return false;
   1f8ec:	2300      	movs	r3, #0
   1f8ee:	e00d      	b.n	1f90c <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
   1f8f0:	4b10      	ldr	r3, [pc, #64]	; (1f934 <sd_mmc_spi_install_mmc+0xf8>)
   1f8f2:	4798      	blx	r3
   1f8f4:	0003      	movs	r3, r0
   1f8f6:	001a      	movs	r2, r3
   1f8f8:	2301      	movs	r3, #1
   1f8fa:	4053      	eors	r3, r2
   1f8fc:	b2db      	uxtb	r3, r3
   1f8fe:	2b00      	cmp	r3, #0
   1f900:	d001      	beq.n	1f906 <sd_mmc_spi_install_mmc+0xca>
		return false;
   1f902:	2300      	movs	r3, #0
   1f904:	e002      	b.n	1f90c <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1f906:	4b0c      	ldr	r3, [pc, #48]	; (1f938 <sd_mmc_spi_install_mmc+0xfc>)
   1f908:	4798      	blx	r3
	return true;
   1f90a:	2301      	movs	r3, #1
}
   1f90c:	0018      	movs	r0, r3
   1f90e:	46bd      	mov	sp, r7
   1f910:	b002      	add	sp, #8
   1f912:	bd80      	pop	{r7, pc}
   1f914:	000208c5 	.word	0x000208c5
   1f918:	0001ee49 	.word	0x0001ee49
   1f91c:	0000113b 	.word	0x0000113b
   1f920:	0001f181 	.word	0x0001f181
   1f924:	0001f1f1 	.word	0x0001f1f1
   1f928:	20003e80 	.word	0x20003e80
   1f92c:	0001f055 	.word	0x0001f055
   1f930:	00001110 	.word	0x00001110
   1f934:	0001f40d 	.word	0x0001f40d
   1f938:	0001f635 	.word	0x0001f635

0001f93c <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
   1f93c:	b580      	push	{r7, lr}
   1f93e:	b082      	sub	sp, #8
   1f940:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1f942:	1dfb      	adds	r3, r7, #7
   1f944:	2200      	movs	r2, #0
   1f946:	701a      	strb	r2, [r3, #0]
   1f948:	e00c      	b.n	1f964 <sd_mmc_init+0x28>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   1f94a:	1dfb      	adds	r3, r7, #7
   1f94c:	781b      	ldrb	r3, [r3, #0]
   1f94e:	4a0c      	ldr	r2, [pc, #48]	; (1f980 <sd_mmc_init+0x44>)
   1f950:	015b      	lsls	r3, r3, #5
   1f952:	18d3      	adds	r3, r2, r3
   1f954:	330a      	adds	r3, #10
   1f956:	2204      	movs	r2, #4
   1f958:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1f95a:	1dfb      	adds	r3, r7, #7
   1f95c:	781a      	ldrb	r2, [r3, #0]
   1f95e:	1dfb      	adds	r3, r7, #7
   1f960:	3201      	adds	r2, #1
   1f962:	701a      	strb	r2, [r3, #0]
   1f964:	1dfb      	adds	r3, r7, #7
   1f966:	781b      	ldrb	r3, [r3, #0]
   1f968:	2b00      	cmp	r3, #0
   1f96a:	d0ee      	beq.n	1f94a <sd_mmc_init+0xe>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
   1f96c:	4b05      	ldr	r3, [pc, #20]	; (1f984 <sd_mmc_init+0x48>)
   1f96e:	22ff      	movs	r2, #255	; 0xff
   1f970:	701a      	strb	r2, [r3, #0]
	driver_init();
   1f972:	4b05      	ldr	r3, [pc, #20]	; (1f988 <sd_mmc_init+0x4c>)
   1f974:	4798      	blx	r3
}
   1f976:	46c0      	nop			; (mov r8, r8)
   1f978:	46bd      	mov	sp, r7
   1f97a:	b002      	add	sp, #8
   1f97c:	bd80      	pop	{r7, pc}
   1f97e:	46c0      	nop			; (mov r8, r8)
   1f980:	20003e5c 	.word	0x20003e5c
   1f984:	20003e7c 	.word	0x20003e7c
   1f988:	000206e5 	.word	0x000206e5

0001f98c <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
   1f98c:	b590      	push	{r4, r7, lr}
   1f98e:	b085      	sub	sp, #20
   1f990:	af00      	add	r7, sp, #0
   1f992:	0002      	movs	r2, r0
   1f994:	1dfb      	adds	r3, r7, #7
   1f996:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1f998:	230f      	movs	r3, #15
   1f99a:	18fc      	adds	r4, r7, r3
   1f99c:	1dfb      	adds	r3, r7, #7
   1f99e:	781b      	ldrb	r3, [r3, #0]
   1f9a0:	0018      	movs	r0, r3
   1f9a2:	4b13      	ldr	r3, [pc, #76]	; (1f9f0 <sd_mmc_check+0x64>)
   1f9a4:	4798      	blx	r3
   1f9a6:	0003      	movs	r3, r0
   1f9a8:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
   1f9aa:	230f      	movs	r3, #15
   1f9ac:	18fb      	adds	r3, r7, r3
   1f9ae:	781b      	ldrb	r3, [r3, #0]
   1f9b0:	2b01      	cmp	r3, #1
   1f9b2:	d005      	beq.n	1f9c0 <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
   1f9b4:	4b0f      	ldr	r3, [pc, #60]	; (1f9f4 <sd_mmc_check+0x68>)
   1f9b6:	4798      	blx	r3
		return sd_mmc_err;
   1f9b8:	230f      	movs	r3, #15
   1f9ba:	18fb      	adds	r3, r7, r3
   1f9bc:	781b      	ldrb	r3, [r3, #0]
   1f9be:	e012      	b.n	1f9e6 <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
   1f9c0:	4b0d      	ldr	r3, [pc, #52]	; (1f9f8 <sd_mmc_check+0x6c>)
   1f9c2:	4798      	blx	r3
   1f9c4:	1e03      	subs	r3, r0, #0
   1f9c6:	d007      	beq.n	1f9d8 <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
   1f9c8:	4b0c      	ldr	r3, [pc, #48]	; (1f9fc <sd_mmc_check+0x70>)
   1f9ca:	681b      	ldr	r3, [r3, #0]
   1f9cc:	2200      	movs	r2, #0
   1f9ce:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
   1f9d0:	4b08      	ldr	r3, [pc, #32]	; (1f9f4 <sd_mmc_check+0x68>)
   1f9d2:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
   1f9d4:	2301      	movs	r3, #1
   1f9d6:	e006      	b.n	1f9e6 <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
   1f9d8:	4b08      	ldr	r3, [pc, #32]	; (1f9fc <sd_mmc_check+0x70>)
   1f9da:	681b      	ldr	r3, [r3, #0]
   1f9dc:	2203      	movs	r2, #3
   1f9de:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
   1f9e0:	4b04      	ldr	r3, [pc, #16]	; (1f9f4 <sd_mmc_check+0x68>)
   1f9e2:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
   1f9e4:	2303      	movs	r3, #3
}
   1f9e6:	0018      	movs	r0, r3
   1f9e8:	46bd      	mov	sp, r7
   1f9ea:	b005      	add	sp, #20
   1f9ec:	bd90      	pop	{r4, r7, pc}
   1f9ee:	46c0      	nop			; (mov r8, r8)
   1f9f0:	0001f571 	.word	0x0001f571
   1f9f4:	0001f66d 	.word	0x0001f66d
   1f9f8:	0001f691 	.word	0x0001f691
   1f9fc:	20003e80 	.word	0x20003e80

0001fa00 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
   1fa00:	b580      	push	{r7, lr}
   1fa02:	b082      	sub	sp, #8
   1fa04:	af00      	add	r7, sp, #0
   1fa06:	0002      	movs	r2, r0
   1fa08:	1dfb      	adds	r3, r7, #7
   1fa0a:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1fa0c:	1dfb      	adds	r3, r7, #7
   1fa0e:	781b      	ldrb	r3, [r3, #0]
   1fa10:	0018      	movs	r0, r3
   1fa12:	4b07      	ldr	r3, [pc, #28]	; (1fa30 <sd_mmc_get_type+0x30>)
   1fa14:	4798      	blx	r3
   1fa16:	1e03      	subs	r3, r0, #0
   1fa18:	d001      	beq.n	1fa1e <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
   1fa1a:	2300      	movs	r3, #0
   1fa1c:	e004      	b.n	1fa28 <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
   1fa1e:	4b05      	ldr	r3, [pc, #20]	; (1fa34 <sd_mmc_get_type+0x34>)
   1fa20:	4798      	blx	r3
	return sd_mmc_card->type;
   1fa22:	4b05      	ldr	r3, [pc, #20]	; (1fa38 <sd_mmc_get_type+0x38>)
   1fa24:	681b      	ldr	r3, [r3, #0]
   1fa26:	7adb      	ldrb	r3, [r3, #11]
}
   1fa28:	0018      	movs	r0, r3
   1fa2a:	46bd      	mov	sp, r7
   1fa2c:	b002      	add	sp, #8
   1fa2e:	bd80      	pop	{r7, pc}
   1fa30:	0001f571 	.word	0x0001f571
   1fa34:	0001f66d 	.word	0x0001f66d
   1fa38:	20003e80 	.word	0x20003e80

0001fa3c <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
   1fa3c:	b580      	push	{r7, lr}
   1fa3e:	b082      	sub	sp, #8
   1fa40:	af00      	add	r7, sp, #0
   1fa42:	0002      	movs	r2, r0
   1fa44:	1dfb      	adds	r3, r7, #7
   1fa46:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1fa48:	1dfb      	adds	r3, r7, #7
   1fa4a:	781b      	ldrb	r3, [r3, #0]
   1fa4c:	0018      	movs	r0, r3
   1fa4e:	4b07      	ldr	r3, [pc, #28]	; (1fa6c <sd_mmc_get_capacity+0x30>)
   1fa50:	4798      	blx	r3
   1fa52:	1e03      	subs	r3, r0, #0
   1fa54:	d001      	beq.n	1fa5a <sd_mmc_get_capacity+0x1e>
		return 0;
   1fa56:	2300      	movs	r3, #0
   1fa58:	e004      	b.n	1fa64 <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
   1fa5a:	4b05      	ldr	r3, [pc, #20]	; (1fa70 <sd_mmc_get_capacity+0x34>)
   1fa5c:	4798      	blx	r3
	return sd_mmc_card->capacity;
   1fa5e:	4b05      	ldr	r3, [pc, #20]	; (1fa74 <sd_mmc_get_capacity+0x38>)
   1fa60:	681b      	ldr	r3, [r3, #0]
   1fa62:	685b      	ldr	r3, [r3, #4]
}
   1fa64:	0018      	movs	r0, r3
   1fa66:	46bd      	mov	sp, r7
   1fa68:	b002      	add	sp, #8
   1fa6a:	bd80      	pop	{r7, pc}
   1fa6c:	0001f571 	.word	0x0001f571
   1fa70:	0001f66d 	.word	0x0001f66d
   1fa74:	20003e80 	.word	0x20003e80

0001fa78 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
   1fa78:	b580      	push	{r7, lr}
   1fa7a:	b082      	sub	sp, #8
   1fa7c:	af00      	add	r7, sp, #0
   1fa7e:	0002      	movs	r2, r0
   1fa80:	1dfb      	adds	r3, r7, #7
   1fa82:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
   1fa84:	2300      	movs	r3, #0
}
   1fa86:	0018      	movs	r0, r3
   1fa88:	46bd      	mov	sp, r7
   1fa8a:	b002      	add	sp, #8
   1fa8c:	bd80      	pop	{r7, pc}
	...

0001fa90 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1fa90:	b590      	push	{r4, r7, lr}
   1fa92:	b089      	sub	sp, #36	; 0x24
   1fa94:	af02      	add	r7, sp, #8
   1fa96:	6039      	str	r1, [r7, #0]
   1fa98:	0011      	movs	r1, r2
   1fa9a:	1dfb      	adds	r3, r7, #7
   1fa9c:	1c02      	adds	r2, r0, #0
   1fa9e:	701a      	strb	r2, [r3, #0]
   1faa0:	1d3b      	adds	r3, r7, #4
   1faa2:	1c0a      	adds	r2, r1, #0
   1faa4:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1faa6:	230f      	movs	r3, #15
   1faa8:	18fc      	adds	r4, r7, r3
   1faaa:	1dfb      	adds	r3, r7, #7
   1faac:	781b      	ldrb	r3, [r3, #0]
   1faae:	0018      	movs	r0, r3
   1fab0:	4b29      	ldr	r3, [pc, #164]	; (1fb58 <sd_mmc_init_read_blocks+0xc8>)
   1fab2:	4798      	blx	r3
   1fab4:	0003      	movs	r3, r0
   1fab6:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1fab8:	230f      	movs	r3, #15
   1faba:	18fb      	adds	r3, r7, r3
   1fabc:	781b      	ldrb	r3, [r3, #0]
   1fabe:	2b00      	cmp	r3, #0
   1fac0:	d003      	beq.n	1faca <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
   1fac2:	230f      	movs	r3, #15
   1fac4:	18fb      	adds	r3, r7, r3
   1fac6:	781b      	ldrb	r3, [r3, #0]
   1fac8:	e041      	b.n	1fb4e <sd_mmc_init_read_blocks+0xbe>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
   1faca:	4b24      	ldr	r3, [pc, #144]	; (1fb5c <sd_mmc_init_read_blocks+0xcc>)
   1facc:	4798      	blx	r3
   1face:	0003      	movs	r3, r0
   1fad0:	001a      	movs	r2, r3
   1fad2:	2301      	movs	r3, #1
   1fad4:	4053      	eors	r3, r2
   1fad6:	b2db      	uxtb	r3, r3
   1fad8:	2b00      	cmp	r3, #0
   1fada:	d003      	beq.n	1fae4 <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
   1fadc:	4b20      	ldr	r3, [pc, #128]	; (1fb60 <sd_mmc_init_read_blocks+0xd0>)
   1fade:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1fae0:	2305      	movs	r3, #5
   1fae2:	e034      	b.n	1fb4e <sd_mmc_init_read_blocks+0xbe>
	}

	if (nb_block > 1) {
   1fae4:	1d3b      	adds	r3, r7, #4
   1fae6:	881b      	ldrh	r3, [r3, #0]
   1fae8:	2b01      	cmp	r3, #1
   1faea:	d902      	bls.n	1faf2 <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
   1faec:	4b1d      	ldr	r3, [pc, #116]	; (1fb64 <sd_mmc_init_read_blocks+0xd4>)
   1faee:	617b      	str	r3, [r7, #20]
   1faf0:	e001      	b.n	1faf6 <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
   1faf2:	4b1d      	ldr	r3, [pc, #116]	; (1fb68 <sd_mmc_init_read_blocks+0xd8>)
   1faf4:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1faf6:	4b1d      	ldr	r3, [pc, #116]	; (1fb6c <sd_mmc_init_read_blocks+0xdc>)
   1faf8:	681b      	ldr	r3, [r3, #0]
   1fafa:	7adb      	ldrb	r3, [r3, #11]
   1fafc:	001a      	movs	r2, r3
   1fafe:	2308      	movs	r3, #8
   1fb00:	4013      	ands	r3, r2
   1fb02:	d002      	beq.n	1fb0a <sd_mmc_init_read_blocks+0x7a>
		arg = start;
   1fb04:	683b      	ldr	r3, [r7, #0]
   1fb06:	613b      	str	r3, [r7, #16]
   1fb08:	e002      	b.n	1fb10 <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1fb0a:	683b      	ldr	r3, [r7, #0]
   1fb0c:	025b      	lsls	r3, r3, #9
   1fb0e:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1fb10:	1d3b      	adds	r3, r7, #4
   1fb12:	881c      	ldrh	r4, [r3, #0]
   1fb14:	2380      	movs	r3, #128	; 0x80
   1fb16:	009a      	lsls	r2, r3, #2
   1fb18:	6939      	ldr	r1, [r7, #16]
   1fb1a:	6978      	ldr	r0, [r7, #20]
   1fb1c:	2301      	movs	r3, #1
   1fb1e:	9300      	str	r3, [sp, #0]
   1fb20:	0023      	movs	r3, r4
   1fb22:	4c13      	ldr	r4, [pc, #76]	; (1fb70 <sd_mmc_init_read_blocks+0xe0>)
   1fb24:	47a0      	blx	r4
   1fb26:	0003      	movs	r3, r0
   1fb28:	001a      	movs	r2, r3
   1fb2a:	2301      	movs	r3, #1
   1fb2c:	4053      	eors	r3, r2
   1fb2e:	b2db      	uxtb	r3, r3
   1fb30:	2b00      	cmp	r3, #0
   1fb32:	d003      	beq.n	1fb3c <sd_mmc_init_read_blocks+0xac>
		sd_mmc_deselect_slot();
   1fb34:	4b0a      	ldr	r3, [pc, #40]	; (1fb60 <sd_mmc_init_read_blocks+0xd0>)
   1fb36:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1fb38:	2305      	movs	r3, #5
   1fb3a:	e008      	b.n	1fb4e <sd_mmc_init_read_blocks+0xbe>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1fb3c:	4b0d      	ldr	r3, [pc, #52]	; (1fb74 <sd_mmc_init_read_blocks+0xe4>)
   1fb3e:	1d3a      	adds	r2, r7, #4
   1fb40:	8812      	ldrh	r2, [r2, #0]
   1fb42:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1fb44:	4b0c      	ldr	r3, [pc, #48]	; (1fb78 <sd_mmc_init_read_blocks+0xe8>)
   1fb46:	1d3a      	adds	r2, r7, #4
   1fb48:	8812      	ldrh	r2, [r2, #0]
   1fb4a:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1fb4c:	2300      	movs	r3, #0
}
   1fb4e:	0018      	movs	r0, r3
   1fb50:	46bd      	mov	sp, r7
   1fb52:	b007      	add	sp, #28
   1fb54:	bd90      	pop	{r4, r7, pc}
   1fb56:	46c0      	nop			; (mov r8, r8)
   1fb58:	0001f571 	.word	0x0001f571
   1fb5c:	0001f40d 	.word	0x0001f40d
   1fb60:	0001f66d 	.word	0x0001f66d
   1fb64:	00101112 	.word	0x00101112
   1fb68:	00081111 	.word	0x00081111
   1fb6c:	20003e80 	.word	0x20003e80
   1fb70:	000208ed 	.word	0x000208ed
   1fb74:	20003e86 	.word	0x20003e86
   1fb78:	20003e84 	.word	0x20003e84

0001fb7c <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
   1fb7c:	b580      	push	{r7, lr}
   1fb7e:	b082      	sub	sp, #8
   1fb80:	af00      	add	r7, sp, #0
   1fb82:	6078      	str	r0, [r7, #4]
   1fb84:	000a      	movs	r2, r1
   1fb86:	1cbb      	adds	r3, r7, #2
   1fb88:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
   1fb8a:	1cbb      	adds	r3, r7, #2
   1fb8c:	881a      	ldrh	r2, [r3, #0]
   1fb8e:	687b      	ldr	r3, [r7, #4]
   1fb90:	0011      	movs	r1, r2
   1fb92:	0018      	movs	r0, r3
   1fb94:	4b0d      	ldr	r3, [pc, #52]	; (1fbcc <sd_mmc_start_read_blocks+0x50>)
   1fb96:	4798      	blx	r3
   1fb98:	0003      	movs	r3, r0
   1fb9a:	001a      	movs	r2, r3
   1fb9c:	2301      	movs	r3, #1
   1fb9e:	4053      	eors	r3, r2
   1fba0:	b2db      	uxtb	r3, r3
   1fba2:	2b00      	cmp	r3, #0
   1fba4:	d004      	beq.n	1fbb0 <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1fba6:	4b0a      	ldr	r3, [pc, #40]	; (1fbd0 <sd_mmc_start_read_blocks+0x54>)
   1fba8:	2200      	movs	r2, #0
   1fbaa:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1fbac:	2305      	movs	r3, #5
   1fbae:	e008      	b.n	1fbc2 <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1fbb0:	4b07      	ldr	r3, [pc, #28]	; (1fbd0 <sd_mmc_start_read_blocks+0x54>)
   1fbb2:	881a      	ldrh	r2, [r3, #0]
   1fbb4:	1cbb      	adds	r3, r7, #2
   1fbb6:	881b      	ldrh	r3, [r3, #0]
   1fbb8:	1ad3      	subs	r3, r2, r3
   1fbba:	b29a      	uxth	r2, r3
   1fbbc:	4b04      	ldr	r3, [pc, #16]	; (1fbd0 <sd_mmc_start_read_blocks+0x54>)
   1fbbe:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1fbc0:	2300      	movs	r3, #0
}
   1fbc2:	0018      	movs	r0, r3
   1fbc4:	46bd      	mov	sp, r7
   1fbc6:	b002      	add	sp, #8
   1fbc8:	bd80      	pop	{r7, pc}
   1fbca:	46c0      	nop			; (mov r8, r8)
   1fbcc:	00020bbd 	.word	0x00020bbd
   1fbd0:	20003e86 	.word	0x20003e86

0001fbd4 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
   1fbd4:	b580      	push	{r7, lr}
   1fbd6:	b082      	sub	sp, #8
   1fbd8:	af00      	add	r7, sp, #0
   1fbda:	0002      	movs	r2, r0
   1fbdc:	1dfb      	adds	r3, r7, #7
   1fbde:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
   1fbe0:	4b1c      	ldr	r3, [pc, #112]	; (1fc54 <sd_mmc_wait_end_of_read_blocks+0x80>)
   1fbe2:	4798      	blx	r3
   1fbe4:	0003      	movs	r3, r0
   1fbe6:	001a      	movs	r2, r3
   1fbe8:	2301      	movs	r3, #1
   1fbea:	4053      	eors	r3, r2
   1fbec:	b2db      	uxtb	r3, r3
   1fbee:	2b00      	cmp	r3, #0
   1fbf0:	d001      	beq.n	1fbf6 <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1fbf2:	2305      	movs	r3, #5
   1fbf4:	e029      	b.n	1fc4a <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
   1fbf6:	1dfb      	adds	r3, r7, #7
   1fbf8:	781b      	ldrb	r3, [r3, #0]
   1fbfa:	2b00      	cmp	r3, #0
   1fbfc:	d003      	beq.n	1fc06 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1fbfe:	4b16      	ldr	r3, [pc, #88]	; (1fc58 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1fc00:	2200      	movs	r2, #0
   1fc02:	801a      	strh	r2, [r3, #0]
   1fc04:	e005      	b.n	1fc12 <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1fc06:	4b14      	ldr	r3, [pc, #80]	; (1fc58 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1fc08:	881b      	ldrh	r3, [r3, #0]
   1fc0a:	2b00      	cmp	r3, #0
   1fc0c:	d001      	beq.n	1fc12 <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
   1fc0e:	2300      	movs	r3, #0
   1fc10:	e01b      	b.n	1fc4a <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1fc12:	4b12      	ldr	r3, [pc, #72]	; (1fc5c <sd_mmc_wait_end_of_read_blocks+0x88>)
   1fc14:	881b      	ldrh	r3, [r3, #0]
   1fc16:	2b01      	cmp	r3, #1
   1fc18:	d103      	bne.n	1fc22 <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1fc1a:	4b11      	ldr	r3, [pc, #68]	; (1fc60 <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1fc1c:	4798      	blx	r3
		return SD_MMC_OK;
   1fc1e:	2300      	movs	r3, #0
   1fc20:	e013      	b.n	1fc4a <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   1fc22:	4b10      	ldr	r3, [pc, #64]	; (1fc64 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1fc24:	2100      	movs	r1, #0
   1fc26:	0018      	movs	r0, r3
   1fc28:	4b0f      	ldr	r3, [pc, #60]	; (1fc68 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1fc2a:	4798      	blx	r3
   1fc2c:	0003      	movs	r3, r0
   1fc2e:	001a      	movs	r2, r3
   1fc30:	2301      	movs	r3, #1
   1fc32:	4053      	eors	r3, r2
   1fc34:	b2db      	uxtb	r3, r3
   1fc36:	2b00      	cmp	r3, #0
   1fc38:	d004      	beq.n	1fc44 <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
   1fc3a:	4b0a      	ldr	r3, [pc, #40]	; (1fc64 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1fc3c:	2100      	movs	r1, #0
   1fc3e:	0018      	movs	r0, r3
   1fc40:	4b09      	ldr	r3, [pc, #36]	; (1fc68 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1fc42:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
   1fc44:	4b06      	ldr	r3, [pc, #24]	; (1fc60 <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1fc46:	4798      	blx	r3
	return SD_MMC_OK;
   1fc48:	2300      	movs	r3, #0
}
   1fc4a:	0018      	movs	r0, r3
   1fc4c:	46bd      	mov	sp, r7
   1fc4e:	b002      	add	sp, #8
   1fc50:	bd80      	pop	{r7, pc}
   1fc52:	46c0      	nop			; (mov r8, r8)
   1fc54:	00020c61 	.word	0x00020c61
   1fc58:	20003e86 	.word	0x20003e86
   1fc5c:	20003e84 	.word	0x20003e84
   1fc60:	0001f66d 	.word	0x0001f66d
   1fc64:	0000310c 	.word	0x0000310c
   1fc68:	000208c5 	.word	0x000208c5

0001fc6c <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1fc6c:	b590      	push	{r4, r7, lr}
   1fc6e:	b089      	sub	sp, #36	; 0x24
   1fc70:	af02      	add	r7, sp, #8
   1fc72:	6039      	str	r1, [r7, #0]
   1fc74:	0011      	movs	r1, r2
   1fc76:	1dfb      	adds	r3, r7, #7
   1fc78:	1c02      	adds	r2, r0, #0
   1fc7a:	701a      	strb	r2, [r3, #0]
   1fc7c:	1d3b      	adds	r3, r7, #4
   1fc7e:	1c0a      	adds	r2, r1, #0
   1fc80:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1fc82:	230f      	movs	r3, #15
   1fc84:	18fc      	adds	r4, r7, r3
   1fc86:	1dfb      	adds	r3, r7, #7
   1fc88:	781b      	ldrb	r3, [r3, #0]
   1fc8a:	0018      	movs	r0, r3
   1fc8c:	4b28      	ldr	r3, [pc, #160]	; (1fd30 <sd_mmc_init_write_blocks+0xc4>)
   1fc8e:	4798      	blx	r3
   1fc90:	0003      	movs	r3, r0
   1fc92:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1fc94:	230f      	movs	r3, #15
   1fc96:	18fb      	adds	r3, r7, r3
   1fc98:	781b      	ldrb	r3, [r3, #0]
   1fc9a:	2b00      	cmp	r3, #0
   1fc9c:	d003      	beq.n	1fca6 <sd_mmc_init_write_blocks+0x3a>
		return sd_mmc_err;
   1fc9e:	230f      	movs	r3, #15
   1fca0:	18fb      	adds	r3, r7, r3
   1fca2:	781b      	ldrb	r3, [r3, #0]
   1fca4:	e03f      	b.n	1fd26 <sd_mmc_init_write_blocks+0xba>
	}
	if (sd_mmc_is_write_protected(slot)) {
   1fca6:	1dfb      	adds	r3, r7, #7
   1fca8:	781b      	ldrb	r3, [r3, #0]
   1fcaa:	0018      	movs	r0, r3
   1fcac:	4b21      	ldr	r3, [pc, #132]	; (1fd34 <sd_mmc_init_write_blocks+0xc8>)
   1fcae:	4798      	blx	r3
   1fcb0:	1e03      	subs	r3, r0, #0
   1fcb2:	d003      	beq.n	1fcbc <sd_mmc_init_write_blocks+0x50>
		sd_mmc_deselect_slot();
   1fcb4:	4b20      	ldr	r3, [pc, #128]	; (1fd38 <sd_mmc_init_write_blocks+0xcc>)
   1fcb6:	4798      	blx	r3
		return SD_MMC_ERR_WP;
   1fcb8:	2307      	movs	r3, #7
   1fcba:	e034      	b.n	1fd26 <sd_mmc_init_write_blocks+0xba>
	}

	if (nb_block > 1) {
   1fcbc:	1d3b      	adds	r3, r7, #4
   1fcbe:	881b      	ldrh	r3, [r3, #0]
   1fcc0:	2b01      	cmp	r3, #1
   1fcc2:	d902      	bls.n	1fcca <sd_mmc_init_write_blocks+0x5e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
   1fcc4:	4b1d      	ldr	r3, [pc, #116]	; (1fd3c <sd_mmc_init_write_blocks+0xd0>)
   1fcc6:	617b      	str	r3, [r7, #20]
   1fcc8:	e001      	b.n	1fcce <sd_mmc_init_write_blocks+0x62>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
   1fcca:	4b1d      	ldr	r3, [pc, #116]	; (1fd40 <sd_mmc_init_write_blocks+0xd4>)
   1fccc:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1fcce:	4b1d      	ldr	r3, [pc, #116]	; (1fd44 <sd_mmc_init_write_blocks+0xd8>)
   1fcd0:	681b      	ldr	r3, [r3, #0]
   1fcd2:	7adb      	ldrb	r3, [r3, #11]
   1fcd4:	001a      	movs	r2, r3
   1fcd6:	2308      	movs	r3, #8
   1fcd8:	4013      	ands	r3, r2
   1fcda:	d002      	beq.n	1fce2 <sd_mmc_init_write_blocks+0x76>
		arg = start;
   1fcdc:	683b      	ldr	r3, [r7, #0]
   1fcde:	613b      	str	r3, [r7, #16]
   1fce0:	e002      	b.n	1fce8 <sd_mmc_init_write_blocks+0x7c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1fce2:	683b      	ldr	r3, [r7, #0]
   1fce4:	025b      	lsls	r3, r3, #9
   1fce6:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1fce8:	1d3b      	adds	r3, r7, #4
   1fcea:	881c      	ldrh	r4, [r3, #0]
   1fcec:	2380      	movs	r3, #128	; 0x80
   1fcee:	009a      	lsls	r2, r3, #2
   1fcf0:	6939      	ldr	r1, [r7, #16]
   1fcf2:	6978      	ldr	r0, [r7, #20]
   1fcf4:	2301      	movs	r3, #1
   1fcf6:	9300      	str	r3, [sp, #0]
   1fcf8:	0023      	movs	r3, r4
   1fcfa:	4c13      	ldr	r4, [pc, #76]	; (1fd48 <sd_mmc_init_write_blocks+0xdc>)
   1fcfc:	47a0      	blx	r4
   1fcfe:	0003      	movs	r3, r0
   1fd00:	001a      	movs	r2, r3
   1fd02:	2301      	movs	r3, #1
   1fd04:	4053      	eors	r3, r2
   1fd06:	b2db      	uxtb	r3, r3
   1fd08:	2b00      	cmp	r3, #0
   1fd0a:	d003      	beq.n	1fd14 <sd_mmc_init_write_blocks+0xa8>
		sd_mmc_deselect_slot();
   1fd0c:	4b0a      	ldr	r3, [pc, #40]	; (1fd38 <sd_mmc_init_write_blocks+0xcc>)
   1fd0e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1fd10:	2305      	movs	r3, #5
   1fd12:	e008      	b.n	1fd26 <sd_mmc_init_write_blocks+0xba>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1fd14:	4b0d      	ldr	r3, [pc, #52]	; (1fd4c <sd_mmc_init_write_blocks+0xe0>)
   1fd16:	1d3a      	adds	r2, r7, #4
   1fd18:	8812      	ldrh	r2, [r2, #0]
   1fd1a:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1fd1c:	4b0c      	ldr	r3, [pc, #48]	; (1fd50 <sd_mmc_init_write_blocks+0xe4>)
   1fd1e:	1d3a      	adds	r2, r7, #4
   1fd20:	8812      	ldrh	r2, [r2, #0]
   1fd22:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1fd24:	2300      	movs	r3, #0
}
   1fd26:	0018      	movs	r0, r3
   1fd28:	46bd      	mov	sp, r7
   1fd2a:	b007      	add	sp, #28
   1fd2c:	bd90      	pop	{r4, r7, pc}
   1fd2e:	46c0      	nop			; (mov r8, r8)
   1fd30:	0001f571 	.word	0x0001f571
   1fd34:	0001fa79 	.word	0x0001fa79
   1fd38:	0001f66d 	.word	0x0001f66d
   1fd3c:	00109119 	.word	0x00109119
   1fd40:	00089118 	.word	0x00089118
   1fd44:	20003e80 	.word	0x20003e80
   1fd48:	000208ed 	.word	0x000208ed
   1fd4c:	20003e86 	.word	0x20003e86
   1fd50:	20003e84 	.word	0x20003e84

0001fd54 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
   1fd54:	b580      	push	{r7, lr}
   1fd56:	b082      	sub	sp, #8
   1fd58:	af00      	add	r7, sp, #0
   1fd5a:	6078      	str	r0, [r7, #4]
   1fd5c:	000a      	movs	r2, r1
   1fd5e:	1cbb      	adds	r3, r7, #2
   1fd60:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
   1fd62:	1cbb      	adds	r3, r7, #2
   1fd64:	881a      	ldrh	r2, [r3, #0]
   1fd66:	687b      	ldr	r3, [r7, #4]
   1fd68:	0011      	movs	r1, r2
   1fd6a:	0018      	movs	r0, r3
   1fd6c:	4b0d      	ldr	r3, [pc, #52]	; (1fda4 <sd_mmc_start_write_blocks+0x50>)
   1fd6e:	4798      	blx	r3
   1fd70:	0003      	movs	r3, r0
   1fd72:	001a      	movs	r2, r3
   1fd74:	2301      	movs	r3, #1
   1fd76:	4053      	eors	r3, r2
   1fd78:	b2db      	uxtb	r3, r3
   1fd7a:	2b00      	cmp	r3, #0
   1fd7c:	d004      	beq.n	1fd88 <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1fd7e:	4b0a      	ldr	r3, [pc, #40]	; (1fda8 <sd_mmc_start_write_blocks+0x54>)
   1fd80:	2200      	movs	r2, #0
   1fd82:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1fd84:	2305      	movs	r3, #5
   1fd86:	e008      	b.n	1fd9a <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1fd88:	4b07      	ldr	r3, [pc, #28]	; (1fda8 <sd_mmc_start_write_blocks+0x54>)
   1fd8a:	881a      	ldrh	r2, [r3, #0]
   1fd8c:	1cbb      	adds	r3, r7, #2
   1fd8e:	881b      	ldrh	r3, [r3, #0]
   1fd90:	1ad3      	subs	r3, r2, r3
   1fd92:	b29a      	uxth	r2, r3
   1fd94:	4b04      	ldr	r3, [pc, #16]	; (1fda8 <sd_mmc_start_write_blocks+0x54>)
   1fd96:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1fd98:	2300      	movs	r3, #0
}
   1fd9a:	0018      	movs	r0, r3
   1fd9c:	46bd      	mov	sp, r7
   1fd9e:	b002      	add	sp, #8
   1fda0:	bd80      	pop	{r7, pc}
   1fda2:	46c0      	nop			; (mov r8, r8)
   1fda4:	00020c6d 	.word	0x00020c6d
   1fda8:	20003e86 	.word	0x20003e86

0001fdac <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
   1fdac:	b580      	push	{r7, lr}
   1fdae:	b082      	sub	sp, #8
   1fdb0:	af00      	add	r7, sp, #0
   1fdb2:	0002      	movs	r2, r0
   1fdb4:	1dfb      	adds	r3, r7, #7
   1fdb6:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
   1fdb8:	4b13      	ldr	r3, [pc, #76]	; (1fe08 <sd_mmc_wait_end_of_write_blocks+0x5c>)
   1fdba:	4798      	blx	r3
   1fdbc:	0003      	movs	r3, r0
   1fdbe:	001a      	movs	r2, r3
   1fdc0:	2301      	movs	r3, #1
   1fdc2:	4053      	eors	r3, r2
   1fdc4:	b2db      	uxtb	r3, r3
   1fdc6:	2b00      	cmp	r3, #0
   1fdc8:	d001      	beq.n	1fdce <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1fdca:	2305      	movs	r3, #5
   1fdcc:	e018      	b.n	1fe00 <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
   1fdce:	1dfb      	adds	r3, r7, #7
   1fdd0:	781b      	ldrb	r3, [r3, #0]
   1fdd2:	2b00      	cmp	r3, #0
   1fdd4:	d003      	beq.n	1fdde <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1fdd6:	4b0d      	ldr	r3, [pc, #52]	; (1fe0c <sd_mmc_wait_end_of_write_blocks+0x60>)
   1fdd8:	2200      	movs	r2, #0
   1fdda:	801a      	strh	r2, [r3, #0]
   1fddc:	e005      	b.n	1fdea <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1fdde:	4b0b      	ldr	r3, [pc, #44]	; (1fe0c <sd_mmc_wait_end_of_write_blocks+0x60>)
   1fde0:	881b      	ldrh	r3, [r3, #0]
   1fde2:	2b00      	cmp	r3, #0
   1fde4:	d001      	beq.n	1fdea <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
   1fde6:	2300      	movs	r3, #0
   1fde8:	e00a      	b.n	1fe00 <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1fdea:	4b09      	ldr	r3, [pc, #36]	; (1fe10 <sd_mmc_wait_end_of_write_blocks+0x64>)
   1fdec:	881b      	ldrh	r3, [r3, #0]
   1fdee:	2b01      	cmp	r3, #1
   1fdf0:	d103      	bne.n	1fdfa <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1fdf2:	4b08      	ldr	r3, [pc, #32]	; (1fe14 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1fdf4:	4798      	blx	r3
		return SD_MMC_OK;
   1fdf6:	2300      	movs	r3, #0
   1fdf8:	e002      	b.n	1fe00 <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
   1fdfa:	4b06      	ldr	r3, [pc, #24]	; (1fe14 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1fdfc:	4798      	blx	r3
	return SD_MMC_OK;
   1fdfe:	2300      	movs	r3, #0
}
   1fe00:	0018      	movs	r0, r3
   1fe02:	46bd      	mov	sp, r7
   1fe04:	b002      	add	sp, #8
   1fe06:	bd80      	pop	{r7, pc}
   1fe08:	00020d2d 	.word	0x00020d2d
   1fe0c:	20003e86 	.word	0x20003e86
   1fe10:	20003e84 	.word	0x20003e84
   1fe14:	0001f66d 	.word	0x0001f66d

0001fe18 <sd_mmc_test_unit_ready>:
   1fe18:	b580      	push	{r7, lr}
   1fe1a:	b082      	sub	sp, #8
   1fe1c:	af00      	add	r7, sp, #0
   1fe1e:	0002      	movs	r2, r0
   1fe20:	1dfb      	adds	r3, r7, #7
   1fe22:	701a      	strb	r2, [r3, #0]
   1fe24:	1dfb      	adds	r3, r7, #7
   1fe26:	781b      	ldrb	r3, [r3, #0]
   1fe28:	0018      	movs	r0, r3
   1fe2a:	4b16      	ldr	r3, [pc, #88]	; (1fe84 <sd_mmc_test_unit_ready+0x6c>)
   1fe2c:	4798      	blx	r3
   1fe2e:	0003      	movs	r3, r0
   1fe30:	2b01      	cmp	r3, #1
   1fe32:	d019      	beq.n	1fe68 <sd_mmc_test_unit_ready+0x50>
   1fe34:	2b02      	cmp	r3, #2
   1fe36:	d019      	beq.n	1fe6c <sd_mmc_test_unit_ready+0x54>
   1fe38:	2b00      	cmp	r3, #0
   1fe3a:	d11e      	bne.n	1fe7a <sd_mmc_test_unit_ready+0x62>
   1fe3c:	1dfb      	adds	r3, r7, #7
   1fe3e:	781b      	ldrb	r3, [r3, #0]
   1fe40:	4a11      	ldr	r2, [pc, #68]	; (1fe88 <sd_mmc_test_unit_ready+0x70>)
   1fe42:	5cd3      	ldrb	r3, [r2, r3]
   1fe44:	2b00      	cmp	r3, #0
   1fe46:	d001      	beq.n	1fe4c <sd_mmc_test_unit_ready+0x34>
   1fe48:	2302      	movs	r3, #2
   1fe4a:	e017      	b.n	1fe7c <sd_mmc_test_unit_ready+0x64>
   1fe4c:	1dfb      	adds	r3, r7, #7
   1fe4e:	781b      	ldrb	r3, [r3, #0]
   1fe50:	0018      	movs	r0, r3
   1fe52:	4b0e      	ldr	r3, [pc, #56]	; (1fe8c <sd_mmc_test_unit_ready+0x74>)
   1fe54:	4798      	blx	r3
   1fe56:	0003      	movs	r3, r0
   1fe58:	001a      	movs	r2, r3
   1fe5a:	2303      	movs	r3, #3
   1fe5c:	4013      	ands	r3, r2
   1fe5e:	d001      	beq.n	1fe64 <sd_mmc_test_unit_ready+0x4c>
   1fe60:	2300      	movs	r3, #0
   1fe62:	e00b      	b.n	1fe7c <sd_mmc_test_unit_ready+0x64>
   1fe64:	2302      	movs	r3, #2
   1fe66:	e009      	b.n	1fe7c <sd_mmc_test_unit_ready+0x64>
   1fe68:	2303      	movs	r3, #3
   1fe6a:	e007      	b.n	1fe7c <sd_mmc_test_unit_ready+0x64>
   1fe6c:	1dfb      	adds	r3, r7, #7
   1fe6e:	781b      	ldrb	r3, [r3, #0]
   1fe70:	4a05      	ldr	r2, [pc, #20]	; (1fe88 <sd_mmc_test_unit_ready+0x70>)
   1fe72:	2100      	movs	r1, #0
   1fe74:	54d1      	strb	r1, [r2, r3]
   1fe76:	2302      	movs	r3, #2
   1fe78:	e000      	b.n	1fe7c <sd_mmc_test_unit_ready+0x64>
   1fe7a:	2301      	movs	r3, #1
   1fe7c:	0018      	movs	r0, r3
   1fe7e:	46bd      	mov	sp, r7
   1fe80:	b002      	add	sp, #8
   1fe82:	bd80      	pop	{r7, pc}
   1fe84:	0001f98d 	.word	0x0001f98d
   1fe88:	20003e88 	.word	0x20003e88
   1fe8c:	0001fa01 	.word	0x0001fa01

0001fe90 <sd_mmc_test_unit_ready_0>:
   1fe90:	b580      	push	{r7, lr}
   1fe92:	af00      	add	r7, sp, #0
   1fe94:	2000      	movs	r0, #0
   1fe96:	4b03      	ldr	r3, [pc, #12]	; (1fea4 <sd_mmc_test_unit_ready_0+0x14>)
   1fe98:	4798      	blx	r3
   1fe9a:	0003      	movs	r3, r0
   1fe9c:	0018      	movs	r0, r3
   1fe9e:	46bd      	mov	sp, r7
   1fea0:	bd80      	pop	{r7, pc}
   1fea2:	46c0      	nop			; (mov r8, r8)
   1fea4:	0001fe19 	.word	0x0001fe19

0001fea8 <sd_mmc_read_capacity>:
   1fea8:	b580      	push	{r7, lr}
   1feaa:	b082      	sub	sp, #8
   1feac:	af00      	add	r7, sp, #0
   1feae:	0002      	movs	r2, r0
   1feb0:	6039      	str	r1, [r7, #0]
   1feb2:	1dfb      	adds	r3, r7, #7
   1feb4:	701a      	strb	r2, [r3, #0]
   1feb6:	1dfb      	adds	r3, r7, #7
   1feb8:	781b      	ldrb	r3, [r3, #0]
   1feba:	0018      	movs	r0, r3
   1febc:	4b08      	ldr	r3, [pc, #32]	; (1fee0 <sd_mmc_read_capacity+0x38>)
   1febe:	4798      	blx	r3
   1fec0:	0003      	movs	r3, r0
   1fec2:	005b      	lsls	r3, r3, #1
   1fec4:	1e5a      	subs	r2, r3, #1
   1fec6:	683b      	ldr	r3, [r7, #0]
   1fec8:	601a      	str	r2, [r3, #0]
   1feca:	1dfb      	adds	r3, r7, #7
   1fecc:	781b      	ldrb	r3, [r3, #0]
   1fece:	0018      	movs	r0, r3
   1fed0:	4b04      	ldr	r3, [pc, #16]	; (1fee4 <sd_mmc_read_capacity+0x3c>)
   1fed2:	4798      	blx	r3
   1fed4:	0003      	movs	r3, r0
   1fed6:	0018      	movs	r0, r3
   1fed8:	46bd      	mov	sp, r7
   1feda:	b002      	add	sp, #8
   1fedc:	bd80      	pop	{r7, pc}
   1fede:	46c0      	nop			; (mov r8, r8)
   1fee0:	0001fa3d 	.word	0x0001fa3d
   1fee4:	0001fe19 	.word	0x0001fe19

0001fee8 <sd_mmc_read_capacity_0>:
   1fee8:	b580      	push	{r7, lr}
   1feea:	b082      	sub	sp, #8
   1feec:	af00      	add	r7, sp, #0
   1feee:	6078      	str	r0, [r7, #4]
   1fef0:	687b      	ldr	r3, [r7, #4]
   1fef2:	0019      	movs	r1, r3
   1fef4:	2000      	movs	r0, #0
   1fef6:	4b03      	ldr	r3, [pc, #12]	; (1ff04 <sd_mmc_read_capacity_0+0x1c>)
   1fef8:	4798      	blx	r3
   1fefa:	0003      	movs	r3, r0
   1fefc:	0018      	movs	r0, r3
   1fefe:	46bd      	mov	sp, r7
   1ff00:	b002      	add	sp, #8
   1ff02:	bd80      	pop	{r7, pc}
   1ff04:	0001fea9 	.word	0x0001fea9

0001ff08 <sd_mmc_unload>:
   1ff08:	b580      	push	{r7, lr}
   1ff0a:	b082      	sub	sp, #8
   1ff0c:	af00      	add	r7, sp, #0
   1ff0e:	0002      	movs	r2, r0
   1ff10:	1dfb      	adds	r3, r7, #7
   1ff12:	701a      	strb	r2, [r3, #0]
   1ff14:	1dbb      	adds	r3, r7, #6
   1ff16:	1c0a      	adds	r2, r1, #0
   1ff18:	701a      	strb	r2, [r3, #0]
   1ff1a:	1dfb      	adds	r3, r7, #7
   1ff1c:	781b      	ldrb	r3, [r3, #0]
   1ff1e:	4a04      	ldr	r2, [pc, #16]	; (1ff30 <sd_mmc_unload+0x28>)
   1ff20:	1db9      	adds	r1, r7, #6
   1ff22:	7809      	ldrb	r1, [r1, #0]
   1ff24:	54d1      	strb	r1, [r2, r3]
   1ff26:	2301      	movs	r3, #1
   1ff28:	0018      	movs	r0, r3
   1ff2a:	46bd      	mov	sp, r7
   1ff2c:	b002      	add	sp, #8
   1ff2e:	bd80      	pop	{r7, pc}
   1ff30:	20003e88 	.word	0x20003e88

0001ff34 <sd_mmc_unload_0>:
   1ff34:	b580      	push	{r7, lr}
   1ff36:	b082      	sub	sp, #8
   1ff38:	af00      	add	r7, sp, #0
   1ff3a:	0002      	movs	r2, r0
   1ff3c:	1dfb      	adds	r3, r7, #7
   1ff3e:	701a      	strb	r2, [r3, #0]
   1ff40:	1dfb      	adds	r3, r7, #7
   1ff42:	781b      	ldrb	r3, [r3, #0]
   1ff44:	0019      	movs	r1, r3
   1ff46:	2000      	movs	r0, #0
   1ff48:	4b03      	ldr	r3, [pc, #12]	; (1ff58 <sd_mmc_unload_0+0x24>)
   1ff4a:	4798      	blx	r3
   1ff4c:	0003      	movs	r3, r0
   1ff4e:	0018      	movs	r0, r3
   1ff50:	46bd      	mov	sp, r7
   1ff52:	b002      	add	sp, #8
   1ff54:	bd80      	pop	{r7, pc}
   1ff56:	46c0      	nop			; (mov r8, r8)
   1ff58:	0001ff09 	.word	0x0001ff09

0001ff5c <sd_mmc_wr_protect>:
   1ff5c:	b580      	push	{r7, lr}
   1ff5e:	b082      	sub	sp, #8
   1ff60:	af00      	add	r7, sp, #0
   1ff62:	0002      	movs	r2, r0
   1ff64:	1dfb      	adds	r3, r7, #7
   1ff66:	701a      	strb	r2, [r3, #0]
   1ff68:	1dfb      	adds	r3, r7, #7
   1ff6a:	781b      	ldrb	r3, [r3, #0]
   1ff6c:	0018      	movs	r0, r3
   1ff6e:	4b03      	ldr	r3, [pc, #12]	; (1ff7c <sd_mmc_wr_protect+0x20>)
   1ff70:	4798      	blx	r3
   1ff72:	0003      	movs	r3, r0
   1ff74:	0018      	movs	r0, r3
   1ff76:	46bd      	mov	sp, r7
   1ff78:	b002      	add	sp, #8
   1ff7a:	bd80      	pop	{r7, pc}
   1ff7c:	0001fa79 	.word	0x0001fa79

0001ff80 <sd_mmc_wr_protect_0>:
   1ff80:	b580      	push	{r7, lr}
   1ff82:	af00      	add	r7, sp, #0
   1ff84:	2000      	movs	r0, #0
   1ff86:	4b03      	ldr	r3, [pc, #12]	; (1ff94 <sd_mmc_wr_protect_0+0x14>)
   1ff88:	4798      	blx	r3
   1ff8a:	0003      	movs	r3, r0
   1ff8c:	0018      	movs	r0, r3
   1ff8e:	46bd      	mov	sp, r7
   1ff90:	bd80      	pop	{r7, pc}
   1ff92:	46c0      	nop			; (mov r8, r8)
   1ff94:	0001ff5d 	.word	0x0001ff5d

0001ff98 <sd_mmc_removal>:
   1ff98:	b580      	push	{r7, lr}
   1ff9a:	b082      	sub	sp, #8
   1ff9c:	af00      	add	r7, sp, #0
   1ff9e:	0002      	movs	r2, r0
   1ffa0:	1dfb      	adds	r3, r7, #7
   1ffa2:	701a      	strb	r2, [r3, #0]
   1ffa4:	2301      	movs	r3, #1
   1ffa6:	0018      	movs	r0, r3
   1ffa8:	46bd      	mov	sp, r7
   1ffaa:	b002      	add	sp, #8
   1ffac:	bd80      	pop	{r7, pc}
	...

0001ffb0 <sd_mmc_removal_0>:
   1ffb0:	b580      	push	{r7, lr}
   1ffb2:	af00      	add	r7, sp, #0
   1ffb4:	2000      	movs	r0, #0
   1ffb6:	4b03      	ldr	r3, [pc, #12]	; (1ffc4 <sd_mmc_removal_0+0x14>)
   1ffb8:	4798      	blx	r3
   1ffba:	0003      	movs	r3, r0
   1ffbc:	0018      	movs	r0, r3
   1ffbe:	46bd      	mov	sp, r7
   1ffc0:	bd80      	pop	{r7, pc}
   1ffc2:	46c0      	nop			; (mov r8, r8)
   1ffc4:	0001ff99 	.word	0x0001ff99

0001ffc8 <sd_mmc_mem_2_ram>:
   1ffc8:	b580      	push	{r7, lr}
   1ffca:	b084      	sub	sp, #16
   1ffcc:	af00      	add	r7, sp, #0
   1ffce:	60b9      	str	r1, [r7, #8]
   1ffd0:	607a      	str	r2, [r7, #4]
   1ffd2:	230f      	movs	r3, #15
   1ffd4:	18fb      	adds	r3, r7, r3
   1ffd6:	1c02      	adds	r2, r0, #0
   1ffd8:	701a      	strb	r2, [r3, #0]
   1ffda:	68b9      	ldr	r1, [r7, #8]
   1ffdc:	230f      	movs	r3, #15
   1ffde:	18fb      	adds	r3, r7, r3
   1ffe0:	781b      	ldrb	r3, [r3, #0]
   1ffe2:	2201      	movs	r2, #1
   1ffe4:	0018      	movs	r0, r3
   1ffe6:	4b10      	ldr	r3, [pc, #64]	; (20028 <sd_mmc_mem_2_ram+0x60>)
   1ffe8:	4798      	blx	r3
   1ffea:	1e03      	subs	r3, r0, #0
   1ffec:	d005      	beq.n	1fffa <sd_mmc_mem_2_ram+0x32>
   1ffee:	2b02      	cmp	r3, #2
   1fff0:	d101      	bne.n	1fff6 <sd_mmc_mem_2_ram+0x2e>
   1fff2:	2302      	movs	r3, #2
   1fff4:	e013      	b.n	2001e <sd_mmc_mem_2_ram+0x56>
   1fff6:	2301      	movs	r3, #1
   1fff8:	e011      	b.n	2001e <sd_mmc_mem_2_ram+0x56>
   1fffa:	46c0      	nop			; (mov r8, r8)
   1fffc:	687b      	ldr	r3, [r7, #4]
   1fffe:	2101      	movs	r1, #1
   20000:	0018      	movs	r0, r3
   20002:	4b0a      	ldr	r3, [pc, #40]	; (2002c <sd_mmc_mem_2_ram+0x64>)
   20004:	4798      	blx	r3
   20006:	1e03      	subs	r3, r0, #0
   20008:	d001      	beq.n	2000e <sd_mmc_mem_2_ram+0x46>
   2000a:	2301      	movs	r3, #1
   2000c:	e007      	b.n	2001e <sd_mmc_mem_2_ram+0x56>
   2000e:	2000      	movs	r0, #0
   20010:	4b07      	ldr	r3, [pc, #28]	; (20030 <sd_mmc_mem_2_ram+0x68>)
   20012:	4798      	blx	r3
   20014:	1e03      	subs	r3, r0, #0
   20016:	d001      	beq.n	2001c <sd_mmc_mem_2_ram+0x54>
   20018:	2301      	movs	r3, #1
   2001a:	e000      	b.n	2001e <sd_mmc_mem_2_ram+0x56>
   2001c:	2300      	movs	r3, #0
   2001e:	0018      	movs	r0, r3
   20020:	46bd      	mov	sp, r7
   20022:	b004      	add	sp, #16
   20024:	bd80      	pop	{r7, pc}
   20026:	46c0      	nop			; (mov r8, r8)
   20028:	0001fa91 	.word	0x0001fa91
   2002c:	0001fb7d 	.word	0x0001fb7d
   20030:	0001fbd5 	.word	0x0001fbd5

00020034 <sd_mmc_mem_2_ram_0>:
   20034:	b580      	push	{r7, lr}
   20036:	b082      	sub	sp, #8
   20038:	af00      	add	r7, sp, #0
   2003a:	6078      	str	r0, [r7, #4]
   2003c:	6039      	str	r1, [r7, #0]
   2003e:	683a      	ldr	r2, [r7, #0]
   20040:	687b      	ldr	r3, [r7, #4]
   20042:	0019      	movs	r1, r3
   20044:	2000      	movs	r0, #0
   20046:	4b03      	ldr	r3, [pc, #12]	; (20054 <sd_mmc_mem_2_ram_0+0x20>)
   20048:	4798      	blx	r3
   2004a:	0003      	movs	r3, r0
   2004c:	0018      	movs	r0, r3
   2004e:	46bd      	mov	sp, r7
   20050:	b002      	add	sp, #8
   20052:	bd80      	pop	{r7, pc}
   20054:	0001ffc9 	.word	0x0001ffc9

00020058 <sd_mmc_ram_2_mem>:
   20058:	b580      	push	{r7, lr}
   2005a:	b084      	sub	sp, #16
   2005c:	af00      	add	r7, sp, #0
   2005e:	60b9      	str	r1, [r7, #8]
   20060:	607a      	str	r2, [r7, #4]
   20062:	230f      	movs	r3, #15
   20064:	18fb      	adds	r3, r7, r3
   20066:	1c02      	adds	r2, r0, #0
   20068:	701a      	strb	r2, [r3, #0]
   2006a:	68b9      	ldr	r1, [r7, #8]
   2006c:	230f      	movs	r3, #15
   2006e:	18fb      	adds	r3, r7, r3
   20070:	781b      	ldrb	r3, [r3, #0]
   20072:	2201      	movs	r2, #1
   20074:	0018      	movs	r0, r3
   20076:	4b10      	ldr	r3, [pc, #64]	; (200b8 <sd_mmc_ram_2_mem+0x60>)
   20078:	4798      	blx	r3
   2007a:	1e03      	subs	r3, r0, #0
   2007c:	d005      	beq.n	2008a <sd_mmc_ram_2_mem+0x32>
   2007e:	2b02      	cmp	r3, #2
   20080:	d101      	bne.n	20086 <sd_mmc_ram_2_mem+0x2e>
   20082:	2302      	movs	r3, #2
   20084:	e013      	b.n	200ae <sd_mmc_ram_2_mem+0x56>
   20086:	2301      	movs	r3, #1
   20088:	e011      	b.n	200ae <sd_mmc_ram_2_mem+0x56>
   2008a:	46c0      	nop			; (mov r8, r8)
   2008c:	687b      	ldr	r3, [r7, #4]
   2008e:	2101      	movs	r1, #1
   20090:	0018      	movs	r0, r3
   20092:	4b0a      	ldr	r3, [pc, #40]	; (200bc <sd_mmc_ram_2_mem+0x64>)
   20094:	4798      	blx	r3
   20096:	1e03      	subs	r3, r0, #0
   20098:	d001      	beq.n	2009e <sd_mmc_ram_2_mem+0x46>
   2009a:	2301      	movs	r3, #1
   2009c:	e007      	b.n	200ae <sd_mmc_ram_2_mem+0x56>
   2009e:	2000      	movs	r0, #0
   200a0:	4b07      	ldr	r3, [pc, #28]	; (200c0 <sd_mmc_ram_2_mem+0x68>)
   200a2:	4798      	blx	r3
   200a4:	1e03      	subs	r3, r0, #0
   200a6:	d001      	beq.n	200ac <sd_mmc_ram_2_mem+0x54>
   200a8:	2301      	movs	r3, #1
   200aa:	e000      	b.n	200ae <sd_mmc_ram_2_mem+0x56>
   200ac:	2300      	movs	r3, #0
   200ae:	0018      	movs	r0, r3
   200b0:	46bd      	mov	sp, r7
   200b2:	b004      	add	sp, #16
   200b4:	bd80      	pop	{r7, pc}
   200b6:	46c0      	nop			; (mov r8, r8)
   200b8:	0001fc6d 	.word	0x0001fc6d
   200bc:	0001fd55 	.word	0x0001fd55
   200c0:	0001fdad 	.word	0x0001fdad

000200c4 <sd_mmc_ram_2_mem_0>:
   200c4:	b580      	push	{r7, lr}
   200c6:	b082      	sub	sp, #8
   200c8:	af00      	add	r7, sp, #0
   200ca:	6078      	str	r0, [r7, #4]
   200cc:	6039      	str	r1, [r7, #0]
   200ce:	683a      	ldr	r2, [r7, #0]
   200d0:	687b      	ldr	r3, [r7, #4]
   200d2:	0019      	movs	r1, r3
   200d4:	2000      	movs	r0, #0
   200d6:	4b03      	ldr	r3, [pc, #12]	; (200e4 <sd_mmc_ram_2_mem_0+0x20>)
   200d8:	4798      	blx	r3
   200da:	0003      	movs	r3, r0
   200dc:	0018      	movs	r0, r3
   200de:	46bd      	mov	sp, r7
   200e0:	b002      	add	sp, #8
   200e2:	bd80      	pop	{r7, pc}
   200e4:	00020059 	.word	0x00020059

000200e8 <system_pinmux_get_group_from_gpio_pin>:
{
   200e8:	b580      	push	{r7, lr}
   200ea:	b084      	sub	sp, #16
   200ec:	af00      	add	r7, sp, #0
   200ee:	0002      	movs	r2, r0
   200f0:	1dfb      	adds	r3, r7, #7
   200f2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   200f4:	230f      	movs	r3, #15
   200f6:	18fb      	adds	r3, r7, r3
   200f8:	1dfa      	adds	r2, r7, #7
   200fa:	7812      	ldrb	r2, [r2, #0]
   200fc:	09d2      	lsrs	r2, r2, #7
   200fe:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   20100:	230e      	movs	r3, #14
   20102:	18fb      	adds	r3, r7, r3
   20104:	1dfa      	adds	r2, r7, #7
   20106:	7812      	ldrb	r2, [r2, #0]
   20108:	0952      	lsrs	r2, r2, #5
   2010a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   2010c:	4b0d      	ldr	r3, [pc, #52]	; (20144 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2010e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   20110:	230f      	movs	r3, #15
   20112:	18fb      	adds	r3, r7, r3
   20114:	781b      	ldrb	r3, [r3, #0]
   20116:	2b00      	cmp	r3, #0
   20118:	d10f      	bne.n	2013a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   2011a:	230f      	movs	r3, #15
   2011c:	18fb      	adds	r3, r7, r3
   2011e:	781b      	ldrb	r3, [r3, #0]
   20120:	009b      	lsls	r3, r3, #2
   20122:	2210      	movs	r2, #16
   20124:	4694      	mov	ip, r2
   20126:	44bc      	add	ip, r7
   20128:	4463      	add	r3, ip
   2012a:	3b08      	subs	r3, #8
   2012c:	681a      	ldr	r2, [r3, #0]
   2012e:	230e      	movs	r3, #14
   20130:	18fb      	adds	r3, r7, r3
   20132:	781b      	ldrb	r3, [r3, #0]
   20134:	01db      	lsls	r3, r3, #7
   20136:	18d3      	adds	r3, r2, r3
   20138:	e000      	b.n	2013c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2013a:	2300      	movs	r3, #0
}
   2013c:	0018      	movs	r0, r3
   2013e:	46bd      	mov	sp, r7
   20140:	b004      	add	sp, #16
   20142:	bd80      	pop	{r7, pc}
   20144:	41004400 	.word	0x41004400

00020148 <system_interrupt_enable>:
{
   20148:	b580      	push	{r7, lr}
   2014a:	b082      	sub	sp, #8
   2014c:	af00      	add	r7, sp, #0
   2014e:	0002      	movs	r2, r0
   20150:	1dfb      	adds	r3, r7, #7
   20152:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   20154:	4b06      	ldr	r3, [pc, #24]	; (20170 <system_interrupt_enable+0x28>)
   20156:	1dfa      	adds	r2, r7, #7
   20158:	7812      	ldrb	r2, [r2, #0]
   2015a:	0011      	movs	r1, r2
   2015c:	221f      	movs	r2, #31
   2015e:	400a      	ands	r2, r1
   20160:	2101      	movs	r1, #1
   20162:	4091      	lsls	r1, r2
   20164:	000a      	movs	r2, r1
   20166:	601a      	str	r2, [r3, #0]
}
   20168:	46c0      	nop			; (mov r8, r8)
   2016a:	46bd      	mov	sp, r7
   2016c:	b002      	add	sp, #8
   2016e:	bd80      	pop	{r7, pc}
   20170:	e000e100 	.word	0xe000e100

00020174 <port_get_group_from_gpio_pin>:
{
   20174:	b580      	push	{r7, lr}
   20176:	b082      	sub	sp, #8
   20178:	af00      	add	r7, sp, #0
   2017a:	0002      	movs	r2, r0
   2017c:	1dfb      	adds	r3, r7, #7
   2017e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   20180:	1dfb      	adds	r3, r7, #7
   20182:	781b      	ldrb	r3, [r3, #0]
   20184:	0018      	movs	r0, r3
   20186:	4b03      	ldr	r3, [pc, #12]	; (20194 <port_get_group_from_gpio_pin+0x20>)
   20188:	4798      	blx	r3
   2018a:	0003      	movs	r3, r0
}
   2018c:	0018      	movs	r0, r3
   2018e:	46bd      	mov	sp, r7
   20190:	b002      	add	sp, #8
   20192:	bd80      	pop	{r7, pc}
   20194:	000200e9 	.word	0x000200e9

00020198 <port_get_config_defaults>:
{
   20198:	b580      	push	{r7, lr}
   2019a:	b082      	sub	sp, #8
   2019c:	af00      	add	r7, sp, #0
   2019e:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   201a0:	687b      	ldr	r3, [r7, #4]
   201a2:	2200      	movs	r2, #0
   201a4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   201a6:	687b      	ldr	r3, [r7, #4]
   201a8:	2201      	movs	r2, #1
   201aa:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   201ac:	687b      	ldr	r3, [r7, #4]
   201ae:	2200      	movs	r2, #0
   201b0:	709a      	strb	r2, [r3, #2]
}
   201b2:	46c0      	nop			; (mov r8, r8)
   201b4:	46bd      	mov	sp, r7
   201b6:	b002      	add	sp, #8
   201b8:	bd80      	pop	{r7, pc}
	...

000201bc <port_pin_set_output_level>:
{
   201bc:	b580      	push	{r7, lr}
   201be:	b084      	sub	sp, #16
   201c0:	af00      	add	r7, sp, #0
   201c2:	0002      	movs	r2, r0
   201c4:	1dfb      	adds	r3, r7, #7
   201c6:	701a      	strb	r2, [r3, #0]
   201c8:	1dbb      	adds	r3, r7, #6
   201ca:	1c0a      	adds	r2, r1, #0
   201cc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   201ce:	1dfb      	adds	r3, r7, #7
   201d0:	781b      	ldrb	r3, [r3, #0]
   201d2:	0018      	movs	r0, r3
   201d4:	4b0d      	ldr	r3, [pc, #52]	; (2020c <port_pin_set_output_level+0x50>)
   201d6:	4798      	blx	r3
   201d8:	0003      	movs	r3, r0
   201da:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   201dc:	1dfb      	adds	r3, r7, #7
   201de:	781b      	ldrb	r3, [r3, #0]
   201e0:	221f      	movs	r2, #31
   201e2:	4013      	ands	r3, r2
   201e4:	2201      	movs	r2, #1
   201e6:	409a      	lsls	r2, r3
   201e8:	0013      	movs	r3, r2
   201ea:	60bb      	str	r3, [r7, #8]
	if (level) {
   201ec:	1dbb      	adds	r3, r7, #6
   201ee:	781b      	ldrb	r3, [r3, #0]
   201f0:	2b00      	cmp	r3, #0
   201f2:	d003      	beq.n	201fc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   201f4:	68fb      	ldr	r3, [r7, #12]
   201f6:	68ba      	ldr	r2, [r7, #8]
   201f8:	619a      	str	r2, [r3, #24]
}
   201fa:	e002      	b.n	20202 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   201fc:	68fb      	ldr	r3, [r7, #12]
   201fe:	68ba      	ldr	r2, [r7, #8]
   20200:	615a      	str	r2, [r3, #20]
}
   20202:	46c0      	nop			; (mov r8, r8)
   20204:	46bd      	mov	sp, r7
   20206:	b004      	add	sp, #16
   20208:	bd80      	pop	{r7, pc}
   2020a:	46c0      	nop			; (mov r8, r8)
   2020c:	00020175 	.word	0x00020175

00020210 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
   20210:	b580      	push	{r7, lr}
   20212:	b084      	sub	sp, #16
   20214:	af00      	add	r7, sp, #0
   20216:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20218:	687b      	ldr	r3, [r7, #4]
   2021a:	681b      	ldr	r3, [r3, #0]
   2021c:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
   2021e:	68fb      	ldr	r3, [r7, #12]
   20220:	69db      	ldr	r3, [r3, #28]
   20222:	1e5a      	subs	r2, r3, #1
   20224:	4193      	sbcs	r3, r2
   20226:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
   20228:	0018      	movs	r0, r3
   2022a:	46bd      	mov	sp, r7
   2022c:	b004      	add	sp, #16
   2022e:	bd80      	pop	{r7, pc}

00020230 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
   20230:	b580      	push	{r7, lr}
   20232:	b082      	sub	sp, #8
   20234:	af00      	add	r7, sp, #0
   20236:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
   20238:	687b      	ldr	r3, [r7, #4]
   2023a:	2201      	movs	r2, #1
   2023c:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   2023e:	687b      	ldr	r3, [r7, #4]
   20240:	2200      	movs	r2, #0
   20242:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   20244:	687b      	ldr	r3, [r7, #4]
   20246:	2200      	movs	r2, #0
   20248:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   2024a:	687b      	ldr	r3, [r7, #4]
   2024c:	22c0      	movs	r2, #192	; 0xc0
   2024e:	0392      	lsls	r2, r2, #14
   20250:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   20252:	687b      	ldr	r3, [r7, #4]
   20254:	2200      	movs	r2, #0
   20256:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   20258:	687b      	ldr	r3, [r7, #4]
   2025a:	2200      	movs	r2, #0
   2025c:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   2025e:	687b      	ldr	r3, [r7, #4]
   20260:	2201      	movs	r2, #1
   20262:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
   20264:	687b      	ldr	r3, [r7, #4]
   20266:	2201      	movs	r2, #1
   20268:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
   2026a:	687b      	ldr	r3, [r7, #4]
   2026c:	2200      	movs	r2, #0
   2026e:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
   20270:	687b      	ldr	r3, [r7, #4]
   20272:	2224      	movs	r2, #36	; 0x24
   20274:	2100      	movs	r1, #0
   20276:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   20278:	687b      	ldr	r3, [r7, #4]
   2027a:	3318      	adds	r3, #24
   2027c:	220c      	movs	r2, #12
   2027e:	2100      	movs	r1, #0
   20280:	0018      	movs	r0, r3
   20282:	4b0a      	ldr	r3, [pc, #40]	; (202ac <spi_get_config_defaults+0x7c>)
   20284:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
   20286:	687b      	ldr	r3, [r7, #4]
   20288:	4a09      	ldr	r2, [pc, #36]	; (202b0 <spi_get_config_defaults+0x80>)
   2028a:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
   2028c:	687b      	ldr	r3, [r7, #4]
   2028e:	2200      	movs	r2, #0
   20290:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   20292:	687b      	ldr	r3, [r7, #4]
   20294:	2200      	movs	r2, #0
   20296:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   20298:	687b      	ldr	r3, [r7, #4]
   2029a:	2200      	movs	r2, #0
   2029c:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   2029e:	687b      	ldr	r3, [r7, #4]
   202a0:	2200      	movs	r2, #0
   202a2:	635a      	str	r2, [r3, #52]	; 0x34

};
   202a4:	46c0      	nop			; (mov r8, r8)
   202a6:	46bd      	mov	sp, r7
   202a8:	b002      	add	sp, #8
   202aa:	bd80      	pop	{r7, pc}
   202ac:	00035707 	.word	0x00035707
   202b0:	000186a0 	.word	0x000186a0

000202b4 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
   202b4:	b580      	push	{r7, lr}
   202b6:	b082      	sub	sp, #8
   202b8:	af00      	add	r7, sp, #0
   202ba:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
   202bc:	687b      	ldr	r3, [r7, #4]
   202be:	220a      	movs	r2, #10
   202c0:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   202c2:	687b      	ldr	r3, [r7, #4]
   202c4:	2200      	movs	r2, #0
   202c6:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   202c8:	687b      	ldr	r3, [r7, #4]
   202ca:	2200      	movs	r2, #0
   202cc:	709a      	strb	r2, [r3, #2]
}
   202ce:	46c0      	nop			; (mov r8, r8)
   202d0:	46bd      	mov	sp, r7
   202d2:	b002      	add	sp, #8
   202d4:	bd80      	pop	{r7, pc}
	...

000202d8 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
   202d8:	b580      	push	{r7, lr}
   202da:	b084      	sub	sp, #16
   202dc:	af00      	add	r7, sp, #0
   202de:	6078      	str	r0, [r7, #4]
   202e0:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
   202e2:	683b      	ldr	r3, [r7, #0]
   202e4:	781a      	ldrb	r2, [r3, #0]
   202e6:	687b      	ldr	r3, [r7, #4]
   202e8:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   202ea:	683b      	ldr	r3, [r7, #0]
   202ec:	785a      	ldrb	r2, [r3, #1]
   202ee:	687b      	ldr	r3, [r7, #4]
   202f0:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   202f2:	683b      	ldr	r3, [r7, #0]
   202f4:	789a      	ldrb	r2, [r3, #2]
   202f6:	687b      	ldr	r3, [r7, #4]
   202f8:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   202fa:	230c      	movs	r3, #12
   202fc:	18fb      	adds	r3, r7, r3
   202fe:	0018      	movs	r0, r3
   20300:	4b0b      	ldr	r3, [pc, #44]	; (20330 <spi_attach_slave+0x58>)
   20302:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   20304:	230c      	movs	r3, #12
   20306:	18fb      	adds	r3, r7, r3
   20308:	2201      	movs	r2, #1
   2030a:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
   2030c:	687b      	ldr	r3, [r7, #4]
   2030e:	781b      	ldrb	r3, [r3, #0]
   20310:	220c      	movs	r2, #12
   20312:	18ba      	adds	r2, r7, r2
   20314:	0011      	movs	r1, r2
   20316:	0018      	movs	r0, r3
   20318:	4b06      	ldr	r3, [pc, #24]	; (20334 <spi_attach_slave+0x5c>)
   2031a:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   2031c:	687b      	ldr	r3, [r7, #4]
   2031e:	781b      	ldrb	r3, [r3, #0]
   20320:	2101      	movs	r1, #1
   20322:	0018      	movs	r0, r3
   20324:	4b04      	ldr	r3, [pc, #16]	; (20338 <spi_attach_slave+0x60>)
   20326:	4798      	blx	r3
}
   20328:	46c0      	nop			; (mov r8, r8)
   2032a:	46bd      	mov	sp, r7
   2032c:	b004      	add	sp, #16
   2032e:	bd80      	pop	{r7, pc}
   20330:	00020199 	.word	0x00020199
   20334:	000276e1 	.word	0x000276e1
   20338:	000201bd 	.word	0x000201bd

0002033c <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
   2033c:	b580      	push	{r7, lr}
   2033e:	b084      	sub	sp, #16
   20340:	af00      	add	r7, sp, #0
   20342:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20344:	687b      	ldr	r3, [r7, #4]
   20346:	681b      	ldr	r3, [r3, #0]
   20348:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   2034a:	687b      	ldr	r3, [r7, #4]
   2034c:	681b      	ldr	r3, [r3, #0]
   2034e:	0018      	movs	r0, r3
   20350:	4b0b      	ldr	r3, [pc, #44]	; (20380 <spi_enable+0x44>)
   20352:	4798      	blx	r3
   20354:	0003      	movs	r3, r0
   20356:	0018      	movs	r0, r3
   20358:	4b0a      	ldr	r3, [pc, #40]	; (20384 <spi_enable+0x48>)
   2035a:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   2035c:	46c0      	nop			; (mov r8, r8)
   2035e:	687b      	ldr	r3, [r7, #4]
   20360:	0018      	movs	r0, r3
   20362:	4b09      	ldr	r3, [pc, #36]	; (20388 <spi_enable+0x4c>)
   20364:	4798      	blx	r3
   20366:	1e03      	subs	r3, r0, #0
   20368:	d1f9      	bne.n	2035e <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   2036a:	68fb      	ldr	r3, [r7, #12]
   2036c:	681b      	ldr	r3, [r3, #0]
   2036e:	2202      	movs	r2, #2
   20370:	431a      	orrs	r2, r3
   20372:	68fb      	ldr	r3, [r7, #12]
   20374:	601a      	str	r2, [r3, #0]
}
   20376:	46c0      	nop			; (mov r8, r8)
   20378:	46bd      	mov	sp, r7
   2037a:	b004      	add	sp, #16
   2037c:	bd80      	pop	{r7, pc}
   2037e:	46c0      	nop			; (mov r8, r8)
   20380:	000283b1 	.word	0x000283b1
   20384:	00020149 	.word	0x00020149
   20388:	00020211 	.word	0x00020211

0002038c <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
   2038c:	b580      	push	{r7, lr}
   2038e:	b084      	sub	sp, #16
   20390:	af00      	add	r7, sp, #0
   20392:	6078      	str	r0, [r7, #4]
   20394:	000a      	movs	r2, r1
   20396:	1cfb      	adds	r3, r7, #3
   20398:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
   2039a:	230f      	movs	r3, #15
   2039c:	18fb      	adds	r3, r7, r3
   2039e:	2200      	movs	r2, #0
   203a0:	701a      	strb	r2, [r3, #0]
	while (size--) {
   203a2:	e038      	b.n	20416 <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
   203a4:	687b      	ldr	r3, [r7, #4]
   203a6:	1c5a      	adds	r2, r3, #1
   203a8:	607a      	str	r2, [r7, #4]
   203aa:	220e      	movs	r2, #14
   203ac:	18ba      	adds	r2, r7, r2
   203ae:	781b      	ldrb	r3, [r3, #0]
   203b0:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   203b2:	230d      	movs	r3, #13
   203b4:	18fb      	adds	r3, r7, r3
   203b6:	2200      	movs	r2, #0
   203b8:	701a      	strb	r2, [r3, #0]
   203ba:	e027      	b.n	2040c <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
   203bc:	230f      	movs	r3, #15
   203be:	18fa      	adds	r2, r7, r3
   203c0:	230f      	movs	r3, #15
   203c2:	18fb      	adds	r3, r7, r3
   203c4:	781b      	ldrb	r3, [r3, #0]
   203c6:	18db      	adds	r3, r3, r3
   203c8:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
   203ca:	230e      	movs	r3, #14
   203cc:	18fa      	adds	r2, r7, r3
   203ce:	230f      	movs	r3, #15
   203d0:	18fb      	adds	r3, r7, r3
   203d2:	7812      	ldrb	r2, [r2, #0]
   203d4:	781b      	ldrb	r3, [r3, #0]
   203d6:	4053      	eors	r3, r2
   203d8:	b2db      	uxtb	r3, r3
   203da:	b25b      	sxtb	r3, r3
   203dc:	2b00      	cmp	r3, #0
   203de:	da07      	bge.n	203f0 <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
   203e0:	230f      	movs	r3, #15
   203e2:	18fb      	adds	r3, r7, r3
   203e4:	220f      	movs	r2, #15
   203e6:	18ba      	adds	r2, r7, r2
   203e8:	7812      	ldrb	r2, [r2, #0]
   203ea:	2109      	movs	r1, #9
   203ec:	404a      	eors	r2, r1
   203ee:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
   203f0:	230e      	movs	r3, #14
   203f2:	18fa      	adds	r2, r7, r3
   203f4:	230e      	movs	r3, #14
   203f6:	18fb      	adds	r3, r7, r3
   203f8:	781b      	ldrb	r3, [r3, #0]
   203fa:	18db      	adds	r3, r3, r3
   203fc:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   203fe:	230d      	movs	r3, #13
   20400:	18fb      	adds	r3, r7, r3
   20402:	781a      	ldrb	r2, [r3, #0]
   20404:	230d      	movs	r3, #13
   20406:	18fb      	adds	r3, r7, r3
   20408:	3201      	adds	r2, #1
   2040a:	701a      	strb	r2, [r3, #0]
   2040c:	230d      	movs	r3, #13
   2040e:	18fb      	adds	r3, r7, r3
   20410:	781b      	ldrb	r3, [r3, #0]
   20412:	2b07      	cmp	r3, #7
   20414:	d9d2      	bls.n	203bc <sd_mmc_spi_crc7+0x30>
	while (size--) {
   20416:	1cfb      	adds	r3, r7, #3
   20418:	781b      	ldrb	r3, [r3, #0]
   2041a:	1cfa      	adds	r2, r7, #3
   2041c:	1e59      	subs	r1, r3, #1
   2041e:	7011      	strb	r1, [r2, #0]
   20420:	2b00      	cmp	r3, #0
   20422:	d1bf      	bne.n	203a4 <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
   20424:	230f      	movs	r3, #15
   20426:	18fb      	adds	r3, r7, r3
   20428:	781b      	ldrb	r3, [r3, #0]
   2042a:	005b      	lsls	r3, r3, #1
   2042c:	b25b      	sxtb	r3, r3
   2042e:	2201      	movs	r2, #1
   20430:	4313      	orrs	r3, r2
   20432:	b25a      	sxtb	r2, r3
   20434:	230f      	movs	r3, #15
   20436:	18fb      	adds	r3, r7, r3
   20438:	701a      	strb	r2, [r3, #0]
	return crc;
   2043a:	230f      	movs	r3, #15
   2043c:	18fb      	adds	r3, r7, r3
   2043e:	781b      	ldrb	r3, [r3, #0]
}
   20440:	0018      	movs	r0, r3
   20442:	46bd      	mov	sp, r7
   20444:	b004      	add	sp, #16
   20446:	bd80      	pop	{r7, pc}

00020448 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
   20448:	b590      	push	{r4, r7, lr}
   2044a:	b083      	sub	sp, #12
   2044c:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
   2044e:	1c7b      	adds	r3, r7, #1
   20450:	22ff      	movs	r2, #255	; 0xff
   20452:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
   20454:	1cbb      	adds	r3, r7, #2
   20456:	22ff      	movs	r2, #255	; 0xff
   20458:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   2045a:	1cbb      	adds	r3, r7, #2
   2045c:	881b      	ldrh	r3, [r3, #0]
   2045e:	1c79      	adds	r1, r7, #1
   20460:	4811      	ldr	r0, [pc, #68]	; (204a8 <sd_mmc_spi_wait_busy+0x60>)
   20462:	2201      	movs	r2, #1
   20464:	4c11      	ldr	r4, [pc, #68]	; (204ac <sd_mmc_spi_wait_busy+0x64>)
   20466:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
   20468:	4b11      	ldr	r3, [pc, #68]	; (204b0 <sd_mmc_spi_wait_busy+0x68>)
   2046a:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   2046c:	1cbb      	adds	r3, r7, #2
   2046e:	881b      	ldrh	r3, [r3, #0]
   20470:	1c79      	adds	r1, r7, #1
   20472:	480d      	ldr	r0, [pc, #52]	; (204a8 <sd_mmc_spi_wait_busy+0x60>)
   20474:	2201      	movs	r2, #1
   20476:	4c0d      	ldr	r4, [pc, #52]	; (204ac <sd_mmc_spi_wait_busy+0x64>)
   20478:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   2047a:	1cbb      	adds	r3, r7, #2
   2047c:	881b      	ldrh	r3, [r3, #0]
   2047e:	1c79      	adds	r1, r7, #1
   20480:	4809      	ldr	r0, [pc, #36]	; (204a8 <sd_mmc_spi_wait_busy+0x60>)
   20482:	2201      	movs	r2, #1
   20484:	4c09      	ldr	r4, [pc, #36]	; (204ac <sd_mmc_spi_wait_busy+0x64>)
   20486:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
   20488:	687b      	ldr	r3, [r7, #4]
   2048a:	1e5a      	subs	r2, r3, #1
   2048c:	607a      	str	r2, [r7, #4]
   2048e:	2b00      	cmp	r3, #0
   20490:	d101      	bne.n	20496 <sd_mmc_spi_wait_busy+0x4e>
			return false;
   20492:	2300      	movs	r3, #0
   20494:	e004      	b.n	204a0 <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
   20496:	1c7b      	adds	r3, r7, #1
   20498:	781b      	ldrb	r3, [r3, #0]
   2049a:	2bff      	cmp	r3, #255	; 0xff
   2049c:	d1ed      	bne.n	2047a <sd_mmc_spi_wait_busy+0x32>
	return true;
   2049e:	2301      	movs	r3, #1
}
   204a0:	0018      	movs	r0, r3
   204a2:	46bd      	mov	sp, r7
   204a4:	b003      	add	sp, #12
   204a6:	bd90      	pop	{r4, r7, pc}
   204a8:	20003e8c 	.word	0x20003e8c
   204ac:	00028cf1 	.word	0x00028cf1
   204b0:	00030d40 	.word	0x00030d40

000204b4 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
   204b4:	b590      	push	{r4, r7, lr}
   204b6:	b083      	sub	sp, #12
   204b8:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
   204ba:	1cbb      	adds	r3, r7, #2
   204bc:	22ff      	movs	r2, #255	; 0xff
   204be:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
   204c0:	1c7b      	adds	r3, r7, #1
   204c2:	2200      	movs	r2, #0
   204c4:	701a      	strb	r2, [r3, #0]
	i = 500000;
   204c6:	4b18      	ldr	r3, [pc, #96]	; (20528 <sd_mmc_spi_start_read_block+0x74>)
   204c8:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
   204ca:	687b      	ldr	r3, [r7, #4]
   204cc:	1e5a      	subs	r2, r3, #1
   204ce:	607a      	str	r2, [r7, #4]
   204d0:	2b00      	cmp	r3, #0
   204d2:	d104      	bne.n	204de <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
   204d4:	4b15      	ldr	r3, [pc, #84]	; (2052c <sd_mmc_spi_start_read_block+0x78>)
   204d6:	2204      	movs	r2, #4
   204d8:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
   204da:	2300      	movs	r3, #0
   204dc:	e020      	b.n	20520 <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
   204de:	1cbb      	adds	r3, r7, #2
   204e0:	881b      	ldrh	r3, [r3, #0]
   204e2:	1c79      	adds	r1, r7, #1
   204e4:	4812      	ldr	r0, [pc, #72]	; (20530 <sd_mmc_spi_start_read_block+0x7c>)
   204e6:	2201      	movs	r2, #1
   204e8:	4c12      	ldr	r4, [pc, #72]	; (20534 <sd_mmc_spi_start_read_block+0x80>)
   204ea:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
   204ec:	1c7b      	adds	r3, r7, #1
   204ee:	781b      	ldrb	r3, [r3, #0]
   204f0:	001a      	movs	r2, r3
   204f2:	23f0      	movs	r3, #240	; 0xf0
   204f4:	4013      	ands	r3, r2
   204f6:	d10e      	bne.n	20516 <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
   204f8:	1c7b      	adds	r3, r7, #1
   204fa:	781b      	ldrb	r3, [r3, #0]
   204fc:	001a      	movs	r2, r3
   204fe:	2307      	movs	r3, #7
   20500:	4013      	ands	r3, r2
   20502:	d003      	beq.n	2050c <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
   20504:	4b09      	ldr	r3, [pc, #36]	; (2052c <sd_mmc_spi_start_read_block+0x78>)
   20506:	2207      	movs	r2, #7
   20508:	701a      	strb	r2, [r3, #0]
   2050a:	e002      	b.n	20512 <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
   2050c:	4b07      	ldr	r3, [pc, #28]	; (2052c <sd_mmc_spi_start_read_block+0x78>)
   2050e:	220b      	movs	r2, #11
   20510:	701a      	strb	r2, [r3, #0]
			}
			return false;
   20512:	2300      	movs	r3, #0
   20514:	e004      	b.n	20520 <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
   20516:	1c7b      	adds	r3, r7, #1
   20518:	781b      	ldrb	r3, [r3, #0]
   2051a:	2bfe      	cmp	r3, #254	; 0xfe
   2051c:	d1d5      	bne.n	204ca <sd_mmc_spi_start_read_block+0x16>

	return true;
   2051e:	2301      	movs	r3, #1
}
   20520:	0018      	movs	r0, r3
   20522:	46bd      	mov	sp, r7
   20524:	b003      	add	sp, #12
   20526:	bd90      	pop	{r4, r7, pc}
   20528:	0007a120 	.word	0x0007a120
   2052c:	20003ecf 	.word	0x20003ecf
   20530:	20003e8c 	.word	0x20003e8c
   20534:	00028cf1 	.word	0x00028cf1

00020538 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
   20538:	b590      	push	{r4, r7, lr}
   2053a:	b083      	sub	sp, #12
   2053c:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
   2053e:	1dbb      	adds	r3, r7, #6
   20540:	22ff      	movs	r2, #255	; 0xff
   20542:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
   20544:	1dbb      	adds	r3, r7, #6
   20546:	881b      	ldrh	r3, [r3, #0]
   20548:	1d39      	adds	r1, r7, #4
   2054a:	4804      	ldr	r0, [pc, #16]	; (2055c <sd_mmc_spi_stop_read_block+0x24>)
   2054c:	2202      	movs	r2, #2
   2054e:	4c04      	ldr	r4, [pc, #16]	; (20560 <sd_mmc_spi_stop_read_block+0x28>)
   20550:	47a0      	blx	r4
			dummy);
}
   20552:	46c0      	nop			; (mov r8, r8)
   20554:	46bd      	mov	sp, r7
   20556:	b003      	add	sp, #12
   20558:	bd90      	pop	{r4, r7, pc}
   2055a:	46c0      	nop			; (mov r8, r8)
   2055c:	20003e8c 	.word	0x20003e8c
   20560:	00028cf1 	.word	0x00028cf1

00020564 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
   20564:	b580      	push	{r7, lr}
   20566:	b082      	sub	sp, #8
   20568:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
   2056a:	1dfb      	adds	r3, r7, #7
   2056c:	22ff      	movs	r2, #255	; 0xff
   2056e:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
   20570:	1df9      	adds	r1, r7, #7
   20572:	4b0d      	ldr	r3, [pc, #52]	; (205a8 <sd_mmc_spi_start_write_block+0x44>)
   20574:	2201      	movs	r2, #1
   20576:	0018      	movs	r0, r3
   20578:	4b0c      	ldr	r3, [pc, #48]	; (205ac <sd_mmc_spi_start_write_block+0x48>)
   2057a:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
   2057c:	4b0c      	ldr	r3, [pc, #48]	; (205b0 <sd_mmc_spi_start_write_block+0x4c>)
   2057e:	881b      	ldrh	r3, [r3, #0]
   20580:	2b01      	cmp	r3, #1
   20582:	d103      	bne.n	2058c <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
   20584:	1dbb      	adds	r3, r7, #6
   20586:	22fe      	movs	r2, #254	; 0xfe
   20588:	701a      	strb	r2, [r3, #0]
   2058a:	e002      	b.n	20592 <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
   2058c:	1dbb      	adds	r3, r7, #6
   2058e:	22fc      	movs	r2, #252	; 0xfc
   20590:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
   20592:	1db9      	adds	r1, r7, #6
   20594:	4b04      	ldr	r3, [pc, #16]	; (205a8 <sd_mmc_spi_start_write_block+0x44>)
   20596:	2201      	movs	r2, #1
   20598:	0018      	movs	r0, r3
   2059a:	4b04      	ldr	r3, [pc, #16]	; (205ac <sd_mmc_spi_start_write_block+0x48>)
   2059c:	4798      	blx	r3
}
   2059e:	46c0      	nop			; (mov r8, r8)
   205a0:	46bd      	mov	sp, r7
   205a2:	b002      	add	sp, #8
   205a4:	bd80      	pop	{r7, pc}
   205a6:	46c0      	nop			; (mov r8, r8)
   205a8:	20003e8c 	.word	0x20003e8c
   205ac:	00028f15 	.word	0x00028f15
   205b0:	20003eda 	.word	0x20003eda

000205b4 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
   205b4:	b590      	push	{r4, r7, lr}
   205b6:	b083      	sub	sp, #12
   205b8:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
   205ba:	1dbb      	adds	r3, r7, #6
   205bc:	22ff      	movs	r2, #255	; 0xff
   205be:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
   205c0:	1cbb      	adds	r3, r7, #2
   205c2:	2201      	movs	r2, #1
   205c4:	4252      	negs	r2, r2
   205c6:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
   205c8:	1cb9      	adds	r1, r7, #2
   205ca:	4b1b      	ldr	r3, [pc, #108]	; (20638 <sd_mmc_spi_stop_write_block+0x84>)
   205cc:	2202      	movs	r2, #2
   205ce:	0018      	movs	r0, r3
   205d0:	4b1a      	ldr	r3, [pc, #104]	; (2063c <sd_mmc_spi_stop_write_block+0x88>)
   205d2:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
   205d4:	1dbb      	adds	r3, r7, #6
   205d6:	881b      	ldrh	r3, [r3, #0]
   205d8:	1d79      	adds	r1, r7, #5
   205da:	4817      	ldr	r0, [pc, #92]	; (20638 <sd_mmc_spi_stop_write_block+0x84>)
   205dc:	2201      	movs	r2, #1
   205de:	4c18      	ldr	r4, [pc, #96]	; (20640 <sd_mmc_spi_stop_write_block+0x8c>)
   205e0:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
   205e2:	1d7b      	adds	r3, r7, #5
   205e4:	781b      	ldrb	r3, [r3, #0]
   205e6:	001a      	movs	r2, r3
   205e8:	2310      	movs	r3, #16
   205ea:	4013      	ands	r3, r2
   205ec:	d105      	bne.n	205fa <sd_mmc_spi_stop_write_block+0x46>
   205ee:	1d7b      	adds	r3, r7, #5
   205f0:	781b      	ldrb	r3, [r3, #0]
   205f2:	001a      	movs	r2, r3
   205f4:	2301      	movs	r3, #1
   205f6:	4013      	ands	r3, r2
   205f8:	d104      	bne.n	20604 <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   205fa:	4b12      	ldr	r3, [pc, #72]	; (20644 <sd_mmc_spi_stop_write_block+0x90>)
   205fc:	2201      	movs	r2, #1
   205fe:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
   20600:	2300      	movs	r3, #0
   20602:	e014      	b.n	2062e <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
   20604:	1d7b      	adds	r3, r7, #5
   20606:	781b      	ldrb	r3, [r3, #0]
   20608:	001a      	movs	r2, r3
   2060a:	231e      	movs	r3, #30
   2060c:	4013      	ands	r3, r2
   2060e:	2b04      	cmp	r3, #4
   20610:	d00b      	beq.n	2062a <sd_mmc_spi_stop_write_block+0x76>
   20612:	2b0a      	cmp	r3, #10
   20614:	d104      	bne.n	20620 <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
   20616:	4b0b      	ldr	r3, [pc, #44]	; (20644 <sd_mmc_spi_stop_write_block+0x90>)
   20618:	2208      	movs	r2, #8
   2061a:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
   2061c:	2300      	movs	r3, #0
   2061e:	e006      	b.n	2062e <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
   20620:	4b08      	ldr	r3, [pc, #32]	; (20644 <sd_mmc_spi_stop_write_block+0x90>)
   20622:	220a      	movs	r2, #10
   20624:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
   20626:	2300      	movs	r3, #0
   20628:	e001      	b.n	2062e <sd_mmc_spi_stop_write_block+0x7a>
		break;
   2062a:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   2062c:	2301      	movs	r3, #1
}
   2062e:	0018      	movs	r0, r3
   20630:	46bd      	mov	sp, r7
   20632:	b003      	add	sp, #12
   20634:	bd90      	pop	{r4, r7, pc}
   20636:	46c0      	nop			; (mov r8, r8)
   20638:	20003e8c 	.word	0x20003e8c
   2063c:	00028f15 	.word	0x00028f15
   20640:	00028cf1 	.word	0x00028cf1
   20644:	20003ecf 	.word	0x20003ecf

00020648 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
   20648:	b590      	push	{r4, r7, lr}
   2064a:	b083      	sub	sp, #12
   2064c:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
   2064e:	4b1d      	ldr	r3, [pc, #116]	; (206c4 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   20650:	881b      	ldrh	r3, [r3, #0]
   20652:	2b01      	cmp	r3, #1
   20654:	d101      	bne.n	2065a <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
   20656:	2301      	movs	r3, #1
   20658:	e030      	b.n	206bc <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
   2065a:	4b1a      	ldr	r3, [pc, #104]	; (206c4 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   2065c:	881b      	ldrh	r3, [r3, #0]
   2065e:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
   20660:	4b19      	ldr	r3, [pc, #100]	; (206c8 <sd_mmc_spi_stop_multiwrite_block+0x80>)
   20662:	681a      	ldr	r2, [r3, #0]
   20664:	4b19      	ldr	r3, [pc, #100]	; (206cc <sd_mmc_spi_stop_multiwrite_block+0x84>)
   20666:	881b      	ldrh	r3, [r3, #0]
   20668:	0019      	movs	r1, r3
   2066a:	4b19      	ldr	r3, [pc, #100]	; (206d0 <sd_mmc_spi_stop_multiwrite_block+0x88>)
   2066c:	0010      	movs	r0, r2
   2066e:	4798      	blx	r3
   20670:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
   20672:	429c      	cmp	r4, r3
   20674:	d901      	bls.n	2067a <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
   20676:	2301      	movs	r3, #1
   20678:	e020      	b.n	206bc <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
   2067a:	1dfb      	adds	r3, r7, #7
   2067c:	22ff      	movs	r2, #255	; 0xff
   2067e:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   20680:	1df9      	adds	r1, r7, #7
   20682:	4b14      	ldr	r3, [pc, #80]	; (206d4 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   20684:	2201      	movs	r2, #1
   20686:	0018      	movs	r0, r3
   20688:	4b13      	ldr	r3, [pc, #76]	; (206d8 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   2068a:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
   2068c:	1dfb      	adds	r3, r7, #7
   2068e:	22fd      	movs	r2, #253	; 0xfd
   20690:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   20692:	1df9      	adds	r1, r7, #7
   20694:	4b0f      	ldr	r3, [pc, #60]	; (206d4 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   20696:	2201      	movs	r2, #1
   20698:	0018      	movs	r0, r3
   2069a:	4b0f      	ldr	r3, [pc, #60]	; (206d8 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   2069c:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
   2069e:	4b0f      	ldr	r3, [pc, #60]	; (206dc <sd_mmc_spi_stop_multiwrite_block+0x94>)
   206a0:	4798      	blx	r3
   206a2:	0003      	movs	r3, r0
   206a4:	001a      	movs	r2, r3
   206a6:	2301      	movs	r3, #1
   206a8:	4053      	eors	r3, r2
   206aa:	b2db      	uxtb	r3, r3
   206ac:	2b00      	cmp	r3, #0
   206ae:	d004      	beq.n	206ba <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   206b0:	4b0b      	ldr	r3, [pc, #44]	; (206e0 <sd_mmc_spi_stop_multiwrite_block+0x98>)
   206b2:	2205      	movs	r2, #5
   206b4:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
   206b6:	2300      	movs	r3, #0
   206b8:	e000      	b.n	206bc <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
   206ba:	2301      	movs	r3, #1
}
   206bc:	0018      	movs	r0, r3
   206be:	46bd      	mov	sp, r7
   206c0:	b003      	add	sp, #12
   206c2:	bd90      	pop	{r4, r7, pc}
   206c4:	20003eda 	.word	0x20003eda
   206c8:	20003ed4 	.word	0x20003ed4
   206cc:	20003ed8 	.word	0x20003ed8
   206d0:	0003372d 	.word	0x0003372d
   206d4:	20003e8c 	.word	0x20003e8c
   206d8:	00028f15 	.word	0x00028f15
   206dc:	00020449 	.word	0x00020449
   206e0:	20003ecf 	.word	0x20003ecf

000206e4 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
   206e4:	b580      	push	{r7, lr}
   206e6:	b090      	sub	sp, #64	; 0x40
   206e8:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   206ea:	4b1f      	ldr	r3, [pc, #124]	; (20768 <sd_mmc_spi_init+0x84>)
   206ec:	2200      	movs	r2, #0
   206ee:	701a      	strb	r2, [r3, #0]

	// Initialize card detect pin
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   206f0:	233c      	movs	r3, #60	; 0x3c
   206f2:	18fb      	adds	r3, r7, r3
   206f4:	0018      	movs	r0, r3
   206f6:	4b1d      	ldr	r3, [pc, #116]	; (2076c <sd_mmc_spi_init+0x88>)
   206f8:	4798      	blx	r3
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
	#endif

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
   206fa:	1d3b      	adds	r3, r7, #4
   206fc:	0018      	movs	r0, r3
   206fe:	4b1c      	ldr	r3, [pc, #112]	; (20770 <sd_mmc_spi_init+0x8c>)
   20700:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
   20702:	1d3b      	adds	r3, r7, #4
   20704:	2280      	movs	r2, #128	; 0x80
   20706:	0252      	lsls	r2, r2, #9
   20708:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
   2070a:	1d3b      	adds	r3, r7, #4
   2070c:	4a19      	ldr	r2, [pc, #100]	; (20774 <sd_mmc_spi_init+0x90>)
   2070e:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
   20710:	1d3b      	adds	r3, r7, #4
   20712:	4a19      	ldr	r2, [pc, #100]	; (20778 <sd_mmc_spi_init+0x94>)
   20714:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
   20716:	1d3b      	adds	r3, r7, #4
   20718:	4a18      	ldr	r2, [pc, #96]	; (2077c <sd_mmc_spi_init+0x98>)
   2071a:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
   2071c:	1d3b      	adds	r3, r7, #4
   2071e:	4a18      	ldr	r2, [pc, #96]	; (20780 <sd_mmc_spi_init+0x9c>)
   20720:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
   20722:	1d3b      	adds	r3, r7, #4
   20724:	2224      	movs	r2, #36	; 0x24
   20726:	2100      	movs	r1, #0
   20728:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
   2072a:	1d3b      	adds	r3, r7, #4
   2072c:	4a15      	ldr	r2, [pc, #84]	; (20784 <sd_mmc_spi_init+0xa0>)
   2072e:	619a      	str	r2, [r3, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
   20730:	1d3a      	adds	r2, r7, #4
   20732:	4915      	ldr	r1, [pc, #84]	; (20788 <sd_mmc_spi_init+0xa4>)
   20734:	4b15      	ldr	r3, [pc, #84]	; (2078c <sd_mmc_spi_init+0xa8>)
   20736:	0018      	movs	r0, r3
   20738:	4b15      	ldr	r3, [pc, #84]	; (20790 <sd_mmc_spi_init+0xac>)
   2073a:	4798      	blx	r3
	spi_enable(&sd_mmc_master);
   2073c:	4b13      	ldr	r3, [pc, #76]	; (2078c <sd_mmc_spi_init+0xa8>)
   2073e:	0018      	movs	r0, r3
   20740:	4b14      	ldr	r3, [pc, #80]	; (20794 <sd_mmc_spi_init+0xb0>)
   20742:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
   20744:	4b14      	ldr	r3, [pc, #80]	; (20798 <sd_mmc_spi_init+0xb4>)
   20746:	0018      	movs	r0, r3
   20748:	4b14      	ldr	r3, [pc, #80]	; (2079c <sd_mmc_spi_init+0xb8>)
   2074a:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
   2074c:	4b14      	ldr	r3, [pc, #80]	; (207a0 <sd_mmc_spi_init+0xbc>)
   2074e:	781a      	ldrb	r2, [r3, #0]
   20750:	4b11      	ldr	r3, [pc, #68]	; (20798 <sd_mmc_spi_init+0xb4>)
   20752:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
   20754:	4a10      	ldr	r2, [pc, #64]	; (20798 <sd_mmc_spi_init+0xb4>)
   20756:	4b13      	ldr	r3, [pc, #76]	; (207a4 <sd_mmc_spi_init+0xc0>)
   20758:	0011      	movs	r1, r2
   2075a:	0018      	movs	r0, r3
   2075c:	4b12      	ldr	r3, [pc, #72]	; (207a8 <sd_mmc_spi_init+0xc4>)
   2075e:	4798      	blx	r3
}
   20760:	46c0      	nop			; (mov r8, r8)
   20762:	46bd      	mov	sp, r7
   20764:	b010      	add	sp, #64	; 0x40
   20766:	bd80      	pop	{r7, pc}
   20768:	20003ecf 	.word	0x20003ecf
   2076c:	00020199 	.word	0x00020199
   20770:	00020231 	.word	0x00020231
   20774:	00100002 	.word	0x00100002
   20778:	00110002 	.word	0x00110002
   2077c:	00120002 	.word	0x00120002
   20780:	00130002 	.word	0x00130002
   20784:	00061a80 	.word	0x00061a80
   20788:	42000c00 	.word	0x42000c00
   2078c:	20003e8c 	.word	0x20003e8c
   20790:	00028b61 	.word	0x00028b61
   20794:	0002033d 	.word	0x0002033d
   20798:	20003ecc 	.word	0x20003ecc
   2079c:	000202b5 	.word	0x000202b5
   207a0:	2000010c 	.word	0x2000010c
   207a4:	20003ec8 	.word	0x20003ec8
   207a8:	000202d9 	.word	0x000202d9

000207ac <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
   207ac:	b590      	push	{r4, r7, lr}
   207ae:	b083      	sub	sp, #12
   207b0:	af00      	add	r7, sp, #0
   207b2:	0004      	movs	r4, r0
   207b4:	6039      	str	r1, [r7, #0]
   207b6:	0010      	movs	r0, r2
   207b8:	0019      	movs	r1, r3
   207ba:	1dfb      	adds	r3, r7, #7
   207bc:	1c22      	adds	r2, r4, #0
   207be:	701a      	strb	r2, [r3, #0]
   207c0:	1dbb      	adds	r3, r7, #6
   207c2:	1c02      	adds	r2, r0, #0
   207c4:	701a      	strb	r2, [r3, #0]
   207c6:	1d7b      	adds	r3, r7, #5
   207c8:	1c0a      	adds	r2, r1, #0
   207ca:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   207cc:	4b13      	ldr	r3, [pc, #76]	; (2081c <sd_mmc_spi_select_device+0x70>)
   207ce:	2200      	movs	r2, #0
   207d0:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
   207d2:	683b      	ldr	r3, [r7, #0]
   207d4:	4a12      	ldr	r2, [pc, #72]	; (20820 <sd_mmc_spi_select_device+0x74>)
   207d6:	4293      	cmp	r3, r2
   207d8:	d907      	bls.n	207ea <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
   207da:	4b11      	ldr	r3, [pc, #68]	; (20820 <sd_mmc_spi_select_device+0x74>)
   207dc:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   207de:	e004      	b.n	207ea <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
   207e0:	683b      	ldr	r3, [r7, #0]
   207e2:	08db      	lsrs	r3, r3, #3
   207e4:	683a      	ldr	r2, [r7, #0]
   207e6:	1ad3      	subs	r3, r2, r3
   207e8:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   207ea:	683a      	ldr	r2, [r7, #0]
   207ec:	4b0d      	ldr	r3, [pc, #52]	; (20824 <sd_mmc_spi_select_device+0x78>)
   207ee:	0011      	movs	r1, r2
   207f0:	0018      	movs	r0, r3
   207f2:	4b0d      	ldr	r3, [pc, #52]	; (20828 <sd_mmc_spi_select_device+0x7c>)
   207f4:	4798      	blx	r3
   207f6:	0003      	movs	r3, r0
   207f8:	2b17      	cmp	r3, #23
   207fa:	d0f1      	beq.n	207e0 <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
   207fc:	1dfb      	adds	r3, r7, #7
   207fe:	781a      	ldrb	r2, [r3, #0]
   20800:	0013      	movs	r3, r2
   20802:	005b      	lsls	r3, r3, #1
   20804:	189b      	adds	r3, r3, r2
   20806:	4a09      	ldr	r2, [pc, #36]	; (2082c <sd_mmc_spi_select_device+0x80>)
   20808:	1899      	adds	r1, r3, r2
   2080a:	4b06      	ldr	r3, [pc, #24]	; (20824 <sd_mmc_spi_select_device+0x78>)
   2080c:	2201      	movs	r2, #1
   2080e:	0018      	movs	r0, r3
   20810:	4b07      	ldr	r3, [pc, #28]	; (20830 <sd_mmc_spi_select_device+0x84>)
   20812:	4798      	blx	r3
}
   20814:	46c0      	nop			; (mov r8, r8)
   20816:	46bd      	mov	sp, r7
   20818:	b003      	add	sp, #12
   2081a:	bd90      	pop	{r4, r7, pc}
   2081c:	20003ecf 	.word	0x20003ecf
   20820:	00989680 	.word	0x00989680
   20824:	20003e8c 	.word	0x20003e8c
   20828:	00028889 	.word	0x00028889
   2082c:	20003ec8 	.word	0x20003ec8
   20830:	00028e25 	.word	0x00028e25

00020834 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
   20834:	b580      	push	{r7, lr}
   20836:	b082      	sub	sp, #8
   20838:	af00      	add	r7, sp, #0
   2083a:	0002      	movs	r2, r0
   2083c:	1dfb      	adds	r3, r7, #7
   2083e:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20840:	4b09      	ldr	r3, [pc, #36]	; (20868 <sd_mmc_spi_deselect_device+0x34>)
   20842:	2200      	movs	r2, #0
   20844:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
   20846:	1dfb      	adds	r3, r7, #7
   20848:	781a      	ldrb	r2, [r3, #0]
   2084a:	0013      	movs	r3, r2
   2084c:	005b      	lsls	r3, r3, #1
   2084e:	189b      	adds	r3, r3, r2
   20850:	4a06      	ldr	r2, [pc, #24]	; (2086c <sd_mmc_spi_deselect_device+0x38>)
   20852:	1899      	adds	r1, r3, r2
   20854:	4b06      	ldr	r3, [pc, #24]	; (20870 <sd_mmc_spi_deselect_device+0x3c>)
   20856:	2200      	movs	r2, #0
   20858:	0018      	movs	r0, r3
   2085a:	4b06      	ldr	r3, [pc, #24]	; (20874 <sd_mmc_spi_deselect_device+0x40>)
   2085c:	4798      	blx	r3
}
   2085e:	46c0      	nop			; (mov r8, r8)
   20860:	46bd      	mov	sp, r7
   20862:	b002      	add	sp, #8
   20864:	bd80      	pop	{r7, pc}
   20866:	46c0      	nop			; (mov r8, r8)
   20868:	20003ecf 	.word	0x20003ecf
   2086c:	20003ec8 	.word	0x20003ec8
   20870:	20003e8c 	.word	0x20003e8c
   20874:	00028e25 	.word	0x00028e25

00020878 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
   20878:	b580      	push	{r7, lr}
   2087a:	b082      	sub	sp, #8
   2087c:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
   2087e:	1dbb      	adds	r3, r7, #6
   20880:	22ff      	movs	r2, #255	; 0xff
   20882:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20884:	4b0c      	ldr	r3, [pc, #48]	; (208b8 <sd_mmc_spi_send_clock+0x40>)
   20886:	2200      	movs	r2, #0
   20888:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
   2088a:	1dfb      	adds	r3, r7, #7
   2088c:	2200      	movs	r2, #0
   2088e:	701a      	strb	r2, [r3, #0]
   20890:	e00a      	b.n	208a8 <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
   20892:	1db9      	adds	r1, r7, #6
   20894:	4b09      	ldr	r3, [pc, #36]	; (208bc <sd_mmc_spi_send_clock+0x44>)
   20896:	2201      	movs	r2, #1
   20898:	0018      	movs	r0, r3
   2089a:	4b09      	ldr	r3, [pc, #36]	; (208c0 <sd_mmc_spi_send_clock+0x48>)
   2089c:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
   2089e:	1dfb      	adds	r3, r7, #7
   208a0:	781a      	ldrb	r2, [r3, #0]
   208a2:	1dfb      	adds	r3, r7, #7
   208a4:	3201      	adds	r2, #1
   208a6:	701a      	strb	r2, [r3, #0]
   208a8:	1dfb      	adds	r3, r7, #7
   208aa:	781b      	ldrb	r3, [r3, #0]
   208ac:	2b09      	cmp	r3, #9
   208ae:	d9f0      	bls.n	20892 <sd_mmc_spi_send_clock+0x1a>
	}
}
   208b0:	46c0      	nop			; (mov r8, r8)
   208b2:	46bd      	mov	sp, r7
   208b4:	b002      	add	sp, #8
   208b6:	bd80      	pop	{r7, pc}
   208b8:	20003ecf 	.word	0x20003ecf
   208bc:	20003e8c 	.word	0x20003e8c
   208c0:	00028f15 	.word	0x00028f15

000208c4 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
   208c4:	b590      	push	{r4, r7, lr}
   208c6:	b085      	sub	sp, #20
   208c8:	af02      	add	r7, sp, #8
   208ca:	6078      	str	r0, [r7, #4]
   208cc:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
   208ce:	6839      	ldr	r1, [r7, #0]
   208d0:	6878      	ldr	r0, [r7, #4]
   208d2:	2300      	movs	r3, #0
   208d4:	9300      	str	r3, [sp, #0]
   208d6:	2300      	movs	r3, #0
   208d8:	2200      	movs	r2, #0
   208da:	4c03      	ldr	r4, [pc, #12]	; (208e8 <sd_mmc_spi_send_cmd+0x24>)
   208dc:	47a0      	blx	r4
   208de:	0003      	movs	r3, r0
}
   208e0:	0018      	movs	r0, r3
   208e2:	46bd      	mov	sp, r7
   208e4:	b003      	add	sp, #12
   208e6:	bd90      	pop	{r4, r7, pc}
   208e8:	000208ed 	.word	0x000208ed

000208ec <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
   208ec:	b590      	push	{r4, r7, lr}
   208ee:	b089      	sub	sp, #36	; 0x24
   208f0:	af00      	add	r7, sp, #0
   208f2:	60f8      	str	r0, [r7, #12]
   208f4:	60b9      	str	r1, [r7, #8]
   208f6:	0019      	movs	r1, r3
   208f8:	1dbb      	adds	r3, r7, #6
   208fa:	801a      	strh	r2, [r3, #0]
   208fc:	1d3b      	adds	r3, r7, #4
   208fe:	1c0a      	adds	r2, r1, #0
   20900:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
   20902:	231b      	movs	r3, #27
   20904:	18fb      	adds	r3, r7, r3
   20906:	22ff      	movs	r2, #255	; 0xff
   20908:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
   2090a:	231c      	movs	r3, #28
   2090c:	18fb      	adds	r3, r7, r3
   2090e:	22ff      	movs	r2, #255	; 0xff
   20910:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20912:	4b72      	ldr	r3, [pc, #456]	; (20adc <sd_mmc_spi_adtc_start+0x1f0>)
   20914:	2200      	movs	r2, #0
   20916:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
   20918:	68fb      	ldr	r3, [r7, #12]
   2091a:	b2db      	uxtb	r3, r3
   2091c:	223f      	movs	r2, #63	; 0x3f
   2091e:	4013      	ands	r3, r2
   20920:	b2db      	uxtb	r3, r3
   20922:	2240      	movs	r2, #64	; 0x40
   20924:	4313      	orrs	r3, r2
   20926:	b2da      	uxtb	r2, r3
   20928:	2314      	movs	r3, #20
   2092a:	18fb      	adds	r3, r7, r3
   2092c:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
   2092e:	68bb      	ldr	r3, [r7, #8]
   20930:	0e1b      	lsrs	r3, r3, #24
   20932:	b2da      	uxtb	r2, r3
   20934:	2314      	movs	r3, #20
   20936:	18fb      	adds	r3, r7, r3
   20938:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
   2093a:	68bb      	ldr	r3, [r7, #8]
   2093c:	0c1b      	lsrs	r3, r3, #16
   2093e:	b2da      	uxtb	r2, r3
   20940:	2314      	movs	r3, #20
   20942:	18fb      	adds	r3, r7, r3
   20944:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
   20946:	68bb      	ldr	r3, [r7, #8]
   20948:	0a1b      	lsrs	r3, r3, #8
   2094a:	b2da      	uxtb	r2, r3
   2094c:	2314      	movs	r3, #20
   2094e:	18fb      	adds	r3, r7, r3
   20950:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
   20952:	68bb      	ldr	r3, [r7, #8]
   20954:	b2da      	uxtb	r2, r3
   20956:	2314      	movs	r3, #20
   20958:	18fb      	adds	r3, r7, r3
   2095a:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
   2095c:	2314      	movs	r3, #20
   2095e:	18fb      	adds	r3, r7, r3
   20960:	2105      	movs	r1, #5
   20962:	0018      	movs	r0, r3
   20964:	4b5e      	ldr	r3, [pc, #376]	; (20ae0 <sd_mmc_spi_adtc_start+0x1f4>)
   20966:	4798      	blx	r3
   20968:	0003      	movs	r3, r0
   2096a:	001a      	movs	r2, r3
   2096c:	2314      	movs	r3, #20
   2096e:	18fb      	adds	r3, r7, r3
   20970:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
   20972:	231b      	movs	r3, #27
   20974:	18f9      	adds	r1, r7, r3
   20976:	4b5b      	ldr	r3, [pc, #364]	; (20ae4 <sd_mmc_spi_adtc_start+0x1f8>)
   20978:	2201      	movs	r2, #1
   2097a:	0018      	movs	r0, r3
   2097c:	4b5a      	ldr	r3, [pc, #360]	; (20ae8 <sd_mmc_spi_adtc_start+0x1fc>)
   2097e:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
   20980:	2314      	movs	r3, #20
   20982:	18f9      	adds	r1, r7, r3
   20984:	4b57      	ldr	r3, [pc, #348]	; (20ae4 <sd_mmc_spi_adtc_start+0x1f8>)
   20986:	2206      	movs	r2, #6
   20988:	0018      	movs	r0, r3
   2098a:	4b57      	ldr	r3, [pc, #348]	; (20ae8 <sd_mmc_spi_adtc_start+0x1fc>)
   2098c:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
   2098e:	2313      	movs	r3, #19
   20990:	18fb      	adds	r3, r7, r3
   20992:	22ff      	movs	r2, #255	; 0xff
   20994:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   20996:	231c      	movs	r3, #28
   20998:	18fb      	adds	r3, r7, r3
   2099a:	881b      	ldrh	r3, [r3, #0]
   2099c:	2213      	movs	r2, #19
   2099e:	18b9      	adds	r1, r7, r2
   209a0:	4850      	ldr	r0, [pc, #320]	; (20ae4 <sd_mmc_spi_adtc_start+0x1f8>)
   209a2:	2201      	movs	r2, #1
   209a4:	4c51      	ldr	r4, [pc, #324]	; (20aec <sd_mmc_spi_adtc_start+0x200>)
   209a6:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
   209a8:	231f      	movs	r3, #31
   209aa:	18fb      	adds	r3, r7, r3
   209ac:	2207      	movs	r2, #7
   209ae:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   209b0:	231c      	movs	r3, #28
   209b2:	18fb      	adds	r3, r7, r3
   209b4:	881b      	ldrh	r3, [r3, #0]
   209b6:	2213      	movs	r2, #19
   209b8:	18b9      	adds	r1, r7, r2
   209ba:	484a      	ldr	r0, [pc, #296]	; (20ae4 <sd_mmc_spi_adtc_start+0x1f8>)
   209bc:	2201      	movs	r2, #1
   209be:	4c4b      	ldr	r4, [pc, #300]	; (20aec <sd_mmc_spi_adtc_start+0x200>)
   209c0:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
   209c2:	2313      	movs	r3, #19
   209c4:	18fb      	adds	r3, r7, r3
   209c6:	781b      	ldrb	r3, [r3, #0]
   209c8:	b25b      	sxtb	r3, r3
   209ca:	2b00      	cmp	r3, #0
   209cc:	da10      	bge.n	209f0 <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
   209ce:	231f      	movs	r3, #31
   209d0:	18fb      	adds	r3, r7, r3
   209d2:	221f      	movs	r2, #31
   209d4:	18ba      	adds	r2, r7, r2
   209d6:	7812      	ldrb	r2, [r2, #0]
   209d8:	3a01      	subs	r2, #1
   209da:	701a      	strb	r2, [r3, #0]
   209dc:	231f      	movs	r3, #31
   209de:	18fb      	adds	r3, r7, r3
   209e0:	781b      	ldrb	r3, [r3, #0]
   209e2:	2b00      	cmp	r3, #0
   209e4:	d1e4      	bne.n	209b0 <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
   209e6:	4b3d      	ldr	r3, [pc, #244]	; (20adc <sd_mmc_spi_adtc_start+0x1f0>)
   209e8:	2202      	movs	r2, #2
   209ea:	701a      	strb	r2, [r3, #0]
			return false;
   209ec:	2300      	movs	r3, #0
   209ee:	e070      	b.n	20ad2 <sd_mmc_spi_adtc_start+0x1e6>
			break;
   209f0:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
   209f2:	2313      	movs	r3, #19
   209f4:	18fb      	adds	r3, r7, r3
   209f6:	781b      	ldrb	r3, [r3, #0]
   209f8:	001a      	movs	r2, r3
   209fa:	4b3d      	ldr	r3, [pc, #244]	; (20af0 <sd_mmc_spi_adtc_start+0x204>)
   209fc:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
   209fe:	2313      	movs	r3, #19
   20a00:	18fb      	adds	r3, r7, r3
   20a02:	781b      	ldrb	r3, [r3, #0]
   20a04:	001a      	movs	r2, r3
   20a06:	2308      	movs	r3, #8
   20a08:	4013      	ands	r3, r2
   20a0a:	d004      	beq.n	20a16 <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
   20a0c:	4b33      	ldr	r3, [pc, #204]	; (20adc <sd_mmc_spi_adtc_start+0x1f0>)
   20a0e:	2206      	movs	r2, #6
   20a10:	701a      	strb	r2, [r3, #0]
		return false;
   20a12:	2300      	movs	r3, #0
   20a14:	e05d      	b.n	20ad2 <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
   20a16:	2313      	movs	r3, #19
   20a18:	18fb      	adds	r3, r7, r3
   20a1a:	781b      	ldrb	r3, [r3, #0]
   20a1c:	001a      	movs	r2, r3
   20a1e:	2304      	movs	r3, #4
   20a20:	4013      	ands	r3, r2
   20a22:	d004      	beq.n	20a2e <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
   20a24:	4b2d      	ldr	r3, [pc, #180]	; (20adc <sd_mmc_spi_adtc_start+0x1f0>)
   20a26:	2209      	movs	r2, #9
   20a28:	701a      	strb	r2, [r3, #0]
		return false;
   20a2a:	2300      	movs	r3, #0
   20a2c:	e051      	b.n	20ad2 <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
   20a2e:	2313      	movs	r3, #19
   20a30:	18fb      	adds	r3, r7, r3
   20a32:	781b      	ldrb	r3, [r3, #0]
   20a34:	001a      	movs	r2, r3
   20a36:	2301      	movs	r3, #1
   20a38:	439a      	bics	r2, r3
   20a3a:	1e13      	subs	r3, r2, #0
   20a3c:	d004      	beq.n	20a48 <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   20a3e:	4b27      	ldr	r3, [pc, #156]	; (20adc <sd_mmc_spi_adtc_start+0x1f0>)
   20a40:	2201      	movs	r2, #1
   20a42:	701a      	strb	r2, [r3, #0]
		return false;
   20a44:	2300      	movs	r3, #0
   20a46:	e044      	b.n	20ad2 <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
   20a48:	68fa      	ldr	r2, [r7, #12]
   20a4a:	2380      	movs	r3, #128	; 0x80
   20a4c:	019b      	lsls	r3, r3, #6
   20a4e:	4013      	ands	r3, r2
   20a50:	d00d      	beq.n	20a6e <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
   20a52:	4b28      	ldr	r3, [pc, #160]	; (20af4 <sd_mmc_spi_adtc_start+0x208>)
   20a54:	4798      	blx	r3
   20a56:	0003      	movs	r3, r0
   20a58:	001a      	movs	r2, r3
   20a5a:	2301      	movs	r3, #1
   20a5c:	4053      	eors	r3, r2
   20a5e:	b2db      	uxtb	r3, r3
   20a60:	2b00      	cmp	r3, #0
   20a62:	d004      	beq.n	20a6e <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
   20a64:	4b1d      	ldr	r3, [pc, #116]	; (20adc <sd_mmc_spi_adtc_start+0x1f0>)
   20a66:	2203      	movs	r2, #3
   20a68:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
   20a6a:	2300      	movs	r3, #0
   20a6c:	e031      	b.n	20ad2 <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
   20a6e:	68fa      	ldr	r2, [r7, #12]
   20a70:	2380      	movs	r3, #128	; 0x80
   20a72:	009b      	lsls	r3, r3, #2
   20a74:	4013      	ands	r3, r2
   20a76:	d00e      	beq.n	20a96 <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
   20a78:	4b1d      	ldr	r3, [pc, #116]	; (20af0 <sd_mmc_spi_adtc_start+0x204>)
   20a7a:	2200      	movs	r2, #0
   20a7c:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
   20a7e:	231c      	movs	r3, #28
   20a80:	18fb      	adds	r3, r7, r3
   20a82:	881b      	ldrh	r3, [r3, #0]
   20a84:	491a      	ldr	r1, [pc, #104]	; (20af0 <sd_mmc_spi_adtc_start+0x204>)
   20a86:	4817      	ldr	r0, [pc, #92]	; (20ae4 <sd_mmc_spi_adtc_start+0x1f8>)
   20a88:	2201      	movs	r2, #1
   20a8a:	4c18      	ldr	r4, [pc, #96]	; (20aec <sd_mmc_spi_adtc_start+0x200>)
   20a8c:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
   20a8e:	4b18      	ldr	r3, [pc, #96]	; (20af0 <sd_mmc_spi_adtc_start+0x204>)
   20a90:	681a      	ldr	r2, [r3, #0]
   20a92:	4b17      	ldr	r3, [pc, #92]	; (20af0 <sd_mmc_spi_adtc_start+0x204>)
   20a94:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
   20a96:	68fa      	ldr	r2, [r7, #12]
   20a98:	2380      	movs	r3, #128	; 0x80
   20a9a:	00db      	lsls	r3, r3, #3
   20a9c:	4013      	ands	r3, r2
   20a9e:	d00c      	beq.n	20aba <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
   20aa0:	231c      	movs	r3, #28
   20aa2:	18fb      	adds	r3, r7, r3
   20aa4:	881b      	ldrh	r3, [r3, #0]
   20aa6:	4912      	ldr	r1, [pc, #72]	; (20af0 <sd_mmc_spi_adtc_start+0x204>)
   20aa8:	480e      	ldr	r0, [pc, #56]	; (20ae4 <sd_mmc_spi_adtc_start+0x1f8>)
   20aaa:	2204      	movs	r2, #4
   20aac:	4c0f      	ldr	r4, [pc, #60]	; (20aec <sd_mmc_spi_adtc_start+0x200>)
   20aae:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
   20ab0:	4b0f      	ldr	r3, [pc, #60]	; (20af0 <sd_mmc_spi_adtc_start+0x204>)
   20ab2:	681b      	ldr	r3, [r3, #0]
   20ab4:	ba1a      	rev	r2, r3
   20ab6:	4b0e      	ldr	r3, [pc, #56]	; (20af0 <sd_mmc_spi_adtc_start+0x204>)
   20ab8:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
   20aba:	4b0f      	ldr	r3, [pc, #60]	; (20af8 <sd_mmc_spi_adtc_start+0x20c>)
   20abc:	1dba      	adds	r2, r7, #6
   20abe:	8812      	ldrh	r2, [r2, #0]
   20ac0:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
   20ac2:	4b0e      	ldr	r3, [pc, #56]	; (20afc <sd_mmc_spi_adtc_start+0x210>)
   20ac4:	1d3a      	adds	r2, r7, #4
   20ac6:	8812      	ldrh	r2, [r2, #0]
   20ac8:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
   20aca:	4b0d      	ldr	r3, [pc, #52]	; (20b00 <sd_mmc_spi_adtc_start+0x214>)
   20acc:	2200      	movs	r2, #0
   20ace:	601a      	str	r2, [r3, #0]
	return true; // Command complete
   20ad0:	2301      	movs	r3, #1
}
   20ad2:	0018      	movs	r0, r3
   20ad4:	46bd      	mov	sp, r7
   20ad6:	b009      	add	sp, #36	; 0x24
   20ad8:	bd90      	pop	{r4, r7, pc}
   20ada:	46c0      	nop			; (mov r8, r8)
   20adc:	20003ecf 	.word	0x20003ecf
   20ae0:	0002038d 	.word	0x0002038d
   20ae4:	20003e8c 	.word	0x20003e8c
   20ae8:	00028f15 	.word	0x00028f15
   20aec:	00028cf1 	.word	0x00028cf1
   20af0:	20003ed0 	.word	0x20003ed0
   20af4:	00020449 	.word	0x00020449
   20af8:	20003ed8 	.word	0x20003ed8
   20afc:	20003eda 	.word	0x20003eda
   20b00:	20003ed4 	.word	0x20003ed4

00020b04 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
   20b04:	b580      	push	{r7, lr}
   20b06:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
   20b08:	4b02      	ldr	r3, [pc, #8]	; (20b14 <sd_mmc_spi_get_response+0x10>)
   20b0a:	681b      	ldr	r3, [r3, #0]
}
   20b0c:	0018      	movs	r0, r3
   20b0e:	46bd      	mov	sp, r7
   20b10:	bd80      	pop	{r7, pc}
   20b12:	46c0      	nop			; (mov r8, r8)
   20b14:	20003ed0 	.word	0x20003ed0

00020b18 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
   20b18:	b590      	push	{r4, r7, lr}
   20b1a:	b085      	sub	sp, #20
   20b1c:	af00      	add	r7, sp, #0
   20b1e:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
   20b20:	230e      	movs	r3, #14
   20b22:	18fb      	adds	r3, r7, r3
   20b24:	22ff      	movs	r2, #255	; 0xff
   20b26:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20b28:	4b1c      	ldr	r3, [pc, #112]	; (20b9c <sd_mmc_spi_read_word+0x84>)
   20b2a:	2200      	movs	r2, #0
   20b2c:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   20b2e:	4b1c      	ldr	r3, [pc, #112]	; (20ba0 <sd_mmc_spi_read_word+0x88>)
   20b30:	681a      	ldr	r2, [r3, #0]
   20b32:	4b1c      	ldr	r3, [pc, #112]	; (20ba4 <sd_mmc_spi_read_word+0x8c>)
   20b34:	881b      	ldrh	r3, [r3, #0]
   20b36:	0019      	movs	r1, r3
   20b38:	4b1b      	ldr	r3, [pc, #108]	; (20ba8 <sd_mmc_spi_read_word+0x90>)
   20b3a:	0010      	movs	r0, r2
   20b3c:	4798      	blx	r3
   20b3e:	1e0b      	subs	r3, r1, #0
   20b40:	d10a      	bne.n	20b58 <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
   20b42:	4b1a      	ldr	r3, [pc, #104]	; (20bac <sd_mmc_spi_read_word+0x94>)
   20b44:	4798      	blx	r3
   20b46:	0003      	movs	r3, r0
   20b48:	001a      	movs	r2, r3
   20b4a:	2301      	movs	r3, #1
   20b4c:	4053      	eors	r3, r2
   20b4e:	b2db      	uxtb	r3, r3
   20b50:	2b00      	cmp	r3, #0
   20b52:	d001      	beq.n	20b58 <sd_mmc_spi_read_word+0x40>
			return false;
   20b54:	2300      	movs	r3, #0
   20b56:	e01d      	b.n	20b94 <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
   20b58:	230e      	movs	r3, #14
   20b5a:	18fb      	adds	r3, r7, r3
   20b5c:	881b      	ldrh	r3, [r3, #0]
   20b5e:	1d39      	adds	r1, r7, #4
   20b60:	4813      	ldr	r0, [pc, #76]	; (20bb0 <sd_mmc_spi_read_word+0x98>)
   20b62:	2204      	movs	r2, #4
   20b64:	4c13      	ldr	r4, [pc, #76]	; (20bb4 <sd_mmc_spi_read_word+0x9c>)
   20b66:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
   20b68:	687b      	ldr	r3, [r7, #4]
   20b6a:	687a      	ldr	r2, [r7, #4]
   20b6c:	6812      	ldr	r2, [r2, #0]
   20b6e:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
   20b70:	4b0b      	ldr	r3, [pc, #44]	; (20ba0 <sd_mmc_spi_read_word+0x88>)
   20b72:	681b      	ldr	r3, [r3, #0]
   20b74:	1d1a      	adds	r2, r3, #4
   20b76:	4b0a      	ldr	r3, [pc, #40]	; (20ba0 <sd_mmc_spi_read_word+0x88>)
   20b78:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   20b7a:	4b09      	ldr	r3, [pc, #36]	; (20ba0 <sd_mmc_spi_read_word+0x88>)
   20b7c:	681a      	ldr	r2, [r3, #0]
   20b7e:	4b09      	ldr	r3, [pc, #36]	; (20ba4 <sd_mmc_spi_read_word+0x8c>)
   20b80:	881b      	ldrh	r3, [r3, #0]
   20b82:	0019      	movs	r1, r3
   20b84:	4b08      	ldr	r3, [pc, #32]	; (20ba8 <sd_mmc_spi_read_word+0x90>)
   20b86:	0010      	movs	r0, r2
   20b88:	4798      	blx	r3
   20b8a:	1e0b      	subs	r3, r1, #0
   20b8c:	d101      	bne.n	20b92 <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
   20b8e:	4b0a      	ldr	r3, [pc, #40]	; (20bb8 <sd_mmc_spi_read_word+0xa0>)
   20b90:	4798      	blx	r3
	}
	return true;
   20b92:	2301      	movs	r3, #1
}
   20b94:	0018      	movs	r0, r3
   20b96:	46bd      	mov	sp, r7
   20b98:	b005      	add	sp, #20
   20b9a:	bd90      	pop	{r4, r7, pc}
   20b9c:	20003ecf 	.word	0x20003ecf
   20ba0:	20003ed4 	.word	0x20003ed4
   20ba4:	20003ed8 	.word	0x20003ed8
   20ba8:	00033839 	.word	0x00033839
   20bac:	000204b5 	.word	0x000204b5
   20bb0:	20003e8c 	.word	0x20003e8c
   20bb4:	00028cf1 	.word	0x00028cf1
   20bb8:	00020539 	.word	0x00020539

00020bbc <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
   20bbc:	b590      	push	{r4, r7, lr}
   20bbe:	b085      	sub	sp, #20
   20bc0:	af00      	add	r7, sp, #0
   20bc2:	6078      	str	r0, [r7, #4]
   20bc4:	000a      	movs	r2, r1
   20bc6:	1cbb      	adds	r3, r7, #2
   20bc8:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
   20bca:	230a      	movs	r3, #10
   20bcc:	18fb      	adds	r3, r7, r3
   20bce:	22ff      	movs	r2, #255	; 0xff
   20bd0:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20bd2:	4b1c      	ldr	r3, [pc, #112]	; (20c44 <sd_mmc_spi_start_read_blocks+0x88>)
   20bd4:	2200      	movs	r2, #0
   20bd6:	701a      	strb	r2, [r3, #0]
	pos = 0;
   20bd8:	2300      	movs	r3, #0
   20bda:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   20bdc:	e025      	b.n	20c2a <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
   20bde:	4b1a      	ldr	r3, [pc, #104]	; (20c48 <sd_mmc_spi_start_read_blocks+0x8c>)
   20be0:	4798      	blx	r3
   20be2:	0003      	movs	r3, r0
   20be4:	001a      	movs	r2, r3
   20be6:	2301      	movs	r3, #1
   20be8:	4053      	eors	r3, r2
   20bea:	b2db      	uxtb	r3, r3
   20bec:	2b00      	cmp	r3, #0
   20bee:	d001      	beq.n	20bf4 <sd_mmc_spi_start_read_blocks+0x38>
			return false;
   20bf0:	2300      	movs	r3, #0
   20bf2:	e022      	b.n	20c3a <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
   20bf4:	687a      	ldr	r2, [r7, #4]
   20bf6:	68fb      	ldr	r3, [r7, #12]
   20bf8:	18d1      	adds	r1, r2, r3
   20bfa:	4b14      	ldr	r3, [pc, #80]	; (20c4c <sd_mmc_spi_start_read_blocks+0x90>)
   20bfc:	881a      	ldrh	r2, [r3, #0]
   20bfe:	230a      	movs	r3, #10
   20c00:	18fb      	adds	r3, r7, r3
   20c02:	881b      	ldrh	r3, [r3, #0]
   20c04:	4812      	ldr	r0, [pc, #72]	; (20c50 <sd_mmc_spi_start_read_blocks+0x94>)
   20c06:	4c13      	ldr	r4, [pc, #76]	; (20c54 <sd_mmc_spi_start_read_blocks+0x98>)
   20c08:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
   20c0a:	4b10      	ldr	r3, [pc, #64]	; (20c4c <sd_mmc_spi_start_read_blocks+0x90>)
   20c0c:	881b      	ldrh	r3, [r3, #0]
   20c0e:	001a      	movs	r2, r3
   20c10:	68fb      	ldr	r3, [r7, #12]
   20c12:	189b      	adds	r3, r3, r2
   20c14:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   20c16:	4b0d      	ldr	r3, [pc, #52]	; (20c4c <sd_mmc_spi_start_read_blocks+0x90>)
   20c18:	881b      	ldrh	r3, [r3, #0]
   20c1a:	001a      	movs	r2, r3
   20c1c:	4b0e      	ldr	r3, [pc, #56]	; (20c58 <sd_mmc_spi_start_read_blocks+0x9c>)
   20c1e:	681b      	ldr	r3, [r3, #0]
   20c20:	18d2      	adds	r2, r2, r3
   20c22:	4b0d      	ldr	r3, [pc, #52]	; (20c58 <sd_mmc_spi_start_read_blocks+0x9c>)
   20c24:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
   20c26:	4b0d      	ldr	r3, [pc, #52]	; (20c5c <sd_mmc_spi_start_read_blocks+0xa0>)
   20c28:	4798      	blx	r3
	while (nb_block--) {
   20c2a:	1cbb      	adds	r3, r7, #2
   20c2c:	881b      	ldrh	r3, [r3, #0]
   20c2e:	1cba      	adds	r2, r7, #2
   20c30:	1e59      	subs	r1, r3, #1
   20c32:	8011      	strh	r1, [r2, #0]
   20c34:	2b00      	cmp	r3, #0
   20c36:	d1d2      	bne.n	20bde <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
   20c38:	2301      	movs	r3, #1
}
   20c3a:	0018      	movs	r0, r3
   20c3c:	46bd      	mov	sp, r7
   20c3e:	b005      	add	sp, #20
   20c40:	bd90      	pop	{r4, r7, pc}
   20c42:	46c0      	nop			; (mov r8, r8)
   20c44:	20003ecf 	.word	0x20003ecf
   20c48:	000204b5 	.word	0x000204b5
   20c4c:	20003ed8 	.word	0x20003ed8
   20c50:	20003e8c 	.word	0x20003e8c
   20c54:	00028cf1 	.word	0x00028cf1
   20c58:	20003ed4 	.word	0x20003ed4
   20c5c:	00020539 	.word	0x00020539

00020c60 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
   20c60:	b580      	push	{r7, lr}
   20c62:	af00      	add	r7, sp, #0
	return true;
   20c64:	2301      	movs	r3, #1
}
   20c66:	0018      	movs	r0, r3
   20c68:	46bd      	mov	sp, r7
   20c6a:	bd80      	pop	{r7, pc}

00020c6c <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
   20c6c:	b580      	push	{r7, lr}
   20c6e:	b084      	sub	sp, #16
   20c70:	af00      	add	r7, sp, #0
   20c72:	6078      	str	r0, [r7, #4]
   20c74:	000a      	movs	r2, r1
   20c76:	1cbb      	adds	r3, r7, #2
   20c78:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20c7a:	4b24      	ldr	r3, [pc, #144]	; (20d0c <sd_mmc_spi_start_write_blocks+0xa0>)
   20c7c:	2200      	movs	r2, #0
   20c7e:	701a      	strb	r2, [r3, #0]
	pos = 0;
   20c80:	2300      	movs	r3, #0
   20c82:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   20c84:	e035      	b.n	20cf2 <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
   20c86:	4b22      	ldr	r3, [pc, #136]	; (20d10 <sd_mmc_spi_start_write_blocks+0xa4>)
   20c88:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
   20c8a:	687a      	ldr	r2, [r7, #4]
   20c8c:	68fb      	ldr	r3, [r7, #12]
   20c8e:	18d1      	adds	r1, r2, r3
   20c90:	4b20      	ldr	r3, [pc, #128]	; (20d14 <sd_mmc_spi_start_write_blocks+0xa8>)
   20c92:	881a      	ldrh	r2, [r3, #0]
   20c94:	4b20      	ldr	r3, [pc, #128]	; (20d18 <sd_mmc_spi_start_write_blocks+0xac>)
   20c96:	0018      	movs	r0, r3
   20c98:	4b20      	ldr	r3, [pc, #128]	; (20d1c <sd_mmc_spi_start_write_blocks+0xb0>)
   20c9a:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
   20c9c:	4b1d      	ldr	r3, [pc, #116]	; (20d14 <sd_mmc_spi_start_write_blocks+0xa8>)
   20c9e:	881b      	ldrh	r3, [r3, #0]
   20ca0:	001a      	movs	r2, r3
   20ca2:	68fb      	ldr	r3, [r7, #12]
   20ca4:	189b      	adds	r3, r3, r2
   20ca6:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   20ca8:	4b1a      	ldr	r3, [pc, #104]	; (20d14 <sd_mmc_spi_start_write_blocks+0xa8>)
   20caa:	881b      	ldrh	r3, [r3, #0]
   20cac:	001a      	movs	r2, r3
   20cae:	4b1c      	ldr	r3, [pc, #112]	; (20d20 <sd_mmc_spi_start_write_blocks+0xb4>)
   20cb0:	681b      	ldr	r3, [r3, #0]
   20cb2:	18d2      	adds	r2, r2, r3
   20cb4:	4b1a      	ldr	r3, [pc, #104]	; (20d20 <sd_mmc_spi_start_write_blocks+0xb4>)
   20cb6:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
   20cb8:	4b1a      	ldr	r3, [pc, #104]	; (20d24 <sd_mmc_spi_start_write_blocks+0xb8>)
   20cba:	4798      	blx	r3
   20cbc:	0003      	movs	r3, r0
   20cbe:	001a      	movs	r2, r3
   20cc0:	2301      	movs	r3, #1
   20cc2:	4053      	eors	r3, r2
   20cc4:	b2db      	uxtb	r3, r3
   20cc6:	2b00      	cmp	r3, #0
   20cc8:	d001      	beq.n	20cce <sd_mmc_spi_start_write_blocks+0x62>
			return false;
   20cca:	2300      	movs	r3, #0
   20ccc:	e019      	b.n	20d02 <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
   20cce:	1cbb      	adds	r3, r7, #2
   20cd0:	881b      	ldrh	r3, [r3, #0]
   20cd2:	2b00      	cmp	r3, #0
   20cd4:	d00d      	beq.n	20cf2 <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
   20cd6:	4b14      	ldr	r3, [pc, #80]	; (20d28 <sd_mmc_spi_start_write_blocks+0xbc>)
   20cd8:	4798      	blx	r3
   20cda:	0003      	movs	r3, r0
   20cdc:	001a      	movs	r2, r3
   20cde:	2301      	movs	r3, #1
   20ce0:	4053      	eors	r3, r2
   20ce2:	b2db      	uxtb	r3, r3
   20ce4:	2b00      	cmp	r3, #0
   20ce6:	d004      	beq.n	20cf2 <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   20ce8:	4b08      	ldr	r3, [pc, #32]	; (20d0c <sd_mmc_spi_start_write_blocks+0xa0>)
   20cea:	2205      	movs	r2, #5
   20cec:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
   20cee:	2300      	movs	r3, #0
   20cf0:	e007      	b.n	20d02 <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
   20cf2:	1cbb      	adds	r3, r7, #2
   20cf4:	881b      	ldrh	r3, [r3, #0]
   20cf6:	1cba      	adds	r2, r7, #2
   20cf8:	1e59      	subs	r1, r3, #1
   20cfa:	8011      	strh	r1, [r2, #0]
   20cfc:	2b00      	cmp	r3, #0
   20cfe:	d1c2      	bne.n	20c86 <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
   20d00:	2301      	movs	r3, #1
}
   20d02:	0018      	movs	r0, r3
   20d04:	46bd      	mov	sp, r7
   20d06:	b004      	add	sp, #16
   20d08:	bd80      	pop	{r7, pc}
   20d0a:	46c0      	nop			; (mov r8, r8)
   20d0c:	20003ecf 	.word	0x20003ecf
   20d10:	00020565 	.word	0x00020565
   20d14:	20003ed8 	.word	0x20003ed8
   20d18:	20003e8c 	.word	0x20003e8c
   20d1c:	00028f15 	.word	0x00028f15
   20d20:	20003ed4 	.word	0x20003ed4
   20d24:	000205b5 	.word	0x000205b5
   20d28:	00020449 	.word	0x00020449

00020d2c <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
   20d2c:	b580      	push	{r7, lr}
   20d2e:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
   20d30:	4b09      	ldr	r3, [pc, #36]	; (20d58 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
   20d32:	4798      	blx	r3
   20d34:	0003      	movs	r3, r0
   20d36:	001a      	movs	r2, r3
   20d38:	2301      	movs	r3, #1
   20d3a:	4053      	eors	r3, r2
   20d3c:	b2db      	uxtb	r3, r3
   20d3e:	2b00      	cmp	r3, #0
   20d40:	d004      	beq.n	20d4c <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   20d42:	4b06      	ldr	r3, [pc, #24]	; (20d5c <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
   20d44:	2205      	movs	r2, #5
   20d46:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
   20d48:	2300      	movs	r3, #0
   20d4a:	e002      	b.n	20d52 <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
   20d4c:	4b04      	ldr	r3, [pc, #16]	; (20d60 <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
   20d4e:	4798      	blx	r3
   20d50:	0003      	movs	r3, r0
}
   20d52:	0018      	movs	r0, r3
   20d54:	46bd      	mov	sp, r7
   20d56:	bd80      	pop	{r7, pc}
   20d58:	00020449 	.word	0x00020449
   20d5c:	20003ecf 	.word	0x20003ecf
   20d60:	00020649 	.word	0x00020649

00020d64 <delay_cycles>:
   20d64:	b580      	push	{r7, lr}
   20d66:	b082      	sub	sp, #8
   20d68:	af00      	add	r7, sp, #0
   20d6a:	6078      	str	r0, [r7, #4]
   20d6c:	687b      	ldr	r3, [r7, #4]
   20d6e:	2b00      	cmp	r3, #0
   20d70:	d00c      	beq.n	20d8c <delay_cycles+0x28>
   20d72:	4b08      	ldr	r3, [pc, #32]	; (20d94 <delay_cycles+0x30>)
   20d74:	687a      	ldr	r2, [r7, #4]
   20d76:	605a      	str	r2, [r3, #4]
   20d78:	4b06      	ldr	r3, [pc, #24]	; (20d94 <delay_cycles+0x30>)
   20d7a:	2200      	movs	r2, #0
   20d7c:	609a      	str	r2, [r3, #8]
   20d7e:	46c0      	nop			; (mov r8, r8)
   20d80:	4b04      	ldr	r3, [pc, #16]	; (20d94 <delay_cycles+0x30>)
   20d82:	681a      	ldr	r2, [r3, #0]
   20d84:	2380      	movs	r3, #128	; 0x80
   20d86:	025b      	lsls	r3, r3, #9
   20d88:	4013      	ands	r3, r2
   20d8a:	d0f9      	beq.n	20d80 <delay_cycles+0x1c>
   20d8c:	46c0      	nop			; (mov r8, r8)
   20d8e:	46bd      	mov	sp, r7
   20d90:	b002      	add	sp, #8
   20d92:	bd80      	pop	{r7, pc}
   20d94:	e000e010 	.word	0xe000e010

00020d98 <delay_init>:
   20d98:	b580      	push	{r7, lr}
   20d9a:	af00      	add	r7, sp, #0
   20d9c:	2000      	movs	r0, #0
   20d9e:	4b0f      	ldr	r3, [pc, #60]	; (20ddc <delay_init+0x44>)
   20da0:	4798      	blx	r3
   20da2:	0002      	movs	r2, r0
   20da4:	4b0e      	ldr	r3, [pc, #56]	; (20de0 <delay_init+0x48>)
   20da6:	601a      	str	r2, [r3, #0]
   20da8:	4b0d      	ldr	r3, [pc, #52]	; (20de0 <delay_init+0x48>)
   20daa:	6818      	ldr	r0, [r3, #0]
   20dac:	4b0d      	ldr	r3, [pc, #52]	; (20de4 <delay_init+0x4c>)
   20dae:	22fa      	movs	r2, #250	; 0xfa
   20db0:	0091      	lsls	r1, r2, #2
   20db2:	4798      	blx	r3
   20db4:	0003      	movs	r3, r0
   20db6:	001a      	movs	r2, r3
   20db8:	4b09      	ldr	r3, [pc, #36]	; (20de0 <delay_init+0x48>)
   20dba:	601a      	str	r2, [r3, #0]
   20dbc:	4b08      	ldr	r3, [pc, #32]	; (20de0 <delay_init+0x48>)
   20dbe:	6818      	ldr	r0, [r3, #0]
   20dc0:	4b08      	ldr	r3, [pc, #32]	; (20de4 <delay_init+0x4c>)
   20dc2:	22fa      	movs	r2, #250	; 0xfa
   20dc4:	0091      	lsls	r1, r2, #2
   20dc6:	4798      	blx	r3
   20dc8:	0003      	movs	r3, r0
   20dca:	001a      	movs	r2, r3
   20dcc:	4b06      	ldr	r3, [pc, #24]	; (20de8 <delay_init+0x50>)
   20dce:	601a      	str	r2, [r3, #0]
   20dd0:	4b06      	ldr	r3, [pc, #24]	; (20dec <delay_init+0x54>)
   20dd2:	2205      	movs	r2, #5
   20dd4:	601a      	str	r2, [r3, #0]
   20dd6:	46c0      	nop			; (mov r8, r8)
   20dd8:	46bd      	mov	sp, r7
   20dda:	bd80      	pop	{r7, pc}
   20ddc:	0002aa99 	.word	0x0002aa99
   20de0:	20000110 	.word	0x20000110
   20de4:	0003372d 	.word	0x0003372d
   20de8:	20000114 	.word	0x20000114
   20dec:	e000e010 	.word	0xe000e010

00020df0 <delay_cycles_ms>:
   20df0:	b580      	push	{r7, lr}
   20df2:	b082      	sub	sp, #8
   20df4:	af00      	add	r7, sp, #0
   20df6:	6078      	str	r0, [r7, #4]
   20df8:	e004      	b.n	20e04 <delay_cycles_ms+0x14>
   20dfa:	4b07      	ldr	r3, [pc, #28]	; (20e18 <delay_cycles_ms+0x28>)
   20dfc:	681b      	ldr	r3, [r3, #0]
   20dfe:	0018      	movs	r0, r3
   20e00:	4b06      	ldr	r3, [pc, #24]	; (20e1c <delay_cycles_ms+0x2c>)
   20e02:	4798      	blx	r3
   20e04:	687b      	ldr	r3, [r7, #4]
   20e06:	1e5a      	subs	r2, r3, #1
   20e08:	607a      	str	r2, [r7, #4]
   20e0a:	2b00      	cmp	r3, #0
   20e0c:	d1f5      	bne.n	20dfa <delay_cycles_ms+0xa>
   20e0e:	46c0      	nop			; (mov r8, r8)
   20e10:	46bd      	mov	sp, r7
   20e12:	b002      	add	sp, #8
   20e14:	bd80      	pop	{r7, pc}
   20e16:	46c0      	nop			; (mov r8, r8)
   20e18:	20000110 	.word	0x20000110
   20e1c:	00020d65 	.word	0x00020d65

00020e20 <system_pinmux_get_group_from_gpio_pin>:
{
   20e20:	b580      	push	{r7, lr}
   20e22:	b084      	sub	sp, #16
   20e24:	af00      	add	r7, sp, #0
   20e26:	0002      	movs	r2, r0
   20e28:	1dfb      	adds	r3, r7, #7
   20e2a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   20e2c:	230f      	movs	r3, #15
   20e2e:	18fb      	adds	r3, r7, r3
   20e30:	1dfa      	adds	r2, r7, #7
   20e32:	7812      	ldrb	r2, [r2, #0]
   20e34:	09d2      	lsrs	r2, r2, #7
   20e36:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   20e38:	230e      	movs	r3, #14
   20e3a:	18fb      	adds	r3, r7, r3
   20e3c:	1dfa      	adds	r2, r7, #7
   20e3e:	7812      	ldrb	r2, [r2, #0]
   20e40:	0952      	lsrs	r2, r2, #5
   20e42:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   20e44:	4b0d      	ldr	r3, [pc, #52]	; (20e7c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   20e46:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   20e48:	230f      	movs	r3, #15
   20e4a:	18fb      	adds	r3, r7, r3
   20e4c:	781b      	ldrb	r3, [r3, #0]
   20e4e:	2b00      	cmp	r3, #0
   20e50:	d10f      	bne.n	20e72 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   20e52:	230f      	movs	r3, #15
   20e54:	18fb      	adds	r3, r7, r3
   20e56:	781b      	ldrb	r3, [r3, #0]
   20e58:	009b      	lsls	r3, r3, #2
   20e5a:	2210      	movs	r2, #16
   20e5c:	4694      	mov	ip, r2
   20e5e:	44bc      	add	ip, r7
   20e60:	4463      	add	r3, ip
   20e62:	3b08      	subs	r3, #8
   20e64:	681a      	ldr	r2, [r3, #0]
   20e66:	230e      	movs	r3, #14
   20e68:	18fb      	adds	r3, r7, r3
   20e6a:	781b      	ldrb	r3, [r3, #0]
   20e6c:	01db      	lsls	r3, r3, #7
   20e6e:	18d3      	adds	r3, r2, r3
   20e70:	e000      	b.n	20e74 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   20e72:	2300      	movs	r3, #0
}
   20e74:	0018      	movs	r0, r3
   20e76:	46bd      	mov	sp, r7
   20e78:	b004      	add	sp, #16
   20e7a:	bd80      	pop	{r7, pc}
   20e7c:	41004400 	.word	0x41004400

00020e80 <system_interrupt_enable_global>:
{
   20e80:	b580      	push	{r7, lr}
   20e82:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   20e84:	4b04      	ldr	r3, [pc, #16]	; (20e98 <system_interrupt_enable_global+0x18>)
   20e86:	2201      	movs	r2, #1
   20e88:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   20e8a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   20e8e:	b662      	cpsie	i
}
   20e90:	46c0      	nop			; (mov r8, r8)
   20e92:	46bd      	mov	sp, r7
   20e94:	bd80      	pop	{r7, pc}
   20e96:	46c0      	nop			; (mov r8, r8)
   20e98:	2000011a 	.word	0x2000011a

00020e9c <port_get_group_from_gpio_pin>:
{
   20e9c:	b580      	push	{r7, lr}
   20e9e:	b082      	sub	sp, #8
   20ea0:	af00      	add	r7, sp, #0
   20ea2:	0002      	movs	r2, r0
   20ea4:	1dfb      	adds	r3, r7, #7
   20ea6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   20ea8:	1dfb      	adds	r3, r7, #7
   20eaa:	781b      	ldrb	r3, [r3, #0]
   20eac:	0018      	movs	r0, r3
   20eae:	4b03      	ldr	r3, [pc, #12]	; (20ebc <port_get_group_from_gpio_pin+0x20>)
   20eb0:	4798      	blx	r3
   20eb2:	0003      	movs	r3, r0
}
   20eb4:	0018      	movs	r0, r3
   20eb6:	46bd      	mov	sp, r7
   20eb8:	b002      	add	sp, #8
   20eba:	bd80      	pop	{r7, pc}
   20ebc:	00020e21 	.word	0x00020e21

00020ec0 <port_get_config_defaults>:
{
   20ec0:	b580      	push	{r7, lr}
   20ec2:	b082      	sub	sp, #8
   20ec4:	af00      	add	r7, sp, #0
   20ec6:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   20ec8:	687b      	ldr	r3, [r7, #4]
   20eca:	2200      	movs	r2, #0
   20ecc:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   20ece:	687b      	ldr	r3, [r7, #4]
   20ed0:	2201      	movs	r2, #1
   20ed2:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   20ed4:	687b      	ldr	r3, [r7, #4]
   20ed6:	2200      	movs	r2, #0
   20ed8:	709a      	strb	r2, [r3, #2]
}
   20eda:	46c0      	nop			; (mov r8, r8)
   20edc:	46bd      	mov	sp, r7
   20ede:	b002      	add	sp, #8
   20ee0:	bd80      	pop	{r7, pc}
	...

00020ee4 <port_pin_set_output_level>:
{
   20ee4:	b580      	push	{r7, lr}
   20ee6:	b084      	sub	sp, #16
   20ee8:	af00      	add	r7, sp, #0
   20eea:	0002      	movs	r2, r0
   20eec:	1dfb      	adds	r3, r7, #7
   20eee:	701a      	strb	r2, [r3, #0]
   20ef0:	1dbb      	adds	r3, r7, #6
   20ef2:	1c0a      	adds	r2, r1, #0
   20ef4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   20ef6:	1dfb      	adds	r3, r7, #7
   20ef8:	781b      	ldrb	r3, [r3, #0]
   20efa:	0018      	movs	r0, r3
   20efc:	4b0d      	ldr	r3, [pc, #52]	; (20f34 <port_pin_set_output_level+0x50>)
   20efe:	4798      	blx	r3
   20f00:	0003      	movs	r3, r0
   20f02:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   20f04:	1dfb      	adds	r3, r7, #7
   20f06:	781b      	ldrb	r3, [r3, #0]
   20f08:	221f      	movs	r2, #31
   20f0a:	4013      	ands	r3, r2
   20f0c:	2201      	movs	r2, #1
   20f0e:	409a      	lsls	r2, r3
   20f10:	0013      	movs	r3, r2
   20f12:	60bb      	str	r3, [r7, #8]
	if (level) {
   20f14:	1dbb      	adds	r3, r7, #6
   20f16:	781b      	ldrb	r3, [r3, #0]
   20f18:	2b00      	cmp	r3, #0
   20f1a:	d003      	beq.n	20f24 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   20f1c:	68fb      	ldr	r3, [r7, #12]
   20f1e:	68ba      	ldr	r2, [r7, #8]
   20f20:	619a      	str	r2, [r3, #24]
}
   20f22:	e002      	b.n	20f2a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   20f24:	68fb      	ldr	r3, [r7, #12]
   20f26:	68ba      	ldr	r2, [r7, #8]
   20f28:	615a      	str	r2, [r3, #20]
}
   20f2a:	46c0      	nop			; (mov r8, r8)
   20f2c:	46bd      	mov	sp, r7
   20f2e:	b004      	add	sp, #16
   20f30:	bd80      	pop	{r7, pc}
   20f32:	46c0      	nop			; (mov r8, r8)
   20f34:	00020e9d 	.word	0x00020e9d

00020f38 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
   20f38:	b580      	push	{r7, lr}
   20f3a:	af00      	add	r7, sp, #0
	if (gpfIsr) {
   20f3c:	4b04      	ldr	r3, [pc, #16]	; (20f50 <chip_isr+0x18>)
   20f3e:	681b      	ldr	r3, [r3, #0]
   20f40:	2b00      	cmp	r3, #0
   20f42:	d002      	beq.n	20f4a <chip_isr+0x12>
		gpfIsr();
   20f44:	4b02      	ldr	r3, [pc, #8]	; (20f50 <chip_isr+0x18>)
   20f46:	681b      	ldr	r3, [r3, #0]
   20f48:	4798      	blx	r3
	}
}
   20f4a:	46c0      	nop			; (mov r8, r8)
   20f4c:	46bd      	mov	sp, r7
   20f4e:	bd80      	pop	{r7, pc}
   20f50:	20003edc 	.word	0x20003edc

00020f54 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
   20f54:	b580      	push	{r7, lr}
   20f56:	b082      	sub	sp, #8
   20f58:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
   20f5a:	1d3b      	adds	r3, r7, #4
   20f5c:	0018      	movs	r0, r3
   20f5e:	4b10      	ldr	r3, [pc, #64]	; (20fa0 <init_chip_pins+0x4c>)
   20f60:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   20f62:	1d3b      	adds	r3, r7, #4
   20f64:	2201      	movs	r2, #1
   20f66:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
   20f68:	1d3b      	adds	r3, r7, #4
   20f6a:	0019      	movs	r1, r3
   20f6c:	201b      	movs	r0, #27
   20f6e:	4b0d      	ldr	r3, [pc, #52]	; (20fa4 <init_chip_pins+0x50>)
   20f70:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
   20f72:	1d3b      	adds	r3, r7, #4
   20f74:	0019      	movs	r1, r3
   20f76:	201c      	movs	r0, #28
   20f78:	4b0a      	ldr	r3, [pc, #40]	; (20fa4 <init_chip_pins+0x50>)
   20f7a:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
   20f7c:	1d3b      	adds	r3, r7, #4
   20f7e:	0019      	movs	r1, r3
   20f80:	2028      	movs	r0, #40	; 0x28
   20f82:	4b08      	ldr	r3, [pc, #32]	; (20fa4 <init_chip_pins+0x50>)
   20f84:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   20f86:	2100      	movs	r1, #0
   20f88:	201c      	movs	r0, #28
   20f8a:	4b07      	ldr	r3, [pc, #28]	; (20fa8 <init_chip_pins+0x54>)
   20f8c:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   20f8e:	2100      	movs	r1, #0
   20f90:	201b      	movs	r0, #27
   20f92:	4b05      	ldr	r3, [pc, #20]	; (20fa8 <init_chip_pins+0x54>)
   20f94:	4798      	blx	r3
}
   20f96:	46c0      	nop			; (mov r8, r8)
   20f98:	46bd      	mov	sp, r7
   20f9a:	b002      	add	sp, #8
   20f9c:	bd80      	pop	{r7, pc}
   20f9e:	46c0      	nop			; (mov r8, r8)
   20fa0:	00020ec1 	.word	0x00020ec1
   20fa4:	000276e1 	.word	0x000276e1
   20fa8:	00020ee5 	.word	0x00020ee5

00020fac <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
   20fac:	b580      	push	{r7, lr}
   20fae:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
   20fb0:	4b0b      	ldr	r3, [pc, #44]	; (20fe0 <nm_bsp_init+0x34>)
   20fb2:	2200      	movs	r2, #0
   20fb4:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
   20fb6:	4b0b      	ldr	r3, [pc, #44]	; (20fe4 <nm_bsp_init+0x38>)
   20fb8:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
   20fba:	4b0b      	ldr	r3, [pc, #44]	; (20fe8 <nm_bsp_init+0x3c>)
   20fbc:	681b      	ldr	r3, [r3, #0]
   20fbe:	2201      	movs	r2, #1
   20fc0:	4013      	ands	r3, r2
   20fc2:	d004      	beq.n	20fce <nm_bsp_init+0x22>
   20fc4:	4b08      	ldr	r3, [pc, #32]	; (20fe8 <nm_bsp_init+0x3c>)
   20fc6:	681b      	ldr	r3, [r3, #0]
   20fc8:	2202      	movs	r2, #2
   20fca:	4013      	ands	r3, r2
   20fcc:	d101      	bne.n	20fd2 <nm_bsp_init+0x26>
	    delay_init();
   20fce:	4b07      	ldr	r3, [pc, #28]	; (20fec <nm_bsp_init+0x40>)
   20fd0:	4798      	blx	r3
    }

	system_interrupt_enable_global();
   20fd2:	4b07      	ldr	r3, [pc, #28]	; (20ff0 <nm_bsp_init+0x44>)
   20fd4:	4798      	blx	r3

	return M2M_SUCCESS;
   20fd6:	2300      	movs	r3, #0
}
   20fd8:	0018      	movs	r0, r3
   20fda:	46bd      	mov	sp, r7
   20fdc:	bd80      	pop	{r7, pc}
   20fde:	46c0      	nop			; (mov r8, r8)
   20fe0:	20003edc 	.word	0x20003edc
   20fe4:	00020f55 	.word	0x00020f55
   20fe8:	e000e010 	.word	0xe000e010
   20fec:	00020d99 	.word	0x00020d99
   20ff0:	00020e81 	.word	0x00020e81

00020ff4 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
   20ff4:	b580      	push	{r7, lr}
   20ff6:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   20ff8:	2100      	movs	r1, #0
   20ffa:	201c      	movs	r0, #28
   20ffc:	4b0b      	ldr	r3, [pc, #44]	; (2102c <nm_bsp_reset+0x38>)
   20ffe:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   21000:	2100      	movs	r1, #0
   21002:	201b      	movs	r0, #27
   21004:	4b09      	ldr	r3, [pc, #36]	; (2102c <nm_bsp_reset+0x38>)
   21006:	4798      	blx	r3
	nm_bsp_sleep(1);
   21008:	2001      	movs	r0, #1
   2100a:	4b09      	ldr	r3, [pc, #36]	; (21030 <nm_bsp_reset+0x3c>)
   2100c:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
   2100e:	2101      	movs	r1, #1
   21010:	201c      	movs	r0, #28
   21012:	4b06      	ldr	r3, [pc, #24]	; (2102c <nm_bsp_reset+0x38>)
   21014:	4798      	blx	r3
	nm_bsp_sleep(10);
   21016:	200a      	movs	r0, #10
   21018:	4b05      	ldr	r3, [pc, #20]	; (21030 <nm_bsp_reset+0x3c>)
   2101a:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
   2101c:	2101      	movs	r1, #1
   2101e:	201b      	movs	r0, #27
   21020:	4b02      	ldr	r3, [pc, #8]	; (2102c <nm_bsp_reset+0x38>)
   21022:	4798      	blx	r3
}
   21024:	46c0      	nop			; (mov r8, r8)
   21026:	46bd      	mov	sp, r7
   21028:	bd80      	pop	{r7, pc}
   2102a:	46c0      	nop			; (mov r8, r8)
   2102c:	00020ee5 	.word	0x00020ee5
   21030:	00021035 	.word	0x00021035

00021034 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
   21034:	b580      	push	{r7, lr}
   21036:	b082      	sub	sp, #8
   21038:	af00      	add	r7, sp, #0
   2103a:	6078      	str	r0, [r7, #4]
#ifdef __FREERTOS__
	vTaskDelay(u32TimeMsec);
   2103c:	687b      	ldr	r3, [r7, #4]
   2103e:	0018      	movs	r0, r3
   21040:	4b02      	ldr	r3, [pc, #8]	; (2104c <nm_bsp_sleep+0x18>)
   21042:	4798      	blx	r3
	while (u32TimeMsec--) {
		delay_ms(1);
	}
	
#endif
}
   21044:	46c0      	nop			; (mov r8, r8)
   21046:	46bd      	mov	sp, r7
   21048:	b002      	add	sp, #8
   2104a:	bd80      	pop	{r7, pc}
   2104c:	0001cde5 	.word	0x0001cde5

00021050 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
   21050:	b580      	push	{r7, lr}
   21052:	b086      	sub	sp, #24
   21054:	af00      	add	r7, sp, #0
   21056:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
   21058:	4b15      	ldr	r3, [pc, #84]	; (210b0 <nm_bsp_register_isr+0x60>)
   2105a:	687a      	ldr	r2, [r7, #4]
   2105c:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
   2105e:	230c      	movs	r3, #12
   21060:	18fb      	adds	r3, r7, r3
   21062:	0018      	movs	r0, r3
   21064:	4b13      	ldr	r3, [pc, #76]	; (210b4 <nm_bsp_register_isr+0x64>)
   21066:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
   21068:	230c      	movs	r3, #12
   2106a:	18fb      	adds	r3, r7, r3
   2106c:	2229      	movs	r2, #41	; 0x29
   2106e:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
   21070:	230c      	movs	r3, #12
   21072:	18fb      	adds	r3, r7, r3
   21074:	2200      	movs	r2, #0
   21076:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   21078:	230c      	movs	r3, #12
   2107a:	18fb      	adds	r3, r7, r3
   2107c:	2201      	movs	r2, #1
   2107e:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   21080:	230c      	movs	r3, #12
   21082:	18fb      	adds	r3, r7, r3
   21084:	2202      	movs	r2, #2
   21086:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
   21088:	230c      	movs	r3, #12
   2108a:	18fb      	adds	r3, r7, r3
   2108c:	0019      	movs	r1, r3
   2108e:	2009      	movs	r0, #9
   21090:	4b09      	ldr	r3, [pc, #36]	; (210b8 <nm_bsp_register_isr+0x68>)
   21092:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
   21094:	4b09      	ldr	r3, [pc, #36]	; (210bc <nm_bsp_register_isr+0x6c>)
   21096:	2200      	movs	r2, #0
   21098:	2109      	movs	r1, #9
   2109a:	0018      	movs	r0, r3
   2109c:	4b08      	ldr	r3, [pc, #32]	; (210c0 <nm_bsp_register_isr+0x70>)
   2109e:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   210a0:	2100      	movs	r1, #0
   210a2:	2009      	movs	r0, #9
   210a4:	4b07      	ldr	r3, [pc, #28]	; (210c4 <nm_bsp_register_isr+0x74>)
   210a6:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
   210a8:	46c0      	nop			; (mov r8, r8)
   210aa:	46bd      	mov	sp, r7
   210ac:	b006      	add	sp, #24
   210ae:	bd80      	pop	{r7, pc}
   210b0:	20003edc 	.word	0x20003edc
   210b4:	00027589 	.word	0x00027589
   210b8:	000275bd 	.word	0x000275bd
   210bc:	00020f39 	.word	0x00020f39
   210c0:	00027189 	.word	0x00027189
   210c4:	000271ed 	.word	0x000271ed

000210c8 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
   210c8:	b580      	push	{r7, lr}
   210ca:	b082      	sub	sp, #8
   210cc:	af00      	add	r7, sp, #0
   210ce:	0002      	movs	r2, r0
   210d0:	1dfb      	adds	r3, r7, #7
   210d2:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
   210d4:	1dfb      	adds	r3, r7, #7
   210d6:	781b      	ldrb	r3, [r3, #0]
   210d8:	2b00      	cmp	r3, #0
   210da:	d004      	beq.n	210e6 <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   210dc:	2100      	movs	r1, #0
   210de:	2009      	movs	r0, #9
   210e0:	4b05      	ldr	r3, [pc, #20]	; (210f8 <nm_bsp_interrupt_ctrl+0x30>)
   210e2:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
   210e4:	e003      	b.n	210ee <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
   210e6:	2100      	movs	r1, #0
   210e8:	2009      	movs	r0, #9
   210ea:	4b04      	ldr	r3, [pc, #16]	; (210fc <nm_bsp_interrupt_ctrl+0x34>)
   210ec:	4798      	blx	r3
}
   210ee:	46c0      	nop			; (mov r8, r8)
   210f0:	46bd      	mov	sp, r7
   210f2:	b002      	add	sp, #8
   210f4:	bd80      	pop	{r7, pc}
   210f6:	46c0      	nop			; (mov r8, r8)
   210f8:	000271ed 	.word	0x000271ed
   210fc:	00027235 	.word	0x00027235

00021100 <system_pinmux_get_group_from_gpio_pin>:
{
   21100:	b580      	push	{r7, lr}
   21102:	b084      	sub	sp, #16
   21104:	af00      	add	r7, sp, #0
   21106:	0002      	movs	r2, r0
   21108:	1dfb      	adds	r3, r7, #7
   2110a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   2110c:	230f      	movs	r3, #15
   2110e:	18fb      	adds	r3, r7, r3
   21110:	1dfa      	adds	r2, r7, #7
   21112:	7812      	ldrb	r2, [r2, #0]
   21114:	09d2      	lsrs	r2, r2, #7
   21116:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   21118:	230e      	movs	r3, #14
   2111a:	18fb      	adds	r3, r7, r3
   2111c:	1dfa      	adds	r2, r7, #7
   2111e:	7812      	ldrb	r2, [r2, #0]
   21120:	0952      	lsrs	r2, r2, #5
   21122:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   21124:	4b0d      	ldr	r3, [pc, #52]	; (2115c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   21126:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   21128:	230f      	movs	r3, #15
   2112a:	18fb      	adds	r3, r7, r3
   2112c:	781b      	ldrb	r3, [r3, #0]
   2112e:	2b00      	cmp	r3, #0
   21130:	d10f      	bne.n	21152 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   21132:	230f      	movs	r3, #15
   21134:	18fb      	adds	r3, r7, r3
   21136:	781b      	ldrb	r3, [r3, #0]
   21138:	009b      	lsls	r3, r3, #2
   2113a:	2210      	movs	r2, #16
   2113c:	4694      	mov	ip, r2
   2113e:	44bc      	add	ip, r7
   21140:	4463      	add	r3, ip
   21142:	3b08      	subs	r3, #8
   21144:	681a      	ldr	r2, [r3, #0]
   21146:	230e      	movs	r3, #14
   21148:	18fb      	adds	r3, r7, r3
   2114a:	781b      	ldrb	r3, [r3, #0]
   2114c:	01db      	lsls	r3, r3, #7
   2114e:	18d3      	adds	r3, r2, r3
   21150:	e000      	b.n	21154 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   21152:	2300      	movs	r3, #0
}
   21154:	0018      	movs	r0, r3
   21156:	46bd      	mov	sp, r7
   21158:	b004      	add	sp, #16
   2115a:	bd80      	pop	{r7, pc}
   2115c:	41004400 	.word	0x41004400

00021160 <system_interrupt_enable>:
{
   21160:	b580      	push	{r7, lr}
   21162:	b082      	sub	sp, #8
   21164:	af00      	add	r7, sp, #0
   21166:	0002      	movs	r2, r0
   21168:	1dfb      	adds	r3, r7, #7
   2116a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2116c:	4b06      	ldr	r3, [pc, #24]	; (21188 <system_interrupt_enable+0x28>)
   2116e:	1dfa      	adds	r2, r7, #7
   21170:	7812      	ldrb	r2, [r2, #0]
   21172:	0011      	movs	r1, r2
   21174:	221f      	movs	r2, #31
   21176:	400a      	ands	r2, r1
   21178:	2101      	movs	r1, #1
   2117a:	4091      	lsls	r1, r2
   2117c:	000a      	movs	r2, r1
   2117e:	601a      	str	r2, [r3, #0]
}
   21180:	46c0      	nop			; (mov r8, r8)
   21182:	46bd      	mov	sp, r7
   21184:	b002      	add	sp, #8
   21186:	bd80      	pop	{r7, pc}
   21188:	e000e100 	.word	0xe000e100

0002118c <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
   2118c:	b580      	push	{r7, lr}
   2118e:	b082      	sub	sp, #8
   21190:	af00      	add	r7, sp, #0
   21192:	0002      	movs	r2, r0
   21194:	1dfb      	adds	r3, r7, #7
   21196:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   21198:	4a07      	ldr	r2, [pc, #28]	; (211b8 <system_interrupt_disable+0x2c>)
   2119a:	1dfb      	adds	r3, r7, #7
   2119c:	781b      	ldrb	r3, [r3, #0]
   2119e:	0019      	movs	r1, r3
   211a0:	231f      	movs	r3, #31
   211a2:	400b      	ands	r3, r1
   211a4:	2101      	movs	r1, #1
   211a6:	4099      	lsls	r1, r3
   211a8:	000b      	movs	r3, r1
   211aa:	0019      	movs	r1, r3
   211ac:	2380      	movs	r3, #128	; 0x80
   211ae:	50d1      	str	r1, [r2, r3]
}
   211b0:	46c0      	nop			; (mov r8, r8)
   211b2:	46bd      	mov	sp, r7
   211b4:	b002      	add	sp, #8
   211b6:	bd80      	pop	{r7, pc}
   211b8:	e000e100 	.word	0xe000e100

000211bc <port_get_group_from_gpio_pin>:
{
   211bc:	b580      	push	{r7, lr}
   211be:	b082      	sub	sp, #8
   211c0:	af00      	add	r7, sp, #0
   211c2:	0002      	movs	r2, r0
   211c4:	1dfb      	adds	r3, r7, #7
   211c6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   211c8:	1dfb      	adds	r3, r7, #7
   211ca:	781b      	ldrb	r3, [r3, #0]
   211cc:	0018      	movs	r0, r3
   211ce:	4b03      	ldr	r3, [pc, #12]	; (211dc <port_get_group_from_gpio_pin+0x20>)
   211d0:	4798      	blx	r3
   211d2:	0003      	movs	r3, r0
}
   211d4:	0018      	movs	r0, r3
   211d6:	46bd      	mov	sp, r7
   211d8:	b002      	add	sp, #8
   211da:	bd80      	pop	{r7, pc}
   211dc:	00021101 	.word	0x00021101

000211e0 <port_get_config_defaults>:
{
   211e0:	b580      	push	{r7, lr}
   211e2:	b082      	sub	sp, #8
   211e4:	af00      	add	r7, sp, #0
   211e6:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   211e8:	687b      	ldr	r3, [r7, #4]
   211ea:	2200      	movs	r2, #0
   211ec:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   211ee:	687b      	ldr	r3, [r7, #4]
   211f0:	2201      	movs	r2, #1
   211f2:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   211f4:	687b      	ldr	r3, [r7, #4]
   211f6:	2200      	movs	r2, #0
   211f8:	709a      	strb	r2, [r3, #2]
}
   211fa:	46c0      	nop			; (mov r8, r8)
   211fc:	46bd      	mov	sp, r7
   211fe:	b002      	add	sp, #8
   21200:	bd80      	pop	{r7, pc}
	...

00021204 <port_pin_set_output_level>:
{
   21204:	b580      	push	{r7, lr}
   21206:	b084      	sub	sp, #16
   21208:	af00      	add	r7, sp, #0
   2120a:	0002      	movs	r2, r0
   2120c:	1dfb      	adds	r3, r7, #7
   2120e:	701a      	strb	r2, [r3, #0]
   21210:	1dbb      	adds	r3, r7, #6
   21212:	1c0a      	adds	r2, r1, #0
   21214:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   21216:	1dfb      	adds	r3, r7, #7
   21218:	781b      	ldrb	r3, [r3, #0]
   2121a:	0018      	movs	r0, r3
   2121c:	4b0d      	ldr	r3, [pc, #52]	; (21254 <port_pin_set_output_level+0x50>)
   2121e:	4798      	blx	r3
   21220:	0003      	movs	r3, r0
   21222:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   21224:	1dfb      	adds	r3, r7, #7
   21226:	781b      	ldrb	r3, [r3, #0]
   21228:	221f      	movs	r2, #31
   2122a:	4013      	ands	r3, r2
   2122c:	2201      	movs	r2, #1
   2122e:	409a      	lsls	r2, r3
   21230:	0013      	movs	r3, r2
   21232:	60bb      	str	r3, [r7, #8]
	if (level) {
   21234:	1dbb      	adds	r3, r7, #6
   21236:	781b      	ldrb	r3, [r3, #0]
   21238:	2b00      	cmp	r3, #0
   2123a:	d003      	beq.n	21244 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   2123c:	68fb      	ldr	r3, [r7, #12]
   2123e:	68ba      	ldr	r2, [r7, #8]
   21240:	619a      	str	r2, [r3, #24]
}
   21242:	e002      	b.n	2124a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   21244:	68fb      	ldr	r3, [r7, #12]
   21246:	68ba      	ldr	r2, [r7, #8]
   21248:	615a      	str	r2, [r3, #20]
}
   2124a:	46c0      	nop			; (mov r8, r8)
   2124c:	46bd      	mov	sp, r7
   2124e:	b004      	add	sp, #16
   21250:	bd80      	pop	{r7, pc}
   21252:	46c0      	nop			; (mov r8, r8)
   21254:	000211bd 	.word	0x000211bd

00021258 <spi_is_syncing>:
{
   21258:	b580      	push	{r7, lr}
   2125a:	b084      	sub	sp, #16
   2125c:	af00      	add	r7, sp, #0
   2125e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   21260:	687b      	ldr	r3, [r7, #4]
   21262:	681b      	ldr	r3, [r3, #0]
   21264:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   21266:	68fb      	ldr	r3, [r7, #12]
   21268:	69db      	ldr	r3, [r3, #28]
   2126a:	1e5a      	subs	r2, r3, #1
   2126c:	4193      	sbcs	r3, r2
   2126e:	b2db      	uxtb	r3, r3
}
   21270:	0018      	movs	r0, r3
   21272:	46bd      	mov	sp, r7
   21274:	b004      	add	sp, #16
   21276:	bd80      	pop	{r7, pc}

00021278 <spi_get_config_defaults>:
{
   21278:	b580      	push	{r7, lr}
   2127a:	b082      	sub	sp, #8
   2127c:	af00      	add	r7, sp, #0
   2127e:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
   21280:	687b      	ldr	r3, [r7, #4]
   21282:	2201      	movs	r2, #1
   21284:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   21286:	687b      	ldr	r3, [r7, #4]
   21288:	2200      	movs	r2, #0
   2128a:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   2128c:	687b      	ldr	r3, [r7, #4]
   2128e:	2200      	movs	r2, #0
   21290:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   21292:	687b      	ldr	r3, [r7, #4]
   21294:	22c0      	movs	r2, #192	; 0xc0
   21296:	0392      	lsls	r2, r2, #14
   21298:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   2129a:	687b      	ldr	r3, [r7, #4]
   2129c:	2200      	movs	r2, #0
   2129e:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   212a0:	687b      	ldr	r3, [r7, #4]
   212a2:	2200      	movs	r2, #0
   212a4:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   212a6:	687b      	ldr	r3, [r7, #4]
   212a8:	2201      	movs	r2, #1
   212aa:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
   212ac:	687b      	ldr	r3, [r7, #4]
   212ae:	2201      	movs	r2, #1
   212b0:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
   212b2:	687b      	ldr	r3, [r7, #4]
   212b4:	2200      	movs	r2, #0
   212b6:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
   212b8:	687b      	ldr	r3, [r7, #4]
   212ba:	2224      	movs	r2, #36	; 0x24
   212bc:	2100      	movs	r1, #0
   212be:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   212c0:	687b      	ldr	r3, [r7, #4]
   212c2:	3318      	adds	r3, #24
   212c4:	220c      	movs	r2, #12
   212c6:	2100      	movs	r1, #0
   212c8:	0018      	movs	r0, r3
   212ca:	4b0a      	ldr	r3, [pc, #40]	; (212f4 <spi_get_config_defaults+0x7c>)
   212cc:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
   212ce:	687b      	ldr	r3, [r7, #4]
   212d0:	4a09      	ldr	r2, [pc, #36]	; (212f8 <spi_get_config_defaults+0x80>)
   212d2:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
   212d4:	687b      	ldr	r3, [r7, #4]
   212d6:	2200      	movs	r2, #0
   212d8:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   212da:	687b      	ldr	r3, [r7, #4]
   212dc:	2200      	movs	r2, #0
   212de:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   212e0:	687b      	ldr	r3, [r7, #4]
   212e2:	2200      	movs	r2, #0
   212e4:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   212e6:	687b      	ldr	r3, [r7, #4]
   212e8:	2200      	movs	r2, #0
   212ea:	635a      	str	r2, [r3, #52]	; 0x34
};
   212ec:	46c0      	nop			; (mov r8, r8)
   212ee:	46bd      	mov	sp, r7
   212f0:	b002      	add	sp, #8
   212f2:	bd80      	pop	{r7, pc}
   212f4:	00035707 	.word	0x00035707
   212f8:	000186a0 	.word	0x000186a0

000212fc <spi_slave_inst_get_config_defaults>:
{
   212fc:	b580      	push	{r7, lr}
   212fe:	b082      	sub	sp, #8
   21300:	af00      	add	r7, sp, #0
   21302:	6078      	str	r0, [r7, #4]
	config->ss_pin          = 10;
   21304:	687b      	ldr	r3, [r7, #4]
   21306:	220a      	movs	r2, #10
   21308:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   2130a:	687b      	ldr	r3, [r7, #4]
   2130c:	2200      	movs	r2, #0
   2130e:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   21310:	687b      	ldr	r3, [r7, #4]
   21312:	2200      	movs	r2, #0
   21314:	709a      	strb	r2, [r3, #2]
}
   21316:	46c0      	nop			; (mov r8, r8)
   21318:	46bd      	mov	sp, r7
   2131a:	b002      	add	sp, #8
   2131c:	bd80      	pop	{r7, pc}
	...

00021320 <spi_attach_slave>:
{
   21320:	b580      	push	{r7, lr}
   21322:	b084      	sub	sp, #16
   21324:	af00      	add	r7, sp, #0
   21326:	6078      	str	r0, [r7, #4]
   21328:	6039      	str	r1, [r7, #0]
	slave->ss_pin          = config->ss_pin;
   2132a:	683b      	ldr	r3, [r7, #0]
   2132c:	781a      	ldrb	r2, [r3, #0]
   2132e:	687b      	ldr	r3, [r7, #4]
   21330:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   21332:	683b      	ldr	r3, [r7, #0]
   21334:	785a      	ldrb	r2, [r3, #1]
   21336:	687b      	ldr	r3, [r7, #4]
   21338:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   2133a:	683b      	ldr	r3, [r7, #0]
   2133c:	789a      	ldrb	r2, [r3, #2]
   2133e:	687b      	ldr	r3, [r7, #4]
   21340:	709a      	strb	r2, [r3, #2]
	port_get_config_defaults(&pin_conf);
   21342:	230c      	movs	r3, #12
   21344:	18fb      	adds	r3, r7, r3
   21346:	0018      	movs	r0, r3
   21348:	4b0b      	ldr	r3, [pc, #44]	; (21378 <spi_attach_slave+0x58>)
   2134a:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   2134c:	230c      	movs	r3, #12
   2134e:	18fb      	adds	r3, r7, r3
   21350:	2201      	movs	r2, #1
   21352:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   21354:	687b      	ldr	r3, [r7, #4]
   21356:	781b      	ldrb	r3, [r3, #0]
   21358:	220c      	movs	r2, #12
   2135a:	18ba      	adds	r2, r7, r2
   2135c:	0011      	movs	r1, r2
   2135e:	0018      	movs	r0, r3
   21360:	4b06      	ldr	r3, [pc, #24]	; (2137c <spi_attach_slave+0x5c>)
   21362:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   21364:	687b      	ldr	r3, [r7, #4]
   21366:	781b      	ldrb	r3, [r3, #0]
   21368:	2101      	movs	r1, #1
   2136a:	0018      	movs	r0, r3
   2136c:	4b04      	ldr	r3, [pc, #16]	; (21380 <spi_attach_slave+0x60>)
   2136e:	4798      	blx	r3
}
   21370:	46c0      	nop			; (mov r8, r8)
   21372:	46bd      	mov	sp, r7
   21374:	b004      	add	sp, #16
   21376:	bd80      	pop	{r7, pc}
   21378:	000211e1 	.word	0x000211e1
   2137c:	000276e1 	.word	0x000276e1
   21380:	00021205 	.word	0x00021205

00021384 <spi_enable>:
{
   21384:	b580      	push	{r7, lr}
   21386:	b084      	sub	sp, #16
   21388:	af00      	add	r7, sp, #0
   2138a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   2138c:	687b      	ldr	r3, [r7, #4]
   2138e:	681b      	ldr	r3, [r3, #0]
   21390:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   21392:	687b      	ldr	r3, [r7, #4]
   21394:	681b      	ldr	r3, [r3, #0]
   21396:	0018      	movs	r0, r3
   21398:	4b0b      	ldr	r3, [pc, #44]	; (213c8 <spi_enable+0x44>)
   2139a:	4798      	blx	r3
   2139c:	0003      	movs	r3, r0
   2139e:	0018      	movs	r0, r3
   213a0:	4b0a      	ldr	r3, [pc, #40]	; (213cc <spi_enable+0x48>)
   213a2:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   213a4:	46c0      	nop			; (mov r8, r8)
   213a6:	687b      	ldr	r3, [r7, #4]
   213a8:	0018      	movs	r0, r3
   213aa:	4b09      	ldr	r3, [pc, #36]	; (213d0 <spi_enable+0x4c>)
   213ac:	4798      	blx	r3
   213ae:	1e03      	subs	r3, r0, #0
   213b0:	d1f9      	bne.n	213a6 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   213b2:	68fb      	ldr	r3, [r7, #12]
   213b4:	681b      	ldr	r3, [r3, #0]
   213b6:	2202      	movs	r2, #2
   213b8:	431a      	orrs	r2, r3
   213ba:	68fb      	ldr	r3, [r7, #12]
   213bc:	601a      	str	r2, [r3, #0]
}
   213be:	46c0      	nop			; (mov r8, r8)
   213c0:	46bd      	mov	sp, r7
   213c2:	b004      	add	sp, #16
   213c4:	bd80      	pop	{r7, pc}
   213c6:	46c0      	nop			; (mov r8, r8)
   213c8:	000283b1 	.word	0x000283b1
   213cc:	00021161 	.word	0x00021161
   213d0:	00021259 	.word	0x00021259

000213d4 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
   213d4:	b580      	push	{r7, lr}
   213d6:	b084      	sub	sp, #16
   213d8:	af00      	add	r7, sp, #0
   213da:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   213dc:	687b      	ldr	r3, [r7, #4]
   213de:	681b      	ldr	r3, [r3, #0]
   213e0:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   213e2:	687b      	ldr	r3, [r7, #4]
   213e4:	681b      	ldr	r3, [r3, #0]
   213e6:	0018      	movs	r0, r3
   213e8:	4b0e      	ldr	r3, [pc, #56]	; (21424 <spi_disable+0x50>)
   213ea:	4798      	blx	r3
   213ec:	0003      	movs	r3, r0
   213ee:	0018      	movs	r0, r3
   213f0:	4b0d      	ldr	r3, [pc, #52]	; (21428 <spi_disable+0x54>)
   213f2:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   213f4:	46c0      	nop			; (mov r8, r8)
   213f6:	687b      	ldr	r3, [r7, #4]
   213f8:	0018      	movs	r0, r3
   213fa:	4b0c      	ldr	r3, [pc, #48]	; (2142c <spi_disable+0x58>)
   213fc:	4798      	blx	r3
   213fe:	1e03      	subs	r3, r0, #0
   21400:	d1f9      	bne.n	213f6 <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   21402:	68fb      	ldr	r3, [r7, #12]
   21404:	228f      	movs	r2, #143	; 0x8f
   21406:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   21408:	68fb      	ldr	r3, [r7, #12]
   2140a:	228f      	movs	r2, #143	; 0x8f
   2140c:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   2140e:	68fb      	ldr	r3, [r7, #12]
   21410:	681b      	ldr	r3, [r3, #0]
   21412:	2202      	movs	r2, #2
   21414:	4393      	bics	r3, r2
   21416:	001a      	movs	r2, r3
   21418:	68fb      	ldr	r3, [r7, #12]
   2141a:	601a      	str	r2, [r3, #0]
}
   2141c:	46c0      	nop			; (mov r8, r8)
   2141e:	46bd      	mov	sp, r7
   21420:	b004      	add	sp, #16
   21422:	bd80      	pop	{r7, pc}
   21424:	000283b1 	.word	0x000283b1
   21428:	0002118d 	.word	0x0002118d
   2142c:	00021259 	.word	0x00021259

00021430 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
   21430:	b580      	push	{r7, lr}
   21432:	b084      	sub	sp, #16
   21434:	af00      	add	r7, sp, #0
   21436:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   21438:	687b      	ldr	r3, [r7, #4]
   2143a:	681b      	ldr	r3, [r3, #0]
   2143c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   2143e:	68fb      	ldr	r3, [r7, #12]
   21440:	7e1b      	ldrb	r3, [r3, #24]
   21442:	b2db      	uxtb	r3, r3
   21444:	001a      	movs	r2, r3
   21446:	2302      	movs	r3, #2
   21448:	4013      	ands	r3, r2
   2144a:	1e5a      	subs	r2, r3, #1
   2144c:	4193      	sbcs	r3, r2
   2144e:	b2db      	uxtb	r3, r3
}
   21450:	0018      	movs	r0, r3
   21452:	46bd      	mov	sp, r7
   21454:	b004      	add	sp, #16
   21456:	bd80      	pop	{r7, pc}

00021458 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
   21458:	b580      	push	{r7, lr}
   2145a:	b084      	sub	sp, #16
   2145c:	af00      	add	r7, sp, #0
   2145e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   21460:	687b      	ldr	r3, [r7, #4]
   21462:	681b      	ldr	r3, [r3, #0]
   21464:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   21466:	68fb      	ldr	r3, [r7, #12]
   21468:	7e1b      	ldrb	r3, [r3, #24]
   2146a:	b2db      	uxtb	r3, r3
   2146c:	001a      	movs	r2, r3
   2146e:	2301      	movs	r3, #1
   21470:	4013      	ands	r3, r2
   21472:	1e5a      	subs	r2, r3, #1
   21474:	4193      	sbcs	r3, r2
   21476:	b2db      	uxtb	r3, r3
}
   21478:	0018      	movs	r0, r3
   2147a:	46bd      	mov	sp, r7
   2147c:	b004      	add	sp, #16
   2147e:	bd80      	pop	{r7, pc}

00021480 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
   21480:	b580      	push	{r7, lr}
   21482:	b084      	sub	sp, #16
   21484:	af00      	add	r7, sp, #0
   21486:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   21488:	687b      	ldr	r3, [r7, #4]
   2148a:	681b      	ldr	r3, [r3, #0]
   2148c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   2148e:	68fb      	ldr	r3, [r7, #12]
   21490:	7e1b      	ldrb	r3, [r3, #24]
   21492:	b2db      	uxtb	r3, r3
   21494:	001a      	movs	r2, r3
   21496:	2304      	movs	r3, #4
   21498:	4013      	ands	r3, r2
   2149a:	1e5a      	subs	r2, r3, #1
   2149c:	4193      	sbcs	r3, r2
   2149e:	b2db      	uxtb	r3, r3
}
   214a0:	0018      	movs	r0, r3
   214a2:	46bd      	mov	sp, r7
   214a4:	b004      	add	sp, #16
   214a6:	bd80      	pop	{r7, pc}

000214a8 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
   214a8:	b580      	push	{r7, lr}
   214aa:	b084      	sub	sp, #16
   214ac:	af00      	add	r7, sp, #0
   214ae:	6078      	str	r0, [r7, #4]
   214b0:	000a      	movs	r2, r1
   214b2:	1cbb      	adds	r3, r7, #2
   214b4:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   214b6:	687b      	ldr	r3, [r7, #4]
   214b8:	681b      	ldr	r3, [r3, #0]
   214ba:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
   214bc:	687b      	ldr	r3, [r7, #4]
   214be:	0018      	movs	r0, r3
   214c0:	4b0a      	ldr	r3, [pc, #40]	; (214ec <spi_write+0x44>)
   214c2:	4798      	blx	r3
   214c4:	0003      	movs	r3, r0
   214c6:	001a      	movs	r2, r3
   214c8:	2301      	movs	r3, #1
   214ca:	4053      	eors	r3, r2
   214cc:	b2db      	uxtb	r3, r3
   214ce:	2b00      	cmp	r3, #0
   214d0:	d001      	beq.n	214d6 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
   214d2:	2305      	movs	r3, #5
   214d4:	e006      	b.n	214e4 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   214d6:	1cbb      	adds	r3, r7, #2
   214d8:	881b      	ldrh	r3, [r3, #0]
   214da:	05db      	lsls	r3, r3, #23
   214dc:	0dda      	lsrs	r2, r3, #23
   214de:	68fb      	ldr	r3, [r7, #12]
   214e0:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
   214e2:	2300      	movs	r3, #0
}
   214e4:	0018      	movs	r0, r3
   214e6:	46bd      	mov	sp, r7
   214e8:	b004      	add	sp, #16
   214ea:	bd80      	pop	{r7, pc}
   214ec:	00021459 	.word	0x00021459

000214f0 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
   214f0:	b580      	push	{r7, lr}
   214f2:	b084      	sub	sp, #16
   214f4:	af00      	add	r7, sp, #0
   214f6:	6078      	str	r0, [r7, #4]
   214f8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   214fa:	687b      	ldr	r3, [r7, #4]
   214fc:	681b      	ldr	r3, [r3, #0]
   214fe:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
   21500:	687b      	ldr	r3, [r7, #4]
   21502:	0018      	movs	r0, r3
   21504:	4b1b      	ldr	r3, [pc, #108]	; (21574 <spi_read+0x84>)
   21506:	4798      	blx	r3
   21508:	0003      	movs	r3, r0
   2150a:	001a      	movs	r2, r3
   2150c:	2301      	movs	r3, #1
   2150e:	4053      	eors	r3, r2
   21510:	b2db      	uxtb	r3, r3
   21512:	2b00      	cmp	r3, #0
   21514:	d001      	beq.n	2151a <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
   21516:	2310      	movs	r3, #16
   21518:	e027      	b.n	2156a <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
   2151a:	230f      	movs	r3, #15
   2151c:	18fb      	adds	r3, r7, r3
   2151e:	2200      	movs	r2, #0
   21520:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   21522:	68bb      	ldr	r3, [r7, #8]
   21524:	8b5b      	ldrh	r3, [r3, #26]
   21526:	b29b      	uxth	r3, r3
   21528:	001a      	movs	r2, r3
   2152a:	2304      	movs	r3, #4
   2152c:	4013      	ands	r3, r2
   2152e:	d006      	beq.n	2153e <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   21530:	230f      	movs	r3, #15
   21532:	18fb      	adds	r3, r7, r3
   21534:	221e      	movs	r2, #30
   21536:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   21538:	68bb      	ldr	r3, [r7, #8]
   2153a:	2204      	movs	r2, #4
   2153c:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   2153e:	687b      	ldr	r3, [r7, #4]
   21540:	799b      	ldrb	r3, [r3, #6]
   21542:	2b01      	cmp	r3, #1
   21544:	d108      	bne.n	21558 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   21546:	68bb      	ldr	r3, [r7, #8]
   21548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2154a:	b29b      	uxth	r3, r3
   2154c:	05db      	lsls	r3, r3, #23
   2154e:	0ddb      	lsrs	r3, r3, #23
   21550:	b29a      	uxth	r2, r3
   21552:	683b      	ldr	r3, [r7, #0]
   21554:	801a      	strh	r2, [r3, #0]
   21556:	e005      	b.n	21564 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   21558:	68bb      	ldr	r3, [r7, #8]
   2155a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2155c:	b2db      	uxtb	r3, r3
   2155e:	b29a      	uxth	r2, r3
   21560:	683b      	ldr	r3, [r7, #0]
   21562:	801a      	strh	r2, [r3, #0]
	}

	return retval;
   21564:	230f      	movs	r3, #15
   21566:	18fb      	adds	r3, r7, r3
   21568:	781b      	ldrb	r3, [r3, #0]
}
   2156a:	0018      	movs	r0, r3
   2156c:	46bd      	mov	sp, r7
   2156e:	b004      	add	sp, #16
   21570:	bd80      	pop	{r7, pc}
   21572:	46c0      	nop			; (mov r8, r8)
   21574:	00021481 	.word	0x00021481

00021578 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
   21578:	b580      	push	{r7, lr}
   2157a:	b086      	sub	sp, #24
   2157c:	af00      	add	r7, sp, #0
   2157e:	60f8      	str	r0, [r7, #12]
   21580:	60b9      	str	r1, [r7, #8]
   21582:	1dbb      	adds	r3, r7, #6
   21584:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0xFF;
   21586:	2313      	movs	r3, #19
   21588:	18fb      	adds	r3, r7, r3
   2158a:	22ff      	movs	r2, #255	; 0xff
   2158c:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
   2158e:	2317      	movs	r3, #23
   21590:	18fb      	adds	r3, r7, r3
   21592:	2200      	movs	r2, #0
   21594:	701a      	strb	r2, [r3, #0]
   21596:	2316      	movs	r3, #22
   21598:	18fb      	adds	r3, r7, r3
   2159a:	2200      	movs	r2, #0
   2159c:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
   2159e:	2314      	movs	r3, #20
   215a0:	18fb      	adds	r3, r7, r3
   215a2:	2200      	movs	r2, #0
   215a4:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
   215a6:	2310      	movs	r3, #16
   215a8:	18fb      	adds	r3, r7, r3
   215aa:	2200      	movs	r2, #0
   215ac:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
   215ae:	68bb      	ldr	r3, [r7, #8]
   215b0:	2b00      	cmp	r3, #0
   215b2:	d102      	bne.n	215ba <spi_rw+0x42>
   215b4:	68fb      	ldr	r3, [r7, #12]
   215b6:	2b00      	cmp	r3, #0
   215b8:	d003      	beq.n	215c2 <spi_rw+0x4a>
   215ba:	1dbb      	adds	r3, r7, #6
   215bc:	881b      	ldrh	r3, [r3, #0]
   215be:	2b00      	cmp	r3, #0
   215c0:	d102      	bne.n	215c8 <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
   215c2:	230f      	movs	r3, #15
   215c4:	425b      	negs	r3, r3
   215c6:	e07e      	b.n	216c6 <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
   215c8:	68fb      	ldr	r3, [r7, #12]
   215ca:	2b00      	cmp	r3, #0
   215cc:	d106      	bne.n	215dc <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
   215ce:	2313      	movs	r3, #19
   215d0:	18fb      	adds	r3, r7, r3
   215d2:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
   215d4:	2317      	movs	r3, #23
   215d6:	18fb      	adds	r3, r7, r3
   215d8:	2201      	movs	r2, #1
   215da:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
   215dc:	68bb      	ldr	r3, [r7, #8]
   215de:	2b00      	cmp	r3, #0
   215e0:	d106      	bne.n	215f0 <spi_rw+0x78>
		pu8Miso = &u8Dummy;
   215e2:	2313      	movs	r3, #19
   215e4:	18fb      	adds	r3, r7, r3
   215e6:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
   215e8:	2316      	movs	r3, #22
   215ea:	18fb      	adds	r3, r7, r3
   215ec:	2201      	movs	r2, #1
   215ee:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
   215f0:	4937      	ldr	r1, [pc, #220]	; (216d0 <spi_rw+0x158>)
   215f2:	4b38      	ldr	r3, [pc, #224]	; (216d4 <spi_rw+0x15c>)
   215f4:	2201      	movs	r2, #1
   215f6:	0018      	movs	r0, r3
   215f8:	4b37      	ldr	r3, [pc, #220]	; (216d8 <spi_rw+0x160>)
   215fa:	4798      	blx	r3

	while (u16Sz) {
   215fc:	e04c      	b.n	21698 <spi_rw+0x120>
		txd_data = *pu8Mosi;
   215fe:	68fb      	ldr	r3, [r7, #12]
   21600:	781a      	ldrb	r2, [r3, #0]
   21602:	2314      	movs	r3, #20
   21604:	18fb      	adds	r3, r7, r3
   21606:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
   21608:	46c0      	nop			; (mov r8, r8)
   2160a:	4b32      	ldr	r3, [pc, #200]	; (216d4 <spi_rw+0x15c>)
   2160c:	0018      	movs	r0, r3
   2160e:	4b33      	ldr	r3, [pc, #204]	; (216dc <spi_rw+0x164>)
   21610:	4798      	blx	r3
   21612:	0003      	movs	r3, r0
   21614:	001a      	movs	r2, r3
   21616:	2301      	movs	r3, #1
   21618:	4053      	eors	r3, r2
   2161a:	b2db      	uxtb	r3, r3
   2161c:	2b00      	cmp	r3, #0
   2161e:	d1f4      	bne.n	2160a <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
   21620:	46c0      	nop			; (mov r8, r8)
   21622:	2314      	movs	r3, #20
   21624:	18fb      	adds	r3, r7, r3
   21626:	881a      	ldrh	r2, [r3, #0]
   21628:	4b2a      	ldr	r3, [pc, #168]	; (216d4 <spi_rw+0x15c>)
   2162a:	0011      	movs	r1, r2
   2162c:	0018      	movs	r0, r3
   2162e:	4b2c      	ldr	r3, [pc, #176]	; (216e0 <spi_rw+0x168>)
   21630:	4798      	blx	r3
   21632:	1e03      	subs	r3, r0, #0
   21634:	d1f5      	bne.n	21622 <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
   21636:	46c0      	nop			; (mov r8, r8)
   21638:	4b26      	ldr	r3, [pc, #152]	; (216d4 <spi_rw+0x15c>)
   2163a:	0018      	movs	r0, r3
   2163c:	4b29      	ldr	r3, [pc, #164]	; (216e4 <spi_rw+0x16c>)
   2163e:	4798      	blx	r3
   21640:	0003      	movs	r3, r0
   21642:	001a      	movs	r2, r3
   21644:	2301      	movs	r3, #1
   21646:	4053      	eors	r3, r2
   21648:	b2db      	uxtb	r3, r3
   2164a:	2b00      	cmp	r3, #0
   2164c:	d1f4      	bne.n	21638 <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
   2164e:	46c0      	nop			; (mov r8, r8)
   21650:	2310      	movs	r3, #16
   21652:	18fa      	adds	r2, r7, r3
   21654:	4b1f      	ldr	r3, [pc, #124]	; (216d4 <spi_rw+0x15c>)
   21656:	0011      	movs	r1, r2
   21658:	0018      	movs	r0, r3
   2165a:	4b23      	ldr	r3, [pc, #140]	; (216e8 <spi_rw+0x170>)
   2165c:	4798      	blx	r3
   2165e:	1e03      	subs	r3, r0, #0
   21660:	d1f6      	bne.n	21650 <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
   21662:	2310      	movs	r3, #16
   21664:	18fb      	adds	r3, r7, r3
   21666:	881b      	ldrh	r3, [r3, #0]
   21668:	b2da      	uxtb	r2, r3
   2166a:	68bb      	ldr	r3, [r7, #8]
   2166c:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
   2166e:	1dbb      	adds	r3, r7, #6
   21670:	881a      	ldrh	r2, [r3, #0]
   21672:	1dbb      	adds	r3, r7, #6
   21674:	3a01      	subs	r2, #1
   21676:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
   21678:	2316      	movs	r3, #22
   2167a:	18fb      	adds	r3, r7, r3
   2167c:	781b      	ldrb	r3, [r3, #0]
   2167e:	2b00      	cmp	r3, #0
   21680:	d102      	bne.n	21688 <spi_rw+0x110>
			pu8Miso++;
   21682:	68bb      	ldr	r3, [r7, #8]
   21684:	3301      	adds	r3, #1
   21686:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
   21688:	2317      	movs	r3, #23
   2168a:	18fb      	adds	r3, r7, r3
   2168c:	781b      	ldrb	r3, [r3, #0]
   2168e:	2b00      	cmp	r3, #0
   21690:	d102      	bne.n	21698 <spi_rw+0x120>
			pu8Mosi++;
   21692:	68fb      	ldr	r3, [r7, #12]
   21694:	3301      	adds	r3, #1
   21696:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
   21698:	1dbb      	adds	r3, r7, #6
   2169a:	881b      	ldrh	r3, [r3, #0]
   2169c:	2b00      	cmp	r3, #0
   2169e:	d1ae      	bne.n	215fe <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
   216a0:	46c0      	nop			; (mov r8, r8)
   216a2:	4b0c      	ldr	r3, [pc, #48]	; (216d4 <spi_rw+0x15c>)
   216a4:	0018      	movs	r0, r3
   216a6:	4b11      	ldr	r3, [pc, #68]	; (216ec <spi_rw+0x174>)
   216a8:	4798      	blx	r3
   216aa:	0003      	movs	r3, r0
   216ac:	001a      	movs	r2, r3
   216ae:	2301      	movs	r3, #1
   216b0:	4053      	eors	r3, r2
   216b2:	b2db      	uxtb	r3, r3
   216b4:	2b00      	cmp	r3, #0
   216b6:	d1f4      	bne.n	216a2 <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
   216b8:	4905      	ldr	r1, [pc, #20]	; (216d0 <spi_rw+0x158>)
   216ba:	4b06      	ldr	r3, [pc, #24]	; (216d4 <spi_rw+0x15c>)
   216bc:	2200      	movs	r2, #0
   216be:	0018      	movs	r0, r3
   216c0:	4b05      	ldr	r3, [pc, #20]	; (216d8 <spi_rw+0x160>)
   216c2:	4798      	blx	r3

	return M2M_SUCCESS;
   216c4:	2300      	movs	r3, #0
}
   216c6:	0018      	movs	r0, r3
   216c8:	46bd      	mov	sp, r7
   216ca:	b006      	add	sp, #24
   216cc:	bd80      	pop	{r7, pc}
   216ce:	46c0      	nop			; (mov r8, r8)
   216d0:	200056d4 	.word	0x200056d4
   216d4:	200056d8 	.word	0x200056d8
   216d8:	00028e25 	.word	0x00028e25
   216dc:	00021459 	.word	0x00021459
   216e0:	000214a9 	.word	0x000214a9
   216e4:	00021481 	.word	0x00021481
   216e8:	000214f1 	.word	0x000214f1
   216ec:	00021431 	.word	0x00021431

000216f0 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
   216f0:	b580      	push	{r7, lr}
   216f2:	b092      	sub	sp, #72	; 0x48
   216f4:	af00      	add	r7, sp, #0
   216f6:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
   216f8:	2347      	movs	r3, #71	; 0x47
   216fa:	18fb      	adds	r3, r7, r3
   216fc:	2200      	movs	r2, #0
   216fe:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
   21700:	2308      	movs	r3, #8
   21702:	18fb      	adds	r3, r7, r3
   21704:	0018      	movs	r0, r3
   21706:	4b26      	ldr	r3, [pc, #152]	; (217a0 <nm_bus_init+0xb0>)
   21708:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
   2170a:	2308      	movs	r3, #8
   2170c:	18fb      	adds	r3, r7, r3
   2170e:	220e      	movs	r2, #14
   21710:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
   21712:	2308      	movs	r3, #8
   21714:	18fa      	adds	r2, r7, r3
   21716:	4b23      	ldr	r3, [pc, #140]	; (217a4 <nm_bus_init+0xb4>)
   21718:	0011      	movs	r1, r2
   2171a:	0018      	movs	r0, r3
   2171c:	4b22      	ldr	r3, [pc, #136]	; (217a8 <nm_bus_init+0xb8>)
   2171e:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
   21720:	230c      	movs	r3, #12
   21722:	18fb      	adds	r3, r7, r3
   21724:	0018      	movs	r0, r3
   21726:	4b21      	ldr	r3, [pc, #132]	; (217ac <nm_bus_init+0xbc>)
   21728:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
   2172a:	230c      	movs	r3, #12
   2172c:	18fb      	adds	r3, r7, r3
   2172e:	22c0      	movs	r2, #192	; 0xc0
   21730:	0392      	lsls	r2, r2, #14
   21732:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
   21734:	230c      	movs	r3, #12
   21736:	18fb      	adds	r3, r7, r3
   21738:	4a1d      	ldr	r2, [pc, #116]	; (217b0 <nm_bus_init+0xc0>)
   2173a:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
   2173c:	230c      	movs	r3, #12
   2173e:	18fb      	adds	r3, r7, r3
   21740:	4a1c      	ldr	r2, [pc, #112]	; (217b4 <nm_bus_init+0xc4>)
   21742:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
   21744:	230c      	movs	r3, #12
   21746:	18fb      	adds	r3, r7, r3
   21748:	2201      	movs	r2, #1
   2174a:	4252      	negs	r2, r2
   2174c:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
   2174e:	230c      	movs	r3, #12
   21750:	18fb      	adds	r3, r7, r3
   21752:	4a19      	ldr	r2, [pc, #100]	; (217b8 <nm_bus_init+0xc8>)
   21754:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
   21756:	230c      	movs	r3, #12
   21758:	18fb      	adds	r3, r7, r3
   2175a:	2200      	movs	r2, #0
   2175c:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
   2175e:	230c      	movs	r3, #12
   21760:	18fb      	adds	r3, r7, r3
   21762:	4a16      	ldr	r2, [pc, #88]	; (217bc <nm_bus_init+0xcc>)
   21764:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
   21766:	230c      	movs	r3, #12
   21768:	18fa      	adds	r2, r7, r3
   2176a:	4915      	ldr	r1, [pc, #84]	; (217c0 <nm_bus_init+0xd0>)
   2176c:	4b15      	ldr	r3, [pc, #84]	; (217c4 <nm_bus_init+0xd4>)
   2176e:	0018      	movs	r0, r3
   21770:	4b15      	ldr	r3, [pc, #84]	; (217c8 <nm_bus_init+0xd8>)
   21772:	4798      	blx	r3
   21774:	1e03      	subs	r3, r0, #0
   21776:	d002      	beq.n	2177e <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
   21778:	2306      	movs	r3, #6
   2177a:	425b      	negs	r3, r3
   2177c:	e00c      	b.n	21798 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
   2177e:	4b11      	ldr	r3, [pc, #68]	; (217c4 <nm_bus_init+0xd4>)
   21780:	0018      	movs	r0, r3
   21782:	4b12      	ldr	r3, [pc, #72]	; (217cc <nm_bus_init+0xdc>)
   21784:	4798      	blx	r3

	nm_bsp_reset();
   21786:	4b12      	ldr	r3, [pc, #72]	; (217d0 <nm_bus_init+0xe0>)
   21788:	4798      	blx	r3
	nm_bsp_sleep(1);
   2178a:	2001      	movs	r0, #1
   2178c:	4b11      	ldr	r3, [pc, #68]	; (217d4 <nm_bus_init+0xe4>)
   2178e:	4798      	blx	r3
#endif
	return result;
   21790:	2347      	movs	r3, #71	; 0x47
   21792:	18fb      	adds	r3, r7, r3
   21794:	781b      	ldrb	r3, [r3, #0]
   21796:	b25b      	sxtb	r3, r3
}
   21798:	0018      	movs	r0, r3
   2179a:	46bd      	mov	sp, r7
   2179c:	b012      	add	sp, #72	; 0x48
   2179e:	bd80      	pop	{r7, pc}
   217a0:	000212fd 	.word	0x000212fd
   217a4:	200056d4 	.word	0x200056d4
   217a8:	00021321 	.word	0x00021321
   217ac:	00021279 	.word	0x00021279
   217b0:	000c0002 	.word	0x000c0002
   217b4:	000d0002 	.word	0x000d0002
   217b8:	000f0002 	.word	0x000f0002
   217bc:	00124f80 	.word	0x00124f80
   217c0:	42001000 	.word	0x42001000
   217c4:	200056d8 	.word	0x200056d8
   217c8:	00028b61 	.word	0x00028b61
   217cc:	00021385 	.word	0x00021385
   217d0:	00020ff5 	.word	0x00020ff5
   217d4:	00021035 	.word	0x00021035

000217d8 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
   217d8:	b590      	push	{r4, r7, lr}
   217da:	b085      	sub	sp, #20
   217dc:	af00      	add	r7, sp, #0
   217de:	0002      	movs	r2, r0
   217e0:	6039      	str	r1, [r7, #0]
   217e2:	1dfb      	adds	r3, r7, #7
   217e4:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
   217e6:	230f      	movs	r3, #15
   217e8:	18fb      	adds	r3, r7, r3
   217ea:	2200      	movs	r2, #0
   217ec:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
   217ee:	1dfb      	adds	r3, r7, #7
   217f0:	781b      	ldrb	r3, [r3, #0]
   217f2:	2b03      	cmp	r3, #3
   217f4:	d10f      	bne.n	21816 <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
   217f6:	683b      	ldr	r3, [r7, #0]
   217f8:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
   217fa:	68bb      	ldr	r3, [r7, #8]
   217fc:	6818      	ldr	r0, [r3, #0]
   217fe:	68bb      	ldr	r3, [r7, #8]
   21800:	6859      	ldr	r1, [r3, #4]
   21802:	68bb      	ldr	r3, [r7, #8]
   21804:	891b      	ldrh	r3, [r3, #8]
   21806:	220f      	movs	r2, #15
   21808:	18bc      	adds	r4, r7, r2
   2180a:	001a      	movs	r2, r3
   2180c:	4b10      	ldr	r3, [pc, #64]	; (21850 <nm_bus_ioctl+0x78>)
   2180e:	4798      	blx	r3
   21810:	0003      	movs	r3, r0
   21812:	7023      	strb	r3, [r4, #0]
		}
		break;
   21814:	e013      	b.n	2183e <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
   21816:	230f      	movs	r3, #15
   21818:	18fb      	adds	r3, r7, r3
   2181a:	22ff      	movs	r2, #255	; 0xff
   2181c:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
   2181e:	2383      	movs	r3, #131	; 0x83
   21820:	005a      	lsls	r2, r3, #1
   21822:	490c      	ldr	r1, [pc, #48]	; (21854 <nm_bus_ioctl+0x7c>)
   21824:	4b0c      	ldr	r3, [pc, #48]	; (21858 <nm_bus_ioctl+0x80>)
   21826:	0018      	movs	r0, r3
   21828:	4b0c      	ldr	r3, [pc, #48]	; (2185c <nm_bus_ioctl+0x84>)
   2182a:	4798      	blx	r3
   2182c:	4b0c      	ldr	r3, [pc, #48]	; (21860 <nm_bus_ioctl+0x88>)
   2182e:	0018      	movs	r0, r3
   21830:	4b0a      	ldr	r3, [pc, #40]	; (2185c <nm_bus_ioctl+0x84>)
   21832:	4798      	blx	r3
   21834:	4b0b      	ldr	r3, [pc, #44]	; (21864 <nm_bus_ioctl+0x8c>)
   21836:	0018      	movs	r0, r3
   21838:	4b08      	ldr	r3, [pc, #32]	; (2185c <nm_bus_ioctl+0x84>)
   2183a:	4798      	blx	r3
			break;
   2183c:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
   2183e:	230f      	movs	r3, #15
   21840:	18fb      	adds	r3, r7, r3
   21842:	781b      	ldrb	r3, [r3, #0]
   21844:	b25b      	sxtb	r3, r3
}
   21846:	0018      	movs	r0, r3
   21848:	46bd      	mov	sp, r7
   2184a:	b005      	add	sp, #20
   2184c:	bd90      	pop	{r4, r7, pc}
   2184e:	46c0      	nop			; (mov r8, r8)
   21850:	00021579 	.word	0x00021579
   21854:	000390e4 	.word	0x000390e4
   21858:	000390b8 	.word	0x000390b8
   2185c:	0001eb7d 	.word	0x0001eb7d
   21860:	000390cc 	.word	0x000390cc
   21864:	000390e0 	.word	0x000390e0

00021868 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
   21868:	b580      	push	{r7, lr}
   2186a:	b082      	sub	sp, #8
   2186c:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
   2186e:	1dfb      	adds	r3, r7, #7
   21870:	2200      	movs	r2, #0
   21872:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
   21874:	1d3b      	adds	r3, r7, #4
   21876:	0018      	movs	r0, r3
   21878:	4b13      	ldr	r3, [pc, #76]	; (218c8 <nm_bus_deinit+0x60>)
   2187a:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   2187c:	1d3b      	adds	r3, r7, #4
   2187e:	2200      	movs	r2, #0
   21880:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
   21882:	1d3b      	adds	r3, r7, #4
   21884:	2200      	movs	r2, #0
   21886:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
   21888:	4b10      	ldr	r3, [pc, #64]	; (218cc <nm_bus_deinit+0x64>)
   2188a:	0018      	movs	r0, r3
   2188c:	4b10      	ldr	r3, [pc, #64]	; (218d0 <nm_bus_deinit+0x68>)
   2188e:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
   21890:	1d3b      	adds	r3, r7, #4
   21892:	0019      	movs	r1, r3
   21894:	200c      	movs	r0, #12
   21896:	4b0f      	ldr	r3, [pc, #60]	; (218d4 <nm_bus_deinit+0x6c>)
   21898:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
   2189a:	1d3b      	adds	r3, r7, #4
   2189c:	0019      	movs	r1, r3
   2189e:	200f      	movs	r0, #15
   218a0:	4b0c      	ldr	r3, [pc, #48]	; (218d4 <nm_bus_deinit+0x6c>)
   218a2:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
   218a4:	1d3b      	adds	r3, r7, #4
   218a6:	0019      	movs	r1, r3
   218a8:	200d      	movs	r0, #13
   218aa:	4b0a      	ldr	r3, [pc, #40]	; (218d4 <nm_bus_deinit+0x6c>)
   218ac:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
   218ae:	1d3b      	adds	r3, r7, #4
   218b0:	0019      	movs	r1, r3
   218b2:	200e      	movs	r0, #14
   218b4:	4b07      	ldr	r3, [pc, #28]	; (218d4 <nm_bus_deinit+0x6c>)
   218b6:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
   218b8:	1dfb      	adds	r3, r7, #7
   218ba:	781b      	ldrb	r3, [r3, #0]
   218bc:	b25b      	sxtb	r3, r3
}
   218be:	0018      	movs	r0, r3
   218c0:	46bd      	mov	sp, r7
   218c2:	b002      	add	sp, #8
   218c4:	bd80      	pop	{r7, pc}
   218c6:	46c0      	nop			; (mov r8, r8)
   218c8:	000211e1 	.word	0x000211e1
   218cc:	200056d8 	.word	0x200056d8
   218d0:	000213d5 	.word	0x000213d5
   218d4:	000276e1 	.word	0x000276e1

000218d8 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
   218d8:	b580      	push	{r7, lr}
   218da:	b084      	sub	sp, #16
   218dc:	af00      	add	r7, sp, #0
   218de:	60f8      	str	r0, [r7, #12]
   218e0:	60b9      	str	r1, [r7, #8]
   218e2:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
   218e4:	687b      	ldr	r3, [r7, #4]
   218e6:	2b00      	cmp	r3, #0
   218e8:	d010      	beq.n	2190c <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
   218ea:	68bb      	ldr	r3, [r7, #8]
   218ec:	781a      	ldrb	r2, [r3, #0]
   218ee:	68fb      	ldr	r3, [r7, #12]
   218f0:	701a      	strb	r2, [r3, #0]
		pDst++;
   218f2:	68fb      	ldr	r3, [r7, #12]
   218f4:	3301      	adds	r3, #1
   218f6:	60fb      	str	r3, [r7, #12]
		pSrc++;
   218f8:	68bb      	ldr	r3, [r7, #8]
   218fa:	3301      	adds	r3, #1
   218fc:	60bb      	str	r3, [r7, #8]
	}while(--sz);
   218fe:	687b      	ldr	r3, [r7, #4]
   21900:	3b01      	subs	r3, #1
   21902:	607b      	str	r3, [r7, #4]
   21904:	687b      	ldr	r3, [r7, #4]
   21906:	2b00      	cmp	r3, #0
   21908:	d1ef      	bne.n	218ea <m2m_memcpy+0x12>
   2190a:	e000      	b.n	2190e <m2m_memcpy+0x36>
	if(sz == 0) return;
   2190c:	46c0      	nop			; (mov r8, r8)
}
   2190e:	46bd      	mov	sp, r7
   21910:	b004      	add	sp, #16
   21912:	bd80      	pop	{r7, pc}

00021914 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
   21914:	b580      	push	{r7, lr}
   21916:	b084      	sub	sp, #16
   21918:	af00      	add	r7, sp, #0
   2191a:	60f8      	str	r0, [r7, #12]
   2191c:	607a      	str	r2, [r7, #4]
   2191e:	230b      	movs	r3, #11
   21920:	18fb      	adds	r3, r7, r3
   21922:	1c0a      	adds	r2, r1, #0
   21924:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
   21926:	687b      	ldr	r3, [r7, #4]
   21928:	2b00      	cmp	r3, #0
   2192a:	d00e      	beq.n	2194a <m2m_memset+0x36>
	do
	{
		*pBuf = val;
   2192c:	68fb      	ldr	r3, [r7, #12]
   2192e:	220b      	movs	r2, #11
   21930:	18ba      	adds	r2, r7, r2
   21932:	7812      	ldrb	r2, [r2, #0]
   21934:	701a      	strb	r2, [r3, #0]
		pBuf++;
   21936:	68fb      	ldr	r3, [r7, #12]
   21938:	3301      	adds	r3, #1
   2193a:	60fb      	str	r3, [r7, #12]
	}while(--sz);
   2193c:	687b      	ldr	r3, [r7, #4]
   2193e:	3b01      	subs	r3, #1
   21940:	607b      	str	r3, [r7, #4]
   21942:	687b      	ldr	r3, [r7, #4]
   21944:	2b00      	cmp	r3, #0
   21946:	d1f1      	bne.n	2192c <m2m_memset+0x18>
   21948:	e000      	b.n	2194c <m2m_memset+0x38>
	if(sz == 0) return;
   2194a:	46c0      	nop			; (mov r8, r8)
}
   2194c:	46bd      	mov	sp, r7
   2194e:	b004      	add	sp, #16
   21950:	bd80      	pop	{r7, pc}

00021952 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
   21952:	b580      	push	{r7, lr}
   21954:	b084      	sub	sp, #16
   21956:	af00      	add	r7, sp, #0
   21958:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
   2195a:	230e      	movs	r3, #14
   2195c:	18fb      	adds	r3, r7, r3
   2195e:	2200      	movs	r2, #0
   21960:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
   21962:	e009      	b.n	21978 <m2m_strlen+0x26>
	{
		u16StrLen ++;
   21964:	230e      	movs	r3, #14
   21966:	18fb      	adds	r3, r7, r3
   21968:	881a      	ldrh	r2, [r3, #0]
   2196a:	230e      	movs	r3, #14
   2196c:	18fb      	adds	r3, r7, r3
   2196e:	3201      	adds	r2, #1
   21970:	801a      	strh	r2, [r3, #0]
		pcStr++;
   21972:	687b      	ldr	r3, [r7, #4]
   21974:	3301      	adds	r3, #1
   21976:	607b      	str	r3, [r7, #4]
	while(*pcStr)
   21978:	687b      	ldr	r3, [r7, #4]
   2197a:	781b      	ldrb	r3, [r3, #0]
   2197c:	2b00      	cmp	r3, #0
   2197e:	d1f1      	bne.n	21964 <m2m_strlen+0x12>
	}
	return u16StrLen;
   21980:	230e      	movs	r3, #14
   21982:	18fb      	adds	r3, r7, r3
   21984:	881b      	ldrh	r3, [r3, #0]
}
   21986:	0018      	movs	r0, r3
   21988:	46bd      	mov	sp, r7
   2198a:	b004      	add	sp, #16
   2198c:	bd80      	pop	{r7, pc}
	...

00021990 <isr>:
#ifdef ETH_MODE
extern void os_hook_isr(void);
#endif

static void isr(void)
{
   21990:	b580      	push	{r7, lr}
   21992:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
   21994:	4b04      	ldr	r3, [pc, #16]	; (219a8 <isr+0x18>)
   21996:	78db      	ldrb	r3, [r3, #3]
   21998:	b2db      	uxtb	r3, r3
   2199a:	3301      	adds	r3, #1
   2199c:	b2da      	uxtb	r2, r3
   2199e:	4b02      	ldr	r3, [pc, #8]	; (219a8 <isr+0x18>)
   219a0:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
   219a2:	46c0      	nop			; (mov r8, r8)
   219a4:	46bd      	mov	sp, r7
   219a6:	bd80      	pop	{r7, pc}
   219a8:	20005714 	.word	0x20005714

000219ac <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
   219ac:	b590      	push	{r4, r7, lr}
   219ae:	b083      	sub	sp, #12
   219b0:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   219b2:	1dfb      	adds	r3, r7, #7
   219b4:	2200      	movs	r2, #0
   219b6:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
   219b8:	4b14      	ldr	r3, [pc, #80]	; (21a0c <hif_set_rx_done+0x60>)
   219ba:	2200      	movs	r2, #0
   219bc:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
   219be:	2001      	movs	r0, #1
   219c0:	4b13      	ldr	r3, [pc, #76]	; (21a10 <hif_set_rx_done+0x64>)
   219c2:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
   219c4:	1dfc      	adds	r4, r7, #7
   219c6:	003b      	movs	r3, r7
   219c8:	4a12      	ldr	r2, [pc, #72]	; (21a14 <hif_set_rx_done+0x68>)
   219ca:	0019      	movs	r1, r3
   219cc:	0010      	movs	r0, r2
   219ce:	4b12      	ldr	r3, [pc, #72]	; (21a18 <hif_set_rx_done+0x6c>)
   219d0:	4798      	blx	r3
   219d2:	0003      	movs	r3, r0
   219d4:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   219d6:	1dfb      	adds	r3, r7, #7
   219d8:	781b      	ldrb	r3, [r3, #0]
   219da:	b25b      	sxtb	r3, r3
   219dc:	2b00      	cmp	r3, #0
   219de:	d10d      	bne.n	219fc <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
   219e0:	683b      	ldr	r3, [r7, #0]
   219e2:	2202      	movs	r2, #2
   219e4:	4313      	orrs	r3, r2
   219e6:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   219e8:	683b      	ldr	r3, [r7, #0]
   219ea:	1dfc      	adds	r4, r7, #7
   219ec:	4a09      	ldr	r2, [pc, #36]	; (21a14 <hif_set_rx_done+0x68>)
   219ee:	0019      	movs	r1, r3
   219f0:	0010      	movs	r0, r2
   219f2:	4b0a      	ldr	r3, [pc, #40]	; (21a1c <hif_set_rx_done+0x70>)
   219f4:	4798      	blx	r3
   219f6:	0003      	movs	r3, r0
   219f8:	7023      	strb	r3, [r4, #0]
   219fa:	e000      	b.n	219fe <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
   219fc:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
   219fe:	1dfb      	adds	r3, r7, #7
   21a00:	781b      	ldrb	r3, [r3, #0]
   21a02:	b25b      	sxtb	r3, r3

}
   21a04:	0018      	movs	r0, r3
   21a06:	46bd      	mov	sp, r7
   21a08:	b003      	add	sp, #12
   21a0a:	bd90      	pop	{r4, r7, pc}
   21a0c:	20005714 	.word	0x20005714
   21a10:	000210c9 	.word	0x000210c9
   21a14:	00001070 	.word	0x00001070
   21a18:	000239a5 	.word	0x000239a5
   21a1c:	000239c9 	.word	0x000239c9

00021a20 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   21a20:	b580      	push	{r7, lr}
   21a22:	b082      	sub	sp, #8
   21a24:	af00      	add	r7, sp, #0
   21a26:	603a      	str	r2, [r7, #0]
   21a28:	1dfb      	adds	r3, r7, #7
   21a2a:	1c02      	adds	r2, r0, #0
   21a2c:	701a      	strb	r2, [r3, #0]
   21a2e:	1d3b      	adds	r3, r7, #4
   21a30:	1c0a      	adds	r2, r1, #0
   21a32:	801a      	strh	r2, [r3, #0]


}
   21a34:	46c0      	nop			; (mov r8, r8)
   21a36:	46bd      	mov	sp, r7
   21a38:	b002      	add	sp, #8
   21a3a:	bd80      	pop	{r7, pc}

00021a3c <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
   21a3c:	b590      	push	{r4, r7, lr}
   21a3e:	b083      	sub	sp, #12
   21a40:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   21a42:	1dfb      	adds	r3, r7, #7
   21a44:	2200      	movs	r2, #0
   21a46:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
   21a48:	4b16      	ldr	r3, [pc, #88]	; (21aa4 <hif_chip_wake+0x68>)
   21a4a:	789b      	ldrb	r3, [r3, #2]
   21a4c:	b2db      	uxtb	r3, r3
   21a4e:	2b00      	cmp	r3, #0
   21a50:	d003      	beq.n	21a5a <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
   21a52:	1dfb      	adds	r3, r7, #7
   21a54:	781b      	ldrb	r3, [r3, #0]
   21a56:	b25b      	sxtb	r3, r3
   21a58:	e01f      	b.n	21a9a <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
   21a5a:	4b12      	ldr	r3, [pc, #72]	; (21aa4 <hif_chip_wake+0x68>)
   21a5c:	785b      	ldrb	r3, [r3, #1]
   21a5e:	b2db      	uxtb	r3, r3
   21a60:	2b00      	cmp	r3, #0
   21a62:	d10e      	bne.n	21a82 <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   21a64:	4b0f      	ldr	r3, [pc, #60]	; (21aa4 <hif_chip_wake+0x68>)
   21a66:	781b      	ldrb	r3, [r3, #0]
   21a68:	b2db      	uxtb	r3, r3
   21a6a:	2b00      	cmp	r3, #0
   21a6c:	d009      	beq.n	21a82 <hif_chip_wake+0x46>
		{
			ret = chip_wake();
   21a6e:	1dfc      	adds	r4, r7, #7
   21a70:	4b0d      	ldr	r3, [pc, #52]	; (21aa8 <hif_chip_wake+0x6c>)
   21a72:	4798      	blx	r3
   21a74:	0003      	movs	r3, r0
   21a76:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   21a78:	1dfb      	adds	r3, r7, #7
   21a7a:	781b      	ldrb	r3, [r3, #0]
   21a7c:	b25b      	sxtb	r3, r3
   21a7e:	2b00      	cmp	r3, #0
   21a80:	d107      	bne.n	21a92 <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
   21a82:	4b08      	ldr	r3, [pc, #32]	; (21aa4 <hif_chip_wake+0x68>)
   21a84:	785b      	ldrb	r3, [r3, #1]
   21a86:	b2db      	uxtb	r3, r3
   21a88:	3301      	adds	r3, #1
   21a8a:	b2da      	uxtb	r2, r3
   21a8c:	4b05      	ldr	r3, [pc, #20]	; (21aa4 <hif_chip_wake+0x68>)
   21a8e:	705a      	strb	r2, [r3, #1]
   21a90:	e000      	b.n	21a94 <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
   21a92:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
   21a94:	1dfb      	adds	r3, r7, #7
   21a96:	781b      	ldrb	r3, [r3, #0]
   21a98:	b25b      	sxtb	r3, r3
}
   21a9a:	0018      	movs	r0, r3
   21a9c:	46bd      	mov	sp, r7
   21a9e:	b003      	add	sp, #12
   21aa0:	bd90      	pop	{r4, r7, pc}
   21aa2:	46c0      	nop			; (mov r8, r8)
   21aa4:	20005714 	.word	0x20005714
   21aa8:	00023475 	.word	0x00023475

00021aac <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
   21aac:	b580      	push	{r7, lr}
   21aae:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
   21ab0:	4b07      	ldr	r3, [pc, #28]	; (21ad0 <hif_chip_sleep_sc+0x24>)
   21ab2:	785b      	ldrb	r3, [r3, #1]
   21ab4:	b2db      	uxtb	r3, r3
   21ab6:	2b00      	cmp	r3, #0
   21ab8:	d006      	beq.n	21ac8 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
   21aba:	4b05      	ldr	r3, [pc, #20]	; (21ad0 <hif_chip_sleep_sc+0x24>)
   21abc:	785b      	ldrb	r3, [r3, #1]
   21abe:	b2db      	uxtb	r3, r3
   21ac0:	3b01      	subs	r3, #1
   21ac2:	b2da      	uxtb	r2, r3
   21ac4:	4b02      	ldr	r3, [pc, #8]	; (21ad0 <hif_chip_sleep_sc+0x24>)
   21ac6:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
   21ac8:	2300      	movs	r3, #0
}
   21aca:	0018      	movs	r0, r3
   21acc:	46bd      	mov	sp, r7
   21ace:	bd80      	pop	{r7, pc}
   21ad0:	20005714 	.word	0x20005714

00021ad4 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
   21ad4:	b590      	push	{r4, r7, lr}
   21ad6:	b083      	sub	sp, #12
   21ad8:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   21ada:	1dfb      	adds	r3, r7, #7
   21adc:	2200      	movs	r2, #0
   21ade:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
   21ae0:	4b10      	ldr	r3, [pc, #64]	; (21b24 <hif_chip_sleep+0x50>)
   21ae2:	785b      	ldrb	r3, [r3, #1]
   21ae4:	b2db      	uxtb	r3, r3
   21ae6:	2b00      	cmp	r3, #0
   21ae8:	d006      	beq.n	21af8 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
   21aea:	4b0e      	ldr	r3, [pc, #56]	; (21b24 <hif_chip_sleep+0x50>)
   21aec:	785b      	ldrb	r3, [r3, #1]
   21aee:	b2db      	uxtb	r3, r3
   21af0:	3b01      	subs	r3, #1
   21af2:	b2da      	uxtb	r2, r3
   21af4:	4b0b      	ldr	r3, [pc, #44]	; (21b24 <hif_chip_sleep+0x50>)
   21af6:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
   21af8:	4b0a      	ldr	r3, [pc, #40]	; (21b24 <hif_chip_sleep+0x50>)
   21afa:	785b      	ldrb	r3, [r3, #1]
   21afc:	b2db      	uxtb	r3, r3
   21afe:	2b00      	cmp	r3, #0
   21b00:	d109      	bne.n	21b16 <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   21b02:	4b08      	ldr	r3, [pc, #32]	; (21b24 <hif_chip_sleep+0x50>)
   21b04:	781b      	ldrb	r3, [r3, #0]
   21b06:	b2db      	uxtb	r3, r3
   21b08:	2b00      	cmp	r3, #0
   21b0a:	d004      	beq.n	21b16 <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
   21b0c:	1dfc      	adds	r4, r7, #7
   21b0e:	4b06      	ldr	r3, [pc, #24]	; (21b28 <hif_chip_sleep+0x54>)
   21b10:	4798      	blx	r3
   21b12:	0003      	movs	r3, r0
   21b14:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
   21b16:	1dfb      	adds	r3, r7, #7
   21b18:	781b      	ldrb	r3, [r3, #0]
   21b1a:	b25b      	sxtb	r3, r3
}
   21b1c:	0018      	movs	r0, r3
   21b1e:	46bd      	mov	sp, r7
   21b20:	b003      	add	sp, #12
   21b22:	bd90      	pop	{r4, r7, pc}
   21b24:	20005714 	.word	0x20005714
   21b28:	0002339d 	.word	0x0002339d

00021b2c <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
   21b2c:	b580      	push	{r7, lr}
   21b2e:	b082      	sub	sp, #8
   21b30:	af00      	add	r7, sp, #0
   21b32:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
   21b34:	4b09      	ldr	r3, [pc, #36]	; (21b5c <hif_init+0x30>)
   21b36:	222c      	movs	r2, #44	; 0x2c
   21b38:	2100      	movs	r1, #0
   21b3a:	0018      	movs	r0, r3
   21b3c:	4b08      	ldr	r3, [pc, #32]	; (21b60 <hif_init+0x34>)
   21b3e:	4798      	blx	r3
	nm_bsp_register_isr(isr);
   21b40:	4b08      	ldr	r3, [pc, #32]	; (21b64 <hif_init+0x38>)
   21b42:	0018      	movs	r0, r3
   21b44:	4b08      	ldr	r3, [pc, #32]	; (21b68 <hif_init+0x3c>)
   21b46:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
   21b48:	4b08      	ldr	r3, [pc, #32]	; (21b6c <hif_init+0x40>)
   21b4a:	0019      	movs	r1, r3
   21b4c:	2003      	movs	r0, #3
   21b4e:	4b08      	ldr	r3, [pc, #32]	; (21b70 <hif_init+0x44>)
   21b50:	4798      	blx	r3
	return M2M_SUCCESS;
   21b52:	2300      	movs	r3, #0
}
   21b54:	0018      	movs	r0, r3
   21b56:	46bd      	mov	sp, r7
   21b58:	b002      	add	sp, #8
   21b5a:	bd80      	pop	{r7, pc}
   21b5c:	20005714 	.word	0x20005714
   21b60:	00021915 	.word	0x00021915
   21b64:	00021991 	.word	0x00021991
   21b68:	00021051 	.word	0x00021051
   21b6c:	00021a21 	.word	0x00021a21
   21b70:	00022611 	.word	0x00022611

00021b74 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
   21b74:	b590      	push	{r4, r7, lr}
   21b76:	b089      	sub	sp, #36	; 0x24
   21b78:	af00      	add	r7, sp, #0
   21b7a:	0004      	movs	r4, r0
   21b7c:	0008      	movs	r0, r1
   21b7e:	603a      	str	r2, [r7, #0]
   21b80:	0019      	movs	r1, r3
   21b82:	1dfb      	adds	r3, r7, #7
   21b84:	1c22      	adds	r2, r4, #0
   21b86:	701a      	strb	r2, [r3, #0]
   21b88:	1dbb      	adds	r3, r7, #6
   21b8a:	1c02      	adds	r2, r0, #0
   21b8c:	701a      	strb	r2, [r3, #0]
   21b8e:	1d3b      	adds	r3, r7, #4
   21b90:	1c0a      	adds	r2, r1, #0
   21b92:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
   21b94:	231f      	movs	r3, #31
   21b96:	18fb      	adds	r3, r7, r3
   21b98:	22ff      	movs	r2, #255	; 0xff
   21b9a:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
   21b9c:	1dbb      	adds	r3, r7, #6
   21b9e:	781b      	ldrb	r3, [r3, #0]
   21ba0:	227f      	movs	r2, #127	; 0x7f
   21ba2:	4013      	ands	r3, r2
   21ba4:	b2da      	uxtb	r2, r3
   21ba6:	2318      	movs	r3, #24
   21ba8:	18fb      	adds	r3, r7, r3
   21baa:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
   21bac:	2318      	movs	r3, #24
   21bae:	18fb      	adds	r3, r7, r3
   21bb0:	1dfa      	adds	r2, r7, #7
   21bb2:	7812      	ldrb	r2, [r2, #0]
   21bb4:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
   21bb6:	2318      	movs	r3, #24
   21bb8:	18fb      	adds	r3, r7, r3
   21bba:	2208      	movs	r2, #8
   21bbc:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
   21bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   21bc0:	2b00      	cmp	r3, #0
   21bc2:	d011      	beq.n	21be8 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
   21bc4:	2318      	movs	r3, #24
   21bc6:	18fb      	adds	r3, r7, r3
   21bc8:	885b      	ldrh	r3, [r3, #2]
   21bca:	b29a      	uxth	r2, r3
   21bcc:	2338      	movs	r3, #56	; 0x38
   21bce:	18f9      	adds	r1, r7, r3
   21bd0:	2334      	movs	r3, #52	; 0x34
   21bd2:	18fb      	adds	r3, r7, r3
   21bd4:	8809      	ldrh	r1, [r1, #0]
   21bd6:	881b      	ldrh	r3, [r3, #0]
   21bd8:	18cb      	adds	r3, r1, r3
   21bda:	b29b      	uxth	r3, r3
   21bdc:	18d3      	adds	r3, r2, r3
   21bde:	b29a      	uxth	r2, r3
   21be0:	2318      	movs	r3, #24
   21be2:	18fb      	adds	r3, r7, r3
   21be4:	805a      	strh	r2, [r3, #2]
   21be6:	e00a      	b.n	21bfe <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
   21be8:	2318      	movs	r3, #24
   21bea:	18fb      	adds	r3, r7, r3
   21bec:	885b      	ldrh	r3, [r3, #2]
   21bee:	b29a      	uxth	r2, r3
   21bf0:	1d3b      	adds	r3, r7, #4
   21bf2:	881b      	ldrh	r3, [r3, #0]
   21bf4:	18d3      	adds	r3, r2, r3
   21bf6:	b29a      	uxth	r2, r3
   21bf8:	2318      	movs	r3, #24
   21bfa:	18fb      	adds	r3, r7, r3
   21bfc:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
   21bfe:	231f      	movs	r3, #31
   21c00:	18fc      	adds	r4, r7, r3
   21c02:	4bb2      	ldr	r3, [pc, #712]	; (21ecc <hif_send+0x358>)
   21c04:	4798      	blx	r3
   21c06:	0003      	movs	r3, r0
   21c08:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
   21c0a:	231f      	movs	r3, #31
   21c0c:	18fb      	adds	r3, r7, r3
   21c0e:	781b      	ldrb	r3, [r3, #0]
   21c10:	b25b      	sxtb	r3, r3
   21c12:	2b00      	cmp	r3, #0
   21c14:	d000      	beq.n	21c18 <hif_send+0xa4>
   21c16:	e129      	b.n	21e6c <hif_send+0x2f8>
	{
		volatile uint32 reg, dma_addr = 0;
   21c18:	2300      	movs	r3, #0
   21c1a:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
   21c1c:	230e      	movs	r3, #14
   21c1e:	18fb      	adds	r3, r7, r3
   21c20:	2200      	movs	r2, #0
   21c22:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
   21c24:	2300      	movs	r3, #0
   21c26:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
   21c28:	1dfb      	adds	r3, r7, #7
   21c2a:	781a      	ldrb	r2, [r3, #0]
   21c2c:	697b      	ldr	r3, [r7, #20]
   21c2e:	4313      	orrs	r3, r2
   21c30:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
   21c32:	1dbb      	adds	r3, r7, #6
   21c34:	781b      	ldrb	r3, [r3, #0]
   21c36:	021a      	lsls	r2, r3, #8
   21c38:	697b      	ldr	r3, [r7, #20]
   21c3a:	4313      	orrs	r3, r2
   21c3c:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
   21c3e:	2318      	movs	r3, #24
   21c40:	18fb      	adds	r3, r7, r3
   21c42:	885b      	ldrh	r3, [r3, #2]
   21c44:	b29b      	uxth	r3, r3
   21c46:	041a      	lsls	r2, r3, #16
   21c48:	697b      	ldr	r3, [r7, #20]
   21c4a:	4313      	orrs	r3, r2
   21c4c:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
   21c4e:	697b      	ldr	r3, [r7, #20]
   21c50:	221f      	movs	r2, #31
   21c52:	18bc      	adds	r4, r7, r2
   21c54:	4a9e      	ldr	r2, [pc, #632]	; (21ed0 <hif_send+0x35c>)
   21c56:	0019      	movs	r1, r3
   21c58:	0010      	movs	r0, r2
   21c5a:	4b9e      	ldr	r3, [pc, #632]	; (21ed4 <hif_send+0x360>)
   21c5c:	4798      	blx	r3
   21c5e:	0003      	movs	r3, r0
   21c60:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   21c62:	231f      	movs	r3, #31
   21c64:	18fb      	adds	r3, r7, r3
   21c66:	781b      	ldrb	r3, [r3, #0]
   21c68:	b25b      	sxtb	r3, r3
   21c6a:	2b00      	cmp	r3, #0
   21c6c:	d000      	beq.n	21c70 <hif_send+0xfc>
   21c6e:	e119      	b.n	21ea4 <hif_send+0x330>

		reg = 0UL;
   21c70:	2300      	movs	r3, #0
   21c72:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
   21c74:	697b      	ldr	r3, [r7, #20]
   21c76:	2202      	movs	r2, #2
   21c78:	4313      	orrs	r3, r2
   21c7a:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
   21c7c:	697b      	ldr	r3, [r7, #20]
   21c7e:	221f      	movs	r2, #31
   21c80:	18bc      	adds	r4, r7, r2
   21c82:	4a95      	ldr	r2, [pc, #596]	; (21ed8 <hif_send+0x364>)
   21c84:	0019      	movs	r1, r3
   21c86:	0010      	movs	r0, r2
   21c88:	4b92      	ldr	r3, [pc, #584]	; (21ed4 <hif_send+0x360>)
   21c8a:	4798      	blx	r3
   21c8c:	0003      	movs	r3, r0
   21c8e:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   21c90:	231f      	movs	r3, #31
   21c92:	18fb      	adds	r3, r7, r3
   21c94:	781b      	ldrb	r3, [r3, #0]
   21c96:	b25b      	sxtb	r3, r3
   21c98:	2b00      	cmp	r3, #0
   21c9a:	d000      	beq.n	21c9e <hif_send+0x12a>
   21c9c:	e104      	b.n	21ea8 <hif_send+0x334>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
   21c9e:	2300      	movs	r3, #0
   21ca0:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
   21ca2:	230e      	movs	r3, #14
   21ca4:	18fb      	adds	r3, r7, r3
   21ca6:	2200      	movs	r2, #0
   21ca8:	801a      	strh	r2, [r3, #0]
   21caa:	e050      	b.n	21d4e <hif_send+0x1da>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
   21cac:	231f      	movs	r3, #31
   21cae:	18fc      	adds	r4, r7, r3
   21cb0:	2314      	movs	r3, #20
   21cb2:	18fb      	adds	r3, r7, r3
   21cb4:	4a88      	ldr	r2, [pc, #544]	; (21ed8 <hif_send+0x364>)
   21cb6:	0019      	movs	r1, r3
   21cb8:	0010      	movs	r0, r2
   21cba:	4b88      	ldr	r3, [pc, #544]	; (21edc <hif_send+0x368>)
   21cbc:	4798      	blx	r3
   21cbe:	0003      	movs	r3, r0
   21cc0:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
   21cc2:	231f      	movs	r3, #31
   21cc4:	18fb      	adds	r3, r7, r3
   21cc6:	781b      	ldrb	r3, [r3, #0]
   21cc8:	b25b      	sxtb	r3, r3
   21cca:	2b00      	cmp	r3, #0
   21ccc:	d147      	bne.n	21d5e <hif_send+0x1ea>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
   21cce:	230e      	movs	r3, #14
   21cd0:	18fb      	adds	r3, r7, r3
   21cd2:	881b      	ldrh	r3, [r3, #0]
   21cd4:	b29a      	uxth	r2, r3
   21cd6:	23f4      	movs	r3, #244	; 0xf4
   21cd8:	33ff      	adds	r3, #255	; 0xff
   21cda:	429a      	cmp	r2, r3
   21cdc:	d916      	bls.n	21d0c <hif_send+0x198>
				if(cnt < 501) {
   21cde:	230e      	movs	r3, #14
   21ce0:	18fb      	adds	r3, r7, r3
   21ce2:	881b      	ldrh	r3, [r3, #0]
   21ce4:	b29a      	uxth	r2, r3
   21ce6:	23fa      	movs	r3, #250	; 0xfa
   21ce8:	005b      	lsls	r3, r3, #1
   21cea:	429a      	cmp	r2, r3
   21cec:	d80b      	bhi.n	21d06 <hif_send+0x192>
					M2M_INFO("Slowing down...\n");
   21cee:	4b7c      	ldr	r3, [pc, #496]	; (21ee0 <hif_send+0x36c>)
   21cf0:	0018      	movs	r0, r3
   21cf2:	4b7c      	ldr	r3, [pc, #496]	; (21ee4 <hif_send+0x370>)
   21cf4:	4798      	blx	r3
   21cf6:	4b7c      	ldr	r3, [pc, #496]	; (21ee8 <hif_send+0x374>)
   21cf8:	0018      	movs	r0, r3
   21cfa:	4b7a      	ldr	r3, [pc, #488]	; (21ee4 <hif_send+0x370>)
   21cfc:	4798      	blx	r3
   21cfe:	4b7b      	ldr	r3, [pc, #492]	; (21eec <hif_send+0x378>)
   21d00:	0018      	movs	r0, r3
   21d02:	4b78      	ldr	r3, [pc, #480]	; (21ee4 <hif_send+0x370>)
   21d04:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
   21d06:	2001      	movs	r0, #1
   21d08:	4b79      	ldr	r3, [pc, #484]	; (21ef0 <hif_send+0x37c>)
   21d0a:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
   21d0c:	697b      	ldr	r3, [r7, #20]
   21d0e:	2202      	movs	r2, #2
   21d10:	4013      	ands	r3, r2
   21d12:	d113      	bne.n	21d3c <hif_send+0x1c8>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
   21d14:	231f      	movs	r3, #31
   21d16:	18fc      	adds	r4, r7, r3
   21d18:	2310      	movs	r3, #16
   21d1a:	18fb      	adds	r3, r7, r3
   21d1c:	4a75      	ldr	r2, [pc, #468]	; (21ef4 <hif_send+0x380>)
   21d1e:	0019      	movs	r1, r3
   21d20:	0010      	movs	r0, r2
   21d22:	4b6e      	ldr	r3, [pc, #440]	; (21edc <hif_send+0x368>)
   21d24:	4798      	blx	r3
   21d26:	0003      	movs	r3, r0
   21d28:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
   21d2a:	231f      	movs	r3, #31
   21d2c:	18fb      	adds	r3, r7, r3
   21d2e:	781b      	ldrb	r3, [r3, #0]
   21d30:	b25b      	sxtb	r3, r3
   21d32:	2b00      	cmp	r3, #0
   21d34:	d015      	beq.n	21d62 <hif_send+0x1ee>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
   21d36:	2300      	movs	r3, #0
   21d38:	613b      	str	r3, [r7, #16]
					goto ERR1;
   21d3a:	e0bc      	b.n	21eb6 <hif_send+0x342>
		for(cnt = 0; cnt < 1000; cnt ++)
   21d3c:	230e      	movs	r3, #14
   21d3e:	18fb      	adds	r3, r7, r3
   21d40:	881b      	ldrh	r3, [r3, #0]
   21d42:	b29b      	uxth	r3, r3
   21d44:	3301      	adds	r3, #1
   21d46:	b29a      	uxth	r2, r3
   21d48:	230e      	movs	r3, #14
   21d4a:	18fb      	adds	r3, r7, r3
   21d4c:	801a      	strh	r2, [r3, #0]
   21d4e:	230e      	movs	r3, #14
   21d50:	18fb      	adds	r3, r7, r3
   21d52:	881b      	ldrh	r3, [r3, #0]
   21d54:	b29b      	uxth	r3, r3
   21d56:	4a68      	ldr	r2, [pc, #416]	; (21ef8 <hif_send+0x384>)
   21d58:	4293      	cmp	r3, r2
   21d5a:	d9a7      	bls.n	21cac <hif_send+0x138>
   21d5c:	e002      	b.n	21d64 <hif_send+0x1f0>
			if(ret != M2M_SUCCESS) break;
   21d5e:	46c0      	nop			; (mov r8, r8)
   21d60:	e000      	b.n	21d64 <hif_send+0x1f0>
				}
				/*in case of success break */
				break;
   21d62:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
   21d64:	693b      	ldr	r3, [r7, #16]
   21d66:	2b00      	cmp	r3, #0
   21d68:	d100      	bne.n	21d6c <hif_send+0x1f8>
   21d6a:	e074      	b.n	21e56 <hif_send+0x2e2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
   21d6c:	693b      	ldr	r3, [r7, #16]
   21d6e:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
   21d70:	2318      	movs	r3, #24
   21d72:	18fb      	adds	r3, r7, r3
   21d74:	885b      	ldrh	r3, [r3, #2]
   21d76:	b29a      	uxth	r2, r3
   21d78:	2318      	movs	r3, #24
   21d7a:	18fb      	adds	r3, r7, r3
   21d7c:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
   21d7e:	68bb      	ldr	r3, [r7, #8]
   21d80:	221f      	movs	r2, #31
   21d82:	18bc      	adds	r4, r7, r2
   21d84:	2218      	movs	r2, #24
   21d86:	18b9      	adds	r1, r7, r2
   21d88:	2208      	movs	r2, #8
   21d8a:	0018      	movs	r0, r3
   21d8c:	4b5b      	ldr	r3, [pc, #364]	; (21efc <hif_send+0x388>)
   21d8e:	4798      	blx	r3
   21d90:	0003      	movs	r3, r0
   21d92:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   21d94:	231f      	movs	r3, #31
   21d96:	18fb      	adds	r3, r7, r3
   21d98:	781b      	ldrb	r3, [r3, #0]
   21d9a:	b25b      	sxtb	r3, r3
   21d9c:	2b00      	cmp	r3, #0
   21d9e:	d000      	beq.n	21da2 <hif_send+0x22e>
   21da0:	e084      	b.n	21eac <hif_send+0x338>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
   21da2:	68bb      	ldr	r3, [r7, #8]
   21da4:	3308      	adds	r3, #8
   21da6:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
   21da8:	683b      	ldr	r3, [r7, #0]
   21daa:	2b00      	cmp	r3, #0
   21dac:	d016      	beq.n	21ddc <hif_send+0x268>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
   21dae:	68b8      	ldr	r0, [r7, #8]
   21db0:	1d3b      	adds	r3, r7, #4
   21db2:	881a      	ldrh	r2, [r3, #0]
   21db4:	231f      	movs	r3, #31
   21db6:	18fc      	adds	r4, r7, r3
   21db8:	683b      	ldr	r3, [r7, #0]
   21dba:	0019      	movs	r1, r3
   21dbc:	4b4f      	ldr	r3, [pc, #316]	; (21efc <hif_send+0x388>)
   21dbe:	4798      	blx	r3
   21dc0:	0003      	movs	r3, r0
   21dc2:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   21dc4:	231f      	movs	r3, #31
   21dc6:	18fb      	adds	r3, r7, r3
   21dc8:	781b      	ldrb	r3, [r3, #0]
   21dca:	b25b      	sxtb	r3, r3
   21dcc:	2b00      	cmp	r3, #0
   21dce:	d000      	beq.n	21dd2 <hif_send+0x25e>
   21dd0:	e06e      	b.n	21eb0 <hif_send+0x33c>
				u32CurrAddr += u16CtrlBufSize;
   21dd2:	1d3b      	adds	r3, r7, #4
   21dd4:	881a      	ldrh	r2, [r3, #0]
   21dd6:	68bb      	ldr	r3, [r7, #8]
   21dd8:	18d3      	adds	r3, r2, r3
   21dda:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
   21ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   21dde:	2b00      	cmp	r3, #0
   21de0:	d021      	beq.n	21e26 <hif_send+0x2b2>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
   21de2:	2338      	movs	r3, #56	; 0x38
   21de4:	18fb      	adds	r3, r7, r3
   21de6:	881a      	ldrh	r2, [r3, #0]
   21de8:	1d3b      	adds	r3, r7, #4
   21dea:	881b      	ldrh	r3, [r3, #0]
   21dec:	1ad3      	subs	r3, r2, r3
   21dee:	001a      	movs	r2, r3
   21df0:	68bb      	ldr	r3, [r7, #8]
   21df2:	18d3      	adds	r3, r2, r3
   21df4:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
   21df6:	68b8      	ldr	r0, [r7, #8]
   21df8:	2334      	movs	r3, #52	; 0x34
   21dfa:	18fb      	adds	r3, r7, r3
   21dfc:	881a      	ldrh	r2, [r3, #0]
   21dfe:	231f      	movs	r3, #31
   21e00:	18fc      	adds	r4, r7, r3
   21e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   21e04:	0019      	movs	r1, r3
   21e06:	4b3d      	ldr	r3, [pc, #244]	; (21efc <hif_send+0x388>)
   21e08:	4798      	blx	r3
   21e0a:	0003      	movs	r3, r0
   21e0c:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   21e0e:	231f      	movs	r3, #31
   21e10:	18fb      	adds	r3, r7, r3
   21e12:	781b      	ldrb	r3, [r3, #0]
   21e14:	b25b      	sxtb	r3, r3
   21e16:	2b00      	cmp	r3, #0
   21e18:	d14c      	bne.n	21eb4 <hif_send+0x340>
				u32CurrAddr += u16DataSize;
   21e1a:	2334      	movs	r3, #52	; 0x34
   21e1c:	18fb      	adds	r3, r7, r3
   21e1e:	881a      	ldrh	r2, [r3, #0]
   21e20:	68bb      	ldr	r3, [r7, #8]
   21e22:	18d3      	adds	r3, r2, r3
   21e24:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
   21e26:	693b      	ldr	r3, [r7, #16]
   21e28:	009b      	lsls	r3, r3, #2
   21e2a:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
   21e2c:	697b      	ldr	r3, [r7, #20]
   21e2e:	2202      	movs	r2, #2
   21e30:	4313      	orrs	r3, r2
   21e32:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
   21e34:	697b      	ldr	r3, [r7, #20]
   21e36:	221f      	movs	r2, #31
   21e38:	18bc      	adds	r4, r7, r2
   21e3a:	4a31      	ldr	r2, [pc, #196]	; (21f00 <hif_send+0x38c>)
   21e3c:	0019      	movs	r1, r3
   21e3e:	0010      	movs	r0, r2
   21e40:	4b24      	ldr	r3, [pc, #144]	; (21ed4 <hif_send+0x360>)
   21e42:	4798      	blx	r3
   21e44:	0003      	movs	r3, r0
   21e46:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   21e48:	231f      	movs	r3, #31
   21e4a:	18fb      	adds	r3, r7, r3
   21e4c:	781b      	ldrb	r3, [r3, #0]
   21e4e:	b25b      	sxtb	r3, r3
   21e50:	2b00      	cmp	r3, #0
   21e52:	d01c      	beq.n	21e8e <hif_send+0x31a>
   21e54:	e02f      	b.n	21eb6 <hif_send+0x342>
		}
		else
		{
			ret = hif_chip_sleep();
   21e56:	231f      	movs	r3, #31
   21e58:	18fc      	adds	r4, r7, r3
   21e5a:	4b2a      	ldr	r3, [pc, #168]	; (21f04 <hif_send+0x390>)
   21e5c:	4798      	blx	r3
   21e5e:	0003      	movs	r3, r0
   21e60:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
   21e62:	231f      	movs	r3, #31
   21e64:	18fb      	adds	r3, r7, r3
   21e66:	22fd      	movs	r2, #253	; 0xfd
   21e68:	701a      	strb	r2, [r3, #0]
			goto ERR2;
   21e6a:	e026      	b.n	21eba <hif_send+0x346>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
   21e6c:	2398      	movs	r3, #152	; 0x98
   21e6e:	33ff      	adds	r3, #255	; 0xff
   21e70:	001a      	movs	r2, r3
   21e72:	4925      	ldr	r1, [pc, #148]	; (21f08 <hif_send+0x394>)
   21e74:	4b25      	ldr	r3, [pc, #148]	; (21f0c <hif_send+0x398>)
   21e76:	0018      	movs	r0, r3
   21e78:	4b1a      	ldr	r3, [pc, #104]	; (21ee4 <hif_send+0x370>)
   21e7a:	4798      	blx	r3
   21e7c:	4b24      	ldr	r3, [pc, #144]	; (21f10 <hif_send+0x39c>)
   21e7e:	0018      	movs	r0, r3
   21e80:	4b18      	ldr	r3, [pc, #96]	; (21ee4 <hif_send+0x370>)
   21e82:	4798      	blx	r3
   21e84:	4b19      	ldr	r3, [pc, #100]	; (21eec <hif_send+0x378>)
   21e86:	0018      	movs	r0, r3
   21e88:	4b16      	ldr	r3, [pc, #88]	; (21ee4 <hif_send+0x370>)
   21e8a:	4798      	blx	r3
		goto ERR2;
   21e8c:	e015      	b.n	21eba <hif_send+0x346>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
   21e8e:	231f      	movs	r3, #31
   21e90:	18fc      	adds	r4, r7, r3
   21e92:	4b1c      	ldr	r3, [pc, #112]	; (21f04 <hif_send+0x390>)
   21e94:	4798      	blx	r3
   21e96:	0003      	movs	r3, r0
   21e98:	7023      	strb	r3, [r4, #0]
	return ret;
   21e9a:	231f      	movs	r3, #31
   21e9c:	18fb      	adds	r3, r7, r3
   21e9e:	781b      	ldrb	r3, [r3, #0]
   21ea0:	b25b      	sxtb	r3, r3
   21ea2:	e00e      	b.n	21ec2 <hif_send+0x34e>
		if(M2M_SUCCESS != ret) goto ERR1;
   21ea4:	46c0      	nop			; (mov r8, r8)
   21ea6:	e006      	b.n	21eb6 <hif_send+0x342>
		if(M2M_SUCCESS != ret) goto ERR1;
   21ea8:	46c0      	nop			; (mov r8, r8)
   21eaa:	e004      	b.n	21eb6 <hif_send+0x342>
			if(M2M_SUCCESS != ret) goto ERR1;
   21eac:	46c0      	nop			; (mov r8, r8)
   21eae:	e002      	b.n	21eb6 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   21eb0:	46c0      	nop			; (mov r8, r8)
   21eb2:	e000      	b.n	21eb6 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   21eb4:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
   21eb6:	4b17      	ldr	r3, [pc, #92]	; (21f14 <hif_send+0x3a0>)
   21eb8:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
   21eba:	231f      	movs	r3, #31
   21ebc:	18fb      	adds	r3, r7, r3
   21ebe:	781b      	ldrb	r3, [r3, #0]
   21ec0:	b25b      	sxtb	r3, r3
}
   21ec2:	0018      	movs	r0, r3
   21ec4:	46bd      	mov	sp, r7
   21ec6:	b009      	add	sp, #36	; 0x24
   21ec8:	bd90      	pop	{r4, r7, pc}
   21eca:	46c0      	nop			; (mov r8, r8)
   21ecc:	00021a3d 	.word	0x00021a3d
   21ed0:	0000108c 	.word	0x0000108c
   21ed4:	000239c9 	.word	0x000239c9
   21ed8:	00001078 	.word	0x00001078
   21edc:	000239a5 	.word	0x000239a5
   21ee0:	000390f4 	.word	0x000390f4
   21ee4:	0001eb7d 	.word	0x0001eb7d
   21ee8:	00039100 	.word	0x00039100
   21eec:	00039114 	.word	0x00039114
   21ef0:	00021035 	.word	0x00021035
   21ef4:	00150400 	.word	0x00150400
   21ef8:	000003e7 	.word	0x000003e7
   21efc:	00023b11 	.word	0x00023b11
   21f00:	0000106c 	.word	0x0000106c
   21f04:	00021ad5 	.word	0x00021ad5
   21f08:	0003941c 	.word	0x0003941c
   21f0c:	00039118 	.word	0x00039118
   21f10:	0003912c 	.word	0x0003912c
   21f14:	00021aad 	.word	0x00021aad

00021f18 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
   21f18:	b590      	push	{r4, r7, lr}
   21f1a:	b087      	sub	sp, #28
   21f1c:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
   21f1e:	230f      	movs	r3, #15
   21f20:	18fb      	adds	r3, r7, r3
   21f22:	2200      	movs	r2, #0
   21f24:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
   21f26:	230f      	movs	r3, #15
   21f28:	18fc      	adds	r4, r7, r3
   21f2a:	2308      	movs	r3, #8
   21f2c:	18fb      	adds	r3, r7, r3
   21f2e:	4adc      	ldr	r2, [pc, #880]	; (222a0 <hif_isr+0x388>)
   21f30:	0019      	movs	r1, r3
   21f32:	0010      	movs	r0, r2
   21f34:	4bdb      	ldr	r3, [pc, #876]	; (222a4 <hif_isr+0x38c>)
   21f36:	4798      	blx	r3
   21f38:	0003      	movs	r3, r0
   21f3a:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
   21f3c:	230f      	movs	r3, #15
   21f3e:	18fb      	adds	r3, r7, r3
   21f40:	781b      	ldrb	r3, [r3, #0]
   21f42:	b25b      	sxtb	r3, r3
   21f44:	2b00      	cmp	r3, #0
   21f46:	d000      	beq.n	21f4a <hif_isr+0x32>
   21f48:	e21e      	b.n	22388 <hif_isr+0x470>
	{
		if(reg & 0x1)	/* New interrupt has been received */
   21f4a:	68bb      	ldr	r3, [r7, #8]
   21f4c:	2201      	movs	r2, #1
   21f4e:	4013      	ands	r3, r2
   21f50:	d100      	bne.n	21f54 <hif_isr+0x3c>
   21f52:	e204      	b.n	2235e <hif_isr+0x446>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
   21f54:	2000      	movs	r0, #0
   21f56:	4bd4      	ldr	r3, [pc, #848]	; (222a8 <hif_isr+0x390>)
   21f58:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
   21f5a:	68bb      	ldr	r3, [r7, #8]
   21f5c:	2201      	movs	r2, #1
   21f5e:	4393      	bics	r3, r2
   21f60:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   21f62:	68bb      	ldr	r3, [r7, #8]
   21f64:	220f      	movs	r2, #15
   21f66:	18bc      	adds	r4, r7, r2
   21f68:	4acd      	ldr	r2, [pc, #820]	; (222a0 <hif_isr+0x388>)
   21f6a:	0019      	movs	r1, r3
   21f6c:	0010      	movs	r0, r2
   21f6e:	4bcf      	ldr	r3, [pc, #828]	; (222ac <hif_isr+0x394>)
   21f70:	4798      	blx	r3
   21f72:	0003      	movs	r3, r0
   21f74:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   21f76:	230f      	movs	r3, #15
   21f78:	18fb      	adds	r3, r7, r3
   21f7a:	781b      	ldrb	r3, [r3, #0]
   21f7c:	b25b      	sxtb	r3, r3
   21f7e:	2b00      	cmp	r3, #0
   21f80:	d000      	beq.n	21f84 <hif_isr+0x6c>
   21f82:	e210      	b.n	223a6 <hif_isr+0x48e>
			gstrHifCxt.u8HifRXDone = 1;
   21f84:	4bca      	ldr	r3, [pc, #808]	; (222b0 <hif_isr+0x398>)
   21f86:	2201      	movs	r2, #1
   21f88:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
   21f8a:	68bb      	ldr	r3, [r7, #8]
   21f8c:	089b      	lsrs	r3, r3, #2
   21f8e:	b29a      	uxth	r2, r3
   21f90:	230c      	movs	r3, #12
   21f92:	18fb      	adds	r3, r7, r3
   21f94:	0512      	lsls	r2, r2, #20
   21f96:	0d12      	lsrs	r2, r2, #20
   21f98:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
   21f9a:	230c      	movs	r3, #12
   21f9c:	18fb      	adds	r3, r7, r3
   21f9e:	881b      	ldrh	r3, [r3, #0]
   21fa0:	2b00      	cmp	r3, #0
   21fa2:	d100      	bne.n	21fa6 <hif_isr+0x8e>
   21fa4:	e1c8      	b.n	22338 <hif_isr+0x420>
				uint32 address = 0;
   21fa6:	2300      	movs	r3, #0
   21fa8:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
   21faa:	230f      	movs	r3, #15
   21fac:	18fc      	adds	r4, r7, r3
   21fae:	003b      	movs	r3, r7
   21fb0:	4ac0      	ldr	r2, [pc, #768]	; (222b4 <hif_isr+0x39c>)
   21fb2:	0019      	movs	r1, r3
   21fb4:	0010      	movs	r0, r2
   21fb6:	4bbb      	ldr	r3, [pc, #748]	; (222a4 <hif_isr+0x38c>)
   21fb8:	4798      	blx	r3
   21fba:	0003      	movs	r3, r0
   21fbc:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
   21fbe:	230f      	movs	r3, #15
   21fc0:	18fb      	adds	r3, r7, r3
   21fc2:	781b      	ldrb	r3, [r3, #0]
   21fc4:	b25b      	sxtb	r3, r3
   21fc6:	2b00      	cmp	r3, #0
   21fc8:	d012      	beq.n	21ff0 <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
   21fca:	23e4      	movs	r3, #228	; 0xe4
   21fcc:	005a      	lsls	r2, r3, #1
   21fce:	49ba      	ldr	r1, [pc, #744]	; (222b8 <hif_isr+0x3a0>)
   21fd0:	4bba      	ldr	r3, [pc, #744]	; (222bc <hif_isr+0x3a4>)
   21fd2:	0018      	movs	r0, r3
   21fd4:	4bba      	ldr	r3, [pc, #744]	; (222c0 <hif_isr+0x3a8>)
   21fd6:	4798      	blx	r3
   21fd8:	4bba      	ldr	r3, [pc, #744]	; (222c4 <hif_isr+0x3ac>)
   21fda:	0018      	movs	r0, r3
   21fdc:	4bb8      	ldr	r3, [pc, #736]	; (222c0 <hif_isr+0x3a8>)
   21fde:	4798      	blx	r3
   21fe0:	4bb9      	ldr	r3, [pc, #740]	; (222c8 <hif_isr+0x3b0>)
   21fe2:	0018      	movs	r0, r3
   21fe4:	4bb6      	ldr	r3, [pc, #728]	; (222c0 <hif_isr+0x3a8>)
   21fe6:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   21fe8:	2001      	movs	r0, #1
   21fea:	4baf      	ldr	r3, [pc, #700]	; (222a8 <hif_isr+0x390>)
   21fec:	4798      	blx	r3
					goto ERR1;
   21fee:	e1db      	b.n	223a8 <hif_isr+0x490>
				}
				gstrHifCxt.u32RxAddr = address;
   21ff0:	683a      	ldr	r2, [r7, #0]
   21ff2:	4baf      	ldr	r3, [pc, #700]	; (222b0 <hif_isr+0x398>)
   21ff4:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
   21ff6:	230c      	movs	r3, #12
   21ff8:	18fb      	adds	r3, r7, r3
   21ffa:	881a      	ldrh	r2, [r3, #0]
   21ffc:	4bac      	ldr	r3, [pc, #688]	; (222b0 <hif_isr+0x398>)
   21ffe:	60da      	str	r2, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
   22000:	683b      	ldr	r3, [r7, #0]
   22002:	220f      	movs	r2, #15
   22004:	18bc      	adds	r4, r7, r2
   22006:	1d39      	adds	r1, r7, #4
   22008:	2204      	movs	r2, #4
   2200a:	0018      	movs	r0, r3
   2200c:	4baf      	ldr	r3, [pc, #700]	; (222cc <hif_isr+0x3b4>)
   2200e:	4798      	blx	r3
   22010:	0003      	movs	r3, r0
   22012:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
   22014:	1d3b      	adds	r3, r7, #4
   22016:	885b      	ldrh	r3, [r3, #2]
   22018:	b29a      	uxth	r2, r3
   2201a:	1d3b      	adds	r3, r7, #4
   2201c:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
   2201e:	230f      	movs	r3, #15
   22020:	18fb      	adds	r3, r7, r3
   22022:	781b      	ldrb	r3, [r3, #0]
   22024:	b25b      	sxtb	r3, r3
   22026:	2b00      	cmp	r3, #0
   22028:	d012      	beq.n	22050 <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
   2202a:	23e9      	movs	r3, #233	; 0xe9
   2202c:	005a      	lsls	r2, r3, #1
   2202e:	49a2      	ldr	r1, [pc, #648]	; (222b8 <hif_isr+0x3a0>)
   22030:	4ba2      	ldr	r3, [pc, #648]	; (222bc <hif_isr+0x3a4>)
   22032:	0018      	movs	r0, r3
   22034:	4ba2      	ldr	r3, [pc, #648]	; (222c0 <hif_isr+0x3a8>)
   22036:	4798      	blx	r3
   22038:	4ba5      	ldr	r3, [pc, #660]	; (222d0 <hif_isr+0x3b8>)
   2203a:	0018      	movs	r0, r3
   2203c:	4ba0      	ldr	r3, [pc, #640]	; (222c0 <hif_isr+0x3a8>)
   2203e:	4798      	blx	r3
   22040:	4ba1      	ldr	r3, [pc, #644]	; (222c8 <hif_isr+0x3b0>)
   22042:	0018      	movs	r0, r3
   22044:	4b9e      	ldr	r3, [pc, #632]	; (222c0 <hif_isr+0x3a8>)
   22046:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   22048:	2001      	movs	r0, #1
   2204a:	4b97      	ldr	r3, [pc, #604]	; (222a8 <hif_isr+0x390>)
   2204c:	4798      	blx	r3
					goto ERR1;
   2204e:	e1ab      	b.n	223a8 <hif_isr+0x490>
				}
				if(strHif.u16Length != size)
   22050:	1d3b      	adds	r3, r7, #4
   22052:	885b      	ldrh	r3, [r3, #2]
   22054:	b29b      	uxth	r3, r3
   22056:	220c      	movs	r2, #12
   22058:	18ba      	adds	r2, r7, r2
   2205a:	8812      	ldrh	r2, [r2, #0]
   2205c:	429a      	cmp	r2, r3
   2205e:	d02f      	beq.n	220c0 <hif_isr+0x1a8>
				{
					if((size - strHif.u16Length) > 4)
   22060:	230c      	movs	r3, #12
   22062:	18fb      	adds	r3, r7, r3
   22064:	881b      	ldrh	r3, [r3, #0]
   22066:	1d3a      	adds	r2, r7, #4
   22068:	8852      	ldrh	r2, [r2, #2]
   2206a:	b292      	uxth	r2, r2
   2206c:	1a9b      	subs	r3, r3, r2
   2206e:	2b04      	cmp	r3, #4
   22070:	dd26      	ble.n	220c0 <hif_isr+0x1a8>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
   22072:	23dc      	movs	r3, #220	; 0xdc
   22074:	33ff      	adds	r3, #255	; 0xff
   22076:	001a      	movs	r2, r3
   22078:	498f      	ldr	r1, [pc, #572]	; (222b8 <hif_isr+0x3a0>)
   2207a:	4b90      	ldr	r3, [pc, #576]	; (222bc <hif_isr+0x3a4>)
   2207c:	0018      	movs	r0, r3
   2207e:	4b90      	ldr	r3, [pc, #576]	; (222c0 <hif_isr+0x3a8>)
   22080:	4798      	blx	r3
   22082:	230c      	movs	r3, #12
   22084:	18fb      	adds	r3, r7, r3
   22086:	8819      	ldrh	r1, [r3, #0]
   22088:	1d3b      	adds	r3, r7, #4
   2208a:	885b      	ldrh	r3, [r3, #2]
   2208c:	b29b      	uxth	r3, r3
   2208e:	001a      	movs	r2, r3
   22090:	1d3b      	adds	r3, r7, #4
   22092:	781b      	ldrb	r3, [r3, #0]
   22094:	b2db      	uxtb	r3, r3
   22096:	001c      	movs	r4, r3
   22098:	1d3b      	adds	r3, r7, #4
   2209a:	785b      	ldrb	r3, [r3, #1]
   2209c:	b2db      	uxtb	r3, r3
   2209e:	488d      	ldr	r0, [pc, #564]	; (222d4 <hif_isr+0x3bc>)
   220a0:	9300      	str	r3, [sp, #0]
   220a2:	0023      	movs	r3, r4
   220a4:	4c86      	ldr	r4, [pc, #536]	; (222c0 <hif_isr+0x3a8>)
   220a6:	47a0      	blx	r4
   220a8:	4b87      	ldr	r3, [pc, #540]	; (222c8 <hif_isr+0x3b0>)
   220aa:	0018      	movs	r0, r3
   220ac:	4b84      	ldr	r3, [pc, #528]	; (222c0 <hif_isr+0x3a8>)
   220ae:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
   220b0:	2001      	movs	r0, #1
   220b2:	4b7d      	ldr	r3, [pc, #500]	; (222a8 <hif_isr+0x390>)
   220b4:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
   220b6:	230f      	movs	r3, #15
   220b8:	18fb      	adds	r3, r7, r3
   220ba:	22fa      	movs	r2, #250	; 0xfa
   220bc:	701a      	strb	r2, [r3, #0]
						goto ERR1;
   220be:	e173      	b.n	223a8 <hif_isr+0x490>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
   220c0:	1d3b      	adds	r3, r7, #4
   220c2:	781b      	ldrb	r3, [r3, #0]
   220c4:	b2db      	uxtb	r3, r3
   220c6:	2b01      	cmp	r3, #1
   220c8:	d122      	bne.n	22110 <hif_isr+0x1f8>
				{
					if(gstrHifCxt.pfWifiCb)
   220ca:	4b79      	ldr	r3, [pc, #484]	; (222b0 <hif_isr+0x398>)
   220cc:	691b      	ldr	r3, [r3, #16]
   220ce:	2b00      	cmp	r3, #0
   220d0:	d00d      	beq.n	220ee <hif_isr+0x1d6>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   220d2:	4b77      	ldr	r3, [pc, #476]	; (222b0 <hif_isr+0x398>)
   220d4:	691b      	ldr	r3, [r3, #16]
   220d6:	1d3a      	adds	r2, r7, #4
   220d8:	7852      	ldrb	r2, [r2, #1]
   220da:	b2d0      	uxtb	r0, r2
   220dc:	1d3a      	adds	r2, r7, #4
   220de:	8852      	ldrh	r2, [r2, #2]
   220e0:	b292      	uxth	r2, r2
   220e2:	3a08      	subs	r2, #8
   220e4:	b291      	uxth	r1, r2
   220e6:	683a      	ldr	r2, [r7, #0]
   220e8:	3208      	adds	r2, #8
   220ea:	4798      	blx	r3
   220ec:	e102      	b.n	222f4 <hif_isr+0x3dc>
					else
						M2M_ERR("WIFI callback is not registered\n");
   220ee:	23e8      	movs	r3, #232	; 0xe8
   220f0:	33ff      	adds	r3, #255	; 0xff
   220f2:	001a      	movs	r2, r3
   220f4:	4970      	ldr	r1, [pc, #448]	; (222b8 <hif_isr+0x3a0>)
   220f6:	4b71      	ldr	r3, [pc, #452]	; (222bc <hif_isr+0x3a4>)
   220f8:	0018      	movs	r0, r3
   220fa:	4b71      	ldr	r3, [pc, #452]	; (222c0 <hif_isr+0x3a8>)
   220fc:	4798      	blx	r3
   220fe:	4b76      	ldr	r3, [pc, #472]	; (222d8 <hif_isr+0x3c0>)
   22100:	0018      	movs	r0, r3
   22102:	4b6f      	ldr	r3, [pc, #444]	; (222c0 <hif_isr+0x3a8>)
   22104:	4798      	blx	r3
   22106:	4b70      	ldr	r3, [pc, #448]	; (222c8 <hif_isr+0x3b0>)
   22108:	0018      	movs	r0, r3
   2210a:	4b6d      	ldr	r3, [pc, #436]	; (222c0 <hif_isr+0x3a8>)
   2210c:	4798      	blx	r3
   2210e:	e0f1      	b.n	222f4 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
   22110:	1d3b      	adds	r3, r7, #4
   22112:	781b      	ldrb	r3, [r3, #0]
   22114:	b2db      	uxtb	r3, r3
   22116:	2b02      	cmp	r3, #2
   22118:	d122      	bne.n	22160 <hif_isr+0x248>
				{
					if(gstrHifCxt.pfIpCb)
   2211a:	4b65      	ldr	r3, [pc, #404]	; (222b0 <hif_isr+0x398>)
   2211c:	695b      	ldr	r3, [r3, #20]
   2211e:	2b00      	cmp	r3, #0
   22120:	d00d      	beq.n	2213e <hif_isr+0x226>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   22122:	4b63      	ldr	r3, [pc, #396]	; (222b0 <hif_isr+0x398>)
   22124:	695b      	ldr	r3, [r3, #20]
   22126:	1d3a      	adds	r2, r7, #4
   22128:	7852      	ldrb	r2, [r2, #1]
   2212a:	b2d0      	uxtb	r0, r2
   2212c:	1d3a      	adds	r2, r7, #4
   2212e:	8852      	ldrh	r2, [r2, #2]
   22130:	b292      	uxth	r2, r2
   22132:	3a08      	subs	r2, #8
   22134:	b291      	uxth	r1, r2
   22136:	683a      	ldr	r2, [r7, #0]
   22138:	3208      	adds	r2, #8
   2213a:	4798      	blx	r3
   2213c:	e0da      	b.n	222f4 <hif_isr+0x3dc>
					else
						M2M_ERR("Scoket callback is not registered\n");
   2213e:	23f0      	movs	r3, #240	; 0xf0
   22140:	33ff      	adds	r3, #255	; 0xff
   22142:	001a      	movs	r2, r3
   22144:	495c      	ldr	r1, [pc, #368]	; (222b8 <hif_isr+0x3a0>)
   22146:	4b5d      	ldr	r3, [pc, #372]	; (222bc <hif_isr+0x3a4>)
   22148:	0018      	movs	r0, r3
   2214a:	4b5d      	ldr	r3, [pc, #372]	; (222c0 <hif_isr+0x3a8>)
   2214c:	4798      	blx	r3
   2214e:	4b63      	ldr	r3, [pc, #396]	; (222dc <hif_isr+0x3c4>)
   22150:	0018      	movs	r0, r3
   22152:	4b5b      	ldr	r3, [pc, #364]	; (222c0 <hif_isr+0x3a8>)
   22154:	4798      	blx	r3
   22156:	4b5c      	ldr	r3, [pc, #368]	; (222c8 <hif_isr+0x3b0>)
   22158:	0018      	movs	r0, r3
   2215a:	4b59      	ldr	r3, [pc, #356]	; (222c0 <hif_isr+0x3a8>)
   2215c:	4798      	blx	r3
   2215e:	e0c9      	b.n	222f4 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
   22160:	1d3b      	adds	r3, r7, #4
   22162:	781b      	ldrb	r3, [r3, #0]
   22164:	b2db      	uxtb	r3, r3
   22166:	2b04      	cmp	r3, #4
   22168:	d122      	bne.n	221b0 <hif_isr+0x298>
				{
					if(gstrHifCxt.pfOtaCb)
   2216a:	4b51      	ldr	r3, [pc, #324]	; (222b0 <hif_isr+0x398>)
   2216c:	699b      	ldr	r3, [r3, #24]
   2216e:	2b00      	cmp	r3, #0
   22170:	d00d      	beq.n	2218e <hif_isr+0x276>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   22172:	4b4f      	ldr	r3, [pc, #316]	; (222b0 <hif_isr+0x398>)
   22174:	699b      	ldr	r3, [r3, #24]
   22176:	1d3a      	adds	r2, r7, #4
   22178:	7852      	ldrb	r2, [r2, #1]
   2217a:	b2d0      	uxtb	r0, r2
   2217c:	1d3a      	adds	r2, r7, #4
   2217e:	8852      	ldrh	r2, [r2, #2]
   22180:	b292      	uxth	r2, r2
   22182:	3a08      	subs	r2, #8
   22184:	b291      	uxth	r1, r2
   22186:	683a      	ldr	r2, [r7, #0]
   22188:	3208      	adds	r2, #8
   2218a:	4798      	blx	r3
   2218c:	e0b2      	b.n	222f4 <hif_isr+0x3dc>
					else
						M2M_ERR("Ota callback is not registered\n");
   2218e:	23f8      	movs	r3, #248	; 0xf8
   22190:	33ff      	adds	r3, #255	; 0xff
   22192:	001a      	movs	r2, r3
   22194:	4948      	ldr	r1, [pc, #288]	; (222b8 <hif_isr+0x3a0>)
   22196:	4b49      	ldr	r3, [pc, #292]	; (222bc <hif_isr+0x3a4>)
   22198:	0018      	movs	r0, r3
   2219a:	4b49      	ldr	r3, [pc, #292]	; (222c0 <hif_isr+0x3a8>)
   2219c:	4798      	blx	r3
   2219e:	4b50      	ldr	r3, [pc, #320]	; (222e0 <hif_isr+0x3c8>)
   221a0:	0018      	movs	r0, r3
   221a2:	4b47      	ldr	r3, [pc, #284]	; (222c0 <hif_isr+0x3a8>)
   221a4:	4798      	blx	r3
   221a6:	4b48      	ldr	r3, [pc, #288]	; (222c8 <hif_isr+0x3b0>)
   221a8:	0018      	movs	r0, r3
   221aa:	4b45      	ldr	r3, [pc, #276]	; (222c0 <hif_isr+0x3a8>)
   221ac:	4798      	blx	r3
   221ae:	e0a1      	b.n	222f4 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
   221b0:	1d3b      	adds	r3, r7, #4
   221b2:	781b      	ldrb	r3, [r3, #0]
   221b4:	b2db      	uxtb	r3, r3
   221b6:	2b06      	cmp	r3, #6
   221b8:	d121      	bne.n	221fe <hif_isr+0x2e6>
				{
					if(gstrHifCxt.pfCryptoCb)
   221ba:	4b3d      	ldr	r3, [pc, #244]	; (222b0 <hif_isr+0x398>)
   221bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   221be:	2b00      	cmp	r3, #0
   221c0:	d00d      	beq.n	221de <hif_isr+0x2c6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   221c2:	4b3b      	ldr	r3, [pc, #236]	; (222b0 <hif_isr+0x398>)
   221c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   221c6:	1d3a      	adds	r2, r7, #4
   221c8:	7852      	ldrb	r2, [r2, #1]
   221ca:	b2d0      	uxtb	r0, r2
   221cc:	1d3a      	adds	r2, r7, #4
   221ce:	8852      	ldrh	r2, [r2, #2]
   221d0:	b292      	uxth	r2, r2
   221d2:	3a08      	subs	r2, #8
   221d4:	b291      	uxth	r1, r2
   221d6:	683a      	ldr	r2, [r7, #0]
   221d8:	3208      	adds	r2, #8
   221da:	4798      	blx	r3
   221dc:	e08a      	b.n	222f4 <hif_isr+0x3dc>

					else
						M2M_ERR("Crypto callback is not registered\n");
   221de:	2380      	movs	r3, #128	; 0x80
   221e0:	009a      	lsls	r2, r3, #2
   221e2:	4935      	ldr	r1, [pc, #212]	; (222b8 <hif_isr+0x3a0>)
   221e4:	4b35      	ldr	r3, [pc, #212]	; (222bc <hif_isr+0x3a4>)
   221e6:	0018      	movs	r0, r3
   221e8:	4b35      	ldr	r3, [pc, #212]	; (222c0 <hif_isr+0x3a8>)
   221ea:	4798      	blx	r3
   221ec:	4b3d      	ldr	r3, [pc, #244]	; (222e4 <hif_isr+0x3cc>)
   221ee:	0018      	movs	r0, r3
   221f0:	4b33      	ldr	r3, [pc, #204]	; (222c0 <hif_isr+0x3a8>)
   221f2:	4798      	blx	r3
   221f4:	4b34      	ldr	r3, [pc, #208]	; (222c8 <hif_isr+0x3b0>)
   221f6:	0018      	movs	r0, r3
   221f8:	4b31      	ldr	r3, [pc, #196]	; (222c0 <hif_isr+0x3a8>)
   221fa:	4798      	blx	r3
   221fc:	e07a      	b.n	222f4 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
   221fe:	1d3b      	adds	r3, r7, #4
   22200:	781b      	ldrb	r3, [r3, #0]
   22202:	b2db      	uxtb	r3, r3
   22204:	2b07      	cmp	r3, #7
   22206:	d120      	bne.n	2224a <hif_isr+0x332>
				{
					if(gstrHifCxt.pfSigmaCb)
   22208:	4b29      	ldr	r3, [pc, #164]	; (222b0 <hif_isr+0x398>)
   2220a:	69db      	ldr	r3, [r3, #28]
   2220c:	2b00      	cmp	r3, #0
   2220e:	d00d      	beq.n	2222c <hif_isr+0x314>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   22210:	4b27      	ldr	r3, [pc, #156]	; (222b0 <hif_isr+0x398>)
   22212:	69db      	ldr	r3, [r3, #28]
   22214:	1d3a      	adds	r2, r7, #4
   22216:	7852      	ldrb	r2, [r2, #1]
   22218:	b2d0      	uxtb	r0, r2
   2221a:	1d3a      	adds	r2, r7, #4
   2221c:	8852      	ldrh	r2, [r2, #2]
   2221e:	b292      	uxth	r2, r2
   22220:	3a08      	subs	r2, #8
   22222:	b291      	uxth	r1, r2
   22224:	683a      	ldr	r2, [r7, #0]
   22226:	3208      	adds	r2, #8
   22228:	4798      	blx	r3
   2222a:	e063      	b.n	222f4 <hif_isr+0x3dc>
					else
						M2M_ERR("Sigma callback is not registered\n");
   2222c:	4a2e      	ldr	r2, [pc, #184]	; (222e8 <hif_isr+0x3d0>)
   2222e:	4922      	ldr	r1, [pc, #136]	; (222b8 <hif_isr+0x3a0>)
   22230:	4b22      	ldr	r3, [pc, #136]	; (222bc <hif_isr+0x3a4>)
   22232:	0018      	movs	r0, r3
   22234:	4b22      	ldr	r3, [pc, #136]	; (222c0 <hif_isr+0x3a8>)
   22236:	4798      	blx	r3
   22238:	4b2c      	ldr	r3, [pc, #176]	; (222ec <hif_isr+0x3d4>)
   2223a:	0018      	movs	r0, r3
   2223c:	4b20      	ldr	r3, [pc, #128]	; (222c0 <hif_isr+0x3a8>)
   2223e:	4798      	blx	r3
   22240:	4b21      	ldr	r3, [pc, #132]	; (222c8 <hif_isr+0x3b0>)
   22242:	0018      	movs	r0, r3
   22244:	4b1e      	ldr	r3, [pc, #120]	; (222c0 <hif_isr+0x3a8>)
   22246:	4798      	blx	r3
   22248:	e054      	b.n	222f4 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
   2224a:	1d3b      	adds	r3, r7, #4
   2224c:	781b      	ldrb	r3, [r3, #0]
   2224e:	b2db      	uxtb	r3, r3
   22250:	2b05      	cmp	r3, #5
   22252:	d111      	bne.n	22278 <hif_isr+0x360>
				{
				    if(gstrHifCxt.pfSslCb)
   22254:	4b16      	ldr	r3, [pc, #88]	; (222b0 <hif_isr+0x398>)
   22256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   22258:	2b00      	cmp	r3, #0
   2225a:	d04b      	beq.n	222f4 <hif_isr+0x3dc>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   2225c:	4b14      	ldr	r3, [pc, #80]	; (222b0 <hif_isr+0x398>)
   2225e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   22260:	1d3a      	adds	r2, r7, #4
   22262:	7852      	ldrb	r2, [r2, #1]
   22264:	b2d0      	uxtb	r0, r2
   22266:	1d3a      	adds	r2, r7, #4
   22268:	8852      	ldrh	r2, [r2, #2]
   2226a:	b292      	uxth	r2, r2
   2226c:	3a08      	subs	r2, #8
   2226e:	b291      	uxth	r1, r2
   22270:	683a      	ldr	r2, [r7, #0]
   22272:	3208      	adds	r2, #8
   22274:	4798      	blx	r3
   22276:	e03d      	b.n	222f4 <hif_isr+0x3dc>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
   22278:	2384      	movs	r3, #132	; 0x84
   2227a:	009a      	lsls	r2, r3, #2
   2227c:	490e      	ldr	r1, [pc, #56]	; (222b8 <hif_isr+0x3a0>)
   2227e:	4b0f      	ldr	r3, [pc, #60]	; (222bc <hif_isr+0x3a4>)
   22280:	0018      	movs	r0, r3
   22282:	4b0f      	ldr	r3, [pc, #60]	; (222c0 <hif_isr+0x3a8>)
   22284:	4798      	blx	r3
   22286:	4b1a      	ldr	r3, [pc, #104]	; (222f0 <hif_isr+0x3d8>)
   22288:	0018      	movs	r0, r3
   2228a:	4b0d      	ldr	r3, [pc, #52]	; (222c0 <hif_isr+0x3a8>)
   2228c:	4798      	blx	r3
   2228e:	4b0e      	ldr	r3, [pc, #56]	; (222c8 <hif_isr+0x3b0>)
   22290:	0018      	movs	r0, r3
   22292:	4b0b      	ldr	r3, [pc, #44]	; (222c0 <hif_isr+0x3a8>)
   22294:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
   22296:	230f      	movs	r3, #15
   22298:	18fb      	adds	r3, r7, r3
   2229a:	22fa      	movs	r2, #250	; 0xfa
   2229c:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   2229e:	e083      	b.n	223a8 <hif_isr+0x490>
   222a0:	00001070 	.word	0x00001070
   222a4:	000239a5 	.word	0x000239a5
   222a8:	000210c9 	.word	0x000210c9
   222ac:	000239c9 	.word	0x000239c9
   222b0:	20005714 	.word	0x20005714
   222b4:	00001084 	.word	0x00001084
   222b8:	00039428 	.word	0x00039428
   222bc:	00039118 	.word	0x00039118
   222c0:	0001eb7d 	.word	0x0001eb7d
   222c4:	0003914c 	.word	0x0003914c
   222c8:	00039114 	.word	0x00039114
   222cc:	00023a19 	.word	0x00023a19
   222d0:	00039174 	.word	0x00039174
   222d4:	0003918c 	.word	0x0003918c
   222d8:	000391cc 	.word	0x000391cc
   222dc:	000391f0 	.word	0x000391f0
   222e0:	00039214 	.word	0x00039214
   222e4:	00039234 	.word	0x00039234
   222e8:	00000207 	.word	0x00000207
   222ec:	00039258 	.word	0x00039258
   222f0:	0003927c 	.word	0x0003927c
				}
				if(gstrHifCxt.u8HifRXDone)
   222f4:	4b30      	ldr	r3, [pc, #192]	; (223b8 <hif_isr+0x4a0>)
   222f6:	789b      	ldrb	r3, [r3, #2]
   222f8:	b2db      	uxtb	r3, r3
   222fa:	2b00      	cmp	r3, #0
   222fc:	d054      	beq.n	223a8 <hif_isr+0x490>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
   222fe:	4a2f      	ldr	r2, [pc, #188]	; (223bc <hif_isr+0x4a4>)
   22300:	492f      	ldr	r1, [pc, #188]	; (223c0 <hif_isr+0x4a8>)
   22302:	4b30      	ldr	r3, [pc, #192]	; (223c4 <hif_isr+0x4ac>)
   22304:	0018      	movs	r0, r3
   22306:	4b30      	ldr	r3, [pc, #192]	; (223c8 <hif_isr+0x4b0>)
   22308:	4798      	blx	r3
   2230a:	1d3b      	adds	r3, r7, #4
   2230c:	781b      	ldrb	r3, [r3, #0]
   2230e:	b2db      	uxtb	r3, r3
   22310:	0019      	movs	r1, r3
   22312:	1d3b      	adds	r3, r7, #4
   22314:	785b      	ldrb	r3, [r3, #1]
   22316:	b2db      	uxtb	r3, r3
   22318:	001a      	movs	r2, r3
   2231a:	4b2c      	ldr	r3, [pc, #176]	; (223cc <hif_isr+0x4b4>)
   2231c:	0018      	movs	r0, r3
   2231e:	4b2a      	ldr	r3, [pc, #168]	; (223c8 <hif_isr+0x4b0>)
   22320:	4798      	blx	r3
   22322:	4b2b      	ldr	r3, [pc, #172]	; (223d0 <hif_isr+0x4b8>)
   22324:	0018      	movs	r0, r3
   22326:	4b28      	ldr	r3, [pc, #160]	; (223c8 <hif_isr+0x4b0>)
   22328:	4798      	blx	r3
					ret = hif_set_rx_done();
   2232a:	230f      	movs	r3, #15
   2232c:	18fc      	adds	r4, r7, r3
   2232e:	4b29      	ldr	r3, [pc, #164]	; (223d4 <hif_isr+0x4bc>)
   22330:	4798      	blx	r3
   22332:	0003      	movs	r3, r0
   22334:	7023      	strb	r3, [r4, #0]
   22336:	e037      	b.n	223a8 <hif_isr+0x490>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
   22338:	4a27      	ldr	r2, [pc, #156]	; (223d8 <hif_isr+0x4c0>)
   2233a:	4921      	ldr	r1, [pc, #132]	; (223c0 <hif_isr+0x4a8>)
   2233c:	4b21      	ldr	r3, [pc, #132]	; (223c4 <hif_isr+0x4ac>)
   2233e:	0018      	movs	r0, r3
   22340:	4b21      	ldr	r3, [pc, #132]	; (223c8 <hif_isr+0x4b0>)
   22342:	4798      	blx	r3
   22344:	4b25      	ldr	r3, [pc, #148]	; (223dc <hif_isr+0x4c4>)
   22346:	0018      	movs	r0, r3
   22348:	4b1f      	ldr	r3, [pc, #124]	; (223c8 <hif_isr+0x4b0>)
   2234a:	4798      	blx	r3
   2234c:	4b20      	ldr	r3, [pc, #128]	; (223d0 <hif_isr+0x4b8>)
   2234e:	0018      	movs	r0, r3
   22350:	4b1d      	ldr	r3, [pc, #116]	; (223c8 <hif_isr+0x4b0>)
   22352:	4798      	blx	r3
				ret = M2M_ERR_RCV;
   22354:	230f      	movs	r3, #15
   22356:	18fb      	adds	r3, r7, r3
   22358:	22fe      	movs	r2, #254	; 0xfe
   2235a:	701a      	strb	r2, [r3, #0]
				goto ERR1;
   2235c:	e024      	b.n	223a8 <hif_isr+0x490>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
   2235e:	4a20      	ldr	r2, [pc, #128]	; (223e0 <hif_isr+0x4c8>)
   22360:	4917      	ldr	r1, [pc, #92]	; (223c0 <hif_isr+0x4a8>)
   22362:	4b18      	ldr	r3, [pc, #96]	; (223c4 <hif_isr+0x4ac>)
   22364:	0018      	movs	r0, r3
   22366:	4b18      	ldr	r3, [pc, #96]	; (223c8 <hif_isr+0x4b0>)
   22368:	4798      	blx	r3
   2236a:	68ba      	ldr	r2, [r7, #8]
   2236c:	4b1d      	ldr	r3, [pc, #116]	; (223e4 <hif_isr+0x4cc>)
   2236e:	0011      	movs	r1, r2
   22370:	0018      	movs	r0, r3
   22372:	4b15      	ldr	r3, [pc, #84]	; (223c8 <hif_isr+0x4b0>)
   22374:	4798      	blx	r3
   22376:	4b16      	ldr	r3, [pc, #88]	; (223d0 <hif_isr+0x4b8>)
   22378:	0018      	movs	r0, r3
   2237a:	4b13      	ldr	r3, [pc, #76]	; (223c8 <hif_isr+0x4b0>)
   2237c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   2237e:	230f      	movs	r3, #15
   22380:	18fb      	adds	r3, r7, r3
   22382:	22f4      	movs	r2, #244	; 0xf4
   22384:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   22386:	e00f      	b.n	223a8 <hif_isr+0x490>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
   22388:	4a17      	ldr	r2, [pc, #92]	; (223e8 <hif_isr+0x4d0>)
   2238a:	490d      	ldr	r1, [pc, #52]	; (223c0 <hif_isr+0x4a8>)
   2238c:	4b0d      	ldr	r3, [pc, #52]	; (223c4 <hif_isr+0x4ac>)
   2238e:	0018      	movs	r0, r3
   22390:	4b0d      	ldr	r3, [pc, #52]	; (223c8 <hif_isr+0x4b0>)
   22392:	4798      	blx	r3
   22394:	4b15      	ldr	r3, [pc, #84]	; (223ec <hif_isr+0x4d4>)
   22396:	0018      	movs	r0, r3
   22398:	4b0b      	ldr	r3, [pc, #44]	; (223c8 <hif_isr+0x4b0>)
   2239a:	4798      	blx	r3
   2239c:	4b0c      	ldr	r3, [pc, #48]	; (223d0 <hif_isr+0x4b8>)
   2239e:	0018      	movs	r0, r3
   223a0:	4b09      	ldr	r3, [pc, #36]	; (223c8 <hif_isr+0x4b0>)
   223a2:	4798      	blx	r3
		goto ERR1;
   223a4:	e000      	b.n	223a8 <hif_isr+0x490>
			if(ret != M2M_SUCCESS)goto ERR1;
   223a6:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   223a8:	230f      	movs	r3, #15
   223aa:	18fb      	adds	r3, r7, r3
   223ac:	781b      	ldrb	r3, [r3, #0]
   223ae:	b25b      	sxtb	r3, r3
}
   223b0:	0018      	movs	r0, r3
   223b2:	46bd      	mov	sp, r7
   223b4:	b005      	add	sp, #20
   223b6:	bd90      	pop	{r4, r7, pc}
   223b8:	20005714 	.word	0x20005714
   223bc:	00000216 	.word	0x00000216
   223c0:	00039428 	.word	0x00039428
   223c4:	00039118 	.word	0x00039118
   223c8:	0001eb7d 	.word	0x0001eb7d
   223cc:	00039294 	.word	0x00039294
   223d0:	00039114 	.word	0x00039114
   223d4:	000219ad 	.word	0x000219ad
   223d8:	0000021d 	.word	0x0000021d
   223dc:	000392c0 	.word	0x000392c0
   223e0:	00000225 	.word	0x00000225
   223e4:	000392d4 	.word	0x000392d4
   223e8:	0000022e 	.word	0x0000022e
   223ec:	000392f0 	.word	0x000392f0

000223f0 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
   223f0:	b590      	push	{r4, r7, lr}
   223f2:	b083      	sub	sp, #12
   223f4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
   223f6:	1dfb      	adds	r3, r7, #7
   223f8:	2200      	movs	r2, #0
   223fa:	701a      	strb	r2, [r3, #0]
	
	gstrHifCxt.u8Yield = 0;
   223fc:	4b1c      	ldr	r3, [pc, #112]	; (22470 <hif_handle_isr+0x80>)
   223fe:	2200      	movs	r2, #0
   22400:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   22402:	e024      	b.n	2244e <hif_handle_isr+0x5e>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
   22404:	4b1a      	ldr	r3, [pc, #104]	; (22470 <hif_handle_isr+0x80>)
   22406:	78db      	ldrb	r3, [r3, #3]
   22408:	b2db      	uxtb	r3, r3
   2240a:	3b01      	subs	r3, #1
   2240c:	b2da      	uxtb	r2, r3
   2240e:	4b18      	ldr	r3, [pc, #96]	; (22470 <hif_handle_isr+0x80>)
   22410:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
   22412:	1dfc      	adds	r4, r7, #7
   22414:	4b17      	ldr	r3, [pc, #92]	; (22474 <hif_handle_isr+0x84>)
   22416:	4798      	blx	r3
   22418:	0003      	movs	r3, r0
   2241a:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   2241c:	1dfb      	adds	r3, r7, #7
   2241e:	781b      	ldrb	r3, [r3, #0]
   22420:	b25b      	sxtb	r3, r3
   22422:	2b00      	cmp	r3, #0
   22424:	d100      	bne.n	22428 <hif_handle_isr+0x38>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
   22426:	e012      	b.n	2244e <hif_handle_isr+0x5e>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
   22428:	4a13      	ldr	r2, [pc, #76]	; (22478 <hif_handle_isr+0x88>)
   2242a:	4914      	ldr	r1, [pc, #80]	; (2247c <hif_handle_isr+0x8c>)
   2242c:	4b14      	ldr	r3, [pc, #80]	; (22480 <hif_handle_isr+0x90>)
   2242e:	0018      	movs	r0, r3
   22430:	4b14      	ldr	r3, [pc, #80]	; (22484 <hif_handle_isr+0x94>)
   22432:	4798      	blx	r3
   22434:	1dfb      	adds	r3, r7, #7
   22436:	2200      	movs	r2, #0
   22438:	569a      	ldrsb	r2, [r3, r2]
   2243a:	4b13      	ldr	r3, [pc, #76]	; (22488 <hif_handle_isr+0x98>)
   2243c:	0011      	movs	r1, r2
   2243e:	0018      	movs	r0, r3
   22440:	4b10      	ldr	r3, [pc, #64]	; (22484 <hif_handle_isr+0x94>)
   22442:	4798      	blx	r3
   22444:	4b11      	ldr	r3, [pc, #68]	; (2248c <hif_handle_isr+0x9c>)
   22446:	0018      	movs	r0, r3
   22448:	4b0e      	ldr	r3, [pc, #56]	; (22484 <hif_handle_isr+0x94>)
   2244a:	4798      	blx	r3
			ret = hif_isr();
   2244c:	e7e1      	b.n	22412 <hif_handle_isr+0x22>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   2244e:	4b08      	ldr	r3, [pc, #32]	; (22470 <hif_handle_isr+0x80>)
   22450:	78db      	ldrb	r3, [r3, #3]
   22452:	b2db      	uxtb	r3, r3
   22454:	2b00      	cmp	r3, #0
   22456:	d004      	beq.n	22462 <hif_handle_isr+0x72>
   22458:	4b05      	ldr	r3, [pc, #20]	; (22470 <hif_handle_isr+0x80>)
   2245a:	791b      	ldrb	r3, [r3, #4]
   2245c:	b2db      	uxtb	r3, r3
   2245e:	2b00      	cmp	r3, #0
   22460:	d0d0      	beq.n	22404 <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
   22462:	1dfb      	adds	r3, r7, #7
   22464:	781b      	ldrb	r3, [r3, #0]
   22466:	b25b      	sxtb	r3, r3
}
   22468:	0018      	movs	r0, r3
   2246a:	46bd      	mov	sp, r7
   2246c:	b003      	add	sp, #12
   2246e:	bd90      	pop	{r4, r7, pc}
   22470:	20005714 	.word	0x20005714
   22474:	00021f19 	.word	0x00021f19
   22478:	00000257 	.word	0x00000257
   2247c:	00039430 	.word	0x00039430
   22480:	00039118 	.word	0x00039118
   22484:	0001eb7d 	.word	0x0001eb7d
   22488:	00039314 	.word	0x00039314
   2248c:	00039114 	.word	0x00039114

00022490 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
   22490:	b590      	push	{r4, r7, lr}
   22492:	b087      	sub	sp, #28
   22494:	af00      	add	r7, sp, #0
   22496:	60f8      	str	r0, [r7, #12]
   22498:	60b9      	str	r1, [r7, #8]
   2249a:	0019      	movs	r1, r3
   2249c:	1dbb      	adds	r3, r7, #6
   2249e:	801a      	strh	r2, [r3, #0]
   224a0:	1d7b      	adds	r3, r7, #5
   224a2:	1c0a      	adds	r2, r1, #0
   224a4:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   224a6:	2317      	movs	r3, #23
   224a8:	18fb      	adds	r3, r7, r3
   224aa:	2200      	movs	r2, #0
   224ac:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
   224ae:	68fb      	ldr	r3, [r7, #12]
   224b0:	2b00      	cmp	r3, #0
   224b2:	d006      	beq.n	224c2 <hif_receive+0x32>
   224b4:	68bb      	ldr	r3, [r7, #8]
   224b6:	2b00      	cmp	r3, #0
   224b8:	d003      	beq.n	224c2 <hif_receive+0x32>
   224ba:	1dbb      	adds	r3, r7, #6
   224bc:	881b      	ldrh	r3, [r3, #0]
   224be:	2b00      	cmp	r3, #0
   224c0:	d11e      	bne.n	22500 <hif_receive+0x70>
	{
		if(isDone)
   224c2:	1d7b      	adds	r3, r7, #5
   224c4:	781b      	ldrb	r3, [r3, #0]
   224c6:	2b00      	cmp	r3, #0
   224c8:	d006      	beq.n	224d8 <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
   224ca:	2317      	movs	r3, #23
   224cc:	18fc      	adds	r4, r7, r3
   224ce:	4b45      	ldr	r3, [pc, #276]	; (225e4 <hif_receive+0x154>)
   224d0:	4798      	blx	r3
   224d2:	0003      	movs	r3, r0
   224d4:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
   224d6:	e07c      	b.n	225d2 <hif_receive+0x142>
			ret = M2M_ERR_FAIL;
   224d8:	2317      	movs	r3, #23
   224da:	18fb      	adds	r3, r7, r3
   224dc:	22f4      	movs	r2, #244	; 0xf4
   224de:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
   224e0:	239e      	movs	r3, #158	; 0x9e
   224e2:	009a      	lsls	r2, r3, #2
   224e4:	4940      	ldr	r1, [pc, #256]	; (225e8 <hif_receive+0x158>)
   224e6:	4b41      	ldr	r3, [pc, #260]	; (225ec <hif_receive+0x15c>)
   224e8:	0018      	movs	r0, r3
   224ea:	4b41      	ldr	r3, [pc, #260]	; (225f0 <hif_receive+0x160>)
   224ec:	4798      	blx	r3
   224ee:	4b41      	ldr	r3, [pc, #260]	; (225f4 <hif_receive+0x164>)
   224f0:	0018      	movs	r0, r3
   224f2:	4b3f      	ldr	r3, [pc, #252]	; (225f0 <hif_receive+0x160>)
   224f4:	4798      	blx	r3
   224f6:	4b40      	ldr	r3, [pc, #256]	; (225f8 <hif_receive+0x168>)
   224f8:	0018      	movs	r0, r3
   224fa:	4b3d      	ldr	r3, [pc, #244]	; (225f0 <hif_receive+0x160>)
   224fc:	4798      	blx	r3
		goto ERR1;
   224fe:	e068      	b.n	225d2 <hif_receive+0x142>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
   22500:	1dbb      	adds	r3, r7, #6
   22502:	881a      	ldrh	r2, [r3, #0]
   22504:	4b3d      	ldr	r3, [pc, #244]	; (225fc <hif_receive+0x16c>)
   22506:	68db      	ldr	r3, [r3, #12]
   22508:	429a      	cmp	r2, r3
   2250a:	d917      	bls.n	2253c <hif_receive+0xac>
	{
		ret = M2M_ERR_FAIL;
   2250c:	2317      	movs	r3, #23
   2250e:	18fb      	adds	r3, r7, r3
   22510:	22f4      	movs	r2, #244	; 0xf4
   22512:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
   22514:	23a0      	movs	r3, #160	; 0xa0
   22516:	009a      	lsls	r2, r3, #2
   22518:	4933      	ldr	r1, [pc, #204]	; (225e8 <hif_receive+0x158>)
   2251a:	4b34      	ldr	r3, [pc, #208]	; (225ec <hif_receive+0x15c>)
   2251c:	0018      	movs	r0, r3
   2251e:	4b34      	ldr	r3, [pc, #208]	; (225f0 <hif_receive+0x160>)
   22520:	4798      	blx	r3
   22522:	1dbb      	adds	r3, r7, #6
   22524:	8819      	ldrh	r1, [r3, #0]
   22526:	4b35      	ldr	r3, [pc, #212]	; (225fc <hif_receive+0x16c>)
   22528:	68da      	ldr	r2, [r3, #12]
   2252a:	4b35      	ldr	r3, [pc, #212]	; (22600 <hif_receive+0x170>)
   2252c:	0018      	movs	r0, r3
   2252e:	4b30      	ldr	r3, [pc, #192]	; (225f0 <hif_receive+0x160>)
   22530:	4798      	blx	r3
   22532:	4b31      	ldr	r3, [pc, #196]	; (225f8 <hif_receive+0x168>)
   22534:	0018      	movs	r0, r3
   22536:	4b2e      	ldr	r3, [pc, #184]	; (225f0 <hif_receive+0x160>)
   22538:	4798      	blx	r3
		goto ERR1;
   2253a:	e04a      	b.n	225d2 <hif_receive+0x142>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
   2253c:	4b2f      	ldr	r3, [pc, #188]	; (225fc <hif_receive+0x16c>)
   2253e:	689a      	ldr	r2, [r3, #8]
   22540:	68fb      	ldr	r3, [r7, #12]
   22542:	429a      	cmp	r2, r3
   22544:	d80a      	bhi.n	2255c <hif_receive+0xcc>
   22546:	1dbb      	adds	r3, r7, #6
   22548:	881a      	ldrh	r2, [r3, #0]
   2254a:	68fb      	ldr	r3, [r7, #12]
   2254c:	18d2      	adds	r2, r2, r3
   2254e:	4b2b      	ldr	r3, [pc, #172]	; (225fc <hif_receive+0x16c>)
   22550:	6899      	ldr	r1, [r3, #8]
   22552:	4b2a      	ldr	r3, [pc, #168]	; (225fc <hif_receive+0x16c>)
   22554:	68db      	ldr	r3, [r3, #12]
   22556:	18cb      	adds	r3, r1, r3
   22558:	429a      	cmp	r2, r3
   2255a:	d912      	bls.n	22582 <hif_receive+0xf2>
	{
		ret = M2M_ERR_FAIL;
   2255c:	2317      	movs	r3, #23
   2255e:	18fb      	adds	r3, r7, r3
   22560:	22f4      	movs	r2, #244	; 0xf4
   22562:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
   22564:	4a27      	ldr	r2, [pc, #156]	; (22604 <hif_receive+0x174>)
   22566:	4920      	ldr	r1, [pc, #128]	; (225e8 <hif_receive+0x158>)
   22568:	4b20      	ldr	r3, [pc, #128]	; (225ec <hif_receive+0x15c>)
   2256a:	0018      	movs	r0, r3
   2256c:	4b20      	ldr	r3, [pc, #128]	; (225f0 <hif_receive+0x160>)
   2256e:	4798      	blx	r3
   22570:	4b25      	ldr	r3, [pc, #148]	; (22608 <hif_receive+0x178>)
   22572:	0018      	movs	r0, r3
   22574:	4b1e      	ldr	r3, [pc, #120]	; (225f0 <hif_receive+0x160>)
   22576:	4798      	blx	r3
   22578:	4b1f      	ldr	r3, [pc, #124]	; (225f8 <hif_receive+0x168>)
   2257a:	0018      	movs	r0, r3
   2257c:	4b1c      	ldr	r3, [pc, #112]	; (225f0 <hif_receive+0x160>)
   2257e:	4798      	blx	r3
		goto ERR1;
   22580:	e027      	b.n	225d2 <hif_receive+0x142>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
   22582:	1dbb      	adds	r3, r7, #6
   22584:	881a      	ldrh	r2, [r3, #0]
   22586:	2317      	movs	r3, #23
   22588:	18fc      	adds	r4, r7, r3
   2258a:	68b9      	ldr	r1, [r7, #8]
   2258c:	68fb      	ldr	r3, [r7, #12]
   2258e:	0018      	movs	r0, r3
   22590:	4b1e      	ldr	r3, [pc, #120]	; (2260c <hif_receive+0x17c>)
   22592:	4798      	blx	r3
   22594:	0003      	movs	r3, r0
   22596:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   22598:	2317      	movs	r3, #23
   2259a:	18fb      	adds	r3, r7, r3
   2259c:	781b      	ldrb	r3, [r3, #0]
   2259e:	b25b      	sxtb	r3, r3
   225a0:	2b00      	cmp	r3, #0
   225a2:	d115      	bne.n	225d0 <hif_receive+0x140>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
   225a4:	4b15      	ldr	r3, [pc, #84]	; (225fc <hif_receive+0x16c>)
   225a6:	689a      	ldr	r2, [r3, #8]
   225a8:	4b14      	ldr	r3, [pc, #80]	; (225fc <hif_receive+0x16c>)
   225aa:	68db      	ldr	r3, [r3, #12]
   225ac:	18d2      	adds	r2, r2, r3
   225ae:	1dbb      	adds	r3, r7, #6
   225b0:	8819      	ldrh	r1, [r3, #0]
   225b2:	68fb      	ldr	r3, [r7, #12]
   225b4:	18cb      	adds	r3, r1, r3
   225b6:	429a      	cmp	r2, r3
   225b8:	d003      	beq.n	225c2 <hif_receive+0x132>
   225ba:	1d7b      	adds	r3, r7, #5
   225bc:	781b      	ldrb	r3, [r3, #0]
   225be:	2b00      	cmp	r3, #0
   225c0:	d007      	beq.n	225d2 <hif_receive+0x142>
	{
		/* set RX done */
		ret = hif_set_rx_done();
   225c2:	2317      	movs	r3, #23
   225c4:	18fc      	adds	r4, r7, r3
   225c6:	4b07      	ldr	r3, [pc, #28]	; (225e4 <hif_receive+0x154>)
   225c8:	4798      	blx	r3
   225ca:	0003      	movs	r3, r0
   225cc:	7023      	strb	r3, [r4, #0]
   225ce:	e000      	b.n	225d2 <hif_receive+0x142>
	if(ret != M2M_SUCCESS)goto ERR1;
   225d0:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   225d2:	2317      	movs	r3, #23
   225d4:	18fb      	adds	r3, r7, r3
   225d6:	781b      	ldrb	r3, [r3, #0]
   225d8:	b25b      	sxtb	r3, r3
}
   225da:	0018      	movs	r0, r3
   225dc:	46bd      	mov	sp, r7
   225de:	b007      	add	sp, #28
   225e0:	bd90      	pop	{r4, r7, pc}
   225e2:	46c0      	nop			; (mov r8, r8)
   225e4:	000219ad 	.word	0x000219ad
   225e8:	00039440 	.word	0x00039440
   225ec:	00039118 	.word	0x00039118
   225f0:	0001eb7d 	.word	0x0001eb7d
   225f4:	00039344 	.word	0x00039344
   225f8:	00039114 	.word	0x00039114
   225fc:	20005714 	.word	0x20005714
   22600:	00039364 	.word	0x00039364
   22604:	00000286 	.word	0x00000286
   22608:	000393ac 	.word	0x000393ac
   2260c:	00023a19 	.word	0x00023a19

00022610 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
   22610:	b580      	push	{r7, lr}
   22612:	b084      	sub	sp, #16
   22614:	af00      	add	r7, sp, #0
   22616:	0002      	movs	r2, r0
   22618:	6039      	str	r1, [r7, #0]
   2261a:	1dfb      	adds	r3, r7, #7
   2261c:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   2261e:	230f      	movs	r3, #15
   22620:	18fb      	adds	r3, r7, r3
   22622:	2200      	movs	r2, #0
   22624:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
   22626:	1dfb      	adds	r3, r7, #7
   22628:	781b      	ldrb	r3, [r3, #0]
   2262a:	2b07      	cmp	r3, #7
   2262c:	d820      	bhi.n	22670 <hif_register_cb+0x60>
   2262e:	009a      	lsls	r2, r3, #2
   22630:	4b1e      	ldr	r3, [pc, #120]	; (226ac <hif_register_cb+0x9c>)
   22632:	18d3      	adds	r3, r2, r3
   22634:	681b      	ldr	r3, [r3, #0]
   22636:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
   22638:	4b1d      	ldr	r3, [pc, #116]	; (226b0 <hif_register_cb+0xa0>)
   2263a:	683a      	ldr	r2, [r7, #0]
   2263c:	615a      	str	r2, [r3, #20]
			break;
   2263e:	e02d      	b.n	2269c <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
   22640:	4b1b      	ldr	r3, [pc, #108]	; (226b0 <hif_register_cb+0xa0>)
   22642:	683a      	ldr	r2, [r7, #0]
   22644:	611a      	str	r2, [r3, #16]
			break;
   22646:	e029      	b.n	2269c <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
   22648:	4b19      	ldr	r3, [pc, #100]	; (226b0 <hif_register_cb+0xa0>)
   2264a:	683a      	ldr	r2, [r7, #0]
   2264c:	619a      	str	r2, [r3, #24]
			break;
   2264e:	e025      	b.n	2269c <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
   22650:	4b17      	ldr	r3, [pc, #92]	; (226b0 <hif_register_cb+0xa0>)
   22652:	683a      	ldr	r2, [r7, #0]
   22654:	621a      	str	r2, [r3, #32]
			break;
   22656:	e021      	b.n	2269c <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
   22658:	4b15      	ldr	r3, [pc, #84]	; (226b0 <hif_register_cb+0xa0>)
   2265a:	683a      	ldr	r2, [r7, #0]
   2265c:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   2265e:	e01d      	b.n	2269c <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
   22660:	4b13      	ldr	r3, [pc, #76]	; (226b0 <hif_register_cb+0xa0>)
   22662:	683a      	ldr	r2, [r7, #0]
   22664:	61da      	str	r2, [r3, #28]
			break;
   22666:	e019      	b.n	2269c <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
   22668:	4b11      	ldr	r3, [pc, #68]	; (226b0 <hif_register_cb+0xa0>)
   2266a:	683a      	ldr	r2, [r7, #0]
   2266c:	629a      	str	r2, [r3, #40]	; 0x28
			break;
   2266e:	e015      	b.n	2269c <hif_register_cb+0x8c>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
   22670:	4a10      	ldr	r2, [pc, #64]	; (226b4 <hif_register_cb+0xa4>)
   22672:	4911      	ldr	r1, [pc, #68]	; (226b8 <hif_register_cb+0xa8>)
   22674:	4b11      	ldr	r3, [pc, #68]	; (226bc <hif_register_cb+0xac>)
   22676:	0018      	movs	r0, r3
   22678:	4b11      	ldr	r3, [pc, #68]	; (226c0 <hif_register_cb+0xb0>)
   2267a:	4798      	blx	r3
   2267c:	1dfb      	adds	r3, r7, #7
   2267e:	781a      	ldrb	r2, [r3, #0]
   22680:	4b10      	ldr	r3, [pc, #64]	; (226c4 <hif_register_cb+0xb4>)
   22682:	0011      	movs	r1, r2
   22684:	0018      	movs	r0, r3
   22686:	4b0e      	ldr	r3, [pc, #56]	; (226c0 <hif_register_cb+0xb0>)
   22688:	4798      	blx	r3
   2268a:	4b0f      	ldr	r3, [pc, #60]	; (226c8 <hif_register_cb+0xb8>)
   2268c:	0018      	movs	r0, r3
   2268e:	4b0c      	ldr	r3, [pc, #48]	; (226c0 <hif_register_cb+0xb0>)
   22690:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   22692:	230f      	movs	r3, #15
   22694:	18fb      	adds	r3, r7, r3
   22696:	22f4      	movs	r2, #244	; 0xf4
   22698:	701a      	strb	r2, [r3, #0]
			break;
   2269a:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
   2269c:	230f      	movs	r3, #15
   2269e:	18fb      	adds	r3, r7, r3
   226a0:	781b      	ldrb	r3, [r3, #0]
   226a2:	b25b      	sxtb	r3, r3
}
   226a4:	0018      	movs	r0, r3
   226a6:	46bd      	mov	sp, r7
   226a8:	b004      	add	sp, #16
   226aa:	bd80      	pop	{r7, pc}
   226ac:	000393fc 	.word	0x000393fc
   226b0:	20005714 	.word	0x20005714
   226b4:	000002be 	.word	0x000002be
   226b8:	0003944c 	.word	0x0003944c
   226bc:	00039118 	.word	0x00039118
   226c0:	0001eb7d 	.word	0x0001eb7d
   226c4:	000393f0 	.word	0x000393f0
   226c8:	00039114 	.word	0x00039114

000226cc <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   226cc:	b590      	push	{r4, r7, lr}
   226ce:	b0af      	sub	sp, #188	; 0xbc
   226d0:	af02      	add	r7, sp, #8
   226d2:	603a      	str	r2, [r7, #0]
   226d4:	1dfb      	adds	r3, r7, #7
   226d6:	1c02      	adds	r2, r0, #0
   226d8:	701a      	strb	r2, [r3, #0]
   226da:	1d3b      	adds	r3, r7, #4
   226dc:	1c0a      	adds	r2, r1, #0
   226de:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
   226e0:	1dfb      	adds	r3, r7, #7
   226e2:	781b      	ldrb	r3, [r3, #0]
   226e4:	2b2c      	cmp	r3, #44	; 0x2c
   226e6:	d116      	bne.n	22716 <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
   226e8:	23a4      	movs	r3, #164	; 0xa4
   226ea:	18f9      	adds	r1, r7, r3
   226ec:	6838      	ldr	r0, [r7, #0]
   226ee:	2300      	movs	r3, #0
   226f0:	2204      	movs	r2, #4
   226f2:	4cca      	ldr	r4, [pc, #808]	; (22a1c <m2m_wifi_cb+0x350>)
   226f4:	47a0      	blx	r4
   226f6:	1e03      	subs	r3, r0, #0
   226f8:	d000      	beq.n	226fc <m2m_wifi_cb+0x30>
   226fa:	e1b4      	b.n	22a66 <m2m_wifi_cb+0x39a>
		{
			if (gpfAppWifiCb)
   226fc:	4bc8      	ldr	r3, [pc, #800]	; (22a20 <m2m_wifi_cb+0x354>)
   226fe:	681b      	ldr	r3, [r3, #0]
   22700:	2b00      	cmp	r3, #0
   22702:	d100      	bne.n	22706 <m2m_wifi_cb+0x3a>
   22704:	e1af      	b.n	22a66 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
   22706:	4bc6      	ldr	r3, [pc, #792]	; (22a20 <m2m_wifi_cb+0x354>)
   22708:	681b      	ldr	r3, [r3, #0]
   2270a:	22a4      	movs	r2, #164	; 0xa4
   2270c:	18ba      	adds	r2, r7, r2
   2270e:	0011      	movs	r1, r2
   22710:	202c      	movs	r0, #44	; 0x2c
   22712:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
   22714:	e1a7      	b.n	22a66 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
   22716:	1dfb      	adds	r3, r7, #7
   22718:	781b      	ldrb	r3, [r3, #0]
   2271a:	2b1b      	cmp	r3, #27
   2271c:	d116      	bne.n	2274c <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
   2271e:	239c      	movs	r3, #156	; 0x9c
   22720:	18f9      	adds	r1, r7, r3
   22722:	6838      	ldr	r0, [r7, #0]
   22724:	2300      	movs	r3, #0
   22726:	2208      	movs	r2, #8
   22728:	4cbc      	ldr	r4, [pc, #752]	; (22a1c <m2m_wifi_cb+0x350>)
   2272a:	47a0      	blx	r4
   2272c:	1e03      	subs	r3, r0, #0
   2272e:	d000      	beq.n	22732 <m2m_wifi_cb+0x66>
   22730:	e199      	b.n	22a66 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   22732:	4bbb      	ldr	r3, [pc, #748]	; (22a20 <m2m_wifi_cb+0x354>)
   22734:	681b      	ldr	r3, [r3, #0]
   22736:	2b00      	cmp	r3, #0
   22738:	d100      	bne.n	2273c <m2m_wifi_cb+0x70>
   2273a:	e194      	b.n	22a66 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
   2273c:	4bb8      	ldr	r3, [pc, #736]	; (22a20 <m2m_wifi_cb+0x354>)
   2273e:	681b      	ldr	r3, [r3, #0]
   22740:	229c      	movs	r2, #156	; 0x9c
   22742:	18ba      	adds	r2, r7, r2
   22744:	0011      	movs	r1, r2
   22746:	201b      	movs	r0, #27
   22748:	4798      	blx	r3
}
   2274a:	e18c      	b.n	22a66 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
   2274c:	1dfb      	adds	r3, r7, #7
   2274e:	781b      	ldrb	r3, [r3, #0]
   22750:	2b06      	cmp	r3, #6
   22752:	d116      	bne.n	22782 <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
   22754:	230c      	movs	r3, #12
   22756:	18f9      	adds	r1, r7, r3
   22758:	6838      	ldr	r0, [r7, #0]
   2275a:	2301      	movs	r3, #1
   2275c:	2230      	movs	r2, #48	; 0x30
   2275e:	4caf      	ldr	r4, [pc, #700]	; (22a1c <m2m_wifi_cb+0x350>)
   22760:	47a0      	blx	r4
   22762:	1e03      	subs	r3, r0, #0
   22764:	d000      	beq.n	22768 <m2m_wifi_cb+0x9c>
   22766:	e17e      	b.n	22a66 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   22768:	4bad      	ldr	r3, [pc, #692]	; (22a20 <m2m_wifi_cb+0x354>)
   2276a:	681b      	ldr	r3, [r3, #0]
   2276c:	2b00      	cmp	r3, #0
   2276e:	d100      	bne.n	22772 <m2m_wifi_cb+0xa6>
   22770:	e179      	b.n	22a66 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
   22772:	4bab      	ldr	r3, [pc, #684]	; (22a20 <m2m_wifi_cb+0x354>)
   22774:	681b      	ldr	r3, [r3, #0]
   22776:	220c      	movs	r2, #12
   22778:	18ba      	adds	r2, r7, r2
   2277a:	0011      	movs	r1, r2
   2277c:	2006      	movs	r0, #6
   2277e:	4798      	blx	r3
}
   22780:	e171      	b.n	22a66 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
   22782:	1dfb      	adds	r3, r7, #7
   22784:	781b      	ldrb	r3, [r3, #0]
   22786:	2b0e      	cmp	r3, #14
   22788:	d100      	bne.n	2278c <m2m_wifi_cb+0xc0>
   2278a:	e16c      	b.n	22a66 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
   2278c:	1dfb      	adds	r3, r7, #7
   2278e:	781b      	ldrb	r3, [r3, #0]
   22790:	2b32      	cmp	r3, #50	; 0x32
   22792:	d116      	bne.n	227c2 <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
   22794:	2384      	movs	r3, #132	; 0x84
   22796:	18f9      	adds	r1, r7, r3
   22798:	6838      	ldr	r0, [r7, #0]
   2279a:	2300      	movs	r3, #0
   2279c:	2218      	movs	r2, #24
   2279e:	4c9f      	ldr	r4, [pc, #636]	; (22a1c <m2m_wifi_cb+0x350>)
   227a0:	47a0      	blx	r4
   227a2:	1e03      	subs	r3, r0, #0
   227a4:	d000      	beq.n	227a8 <m2m_wifi_cb+0xdc>
   227a6:	e15e      	b.n	22a66 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   227a8:	4b9d      	ldr	r3, [pc, #628]	; (22a20 <m2m_wifi_cb+0x354>)
   227aa:	681b      	ldr	r3, [r3, #0]
   227ac:	2b00      	cmp	r3, #0
   227ae:	d100      	bne.n	227b2 <m2m_wifi_cb+0xe6>
   227b0:	e159      	b.n	22a66 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
   227b2:	4b9b      	ldr	r3, [pc, #620]	; (22a20 <m2m_wifi_cb+0x354>)
   227b4:	681b      	ldr	r3, [r3, #0]
   227b6:	2284      	movs	r2, #132	; 0x84
   227b8:	18ba      	adds	r2, r7, r2
   227ba:	0011      	movs	r1, r2
   227bc:	2032      	movs	r0, #50	; 0x32
   227be:	4798      	blx	r3
}
   227c0:	e151      	b.n	22a66 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
   227c2:	1dfb      	adds	r3, r7, #7
   227c4:	781b      	ldrb	r3, [r3, #0]
   227c6:	2b2f      	cmp	r3, #47	; 0x2f
   227c8:	d11d      	bne.n	22806 <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
   227ca:	230c      	movs	r3, #12
   227cc:	18fb      	adds	r3, r7, r3
   227ce:	2264      	movs	r2, #100	; 0x64
   227d0:	2100      	movs	r1, #0
   227d2:	0018      	movs	r0, r3
   227d4:	4b93      	ldr	r3, [pc, #588]	; (22a24 <m2m_wifi_cb+0x358>)
   227d6:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
   227d8:	230c      	movs	r3, #12
   227da:	18f9      	adds	r1, r7, r3
   227dc:	6838      	ldr	r0, [r7, #0]
   227de:	2300      	movs	r3, #0
   227e0:	2264      	movs	r2, #100	; 0x64
   227e2:	4c8e      	ldr	r4, [pc, #568]	; (22a1c <m2m_wifi_cb+0x350>)
   227e4:	47a0      	blx	r4
   227e6:	1e03      	subs	r3, r0, #0
   227e8:	d000      	beq.n	227ec <m2m_wifi_cb+0x120>
   227ea:	e13c      	b.n	22a66 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   227ec:	4b8c      	ldr	r3, [pc, #560]	; (22a20 <m2m_wifi_cb+0x354>)
   227ee:	681b      	ldr	r3, [r3, #0]
   227f0:	2b00      	cmp	r3, #0
   227f2:	d100      	bne.n	227f6 <m2m_wifi_cb+0x12a>
   227f4:	e137      	b.n	22a66 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
   227f6:	4b8a      	ldr	r3, [pc, #552]	; (22a20 <m2m_wifi_cb+0x354>)
   227f8:	681b      	ldr	r3, [r3, #0]
   227fa:	220c      	movs	r2, #12
   227fc:	18ba      	adds	r2, r7, r2
   227fe:	0011      	movs	r1, r2
   22800:	202f      	movs	r0, #47	; 0x2f
   22802:	4798      	blx	r3
}
   22804:	e12f      	b.n	22a66 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
   22806:	1dfb      	adds	r3, r7, #7
   22808:	781b      	ldrb	r3, [r3, #0]
   2280a:	2b34      	cmp	r3, #52	; 0x34
   2280c:	d137      	bne.n	2287e <m2m_wifi_cb+0x1b2>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
   2280e:	2380      	movs	r3, #128	; 0x80
   22810:	18f9      	adds	r1, r7, r3
   22812:	6838      	ldr	r0, [r7, #0]
   22814:	2300      	movs	r3, #0
   22816:	2204      	movs	r2, #4
   22818:	4c80      	ldr	r4, [pc, #512]	; (22a1c <m2m_wifi_cb+0x350>)
   2281a:	47a0      	blx	r4
   2281c:	1e03      	subs	r3, r0, #0
   2281e:	d000      	beq.n	22822 <m2m_wifi_cb+0x156>
   22820:	e121      	b.n	22a66 <m2m_wifi_cb+0x39a>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
   22822:	4b81      	ldr	r3, [pc, #516]	; (22a28 <m2m_wifi_cb+0x35c>)
   22824:	0018      	movs	r0, r3
   22826:	4b81      	ldr	r3, [pc, #516]	; (22a2c <m2m_wifi_cb+0x360>)
   22828:	4798      	blx	r3
   2282a:	2380      	movs	r3, #128	; 0x80
   2282c:	18fb      	adds	r3, r7, r3
   2282e:	681b      	ldr	r3, [r3, #0]
   22830:	0e1b      	lsrs	r3, r3, #24
   22832:	b2db      	uxtb	r3, r3
   22834:	0019      	movs	r1, r3
   22836:	2380      	movs	r3, #128	; 0x80
   22838:	18fb      	adds	r3, r7, r3
   2283a:	681b      	ldr	r3, [r3, #0]
   2283c:	0c1b      	lsrs	r3, r3, #16
   2283e:	b2db      	uxtb	r3, r3
   22840:	001a      	movs	r2, r3
   22842:	2380      	movs	r3, #128	; 0x80
   22844:	18fb      	adds	r3, r7, r3
   22846:	681b      	ldr	r3, [r3, #0]
   22848:	0a1b      	lsrs	r3, r3, #8
   2284a:	b2db      	uxtb	r3, r3
   2284c:	001c      	movs	r4, r3
   2284e:	2380      	movs	r3, #128	; 0x80
   22850:	18fb      	adds	r3, r7, r3
   22852:	681b      	ldr	r3, [r3, #0]
   22854:	b2db      	uxtb	r3, r3
   22856:	4876      	ldr	r0, [pc, #472]	; (22a30 <m2m_wifi_cb+0x364>)
   22858:	9300      	str	r3, [sp, #0]
   2285a:	0023      	movs	r3, r4
   2285c:	4c73      	ldr	r4, [pc, #460]	; (22a2c <m2m_wifi_cb+0x360>)
   2285e:	47a0      	blx	r4
   22860:	4b74      	ldr	r3, [pc, #464]	; (22a34 <m2m_wifi_cb+0x368>)
   22862:	0018      	movs	r0, r3
   22864:	4b71      	ldr	r3, [pc, #452]	; (22a2c <m2m_wifi_cb+0x360>)
   22866:	4798      	blx	r3
			if (gpfAppWifiCb)
   22868:	4b6d      	ldr	r3, [pc, #436]	; (22a20 <m2m_wifi_cb+0x354>)
   2286a:	681b      	ldr	r3, [r3, #0]
   2286c:	2b00      	cmp	r3, #0
   2286e:	d100      	bne.n	22872 <m2m_wifi_cb+0x1a6>
   22870:	e0f9      	b.n	22a66 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
   22872:	4b6b      	ldr	r3, [pc, #428]	; (22a20 <m2m_wifi_cb+0x354>)
   22874:	681b      	ldr	r3, [r3, #0]
   22876:	2100      	movs	r1, #0
   22878:	2034      	movs	r0, #52	; 0x34
   2287a:	4798      	blx	r3
}
   2287c:	e0f3      	b.n	22a66 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
   2287e:	1dfb      	adds	r3, r7, #7
   22880:	781b      	ldrb	r3, [r3, #0]
   22882:	2b11      	cmp	r3, #17
   22884:	d11e      	bne.n	228c4 <m2m_wifi_cb+0x1f8>
		gu8scanInProgress = 0;
   22886:	4b6c      	ldr	r3, [pc, #432]	; (22a38 <m2m_wifi_cb+0x36c>)
   22888:	2200      	movs	r2, #0
   2288a:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
   2288c:	237c      	movs	r3, #124	; 0x7c
   2288e:	18f9      	adds	r1, r7, r3
   22890:	6838      	ldr	r0, [r7, #0]
   22892:	2300      	movs	r3, #0
   22894:	2204      	movs	r2, #4
   22896:	4c61      	ldr	r4, [pc, #388]	; (22a1c <m2m_wifi_cb+0x350>)
   22898:	47a0      	blx	r4
   2289a:	1e03      	subs	r3, r0, #0
   2289c:	d000      	beq.n	228a0 <m2m_wifi_cb+0x1d4>
   2289e:	e0e2      	b.n	22a66 <m2m_wifi_cb+0x39a>
			gu8ChNum = strState.u8NumofCh;
   228a0:	237c      	movs	r3, #124	; 0x7c
   228a2:	18fb      	adds	r3, r7, r3
   228a4:	781a      	ldrb	r2, [r3, #0]
   228a6:	4b65      	ldr	r3, [pc, #404]	; (22a3c <m2m_wifi_cb+0x370>)
   228a8:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
   228aa:	4b5d      	ldr	r3, [pc, #372]	; (22a20 <m2m_wifi_cb+0x354>)
   228ac:	681b      	ldr	r3, [r3, #0]
   228ae:	2b00      	cmp	r3, #0
   228b0:	d100      	bne.n	228b4 <m2m_wifi_cb+0x1e8>
   228b2:	e0d8      	b.n	22a66 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
   228b4:	4b5a      	ldr	r3, [pc, #360]	; (22a20 <m2m_wifi_cb+0x354>)
   228b6:	681b      	ldr	r3, [r3, #0]
   228b8:	227c      	movs	r2, #124	; 0x7c
   228ba:	18ba      	adds	r2, r7, r2
   228bc:	0011      	movs	r1, r2
   228be:	2011      	movs	r0, #17
   228c0:	4798      	blx	r3
}
   228c2:	e0d0      	b.n	22a66 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
   228c4:	1dfb      	adds	r3, r7, #7
   228c6:	781b      	ldrb	r3, [r3, #0]
   228c8:	2b13      	cmp	r3, #19
   228ca:	d116      	bne.n	228fa <m2m_wifi_cb+0x22e>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
   228cc:	230c      	movs	r3, #12
   228ce:	18f9      	adds	r1, r7, r3
   228d0:	6838      	ldr	r0, [r7, #0]
   228d2:	2300      	movs	r3, #0
   228d4:	222c      	movs	r2, #44	; 0x2c
   228d6:	4c51      	ldr	r4, [pc, #324]	; (22a1c <m2m_wifi_cb+0x350>)
   228d8:	47a0      	blx	r4
   228da:	1e03      	subs	r3, r0, #0
   228dc:	d000      	beq.n	228e0 <m2m_wifi_cb+0x214>
   228de:	e0c2      	b.n	22a66 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   228e0:	4b4f      	ldr	r3, [pc, #316]	; (22a20 <m2m_wifi_cb+0x354>)
   228e2:	681b      	ldr	r3, [r3, #0]
   228e4:	2b00      	cmp	r3, #0
   228e6:	d100      	bne.n	228ea <m2m_wifi_cb+0x21e>
   228e8:	e0bd      	b.n	22a66 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
   228ea:	4b4d      	ldr	r3, [pc, #308]	; (22a20 <m2m_wifi_cb+0x354>)
   228ec:	681b      	ldr	r3, [r3, #0]
   228ee:	220c      	movs	r2, #12
   228f0:	18ba      	adds	r2, r7, r2
   228f2:	0011      	movs	r1, r2
   228f4:	2013      	movs	r0, #19
   228f6:	4798      	blx	r3
}
   228f8:	e0b5      	b.n	22a66 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
   228fa:	1dfb      	adds	r3, r7, #7
   228fc:	781b      	ldrb	r3, [r3, #0]
   228fe:	2b04      	cmp	r3, #4
   22900:	d116      	bne.n	22930 <m2m_wifi_cb+0x264>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   22902:	23a8      	movs	r3, #168	; 0xa8
   22904:	18f9      	adds	r1, r7, r3
   22906:	6838      	ldr	r0, [r7, #0]
   22908:	2300      	movs	r3, #0
   2290a:	2204      	movs	r2, #4
   2290c:	4c43      	ldr	r4, [pc, #268]	; (22a1c <m2m_wifi_cb+0x350>)
   2290e:	47a0      	blx	r4
   22910:	1e03      	subs	r3, r0, #0
   22912:	d000      	beq.n	22916 <m2m_wifi_cb+0x24a>
   22914:	e0a7      	b.n	22a66 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   22916:	4b42      	ldr	r3, [pc, #264]	; (22a20 <m2m_wifi_cb+0x354>)
   22918:	681b      	ldr	r3, [r3, #0]
   2291a:	2b00      	cmp	r3, #0
   2291c:	d100      	bne.n	22920 <m2m_wifi_cb+0x254>
   2291e:	e0a2      	b.n	22a66 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
   22920:	4b3f      	ldr	r3, [pc, #252]	; (22a20 <m2m_wifi_cb+0x354>)
   22922:	681b      	ldr	r3, [r3, #0]
   22924:	22a8      	movs	r2, #168	; 0xa8
   22926:	18ba      	adds	r2, r7, r2
   22928:	0011      	movs	r1, r2
   2292a:	2004      	movs	r0, #4
   2292c:	4798      	blx	r3
}
   2292e:	e09a      	b.n	22a66 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
   22930:	1dfb      	adds	r3, r7, #7
   22932:	781b      	ldrb	r3, [r3, #0]
   22934:	2b65      	cmp	r3, #101	; 0x65
   22936:	d116      	bne.n	22966 <m2m_wifi_cb+0x29a>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   22938:	23a8      	movs	r3, #168	; 0xa8
   2293a:	18f9      	adds	r1, r7, r3
   2293c:	6838      	ldr	r0, [r7, #0]
   2293e:	2300      	movs	r3, #0
   22940:	2204      	movs	r2, #4
   22942:	4c36      	ldr	r4, [pc, #216]	; (22a1c <m2m_wifi_cb+0x350>)
   22944:	47a0      	blx	r4
   22946:	1e03      	subs	r3, r0, #0
   22948:	d000      	beq.n	2294c <m2m_wifi_cb+0x280>
   2294a:	e08c      	b.n	22a66 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   2294c:	4b34      	ldr	r3, [pc, #208]	; (22a20 <m2m_wifi_cb+0x354>)
   2294e:	681b      	ldr	r3, [r3, #0]
   22950:	2b00      	cmp	r3, #0
   22952:	d100      	bne.n	22956 <m2m_wifi_cb+0x28a>
   22954:	e087      	b.n	22a66 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
   22956:	4b32      	ldr	r3, [pc, #200]	; (22a20 <m2m_wifi_cb+0x354>)
   22958:	681b      	ldr	r3, [r3, #0]
   2295a:	22a8      	movs	r2, #168	; 0xa8
   2295c:	18ba      	adds	r2, r7, r2
   2295e:	0011      	movs	r1, r2
   22960:	2065      	movs	r0, #101	; 0x65
   22962:	4798      	blx	r3
}
   22964:	e07f      	b.n	22a66 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
   22966:	1dfb      	adds	r3, r7, #7
   22968:	781b      	ldrb	r3, [r3, #0]
   2296a:	2b09      	cmp	r3, #9
   2296c:	d116      	bne.n	2299c <m2m_wifi_cb+0x2d0>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
   2296e:	230c      	movs	r3, #12
   22970:	18f9      	adds	r1, r7, r3
   22972:	6838      	ldr	r0, [r7, #0]
   22974:	2301      	movs	r3, #1
   22976:	2264      	movs	r2, #100	; 0x64
   22978:	4c28      	ldr	r4, [pc, #160]	; (22a1c <m2m_wifi_cb+0x350>)
   2297a:	47a0      	blx	r4
   2297c:	1e03      	subs	r3, r0, #0
   2297e:	d000      	beq.n	22982 <m2m_wifi_cb+0x2b6>
   22980:	e071      	b.n	22a66 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   22982:	4b27      	ldr	r3, [pc, #156]	; (22a20 <m2m_wifi_cb+0x354>)
   22984:	681b      	ldr	r3, [r3, #0]
   22986:	2b00      	cmp	r3, #0
   22988:	d100      	bne.n	2298c <m2m_wifi_cb+0x2c0>
   2298a:	e06c      	b.n	22a66 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
   2298c:	4b24      	ldr	r3, [pc, #144]	; (22a20 <m2m_wifi_cb+0x354>)
   2298e:	681b      	ldr	r3, [r3, #0]
   22990:	220c      	movs	r2, #12
   22992:	18ba      	adds	r2, r7, r2
   22994:	0011      	movs	r1, r2
   22996:	2009      	movs	r0, #9
   22998:	4798      	blx	r3
}
   2299a:	e064      	b.n	22a66 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
   2299c:	1dfb      	adds	r3, r7, #7
   2299e:	781b      	ldrb	r3, [r3, #0]
   229a0:	2b2a      	cmp	r3, #42	; 0x2a
   229a2:	d114      	bne.n	229ce <m2m_wifi_cb+0x302>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
   229a4:	2378      	movs	r3, #120	; 0x78
   229a6:	18f9      	adds	r1, r7, r3
   229a8:	6838      	ldr	r0, [r7, #0]
   229aa:	2301      	movs	r3, #1
   229ac:	2204      	movs	r2, #4
   229ae:	4c1b      	ldr	r4, [pc, #108]	; (22a1c <m2m_wifi_cb+0x350>)
   229b0:	47a0      	blx	r4
   229b2:	1e03      	subs	r3, r0, #0
   229b4:	d157      	bne.n	22a66 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   229b6:	4b1a      	ldr	r3, [pc, #104]	; (22a20 <m2m_wifi_cb+0x354>)
   229b8:	681b      	ldr	r3, [r3, #0]
   229ba:	2b00      	cmp	r3, #0
   229bc:	d053      	beq.n	22a66 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
   229be:	4b18      	ldr	r3, [pc, #96]	; (22a20 <m2m_wifi_cb+0x354>)
   229c0:	681b      	ldr	r3, [r3, #0]
   229c2:	2278      	movs	r2, #120	; 0x78
   229c4:	18ba      	adds	r2, r7, r2
   229c6:	0011      	movs	r1, r2
   229c8:	202a      	movs	r0, #42	; 0x2a
   229ca:	4798      	blx	r3
}
   229cc:	e04b      	b.n	22a66 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
   229ce:	1dfb      	adds	r3, r7, #7
   229d0:	781b      	ldrb	r3, [r3, #0]
   229d2:	2b20      	cmp	r3, #32
   229d4:	d134      	bne.n	22a40 <m2m_wifi_cb+0x374>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
   229d6:	2370      	movs	r3, #112	; 0x70
   229d8:	18f9      	adds	r1, r7, r3
   229da:	6838      	ldr	r0, [r7, #0]
   229dc:	2300      	movs	r3, #0
   229de:	2208      	movs	r2, #8
   229e0:	4c0e      	ldr	r4, [pc, #56]	; (22a1c <m2m_wifi_cb+0x350>)
   229e2:	47a0      	blx	r4
   229e4:	1e03      	subs	r3, r0, #0
   229e6:	d13e      	bne.n	22a66 <m2m_wifi_cb+0x39a>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
   229e8:	683b      	ldr	r3, [r7, #0]
   229ea:	3308      	adds	r3, #8
   229ec:	0018      	movs	r0, r3
   229ee:	2370      	movs	r3, #112	; 0x70
   229f0:	18fb      	adds	r3, r7, r3
   229f2:	6819      	ldr	r1, [r3, #0]
   229f4:	2370      	movs	r3, #112	; 0x70
   229f6:	18fb      	adds	r3, r7, r3
   229f8:	889a      	ldrh	r2, [r3, #4]
   229fa:	2301      	movs	r3, #1
   229fc:	4c07      	ldr	r4, [pc, #28]	; (22a1c <m2m_wifi_cb+0x350>)
   229fe:	47a0      	blx	r4
   22a00:	1e03      	subs	r3, r0, #0
   22a02:	d130      	bne.n	22a66 <m2m_wifi_cb+0x39a>
				if(gpfAppWifiCb)
   22a04:	4b06      	ldr	r3, [pc, #24]	; (22a20 <m2m_wifi_cb+0x354>)
   22a06:	681b      	ldr	r3, [r3, #0]
   22a08:	2b00      	cmp	r3, #0
   22a0a:	d02c      	beq.n	22a66 <m2m_wifi_cb+0x39a>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
   22a0c:	4b04      	ldr	r3, [pc, #16]	; (22a20 <m2m_wifi_cb+0x354>)
   22a0e:	681b      	ldr	r3, [r3, #0]
   22a10:	2270      	movs	r2, #112	; 0x70
   22a12:	18ba      	adds	r2, r7, r2
   22a14:	0011      	movs	r1, r2
   22a16:	2020      	movs	r0, #32
   22a18:	4798      	blx	r3
}
   22a1a:	e024      	b.n	22a66 <m2m_wifi_cb+0x39a>
   22a1c:	00022491 	.word	0x00022491
   22a20:	20003ee4 	.word	0x20003ee4
   22a24:	00021915 	.word	0x00021915
   22a28:	0003945c 	.word	0x0003945c
   22a2c:	0001eb7d 	.word	0x0001eb7d
   22a30:	00039468 	.word	0x00039468
   22a34:	00039488 	.word	0x00039488
   22a38:	20003ee1 	.word	0x20003ee1
   22a3c:	20003ee0 	.word	0x20003ee0
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
   22a40:	2324      	movs	r3, #36	; 0x24
   22a42:	33ff      	adds	r3, #255	; 0xff
   22a44:	001a      	movs	r2, r3
   22a46:	490a      	ldr	r1, [pc, #40]	; (22a70 <m2m_wifi_cb+0x3a4>)
   22a48:	4b0a      	ldr	r3, [pc, #40]	; (22a74 <m2m_wifi_cb+0x3a8>)
   22a4a:	0018      	movs	r0, r3
   22a4c:	4b0a      	ldr	r3, [pc, #40]	; (22a78 <m2m_wifi_cb+0x3ac>)
   22a4e:	4798      	blx	r3
   22a50:	1dfb      	adds	r3, r7, #7
   22a52:	781a      	ldrb	r2, [r3, #0]
   22a54:	4b09      	ldr	r3, [pc, #36]	; (22a7c <m2m_wifi_cb+0x3b0>)
   22a56:	0011      	movs	r1, r2
   22a58:	0018      	movs	r0, r3
   22a5a:	4b07      	ldr	r3, [pc, #28]	; (22a78 <m2m_wifi_cb+0x3ac>)
   22a5c:	4798      	blx	r3
   22a5e:	4b08      	ldr	r3, [pc, #32]	; (22a80 <m2m_wifi_cb+0x3b4>)
   22a60:	0018      	movs	r0, r3
   22a62:	4b05      	ldr	r3, [pc, #20]	; (22a78 <m2m_wifi_cb+0x3ac>)
   22a64:	4798      	blx	r3
}
   22a66:	46c0      	nop			; (mov r8, r8)
   22a68:	46bd      	mov	sp, r7
   22a6a:	b02d      	add	sp, #180	; 0xb4
   22a6c:	bd90      	pop	{r4, r7, pc}
   22a6e:	46c0      	nop			; (mov r8, r8)
   22a70:	00039828 	.word	0x00039828
   22a74:	0003948c 	.word	0x0003948c
   22a78:	0001eb7d 	.word	0x0001eb7d
   22a7c:	000394a0 	.word	0x000394a0
   22a80:	00039488 	.word	0x00039488

00022a84 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
   22a84:	b590      	push	{r4, r7, lr}
   22a86:	b091      	sub	sp, #68	; 0x44
   22a88:	af02      	add	r7, sp, #8
   22a8a:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
   22a8c:	2337      	movs	r3, #55	; 0x37
   22a8e:	18fb      	adds	r3, r7, r3
   22a90:	2200      	movs	r2, #0
   22a92:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
   22a94:	230b      	movs	r3, #11
   22a96:	18fb      	adds	r3, r7, r3
   22a98:	2201      	movs	r2, #1
   22a9a:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
   22a9c:	687b      	ldr	r3, [r7, #4]
   22a9e:	2b00      	cmp	r3, #0
   22aa0:	d104      	bne.n	22aac <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
   22aa2:	2337      	movs	r3, #55	; 0x37
   22aa4:	18fb      	adds	r3, r7, r3
   22aa6:	22f4      	movs	r2, #244	; 0xf4
   22aa8:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
   22aaa:	e0b3      	b.n	22c14 <m2m_wifi_init+0x190>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
   22aac:	687b      	ldr	r3, [r7, #4]
   22aae:	681a      	ldr	r2, [r3, #0]
   22ab0:	4b5c      	ldr	r3, [pc, #368]	; (22c24 <m2m_wifi_init+0x1a0>)
   22ab2:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
   22ab4:	4b5c      	ldr	r3, [pc, #368]	; (22c28 <m2m_wifi_init+0x1a4>)
   22ab6:	2200      	movs	r2, #0
   22ab8:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
   22aba:	2337      	movs	r3, #55	; 0x37
   22abc:	18fc      	adds	r4, r7, r3
   22abe:	230b      	movs	r3, #11
   22ac0:	18fb      	adds	r3, r7, r3
   22ac2:	0018      	movs	r0, r3
   22ac4:	4b59      	ldr	r3, [pc, #356]	; (22c2c <m2m_wifi_init+0x1a8>)
   22ac6:	4798      	blx	r3
   22ac8:	0003      	movs	r3, r0
   22aca:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   22acc:	2337      	movs	r3, #55	; 0x37
   22ace:	18fb      	adds	r3, r7, r3
   22ad0:	781b      	ldrb	r3, [r3, #0]
   22ad2:	b25b      	sxtb	r3, r3
   22ad4:	2b00      	cmp	r3, #0
   22ad6:	d000      	beq.n	22ada <m2m_wifi_init+0x56>
   22ad8:	e099      	b.n	22c0e <m2m_wifi_init+0x18a>
	/* Initialize host interface module */
	ret = hif_init(NULL);
   22ada:	2337      	movs	r3, #55	; 0x37
   22adc:	18fc      	adds	r4, r7, r3
   22ade:	2000      	movs	r0, #0
   22ae0:	4b53      	ldr	r3, [pc, #332]	; (22c30 <m2m_wifi_init+0x1ac>)
   22ae2:	4798      	blx	r3
   22ae4:	0003      	movs	r3, r0
   22ae6:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   22ae8:	2337      	movs	r3, #55	; 0x37
   22aea:	18fb      	adds	r3, r7, r3
   22aec:	781b      	ldrb	r3, [r3, #0]
   22aee:	b25b      	sxtb	r3, r3
   22af0:	2b00      	cmp	r3, #0
   22af2:	d000      	beq.n	22af6 <m2m_wifi_init+0x72>
   22af4:	e086      	b.n	22c04 <m2m_wifi_init+0x180>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
   22af6:	4b4f      	ldr	r3, [pc, #316]	; (22c34 <m2m_wifi_init+0x1b0>)
   22af8:	0019      	movs	r1, r3
   22afa:	2001      	movs	r0, #1
   22afc:	4b4e      	ldr	r3, [pc, #312]	; (22c38 <m2m_wifi_init+0x1b4>)
   22afe:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
   22b00:	2337      	movs	r3, #55	; 0x37
   22b02:	18fc      	adds	r4, r7, r3
   22b04:	230c      	movs	r3, #12
   22b06:	18fb      	adds	r3, r7, r3
   22b08:	0018      	movs	r0, r3
   22b0a:	4b4c      	ldr	r3, [pc, #304]	; (22c3c <m2m_wifi_init+0x1b8>)
   22b0c:	4798      	blx	r3
   22b0e:	0003      	movs	r3, r0
   22b10:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
   22b12:	4b4b      	ldr	r3, [pc, #300]	; (22c40 <m2m_wifi_init+0x1bc>)
   22b14:	0018      	movs	r0, r3
   22b16:	4b4b      	ldr	r3, [pc, #300]	; (22c44 <m2m_wifi_init+0x1c0>)
   22b18:	4798      	blx	r3
   22b1a:	230c      	movs	r3, #12
   22b1c:	18fb      	adds	r3, r7, r3
   22b1e:	791b      	ldrb	r3, [r3, #4]
   22b20:	0019      	movs	r1, r3
   22b22:	230c      	movs	r3, #12
   22b24:	18fb      	adds	r3, r7, r3
   22b26:	795b      	ldrb	r3, [r3, #5]
   22b28:	001a      	movs	r2, r3
   22b2a:	230c      	movs	r3, #12
   22b2c:	18fb      	adds	r3, r7, r3
   22b2e:	799b      	ldrb	r3, [r3, #6]
   22b30:	001c      	movs	r4, r3
   22b32:	230c      	movs	r3, #12
   22b34:	18fb      	adds	r3, r7, r3
   22b36:	8c1b      	ldrh	r3, [r3, #32]
   22b38:	4843      	ldr	r0, [pc, #268]	; (22c48 <m2m_wifi_init+0x1c4>)
   22b3a:	9300      	str	r3, [sp, #0]
   22b3c:	0023      	movs	r3, r4
   22b3e:	4c41      	ldr	r4, [pc, #260]	; (22c44 <m2m_wifi_init+0x1c0>)
   22b40:	47a0      	blx	r4
   22b42:	4b42      	ldr	r3, [pc, #264]	; (22c4c <m2m_wifi_init+0x1c8>)
   22b44:	0018      	movs	r0, r3
   22b46:	4b3f      	ldr	r3, [pc, #252]	; (22c44 <m2m_wifi_init+0x1c0>)
   22b48:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
   22b4a:	4b3d      	ldr	r3, [pc, #244]	; (22c40 <m2m_wifi_init+0x1bc>)
   22b4c:	0018      	movs	r0, r3
   22b4e:	4b3d      	ldr	r3, [pc, #244]	; (22c44 <m2m_wifi_init+0x1c0>)
   22b50:	4798      	blx	r3
   22b52:	230c      	movs	r3, #12
   22b54:	18fb      	adds	r3, r7, r3
   22b56:	3316      	adds	r3, #22
   22b58:	001a      	movs	r2, r3
   22b5a:	230c      	movs	r3, #12
   22b5c:	18fb      	adds	r3, r7, r3
   22b5e:	330a      	adds	r3, #10
   22b60:	0019      	movs	r1, r3
   22b62:	4b3b      	ldr	r3, [pc, #236]	; (22c50 <m2m_wifi_init+0x1cc>)
   22b64:	0018      	movs	r0, r3
   22b66:	4b37      	ldr	r3, [pc, #220]	; (22c44 <m2m_wifi_init+0x1c0>)
   22b68:	4798      	blx	r3
   22b6a:	4b38      	ldr	r3, [pc, #224]	; (22c4c <m2m_wifi_init+0x1c8>)
   22b6c:	0018      	movs	r0, r3
   22b6e:	4b35      	ldr	r3, [pc, #212]	; (22c44 <m2m_wifi_init+0x1c0>)
   22b70:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
   22b72:	4b33      	ldr	r3, [pc, #204]	; (22c40 <m2m_wifi_init+0x1bc>)
   22b74:	0018      	movs	r0, r3
   22b76:	4b33      	ldr	r3, [pc, #204]	; (22c44 <m2m_wifi_init+0x1c0>)
   22b78:	4798      	blx	r3
   22b7a:	230c      	movs	r3, #12
   22b7c:	18fb      	adds	r3, r7, r3
   22b7e:	79db      	ldrb	r3, [r3, #7]
   22b80:	0019      	movs	r1, r3
   22b82:	230c      	movs	r3, #12
   22b84:	18fb      	adds	r3, r7, r3
   22b86:	7a1b      	ldrb	r3, [r3, #8]
   22b88:	001a      	movs	r2, r3
   22b8a:	230c      	movs	r3, #12
   22b8c:	18fb      	adds	r3, r7, r3
   22b8e:	7a5b      	ldrb	r3, [r3, #9]
   22b90:	4830      	ldr	r0, [pc, #192]	; (22c54 <m2m_wifi_init+0x1d0>)
   22b92:	4c2c      	ldr	r4, [pc, #176]	; (22c44 <m2m_wifi_init+0x1c0>)
   22b94:	47a0      	blx	r4
   22b96:	4b2d      	ldr	r3, [pc, #180]	; (22c4c <m2m_wifi_init+0x1c8>)
   22b98:	0018      	movs	r0, r3
   22b9a:	4b2a      	ldr	r3, [pc, #168]	; (22c44 <m2m_wifi_init+0x1c0>)
   22b9c:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   22b9e:	4b28      	ldr	r3, [pc, #160]	; (22c40 <m2m_wifi_init+0x1bc>)
   22ba0:	0018      	movs	r0, r3
   22ba2:	4b28      	ldr	r3, [pc, #160]	; (22c44 <m2m_wifi_init+0x1c0>)
   22ba4:	4798      	blx	r3
   22ba6:	482c      	ldr	r0, [pc, #176]	; (22c58 <m2m_wifi_init+0x1d4>)
   22ba8:	2304      	movs	r3, #4
   22baa:	2205      	movs	r2, #5
   22bac:	2113      	movs	r1, #19
   22bae:	4c25      	ldr	r4, [pc, #148]	; (22c44 <m2m_wifi_init+0x1c0>)
   22bb0:	47a0      	blx	r4
   22bb2:	4b26      	ldr	r3, [pc, #152]	; (22c4c <m2m_wifi_init+0x1c8>)
   22bb4:	0018      	movs	r0, r3
   22bb6:	4b23      	ldr	r3, [pc, #140]	; (22c44 <m2m_wifi_init+0x1c0>)
   22bb8:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
   22bba:	4b21      	ldr	r3, [pc, #132]	; (22c40 <m2m_wifi_init+0x1bc>)
   22bbc:	0018      	movs	r0, r3
   22bbe:	4b21      	ldr	r3, [pc, #132]	; (22c44 <m2m_wifi_init+0x1c0>)
   22bc0:	4798      	blx	r3
   22bc2:	4a26      	ldr	r2, [pc, #152]	; (22c5c <m2m_wifi_init+0x1d8>)
   22bc4:	4926      	ldr	r1, [pc, #152]	; (22c60 <m2m_wifi_init+0x1dc>)
   22bc6:	4b27      	ldr	r3, [pc, #156]	; (22c64 <m2m_wifi_init+0x1e0>)
   22bc8:	0018      	movs	r0, r3
   22bca:	4b1e      	ldr	r3, [pc, #120]	; (22c44 <m2m_wifi_init+0x1c0>)
   22bcc:	4798      	blx	r3
   22bce:	4b1f      	ldr	r3, [pc, #124]	; (22c4c <m2m_wifi_init+0x1c8>)
   22bd0:	0018      	movs	r0, r3
   22bd2:	4b1c      	ldr	r3, [pc, #112]	; (22c44 <m2m_wifi_init+0x1c0>)
   22bd4:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
   22bd6:	2337      	movs	r3, #55	; 0x37
   22bd8:	18fb      	adds	r3, r7, r3
   22bda:	781b      	ldrb	r3, [r3, #0]
   22bdc:	b25b      	sxtb	r3, r3
   22bde:	330d      	adds	r3, #13
   22be0:	d117      	bne.n	22c12 <m2m_wifi_init+0x18e>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
   22be2:	23e8      	movs	r3, #232	; 0xe8
   22be4:	33ff      	adds	r3, #255	; 0xff
   22be6:	001a      	movs	r2, r3
   22be8:	491f      	ldr	r1, [pc, #124]	; (22c68 <m2m_wifi_init+0x1e4>)
   22bea:	4b20      	ldr	r3, [pc, #128]	; (22c6c <m2m_wifi_init+0x1e8>)
   22bec:	0018      	movs	r0, r3
   22bee:	4b15      	ldr	r3, [pc, #84]	; (22c44 <m2m_wifi_init+0x1c0>)
   22bf0:	4798      	blx	r3
   22bf2:	4b1f      	ldr	r3, [pc, #124]	; (22c70 <m2m_wifi_init+0x1ec>)
   22bf4:	0018      	movs	r0, r3
   22bf6:	4b13      	ldr	r3, [pc, #76]	; (22c44 <m2m_wifi_init+0x1c0>)
   22bf8:	4798      	blx	r3
   22bfa:	4b14      	ldr	r3, [pc, #80]	; (22c4c <m2m_wifi_init+0x1c8>)
   22bfc:	0018      	movs	r0, r3
   22bfe:	4b11      	ldr	r3, [pc, #68]	; (22c44 <m2m_wifi_init+0x1c0>)
   22c00:	4798      	blx	r3
	}

	goto _EXIT0;
   22c02:	e006      	b.n	22c12 <m2m_wifi_init+0x18e>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   22c04:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
   22c06:	2000      	movs	r0, #0
   22c08:	4b1a      	ldr	r3, [pc, #104]	; (22c74 <m2m_wifi_init+0x1f0>)
   22c0a:	4798      	blx	r3
   22c0c:	e002      	b.n	22c14 <m2m_wifi_init+0x190>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   22c0e:	46c0      	nop			; (mov r8, r8)
   22c10:	e000      	b.n	22c14 <m2m_wifi_init+0x190>
	goto _EXIT0;
   22c12:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
   22c14:	2337      	movs	r3, #55	; 0x37
   22c16:	18fb      	adds	r3, r7, r3
   22c18:	781b      	ldrb	r3, [r3, #0]
   22c1a:	b25b      	sxtb	r3, r3
}
   22c1c:	0018      	movs	r0, r3
   22c1e:	46bd      	mov	sp, r7
   22c20:	b00f      	add	sp, #60	; 0x3c
   22c22:	bd90      	pop	{r4, r7, pc}
   22c24:	20003ee4 	.word	0x20003ee4
   22c28:	20003ee1 	.word	0x20003ee1
   22c2c:	00023da9 	.word	0x00023da9
   22c30:	00021b2d 	.word	0x00021b2d
   22c34:	000226cd 	.word	0x000226cd
   22c38:	00022611 	.word	0x00022611
   22c3c:	00023bdd 	.word	0x00023bdd
   22c40:	0003945c 	.word	0x0003945c
   22c44:	0001eb7d 	.word	0x0001eb7d
   22c48:	00039600 	.word	0x00039600
   22c4c:	00039488 	.word	0x00039488
   22c50:	00039628 	.word	0x00039628
   22c54:	00039644 	.word	0x00039644
   22c58:	00039668 	.word	0x00039668
   22c5c:	00039680 	.word	0x00039680
   22c60:	0003968c 	.word	0x0003968c
   22c64:	00039698 	.word	0x00039698
   22c68:	00039834 	.word	0x00039834
   22c6c:	0003948c 	.word	0x0003948c
   22c70:	000396b0 	.word	0x000396b0
   22c74:	00023f39 	.word	0x00023f39

00022c78 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
   22c78:	b580      	push	{r7, lr}
   22c7a:	b082      	sub	sp, #8
   22c7c:	af00      	add	r7, sp, #0
   22c7e:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
   22c80:	4b03      	ldr	r3, [pc, #12]	; (22c90 <m2m_wifi_handle_events+0x18>)
   22c82:	4798      	blx	r3
   22c84:	0003      	movs	r3, r0
}
   22c86:	0018      	movs	r0, r3
   22c88:	46bd      	mov	sp, r7
   22c8a:	b002      	add	sp, #8
   22c8c:	bd80      	pop	{r7, pc}
   22c8e:	46c0      	nop			; (mov r8, r8)
   22c90:	000223f1 	.word	0x000223f1

00022c94 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
   22c94:	b590      	push	{r4, r7, lr}
   22c96:	b087      	sub	sp, #28
   22c98:	af02      	add	r7, sp, #8
   22c9a:	60f8      	str	r0, [r7, #12]
   22c9c:	0008      	movs	r0, r1
   22c9e:	0011      	movs	r1, r2
   22ca0:	607b      	str	r3, [r7, #4]
   22ca2:	230b      	movs	r3, #11
   22ca4:	18fb      	adds	r3, r7, r3
   22ca6:	1c02      	adds	r2, r0, #0
   22ca8:	701a      	strb	r2, [r3, #0]
   22caa:	230a      	movs	r3, #10
   22cac:	18fb      	adds	r3, r7, r3
   22cae:	1c0a      	adds	r2, r1, #0
   22cb0:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
   22cb2:	687c      	ldr	r4, [r7, #4]
   22cb4:	230a      	movs	r3, #10
   22cb6:	18fb      	adds	r3, r7, r3
   22cb8:	781a      	ldrb	r2, [r3, #0]
   22cba:	230b      	movs	r3, #11
   22cbc:	18fb      	adds	r3, r7, r3
   22cbe:	7819      	ldrb	r1, [r3, #0]
   22cc0:	68f8      	ldr	r0, [r7, #12]
   22cc2:	2300      	movs	r3, #0
   22cc4:	9301      	str	r3, [sp, #4]
   22cc6:	2320      	movs	r3, #32
   22cc8:	18fb      	adds	r3, r7, r3
   22cca:	881b      	ldrh	r3, [r3, #0]
   22ccc:	9300      	str	r3, [sp, #0]
   22cce:	0023      	movs	r3, r4
   22cd0:	4c03      	ldr	r4, [pc, #12]	; (22ce0 <m2m_wifi_connect+0x4c>)
   22cd2:	47a0      	blx	r4
   22cd4:	0003      	movs	r3, r0
}
   22cd6:	0018      	movs	r0, r3
   22cd8:	46bd      	mov	sp, r7
   22cda:	b005      	add	sp, #20
   22cdc:	bd90      	pop	{r4, r7, pc}
   22cde:	46c0      	nop			; (mov r8, r8)
   22ce0:	00022ce5 	.word	0x00022ce5

00022ce4 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
   22ce4:	b5b0      	push	{r4, r5, r7, lr}
   22ce6:	b0aa      	sub	sp, #168	; 0xa8
   22ce8:	af04      	add	r7, sp, #16
   22cea:	60f8      	str	r0, [r7, #12]
   22cec:	0008      	movs	r0, r1
   22cee:	0011      	movs	r1, r2
   22cf0:	607b      	str	r3, [r7, #4]
   22cf2:	230b      	movs	r3, #11
   22cf4:	18fb      	adds	r3, r7, r3
   22cf6:	1c02      	adds	r2, r0, #0
   22cf8:	701a      	strb	r2, [r3, #0]
   22cfa:	230a      	movs	r3, #10
   22cfc:	18fb      	adds	r3, r7, r3
   22cfe:	1c0a      	adds	r2, r1, #0
   22d00:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
   22d02:	2397      	movs	r3, #151	; 0x97
   22d04:	18fb      	adds	r3, r7, r3
   22d06:	2200      	movs	r2, #0
   22d08:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
   22d0a:	230a      	movs	r3, #10
   22d0c:	18fb      	adds	r3, r7, r3
   22d0e:	781b      	ldrb	r3, [r3, #0]
   22d10:	2b01      	cmp	r3, #1
   22d12:	d100      	bne.n	22d16 <m2m_wifi_connect_sc+0x32>
   22d14:	e085      	b.n	22e22 <m2m_wifi_connect_sc+0x13e>
	{
		if(pvAuthInfo == NULL)
   22d16:	687b      	ldr	r3, [r7, #4]
   22d18:	2b00      	cmp	r3, #0
   22d1a:	d112      	bne.n	22d42 <m2m_wifi_connect_sc+0x5e>
		{
			M2M_ERR("Key is not valid\n");
   22d1c:	4ad8      	ldr	r2, [pc, #864]	; (23080 <m2m_wifi_connect_sc+0x39c>)
   22d1e:	49d9      	ldr	r1, [pc, #868]	; (23084 <m2m_wifi_connect_sc+0x3a0>)
   22d20:	4bd9      	ldr	r3, [pc, #868]	; (23088 <m2m_wifi_connect_sc+0x3a4>)
   22d22:	0018      	movs	r0, r3
   22d24:	4bd9      	ldr	r3, [pc, #868]	; (2308c <m2m_wifi_connect_sc+0x3a8>)
   22d26:	4798      	blx	r3
   22d28:	4bd9      	ldr	r3, [pc, #868]	; (23090 <m2m_wifi_connect_sc+0x3ac>)
   22d2a:	0018      	movs	r0, r3
   22d2c:	4bd7      	ldr	r3, [pc, #860]	; (2308c <m2m_wifi_connect_sc+0x3a8>)
   22d2e:	4798      	blx	r3
   22d30:	4bd8      	ldr	r3, [pc, #864]	; (23094 <m2m_wifi_connect_sc+0x3b0>)
   22d32:	0018      	movs	r0, r3
   22d34:	4bd5      	ldr	r3, [pc, #852]	; (2308c <m2m_wifi_connect_sc+0x3a8>)
   22d36:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   22d38:	2397      	movs	r3, #151	; 0x97
   22d3a:	18fb      	adds	r3, r7, r3
   22d3c:	22f4      	movs	r2, #244	; 0xf4
   22d3e:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   22d40:	e1f9      	b.n	23136 <m2m_wifi_connect_sc+0x452>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
   22d42:	230a      	movs	r3, #10
   22d44:	18fb      	adds	r3, r7, r3
   22d46:	781b      	ldrb	r3, [r3, #0]
   22d48:	2b02      	cmp	r3, #2
   22d4a:	d16a      	bne.n	22e22 <m2m_wifi_connect_sc+0x13e>
   22d4c:	687b      	ldr	r3, [r7, #4]
   22d4e:	0018      	movs	r0, r3
   22d50:	4bd1      	ldr	r3, [pc, #836]	; (23098 <m2m_wifi_connect_sc+0x3b4>)
   22d52:	4798      	blx	r3
   22d54:	0003      	movs	r3, r0
   22d56:	2b40      	cmp	r3, #64	; 0x40
   22d58:	d163      	bne.n	22e22 <m2m_wifi_connect_sc+0x13e>
		{
			uint8 i = 0;
   22d5a:	2396      	movs	r3, #150	; 0x96
   22d5c:	18fb      	adds	r3, r7, r3
   22d5e:	2200      	movs	r2, #0
   22d60:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
   22d62:	687b      	ldr	r3, [r7, #4]
   22d64:	2290      	movs	r2, #144	; 0x90
   22d66:	18ba      	adds	r2, r7, r2
   22d68:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   22d6a:	e055      	b.n	22e18 <m2m_wifi_connect_sc+0x134>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
   22d6c:	2396      	movs	r3, #150	; 0x96
   22d6e:	18fb      	adds	r3, r7, r3
   22d70:	781b      	ldrb	r3, [r3, #0]
   22d72:	2290      	movs	r2, #144	; 0x90
   22d74:	18ba      	adds	r2, r7, r2
   22d76:	6812      	ldr	r2, [r2, #0]
   22d78:	18d3      	adds	r3, r2, r3
   22d7a:	781b      	ldrb	r3, [r3, #0]
   22d7c:	2b2f      	cmp	r3, #47	; 0x2f
   22d7e:	d931      	bls.n	22de4 <m2m_wifi_connect_sc+0x100>
   22d80:	2396      	movs	r3, #150	; 0x96
   22d82:	18fb      	adds	r3, r7, r3
   22d84:	781b      	ldrb	r3, [r3, #0]
   22d86:	2290      	movs	r2, #144	; 0x90
   22d88:	18ba      	adds	r2, r7, r2
   22d8a:	6812      	ldr	r2, [r2, #0]
   22d8c:	18d3      	adds	r3, r2, r3
   22d8e:	781b      	ldrb	r3, [r3, #0]
   22d90:	2b39      	cmp	r3, #57	; 0x39
   22d92:	d909      	bls.n	22da8 <m2m_wifi_connect_sc+0xc4>
   22d94:	2396      	movs	r3, #150	; 0x96
   22d96:	18fb      	adds	r3, r7, r3
   22d98:	781b      	ldrb	r3, [r3, #0]
   22d9a:	2290      	movs	r2, #144	; 0x90
   22d9c:	18ba      	adds	r2, r7, r2
   22d9e:	6812      	ldr	r2, [r2, #0]
   22da0:	18d3      	adds	r3, r2, r3
   22da2:	781b      	ldrb	r3, [r3, #0]
   22da4:	2b40      	cmp	r3, #64	; 0x40
   22da6:	d91d      	bls.n	22de4 <m2m_wifi_connect_sc+0x100>
   22da8:	2396      	movs	r3, #150	; 0x96
   22daa:	18fb      	adds	r3, r7, r3
   22dac:	781b      	ldrb	r3, [r3, #0]
   22dae:	2290      	movs	r2, #144	; 0x90
   22db0:	18ba      	adds	r2, r7, r2
   22db2:	6812      	ldr	r2, [r2, #0]
   22db4:	18d3      	adds	r3, r2, r3
   22db6:	781b      	ldrb	r3, [r3, #0]
   22db8:	2b46      	cmp	r3, #70	; 0x46
   22dba:	d909      	bls.n	22dd0 <m2m_wifi_connect_sc+0xec>
   22dbc:	2396      	movs	r3, #150	; 0x96
   22dbe:	18fb      	adds	r3, r7, r3
   22dc0:	781b      	ldrb	r3, [r3, #0]
   22dc2:	2290      	movs	r2, #144	; 0x90
   22dc4:	18ba      	adds	r2, r7, r2
   22dc6:	6812      	ldr	r2, [r2, #0]
   22dc8:	18d3      	adds	r3, r2, r3
   22dca:	781b      	ldrb	r3, [r3, #0]
   22dcc:	2b60      	cmp	r3, #96	; 0x60
   22dce:	d909      	bls.n	22de4 <m2m_wifi_connect_sc+0x100>
   22dd0:	2396      	movs	r3, #150	; 0x96
   22dd2:	18fb      	adds	r3, r7, r3
   22dd4:	781b      	ldrb	r3, [r3, #0]
   22dd6:	2290      	movs	r2, #144	; 0x90
   22dd8:	18ba      	adds	r2, r7, r2
   22dda:	6812      	ldr	r2, [r2, #0]
   22ddc:	18d3      	adds	r3, r2, r3
   22dde:	781b      	ldrb	r3, [r3, #0]
   22de0:	2b66      	cmp	r3, #102	; 0x66
   22de2:	d912      	bls.n	22e0a <m2m_wifi_connect_sc+0x126>
				{
					M2M_ERR("Invalid Key\n");
   22de4:	4aad      	ldr	r2, [pc, #692]	; (2309c <m2m_wifi_connect_sc+0x3b8>)
   22de6:	49a7      	ldr	r1, [pc, #668]	; (23084 <m2m_wifi_connect_sc+0x3a0>)
   22de8:	4ba7      	ldr	r3, [pc, #668]	; (23088 <m2m_wifi_connect_sc+0x3a4>)
   22dea:	0018      	movs	r0, r3
   22dec:	4ba7      	ldr	r3, [pc, #668]	; (2308c <m2m_wifi_connect_sc+0x3a8>)
   22dee:	4798      	blx	r3
   22df0:	4bab      	ldr	r3, [pc, #684]	; (230a0 <m2m_wifi_connect_sc+0x3bc>)
   22df2:	0018      	movs	r0, r3
   22df4:	4ba5      	ldr	r3, [pc, #660]	; (2308c <m2m_wifi_connect_sc+0x3a8>)
   22df6:	4798      	blx	r3
   22df8:	4ba6      	ldr	r3, [pc, #664]	; (23094 <m2m_wifi_connect_sc+0x3b0>)
   22dfa:	0018      	movs	r0, r3
   22dfc:	4ba3      	ldr	r3, [pc, #652]	; (2308c <m2m_wifi_connect_sc+0x3a8>)
   22dfe:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
   22e00:	2397      	movs	r3, #151	; 0x97
   22e02:	18fb      	adds	r3, r7, r3
   22e04:	22f4      	movs	r2, #244	; 0xf4
   22e06:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   22e08:	e195      	b.n	23136 <m2m_wifi_connect_sc+0x452>
				}
				i++;
   22e0a:	2396      	movs	r3, #150	; 0x96
   22e0c:	18fb      	adds	r3, r7, r3
   22e0e:	781a      	ldrb	r2, [r3, #0]
   22e10:	2396      	movs	r3, #150	; 0x96
   22e12:	18fb      	adds	r3, r7, r3
   22e14:	3201      	adds	r2, #1
   22e16:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   22e18:	2396      	movs	r3, #150	; 0x96
   22e1a:	18fb      	adds	r3, r7, r3
   22e1c:	781b      	ldrb	r3, [r3, #0]
   22e1e:	2b3f      	cmp	r3, #63	; 0x3f
   22e20:	d9a4      	bls.n	22d6c <m2m_wifi_connect_sc+0x88>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
   22e22:	230b      	movs	r3, #11
   22e24:	18fb      	adds	r3, r7, r3
   22e26:	781b      	ldrb	r3, [r3, #0]
   22e28:	2b00      	cmp	r3, #0
   22e2a:	d004      	beq.n	22e36 <m2m_wifi_connect_sc+0x152>
   22e2c:	230b      	movs	r3, #11
   22e2e:	18fb      	adds	r3, r7, r3
   22e30:	781b      	ldrb	r3, [r3, #0]
   22e32:	2b20      	cmp	r3, #32
   22e34:	d913      	bls.n	22e5e <m2m_wifi_connect_sc+0x17a>
	{
		M2M_ERR("SSID LEN INVALID\n");
   22e36:	238c      	movs	r3, #140	; 0x8c
   22e38:	009a      	lsls	r2, r3, #2
   22e3a:	4992      	ldr	r1, [pc, #584]	; (23084 <m2m_wifi_connect_sc+0x3a0>)
   22e3c:	4b92      	ldr	r3, [pc, #584]	; (23088 <m2m_wifi_connect_sc+0x3a4>)
   22e3e:	0018      	movs	r0, r3
   22e40:	4b92      	ldr	r3, [pc, #584]	; (2308c <m2m_wifi_connect_sc+0x3a8>)
   22e42:	4798      	blx	r3
   22e44:	4b97      	ldr	r3, [pc, #604]	; (230a4 <m2m_wifi_connect_sc+0x3c0>)
   22e46:	0018      	movs	r0, r3
   22e48:	4b90      	ldr	r3, [pc, #576]	; (2308c <m2m_wifi_connect_sc+0x3a8>)
   22e4a:	4798      	blx	r3
   22e4c:	4b91      	ldr	r3, [pc, #580]	; (23094 <m2m_wifi_connect_sc+0x3b0>)
   22e4e:	0018      	movs	r0, r3
   22e50:	4b8e      	ldr	r3, [pc, #568]	; (2308c <m2m_wifi_connect_sc+0x3a8>)
   22e52:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   22e54:	2397      	movs	r3, #151	; 0x97
   22e56:	18fb      	adds	r3, r7, r3
   22e58:	22f4      	movs	r2, #244	; 0xf4
   22e5a:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   22e5c:	e16b      	b.n	23136 <m2m_wifi_connect_sc+0x452>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
   22e5e:	23a8      	movs	r3, #168	; 0xa8
   22e60:	18fb      	adds	r3, r7, r3
   22e62:	881b      	ldrh	r3, [r3, #0]
   22e64:	2b00      	cmp	r3, #0
   22e66:	d004      	beq.n	22e72 <m2m_wifi_connect_sc+0x18e>
   22e68:	23a8      	movs	r3, #168	; 0xa8
   22e6a:	18fb      	adds	r3, r7, r3
   22e6c:	881b      	ldrh	r3, [r3, #0]
   22e6e:	2b0e      	cmp	r3, #14
   22e70:	d917      	bls.n	22ea2 <m2m_wifi_connect_sc+0x1be>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
   22e72:	23a8      	movs	r3, #168	; 0xa8
   22e74:	18fb      	adds	r3, r7, r3
   22e76:	881b      	ldrh	r3, [r3, #0]
   22e78:	2bff      	cmp	r3, #255	; 0xff
   22e7a:	d012      	beq.n	22ea2 <m2m_wifi_connect_sc+0x1be>
		{
			M2M_ERR("CH INVALID\n");
   22e7c:	4a8a      	ldr	r2, [pc, #552]	; (230a8 <m2m_wifi_connect_sc+0x3c4>)
   22e7e:	4981      	ldr	r1, [pc, #516]	; (23084 <m2m_wifi_connect_sc+0x3a0>)
   22e80:	4b81      	ldr	r3, [pc, #516]	; (23088 <m2m_wifi_connect_sc+0x3a4>)
   22e82:	0018      	movs	r0, r3
   22e84:	4b81      	ldr	r3, [pc, #516]	; (2308c <m2m_wifi_connect_sc+0x3a8>)
   22e86:	4798      	blx	r3
   22e88:	4b88      	ldr	r3, [pc, #544]	; (230ac <m2m_wifi_connect_sc+0x3c8>)
   22e8a:	0018      	movs	r0, r3
   22e8c:	4b7f      	ldr	r3, [pc, #508]	; (2308c <m2m_wifi_connect_sc+0x3a8>)
   22e8e:	4798      	blx	r3
   22e90:	4b80      	ldr	r3, [pc, #512]	; (23094 <m2m_wifi_connect_sc+0x3b0>)
   22e92:	0018      	movs	r0, r3
   22e94:	4b7d      	ldr	r3, [pc, #500]	; (2308c <m2m_wifi_connect_sc+0x3a8>)
   22e96:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   22e98:	2397      	movs	r3, #151	; 0x97
   22e9a:	18fb      	adds	r3, r7, r3
   22e9c:	22f4      	movs	r2, #244	; 0xf4
   22e9e:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   22ea0:	e149      	b.n	23136 <m2m_wifi_connect_sc+0x452>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
   22ea2:	230b      	movs	r3, #11
   22ea4:	18fb      	adds	r3, r7, r3
   22ea6:	781a      	ldrb	r2, [r3, #0]
   22ea8:	68f9      	ldr	r1, [r7, #12]
   22eaa:	2314      	movs	r3, #20
   22eac:	18fb      	adds	r3, r7, r3
   22eae:	3346      	adds	r3, #70	; 0x46
   22eb0:	0018      	movs	r0, r3
   22eb2:	4b7f      	ldr	r3, [pc, #508]	; (230b0 <m2m_wifi_connect_sc+0x3cc>)
   22eb4:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
   22eb6:	230b      	movs	r3, #11
   22eb8:	18fb      	adds	r3, r7, r3
   22eba:	781b      	ldrb	r3, [r3, #0]
   22ebc:	2214      	movs	r2, #20
   22ebe:	18ba      	adds	r2, r7, r2
   22ec0:	2146      	movs	r1, #70	; 0x46
   22ec2:	18d3      	adds	r3, r2, r3
   22ec4:	185b      	adds	r3, r3, r1
   22ec6:	2200      	movs	r2, #0
   22ec8:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
   22eca:	2314      	movs	r3, #20
   22ecc:	18fb      	adds	r3, r7, r3
   22ece:	22a8      	movs	r2, #168	; 0xa8
   22ed0:	18ba      	adds	r2, r7, r2
   22ed2:	2144      	movs	r1, #68	; 0x44
   22ed4:	8812      	ldrh	r2, [r2, #0]
   22ed6:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
   22ed8:	23ac      	movs	r3, #172	; 0xac
   22eda:	18fb      	adds	r3, r7, r3
   22edc:	781b      	ldrb	r3, [r3, #0]
   22ede:	1e5a      	subs	r2, r3, #1
   22ee0:	4193      	sbcs	r3, r2
   22ee2:	b2db      	uxtb	r3, r3
   22ee4:	0019      	movs	r1, r3
   22ee6:	2314      	movs	r3, #20
   22ee8:	18fb      	adds	r3, r7, r3
   22eea:	2267      	movs	r2, #103	; 0x67
   22eec:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
   22eee:	2314      	movs	r3, #20
   22ef0:	18fb      	adds	r3, r7, r3
   22ef2:	228c      	movs	r2, #140	; 0x8c
   22ef4:	18ba      	adds	r2, r7, r2
   22ef6:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
   22ef8:	238c      	movs	r3, #140	; 0x8c
   22efa:	18fb      	adds	r3, r7, r3
   22efc:	681b      	ldr	r3, [r3, #0]
   22efe:	220a      	movs	r2, #10
   22f00:	18ba      	adds	r2, r7, r2
   22f02:	2141      	movs	r1, #65	; 0x41
   22f04:	7812      	ldrb	r2, [r2, #0]
   22f06:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
   22f08:	230a      	movs	r3, #10
   22f0a:	18fb      	adds	r3, r7, r3
   22f0c:	781b      	ldrb	r3, [r3, #0]
   22f0e:	2b03      	cmp	r3, #3
   22f10:	d000      	beq.n	22f14 <m2m_wifi_connect_sc+0x230>
   22f12:	e07d      	b.n	23010 <m2m_wifi_connect_sc+0x32c>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
   22f14:	687b      	ldr	r3, [r7, #4]
   22f16:	2288      	movs	r2, #136	; 0x88
   22f18:	18ba      	adds	r2, r7, r2
   22f1a:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
   22f1c:	238c      	movs	r3, #140	; 0x8c
   22f1e:	18fb      	adds	r3, r7, r3
   22f20:	681b      	ldr	r3, [r3, #0]
   22f22:	2284      	movs	r2, #132	; 0x84
   22f24:	18ba      	adds	r2, r7, r2
   22f26:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
   22f28:	2388      	movs	r3, #136	; 0x88
   22f2a:	18fb      	adds	r3, r7, r3
   22f2c:	681b      	ldr	r3, [r3, #0]
   22f2e:	781b      	ldrb	r3, [r3, #0]
   22f30:	3b01      	subs	r3, #1
   22f32:	b2da      	uxtb	r2, r3
   22f34:	2384      	movs	r3, #132	; 0x84
   22f36:	18fb      	adds	r3, r7, r3
   22f38:	681b      	ldr	r3, [r3, #0]
   22f3a:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
   22f3c:	2384      	movs	r3, #132	; 0x84
   22f3e:	18fb      	adds	r3, r7, r3
   22f40:	681b      	ldr	r3, [r3, #0]
   22f42:	781b      	ldrb	r3, [r3, #0]
   22f44:	2b03      	cmp	r3, #3
   22f46:	d919      	bls.n	22f7c <m2m_wifi_connect_sc+0x298>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
   22f48:	2394      	movs	r3, #148	; 0x94
   22f4a:	009a      	lsls	r2, r3, #2
   22f4c:	494d      	ldr	r1, [pc, #308]	; (23084 <m2m_wifi_connect_sc+0x3a0>)
   22f4e:	4b4e      	ldr	r3, [pc, #312]	; (23088 <m2m_wifi_connect_sc+0x3a4>)
   22f50:	0018      	movs	r0, r3
   22f52:	4b4e      	ldr	r3, [pc, #312]	; (2308c <m2m_wifi_connect_sc+0x3a8>)
   22f54:	4798      	blx	r3
   22f56:	2384      	movs	r3, #132	; 0x84
   22f58:	18fb      	adds	r3, r7, r3
   22f5a:	681b      	ldr	r3, [r3, #0]
   22f5c:	781b      	ldrb	r3, [r3, #0]
   22f5e:	001a      	movs	r2, r3
   22f60:	4b54      	ldr	r3, [pc, #336]	; (230b4 <m2m_wifi_connect_sc+0x3d0>)
   22f62:	0011      	movs	r1, r2
   22f64:	0018      	movs	r0, r3
   22f66:	4b49      	ldr	r3, [pc, #292]	; (2308c <m2m_wifi_connect_sc+0x3a8>)
   22f68:	4798      	blx	r3
   22f6a:	4b4a      	ldr	r3, [pc, #296]	; (23094 <m2m_wifi_connect_sc+0x3b0>)
   22f6c:	0018      	movs	r0, r3
   22f6e:	4b47      	ldr	r3, [pc, #284]	; (2308c <m2m_wifi_connect_sc+0x3a8>)
   22f70:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   22f72:	2397      	movs	r3, #151	; 0x97
   22f74:	18fb      	adds	r3, r7, r3
   22f76:	22f4      	movs	r2, #244	; 0xf4
   22f78:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   22f7a:	e0dc      	b.n	23136 <m2m_wifi_connect_sc+0x452>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
   22f7c:	2388      	movs	r3, #136	; 0x88
   22f7e:	18fb      	adds	r3, r7, r3
   22f80:	681b      	ldr	r3, [r3, #0]
   22f82:	785b      	ldrb	r3, [r3, #1]
   22f84:	3b01      	subs	r3, #1
   22f86:	b2da      	uxtb	r2, r3
   22f88:	2384      	movs	r3, #132	; 0x84
   22f8a:	18fb      	adds	r3, r7, r3
   22f8c:	681b      	ldr	r3, [r3, #0]
   22f8e:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
   22f90:	2384      	movs	r3, #132	; 0x84
   22f92:	18fb      	adds	r3, r7, r3
   22f94:	681b      	ldr	r3, [r3, #0]
   22f96:	785b      	ldrb	r3, [r3, #1]
   22f98:	2b0a      	cmp	r3, #10
   22f9a:	d01e      	beq.n	22fda <m2m_wifi_connect_sc+0x2f6>
   22f9c:	2384      	movs	r3, #132	; 0x84
   22f9e:	18fb      	adds	r3, r7, r3
   22fa0:	681b      	ldr	r3, [r3, #0]
   22fa2:	785b      	ldrb	r3, [r3, #1]
   22fa4:	2b1a      	cmp	r3, #26
   22fa6:	d018      	beq.n	22fda <m2m_wifi_connect_sc+0x2f6>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
   22fa8:	4a43      	ldr	r2, [pc, #268]	; (230b8 <m2m_wifi_connect_sc+0x3d4>)
   22faa:	4936      	ldr	r1, [pc, #216]	; (23084 <m2m_wifi_connect_sc+0x3a0>)
   22fac:	4b36      	ldr	r3, [pc, #216]	; (23088 <m2m_wifi_connect_sc+0x3a4>)
   22fae:	0018      	movs	r0, r3
   22fb0:	4b36      	ldr	r3, [pc, #216]	; (2308c <m2m_wifi_connect_sc+0x3a8>)
   22fb2:	4798      	blx	r3
   22fb4:	2384      	movs	r3, #132	; 0x84
   22fb6:	18fb      	adds	r3, r7, r3
   22fb8:	681b      	ldr	r3, [r3, #0]
   22fba:	785b      	ldrb	r3, [r3, #1]
   22fbc:	001a      	movs	r2, r3
   22fbe:	4b3f      	ldr	r3, [pc, #252]	; (230bc <m2m_wifi_connect_sc+0x3d8>)
   22fc0:	0011      	movs	r1, r2
   22fc2:	0018      	movs	r0, r3
   22fc4:	4b31      	ldr	r3, [pc, #196]	; (2308c <m2m_wifi_connect_sc+0x3a8>)
   22fc6:	4798      	blx	r3
   22fc8:	4b32      	ldr	r3, [pc, #200]	; (23094 <m2m_wifi_connect_sc+0x3b0>)
   22fca:	0018      	movs	r0, r3
   22fcc:	4b2f      	ldr	r3, [pc, #188]	; (2308c <m2m_wifi_connect_sc+0x3a8>)
   22fce:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   22fd0:	2397      	movs	r3, #151	; 0x97
   22fd2:	18fb      	adds	r3, r7, r3
   22fd4:	22f4      	movs	r2, #244	; 0xf4
   22fd6:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   22fd8:	e0ad      	b.n	23136 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
   22fda:	2384      	movs	r3, #132	; 0x84
   22fdc:	18fb      	adds	r3, r7, r3
   22fde:	681b      	ldr	r3, [r3, #0]
   22fe0:	1c98      	adds	r0, r3, #2
   22fe2:	2388      	movs	r3, #136	; 0x88
   22fe4:	18fb      	adds	r3, r7, r3
   22fe6:	681b      	ldr	r3, [r3, #0]
   22fe8:	1c99      	adds	r1, r3, #2
   22fea:	2388      	movs	r3, #136	; 0x88
   22fec:	18fb      	adds	r3, r7, r3
   22fee:	681b      	ldr	r3, [r3, #0]
   22ff0:	785b      	ldrb	r3, [r3, #1]
   22ff2:	001a      	movs	r2, r3
   22ff4:	4b2e      	ldr	r3, [pc, #184]	; (230b0 <m2m_wifi_connect_sc+0x3cc>)
   22ff6:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
   22ff8:	2388      	movs	r3, #136	; 0x88
   22ffa:	18fb      	adds	r3, r7, r3
   22ffc:	681b      	ldr	r3, [r3, #0]
   22ffe:	785b      	ldrb	r3, [r3, #1]
   23000:	001a      	movs	r2, r3
   23002:	2384      	movs	r3, #132	; 0x84
   23004:	18fb      	adds	r3, r7, r3
   23006:	681b      	ldr	r3, [r3, #0]
   23008:	189b      	adds	r3, r3, r2
   2300a:	2200      	movs	r2, #0
   2300c:	709a      	strb	r2, [r3, #2]
   2300e:	e081      	b.n	23114 <m2m_wifi_connect_sc+0x430>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
   23010:	230a      	movs	r3, #10
   23012:	18fb      	adds	r3, r7, r3
   23014:	781b      	ldrb	r3, [r3, #0]
   23016:	2b02      	cmp	r3, #2
   23018:	d156      	bne.n	230c8 <m2m_wifi_connect_sc+0x3e4>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
   2301a:	2382      	movs	r3, #130	; 0x82
   2301c:	18fc      	adds	r4, r7, r3
   2301e:	687b      	ldr	r3, [r7, #4]
   23020:	0018      	movs	r0, r3
   23022:	4b1d      	ldr	r3, [pc, #116]	; (23098 <m2m_wifi_connect_sc+0x3b4>)
   23024:	4798      	blx	r3
   23026:	0003      	movs	r3, r0
   23028:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
   2302a:	2382      	movs	r3, #130	; 0x82
   2302c:	18fb      	adds	r3, r7, r3
   2302e:	881b      	ldrh	r3, [r3, #0]
   23030:	2b00      	cmp	r3, #0
   23032:	d004      	beq.n	2303e <m2m_wifi_connect_sc+0x35a>
   23034:	2382      	movs	r3, #130	; 0x82
   23036:	18fb      	adds	r3, r7, r3
   23038:	881b      	ldrh	r3, [r3, #0]
   2303a:	2b40      	cmp	r3, #64	; 0x40
   2303c:	d912      	bls.n	23064 <m2m_wifi_connect_sc+0x380>
		{
			M2M_ERR("Incorrect PSK key length\n");
   2303e:	4a20      	ldr	r2, [pc, #128]	; (230c0 <m2m_wifi_connect_sc+0x3dc>)
   23040:	4910      	ldr	r1, [pc, #64]	; (23084 <m2m_wifi_connect_sc+0x3a0>)
   23042:	4b11      	ldr	r3, [pc, #68]	; (23088 <m2m_wifi_connect_sc+0x3a4>)
   23044:	0018      	movs	r0, r3
   23046:	4b11      	ldr	r3, [pc, #68]	; (2308c <m2m_wifi_connect_sc+0x3a8>)
   23048:	4798      	blx	r3
   2304a:	4b1e      	ldr	r3, [pc, #120]	; (230c4 <m2m_wifi_connect_sc+0x3e0>)
   2304c:	0018      	movs	r0, r3
   2304e:	4b0f      	ldr	r3, [pc, #60]	; (2308c <m2m_wifi_connect_sc+0x3a8>)
   23050:	4798      	blx	r3
   23052:	4b10      	ldr	r3, [pc, #64]	; (23094 <m2m_wifi_connect_sc+0x3b0>)
   23054:	0018      	movs	r0, r3
   23056:	4b0d      	ldr	r3, [pc, #52]	; (2308c <m2m_wifi_connect_sc+0x3a8>)
   23058:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   2305a:	2397      	movs	r3, #151	; 0x97
   2305c:	18fb      	adds	r3, r7, r3
   2305e:	22f4      	movs	r2, #244	; 0xf4
   23060:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   23062:	e068      	b.n	23136 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
   23064:	238c      	movs	r3, #140	; 0x8c
   23066:	18fb      	adds	r3, r7, r3
   23068:	6818      	ldr	r0, [r3, #0]
   2306a:	2382      	movs	r3, #130	; 0x82
   2306c:	18fb      	adds	r3, r7, r3
   2306e:	881b      	ldrh	r3, [r3, #0]
   23070:	3301      	adds	r3, #1
   23072:	001a      	movs	r2, r3
   23074:	687b      	ldr	r3, [r7, #4]
   23076:	0019      	movs	r1, r3
   23078:	4b0d      	ldr	r3, [pc, #52]	; (230b0 <m2m_wifi_connect_sc+0x3cc>)
   2307a:	4798      	blx	r3
   2307c:	e04a      	b.n	23114 <m2m_wifi_connect_sc+0x430>
   2307e:	46c0      	nop			; (mov r8, r8)
   23080:	0000021a 	.word	0x0000021a
   23084:	00039844 	.word	0x00039844
   23088:	0003948c 	.word	0x0003948c
   2308c:	0001eb7d 	.word	0x0001eb7d
   23090:	000396cc 	.word	0x000396cc
   23094:	00039488 	.word	0x00039488
   23098:	00021953 	.word	0x00021953
   2309c:	00000226 	.word	0x00000226
   230a0:	000396e0 	.word	0x000396e0
   230a4:	000396f0 	.word	0x000396f0
   230a8:	00000239 	.word	0x00000239
   230ac:	00039704 	.word	0x00039704
   230b0:	000218d9 	.word	0x000218d9
   230b4:	00039710 	.word	0x00039710
   230b8:	00000257 	.word	0x00000257
   230bc:	0003972c 	.word	0x0003972c
   230c0:	00000266 	.word	0x00000266
   230c4:	00039748 	.word	0x00039748
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
   230c8:	230a      	movs	r3, #10
   230ca:	18fb      	adds	r3, r7, r3
   230cc:	781b      	ldrb	r3, [r3, #0]
   230ce:	2b04      	cmp	r3, #4
   230d0:	d108      	bne.n	230e4 <m2m_wifi_connect_sc+0x400>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
   230d2:	238c      	movs	r3, #140	; 0x8c
   230d4:	18fb      	adds	r3, r7, r3
   230d6:	681b      	ldr	r3, [r3, #0]
   230d8:	6879      	ldr	r1, [r7, #4]
   230da:	223e      	movs	r2, #62	; 0x3e
   230dc:	0018      	movs	r0, r3
   230de:	4b1a      	ldr	r3, [pc, #104]	; (23148 <m2m_wifi_connect_sc+0x464>)
   230e0:	4798      	blx	r3
   230e2:	e017      	b.n	23114 <m2m_wifi_connect_sc+0x430>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
   230e4:	230a      	movs	r3, #10
   230e6:	18fb      	adds	r3, r7, r3
   230e8:	781b      	ldrb	r3, [r3, #0]
   230ea:	2b01      	cmp	r3, #1
   230ec:	d012      	beq.n	23114 <m2m_wifi_connect_sc+0x430>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
   230ee:	4a17      	ldr	r2, [pc, #92]	; (2314c <m2m_wifi_connect_sc+0x468>)
   230f0:	4917      	ldr	r1, [pc, #92]	; (23150 <m2m_wifi_connect_sc+0x46c>)
   230f2:	4b18      	ldr	r3, [pc, #96]	; (23154 <m2m_wifi_connect_sc+0x470>)
   230f4:	0018      	movs	r0, r3
   230f6:	4b18      	ldr	r3, [pc, #96]	; (23158 <m2m_wifi_connect_sc+0x474>)
   230f8:	4798      	blx	r3
   230fa:	4b18      	ldr	r3, [pc, #96]	; (2315c <m2m_wifi_connect_sc+0x478>)
   230fc:	0018      	movs	r0, r3
   230fe:	4b16      	ldr	r3, [pc, #88]	; (23158 <m2m_wifi_connect_sc+0x474>)
   23100:	4798      	blx	r3
   23102:	4b17      	ldr	r3, [pc, #92]	; (23160 <m2m_wifi_connect_sc+0x47c>)
   23104:	0018      	movs	r0, r3
   23106:	4b14      	ldr	r3, [pc, #80]	; (23158 <m2m_wifi_connect_sc+0x474>)
   23108:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   2310a:	2397      	movs	r3, #151	; 0x97
   2310c:	18fb      	adds	r3, r7, r3
   2310e:	22f4      	movs	r2, #244	; 0xf4
   23110:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   23112:	e010      	b.n	23136 <m2m_wifi_connect_sc+0x452>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
   23114:	2397      	movs	r3, #151	; 0x97
   23116:	18fc      	adds	r4, r7, r3
   23118:	2314      	movs	r3, #20
   2311a:	18fa      	adds	r2, r7, r3
   2311c:	2300      	movs	r3, #0
   2311e:	9302      	str	r3, [sp, #8]
   23120:	2300      	movs	r3, #0
   23122:	9301      	str	r3, [sp, #4]
   23124:	2300      	movs	r3, #0
   23126:	9300      	str	r3, [sp, #0]
   23128:	236c      	movs	r3, #108	; 0x6c
   2312a:	2128      	movs	r1, #40	; 0x28
   2312c:	2001      	movs	r0, #1
   2312e:	4d0d      	ldr	r5, [pc, #52]	; (23164 <m2m_wifi_connect_sc+0x480>)
   23130:	47a8      	blx	r5
   23132:	0003      	movs	r3, r0
   23134:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
   23136:	2397      	movs	r3, #151	; 0x97
   23138:	18fb      	adds	r3, r7, r3
   2313a:	781b      	ldrb	r3, [r3, #0]
   2313c:	b25b      	sxtb	r3, r3
}
   2313e:	0018      	movs	r0, r3
   23140:	46bd      	mov	sp, r7
   23142:	b026      	add	sp, #152	; 0x98
   23144:	bdb0      	pop	{r4, r5, r7, pc}
   23146:	46c0      	nop			; (mov r8, r8)
   23148:	000218d9 	.word	0x000218d9
   2314c:	00000276 	.word	0x00000276
   23150:	00039844 	.word	0x00039844
   23154:	0003948c 	.word	0x0003948c
   23158:	0001eb7d 	.word	0x0001eb7d
   2315c:	00039764 	.word	0x00039764
   23160:	00039488 	.word	0x00039488
   23164:	00021b75 	.word	0x00021b75

00023168 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
   23168:	b580      	push	{r7, lr}
   2316a:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
   2316c:	2300      	movs	r3, #0
}
   2316e:	0018      	movs	r0, r3
   23170:	46bd      	mov	sp, r7
   23172:	bd80      	pop	{r7, pc}

00023174 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
   23174:	b590      	push	{r4, r7, lr}
   23176:	b087      	sub	sp, #28
   23178:	af00      	add	r7, sp, #0
   2317a:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   2317c:	2317      	movs	r3, #23
   2317e:	18fb      	adds	r3, r7, r3
   23180:	2200      	movs	r2, #0
   23182:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
   23184:	687b      	ldr	r3, [r7, #4]
   23186:	613b      	str	r3, [r7, #16]
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
   23188:	693b      	ldr	r3, [r7, #16]
   2318a:	2280      	movs	r2, #128	; 0x80
   2318c:	0052      	lsls	r2, r2, #1
   2318e:	4313      	orrs	r3, r2
   23190:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
   23192:	693a      	ldr	r2, [r7, #16]
   23194:	23a5      	movs	r3, #165	; 0xa5
   23196:	015b      	lsls	r3, r3, #5
   23198:	0011      	movs	r1, r2
   2319a:	0018      	movs	r0, r3
   2319c:	4b12      	ldr	r3, [pc, #72]	; (231e8 <chip_apply_conf+0x74>)
   2319e:	4798      	blx	r3
		if(val32 != 0) {		
   231a0:	693b      	ldr	r3, [r7, #16]
   231a2:	2b00      	cmp	r3, #0
   231a4:	d018      	beq.n	231d8 <chip_apply_conf+0x64>
			uint32 reg = 0;
   231a6:	2300      	movs	r3, #0
   231a8:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
   231aa:	2317      	movs	r3, #23
   231ac:	18fc      	adds	r4, r7, r3
   231ae:	230c      	movs	r3, #12
   231b0:	18fa      	adds	r2, r7, r3
   231b2:	23a5      	movs	r3, #165	; 0xa5
   231b4:	015b      	lsls	r3, r3, #5
   231b6:	0011      	movs	r1, r2
   231b8:	0018      	movs	r0, r3
   231ba:	4b0c      	ldr	r3, [pc, #48]	; (231ec <chip_apply_conf+0x78>)
   231bc:	4798      	blx	r3
   231be:	0003      	movs	r3, r0
   231c0:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   231c2:	2317      	movs	r3, #23
   231c4:	18fb      	adds	r3, r7, r3
   231c6:	781b      	ldrb	r3, [r3, #0]
   231c8:	b25b      	sxtb	r3, r3
   231ca:	2b00      	cmp	r3, #0
   231cc:	d1e1      	bne.n	23192 <chip_apply_conf+0x1e>
				if(reg == val32)
   231ce:	68fa      	ldr	r2, [r7, #12]
   231d0:	693b      	ldr	r3, [r7, #16]
   231d2:	429a      	cmp	r2, r3
   231d4:	d002      	beq.n	231dc <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
   231d6:	e7dc      	b.n	23192 <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
   231d8:	46c0      	nop			; (mov r8, r8)
   231da:	e000      	b.n	231de <chip_apply_conf+0x6a>
					break;
   231dc:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
   231de:	2300      	movs	r3, #0
}
   231e0:	0018      	movs	r0, r3
   231e2:	46bd      	mov	sp, r7
   231e4:	b007      	add	sp, #28
   231e6:	bd90      	pop	{r4, r7, pc}
   231e8:	000239c9 	.word	0x000239c9
   231ec:	000239a5 	.word	0x000239a5

000231f0 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
   231f0:	b590      	push	{r4, r7, lr}
   231f2:	b083      	sub	sp, #12
   231f4:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   231f6:	2300      	movs	r3, #0
   231f8:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
   231fa:	1dfb      	adds	r3, r7, #7
   231fc:	2200      	movs	r2, #0
   231fe:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
   23200:	1dfc      	adds	r4, r7, #7
   23202:	003b      	movs	r3, r7
   23204:	4a24      	ldr	r2, [pc, #144]	; (23298 <enable_interrupts+0xa8>)
   23206:	0019      	movs	r1, r3
   23208:	0010      	movs	r0, r2
   2320a:	4b24      	ldr	r3, [pc, #144]	; (2329c <enable_interrupts+0xac>)
   2320c:	4798      	blx	r3
   2320e:	0003      	movs	r3, r0
   23210:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   23212:	1dfb      	adds	r3, r7, #7
   23214:	781b      	ldrb	r3, [r3, #0]
   23216:	b25b      	sxtb	r3, r3
   23218:	2b00      	cmp	r3, #0
   2321a:	d131      	bne.n	23280 <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
   2321c:	683b      	ldr	r3, [r7, #0]
   2321e:	2280      	movs	r2, #128	; 0x80
   23220:	0052      	lsls	r2, r2, #1
   23222:	4313      	orrs	r3, r2
   23224:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
   23226:	683b      	ldr	r3, [r7, #0]
   23228:	1dfc      	adds	r4, r7, #7
   2322a:	4a1b      	ldr	r2, [pc, #108]	; (23298 <enable_interrupts+0xa8>)
   2322c:	0019      	movs	r1, r3
   2322e:	0010      	movs	r0, r2
   23230:	4b1b      	ldr	r3, [pc, #108]	; (232a0 <enable_interrupts+0xb0>)
   23232:	4798      	blx	r3
   23234:	0003      	movs	r3, r0
   23236:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   23238:	1dfb      	adds	r3, r7, #7
   2323a:	781b      	ldrb	r3, [r3, #0]
   2323c:	b25b      	sxtb	r3, r3
   2323e:	2b00      	cmp	r3, #0
   23240:	d120      	bne.n	23284 <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
   23242:	1dfc      	adds	r4, r7, #7
   23244:	003a      	movs	r2, r7
   23246:	23d0      	movs	r3, #208	; 0xd0
   23248:	015b      	lsls	r3, r3, #5
   2324a:	0011      	movs	r1, r2
   2324c:	0018      	movs	r0, r3
   2324e:	4b13      	ldr	r3, [pc, #76]	; (2329c <enable_interrupts+0xac>)
   23250:	4798      	blx	r3
   23252:	0003      	movs	r3, r0
   23254:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   23256:	1dfb      	adds	r3, r7, #7
   23258:	781b      	ldrb	r3, [r3, #0]
   2325a:	b25b      	sxtb	r3, r3
   2325c:	2b00      	cmp	r3, #0
   2325e:	d113      	bne.n	23288 <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
   23260:	683b      	ldr	r3, [r7, #0]
   23262:	2280      	movs	r2, #128	; 0x80
   23264:	0252      	lsls	r2, r2, #9
   23266:	4313      	orrs	r3, r2
   23268:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
   2326a:	683a      	ldr	r2, [r7, #0]
   2326c:	1dfc      	adds	r4, r7, #7
   2326e:	23d0      	movs	r3, #208	; 0xd0
   23270:	015b      	lsls	r3, r3, #5
   23272:	0011      	movs	r1, r2
   23274:	0018      	movs	r0, r3
   23276:	4b0a      	ldr	r3, [pc, #40]	; (232a0 <enable_interrupts+0xb0>)
   23278:	4798      	blx	r3
   2327a:	0003      	movs	r3, r0
   2327c:	7023      	strb	r3, [r4, #0]
   2327e:	e004      	b.n	2328a <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   23280:	46c0      	nop			; (mov r8, r8)
   23282:	e002      	b.n	2328a <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   23284:	46c0      	nop			; (mov r8, r8)
   23286:	e000      	b.n	2328a <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   23288:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
   2328a:	1dfb      	adds	r3, r7, #7
   2328c:	781b      	ldrb	r3, [r3, #0]
   2328e:	b25b      	sxtb	r3, r3
}
   23290:	0018      	movs	r0, r3
   23292:	46bd      	mov	sp, r7
   23294:	b003      	add	sp, #12
   23296:	bd90      	pop	{r4, r7, pc}
   23298:	00001408 	.word	0x00001408
   2329c:	000239a5 	.word	0x000239a5
   232a0:	000239c9 	.word	0x000239c9

000232a4 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
   232a4:	b580      	push	{r7, lr}
   232a6:	b082      	sub	sp, #8
   232a8:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
   232aa:	4b32      	ldr	r3, [pc, #200]	; (23374 <nmi_get_chipid+0xd0>)
   232ac:	681b      	ldr	r3, [r3, #0]
   232ae:	2b00      	cmp	r3, #0
   232b0:	d159      	bne.n	23366 <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
   232b2:	4a30      	ldr	r2, [pc, #192]	; (23374 <nmi_get_chipid+0xd0>)
   232b4:	2380      	movs	r3, #128	; 0x80
   232b6:	015b      	lsls	r3, r3, #5
   232b8:	0011      	movs	r1, r2
   232ba:	0018      	movs	r0, r3
   232bc:	4b2e      	ldr	r3, [pc, #184]	; (23378 <nmi_get_chipid+0xd4>)
   232be:	4798      	blx	r3
   232c0:	1e03      	subs	r3, r0, #0
   232c2:	d004      	beq.n	232ce <nmi_get_chipid+0x2a>
			chipid = 0;
   232c4:	4b2b      	ldr	r3, [pc, #172]	; (23374 <nmi_get_chipid+0xd0>)
   232c6:	2200      	movs	r2, #0
   232c8:	601a      	str	r2, [r3, #0]
			return 0;
   232ca:	2300      	movs	r3, #0
   232cc:	e04d      	b.n	2336a <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
   232ce:	1d3b      	adds	r3, r7, #4
   232d0:	4a2a      	ldr	r2, [pc, #168]	; (2337c <nmi_get_chipid+0xd8>)
   232d2:	0019      	movs	r1, r3
   232d4:	0010      	movs	r0, r2
   232d6:	4b28      	ldr	r3, [pc, #160]	; (23378 <nmi_get_chipid+0xd4>)
   232d8:	4798      	blx	r3
   232da:	1e03      	subs	r3, r0, #0
   232dc:	d004      	beq.n	232e8 <nmi_get_chipid+0x44>
			chipid = 0;
   232de:	4b25      	ldr	r3, [pc, #148]	; (23374 <nmi_get_chipid+0xd0>)
   232e0:	2200      	movs	r2, #0
   232e2:	601a      	str	r2, [r3, #0]
			return 0;
   232e4:	2300      	movs	r3, #0
   232e6:	e040      	b.n	2336a <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
   232e8:	4b22      	ldr	r3, [pc, #136]	; (23374 <nmi_get_chipid+0xd0>)
   232ea:	681b      	ldr	r3, [r3, #0]
   232ec:	4a24      	ldr	r2, [pc, #144]	; (23380 <nmi_get_chipid+0xdc>)
   232ee:	4293      	cmp	r3, r2
   232f0:	d106      	bne.n	23300 <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
   232f2:	687b      	ldr	r3, [r7, #4]
   232f4:	2b01      	cmp	r3, #1
   232f6:	d029      	beq.n	2334c <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
   232f8:	4b1e      	ldr	r3, [pc, #120]	; (23374 <nmi_get_chipid+0xd0>)
   232fa:	4a22      	ldr	r2, [pc, #136]	; (23384 <nmi_get_chipid+0xe0>)
   232fc:	601a      	str	r2, [r3, #0]
   232fe:	e025      	b.n	2334c <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
   23300:	4b1c      	ldr	r3, [pc, #112]	; (23374 <nmi_get_chipid+0xd0>)
   23302:	681b      	ldr	r3, [r3, #0]
   23304:	4a20      	ldr	r2, [pc, #128]	; (23388 <nmi_get_chipid+0xe4>)
   23306:	4293      	cmp	r3, r2
   23308:	d10d      	bne.n	23326 <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
   2330a:	687b      	ldr	r3, [r7, #4]
   2330c:	2b03      	cmp	r3, #3
   2330e:	d01d      	beq.n	2334c <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
   23310:	687b      	ldr	r3, [r7, #4]
   23312:	2b04      	cmp	r3, #4
   23314:	d103      	bne.n	2331e <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
   23316:	4b17      	ldr	r3, [pc, #92]	; (23374 <nmi_get_chipid+0xd0>)
   23318:	4a1c      	ldr	r2, [pc, #112]	; (2338c <nmi_get_chipid+0xe8>)
   2331a:	601a      	str	r2, [r3, #0]
   2331c:	e016      	b.n	2334c <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
   2331e:	4b15      	ldr	r3, [pc, #84]	; (23374 <nmi_get_chipid+0xd0>)
   23320:	4a1b      	ldr	r2, [pc, #108]	; (23390 <nmi_get_chipid+0xec>)
   23322:	601a      	str	r2, [r3, #0]
   23324:	e012      	b.n	2334c <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
   23326:	4b13      	ldr	r3, [pc, #76]	; (23374 <nmi_get_chipid+0xd0>)
   23328:	681b      	ldr	r3, [r3, #0]
   2332a:	4a1a      	ldr	r2, [pc, #104]	; (23394 <nmi_get_chipid+0xf0>)
   2332c:	4293      	cmp	r3, r2
   2332e:	d10d      	bne.n	2334c <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
   23330:	4a10      	ldr	r2, [pc, #64]	; (23374 <nmi_get_chipid+0xd0>)
   23332:	23ec      	movs	r3, #236	; 0xec
   23334:	039b      	lsls	r3, r3, #14
   23336:	0011      	movs	r1, r2
   23338:	0018      	movs	r0, r3
   2333a:	4b0f      	ldr	r3, [pc, #60]	; (23378 <nmi_get_chipid+0xd4>)
   2333c:	4798      	blx	r3
   2333e:	1e03      	subs	r3, r0, #0
   23340:	d004      	beq.n	2334c <nmi_get_chipid+0xa8>
			chipid = 0;
   23342:	4b0c      	ldr	r3, [pc, #48]	; (23374 <nmi_get_chipid+0xd0>)
   23344:	2200      	movs	r2, #0
   23346:	601a      	str	r2, [r3, #0]
			return 0;
   23348:	2300      	movs	r3, #0
   2334a:	e00e      	b.n	2336a <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
   2334c:	4b09      	ldr	r3, [pc, #36]	; (23374 <nmi_get_chipid+0xd0>)
   2334e:	681b      	ldr	r3, [r3, #0]
   23350:	4a11      	ldr	r2, [pc, #68]	; (23398 <nmi_get_chipid+0xf4>)
   23352:	401a      	ands	r2, r3
   23354:	4b07      	ldr	r3, [pc, #28]	; (23374 <nmi_get_chipid+0xd0>)
   23356:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
   23358:	4b06      	ldr	r3, [pc, #24]	; (23374 <nmi_get_chipid+0xd0>)
   2335a:	681b      	ldr	r3, [r3, #0]
   2335c:	22a0      	movs	r2, #160	; 0xa0
   2335e:	02d2      	lsls	r2, r2, #11
   23360:	431a      	orrs	r2, r3
   23362:	4b04      	ldr	r3, [pc, #16]	; (23374 <nmi_get_chipid+0xd0>)
   23364:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
   23366:	4b03      	ldr	r3, [pc, #12]	; (23374 <nmi_get_chipid+0xd0>)
   23368:	681b      	ldr	r3, [r3, #0]
}
   2336a:	0018      	movs	r0, r3
   2336c:	46bd      	mov	sp, r7
   2336e:	b002      	add	sp, #8
   23370:	bd80      	pop	{r7, pc}
   23372:	46c0      	nop			; (mov r8, r8)
   23374:	20003ee8 	.word	0x20003ee8
   23378:	000239a5 	.word	0x000239a5
   2337c:	000013f4 	.word	0x000013f4
   23380:	001002a0 	.word	0x001002a0
   23384:	001002a1 	.word	0x001002a1
   23388:	001002b0 	.word	0x001002b0
   2338c:	001002b1 	.word	0x001002b1
   23390:	001002b2 	.word	0x001002b2
   23394:	001000f0 	.word	0x001000f0
   23398:	fff0ffff 	.word	0xfff0ffff

0002339c <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
   2339c:	b590      	push	{r4, r7, lr}
   2339e:	b083      	sub	sp, #12
   233a0:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   233a2:	1dfb      	adds	r3, r7, #7
   233a4:	2200      	movs	r2, #0
   233a6:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   233a8:	1dfc      	adds	r4, r7, #7
   233aa:	003b      	movs	r3, r7
   233ac:	0019      	movs	r1, r3
   233ae:	2010      	movs	r0, #16
   233b0:	4b2e      	ldr	r3, [pc, #184]	; (2346c <chip_sleep+0xd0>)
   233b2:	4798      	blx	r3
   233b4:	0003      	movs	r3, r0
   233b6:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
   233b8:	1dfb      	adds	r3, r7, #7
   233ba:	781b      	ldrb	r3, [r3, #0]
   233bc:	b25b      	sxtb	r3, r3
   233be:	2b00      	cmp	r3, #0
   233c0:	d145      	bne.n	2344e <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
   233c2:	683b      	ldr	r3, [r7, #0]
   233c4:	2201      	movs	r2, #1
   233c6:	4013      	ands	r3, r2
   233c8:	d000      	beq.n	233cc <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   233ca:	e7ed      	b.n	233a8 <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
   233cc:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   233ce:	1dfc      	adds	r4, r7, #7
   233d0:	003b      	movs	r3, r7
   233d2:	0019      	movs	r1, r3
   233d4:	2001      	movs	r0, #1
   233d6:	4b25      	ldr	r3, [pc, #148]	; (2346c <chip_sleep+0xd0>)
   233d8:	4798      	blx	r3
   233da:	0003      	movs	r3, r0
   233dc:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   233de:	1dfb      	adds	r3, r7, #7
   233e0:	781b      	ldrb	r3, [r3, #0]
   233e2:	b25b      	sxtb	r3, r3
   233e4:	2b00      	cmp	r3, #0
   233e6:	d134      	bne.n	23452 <chip_sleep+0xb6>
	if(reg & NBIT1)
   233e8:	683b      	ldr	r3, [r7, #0]
   233ea:	2202      	movs	r2, #2
   233ec:	4013      	ands	r3, r2
   233ee:	d010      	beq.n	23412 <chip_sleep+0x76>
	{
		reg &=~NBIT1;
   233f0:	683b      	ldr	r3, [r7, #0]
   233f2:	2202      	movs	r2, #2
   233f4:	4393      	bics	r3, r2
   233f6:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
   233f8:	683b      	ldr	r3, [r7, #0]
   233fa:	1dfc      	adds	r4, r7, #7
   233fc:	0019      	movs	r1, r3
   233fe:	2001      	movs	r0, #1
   23400:	4b1b      	ldr	r3, [pc, #108]	; (23470 <chip_sleep+0xd4>)
   23402:	4798      	blx	r3
   23404:	0003      	movs	r3, r0
   23406:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
   23408:	1dfb      	adds	r3, r7, #7
   2340a:	781b      	ldrb	r3, [r3, #0]
   2340c:	b25b      	sxtb	r3, r3
   2340e:	2b00      	cmp	r3, #0
   23410:	d121      	bne.n	23456 <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   23412:	1dfc      	adds	r4, r7, #7
   23414:	003b      	movs	r3, r7
   23416:	0019      	movs	r1, r3
   23418:	200b      	movs	r0, #11
   2341a:	4b14      	ldr	r3, [pc, #80]	; (2346c <chip_sleep+0xd0>)
   2341c:	4798      	blx	r3
   2341e:	0003      	movs	r3, r0
   23420:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   23422:	1dfb      	adds	r3, r7, #7
   23424:	781b      	ldrb	r3, [r3, #0]
   23426:	b25b      	sxtb	r3, r3
   23428:	2b00      	cmp	r3, #0
   2342a:	d116      	bne.n	2345a <chip_sleep+0xbe>
	if(reg & NBIT0)
   2342c:	683b      	ldr	r3, [r7, #0]
   2342e:	2201      	movs	r2, #1
   23430:	4013      	ands	r3, r2
   23432:	d013      	beq.n	2345c <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
   23434:	683b      	ldr	r3, [r7, #0]
   23436:	2201      	movs	r2, #1
   23438:	4393      	bics	r3, r2
   2343a:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
   2343c:	683b      	ldr	r3, [r7, #0]
   2343e:	1dfc      	adds	r4, r7, #7
   23440:	0019      	movs	r1, r3
   23442:	200b      	movs	r0, #11
   23444:	4b0a      	ldr	r3, [pc, #40]	; (23470 <chip_sleep+0xd4>)
   23446:	4798      	blx	r3
   23448:	0003      	movs	r3, r0
   2344a:	7023      	strb	r3, [r4, #0]
   2344c:	e006      	b.n	2345c <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
   2344e:	46c0      	nop			; (mov r8, r8)
   23450:	e004      	b.n	2345c <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   23452:	46c0      	nop			; (mov r8, r8)
   23454:	e002      	b.n	2345c <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
   23456:	46c0      	nop			; (mov r8, r8)
   23458:	e000      	b.n	2345c <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   2345a:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
   2345c:	1dfb      	adds	r3, r7, #7
   2345e:	781b      	ldrb	r3, [r3, #0]
   23460:	b25b      	sxtb	r3, r3
}
   23462:	0018      	movs	r0, r3
   23464:	46bd      	mov	sp, r7
   23466:	b003      	add	sp, #12
   23468:	bd90      	pop	{r4, r7, pc}
   2346a:	46c0      	nop			; (mov r8, r8)
   2346c:	000239a5 	.word	0x000239a5
   23470:	000239c9 	.word	0x000239c9

00023474 <chip_wake>:
sint8 chip_wake(void)
{
   23474:	b590      	push	{r4, r7, lr}
   23476:	b085      	sub	sp, #20
   23478:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   2347a:	230f      	movs	r3, #15
   2347c:	18fb      	adds	r3, r7, r3
   2347e:	2200      	movs	r2, #0
   23480:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
   23482:	2300      	movs	r3, #0
   23484:	607b      	str	r3, [r7, #4]
   23486:	2300      	movs	r3, #0
   23488:	603b      	str	r3, [r7, #0]
   2348a:	2300      	movs	r3, #0
   2348c:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   2348e:	230f      	movs	r3, #15
   23490:	18fc      	adds	r4, r7, r3
   23492:	1d3b      	adds	r3, r7, #4
   23494:	0019      	movs	r1, r3
   23496:	200b      	movs	r0, #11
   23498:	4b4e      	ldr	r3, [pc, #312]	; (235d4 <chip_wake+0x160>)
   2349a:	4798      	blx	r3
   2349c:	0003      	movs	r3, r0
   2349e:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   234a0:	230f      	movs	r3, #15
   234a2:	18fb      	adds	r3, r7, r3
   234a4:	781b      	ldrb	r3, [r3, #0]
   234a6:	b25b      	sxtb	r3, r3
   234a8:	2b00      	cmp	r3, #0
   234aa:	d000      	beq.n	234ae <chip_wake+0x3a>
   234ac:	e082      	b.n	235b4 <chip_wake+0x140>
	
	if(!(reg & NBIT0))
   234ae:	687b      	ldr	r3, [r7, #4]
   234b0:	2201      	movs	r2, #1
   234b2:	4013      	ands	r3, r2
   234b4:	d111      	bne.n	234da <chip_wake+0x66>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
   234b6:	687b      	ldr	r3, [r7, #4]
   234b8:	2201      	movs	r2, #1
   234ba:	4313      	orrs	r3, r2
   234bc:	220f      	movs	r2, #15
   234be:	18bc      	adds	r4, r7, r2
   234c0:	0019      	movs	r1, r3
   234c2:	200b      	movs	r0, #11
   234c4:	4b44      	ldr	r3, [pc, #272]	; (235d8 <chip_wake+0x164>)
   234c6:	4798      	blx	r3
   234c8:	0003      	movs	r3, r0
   234ca:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   234cc:	230f      	movs	r3, #15
   234ce:	18fb      	adds	r3, r7, r3
   234d0:	781b      	ldrb	r3, [r3, #0]
   234d2:	b25b      	sxtb	r3, r3
   234d4:	2b00      	cmp	r3, #0
   234d6:	d000      	beq.n	234da <chip_wake+0x66>
   234d8:	e06e      	b.n	235b8 <chip_wake+0x144>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   234da:	230f      	movs	r3, #15
   234dc:	18fc      	adds	r4, r7, r3
   234de:	1d3b      	adds	r3, r7, #4
   234e0:	0019      	movs	r1, r3
   234e2:	2001      	movs	r0, #1
   234e4:	4b3b      	ldr	r3, [pc, #236]	; (235d4 <chip_wake+0x160>)
   234e6:	4798      	blx	r3
   234e8:	0003      	movs	r3, r0
   234ea:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   234ec:	230f      	movs	r3, #15
   234ee:	18fb      	adds	r3, r7, r3
   234f0:	781b      	ldrb	r3, [r3, #0]
   234f2:	b25b      	sxtb	r3, r3
   234f4:	2b00      	cmp	r3, #0
   234f6:	d161      	bne.n	235bc <chip_wake+0x148>
	/* Set bit 1 */
	if(!(reg & NBIT1))
   234f8:	687b      	ldr	r3, [r7, #4]
   234fa:	2202      	movs	r2, #2
   234fc:	4013      	ands	r3, r2
   234fe:	d110      	bne.n	23522 <chip_wake+0xae>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
   23500:	687b      	ldr	r3, [r7, #4]
   23502:	2202      	movs	r2, #2
   23504:	4313      	orrs	r3, r2
   23506:	220f      	movs	r2, #15
   23508:	18bc      	adds	r4, r7, r2
   2350a:	0019      	movs	r1, r3
   2350c:	2001      	movs	r0, #1
   2350e:	4b32      	ldr	r3, [pc, #200]	; (235d8 <chip_wake+0x164>)
   23510:	4798      	blx	r3
   23512:	0003      	movs	r3, r0
   23514:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   23516:	230f      	movs	r3, #15
   23518:	18fb      	adds	r3, r7, r3
   2351a:	781b      	ldrb	r3, [r3, #0]
   2351c:	b25b      	sxtb	r3, r3
   2351e:	2b00      	cmp	r3, #0
   23520:	d14e      	bne.n	235c0 <chip_wake+0x14c>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
   23522:	230f      	movs	r3, #15
   23524:	18fc      	adds	r4, r7, r3
   23526:	003b      	movs	r3, r7
   23528:	0019      	movs	r1, r3
   2352a:	200f      	movs	r0, #15
   2352c:	4b29      	ldr	r3, [pc, #164]	; (235d4 <chip_wake+0x160>)
   2352e:	4798      	blx	r3
   23530:	0003      	movs	r3, r0
   23532:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
   23534:	230f      	movs	r3, #15
   23536:	18fb      	adds	r3, r7, r3
   23538:	781b      	ldrb	r3, [r3, #0]
   2353a:	b25b      	sxtb	r3, r3
   2353c:	2b00      	cmp	r3, #0
   2353e:	d014      	beq.n	2356a <chip_wake+0xf6>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
   23540:	23a8      	movs	r3, #168	; 0xa8
   23542:	005a      	lsls	r2, r3, #1
   23544:	4925      	ldr	r1, [pc, #148]	; (235dc <chip_wake+0x168>)
   23546:	4b26      	ldr	r3, [pc, #152]	; (235e0 <chip_wake+0x16c>)
   23548:	0018      	movs	r0, r3
   2354a:	4b26      	ldr	r3, [pc, #152]	; (235e4 <chip_wake+0x170>)
   2354c:	4798      	blx	r3
   2354e:	230f      	movs	r3, #15
   23550:	18fb      	adds	r3, r7, r3
   23552:	2100      	movs	r1, #0
   23554:	5659      	ldrsb	r1, [r3, r1]
   23556:	683a      	ldr	r2, [r7, #0]
   23558:	4b23      	ldr	r3, [pc, #140]	; (235e8 <chip_wake+0x174>)
   2355a:	0018      	movs	r0, r3
   2355c:	4b21      	ldr	r3, [pc, #132]	; (235e4 <chip_wake+0x170>)
   2355e:	4798      	blx	r3
   23560:	4b22      	ldr	r3, [pc, #136]	; (235ec <chip_wake+0x178>)
   23562:	0018      	movs	r0, r3
   23564:	4b1f      	ldr	r3, [pc, #124]	; (235e4 <chip_wake+0x170>)
   23566:	4798      	blx	r3
			goto _WAKE_EXIT;
   23568:	e02b      	b.n	235c2 <chip_wake+0x14e>
		}
		if(clk_status_reg & NBIT2) {
   2356a:	683b      	ldr	r3, [r7, #0]
   2356c:	2204      	movs	r2, #4
   2356e:	4013      	ands	r3, r2
   23570:	d11c      	bne.n	235ac <chip_wake+0x138>
			break;
		}
		nm_bsp_sleep(2);
   23572:	2002      	movs	r0, #2
   23574:	4b1e      	ldr	r3, [pc, #120]	; (235f0 <chip_wake+0x17c>)
   23576:	4798      	blx	r3
		trials++;
   23578:	68bb      	ldr	r3, [r7, #8]
   2357a:	3301      	adds	r3, #1
   2357c:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
   2357e:	68bb      	ldr	r3, [r7, #8]
   23580:	2b04      	cmp	r3, #4
   23582:	d9ce      	bls.n	23522 <chip_wake+0xae>
		{
			M2M_ERR("Failed to wakup the chip\n");
   23584:	23ad      	movs	r3, #173	; 0xad
   23586:	005a      	lsls	r2, r3, #1
   23588:	4914      	ldr	r1, [pc, #80]	; (235dc <chip_wake+0x168>)
   2358a:	4b15      	ldr	r3, [pc, #84]	; (235e0 <chip_wake+0x16c>)
   2358c:	0018      	movs	r0, r3
   2358e:	4b15      	ldr	r3, [pc, #84]	; (235e4 <chip_wake+0x170>)
   23590:	4798      	blx	r3
   23592:	4b18      	ldr	r3, [pc, #96]	; (235f4 <chip_wake+0x180>)
   23594:	0018      	movs	r0, r3
   23596:	4b13      	ldr	r3, [pc, #76]	; (235e4 <chip_wake+0x170>)
   23598:	4798      	blx	r3
   2359a:	4b14      	ldr	r3, [pc, #80]	; (235ec <chip_wake+0x178>)
   2359c:	0018      	movs	r0, r3
   2359e:	4b11      	ldr	r3, [pc, #68]	; (235e4 <chip_wake+0x170>)
   235a0:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
   235a2:	230f      	movs	r3, #15
   235a4:	18fb      	adds	r3, r7, r3
   235a6:	22fc      	movs	r2, #252	; 0xfc
   235a8:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
   235aa:	e00a      	b.n	235c2 <chip_wake+0x14e>
			break;
   235ac:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
   235ae:	4b12      	ldr	r3, [pc, #72]	; (235f8 <chip_wake+0x184>)
   235b0:	4798      	blx	r3
   235b2:	e006      	b.n	235c2 <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   235b4:	46c0      	nop			; (mov r8, r8)
   235b6:	e004      	b.n	235c2 <chip_wake+0x14e>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   235b8:	46c0      	nop			; (mov r8, r8)
   235ba:	e002      	b.n	235c2 <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   235bc:	46c0      	nop			; (mov r8, r8)
   235be:	e000      	b.n	235c2 <chip_wake+0x14e>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   235c0:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
   235c2:	230f      	movs	r3, #15
   235c4:	18fb      	adds	r3, r7, r3
   235c6:	781b      	ldrb	r3, [r3, #0]
   235c8:	b25b      	sxtb	r3, r3
}
   235ca:	0018      	movs	r0, r3
   235cc:	46bd      	mov	sp, r7
   235ce:	b005      	add	sp, #20
   235d0:	bd90      	pop	{r4, r7, pc}
   235d2:	46c0      	nop			; (mov r8, r8)
   235d4:	000239a5 	.word	0x000239a5
   235d8:	000239c9 	.word	0x000239c9
   235dc:	000398e4 	.word	0x000398e4
   235e0:	00039858 	.word	0x00039858
   235e4:	0001eb7d 	.word	0x0001eb7d
   235e8:	0003986c 	.word	0x0003986c
   235ec:	00039884 	.word	0x00039884
   235f0:	00021035 	.word	0x00021035
   235f4:	00039888 	.word	0x00039888
   235f8:	00023965 	.word	0x00023965

000235fc <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
   235fc:	b580      	push	{r7, lr}
   235fe:	b088      	sub	sp, #32
   23600:	af00      	add	r7, sp, #0
   23602:	0002      	movs	r2, r0
   23604:	1dfb      	adds	r3, r7, #7
   23606:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   23608:	2313      	movs	r3, #19
   2360a:	18fb      	adds	r3, r7, r3
   2360c:	2200      	movs	r2, #0
   2360e:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   23610:	2300      	movs	r3, #0
   23612:	61fb      	str	r3, [r7, #28]
   23614:	2300      	movs	r3, #0
   23616:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
   23618:	2300      	movs	r3, #0
   2361a:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
   2361c:	4b4a      	ldr	r3, [pc, #296]	; (23748 <wait_for_bootrom+0x14c>)
   2361e:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_MIN_REQ_DRV_VERSION_MAJOR_NO, M2M_MIN_REQ_DRV_VERSION_MINOR_NO,\
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
   23620:	2300      	movs	r3, #0
   23622:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   23624:	4b49      	ldr	r3, [pc, #292]	; (2374c <wait_for_bootrom+0x150>)
   23626:	0018      	movs	r0, r3
   23628:	4b49      	ldr	r3, [pc, #292]	; (23750 <wait_for_bootrom+0x154>)
   2362a:	4798      	blx	r3
   2362c:	0003      	movs	r3, r0
   2362e:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
   23630:	69fb      	ldr	r3, [r7, #28]
   23632:	2b00      	cmp	r3, #0
   23634:	db03      	blt.n	2363e <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
   23636:	2001      	movs	r0, #1
   23638:	4b46      	ldr	r3, [pc, #280]	; (23754 <wait_for_bootrom+0x158>)
   2363a:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   2363c:	e7f2      	b.n	23624 <wait_for_bootrom+0x28>
			break;
   2363e:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
   23640:	4b45      	ldr	r3, [pc, #276]	; (23758 <wait_for_bootrom+0x15c>)
   23642:	0018      	movs	r0, r3
   23644:	4b42      	ldr	r3, [pc, #264]	; (23750 <wait_for_bootrom+0x154>)
   23646:	4798      	blx	r3
   23648:	0003      	movs	r3, r0
   2364a:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
   2364c:	69fb      	ldr	r3, [r7, #28]
   2364e:	2201      	movs	r2, #1
   23650:	4013      	ands	r3, r2
   23652:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
   23654:	69fb      	ldr	r3, [r7, #28]
   23656:	2b00      	cmp	r3, #0
   23658:	d112      	bne.n	23680 <wait_for_bootrom+0x84>
	{
		reg = 0;
   2365a:	2300      	movs	r3, #0
   2365c:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
   2365e:	e00b      	b.n	23678 <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
   23660:	2001      	movs	r0, #1
   23662:	4b3c      	ldr	r3, [pc, #240]	; (23754 <wait_for_bootrom+0x158>)
   23664:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
   23666:	4b3d      	ldr	r3, [pc, #244]	; (2375c <wait_for_bootrom+0x160>)
   23668:	0018      	movs	r0, r3
   2366a:	4b39      	ldr	r3, [pc, #228]	; (23750 <wait_for_bootrom+0x154>)
   2366c:	4798      	blx	r3
   2366e:	0003      	movs	r3, r0
   23670:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
   23672:	69bb      	ldr	r3, [r7, #24]
   23674:	3301      	adds	r3, #1
   23676:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
   23678:	69fb      	ldr	r3, [r7, #28]
   2367a:	4a39      	ldr	r2, [pc, #228]	; (23760 <wait_for_bootrom+0x164>)
   2367c:	4293      	cmp	r3, r2
   2367e:	d1ef      	bne.n	23660 <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
   23680:	1dfb      	adds	r3, r7, #7
   23682:	781b      	ldrb	r3, [r3, #0]
   23684:	2b02      	cmp	r3, #2
   23686:	d10d      	bne.n	236a4 <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   23688:	4a36      	ldr	r2, [pc, #216]	; (23764 <wait_for_bootrom+0x168>)
   2368a:	4b37      	ldr	r3, [pc, #220]	; (23768 <wait_for_bootrom+0x16c>)
   2368c:	0011      	movs	r1, r2
   2368e:	0018      	movs	r0, r3
   23690:	4b36      	ldr	r3, [pc, #216]	; (2376c <wait_for_bootrom+0x170>)
   23692:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
   23694:	2380      	movs	r3, #128	; 0x80
   23696:	035b      	lsls	r3, r3, #13
   23698:	4a35      	ldr	r2, [pc, #212]	; (23770 <wait_for_bootrom+0x174>)
   2369a:	0019      	movs	r1, r3
   2369c:	0010      	movs	r0, r2
   2369e:	4b33      	ldr	r3, [pc, #204]	; (2376c <wait_for_bootrom+0x170>)
   236a0:	4798      	blx	r3
   236a2:	e022      	b.n	236ea <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
   236a4:	1dfb      	adds	r3, r7, #7
   236a6:	781b      	ldrb	r3, [r3, #0]
   236a8:	2b03      	cmp	r3, #3
   236aa:	d10b      	bne.n	236c4 <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   236ac:	4a2d      	ldr	r2, [pc, #180]	; (23764 <wait_for_bootrom+0x168>)
   236ae:	4b2e      	ldr	r3, [pc, #184]	; (23768 <wait_for_bootrom+0x16c>)
   236b0:	0011      	movs	r1, r2
   236b2:	0018      	movs	r0, r3
   236b4:	4b2d      	ldr	r3, [pc, #180]	; (2376c <wait_for_bootrom+0x170>)
   236b6:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
   236b8:	4b2d      	ldr	r3, [pc, #180]	; (23770 <wait_for_bootrom+0x174>)
   236ba:	2100      	movs	r1, #0
   236bc:	0018      	movs	r0, r3
   236be:	4b2b      	ldr	r3, [pc, #172]	; (2376c <wait_for_bootrom+0x170>)
   236c0:	4798      	blx	r3
   236c2:	e012      	b.n	236ea <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
   236c4:	1dfb      	adds	r3, r7, #7
   236c6:	781b      	ldrb	r3, [r3, #0]
   236c8:	2b04      	cmp	r3, #4
   236ca:	d108      	bne.n	236de <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
   236cc:	2380      	movs	r3, #128	; 0x80
   236ce:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   236d0:	68fb      	ldr	r3, [r7, #12]
   236d2:	4a27      	ldr	r2, [pc, #156]	; (23770 <wait_for_bootrom+0x174>)
   236d4:	0019      	movs	r1, r3
   236d6:	0010      	movs	r0, r2
   236d8:	4b24      	ldr	r3, [pc, #144]	; (2376c <wait_for_bootrom+0x170>)
   236da:	4798      	blx	r3
   236dc:	e005      	b.n	236ea <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   236de:	68fb      	ldr	r3, [r7, #12]
   236e0:	4a23      	ldr	r2, [pc, #140]	; (23770 <wait_for_bootrom+0x174>)
   236e2:	0019      	movs	r1, r3
   236e4:	0010      	movs	r0, r2
   236e6:	4b21      	ldr	r3, [pc, #132]	; (2376c <wait_for_bootrom+0x170>)
   236e8:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
   236ea:	4b22      	ldr	r3, [pc, #136]	; (23774 <wait_for_bootrom+0x178>)
   236ec:	4798      	blx	r3
   236ee:	0003      	movs	r3, r0
   236f0:	051b      	lsls	r3, r3, #20
   236f2:	0d1b      	lsrs	r3, r3, #20
   236f4:	4a20      	ldr	r2, [pc, #128]	; (23778 <wait_for_bootrom+0x17c>)
   236f6:	4293      	cmp	r3, r2
   236f8:	d906      	bls.n	23708 <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
   236fa:	697b      	ldr	r3, [r7, #20]
   236fc:	2202      	movs	r2, #2
   236fe:	4313      	orrs	r3, r2
   23700:	0018      	movs	r0, r3
   23702:	4b1e      	ldr	r3, [pc, #120]	; (2377c <wait_for_bootrom+0x180>)
   23704:	4798      	blx	r3
   23706:	e003      	b.n	23710 <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
   23708:	697b      	ldr	r3, [r7, #20]
   2370a:	0018      	movs	r0, r3
   2370c:	4b1b      	ldr	r3, [pc, #108]	; (2377c <wait_for_bootrom+0x180>)
   2370e:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
   23710:	4b1b      	ldr	r3, [pc, #108]	; (23780 <wait_for_bootrom+0x184>)
   23712:	0018      	movs	r0, r3
   23714:	4b1b      	ldr	r3, [pc, #108]	; (23784 <wait_for_bootrom+0x188>)
   23716:	4798      	blx	r3
   23718:	68fa      	ldr	r2, [r7, #12]
   2371a:	4b1b      	ldr	r3, [pc, #108]	; (23788 <wait_for_bootrom+0x18c>)
   2371c:	0011      	movs	r1, r2
   2371e:	0018      	movs	r0, r3
   23720:	4b18      	ldr	r3, [pc, #96]	; (23784 <wait_for_bootrom+0x188>)
   23722:	4798      	blx	r3
   23724:	4b19      	ldr	r3, [pc, #100]	; (2378c <wait_for_bootrom+0x190>)
   23726:	0018      	movs	r0, r3
   23728:	4b16      	ldr	r3, [pc, #88]	; (23784 <wait_for_bootrom+0x188>)
   2372a:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
   2372c:	4a18      	ldr	r2, [pc, #96]	; (23790 <wait_for_bootrom+0x194>)
   2372e:	4b0b      	ldr	r3, [pc, #44]	; (2375c <wait_for_bootrom+0x160>)
   23730:	0011      	movs	r1, r2
   23732:	0018      	movs	r0, r3
   23734:	4b0d      	ldr	r3, [pc, #52]	; (2376c <wait_for_bootrom+0x170>)
   23736:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
   23738:	2313      	movs	r3, #19
   2373a:	18fb      	adds	r3, r7, r3
   2373c:	781b      	ldrb	r3, [r3, #0]
   2373e:	b25b      	sxtb	r3, r3
}
   23740:	0018      	movs	r0, r3
   23742:	46bd      	mov	sp, r7
   23744:	b008      	add	sp, #32
   23746:	bd80      	pop	{r7, pc}
   23748:	13301354 	.word	0x13301354
   2374c:	00001014 	.word	0x00001014
   23750:	00023985 	.word	0x00023985
   23754:	00021035 	.word	0x00021035
   23758:	000207bc 	.word	0x000207bc
   2375c:	000c000c 	.word	0x000c000c
   23760:	10add09e 	.word	0x10add09e
   23764:	3c1cd57d 	.word	0x3c1cd57d
   23768:	000207ac 	.word	0x000207ac
   2376c:	000239c9 	.word	0x000239c9
   23770:	0000108c 	.word	0x0000108c
   23774:	000232a5 	.word	0x000232a5
   23778:	0000039f 	.word	0x0000039f
   2377c:	00023175 	.word	0x00023175
   23780:	000398a4 	.word	0x000398a4
   23784:	0001eb7d 	.word	0x0001eb7d
   23788:	000398b0 	.word	0x000398b0
   2378c:	00039884 	.word	0x00039884
   23790:	ef522f61 	.word	0xef522f61

00023794 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
   23794:	b580      	push	{r7, lr}
   23796:	b088      	sub	sp, #32
   23798:	af00      	add	r7, sp, #0
   2379a:	0002      	movs	r2, r0
   2379c:	1dfb      	adds	r3, r7, #7
   2379e:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   237a0:	231f      	movs	r3, #31
   237a2:	18fb      	adds	r3, r7, r3
   237a4:	2200      	movs	r2, #0
   237a6:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   237a8:	2300      	movs	r3, #0
   237aa:	61bb      	str	r3, [r7, #24]
   237ac:	2300      	movs	r3, #0
   237ae:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
   237b0:	2301      	movs	r3, #1
   237b2:	425b      	negs	r3, r3
   237b4:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
   237b6:	4b1d      	ldr	r3, [pc, #116]	; (2382c <wait_for_firmware_start+0x98>)
   237b8:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
   237ba:	4b1d      	ldr	r3, [pc, #116]	; (23830 <wait_for_firmware_start+0x9c>)
   237bc:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
   237be:	1dfb      	adds	r3, r7, #7
   237c0:	781b      	ldrb	r3, [r3, #0]
   237c2:	2b02      	cmp	r3, #2
   237c4:	d003      	beq.n	237ce <wait_for_firmware_start+0x3a>
   237c6:	1dfb      	adds	r3, r7, #7
   237c8:	781b      	ldrb	r3, [r3, #0]
   237ca:	2b03      	cmp	r3, #3
   237cc:	d119      	bne.n	23802 <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
   237ce:	4b19      	ldr	r3, [pc, #100]	; (23834 <wait_for_firmware_start+0xa0>)
   237d0:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
   237d2:	4b19      	ldr	r3, [pc, #100]	; (23838 <wait_for_firmware_start+0xa4>)
   237d4:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
   237d6:	e014      	b.n	23802 <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
   237d8:	2002      	movs	r0, #2
   237da:	4b18      	ldr	r3, [pc, #96]	; (2383c <wait_for_firmware_start+0xa8>)
   237dc:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
   237de:	68fb      	ldr	r3, [r7, #12]
   237e0:	0018      	movs	r0, r3
   237e2:	4b17      	ldr	r3, [pc, #92]	; (23840 <wait_for_firmware_start+0xac>)
   237e4:	4798      	blx	r3
   237e6:	0003      	movs	r3, r0
   237e8:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
   237ea:	697b      	ldr	r3, [r7, #20]
   237ec:	3301      	adds	r3, #1
   237ee:	617b      	str	r3, [r7, #20]
   237f0:	697a      	ldr	r2, [r7, #20]
   237f2:	693b      	ldr	r3, [r7, #16]
   237f4:	429a      	cmp	r2, r3
   237f6:	d304      	bcc.n	23802 <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
   237f8:	231f      	movs	r3, #31
   237fa:	18fb      	adds	r3, r7, r3
   237fc:	22fb      	movs	r2, #251	; 0xfb
   237fe:	701a      	strb	r2, [r3, #0]
			goto ERR;
   23800:	e00c      	b.n	2381c <wait_for_firmware_start+0x88>
	while (checkValue != reg)
   23802:	68ba      	ldr	r2, [r7, #8]
   23804:	69bb      	ldr	r3, [r7, #24]
   23806:	429a      	cmp	r2, r3
   23808:	d1e6      	bne.n	237d8 <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
   2380a:	68bb      	ldr	r3, [r7, #8]
   2380c:	4a08      	ldr	r2, [pc, #32]	; (23830 <wait_for_firmware_start+0x9c>)
   2380e:	4293      	cmp	r3, r2
   23810:	d104      	bne.n	2381c <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
   23812:	4b06      	ldr	r3, [pc, #24]	; (2382c <wait_for_firmware_start+0x98>)
   23814:	2100      	movs	r1, #0
   23816:	0018      	movs	r0, r3
   23818:	4b0a      	ldr	r3, [pc, #40]	; (23844 <wait_for_firmware_start+0xb0>)
   2381a:	4798      	blx	r3
	}
ERR:
	return ret;
   2381c:	231f      	movs	r3, #31
   2381e:	18fb      	adds	r3, r7, r3
   23820:	781b      	ldrb	r3, [r3, #0]
   23822:	b25b      	sxtb	r3, r3
}
   23824:	0018      	movs	r0, r3
   23826:	46bd      	mov	sp, r7
   23828:	b008      	add	sp, #32
   2382a:	bd80      	pop	{r7, pc}
   2382c:	0000108c 	.word	0x0000108c
   23830:	02532636 	.word	0x02532636
   23834:	000207ac 	.word	0x000207ac
   23838:	d75dc1c3 	.word	0xd75dc1c3
   2383c:	00021035 	.word	0x00021035
   23840:	00023985 	.word	0x00023985
   23844:	000239c9 	.word	0x000239c9

00023848 <chip_deinit>:

sint8 chip_deinit(void)
{
   23848:	b590      	push	{r4, r7, lr}
   2384a:	b083      	sub	sp, #12
   2384c:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   2384e:	2300      	movs	r3, #0
   23850:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
   23852:	1dfc      	adds	r4, r7, #7
   23854:	003a      	movs	r2, r7
   23856:	23a0      	movs	r3, #160	; 0xa0
   23858:	015b      	lsls	r3, r3, #5
   2385a:	0011      	movs	r1, r2
   2385c:	0018      	movs	r0, r3
   2385e:	4b20      	ldr	r3, [pc, #128]	; (238e0 <chip_deinit+0x98>)
   23860:	4798      	blx	r3
   23862:	0003      	movs	r3, r0
   23864:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   23866:	1dfb      	adds	r3, r7, #7
   23868:	781b      	ldrb	r3, [r3, #0]
   2386a:	b25b      	sxtb	r3, r3
   2386c:	2b00      	cmp	r3, #0
   2386e:	d00e      	beq.n	2388e <chip_deinit+0x46>
		M2M_ERR("failed to de-initialize\n");
   23870:	4a1c      	ldr	r2, [pc, #112]	; (238e4 <chip_deinit+0x9c>)
   23872:	491d      	ldr	r1, [pc, #116]	; (238e8 <chip_deinit+0xa0>)
   23874:	4b1d      	ldr	r3, [pc, #116]	; (238ec <chip_deinit+0xa4>)
   23876:	0018      	movs	r0, r3
   23878:	4b1d      	ldr	r3, [pc, #116]	; (238f0 <chip_deinit+0xa8>)
   2387a:	4798      	blx	r3
   2387c:	4b1d      	ldr	r3, [pc, #116]	; (238f4 <chip_deinit+0xac>)
   2387e:	0018      	movs	r0, r3
   23880:	4b1b      	ldr	r3, [pc, #108]	; (238f0 <chip_deinit+0xa8>)
   23882:	4798      	blx	r3
   23884:	4b1c      	ldr	r3, [pc, #112]	; (238f8 <chip_deinit+0xb0>)
   23886:	0018      	movs	r0, r3
   23888:	4b19      	ldr	r3, [pc, #100]	; (238f0 <chip_deinit+0xa8>)
   2388a:	4798      	blx	r3
		goto ERR1;
   2388c:	e021      	b.n	238d2 <chip_deinit+0x8a>
	}
	reg &= ~(1 << 10);
   2388e:	683b      	ldr	r3, [r7, #0]
   23890:	4a1a      	ldr	r2, [pc, #104]	; (238fc <chip_deinit+0xb4>)
   23892:	4013      	ands	r3, r2
   23894:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
   23896:	683a      	ldr	r2, [r7, #0]
   23898:	1dfc      	adds	r4, r7, #7
   2389a:	23a0      	movs	r3, #160	; 0xa0
   2389c:	015b      	lsls	r3, r3, #5
   2389e:	0011      	movs	r1, r2
   238a0:	0018      	movs	r0, r3
   238a2:	4b17      	ldr	r3, [pc, #92]	; (23900 <chip_deinit+0xb8>)
   238a4:	4798      	blx	r3
   238a6:	0003      	movs	r3, r0
   238a8:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   238aa:	1dfb      	adds	r3, r7, #7
   238ac:	781b      	ldrb	r3, [r3, #0]
   238ae:	b25b      	sxtb	r3, r3
   238b0:	2b00      	cmp	r3, #0
   238b2:	d00e      	beq.n	238d2 <chip_deinit+0x8a>
		M2M_ERR("failed to de-initialize\n");
   238b4:	4a13      	ldr	r2, [pc, #76]	; (23904 <chip_deinit+0xbc>)
   238b6:	490c      	ldr	r1, [pc, #48]	; (238e8 <chip_deinit+0xa0>)
   238b8:	4b0c      	ldr	r3, [pc, #48]	; (238ec <chip_deinit+0xa4>)
   238ba:	0018      	movs	r0, r3
   238bc:	4b0c      	ldr	r3, [pc, #48]	; (238f0 <chip_deinit+0xa8>)
   238be:	4798      	blx	r3
   238c0:	4b0c      	ldr	r3, [pc, #48]	; (238f4 <chip_deinit+0xac>)
   238c2:	0018      	movs	r0, r3
   238c4:	4b0a      	ldr	r3, [pc, #40]	; (238f0 <chip_deinit+0xa8>)
   238c6:	4798      	blx	r3
   238c8:	4b0b      	ldr	r3, [pc, #44]	; (238f8 <chip_deinit+0xb0>)
   238ca:	0018      	movs	r0, r3
   238cc:	4b08      	ldr	r3, [pc, #32]	; (238f0 <chip_deinit+0xa8>)
   238ce:	4798      	blx	r3
		goto ERR1;
   238d0:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   238d2:	1dfb      	adds	r3, r7, #7
   238d4:	781b      	ldrb	r3, [r3, #0]
   238d6:	b25b      	sxtb	r3, r3
}
   238d8:	0018      	movs	r0, r3
   238da:	46bd      	mov	sp, r7
   238dc:	b003      	add	sp, #12
   238de:	bd90      	pop	{r4, r7, pc}
   238e0:	000239a5 	.word	0x000239a5
   238e4:	00000201 	.word	0x00000201
   238e8:	000398f0 	.word	0x000398f0
   238ec:	00039858 	.word	0x00039858
   238f0:	0001eb7d 	.word	0x0001eb7d
   238f4:	000398c8 	.word	0x000398c8
   238f8:	00039884 	.word	0x00039884
   238fc:	fffffbff 	.word	0xfffffbff
   23900:	000239c9 	.word	0x000239c9
   23904:	00000207 	.word	0x00000207

00023908 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
   23908:	b590      	push	{r4, r7, lr}
   2390a:	b085      	sub	sp, #20
   2390c:	af00      	add	r7, sp, #0
   2390e:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   23910:	230f      	movs	r3, #15
   23912:	18fb      	adds	r3, r7, r3
   23914:	2200      	movs	r2, #0
   23916:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
   23918:	230f      	movs	r3, #15
   2391a:	18fc      	adds	r4, r7, r3
   2391c:	687b      	ldr	r3, [r7, #4]
   2391e:	0018      	movs	r0, r3
   23920:	4b05      	ldr	r3, [pc, #20]	; (23938 <nm_bus_iface_init+0x30>)
   23922:	4798      	blx	r3
   23924:	0003      	movs	r3, r0
   23926:	7023      	strb	r3, [r4, #0]
	return ret;
   23928:	230f      	movs	r3, #15
   2392a:	18fb      	adds	r3, r7, r3
   2392c:	781b      	ldrb	r3, [r3, #0]
   2392e:	b25b      	sxtb	r3, r3
}
   23930:	0018      	movs	r0, r3
   23932:	46bd      	mov	sp, r7
   23934:	b005      	add	sp, #20
   23936:	bd90      	pop	{r4, r7, pc}
   23938:	000216f1 	.word	0x000216f1

0002393c <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
   2393c:	b590      	push	{r4, r7, lr}
   2393e:	b083      	sub	sp, #12
   23940:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   23942:	1dfb      	adds	r3, r7, #7
   23944:	2200      	movs	r2, #0
   23946:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
   23948:	1dfc      	adds	r4, r7, #7
   2394a:	4b05      	ldr	r3, [pc, #20]	; (23960 <nm_bus_iface_deinit+0x24>)
   2394c:	4798      	blx	r3
   2394e:	0003      	movs	r3, r0
   23950:	7023      	strb	r3, [r4, #0]

	return ret;
   23952:	1dfb      	adds	r3, r7, #7
   23954:	781b      	ldrb	r3, [r3, #0]
   23956:	b25b      	sxtb	r3, r3
}
   23958:	0018      	movs	r0, r3
   2395a:	46bd      	mov	sp, r7
   2395c:	b003      	add	sp, #12
   2395e:	bd90      	pop	{r4, r7, pc}
   23960:	00021869 	.word	0x00021869

00023964 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
   23964:	b580      	push	{r7, lr}
   23966:	b082      	sub	sp, #8
   23968:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   2396a:	1dfb      	adds	r3, r7, #7
   2396c:	2200      	movs	r2, #0
   2396e:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
   23970:	4b03      	ldr	r3, [pc, #12]	; (23980 <nm_bus_reset+0x1c>)
   23972:	4798      	blx	r3
   23974:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
   23976:	0018      	movs	r0, r3
   23978:	46bd      	mov	sp, r7
   2397a:	b002      	add	sp, #8
   2397c:	bd80      	pop	{r7, pc}
   2397e:	46c0      	nop			; (mov r8, r8)
   23980:	00025791 	.word	0x00025791

00023984 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
   23984:	b580      	push	{r7, lr}
   23986:	b082      	sub	sp, #8
   23988:	af00      	add	r7, sp, #0
   2398a:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
   2398c:	687b      	ldr	r3, [r7, #4]
   2398e:	0018      	movs	r0, r3
   23990:	4b03      	ldr	r3, [pc, #12]	; (239a0 <nm_read_reg+0x1c>)
   23992:	4798      	blx	r3
   23994:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
   23996:	0018      	movs	r0, r3
   23998:	46bd      	mov	sp, r7
   2399a:	b002      	add	sp, #8
   2399c:	bd80      	pop	{r7, pc}
   2399e:	46c0      	nop			; (mov r8, r8)
   239a0:	00025925 	.word	0x00025925

000239a4 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   239a4:	b580      	push	{r7, lr}
   239a6:	b082      	sub	sp, #8
   239a8:	af00      	add	r7, sp, #0
   239aa:	6078      	str	r0, [r7, #4]
   239ac:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
   239ae:	683a      	ldr	r2, [r7, #0]
   239b0:	687b      	ldr	r3, [r7, #4]
   239b2:	0011      	movs	r1, r2
   239b4:	0018      	movs	r0, r3
   239b6:	4b03      	ldr	r3, [pc, #12]	; (239c4 <nm_read_reg_with_ret+0x20>)
   239b8:	4798      	blx	r3
   239ba:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
   239bc:	0018      	movs	r0, r3
   239be:	46bd      	mov	sp, r7
   239c0:	b002      	add	sp, #8
   239c2:	bd80      	pop	{r7, pc}
   239c4:	00025949 	.word	0x00025949

000239c8 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
   239c8:	b580      	push	{r7, lr}
   239ca:	b082      	sub	sp, #8
   239cc:	af00      	add	r7, sp, #0
   239ce:	6078      	str	r0, [r7, #4]
   239d0:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
   239d2:	683a      	ldr	r2, [r7, #0]
   239d4:	687b      	ldr	r3, [r7, #4]
   239d6:	0011      	movs	r1, r2
   239d8:	0018      	movs	r0, r3
   239da:	4b03      	ldr	r3, [pc, #12]	; (239e8 <nm_write_reg+0x20>)
   239dc:	4798      	blx	r3
   239de:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
   239e0:	0018      	movs	r0, r3
   239e2:	46bd      	mov	sp, r7
   239e4:	b002      	add	sp, #8
   239e6:	bd80      	pop	{r7, pc}
   239e8:	00025999 	.word	0x00025999

000239ec <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   239ec:	b580      	push	{r7, lr}
   239ee:	b084      	sub	sp, #16
   239f0:	af00      	add	r7, sp, #0
   239f2:	60f8      	str	r0, [r7, #12]
   239f4:	60b9      	str	r1, [r7, #8]
   239f6:	1dbb      	adds	r3, r7, #6
   239f8:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   239fa:	1dbb      	adds	r3, r7, #6
   239fc:	881a      	ldrh	r2, [r3, #0]
   239fe:	68b9      	ldr	r1, [r7, #8]
   23a00:	68fb      	ldr	r3, [r7, #12]
   23a02:	0018      	movs	r0, r3
   23a04:	4b03      	ldr	r3, [pc, #12]	; (23a14 <p_nm_read_block+0x28>)
   23a06:	4798      	blx	r3
   23a08:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   23a0a:	0018      	movs	r0, r3
   23a0c:	46bd      	mov	sp, r7
   23a0e:	b004      	add	sp, #16
   23a10:	bd80      	pop	{r7, pc}
   23a12:	46c0      	nop			; (mov r8, r8)
   23a14:	000259e9 	.word	0x000259e9

00023a18 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   23a18:	b580      	push	{r7, lr}
   23a1a:	b086      	sub	sp, #24
   23a1c:	af00      	add	r7, sp, #0
   23a1e:	60f8      	str	r0, [r7, #12]
   23a20:	60b9      	str	r1, [r7, #8]
   23a22:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   23a24:	4b2d      	ldr	r3, [pc, #180]	; (23adc <nm_read_block+0xc4>)
   23a26:	881a      	ldrh	r2, [r3, #0]
   23a28:	2310      	movs	r3, #16
   23a2a:	18fb      	adds	r3, r7, r3
   23a2c:	3a08      	subs	r2, #8
   23a2e:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   23a30:	2300      	movs	r3, #0
   23a32:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   23a34:	2313      	movs	r3, #19
   23a36:	18fb      	adds	r3, r7, r3
   23a38:	2200      	movs	r2, #0
   23a3a:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   23a3c:	2310      	movs	r3, #16
   23a3e:	18fb      	adds	r3, r7, r3
   23a40:	881a      	ldrh	r2, [r3, #0]
   23a42:	687b      	ldr	r3, [r7, #4]
   23a44:	429a      	cmp	r2, r3
   23a46:	d313      	bcc.n	23a70 <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   23a48:	68ba      	ldr	r2, [r7, #8]
   23a4a:	697b      	ldr	r3, [r7, #20]
   23a4c:	18d1      	adds	r1, r2, r3
   23a4e:	687b      	ldr	r3, [r7, #4]
   23a50:	b29a      	uxth	r2, r3
   23a52:	68fb      	ldr	r3, [r7, #12]
   23a54:	0018      	movs	r0, r3
   23a56:	4b22      	ldr	r3, [pc, #136]	; (23ae0 <nm_read_block+0xc8>)
   23a58:	4798      	blx	r3
   23a5a:	0003      	movs	r3, r0
   23a5c:	b2da      	uxtb	r2, r3
   23a5e:	2313      	movs	r3, #19
   23a60:	18fb      	adds	r3, r7, r3
   23a62:	781b      	ldrb	r3, [r3, #0]
   23a64:	18d3      	adds	r3, r2, r3
   23a66:	b2da      	uxtb	r2, r3
   23a68:	2313      	movs	r3, #19
   23a6a:	18fb      	adds	r3, r7, r3
   23a6c:	701a      	strb	r2, [r3, #0]
			break;
   23a6e:	e02d      	b.n	23acc <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   23a70:	68ba      	ldr	r2, [r7, #8]
   23a72:	697b      	ldr	r3, [r7, #20]
   23a74:	18d1      	adds	r1, r2, r3
   23a76:	2310      	movs	r3, #16
   23a78:	18fb      	adds	r3, r7, r3
   23a7a:	881a      	ldrh	r2, [r3, #0]
   23a7c:	68fb      	ldr	r3, [r7, #12]
   23a7e:	0018      	movs	r0, r3
   23a80:	4b17      	ldr	r3, [pc, #92]	; (23ae0 <nm_read_block+0xc8>)
   23a82:	4798      	blx	r3
   23a84:	0003      	movs	r3, r0
   23a86:	b2da      	uxtb	r2, r3
   23a88:	2313      	movs	r3, #19
   23a8a:	18fb      	adds	r3, r7, r3
   23a8c:	781b      	ldrb	r3, [r3, #0]
   23a8e:	18d3      	adds	r3, r2, r3
   23a90:	b2da      	uxtb	r2, r3
   23a92:	2313      	movs	r3, #19
   23a94:	18fb      	adds	r3, r7, r3
   23a96:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   23a98:	2313      	movs	r3, #19
   23a9a:	18fb      	adds	r3, r7, r3
   23a9c:	781b      	ldrb	r3, [r3, #0]
   23a9e:	b25b      	sxtb	r3, r3
   23aa0:	2b00      	cmp	r3, #0
   23aa2:	d112      	bne.n	23aca <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   23aa4:	2310      	movs	r3, #16
   23aa6:	18fb      	adds	r3, r7, r3
   23aa8:	881b      	ldrh	r3, [r3, #0]
   23aaa:	687a      	ldr	r2, [r7, #4]
   23aac:	1ad3      	subs	r3, r2, r3
   23aae:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   23ab0:	2310      	movs	r3, #16
   23ab2:	18fb      	adds	r3, r7, r3
   23ab4:	881b      	ldrh	r3, [r3, #0]
   23ab6:	697a      	ldr	r2, [r7, #20]
   23ab8:	18d3      	adds	r3, r2, r3
   23aba:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   23abc:	2310      	movs	r3, #16
   23abe:	18fb      	adds	r3, r7, r3
   23ac0:	881b      	ldrh	r3, [r3, #0]
   23ac2:	68fa      	ldr	r2, [r7, #12]
   23ac4:	18d3      	adds	r3, r2, r3
   23ac6:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   23ac8:	e7b8      	b.n	23a3c <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   23aca:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   23acc:	2313      	movs	r3, #19
   23ace:	18fb      	adds	r3, r7, r3
   23ad0:	781b      	ldrb	r3, [r3, #0]
   23ad2:	b25b      	sxtb	r3, r3
}
   23ad4:	0018      	movs	r0, r3
   23ad6:	46bd      	mov	sp, r7
   23ad8:	b006      	add	sp, #24
   23ada:	bd80      	pop	{r7, pc}
   23adc:	20000118 	.word	0x20000118
   23ae0:	000239ed 	.word	0x000239ed

00023ae4 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   23ae4:	b580      	push	{r7, lr}
   23ae6:	b084      	sub	sp, #16
   23ae8:	af00      	add	r7, sp, #0
   23aea:	60f8      	str	r0, [r7, #12]
   23aec:	60b9      	str	r1, [r7, #8]
   23aee:	1dbb      	adds	r3, r7, #6
   23af0:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   23af2:	1dbb      	adds	r3, r7, #6
   23af4:	881a      	ldrh	r2, [r3, #0]
   23af6:	68b9      	ldr	r1, [r7, #8]
   23af8:	68fb      	ldr	r3, [r7, #12]
   23afa:	0018      	movs	r0, r3
   23afc:	4b03      	ldr	r3, [pc, #12]	; (23b0c <p_nm_write_block+0x28>)
   23afe:	4798      	blx	r3
   23b00:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   23b02:	0018      	movs	r0, r3
   23b04:	46bd      	mov	sp, r7
   23b06:	b004      	add	sp, #16
   23b08:	bd80      	pop	{r7, pc}
   23b0a:	46c0      	nop			; (mov r8, r8)
   23b0c:	00025a41 	.word	0x00025a41

00023b10 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   23b10:	b580      	push	{r7, lr}
   23b12:	b086      	sub	sp, #24
   23b14:	af00      	add	r7, sp, #0
   23b16:	60f8      	str	r0, [r7, #12]
   23b18:	60b9      	str	r1, [r7, #8]
   23b1a:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   23b1c:	4b2d      	ldr	r3, [pc, #180]	; (23bd4 <nm_write_block+0xc4>)
   23b1e:	881a      	ldrh	r2, [r3, #0]
   23b20:	2310      	movs	r3, #16
   23b22:	18fb      	adds	r3, r7, r3
   23b24:	3a08      	subs	r2, #8
   23b26:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   23b28:	2300      	movs	r3, #0
   23b2a:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   23b2c:	2313      	movs	r3, #19
   23b2e:	18fb      	adds	r3, r7, r3
   23b30:	2200      	movs	r2, #0
   23b32:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   23b34:	2310      	movs	r3, #16
   23b36:	18fb      	adds	r3, r7, r3
   23b38:	881a      	ldrh	r2, [r3, #0]
   23b3a:	687b      	ldr	r3, [r7, #4]
   23b3c:	429a      	cmp	r2, r3
   23b3e:	d313      	bcc.n	23b68 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   23b40:	68ba      	ldr	r2, [r7, #8]
   23b42:	697b      	ldr	r3, [r7, #20]
   23b44:	18d1      	adds	r1, r2, r3
   23b46:	687b      	ldr	r3, [r7, #4]
   23b48:	b29a      	uxth	r2, r3
   23b4a:	68fb      	ldr	r3, [r7, #12]
   23b4c:	0018      	movs	r0, r3
   23b4e:	4b22      	ldr	r3, [pc, #136]	; (23bd8 <nm_write_block+0xc8>)
   23b50:	4798      	blx	r3
   23b52:	0003      	movs	r3, r0
   23b54:	b2da      	uxtb	r2, r3
   23b56:	2313      	movs	r3, #19
   23b58:	18fb      	adds	r3, r7, r3
   23b5a:	781b      	ldrb	r3, [r3, #0]
   23b5c:	18d3      	adds	r3, r2, r3
   23b5e:	b2da      	uxtb	r2, r3
   23b60:	2313      	movs	r3, #19
   23b62:	18fb      	adds	r3, r7, r3
   23b64:	701a      	strb	r2, [r3, #0]
			break;
   23b66:	e02d      	b.n	23bc4 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   23b68:	68ba      	ldr	r2, [r7, #8]
   23b6a:	697b      	ldr	r3, [r7, #20]
   23b6c:	18d1      	adds	r1, r2, r3
   23b6e:	2310      	movs	r3, #16
   23b70:	18fb      	adds	r3, r7, r3
   23b72:	881a      	ldrh	r2, [r3, #0]
   23b74:	68fb      	ldr	r3, [r7, #12]
   23b76:	0018      	movs	r0, r3
   23b78:	4b17      	ldr	r3, [pc, #92]	; (23bd8 <nm_write_block+0xc8>)
   23b7a:	4798      	blx	r3
   23b7c:	0003      	movs	r3, r0
   23b7e:	b2da      	uxtb	r2, r3
   23b80:	2313      	movs	r3, #19
   23b82:	18fb      	adds	r3, r7, r3
   23b84:	781b      	ldrb	r3, [r3, #0]
   23b86:	18d3      	adds	r3, r2, r3
   23b88:	b2da      	uxtb	r2, r3
   23b8a:	2313      	movs	r3, #19
   23b8c:	18fb      	adds	r3, r7, r3
   23b8e:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   23b90:	2313      	movs	r3, #19
   23b92:	18fb      	adds	r3, r7, r3
   23b94:	781b      	ldrb	r3, [r3, #0]
   23b96:	b25b      	sxtb	r3, r3
   23b98:	2b00      	cmp	r3, #0
   23b9a:	d112      	bne.n	23bc2 <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   23b9c:	2310      	movs	r3, #16
   23b9e:	18fb      	adds	r3, r7, r3
   23ba0:	881b      	ldrh	r3, [r3, #0]
   23ba2:	687a      	ldr	r2, [r7, #4]
   23ba4:	1ad3      	subs	r3, r2, r3
   23ba6:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   23ba8:	2310      	movs	r3, #16
   23baa:	18fb      	adds	r3, r7, r3
   23bac:	881b      	ldrh	r3, [r3, #0]
   23bae:	697a      	ldr	r2, [r7, #20]
   23bb0:	18d3      	adds	r3, r2, r3
   23bb2:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   23bb4:	2310      	movs	r3, #16
   23bb6:	18fb      	adds	r3, r7, r3
   23bb8:	881b      	ldrh	r3, [r3, #0]
   23bba:	68fa      	ldr	r2, [r7, #12]
   23bbc:	18d3      	adds	r3, r2, r3
   23bbe:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   23bc0:	e7b8      	b.n	23b34 <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   23bc2:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   23bc4:	2313      	movs	r3, #19
   23bc6:	18fb      	adds	r3, r7, r3
   23bc8:	781b      	ldrb	r3, [r3, #0]
   23bca:	b25b      	sxtb	r3, r3
}
   23bcc:	0018      	movs	r0, r3
   23bce:	46bd      	mov	sp, r7
   23bd0:	b006      	add	sp, #24
   23bd2:	bd80      	pop	{r7, pc}
   23bd4:	20000118 	.word	0x20000118
   23bd8:	00023ae5 	.word	0x00023ae5

00023bdc <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
   23bdc:	b590      	push	{r4, r7, lr}
   23bde:	b089      	sub	sp, #36	; 0x24
   23be0:	af00      	add	r7, sp, #0
   23be2:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
   23be4:	2300      	movs	r3, #0
   23be6:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
   23be8:	231f      	movs	r3, #31
   23bea:	18fb      	adds	r3, r7, r3
   23bec:	2200      	movs	r2, #0
   23bee:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
   23bf0:	230c      	movs	r3, #12
   23bf2:	18fb      	adds	r3, r7, r3
   23bf4:	0018      	movs	r0, r3
   23bf6:	2308      	movs	r3, #8
   23bf8:	001a      	movs	r2, r3
   23bfa:	2100      	movs	r1, #0
   23bfc:	4b64      	ldr	r3, [pc, #400]	; (23d90 <nm_get_firmware_full_info+0x1b4>)
   23bfe:	4798      	blx	r3
	if (pstrRev != NULL)
   23c00:	687b      	ldr	r3, [r7, #4]
   23c02:	2b00      	cmp	r3, #0
   23c04:	d100      	bne.n	23c08 <nm_get_firmware_full_info+0x2c>
   23c06:	e0ba      	b.n	23d7e <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
   23c08:	687b      	ldr	r3, [r7, #4]
   23c0a:	2228      	movs	r2, #40	; 0x28
   23c0c:	2100      	movs	r1, #0
   23c0e:	0018      	movs	r0, r3
   23c10:	4b60      	ldr	r3, [pc, #384]	; (23d94 <nm_get_firmware_full_info+0x1b8>)
   23c12:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
   23c14:	231f      	movs	r3, #31
   23c16:	18fc      	adds	r4, r7, r3
   23c18:	2314      	movs	r3, #20
   23c1a:	18fb      	adds	r3, r7, r3
   23c1c:	4a5e      	ldr	r2, [pc, #376]	; (23d98 <nm_get_firmware_full_info+0x1bc>)
   23c1e:	0019      	movs	r1, r3
   23c20:	0010      	movs	r0, r2
   23c22:	4b5e      	ldr	r3, [pc, #376]	; (23d9c <nm_get_firmware_full_info+0x1c0>)
   23c24:	4798      	blx	r3
   23c26:	0003      	movs	r3, r0
   23c28:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
   23c2a:	231f      	movs	r3, #31
   23c2c:	18fb      	adds	r3, r7, r3
   23c2e:	781b      	ldrb	r3, [r3, #0]
   23c30:	b25b      	sxtb	r3, r3
   23c32:	2b00      	cmp	r3, #0
   23c34:	d000      	beq.n	23c38 <nm_get_firmware_full_info+0x5c>
   23c36:	e0a2      	b.n	23d7e <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
   23c38:	697b      	ldr	r3, [r7, #20]
   23c3a:	2b00      	cmp	r3, #0
   23c3c:	d100      	bne.n	23c40 <nm_get_firmware_full_info+0x64>
   23c3e:	e09a      	b.n	23d76 <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
   23c40:	697b      	ldr	r3, [r7, #20]
   23c42:	22c0      	movs	r2, #192	; 0xc0
   23c44:	0292      	lsls	r2, r2, #10
   23c46:	4313      	orrs	r3, r2
   23c48:	221f      	movs	r2, #31
   23c4a:	18bc      	adds	r4, r7, r2
   23c4c:	220c      	movs	r2, #12
   23c4e:	18b9      	adds	r1, r7, r2
   23c50:	2208      	movs	r2, #8
   23c52:	0018      	movs	r0, r3
   23c54:	4b52      	ldr	r3, [pc, #328]	; (23da0 <nm_get_firmware_full_info+0x1c4>)
   23c56:	4798      	blx	r3
   23c58:	0003      	movs	r3, r0
   23c5a:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
   23c5c:	231f      	movs	r3, #31
   23c5e:	18fb      	adds	r3, r7, r3
   23c60:	781b      	ldrb	r3, [r3, #0]
   23c62:	b25b      	sxtb	r3, r3
   23c64:	2b00      	cmp	r3, #0
   23c66:	d000      	beq.n	23c6a <nm_get_firmware_full_info+0x8e>
   23c68:	e089      	b.n	23d7e <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
   23c6a:	230c      	movs	r3, #12
   23c6c:	18fb      	adds	r3, r7, r3
   23c6e:	685b      	ldr	r3, [r3, #4]
   23c70:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
   23c72:	697b      	ldr	r3, [r7, #20]
   23c74:	041b      	lsls	r3, r3, #16
   23c76:	0c1b      	lsrs	r3, r3, #16
   23c78:	617b      	str	r3, [r7, #20]
					if(reg != 0)
   23c7a:	697b      	ldr	r3, [r7, #20]
   23c7c:	2b00      	cmp	r3, #0
   23c7e:	d100      	bne.n	23c82 <nm_get_firmware_full_info+0xa6>
   23c80:	e074      	b.n	23d6c <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
   23c82:	697b      	ldr	r3, [r7, #20]
   23c84:	22c0      	movs	r2, #192	; 0xc0
   23c86:	0292      	lsls	r2, r2, #10
   23c88:	4313      	orrs	r3, r2
   23c8a:	221f      	movs	r2, #31
   23c8c:	18bc      	adds	r4, r7, r2
   23c8e:	6879      	ldr	r1, [r7, #4]
   23c90:	2228      	movs	r2, #40	; 0x28
   23c92:	0018      	movs	r0, r3
   23c94:	4b42      	ldr	r3, [pc, #264]	; (23da0 <nm_get_firmware_full_info+0x1c4>)
   23c96:	4798      	blx	r3
   23c98:	0003      	movs	r3, r0
   23c9a:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
   23c9c:	231f      	movs	r3, #31
   23c9e:	18fb      	adds	r3, r7, r3
   23ca0:	781b      	ldrb	r3, [r3, #0]
   23ca2:	b25b      	sxtb	r3, r3
   23ca4:	2b00      	cmp	r3, #0
   23ca6:	d16a      	bne.n	23d7e <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
   23ca8:	687b      	ldr	r3, [r7, #4]
   23caa:	791b      	ldrb	r3, [r3, #4]
   23cac:	021b      	lsls	r3, r3, #8
   23cae:	b21a      	sxth	r2, r3
   23cb0:	687b      	ldr	r3, [r7, #4]
   23cb2:	795b      	ldrb	r3, [r3, #5]
   23cb4:	011b      	lsls	r3, r3, #4
   23cb6:	b21b      	sxth	r3, r3
   23cb8:	21ff      	movs	r1, #255	; 0xff
   23cba:	400b      	ands	r3, r1
   23cbc:	b21b      	sxth	r3, r3
   23cbe:	4313      	orrs	r3, r2
   23cc0:	b21a      	sxth	r2, r3
   23cc2:	687b      	ldr	r3, [r7, #4]
   23cc4:	799b      	ldrb	r3, [r3, #6]
   23cc6:	b21b      	sxth	r3, r3
   23cc8:	210f      	movs	r1, #15
   23cca:	400b      	ands	r3, r1
   23ccc:	b21b      	sxth	r3, r3
   23cce:	4313      	orrs	r3, r2
   23cd0:	b21a      	sxth	r2, r3
   23cd2:	231c      	movs	r3, #28
   23cd4:	18fb      	adds	r3, r7, r3
   23cd6:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   23cd8:	231a      	movs	r3, #26
   23cda:	18fb      	adds	r3, r7, r3
   23cdc:	4a31      	ldr	r2, [pc, #196]	; (23da4 <nm_get_firmware_full_info+0x1c8>)
   23cde:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
   23ce0:	687b      	ldr	r3, [r7, #4]
   23ce2:	79db      	ldrb	r3, [r3, #7]
   23ce4:	021b      	lsls	r3, r3, #8
   23ce6:	b21a      	sxth	r2, r3
   23ce8:	687b      	ldr	r3, [r7, #4]
   23cea:	7a1b      	ldrb	r3, [r3, #8]
   23cec:	011b      	lsls	r3, r3, #4
   23cee:	b21b      	sxth	r3, r3
   23cf0:	21ff      	movs	r1, #255	; 0xff
   23cf2:	400b      	ands	r3, r1
   23cf4:	b21b      	sxth	r3, r3
   23cf6:	4313      	orrs	r3, r2
   23cf8:	b21a      	sxth	r2, r3
   23cfa:	687b      	ldr	r3, [r7, #4]
   23cfc:	7a5b      	ldrb	r3, [r3, #9]
   23cfe:	b21b      	sxth	r3, r3
   23d00:	210f      	movs	r1, #15
   23d02:	400b      	ands	r3, r1
   23d04:	b21b      	sxth	r3, r3
   23d06:	4313      	orrs	r3, r2
   23d08:	b21a      	sxth	r2, r3
   23d0a:	2318      	movs	r3, #24
   23d0c:	18fb      	adds	r3, r7, r3
   23d0e:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
   23d10:	231c      	movs	r3, #28
   23d12:	18fb      	adds	r3, r7, r3
   23d14:	881b      	ldrh	r3, [r3, #0]
   23d16:	2b00      	cmp	r3, #0
   23d18:	d009      	beq.n	23d2e <nm_get_firmware_full_info+0x152>
   23d1a:	2318      	movs	r3, #24
   23d1c:	18fb      	adds	r3, r7, r3
   23d1e:	881b      	ldrh	r3, [r3, #0]
   23d20:	2b00      	cmp	r3, #0
   23d22:	d004      	beq.n	23d2e <nm_get_firmware_full_info+0x152>
   23d24:	2318      	movs	r3, #24
   23d26:	18fb      	adds	r3, r7, r3
   23d28:	881b      	ldrh	r3, [r3, #0]
   23d2a:	2b00      	cmp	r3, #0
   23d2c:	d104      	bne.n	23d38 <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
   23d2e:	231f      	movs	r3, #31
   23d30:	18fb      	adds	r3, r7, r3
   23d32:	22f4      	movs	r2, #244	; 0xf4
   23d34:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   23d36:	e022      	b.n	23d7e <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
   23d38:	231a      	movs	r3, #26
   23d3a:	18fa      	adds	r2, r7, r3
   23d3c:	2318      	movs	r3, #24
   23d3e:	18fb      	adds	r3, r7, r3
   23d40:	8812      	ldrh	r2, [r2, #0]
   23d42:	881b      	ldrh	r3, [r3, #0]
   23d44:	429a      	cmp	r2, r3
   23d46:	d204      	bcs.n	23d52 <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
   23d48:	231f      	movs	r3, #31
   23d4a:	18fb      	adds	r3, r7, r3
   23d4c:	22f3      	movs	r2, #243	; 0xf3
   23d4e:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   23d50:	e015      	b.n	23d7e <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
   23d52:	231a      	movs	r3, #26
   23d54:	18fa      	adds	r2, r7, r3
   23d56:	231c      	movs	r3, #28
   23d58:	18fb      	adds	r3, r7, r3
   23d5a:	8812      	ldrh	r2, [r2, #0]
   23d5c:	881b      	ldrh	r3, [r3, #0]
   23d5e:	429a      	cmp	r2, r3
   23d60:	d90d      	bls.n	23d7e <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
   23d62:	231f      	movs	r3, #31
   23d64:	18fb      	adds	r3, r7, r3
   23d66:	22f3      	movs	r2, #243	; 0xf3
   23d68:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   23d6a:	e008      	b.n	23d7e <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
   23d6c:	231f      	movs	r3, #31
   23d6e:	18fb      	adds	r3, r7, r3
   23d70:	22f4      	movs	r2, #244	; 0xf4
   23d72:	701a      	strb	r2, [r3, #0]
   23d74:	e003      	b.n	23d7e <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
   23d76:	231f      	movs	r3, #31
   23d78:	18fb      	adds	r3, r7, r3
   23d7a:	22f4      	movs	r2, #244	; 0xf4
   23d7c:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
   23d7e:	231f      	movs	r3, #31
   23d80:	18fb      	adds	r3, r7, r3
   23d82:	781b      	ldrb	r3, [r3, #0]
   23d84:	b25b      	sxtb	r3, r3
}
   23d86:	0018      	movs	r0, r3
   23d88:	46bd      	mov	sp, r7
   23d8a:	b009      	add	sp, #36	; 0x24
   23d8c:	bd90      	pop	{r4, r7, pc}
   23d8e:	46c0      	nop			; (mov r8, r8)
   23d90:	00035707 	.word	0x00035707
   23d94:	00021915 	.word	0x00021915
   23d98:	000c0008 	.word	0x000c0008
   23d9c:	000239a5 	.word	0x000239a5
   23da0:	00023a19 	.word	0x00023a19
   23da4:	00001354 	.word	0x00001354

00023da8 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
   23da8:	b590      	push	{r4, r7, lr}
   23daa:	b085      	sub	sp, #20
   23dac:	af00      	add	r7, sp, #0
   23dae:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   23db0:	230f      	movs	r3, #15
   23db2:	18fb      	adds	r3, r7, r3
   23db4:	2200      	movs	r2, #0
   23db6:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
   23db8:	687b      	ldr	r3, [r7, #4]
   23dba:	2b00      	cmp	r3, #0
   23dbc:	d013      	beq.n	23de6 <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
   23dbe:	230e      	movs	r3, #14
   23dc0:	18fb      	adds	r3, r7, r3
   23dc2:	687a      	ldr	r2, [r7, #4]
   23dc4:	7812      	ldrb	r2, [r2, #0]
   23dc6:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
   23dc8:	230e      	movs	r3, #14
   23dca:	18fb      	adds	r3, r7, r3
   23dcc:	781b      	ldrb	r3, [r3, #0]
   23dce:	2b00      	cmp	r3, #0
   23dd0:	d004      	beq.n	23ddc <nm_drv_init+0x34>
   23dd2:	230e      	movs	r3, #14
   23dd4:	18fb      	adds	r3, r7, r3
   23dd6:	781b      	ldrb	r3, [r3, #0]
   23dd8:	2b04      	cmp	r3, #4
   23dda:	d908      	bls.n	23dee <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
   23ddc:	230e      	movs	r3, #14
   23dde:	18fb      	adds	r3, r7, r3
   23de0:	2201      	movs	r2, #1
   23de2:	701a      	strb	r2, [r3, #0]
   23de4:	e003      	b.n	23dee <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
   23de6:	230e      	movs	r3, #14
   23de8:	18fb      	adds	r3, r7, r3
   23dea:	2201      	movs	r2, #1
   23dec:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
   23dee:	230f      	movs	r3, #15
   23df0:	18fc      	adds	r4, r7, r3
   23df2:	2000      	movs	r0, #0
   23df4:	4b41      	ldr	r3, [pc, #260]	; (23efc <nm_drv_init+0x154>)
   23df6:	4798      	blx	r3
   23df8:	0003      	movs	r3, r0
   23dfa:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23dfc:	230f      	movs	r3, #15
   23dfe:	18fb      	adds	r3, r7, r3
   23e00:	781b      	ldrb	r3, [r3, #0]
   23e02:	b25b      	sxtb	r3, r3
   23e04:	2b00      	cmp	r3, #0
   23e06:	d00f      	beq.n	23e28 <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
   23e08:	2390      	movs	r3, #144	; 0x90
   23e0a:	005a      	lsls	r2, r3, #1
   23e0c:	493c      	ldr	r1, [pc, #240]	; (23f00 <nm_drv_init+0x158>)
   23e0e:	4b3d      	ldr	r3, [pc, #244]	; (23f04 <nm_drv_init+0x15c>)
   23e10:	0018      	movs	r0, r3
   23e12:	4b3d      	ldr	r3, [pc, #244]	; (23f08 <nm_drv_init+0x160>)
   23e14:	4798      	blx	r3
   23e16:	4b3d      	ldr	r3, [pc, #244]	; (23f0c <nm_drv_init+0x164>)
   23e18:	0018      	movs	r0, r3
   23e1a:	4b3b      	ldr	r3, [pc, #236]	; (23f08 <nm_drv_init+0x160>)
   23e1c:	4798      	blx	r3
   23e1e:	4b3c      	ldr	r3, [pc, #240]	; (23f10 <nm_drv_init+0x168>)
   23e20:	0018      	movs	r0, r3
   23e22:	4b39      	ldr	r3, [pc, #228]	; (23f08 <nm_drv_init+0x160>)
   23e24:	4798      	blx	r3
		goto ERR1;
   23e26:	e061      	b.n	23eec <nm_drv_init+0x144>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
   23e28:	4b3a      	ldr	r3, [pc, #232]	; (23f14 <nm_drv_init+0x16c>)
   23e2a:	0018      	movs	r0, r3
   23e2c:	4b36      	ldr	r3, [pc, #216]	; (23f08 <nm_drv_init+0x160>)
   23e2e:	4798      	blx	r3
   23e30:	4b39      	ldr	r3, [pc, #228]	; (23f18 <nm_drv_init+0x170>)
   23e32:	4798      	blx	r3
   23e34:	0002      	movs	r2, r0
   23e36:	4b39      	ldr	r3, [pc, #228]	; (23f1c <nm_drv_init+0x174>)
   23e38:	0011      	movs	r1, r2
   23e3a:	0018      	movs	r0, r3
   23e3c:	4b32      	ldr	r3, [pc, #200]	; (23f08 <nm_drv_init+0x160>)
   23e3e:	4798      	blx	r3
   23e40:	4b33      	ldr	r3, [pc, #204]	; (23f10 <nm_drv_init+0x168>)
   23e42:	0018      	movs	r0, r3
   23e44:	4b30      	ldr	r3, [pc, #192]	; (23f08 <nm_drv_init+0x160>)
   23e46:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
   23e48:	4b35      	ldr	r3, [pc, #212]	; (23f20 <nm_drv_init+0x178>)
   23e4a:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
   23e4c:	230f      	movs	r3, #15
   23e4e:	18fc      	adds	r4, r7, r3
   23e50:	230e      	movs	r3, #14
   23e52:	18fb      	adds	r3, r7, r3
   23e54:	781b      	ldrb	r3, [r3, #0]
   23e56:	0018      	movs	r0, r3
   23e58:	4b32      	ldr	r3, [pc, #200]	; (23f24 <nm_drv_init+0x17c>)
   23e5a:	4798      	blx	r3
   23e5c:	0003      	movs	r3, r0
   23e5e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23e60:	230f      	movs	r3, #15
   23e62:	18fb      	adds	r3, r7, r3
   23e64:	781b      	ldrb	r3, [r3, #0]
   23e66:	b25b      	sxtb	r3, r3
   23e68:	2b00      	cmp	r3, #0
   23e6a:	d13a      	bne.n	23ee2 <nm_drv_init+0x13a>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
   23e6c:	230f      	movs	r3, #15
   23e6e:	18fc      	adds	r4, r7, r3
   23e70:	230e      	movs	r3, #14
   23e72:	18fb      	adds	r3, r7, r3
   23e74:	781b      	ldrb	r3, [r3, #0]
   23e76:	0018      	movs	r0, r3
   23e78:	4b2b      	ldr	r3, [pc, #172]	; (23f28 <nm_drv_init+0x180>)
   23e7a:	4798      	blx	r3
   23e7c:	0003      	movs	r3, r0
   23e7e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23e80:	230f      	movs	r3, #15
   23e82:	18fb      	adds	r3, r7, r3
   23e84:	781b      	ldrb	r3, [r3, #0]
   23e86:	b25b      	sxtb	r3, r3
   23e88:	2b00      	cmp	r3, #0
   23e8a:	d12c      	bne.n	23ee6 <nm_drv_init+0x13e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
   23e8c:	230e      	movs	r3, #14
   23e8e:	18fb      	adds	r3, r7, r3
   23e90:	781b      	ldrb	r3, [r3, #0]
   23e92:	2b02      	cmp	r3, #2
   23e94:	d02a      	beq.n	23eec <nm_drv_init+0x144>
   23e96:	230e      	movs	r3, #14
   23e98:	18fb      	adds	r3, r7, r3
   23e9a:	781b      	ldrb	r3, [r3, #0]
   23e9c:	2b03      	cmp	r3, #3
   23e9e:	d025      	beq.n	23eec <nm_drv_init+0x144>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
   23ea0:	230f      	movs	r3, #15
   23ea2:	18fc      	adds	r4, r7, r3
   23ea4:	4b21      	ldr	r3, [pc, #132]	; (23f2c <nm_drv_init+0x184>)
   23ea6:	4798      	blx	r3
   23ea8:	0003      	movs	r3, r0
   23eaa:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23eac:	230f      	movs	r3, #15
   23eae:	18fb      	adds	r3, r7, r3
   23eb0:	781b      	ldrb	r3, [r3, #0]
   23eb2:	b25b      	sxtb	r3, r3
   23eb4:	2b00      	cmp	r3, #0
   23eb6:	d00f      	beq.n	23ed8 <nm_drv_init+0x130>
		M2M_ERR("failed to enable interrupts..\n");
   23eb8:	23a7      	movs	r3, #167	; 0xa7
   23eba:	005a      	lsls	r2, r3, #1
   23ebc:	4910      	ldr	r1, [pc, #64]	; (23f00 <nm_drv_init+0x158>)
   23ebe:	4b11      	ldr	r3, [pc, #68]	; (23f04 <nm_drv_init+0x15c>)
   23ec0:	0018      	movs	r0, r3
   23ec2:	4b11      	ldr	r3, [pc, #68]	; (23f08 <nm_drv_init+0x160>)
   23ec4:	4798      	blx	r3
   23ec6:	4b1a      	ldr	r3, [pc, #104]	; (23f30 <nm_drv_init+0x188>)
   23ec8:	0018      	movs	r0, r3
   23eca:	4b0f      	ldr	r3, [pc, #60]	; (23f08 <nm_drv_init+0x160>)
   23ecc:	4798      	blx	r3
   23ece:	4b10      	ldr	r3, [pc, #64]	; (23f10 <nm_drv_init+0x168>)
   23ed0:	0018      	movs	r0, r3
   23ed2:	4b0d      	ldr	r3, [pc, #52]	; (23f08 <nm_drv_init+0x160>)
   23ed4:	4798      	blx	r3
		goto ERR2;
   23ed6:	e007      	b.n	23ee8 <nm_drv_init+0x140>
	}
	return ret;
   23ed8:	230f      	movs	r3, #15
   23eda:	18fb      	adds	r3, r7, r3
   23edc:	781b      	ldrb	r3, [r3, #0]
   23ede:	b25b      	sxtb	r3, r3
   23ee0:	e008      	b.n	23ef4 <nm_drv_init+0x14c>
		goto ERR2;
   23ee2:	46c0      	nop			; (mov r8, r8)
   23ee4:	e000      	b.n	23ee8 <nm_drv_init+0x140>
		goto ERR2;
   23ee6:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
   23ee8:	4b12      	ldr	r3, [pc, #72]	; (23f34 <nm_drv_init+0x18c>)
   23eea:	4798      	blx	r3
ERR1:
	return ret;
   23eec:	230f      	movs	r3, #15
   23eee:	18fb      	adds	r3, r7, r3
   23ef0:	781b      	ldrb	r3, [r3, #0]
   23ef2:	b25b      	sxtb	r3, r3
}
   23ef4:	0018      	movs	r0, r3
   23ef6:	46bd      	mov	sp, r7
   23ef8:	b005      	add	sp, #20
   23efa:	bd90      	pop	{r4, r7, pc}
   23efc:	00023909 	.word	0x00023909
   23f00:	000399cc 	.word	0x000399cc
   23f04:	000398fc 	.word	0x000398fc
   23f08:	0001eb7d 	.word	0x0001eb7d
   23f0c:	00039910 	.word	0x00039910
   23f10:	0003992c 	.word	0x0003992c
   23f14:	00039930 	.word	0x00039930
   23f18:	000232a5 	.word	0x000232a5
   23f1c:	0003993c 	.word	0x0003993c
   23f20:	000257c1 	.word	0x000257c1
   23f24:	000235fd 	.word	0x000235fd
   23f28:	00023795 	.word	0x00023795
   23f2c:	000231f1 	.word	0x000231f1
   23f30:	0003994c 	.word	0x0003994c
   23f34:	0002393d 	.word	0x0002393d

00023f38 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
   23f38:	b590      	push	{r4, r7, lr}
   23f3a:	b085      	sub	sp, #20
   23f3c:	af00      	add	r7, sp, #0
   23f3e:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
   23f40:	230f      	movs	r3, #15
   23f42:	18fc      	adds	r4, r7, r3
   23f44:	4b2e      	ldr	r3, [pc, #184]	; (24000 <nm_drv_deinit+0xc8>)
   23f46:	4798      	blx	r3
   23f48:	0003      	movs	r3, r0
   23f4a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23f4c:	230f      	movs	r3, #15
   23f4e:	18fb      	adds	r3, r7, r3
   23f50:	781b      	ldrb	r3, [r3, #0]
   23f52:	b25b      	sxtb	r3, r3
   23f54:	2b00      	cmp	r3, #0
   23f56:	d010      	beq.n	23f7a <nm_drv_deinit+0x42>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
   23f58:	2366      	movs	r3, #102	; 0x66
   23f5a:	33ff      	adds	r3, #255	; 0xff
   23f5c:	001a      	movs	r2, r3
   23f5e:	4929      	ldr	r1, [pc, #164]	; (24004 <nm_drv_deinit+0xcc>)
   23f60:	4b29      	ldr	r3, [pc, #164]	; (24008 <nm_drv_deinit+0xd0>)
   23f62:	0018      	movs	r0, r3
   23f64:	4b29      	ldr	r3, [pc, #164]	; (2400c <nm_drv_deinit+0xd4>)
   23f66:	4798      	blx	r3
   23f68:	4b29      	ldr	r3, [pc, #164]	; (24010 <nm_drv_deinit+0xd8>)
   23f6a:	0018      	movs	r0, r3
   23f6c:	4b27      	ldr	r3, [pc, #156]	; (2400c <nm_drv_deinit+0xd4>)
   23f6e:	4798      	blx	r3
   23f70:	4b28      	ldr	r3, [pc, #160]	; (24014 <nm_drv_deinit+0xdc>)
   23f72:	0018      	movs	r0, r3
   23f74:	4b25      	ldr	r3, [pc, #148]	; (2400c <nm_drv_deinit+0xd4>)
   23f76:	4798      	blx	r3
		goto ERR1;
   23f78:	e03a      	b.n	23ff0 <nm_drv_deinit+0xb8>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
   23f7a:	230f      	movs	r3, #15
   23f7c:	18fc      	adds	r4, r7, r3
   23f7e:	2000      	movs	r0, #0
   23f80:	4b25      	ldr	r3, [pc, #148]	; (24018 <nm_drv_deinit+0xe0>)
   23f82:	4798      	blx	r3
   23f84:	0003      	movs	r3, r0
   23f86:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23f88:	230f      	movs	r3, #15
   23f8a:	18fb      	adds	r3, r7, r3
   23f8c:	781b      	ldrb	r3, [r3, #0]
   23f8e:	b25b      	sxtb	r3, r3
   23f90:	2b00      	cmp	r3, #0
   23f92:	d00f      	beq.n	23fb4 <nm_drv_deinit+0x7c>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
   23f94:	23b6      	movs	r3, #182	; 0xb6
   23f96:	005a      	lsls	r2, r3, #1
   23f98:	491a      	ldr	r1, [pc, #104]	; (24004 <nm_drv_deinit+0xcc>)
   23f9a:	4b1b      	ldr	r3, [pc, #108]	; (24008 <nm_drv_deinit+0xd0>)
   23f9c:	0018      	movs	r0, r3
   23f9e:	4b1b      	ldr	r3, [pc, #108]	; (2400c <nm_drv_deinit+0xd4>)
   23fa0:	4798      	blx	r3
   23fa2:	4b1e      	ldr	r3, [pc, #120]	; (2401c <nm_drv_deinit+0xe4>)
   23fa4:	0018      	movs	r0, r3
   23fa6:	4b19      	ldr	r3, [pc, #100]	; (2400c <nm_drv_deinit+0xd4>)
   23fa8:	4798      	blx	r3
   23faa:	4b1a      	ldr	r3, [pc, #104]	; (24014 <nm_drv_deinit+0xdc>)
   23fac:	0018      	movs	r0, r3
   23fae:	4b17      	ldr	r3, [pc, #92]	; (2400c <nm_drv_deinit+0xd4>)
   23fb0:	4798      	blx	r3
		goto ERR1;
   23fb2:	e01d      	b.n	23ff0 <nm_drv_deinit+0xb8>
	}

	ret = nm_bus_iface_deinit();
   23fb4:	230f      	movs	r3, #15
   23fb6:	18fc      	adds	r4, r7, r3
   23fb8:	4b19      	ldr	r3, [pc, #100]	; (24020 <nm_drv_deinit+0xe8>)
   23fba:	4798      	blx	r3
   23fbc:	0003      	movs	r3, r0
   23fbe:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23fc0:	230f      	movs	r3, #15
   23fc2:	18fb      	adds	r3, r7, r3
   23fc4:	781b      	ldrb	r3, [r3, #0]
   23fc6:	b25b      	sxtb	r3, r3
   23fc8:	2b00      	cmp	r3, #0
   23fca:	d00f      	beq.n	23fec <nm_drv_deinit+0xb4>
		M2M_ERR("[nmi stop]: fail init bus\n");
   23fcc:	23b9      	movs	r3, #185	; 0xb9
   23fce:	005a      	lsls	r2, r3, #1
   23fd0:	490c      	ldr	r1, [pc, #48]	; (24004 <nm_drv_deinit+0xcc>)
   23fd2:	4b0d      	ldr	r3, [pc, #52]	; (24008 <nm_drv_deinit+0xd0>)
   23fd4:	0018      	movs	r0, r3
   23fd6:	4b0d      	ldr	r3, [pc, #52]	; (2400c <nm_drv_deinit+0xd4>)
   23fd8:	4798      	blx	r3
   23fda:	4b12      	ldr	r3, [pc, #72]	; (24024 <nm_drv_deinit+0xec>)
   23fdc:	0018      	movs	r0, r3
   23fde:	4b0b      	ldr	r3, [pc, #44]	; (2400c <nm_drv_deinit+0xd4>)
   23fe0:	4798      	blx	r3
   23fe2:	4b0c      	ldr	r3, [pc, #48]	; (24014 <nm_drv_deinit+0xdc>)
   23fe4:	0018      	movs	r0, r3
   23fe6:	4b09      	ldr	r3, [pc, #36]	; (2400c <nm_drv_deinit+0xd4>)
   23fe8:	4798      	blx	r3
		goto ERR1;
   23fea:	e001      	b.n	23ff0 <nm_drv_deinit+0xb8>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
   23fec:	4b0e      	ldr	r3, [pc, #56]	; (24028 <nm_drv_deinit+0xf0>)
   23fee:	4798      	blx	r3
#endif

ERR1:
	return ret;
   23ff0:	230f      	movs	r3, #15
   23ff2:	18fb      	adds	r3, r7, r3
   23ff4:	781b      	ldrb	r3, [r3, #0]
   23ff6:	b25b      	sxtb	r3, r3
}
   23ff8:	0018      	movs	r0, r3
   23ffa:	46bd      	mov	sp, r7
   23ffc:	b005      	add	sp, #20
   23ffe:	bd90      	pop	{r4, r7, pc}
   24000:	00023849 	.word	0x00023849
   24004:	000399d8 	.word	0x000399d8
   24008:	000398fc 	.word	0x000398fc
   2400c:	0001eb7d 	.word	0x0001eb7d
   24010:	0003996c 	.word	0x0003996c
   24014:	0003992c 	.word	0x0003992c
   24018:	00026c69 	.word	0x00026c69
   2401c:	0003998c 	.word	0x0003998c
   24020:	0002393d 	.word	0x0002393d
   24024:	000399b0 	.word	0x000399b0
   24028:	0002590d 	.word	0x0002590d

0002402c <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
   2402c:	b580      	push	{r7, lr}
   2402e:	b086      	sub	sp, #24
   24030:	af00      	add	r7, sp, #0
   24032:	6078      	str	r0, [r7, #4]
   24034:	000a      	movs	r2, r1
   24036:	1cbb      	adds	r3, r7, #2
   24038:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
   2403a:	230c      	movs	r3, #12
   2403c:	18fb      	adds	r3, r7, r3
   2403e:	2200      	movs	r2, #0
   24040:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
   24042:	230c      	movs	r3, #12
   24044:	18fb      	adds	r3, r7, r3
   24046:	687a      	ldr	r2, [r7, #4]
   24048:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   2404a:	230c      	movs	r3, #12
   2404c:	18fb      	adds	r3, r7, r3
   2404e:	1cba      	adds	r2, r7, #2
   24050:	8812      	ldrh	r2, [r2, #0]
   24052:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   24054:	230c      	movs	r3, #12
   24056:	18fb      	adds	r3, r7, r3
   24058:	0019      	movs	r1, r3
   2405a:	2003      	movs	r0, #3
   2405c:	4b03      	ldr	r3, [pc, #12]	; (2406c <nmi_spi_read+0x40>)
   2405e:	4798      	blx	r3
   24060:	0003      	movs	r3, r0
}
   24062:	0018      	movs	r0, r3
   24064:	46bd      	mov	sp, r7
   24066:	b006      	add	sp, #24
   24068:	bd80      	pop	{r7, pc}
   2406a:	46c0      	nop			; (mov r8, r8)
   2406c:	000217d9 	.word	0x000217d9

00024070 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
   24070:	b580      	push	{r7, lr}
   24072:	b086      	sub	sp, #24
   24074:	af00      	add	r7, sp, #0
   24076:	6078      	str	r0, [r7, #4]
   24078:	000a      	movs	r2, r1
   2407a:	1cbb      	adds	r3, r7, #2
   2407c:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
   2407e:	230c      	movs	r3, #12
   24080:	18fb      	adds	r3, r7, r3
   24082:	687a      	ldr	r2, [r7, #4]
   24084:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
   24086:	230c      	movs	r3, #12
   24088:	18fb      	adds	r3, r7, r3
   2408a:	2200      	movs	r2, #0
   2408c:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   2408e:	230c      	movs	r3, #12
   24090:	18fb      	adds	r3, r7, r3
   24092:	1cba      	adds	r2, r7, #2
   24094:	8812      	ldrh	r2, [r2, #0]
   24096:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   24098:	230c      	movs	r3, #12
   2409a:	18fb      	adds	r3, r7, r3
   2409c:	0019      	movs	r1, r3
   2409e:	2003      	movs	r0, #3
   240a0:	4b03      	ldr	r3, [pc, #12]	; (240b0 <nmi_spi_write+0x40>)
   240a2:	4798      	blx	r3
   240a4:	0003      	movs	r3, r0
}
   240a6:	0018      	movs	r0, r3
   240a8:	46bd      	mov	sp, r7
   240aa:	b006      	add	sp, #24
   240ac:	bd80      	pop	{r7, pc}
   240ae:	46c0      	nop			; (mov r8, r8)
   240b0:	000217d9 	.word	0x000217d9

000240b4 <nmi_spi_rw>:
#ifndef USE_OLD_SPI_SW
static sint8 nmi_spi_rw(uint8 *bin,uint8* bout,uint16 sz)
{
   240b4:	b580      	push	{r7, lr}
   240b6:	b088      	sub	sp, #32
   240b8:	af00      	add	r7, sp, #0
   240ba:	60f8      	str	r0, [r7, #12]
   240bc:	60b9      	str	r1, [r7, #8]
   240be:	1dbb      	adds	r3, r7, #6
   240c0:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = bin;
   240c2:	2314      	movs	r3, #20
   240c4:	18fb      	adds	r3, r7, r3
   240c6:	68fa      	ldr	r2, [r7, #12]
   240c8:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = bout;
   240ca:	2314      	movs	r3, #20
   240cc:	18fb      	adds	r3, r7, r3
   240ce:	68ba      	ldr	r2, [r7, #8]
   240d0:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   240d2:	2314      	movs	r3, #20
   240d4:	18fb      	adds	r3, r7, r3
   240d6:	1dba      	adds	r2, r7, #6
   240d8:	8812      	ldrh	r2, [r2, #0]
   240da:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);	
   240dc:	2314      	movs	r3, #20
   240de:	18fb      	adds	r3, r7, r3
   240e0:	0019      	movs	r1, r3
   240e2:	2003      	movs	r0, #3
   240e4:	4b03      	ldr	r3, [pc, #12]	; (240f4 <nmi_spi_rw+0x40>)
   240e6:	4798      	blx	r3
   240e8:	0003      	movs	r3, r0
}
   240ea:	0018      	movs	r0, r3
   240ec:	46bd      	mov	sp, r7
   240ee:	b008      	add	sp, #32
   240f0:	bd80      	pop	{r7, pc}
   240f2:	46c0      	nop			; (mov r8, r8)
   240f4:	000217d9 	.word	0x000217d9

000240f8 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
   240f8:	b580      	push	{r7, lr}
   240fa:	b082      	sub	sp, #8
   240fc:	af00      	add	r7, sp, #0
   240fe:	0002      	movs	r2, r0
   24100:	1dfb      	adds	r3, r7, #7
   24102:	701a      	strb	r2, [r3, #0]
   24104:	1dbb      	adds	r3, r7, #6
   24106:	1c0a      	adds	r2, r1, #0
   24108:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
   2410a:	1dfb      	adds	r3, r7, #7
   2410c:	781b      	ldrb	r3, [r3, #0]
   2410e:	005a      	lsls	r2, r3, #1
   24110:	1dbb      	adds	r3, r7, #6
   24112:	781b      	ldrb	r3, [r3, #0]
   24114:	4053      	eors	r3, r2
   24116:	4a03      	ldr	r2, [pc, #12]	; (24124 <crc7_byte+0x2c>)
   24118:	5cd3      	ldrb	r3, [r2, r3]
}
   2411a:	0018      	movs	r0, r3
   2411c:	46bd      	mov	sp, r7
   2411e:	b002      	add	sp, #8
   24120:	bd80      	pop	{r7, pc}
   24122:	46c0      	nop			; (mov r8, r8)
   24124:	000399e8 	.word	0x000399e8

00024128 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
   24128:	b590      	push	{r4, r7, lr}
   2412a:	b085      	sub	sp, #20
   2412c:	af00      	add	r7, sp, #0
   2412e:	60b9      	str	r1, [r7, #8]
   24130:	607a      	str	r2, [r7, #4]
   24132:	230f      	movs	r3, #15
   24134:	18fb      	adds	r3, r7, r3
   24136:	1c02      	adds	r2, r0, #0
   24138:	701a      	strb	r2, [r3, #0]
	while (len--)
   2413a:	e00e      	b.n	2415a <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
   2413c:	68bb      	ldr	r3, [r7, #8]
   2413e:	1c5a      	adds	r2, r3, #1
   24140:	60ba      	str	r2, [r7, #8]
   24142:	781a      	ldrb	r2, [r3, #0]
   24144:	230f      	movs	r3, #15
   24146:	18fc      	adds	r4, r7, r3
   24148:	230f      	movs	r3, #15
   2414a:	18fb      	adds	r3, r7, r3
   2414c:	781b      	ldrb	r3, [r3, #0]
   2414e:	0011      	movs	r1, r2
   24150:	0018      	movs	r0, r3
   24152:	4b08      	ldr	r3, [pc, #32]	; (24174 <crc7+0x4c>)
   24154:	4798      	blx	r3
   24156:	0003      	movs	r3, r0
   24158:	7023      	strb	r3, [r4, #0]
	while (len--)
   2415a:	687b      	ldr	r3, [r7, #4]
   2415c:	1e5a      	subs	r2, r3, #1
   2415e:	607a      	str	r2, [r7, #4]
   24160:	2b00      	cmp	r3, #0
   24162:	d1eb      	bne.n	2413c <crc7+0x14>
	return crc;
   24164:	230f      	movs	r3, #15
   24166:	18fb      	adds	r3, r7, r3
   24168:	781b      	ldrb	r3, [r3, #0]
}
   2416a:	0018      	movs	r0, r3
   2416c:	46bd      	mov	sp, r7
   2416e:	b005      	add	sp, #20
   24170:	bd90      	pop	{r4, r7, pc}
   24172:	46c0      	nop			; (mov r8, r8)
   24174:	000240f9 	.word	0x000240f9

00024178 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
   24178:	b590      	push	{r4, r7, lr}
   2417a:	b089      	sub	sp, #36	; 0x24
   2417c:	af00      	add	r7, sp, #0
   2417e:	60b9      	str	r1, [r7, #8]
   24180:	607a      	str	r2, [r7, #4]
   24182:	603b      	str	r3, [r7, #0]
   24184:	230f      	movs	r3, #15
   24186:	18fb      	adds	r3, r7, r3
   24188:	1c02      	adds	r2, r0, #0
   2418a:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
   2418c:	231f      	movs	r3, #31
   2418e:	18fb      	adds	r3, r7, r3
   24190:	2205      	movs	r2, #5
   24192:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   24194:	231e      	movs	r3, #30
   24196:	18fb      	adds	r3, r7, r3
   24198:	2201      	movs	r2, #1
   2419a:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
   2419c:	2314      	movs	r3, #20
   2419e:	18fb      	adds	r3, r7, r3
   241a0:	220f      	movs	r2, #15
   241a2:	18ba      	adds	r2, r7, r2
   241a4:	7812      	ldrb	r2, [r2, #0]
   241a6:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   241a8:	230f      	movs	r3, #15
   241aa:	18fb      	adds	r3, r7, r3
   241ac:	781b      	ldrb	r3, [r3, #0]
   241ae:	3bc1      	subs	r3, #193	; 0xc1
   241b0:	2b0e      	cmp	r3, #14
   241b2:	d900      	bls.n	241b6 <spi_cmd+0x3e>
   241b4:	e11b      	b.n	243ee <spi_cmd+0x276>
   241b6:	009a      	lsls	r2, r3, #2
   241b8:	4bb6      	ldr	r3, [pc, #728]	; (24494 <spi_cmd+0x31c>)
   241ba:	18d3      	adds	r3, r2, r3
   241bc:	681b      	ldr	r3, [r3, #0]
   241be:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
   241c0:	68bb      	ldr	r3, [r7, #8]
   241c2:	0c1b      	lsrs	r3, r3, #16
   241c4:	b2da      	uxtb	r2, r3
   241c6:	2314      	movs	r3, #20
   241c8:	18fb      	adds	r3, r7, r3
   241ca:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   241cc:	68bb      	ldr	r3, [r7, #8]
   241ce:	0a1b      	lsrs	r3, r3, #8
   241d0:	b2da      	uxtb	r2, r3
   241d2:	2314      	movs	r3, #20
   241d4:	18fb      	adds	r3, r7, r3
   241d6:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   241d8:	68bb      	ldr	r3, [r7, #8]
   241da:	b2da      	uxtb	r2, r3
   241dc:	2314      	movs	r3, #20
   241de:	18fb      	adds	r3, r7, r3
   241e0:	70da      	strb	r2, [r3, #3]
		len = 5;
   241e2:	231f      	movs	r3, #31
   241e4:	18fb      	adds	r3, r7, r3
   241e6:	2205      	movs	r2, #5
   241e8:	701a      	strb	r2, [r3, #0]
		break;
   241ea:	e105      	b.n	243f8 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
   241ec:	68bb      	ldr	r3, [r7, #8]
   241ee:	0a1b      	lsrs	r3, r3, #8
   241f0:	b2da      	uxtb	r2, r3
   241f2:	2314      	movs	r3, #20
   241f4:	18fb      	adds	r3, r7, r3
   241f6:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   241f8:	2330      	movs	r3, #48	; 0x30
   241fa:	18fb      	adds	r3, r7, r3
   241fc:	781b      	ldrb	r3, [r3, #0]
   241fe:	2b00      	cmp	r3, #0
   24200:	d009      	beq.n	24216 <spi_cmd+0x9e>
   24202:	2314      	movs	r3, #20
   24204:	18fb      	adds	r3, r7, r3
   24206:	785b      	ldrb	r3, [r3, #1]
   24208:	2280      	movs	r2, #128	; 0x80
   2420a:	4252      	negs	r2, r2
   2420c:	4313      	orrs	r3, r2
   2420e:	b2da      	uxtb	r2, r3
   24210:	2314      	movs	r3, #20
   24212:	18fb      	adds	r3, r7, r3
   24214:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
   24216:	68bb      	ldr	r3, [r7, #8]
   24218:	b2da      	uxtb	r2, r3
   2421a:	2314      	movs	r3, #20
   2421c:	18fb      	adds	r3, r7, r3
   2421e:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   24220:	2314      	movs	r3, #20
   24222:	18fb      	adds	r3, r7, r3
   24224:	2200      	movs	r2, #0
   24226:	70da      	strb	r2, [r3, #3]
		len = 5;
   24228:	231f      	movs	r3, #31
   2422a:	18fb      	adds	r3, r7, r3
   2422c:	2205      	movs	r2, #5
   2422e:	701a      	strb	r2, [r3, #0]
		break;
   24230:	e0e2      	b.n	243f8 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
   24232:	2314      	movs	r3, #20
   24234:	18fb      	adds	r3, r7, r3
   24236:	2200      	movs	r2, #0
   24238:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   2423a:	2314      	movs	r3, #20
   2423c:	18fb      	adds	r3, r7, r3
   2423e:	2200      	movs	r2, #0
   24240:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   24242:	2314      	movs	r3, #20
   24244:	18fb      	adds	r3, r7, r3
   24246:	2200      	movs	r2, #0
   24248:	70da      	strb	r2, [r3, #3]
		len = 5;
   2424a:	231f      	movs	r3, #31
   2424c:	18fb      	adds	r3, r7, r3
   2424e:	2205      	movs	r2, #5
   24250:	701a      	strb	r2, [r3, #0]
		break;
   24252:	e0d1      	b.n	243f8 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
   24254:	2314      	movs	r3, #20
   24256:	18fb      	adds	r3, r7, r3
   24258:	2200      	movs	r2, #0
   2425a:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   2425c:	2314      	movs	r3, #20
   2425e:	18fb      	adds	r3, r7, r3
   24260:	2200      	movs	r2, #0
   24262:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   24264:	2314      	movs	r3, #20
   24266:	18fb      	adds	r3, r7, r3
   24268:	2200      	movs	r2, #0
   2426a:	70da      	strb	r2, [r3, #3]
		len = 5;
   2426c:	231f      	movs	r3, #31
   2426e:	18fb      	adds	r3, r7, r3
   24270:	2205      	movs	r2, #5
   24272:	701a      	strb	r2, [r3, #0]
		break;
   24274:	e0c0      	b.n	243f8 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
   24276:	2314      	movs	r3, #20
   24278:	18fb      	adds	r3, r7, r3
   2427a:	22ff      	movs	r2, #255	; 0xff
   2427c:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
   2427e:	2314      	movs	r3, #20
   24280:	18fb      	adds	r3, r7, r3
   24282:	22ff      	movs	r2, #255	; 0xff
   24284:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
   24286:	2314      	movs	r3, #20
   24288:	18fb      	adds	r3, r7, r3
   2428a:	22ff      	movs	r2, #255	; 0xff
   2428c:	70da      	strb	r2, [r3, #3]
		len = 5;
   2428e:	231f      	movs	r3, #31
   24290:	18fb      	adds	r3, r7, r3
   24292:	2205      	movs	r2, #5
   24294:	701a      	strb	r2, [r3, #0]
		break;
   24296:	e0af      	b.n	243f8 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
   24298:	68bb      	ldr	r3, [r7, #8]
   2429a:	0c1b      	lsrs	r3, r3, #16
   2429c:	b2da      	uxtb	r2, r3
   2429e:	2314      	movs	r3, #20
   242a0:	18fb      	adds	r3, r7, r3
   242a2:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   242a4:	68bb      	ldr	r3, [r7, #8]
   242a6:	0a1b      	lsrs	r3, r3, #8
   242a8:	b2da      	uxtb	r2, r3
   242aa:	2314      	movs	r3, #20
   242ac:	18fb      	adds	r3, r7, r3
   242ae:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   242b0:	68bb      	ldr	r3, [r7, #8]
   242b2:	b2da      	uxtb	r2, r3
   242b4:	2314      	movs	r3, #20
   242b6:	18fb      	adds	r3, r7, r3
   242b8:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
   242ba:	683b      	ldr	r3, [r7, #0]
   242bc:	0a1b      	lsrs	r3, r3, #8
   242be:	b2da      	uxtb	r2, r3
   242c0:	2314      	movs	r3, #20
   242c2:	18fb      	adds	r3, r7, r3
   242c4:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
   242c6:	683b      	ldr	r3, [r7, #0]
   242c8:	b2da      	uxtb	r2, r3
   242ca:	2314      	movs	r3, #20
   242cc:	18fb      	adds	r3, r7, r3
   242ce:	715a      	strb	r2, [r3, #5]
		len = 7;
   242d0:	231f      	movs	r3, #31
   242d2:	18fb      	adds	r3, r7, r3
   242d4:	2207      	movs	r2, #7
   242d6:	701a      	strb	r2, [r3, #0]
		break;
   242d8:	e08e      	b.n	243f8 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
   242da:	68bb      	ldr	r3, [r7, #8]
   242dc:	0c1b      	lsrs	r3, r3, #16
   242de:	b2da      	uxtb	r2, r3
   242e0:	2314      	movs	r3, #20
   242e2:	18fb      	adds	r3, r7, r3
   242e4:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   242e6:	68bb      	ldr	r3, [r7, #8]
   242e8:	0a1b      	lsrs	r3, r3, #8
   242ea:	b2da      	uxtb	r2, r3
   242ec:	2314      	movs	r3, #20
   242ee:	18fb      	adds	r3, r7, r3
   242f0:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   242f2:	68bb      	ldr	r3, [r7, #8]
   242f4:	b2da      	uxtb	r2, r3
   242f6:	2314      	movs	r3, #20
   242f8:	18fb      	adds	r3, r7, r3
   242fa:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
   242fc:	683b      	ldr	r3, [r7, #0]
   242fe:	0c1b      	lsrs	r3, r3, #16
   24300:	b2da      	uxtb	r2, r3
   24302:	2314      	movs	r3, #20
   24304:	18fb      	adds	r3, r7, r3
   24306:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
   24308:	683b      	ldr	r3, [r7, #0]
   2430a:	0a1b      	lsrs	r3, r3, #8
   2430c:	b2da      	uxtb	r2, r3
   2430e:	2314      	movs	r3, #20
   24310:	18fb      	adds	r3, r7, r3
   24312:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
   24314:	683b      	ldr	r3, [r7, #0]
   24316:	b2da      	uxtb	r2, r3
   24318:	2314      	movs	r3, #20
   2431a:	18fb      	adds	r3, r7, r3
   2431c:	719a      	strb	r2, [r3, #6]
		len = 8;
   2431e:	231f      	movs	r3, #31
   24320:	18fb      	adds	r3, r7, r3
   24322:	2208      	movs	r2, #8
   24324:	701a      	strb	r2, [r3, #0]
		break;
   24326:	e067      	b.n	243f8 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
   24328:	68bb      	ldr	r3, [r7, #8]
   2432a:	0a1b      	lsrs	r3, r3, #8
   2432c:	b2da      	uxtb	r2, r3
   2432e:	2314      	movs	r3, #20
   24330:	18fb      	adds	r3, r7, r3
   24332:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   24334:	2330      	movs	r3, #48	; 0x30
   24336:	18fb      	adds	r3, r7, r3
   24338:	781b      	ldrb	r3, [r3, #0]
   2433a:	2b00      	cmp	r3, #0
   2433c:	d009      	beq.n	24352 <spi_cmd+0x1da>
   2433e:	2314      	movs	r3, #20
   24340:	18fb      	adds	r3, r7, r3
   24342:	785b      	ldrb	r3, [r3, #1]
   24344:	2280      	movs	r2, #128	; 0x80
   24346:	4252      	negs	r2, r2
   24348:	4313      	orrs	r3, r2
   2434a:	b2da      	uxtb	r2, r3
   2434c:	2314      	movs	r3, #20
   2434e:	18fb      	adds	r3, r7, r3
   24350:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
   24352:	68bb      	ldr	r3, [r7, #8]
   24354:	b2da      	uxtb	r2, r3
   24356:	2314      	movs	r3, #20
   24358:	18fb      	adds	r3, r7, r3
   2435a:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
   2435c:	687b      	ldr	r3, [r7, #4]
   2435e:	0e1b      	lsrs	r3, r3, #24
   24360:	b2da      	uxtb	r2, r3
   24362:	2314      	movs	r3, #20
   24364:	18fb      	adds	r3, r7, r3
   24366:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
   24368:	687b      	ldr	r3, [r7, #4]
   2436a:	0c1b      	lsrs	r3, r3, #16
   2436c:	b2da      	uxtb	r2, r3
   2436e:	2314      	movs	r3, #20
   24370:	18fb      	adds	r3, r7, r3
   24372:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
   24374:	687b      	ldr	r3, [r7, #4]
   24376:	0a1b      	lsrs	r3, r3, #8
   24378:	b2da      	uxtb	r2, r3
   2437a:	2314      	movs	r3, #20
   2437c:	18fb      	adds	r3, r7, r3
   2437e:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
   24380:	687b      	ldr	r3, [r7, #4]
   24382:	b2da      	uxtb	r2, r3
   24384:	2314      	movs	r3, #20
   24386:	18fb      	adds	r3, r7, r3
   24388:	719a      	strb	r2, [r3, #6]
		len = 8;
   2438a:	231f      	movs	r3, #31
   2438c:	18fb      	adds	r3, r7, r3
   2438e:	2208      	movs	r2, #8
   24390:	701a      	strb	r2, [r3, #0]
		break;
   24392:	e031      	b.n	243f8 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
   24394:	68bb      	ldr	r3, [r7, #8]
   24396:	0c1b      	lsrs	r3, r3, #16
   24398:	b2da      	uxtb	r2, r3
   2439a:	2314      	movs	r3, #20
   2439c:	18fb      	adds	r3, r7, r3
   2439e:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   243a0:	68bb      	ldr	r3, [r7, #8]
   243a2:	0a1b      	lsrs	r3, r3, #8
   243a4:	b2da      	uxtb	r2, r3
   243a6:	2314      	movs	r3, #20
   243a8:	18fb      	adds	r3, r7, r3
   243aa:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
   243ac:	68bb      	ldr	r3, [r7, #8]
   243ae:	b2da      	uxtb	r2, r3
   243b0:	2314      	movs	r3, #20
   243b2:	18fb      	adds	r3, r7, r3
   243b4:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
   243b6:	687b      	ldr	r3, [r7, #4]
   243b8:	0e1b      	lsrs	r3, r3, #24
   243ba:	b2da      	uxtb	r2, r3
   243bc:	2314      	movs	r3, #20
   243be:	18fb      	adds	r3, r7, r3
   243c0:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
   243c2:	687b      	ldr	r3, [r7, #4]
   243c4:	0c1b      	lsrs	r3, r3, #16
   243c6:	b2da      	uxtb	r2, r3
   243c8:	2314      	movs	r3, #20
   243ca:	18fb      	adds	r3, r7, r3
   243cc:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
   243ce:	687b      	ldr	r3, [r7, #4]
   243d0:	0a1b      	lsrs	r3, r3, #8
   243d2:	b2da      	uxtb	r2, r3
   243d4:	2314      	movs	r3, #20
   243d6:	18fb      	adds	r3, r7, r3
   243d8:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
   243da:	687b      	ldr	r3, [r7, #4]
   243dc:	b2da      	uxtb	r2, r3
   243de:	2314      	movs	r3, #20
   243e0:	18fb      	adds	r3, r7, r3
   243e2:	71da      	strb	r2, [r3, #7]
		len = 9;
   243e4:	231f      	movs	r3, #31
   243e6:	18fb      	adds	r3, r7, r3
   243e8:	2209      	movs	r2, #9
   243ea:	701a      	strb	r2, [r3, #0]
		break;
   243ec:	e004      	b.n	243f8 <spi_cmd+0x280>
	default:
		result = N_FAIL;
   243ee:	231e      	movs	r3, #30
   243f0:	18fb      	adds	r3, r7, r3
   243f2:	2200      	movs	r2, #0
   243f4:	701a      	strb	r2, [r3, #0]
		break;
   243f6:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
   243f8:	231e      	movs	r3, #30
   243fa:	18fb      	adds	r3, r7, r3
   243fc:	781b      	ldrb	r3, [r3, #0]
   243fe:	b25b      	sxtb	r3, r3
   24400:	2b00      	cmp	r3, #0
   24402:	d03f      	beq.n	24484 <spi_cmd+0x30c>
		if (!gu8Crc_off)
   24404:	4b24      	ldr	r3, [pc, #144]	; (24498 <spi_cmd+0x320>)
   24406:	781b      	ldrb	r3, [r3, #0]
   24408:	2b00      	cmp	r3, #0
   2440a:	d115      	bne.n	24438 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
   2440c:	231f      	movs	r3, #31
   2440e:	18fb      	adds	r3, r7, r3
   24410:	781b      	ldrb	r3, [r3, #0]
   24412:	1e5c      	subs	r4, r3, #1
   24414:	231f      	movs	r3, #31
   24416:	18fb      	adds	r3, r7, r3
   24418:	781b      	ldrb	r3, [r3, #0]
   2441a:	3b01      	subs	r3, #1
   2441c:	001a      	movs	r2, r3
   2441e:	2314      	movs	r3, #20
   24420:	18fb      	adds	r3, r7, r3
   24422:	0019      	movs	r1, r3
   24424:	207f      	movs	r0, #127	; 0x7f
   24426:	4b1d      	ldr	r3, [pc, #116]	; (2449c <spi_cmd+0x324>)
   24428:	4798      	blx	r3
   2442a:	0003      	movs	r3, r0
   2442c:	18db      	adds	r3, r3, r3
   2442e:	b2da      	uxtb	r2, r3
   24430:	2314      	movs	r3, #20
   24432:	18fb      	adds	r3, r7, r3
   24434:	551a      	strb	r2, [r3, r4]
   24436:	e006      	b.n	24446 <spi_cmd+0x2ce>
		else
			len-=1;
   24438:	231f      	movs	r3, #31
   2443a:	18fb      	adds	r3, r7, r3
   2443c:	221f      	movs	r2, #31
   2443e:	18ba      	adds	r2, r7, r2
   24440:	7812      	ldrb	r2, [r2, #0]
   24442:	3a01      	subs	r2, #1
   24444:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
   24446:	231f      	movs	r3, #31
   24448:	18fb      	adds	r3, r7, r3
   2444a:	781b      	ldrb	r3, [r3, #0]
   2444c:	b29a      	uxth	r2, r3
   2444e:	2314      	movs	r3, #20
   24450:	18fb      	adds	r3, r7, r3
   24452:	0011      	movs	r1, r2
   24454:	0018      	movs	r0, r3
   24456:	4b12      	ldr	r3, [pc, #72]	; (244a0 <spi_cmd+0x328>)
   24458:	4798      	blx	r3
   2445a:	1e03      	subs	r3, r0, #0
   2445c:	d012      	beq.n	24484 <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   2445e:	2390      	movs	r3, #144	; 0x90
   24460:	005a      	lsls	r2, r3, #1
   24462:	4910      	ldr	r1, [pc, #64]	; (244a4 <spi_cmd+0x32c>)
   24464:	4b10      	ldr	r3, [pc, #64]	; (244a8 <spi_cmd+0x330>)
   24466:	0018      	movs	r0, r3
   24468:	4b10      	ldr	r3, [pc, #64]	; (244ac <spi_cmd+0x334>)
   2446a:	4798      	blx	r3
   2446c:	4b10      	ldr	r3, [pc, #64]	; (244b0 <spi_cmd+0x338>)
   2446e:	0018      	movs	r0, r3
   24470:	4b0e      	ldr	r3, [pc, #56]	; (244ac <spi_cmd+0x334>)
   24472:	4798      	blx	r3
   24474:	4b0f      	ldr	r3, [pc, #60]	; (244b4 <spi_cmd+0x33c>)
   24476:	0018      	movs	r0, r3
   24478:	4b0c      	ldr	r3, [pc, #48]	; (244ac <spi_cmd+0x334>)
   2447a:	4798      	blx	r3
			result = N_FAIL;
   2447c:	231e      	movs	r3, #30
   2447e:	18fb      	adds	r3, r7, r3
   24480:	2200      	movs	r2, #0
   24482:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
   24484:	231e      	movs	r3, #30
   24486:	18fb      	adds	r3, r7, r3
   24488:	781b      	ldrb	r3, [r3, #0]
   2448a:	b25b      	sxtb	r3, r3
}
   2448c:	0018      	movs	r0, r3
   2448e:	46bd      	mov	sp, r7
   24490:	b009      	add	sp, #36	; 0x24
   24492:	bd90      	pop	{r4, r7, pc}
   24494:	0003a060 	.word	0x0003a060
   24498:	20003eec 	.word	0x20003eec
   2449c:	00024129 	.word	0x00024129
   244a0:	00024071 	.word	0x00024071
   244a4:	0003a0d8 	.word	0x0003a0d8
   244a8:	00039ae8 	.word	0x00039ae8
   244ac:	0001eb7d 	.word	0x0001eb7d
   244b0:	00039afc 	.word	0x00039afc
   244b4:	00039b28 	.word	0x00039b28

000244b8 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
   244b8:	b590      	push	{r4, r7, lr}
   244ba:	b085      	sub	sp, #20
   244bc:	af00      	add	r7, sp, #0
   244be:	0002      	movs	r2, r0
   244c0:	1dfb      	adds	r3, r7, #7
   244c2:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
   244c4:	230e      	movs	r3, #14
   244c6:	18fb      	adds	r3, r7, r3
   244c8:	2201      	movs	r2, #1
   244ca:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
   244cc:	4b32      	ldr	r3, [pc, #200]	; (24598 <spi_data_rsp+0xe0>)
   244ce:	781b      	ldrb	r3, [r3, #0]
   244d0:	2b00      	cmp	r3, #0
   244d2:	d104      	bne.n	244de <spi_data_rsp+0x26>
		len = 2;
   244d4:	230f      	movs	r3, #15
   244d6:	18fb      	adds	r3, r7, r3
   244d8:	2202      	movs	r2, #2
   244da:	701a      	strb	r2, [r3, #0]
   244dc:	e003      	b.n	244e6 <spi_data_rsp+0x2e>
	else
		len = 3;
   244de:	230f      	movs	r3, #15
   244e0:	18fb      	adds	r3, r7, r3
   244e2:	2203      	movs	r2, #3
   244e4:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
   244e6:	230f      	movs	r3, #15
   244e8:	18fb      	adds	r3, r7, r3
   244ea:	781b      	ldrb	r3, [r3, #0]
   244ec:	b29a      	uxth	r2, r3
   244ee:	2308      	movs	r3, #8
   244f0:	18fb      	adds	r3, r7, r3
   244f2:	0011      	movs	r1, r2
   244f4:	0018      	movs	r0, r3
   244f6:	4b29      	ldr	r3, [pc, #164]	; (2459c <spi_data_rsp+0xe4>)
   244f8:	4798      	blx	r3
   244fa:	1e03      	subs	r3, r0, #0
   244fc:	d013      	beq.n	24526 <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
   244fe:	239a      	movs	r3, #154	; 0x9a
   24500:	005a      	lsls	r2, r3, #1
   24502:	4927      	ldr	r1, [pc, #156]	; (245a0 <spi_data_rsp+0xe8>)
   24504:	4b27      	ldr	r3, [pc, #156]	; (245a4 <spi_data_rsp+0xec>)
   24506:	0018      	movs	r0, r3
   24508:	4b27      	ldr	r3, [pc, #156]	; (245a8 <spi_data_rsp+0xf0>)
   2450a:	4798      	blx	r3
   2450c:	4b27      	ldr	r3, [pc, #156]	; (245ac <spi_data_rsp+0xf4>)
   2450e:	0018      	movs	r0, r3
   24510:	4b25      	ldr	r3, [pc, #148]	; (245a8 <spi_data_rsp+0xf0>)
   24512:	4798      	blx	r3
   24514:	4b26      	ldr	r3, [pc, #152]	; (245b0 <spi_data_rsp+0xf8>)
   24516:	0018      	movs	r0, r3
   24518:	4b23      	ldr	r3, [pc, #140]	; (245a8 <spi_data_rsp+0xf0>)
   2451a:	4798      	blx	r3
		result = N_FAIL;
   2451c:	230e      	movs	r3, #14
   2451e:	18fb      	adds	r3, r7, r3
   24520:	2200      	movs	r2, #0
   24522:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   24524:	e030      	b.n	24588 <spi_data_rsp+0xd0>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
   24526:	230f      	movs	r3, #15
   24528:	18fb      	adds	r3, r7, r3
   2452a:	781b      	ldrb	r3, [r3, #0]
   2452c:	3b01      	subs	r3, #1
   2452e:	2208      	movs	r2, #8
   24530:	18ba      	adds	r2, r7, r2
   24532:	5cd3      	ldrb	r3, [r2, r3]
   24534:	2b00      	cmp	r3, #0
   24536:	d108      	bne.n	2454a <spi_data_rsp+0x92>
   24538:	230f      	movs	r3, #15
   2453a:	18fb      	adds	r3, r7, r3
   2453c:	781b      	ldrb	r3, [r3, #0]
   2453e:	3b02      	subs	r3, #2
   24540:	2208      	movs	r2, #8
   24542:	18ba      	adds	r2, r7, r2
   24544:	5cd3      	ldrb	r3, [r2, r3]
   24546:	2bc3      	cmp	r3, #195	; 0xc3
   24548:	d01e      	beq.n	24588 <spi_data_rsp+0xd0>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
   2454a:	233c      	movs	r3, #60	; 0x3c
   2454c:	33ff      	adds	r3, #255	; 0xff
   2454e:	001a      	movs	r2, r3
   24550:	4913      	ldr	r1, [pc, #76]	; (245a0 <spi_data_rsp+0xe8>)
   24552:	4b14      	ldr	r3, [pc, #80]	; (245a4 <spi_data_rsp+0xec>)
   24554:	0018      	movs	r0, r3
   24556:	4b14      	ldr	r3, [pc, #80]	; (245a8 <spi_data_rsp+0xf0>)
   24558:	4798      	blx	r3
   2455a:	2308      	movs	r3, #8
   2455c:	18fb      	adds	r3, r7, r3
   2455e:	781b      	ldrb	r3, [r3, #0]
   24560:	0019      	movs	r1, r3
   24562:	2308      	movs	r3, #8
   24564:	18fb      	adds	r3, r7, r3
   24566:	785b      	ldrb	r3, [r3, #1]
   24568:	001a      	movs	r2, r3
   2456a:	2308      	movs	r3, #8
   2456c:	18fb      	adds	r3, r7, r3
   2456e:	789b      	ldrb	r3, [r3, #2]
   24570:	4810      	ldr	r0, [pc, #64]	; (245b4 <spi_data_rsp+0xfc>)
   24572:	4c0d      	ldr	r4, [pc, #52]	; (245a8 <spi_data_rsp+0xf0>)
   24574:	47a0      	blx	r4
   24576:	4b0e      	ldr	r3, [pc, #56]	; (245b0 <spi_data_rsp+0xf8>)
   24578:	0018      	movs	r0, r3
   2457a:	4b0b      	ldr	r3, [pc, #44]	; (245a8 <spi_data_rsp+0xf0>)
   2457c:	4798      	blx	r3
		result = N_FAIL;
   2457e:	230e      	movs	r3, #14
   24580:	18fb      	adds	r3, r7, r3
   24582:	2200      	movs	r2, #0
   24584:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   24586:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
   24588:	230e      	movs	r3, #14
   2458a:	18fb      	adds	r3, r7, r3
   2458c:	781b      	ldrb	r3, [r3, #0]
   2458e:	b25b      	sxtb	r3, r3
}
   24590:	0018      	movs	r0, r3
   24592:	46bd      	mov	sp, r7
   24594:	b005      	add	sp, #20
   24596:	bd90      	pop	{r4, r7, pc}
   24598:	20003eec 	.word	0x20003eec
   2459c:	0002402d 	.word	0x0002402d
   245a0:	0003a0e0 	.word	0x0003a0e0
   245a4:	00039ae8 	.word	0x00039ae8
   245a8:	0001eb7d 	.word	0x0001eb7d
   245ac:	00039b2c 	.word	0x00039b2c
   245b0:	00039b28 	.word	0x00039b28
   245b4:	00039b4c 	.word	0x00039b4c

000245b8 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
   245b8:	b580      	push	{r7, lr}
   245ba:	b084      	sub	sp, #16
   245bc:	af00      	add	r7, sp, #0
   245be:	0002      	movs	r2, r0
   245c0:	1dfb      	adds	r3, r7, #7
   245c2:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
   245c4:	230f      	movs	r3, #15
   245c6:	18fb      	adds	r3, r7, r3
   245c8:	2201      	movs	r2, #1
   245ca:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   245cc:	1dfb      	adds	r3, r7, #7
   245ce:	781b      	ldrb	r3, [r3, #0]
   245d0:	2bcf      	cmp	r3, #207	; 0xcf
   245d2:	d007      	beq.n	245e4 <spi_cmd_rsp+0x2c>
   245d4:	1dfb      	adds	r3, r7, #7
   245d6:	781b      	ldrb	r3, [r3, #0]
   245d8:	2bc5      	cmp	r3, #197	; 0xc5
   245da:	d003      	beq.n	245e4 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
   245dc:	1dfb      	adds	r3, r7, #7
   245de:	781b      	ldrb	r3, [r3, #0]
   245e0:	2bc6      	cmp	r3, #198	; 0xc6
   245e2:	d10c      	bne.n	245fe <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   245e4:	230d      	movs	r3, #13
   245e6:	18fb      	adds	r3, r7, r3
   245e8:	2101      	movs	r1, #1
   245ea:	0018      	movs	r0, r3
   245ec:	4b3b      	ldr	r3, [pc, #236]	; (246dc <spi_cmd_rsp+0x124>)
   245ee:	4798      	blx	r3
   245f0:	1e03      	subs	r3, r0, #0
   245f2:	d004      	beq.n	245fe <spi_cmd_rsp+0x46>
			result = N_FAIL;
   245f4:	230f      	movs	r3, #15
   245f6:	18fb      	adds	r3, r7, r3
   245f8:	2200      	movs	r2, #0
   245fa:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   245fc:	e065      	b.n	246ca <spi_cmd_rsp+0x112>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   245fe:	230e      	movs	r3, #14
   24600:	18fb      	adds	r3, r7, r3
   24602:	220a      	movs	r2, #10
   24604:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   24606:	230d      	movs	r3, #13
   24608:	18fb      	adds	r3, r7, r3
   2460a:	2101      	movs	r1, #1
   2460c:	0018      	movs	r0, r3
   2460e:	4b33      	ldr	r3, [pc, #204]	; (246dc <spi_cmd_rsp+0x124>)
   24610:	4798      	blx	r3
   24612:	1e03      	subs	r3, r0, #0
   24614:	d014      	beq.n	24640 <spi_cmd_rsp+0x88>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   24616:	235c      	movs	r3, #92	; 0x5c
   24618:	33ff      	adds	r3, #255	; 0xff
   2461a:	001a      	movs	r2, r3
   2461c:	4930      	ldr	r1, [pc, #192]	; (246e0 <spi_cmd_rsp+0x128>)
   2461e:	4b31      	ldr	r3, [pc, #196]	; (246e4 <spi_cmd_rsp+0x12c>)
   24620:	0018      	movs	r0, r3
   24622:	4b31      	ldr	r3, [pc, #196]	; (246e8 <spi_cmd_rsp+0x130>)
   24624:	4798      	blx	r3
   24626:	4b31      	ldr	r3, [pc, #196]	; (246ec <spi_cmd_rsp+0x134>)
   24628:	0018      	movs	r0, r3
   2462a:	4b2f      	ldr	r3, [pc, #188]	; (246e8 <spi_cmd_rsp+0x130>)
   2462c:	4798      	blx	r3
   2462e:	4b30      	ldr	r3, [pc, #192]	; (246f0 <spi_cmd_rsp+0x138>)
   24630:	0018      	movs	r0, r3
   24632:	4b2d      	ldr	r3, [pc, #180]	; (246e8 <spi_cmd_rsp+0x130>)
   24634:	4798      	blx	r3
			result = N_FAIL;
   24636:	230f      	movs	r3, #15
   24638:	18fb      	adds	r3, r7, r3
   2463a:	2200      	movs	r2, #0
   2463c:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   2463e:	e044      	b.n	246ca <spi_cmd_rsp+0x112>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
   24640:	230d      	movs	r3, #13
   24642:	18fb      	adds	r3, r7, r3
   24644:	781b      	ldrb	r3, [r3, #0]
   24646:	1dfa      	adds	r2, r7, #7
   24648:	7812      	ldrb	r2, [r2, #0]
   2464a:	429a      	cmp	r2, r3
   2464c:	d00b      	beq.n	24666 <spi_cmd_rsp+0xae>
   2464e:	230e      	movs	r3, #14
   24650:	18fb      	adds	r3, r7, r3
   24652:	781b      	ldrb	r3, [r3, #0]
   24654:	b25b      	sxtb	r3, r3
   24656:	b2da      	uxtb	r2, r3
   24658:	3a01      	subs	r2, #1
   2465a:	b2d1      	uxtb	r1, r2
   2465c:	220e      	movs	r2, #14
   2465e:	18ba      	adds	r2, r7, r2
   24660:	7011      	strb	r1, [r2, #0]
   24662:	2b00      	cmp	r3, #0
   24664:	dccf      	bgt.n	24606 <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   24666:	230e      	movs	r3, #14
   24668:	18fb      	adds	r3, r7, r3
   2466a:	220a      	movs	r2, #10
   2466c:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   2466e:	230d      	movs	r3, #13
   24670:	18fb      	adds	r3, r7, r3
   24672:	2101      	movs	r1, #1
   24674:	0018      	movs	r0, r3
   24676:	4b19      	ldr	r3, [pc, #100]	; (246dc <spi_cmd_rsp+0x124>)
   24678:	4798      	blx	r3
   2467a:	1e03      	subs	r3, r0, #0
   2467c:	d014      	beq.n	246a8 <spi_cmd_rsp+0xf0>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   2467e:	236a      	movs	r3, #106	; 0x6a
   24680:	33ff      	adds	r3, #255	; 0xff
   24682:	001a      	movs	r2, r3
   24684:	4916      	ldr	r1, [pc, #88]	; (246e0 <spi_cmd_rsp+0x128>)
   24686:	4b17      	ldr	r3, [pc, #92]	; (246e4 <spi_cmd_rsp+0x12c>)
   24688:	0018      	movs	r0, r3
   2468a:	4b17      	ldr	r3, [pc, #92]	; (246e8 <spi_cmd_rsp+0x130>)
   2468c:	4798      	blx	r3
   2468e:	4b17      	ldr	r3, [pc, #92]	; (246ec <spi_cmd_rsp+0x134>)
   24690:	0018      	movs	r0, r3
   24692:	4b15      	ldr	r3, [pc, #84]	; (246e8 <spi_cmd_rsp+0x130>)
   24694:	4798      	blx	r3
   24696:	4b16      	ldr	r3, [pc, #88]	; (246f0 <spi_cmd_rsp+0x138>)
   24698:	0018      	movs	r0, r3
   2469a:	4b13      	ldr	r3, [pc, #76]	; (246e8 <spi_cmd_rsp+0x130>)
   2469c:	4798      	blx	r3
			result = N_FAIL;
   2469e:	230f      	movs	r3, #15
   246a0:	18fb      	adds	r3, r7, r3
   246a2:	2200      	movs	r2, #0
   246a4:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   246a6:	e010      	b.n	246ca <spi_cmd_rsp+0x112>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
   246a8:	230d      	movs	r3, #13
   246aa:	18fb      	adds	r3, r7, r3
   246ac:	781b      	ldrb	r3, [r3, #0]
   246ae:	2b00      	cmp	r3, #0
   246b0:	d00b      	beq.n	246ca <spi_cmd_rsp+0x112>
   246b2:	230e      	movs	r3, #14
   246b4:	18fb      	adds	r3, r7, r3
   246b6:	781b      	ldrb	r3, [r3, #0]
   246b8:	b25b      	sxtb	r3, r3
   246ba:	b2da      	uxtb	r2, r3
   246bc:	3a01      	subs	r2, #1
   246be:	b2d1      	uxtb	r1, r2
   246c0:	220e      	movs	r2, #14
   246c2:	18ba      	adds	r2, r7, r2
   246c4:	7011      	strb	r1, [r2, #0]
   246c6:	2b00      	cmp	r3, #0
   246c8:	dcd1      	bgt.n	2466e <spi_cmd_rsp+0xb6>

_fail_:

	return result;
   246ca:	230f      	movs	r3, #15
   246cc:	18fb      	adds	r3, r7, r3
   246ce:	781b      	ldrb	r3, [r3, #0]
   246d0:	b25b      	sxtb	r3, r3
}
   246d2:	0018      	movs	r0, r3
   246d4:	46bd      	mov	sp, r7
   246d6:	b004      	add	sp, #16
   246d8:	bd80      	pop	{r7, pc}
   246da:	46c0      	nop			; (mov r8, r8)
   246dc:	0002402d 	.word	0x0002402d
   246e0:	0003a0f0 	.word	0x0003a0f0
   246e4:	00039ae8 	.word	0x00039ae8
   246e8:	0001eb7d 	.word	0x0001eb7d
   246ec:	00039b7c 	.word	0x00039b7c
   246f0:	00039b28 	.word	0x00039b28

000246f4 <spi_cmd_complete>:
#ifndef USE_OLD_SPI_SW
static int spi_cmd_complete(uint8_t cmd, uint32_t adr, uint8_t *b, uint32_t sz, uint8_t clockless)
{
   246f4:	b590      	push	{r4, r7, lr}
   246f6:	b09f      	sub	sp, #124	; 0x7c
   246f8:	af00      	add	r7, sp, #0
   246fa:	60b9      	str	r1, [r7, #8]
   246fc:	607a      	str	r2, [r7, #4]
   246fe:	603b      	str	r3, [r7, #0]
   24700:	230f      	movs	r3, #15
   24702:	18fb      	adds	r3, r7, r3
   24704:	1c02      	adds	r2, r0, #0
   24706:	701a      	strb	r2, [r3, #0]
	uint8_t wb[32], rb[32];
	uint8_t wix, rix;
	uint32_t len2;
	uint8_t rsp;
	int len = 0;
   24708:	2300      	movs	r3, #0
   2470a:	66fb      	str	r3, [r7, #108]	; 0x6c
	int result = N_OK;
   2470c:	2301      	movs	r3, #1
   2470e:	66bb      	str	r3, [r7, #104]	; 0x68

	wb[0] = cmd;
   24710:	2338      	movs	r3, #56	; 0x38
   24712:	18fb      	adds	r3, r7, r3
   24714:	220f      	movs	r2, #15
   24716:	18ba      	adds	r2, r7, r2
   24718:	7812      	ldrb	r2, [r2, #0]
   2471a:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   2471c:	230f      	movs	r3, #15
   2471e:	18fb      	adds	r3, r7, r3
   24720:	781b      	ldrb	r3, [r3, #0]
   24722:	3bc1      	subs	r3, #193	; 0xc1
   24724:	2b0e      	cmp	r3, #14
   24726:	d900      	bls.n	2472a <spi_cmd_complete+0x36>
   24728:	e103      	b.n	24932 <spi_cmd_complete+0x23e>
   2472a:	009a      	lsls	r2, r3, #2
   2472c:	4bd1      	ldr	r3, [pc, #836]	; (24a74 <spi_cmd_complete+0x380>)
   2472e:	18d3      	adds	r3, r2, r3
   24730:	681b      	ldr	r3, [r3, #0]
   24732:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		wb[1] = (uint8_t)(adr >> 16);
   24734:	68bb      	ldr	r3, [r7, #8]
   24736:	0c1b      	lsrs	r3, r3, #16
   24738:	b2da      	uxtb	r2, r3
   2473a:	2338      	movs	r3, #56	; 0x38
   2473c:	18fb      	adds	r3, r7, r3
   2473e:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   24740:	68bb      	ldr	r3, [r7, #8]
   24742:	0a1b      	lsrs	r3, r3, #8
   24744:	b2da      	uxtb	r2, r3
   24746:	2338      	movs	r3, #56	; 0x38
   24748:	18fb      	adds	r3, r7, r3
   2474a:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   2474c:	68bb      	ldr	r3, [r7, #8]
   2474e:	b2da      	uxtb	r2, r3
   24750:	2338      	movs	r3, #56	; 0x38
   24752:	18fb      	adds	r3, r7, r3
   24754:	70da      	strb	r2, [r3, #3]
		len = 5;
   24756:	2305      	movs	r3, #5
   24758:	66fb      	str	r3, [r7, #108]	; 0x6c
		break; 
   2475a:	e0ed      	b.n	24938 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_READ:			/* internal register read */ 
		wb[1] = (uint8_t)(adr >> 8);
   2475c:	68bb      	ldr	r3, [r7, #8]
   2475e:	0a1b      	lsrs	r3, r3, #8
   24760:	b2da      	uxtb	r2, r3
   24762:	2338      	movs	r3, #56	; 0x38
   24764:	18fb      	adds	r3, r7, r3
   24766:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   24768:	2388      	movs	r3, #136	; 0x88
   2476a:	18fb      	adds	r3, r7, r3
   2476c:	781b      	ldrb	r3, [r3, #0]
   2476e:	2b01      	cmp	r3, #1
   24770:	d109      	bne.n	24786 <spi_cmd_complete+0x92>
   24772:	2338      	movs	r3, #56	; 0x38
   24774:	18fb      	adds	r3, r7, r3
   24776:	785b      	ldrb	r3, [r3, #1]
   24778:	2280      	movs	r2, #128	; 0x80
   2477a:	4252      	negs	r2, r2
   2477c:	4313      	orrs	r3, r2
   2477e:	b2da      	uxtb	r2, r3
   24780:	2338      	movs	r3, #56	; 0x38
   24782:	18fb      	adds	r3, r7, r3
   24784:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)adr;
   24786:	68bb      	ldr	r3, [r7, #8]
   24788:	b2da      	uxtb	r2, r3
   2478a:	2338      	movs	r3, #56	; 0x38
   2478c:	18fb      	adds	r3, r7, r3
   2478e:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   24790:	2338      	movs	r3, #56	; 0x38
   24792:	18fb      	adds	r3, r7, r3
   24794:	2200      	movs	r2, #0
   24796:	70da      	strb	r2, [r3, #3]
		len = 5;
   24798:	2305      	movs	r3, #5
   2479a:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   2479c:	e0cc      	b.n	24938 <spi_cmd_complete+0x244>
	case CMD_TERMINATE:					/* termination */
		wb[1] = 0x00;
   2479e:	2338      	movs	r3, #56	; 0x38
   247a0:	18fb      	adds	r3, r7, r3
   247a2:	2200      	movs	r2, #0
   247a4:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   247a6:	2338      	movs	r3, #56	; 0x38
   247a8:	18fb      	adds	r3, r7, r3
   247aa:	2200      	movs	r2, #0
   247ac:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   247ae:	2338      	movs	r3, #56	; 0x38
   247b0:	18fb      	adds	r3, r7, r3
   247b2:	2200      	movs	r2, #0
   247b4:	70da      	strb	r2, [r3, #3]
		len = 5;
   247b6:	2305      	movs	r3, #5
   247b8:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   247ba:	e0bd      	b.n	24938 <spi_cmd_complete+0x244>
	case CMD_REPEAT:						/* repeat */
		wb[1] = 0x00;
   247bc:	2338      	movs	r3, #56	; 0x38
   247be:	18fb      	adds	r3, r7, r3
   247c0:	2200      	movs	r2, #0
   247c2:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   247c4:	2338      	movs	r3, #56	; 0x38
   247c6:	18fb      	adds	r3, r7, r3
   247c8:	2200      	movs	r2, #0
   247ca:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   247cc:	2338      	movs	r3, #56	; 0x38
   247ce:	18fb      	adds	r3, r7, r3
   247d0:	2200      	movs	r2, #0
   247d2:	70da      	strb	r2, [r3, #3]
		len = 5;
   247d4:	2305      	movs	r3, #5
   247d6:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   247d8:	e0ae      	b.n	24938 <spi_cmd_complete+0x244>
	case CMD_RESET:							/* reset */
		wb[1] = 0xff;
   247da:	2338      	movs	r3, #56	; 0x38
   247dc:	18fb      	adds	r3, r7, r3
   247de:	22ff      	movs	r2, #255	; 0xff
   247e0:	705a      	strb	r2, [r3, #1]
		wb[2] = 0xff;
   247e2:	2338      	movs	r3, #56	; 0x38
   247e4:	18fb      	adds	r3, r7, r3
   247e6:	22ff      	movs	r2, #255	; 0xff
   247e8:	709a      	strb	r2, [r3, #2]
		wb[3] = 0xff;
   247ea:	2338      	movs	r3, #56	; 0x38
   247ec:	18fb      	adds	r3, r7, r3
   247ee:	22ff      	movs	r2, #255	; 0xff
   247f0:	70da      	strb	r2, [r3, #3]
		len = 5;
   247f2:	2305      	movs	r3, #5
   247f4:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   247f6:	e09f      	b.n	24938 <spi_cmd_complete+0x244>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		wb[1] = (uint8_t)(adr >> 16);
   247f8:	68bb      	ldr	r3, [r7, #8]
   247fa:	0c1b      	lsrs	r3, r3, #16
   247fc:	b2da      	uxtb	r2, r3
   247fe:	2338      	movs	r3, #56	; 0x38
   24800:	18fb      	adds	r3, r7, r3
   24802:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   24804:	68bb      	ldr	r3, [r7, #8]
   24806:	0a1b      	lsrs	r3, r3, #8
   24808:	b2da      	uxtb	r2, r3
   2480a:	2338      	movs	r3, #56	; 0x38
   2480c:	18fb      	adds	r3, r7, r3
   2480e:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   24810:	68bb      	ldr	r3, [r7, #8]
   24812:	b2da      	uxtb	r2, r3
   24814:	2338      	movs	r3, #56	; 0x38
   24816:	18fb      	adds	r3, r7, r3
   24818:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 8);
   2481a:	683b      	ldr	r3, [r7, #0]
   2481c:	0a1b      	lsrs	r3, r3, #8
   2481e:	b2da      	uxtb	r2, r3
   24820:	2338      	movs	r3, #56	; 0x38
   24822:	18fb      	adds	r3, r7, r3
   24824:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz);
   24826:	683b      	ldr	r3, [r7, #0]
   24828:	b2da      	uxtb	r2, r3
   2482a:	2338      	movs	r3, #56	; 0x38
   2482c:	18fb      	adds	r3, r7, r3
   2482e:	715a      	strb	r2, [r3, #5]
		len = 7;
   24830:	2307      	movs	r3, #7
   24832:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   24834:	e080      	b.n	24938 <spi_cmd_complete+0x244>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		wb[1] = (uint8_t)(adr >> 16);
   24836:	68bb      	ldr	r3, [r7, #8]
   24838:	0c1b      	lsrs	r3, r3, #16
   2483a:	b2da      	uxtb	r2, r3
   2483c:	2338      	movs	r3, #56	; 0x38
   2483e:	18fb      	adds	r3, r7, r3
   24840:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   24842:	68bb      	ldr	r3, [r7, #8]
   24844:	0a1b      	lsrs	r3, r3, #8
   24846:	b2da      	uxtb	r2, r3
   24848:	2338      	movs	r3, #56	; 0x38
   2484a:	18fb      	adds	r3, r7, r3
   2484c:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   2484e:	68bb      	ldr	r3, [r7, #8]
   24850:	b2da      	uxtb	r2, r3
   24852:	2338      	movs	r3, #56	; 0x38
   24854:	18fb      	adds	r3, r7, r3
   24856:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 16);
   24858:	683b      	ldr	r3, [r7, #0]
   2485a:	0c1b      	lsrs	r3, r3, #16
   2485c:	b2da      	uxtb	r2, r3
   2485e:	2338      	movs	r3, #56	; 0x38
   24860:	18fb      	adds	r3, r7, r3
   24862:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz >> 8);
   24864:	683b      	ldr	r3, [r7, #0]
   24866:	0a1b      	lsrs	r3, r3, #8
   24868:	b2da      	uxtb	r2, r3
   2486a:	2338      	movs	r3, #56	; 0x38
   2486c:	18fb      	adds	r3, r7, r3
   2486e:	715a      	strb	r2, [r3, #5]
		wb[6] = (uint8_t)(sz);
   24870:	683b      	ldr	r3, [r7, #0]
   24872:	b2da      	uxtb	r2, r3
   24874:	2338      	movs	r3, #56	; 0x38
   24876:	18fb      	adds	r3, r7, r3
   24878:	719a      	strb	r2, [r3, #6]
		len = 8;
   2487a:	2308      	movs	r3, #8
   2487c:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   2487e:	e05b      	b.n	24938 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		wb[1] = (uint8_t)(adr >> 8);
   24880:	68bb      	ldr	r3, [r7, #8]
   24882:	0a1b      	lsrs	r3, r3, #8
   24884:	b2da      	uxtb	r2, r3
   24886:	2338      	movs	r3, #56	; 0x38
   24888:	18fb      	adds	r3, r7, r3
   2488a:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   2488c:	2388      	movs	r3, #136	; 0x88
   2488e:	18fb      	adds	r3, r7, r3
   24890:	781b      	ldrb	r3, [r3, #0]
   24892:	2b01      	cmp	r3, #1
   24894:	d109      	bne.n	248aa <spi_cmd_complete+0x1b6>
   24896:	2338      	movs	r3, #56	; 0x38
   24898:	18fb      	adds	r3, r7, r3
   2489a:	785b      	ldrb	r3, [r3, #1]
   2489c:	2280      	movs	r2, #128	; 0x80
   2489e:	4252      	negs	r2, r2
   248a0:	4313      	orrs	r3, r2
   248a2:	b2da      	uxtb	r2, r3
   248a4:	2338      	movs	r3, #56	; 0x38
   248a6:	18fb      	adds	r3, r7, r3
   248a8:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr);
   248aa:	68bb      	ldr	r3, [r7, #8]
   248ac:	b2da      	uxtb	r2, r3
   248ae:	2338      	movs	r3, #56	; 0x38
   248b0:	18fb      	adds	r3, r7, r3
   248b2:	709a      	strb	r2, [r3, #2]
		wb[3] = b[3];
   248b4:	687b      	ldr	r3, [r7, #4]
   248b6:	78da      	ldrb	r2, [r3, #3]
   248b8:	2338      	movs	r3, #56	; 0x38
   248ba:	18fb      	adds	r3, r7, r3
   248bc:	70da      	strb	r2, [r3, #3]
		wb[4] = b[2];
   248be:	687b      	ldr	r3, [r7, #4]
   248c0:	789a      	ldrb	r2, [r3, #2]
   248c2:	2338      	movs	r3, #56	; 0x38
   248c4:	18fb      	adds	r3, r7, r3
   248c6:	711a      	strb	r2, [r3, #4]
		wb[5] = b[1];
   248c8:	687b      	ldr	r3, [r7, #4]
   248ca:	785a      	ldrb	r2, [r3, #1]
   248cc:	2338      	movs	r3, #56	; 0x38
   248ce:	18fb      	adds	r3, r7, r3
   248d0:	715a      	strb	r2, [r3, #5]
		wb[6] = b[0];
   248d2:	687b      	ldr	r3, [r7, #4]
   248d4:	781a      	ldrb	r2, [r3, #0]
   248d6:	2338      	movs	r3, #56	; 0x38
   248d8:	18fb      	adds	r3, r7, r3
   248da:	719a      	strb	r2, [r3, #6]
		len = 8;
   248dc:	2308      	movs	r3, #8
   248de:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   248e0:	e02a      	b.n	24938 <spi_cmd_complete+0x244>
	case CMD_SINGLE_WRITE:			/* single word write */
		wb[1] = (uint8_t)(adr >> 16);
   248e2:	68bb      	ldr	r3, [r7, #8]
   248e4:	0c1b      	lsrs	r3, r3, #16
   248e6:	b2da      	uxtb	r2, r3
   248e8:	2338      	movs	r3, #56	; 0x38
   248ea:	18fb      	adds	r3, r7, r3
   248ec:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   248ee:	68bb      	ldr	r3, [r7, #8]
   248f0:	0a1b      	lsrs	r3, r3, #8
   248f2:	b2da      	uxtb	r2, r3
   248f4:	2338      	movs	r3, #56	; 0x38
   248f6:	18fb      	adds	r3, r7, r3
   248f8:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)(adr);
   248fa:	68bb      	ldr	r3, [r7, #8]
   248fc:	b2da      	uxtb	r2, r3
   248fe:	2338      	movs	r3, #56	; 0x38
   24900:	18fb      	adds	r3, r7, r3
   24902:	70da      	strb	r2, [r3, #3]
		wb[4] = b[3];
   24904:	687b      	ldr	r3, [r7, #4]
   24906:	78da      	ldrb	r2, [r3, #3]
   24908:	2338      	movs	r3, #56	; 0x38
   2490a:	18fb      	adds	r3, r7, r3
   2490c:	711a      	strb	r2, [r3, #4]
		wb[5] = b[2];
   2490e:	687b      	ldr	r3, [r7, #4]
   24910:	789a      	ldrb	r2, [r3, #2]
   24912:	2338      	movs	r3, #56	; 0x38
   24914:	18fb      	adds	r3, r7, r3
   24916:	715a      	strb	r2, [r3, #5]
		wb[6] = b[1];
   24918:	687b      	ldr	r3, [r7, #4]
   2491a:	785a      	ldrb	r2, [r3, #1]
   2491c:	2338      	movs	r3, #56	; 0x38
   2491e:	18fb      	adds	r3, r7, r3
   24920:	719a      	strb	r2, [r3, #6]
		wb[7] = b[0];
   24922:	687b      	ldr	r3, [r7, #4]
   24924:	781a      	ldrb	r2, [r3, #0]
   24926:	2338      	movs	r3, #56	; 0x38
   24928:	18fb      	adds	r3, r7, r3
   2492a:	71da      	strb	r2, [r3, #7]
		len = 9;
   2492c:	2309      	movs	r3, #9
   2492e:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   24930:	e002      	b.n	24938 <spi_cmd_complete+0x244>
	default:
		result = N_FAIL;
   24932:	2300      	movs	r3, #0
   24934:	66bb      	str	r3, [r7, #104]	; 0x68
		break;
   24936:	46c0      	nop			; (mov r8, r8)
	}

	if (result != N_OK) {
   24938:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2493a:	2b01      	cmp	r3, #1
   2493c:	d001      	beq.n	24942 <spi_cmd_complete+0x24e>
		return result;
   2493e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24940:	e33a      	b.n	24fb8 <spi_cmd_complete+0x8c4>
	}

	if (!gu8Crc_off) {
   24942:	4b4d      	ldr	r3, [pc, #308]	; (24a78 <spi_cmd_complete+0x384>)
   24944:	781b      	ldrb	r3, [r3, #0]
   24946:	2b00      	cmp	r3, #0
   24948:	d111      	bne.n	2496e <spi_cmd_complete+0x27a>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
   2494a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2494c:	1e5c      	subs	r4, r3, #1
   2494e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   24950:	3b01      	subs	r3, #1
   24952:	001a      	movs	r2, r3
   24954:	2338      	movs	r3, #56	; 0x38
   24956:	18fb      	adds	r3, r7, r3
   24958:	0019      	movs	r1, r3
   2495a:	207f      	movs	r0, #127	; 0x7f
   2495c:	4b47      	ldr	r3, [pc, #284]	; (24a7c <spi_cmd_complete+0x388>)
   2495e:	4798      	blx	r3
   24960:	0003      	movs	r3, r0
   24962:	18db      	adds	r3, r3, r3
   24964:	b2da      	uxtb	r2, r3
   24966:	2338      	movs	r3, #56	; 0x38
   24968:	18fb      	adds	r3, r7, r3
   2496a:	551a      	strb	r2, [r3, r4]
   2496c:	e002      	b.n	24974 <spi_cmd_complete+0x280>
	} else {
		len -=1;
   2496e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   24970:	3b01      	subs	r3, #1
   24972:	66fb      	str	r3, [r7, #108]	; 0x6c
#define NUM_DATA_HDR_BYTES (1)
#define NUM_DATA_BYTES (4)
#define NUM_CRC_BYTES (2)
#define NUM_DUMMY_BYTES (3)

	if ((cmd == CMD_RESET) ||
   24974:	230f      	movs	r3, #15
   24976:	18fb      	adds	r3, r7, r3
   24978:	781b      	ldrb	r3, [r3, #0]
   2497a:	2bcf      	cmp	r3, #207	; 0xcf
   2497c:	d009      	beq.n	24992 <spi_cmd_complete+0x29e>
   2497e:	230f      	movs	r3, #15
   24980:	18fb      	adds	r3, r7, r3
   24982:	781b      	ldrb	r3, [r3, #0]
   24984:	2bc5      	cmp	r3, #197	; 0xc5
   24986:	d004      	beq.n	24992 <spi_cmd_complete+0x29e>
		(cmd == CMD_TERMINATE) ||
   24988:	230f      	movs	r3, #15
   2498a:	18fb      	adds	r3, r7, r3
   2498c:	781b      	ldrb	r3, [r3, #0]
   2498e:	2bc6      	cmp	r3, #198	; 0xc6
   24990:	d103      	bne.n	2499a <spi_cmd_complete+0x2a6>
		(cmd == CMD_REPEAT)) {
			len2 = len + (NUM_SKIP_BYTES + NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   24992:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   24994:	3306      	adds	r3, #6
   24996:	673b      	str	r3, [r7, #112]	; 0x70
   24998:	e018      	b.n	249cc <spi_cmd_complete+0x2d8>
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   2499a:	230f      	movs	r3, #15
   2499c:	18fb      	adds	r3, r7, r3
   2499e:	781b      	ldrb	r3, [r3, #0]
   249a0:	2bc4      	cmp	r3, #196	; 0xc4
   249a2:	d004      	beq.n	249ae <spi_cmd_complete+0x2ba>
   249a4:	230f      	movs	r3, #15
   249a6:	18fb      	adds	r3, r7, r3
   249a8:	781b      	ldrb	r3, [r3, #0]
   249aa:	2bca      	cmp	r3, #202	; 0xca
   249ac:	d10b      	bne.n	249c6 <spi_cmd_complete+0x2d2>
		if (!gu8Crc_off) {
   249ae:	4b32      	ldr	r3, [pc, #200]	; (24a78 <spi_cmd_complete+0x384>)
   249b0:	781b      	ldrb	r3, [r3, #0]
   249b2:	2b00      	cmp	r3, #0
   249b4:	d103      	bne.n	249be <spi_cmd_complete+0x2ca>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   249b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   249b8:	330c      	adds	r3, #12
   249ba:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   249bc:	e006      	b.n	249cc <spi_cmd_complete+0x2d8>
			+ NUM_CRC_BYTES + NUM_DUMMY_BYTES);	
		} else {
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   249be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   249c0:	330a      	adds	r3, #10
   249c2:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   249c4:	e002      	b.n	249cc <spi_cmd_complete+0x2d8>
			+ NUM_DUMMY_BYTES);
		}
	} else {
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   249c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   249c8:	3305      	adds	r3, #5
   249ca:	673b      	str	r3, [r7, #112]	; 0x70
	}
#undef NUM_DUMMY_BYTES

	if(len2 > (sizeof(wb)/sizeof(wb[0]))) {
   249cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   249ce:	2b20      	cmp	r3, #32
   249d0:	d914      	bls.n	249fc <spi_cmd_complete+0x308>
		M2M_ERR("[nmi spi]: spi buffer size too small (%d) (%d)\n",
   249d2:	23f7      	movs	r3, #247	; 0xf7
   249d4:	005a      	lsls	r2, r3, #1
   249d6:	492a      	ldr	r1, [pc, #168]	; (24a80 <spi_cmd_complete+0x38c>)
   249d8:	4b2a      	ldr	r3, [pc, #168]	; (24a84 <spi_cmd_complete+0x390>)
   249da:	0018      	movs	r0, r3
   249dc:	4b2a      	ldr	r3, [pc, #168]	; (24a88 <spi_cmd_complete+0x394>)
   249de:	4798      	blx	r3
   249e0:	6f39      	ldr	r1, [r7, #112]	; 0x70
   249e2:	4b2a      	ldr	r3, [pc, #168]	; (24a8c <spi_cmd_complete+0x398>)
   249e4:	2220      	movs	r2, #32
   249e6:	0018      	movs	r0, r3
   249e8:	4b27      	ldr	r3, [pc, #156]	; (24a88 <spi_cmd_complete+0x394>)
   249ea:	4798      	blx	r3
   249ec:	4b28      	ldr	r3, [pc, #160]	; (24a90 <spi_cmd_complete+0x39c>)
   249ee:	0018      	movs	r0, r3
   249f0:	4b25      	ldr	r3, [pc, #148]	; (24a88 <spi_cmd_complete+0x394>)
   249f2:	4798      	blx	r3
			len2, (sizeof(wb)/sizeof(wb[0])));
		result = N_FAIL;
   249f4:	2300      	movs	r3, #0
   249f6:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   249f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   249fa:	e2dd      	b.n	24fb8 <spi_cmd_complete+0x8c4>
	}
	/* zero spi write buffers. */
	for(wix = len; wix< len2; wix++) {
   249fc:	2377      	movs	r3, #119	; 0x77
   249fe:	18fb      	adds	r3, r7, r3
   24a00:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   24a02:	701a      	strb	r2, [r3, #0]
   24a04:	e00d      	b.n	24a22 <spi_cmd_complete+0x32e>
		wb[wix] = 0;
   24a06:	2377      	movs	r3, #119	; 0x77
   24a08:	18fb      	adds	r3, r7, r3
   24a0a:	781b      	ldrb	r3, [r3, #0]
   24a0c:	2238      	movs	r2, #56	; 0x38
   24a0e:	18ba      	adds	r2, r7, r2
   24a10:	2100      	movs	r1, #0
   24a12:	54d1      	strb	r1, [r2, r3]
	for(wix = len; wix< len2; wix++) {
   24a14:	2377      	movs	r3, #119	; 0x77
   24a16:	18fb      	adds	r3, r7, r3
   24a18:	781a      	ldrb	r2, [r3, #0]
   24a1a:	2377      	movs	r3, #119	; 0x77
   24a1c:	18fb      	adds	r3, r7, r3
   24a1e:	3201      	adds	r2, #1
   24a20:	701a      	strb	r2, [r3, #0]
   24a22:	2377      	movs	r3, #119	; 0x77
   24a24:	18fb      	adds	r3, r7, r3
   24a26:	781a      	ldrb	r2, [r3, #0]
   24a28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24a2a:	429a      	cmp	r2, r3
   24a2c:	d3eb      	bcc.n	24a06 <spi_cmd_complete+0x312>
	}
	rix = len;
   24a2e:	2376      	movs	r3, #118	; 0x76
   24a30:	18fb      	adds	r3, r7, r3
   24a32:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   24a34:	701a      	strb	r2, [r3, #0]

	if (nmi_spi_rw(wb, rb, len2) != M2M_SUCCESS) {
   24a36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24a38:	b29a      	uxth	r2, r3
   24a3a:	2318      	movs	r3, #24
   24a3c:	18f9      	adds	r1, r7, r3
   24a3e:	2338      	movs	r3, #56	; 0x38
   24a40:	18fb      	adds	r3, r7, r3
   24a42:	0018      	movs	r0, r3
   24a44:	4b13      	ldr	r3, [pc, #76]	; (24a94 <spi_cmd_complete+0x3a0>)
   24a46:	4798      	blx	r3
   24a48:	1e03      	subs	r3, r0, #0
   24a4a:	d027      	beq.n	24a9c <spi_cmd_complete+0x3a8>
		M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   24a4c:	23fa      	movs	r3, #250	; 0xfa
   24a4e:	33ff      	adds	r3, #255	; 0xff
   24a50:	001a      	movs	r2, r3
   24a52:	490b      	ldr	r1, [pc, #44]	; (24a80 <spi_cmd_complete+0x38c>)
   24a54:	4b0b      	ldr	r3, [pc, #44]	; (24a84 <spi_cmd_complete+0x390>)
   24a56:	0018      	movs	r0, r3
   24a58:	4b0b      	ldr	r3, [pc, #44]	; (24a88 <spi_cmd_complete+0x394>)
   24a5a:	4798      	blx	r3
   24a5c:	4b0e      	ldr	r3, [pc, #56]	; (24a98 <spi_cmd_complete+0x3a4>)
   24a5e:	0018      	movs	r0, r3
   24a60:	4b09      	ldr	r3, [pc, #36]	; (24a88 <spi_cmd_complete+0x394>)
   24a62:	4798      	blx	r3
   24a64:	4b0a      	ldr	r3, [pc, #40]	; (24a90 <spi_cmd_complete+0x39c>)
   24a66:	0018      	movs	r0, r3
   24a68:	4b07      	ldr	r3, [pc, #28]	; (24a88 <spi_cmd_complete+0x394>)
   24a6a:	4798      	blx	r3
		result = N_FAIL;
   24a6c:	2300      	movs	r3, #0
   24a6e:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   24a70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24a72:	e2a1      	b.n	24fb8 <spi_cmd_complete+0x8c4>
   24a74:	0003a09c 	.word	0x0003a09c
   24a78:	20003eec 	.word	0x20003eec
   24a7c:	00024129 	.word	0x00024129
   24a80:	0003a0fc 	.word	0x0003a0fc
   24a84:	00039ae8 	.word	0x00039ae8
   24a88:	0001eb7d 	.word	0x0001eb7d
   24a8c:	00039bb0 	.word	0x00039bb0
   24a90:	00039b28 	.word	0x00039b28
   24a94:	000240b5 	.word	0x000240b5
   24a98:	00039afc 	.word	0x00039afc
#endif

	/**
	Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   24a9c:	230f      	movs	r3, #15
   24a9e:	18fb      	adds	r3, r7, r3
   24aa0:	781b      	ldrb	r3, [r3, #0]
   24aa2:	2bcf      	cmp	r3, #207	; 0xcf
   24aa4:	d009      	beq.n	24aba <spi_cmd_complete+0x3c6>
   24aa6:	230f      	movs	r3, #15
   24aa8:	18fb      	adds	r3, r7, r3
   24aaa:	781b      	ldrb	r3, [r3, #0]
   24aac:	2bc5      	cmp	r3, #197	; 0xc5
   24aae:	d004      	beq.n	24aba <spi_cmd_complete+0x3c6>
		(cmd == CMD_TERMINATE) ||
   24ab0:	230f      	movs	r3, #15
   24ab2:	18fb      	adds	r3, r7, r3
   24ab4:	781b      	ldrb	r3, [r3, #0]
   24ab6:	2bc6      	cmp	r3, #198	; 0xc6
   24ab8:	d106      	bne.n	24ac8 <spi_cmd_complete+0x3d4>
		(cmd == CMD_REPEAT)) {
			rix++; /* skip 1 byte */
   24aba:	2376      	movs	r3, #118	; 0x76
   24abc:	18fb      	adds	r3, r7, r3
   24abe:	781a      	ldrb	r2, [r3, #0]
   24ac0:	2376      	movs	r3, #118	; 0x76
   24ac2:	18fb      	adds	r3, r7, r3
   24ac4:	3201      	adds	r2, #1
   24ac6:	701a      	strb	r2, [r3, #0]
	}

	rsp = rb[rix++];
   24ac8:	2376      	movs	r3, #118	; 0x76
   24aca:	18fb      	adds	r3, r7, r3
   24acc:	781b      	ldrb	r3, [r3, #0]
   24ace:	2276      	movs	r2, #118	; 0x76
   24ad0:	18ba      	adds	r2, r7, r2
   24ad2:	1c59      	adds	r1, r3, #1
   24ad4:	7011      	strb	r1, [r2, #0]
   24ad6:	001a      	movs	r2, r3
   24ad8:	2318      	movs	r3, #24
   24ada:	18fb      	adds	r3, r7, r3
   24adc:	5c9a      	ldrb	r2, [r3, r2]
   24ade:	2317      	movs	r3, #23
   24ae0:	18fb      	adds	r3, r7, r3
   24ae2:	701a      	strb	r2, [r3, #0]


	if (rsp != cmd) {
   24ae4:	2317      	movs	r3, #23
   24ae6:	18fb      	adds	r3, r7, r3
   24ae8:	781b      	ldrb	r3, [r3, #0]
   24aea:	220f      	movs	r2, #15
   24aec:	18ba      	adds	r2, r7, r2
   24aee:	7812      	ldrb	r2, [r2, #0]
   24af0:	429a      	cmp	r2, r3
   24af2:	d018      	beq.n	24b26 <spi_cmd_complete+0x432>
		M2M_ERR("[nmi spi]: Failed cmd response, cmd (%02x), resp (%02x)\n", cmd, rsp);
   24af4:	4add      	ldr	r2, [pc, #884]	; (24e6c <spi_cmd_complete+0x778>)
   24af6:	49de      	ldr	r1, [pc, #888]	; (24e70 <spi_cmd_complete+0x77c>)
   24af8:	4bde      	ldr	r3, [pc, #888]	; (24e74 <spi_cmd_complete+0x780>)
   24afa:	0018      	movs	r0, r3
   24afc:	4bde      	ldr	r3, [pc, #888]	; (24e78 <spi_cmd_complete+0x784>)
   24afe:	4798      	blx	r3
   24b00:	230f      	movs	r3, #15
   24b02:	18fb      	adds	r3, r7, r3
   24b04:	7819      	ldrb	r1, [r3, #0]
   24b06:	2317      	movs	r3, #23
   24b08:	18fb      	adds	r3, r7, r3
   24b0a:	781b      	ldrb	r3, [r3, #0]
   24b0c:	001a      	movs	r2, r3
   24b0e:	4bdb      	ldr	r3, [pc, #876]	; (24e7c <spi_cmd_complete+0x788>)
   24b10:	0018      	movs	r0, r3
   24b12:	4bd9      	ldr	r3, [pc, #868]	; (24e78 <spi_cmd_complete+0x784>)
   24b14:	4798      	blx	r3
   24b16:	4bda      	ldr	r3, [pc, #872]	; (24e80 <spi_cmd_complete+0x78c>)
   24b18:	0018      	movs	r0, r3
   24b1a:	4bd7      	ldr	r3, [pc, #860]	; (24e78 <spi_cmd_complete+0x784>)
   24b1c:	4798      	blx	r3
		result = N_FAIL;
   24b1e:	2300      	movs	r3, #0
   24b20:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   24b22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24b24:	e248      	b.n	24fb8 <spi_cmd_complete+0x8c4>
	}

	/**
	State response
	**/
	rsp = rb[rix++];
   24b26:	2376      	movs	r3, #118	; 0x76
   24b28:	18fb      	adds	r3, r7, r3
   24b2a:	781b      	ldrb	r3, [r3, #0]
   24b2c:	2276      	movs	r2, #118	; 0x76
   24b2e:	18ba      	adds	r2, r7, r2
   24b30:	1c59      	adds	r1, r3, #1
   24b32:	7011      	strb	r1, [r2, #0]
   24b34:	001a      	movs	r2, r3
   24b36:	2318      	movs	r3, #24
   24b38:	18fb      	adds	r3, r7, r3
   24b3a:	5c9a      	ldrb	r2, [r3, r2]
   24b3c:	2317      	movs	r3, #23
   24b3e:	18fb      	adds	r3, r7, r3
   24b40:	701a      	strb	r2, [r3, #0]
	if (rsp != 0x00) {
   24b42:	2317      	movs	r3, #23
   24b44:	18fb      	adds	r3, r7, r3
   24b46:	781b      	ldrb	r3, [r3, #0]
   24b48:	2b00      	cmp	r3, #0
   24b4a:	d016      	beq.n	24b7a <spi_cmd_complete+0x486>
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
   24b4c:	4acd      	ldr	r2, [pc, #820]	; (24e84 <spi_cmd_complete+0x790>)
   24b4e:	49c8      	ldr	r1, [pc, #800]	; (24e70 <spi_cmd_complete+0x77c>)
   24b50:	4bc8      	ldr	r3, [pc, #800]	; (24e74 <spi_cmd_complete+0x780>)
   24b52:	0018      	movs	r0, r3
   24b54:	4bc8      	ldr	r3, [pc, #800]	; (24e78 <spi_cmd_complete+0x784>)
   24b56:	4798      	blx	r3
   24b58:	2317      	movs	r3, #23
   24b5a:	18fb      	adds	r3, r7, r3
   24b5c:	781b      	ldrb	r3, [r3, #0]
   24b5e:	001a      	movs	r2, r3
   24b60:	4bc9      	ldr	r3, [pc, #804]	; (24e88 <spi_cmd_complete+0x794>)
   24b62:	0011      	movs	r1, r2
   24b64:	0018      	movs	r0, r3
   24b66:	4bc4      	ldr	r3, [pc, #784]	; (24e78 <spi_cmd_complete+0x784>)
   24b68:	4798      	blx	r3
   24b6a:	4bc5      	ldr	r3, [pc, #788]	; (24e80 <spi_cmd_complete+0x78c>)
   24b6c:	0018      	movs	r0, r3
   24b6e:	4bc2      	ldr	r3, [pc, #776]	; (24e78 <spi_cmd_complete+0x784>)
   24b70:	4798      	blx	r3
		result = N_FAIL;
   24b72:	2300      	movs	r3, #0
   24b74:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   24b76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24b78:	e21e      	b.n	24fb8 <spi_cmd_complete+0x8c4>
	}

	if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)
   24b7a:	230f      	movs	r3, #15
   24b7c:	18fb      	adds	r3, r7, r3
   24b7e:	781b      	ldrb	r3, [r3, #0]
   24b80:	2bc4      	cmp	r3, #196	; 0xc4
   24b82:	d00f      	beq.n	24ba4 <spi_cmd_complete+0x4b0>
   24b84:	230f      	movs	r3, #15
   24b86:	18fb      	adds	r3, r7, r3
   24b88:	781b      	ldrb	r3, [r3, #0]
   24b8a:	2bca      	cmp	r3, #202	; 0xca
   24b8c:	d00a      	beq.n	24ba4 <spi_cmd_complete+0x4b0>
		|| (cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   24b8e:	230f      	movs	r3, #15
   24b90:	18fb      	adds	r3, r7, r3
   24b92:	781b      	ldrb	r3, [r3, #0]
   24b94:	2bc2      	cmp	r3, #194	; 0xc2
   24b96:	d005      	beq.n	24ba4 <spi_cmd_complete+0x4b0>
   24b98:	230f      	movs	r3, #15
   24b9a:	18fb      	adds	r3, r7, r3
   24b9c:	781b      	ldrb	r3, [r3, #0]
   24b9e:	2bc8      	cmp	r3, #200	; 0xc8
   24ba0:	d000      	beq.n	24ba4 <spi_cmd_complete+0x4b0>
   24ba2:	e208      	b.n	24fb6 <spi_cmd_complete+0x8c2>
			//uint16_t crc1, crc2;
			uint8_t crc[2];
			/**
			Data Respnose header
			**/
			retry = SPI_RESP_RETRY_COUNT;
   24ba4:	230a      	movs	r3, #10
   24ba6:	667b      	str	r3, [r7, #100]	; 0x64
			do {
				/* ensure there is room in buffer later to read data and crc */
				if(rix < len2) { 
   24ba8:	2376      	movs	r3, #118	; 0x76
   24baa:	18fb      	adds	r3, r7, r3
   24bac:	781a      	ldrb	r2, [r3, #0]
   24bae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24bb0:	429a      	cmp	r2, r3
   24bb2:	d218      	bcs.n	24be6 <spi_cmd_complete+0x4f2>
					rsp = rb[rix++];
   24bb4:	2376      	movs	r3, #118	; 0x76
   24bb6:	18fb      	adds	r3, r7, r3
   24bb8:	781b      	ldrb	r3, [r3, #0]
   24bba:	2276      	movs	r2, #118	; 0x76
   24bbc:	18ba      	adds	r2, r7, r2
   24bbe:	1c59      	adds	r1, r3, #1
   24bc0:	7011      	strb	r1, [r2, #0]
   24bc2:	001a      	movs	r2, r3
   24bc4:	2318      	movs	r3, #24
   24bc6:	18fb      	adds	r3, r7, r3
   24bc8:	5c9a      	ldrb	r2, [r3, r2]
   24bca:	2317      	movs	r3, #23
   24bcc:	18fb      	adds	r3, r7, r3
   24bce:	701a      	strb	r2, [r3, #0]
				} else {
					retry = 0;
					break;
				}
				if (((rsp >> 4) & 0xf) == 0xf)
   24bd0:	2317      	movs	r3, #23
   24bd2:	18fb      	adds	r3, r7, r3
   24bd4:	781b      	ldrb	r3, [r3, #0]
   24bd6:	091b      	lsrs	r3, r3, #4
   24bd8:	b2db      	uxtb	r3, r3
   24bda:	001a      	movs	r2, r3
   24bdc:	230f      	movs	r3, #15
   24bde:	4013      	ands	r3, r2
   24be0:	2b0f      	cmp	r3, #15
   24be2:	d103      	bne.n	24bec <spi_cmd_complete+0x4f8>
					break;
   24be4:	e007      	b.n	24bf6 <spi_cmd_complete+0x502>
					retry = 0;
   24be6:	2300      	movs	r3, #0
   24be8:	667b      	str	r3, [r7, #100]	; 0x64
					break;
   24bea:	e004      	b.n	24bf6 <spi_cmd_complete+0x502>
			} while (retry--);
   24bec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   24bee:	1e5a      	subs	r2, r3, #1
   24bf0:	667a      	str	r2, [r7, #100]	; 0x64
   24bf2:	2b00      	cmp	r3, #0
   24bf4:	d1d8      	bne.n	24ba8 <spi_cmd_complete+0x4b4>

			if (retry <= 0) {
   24bf6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   24bf8:	2b00      	cmp	r3, #0
   24bfa:	dc18      	bgt.n	24c2e <spi_cmd_complete+0x53a>
				M2M_ERR("[nmi spi]: Error, data read response (%02x)\n", rsp);
   24bfc:	2395      	movs	r3, #149	; 0x95
   24bfe:	009a      	lsls	r2, r3, #2
   24c00:	499b      	ldr	r1, [pc, #620]	; (24e70 <spi_cmd_complete+0x77c>)
   24c02:	4b9c      	ldr	r3, [pc, #624]	; (24e74 <spi_cmd_complete+0x780>)
   24c04:	0018      	movs	r0, r3
   24c06:	4b9c      	ldr	r3, [pc, #624]	; (24e78 <spi_cmd_complete+0x784>)
   24c08:	4798      	blx	r3
   24c0a:	2317      	movs	r3, #23
   24c0c:	18fb      	adds	r3, r7, r3
   24c0e:	781b      	ldrb	r3, [r3, #0]
   24c10:	001a      	movs	r2, r3
   24c12:	4b9e      	ldr	r3, [pc, #632]	; (24e8c <spi_cmd_complete+0x798>)
   24c14:	0011      	movs	r1, r2
   24c16:	0018      	movs	r0, r3
   24c18:	4b97      	ldr	r3, [pc, #604]	; (24e78 <spi_cmd_complete+0x784>)
   24c1a:	4798      	blx	r3
   24c1c:	4b98      	ldr	r3, [pc, #608]	; (24e80 <spi_cmd_complete+0x78c>)
   24c1e:	0018      	movs	r0, r3
   24c20:	4b95      	ldr	r3, [pc, #596]	; (24e78 <spi_cmd_complete+0x784>)
   24c22:	4798      	blx	r3
				result = N_RESET;
   24c24:	2301      	movs	r3, #1
   24c26:	425b      	negs	r3, r3
   24c28:	66bb      	str	r3, [r7, #104]	; 0x68
				return result;
   24c2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24c2c:	e1c4      	b.n	24fb8 <spi_cmd_complete+0x8c4>
			}

			if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   24c2e:	230f      	movs	r3, #15
   24c30:	18fb      	adds	r3, r7, r3
   24c32:	781b      	ldrb	r3, [r3, #0]
   24c34:	2bc4      	cmp	r3, #196	; 0xc4
   24c36:	d005      	beq.n	24c44 <spi_cmd_complete+0x550>
   24c38:	230f      	movs	r3, #15
   24c3a:	18fb      	adds	r3, r7, r3
   24c3c:	781b      	ldrb	r3, [r3, #0]
   24c3e:	2bca      	cmp	r3, #202	; 0xca
   24c40:	d000      	beq.n	24c44 <spi_cmd_complete+0x550>
   24c42:	e08e      	b.n	24d62 <spi_cmd_complete+0x66e>
				/**
				Read bytes
				**/
				if((rix+3) < len2) { 
   24c44:	2376      	movs	r3, #118	; 0x76
   24c46:	18fb      	adds	r3, r7, r3
   24c48:	781b      	ldrb	r3, [r3, #0]
   24c4a:	3303      	adds	r3, #3
   24c4c:	001a      	movs	r2, r3
   24c4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24c50:	429a      	cmp	r2, r3
   24c52:	d23c      	bcs.n	24cce <spi_cmd_complete+0x5da>
					b[0] = rb[rix++];
   24c54:	2376      	movs	r3, #118	; 0x76
   24c56:	18fb      	adds	r3, r7, r3
   24c58:	781b      	ldrb	r3, [r3, #0]
   24c5a:	2276      	movs	r2, #118	; 0x76
   24c5c:	18ba      	adds	r2, r7, r2
   24c5e:	1c59      	adds	r1, r3, #1
   24c60:	7011      	strb	r1, [r2, #0]
   24c62:	001a      	movs	r2, r3
   24c64:	2318      	movs	r3, #24
   24c66:	18fb      	adds	r3, r7, r3
   24c68:	5c9a      	ldrb	r2, [r3, r2]
   24c6a:	687b      	ldr	r3, [r7, #4]
   24c6c:	701a      	strb	r2, [r3, #0]
					b[1] = rb[rix++];
   24c6e:	687b      	ldr	r3, [r7, #4]
   24c70:	1c5a      	adds	r2, r3, #1
   24c72:	2376      	movs	r3, #118	; 0x76
   24c74:	18fb      	adds	r3, r7, r3
   24c76:	781b      	ldrb	r3, [r3, #0]
   24c78:	2176      	movs	r1, #118	; 0x76
   24c7a:	1879      	adds	r1, r7, r1
   24c7c:	1c58      	adds	r0, r3, #1
   24c7e:	7008      	strb	r0, [r1, #0]
   24c80:	0019      	movs	r1, r3
   24c82:	2318      	movs	r3, #24
   24c84:	18fb      	adds	r3, r7, r3
   24c86:	5c5b      	ldrb	r3, [r3, r1]
   24c88:	7013      	strb	r3, [r2, #0]
					b[2] = rb[rix++];
   24c8a:	687b      	ldr	r3, [r7, #4]
   24c8c:	1c9a      	adds	r2, r3, #2
   24c8e:	2376      	movs	r3, #118	; 0x76
   24c90:	18fb      	adds	r3, r7, r3
   24c92:	781b      	ldrb	r3, [r3, #0]
   24c94:	2176      	movs	r1, #118	; 0x76
   24c96:	1879      	adds	r1, r7, r1
   24c98:	1c58      	adds	r0, r3, #1
   24c9a:	7008      	strb	r0, [r1, #0]
   24c9c:	0019      	movs	r1, r3
   24c9e:	2318      	movs	r3, #24
   24ca0:	18fb      	adds	r3, r7, r3
   24ca2:	5c5b      	ldrb	r3, [r3, r1]
   24ca4:	7013      	strb	r3, [r2, #0]
					b[3] = rb[rix++];
   24ca6:	687b      	ldr	r3, [r7, #4]
   24ca8:	1cda      	adds	r2, r3, #3
   24caa:	2376      	movs	r3, #118	; 0x76
   24cac:	18fb      	adds	r3, r7, r3
   24cae:	781b      	ldrb	r3, [r3, #0]
   24cb0:	2176      	movs	r1, #118	; 0x76
   24cb2:	1879      	adds	r1, r7, r1
   24cb4:	1c58      	adds	r0, r3, #1
   24cb6:	7008      	strb	r0, [r1, #0]
   24cb8:	0019      	movs	r1, r3
   24cba:	2318      	movs	r3, #24
   24cbc:	18fb      	adds	r3, r7, r3
   24cbe:	5c5b      	ldrb	r3, [r3, r1]
   24cc0:	7013      	strb	r3, [r2, #0]
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
					result = N_FAIL;
					return result;
				}

				if (!gu8Crc_off) {						
   24cc2:	4b73      	ldr	r3, [pc, #460]	; (24e90 <spi_cmd_complete+0x79c>)
   24cc4:	781b      	ldrb	r3, [r3, #0]
   24cc6:	2b00      	cmp	r3, #0
   24cc8:	d000      	beq.n	24ccc <spi_cmd_complete+0x5d8>
   24cca:	e174      	b.n	24fb6 <spi_cmd_complete+0x8c2>
   24ccc:	e011      	b.n	24cf2 <spi_cmd_complete+0x5fe>
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
   24cce:	4a71      	ldr	r2, [pc, #452]	; (24e94 <spi_cmd_complete+0x7a0>)
   24cd0:	4967      	ldr	r1, [pc, #412]	; (24e70 <spi_cmd_complete+0x77c>)
   24cd2:	4b68      	ldr	r3, [pc, #416]	; (24e74 <spi_cmd_complete+0x780>)
   24cd4:	0018      	movs	r0, r3
   24cd6:	4b68      	ldr	r3, [pc, #416]	; (24e78 <spi_cmd_complete+0x784>)
   24cd8:	4798      	blx	r3
   24cda:	4b6f      	ldr	r3, [pc, #444]	; (24e98 <spi_cmd_complete+0x7a4>)
   24cdc:	0018      	movs	r0, r3
   24cde:	4b66      	ldr	r3, [pc, #408]	; (24e78 <spi_cmd_complete+0x784>)
   24ce0:	4798      	blx	r3
   24ce2:	4b67      	ldr	r3, [pc, #412]	; (24e80 <spi_cmd_complete+0x78c>)
   24ce4:	0018      	movs	r0, r3
   24ce6:	4b64      	ldr	r3, [pc, #400]	; (24e78 <spi_cmd_complete+0x784>)
   24ce8:	4798      	blx	r3
					result = N_FAIL;
   24cea:	2300      	movs	r3, #0
   24cec:	66bb      	str	r3, [r7, #104]	; 0x68
					return result;
   24cee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24cf0:	e162      	b.n	24fb8 <spi_cmd_complete+0x8c4>
					/**
					Read Crc
					**/
					if((rix+1) < len2) { 
   24cf2:	2376      	movs	r3, #118	; 0x76
   24cf4:	18fb      	adds	r3, r7, r3
   24cf6:	781b      	ldrb	r3, [r3, #0]
   24cf8:	3301      	adds	r3, #1
   24cfa:	001a      	movs	r2, r3
   24cfc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24cfe:	429a      	cmp	r2, r3
   24d00:	d21c      	bcs.n	24d3c <spi_cmd_complete+0x648>
						crc[0] = rb[rix++];
   24d02:	2376      	movs	r3, #118	; 0x76
   24d04:	18fb      	adds	r3, r7, r3
   24d06:	781b      	ldrb	r3, [r3, #0]
   24d08:	2276      	movs	r2, #118	; 0x76
   24d0a:	18ba      	adds	r2, r7, r2
   24d0c:	1c59      	adds	r1, r3, #1
   24d0e:	7011      	strb	r1, [r2, #0]
   24d10:	001a      	movs	r2, r3
   24d12:	2318      	movs	r3, #24
   24d14:	18fb      	adds	r3, r7, r3
   24d16:	5c9a      	ldrb	r2, [r3, r2]
   24d18:	2314      	movs	r3, #20
   24d1a:	18fb      	adds	r3, r7, r3
   24d1c:	701a      	strb	r2, [r3, #0]
						crc[1] = rb[rix++];
   24d1e:	2376      	movs	r3, #118	; 0x76
   24d20:	18fb      	adds	r3, r7, r3
   24d22:	781b      	ldrb	r3, [r3, #0]
   24d24:	2276      	movs	r2, #118	; 0x76
   24d26:	18ba      	adds	r2, r7, r2
   24d28:	1c59      	adds	r1, r3, #1
   24d2a:	7011      	strb	r1, [r2, #0]
   24d2c:	001a      	movs	r2, r3
   24d2e:	2318      	movs	r3, #24
   24d30:	18fb      	adds	r3, r7, r3
   24d32:	5c9a      	ldrb	r2, [r3, r2]
   24d34:	2314      	movs	r3, #20
   24d36:	18fb      	adds	r3, r7, r3
   24d38:	705a      	strb	r2, [r3, #1]
				if (!gu8Crc_off) {						
   24d3a:	e13c      	b.n	24fb6 <spi_cmd_complete+0x8c2>
					} else {
						M2M_ERR("[nmi spi]: buffer overrun when reading crc.\n");
   24d3c:	239c      	movs	r3, #156	; 0x9c
   24d3e:	009a      	lsls	r2, r3, #2
   24d40:	494b      	ldr	r1, [pc, #300]	; (24e70 <spi_cmd_complete+0x77c>)
   24d42:	4b4c      	ldr	r3, [pc, #304]	; (24e74 <spi_cmd_complete+0x780>)
   24d44:	0018      	movs	r0, r3
   24d46:	4b4c      	ldr	r3, [pc, #304]	; (24e78 <spi_cmd_complete+0x784>)
   24d48:	4798      	blx	r3
   24d4a:	4b54      	ldr	r3, [pc, #336]	; (24e9c <spi_cmd_complete+0x7a8>)
   24d4c:	0018      	movs	r0, r3
   24d4e:	4b4a      	ldr	r3, [pc, #296]	; (24e78 <spi_cmd_complete+0x784>)
   24d50:	4798      	blx	r3
   24d52:	4b4b      	ldr	r3, [pc, #300]	; (24e80 <spi_cmd_complete+0x78c>)
   24d54:	0018      	movs	r0, r3
   24d56:	4b48      	ldr	r3, [pc, #288]	; (24e78 <spi_cmd_complete+0x784>)
   24d58:	4798      	blx	r3
						result = N_FAIL;
   24d5a:	2300      	movs	r3, #0
   24d5c:	66bb      	str	r3, [r7, #104]	; 0x68
						return result;
   24d5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24d60:	e12a      	b.n	24fb8 <spi_cmd_complete+0x8c4>
					}
				}
			} else if((cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   24d62:	230f      	movs	r3, #15
   24d64:	18fb      	adds	r3, r7, r3
   24d66:	781b      	ldrb	r3, [r3, #0]
   24d68:	2bc2      	cmp	r3, #194	; 0xc2
   24d6a:	d005      	beq.n	24d78 <spi_cmd_complete+0x684>
   24d6c:	230f      	movs	r3, #15
   24d6e:	18fb      	adds	r3, r7, r3
   24d70:	781b      	ldrb	r3, [r3, #0]
   24d72:	2bc8      	cmp	r3, #200	; 0xc8
   24d74:	d000      	beq.n	24d78 <spi_cmd_complete+0x684>
   24d76:	e11e      	b.n	24fb6 <spi_cmd_complete+0x8c2>
				int ix;

				/* some data may be read in response to dummy bytes. */
				for(ix=0; (rix < len2) && (ix < sz);) {
   24d78:	2300      	movs	r3, #0
   24d7a:	663b      	str	r3, [r7, #96]	; 0x60
   24d7c:	e011      	b.n	24da2 <spi_cmd_complete+0x6ae>
					b[ix++] = rb[rix++];				
   24d7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24d80:	1c5a      	adds	r2, r3, #1
   24d82:	663a      	str	r2, [r7, #96]	; 0x60
   24d84:	001a      	movs	r2, r3
   24d86:	687b      	ldr	r3, [r7, #4]
   24d88:	189a      	adds	r2, r3, r2
   24d8a:	2376      	movs	r3, #118	; 0x76
   24d8c:	18fb      	adds	r3, r7, r3
   24d8e:	781b      	ldrb	r3, [r3, #0]
   24d90:	2176      	movs	r1, #118	; 0x76
   24d92:	1879      	adds	r1, r7, r1
   24d94:	1c58      	adds	r0, r3, #1
   24d96:	7008      	strb	r0, [r1, #0]
   24d98:	0019      	movs	r1, r3
   24d9a:	2318      	movs	r3, #24
   24d9c:	18fb      	adds	r3, r7, r3
   24d9e:	5c5b      	ldrb	r3, [r3, r1]
   24da0:	7013      	strb	r3, [r2, #0]
				for(ix=0; (rix < len2) && (ix < sz);) {
   24da2:	2376      	movs	r3, #118	; 0x76
   24da4:	18fb      	adds	r3, r7, r3
   24da6:	781a      	ldrb	r2, [r3, #0]
   24da8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24daa:	429a      	cmp	r2, r3
   24dac:	d203      	bcs.n	24db6 <spi_cmd_complete+0x6c2>
   24dae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   24db0:	683b      	ldr	r3, [r7, #0]
   24db2:	429a      	cmp	r2, r3
   24db4:	d3e3      	bcc.n	24d7e <spi_cmd_complete+0x68a>
				}
#if 0
				if(ix) M2M_INFO("ttt %d %d\n", sz, ix);
#endif
				sz -= ix;
   24db6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24db8:	683a      	ldr	r2, [r7, #0]
   24dba:	1ad3      	subs	r3, r2, r3
   24dbc:	603b      	str	r3, [r7, #0]

				if(sz > 0) {
   24dbe:	683b      	ldr	r3, [r7, #0]
   24dc0:	2b00      	cmp	r3, #0
   24dc2:	d100      	bne.n	24dc6 <spi_cmd_complete+0x6d2>
   24dc4:	e0f1      	b.n	24faa <spi_cmd_complete+0x8b6>
					int nbytes;
					
					if (sz <= (DATA_PKT_SZ-ix)) {
   24dc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24dc8:	2280      	movs	r2, #128	; 0x80
   24dca:	0192      	lsls	r2, r2, #6
   24dcc:	1ad3      	subs	r3, r2, r3
   24dce:	001a      	movs	r2, r3
   24dd0:	683b      	ldr	r3, [r7, #0]
   24dd2:	429a      	cmp	r2, r3
   24dd4:	d302      	bcc.n	24ddc <spi_cmd_complete+0x6e8>
						nbytes = sz;
   24dd6:	683b      	ldr	r3, [r7, #0]
   24dd8:	65fb      	str	r3, [r7, #92]	; 0x5c
   24dda:	e004      	b.n	24de6 <spi_cmd_complete+0x6f2>
					} else {
						nbytes = DATA_PKT_SZ-ix;
   24ddc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24dde:	2280      	movs	r2, #128	; 0x80
   24de0:	0192      	lsls	r2, r2, #6
   24de2:	1ad3      	subs	r3, r2, r3
   24de4:	65fb      	str	r3, [r7, #92]	; 0x5c
					}

					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   24de6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24de8:	687a      	ldr	r2, [r7, #4]
   24dea:	18d3      	adds	r3, r2, r3
   24dec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   24dee:	b292      	uxth	r2, r2
   24df0:	0011      	movs	r1, r2
   24df2:	0018      	movs	r0, r3
   24df4:	4b2a      	ldr	r3, [pc, #168]	; (24ea0 <spi_cmd_complete+0x7ac>)
   24df6:	4798      	blx	r3
   24df8:	1e03      	subs	r3, r0, #0
   24dfa:	d010      	beq.n	24e1e <spi_cmd_complete+0x72a>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   24dfc:	4a29      	ldr	r2, [pc, #164]	; (24ea4 <spi_cmd_complete+0x7b0>)
   24dfe:	491c      	ldr	r1, [pc, #112]	; (24e70 <spi_cmd_complete+0x77c>)
   24e00:	4b1c      	ldr	r3, [pc, #112]	; (24e74 <spi_cmd_complete+0x780>)
   24e02:	0018      	movs	r0, r3
   24e04:	4b1c      	ldr	r3, [pc, #112]	; (24e78 <spi_cmd_complete+0x784>)
   24e06:	4798      	blx	r3
   24e08:	4b27      	ldr	r3, [pc, #156]	; (24ea8 <spi_cmd_complete+0x7b4>)
   24e0a:	0018      	movs	r0, r3
   24e0c:	4b1a      	ldr	r3, [pc, #104]	; (24e78 <spi_cmd_complete+0x784>)
   24e0e:	4798      	blx	r3
   24e10:	4b1b      	ldr	r3, [pc, #108]	; (24e80 <spi_cmd_complete+0x78c>)
   24e12:	0018      	movs	r0, r3
   24e14:	4b18      	ldr	r3, [pc, #96]	; (24e78 <spi_cmd_complete+0x784>)
   24e16:	4798      	blx	r3
						result = N_FAIL;
   24e18:	2300      	movs	r3, #0
   24e1a:	66bb      	str	r3, [r7, #104]	; 0x68
						goto _error_;
   24e1c:	e0cb      	b.n	24fb6 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   24e1e:	4b1c      	ldr	r3, [pc, #112]	; (24e90 <spi_cmd_complete+0x79c>)
   24e20:	781b      	ldrb	r3, [r3, #0]
   24e22:	2b00      	cmp	r3, #0
   24e24:	d119      	bne.n	24e5a <spi_cmd_complete+0x766>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   24e26:	2314      	movs	r3, #20
   24e28:	18fb      	adds	r3, r7, r3
   24e2a:	2102      	movs	r1, #2
   24e2c:	0018      	movs	r0, r3
   24e2e:	4b1c      	ldr	r3, [pc, #112]	; (24ea0 <spi_cmd_complete+0x7ac>)
   24e30:	4798      	blx	r3
   24e32:	1e03      	subs	r3, r0, #0
   24e34:	d011      	beq.n	24e5a <spi_cmd_complete+0x766>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   24e36:	23a6      	movs	r3, #166	; 0xa6
   24e38:	009a      	lsls	r2, r3, #2
   24e3a:	490d      	ldr	r1, [pc, #52]	; (24e70 <spi_cmd_complete+0x77c>)
   24e3c:	4b0d      	ldr	r3, [pc, #52]	; (24e74 <spi_cmd_complete+0x780>)
   24e3e:	0018      	movs	r0, r3
   24e40:	4b0d      	ldr	r3, [pc, #52]	; (24e78 <spi_cmd_complete+0x784>)
   24e42:	4798      	blx	r3
   24e44:	4b19      	ldr	r3, [pc, #100]	; (24eac <spi_cmd_complete+0x7b8>)
   24e46:	0018      	movs	r0, r3
   24e48:	4b0b      	ldr	r3, [pc, #44]	; (24e78 <spi_cmd_complete+0x784>)
   24e4a:	4798      	blx	r3
   24e4c:	4b0c      	ldr	r3, [pc, #48]	; (24e80 <spi_cmd_complete+0x78c>)
   24e4e:	0018      	movs	r0, r3
   24e50:	4b09      	ldr	r3, [pc, #36]	; (24e78 <spi_cmd_complete+0x784>)
   24e52:	4798      	blx	r3
							result = N_FAIL;
   24e54:	2300      	movs	r3, #0
   24e56:	66bb      	str	r3, [r7, #104]	; 0x68
							goto _error_;
   24e58:	e0ad      	b.n	24fb6 <spi_cmd_complete+0x8c2>
						}
					}

					
					ix += nbytes;
   24e5a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   24e5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   24e5e:	18d3      	adds	r3, r2, r3
   24e60:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   24e62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   24e64:	683a      	ldr	r2, [r7, #0]
   24e66:	1ad3      	subs	r3, r2, r3
   24e68:	603b      	str	r3, [r7, #0]
				}

				/*  if any data in left unread, then read the rest using normal DMA code.*/	
				while(sz > 0) {
   24e6a:	e09e      	b.n	24faa <spi_cmd_complete+0x8b6>
   24e6c:	0000022f 	.word	0x0000022f
   24e70:	0003a0fc 	.word	0x0003a0fc
   24e74:	00039ae8 	.word	0x00039ae8
   24e78:	0001eb7d 	.word	0x0001eb7d
   24e7c:	00039be0 	.word	0x00039be0
   24e80:	00039b28 	.word	0x00039b28
   24e84:	00000239 	.word	0x00000239
   24e88:	00039c1c 	.word	0x00039c1c
   24e8c:	00039c50 	.word	0x00039c50
   24e90:	20003eec 	.word	0x20003eec
   24e94:	00000263 	.word	0x00000263
   24e98:	00039c80 	.word	0x00039c80
   24e9c:	00039cb0 	.word	0x00039cb0
   24ea0:	0002402d 	.word	0x0002402d
   24ea4:	0000028e 	.word	0x0000028e
   24ea8:	00039ce0 	.word	0x00039ce0
   24eac:	00039d14 	.word	0x00039d14
					int nbytes;
			
					if (sz <= DATA_PKT_SZ) {
   24eb0:	683a      	ldr	r2, [r7, #0]
   24eb2:	2380      	movs	r3, #128	; 0x80
   24eb4:	019b      	lsls	r3, r3, #6
   24eb6:	429a      	cmp	r2, r3
   24eb8:	d802      	bhi.n	24ec0 <spi_cmd_complete+0x7cc>
						nbytes = sz;
   24eba:	683b      	ldr	r3, [r7, #0]
   24ebc:	65bb      	str	r3, [r7, #88]	; 0x58
   24ebe:	e002      	b.n	24ec6 <spi_cmd_complete+0x7d2>
					} else {
						nbytes = DATA_PKT_SZ;
   24ec0:	2380      	movs	r3, #128	; 0x80
   24ec2:	019b      	lsls	r3, r3, #6
   24ec4:	65bb      	str	r3, [r7, #88]	; 0x58
					handled above for the first DMA.
					**/
					/**
					Data Respnose header
					**/
					retry = SPI_RESP_RETRY_COUNT;
   24ec6:	230a      	movs	r3, #10
   24ec8:	667b      	str	r3, [r7, #100]	; 0x64
					do {
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
   24eca:	2317      	movs	r3, #23
   24ecc:	18fb      	adds	r3, r7, r3
   24ece:	2101      	movs	r1, #1
   24ed0:	0018      	movs	r0, r3
   24ed2:	4b3b      	ldr	r3, [pc, #236]	; (24fc0 <spi_cmd_complete+0x8cc>)
   24ed4:	4798      	blx	r3
   24ed6:	1e03      	subs	r3, r0, #0
   24ed8:	d011      	beq.n	24efe <spi_cmd_complete+0x80a>
							M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
   24eda:	23ae      	movs	r3, #174	; 0xae
   24edc:	009a      	lsls	r2, r3, #2
   24ede:	4939      	ldr	r1, [pc, #228]	; (24fc4 <spi_cmd_complete+0x8d0>)
   24ee0:	4b39      	ldr	r3, [pc, #228]	; (24fc8 <spi_cmd_complete+0x8d4>)
   24ee2:	0018      	movs	r0, r3
   24ee4:	4b39      	ldr	r3, [pc, #228]	; (24fcc <spi_cmd_complete+0x8d8>)
   24ee6:	4798      	blx	r3
   24ee8:	4b39      	ldr	r3, [pc, #228]	; (24fd0 <spi_cmd_complete+0x8dc>)
   24eea:	0018      	movs	r0, r3
   24eec:	4b37      	ldr	r3, [pc, #220]	; (24fcc <spi_cmd_complete+0x8d8>)
   24eee:	4798      	blx	r3
   24ef0:	4b38      	ldr	r3, [pc, #224]	; (24fd4 <spi_cmd_complete+0x8e0>)
   24ef2:	0018      	movs	r0, r3
   24ef4:	4b35      	ldr	r3, [pc, #212]	; (24fcc <spi_cmd_complete+0x8d8>)
   24ef6:	4798      	blx	r3
							result = N_FAIL;
   24ef8:	2300      	movs	r3, #0
   24efa:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   24efc:	e010      	b.n	24f20 <spi_cmd_complete+0x82c>
						}
						if (((rsp >> 4) & 0xf) == 0xf)
   24efe:	2317      	movs	r3, #23
   24f00:	18fb      	adds	r3, r7, r3
   24f02:	781b      	ldrb	r3, [r3, #0]
   24f04:	091b      	lsrs	r3, r3, #4
   24f06:	b2db      	uxtb	r3, r3
   24f08:	001a      	movs	r2, r3
   24f0a:	230f      	movs	r3, #15
   24f0c:	4013      	ands	r3, r2
   24f0e:	2b0f      	cmp	r3, #15
   24f10:	d005      	beq.n	24f1e <spi_cmd_complete+0x82a>
							break;
					} while (retry--);
   24f12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   24f14:	1e5a      	subs	r2, r3, #1
   24f16:	667a      	str	r2, [r7, #100]	; 0x64
   24f18:	2b00      	cmp	r3, #0
   24f1a:	d1d6      	bne.n	24eca <spi_cmd_complete+0x7d6>
   24f1c:	e000      	b.n	24f20 <spi_cmd_complete+0x82c>
							break;
   24f1e:	46c0      	nop			; (mov r8, r8)

					if (result == N_FAIL)
   24f20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24f22:	2b00      	cmp	r3, #0
   24f24:	d046      	beq.n	24fb4 <spi_cmd_complete+0x8c0>


					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   24f26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24f28:	687a      	ldr	r2, [r7, #4]
   24f2a:	18d3      	adds	r3, r2, r3
   24f2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
   24f2e:	b292      	uxth	r2, r2
   24f30:	0011      	movs	r1, r2
   24f32:	0018      	movs	r0, r3
   24f34:	4b22      	ldr	r3, [pc, #136]	; (24fc0 <spi_cmd_complete+0x8cc>)
   24f36:	4798      	blx	r3
   24f38:	1e03      	subs	r3, r0, #0
   24f3a:	d011      	beq.n	24f60 <spi_cmd_complete+0x86c>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   24f3c:	23b2      	movs	r3, #178	; 0xb2
   24f3e:	009a      	lsls	r2, r3, #2
   24f40:	4920      	ldr	r1, [pc, #128]	; (24fc4 <spi_cmd_complete+0x8d0>)
   24f42:	4b21      	ldr	r3, [pc, #132]	; (24fc8 <spi_cmd_complete+0x8d4>)
   24f44:	0018      	movs	r0, r3
   24f46:	4b21      	ldr	r3, [pc, #132]	; (24fcc <spi_cmd_complete+0x8d8>)
   24f48:	4798      	blx	r3
   24f4a:	4b23      	ldr	r3, [pc, #140]	; (24fd8 <spi_cmd_complete+0x8e4>)
   24f4c:	0018      	movs	r0, r3
   24f4e:	4b1f      	ldr	r3, [pc, #124]	; (24fcc <spi_cmd_complete+0x8d8>)
   24f50:	4798      	blx	r3
   24f52:	4b20      	ldr	r3, [pc, #128]	; (24fd4 <spi_cmd_complete+0x8e0>)
   24f54:	0018      	movs	r0, r3
   24f56:	4b1d      	ldr	r3, [pc, #116]	; (24fcc <spi_cmd_complete+0x8d8>)
   24f58:	4798      	blx	r3
						result = N_FAIL;
   24f5a:	2300      	movs	r3, #0
   24f5c:	66bb      	str	r3, [r7, #104]	; 0x68
						break;
   24f5e:	e02a      	b.n	24fb6 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   24f60:	4b1e      	ldr	r3, [pc, #120]	; (24fdc <spi_cmd_complete+0x8e8>)
   24f62:	781b      	ldrb	r3, [r3, #0]
   24f64:	2b00      	cmp	r3, #0
   24f66:	d118      	bne.n	24f9a <spi_cmd_complete+0x8a6>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   24f68:	2314      	movs	r3, #20
   24f6a:	18fb      	adds	r3, r7, r3
   24f6c:	2102      	movs	r1, #2
   24f6e:	0018      	movs	r0, r3
   24f70:	4b13      	ldr	r3, [pc, #76]	; (24fc0 <spi_cmd_complete+0x8cc>)
   24f72:	4798      	blx	r3
   24f74:	1e03      	subs	r3, r0, #0
   24f76:	d010      	beq.n	24f9a <spi_cmd_complete+0x8a6>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   24f78:	4a19      	ldr	r2, [pc, #100]	; (24fe0 <spi_cmd_complete+0x8ec>)
   24f7a:	4912      	ldr	r1, [pc, #72]	; (24fc4 <spi_cmd_complete+0x8d0>)
   24f7c:	4b12      	ldr	r3, [pc, #72]	; (24fc8 <spi_cmd_complete+0x8d4>)
   24f7e:	0018      	movs	r0, r3
   24f80:	4b12      	ldr	r3, [pc, #72]	; (24fcc <spi_cmd_complete+0x8d8>)
   24f82:	4798      	blx	r3
   24f84:	4b17      	ldr	r3, [pc, #92]	; (24fe4 <spi_cmd_complete+0x8f0>)
   24f86:	0018      	movs	r0, r3
   24f88:	4b10      	ldr	r3, [pc, #64]	; (24fcc <spi_cmd_complete+0x8d8>)
   24f8a:	4798      	blx	r3
   24f8c:	4b11      	ldr	r3, [pc, #68]	; (24fd4 <spi_cmd_complete+0x8e0>)
   24f8e:	0018      	movs	r0, r3
   24f90:	4b0e      	ldr	r3, [pc, #56]	; (24fcc <spi_cmd_complete+0x8d8>)
   24f92:	4798      	blx	r3
							result = N_FAIL;
   24f94:	2300      	movs	r3, #0
   24f96:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   24f98:	e00d      	b.n	24fb6 <spi_cmd_complete+0x8c2>
						}
					}

					ix += nbytes;
   24f9a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   24f9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   24f9e:	18d3      	adds	r3, r2, r3
   24fa0:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   24fa2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   24fa4:	683a      	ldr	r2, [r7, #0]
   24fa6:	1ad3      	subs	r3, r2, r3
   24fa8:	603b      	str	r3, [r7, #0]
				while(sz > 0) {
   24faa:	683b      	ldr	r3, [r7, #0]
   24fac:	2b00      	cmp	r3, #0
   24fae:	d000      	beq.n	24fb2 <spi_cmd_complete+0x8be>
   24fb0:	e77e      	b.n	24eb0 <spi_cmd_complete+0x7bc>
   24fb2:	e000      	b.n	24fb6 <spi_cmd_complete+0x8c2>
						break;
   24fb4:	46c0      	nop			; (mov r8, r8)
				}
			}
	}
_error_:
	return result;
   24fb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
   24fb8:	0018      	movs	r0, r3
   24fba:	46bd      	mov	sp, r7
   24fbc:	b01f      	add	sp, #124	; 0x7c
   24fbe:	bd90      	pop	{r4, r7, pc}
   24fc0:	0002402d 	.word	0x0002402d
   24fc4:	0003a0fc 	.word	0x0003a0fc
   24fc8:	00039ae8 	.word	0x00039ae8
   24fcc:	0001eb7d 	.word	0x0001eb7d
   24fd0:	00039d4c 	.word	0x00039d4c
   24fd4:	00039b28 	.word	0x00039b28
   24fd8:	00039ce0 	.word	0x00039ce0
   24fdc:	20003eec 	.word	0x20003eec
   24fe0:	000002d2 	.word	0x000002d2
   24fe4:	00039d14 	.word	0x00039d14

00024fe8 <spi_data_write>:

	return result;
}

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
   24fe8:	b580      	push	{r7, lr}
   24fea:	b086      	sub	sp, #24
   24fec:	af00      	add	r7, sp, #0
   24fee:	6078      	str	r0, [r7, #4]
   24ff0:	000a      	movs	r2, r1
   24ff2:	1cbb      	adds	r3, r7, #2
   24ff4:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
   24ff6:	2313      	movs	r3, #19
   24ff8:	18fb      	adds	r3, r7, r3
   24ffa:	2201      	movs	r2, #1
   24ffc:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
   24ffe:	230c      	movs	r3, #12
   25000:	18fb      	adds	r3, r7, r3
   25002:	2200      	movs	r2, #0
   25004:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
   25006:	2316      	movs	r3, #22
   25008:	18fb      	adds	r3, r7, r3
   2500a:	2200      	movs	r2, #0
   2500c:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
   2500e:	1cbb      	adds	r3, r7, #2
   25010:	881a      	ldrh	r2, [r3, #0]
   25012:	2380      	movs	r3, #128	; 0x80
   25014:	019b      	lsls	r3, r3, #6
   25016:	429a      	cmp	r2, r3
   25018:	d805      	bhi.n	25026 <spi_data_write+0x3e>
			nbytes = sz;
   2501a:	2314      	movs	r3, #20
   2501c:	18fb      	adds	r3, r7, r3
   2501e:	1cba      	adds	r2, r7, #2
   25020:	8812      	ldrh	r2, [r2, #0]
   25022:	801a      	strh	r2, [r3, #0]
   25024:	e004      	b.n	25030 <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
   25026:	2314      	movs	r3, #20
   25028:	18fb      	adds	r3, r7, r3
   2502a:	2280      	movs	r2, #128	; 0x80
   2502c:	0192      	lsls	r2, r2, #6
   2502e:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
   25030:	2311      	movs	r3, #17
   25032:	18fb      	adds	r3, r7, r3
   25034:	22f0      	movs	r2, #240	; 0xf0
   25036:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
   25038:	2316      	movs	r3, #22
   2503a:	18fb      	adds	r3, r7, r3
   2503c:	2200      	movs	r2, #0
   2503e:	5e9b      	ldrsh	r3, [r3, r2]
   25040:	2b00      	cmp	r3, #0
   25042:	d10f      	bne.n	25064 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
   25044:	1cbb      	adds	r3, r7, #2
   25046:	881a      	ldrh	r2, [r3, #0]
   25048:	2380      	movs	r3, #128	; 0x80
   2504a:	019b      	lsls	r3, r3, #6
   2504c:	429a      	cmp	r2, r3
   2504e:	d804      	bhi.n	2505a <spi_data_write+0x72>
				order = 0x3;
   25050:	2312      	movs	r3, #18
   25052:	18fb      	adds	r3, r7, r3
   25054:	2203      	movs	r2, #3
   25056:	701a      	strb	r2, [r3, #0]
   25058:	e013      	b.n	25082 <spi_data_write+0x9a>
			else
				order = 0x1;
   2505a:	2312      	movs	r3, #18
   2505c:	18fb      	adds	r3, r7, r3
   2505e:	2201      	movs	r2, #1
   25060:	701a      	strb	r2, [r3, #0]
   25062:	e00e      	b.n	25082 <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
   25064:	1cbb      	adds	r3, r7, #2
   25066:	881a      	ldrh	r2, [r3, #0]
   25068:	2380      	movs	r3, #128	; 0x80
   2506a:	019b      	lsls	r3, r3, #6
   2506c:	429a      	cmp	r2, r3
   2506e:	d804      	bhi.n	2507a <spi_data_write+0x92>
				order = 0x3;
   25070:	2312      	movs	r3, #18
   25072:	18fb      	adds	r3, r7, r3
   25074:	2203      	movs	r2, #3
   25076:	701a      	strb	r2, [r3, #0]
   25078:	e003      	b.n	25082 <spi_data_write+0x9a>
			else
				order = 0x2;
   2507a:	2312      	movs	r3, #18
   2507c:	18fb      	adds	r3, r7, r3
   2507e:	2202      	movs	r2, #2
   25080:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
   25082:	2311      	movs	r3, #17
   25084:	18fb      	adds	r3, r7, r3
   25086:	781a      	ldrb	r2, [r3, #0]
   25088:	2312      	movs	r3, #18
   2508a:	18fb      	adds	r3, r7, r3
   2508c:	781b      	ldrb	r3, [r3, #0]
   2508e:	4313      	orrs	r3, r2
   25090:	b2da      	uxtb	r2, r3
   25092:	2311      	movs	r3, #17
   25094:	18fb      	adds	r3, r7, r3
   25096:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
   25098:	2311      	movs	r3, #17
   2509a:	18fb      	adds	r3, r7, r3
   2509c:	2101      	movs	r1, #1
   2509e:	0018      	movs	r0, r3
   250a0:	4b3c      	ldr	r3, [pc, #240]	; (25194 <spi_data_write+0x1ac>)
   250a2:	4798      	blx	r3
   250a4:	1e03      	subs	r3, r0, #0
   250a6:	d012      	beq.n	250ce <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
   250a8:	4a3b      	ldr	r2, [pc, #236]	; (25198 <spi_data_write+0x1b0>)
   250aa:	493c      	ldr	r1, [pc, #240]	; (2519c <spi_data_write+0x1b4>)
   250ac:	4b3c      	ldr	r3, [pc, #240]	; (251a0 <spi_data_write+0x1b8>)
   250ae:	0018      	movs	r0, r3
   250b0:	4b3c      	ldr	r3, [pc, #240]	; (251a4 <spi_data_write+0x1bc>)
   250b2:	4798      	blx	r3
   250b4:	4b3c      	ldr	r3, [pc, #240]	; (251a8 <spi_data_write+0x1c0>)
   250b6:	0018      	movs	r0, r3
   250b8:	4b3a      	ldr	r3, [pc, #232]	; (251a4 <spi_data_write+0x1bc>)
   250ba:	4798      	blx	r3
   250bc:	4b3b      	ldr	r3, [pc, #236]	; (251ac <spi_data_write+0x1c4>)
   250be:	0018      	movs	r0, r3
   250c0:	4b38      	ldr	r3, [pc, #224]	; (251a4 <spi_data_write+0x1bc>)
   250c2:	4798      	blx	r3
			result = N_FAIL;
   250c4:	2313      	movs	r3, #19
   250c6:	18fb      	adds	r3, r7, r3
   250c8:	2200      	movs	r2, #0
   250ca:	701a      	strb	r2, [r3, #0]
			break;
   250cc:	e059      	b.n	25182 <spi_data_write+0x19a>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
   250ce:	2316      	movs	r3, #22
   250d0:	18fb      	adds	r3, r7, r3
   250d2:	2200      	movs	r2, #0
   250d4:	5e9b      	ldrsh	r3, [r3, r2]
   250d6:	687a      	ldr	r2, [r7, #4]
   250d8:	18d2      	adds	r2, r2, r3
   250da:	2314      	movs	r3, #20
   250dc:	18fb      	adds	r3, r7, r3
   250de:	881b      	ldrh	r3, [r3, #0]
   250e0:	0019      	movs	r1, r3
   250e2:	0010      	movs	r0, r2
   250e4:	4b2b      	ldr	r3, [pc, #172]	; (25194 <spi_data_write+0x1ac>)
   250e6:	4798      	blx	r3
   250e8:	1e03      	subs	r3, r0, #0
   250ea:	d012      	beq.n	25112 <spi_data_write+0x12a>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
   250ec:	4a30      	ldr	r2, [pc, #192]	; (251b0 <spi_data_write+0x1c8>)
   250ee:	492b      	ldr	r1, [pc, #172]	; (2519c <spi_data_write+0x1b4>)
   250f0:	4b2b      	ldr	r3, [pc, #172]	; (251a0 <spi_data_write+0x1b8>)
   250f2:	0018      	movs	r0, r3
   250f4:	4b2b      	ldr	r3, [pc, #172]	; (251a4 <spi_data_write+0x1bc>)
   250f6:	4798      	blx	r3
   250f8:	4b2e      	ldr	r3, [pc, #184]	; (251b4 <spi_data_write+0x1cc>)
   250fa:	0018      	movs	r0, r3
   250fc:	4b29      	ldr	r3, [pc, #164]	; (251a4 <spi_data_write+0x1bc>)
   250fe:	4798      	blx	r3
   25100:	4b2a      	ldr	r3, [pc, #168]	; (251ac <spi_data_write+0x1c4>)
   25102:	0018      	movs	r0, r3
   25104:	4b27      	ldr	r3, [pc, #156]	; (251a4 <spi_data_write+0x1bc>)
   25106:	4798      	blx	r3
			result = N_FAIL;
   25108:	2313      	movs	r3, #19
   2510a:	18fb      	adds	r3, r7, r3
   2510c:	2200      	movs	r2, #0
   2510e:	701a      	strb	r2, [r3, #0]
			break;
   25110:	e037      	b.n	25182 <spi_data_write+0x19a>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
   25112:	4b29      	ldr	r3, [pc, #164]	; (251b8 <spi_data_write+0x1d0>)
   25114:	781b      	ldrb	r3, [r3, #0]
   25116:	2b00      	cmp	r3, #0
   25118:	d11b      	bne.n	25152 <spi_data_write+0x16a>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
   2511a:	230c      	movs	r3, #12
   2511c:	18fb      	adds	r3, r7, r3
   2511e:	2102      	movs	r1, #2
   25120:	0018      	movs	r0, r3
   25122:	4b1c      	ldr	r3, [pc, #112]	; (25194 <spi_data_write+0x1ac>)
   25124:	4798      	blx	r3
   25126:	1e03      	subs	r3, r0, #0
   25128:	d013      	beq.n	25152 <spi_data_write+0x16a>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
   2512a:	23d7      	movs	r3, #215	; 0xd7
   2512c:	009a      	lsls	r2, r3, #2
   2512e:	491b      	ldr	r1, [pc, #108]	; (2519c <spi_data_write+0x1b4>)
   25130:	4b1b      	ldr	r3, [pc, #108]	; (251a0 <spi_data_write+0x1b8>)
   25132:	0018      	movs	r0, r3
   25134:	4b1b      	ldr	r3, [pc, #108]	; (251a4 <spi_data_write+0x1bc>)
   25136:	4798      	blx	r3
   25138:	4b20      	ldr	r3, [pc, #128]	; (251bc <spi_data_write+0x1d4>)
   2513a:	0018      	movs	r0, r3
   2513c:	4b19      	ldr	r3, [pc, #100]	; (251a4 <spi_data_write+0x1bc>)
   2513e:	4798      	blx	r3
   25140:	4b1a      	ldr	r3, [pc, #104]	; (251ac <spi_data_write+0x1c4>)
   25142:	0018      	movs	r0, r3
   25144:	4b17      	ldr	r3, [pc, #92]	; (251a4 <spi_data_write+0x1bc>)
   25146:	4798      	blx	r3
				result = N_FAIL;
   25148:	2313      	movs	r3, #19
   2514a:	18fb      	adds	r3, r7, r3
   2514c:	2200      	movs	r2, #0
   2514e:	701a      	strb	r2, [r3, #0]
				break;
   25150:	e017      	b.n	25182 <spi_data_write+0x19a>
			}
		}

		ix += nbytes;
   25152:	2316      	movs	r3, #22
   25154:	18fb      	adds	r3, r7, r3
   25156:	881a      	ldrh	r2, [r3, #0]
   25158:	2314      	movs	r3, #20
   2515a:	18fb      	adds	r3, r7, r3
   2515c:	881b      	ldrh	r3, [r3, #0]
   2515e:	18d3      	adds	r3, r2, r3
   25160:	b29a      	uxth	r2, r3
   25162:	2316      	movs	r3, #22
   25164:	18fb      	adds	r3, r7, r3
   25166:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
   25168:	1cbb      	adds	r3, r7, #2
   2516a:	1cb9      	adds	r1, r7, #2
   2516c:	2214      	movs	r2, #20
   2516e:	18ba      	adds	r2, r7, r2
   25170:	8809      	ldrh	r1, [r1, #0]
   25172:	8812      	ldrh	r2, [r2, #0]
   25174:	1a8a      	subs	r2, r1, r2
   25176:	801a      	strh	r2, [r3, #0]
	} while (sz);
   25178:	1cbb      	adds	r3, r7, #2
   2517a:	881b      	ldrh	r3, [r3, #0]
   2517c:	2b00      	cmp	r3, #0
   2517e:	d000      	beq.n	25182 <spi_data_write+0x19a>
   25180:	e745      	b.n	2500e <spi_data_write+0x26>


	return result;
   25182:	2313      	movs	r3, #19
   25184:	18fb      	adds	r3, r7, r3
   25186:	781b      	ldrb	r3, [r3, #0]
   25188:	b25b      	sxtb	r3, r3
}
   2518a:	0018      	movs	r0, r3
   2518c:	46bd      	mov	sp, r7
   2518e:	b006      	add	sp, #24
   25190:	bd80      	pop	{r7, pc}
   25192:	46c0      	nop			; (mov r8, r8)
   25194:	00024071 	.word	0x00024071
   25198:	00000349 	.word	0x00000349
   2519c:	0003a110 	.word	0x0003a110
   251a0:	00039ae8 	.word	0x00039ae8
   251a4:	0001eb7d 	.word	0x0001eb7d
   251a8:	00039db0 	.word	0x00039db0
   251ac:	00039b28 	.word	0x00039b28
   251b0:	00000352 	.word	0x00000352
   251b4:	00039de8 	.word	0x00039de8
   251b8:	20003eec 	.word	0x20003eec
   251bc:	00039e1c 	.word	0x00039e1c

000251c0 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
   251c0:	b590      	push	{r4, r7, lr}
   251c2:	b087      	sub	sp, #28
   251c4:	af02      	add	r7, sp, #8
   251c6:	6078      	str	r0, [r7, #4]
   251c8:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   251ca:	230f      	movs	r3, #15
   251cc:	18fb      	adds	r3, r7, r3
   251ce:	220a      	movs	r2, #10
   251d0:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   251d2:	230c      	movs	r3, #12
   251d4:	18fb      	adds	r3, r7, r3
   251d6:	2201      	movs	r2, #1
   251d8:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
   251da:	230e      	movs	r3, #14
   251dc:	18fb      	adds	r3, r7, r3
   251de:	22c9      	movs	r2, #201	; 0xc9
   251e0:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
   251e2:	230d      	movs	r3, #13
   251e4:	18fb      	adds	r3, r7, r3
   251e6:	2200      	movs	r2, #0
   251e8:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
   251ea:	687b      	ldr	r3, [r7, #4]
   251ec:	2b30      	cmp	r3, #48	; 0x30
   251ee:	d808      	bhi.n	25202 <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
   251f0:	230e      	movs	r3, #14
   251f2:	18fb      	adds	r3, r7, r3
   251f4:	22c3      	movs	r2, #195	; 0xc3
   251f6:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   251f8:	230d      	movs	r3, #13
   251fa:	18fb      	adds	r3, r7, r3
   251fc:	2201      	movs	r2, #1
   251fe:	701a      	strb	r2, [r3, #0]
   25200:	e007      	b.n	25212 <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
   25202:	230e      	movs	r3, #14
   25204:	18fb      	adds	r3, r7, r3
   25206:	22c9      	movs	r2, #201	; 0xc9
   25208:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   2520a:	230d      	movs	r3, #13
   2520c:	18fb      	adds	r3, r7, r3
   2520e:	2200      	movs	r2, #0
   25210:	701a      	strb	r2, [r3, #0]
		goto _FAIL_;
	}

#else

	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
   25212:	003a      	movs	r2, r7
   25214:	6879      	ldr	r1, [r7, #4]
   25216:	230e      	movs	r3, #14
   25218:	18fb      	adds	r3, r7, r3
   2521a:	7818      	ldrb	r0, [r3, #0]
   2521c:	230d      	movs	r3, #13
   2521e:	18fb      	adds	r3, r7, r3
   25220:	781b      	ldrb	r3, [r3, #0]
   25222:	9300      	str	r3, [sp, #0]
   25224:	2304      	movs	r3, #4
   25226:	4c2e      	ldr	r4, [pc, #184]	; (252e0 <spi_write_reg+0x120>)
   25228:	47a0      	blx	r4
   2522a:	0002      	movs	r2, r0
   2522c:	230c      	movs	r3, #12
   2522e:	18fb      	adds	r3, r7, r3
   25230:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   25232:	230c      	movs	r3, #12
   25234:	18fb      	adds	r3, r7, r3
   25236:	781b      	ldrb	r3, [r3, #0]
   25238:	b25b      	sxtb	r3, r3
   2523a:	2b01      	cmp	r3, #1
   2523c:	d010      	beq.n	25260 <spi_write_reg+0xa0>
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
   2523e:	4a29      	ldr	r2, [pc, #164]	; (252e4 <spi_write_reg+0x124>)
   25240:	4929      	ldr	r1, [pc, #164]	; (252e8 <spi_write_reg+0x128>)
   25242:	4b2a      	ldr	r3, [pc, #168]	; (252ec <spi_write_reg+0x12c>)
   25244:	0018      	movs	r0, r3
   25246:	4b2a      	ldr	r3, [pc, #168]	; (252f0 <spi_write_reg+0x130>)
   25248:	4798      	blx	r3
   2524a:	687a      	ldr	r2, [r7, #4]
   2524c:	4b29      	ldr	r3, [pc, #164]	; (252f4 <spi_write_reg+0x134>)
   2524e:	0011      	movs	r1, r2
   25250:	0018      	movs	r0, r3
   25252:	4b27      	ldr	r3, [pc, #156]	; (252f0 <spi_write_reg+0x130>)
   25254:	4798      	blx	r3
   25256:	4b28      	ldr	r3, [pc, #160]	; (252f8 <spi_write_reg+0x138>)
   25258:	0018      	movs	r0, r3
   2525a:	4b25      	ldr	r3, [pc, #148]	; (252f0 <spi_write_reg+0x130>)
   2525c:	4798      	blx	r3
		goto _FAIL_;
   2525e:	46c0      	nop			; (mov r8, r8)
	}

#endif
_FAIL_:
	if(result != N_OK)
   25260:	230c      	movs	r3, #12
   25262:	18fb      	adds	r3, r7, r3
   25264:	781b      	ldrb	r3, [r3, #0]
   25266:	b25b      	sxtb	r3, r3
   25268:	2b01      	cmp	r3, #1
   2526a:	d030      	beq.n	252ce <spi_write_reg+0x10e>
	{
		nm_bsp_sleep(1);
   2526c:	2001      	movs	r0, #1
   2526e:	4b23      	ldr	r3, [pc, #140]	; (252fc <spi_write_reg+0x13c>)
   25270:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   25272:	2300      	movs	r3, #0
   25274:	9300      	str	r3, [sp, #0]
   25276:	2300      	movs	r3, #0
   25278:	2200      	movs	r2, #0
   2527a:	2100      	movs	r1, #0
   2527c:	20cf      	movs	r0, #207	; 0xcf
   2527e:	4c20      	ldr	r4, [pc, #128]	; (25300 <spi_write_reg+0x140>)
   25280:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   25282:	20cf      	movs	r0, #207	; 0xcf
   25284:	4b1f      	ldr	r3, [pc, #124]	; (25304 <spi_write_reg+0x144>)
   25286:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
   25288:	23ea      	movs	r3, #234	; 0xea
   2528a:	009a      	lsls	r2, r3, #2
   2528c:	4916      	ldr	r1, [pc, #88]	; (252e8 <spi_write_reg+0x128>)
   2528e:	4b17      	ldr	r3, [pc, #92]	; (252ec <spi_write_reg+0x12c>)
   25290:	0018      	movs	r0, r3
   25292:	4b17      	ldr	r3, [pc, #92]	; (252f0 <spi_write_reg+0x130>)
   25294:	4798      	blx	r3
   25296:	230f      	movs	r3, #15
   25298:	18fb      	adds	r3, r7, r3
   2529a:	7819      	ldrb	r1, [r3, #0]
   2529c:	683b      	ldr	r3, [r7, #0]
   2529e:	687a      	ldr	r2, [r7, #4]
   252a0:	4819      	ldr	r0, [pc, #100]	; (25308 <spi_write_reg+0x148>)
   252a2:	4c13      	ldr	r4, [pc, #76]	; (252f0 <spi_write_reg+0x130>)
   252a4:	47a0      	blx	r4
   252a6:	4b14      	ldr	r3, [pc, #80]	; (252f8 <spi_write_reg+0x138>)
   252a8:	0018      	movs	r0, r3
   252aa:	4b11      	ldr	r3, [pc, #68]	; (252f0 <spi_write_reg+0x130>)
   252ac:	4798      	blx	r3
		nm_bsp_sleep(1);
   252ae:	2001      	movs	r0, #1
   252b0:	4b12      	ldr	r3, [pc, #72]	; (252fc <spi_write_reg+0x13c>)
   252b2:	4798      	blx	r3
		retry--;
   252b4:	230f      	movs	r3, #15
   252b6:	18fb      	adds	r3, r7, r3
   252b8:	781a      	ldrb	r2, [r3, #0]
   252ba:	230f      	movs	r3, #15
   252bc:	18fb      	adds	r3, r7, r3
   252be:	3a01      	subs	r2, #1
   252c0:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   252c2:	230f      	movs	r3, #15
   252c4:	18fb      	adds	r3, r7, r3
   252c6:	781b      	ldrb	r3, [r3, #0]
   252c8:	2b00      	cmp	r3, #0
   252ca:	d000      	beq.n	252ce <spi_write_reg+0x10e>
   252cc:	e78d      	b.n	251ea <spi_write_reg+0x2a>
	}

	return result;
   252ce:	230c      	movs	r3, #12
   252d0:	18fb      	adds	r3, r7, r3
   252d2:	781b      	ldrb	r3, [r3, #0]
   252d4:	b25b      	sxtb	r3, r3
}
   252d6:	0018      	movs	r0, r3
   252d8:	46bd      	mov	sp, r7
   252da:	b005      	add	sp, #20
   252dc:	bd90      	pop	{r4, r7, pc}
   252de:	46c0      	nop			; (mov r8, r8)
   252e0:	000246f5 	.word	0x000246f5
   252e4:	0000039d 	.word	0x0000039d
   252e8:	0003a120 	.word	0x0003a120
   252ec:	00039ae8 	.word	0x00039ae8
   252f0:	0001eb7d 	.word	0x0001eb7d
   252f4:	00039e54 	.word	0x00039e54
   252f8:	00039b28 	.word	0x00039b28
   252fc:	00021035 	.word	0x00021035
   25300:	00024179 	.word	0x00024179
   25304:	000245b9 	.word	0x000245b9
   25308:	00039e80 	.word	0x00039e80

0002530c <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
   2530c:	b590      	push	{r4, r7, lr}
   2530e:	b089      	sub	sp, #36	; 0x24
   25310:	af02      	add	r7, sp, #8
   25312:	60f8      	str	r0, [r7, #12]
   25314:	60b9      	str	r1, [r7, #8]
   25316:	1dbb      	adds	r3, r7, #6
   25318:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   2531a:	2316      	movs	r3, #22
   2531c:	18fb      	adds	r3, r7, r3
   2531e:	220a      	movs	r2, #10
   25320:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
   25322:	2315      	movs	r3, #21
   25324:	18fb      	adds	r3, r7, r3
   25326:	22c7      	movs	r2, #199	; 0xc7
   25328:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, NULL, size, 0);
   2532a:	1dbb      	adds	r3, r7, #6
   2532c:	881a      	ldrh	r2, [r3, #0]
   2532e:	68f9      	ldr	r1, [r7, #12]
   25330:	2315      	movs	r3, #21
   25332:	18fb      	adds	r3, r7, r3
   25334:	7818      	ldrb	r0, [r3, #0]
   25336:	2300      	movs	r3, #0
   25338:	9300      	str	r3, [sp, #0]
   2533a:	0013      	movs	r3, r2
   2533c:	2200      	movs	r2, #0
   2533e:	4c4d      	ldr	r4, [pc, #308]	; (25474 <nm_spi_write+0x168>)
   25340:	47a0      	blx	r4
   25342:	0002      	movs	r2, r0
   25344:	2317      	movs	r3, #23
   25346:	18fb      	adds	r3, r7, r3
   25348:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   2534a:	2317      	movs	r3, #23
   2534c:	18fb      	adds	r3, r7, r3
   2534e:	781b      	ldrb	r3, [r3, #0]
   25350:	b25b      	sxtb	r3, r3
   25352:	2b01      	cmp	r3, #1
   25354:	d010      	beq.n	25378 <nm_spi_write+0x6c>
		M2M_ERR( "[nmi spi]: Failed cmd, write block (%08x)...\n", addr);
   25356:	4a48      	ldr	r2, [pc, #288]	; (25478 <nm_spi_write+0x16c>)
   25358:	4948      	ldr	r1, [pc, #288]	; (2547c <nm_spi_write+0x170>)
   2535a:	4b49      	ldr	r3, [pc, #292]	; (25480 <nm_spi_write+0x174>)
   2535c:	0018      	movs	r0, r3
   2535e:	4b49      	ldr	r3, [pc, #292]	; (25484 <nm_spi_write+0x178>)
   25360:	4798      	blx	r3
   25362:	68fa      	ldr	r2, [r7, #12]
   25364:	4b48      	ldr	r3, [pc, #288]	; (25488 <nm_spi_write+0x17c>)
   25366:	0011      	movs	r1, r2
   25368:	0018      	movs	r0, r3
   2536a:	4b46      	ldr	r3, [pc, #280]	; (25484 <nm_spi_write+0x178>)
   2536c:	4798      	blx	r3
   2536e:	4b47      	ldr	r3, [pc, #284]	; (2548c <nm_spi_write+0x180>)
   25370:	0018      	movs	r0, r3
   25372:	4b44      	ldr	r3, [pc, #272]	; (25484 <nm_spi_write+0x178>)
   25374:	4798      	blx	r3
		goto _FAIL_;
   25376:	e03e      	b.n	253f6 <nm_spi_write+0xea>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
   25378:	2317      	movs	r3, #23
   2537a:	18fc      	adds	r4, r7, r3
   2537c:	1dbb      	adds	r3, r7, #6
   2537e:	881a      	ldrh	r2, [r3, #0]
   25380:	68bb      	ldr	r3, [r7, #8]
   25382:	0011      	movs	r1, r2
   25384:	0018      	movs	r0, r3
   25386:	4b42      	ldr	r3, [pc, #264]	; (25490 <nm_spi_write+0x184>)
   25388:	4798      	blx	r3
   2538a:	0003      	movs	r3, r0
   2538c:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   2538e:	2317      	movs	r3, #23
   25390:	18fb      	adds	r3, r7, r3
   25392:	781b      	ldrb	r3, [r3, #0]
   25394:	b25b      	sxtb	r3, r3
   25396:	2b01      	cmp	r3, #1
   25398:	d00e      	beq.n	253b8 <nm_spi_write+0xac>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   2539a:	4a3e      	ldr	r2, [pc, #248]	; (25494 <nm_spi_write+0x188>)
   2539c:	4937      	ldr	r1, [pc, #220]	; (2547c <nm_spi_write+0x170>)
   2539e:	4b38      	ldr	r3, [pc, #224]	; (25480 <nm_spi_write+0x174>)
   253a0:	0018      	movs	r0, r3
   253a2:	4b38      	ldr	r3, [pc, #224]	; (25484 <nm_spi_write+0x178>)
   253a4:	4798      	blx	r3
   253a6:	4b3c      	ldr	r3, [pc, #240]	; (25498 <nm_spi_write+0x18c>)
   253a8:	0018      	movs	r0, r3
   253aa:	4b36      	ldr	r3, [pc, #216]	; (25484 <nm_spi_write+0x178>)
   253ac:	4798      	blx	r3
   253ae:	4b37      	ldr	r3, [pc, #220]	; (2548c <nm_spi_write+0x180>)
   253b0:	0018      	movs	r0, r3
   253b2:	4b34      	ldr	r3, [pc, #208]	; (25484 <nm_spi_write+0x178>)
   253b4:	4798      	blx	r3
		goto _FAIL_;
   253b6:	e01e      	b.n	253f6 <nm_spi_write+0xea>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
   253b8:	2317      	movs	r3, #23
   253ba:	18fc      	adds	r4, r7, r3
   253bc:	2315      	movs	r3, #21
   253be:	18fb      	adds	r3, r7, r3
   253c0:	781b      	ldrb	r3, [r3, #0]
   253c2:	0018      	movs	r0, r3
   253c4:	4b35      	ldr	r3, [pc, #212]	; (2549c <nm_spi_write+0x190>)
   253c6:	4798      	blx	r3
   253c8:	0003      	movs	r3, r0
   253ca:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   253cc:	2317      	movs	r3, #23
   253ce:	18fb      	adds	r3, r7, r3
   253d0:	781b      	ldrb	r3, [r3, #0]
   253d2:	b25b      	sxtb	r3, r3
   253d4:	2b01      	cmp	r3, #1
   253d6:	d00e      	beq.n	253f6 <nm_spi_write+0xea>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   253d8:	4a31      	ldr	r2, [pc, #196]	; (254a0 <nm_spi_write+0x194>)
   253da:	4928      	ldr	r1, [pc, #160]	; (2547c <nm_spi_write+0x170>)
   253dc:	4b28      	ldr	r3, [pc, #160]	; (25480 <nm_spi_write+0x174>)
   253de:	0018      	movs	r0, r3
   253e0:	4b28      	ldr	r3, [pc, #160]	; (25484 <nm_spi_write+0x178>)
   253e2:	4798      	blx	r3
   253e4:	4b2c      	ldr	r3, [pc, #176]	; (25498 <nm_spi_write+0x18c>)
   253e6:	0018      	movs	r0, r3
   253e8:	4b26      	ldr	r3, [pc, #152]	; (25484 <nm_spi_write+0x178>)
   253ea:	4798      	blx	r3
   253ec:	4b27      	ldr	r3, [pc, #156]	; (2548c <nm_spi_write+0x180>)
   253ee:	0018      	movs	r0, r3
   253f0:	4b24      	ldr	r3, [pc, #144]	; (25484 <nm_spi_write+0x178>)
   253f2:	4798      	blx	r3
		goto _FAIL_;
   253f4:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
   253f6:	2317      	movs	r3, #23
   253f8:	18fb      	adds	r3, r7, r3
   253fa:	781b      	ldrb	r3, [r3, #0]
   253fc:	b25b      	sxtb	r3, r3
   253fe:	2b01      	cmp	r3, #1
   25400:	d030      	beq.n	25464 <nm_spi_write+0x158>
	{
		nm_bsp_sleep(1);
   25402:	2001      	movs	r0, #1
   25404:	4b27      	ldr	r3, [pc, #156]	; (254a4 <nm_spi_write+0x198>)
   25406:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   25408:	2300      	movs	r3, #0
   2540a:	9300      	str	r3, [sp, #0]
   2540c:	2300      	movs	r3, #0
   2540e:	2200      	movs	r2, #0
   25410:	2100      	movs	r1, #0
   25412:	20cf      	movs	r0, #207	; 0xcf
   25414:	4c24      	ldr	r4, [pc, #144]	; (254a8 <nm_spi_write+0x19c>)
   25416:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   25418:	20cf      	movs	r0, #207	; 0xcf
   2541a:	4b24      	ldr	r3, [pc, #144]	; (254ac <nm_spi_write+0x1a0>)
   2541c:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   2541e:	4a24      	ldr	r2, [pc, #144]	; (254b0 <nm_spi_write+0x1a4>)
   25420:	4916      	ldr	r1, [pc, #88]	; (2547c <nm_spi_write+0x170>)
   25422:	4b17      	ldr	r3, [pc, #92]	; (25480 <nm_spi_write+0x174>)
   25424:	0018      	movs	r0, r3
   25426:	4b17      	ldr	r3, [pc, #92]	; (25484 <nm_spi_write+0x178>)
   25428:	4798      	blx	r3
   2542a:	2316      	movs	r3, #22
   2542c:	18fb      	adds	r3, r7, r3
   2542e:	7819      	ldrb	r1, [r3, #0]
   25430:	1dbb      	adds	r3, r7, #6
   25432:	881b      	ldrh	r3, [r3, #0]
   25434:	68fa      	ldr	r2, [r7, #12]
   25436:	481f      	ldr	r0, [pc, #124]	; (254b4 <nm_spi_write+0x1a8>)
   25438:	4c12      	ldr	r4, [pc, #72]	; (25484 <nm_spi_write+0x178>)
   2543a:	47a0      	blx	r4
   2543c:	4b13      	ldr	r3, [pc, #76]	; (2548c <nm_spi_write+0x180>)
   2543e:	0018      	movs	r0, r3
   25440:	4b10      	ldr	r3, [pc, #64]	; (25484 <nm_spi_write+0x178>)
   25442:	4798      	blx	r3
		nm_bsp_sleep(1);
   25444:	2001      	movs	r0, #1
   25446:	4b17      	ldr	r3, [pc, #92]	; (254a4 <nm_spi_write+0x198>)
   25448:	4798      	blx	r3
		retry--;
   2544a:	2316      	movs	r3, #22
   2544c:	18fb      	adds	r3, r7, r3
   2544e:	781a      	ldrb	r2, [r3, #0]
   25450:	2316      	movs	r3, #22
   25452:	18fb      	adds	r3, r7, r3
   25454:	3a01      	subs	r2, #1
   25456:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   25458:	2316      	movs	r3, #22
   2545a:	18fb      	adds	r3, r7, r3
   2545c:	781b      	ldrb	r3, [r3, #0]
   2545e:	2b00      	cmp	r3, #0
   25460:	d000      	beq.n	25464 <nm_spi_write+0x158>
   25462:	e762      	b.n	2532a <nm_spi_write+0x1e>
	}


	return result;
   25464:	2317      	movs	r3, #23
   25466:	18fb      	adds	r3, r7, r3
   25468:	781b      	ldrb	r3, [r3, #0]
   2546a:	b25b      	sxtb	r3, r3
}
   2546c:	0018      	movs	r0, r3
   2546e:	46bd      	mov	sp, r7
   25470:	b007      	add	sp, #28
   25472:	bd90      	pop	{r4, r7, pc}
   25474:	000246f5 	.word	0x000246f5
   25478:	000003cf 	.word	0x000003cf
   2547c:	0003a130 	.word	0x0003a130
   25480:	00039ae8 	.word	0x00039ae8
   25484:	0001eb7d 	.word	0x0001eb7d
   25488:	00039e9c 	.word	0x00039e9c
   2548c:	00039b28 	.word	0x00039b28
   25490:	00024fe9 	.word	0x00024fe9
   25494:	000003d9 	.word	0x000003d9
   25498:	00039ecc 	.word	0x00039ecc
   2549c:	000244b9 	.word	0x000244b9
   254a0:	000003e1 	.word	0x000003e1
   254a4:	00021035 	.word	0x00021035
   254a8:	00024179 	.word	0x00024179
   254ac:	000245b9 	.word	0x000245b9
   254b0:	000003eb 	.word	0x000003eb
   254b4:	00039ef4 	.word	0x00039ef4

000254b8 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
   254b8:	b590      	push	{r4, r7, lr}
   254ba:	b087      	sub	sp, #28
   254bc:	af02      	add	r7, sp, #8
   254be:	6078      	str	r0, [r7, #4]
   254c0:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   254c2:	230f      	movs	r3, #15
   254c4:	18fb      	adds	r3, r7, r3
   254c6:	220a      	movs	r2, #10
   254c8:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   254ca:	230c      	movs	r3, #12
   254cc:	18fb      	adds	r3, r7, r3
   254ce:	2201      	movs	r2, #1
   254d0:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
   254d2:	230e      	movs	r3, #14
   254d4:	18fb      	adds	r3, r7, r3
   254d6:	22ca      	movs	r2, #202	; 0xca
   254d8:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
   254da:	230d      	movs	r3, #13
   254dc:	18fb      	adds	r3, r7, r3
   254de:	2200      	movs	r2, #0
   254e0:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
   254e2:	687b      	ldr	r3, [r7, #4]
   254e4:	2bff      	cmp	r3, #255	; 0xff
   254e6:	d808      	bhi.n	254fa <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
   254e8:	230e      	movs	r3, #14
   254ea:	18fb      	adds	r3, r7, r3
   254ec:	22c4      	movs	r2, #196	; 0xc4
   254ee:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   254f0:	230d      	movs	r3, #13
   254f2:	18fb      	adds	r3, r7, r3
   254f4:	2201      	movs	r2, #1
   254f6:	701a      	strb	r2, [r3, #0]
   254f8:	e007      	b.n	2550a <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
   254fa:	230e      	movs	r3, #14
   254fc:	18fb      	adds	r3, r7, r3
   254fe:	22ca      	movs	r2, #202	; 0xca
   25500:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   25502:	230d      	movs	r3, #13
   25504:	18fb      	adds	r3, r7, r3
   25506:	2200      	movs	r2, #0
   25508:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
   2550a:	2308      	movs	r3, #8
   2550c:	18fa      	adds	r2, r7, r3
   2550e:	6879      	ldr	r1, [r7, #4]
   25510:	230e      	movs	r3, #14
   25512:	18fb      	adds	r3, r7, r3
   25514:	7818      	ldrb	r0, [r3, #0]
   25516:	230d      	movs	r3, #13
   25518:	18fb      	adds	r3, r7, r3
   2551a:	781b      	ldrb	r3, [r3, #0]
   2551c:	9300      	str	r3, [sp, #0]
   2551e:	2304      	movs	r3, #4
   25520:	4c37      	ldr	r4, [pc, #220]	; (25600 <spi_read_reg+0x148>)
   25522:	47a0      	blx	r4
   25524:	0002      	movs	r2, r0
   25526:	230c      	movs	r3, #12
   25528:	18fb      	adds	r3, r7, r3
   2552a:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   2552c:	230c      	movs	r3, #12
   2552e:	18fb      	adds	r3, r7, r3
   25530:	781b      	ldrb	r3, [r3, #0]
   25532:	b25b      	sxtb	r3, r3
   25534:	2b01      	cmp	r3, #1
   25536:	d010      	beq.n	2555a <spi_read_reg+0xa2>
		M2M_ERR( "[nmi spi]: Failed cmd, read reg (%08x)...\n", addr);
   25538:	4a32      	ldr	r2, [pc, #200]	; (25604 <spi_read_reg+0x14c>)
   2553a:	4933      	ldr	r1, [pc, #204]	; (25608 <spi_read_reg+0x150>)
   2553c:	4b33      	ldr	r3, [pc, #204]	; (2560c <spi_read_reg+0x154>)
   2553e:	0018      	movs	r0, r3
   25540:	4b33      	ldr	r3, [pc, #204]	; (25610 <spi_read_reg+0x158>)
   25542:	4798      	blx	r3
   25544:	687a      	ldr	r2, [r7, #4]
   25546:	4b33      	ldr	r3, [pc, #204]	; (25614 <spi_read_reg+0x15c>)
   25548:	0011      	movs	r1, r2
   2554a:	0018      	movs	r0, r3
   2554c:	4b30      	ldr	r3, [pc, #192]	; (25610 <spi_read_reg+0x158>)
   2554e:	4798      	blx	r3
   25550:	4b31      	ldr	r3, [pc, #196]	; (25618 <spi_read_reg+0x160>)
   25552:	0018      	movs	r0, r3
   25554:	4b2e      	ldr	r3, [pc, #184]	; (25610 <spi_read_reg+0x158>)
   25556:	4798      	blx	r3
		goto _FAIL_;
   25558:	e014      	b.n	25584 <spi_read_reg+0xcc>
	}

#endif

	*u32data = tmp[0] |
   2555a:	2308      	movs	r3, #8
   2555c:	18fb      	adds	r3, r7, r3
   2555e:	781b      	ldrb	r3, [r3, #0]
   25560:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
   25562:	2308      	movs	r3, #8
   25564:	18fb      	adds	r3, r7, r3
   25566:	785b      	ldrb	r3, [r3, #1]
   25568:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
   2556a:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
   2556c:	2308      	movs	r3, #8
   2556e:	18fb      	adds	r3, r7, r3
   25570:	789b      	ldrb	r3, [r3, #2]
   25572:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
   25574:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
   25576:	2308      	movs	r3, #8
   25578:	18fb      	adds	r3, r7, r3
   2557a:	78db      	ldrb	r3, [r3, #3]
   2557c:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
   2557e:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
   25580:	683b      	ldr	r3, [r7, #0]
   25582:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
   25584:	230c      	movs	r3, #12
   25586:	18fb      	adds	r3, r7, r3
   25588:	781b      	ldrb	r3, [r3, #0]
   2558a:	b25b      	sxtb	r3, r3
   2558c:	2b01      	cmp	r3, #1
   2558e:	d02f      	beq.n	255f0 <spi_read_reg+0x138>
	{
		
		nm_bsp_sleep(1);
   25590:	2001      	movs	r0, #1
   25592:	4b22      	ldr	r3, [pc, #136]	; (2561c <spi_read_reg+0x164>)
   25594:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   25596:	2300      	movs	r3, #0
   25598:	9300      	str	r3, [sp, #0]
   2559a:	2300      	movs	r3, #0
   2559c:	2200      	movs	r2, #0
   2559e:	2100      	movs	r1, #0
   255a0:	20cf      	movs	r0, #207	; 0xcf
   255a2:	4c1f      	ldr	r4, [pc, #124]	; (25620 <spi_read_reg+0x168>)
   255a4:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   255a6:	20cf      	movs	r0, #207	; 0xcf
   255a8:	4b1e      	ldr	r3, [pc, #120]	; (25624 <spi_read_reg+0x16c>)
   255aa:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
   255ac:	4a1e      	ldr	r2, [pc, #120]	; (25628 <spi_read_reg+0x170>)
   255ae:	4916      	ldr	r1, [pc, #88]	; (25608 <spi_read_reg+0x150>)
   255b0:	4b16      	ldr	r3, [pc, #88]	; (2560c <spi_read_reg+0x154>)
   255b2:	0018      	movs	r0, r3
   255b4:	4b16      	ldr	r3, [pc, #88]	; (25610 <spi_read_reg+0x158>)
   255b6:	4798      	blx	r3
   255b8:	230f      	movs	r3, #15
   255ba:	18fb      	adds	r3, r7, r3
   255bc:	7819      	ldrb	r1, [r3, #0]
   255be:	687a      	ldr	r2, [r7, #4]
   255c0:	4b1a      	ldr	r3, [pc, #104]	; (2562c <spi_read_reg+0x174>)
   255c2:	0018      	movs	r0, r3
   255c4:	4b12      	ldr	r3, [pc, #72]	; (25610 <spi_read_reg+0x158>)
   255c6:	4798      	blx	r3
   255c8:	4b13      	ldr	r3, [pc, #76]	; (25618 <spi_read_reg+0x160>)
   255ca:	0018      	movs	r0, r3
   255cc:	4b10      	ldr	r3, [pc, #64]	; (25610 <spi_read_reg+0x158>)
   255ce:	4798      	blx	r3
		nm_bsp_sleep(1);
   255d0:	2001      	movs	r0, #1
   255d2:	4b12      	ldr	r3, [pc, #72]	; (2561c <spi_read_reg+0x164>)
   255d4:	4798      	blx	r3
		retry--;
   255d6:	230f      	movs	r3, #15
   255d8:	18fb      	adds	r3, r7, r3
   255da:	781a      	ldrb	r2, [r3, #0]
   255dc:	230f      	movs	r3, #15
   255de:	18fb      	adds	r3, r7, r3
   255e0:	3a01      	subs	r2, #1
   255e2:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   255e4:	230f      	movs	r3, #15
   255e6:	18fb      	adds	r3, r7, r3
   255e8:	781b      	ldrb	r3, [r3, #0]
   255ea:	2b00      	cmp	r3, #0
   255ec:	d000      	beq.n	255f0 <spi_read_reg+0x138>
   255ee:	e778      	b.n	254e2 <spi_read_reg+0x2a>
	}
		
	return result;
   255f0:	230c      	movs	r3, #12
   255f2:	18fb      	adds	r3, r7, r3
   255f4:	781b      	ldrb	r3, [r3, #0]
   255f6:	b25b      	sxtb	r3, r3
}
   255f8:	0018      	movs	r0, r3
   255fa:	46bd      	mov	sp, r7
   255fc:	b005      	add	sp, #20
   255fe:	bd90      	pop	{r4, r7, pc}
   25600:	000246f5 	.word	0x000246f5
   25604:	00000423 	.word	0x00000423
   25608:	0003a140 	.word	0x0003a140
   2560c:	00039ae8 	.word	0x00039ae8
   25610:	0001eb7d 	.word	0x0001eb7d
   25614:	00039f10 	.word	0x00039f10
   25618:	00039b28 	.word	0x00039b28
   2561c:	00021035 	.word	0x00021035
   25620:	00024179 	.word	0x00024179
   25624:	000245b9 	.word	0x000245b9
   25628:	00000435 	.word	0x00000435
   2562c:	00039f3c 	.word	0x00039f3c

00025630 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
   25630:	b590      	push	{r4, r7, lr}
   25632:	b089      	sub	sp, #36	; 0x24
   25634:	af02      	add	r7, sp, #8
   25636:	60f8      	str	r0, [r7, #12]
   25638:	60b9      	str	r1, [r7, #8]
   2563a:	1dbb      	adds	r3, r7, #6
   2563c:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
   2563e:	2316      	movs	r3, #22
   25640:	18fb      	adds	r3, r7, r3
   25642:	22c8      	movs	r2, #200	; 0xc8
   25644:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   25646:	2317      	movs	r3, #23
   25648:	18fb      	adds	r3, r7, r3
   2564a:	220a      	movs	r2, #10
   2564c:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
   2564e:	1dbb      	adds	r3, r7, #6
   25650:	881c      	ldrh	r4, [r3, #0]
   25652:	68ba      	ldr	r2, [r7, #8]
   25654:	68f9      	ldr	r1, [r7, #12]
   25656:	2316      	movs	r3, #22
   25658:	18fb      	adds	r3, r7, r3
   2565a:	7818      	ldrb	r0, [r3, #0]
   2565c:	2300      	movs	r3, #0
   2565e:	9300      	str	r3, [sp, #0]
   25660:	0023      	movs	r3, r4
   25662:	4c2e      	ldr	r4, [pc, #184]	; (2571c <nm_spi_read+0xec>)
   25664:	47a0      	blx	r4
   25666:	0002      	movs	r2, r0
   25668:	2315      	movs	r3, #21
   2566a:	18fb      	adds	r3, r7, r3
   2566c:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   2566e:	2315      	movs	r3, #21
   25670:	18fb      	adds	r3, r7, r3
   25672:	781b      	ldrb	r3, [r3, #0]
   25674:	b25b      	sxtb	r3, r3
   25676:	2b01      	cmp	r3, #1
   25678:	d010      	beq.n	2569c <nm_spi_read+0x6c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
   2567a:	4a29      	ldr	r2, [pc, #164]	; (25720 <nm_spi_read+0xf0>)
   2567c:	4929      	ldr	r1, [pc, #164]	; (25724 <nm_spi_read+0xf4>)
   2567e:	4b2a      	ldr	r3, [pc, #168]	; (25728 <nm_spi_read+0xf8>)
   25680:	0018      	movs	r0, r3
   25682:	4b2a      	ldr	r3, [pc, #168]	; (2572c <nm_spi_read+0xfc>)
   25684:	4798      	blx	r3
   25686:	68fa      	ldr	r2, [r7, #12]
   25688:	4b29      	ldr	r3, [pc, #164]	; (25730 <nm_spi_read+0x100>)
   2568a:	0011      	movs	r1, r2
   2568c:	0018      	movs	r0, r3
   2568e:	4b27      	ldr	r3, [pc, #156]	; (2572c <nm_spi_read+0xfc>)
   25690:	4798      	blx	r3
   25692:	4b28      	ldr	r3, [pc, #160]	; (25734 <nm_spi_read+0x104>)
   25694:	0018      	movs	r0, r3
   25696:	4b25      	ldr	r3, [pc, #148]	; (2572c <nm_spi_read+0xfc>)
   25698:	4798      	blx	r3
		goto _FAIL_;
   2569a:	46c0      	nop			; (mov r8, r8)
	}
#endif

_FAIL_:
	if(result != N_OK)
   2569c:	2315      	movs	r3, #21
   2569e:	18fb      	adds	r3, r7, r3
   256a0:	781b      	ldrb	r3, [r3, #0]
   256a2:	b25b      	sxtb	r3, r3
   256a4:	2b01      	cmp	r3, #1
   256a6:	d030      	beq.n	2570a <nm_spi_read+0xda>
	{
		nm_bsp_sleep(1);
   256a8:	2001      	movs	r0, #1
   256aa:	4b23      	ldr	r3, [pc, #140]	; (25738 <nm_spi_read+0x108>)
   256ac:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   256ae:	2300      	movs	r3, #0
   256b0:	9300      	str	r3, [sp, #0]
   256b2:	2300      	movs	r3, #0
   256b4:	2200      	movs	r2, #0
   256b6:	2100      	movs	r1, #0
   256b8:	20cf      	movs	r0, #207	; 0xcf
   256ba:	4c20      	ldr	r4, [pc, #128]	; (2573c <nm_spi_read+0x10c>)
   256bc:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   256be:	20cf      	movs	r0, #207	; 0xcf
   256c0:	4b1f      	ldr	r3, [pc, #124]	; (25740 <nm_spi_read+0x110>)
   256c2:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   256c4:	4a1f      	ldr	r2, [pc, #124]	; (25744 <nm_spi_read+0x114>)
   256c6:	4917      	ldr	r1, [pc, #92]	; (25724 <nm_spi_read+0xf4>)
   256c8:	4b17      	ldr	r3, [pc, #92]	; (25728 <nm_spi_read+0xf8>)
   256ca:	0018      	movs	r0, r3
   256cc:	4b17      	ldr	r3, [pc, #92]	; (2572c <nm_spi_read+0xfc>)
   256ce:	4798      	blx	r3
   256d0:	2317      	movs	r3, #23
   256d2:	18fb      	adds	r3, r7, r3
   256d4:	7819      	ldrb	r1, [r3, #0]
   256d6:	1dbb      	adds	r3, r7, #6
   256d8:	881b      	ldrh	r3, [r3, #0]
   256da:	68fa      	ldr	r2, [r7, #12]
   256dc:	481a      	ldr	r0, [pc, #104]	; (25748 <nm_spi_read+0x118>)
   256de:	4c13      	ldr	r4, [pc, #76]	; (2572c <nm_spi_read+0xfc>)
   256e0:	47a0      	blx	r4
   256e2:	4b14      	ldr	r3, [pc, #80]	; (25734 <nm_spi_read+0x104>)
   256e4:	0018      	movs	r0, r3
   256e6:	4b11      	ldr	r3, [pc, #68]	; (2572c <nm_spi_read+0xfc>)
   256e8:	4798      	blx	r3
		nm_bsp_sleep(1);
   256ea:	2001      	movs	r0, #1
   256ec:	4b12      	ldr	r3, [pc, #72]	; (25738 <nm_spi_read+0x108>)
   256ee:	4798      	blx	r3
		retry--;
   256f0:	2317      	movs	r3, #23
   256f2:	18fb      	adds	r3, r7, r3
   256f4:	781a      	ldrb	r2, [r3, #0]
   256f6:	2317      	movs	r3, #23
   256f8:	18fb      	adds	r3, r7, r3
   256fa:	3a01      	subs	r2, #1
   256fc:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   256fe:	2317      	movs	r3, #23
   25700:	18fb      	adds	r3, r7, r3
   25702:	781b      	ldrb	r3, [r3, #0]
   25704:	2b00      	cmp	r3, #0
   25706:	d000      	beq.n	2570a <nm_spi_read+0xda>
   25708:	e7a1      	b.n	2564e <nm_spi_read+0x1e>
	}

	return result;
   2570a:	2315      	movs	r3, #21
   2570c:	18fb      	adds	r3, r7, r3
   2570e:	781b      	ldrb	r3, [r3, #0]
   25710:	b25b      	sxtb	r3, r3
}
   25712:	0018      	movs	r0, r3
   25714:	46bd      	mov	sp, r7
   25716:	b007      	add	sp, #28
   25718:	bd90      	pop	{r4, r7, pc}
   2571a:	46c0      	nop			; (mov r8, r8)
   2571c:	000246f5 	.word	0x000246f5
   25720:	00000472 	.word	0x00000472
   25724:	0003a150 	.word	0x0003a150
   25728:	00039ae8 	.word	0x00039ae8
   2572c:	0001eb7d 	.word	0x0001eb7d
   25730:	00039f54 	.word	0x00039f54
   25734:	00039b28 	.word	0x00039b28
   25738:	00021035 	.word	0x00021035
   2573c:	00024179 	.word	0x00024179
   25740:	000245b9 	.word	0x000245b9
   25744:	0000047d 	.word	0x0000047d
   25748:	00039ef4 	.word	0x00039ef4

0002574c <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
   2574c:	b580      	push	{r7, lr}
   2574e:	b082      	sub	sp, #8
   25750:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
   25752:	4b0c      	ldr	r3, [pc, #48]	; (25784 <spi_init_pkt_sz+0x38>)
   25754:	0018      	movs	r0, r3
   25756:	4b0c      	ldr	r3, [pc, #48]	; (25788 <spi_init_pkt_sz+0x3c>)
   25758:	4798      	blx	r3
   2575a:	0003      	movs	r3, r0
   2575c:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
   2575e:	687b      	ldr	r3, [r7, #4]
   25760:	2270      	movs	r2, #112	; 0x70
   25762:	4393      	bics	r3, r2
   25764:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
   25766:	687b      	ldr	r3, [r7, #4]
   25768:	2250      	movs	r2, #80	; 0x50
   2576a:	4313      	orrs	r3, r2
   2576c:	607b      	str	r3, [r7, #4]
   2576e:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
   25770:	687b      	ldr	r3, [r7, #4]
   25772:	4a04      	ldr	r2, [pc, #16]	; (25784 <spi_init_pkt_sz+0x38>)
   25774:	0019      	movs	r1, r3
   25776:	0010      	movs	r0, r2
   25778:	4b04      	ldr	r3, [pc, #16]	; (2578c <spi_init_pkt_sz+0x40>)
   2577a:	4798      	blx	r3
}
   2577c:	46c0      	nop			; (mov r8, r8)
   2577e:	46bd      	mov	sp, r7
   25780:	b002      	add	sp, #8
   25782:	bd80      	pop	{r7, pc}
   25784:	0000e824 	.word	0x0000e824
   25788:	00025925 	.word	0x00025925
   2578c:	00025999 	.word	0x00025999

00025790 <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
   25790:	b590      	push	{r4, r7, lr}
   25792:	b083      	sub	sp, #12
   25794:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
   25796:	2300      	movs	r3, #0
   25798:	9300      	str	r3, [sp, #0]
   2579a:	2300      	movs	r3, #0
   2579c:	2200      	movs	r2, #0
   2579e:	2100      	movs	r1, #0
   257a0:	20cf      	movs	r0, #207	; 0xcf
   257a2:	4c05      	ldr	r4, [pc, #20]	; (257b8 <nm_spi_reset+0x28>)
   257a4:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
   257a6:	20cf      	movs	r0, #207	; 0xcf
   257a8:	4b04      	ldr	r3, [pc, #16]	; (257bc <nm_spi_reset+0x2c>)
   257aa:	4798      	blx	r3
	return M2M_SUCCESS;
   257ac:	2300      	movs	r3, #0
}
   257ae:	0018      	movs	r0, r3
   257b0:	46bd      	mov	sp, r7
   257b2:	b001      	add	sp, #4
   257b4:	bd90      	pop	{r4, r7, pc}
   257b6:	46c0      	nop			; (mov r8, r8)
   257b8:	00024179 	.word	0x00024179
   257bc:	000245b9 	.word	0x000245b9

000257c0 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
   257c0:	b580      	push	{r7, lr}
   257c2:	b082      	sub	sp, #8
   257c4:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
   257c6:	2300      	movs	r3, #0
   257c8:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
   257ca:	4b40      	ldr	r3, [pc, #256]	; (258cc <nm_spi_init+0x10c>)
   257cc:	2200      	movs	r2, #0
   257ce:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
   257d0:	003b      	movs	r3, r7
   257d2:	4a3f      	ldr	r2, [pc, #252]	; (258d0 <nm_spi_init+0x110>)
   257d4:	0019      	movs	r1, r3
   257d6:	0010      	movs	r0, r2
   257d8:	4b3e      	ldr	r3, [pc, #248]	; (258d4 <nm_spi_init+0x114>)
   257da:	4798      	blx	r3
   257dc:	1e03      	subs	r3, r0, #0
   257de:	d129      	bne.n	25834 <nm_spi_init+0x74>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
   257e0:	4b3a      	ldr	r3, [pc, #232]	; (258cc <nm_spi_init+0x10c>)
   257e2:	2201      	movs	r2, #1
   257e4:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
   257e6:	2398      	movs	r3, #152	; 0x98
   257e8:	00da      	lsls	r2, r3, #3
   257ea:	493b      	ldr	r1, [pc, #236]	; (258d8 <nm_spi_init+0x118>)
   257ec:	4b3b      	ldr	r3, [pc, #236]	; (258dc <nm_spi_init+0x11c>)
   257ee:	0018      	movs	r0, r3
   257f0:	4b3b      	ldr	r3, [pc, #236]	; (258e0 <nm_spi_init+0x120>)
   257f2:	4798      	blx	r3
   257f4:	4b3b      	ldr	r3, [pc, #236]	; (258e4 <nm_spi_init+0x124>)
   257f6:	0018      	movs	r0, r3
   257f8:	4b39      	ldr	r3, [pc, #228]	; (258e0 <nm_spi_init+0x120>)
   257fa:	4798      	blx	r3
   257fc:	4b3a      	ldr	r3, [pc, #232]	; (258e8 <nm_spi_init+0x128>)
   257fe:	0018      	movs	r0, r3
   25800:	4b37      	ldr	r3, [pc, #220]	; (258e0 <nm_spi_init+0x120>)
   25802:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
   25804:	003b      	movs	r3, r7
   25806:	4a32      	ldr	r2, [pc, #200]	; (258d0 <nm_spi_init+0x110>)
   25808:	0019      	movs	r1, r3
   2580a:	0010      	movs	r0, r2
   2580c:	4b31      	ldr	r3, [pc, #196]	; (258d4 <nm_spi_init+0x114>)
   2580e:	4798      	blx	r3
   25810:	1e03      	subs	r3, r0, #0
   25812:	d10f      	bne.n	25834 <nm_spi_init+0x74>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
   25814:	4a35      	ldr	r2, [pc, #212]	; (258ec <nm_spi_init+0x12c>)
   25816:	4930      	ldr	r1, [pc, #192]	; (258d8 <nm_spi_init+0x118>)
   25818:	4b30      	ldr	r3, [pc, #192]	; (258dc <nm_spi_init+0x11c>)
   2581a:	0018      	movs	r0, r3
   2581c:	4b30      	ldr	r3, [pc, #192]	; (258e0 <nm_spi_init+0x120>)
   2581e:	4798      	blx	r3
   25820:	4b33      	ldr	r3, [pc, #204]	; (258f0 <nm_spi_init+0x130>)
   25822:	0018      	movs	r0, r3
   25824:	4b2e      	ldr	r3, [pc, #184]	; (258e0 <nm_spi_init+0x120>)
   25826:	4798      	blx	r3
   25828:	4b2f      	ldr	r3, [pc, #188]	; (258e8 <nm_spi_init+0x128>)
   2582a:	0018      	movs	r0, r3
   2582c:	4b2c      	ldr	r3, [pc, #176]	; (258e0 <nm_spi_init+0x120>)
   2582e:	4798      	blx	r3
			return 0;
   25830:	2300      	movs	r3, #0
   25832:	e047      	b.n	258c4 <nm_spi_init+0x104>
		}
	}
	if(gu8Crc_off == 0)
   25834:	4b25      	ldr	r3, [pc, #148]	; (258cc <nm_spi_init+0x10c>)
   25836:	781b      	ldrb	r3, [r3, #0]
   25838:	2b00      	cmp	r3, #0
   2583a:	d126      	bne.n	2588a <nm_spi_init+0xca>
	{
		reg &= ~0xc;	/* disable crc checking */
   2583c:	683b      	ldr	r3, [r7, #0]
   2583e:	220c      	movs	r2, #12
   25840:	4393      	bics	r3, r2
   25842:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
   25844:	683b      	ldr	r3, [r7, #0]
   25846:	2270      	movs	r2, #112	; 0x70
   25848:	4393      	bics	r3, r2
   2584a:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
   2584c:	683b      	ldr	r3, [r7, #0]
   2584e:	2250      	movs	r2, #80	; 0x50
   25850:	4313      	orrs	r3, r2
   25852:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
   25854:	683b      	ldr	r3, [r7, #0]
   25856:	4a1e      	ldr	r2, [pc, #120]	; (258d0 <nm_spi_init+0x110>)
   25858:	0019      	movs	r1, r3
   2585a:	0010      	movs	r0, r2
   2585c:	4b25      	ldr	r3, [pc, #148]	; (258f4 <nm_spi_init+0x134>)
   2585e:	4798      	blx	r3
   25860:	1e03      	subs	r3, r0, #0
   25862:	d10f      	bne.n	25884 <nm_spi_init+0xc4>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
   25864:	4a24      	ldr	r2, [pc, #144]	; (258f8 <nm_spi_init+0x138>)
   25866:	491c      	ldr	r1, [pc, #112]	; (258d8 <nm_spi_init+0x118>)
   25868:	4b1c      	ldr	r3, [pc, #112]	; (258dc <nm_spi_init+0x11c>)
   2586a:	0018      	movs	r0, r3
   2586c:	4b1c      	ldr	r3, [pc, #112]	; (258e0 <nm_spi_init+0x120>)
   2586e:	4798      	blx	r3
   25870:	4b22      	ldr	r3, [pc, #136]	; (258fc <nm_spi_init+0x13c>)
   25872:	0018      	movs	r0, r3
   25874:	4b1a      	ldr	r3, [pc, #104]	; (258e0 <nm_spi_init+0x120>)
   25876:	4798      	blx	r3
   25878:	4b1b      	ldr	r3, [pc, #108]	; (258e8 <nm_spi_init+0x128>)
   2587a:	0018      	movs	r0, r3
   2587c:	4b18      	ldr	r3, [pc, #96]	; (258e0 <nm_spi_init+0x120>)
   2587e:	4798      	blx	r3
			return 0;
   25880:	2300      	movs	r3, #0
   25882:	e01f      	b.n	258c4 <nm_spi_init+0x104>
		}
		gu8Crc_off = 1;
   25884:	4b11      	ldr	r3, [pc, #68]	; (258cc <nm_spi_init+0x10c>)
   25886:	2201      	movs	r2, #1
   25888:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
   2588a:	1d3a      	adds	r2, r7, #4
   2588c:	2380      	movs	r3, #128	; 0x80
   2588e:	015b      	lsls	r3, r3, #5
   25890:	0011      	movs	r1, r2
   25892:	0018      	movs	r0, r3
   25894:	4b0f      	ldr	r3, [pc, #60]	; (258d4 <nm_spi_init+0x114>)
   25896:	4798      	blx	r3
   25898:	1e03      	subs	r3, r0, #0
   2589a:	d110      	bne.n	258be <nm_spi_init+0xfe>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
   2589c:	4a18      	ldr	r2, [pc, #96]	; (25900 <nm_spi_init+0x140>)
   2589e:	490e      	ldr	r1, [pc, #56]	; (258d8 <nm_spi_init+0x118>)
   258a0:	4b0e      	ldr	r3, [pc, #56]	; (258dc <nm_spi_init+0x11c>)
   258a2:	0018      	movs	r0, r3
   258a4:	4b0e      	ldr	r3, [pc, #56]	; (258e0 <nm_spi_init+0x120>)
   258a6:	4798      	blx	r3
   258a8:	4b16      	ldr	r3, [pc, #88]	; (25904 <nm_spi_init+0x144>)
   258aa:	0018      	movs	r0, r3
   258ac:	4b0c      	ldr	r3, [pc, #48]	; (258e0 <nm_spi_init+0x120>)
   258ae:	4798      	blx	r3
   258b0:	4b0d      	ldr	r3, [pc, #52]	; (258e8 <nm_spi_init+0x128>)
   258b2:	0018      	movs	r0, r3
   258b4:	4b0a      	ldr	r3, [pc, #40]	; (258e0 <nm_spi_init+0x120>)
   258b6:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
   258b8:	2306      	movs	r3, #6
   258ba:	425b      	negs	r3, r3
   258bc:	e002      	b.n	258c4 <nm_spi_init+0x104>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
   258be:	4b12      	ldr	r3, [pc, #72]	; (25908 <nm_spi_init+0x148>)
   258c0:	4798      	blx	r3


	return M2M_SUCCESS;
   258c2:	2300      	movs	r3, #0
}
   258c4:	0018      	movs	r0, r3
   258c6:	46bd      	mov	sp, r7
   258c8:	b002      	add	sp, #8
   258ca:	bd80      	pop	{r7, pc}
   258cc:	20003eec 	.word	0x20003eec
   258d0:	0000e824 	.word	0x0000e824
   258d4:	000254b9 	.word	0x000254b9
   258d8:	0003a15c 	.word	0x0003a15c
   258dc:	00039ae8 	.word	0x00039ae8
   258e0:	0001eb7d 	.word	0x0001eb7d
   258e4:	00039f84 	.word	0x00039f84
   258e8:	00039b28 	.word	0x00039b28
   258ec:	000004c3 	.word	0x000004c3
   258f0:	00039fd4 	.word	0x00039fd4
   258f4:	000251c1 	.word	0x000251c1
   258f8:	000004cd 	.word	0x000004cd
   258fc:	0003a004 	.word	0x0003a004
   25900:	000004d7 	.word	0x000004d7
   25904:	0003a038 	.word	0x0003a038
   25908:	0002574d 	.word	0x0002574d

0002590c <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
   2590c:	b580      	push	{r7, lr}
   2590e:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
   25910:	4b03      	ldr	r3, [pc, #12]	; (25920 <nm_spi_deinit+0x14>)
   25912:	2200      	movs	r2, #0
   25914:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
   25916:	2300      	movs	r3, #0
}
   25918:	0018      	movs	r0, r3
   2591a:	46bd      	mov	sp, r7
   2591c:	bd80      	pop	{r7, pc}
   2591e:	46c0      	nop			; (mov r8, r8)
   25920:	20003eec 	.word	0x20003eec

00025924 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
   25924:	b580      	push	{r7, lr}
   25926:	b084      	sub	sp, #16
   25928:	af00      	add	r7, sp, #0
   2592a:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
   2592c:	230c      	movs	r3, #12
   2592e:	18fa      	adds	r2, r7, r3
   25930:	687b      	ldr	r3, [r7, #4]
   25932:	0011      	movs	r1, r2
   25934:	0018      	movs	r0, r3
   25936:	4b03      	ldr	r3, [pc, #12]	; (25944 <nm_spi_read_reg+0x20>)
   25938:	4798      	blx	r3

	return u32Val;
   2593a:	68fb      	ldr	r3, [r7, #12]
}
   2593c:	0018      	movs	r0, r3
   2593e:	46bd      	mov	sp, r7
   25940:	b004      	add	sp, #16
   25942:	bd80      	pop	{r7, pc}
   25944:	000254b9 	.word	0x000254b9

00025948 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   25948:	b590      	push	{r4, r7, lr}
   2594a:	b085      	sub	sp, #20
   2594c:	af00      	add	r7, sp, #0
   2594e:	6078      	str	r0, [r7, #4]
   25950:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
   25952:	230f      	movs	r3, #15
   25954:	18fc      	adds	r4, r7, r3
   25956:	683a      	ldr	r2, [r7, #0]
   25958:	687b      	ldr	r3, [r7, #4]
   2595a:	0011      	movs	r1, r2
   2595c:	0018      	movs	r0, r3
   2595e:	4b0d      	ldr	r3, [pc, #52]	; (25994 <nm_spi_read_reg_with_ret+0x4c>)
   25960:	4798      	blx	r3
   25962:	0003      	movs	r3, r0
   25964:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   25966:	230f      	movs	r3, #15
   25968:	18fb      	adds	r3, r7, r3
   2596a:	781b      	ldrb	r3, [r3, #0]
   2596c:	b25b      	sxtb	r3, r3
   2596e:	2b01      	cmp	r3, #1
   25970:	d104      	bne.n	2597c <nm_spi_read_reg_with_ret+0x34>
   25972:	230f      	movs	r3, #15
   25974:	18fb      	adds	r3, r7, r3
   25976:	2200      	movs	r2, #0
   25978:	701a      	strb	r2, [r3, #0]
   2597a:	e003      	b.n	25984 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   2597c:	230f      	movs	r3, #15
   2597e:	18fb      	adds	r3, r7, r3
   25980:	22fa      	movs	r2, #250	; 0xfa
   25982:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   25984:	230f      	movs	r3, #15
   25986:	18fb      	adds	r3, r7, r3
   25988:	781b      	ldrb	r3, [r3, #0]
   2598a:	b25b      	sxtb	r3, r3
}
   2598c:	0018      	movs	r0, r3
   2598e:	46bd      	mov	sp, r7
   25990:	b005      	add	sp, #20
   25992:	bd90      	pop	{r4, r7, pc}
   25994:	000254b9 	.word	0x000254b9

00025998 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
   25998:	b590      	push	{r4, r7, lr}
   2599a:	b085      	sub	sp, #20
   2599c:	af00      	add	r7, sp, #0
   2599e:	6078      	str	r0, [r7, #4]
   259a0:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
   259a2:	230f      	movs	r3, #15
   259a4:	18fc      	adds	r4, r7, r3
   259a6:	683a      	ldr	r2, [r7, #0]
   259a8:	687b      	ldr	r3, [r7, #4]
   259aa:	0011      	movs	r1, r2
   259ac:	0018      	movs	r0, r3
   259ae:	4b0d      	ldr	r3, [pc, #52]	; (259e4 <nm_spi_write_reg+0x4c>)
   259b0:	4798      	blx	r3
   259b2:	0003      	movs	r3, r0
   259b4:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   259b6:	230f      	movs	r3, #15
   259b8:	18fb      	adds	r3, r7, r3
   259ba:	781b      	ldrb	r3, [r3, #0]
   259bc:	b25b      	sxtb	r3, r3
   259be:	2b01      	cmp	r3, #1
   259c0:	d104      	bne.n	259cc <nm_spi_write_reg+0x34>
   259c2:	230f      	movs	r3, #15
   259c4:	18fb      	adds	r3, r7, r3
   259c6:	2200      	movs	r2, #0
   259c8:	701a      	strb	r2, [r3, #0]
   259ca:	e003      	b.n	259d4 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   259cc:	230f      	movs	r3, #15
   259ce:	18fb      	adds	r3, r7, r3
   259d0:	22fa      	movs	r2, #250	; 0xfa
   259d2:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   259d4:	230f      	movs	r3, #15
   259d6:	18fb      	adds	r3, r7, r3
   259d8:	781b      	ldrb	r3, [r3, #0]
   259da:	b25b      	sxtb	r3, r3
}
   259dc:	0018      	movs	r0, r3
   259de:	46bd      	mov	sp, r7
   259e0:	b005      	add	sp, #20
   259e2:	bd90      	pop	{r4, r7, pc}
   259e4:	000251c1 	.word	0x000251c1

000259e8 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   259e8:	b590      	push	{r4, r7, lr}
   259ea:	b087      	sub	sp, #28
   259ec:	af00      	add	r7, sp, #0
   259ee:	60f8      	str	r0, [r7, #12]
   259f0:	60b9      	str	r1, [r7, #8]
   259f2:	1dbb      	adds	r3, r7, #6
   259f4:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
   259f6:	2317      	movs	r3, #23
   259f8:	18fc      	adds	r4, r7, r3
   259fa:	1dbb      	adds	r3, r7, #6
   259fc:	881a      	ldrh	r2, [r3, #0]
   259fe:	68b9      	ldr	r1, [r7, #8]
   25a00:	68fb      	ldr	r3, [r7, #12]
   25a02:	0018      	movs	r0, r3
   25a04:	4b0d      	ldr	r3, [pc, #52]	; (25a3c <nm_spi_read_block+0x54>)
   25a06:	4798      	blx	r3
   25a08:	0003      	movs	r3, r0
   25a0a:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   25a0c:	2317      	movs	r3, #23
   25a0e:	18fb      	adds	r3, r7, r3
   25a10:	781b      	ldrb	r3, [r3, #0]
   25a12:	b25b      	sxtb	r3, r3
   25a14:	2b01      	cmp	r3, #1
   25a16:	d104      	bne.n	25a22 <nm_spi_read_block+0x3a>
   25a18:	2317      	movs	r3, #23
   25a1a:	18fb      	adds	r3, r7, r3
   25a1c:	2200      	movs	r2, #0
   25a1e:	701a      	strb	r2, [r3, #0]
   25a20:	e003      	b.n	25a2a <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   25a22:	2317      	movs	r3, #23
   25a24:	18fb      	adds	r3, r7, r3
   25a26:	22fa      	movs	r2, #250	; 0xfa
   25a28:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   25a2a:	2317      	movs	r3, #23
   25a2c:	18fb      	adds	r3, r7, r3
   25a2e:	781b      	ldrb	r3, [r3, #0]
   25a30:	b25b      	sxtb	r3, r3
}
   25a32:	0018      	movs	r0, r3
   25a34:	46bd      	mov	sp, r7
   25a36:	b007      	add	sp, #28
   25a38:	bd90      	pop	{r4, r7, pc}
   25a3a:	46c0      	nop			; (mov r8, r8)
   25a3c:	00025631 	.word	0x00025631

00025a40 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   25a40:	b590      	push	{r4, r7, lr}
   25a42:	b087      	sub	sp, #28
   25a44:	af00      	add	r7, sp, #0
   25a46:	60f8      	str	r0, [r7, #12]
   25a48:	60b9      	str	r1, [r7, #8]
   25a4a:	1dbb      	adds	r3, r7, #6
   25a4c:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
   25a4e:	2317      	movs	r3, #23
   25a50:	18fc      	adds	r4, r7, r3
   25a52:	1dbb      	adds	r3, r7, #6
   25a54:	881a      	ldrh	r2, [r3, #0]
   25a56:	68b9      	ldr	r1, [r7, #8]
   25a58:	68fb      	ldr	r3, [r7, #12]
   25a5a:	0018      	movs	r0, r3
   25a5c:	4b0d      	ldr	r3, [pc, #52]	; (25a94 <nm_spi_write_block+0x54>)
   25a5e:	4798      	blx	r3
   25a60:	0003      	movs	r3, r0
   25a62:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   25a64:	2317      	movs	r3, #23
   25a66:	18fb      	adds	r3, r7, r3
   25a68:	781b      	ldrb	r3, [r3, #0]
   25a6a:	b25b      	sxtb	r3, r3
   25a6c:	2b01      	cmp	r3, #1
   25a6e:	d104      	bne.n	25a7a <nm_spi_write_block+0x3a>
   25a70:	2317      	movs	r3, #23
   25a72:	18fb      	adds	r3, r7, r3
   25a74:	2200      	movs	r2, #0
   25a76:	701a      	strb	r2, [r3, #0]
   25a78:	e003      	b.n	25a82 <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   25a7a:	2317      	movs	r3, #23
   25a7c:	18fb      	adds	r3, r7, r3
   25a7e:	22fa      	movs	r2, #250	; 0xfa
   25a80:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   25a82:	2317      	movs	r3, #23
   25a84:	18fb      	adds	r3, r7, r3
   25a86:	781b      	ldrb	r3, [r3, #0]
   25a88:	b25b      	sxtb	r3, r3
}
   25a8a:	0018      	movs	r0, r3
   25a8c:	46bd      	mov	sp, r7
   25a8e:	b007      	add	sp, #28
   25a90:	bd90      	pop	{r4, r7, pc}
   25a92:	46c0      	nop			; (mov r8, r8)
   25a94:	0002530d 	.word	0x0002530d

00025a98 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
   25a98:	b590      	push	{r4, r7, lr}
   25a9a:	b089      	sub	sp, #36	; 0x24
   25a9c:	af00      	add	r7, sp, #0
   25a9e:	60b9      	str	r1, [r7, #8]
   25aa0:	0011      	movs	r1, r2
   25aa2:	607b      	str	r3, [r7, #4]
   25aa4:	230f      	movs	r3, #15
   25aa6:	18fb      	adds	r3, r7, r3
   25aa8:	1c02      	adds	r2, r0, #0
   25aaa:	701a      	strb	r2, [r3, #0]
   25aac:	230e      	movs	r3, #14
   25aae:	18fb      	adds	r3, r7, r3
   25ab0:	1c0a      	adds	r2, r1, #0
   25ab2:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
   25ab4:	2330      	movs	r3, #48	; 0x30
   25ab6:	18fb      	adds	r3, r7, r3
   25ab8:	881b      	ldrh	r3, [r3, #0]
   25aba:	2b00      	cmp	r3, #0
   25abc:	d100      	bne.n	25ac0 <Socket_ReadSocketData+0x28>
   25abe:	e0d7      	b.n	25c70 <Socket_ReadSocketData+0x1d8>
   25ac0:	230f      	movs	r3, #15
   25ac2:	18fb      	adds	r3, r7, r3
   25ac4:	2200      	movs	r2, #0
   25ac6:	569a      	ldrsb	r2, [r3, r2]
   25ac8:	4b6b      	ldr	r3, [pc, #428]	; (25c78 <Socket_ReadSocketData+0x1e0>)
   25aca:	0112      	lsls	r2, r2, #4
   25acc:	58d3      	ldr	r3, [r2, r3]
   25ace:	2b00      	cmp	r3, #0
   25ad0:	d100      	bne.n	25ad4 <Socket_ReadSocketData+0x3c>
   25ad2:	e0cd      	b.n	25c70 <Socket_ReadSocketData+0x1d8>
   25ad4:	230f      	movs	r3, #15
   25ad6:	18fb      	adds	r3, r7, r3
   25ad8:	781b      	ldrb	r3, [r3, #0]
   25ada:	b25b      	sxtb	r3, r3
   25adc:	4a66      	ldr	r2, [pc, #408]	; (25c78 <Socket_ReadSocketData+0x1e0>)
   25ade:	011b      	lsls	r3, r3, #4
   25ae0:	18d3      	adds	r3, r2, r3
   25ae2:	3304      	adds	r3, #4
   25ae4:	881b      	ldrh	r3, [r3, #0]
   25ae6:	b29b      	uxth	r3, r3
   25ae8:	2b00      	cmp	r3, #0
   25aea:	d100      	bne.n	25aee <Socket_ReadSocketData+0x56>
   25aec:	e0c0      	b.n	25c70 <Socket_ReadSocketData+0x1d8>
   25aee:	230f      	movs	r3, #15
   25af0:	18fb      	adds	r3, r7, r3
   25af2:	781b      	ldrb	r3, [r3, #0]
   25af4:	b25b      	sxtb	r3, r3
   25af6:	4a60      	ldr	r2, [pc, #384]	; (25c78 <Socket_ReadSocketData+0x1e0>)
   25af8:	011b      	lsls	r3, r3, #4
   25afa:	18d3      	adds	r3, r2, r3
   25afc:	330a      	adds	r3, #10
   25afe:	781b      	ldrb	r3, [r3, #0]
   25b00:	b2db      	uxtb	r3, r3
   25b02:	2b01      	cmp	r3, #1
   25b04:	d000      	beq.n	25b08 <Socket_ReadSocketData+0x70>
   25b06:	e0b3      	b.n	25c70 <Socket_ReadSocketData+0x1d8>
	{
		uint32	u32Address = u32StartAddress;
   25b08:	687b      	ldr	r3, [r7, #4]
   25b0a:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
   25b0c:	68bb      	ldr	r3, [r7, #8]
   25b0e:	2230      	movs	r2, #48	; 0x30
   25b10:	18ba      	adds	r2, r7, r2
   25b12:	8812      	ldrh	r2, [r2, #0]
   25b14:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
   25b16:	2319      	movs	r3, #25
   25b18:	18fb      	adds	r3, r7, r3
   25b1a:	2201      	movs	r2, #1
   25b1c:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
   25b1e:	231a      	movs	r3, #26
   25b20:	18fb      	adds	r3, r7, r3
   25b22:	2230      	movs	r2, #48	; 0x30
   25b24:	18ba      	adds	r2, r7, r2
   25b26:	8812      	ldrh	r2, [r2, #0]
   25b28:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
   25b2a:	230f      	movs	r3, #15
   25b2c:	18fb      	adds	r3, r7, r3
   25b2e:	781b      	ldrb	r3, [r3, #0]
   25b30:	b25b      	sxtb	r3, r3
   25b32:	4a51      	ldr	r2, [pc, #324]	; (25c78 <Socket_ReadSocketData+0x1e0>)
   25b34:	011b      	lsls	r3, r3, #4
   25b36:	18d3      	adds	r3, r2, r3
   25b38:	3304      	adds	r3, #4
   25b3a:	881b      	ldrh	r3, [r3, #0]
   25b3c:	b29b      	uxth	r3, r3
   25b3e:	221a      	movs	r2, #26
   25b40:	18ba      	adds	r2, r7, r2
   25b42:	8812      	ldrh	r2, [r2, #0]
   25b44:	1ad3      	subs	r3, r2, r3
   25b46:	b29a      	uxth	r2, r3
   25b48:	2316      	movs	r3, #22
   25b4a:	18fb      	adds	r3, r7, r3
   25b4c:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
   25b4e:	2316      	movs	r3, #22
   25b50:	18fb      	adds	r3, r7, r3
   25b52:	2200      	movs	r2, #0
   25b54:	5e9b      	ldrsh	r3, [r3, r2]
   25b56:	2b00      	cmp	r3, #0
   25b58:	dd0f      	ble.n	25b7a <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
   25b5a:	2319      	movs	r3, #25
   25b5c:	18fb      	adds	r3, r7, r3
   25b5e:	2200      	movs	r2, #0
   25b60:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
   25b62:	230f      	movs	r3, #15
   25b64:	18fb      	adds	r3, r7, r3
   25b66:	2200      	movs	r2, #0
   25b68:	569a      	ldrsb	r2, [r3, r2]
   25b6a:	231a      	movs	r3, #26
   25b6c:	18fb      	adds	r3, r7, r3
   25b6e:	4942      	ldr	r1, [pc, #264]	; (25c78 <Socket_ReadSocketData+0x1e0>)
   25b70:	0112      	lsls	r2, r2, #4
   25b72:	188a      	adds	r2, r1, r2
   25b74:	3204      	adds	r2, #4
   25b76:	8812      	ldrh	r2, [r2, #0]
   25b78:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
   25b7a:	230f      	movs	r3, #15
   25b7c:	18fb      	adds	r3, r7, r3
   25b7e:	2200      	movs	r2, #0
   25b80:	569a      	ldrsb	r2, [r3, r2]
   25b82:	4b3d      	ldr	r3, [pc, #244]	; (25c78 <Socket_ReadSocketData+0x1e0>)
   25b84:	0112      	lsls	r2, r2, #4
   25b86:	58d1      	ldr	r1, [r2, r3]
   25b88:	2319      	movs	r3, #25
   25b8a:	18fb      	adds	r3, r7, r3
   25b8c:	781c      	ldrb	r4, [r3, #0]
   25b8e:	231a      	movs	r3, #26
   25b90:	18fb      	adds	r3, r7, r3
   25b92:	881a      	ldrh	r2, [r3, #0]
   25b94:	69f8      	ldr	r0, [r7, #28]
   25b96:	0023      	movs	r3, r4
   25b98:	4c38      	ldr	r4, [pc, #224]	; (25c7c <Socket_ReadSocketData+0x1e4>)
   25b9a:	47a0      	blx	r4
   25b9c:	1e03      	subs	r3, r0, #0
   25b9e:	d14f      	bne.n	25c40 <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
   25ba0:	230f      	movs	r3, #15
   25ba2:	18fb      	adds	r3, r7, r3
   25ba4:	2200      	movs	r2, #0
   25ba6:	569a      	ldrsb	r2, [r3, r2]
   25ba8:	4b33      	ldr	r3, [pc, #204]	; (25c78 <Socket_ReadSocketData+0x1e0>)
   25baa:	0112      	lsls	r2, r2, #4
   25bac:	58d2      	ldr	r2, [r2, r3]
   25bae:	68bb      	ldr	r3, [r7, #8]
   25bb0:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
   25bb2:	231a      	movs	r3, #26
   25bb4:	18fb      	adds	r3, r7, r3
   25bb6:	2200      	movs	r2, #0
   25bb8:	5e9a      	ldrsh	r2, [r3, r2]
   25bba:	68bb      	ldr	r3, [r7, #8]
   25bbc:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
   25bbe:	68bb      	ldr	r3, [r7, #8]
   25bc0:	88da      	ldrh	r2, [r3, #6]
   25bc2:	231a      	movs	r3, #26
   25bc4:	18fb      	adds	r3, r7, r3
   25bc6:	881b      	ldrh	r3, [r3, #0]
   25bc8:	1ad3      	subs	r3, r2, r3
   25bca:	b29a      	uxth	r2, r3
   25bcc:	68bb      	ldr	r3, [r7, #8]
   25bce:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
   25bd0:	4b2b      	ldr	r3, [pc, #172]	; (25c80 <Socket_ReadSocketData+0x1e8>)
   25bd2:	681b      	ldr	r3, [r3, #0]
   25bd4:	2b00      	cmp	r3, #0
   25bd6:	d00b      	beq.n	25bf0 <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
   25bd8:	4b29      	ldr	r3, [pc, #164]	; (25c80 <Socket_ReadSocketData+0x1e8>)
   25bda:	681b      	ldr	r3, [r3, #0]
   25bdc:	68bc      	ldr	r4, [r7, #8]
   25bde:	220e      	movs	r2, #14
   25be0:	18ba      	adds	r2, r7, r2
   25be2:	7811      	ldrb	r1, [r2, #0]
   25be4:	220f      	movs	r2, #15
   25be6:	18ba      	adds	r2, r7, r2
   25be8:	2000      	movs	r0, #0
   25bea:	5610      	ldrsb	r0, [r2, r0]
   25bec:	0022      	movs	r2, r4
   25bee:	4798      	blx	r3

				u16ReadCount -= u16Read;
   25bf0:	2330      	movs	r3, #48	; 0x30
   25bf2:	18f9      	adds	r1, r7, r3
   25bf4:	2330      	movs	r3, #48	; 0x30
   25bf6:	18fa      	adds	r2, r7, r3
   25bf8:	231a      	movs	r3, #26
   25bfa:	18fb      	adds	r3, r7, r3
   25bfc:	8812      	ldrh	r2, [r2, #0]
   25bfe:	881b      	ldrh	r3, [r3, #0]
   25c00:	1ad3      	subs	r3, r2, r3
   25c02:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
   25c04:	231a      	movs	r3, #26
   25c06:	18fb      	adds	r3, r7, r3
   25c08:	881b      	ldrh	r3, [r3, #0]
   25c0a:	69fa      	ldr	r2, [r7, #28]
   25c0c:	18d3      	adds	r3, r2, r3
   25c0e:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
   25c10:	230f      	movs	r3, #15
   25c12:	18fb      	adds	r3, r7, r3
   25c14:	781b      	ldrb	r3, [r3, #0]
   25c16:	b25b      	sxtb	r3, r3
   25c18:	4a17      	ldr	r2, [pc, #92]	; (25c78 <Socket_ReadSocketData+0x1e0>)
   25c1a:	011b      	lsls	r3, r3, #4
   25c1c:	18d3      	adds	r3, r2, r3
   25c1e:	330a      	adds	r3, #10
   25c20:	781b      	ldrb	r3, [r3, #0]
   25c22:	b2db      	uxtb	r3, r3
   25c24:	2b00      	cmp	r3, #0
   25c26:	d11c      	bne.n	25c62 <Socket_ReadSocketData+0x1ca>
   25c28:	2330      	movs	r3, #48	; 0x30
   25c2a:	18fb      	adds	r3, r7, r3
   25c2c:	881b      	ldrh	r3, [r3, #0]
   25c2e:	2b00      	cmp	r3, #0
   25c30:	d017      	beq.n	25c62 <Socket_ReadSocketData+0x1ca>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   25c32:	2301      	movs	r3, #1
   25c34:	2200      	movs	r2, #0
   25c36:	2100      	movs	r1, #0
   25c38:	2000      	movs	r0, #0
   25c3a:	4c10      	ldr	r4, [pc, #64]	; (25c7c <Socket_ReadSocketData+0x1e4>)
   25c3c:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
   25c3e:	e017      	b.n	25c70 <Socket_ReadSocketData+0x1d8>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
   25c40:	4b10      	ldr	r3, [pc, #64]	; (25c84 <Socket_ReadSocketData+0x1ec>)
   25c42:	0018      	movs	r0, r3
   25c44:	4b10      	ldr	r3, [pc, #64]	; (25c88 <Socket_ReadSocketData+0x1f0>)
   25c46:	4798      	blx	r3
   25c48:	2330      	movs	r3, #48	; 0x30
   25c4a:	18fb      	adds	r3, r7, r3
   25c4c:	881a      	ldrh	r2, [r3, #0]
   25c4e:	4b0f      	ldr	r3, [pc, #60]	; (25c8c <Socket_ReadSocketData+0x1f4>)
   25c50:	0011      	movs	r1, r2
   25c52:	0018      	movs	r0, r3
   25c54:	4b0c      	ldr	r3, [pc, #48]	; (25c88 <Socket_ReadSocketData+0x1f0>)
   25c56:	4798      	blx	r3
   25c58:	4b0d      	ldr	r3, [pc, #52]	; (25c90 <Socket_ReadSocketData+0x1f8>)
   25c5a:	0018      	movs	r0, r3
   25c5c:	4b0a      	ldr	r3, [pc, #40]	; (25c88 <Socket_ReadSocketData+0x1f0>)
   25c5e:	4798      	blx	r3
				break;
   25c60:	e006      	b.n	25c70 <Socket_ReadSocketData+0x1d8>
			}
		}while(u16ReadCount != 0);
   25c62:	2330      	movs	r3, #48	; 0x30
   25c64:	18fb      	adds	r3, r7, r3
   25c66:	881b      	ldrh	r3, [r3, #0]
   25c68:	2b00      	cmp	r3, #0
   25c6a:	d000      	beq.n	25c6e <Socket_ReadSocketData+0x1d6>
   25c6c:	e753      	b.n	25b16 <Socket_ReadSocketData+0x7e>
	}
}
   25c6e:	e7ff      	b.n	25c70 <Socket_ReadSocketData+0x1d8>
   25c70:	46c0      	nop			; (mov r8, r8)
   25c72:	46bd      	mov	sp, r7
   25c74:	b009      	add	sp, #36	; 0x24
   25c76:	bd90      	pop	{r4, r7, pc}
   25c78:	20005744 	.word	0x20005744
   25c7c:	00022491 	.word	0x00022491
   25c80:	200057f4 	.word	0x200057f4
   25c84:	0003a168 	.word	0x0003a168
   25c88:	0001eb7d 	.word	0x0001eb7d
   25c8c:	0003a174 	.word	0x0003a174
   25c90:	0003a188 	.word	0x0003a188

00025c94 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
   25c94:	b590      	push	{r4, r7, lr}
   25c96:	b0bb      	sub	sp, #236	; 0xec
   25c98:	af02      	add	r7, sp, #8
   25c9a:	603a      	str	r2, [r7, #0]
   25c9c:	1dfb      	adds	r3, r7, #7
   25c9e:	1c02      	adds	r2, r0, #0
   25ca0:	701a      	strb	r2, [r3, #0]
   25ca2:	1d3b      	adds	r3, r7, #4
   25ca4:	1c0a      	adds	r2, r1, #0
   25ca6:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
   25ca8:	1dfb      	adds	r3, r7, #7
   25caa:	781b      	ldrb	r3, [r3, #0]
   25cac:	2b41      	cmp	r3, #65	; 0x41
   25cae:	d003      	beq.n	25cb8 <m2m_ip_cb+0x24>
   25cb0:	1dfb      	adds	r3, r7, #7
   25cb2:	781b      	ldrb	r3, [r3, #0]
   25cb4:	2b54      	cmp	r3, #84	; 0x54
   25cb6:	d120      	bne.n	25cfa <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
   25cb8:	23cc      	movs	r3, #204	; 0xcc
   25cba:	18f9      	adds	r1, r7, r3
   25cbc:	6838      	ldr	r0, [r7, #0]
   25cbe:	2300      	movs	r3, #0
   25cc0:	2204      	movs	r2, #4
   25cc2:	4c98      	ldr	r4, [pc, #608]	; (25f24 <m2m_ip_cb+0x290>)
   25cc4:	47a0      	blx	r4
   25cc6:	1e03      	subs	r3, r0, #0
   25cc8:	d000      	beq.n	25ccc <m2m_ip_cb+0x38>
   25cca:	e275      	b.n	261b8 <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
   25ccc:	23cc      	movs	r3, #204	; 0xcc
   25cce:	18fb      	adds	r3, r7, r3
   25cd0:	2201      	movs	r2, #1
   25cd2:	569a      	ldrsb	r2, [r3, r2]
   25cd4:	23c8      	movs	r3, #200	; 0xc8
   25cd6:	18fb      	adds	r3, r7, r3
   25cd8:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   25cda:	4b93      	ldr	r3, [pc, #588]	; (25f28 <m2m_ip_cb+0x294>)
   25cdc:	681b      	ldr	r3, [r3, #0]
   25cde:	2b00      	cmp	r3, #0
   25ce0:	d100      	bne.n	25ce4 <m2m_ip_cb+0x50>
   25ce2:	e269      	b.n	261b8 <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
   25ce4:	4b90      	ldr	r3, [pc, #576]	; (25f28 <m2m_ip_cb+0x294>)
   25ce6:	681b      	ldr	r3, [r3, #0]
   25ce8:	22cc      	movs	r2, #204	; 0xcc
   25cea:	18ba      	adds	r2, r7, r2
   25cec:	2000      	movs	r0, #0
   25cee:	5610      	ldrsb	r0, [r2, r0]
   25cf0:	22c8      	movs	r2, #200	; 0xc8
   25cf2:	18ba      	adds	r2, r7, r2
   25cf4:	2101      	movs	r1, #1
   25cf6:	4798      	blx	r3
	{
   25cf8:	e25e      	b.n	261b8 <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
   25cfa:	1dfb      	adds	r3, r7, #7
   25cfc:	781b      	ldrb	r3, [r3, #0]
   25cfe:	2b42      	cmp	r3, #66	; 0x42
   25d00:	d120      	bne.n	25d44 <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
   25d02:	23c4      	movs	r3, #196	; 0xc4
   25d04:	18f9      	adds	r1, r7, r3
   25d06:	6838      	ldr	r0, [r7, #0]
   25d08:	2300      	movs	r3, #0
   25d0a:	2204      	movs	r2, #4
   25d0c:	4c85      	ldr	r4, [pc, #532]	; (25f24 <m2m_ip_cb+0x290>)
   25d0e:	47a0      	blx	r4
   25d10:	1e03      	subs	r3, r0, #0
   25d12:	d000      	beq.n	25d16 <m2m_ip_cb+0x82>
   25d14:	e257      	b.n	261c6 <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
   25d16:	23c4      	movs	r3, #196	; 0xc4
   25d18:	18fb      	adds	r3, r7, r3
   25d1a:	2201      	movs	r2, #1
   25d1c:	569a      	ldrsb	r2, [r3, r2]
   25d1e:	23c0      	movs	r3, #192	; 0xc0
   25d20:	18fb      	adds	r3, r7, r3
   25d22:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   25d24:	4b80      	ldr	r3, [pc, #512]	; (25f28 <m2m_ip_cb+0x294>)
   25d26:	681b      	ldr	r3, [r3, #0]
   25d28:	2b00      	cmp	r3, #0
   25d2a:	d100      	bne.n	25d2e <m2m_ip_cb+0x9a>
   25d2c:	e24b      	b.n	261c6 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
   25d2e:	4b7e      	ldr	r3, [pc, #504]	; (25f28 <m2m_ip_cb+0x294>)
   25d30:	681b      	ldr	r3, [r3, #0]
   25d32:	22c4      	movs	r2, #196	; 0xc4
   25d34:	18ba      	adds	r2, r7, r2
   25d36:	2000      	movs	r0, #0
   25d38:	5610      	ldrsb	r0, [r2, r0]
   25d3a:	22c0      	movs	r2, #192	; 0xc0
   25d3c:	18ba      	adds	r2, r7, r2
   25d3e:	2102      	movs	r1, #2
   25d40:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
   25d42:	e240      	b.n	261c6 <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
   25d44:	1dfb      	adds	r3, r7, #7
   25d46:	781b      	ldrb	r3, [r3, #0]
   25d48:	2b43      	cmp	r3, #67	; 0x43
   25d4a:	d000      	beq.n	25d4e <m2m_ip_cb+0xba>
   25d4c:	e086      	b.n	25e5c <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
   25d4e:	23b4      	movs	r3, #180	; 0xb4
   25d50:	18f9      	adds	r1, r7, r3
   25d52:	6838      	ldr	r0, [r7, #0]
   25d54:	2300      	movs	r3, #0
   25d56:	220c      	movs	r2, #12
   25d58:	4c72      	ldr	r4, [pc, #456]	; (25f24 <m2m_ip_cb+0x290>)
   25d5a:	47a0      	blx	r4
   25d5c:	1e03      	subs	r3, r0, #0
   25d5e:	d000      	beq.n	25d62 <m2m_ip_cb+0xce>
   25d60:	e231      	b.n	261c6 <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
   25d62:	23b4      	movs	r3, #180	; 0xb4
   25d64:	18fb      	adds	r3, r7, r3
   25d66:	7a5b      	ldrb	r3, [r3, #9]
   25d68:	b25b      	sxtb	r3, r3
   25d6a:	2b00      	cmp	r3, #0
   25d6c:	db4f      	blt.n	25e0e <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
   25d6e:	23b4      	movs	r3, #180	; 0xb4
   25d70:	18fb      	adds	r3, r7, r3
   25d72:	7a5b      	ldrb	r3, [r3, #9]
   25d74:	b25b      	sxtb	r3, r3
   25d76:	0018      	movs	r0, r3
   25d78:	23b4      	movs	r3, #180	; 0xb4
   25d7a:	18fb      	adds	r3, r7, r3
   25d7c:	7a1b      	ldrb	r3, [r3, #8]
   25d7e:	b25b      	sxtb	r3, r3
   25d80:	4a6a      	ldr	r2, [pc, #424]	; (25f2c <m2m_ip_cb+0x298>)
   25d82:	011b      	lsls	r3, r3, #4
   25d84:	18d3      	adds	r3, r2, r3
   25d86:	330b      	adds	r3, #11
   25d88:	781b      	ldrb	r3, [r3, #0]
   25d8a:	b2d9      	uxtb	r1, r3
   25d8c:	4a67      	ldr	r2, [pc, #412]	; (25f2c <m2m_ip_cb+0x298>)
   25d8e:	0103      	lsls	r3, r0, #4
   25d90:	18d3      	adds	r3, r2, r3
   25d92:	330b      	adds	r3, #11
   25d94:	1c0a      	adds	r2, r1, #0
   25d96:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
   25d98:	23b4      	movs	r3, #180	; 0xb4
   25d9a:	18fb      	adds	r3, r7, r3
   25d9c:	7a5b      	ldrb	r3, [r3, #9]
   25d9e:	b25b      	sxtb	r3, r3
   25da0:	4a62      	ldr	r2, [pc, #392]	; (25f2c <m2m_ip_cb+0x298>)
   25da2:	011b      	lsls	r3, r3, #4
   25da4:	18d3      	adds	r3, r2, r3
   25da6:	330a      	adds	r3, #10
   25da8:	2201      	movs	r2, #1
   25daa:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   25dac:	23b4      	movs	r3, #180	; 0xb4
   25dae:	18fb      	adds	r3, r7, r3
   25db0:	7a5b      	ldrb	r3, [r3, #9]
   25db2:	b25b      	sxtb	r3, r3
   25db4:	0018      	movs	r0, r3
   25db6:	23b4      	movs	r3, #180	; 0xb4
   25db8:	18fb      	adds	r3, r7, r3
   25dba:	895b      	ldrh	r3, [r3, #10]
   25dbc:	3b08      	subs	r3, #8
   25dbe:	b299      	uxth	r1, r3
   25dc0:	4a5a      	ldr	r2, [pc, #360]	; (25f2c <m2m_ip_cb+0x298>)
   25dc2:	0103      	lsls	r3, r0, #4
   25dc4:	18d3      	adds	r3, r2, r3
   25dc6:	3308      	adds	r3, #8
   25dc8:	1c0a      	adds	r2, r1, #0
   25dca:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
   25dcc:	4b58      	ldr	r3, [pc, #352]	; (25f30 <m2m_ip_cb+0x29c>)
   25dce:	881b      	ldrh	r3, [r3, #0]
   25dd0:	b29b      	uxth	r3, r3
   25dd2:	3301      	adds	r3, #1
   25dd4:	b29a      	uxth	r2, r3
   25dd6:	4b56      	ldr	r3, [pc, #344]	; (25f30 <m2m_ip_cb+0x29c>)
   25dd8:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
   25dda:	4b55      	ldr	r3, [pc, #340]	; (25f30 <m2m_ip_cb+0x29c>)
   25ddc:	881b      	ldrh	r3, [r3, #0]
   25dde:	b29b      	uxth	r3, r3
   25de0:	2b00      	cmp	r3, #0
   25de2:	d106      	bne.n	25df2 <m2m_ip_cb+0x15e>
					++gu16SessionID;
   25de4:	4b52      	ldr	r3, [pc, #328]	; (25f30 <m2m_ip_cb+0x29c>)
   25de6:	881b      	ldrh	r3, [r3, #0]
   25de8:	b29b      	uxth	r3, r3
   25dea:	3301      	adds	r3, #1
   25dec:	b29a      	uxth	r2, r3
   25dee:	4b50      	ldr	r3, [pc, #320]	; (25f30 <m2m_ip_cb+0x29c>)
   25df0:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
   25df2:	23b4      	movs	r3, #180	; 0xb4
   25df4:	18fb      	adds	r3, r7, r3
   25df6:	7a5b      	ldrb	r3, [r3, #9]
   25df8:	b25b      	sxtb	r3, r3
   25dfa:	0018      	movs	r0, r3
   25dfc:	4b4c      	ldr	r3, [pc, #304]	; (25f30 <m2m_ip_cb+0x29c>)
   25dfe:	881b      	ldrh	r3, [r3, #0]
   25e00:	b299      	uxth	r1, r3
   25e02:	4a4a      	ldr	r2, [pc, #296]	; (25f2c <m2m_ip_cb+0x298>)
   25e04:	0103      	lsls	r3, r0, #4
   25e06:	18d3      	adds	r3, r2, r3
   25e08:	3306      	adds	r3, #6
   25e0a:	1c0a      	adds	r2, r1, #0
   25e0c:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
   25e0e:	23b4      	movs	r3, #180	; 0xb4
   25e10:	18fb      	adds	r3, r7, r3
   25e12:	2209      	movs	r2, #9
   25e14:	569a      	ldrsb	r2, [r3, r2]
   25e16:	23a0      	movs	r3, #160	; 0xa0
   25e18:	18fb      	adds	r3, r7, r3
   25e1a:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
   25e1c:	23a0      	movs	r3, #160	; 0xa0
   25e1e:	18fb      	adds	r3, r7, r3
   25e20:	2202      	movs	r2, #2
   25e22:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
   25e24:	23b4      	movs	r3, #180	; 0xb4
   25e26:	18fb      	adds	r3, r7, r3
   25e28:	885a      	ldrh	r2, [r3, #2]
   25e2a:	23a0      	movs	r3, #160	; 0xa0
   25e2c:	18fb      	adds	r3, r7, r3
   25e2e:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
   25e30:	23b4      	movs	r3, #180	; 0xb4
   25e32:	18fb      	adds	r3, r7, r3
   25e34:	685a      	ldr	r2, [r3, #4]
   25e36:	23a0      	movs	r3, #160	; 0xa0
   25e38:	18fb      	adds	r3, r7, r3
   25e3a:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
   25e3c:	4b3a      	ldr	r3, [pc, #232]	; (25f28 <m2m_ip_cb+0x294>)
   25e3e:	681b      	ldr	r3, [r3, #0]
   25e40:	2b00      	cmp	r3, #0
   25e42:	d100      	bne.n	25e46 <m2m_ip_cb+0x1b2>
   25e44:	e1bf      	b.n	261c6 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
   25e46:	4b38      	ldr	r3, [pc, #224]	; (25f28 <m2m_ip_cb+0x294>)
   25e48:	681b      	ldr	r3, [r3, #0]
   25e4a:	22b4      	movs	r2, #180	; 0xb4
   25e4c:	18ba      	adds	r2, r7, r2
   25e4e:	2008      	movs	r0, #8
   25e50:	5610      	ldrsb	r0, [r2, r0]
   25e52:	22a0      	movs	r2, #160	; 0xa0
   25e54:	18ba      	adds	r2, r7, r2
   25e56:	2104      	movs	r1, #4
   25e58:	4798      	blx	r3
}
   25e5a:	e1b4      	b.n	261c6 <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
   25e5c:	1dfb      	adds	r3, r7, #7
   25e5e:	781b      	ldrb	r3, [r3, #0]
   25e60:	2b44      	cmp	r3, #68	; 0x44
   25e62:	d003      	beq.n	25e6c <m2m_ip_cb+0x1d8>
   25e64:	1dfb      	adds	r3, r7, #7
   25e66:	781b      	ldrb	r3, [r3, #0]
   25e68:	2b4b      	cmp	r3, #75	; 0x4b
   25e6a:	d13d      	bne.n	25ee8 <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
   25e6c:	239c      	movs	r3, #156	; 0x9c
   25e6e:	18f9      	adds	r1, r7, r3
   25e70:	6838      	ldr	r0, [r7, #0]
   25e72:	2300      	movs	r3, #0
   25e74:	2204      	movs	r2, #4
   25e76:	4c2b      	ldr	r4, [pc, #172]	; (25f24 <m2m_ip_cb+0x290>)
   25e78:	47a0      	blx	r4
   25e7a:	1e03      	subs	r3, r0, #0
   25e7c:	d000      	beq.n	25e80 <m2m_ip_cb+0x1ec>
   25e7e:	e19d      	b.n	261bc <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
   25e80:	239c      	movs	r3, #156	; 0x9c
   25e82:	18fb      	adds	r3, r7, r3
   25e84:	2200      	movs	r2, #0
   25e86:	569a      	ldrsb	r2, [r3, r2]
   25e88:	2398      	movs	r3, #152	; 0x98
   25e8a:	18fb      	adds	r3, r7, r3
   25e8c:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
   25e8e:	239c      	movs	r3, #156	; 0x9c
   25e90:	18fb      	adds	r3, r7, r3
   25e92:	2201      	movs	r2, #1
   25e94:	569a      	ldrsb	r2, [r3, r2]
   25e96:	2398      	movs	r3, #152	; 0x98
   25e98:	18fb      	adds	r3, r7, r3
   25e9a:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
   25e9c:	239c      	movs	r3, #156	; 0x9c
   25e9e:	18fb      	adds	r3, r7, r3
   25ea0:	785b      	ldrb	r3, [r3, #1]
   25ea2:	b25b      	sxtb	r3, r3
   25ea4:	2b00      	cmp	r3, #0
   25ea6:	d10f      	bne.n	25ec8 <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   25ea8:	239c      	movs	r3, #156	; 0x9c
   25eaa:	18fb      	adds	r3, r7, r3
   25eac:	781b      	ldrb	r3, [r3, #0]
   25eae:	b25b      	sxtb	r3, r3
   25eb0:	0018      	movs	r0, r3
   25eb2:	239c      	movs	r3, #156	; 0x9c
   25eb4:	18fb      	adds	r3, r7, r3
   25eb6:	885b      	ldrh	r3, [r3, #2]
   25eb8:	3b08      	subs	r3, #8
   25eba:	b299      	uxth	r1, r3
   25ebc:	4a1b      	ldr	r2, [pc, #108]	; (25f2c <m2m_ip_cb+0x298>)
   25ebe:	0103      	lsls	r3, r0, #4
   25ec0:	18d3      	adds	r3, r2, r3
   25ec2:	3308      	adds	r3, #8
   25ec4:	1c0a      	adds	r2, r1, #0
   25ec6:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
   25ec8:	4b17      	ldr	r3, [pc, #92]	; (25f28 <m2m_ip_cb+0x294>)
   25eca:	681b      	ldr	r3, [r3, #0]
   25ecc:	2b00      	cmp	r3, #0
   25ece:	d100      	bne.n	25ed2 <m2m_ip_cb+0x23e>
   25ed0:	e174      	b.n	261bc <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
   25ed2:	4b15      	ldr	r3, [pc, #84]	; (25f28 <m2m_ip_cb+0x294>)
   25ed4:	681b      	ldr	r3, [r3, #0]
   25ed6:	229c      	movs	r2, #156	; 0x9c
   25ed8:	18ba      	adds	r2, r7, r2
   25eda:	2000      	movs	r0, #0
   25edc:	5610      	ldrsb	r0, [r2, r0]
   25ede:	2298      	movs	r2, #152	; 0x98
   25ee0:	18ba      	adds	r2, r7, r2
   25ee2:	2105      	movs	r1, #5
   25ee4:	4798      	blx	r3
	{
   25ee6:	e169      	b.n	261bc <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
   25ee8:	1dfb      	adds	r3, r7, #7
   25eea:	781b      	ldrb	r3, [r3, #0]
   25eec:	2b4a      	cmp	r3, #74	; 0x4a
   25eee:	d123      	bne.n	25f38 <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
   25ef0:	230c      	movs	r3, #12
   25ef2:	18f9      	adds	r1, r7, r3
   25ef4:	6838      	ldr	r0, [r7, #0]
   25ef6:	2300      	movs	r3, #0
   25ef8:	2244      	movs	r2, #68	; 0x44
   25efa:	4c0a      	ldr	r4, [pc, #40]	; (25f24 <m2m_ip_cb+0x290>)
   25efc:	47a0      	blx	r4
   25efe:	1e03      	subs	r3, r0, #0
   25f00:	d000      	beq.n	25f04 <m2m_ip_cb+0x270>
   25f02:	e160      	b.n	261c6 <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
   25f04:	4b0b      	ldr	r3, [pc, #44]	; (25f34 <m2m_ip_cb+0x2a0>)
   25f06:	681b      	ldr	r3, [r3, #0]
   25f08:	2b00      	cmp	r3, #0
   25f0a:	d100      	bne.n	25f0e <m2m_ip_cb+0x27a>
   25f0c:	e15b      	b.n	261c6 <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
   25f0e:	4b09      	ldr	r3, [pc, #36]	; (25f34 <m2m_ip_cb+0x2a0>)
   25f10:	681a      	ldr	r2, [r3, #0]
   25f12:	230c      	movs	r3, #12
   25f14:	18fb      	adds	r3, r7, r3
   25f16:	6c19      	ldr	r1, [r3, #64]	; 0x40
   25f18:	230c      	movs	r3, #12
   25f1a:	18fb      	adds	r3, r7, r3
   25f1c:	0018      	movs	r0, r3
   25f1e:	4790      	blx	r2
}
   25f20:	e151      	b.n	261c6 <m2m_ip_cb+0x532>
   25f22:	46c0      	nop			; (mov r8, r8)
   25f24:	00022491 	.word	0x00022491
   25f28:	200057f4 	.word	0x200057f4
   25f2c:	20005744 	.word	0x20005744
   25f30:	20003eee 	.word	0x20003eee
   25f34:	200057fc 	.word	0x200057fc
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
   25f38:	1dfb      	adds	r3, r7, #7
   25f3a:	781b      	ldrb	r3, [r3, #0]
   25f3c:	2b46      	cmp	r3, #70	; 0x46
   25f3e:	d008      	beq.n	25f52 <m2m_ip_cb+0x2be>
   25f40:	1dfb      	adds	r3, r7, #7
   25f42:	781b      	ldrb	r3, [r3, #0]
   25f44:	2b48      	cmp	r3, #72	; 0x48
   25f46:	d004      	beq.n	25f52 <m2m_ip_cb+0x2be>
   25f48:	1dfb      	adds	r3, r7, #7
   25f4a:	781b      	ldrb	r3, [r3, #0]
   25f4c:	2b4d      	cmp	r3, #77	; 0x4d
   25f4e:	d000      	beq.n	25f52 <m2m_ip_cb+0x2be>
   25f50:	e0b4      	b.n	260bc <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
   25f52:	23df      	movs	r3, #223	; 0xdf
   25f54:	18fb      	adds	r3, r7, r3
   25f56:	2206      	movs	r2, #6
   25f58:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
   25f5a:	1dfb      	adds	r3, r7, #7
   25f5c:	781b      	ldrb	r3, [r3, #0]
   25f5e:	2b48      	cmp	r3, #72	; 0x48
   25f60:	d103      	bne.n	25f6a <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
   25f62:	23df      	movs	r3, #223	; 0xdf
   25f64:	18fb      	adds	r3, r7, r3
   25f66:	2209      	movs	r2, #9
   25f68:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
   25f6a:	23d8      	movs	r3, #216	; 0xd8
   25f6c:	18fb      	adds	r3, r7, r3
   25f6e:	2210      	movs	r2, #16
   25f70:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
   25f72:	23d8      	movs	r3, #216	; 0xd8
   25f74:	18fb      	adds	r3, r7, r3
   25f76:	881a      	ldrh	r2, [r3, #0]
   25f78:	2388      	movs	r3, #136	; 0x88
   25f7a:	18f9      	adds	r1, r7, r3
   25f7c:	6838      	ldr	r0, [r7, #0]
   25f7e:	2300      	movs	r3, #0
   25f80:	4c93      	ldr	r4, [pc, #588]	; (261d0 <m2m_ip_cb+0x53c>)
   25f82:	47a0      	blx	r4
   25f84:	1e03      	subs	r3, r0, #0
   25f86:	d000      	beq.n	25f8a <m2m_ip_cb+0x2f6>
   25f88:	e11a      	b.n	261c0 <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
   25f8a:	23d6      	movs	r3, #214	; 0xd6
   25f8c:	18fb      	adds	r3, r7, r3
   25f8e:	2200      	movs	r2, #0
   25f90:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
   25f92:	23d5      	movs	r3, #213	; 0xd5
   25f94:	18fb      	adds	r3, r7, r3
   25f96:	2288      	movs	r2, #136	; 0x88
   25f98:	18ba      	adds	r2, r7, r2
   25f9a:	7b12      	ldrb	r2, [r2, #12]
   25f9c:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
   25f9e:	23d6      	movs	r3, #214	; 0xd6
   25fa0:	18fb      	adds	r3, r7, r3
   25fa2:	2288      	movs	r2, #136	; 0x88
   25fa4:	18ba      	adds	r2, r7, r2
   25fa6:	89d2      	ldrh	r2, [r2, #14]
   25fa8:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
   25faa:	23d5      	movs	r3, #213	; 0xd5
   25fac:	18fb      	adds	r3, r7, r3
   25fae:	781b      	ldrb	r3, [r3, #0]
   25fb0:	b25b      	sxtb	r3, r3
   25fb2:	4a88      	ldr	r2, [pc, #544]	; (261d4 <m2m_ip_cb+0x540>)
   25fb4:	011b      	lsls	r3, r3, #4
   25fb6:	18d3      	adds	r3, r2, r3
   25fb8:	330c      	adds	r3, #12
   25fba:	2200      	movs	r2, #0
   25fbc:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
   25fbe:	23d2      	movs	r3, #210	; 0xd2
   25fc0:	18fb      	adds	r3, r7, r3
   25fc2:	2288      	movs	r2, #136	; 0x88
   25fc4:	18ba      	adds	r2, r7, r2
   25fc6:	8912      	ldrh	r2, [r2, #8]
   25fc8:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
   25fca:	23d0      	movs	r3, #208	; 0xd0
   25fcc:	18fb      	adds	r3, r7, r3
   25fce:	2288      	movs	r2, #136	; 0x88
   25fd0:	18ba      	adds	r2, r7, r2
   25fd2:	8952      	ldrh	r2, [r2, #10]
   25fd4:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
   25fd6:	2388      	movs	r3, #136	; 0x88
   25fd8:	18fb      	adds	r3, r7, r3
   25fda:	885a      	ldrh	r2, [r3, #2]
   25fdc:	2370      	movs	r3, #112	; 0x70
   25fde:	18fb      	adds	r3, r7, r3
   25fe0:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
   25fe2:	2388      	movs	r3, #136	; 0x88
   25fe4:	18fb      	adds	r3, r7, r3
   25fe6:	685a      	ldr	r2, [r3, #4]
   25fe8:	2370      	movs	r3, #112	; 0x70
   25fea:	18fb      	adds	r3, r7, r3
   25fec:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   25fee:	23d5      	movs	r3, #213	; 0xd5
   25ff0:	18fb      	adds	r3, r7, r3
   25ff2:	781b      	ldrb	r3, [r3, #0]
   25ff4:	b25b      	sxtb	r3, r3
   25ff6:	4a77      	ldr	r2, [pc, #476]	; (261d4 <m2m_ip_cb+0x540>)
   25ff8:	011b      	lsls	r3, r3, #4
   25ffa:	18d3      	adds	r3, r2, r3
   25ffc:	3306      	adds	r3, #6
   25ffe:	881b      	ldrh	r3, [r3, #0]
   26000:	b29b      	uxth	r3, r3
   26002:	22d6      	movs	r2, #214	; 0xd6
   26004:	18ba      	adds	r2, r7, r2
   26006:	8812      	ldrh	r2, [r2, #0]
   26008:	429a      	cmp	r2, r3
   2600a:	d148      	bne.n	2609e <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
   2600c:	23d2      	movs	r3, #210	; 0xd2
   2600e:	18fb      	adds	r3, r7, r3
   26010:	2200      	movs	r2, #0
   26012:	5e9b      	ldrsh	r3, [r3, r2]
   26014:	2b00      	cmp	r3, #0
   26016:	dd25      	ble.n	26064 <m2m_ip_cb+0x3d0>
   26018:	23d2      	movs	r3, #210	; 0xd2
   2601a:	18fb      	adds	r3, r7, r3
   2601c:	2200      	movs	r2, #0
   2601e:	5e9a      	ldrsh	r2, [r3, r2]
   26020:	1d3b      	adds	r3, r7, #4
   26022:	881b      	ldrh	r3, [r3, #0]
   26024:	429a      	cmp	r2, r3
   26026:	da1d      	bge.n	26064 <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
   26028:	23d0      	movs	r3, #208	; 0xd0
   2602a:	18fb      	adds	r3, r7, r3
   2602c:	881b      	ldrh	r3, [r3, #0]
   2602e:	683a      	ldr	r2, [r7, #0]
   26030:	18d3      	adds	r3, r2, r3
   26032:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
   26034:	23d8      	movs	r3, #216	; 0xd8
   26036:	18fb      	adds	r3, r7, r3
   26038:	22d2      	movs	r2, #210	; 0xd2
   2603a:	18ba      	adds	r2, r7, r2
   2603c:	8812      	ldrh	r2, [r2, #0]
   2603e:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
   26040:	683c      	ldr	r4, [r7, #0]
   26042:	23df      	movs	r3, #223	; 0xdf
   26044:	18fb      	adds	r3, r7, r3
   26046:	781a      	ldrb	r2, [r3, #0]
   26048:	2370      	movs	r3, #112	; 0x70
   2604a:	18f9      	adds	r1, r7, r3
   2604c:	23d5      	movs	r3, #213	; 0xd5
   2604e:	18fb      	adds	r3, r7, r3
   26050:	2000      	movs	r0, #0
   26052:	5618      	ldrsb	r0, [r3, r0]
   26054:	23d8      	movs	r3, #216	; 0xd8
   26056:	18fb      	adds	r3, r7, r3
   26058:	881b      	ldrh	r3, [r3, #0]
   2605a:	9300      	str	r3, [sp, #0]
   2605c:	0023      	movs	r3, r4
   2605e:	4c5e      	ldr	r4, [pc, #376]	; (261d8 <m2m_ip_cb+0x544>)
   26060:	47a0      	blx	r4
	{
   26062:	e0ad      	b.n	261c0 <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
   26064:	2370      	movs	r3, #112	; 0x70
   26066:	18fb      	adds	r3, r7, r3
   26068:	22d2      	movs	r2, #210	; 0xd2
   2606a:	18ba      	adds	r2, r7, r2
   2606c:	8812      	ldrh	r2, [r2, #0]
   2606e:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
   26070:	2370      	movs	r3, #112	; 0x70
   26072:	18fb      	adds	r3, r7, r3
   26074:	2200      	movs	r2, #0
   26076:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
   26078:	4b58      	ldr	r3, [pc, #352]	; (261dc <m2m_ip_cb+0x548>)
   2607a:	681b      	ldr	r3, [r3, #0]
   2607c:	2b00      	cmp	r3, #0
   2607e:	d100      	bne.n	26082 <m2m_ip_cb+0x3ee>
   26080:	e09e      	b.n	261c0 <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
   26082:	4b56      	ldr	r3, [pc, #344]	; (261dc <m2m_ip_cb+0x548>)
   26084:	681b      	ldr	r3, [r3, #0]
   26086:	2270      	movs	r2, #112	; 0x70
   26088:	18bc      	adds	r4, r7, r2
   2608a:	22df      	movs	r2, #223	; 0xdf
   2608c:	18ba      	adds	r2, r7, r2
   2608e:	7811      	ldrb	r1, [r2, #0]
   26090:	22d5      	movs	r2, #213	; 0xd5
   26092:	18ba      	adds	r2, r7, r2
   26094:	2000      	movs	r0, #0
   26096:	5610      	ldrsb	r0, [r2, r0]
   26098:	0022      	movs	r2, r4
   2609a:	4798      	blx	r3
	{
   2609c:	e090      	b.n	261c0 <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
   2609e:	23d8      	movs	r3, #216	; 0xd8
   260a0:	18fa      	adds	r2, r7, r3
   260a2:	1d3b      	adds	r3, r7, #4
   260a4:	8812      	ldrh	r2, [r2, #0]
   260a6:	881b      	ldrh	r3, [r3, #0]
   260a8:	429a      	cmp	r2, r3
   260aa:	d300      	bcc.n	260ae <m2m_ip_cb+0x41a>
   260ac:	e088      	b.n	261c0 <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   260ae:	2301      	movs	r3, #1
   260b0:	2200      	movs	r2, #0
   260b2:	2100      	movs	r1, #0
   260b4:	2000      	movs	r0, #0
   260b6:	4c46      	ldr	r4, [pc, #280]	; (261d0 <m2m_ip_cb+0x53c>)
   260b8:	47a0      	blx	r4
	{
   260ba:	e081      	b.n	261c0 <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
   260bc:	1dfb      	adds	r3, r7, #7
   260be:	781b      	ldrb	r3, [r3, #0]
   260c0:	2b45      	cmp	r3, #69	; 0x45
   260c2:	d007      	beq.n	260d4 <m2m_ip_cb+0x440>
   260c4:	1dfb      	adds	r3, r7, #7
   260c6:	781b      	ldrb	r3, [r3, #0]
   260c8:	2b47      	cmp	r3, #71	; 0x47
   260ca:	d003      	beq.n	260d4 <m2m_ip_cb+0x440>
   260cc:	1dfb      	adds	r3, r7, #7
   260ce:	781b      	ldrb	r3, [r3, #0]
   260d0:	2b4c      	cmp	r3, #76	; 0x4c
   260d2:	d14c      	bne.n	2616e <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
   260d4:	23de      	movs	r3, #222	; 0xde
   260d6:	18fb      	adds	r3, r7, r3
   260d8:	2207      	movs	r2, #7
   260da:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
   260dc:	1dfb      	adds	r3, r7, #7
   260de:	781b      	ldrb	r3, [r3, #0]
   260e0:	2b47      	cmp	r3, #71	; 0x47
   260e2:	d103      	bne.n	260ec <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
   260e4:	23de      	movs	r3, #222	; 0xde
   260e6:	18fb      	adds	r3, r7, r3
   260e8:	2208      	movs	r2, #8
   260ea:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
   260ec:	2364      	movs	r3, #100	; 0x64
   260ee:	18f9      	adds	r1, r7, r3
   260f0:	6838      	ldr	r0, [r7, #0]
   260f2:	2300      	movs	r3, #0
   260f4:	2208      	movs	r2, #8
   260f6:	4c36      	ldr	r4, [pc, #216]	; (261d0 <m2m_ip_cb+0x53c>)
   260f8:	47a0      	blx	r4
   260fa:	1e03      	subs	r3, r0, #0
   260fc:	d162      	bne.n	261c4 <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
   260fe:	23dc      	movs	r3, #220	; 0xdc
   26100:	18fb      	adds	r3, r7, r3
   26102:	2200      	movs	r2, #0
   26104:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
   26106:	23db      	movs	r3, #219	; 0xdb
   26108:	18fb      	adds	r3, r7, r3
   2610a:	2264      	movs	r2, #100	; 0x64
   2610c:	18ba      	adds	r2, r7, r2
   2610e:	7812      	ldrb	r2, [r2, #0]
   26110:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
   26112:	23dc      	movs	r3, #220	; 0xdc
   26114:	18fb      	adds	r3, r7, r3
   26116:	2264      	movs	r2, #100	; 0x64
   26118:	18ba      	adds	r2, r7, r2
   2611a:	8892      	ldrh	r2, [r2, #4]
   2611c:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
   2611e:	2364      	movs	r3, #100	; 0x64
   26120:	18fb      	adds	r3, r7, r3
   26122:	2202      	movs	r2, #2
   26124:	5e9a      	ldrsh	r2, [r3, r2]
   26126:	236e      	movs	r3, #110	; 0x6e
   26128:	18fb      	adds	r3, r7, r3
   2612a:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   2612c:	23db      	movs	r3, #219	; 0xdb
   2612e:	18fb      	adds	r3, r7, r3
   26130:	781b      	ldrb	r3, [r3, #0]
   26132:	b25b      	sxtb	r3, r3
   26134:	4a27      	ldr	r2, [pc, #156]	; (261d4 <m2m_ip_cb+0x540>)
   26136:	011b      	lsls	r3, r3, #4
   26138:	18d3      	adds	r3, r2, r3
   2613a:	3306      	adds	r3, #6
   2613c:	881b      	ldrh	r3, [r3, #0]
   2613e:	b29b      	uxth	r3, r3
   26140:	22dc      	movs	r2, #220	; 0xdc
   26142:	18ba      	adds	r2, r7, r2
   26144:	8812      	ldrh	r2, [r2, #0]
   26146:	429a      	cmp	r2, r3
   26148:	d13c      	bne.n	261c4 <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
   2614a:	4b24      	ldr	r3, [pc, #144]	; (261dc <m2m_ip_cb+0x548>)
   2614c:	681b      	ldr	r3, [r3, #0]
   2614e:	2b00      	cmp	r3, #0
   26150:	d038      	beq.n	261c4 <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
   26152:	4b22      	ldr	r3, [pc, #136]	; (261dc <m2m_ip_cb+0x548>)
   26154:	681b      	ldr	r3, [r3, #0]
   26156:	226e      	movs	r2, #110	; 0x6e
   26158:	18bc      	adds	r4, r7, r2
   2615a:	22de      	movs	r2, #222	; 0xde
   2615c:	18ba      	adds	r2, r7, r2
   2615e:	7811      	ldrb	r1, [r2, #0]
   26160:	22db      	movs	r2, #219	; 0xdb
   26162:	18ba      	adds	r2, r7, r2
   26164:	2000      	movs	r0, #0
   26166:	5610      	ldrsb	r0, [r2, r0]
   26168:	0022      	movs	r2, r4
   2616a:	4798      	blx	r3
	{
   2616c:	e02a      	b.n	261c4 <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
   2616e:	1dfb      	adds	r3, r7, #7
   26170:	781b      	ldrb	r3, [r3, #0]
   26172:	2b52      	cmp	r3, #82	; 0x52
   26174:	d127      	bne.n	261c6 <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
   26176:	2350      	movs	r3, #80	; 0x50
   26178:	18f9      	adds	r1, r7, r3
   2617a:	6838      	ldr	r0, [r7, #0]
   2617c:	2301      	movs	r3, #1
   2617e:	2214      	movs	r2, #20
   26180:	4c13      	ldr	r4, [pc, #76]	; (261d0 <m2m_ip_cb+0x53c>)
   26182:	47a0      	blx	r4
   26184:	1e03      	subs	r3, r0, #0
   26186:	d11e      	bne.n	261c6 <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
   26188:	2350      	movs	r3, #80	; 0x50
   2618a:	18fb      	adds	r3, r7, r3
   2618c:	685b      	ldr	r3, [r3, #4]
   2618e:	001a      	movs	r2, r3
   26190:	4b13      	ldr	r3, [pc, #76]	; (261e0 <m2m_ip_cb+0x54c>)
   26192:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
   26194:	4b12      	ldr	r3, [pc, #72]	; (261e0 <m2m_ip_cb+0x54c>)
   26196:	681b      	ldr	r3, [r3, #0]
   26198:	2b00      	cmp	r3, #0
   2619a:	d014      	beq.n	261c6 <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
   2619c:	4b10      	ldr	r3, [pc, #64]	; (261e0 <m2m_ip_cb+0x54c>)
   2619e:	681c      	ldr	r4, [r3, #0]
   261a0:	2350      	movs	r3, #80	; 0x50
   261a2:	18fb      	adds	r3, r7, r3
   261a4:	6818      	ldr	r0, [r3, #0]
   261a6:	2350      	movs	r3, #80	; 0x50
   261a8:	18fb      	adds	r3, r7, r3
   261aa:	6899      	ldr	r1, [r3, #8]
   261ac:	2350      	movs	r3, #80	; 0x50
   261ae:	18fb      	adds	r3, r7, r3
   261b0:	7c1b      	ldrb	r3, [r3, #16]
   261b2:	001a      	movs	r2, r3
   261b4:	47a0      	blx	r4
}
   261b6:	e006      	b.n	261c6 <m2m_ip_cb+0x532>
	{
   261b8:	46c0      	nop			; (mov r8, r8)
   261ba:	e004      	b.n	261c6 <m2m_ip_cb+0x532>
	{
   261bc:	46c0      	nop			; (mov r8, r8)
   261be:	e002      	b.n	261c6 <m2m_ip_cb+0x532>
	{
   261c0:	46c0      	nop			; (mov r8, r8)
   261c2:	e000      	b.n	261c6 <m2m_ip_cb+0x532>
	{
   261c4:	46c0      	nop			; (mov r8, r8)
}
   261c6:	46c0      	nop			; (mov r8, r8)
   261c8:	46bd      	mov	sp, r7
   261ca:	b039      	add	sp, #228	; 0xe4
   261cc:	bd90      	pop	{r4, r7, pc}
   261ce:	46c0      	nop			; (mov r8, r8)
   261d0:	00022491 	.word	0x00022491
   261d4:	20005744 	.word	0x20005744
   261d8:	00025a99 	.word	0x00025a99
   261dc:	200057f4 	.word	0x200057f4
   261e0:	200057f8 	.word	0x200057f8

000261e4 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
   261e4:	b580      	push	{r7, lr}
   261e6:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
   261e8:	4b0c      	ldr	r3, [pc, #48]	; (2621c <socketInit+0x38>)
   261ea:	781b      	ldrb	r3, [r3, #0]
   261ec:	b2db      	uxtb	r3, r3
   261ee:	2b00      	cmp	r3, #0
   261f0:	d110      	bne.n	26214 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   261f2:	4b0b      	ldr	r3, [pc, #44]	; (26220 <socketInit+0x3c>)
   261f4:	22b0      	movs	r2, #176	; 0xb0
   261f6:	2100      	movs	r1, #0
   261f8:	0018      	movs	r0, r3
   261fa:	4b0a      	ldr	r3, [pc, #40]	; (26224 <socketInit+0x40>)
   261fc:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
   261fe:	4b0a      	ldr	r3, [pc, #40]	; (26228 <socketInit+0x44>)
   26200:	0019      	movs	r1, r3
   26202:	2002      	movs	r0, #2
   26204:	4b09      	ldr	r3, [pc, #36]	; (2622c <socketInit+0x48>)
   26206:	4798      	blx	r3
		gbSocketInit	= 1;
   26208:	4b04      	ldr	r3, [pc, #16]	; (2621c <socketInit+0x38>)
   2620a:	2201      	movs	r2, #1
   2620c:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
   2620e:	4b08      	ldr	r3, [pc, #32]	; (26230 <socketInit+0x4c>)
   26210:	2200      	movs	r2, #0
   26212:	801a      	strh	r2, [r3, #0]
	}
}
   26214:	46c0      	nop			; (mov r8, r8)
   26216:	46bd      	mov	sp, r7
   26218:	bd80      	pop	{r7, pc}
   2621a:	46c0      	nop			; (mov r8, r8)
   2621c:	20003ef0 	.word	0x20003ef0
   26220:	20005744 	.word	0x20005744
   26224:	00021915 	.word	0x00021915
   26228:	00025c95 	.word	0x00025c95
   2622c:	00022611 	.word	0x00022611
   26230:	20003eee 	.word	0x20003eee

00026234 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
   26234:	b580      	push	{r7, lr}
   26236:	af00      	add	r7, sp, #0
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   26238:	4b0a      	ldr	r3, [pc, #40]	; (26264 <socketDeinit+0x30>)
   2623a:	22b0      	movs	r2, #176	; 0xb0
   2623c:	2100      	movs	r1, #0
   2623e:	0018      	movs	r0, r3
   26240:	4b09      	ldr	r3, [pc, #36]	; (26268 <socketDeinit+0x34>)
   26242:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
   26244:	2100      	movs	r1, #0
   26246:	2002      	movs	r0, #2
   26248:	4b08      	ldr	r3, [pc, #32]	; (2626c <socketDeinit+0x38>)
   2624a:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
   2624c:	4b08      	ldr	r3, [pc, #32]	; (26270 <socketDeinit+0x3c>)
   2624e:	2200      	movs	r2, #0
   26250:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb	= NULL;
   26252:	4b08      	ldr	r3, [pc, #32]	; (26274 <socketDeinit+0x40>)
   26254:	2200      	movs	r2, #0
   26256:	601a      	str	r2, [r3, #0]
	gbSocketInit	= 0;
   26258:	4b07      	ldr	r3, [pc, #28]	; (26278 <socketDeinit+0x44>)
   2625a:	2200      	movs	r2, #0
   2625c:	701a      	strb	r2, [r3, #0]
}
   2625e:	46c0      	nop			; (mov r8, r8)
   26260:	46bd      	mov	sp, r7
   26262:	bd80      	pop	{r7, pc}
   26264:	20005744 	.word	0x20005744
   26268:	00021915 	.word	0x00021915
   2626c:	00022611 	.word	0x00022611
   26270:	200057f4 	.word	0x200057f4
   26274:	200057fc 	.word	0x200057fc
   26278:	20003ef0 	.word	0x20003ef0

0002627c <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
   2627c:	b580      	push	{r7, lr}
   2627e:	b082      	sub	sp, #8
   26280:	af00      	add	r7, sp, #0
   26282:	6078      	str	r0, [r7, #4]
   26284:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
   26286:	4b05      	ldr	r3, [pc, #20]	; (2629c <registerSocketCallback+0x20>)
   26288:	687a      	ldr	r2, [r7, #4]
   2628a:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
   2628c:	4b04      	ldr	r3, [pc, #16]	; (262a0 <registerSocketCallback+0x24>)
   2628e:	683a      	ldr	r2, [r7, #0]
   26290:	601a      	str	r2, [r3, #0]
}
   26292:	46c0      	nop			; (mov r8, r8)
   26294:	46bd      	mov	sp, r7
   26296:	b002      	add	sp, #8
   26298:	bd80      	pop	{r7, pc}
   2629a:	46c0      	nop			; (mov r8, r8)
   2629c:	200057f4 	.word	0x200057f4
   262a0:	200057fc 	.word	0x200057fc

000262a4 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
   262a4:	b590      	push	{r4, r7, lr}
   262a6:	b08d      	sub	sp, #52	; 0x34
   262a8:	af04      	add	r7, sp, #16
   262aa:	0004      	movs	r4, r0
   262ac:	0008      	movs	r0, r1
   262ae:	0011      	movs	r1, r2
   262b0:	1dbb      	adds	r3, r7, #6
   262b2:	1c22      	adds	r2, r4, #0
   262b4:	801a      	strh	r2, [r3, #0]
   262b6:	1d7b      	adds	r3, r7, #5
   262b8:	1c02      	adds	r2, r0, #0
   262ba:	701a      	strb	r2, [r3, #0]
   262bc:	1d3b      	adds	r3, r7, #4
   262be:	1c0a      	adds	r2, r1, #0
   262c0:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
   262c2:	231f      	movs	r3, #31
   262c4:	18fb      	adds	r3, r7, r3
   262c6:	22ff      	movs	r2, #255	; 0xff
   262c8:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
   262ca:	1dbb      	adds	r3, r7, #6
   262cc:	881b      	ldrh	r3, [r3, #0]
   262ce:	2b02      	cmp	r3, #2
   262d0:	d000      	beq.n	262d4 <socket+0x30>
   262d2:	e0ce      	b.n	26472 <socket+0x1ce>
	{
		if(u8Type == SOCK_STREAM)
   262d4:	1d7b      	adds	r3, r7, #5
   262d6:	781b      	ldrb	r3, [r3, #0]
   262d8:	2b01      	cmp	r3, #1
   262da:	d135      	bne.n	26348 <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   262dc:	231e      	movs	r3, #30
   262de:	18fb      	adds	r3, r7, r3
   262e0:	2200      	movs	r2, #0
   262e2:	701a      	strb	r2, [r3, #0]
   262e4:	e02a      	b.n	2633c <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
   262e6:	2317      	movs	r3, #23
   262e8:	18fb      	adds	r3, r7, r3
   262ea:	4a66      	ldr	r2, [pc, #408]	; (26484 <socket+0x1e0>)
   262ec:	7812      	ldrb	r2, [r2, #0]
   262ee:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
   262f0:	4b64      	ldr	r3, [pc, #400]	; (26484 <socket+0x1e0>)
   262f2:	781b      	ldrb	r3, [r3, #0]
   262f4:	b2db      	uxtb	r3, r3
   262f6:	011a      	lsls	r2, r3, #4
   262f8:	4b63      	ldr	r3, [pc, #396]	; (26488 <socket+0x1e4>)
   262fa:	18d3      	adds	r3, r2, r3
   262fc:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   262fe:	4b61      	ldr	r3, [pc, #388]	; (26484 <socket+0x1e0>)
   26300:	781b      	ldrb	r3, [r3, #0]
   26302:	b2db      	uxtb	r3, r3
   26304:	1c5a      	adds	r2, r3, #1
   26306:	4b61      	ldr	r3, [pc, #388]	; (2648c <socket+0x1e8>)
   26308:	2107      	movs	r1, #7
   2630a:	0010      	movs	r0, r2
   2630c:	4798      	blx	r3
   2630e:	000b      	movs	r3, r1
   26310:	b2da      	uxtb	r2, r3
   26312:	4b5c      	ldr	r3, [pc, #368]	; (26484 <socket+0x1e0>)
   26314:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   26316:	69bb      	ldr	r3, [r7, #24]
   26318:	7a9b      	ldrb	r3, [r3, #10]
   2631a:	b2db      	uxtb	r3, r3
   2631c:	2b00      	cmp	r3, #0
   2631e:	d106      	bne.n	2632e <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
   26320:	231f      	movs	r3, #31
   26322:	18fb      	adds	r3, r7, r3
   26324:	2217      	movs	r2, #23
   26326:	18ba      	adds	r2, r7, r2
   26328:	7812      	ldrb	r2, [r2, #0]
   2632a:	701a      	strb	r2, [r3, #0]
					break;
   2632c:	e04c      	b.n	263c8 <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   2632e:	231e      	movs	r3, #30
   26330:	18fb      	adds	r3, r7, r3
   26332:	781a      	ldrb	r2, [r3, #0]
   26334:	231e      	movs	r3, #30
   26336:	18fb      	adds	r3, r7, r3
   26338:	3201      	adds	r2, #1
   2633a:	701a      	strb	r2, [r3, #0]
   2633c:	231e      	movs	r3, #30
   2633e:	18fb      	adds	r3, r7, r3
   26340:	781b      	ldrb	r3, [r3, #0]
   26342:	2b06      	cmp	r3, #6
   26344:	d9cf      	bls.n	262e6 <socket+0x42>
   26346:	e03f      	b.n	263c8 <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
   26348:	1d7b      	adds	r3, r7, #5
   2634a:	781b      	ldrb	r3, [r3, #0]
   2634c:	2b02      	cmp	r3, #2
   2634e:	d13b      	bne.n	263c8 <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
   26350:	4b4f      	ldr	r3, [pc, #316]	; (26490 <socket+0x1ec>)
   26352:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   26354:	231e      	movs	r3, #30
   26356:	18fb      	adds	r3, r7, r3
   26358:	2200      	movs	r2, #0
   2635a:	701a      	strb	r2, [r3, #0]
   2635c:	e02f      	b.n	263be <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
   2635e:	2317      	movs	r3, #23
   26360:	18fb      	adds	r3, r7, r3
   26362:	4a4c      	ldr	r2, [pc, #304]	; (26494 <socket+0x1f0>)
   26364:	7812      	ldrb	r2, [r2, #0]
   26366:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   26368:	4b4a      	ldr	r3, [pc, #296]	; (26494 <socket+0x1f0>)
   2636a:	781b      	ldrb	r3, [r3, #0]
   2636c:	b2db      	uxtb	r3, r3
   2636e:	011b      	lsls	r3, r3, #4
   26370:	693a      	ldr	r2, [r7, #16]
   26372:	18d3      	adds	r3, r2, r3
   26374:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   26376:	4b47      	ldr	r3, [pc, #284]	; (26494 <socket+0x1f0>)
   26378:	781b      	ldrb	r3, [r3, #0]
   2637a:	b2db      	uxtb	r3, r3
   2637c:	3301      	adds	r3, #1
   2637e:	4a46      	ldr	r2, [pc, #280]	; (26498 <socket+0x1f4>)
   26380:	4013      	ands	r3, r2
   26382:	d504      	bpl.n	2638e <socket+0xea>
   26384:	3b01      	subs	r3, #1
   26386:	2204      	movs	r2, #4
   26388:	4252      	negs	r2, r2
   2638a:	4313      	orrs	r3, r2
   2638c:	3301      	adds	r3, #1
   2638e:	b2da      	uxtb	r2, r3
   26390:	4b40      	ldr	r3, [pc, #256]	; (26494 <socket+0x1f0>)
   26392:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   26394:	69bb      	ldr	r3, [r7, #24]
   26396:	7a9b      	ldrb	r3, [r3, #10]
   26398:	b2db      	uxtb	r3, r3
   2639a:	2b00      	cmp	r3, #0
   2639c:	d108      	bne.n	263b0 <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
   2639e:	2317      	movs	r3, #23
   263a0:	18fb      	adds	r3, r7, r3
   263a2:	781b      	ldrb	r3, [r3, #0]
   263a4:	3307      	adds	r3, #7
   263a6:	b2da      	uxtb	r2, r3
   263a8:	231f      	movs	r3, #31
   263aa:	18fb      	adds	r3, r7, r3
   263ac:	701a      	strb	r2, [r3, #0]
					break;
   263ae:	e00b      	b.n	263c8 <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   263b0:	231e      	movs	r3, #30
   263b2:	18fb      	adds	r3, r7, r3
   263b4:	781a      	ldrb	r2, [r3, #0]
   263b6:	231e      	movs	r3, #30
   263b8:	18fb      	adds	r3, r7, r3
   263ba:	3201      	adds	r2, #1
   263bc:	701a      	strb	r2, [r3, #0]
   263be:	231e      	movs	r3, #30
   263c0:	18fb      	adds	r3, r7, r3
   263c2:	781b      	ldrb	r3, [r3, #0]
   263c4:	2b03      	cmp	r3, #3
   263c6:	d9ca      	bls.n	2635e <socket+0xba>
				}
			}
		}

		if(sock >= 0)
   263c8:	231f      	movs	r3, #31
   263ca:	18fb      	adds	r3, r7, r3
   263cc:	781b      	ldrb	r3, [r3, #0]
   263ce:	2b7f      	cmp	r3, #127	; 0x7f
   263d0:	d84f      	bhi.n	26472 <socket+0x1ce>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
   263d2:	69bb      	ldr	r3, [r7, #24]
   263d4:	2210      	movs	r2, #16
   263d6:	2100      	movs	r1, #0
   263d8:	0018      	movs	r0, r3
   263da:	4b30      	ldr	r3, [pc, #192]	; (2649c <socket+0x1f8>)
   263dc:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
   263de:	69bb      	ldr	r3, [r7, #24]
   263e0:	2201      	movs	r2, #1
   263e2:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
   263e4:	4b2e      	ldr	r3, [pc, #184]	; (264a0 <socket+0x1fc>)
   263e6:	881b      	ldrh	r3, [r3, #0]
   263e8:	b29b      	uxth	r3, r3
   263ea:	3301      	adds	r3, #1
   263ec:	b29a      	uxth	r2, r3
   263ee:	4b2c      	ldr	r3, [pc, #176]	; (264a0 <socket+0x1fc>)
   263f0:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
   263f2:	4b2b      	ldr	r3, [pc, #172]	; (264a0 <socket+0x1fc>)
   263f4:	881b      	ldrh	r3, [r3, #0]
   263f6:	b29b      	uxth	r3, r3
   263f8:	2b00      	cmp	r3, #0
   263fa:	d106      	bne.n	2640a <socket+0x166>
				++gu16SessionID;
   263fc:	4b28      	ldr	r3, [pc, #160]	; (264a0 <socket+0x1fc>)
   263fe:	881b      	ldrh	r3, [r3, #0]
   26400:	b29b      	uxth	r3, r3
   26402:	3301      	adds	r3, #1
   26404:	b29a      	uxth	r2, r3
   26406:	4b26      	ldr	r3, [pc, #152]	; (264a0 <socket+0x1fc>)
   26408:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
   2640a:	4b25      	ldr	r3, [pc, #148]	; (264a0 <socket+0x1fc>)
   2640c:	881b      	ldrh	r3, [r3, #0]
   2640e:	b29a      	uxth	r2, r3
   26410:	69bb      	ldr	r3, [r7, #24]
   26412:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
   26414:	4b23      	ldr	r3, [pc, #140]	; (264a4 <socket+0x200>)
   26416:	0018      	movs	r0, r3
   26418:	4b23      	ldr	r3, [pc, #140]	; (264a8 <socket+0x204>)
   2641a:	4798      	blx	r3
   2641c:	231f      	movs	r3, #31
   2641e:	18fb      	adds	r3, r7, r3
   26420:	2100      	movs	r1, #0
   26422:	5659      	ldrsb	r1, [r3, r1]
   26424:	4b1e      	ldr	r3, [pc, #120]	; (264a0 <socket+0x1fc>)
   26426:	881b      	ldrh	r3, [r3, #0]
   26428:	b29b      	uxth	r3, r3
   2642a:	001a      	movs	r2, r3
   2642c:	4b1f      	ldr	r3, [pc, #124]	; (264ac <socket+0x208>)
   2642e:	0018      	movs	r0, r3
   26430:	4b1d      	ldr	r3, [pc, #116]	; (264a8 <socket+0x204>)
   26432:	4798      	blx	r3
   26434:	4b1e      	ldr	r3, [pc, #120]	; (264b0 <socket+0x20c>)
   26436:	0018      	movs	r0, r3
   26438:	4b1b      	ldr	r3, [pc, #108]	; (264a8 <socket+0x204>)
   2643a:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
   2643c:	1d3b      	adds	r3, r7, #4
   2643e:	781b      	ldrb	r3, [r3, #0]
   26440:	2201      	movs	r2, #1
   26442:	4013      	ands	r3, r2
   26444:	d015      	beq.n	26472 <socket+0x1ce>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
   26446:	230c      	movs	r3, #12
   26448:	18fb      	adds	r3, r7, r3
   2644a:	221f      	movs	r2, #31
   2644c:	18ba      	adds	r2, r7, r2
   2644e:	7812      	ldrb	r2, [r2, #0]
   26450:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
   26452:	69bb      	ldr	r3, [r7, #24]
   26454:	2221      	movs	r2, #33	; 0x21
   26456:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
   26458:	230c      	movs	r3, #12
   2645a:	18fa      	adds	r2, r7, r3
   2645c:	2300      	movs	r3, #0
   2645e:	9302      	str	r3, [sp, #8]
   26460:	2300      	movs	r3, #0
   26462:	9301      	str	r3, [sp, #4]
   26464:	2300      	movs	r3, #0
   26466:	9300      	str	r3, [sp, #0]
   26468:	2304      	movs	r3, #4
   2646a:	2150      	movs	r1, #80	; 0x50
   2646c:	2002      	movs	r0, #2
   2646e:	4c11      	ldr	r4, [pc, #68]	; (264b4 <socket+0x210>)
   26470:	47a0      	blx	r4
			}
		}
	}
	return sock;
   26472:	231f      	movs	r3, #31
   26474:	18fb      	adds	r3, r7, r3
   26476:	781b      	ldrb	r3, [r3, #0]
   26478:	b25b      	sxtb	r3, r3
}
   2647a:	0018      	movs	r0, r3
   2647c:	46bd      	mov	sp, r7
   2647e:	b009      	add	sp, #36	; 0x24
   26480:	bd90      	pop	{r4, r7, pc}
   26482:	46c0      	nop			; (mov r8, r8)
   26484:	20003ef1 	.word	0x20003ef1
   26488:	20005744 	.word	0x20005744
   2648c:	00033a0d 	.word	0x00033a0d
   26490:	200057b4 	.word	0x200057b4
   26494:	20003ef2 	.word	0x20003ef2
   26498:	80000003 	.word	0x80000003
   2649c:	00021915 	.word	0x00021915
   264a0:	20003eee 	.word	0x20003eee
   264a4:	0003a168 	.word	0x0003a168
   264a8:	0001eb7d 	.word	0x0001eb7d
   264ac:	0003a18c 	.word	0x0003a18c
   264b0:	0003a188 	.word	0x0003a188
   264b4:	00021b75 	.word	0x00021b75

000264b8 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
   264b8:	b5b0      	push	{r4, r5, r7, lr}
   264ba:	b08a      	sub	sp, #40	; 0x28
   264bc:	af04      	add	r7, sp, #16
   264be:	6039      	str	r1, [r7, #0]
   264c0:	0011      	movs	r1, r2
   264c2:	1dfb      	adds	r3, r7, #7
   264c4:	1c02      	adds	r2, r0, #0
   264c6:	701a      	strb	r2, [r3, #0]
   264c8:	1dbb      	adds	r3, r7, #6
   264ca:	1c0a      	adds	r2, r1, #0
   264cc:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   264ce:	2317      	movs	r3, #23
   264d0:	18fb      	adds	r3, r7, r3
   264d2:	22fa      	movs	r2, #250	; 0xfa
   264d4:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
   264d6:	1dfb      	adds	r3, r7, #7
   264d8:	781b      	ldrb	r3, [r3, #0]
   264da:	2b7f      	cmp	r3, #127	; 0x7f
   264dc:	d867      	bhi.n	265ae <connect+0xf6>
   264de:	683b      	ldr	r3, [r7, #0]
   264e0:	2b00      	cmp	r3, #0
   264e2:	d064      	beq.n	265ae <connect+0xf6>
   264e4:	1dfb      	adds	r3, r7, #7
   264e6:	781b      	ldrb	r3, [r3, #0]
   264e8:	b25b      	sxtb	r3, r3
   264ea:	4a35      	ldr	r2, [pc, #212]	; (265c0 <connect+0x108>)
   264ec:	011b      	lsls	r3, r3, #4
   264ee:	18d3      	adds	r3, r2, r3
   264f0:	330a      	adds	r3, #10
   264f2:	781b      	ldrb	r3, [r3, #0]
   264f4:	b2db      	uxtb	r3, r3
   264f6:	2b01      	cmp	r3, #1
   264f8:	d159      	bne.n	265ae <connect+0xf6>
   264fa:	1dbb      	adds	r3, r7, #6
   264fc:	781b      	ldrb	r3, [r3, #0]
   264fe:	2b00      	cmp	r3, #0
   26500:	d055      	beq.n	265ae <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
   26502:	2316      	movs	r3, #22
   26504:	18fb      	adds	r3, r7, r3
   26506:	2244      	movs	r2, #68	; 0x44
   26508:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
   2650a:	1dfb      	adds	r3, r7, #7
   2650c:	781b      	ldrb	r3, [r3, #0]
   2650e:	b25b      	sxtb	r3, r3
   26510:	4a2b      	ldr	r2, [pc, #172]	; (265c0 <connect+0x108>)
   26512:	011b      	lsls	r3, r3, #4
   26514:	18d3      	adds	r3, r2, r3
   26516:	330b      	adds	r3, #11
   26518:	781b      	ldrb	r3, [r3, #0]
   2651a:	b2db      	uxtb	r3, r3
   2651c:	001a      	movs	r2, r3
   2651e:	2301      	movs	r3, #1
   26520:	4013      	ands	r3, r2
   26522:	d00f      	beq.n	26544 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
   26524:	2316      	movs	r3, #22
   26526:	18fb      	adds	r3, r7, r3
   26528:	224b      	movs	r2, #75	; 0x4b
   2652a:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
   2652c:	1dfb      	adds	r3, r7, #7
   2652e:	781b      	ldrb	r3, [r3, #0]
   26530:	b25b      	sxtb	r3, r3
   26532:	4a23      	ldr	r2, [pc, #140]	; (265c0 <connect+0x108>)
   26534:	011b      	lsls	r3, r3, #4
   26536:	18d3      	adds	r3, r2, r3
   26538:	330b      	adds	r3, #11
   2653a:	781b      	ldrb	r3, [r3, #0]
   2653c:	b2da      	uxtb	r2, r3
   2653e:	2308      	movs	r3, #8
   26540:	18fb      	adds	r3, r7, r3
   26542:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
   26544:	2308      	movs	r3, #8
   26546:	18fb      	adds	r3, r7, r3
   26548:	1dfa      	adds	r2, r7, #7
   2654a:	7812      	ldrb	r2, [r2, #0]
   2654c:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
   2654e:	6839      	ldr	r1, [r7, #0]
   26550:	2308      	movs	r3, #8
   26552:	18fb      	adds	r3, r7, r3
   26554:	2208      	movs	r2, #8
   26556:	0018      	movs	r0, r3
   26558:	4b1a      	ldr	r3, [pc, #104]	; (265c4 <connect+0x10c>)
   2655a:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
   2655c:	1dfb      	adds	r3, r7, #7
   2655e:	781b      	ldrb	r3, [r3, #0]
   26560:	b25b      	sxtb	r3, r3
   26562:	4a17      	ldr	r2, [pc, #92]	; (265c0 <connect+0x108>)
   26564:	011b      	lsls	r3, r3, #4
   26566:	18d3      	adds	r3, r2, r3
   26568:	3306      	adds	r3, #6
   2656a:	881b      	ldrh	r3, [r3, #0]
   2656c:	b29a      	uxth	r2, r3
   2656e:	2308      	movs	r3, #8
   26570:	18fb      	adds	r3, r7, r3
   26572:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
   26574:	2317      	movs	r3, #23
   26576:	18fc      	adds	r4, r7, r3
   26578:	2308      	movs	r3, #8
   2657a:	18fa      	adds	r2, r7, r3
   2657c:	2316      	movs	r3, #22
   2657e:	18fb      	adds	r3, r7, r3
   26580:	7819      	ldrb	r1, [r3, #0]
   26582:	2300      	movs	r3, #0
   26584:	9302      	str	r3, [sp, #8]
   26586:	2300      	movs	r3, #0
   26588:	9301      	str	r3, [sp, #4]
   2658a:	2300      	movs	r3, #0
   2658c:	9300      	str	r3, [sp, #0]
   2658e:	230c      	movs	r3, #12
   26590:	2002      	movs	r0, #2
   26592:	4d0d      	ldr	r5, [pc, #52]	; (265c8 <connect+0x110>)
   26594:	47a8      	blx	r5
   26596:	0003      	movs	r3, r0
   26598:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   2659a:	2317      	movs	r3, #23
   2659c:	18fb      	adds	r3, r7, r3
   2659e:	781b      	ldrb	r3, [r3, #0]
   265a0:	b25b      	sxtb	r3, r3
   265a2:	2b00      	cmp	r3, #0
   265a4:	d003      	beq.n	265ae <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
   265a6:	2317      	movs	r3, #23
   265a8:	18fb      	adds	r3, r7, r3
   265aa:	22f7      	movs	r2, #247	; 0xf7
   265ac:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
   265ae:	2317      	movs	r3, #23
   265b0:	18fb      	adds	r3, r7, r3
   265b2:	781b      	ldrb	r3, [r3, #0]
   265b4:	b25b      	sxtb	r3, r3
}
   265b6:	0018      	movs	r0, r3
   265b8:	46bd      	mov	sp, r7
   265ba:	b006      	add	sp, #24
   265bc:	bdb0      	pop	{r4, r5, r7, pc}
   265be:	46c0      	nop			; (mov r8, r8)
   265c0:	20005744 	.word	0x20005744
   265c4:	000218d9 	.word	0x000218d9
   265c8:	00021b75 	.word	0x00021b75

000265cc <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
   265cc:	b590      	push	{r4, r7, lr}
   265ce:	b08f      	sub	sp, #60	; 0x3c
   265d0:	af04      	add	r7, sp, #16
   265d2:	0004      	movs	r4, r0
   265d4:	60b9      	str	r1, [r7, #8]
   265d6:	0010      	movs	r0, r2
   265d8:	0019      	movs	r1, r3
   265da:	230f      	movs	r3, #15
   265dc:	18fb      	adds	r3, r7, r3
   265de:	1c22      	adds	r2, r4, #0
   265e0:	701a      	strb	r2, [r3, #0]
   265e2:	230c      	movs	r3, #12
   265e4:	18fb      	adds	r3, r7, r3
   265e6:	1c02      	adds	r2, r0, #0
   265e8:	801a      	strh	r2, [r3, #0]
   265ea:	1dbb      	adds	r3, r7, #6
   265ec:	1c0a      	adds	r2, r1, #0
   265ee:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   265f0:	2326      	movs	r3, #38	; 0x26
   265f2:	18fb      	adds	r3, r7, r3
   265f4:	2206      	movs	r2, #6
   265f6:	4252      	negs	r2, r2
   265f8:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
   265fa:	230f      	movs	r3, #15
   265fc:	18fb      	adds	r3, r7, r3
   265fe:	781b      	ldrb	r3, [r3, #0]
   26600:	2b7f      	cmp	r3, #127	; 0x7f
   26602:	d900      	bls.n	26606 <send+0x3a>
   26604:	e087      	b.n	26716 <send+0x14a>
   26606:	68bb      	ldr	r3, [r7, #8]
   26608:	2b00      	cmp	r3, #0
   2660a:	d100      	bne.n	2660e <send+0x42>
   2660c:	e083      	b.n	26716 <send+0x14a>
   2660e:	230c      	movs	r3, #12
   26610:	18fb      	adds	r3, r7, r3
   26612:	881a      	ldrh	r2, [r3, #0]
   26614:	23af      	movs	r3, #175	; 0xaf
   26616:	00db      	lsls	r3, r3, #3
   26618:	429a      	cmp	r2, r3
   2661a:	d900      	bls.n	2661e <send+0x52>
   2661c:	e07b      	b.n	26716 <send+0x14a>
   2661e:	230f      	movs	r3, #15
   26620:	18fb      	adds	r3, r7, r3
   26622:	781b      	ldrb	r3, [r3, #0]
   26624:	b25b      	sxtb	r3, r3
   26626:	4a40      	ldr	r2, [pc, #256]	; (26728 <send+0x15c>)
   26628:	011b      	lsls	r3, r3, #4
   2662a:	18d3      	adds	r3, r2, r3
   2662c:	330a      	adds	r3, #10
   2662e:	781b      	ldrb	r3, [r3, #0]
   26630:	b2db      	uxtb	r3, r3
   26632:	2b01      	cmp	r3, #1
   26634:	d16f      	bne.n	26716 <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
   26636:	2323      	movs	r3, #35	; 0x23
   26638:	18fb      	adds	r3, r7, r3
   2663a:	2245      	movs	r2, #69	; 0x45
   2663c:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
   2663e:	2324      	movs	r3, #36	; 0x24
   26640:	18fb      	adds	r3, r7, r3
   26642:	2250      	movs	r2, #80	; 0x50
   26644:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
   26646:	2310      	movs	r3, #16
   26648:	18fb      	adds	r3, r7, r3
   2664a:	220f      	movs	r2, #15
   2664c:	18ba      	adds	r2, r7, r2
   2664e:	7812      	ldrb	r2, [r2, #0]
   26650:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
   26652:	2310      	movs	r3, #16
   26654:	18fb      	adds	r3, r7, r3
   26656:	220c      	movs	r2, #12
   26658:	18ba      	adds	r2, r7, r2
   2665a:	8812      	ldrh	r2, [r2, #0]
   2665c:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
   2665e:	230f      	movs	r3, #15
   26660:	18fb      	adds	r3, r7, r3
   26662:	781b      	ldrb	r3, [r3, #0]
   26664:	b25b      	sxtb	r3, r3
   26666:	4a30      	ldr	r2, [pc, #192]	; (26728 <send+0x15c>)
   26668:	011b      	lsls	r3, r3, #4
   2666a:	18d3      	adds	r3, r2, r3
   2666c:	3306      	adds	r3, #6
   2666e:	881b      	ldrh	r3, [r3, #0]
   26670:	b29a      	uxth	r2, r3
   26672:	2310      	movs	r3, #16
   26674:	18fb      	adds	r3, r7, r3
   26676:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
   26678:	230f      	movs	r3, #15
   2667a:	18fb      	adds	r3, r7, r3
   2667c:	781b      	ldrb	r3, [r3, #0]
   2667e:	b25b      	sxtb	r3, r3
   26680:	2b06      	cmp	r3, #6
   26682:	dd03      	ble.n	2668c <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
   26684:	2324      	movs	r3, #36	; 0x24
   26686:	18fb      	adds	r3, r7, r3
   26688:	2244      	movs	r2, #68	; 0x44
   2668a:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   2668c:	230f      	movs	r3, #15
   2668e:	18fb      	adds	r3, r7, r3
   26690:	781b      	ldrb	r3, [r3, #0]
   26692:	b25b      	sxtb	r3, r3
   26694:	4a24      	ldr	r2, [pc, #144]	; (26728 <send+0x15c>)
   26696:	011b      	lsls	r3, r3, #4
   26698:	18d3      	adds	r3, r2, r3
   2669a:	330b      	adds	r3, #11
   2669c:	781b      	ldrb	r3, [r3, #0]
   2669e:	b2db      	uxtb	r3, r3
   266a0:	001a      	movs	r2, r3
   266a2:	2301      	movs	r3, #1
   266a4:	4013      	ands	r3, r2
   266a6:	d00f      	beq.n	266c8 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
   266a8:	2323      	movs	r3, #35	; 0x23
   266aa:	18fb      	adds	r3, r7, r3
   266ac:	224c      	movs	r2, #76	; 0x4c
   266ae:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
   266b0:	230f      	movs	r3, #15
   266b2:	18fb      	adds	r3, r7, r3
   266b4:	2200      	movs	r2, #0
   266b6:	569a      	ldrsb	r2, [r3, r2]
   266b8:	2324      	movs	r3, #36	; 0x24
   266ba:	18fb      	adds	r3, r7, r3
   266bc:	491a      	ldr	r1, [pc, #104]	; (26728 <send+0x15c>)
   266be:	0112      	lsls	r2, r2, #4
   266c0:	188a      	adds	r2, r1, r2
   266c2:	3208      	adds	r2, #8
   266c4:	8812      	ldrh	r2, [r2, #0]
   266c6:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
   266c8:	2323      	movs	r3, #35	; 0x23
   266ca:	18fb      	adds	r3, r7, r3
   266cc:	781b      	ldrb	r3, [r3, #0]
   266ce:	2280      	movs	r2, #128	; 0x80
   266d0:	4252      	negs	r2, r2
   266d2:	4313      	orrs	r3, r2
   266d4:	b2d9      	uxtb	r1, r3
   266d6:	2310      	movs	r3, #16
   266d8:	18fa      	adds	r2, r7, r3
   266da:	2324      	movs	r3, #36	; 0x24
   266dc:	18fb      	adds	r3, r7, r3
   266de:	881b      	ldrh	r3, [r3, #0]
   266e0:	9302      	str	r3, [sp, #8]
   266e2:	230c      	movs	r3, #12
   266e4:	18fb      	adds	r3, r7, r3
   266e6:	881b      	ldrh	r3, [r3, #0]
   266e8:	9301      	str	r3, [sp, #4]
   266ea:	68bb      	ldr	r3, [r7, #8]
   266ec:	9300      	str	r3, [sp, #0]
   266ee:	2310      	movs	r3, #16
   266f0:	2002      	movs	r0, #2
   266f2:	4c0e      	ldr	r4, [pc, #56]	; (2672c <send+0x160>)
   266f4:	47a0      	blx	r4
   266f6:	0003      	movs	r3, r0
   266f8:	001a      	movs	r2, r3
   266fa:	2326      	movs	r3, #38	; 0x26
   266fc:	18fb      	adds	r3, r7, r3
   266fe:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
   26700:	2326      	movs	r3, #38	; 0x26
   26702:	18fb      	adds	r3, r7, r3
   26704:	2200      	movs	r2, #0
   26706:	5e9b      	ldrsh	r3, [r3, r2]
   26708:	2b00      	cmp	r3, #0
   2670a:	d004      	beq.n	26716 <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
   2670c:	2326      	movs	r3, #38	; 0x26
   2670e:	18fb      	adds	r3, r7, r3
   26710:	220e      	movs	r2, #14
   26712:	4252      	negs	r2, r2
   26714:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
   26716:	2326      	movs	r3, #38	; 0x26
   26718:	18fb      	adds	r3, r7, r3
   2671a:	2200      	movs	r2, #0
   2671c:	5e9b      	ldrsh	r3, [r3, r2]
}
   2671e:	0018      	movs	r0, r3
   26720:	46bd      	mov	sp, r7
   26722:	b00b      	add	sp, #44	; 0x2c
   26724:	bd90      	pop	{r4, r7, pc}
   26726:	46c0      	nop			; (mov r8, r8)
   26728:	20005744 	.word	0x20005744
   2672c:	00021b75 	.word	0x00021b75

00026730 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
   26730:	b590      	push	{r4, r7, lr}
   26732:	b08d      	sub	sp, #52	; 0x34
   26734:	af04      	add	r7, sp, #16
   26736:	60b9      	str	r1, [r7, #8]
   26738:	0011      	movs	r1, r2
   2673a:	607b      	str	r3, [r7, #4]
   2673c:	230f      	movs	r3, #15
   2673e:	18fb      	adds	r3, r7, r3
   26740:	1c02      	adds	r2, r0, #0
   26742:	701a      	strb	r2, [r3, #0]
   26744:	230c      	movs	r3, #12
   26746:	18fb      	adds	r3, r7, r3
   26748:	1c0a      	adds	r2, r1, #0
   2674a:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   2674c:	231e      	movs	r3, #30
   2674e:	18fb      	adds	r3, r7, r3
   26750:	2206      	movs	r2, #6
   26752:	4252      	negs	r2, r2
   26754:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
   26756:	230f      	movs	r3, #15
   26758:	18fb      	adds	r3, r7, r3
   2675a:	781b      	ldrb	r3, [r3, #0]
   2675c:	2b7f      	cmp	r3, #127	; 0x7f
   2675e:	d900      	bls.n	26762 <recv+0x32>
   26760:	e099      	b.n	26896 <recv+0x166>
   26762:	68bb      	ldr	r3, [r7, #8]
   26764:	2b00      	cmp	r3, #0
   26766:	d100      	bne.n	2676a <recv+0x3a>
   26768:	e095      	b.n	26896 <recv+0x166>
   2676a:	230c      	movs	r3, #12
   2676c:	18fb      	adds	r3, r7, r3
   2676e:	881b      	ldrh	r3, [r3, #0]
   26770:	2b00      	cmp	r3, #0
   26772:	d100      	bne.n	26776 <recv+0x46>
   26774:	e08f      	b.n	26896 <recv+0x166>
   26776:	230f      	movs	r3, #15
   26778:	18fb      	adds	r3, r7, r3
   2677a:	781b      	ldrb	r3, [r3, #0]
   2677c:	b25b      	sxtb	r3, r3
   2677e:	4a4a      	ldr	r2, [pc, #296]	; (268a8 <recv+0x178>)
   26780:	011b      	lsls	r3, r3, #4
   26782:	18d3      	adds	r3, r2, r3
   26784:	330a      	adds	r3, #10
   26786:	781b      	ldrb	r3, [r3, #0]
   26788:	b2db      	uxtb	r3, r3
   2678a:	2b01      	cmp	r3, #1
   2678c:	d000      	beq.n	26790 <recv+0x60>
   2678e:	e082      	b.n	26896 <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
   26790:	231e      	movs	r3, #30
   26792:	18fb      	adds	r3, r7, r3
   26794:	2200      	movs	r2, #0
   26796:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
   26798:	230f      	movs	r3, #15
   2679a:	18fb      	adds	r3, r7, r3
   2679c:	2200      	movs	r2, #0
   2679e:	569a      	ldrsb	r2, [r3, r2]
   267a0:	4b41      	ldr	r3, [pc, #260]	; (268a8 <recv+0x178>)
   267a2:	0112      	lsls	r2, r2, #4
   267a4:	68b9      	ldr	r1, [r7, #8]
   267a6:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
   267a8:	230f      	movs	r3, #15
   267aa:	18fb      	adds	r3, r7, r3
   267ac:	781b      	ldrb	r3, [r3, #0]
   267ae:	b25b      	sxtb	r3, r3
   267b0:	4a3d      	ldr	r2, [pc, #244]	; (268a8 <recv+0x178>)
   267b2:	011b      	lsls	r3, r3, #4
   267b4:	18d3      	adds	r3, r2, r3
   267b6:	3304      	adds	r3, #4
   267b8:	220c      	movs	r2, #12
   267ba:	18ba      	adds	r2, r7, r2
   267bc:	8812      	ldrh	r2, [r2, #0]
   267be:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
   267c0:	230f      	movs	r3, #15
   267c2:	18fb      	adds	r3, r7, r3
   267c4:	781b      	ldrb	r3, [r3, #0]
   267c6:	b25b      	sxtb	r3, r3
   267c8:	4a37      	ldr	r2, [pc, #220]	; (268a8 <recv+0x178>)
   267ca:	011b      	lsls	r3, r3, #4
   267cc:	18d3      	adds	r3, r2, r3
   267ce:	330c      	adds	r3, #12
   267d0:	781b      	ldrb	r3, [r3, #0]
   267d2:	b2db      	uxtb	r3, r3
   267d4:	2b00      	cmp	r3, #0
   267d6:	d15e      	bne.n	26896 <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
   267d8:	231d      	movs	r3, #29
   267da:	18fb      	adds	r3, r7, r3
   267dc:	2246      	movs	r2, #70	; 0x46
   267de:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
   267e0:	230f      	movs	r3, #15
   267e2:	18fb      	adds	r3, r7, r3
   267e4:	781b      	ldrb	r3, [r3, #0]
   267e6:	b25b      	sxtb	r3, r3
   267e8:	4a2f      	ldr	r2, [pc, #188]	; (268a8 <recv+0x178>)
   267ea:	011b      	lsls	r3, r3, #4
   267ec:	18d3      	adds	r3, r2, r3
   267ee:	330c      	adds	r3, #12
   267f0:	2201      	movs	r2, #1
   267f2:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   267f4:	230f      	movs	r3, #15
   267f6:	18fb      	adds	r3, r7, r3
   267f8:	781b      	ldrb	r3, [r3, #0]
   267fa:	b25b      	sxtb	r3, r3
   267fc:	4a2a      	ldr	r2, [pc, #168]	; (268a8 <recv+0x178>)
   267fe:	011b      	lsls	r3, r3, #4
   26800:	18d3      	adds	r3, r2, r3
   26802:	330b      	adds	r3, #11
   26804:	781b      	ldrb	r3, [r3, #0]
   26806:	b2db      	uxtb	r3, r3
   26808:	001a      	movs	r2, r3
   2680a:	2301      	movs	r3, #1
   2680c:	4013      	ands	r3, r2
   2680e:	d003      	beq.n	26818 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
   26810:	231d      	movs	r3, #29
   26812:	18fb      	adds	r3, r7, r3
   26814:	224d      	movs	r2, #77	; 0x4d
   26816:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
   26818:	687b      	ldr	r3, [r7, #4]
   2681a:	2b00      	cmp	r3, #0
   2681c:	d105      	bne.n	2682a <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
   2681e:	2314      	movs	r3, #20
   26820:	18fb      	adds	r3, r7, r3
   26822:	2201      	movs	r2, #1
   26824:	4252      	negs	r2, r2
   26826:	601a      	str	r2, [r3, #0]
   26828:	e003      	b.n	26832 <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
   2682a:	2314      	movs	r3, #20
   2682c:	18fb      	adds	r3, r7, r3
   2682e:	687a      	ldr	r2, [r7, #4]
   26830:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
   26832:	2314      	movs	r3, #20
   26834:	18fb      	adds	r3, r7, r3
   26836:	220f      	movs	r2, #15
   26838:	18ba      	adds	r2, r7, r2
   2683a:	7812      	ldrb	r2, [r2, #0]
   2683c:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
   2683e:	230f      	movs	r3, #15
   26840:	18fb      	adds	r3, r7, r3
   26842:	781b      	ldrb	r3, [r3, #0]
   26844:	b25b      	sxtb	r3, r3
   26846:	4a18      	ldr	r2, [pc, #96]	; (268a8 <recv+0x178>)
   26848:	011b      	lsls	r3, r3, #4
   2684a:	18d3      	adds	r3, r2, r3
   2684c:	3306      	adds	r3, #6
   2684e:	881b      	ldrh	r3, [r3, #0]
   26850:	b29a      	uxth	r2, r3
   26852:	2314      	movs	r3, #20
   26854:	18fb      	adds	r3, r7, r3
   26856:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
   26858:	2314      	movs	r3, #20
   2685a:	18fa      	adds	r2, r7, r3
   2685c:	231d      	movs	r3, #29
   2685e:	18fb      	adds	r3, r7, r3
   26860:	7819      	ldrb	r1, [r3, #0]
   26862:	2300      	movs	r3, #0
   26864:	9302      	str	r3, [sp, #8]
   26866:	2300      	movs	r3, #0
   26868:	9301      	str	r3, [sp, #4]
   2686a:	2300      	movs	r3, #0
   2686c:	9300      	str	r3, [sp, #0]
   2686e:	2308      	movs	r3, #8
   26870:	2002      	movs	r0, #2
   26872:	4c0e      	ldr	r4, [pc, #56]	; (268ac <recv+0x17c>)
   26874:	47a0      	blx	r4
   26876:	0003      	movs	r3, r0
   26878:	001a      	movs	r2, r3
   2687a:	231e      	movs	r3, #30
   2687c:	18fb      	adds	r3, r7, r3
   2687e:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
   26880:	231e      	movs	r3, #30
   26882:	18fb      	adds	r3, r7, r3
   26884:	2200      	movs	r2, #0
   26886:	5e9b      	ldrsh	r3, [r3, r2]
   26888:	2b00      	cmp	r3, #0
   2688a:	d004      	beq.n	26896 <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
   2688c:	231e      	movs	r3, #30
   2688e:	18fb      	adds	r3, r7, r3
   26890:	220e      	movs	r2, #14
   26892:	4252      	negs	r2, r2
   26894:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
   26896:	231e      	movs	r3, #30
   26898:	18fb      	adds	r3, r7, r3
   2689a:	2200      	movs	r2, #0
   2689c:	5e9b      	ldrsh	r3, [r3, r2]
}
   2689e:	0018      	movs	r0, r3
   268a0:	46bd      	mov	sp, r7
   268a2:	b009      	add	sp, #36	; 0x24
   268a4:	bd90      	pop	{r4, r7, pc}
   268a6:	46c0      	nop			; (mov r8, r8)
   268a8:	20005744 	.word	0x20005744
   268ac:	00021b75 	.word	0x00021b75

000268b0 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
   268b0:	b5b0      	push	{r4, r5, r7, lr}
   268b2:	b088      	sub	sp, #32
   268b4:	af04      	add	r7, sp, #16
   268b6:	0002      	movs	r2, r0
   268b8:	1dfb      	adds	r3, r7, #7
   268ba:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   268bc:	230f      	movs	r3, #15
   268be:	18fb      	adds	r3, r7, r3
   268c0:	22fa      	movs	r2, #250	; 0xfa
   268c2:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
   268c4:	4b43      	ldr	r3, [pc, #268]	; (269d4 <close+0x124>)
   268c6:	0018      	movs	r0, r3
   268c8:	4b43      	ldr	r3, [pc, #268]	; (269d8 <close+0x128>)
   268ca:	4798      	blx	r3
   268cc:	1dfb      	adds	r3, r7, #7
   268ce:	2200      	movs	r2, #0
   268d0:	569a      	ldrsb	r2, [r3, r2]
   268d2:	4b42      	ldr	r3, [pc, #264]	; (269dc <close+0x12c>)
   268d4:	0011      	movs	r1, r2
   268d6:	0018      	movs	r0, r3
   268d8:	4b3f      	ldr	r3, [pc, #252]	; (269d8 <close+0x128>)
   268da:	4798      	blx	r3
   268dc:	4b40      	ldr	r3, [pc, #256]	; (269e0 <close+0x130>)
   268de:	0018      	movs	r0, r3
   268e0:	4b3d      	ldr	r3, [pc, #244]	; (269d8 <close+0x128>)
   268e2:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
   268e4:	1dfb      	adds	r3, r7, #7
   268e6:	781b      	ldrb	r3, [r3, #0]
   268e8:	2b7f      	cmp	r3, #127	; 0x7f
   268ea:	d86a      	bhi.n	269c2 <close+0x112>
   268ec:	1dfb      	adds	r3, r7, #7
   268ee:	781b      	ldrb	r3, [r3, #0]
   268f0:	b25b      	sxtb	r3, r3
   268f2:	4a3c      	ldr	r2, [pc, #240]	; (269e4 <close+0x134>)
   268f4:	011b      	lsls	r3, r3, #4
   268f6:	18d3      	adds	r3, r2, r3
   268f8:	330a      	adds	r3, #10
   268fa:	781b      	ldrb	r3, [r3, #0]
   268fc:	b2db      	uxtb	r3, r3
   268fe:	2b01      	cmp	r3, #1
   26900:	d15f      	bne.n	269c2 <close+0x112>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
   26902:	230e      	movs	r3, #14
   26904:	18fb      	adds	r3, r7, r3
   26906:	2249      	movs	r2, #73	; 0x49
   26908:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
   2690a:	2308      	movs	r3, #8
   2690c:	18fb      	adds	r3, r7, r3
   2690e:	1dfa      	adds	r2, r7, #7
   26910:	7812      	ldrb	r2, [r2, #0]
   26912:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
   26914:	1dfb      	adds	r3, r7, #7
   26916:	781b      	ldrb	r3, [r3, #0]
   26918:	b25b      	sxtb	r3, r3
   2691a:	4a32      	ldr	r2, [pc, #200]	; (269e4 <close+0x134>)
   2691c:	011b      	lsls	r3, r3, #4
   2691e:	18d3      	adds	r3, r2, r3
   26920:	3306      	adds	r3, #6
   26922:	881b      	ldrh	r3, [r3, #0]
   26924:	b29a      	uxth	r2, r3
   26926:	2308      	movs	r3, #8
   26928:	18fb      	adds	r3, r7, r3
   2692a:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
   2692c:	1dfb      	adds	r3, r7, #7
   2692e:	781b      	ldrb	r3, [r3, #0]
   26930:	b25b      	sxtb	r3, r3
   26932:	4a2c      	ldr	r2, [pc, #176]	; (269e4 <close+0x134>)
   26934:	011b      	lsls	r3, r3, #4
   26936:	18d3      	adds	r3, r2, r3
   26938:	330a      	adds	r3, #10
   2693a:	2200      	movs	r2, #0
   2693c:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
   2693e:	1dfb      	adds	r3, r7, #7
   26940:	781b      	ldrb	r3, [r3, #0]
   26942:	b25b      	sxtb	r3, r3
   26944:	4a27      	ldr	r2, [pc, #156]	; (269e4 <close+0x134>)
   26946:	011b      	lsls	r3, r3, #4
   26948:	18d3      	adds	r3, r2, r3
   2694a:	3306      	adds	r3, #6
   2694c:	2200      	movs	r2, #0
   2694e:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   26950:	1dfb      	adds	r3, r7, #7
   26952:	781b      	ldrb	r3, [r3, #0]
   26954:	b25b      	sxtb	r3, r3
   26956:	4a23      	ldr	r2, [pc, #140]	; (269e4 <close+0x134>)
   26958:	011b      	lsls	r3, r3, #4
   2695a:	18d3      	adds	r3, r2, r3
   2695c:	330b      	adds	r3, #11
   2695e:	781b      	ldrb	r3, [r3, #0]
   26960:	b2db      	uxtb	r3, r3
   26962:	001a      	movs	r2, r3
   26964:	2301      	movs	r3, #1
   26966:	4013      	ands	r3, r2
   26968:	d003      	beq.n	26972 <close+0xc2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
   2696a:	230e      	movs	r3, #14
   2696c:	18fb      	adds	r3, r7, r3
   2696e:	224e      	movs	r2, #78	; 0x4e
   26970:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
   26972:	230f      	movs	r3, #15
   26974:	18fc      	adds	r4, r7, r3
   26976:	2308      	movs	r3, #8
   26978:	18fa      	adds	r2, r7, r3
   2697a:	230e      	movs	r3, #14
   2697c:	18fb      	adds	r3, r7, r3
   2697e:	7819      	ldrb	r1, [r3, #0]
   26980:	2300      	movs	r3, #0
   26982:	9302      	str	r3, [sp, #8]
   26984:	2300      	movs	r3, #0
   26986:	9301      	str	r3, [sp, #4]
   26988:	2300      	movs	r3, #0
   2698a:	9300      	str	r3, [sp, #0]
   2698c:	2304      	movs	r3, #4
   2698e:	2002      	movs	r0, #2
   26990:	4d15      	ldr	r5, [pc, #84]	; (269e8 <close+0x138>)
   26992:	47a8      	blx	r5
   26994:	0003      	movs	r3, r0
   26996:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   26998:	230f      	movs	r3, #15
   2699a:	18fb      	adds	r3, r7, r3
   2699c:	781b      	ldrb	r3, [r3, #0]
   2699e:	b25b      	sxtb	r3, r3
   269a0:	2b00      	cmp	r3, #0
   269a2:	d003      	beq.n	269ac <close+0xfc>
		{
			s8Ret = SOCK_ERR_INVALID;
   269a4:	230f      	movs	r3, #15
   269a6:	18fb      	adds	r3, r7, r3
   269a8:	22f7      	movs	r2, #247	; 0xf7
   269aa:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
   269ac:	1dfb      	adds	r3, r7, #7
   269ae:	781b      	ldrb	r3, [r3, #0]
   269b0:	b25b      	sxtb	r3, r3
   269b2:	011a      	lsls	r2, r3, #4
   269b4:	4b0b      	ldr	r3, [pc, #44]	; (269e4 <close+0x134>)
   269b6:	18d3      	adds	r3, r2, r3
   269b8:	2210      	movs	r2, #16
   269ba:	2100      	movs	r1, #0
   269bc:	0018      	movs	r0, r3
   269be:	4b0b      	ldr	r3, [pc, #44]	; (269ec <close+0x13c>)
   269c0:	4798      	blx	r3
	}
	return s8Ret;
   269c2:	230f      	movs	r3, #15
   269c4:	18fb      	adds	r3, r7, r3
   269c6:	781b      	ldrb	r3, [r3, #0]
   269c8:	b25b      	sxtb	r3, r3
}
   269ca:	0018      	movs	r0, r3
   269cc:	46bd      	mov	sp, r7
   269ce:	b004      	add	sp, #16
   269d0:	bdb0      	pop	{r4, r5, r7, pc}
   269d2:	46c0      	nop			; (mov r8, r8)
   269d4:	0003a168 	.word	0x0003a168
   269d8:	0001eb7d 	.word	0x0001eb7d
   269dc:	0003a1a8 	.word	0x0003a1a8
   269e0:	0003a188 	.word	0x0003a188
   269e4:	20005744 	.word	0x20005744
   269e8:	00021b75 	.word	0x00021b75
   269ec:	00021915 	.word	0x00021915

000269f0 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
   269f0:	b580      	push	{r7, lr}
   269f2:	b086      	sub	sp, #24
   269f4:	af00      	add	r7, sp, #0
   269f6:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
   269f8:	2300      	movs	r3, #0
   269fa:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
   269fc:	2317      	movs	r3, #23
   269fe:	18fb      	adds	r3, r7, r3
   26a00:	2200      	movs	r2, #0
   26a02:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
   26a04:	2316      	movs	r3, #22
   26a06:	18fb      	adds	r3, r7, r3
   26a08:	2200      	movs	r2, #0
   26a0a:	701a      	strb	r2, [r3, #0]
   26a0c:	e060      	b.n	26ad0 <nmi_inet_addr+0xe0>
	{
		j = 0;
   26a0e:	2315      	movs	r3, #21
   26a10:	18fb      	adds	r3, r7, r3
   26a12:	2200      	movs	r2, #0
   26a14:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
   26a16:	2314      	movs	r3, #20
   26a18:	18fb      	adds	r3, r7, r3
   26a1a:	687a      	ldr	r2, [r7, #4]
   26a1c:	7812      	ldrb	r2, [r2, #0]
   26a1e:	701a      	strb	r2, [r3, #0]
			++j;
   26a20:	2315      	movs	r3, #21
   26a22:	18fb      	adds	r3, r7, r3
   26a24:	2215      	movs	r2, #21
   26a26:	18ba      	adds	r2, r7, r2
   26a28:	7812      	ldrb	r2, [r2, #0]
   26a2a:	3201      	adds	r2, #1
   26a2c:	701a      	strb	r2, [r3, #0]
			if(j > 4)
   26a2e:	2315      	movs	r3, #21
   26a30:	18fb      	adds	r3, r7, r3
   26a32:	781b      	ldrb	r3, [r3, #0]
   26a34:	2b04      	cmp	r3, #4
   26a36:	d901      	bls.n	26a3c <nmi_inet_addr+0x4c>
			{
				return 0;
   26a38:	2300      	movs	r3, #0
   26a3a:	e057      	b.n	26aec <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
   26a3c:	2314      	movs	r3, #20
   26a3e:	18fb      	adds	r3, r7, r3
   26a40:	781b      	ldrb	r3, [r3, #0]
   26a42:	2b2e      	cmp	r3, #46	; 0x2e
   26a44:	d004      	beq.n	26a50 <nmi_inet_addr+0x60>
   26a46:	2314      	movs	r3, #20
   26a48:	18fb      	adds	r3, r7, r3
   26a4a:	781b      	ldrb	r3, [r3, #0]
   26a4c:	2b00      	cmp	r3, #0
   26a4e:	d10d      	bne.n	26a6c <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
   26a50:	2316      	movs	r3, #22
   26a52:	18fb      	adds	r3, r7, r3
   26a54:	781b      	ldrb	r3, [r3, #0]
   26a56:	220c      	movs	r2, #12
   26a58:	18ba      	adds	r2, r7, r2
   26a5a:	2117      	movs	r1, #23
   26a5c:	1879      	adds	r1, r7, r1
   26a5e:	7809      	ldrb	r1, [r1, #0]
   26a60:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
   26a62:	2317      	movs	r3, #23
   26a64:	18fb      	adds	r3, r7, r3
   26a66:	2200      	movs	r2, #0
   26a68:	701a      	strb	r2, [r3, #0]
   26a6a:	e01d      	b.n	26aa8 <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
   26a6c:	2314      	movs	r3, #20
   26a6e:	18fb      	adds	r3, r7, r3
   26a70:	781b      	ldrb	r3, [r3, #0]
   26a72:	2b2f      	cmp	r3, #47	; 0x2f
   26a74:	d916      	bls.n	26aa4 <nmi_inet_addr+0xb4>
   26a76:	2314      	movs	r3, #20
   26a78:	18fb      	adds	r3, r7, r3
   26a7a:	781b      	ldrb	r3, [r3, #0]
   26a7c:	2b39      	cmp	r3, #57	; 0x39
   26a7e:	d811      	bhi.n	26aa4 <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
   26a80:	2317      	movs	r3, #23
   26a82:	18fb      	adds	r3, r7, r3
   26a84:	781b      	ldrb	r3, [r3, #0]
   26a86:	1c1a      	adds	r2, r3, #0
   26a88:	0092      	lsls	r2, r2, #2
   26a8a:	18d3      	adds	r3, r2, r3
   26a8c:	18db      	adds	r3, r3, r3
   26a8e:	b2da      	uxtb	r2, r3
   26a90:	2314      	movs	r3, #20
   26a92:	18fb      	adds	r3, r7, r3
   26a94:	781b      	ldrb	r3, [r3, #0]
   26a96:	18d3      	adds	r3, r2, r3
   26a98:	b2da      	uxtb	r2, r3
   26a9a:	2317      	movs	r3, #23
   26a9c:	18fb      	adds	r3, r7, r3
   26a9e:	3a30      	subs	r2, #48	; 0x30
   26aa0:	701a      	strb	r2, [r3, #0]
   26aa2:	e001      	b.n	26aa8 <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
   26aa4:	2300      	movs	r3, #0
   26aa6:	e021      	b.n	26aec <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
   26aa8:	687b      	ldr	r3, [r7, #4]
   26aaa:	3301      	adds	r3, #1
   26aac:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
   26aae:	2314      	movs	r3, #20
   26ab0:	18fb      	adds	r3, r7, r3
   26ab2:	781b      	ldrb	r3, [r3, #0]
   26ab4:	2b2e      	cmp	r3, #46	; 0x2e
   26ab6:	d004      	beq.n	26ac2 <nmi_inet_addr+0xd2>
   26ab8:	2314      	movs	r3, #20
   26aba:	18fb      	adds	r3, r7, r3
   26abc:	781b      	ldrb	r3, [r3, #0]
   26abe:	2b00      	cmp	r3, #0
   26ac0:	d1a9      	bne.n	26a16 <nmi_inet_addr+0x26>
	for(i = 0; i < 4; ++i)
   26ac2:	2316      	movs	r3, #22
   26ac4:	18fb      	adds	r3, r7, r3
   26ac6:	2216      	movs	r2, #22
   26ac8:	18ba      	adds	r2, r7, r2
   26aca:	7812      	ldrb	r2, [r2, #0]
   26acc:	3201      	adds	r2, #1
   26ace:	701a      	strb	r2, [r3, #0]
   26ad0:	2316      	movs	r3, #22
   26ad2:	18fb      	adds	r3, r7, r3
   26ad4:	781b      	ldrb	r3, [r3, #0]
   26ad6:	2b03      	cmp	r3, #3
   26ad8:	d999      	bls.n	26a0e <nmi_inet_addr+0x1e>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
   26ada:	230c      	movs	r3, #12
   26adc:	18f9      	adds	r1, r7, r3
   26ade:	2310      	movs	r3, #16
   26ae0:	18fb      	adds	r3, r7, r3
   26ae2:	2204      	movs	r2, #4
   26ae4:	0018      	movs	r0, r3
   26ae6:	4b03      	ldr	r3, [pc, #12]	; (26af4 <nmi_inet_addr+0x104>)
   26ae8:	4798      	blx	r3
	return u32IP;
   26aea:	693b      	ldr	r3, [r7, #16]
}
   26aec:	0018      	movs	r0, r3
   26aee:	46bd      	mov	sp, r7
   26af0:	b006      	add	sp, #24
   26af2:	bd80      	pop	{r7, pc}
   26af4:	000218d9 	.word	0x000218d9

00026af8 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
   26af8:	b5b0      	push	{r4, r5, r7, lr}
   26afa:	b088      	sub	sp, #32
   26afc:	af04      	add	r7, sp, #16
   26afe:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
   26b00:	230f      	movs	r3, #15
   26b02:	18fb      	adds	r3, r7, r3
   26b04:	22fa      	movs	r2, #250	; 0xfa
   26b06:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
   26b08:	687b      	ldr	r3, [r7, #4]
   26b0a:	0018      	movs	r0, r3
   26b0c:	4b14      	ldr	r3, [pc, #80]	; (26b60 <gethostbyname+0x68>)
   26b0e:	4798      	blx	r3
   26b10:	0003      	movs	r3, r0
   26b12:	001a      	movs	r2, r3
   26b14:	230e      	movs	r3, #14
   26b16:	18fb      	adds	r3, r7, r3
   26b18:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
   26b1a:	230e      	movs	r3, #14
   26b1c:	18fb      	adds	r3, r7, r3
   26b1e:	781b      	ldrb	r3, [r3, #0]
   26b20:	2b40      	cmp	r3, #64	; 0x40
   26b22:	d815      	bhi.n	26b50 <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
   26b24:	230e      	movs	r3, #14
   26b26:	18fb      	adds	r3, r7, r3
   26b28:	781b      	ldrb	r3, [r3, #0]
   26b2a:	b29b      	uxth	r3, r3
   26b2c:	3301      	adds	r3, #1
   26b2e:	b299      	uxth	r1, r3
   26b30:	230f      	movs	r3, #15
   26b32:	18fc      	adds	r4, r7, r3
   26b34:	687a      	ldr	r2, [r7, #4]
   26b36:	2300      	movs	r3, #0
   26b38:	9302      	str	r3, [sp, #8]
   26b3a:	2300      	movs	r3, #0
   26b3c:	9301      	str	r3, [sp, #4]
   26b3e:	2300      	movs	r3, #0
   26b40:	9300      	str	r3, [sp, #0]
   26b42:	000b      	movs	r3, r1
   26b44:	214a      	movs	r1, #74	; 0x4a
   26b46:	2002      	movs	r0, #2
   26b48:	4d06      	ldr	r5, [pc, #24]	; (26b64 <gethostbyname+0x6c>)
   26b4a:	47a8      	blx	r5
   26b4c:	0003      	movs	r3, r0
   26b4e:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
   26b50:	230f      	movs	r3, #15
   26b52:	18fb      	adds	r3, r7, r3
   26b54:	781b      	ldrb	r3, [r3, #0]
   26b56:	b25b      	sxtb	r3, r3
}
   26b58:	0018      	movs	r0, r3
   26b5a:	46bd      	mov	sp, r7
   26b5c:	b004      	add	sp, #16
   26b5e:	bdb0      	pop	{r4, r5, r7, pc}
   26b60:	00021953 	.word	0x00021953
   26b64:	00021b75 	.word	0x00021b75

00026b68 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
   26b68:	b580      	push	{r7, lr}
   26b6a:	b082      	sub	sp, #8
   26b6c:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   26b6e:	003b      	movs	r3, r7
   26b70:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
   26b72:	687b      	ldr	r3, [r7, #4]
   26b74:	22b9      	movs	r2, #185	; 0xb9
   26b76:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   26b78:	4b13      	ldr	r3, [pc, #76]	; (26bc8 <spi_flash_enter_low_power_mode+0x60>)
   26b7a:	2100      	movs	r1, #0
   26b7c:	0018      	movs	r0, r3
   26b7e:	4b13      	ldr	r3, [pc, #76]	; (26bcc <spi_flash_enter_low_power_mode+0x64>)
   26b80:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   26b82:	687b      	ldr	r3, [r7, #4]
   26b84:	781b      	ldrb	r3, [r3, #0]
   26b86:	001a      	movs	r2, r3
   26b88:	4b11      	ldr	r3, [pc, #68]	; (26bd0 <spi_flash_enter_low_power_mode+0x68>)
   26b8a:	0011      	movs	r1, r2
   26b8c:	0018      	movs	r0, r3
   26b8e:	4b0f      	ldr	r3, [pc, #60]	; (26bcc <spi_flash_enter_low_power_mode+0x64>)
   26b90:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   26b92:	4b10      	ldr	r3, [pc, #64]	; (26bd4 <spi_flash_enter_low_power_mode+0x6c>)
   26b94:	2101      	movs	r1, #1
   26b96:	0018      	movs	r0, r3
   26b98:	4b0c      	ldr	r3, [pc, #48]	; (26bcc <spi_flash_enter_low_power_mode+0x64>)
   26b9a:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   26b9c:	4b0e      	ldr	r3, [pc, #56]	; (26bd8 <spi_flash_enter_low_power_mode+0x70>)
   26b9e:	2100      	movs	r1, #0
   26ba0:	0018      	movs	r0, r3
   26ba2:	4b0a      	ldr	r3, [pc, #40]	; (26bcc <spi_flash_enter_low_power_mode+0x64>)
   26ba4:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
   26ba6:	4b0d      	ldr	r3, [pc, #52]	; (26bdc <spi_flash_enter_low_power_mode+0x74>)
   26ba8:	2181      	movs	r1, #129	; 0x81
   26baa:	0018      	movs	r0, r3
   26bac:	4b07      	ldr	r3, [pc, #28]	; (26bcc <spi_flash_enter_low_power_mode+0x64>)
   26bae:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   26bb0:	46c0      	nop			; (mov r8, r8)
   26bb2:	4b0b      	ldr	r3, [pc, #44]	; (26be0 <spi_flash_enter_low_power_mode+0x78>)
   26bb4:	0018      	movs	r0, r3
   26bb6:	4b0b      	ldr	r3, [pc, #44]	; (26be4 <spi_flash_enter_low_power_mode+0x7c>)
   26bb8:	4798      	blx	r3
   26bba:	0003      	movs	r3, r0
   26bbc:	2b01      	cmp	r3, #1
   26bbe:	d1f8      	bne.n	26bb2 <spi_flash_enter_low_power_mode+0x4a>
}
   26bc0:	46c0      	nop			; (mov r8, r8)
   26bc2:	46bd      	mov	sp, r7
   26bc4:	b002      	add	sp, #8
   26bc6:	bd80      	pop	{r7, pc}
   26bc8:	00010208 	.word	0x00010208
   26bcc:	000239c9 	.word	0x000239c9
   26bd0:	0001020c 	.word	0x0001020c
   26bd4:	00010214 	.word	0x00010214
   26bd8:	0001021c 	.word	0x0001021c
   26bdc:	00010204 	.word	0x00010204
   26be0:	00010218 	.word	0x00010218
   26be4:	00023985 	.word	0x00023985

00026be8 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
   26be8:	b580      	push	{r7, lr}
   26bea:	b082      	sub	sp, #8
   26bec:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   26bee:	003b      	movs	r3, r7
   26bf0:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
   26bf2:	687b      	ldr	r3, [r7, #4]
   26bf4:	22ab      	movs	r2, #171	; 0xab
   26bf6:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   26bf8:	4b13      	ldr	r3, [pc, #76]	; (26c48 <spi_flash_leave_low_power_mode+0x60>)
   26bfa:	2100      	movs	r1, #0
   26bfc:	0018      	movs	r0, r3
   26bfe:	4b13      	ldr	r3, [pc, #76]	; (26c4c <spi_flash_leave_low_power_mode+0x64>)
   26c00:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   26c02:	687b      	ldr	r3, [r7, #4]
   26c04:	781b      	ldrb	r3, [r3, #0]
   26c06:	001a      	movs	r2, r3
   26c08:	4b11      	ldr	r3, [pc, #68]	; (26c50 <spi_flash_leave_low_power_mode+0x68>)
   26c0a:	0011      	movs	r1, r2
   26c0c:	0018      	movs	r0, r3
   26c0e:	4b0f      	ldr	r3, [pc, #60]	; (26c4c <spi_flash_leave_low_power_mode+0x64>)
   26c10:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   26c12:	4b10      	ldr	r3, [pc, #64]	; (26c54 <spi_flash_leave_low_power_mode+0x6c>)
   26c14:	2101      	movs	r1, #1
   26c16:	0018      	movs	r0, r3
   26c18:	4b0c      	ldr	r3, [pc, #48]	; (26c4c <spi_flash_leave_low_power_mode+0x64>)
   26c1a:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   26c1c:	4b0e      	ldr	r3, [pc, #56]	; (26c58 <spi_flash_leave_low_power_mode+0x70>)
   26c1e:	2100      	movs	r1, #0
   26c20:	0018      	movs	r0, r3
   26c22:	4b0a      	ldr	r3, [pc, #40]	; (26c4c <spi_flash_leave_low_power_mode+0x64>)
   26c24:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
   26c26:	4b0d      	ldr	r3, [pc, #52]	; (26c5c <spi_flash_leave_low_power_mode+0x74>)
   26c28:	2181      	movs	r1, #129	; 0x81
   26c2a:	0018      	movs	r0, r3
   26c2c:	4b07      	ldr	r3, [pc, #28]	; (26c4c <spi_flash_leave_low_power_mode+0x64>)
   26c2e:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   26c30:	46c0      	nop			; (mov r8, r8)
   26c32:	4b0b      	ldr	r3, [pc, #44]	; (26c60 <spi_flash_leave_low_power_mode+0x78>)
   26c34:	0018      	movs	r0, r3
   26c36:	4b0b      	ldr	r3, [pc, #44]	; (26c64 <spi_flash_leave_low_power_mode+0x7c>)
   26c38:	4798      	blx	r3
   26c3a:	0003      	movs	r3, r0
   26c3c:	2b01      	cmp	r3, #1
   26c3e:	d1f8      	bne.n	26c32 <spi_flash_leave_low_power_mode+0x4a>
}
   26c40:	46c0      	nop			; (mov r8, r8)
   26c42:	46bd      	mov	sp, r7
   26c44:	b002      	add	sp, #8
   26c46:	bd80      	pop	{r7, pc}
   26c48:	00010208 	.word	0x00010208
   26c4c:	000239c9 	.word	0x000239c9
   26c50:	0001020c 	.word	0x0001020c
   26c54:	00010214 	.word	0x00010214
   26c58:	0001021c 	.word	0x0001021c
   26c5c:	00010204 	.word	0x00010204
   26c60:	00010218 	.word	0x00010218
   26c64:	00023985 	.word	0x00023985

00026c68 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
   26c68:	b590      	push	{r4, r7, lr}
   26c6a:	b085      	sub	sp, #20
   26c6c:	af00      	add	r7, sp, #0
   26c6e:	0002      	movs	r2, r0
   26c70:	1dfb      	adds	r3, r7, #7
   26c72:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
   26c74:	230f      	movs	r3, #15
   26c76:	18fb      	adds	r3, r7, r3
   26c78:	2200      	movs	r2, #0
   26c7a:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
   26c7c:	4b24      	ldr	r3, [pc, #144]	; (26d10 <spi_flash_enable+0xa8>)
   26c7e:	4798      	blx	r3
   26c80:	0003      	movs	r3, r0
   26c82:	051b      	lsls	r3, r3, #20
   26c84:	0d1b      	lsrs	r3, r3, #20
   26c86:	4a23      	ldr	r2, [pc, #140]	; (26d14 <spi_flash_enable+0xac>)
   26c88:	4293      	cmp	r3, r2
   26c8a:	d938      	bls.n	26cfe <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
   26c8c:	230f      	movs	r3, #15
   26c8e:	18fc      	adds	r4, r7, r3
   26c90:	2308      	movs	r3, #8
   26c92:	18fb      	adds	r3, r7, r3
   26c94:	4a20      	ldr	r2, [pc, #128]	; (26d18 <spi_flash_enable+0xb0>)
   26c96:	0019      	movs	r1, r3
   26c98:	0010      	movs	r0, r2
   26c9a:	4b20      	ldr	r3, [pc, #128]	; (26d1c <spi_flash_enable+0xb4>)
   26c9c:	4798      	blx	r3
   26c9e:	0003      	movs	r3, r0
   26ca0:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
   26ca2:	230f      	movs	r3, #15
   26ca4:	18fb      	adds	r3, r7, r3
   26ca6:	781b      	ldrb	r3, [r3, #0]
   26ca8:	b25b      	sxtb	r3, r3
   26caa:	2b00      	cmp	r3, #0
   26cac:	d126      	bne.n	26cfc <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
   26cae:	68bb      	ldr	r3, [r7, #8]
   26cb0:	4a1b      	ldr	r2, [pc, #108]	; (26d20 <spi_flash_enable+0xb8>)
   26cb2:	4013      	ands	r3, r2
   26cb4:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
   26cb6:	68bb      	ldr	r3, [r7, #8]
   26cb8:	4a1a      	ldr	r2, [pc, #104]	; (26d24 <spi_flash_enable+0xbc>)
   26cba:	4313      	orrs	r3, r2
   26cbc:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   26cbe:	68bb      	ldr	r3, [r7, #8]
   26cc0:	4a15      	ldr	r2, [pc, #84]	; (26d18 <spi_flash_enable+0xb0>)
   26cc2:	0019      	movs	r1, r3
   26cc4:	0010      	movs	r0, r2
   26cc6:	4b18      	ldr	r3, [pc, #96]	; (26d28 <spi_flash_enable+0xc0>)
   26cc8:	4798      	blx	r3
		if(enable) {
   26cca:	1dfb      	adds	r3, r7, #7
   26ccc:	781b      	ldrb	r3, [r3, #0]
   26cce:	2b00      	cmp	r3, #0
   26cd0:	d002      	beq.n	26cd8 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
   26cd2:	4b16      	ldr	r3, [pc, #88]	; (26d2c <spi_flash_enable+0xc4>)
   26cd4:	4798      	blx	r3
   26cd6:	e001      	b.n	26cdc <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
   26cd8:	4b15      	ldr	r3, [pc, #84]	; (26d30 <spi_flash_enable+0xc8>)
   26cda:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
   26cdc:	68bb      	ldr	r3, [r7, #8]
   26cde:	4a10      	ldr	r2, [pc, #64]	; (26d20 <spi_flash_enable+0xb8>)
   26ce0:	4013      	ands	r3, r2
   26ce2:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
   26ce4:	68bb      	ldr	r3, [r7, #8]
   26ce6:	2280      	movs	r2, #128	; 0x80
   26ce8:	0252      	lsls	r2, r2, #9
   26cea:	4313      	orrs	r3, r2
   26cec:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   26cee:	68bb      	ldr	r3, [r7, #8]
   26cf0:	4a09      	ldr	r2, [pc, #36]	; (26d18 <spi_flash_enable+0xb0>)
   26cf2:	0019      	movs	r1, r3
   26cf4:	0010      	movs	r0, r2
   26cf6:	4b0c      	ldr	r3, [pc, #48]	; (26d28 <spi_flash_enable+0xc0>)
   26cf8:	4798      	blx	r3
   26cfa:	e000      	b.n	26cfe <spi_flash_enable+0x96>
			goto ERR1;
   26cfc:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
   26cfe:	230f      	movs	r3, #15
   26d00:	18fb      	adds	r3, r7, r3
   26d02:	781b      	ldrb	r3, [r3, #0]
   26d04:	b25b      	sxtb	r3, r3
}
   26d06:	0018      	movs	r0, r3
   26d08:	46bd      	mov	sp, r7
   26d0a:	b005      	add	sp, #20
   26d0c:	bd90      	pop	{r4, r7, pc}
   26d0e:	46c0      	nop			; (mov r8, r8)
   26d10:	000232a5 	.word	0x000232a5
   26d14:	0000039f 	.word	0x0000039f
   26d18:	00001410 	.word	0x00001410
   26d1c:	000239a5 	.word	0x000239a5
   26d20:	f8888fff 	.word	0xf8888fff
   26d24:	01111000 	.word	0x01111000
   26d28:	000239c9 	.word	0x000239c9
   26d2c:	00026be9 	.word	0x00026be9
   26d30:	00026b69 	.word	0x00026b69

00026d34 <mem_test_unit_ready>:
   26d34:	b580      	push	{r7, lr}
   26d36:	b084      	sub	sp, #16
   26d38:	af00      	add	r7, sp, #0
   26d3a:	0002      	movs	r2, r0
   26d3c:	1dfb      	adds	r3, r7, #7
   26d3e:	701a      	strb	r2, [r3, #0]
   26d40:	1dfb      	adds	r3, r7, #7
   26d42:	781b      	ldrb	r3, [r3, #0]
   26d44:	2b00      	cmp	r3, #0
   26d46:	d108      	bne.n	26d5a <mem_test_unit_ready+0x26>
   26d48:	1dfb      	adds	r3, r7, #7
   26d4a:	781a      	ldrb	r2, [r3, #0]
   26d4c:	4b08      	ldr	r3, [pc, #32]	; (26d70 <mem_test_unit_ready+0x3c>)
   26d4e:	0152      	lsls	r2, r2, #5
   26d50:	58d3      	ldr	r3, [r2, r3]
   26d52:	4798      	blx	r3
   26d54:	0003      	movs	r3, r0
   26d56:	001a      	movs	r2, r3
   26d58:	e000      	b.n	26d5c <mem_test_unit_ready+0x28>
   26d5a:	2201      	movs	r2, #1
   26d5c:	230f      	movs	r3, #15
   26d5e:	18fb      	adds	r3, r7, r3
   26d60:	701a      	strb	r2, [r3, #0]
   26d62:	230f      	movs	r3, #15
   26d64:	18fb      	adds	r3, r7, r3
   26d66:	781b      	ldrb	r3, [r3, #0]
   26d68:	0018      	movs	r0, r3
   26d6a:	46bd      	mov	sp, r7
   26d6c:	b004      	add	sp, #16
   26d6e:	bd80      	pop	{r7, pc}
   26d70:	0003a234 	.word	0x0003a234

00026d74 <mem_read_capacity>:
   26d74:	b580      	push	{r7, lr}
   26d76:	b084      	sub	sp, #16
   26d78:	af00      	add	r7, sp, #0
   26d7a:	0002      	movs	r2, r0
   26d7c:	6039      	str	r1, [r7, #0]
   26d7e:	1dfb      	adds	r3, r7, #7
   26d80:	701a      	strb	r2, [r3, #0]
   26d82:	1dfb      	adds	r3, r7, #7
   26d84:	781b      	ldrb	r3, [r3, #0]
   26d86:	2b00      	cmp	r3, #0
   26d88:	d10c      	bne.n	26da4 <mem_read_capacity+0x30>
   26d8a:	1dfb      	adds	r3, r7, #7
   26d8c:	781b      	ldrb	r3, [r3, #0]
   26d8e:	4a0b      	ldr	r2, [pc, #44]	; (26dbc <mem_read_capacity+0x48>)
   26d90:	015b      	lsls	r3, r3, #5
   26d92:	18d3      	adds	r3, r2, r3
   26d94:	3304      	adds	r3, #4
   26d96:	681b      	ldr	r3, [r3, #0]
   26d98:	683a      	ldr	r2, [r7, #0]
   26d9a:	0010      	movs	r0, r2
   26d9c:	4798      	blx	r3
   26d9e:	0003      	movs	r3, r0
   26da0:	001a      	movs	r2, r3
   26da2:	e000      	b.n	26da6 <mem_read_capacity+0x32>
   26da4:	2201      	movs	r2, #1
   26da6:	230f      	movs	r3, #15
   26da8:	18fb      	adds	r3, r7, r3
   26daa:	701a      	strb	r2, [r3, #0]
   26dac:	230f      	movs	r3, #15
   26dae:	18fb      	adds	r3, r7, r3
   26db0:	781b      	ldrb	r3, [r3, #0]
   26db2:	0018      	movs	r0, r3
   26db4:	46bd      	mov	sp, r7
   26db6:	b004      	add	sp, #16
   26db8:	bd80      	pop	{r7, pc}
   26dba:	46c0      	nop			; (mov r8, r8)
   26dbc:	0003a234 	.word	0x0003a234

00026dc0 <mem_sector_size>:
   26dc0:	b580      	push	{r7, lr}
   26dc2:	b084      	sub	sp, #16
   26dc4:	af00      	add	r7, sp, #0
   26dc6:	0002      	movs	r2, r0
   26dc8:	1dfb      	adds	r3, r7, #7
   26dca:	701a      	strb	r2, [r3, #0]
   26dcc:	1dfb      	adds	r3, r7, #7
   26dce:	781b      	ldrb	r3, [r3, #0]
   26dd0:	425a      	negs	r2, r3
   26dd2:	4153      	adcs	r3, r2
   26dd4:	b2da      	uxtb	r2, r3
   26dd6:	230f      	movs	r3, #15
   26dd8:	18fb      	adds	r3, r7, r3
   26dda:	701a      	strb	r2, [r3, #0]
   26ddc:	230f      	movs	r3, #15
   26dde:	18fb      	adds	r3, r7, r3
   26de0:	781b      	ldrb	r3, [r3, #0]
   26de2:	0018      	movs	r0, r3
   26de4:	46bd      	mov	sp, r7
   26de6:	b004      	add	sp, #16
   26de8:	bd80      	pop	{r7, pc}
	...

00026dec <mem_wr_protect>:
   26dec:	b580      	push	{r7, lr}
   26dee:	b084      	sub	sp, #16
   26df0:	af00      	add	r7, sp, #0
   26df2:	0002      	movs	r2, r0
   26df4:	1dfb      	adds	r3, r7, #7
   26df6:	701a      	strb	r2, [r3, #0]
   26df8:	1dfb      	adds	r3, r7, #7
   26dfa:	781b      	ldrb	r3, [r3, #0]
   26dfc:	2b00      	cmp	r3, #0
   26dfe:	d109      	bne.n	26e14 <mem_wr_protect+0x28>
   26e00:	1dfb      	adds	r3, r7, #7
   26e02:	781b      	ldrb	r3, [r3, #0]
   26e04:	4a0a      	ldr	r2, [pc, #40]	; (26e30 <mem_wr_protect+0x44>)
   26e06:	015b      	lsls	r3, r3, #5
   26e08:	18d3      	adds	r3, r2, r3
   26e0a:	330c      	adds	r3, #12
   26e0c:	681b      	ldr	r3, [r3, #0]
   26e0e:	4798      	blx	r3
   26e10:	1e03      	subs	r3, r0, #0
   26e12:	d001      	beq.n	26e18 <mem_wr_protect+0x2c>
   26e14:	2201      	movs	r2, #1
   26e16:	e000      	b.n	26e1a <mem_wr_protect+0x2e>
   26e18:	2200      	movs	r2, #0
   26e1a:	230f      	movs	r3, #15
   26e1c:	18fb      	adds	r3, r7, r3
   26e1e:	701a      	strb	r2, [r3, #0]
   26e20:	230f      	movs	r3, #15
   26e22:	18fb      	adds	r3, r7, r3
   26e24:	781b      	ldrb	r3, [r3, #0]
   26e26:	0018      	movs	r0, r3
   26e28:	46bd      	mov	sp, r7
   26e2a:	b004      	add	sp, #16
   26e2c:	bd80      	pop	{r7, pc}
   26e2e:	46c0      	nop			; (mov r8, r8)
   26e30:	0003a234 	.word	0x0003a234

00026e34 <memory_2_ram>:
   26e34:	b580      	push	{r7, lr}
   26e36:	b086      	sub	sp, #24
   26e38:	af00      	add	r7, sp, #0
   26e3a:	60b9      	str	r1, [r7, #8]
   26e3c:	607a      	str	r2, [r7, #4]
   26e3e:	230f      	movs	r3, #15
   26e40:	18fb      	adds	r3, r7, r3
   26e42:	1c02      	adds	r2, r0, #0
   26e44:	701a      	strb	r2, [r3, #0]
   26e46:	230f      	movs	r3, #15
   26e48:	18fb      	adds	r3, r7, r3
   26e4a:	781b      	ldrb	r3, [r3, #0]
   26e4c:	2b00      	cmp	r3, #0
   26e4e:	d10e      	bne.n	26e6e <memory_2_ram+0x3a>
   26e50:	230f      	movs	r3, #15
   26e52:	18fb      	adds	r3, r7, r3
   26e54:	781b      	ldrb	r3, [r3, #0]
   26e56:	4a0b      	ldr	r2, [pc, #44]	; (26e84 <memory_2_ram+0x50>)
   26e58:	015b      	lsls	r3, r3, #5
   26e5a:	18d3      	adds	r3, r2, r3
   26e5c:	3314      	adds	r3, #20
   26e5e:	681b      	ldr	r3, [r3, #0]
   26e60:	6879      	ldr	r1, [r7, #4]
   26e62:	68ba      	ldr	r2, [r7, #8]
   26e64:	0010      	movs	r0, r2
   26e66:	4798      	blx	r3
   26e68:	0003      	movs	r3, r0
   26e6a:	001a      	movs	r2, r3
   26e6c:	e000      	b.n	26e70 <memory_2_ram+0x3c>
   26e6e:	2201      	movs	r2, #1
   26e70:	2317      	movs	r3, #23
   26e72:	18fb      	adds	r3, r7, r3
   26e74:	701a      	strb	r2, [r3, #0]
   26e76:	2317      	movs	r3, #23
   26e78:	18fb      	adds	r3, r7, r3
   26e7a:	781b      	ldrb	r3, [r3, #0]
   26e7c:	0018      	movs	r0, r3
   26e7e:	46bd      	mov	sp, r7
   26e80:	b006      	add	sp, #24
   26e82:	bd80      	pop	{r7, pc}
   26e84:	0003a234 	.word	0x0003a234

00026e88 <ram_2_memory>:
   26e88:	b580      	push	{r7, lr}
   26e8a:	b086      	sub	sp, #24
   26e8c:	af00      	add	r7, sp, #0
   26e8e:	60b9      	str	r1, [r7, #8]
   26e90:	607a      	str	r2, [r7, #4]
   26e92:	230f      	movs	r3, #15
   26e94:	18fb      	adds	r3, r7, r3
   26e96:	1c02      	adds	r2, r0, #0
   26e98:	701a      	strb	r2, [r3, #0]
   26e9a:	230f      	movs	r3, #15
   26e9c:	18fb      	adds	r3, r7, r3
   26e9e:	781b      	ldrb	r3, [r3, #0]
   26ea0:	2b00      	cmp	r3, #0
   26ea2:	d10e      	bne.n	26ec2 <ram_2_memory+0x3a>
   26ea4:	230f      	movs	r3, #15
   26ea6:	18fb      	adds	r3, r7, r3
   26ea8:	781b      	ldrb	r3, [r3, #0]
   26eaa:	4a0b      	ldr	r2, [pc, #44]	; (26ed8 <ram_2_memory+0x50>)
   26eac:	015b      	lsls	r3, r3, #5
   26eae:	18d3      	adds	r3, r2, r3
   26eb0:	3318      	adds	r3, #24
   26eb2:	681b      	ldr	r3, [r3, #0]
   26eb4:	6879      	ldr	r1, [r7, #4]
   26eb6:	68ba      	ldr	r2, [r7, #8]
   26eb8:	0010      	movs	r0, r2
   26eba:	4798      	blx	r3
   26ebc:	0003      	movs	r3, r0
   26ebe:	001a      	movs	r2, r3
   26ec0:	e000      	b.n	26ec4 <ram_2_memory+0x3c>
   26ec2:	2201      	movs	r2, #1
   26ec4:	2317      	movs	r3, #23
   26ec6:	18fb      	adds	r3, r7, r3
   26ec8:	701a      	strb	r2, [r3, #0]
   26eca:	2317      	movs	r3, #23
   26ecc:	18fb      	adds	r3, r7, r3
   26ece:	781b      	ldrb	r3, [r3, #0]
   26ed0:	0018      	movs	r0, r3
   26ed2:	46bd      	mov	sp, r7
   26ed4:	b006      	add	sp, #24
   26ed6:	bd80      	pop	{r7, pc}
   26ed8:	0003a234 	.word	0x0003a234

00026edc <cpu_irq_enter_critical>:
   26edc:	b580      	push	{r7, lr}
   26ede:	b082      	sub	sp, #8
   26ee0:	af00      	add	r7, sp, #0
   26ee2:	4b10      	ldr	r3, [pc, #64]	; (26f24 <cpu_irq_enter_critical+0x48>)
   26ee4:	681b      	ldr	r3, [r3, #0]
   26ee6:	2b00      	cmp	r3, #0
   26ee8:	d112      	bne.n	26f10 <cpu_irq_enter_critical+0x34>
   26eea:	f3ef 8310 	mrs	r3, PRIMASK
   26eee:	607b      	str	r3, [r7, #4]
   26ef0:	687b      	ldr	r3, [r7, #4]
   26ef2:	2b00      	cmp	r3, #0
   26ef4:	d109      	bne.n	26f0a <cpu_irq_enter_critical+0x2e>
   26ef6:	b672      	cpsid	i
   26ef8:	f3bf 8f5f 	dmb	sy
   26efc:	4b0a      	ldr	r3, [pc, #40]	; (26f28 <cpu_irq_enter_critical+0x4c>)
   26efe:	2200      	movs	r2, #0
   26f00:	701a      	strb	r2, [r3, #0]
   26f02:	4b0a      	ldr	r3, [pc, #40]	; (26f2c <cpu_irq_enter_critical+0x50>)
   26f04:	2201      	movs	r2, #1
   26f06:	701a      	strb	r2, [r3, #0]
   26f08:	e002      	b.n	26f10 <cpu_irq_enter_critical+0x34>
   26f0a:	4b08      	ldr	r3, [pc, #32]	; (26f2c <cpu_irq_enter_critical+0x50>)
   26f0c:	2200      	movs	r2, #0
   26f0e:	701a      	strb	r2, [r3, #0]
   26f10:	4b04      	ldr	r3, [pc, #16]	; (26f24 <cpu_irq_enter_critical+0x48>)
   26f12:	681b      	ldr	r3, [r3, #0]
   26f14:	1c5a      	adds	r2, r3, #1
   26f16:	4b03      	ldr	r3, [pc, #12]	; (26f24 <cpu_irq_enter_critical+0x48>)
   26f18:	601a      	str	r2, [r3, #0]
   26f1a:	46c0      	nop			; (mov r8, r8)
   26f1c:	46bd      	mov	sp, r7
   26f1e:	b002      	add	sp, #8
   26f20:	bd80      	pop	{r7, pc}
   26f22:	46c0      	nop			; (mov r8, r8)
   26f24:	20003ef4 	.word	0x20003ef4
   26f28:	2000011a 	.word	0x2000011a
   26f2c:	20003ef8 	.word	0x20003ef8

00026f30 <cpu_irq_leave_critical>:
   26f30:	b580      	push	{r7, lr}
   26f32:	af00      	add	r7, sp, #0
   26f34:	4b0b      	ldr	r3, [pc, #44]	; (26f64 <cpu_irq_leave_critical+0x34>)
   26f36:	681b      	ldr	r3, [r3, #0]
   26f38:	1e5a      	subs	r2, r3, #1
   26f3a:	4b0a      	ldr	r3, [pc, #40]	; (26f64 <cpu_irq_leave_critical+0x34>)
   26f3c:	601a      	str	r2, [r3, #0]
   26f3e:	4b09      	ldr	r3, [pc, #36]	; (26f64 <cpu_irq_leave_critical+0x34>)
   26f40:	681b      	ldr	r3, [r3, #0]
   26f42:	2b00      	cmp	r3, #0
   26f44:	d10a      	bne.n	26f5c <cpu_irq_leave_critical+0x2c>
   26f46:	4b08      	ldr	r3, [pc, #32]	; (26f68 <cpu_irq_leave_critical+0x38>)
   26f48:	781b      	ldrb	r3, [r3, #0]
   26f4a:	b2db      	uxtb	r3, r3
   26f4c:	2b00      	cmp	r3, #0
   26f4e:	d005      	beq.n	26f5c <cpu_irq_leave_critical+0x2c>
   26f50:	4b06      	ldr	r3, [pc, #24]	; (26f6c <cpu_irq_leave_critical+0x3c>)
   26f52:	2201      	movs	r2, #1
   26f54:	701a      	strb	r2, [r3, #0]
   26f56:	f3bf 8f5f 	dmb	sy
   26f5a:	b662      	cpsie	i
   26f5c:	46c0      	nop			; (mov r8, r8)
   26f5e:	46bd      	mov	sp, r7
   26f60:	bd80      	pop	{r7, pc}
   26f62:	46c0      	nop			; (mov r8, r8)
   26f64:	20003ef4 	.word	0x20003ef4
   26f68:	20003ef8 	.word	0x20003ef8
   26f6c:	2000011a 	.word	0x2000011a

00026f70 <system_pinmux_get_group_from_gpio_pin>:
   26f70:	b580      	push	{r7, lr}
   26f72:	b084      	sub	sp, #16
   26f74:	af00      	add	r7, sp, #0
   26f76:	0002      	movs	r2, r0
   26f78:	1dfb      	adds	r3, r7, #7
   26f7a:	701a      	strb	r2, [r3, #0]
   26f7c:	230f      	movs	r3, #15
   26f7e:	18fb      	adds	r3, r7, r3
   26f80:	1dfa      	adds	r2, r7, #7
   26f82:	7812      	ldrb	r2, [r2, #0]
   26f84:	09d2      	lsrs	r2, r2, #7
   26f86:	701a      	strb	r2, [r3, #0]
   26f88:	230e      	movs	r3, #14
   26f8a:	18fb      	adds	r3, r7, r3
   26f8c:	1dfa      	adds	r2, r7, #7
   26f8e:	7812      	ldrb	r2, [r2, #0]
   26f90:	0952      	lsrs	r2, r2, #5
   26f92:	701a      	strb	r2, [r3, #0]
   26f94:	4b0d      	ldr	r3, [pc, #52]	; (26fcc <system_pinmux_get_group_from_gpio_pin+0x5c>)
   26f96:	60bb      	str	r3, [r7, #8]
   26f98:	230f      	movs	r3, #15
   26f9a:	18fb      	adds	r3, r7, r3
   26f9c:	781b      	ldrb	r3, [r3, #0]
   26f9e:	2b00      	cmp	r3, #0
   26fa0:	d10f      	bne.n	26fc2 <system_pinmux_get_group_from_gpio_pin+0x52>
   26fa2:	230f      	movs	r3, #15
   26fa4:	18fb      	adds	r3, r7, r3
   26fa6:	781b      	ldrb	r3, [r3, #0]
   26fa8:	009b      	lsls	r3, r3, #2
   26faa:	2210      	movs	r2, #16
   26fac:	4694      	mov	ip, r2
   26fae:	44bc      	add	ip, r7
   26fb0:	4463      	add	r3, ip
   26fb2:	3b08      	subs	r3, #8
   26fb4:	681a      	ldr	r2, [r3, #0]
   26fb6:	230e      	movs	r3, #14
   26fb8:	18fb      	adds	r3, r7, r3
   26fba:	781b      	ldrb	r3, [r3, #0]
   26fbc:	01db      	lsls	r3, r3, #7
   26fbe:	18d3      	adds	r3, r2, r3
   26fc0:	e000      	b.n	26fc4 <system_pinmux_get_group_from_gpio_pin+0x54>
   26fc2:	2300      	movs	r3, #0
   26fc4:	0018      	movs	r0, r3
   26fc6:	46bd      	mov	sp, r7
   26fc8:	b004      	add	sp, #16
   26fca:	bd80      	pop	{r7, pc}
   26fcc:	41004400 	.word	0x41004400

00026fd0 <port_get_group_from_gpio_pin>:
   26fd0:	b580      	push	{r7, lr}
   26fd2:	b082      	sub	sp, #8
   26fd4:	af00      	add	r7, sp, #0
   26fd6:	0002      	movs	r2, r0
   26fd8:	1dfb      	adds	r3, r7, #7
   26fda:	701a      	strb	r2, [r3, #0]
   26fdc:	1dfb      	adds	r3, r7, #7
   26fde:	781b      	ldrb	r3, [r3, #0]
   26fe0:	0018      	movs	r0, r3
   26fe2:	4b03      	ldr	r3, [pc, #12]	; (26ff0 <port_get_group_from_gpio_pin+0x20>)
   26fe4:	4798      	blx	r3
   26fe6:	0003      	movs	r3, r0
   26fe8:	0018      	movs	r0, r3
   26fea:	46bd      	mov	sp, r7
   26fec:	b002      	add	sp, #8
   26fee:	bd80      	pop	{r7, pc}
   26ff0:	00026f71 	.word	0x00026f71

00026ff4 <port_get_config_defaults>:
   26ff4:	b580      	push	{r7, lr}
   26ff6:	b082      	sub	sp, #8
   26ff8:	af00      	add	r7, sp, #0
   26ffa:	6078      	str	r0, [r7, #4]
   26ffc:	687b      	ldr	r3, [r7, #4]
   26ffe:	2200      	movs	r2, #0
   27000:	701a      	strb	r2, [r3, #0]
   27002:	687b      	ldr	r3, [r7, #4]
   27004:	2201      	movs	r2, #1
   27006:	705a      	strb	r2, [r3, #1]
   27008:	687b      	ldr	r3, [r7, #4]
   2700a:	2200      	movs	r2, #0
   2700c:	709a      	strb	r2, [r3, #2]
   2700e:	46c0      	nop			; (mov r8, r8)
   27010:	46bd      	mov	sp, r7
   27012:	b002      	add	sp, #8
   27014:	bd80      	pop	{r7, pc}
	...

00027018 <port_pin_set_output_level>:
   27018:	b580      	push	{r7, lr}
   2701a:	b084      	sub	sp, #16
   2701c:	af00      	add	r7, sp, #0
   2701e:	0002      	movs	r2, r0
   27020:	1dfb      	adds	r3, r7, #7
   27022:	701a      	strb	r2, [r3, #0]
   27024:	1dbb      	adds	r3, r7, #6
   27026:	1c0a      	adds	r2, r1, #0
   27028:	701a      	strb	r2, [r3, #0]
   2702a:	1dfb      	adds	r3, r7, #7
   2702c:	781b      	ldrb	r3, [r3, #0]
   2702e:	0018      	movs	r0, r3
   27030:	4b0d      	ldr	r3, [pc, #52]	; (27068 <port_pin_set_output_level+0x50>)
   27032:	4798      	blx	r3
   27034:	0003      	movs	r3, r0
   27036:	60fb      	str	r3, [r7, #12]
   27038:	1dfb      	adds	r3, r7, #7
   2703a:	781b      	ldrb	r3, [r3, #0]
   2703c:	221f      	movs	r2, #31
   2703e:	4013      	ands	r3, r2
   27040:	2201      	movs	r2, #1
   27042:	409a      	lsls	r2, r3
   27044:	0013      	movs	r3, r2
   27046:	60bb      	str	r3, [r7, #8]
   27048:	1dbb      	adds	r3, r7, #6
   2704a:	781b      	ldrb	r3, [r3, #0]
   2704c:	2b00      	cmp	r3, #0
   2704e:	d003      	beq.n	27058 <port_pin_set_output_level+0x40>
   27050:	68fb      	ldr	r3, [r7, #12]
   27052:	68ba      	ldr	r2, [r7, #8]
   27054:	619a      	str	r2, [r3, #24]
   27056:	e002      	b.n	2705e <port_pin_set_output_level+0x46>
   27058:	68fb      	ldr	r3, [r7, #12]
   2705a:	68ba      	ldr	r2, [r7, #8]
   2705c:	615a      	str	r2, [r3, #20]
   2705e:	46c0      	nop			; (mov r8, r8)
   27060:	46bd      	mov	sp, r7
   27062:	b004      	add	sp, #16
   27064:	bd80      	pop	{r7, pc}
   27066:	46c0      	nop			; (mov r8, r8)
   27068:	00026fd1 	.word	0x00026fd1

0002706c <system_board_init>:
   2706c:	b580      	push	{r7, lr}
   2706e:	b082      	sub	sp, #8
   27070:	af00      	add	r7, sp, #0
   27072:	1d3b      	adds	r3, r7, #4
   27074:	0018      	movs	r0, r3
   27076:	4b0e      	ldr	r3, [pc, #56]	; (270b0 <system_board_init+0x44>)
   27078:	4798      	blx	r3
   2707a:	1d3b      	adds	r3, r7, #4
   2707c:	2201      	movs	r2, #1
   2707e:	701a      	strb	r2, [r3, #0]
   27080:	1d3b      	adds	r3, r7, #4
   27082:	0019      	movs	r1, r3
   27084:	2017      	movs	r0, #23
   27086:	4b0b      	ldr	r3, [pc, #44]	; (270b4 <system_board_init+0x48>)
   27088:	4798      	blx	r3
   2708a:	2101      	movs	r1, #1
   2708c:	2017      	movs	r0, #23
   2708e:	4b0a      	ldr	r3, [pc, #40]	; (270b8 <system_board_init+0x4c>)
   27090:	4798      	blx	r3
   27092:	1d3b      	adds	r3, r7, #4
   27094:	2200      	movs	r2, #0
   27096:	701a      	strb	r2, [r3, #0]
   27098:	1d3b      	adds	r3, r7, #4
   2709a:	2201      	movs	r2, #1
   2709c:	705a      	strb	r2, [r3, #1]
   2709e:	1d3b      	adds	r3, r7, #4
   270a0:	0019      	movs	r1, r3
   270a2:	2037      	movs	r0, #55	; 0x37
   270a4:	4b03      	ldr	r3, [pc, #12]	; (270b4 <system_board_init+0x48>)
   270a6:	4798      	blx	r3
   270a8:	46c0      	nop			; (mov r8, r8)
   270aa:	46bd      	mov	sp, r7
   270ac:	b002      	add	sp, #8
   270ae:	bd80      	pop	{r7, pc}
   270b0:	00026ff5 	.word	0x00026ff5
   270b4:	000276e1 	.word	0x000276e1
   270b8:	00027019 	.word	0x00027019

000270bc <_extint_get_eic_from_channel>:
   270bc:	b580      	push	{r7, lr}
   270be:	b084      	sub	sp, #16
   270c0:	af00      	add	r7, sp, #0
   270c2:	0002      	movs	r2, r0
   270c4:	1dfb      	adds	r3, r7, #7
   270c6:	701a      	strb	r2, [r3, #0]
   270c8:	230f      	movs	r3, #15
   270ca:	18fb      	adds	r3, r7, r3
   270cc:	1dfa      	adds	r2, r7, #7
   270ce:	7812      	ldrb	r2, [r2, #0]
   270d0:	0952      	lsrs	r2, r2, #5
   270d2:	701a      	strb	r2, [r3, #0]
   270d4:	230f      	movs	r3, #15
   270d6:	18fb      	adds	r3, r7, r3
   270d8:	781b      	ldrb	r3, [r3, #0]
   270da:	2b00      	cmp	r3, #0
   270dc:	d10c      	bne.n	270f8 <_extint_get_eic_from_channel+0x3c>
   270de:	4b09      	ldr	r3, [pc, #36]	; (27104 <_extint_get_eic_from_channel+0x48>)
   270e0:	60bb      	str	r3, [r7, #8]
   270e2:	230f      	movs	r3, #15
   270e4:	18fb      	adds	r3, r7, r3
   270e6:	781b      	ldrb	r3, [r3, #0]
   270e8:	009b      	lsls	r3, r3, #2
   270ea:	2210      	movs	r2, #16
   270ec:	4694      	mov	ip, r2
   270ee:	44bc      	add	ip, r7
   270f0:	4463      	add	r3, ip
   270f2:	3b08      	subs	r3, #8
   270f4:	681b      	ldr	r3, [r3, #0]
   270f6:	e000      	b.n	270fa <_extint_get_eic_from_channel+0x3e>
   270f8:	2300      	movs	r3, #0
   270fa:	0018      	movs	r0, r3
   270fc:	46bd      	mov	sp, r7
   270fe:	b004      	add	sp, #16
   27100:	bd80      	pop	{r7, pc}
   27102:	46c0      	nop			; (mov r8, r8)
   27104:	40001800 	.word	0x40001800

00027108 <extint_chan_is_detected>:
   27108:	b580      	push	{r7, lr}
   2710a:	b084      	sub	sp, #16
   2710c:	af00      	add	r7, sp, #0
   2710e:	0002      	movs	r2, r0
   27110:	1dfb      	adds	r3, r7, #7
   27112:	701a      	strb	r2, [r3, #0]
   27114:	1dfb      	adds	r3, r7, #7
   27116:	781b      	ldrb	r3, [r3, #0]
   27118:	0018      	movs	r0, r3
   2711a:	4b0b      	ldr	r3, [pc, #44]	; (27148 <extint_chan_is_detected+0x40>)
   2711c:	4798      	blx	r3
   2711e:	0003      	movs	r3, r0
   27120:	60fb      	str	r3, [r7, #12]
   27122:	1dfb      	adds	r3, r7, #7
   27124:	781b      	ldrb	r3, [r3, #0]
   27126:	221f      	movs	r2, #31
   27128:	4013      	ands	r3, r2
   2712a:	2201      	movs	r2, #1
   2712c:	409a      	lsls	r2, r3
   2712e:	0013      	movs	r3, r2
   27130:	60bb      	str	r3, [r7, #8]
   27132:	68fb      	ldr	r3, [r7, #12]
   27134:	691b      	ldr	r3, [r3, #16]
   27136:	68ba      	ldr	r2, [r7, #8]
   27138:	4013      	ands	r3, r2
   2713a:	1e5a      	subs	r2, r3, #1
   2713c:	4193      	sbcs	r3, r2
   2713e:	b2db      	uxtb	r3, r3
   27140:	0018      	movs	r0, r3
   27142:	46bd      	mov	sp, r7
   27144:	b004      	add	sp, #16
   27146:	bd80      	pop	{r7, pc}
   27148:	000270bd 	.word	0x000270bd

0002714c <extint_chan_clear_detected>:
   2714c:	b580      	push	{r7, lr}
   2714e:	b084      	sub	sp, #16
   27150:	af00      	add	r7, sp, #0
   27152:	0002      	movs	r2, r0
   27154:	1dfb      	adds	r3, r7, #7
   27156:	701a      	strb	r2, [r3, #0]
   27158:	1dfb      	adds	r3, r7, #7
   2715a:	781b      	ldrb	r3, [r3, #0]
   2715c:	0018      	movs	r0, r3
   2715e:	4b09      	ldr	r3, [pc, #36]	; (27184 <extint_chan_clear_detected+0x38>)
   27160:	4798      	blx	r3
   27162:	0003      	movs	r3, r0
   27164:	60fb      	str	r3, [r7, #12]
   27166:	1dfb      	adds	r3, r7, #7
   27168:	781b      	ldrb	r3, [r3, #0]
   2716a:	221f      	movs	r2, #31
   2716c:	4013      	ands	r3, r2
   2716e:	2201      	movs	r2, #1
   27170:	409a      	lsls	r2, r3
   27172:	0013      	movs	r3, r2
   27174:	60bb      	str	r3, [r7, #8]
   27176:	68fb      	ldr	r3, [r7, #12]
   27178:	68ba      	ldr	r2, [r7, #8]
   2717a:	611a      	str	r2, [r3, #16]
   2717c:	46c0      	nop			; (mov r8, r8)
   2717e:	46bd      	mov	sp, r7
   27180:	b004      	add	sp, #16
   27182:	bd80      	pop	{r7, pc}
   27184:	000270bd 	.word	0x000270bd

00027188 <extint_register_callback>:
   27188:	b580      	push	{r7, lr}
   2718a:	b082      	sub	sp, #8
   2718c:	af00      	add	r7, sp, #0
   2718e:	6078      	str	r0, [r7, #4]
   27190:	0008      	movs	r0, r1
   27192:	0011      	movs	r1, r2
   27194:	1cfb      	adds	r3, r7, #3
   27196:	1c02      	adds	r2, r0, #0
   27198:	701a      	strb	r2, [r3, #0]
   2719a:	1cbb      	adds	r3, r7, #2
   2719c:	1c0a      	adds	r2, r1, #0
   2719e:	701a      	strb	r2, [r3, #0]
   271a0:	1cbb      	adds	r3, r7, #2
   271a2:	781b      	ldrb	r3, [r3, #0]
   271a4:	2b00      	cmp	r3, #0
   271a6:	d001      	beq.n	271ac <extint_register_callback+0x24>
   271a8:	2317      	movs	r3, #23
   271aa:	e019      	b.n	271e0 <extint_register_callback+0x58>
   271ac:	1cfb      	adds	r3, r7, #3
   271ae:	781a      	ldrb	r2, [r3, #0]
   271b0:	4b0d      	ldr	r3, [pc, #52]	; (271e8 <extint_register_callback+0x60>)
   271b2:	0092      	lsls	r2, r2, #2
   271b4:	58d3      	ldr	r3, [r2, r3]
   271b6:	2b00      	cmp	r3, #0
   271b8:	d107      	bne.n	271ca <extint_register_callback+0x42>
   271ba:	1cfb      	adds	r3, r7, #3
   271bc:	781a      	ldrb	r2, [r3, #0]
   271be:	4b0a      	ldr	r3, [pc, #40]	; (271e8 <extint_register_callback+0x60>)
   271c0:	0092      	lsls	r2, r2, #2
   271c2:	6879      	ldr	r1, [r7, #4]
   271c4:	50d1      	str	r1, [r2, r3]
   271c6:	2300      	movs	r3, #0
   271c8:	e00a      	b.n	271e0 <extint_register_callback+0x58>
   271ca:	1cfb      	adds	r3, r7, #3
   271cc:	781a      	ldrb	r2, [r3, #0]
   271ce:	4b06      	ldr	r3, [pc, #24]	; (271e8 <extint_register_callback+0x60>)
   271d0:	0092      	lsls	r2, r2, #2
   271d2:	58d2      	ldr	r2, [r2, r3]
   271d4:	687b      	ldr	r3, [r7, #4]
   271d6:	429a      	cmp	r2, r3
   271d8:	d101      	bne.n	271de <extint_register_callback+0x56>
   271da:	2300      	movs	r3, #0
   271dc:	e000      	b.n	271e0 <extint_register_callback+0x58>
   271de:	231d      	movs	r3, #29
   271e0:	0018      	movs	r0, r3
   271e2:	46bd      	mov	sp, r7
   271e4:	b002      	add	sp, #8
   271e6:	bd80      	pop	{r7, pc}
   271e8:	20005804 	.word	0x20005804

000271ec <extint_chan_enable_callback>:
   271ec:	b580      	push	{r7, lr}
   271ee:	b084      	sub	sp, #16
   271f0:	af00      	add	r7, sp, #0
   271f2:	0002      	movs	r2, r0
   271f4:	1dfb      	adds	r3, r7, #7
   271f6:	701a      	strb	r2, [r3, #0]
   271f8:	1dbb      	adds	r3, r7, #6
   271fa:	1c0a      	adds	r2, r1, #0
   271fc:	701a      	strb	r2, [r3, #0]
   271fe:	1dbb      	adds	r3, r7, #6
   27200:	781b      	ldrb	r3, [r3, #0]
   27202:	2b00      	cmp	r3, #0
   27204:	d10e      	bne.n	27224 <extint_chan_enable_callback+0x38>
   27206:	1dfb      	adds	r3, r7, #7
   27208:	781b      	ldrb	r3, [r3, #0]
   2720a:	0018      	movs	r0, r3
   2720c:	4b08      	ldr	r3, [pc, #32]	; (27230 <extint_chan_enable_callback+0x44>)
   2720e:	4798      	blx	r3
   27210:	0003      	movs	r3, r0
   27212:	60fb      	str	r3, [r7, #12]
   27214:	1dfb      	adds	r3, r7, #7
   27216:	781b      	ldrb	r3, [r3, #0]
   27218:	2201      	movs	r2, #1
   2721a:	409a      	lsls	r2, r3
   2721c:	68fb      	ldr	r3, [r7, #12]
   2721e:	60da      	str	r2, [r3, #12]
   27220:	2300      	movs	r3, #0
   27222:	e000      	b.n	27226 <extint_chan_enable_callback+0x3a>
   27224:	2317      	movs	r3, #23
   27226:	0018      	movs	r0, r3
   27228:	46bd      	mov	sp, r7
   2722a:	b004      	add	sp, #16
   2722c:	bd80      	pop	{r7, pc}
   2722e:	46c0      	nop			; (mov r8, r8)
   27230:	000270bd 	.word	0x000270bd

00027234 <extint_chan_disable_callback>:
   27234:	b580      	push	{r7, lr}
   27236:	b084      	sub	sp, #16
   27238:	af00      	add	r7, sp, #0
   2723a:	0002      	movs	r2, r0
   2723c:	1dfb      	adds	r3, r7, #7
   2723e:	701a      	strb	r2, [r3, #0]
   27240:	1dbb      	adds	r3, r7, #6
   27242:	1c0a      	adds	r2, r1, #0
   27244:	701a      	strb	r2, [r3, #0]
   27246:	1dbb      	adds	r3, r7, #6
   27248:	781b      	ldrb	r3, [r3, #0]
   2724a:	2b00      	cmp	r3, #0
   2724c:	d10e      	bne.n	2726c <extint_chan_disable_callback+0x38>
   2724e:	1dfb      	adds	r3, r7, #7
   27250:	781b      	ldrb	r3, [r3, #0]
   27252:	0018      	movs	r0, r3
   27254:	4b08      	ldr	r3, [pc, #32]	; (27278 <extint_chan_disable_callback+0x44>)
   27256:	4798      	blx	r3
   27258:	0003      	movs	r3, r0
   2725a:	60fb      	str	r3, [r7, #12]
   2725c:	1dfb      	adds	r3, r7, #7
   2725e:	781b      	ldrb	r3, [r3, #0]
   27260:	2201      	movs	r2, #1
   27262:	409a      	lsls	r2, r3
   27264:	68fb      	ldr	r3, [r7, #12]
   27266:	609a      	str	r2, [r3, #8]
   27268:	2300      	movs	r3, #0
   2726a:	e000      	b.n	2726e <extint_chan_disable_callback+0x3a>
   2726c:	2317      	movs	r3, #23
   2726e:	0018      	movs	r0, r3
   27270:	46bd      	mov	sp, r7
   27272:	b004      	add	sp, #16
   27274:	bd80      	pop	{r7, pc}
   27276:	46c0      	nop			; (mov r8, r8)
   27278:	000270bd 	.word	0x000270bd

0002727c <EIC_Handler>:
   2727c:	b580      	push	{r7, lr}
   2727e:	af00      	add	r7, sp, #0
   27280:	4b15      	ldr	r3, [pc, #84]	; (272d8 <EIC_Handler+0x5c>)
   27282:	2200      	movs	r2, #0
   27284:	701a      	strb	r2, [r3, #0]
   27286:	e020      	b.n	272ca <EIC_Handler+0x4e>
   27288:	4b13      	ldr	r3, [pc, #76]	; (272d8 <EIC_Handler+0x5c>)
   2728a:	781b      	ldrb	r3, [r3, #0]
   2728c:	0018      	movs	r0, r3
   2728e:	4b13      	ldr	r3, [pc, #76]	; (272dc <EIC_Handler+0x60>)
   27290:	4798      	blx	r3
   27292:	1e03      	subs	r3, r0, #0
   27294:	d013      	beq.n	272be <EIC_Handler+0x42>
   27296:	4b10      	ldr	r3, [pc, #64]	; (272d8 <EIC_Handler+0x5c>)
   27298:	781b      	ldrb	r3, [r3, #0]
   2729a:	0018      	movs	r0, r3
   2729c:	4b10      	ldr	r3, [pc, #64]	; (272e0 <EIC_Handler+0x64>)
   2729e:	4798      	blx	r3
   272a0:	4b0d      	ldr	r3, [pc, #52]	; (272d8 <EIC_Handler+0x5c>)
   272a2:	781b      	ldrb	r3, [r3, #0]
   272a4:	001a      	movs	r2, r3
   272a6:	4b0f      	ldr	r3, [pc, #60]	; (272e4 <EIC_Handler+0x68>)
   272a8:	0092      	lsls	r2, r2, #2
   272aa:	58d3      	ldr	r3, [r2, r3]
   272ac:	2b00      	cmp	r3, #0
   272ae:	d006      	beq.n	272be <EIC_Handler+0x42>
   272b0:	4b09      	ldr	r3, [pc, #36]	; (272d8 <EIC_Handler+0x5c>)
   272b2:	781b      	ldrb	r3, [r3, #0]
   272b4:	001a      	movs	r2, r3
   272b6:	4b0b      	ldr	r3, [pc, #44]	; (272e4 <EIC_Handler+0x68>)
   272b8:	0092      	lsls	r2, r2, #2
   272ba:	58d3      	ldr	r3, [r2, r3]
   272bc:	4798      	blx	r3
   272be:	4b06      	ldr	r3, [pc, #24]	; (272d8 <EIC_Handler+0x5c>)
   272c0:	781b      	ldrb	r3, [r3, #0]
   272c2:	3301      	adds	r3, #1
   272c4:	b2da      	uxtb	r2, r3
   272c6:	4b04      	ldr	r3, [pc, #16]	; (272d8 <EIC_Handler+0x5c>)
   272c8:	701a      	strb	r2, [r3, #0]
   272ca:	4b03      	ldr	r3, [pc, #12]	; (272d8 <EIC_Handler+0x5c>)
   272cc:	781b      	ldrb	r3, [r3, #0]
   272ce:	2b0f      	cmp	r3, #15
   272d0:	d9da      	bls.n	27288 <EIC_Handler+0xc>
   272d2:	46c0      	nop			; (mov r8, r8)
   272d4:	46bd      	mov	sp, r7
   272d6:	bd80      	pop	{r7, pc}
   272d8:	20005800 	.word	0x20005800
   272dc:	00027109 	.word	0x00027109
   272e0:	0002714d 	.word	0x0002714d
   272e4:	20005804 	.word	0x20005804

000272e8 <system_gclk_chan_get_config_defaults>:
   272e8:	b580      	push	{r7, lr}
   272ea:	b082      	sub	sp, #8
   272ec:	af00      	add	r7, sp, #0
   272ee:	6078      	str	r0, [r7, #4]
   272f0:	687b      	ldr	r3, [r7, #4]
   272f2:	2200      	movs	r2, #0
   272f4:	701a      	strb	r2, [r3, #0]
   272f6:	46c0      	nop			; (mov r8, r8)
   272f8:	46bd      	mov	sp, r7
   272fa:	b002      	add	sp, #8
   272fc:	bd80      	pop	{r7, pc}
	...

00027300 <system_apb_clock_set_mask>:
   27300:	b580      	push	{r7, lr}
   27302:	b082      	sub	sp, #8
   27304:	af00      	add	r7, sp, #0
   27306:	0002      	movs	r2, r0
   27308:	6039      	str	r1, [r7, #0]
   2730a:	1dfb      	adds	r3, r7, #7
   2730c:	701a      	strb	r2, [r3, #0]
   2730e:	1dfb      	adds	r3, r7, #7
   27310:	781b      	ldrb	r3, [r3, #0]
   27312:	2b01      	cmp	r3, #1
   27314:	d00a      	beq.n	2732c <system_apb_clock_set_mask+0x2c>
   27316:	2b02      	cmp	r3, #2
   27318:	d00f      	beq.n	2733a <system_apb_clock_set_mask+0x3a>
   2731a:	2b00      	cmp	r3, #0
   2731c:	d114      	bne.n	27348 <system_apb_clock_set_mask+0x48>
   2731e:	4b0e      	ldr	r3, [pc, #56]	; (27358 <system_apb_clock_set_mask+0x58>)
   27320:	4a0d      	ldr	r2, [pc, #52]	; (27358 <system_apb_clock_set_mask+0x58>)
   27322:	6991      	ldr	r1, [r2, #24]
   27324:	683a      	ldr	r2, [r7, #0]
   27326:	430a      	orrs	r2, r1
   27328:	619a      	str	r2, [r3, #24]
   2732a:	e00f      	b.n	2734c <system_apb_clock_set_mask+0x4c>
   2732c:	4b0a      	ldr	r3, [pc, #40]	; (27358 <system_apb_clock_set_mask+0x58>)
   2732e:	4a0a      	ldr	r2, [pc, #40]	; (27358 <system_apb_clock_set_mask+0x58>)
   27330:	69d1      	ldr	r1, [r2, #28]
   27332:	683a      	ldr	r2, [r7, #0]
   27334:	430a      	orrs	r2, r1
   27336:	61da      	str	r2, [r3, #28]
   27338:	e008      	b.n	2734c <system_apb_clock_set_mask+0x4c>
   2733a:	4b07      	ldr	r3, [pc, #28]	; (27358 <system_apb_clock_set_mask+0x58>)
   2733c:	4a06      	ldr	r2, [pc, #24]	; (27358 <system_apb_clock_set_mask+0x58>)
   2733e:	6a11      	ldr	r1, [r2, #32]
   27340:	683a      	ldr	r2, [r7, #0]
   27342:	430a      	orrs	r2, r1
   27344:	621a      	str	r2, [r3, #32]
   27346:	e001      	b.n	2734c <system_apb_clock_set_mask+0x4c>
   27348:	2317      	movs	r3, #23
   2734a:	e000      	b.n	2734e <system_apb_clock_set_mask+0x4e>
   2734c:	2300      	movs	r3, #0
   2734e:	0018      	movs	r0, r3
   27350:	46bd      	mov	sp, r7
   27352:	b002      	add	sp, #8
   27354:	bd80      	pop	{r7, pc}
   27356:	46c0      	nop			; (mov r8, r8)
   27358:	40000400 	.word	0x40000400

0002735c <system_pinmux_get_config_defaults>:
   2735c:	b580      	push	{r7, lr}
   2735e:	b082      	sub	sp, #8
   27360:	af00      	add	r7, sp, #0
   27362:	6078      	str	r0, [r7, #4]
   27364:	687b      	ldr	r3, [r7, #4]
   27366:	2280      	movs	r2, #128	; 0x80
   27368:	701a      	strb	r2, [r3, #0]
   2736a:	687b      	ldr	r3, [r7, #4]
   2736c:	2200      	movs	r2, #0
   2736e:	705a      	strb	r2, [r3, #1]
   27370:	687b      	ldr	r3, [r7, #4]
   27372:	2201      	movs	r2, #1
   27374:	709a      	strb	r2, [r3, #2]
   27376:	687b      	ldr	r3, [r7, #4]
   27378:	2200      	movs	r2, #0
   2737a:	70da      	strb	r2, [r3, #3]
   2737c:	46c0      	nop			; (mov r8, r8)
   2737e:	46bd      	mov	sp, r7
   27380:	b002      	add	sp, #8
   27382:	bd80      	pop	{r7, pc}

00027384 <system_interrupt_enable>:
   27384:	b580      	push	{r7, lr}
   27386:	b082      	sub	sp, #8
   27388:	af00      	add	r7, sp, #0
   2738a:	0002      	movs	r2, r0
   2738c:	1dfb      	adds	r3, r7, #7
   2738e:	701a      	strb	r2, [r3, #0]
   27390:	4b06      	ldr	r3, [pc, #24]	; (273ac <system_interrupt_enable+0x28>)
   27392:	1dfa      	adds	r2, r7, #7
   27394:	7812      	ldrb	r2, [r2, #0]
   27396:	0011      	movs	r1, r2
   27398:	221f      	movs	r2, #31
   2739a:	400a      	ands	r2, r1
   2739c:	2101      	movs	r1, #1
   2739e:	4091      	lsls	r1, r2
   273a0:	000a      	movs	r2, r1
   273a2:	601a      	str	r2, [r3, #0]
   273a4:	46c0      	nop			; (mov r8, r8)
   273a6:	46bd      	mov	sp, r7
   273a8:	b002      	add	sp, #8
   273aa:	bd80      	pop	{r7, pc}
   273ac:	e000e100 	.word	0xe000e100

000273b0 <_extint_get_eic_from_channel>:
   273b0:	b580      	push	{r7, lr}
   273b2:	b084      	sub	sp, #16
   273b4:	af00      	add	r7, sp, #0
   273b6:	0002      	movs	r2, r0
   273b8:	1dfb      	adds	r3, r7, #7
   273ba:	701a      	strb	r2, [r3, #0]
   273bc:	230f      	movs	r3, #15
   273be:	18fb      	adds	r3, r7, r3
   273c0:	1dfa      	adds	r2, r7, #7
   273c2:	7812      	ldrb	r2, [r2, #0]
   273c4:	0952      	lsrs	r2, r2, #5
   273c6:	701a      	strb	r2, [r3, #0]
   273c8:	230f      	movs	r3, #15
   273ca:	18fb      	adds	r3, r7, r3
   273cc:	781b      	ldrb	r3, [r3, #0]
   273ce:	2b00      	cmp	r3, #0
   273d0:	d10c      	bne.n	273ec <_extint_get_eic_from_channel+0x3c>
   273d2:	4b09      	ldr	r3, [pc, #36]	; (273f8 <_extint_get_eic_from_channel+0x48>)
   273d4:	60bb      	str	r3, [r7, #8]
   273d6:	230f      	movs	r3, #15
   273d8:	18fb      	adds	r3, r7, r3
   273da:	781b      	ldrb	r3, [r3, #0]
   273dc:	009b      	lsls	r3, r3, #2
   273de:	2210      	movs	r2, #16
   273e0:	4694      	mov	ip, r2
   273e2:	44bc      	add	ip, r7
   273e4:	4463      	add	r3, ip
   273e6:	3b08      	subs	r3, #8
   273e8:	681b      	ldr	r3, [r3, #0]
   273ea:	e000      	b.n	273ee <_extint_get_eic_from_channel+0x3e>
   273ec:	2300      	movs	r3, #0
   273ee:	0018      	movs	r0, r3
   273f0:	46bd      	mov	sp, r7
   273f2:	b004      	add	sp, #16
   273f4:	bd80      	pop	{r7, pc}
   273f6:	46c0      	nop			; (mov r8, r8)
   273f8:	40001800 	.word	0x40001800

000273fc <extint_is_syncing>:
   273fc:	b580      	push	{r7, lr}
   273fe:	b082      	sub	sp, #8
   27400:	af00      	add	r7, sp, #0
   27402:	4b0f      	ldr	r3, [pc, #60]	; (27440 <extint_is_syncing+0x44>)
   27404:	603b      	str	r3, [r7, #0]
   27406:	2300      	movs	r3, #0
   27408:	607b      	str	r3, [r7, #4]
   2740a:	e011      	b.n	27430 <extint_is_syncing+0x34>
   2740c:	687b      	ldr	r3, [r7, #4]
   2740e:	009b      	lsls	r3, r3, #2
   27410:	2208      	movs	r2, #8
   27412:	4694      	mov	ip, r2
   27414:	44bc      	add	ip, r7
   27416:	4463      	add	r3, ip
   27418:	3b08      	subs	r3, #8
   2741a:	681b      	ldr	r3, [r3, #0]
   2741c:	785b      	ldrb	r3, [r3, #1]
   2741e:	b2db      	uxtb	r3, r3
   27420:	b25b      	sxtb	r3, r3
   27422:	2b00      	cmp	r3, #0
   27424:	da01      	bge.n	2742a <extint_is_syncing+0x2e>
   27426:	2301      	movs	r3, #1
   27428:	e006      	b.n	27438 <extint_is_syncing+0x3c>
   2742a:	687b      	ldr	r3, [r7, #4]
   2742c:	3301      	adds	r3, #1
   2742e:	607b      	str	r3, [r7, #4]
   27430:	687b      	ldr	r3, [r7, #4]
   27432:	2b00      	cmp	r3, #0
   27434:	d0ea      	beq.n	2740c <extint_is_syncing+0x10>
   27436:	2300      	movs	r3, #0
   27438:	0018      	movs	r0, r3
   2743a:	46bd      	mov	sp, r7
   2743c:	b002      	add	sp, #8
   2743e:	bd80      	pop	{r7, pc}
   27440:	40001800 	.word	0x40001800

00027444 <_system_extint_init>:
   27444:	b580      	push	{r7, lr}
   27446:	b084      	sub	sp, #16
   27448:	af00      	add	r7, sp, #0
   2744a:	4b2d      	ldr	r3, [pc, #180]	; (27500 <_system_extint_init+0xbc>)
   2744c:	607b      	str	r3, [r7, #4]
   2744e:	2140      	movs	r1, #64	; 0x40
   27450:	2000      	movs	r0, #0
   27452:	4b2c      	ldr	r3, [pc, #176]	; (27504 <_system_extint_init+0xc0>)
   27454:	4798      	blx	r3
   27456:	003b      	movs	r3, r7
   27458:	0018      	movs	r0, r3
   2745a:	4b2b      	ldr	r3, [pc, #172]	; (27508 <_system_extint_init+0xc4>)
   2745c:	4798      	blx	r3
   2745e:	003b      	movs	r3, r7
   27460:	2200      	movs	r2, #0
   27462:	701a      	strb	r2, [r3, #0]
   27464:	003b      	movs	r3, r7
   27466:	0019      	movs	r1, r3
   27468:	2005      	movs	r0, #5
   2746a:	4b28      	ldr	r3, [pc, #160]	; (2750c <_system_extint_init+0xc8>)
   2746c:	4798      	blx	r3
   2746e:	2005      	movs	r0, #5
   27470:	4b27      	ldr	r3, [pc, #156]	; (27510 <_system_extint_init+0xcc>)
   27472:	4798      	blx	r3
   27474:	2300      	movs	r3, #0
   27476:	60fb      	str	r3, [r7, #12]
   27478:	e018      	b.n	274ac <_system_extint_init+0x68>
   2747a:	68fb      	ldr	r3, [r7, #12]
   2747c:	009b      	lsls	r3, r3, #2
   2747e:	2210      	movs	r2, #16
   27480:	4694      	mov	ip, r2
   27482:	44bc      	add	ip, r7
   27484:	4463      	add	r3, ip
   27486:	3b0c      	subs	r3, #12
   27488:	681a      	ldr	r2, [r3, #0]
   2748a:	68fb      	ldr	r3, [r7, #12]
   2748c:	009b      	lsls	r3, r3, #2
   2748e:	2110      	movs	r1, #16
   27490:	468c      	mov	ip, r1
   27492:	44bc      	add	ip, r7
   27494:	4463      	add	r3, ip
   27496:	3b0c      	subs	r3, #12
   27498:	681b      	ldr	r3, [r3, #0]
   2749a:	781b      	ldrb	r3, [r3, #0]
   2749c:	b2db      	uxtb	r3, r3
   2749e:	2101      	movs	r1, #1
   274a0:	430b      	orrs	r3, r1
   274a2:	b2db      	uxtb	r3, r3
   274a4:	7013      	strb	r3, [r2, #0]
   274a6:	68fb      	ldr	r3, [r7, #12]
   274a8:	3301      	adds	r3, #1
   274aa:	60fb      	str	r3, [r7, #12]
   274ac:	68fb      	ldr	r3, [r7, #12]
   274ae:	2b00      	cmp	r3, #0
   274b0:	d0e3      	beq.n	2747a <_system_extint_init+0x36>
   274b2:	46c0      	nop			; (mov r8, r8)
   274b4:	4b17      	ldr	r3, [pc, #92]	; (27514 <_system_extint_init+0xd0>)
   274b6:	4798      	blx	r3
   274b8:	1e03      	subs	r3, r0, #0
   274ba:	d1fb      	bne.n	274b4 <_system_extint_init+0x70>
   274bc:	230b      	movs	r3, #11
   274be:	18fb      	adds	r3, r7, r3
   274c0:	2200      	movs	r2, #0
   274c2:	701a      	strb	r2, [r3, #0]
   274c4:	e00d      	b.n	274e2 <_system_extint_init+0x9e>
   274c6:	230b      	movs	r3, #11
   274c8:	18fb      	adds	r3, r7, r3
   274ca:	781a      	ldrb	r2, [r3, #0]
   274cc:	4b12      	ldr	r3, [pc, #72]	; (27518 <_system_extint_init+0xd4>)
   274ce:	0092      	lsls	r2, r2, #2
   274d0:	2100      	movs	r1, #0
   274d2:	50d1      	str	r1, [r2, r3]
   274d4:	230b      	movs	r3, #11
   274d6:	18fb      	adds	r3, r7, r3
   274d8:	781a      	ldrb	r2, [r3, #0]
   274da:	230b      	movs	r3, #11
   274dc:	18fb      	adds	r3, r7, r3
   274de:	3201      	adds	r2, #1
   274e0:	701a      	strb	r2, [r3, #0]
   274e2:	230b      	movs	r3, #11
   274e4:	18fb      	adds	r3, r7, r3
   274e6:	781b      	ldrb	r3, [r3, #0]
   274e8:	2b0f      	cmp	r3, #15
   274ea:	d9ec      	bls.n	274c6 <_system_extint_init+0x82>
   274ec:	2004      	movs	r0, #4
   274ee:	4b0b      	ldr	r3, [pc, #44]	; (2751c <_system_extint_init+0xd8>)
   274f0:	4798      	blx	r3
   274f2:	4b0b      	ldr	r3, [pc, #44]	; (27520 <_system_extint_init+0xdc>)
   274f4:	4798      	blx	r3
   274f6:	46c0      	nop			; (mov r8, r8)
   274f8:	46bd      	mov	sp, r7
   274fa:	b004      	add	sp, #16
   274fc:	bd80      	pop	{r7, pc}
   274fe:	46c0      	nop			; (mov r8, r8)
   27500:	40001800 	.word	0x40001800
   27504:	00027301 	.word	0x00027301
   27508:	000272e9 	.word	0x000272e9
   2750c:	0002ab71 	.word	0x0002ab71
   27510:	0002abb5 	.word	0x0002abb5
   27514:	000273fd 	.word	0x000273fd
   27518:	20005804 	.word	0x20005804
   2751c:	00027385 	.word	0x00027385
   27520:	00027525 	.word	0x00027525

00027524 <_extint_enable>:
   27524:	b580      	push	{r7, lr}
   27526:	b082      	sub	sp, #8
   27528:	af00      	add	r7, sp, #0
   2752a:	4b15      	ldr	r3, [pc, #84]	; (27580 <_extint_enable+0x5c>)
   2752c:	603b      	str	r3, [r7, #0]
   2752e:	2300      	movs	r3, #0
   27530:	607b      	str	r3, [r7, #4]
   27532:	e018      	b.n	27566 <_extint_enable+0x42>
   27534:	687b      	ldr	r3, [r7, #4]
   27536:	009b      	lsls	r3, r3, #2
   27538:	2208      	movs	r2, #8
   2753a:	4694      	mov	ip, r2
   2753c:	44bc      	add	ip, r7
   2753e:	4463      	add	r3, ip
   27540:	3b08      	subs	r3, #8
   27542:	681a      	ldr	r2, [r3, #0]
   27544:	687b      	ldr	r3, [r7, #4]
   27546:	009b      	lsls	r3, r3, #2
   27548:	2108      	movs	r1, #8
   2754a:	468c      	mov	ip, r1
   2754c:	44bc      	add	ip, r7
   2754e:	4463      	add	r3, ip
   27550:	3b08      	subs	r3, #8
   27552:	681b      	ldr	r3, [r3, #0]
   27554:	781b      	ldrb	r3, [r3, #0]
   27556:	b2db      	uxtb	r3, r3
   27558:	2102      	movs	r1, #2
   2755a:	430b      	orrs	r3, r1
   2755c:	b2db      	uxtb	r3, r3
   2755e:	7013      	strb	r3, [r2, #0]
   27560:	687b      	ldr	r3, [r7, #4]
   27562:	3301      	adds	r3, #1
   27564:	607b      	str	r3, [r7, #4]
   27566:	687b      	ldr	r3, [r7, #4]
   27568:	2b00      	cmp	r3, #0
   2756a:	d0e3      	beq.n	27534 <_extint_enable+0x10>
   2756c:	46c0      	nop			; (mov r8, r8)
   2756e:	4b05      	ldr	r3, [pc, #20]	; (27584 <_extint_enable+0x60>)
   27570:	4798      	blx	r3
   27572:	1e03      	subs	r3, r0, #0
   27574:	d1fb      	bne.n	2756e <_extint_enable+0x4a>
   27576:	46c0      	nop			; (mov r8, r8)
   27578:	46bd      	mov	sp, r7
   2757a:	b002      	add	sp, #8
   2757c:	bd80      	pop	{r7, pc}
   2757e:	46c0      	nop			; (mov r8, r8)
   27580:	40001800 	.word	0x40001800
   27584:	000273fd 	.word	0x000273fd

00027588 <extint_chan_get_config_defaults>:
   27588:	b580      	push	{r7, lr}
   2758a:	b082      	sub	sp, #8
   2758c:	af00      	add	r7, sp, #0
   2758e:	6078      	str	r0, [r7, #4]
   27590:	687b      	ldr	r3, [r7, #4]
   27592:	2200      	movs	r2, #0
   27594:	601a      	str	r2, [r3, #0]
   27596:	687b      	ldr	r3, [r7, #4]
   27598:	2200      	movs	r2, #0
   2759a:	605a      	str	r2, [r3, #4]
   2759c:	687b      	ldr	r3, [r7, #4]
   2759e:	2201      	movs	r2, #1
   275a0:	721a      	strb	r2, [r3, #8]
   275a2:	687b      	ldr	r3, [r7, #4]
   275a4:	2201      	movs	r2, #1
   275a6:	725a      	strb	r2, [r3, #9]
   275a8:	687b      	ldr	r3, [r7, #4]
   275aa:	2200      	movs	r2, #0
   275ac:	729a      	strb	r2, [r3, #10]
   275ae:	687b      	ldr	r3, [r7, #4]
   275b0:	2202      	movs	r2, #2
   275b2:	72da      	strb	r2, [r3, #11]
   275b4:	46c0      	nop			; (mov r8, r8)
   275b6:	46bd      	mov	sp, r7
   275b8:	b002      	add	sp, #8
   275ba:	bd80      	pop	{r7, pc}

000275bc <extint_chan_set_config>:
   275bc:	b580      	push	{r7, lr}
   275be:	b086      	sub	sp, #24
   275c0:	af00      	add	r7, sp, #0
   275c2:	0002      	movs	r2, r0
   275c4:	6039      	str	r1, [r7, #0]
   275c6:	1dfb      	adds	r3, r7, #7
   275c8:	701a      	strb	r2, [r3, #0]
   275ca:	2308      	movs	r3, #8
   275cc:	18fb      	adds	r3, r7, r3
   275ce:	0018      	movs	r0, r3
   275d0:	4b36      	ldr	r3, [pc, #216]	; (276ac <extint_chan_set_config+0xf0>)
   275d2:	4798      	blx	r3
   275d4:	683b      	ldr	r3, [r7, #0]
   275d6:	685b      	ldr	r3, [r3, #4]
   275d8:	b2da      	uxtb	r2, r3
   275da:	2308      	movs	r3, #8
   275dc:	18fb      	adds	r3, r7, r3
   275de:	701a      	strb	r2, [r3, #0]
   275e0:	2308      	movs	r3, #8
   275e2:	18fb      	adds	r3, r7, r3
   275e4:	2200      	movs	r2, #0
   275e6:	705a      	strb	r2, [r3, #1]
   275e8:	683b      	ldr	r3, [r7, #0]
   275ea:	7a1a      	ldrb	r2, [r3, #8]
   275ec:	2308      	movs	r3, #8
   275ee:	18fb      	adds	r3, r7, r3
   275f0:	709a      	strb	r2, [r3, #2]
   275f2:	683b      	ldr	r3, [r7, #0]
   275f4:	681b      	ldr	r3, [r3, #0]
   275f6:	b2db      	uxtb	r3, r3
   275f8:	2208      	movs	r2, #8
   275fa:	18ba      	adds	r2, r7, r2
   275fc:	0011      	movs	r1, r2
   275fe:	0018      	movs	r0, r3
   27600:	4b2b      	ldr	r3, [pc, #172]	; (276b0 <extint_chan_set_config+0xf4>)
   27602:	4798      	blx	r3
   27604:	1dfb      	adds	r3, r7, #7
   27606:	781b      	ldrb	r3, [r3, #0]
   27608:	0018      	movs	r0, r3
   2760a:	4b2a      	ldr	r3, [pc, #168]	; (276b4 <extint_chan_set_config+0xf8>)
   2760c:	4798      	blx	r3
   2760e:	0003      	movs	r3, r0
   27610:	613b      	str	r3, [r7, #16]
   27612:	1dfb      	adds	r3, r7, #7
   27614:	781b      	ldrb	r3, [r3, #0]
   27616:	2207      	movs	r2, #7
   27618:	4013      	ands	r3, r2
   2761a:	009b      	lsls	r3, r3, #2
   2761c:	60fb      	str	r3, [r7, #12]
   2761e:	683b      	ldr	r3, [r7, #0]
   27620:	7adb      	ldrb	r3, [r3, #11]
   27622:	617b      	str	r3, [r7, #20]
   27624:	683b      	ldr	r3, [r7, #0]
   27626:	7a9b      	ldrb	r3, [r3, #10]
   27628:	2b00      	cmp	r3, #0
   2762a:	d003      	beq.n	27634 <extint_chan_set_config+0x78>
   2762c:	697b      	ldr	r3, [r7, #20]
   2762e:	2208      	movs	r2, #8
   27630:	4313      	orrs	r3, r2
   27632:	617b      	str	r3, [r7, #20]
   27634:	1dfb      	adds	r3, r7, #7
   27636:	781b      	ldrb	r3, [r3, #0]
   27638:	08db      	lsrs	r3, r3, #3
   2763a:	b2db      	uxtb	r3, r3
   2763c:	0018      	movs	r0, r3
   2763e:	1dfb      	adds	r3, r7, #7
   27640:	781b      	ldrb	r3, [r3, #0]
   27642:	08db      	lsrs	r3, r3, #3
   27644:	b2db      	uxtb	r3, r3
   27646:	001a      	movs	r2, r3
   27648:	693b      	ldr	r3, [r7, #16]
   2764a:	3206      	adds	r2, #6
   2764c:	0092      	lsls	r2, r2, #2
   2764e:	58d3      	ldr	r3, [r2, r3]
   27650:	210f      	movs	r1, #15
   27652:	68fa      	ldr	r2, [r7, #12]
   27654:	4091      	lsls	r1, r2
   27656:	000a      	movs	r2, r1
   27658:	43d2      	mvns	r2, r2
   2765a:	401a      	ands	r2, r3
   2765c:	6979      	ldr	r1, [r7, #20]
   2765e:	68fb      	ldr	r3, [r7, #12]
   27660:	4099      	lsls	r1, r3
   27662:	000b      	movs	r3, r1
   27664:	431a      	orrs	r2, r3
   27666:	0011      	movs	r1, r2
   27668:	693b      	ldr	r3, [r7, #16]
   2766a:	1d82      	adds	r2, r0, #6
   2766c:	0092      	lsls	r2, r2, #2
   2766e:	50d1      	str	r1, [r2, r3]
   27670:	683b      	ldr	r3, [r7, #0]
   27672:	7a5b      	ldrb	r3, [r3, #9]
   27674:	2b00      	cmp	r3, #0
   27676:	d00a      	beq.n	2768e <extint_chan_set_config+0xd2>
   27678:	693b      	ldr	r3, [r7, #16]
   2767a:	695a      	ldr	r2, [r3, #20]
   2767c:	1dfb      	adds	r3, r7, #7
   2767e:	781b      	ldrb	r3, [r3, #0]
   27680:	2101      	movs	r1, #1
   27682:	4099      	lsls	r1, r3
   27684:	000b      	movs	r3, r1
   27686:	431a      	orrs	r2, r3
   27688:	693b      	ldr	r3, [r7, #16]
   2768a:	615a      	str	r2, [r3, #20]
   2768c:	e00a      	b.n	276a4 <extint_chan_set_config+0xe8>
   2768e:	693b      	ldr	r3, [r7, #16]
   27690:	695b      	ldr	r3, [r3, #20]
   27692:	1dfa      	adds	r2, r7, #7
   27694:	7812      	ldrb	r2, [r2, #0]
   27696:	2101      	movs	r1, #1
   27698:	4091      	lsls	r1, r2
   2769a:	000a      	movs	r2, r1
   2769c:	43d2      	mvns	r2, r2
   2769e:	401a      	ands	r2, r3
   276a0:	693b      	ldr	r3, [r7, #16]
   276a2:	615a      	str	r2, [r3, #20]
   276a4:	46c0      	nop			; (mov r8, r8)
   276a6:	46bd      	mov	sp, r7
   276a8:	b006      	add	sp, #24
   276aa:	bd80      	pop	{r7, pc}
   276ac:	0002735d 	.word	0x0002735d
   276b0:	0002aed1 	.word	0x0002aed1
   276b4:	000273b1 	.word	0x000273b1

000276b8 <system_pinmux_get_config_defaults>:
   276b8:	b580      	push	{r7, lr}
   276ba:	b082      	sub	sp, #8
   276bc:	af00      	add	r7, sp, #0
   276be:	6078      	str	r0, [r7, #4]
   276c0:	687b      	ldr	r3, [r7, #4]
   276c2:	2280      	movs	r2, #128	; 0x80
   276c4:	701a      	strb	r2, [r3, #0]
   276c6:	687b      	ldr	r3, [r7, #4]
   276c8:	2200      	movs	r2, #0
   276ca:	705a      	strb	r2, [r3, #1]
   276cc:	687b      	ldr	r3, [r7, #4]
   276ce:	2201      	movs	r2, #1
   276d0:	709a      	strb	r2, [r3, #2]
   276d2:	687b      	ldr	r3, [r7, #4]
   276d4:	2200      	movs	r2, #0
   276d6:	70da      	strb	r2, [r3, #3]
   276d8:	46c0      	nop			; (mov r8, r8)
   276da:	46bd      	mov	sp, r7
   276dc:	b002      	add	sp, #8
   276de:	bd80      	pop	{r7, pc}

000276e0 <port_pin_set_config>:
   276e0:	b580      	push	{r7, lr}
   276e2:	b084      	sub	sp, #16
   276e4:	af00      	add	r7, sp, #0
   276e6:	0002      	movs	r2, r0
   276e8:	6039      	str	r1, [r7, #0]
   276ea:	1dfb      	adds	r3, r7, #7
   276ec:	701a      	strb	r2, [r3, #0]
   276ee:	230c      	movs	r3, #12
   276f0:	18fb      	adds	r3, r7, r3
   276f2:	0018      	movs	r0, r3
   276f4:	4b10      	ldr	r3, [pc, #64]	; (27738 <port_pin_set_config+0x58>)
   276f6:	4798      	blx	r3
   276f8:	230c      	movs	r3, #12
   276fa:	18fb      	adds	r3, r7, r3
   276fc:	2280      	movs	r2, #128	; 0x80
   276fe:	701a      	strb	r2, [r3, #0]
   27700:	683b      	ldr	r3, [r7, #0]
   27702:	781a      	ldrb	r2, [r3, #0]
   27704:	230c      	movs	r3, #12
   27706:	18fb      	adds	r3, r7, r3
   27708:	705a      	strb	r2, [r3, #1]
   2770a:	683b      	ldr	r3, [r7, #0]
   2770c:	785a      	ldrb	r2, [r3, #1]
   2770e:	230c      	movs	r3, #12
   27710:	18fb      	adds	r3, r7, r3
   27712:	709a      	strb	r2, [r3, #2]
   27714:	683b      	ldr	r3, [r7, #0]
   27716:	789a      	ldrb	r2, [r3, #2]
   27718:	230c      	movs	r3, #12
   2771a:	18fb      	adds	r3, r7, r3
   2771c:	70da      	strb	r2, [r3, #3]
   2771e:	230c      	movs	r3, #12
   27720:	18fa      	adds	r2, r7, r3
   27722:	1dfb      	adds	r3, r7, #7
   27724:	781b      	ldrb	r3, [r3, #0]
   27726:	0011      	movs	r1, r2
   27728:	0018      	movs	r0, r3
   2772a:	4b04      	ldr	r3, [pc, #16]	; (2773c <port_pin_set_config+0x5c>)
   2772c:	4798      	blx	r3
   2772e:	46c0      	nop			; (mov r8, r8)
   27730:	46bd      	mov	sp, r7
   27732:	b004      	add	sp, #16
   27734:	bd80      	pop	{r7, pc}
   27736:	46c0      	nop			; (mov r8, r8)
   27738:	000276b9 	.word	0x000276b9
   2773c:	0002aed1 	.word	0x0002aed1

00027740 <system_gclk_chan_get_config_defaults>:
   27740:	b580      	push	{r7, lr}
   27742:	b082      	sub	sp, #8
   27744:	af00      	add	r7, sp, #0
   27746:	6078      	str	r0, [r7, #4]
   27748:	687b      	ldr	r3, [r7, #4]
   2774a:	2200      	movs	r2, #0
   2774c:	701a      	strb	r2, [r3, #0]
   2774e:	46c0      	nop			; (mov r8, r8)
   27750:	46bd      	mov	sp, r7
   27752:	b002      	add	sp, #8
   27754:	bd80      	pop	{r7, pc}
	...

00027758 <system_apb_clock_set_mask>:
   27758:	b580      	push	{r7, lr}
   2775a:	b082      	sub	sp, #8
   2775c:	af00      	add	r7, sp, #0
   2775e:	0002      	movs	r2, r0
   27760:	6039      	str	r1, [r7, #0]
   27762:	1dfb      	adds	r3, r7, #7
   27764:	701a      	strb	r2, [r3, #0]
   27766:	1dfb      	adds	r3, r7, #7
   27768:	781b      	ldrb	r3, [r3, #0]
   2776a:	2b01      	cmp	r3, #1
   2776c:	d00a      	beq.n	27784 <system_apb_clock_set_mask+0x2c>
   2776e:	2b02      	cmp	r3, #2
   27770:	d00f      	beq.n	27792 <system_apb_clock_set_mask+0x3a>
   27772:	2b00      	cmp	r3, #0
   27774:	d114      	bne.n	277a0 <system_apb_clock_set_mask+0x48>
   27776:	4b0e      	ldr	r3, [pc, #56]	; (277b0 <system_apb_clock_set_mask+0x58>)
   27778:	4a0d      	ldr	r2, [pc, #52]	; (277b0 <system_apb_clock_set_mask+0x58>)
   2777a:	6991      	ldr	r1, [r2, #24]
   2777c:	683a      	ldr	r2, [r7, #0]
   2777e:	430a      	orrs	r2, r1
   27780:	619a      	str	r2, [r3, #24]
   27782:	e00f      	b.n	277a4 <system_apb_clock_set_mask+0x4c>
   27784:	4b0a      	ldr	r3, [pc, #40]	; (277b0 <system_apb_clock_set_mask+0x58>)
   27786:	4a0a      	ldr	r2, [pc, #40]	; (277b0 <system_apb_clock_set_mask+0x58>)
   27788:	69d1      	ldr	r1, [r2, #28]
   2778a:	683a      	ldr	r2, [r7, #0]
   2778c:	430a      	orrs	r2, r1
   2778e:	61da      	str	r2, [r3, #28]
   27790:	e008      	b.n	277a4 <system_apb_clock_set_mask+0x4c>
   27792:	4b07      	ldr	r3, [pc, #28]	; (277b0 <system_apb_clock_set_mask+0x58>)
   27794:	4a06      	ldr	r2, [pc, #24]	; (277b0 <system_apb_clock_set_mask+0x58>)
   27796:	6a11      	ldr	r1, [r2, #32]
   27798:	683a      	ldr	r2, [r7, #0]
   2779a:	430a      	orrs	r2, r1
   2779c:	621a      	str	r2, [r3, #32]
   2779e:	e001      	b.n	277a4 <system_apb_clock_set_mask+0x4c>
   277a0:	2317      	movs	r3, #23
   277a2:	e000      	b.n	277a6 <system_apb_clock_set_mask+0x4e>
   277a4:	2300      	movs	r3, #0
   277a6:	0018      	movs	r0, r3
   277a8:	46bd      	mov	sp, r7
   277aa:	b002      	add	sp, #8
   277ac:	bd80      	pop	{r7, pc}
   277ae:	46c0      	nop			; (mov r8, r8)
   277b0:	40000400 	.word	0x40000400

000277b4 <system_interrupt_enable>:
   277b4:	b580      	push	{r7, lr}
   277b6:	b082      	sub	sp, #8
   277b8:	af00      	add	r7, sp, #0
   277ba:	0002      	movs	r2, r0
   277bc:	1dfb      	adds	r3, r7, #7
   277be:	701a      	strb	r2, [r3, #0]
   277c0:	4b06      	ldr	r3, [pc, #24]	; (277dc <system_interrupt_enable+0x28>)
   277c2:	1dfa      	adds	r2, r7, #7
   277c4:	7812      	ldrb	r2, [r2, #0]
   277c6:	0011      	movs	r1, r2
   277c8:	221f      	movs	r2, #31
   277ca:	400a      	ands	r2, r1
   277cc:	2101      	movs	r1, #1
   277ce:	4091      	lsls	r1, r2
   277d0:	000a      	movs	r2, r1
   277d2:	601a      	str	r2, [r3, #0]
   277d4:	46c0      	nop			; (mov r8, r8)
   277d6:	46bd      	mov	sp, r7
   277d8:	b002      	add	sp, #8
   277da:	bd80      	pop	{r7, pc}
   277dc:	e000e100 	.word	0xe000e100

000277e0 <system_interrupt_disable>:
   277e0:	b580      	push	{r7, lr}
   277e2:	b082      	sub	sp, #8
   277e4:	af00      	add	r7, sp, #0
   277e6:	0002      	movs	r2, r0
   277e8:	1dfb      	adds	r3, r7, #7
   277ea:	701a      	strb	r2, [r3, #0]
   277ec:	4a07      	ldr	r2, [pc, #28]	; (2780c <system_interrupt_disable+0x2c>)
   277ee:	1dfb      	adds	r3, r7, #7
   277f0:	781b      	ldrb	r3, [r3, #0]
   277f2:	0019      	movs	r1, r3
   277f4:	231f      	movs	r3, #31
   277f6:	400b      	ands	r3, r1
   277f8:	2101      	movs	r1, #1
   277fa:	4099      	lsls	r1, r3
   277fc:	000b      	movs	r3, r1
   277fe:	0019      	movs	r1, r3
   27800:	2380      	movs	r3, #128	; 0x80
   27802:	50d1      	str	r1, [r2, r3]
   27804:	46c0      	nop			; (mov r8, r8)
   27806:	46bd      	mov	sp, r7
   27808:	b002      	add	sp, #8
   2780a:	bd80      	pop	{r7, pc}
   2780c:	e000e100 	.word	0xe000e100

00027810 <rtc_calendar_is_syncing>:
   27810:	b580      	push	{r7, lr}
   27812:	b084      	sub	sp, #16
   27814:	af00      	add	r7, sp, #0
   27816:	6078      	str	r0, [r7, #4]
   27818:	687b      	ldr	r3, [r7, #4]
   2781a:	681b      	ldr	r3, [r3, #0]
   2781c:	60fb      	str	r3, [r7, #12]
   2781e:	68fb      	ldr	r3, [r7, #12]
   27820:	7a9b      	ldrb	r3, [r3, #10]
   27822:	b2db      	uxtb	r3, r3
   27824:	b25b      	sxtb	r3, r3
   27826:	2b00      	cmp	r3, #0
   27828:	da01      	bge.n	2782e <rtc_calendar_is_syncing+0x1e>
   2782a:	2301      	movs	r3, #1
   2782c:	e000      	b.n	27830 <rtc_calendar_is_syncing+0x20>
   2782e:	2300      	movs	r3, #0
   27830:	0018      	movs	r0, r3
   27832:	46bd      	mov	sp, r7
   27834:	b004      	add	sp, #16
   27836:	bd80      	pop	{r7, pc}

00027838 <rtc_calendar_enable>:
   27838:	b580      	push	{r7, lr}
   2783a:	b084      	sub	sp, #16
   2783c:	af00      	add	r7, sp, #0
   2783e:	6078      	str	r0, [r7, #4]
   27840:	687b      	ldr	r3, [r7, #4]
   27842:	681b      	ldr	r3, [r3, #0]
   27844:	60fb      	str	r3, [r7, #12]
   27846:	2003      	movs	r0, #3
   27848:	4b0a      	ldr	r3, [pc, #40]	; (27874 <rtc_calendar_enable+0x3c>)
   2784a:	4798      	blx	r3
   2784c:	46c0      	nop			; (mov r8, r8)
   2784e:	687b      	ldr	r3, [r7, #4]
   27850:	0018      	movs	r0, r3
   27852:	4b09      	ldr	r3, [pc, #36]	; (27878 <rtc_calendar_enable+0x40>)
   27854:	4798      	blx	r3
   27856:	1e03      	subs	r3, r0, #0
   27858:	d1f9      	bne.n	2784e <rtc_calendar_enable+0x16>
   2785a:	68fb      	ldr	r3, [r7, #12]
   2785c:	881b      	ldrh	r3, [r3, #0]
   2785e:	b29b      	uxth	r3, r3
   27860:	2202      	movs	r2, #2
   27862:	4313      	orrs	r3, r2
   27864:	b29a      	uxth	r2, r3
   27866:	68fb      	ldr	r3, [r7, #12]
   27868:	801a      	strh	r2, [r3, #0]
   2786a:	46c0      	nop			; (mov r8, r8)
   2786c:	46bd      	mov	sp, r7
   2786e:	b004      	add	sp, #16
   27870:	bd80      	pop	{r7, pc}
   27872:	46c0      	nop			; (mov r8, r8)
   27874:	000277b5 	.word	0x000277b5
   27878:	00027811 	.word	0x00027811

0002787c <rtc_calendar_disable>:
   2787c:	b580      	push	{r7, lr}
   2787e:	b084      	sub	sp, #16
   27880:	af00      	add	r7, sp, #0
   27882:	6078      	str	r0, [r7, #4]
   27884:	687b      	ldr	r3, [r7, #4]
   27886:	681b      	ldr	r3, [r3, #0]
   27888:	60fb      	str	r3, [r7, #12]
   2788a:	2003      	movs	r0, #3
   2788c:	4b0d      	ldr	r3, [pc, #52]	; (278c4 <rtc_calendar_disable+0x48>)
   2788e:	4798      	blx	r3
   27890:	46c0      	nop			; (mov r8, r8)
   27892:	687b      	ldr	r3, [r7, #4]
   27894:	0018      	movs	r0, r3
   27896:	4b0c      	ldr	r3, [pc, #48]	; (278c8 <rtc_calendar_disable+0x4c>)
   27898:	4798      	blx	r3
   2789a:	1e03      	subs	r3, r0, #0
   2789c:	d1f9      	bne.n	27892 <rtc_calendar_disable+0x16>
   2789e:	68fb      	ldr	r3, [r7, #12]
   278a0:	22c1      	movs	r2, #193	; 0xc1
   278a2:	719a      	strb	r2, [r3, #6]
   278a4:	68fb      	ldr	r3, [r7, #12]
   278a6:	22c1      	movs	r2, #193	; 0xc1
   278a8:	721a      	strb	r2, [r3, #8]
   278aa:	68fb      	ldr	r3, [r7, #12]
   278ac:	881b      	ldrh	r3, [r3, #0]
   278ae:	b29b      	uxth	r3, r3
   278b0:	2202      	movs	r2, #2
   278b2:	4393      	bics	r3, r2
   278b4:	b29a      	uxth	r2, r3
   278b6:	68fb      	ldr	r3, [r7, #12]
   278b8:	801a      	strh	r2, [r3, #0]
   278ba:	46c0      	nop			; (mov r8, r8)
   278bc:	46bd      	mov	sp, r7
   278be:	b004      	add	sp, #16
   278c0:	bd80      	pop	{r7, pc}
   278c2:	46c0      	nop			; (mov r8, r8)
   278c4:	000277e1 	.word	0x000277e1
   278c8:	00027811 	.word	0x00027811

000278cc <rtc_calendar_reset>:
   278cc:	b580      	push	{r7, lr}
   278ce:	b084      	sub	sp, #16
   278d0:	af00      	add	r7, sp, #0
   278d2:	6078      	str	r0, [r7, #4]
   278d4:	687b      	ldr	r3, [r7, #4]
   278d6:	681b      	ldr	r3, [r3, #0]
   278d8:	60fb      	str	r3, [r7, #12]
   278da:	687b      	ldr	r3, [r7, #4]
   278dc:	0018      	movs	r0, r3
   278de:	4b0d      	ldr	r3, [pc, #52]	; (27914 <rtc_calendar_reset+0x48>)
   278e0:	4798      	blx	r3
   278e2:	687b      	ldr	r3, [r7, #4]
   278e4:	2200      	movs	r2, #0
   278e6:	821a      	strh	r2, [r3, #16]
   278e8:	687b      	ldr	r3, [r7, #4]
   278ea:	2200      	movs	r2, #0
   278ec:	825a      	strh	r2, [r3, #18]
   278ee:	46c0      	nop			; (mov r8, r8)
   278f0:	687b      	ldr	r3, [r7, #4]
   278f2:	0018      	movs	r0, r3
   278f4:	4b08      	ldr	r3, [pc, #32]	; (27918 <rtc_calendar_reset+0x4c>)
   278f6:	4798      	blx	r3
   278f8:	1e03      	subs	r3, r0, #0
   278fa:	d1f9      	bne.n	278f0 <rtc_calendar_reset+0x24>
   278fc:	68fb      	ldr	r3, [r7, #12]
   278fe:	881b      	ldrh	r3, [r3, #0]
   27900:	b29b      	uxth	r3, r3
   27902:	2201      	movs	r2, #1
   27904:	4313      	orrs	r3, r2
   27906:	b29a      	uxth	r2, r3
   27908:	68fb      	ldr	r3, [r7, #12]
   2790a:	801a      	strh	r2, [r3, #0]
   2790c:	46c0      	nop			; (mov r8, r8)
   2790e:	46bd      	mov	sp, r7
   27910:	b004      	add	sp, #16
   27912:	bd80      	pop	{r7, pc}
   27914:	0002787d 	.word	0x0002787d
   27918:	00027811 	.word	0x00027811

0002791c <rtc_calendar_time_to_register_value>:
   2791c:	b580      	push	{r7, lr}
   2791e:	b084      	sub	sp, #16
   27920:	af00      	add	r7, sp, #0
   27922:	6078      	str	r0, [r7, #4]
   27924:	6039      	str	r1, [r7, #0]
   27926:	683b      	ldr	r3, [r7, #0]
   27928:	88db      	ldrh	r3, [r3, #6]
   2792a:	001a      	movs	r2, r3
   2792c:	687b      	ldr	r3, [r7, #4]
   2792e:	88db      	ldrh	r3, [r3, #6]
   27930:	1ad3      	subs	r3, r2, r3
   27932:	069b      	lsls	r3, r3, #26
   27934:	60fb      	str	r3, [r7, #12]
   27936:	683b      	ldr	r3, [r7, #0]
   27938:	795b      	ldrb	r3, [r3, #5]
   2793a:	059b      	lsls	r3, r3, #22
   2793c:	001a      	movs	r2, r3
   2793e:	68fb      	ldr	r3, [r7, #12]
   27940:	4313      	orrs	r3, r2
   27942:	60fb      	str	r3, [r7, #12]
   27944:	683b      	ldr	r3, [r7, #0]
   27946:	791b      	ldrb	r3, [r3, #4]
   27948:	045b      	lsls	r3, r3, #17
   2794a:	001a      	movs	r2, r3
   2794c:	68fb      	ldr	r3, [r7, #12]
   2794e:	4313      	orrs	r3, r2
   27950:	60fb      	str	r3, [r7, #12]
   27952:	683b      	ldr	r3, [r7, #0]
   27954:	789b      	ldrb	r3, [r3, #2]
   27956:	031b      	lsls	r3, r3, #12
   27958:	001a      	movs	r2, r3
   2795a:	68fb      	ldr	r3, [r7, #12]
   2795c:	4313      	orrs	r3, r2
   2795e:	60fb      	str	r3, [r7, #12]
   27960:	687b      	ldr	r3, [r7, #4]
   27962:	791b      	ldrb	r3, [r3, #4]
   27964:	2201      	movs	r2, #1
   27966:	4053      	eors	r3, r2
   27968:	b2db      	uxtb	r3, r3
   2796a:	2b00      	cmp	r3, #0
   2796c:	d008      	beq.n	27980 <rtc_calendar_time_to_register_value+0x64>
   2796e:	683b      	ldr	r3, [r7, #0]
   27970:	78db      	ldrb	r3, [r3, #3]
   27972:	2b00      	cmp	r3, #0
   27974:	d004      	beq.n	27980 <rtc_calendar_time_to_register_value+0x64>
   27976:	68fb      	ldr	r3, [r7, #12]
   27978:	2280      	movs	r2, #128	; 0x80
   2797a:	0252      	lsls	r2, r2, #9
   2797c:	4313      	orrs	r3, r2
   2797e:	60fb      	str	r3, [r7, #12]
   27980:	683b      	ldr	r3, [r7, #0]
   27982:	785b      	ldrb	r3, [r3, #1]
   27984:	019b      	lsls	r3, r3, #6
   27986:	001a      	movs	r2, r3
   27988:	68fb      	ldr	r3, [r7, #12]
   2798a:	4313      	orrs	r3, r2
   2798c:	60fb      	str	r3, [r7, #12]
   2798e:	683b      	ldr	r3, [r7, #0]
   27990:	781b      	ldrb	r3, [r3, #0]
   27992:	001a      	movs	r2, r3
   27994:	68fb      	ldr	r3, [r7, #12]
   27996:	4313      	orrs	r3, r2
   27998:	60fb      	str	r3, [r7, #12]
   2799a:	68fb      	ldr	r3, [r7, #12]
   2799c:	0018      	movs	r0, r3
   2799e:	46bd      	mov	sp, r7
   279a0:	b004      	add	sp, #16
   279a2:	bd80      	pop	{r7, pc}

000279a4 <rtc_calendar_register_value_to_time>:
   279a4:	b580      	push	{r7, lr}
   279a6:	b084      	sub	sp, #16
   279a8:	af00      	add	r7, sp, #0
   279aa:	60f8      	str	r0, [r7, #12]
   279ac:	60b9      	str	r1, [r7, #8]
   279ae:	607a      	str	r2, [r7, #4]
   279b0:	68bb      	ldr	r3, [r7, #8]
   279b2:	0e9b      	lsrs	r3, r3, #26
   279b4:	b29a      	uxth	r2, r3
   279b6:	68fb      	ldr	r3, [r7, #12]
   279b8:	88db      	ldrh	r3, [r3, #6]
   279ba:	18d3      	adds	r3, r2, r3
   279bc:	b29a      	uxth	r2, r3
   279be:	687b      	ldr	r3, [r7, #4]
   279c0:	80da      	strh	r2, [r3, #6]
   279c2:	68bb      	ldr	r3, [r7, #8]
   279c4:	0d9b      	lsrs	r3, r3, #22
   279c6:	b2db      	uxtb	r3, r3
   279c8:	220f      	movs	r2, #15
   279ca:	4013      	ands	r3, r2
   279cc:	b2da      	uxtb	r2, r3
   279ce:	687b      	ldr	r3, [r7, #4]
   279d0:	715a      	strb	r2, [r3, #5]
   279d2:	68bb      	ldr	r3, [r7, #8]
   279d4:	0c5b      	lsrs	r3, r3, #17
   279d6:	b2db      	uxtb	r3, r3
   279d8:	221f      	movs	r2, #31
   279da:	4013      	ands	r3, r2
   279dc:	b2da      	uxtb	r2, r3
   279de:	687b      	ldr	r3, [r7, #4]
   279e0:	711a      	strb	r2, [r3, #4]
   279e2:	68fb      	ldr	r3, [r7, #12]
   279e4:	791b      	ldrb	r3, [r3, #4]
   279e6:	2b00      	cmp	r3, #0
   279e8:	d008      	beq.n	279fc <rtc_calendar_register_value_to_time+0x58>
   279ea:	68bb      	ldr	r3, [r7, #8]
   279ec:	0b1b      	lsrs	r3, r3, #12
   279ee:	b2db      	uxtb	r3, r3
   279f0:	221f      	movs	r2, #31
   279f2:	4013      	ands	r3, r2
   279f4:	b2da      	uxtb	r2, r3
   279f6:	687b      	ldr	r3, [r7, #4]
   279f8:	709a      	strb	r2, [r3, #2]
   279fa:	e010      	b.n	27a1e <rtc_calendar_register_value_to_time+0x7a>
   279fc:	68bb      	ldr	r3, [r7, #8]
   279fe:	0b1b      	lsrs	r3, r3, #12
   27a00:	b2db      	uxtb	r3, r3
   27a02:	220f      	movs	r2, #15
   27a04:	4013      	ands	r3, r2
   27a06:	b2da      	uxtb	r2, r3
   27a08:	687b      	ldr	r3, [r7, #4]
   27a0a:	709a      	strb	r2, [r3, #2]
   27a0c:	68ba      	ldr	r2, [r7, #8]
   27a0e:	2380      	movs	r3, #128	; 0x80
   27a10:	025b      	lsls	r3, r3, #9
   27a12:	4013      	ands	r3, r2
   27a14:	1e5a      	subs	r2, r3, #1
   27a16:	4193      	sbcs	r3, r2
   27a18:	b2da      	uxtb	r2, r3
   27a1a:	687b      	ldr	r3, [r7, #4]
   27a1c:	70da      	strb	r2, [r3, #3]
   27a1e:	68bb      	ldr	r3, [r7, #8]
   27a20:	099b      	lsrs	r3, r3, #6
   27a22:	b2db      	uxtb	r3, r3
   27a24:	223f      	movs	r2, #63	; 0x3f
   27a26:	4013      	ands	r3, r2
   27a28:	b2da      	uxtb	r2, r3
   27a2a:	687b      	ldr	r3, [r7, #4]
   27a2c:	705a      	strb	r2, [r3, #1]
   27a2e:	68bb      	ldr	r3, [r7, #8]
   27a30:	b2db      	uxtb	r3, r3
   27a32:	223f      	movs	r2, #63	; 0x3f
   27a34:	4013      	ands	r3, r2
   27a36:	b2da      	uxtb	r2, r3
   27a38:	687b      	ldr	r3, [r7, #4]
   27a3a:	701a      	strb	r2, [r3, #0]
   27a3c:	46c0      	nop			; (mov r8, r8)
   27a3e:	46bd      	mov	sp, r7
   27a40:	b004      	add	sp, #16
   27a42:	bd80      	pop	{r7, pc}

00027a44 <_rtc_calendar_set_config>:
   27a44:	b580      	push	{r7, lr}
   27a46:	b084      	sub	sp, #16
   27a48:	af00      	add	r7, sp, #0
   27a4a:	6078      	str	r0, [r7, #4]
   27a4c:	6039      	str	r1, [r7, #0]
   27a4e:	687b      	ldr	r3, [r7, #4]
   27a50:	681b      	ldr	r3, [r3, #0]
   27a52:	60bb      	str	r3, [r7, #8]
   27a54:	683b      	ldr	r3, [r7, #0]
   27a56:	881a      	ldrh	r2, [r3, #0]
   27a58:	230e      	movs	r3, #14
   27a5a:	18fb      	adds	r3, r7, r3
   27a5c:	2108      	movs	r1, #8
   27a5e:	430a      	orrs	r2, r1
   27a60:	801a      	strh	r2, [r3, #0]
   27a62:	683b      	ldr	r3, [r7, #0]
   27a64:	791b      	ldrb	r3, [r3, #4]
   27a66:	2201      	movs	r2, #1
   27a68:	4053      	eors	r3, r2
   27a6a:	b2db      	uxtb	r3, r3
   27a6c:	2b00      	cmp	r3, #0
   27a6e:	d007      	beq.n	27a80 <_rtc_calendar_set_config+0x3c>
   27a70:	230e      	movs	r3, #14
   27a72:	18fb      	adds	r3, r7, r3
   27a74:	220e      	movs	r2, #14
   27a76:	18ba      	adds	r2, r7, r2
   27a78:	8812      	ldrh	r2, [r2, #0]
   27a7a:	2140      	movs	r1, #64	; 0x40
   27a7c:	430a      	orrs	r2, r1
   27a7e:	801a      	strh	r2, [r3, #0]
   27a80:	683b      	ldr	r3, [r7, #0]
   27a82:	789b      	ldrb	r3, [r3, #2]
   27a84:	2b00      	cmp	r3, #0
   27a86:	d007      	beq.n	27a98 <_rtc_calendar_set_config+0x54>
   27a88:	230e      	movs	r3, #14
   27a8a:	18fb      	adds	r3, r7, r3
   27a8c:	220e      	movs	r2, #14
   27a8e:	18ba      	adds	r2, r7, r2
   27a90:	8812      	ldrh	r2, [r2, #0]
   27a92:	2180      	movs	r1, #128	; 0x80
   27a94:	430a      	orrs	r2, r1
   27a96:	801a      	strh	r2, [r3, #0]
   27a98:	68bb      	ldr	r3, [r7, #8]
   27a9a:	220e      	movs	r2, #14
   27a9c:	18ba      	adds	r2, r7, r2
   27a9e:	8812      	ldrh	r2, [r2, #0]
   27aa0:	801a      	strh	r2, [r3, #0]
   27aa2:	683b      	ldr	r3, [r7, #0]
   27aa4:	78db      	ldrb	r3, [r3, #3]
   27aa6:	2b00      	cmp	r3, #0
   27aa8:	d008      	beq.n	27abc <_rtc_calendar_set_config+0x78>
   27aaa:	68bb      	ldr	r3, [r7, #8]
   27aac:	885b      	ldrh	r3, [r3, #2]
   27aae:	b29b      	uxth	r3, r3
   27ab0:	2280      	movs	r2, #128	; 0x80
   27ab2:	01d2      	lsls	r2, r2, #7
   27ab4:	4313      	orrs	r3, r2
   27ab6:	b29a      	uxth	r2, r3
   27ab8:	68bb      	ldr	r3, [r7, #8]
   27aba:	805a      	strh	r2, [r3, #2]
   27abc:	230d      	movs	r3, #13
   27abe:	18fb      	adds	r3, r7, r3
   27ac0:	2200      	movs	r2, #0
   27ac2:	701a      	strb	r2, [r3, #0]
   27ac4:	e017      	b.n	27af6 <_rtc_calendar_set_config+0xb2>
   27ac6:	230d      	movs	r3, #13
   27ac8:	18fb      	adds	r3, r7, r3
   27aca:	781a      	ldrb	r2, [r3, #0]
   27acc:	0013      	movs	r3, r2
   27ace:	009b      	lsls	r3, r3, #2
   27ad0:	189b      	adds	r3, r3, r2
   27ad2:	005b      	lsls	r3, r3, #1
   27ad4:	3308      	adds	r3, #8
   27ad6:	683a      	ldr	r2, [r7, #0]
   27ad8:	18d1      	adds	r1, r2, r3
   27ada:	230d      	movs	r3, #13
   27adc:	18fb      	adds	r3, r7, r3
   27ade:	781a      	ldrb	r2, [r3, #0]
   27ae0:	687b      	ldr	r3, [r7, #4]
   27ae2:	0018      	movs	r0, r3
   27ae4:	4b08      	ldr	r3, [pc, #32]	; (27b08 <_rtc_calendar_set_config+0xc4>)
   27ae6:	4798      	blx	r3
   27ae8:	230d      	movs	r3, #13
   27aea:	18fb      	adds	r3, r7, r3
   27aec:	781a      	ldrb	r2, [r3, #0]
   27aee:	230d      	movs	r3, #13
   27af0:	18fb      	adds	r3, r7, r3
   27af2:	3201      	adds	r2, #1
   27af4:	701a      	strb	r2, [r3, #0]
   27af6:	230d      	movs	r3, #13
   27af8:	18fb      	adds	r3, r7, r3
   27afa:	781b      	ldrb	r3, [r3, #0]
   27afc:	2b00      	cmp	r3, #0
   27afe:	d0e2      	beq.n	27ac6 <_rtc_calendar_set_config+0x82>
   27b00:	46c0      	nop			; (mov r8, r8)
   27b02:	46bd      	mov	sp, r7
   27b04:	b004      	add	sp, #16
   27b06:	bd80      	pop	{r7, pc}
   27b08:	00027c2d 	.word	0x00027c2d

00027b0c <rtc_calendar_init>:
   27b0c:	b580      	push	{r7, lr}
   27b0e:	b086      	sub	sp, #24
   27b10:	af00      	add	r7, sp, #0
   27b12:	60f8      	str	r0, [r7, #12]
   27b14:	60b9      	str	r1, [r7, #8]
   27b16:	607a      	str	r2, [r7, #4]
   27b18:	68fb      	ldr	r3, [r7, #12]
   27b1a:	68ba      	ldr	r2, [r7, #8]
   27b1c:	601a      	str	r2, [r3, #0]
   27b1e:	2120      	movs	r1, #32
   27b20:	2000      	movs	r0, #0
   27b22:	4b18      	ldr	r3, [pc, #96]	; (27b84 <rtc_calendar_init+0x78>)
   27b24:	4798      	blx	r3
   27b26:	2314      	movs	r3, #20
   27b28:	18fb      	adds	r3, r7, r3
   27b2a:	0018      	movs	r0, r3
   27b2c:	4b16      	ldr	r3, [pc, #88]	; (27b88 <rtc_calendar_init+0x7c>)
   27b2e:	4798      	blx	r3
   27b30:	2314      	movs	r3, #20
   27b32:	18fb      	adds	r3, r7, r3
   27b34:	2202      	movs	r2, #2
   27b36:	701a      	strb	r2, [r3, #0]
   27b38:	2314      	movs	r3, #20
   27b3a:	18fb      	adds	r3, r7, r3
   27b3c:	0019      	movs	r1, r3
   27b3e:	2004      	movs	r0, #4
   27b40:	4b12      	ldr	r3, [pc, #72]	; (27b8c <rtc_calendar_init+0x80>)
   27b42:	4798      	blx	r3
   27b44:	2004      	movs	r0, #4
   27b46:	4b12      	ldr	r3, [pc, #72]	; (27b90 <rtc_calendar_init+0x84>)
   27b48:	4798      	blx	r3
   27b4a:	68fb      	ldr	r3, [r7, #12]
   27b4c:	0018      	movs	r0, r3
   27b4e:	4b11      	ldr	r3, [pc, #68]	; (27b94 <rtc_calendar_init+0x88>)
   27b50:	4798      	blx	r3
   27b52:	687b      	ldr	r3, [r7, #4]
   27b54:	791a      	ldrb	r2, [r3, #4]
   27b56:	68fb      	ldr	r3, [r7, #12]
   27b58:	711a      	strb	r2, [r3, #4]
   27b5a:	687b      	ldr	r3, [r7, #4]
   27b5c:	78da      	ldrb	r2, [r3, #3]
   27b5e:	68fb      	ldr	r3, [r7, #12]
   27b60:	715a      	strb	r2, [r3, #5]
   27b62:	687b      	ldr	r3, [r7, #4]
   27b64:	88da      	ldrh	r2, [r3, #6]
   27b66:	68fb      	ldr	r3, [r7, #12]
   27b68:	80da      	strh	r2, [r3, #6]
   27b6a:	4b0b      	ldr	r3, [pc, #44]	; (27b98 <rtc_calendar_init+0x8c>)
   27b6c:	68fa      	ldr	r2, [r7, #12]
   27b6e:	601a      	str	r2, [r3, #0]
   27b70:	687a      	ldr	r2, [r7, #4]
   27b72:	68fb      	ldr	r3, [r7, #12]
   27b74:	0011      	movs	r1, r2
   27b76:	0018      	movs	r0, r3
   27b78:	4b08      	ldr	r3, [pc, #32]	; (27b9c <rtc_calendar_init+0x90>)
   27b7a:	4798      	blx	r3
   27b7c:	46c0      	nop			; (mov r8, r8)
   27b7e:	46bd      	mov	sp, r7
   27b80:	b006      	add	sp, #24
   27b82:	bd80      	pop	{r7, pc}
   27b84:	00027759 	.word	0x00027759
   27b88:	00027741 	.word	0x00027741
   27b8c:	0002ab71 	.word	0x0002ab71
   27b90:	0002abb5 	.word	0x0002abb5
   27b94:	000278cd 	.word	0x000278cd
   27b98:	20005844 	.word	0x20005844
   27b9c:	00027a45 	.word	0x00027a45

00027ba0 <rtc_calendar_get_time>:
   27ba0:	b580      	push	{r7, lr}
   27ba2:	b084      	sub	sp, #16
   27ba4:	af00      	add	r7, sp, #0
   27ba6:	6078      	str	r0, [r7, #4]
   27ba8:	6039      	str	r1, [r7, #0]
   27baa:	687b      	ldr	r3, [r7, #4]
   27bac:	681b      	ldr	r3, [r3, #0]
   27bae:	60fb      	str	r3, [r7, #12]
   27bb0:	687b      	ldr	r3, [r7, #4]
   27bb2:	795b      	ldrb	r3, [r3, #5]
   27bb4:	2201      	movs	r2, #1
   27bb6:	4053      	eors	r3, r2
   27bb8:	b2db      	uxtb	r3, r3
   27bba:	2b00      	cmp	r3, #0
   27bbc:	d00a      	beq.n	27bd4 <rtc_calendar_get_time+0x34>
   27bbe:	68fb      	ldr	r3, [r7, #12]
   27bc0:	4a16      	ldr	r2, [pc, #88]	; (27c1c <rtc_calendar_get_time+0x7c>)
   27bc2:	805a      	strh	r2, [r3, #2]
   27bc4:	46c0      	nop			; (mov r8, r8)
   27bc6:	687b      	ldr	r3, [r7, #4]
   27bc8:	0018      	movs	r0, r3
   27bca:	4b15      	ldr	r3, [pc, #84]	; (27c20 <rtc_calendar_get_time+0x80>)
   27bcc:	4798      	blx	r3
   27bce:	1e03      	subs	r3, r0, #0
   27bd0:	d1f9      	bne.n	27bc6 <rtc_calendar_get_time+0x26>
   27bd2:	e016      	b.n	27c02 <rtc_calendar_get_time+0x62>
   27bd4:	68fb      	ldr	r3, [r7, #12]
   27bd6:	885b      	ldrh	r3, [r3, #2]
   27bd8:	b29b      	uxth	r3, r3
   27bda:	001a      	movs	r2, r3
   27bdc:	2380      	movs	r3, #128	; 0x80
   27bde:	01db      	lsls	r3, r3, #7
   27be0:	4013      	ands	r3, r2
   27be2:	d10e      	bne.n	27c02 <rtc_calendar_get_time+0x62>
   27be4:	68fb      	ldr	r3, [r7, #12]
   27be6:	885b      	ldrh	r3, [r3, #2]
   27be8:	b29b      	uxth	r3, r3
   27bea:	4a0e      	ldr	r2, [pc, #56]	; (27c24 <rtc_calendar_get_time+0x84>)
   27bec:	4313      	orrs	r3, r2
   27bee:	b29a      	uxth	r2, r3
   27bf0:	68fb      	ldr	r3, [r7, #12]
   27bf2:	805a      	strh	r2, [r3, #2]
   27bf4:	46c0      	nop			; (mov r8, r8)
   27bf6:	687b      	ldr	r3, [r7, #4]
   27bf8:	0018      	movs	r0, r3
   27bfa:	4b09      	ldr	r3, [pc, #36]	; (27c20 <rtc_calendar_get_time+0x80>)
   27bfc:	4798      	blx	r3
   27bfe:	1e03      	subs	r3, r0, #0
   27c00:	d1f9      	bne.n	27bf6 <rtc_calendar_get_time+0x56>
   27c02:	68fb      	ldr	r3, [r7, #12]
   27c04:	691b      	ldr	r3, [r3, #16]
   27c06:	60bb      	str	r3, [r7, #8]
   27c08:	683a      	ldr	r2, [r7, #0]
   27c0a:	68b9      	ldr	r1, [r7, #8]
   27c0c:	687b      	ldr	r3, [r7, #4]
   27c0e:	0018      	movs	r0, r3
   27c10:	4b05      	ldr	r3, [pc, #20]	; (27c28 <rtc_calendar_get_time+0x88>)
   27c12:	4798      	blx	r3
   27c14:	46c0      	nop			; (mov r8, r8)
   27c16:	46bd      	mov	sp, r7
   27c18:	b004      	add	sp, #16
   27c1a:	bd80      	pop	{r7, pc}
   27c1c:	ffff8000 	.word	0xffff8000
   27c20:	00027811 	.word	0x00027811
   27c24:	ffffc000 	.word	0xffffc000
   27c28:	000279a5 	.word	0x000279a5

00027c2c <rtc_calendar_set_alarm>:
   27c2c:	b580      	push	{r7, lr}
   27c2e:	b086      	sub	sp, #24
   27c30:	af00      	add	r7, sp, #0
   27c32:	60f8      	str	r0, [r7, #12]
   27c34:	60b9      	str	r1, [r7, #8]
   27c36:	1dfb      	adds	r3, r7, #7
   27c38:	701a      	strb	r2, [r3, #0]
   27c3a:	68fb      	ldr	r3, [r7, #12]
   27c3c:	681b      	ldr	r3, [r3, #0]
   27c3e:	617b      	str	r3, [r7, #20]
   27c40:	1dfb      	adds	r3, r7, #7
   27c42:	781b      	ldrb	r3, [r3, #0]
   27c44:	2b01      	cmp	r3, #1
   27c46:	d901      	bls.n	27c4c <rtc_calendar_set_alarm+0x20>
   27c48:	2317      	movs	r3, #23
   27c4a:	e021      	b.n	27c90 <rtc_calendar_set_alarm+0x64>
   27c4c:	68ba      	ldr	r2, [r7, #8]
   27c4e:	68fb      	ldr	r3, [r7, #12]
   27c50:	0011      	movs	r1, r2
   27c52:	0018      	movs	r0, r3
   27c54:	4b10      	ldr	r3, [pc, #64]	; (27c98 <rtc_calendar_set_alarm+0x6c>)
   27c56:	4798      	blx	r3
   27c58:	0003      	movs	r3, r0
   27c5a:	613b      	str	r3, [r7, #16]
   27c5c:	46c0      	nop			; (mov r8, r8)
   27c5e:	68fb      	ldr	r3, [r7, #12]
   27c60:	0018      	movs	r0, r3
   27c62:	4b0e      	ldr	r3, [pc, #56]	; (27c9c <rtc_calendar_set_alarm+0x70>)
   27c64:	4798      	blx	r3
   27c66:	1e03      	subs	r3, r0, #0
   27c68:	d1f9      	bne.n	27c5e <rtc_calendar_set_alarm+0x32>
   27c6a:	1dfb      	adds	r3, r7, #7
   27c6c:	781a      	ldrb	r2, [r3, #0]
   27c6e:	697b      	ldr	r3, [r7, #20]
   27c70:	3203      	adds	r2, #3
   27c72:	00d2      	lsls	r2, r2, #3
   27c74:	6939      	ldr	r1, [r7, #16]
   27c76:	50d1      	str	r1, [r2, r3]
   27c78:	1dfb      	adds	r3, r7, #7
   27c7a:	781b      	ldrb	r3, [r3, #0]
   27c7c:	68ba      	ldr	r2, [r7, #8]
   27c7e:	7a11      	ldrb	r1, [r2, #8]
   27c80:	697a      	ldr	r2, [r7, #20]
   27c82:	3303      	adds	r3, #3
   27c84:	00db      	lsls	r3, r3, #3
   27c86:	18d3      	adds	r3, r2, r3
   27c88:	3304      	adds	r3, #4
   27c8a:	1c0a      	adds	r2, r1, #0
   27c8c:	701a      	strb	r2, [r3, #0]
   27c8e:	2300      	movs	r3, #0
   27c90:	0018      	movs	r0, r3
   27c92:	46bd      	mov	sp, r7
   27c94:	b006      	add	sp, #24
   27c96:	bd80      	pop	{r7, pc}
   27c98:	0002791d 	.word	0x0002791d
   27c9c:	00027811 	.word	0x00027811

00027ca0 <_rtc_interrupt_handler>:
   27ca0:	b580      	push	{r7, lr}
   27ca2:	b086      	sub	sp, #24
   27ca4:	af00      	add	r7, sp, #0
   27ca6:	6078      	str	r0, [r7, #4]
   27ca8:	4b28      	ldr	r3, [pc, #160]	; (27d4c <_rtc_interrupt_handler+0xac>)
   27caa:	687a      	ldr	r2, [r7, #4]
   27cac:	0092      	lsls	r2, r2, #2
   27cae:	58d3      	ldr	r3, [r2, r3]
   27cb0:	617b      	str	r3, [r7, #20]
   27cb2:	697b      	ldr	r3, [r7, #20]
   27cb4:	681b      	ldr	r3, [r3, #0]
   27cb6:	613b      	str	r3, [r7, #16]
   27cb8:	230e      	movs	r3, #14
   27cba:	18fb      	adds	r3, r7, r3
   27cbc:	697a      	ldr	r2, [r7, #20]
   27cbe:	8a52      	ldrh	r2, [r2, #18]
   27cc0:	801a      	strh	r2, [r3, #0]
   27cc2:	697b      	ldr	r3, [r7, #20]
   27cc4:	8a1b      	ldrh	r3, [r3, #16]
   27cc6:	b29a      	uxth	r2, r3
   27cc8:	230e      	movs	r3, #14
   27cca:	18fb      	adds	r3, r7, r3
   27ccc:	210e      	movs	r1, #14
   27cce:	1879      	adds	r1, r7, r1
   27cd0:	8809      	ldrh	r1, [r1, #0]
   27cd2:	400a      	ands	r2, r1
   27cd4:	801a      	strh	r2, [r3, #0]
   27cd6:	693b      	ldr	r3, [r7, #16]
   27cd8:	7a1b      	ldrb	r3, [r3, #8]
   27cda:	b2da      	uxtb	r2, r3
   27cdc:	230c      	movs	r3, #12
   27cde:	18fb      	adds	r3, r7, r3
   27ce0:	801a      	strh	r2, [r3, #0]
   27ce2:	693b      	ldr	r3, [r7, #16]
   27ce4:	79db      	ldrb	r3, [r3, #7]
   27ce6:	b2db      	uxtb	r3, r3
   27ce8:	b29a      	uxth	r2, r3
   27cea:	230c      	movs	r3, #12
   27cec:	18fb      	adds	r3, r7, r3
   27cee:	210c      	movs	r1, #12
   27cf0:	1879      	adds	r1, r7, r1
   27cf2:	8809      	ldrh	r1, [r1, #0]
   27cf4:	400a      	ands	r2, r1
   27cf6:	801a      	strh	r2, [r3, #0]
   27cf8:	230c      	movs	r3, #12
   27cfa:	18fb      	adds	r3, r7, r3
   27cfc:	881b      	ldrh	r3, [r3, #0]
   27cfe:	2280      	movs	r2, #128	; 0x80
   27d00:	4013      	ands	r3, r2
   27d02:	d00c      	beq.n	27d1e <_rtc_interrupt_handler+0x7e>
   27d04:	230e      	movs	r3, #14
   27d06:	18fb      	adds	r3, r7, r3
   27d08:	881b      	ldrh	r3, [r3, #0]
   27d0a:	2202      	movs	r2, #2
   27d0c:	4013      	ands	r3, r2
   27d0e:	d002      	beq.n	27d16 <_rtc_interrupt_handler+0x76>
   27d10:	697b      	ldr	r3, [r7, #20]
   27d12:	68db      	ldr	r3, [r3, #12]
   27d14:	4798      	blx	r3
   27d16:	693b      	ldr	r3, [r7, #16]
   27d18:	2280      	movs	r2, #128	; 0x80
   27d1a:	721a      	strb	r2, [r3, #8]
   27d1c:	e011      	b.n	27d42 <_rtc_interrupt_handler+0xa2>
   27d1e:	230c      	movs	r3, #12
   27d20:	18fb      	adds	r3, r7, r3
   27d22:	881b      	ldrh	r3, [r3, #0]
   27d24:	2201      	movs	r2, #1
   27d26:	4013      	ands	r3, r2
   27d28:	d00b      	beq.n	27d42 <_rtc_interrupt_handler+0xa2>
   27d2a:	230e      	movs	r3, #14
   27d2c:	18fb      	adds	r3, r7, r3
   27d2e:	881b      	ldrh	r3, [r3, #0]
   27d30:	2201      	movs	r2, #1
   27d32:	4013      	ands	r3, r2
   27d34:	d002      	beq.n	27d3c <_rtc_interrupt_handler+0x9c>
   27d36:	697b      	ldr	r3, [r7, #20]
   27d38:	689b      	ldr	r3, [r3, #8]
   27d3a:	4798      	blx	r3
   27d3c:	693b      	ldr	r3, [r7, #16]
   27d3e:	2201      	movs	r2, #1
   27d40:	721a      	strb	r2, [r3, #8]
   27d42:	46c0      	nop			; (mov r8, r8)
   27d44:	46bd      	mov	sp, r7
   27d46:	b006      	add	sp, #24
   27d48:	bd80      	pop	{r7, pc}
   27d4a:	46c0      	nop			; (mov r8, r8)
   27d4c:	20005844 	.word	0x20005844

00027d50 <RTC_Handler>:
   27d50:	b580      	push	{r7, lr}
   27d52:	af00      	add	r7, sp, #0
   27d54:	2000      	movs	r0, #0
   27d56:	4b02      	ldr	r3, [pc, #8]	; (27d60 <RTC_Handler+0x10>)
   27d58:	4798      	blx	r3
   27d5a:	46c0      	nop			; (mov r8, r8)
   27d5c:	46bd      	mov	sp, r7
   27d5e:	bd80      	pop	{r7, pc}
   27d60:	00027ca1 	.word	0x00027ca1

00027d64 <system_gclk_chan_get_config_defaults>:
   27d64:	b580      	push	{r7, lr}
   27d66:	b082      	sub	sp, #8
   27d68:	af00      	add	r7, sp, #0
   27d6a:	6078      	str	r0, [r7, #4]
   27d6c:	687b      	ldr	r3, [r7, #4]
   27d6e:	2200      	movs	r2, #0
   27d70:	701a      	strb	r2, [r3, #0]
   27d72:	46c0      	nop			; (mov r8, r8)
   27d74:	46bd      	mov	sp, r7
   27d76:	b002      	add	sp, #8
   27d78:	bd80      	pop	{r7, pc}

00027d7a <long_division>:
   27d7a:	b5f0      	push	{r4, r5, r6, r7, lr}
   27d7c:	b08d      	sub	sp, #52	; 0x34
   27d7e:	af00      	add	r7, sp, #0
   27d80:	60b8      	str	r0, [r7, #8]
   27d82:	60f9      	str	r1, [r7, #12]
   27d84:	603a      	str	r2, [r7, #0]
   27d86:	607b      	str	r3, [r7, #4]
   27d88:	2300      	movs	r3, #0
   27d8a:	2400      	movs	r4, #0
   27d8c:	623b      	str	r3, [r7, #32]
   27d8e:	627c      	str	r4, [r7, #36]	; 0x24
   27d90:	2300      	movs	r3, #0
   27d92:	2400      	movs	r4, #0
   27d94:	61bb      	str	r3, [r7, #24]
   27d96:	61fc      	str	r4, [r7, #28]
   27d98:	233f      	movs	r3, #63	; 0x3f
   27d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
   27d9c:	e053      	b.n	27e46 <long_division+0xcc>
   27d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27da0:	3b20      	subs	r3, #32
   27da2:	2b00      	cmp	r3, #0
   27da4:	db04      	blt.n	27db0 <long_division+0x36>
   27da6:	2201      	movs	r2, #1
   27da8:	409a      	lsls	r2, r3
   27daa:	0013      	movs	r3, r2
   27dac:	617b      	str	r3, [r7, #20]
   27dae:	e00b      	b.n	27dc8 <long_division+0x4e>
   27db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27db2:	2220      	movs	r2, #32
   27db4:	1ad3      	subs	r3, r2, r3
   27db6:	2201      	movs	r2, #1
   27db8:	40da      	lsrs	r2, r3
   27dba:	0013      	movs	r3, r2
   27dbc:	2100      	movs	r1, #0
   27dbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   27dc0:	4091      	lsls	r1, r2
   27dc2:	000a      	movs	r2, r1
   27dc4:	4313      	orrs	r3, r2
   27dc6:	617b      	str	r3, [r7, #20]
   27dc8:	2201      	movs	r2, #1
   27dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27dcc:	409a      	lsls	r2, r3
   27dce:	0013      	movs	r3, r2
   27dd0:	613b      	str	r3, [r7, #16]
   27dd2:	69bb      	ldr	r3, [r7, #24]
   27dd4:	69fc      	ldr	r4, [r7, #28]
   27dd6:	18db      	adds	r3, r3, r3
   27dd8:	4164      	adcs	r4, r4
   27dda:	61bb      	str	r3, [r7, #24]
   27ddc:	61fc      	str	r4, [r7, #28]
   27dde:	68bb      	ldr	r3, [r7, #8]
   27de0:	693a      	ldr	r2, [r7, #16]
   27de2:	401a      	ands	r2, r3
   27de4:	0015      	movs	r5, r2
   27de6:	68fb      	ldr	r3, [r7, #12]
   27de8:	697a      	ldr	r2, [r7, #20]
   27dea:	401a      	ands	r2, r3
   27dec:	0016      	movs	r6, r2
   27dee:	002b      	movs	r3, r5
   27df0:	4333      	orrs	r3, r6
   27df2:	d007      	beq.n	27e04 <long_division+0x8a>
   27df4:	69bb      	ldr	r3, [r7, #24]
   27df6:	2201      	movs	r2, #1
   27df8:	4313      	orrs	r3, r2
   27dfa:	61bb      	str	r3, [r7, #24]
   27dfc:	69fb      	ldr	r3, [r7, #28]
   27dfe:	2200      	movs	r2, #0
   27e00:	4313      	orrs	r3, r2
   27e02:	61fb      	str	r3, [r7, #28]
   27e04:	687a      	ldr	r2, [r7, #4]
   27e06:	69fb      	ldr	r3, [r7, #28]
   27e08:	429a      	cmp	r2, r3
   27e0a:	d819      	bhi.n	27e40 <long_division+0xc6>
   27e0c:	687a      	ldr	r2, [r7, #4]
   27e0e:	69fb      	ldr	r3, [r7, #28]
   27e10:	429a      	cmp	r2, r3
   27e12:	d103      	bne.n	27e1c <long_division+0xa2>
   27e14:	683a      	ldr	r2, [r7, #0]
   27e16:	69bb      	ldr	r3, [r7, #24]
   27e18:	429a      	cmp	r2, r3
   27e1a:	d811      	bhi.n	27e40 <long_division+0xc6>
   27e1c:	69b9      	ldr	r1, [r7, #24]
   27e1e:	69fa      	ldr	r2, [r7, #28]
   27e20:	683b      	ldr	r3, [r7, #0]
   27e22:	687c      	ldr	r4, [r7, #4]
   27e24:	1ac9      	subs	r1, r1, r3
   27e26:	41a2      	sbcs	r2, r4
   27e28:	000b      	movs	r3, r1
   27e2a:	0014      	movs	r4, r2
   27e2c:	61bb      	str	r3, [r7, #24]
   27e2e:	61fc      	str	r4, [r7, #28]
   27e30:	6a3a      	ldr	r2, [r7, #32]
   27e32:	693b      	ldr	r3, [r7, #16]
   27e34:	4313      	orrs	r3, r2
   27e36:	623b      	str	r3, [r7, #32]
   27e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   27e3a:	697b      	ldr	r3, [r7, #20]
   27e3c:	4313      	orrs	r3, r2
   27e3e:	627b      	str	r3, [r7, #36]	; 0x24
   27e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27e42:	3b01      	subs	r3, #1
   27e44:	62fb      	str	r3, [r7, #44]	; 0x2c
   27e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27e48:	2b00      	cmp	r3, #0
   27e4a:	daa8      	bge.n	27d9e <long_division+0x24>
   27e4c:	6a3b      	ldr	r3, [r7, #32]
   27e4e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   27e50:	0018      	movs	r0, r3
   27e52:	0021      	movs	r1, r4
   27e54:	46bd      	mov	sp, r7
   27e56:	b00d      	add	sp, #52	; 0x34
   27e58:	bdf0      	pop	{r4, r5, r6, r7, pc}

00027e5a <_sercom_get_sync_baud_val>:
   27e5a:	b580      	push	{r7, lr}
   27e5c:	b086      	sub	sp, #24
   27e5e:	af00      	add	r7, sp, #0
   27e60:	60f8      	str	r0, [r7, #12]
   27e62:	60b9      	str	r1, [r7, #8]
   27e64:	607a      	str	r2, [r7, #4]
   27e66:	2316      	movs	r3, #22
   27e68:	18fb      	adds	r3, r7, r3
   27e6a:	2200      	movs	r2, #0
   27e6c:	801a      	strh	r2, [r3, #0]
   27e6e:	68bb      	ldr	r3, [r7, #8]
   27e70:	613b      	str	r3, [r7, #16]
   27e72:	68bb      	ldr	r3, [r7, #8]
   27e74:	085a      	lsrs	r2, r3, #1
   27e76:	68fb      	ldr	r3, [r7, #12]
   27e78:	429a      	cmp	r2, r3
   27e7a:	d201      	bcs.n	27e80 <_sercom_get_sync_baud_val+0x26>
   27e7c:	2340      	movs	r3, #64	; 0x40
   27e7e:	e026      	b.n	27ece <_sercom_get_sync_baud_val+0x74>
   27e80:	68bb      	ldr	r3, [r7, #8]
   27e82:	085b      	lsrs	r3, r3, #1
   27e84:	613b      	str	r3, [r7, #16]
   27e86:	e00a      	b.n	27e9e <_sercom_get_sync_baud_val+0x44>
   27e88:	693a      	ldr	r2, [r7, #16]
   27e8a:	68fb      	ldr	r3, [r7, #12]
   27e8c:	1ad3      	subs	r3, r2, r3
   27e8e:	613b      	str	r3, [r7, #16]
   27e90:	2316      	movs	r3, #22
   27e92:	18fb      	adds	r3, r7, r3
   27e94:	881a      	ldrh	r2, [r3, #0]
   27e96:	2316      	movs	r3, #22
   27e98:	18fb      	adds	r3, r7, r3
   27e9a:	3201      	adds	r2, #1
   27e9c:	801a      	strh	r2, [r3, #0]
   27e9e:	693a      	ldr	r2, [r7, #16]
   27ea0:	68fb      	ldr	r3, [r7, #12]
   27ea2:	429a      	cmp	r2, r3
   27ea4:	d2f0      	bcs.n	27e88 <_sercom_get_sync_baud_val+0x2e>
   27ea6:	2316      	movs	r3, #22
   27ea8:	18fb      	adds	r3, r7, r3
   27eaa:	2216      	movs	r2, #22
   27eac:	18ba      	adds	r2, r7, r2
   27eae:	8812      	ldrh	r2, [r2, #0]
   27eb0:	3a01      	subs	r2, #1
   27eb2:	801a      	strh	r2, [r3, #0]
   27eb4:	2316      	movs	r3, #22
   27eb6:	18fb      	adds	r3, r7, r3
   27eb8:	881b      	ldrh	r3, [r3, #0]
   27eba:	2bff      	cmp	r3, #255	; 0xff
   27ebc:	d901      	bls.n	27ec2 <_sercom_get_sync_baud_val+0x68>
   27ebe:	2340      	movs	r3, #64	; 0x40
   27ec0:	e005      	b.n	27ece <_sercom_get_sync_baud_val+0x74>
   27ec2:	687b      	ldr	r3, [r7, #4]
   27ec4:	2216      	movs	r2, #22
   27ec6:	18ba      	adds	r2, r7, r2
   27ec8:	8812      	ldrh	r2, [r2, #0]
   27eca:	801a      	strh	r2, [r3, #0]
   27ecc:	2300      	movs	r3, #0
   27ece:	0018      	movs	r0, r3
   27ed0:	46bd      	mov	sp, r7
   27ed2:	b006      	add	sp, #24
   27ed4:	bd80      	pop	{r7, pc}
	...

00027ed8 <_sercom_get_async_baud_val>:
   27ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
   27eda:	b0a1      	sub	sp, #132	; 0x84
   27edc:	af00      	add	r7, sp, #0
   27ede:	64f8      	str	r0, [r7, #76]	; 0x4c
   27ee0:	64b9      	str	r1, [r7, #72]	; 0x48
   27ee2:	647a      	str	r2, [r7, #68]	; 0x44
   27ee4:	2243      	movs	r2, #67	; 0x43
   27ee6:	18ba      	adds	r2, r7, r2
   27ee8:	7013      	strb	r3, [r2, #0]
   27eea:	2300      	movs	r3, #0
   27eec:	2400      	movs	r4, #0
   27eee:	673b      	str	r3, [r7, #112]	; 0x70
   27ef0:	677c      	str	r4, [r7, #116]	; 0x74
   27ef2:	2300      	movs	r3, #0
   27ef4:	2400      	movs	r4, #0
   27ef6:	66bb      	str	r3, [r7, #104]	; 0x68
   27ef8:	66fc      	str	r4, [r7, #108]	; 0x6c
   27efa:	2300      	movs	r3, #0
   27efc:	2400      	movs	r4, #0
   27efe:	67bb      	str	r3, [r7, #120]	; 0x78
   27f00:	67fc      	str	r4, [r7, #124]	; 0x7c
   27f02:	2300      	movs	r3, #0
   27f04:	667b      	str	r3, [r7, #100]	; 0x64
   27f06:	2358      	movs	r3, #88	; 0x58
   27f08:	2240      	movs	r2, #64	; 0x40
   27f0a:	4694      	mov	ip, r2
   27f0c:	44bc      	add	ip, r7
   27f0e:	4463      	add	r3, ip
   27f10:	781a      	ldrb	r2, [r3, #0]
   27f12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   27f14:	435a      	muls	r2, r3
   27f16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   27f18:	429a      	cmp	r2, r3
   27f1a:	d901      	bls.n	27f20 <_sercom_get_async_baud_val+0x48>
   27f1c:	2340      	movs	r3, #64	; 0x40
   27f1e:	e0b3      	b.n	28088 <_sercom_get_async_baud_val+0x1b0>
   27f20:	2343      	movs	r3, #67	; 0x43
   27f22:	18fb      	adds	r3, r7, r3
   27f24:	781b      	ldrb	r3, [r3, #0]
   27f26:	2b00      	cmp	r3, #0
   27f28:	d13d      	bne.n	27fa6 <_sercom_get_async_baud_val+0xce>
   27f2a:	2358      	movs	r3, #88	; 0x58
   27f2c:	2240      	movs	r2, #64	; 0x40
   27f2e:	4694      	mov	ip, r2
   27f30:	44bc      	add	ip, r7
   27f32:	4463      	add	r3, ip
   27f34:	781b      	ldrb	r3, [r3, #0]
   27f36:	b2db      	uxtb	r3, r3
   27f38:	613b      	str	r3, [r7, #16]
   27f3a:	2300      	movs	r3, #0
   27f3c:	617b      	str	r3, [r7, #20]
   27f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   27f40:	60bb      	str	r3, [r7, #8]
   27f42:	2300      	movs	r3, #0
   27f44:	60fb      	str	r3, [r7, #12]
   27f46:	4c52      	ldr	r4, [pc, #328]	; (28090 <_sercom_get_async_baud_val+0x1b8>)
   27f48:	68ba      	ldr	r2, [r7, #8]
   27f4a:	68fb      	ldr	r3, [r7, #12]
   27f4c:	6938      	ldr	r0, [r7, #16]
   27f4e:	6979      	ldr	r1, [r7, #20]
   27f50:	47a0      	blx	r4
   27f52:	0003      	movs	r3, r0
   27f54:	000c      	movs	r4, r1
   27f56:	001b      	movs	r3, r3
   27f58:	65fb      	str	r3, [r7, #92]	; 0x5c
   27f5a:	2300      	movs	r3, #0
   27f5c:	65bb      	str	r3, [r7, #88]	; 0x58
   27f5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   27f60:	603b      	str	r3, [r7, #0]
   27f62:	2300      	movs	r3, #0
   27f64:	607b      	str	r3, [r7, #4]
   27f66:	6db8      	ldr	r0, [r7, #88]	; 0x58
   27f68:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   27f6a:	683a      	ldr	r2, [r7, #0]
   27f6c:	687b      	ldr	r3, [r7, #4]
   27f6e:	4c49      	ldr	r4, [pc, #292]	; (28094 <_sercom_get_async_baud_val+0x1bc>)
   27f70:	47a0      	blx	r4
   27f72:	0003      	movs	r3, r0
   27f74:	000c      	movs	r4, r1
   27f76:	673b      	str	r3, [r7, #112]	; 0x70
   27f78:	677c      	str	r4, [r7, #116]	; 0x74
   27f7a:	2100      	movs	r1, #0
   27f7c:	2201      	movs	r2, #1
   27f7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   27f80:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   27f82:	1ac9      	subs	r1, r1, r3
   27f84:	41a2      	sbcs	r2, r4
   27f86:	000b      	movs	r3, r1
   27f88:	0014      	movs	r4, r2
   27f8a:	66bb      	str	r3, [r7, #104]	; 0x68
   27f8c:	66fc      	str	r4, [r7, #108]	; 0x6c
   27f8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   27f90:	0c1b      	lsrs	r3, r3, #16
   27f92:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   27f94:	0416      	lsls	r6, r2, #16
   27f96:	431e      	orrs	r6, r3
   27f98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   27f9a:	041d      	lsls	r5, r3, #16
   27f9c:	0033      	movs	r3, r6
   27f9e:	67bb      	str	r3, [r7, #120]	; 0x78
   27fa0:	2300      	movs	r3, #0
   27fa2:	67fb      	str	r3, [r7, #124]	; 0x7c
   27fa4:	e06a      	b.n	2807c <_sercom_get_async_baud_val+0x1a4>
   27fa6:	2343      	movs	r3, #67	; 0x43
   27fa8:	18fb      	adds	r3, r7, r3
   27faa:	781b      	ldrb	r3, [r3, #0]
   27fac:	2b01      	cmp	r3, #1
   27fae:	d165      	bne.n	2807c <_sercom_get_async_baud_val+0x1a4>
   27fb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   27fb2:	633b      	str	r3, [r7, #48]	; 0x30
   27fb4:	2300      	movs	r3, #0
   27fb6:	637b      	str	r3, [r7, #52]	; 0x34
   27fb8:	2358      	movs	r3, #88	; 0x58
   27fba:	2240      	movs	r2, #64	; 0x40
   27fbc:	4694      	mov	ip, r2
   27fbe:	44bc      	add	ip, r7
   27fc0:	4463      	add	r3, ip
   27fc2:	781b      	ldrb	r3, [r3, #0]
   27fc4:	b2db      	uxtb	r3, r3
   27fc6:	62bb      	str	r3, [r7, #40]	; 0x28
   27fc8:	2300      	movs	r3, #0
   27fca:	62fb      	str	r3, [r7, #44]	; 0x2c
   27fcc:	4c30      	ldr	r4, [pc, #192]	; (28090 <_sercom_get_async_baud_val+0x1b8>)
   27fce:	6aba      	ldr	r2, [r7, #40]	; 0x28
   27fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27fd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
   27fd4:	6b79      	ldr	r1, [r7, #52]	; 0x34
   27fd6:	47a0      	blx	r4
   27fd8:	0003      	movs	r3, r0
   27fda:	000c      	movs	r4, r1
   27fdc:	65bb      	str	r3, [r7, #88]	; 0x58
   27fde:	65fc      	str	r4, [r7, #92]	; 0x5c
   27fe0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   27fe2:	623b      	str	r3, [r7, #32]
   27fe4:	2300      	movs	r3, #0
   27fe6:	627b      	str	r3, [r7, #36]	; 0x24
   27fe8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   27fea:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   27fec:	001a      	movs	r2, r3
   27fee:	0023      	movs	r3, r4
   27ff0:	6a38      	ldr	r0, [r7, #32]
   27ff2:	6a79      	ldr	r1, [r7, #36]	; 0x24
   27ff4:	4c27      	ldr	r4, [pc, #156]	; (28094 <_sercom_get_async_baud_val+0x1bc>)
   27ff6:	47a0      	blx	r4
   27ff8:	0003      	movs	r3, r0
   27ffa:	000c      	movs	r4, r1
   27ffc:	667b      	str	r3, [r7, #100]	; 0x64
   27ffe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   28000:	2380      	movs	r3, #128	; 0x80
   28002:	019b      	lsls	r3, r3, #6
   28004:	429a      	cmp	r2, r3
   28006:	d901      	bls.n	2800c <_sercom_get_async_baud_val+0x134>
   28008:	2340      	movs	r3, #64	; 0x40
   2800a:	e03d      	b.n	28088 <_sercom_get_async_baud_val+0x1b0>
   2800c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2800e:	61bb      	str	r3, [r7, #24]
   28010:	2300      	movs	r3, #0
   28012:	61fb      	str	r3, [r7, #28]
   28014:	69b9      	ldr	r1, [r7, #24]
   28016:	69fa      	ldr	r2, [r7, #28]
   28018:	000b      	movs	r3, r1
   2801a:	0f5b      	lsrs	r3, r3, #29
   2801c:	0010      	movs	r0, r2
   2801e:	00c0      	lsls	r0, r0, #3
   28020:	63f8      	str	r0, [r7, #60]	; 0x3c
   28022:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   28024:	4318      	orrs	r0, r3
   28026:	63f8      	str	r0, [r7, #60]	; 0x3c
   28028:	000b      	movs	r3, r1
   2802a:	00db      	lsls	r3, r3, #3
   2802c:	63bb      	str	r3, [r7, #56]	; 0x38
   2802e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   28030:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   28032:	001a      	movs	r2, r3
   28034:	0023      	movs	r3, r4
   28036:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   28038:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   2803a:	4c16      	ldr	r4, [pc, #88]	; (28094 <_sercom_get_async_baud_val+0x1bc>)
   2803c:	47a0      	blx	r4
   2803e:	0003      	movs	r3, r0
   28040:	000c      	movs	r4, r1
   28042:	65bb      	str	r3, [r7, #88]	; 0x58
   28044:	65fc      	str	r4, [r7, #92]	; 0x5c
   28046:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   28048:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   2804a:	b2d9      	uxtb	r1, r3
   2804c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2804e:	b2db      	uxtb	r3, r3
   28050:	00db      	lsls	r3, r3, #3
   28052:	b2da      	uxtb	r2, r3
   28054:	2317      	movs	r3, #23
   28056:	2040      	movs	r0, #64	; 0x40
   28058:	4684      	mov	ip, r0
   2805a:	44bc      	add	ip, r7
   2805c:	4463      	add	r3, ip
   2805e:	1a8a      	subs	r2, r1, r2
   28060:	701a      	strb	r2, [r3, #0]
   28062:	2317      	movs	r3, #23
   28064:	2240      	movs	r2, #64	; 0x40
   28066:	4694      	mov	ip, r2
   28068:	44bc      	add	ip, r7
   2806a:	4463      	add	r3, ip
   2806c:	781b      	ldrb	r3, [r3, #0]
   2806e:	035b      	lsls	r3, r3, #13
   28070:	001a      	movs	r2, r3
   28072:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   28074:	4313      	orrs	r3, r2
   28076:	67bb      	str	r3, [r7, #120]	; 0x78
   28078:	2300      	movs	r3, #0
   2807a:	67fb      	str	r3, [r7, #124]	; 0x7c
   2807c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   2807e:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   28080:	b29a      	uxth	r2, r3
   28082:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   28084:	801a      	strh	r2, [r3, #0]
   28086:	2300      	movs	r3, #0
   28088:	0018      	movs	r0, r3
   2808a:	46bd      	mov	sp, r7
   2808c:	b021      	add	sp, #132	; 0x84
   2808e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28090:	00033a19 	.word	0x00033a19
   28094:	00027d7b 	.word	0x00027d7b

00028098 <sercom_set_gclk_generator>:
   28098:	b580      	push	{r7, lr}
   2809a:	b084      	sub	sp, #16
   2809c:	af00      	add	r7, sp, #0
   2809e:	0002      	movs	r2, r0
   280a0:	1dfb      	adds	r3, r7, #7
   280a2:	701a      	strb	r2, [r3, #0]
   280a4:	1dbb      	adds	r3, r7, #6
   280a6:	1c0a      	adds	r2, r1, #0
   280a8:	701a      	strb	r2, [r3, #0]
   280aa:	4b1a      	ldr	r3, [pc, #104]	; (28114 <sercom_set_gclk_generator+0x7c>)
   280ac:	781b      	ldrb	r3, [r3, #0]
   280ae:	2201      	movs	r2, #1
   280b0:	4053      	eors	r3, r2
   280b2:	b2db      	uxtb	r3, r3
   280b4:	2b00      	cmp	r3, #0
   280b6:	d103      	bne.n	280c0 <sercom_set_gclk_generator+0x28>
   280b8:	1dbb      	adds	r3, r7, #6
   280ba:	781b      	ldrb	r3, [r3, #0]
   280bc:	2b00      	cmp	r3, #0
   280be:	d01b      	beq.n	280f8 <sercom_set_gclk_generator+0x60>
   280c0:	230c      	movs	r3, #12
   280c2:	18fb      	adds	r3, r7, r3
   280c4:	0018      	movs	r0, r3
   280c6:	4b14      	ldr	r3, [pc, #80]	; (28118 <sercom_set_gclk_generator+0x80>)
   280c8:	4798      	blx	r3
   280ca:	230c      	movs	r3, #12
   280cc:	18fb      	adds	r3, r7, r3
   280ce:	1dfa      	adds	r2, r7, #7
   280d0:	7812      	ldrb	r2, [r2, #0]
   280d2:	701a      	strb	r2, [r3, #0]
   280d4:	230c      	movs	r3, #12
   280d6:	18fb      	adds	r3, r7, r3
   280d8:	0019      	movs	r1, r3
   280da:	2013      	movs	r0, #19
   280dc:	4b0f      	ldr	r3, [pc, #60]	; (2811c <sercom_set_gclk_generator+0x84>)
   280de:	4798      	blx	r3
   280e0:	2013      	movs	r0, #19
   280e2:	4b0f      	ldr	r3, [pc, #60]	; (28120 <sercom_set_gclk_generator+0x88>)
   280e4:	4798      	blx	r3
   280e6:	4b0b      	ldr	r3, [pc, #44]	; (28114 <sercom_set_gclk_generator+0x7c>)
   280e8:	1dfa      	adds	r2, r7, #7
   280ea:	7812      	ldrb	r2, [r2, #0]
   280ec:	705a      	strb	r2, [r3, #1]
   280ee:	4b09      	ldr	r3, [pc, #36]	; (28114 <sercom_set_gclk_generator+0x7c>)
   280f0:	2201      	movs	r2, #1
   280f2:	701a      	strb	r2, [r3, #0]
   280f4:	2300      	movs	r3, #0
   280f6:	e008      	b.n	2810a <sercom_set_gclk_generator+0x72>
   280f8:	4b06      	ldr	r3, [pc, #24]	; (28114 <sercom_set_gclk_generator+0x7c>)
   280fa:	785b      	ldrb	r3, [r3, #1]
   280fc:	1dfa      	adds	r2, r7, #7
   280fe:	7812      	ldrb	r2, [r2, #0]
   28100:	429a      	cmp	r2, r3
   28102:	d101      	bne.n	28108 <sercom_set_gclk_generator+0x70>
   28104:	2300      	movs	r3, #0
   28106:	e000      	b.n	2810a <sercom_set_gclk_generator+0x72>
   28108:	231d      	movs	r3, #29
   2810a:	0018      	movs	r0, r3
   2810c:	46bd      	mov	sp, r7
   2810e:	b004      	add	sp, #16
   28110:	bd80      	pop	{r7, pc}
   28112:	46c0      	nop			; (mov r8, r8)
   28114:	20003efc 	.word	0x20003efc
   28118:	00027d65 	.word	0x00027d65
   2811c:	0002ab71 	.word	0x0002ab71
   28120:	0002abb5 	.word	0x0002abb5

00028124 <_sercom_get_default_pad>:
   28124:	b580      	push	{r7, lr}
   28126:	b082      	sub	sp, #8
   28128:	af00      	add	r7, sp, #0
   2812a:	6078      	str	r0, [r7, #4]
   2812c:	000a      	movs	r2, r1
   2812e:	1cfb      	adds	r3, r7, #3
   28130:	701a      	strb	r2, [r3, #0]
   28132:	687b      	ldr	r3, [r7, #4]
   28134:	4a4d      	ldr	r2, [pc, #308]	; (2826c <_sercom_get_default_pad+0x148>)
   28136:	4293      	cmp	r3, r2
   28138:	d03f      	beq.n	281ba <_sercom_get_default_pad+0x96>
   2813a:	4a4c      	ldr	r2, [pc, #304]	; (2826c <_sercom_get_default_pad+0x148>)
   2813c:	4293      	cmp	r3, r2
   2813e:	d806      	bhi.n	2814e <_sercom_get_default_pad+0x2a>
   28140:	4a4b      	ldr	r2, [pc, #300]	; (28270 <_sercom_get_default_pad+0x14c>)
   28142:	4293      	cmp	r3, r2
   28144:	d00f      	beq.n	28166 <_sercom_get_default_pad+0x42>
   28146:	4a4b      	ldr	r2, [pc, #300]	; (28274 <_sercom_get_default_pad+0x150>)
   28148:	4293      	cmp	r3, r2
   2814a:	d021      	beq.n	28190 <_sercom_get_default_pad+0x6c>
   2814c:	e089      	b.n	28262 <_sercom_get_default_pad+0x13e>
   2814e:	4a4a      	ldr	r2, [pc, #296]	; (28278 <_sercom_get_default_pad+0x154>)
   28150:	4293      	cmp	r3, r2
   28152:	d100      	bne.n	28156 <_sercom_get_default_pad+0x32>
   28154:	e05b      	b.n	2820e <_sercom_get_default_pad+0xea>
   28156:	4a49      	ldr	r2, [pc, #292]	; (2827c <_sercom_get_default_pad+0x158>)
   28158:	4293      	cmp	r3, r2
   2815a:	d100      	bne.n	2815e <_sercom_get_default_pad+0x3a>
   2815c:	e06c      	b.n	28238 <_sercom_get_default_pad+0x114>
   2815e:	4a48      	ldr	r2, [pc, #288]	; (28280 <_sercom_get_default_pad+0x15c>)
   28160:	4293      	cmp	r3, r2
   28162:	d03f      	beq.n	281e4 <_sercom_get_default_pad+0xc0>
   28164:	e07d      	b.n	28262 <_sercom_get_default_pad+0x13e>
   28166:	1cfb      	adds	r3, r7, #3
   28168:	781b      	ldrb	r3, [r3, #0]
   2816a:	2b01      	cmp	r3, #1
   2816c:	d00a      	beq.n	28184 <_sercom_get_default_pad+0x60>
   2816e:	dc02      	bgt.n	28176 <_sercom_get_default_pad+0x52>
   28170:	2b00      	cmp	r3, #0
   28172:	d005      	beq.n	28180 <_sercom_get_default_pad+0x5c>
   28174:	e075      	b.n	28262 <_sercom_get_default_pad+0x13e>
   28176:	2b02      	cmp	r3, #2
   28178:	d006      	beq.n	28188 <_sercom_get_default_pad+0x64>
   2817a:	2b03      	cmp	r3, #3
   2817c:	d006      	beq.n	2818c <_sercom_get_default_pad+0x68>
   2817e:	e070      	b.n	28262 <_sercom_get_default_pad+0x13e>
   28180:	4b40      	ldr	r3, [pc, #256]	; (28284 <_sercom_get_default_pad+0x160>)
   28182:	e06f      	b.n	28264 <_sercom_get_default_pad+0x140>
   28184:	4b40      	ldr	r3, [pc, #256]	; (28288 <_sercom_get_default_pad+0x164>)
   28186:	e06d      	b.n	28264 <_sercom_get_default_pad+0x140>
   28188:	4b40      	ldr	r3, [pc, #256]	; (2828c <_sercom_get_default_pad+0x168>)
   2818a:	e06b      	b.n	28264 <_sercom_get_default_pad+0x140>
   2818c:	4b40      	ldr	r3, [pc, #256]	; (28290 <_sercom_get_default_pad+0x16c>)
   2818e:	e069      	b.n	28264 <_sercom_get_default_pad+0x140>
   28190:	1cfb      	adds	r3, r7, #3
   28192:	781b      	ldrb	r3, [r3, #0]
   28194:	2b01      	cmp	r3, #1
   28196:	d00a      	beq.n	281ae <_sercom_get_default_pad+0x8a>
   28198:	dc02      	bgt.n	281a0 <_sercom_get_default_pad+0x7c>
   2819a:	2b00      	cmp	r3, #0
   2819c:	d005      	beq.n	281aa <_sercom_get_default_pad+0x86>
   2819e:	e060      	b.n	28262 <_sercom_get_default_pad+0x13e>
   281a0:	2b02      	cmp	r3, #2
   281a2:	d006      	beq.n	281b2 <_sercom_get_default_pad+0x8e>
   281a4:	2b03      	cmp	r3, #3
   281a6:	d006      	beq.n	281b6 <_sercom_get_default_pad+0x92>
   281a8:	e05b      	b.n	28262 <_sercom_get_default_pad+0x13e>
   281aa:	2303      	movs	r3, #3
   281ac:	e05a      	b.n	28264 <_sercom_get_default_pad+0x140>
   281ae:	4b39      	ldr	r3, [pc, #228]	; (28294 <_sercom_get_default_pad+0x170>)
   281b0:	e058      	b.n	28264 <_sercom_get_default_pad+0x140>
   281b2:	4b39      	ldr	r3, [pc, #228]	; (28298 <_sercom_get_default_pad+0x174>)
   281b4:	e056      	b.n	28264 <_sercom_get_default_pad+0x140>
   281b6:	4b39      	ldr	r3, [pc, #228]	; (2829c <_sercom_get_default_pad+0x178>)
   281b8:	e054      	b.n	28264 <_sercom_get_default_pad+0x140>
   281ba:	1cfb      	adds	r3, r7, #3
   281bc:	781b      	ldrb	r3, [r3, #0]
   281be:	2b01      	cmp	r3, #1
   281c0:	d00a      	beq.n	281d8 <_sercom_get_default_pad+0xb4>
   281c2:	dc02      	bgt.n	281ca <_sercom_get_default_pad+0xa6>
   281c4:	2b00      	cmp	r3, #0
   281c6:	d005      	beq.n	281d4 <_sercom_get_default_pad+0xb0>
   281c8:	e04b      	b.n	28262 <_sercom_get_default_pad+0x13e>
   281ca:	2b02      	cmp	r3, #2
   281cc:	d006      	beq.n	281dc <_sercom_get_default_pad+0xb8>
   281ce:	2b03      	cmp	r3, #3
   281d0:	d006      	beq.n	281e0 <_sercom_get_default_pad+0xbc>
   281d2:	e046      	b.n	28262 <_sercom_get_default_pad+0x13e>
   281d4:	4b32      	ldr	r3, [pc, #200]	; (282a0 <_sercom_get_default_pad+0x17c>)
   281d6:	e045      	b.n	28264 <_sercom_get_default_pad+0x140>
   281d8:	4b32      	ldr	r3, [pc, #200]	; (282a4 <_sercom_get_default_pad+0x180>)
   281da:	e043      	b.n	28264 <_sercom_get_default_pad+0x140>
   281dc:	4b32      	ldr	r3, [pc, #200]	; (282a8 <_sercom_get_default_pad+0x184>)
   281de:	e041      	b.n	28264 <_sercom_get_default_pad+0x140>
   281e0:	4b32      	ldr	r3, [pc, #200]	; (282ac <_sercom_get_default_pad+0x188>)
   281e2:	e03f      	b.n	28264 <_sercom_get_default_pad+0x140>
   281e4:	1cfb      	adds	r3, r7, #3
   281e6:	781b      	ldrb	r3, [r3, #0]
   281e8:	2b01      	cmp	r3, #1
   281ea:	d00a      	beq.n	28202 <_sercom_get_default_pad+0xde>
   281ec:	dc02      	bgt.n	281f4 <_sercom_get_default_pad+0xd0>
   281ee:	2b00      	cmp	r3, #0
   281f0:	d005      	beq.n	281fe <_sercom_get_default_pad+0xda>
   281f2:	e036      	b.n	28262 <_sercom_get_default_pad+0x13e>
   281f4:	2b02      	cmp	r3, #2
   281f6:	d006      	beq.n	28206 <_sercom_get_default_pad+0xe2>
   281f8:	2b03      	cmp	r3, #3
   281fa:	d006      	beq.n	2820a <_sercom_get_default_pad+0xe6>
   281fc:	e031      	b.n	28262 <_sercom_get_default_pad+0x13e>
   281fe:	4b2c      	ldr	r3, [pc, #176]	; (282b0 <_sercom_get_default_pad+0x18c>)
   28200:	e030      	b.n	28264 <_sercom_get_default_pad+0x140>
   28202:	4b2c      	ldr	r3, [pc, #176]	; (282b4 <_sercom_get_default_pad+0x190>)
   28204:	e02e      	b.n	28264 <_sercom_get_default_pad+0x140>
   28206:	4b2c      	ldr	r3, [pc, #176]	; (282b8 <_sercom_get_default_pad+0x194>)
   28208:	e02c      	b.n	28264 <_sercom_get_default_pad+0x140>
   2820a:	4b2c      	ldr	r3, [pc, #176]	; (282bc <_sercom_get_default_pad+0x198>)
   2820c:	e02a      	b.n	28264 <_sercom_get_default_pad+0x140>
   2820e:	1cfb      	adds	r3, r7, #3
   28210:	781b      	ldrb	r3, [r3, #0]
   28212:	2b01      	cmp	r3, #1
   28214:	d00a      	beq.n	2822c <_sercom_get_default_pad+0x108>
   28216:	dc02      	bgt.n	2821e <_sercom_get_default_pad+0xfa>
   28218:	2b00      	cmp	r3, #0
   2821a:	d005      	beq.n	28228 <_sercom_get_default_pad+0x104>
   2821c:	e021      	b.n	28262 <_sercom_get_default_pad+0x13e>
   2821e:	2b02      	cmp	r3, #2
   28220:	d006      	beq.n	28230 <_sercom_get_default_pad+0x10c>
   28222:	2b03      	cmp	r3, #3
   28224:	d006      	beq.n	28234 <_sercom_get_default_pad+0x110>
   28226:	e01c      	b.n	28262 <_sercom_get_default_pad+0x13e>
   28228:	4b25      	ldr	r3, [pc, #148]	; (282c0 <_sercom_get_default_pad+0x19c>)
   2822a:	e01b      	b.n	28264 <_sercom_get_default_pad+0x140>
   2822c:	4b25      	ldr	r3, [pc, #148]	; (282c4 <_sercom_get_default_pad+0x1a0>)
   2822e:	e019      	b.n	28264 <_sercom_get_default_pad+0x140>
   28230:	4b25      	ldr	r3, [pc, #148]	; (282c8 <_sercom_get_default_pad+0x1a4>)
   28232:	e017      	b.n	28264 <_sercom_get_default_pad+0x140>
   28234:	4b25      	ldr	r3, [pc, #148]	; (282cc <_sercom_get_default_pad+0x1a8>)
   28236:	e015      	b.n	28264 <_sercom_get_default_pad+0x140>
   28238:	1cfb      	adds	r3, r7, #3
   2823a:	781b      	ldrb	r3, [r3, #0]
   2823c:	2b01      	cmp	r3, #1
   2823e:	d00a      	beq.n	28256 <_sercom_get_default_pad+0x132>
   28240:	dc02      	bgt.n	28248 <_sercom_get_default_pad+0x124>
   28242:	2b00      	cmp	r3, #0
   28244:	d005      	beq.n	28252 <_sercom_get_default_pad+0x12e>
   28246:	e00c      	b.n	28262 <_sercom_get_default_pad+0x13e>
   28248:	2b02      	cmp	r3, #2
   2824a:	d006      	beq.n	2825a <_sercom_get_default_pad+0x136>
   2824c:	2b03      	cmp	r3, #3
   2824e:	d006      	beq.n	2825e <_sercom_get_default_pad+0x13a>
   28250:	e007      	b.n	28262 <_sercom_get_default_pad+0x13e>
   28252:	4b1f      	ldr	r3, [pc, #124]	; (282d0 <_sercom_get_default_pad+0x1ac>)
   28254:	e006      	b.n	28264 <_sercom_get_default_pad+0x140>
   28256:	4b1f      	ldr	r3, [pc, #124]	; (282d4 <_sercom_get_default_pad+0x1b0>)
   28258:	e004      	b.n	28264 <_sercom_get_default_pad+0x140>
   2825a:	4b1f      	ldr	r3, [pc, #124]	; (282d8 <_sercom_get_default_pad+0x1b4>)
   2825c:	e002      	b.n	28264 <_sercom_get_default_pad+0x140>
   2825e:	4b1f      	ldr	r3, [pc, #124]	; (282dc <_sercom_get_default_pad+0x1b8>)
   28260:	e000      	b.n	28264 <_sercom_get_default_pad+0x140>
   28262:	2300      	movs	r3, #0
   28264:	0018      	movs	r0, r3
   28266:	46bd      	mov	sp, r7
   28268:	b002      	add	sp, #8
   2826a:	bd80      	pop	{r7, pc}
   2826c:	42001000 	.word	0x42001000
   28270:	42000800 	.word	0x42000800
   28274:	42000c00 	.word	0x42000c00
   28278:	42001800 	.word	0x42001800
   2827c:	42001c00 	.word	0x42001c00
   28280:	42001400 	.word	0x42001400
   28284:	00040003 	.word	0x00040003
   28288:	00050003 	.word	0x00050003
   2828c:	00060003 	.word	0x00060003
   28290:	00070003 	.word	0x00070003
   28294:	00010003 	.word	0x00010003
   28298:	001e0003 	.word	0x001e0003
   2829c:	001f0003 	.word	0x001f0003
   282a0:	00080003 	.word	0x00080003
   282a4:	00090003 	.word	0x00090003
   282a8:	000a0003 	.word	0x000a0003
   282ac:	000b0003 	.word	0x000b0003
   282b0:	00100003 	.word	0x00100003
   282b4:	00110003 	.word	0x00110003
   282b8:	00120003 	.word	0x00120003
   282bc:	00130003 	.word	0x00130003
   282c0:	000c0003 	.word	0x000c0003
   282c4:	000d0003 	.word	0x000d0003
   282c8:	000e0003 	.word	0x000e0003
   282cc:	000f0003 	.word	0x000f0003
   282d0:	00160003 	.word	0x00160003
   282d4:	00170003 	.word	0x00170003
   282d8:	00180003 	.word	0x00180003
   282dc:	00190003 	.word	0x00190003

000282e0 <_sercom_get_sercom_inst_index>:
   282e0:	b590      	push	{r4, r7, lr}
   282e2:	b08b      	sub	sp, #44	; 0x2c
   282e4:	af00      	add	r7, sp, #0
   282e6:	6078      	str	r0, [r7, #4]
   282e8:	230c      	movs	r3, #12
   282ea:	18fb      	adds	r3, r7, r3
   282ec:	4a0f      	ldr	r2, [pc, #60]	; (2832c <_sercom_get_sercom_inst_index+0x4c>)
   282ee:	ca13      	ldmia	r2!, {r0, r1, r4}
   282f0:	c313      	stmia	r3!, {r0, r1, r4}
   282f2:	ca13      	ldmia	r2!, {r0, r1, r4}
   282f4:	c313      	stmia	r3!, {r0, r1, r4}
   282f6:	2300      	movs	r3, #0
   282f8:	627b      	str	r3, [r7, #36]	; 0x24
   282fa:	e00e      	b.n	2831a <_sercom_get_sercom_inst_index+0x3a>
   282fc:	230c      	movs	r3, #12
   282fe:	18fb      	adds	r3, r7, r3
   28300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   28302:	0092      	lsls	r2, r2, #2
   28304:	58d3      	ldr	r3, [r2, r3]
   28306:	001a      	movs	r2, r3
   28308:	687b      	ldr	r3, [r7, #4]
   2830a:	429a      	cmp	r2, r3
   2830c:	d102      	bne.n	28314 <_sercom_get_sercom_inst_index+0x34>
   2830e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   28310:	b2db      	uxtb	r3, r3
   28312:	e006      	b.n	28322 <_sercom_get_sercom_inst_index+0x42>
   28314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   28316:	3301      	adds	r3, #1
   28318:	627b      	str	r3, [r7, #36]	; 0x24
   2831a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2831c:	2b05      	cmp	r3, #5
   2831e:	d9ed      	bls.n	282fc <_sercom_get_sercom_inst_index+0x1c>
   28320:	2300      	movs	r3, #0
   28322:	0018      	movs	r0, r3
   28324:	46bd      	mov	sp, r7
   28326:	b00b      	add	sp, #44	; 0x2c
   28328:	bd90      	pop	{r4, r7, pc}
   2832a:	46c0      	nop			; (mov r8, r8)
   2832c:	0003a254 	.word	0x0003a254

00028330 <_sercom_default_handler>:
   28330:	b580      	push	{r7, lr}
   28332:	b082      	sub	sp, #8
   28334:	af00      	add	r7, sp, #0
   28336:	0002      	movs	r2, r0
   28338:	1dfb      	adds	r3, r7, #7
   2833a:	701a      	strb	r2, [r3, #0]
   2833c:	46c0      	nop			; (mov r8, r8)
   2833e:	46bd      	mov	sp, r7
   28340:	b002      	add	sp, #8
   28342:	bd80      	pop	{r7, pc}

00028344 <_sercom_set_handler>:
   28344:	b580      	push	{r7, lr}
   28346:	b084      	sub	sp, #16
   28348:	af00      	add	r7, sp, #0
   2834a:	0002      	movs	r2, r0
   2834c:	6039      	str	r1, [r7, #0]
   2834e:	1dfb      	adds	r3, r7, #7
   28350:	701a      	strb	r2, [r3, #0]
   28352:	4b13      	ldr	r3, [pc, #76]	; (283a0 <_sercom_set_handler+0x5c>)
   28354:	781b      	ldrb	r3, [r3, #0]
   28356:	2201      	movs	r2, #1
   28358:	4053      	eors	r3, r2
   2835a:	b2db      	uxtb	r3, r3
   2835c:	2b00      	cmp	r3, #0
   2835e:	d015      	beq.n	2838c <_sercom_set_handler+0x48>
   28360:	2300      	movs	r3, #0
   28362:	60fb      	str	r3, [r7, #12]
   28364:	e00c      	b.n	28380 <_sercom_set_handler+0x3c>
   28366:	4b0f      	ldr	r3, [pc, #60]	; (283a4 <_sercom_set_handler+0x60>)
   28368:	68fa      	ldr	r2, [r7, #12]
   2836a:	0092      	lsls	r2, r2, #2
   2836c:	490e      	ldr	r1, [pc, #56]	; (283a8 <_sercom_set_handler+0x64>)
   2836e:	50d1      	str	r1, [r2, r3]
   28370:	4b0e      	ldr	r3, [pc, #56]	; (283ac <_sercom_set_handler+0x68>)
   28372:	68fa      	ldr	r2, [r7, #12]
   28374:	0092      	lsls	r2, r2, #2
   28376:	2100      	movs	r1, #0
   28378:	50d1      	str	r1, [r2, r3]
   2837a:	68fb      	ldr	r3, [r7, #12]
   2837c:	3301      	adds	r3, #1
   2837e:	60fb      	str	r3, [r7, #12]
   28380:	68fb      	ldr	r3, [r7, #12]
   28382:	2b05      	cmp	r3, #5
   28384:	d9ef      	bls.n	28366 <_sercom_set_handler+0x22>
   28386:	4b06      	ldr	r3, [pc, #24]	; (283a0 <_sercom_set_handler+0x5c>)
   28388:	2201      	movs	r2, #1
   2838a:	701a      	strb	r2, [r3, #0]
   2838c:	1dfb      	adds	r3, r7, #7
   2838e:	781a      	ldrb	r2, [r3, #0]
   28390:	4b04      	ldr	r3, [pc, #16]	; (283a4 <_sercom_set_handler+0x60>)
   28392:	0092      	lsls	r2, r2, #2
   28394:	6839      	ldr	r1, [r7, #0]
   28396:	50d1      	str	r1, [r2, r3]
   28398:	46c0      	nop			; (mov r8, r8)
   2839a:	46bd      	mov	sp, r7
   2839c:	b004      	add	sp, #16
   2839e:	bd80      	pop	{r7, pc}
   283a0:	20003efe 	.word	0x20003efe
   283a4:	20003f00 	.word	0x20003f00
   283a8:	00028331 	.word	0x00028331
   283ac:	20005848 	.word	0x20005848

000283b0 <_sercom_get_interrupt_vector>:
   283b0:	b590      	push	{r4, r7, lr}
   283b2:	b085      	sub	sp, #20
   283b4:	af00      	add	r7, sp, #0
   283b6:	6078      	str	r0, [r7, #4]
   283b8:	2308      	movs	r3, #8
   283ba:	18fb      	adds	r3, r7, r3
   283bc:	4a0b      	ldr	r2, [pc, #44]	; (283ec <_sercom_get_interrupt_vector+0x3c>)
   283be:	6811      	ldr	r1, [r2, #0]
   283c0:	6019      	str	r1, [r3, #0]
   283c2:	8892      	ldrh	r2, [r2, #4]
   283c4:	809a      	strh	r2, [r3, #4]
   283c6:	230f      	movs	r3, #15
   283c8:	18fc      	adds	r4, r7, r3
   283ca:	687b      	ldr	r3, [r7, #4]
   283cc:	0018      	movs	r0, r3
   283ce:	4b08      	ldr	r3, [pc, #32]	; (283f0 <_sercom_get_interrupt_vector+0x40>)
   283d0:	4798      	blx	r3
   283d2:	0003      	movs	r3, r0
   283d4:	7023      	strb	r3, [r4, #0]
   283d6:	230f      	movs	r3, #15
   283d8:	18fb      	adds	r3, r7, r3
   283da:	781b      	ldrb	r3, [r3, #0]
   283dc:	2208      	movs	r2, #8
   283de:	18ba      	adds	r2, r7, r2
   283e0:	5cd3      	ldrb	r3, [r2, r3]
   283e2:	b25b      	sxtb	r3, r3
   283e4:	0018      	movs	r0, r3
   283e6:	46bd      	mov	sp, r7
   283e8:	b005      	add	sp, #20
   283ea:	bd90      	pop	{r4, r7, pc}
   283ec:	0003a26c 	.word	0x0003a26c
   283f0:	000282e1 	.word	0x000282e1

000283f4 <SERCOM0_Handler>:
   283f4:	b580      	push	{r7, lr}
   283f6:	af00      	add	r7, sp, #0
   283f8:	4b03      	ldr	r3, [pc, #12]	; (28408 <SERCOM0_Handler+0x14>)
   283fa:	681b      	ldr	r3, [r3, #0]
   283fc:	2000      	movs	r0, #0
   283fe:	4798      	blx	r3
   28400:	46c0      	nop			; (mov r8, r8)
   28402:	46bd      	mov	sp, r7
   28404:	bd80      	pop	{r7, pc}
   28406:	46c0      	nop			; (mov r8, r8)
   28408:	20003f00 	.word	0x20003f00

0002840c <SERCOM1_Handler>:
   2840c:	b580      	push	{r7, lr}
   2840e:	af00      	add	r7, sp, #0
   28410:	4b03      	ldr	r3, [pc, #12]	; (28420 <SERCOM1_Handler+0x14>)
   28412:	685b      	ldr	r3, [r3, #4]
   28414:	2001      	movs	r0, #1
   28416:	4798      	blx	r3
   28418:	46c0      	nop			; (mov r8, r8)
   2841a:	46bd      	mov	sp, r7
   2841c:	bd80      	pop	{r7, pc}
   2841e:	46c0      	nop			; (mov r8, r8)
   28420:	20003f00 	.word	0x20003f00

00028424 <SERCOM2_Handler>:
   28424:	b580      	push	{r7, lr}
   28426:	af00      	add	r7, sp, #0
   28428:	4b03      	ldr	r3, [pc, #12]	; (28438 <SERCOM2_Handler+0x14>)
   2842a:	689b      	ldr	r3, [r3, #8]
   2842c:	2002      	movs	r0, #2
   2842e:	4798      	blx	r3
   28430:	46c0      	nop			; (mov r8, r8)
   28432:	46bd      	mov	sp, r7
   28434:	bd80      	pop	{r7, pc}
   28436:	46c0      	nop			; (mov r8, r8)
   28438:	20003f00 	.word	0x20003f00

0002843c <SERCOM3_Handler>:
   2843c:	b580      	push	{r7, lr}
   2843e:	af00      	add	r7, sp, #0
   28440:	4b03      	ldr	r3, [pc, #12]	; (28450 <SERCOM3_Handler+0x14>)
   28442:	68db      	ldr	r3, [r3, #12]
   28444:	2003      	movs	r0, #3
   28446:	4798      	blx	r3
   28448:	46c0      	nop			; (mov r8, r8)
   2844a:	46bd      	mov	sp, r7
   2844c:	bd80      	pop	{r7, pc}
   2844e:	46c0      	nop			; (mov r8, r8)
   28450:	20003f00 	.word	0x20003f00

00028454 <SERCOM4_Handler>:
   28454:	b580      	push	{r7, lr}
   28456:	af00      	add	r7, sp, #0
   28458:	4b03      	ldr	r3, [pc, #12]	; (28468 <SERCOM4_Handler+0x14>)
   2845a:	691b      	ldr	r3, [r3, #16]
   2845c:	2004      	movs	r0, #4
   2845e:	4798      	blx	r3
   28460:	46c0      	nop			; (mov r8, r8)
   28462:	46bd      	mov	sp, r7
   28464:	bd80      	pop	{r7, pc}
   28466:	46c0      	nop			; (mov r8, r8)
   28468:	20003f00 	.word	0x20003f00

0002846c <SERCOM5_Handler>:
   2846c:	b580      	push	{r7, lr}
   2846e:	af00      	add	r7, sp, #0
   28470:	4b03      	ldr	r3, [pc, #12]	; (28480 <SERCOM5_Handler+0x14>)
   28472:	695b      	ldr	r3, [r3, #20]
   28474:	2005      	movs	r0, #5
   28476:	4798      	blx	r3
   28478:	46c0      	nop			; (mov r8, r8)
   2847a:	46bd      	mov	sp, r7
   2847c:	bd80      	pop	{r7, pc}
   2847e:	46c0      	nop			; (mov r8, r8)
   28480:	20003f00 	.word	0x20003f00

00028484 <system_pinmux_get_config_defaults>:
   28484:	b580      	push	{r7, lr}
   28486:	b082      	sub	sp, #8
   28488:	af00      	add	r7, sp, #0
   2848a:	6078      	str	r0, [r7, #4]
   2848c:	687b      	ldr	r3, [r7, #4]
   2848e:	2280      	movs	r2, #128	; 0x80
   28490:	701a      	strb	r2, [r3, #0]
   28492:	687b      	ldr	r3, [r7, #4]
   28494:	2200      	movs	r2, #0
   28496:	705a      	strb	r2, [r3, #1]
   28498:	687b      	ldr	r3, [r7, #4]
   2849a:	2201      	movs	r2, #1
   2849c:	709a      	strb	r2, [r3, #2]
   2849e:	687b      	ldr	r3, [r7, #4]
   284a0:	2200      	movs	r2, #0
   284a2:	70da      	strb	r2, [r3, #3]
   284a4:	46c0      	nop			; (mov r8, r8)
   284a6:	46bd      	mov	sp, r7
   284a8:	b002      	add	sp, #8
   284aa:	bd80      	pop	{r7, pc}

000284ac <system_pinmux_get_group_from_gpio_pin>:
   284ac:	b580      	push	{r7, lr}
   284ae:	b084      	sub	sp, #16
   284b0:	af00      	add	r7, sp, #0
   284b2:	0002      	movs	r2, r0
   284b4:	1dfb      	adds	r3, r7, #7
   284b6:	701a      	strb	r2, [r3, #0]
   284b8:	230f      	movs	r3, #15
   284ba:	18fb      	adds	r3, r7, r3
   284bc:	1dfa      	adds	r2, r7, #7
   284be:	7812      	ldrb	r2, [r2, #0]
   284c0:	09d2      	lsrs	r2, r2, #7
   284c2:	701a      	strb	r2, [r3, #0]
   284c4:	230e      	movs	r3, #14
   284c6:	18fb      	adds	r3, r7, r3
   284c8:	1dfa      	adds	r2, r7, #7
   284ca:	7812      	ldrb	r2, [r2, #0]
   284cc:	0952      	lsrs	r2, r2, #5
   284ce:	701a      	strb	r2, [r3, #0]
   284d0:	4b0d      	ldr	r3, [pc, #52]	; (28508 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   284d2:	60bb      	str	r3, [r7, #8]
   284d4:	230f      	movs	r3, #15
   284d6:	18fb      	adds	r3, r7, r3
   284d8:	781b      	ldrb	r3, [r3, #0]
   284da:	2b00      	cmp	r3, #0
   284dc:	d10f      	bne.n	284fe <system_pinmux_get_group_from_gpio_pin+0x52>
   284de:	230f      	movs	r3, #15
   284e0:	18fb      	adds	r3, r7, r3
   284e2:	781b      	ldrb	r3, [r3, #0]
   284e4:	009b      	lsls	r3, r3, #2
   284e6:	2210      	movs	r2, #16
   284e8:	4694      	mov	ip, r2
   284ea:	44bc      	add	ip, r7
   284ec:	4463      	add	r3, ip
   284ee:	3b08      	subs	r3, #8
   284f0:	681a      	ldr	r2, [r3, #0]
   284f2:	230e      	movs	r3, #14
   284f4:	18fb      	adds	r3, r7, r3
   284f6:	781b      	ldrb	r3, [r3, #0]
   284f8:	01db      	lsls	r3, r3, #7
   284fa:	18d3      	adds	r3, r2, r3
   284fc:	e000      	b.n	28500 <system_pinmux_get_group_from_gpio_pin+0x54>
   284fe:	2300      	movs	r3, #0
   28500:	0018      	movs	r0, r3
   28502:	46bd      	mov	sp, r7
   28504:	b004      	add	sp, #16
   28506:	bd80      	pop	{r7, pc}
   28508:	41004400 	.word	0x41004400

0002850c <port_get_group_from_gpio_pin>:
   2850c:	b580      	push	{r7, lr}
   2850e:	b082      	sub	sp, #8
   28510:	af00      	add	r7, sp, #0
   28512:	0002      	movs	r2, r0
   28514:	1dfb      	adds	r3, r7, #7
   28516:	701a      	strb	r2, [r3, #0]
   28518:	1dfb      	adds	r3, r7, #7
   2851a:	781b      	ldrb	r3, [r3, #0]
   2851c:	0018      	movs	r0, r3
   2851e:	4b03      	ldr	r3, [pc, #12]	; (2852c <port_get_group_from_gpio_pin+0x20>)
   28520:	4798      	blx	r3
   28522:	0003      	movs	r3, r0
   28524:	0018      	movs	r0, r3
   28526:	46bd      	mov	sp, r7
   28528:	b002      	add	sp, #8
   2852a:	bd80      	pop	{r7, pc}
   2852c:	000284ad 	.word	0x000284ad

00028530 <port_pin_set_output_level>:
   28530:	b580      	push	{r7, lr}
   28532:	b084      	sub	sp, #16
   28534:	af00      	add	r7, sp, #0
   28536:	0002      	movs	r2, r0
   28538:	1dfb      	adds	r3, r7, #7
   2853a:	701a      	strb	r2, [r3, #0]
   2853c:	1dbb      	adds	r3, r7, #6
   2853e:	1c0a      	adds	r2, r1, #0
   28540:	701a      	strb	r2, [r3, #0]
   28542:	1dfb      	adds	r3, r7, #7
   28544:	781b      	ldrb	r3, [r3, #0]
   28546:	0018      	movs	r0, r3
   28548:	4b0d      	ldr	r3, [pc, #52]	; (28580 <port_pin_set_output_level+0x50>)
   2854a:	4798      	blx	r3
   2854c:	0003      	movs	r3, r0
   2854e:	60fb      	str	r3, [r7, #12]
   28550:	1dfb      	adds	r3, r7, #7
   28552:	781b      	ldrb	r3, [r3, #0]
   28554:	221f      	movs	r2, #31
   28556:	4013      	ands	r3, r2
   28558:	2201      	movs	r2, #1
   2855a:	409a      	lsls	r2, r3
   2855c:	0013      	movs	r3, r2
   2855e:	60bb      	str	r3, [r7, #8]
   28560:	1dbb      	adds	r3, r7, #6
   28562:	781b      	ldrb	r3, [r3, #0]
   28564:	2b00      	cmp	r3, #0
   28566:	d003      	beq.n	28570 <port_pin_set_output_level+0x40>
   28568:	68fb      	ldr	r3, [r7, #12]
   2856a:	68ba      	ldr	r2, [r7, #8]
   2856c:	619a      	str	r2, [r3, #24]
   2856e:	e002      	b.n	28576 <port_pin_set_output_level+0x46>
   28570:	68fb      	ldr	r3, [r7, #12]
   28572:	68ba      	ldr	r2, [r7, #8]
   28574:	615a      	str	r2, [r3, #20]
   28576:	46c0      	nop			; (mov r8, r8)
   28578:	46bd      	mov	sp, r7
   2857a:	b004      	add	sp, #16
   2857c:	bd80      	pop	{r7, pc}
   2857e:	46c0      	nop			; (mov r8, r8)
   28580:	0002850d 	.word	0x0002850d

00028584 <system_gclk_chan_get_config_defaults>:
   28584:	b580      	push	{r7, lr}
   28586:	b082      	sub	sp, #8
   28588:	af00      	add	r7, sp, #0
   2858a:	6078      	str	r0, [r7, #4]
   2858c:	687b      	ldr	r3, [r7, #4]
   2858e:	2200      	movs	r2, #0
   28590:	701a      	strb	r2, [r3, #0]
   28592:	46c0      	nop			; (mov r8, r8)
   28594:	46bd      	mov	sp, r7
   28596:	b002      	add	sp, #8
   28598:	bd80      	pop	{r7, pc}
	...

0002859c <system_apb_clock_set_mask>:
   2859c:	b580      	push	{r7, lr}
   2859e:	b082      	sub	sp, #8
   285a0:	af00      	add	r7, sp, #0
   285a2:	0002      	movs	r2, r0
   285a4:	6039      	str	r1, [r7, #0]
   285a6:	1dfb      	adds	r3, r7, #7
   285a8:	701a      	strb	r2, [r3, #0]
   285aa:	1dfb      	adds	r3, r7, #7
   285ac:	781b      	ldrb	r3, [r3, #0]
   285ae:	2b01      	cmp	r3, #1
   285b0:	d00a      	beq.n	285c8 <system_apb_clock_set_mask+0x2c>
   285b2:	2b02      	cmp	r3, #2
   285b4:	d00f      	beq.n	285d6 <system_apb_clock_set_mask+0x3a>
   285b6:	2b00      	cmp	r3, #0
   285b8:	d114      	bne.n	285e4 <system_apb_clock_set_mask+0x48>
   285ba:	4b0e      	ldr	r3, [pc, #56]	; (285f4 <system_apb_clock_set_mask+0x58>)
   285bc:	4a0d      	ldr	r2, [pc, #52]	; (285f4 <system_apb_clock_set_mask+0x58>)
   285be:	6991      	ldr	r1, [r2, #24]
   285c0:	683a      	ldr	r2, [r7, #0]
   285c2:	430a      	orrs	r2, r1
   285c4:	619a      	str	r2, [r3, #24]
   285c6:	e00f      	b.n	285e8 <system_apb_clock_set_mask+0x4c>
   285c8:	4b0a      	ldr	r3, [pc, #40]	; (285f4 <system_apb_clock_set_mask+0x58>)
   285ca:	4a0a      	ldr	r2, [pc, #40]	; (285f4 <system_apb_clock_set_mask+0x58>)
   285cc:	69d1      	ldr	r1, [r2, #28]
   285ce:	683a      	ldr	r2, [r7, #0]
   285d0:	430a      	orrs	r2, r1
   285d2:	61da      	str	r2, [r3, #28]
   285d4:	e008      	b.n	285e8 <system_apb_clock_set_mask+0x4c>
   285d6:	4b07      	ldr	r3, [pc, #28]	; (285f4 <system_apb_clock_set_mask+0x58>)
   285d8:	4a06      	ldr	r2, [pc, #24]	; (285f4 <system_apb_clock_set_mask+0x58>)
   285da:	6a11      	ldr	r1, [r2, #32]
   285dc:	683a      	ldr	r2, [r7, #0]
   285de:	430a      	orrs	r2, r1
   285e0:	621a      	str	r2, [r3, #32]
   285e2:	e001      	b.n	285e8 <system_apb_clock_set_mask+0x4c>
   285e4:	2317      	movs	r3, #23
   285e6:	e000      	b.n	285ea <system_apb_clock_set_mask+0x4e>
   285e8:	2300      	movs	r3, #0
   285ea:	0018      	movs	r0, r3
   285ec:	46bd      	mov	sp, r7
   285ee:	b002      	add	sp, #8
   285f0:	bd80      	pop	{r7, pc}
   285f2:	46c0      	nop			; (mov r8, r8)
   285f4:	40000400 	.word	0x40000400

000285f8 <system_is_debugger_present>:
   285f8:	b580      	push	{r7, lr}
   285fa:	af00      	add	r7, sp, #0
   285fc:	4b05      	ldr	r3, [pc, #20]	; (28614 <system_is_debugger_present+0x1c>)
   285fe:	789b      	ldrb	r3, [r3, #2]
   28600:	b2db      	uxtb	r3, r3
   28602:	001a      	movs	r2, r3
   28604:	2302      	movs	r3, #2
   28606:	4013      	ands	r3, r2
   28608:	1e5a      	subs	r2, r3, #1
   2860a:	4193      	sbcs	r3, r2
   2860c:	b2db      	uxtb	r3, r3
   2860e:	0018      	movs	r0, r3
   28610:	46bd      	mov	sp, r7
   28612:	bd80      	pop	{r7, pc}
   28614:	41002000 	.word	0x41002000

00028618 <system_interrupt_enable>:
   28618:	b580      	push	{r7, lr}
   2861a:	b082      	sub	sp, #8
   2861c:	af00      	add	r7, sp, #0
   2861e:	0002      	movs	r2, r0
   28620:	1dfb      	adds	r3, r7, #7
   28622:	701a      	strb	r2, [r3, #0]
   28624:	4b06      	ldr	r3, [pc, #24]	; (28640 <system_interrupt_enable+0x28>)
   28626:	1dfa      	adds	r2, r7, #7
   28628:	7812      	ldrb	r2, [r2, #0]
   2862a:	0011      	movs	r1, r2
   2862c:	221f      	movs	r2, #31
   2862e:	400a      	ands	r2, r1
   28630:	2101      	movs	r1, #1
   28632:	4091      	lsls	r1, r2
   28634:	000a      	movs	r2, r1
   28636:	601a      	str	r2, [r3, #0]
   28638:	46c0      	nop			; (mov r8, r8)
   2863a:	46bd      	mov	sp, r7
   2863c:	b002      	add	sp, #8
   2863e:	bd80      	pop	{r7, pc}
   28640:	e000e100 	.word	0xe000e100

00028644 <system_interrupt_disable>:
   28644:	b580      	push	{r7, lr}
   28646:	b082      	sub	sp, #8
   28648:	af00      	add	r7, sp, #0
   2864a:	0002      	movs	r2, r0
   2864c:	1dfb      	adds	r3, r7, #7
   2864e:	701a      	strb	r2, [r3, #0]
   28650:	4a07      	ldr	r2, [pc, #28]	; (28670 <system_interrupt_disable+0x2c>)
   28652:	1dfb      	adds	r3, r7, #7
   28654:	781b      	ldrb	r3, [r3, #0]
   28656:	0019      	movs	r1, r3
   28658:	231f      	movs	r3, #31
   2865a:	400b      	ands	r3, r1
   2865c:	2101      	movs	r1, #1
   2865e:	4099      	lsls	r1, r3
   28660:	000b      	movs	r3, r1
   28662:	0019      	movs	r1, r3
   28664:	2380      	movs	r3, #128	; 0x80
   28666:	50d1      	str	r1, [r2, r3]
   28668:	46c0      	nop			; (mov r8, r8)
   2866a:	46bd      	mov	sp, r7
   2866c:	b002      	add	sp, #8
   2866e:	bd80      	pop	{r7, pc}
   28670:	e000e100 	.word	0xe000e100

00028674 <spi_is_syncing>:
   28674:	b580      	push	{r7, lr}
   28676:	b084      	sub	sp, #16
   28678:	af00      	add	r7, sp, #0
   2867a:	6078      	str	r0, [r7, #4]
   2867c:	687b      	ldr	r3, [r7, #4]
   2867e:	681b      	ldr	r3, [r3, #0]
   28680:	60fb      	str	r3, [r7, #12]
   28682:	68fb      	ldr	r3, [r7, #12]
   28684:	69db      	ldr	r3, [r3, #28]
   28686:	1e5a      	subs	r2, r3, #1
   28688:	4193      	sbcs	r3, r2
   2868a:	b2db      	uxtb	r3, r3
   2868c:	0018      	movs	r0, r3
   2868e:	46bd      	mov	sp, r7
   28690:	b004      	add	sp, #16
   28692:	bd80      	pop	{r7, pc}

00028694 <spi_enable>:
   28694:	b580      	push	{r7, lr}
   28696:	b084      	sub	sp, #16
   28698:	af00      	add	r7, sp, #0
   2869a:	6078      	str	r0, [r7, #4]
   2869c:	687b      	ldr	r3, [r7, #4]
   2869e:	681b      	ldr	r3, [r3, #0]
   286a0:	60fb      	str	r3, [r7, #12]
   286a2:	687b      	ldr	r3, [r7, #4]
   286a4:	681b      	ldr	r3, [r3, #0]
   286a6:	0018      	movs	r0, r3
   286a8:	4b0b      	ldr	r3, [pc, #44]	; (286d8 <spi_enable+0x44>)
   286aa:	4798      	blx	r3
   286ac:	0003      	movs	r3, r0
   286ae:	0018      	movs	r0, r3
   286b0:	4b0a      	ldr	r3, [pc, #40]	; (286dc <spi_enable+0x48>)
   286b2:	4798      	blx	r3
   286b4:	46c0      	nop			; (mov r8, r8)
   286b6:	687b      	ldr	r3, [r7, #4]
   286b8:	0018      	movs	r0, r3
   286ba:	4b09      	ldr	r3, [pc, #36]	; (286e0 <spi_enable+0x4c>)
   286bc:	4798      	blx	r3
   286be:	1e03      	subs	r3, r0, #0
   286c0:	d1f9      	bne.n	286b6 <spi_enable+0x22>
   286c2:	68fb      	ldr	r3, [r7, #12]
   286c4:	681b      	ldr	r3, [r3, #0]
   286c6:	2202      	movs	r2, #2
   286c8:	431a      	orrs	r2, r3
   286ca:	68fb      	ldr	r3, [r7, #12]
   286cc:	601a      	str	r2, [r3, #0]
   286ce:	46c0      	nop			; (mov r8, r8)
   286d0:	46bd      	mov	sp, r7
   286d2:	b004      	add	sp, #16
   286d4:	bd80      	pop	{r7, pc}
   286d6:	46c0      	nop			; (mov r8, r8)
   286d8:	000283b1 	.word	0x000283b1
   286dc:	00028619 	.word	0x00028619
   286e0:	00028675 	.word	0x00028675

000286e4 <spi_disable>:
   286e4:	b580      	push	{r7, lr}
   286e6:	b084      	sub	sp, #16
   286e8:	af00      	add	r7, sp, #0
   286ea:	6078      	str	r0, [r7, #4]
   286ec:	687b      	ldr	r3, [r7, #4]
   286ee:	681b      	ldr	r3, [r3, #0]
   286f0:	60fb      	str	r3, [r7, #12]
   286f2:	687b      	ldr	r3, [r7, #4]
   286f4:	681b      	ldr	r3, [r3, #0]
   286f6:	0018      	movs	r0, r3
   286f8:	4b0e      	ldr	r3, [pc, #56]	; (28734 <spi_disable+0x50>)
   286fa:	4798      	blx	r3
   286fc:	0003      	movs	r3, r0
   286fe:	0018      	movs	r0, r3
   28700:	4b0d      	ldr	r3, [pc, #52]	; (28738 <spi_disable+0x54>)
   28702:	4798      	blx	r3
   28704:	46c0      	nop			; (mov r8, r8)
   28706:	687b      	ldr	r3, [r7, #4]
   28708:	0018      	movs	r0, r3
   2870a:	4b0c      	ldr	r3, [pc, #48]	; (2873c <spi_disable+0x58>)
   2870c:	4798      	blx	r3
   2870e:	1e03      	subs	r3, r0, #0
   28710:	d1f9      	bne.n	28706 <spi_disable+0x22>
   28712:	68fb      	ldr	r3, [r7, #12]
   28714:	228f      	movs	r2, #143	; 0x8f
   28716:	751a      	strb	r2, [r3, #20]
   28718:	68fb      	ldr	r3, [r7, #12]
   2871a:	228f      	movs	r2, #143	; 0x8f
   2871c:	761a      	strb	r2, [r3, #24]
   2871e:	68fb      	ldr	r3, [r7, #12]
   28720:	681b      	ldr	r3, [r3, #0]
   28722:	2202      	movs	r2, #2
   28724:	4393      	bics	r3, r2
   28726:	001a      	movs	r2, r3
   28728:	68fb      	ldr	r3, [r7, #12]
   2872a:	601a      	str	r2, [r3, #0]
   2872c:	46c0      	nop			; (mov r8, r8)
   2872e:	46bd      	mov	sp, r7
   28730:	b004      	add	sp, #16
   28732:	bd80      	pop	{r7, pc}
   28734:	000283b1 	.word	0x000283b1
   28738:	00028645 	.word	0x00028645
   2873c:	00028675 	.word	0x00028675

00028740 <spi_is_write_complete>:
   28740:	b580      	push	{r7, lr}
   28742:	b084      	sub	sp, #16
   28744:	af00      	add	r7, sp, #0
   28746:	6078      	str	r0, [r7, #4]
   28748:	687b      	ldr	r3, [r7, #4]
   2874a:	681b      	ldr	r3, [r3, #0]
   2874c:	60fb      	str	r3, [r7, #12]
   2874e:	68fb      	ldr	r3, [r7, #12]
   28750:	7e1b      	ldrb	r3, [r3, #24]
   28752:	b2db      	uxtb	r3, r3
   28754:	001a      	movs	r2, r3
   28756:	2302      	movs	r3, #2
   28758:	4013      	ands	r3, r2
   2875a:	1e5a      	subs	r2, r3, #1
   2875c:	4193      	sbcs	r3, r2
   2875e:	b2db      	uxtb	r3, r3
   28760:	0018      	movs	r0, r3
   28762:	46bd      	mov	sp, r7
   28764:	b004      	add	sp, #16
   28766:	bd80      	pop	{r7, pc}

00028768 <spi_is_ready_to_write>:
   28768:	b580      	push	{r7, lr}
   2876a:	b084      	sub	sp, #16
   2876c:	af00      	add	r7, sp, #0
   2876e:	6078      	str	r0, [r7, #4]
   28770:	687b      	ldr	r3, [r7, #4]
   28772:	681b      	ldr	r3, [r3, #0]
   28774:	60fb      	str	r3, [r7, #12]
   28776:	68fb      	ldr	r3, [r7, #12]
   28778:	7e1b      	ldrb	r3, [r3, #24]
   2877a:	b2db      	uxtb	r3, r3
   2877c:	001a      	movs	r2, r3
   2877e:	2301      	movs	r3, #1
   28780:	4013      	ands	r3, r2
   28782:	1e5a      	subs	r2, r3, #1
   28784:	4193      	sbcs	r3, r2
   28786:	b2db      	uxtb	r3, r3
   28788:	0018      	movs	r0, r3
   2878a:	46bd      	mov	sp, r7
   2878c:	b004      	add	sp, #16
   2878e:	bd80      	pop	{r7, pc}

00028790 <spi_is_ready_to_read>:
   28790:	b580      	push	{r7, lr}
   28792:	b084      	sub	sp, #16
   28794:	af00      	add	r7, sp, #0
   28796:	6078      	str	r0, [r7, #4]
   28798:	687b      	ldr	r3, [r7, #4]
   2879a:	681b      	ldr	r3, [r3, #0]
   2879c:	60fb      	str	r3, [r7, #12]
   2879e:	68fb      	ldr	r3, [r7, #12]
   287a0:	7e1b      	ldrb	r3, [r3, #24]
   287a2:	b2db      	uxtb	r3, r3
   287a4:	001a      	movs	r2, r3
   287a6:	2304      	movs	r3, #4
   287a8:	4013      	ands	r3, r2
   287aa:	1e5a      	subs	r2, r3, #1
   287ac:	4193      	sbcs	r3, r2
   287ae:	b2db      	uxtb	r3, r3
   287b0:	0018      	movs	r0, r3
   287b2:	46bd      	mov	sp, r7
   287b4:	b004      	add	sp, #16
   287b6:	bd80      	pop	{r7, pc}

000287b8 <spi_write>:
   287b8:	b580      	push	{r7, lr}
   287ba:	b084      	sub	sp, #16
   287bc:	af00      	add	r7, sp, #0
   287be:	6078      	str	r0, [r7, #4]
   287c0:	000a      	movs	r2, r1
   287c2:	1cbb      	adds	r3, r7, #2
   287c4:	801a      	strh	r2, [r3, #0]
   287c6:	687b      	ldr	r3, [r7, #4]
   287c8:	681b      	ldr	r3, [r3, #0]
   287ca:	60fb      	str	r3, [r7, #12]
   287cc:	687b      	ldr	r3, [r7, #4]
   287ce:	0018      	movs	r0, r3
   287d0:	4b0a      	ldr	r3, [pc, #40]	; (287fc <spi_write+0x44>)
   287d2:	4798      	blx	r3
   287d4:	0003      	movs	r3, r0
   287d6:	001a      	movs	r2, r3
   287d8:	2301      	movs	r3, #1
   287da:	4053      	eors	r3, r2
   287dc:	b2db      	uxtb	r3, r3
   287de:	2b00      	cmp	r3, #0
   287e0:	d001      	beq.n	287e6 <spi_write+0x2e>
   287e2:	2305      	movs	r3, #5
   287e4:	e006      	b.n	287f4 <spi_write+0x3c>
   287e6:	1cbb      	adds	r3, r7, #2
   287e8:	881b      	ldrh	r3, [r3, #0]
   287ea:	05db      	lsls	r3, r3, #23
   287ec:	0dda      	lsrs	r2, r3, #23
   287ee:	68fb      	ldr	r3, [r7, #12]
   287f0:	629a      	str	r2, [r3, #40]	; 0x28
   287f2:	2300      	movs	r3, #0
   287f4:	0018      	movs	r0, r3
   287f6:	46bd      	mov	sp, r7
   287f8:	b004      	add	sp, #16
   287fa:	bd80      	pop	{r7, pc}
   287fc:	00028769 	.word	0x00028769

00028800 <spi_read>:
   28800:	b580      	push	{r7, lr}
   28802:	b084      	sub	sp, #16
   28804:	af00      	add	r7, sp, #0
   28806:	6078      	str	r0, [r7, #4]
   28808:	6039      	str	r1, [r7, #0]
   2880a:	687b      	ldr	r3, [r7, #4]
   2880c:	681b      	ldr	r3, [r3, #0]
   2880e:	60bb      	str	r3, [r7, #8]
   28810:	687b      	ldr	r3, [r7, #4]
   28812:	0018      	movs	r0, r3
   28814:	4b1b      	ldr	r3, [pc, #108]	; (28884 <spi_read+0x84>)
   28816:	4798      	blx	r3
   28818:	0003      	movs	r3, r0
   2881a:	001a      	movs	r2, r3
   2881c:	2301      	movs	r3, #1
   2881e:	4053      	eors	r3, r2
   28820:	b2db      	uxtb	r3, r3
   28822:	2b00      	cmp	r3, #0
   28824:	d001      	beq.n	2882a <spi_read+0x2a>
   28826:	2310      	movs	r3, #16
   28828:	e027      	b.n	2887a <spi_read+0x7a>
   2882a:	230f      	movs	r3, #15
   2882c:	18fb      	adds	r3, r7, r3
   2882e:	2200      	movs	r2, #0
   28830:	701a      	strb	r2, [r3, #0]
   28832:	68bb      	ldr	r3, [r7, #8]
   28834:	8b5b      	ldrh	r3, [r3, #26]
   28836:	b29b      	uxth	r3, r3
   28838:	001a      	movs	r2, r3
   2883a:	2304      	movs	r3, #4
   2883c:	4013      	ands	r3, r2
   2883e:	d006      	beq.n	2884e <spi_read+0x4e>
   28840:	230f      	movs	r3, #15
   28842:	18fb      	adds	r3, r7, r3
   28844:	221e      	movs	r2, #30
   28846:	701a      	strb	r2, [r3, #0]
   28848:	68bb      	ldr	r3, [r7, #8]
   2884a:	2204      	movs	r2, #4
   2884c:	835a      	strh	r2, [r3, #26]
   2884e:	687b      	ldr	r3, [r7, #4]
   28850:	799b      	ldrb	r3, [r3, #6]
   28852:	2b01      	cmp	r3, #1
   28854:	d108      	bne.n	28868 <spi_read+0x68>
   28856:	68bb      	ldr	r3, [r7, #8]
   28858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2885a:	b29b      	uxth	r3, r3
   2885c:	05db      	lsls	r3, r3, #23
   2885e:	0ddb      	lsrs	r3, r3, #23
   28860:	b29a      	uxth	r2, r3
   28862:	683b      	ldr	r3, [r7, #0]
   28864:	801a      	strh	r2, [r3, #0]
   28866:	e005      	b.n	28874 <spi_read+0x74>
   28868:	68bb      	ldr	r3, [r7, #8]
   2886a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2886c:	b2db      	uxtb	r3, r3
   2886e:	b29a      	uxth	r2, r3
   28870:	683b      	ldr	r3, [r7, #0]
   28872:	801a      	strh	r2, [r3, #0]
   28874:	230f      	movs	r3, #15
   28876:	18fb      	adds	r3, r7, r3
   28878:	781b      	ldrb	r3, [r3, #0]
   2887a:	0018      	movs	r0, r3
   2887c:	46bd      	mov	sp, r7
   2887e:	b004      	add	sp, #16
   28880:	bd80      	pop	{r7, pc}
   28882:	46c0      	nop			; (mov r8, r8)
   28884:	00028791 	.word	0x00028791

00028888 <spi_set_baudrate>:
   28888:	b590      	push	{r4, r7, lr}
   2888a:	b089      	sub	sp, #36	; 0x24
   2888c:	af00      	add	r7, sp, #0
   2888e:	6078      	str	r0, [r7, #4]
   28890:	6039      	str	r1, [r7, #0]
   28892:	230c      	movs	r3, #12
   28894:	18fb      	adds	r3, r7, r3
   28896:	2200      	movs	r2, #0
   28898:	801a      	strh	r2, [r3, #0]
   2889a:	687b      	ldr	r3, [r7, #4]
   2889c:	681b      	ldr	r3, [r3, #0]
   2889e:	61fb      	str	r3, [r7, #28]
   288a0:	687b      	ldr	r3, [r7, #4]
   288a2:	0018      	movs	r0, r3
   288a4:	4b24      	ldr	r3, [pc, #144]	; (28938 <spi_set_baudrate+0xb0>)
   288a6:	4798      	blx	r3
   288a8:	46c0      	nop			; (mov r8, r8)
   288aa:	687b      	ldr	r3, [r7, #4]
   288ac:	0018      	movs	r0, r3
   288ae:	4b23      	ldr	r3, [pc, #140]	; (2893c <spi_set_baudrate+0xb4>)
   288b0:	4798      	blx	r3
   288b2:	1e03      	subs	r3, r0, #0
   288b4:	d1f9      	bne.n	288aa <spi_set_baudrate+0x22>
   288b6:	687b      	ldr	r3, [r7, #4]
   288b8:	681b      	ldr	r3, [r3, #0]
   288ba:	0018      	movs	r0, r3
   288bc:	4b20      	ldr	r3, [pc, #128]	; (28940 <spi_set_baudrate+0xb8>)
   288be:	4798      	blx	r3
   288c0:	0003      	movs	r3, r0
   288c2:	61bb      	str	r3, [r7, #24]
   288c4:	69bb      	ldr	r3, [r7, #24]
   288c6:	3314      	adds	r3, #20
   288c8:	617b      	str	r3, [r7, #20]
   288ca:	697b      	ldr	r3, [r7, #20]
   288cc:	b2db      	uxtb	r3, r3
   288ce:	0018      	movs	r0, r3
   288d0:	4b1c      	ldr	r3, [pc, #112]	; (28944 <spi_set_baudrate+0xbc>)
   288d2:	4798      	blx	r3
   288d4:	0003      	movs	r3, r0
   288d6:	613b      	str	r3, [r7, #16]
   288d8:	230f      	movs	r3, #15
   288da:	18fc      	adds	r4, r7, r3
   288dc:	230c      	movs	r3, #12
   288de:	18fa      	adds	r2, r7, r3
   288e0:	6939      	ldr	r1, [r7, #16]
   288e2:	683b      	ldr	r3, [r7, #0]
   288e4:	0018      	movs	r0, r3
   288e6:	4b18      	ldr	r3, [pc, #96]	; (28948 <spi_set_baudrate+0xc0>)
   288e8:	4798      	blx	r3
   288ea:	0003      	movs	r3, r0
   288ec:	7023      	strb	r3, [r4, #0]
   288ee:	230f      	movs	r3, #15
   288f0:	18fb      	adds	r3, r7, r3
   288f2:	781b      	ldrb	r3, [r3, #0]
   288f4:	2b00      	cmp	r3, #0
   288f6:	d001      	beq.n	288fc <spi_set_baudrate+0x74>
   288f8:	2317      	movs	r3, #23
   288fa:	e018      	b.n	2892e <spi_set_baudrate+0xa6>
   288fc:	230c      	movs	r3, #12
   288fe:	18fb      	adds	r3, r7, r3
   28900:	881b      	ldrh	r3, [r3, #0]
   28902:	b2da      	uxtb	r2, r3
   28904:	69fb      	ldr	r3, [r7, #28]
   28906:	731a      	strb	r2, [r3, #12]
   28908:	46c0      	nop			; (mov r8, r8)
   2890a:	687b      	ldr	r3, [r7, #4]
   2890c:	0018      	movs	r0, r3
   2890e:	4b0b      	ldr	r3, [pc, #44]	; (2893c <spi_set_baudrate+0xb4>)
   28910:	4798      	blx	r3
   28912:	1e03      	subs	r3, r0, #0
   28914:	d1f9      	bne.n	2890a <spi_set_baudrate+0x82>
   28916:	687b      	ldr	r3, [r7, #4]
   28918:	0018      	movs	r0, r3
   2891a:	4b0c      	ldr	r3, [pc, #48]	; (2894c <spi_set_baudrate+0xc4>)
   2891c:	4798      	blx	r3
   2891e:	46c0      	nop			; (mov r8, r8)
   28920:	687b      	ldr	r3, [r7, #4]
   28922:	0018      	movs	r0, r3
   28924:	4b05      	ldr	r3, [pc, #20]	; (2893c <spi_set_baudrate+0xb4>)
   28926:	4798      	blx	r3
   28928:	1e03      	subs	r3, r0, #0
   2892a:	d1f9      	bne.n	28920 <spi_set_baudrate+0x98>
   2892c:	2300      	movs	r3, #0
   2892e:	0018      	movs	r0, r3
   28930:	46bd      	mov	sp, r7
   28932:	b009      	add	sp, #36	; 0x24
   28934:	bd90      	pop	{r4, r7, pc}
   28936:	46c0      	nop			; (mov r8, r8)
   28938:	000286e5 	.word	0x000286e5
   2893c:	00028675 	.word	0x00028675
   28940:	000282e1 	.word	0x000282e1
   28944:	0002ac95 	.word	0x0002ac95
   28948:	00027e5b 	.word	0x00027e5b
   2894c:	00028695 	.word	0x00028695

00028950 <_spi_set_config>:
   28950:	b590      	push	{r4, r7, lr}
   28952:	b093      	sub	sp, #76	; 0x4c
   28954:	af00      	add	r7, sp, #0
   28956:	6078      	str	r0, [r7, #4]
   28958:	6039      	str	r1, [r7, #0]
   2895a:	687b      	ldr	r3, [r7, #4]
   2895c:	681b      	ldr	r3, [r3, #0]
   2895e:	637b      	str	r3, [r7, #52]	; 0x34
   28960:	687b      	ldr	r3, [r7, #4]
   28962:	681b      	ldr	r3, [r3, #0]
   28964:	633b      	str	r3, [r7, #48]	; 0x30
   28966:	231c      	movs	r3, #28
   28968:	18fb      	adds	r3, r7, r3
   2896a:	0018      	movs	r0, r3
   2896c:	4b75      	ldr	r3, [pc, #468]	; (28b44 <_spi_set_config+0x1f4>)
   2896e:	4798      	blx	r3
   28970:	231c      	movs	r3, #28
   28972:	18fb      	adds	r3, r7, r3
   28974:	2200      	movs	r2, #0
   28976:	705a      	strb	r2, [r3, #1]
   28978:	683b      	ldr	r3, [r7, #0]
   2897a:	781b      	ldrb	r3, [r3, #0]
   2897c:	2b00      	cmp	r3, #0
   2897e:	d103      	bne.n	28988 <_spi_set_config+0x38>
   28980:	231c      	movs	r3, #28
   28982:	18fb      	adds	r3, r7, r3
   28984:	2200      	movs	r2, #0
   28986:	709a      	strb	r2, [r3, #2]
   28988:	683b      	ldr	r3, [r7, #0]
   2898a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2898c:	230c      	movs	r3, #12
   2898e:	18fb      	adds	r3, r7, r3
   28990:	601a      	str	r2, [r3, #0]
   28992:	683b      	ldr	r3, [r7, #0]
   28994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   28996:	230c      	movs	r3, #12
   28998:	18fb      	adds	r3, r7, r3
   2899a:	605a      	str	r2, [r3, #4]
   2899c:	683b      	ldr	r3, [r7, #0]
   2899e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   289a0:	230c      	movs	r3, #12
   289a2:	18fb      	adds	r3, r7, r3
   289a4:	609a      	str	r2, [r3, #8]
   289a6:	683b      	ldr	r3, [r7, #0]
   289a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   289aa:	230c      	movs	r3, #12
   289ac:	18fb      	adds	r3, r7, r3
   289ae:	60da      	str	r2, [r3, #12]
   289b0:	2347      	movs	r3, #71	; 0x47
   289b2:	18fb      	adds	r3, r7, r3
   289b4:	2200      	movs	r2, #0
   289b6:	701a      	strb	r2, [r3, #0]
   289b8:	e02c      	b.n	28a14 <_spi_set_config+0xc4>
   289ba:	2347      	movs	r3, #71	; 0x47
   289bc:	18fb      	adds	r3, r7, r3
   289be:	781a      	ldrb	r2, [r3, #0]
   289c0:	230c      	movs	r3, #12
   289c2:	18fb      	adds	r3, r7, r3
   289c4:	0092      	lsls	r2, r2, #2
   289c6:	58d3      	ldr	r3, [r2, r3]
   289c8:	643b      	str	r3, [r7, #64]	; 0x40
   289ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   289cc:	2b00      	cmp	r3, #0
   289ce:	d109      	bne.n	289e4 <_spi_set_config+0x94>
   289d0:	2347      	movs	r3, #71	; 0x47
   289d2:	18fb      	adds	r3, r7, r3
   289d4:	781a      	ldrb	r2, [r3, #0]
   289d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   289d8:	0011      	movs	r1, r2
   289da:	0018      	movs	r0, r3
   289dc:	4b5a      	ldr	r3, [pc, #360]	; (28b48 <_spi_set_config+0x1f8>)
   289de:	4798      	blx	r3
   289e0:	0003      	movs	r3, r0
   289e2:	643b      	str	r3, [r7, #64]	; 0x40
   289e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   289e6:	3301      	adds	r3, #1
   289e8:	d00d      	beq.n	28a06 <_spi_set_config+0xb6>
   289ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   289ec:	b2da      	uxtb	r2, r3
   289ee:	231c      	movs	r3, #28
   289f0:	18fb      	adds	r3, r7, r3
   289f2:	701a      	strb	r2, [r3, #0]
   289f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   289f6:	0c1b      	lsrs	r3, r3, #16
   289f8:	b2db      	uxtb	r3, r3
   289fa:	221c      	movs	r2, #28
   289fc:	18ba      	adds	r2, r7, r2
   289fe:	0011      	movs	r1, r2
   28a00:	0018      	movs	r0, r3
   28a02:	4b52      	ldr	r3, [pc, #328]	; (28b4c <_spi_set_config+0x1fc>)
   28a04:	4798      	blx	r3
   28a06:	2347      	movs	r3, #71	; 0x47
   28a08:	18fb      	adds	r3, r7, r3
   28a0a:	781a      	ldrb	r2, [r3, #0]
   28a0c:	2347      	movs	r3, #71	; 0x47
   28a0e:	18fb      	adds	r3, r7, r3
   28a10:	3201      	adds	r2, #1
   28a12:	701a      	strb	r2, [r3, #0]
   28a14:	2347      	movs	r3, #71	; 0x47
   28a16:	18fb      	adds	r3, r7, r3
   28a18:	781b      	ldrb	r3, [r3, #0]
   28a1a:	2b03      	cmp	r3, #3
   28a1c:	d9cd      	bls.n	289ba <_spi_set_config+0x6a>
   28a1e:	683b      	ldr	r3, [r7, #0]
   28a20:	781a      	ldrb	r2, [r3, #0]
   28a22:	687b      	ldr	r3, [r7, #4]
   28a24:	715a      	strb	r2, [r3, #5]
   28a26:	683b      	ldr	r3, [r7, #0]
   28a28:	7c1a      	ldrb	r2, [r3, #16]
   28a2a:	687b      	ldr	r3, [r7, #4]
   28a2c:	719a      	strb	r2, [r3, #6]
   28a2e:	683b      	ldr	r3, [r7, #0]
   28a30:	7c9a      	ldrb	r2, [r3, #18]
   28a32:	687b      	ldr	r3, [r7, #4]
   28a34:	71da      	strb	r2, [r3, #7]
   28a36:	683b      	ldr	r3, [r7, #0]
   28a38:	7d1a      	ldrb	r2, [r3, #20]
   28a3a:	687b      	ldr	r3, [r7, #4]
   28a3c:	721a      	strb	r2, [r3, #8]
   28a3e:	230a      	movs	r3, #10
   28a40:	18fb      	adds	r3, r7, r3
   28a42:	2200      	movs	r2, #0
   28a44:	801a      	strh	r2, [r3, #0]
   28a46:	2300      	movs	r3, #0
   28a48:	63fb      	str	r3, [r7, #60]	; 0x3c
   28a4a:	2300      	movs	r3, #0
   28a4c:	63bb      	str	r3, [r7, #56]	; 0x38
   28a4e:	683b      	ldr	r3, [r7, #0]
   28a50:	781b      	ldrb	r3, [r3, #0]
   28a52:	2b01      	cmp	r3, #1
   28a54:	d129      	bne.n	28aaa <_spi_set_config+0x15a>
   28a56:	687b      	ldr	r3, [r7, #4]
   28a58:	681b      	ldr	r3, [r3, #0]
   28a5a:	0018      	movs	r0, r3
   28a5c:	4b3c      	ldr	r3, [pc, #240]	; (28b50 <_spi_set_config+0x200>)
   28a5e:	4798      	blx	r3
   28a60:	0003      	movs	r3, r0
   28a62:	62fb      	str	r3, [r7, #44]	; 0x2c
   28a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   28a66:	3314      	adds	r3, #20
   28a68:	62bb      	str	r3, [r7, #40]	; 0x28
   28a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   28a6c:	b2db      	uxtb	r3, r3
   28a6e:	0018      	movs	r0, r3
   28a70:	4b38      	ldr	r3, [pc, #224]	; (28b54 <_spi_set_config+0x204>)
   28a72:	4798      	blx	r3
   28a74:	0003      	movs	r3, r0
   28a76:	627b      	str	r3, [r7, #36]	; 0x24
   28a78:	683b      	ldr	r3, [r7, #0]
   28a7a:	699b      	ldr	r3, [r3, #24]
   28a7c:	2223      	movs	r2, #35	; 0x23
   28a7e:	18bc      	adds	r4, r7, r2
   28a80:	220a      	movs	r2, #10
   28a82:	18ba      	adds	r2, r7, r2
   28a84:	6a79      	ldr	r1, [r7, #36]	; 0x24
   28a86:	0018      	movs	r0, r3
   28a88:	4b33      	ldr	r3, [pc, #204]	; (28b58 <_spi_set_config+0x208>)
   28a8a:	4798      	blx	r3
   28a8c:	0003      	movs	r3, r0
   28a8e:	7023      	strb	r3, [r4, #0]
   28a90:	2323      	movs	r3, #35	; 0x23
   28a92:	18fb      	adds	r3, r7, r3
   28a94:	781b      	ldrb	r3, [r3, #0]
   28a96:	2b00      	cmp	r3, #0
   28a98:	d001      	beq.n	28a9e <_spi_set_config+0x14e>
   28a9a:	2317      	movs	r3, #23
   28a9c:	e04e      	b.n	28b3c <_spi_set_config+0x1ec>
   28a9e:	230a      	movs	r3, #10
   28aa0:	18fb      	adds	r3, r7, r3
   28aa2:	881b      	ldrh	r3, [r3, #0]
   28aa4:	b2da      	uxtb	r2, r3
   28aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28aa8:	731a      	strb	r2, [r3, #12]
   28aaa:	683b      	ldr	r3, [r7, #0]
   28aac:	685b      	ldr	r3, [r3, #4]
   28aae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   28ab0:	4313      	orrs	r3, r2
   28ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
   28ab4:	683b      	ldr	r3, [r7, #0]
   28ab6:	689b      	ldr	r3, [r3, #8]
   28ab8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   28aba:	4313      	orrs	r3, r2
   28abc:	63fb      	str	r3, [r7, #60]	; 0x3c
   28abe:	683b      	ldr	r3, [r7, #0]
   28ac0:	68db      	ldr	r3, [r3, #12]
   28ac2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   28ac4:	4313      	orrs	r3, r2
   28ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
   28ac8:	683b      	ldr	r3, [r7, #0]
   28aca:	7c1b      	ldrb	r3, [r3, #16]
   28acc:	001a      	movs	r2, r3
   28ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28ad0:	4313      	orrs	r3, r2
   28ad2:	63bb      	str	r3, [r7, #56]	; 0x38
   28ad4:	683b      	ldr	r3, [r7, #0]
   28ad6:	7c5b      	ldrb	r3, [r3, #17]
   28ad8:	2b00      	cmp	r3, #0
   28ada:	d103      	bne.n	28ae4 <_spi_set_config+0x194>
   28adc:	4b1f      	ldr	r3, [pc, #124]	; (28b5c <_spi_set_config+0x20c>)
   28ade:	4798      	blx	r3
   28ae0:	1e03      	subs	r3, r0, #0
   28ae2:	d003      	beq.n	28aec <_spi_set_config+0x19c>
   28ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28ae6:	2280      	movs	r2, #128	; 0x80
   28ae8:	4313      	orrs	r3, r2
   28aea:	63fb      	str	r3, [r7, #60]	; 0x3c
   28aec:	683b      	ldr	r3, [r7, #0]
   28aee:	7c9b      	ldrb	r3, [r3, #18]
   28af0:	2b00      	cmp	r3, #0
   28af2:	d004      	beq.n	28afe <_spi_set_config+0x1ae>
   28af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28af6:	2280      	movs	r2, #128	; 0x80
   28af8:	0292      	lsls	r2, r2, #10
   28afa:	4313      	orrs	r3, r2
   28afc:	63bb      	str	r3, [r7, #56]	; 0x38
   28afe:	683b      	ldr	r3, [r7, #0]
   28b00:	7cdb      	ldrb	r3, [r3, #19]
   28b02:	2b00      	cmp	r3, #0
   28b04:	d004      	beq.n	28b10 <_spi_set_config+0x1c0>
   28b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28b08:	2280      	movs	r2, #128	; 0x80
   28b0a:	0092      	lsls	r2, r2, #2
   28b0c:	4313      	orrs	r3, r2
   28b0e:	63bb      	str	r3, [r7, #56]	; 0x38
   28b10:	683b      	ldr	r3, [r7, #0]
   28b12:	7d1b      	ldrb	r3, [r3, #20]
   28b14:	2b00      	cmp	r3, #0
   28b16:	d004      	beq.n	28b22 <_spi_set_config+0x1d2>
   28b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28b1a:	2280      	movs	r2, #128	; 0x80
   28b1c:	0192      	lsls	r2, r2, #6
   28b1e:	4313      	orrs	r3, r2
   28b20:	63bb      	str	r3, [r7, #56]	; 0x38
   28b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28b24:	681a      	ldr	r2, [r3, #0]
   28b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28b28:	431a      	orrs	r2, r3
   28b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28b2c:	601a      	str	r2, [r3, #0]
   28b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28b30:	685a      	ldr	r2, [r3, #4]
   28b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28b34:	431a      	orrs	r2, r3
   28b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28b38:	605a      	str	r2, [r3, #4]
   28b3a:	2300      	movs	r3, #0
   28b3c:	0018      	movs	r0, r3
   28b3e:	46bd      	mov	sp, r7
   28b40:	b013      	add	sp, #76	; 0x4c
   28b42:	bd90      	pop	{r4, r7, pc}
   28b44:	00028485 	.word	0x00028485
   28b48:	00028125 	.word	0x00028125
   28b4c:	0002aed1 	.word	0x0002aed1
   28b50:	000282e1 	.word	0x000282e1
   28b54:	0002ac95 	.word	0x0002ac95
   28b58:	00027e5b 	.word	0x00027e5b
   28b5c:	000285f9 	.word	0x000285f9

00028b60 <spi_init>:
   28b60:	b590      	push	{r4, r7, lr}
   28b62:	b08b      	sub	sp, #44	; 0x2c
   28b64:	af00      	add	r7, sp, #0
   28b66:	60f8      	str	r0, [r7, #12]
   28b68:	60b9      	str	r1, [r7, #8]
   28b6a:	607a      	str	r2, [r7, #4]
   28b6c:	68fb      	ldr	r3, [r7, #12]
   28b6e:	68ba      	ldr	r2, [r7, #8]
   28b70:	601a      	str	r2, [r3, #0]
   28b72:	68fb      	ldr	r3, [r7, #12]
   28b74:	681b      	ldr	r3, [r3, #0]
   28b76:	623b      	str	r3, [r7, #32]
   28b78:	6a3b      	ldr	r3, [r7, #32]
   28b7a:	681b      	ldr	r3, [r3, #0]
   28b7c:	2202      	movs	r2, #2
   28b7e:	4013      	ands	r3, r2
   28b80:	d001      	beq.n	28b86 <spi_init+0x26>
   28b82:	231c      	movs	r3, #28
   28b84:	e09c      	b.n	28cc0 <spi_init+0x160>
   28b86:	6a3b      	ldr	r3, [r7, #32]
   28b88:	681b      	ldr	r3, [r3, #0]
   28b8a:	2201      	movs	r2, #1
   28b8c:	4013      	ands	r3, r2
   28b8e:	d001      	beq.n	28b94 <spi_init+0x34>
   28b90:	2305      	movs	r3, #5
   28b92:	e095      	b.n	28cc0 <spi_init+0x160>
   28b94:	68fb      	ldr	r3, [r7, #12]
   28b96:	681b      	ldr	r3, [r3, #0]
   28b98:	0018      	movs	r0, r3
   28b9a:	4b4b      	ldr	r3, [pc, #300]	; (28cc8 <spi_init+0x168>)
   28b9c:	4798      	blx	r3
   28b9e:	0003      	movs	r3, r0
   28ba0:	61fb      	str	r3, [r7, #28]
   28ba2:	69fb      	ldr	r3, [r7, #28]
   28ba4:	3302      	adds	r3, #2
   28ba6:	61bb      	str	r3, [r7, #24]
   28ba8:	69fb      	ldr	r3, [r7, #28]
   28baa:	3314      	adds	r3, #20
   28bac:	617b      	str	r3, [r7, #20]
   28bae:	2201      	movs	r2, #1
   28bb0:	69bb      	ldr	r3, [r7, #24]
   28bb2:	409a      	lsls	r2, r3
   28bb4:	0013      	movs	r3, r2
   28bb6:	0019      	movs	r1, r3
   28bb8:	2002      	movs	r0, #2
   28bba:	4b44      	ldr	r3, [pc, #272]	; (28ccc <spi_init+0x16c>)
   28bbc:	4798      	blx	r3
   28bbe:	2310      	movs	r3, #16
   28bc0:	18fb      	adds	r3, r7, r3
   28bc2:	0018      	movs	r0, r3
   28bc4:	4b42      	ldr	r3, [pc, #264]	; (28cd0 <spi_init+0x170>)
   28bc6:	4798      	blx	r3
   28bc8:	687b      	ldr	r3, [r7, #4]
   28bca:	2224      	movs	r2, #36	; 0x24
   28bcc:	5c9a      	ldrb	r2, [r3, r2]
   28bce:	2310      	movs	r3, #16
   28bd0:	18fb      	adds	r3, r7, r3
   28bd2:	701a      	strb	r2, [r3, #0]
   28bd4:	697b      	ldr	r3, [r7, #20]
   28bd6:	b2db      	uxtb	r3, r3
   28bd8:	2210      	movs	r2, #16
   28bda:	18ba      	adds	r2, r7, r2
   28bdc:	0011      	movs	r1, r2
   28bde:	0018      	movs	r0, r3
   28be0:	4b3c      	ldr	r3, [pc, #240]	; (28cd4 <spi_init+0x174>)
   28be2:	4798      	blx	r3
   28be4:	697b      	ldr	r3, [r7, #20]
   28be6:	b2db      	uxtb	r3, r3
   28be8:	0018      	movs	r0, r3
   28bea:	4b3b      	ldr	r3, [pc, #236]	; (28cd8 <spi_init+0x178>)
   28bec:	4798      	blx	r3
   28bee:	687b      	ldr	r3, [r7, #4]
   28bf0:	2224      	movs	r2, #36	; 0x24
   28bf2:	5c9b      	ldrb	r3, [r3, r2]
   28bf4:	2100      	movs	r1, #0
   28bf6:	0018      	movs	r0, r3
   28bf8:	4b38      	ldr	r3, [pc, #224]	; (28cdc <spi_init+0x17c>)
   28bfa:	4798      	blx	r3
   28bfc:	687b      	ldr	r3, [r7, #4]
   28bfe:	781b      	ldrb	r3, [r3, #0]
   28c00:	2b01      	cmp	r3, #1
   28c02:	d105      	bne.n	28c10 <spi_init+0xb0>
   28c04:	6a3b      	ldr	r3, [r7, #32]
   28c06:	681b      	ldr	r3, [r3, #0]
   28c08:	220c      	movs	r2, #12
   28c0a:	431a      	orrs	r2, r3
   28c0c:	6a3b      	ldr	r3, [r7, #32]
   28c0e:	601a      	str	r2, [r3, #0]
   28c10:	2327      	movs	r3, #39	; 0x27
   28c12:	18fb      	adds	r3, r7, r3
   28c14:	2200      	movs	r2, #0
   28c16:	701a      	strb	r2, [r3, #0]
   28c18:	e010      	b.n	28c3c <spi_init+0xdc>
   28c1a:	2327      	movs	r3, #39	; 0x27
   28c1c:	18fb      	adds	r3, r7, r3
   28c1e:	781b      	ldrb	r3, [r3, #0]
   28c20:	68fa      	ldr	r2, [r7, #12]
   28c22:	3302      	adds	r3, #2
   28c24:	009b      	lsls	r3, r3, #2
   28c26:	18d3      	adds	r3, r2, r3
   28c28:	3304      	adds	r3, #4
   28c2a:	2200      	movs	r2, #0
   28c2c:	601a      	str	r2, [r3, #0]
   28c2e:	2327      	movs	r3, #39	; 0x27
   28c30:	18fb      	adds	r3, r7, r3
   28c32:	781a      	ldrb	r2, [r3, #0]
   28c34:	2327      	movs	r3, #39	; 0x27
   28c36:	18fb      	adds	r3, r7, r3
   28c38:	3201      	adds	r2, #1
   28c3a:	701a      	strb	r2, [r3, #0]
   28c3c:	2327      	movs	r3, #39	; 0x27
   28c3e:	18fb      	adds	r3, r7, r3
   28c40:	781b      	ldrb	r3, [r3, #0]
   28c42:	2b06      	cmp	r3, #6
   28c44:	d9e9      	bls.n	28c1a <spi_init+0xba>
   28c46:	68fb      	ldr	r3, [r7, #12]
   28c48:	2200      	movs	r2, #0
   28c4a:	62da      	str	r2, [r3, #44]	; 0x2c
   28c4c:	68fb      	ldr	r3, [r7, #12]
   28c4e:	2200      	movs	r2, #0
   28c50:	629a      	str	r2, [r3, #40]	; 0x28
   28c52:	68fb      	ldr	r3, [r7, #12]
   28c54:	2200      	movs	r2, #0
   28c56:	869a      	strh	r2, [r3, #52]	; 0x34
   28c58:	68fb      	ldr	r3, [r7, #12]
   28c5a:	2200      	movs	r2, #0
   28c5c:	861a      	strh	r2, [r3, #48]	; 0x30
   28c5e:	68fb      	ldr	r3, [r7, #12]
   28c60:	2236      	movs	r2, #54	; 0x36
   28c62:	2100      	movs	r1, #0
   28c64:	5499      	strb	r1, [r3, r2]
   28c66:	68fb      	ldr	r3, [r7, #12]
   28c68:	2237      	movs	r2, #55	; 0x37
   28c6a:	2100      	movs	r1, #0
   28c6c:	5499      	strb	r1, [r3, r2]
   28c6e:	68fb      	ldr	r3, [r7, #12]
   28c70:	2238      	movs	r2, #56	; 0x38
   28c72:	2100      	movs	r1, #0
   28c74:	5499      	strb	r1, [r3, r2]
   28c76:	68fb      	ldr	r3, [r7, #12]
   28c78:	2203      	movs	r2, #3
   28c7a:	725a      	strb	r2, [r3, #9]
   28c7c:	68fb      	ldr	r3, [r7, #12]
   28c7e:	2200      	movs	r2, #0
   28c80:	711a      	strb	r2, [r3, #4]
   28c82:	68fb      	ldr	r3, [r7, #12]
   28c84:	681b      	ldr	r3, [r3, #0]
   28c86:	2213      	movs	r2, #19
   28c88:	18bc      	adds	r4, r7, r2
   28c8a:	0018      	movs	r0, r3
   28c8c:	4b0e      	ldr	r3, [pc, #56]	; (28cc8 <spi_init+0x168>)
   28c8e:	4798      	blx	r3
   28c90:	0003      	movs	r3, r0
   28c92:	7023      	strb	r3, [r4, #0]
   28c94:	4a12      	ldr	r2, [pc, #72]	; (28ce0 <spi_init+0x180>)
   28c96:	2313      	movs	r3, #19
   28c98:	18fb      	adds	r3, r7, r3
   28c9a:	781b      	ldrb	r3, [r3, #0]
   28c9c:	0011      	movs	r1, r2
   28c9e:	0018      	movs	r0, r3
   28ca0:	4b10      	ldr	r3, [pc, #64]	; (28ce4 <spi_init+0x184>)
   28ca2:	4798      	blx	r3
   28ca4:	2313      	movs	r3, #19
   28ca6:	18fb      	adds	r3, r7, r3
   28ca8:	781a      	ldrb	r2, [r3, #0]
   28caa:	4b0f      	ldr	r3, [pc, #60]	; (28ce8 <spi_init+0x188>)
   28cac:	0092      	lsls	r2, r2, #2
   28cae:	68f9      	ldr	r1, [r7, #12]
   28cb0:	50d1      	str	r1, [r2, r3]
   28cb2:	687a      	ldr	r2, [r7, #4]
   28cb4:	68fb      	ldr	r3, [r7, #12]
   28cb6:	0011      	movs	r1, r2
   28cb8:	0018      	movs	r0, r3
   28cba:	4b0c      	ldr	r3, [pc, #48]	; (28cec <spi_init+0x18c>)
   28cbc:	4798      	blx	r3
   28cbe:	0003      	movs	r3, r0
   28cc0:	0018      	movs	r0, r3
   28cc2:	46bd      	mov	sp, r7
   28cc4:	b00b      	add	sp, #44	; 0x2c
   28cc6:	bd90      	pop	{r4, r7, pc}
   28cc8:	000282e1 	.word	0x000282e1
   28ccc:	0002859d 	.word	0x0002859d
   28cd0:	00028585 	.word	0x00028585
   28cd4:	0002ab71 	.word	0x0002ab71
   28cd8:	0002abb5 	.word	0x0002abb5
   28cdc:	00028099 	.word	0x00028099
   28ce0:	000291b9 	.word	0x000291b9
   28ce4:	00028345 	.word	0x00028345
   28ce8:	20005848 	.word	0x20005848
   28cec:	00028951 	.word	0x00028951

00028cf0 <spi_read_buffer_wait>:
   28cf0:	b590      	push	{r4, r7, lr}
   28cf2:	b087      	sub	sp, #28
   28cf4:	af00      	add	r7, sp, #0
   28cf6:	60f8      	str	r0, [r7, #12]
   28cf8:	60b9      	str	r1, [r7, #8]
   28cfa:	0019      	movs	r1, r3
   28cfc:	1dbb      	adds	r3, r7, #6
   28cfe:	801a      	strh	r2, [r3, #0]
   28d00:	1d3b      	adds	r3, r7, #4
   28d02:	1c0a      	adds	r2, r1, #0
   28d04:	801a      	strh	r2, [r3, #0]
   28d06:	68fb      	ldr	r3, [r7, #12]
   28d08:	2238      	movs	r2, #56	; 0x38
   28d0a:	5c9b      	ldrb	r3, [r3, r2]
   28d0c:	b2db      	uxtb	r3, r3
   28d0e:	2b05      	cmp	r3, #5
   28d10:	d101      	bne.n	28d16 <spi_read_buffer_wait+0x26>
   28d12:	2305      	movs	r3, #5
   28d14:	e07a      	b.n	28e0c <spi_read_buffer_wait+0x11c>
   28d16:	1dbb      	adds	r3, r7, #6
   28d18:	881b      	ldrh	r3, [r3, #0]
   28d1a:	2b00      	cmp	r3, #0
   28d1c:	d101      	bne.n	28d22 <spi_read_buffer_wait+0x32>
   28d1e:	2317      	movs	r3, #23
   28d20:	e074      	b.n	28e0c <spi_read_buffer_wait+0x11c>
   28d22:	68fb      	ldr	r3, [r7, #12]
   28d24:	79db      	ldrb	r3, [r3, #7]
   28d26:	2201      	movs	r2, #1
   28d28:	4053      	eors	r3, r2
   28d2a:	b2db      	uxtb	r3, r3
   28d2c:	2b00      	cmp	r3, #0
   28d2e:	d001      	beq.n	28d34 <spi_read_buffer_wait+0x44>
   28d30:	231c      	movs	r3, #28
   28d32:	e06b      	b.n	28e0c <spi_read_buffer_wait+0x11c>
   28d34:	2316      	movs	r3, #22
   28d36:	18fb      	adds	r3, r7, r3
   28d38:	2200      	movs	r2, #0
   28d3a:	801a      	strh	r2, [r3, #0]
   28d3c:	e05e      	b.n	28dfc <spi_read_buffer_wait+0x10c>
   28d3e:	68fb      	ldr	r3, [r7, #12]
   28d40:	795b      	ldrb	r3, [r3, #5]
   28d42:	2b01      	cmp	r3, #1
   28d44:	d112      	bne.n	28d6c <spi_read_buffer_wait+0x7c>
   28d46:	46c0      	nop			; (mov r8, r8)
   28d48:	68fb      	ldr	r3, [r7, #12]
   28d4a:	0018      	movs	r0, r3
   28d4c:	4b31      	ldr	r3, [pc, #196]	; (28e14 <spi_read_buffer_wait+0x124>)
   28d4e:	4798      	blx	r3
   28d50:	0003      	movs	r3, r0
   28d52:	001a      	movs	r2, r3
   28d54:	2301      	movs	r3, #1
   28d56:	4053      	eors	r3, r2
   28d58:	b2db      	uxtb	r3, r3
   28d5a:	2b00      	cmp	r3, #0
   28d5c:	d1f4      	bne.n	28d48 <spi_read_buffer_wait+0x58>
   28d5e:	1d3b      	adds	r3, r7, #4
   28d60:	881a      	ldrh	r2, [r3, #0]
   28d62:	68fb      	ldr	r3, [r7, #12]
   28d64:	0011      	movs	r1, r2
   28d66:	0018      	movs	r0, r3
   28d68:	4b2b      	ldr	r3, [pc, #172]	; (28e18 <spi_read_buffer_wait+0x128>)
   28d6a:	4798      	blx	r3
   28d6c:	46c0      	nop			; (mov r8, r8)
   28d6e:	68fb      	ldr	r3, [r7, #12]
   28d70:	0018      	movs	r0, r3
   28d72:	4b2a      	ldr	r3, [pc, #168]	; (28e1c <spi_read_buffer_wait+0x12c>)
   28d74:	4798      	blx	r3
   28d76:	0003      	movs	r3, r0
   28d78:	001a      	movs	r2, r3
   28d7a:	2301      	movs	r3, #1
   28d7c:	4053      	eors	r3, r2
   28d7e:	b2db      	uxtb	r3, r3
   28d80:	2b00      	cmp	r3, #0
   28d82:	d1f4      	bne.n	28d6e <spi_read_buffer_wait+0x7e>
   28d84:	2312      	movs	r3, #18
   28d86:	18fb      	adds	r3, r7, r3
   28d88:	2200      	movs	r2, #0
   28d8a:	801a      	strh	r2, [r3, #0]
   28d8c:	2315      	movs	r3, #21
   28d8e:	18fc      	adds	r4, r7, r3
   28d90:	2312      	movs	r3, #18
   28d92:	18fa      	adds	r2, r7, r3
   28d94:	68fb      	ldr	r3, [r7, #12]
   28d96:	0011      	movs	r1, r2
   28d98:	0018      	movs	r0, r3
   28d9a:	4b21      	ldr	r3, [pc, #132]	; (28e20 <spi_read_buffer_wait+0x130>)
   28d9c:	4798      	blx	r3
   28d9e:	0003      	movs	r3, r0
   28da0:	7023      	strb	r3, [r4, #0]
   28da2:	2315      	movs	r3, #21
   28da4:	18fb      	adds	r3, r7, r3
   28da6:	781b      	ldrb	r3, [r3, #0]
   28da8:	2b00      	cmp	r3, #0
   28daa:	d003      	beq.n	28db4 <spi_read_buffer_wait+0xc4>
   28dac:	2315      	movs	r3, #21
   28dae:	18fb      	adds	r3, r7, r3
   28db0:	781b      	ldrb	r3, [r3, #0]
   28db2:	e02b      	b.n	28e0c <spi_read_buffer_wait+0x11c>
   28db4:	2316      	movs	r3, #22
   28db6:	18fb      	adds	r3, r7, r3
   28db8:	881b      	ldrh	r3, [r3, #0]
   28dba:	2216      	movs	r2, #22
   28dbc:	18ba      	adds	r2, r7, r2
   28dbe:	1c59      	adds	r1, r3, #1
   28dc0:	8011      	strh	r1, [r2, #0]
   28dc2:	001a      	movs	r2, r3
   28dc4:	68bb      	ldr	r3, [r7, #8]
   28dc6:	189b      	adds	r3, r3, r2
   28dc8:	2212      	movs	r2, #18
   28dca:	18ba      	adds	r2, r7, r2
   28dcc:	8812      	ldrh	r2, [r2, #0]
   28dce:	b2d2      	uxtb	r2, r2
   28dd0:	701a      	strb	r2, [r3, #0]
   28dd2:	68fb      	ldr	r3, [r7, #12]
   28dd4:	799b      	ldrb	r3, [r3, #6]
   28dd6:	2b01      	cmp	r3, #1
   28dd8:	d110      	bne.n	28dfc <spi_read_buffer_wait+0x10c>
   28dda:	2316      	movs	r3, #22
   28ddc:	18fb      	adds	r3, r7, r3
   28dde:	881b      	ldrh	r3, [r3, #0]
   28de0:	2216      	movs	r2, #22
   28de2:	18ba      	adds	r2, r7, r2
   28de4:	1c59      	adds	r1, r3, #1
   28de6:	8011      	strh	r1, [r2, #0]
   28de8:	001a      	movs	r2, r3
   28dea:	68bb      	ldr	r3, [r7, #8]
   28dec:	189b      	adds	r3, r3, r2
   28dee:	2212      	movs	r2, #18
   28df0:	18ba      	adds	r2, r7, r2
   28df2:	8812      	ldrh	r2, [r2, #0]
   28df4:	0a12      	lsrs	r2, r2, #8
   28df6:	b292      	uxth	r2, r2
   28df8:	b2d2      	uxtb	r2, r2
   28dfa:	701a      	strb	r2, [r3, #0]
   28dfc:	1dbb      	adds	r3, r7, #6
   28dfe:	881b      	ldrh	r3, [r3, #0]
   28e00:	1dba      	adds	r2, r7, #6
   28e02:	1e59      	subs	r1, r3, #1
   28e04:	8011      	strh	r1, [r2, #0]
   28e06:	2b00      	cmp	r3, #0
   28e08:	d199      	bne.n	28d3e <spi_read_buffer_wait+0x4e>
   28e0a:	2300      	movs	r3, #0
   28e0c:	0018      	movs	r0, r3
   28e0e:	46bd      	mov	sp, r7
   28e10:	b007      	add	sp, #28
   28e12:	bd90      	pop	{r4, r7, pc}
   28e14:	00028769 	.word	0x00028769
   28e18:	000287b9 	.word	0x000287b9
   28e1c:	00028791 	.word	0x00028791
   28e20:	00028801 	.word	0x00028801

00028e24 <spi_select_slave>:
   28e24:	b580      	push	{r7, lr}
   28e26:	b086      	sub	sp, #24
   28e28:	af00      	add	r7, sp, #0
   28e2a:	60f8      	str	r0, [r7, #12]
   28e2c:	60b9      	str	r1, [r7, #8]
   28e2e:	1dfb      	adds	r3, r7, #7
   28e30:	701a      	strb	r2, [r3, #0]
   28e32:	68fb      	ldr	r3, [r7, #12]
   28e34:	795b      	ldrb	r3, [r3, #5]
   28e36:	2b01      	cmp	r3, #1
   28e38:	d001      	beq.n	28e3e <spi_select_slave+0x1a>
   28e3a:	2315      	movs	r3, #21
   28e3c:	e05c      	b.n	28ef8 <spi_select_slave+0xd4>
   28e3e:	68fb      	ldr	r3, [r7, #12]
   28e40:	7a1b      	ldrb	r3, [r3, #8]
   28e42:	2201      	movs	r2, #1
   28e44:	4053      	eors	r3, r2
   28e46:	b2db      	uxtb	r3, r3
   28e48:	2b00      	cmp	r3, #0
   28e4a:	d054      	beq.n	28ef6 <spi_select_slave+0xd2>
   28e4c:	1dfb      	adds	r3, r7, #7
   28e4e:	781b      	ldrb	r3, [r3, #0]
   28e50:	2b00      	cmp	r3, #0
   28e52:	d04a      	beq.n	28eea <spi_select_slave+0xc6>
   28e54:	68bb      	ldr	r3, [r7, #8]
   28e56:	785b      	ldrb	r3, [r3, #1]
   28e58:	2b00      	cmp	r3, #0
   28e5a:	d03f      	beq.n	28edc <spi_select_slave+0xb8>
   28e5c:	68fb      	ldr	r3, [r7, #12]
   28e5e:	0018      	movs	r0, r3
   28e60:	4b27      	ldr	r3, [pc, #156]	; (28f00 <spi_select_slave+0xdc>)
   28e62:	4798      	blx	r3
   28e64:	0003      	movs	r3, r0
   28e66:	001a      	movs	r2, r3
   28e68:	2301      	movs	r3, #1
   28e6a:	4053      	eors	r3, r2
   28e6c:	b2db      	uxtb	r3, r3
   28e6e:	2b00      	cmp	r3, #0
   28e70:	d007      	beq.n	28e82 <spi_select_slave+0x5e>
   28e72:	68bb      	ldr	r3, [r7, #8]
   28e74:	781b      	ldrb	r3, [r3, #0]
   28e76:	2101      	movs	r1, #1
   28e78:	0018      	movs	r0, r3
   28e7a:	4b22      	ldr	r3, [pc, #136]	; (28f04 <spi_select_slave+0xe0>)
   28e7c:	4798      	blx	r3
   28e7e:	2305      	movs	r3, #5
   28e80:	e03a      	b.n	28ef8 <spi_select_slave+0xd4>
   28e82:	68bb      	ldr	r3, [r7, #8]
   28e84:	781b      	ldrb	r3, [r3, #0]
   28e86:	2100      	movs	r1, #0
   28e88:	0018      	movs	r0, r3
   28e8a:	4b1e      	ldr	r3, [pc, #120]	; (28f04 <spi_select_slave+0xe0>)
   28e8c:	4798      	blx	r3
   28e8e:	68bb      	ldr	r3, [r7, #8]
   28e90:	789b      	ldrb	r3, [r3, #2]
   28e92:	b29a      	uxth	r2, r3
   28e94:	68fb      	ldr	r3, [r7, #12]
   28e96:	0011      	movs	r1, r2
   28e98:	0018      	movs	r0, r3
   28e9a:	4b1b      	ldr	r3, [pc, #108]	; (28f08 <spi_select_slave+0xe4>)
   28e9c:	4798      	blx	r3
   28e9e:	68fb      	ldr	r3, [r7, #12]
   28ea0:	79db      	ldrb	r3, [r3, #7]
   28ea2:	2201      	movs	r2, #1
   28ea4:	4053      	eors	r3, r2
   28ea6:	b2db      	uxtb	r3, r3
   28ea8:	2b00      	cmp	r3, #0
   28eaa:	d024      	beq.n	28ef6 <spi_select_slave+0xd2>
   28eac:	46c0      	nop			; (mov r8, r8)
   28eae:	68fb      	ldr	r3, [r7, #12]
   28eb0:	0018      	movs	r0, r3
   28eb2:	4b16      	ldr	r3, [pc, #88]	; (28f0c <spi_select_slave+0xe8>)
   28eb4:	4798      	blx	r3
   28eb6:	0003      	movs	r3, r0
   28eb8:	001a      	movs	r2, r3
   28eba:	2301      	movs	r3, #1
   28ebc:	4053      	eors	r3, r2
   28ebe:	b2db      	uxtb	r3, r3
   28ec0:	2b00      	cmp	r3, #0
   28ec2:	d1f4      	bne.n	28eae <spi_select_slave+0x8a>
   28ec4:	2316      	movs	r3, #22
   28ec6:	18fb      	adds	r3, r7, r3
   28ec8:	2200      	movs	r2, #0
   28eca:	801a      	strh	r2, [r3, #0]
   28ecc:	2316      	movs	r3, #22
   28ece:	18fa      	adds	r2, r7, r3
   28ed0:	68fb      	ldr	r3, [r7, #12]
   28ed2:	0011      	movs	r1, r2
   28ed4:	0018      	movs	r0, r3
   28ed6:	4b0e      	ldr	r3, [pc, #56]	; (28f10 <spi_select_slave+0xec>)
   28ed8:	4798      	blx	r3
   28eda:	e00c      	b.n	28ef6 <spi_select_slave+0xd2>
   28edc:	68bb      	ldr	r3, [r7, #8]
   28ede:	781b      	ldrb	r3, [r3, #0]
   28ee0:	2100      	movs	r1, #0
   28ee2:	0018      	movs	r0, r3
   28ee4:	4b07      	ldr	r3, [pc, #28]	; (28f04 <spi_select_slave+0xe0>)
   28ee6:	4798      	blx	r3
   28ee8:	e005      	b.n	28ef6 <spi_select_slave+0xd2>
   28eea:	68bb      	ldr	r3, [r7, #8]
   28eec:	781b      	ldrb	r3, [r3, #0]
   28eee:	2101      	movs	r1, #1
   28ef0:	0018      	movs	r0, r3
   28ef2:	4b04      	ldr	r3, [pc, #16]	; (28f04 <spi_select_slave+0xe0>)
   28ef4:	4798      	blx	r3
   28ef6:	2300      	movs	r3, #0
   28ef8:	0018      	movs	r0, r3
   28efa:	46bd      	mov	sp, r7
   28efc:	b006      	add	sp, #24
   28efe:	bd80      	pop	{r7, pc}
   28f00:	00028769 	.word	0x00028769
   28f04:	00028531 	.word	0x00028531
   28f08:	000287b9 	.word	0x000287b9
   28f0c:	00028791 	.word	0x00028791
   28f10:	00028801 	.word	0x00028801

00028f14 <spi_write_buffer_wait>:
   28f14:	b580      	push	{r7, lr}
   28f16:	b086      	sub	sp, #24
   28f18:	af00      	add	r7, sp, #0
   28f1a:	60f8      	str	r0, [r7, #12]
   28f1c:	60b9      	str	r1, [r7, #8]
   28f1e:	1dbb      	adds	r3, r7, #6
   28f20:	801a      	strh	r2, [r3, #0]
   28f22:	68fb      	ldr	r3, [r7, #12]
   28f24:	2238      	movs	r2, #56	; 0x38
   28f26:	5c9b      	ldrb	r3, [r3, r2]
   28f28:	b2db      	uxtb	r3, r3
   28f2a:	2b05      	cmp	r3, #5
   28f2c:	d101      	bne.n	28f32 <spi_write_buffer_wait+0x1e>
   28f2e:	2305      	movs	r3, #5
   28f30:	e087      	b.n	29042 <spi_write_buffer_wait+0x12e>
   28f32:	1dbb      	adds	r3, r7, #6
   28f34:	881b      	ldrh	r3, [r3, #0]
   28f36:	2b00      	cmp	r3, #0
   28f38:	d101      	bne.n	28f3e <spi_write_buffer_wait+0x2a>
   28f3a:	2317      	movs	r3, #23
   28f3c:	e081      	b.n	29042 <spi_write_buffer_wait+0x12e>
   28f3e:	2316      	movs	r3, #22
   28f40:	18fb      	adds	r3, r7, r3
   28f42:	2200      	movs	r2, #0
   28f44:	801a      	strh	r2, [r3, #0]
   28f46:	2314      	movs	r3, #20
   28f48:	18fb      	adds	r3, r7, r3
   28f4a:	1dba      	adds	r2, r7, #6
   28f4c:	8812      	ldrh	r2, [r2, #0]
   28f4e:	801a      	strh	r2, [r3, #0]
   28f50:	e05f      	b.n	29012 <spi_write_buffer_wait+0xfe>
   28f52:	46c0      	nop			; (mov r8, r8)
   28f54:	68fb      	ldr	r3, [r7, #12]
   28f56:	0018      	movs	r0, r3
   28f58:	4b3c      	ldr	r3, [pc, #240]	; (2904c <spi_write_buffer_wait+0x138>)
   28f5a:	4798      	blx	r3
   28f5c:	0003      	movs	r3, r0
   28f5e:	001a      	movs	r2, r3
   28f60:	2301      	movs	r3, #1
   28f62:	4053      	eors	r3, r2
   28f64:	b2db      	uxtb	r3, r3
   28f66:	2b00      	cmp	r3, #0
   28f68:	d1f4      	bne.n	28f54 <spi_write_buffer_wait+0x40>
   28f6a:	2316      	movs	r3, #22
   28f6c:	18fb      	adds	r3, r7, r3
   28f6e:	881b      	ldrh	r3, [r3, #0]
   28f70:	2216      	movs	r2, #22
   28f72:	18ba      	adds	r2, r7, r2
   28f74:	1c59      	adds	r1, r3, #1
   28f76:	8011      	strh	r1, [r2, #0]
   28f78:	001a      	movs	r2, r3
   28f7a:	68bb      	ldr	r3, [r7, #8]
   28f7c:	189b      	adds	r3, r3, r2
   28f7e:	781a      	ldrb	r2, [r3, #0]
   28f80:	2312      	movs	r3, #18
   28f82:	18fb      	adds	r3, r7, r3
   28f84:	801a      	strh	r2, [r3, #0]
   28f86:	68fb      	ldr	r3, [r7, #12]
   28f88:	799b      	ldrb	r3, [r3, #6]
   28f8a:	2b01      	cmp	r3, #1
   28f8c:	d115      	bne.n	28fba <spi_write_buffer_wait+0xa6>
   28f8e:	2316      	movs	r3, #22
   28f90:	18fb      	adds	r3, r7, r3
   28f92:	881b      	ldrh	r3, [r3, #0]
   28f94:	2216      	movs	r2, #22
   28f96:	18ba      	adds	r2, r7, r2
   28f98:	1c59      	adds	r1, r3, #1
   28f9a:	8011      	strh	r1, [r2, #0]
   28f9c:	001a      	movs	r2, r3
   28f9e:	68bb      	ldr	r3, [r7, #8]
   28fa0:	189b      	adds	r3, r3, r2
   28fa2:	781b      	ldrb	r3, [r3, #0]
   28fa4:	021b      	lsls	r3, r3, #8
   28fa6:	b21a      	sxth	r2, r3
   28fa8:	2312      	movs	r3, #18
   28faa:	18fb      	adds	r3, r7, r3
   28fac:	2100      	movs	r1, #0
   28fae:	5e5b      	ldrsh	r3, [r3, r1]
   28fb0:	4313      	orrs	r3, r2
   28fb2:	b21a      	sxth	r2, r3
   28fb4:	2312      	movs	r3, #18
   28fb6:	18fb      	adds	r3, r7, r3
   28fb8:	801a      	strh	r2, [r3, #0]
   28fba:	2312      	movs	r3, #18
   28fbc:	18fb      	adds	r3, r7, r3
   28fbe:	881a      	ldrh	r2, [r3, #0]
   28fc0:	68fb      	ldr	r3, [r7, #12]
   28fc2:	0011      	movs	r1, r2
   28fc4:	0018      	movs	r0, r3
   28fc6:	4b22      	ldr	r3, [pc, #136]	; (29050 <spi_write_buffer_wait+0x13c>)
   28fc8:	4798      	blx	r3
   28fca:	68fb      	ldr	r3, [r7, #12]
   28fcc:	79db      	ldrb	r3, [r3, #7]
   28fce:	2214      	movs	r2, #20
   28fd0:	18ba      	adds	r2, r7, r2
   28fd2:	2114      	movs	r1, #20
   28fd4:	1879      	adds	r1, r7, r1
   28fd6:	8809      	ldrh	r1, [r1, #0]
   28fd8:	8011      	strh	r1, [r2, #0]
   28fda:	2b00      	cmp	r3, #0
   28fdc:	d019      	beq.n	29012 <spi_write_buffer_wait+0xfe>
   28fde:	46c0      	nop			; (mov r8, r8)
   28fe0:	68fb      	ldr	r3, [r7, #12]
   28fe2:	0018      	movs	r0, r3
   28fe4:	4b1b      	ldr	r3, [pc, #108]	; (29054 <spi_write_buffer_wait+0x140>)
   28fe6:	4798      	blx	r3
   28fe8:	0003      	movs	r3, r0
   28fea:	001a      	movs	r2, r3
   28fec:	2301      	movs	r3, #1
   28fee:	4053      	eors	r3, r2
   28ff0:	b2db      	uxtb	r3, r3
   28ff2:	2b00      	cmp	r3, #0
   28ff4:	d1f4      	bne.n	28fe0 <spi_write_buffer_wait+0xcc>
   28ff6:	2310      	movs	r3, #16
   28ff8:	18fa      	adds	r2, r7, r3
   28ffa:	68fb      	ldr	r3, [r7, #12]
   28ffc:	0011      	movs	r1, r2
   28ffe:	0018      	movs	r0, r3
   29000:	4b15      	ldr	r3, [pc, #84]	; (29058 <spi_write_buffer_wait+0x144>)
   29002:	4798      	blx	r3
   29004:	2314      	movs	r3, #20
   29006:	18fb      	adds	r3, r7, r3
   29008:	881a      	ldrh	r2, [r3, #0]
   2900a:	2314      	movs	r3, #20
   2900c:	18fb      	adds	r3, r7, r3
   2900e:	3a01      	subs	r2, #1
   29010:	801a      	strh	r2, [r3, #0]
   29012:	1dbb      	adds	r3, r7, #6
   29014:	881b      	ldrh	r3, [r3, #0]
   29016:	1dba      	adds	r2, r7, #6
   29018:	1e59      	subs	r1, r3, #1
   2901a:	8011      	strh	r1, [r2, #0]
   2901c:	2b00      	cmp	r3, #0
   2901e:	d198      	bne.n	28f52 <spi_write_buffer_wait+0x3e>
   29020:	68fb      	ldr	r3, [r7, #12]
   29022:	795b      	ldrb	r3, [r3, #5]
   29024:	2b01      	cmp	r3, #1
   29026:	d10b      	bne.n	29040 <spi_write_buffer_wait+0x12c>
   29028:	46c0      	nop			; (mov r8, r8)
   2902a:	68fb      	ldr	r3, [r7, #12]
   2902c:	0018      	movs	r0, r3
   2902e:	4b0b      	ldr	r3, [pc, #44]	; (2905c <spi_write_buffer_wait+0x148>)
   29030:	4798      	blx	r3
   29032:	0003      	movs	r3, r0
   29034:	001a      	movs	r2, r3
   29036:	2301      	movs	r3, #1
   29038:	4053      	eors	r3, r2
   2903a:	b2db      	uxtb	r3, r3
   2903c:	2b00      	cmp	r3, #0
   2903e:	d1f4      	bne.n	2902a <spi_write_buffer_wait+0x116>
   29040:	2300      	movs	r3, #0
   29042:	0018      	movs	r0, r3
   29044:	46bd      	mov	sp, r7
   29046:	b006      	add	sp, #24
   29048:	bd80      	pop	{r7, pc}
   2904a:	46c0      	nop			; (mov r8, r8)
   2904c:	00028769 	.word	0x00028769
   29050:	000287b9 	.word	0x000287b9
   29054:	00028791 	.word	0x00028791
   29058:	00028801 	.word	0x00028801
   2905c:	00028741 	.word	0x00028741

00029060 <_spi_write>:
   29060:	b580      	push	{r7, lr}
   29062:	b084      	sub	sp, #16
   29064:	af00      	add	r7, sp, #0
   29066:	6078      	str	r0, [r7, #4]
   29068:	687b      	ldr	r3, [r7, #4]
   2906a:	681b      	ldr	r3, [r3, #0]
   2906c:	60bb      	str	r3, [r7, #8]
   2906e:	687b      	ldr	r3, [r7, #4]
   29070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   29072:	781b      	ldrb	r3, [r3, #0]
   29074:	b2da      	uxtb	r2, r3
   29076:	230e      	movs	r3, #14
   29078:	18fb      	adds	r3, r7, r3
   2907a:	801a      	strh	r2, [r3, #0]
   2907c:	687b      	ldr	r3, [r7, #4]
   2907e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   29080:	1c5a      	adds	r2, r3, #1
   29082:	687b      	ldr	r3, [r7, #4]
   29084:	62da      	str	r2, [r3, #44]	; 0x2c
   29086:	687b      	ldr	r3, [r7, #4]
   29088:	799b      	ldrb	r3, [r3, #6]
   2908a:	2b01      	cmp	r3, #1
   2908c:	d113      	bne.n	290b6 <_spi_write+0x56>
   2908e:	687b      	ldr	r3, [r7, #4]
   29090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   29092:	781b      	ldrb	r3, [r3, #0]
   29094:	b2db      	uxtb	r3, r3
   29096:	021b      	lsls	r3, r3, #8
   29098:	b21a      	sxth	r2, r3
   2909a:	230e      	movs	r3, #14
   2909c:	18fb      	adds	r3, r7, r3
   2909e:	2100      	movs	r1, #0
   290a0:	5e5b      	ldrsh	r3, [r3, r1]
   290a2:	4313      	orrs	r3, r2
   290a4:	b21a      	sxth	r2, r3
   290a6:	230e      	movs	r3, #14
   290a8:	18fb      	adds	r3, r7, r3
   290aa:	801a      	strh	r2, [r3, #0]
   290ac:	687b      	ldr	r3, [r7, #4]
   290ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   290b0:	1c5a      	adds	r2, r3, #1
   290b2:	687b      	ldr	r3, [r7, #4]
   290b4:	62da      	str	r2, [r3, #44]	; 0x2c
   290b6:	230e      	movs	r3, #14
   290b8:	18fb      	adds	r3, r7, r3
   290ba:	881b      	ldrh	r3, [r3, #0]
   290bc:	05db      	lsls	r3, r3, #23
   290be:	0dda      	lsrs	r2, r3, #23
   290c0:	68bb      	ldr	r3, [r7, #8]
   290c2:	629a      	str	r2, [r3, #40]	; 0x28
   290c4:	687b      	ldr	r3, [r7, #4]
   290c6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   290c8:	b29b      	uxth	r3, r3
   290ca:	3b01      	subs	r3, #1
   290cc:	b29a      	uxth	r2, r3
   290ce:	687b      	ldr	r3, [r7, #4]
   290d0:	869a      	strh	r2, [r3, #52]	; 0x34
   290d2:	46c0      	nop			; (mov r8, r8)
   290d4:	46bd      	mov	sp, r7
   290d6:	b004      	add	sp, #16
   290d8:	bd80      	pop	{r7, pc}
	...

000290dc <_spi_write_dummy>:
   290dc:	b580      	push	{r7, lr}
   290de:	b084      	sub	sp, #16
   290e0:	af00      	add	r7, sp, #0
   290e2:	6078      	str	r0, [r7, #4]
   290e4:	687b      	ldr	r3, [r7, #4]
   290e6:	681b      	ldr	r3, [r3, #0]
   290e8:	60fb      	str	r3, [r7, #12]
   290ea:	4b08      	ldr	r3, [pc, #32]	; (2910c <_spi_write_dummy+0x30>)
   290ec:	881b      	ldrh	r3, [r3, #0]
   290ee:	001a      	movs	r2, r3
   290f0:	68fb      	ldr	r3, [r7, #12]
   290f2:	629a      	str	r2, [r3, #40]	; 0x28
   290f4:	687b      	ldr	r3, [r7, #4]
   290f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   290f8:	b29b      	uxth	r3, r3
   290fa:	3b01      	subs	r3, #1
   290fc:	b29a      	uxth	r2, r3
   290fe:	687b      	ldr	r3, [r7, #4]
   29100:	865a      	strh	r2, [r3, #50]	; 0x32
   29102:	46c0      	nop			; (mov r8, r8)
   29104:	46bd      	mov	sp, r7
   29106:	b004      	add	sp, #16
   29108:	bd80      	pop	{r7, pc}
   2910a:	46c0      	nop			; (mov r8, r8)
   2910c:	20005860 	.word	0x20005860

00029110 <_spi_read_dummy>:
   29110:	b580      	push	{r7, lr}
   29112:	b084      	sub	sp, #16
   29114:	af00      	add	r7, sp, #0
   29116:	6078      	str	r0, [r7, #4]
   29118:	687b      	ldr	r3, [r7, #4]
   2911a:	681b      	ldr	r3, [r3, #0]
   2911c:	60fb      	str	r3, [r7, #12]
   2911e:	230a      	movs	r3, #10
   29120:	18fb      	adds	r3, r7, r3
   29122:	2200      	movs	r2, #0
   29124:	801a      	strh	r2, [r3, #0]
   29126:	68fb      	ldr	r3, [r7, #12]
   29128:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2912a:	230a      	movs	r3, #10
   2912c:	18fb      	adds	r3, r7, r3
   2912e:	801a      	strh	r2, [r3, #0]
   29130:	687b      	ldr	r3, [r7, #4]
   29132:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   29134:	b29b      	uxth	r3, r3
   29136:	3b01      	subs	r3, #1
   29138:	b29a      	uxth	r2, r3
   2913a:	687b      	ldr	r3, [r7, #4]
   2913c:	865a      	strh	r2, [r3, #50]	; 0x32
   2913e:	46c0      	nop			; (mov r8, r8)
   29140:	46bd      	mov	sp, r7
   29142:	b004      	add	sp, #16
   29144:	bd80      	pop	{r7, pc}

00029146 <_spi_read>:
   29146:	b580      	push	{r7, lr}
   29148:	b084      	sub	sp, #16
   2914a:	af00      	add	r7, sp, #0
   2914c:	6078      	str	r0, [r7, #4]
   2914e:	687b      	ldr	r3, [r7, #4]
   29150:	681b      	ldr	r3, [r3, #0]
   29152:	60fb      	str	r3, [r7, #12]
   29154:	68fb      	ldr	r3, [r7, #12]
   29156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29158:	b29a      	uxth	r2, r3
   2915a:	230a      	movs	r3, #10
   2915c:	18fb      	adds	r3, r7, r3
   2915e:	05d2      	lsls	r2, r2, #23
   29160:	0dd2      	lsrs	r2, r2, #23
   29162:	801a      	strh	r2, [r3, #0]
   29164:	687b      	ldr	r3, [r7, #4]
   29166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29168:	220a      	movs	r2, #10
   2916a:	18ba      	adds	r2, r7, r2
   2916c:	8812      	ldrh	r2, [r2, #0]
   2916e:	b2d2      	uxtb	r2, r2
   29170:	701a      	strb	r2, [r3, #0]
   29172:	687b      	ldr	r3, [r7, #4]
   29174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29176:	1c5a      	adds	r2, r3, #1
   29178:	687b      	ldr	r3, [r7, #4]
   2917a:	629a      	str	r2, [r3, #40]	; 0x28
   2917c:	687b      	ldr	r3, [r7, #4]
   2917e:	799b      	ldrb	r3, [r3, #6]
   29180:	2b01      	cmp	r3, #1
   29182:	d10d      	bne.n	291a0 <_spi_read+0x5a>
   29184:	687b      	ldr	r3, [r7, #4]
   29186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29188:	220a      	movs	r2, #10
   2918a:	18ba      	adds	r2, r7, r2
   2918c:	8812      	ldrh	r2, [r2, #0]
   2918e:	0a12      	lsrs	r2, r2, #8
   29190:	b292      	uxth	r2, r2
   29192:	b2d2      	uxtb	r2, r2
   29194:	701a      	strb	r2, [r3, #0]
   29196:	687b      	ldr	r3, [r7, #4]
   29198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2919a:	1c5a      	adds	r2, r3, #1
   2919c:	687b      	ldr	r3, [r7, #4]
   2919e:	629a      	str	r2, [r3, #40]	; 0x28
   291a0:	687b      	ldr	r3, [r7, #4]
   291a2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   291a4:	b29b      	uxth	r3, r3
   291a6:	3b01      	subs	r3, #1
   291a8:	b29a      	uxth	r2, r3
   291aa:	687b      	ldr	r3, [r7, #4]
   291ac:	861a      	strh	r2, [r3, #48]	; 0x30
   291ae:	46c0      	nop			; (mov r8, r8)
   291b0:	46bd      	mov	sp, r7
   291b2:	b004      	add	sp, #16
   291b4:	bd80      	pop	{r7, pc}
	...

000291b8 <_spi_interrupt_handler>:
   291b8:	b580      	push	{r7, lr}
   291ba:	b086      	sub	sp, #24
   291bc:	af00      	add	r7, sp, #0
   291be:	0002      	movs	r2, r0
   291c0:	1dfb      	adds	r3, r7, #7
   291c2:	701a      	strb	r2, [r3, #0]
   291c4:	1dfb      	adds	r3, r7, #7
   291c6:	781a      	ldrb	r2, [r3, #0]
   291c8:	4b96      	ldr	r3, [pc, #600]	; (29424 <_spi_interrupt_handler+0x26c>)
   291ca:	0092      	lsls	r2, r2, #2
   291cc:	58d3      	ldr	r3, [r2, r3]
   291ce:	617b      	str	r3, [r7, #20]
   291d0:	697b      	ldr	r3, [r7, #20]
   291d2:	681b      	ldr	r3, [r3, #0]
   291d4:	613b      	str	r3, [r7, #16]
   291d6:	697b      	ldr	r3, [r7, #20]
   291d8:	2237      	movs	r2, #55	; 0x37
   291da:	5c9a      	ldrb	r2, [r3, r2]
   291dc:	697b      	ldr	r3, [r7, #20]
   291de:	2136      	movs	r1, #54	; 0x36
   291e0:	5c59      	ldrb	r1, [r3, r1]
   291e2:	230f      	movs	r3, #15
   291e4:	18fb      	adds	r3, r7, r3
   291e6:	400a      	ands	r2, r1
   291e8:	701a      	strb	r2, [r3, #0]
   291ea:	693b      	ldr	r3, [r7, #16]
   291ec:	7e1b      	ldrb	r3, [r3, #24]
   291ee:	b2da      	uxtb	r2, r3
   291f0:	230c      	movs	r3, #12
   291f2:	18fb      	adds	r3, r7, r3
   291f4:	801a      	strh	r2, [r3, #0]
   291f6:	693b      	ldr	r3, [r7, #16]
   291f8:	7d9b      	ldrb	r3, [r3, #22]
   291fa:	b2db      	uxtb	r3, r3
   291fc:	b29a      	uxth	r2, r3
   291fe:	230c      	movs	r3, #12
   29200:	18fb      	adds	r3, r7, r3
   29202:	210c      	movs	r1, #12
   29204:	1879      	adds	r1, r7, r1
   29206:	8809      	ldrh	r1, [r1, #0]
   29208:	400a      	ands	r2, r1
   2920a:	801a      	strh	r2, [r3, #0]
   2920c:	230c      	movs	r3, #12
   2920e:	18fb      	adds	r3, r7, r3
   29210:	881b      	ldrh	r3, [r3, #0]
   29212:	2201      	movs	r2, #1
   29214:	4013      	ands	r3, r2
   29216:	d038      	beq.n	2928a <_spi_interrupt_handler+0xd2>
   29218:	697b      	ldr	r3, [r7, #20]
   2921a:	795b      	ldrb	r3, [r3, #5]
   2921c:	2b01      	cmp	r3, #1
   2921e:	d110      	bne.n	29242 <_spi_interrupt_handler+0x8a>
   29220:	697b      	ldr	r3, [r7, #20]
   29222:	7a5b      	ldrb	r3, [r3, #9]
   29224:	b2db      	uxtb	r3, r3
   29226:	2b00      	cmp	r3, #0
   29228:	d10b      	bne.n	29242 <_spi_interrupt_handler+0x8a>
   2922a:	697b      	ldr	r3, [r7, #20]
   2922c:	0018      	movs	r0, r3
   2922e:	4b7e      	ldr	r3, [pc, #504]	; (29428 <_spi_interrupt_handler+0x270>)
   29230:	4798      	blx	r3
   29232:	697b      	ldr	r3, [r7, #20]
   29234:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   29236:	b29b      	uxth	r3, r3
   29238:	2b00      	cmp	r3, #0
   2923a:	d102      	bne.n	29242 <_spi_interrupt_handler+0x8a>
   2923c:	693b      	ldr	r3, [r7, #16]
   2923e:	2201      	movs	r2, #1
   29240:	751a      	strb	r2, [r3, #20]
   29242:	697b      	ldr	r3, [r7, #20]
   29244:	795b      	ldrb	r3, [r3, #5]
   29246:	2b01      	cmp	r3, #1
   29248:	d11f      	bne.n	2928a <_spi_interrupt_handler+0xd2>
   2924a:	697b      	ldr	r3, [r7, #20]
   2924c:	7a5b      	ldrb	r3, [r3, #9]
   2924e:	b2db      	uxtb	r3, r3
   29250:	2b00      	cmp	r3, #0
   29252:	d01a      	beq.n	2928a <_spi_interrupt_handler+0xd2>
   29254:	697b      	ldr	r3, [r7, #20]
   29256:	0018      	movs	r0, r3
   29258:	4b74      	ldr	r3, [pc, #464]	; (2942c <_spi_interrupt_handler+0x274>)
   2925a:	4798      	blx	r3
   2925c:	697b      	ldr	r3, [r7, #20]
   2925e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   29260:	b29b      	uxth	r3, r3
   29262:	2b00      	cmp	r3, #0
   29264:	d111      	bne.n	2928a <_spi_interrupt_handler+0xd2>
   29266:	693b      	ldr	r3, [r7, #16]
   29268:	2201      	movs	r2, #1
   2926a:	751a      	strb	r2, [r3, #20]
   2926c:	697b      	ldr	r3, [r7, #20]
   2926e:	7a5b      	ldrb	r3, [r3, #9]
   29270:	b2db      	uxtb	r3, r3
   29272:	2b01      	cmp	r3, #1
   29274:	d109      	bne.n	2928a <_spi_interrupt_handler+0xd2>
   29276:	697b      	ldr	r3, [r7, #20]
   29278:	79db      	ldrb	r3, [r3, #7]
   2927a:	2201      	movs	r2, #1
   2927c:	4053      	eors	r3, r2
   2927e:	b2db      	uxtb	r3, r3
   29280:	2b00      	cmp	r3, #0
   29282:	d002      	beq.n	2928a <_spi_interrupt_handler+0xd2>
   29284:	693b      	ldr	r3, [r7, #16]
   29286:	2202      	movs	r2, #2
   29288:	759a      	strb	r2, [r3, #22]
   2928a:	230c      	movs	r3, #12
   2928c:	18fb      	adds	r3, r7, r3
   2928e:	881b      	ldrh	r3, [r3, #0]
   29290:	2204      	movs	r2, #4
   29292:	4013      	ands	r3, r2
   29294:	d100      	bne.n	29298 <_spi_interrupt_handler+0xe0>
   29296:	e07e      	b.n	29396 <_spi_interrupt_handler+0x1de>
   29298:	693b      	ldr	r3, [r7, #16]
   2929a:	8b5b      	ldrh	r3, [r3, #26]
   2929c:	b29b      	uxth	r3, r3
   2929e:	001a      	movs	r2, r3
   292a0:	2304      	movs	r3, #4
   292a2:	4013      	ands	r3, r2
   292a4:	d022      	beq.n	292ec <_spi_interrupt_handler+0x134>
   292a6:	697b      	ldr	r3, [r7, #20]
   292a8:	7a5b      	ldrb	r3, [r3, #9]
   292aa:	b2db      	uxtb	r3, r3
   292ac:	2b01      	cmp	r3, #1
   292ae:	d014      	beq.n	292da <_spi_interrupt_handler+0x122>
   292b0:	697b      	ldr	r3, [r7, #20]
   292b2:	2238      	movs	r2, #56	; 0x38
   292b4:	211e      	movs	r1, #30
   292b6:	5499      	strb	r1, [r3, r2]
   292b8:	697b      	ldr	r3, [r7, #20]
   292ba:	2203      	movs	r2, #3
   292bc:	725a      	strb	r2, [r3, #9]
   292be:	693b      	ldr	r3, [r7, #16]
   292c0:	2205      	movs	r2, #5
   292c2:	751a      	strb	r2, [r3, #20]
   292c4:	230f      	movs	r3, #15
   292c6:	18fb      	adds	r3, r7, r3
   292c8:	781b      	ldrb	r3, [r3, #0]
   292ca:	2208      	movs	r2, #8
   292cc:	4013      	ands	r3, r2
   292ce:	d004      	beq.n	292da <_spi_interrupt_handler+0x122>
   292d0:	697b      	ldr	r3, [r7, #20]
   292d2:	699b      	ldr	r3, [r3, #24]
   292d4:	697a      	ldr	r2, [r7, #20]
   292d6:	0010      	movs	r0, r2
   292d8:	4798      	blx	r3
   292da:	693b      	ldr	r3, [r7, #16]
   292dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   292de:	230a      	movs	r3, #10
   292e0:	18fb      	adds	r3, r7, r3
   292e2:	801a      	strh	r2, [r3, #0]
   292e4:	693b      	ldr	r3, [r7, #16]
   292e6:	2204      	movs	r2, #4
   292e8:	835a      	strh	r2, [r3, #26]
   292ea:	e054      	b.n	29396 <_spi_interrupt_handler+0x1de>
   292ec:	697b      	ldr	r3, [r7, #20]
   292ee:	7a5b      	ldrb	r3, [r3, #9]
   292f0:	b2db      	uxtb	r3, r3
   292f2:	2b01      	cmp	r3, #1
   292f4:	d11e      	bne.n	29334 <_spi_interrupt_handler+0x17c>
   292f6:	697b      	ldr	r3, [r7, #20]
   292f8:	0018      	movs	r0, r3
   292fa:	4b4d      	ldr	r3, [pc, #308]	; (29430 <_spi_interrupt_handler+0x278>)
   292fc:	4798      	blx	r3
   292fe:	697b      	ldr	r3, [r7, #20]
   29300:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   29302:	b29b      	uxth	r3, r3
   29304:	2b00      	cmp	r3, #0
   29306:	d146      	bne.n	29396 <_spi_interrupt_handler+0x1de>
   29308:	693b      	ldr	r3, [r7, #16]
   2930a:	2204      	movs	r2, #4
   2930c:	751a      	strb	r2, [r3, #20]
   2930e:	697b      	ldr	r3, [r7, #20]
   29310:	2238      	movs	r2, #56	; 0x38
   29312:	2100      	movs	r1, #0
   29314:	5499      	strb	r1, [r3, r2]
   29316:	697b      	ldr	r3, [r7, #20]
   29318:	2203      	movs	r2, #3
   2931a:	725a      	strb	r2, [r3, #9]
   2931c:	230f      	movs	r3, #15
   2931e:	18fb      	adds	r3, r7, r3
   29320:	781b      	ldrb	r3, [r3, #0]
   29322:	2201      	movs	r2, #1
   29324:	4013      	ands	r3, r2
   29326:	d036      	beq.n	29396 <_spi_interrupt_handler+0x1de>
   29328:	697b      	ldr	r3, [r7, #20]
   2932a:	68db      	ldr	r3, [r3, #12]
   2932c:	697a      	ldr	r2, [r7, #20]
   2932e:	0010      	movs	r0, r2
   29330:	4798      	blx	r3
   29332:	e030      	b.n	29396 <_spi_interrupt_handler+0x1de>
   29334:	697b      	ldr	r3, [r7, #20]
   29336:	0018      	movs	r0, r3
   29338:	4b3e      	ldr	r3, [pc, #248]	; (29434 <_spi_interrupt_handler+0x27c>)
   2933a:	4798      	blx	r3
   2933c:	697b      	ldr	r3, [r7, #20]
   2933e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   29340:	b29b      	uxth	r3, r3
   29342:	2b00      	cmp	r3, #0
   29344:	d127      	bne.n	29396 <_spi_interrupt_handler+0x1de>
   29346:	697b      	ldr	r3, [r7, #20]
   29348:	2238      	movs	r2, #56	; 0x38
   2934a:	2100      	movs	r1, #0
   2934c:	5499      	strb	r1, [r3, r2]
   2934e:	693b      	ldr	r3, [r7, #16]
   29350:	2204      	movs	r2, #4
   29352:	751a      	strb	r2, [r3, #20]
   29354:	697b      	ldr	r3, [r7, #20]
   29356:	7a5b      	ldrb	r3, [r3, #9]
   29358:	b2db      	uxtb	r3, r3
   2935a:	2b02      	cmp	r3, #2
   2935c:	d10b      	bne.n	29376 <_spi_interrupt_handler+0x1be>
   2935e:	230f      	movs	r3, #15
   29360:	18fb      	adds	r3, r7, r3
   29362:	781b      	ldrb	r3, [r3, #0]
   29364:	2204      	movs	r2, #4
   29366:	4013      	ands	r3, r2
   29368:	d015      	beq.n	29396 <_spi_interrupt_handler+0x1de>
   2936a:	697b      	ldr	r3, [r7, #20]
   2936c:	695b      	ldr	r3, [r3, #20]
   2936e:	697a      	ldr	r2, [r7, #20]
   29370:	0010      	movs	r0, r2
   29372:	4798      	blx	r3
   29374:	e00f      	b.n	29396 <_spi_interrupt_handler+0x1de>
   29376:	697b      	ldr	r3, [r7, #20]
   29378:	7a5b      	ldrb	r3, [r3, #9]
   2937a:	b2db      	uxtb	r3, r3
   2937c:	2b00      	cmp	r3, #0
   2937e:	d10a      	bne.n	29396 <_spi_interrupt_handler+0x1de>
   29380:	230f      	movs	r3, #15
   29382:	18fb      	adds	r3, r7, r3
   29384:	781b      	ldrb	r3, [r3, #0]
   29386:	2202      	movs	r2, #2
   29388:	4013      	ands	r3, r2
   2938a:	d004      	beq.n	29396 <_spi_interrupt_handler+0x1de>
   2938c:	697b      	ldr	r3, [r7, #20]
   2938e:	691b      	ldr	r3, [r3, #16]
   29390:	697a      	ldr	r2, [r7, #20]
   29392:	0010      	movs	r0, r2
   29394:	4798      	blx	r3
   29396:	230c      	movs	r3, #12
   29398:	18fb      	adds	r3, r7, r3
   2939a:	881b      	ldrh	r3, [r3, #0]
   2939c:	2202      	movs	r2, #2
   2939e:	4013      	ands	r3, r2
   293a0:	d024      	beq.n	293ec <_spi_interrupt_handler+0x234>
   293a2:	697b      	ldr	r3, [r7, #20]
   293a4:	795b      	ldrb	r3, [r3, #5]
   293a6:	2b01      	cmp	r3, #1
   293a8:	d120      	bne.n	293ec <_spi_interrupt_handler+0x234>
   293aa:	697b      	ldr	r3, [r7, #20]
   293ac:	7a5b      	ldrb	r3, [r3, #9]
   293ae:	b2db      	uxtb	r3, r3
   293b0:	2b01      	cmp	r3, #1
   293b2:	d11b      	bne.n	293ec <_spi_interrupt_handler+0x234>
   293b4:	697b      	ldr	r3, [r7, #20]
   293b6:	79db      	ldrb	r3, [r3, #7]
   293b8:	2201      	movs	r2, #1
   293ba:	4053      	eors	r3, r2
   293bc:	b2db      	uxtb	r3, r3
   293be:	2b00      	cmp	r3, #0
   293c0:	d014      	beq.n	293ec <_spi_interrupt_handler+0x234>
   293c2:	693b      	ldr	r3, [r7, #16]
   293c4:	2202      	movs	r2, #2
   293c6:	751a      	strb	r2, [r3, #20]
   293c8:	697b      	ldr	r3, [r7, #20]
   293ca:	2203      	movs	r2, #3
   293cc:	725a      	strb	r2, [r3, #9]
   293ce:	697b      	ldr	r3, [r7, #20]
   293d0:	2238      	movs	r2, #56	; 0x38
   293d2:	2100      	movs	r1, #0
   293d4:	5499      	strb	r1, [r3, r2]
   293d6:	230f      	movs	r3, #15
   293d8:	18fb      	adds	r3, r7, r3
   293da:	781b      	ldrb	r3, [r3, #0]
   293dc:	2201      	movs	r2, #1
   293de:	4013      	ands	r3, r2
   293e0:	d004      	beq.n	293ec <_spi_interrupt_handler+0x234>
   293e2:	697b      	ldr	r3, [r7, #20]
   293e4:	68db      	ldr	r3, [r3, #12]
   293e6:	697a      	ldr	r2, [r7, #20]
   293e8:	0010      	movs	r0, r2
   293ea:	4798      	blx	r3
   293ec:	230c      	movs	r3, #12
   293ee:	18fb      	adds	r3, r7, r3
   293f0:	881b      	ldrh	r3, [r3, #0]
   293f2:	2280      	movs	r2, #128	; 0x80
   293f4:	4013      	ands	r3, r2
   293f6:	d010      	beq.n	2941a <_spi_interrupt_handler+0x262>
   293f8:	693b      	ldr	r3, [r7, #16]
   293fa:	2280      	movs	r2, #128	; 0x80
   293fc:	751a      	strb	r2, [r3, #20]
   293fe:	693b      	ldr	r3, [r7, #16]
   29400:	2280      	movs	r2, #128	; 0x80
   29402:	761a      	strb	r2, [r3, #24]
   29404:	230f      	movs	r3, #15
   29406:	18fb      	adds	r3, r7, r3
   29408:	781b      	ldrb	r3, [r3, #0]
   2940a:	2240      	movs	r2, #64	; 0x40
   2940c:	4013      	ands	r3, r2
   2940e:	d004      	beq.n	2941a <_spi_interrupt_handler+0x262>
   29410:	697b      	ldr	r3, [r7, #20]
   29412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   29414:	697a      	ldr	r2, [r7, #20]
   29416:	0010      	movs	r0, r2
   29418:	4798      	blx	r3
   2941a:	46c0      	nop			; (mov r8, r8)
   2941c:	46bd      	mov	sp, r7
   2941e:	b006      	add	sp, #24
   29420:	bd80      	pop	{r7, pc}
   29422:	46c0      	nop			; (mov r8, r8)
   29424:	20005848 	.word	0x20005848
   29428:	000290dd 	.word	0x000290dd
   2942c:	00029061 	.word	0x00029061
   29430:	00029111 	.word	0x00029111
   29434:	00029147 	.word	0x00029147

00029438 <system_gclk_chan_get_config_defaults>:
   29438:	b580      	push	{r7, lr}
   2943a:	b082      	sub	sp, #8
   2943c:	af00      	add	r7, sp, #0
   2943e:	6078      	str	r0, [r7, #4]
   29440:	687b      	ldr	r3, [r7, #4]
   29442:	2200      	movs	r2, #0
   29444:	701a      	strb	r2, [r3, #0]
   29446:	46c0      	nop			; (mov r8, r8)
   29448:	46bd      	mov	sp, r7
   2944a:	b002      	add	sp, #8
   2944c:	bd80      	pop	{r7, pc}
	...

00029450 <system_apb_clock_set_mask>:
   29450:	b580      	push	{r7, lr}
   29452:	b082      	sub	sp, #8
   29454:	af00      	add	r7, sp, #0
   29456:	0002      	movs	r2, r0
   29458:	6039      	str	r1, [r7, #0]
   2945a:	1dfb      	adds	r3, r7, #7
   2945c:	701a      	strb	r2, [r3, #0]
   2945e:	1dfb      	adds	r3, r7, #7
   29460:	781b      	ldrb	r3, [r3, #0]
   29462:	2b01      	cmp	r3, #1
   29464:	d00a      	beq.n	2947c <system_apb_clock_set_mask+0x2c>
   29466:	2b02      	cmp	r3, #2
   29468:	d00f      	beq.n	2948a <system_apb_clock_set_mask+0x3a>
   2946a:	2b00      	cmp	r3, #0
   2946c:	d114      	bne.n	29498 <system_apb_clock_set_mask+0x48>
   2946e:	4b0e      	ldr	r3, [pc, #56]	; (294a8 <system_apb_clock_set_mask+0x58>)
   29470:	4a0d      	ldr	r2, [pc, #52]	; (294a8 <system_apb_clock_set_mask+0x58>)
   29472:	6991      	ldr	r1, [r2, #24]
   29474:	683a      	ldr	r2, [r7, #0]
   29476:	430a      	orrs	r2, r1
   29478:	619a      	str	r2, [r3, #24]
   2947a:	e00f      	b.n	2949c <system_apb_clock_set_mask+0x4c>
   2947c:	4b0a      	ldr	r3, [pc, #40]	; (294a8 <system_apb_clock_set_mask+0x58>)
   2947e:	4a0a      	ldr	r2, [pc, #40]	; (294a8 <system_apb_clock_set_mask+0x58>)
   29480:	69d1      	ldr	r1, [r2, #28]
   29482:	683a      	ldr	r2, [r7, #0]
   29484:	430a      	orrs	r2, r1
   29486:	61da      	str	r2, [r3, #28]
   29488:	e008      	b.n	2949c <system_apb_clock_set_mask+0x4c>
   2948a:	4b07      	ldr	r3, [pc, #28]	; (294a8 <system_apb_clock_set_mask+0x58>)
   2948c:	4a06      	ldr	r2, [pc, #24]	; (294a8 <system_apb_clock_set_mask+0x58>)
   2948e:	6a11      	ldr	r1, [r2, #32]
   29490:	683a      	ldr	r2, [r7, #0]
   29492:	430a      	orrs	r2, r1
   29494:	621a      	str	r2, [r3, #32]
   29496:	e001      	b.n	2949c <system_apb_clock_set_mask+0x4c>
   29498:	2317      	movs	r3, #23
   2949a:	e000      	b.n	2949e <system_apb_clock_set_mask+0x4e>
   2949c:	2300      	movs	r3, #0
   2949e:	0018      	movs	r0, r3
   294a0:	46bd      	mov	sp, r7
   294a2:	b002      	add	sp, #8
   294a4:	bd80      	pop	{r7, pc}
   294a6:	46c0      	nop			; (mov r8, r8)
   294a8:	40000400 	.word	0x40000400

000294ac <system_pinmux_get_config_defaults>:
   294ac:	b580      	push	{r7, lr}
   294ae:	b082      	sub	sp, #8
   294b0:	af00      	add	r7, sp, #0
   294b2:	6078      	str	r0, [r7, #4]
   294b4:	687b      	ldr	r3, [r7, #4]
   294b6:	2280      	movs	r2, #128	; 0x80
   294b8:	701a      	strb	r2, [r3, #0]
   294ba:	687b      	ldr	r3, [r7, #4]
   294bc:	2200      	movs	r2, #0
   294be:	705a      	strb	r2, [r3, #1]
   294c0:	687b      	ldr	r3, [r7, #4]
   294c2:	2201      	movs	r2, #1
   294c4:	709a      	strb	r2, [r3, #2]
   294c6:	687b      	ldr	r3, [r7, #4]
   294c8:	2200      	movs	r2, #0
   294ca:	70da      	strb	r2, [r3, #3]
   294cc:	46c0      	nop			; (mov r8, r8)
   294ce:	46bd      	mov	sp, r7
   294d0:	b002      	add	sp, #8
   294d2:	bd80      	pop	{r7, pc}

000294d4 <system_is_debugger_present>:
   294d4:	b580      	push	{r7, lr}
   294d6:	af00      	add	r7, sp, #0
   294d8:	4b05      	ldr	r3, [pc, #20]	; (294f0 <system_is_debugger_present+0x1c>)
   294da:	789b      	ldrb	r3, [r3, #2]
   294dc:	b2db      	uxtb	r3, r3
   294de:	001a      	movs	r2, r3
   294e0:	2302      	movs	r3, #2
   294e2:	4013      	ands	r3, r2
   294e4:	1e5a      	subs	r2, r3, #1
   294e6:	4193      	sbcs	r3, r2
   294e8:	b2db      	uxtb	r3, r3
   294ea:	0018      	movs	r0, r3
   294ec:	46bd      	mov	sp, r7
   294ee:	bd80      	pop	{r7, pc}
   294f0:	41002000 	.word	0x41002000

000294f4 <usart_is_syncing>:
   294f4:	b580      	push	{r7, lr}
   294f6:	b084      	sub	sp, #16
   294f8:	af00      	add	r7, sp, #0
   294fa:	6078      	str	r0, [r7, #4]
   294fc:	687b      	ldr	r3, [r7, #4]
   294fe:	681b      	ldr	r3, [r3, #0]
   29500:	60fb      	str	r3, [r7, #12]
   29502:	68fb      	ldr	r3, [r7, #12]
   29504:	69db      	ldr	r3, [r3, #28]
   29506:	1e5a      	subs	r2, r3, #1
   29508:	4193      	sbcs	r3, r2
   2950a:	b2db      	uxtb	r3, r3
   2950c:	0018      	movs	r0, r3
   2950e:	46bd      	mov	sp, r7
   29510:	b004      	add	sp, #16
   29512:	bd80      	pop	{r7, pc}

00029514 <_usart_wait_for_sync>:
   29514:	b580      	push	{r7, lr}
   29516:	b082      	sub	sp, #8
   29518:	af00      	add	r7, sp, #0
   2951a:	6078      	str	r0, [r7, #4]
   2951c:	46c0      	nop			; (mov r8, r8)
   2951e:	687b      	ldr	r3, [r7, #4]
   29520:	0018      	movs	r0, r3
   29522:	4b04      	ldr	r3, [pc, #16]	; (29534 <_usart_wait_for_sync+0x20>)
   29524:	4798      	blx	r3
   29526:	1e03      	subs	r3, r0, #0
   29528:	d1f9      	bne.n	2951e <_usart_wait_for_sync+0xa>
   2952a:	46c0      	nop			; (mov r8, r8)
   2952c:	46bd      	mov	sp, r7
   2952e:	b002      	add	sp, #8
   29530:	bd80      	pop	{r7, pc}
   29532:	46c0      	nop			; (mov r8, r8)
   29534:	000294f5 	.word	0x000294f5

00029538 <_usart_set_config>:
   29538:	b5b0      	push	{r4, r5, r7, lr}
   2953a:	b08c      	sub	sp, #48	; 0x30
   2953c:	af02      	add	r7, sp, #8
   2953e:	6078      	str	r0, [r7, #4]
   29540:	6039      	str	r1, [r7, #0]
   29542:	687b      	ldr	r3, [r7, #4]
   29544:	681b      	ldr	r3, [r3, #0]
   29546:	61bb      	str	r3, [r7, #24]
   29548:	687b      	ldr	r3, [r7, #4]
   2954a:	681b      	ldr	r3, [r3, #0]
   2954c:	0018      	movs	r0, r3
   2954e:	4bab      	ldr	r3, [pc, #684]	; (297fc <_usart_set_config+0x2c4>)
   29550:	4798      	blx	r3
   29552:	0003      	movs	r3, r0
   29554:	617b      	str	r3, [r7, #20]
   29556:	697b      	ldr	r3, [r7, #20]
   29558:	3314      	adds	r3, #20
   2955a:	613b      	str	r3, [r7, #16]
   2955c:	2300      	movs	r3, #0
   2955e:	627b      	str	r3, [r7, #36]	; 0x24
   29560:	2300      	movs	r3, #0
   29562:	623b      	str	r3, [r7, #32]
   29564:	230a      	movs	r3, #10
   29566:	18fb      	adds	r3, r7, r3
   29568:	2200      	movs	r2, #0
   2956a:	801a      	strh	r2, [r3, #0]
   2956c:	231f      	movs	r3, #31
   2956e:	18fb      	adds	r3, r7, r3
   29570:	2200      	movs	r2, #0
   29572:	701a      	strb	r2, [r3, #0]
   29574:	231e      	movs	r3, #30
   29576:	18fb      	adds	r3, r7, r3
   29578:	2210      	movs	r2, #16
   2957a:	701a      	strb	r2, [r3, #0]
   2957c:	683b      	ldr	r3, [r7, #0]
   2957e:	8a1b      	ldrh	r3, [r3, #16]
   29580:	2280      	movs	r2, #128	; 0x80
   29582:	01d2      	lsls	r2, r2, #7
   29584:	4293      	cmp	r3, r2
   29586:	d01c      	beq.n	295c2 <_usart_set_config+0x8a>
   29588:	2280      	movs	r2, #128	; 0x80
   2958a:	01d2      	lsls	r2, r2, #7
   2958c:	4293      	cmp	r3, r2
   2958e:	dc06      	bgt.n	2959e <_usart_set_config+0x66>
   29590:	2b00      	cmp	r3, #0
   29592:	d00d      	beq.n	295b0 <_usart_set_config+0x78>
   29594:	2280      	movs	r2, #128	; 0x80
   29596:	0192      	lsls	r2, r2, #6
   29598:	4293      	cmp	r3, r2
   2959a:	d024      	beq.n	295e6 <_usart_set_config+0xae>
   2959c:	e035      	b.n	2960a <_usart_set_config+0xd2>
   2959e:	22c0      	movs	r2, #192	; 0xc0
   295a0:	01d2      	lsls	r2, r2, #7
   295a2:	4293      	cmp	r3, r2
   295a4:	d028      	beq.n	295f8 <_usart_set_config+0xc0>
   295a6:	2280      	movs	r2, #128	; 0x80
   295a8:	0212      	lsls	r2, r2, #8
   295aa:	4293      	cmp	r3, r2
   295ac:	d012      	beq.n	295d4 <_usart_set_config+0x9c>
   295ae:	e02c      	b.n	2960a <_usart_set_config+0xd2>
   295b0:	231f      	movs	r3, #31
   295b2:	18fb      	adds	r3, r7, r3
   295b4:	2200      	movs	r2, #0
   295b6:	701a      	strb	r2, [r3, #0]
   295b8:	231e      	movs	r3, #30
   295ba:	18fb      	adds	r3, r7, r3
   295bc:	2210      	movs	r2, #16
   295be:	701a      	strb	r2, [r3, #0]
   295c0:	e023      	b.n	2960a <_usart_set_config+0xd2>
   295c2:	231f      	movs	r3, #31
   295c4:	18fb      	adds	r3, r7, r3
   295c6:	2200      	movs	r2, #0
   295c8:	701a      	strb	r2, [r3, #0]
   295ca:	231e      	movs	r3, #30
   295cc:	18fb      	adds	r3, r7, r3
   295ce:	2208      	movs	r2, #8
   295d0:	701a      	strb	r2, [r3, #0]
   295d2:	e01a      	b.n	2960a <_usart_set_config+0xd2>
   295d4:	231f      	movs	r3, #31
   295d6:	18fb      	adds	r3, r7, r3
   295d8:	2200      	movs	r2, #0
   295da:	701a      	strb	r2, [r3, #0]
   295dc:	231e      	movs	r3, #30
   295de:	18fb      	adds	r3, r7, r3
   295e0:	2203      	movs	r2, #3
   295e2:	701a      	strb	r2, [r3, #0]
   295e4:	e011      	b.n	2960a <_usart_set_config+0xd2>
   295e6:	231f      	movs	r3, #31
   295e8:	18fb      	adds	r3, r7, r3
   295ea:	2201      	movs	r2, #1
   295ec:	701a      	strb	r2, [r3, #0]
   295ee:	231e      	movs	r3, #30
   295f0:	18fb      	adds	r3, r7, r3
   295f2:	2210      	movs	r2, #16
   295f4:	701a      	strb	r2, [r3, #0]
   295f6:	e008      	b.n	2960a <_usart_set_config+0xd2>
   295f8:	231f      	movs	r3, #31
   295fa:	18fb      	adds	r3, r7, r3
   295fc:	2201      	movs	r2, #1
   295fe:	701a      	strb	r2, [r3, #0]
   29600:	231e      	movs	r3, #30
   29602:	18fb      	adds	r3, r7, r3
   29604:	2208      	movs	r2, #8
   29606:	701a      	strb	r2, [r3, #0]
   29608:	46c0      	nop			; (mov r8, r8)
   2960a:	683b      	ldr	r3, [r7, #0]
   2960c:	681a      	ldr	r2, [r3, #0]
   2960e:	683b      	ldr	r3, [r7, #0]
   29610:	68db      	ldr	r3, [r3, #12]
   29612:	431a      	orrs	r2, r3
   29614:	683b      	ldr	r3, [r7, #0]
   29616:	695b      	ldr	r3, [r3, #20]
   29618:	4313      	orrs	r3, r2
   2961a:	683a      	ldr	r2, [r7, #0]
   2961c:	8a12      	ldrh	r2, [r2, #16]
   2961e:	4313      	orrs	r3, r2
   29620:	683a      	ldr	r2, [r7, #0]
   29622:	7e12      	ldrb	r2, [r2, #24]
   29624:	0212      	lsls	r2, r2, #8
   29626:	4313      	orrs	r3, r2
   29628:	683a      	ldr	r2, [r7, #0]
   2962a:	2126      	movs	r1, #38	; 0x26
   2962c:	5c52      	ldrb	r2, [r2, r1]
   2962e:	0752      	lsls	r2, r2, #29
   29630:	4313      	orrs	r3, r2
   29632:	627b      	str	r3, [r7, #36]	; 0x24
   29634:	231d      	movs	r3, #29
   29636:	18fb      	adds	r3, r7, r3
   29638:	2200      	movs	r2, #0
   2963a:	701a      	strb	r2, [r3, #0]
   2963c:	683b      	ldr	r3, [r7, #0]
   2963e:	685b      	ldr	r3, [r3, #4]
   29640:	60fb      	str	r3, [r7, #12]
   29642:	68fb      	ldr	r3, [r7, #12]
   29644:	2b00      	cmp	r3, #0
   29646:	d01e      	beq.n	29686 <_usart_set_config+0x14e>
   29648:	2280      	movs	r2, #128	; 0x80
   2964a:	0552      	lsls	r2, r2, #21
   2964c:	4293      	cmp	r3, r2
   2964e:	d14f      	bne.n	296f0 <_usart_set_config+0x1b8>
   29650:	683b      	ldr	r3, [r7, #0]
   29652:	2227      	movs	r2, #39	; 0x27
   29654:	5c9b      	ldrb	r3, [r3, r2]
   29656:	2201      	movs	r2, #1
   29658:	4053      	eors	r3, r2
   2965a:	b2db      	uxtb	r3, r3
   2965c:	2b00      	cmp	r3, #0
   2965e:	d046      	beq.n	296ee <_usart_set_config+0x1b6>
   29660:	683b      	ldr	r3, [r7, #0]
   29662:	6a1d      	ldr	r5, [r3, #32]
   29664:	693b      	ldr	r3, [r7, #16]
   29666:	b2db      	uxtb	r3, r3
   29668:	0018      	movs	r0, r3
   2966a:	4b65      	ldr	r3, [pc, #404]	; (29800 <_usart_set_config+0x2c8>)
   2966c:	4798      	blx	r3
   2966e:	0001      	movs	r1, r0
   29670:	231d      	movs	r3, #29
   29672:	18fc      	adds	r4, r7, r3
   29674:	230a      	movs	r3, #10
   29676:	18fb      	adds	r3, r7, r3
   29678:	001a      	movs	r2, r3
   2967a:	0028      	movs	r0, r5
   2967c:	4b61      	ldr	r3, [pc, #388]	; (29804 <_usart_set_config+0x2cc>)
   2967e:	4798      	blx	r3
   29680:	0003      	movs	r3, r0
   29682:	7023      	strb	r3, [r4, #0]
   29684:	e033      	b.n	296ee <_usart_set_config+0x1b6>
   29686:	683b      	ldr	r3, [r7, #0]
   29688:	2227      	movs	r2, #39	; 0x27
   2968a:	5c9b      	ldrb	r3, [r3, r2]
   2968c:	2b00      	cmp	r3, #0
   2968e:	d014      	beq.n	296ba <_usart_set_config+0x182>
   29690:	683b      	ldr	r3, [r7, #0]
   29692:	6a18      	ldr	r0, [r3, #32]
   29694:	683b      	ldr	r3, [r7, #0]
   29696:	6a99      	ldr	r1, [r3, #40]	; 0x28
   29698:	231d      	movs	r3, #29
   2969a:	18fc      	adds	r4, r7, r3
   2969c:	231f      	movs	r3, #31
   2969e:	18fb      	adds	r3, r7, r3
   296a0:	781d      	ldrb	r5, [r3, #0]
   296a2:	230a      	movs	r3, #10
   296a4:	18fa      	adds	r2, r7, r3
   296a6:	231e      	movs	r3, #30
   296a8:	18fb      	adds	r3, r7, r3
   296aa:	781b      	ldrb	r3, [r3, #0]
   296ac:	9300      	str	r3, [sp, #0]
   296ae:	002b      	movs	r3, r5
   296b0:	4d55      	ldr	r5, [pc, #340]	; (29808 <_usart_set_config+0x2d0>)
   296b2:	47a8      	blx	r5
   296b4:	0003      	movs	r3, r0
   296b6:	7023      	strb	r3, [r4, #0]
   296b8:	e01a      	b.n	296f0 <_usart_set_config+0x1b8>
   296ba:	683b      	ldr	r3, [r7, #0]
   296bc:	6a1d      	ldr	r5, [r3, #32]
   296be:	693b      	ldr	r3, [r7, #16]
   296c0:	b2db      	uxtb	r3, r3
   296c2:	0018      	movs	r0, r3
   296c4:	4b4e      	ldr	r3, [pc, #312]	; (29800 <_usart_set_config+0x2c8>)
   296c6:	4798      	blx	r3
   296c8:	231d      	movs	r3, #29
   296ca:	18fc      	adds	r4, r7, r3
   296cc:	231f      	movs	r3, #31
   296ce:	18fb      	adds	r3, r7, r3
   296d0:	7819      	ldrb	r1, [r3, #0]
   296d2:	230a      	movs	r3, #10
   296d4:	18fa      	adds	r2, r7, r3
   296d6:	231e      	movs	r3, #30
   296d8:	18fb      	adds	r3, r7, r3
   296da:	781b      	ldrb	r3, [r3, #0]
   296dc:	9300      	str	r3, [sp, #0]
   296de:	000b      	movs	r3, r1
   296e0:	0001      	movs	r1, r0
   296e2:	0028      	movs	r0, r5
   296e4:	4d48      	ldr	r5, [pc, #288]	; (29808 <_usart_set_config+0x2d0>)
   296e6:	47a8      	blx	r5
   296e8:	0003      	movs	r3, r0
   296ea:	7023      	strb	r3, [r4, #0]
   296ec:	e000      	b.n	296f0 <_usart_set_config+0x1b8>
   296ee:	46c0      	nop			; (mov r8, r8)
   296f0:	231d      	movs	r3, #29
   296f2:	18fb      	adds	r3, r7, r3
   296f4:	781b      	ldrb	r3, [r3, #0]
   296f6:	2b00      	cmp	r3, #0
   296f8:	d003      	beq.n	29702 <_usart_set_config+0x1ca>
   296fa:	231d      	movs	r3, #29
   296fc:	18fb      	adds	r3, r7, r3
   296fe:	781b      	ldrb	r3, [r3, #0]
   29700:	e077      	b.n	297f2 <_usart_set_config+0x2ba>
   29702:	683b      	ldr	r3, [r7, #0]
   29704:	7e5b      	ldrb	r3, [r3, #25]
   29706:	2b00      	cmp	r3, #0
   29708:	d003      	beq.n	29712 <_usart_set_config+0x1da>
   2970a:	683b      	ldr	r3, [r7, #0]
   2970c:	7e9a      	ldrb	r2, [r3, #26]
   2970e:	69bb      	ldr	r3, [r7, #24]
   29710:	739a      	strb	r2, [r3, #14]
   29712:	687b      	ldr	r3, [r7, #4]
   29714:	0018      	movs	r0, r3
   29716:	4b3d      	ldr	r3, [pc, #244]	; (2980c <_usart_set_config+0x2d4>)
   29718:	4798      	blx	r3
   2971a:	230a      	movs	r3, #10
   2971c:	18fb      	adds	r3, r7, r3
   2971e:	881a      	ldrh	r2, [r3, #0]
   29720:	69bb      	ldr	r3, [r7, #24]
   29722:	819a      	strh	r2, [r3, #12]
   29724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   29726:	68fb      	ldr	r3, [r7, #12]
   29728:	4313      	orrs	r3, r2
   2972a:	627b      	str	r3, [r7, #36]	; 0x24
   2972c:	683b      	ldr	r3, [r7, #0]
   2972e:	2227      	movs	r2, #39	; 0x27
   29730:	5c9b      	ldrb	r3, [r3, r2]
   29732:	2201      	movs	r2, #1
   29734:	4053      	eors	r3, r2
   29736:	b2db      	uxtb	r3, r3
   29738:	2b00      	cmp	r3, #0
   2973a:	d003      	beq.n	29744 <_usart_set_config+0x20c>
   2973c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2973e:	2204      	movs	r2, #4
   29740:	4313      	orrs	r3, r2
   29742:	627b      	str	r3, [r7, #36]	; 0x24
   29744:	683b      	ldr	r3, [r7, #0]
   29746:	7e5b      	ldrb	r3, [r3, #25]
   29748:	029a      	lsls	r2, r3, #10
   2974a:	683b      	ldr	r3, [r7, #0]
   2974c:	7f1b      	ldrb	r3, [r3, #28]
   2974e:	025b      	lsls	r3, r3, #9
   29750:	431a      	orrs	r2, r3
   29752:	683b      	ldr	r3, [r7, #0]
   29754:	7f5b      	ldrb	r3, [r3, #29]
   29756:	021b      	lsls	r3, r3, #8
   29758:	431a      	orrs	r2, r3
   2975a:	683b      	ldr	r3, [r7, #0]
   2975c:	2124      	movs	r1, #36	; 0x24
   2975e:	5c5b      	ldrb	r3, [r3, r1]
   29760:	045b      	lsls	r3, r3, #17
   29762:	431a      	orrs	r2, r3
   29764:	683b      	ldr	r3, [r7, #0]
   29766:	2125      	movs	r1, #37	; 0x25
   29768:	5c5b      	ldrb	r3, [r3, r1]
   2976a:	041b      	lsls	r3, r3, #16
   2976c:	4313      	orrs	r3, r2
   2976e:	623b      	str	r3, [r7, #32]
   29770:	683b      	ldr	r3, [r7, #0]
   29772:	7a9b      	ldrb	r3, [r3, #10]
   29774:	001a      	movs	r2, r3
   29776:	6a3b      	ldr	r3, [r7, #32]
   29778:	4313      	orrs	r3, r2
   2977a:	623b      	str	r3, [r7, #32]
   2977c:	683b      	ldr	r3, [r7, #0]
   2977e:	7adb      	ldrb	r3, [r3, #11]
   29780:	001a      	movs	r2, r3
   29782:	6a3b      	ldr	r3, [r7, #32]
   29784:	4313      	orrs	r3, r2
   29786:	623b      	str	r3, [r7, #32]
   29788:	683b      	ldr	r3, [r7, #0]
   2978a:	891b      	ldrh	r3, [r3, #8]
   2978c:	2bff      	cmp	r3, #255	; 0xff
   2978e:	d00b      	beq.n	297a8 <_usart_set_config+0x270>
   29790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   29792:	2280      	movs	r2, #128	; 0x80
   29794:	0452      	lsls	r2, r2, #17
   29796:	4313      	orrs	r3, r2
   29798:	627b      	str	r3, [r7, #36]	; 0x24
   2979a:	683b      	ldr	r3, [r7, #0]
   2979c:	891b      	ldrh	r3, [r3, #8]
   2979e:	001a      	movs	r2, r3
   297a0:	6a3b      	ldr	r3, [r7, #32]
   297a2:	4313      	orrs	r3, r2
   297a4:	623b      	str	r3, [r7, #32]
   297a6:	e008      	b.n	297ba <_usart_set_config+0x282>
   297a8:	683b      	ldr	r3, [r7, #0]
   297aa:	7edb      	ldrb	r3, [r3, #27]
   297ac:	2b00      	cmp	r3, #0
   297ae:	d004      	beq.n	297ba <_usart_set_config+0x282>
   297b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   297b2:	2280      	movs	r2, #128	; 0x80
   297b4:	04d2      	lsls	r2, r2, #19
   297b6:	4313      	orrs	r3, r2
   297b8:	627b      	str	r3, [r7, #36]	; 0x24
   297ba:	683b      	ldr	r3, [r7, #0]
   297bc:	222c      	movs	r2, #44	; 0x2c
   297be:	5c9b      	ldrb	r3, [r3, r2]
   297c0:	2b00      	cmp	r3, #0
   297c2:	d103      	bne.n	297cc <_usart_set_config+0x294>
   297c4:	4b12      	ldr	r3, [pc, #72]	; (29810 <_usart_set_config+0x2d8>)
   297c6:	4798      	blx	r3
   297c8:	1e03      	subs	r3, r0, #0
   297ca:	d003      	beq.n	297d4 <_usart_set_config+0x29c>
   297cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   297ce:	2280      	movs	r2, #128	; 0x80
   297d0:	4313      	orrs	r3, r2
   297d2:	627b      	str	r3, [r7, #36]	; 0x24
   297d4:	687b      	ldr	r3, [r7, #4]
   297d6:	0018      	movs	r0, r3
   297d8:	4b0c      	ldr	r3, [pc, #48]	; (2980c <_usart_set_config+0x2d4>)
   297da:	4798      	blx	r3
   297dc:	69bb      	ldr	r3, [r7, #24]
   297de:	6a3a      	ldr	r2, [r7, #32]
   297e0:	605a      	str	r2, [r3, #4]
   297e2:	687b      	ldr	r3, [r7, #4]
   297e4:	0018      	movs	r0, r3
   297e6:	4b09      	ldr	r3, [pc, #36]	; (2980c <_usart_set_config+0x2d4>)
   297e8:	4798      	blx	r3
   297ea:	69bb      	ldr	r3, [r7, #24]
   297ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   297ee:	601a      	str	r2, [r3, #0]
   297f0:	2300      	movs	r3, #0
   297f2:	0018      	movs	r0, r3
   297f4:	46bd      	mov	sp, r7
   297f6:	b00a      	add	sp, #40	; 0x28
   297f8:	bdb0      	pop	{r4, r5, r7, pc}
   297fa:	46c0      	nop			; (mov r8, r8)
   297fc:	000282e1 	.word	0x000282e1
   29800:	0002ac95 	.word	0x0002ac95
   29804:	00027e5b 	.word	0x00027e5b
   29808:	00027ed9 	.word	0x00027ed9
   2980c:	00029515 	.word	0x00029515
   29810:	000294d5 	.word	0x000294d5

00029814 <usart_init>:
   29814:	b590      	push	{r4, r7, lr}
   29816:	b093      	sub	sp, #76	; 0x4c
   29818:	af00      	add	r7, sp, #0
   2981a:	60f8      	str	r0, [r7, #12]
   2981c:	60b9      	str	r1, [r7, #8]
   2981e:	607a      	str	r2, [r7, #4]
   29820:	233b      	movs	r3, #59	; 0x3b
   29822:	18fb      	adds	r3, r7, r3
   29824:	2200      	movs	r2, #0
   29826:	701a      	strb	r2, [r3, #0]
   29828:	68fb      	ldr	r3, [r7, #12]
   2982a:	68ba      	ldr	r2, [r7, #8]
   2982c:	601a      	str	r2, [r3, #0]
   2982e:	68fb      	ldr	r3, [r7, #12]
   29830:	681b      	ldr	r3, [r3, #0]
   29832:	637b      	str	r3, [r7, #52]	; 0x34
   29834:	68fb      	ldr	r3, [r7, #12]
   29836:	681b      	ldr	r3, [r3, #0]
   29838:	0018      	movs	r0, r3
   2983a:	4b86      	ldr	r3, [pc, #536]	; (29a54 <usart_init+0x240>)
   2983c:	4798      	blx	r3
   2983e:	0003      	movs	r3, r0
   29840:	633b      	str	r3, [r7, #48]	; 0x30
   29842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   29844:	3302      	adds	r3, #2
   29846:	62fb      	str	r3, [r7, #44]	; 0x2c
   29848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2984a:	3314      	adds	r3, #20
   2984c:	62bb      	str	r3, [r7, #40]	; 0x28
   2984e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   29850:	681b      	ldr	r3, [r3, #0]
   29852:	2201      	movs	r2, #1
   29854:	4013      	ands	r3, r2
   29856:	d001      	beq.n	2985c <usart_init+0x48>
   29858:	2305      	movs	r3, #5
   2985a:	e0f6      	b.n	29a4a <usart_init+0x236>
   2985c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2985e:	681b      	ldr	r3, [r3, #0]
   29860:	2202      	movs	r2, #2
   29862:	4013      	ands	r3, r2
   29864:	d001      	beq.n	2986a <usart_init+0x56>
   29866:	231c      	movs	r3, #28
   29868:	e0ef      	b.n	29a4a <usart_init+0x236>
   2986a:	2201      	movs	r2, #1
   2986c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2986e:	409a      	lsls	r2, r3
   29870:	0013      	movs	r3, r2
   29872:	0019      	movs	r1, r3
   29874:	2002      	movs	r0, #2
   29876:	4b78      	ldr	r3, [pc, #480]	; (29a58 <usart_init+0x244>)
   29878:	4798      	blx	r3
   2987a:	2324      	movs	r3, #36	; 0x24
   2987c:	18fb      	adds	r3, r7, r3
   2987e:	0018      	movs	r0, r3
   29880:	4b76      	ldr	r3, [pc, #472]	; (29a5c <usart_init+0x248>)
   29882:	4798      	blx	r3
   29884:	687b      	ldr	r3, [r7, #4]
   29886:	222d      	movs	r2, #45	; 0x2d
   29888:	5c9a      	ldrb	r2, [r3, r2]
   2988a:	2324      	movs	r3, #36	; 0x24
   2988c:	18fb      	adds	r3, r7, r3
   2988e:	701a      	strb	r2, [r3, #0]
   29890:	6abb      	ldr	r3, [r7, #40]	; 0x28
   29892:	b2db      	uxtb	r3, r3
   29894:	2224      	movs	r2, #36	; 0x24
   29896:	18ba      	adds	r2, r7, r2
   29898:	0011      	movs	r1, r2
   2989a:	0018      	movs	r0, r3
   2989c:	4b70      	ldr	r3, [pc, #448]	; (29a60 <usart_init+0x24c>)
   2989e:	4798      	blx	r3
   298a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   298a2:	b2db      	uxtb	r3, r3
   298a4:	0018      	movs	r0, r3
   298a6:	4b6f      	ldr	r3, [pc, #444]	; (29a64 <usart_init+0x250>)
   298a8:	4798      	blx	r3
   298aa:	687b      	ldr	r3, [r7, #4]
   298ac:	222d      	movs	r2, #45	; 0x2d
   298ae:	5c9b      	ldrb	r3, [r3, r2]
   298b0:	2100      	movs	r1, #0
   298b2:	0018      	movs	r0, r3
   298b4:	4b6c      	ldr	r3, [pc, #432]	; (29a68 <usart_init+0x254>)
   298b6:	4798      	blx	r3
   298b8:	687b      	ldr	r3, [r7, #4]
   298ba:	7ada      	ldrb	r2, [r3, #11]
   298bc:	68fb      	ldr	r3, [r7, #12]
   298be:	715a      	strb	r2, [r3, #5]
   298c0:	687b      	ldr	r3, [r7, #4]
   298c2:	2224      	movs	r2, #36	; 0x24
   298c4:	5c9a      	ldrb	r2, [r3, r2]
   298c6:	68fb      	ldr	r3, [r7, #12]
   298c8:	719a      	strb	r2, [r3, #6]
   298ca:	687b      	ldr	r3, [r7, #4]
   298cc:	2225      	movs	r2, #37	; 0x25
   298ce:	5c9a      	ldrb	r2, [r3, r2]
   298d0:	68fb      	ldr	r3, [r7, #12]
   298d2:	71da      	strb	r2, [r3, #7]
   298d4:	687b      	ldr	r3, [r7, #4]
   298d6:	7eda      	ldrb	r2, [r3, #27]
   298d8:	68fb      	ldr	r3, [r7, #12]
   298da:	721a      	strb	r2, [r3, #8]
   298dc:	687b      	ldr	r3, [r7, #4]
   298de:	7f1a      	ldrb	r2, [r3, #28]
   298e0:	68fb      	ldr	r3, [r7, #12]
   298e2:	725a      	strb	r2, [r3, #9]
   298e4:	233b      	movs	r3, #59	; 0x3b
   298e6:	18fc      	adds	r4, r7, r3
   298e8:	687a      	ldr	r2, [r7, #4]
   298ea:	68fb      	ldr	r3, [r7, #12]
   298ec:	0011      	movs	r1, r2
   298ee:	0018      	movs	r0, r3
   298f0:	4b5e      	ldr	r3, [pc, #376]	; (29a6c <usart_init+0x258>)
   298f2:	4798      	blx	r3
   298f4:	0003      	movs	r3, r0
   298f6:	7023      	strb	r3, [r4, #0]
   298f8:	233b      	movs	r3, #59	; 0x3b
   298fa:	18fb      	adds	r3, r7, r3
   298fc:	781b      	ldrb	r3, [r3, #0]
   298fe:	2b00      	cmp	r3, #0
   29900:	d003      	beq.n	2990a <usart_init+0xf6>
   29902:	233b      	movs	r3, #59	; 0x3b
   29904:	18fb      	adds	r3, r7, r3
   29906:	781b      	ldrb	r3, [r3, #0]
   29908:	e09f      	b.n	29a4a <usart_init+0x236>
   2990a:	2320      	movs	r3, #32
   2990c:	18fb      	adds	r3, r7, r3
   2990e:	0018      	movs	r0, r3
   29910:	4b57      	ldr	r3, [pc, #348]	; (29a70 <usart_init+0x25c>)
   29912:	4798      	blx	r3
   29914:	2320      	movs	r3, #32
   29916:	18fb      	adds	r3, r7, r3
   29918:	2200      	movs	r2, #0
   2991a:	705a      	strb	r2, [r3, #1]
   2991c:	2320      	movs	r3, #32
   2991e:	18fb      	adds	r3, r7, r3
   29920:	2200      	movs	r2, #0
   29922:	709a      	strb	r2, [r3, #2]
   29924:	687b      	ldr	r3, [r7, #4]
   29926:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   29928:	2310      	movs	r3, #16
   2992a:	18fb      	adds	r3, r7, r3
   2992c:	601a      	str	r2, [r3, #0]
   2992e:	687b      	ldr	r3, [r7, #4]
   29930:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   29932:	2310      	movs	r3, #16
   29934:	18fb      	adds	r3, r7, r3
   29936:	605a      	str	r2, [r3, #4]
   29938:	687b      	ldr	r3, [r7, #4]
   2993a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2993c:	2310      	movs	r3, #16
   2993e:	18fb      	adds	r3, r7, r3
   29940:	609a      	str	r2, [r3, #8]
   29942:	687b      	ldr	r3, [r7, #4]
   29944:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   29946:	2310      	movs	r3, #16
   29948:	18fb      	adds	r3, r7, r3
   2994a:	60da      	str	r2, [r3, #12]
   2994c:	2347      	movs	r3, #71	; 0x47
   2994e:	18fb      	adds	r3, r7, r3
   29950:	2200      	movs	r2, #0
   29952:	701a      	strb	r2, [r3, #0]
   29954:	e02c      	b.n	299b0 <usart_init+0x19c>
   29956:	2347      	movs	r3, #71	; 0x47
   29958:	18fb      	adds	r3, r7, r3
   2995a:	781a      	ldrb	r2, [r3, #0]
   2995c:	2310      	movs	r3, #16
   2995e:	18fb      	adds	r3, r7, r3
   29960:	0092      	lsls	r2, r2, #2
   29962:	58d3      	ldr	r3, [r2, r3]
   29964:	643b      	str	r3, [r7, #64]	; 0x40
   29966:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   29968:	2b00      	cmp	r3, #0
   2996a:	d109      	bne.n	29980 <usart_init+0x16c>
   2996c:	2347      	movs	r3, #71	; 0x47
   2996e:	18fb      	adds	r3, r7, r3
   29970:	781a      	ldrb	r2, [r3, #0]
   29972:	68bb      	ldr	r3, [r7, #8]
   29974:	0011      	movs	r1, r2
   29976:	0018      	movs	r0, r3
   29978:	4b3e      	ldr	r3, [pc, #248]	; (29a74 <usart_init+0x260>)
   2997a:	4798      	blx	r3
   2997c:	0003      	movs	r3, r0
   2997e:	643b      	str	r3, [r7, #64]	; 0x40
   29980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   29982:	3301      	adds	r3, #1
   29984:	d00d      	beq.n	299a2 <usart_init+0x18e>
   29986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   29988:	b2da      	uxtb	r2, r3
   2998a:	2320      	movs	r3, #32
   2998c:	18fb      	adds	r3, r7, r3
   2998e:	701a      	strb	r2, [r3, #0]
   29990:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   29992:	0c1b      	lsrs	r3, r3, #16
   29994:	b2db      	uxtb	r3, r3
   29996:	2220      	movs	r2, #32
   29998:	18ba      	adds	r2, r7, r2
   2999a:	0011      	movs	r1, r2
   2999c:	0018      	movs	r0, r3
   2999e:	4b36      	ldr	r3, [pc, #216]	; (29a78 <usart_init+0x264>)
   299a0:	4798      	blx	r3
   299a2:	2347      	movs	r3, #71	; 0x47
   299a4:	18fb      	adds	r3, r7, r3
   299a6:	781a      	ldrb	r2, [r3, #0]
   299a8:	2347      	movs	r3, #71	; 0x47
   299aa:	18fb      	adds	r3, r7, r3
   299ac:	3201      	adds	r2, #1
   299ae:	701a      	strb	r2, [r3, #0]
   299b0:	2347      	movs	r3, #71	; 0x47
   299b2:	18fb      	adds	r3, r7, r3
   299b4:	781b      	ldrb	r3, [r3, #0]
   299b6:	2b03      	cmp	r3, #3
   299b8:	d9cd      	bls.n	29956 <usart_init+0x142>
   299ba:	2300      	movs	r3, #0
   299bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   299be:	e00a      	b.n	299d6 <usart_init+0x1c2>
   299c0:	68fa      	ldr	r2, [r7, #12]
   299c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   299c4:	3302      	adds	r3, #2
   299c6:	009b      	lsls	r3, r3, #2
   299c8:	18d3      	adds	r3, r2, r3
   299ca:	3304      	adds	r3, #4
   299cc:	2200      	movs	r2, #0
   299ce:	601a      	str	r2, [r3, #0]
   299d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   299d2:	3301      	adds	r3, #1
   299d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   299d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   299d8:	2b05      	cmp	r3, #5
   299da:	d9f1      	bls.n	299c0 <usart_init+0x1ac>
   299dc:	68fb      	ldr	r3, [r7, #12]
   299de:	2200      	movs	r2, #0
   299e0:	629a      	str	r2, [r3, #40]	; 0x28
   299e2:	68fb      	ldr	r3, [r7, #12]
   299e4:	2200      	movs	r2, #0
   299e6:	625a      	str	r2, [r3, #36]	; 0x24
   299e8:	68fb      	ldr	r3, [r7, #12]
   299ea:	2200      	movs	r2, #0
   299ec:	85da      	strh	r2, [r3, #46]	; 0x2e
   299ee:	68fb      	ldr	r3, [r7, #12]
   299f0:	2200      	movs	r2, #0
   299f2:	859a      	strh	r2, [r3, #44]	; 0x2c
   299f4:	68fb      	ldr	r3, [r7, #12]
   299f6:	2230      	movs	r2, #48	; 0x30
   299f8:	2100      	movs	r1, #0
   299fa:	5499      	strb	r1, [r3, r2]
   299fc:	68fb      	ldr	r3, [r7, #12]
   299fe:	2231      	movs	r2, #49	; 0x31
   29a00:	2100      	movs	r1, #0
   29a02:	5499      	strb	r1, [r3, r2]
   29a04:	68fb      	ldr	r3, [r7, #12]
   29a06:	2232      	movs	r2, #50	; 0x32
   29a08:	2100      	movs	r1, #0
   29a0a:	5499      	strb	r1, [r3, r2]
   29a0c:	68fb      	ldr	r3, [r7, #12]
   29a0e:	2233      	movs	r2, #51	; 0x33
   29a10:	2100      	movs	r1, #0
   29a12:	5499      	strb	r1, [r3, r2]
   29a14:	68fb      	ldr	r3, [r7, #12]
   29a16:	681b      	ldr	r3, [r3, #0]
   29a18:	2227      	movs	r2, #39	; 0x27
   29a1a:	18bc      	adds	r4, r7, r2
   29a1c:	0018      	movs	r0, r3
   29a1e:	4b0d      	ldr	r3, [pc, #52]	; (29a54 <usart_init+0x240>)
   29a20:	4798      	blx	r3
   29a22:	0003      	movs	r3, r0
   29a24:	7023      	strb	r3, [r4, #0]
   29a26:	4a15      	ldr	r2, [pc, #84]	; (29a7c <usart_init+0x268>)
   29a28:	2327      	movs	r3, #39	; 0x27
   29a2a:	18fb      	adds	r3, r7, r3
   29a2c:	781b      	ldrb	r3, [r3, #0]
   29a2e:	0011      	movs	r1, r2
   29a30:	0018      	movs	r0, r3
   29a32:	4b13      	ldr	r3, [pc, #76]	; (29a80 <usart_init+0x26c>)
   29a34:	4798      	blx	r3
   29a36:	2327      	movs	r3, #39	; 0x27
   29a38:	18fb      	adds	r3, r7, r3
   29a3a:	781a      	ldrb	r2, [r3, #0]
   29a3c:	4b11      	ldr	r3, [pc, #68]	; (29a84 <usart_init+0x270>)
   29a3e:	0092      	lsls	r2, r2, #2
   29a40:	68f9      	ldr	r1, [r7, #12]
   29a42:	50d1      	str	r1, [r2, r3]
   29a44:	233b      	movs	r3, #59	; 0x3b
   29a46:	18fb      	adds	r3, r7, r3
   29a48:	781b      	ldrb	r3, [r3, #0]
   29a4a:	0018      	movs	r0, r3
   29a4c:	46bd      	mov	sp, r7
   29a4e:	b013      	add	sp, #76	; 0x4c
   29a50:	bd90      	pop	{r4, r7, pc}
   29a52:	46c0      	nop			; (mov r8, r8)
   29a54:	000282e1 	.word	0x000282e1
   29a58:	00029451 	.word	0x00029451
   29a5c:	00029439 	.word	0x00029439
   29a60:	0002ab71 	.word	0x0002ab71
   29a64:	0002abb5 	.word	0x0002abb5
   29a68:	00028099 	.word	0x00028099
   29a6c:	00029539 	.word	0x00029539
   29a70:	000294ad 	.word	0x000294ad
   29a74:	00028125 	.word	0x00028125
   29a78:	0002aed1 	.word	0x0002aed1
   29a7c:	00029cf1 	.word	0x00029cf1
   29a80:	00028345 	.word	0x00028345
   29a84:	20005848 	.word	0x20005848

00029a88 <system_interrupt_enter_critical_section>:
   29a88:	b580      	push	{r7, lr}
   29a8a:	af00      	add	r7, sp, #0
   29a8c:	4b02      	ldr	r3, [pc, #8]	; (29a98 <system_interrupt_enter_critical_section+0x10>)
   29a8e:	4798      	blx	r3
   29a90:	46c0      	nop			; (mov r8, r8)
   29a92:	46bd      	mov	sp, r7
   29a94:	bd80      	pop	{r7, pc}
   29a96:	46c0      	nop			; (mov r8, r8)
   29a98:	00026edd 	.word	0x00026edd

00029a9c <system_interrupt_leave_critical_section>:
   29a9c:	b580      	push	{r7, lr}
   29a9e:	af00      	add	r7, sp, #0
   29aa0:	4b02      	ldr	r3, [pc, #8]	; (29aac <system_interrupt_leave_critical_section+0x10>)
   29aa2:	4798      	blx	r3
   29aa4:	46c0      	nop			; (mov r8, r8)
   29aa6:	46bd      	mov	sp, r7
   29aa8:	bd80      	pop	{r7, pc}
   29aaa:	46c0      	nop			; (mov r8, r8)
   29aac:	00026f31 	.word	0x00026f31

00029ab0 <usart_is_syncing>:
   29ab0:	b580      	push	{r7, lr}
   29ab2:	b084      	sub	sp, #16
   29ab4:	af00      	add	r7, sp, #0
   29ab6:	6078      	str	r0, [r7, #4]
   29ab8:	687b      	ldr	r3, [r7, #4]
   29aba:	681b      	ldr	r3, [r3, #0]
   29abc:	60fb      	str	r3, [r7, #12]
   29abe:	68fb      	ldr	r3, [r7, #12]
   29ac0:	69db      	ldr	r3, [r3, #28]
   29ac2:	1e5a      	subs	r2, r3, #1
   29ac4:	4193      	sbcs	r3, r2
   29ac6:	b2db      	uxtb	r3, r3
   29ac8:	0018      	movs	r0, r3
   29aca:	46bd      	mov	sp, r7
   29acc:	b004      	add	sp, #16
   29ace:	bd80      	pop	{r7, pc}

00029ad0 <_usart_wait_for_sync>:
   29ad0:	b580      	push	{r7, lr}
   29ad2:	b082      	sub	sp, #8
   29ad4:	af00      	add	r7, sp, #0
   29ad6:	6078      	str	r0, [r7, #4]
   29ad8:	46c0      	nop			; (mov r8, r8)
   29ada:	687b      	ldr	r3, [r7, #4]
   29adc:	0018      	movs	r0, r3
   29ade:	4b04      	ldr	r3, [pc, #16]	; (29af0 <_usart_wait_for_sync+0x20>)
   29ae0:	4798      	blx	r3
   29ae2:	1e03      	subs	r3, r0, #0
   29ae4:	d1f9      	bne.n	29ada <_usart_wait_for_sync+0xa>
   29ae6:	46c0      	nop			; (mov r8, r8)
   29ae8:	46bd      	mov	sp, r7
   29aea:	b002      	add	sp, #8
   29aec:	bd80      	pop	{r7, pc}
   29aee:	46c0      	nop			; (mov r8, r8)
   29af0:	00029ab1 	.word	0x00029ab1

00029af4 <_usart_write_buffer>:
   29af4:	b580      	push	{r7, lr}
   29af6:	b086      	sub	sp, #24
   29af8:	af00      	add	r7, sp, #0
   29afa:	60f8      	str	r0, [r7, #12]
   29afc:	60b9      	str	r1, [r7, #8]
   29afe:	1dbb      	adds	r3, r7, #6
   29b00:	801a      	strh	r2, [r3, #0]
   29b02:	68fb      	ldr	r3, [r7, #12]
   29b04:	681b      	ldr	r3, [r3, #0]
   29b06:	617b      	str	r3, [r7, #20]
   29b08:	4b0f      	ldr	r3, [pc, #60]	; (29b48 <_usart_write_buffer+0x54>)
   29b0a:	4798      	blx	r3
   29b0c:	68fb      	ldr	r3, [r7, #12]
   29b0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   29b10:	b29b      	uxth	r3, r3
   29b12:	2b00      	cmp	r3, #0
   29b14:	d003      	beq.n	29b1e <_usart_write_buffer+0x2a>
   29b16:	4b0d      	ldr	r3, [pc, #52]	; (29b4c <_usart_write_buffer+0x58>)
   29b18:	4798      	blx	r3
   29b1a:	2305      	movs	r3, #5
   29b1c:	e010      	b.n	29b40 <_usart_write_buffer+0x4c>
   29b1e:	68fb      	ldr	r3, [r7, #12]
   29b20:	1dba      	adds	r2, r7, #6
   29b22:	8812      	ldrh	r2, [r2, #0]
   29b24:	85da      	strh	r2, [r3, #46]	; 0x2e
   29b26:	4b09      	ldr	r3, [pc, #36]	; (29b4c <_usart_write_buffer+0x58>)
   29b28:	4798      	blx	r3
   29b2a:	68fb      	ldr	r3, [r7, #12]
   29b2c:	68ba      	ldr	r2, [r7, #8]
   29b2e:	629a      	str	r2, [r3, #40]	; 0x28
   29b30:	68fb      	ldr	r3, [r7, #12]
   29b32:	2233      	movs	r2, #51	; 0x33
   29b34:	2105      	movs	r1, #5
   29b36:	5499      	strb	r1, [r3, r2]
   29b38:	697b      	ldr	r3, [r7, #20]
   29b3a:	2201      	movs	r2, #1
   29b3c:	759a      	strb	r2, [r3, #22]
   29b3e:	2300      	movs	r3, #0
   29b40:	0018      	movs	r0, r3
   29b42:	46bd      	mov	sp, r7
   29b44:	b006      	add	sp, #24
   29b46:	bd80      	pop	{r7, pc}
   29b48:	00029a89 	.word	0x00029a89
   29b4c:	00029a9d 	.word	0x00029a9d

00029b50 <_usart_read_buffer>:
   29b50:	b580      	push	{r7, lr}
   29b52:	b086      	sub	sp, #24
   29b54:	af00      	add	r7, sp, #0
   29b56:	60f8      	str	r0, [r7, #12]
   29b58:	60b9      	str	r1, [r7, #8]
   29b5a:	1dbb      	adds	r3, r7, #6
   29b5c:	801a      	strh	r2, [r3, #0]
   29b5e:	68fb      	ldr	r3, [r7, #12]
   29b60:	681b      	ldr	r3, [r3, #0]
   29b62:	617b      	str	r3, [r7, #20]
   29b64:	4b16      	ldr	r3, [pc, #88]	; (29bc0 <_usart_read_buffer+0x70>)
   29b66:	4798      	blx	r3
   29b68:	68fb      	ldr	r3, [r7, #12]
   29b6a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   29b6c:	b29b      	uxth	r3, r3
   29b6e:	2b00      	cmp	r3, #0
   29b70:	d003      	beq.n	29b7a <_usart_read_buffer+0x2a>
   29b72:	4b14      	ldr	r3, [pc, #80]	; (29bc4 <_usart_read_buffer+0x74>)
   29b74:	4798      	blx	r3
   29b76:	2305      	movs	r3, #5
   29b78:	e01e      	b.n	29bb8 <_usart_read_buffer+0x68>
   29b7a:	68fb      	ldr	r3, [r7, #12]
   29b7c:	1dba      	adds	r2, r7, #6
   29b7e:	8812      	ldrh	r2, [r2, #0]
   29b80:	859a      	strh	r2, [r3, #44]	; 0x2c
   29b82:	4b10      	ldr	r3, [pc, #64]	; (29bc4 <_usart_read_buffer+0x74>)
   29b84:	4798      	blx	r3
   29b86:	68fb      	ldr	r3, [r7, #12]
   29b88:	68ba      	ldr	r2, [r7, #8]
   29b8a:	625a      	str	r2, [r3, #36]	; 0x24
   29b8c:	68fb      	ldr	r3, [r7, #12]
   29b8e:	2232      	movs	r2, #50	; 0x32
   29b90:	2105      	movs	r1, #5
   29b92:	5499      	strb	r1, [r3, r2]
   29b94:	697b      	ldr	r3, [r7, #20]
   29b96:	2204      	movs	r2, #4
   29b98:	759a      	strb	r2, [r3, #22]
   29b9a:	68fb      	ldr	r3, [r7, #12]
   29b9c:	7a1b      	ldrb	r3, [r3, #8]
   29b9e:	2b00      	cmp	r3, #0
   29ba0:	d002      	beq.n	29ba8 <_usart_read_buffer+0x58>
   29ba2:	697b      	ldr	r3, [r7, #20]
   29ba4:	2220      	movs	r2, #32
   29ba6:	759a      	strb	r2, [r3, #22]
   29ba8:	68fb      	ldr	r3, [r7, #12]
   29baa:	7a5b      	ldrb	r3, [r3, #9]
   29bac:	2b00      	cmp	r3, #0
   29bae:	d002      	beq.n	29bb6 <_usart_read_buffer+0x66>
   29bb0:	697b      	ldr	r3, [r7, #20]
   29bb2:	2208      	movs	r2, #8
   29bb4:	759a      	strb	r2, [r3, #22]
   29bb6:	2300      	movs	r3, #0
   29bb8:	0018      	movs	r0, r3
   29bba:	46bd      	mov	sp, r7
   29bbc:	b006      	add	sp, #24
   29bbe:	bd80      	pop	{r7, pc}
   29bc0:	00029a89 	.word	0x00029a89
   29bc4:	00029a9d 	.word	0x00029a9d

00029bc8 <usart_register_callback>:
   29bc8:	b580      	push	{r7, lr}
   29bca:	b084      	sub	sp, #16
   29bcc:	af00      	add	r7, sp, #0
   29bce:	60f8      	str	r0, [r7, #12]
   29bd0:	60b9      	str	r1, [r7, #8]
   29bd2:	1dfb      	adds	r3, r7, #7
   29bd4:	701a      	strb	r2, [r3, #0]
   29bd6:	1dfb      	adds	r3, r7, #7
   29bd8:	781b      	ldrb	r3, [r3, #0]
   29bda:	68fa      	ldr	r2, [r7, #12]
   29bdc:	3302      	adds	r3, #2
   29bde:	009b      	lsls	r3, r3, #2
   29be0:	18d3      	adds	r3, r2, r3
   29be2:	3304      	adds	r3, #4
   29be4:	68ba      	ldr	r2, [r7, #8]
   29be6:	601a      	str	r2, [r3, #0]
   29be8:	68fb      	ldr	r3, [r7, #12]
   29bea:	2230      	movs	r2, #48	; 0x30
   29bec:	5c9b      	ldrb	r3, [r3, r2]
   29bee:	b25a      	sxtb	r2, r3
   29bf0:	1dfb      	adds	r3, r7, #7
   29bf2:	781b      	ldrb	r3, [r3, #0]
   29bf4:	2101      	movs	r1, #1
   29bf6:	4099      	lsls	r1, r3
   29bf8:	000b      	movs	r3, r1
   29bfa:	b25b      	sxtb	r3, r3
   29bfc:	4313      	orrs	r3, r2
   29bfe:	b25b      	sxtb	r3, r3
   29c00:	b2d9      	uxtb	r1, r3
   29c02:	68fb      	ldr	r3, [r7, #12]
   29c04:	2230      	movs	r2, #48	; 0x30
   29c06:	5499      	strb	r1, [r3, r2]
   29c08:	46c0      	nop			; (mov r8, r8)
   29c0a:	46bd      	mov	sp, r7
   29c0c:	b004      	add	sp, #16
   29c0e:	bd80      	pop	{r7, pc}

00029c10 <usart_write_buffer_job>:
   29c10:	b580      	push	{r7, lr}
   29c12:	b084      	sub	sp, #16
   29c14:	af00      	add	r7, sp, #0
   29c16:	60f8      	str	r0, [r7, #12]
   29c18:	60b9      	str	r1, [r7, #8]
   29c1a:	1dbb      	adds	r3, r7, #6
   29c1c:	801a      	strh	r2, [r3, #0]
   29c1e:	1dbb      	adds	r3, r7, #6
   29c20:	881b      	ldrh	r3, [r3, #0]
   29c22:	2b00      	cmp	r3, #0
   29c24:	d101      	bne.n	29c2a <usart_write_buffer_job+0x1a>
   29c26:	2317      	movs	r3, #23
   29c28:	e010      	b.n	29c4c <usart_write_buffer_job+0x3c>
   29c2a:	68fb      	ldr	r3, [r7, #12]
   29c2c:	79db      	ldrb	r3, [r3, #7]
   29c2e:	2201      	movs	r2, #1
   29c30:	4053      	eors	r3, r2
   29c32:	b2db      	uxtb	r3, r3
   29c34:	2b00      	cmp	r3, #0
   29c36:	d001      	beq.n	29c3c <usart_write_buffer_job+0x2c>
   29c38:	231c      	movs	r3, #28
   29c3a:	e007      	b.n	29c4c <usart_write_buffer_job+0x3c>
   29c3c:	1dbb      	adds	r3, r7, #6
   29c3e:	881a      	ldrh	r2, [r3, #0]
   29c40:	68b9      	ldr	r1, [r7, #8]
   29c42:	68fb      	ldr	r3, [r7, #12]
   29c44:	0018      	movs	r0, r3
   29c46:	4b03      	ldr	r3, [pc, #12]	; (29c54 <usart_write_buffer_job+0x44>)
   29c48:	4798      	blx	r3
   29c4a:	0003      	movs	r3, r0
   29c4c:	0018      	movs	r0, r3
   29c4e:	46bd      	mov	sp, r7
   29c50:	b004      	add	sp, #16
   29c52:	bd80      	pop	{r7, pc}
   29c54:	00029af5 	.word	0x00029af5

00029c58 <usart_read_buffer_job>:
   29c58:	b580      	push	{r7, lr}
   29c5a:	b084      	sub	sp, #16
   29c5c:	af00      	add	r7, sp, #0
   29c5e:	60f8      	str	r0, [r7, #12]
   29c60:	60b9      	str	r1, [r7, #8]
   29c62:	1dbb      	adds	r3, r7, #6
   29c64:	801a      	strh	r2, [r3, #0]
   29c66:	1dbb      	adds	r3, r7, #6
   29c68:	881b      	ldrh	r3, [r3, #0]
   29c6a:	2b00      	cmp	r3, #0
   29c6c:	d101      	bne.n	29c72 <usart_read_buffer_job+0x1a>
   29c6e:	2317      	movs	r3, #23
   29c70:	e010      	b.n	29c94 <usart_read_buffer_job+0x3c>
   29c72:	68fb      	ldr	r3, [r7, #12]
   29c74:	799b      	ldrb	r3, [r3, #6]
   29c76:	2201      	movs	r2, #1
   29c78:	4053      	eors	r3, r2
   29c7a:	b2db      	uxtb	r3, r3
   29c7c:	2b00      	cmp	r3, #0
   29c7e:	d001      	beq.n	29c84 <usart_read_buffer_job+0x2c>
   29c80:	231c      	movs	r3, #28
   29c82:	e007      	b.n	29c94 <usart_read_buffer_job+0x3c>
   29c84:	1dbb      	adds	r3, r7, #6
   29c86:	881a      	ldrh	r2, [r3, #0]
   29c88:	68b9      	ldr	r1, [r7, #8]
   29c8a:	68fb      	ldr	r3, [r7, #12]
   29c8c:	0018      	movs	r0, r3
   29c8e:	4b03      	ldr	r3, [pc, #12]	; (29c9c <usart_read_buffer_job+0x44>)
   29c90:	4798      	blx	r3
   29c92:	0003      	movs	r3, r0
   29c94:	0018      	movs	r0, r3
   29c96:	46bd      	mov	sp, r7
   29c98:	b004      	add	sp, #16
   29c9a:	bd80      	pop	{r7, pc}
   29c9c:	00029b51 	.word	0x00029b51

00029ca0 <usart_get_job_status>:
   29ca0:	b580      	push	{r7, lr}
   29ca2:	b084      	sub	sp, #16
   29ca4:	af00      	add	r7, sp, #0
   29ca6:	6078      	str	r0, [r7, #4]
   29ca8:	000a      	movs	r2, r1
   29caa:	1cfb      	adds	r3, r7, #3
   29cac:	701a      	strb	r2, [r3, #0]
   29cae:	1cfb      	adds	r3, r7, #3
   29cb0:	781b      	ldrb	r3, [r3, #0]
   29cb2:	2b00      	cmp	r3, #0
   29cb4:	d002      	beq.n	29cbc <usart_get_job_status+0x1c>
   29cb6:	2b01      	cmp	r3, #1
   29cb8:	d007      	beq.n	29cca <usart_get_job_status+0x2a>
   29cba:	e00d      	b.n	29cd8 <usart_get_job_status+0x38>
   29cbc:	230f      	movs	r3, #15
   29cbe:	18fb      	adds	r3, r7, r3
   29cc0:	687a      	ldr	r2, [r7, #4]
   29cc2:	2132      	movs	r1, #50	; 0x32
   29cc4:	5c52      	ldrb	r2, [r2, r1]
   29cc6:	701a      	strb	r2, [r3, #0]
   29cc8:	e00b      	b.n	29ce2 <usart_get_job_status+0x42>
   29cca:	230f      	movs	r3, #15
   29ccc:	18fb      	adds	r3, r7, r3
   29cce:	687a      	ldr	r2, [r7, #4]
   29cd0:	2133      	movs	r1, #51	; 0x33
   29cd2:	5c52      	ldrb	r2, [r2, r1]
   29cd4:	701a      	strb	r2, [r3, #0]
   29cd6:	e004      	b.n	29ce2 <usart_get_job_status+0x42>
   29cd8:	230f      	movs	r3, #15
   29cda:	18fb      	adds	r3, r7, r3
   29cdc:	2217      	movs	r2, #23
   29cde:	701a      	strb	r2, [r3, #0]
   29ce0:	46c0      	nop			; (mov r8, r8)
   29ce2:	230f      	movs	r3, #15
   29ce4:	18fb      	adds	r3, r7, r3
   29ce6:	781b      	ldrb	r3, [r3, #0]
   29ce8:	0018      	movs	r0, r3
   29cea:	46bd      	mov	sp, r7
   29cec:	b004      	add	sp, #16
   29cee:	bd80      	pop	{r7, pc}

00029cf0 <_usart_interrupt_handler>:
   29cf0:	b580      	push	{r7, lr}
   29cf2:	b088      	sub	sp, #32
   29cf4:	af00      	add	r7, sp, #0
   29cf6:	0002      	movs	r2, r0
   29cf8:	1dfb      	adds	r3, r7, #7
   29cfa:	701a      	strb	r2, [r3, #0]
   29cfc:	1dfb      	adds	r3, r7, #7
   29cfe:	781a      	ldrb	r2, [r3, #0]
   29d00:	4ba3      	ldr	r3, [pc, #652]	; (29f90 <_usart_interrupt_handler+0x2a0>)
   29d02:	0092      	lsls	r2, r2, #2
   29d04:	58d3      	ldr	r3, [r2, r3]
   29d06:	61bb      	str	r3, [r7, #24]
   29d08:	69bb      	ldr	r3, [r7, #24]
   29d0a:	681b      	ldr	r3, [r3, #0]
   29d0c:	617b      	str	r3, [r7, #20]
   29d0e:	69bb      	ldr	r3, [r7, #24]
   29d10:	0018      	movs	r0, r3
   29d12:	4ba0      	ldr	r3, [pc, #640]	; (29f94 <_usart_interrupt_handler+0x2a4>)
   29d14:	4798      	blx	r3
   29d16:	697b      	ldr	r3, [r7, #20]
   29d18:	7e1b      	ldrb	r3, [r3, #24]
   29d1a:	b2da      	uxtb	r2, r3
   29d1c:	2312      	movs	r3, #18
   29d1e:	18fb      	adds	r3, r7, r3
   29d20:	801a      	strh	r2, [r3, #0]
   29d22:	697b      	ldr	r3, [r7, #20]
   29d24:	7d9b      	ldrb	r3, [r3, #22]
   29d26:	b2db      	uxtb	r3, r3
   29d28:	b29a      	uxth	r2, r3
   29d2a:	2312      	movs	r3, #18
   29d2c:	18fb      	adds	r3, r7, r3
   29d2e:	2112      	movs	r1, #18
   29d30:	1879      	adds	r1, r7, r1
   29d32:	8809      	ldrh	r1, [r1, #0]
   29d34:	400a      	ands	r2, r1
   29d36:	801a      	strh	r2, [r3, #0]
   29d38:	69bb      	ldr	r3, [r7, #24]
   29d3a:	2230      	movs	r2, #48	; 0x30
   29d3c:	5c9b      	ldrb	r3, [r3, r2]
   29d3e:	69ba      	ldr	r2, [r7, #24]
   29d40:	2131      	movs	r1, #49	; 0x31
   29d42:	5c52      	ldrb	r2, [r2, r1]
   29d44:	4013      	ands	r3, r2
   29d46:	b2da      	uxtb	r2, r3
   29d48:	2310      	movs	r3, #16
   29d4a:	18fb      	adds	r3, r7, r3
   29d4c:	801a      	strh	r2, [r3, #0]
   29d4e:	2312      	movs	r3, #18
   29d50:	18fb      	adds	r3, r7, r3
   29d52:	881b      	ldrh	r3, [r3, #0]
   29d54:	2201      	movs	r2, #1
   29d56:	4013      	ands	r3, r2
   29d58:	d044      	beq.n	29de4 <_usart_interrupt_handler+0xf4>
   29d5a:	69bb      	ldr	r3, [r7, #24]
   29d5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   29d5e:	b29b      	uxth	r3, r3
   29d60:	2b00      	cmp	r3, #0
   29d62:	d03c      	beq.n	29dde <_usart_interrupt_handler+0xee>
   29d64:	69bb      	ldr	r3, [r7, #24]
   29d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29d68:	781b      	ldrb	r3, [r3, #0]
   29d6a:	b2da      	uxtb	r2, r3
   29d6c:	231c      	movs	r3, #28
   29d6e:	18fb      	adds	r3, r7, r3
   29d70:	801a      	strh	r2, [r3, #0]
   29d72:	69bb      	ldr	r3, [r7, #24]
   29d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29d76:	1c5a      	adds	r2, r3, #1
   29d78:	69bb      	ldr	r3, [r7, #24]
   29d7a:	629a      	str	r2, [r3, #40]	; 0x28
   29d7c:	69bb      	ldr	r3, [r7, #24]
   29d7e:	795b      	ldrb	r3, [r3, #5]
   29d80:	2b01      	cmp	r3, #1
   29d82:	d113      	bne.n	29dac <_usart_interrupt_handler+0xbc>
   29d84:	69bb      	ldr	r3, [r7, #24]
   29d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29d88:	781b      	ldrb	r3, [r3, #0]
   29d8a:	b2db      	uxtb	r3, r3
   29d8c:	021b      	lsls	r3, r3, #8
   29d8e:	b21a      	sxth	r2, r3
   29d90:	231c      	movs	r3, #28
   29d92:	18fb      	adds	r3, r7, r3
   29d94:	2100      	movs	r1, #0
   29d96:	5e5b      	ldrsh	r3, [r3, r1]
   29d98:	4313      	orrs	r3, r2
   29d9a:	b21a      	sxth	r2, r3
   29d9c:	231c      	movs	r3, #28
   29d9e:	18fb      	adds	r3, r7, r3
   29da0:	801a      	strh	r2, [r3, #0]
   29da2:	69bb      	ldr	r3, [r7, #24]
   29da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29da6:	1c5a      	adds	r2, r3, #1
   29da8:	69bb      	ldr	r3, [r7, #24]
   29daa:	629a      	str	r2, [r3, #40]	; 0x28
   29dac:	231c      	movs	r3, #28
   29dae:	18fb      	adds	r3, r7, r3
   29db0:	881b      	ldrh	r3, [r3, #0]
   29db2:	05db      	lsls	r3, r3, #23
   29db4:	0ddb      	lsrs	r3, r3, #23
   29db6:	b29a      	uxth	r2, r3
   29db8:	697b      	ldr	r3, [r7, #20]
   29dba:	851a      	strh	r2, [r3, #40]	; 0x28
   29dbc:	69bb      	ldr	r3, [r7, #24]
   29dbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   29dc0:	b29b      	uxth	r3, r3
   29dc2:	3b01      	subs	r3, #1
   29dc4:	b29b      	uxth	r3, r3
   29dc6:	69ba      	ldr	r2, [r7, #24]
   29dc8:	1c19      	adds	r1, r3, #0
   29dca:	85d1      	strh	r1, [r2, #46]	; 0x2e
   29dcc:	2b00      	cmp	r3, #0
   29dce:	d109      	bne.n	29de4 <_usart_interrupt_handler+0xf4>
   29dd0:	697b      	ldr	r3, [r7, #20]
   29dd2:	2201      	movs	r2, #1
   29dd4:	751a      	strb	r2, [r3, #20]
   29dd6:	697b      	ldr	r3, [r7, #20]
   29dd8:	2202      	movs	r2, #2
   29dda:	759a      	strb	r2, [r3, #22]
   29ddc:	e002      	b.n	29de4 <_usart_interrupt_handler+0xf4>
   29dde:	697b      	ldr	r3, [r7, #20]
   29de0:	2201      	movs	r2, #1
   29de2:	751a      	strb	r2, [r3, #20]
   29de4:	2312      	movs	r3, #18
   29de6:	18fb      	adds	r3, r7, r3
   29de8:	881b      	ldrh	r3, [r3, #0]
   29dea:	2202      	movs	r2, #2
   29dec:	4013      	ands	r3, r2
   29dee:	d011      	beq.n	29e14 <_usart_interrupt_handler+0x124>
   29df0:	697b      	ldr	r3, [r7, #20]
   29df2:	2202      	movs	r2, #2
   29df4:	751a      	strb	r2, [r3, #20]
   29df6:	69bb      	ldr	r3, [r7, #24]
   29df8:	2233      	movs	r2, #51	; 0x33
   29dfa:	2100      	movs	r1, #0
   29dfc:	5499      	strb	r1, [r3, r2]
   29dfe:	2310      	movs	r3, #16
   29e00:	18fb      	adds	r3, r7, r3
   29e02:	881b      	ldrh	r3, [r3, #0]
   29e04:	2201      	movs	r2, #1
   29e06:	4013      	ands	r3, r2
   29e08:	d004      	beq.n	29e14 <_usart_interrupt_handler+0x124>
   29e0a:	69bb      	ldr	r3, [r7, #24]
   29e0c:	68db      	ldr	r3, [r3, #12]
   29e0e:	69ba      	ldr	r2, [r7, #24]
   29e10:	0010      	movs	r0, r2
   29e12:	4798      	blx	r3
   29e14:	2312      	movs	r3, #18
   29e16:	18fb      	adds	r3, r7, r3
   29e18:	881b      	ldrh	r3, [r3, #0]
   29e1a:	2204      	movs	r2, #4
   29e1c:	4013      	ands	r3, r2
   29e1e:	d100      	bne.n	29e22 <_usart_interrupt_handler+0x132>
   29e20:	e0bd      	b.n	29f9e <_usart_interrupt_handler+0x2ae>
   29e22:	69bb      	ldr	r3, [r7, #24]
   29e24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   29e26:	b29b      	uxth	r3, r3
   29e28:	2b00      	cmp	r3, #0
   29e2a:	d100      	bne.n	29e2e <_usart_interrupt_handler+0x13e>
   29e2c:	e0b4      	b.n	29f98 <_usart_interrupt_handler+0x2a8>
   29e2e:	697b      	ldr	r3, [r7, #20]
   29e30:	8b5b      	ldrh	r3, [r3, #26]
   29e32:	b29b      	uxth	r3, r3
   29e34:	b2da      	uxtb	r2, r3
   29e36:	231f      	movs	r3, #31
   29e38:	18fb      	adds	r3, r7, r3
   29e3a:	213f      	movs	r1, #63	; 0x3f
   29e3c:	400a      	ands	r2, r1
   29e3e:	701a      	strb	r2, [r3, #0]
   29e40:	231f      	movs	r3, #31
   29e42:	18fb      	adds	r3, r7, r3
   29e44:	781b      	ldrb	r3, [r3, #0]
   29e46:	2208      	movs	r2, #8
   29e48:	4013      	ands	r3, r2
   29e4a:	d007      	beq.n	29e5c <_usart_interrupt_handler+0x16c>
   29e4c:	231f      	movs	r3, #31
   29e4e:	18fb      	adds	r3, r7, r3
   29e50:	221f      	movs	r2, #31
   29e52:	18ba      	adds	r2, r7, r2
   29e54:	7812      	ldrb	r2, [r2, #0]
   29e56:	2108      	movs	r1, #8
   29e58:	438a      	bics	r2, r1
   29e5a:	701a      	strb	r2, [r3, #0]
   29e5c:	231f      	movs	r3, #31
   29e5e:	18fb      	adds	r3, r7, r3
   29e60:	781b      	ldrb	r3, [r3, #0]
   29e62:	2b00      	cmp	r3, #0
   29e64:	d050      	beq.n	29f08 <_usart_interrupt_handler+0x218>
   29e66:	231f      	movs	r3, #31
   29e68:	18fb      	adds	r3, r7, r3
   29e6a:	781b      	ldrb	r3, [r3, #0]
   29e6c:	2202      	movs	r2, #2
   29e6e:	4013      	ands	r3, r2
   29e70:	d007      	beq.n	29e82 <_usart_interrupt_handler+0x192>
   29e72:	69bb      	ldr	r3, [r7, #24]
   29e74:	2232      	movs	r2, #50	; 0x32
   29e76:	211a      	movs	r1, #26
   29e78:	5499      	strb	r1, [r3, r2]
   29e7a:	697b      	ldr	r3, [r7, #20]
   29e7c:	2202      	movs	r2, #2
   29e7e:	835a      	strh	r2, [r3, #26]
   29e80:	e036      	b.n	29ef0 <_usart_interrupt_handler+0x200>
   29e82:	231f      	movs	r3, #31
   29e84:	18fb      	adds	r3, r7, r3
   29e86:	781b      	ldrb	r3, [r3, #0]
   29e88:	2204      	movs	r2, #4
   29e8a:	4013      	ands	r3, r2
   29e8c:	d007      	beq.n	29e9e <_usart_interrupt_handler+0x1ae>
   29e8e:	69bb      	ldr	r3, [r7, #24]
   29e90:	2232      	movs	r2, #50	; 0x32
   29e92:	211e      	movs	r1, #30
   29e94:	5499      	strb	r1, [r3, r2]
   29e96:	697b      	ldr	r3, [r7, #20]
   29e98:	2204      	movs	r2, #4
   29e9a:	835a      	strh	r2, [r3, #26]
   29e9c:	e028      	b.n	29ef0 <_usart_interrupt_handler+0x200>
   29e9e:	231f      	movs	r3, #31
   29ea0:	18fb      	adds	r3, r7, r3
   29ea2:	781b      	ldrb	r3, [r3, #0]
   29ea4:	2201      	movs	r2, #1
   29ea6:	4013      	ands	r3, r2
   29ea8:	d007      	beq.n	29eba <_usart_interrupt_handler+0x1ca>
   29eaa:	69bb      	ldr	r3, [r7, #24]
   29eac:	2232      	movs	r2, #50	; 0x32
   29eae:	2113      	movs	r1, #19
   29eb0:	5499      	strb	r1, [r3, r2]
   29eb2:	697b      	ldr	r3, [r7, #20]
   29eb4:	2201      	movs	r2, #1
   29eb6:	835a      	strh	r2, [r3, #26]
   29eb8:	e01a      	b.n	29ef0 <_usart_interrupt_handler+0x200>
   29eba:	231f      	movs	r3, #31
   29ebc:	18fb      	adds	r3, r7, r3
   29ebe:	781b      	ldrb	r3, [r3, #0]
   29ec0:	2210      	movs	r2, #16
   29ec2:	4013      	ands	r3, r2
   29ec4:	d007      	beq.n	29ed6 <_usart_interrupt_handler+0x1e6>
   29ec6:	69bb      	ldr	r3, [r7, #24]
   29ec8:	2232      	movs	r2, #50	; 0x32
   29eca:	2142      	movs	r1, #66	; 0x42
   29ecc:	5499      	strb	r1, [r3, r2]
   29ece:	697b      	ldr	r3, [r7, #20]
   29ed0:	2210      	movs	r2, #16
   29ed2:	835a      	strh	r2, [r3, #26]
   29ed4:	e00c      	b.n	29ef0 <_usart_interrupt_handler+0x200>
   29ed6:	231f      	movs	r3, #31
   29ed8:	18fb      	adds	r3, r7, r3
   29eda:	781b      	ldrb	r3, [r3, #0]
   29edc:	2220      	movs	r2, #32
   29ede:	4013      	ands	r3, r2
   29ee0:	d006      	beq.n	29ef0 <_usart_interrupt_handler+0x200>
   29ee2:	69bb      	ldr	r3, [r7, #24]
   29ee4:	2232      	movs	r2, #50	; 0x32
   29ee6:	2141      	movs	r1, #65	; 0x41
   29ee8:	5499      	strb	r1, [r3, r2]
   29eea:	697b      	ldr	r3, [r7, #20]
   29eec:	2220      	movs	r2, #32
   29eee:	835a      	strh	r2, [r3, #26]
   29ef0:	2310      	movs	r3, #16
   29ef2:	18fb      	adds	r3, r7, r3
   29ef4:	881b      	ldrh	r3, [r3, #0]
   29ef6:	2204      	movs	r2, #4
   29ef8:	4013      	ands	r3, r2
   29efa:	d050      	beq.n	29f9e <_usart_interrupt_handler+0x2ae>
   29efc:	69bb      	ldr	r3, [r7, #24]
   29efe:	695b      	ldr	r3, [r3, #20]
   29f00:	69ba      	ldr	r2, [r7, #24]
   29f02:	0010      	movs	r0, r2
   29f04:	4798      	blx	r3
   29f06:	e04a      	b.n	29f9e <_usart_interrupt_handler+0x2ae>
   29f08:	697b      	ldr	r3, [r7, #20]
   29f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   29f0c:	b29a      	uxth	r2, r3
   29f0e:	230e      	movs	r3, #14
   29f10:	18fb      	adds	r3, r7, r3
   29f12:	05d2      	lsls	r2, r2, #23
   29f14:	0dd2      	lsrs	r2, r2, #23
   29f16:	801a      	strh	r2, [r3, #0]
   29f18:	69bb      	ldr	r3, [r7, #24]
   29f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   29f1c:	220e      	movs	r2, #14
   29f1e:	18ba      	adds	r2, r7, r2
   29f20:	8812      	ldrh	r2, [r2, #0]
   29f22:	b2d2      	uxtb	r2, r2
   29f24:	701a      	strb	r2, [r3, #0]
   29f26:	69bb      	ldr	r3, [r7, #24]
   29f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   29f2a:	1c5a      	adds	r2, r3, #1
   29f2c:	69bb      	ldr	r3, [r7, #24]
   29f2e:	625a      	str	r2, [r3, #36]	; 0x24
   29f30:	69bb      	ldr	r3, [r7, #24]
   29f32:	795b      	ldrb	r3, [r3, #5]
   29f34:	2b01      	cmp	r3, #1
   29f36:	d10d      	bne.n	29f54 <_usart_interrupt_handler+0x264>
   29f38:	69bb      	ldr	r3, [r7, #24]
   29f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   29f3c:	220e      	movs	r2, #14
   29f3e:	18ba      	adds	r2, r7, r2
   29f40:	8812      	ldrh	r2, [r2, #0]
   29f42:	0a12      	lsrs	r2, r2, #8
   29f44:	b292      	uxth	r2, r2
   29f46:	b2d2      	uxtb	r2, r2
   29f48:	701a      	strb	r2, [r3, #0]
   29f4a:	69bb      	ldr	r3, [r7, #24]
   29f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   29f4e:	1c5a      	adds	r2, r3, #1
   29f50:	69bb      	ldr	r3, [r7, #24]
   29f52:	625a      	str	r2, [r3, #36]	; 0x24
   29f54:	69bb      	ldr	r3, [r7, #24]
   29f56:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   29f58:	b29b      	uxth	r3, r3
   29f5a:	3b01      	subs	r3, #1
   29f5c:	b29b      	uxth	r3, r3
   29f5e:	69ba      	ldr	r2, [r7, #24]
   29f60:	1c19      	adds	r1, r3, #0
   29f62:	8591      	strh	r1, [r2, #44]	; 0x2c
   29f64:	2b00      	cmp	r3, #0
   29f66:	d11a      	bne.n	29f9e <_usart_interrupt_handler+0x2ae>
   29f68:	697b      	ldr	r3, [r7, #20]
   29f6a:	2204      	movs	r2, #4
   29f6c:	751a      	strb	r2, [r3, #20]
   29f6e:	69bb      	ldr	r3, [r7, #24]
   29f70:	2232      	movs	r2, #50	; 0x32
   29f72:	2100      	movs	r1, #0
   29f74:	5499      	strb	r1, [r3, r2]
   29f76:	2310      	movs	r3, #16
   29f78:	18fb      	adds	r3, r7, r3
   29f7a:	881b      	ldrh	r3, [r3, #0]
   29f7c:	2202      	movs	r2, #2
   29f7e:	4013      	ands	r3, r2
   29f80:	d00d      	beq.n	29f9e <_usart_interrupt_handler+0x2ae>
   29f82:	69bb      	ldr	r3, [r7, #24]
   29f84:	691b      	ldr	r3, [r3, #16]
   29f86:	69ba      	ldr	r2, [r7, #24]
   29f88:	0010      	movs	r0, r2
   29f8a:	4798      	blx	r3
   29f8c:	e007      	b.n	29f9e <_usart_interrupt_handler+0x2ae>
   29f8e:	46c0      	nop			; (mov r8, r8)
   29f90:	20005848 	.word	0x20005848
   29f94:	00029ad1 	.word	0x00029ad1
   29f98:	697b      	ldr	r3, [r7, #20]
   29f9a:	2204      	movs	r2, #4
   29f9c:	751a      	strb	r2, [r3, #20]
   29f9e:	2312      	movs	r3, #18
   29fa0:	18fb      	adds	r3, r7, r3
   29fa2:	881b      	ldrh	r3, [r3, #0]
   29fa4:	2210      	movs	r2, #16
   29fa6:	4013      	ands	r3, r2
   29fa8:	d010      	beq.n	29fcc <_usart_interrupt_handler+0x2dc>
   29faa:	697b      	ldr	r3, [r7, #20]
   29fac:	2210      	movs	r2, #16
   29fae:	751a      	strb	r2, [r3, #20]
   29fb0:	697b      	ldr	r3, [r7, #20]
   29fb2:	2210      	movs	r2, #16
   29fb4:	761a      	strb	r2, [r3, #24]
   29fb6:	2310      	movs	r3, #16
   29fb8:	18fb      	adds	r3, r7, r3
   29fba:	881b      	ldrh	r3, [r3, #0]
   29fbc:	2210      	movs	r2, #16
   29fbe:	4013      	ands	r3, r2
   29fc0:	d004      	beq.n	29fcc <_usart_interrupt_handler+0x2dc>
   29fc2:	69bb      	ldr	r3, [r7, #24]
   29fc4:	69db      	ldr	r3, [r3, #28]
   29fc6:	69ba      	ldr	r2, [r7, #24]
   29fc8:	0010      	movs	r0, r2
   29fca:	4798      	blx	r3
   29fcc:	2312      	movs	r3, #18
   29fce:	18fb      	adds	r3, r7, r3
   29fd0:	881b      	ldrh	r3, [r3, #0]
   29fd2:	2220      	movs	r2, #32
   29fd4:	4013      	ands	r3, r2
   29fd6:	d010      	beq.n	29ffa <_usart_interrupt_handler+0x30a>
   29fd8:	697b      	ldr	r3, [r7, #20]
   29fda:	2220      	movs	r2, #32
   29fdc:	751a      	strb	r2, [r3, #20]
   29fde:	697b      	ldr	r3, [r7, #20]
   29fe0:	2220      	movs	r2, #32
   29fe2:	761a      	strb	r2, [r3, #24]
   29fe4:	2310      	movs	r3, #16
   29fe6:	18fb      	adds	r3, r7, r3
   29fe8:	881b      	ldrh	r3, [r3, #0]
   29fea:	2208      	movs	r2, #8
   29fec:	4013      	ands	r3, r2
   29fee:	d004      	beq.n	29ffa <_usart_interrupt_handler+0x30a>
   29ff0:	69bb      	ldr	r3, [r7, #24]
   29ff2:	699b      	ldr	r3, [r3, #24]
   29ff4:	69ba      	ldr	r2, [r7, #24]
   29ff6:	0010      	movs	r0, r2
   29ff8:	4798      	blx	r3
   29ffa:	2312      	movs	r3, #18
   29ffc:	18fb      	adds	r3, r7, r3
   29ffe:	881b      	ldrh	r3, [r3, #0]
   2a000:	2208      	movs	r2, #8
   2a002:	4013      	ands	r3, r2
   2a004:	d010      	beq.n	2a028 <_usart_interrupt_handler+0x338>
   2a006:	697b      	ldr	r3, [r7, #20]
   2a008:	2208      	movs	r2, #8
   2a00a:	751a      	strb	r2, [r3, #20]
   2a00c:	697b      	ldr	r3, [r7, #20]
   2a00e:	2208      	movs	r2, #8
   2a010:	761a      	strb	r2, [r3, #24]
   2a012:	2310      	movs	r3, #16
   2a014:	18fb      	adds	r3, r7, r3
   2a016:	881b      	ldrh	r3, [r3, #0]
   2a018:	2220      	movs	r2, #32
   2a01a:	4013      	ands	r3, r2
   2a01c:	d004      	beq.n	2a028 <_usart_interrupt_handler+0x338>
   2a01e:	69bb      	ldr	r3, [r7, #24]
   2a020:	6a1b      	ldr	r3, [r3, #32]
   2a022:	69ba      	ldr	r2, [r7, #24]
   2a024:	0010      	movs	r0, r2
   2a026:	4798      	blx	r3
   2a028:	46c0      	nop			; (mov r8, r8)
   2a02a:	46bd      	mov	sp, r7
   2a02c:	b008      	add	sp, #32
   2a02e:	bd80      	pop	{r7, pc}

0002a030 <system_gclk_gen_get_config_defaults>:
   2a030:	b580      	push	{r7, lr}
   2a032:	b082      	sub	sp, #8
   2a034:	af00      	add	r7, sp, #0
   2a036:	6078      	str	r0, [r7, #4]
   2a038:	687b      	ldr	r3, [r7, #4]
   2a03a:	2201      	movs	r2, #1
   2a03c:	605a      	str	r2, [r3, #4]
   2a03e:	687b      	ldr	r3, [r7, #4]
   2a040:	2200      	movs	r2, #0
   2a042:	705a      	strb	r2, [r3, #1]
   2a044:	687b      	ldr	r3, [r7, #4]
   2a046:	2206      	movs	r2, #6
   2a048:	701a      	strb	r2, [r3, #0]
   2a04a:	687b      	ldr	r3, [r7, #4]
   2a04c:	2200      	movs	r2, #0
   2a04e:	721a      	strb	r2, [r3, #8]
   2a050:	687b      	ldr	r3, [r7, #4]
   2a052:	2200      	movs	r2, #0
   2a054:	725a      	strb	r2, [r3, #9]
   2a056:	46c0      	nop			; (mov r8, r8)
   2a058:	46bd      	mov	sp, r7
   2a05a:	b002      	add	sp, #8
   2a05c:	bd80      	pop	{r7, pc}

0002a05e <system_gclk_chan_get_config_defaults>:
   2a05e:	b580      	push	{r7, lr}
   2a060:	b082      	sub	sp, #8
   2a062:	af00      	add	r7, sp, #0
   2a064:	6078      	str	r0, [r7, #4]
   2a066:	687b      	ldr	r3, [r7, #4]
   2a068:	2200      	movs	r2, #0
   2a06a:	701a      	strb	r2, [r3, #0]
   2a06c:	46c0      	nop			; (mov r8, r8)
   2a06e:	46bd      	mov	sp, r7
   2a070:	b002      	add	sp, #8
   2a072:	bd80      	pop	{r7, pc}

0002a074 <system_clock_source_osc8m_get_config_defaults>:
   2a074:	b580      	push	{r7, lr}
   2a076:	b082      	sub	sp, #8
   2a078:	af00      	add	r7, sp, #0
   2a07a:	6078      	str	r0, [r7, #4]
   2a07c:	687b      	ldr	r3, [r7, #4]
   2a07e:	2203      	movs	r2, #3
   2a080:	701a      	strb	r2, [r3, #0]
   2a082:	687b      	ldr	r3, [r7, #4]
   2a084:	2200      	movs	r2, #0
   2a086:	705a      	strb	r2, [r3, #1]
   2a088:	687b      	ldr	r3, [r7, #4]
   2a08a:	2201      	movs	r2, #1
   2a08c:	709a      	strb	r2, [r3, #2]
   2a08e:	46c0      	nop			; (mov r8, r8)
   2a090:	46bd      	mov	sp, r7
   2a092:	b002      	add	sp, #8
   2a094:	bd80      	pop	{r7, pc}
	...

0002a098 <system_cpu_clock_set_divider>:
   2a098:	b580      	push	{r7, lr}
   2a09a:	b082      	sub	sp, #8
   2a09c:	af00      	add	r7, sp, #0
   2a09e:	0002      	movs	r2, r0
   2a0a0:	1dfb      	adds	r3, r7, #7
   2a0a2:	701a      	strb	r2, [r3, #0]
   2a0a4:	4a03      	ldr	r2, [pc, #12]	; (2a0b4 <system_cpu_clock_set_divider+0x1c>)
   2a0a6:	1dfb      	adds	r3, r7, #7
   2a0a8:	781b      	ldrb	r3, [r3, #0]
   2a0aa:	7213      	strb	r3, [r2, #8]
   2a0ac:	46c0      	nop			; (mov r8, r8)
   2a0ae:	46bd      	mov	sp, r7
   2a0b0:	b002      	add	sp, #8
   2a0b2:	bd80      	pop	{r7, pc}
   2a0b4:	40000400 	.word	0x40000400

0002a0b8 <system_apb_clock_set_divider>:
   2a0b8:	b580      	push	{r7, lr}
   2a0ba:	b082      	sub	sp, #8
   2a0bc:	af00      	add	r7, sp, #0
   2a0be:	0002      	movs	r2, r0
   2a0c0:	1dfb      	adds	r3, r7, #7
   2a0c2:	701a      	strb	r2, [r3, #0]
   2a0c4:	1dbb      	adds	r3, r7, #6
   2a0c6:	1c0a      	adds	r2, r1, #0
   2a0c8:	701a      	strb	r2, [r3, #0]
   2a0ca:	1dfb      	adds	r3, r7, #7
   2a0cc:	781b      	ldrb	r3, [r3, #0]
   2a0ce:	2b01      	cmp	r3, #1
   2a0d0:	d008      	beq.n	2a0e4 <system_apb_clock_set_divider+0x2c>
   2a0d2:	2b02      	cmp	r3, #2
   2a0d4:	d00b      	beq.n	2a0ee <system_apb_clock_set_divider+0x36>
   2a0d6:	2b00      	cmp	r3, #0
   2a0d8:	d10e      	bne.n	2a0f8 <system_apb_clock_set_divider+0x40>
   2a0da:	4a0b      	ldr	r2, [pc, #44]	; (2a108 <system_apb_clock_set_divider+0x50>)
   2a0dc:	1dbb      	adds	r3, r7, #6
   2a0de:	781b      	ldrb	r3, [r3, #0]
   2a0e0:	7253      	strb	r3, [r2, #9]
   2a0e2:	e00b      	b.n	2a0fc <system_apb_clock_set_divider+0x44>
   2a0e4:	4a08      	ldr	r2, [pc, #32]	; (2a108 <system_apb_clock_set_divider+0x50>)
   2a0e6:	1dbb      	adds	r3, r7, #6
   2a0e8:	781b      	ldrb	r3, [r3, #0]
   2a0ea:	7293      	strb	r3, [r2, #10]
   2a0ec:	e006      	b.n	2a0fc <system_apb_clock_set_divider+0x44>
   2a0ee:	4a06      	ldr	r2, [pc, #24]	; (2a108 <system_apb_clock_set_divider+0x50>)
   2a0f0:	1dbb      	adds	r3, r7, #6
   2a0f2:	781b      	ldrb	r3, [r3, #0]
   2a0f4:	72d3      	strb	r3, [r2, #11]
   2a0f6:	e001      	b.n	2a0fc <system_apb_clock_set_divider+0x44>
   2a0f8:	2317      	movs	r3, #23
   2a0fa:	e000      	b.n	2a0fe <system_apb_clock_set_divider+0x46>
   2a0fc:	2300      	movs	r3, #0
   2a0fe:	0018      	movs	r0, r3
   2a100:	46bd      	mov	sp, r7
   2a102:	b002      	add	sp, #8
   2a104:	bd80      	pop	{r7, pc}
   2a106:	46c0      	nop			; (mov r8, r8)
   2a108:	40000400 	.word	0x40000400

0002a10c <system_clock_source_dpll_get_config_defaults>:
   2a10c:	b580      	push	{r7, lr}
   2a10e:	b082      	sub	sp, #8
   2a110:	af00      	add	r7, sp, #0
   2a112:	6078      	str	r0, [r7, #4]
   2a114:	687b      	ldr	r3, [r7, #4]
   2a116:	2201      	movs	r2, #1
   2a118:	701a      	strb	r2, [r3, #0]
   2a11a:	687b      	ldr	r3, [r7, #4]
   2a11c:	2200      	movs	r2, #0
   2a11e:	705a      	strb	r2, [r3, #1]
   2a120:	687b      	ldr	r3, [r7, #4]
   2a122:	2200      	movs	r2, #0
   2a124:	709a      	strb	r2, [r3, #2]
   2a126:	687b      	ldr	r3, [r7, #4]
   2a128:	2200      	movs	r2, #0
   2a12a:	70da      	strb	r2, [r3, #3]
   2a12c:	687b      	ldr	r3, [r7, #4]
   2a12e:	2200      	movs	r2, #0
   2a130:	711a      	strb	r2, [r3, #4]
   2a132:	687b      	ldr	r3, [r7, #4]
   2a134:	4a0a      	ldr	r2, [pc, #40]	; (2a160 <system_clock_source_dpll_get_config_defaults+0x54>)
   2a136:	609a      	str	r2, [r3, #8]
   2a138:	687b      	ldr	r3, [r7, #4]
   2a13a:	2280      	movs	r2, #128	; 0x80
   2a13c:	0212      	lsls	r2, r2, #8
   2a13e:	60da      	str	r2, [r3, #12]
   2a140:	687b      	ldr	r3, [r7, #4]
   2a142:	2201      	movs	r2, #1
   2a144:	821a      	strh	r2, [r3, #16]
   2a146:	687b      	ldr	r3, [r7, #4]
   2a148:	2200      	movs	r2, #0
   2a14a:	751a      	strb	r2, [r3, #20]
   2a14c:	687b      	ldr	r3, [r7, #4]
   2a14e:	2200      	movs	r2, #0
   2a150:	74da      	strb	r2, [r3, #19]
   2a152:	687b      	ldr	r3, [r7, #4]
   2a154:	2200      	movs	r2, #0
   2a156:	749a      	strb	r2, [r3, #18]
   2a158:	46c0      	nop			; (mov r8, r8)
   2a15a:	46bd      	mov	sp, r7
   2a15c:	b002      	add	sp, #8
   2a15e:	bd80      	pop	{r7, pc}
   2a160:	02dc6c00 	.word	0x02dc6c00

0002a164 <system_flash_set_waitstates>:
   2a164:	b580      	push	{r7, lr}
   2a166:	b082      	sub	sp, #8
   2a168:	af00      	add	r7, sp, #0
   2a16a:	0002      	movs	r2, r0
   2a16c:	1dfb      	adds	r3, r7, #7
   2a16e:	701a      	strb	r2, [r3, #0]
   2a170:	4a08      	ldr	r2, [pc, #32]	; (2a194 <system_flash_set_waitstates+0x30>)
   2a172:	1dfb      	adds	r3, r7, #7
   2a174:	781b      	ldrb	r3, [r3, #0]
   2a176:	210f      	movs	r1, #15
   2a178:	400b      	ands	r3, r1
   2a17a:	b2d9      	uxtb	r1, r3
   2a17c:	6853      	ldr	r3, [r2, #4]
   2a17e:	200f      	movs	r0, #15
   2a180:	4001      	ands	r1, r0
   2a182:	0049      	lsls	r1, r1, #1
   2a184:	201e      	movs	r0, #30
   2a186:	4383      	bics	r3, r0
   2a188:	430b      	orrs	r3, r1
   2a18a:	6053      	str	r3, [r2, #4]
   2a18c:	46c0      	nop			; (mov r8, r8)
   2a18e:	46bd      	mov	sp, r7
   2a190:	b002      	add	sp, #8
   2a192:	bd80      	pop	{r7, pc}
   2a194:	41004000 	.word	0x41004000

0002a198 <_system_dfll_wait_for_sync>:
   2a198:	b580      	push	{r7, lr}
   2a19a:	af00      	add	r7, sp, #0
   2a19c:	46c0      	nop			; (mov r8, r8)
   2a19e:	4b04      	ldr	r3, [pc, #16]	; (2a1b0 <_system_dfll_wait_for_sync+0x18>)
   2a1a0:	68db      	ldr	r3, [r3, #12]
   2a1a2:	2210      	movs	r2, #16
   2a1a4:	4013      	ands	r3, r2
   2a1a6:	d0fa      	beq.n	2a19e <_system_dfll_wait_for_sync+0x6>
   2a1a8:	46c0      	nop			; (mov r8, r8)
   2a1aa:	46bd      	mov	sp, r7
   2a1ac:	bd80      	pop	{r7, pc}
   2a1ae:	46c0      	nop			; (mov r8, r8)
   2a1b0:	40000800 	.word	0x40000800

0002a1b4 <_system_clock_source_dfll_set_config_errata_9905>:
   2a1b4:	b580      	push	{r7, lr}
   2a1b6:	af00      	add	r7, sp, #0
   2a1b8:	4b0c      	ldr	r3, [pc, #48]	; (2a1ec <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2a1ba:	2202      	movs	r2, #2
   2a1bc:	849a      	strh	r2, [r3, #36]	; 0x24
   2a1be:	4b0c      	ldr	r3, [pc, #48]	; (2a1f0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   2a1c0:	4798      	blx	r3
   2a1c2:	4a0a      	ldr	r2, [pc, #40]	; (2a1ec <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2a1c4:	4b0b      	ldr	r3, [pc, #44]	; (2a1f4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   2a1c6:	689b      	ldr	r3, [r3, #8]
   2a1c8:	62d3      	str	r3, [r2, #44]	; 0x2c
   2a1ca:	4a08      	ldr	r2, [pc, #32]	; (2a1ec <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2a1cc:	4b09      	ldr	r3, [pc, #36]	; (2a1f4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   2a1ce:	685b      	ldr	r3, [r3, #4]
   2a1d0:	6293      	str	r3, [r2, #40]	; 0x28
   2a1d2:	4b06      	ldr	r3, [pc, #24]	; (2a1ec <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2a1d4:	2200      	movs	r2, #0
   2a1d6:	849a      	strh	r2, [r3, #36]	; 0x24
   2a1d8:	4b05      	ldr	r3, [pc, #20]	; (2a1f0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   2a1da:	4798      	blx	r3
   2a1dc:	4a03      	ldr	r2, [pc, #12]	; (2a1ec <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2a1de:	4b05      	ldr	r3, [pc, #20]	; (2a1f4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   2a1e0:	681b      	ldr	r3, [r3, #0]
   2a1e2:	b29b      	uxth	r3, r3
   2a1e4:	8493      	strh	r3, [r2, #36]	; 0x24
   2a1e6:	46c0      	nop			; (mov r8, r8)
   2a1e8:	46bd      	mov	sp, r7
   2a1ea:	bd80      	pop	{r7, pc}
   2a1ec:	40000800 	.word	0x40000800
   2a1f0:	0002a199 	.word	0x0002a199
   2a1f4:	20003f18 	.word	0x20003f18

0002a1f8 <system_clock_source_get_hz>:
   2a1f8:	b580      	push	{r7, lr}
   2a1fa:	b082      	sub	sp, #8
   2a1fc:	af00      	add	r7, sp, #0
   2a1fe:	0002      	movs	r2, r0
   2a200:	1dfb      	adds	r3, r7, #7
   2a202:	701a      	strb	r2, [r3, #0]
   2a204:	1dfb      	adds	r3, r7, #7
   2a206:	781b      	ldrb	r3, [r3, #0]
   2a208:	2b08      	cmp	r3, #8
   2a20a:	d841      	bhi.n	2a290 <system_clock_source_get_hz+0x98>
   2a20c:	009a      	lsls	r2, r3, #2
   2a20e:	4b23      	ldr	r3, [pc, #140]	; (2a29c <system_clock_source_get_hz+0xa4>)
   2a210:	18d3      	adds	r3, r2, r3
   2a212:	681b      	ldr	r3, [r3, #0]
   2a214:	469f      	mov	pc, r3
   2a216:	4b22      	ldr	r3, [pc, #136]	; (2a2a0 <system_clock_source_get_hz+0xa8>)
   2a218:	691b      	ldr	r3, [r3, #16]
   2a21a:	e03a      	b.n	2a292 <system_clock_source_get_hz+0x9a>
   2a21c:	4b21      	ldr	r3, [pc, #132]	; (2a2a4 <system_clock_source_get_hz+0xac>)
   2a21e:	6a1b      	ldr	r3, [r3, #32]
   2a220:	059b      	lsls	r3, r3, #22
   2a222:	0f9b      	lsrs	r3, r3, #30
   2a224:	b2db      	uxtb	r3, r3
   2a226:	001a      	movs	r2, r3
   2a228:	4b1f      	ldr	r3, [pc, #124]	; (2a2a8 <system_clock_source_get_hz+0xb0>)
   2a22a:	40d3      	lsrs	r3, r2
   2a22c:	e031      	b.n	2a292 <system_clock_source_get_hz+0x9a>
   2a22e:	2380      	movs	r3, #128	; 0x80
   2a230:	021b      	lsls	r3, r3, #8
   2a232:	e02e      	b.n	2a292 <system_clock_source_get_hz+0x9a>
   2a234:	2380      	movs	r3, #128	; 0x80
   2a236:	021b      	lsls	r3, r3, #8
   2a238:	e02b      	b.n	2a292 <system_clock_source_get_hz+0x9a>
   2a23a:	4b19      	ldr	r3, [pc, #100]	; (2a2a0 <system_clock_source_get_hz+0xa8>)
   2a23c:	695b      	ldr	r3, [r3, #20]
   2a23e:	e028      	b.n	2a292 <system_clock_source_get_hz+0x9a>
   2a240:	4b17      	ldr	r3, [pc, #92]	; (2a2a0 <system_clock_source_get_hz+0xa8>)
   2a242:	681b      	ldr	r3, [r3, #0]
   2a244:	2202      	movs	r2, #2
   2a246:	4013      	ands	r3, r2
   2a248:	d101      	bne.n	2a24e <system_clock_source_get_hz+0x56>
   2a24a:	2300      	movs	r3, #0
   2a24c:	e021      	b.n	2a292 <system_clock_source_get_hz+0x9a>
   2a24e:	4b17      	ldr	r3, [pc, #92]	; (2a2ac <system_clock_source_get_hz+0xb4>)
   2a250:	4798      	blx	r3
   2a252:	4b13      	ldr	r3, [pc, #76]	; (2a2a0 <system_clock_source_get_hz+0xa8>)
   2a254:	681b      	ldr	r3, [r3, #0]
   2a256:	2224      	movs	r2, #36	; 0x24
   2a258:	4013      	ands	r3, r2
   2a25a:	2b04      	cmp	r3, #4
   2a25c:	d109      	bne.n	2a272 <system_clock_source_get_hz+0x7a>
   2a25e:	2000      	movs	r0, #0
   2a260:	4b13      	ldr	r3, [pc, #76]	; (2a2b0 <system_clock_source_get_hz+0xb8>)
   2a262:	4798      	blx	r3
   2a264:	0002      	movs	r2, r0
   2a266:	4b0e      	ldr	r3, [pc, #56]	; (2a2a0 <system_clock_source_get_hz+0xa8>)
   2a268:	689b      	ldr	r3, [r3, #8]
   2a26a:	041b      	lsls	r3, r3, #16
   2a26c:	0c1b      	lsrs	r3, r3, #16
   2a26e:	4353      	muls	r3, r2
   2a270:	e00f      	b.n	2a292 <system_clock_source_get_hz+0x9a>
   2a272:	4b10      	ldr	r3, [pc, #64]	; (2a2b4 <system_clock_source_get_hz+0xbc>)
   2a274:	e00d      	b.n	2a292 <system_clock_source_get_hz+0x9a>
   2a276:	4a0b      	ldr	r2, [pc, #44]	; (2a2a4 <system_clock_source_get_hz+0xac>)
   2a278:	2350      	movs	r3, #80	; 0x50
   2a27a:	5cd3      	ldrb	r3, [r2, r3]
   2a27c:	b2db      	uxtb	r3, r3
   2a27e:	001a      	movs	r2, r3
   2a280:	2304      	movs	r3, #4
   2a282:	4013      	ands	r3, r2
   2a284:	d101      	bne.n	2a28a <system_clock_source_get_hz+0x92>
   2a286:	2300      	movs	r3, #0
   2a288:	e003      	b.n	2a292 <system_clock_source_get_hz+0x9a>
   2a28a:	4b05      	ldr	r3, [pc, #20]	; (2a2a0 <system_clock_source_get_hz+0xa8>)
   2a28c:	68db      	ldr	r3, [r3, #12]
   2a28e:	e000      	b.n	2a292 <system_clock_source_get_hz+0x9a>
   2a290:	2300      	movs	r3, #0
   2a292:	0018      	movs	r0, r3
   2a294:	46bd      	mov	sp, r7
   2a296:	b002      	add	sp, #8
   2a298:	bd80      	pop	{r7, pc}
   2a29a:	46c0      	nop			; (mov r8, r8)
   2a29c:	0003a274 	.word	0x0003a274
   2a2a0:	20003f18 	.word	0x20003f18
   2a2a4:	40000800 	.word	0x40000800
   2a2a8:	007a1200 	.word	0x007a1200
   2a2ac:	0002a199 	.word	0x0002a199
   2a2b0:	0002ac95 	.word	0x0002ac95
   2a2b4:	02dc6c00 	.word	0x02dc6c00

0002a2b8 <system_clock_source_osc8m_set_config>:
   2a2b8:	b580      	push	{r7, lr}
   2a2ba:	b084      	sub	sp, #16
   2a2bc:	af00      	add	r7, sp, #0
   2a2be:	6078      	str	r0, [r7, #4]
   2a2c0:	4b1a      	ldr	r3, [pc, #104]	; (2a32c <system_clock_source_osc8m_set_config+0x74>)
   2a2c2:	6a1b      	ldr	r3, [r3, #32]
   2a2c4:	60fb      	str	r3, [r7, #12]
   2a2c6:	687b      	ldr	r3, [r7, #4]
   2a2c8:	781b      	ldrb	r3, [r3, #0]
   2a2ca:	1c1a      	adds	r2, r3, #0
   2a2cc:	2303      	movs	r3, #3
   2a2ce:	4013      	ands	r3, r2
   2a2d0:	b2da      	uxtb	r2, r3
   2a2d2:	230d      	movs	r3, #13
   2a2d4:	18fb      	adds	r3, r7, r3
   2a2d6:	2103      	movs	r1, #3
   2a2d8:	400a      	ands	r2, r1
   2a2da:	0010      	movs	r0, r2
   2a2dc:	781a      	ldrb	r2, [r3, #0]
   2a2de:	2103      	movs	r1, #3
   2a2e0:	438a      	bics	r2, r1
   2a2e2:	1c11      	adds	r1, r2, #0
   2a2e4:	1c02      	adds	r2, r0, #0
   2a2e6:	430a      	orrs	r2, r1
   2a2e8:	701a      	strb	r2, [r3, #0]
   2a2ea:	687b      	ldr	r3, [r7, #4]
   2a2ec:	789a      	ldrb	r2, [r3, #2]
   2a2ee:	230c      	movs	r3, #12
   2a2f0:	18fb      	adds	r3, r7, r3
   2a2f2:	01d0      	lsls	r0, r2, #7
   2a2f4:	781a      	ldrb	r2, [r3, #0]
   2a2f6:	217f      	movs	r1, #127	; 0x7f
   2a2f8:	400a      	ands	r2, r1
   2a2fa:	1c11      	adds	r1, r2, #0
   2a2fc:	1c02      	adds	r2, r0, #0
   2a2fe:	430a      	orrs	r2, r1
   2a300:	701a      	strb	r2, [r3, #0]
   2a302:	687b      	ldr	r3, [r7, #4]
   2a304:	785a      	ldrb	r2, [r3, #1]
   2a306:	230c      	movs	r3, #12
   2a308:	18fb      	adds	r3, r7, r3
   2a30a:	2101      	movs	r1, #1
   2a30c:	400a      	ands	r2, r1
   2a30e:	0190      	lsls	r0, r2, #6
   2a310:	781a      	ldrb	r2, [r3, #0]
   2a312:	2140      	movs	r1, #64	; 0x40
   2a314:	438a      	bics	r2, r1
   2a316:	1c11      	adds	r1, r2, #0
   2a318:	1c02      	adds	r2, r0, #0
   2a31a:	430a      	orrs	r2, r1
   2a31c:	701a      	strb	r2, [r3, #0]
   2a31e:	4b03      	ldr	r3, [pc, #12]	; (2a32c <system_clock_source_osc8m_set_config+0x74>)
   2a320:	68fa      	ldr	r2, [r7, #12]
   2a322:	621a      	str	r2, [r3, #32]
   2a324:	46c0      	nop			; (mov r8, r8)
   2a326:	46bd      	mov	sp, r7
   2a328:	b004      	add	sp, #16
   2a32a:	bd80      	pop	{r7, pc}
   2a32c:	40000800 	.word	0x40000800

0002a330 <system_clock_source_dpll_set_config>:
   2a330:	b580      	push	{r7, lr}
   2a332:	b086      	sub	sp, #24
   2a334:	af00      	add	r7, sp, #0
   2a336:	6078      	str	r0, [r7, #4]
   2a338:	687b      	ldr	r3, [r7, #4]
   2a33a:	68db      	ldr	r3, [r3, #12]
   2a33c:	617b      	str	r3, [r7, #20]
   2a33e:	687b      	ldr	r3, [r7, #4]
   2a340:	7d1b      	ldrb	r3, [r3, #20]
   2a342:	2b01      	cmp	r3, #1
   2a344:	d10a      	bne.n	2a35c <system_clock_source_dpll_set_config+0x2c>
   2a346:	687b      	ldr	r3, [r7, #4]
   2a348:	8a1b      	ldrh	r3, [r3, #16]
   2a34a:	3301      	adds	r3, #1
   2a34c:	005b      	lsls	r3, r3, #1
   2a34e:	001a      	movs	r2, r3
   2a350:	4b36      	ldr	r3, [pc, #216]	; (2a42c <system_clock_source_dpll_set_config+0xfc>)
   2a352:	0011      	movs	r1, r2
   2a354:	6978      	ldr	r0, [r7, #20]
   2a356:	4798      	blx	r3
   2a358:	0003      	movs	r3, r0
   2a35a:	617b      	str	r3, [r7, #20]
   2a35c:	687b      	ldr	r3, [r7, #4]
   2a35e:	689b      	ldr	r3, [r3, #8]
   2a360:	011a      	lsls	r2, r3, #4
   2a362:	4b32      	ldr	r3, [pc, #200]	; (2a42c <system_clock_source_dpll_set_config+0xfc>)
   2a364:	6979      	ldr	r1, [r7, #20]
   2a366:	0010      	movs	r0, r2
   2a368:	4798      	blx	r3
   2a36a:	0003      	movs	r3, r0
   2a36c:	613b      	str	r3, [r7, #16]
   2a36e:	693b      	ldr	r3, [r7, #16]
   2a370:	b2da      	uxtb	r2, r3
   2a372:	230f      	movs	r3, #15
   2a374:	18fb      	adds	r3, r7, r3
   2a376:	210f      	movs	r1, #15
   2a378:	400a      	ands	r2, r1
   2a37a:	701a      	strb	r2, [r3, #0]
   2a37c:	693b      	ldr	r3, [r7, #16]
   2a37e:	091b      	lsrs	r3, r3, #4
   2a380:	3b01      	subs	r3, #1
   2a382:	613b      	str	r3, [r7, #16]
   2a384:	492a      	ldr	r1, [pc, #168]	; (2a430 <system_clock_source_dpll_set_config+0x100>)
   2a386:	687b      	ldr	r3, [r7, #4]
   2a388:	781b      	ldrb	r3, [r3, #0]
   2a38a:	01db      	lsls	r3, r3, #7
   2a38c:	b2da      	uxtb	r2, r3
   2a38e:	687b      	ldr	r3, [r7, #4]
   2a390:	785b      	ldrb	r3, [r3, #1]
   2a392:	019b      	lsls	r3, r3, #6
   2a394:	b2db      	uxtb	r3, r3
   2a396:	4313      	orrs	r3, r2
   2a398:	b2da      	uxtb	r2, r3
   2a39a:	2344      	movs	r3, #68	; 0x44
   2a39c:	54ca      	strb	r2, [r1, r3]
   2a39e:	4b24      	ldr	r3, [pc, #144]	; (2a430 <system_clock_source_dpll_set_config+0x100>)
   2a3a0:	220f      	movs	r2, #15
   2a3a2:	18ba      	adds	r2, r7, r2
   2a3a4:	7812      	ldrb	r2, [r2, #0]
   2a3a6:	0412      	lsls	r2, r2, #16
   2a3a8:	0011      	movs	r1, r2
   2a3aa:	22f0      	movs	r2, #240	; 0xf0
   2a3ac:	0312      	lsls	r2, r2, #12
   2a3ae:	4011      	ands	r1, r2
   2a3b0:	693a      	ldr	r2, [r7, #16]
   2a3b2:	0512      	lsls	r2, r2, #20
   2a3b4:	0d12      	lsrs	r2, r2, #20
   2a3b6:	430a      	orrs	r2, r1
   2a3b8:	649a      	str	r2, [r3, #72]	; 0x48
   2a3ba:	4b1d      	ldr	r3, [pc, #116]	; (2a430 <system_clock_source_dpll_set_config+0x100>)
   2a3bc:	687a      	ldr	r2, [r7, #4]
   2a3be:	8a12      	ldrh	r2, [r2, #16]
   2a3c0:	0412      	lsls	r2, r2, #16
   2a3c2:	0011      	movs	r1, r2
   2a3c4:	4a1b      	ldr	r2, [pc, #108]	; (2a434 <system_clock_source_dpll_set_config+0x104>)
   2a3c6:	4011      	ands	r1, r2
   2a3c8:	687a      	ldr	r2, [r7, #4]
   2a3ca:	7892      	ldrb	r2, [r2, #2]
   2a3cc:	0312      	lsls	r2, r2, #12
   2a3ce:	4311      	orrs	r1, r2
   2a3d0:	687a      	ldr	r2, [r7, #4]
   2a3d2:	7cd2      	ldrb	r2, [r2, #19]
   2a3d4:	0212      	lsls	r2, r2, #8
   2a3d6:	0010      	movs	r0, r2
   2a3d8:	22e0      	movs	r2, #224	; 0xe0
   2a3da:	00d2      	lsls	r2, r2, #3
   2a3dc:	4002      	ands	r2, r0
   2a3de:	4311      	orrs	r1, r2
   2a3e0:	687a      	ldr	r2, [r7, #4]
   2a3e2:	7d12      	ldrb	r2, [r2, #20]
   2a3e4:	0112      	lsls	r2, r2, #4
   2a3e6:	0010      	movs	r0, r2
   2a3e8:	2230      	movs	r2, #48	; 0x30
   2a3ea:	4002      	ands	r2, r0
   2a3ec:	4311      	orrs	r1, r2
   2a3ee:	687a      	ldr	r2, [r7, #4]
   2a3f0:	78d2      	ldrb	r2, [r2, #3]
   2a3f2:	00d2      	lsls	r2, r2, #3
   2a3f4:	4311      	orrs	r1, r2
   2a3f6:	687a      	ldr	r2, [r7, #4]
   2a3f8:	7912      	ldrb	r2, [r2, #4]
   2a3fa:	0092      	lsls	r2, r2, #2
   2a3fc:	4311      	orrs	r1, r2
   2a3fe:	687a      	ldr	r2, [r7, #4]
   2a400:	7c92      	ldrb	r2, [r2, #18]
   2a402:	0010      	movs	r0, r2
   2a404:	2203      	movs	r2, #3
   2a406:	4002      	ands	r2, r0
   2a408:	430a      	orrs	r2, r1
   2a40a:	64da      	str	r2, [r3, #76]	; 0x4c
   2a40c:	693b      	ldr	r3, [r7, #16]
   2a40e:	3301      	adds	r3, #1
   2a410:	011a      	lsls	r2, r3, #4
   2a412:	230f      	movs	r3, #15
   2a414:	18fb      	adds	r3, r7, r3
   2a416:	781b      	ldrb	r3, [r3, #0]
   2a418:	18d3      	adds	r3, r2, r3
   2a41a:	697a      	ldr	r2, [r7, #20]
   2a41c:	4353      	muls	r3, r2
   2a41e:	091a      	lsrs	r2, r3, #4
   2a420:	4b05      	ldr	r3, [pc, #20]	; (2a438 <system_clock_source_dpll_set_config+0x108>)
   2a422:	60da      	str	r2, [r3, #12]
   2a424:	46c0      	nop			; (mov r8, r8)
   2a426:	46bd      	mov	sp, r7
   2a428:	b006      	add	sp, #24
   2a42a:	bd80      	pop	{r7, pc}
   2a42c:	0003372d 	.word	0x0003372d
   2a430:	40000800 	.word	0x40000800
   2a434:	07ff0000 	.word	0x07ff0000
   2a438:	20003f18 	.word	0x20003f18

0002a43c <system_clock_source_enable>:
   2a43c:	b580      	push	{r7, lr}
   2a43e:	b082      	sub	sp, #8
   2a440:	af00      	add	r7, sp, #0
   2a442:	0002      	movs	r2, r0
   2a444:	1dfb      	adds	r3, r7, #7
   2a446:	701a      	strb	r2, [r3, #0]
   2a448:	1dfb      	adds	r3, r7, #7
   2a44a:	781b      	ldrb	r3, [r3, #0]
   2a44c:	2b08      	cmp	r3, #8
   2a44e:	d83b      	bhi.n	2a4c8 <system_clock_source_enable+0x8c>
   2a450:	009a      	lsls	r2, r3, #2
   2a452:	4b21      	ldr	r3, [pc, #132]	; (2a4d8 <system_clock_source_enable+0x9c>)
   2a454:	18d3      	adds	r3, r2, r3
   2a456:	681b      	ldr	r3, [r3, #0]
   2a458:	469f      	mov	pc, r3
   2a45a:	4b20      	ldr	r3, [pc, #128]	; (2a4dc <system_clock_source_enable+0xa0>)
   2a45c:	4a1f      	ldr	r2, [pc, #124]	; (2a4dc <system_clock_source_enable+0xa0>)
   2a45e:	6a12      	ldr	r2, [r2, #32]
   2a460:	2102      	movs	r1, #2
   2a462:	430a      	orrs	r2, r1
   2a464:	621a      	str	r2, [r3, #32]
   2a466:	2300      	movs	r3, #0
   2a468:	e031      	b.n	2a4ce <system_clock_source_enable+0x92>
   2a46a:	4b1c      	ldr	r3, [pc, #112]	; (2a4dc <system_clock_source_enable+0xa0>)
   2a46c:	4a1b      	ldr	r2, [pc, #108]	; (2a4dc <system_clock_source_enable+0xa0>)
   2a46e:	6992      	ldr	r2, [r2, #24]
   2a470:	2102      	movs	r1, #2
   2a472:	430a      	orrs	r2, r1
   2a474:	619a      	str	r2, [r3, #24]
   2a476:	e029      	b.n	2a4cc <system_clock_source_enable+0x90>
   2a478:	4a18      	ldr	r2, [pc, #96]	; (2a4dc <system_clock_source_enable+0xa0>)
   2a47a:	4b18      	ldr	r3, [pc, #96]	; (2a4dc <system_clock_source_enable+0xa0>)
   2a47c:	8a1b      	ldrh	r3, [r3, #16]
   2a47e:	b29b      	uxth	r3, r3
   2a480:	2102      	movs	r1, #2
   2a482:	430b      	orrs	r3, r1
   2a484:	b29b      	uxth	r3, r3
   2a486:	8213      	strh	r3, [r2, #16]
   2a488:	e020      	b.n	2a4cc <system_clock_source_enable+0x90>
   2a48a:	4a14      	ldr	r2, [pc, #80]	; (2a4dc <system_clock_source_enable+0xa0>)
   2a48c:	4b13      	ldr	r3, [pc, #76]	; (2a4dc <system_clock_source_enable+0xa0>)
   2a48e:	8a9b      	ldrh	r3, [r3, #20]
   2a490:	b29b      	uxth	r3, r3
   2a492:	2102      	movs	r1, #2
   2a494:	430b      	orrs	r3, r1
   2a496:	b29b      	uxth	r3, r3
   2a498:	8293      	strh	r3, [r2, #20]
   2a49a:	e017      	b.n	2a4cc <system_clock_source_enable+0x90>
   2a49c:	4b10      	ldr	r3, [pc, #64]	; (2a4e0 <system_clock_source_enable+0xa4>)
   2a49e:	681b      	ldr	r3, [r3, #0]
   2a4a0:	2202      	movs	r2, #2
   2a4a2:	431a      	orrs	r2, r3
   2a4a4:	4b0e      	ldr	r3, [pc, #56]	; (2a4e0 <system_clock_source_enable+0xa4>)
   2a4a6:	601a      	str	r2, [r3, #0]
   2a4a8:	4b0e      	ldr	r3, [pc, #56]	; (2a4e4 <system_clock_source_enable+0xa8>)
   2a4aa:	4798      	blx	r3
   2a4ac:	e00e      	b.n	2a4cc <system_clock_source_enable+0x90>
   2a4ae:	4a0b      	ldr	r2, [pc, #44]	; (2a4dc <system_clock_source_enable+0xa0>)
   2a4b0:	490a      	ldr	r1, [pc, #40]	; (2a4dc <system_clock_source_enable+0xa0>)
   2a4b2:	2344      	movs	r3, #68	; 0x44
   2a4b4:	5ccb      	ldrb	r3, [r1, r3]
   2a4b6:	b2db      	uxtb	r3, r3
   2a4b8:	2102      	movs	r1, #2
   2a4ba:	430b      	orrs	r3, r1
   2a4bc:	b2d9      	uxtb	r1, r3
   2a4be:	2344      	movs	r3, #68	; 0x44
   2a4c0:	54d1      	strb	r1, [r2, r3]
   2a4c2:	e003      	b.n	2a4cc <system_clock_source_enable+0x90>
   2a4c4:	2300      	movs	r3, #0
   2a4c6:	e002      	b.n	2a4ce <system_clock_source_enable+0x92>
   2a4c8:	2317      	movs	r3, #23
   2a4ca:	e000      	b.n	2a4ce <system_clock_source_enable+0x92>
   2a4cc:	2300      	movs	r3, #0
   2a4ce:	0018      	movs	r0, r3
   2a4d0:	46bd      	mov	sp, r7
   2a4d2:	b002      	add	sp, #8
   2a4d4:	bd80      	pop	{r7, pc}
   2a4d6:	46c0      	nop			; (mov r8, r8)
   2a4d8:	0003a298 	.word	0x0003a298
   2a4dc:	40000800 	.word	0x40000800
   2a4e0:	20003f18 	.word	0x20003f18
   2a4e4:	0002a1b5 	.word	0x0002a1b5

0002a4e8 <system_clock_source_is_ready>:
   2a4e8:	b580      	push	{r7, lr}
   2a4ea:	b084      	sub	sp, #16
   2a4ec:	af00      	add	r7, sp, #0
   2a4ee:	0002      	movs	r2, r0
   2a4f0:	1dfb      	adds	r3, r7, #7
   2a4f2:	701a      	strb	r2, [r3, #0]
   2a4f4:	2300      	movs	r3, #0
   2a4f6:	60fb      	str	r3, [r7, #12]
   2a4f8:	1dfb      	adds	r3, r7, #7
   2a4fa:	781b      	ldrb	r3, [r3, #0]
   2a4fc:	2b08      	cmp	r3, #8
   2a4fe:	d821      	bhi.n	2a544 <system_clock_source_is_ready+0x5c>
   2a500:	009a      	lsls	r2, r3, #2
   2a502:	4b18      	ldr	r3, [pc, #96]	; (2a564 <system_clock_source_is_ready+0x7c>)
   2a504:	18d3      	adds	r3, r2, r3
   2a506:	681b      	ldr	r3, [r3, #0]
   2a508:	469f      	mov	pc, r3
   2a50a:	2308      	movs	r3, #8
   2a50c:	60fb      	str	r3, [r7, #12]
   2a50e:	e01b      	b.n	2a548 <system_clock_source_is_ready+0x60>
   2a510:	2304      	movs	r3, #4
   2a512:	60fb      	str	r3, [r7, #12]
   2a514:	e018      	b.n	2a548 <system_clock_source_is_ready+0x60>
   2a516:	2301      	movs	r3, #1
   2a518:	60fb      	str	r3, [r7, #12]
   2a51a:	e015      	b.n	2a548 <system_clock_source_is_ready+0x60>
   2a51c:	2302      	movs	r3, #2
   2a51e:	60fb      	str	r3, [r7, #12]
   2a520:	e012      	b.n	2a548 <system_clock_source_is_ready+0x60>
   2a522:	2310      	movs	r3, #16
   2a524:	60fb      	str	r3, [r7, #12]
   2a526:	e00f      	b.n	2a548 <system_clock_source_is_ready+0x60>
   2a528:	4a0f      	ldr	r2, [pc, #60]	; (2a568 <system_clock_source_is_ready+0x80>)
   2a52a:	2350      	movs	r3, #80	; 0x50
   2a52c:	5cd3      	ldrb	r3, [r2, r3]
   2a52e:	b2db      	uxtb	r3, r3
   2a530:	001a      	movs	r2, r3
   2a532:	2303      	movs	r3, #3
   2a534:	4013      	ands	r3, r2
   2a536:	3b03      	subs	r3, #3
   2a538:	425a      	negs	r2, r3
   2a53a:	4153      	adcs	r3, r2
   2a53c:	b2db      	uxtb	r3, r3
   2a53e:	e00c      	b.n	2a55a <system_clock_source_is_ready+0x72>
   2a540:	2301      	movs	r3, #1
   2a542:	e00a      	b.n	2a55a <system_clock_source_is_ready+0x72>
   2a544:	2300      	movs	r3, #0
   2a546:	e008      	b.n	2a55a <system_clock_source_is_ready+0x72>
   2a548:	4b07      	ldr	r3, [pc, #28]	; (2a568 <system_clock_source_is_ready+0x80>)
   2a54a:	68db      	ldr	r3, [r3, #12]
   2a54c:	68fa      	ldr	r2, [r7, #12]
   2a54e:	401a      	ands	r2, r3
   2a550:	68fb      	ldr	r3, [r7, #12]
   2a552:	1ad3      	subs	r3, r2, r3
   2a554:	425a      	negs	r2, r3
   2a556:	4153      	adcs	r3, r2
   2a558:	b2db      	uxtb	r3, r3
   2a55a:	0018      	movs	r0, r3
   2a55c:	46bd      	mov	sp, r7
   2a55e:	b004      	add	sp, #16
   2a560:	bd80      	pop	{r7, pc}
   2a562:	46c0      	nop			; (mov r8, r8)
   2a564:	0003a2bc 	.word	0x0003a2bc
   2a568:	40000800 	.word	0x40000800

0002a56c <_switch_peripheral_gclk>:
   2a56c:	b580      	push	{r7, lr}
   2a56e:	b082      	sub	sp, #8
   2a570:	af00      	add	r7, sp, #0
   2a572:	003b      	movs	r3, r7
   2a574:	2203      	movs	r2, #3
   2a576:	701a      	strb	r2, [r3, #0]
   2a578:	2300      	movs	r3, #0
   2a57a:	607b      	str	r3, [r7, #4]
   2a57c:	e009      	b.n	2a592 <_switch_peripheral_gclk+0x26>
   2a57e:	687b      	ldr	r3, [r7, #4]
   2a580:	b2db      	uxtb	r3, r3
   2a582:	003a      	movs	r2, r7
   2a584:	0011      	movs	r1, r2
   2a586:	0018      	movs	r0, r3
   2a588:	4b05      	ldr	r3, [pc, #20]	; (2a5a0 <_switch_peripheral_gclk+0x34>)
   2a58a:	4798      	blx	r3
   2a58c:	687b      	ldr	r3, [r7, #4]
   2a58e:	3301      	adds	r3, #1
   2a590:	607b      	str	r3, [r7, #4]
   2a592:	687b      	ldr	r3, [r7, #4]
   2a594:	2b24      	cmp	r3, #36	; 0x24
   2a596:	d9f2      	bls.n	2a57e <_switch_peripheral_gclk+0x12>
   2a598:	46c0      	nop			; (mov r8, r8)
   2a59a:	46bd      	mov	sp, r7
   2a59c:	b002      	add	sp, #8
   2a59e:	bd80      	pop	{r7, pc}
   2a5a0:	0002ab71 	.word	0x0002ab71

0002a5a4 <system_clock_init>:
   2a5a4:	b580      	push	{r7, lr}
   2a5a6:	b0a6      	sub	sp, #152	; 0x98
   2a5a8:	af00      	add	r7, sp, #0
   2a5aa:	4b92      	ldr	r3, [pc, #584]	; (2a7f4 <system_clock_init+0x250>)
   2a5ac:	22c2      	movs	r2, #194	; 0xc2
   2a5ae:	00d2      	lsls	r2, r2, #3
   2a5b0:	609a      	str	r2, [r3, #8]
   2a5b2:	2003      	movs	r0, #3
   2a5b4:	4b90      	ldr	r3, [pc, #576]	; (2a7f8 <system_clock_init+0x254>)
   2a5b6:	4798      	blx	r3
   2a5b8:	4b90      	ldr	r3, [pc, #576]	; (2a7fc <system_clock_init+0x258>)
   2a5ba:	4798      	blx	r3
   2a5bc:	2394      	movs	r3, #148	; 0x94
   2a5be:	18fb      	adds	r3, r7, r3
   2a5c0:	0018      	movs	r0, r3
   2a5c2:	4b8f      	ldr	r3, [pc, #572]	; (2a800 <system_clock_init+0x25c>)
   2a5c4:	4798      	blx	r3
   2a5c6:	2394      	movs	r3, #148	; 0x94
   2a5c8:	18fb      	adds	r3, r7, r3
   2a5ca:	2200      	movs	r2, #0
   2a5cc:	701a      	strb	r2, [r3, #0]
   2a5ce:	2394      	movs	r3, #148	; 0x94
   2a5d0:	18fb      	adds	r3, r7, r3
   2a5d2:	2201      	movs	r2, #1
   2a5d4:	709a      	strb	r2, [r3, #2]
   2a5d6:	2394      	movs	r3, #148	; 0x94
   2a5d8:	18fb      	adds	r3, r7, r3
   2a5da:	2200      	movs	r2, #0
   2a5dc:	705a      	strb	r2, [r3, #1]
   2a5de:	2394      	movs	r3, #148	; 0x94
   2a5e0:	18fb      	adds	r3, r7, r3
   2a5e2:	0018      	movs	r0, r3
   2a5e4:	4b87      	ldr	r3, [pc, #540]	; (2a804 <system_clock_init+0x260>)
   2a5e6:	4798      	blx	r3
   2a5e8:	2006      	movs	r0, #6
   2a5ea:	4b87      	ldr	r3, [pc, #540]	; (2a808 <system_clock_init+0x264>)
   2a5ec:	4798      	blx	r3
   2a5ee:	4b87      	ldr	r3, [pc, #540]	; (2a80c <system_clock_init+0x268>)
   2a5f0:	4798      	blx	r3
   2a5f2:	2360      	movs	r3, #96	; 0x60
   2a5f4:	18fb      	adds	r3, r7, r3
   2a5f6:	0018      	movs	r0, r3
   2a5f8:	4b85      	ldr	r3, [pc, #532]	; (2a810 <system_clock_init+0x26c>)
   2a5fa:	4798      	blx	r3
   2a5fc:	2360      	movs	r3, #96	; 0x60
   2a5fe:	18fb      	adds	r3, r7, r3
   2a600:	2206      	movs	r2, #6
   2a602:	701a      	strb	r2, [r3, #0]
   2a604:	2360      	movs	r3, #96	; 0x60
   2a606:	18fb      	adds	r3, r7, r3
   2a608:	2208      	movs	r2, #8
   2a60a:	605a      	str	r2, [r3, #4]
   2a60c:	2360      	movs	r3, #96	; 0x60
   2a60e:	18fb      	adds	r3, r7, r3
   2a610:	2200      	movs	r2, #0
   2a612:	721a      	strb	r2, [r3, #8]
   2a614:	2360      	movs	r3, #96	; 0x60
   2a616:	18fb      	adds	r3, r7, r3
   2a618:	2200      	movs	r2, #0
   2a61a:	725a      	strb	r2, [r3, #9]
   2a61c:	2360      	movs	r3, #96	; 0x60
   2a61e:	18fb      	adds	r3, r7, r3
   2a620:	0019      	movs	r1, r3
   2a622:	2001      	movs	r0, #1
   2a624:	4b7b      	ldr	r3, [pc, #492]	; (2a814 <system_clock_init+0x270>)
   2a626:	4798      	blx	r3
   2a628:	2001      	movs	r0, #1
   2a62a:	4b7b      	ldr	r3, [pc, #492]	; (2a818 <system_clock_init+0x274>)
   2a62c:	4798      	blx	r3
   2a62e:	2354      	movs	r3, #84	; 0x54
   2a630:	18fb      	adds	r3, r7, r3
   2a632:	0018      	movs	r0, r3
   2a634:	4b76      	ldr	r3, [pc, #472]	; (2a810 <system_clock_init+0x26c>)
   2a636:	4798      	blx	r3
   2a638:	2354      	movs	r3, #84	; 0x54
   2a63a:	18fb      	adds	r3, r7, r3
   2a63c:	2203      	movs	r2, #3
   2a63e:	701a      	strb	r2, [r3, #0]
   2a640:	2354      	movs	r3, #84	; 0x54
   2a642:	18fb      	adds	r3, r7, r3
   2a644:	2201      	movs	r2, #1
   2a646:	605a      	str	r2, [r3, #4]
   2a648:	2354      	movs	r3, #84	; 0x54
   2a64a:	18fb      	adds	r3, r7, r3
   2a64c:	2201      	movs	r2, #1
   2a64e:	721a      	strb	r2, [r3, #8]
   2a650:	2354      	movs	r3, #84	; 0x54
   2a652:	18fb      	adds	r3, r7, r3
   2a654:	2200      	movs	r2, #0
   2a656:	725a      	strb	r2, [r3, #9]
   2a658:	2354      	movs	r3, #84	; 0x54
   2a65a:	18fb      	adds	r3, r7, r3
   2a65c:	0019      	movs	r1, r3
   2a65e:	2002      	movs	r0, #2
   2a660:	4b6c      	ldr	r3, [pc, #432]	; (2a814 <system_clock_init+0x270>)
   2a662:	4798      	blx	r3
   2a664:	2002      	movs	r0, #2
   2a666:	4b6c      	ldr	r3, [pc, #432]	; (2a818 <system_clock_init+0x274>)
   2a668:	4798      	blx	r3
   2a66a:	233c      	movs	r3, #60	; 0x3c
   2a66c:	18fb      	adds	r3, r7, r3
   2a66e:	0018      	movs	r0, r3
   2a670:	4b67      	ldr	r3, [pc, #412]	; (2a810 <system_clock_init+0x26c>)
   2a672:	4798      	blx	r3
   2a674:	233c      	movs	r3, #60	; 0x3c
   2a676:	18fb      	adds	r3, r7, r3
   2a678:	2203      	movs	r2, #3
   2a67a:	701a      	strb	r2, [r3, #0]
   2a67c:	233c      	movs	r3, #60	; 0x3c
   2a67e:	18fb      	adds	r3, r7, r3
   2a680:	2220      	movs	r2, #32
   2a682:	605a      	str	r2, [r3, #4]
   2a684:	233c      	movs	r3, #60	; 0x3c
   2a686:	18fb      	adds	r3, r7, r3
   2a688:	2200      	movs	r2, #0
   2a68a:	721a      	strb	r2, [r3, #8]
   2a68c:	233c      	movs	r3, #60	; 0x3c
   2a68e:	18fb      	adds	r3, r7, r3
   2a690:	2200      	movs	r2, #0
   2a692:	725a      	strb	r2, [r3, #9]
   2a694:	233c      	movs	r3, #60	; 0x3c
   2a696:	18fb      	adds	r3, r7, r3
   2a698:	0019      	movs	r1, r3
   2a69a:	2004      	movs	r0, #4
   2a69c:	4b5d      	ldr	r3, [pc, #372]	; (2a814 <system_clock_init+0x270>)
   2a69e:	4798      	blx	r3
   2a6a0:	2004      	movs	r0, #4
   2a6a2:	4b5d      	ldr	r3, [pc, #372]	; (2a818 <system_clock_init+0x274>)
   2a6a4:	4798      	blx	r3
   2a6a6:	2330      	movs	r3, #48	; 0x30
   2a6a8:	18fb      	adds	r3, r7, r3
   2a6aa:	0018      	movs	r0, r3
   2a6ac:	4b58      	ldr	r3, [pc, #352]	; (2a810 <system_clock_init+0x26c>)
   2a6ae:	4798      	blx	r3
   2a6b0:	2330      	movs	r3, #48	; 0x30
   2a6b2:	18fb      	adds	r3, r7, r3
   2a6b4:	2206      	movs	r2, #6
   2a6b6:	701a      	strb	r2, [r3, #0]
   2a6b8:	2330      	movs	r3, #48	; 0x30
   2a6ba:	18fb      	adds	r3, r7, r3
   2a6bc:	2201      	movs	r2, #1
   2a6be:	605a      	str	r2, [r3, #4]
   2a6c0:	2330      	movs	r3, #48	; 0x30
   2a6c2:	18fb      	adds	r3, r7, r3
   2a6c4:	2200      	movs	r2, #0
   2a6c6:	721a      	strb	r2, [r3, #8]
   2a6c8:	2330      	movs	r3, #48	; 0x30
   2a6ca:	18fb      	adds	r3, r7, r3
   2a6cc:	2200      	movs	r2, #0
   2a6ce:	725a      	strb	r2, [r3, #9]
   2a6d0:	2330      	movs	r3, #48	; 0x30
   2a6d2:	18fb      	adds	r3, r7, r3
   2a6d4:	0019      	movs	r1, r3
   2a6d6:	2005      	movs	r0, #5
   2a6d8:	4b4e      	ldr	r3, [pc, #312]	; (2a814 <system_clock_init+0x270>)
   2a6da:	4798      	blx	r3
   2a6dc:	2005      	movs	r0, #5
   2a6de:	4b4e      	ldr	r3, [pc, #312]	; (2a818 <system_clock_init+0x274>)
   2a6e0:	4798      	blx	r3
   2a6e2:	2390      	movs	r3, #144	; 0x90
   2a6e4:	18fb      	adds	r3, r7, r3
   2a6e6:	0018      	movs	r0, r3
   2a6e8:	4b4c      	ldr	r3, [pc, #304]	; (2a81c <system_clock_init+0x278>)
   2a6ea:	4798      	blx	r3
   2a6ec:	2390      	movs	r3, #144	; 0x90
   2a6ee:	18fb      	adds	r3, r7, r3
   2a6f0:	2201      	movs	r2, #1
   2a6f2:	701a      	strb	r2, [r3, #0]
   2a6f4:	2390      	movs	r3, #144	; 0x90
   2a6f6:	18fb      	adds	r3, r7, r3
   2a6f8:	0019      	movs	r1, r3
   2a6fa:	2001      	movs	r0, #1
   2a6fc:	4b48      	ldr	r3, [pc, #288]	; (2a820 <system_clock_init+0x27c>)
   2a6fe:	4798      	blx	r3
   2a700:	2001      	movs	r0, #1
   2a702:	4b48      	ldr	r3, [pc, #288]	; (2a824 <system_clock_init+0x280>)
   2a704:	4798      	blx	r3
   2a706:	2378      	movs	r3, #120	; 0x78
   2a708:	18fb      	adds	r3, r7, r3
   2a70a:	0018      	movs	r0, r3
   2a70c:	4b46      	ldr	r3, [pc, #280]	; (2a828 <system_clock_init+0x284>)
   2a70e:	4798      	blx	r3
   2a710:	2378      	movs	r3, #120	; 0x78
   2a712:	18fb      	adds	r3, r7, r3
   2a714:	2200      	movs	r2, #0
   2a716:	701a      	strb	r2, [r3, #0]
   2a718:	2378      	movs	r3, #120	; 0x78
   2a71a:	18fb      	adds	r3, r7, r3
   2a71c:	2200      	movs	r2, #0
   2a71e:	705a      	strb	r2, [r3, #1]
   2a720:	2378      	movs	r3, #120	; 0x78
   2a722:	18fb      	adds	r3, r7, r3
   2a724:	2200      	movs	r2, #0
   2a726:	709a      	strb	r2, [r3, #2]
   2a728:	2378      	movs	r3, #120	; 0x78
   2a72a:	18fb      	adds	r3, r7, r3
   2a72c:	2200      	movs	r2, #0
   2a72e:	70da      	strb	r2, [r3, #3]
   2a730:	2378      	movs	r3, #120	; 0x78
   2a732:	18fb      	adds	r3, r7, r3
   2a734:	2200      	movs	r2, #0
   2a736:	711a      	strb	r2, [r3, #4]
   2a738:	2378      	movs	r3, #120	; 0x78
   2a73a:	18fb      	adds	r3, r7, r3
   2a73c:	2200      	movs	r2, #0
   2a73e:	749a      	strb	r2, [r3, #18]
   2a740:	2378      	movs	r3, #120	; 0x78
   2a742:	18fb      	adds	r3, r7, r3
   2a744:	2200      	movs	r2, #0
   2a746:	74da      	strb	r2, [r3, #19]
   2a748:	2378      	movs	r3, #120	; 0x78
   2a74a:	18fb      	adds	r3, r7, r3
   2a74c:	2202      	movs	r2, #2
   2a74e:	751a      	strb	r2, [r3, #20]
   2a750:	2378      	movs	r3, #120	; 0x78
   2a752:	18fb      	adds	r3, r7, r3
   2a754:	4a35      	ldr	r2, [pc, #212]	; (2a82c <system_clock_init+0x288>)
   2a756:	60da      	str	r2, [r3, #12]
   2a758:	2378      	movs	r3, #120	; 0x78
   2a75a:	18fb      	adds	r3, r7, r3
   2a75c:	2201      	movs	r2, #1
   2a75e:	821a      	strh	r2, [r3, #16]
   2a760:	2378      	movs	r3, #120	; 0x78
   2a762:	18fb      	adds	r3, r7, r3
   2a764:	4a32      	ldr	r2, [pc, #200]	; (2a830 <system_clock_init+0x28c>)
   2a766:	609a      	str	r2, [r3, #8]
   2a768:	2378      	movs	r3, #120	; 0x78
   2a76a:	18fb      	adds	r3, r7, r3
   2a76c:	0018      	movs	r0, r3
   2a76e:	4b31      	ldr	r3, [pc, #196]	; (2a834 <system_clock_init+0x290>)
   2a770:	4798      	blx	r3
   2a772:	2008      	movs	r0, #8
   2a774:	4b24      	ldr	r3, [pc, #144]	; (2a808 <system_clock_init+0x264>)
   2a776:	4798      	blx	r3
   2a778:	46c0      	nop			; (mov r8, r8)
   2a77a:	2008      	movs	r0, #8
   2a77c:	4b2e      	ldr	r3, [pc, #184]	; (2a838 <system_clock_init+0x294>)
   2a77e:	4798      	blx	r3
   2a780:	0003      	movs	r3, r0
   2a782:	001a      	movs	r2, r3
   2a784:	2301      	movs	r3, #1
   2a786:	4053      	eors	r3, r2
   2a788:	b2db      	uxtb	r3, r3
   2a78a:	2b00      	cmp	r3, #0
   2a78c:	d1f5      	bne.n	2a77a <system_clock_init+0x1d6>
   2a78e:	4919      	ldr	r1, [pc, #100]	; (2a7f4 <system_clock_init+0x250>)
   2a790:	2244      	movs	r2, #68	; 0x44
   2a792:	5c8b      	ldrb	r3, [r1, r2]
   2a794:	2080      	movs	r0, #128	; 0x80
   2a796:	4240      	negs	r0, r0
   2a798:	4303      	orrs	r3, r0
   2a79a:	548b      	strb	r3, [r1, r2]
   2a79c:	2000      	movs	r0, #0
   2a79e:	4b27      	ldr	r3, [pc, #156]	; (2a83c <system_clock_init+0x298>)
   2a7a0:	4798      	blx	r3
   2a7a2:	2100      	movs	r1, #0
   2a7a4:	2000      	movs	r0, #0
   2a7a6:	4b26      	ldr	r3, [pc, #152]	; (2a840 <system_clock_init+0x29c>)
   2a7a8:	4798      	blx	r3
   2a7aa:	2100      	movs	r1, #0
   2a7ac:	2001      	movs	r0, #1
   2a7ae:	4b24      	ldr	r3, [pc, #144]	; (2a840 <system_clock_init+0x29c>)
   2a7b0:	4798      	blx	r3
   2a7b2:	2100      	movs	r1, #0
   2a7b4:	2002      	movs	r0, #2
   2a7b6:	4b22      	ldr	r3, [pc, #136]	; (2a840 <system_clock_init+0x29c>)
   2a7b8:	4798      	blx	r3
   2a7ba:	003b      	movs	r3, r7
   2a7bc:	0018      	movs	r0, r3
   2a7be:	4b14      	ldr	r3, [pc, #80]	; (2a810 <system_clock_init+0x26c>)
   2a7c0:	4798      	blx	r3
   2a7c2:	003b      	movs	r3, r7
   2a7c4:	2208      	movs	r2, #8
   2a7c6:	701a      	strb	r2, [r3, #0]
   2a7c8:	003b      	movs	r3, r7
   2a7ca:	2201      	movs	r2, #1
   2a7cc:	605a      	str	r2, [r3, #4]
   2a7ce:	003b      	movs	r3, r7
   2a7d0:	2200      	movs	r2, #0
   2a7d2:	721a      	strb	r2, [r3, #8]
   2a7d4:	003b      	movs	r3, r7
   2a7d6:	2201      	movs	r2, #1
   2a7d8:	725a      	strb	r2, [r3, #9]
   2a7da:	003b      	movs	r3, r7
   2a7dc:	0019      	movs	r1, r3
   2a7de:	2000      	movs	r0, #0
   2a7e0:	4b0c      	ldr	r3, [pc, #48]	; (2a814 <system_clock_init+0x270>)
   2a7e2:	4798      	blx	r3
   2a7e4:	2000      	movs	r0, #0
   2a7e6:	4b0c      	ldr	r3, [pc, #48]	; (2a818 <system_clock_init+0x274>)
   2a7e8:	4798      	blx	r3
   2a7ea:	46c0      	nop			; (mov r8, r8)
   2a7ec:	46bd      	mov	sp, r7
   2a7ee:	b026      	add	sp, #152	; 0x98
   2a7f0:	bd80      	pop	{r7, pc}
   2a7f2:	46c0      	nop			; (mov r8, r8)
   2a7f4:	40000800 	.word	0x40000800
   2a7f8:	0002a165 	.word	0x0002a165
   2a7fc:	0002a56d 	.word	0x0002a56d
   2a800:	0002a075 	.word	0x0002a075
   2a804:	0002a2b9 	.word	0x0002a2b9
   2a808:	0002a43d 	.word	0x0002a43d
   2a80c:	0002a8e9 	.word	0x0002a8e9
   2a810:	0002a031 	.word	0x0002a031
   2a814:	0002a919 	.word	0x0002a919
   2a818:	0002aa3d 	.word	0x0002aa3d
   2a81c:	0002a05f 	.word	0x0002a05f
   2a820:	0002ab71 	.word	0x0002ab71
   2a824:	0002abb5 	.word	0x0002abb5
   2a828:	0002a10d 	.word	0x0002a10d
   2a82c:	000f4240 	.word	0x000f4240
   2a830:	02dc6c00 	.word	0x02dc6c00
   2a834:	0002a331 	.word	0x0002a331
   2a838:	0002a4e9 	.word	0x0002a4e9
   2a83c:	0002a099 	.word	0x0002a099
   2a840:	0002a0b9 	.word	0x0002a0b9

0002a844 <system_apb_clock_set_mask>:
   2a844:	b580      	push	{r7, lr}
   2a846:	b082      	sub	sp, #8
   2a848:	af00      	add	r7, sp, #0
   2a84a:	0002      	movs	r2, r0
   2a84c:	6039      	str	r1, [r7, #0]
   2a84e:	1dfb      	adds	r3, r7, #7
   2a850:	701a      	strb	r2, [r3, #0]
   2a852:	1dfb      	adds	r3, r7, #7
   2a854:	781b      	ldrb	r3, [r3, #0]
   2a856:	2b01      	cmp	r3, #1
   2a858:	d00a      	beq.n	2a870 <system_apb_clock_set_mask+0x2c>
   2a85a:	2b02      	cmp	r3, #2
   2a85c:	d00f      	beq.n	2a87e <system_apb_clock_set_mask+0x3a>
   2a85e:	2b00      	cmp	r3, #0
   2a860:	d114      	bne.n	2a88c <system_apb_clock_set_mask+0x48>
   2a862:	4b0e      	ldr	r3, [pc, #56]	; (2a89c <system_apb_clock_set_mask+0x58>)
   2a864:	4a0d      	ldr	r2, [pc, #52]	; (2a89c <system_apb_clock_set_mask+0x58>)
   2a866:	6991      	ldr	r1, [r2, #24]
   2a868:	683a      	ldr	r2, [r7, #0]
   2a86a:	430a      	orrs	r2, r1
   2a86c:	619a      	str	r2, [r3, #24]
   2a86e:	e00f      	b.n	2a890 <system_apb_clock_set_mask+0x4c>
   2a870:	4b0a      	ldr	r3, [pc, #40]	; (2a89c <system_apb_clock_set_mask+0x58>)
   2a872:	4a0a      	ldr	r2, [pc, #40]	; (2a89c <system_apb_clock_set_mask+0x58>)
   2a874:	69d1      	ldr	r1, [r2, #28]
   2a876:	683a      	ldr	r2, [r7, #0]
   2a878:	430a      	orrs	r2, r1
   2a87a:	61da      	str	r2, [r3, #28]
   2a87c:	e008      	b.n	2a890 <system_apb_clock_set_mask+0x4c>
   2a87e:	4b07      	ldr	r3, [pc, #28]	; (2a89c <system_apb_clock_set_mask+0x58>)
   2a880:	4a06      	ldr	r2, [pc, #24]	; (2a89c <system_apb_clock_set_mask+0x58>)
   2a882:	6a11      	ldr	r1, [r2, #32]
   2a884:	683a      	ldr	r2, [r7, #0]
   2a886:	430a      	orrs	r2, r1
   2a888:	621a      	str	r2, [r3, #32]
   2a88a:	e001      	b.n	2a890 <system_apb_clock_set_mask+0x4c>
   2a88c:	2317      	movs	r3, #23
   2a88e:	e000      	b.n	2a892 <system_apb_clock_set_mask+0x4e>
   2a890:	2300      	movs	r3, #0
   2a892:	0018      	movs	r0, r3
   2a894:	46bd      	mov	sp, r7
   2a896:	b002      	add	sp, #8
   2a898:	bd80      	pop	{r7, pc}
   2a89a:	46c0      	nop			; (mov r8, r8)
   2a89c:	40000400 	.word	0x40000400

0002a8a0 <system_interrupt_enter_critical_section>:
   2a8a0:	b580      	push	{r7, lr}
   2a8a2:	af00      	add	r7, sp, #0
   2a8a4:	4b02      	ldr	r3, [pc, #8]	; (2a8b0 <system_interrupt_enter_critical_section+0x10>)
   2a8a6:	4798      	blx	r3
   2a8a8:	46c0      	nop			; (mov r8, r8)
   2a8aa:	46bd      	mov	sp, r7
   2a8ac:	bd80      	pop	{r7, pc}
   2a8ae:	46c0      	nop			; (mov r8, r8)
   2a8b0:	00026edd 	.word	0x00026edd

0002a8b4 <system_interrupt_leave_critical_section>:
   2a8b4:	b580      	push	{r7, lr}
   2a8b6:	af00      	add	r7, sp, #0
   2a8b8:	4b02      	ldr	r3, [pc, #8]	; (2a8c4 <system_interrupt_leave_critical_section+0x10>)
   2a8ba:	4798      	blx	r3
   2a8bc:	46c0      	nop			; (mov r8, r8)
   2a8be:	46bd      	mov	sp, r7
   2a8c0:	bd80      	pop	{r7, pc}
   2a8c2:	46c0      	nop			; (mov r8, r8)
   2a8c4:	00026f31 	.word	0x00026f31

0002a8c8 <system_gclk_is_syncing>:
   2a8c8:	b580      	push	{r7, lr}
   2a8ca:	af00      	add	r7, sp, #0
   2a8cc:	4b05      	ldr	r3, [pc, #20]	; (2a8e4 <system_gclk_is_syncing+0x1c>)
   2a8ce:	785b      	ldrb	r3, [r3, #1]
   2a8d0:	b2db      	uxtb	r3, r3
   2a8d2:	b25b      	sxtb	r3, r3
   2a8d4:	2b00      	cmp	r3, #0
   2a8d6:	da01      	bge.n	2a8dc <system_gclk_is_syncing+0x14>
   2a8d8:	2301      	movs	r3, #1
   2a8da:	e000      	b.n	2a8de <system_gclk_is_syncing+0x16>
   2a8dc:	2300      	movs	r3, #0
   2a8de:	0018      	movs	r0, r3
   2a8e0:	46bd      	mov	sp, r7
   2a8e2:	bd80      	pop	{r7, pc}
   2a8e4:	40000c00 	.word	0x40000c00

0002a8e8 <system_gclk_init>:
   2a8e8:	b580      	push	{r7, lr}
   2a8ea:	af00      	add	r7, sp, #0
   2a8ec:	2108      	movs	r1, #8
   2a8ee:	2000      	movs	r0, #0
   2a8f0:	4b07      	ldr	r3, [pc, #28]	; (2a910 <system_gclk_init+0x28>)
   2a8f2:	4798      	blx	r3
   2a8f4:	4b07      	ldr	r3, [pc, #28]	; (2a914 <system_gclk_init+0x2c>)
   2a8f6:	2201      	movs	r2, #1
   2a8f8:	701a      	strb	r2, [r3, #0]
   2a8fa:	46c0      	nop			; (mov r8, r8)
   2a8fc:	4b05      	ldr	r3, [pc, #20]	; (2a914 <system_gclk_init+0x2c>)
   2a8fe:	781b      	ldrb	r3, [r3, #0]
   2a900:	b2db      	uxtb	r3, r3
   2a902:	001a      	movs	r2, r3
   2a904:	2301      	movs	r3, #1
   2a906:	4013      	ands	r3, r2
   2a908:	d1f8      	bne.n	2a8fc <system_gclk_init+0x14>
   2a90a:	46c0      	nop			; (mov r8, r8)
   2a90c:	46bd      	mov	sp, r7
   2a90e:	bd80      	pop	{r7, pc}
   2a910:	0002a845 	.word	0x0002a845
   2a914:	40000c00 	.word	0x40000c00

0002a918 <system_gclk_gen_set_config>:
   2a918:	b580      	push	{r7, lr}
   2a91a:	b086      	sub	sp, #24
   2a91c:	af00      	add	r7, sp, #0
   2a91e:	0002      	movs	r2, r0
   2a920:	6039      	str	r1, [r7, #0]
   2a922:	1dfb      	adds	r3, r7, #7
   2a924:	701a      	strb	r2, [r3, #0]
   2a926:	1dfb      	adds	r3, r7, #7
   2a928:	781b      	ldrb	r3, [r3, #0]
   2a92a:	617b      	str	r3, [r7, #20]
   2a92c:	1dfb      	adds	r3, r7, #7
   2a92e:	781b      	ldrb	r3, [r3, #0]
   2a930:	613b      	str	r3, [r7, #16]
   2a932:	683b      	ldr	r3, [r7, #0]
   2a934:	781b      	ldrb	r3, [r3, #0]
   2a936:	021b      	lsls	r3, r3, #8
   2a938:	001a      	movs	r2, r3
   2a93a:	697b      	ldr	r3, [r7, #20]
   2a93c:	4313      	orrs	r3, r2
   2a93e:	617b      	str	r3, [r7, #20]
   2a940:	683b      	ldr	r3, [r7, #0]
   2a942:	785b      	ldrb	r3, [r3, #1]
   2a944:	2b00      	cmp	r3, #0
   2a946:	d004      	beq.n	2a952 <system_gclk_gen_set_config+0x3a>
   2a948:	697b      	ldr	r3, [r7, #20]
   2a94a:	2280      	movs	r2, #128	; 0x80
   2a94c:	02d2      	lsls	r2, r2, #11
   2a94e:	4313      	orrs	r3, r2
   2a950:	617b      	str	r3, [r7, #20]
   2a952:	683b      	ldr	r3, [r7, #0]
   2a954:	7a5b      	ldrb	r3, [r3, #9]
   2a956:	2b00      	cmp	r3, #0
   2a958:	d004      	beq.n	2a964 <system_gclk_gen_set_config+0x4c>
   2a95a:	697b      	ldr	r3, [r7, #20]
   2a95c:	2280      	movs	r2, #128	; 0x80
   2a95e:	0312      	lsls	r2, r2, #12
   2a960:	4313      	orrs	r3, r2
   2a962:	617b      	str	r3, [r7, #20]
   2a964:	683b      	ldr	r3, [r7, #0]
   2a966:	685b      	ldr	r3, [r3, #4]
   2a968:	2b01      	cmp	r3, #1
   2a96a:	d92c      	bls.n	2a9c6 <system_gclk_gen_set_config+0xae>
   2a96c:	683b      	ldr	r3, [r7, #0]
   2a96e:	685a      	ldr	r2, [r3, #4]
   2a970:	683b      	ldr	r3, [r7, #0]
   2a972:	685b      	ldr	r3, [r3, #4]
   2a974:	3b01      	subs	r3, #1
   2a976:	4013      	ands	r3, r2
   2a978:	d11a      	bne.n	2a9b0 <system_gclk_gen_set_config+0x98>
   2a97a:	2300      	movs	r3, #0
   2a97c:	60fb      	str	r3, [r7, #12]
   2a97e:	2302      	movs	r3, #2
   2a980:	60bb      	str	r3, [r7, #8]
   2a982:	e005      	b.n	2a990 <system_gclk_gen_set_config+0x78>
   2a984:	68fb      	ldr	r3, [r7, #12]
   2a986:	3301      	adds	r3, #1
   2a988:	60fb      	str	r3, [r7, #12]
   2a98a:	68bb      	ldr	r3, [r7, #8]
   2a98c:	005b      	lsls	r3, r3, #1
   2a98e:	60bb      	str	r3, [r7, #8]
   2a990:	683b      	ldr	r3, [r7, #0]
   2a992:	685a      	ldr	r2, [r3, #4]
   2a994:	68bb      	ldr	r3, [r7, #8]
   2a996:	429a      	cmp	r2, r3
   2a998:	d8f4      	bhi.n	2a984 <system_gclk_gen_set_config+0x6c>
   2a99a:	68fb      	ldr	r3, [r7, #12]
   2a99c:	021b      	lsls	r3, r3, #8
   2a99e:	693a      	ldr	r2, [r7, #16]
   2a9a0:	4313      	orrs	r3, r2
   2a9a2:	613b      	str	r3, [r7, #16]
   2a9a4:	697b      	ldr	r3, [r7, #20]
   2a9a6:	2280      	movs	r2, #128	; 0x80
   2a9a8:	0352      	lsls	r2, r2, #13
   2a9aa:	4313      	orrs	r3, r2
   2a9ac:	617b      	str	r3, [r7, #20]
   2a9ae:	e00a      	b.n	2a9c6 <system_gclk_gen_set_config+0xae>
   2a9b0:	683b      	ldr	r3, [r7, #0]
   2a9b2:	685b      	ldr	r3, [r3, #4]
   2a9b4:	021b      	lsls	r3, r3, #8
   2a9b6:	693a      	ldr	r2, [r7, #16]
   2a9b8:	4313      	orrs	r3, r2
   2a9ba:	613b      	str	r3, [r7, #16]
   2a9bc:	697b      	ldr	r3, [r7, #20]
   2a9be:	2280      	movs	r2, #128	; 0x80
   2a9c0:	0292      	lsls	r2, r2, #10
   2a9c2:	4313      	orrs	r3, r2
   2a9c4:	617b      	str	r3, [r7, #20]
   2a9c6:	683b      	ldr	r3, [r7, #0]
   2a9c8:	7a1b      	ldrb	r3, [r3, #8]
   2a9ca:	2b00      	cmp	r3, #0
   2a9cc:	d004      	beq.n	2a9d8 <system_gclk_gen_set_config+0xc0>
   2a9ce:	697b      	ldr	r3, [r7, #20]
   2a9d0:	2280      	movs	r2, #128	; 0x80
   2a9d2:	0392      	lsls	r2, r2, #14
   2a9d4:	4313      	orrs	r3, r2
   2a9d6:	617b      	str	r3, [r7, #20]
   2a9d8:	46c0      	nop			; (mov r8, r8)
   2a9da:	4b13      	ldr	r3, [pc, #76]	; (2aa28 <system_gclk_gen_set_config+0x110>)
   2a9dc:	4798      	blx	r3
   2a9de:	1e03      	subs	r3, r0, #0
   2a9e0:	d1fb      	bne.n	2a9da <system_gclk_gen_set_config+0xc2>
   2a9e2:	4b12      	ldr	r3, [pc, #72]	; (2aa2c <system_gclk_gen_set_config+0x114>)
   2a9e4:	4798      	blx	r3
   2a9e6:	4a12      	ldr	r2, [pc, #72]	; (2aa30 <system_gclk_gen_set_config+0x118>)
   2a9e8:	1dfb      	adds	r3, r7, #7
   2a9ea:	781b      	ldrb	r3, [r3, #0]
   2a9ec:	7013      	strb	r3, [r2, #0]
   2a9ee:	46c0      	nop			; (mov r8, r8)
   2a9f0:	4b0d      	ldr	r3, [pc, #52]	; (2aa28 <system_gclk_gen_set_config+0x110>)
   2a9f2:	4798      	blx	r3
   2a9f4:	1e03      	subs	r3, r0, #0
   2a9f6:	d1fb      	bne.n	2a9f0 <system_gclk_gen_set_config+0xd8>
   2a9f8:	4b0e      	ldr	r3, [pc, #56]	; (2aa34 <system_gclk_gen_set_config+0x11c>)
   2a9fa:	693a      	ldr	r2, [r7, #16]
   2a9fc:	609a      	str	r2, [r3, #8]
   2a9fe:	46c0      	nop			; (mov r8, r8)
   2aa00:	4b09      	ldr	r3, [pc, #36]	; (2aa28 <system_gclk_gen_set_config+0x110>)
   2aa02:	4798      	blx	r3
   2aa04:	1e03      	subs	r3, r0, #0
   2aa06:	d1fb      	bne.n	2aa00 <system_gclk_gen_set_config+0xe8>
   2aa08:	4b0a      	ldr	r3, [pc, #40]	; (2aa34 <system_gclk_gen_set_config+0x11c>)
   2aa0a:	4a0a      	ldr	r2, [pc, #40]	; (2aa34 <system_gclk_gen_set_config+0x11c>)
   2aa0c:	6851      	ldr	r1, [r2, #4]
   2aa0e:	2280      	movs	r2, #128	; 0x80
   2aa10:	0252      	lsls	r2, r2, #9
   2aa12:	4011      	ands	r1, r2
   2aa14:	697a      	ldr	r2, [r7, #20]
   2aa16:	430a      	orrs	r2, r1
   2aa18:	605a      	str	r2, [r3, #4]
   2aa1a:	4b07      	ldr	r3, [pc, #28]	; (2aa38 <system_gclk_gen_set_config+0x120>)
   2aa1c:	4798      	blx	r3
   2aa1e:	46c0      	nop			; (mov r8, r8)
   2aa20:	46bd      	mov	sp, r7
   2aa22:	b006      	add	sp, #24
   2aa24:	bd80      	pop	{r7, pc}
   2aa26:	46c0      	nop			; (mov r8, r8)
   2aa28:	0002a8c9 	.word	0x0002a8c9
   2aa2c:	0002a8a1 	.word	0x0002a8a1
   2aa30:	40000c08 	.word	0x40000c08
   2aa34:	40000c00 	.word	0x40000c00
   2aa38:	0002a8b5 	.word	0x0002a8b5

0002aa3c <system_gclk_gen_enable>:
   2aa3c:	b580      	push	{r7, lr}
   2aa3e:	b082      	sub	sp, #8
   2aa40:	af00      	add	r7, sp, #0
   2aa42:	0002      	movs	r2, r0
   2aa44:	1dfb      	adds	r3, r7, #7
   2aa46:	701a      	strb	r2, [r3, #0]
   2aa48:	46c0      	nop			; (mov r8, r8)
   2aa4a:	4b0e      	ldr	r3, [pc, #56]	; (2aa84 <system_gclk_gen_enable+0x48>)
   2aa4c:	4798      	blx	r3
   2aa4e:	1e03      	subs	r3, r0, #0
   2aa50:	d1fb      	bne.n	2aa4a <system_gclk_gen_enable+0xe>
   2aa52:	4b0d      	ldr	r3, [pc, #52]	; (2aa88 <system_gclk_gen_enable+0x4c>)
   2aa54:	4798      	blx	r3
   2aa56:	4a0d      	ldr	r2, [pc, #52]	; (2aa8c <system_gclk_gen_enable+0x50>)
   2aa58:	1dfb      	adds	r3, r7, #7
   2aa5a:	781b      	ldrb	r3, [r3, #0]
   2aa5c:	7013      	strb	r3, [r2, #0]
   2aa5e:	46c0      	nop			; (mov r8, r8)
   2aa60:	4b08      	ldr	r3, [pc, #32]	; (2aa84 <system_gclk_gen_enable+0x48>)
   2aa62:	4798      	blx	r3
   2aa64:	1e03      	subs	r3, r0, #0
   2aa66:	d1fb      	bne.n	2aa60 <system_gclk_gen_enable+0x24>
   2aa68:	4b09      	ldr	r3, [pc, #36]	; (2aa90 <system_gclk_gen_enable+0x54>)
   2aa6a:	4a09      	ldr	r2, [pc, #36]	; (2aa90 <system_gclk_gen_enable+0x54>)
   2aa6c:	6852      	ldr	r2, [r2, #4]
   2aa6e:	2180      	movs	r1, #128	; 0x80
   2aa70:	0249      	lsls	r1, r1, #9
   2aa72:	430a      	orrs	r2, r1
   2aa74:	605a      	str	r2, [r3, #4]
   2aa76:	4b07      	ldr	r3, [pc, #28]	; (2aa94 <system_gclk_gen_enable+0x58>)
   2aa78:	4798      	blx	r3
   2aa7a:	46c0      	nop			; (mov r8, r8)
   2aa7c:	46bd      	mov	sp, r7
   2aa7e:	b002      	add	sp, #8
   2aa80:	bd80      	pop	{r7, pc}
   2aa82:	46c0      	nop			; (mov r8, r8)
   2aa84:	0002a8c9 	.word	0x0002a8c9
   2aa88:	0002a8a1 	.word	0x0002a8a1
   2aa8c:	40000c04 	.word	0x40000c04
   2aa90:	40000c00 	.word	0x40000c00
   2aa94:	0002a8b5 	.word	0x0002a8b5

0002aa98 <system_gclk_gen_get_hz>:
   2aa98:	b580      	push	{r7, lr}
   2aa9a:	b086      	sub	sp, #24
   2aa9c:	af00      	add	r7, sp, #0
   2aa9e:	0002      	movs	r2, r0
   2aaa0:	1dfb      	adds	r3, r7, #7
   2aaa2:	701a      	strb	r2, [r3, #0]
   2aaa4:	46c0      	nop			; (mov r8, r8)
   2aaa6:	4b2a      	ldr	r3, [pc, #168]	; (2ab50 <system_gclk_gen_get_hz+0xb8>)
   2aaa8:	4798      	blx	r3
   2aaaa:	1e03      	subs	r3, r0, #0
   2aaac:	d1fb      	bne.n	2aaa6 <system_gclk_gen_get_hz+0xe>
   2aaae:	4b29      	ldr	r3, [pc, #164]	; (2ab54 <system_gclk_gen_get_hz+0xbc>)
   2aab0:	4798      	blx	r3
   2aab2:	4a29      	ldr	r2, [pc, #164]	; (2ab58 <system_gclk_gen_get_hz+0xc0>)
   2aab4:	1dfb      	adds	r3, r7, #7
   2aab6:	781b      	ldrb	r3, [r3, #0]
   2aab8:	7013      	strb	r3, [r2, #0]
   2aaba:	46c0      	nop			; (mov r8, r8)
   2aabc:	4b24      	ldr	r3, [pc, #144]	; (2ab50 <system_gclk_gen_get_hz+0xb8>)
   2aabe:	4798      	blx	r3
   2aac0:	1e03      	subs	r3, r0, #0
   2aac2:	d1fb      	bne.n	2aabc <system_gclk_gen_get_hz+0x24>
   2aac4:	4b25      	ldr	r3, [pc, #148]	; (2ab5c <system_gclk_gen_get_hz+0xc4>)
   2aac6:	685b      	ldr	r3, [r3, #4]
   2aac8:	04db      	lsls	r3, r3, #19
   2aaca:	0edb      	lsrs	r3, r3, #27
   2aacc:	b2db      	uxtb	r3, r3
   2aace:	0018      	movs	r0, r3
   2aad0:	4b23      	ldr	r3, [pc, #140]	; (2ab60 <system_gclk_gen_get_hz+0xc8>)
   2aad2:	4798      	blx	r3
   2aad4:	0003      	movs	r3, r0
   2aad6:	617b      	str	r3, [r7, #20]
   2aad8:	4a1f      	ldr	r2, [pc, #124]	; (2ab58 <system_gclk_gen_get_hz+0xc0>)
   2aada:	1dfb      	adds	r3, r7, #7
   2aadc:	781b      	ldrb	r3, [r3, #0]
   2aade:	7013      	strb	r3, [r2, #0]
   2aae0:	4b1e      	ldr	r3, [pc, #120]	; (2ab5c <system_gclk_gen_get_hz+0xc4>)
   2aae2:	685b      	ldr	r3, [r3, #4]
   2aae4:	02db      	lsls	r3, r3, #11
   2aae6:	0fdb      	lsrs	r3, r3, #31
   2aae8:	b2da      	uxtb	r2, r3
   2aaea:	2313      	movs	r3, #19
   2aaec:	18fb      	adds	r3, r7, r3
   2aaee:	701a      	strb	r2, [r3, #0]
   2aaf0:	4a1c      	ldr	r2, [pc, #112]	; (2ab64 <system_gclk_gen_get_hz+0xcc>)
   2aaf2:	1dfb      	adds	r3, r7, #7
   2aaf4:	781b      	ldrb	r3, [r3, #0]
   2aaf6:	7013      	strb	r3, [r2, #0]
   2aaf8:	46c0      	nop			; (mov r8, r8)
   2aafa:	4b15      	ldr	r3, [pc, #84]	; (2ab50 <system_gclk_gen_get_hz+0xb8>)
   2aafc:	4798      	blx	r3
   2aafe:	1e03      	subs	r3, r0, #0
   2ab00:	d1fb      	bne.n	2aafa <system_gclk_gen_get_hz+0x62>
   2ab02:	4b16      	ldr	r3, [pc, #88]	; (2ab5c <system_gclk_gen_get_hz+0xc4>)
   2ab04:	689b      	ldr	r3, [r3, #8]
   2ab06:	021b      	lsls	r3, r3, #8
   2ab08:	0c1b      	lsrs	r3, r3, #16
   2ab0a:	b29b      	uxth	r3, r3
   2ab0c:	60fb      	str	r3, [r7, #12]
   2ab0e:	4b16      	ldr	r3, [pc, #88]	; (2ab68 <system_gclk_gen_get_hz+0xd0>)
   2ab10:	4798      	blx	r3
   2ab12:	2313      	movs	r3, #19
   2ab14:	18fb      	adds	r3, r7, r3
   2ab16:	781b      	ldrb	r3, [r3, #0]
   2ab18:	2b00      	cmp	r3, #0
   2ab1a:	d109      	bne.n	2ab30 <system_gclk_gen_get_hz+0x98>
   2ab1c:	68fb      	ldr	r3, [r7, #12]
   2ab1e:	2b01      	cmp	r3, #1
   2ab20:	d906      	bls.n	2ab30 <system_gclk_gen_get_hz+0x98>
   2ab22:	4b12      	ldr	r3, [pc, #72]	; (2ab6c <system_gclk_gen_get_hz+0xd4>)
   2ab24:	68f9      	ldr	r1, [r7, #12]
   2ab26:	6978      	ldr	r0, [r7, #20]
   2ab28:	4798      	blx	r3
   2ab2a:	0003      	movs	r3, r0
   2ab2c:	617b      	str	r3, [r7, #20]
   2ab2e:	e00a      	b.n	2ab46 <system_gclk_gen_get_hz+0xae>
   2ab30:	2313      	movs	r3, #19
   2ab32:	18fb      	adds	r3, r7, r3
   2ab34:	781b      	ldrb	r3, [r3, #0]
   2ab36:	2b00      	cmp	r3, #0
   2ab38:	d005      	beq.n	2ab46 <system_gclk_gen_get_hz+0xae>
   2ab3a:	68fb      	ldr	r3, [r7, #12]
   2ab3c:	3301      	adds	r3, #1
   2ab3e:	697a      	ldr	r2, [r7, #20]
   2ab40:	40da      	lsrs	r2, r3
   2ab42:	0013      	movs	r3, r2
   2ab44:	617b      	str	r3, [r7, #20]
   2ab46:	697b      	ldr	r3, [r7, #20]
   2ab48:	0018      	movs	r0, r3
   2ab4a:	46bd      	mov	sp, r7
   2ab4c:	b006      	add	sp, #24
   2ab4e:	bd80      	pop	{r7, pc}
   2ab50:	0002a8c9 	.word	0x0002a8c9
   2ab54:	0002a8a1 	.word	0x0002a8a1
   2ab58:	40000c04 	.word	0x40000c04
   2ab5c:	40000c00 	.word	0x40000c00
   2ab60:	0002a1f9 	.word	0x0002a1f9
   2ab64:	40000c08 	.word	0x40000c08
   2ab68:	0002a8b5 	.word	0x0002a8b5
   2ab6c:	0003372d 	.word	0x0003372d

0002ab70 <system_gclk_chan_set_config>:
   2ab70:	b580      	push	{r7, lr}
   2ab72:	b084      	sub	sp, #16
   2ab74:	af00      	add	r7, sp, #0
   2ab76:	0002      	movs	r2, r0
   2ab78:	6039      	str	r1, [r7, #0]
   2ab7a:	1dfb      	adds	r3, r7, #7
   2ab7c:	701a      	strb	r2, [r3, #0]
   2ab7e:	1dfb      	adds	r3, r7, #7
   2ab80:	781b      	ldrb	r3, [r3, #0]
   2ab82:	60fb      	str	r3, [r7, #12]
   2ab84:	683b      	ldr	r3, [r7, #0]
   2ab86:	781b      	ldrb	r3, [r3, #0]
   2ab88:	021b      	lsls	r3, r3, #8
   2ab8a:	001a      	movs	r2, r3
   2ab8c:	68fb      	ldr	r3, [r7, #12]
   2ab8e:	4313      	orrs	r3, r2
   2ab90:	60fb      	str	r3, [r7, #12]
   2ab92:	1dfb      	adds	r3, r7, #7
   2ab94:	781b      	ldrb	r3, [r3, #0]
   2ab96:	0018      	movs	r0, r3
   2ab98:	4b04      	ldr	r3, [pc, #16]	; (2abac <system_gclk_chan_set_config+0x3c>)
   2ab9a:	4798      	blx	r3
   2ab9c:	4b04      	ldr	r3, [pc, #16]	; (2abb0 <system_gclk_chan_set_config+0x40>)
   2ab9e:	68fa      	ldr	r2, [r7, #12]
   2aba0:	b292      	uxth	r2, r2
   2aba2:	805a      	strh	r2, [r3, #2]
   2aba4:	46c0      	nop			; (mov r8, r8)
   2aba6:	46bd      	mov	sp, r7
   2aba8:	b004      	add	sp, #16
   2abaa:	bd80      	pop	{r7, pc}
   2abac:	0002abfd 	.word	0x0002abfd
   2abb0:	40000c00 	.word	0x40000c00

0002abb4 <system_gclk_chan_enable>:
   2abb4:	b580      	push	{r7, lr}
   2abb6:	b082      	sub	sp, #8
   2abb8:	af00      	add	r7, sp, #0
   2abba:	0002      	movs	r2, r0
   2abbc:	1dfb      	adds	r3, r7, #7
   2abbe:	701a      	strb	r2, [r3, #0]
   2abc0:	4b0a      	ldr	r3, [pc, #40]	; (2abec <system_gclk_chan_enable+0x38>)
   2abc2:	4798      	blx	r3
   2abc4:	4a0a      	ldr	r2, [pc, #40]	; (2abf0 <system_gclk_chan_enable+0x3c>)
   2abc6:	1dfb      	adds	r3, r7, #7
   2abc8:	781b      	ldrb	r3, [r3, #0]
   2abca:	7013      	strb	r3, [r2, #0]
   2abcc:	4909      	ldr	r1, [pc, #36]	; (2abf4 <system_gclk_chan_enable+0x40>)
   2abce:	4b09      	ldr	r3, [pc, #36]	; (2abf4 <system_gclk_chan_enable+0x40>)
   2abd0:	885b      	ldrh	r3, [r3, #2]
   2abd2:	b29b      	uxth	r3, r3
   2abd4:	2280      	movs	r2, #128	; 0x80
   2abd6:	01d2      	lsls	r2, r2, #7
   2abd8:	4313      	orrs	r3, r2
   2abda:	b29b      	uxth	r3, r3
   2abdc:	804b      	strh	r3, [r1, #2]
   2abde:	4b06      	ldr	r3, [pc, #24]	; (2abf8 <system_gclk_chan_enable+0x44>)
   2abe0:	4798      	blx	r3
   2abe2:	46c0      	nop			; (mov r8, r8)
   2abe4:	46bd      	mov	sp, r7
   2abe6:	b002      	add	sp, #8
   2abe8:	bd80      	pop	{r7, pc}
   2abea:	46c0      	nop			; (mov r8, r8)
   2abec:	0002a8a1 	.word	0x0002a8a1
   2abf0:	40000c02 	.word	0x40000c02
   2abf4:	40000c00 	.word	0x40000c00
   2abf8:	0002a8b5 	.word	0x0002a8b5

0002abfc <system_gclk_chan_disable>:
   2abfc:	b580      	push	{r7, lr}
   2abfe:	b084      	sub	sp, #16
   2ac00:	af00      	add	r7, sp, #0
   2ac02:	0002      	movs	r2, r0
   2ac04:	1dfb      	adds	r3, r7, #7
   2ac06:	701a      	strb	r2, [r3, #0]
   2ac08:	4b1c      	ldr	r3, [pc, #112]	; (2ac7c <system_gclk_chan_disable+0x80>)
   2ac0a:	4798      	blx	r3
   2ac0c:	4a1c      	ldr	r2, [pc, #112]	; (2ac80 <system_gclk_chan_disable+0x84>)
   2ac0e:	1dfb      	adds	r3, r7, #7
   2ac10:	781b      	ldrb	r3, [r3, #0]
   2ac12:	7013      	strb	r3, [r2, #0]
   2ac14:	4b1b      	ldr	r3, [pc, #108]	; (2ac84 <system_gclk_chan_disable+0x88>)
   2ac16:	885b      	ldrh	r3, [r3, #2]
   2ac18:	051b      	lsls	r3, r3, #20
   2ac1a:	0f1b      	lsrs	r3, r3, #28
   2ac1c:	b2db      	uxtb	r3, r3
   2ac1e:	60fb      	str	r3, [r7, #12]
   2ac20:	4a18      	ldr	r2, [pc, #96]	; (2ac84 <system_gclk_chan_disable+0x88>)
   2ac22:	8853      	ldrh	r3, [r2, #2]
   2ac24:	4918      	ldr	r1, [pc, #96]	; (2ac88 <system_gclk_chan_disable+0x8c>)
   2ac26:	400b      	ands	r3, r1
   2ac28:	8053      	strh	r3, [r2, #2]
   2ac2a:	4a16      	ldr	r2, [pc, #88]	; (2ac84 <system_gclk_chan_disable+0x88>)
   2ac2c:	4b15      	ldr	r3, [pc, #84]	; (2ac84 <system_gclk_chan_disable+0x88>)
   2ac2e:	885b      	ldrh	r3, [r3, #2]
   2ac30:	b29b      	uxth	r3, r3
   2ac32:	4916      	ldr	r1, [pc, #88]	; (2ac8c <system_gclk_chan_disable+0x90>)
   2ac34:	400b      	ands	r3, r1
   2ac36:	b29b      	uxth	r3, r3
   2ac38:	8053      	strh	r3, [r2, #2]
   2ac3a:	46c0      	nop			; (mov r8, r8)
   2ac3c:	4b11      	ldr	r3, [pc, #68]	; (2ac84 <system_gclk_chan_disable+0x88>)
   2ac3e:	885b      	ldrh	r3, [r3, #2]
   2ac40:	b29b      	uxth	r3, r3
   2ac42:	001a      	movs	r2, r3
   2ac44:	2380      	movs	r3, #128	; 0x80
   2ac46:	01db      	lsls	r3, r3, #7
   2ac48:	4013      	ands	r3, r2
   2ac4a:	d1f7      	bne.n	2ac3c <system_gclk_chan_disable+0x40>
   2ac4c:	4a0d      	ldr	r2, [pc, #52]	; (2ac84 <system_gclk_chan_disable+0x88>)
   2ac4e:	68fb      	ldr	r3, [r7, #12]
   2ac50:	b2db      	uxtb	r3, r3
   2ac52:	1c19      	adds	r1, r3, #0
   2ac54:	230f      	movs	r3, #15
   2ac56:	400b      	ands	r3, r1
   2ac58:	b2d9      	uxtb	r1, r3
   2ac5a:	8853      	ldrh	r3, [r2, #2]
   2ac5c:	1c08      	adds	r0, r1, #0
   2ac5e:	210f      	movs	r1, #15
   2ac60:	4001      	ands	r1, r0
   2ac62:	0208      	lsls	r0, r1, #8
   2ac64:	4908      	ldr	r1, [pc, #32]	; (2ac88 <system_gclk_chan_disable+0x8c>)
   2ac66:	400b      	ands	r3, r1
   2ac68:	1c19      	adds	r1, r3, #0
   2ac6a:	1c03      	adds	r3, r0, #0
   2ac6c:	430b      	orrs	r3, r1
   2ac6e:	8053      	strh	r3, [r2, #2]
   2ac70:	4b07      	ldr	r3, [pc, #28]	; (2ac90 <system_gclk_chan_disable+0x94>)
   2ac72:	4798      	blx	r3
   2ac74:	46c0      	nop			; (mov r8, r8)
   2ac76:	46bd      	mov	sp, r7
   2ac78:	b004      	add	sp, #16
   2ac7a:	bd80      	pop	{r7, pc}
   2ac7c:	0002a8a1 	.word	0x0002a8a1
   2ac80:	40000c02 	.word	0x40000c02
   2ac84:	40000c00 	.word	0x40000c00
   2ac88:	fffff0ff 	.word	0xfffff0ff
   2ac8c:	ffffbfff 	.word	0xffffbfff
   2ac90:	0002a8b5 	.word	0x0002a8b5

0002ac94 <system_gclk_chan_get_hz>:
   2ac94:	b580      	push	{r7, lr}
   2ac96:	b084      	sub	sp, #16
   2ac98:	af00      	add	r7, sp, #0
   2ac9a:	0002      	movs	r2, r0
   2ac9c:	1dfb      	adds	r3, r7, #7
   2ac9e:	701a      	strb	r2, [r3, #0]
   2aca0:	4b0d      	ldr	r3, [pc, #52]	; (2acd8 <system_gclk_chan_get_hz+0x44>)
   2aca2:	4798      	blx	r3
   2aca4:	4a0d      	ldr	r2, [pc, #52]	; (2acdc <system_gclk_chan_get_hz+0x48>)
   2aca6:	1dfb      	adds	r3, r7, #7
   2aca8:	781b      	ldrb	r3, [r3, #0]
   2acaa:	7013      	strb	r3, [r2, #0]
   2acac:	4b0c      	ldr	r3, [pc, #48]	; (2ace0 <system_gclk_chan_get_hz+0x4c>)
   2acae:	885b      	ldrh	r3, [r3, #2]
   2acb0:	051b      	lsls	r3, r3, #20
   2acb2:	0f1b      	lsrs	r3, r3, #28
   2acb4:	b2da      	uxtb	r2, r3
   2acb6:	230f      	movs	r3, #15
   2acb8:	18fb      	adds	r3, r7, r3
   2acba:	701a      	strb	r2, [r3, #0]
   2acbc:	4b09      	ldr	r3, [pc, #36]	; (2ace4 <system_gclk_chan_get_hz+0x50>)
   2acbe:	4798      	blx	r3
   2acc0:	230f      	movs	r3, #15
   2acc2:	18fb      	adds	r3, r7, r3
   2acc4:	781b      	ldrb	r3, [r3, #0]
   2acc6:	0018      	movs	r0, r3
   2acc8:	4b07      	ldr	r3, [pc, #28]	; (2ace8 <system_gclk_chan_get_hz+0x54>)
   2acca:	4798      	blx	r3
   2accc:	0003      	movs	r3, r0
   2acce:	0018      	movs	r0, r3
   2acd0:	46bd      	mov	sp, r7
   2acd2:	b004      	add	sp, #16
   2acd4:	bd80      	pop	{r7, pc}
   2acd6:	46c0      	nop			; (mov r8, r8)
   2acd8:	0002a8a1 	.word	0x0002a8a1
   2acdc:	40000c02 	.word	0x40000c02
   2ace0:	40000c00 	.word	0x40000c00
   2ace4:	0002a8b5 	.word	0x0002a8b5
   2ace8:	0002aa99 	.word	0x0002aa99

0002acec <system_interrupt_clear_pending>:
   2acec:	b580      	push	{r7, lr}
   2acee:	b084      	sub	sp, #16
   2acf0:	af00      	add	r7, sp, #0
   2acf2:	0002      	movs	r2, r0
   2acf4:	1dfb      	adds	r3, r7, #7
   2acf6:	701a      	strb	r2, [r3, #0]
   2acf8:	230f      	movs	r3, #15
   2acfa:	18fb      	adds	r3, r7, r3
   2acfc:	2200      	movs	r2, #0
   2acfe:	701a      	strb	r2, [r3, #0]
   2ad00:	1dfb      	adds	r3, r7, #7
   2ad02:	781b      	ldrb	r3, [r3, #0]
   2ad04:	2b7f      	cmp	r3, #127	; 0x7f
   2ad06:	d80b      	bhi.n	2ad20 <system_interrupt_clear_pending+0x34>
   2ad08:	4a13      	ldr	r2, [pc, #76]	; (2ad58 <system_interrupt_clear_pending+0x6c>)
   2ad0a:	1dfb      	adds	r3, r7, #7
   2ad0c:	781b      	ldrb	r3, [r3, #0]
   2ad0e:	b25b      	sxtb	r3, r3
   2ad10:	2101      	movs	r1, #1
   2ad12:	4099      	lsls	r1, r3
   2ad14:	000b      	movs	r3, r1
   2ad16:	0019      	movs	r1, r3
   2ad18:	23c0      	movs	r3, #192	; 0xc0
   2ad1a:	005b      	lsls	r3, r3, #1
   2ad1c:	50d1      	str	r1, [r2, r3]
   2ad1e:	e014      	b.n	2ad4a <system_interrupt_clear_pending+0x5e>
   2ad20:	1dfb      	adds	r3, r7, #7
   2ad22:	781b      	ldrb	r3, [r3, #0]
   2ad24:	b25b      	sxtb	r3, r3
   2ad26:	330e      	adds	r3, #14
   2ad28:	d101      	bne.n	2ad2e <system_interrupt_clear_pending+0x42>
   2ad2a:	2317      	movs	r3, #23
   2ad2c:	e010      	b.n	2ad50 <system_interrupt_clear_pending+0x64>
   2ad2e:	1dfb      	adds	r3, r7, #7
   2ad30:	781b      	ldrb	r3, [r3, #0]
   2ad32:	b25b      	sxtb	r3, r3
   2ad34:	3301      	adds	r3, #1
   2ad36:	d104      	bne.n	2ad42 <system_interrupt_clear_pending+0x56>
   2ad38:	4b08      	ldr	r3, [pc, #32]	; (2ad5c <system_interrupt_clear_pending+0x70>)
   2ad3a:	2280      	movs	r2, #128	; 0x80
   2ad3c:	0492      	lsls	r2, r2, #18
   2ad3e:	605a      	str	r2, [r3, #4]
   2ad40:	e003      	b.n	2ad4a <system_interrupt_clear_pending+0x5e>
   2ad42:	230f      	movs	r3, #15
   2ad44:	18fb      	adds	r3, r7, r3
   2ad46:	2217      	movs	r2, #23
   2ad48:	701a      	strb	r2, [r3, #0]
   2ad4a:	230f      	movs	r3, #15
   2ad4c:	18fb      	adds	r3, r7, r3
   2ad4e:	781b      	ldrb	r3, [r3, #0]
   2ad50:	0018      	movs	r0, r3
   2ad52:	46bd      	mov	sp, r7
   2ad54:	b004      	add	sp, #16
   2ad56:	bd80      	pop	{r7, pc}
   2ad58:	e000e100 	.word	0xe000e100
   2ad5c:	e000ed00 	.word	0xe000ed00

0002ad60 <system_pinmux_get_group_from_gpio_pin>:
   2ad60:	b580      	push	{r7, lr}
   2ad62:	b084      	sub	sp, #16
   2ad64:	af00      	add	r7, sp, #0
   2ad66:	0002      	movs	r2, r0
   2ad68:	1dfb      	adds	r3, r7, #7
   2ad6a:	701a      	strb	r2, [r3, #0]
   2ad6c:	230f      	movs	r3, #15
   2ad6e:	18fb      	adds	r3, r7, r3
   2ad70:	1dfa      	adds	r2, r7, #7
   2ad72:	7812      	ldrb	r2, [r2, #0]
   2ad74:	09d2      	lsrs	r2, r2, #7
   2ad76:	701a      	strb	r2, [r3, #0]
   2ad78:	230e      	movs	r3, #14
   2ad7a:	18fb      	adds	r3, r7, r3
   2ad7c:	1dfa      	adds	r2, r7, #7
   2ad7e:	7812      	ldrb	r2, [r2, #0]
   2ad80:	0952      	lsrs	r2, r2, #5
   2ad82:	701a      	strb	r2, [r3, #0]
   2ad84:	4b0d      	ldr	r3, [pc, #52]	; (2adbc <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2ad86:	60bb      	str	r3, [r7, #8]
   2ad88:	230f      	movs	r3, #15
   2ad8a:	18fb      	adds	r3, r7, r3
   2ad8c:	781b      	ldrb	r3, [r3, #0]
   2ad8e:	2b00      	cmp	r3, #0
   2ad90:	d10f      	bne.n	2adb2 <system_pinmux_get_group_from_gpio_pin+0x52>
   2ad92:	230f      	movs	r3, #15
   2ad94:	18fb      	adds	r3, r7, r3
   2ad96:	781b      	ldrb	r3, [r3, #0]
   2ad98:	009b      	lsls	r3, r3, #2
   2ad9a:	2210      	movs	r2, #16
   2ad9c:	4694      	mov	ip, r2
   2ad9e:	44bc      	add	ip, r7
   2ada0:	4463      	add	r3, ip
   2ada2:	3b08      	subs	r3, #8
   2ada4:	681a      	ldr	r2, [r3, #0]
   2ada6:	230e      	movs	r3, #14
   2ada8:	18fb      	adds	r3, r7, r3
   2adaa:	781b      	ldrb	r3, [r3, #0]
   2adac:	01db      	lsls	r3, r3, #7
   2adae:	18d3      	adds	r3, r2, r3
   2adb0:	e000      	b.n	2adb4 <system_pinmux_get_group_from_gpio_pin+0x54>
   2adb2:	2300      	movs	r3, #0
   2adb4:	0018      	movs	r0, r3
   2adb6:	46bd      	mov	sp, r7
   2adb8:	b004      	add	sp, #16
   2adba:	bd80      	pop	{r7, pc}
   2adbc:	41004400 	.word	0x41004400

0002adc0 <_system_pinmux_config>:
   2adc0:	b580      	push	{r7, lr}
   2adc2:	b088      	sub	sp, #32
   2adc4:	af00      	add	r7, sp, #0
   2adc6:	60f8      	str	r0, [r7, #12]
   2adc8:	60b9      	str	r1, [r7, #8]
   2adca:	607a      	str	r2, [r7, #4]
   2adcc:	2300      	movs	r3, #0
   2adce:	61fb      	str	r3, [r7, #28]
   2add0:	687b      	ldr	r3, [r7, #4]
   2add2:	78db      	ldrb	r3, [r3, #3]
   2add4:	2201      	movs	r2, #1
   2add6:	4053      	eors	r3, r2
   2add8:	b2db      	uxtb	r3, r3
   2adda:	2b00      	cmp	r3, #0
   2addc:	d035      	beq.n	2ae4a <_system_pinmux_config+0x8a>
   2adde:	687b      	ldr	r3, [r7, #4]
   2ade0:	781b      	ldrb	r3, [r3, #0]
   2ade2:	2b80      	cmp	r3, #128	; 0x80
   2ade4:	d00b      	beq.n	2adfe <_system_pinmux_config+0x3e>
   2ade6:	69fb      	ldr	r3, [r7, #28]
   2ade8:	2280      	movs	r2, #128	; 0x80
   2adea:	0252      	lsls	r2, r2, #9
   2adec:	4313      	orrs	r3, r2
   2adee:	61fb      	str	r3, [r7, #28]
   2adf0:	687b      	ldr	r3, [r7, #4]
   2adf2:	781b      	ldrb	r3, [r3, #0]
   2adf4:	061b      	lsls	r3, r3, #24
   2adf6:	001a      	movs	r2, r3
   2adf8:	69fb      	ldr	r3, [r7, #28]
   2adfa:	4313      	orrs	r3, r2
   2adfc:	61fb      	str	r3, [r7, #28]
   2adfe:	687b      	ldr	r3, [r7, #4]
   2ae00:	785b      	ldrb	r3, [r3, #1]
   2ae02:	2b00      	cmp	r3, #0
   2ae04:	d003      	beq.n	2ae0e <_system_pinmux_config+0x4e>
   2ae06:	687b      	ldr	r3, [r7, #4]
   2ae08:	785b      	ldrb	r3, [r3, #1]
   2ae0a:	2b02      	cmp	r3, #2
   2ae0c:	d110      	bne.n	2ae30 <_system_pinmux_config+0x70>
   2ae0e:	69fb      	ldr	r3, [r7, #28]
   2ae10:	2280      	movs	r2, #128	; 0x80
   2ae12:	0292      	lsls	r2, r2, #10
   2ae14:	4313      	orrs	r3, r2
   2ae16:	61fb      	str	r3, [r7, #28]
   2ae18:	687b      	ldr	r3, [r7, #4]
   2ae1a:	789b      	ldrb	r3, [r3, #2]
   2ae1c:	2b00      	cmp	r3, #0
   2ae1e:	d004      	beq.n	2ae2a <_system_pinmux_config+0x6a>
   2ae20:	69fb      	ldr	r3, [r7, #28]
   2ae22:	2280      	movs	r2, #128	; 0x80
   2ae24:	02d2      	lsls	r2, r2, #11
   2ae26:	4313      	orrs	r3, r2
   2ae28:	61fb      	str	r3, [r7, #28]
   2ae2a:	68fb      	ldr	r3, [r7, #12]
   2ae2c:	68ba      	ldr	r2, [r7, #8]
   2ae2e:	605a      	str	r2, [r3, #4]
   2ae30:	687b      	ldr	r3, [r7, #4]
   2ae32:	785b      	ldrb	r3, [r3, #1]
   2ae34:	2b01      	cmp	r3, #1
   2ae36:	d003      	beq.n	2ae40 <_system_pinmux_config+0x80>
   2ae38:	687b      	ldr	r3, [r7, #4]
   2ae3a:	785b      	ldrb	r3, [r3, #1]
   2ae3c:	2b02      	cmp	r3, #2
   2ae3e:	d107      	bne.n	2ae50 <_system_pinmux_config+0x90>
   2ae40:	69fb      	ldr	r3, [r7, #28]
   2ae42:	4a22      	ldr	r2, [pc, #136]	; (2aecc <_system_pinmux_config+0x10c>)
   2ae44:	4013      	ands	r3, r2
   2ae46:	61fb      	str	r3, [r7, #28]
   2ae48:	e002      	b.n	2ae50 <_system_pinmux_config+0x90>
   2ae4a:	68fb      	ldr	r3, [r7, #12]
   2ae4c:	68ba      	ldr	r2, [r7, #8]
   2ae4e:	605a      	str	r2, [r3, #4]
   2ae50:	68bb      	ldr	r3, [r7, #8]
   2ae52:	041b      	lsls	r3, r3, #16
   2ae54:	0c1b      	lsrs	r3, r3, #16
   2ae56:	61bb      	str	r3, [r7, #24]
   2ae58:	68bb      	ldr	r3, [r7, #8]
   2ae5a:	0c1b      	lsrs	r3, r3, #16
   2ae5c:	617b      	str	r3, [r7, #20]
   2ae5e:	69ba      	ldr	r2, [r7, #24]
   2ae60:	69fb      	ldr	r3, [r7, #28]
   2ae62:	4313      	orrs	r3, r2
   2ae64:	22a0      	movs	r2, #160	; 0xa0
   2ae66:	05d2      	lsls	r2, r2, #23
   2ae68:	431a      	orrs	r2, r3
   2ae6a:	68fb      	ldr	r3, [r7, #12]
   2ae6c:	629a      	str	r2, [r3, #40]	; 0x28
   2ae6e:	697a      	ldr	r2, [r7, #20]
   2ae70:	69fb      	ldr	r3, [r7, #28]
   2ae72:	4313      	orrs	r3, r2
   2ae74:	22d0      	movs	r2, #208	; 0xd0
   2ae76:	0612      	lsls	r2, r2, #24
   2ae78:	431a      	orrs	r2, r3
   2ae7a:	68fb      	ldr	r3, [r7, #12]
   2ae7c:	629a      	str	r2, [r3, #40]	; 0x28
   2ae7e:	687b      	ldr	r3, [r7, #4]
   2ae80:	78db      	ldrb	r3, [r3, #3]
   2ae82:	2201      	movs	r2, #1
   2ae84:	4053      	eors	r3, r2
   2ae86:	b2db      	uxtb	r3, r3
   2ae88:	2b00      	cmp	r3, #0
   2ae8a:	d01a      	beq.n	2aec2 <_system_pinmux_config+0x102>
   2ae8c:	69fa      	ldr	r2, [r7, #28]
   2ae8e:	2380      	movs	r3, #128	; 0x80
   2ae90:	02db      	lsls	r3, r3, #11
   2ae92:	4013      	ands	r3, r2
   2ae94:	d00a      	beq.n	2aeac <_system_pinmux_config+0xec>
   2ae96:	687b      	ldr	r3, [r7, #4]
   2ae98:	789b      	ldrb	r3, [r3, #2]
   2ae9a:	2b01      	cmp	r3, #1
   2ae9c:	d103      	bne.n	2aea6 <_system_pinmux_config+0xe6>
   2ae9e:	68fb      	ldr	r3, [r7, #12]
   2aea0:	68ba      	ldr	r2, [r7, #8]
   2aea2:	619a      	str	r2, [r3, #24]
   2aea4:	e002      	b.n	2aeac <_system_pinmux_config+0xec>
   2aea6:	68fb      	ldr	r3, [r7, #12]
   2aea8:	68ba      	ldr	r2, [r7, #8]
   2aeaa:	615a      	str	r2, [r3, #20]
   2aeac:	687b      	ldr	r3, [r7, #4]
   2aeae:	785b      	ldrb	r3, [r3, #1]
   2aeb0:	2b01      	cmp	r3, #1
   2aeb2:	d003      	beq.n	2aebc <_system_pinmux_config+0xfc>
   2aeb4:	687b      	ldr	r3, [r7, #4]
   2aeb6:	785b      	ldrb	r3, [r3, #1]
   2aeb8:	2b02      	cmp	r3, #2
   2aeba:	d102      	bne.n	2aec2 <_system_pinmux_config+0x102>
   2aebc:	68fb      	ldr	r3, [r7, #12]
   2aebe:	68ba      	ldr	r2, [r7, #8]
   2aec0:	609a      	str	r2, [r3, #8]
   2aec2:	46c0      	nop			; (mov r8, r8)
   2aec4:	46bd      	mov	sp, r7
   2aec6:	b008      	add	sp, #32
   2aec8:	bd80      	pop	{r7, pc}
   2aeca:	46c0      	nop			; (mov r8, r8)
   2aecc:	fffbffff 	.word	0xfffbffff

0002aed0 <system_pinmux_pin_set_config>:
   2aed0:	b580      	push	{r7, lr}
   2aed2:	b084      	sub	sp, #16
   2aed4:	af00      	add	r7, sp, #0
   2aed6:	0002      	movs	r2, r0
   2aed8:	6039      	str	r1, [r7, #0]
   2aeda:	1dfb      	adds	r3, r7, #7
   2aedc:	701a      	strb	r2, [r3, #0]
   2aede:	1dfb      	adds	r3, r7, #7
   2aee0:	781b      	ldrb	r3, [r3, #0]
   2aee2:	0018      	movs	r0, r3
   2aee4:	4b0a      	ldr	r3, [pc, #40]	; (2af10 <system_pinmux_pin_set_config+0x40>)
   2aee6:	4798      	blx	r3
   2aee8:	0003      	movs	r3, r0
   2aeea:	60fb      	str	r3, [r7, #12]
   2aeec:	1dfb      	adds	r3, r7, #7
   2aeee:	781b      	ldrb	r3, [r3, #0]
   2aef0:	221f      	movs	r2, #31
   2aef2:	4013      	ands	r3, r2
   2aef4:	2201      	movs	r2, #1
   2aef6:	409a      	lsls	r2, r3
   2aef8:	0013      	movs	r3, r2
   2aefa:	60bb      	str	r3, [r7, #8]
   2aefc:	683a      	ldr	r2, [r7, #0]
   2aefe:	68b9      	ldr	r1, [r7, #8]
   2af00:	68fb      	ldr	r3, [r7, #12]
   2af02:	0018      	movs	r0, r3
   2af04:	4b03      	ldr	r3, [pc, #12]	; (2af14 <system_pinmux_pin_set_config+0x44>)
   2af06:	4798      	blx	r3
   2af08:	46c0      	nop			; (mov r8, r8)
   2af0a:	46bd      	mov	sp, r7
   2af0c:	b004      	add	sp, #16
   2af0e:	bd80      	pop	{r7, pc}
   2af10:	0002ad61 	.word	0x0002ad61
   2af14:	0002adc1 	.word	0x0002adc1

0002af18 <_system_dummy_init>:
   2af18:	b580      	push	{r7, lr}
   2af1a:	af00      	add	r7, sp, #0
   2af1c:	46c0      	nop			; (mov r8, r8)
   2af1e:	46bd      	mov	sp, r7
   2af20:	bd80      	pop	{r7, pc}
	...

0002af24 <system_init>:
   2af24:	b580      	push	{r7, lr}
   2af26:	af00      	add	r7, sp, #0
   2af28:	4b06      	ldr	r3, [pc, #24]	; (2af44 <system_init+0x20>)
   2af2a:	4798      	blx	r3
   2af2c:	4b06      	ldr	r3, [pc, #24]	; (2af48 <system_init+0x24>)
   2af2e:	4798      	blx	r3
   2af30:	4b06      	ldr	r3, [pc, #24]	; (2af4c <system_init+0x28>)
   2af32:	4798      	blx	r3
   2af34:	4b06      	ldr	r3, [pc, #24]	; (2af50 <system_init+0x2c>)
   2af36:	4798      	blx	r3
   2af38:	4b06      	ldr	r3, [pc, #24]	; (2af54 <system_init+0x30>)
   2af3a:	4798      	blx	r3
   2af3c:	46c0      	nop			; (mov r8, r8)
   2af3e:	46bd      	mov	sp, r7
   2af40:	bd80      	pop	{r7, pc}
   2af42:	46c0      	nop			; (mov r8, r8)
   2af44:	0002a5a5 	.word	0x0002a5a5
   2af48:	0002706d 	.word	0x0002706d
   2af4c:	000132c1 	.word	0x000132c1
   2af50:	00027445 	.word	0x00027445
   2af54:	0002af19 	.word	0x0002af19

0002af58 <system_gclk_chan_get_config_defaults>:
   2af58:	b580      	push	{r7, lr}
   2af5a:	b082      	sub	sp, #8
   2af5c:	af00      	add	r7, sp, #0
   2af5e:	6078      	str	r0, [r7, #4]
   2af60:	687b      	ldr	r3, [r7, #4]
   2af62:	2200      	movs	r2, #0
   2af64:	701a      	strb	r2, [r3, #0]
   2af66:	46c0      	nop			; (mov r8, r8)
   2af68:	46bd      	mov	sp, r7
   2af6a:	b002      	add	sp, #8
   2af6c:	bd80      	pop	{r7, pc}
	...

0002af70 <system_apb_clock_set_mask>:
   2af70:	b580      	push	{r7, lr}
   2af72:	b082      	sub	sp, #8
   2af74:	af00      	add	r7, sp, #0
   2af76:	0002      	movs	r2, r0
   2af78:	6039      	str	r1, [r7, #0]
   2af7a:	1dfb      	adds	r3, r7, #7
   2af7c:	701a      	strb	r2, [r3, #0]
   2af7e:	1dfb      	adds	r3, r7, #7
   2af80:	781b      	ldrb	r3, [r3, #0]
   2af82:	2b01      	cmp	r3, #1
   2af84:	d00a      	beq.n	2af9c <system_apb_clock_set_mask+0x2c>
   2af86:	2b02      	cmp	r3, #2
   2af88:	d00f      	beq.n	2afaa <system_apb_clock_set_mask+0x3a>
   2af8a:	2b00      	cmp	r3, #0
   2af8c:	d114      	bne.n	2afb8 <system_apb_clock_set_mask+0x48>
   2af8e:	4b0e      	ldr	r3, [pc, #56]	; (2afc8 <system_apb_clock_set_mask+0x58>)
   2af90:	4a0d      	ldr	r2, [pc, #52]	; (2afc8 <system_apb_clock_set_mask+0x58>)
   2af92:	6991      	ldr	r1, [r2, #24]
   2af94:	683a      	ldr	r2, [r7, #0]
   2af96:	430a      	orrs	r2, r1
   2af98:	619a      	str	r2, [r3, #24]
   2af9a:	e00f      	b.n	2afbc <system_apb_clock_set_mask+0x4c>
   2af9c:	4b0a      	ldr	r3, [pc, #40]	; (2afc8 <system_apb_clock_set_mask+0x58>)
   2af9e:	4a0a      	ldr	r2, [pc, #40]	; (2afc8 <system_apb_clock_set_mask+0x58>)
   2afa0:	69d1      	ldr	r1, [r2, #28]
   2afa2:	683a      	ldr	r2, [r7, #0]
   2afa4:	430a      	orrs	r2, r1
   2afa6:	61da      	str	r2, [r3, #28]
   2afa8:	e008      	b.n	2afbc <system_apb_clock_set_mask+0x4c>
   2afaa:	4b07      	ldr	r3, [pc, #28]	; (2afc8 <system_apb_clock_set_mask+0x58>)
   2afac:	4a06      	ldr	r2, [pc, #24]	; (2afc8 <system_apb_clock_set_mask+0x58>)
   2afae:	6a11      	ldr	r1, [r2, #32]
   2afb0:	683a      	ldr	r2, [r7, #0]
   2afb2:	430a      	orrs	r2, r1
   2afb4:	621a      	str	r2, [r3, #32]
   2afb6:	e001      	b.n	2afbc <system_apb_clock_set_mask+0x4c>
   2afb8:	2317      	movs	r3, #23
   2afba:	e000      	b.n	2afbe <system_apb_clock_set_mask+0x4e>
   2afbc:	2300      	movs	r3, #0
   2afbe:	0018      	movs	r0, r3
   2afc0:	46bd      	mov	sp, r7
   2afc2:	b002      	add	sp, #8
   2afc4:	bd80      	pop	{r7, pc}
   2afc6:	46c0      	nop			; (mov r8, r8)
   2afc8:	40000400 	.word	0x40000400

0002afcc <system_pinmux_get_config_defaults>:
   2afcc:	b580      	push	{r7, lr}
   2afce:	b082      	sub	sp, #8
   2afd0:	af00      	add	r7, sp, #0
   2afd2:	6078      	str	r0, [r7, #4]
   2afd4:	687b      	ldr	r3, [r7, #4]
   2afd6:	2280      	movs	r2, #128	; 0x80
   2afd8:	701a      	strb	r2, [r3, #0]
   2afda:	687b      	ldr	r3, [r7, #4]
   2afdc:	2200      	movs	r2, #0
   2afde:	705a      	strb	r2, [r3, #1]
   2afe0:	687b      	ldr	r3, [r7, #4]
   2afe2:	2201      	movs	r2, #1
   2afe4:	709a      	strb	r2, [r3, #2]
   2afe6:	687b      	ldr	r3, [r7, #4]
   2afe8:	2200      	movs	r2, #0
   2afea:	70da      	strb	r2, [r3, #3]
   2afec:	46c0      	nop			; (mov r8, r8)
   2afee:	46bd      	mov	sp, r7
   2aff0:	b002      	add	sp, #8
   2aff2:	bd80      	pop	{r7, pc}

0002aff4 <_tcc_get_inst_index>:
   2aff4:	b580      	push	{r7, lr}
   2aff6:	b084      	sub	sp, #16
   2aff8:	af00      	add	r7, sp, #0
   2affa:	6078      	str	r0, [r7, #4]
   2affc:	2300      	movs	r3, #0
   2affe:	60fb      	str	r3, [r7, #12]
   2b000:	e00c      	b.n	2b01c <_tcc_get_inst_index+0x28>
   2b002:	4b0a      	ldr	r3, [pc, #40]	; (2b02c <_tcc_get_inst_index+0x38>)
   2b004:	68fa      	ldr	r2, [r7, #12]
   2b006:	0092      	lsls	r2, r2, #2
   2b008:	58d2      	ldr	r2, [r2, r3]
   2b00a:	687b      	ldr	r3, [r7, #4]
   2b00c:	429a      	cmp	r2, r3
   2b00e:	d102      	bne.n	2b016 <_tcc_get_inst_index+0x22>
   2b010:	68fb      	ldr	r3, [r7, #12]
   2b012:	b2db      	uxtb	r3, r3
   2b014:	e006      	b.n	2b024 <_tcc_get_inst_index+0x30>
   2b016:	68fb      	ldr	r3, [r7, #12]
   2b018:	3301      	adds	r3, #1
   2b01a:	60fb      	str	r3, [r7, #12]
   2b01c:	68fb      	ldr	r3, [r7, #12]
   2b01e:	2b02      	cmp	r3, #2
   2b020:	d9ef      	bls.n	2b002 <_tcc_get_inst_index+0xe>
   2b022:	2300      	movs	r3, #0
   2b024:	0018      	movs	r0, r3
   2b026:	46bd      	mov	sp, r7
   2b028:	b004      	add	sp, #16
   2b02a:	bd80      	pop	{r7, pc}
   2b02c:	0003a2e0 	.word	0x0003a2e0

0002b030 <tcc_get_config_defaults>:
   2b030:	b590      	push	{r4, r7, lr}
   2b032:	b085      	sub	sp, #20
   2b034:	af00      	add	r7, sp, #0
   2b036:	6078      	str	r0, [r7, #4]
   2b038:	6039      	str	r1, [r7, #0]
   2b03a:	230f      	movs	r3, #15
   2b03c:	18fc      	adds	r4, r7, r3
   2b03e:	683b      	ldr	r3, [r7, #0]
   2b040:	0018      	movs	r0, r3
   2b042:	4bad      	ldr	r3, [pc, #692]	; (2b2f8 <tcc_get_config_defaults+0x2c8>)
   2b044:	4798      	blx	r3
   2b046:	0003      	movs	r3, r0
   2b048:	7023      	strb	r3, [r4, #0]
   2b04a:	687b      	ldr	r3, [r7, #4]
   2b04c:	2200      	movs	r2, #0
   2b04e:	601a      	str	r2, [r3, #0]
   2b050:	230f      	movs	r3, #15
   2b052:	18fb      	adds	r3, r7, r3
   2b054:	781a      	ldrb	r2, [r3, #0]
   2b056:	4ba9      	ldr	r3, [pc, #676]	; (2b2fc <tcc_get_config_defaults+0x2cc>)
   2b058:	0092      	lsls	r2, r2, #2
   2b05a:	58d2      	ldr	r2, [r2, r3]
   2b05c:	687b      	ldr	r3, [r7, #4]
   2b05e:	605a      	str	r2, [r3, #4]
   2b060:	687b      	ldr	r3, [r7, #4]
   2b062:	2200      	movs	r2, #0
   2b064:	729a      	strb	r2, [r3, #10]
   2b066:	687b      	ldr	r3, [r7, #4]
   2b068:	2200      	movs	r2, #0
   2b06a:	72da      	strb	r2, [r3, #11]
   2b06c:	687b      	ldr	r3, [r7, #4]
   2b06e:	2200      	movs	r2, #0
   2b070:	731a      	strb	r2, [r3, #12]
   2b072:	687b      	ldr	r3, [r7, #4]
   2b074:	2200      	movs	r2, #0
   2b076:	725a      	strb	r2, [r3, #9]
   2b078:	687b      	ldr	r3, [r7, #4]
   2b07a:	2200      	movs	r2, #0
   2b07c:	721a      	strb	r2, [r3, #8]
   2b07e:	687b      	ldr	r3, [r7, #4]
   2b080:	2200      	movs	r2, #0
   2b082:	61da      	str	r2, [r3, #28]
   2b084:	687b      	ldr	r3, [r7, #4]
   2b086:	2200      	movs	r2, #0
   2b088:	621a      	str	r2, [r3, #32]
   2b08a:	687b      	ldr	r3, [r7, #4]
   2b08c:	2200      	movs	r2, #0
   2b08e:	625a      	str	r2, [r3, #36]	; 0x24
   2b090:	687b      	ldr	r3, [r7, #4]
   2b092:	2200      	movs	r2, #0
   2b094:	629a      	str	r2, [r3, #40]	; 0x28
   2b096:	687b      	ldr	r3, [r7, #4]
   2b098:	2200      	movs	r2, #0
   2b09a:	751a      	strb	r2, [r3, #20]
   2b09c:	687b      	ldr	r3, [r7, #4]
   2b09e:	2200      	movs	r2, #0
   2b0a0:	755a      	strb	r2, [r3, #21]
   2b0a2:	687b      	ldr	r3, [r7, #4]
   2b0a4:	2200      	movs	r2, #0
   2b0a6:	759a      	strb	r2, [r3, #22]
   2b0a8:	687b      	ldr	r3, [r7, #4]
   2b0aa:	2200      	movs	r2, #0
   2b0ac:	75da      	strb	r2, [r3, #23]
   2b0ae:	687b      	ldr	r3, [r7, #4]
   2b0b0:	2200      	movs	r2, #0
   2b0b2:	761a      	strb	r2, [r3, #24]
   2b0b4:	687b      	ldr	r3, [r7, #4]
   2b0b6:	2200      	movs	r2, #0
   2b0b8:	765a      	strb	r2, [r3, #25]
   2b0ba:	687b      	ldr	r3, [r7, #4]
   2b0bc:	2200      	movs	r2, #0
   2b0be:	741a      	strb	r2, [r3, #16]
   2b0c0:	687b      	ldr	r3, [r7, #4]
   2b0c2:	2200      	movs	r2, #0
   2b0c4:	745a      	strb	r2, [r3, #17]
   2b0c6:	687b      	ldr	r3, [r7, #4]
   2b0c8:	2200      	movs	r2, #0
   2b0ca:	749a      	strb	r2, [r3, #18]
   2b0cc:	687b      	ldr	r3, [r7, #4]
   2b0ce:	2200      	movs	r2, #0
   2b0d0:	74da      	strb	r2, [r3, #19]
   2b0d2:	687b      	ldr	r3, [r7, #4]
   2b0d4:	222c      	movs	r2, #44	; 0x2c
   2b0d6:	2100      	movs	r1, #0
   2b0d8:	5499      	strb	r1, [r3, r2]
   2b0da:	687b      	ldr	r3, [r7, #4]
   2b0dc:	222d      	movs	r2, #45	; 0x2d
   2b0de:	2100      	movs	r1, #0
   2b0e0:	5499      	strb	r1, [r3, r2]
   2b0e2:	687b      	ldr	r3, [r7, #4]
   2b0e4:	222e      	movs	r2, #46	; 0x2e
   2b0e6:	2100      	movs	r1, #0
   2b0e8:	5499      	strb	r1, [r3, r2]
   2b0ea:	687b      	ldr	r3, [r7, #4]
   2b0ec:	222f      	movs	r2, #47	; 0x2f
   2b0ee:	2100      	movs	r1, #0
   2b0f0:	5499      	strb	r1, [r3, r2]
   2b0f2:	687b      	ldr	r3, [r7, #4]
   2b0f4:	2230      	movs	r2, #48	; 0x30
   2b0f6:	2100      	movs	r1, #0
   2b0f8:	5499      	strb	r1, [r3, r2]
   2b0fa:	687b      	ldr	r3, [r7, #4]
   2b0fc:	2231      	movs	r2, #49	; 0x31
   2b0fe:	2100      	movs	r1, #0
   2b100:	5499      	strb	r1, [r3, r2]
   2b102:	687b      	ldr	r3, [r7, #4]
   2b104:	2232      	movs	r2, #50	; 0x32
   2b106:	2100      	movs	r1, #0
   2b108:	5499      	strb	r1, [r3, r2]
   2b10a:	687b      	ldr	r3, [r7, #4]
   2b10c:	2233      	movs	r2, #51	; 0x33
   2b10e:	2100      	movs	r1, #0
   2b110:	5499      	strb	r1, [r3, r2]
   2b112:	687b      	ldr	r3, [r7, #4]
   2b114:	2234      	movs	r2, #52	; 0x34
   2b116:	2100      	movs	r1, #0
   2b118:	5499      	strb	r1, [r3, r2]
   2b11a:	687b      	ldr	r3, [r7, #4]
   2b11c:	2235      	movs	r2, #53	; 0x35
   2b11e:	2100      	movs	r1, #0
   2b120:	5499      	strb	r1, [r3, r2]
   2b122:	687b      	ldr	r3, [r7, #4]
   2b124:	2236      	movs	r2, #54	; 0x36
   2b126:	2100      	movs	r1, #0
   2b128:	5499      	strb	r1, [r3, r2]
   2b12a:	687b      	ldr	r3, [r7, #4]
   2b12c:	2237      	movs	r2, #55	; 0x37
   2b12e:	2100      	movs	r1, #0
   2b130:	5499      	strb	r1, [r3, r2]
   2b132:	687b      	ldr	r3, [r7, #4]
   2b134:	2238      	movs	r2, #56	; 0x38
   2b136:	2100      	movs	r1, #0
   2b138:	5499      	strb	r1, [r3, r2]
   2b13a:	687b      	ldr	r3, [r7, #4]
   2b13c:	2239      	movs	r2, #57	; 0x39
   2b13e:	2100      	movs	r1, #0
   2b140:	5499      	strb	r1, [r3, r2]
   2b142:	687b      	ldr	r3, [r7, #4]
   2b144:	223a      	movs	r2, #58	; 0x3a
   2b146:	2100      	movs	r1, #0
   2b148:	5499      	strb	r1, [r3, r2]
   2b14a:	687b      	ldr	r3, [r7, #4]
   2b14c:	223b      	movs	r2, #59	; 0x3b
   2b14e:	2100      	movs	r1, #0
   2b150:	5499      	strb	r1, [r3, r2]
   2b152:	687b      	ldr	r3, [r7, #4]
   2b154:	223c      	movs	r2, #60	; 0x3c
   2b156:	2100      	movs	r1, #0
   2b158:	5499      	strb	r1, [r3, r2]
   2b15a:	687b      	ldr	r3, [r7, #4]
   2b15c:	223d      	movs	r2, #61	; 0x3d
   2b15e:	2100      	movs	r1, #0
   2b160:	5499      	strb	r1, [r3, r2]
   2b162:	687b      	ldr	r3, [r7, #4]
   2b164:	223e      	movs	r2, #62	; 0x3e
   2b166:	2100      	movs	r1, #0
   2b168:	5499      	strb	r1, [r3, r2]
   2b16a:	687b      	ldr	r3, [r7, #4]
   2b16c:	223f      	movs	r2, #63	; 0x3f
   2b16e:	2100      	movs	r1, #0
   2b170:	5499      	strb	r1, [r3, r2]
   2b172:	687b      	ldr	r3, [r7, #4]
   2b174:	2240      	movs	r2, #64	; 0x40
   2b176:	2100      	movs	r1, #0
   2b178:	5499      	strb	r1, [r3, r2]
   2b17a:	687b      	ldr	r3, [r7, #4]
   2b17c:	2241      	movs	r2, #65	; 0x41
   2b17e:	2100      	movs	r1, #0
   2b180:	5499      	strb	r1, [r3, r2]
   2b182:	687b      	ldr	r3, [r7, #4]
   2b184:	2242      	movs	r2, #66	; 0x42
   2b186:	2100      	movs	r1, #0
   2b188:	5499      	strb	r1, [r3, r2]
   2b18a:	687b      	ldr	r3, [r7, #4]
   2b18c:	2243      	movs	r2, #67	; 0x43
   2b18e:	2100      	movs	r1, #0
   2b190:	5499      	strb	r1, [r3, r2]
   2b192:	687b      	ldr	r3, [r7, #4]
   2b194:	2244      	movs	r2, #68	; 0x44
   2b196:	2100      	movs	r1, #0
   2b198:	5499      	strb	r1, [r3, r2]
   2b19a:	687b      	ldr	r3, [r7, #4]
   2b19c:	2245      	movs	r2, #69	; 0x45
   2b19e:	2100      	movs	r1, #0
   2b1a0:	5499      	strb	r1, [r3, r2]
   2b1a2:	687b      	ldr	r3, [r7, #4]
   2b1a4:	2246      	movs	r2, #70	; 0x46
   2b1a6:	2100      	movs	r1, #0
   2b1a8:	5499      	strb	r1, [r3, r2]
   2b1aa:	687b      	ldr	r3, [r7, #4]
   2b1ac:	2247      	movs	r2, #71	; 0x47
   2b1ae:	2100      	movs	r1, #0
   2b1b0:	5499      	strb	r1, [r3, r2]
   2b1b2:	687b      	ldr	r3, [r7, #4]
   2b1b4:	2248      	movs	r2, #72	; 0x48
   2b1b6:	2100      	movs	r1, #0
   2b1b8:	5499      	strb	r1, [r3, r2]
   2b1ba:	687b      	ldr	r3, [r7, #4]
   2b1bc:	2249      	movs	r2, #73	; 0x49
   2b1be:	2100      	movs	r1, #0
   2b1c0:	5499      	strb	r1, [r3, r2]
   2b1c2:	687b      	ldr	r3, [r7, #4]
   2b1c4:	224a      	movs	r2, #74	; 0x4a
   2b1c6:	2100      	movs	r1, #0
   2b1c8:	5499      	strb	r1, [r3, r2]
   2b1ca:	687b      	ldr	r3, [r7, #4]
   2b1cc:	224b      	movs	r2, #75	; 0x4b
   2b1ce:	2100      	movs	r1, #0
   2b1d0:	5499      	strb	r1, [r3, r2]
   2b1d2:	687b      	ldr	r3, [r7, #4]
   2b1d4:	224c      	movs	r2, #76	; 0x4c
   2b1d6:	2100      	movs	r1, #0
   2b1d8:	5499      	strb	r1, [r3, r2]
   2b1da:	687b      	ldr	r3, [r7, #4]
   2b1dc:	224d      	movs	r2, #77	; 0x4d
   2b1de:	2100      	movs	r1, #0
   2b1e0:	5499      	strb	r1, [r3, r2]
   2b1e2:	687b      	ldr	r3, [r7, #4]
   2b1e4:	224e      	movs	r2, #78	; 0x4e
   2b1e6:	2100      	movs	r1, #0
   2b1e8:	5499      	strb	r1, [r3, r2]
   2b1ea:	687b      	ldr	r3, [r7, #4]
   2b1ec:	224f      	movs	r2, #79	; 0x4f
   2b1ee:	2100      	movs	r1, #0
   2b1f0:	5499      	strb	r1, [r3, r2]
   2b1f2:	687b      	ldr	r3, [r7, #4]
   2b1f4:	2250      	movs	r2, #80	; 0x50
   2b1f6:	2100      	movs	r1, #0
   2b1f8:	5499      	strb	r1, [r3, r2]
   2b1fa:	687b      	ldr	r3, [r7, #4]
   2b1fc:	2251      	movs	r2, #81	; 0x51
   2b1fe:	2100      	movs	r1, #0
   2b200:	5499      	strb	r1, [r3, r2]
   2b202:	687b      	ldr	r3, [r7, #4]
   2b204:	2252      	movs	r2, #82	; 0x52
   2b206:	2100      	movs	r1, #0
   2b208:	5499      	strb	r1, [r3, r2]
   2b20a:	687b      	ldr	r3, [r7, #4]
   2b20c:	2253      	movs	r2, #83	; 0x53
   2b20e:	2100      	movs	r1, #0
   2b210:	5499      	strb	r1, [r3, r2]
   2b212:	687b      	ldr	r3, [r7, #4]
   2b214:	2254      	movs	r2, #84	; 0x54
   2b216:	2100      	movs	r1, #0
   2b218:	5499      	strb	r1, [r3, r2]
   2b21a:	687b      	ldr	r3, [r7, #4]
   2b21c:	2255      	movs	r2, #85	; 0x55
   2b21e:	2100      	movs	r1, #0
   2b220:	5499      	strb	r1, [r3, r2]
   2b222:	687b      	ldr	r3, [r7, #4]
   2b224:	2256      	movs	r2, #86	; 0x56
   2b226:	2100      	movs	r1, #0
   2b228:	5499      	strb	r1, [r3, r2]
   2b22a:	687b      	ldr	r3, [r7, #4]
   2b22c:	2257      	movs	r2, #87	; 0x57
   2b22e:	2100      	movs	r1, #0
   2b230:	5499      	strb	r1, [r3, r2]
   2b232:	687b      	ldr	r3, [r7, #4]
   2b234:	2298      	movs	r2, #152	; 0x98
   2b236:	2100      	movs	r1, #0
   2b238:	5499      	strb	r1, [r3, r2]
   2b23a:	687b      	ldr	r3, [r7, #4]
   2b23c:	2200      	movs	r2, #0
   2b23e:	659a      	str	r2, [r3, #88]	; 0x58
   2b240:	687b      	ldr	r3, [r7, #4]
   2b242:	2200      	movs	r2, #0
   2b244:	679a      	str	r2, [r3, #120]	; 0x78
   2b246:	687b      	ldr	r3, [r7, #4]
   2b248:	2299      	movs	r2, #153	; 0x99
   2b24a:	2100      	movs	r1, #0
   2b24c:	5499      	strb	r1, [r3, r2]
   2b24e:	687b      	ldr	r3, [r7, #4]
   2b250:	2200      	movs	r2, #0
   2b252:	65da      	str	r2, [r3, #92]	; 0x5c
   2b254:	687b      	ldr	r3, [r7, #4]
   2b256:	2200      	movs	r2, #0
   2b258:	67da      	str	r2, [r3, #124]	; 0x7c
   2b25a:	687b      	ldr	r3, [r7, #4]
   2b25c:	229a      	movs	r2, #154	; 0x9a
   2b25e:	2100      	movs	r1, #0
   2b260:	5499      	strb	r1, [r3, r2]
   2b262:	687b      	ldr	r3, [r7, #4]
   2b264:	2200      	movs	r2, #0
   2b266:	661a      	str	r2, [r3, #96]	; 0x60
   2b268:	687b      	ldr	r3, [r7, #4]
   2b26a:	2280      	movs	r2, #128	; 0x80
   2b26c:	2100      	movs	r1, #0
   2b26e:	5099      	str	r1, [r3, r2]
   2b270:	687b      	ldr	r3, [r7, #4]
   2b272:	229b      	movs	r2, #155	; 0x9b
   2b274:	2100      	movs	r1, #0
   2b276:	5499      	strb	r1, [r3, r2]
   2b278:	687b      	ldr	r3, [r7, #4]
   2b27a:	2200      	movs	r2, #0
   2b27c:	665a      	str	r2, [r3, #100]	; 0x64
   2b27e:	687b      	ldr	r3, [r7, #4]
   2b280:	2284      	movs	r2, #132	; 0x84
   2b282:	2100      	movs	r1, #0
   2b284:	5099      	str	r1, [r3, r2]
   2b286:	687b      	ldr	r3, [r7, #4]
   2b288:	229c      	movs	r2, #156	; 0x9c
   2b28a:	2100      	movs	r1, #0
   2b28c:	5499      	strb	r1, [r3, r2]
   2b28e:	687b      	ldr	r3, [r7, #4]
   2b290:	2200      	movs	r2, #0
   2b292:	669a      	str	r2, [r3, #104]	; 0x68
   2b294:	687b      	ldr	r3, [r7, #4]
   2b296:	2288      	movs	r2, #136	; 0x88
   2b298:	2100      	movs	r1, #0
   2b29a:	5099      	str	r1, [r3, r2]
   2b29c:	687b      	ldr	r3, [r7, #4]
   2b29e:	229d      	movs	r2, #157	; 0x9d
   2b2a0:	2100      	movs	r1, #0
   2b2a2:	5499      	strb	r1, [r3, r2]
   2b2a4:	687b      	ldr	r3, [r7, #4]
   2b2a6:	2200      	movs	r2, #0
   2b2a8:	66da      	str	r2, [r3, #108]	; 0x6c
   2b2aa:	687b      	ldr	r3, [r7, #4]
   2b2ac:	228c      	movs	r2, #140	; 0x8c
   2b2ae:	2100      	movs	r1, #0
   2b2b0:	5099      	str	r1, [r3, r2]
   2b2b2:	687b      	ldr	r3, [r7, #4]
   2b2b4:	229e      	movs	r2, #158	; 0x9e
   2b2b6:	2100      	movs	r1, #0
   2b2b8:	5499      	strb	r1, [r3, r2]
   2b2ba:	687b      	ldr	r3, [r7, #4]
   2b2bc:	2200      	movs	r2, #0
   2b2be:	671a      	str	r2, [r3, #112]	; 0x70
   2b2c0:	687b      	ldr	r3, [r7, #4]
   2b2c2:	2290      	movs	r2, #144	; 0x90
   2b2c4:	2100      	movs	r1, #0
   2b2c6:	5099      	str	r1, [r3, r2]
   2b2c8:	687b      	ldr	r3, [r7, #4]
   2b2ca:	229f      	movs	r2, #159	; 0x9f
   2b2cc:	2100      	movs	r1, #0
   2b2ce:	5499      	strb	r1, [r3, r2]
   2b2d0:	687b      	ldr	r3, [r7, #4]
   2b2d2:	2200      	movs	r2, #0
   2b2d4:	675a      	str	r2, [r3, #116]	; 0x74
   2b2d6:	687b      	ldr	r3, [r7, #4]
   2b2d8:	2294      	movs	r2, #148	; 0x94
   2b2da:	2100      	movs	r1, #0
   2b2dc:	5099      	str	r1, [r3, r2]
   2b2de:	687b      	ldr	r3, [r7, #4]
   2b2e0:	22a0      	movs	r2, #160	; 0xa0
   2b2e2:	2101      	movs	r1, #1
   2b2e4:	5499      	strb	r1, [r3, r2]
   2b2e6:	687b      	ldr	r3, [r7, #4]
   2b2e8:	22a1      	movs	r2, #161	; 0xa1
   2b2ea:	2100      	movs	r1, #0
   2b2ec:	5499      	strb	r1, [r3, r2]
   2b2ee:	46c0      	nop			; (mov r8, r8)
   2b2f0:	46bd      	mov	sp, r7
   2b2f2:	b005      	add	sp, #20
   2b2f4:	bd90      	pop	{r4, r7, pc}
   2b2f6:	46c0      	nop			; (mov r8, r8)
   2b2f8:	0002aff5 	.word	0x0002aff5
   2b2fc:	0003a2fc 	.word	0x0003a2fc

0002b300 <_tcc_build_ctrla>:
   2b300:	b580      	push	{r7, lr}
   2b302:	b086      	sub	sp, #24
   2b304:	af00      	add	r7, sp, #0
   2b306:	60b9      	str	r1, [r7, #8]
   2b308:	607a      	str	r2, [r7, #4]
   2b30a:	230f      	movs	r3, #15
   2b30c:	18fb      	adds	r3, r7, r3
   2b30e:	1c02      	adds	r2, r0, #0
   2b310:	701a      	strb	r2, [r3, #0]
   2b312:	2300      	movs	r3, #0
   2b314:	617b      	str	r3, [r7, #20]
   2b316:	2300      	movs	r3, #0
   2b318:	613b      	str	r3, [r7, #16]
   2b31a:	e01d      	b.n	2b358 <_tcc_build_ctrla+0x58>
   2b31c:	68ba      	ldr	r2, [r7, #8]
   2b31e:	693b      	ldr	r3, [r7, #16]
   2b320:	18d3      	adds	r3, r2, r3
   2b322:	3310      	adds	r3, #16
   2b324:	781b      	ldrb	r3, [r3, #0]
   2b326:	2b01      	cmp	r3, #1
   2b328:	d113      	bne.n	2b352 <_tcc_build_ctrla+0x52>
   2b32a:	230f      	movs	r3, #15
   2b32c:	18fb      	adds	r3, r7, r3
   2b32e:	781b      	ldrb	r3, [r3, #0]
   2b330:	4a1b      	ldr	r2, [pc, #108]	; (2b3a0 <_tcc_build_ctrla+0xa0>)
   2b332:	5cd3      	ldrb	r3, [r2, r3]
   2b334:	001a      	movs	r2, r3
   2b336:	693b      	ldr	r3, [r7, #16]
   2b338:	429a      	cmp	r2, r3
   2b33a:	da01      	bge.n	2b340 <_tcc_build_ctrla+0x40>
   2b33c:	2317      	movs	r3, #23
   2b33e:	e02a      	b.n	2b396 <_tcc_build_ctrla+0x96>
   2b340:	2380      	movs	r3, #128	; 0x80
   2b342:	045a      	lsls	r2, r3, #17
   2b344:	693b      	ldr	r3, [r7, #16]
   2b346:	409a      	lsls	r2, r3
   2b348:	0013      	movs	r3, r2
   2b34a:	001a      	movs	r2, r3
   2b34c:	697b      	ldr	r3, [r7, #20]
   2b34e:	4313      	orrs	r3, r2
   2b350:	617b      	str	r3, [r7, #20]
   2b352:	693b      	ldr	r3, [r7, #16]
   2b354:	3301      	adds	r3, #1
   2b356:	613b      	str	r3, [r7, #16]
   2b358:	693b      	ldr	r3, [r7, #16]
   2b35a:	2b03      	cmp	r3, #3
   2b35c:	ddde      	ble.n	2b31c <_tcc_build_ctrla+0x1c>
   2b35e:	68bb      	ldr	r3, [r7, #8]
   2b360:	22a1      	movs	r2, #161	; 0xa1
   2b362:	5c9b      	ldrb	r3, [r3, r2]
   2b364:	2b00      	cmp	r3, #0
   2b366:	d004      	beq.n	2b372 <_tcc_build_ctrla+0x72>
   2b368:	697b      	ldr	r3, [r7, #20]
   2b36a:	2280      	movs	r2, #128	; 0x80
   2b36c:	0112      	lsls	r2, r2, #4
   2b36e:	4313      	orrs	r3, r2
   2b370:	617b      	str	r3, [r7, #20]
   2b372:	68bb      	ldr	r3, [r7, #8]
   2b374:	7b1b      	ldrb	r3, [r3, #12]
   2b376:	031b      	lsls	r3, r3, #12
   2b378:	001a      	movs	r2, r3
   2b37a:	697b      	ldr	r3, [r7, #20]
   2b37c:	4313      	orrs	r3, r2
   2b37e:	617b      	str	r3, [r7, #20]
   2b380:	68bb      	ldr	r3, [r7, #8]
   2b382:	7adb      	ldrb	r3, [r3, #11]
   2b384:	021b      	lsls	r3, r3, #8
   2b386:	001a      	movs	r2, r3
   2b388:	697b      	ldr	r3, [r7, #20]
   2b38a:	4313      	orrs	r3, r2
   2b38c:	617b      	str	r3, [r7, #20]
   2b38e:	687b      	ldr	r3, [r7, #4]
   2b390:	697a      	ldr	r2, [r7, #20]
   2b392:	601a      	str	r2, [r3, #0]
   2b394:	2300      	movs	r3, #0
   2b396:	0018      	movs	r0, r3
   2b398:	46bd      	mov	sp, r7
   2b39a:	b006      	add	sp, #24
   2b39c:	bd80      	pop	{r7, pc}
   2b39e:	46c0      	nop			; (mov r8, r8)
   2b3a0:	0003a308 	.word	0x0003a308

0002b3a4 <_tcc_build_ctrlb>:
   2b3a4:	b580      	push	{r7, lr}
   2b3a6:	b086      	sub	sp, #24
   2b3a8:	af00      	add	r7, sp, #0
   2b3aa:	60b9      	str	r1, [r7, #8]
   2b3ac:	607a      	str	r2, [r7, #4]
   2b3ae:	230f      	movs	r3, #15
   2b3b0:	18fb      	adds	r3, r7, r3
   2b3b2:	1c02      	adds	r2, r0, #0
   2b3b4:	701a      	strb	r2, [r3, #0]
   2b3b6:	2317      	movs	r3, #23
   2b3b8:	18fb      	adds	r3, r7, r3
   2b3ba:	2200      	movs	r2, #0
   2b3bc:	701a      	strb	r2, [r3, #0]
   2b3be:	68bb      	ldr	r3, [r7, #8]
   2b3c0:	7a1b      	ldrb	r3, [r3, #8]
   2b3c2:	2b00      	cmp	r3, #0
   2b3c4:	d007      	beq.n	2b3d6 <_tcc_build_ctrlb+0x32>
   2b3c6:	2317      	movs	r3, #23
   2b3c8:	18fb      	adds	r3, r7, r3
   2b3ca:	2217      	movs	r2, #23
   2b3cc:	18ba      	adds	r2, r7, r2
   2b3ce:	7812      	ldrb	r2, [r2, #0]
   2b3d0:	2104      	movs	r1, #4
   2b3d2:	430a      	orrs	r2, r1
   2b3d4:	701a      	strb	r2, [r3, #0]
   2b3d6:	68bb      	ldr	r3, [r7, #8]
   2b3d8:	7a5b      	ldrb	r3, [r3, #9]
   2b3da:	2b01      	cmp	r3, #1
   2b3dc:	d107      	bne.n	2b3ee <_tcc_build_ctrlb+0x4a>
   2b3de:	2317      	movs	r3, #23
   2b3e0:	18fb      	adds	r3, r7, r3
   2b3e2:	2217      	movs	r2, #23
   2b3e4:	18ba      	adds	r2, r7, r2
   2b3e6:	7812      	ldrb	r2, [r2, #0]
   2b3e8:	2101      	movs	r1, #1
   2b3ea:	430a      	orrs	r2, r1
   2b3ec:	701a      	strb	r2, [r3, #0]
   2b3ee:	687b      	ldr	r3, [r7, #4]
   2b3f0:	2217      	movs	r2, #23
   2b3f2:	18ba      	adds	r2, r7, r2
   2b3f4:	7812      	ldrb	r2, [r2, #0]
   2b3f6:	701a      	strb	r2, [r3, #0]
   2b3f8:	46c0      	nop			; (mov r8, r8)
   2b3fa:	46bd      	mov	sp, r7
   2b3fc:	b006      	add	sp, #24
   2b3fe:	bd80      	pop	{r7, pc}

0002b400 <_tcc_build_faults>:
   2b400:	b580      	push	{r7, lr}
   2b402:	b088      	sub	sp, #32
   2b404:	af00      	add	r7, sp, #0
   2b406:	60b9      	str	r1, [r7, #8]
   2b408:	607a      	str	r2, [r7, #4]
   2b40a:	230f      	movs	r3, #15
   2b40c:	18fb      	adds	r3, r7, r3
   2b40e:	1c02      	adds	r2, r0, #0
   2b410:	701a      	strb	r2, [r3, #0]
   2b412:	230f      	movs	r3, #15
   2b414:	18fb      	adds	r3, r7, r3
   2b416:	781a      	ldrb	r2, [r3, #0]
   2b418:	231b      	movs	r3, #27
   2b41a:	18fb      	adds	r3, r7, r3
   2b41c:	493e      	ldr	r1, [pc, #248]	; (2b518 <_tcc_build_faults+0x118>)
   2b41e:	5c8a      	ldrb	r2, [r1, r2]
   2b420:	701a      	strb	r2, [r3, #0]
   2b422:	2300      	movs	r3, #0
   2b424:	61fb      	str	r3, [r7, #28]
   2b426:	e06e      	b.n	2b506 <_tcc_build_faults+0x106>
   2b428:	69fa      	ldr	r2, [r7, #28]
   2b42a:	0013      	movs	r3, r2
   2b42c:	009b      	lsls	r3, r3, #2
   2b42e:	189b      	adds	r3, r3, r2
   2b430:	005b      	lsls	r3, r3, #1
   2b432:	3328      	adds	r3, #40	; 0x28
   2b434:	68ba      	ldr	r2, [r7, #8]
   2b436:	18d3      	adds	r3, r2, r3
   2b438:	3304      	adds	r3, #4
   2b43a:	617b      	str	r3, [r7, #20]
   2b43c:	697b      	ldr	r3, [r7, #20]
   2b43e:	7a5b      	ldrb	r3, [r3, #9]
   2b440:	221b      	movs	r2, #27
   2b442:	18ba      	adds	r2, r7, r2
   2b444:	7812      	ldrb	r2, [r2, #0]
   2b446:	429a      	cmp	r2, r3
   2b448:	d801      	bhi.n	2b44e <_tcc_build_faults+0x4e>
   2b44a:	2317      	movs	r3, #23
   2b44c:	e05f      	b.n	2b50e <_tcc_build_faults+0x10e>
   2b44e:	697b      	ldr	r3, [r7, #20]
   2b450:	781b      	ldrb	r3, [r3, #0]
   2b452:	2b0f      	cmp	r3, #15
   2b454:	d901      	bls.n	2b45a <_tcc_build_faults+0x5a>
   2b456:	2317      	movs	r3, #23
   2b458:	e059      	b.n	2b50e <_tcc_build_faults+0x10e>
   2b45a:	697b      	ldr	r3, [r7, #20]
   2b45c:	781b      	ldrb	r3, [r3, #0]
   2b45e:	061b      	lsls	r3, r3, #24
   2b460:	001a      	movs	r2, r3
   2b462:	23f0      	movs	r3, #240	; 0xf0
   2b464:	051b      	lsls	r3, r3, #20
   2b466:	401a      	ands	r2, r3
   2b468:	697b      	ldr	r3, [r7, #20]
   2b46a:	785b      	ldrb	r3, [r3, #1]
   2b46c:	041b      	lsls	r3, r3, #16
   2b46e:	0019      	movs	r1, r3
   2b470:	23ff      	movs	r3, #255	; 0xff
   2b472:	041b      	lsls	r3, r3, #16
   2b474:	400b      	ands	r3, r1
   2b476:	431a      	orrs	r2, r3
   2b478:	697b      	ldr	r3, [r7, #20]
   2b47a:	789b      	ldrb	r3, [r3, #2]
   2b47c:	2b00      	cmp	r3, #0
   2b47e:	d001      	beq.n	2b484 <_tcc_build_faults+0x84>
   2b480:	2380      	movs	r3, #128	; 0x80
   2b482:	e000      	b.n	2b486 <_tcc_build_faults+0x86>
   2b484:	2300      	movs	r3, #0
   2b486:	431a      	orrs	r2, r3
   2b488:	697b      	ldr	r3, [r7, #20]
   2b48a:	78db      	ldrb	r3, [r3, #3]
   2b48c:	2b00      	cmp	r3, #0
   2b48e:	d001      	beq.n	2b494 <_tcc_build_faults+0x94>
   2b490:	2308      	movs	r3, #8
   2b492:	e000      	b.n	2b496 <_tcc_build_faults+0x96>
   2b494:	2300      	movs	r3, #0
   2b496:	431a      	orrs	r2, r3
   2b498:	697b      	ldr	r3, [r7, #20]
   2b49a:	791b      	ldrb	r3, [r3, #4]
   2b49c:	2b00      	cmp	r3, #0
   2b49e:	d001      	beq.n	2b4a4 <_tcc_build_faults+0xa4>
   2b4a0:	2310      	movs	r3, #16
   2b4a2:	e000      	b.n	2b4a6 <_tcc_build_faults+0xa6>
   2b4a4:	2300      	movs	r3, #0
   2b4a6:	431a      	orrs	r2, r3
   2b4a8:	697b      	ldr	r3, [r7, #20]
   2b4aa:	795b      	ldrb	r3, [r3, #5]
   2b4ac:	0019      	movs	r1, r3
   2b4ae:	2303      	movs	r3, #3
   2b4b0:	400b      	ands	r3, r1
   2b4b2:	431a      	orrs	r2, r3
   2b4b4:	697b      	ldr	r3, [r7, #20]
   2b4b6:	799b      	ldrb	r3, [r3, #6]
   2b4b8:	015b      	lsls	r3, r3, #5
   2b4ba:	0019      	movs	r1, r3
   2b4bc:	2360      	movs	r3, #96	; 0x60
   2b4be:	400b      	ands	r3, r1
   2b4c0:	431a      	orrs	r2, r3
   2b4c2:	697b      	ldr	r3, [r7, #20]
   2b4c4:	79db      	ldrb	r3, [r3, #7]
   2b4c6:	021b      	lsls	r3, r3, #8
   2b4c8:	0019      	movs	r1, r3
   2b4ca:	23c0      	movs	r3, #192	; 0xc0
   2b4cc:	009b      	lsls	r3, r3, #2
   2b4ce:	400b      	ands	r3, r1
   2b4d0:	431a      	orrs	r2, r3
   2b4d2:	697b      	ldr	r3, [r7, #20]
   2b4d4:	7a1b      	ldrb	r3, [r3, #8]
   2b4d6:	031b      	lsls	r3, r3, #12
   2b4d8:	0019      	movs	r1, r3
   2b4da:	23e0      	movs	r3, #224	; 0xe0
   2b4dc:	01db      	lsls	r3, r3, #7
   2b4de:	400b      	ands	r3, r1
   2b4e0:	431a      	orrs	r2, r3
   2b4e2:	697b      	ldr	r3, [r7, #20]
   2b4e4:	7a5b      	ldrb	r3, [r3, #9]
   2b4e6:	029b      	lsls	r3, r3, #10
   2b4e8:	0019      	movs	r1, r3
   2b4ea:	23c0      	movs	r3, #192	; 0xc0
   2b4ec:	011b      	lsls	r3, r3, #4
   2b4ee:	400b      	ands	r3, r1
   2b4f0:	4313      	orrs	r3, r2
   2b4f2:	613b      	str	r3, [r7, #16]
   2b4f4:	69fb      	ldr	r3, [r7, #28]
   2b4f6:	009b      	lsls	r3, r3, #2
   2b4f8:	687a      	ldr	r2, [r7, #4]
   2b4fa:	18d3      	adds	r3, r2, r3
   2b4fc:	693a      	ldr	r2, [r7, #16]
   2b4fe:	601a      	str	r2, [r3, #0]
   2b500:	69fb      	ldr	r3, [r7, #28]
   2b502:	3301      	adds	r3, #1
   2b504:	61fb      	str	r3, [r7, #28]
   2b506:	69fb      	ldr	r3, [r7, #28]
   2b508:	2b01      	cmp	r3, #1
   2b50a:	dd8d      	ble.n	2b428 <_tcc_build_faults+0x28>
   2b50c:	2300      	movs	r3, #0
   2b50e:	0018      	movs	r0, r3
   2b510:	46bd      	mov	sp, r7
   2b512:	b008      	add	sp, #32
   2b514:	bd80      	pop	{r7, pc}
   2b516:	46c0      	nop			; (mov r8, r8)
   2b518:	0003a308 	.word	0x0003a308

0002b51c <_tcc_build_drvctrl>:
   2b51c:	b580      	push	{r7, lr}
   2b51e:	b088      	sub	sp, #32
   2b520:	af00      	add	r7, sp, #0
   2b522:	60b9      	str	r1, [r7, #8]
   2b524:	607a      	str	r2, [r7, #4]
   2b526:	230f      	movs	r3, #15
   2b528:	18fb      	adds	r3, r7, r3
   2b52a:	1c02      	adds	r2, r0, #0
   2b52c:	701a      	strb	r2, [r3, #0]
   2b52e:	230f      	movs	r3, #15
   2b530:	18fb      	adds	r3, r7, r3
   2b532:	781a      	ldrb	r2, [r3, #0]
   2b534:	2317      	movs	r3, #23
   2b536:	18fb      	adds	r3, r7, r3
   2b538:	492d      	ldr	r1, [pc, #180]	; (2b5f0 <_tcc_build_drvctrl+0xd4>)
   2b53a:	5c8a      	ldrb	r2, [r1, r2]
   2b53c:	701a      	strb	r2, [r3, #0]
   2b53e:	2300      	movs	r3, #0
   2b540:	61bb      	str	r3, [r7, #24]
   2b542:	2300      	movs	r3, #0
   2b544:	61fb      	str	r3, [r7, #28]
   2b546:	e048      	b.n	2b5da <_tcc_build_drvctrl+0xbe>
   2b548:	68ba      	ldr	r2, [r7, #8]
   2b54a:	2150      	movs	r1, #80	; 0x50
   2b54c:	69fb      	ldr	r3, [r7, #28]
   2b54e:	18d3      	adds	r3, r2, r3
   2b550:	185b      	adds	r3, r3, r1
   2b552:	781b      	ldrb	r3, [r3, #0]
   2b554:	2b00      	cmp	r3, #0
   2b556:	d010      	beq.n	2b57a <_tcc_build_drvctrl+0x5e>
   2b558:	2317      	movs	r3, #23
   2b55a:	18fb      	adds	r3, r7, r3
   2b55c:	781a      	ldrb	r2, [r3, #0]
   2b55e:	69fb      	ldr	r3, [r7, #28]
   2b560:	429a      	cmp	r2, r3
   2b562:	d801      	bhi.n	2b568 <_tcc_build_drvctrl+0x4c>
   2b564:	2317      	movs	r3, #23
   2b566:	e03f      	b.n	2b5e8 <_tcc_build_drvctrl+0xcc>
   2b568:	2380      	movs	r3, #128	; 0x80
   2b56a:	025a      	lsls	r2, r3, #9
   2b56c:	69fb      	ldr	r3, [r7, #28]
   2b56e:	409a      	lsls	r2, r3
   2b570:	0013      	movs	r3, r2
   2b572:	001a      	movs	r2, r3
   2b574:	69bb      	ldr	r3, [r7, #24]
   2b576:	4313      	orrs	r3, r2
   2b578:	61bb      	str	r3, [r7, #24]
   2b57a:	68ba      	ldr	r2, [r7, #8]
   2b57c:	69fb      	ldr	r3, [r7, #28]
   2b57e:	331c      	adds	r3, #28
   2b580:	005b      	lsls	r3, r3, #1
   2b582:	18d3      	adds	r3, r2, r3
   2b584:	3309      	adds	r3, #9
   2b586:	781b      	ldrb	r3, [r3, #0]
   2b588:	2b00      	cmp	r3, #0
   2b58a:	d023      	beq.n	2b5d4 <_tcc_build_drvctrl+0xb8>
   2b58c:	2317      	movs	r3, #23
   2b58e:	18fb      	adds	r3, r7, r3
   2b590:	781a      	ldrb	r2, [r3, #0]
   2b592:	69fb      	ldr	r3, [r7, #28]
   2b594:	429a      	cmp	r2, r3
   2b596:	d801      	bhi.n	2b59c <_tcc_build_drvctrl+0x80>
   2b598:	2317      	movs	r3, #23
   2b59a:	e025      	b.n	2b5e8 <_tcc_build_drvctrl+0xcc>
   2b59c:	68ba      	ldr	r2, [r7, #8]
   2b59e:	69fb      	ldr	r3, [r7, #28]
   2b5a0:	331c      	adds	r3, #28
   2b5a2:	005b      	lsls	r3, r3, #1
   2b5a4:	18d3      	adds	r3, r2, r3
   2b5a6:	3309      	adds	r3, #9
   2b5a8:	781b      	ldrb	r3, [r3, #0]
   2b5aa:	2b02      	cmp	r3, #2
   2b5ac:	d10a      	bne.n	2b5c4 <_tcc_build_drvctrl+0xa8>
   2b5ae:	2302      	movs	r3, #2
   2b5b0:	33ff      	adds	r3, #255	; 0xff
   2b5b2:	001a      	movs	r2, r3
   2b5b4:	69fb      	ldr	r3, [r7, #28]
   2b5b6:	409a      	lsls	r2, r3
   2b5b8:	0013      	movs	r3, r2
   2b5ba:	001a      	movs	r2, r3
   2b5bc:	69bb      	ldr	r3, [r7, #24]
   2b5be:	4313      	orrs	r3, r2
   2b5c0:	61bb      	str	r3, [r7, #24]
   2b5c2:	e007      	b.n	2b5d4 <_tcc_build_drvctrl+0xb8>
   2b5c4:	2201      	movs	r2, #1
   2b5c6:	69fb      	ldr	r3, [r7, #28]
   2b5c8:	409a      	lsls	r2, r3
   2b5ca:	0013      	movs	r3, r2
   2b5cc:	001a      	movs	r2, r3
   2b5ce:	69bb      	ldr	r3, [r7, #24]
   2b5d0:	4313      	orrs	r3, r2
   2b5d2:	61bb      	str	r3, [r7, #24]
   2b5d4:	69fb      	ldr	r3, [r7, #28]
   2b5d6:	3301      	adds	r3, #1
   2b5d8:	61fb      	str	r3, [r7, #28]
   2b5da:	69fb      	ldr	r3, [r7, #28]
   2b5dc:	2b07      	cmp	r3, #7
   2b5de:	d9b3      	bls.n	2b548 <_tcc_build_drvctrl+0x2c>
   2b5e0:	687b      	ldr	r3, [r7, #4]
   2b5e2:	69ba      	ldr	r2, [r7, #24]
   2b5e4:	601a      	str	r2, [r3, #0]
   2b5e6:	2300      	movs	r3, #0
   2b5e8:	0018      	movs	r0, r3
   2b5ea:	46bd      	mov	sp, r7
   2b5ec:	b008      	add	sp, #32
   2b5ee:	bd80      	pop	{r7, pc}
   2b5f0:	0003a30c 	.word	0x0003a30c

0002b5f4 <_tcc_build_waves>:
   2b5f4:	b580      	push	{r7, lr}
   2b5f6:	b088      	sub	sp, #32
   2b5f8:	af00      	add	r7, sp, #0
   2b5fa:	60b9      	str	r1, [r7, #8]
   2b5fc:	607a      	str	r2, [r7, #4]
   2b5fe:	230f      	movs	r3, #15
   2b600:	18fb      	adds	r3, r7, r3
   2b602:	1c02      	adds	r2, r0, #0
   2b604:	701a      	strb	r2, [r3, #0]
   2b606:	230f      	movs	r3, #15
   2b608:	18fb      	adds	r3, r7, r3
   2b60a:	781a      	ldrb	r2, [r3, #0]
   2b60c:	2317      	movs	r3, #23
   2b60e:	18fb      	adds	r3, r7, r3
   2b610:	491d      	ldr	r1, [pc, #116]	; (2b688 <_tcc_build_waves+0x94>)
   2b612:	5c8a      	ldrb	r2, [r1, r2]
   2b614:	701a      	strb	r2, [r3, #0]
   2b616:	68bb      	ldr	r3, [r7, #8]
   2b618:	3310      	adds	r3, #16
   2b61a:	613b      	str	r3, [r7, #16]
   2b61c:	693b      	ldr	r3, [r7, #16]
   2b61e:	7a5b      	ldrb	r3, [r3, #9]
   2b620:	011b      	lsls	r3, r3, #4
   2b622:	001a      	movs	r2, r3
   2b624:	2330      	movs	r3, #48	; 0x30
   2b626:	401a      	ands	r2, r3
   2b628:	693b      	ldr	r3, [r7, #16]
   2b62a:	7a1b      	ldrb	r3, [r3, #8]
   2b62c:	0019      	movs	r1, r3
   2b62e:	2307      	movs	r3, #7
   2b630:	400b      	ands	r3, r1
   2b632:	4313      	orrs	r3, r2
   2b634:	61bb      	str	r3, [r7, #24]
   2b636:	2300      	movs	r3, #0
   2b638:	61fb      	str	r3, [r7, #28]
   2b63a:	e01a      	b.n	2b672 <_tcc_build_waves+0x7e>
   2b63c:	693a      	ldr	r2, [r7, #16]
   2b63e:	69fb      	ldr	r3, [r7, #28]
   2b640:	18d3      	adds	r3, r2, r3
   2b642:	3304      	adds	r3, #4
   2b644:	781b      	ldrb	r3, [r3, #0]
   2b646:	2b00      	cmp	r3, #0
   2b648:	d010      	beq.n	2b66c <_tcc_build_waves+0x78>
   2b64a:	2317      	movs	r3, #23
   2b64c:	18fb      	adds	r3, r7, r3
   2b64e:	781a      	ldrb	r2, [r3, #0]
   2b650:	69fb      	ldr	r3, [r7, #28]
   2b652:	429a      	cmp	r2, r3
   2b654:	dc01      	bgt.n	2b65a <_tcc_build_waves+0x66>
   2b656:	2317      	movs	r3, #23
   2b658:	e012      	b.n	2b680 <_tcc_build_waves+0x8c>
   2b65a:	2380      	movs	r3, #128	; 0x80
   2b65c:	025a      	lsls	r2, r3, #9
   2b65e:	69fb      	ldr	r3, [r7, #28]
   2b660:	409a      	lsls	r2, r3
   2b662:	0013      	movs	r3, r2
   2b664:	001a      	movs	r2, r3
   2b666:	69bb      	ldr	r3, [r7, #24]
   2b668:	4313      	orrs	r3, r2
   2b66a:	61bb      	str	r3, [r7, #24]
   2b66c:	69fb      	ldr	r3, [r7, #28]
   2b66e:	3301      	adds	r3, #1
   2b670:	61fb      	str	r3, [r7, #28]
   2b672:	69fb      	ldr	r3, [r7, #28]
   2b674:	2b03      	cmp	r3, #3
   2b676:	dde1      	ble.n	2b63c <_tcc_build_waves+0x48>
   2b678:	687b      	ldr	r3, [r7, #4]
   2b67a:	69ba      	ldr	r2, [r7, #24]
   2b67c:	601a      	str	r2, [r3, #0]
   2b67e:	2300      	movs	r3, #0
   2b680:	0018      	movs	r0, r3
   2b682:	46bd      	mov	sp, r7
   2b684:	b008      	add	sp, #32
   2b686:	bd80      	pop	{r7, pc}
   2b688:	0003a308 	.word	0x0003a308

0002b68c <tcc_init>:
   2b68c:	b590      	push	{r4, r7, lr}
   2b68e:	b091      	sub	sp, #68	; 0x44
   2b690:	af00      	add	r7, sp, #0
   2b692:	60f8      	str	r0, [r7, #12]
   2b694:	60b9      	str	r1, [r7, #8]
   2b696:	607a      	str	r2, [r7, #4]
   2b698:	233b      	movs	r3, #59	; 0x3b
   2b69a:	18fc      	adds	r4, r7, r3
   2b69c:	68bb      	ldr	r3, [r7, #8]
   2b69e:	0018      	movs	r0, r3
   2b6a0:	4bc4      	ldr	r3, [pc, #784]	; (2b9b4 <tcc_init+0x328>)
   2b6a2:	4798      	blx	r3
   2b6a4:	0003      	movs	r3, r0
   2b6a6:	7023      	strb	r3, [r4, #0]
   2b6a8:	233b      	movs	r3, #59	; 0x3b
   2b6aa:	18fb      	adds	r3, r7, r3
   2b6ac:	781a      	ldrb	r2, [r3, #0]
   2b6ae:	4bc2      	ldr	r3, [pc, #776]	; (2b9b8 <tcc_init+0x32c>)
   2b6b0:	0092      	lsls	r2, r2, #2
   2b6b2:	58d3      	ldr	r3, [r2, r3]
   2b6b4:	0019      	movs	r1, r3
   2b6b6:	2002      	movs	r0, #2
   2b6b8:	4bc0      	ldr	r3, [pc, #768]	; (2b9bc <tcc_init+0x330>)
   2b6ba:	4798      	blx	r3
   2b6bc:	68bb      	ldr	r3, [r7, #8]
   2b6be:	681b      	ldr	r3, [r3, #0]
   2b6c0:	2202      	movs	r2, #2
   2b6c2:	4013      	ands	r3, r2
   2b6c4:	d001      	beq.n	2b6ca <tcc_init+0x3e>
   2b6c6:	231c      	movs	r3, #28
   2b6c8:	e1be      	b.n	2ba48 <tcc_init+0x3bc>
   2b6ca:	68bb      	ldr	r3, [r7, #8]
   2b6cc:	681b      	ldr	r3, [r3, #0]
   2b6ce:	2201      	movs	r2, #1
   2b6d0:	4013      	ands	r3, r2
   2b6d2:	d001      	beq.n	2b6d8 <tcc_init+0x4c>
   2b6d4:	231c      	movs	r3, #28
   2b6d6:	e1b7      	b.n	2ba48 <tcc_init+0x3bc>
   2b6d8:	233b      	movs	r3, #59	; 0x3b
   2b6da:	18fb      	adds	r3, r7, r3
   2b6dc:	781a      	ldrb	r2, [r3, #0]
   2b6de:	4bb8      	ldr	r3, [pc, #736]	; (2b9c0 <tcc_init+0x334>)
   2b6e0:	0092      	lsls	r2, r2, #2
   2b6e2:	58d3      	ldr	r3, [r2, r3]
   2b6e4:	637b      	str	r3, [r7, #52]	; 0x34
   2b6e6:	687b      	ldr	r3, [r7, #4]
   2b6e8:	681a      	ldr	r2, [r3, #0]
   2b6ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2b6ec:	429a      	cmp	r2, r3
   2b6ee:	d804      	bhi.n	2b6fa <tcc_init+0x6e>
   2b6f0:	687b      	ldr	r3, [r7, #4]
   2b6f2:	685a      	ldr	r2, [r3, #4]
   2b6f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2b6f6:	429a      	cmp	r2, r3
   2b6f8:	d901      	bls.n	2b6fe <tcc_init+0x72>
   2b6fa:	2317      	movs	r3, #23
   2b6fc:	e1a4      	b.n	2ba48 <tcc_init+0x3bc>
   2b6fe:	2300      	movs	r3, #0
   2b700:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b702:	e00e      	b.n	2b722 <tcc_init+0x96>
   2b704:	687a      	ldr	r2, [r7, #4]
   2b706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b708:	3306      	adds	r3, #6
   2b70a:	009b      	lsls	r3, r3, #2
   2b70c:	18d3      	adds	r3, r2, r3
   2b70e:	3304      	adds	r3, #4
   2b710:	681a      	ldr	r2, [r3, #0]
   2b712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2b714:	429a      	cmp	r2, r3
   2b716:	d901      	bls.n	2b71c <tcc_init+0x90>
   2b718:	2317      	movs	r3, #23
   2b71a:	e195      	b.n	2ba48 <tcc_init+0x3bc>
   2b71c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b71e:	3301      	adds	r3, #1
   2b720:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b724:	2b03      	cmp	r3, #3
   2b726:	dded      	ble.n	2b704 <tcc_init+0x78>
   2b728:	2300      	movs	r3, #0
   2b72a:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b72c:	e019      	b.n	2b762 <tcc_init+0xd6>
   2b72e:	687a      	ldr	r2, [r7, #4]
   2b730:	2198      	movs	r1, #152	; 0x98
   2b732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b734:	18d3      	adds	r3, r2, r3
   2b736:	185b      	adds	r3, r3, r1
   2b738:	781b      	ldrb	r3, [r3, #0]
   2b73a:	2201      	movs	r2, #1
   2b73c:	4053      	eors	r3, r2
   2b73e:	b2db      	uxtb	r3, r3
   2b740:	2b00      	cmp	r3, #0
   2b742:	d10a      	bne.n	2b75a <tcc_init+0xce>
   2b744:	233b      	movs	r3, #59	; 0x3b
   2b746:	18fb      	adds	r3, r7, r3
   2b748:	781b      	ldrb	r3, [r3, #0]
   2b74a:	4a9e      	ldr	r2, [pc, #632]	; (2b9c4 <tcc_init+0x338>)
   2b74c:	5cd3      	ldrb	r3, [r2, r3]
   2b74e:	001a      	movs	r2, r3
   2b750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b752:	429a      	cmp	r2, r3
   2b754:	dc02      	bgt.n	2b75c <tcc_init+0xd0>
   2b756:	2317      	movs	r3, #23
   2b758:	e176      	b.n	2ba48 <tcc_init+0x3bc>
   2b75a:	46c0      	nop			; (mov r8, r8)
   2b75c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b75e:	3301      	adds	r3, #1
   2b760:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b764:	2b07      	cmp	r3, #7
   2b766:	dde2      	ble.n	2b72e <tcc_init+0xa2>
   2b768:	2300      	movs	r3, #0
   2b76a:	62fb      	str	r3, [r7, #44]	; 0x2c
   2b76c:	2333      	movs	r3, #51	; 0x33
   2b76e:	18fc      	adds	r4, r7, r3
   2b770:	232c      	movs	r3, #44	; 0x2c
   2b772:	18fa      	adds	r2, r7, r3
   2b774:	6879      	ldr	r1, [r7, #4]
   2b776:	233b      	movs	r3, #59	; 0x3b
   2b778:	18fb      	adds	r3, r7, r3
   2b77a:	781b      	ldrb	r3, [r3, #0]
   2b77c:	0018      	movs	r0, r3
   2b77e:	4b92      	ldr	r3, [pc, #584]	; (2b9c8 <tcc_init+0x33c>)
   2b780:	4798      	blx	r3
   2b782:	0003      	movs	r3, r0
   2b784:	7023      	strb	r3, [r4, #0]
   2b786:	2333      	movs	r3, #51	; 0x33
   2b788:	18fb      	adds	r3, r7, r3
   2b78a:	781b      	ldrb	r3, [r3, #0]
   2b78c:	2b00      	cmp	r3, #0
   2b78e:	d003      	beq.n	2b798 <tcc_init+0x10c>
   2b790:	2333      	movs	r3, #51	; 0x33
   2b792:	18fb      	adds	r3, r7, r3
   2b794:	781b      	ldrb	r3, [r3, #0]
   2b796:	e157      	b.n	2ba48 <tcc_init+0x3bc>
   2b798:	232b      	movs	r3, #43	; 0x2b
   2b79a:	18fa      	adds	r2, r7, r3
   2b79c:	6879      	ldr	r1, [r7, #4]
   2b79e:	233b      	movs	r3, #59	; 0x3b
   2b7a0:	18fb      	adds	r3, r7, r3
   2b7a2:	781b      	ldrb	r3, [r3, #0]
   2b7a4:	0018      	movs	r0, r3
   2b7a6:	4b89      	ldr	r3, [pc, #548]	; (2b9cc <tcc_init+0x340>)
   2b7a8:	4798      	blx	r3
   2b7aa:	2333      	movs	r3, #51	; 0x33
   2b7ac:	18fc      	adds	r4, r7, r3
   2b7ae:	2320      	movs	r3, #32
   2b7b0:	18fa      	adds	r2, r7, r3
   2b7b2:	6879      	ldr	r1, [r7, #4]
   2b7b4:	233b      	movs	r3, #59	; 0x3b
   2b7b6:	18fb      	adds	r3, r7, r3
   2b7b8:	781b      	ldrb	r3, [r3, #0]
   2b7ba:	0018      	movs	r0, r3
   2b7bc:	4b84      	ldr	r3, [pc, #528]	; (2b9d0 <tcc_init+0x344>)
   2b7be:	4798      	blx	r3
   2b7c0:	0003      	movs	r3, r0
   2b7c2:	7023      	strb	r3, [r4, #0]
   2b7c4:	2333      	movs	r3, #51	; 0x33
   2b7c6:	18fb      	adds	r3, r7, r3
   2b7c8:	781b      	ldrb	r3, [r3, #0]
   2b7ca:	2b00      	cmp	r3, #0
   2b7cc:	d003      	beq.n	2b7d6 <tcc_init+0x14a>
   2b7ce:	2333      	movs	r3, #51	; 0x33
   2b7d0:	18fb      	adds	r3, r7, r3
   2b7d2:	781b      	ldrb	r3, [r3, #0]
   2b7d4:	e138      	b.n	2ba48 <tcc_init+0x3bc>
   2b7d6:	2300      	movs	r3, #0
   2b7d8:	61fb      	str	r3, [r7, #28]
   2b7da:	2333      	movs	r3, #51	; 0x33
   2b7dc:	18fc      	adds	r4, r7, r3
   2b7de:	231c      	movs	r3, #28
   2b7e0:	18fa      	adds	r2, r7, r3
   2b7e2:	6879      	ldr	r1, [r7, #4]
   2b7e4:	233b      	movs	r3, #59	; 0x3b
   2b7e6:	18fb      	adds	r3, r7, r3
   2b7e8:	781b      	ldrb	r3, [r3, #0]
   2b7ea:	0018      	movs	r0, r3
   2b7ec:	4b79      	ldr	r3, [pc, #484]	; (2b9d4 <tcc_init+0x348>)
   2b7ee:	4798      	blx	r3
   2b7f0:	0003      	movs	r3, r0
   2b7f2:	7023      	strb	r3, [r4, #0]
   2b7f4:	2333      	movs	r3, #51	; 0x33
   2b7f6:	18fb      	adds	r3, r7, r3
   2b7f8:	781b      	ldrb	r3, [r3, #0]
   2b7fa:	2b00      	cmp	r3, #0
   2b7fc:	d003      	beq.n	2b806 <tcc_init+0x17a>
   2b7fe:	2333      	movs	r3, #51	; 0x33
   2b800:	18fb      	adds	r3, r7, r3
   2b802:	781b      	ldrb	r3, [r3, #0]
   2b804:	e120      	b.n	2ba48 <tcc_init+0x3bc>
   2b806:	2333      	movs	r3, #51	; 0x33
   2b808:	18fc      	adds	r4, r7, r3
   2b80a:	2318      	movs	r3, #24
   2b80c:	18fa      	adds	r2, r7, r3
   2b80e:	6879      	ldr	r1, [r7, #4]
   2b810:	233b      	movs	r3, #59	; 0x3b
   2b812:	18fb      	adds	r3, r7, r3
   2b814:	781b      	ldrb	r3, [r3, #0]
   2b816:	0018      	movs	r0, r3
   2b818:	4b6f      	ldr	r3, [pc, #444]	; (2b9d8 <tcc_init+0x34c>)
   2b81a:	4798      	blx	r3
   2b81c:	0003      	movs	r3, r0
   2b81e:	7023      	strb	r3, [r4, #0]
   2b820:	2333      	movs	r3, #51	; 0x33
   2b822:	18fb      	adds	r3, r7, r3
   2b824:	781b      	ldrb	r3, [r3, #0]
   2b826:	2b00      	cmp	r3, #0
   2b828:	d003      	beq.n	2b832 <tcc_init+0x1a6>
   2b82a:	2333      	movs	r3, #51	; 0x33
   2b82c:	18fb      	adds	r3, r7, r3
   2b82e:	781b      	ldrb	r3, [r3, #0]
   2b830:	e10a      	b.n	2ba48 <tcc_init+0x3bc>
   2b832:	2300      	movs	r3, #0
   2b834:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b836:	e009      	b.n	2b84c <tcc_init+0x1c0>
   2b838:	68fa      	ldr	r2, [r7, #12]
   2b83a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b83c:	009b      	lsls	r3, r3, #2
   2b83e:	18d3      	adds	r3, r2, r3
   2b840:	3304      	adds	r3, #4
   2b842:	2200      	movs	r2, #0
   2b844:	601a      	str	r2, [r3, #0]
   2b846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b848:	3301      	adds	r3, #1
   2b84a:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b84c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b84e:	2b0b      	cmp	r3, #11
   2b850:	ddf2      	ble.n	2b838 <tcc_init+0x1ac>
   2b852:	68fb      	ldr	r3, [r7, #12]
   2b854:	2200      	movs	r2, #0
   2b856:	635a      	str	r2, [r3, #52]	; 0x34
   2b858:	68fb      	ldr	r3, [r7, #12]
   2b85a:	2200      	movs	r2, #0
   2b85c:	639a      	str	r2, [r3, #56]	; 0x38
   2b85e:	233b      	movs	r3, #59	; 0x3b
   2b860:	18fb      	adds	r3, r7, r3
   2b862:	781a      	ldrb	r2, [r3, #0]
   2b864:	4b5d      	ldr	r3, [pc, #372]	; (2b9dc <tcc_init+0x350>)
   2b866:	0092      	lsls	r2, r2, #2
   2b868:	68f9      	ldr	r1, [r7, #12]
   2b86a:	50d1      	str	r1, [r2, r3]
   2b86c:	68fb      	ldr	r3, [r7, #12]
   2b86e:	68ba      	ldr	r2, [r7, #8]
   2b870:	601a      	str	r2, [r3, #0]
   2b872:	687b      	ldr	r3, [r7, #4]
   2b874:	22a0      	movs	r2, #160	; 0xa0
   2b876:	5c99      	ldrb	r1, [r3, r2]
   2b878:	68fb      	ldr	r3, [r7, #12]
   2b87a:	223c      	movs	r2, #60	; 0x3c
   2b87c:	5499      	strb	r1, [r3, r2]
   2b87e:	2314      	movs	r3, #20
   2b880:	18fb      	adds	r3, r7, r3
   2b882:	0018      	movs	r0, r3
   2b884:	4b56      	ldr	r3, [pc, #344]	; (2b9e0 <tcc_init+0x354>)
   2b886:	4798      	blx	r3
   2b888:	687b      	ldr	r3, [r7, #4]
   2b88a:	7a9a      	ldrb	r2, [r3, #10]
   2b88c:	2314      	movs	r3, #20
   2b88e:	18fb      	adds	r3, r7, r3
   2b890:	701a      	strb	r2, [r3, #0]
   2b892:	233b      	movs	r3, #59	; 0x3b
   2b894:	18fb      	adds	r3, r7, r3
   2b896:	781b      	ldrb	r3, [r3, #0]
   2b898:	4a52      	ldr	r2, [pc, #328]	; (2b9e4 <tcc_init+0x358>)
   2b89a:	5cd3      	ldrb	r3, [r2, r3]
   2b89c:	2214      	movs	r2, #20
   2b89e:	18ba      	adds	r2, r7, r2
   2b8a0:	0011      	movs	r1, r2
   2b8a2:	0018      	movs	r0, r3
   2b8a4:	4b50      	ldr	r3, [pc, #320]	; (2b9e8 <tcc_init+0x35c>)
   2b8a6:	4798      	blx	r3
   2b8a8:	233b      	movs	r3, #59	; 0x3b
   2b8aa:	18fb      	adds	r3, r7, r3
   2b8ac:	781b      	ldrb	r3, [r3, #0]
   2b8ae:	4a4d      	ldr	r2, [pc, #308]	; (2b9e4 <tcc_init+0x358>)
   2b8b0:	5cd3      	ldrb	r3, [r2, r3]
   2b8b2:	0018      	movs	r0, r3
   2b8b4:	4b4d      	ldr	r3, [pc, #308]	; (2b9ec <tcc_init+0x360>)
   2b8b6:	4798      	blx	r3
   2b8b8:	2300      	movs	r3, #0
   2b8ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b8bc:	e02d      	b.n	2b91a <tcc_init+0x28e>
   2b8be:	687a      	ldr	r2, [r7, #4]
   2b8c0:	2198      	movs	r1, #152	; 0x98
   2b8c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b8c4:	18d3      	adds	r3, r2, r3
   2b8c6:	185b      	adds	r3, r3, r1
   2b8c8:	781b      	ldrb	r3, [r3, #0]
   2b8ca:	2201      	movs	r2, #1
   2b8cc:	4053      	eors	r3, r2
   2b8ce:	b2db      	uxtb	r3, r3
   2b8d0:	2b00      	cmp	r3, #0
   2b8d2:	d11e      	bne.n	2b912 <tcc_init+0x286>
   2b8d4:	2310      	movs	r3, #16
   2b8d6:	18fb      	adds	r3, r7, r3
   2b8d8:	0018      	movs	r0, r3
   2b8da:	4b45      	ldr	r3, [pc, #276]	; (2b9f0 <tcc_init+0x364>)
   2b8dc:	4798      	blx	r3
   2b8de:	687b      	ldr	r3, [r7, #4]
   2b8e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2b8e2:	321e      	adds	r2, #30
   2b8e4:	0092      	lsls	r2, r2, #2
   2b8e6:	58d3      	ldr	r3, [r2, r3]
   2b8e8:	b2da      	uxtb	r2, r3
   2b8ea:	2310      	movs	r3, #16
   2b8ec:	18fb      	adds	r3, r7, r3
   2b8ee:	701a      	strb	r2, [r3, #0]
   2b8f0:	2310      	movs	r3, #16
   2b8f2:	18fb      	adds	r3, r7, r3
   2b8f4:	2201      	movs	r2, #1
   2b8f6:	705a      	strb	r2, [r3, #1]
   2b8f8:	687b      	ldr	r3, [r7, #4]
   2b8fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2b8fc:	3216      	adds	r2, #22
   2b8fe:	0092      	lsls	r2, r2, #2
   2b900:	58d3      	ldr	r3, [r2, r3]
   2b902:	b2db      	uxtb	r3, r3
   2b904:	2210      	movs	r2, #16
   2b906:	18ba      	adds	r2, r7, r2
   2b908:	0011      	movs	r1, r2
   2b90a:	0018      	movs	r0, r3
   2b90c:	4b39      	ldr	r3, [pc, #228]	; (2b9f4 <tcc_init+0x368>)
   2b90e:	4798      	blx	r3
   2b910:	e000      	b.n	2b914 <tcc_init+0x288>
   2b912:	46c0      	nop			; (mov r8, r8)
   2b914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b916:	3301      	adds	r3, #1
   2b918:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b91a:	233b      	movs	r3, #59	; 0x3b
   2b91c:	18fb      	adds	r3, r7, r3
   2b91e:	781b      	ldrb	r3, [r3, #0]
   2b920:	4a28      	ldr	r2, [pc, #160]	; (2b9c4 <tcc_init+0x338>)
   2b922:	5cd3      	ldrb	r3, [r2, r3]
   2b924:	001a      	movs	r2, r3
   2b926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b928:	429a      	cmp	r2, r3
   2b92a:	dcc8      	bgt.n	2b8be <tcc_init+0x232>
   2b92c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2b92e:	68bb      	ldr	r3, [r7, #8]
   2b930:	601a      	str	r2, [r3, #0]
   2b932:	46c0      	nop			; (mov r8, r8)
   2b934:	68bb      	ldr	r3, [r7, #8]
   2b936:	689b      	ldr	r3, [r3, #8]
   2b938:	2204      	movs	r2, #4
   2b93a:	4013      	ands	r3, r2
   2b93c:	d1fa      	bne.n	2b934 <tcc_init+0x2a8>
   2b93e:	68bb      	ldr	r3, [r7, #8]
   2b940:	22ff      	movs	r2, #255	; 0xff
   2b942:	711a      	strb	r2, [r3, #4]
   2b944:	46c0      	nop			; (mov r8, r8)
   2b946:	68bb      	ldr	r3, [r7, #8]
   2b948:	689b      	ldr	r3, [r3, #8]
   2b94a:	2204      	movs	r2, #4
   2b94c:	4013      	ands	r3, r2
   2b94e:	d1fa      	bne.n	2b946 <tcc_init+0x2ba>
   2b950:	232b      	movs	r3, #43	; 0x2b
   2b952:	18fb      	adds	r3, r7, r3
   2b954:	781a      	ldrb	r2, [r3, #0]
   2b956:	68bb      	ldr	r3, [r7, #8]
   2b958:	715a      	strb	r2, [r3, #5]
   2b95a:	2320      	movs	r3, #32
   2b95c:	18fb      	adds	r3, r7, r3
   2b95e:	681a      	ldr	r2, [r3, #0]
   2b960:	68bb      	ldr	r3, [r7, #8]
   2b962:	60da      	str	r2, [r3, #12]
   2b964:	2320      	movs	r3, #32
   2b966:	18fb      	adds	r3, r7, r3
   2b968:	685a      	ldr	r2, [r3, #4]
   2b96a:	68bb      	ldr	r3, [r7, #8]
   2b96c:	611a      	str	r2, [r3, #16]
   2b96e:	69fa      	ldr	r2, [r7, #28]
   2b970:	68bb      	ldr	r3, [r7, #8]
   2b972:	619a      	str	r2, [r3, #24]
   2b974:	46c0      	nop			; (mov r8, r8)
   2b976:	68bb      	ldr	r3, [r7, #8]
   2b978:	689b      	ldr	r3, [r3, #8]
   2b97a:	4a1f      	ldr	r2, [pc, #124]	; (2b9f8 <tcc_init+0x36c>)
   2b97c:	4013      	ands	r3, r2
   2b97e:	d1fa      	bne.n	2b976 <tcc_init+0x2ea>
   2b980:	69ba      	ldr	r2, [r7, #24]
   2b982:	68bb      	ldr	r3, [r7, #8]
   2b984:	63da      	str	r2, [r3, #60]	; 0x3c
   2b986:	46c0      	nop			; (mov r8, r8)
   2b988:	68bb      	ldr	r3, [r7, #8]
   2b98a:	689b      	ldr	r3, [r3, #8]
   2b98c:	2210      	movs	r2, #16
   2b98e:	4013      	ands	r3, r2
   2b990:	d1fa      	bne.n	2b988 <tcc_init+0x2fc>
   2b992:	687b      	ldr	r3, [r7, #4]
   2b994:	681a      	ldr	r2, [r3, #0]
   2b996:	68bb      	ldr	r3, [r7, #8]
   2b998:	635a      	str	r2, [r3, #52]	; 0x34
   2b99a:	46c0      	nop			; (mov r8, r8)
   2b99c:	68bb      	ldr	r3, [r7, #8]
   2b99e:	689b      	ldr	r3, [r3, #8]
   2b9a0:	4a16      	ldr	r2, [pc, #88]	; (2b9fc <tcc_init+0x370>)
   2b9a2:	4013      	ands	r3, r2
   2b9a4:	d1fa      	bne.n	2b99c <tcc_init+0x310>
   2b9a6:	687b      	ldr	r3, [r7, #4]
   2b9a8:	685a      	ldr	r2, [r3, #4]
   2b9aa:	68bb      	ldr	r3, [r7, #8]
   2b9ac:	641a      	str	r2, [r3, #64]	; 0x40
   2b9ae:	2300      	movs	r3, #0
   2b9b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b9b2:	e03f      	b.n	2ba34 <tcc_init+0x3a8>
   2b9b4:	0002aff5 	.word	0x0002aff5
   2b9b8:	0003a2f0 	.word	0x0003a2f0
   2b9bc:	0002af71 	.word	0x0002af71
   2b9c0:	0003a2fc 	.word	0x0003a2fc
   2b9c4:	0003a30c 	.word	0x0003a30c
   2b9c8:	0002b301 	.word	0x0002b301
   2b9cc:	0002b3a5 	.word	0x0002b3a5
   2b9d0:	0002b401 	.word	0x0002b401
   2b9d4:	0002b51d 	.word	0x0002b51d
   2b9d8:	0002b5f5 	.word	0x0002b5f5
   2b9dc:	20005864 	.word	0x20005864
   2b9e0:	0002af59 	.word	0x0002af59
   2b9e4:	0003a2ec 	.word	0x0003a2ec
   2b9e8:	0002ab71 	.word	0x0002ab71
   2b9ec:	0002abb5 	.word	0x0002abb5
   2b9f0:	0002afcd 	.word	0x0002afcd
   2b9f4:	0002aed1 	.word	0x0002aed1
   2b9f8:	00020040 	.word	0x00020040
   2b9fc:	00040080 	.word	0x00040080
   2ba00:	46c0      	nop			; (mov r8, r8)
   2ba02:	68bb      	ldr	r3, [r7, #8]
   2ba04:	689b      	ldr	r3, [r3, #8]
   2ba06:	4912      	ldr	r1, [pc, #72]	; (2ba50 <tcc_init+0x3c4>)
   2ba08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2ba0a:	4091      	lsls	r1, r2
   2ba0c:	000a      	movs	r2, r1
   2ba0e:	4013      	ands	r3, r2
   2ba10:	d1f7      	bne.n	2ba02 <tcc_init+0x376>
   2ba12:	687a      	ldr	r2, [r7, #4]
   2ba14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ba16:	3306      	adds	r3, #6
   2ba18:	009b      	lsls	r3, r3, #2
   2ba1a:	18d3      	adds	r3, r2, r3
   2ba1c:	3304      	adds	r3, #4
   2ba1e:	681a      	ldr	r2, [r3, #0]
   2ba20:	68b9      	ldr	r1, [r7, #8]
   2ba22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ba24:	3310      	adds	r3, #16
   2ba26:	009b      	lsls	r3, r3, #2
   2ba28:	18cb      	adds	r3, r1, r3
   2ba2a:	3304      	adds	r3, #4
   2ba2c:	601a      	str	r2, [r3, #0]
   2ba2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ba30:	3301      	adds	r3, #1
   2ba32:	63fb      	str	r3, [r7, #60]	; 0x3c
   2ba34:	233b      	movs	r3, #59	; 0x3b
   2ba36:	18fb      	adds	r3, r7, r3
   2ba38:	781b      	ldrb	r3, [r3, #0]
   2ba3a:	4a06      	ldr	r2, [pc, #24]	; (2ba54 <tcc_init+0x3c8>)
   2ba3c:	5cd3      	ldrb	r3, [r2, r3]
   2ba3e:	001a      	movs	r2, r3
   2ba40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ba42:	429a      	cmp	r2, r3
   2ba44:	dcdc      	bgt.n	2ba00 <tcc_init+0x374>
   2ba46:	2300      	movs	r3, #0
   2ba48:	0018      	movs	r0, r3
   2ba4a:	46bd      	mov	sp, r7
   2ba4c:	b011      	add	sp, #68	; 0x44
   2ba4e:	bd90      	pop	{r4, r7, pc}
   2ba50:	00080100 	.word	0x00080100
   2ba54:	0003a308 	.word	0x0003a308

0002ba58 <system_interrupt_enable>:
   2ba58:	b580      	push	{r7, lr}
   2ba5a:	b082      	sub	sp, #8
   2ba5c:	af00      	add	r7, sp, #0
   2ba5e:	0002      	movs	r2, r0
   2ba60:	1dfb      	adds	r3, r7, #7
   2ba62:	701a      	strb	r2, [r3, #0]
   2ba64:	4b06      	ldr	r3, [pc, #24]	; (2ba80 <system_interrupt_enable+0x28>)
   2ba66:	1dfa      	adds	r2, r7, #7
   2ba68:	7812      	ldrb	r2, [r2, #0]
   2ba6a:	0011      	movs	r1, r2
   2ba6c:	221f      	movs	r2, #31
   2ba6e:	400a      	ands	r2, r1
   2ba70:	2101      	movs	r1, #1
   2ba72:	4091      	lsls	r1, r2
   2ba74:	000a      	movs	r2, r1
   2ba76:	601a      	str	r2, [r3, #0]
   2ba78:	46c0      	nop			; (mov r8, r8)
   2ba7a:	46bd      	mov	sp, r7
   2ba7c:	b002      	add	sp, #8
   2ba7e:	bd80      	pop	{r7, pc}
   2ba80:	e000e100 	.word	0xe000e100

0002ba84 <_tcc_interrupt_get_interrupt_vector>:
   2ba84:	b580      	push	{r7, lr}
   2ba86:	b082      	sub	sp, #8
   2ba88:	af00      	add	r7, sp, #0
   2ba8a:	6078      	str	r0, [r7, #4]
   2ba8c:	4a04      	ldr	r2, [pc, #16]	; (2baa0 <_tcc_interrupt_get_interrupt_vector+0x1c>)
   2ba8e:	687b      	ldr	r3, [r7, #4]
   2ba90:	18d3      	adds	r3, r2, r3
   2ba92:	781b      	ldrb	r3, [r3, #0]
   2ba94:	b25b      	sxtb	r3, r3
   2ba96:	0018      	movs	r0, r3
   2ba98:	46bd      	mov	sp, r7
   2ba9a:	b002      	add	sp, #8
   2ba9c:	bd80      	pop	{r7, pc}
   2ba9e:	46c0      	nop			; (mov r8, r8)
   2baa0:	2000011c 	.word	0x2000011c

0002baa4 <tcc_register_callback>:
   2baa4:	b580      	push	{r7, lr}
   2baa6:	b084      	sub	sp, #16
   2baa8:	af00      	add	r7, sp, #0
   2baaa:	60f8      	str	r0, [r7, #12]
   2baac:	60b9      	str	r1, [r7, #8]
   2baae:	1dfb      	adds	r3, r7, #7
   2bab0:	701a      	strb	r2, [r3, #0]
   2bab2:	1dfb      	adds	r3, r7, #7
   2bab4:	781b      	ldrb	r3, [r3, #0]
   2bab6:	68fa      	ldr	r2, [r7, #12]
   2bab8:	009b      	lsls	r3, r3, #2
   2baba:	18d3      	adds	r3, r2, r3
   2babc:	3304      	adds	r3, #4
   2babe:	68ba      	ldr	r2, [r7, #8]
   2bac0:	601a      	str	r2, [r3, #0]
   2bac2:	68fb      	ldr	r3, [r7, #12]
   2bac4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2bac6:	1dfb      	adds	r3, r7, #7
   2bac8:	7819      	ldrb	r1, [r3, #0]
   2baca:	4b05      	ldr	r3, [pc, #20]	; (2bae0 <tcc_register_callback+0x3c>)
   2bacc:	0089      	lsls	r1, r1, #2
   2bace:	58cb      	ldr	r3, [r1, r3]
   2bad0:	431a      	orrs	r2, r3
   2bad2:	68fb      	ldr	r3, [r7, #12]
   2bad4:	635a      	str	r2, [r3, #52]	; 0x34
   2bad6:	2300      	movs	r3, #0
   2bad8:	0018      	movs	r0, r3
   2bada:	46bd      	mov	sp, r7
   2badc:	b004      	add	sp, #16
   2bade:	bd80      	pop	{r7, pc}
   2bae0:	0003a310 	.word	0x0003a310

0002bae4 <tcc_enable_callback>:
   2bae4:	b580      	push	{r7, lr}
   2bae6:	b082      	sub	sp, #8
   2bae8:	af00      	add	r7, sp, #0
   2baea:	6078      	str	r0, [r7, #4]
   2baec:	000a      	movs	r2, r1
   2baee:	1cfb      	adds	r3, r7, #3
   2baf0:	701a      	strb	r2, [r3, #0]
   2baf2:	687b      	ldr	r3, [r7, #4]
   2baf4:	681b      	ldr	r3, [r3, #0]
   2baf6:	0018      	movs	r0, r3
   2baf8:	4b0f      	ldr	r3, [pc, #60]	; (2bb38 <tcc_enable_callback+0x54>)
   2bafa:	4798      	blx	r3
   2bafc:	0003      	movs	r3, r0
   2bafe:	0018      	movs	r0, r3
   2bb00:	4b0e      	ldr	r3, [pc, #56]	; (2bb3c <tcc_enable_callback+0x58>)
   2bb02:	4798      	blx	r3
   2bb04:	0003      	movs	r3, r0
   2bb06:	0018      	movs	r0, r3
   2bb08:	4b0d      	ldr	r3, [pc, #52]	; (2bb40 <tcc_enable_callback+0x5c>)
   2bb0a:	4798      	blx	r3
   2bb0c:	687b      	ldr	r3, [r7, #4]
   2bb0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2bb10:	1cfb      	adds	r3, r7, #3
   2bb12:	7819      	ldrb	r1, [r3, #0]
   2bb14:	4b0b      	ldr	r3, [pc, #44]	; (2bb44 <tcc_enable_callback+0x60>)
   2bb16:	0089      	lsls	r1, r1, #2
   2bb18:	58cb      	ldr	r3, [r1, r3]
   2bb1a:	431a      	orrs	r2, r3
   2bb1c:	687b      	ldr	r3, [r7, #4]
   2bb1e:	639a      	str	r2, [r3, #56]	; 0x38
   2bb20:	687b      	ldr	r3, [r7, #4]
   2bb22:	681b      	ldr	r3, [r3, #0]
   2bb24:	1cfa      	adds	r2, r7, #3
   2bb26:	7811      	ldrb	r1, [r2, #0]
   2bb28:	4a06      	ldr	r2, [pc, #24]	; (2bb44 <tcc_enable_callback+0x60>)
   2bb2a:	0089      	lsls	r1, r1, #2
   2bb2c:	588a      	ldr	r2, [r1, r2]
   2bb2e:	629a      	str	r2, [r3, #40]	; 0x28
   2bb30:	46c0      	nop			; (mov r8, r8)
   2bb32:	46bd      	mov	sp, r7
   2bb34:	b002      	add	sp, #8
   2bb36:	bd80      	pop	{r7, pc}
   2bb38:	0002aff5 	.word	0x0002aff5
   2bb3c:	0002ba85 	.word	0x0002ba85
   2bb40:	0002ba59 	.word	0x0002ba59
   2bb44:	0003a310 	.word	0x0003a310

0002bb48 <TCC0_Handler>:
   2bb48:	b580      	push	{r7, lr}
   2bb4a:	af00      	add	r7, sp, #0
   2bb4c:	2000      	movs	r0, #0
   2bb4e:	4b02      	ldr	r3, [pc, #8]	; (2bb58 <TCC0_Handler+0x10>)
   2bb50:	4798      	blx	r3
   2bb52:	46c0      	nop			; (mov r8, r8)
   2bb54:	46bd      	mov	sp, r7
   2bb56:	bd80      	pop	{r7, pc}
   2bb58:	0002bb85 	.word	0x0002bb85

0002bb5c <TCC1_Handler>:
   2bb5c:	b580      	push	{r7, lr}
   2bb5e:	af00      	add	r7, sp, #0
   2bb60:	2001      	movs	r0, #1
   2bb62:	4b02      	ldr	r3, [pc, #8]	; (2bb6c <TCC1_Handler+0x10>)
   2bb64:	4798      	blx	r3
   2bb66:	46c0      	nop			; (mov r8, r8)
   2bb68:	46bd      	mov	sp, r7
   2bb6a:	bd80      	pop	{r7, pc}
   2bb6c:	0002bb85 	.word	0x0002bb85

0002bb70 <TCC2_Handler>:
   2bb70:	b580      	push	{r7, lr}
   2bb72:	af00      	add	r7, sp, #0
   2bb74:	2002      	movs	r0, #2
   2bb76:	4b02      	ldr	r3, [pc, #8]	; (2bb80 <TCC2_Handler+0x10>)
   2bb78:	4798      	blx	r3
   2bb7a:	46c0      	nop			; (mov r8, r8)
   2bb7c:	46bd      	mov	sp, r7
   2bb7e:	bd80      	pop	{r7, pc}
   2bb80:	0002bb85 	.word	0x0002bb85

0002bb84 <_tcc_interrupt_handler>:
   2bb84:	b580      	push	{r7, lr}
   2bb86:	b086      	sub	sp, #24
   2bb88:	af00      	add	r7, sp, #0
   2bb8a:	0002      	movs	r2, r0
   2bb8c:	1dfb      	adds	r3, r7, #7
   2bb8e:	701a      	strb	r2, [r3, #0]
   2bb90:	1dfb      	adds	r3, r7, #7
   2bb92:	781a      	ldrb	r2, [r3, #0]
   2bb94:	4b18      	ldr	r3, [pc, #96]	; (2bbf8 <_tcc_interrupt_handler+0x74>)
   2bb96:	0092      	lsls	r2, r2, #2
   2bb98:	58d3      	ldr	r3, [r2, r3]
   2bb9a:	613b      	str	r3, [r7, #16]
   2bb9c:	693b      	ldr	r3, [r7, #16]
   2bb9e:	681b      	ldr	r3, [r3, #0]
   2bba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2bba2:	693b      	ldr	r3, [r7, #16]
   2bba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   2bba6:	401a      	ands	r2, r3
   2bba8:	693b      	ldr	r3, [r7, #16]
   2bbaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   2bbac:	4013      	ands	r3, r2
   2bbae:	60fb      	str	r3, [r7, #12]
   2bbb0:	2300      	movs	r3, #0
   2bbb2:	617b      	str	r3, [r7, #20]
   2bbb4:	e019      	b.n	2bbea <_tcc_interrupt_handler+0x66>
   2bbb6:	4b11      	ldr	r3, [pc, #68]	; (2bbfc <_tcc_interrupt_handler+0x78>)
   2bbb8:	697a      	ldr	r2, [r7, #20]
   2bbba:	0092      	lsls	r2, r2, #2
   2bbbc:	58d3      	ldr	r3, [r2, r3]
   2bbbe:	68fa      	ldr	r2, [r7, #12]
   2bbc0:	4013      	ands	r3, r2
   2bbc2:	d00f      	beq.n	2bbe4 <_tcc_interrupt_handler+0x60>
   2bbc4:	693a      	ldr	r2, [r7, #16]
   2bbc6:	697b      	ldr	r3, [r7, #20]
   2bbc8:	009b      	lsls	r3, r3, #2
   2bbca:	18d3      	adds	r3, r2, r3
   2bbcc:	3304      	adds	r3, #4
   2bbce:	681b      	ldr	r3, [r3, #0]
   2bbd0:	693a      	ldr	r2, [r7, #16]
   2bbd2:	0010      	movs	r0, r2
   2bbd4:	4798      	blx	r3
   2bbd6:	693b      	ldr	r3, [r7, #16]
   2bbd8:	681b      	ldr	r3, [r3, #0]
   2bbda:	4a08      	ldr	r2, [pc, #32]	; (2bbfc <_tcc_interrupt_handler+0x78>)
   2bbdc:	6979      	ldr	r1, [r7, #20]
   2bbde:	0089      	lsls	r1, r1, #2
   2bbe0:	588a      	ldr	r2, [r1, r2]
   2bbe2:	62da      	str	r2, [r3, #44]	; 0x2c
   2bbe4:	697b      	ldr	r3, [r7, #20]
   2bbe6:	3301      	adds	r3, #1
   2bbe8:	617b      	str	r3, [r7, #20]
   2bbea:	697b      	ldr	r3, [r7, #20]
   2bbec:	2b0b      	cmp	r3, #11
   2bbee:	dde2      	ble.n	2bbb6 <_tcc_interrupt_handler+0x32>
   2bbf0:	46c0      	nop			; (mov r8, r8)
   2bbf2:	46bd      	mov	sp, r7
   2bbf4:	b006      	add	sp, #24
   2bbf6:	bd80      	pop	{r7, pc}
   2bbf8:	20005864 	.word	0x20005864
   2bbfc:	0003a310 	.word	0x0003a310

0002bc00 <Reset_Handler>:
   2bc00:	b580      	push	{r7, lr}
   2bc02:	b082      	sub	sp, #8
   2bc04:	af00      	add	r7, sp, #0
   2bc06:	4b2f      	ldr	r3, [pc, #188]	; (2bcc4 <Reset_Handler+0xc4>)
   2bc08:	607b      	str	r3, [r7, #4]
   2bc0a:	4b2f      	ldr	r3, [pc, #188]	; (2bcc8 <Reset_Handler+0xc8>)
   2bc0c:	603b      	str	r3, [r7, #0]
   2bc0e:	687a      	ldr	r2, [r7, #4]
   2bc10:	683b      	ldr	r3, [r7, #0]
   2bc12:	429a      	cmp	r2, r3
   2bc14:	d00c      	beq.n	2bc30 <Reset_Handler+0x30>
   2bc16:	e007      	b.n	2bc28 <Reset_Handler+0x28>
   2bc18:	683b      	ldr	r3, [r7, #0]
   2bc1a:	1d1a      	adds	r2, r3, #4
   2bc1c:	603a      	str	r2, [r7, #0]
   2bc1e:	687a      	ldr	r2, [r7, #4]
   2bc20:	1d11      	adds	r1, r2, #4
   2bc22:	6079      	str	r1, [r7, #4]
   2bc24:	6812      	ldr	r2, [r2, #0]
   2bc26:	601a      	str	r2, [r3, #0]
   2bc28:	683a      	ldr	r2, [r7, #0]
   2bc2a:	4b28      	ldr	r3, [pc, #160]	; (2bccc <Reset_Handler+0xcc>)
   2bc2c:	429a      	cmp	r2, r3
   2bc2e:	d3f3      	bcc.n	2bc18 <Reset_Handler+0x18>
   2bc30:	4b27      	ldr	r3, [pc, #156]	; (2bcd0 <Reset_Handler+0xd0>)
   2bc32:	603b      	str	r3, [r7, #0]
   2bc34:	e004      	b.n	2bc40 <Reset_Handler+0x40>
   2bc36:	683b      	ldr	r3, [r7, #0]
   2bc38:	1d1a      	adds	r2, r3, #4
   2bc3a:	603a      	str	r2, [r7, #0]
   2bc3c:	2200      	movs	r2, #0
   2bc3e:	601a      	str	r2, [r3, #0]
   2bc40:	683a      	ldr	r2, [r7, #0]
   2bc42:	4b24      	ldr	r3, [pc, #144]	; (2bcd4 <Reset_Handler+0xd4>)
   2bc44:	429a      	cmp	r2, r3
   2bc46:	d3f6      	bcc.n	2bc36 <Reset_Handler+0x36>
   2bc48:	4b23      	ldr	r3, [pc, #140]	; (2bcd8 <Reset_Handler+0xd8>)
   2bc4a:	607b      	str	r3, [r7, #4]
   2bc4c:	4b23      	ldr	r3, [pc, #140]	; (2bcdc <Reset_Handler+0xdc>)
   2bc4e:	687a      	ldr	r2, [r7, #4]
   2bc50:	21ff      	movs	r1, #255	; 0xff
   2bc52:	438a      	bics	r2, r1
   2bc54:	609a      	str	r2, [r3, #8]
   2bc56:	4a22      	ldr	r2, [pc, #136]	; (2bce0 <Reset_Handler+0xe0>)
   2bc58:	2390      	movs	r3, #144	; 0x90
   2bc5a:	005b      	lsls	r3, r3, #1
   2bc5c:	2102      	movs	r1, #2
   2bc5e:	50d1      	str	r1, [r2, r3]
   2bc60:	4a20      	ldr	r2, [pc, #128]	; (2bce4 <Reset_Handler+0xe4>)
   2bc62:	78d3      	ldrb	r3, [r2, #3]
   2bc64:	2103      	movs	r1, #3
   2bc66:	438b      	bics	r3, r1
   2bc68:	1c19      	adds	r1, r3, #0
   2bc6a:	2302      	movs	r3, #2
   2bc6c:	430b      	orrs	r3, r1
   2bc6e:	70d3      	strb	r3, [r2, #3]
   2bc70:	4a1c      	ldr	r2, [pc, #112]	; (2bce4 <Reset_Handler+0xe4>)
   2bc72:	78d3      	ldrb	r3, [r2, #3]
   2bc74:	210c      	movs	r1, #12
   2bc76:	438b      	bics	r3, r1
   2bc78:	1c19      	adds	r1, r3, #0
   2bc7a:	2308      	movs	r3, #8
   2bc7c:	430b      	orrs	r3, r1
   2bc7e:	70d3      	strb	r3, [r2, #3]
   2bc80:	4a19      	ldr	r2, [pc, #100]	; (2bce8 <Reset_Handler+0xe8>)
   2bc82:	7b93      	ldrb	r3, [r2, #14]
   2bc84:	2130      	movs	r1, #48	; 0x30
   2bc86:	438b      	bics	r3, r1
   2bc88:	1c19      	adds	r1, r3, #0
   2bc8a:	2320      	movs	r3, #32
   2bc8c:	430b      	orrs	r3, r1
   2bc8e:	7393      	strb	r3, [r2, #14]
   2bc90:	4a15      	ldr	r2, [pc, #84]	; (2bce8 <Reset_Handler+0xe8>)
   2bc92:	7b93      	ldrb	r3, [r2, #14]
   2bc94:	210c      	movs	r1, #12
   2bc96:	438b      	bics	r3, r1
   2bc98:	1c19      	adds	r1, r3, #0
   2bc9a:	2308      	movs	r3, #8
   2bc9c:	430b      	orrs	r3, r1
   2bc9e:	7393      	strb	r3, [r2, #14]
   2bca0:	4a11      	ldr	r2, [pc, #68]	; (2bce8 <Reset_Handler+0xe8>)
   2bca2:	7b93      	ldrb	r3, [r2, #14]
   2bca4:	2103      	movs	r1, #3
   2bca6:	438b      	bics	r3, r1
   2bca8:	1c19      	adds	r1, r3, #0
   2bcaa:	2302      	movs	r3, #2
   2bcac:	430b      	orrs	r3, r1
   2bcae:	7393      	strb	r3, [r2, #14]
   2bcb0:	4a0e      	ldr	r2, [pc, #56]	; (2bcec <Reset_Handler+0xec>)
   2bcb2:	6853      	ldr	r3, [r2, #4]
   2bcb4:	2180      	movs	r1, #128	; 0x80
   2bcb6:	430b      	orrs	r3, r1
   2bcb8:	6053      	str	r3, [r2, #4]
   2bcba:	4b0d      	ldr	r3, [pc, #52]	; (2bcf0 <Reset_Handler+0xf0>)
   2bcbc:	4798      	blx	r3
   2bcbe:	4b0d      	ldr	r3, [pc, #52]	; (2bcf4 <Reset_Handler+0xf4>)
   2bcc0:	4798      	blx	r3
   2bcc2:	e7fe      	b.n	2bcc2 <Reset_Handler+0xc2>
   2bcc4:	0003b108 	.word	0x0003b108
   2bcc8:	20000000 	.word	0x20000000
   2bccc:	200002f4 	.word	0x200002f4
   2bcd0:	20000300 	.word	0x20000300
   2bcd4:	200058d4 	.word	0x200058d4
   2bcd8:	00012000 	.word	0x00012000
   2bcdc:	e000ed00 	.word	0xe000ed00
   2bce0:	41007000 	.word	0x41007000
   2bce4:	41005000 	.word	0x41005000
   2bce8:	41004800 	.word	0x41004800
   2bcec:	41004000 	.word	0x41004000
   2bcf0:	00035661 	.word	0x00035661
   2bcf4:	00033435 	.word	0x00033435

0002bcf8 <Dummy_Handler>:
   2bcf8:	b580      	push	{r7, lr}
   2bcfa:	af00      	add	r7, sp, #0
   2bcfc:	2004      	movs	r0, #4
   2bcfe:	4671      	mov	r1, lr
   2bd00:	4208      	tst	r0, r1
   2bd02:	d002      	beq.n	2bd0a <_MSP>
   2bd04:	f3ef 8009 	mrs	r0, PSP
   2bd08:	e001      	b.n	2bd0e <_HALT>

0002bd0a <_MSP>:
   2bd0a:	f3ef 8008 	mrs	r0, MSP

0002bd0e <_HALT>:
   2bd0e:	6941      	ldr	r1, [r0, #20]
   2bd10:	e004      	b.n	2bd1c <HardFault_HandlerC>
   2bd12:	be00      	bkpt	0x0000
   2bd14:	46c0      	nop			; (mov r8, r8)
   2bd16:	46bd      	mov	sp, r7
   2bd18:	bd80      	pop	{r7, pc}
	...

0002bd1c <HardFault_HandlerC>:
   2bd1c:	b580      	push	{r7, lr}
   2bd1e:	b090      	sub	sp, #64	; 0x40
   2bd20:	af00      	add	r7, sp, #0
   2bd22:	6078      	str	r0, [r7, #4]
   2bd24:	687b      	ldr	r3, [r7, #4]
   2bd26:	681b      	ldr	r3, [r3, #0]
   2bd28:	63fb      	str	r3, [r7, #60]	; 0x3c
   2bd2a:	687b      	ldr	r3, [r7, #4]
   2bd2c:	685b      	ldr	r3, [r3, #4]
   2bd2e:	63bb      	str	r3, [r7, #56]	; 0x38
   2bd30:	687b      	ldr	r3, [r7, #4]
   2bd32:	689b      	ldr	r3, [r3, #8]
   2bd34:	637b      	str	r3, [r7, #52]	; 0x34
   2bd36:	687b      	ldr	r3, [r7, #4]
   2bd38:	68db      	ldr	r3, [r3, #12]
   2bd3a:	633b      	str	r3, [r7, #48]	; 0x30
   2bd3c:	687b      	ldr	r3, [r7, #4]
   2bd3e:	691b      	ldr	r3, [r3, #16]
   2bd40:	62fb      	str	r3, [r7, #44]	; 0x2c
   2bd42:	687b      	ldr	r3, [r7, #4]
   2bd44:	695b      	ldr	r3, [r3, #20]
   2bd46:	62bb      	str	r3, [r7, #40]	; 0x28
   2bd48:	687b      	ldr	r3, [r7, #4]
   2bd4a:	699b      	ldr	r3, [r3, #24]
   2bd4c:	627b      	str	r3, [r7, #36]	; 0x24
   2bd4e:	687b      	ldr	r3, [r7, #4]
   2bd50:	69db      	ldr	r3, [r3, #28]
   2bd52:	623b      	str	r3, [r7, #32]
   2bd54:	4b0b      	ldr	r3, [pc, #44]	; (2bd84 <HardFault_HandlerC+0x68>)
   2bd56:	681b      	ldr	r3, [r3, #0]
   2bd58:	61fb      	str	r3, [r7, #28]
   2bd5a:	4b0b      	ldr	r3, [pc, #44]	; (2bd88 <HardFault_HandlerC+0x6c>)
   2bd5c:	681b      	ldr	r3, [r3, #0]
   2bd5e:	61bb      	str	r3, [r7, #24]
   2bd60:	4b0a      	ldr	r3, [pc, #40]	; (2bd8c <HardFault_HandlerC+0x70>)
   2bd62:	681b      	ldr	r3, [r3, #0]
   2bd64:	617b      	str	r3, [r7, #20]
   2bd66:	4b0a      	ldr	r3, [pc, #40]	; (2bd90 <HardFault_HandlerC+0x74>)
   2bd68:	681b      	ldr	r3, [r3, #0]
   2bd6a:	613b      	str	r3, [r7, #16]
   2bd6c:	4b09      	ldr	r3, [pc, #36]	; (2bd94 <HardFault_HandlerC+0x78>)
   2bd6e:	681b      	ldr	r3, [r3, #0]
   2bd70:	60bb      	str	r3, [r7, #8]
   2bd72:	4b09      	ldr	r3, [pc, #36]	; (2bd98 <HardFault_HandlerC+0x7c>)
   2bd74:	681b      	ldr	r3, [r3, #0]
   2bd76:	60fb      	str	r3, [r7, #12]
   2bd78:	be00      	bkpt	0x0000
   2bd7a:	46c0      	nop			; (mov r8, r8)
   2bd7c:	46bd      	mov	sp, r7
   2bd7e:	b010      	add	sp, #64	; 0x40
   2bd80:	bd80      	pop	{r7, pc}
   2bd82:	46c0      	nop			; (mov r8, r8)
   2bd84:	e000ed28 	.word	0xe000ed28
   2bd88:	e000ed2c 	.word	0xe000ed2c
   2bd8c:	e000ed30 	.word	0xe000ed30
   2bd90:	e000ed3c 	.word	0xe000ed3c
   2bd94:	e000ed34 	.word	0xe000ed34
   2bd98:	e000ed38 	.word	0xe000ed38

0002bd9c <_read>:
   2bd9c:	b580      	push	{r7, lr}
   2bd9e:	b086      	sub	sp, #24
   2bda0:	af00      	add	r7, sp, #0
   2bda2:	60f8      	str	r0, [r7, #12]
   2bda4:	60b9      	str	r1, [r7, #8]
   2bda6:	607a      	str	r2, [r7, #4]
   2bda8:	2300      	movs	r3, #0
   2bdaa:	617b      	str	r3, [r7, #20]
   2bdac:	68fb      	ldr	r3, [r7, #12]
   2bdae:	2b00      	cmp	r3, #0
   2bdb0:	d012      	beq.n	2bdd8 <_read+0x3c>
   2bdb2:	2301      	movs	r3, #1
   2bdb4:	425b      	negs	r3, r3
   2bdb6:	e013      	b.n	2bde0 <_read+0x44>
   2bdb8:	4b0b      	ldr	r3, [pc, #44]	; (2bde8 <_read+0x4c>)
   2bdba:	681a      	ldr	r2, [r3, #0]
   2bdbc:	4b0b      	ldr	r3, [pc, #44]	; (2bdec <_read+0x50>)
   2bdbe:	681b      	ldr	r3, [r3, #0]
   2bdc0:	68b9      	ldr	r1, [r7, #8]
   2bdc2:	0018      	movs	r0, r3
   2bdc4:	4790      	blx	r2
   2bdc6:	68bb      	ldr	r3, [r7, #8]
   2bdc8:	3301      	adds	r3, #1
   2bdca:	60bb      	str	r3, [r7, #8]
   2bdcc:	697b      	ldr	r3, [r7, #20]
   2bdce:	3301      	adds	r3, #1
   2bdd0:	617b      	str	r3, [r7, #20]
   2bdd2:	687b      	ldr	r3, [r7, #4]
   2bdd4:	3b01      	subs	r3, #1
   2bdd6:	607b      	str	r3, [r7, #4]
   2bdd8:	687b      	ldr	r3, [r7, #4]
   2bdda:	2b00      	cmp	r3, #0
   2bddc:	dcec      	bgt.n	2bdb8 <_read+0x1c>
   2bdde:	697b      	ldr	r3, [r7, #20]
   2bde0:	0018      	movs	r0, r3
   2bde2:	46bd      	mov	sp, r7
   2bde4:	b006      	add	sp, #24
   2bde6:	bd80      	pop	{r7, pc}
   2bde8:	20005870 	.word	0x20005870
   2bdec:	20005878 	.word	0x20005878

0002bdf0 <_write>:
   2bdf0:	b580      	push	{r7, lr}
   2bdf2:	b086      	sub	sp, #24
   2bdf4:	af00      	add	r7, sp, #0
   2bdf6:	60f8      	str	r0, [r7, #12]
   2bdf8:	60b9      	str	r1, [r7, #8]
   2bdfa:	607a      	str	r2, [r7, #4]
   2bdfc:	2300      	movs	r3, #0
   2bdfe:	617b      	str	r3, [r7, #20]
   2be00:	68fb      	ldr	r3, [r7, #12]
   2be02:	2b01      	cmp	r3, #1
   2be04:	d01d      	beq.n	2be42 <_write+0x52>
   2be06:	68fb      	ldr	r3, [r7, #12]
   2be08:	2b02      	cmp	r3, #2
   2be0a:	d01a      	beq.n	2be42 <_write+0x52>
   2be0c:	68fb      	ldr	r3, [r7, #12]
   2be0e:	2b03      	cmp	r3, #3
   2be10:	d017      	beq.n	2be42 <_write+0x52>
   2be12:	2301      	movs	r3, #1
   2be14:	425b      	negs	r3, r3
   2be16:	e018      	b.n	2be4a <_write+0x5a>
   2be18:	4b0e      	ldr	r3, [pc, #56]	; (2be54 <_write+0x64>)
   2be1a:	681a      	ldr	r2, [r3, #0]
   2be1c:	4b0e      	ldr	r3, [pc, #56]	; (2be58 <_write+0x68>)
   2be1e:	6818      	ldr	r0, [r3, #0]
   2be20:	68bb      	ldr	r3, [r7, #8]
   2be22:	1c59      	adds	r1, r3, #1
   2be24:	60b9      	str	r1, [r7, #8]
   2be26:	781b      	ldrb	r3, [r3, #0]
   2be28:	0019      	movs	r1, r3
   2be2a:	4790      	blx	r2
   2be2c:	1e03      	subs	r3, r0, #0
   2be2e:	da02      	bge.n	2be36 <_write+0x46>
   2be30:	2301      	movs	r3, #1
   2be32:	425b      	negs	r3, r3
   2be34:	e009      	b.n	2be4a <_write+0x5a>
   2be36:	697b      	ldr	r3, [r7, #20]
   2be38:	3301      	adds	r3, #1
   2be3a:	617b      	str	r3, [r7, #20]
   2be3c:	687b      	ldr	r3, [r7, #4]
   2be3e:	3b01      	subs	r3, #1
   2be40:	607b      	str	r3, [r7, #4]
   2be42:	687b      	ldr	r3, [r7, #4]
   2be44:	2b00      	cmp	r3, #0
   2be46:	d1e7      	bne.n	2be18 <_write+0x28>
   2be48:	697b      	ldr	r3, [r7, #20]
   2be4a:	0018      	movs	r0, r3
   2be4c:	46bd      	mov	sp, r7
   2be4e:	b006      	add	sp, #24
   2be50:	bd80      	pop	{r7, pc}
   2be52:	46c0      	nop			; (mov r8, r8)
   2be54:	20005874 	.word	0x20005874
   2be58:	20005878 	.word	0x20005878

0002be5c <_sbrk>:
   2be5c:	b580      	push	{r7, lr}
   2be5e:	b084      	sub	sp, #16
   2be60:	af00      	add	r7, sp, #0
   2be62:	6078      	str	r0, [r7, #4]
   2be64:	4b0a      	ldr	r3, [pc, #40]	; (2be90 <_sbrk+0x34>)
   2be66:	681b      	ldr	r3, [r3, #0]
   2be68:	2b00      	cmp	r3, #0
   2be6a:	d102      	bne.n	2be72 <_sbrk+0x16>
   2be6c:	4b08      	ldr	r3, [pc, #32]	; (2be90 <_sbrk+0x34>)
   2be6e:	4a09      	ldr	r2, [pc, #36]	; (2be94 <_sbrk+0x38>)
   2be70:	601a      	str	r2, [r3, #0]
   2be72:	4b07      	ldr	r3, [pc, #28]	; (2be90 <_sbrk+0x34>)
   2be74:	681b      	ldr	r3, [r3, #0]
   2be76:	60fb      	str	r3, [r7, #12]
   2be78:	4b05      	ldr	r3, [pc, #20]	; (2be90 <_sbrk+0x34>)
   2be7a:	681a      	ldr	r2, [r3, #0]
   2be7c:	687b      	ldr	r3, [r7, #4]
   2be7e:	18d2      	adds	r2, r2, r3
   2be80:	4b03      	ldr	r3, [pc, #12]	; (2be90 <_sbrk+0x34>)
   2be82:	601a      	str	r2, [r3, #0]
   2be84:	68fb      	ldr	r3, [r7, #12]
   2be86:	0018      	movs	r0, r3
   2be88:	46bd      	mov	sp, r7
   2be8a:	b004      	add	sp, #16
   2be8c:	bd80      	pop	{r7, pc}
   2be8e:	46c0      	nop			; (mov r8, r8)
   2be90:	20003f30 	.word	0x20003f30
   2be94:	200078d8 	.word	0x200078d8

0002be98 <_close>:
   2be98:	b580      	push	{r7, lr}
   2be9a:	b082      	sub	sp, #8
   2be9c:	af00      	add	r7, sp, #0
   2be9e:	6078      	str	r0, [r7, #4]
   2bea0:	2301      	movs	r3, #1
   2bea2:	425b      	negs	r3, r3
   2bea4:	0018      	movs	r0, r3
   2bea6:	46bd      	mov	sp, r7
   2bea8:	b002      	add	sp, #8
   2beaa:	bd80      	pop	{r7, pc}

0002beac <_fstat>:
   2beac:	b580      	push	{r7, lr}
   2beae:	b082      	sub	sp, #8
   2beb0:	af00      	add	r7, sp, #0
   2beb2:	6078      	str	r0, [r7, #4]
   2beb4:	6039      	str	r1, [r7, #0]
   2beb6:	683b      	ldr	r3, [r7, #0]
   2beb8:	2280      	movs	r2, #128	; 0x80
   2beba:	0192      	lsls	r2, r2, #6
   2bebc:	605a      	str	r2, [r3, #4]
   2bebe:	2300      	movs	r3, #0
   2bec0:	0018      	movs	r0, r3
   2bec2:	46bd      	mov	sp, r7
   2bec4:	b002      	add	sp, #8
   2bec6:	bd80      	pop	{r7, pc}

0002bec8 <_isatty>:
   2bec8:	b580      	push	{r7, lr}
   2beca:	b082      	sub	sp, #8
   2becc:	af00      	add	r7, sp, #0
   2bece:	6078      	str	r0, [r7, #4]
   2bed0:	2301      	movs	r3, #1
   2bed2:	0018      	movs	r0, r3
   2bed4:	46bd      	mov	sp, r7
   2bed6:	b002      	add	sp, #8
   2bed8:	bd80      	pop	{r7, pc}

0002beda <_lseek>:
   2beda:	b580      	push	{r7, lr}
   2bedc:	b084      	sub	sp, #16
   2bede:	af00      	add	r7, sp, #0
   2bee0:	60f8      	str	r0, [r7, #12]
   2bee2:	60b9      	str	r1, [r7, #8]
   2bee4:	607a      	str	r2, [r7, #4]
   2bee6:	2300      	movs	r3, #0
   2bee8:	0018      	movs	r0, r3
   2beea:	46bd      	mov	sp, r7
   2beec:	b004      	add	sp, #16
   2beee:	bd80      	pop	{r7, pc}

0002bef0 <rtc_calendar_get_time_defaults>:
   2bef0:	b580      	push	{r7, lr}
   2bef2:	b082      	sub	sp, #8
   2bef4:	af00      	add	r7, sp, #0
   2bef6:	6078      	str	r0, [r7, #4]
   2bef8:	687b      	ldr	r3, [r7, #4]
   2befa:	2200      	movs	r2, #0
   2befc:	701a      	strb	r2, [r3, #0]
   2befe:	687b      	ldr	r3, [r7, #4]
   2bf00:	2200      	movs	r2, #0
   2bf02:	705a      	strb	r2, [r3, #1]
   2bf04:	687b      	ldr	r3, [r7, #4]
   2bf06:	2200      	movs	r2, #0
   2bf08:	709a      	strb	r2, [r3, #2]
   2bf0a:	687b      	ldr	r3, [r7, #4]
   2bf0c:	2200      	movs	r2, #0
   2bf0e:	70da      	strb	r2, [r3, #3]
   2bf10:	687b      	ldr	r3, [r7, #4]
   2bf12:	2201      	movs	r2, #1
   2bf14:	711a      	strb	r2, [r3, #4]
   2bf16:	687b      	ldr	r3, [r7, #4]
   2bf18:	2201      	movs	r2, #1
   2bf1a:	715a      	strb	r2, [r3, #5]
   2bf1c:	687b      	ldr	r3, [r7, #4]
   2bf1e:	22fa      	movs	r2, #250	; 0xfa
   2bf20:	00d2      	lsls	r2, r2, #3
   2bf22:	80da      	strh	r2, [r3, #6]
   2bf24:	46c0      	nop			; (mov r8, r8)
   2bf26:	46bd      	mov	sp, r7
   2bf28:	b002      	add	sp, #8
   2bf2a:	bd80      	pop	{r7, pc}

0002bf2c <rtc_calendar_get_config_defaults>:
   2bf2c:	b580      	push	{r7, lr}
   2bf2e:	b086      	sub	sp, #24
   2bf30:	af00      	add	r7, sp, #0
   2bf32:	6078      	str	r0, [r7, #4]
   2bf34:	230c      	movs	r3, #12
   2bf36:	18fb      	adds	r3, r7, r3
   2bf38:	0018      	movs	r0, r3
   2bf3a:	4b23      	ldr	r3, [pc, #140]	; (2bfc8 <rtc_calendar_get_config_defaults+0x9c>)
   2bf3c:	4798      	blx	r3
   2bf3e:	687b      	ldr	r3, [r7, #4]
   2bf40:	22a0      	movs	r2, #160	; 0xa0
   2bf42:	0112      	lsls	r2, r2, #4
   2bf44:	801a      	strh	r2, [r3, #0]
   2bf46:	687b      	ldr	r3, [r7, #4]
   2bf48:	2200      	movs	r2, #0
   2bf4a:	709a      	strb	r2, [r3, #2]
   2bf4c:	687b      	ldr	r3, [r7, #4]
   2bf4e:	2200      	movs	r2, #0
   2bf50:	70da      	strb	r2, [r3, #3]
   2bf52:	687b      	ldr	r3, [r7, #4]
   2bf54:	2200      	movs	r2, #0
   2bf56:	711a      	strb	r2, [r3, #4]
   2bf58:	687b      	ldr	r3, [r7, #4]
   2bf5a:	22fa      	movs	r2, #250	; 0xfa
   2bf5c:	00d2      	lsls	r2, r2, #3
   2bf5e:	80da      	strh	r2, [r3, #6]
   2bf60:	2317      	movs	r3, #23
   2bf62:	18fb      	adds	r3, r7, r3
   2bf64:	2200      	movs	r2, #0
   2bf66:	701a      	strb	r2, [r3, #0]
   2bf68:	e025      	b.n	2bfb6 <rtc_calendar_get_config_defaults+0x8a>
   2bf6a:	2317      	movs	r3, #23
   2bf6c:	18fb      	adds	r3, r7, r3
   2bf6e:	781a      	ldrb	r2, [r3, #0]
   2bf70:	6879      	ldr	r1, [r7, #4]
   2bf72:	2008      	movs	r0, #8
   2bf74:	0013      	movs	r3, r2
   2bf76:	009b      	lsls	r3, r3, #2
   2bf78:	189b      	adds	r3, r3, r2
   2bf7a:	005b      	lsls	r3, r3, #1
   2bf7c:	18cb      	adds	r3, r1, r3
   2bf7e:	181a      	adds	r2, r3, r0
   2bf80:	230c      	movs	r3, #12
   2bf82:	18fb      	adds	r3, r7, r3
   2bf84:	0010      	movs	r0, r2
   2bf86:	0019      	movs	r1, r3
   2bf88:	2308      	movs	r3, #8
   2bf8a:	001a      	movs	r2, r3
   2bf8c:	4b0f      	ldr	r3, [pc, #60]	; (2bfcc <rtc_calendar_get_config_defaults+0xa0>)
   2bf8e:	4798      	blx	r3
   2bf90:	2317      	movs	r3, #23
   2bf92:	18fb      	adds	r3, r7, r3
   2bf94:	781a      	ldrb	r2, [r3, #0]
   2bf96:	6879      	ldr	r1, [r7, #4]
   2bf98:	0013      	movs	r3, r2
   2bf9a:	009b      	lsls	r3, r3, #2
   2bf9c:	189b      	adds	r3, r3, r2
   2bf9e:	005b      	lsls	r3, r3, #1
   2bfa0:	18cb      	adds	r3, r1, r3
   2bfa2:	3310      	adds	r3, #16
   2bfa4:	2206      	movs	r2, #6
   2bfa6:	701a      	strb	r2, [r3, #0]
   2bfa8:	2317      	movs	r3, #23
   2bfaa:	18fb      	adds	r3, r7, r3
   2bfac:	781a      	ldrb	r2, [r3, #0]
   2bfae:	2317      	movs	r3, #23
   2bfb0:	18fb      	adds	r3, r7, r3
   2bfb2:	3201      	adds	r2, #1
   2bfb4:	701a      	strb	r2, [r3, #0]
   2bfb6:	2317      	movs	r3, #23
   2bfb8:	18fb      	adds	r3, r7, r3
   2bfba:	781b      	ldrb	r3, [r3, #0]
   2bfbc:	2b00      	cmp	r3, #0
   2bfbe:	d0d4      	beq.n	2bf6a <rtc_calendar_get_config_defaults+0x3e>
   2bfc0:	46c0      	nop			; (mov r8, r8)
   2bfc2:	46bd      	mov	sp, r7
   2bfc4:	b006      	add	sp, #24
   2bfc6:	bd80      	pop	{r7, pc}
   2bfc8:	0002bef1 	.word	0x0002bef1
   2bfcc:	000356d1 	.word	0x000356d1

0002bfd0 <configure_rtc_calendar>:
   2bfd0:	b580      	push	{r7, lr}
   2bfd2:	b088      	sub	sp, #32
   2bfd4:	af00      	add	r7, sp, #0
   2bfd6:	230c      	movs	r3, #12
   2bfd8:	18fb      	adds	r3, r7, r3
   2bfda:	0018      	movs	r0, r3
   2bfdc:	4b1a      	ldr	r3, [pc, #104]	; (2c048 <configure_rtc_calendar+0x78>)
   2bfde:	4798      	blx	r3
   2bfe0:	1d3b      	adds	r3, r7, #4
   2bfe2:	0018      	movs	r0, r3
   2bfe4:	4b19      	ldr	r3, [pc, #100]	; (2c04c <configure_rtc_calendar+0x7c>)
   2bfe6:	4798      	blx	r3
   2bfe8:	1d3b      	adds	r3, r7, #4
   2bfea:	4a19      	ldr	r2, [pc, #100]	; (2c050 <configure_rtc_calendar+0x80>)
   2bfec:	80da      	strh	r2, [r3, #6]
   2bfee:	1d3b      	adds	r3, r7, #4
   2bff0:	2201      	movs	r2, #1
   2bff2:	715a      	strb	r2, [r3, #5]
   2bff4:	1d3b      	adds	r3, r7, #4
   2bff6:	2201      	movs	r2, #1
   2bff8:	711a      	strb	r2, [r3, #4]
   2bffa:	1d3b      	adds	r3, r7, #4
   2bffc:	2200      	movs	r2, #0
   2bffe:	709a      	strb	r2, [r3, #2]
   2c000:	1d3b      	adds	r3, r7, #4
   2c002:	2200      	movs	r2, #0
   2c004:	705a      	strb	r2, [r3, #1]
   2c006:	1d3b      	adds	r3, r7, #4
   2c008:	2204      	movs	r2, #4
   2c00a:	701a      	strb	r2, [r3, #0]
   2c00c:	230c      	movs	r3, #12
   2c00e:	18fb      	adds	r3, r7, r3
   2c010:	2201      	movs	r2, #1
   2c012:	711a      	strb	r2, [r3, #4]
   2c014:	230c      	movs	r3, #12
   2c016:	18fb      	adds	r3, r7, r3
   2c018:	1d3a      	adds	r2, r7, #4
   2c01a:	3308      	adds	r3, #8
   2c01c:	ca03      	ldmia	r2!, {r0, r1}
   2c01e:	c303      	stmia	r3!, {r0, r1}
   2c020:	230c      	movs	r3, #12
   2c022:	18fb      	adds	r3, r7, r3
   2c024:	2206      	movs	r2, #6
   2c026:	741a      	strb	r2, [r3, #16]
   2c028:	230c      	movs	r3, #12
   2c02a:	18fa      	adds	r2, r7, r3
   2c02c:	4909      	ldr	r1, [pc, #36]	; (2c054 <configure_rtc_calendar+0x84>)
   2c02e:	4b0a      	ldr	r3, [pc, #40]	; (2c058 <configure_rtc_calendar+0x88>)
   2c030:	0018      	movs	r0, r3
   2c032:	4b0a      	ldr	r3, [pc, #40]	; (2c05c <configure_rtc_calendar+0x8c>)
   2c034:	4798      	blx	r3
   2c036:	4b08      	ldr	r3, [pc, #32]	; (2c058 <configure_rtc_calendar+0x88>)
   2c038:	0018      	movs	r0, r3
   2c03a:	4b09      	ldr	r3, [pc, #36]	; (2c060 <configure_rtc_calendar+0x90>)
   2c03c:	4798      	blx	r3
   2c03e:	46c0      	nop			; (mov r8, r8)
   2c040:	46bd      	mov	sp, r7
   2c042:	b008      	add	sp, #32
   2c044:	bd80      	pop	{r7, pc}
   2c046:	46c0      	nop			; (mov r8, r8)
   2c048:	0002bf2d 	.word	0x0002bf2d
   2c04c:	0002bef1 	.word	0x0002bef1
   2c050:	000007de 	.word	0x000007de
   2c054:	40001400 	.word	0x40001400
   2c058:	2000587c 	.word	0x2000587c
   2c05c:	00027b0d 	.word	0x00027b0d
   2c060:	00027839 	.word	0x00027839

0002c064 <disk_initialize>:
   2c064:	b590      	push	{r4, r7, lr}
   2c066:	b085      	sub	sp, #20
   2c068:	af00      	add	r7, sp, #0
   2c06a:	0002      	movs	r2, r0
   2c06c:	1dfb      	adds	r3, r7, #7
   2c06e:	701a      	strb	r2, [r3, #0]
   2c070:	4b1a      	ldr	r3, [pc, #104]	; (2c0dc <disk_initialize+0x78>)
   2c072:	4798      	blx	r3
   2c074:	1dfb      	adds	r3, r7, #7
   2c076:	781b      	ldrb	r3, [r3, #0]
   2c078:	2b01      	cmp	r3, #1
   2c07a:	d901      	bls.n	2c080 <disk_initialize+0x1c>
   2c07c:	2301      	movs	r3, #1
   2c07e:	e029      	b.n	2c0d4 <disk_initialize+0x70>
   2c080:	2300      	movs	r3, #0
   2c082:	60fb      	str	r3, [r7, #12]
   2c084:	e010      	b.n	2c0a8 <disk_initialize+0x44>
   2c086:	230b      	movs	r3, #11
   2c088:	18fc      	adds	r4, r7, r3
   2c08a:	1dfb      	adds	r3, r7, #7
   2c08c:	781b      	ldrb	r3, [r3, #0]
   2c08e:	0018      	movs	r0, r3
   2c090:	4b13      	ldr	r3, [pc, #76]	; (2c0e0 <disk_initialize+0x7c>)
   2c092:	4798      	blx	r3
   2c094:	0003      	movs	r3, r0
   2c096:	7023      	strb	r3, [r4, #0]
   2c098:	230b      	movs	r3, #11
   2c09a:	18fb      	adds	r3, r7, r3
   2c09c:	781b      	ldrb	r3, [r3, #0]
   2c09e:	2b03      	cmp	r3, #3
   2c0a0:	d106      	bne.n	2c0b0 <disk_initialize+0x4c>
   2c0a2:	68fb      	ldr	r3, [r7, #12]
   2c0a4:	3301      	adds	r3, #1
   2c0a6:	60fb      	str	r3, [r7, #12]
   2c0a8:	68fb      	ldr	r3, [r7, #12]
   2c0aa:	2b01      	cmp	r3, #1
   2c0ac:	ddeb      	ble.n	2c086 <disk_initialize+0x22>
   2c0ae:	e000      	b.n	2c0b2 <disk_initialize+0x4e>
   2c0b0:	46c0      	nop			; (mov r8, r8)
   2c0b2:	230b      	movs	r3, #11
   2c0b4:	18fb      	adds	r3, r7, r3
   2c0b6:	781b      	ldrb	r3, [r3, #0]
   2c0b8:	2b00      	cmp	r3, #0
   2c0ba:	d001      	beq.n	2c0c0 <disk_initialize+0x5c>
   2c0bc:	2301      	movs	r3, #1
   2c0be:	e009      	b.n	2c0d4 <disk_initialize+0x70>
   2c0c0:	1dfb      	adds	r3, r7, #7
   2c0c2:	781b      	ldrb	r3, [r3, #0]
   2c0c4:	0018      	movs	r0, r3
   2c0c6:	4b07      	ldr	r3, [pc, #28]	; (2c0e4 <disk_initialize+0x80>)
   2c0c8:	4798      	blx	r3
   2c0ca:	1e03      	subs	r3, r0, #0
   2c0cc:	d001      	beq.n	2c0d2 <disk_initialize+0x6e>
   2c0ce:	2304      	movs	r3, #4
   2c0d0:	e000      	b.n	2c0d4 <disk_initialize+0x70>
   2c0d2:	2300      	movs	r3, #0
   2c0d4:	0018      	movs	r0, r3
   2c0d6:	46bd      	mov	sp, r7
   2c0d8:	b005      	add	sp, #20
   2c0da:	bd90      	pop	{r4, r7, pc}
   2c0dc:	0002bfd1 	.word	0x0002bfd1
   2c0e0:	00026d35 	.word	0x00026d35
   2c0e4:	00026ded 	.word	0x00026ded

0002c0e8 <disk_status>:
   2c0e8:	b580      	push	{r7, lr}
   2c0ea:	b082      	sub	sp, #8
   2c0ec:	af00      	add	r7, sp, #0
   2c0ee:	0002      	movs	r2, r0
   2c0f0:	1dfb      	adds	r3, r7, #7
   2c0f2:	701a      	strb	r2, [r3, #0]
   2c0f4:	1dfb      	adds	r3, r7, #7
   2c0f6:	781b      	ldrb	r3, [r3, #0]
   2c0f8:	0018      	movs	r0, r3
   2c0fa:	4b08      	ldr	r3, [pc, #32]	; (2c11c <disk_status+0x34>)
   2c0fc:	4798      	blx	r3
   2c0fe:	1e03      	subs	r3, r0, #0
   2c100:	d002      	beq.n	2c108 <disk_status+0x20>
   2c102:	2b02      	cmp	r3, #2
   2c104:	d002      	beq.n	2c10c <disk_status+0x24>
   2c106:	e003      	b.n	2c110 <disk_status+0x28>
   2c108:	2300      	movs	r3, #0
   2c10a:	e002      	b.n	2c112 <disk_status+0x2a>
   2c10c:	2303      	movs	r3, #3
   2c10e:	e000      	b.n	2c112 <disk_status+0x2a>
   2c110:	2301      	movs	r3, #1
   2c112:	0018      	movs	r0, r3
   2c114:	46bd      	mov	sp, r7
   2c116:	b002      	add	sp, #8
   2c118:	bd80      	pop	{r7, pc}
   2c11a:	46c0      	nop			; (mov r8, r8)
   2c11c:	00026d35 	.word	0x00026d35

0002c120 <disk_read>:
   2c120:	b590      	push	{r4, r7, lr}
   2c122:	b089      	sub	sp, #36	; 0x24
   2c124:	af00      	add	r7, sp, #0
   2c126:	60b9      	str	r1, [r7, #8]
   2c128:	607a      	str	r2, [r7, #4]
   2c12a:	0019      	movs	r1, r3
   2c12c:	230f      	movs	r3, #15
   2c12e:	18fb      	adds	r3, r7, r3
   2c130:	1c02      	adds	r2, r0, #0
   2c132:	701a      	strb	r2, [r3, #0]
   2c134:	230e      	movs	r3, #14
   2c136:	18fb      	adds	r3, r7, r3
   2c138:	1c0a      	adds	r2, r1, #0
   2c13a:	701a      	strb	r2, [r3, #0]
   2c13c:	231b      	movs	r3, #27
   2c13e:	18fc      	adds	r4, r7, r3
   2c140:	230f      	movs	r3, #15
   2c142:	18fb      	adds	r3, r7, r3
   2c144:	781b      	ldrb	r3, [r3, #0]
   2c146:	0018      	movs	r0, r3
   2c148:	4b28      	ldr	r3, [pc, #160]	; (2c1ec <disk_read+0xcc>)
   2c14a:	4798      	blx	r3
   2c14c:	0003      	movs	r3, r0
   2c14e:	7023      	strb	r3, [r4, #0]
   2c150:	231b      	movs	r3, #27
   2c152:	18fb      	adds	r3, r7, r3
   2c154:	781b      	ldrb	r3, [r3, #0]
   2c156:	2b00      	cmp	r3, #0
   2c158:	d101      	bne.n	2c15e <disk_read+0x3e>
   2c15a:	2301      	movs	r3, #1
   2c15c:	e042      	b.n	2c1e4 <disk_read+0xc4>
   2c15e:	2314      	movs	r3, #20
   2c160:	18fa      	adds	r2, r7, r3
   2c162:	230f      	movs	r3, #15
   2c164:	18fb      	adds	r3, r7, r3
   2c166:	781b      	ldrb	r3, [r3, #0]
   2c168:	0011      	movs	r1, r2
   2c16a:	0018      	movs	r0, r3
   2c16c:	4b20      	ldr	r3, [pc, #128]	; (2c1f0 <disk_read+0xd0>)
   2c16e:	4798      	blx	r3
   2c170:	230e      	movs	r3, #14
   2c172:	18fb      	adds	r3, r7, r3
   2c174:	781b      	ldrb	r3, [r3, #0]
   2c176:	221b      	movs	r2, #27
   2c178:	18ba      	adds	r2, r7, r2
   2c17a:	7812      	ldrb	r2, [r2, #0]
   2c17c:	4353      	muls	r3, r2
   2c17e:	001a      	movs	r2, r3
   2c180:	687b      	ldr	r3, [r7, #4]
   2c182:	18d2      	adds	r2, r2, r3
   2c184:	697b      	ldr	r3, [r7, #20]
   2c186:	3301      	adds	r3, #1
   2c188:	211b      	movs	r1, #27
   2c18a:	1879      	adds	r1, r7, r1
   2c18c:	7809      	ldrb	r1, [r1, #0]
   2c18e:	434b      	muls	r3, r1
   2c190:	429a      	cmp	r2, r3
   2c192:	d901      	bls.n	2c198 <disk_read+0x78>
   2c194:	2304      	movs	r3, #4
   2c196:	e025      	b.n	2c1e4 <disk_read+0xc4>
   2c198:	2300      	movs	r3, #0
   2c19a:	61fb      	str	r3, [r7, #28]
   2c19c:	e01b      	b.n	2c1d6 <disk_read+0xb6>
   2c19e:	231b      	movs	r3, #27
   2c1a0:	18fb      	adds	r3, r7, r3
   2c1a2:	781b      	ldrb	r3, [r3, #0]
   2c1a4:	69fa      	ldr	r2, [r7, #28]
   2c1a6:	435a      	muls	r2, r3
   2c1a8:	687b      	ldr	r3, [r7, #4]
   2c1aa:	18d1      	adds	r1, r2, r3
   2c1ac:	231b      	movs	r3, #27
   2c1ae:	18fb      	adds	r3, r7, r3
   2c1b0:	781b      	ldrb	r3, [r3, #0]
   2c1b2:	69fa      	ldr	r2, [r7, #28]
   2c1b4:	4353      	muls	r3, r2
   2c1b6:	025b      	lsls	r3, r3, #9
   2c1b8:	68ba      	ldr	r2, [r7, #8]
   2c1ba:	18d2      	adds	r2, r2, r3
   2c1bc:	230f      	movs	r3, #15
   2c1be:	18fb      	adds	r3, r7, r3
   2c1c0:	781b      	ldrb	r3, [r3, #0]
   2c1c2:	0018      	movs	r0, r3
   2c1c4:	4b0b      	ldr	r3, [pc, #44]	; (2c1f4 <disk_read+0xd4>)
   2c1c6:	4798      	blx	r3
   2c1c8:	1e03      	subs	r3, r0, #0
   2c1ca:	d001      	beq.n	2c1d0 <disk_read+0xb0>
   2c1cc:	2301      	movs	r3, #1
   2c1ce:	e009      	b.n	2c1e4 <disk_read+0xc4>
   2c1d0:	69fb      	ldr	r3, [r7, #28]
   2c1d2:	3301      	adds	r3, #1
   2c1d4:	61fb      	str	r3, [r7, #28]
   2c1d6:	230e      	movs	r3, #14
   2c1d8:	18fb      	adds	r3, r7, r3
   2c1da:	781a      	ldrb	r2, [r3, #0]
   2c1dc:	69fb      	ldr	r3, [r7, #28]
   2c1de:	429a      	cmp	r2, r3
   2c1e0:	d8dd      	bhi.n	2c19e <disk_read+0x7e>
   2c1e2:	2300      	movs	r3, #0
   2c1e4:	0018      	movs	r0, r3
   2c1e6:	46bd      	mov	sp, r7
   2c1e8:	b009      	add	sp, #36	; 0x24
   2c1ea:	bd90      	pop	{r4, r7, pc}
   2c1ec:	00026dc1 	.word	0x00026dc1
   2c1f0:	00026d75 	.word	0x00026d75
   2c1f4:	00026e35 	.word	0x00026e35

0002c1f8 <disk_write>:
   2c1f8:	b590      	push	{r4, r7, lr}
   2c1fa:	b089      	sub	sp, #36	; 0x24
   2c1fc:	af00      	add	r7, sp, #0
   2c1fe:	60b9      	str	r1, [r7, #8]
   2c200:	607a      	str	r2, [r7, #4]
   2c202:	0019      	movs	r1, r3
   2c204:	230f      	movs	r3, #15
   2c206:	18fb      	adds	r3, r7, r3
   2c208:	1c02      	adds	r2, r0, #0
   2c20a:	701a      	strb	r2, [r3, #0]
   2c20c:	230e      	movs	r3, #14
   2c20e:	18fb      	adds	r3, r7, r3
   2c210:	1c0a      	adds	r2, r1, #0
   2c212:	701a      	strb	r2, [r3, #0]
   2c214:	231b      	movs	r3, #27
   2c216:	18fc      	adds	r4, r7, r3
   2c218:	230f      	movs	r3, #15
   2c21a:	18fb      	adds	r3, r7, r3
   2c21c:	781b      	ldrb	r3, [r3, #0]
   2c21e:	0018      	movs	r0, r3
   2c220:	4b28      	ldr	r3, [pc, #160]	; (2c2c4 <disk_write+0xcc>)
   2c222:	4798      	blx	r3
   2c224:	0003      	movs	r3, r0
   2c226:	7023      	strb	r3, [r4, #0]
   2c228:	231b      	movs	r3, #27
   2c22a:	18fb      	adds	r3, r7, r3
   2c22c:	781b      	ldrb	r3, [r3, #0]
   2c22e:	2b00      	cmp	r3, #0
   2c230:	d101      	bne.n	2c236 <disk_write+0x3e>
   2c232:	2301      	movs	r3, #1
   2c234:	e042      	b.n	2c2bc <disk_write+0xc4>
   2c236:	2314      	movs	r3, #20
   2c238:	18fa      	adds	r2, r7, r3
   2c23a:	230f      	movs	r3, #15
   2c23c:	18fb      	adds	r3, r7, r3
   2c23e:	781b      	ldrb	r3, [r3, #0]
   2c240:	0011      	movs	r1, r2
   2c242:	0018      	movs	r0, r3
   2c244:	4b20      	ldr	r3, [pc, #128]	; (2c2c8 <disk_write+0xd0>)
   2c246:	4798      	blx	r3
   2c248:	230e      	movs	r3, #14
   2c24a:	18fb      	adds	r3, r7, r3
   2c24c:	781b      	ldrb	r3, [r3, #0]
   2c24e:	221b      	movs	r2, #27
   2c250:	18ba      	adds	r2, r7, r2
   2c252:	7812      	ldrb	r2, [r2, #0]
   2c254:	4353      	muls	r3, r2
   2c256:	001a      	movs	r2, r3
   2c258:	687b      	ldr	r3, [r7, #4]
   2c25a:	18d2      	adds	r2, r2, r3
   2c25c:	697b      	ldr	r3, [r7, #20]
   2c25e:	3301      	adds	r3, #1
   2c260:	211b      	movs	r1, #27
   2c262:	1879      	adds	r1, r7, r1
   2c264:	7809      	ldrb	r1, [r1, #0]
   2c266:	434b      	muls	r3, r1
   2c268:	429a      	cmp	r2, r3
   2c26a:	d901      	bls.n	2c270 <disk_write+0x78>
   2c26c:	2304      	movs	r3, #4
   2c26e:	e025      	b.n	2c2bc <disk_write+0xc4>
   2c270:	2300      	movs	r3, #0
   2c272:	61fb      	str	r3, [r7, #28]
   2c274:	e01b      	b.n	2c2ae <disk_write+0xb6>
   2c276:	231b      	movs	r3, #27
   2c278:	18fb      	adds	r3, r7, r3
   2c27a:	781b      	ldrb	r3, [r3, #0]
   2c27c:	69fa      	ldr	r2, [r7, #28]
   2c27e:	435a      	muls	r2, r3
   2c280:	687b      	ldr	r3, [r7, #4]
   2c282:	18d1      	adds	r1, r2, r3
   2c284:	231b      	movs	r3, #27
   2c286:	18fb      	adds	r3, r7, r3
   2c288:	781b      	ldrb	r3, [r3, #0]
   2c28a:	69fa      	ldr	r2, [r7, #28]
   2c28c:	4353      	muls	r3, r2
   2c28e:	025b      	lsls	r3, r3, #9
   2c290:	68ba      	ldr	r2, [r7, #8]
   2c292:	18d2      	adds	r2, r2, r3
   2c294:	230f      	movs	r3, #15
   2c296:	18fb      	adds	r3, r7, r3
   2c298:	781b      	ldrb	r3, [r3, #0]
   2c29a:	0018      	movs	r0, r3
   2c29c:	4b0b      	ldr	r3, [pc, #44]	; (2c2cc <disk_write+0xd4>)
   2c29e:	4798      	blx	r3
   2c2a0:	1e03      	subs	r3, r0, #0
   2c2a2:	d001      	beq.n	2c2a8 <disk_write+0xb0>
   2c2a4:	2301      	movs	r3, #1
   2c2a6:	e009      	b.n	2c2bc <disk_write+0xc4>
   2c2a8:	69fb      	ldr	r3, [r7, #28]
   2c2aa:	3301      	adds	r3, #1
   2c2ac:	61fb      	str	r3, [r7, #28]
   2c2ae:	230e      	movs	r3, #14
   2c2b0:	18fb      	adds	r3, r7, r3
   2c2b2:	781a      	ldrb	r2, [r3, #0]
   2c2b4:	69fb      	ldr	r3, [r7, #28]
   2c2b6:	429a      	cmp	r2, r3
   2c2b8:	d8dd      	bhi.n	2c276 <disk_write+0x7e>
   2c2ba:	2300      	movs	r3, #0
   2c2bc:	0018      	movs	r0, r3
   2c2be:	46bd      	mov	sp, r7
   2c2c0:	b009      	add	sp, #36	; 0x24
   2c2c2:	bd90      	pop	{r4, r7, pc}
   2c2c4:	00026dc1 	.word	0x00026dc1
   2c2c8:	00026d75 	.word	0x00026d75
   2c2cc:	00026e89 	.word	0x00026e89

0002c2d0 <disk_ioctl>:
   2c2d0:	b590      	push	{r4, r7, lr}
   2c2d2:	b085      	sub	sp, #20
   2c2d4:	af00      	add	r7, sp, #0
   2c2d6:	603a      	str	r2, [r7, #0]
   2c2d8:	1dfb      	adds	r3, r7, #7
   2c2da:	1c02      	adds	r2, r0, #0
   2c2dc:	701a      	strb	r2, [r3, #0]
   2c2de:	1dbb      	adds	r3, r7, #6
   2c2e0:	1c0a      	adds	r2, r1, #0
   2c2e2:	701a      	strb	r2, [r3, #0]
   2c2e4:	230f      	movs	r3, #15
   2c2e6:	18fb      	adds	r3, r7, r3
   2c2e8:	2204      	movs	r2, #4
   2c2ea:	701a      	strb	r2, [r3, #0]
   2c2ec:	1dbb      	adds	r3, r7, #6
   2c2ee:	781b      	ldrb	r3, [r3, #0]
   2c2f0:	2b01      	cmp	r3, #1
   2c2f2:	d00f      	beq.n	2c314 <disk_ioctl+0x44>
   2c2f4:	dc02      	bgt.n	2c2fc <disk_ioctl+0x2c>
   2c2f6:	2b00      	cmp	r3, #0
   2c2f8:	d044      	beq.n	2c384 <disk_ioctl+0xb4>
   2c2fa:	e054      	b.n	2c3a6 <disk_ioctl+0xd6>
   2c2fc:	2b02      	cmp	r3, #2
   2c2fe:	d01a      	beq.n	2c336 <disk_ioctl+0x66>
   2c300:	2b03      	cmp	r3, #3
   2c302:	d150      	bne.n	2c3a6 <disk_ioctl+0xd6>
   2c304:	683b      	ldr	r3, [r7, #0]
   2c306:	2201      	movs	r2, #1
   2c308:	601a      	str	r2, [r3, #0]
   2c30a:	230f      	movs	r3, #15
   2c30c:	18fb      	adds	r3, r7, r3
   2c30e:	2200      	movs	r2, #0
   2c310:	701a      	strb	r2, [r3, #0]
   2c312:	e04c      	b.n	2c3ae <disk_ioctl+0xde>
   2c314:	2308      	movs	r3, #8
   2c316:	18fa      	adds	r2, r7, r3
   2c318:	1dfb      	adds	r3, r7, #7
   2c31a:	781b      	ldrb	r3, [r3, #0]
   2c31c:	0011      	movs	r1, r2
   2c31e:	0018      	movs	r0, r3
   2c320:	4b26      	ldr	r3, [pc, #152]	; (2c3bc <disk_ioctl+0xec>)
   2c322:	4798      	blx	r3
   2c324:	68bb      	ldr	r3, [r7, #8]
   2c326:	1c5a      	adds	r2, r3, #1
   2c328:	683b      	ldr	r3, [r7, #0]
   2c32a:	601a      	str	r2, [r3, #0]
   2c32c:	230f      	movs	r3, #15
   2c32e:	18fb      	adds	r3, r7, r3
   2c330:	2200      	movs	r2, #0
   2c332:	701a      	strb	r2, [r3, #0]
   2c334:	e03b      	b.n	2c3ae <disk_ioctl+0xde>
   2c336:	230e      	movs	r3, #14
   2c338:	18fc      	adds	r4, r7, r3
   2c33a:	1dfb      	adds	r3, r7, #7
   2c33c:	781b      	ldrb	r3, [r3, #0]
   2c33e:	0018      	movs	r0, r3
   2c340:	4b1f      	ldr	r3, [pc, #124]	; (2c3c0 <disk_ioctl+0xf0>)
   2c342:	4798      	blx	r3
   2c344:	0003      	movs	r3, r0
   2c346:	7023      	strb	r3, [r4, #0]
   2c348:	230e      	movs	r3, #14
   2c34a:	18fb      	adds	r3, r7, r3
   2c34c:	781b      	ldrb	r3, [r3, #0]
   2c34e:	2b01      	cmp	r3, #1
   2c350:	d010      	beq.n	2c374 <disk_ioctl+0xa4>
   2c352:	230e      	movs	r3, #14
   2c354:	18fb      	adds	r3, r7, r3
   2c356:	781b      	ldrb	r3, [r3, #0]
   2c358:	2b02      	cmp	r3, #2
   2c35a:	d00b      	beq.n	2c374 <disk_ioctl+0xa4>
   2c35c:	230e      	movs	r3, #14
   2c35e:	18fb      	adds	r3, r7, r3
   2c360:	781b      	ldrb	r3, [r3, #0]
   2c362:	2b04      	cmp	r3, #4
   2c364:	d006      	beq.n	2c374 <disk_ioctl+0xa4>
   2c366:	230e      	movs	r3, #14
   2c368:	18fb      	adds	r3, r7, r3
   2c36a:	781b      	ldrb	r3, [r3, #0]
   2c36c:	2b08      	cmp	r3, #8
   2c36e:	d001      	beq.n	2c374 <disk_ioctl+0xa4>
   2c370:	2301      	movs	r3, #1
   2c372:	e01f      	b.n	2c3b4 <disk_ioctl+0xe4>
   2c374:	683b      	ldr	r3, [r7, #0]
   2c376:	2200      	movs	r2, #0
   2c378:	701a      	strb	r2, [r3, #0]
   2c37a:	230f      	movs	r3, #15
   2c37c:	18fb      	adds	r3, r7, r3
   2c37e:	2200      	movs	r2, #0
   2c380:	701a      	strb	r2, [r3, #0]
   2c382:	e014      	b.n	2c3ae <disk_ioctl+0xde>
   2c384:	1dfb      	adds	r3, r7, #7
   2c386:	781b      	ldrb	r3, [r3, #0]
   2c388:	0018      	movs	r0, r3
   2c38a:	4b0e      	ldr	r3, [pc, #56]	; (2c3c4 <disk_ioctl+0xf4>)
   2c38c:	4798      	blx	r3
   2c38e:	1e03      	subs	r3, r0, #0
   2c390:	d104      	bne.n	2c39c <disk_ioctl+0xcc>
   2c392:	230f      	movs	r3, #15
   2c394:	18fb      	adds	r3, r7, r3
   2c396:	2200      	movs	r2, #0
   2c398:	701a      	strb	r2, [r3, #0]
   2c39a:	e008      	b.n	2c3ae <disk_ioctl+0xde>
   2c39c:	230f      	movs	r3, #15
   2c39e:	18fb      	adds	r3, r7, r3
   2c3a0:	2203      	movs	r2, #3
   2c3a2:	701a      	strb	r2, [r3, #0]
   2c3a4:	e003      	b.n	2c3ae <disk_ioctl+0xde>
   2c3a6:	230f      	movs	r3, #15
   2c3a8:	18fb      	adds	r3, r7, r3
   2c3aa:	2204      	movs	r2, #4
   2c3ac:	701a      	strb	r2, [r3, #0]
   2c3ae:	230f      	movs	r3, #15
   2c3b0:	18fb      	adds	r3, r7, r3
   2c3b2:	781b      	ldrb	r3, [r3, #0]
   2c3b4:	0018      	movs	r0, r3
   2c3b6:	46bd      	mov	sp, r7
   2c3b8:	b005      	add	sp, #20
   2c3ba:	bd90      	pop	{r4, r7, pc}
   2c3bc:	00026d75 	.word	0x00026d75
   2c3c0:	00026dc1 	.word	0x00026dc1
   2c3c4:	00026d35 	.word	0x00026d35

0002c3c8 <get_fattime>:
   2c3c8:	b580      	push	{r7, lr}
   2c3ca:	b084      	sub	sp, #16
   2c3cc:	af00      	add	r7, sp, #0
   2c3ce:	1d3a      	adds	r2, r7, #4
   2c3d0:	4b12      	ldr	r3, [pc, #72]	; (2c41c <get_fattime+0x54>)
   2c3d2:	0011      	movs	r1, r2
   2c3d4:	0018      	movs	r0, r3
   2c3d6:	4b12      	ldr	r3, [pc, #72]	; (2c420 <get_fattime+0x58>)
   2c3d8:	4798      	blx	r3
   2c3da:	1d3b      	adds	r3, r7, #4
   2c3dc:	88db      	ldrh	r3, [r3, #6]
   2c3de:	4a11      	ldr	r2, [pc, #68]	; (2c424 <get_fattime+0x5c>)
   2c3e0:	4694      	mov	ip, r2
   2c3e2:	4463      	add	r3, ip
   2c3e4:	065a      	lsls	r2, r3, #25
   2c3e6:	1d3b      	adds	r3, r7, #4
   2c3e8:	795b      	ldrb	r3, [r3, #5]
   2c3ea:	055b      	lsls	r3, r3, #21
   2c3ec:	431a      	orrs	r2, r3
   2c3ee:	1d3b      	adds	r3, r7, #4
   2c3f0:	791b      	ldrb	r3, [r3, #4]
   2c3f2:	041b      	lsls	r3, r3, #16
   2c3f4:	431a      	orrs	r2, r3
   2c3f6:	1d3b      	adds	r3, r7, #4
   2c3f8:	789b      	ldrb	r3, [r3, #2]
   2c3fa:	02db      	lsls	r3, r3, #11
   2c3fc:	431a      	orrs	r2, r3
   2c3fe:	1d3b      	adds	r3, r7, #4
   2c400:	785b      	ldrb	r3, [r3, #1]
   2c402:	015b      	lsls	r3, r3, #5
   2c404:	4313      	orrs	r3, r2
   2c406:	1d3a      	adds	r2, r7, #4
   2c408:	7812      	ldrb	r2, [r2, #0]
   2c40a:	0852      	lsrs	r2, r2, #1
   2c40c:	b2d2      	uxtb	r2, r2
   2c40e:	4313      	orrs	r3, r2
   2c410:	60fb      	str	r3, [r7, #12]
   2c412:	68fb      	ldr	r3, [r7, #12]
   2c414:	0018      	movs	r0, r3
   2c416:	46bd      	mov	sp, r7
   2c418:	b004      	add	sp, #16
   2c41a:	bd80      	pop	{r7, pc}
   2c41c:	2000587c 	.word	0x2000587c
   2c420:	00027ba1 	.word	0x00027ba1
   2c424:	fffff844 	.word	0xfffff844

0002c428 <mem_cpy>:
   2c428:	b580      	push	{r7, lr}
   2c42a:	b086      	sub	sp, #24
   2c42c:	af00      	add	r7, sp, #0
   2c42e:	60f8      	str	r0, [r7, #12]
   2c430:	60b9      	str	r1, [r7, #8]
   2c432:	607a      	str	r2, [r7, #4]
   2c434:	68fb      	ldr	r3, [r7, #12]
   2c436:	617b      	str	r3, [r7, #20]
   2c438:	68bb      	ldr	r3, [r7, #8]
   2c43a:	613b      	str	r3, [r7, #16]
   2c43c:	e007      	b.n	2c44e <mem_cpy+0x26>
   2c43e:	697b      	ldr	r3, [r7, #20]
   2c440:	1c5a      	adds	r2, r3, #1
   2c442:	617a      	str	r2, [r7, #20]
   2c444:	693a      	ldr	r2, [r7, #16]
   2c446:	1c51      	adds	r1, r2, #1
   2c448:	6139      	str	r1, [r7, #16]
   2c44a:	7812      	ldrb	r2, [r2, #0]
   2c44c:	701a      	strb	r2, [r3, #0]
   2c44e:	687b      	ldr	r3, [r7, #4]
   2c450:	1e5a      	subs	r2, r3, #1
   2c452:	607a      	str	r2, [r7, #4]
   2c454:	2b00      	cmp	r3, #0
   2c456:	d1f2      	bne.n	2c43e <mem_cpy+0x16>
   2c458:	46c0      	nop			; (mov r8, r8)
   2c45a:	46bd      	mov	sp, r7
   2c45c:	b006      	add	sp, #24
   2c45e:	bd80      	pop	{r7, pc}

0002c460 <mem_set>:
   2c460:	b580      	push	{r7, lr}
   2c462:	b086      	sub	sp, #24
   2c464:	af00      	add	r7, sp, #0
   2c466:	60f8      	str	r0, [r7, #12]
   2c468:	60b9      	str	r1, [r7, #8]
   2c46a:	607a      	str	r2, [r7, #4]
   2c46c:	68fb      	ldr	r3, [r7, #12]
   2c46e:	617b      	str	r3, [r7, #20]
   2c470:	e005      	b.n	2c47e <mem_set+0x1e>
   2c472:	697b      	ldr	r3, [r7, #20]
   2c474:	1c5a      	adds	r2, r3, #1
   2c476:	617a      	str	r2, [r7, #20]
   2c478:	68ba      	ldr	r2, [r7, #8]
   2c47a:	b2d2      	uxtb	r2, r2
   2c47c:	701a      	strb	r2, [r3, #0]
   2c47e:	687b      	ldr	r3, [r7, #4]
   2c480:	1e5a      	subs	r2, r3, #1
   2c482:	607a      	str	r2, [r7, #4]
   2c484:	2b00      	cmp	r3, #0
   2c486:	d1f4      	bne.n	2c472 <mem_set+0x12>
   2c488:	46c0      	nop			; (mov r8, r8)
   2c48a:	46bd      	mov	sp, r7
   2c48c:	b006      	add	sp, #24
   2c48e:	bd80      	pop	{r7, pc}

0002c490 <mem_cmp>:
   2c490:	b580      	push	{r7, lr}
   2c492:	b088      	sub	sp, #32
   2c494:	af00      	add	r7, sp, #0
   2c496:	60f8      	str	r0, [r7, #12]
   2c498:	60b9      	str	r1, [r7, #8]
   2c49a:	607a      	str	r2, [r7, #4]
   2c49c:	68fb      	ldr	r3, [r7, #12]
   2c49e:	61fb      	str	r3, [r7, #28]
   2c4a0:	68bb      	ldr	r3, [r7, #8]
   2c4a2:	61bb      	str	r3, [r7, #24]
   2c4a4:	2300      	movs	r3, #0
   2c4a6:	617b      	str	r3, [r7, #20]
   2c4a8:	46c0      	nop			; (mov r8, r8)
   2c4aa:	687b      	ldr	r3, [r7, #4]
   2c4ac:	1e5a      	subs	r2, r3, #1
   2c4ae:	607a      	str	r2, [r7, #4]
   2c4b0:	2b00      	cmp	r3, #0
   2c4b2:	d00d      	beq.n	2c4d0 <mem_cmp+0x40>
   2c4b4:	69fb      	ldr	r3, [r7, #28]
   2c4b6:	1c5a      	adds	r2, r3, #1
   2c4b8:	61fa      	str	r2, [r7, #28]
   2c4ba:	781b      	ldrb	r3, [r3, #0]
   2c4bc:	0019      	movs	r1, r3
   2c4be:	69bb      	ldr	r3, [r7, #24]
   2c4c0:	1c5a      	adds	r2, r3, #1
   2c4c2:	61ba      	str	r2, [r7, #24]
   2c4c4:	781b      	ldrb	r3, [r3, #0]
   2c4c6:	1acb      	subs	r3, r1, r3
   2c4c8:	617b      	str	r3, [r7, #20]
   2c4ca:	697b      	ldr	r3, [r7, #20]
   2c4cc:	2b00      	cmp	r3, #0
   2c4ce:	d0ec      	beq.n	2c4aa <mem_cmp+0x1a>
   2c4d0:	697b      	ldr	r3, [r7, #20]
   2c4d2:	0018      	movs	r0, r3
   2c4d4:	46bd      	mov	sp, r7
   2c4d6:	b008      	add	sp, #32
   2c4d8:	bd80      	pop	{r7, pc}

0002c4da <chk_chr>:
   2c4da:	b580      	push	{r7, lr}
   2c4dc:	b082      	sub	sp, #8
   2c4de:	af00      	add	r7, sp, #0
   2c4e0:	6078      	str	r0, [r7, #4]
   2c4e2:	6039      	str	r1, [r7, #0]
   2c4e4:	e002      	b.n	2c4ec <chk_chr+0x12>
   2c4e6:	687b      	ldr	r3, [r7, #4]
   2c4e8:	3301      	adds	r3, #1
   2c4ea:	607b      	str	r3, [r7, #4]
   2c4ec:	687b      	ldr	r3, [r7, #4]
   2c4ee:	781b      	ldrb	r3, [r3, #0]
   2c4f0:	2b00      	cmp	r3, #0
   2c4f2:	d005      	beq.n	2c500 <chk_chr+0x26>
   2c4f4:	687b      	ldr	r3, [r7, #4]
   2c4f6:	781b      	ldrb	r3, [r3, #0]
   2c4f8:	001a      	movs	r2, r3
   2c4fa:	683b      	ldr	r3, [r7, #0]
   2c4fc:	429a      	cmp	r2, r3
   2c4fe:	d1f2      	bne.n	2c4e6 <chk_chr+0xc>
   2c500:	687b      	ldr	r3, [r7, #4]
   2c502:	781b      	ldrb	r3, [r3, #0]
   2c504:	0018      	movs	r0, r3
   2c506:	46bd      	mov	sp, r7
   2c508:	b002      	add	sp, #8
   2c50a:	bd80      	pop	{r7, pc}

0002c50c <move_window>:
   2c50c:	b590      	push	{r4, r7, lr}
   2c50e:	b085      	sub	sp, #20
   2c510:	af00      	add	r7, sp, #0
   2c512:	6078      	str	r0, [r7, #4]
   2c514:	6039      	str	r1, [r7, #0]
   2c516:	687b      	ldr	r3, [r7, #4]
   2c518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2c51a:	60fb      	str	r3, [r7, #12]
   2c51c:	68fa      	ldr	r2, [r7, #12]
   2c51e:	683b      	ldr	r3, [r7, #0]
   2c520:	429a      	cmp	r2, r3
   2c522:	d04e      	beq.n	2c5c2 <move_window+0xb6>
   2c524:	687b      	ldr	r3, [r7, #4]
   2c526:	791b      	ldrb	r3, [r3, #4]
   2c528:	2b00      	cmp	r3, #0
   2c52a:	d037      	beq.n	2c59c <move_window+0x90>
   2c52c:	687b      	ldr	r3, [r7, #4]
   2c52e:	7858      	ldrb	r0, [r3, #1]
   2c530:	687b      	ldr	r3, [r7, #4]
   2c532:	3330      	adds	r3, #48	; 0x30
   2c534:	0019      	movs	r1, r3
   2c536:	68fa      	ldr	r2, [r7, #12]
   2c538:	2301      	movs	r3, #1
   2c53a:	4c24      	ldr	r4, [pc, #144]	; (2c5cc <move_window+0xc0>)
   2c53c:	47a0      	blx	r4
   2c53e:	1e03      	subs	r3, r0, #0
   2c540:	d001      	beq.n	2c546 <move_window+0x3a>
   2c542:	2301      	movs	r3, #1
   2c544:	e03e      	b.n	2c5c4 <move_window+0xb8>
   2c546:	687b      	ldr	r3, [r7, #4]
   2c548:	2200      	movs	r2, #0
   2c54a:	711a      	strb	r2, [r3, #4]
   2c54c:	687b      	ldr	r3, [r7, #4]
   2c54e:	6a1a      	ldr	r2, [r3, #32]
   2c550:	687b      	ldr	r3, [r7, #4]
   2c552:	69db      	ldr	r3, [r3, #28]
   2c554:	18d2      	adds	r2, r2, r3
   2c556:	68fb      	ldr	r3, [r7, #12]
   2c558:	429a      	cmp	r2, r3
   2c55a:	d91f      	bls.n	2c59c <move_window+0x90>
   2c55c:	230b      	movs	r3, #11
   2c55e:	18fb      	adds	r3, r7, r3
   2c560:	687a      	ldr	r2, [r7, #4]
   2c562:	78d2      	ldrb	r2, [r2, #3]
   2c564:	701a      	strb	r2, [r3, #0]
   2c566:	e014      	b.n	2c592 <move_window+0x86>
   2c568:	687b      	ldr	r3, [r7, #4]
   2c56a:	69db      	ldr	r3, [r3, #28]
   2c56c:	68fa      	ldr	r2, [r7, #12]
   2c56e:	18d3      	adds	r3, r2, r3
   2c570:	60fb      	str	r3, [r7, #12]
   2c572:	687b      	ldr	r3, [r7, #4]
   2c574:	7858      	ldrb	r0, [r3, #1]
   2c576:	687b      	ldr	r3, [r7, #4]
   2c578:	3330      	adds	r3, #48	; 0x30
   2c57a:	0019      	movs	r1, r3
   2c57c:	68fa      	ldr	r2, [r7, #12]
   2c57e:	2301      	movs	r3, #1
   2c580:	4c12      	ldr	r4, [pc, #72]	; (2c5cc <move_window+0xc0>)
   2c582:	47a0      	blx	r4
   2c584:	230b      	movs	r3, #11
   2c586:	18fb      	adds	r3, r7, r3
   2c588:	781a      	ldrb	r2, [r3, #0]
   2c58a:	230b      	movs	r3, #11
   2c58c:	18fb      	adds	r3, r7, r3
   2c58e:	3a01      	subs	r2, #1
   2c590:	701a      	strb	r2, [r3, #0]
   2c592:	230b      	movs	r3, #11
   2c594:	18fb      	adds	r3, r7, r3
   2c596:	781b      	ldrb	r3, [r3, #0]
   2c598:	2b01      	cmp	r3, #1
   2c59a:	d8e5      	bhi.n	2c568 <move_window+0x5c>
   2c59c:	683b      	ldr	r3, [r7, #0]
   2c59e:	2b00      	cmp	r3, #0
   2c5a0:	d00f      	beq.n	2c5c2 <move_window+0xb6>
   2c5a2:	687b      	ldr	r3, [r7, #4]
   2c5a4:	7858      	ldrb	r0, [r3, #1]
   2c5a6:	687b      	ldr	r3, [r7, #4]
   2c5a8:	3330      	adds	r3, #48	; 0x30
   2c5aa:	0019      	movs	r1, r3
   2c5ac:	683a      	ldr	r2, [r7, #0]
   2c5ae:	2301      	movs	r3, #1
   2c5b0:	4c07      	ldr	r4, [pc, #28]	; (2c5d0 <move_window+0xc4>)
   2c5b2:	47a0      	blx	r4
   2c5b4:	1e03      	subs	r3, r0, #0
   2c5b6:	d001      	beq.n	2c5bc <move_window+0xb0>
   2c5b8:	2301      	movs	r3, #1
   2c5ba:	e003      	b.n	2c5c4 <move_window+0xb8>
   2c5bc:	687b      	ldr	r3, [r7, #4]
   2c5be:	683a      	ldr	r2, [r7, #0]
   2c5c0:	62da      	str	r2, [r3, #44]	; 0x2c
   2c5c2:	2300      	movs	r3, #0
   2c5c4:	0018      	movs	r0, r3
   2c5c6:	46bd      	mov	sp, r7
   2c5c8:	b005      	add	sp, #20
   2c5ca:	bd90      	pop	{r4, r7, pc}
   2c5cc:	0002c1f9 	.word	0x0002c1f9
   2c5d0:	0002c121 	.word	0x0002c121

0002c5d4 <sync>:
   2c5d4:	b590      	push	{r4, r7, lr}
   2c5d6:	b085      	sub	sp, #20
   2c5d8:	af00      	add	r7, sp, #0
   2c5da:	6078      	str	r0, [r7, #4]
   2c5dc:	230f      	movs	r3, #15
   2c5de:	18fc      	adds	r4, r7, r3
   2c5e0:	687b      	ldr	r3, [r7, #4]
   2c5e2:	2100      	movs	r1, #0
   2c5e4:	0018      	movs	r0, r3
   2c5e6:	4b52      	ldr	r3, [pc, #328]	; (2c730 <sync+0x15c>)
   2c5e8:	4798      	blx	r3
   2c5ea:	0003      	movs	r3, r0
   2c5ec:	7023      	strb	r3, [r4, #0]
   2c5ee:	230f      	movs	r3, #15
   2c5f0:	18fb      	adds	r3, r7, r3
   2c5f2:	781b      	ldrb	r3, [r3, #0]
   2c5f4:	2b00      	cmp	r3, #0
   2c5f6:	d000      	beq.n	2c5fa <sync+0x26>
   2c5f8:	e093      	b.n	2c722 <sync+0x14e>
   2c5fa:	687b      	ldr	r3, [r7, #4]
   2c5fc:	781b      	ldrb	r3, [r3, #0]
   2c5fe:	2b03      	cmp	r3, #3
   2c600:	d000      	beq.n	2c604 <sync+0x30>
   2c602:	e081      	b.n	2c708 <sync+0x134>
   2c604:	687b      	ldr	r3, [r7, #4]
   2c606:	795b      	ldrb	r3, [r3, #5]
   2c608:	2b00      	cmp	r3, #0
   2c60a:	d07d      	beq.n	2c708 <sync+0x134>
   2c60c:	687b      	ldr	r3, [r7, #4]
   2c60e:	2200      	movs	r2, #0
   2c610:	62da      	str	r2, [r3, #44]	; 0x2c
   2c612:	687b      	ldr	r3, [r7, #4]
   2c614:	3330      	adds	r3, #48	; 0x30
   2c616:	0018      	movs	r0, r3
   2c618:	2380      	movs	r3, #128	; 0x80
   2c61a:	009b      	lsls	r3, r3, #2
   2c61c:	001a      	movs	r2, r3
   2c61e:	2100      	movs	r1, #0
   2c620:	4b44      	ldr	r3, [pc, #272]	; (2c734 <sync+0x160>)
   2c622:	4798      	blx	r3
   2c624:	687b      	ldr	r3, [r7, #4]
   2c626:	4a44      	ldr	r2, [pc, #272]	; (2c738 <sync+0x164>)
   2c628:	2155      	movs	r1, #85	; 0x55
   2c62a:	5499      	strb	r1, [r3, r2]
   2c62c:	687b      	ldr	r3, [r7, #4]
   2c62e:	4a43      	ldr	r2, [pc, #268]	; (2c73c <sync+0x168>)
   2c630:	21aa      	movs	r1, #170	; 0xaa
   2c632:	5499      	strb	r1, [r3, r2]
   2c634:	687b      	ldr	r3, [r7, #4]
   2c636:	2230      	movs	r2, #48	; 0x30
   2c638:	2152      	movs	r1, #82	; 0x52
   2c63a:	5499      	strb	r1, [r3, r2]
   2c63c:	687b      	ldr	r3, [r7, #4]
   2c63e:	2231      	movs	r2, #49	; 0x31
   2c640:	2152      	movs	r1, #82	; 0x52
   2c642:	5499      	strb	r1, [r3, r2]
   2c644:	687b      	ldr	r3, [r7, #4]
   2c646:	2232      	movs	r2, #50	; 0x32
   2c648:	2161      	movs	r1, #97	; 0x61
   2c64a:	5499      	strb	r1, [r3, r2]
   2c64c:	687b      	ldr	r3, [r7, #4]
   2c64e:	2233      	movs	r2, #51	; 0x33
   2c650:	2141      	movs	r1, #65	; 0x41
   2c652:	5499      	strb	r1, [r3, r2]
   2c654:	687a      	ldr	r2, [r7, #4]
   2c656:	2385      	movs	r3, #133	; 0x85
   2c658:	009b      	lsls	r3, r3, #2
   2c65a:	2172      	movs	r1, #114	; 0x72
   2c65c:	54d1      	strb	r1, [r2, r3]
   2c65e:	687b      	ldr	r3, [r7, #4]
   2c660:	4a37      	ldr	r2, [pc, #220]	; (2c740 <sync+0x16c>)
   2c662:	2172      	movs	r1, #114	; 0x72
   2c664:	5499      	strb	r1, [r3, r2]
   2c666:	687b      	ldr	r3, [r7, #4]
   2c668:	4a36      	ldr	r2, [pc, #216]	; (2c744 <sync+0x170>)
   2c66a:	2141      	movs	r1, #65	; 0x41
   2c66c:	5499      	strb	r1, [r3, r2]
   2c66e:	687b      	ldr	r3, [r7, #4]
   2c670:	4a35      	ldr	r2, [pc, #212]	; (2c748 <sync+0x174>)
   2c672:	2161      	movs	r1, #97	; 0x61
   2c674:	5499      	strb	r1, [r3, r2]
   2c676:	687b      	ldr	r3, [r7, #4]
   2c678:	691b      	ldr	r3, [r3, #16]
   2c67a:	b2d9      	uxtb	r1, r3
   2c67c:	687a      	ldr	r2, [r7, #4]
   2c67e:	2386      	movs	r3, #134	; 0x86
   2c680:	009b      	lsls	r3, r3, #2
   2c682:	54d1      	strb	r1, [r2, r3]
   2c684:	687b      	ldr	r3, [r7, #4]
   2c686:	691b      	ldr	r3, [r3, #16]
   2c688:	b29b      	uxth	r3, r3
   2c68a:	0a1b      	lsrs	r3, r3, #8
   2c68c:	b29b      	uxth	r3, r3
   2c68e:	b2d9      	uxtb	r1, r3
   2c690:	687b      	ldr	r3, [r7, #4]
   2c692:	4a2e      	ldr	r2, [pc, #184]	; (2c74c <sync+0x178>)
   2c694:	5499      	strb	r1, [r3, r2]
   2c696:	687b      	ldr	r3, [r7, #4]
   2c698:	691b      	ldr	r3, [r3, #16]
   2c69a:	0c1b      	lsrs	r3, r3, #16
   2c69c:	b2d9      	uxtb	r1, r3
   2c69e:	687b      	ldr	r3, [r7, #4]
   2c6a0:	4a2b      	ldr	r2, [pc, #172]	; (2c750 <sync+0x17c>)
   2c6a2:	5499      	strb	r1, [r3, r2]
   2c6a4:	687b      	ldr	r3, [r7, #4]
   2c6a6:	691b      	ldr	r3, [r3, #16]
   2c6a8:	0e1b      	lsrs	r3, r3, #24
   2c6aa:	b2d9      	uxtb	r1, r3
   2c6ac:	687b      	ldr	r3, [r7, #4]
   2c6ae:	4a29      	ldr	r2, [pc, #164]	; (2c754 <sync+0x180>)
   2c6b0:	5499      	strb	r1, [r3, r2]
   2c6b2:	687b      	ldr	r3, [r7, #4]
   2c6b4:	68db      	ldr	r3, [r3, #12]
   2c6b6:	b2d9      	uxtb	r1, r3
   2c6b8:	687a      	ldr	r2, [r7, #4]
   2c6ba:	2387      	movs	r3, #135	; 0x87
   2c6bc:	009b      	lsls	r3, r3, #2
   2c6be:	54d1      	strb	r1, [r2, r3]
   2c6c0:	687b      	ldr	r3, [r7, #4]
   2c6c2:	68db      	ldr	r3, [r3, #12]
   2c6c4:	b29b      	uxth	r3, r3
   2c6c6:	0a1b      	lsrs	r3, r3, #8
   2c6c8:	b29b      	uxth	r3, r3
   2c6ca:	b2d9      	uxtb	r1, r3
   2c6cc:	687b      	ldr	r3, [r7, #4]
   2c6ce:	4a22      	ldr	r2, [pc, #136]	; (2c758 <sync+0x184>)
   2c6d0:	5499      	strb	r1, [r3, r2]
   2c6d2:	687b      	ldr	r3, [r7, #4]
   2c6d4:	68db      	ldr	r3, [r3, #12]
   2c6d6:	0c1b      	lsrs	r3, r3, #16
   2c6d8:	b2d9      	uxtb	r1, r3
   2c6da:	687b      	ldr	r3, [r7, #4]
   2c6dc:	4a1f      	ldr	r2, [pc, #124]	; (2c75c <sync+0x188>)
   2c6de:	5499      	strb	r1, [r3, r2]
   2c6e0:	687b      	ldr	r3, [r7, #4]
   2c6e2:	68db      	ldr	r3, [r3, #12]
   2c6e4:	0e1b      	lsrs	r3, r3, #24
   2c6e6:	b2d9      	uxtb	r1, r3
   2c6e8:	687b      	ldr	r3, [r7, #4]
   2c6ea:	4a1d      	ldr	r2, [pc, #116]	; (2c760 <sync+0x18c>)
   2c6ec:	5499      	strb	r1, [r3, r2]
   2c6ee:	687b      	ldr	r3, [r7, #4]
   2c6f0:	7858      	ldrb	r0, [r3, #1]
   2c6f2:	687b      	ldr	r3, [r7, #4]
   2c6f4:	3330      	adds	r3, #48	; 0x30
   2c6f6:	0019      	movs	r1, r3
   2c6f8:	687b      	ldr	r3, [r7, #4]
   2c6fa:	695a      	ldr	r2, [r3, #20]
   2c6fc:	2301      	movs	r3, #1
   2c6fe:	4c19      	ldr	r4, [pc, #100]	; (2c764 <sync+0x190>)
   2c700:	47a0      	blx	r4
   2c702:	687b      	ldr	r3, [r7, #4]
   2c704:	2200      	movs	r2, #0
   2c706:	715a      	strb	r2, [r3, #5]
   2c708:	687b      	ldr	r3, [r7, #4]
   2c70a:	785b      	ldrb	r3, [r3, #1]
   2c70c:	2200      	movs	r2, #0
   2c70e:	2100      	movs	r1, #0
   2c710:	0018      	movs	r0, r3
   2c712:	4b15      	ldr	r3, [pc, #84]	; (2c768 <sync+0x194>)
   2c714:	4798      	blx	r3
   2c716:	1e03      	subs	r3, r0, #0
   2c718:	d003      	beq.n	2c722 <sync+0x14e>
   2c71a:	230f      	movs	r3, #15
   2c71c:	18fb      	adds	r3, r7, r3
   2c71e:	2201      	movs	r2, #1
   2c720:	701a      	strb	r2, [r3, #0]
   2c722:	230f      	movs	r3, #15
   2c724:	18fb      	adds	r3, r7, r3
   2c726:	781b      	ldrb	r3, [r3, #0]
   2c728:	0018      	movs	r0, r3
   2c72a:	46bd      	mov	sp, r7
   2c72c:	b005      	add	sp, #20
   2c72e:	bd90      	pop	{r4, r7, pc}
   2c730:	0002c50d 	.word	0x0002c50d
   2c734:	0002c461 	.word	0x0002c461
   2c738:	0000022e 	.word	0x0000022e
   2c73c:	0000022f 	.word	0x0000022f
   2c740:	00000215 	.word	0x00000215
   2c744:	00000216 	.word	0x00000216
   2c748:	00000217 	.word	0x00000217
   2c74c:	00000219 	.word	0x00000219
   2c750:	0000021a 	.word	0x0000021a
   2c754:	0000021b 	.word	0x0000021b
   2c758:	0000021d 	.word	0x0000021d
   2c75c:	0000021e 	.word	0x0000021e
   2c760:	0000021f 	.word	0x0000021f
   2c764:	0002c1f9 	.word	0x0002c1f9
   2c768:	0002c2d1 	.word	0x0002c2d1

0002c76c <clust2sect>:
   2c76c:	b580      	push	{r7, lr}
   2c76e:	b082      	sub	sp, #8
   2c770:	af00      	add	r7, sp, #0
   2c772:	6078      	str	r0, [r7, #4]
   2c774:	6039      	str	r1, [r7, #0]
   2c776:	683b      	ldr	r3, [r7, #0]
   2c778:	3b02      	subs	r3, #2
   2c77a:	603b      	str	r3, [r7, #0]
   2c77c:	687b      	ldr	r3, [r7, #4]
   2c77e:	699b      	ldr	r3, [r3, #24]
   2c780:	1e9a      	subs	r2, r3, #2
   2c782:	683b      	ldr	r3, [r7, #0]
   2c784:	429a      	cmp	r2, r3
   2c786:	d801      	bhi.n	2c78c <clust2sect+0x20>
   2c788:	2300      	movs	r3, #0
   2c78a:	e007      	b.n	2c79c <clust2sect+0x30>
   2c78c:	687b      	ldr	r3, [r7, #4]
   2c78e:	789b      	ldrb	r3, [r3, #2]
   2c790:	001a      	movs	r2, r3
   2c792:	683b      	ldr	r3, [r7, #0]
   2c794:	435a      	muls	r2, r3
   2c796:	687b      	ldr	r3, [r7, #4]
   2c798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2c79a:	18d3      	adds	r3, r2, r3
   2c79c:	0018      	movs	r0, r3
   2c79e:	46bd      	mov	sp, r7
   2c7a0:	b002      	add	sp, #8
   2c7a2:	bd80      	pop	{r7, pc}

0002c7a4 <get_fat>:
   2c7a4:	b580      	push	{r7, lr}
   2c7a6:	b086      	sub	sp, #24
   2c7a8:	af00      	add	r7, sp, #0
   2c7aa:	6078      	str	r0, [r7, #4]
   2c7ac:	6039      	str	r1, [r7, #0]
   2c7ae:	683b      	ldr	r3, [r7, #0]
   2c7b0:	2b01      	cmp	r3, #1
   2c7b2:	d904      	bls.n	2c7be <get_fat+0x1a>
   2c7b4:	687b      	ldr	r3, [r7, #4]
   2c7b6:	699a      	ldr	r2, [r3, #24]
   2c7b8:	683b      	ldr	r3, [r7, #0]
   2c7ba:	429a      	cmp	r2, r3
   2c7bc:	d801      	bhi.n	2c7c2 <get_fat+0x1e>
   2c7be:	2301      	movs	r3, #1
   2c7c0:	e09f      	b.n	2c902 <get_fat+0x15e>
   2c7c2:	687b      	ldr	r3, [r7, #4]
   2c7c4:	781b      	ldrb	r3, [r3, #0]
   2c7c6:	2b02      	cmp	r3, #2
   2c7c8:	d048      	beq.n	2c85c <get_fat+0xb8>
   2c7ca:	2b03      	cmp	r3, #3
   2c7cc:	d067      	beq.n	2c89e <get_fat+0xfa>
   2c7ce:	2b01      	cmp	r3, #1
   2c7d0:	d000      	beq.n	2c7d4 <get_fat+0x30>
   2c7d2:	e094      	b.n	2c8fe <get_fat+0x15a>
   2c7d4:	683b      	ldr	r3, [r7, #0]
   2c7d6:	617b      	str	r3, [r7, #20]
   2c7d8:	697b      	ldr	r3, [r7, #20]
   2c7da:	085b      	lsrs	r3, r3, #1
   2c7dc:	697a      	ldr	r2, [r7, #20]
   2c7de:	18d3      	adds	r3, r2, r3
   2c7e0:	617b      	str	r3, [r7, #20]
   2c7e2:	687b      	ldr	r3, [r7, #4]
   2c7e4:	6a1a      	ldr	r2, [r3, #32]
   2c7e6:	697b      	ldr	r3, [r7, #20]
   2c7e8:	0a5b      	lsrs	r3, r3, #9
   2c7ea:	18d2      	adds	r2, r2, r3
   2c7ec:	687b      	ldr	r3, [r7, #4]
   2c7ee:	0011      	movs	r1, r2
   2c7f0:	0018      	movs	r0, r3
   2c7f2:	4b46      	ldr	r3, [pc, #280]	; (2c90c <get_fat+0x168>)
   2c7f4:	4798      	blx	r3
   2c7f6:	1e03      	subs	r3, r0, #0
   2c7f8:	d000      	beq.n	2c7fc <get_fat+0x58>
   2c7fa:	e079      	b.n	2c8f0 <get_fat+0x14c>
   2c7fc:	697b      	ldr	r3, [r7, #20]
   2c7fe:	05db      	lsls	r3, r3, #23
   2c800:	0ddb      	lsrs	r3, r3, #23
   2c802:	687a      	ldr	r2, [r7, #4]
   2c804:	2130      	movs	r1, #48	; 0x30
   2c806:	18d3      	adds	r3, r2, r3
   2c808:	185b      	adds	r3, r3, r1
   2c80a:	781b      	ldrb	r3, [r3, #0]
   2c80c:	613b      	str	r3, [r7, #16]
   2c80e:	697b      	ldr	r3, [r7, #20]
   2c810:	3301      	adds	r3, #1
   2c812:	617b      	str	r3, [r7, #20]
   2c814:	687b      	ldr	r3, [r7, #4]
   2c816:	6a1a      	ldr	r2, [r3, #32]
   2c818:	697b      	ldr	r3, [r7, #20]
   2c81a:	0a5b      	lsrs	r3, r3, #9
   2c81c:	18d2      	adds	r2, r2, r3
   2c81e:	687b      	ldr	r3, [r7, #4]
   2c820:	0011      	movs	r1, r2
   2c822:	0018      	movs	r0, r3
   2c824:	4b39      	ldr	r3, [pc, #228]	; (2c90c <get_fat+0x168>)
   2c826:	4798      	blx	r3
   2c828:	1e03      	subs	r3, r0, #0
   2c82a:	d163      	bne.n	2c8f4 <get_fat+0x150>
   2c82c:	697b      	ldr	r3, [r7, #20]
   2c82e:	05db      	lsls	r3, r3, #23
   2c830:	0ddb      	lsrs	r3, r3, #23
   2c832:	687a      	ldr	r2, [r7, #4]
   2c834:	2130      	movs	r1, #48	; 0x30
   2c836:	18d3      	adds	r3, r2, r3
   2c838:	185b      	adds	r3, r3, r1
   2c83a:	781b      	ldrb	r3, [r3, #0]
   2c83c:	021b      	lsls	r3, r3, #8
   2c83e:	001a      	movs	r2, r3
   2c840:	693b      	ldr	r3, [r7, #16]
   2c842:	4313      	orrs	r3, r2
   2c844:	613b      	str	r3, [r7, #16]
   2c846:	683b      	ldr	r3, [r7, #0]
   2c848:	2201      	movs	r2, #1
   2c84a:	4013      	ands	r3, r2
   2c84c:	d002      	beq.n	2c854 <get_fat+0xb0>
   2c84e:	693b      	ldr	r3, [r7, #16]
   2c850:	091b      	lsrs	r3, r3, #4
   2c852:	e056      	b.n	2c902 <get_fat+0x15e>
   2c854:	693b      	ldr	r3, [r7, #16]
   2c856:	051b      	lsls	r3, r3, #20
   2c858:	0d1b      	lsrs	r3, r3, #20
   2c85a:	e052      	b.n	2c902 <get_fat+0x15e>
   2c85c:	687b      	ldr	r3, [r7, #4]
   2c85e:	6a1a      	ldr	r2, [r3, #32]
   2c860:	683b      	ldr	r3, [r7, #0]
   2c862:	0a1b      	lsrs	r3, r3, #8
   2c864:	18d2      	adds	r2, r2, r3
   2c866:	687b      	ldr	r3, [r7, #4]
   2c868:	0011      	movs	r1, r2
   2c86a:	0018      	movs	r0, r3
   2c86c:	4b27      	ldr	r3, [pc, #156]	; (2c90c <get_fat+0x168>)
   2c86e:	4798      	blx	r3
   2c870:	1e03      	subs	r3, r0, #0
   2c872:	d141      	bne.n	2c8f8 <get_fat+0x154>
   2c874:	683b      	ldr	r3, [r7, #0]
   2c876:	005a      	lsls	r2, r3, #1
   2c878:	23ff      	movs	r3, #255	; 0xff
   2c87a:	005b      	lsls	r3, r3, #1
   2c87c:	4013      	ands	r3, r2
   2c87e:	3330      	adds	r3, #48	; 0x30
   2c880:	687a      	ldr	r2, [r7, #4]
   2c882:	18d3      	adds	r3, r2, r3
   2c884:	60fb      	str	r3, [r7, #12]
   2c886:	68fb      	ldr	r3, [r7, #12]
   2c888:	3301      	adds	r3, #1
   2c88a:	781b      	ldrb	r3, [r3, #0]
   2c88c:	021b      	lsls	r3, r3, #8
   2c88e:	b21a      	sxth	r2, r3
   2c890:	68fb      	ldr	r3, [r7, #12]
   2c892:	781b      	ldrb	r3, [r3, #0]
   2c894:	b21b      	sxth	r3, r3
   2c896:	4313      	orrs	r3, r2
   2c898:	b21b      	sxth	r3, r3
   2c89a:	b29b      	uxth	r3, r3
   2c89c:	e031      	b.n	2c902 <get_fat+0x15e>
   2c89e:	687b      	ldr	r3, [r7, #4]
   2c8a0:	6a1a      	ldr	r2, [r3, #32]
   2c8a2:	683b      	ldr	r3, [r7, #0]
   2c8a4:	09db      	lsrs	r3, r3, #7
   2c8a6:	18d2      	adds	r2, r2, r3
   2c8a8:	687b      	ldr	r3, [r7, #4]
   2c8aa:	0011      	movs	r1, r2
   2c8ac:	0018      	movs	r0, r3
   2c8ae:	4b17      	ldr	r3, [pc, #92]	; (2c90c <get_fat+0x168>)
   2c8b0:	4798      	blx	r3
   2c8b2:	1e03      	subs	r3, r0, #0
   2c8b4:	d122      	bne.n	2c8fc <get_fat+0x158>
   2c8b6:	683b      	ldr	r3, [r7, #0]
   2c8b8:	009a      	lsls	r2, r3, #2
   2c8ba:	23fe      	movs	r3, #254	; 0xfe
   2c8bc:	005b      	lsls	r3, r3, #1
   2c8be:	4013      	ands	r3, r2
   2c8c0:	3330      	adds	r3, #48	; 0x30
   2c8c2:	687a      	ldr	r2, [r7, #4]
   2c8c4:	18d3      	adds	r3, r2, r3
   2c8c6:	60fb      	str	r3, [r7, #12]
   2c8c8:	68fb      	ldr	r3, [r7, #12]
   2c8ca:	3303      	adds	r3, #3
   2c8cc:	781b      	ldrb	r3, [r3, #0]
   2c8ce:	061a      	lsls	r2, r3, #24
   2c8d0:	68fb      	ldr	r3, [r7, #12]
   2c8d2:	3302      	adds	r3, #2
   2c8d4:	781b      	ldrb	r3, [r3, #0]
   2c8d6:	041b      	lsls	r3, r3, #16
   2c8d8:	4313      	orrs	r3, r2
   2c8da:	68fa      	ldr	r2, [r7, #12]
   2c8dc:	3201      	adds	r2, #1
   2c8de:	7812      	ldrb	r2, [r2, #0]
   2c8e0:	0212      	lsls	r2, r2, #8
   2c8e2:	4313      	orrs	r3, r2
   2c8e4:	68fa      	ldr	r2, [r7, #12]
   2c8e6:	7812      	ldrb	r2, [r2, #0]
   2c8e8:	4313      	orrs	r3, r2
   2c8ea:	011b      	lsls	r3, r3, #4
   2c8ec:	091b      	lsrs	r3, r3, #4
   2c8ee:	e008      	b.n	2c902 <get_fat+0x15e>
   2c8f0:	46c0      	nop			; (mov r8, r8)
   2c8f2:	e004      	b.n	2c8fe <get_fat+0x15a>
   2c8f4:	46c0      	nop			; (mov r8, r8)
   2c8f6:	e002      	b.n	2c8fe <get_fat+0x15a>
   2c8f8:	46c0      	nop			; (mov r8, r8)
   2c8fa:	e000      	b.n	2c8fe <get_fat+0x15a>
   2c8fc:	46c0      	nop			; (mov r8, r8)
   2c8fe:	2301      	movs	r3, #1
   2c900:	425b      	negs	r3, r3
   2c902:	0018      	movs	r0, r3
   2c904:	46bd      	mov	sp, r7
   2c906:	b006      	add	sp, #24
   2c908:	bd80      	pop	{r7, pc}
   2c90a:	46c0      	nop			; (mov r8, r8)
   2c90c:	0002c50d 	.word	0x0002c50d

0002c910 <put_fat>:
   2c910:	b590      	push	{r4, r7, lr}
   2c912:	b089      	sub	sp, #36	; 0x24
   2c914:	af00      	add	r7, sp, #0
   2c916:	60f8      	str	r0, [r7, #12]
   2c918:	60b9      	str	r1, [r7, #8]
   2c91a:	607a      	str	r2, [r7, #4]
   2c91c:	68bb      	ldr	r3, [r7, #8]
   2c91e:	2b01      	cmp	r3, #1
   2c920:	d904      	bls.n	2c92c <put_fat+0x1c>
   2c922:	68fb      	ldr	r3, [r7, #12]
   2c924:	699a      	ldr	r2, [r3, #24]
   2c926:	68bb      	ldr	r3, [r7, #8]
   2c928:	429a      	cmp	r2, r3
   2c92a:	d804      	bhi.n	2c936 <put_fat+0x26>
   2c92c:	231f      	movs	r3, #31
   2c92e:	18fb      	adds	r3, r7, r3
   2c930:	2202      	movs	r2, #2
   2c932:	701a      	strb	r2, [r3, #0]
   2c934:	e100      	b.n	2cb38 <put_fat+0x228>
   2c936:	68fb      	ldr	r3, [r7, #12]
   2c938:	781b      	ldrb	r3, [r3, #0]
   2c93a:	2b02      	cmp	r3, #2
   2c93c:	d100      	bne.n	2c940 <put_fat+0x30>
   2c93e:	e078      	b.n	2ca32 <put_fat+0x122>
   2c940:	2b03      	cmp	r3, #3
   2c942:	d100      	bne.n	2c946 <put_fat+0x36>
   2c944:	e09e      	b.n	2ca84 <put_fat+0x174>
   2c946:	2b01      	cmp	r3, #1
   2c948:	d000      	beq.n	2c94c <put_fat+0x3c>
   2c94a:	e0e6      	b.n	2cb1a <put_fat+0x20a>
   2c94c:	68bb      	ldr	r3, [r7, #8]
   2c94e:	61bb      	str	r3, [r7, #24]
   2c950:	69bb      	ldr	r3, [r7, #24]
   2c952:	085b      	lsrs	r3, r3, #1
   2c954:	69ba      	ldr	r2, [r7, #24]
   2c956:	18d3      	adds	r3, r2, r3
   2c958:	61bb      	str	r3, [r7, #24]
   2c95a:	68fb      	ldr	r3, [r7, #12]
   2c95c:	6a1a      	ldr	r2, [r3, #32]
   2c95e:	69bb      	ldr	r3, [r7, #24]
   2c960:	0a5b      	lsrs	r3, r3, #9
   2c962:	18d2      	adds	r2, r2, r3
   2c964:	231f      	movs	r3, #31
   2c966:	18fc      	adds	r4, r7, r3
   2c968:	68fb      	ldr	r3, [r7, #12]
   2c96a:	0011      	movs	r1, r2
   2c96c:	0018      	movs	r0, r3
   2c96e:	4b76      	ldr	r3, [pc, #472]	; (2cb48 <put_fat+0x238>)
   2c970:	4798      	blx	r3
   2c972:	0003      	movs	r3, r0
   2c974:	7023      	strb	r3, [r4, #0]
   2c976:	231f      	movs	r3, #31
   2c978:	18fb      	adds	r3, r7, r3
   2c97a:	781b      	ldrb	r3, [r3, #0]
   2c97c:	2b00      	cmp	r3, #0
   2c97e:	d000      	beq.n	2c982 <put_fat+0x72>
   2c980:	e0d0      	b.n	2cb24 <put_fat+0x214>
   2c982:	69bb      	ldr	r3, [r7, #24]
   2c984:	05db      	lsls	r3, r3, #23
   2c986:	0ddb      	lsrs	r3, r3, #23
   2c988:	3330      	adds	r3, #48	; 0x30
   2c98a:	68fa      	ldr	r2, [r7, #12]
   2c98c:	18d3      	adds	r3, r2, r3
   2c98e:	617b      	str	r3, [r7, #20]
   2c990:	68bb      	ldr	r3, [r7, #8]
   2c992:	2201      	movs	r2, #1
   2c994:	4013      	ands	r3, r2
   2c996:	d00d      	beq.n	2c9b4 <put_fat+0xa4>
   2c998:	697b      	ldr	r3, [r7, #20]
   2c99a:	781b      	ldrb	r3, [r3, #0]
   2c99c:	b25b      	sxtb	r3, r3
   2c99e:	220f      	movs	r2, #15
   2c9a0:	4013      	ands	r3, r2
   2c9a2:	b25a      	sxtb	r2, r3
   2c9a4:	687b      	ldr	r3, [r7, #4]
   2c9a6:	b2db      	uxtb	r3, r3
   2c9a8:	011b      	lsls	r3, r3, #4
   2c9aa:	b25b      	sxtb	r3, r3
   2c9ac:	4313      	orrs	r3, r2
   2c9ae:	b25b      	sxtb	r3, r3
   2c9b0:	b2db      	uxtb	r3, r3
   2c9b2:	e001      	b.n	2c9b8 <put_fat+0xa8>
   2c9b4:	687b      	ldr	r3, [r7, #4]
   2c9b6:	b2db      	uxtb	r3, r3
   2c9b8:	697a      	ldr	r2, [r7, #20]
   2c9ba:	7013      	strb	r3, [r2, #0]
   2c9bc:	69bb      	ldr	r3, [r7, #24]
   2c9be:	3301      	adds	r3, #1
   2c9c0:	61bb      	str	r3, [r7, #24]
   2c9c2:	68fb      	ldr	r3, [r7, #12]
   2c9c4:	2201      	movs	r2, #1
   2c9c6:	711a      	strb	r2, [r3, #4]
   2c9c8:	68fb      	ldr	r3, [r7, #12]
   2c9ca:	6a1a      	ldr	r2, [r3, #32]
   2c9cc:	69bb      	ldr	r3, [r7, #24]
   2c9ce:	0a5b      	lsrs	r3, r3, #9
   2c9d0:	18d2      	adds	r2, r2, r3
   2c9d2:	231f      	movs	r3, #31
   2c9d4:	18fc      	adds	r4, r7, r3
   2c9d6:	68fb      	ldr	r3, [r7, #12]
   2c9d8:	0011      	movs	r1, r2
   2c9da:	0018      	movs	r0, r3
   2c9dc:	4b5a      	ldr	r3, [pc, #360]	; (2cb48 <put_fat+0x238>)
   2c9de:	4798      	blx	r3
   2c9e0:	0003      	movs	r3, r0
   2c9e2:	7023      	strb	r3, [r4, #0]
   2c9e4:	231f      	movs	r3, #31
   2c9e6:	18fb      	adds	r3, r7, r3
   2c9e8:	781b      	ldrb	r3, [r3, #0]
   2c9ea:	2b00      	cmp	r3, #0
   2c9ec:	d000      	beq.n	2c9f0 <put_fat+0xe0>
   2c9ee:	e09b      	b.n	2cb28 <put_fat+0x218>
   2c9f0:	69bb      	ldr	r3, [r7, #24]
   2c9f2:	05db      	lsls	r3, r3, #23
   2c9f4:	0ddb      	lsrs	r3, r3, #23
   2c9f6:	3330      	adds	r3, #48	; 0x30
   2c9f8:	68fa      	ldr	r2, [r7, #12]
   2c9fa:	18d3      	adds	r3, r2, r3
   2c9fc:	617b      	str	r3, [r7, #20]
   2c9fe:	68bb      	ldr	r3, [r7, #8]
   2ca00:	2201      	movs	r2, #1
   2ca02:	4013      	ands	r3, r2
   2ca04:	d003      	beq.n	2ca0e <put_fat+0xfe>
   2ca06:	687b      	ldr	r3, [r7, #4]
   2ca08:	091b      	lsrs	r3, r3, #4
   2ca0a:	b2db      	uxtb	r3, r3
   2ca0c:	e00e      	b.n	2ca2c <put_fat+0x11c>
   2ca0e:	697b      	ldr	r3, [r7, #20]
   2ca10:	781b      	ldrb	r3, [r3, #0]
   2ca12:	b25b      	sxtb	r3, r3
   2ca14:	220f      	movs	r2, #15
   2ca16:	4393      	bics	r3, r2
   2ca18:	b25a      	sxtb	r2, r3
   2ca1a:	687b      	ldr	r3, [r7, #4]
   2ca1c:	0a1b      	lsrs	r3, r3, #8
   2ca1e:	b25b      	sxtb	r3, r3
   2ca20:	210f      	movs	r1, #15
   2ca22:	400b      	ands	r3, r1
   2ca24:	b25b      	sxtb	r3, r3
   2ca26:	4313      	orrs	r3, r2
   2ca28:	b25b      	sxtb	r3, r3
   2ca2a:	b2db      	uxtb	r3, r3
   2ca2c:	697a      	ldr	r2, [r7, #20]
   2ca2e:	7013      	strb	r3, [r2, #0]
   2ca30:	e07f      	b.n	2cb32 <put_fat+0x222>
   2ca32:	68fb      	ldr	r3, [r7, #12]
   2ca34:	6a1a      	ldr	r2, [r3, #32]
   2ca36:	68bb      	ldr	r3, [r7, #8]
   2ca38:	0a1b      	lsrs	r3, r3, #8
   2ca3a:	18d2      	adds	r2, r2, r3
   2ca3c:	231f      	movs	r3, #31
   2ca3e:	18fc      	adds	r4, r7, r3
   2ca40:	68fb      	ldr	r3, [r7, #12]
   2ca42:	0011      	movs	r1, r2
   2ca44:	0018      	movs	r0, r3
   2ca46:	4b40      	ldr	r3, [pc, #256]	; (2cb48 <put_fat+0x238>)
   2ca48:	4798      	blx	r3
   2ca4a:	0003      	movs	r3, r0
   2ca4c:	7023      	strb	r3, [r4, #0]
   2ca4e:	231f      	movs	r3, #31
   2ca50:	18fb      	adds	r3, r7, r3
   2ca52:	781b      	ldrb	r3, [r3, #0]
   2ca54:	2b00      	cmp	r3, #0
   2ca56:	d169      	bne.n	2cb2c <put_fat+0x21c>
   2ca58:	68bb      	ldr	r3, [r7, #8]
   2ca5a:	005a      	lsls	r2, r3, #1
   2ca5c:	23ff      	movs	r3, #255	; 0xff
   2ca5e:	005b      	lsls	r3, r3, #1
   2ca60:	4013      	ands	r3, r2
   2ca62:	3330      	adds	r3, #48	; 0x30
   2ca64:	68fa      	ldr	r2, [r7, #12]
   2ca66:	18d3      	adds	r3, r2, r3
   2ca68:	617b      	str	r3, [r7, #20]
   2ca6a:	687b      	ldr	r3, [r7, #4]
   2ca6c:	b2da      	uxtb	r2, r3
   2ca6e:	697b      	ldr	r3, [r7, #20]
   2ca70:	701a      	strb	r2, [r3, #0]
   2ca72:	697b      	ldr	r3, [r7, #20]
   2ca74:	3301      	adds	r3, #1
   2ca76:	687a      	ldr	r2, [r7, #4]
   2ca78:	b292      	uxth	r2, r2
   2ca7a:	0a12      	lsrs	r2, r2, #8
   2ca7c:	b292      	uxth	r2, r2
   2ca7e:	b2d2      	uxtb	r2, r2
   2ca80:	701a      	strb	r2, [r3, #0]
   2ca82:	e056      	b.n	2cb32 <put_fat+0x222>
   2ca84:	68fb      	ldr	r3, [r7, #12]
   2ca86:	6a1a      	ldr	r2, [r3, #32]
   2ca88:	68bb      	ldr	r3, [r7, #8]
   2ca8a:	09db      	lsrs	r3, r3, #7
   2ca8c:	18d2      	adds	r2, r2, r3
   2ca8e:	231f      	movs	r3, #31
   2ca90:	18fc      	adds	r4, r7, r3
   2ca92:	68fb      	ldr	r3, [r7, #12]
   2ca94:	0011      	movs	r1, r2
   2ca96:	0018      	movs	r0, r3
   2ca98:	4b2b      	ldr	r3, [pc, #172]	; (2cb48 <put_fat+0x238>)
   2ca9a:	4798      	blx	r3
   2ca9c:	0003      	movs	r3, r0
   2ca9e:	7023      	strb	r3, [r4, #0]
   2caa0:	231f      	movs	r3, #31
   2caa2:	18fb      	adds	r3, r7, r3
   2caa4:	781b      	ldrb	r3, [r3, #0]
   2caa6:	2b00      	cmp	r3, #0
   2caa8:	d142      	bne.n	2cb30 <put_fat+0x220>
   2caaa:	68bb      	ldr	r3, [r7, #8]
   2caac:	009a      	lsls	r2, r3, #2
   2caae:	23fe      	movs	r3, #254	; 0xfe
   2cab0:	005b      	lsls	r3, r3, #1
   2cab2:	4013      	ands	r3, r2
   2cab4:	3330      	adds	r3, #48	; 0x30
   2cab6:	68fa      	ldr	r2, [r7, #12]
   2cab8:	18d3      	adds	r3, r2, r3
   2caba:	617b      	str	r3, [r7, #20]
   2cabc:	697b      	ldr	r3, [r7, #20]
   2cabe:	3303      	adds	r3, #3
   2cac0:	781b      	ldrb	r3, [r3, #0]
   2cac2:	061a      	lsls	r2, r3, #24
   2cac4:	697b      	ldr	r3, [r7, #20]
   2cac6:	3302      	adds	r3, #2
   2cac8:	781b      	ldrb	r3, [r3, #0]
   2caca:	041b      	lsls	r3, r3, #16
   2cacc:	4313      	orrs	r3, r2
   2cace:	697a      	ldr	r2, [r7, #20]
   2cad0:	3201      	adds	r2, #1
   2cad2:	7812      	ldrb	r2, [r2, #0]
   2cad4:	0212      	lsls	r2, r2, #8
   2cad6:	4313      	orrs	r3, r2
   2cad8:	697a      	ldr	r2, [r7, #20]
   2cada:	7812      	ldrb	r2, [r2, #0]
   2cadc:	4313      	orrs	r3, r2
   2cade:	0f1b      	lsrs	r3, r3, #28
   2cae0:	071b      	lsls	r3, r3, #28
   2cae2:	687a      	ldr	r2, [r7, #4]
   2cae4:	4313      	orrs	r3, r2
   2cae6:	607b      	str	r3, [r7, #4]
   2cae8:	687b      	ldr	r3, [r7, #4]
   2caea:	b2da      	uxtb	r2, r3
   2caec:	697b      	ldr	r3, [r7, #20]
   2caee:	701a      	strb	r2, [r3, #0]
   2caf0:	697b      	ldr	r3, [r7, #20]
   2caf2:	3301      	adds	r3, #1
   2caf4:	687a      	ldr	r2, [r7, #4]
   2caf6:	b292      	uxth	r2, r2
   2caf8:	0a12      	lsrs	r2, r2, #8
   2cafa:	b292      	uxth	r2, r2
   2cafc:	b2d2      	uxtb	r2, r2
   2cafe:	701a      	strb	r2, [r3, #0]
   2cb00:	697b      	ldr	r3, [r7, #20]
   2cb02:	3302      	adds	r3, #2
   2cb04:	687a      	ldr	r2, [r7, #4]
   2cb06:	0c12      	lsrs	r2, r2, #16
   2cb08:	b2d2      	uxtb	r2, r2
   2cb0a:	701a      	strb	r2, [r3, #0]
   2cb0c:	697b      	ldr	r3, [r7, #20]
   2cb0e:	3303      	adds	r3, #3
   2cb10:	687a      	ldr	r2, [r7, #4]
   2cb12:	0e12      	lsrs	r2, r2, #24
   2cb14:	b2d2      	uxtb	r2, r2
   2cb16:	701a      	strb	r2, [r3, #0]
   2cb18:	e00b      	b.n	2cb32 <put_fat+0x222>
   2cb1a:	231f      	movs	r3, #31
   2cb1c:	18fb      	adds	r3, r7, r3
   2cb1e:	2202      	movs	r2, #2
   2cb20:	701a      	strb	r2, [r3, #0]
   2cb22:	e006      	b.n	2cb32 <put_fat+0x222>
   2cb24:	46c0      	nop			; (mov r8, r8)
   2cb26:	e004      	b.n	2cb32 <put_fat+0x222>
   2cb28:	46c0      	nop			; (mov r8, r8)
   2cb2a:	e002      	b.n	2cb32 <put_fat+0x222>
   2cb2c:	46c0      	nop			; (mov r8, r8)
   2cb2e:	e000      	b.n	2cb32 <put_fat+0x222>
   2cb30:	46c0      	nop			; (mov r8, r8)
   2cb32:	68fb      	ldr	r3, [r7, #12]
   2cb34:	2201      	movs	r2, #1
   2cb36:	711a      	strb	r2, [r3, #4]
   2cb38:	231f      	movs	r3, #31
   2cb3a:	18fb      	adds	r3, r7, r3
   2cb3c:	781b      	ldrb	r3, [r3, #0]
   2cb3e:	0018      	movs	r0, r3
   2cb40:	46bd      	mov	sp, r7
   2cb42:	b009      	add	sp, #36	; 0x24
   2cb44:	bd90      	pop	{r4, r7, pc}
   2cb46:	46c0      	nop			; (mov r8, r8)
   2cb48:	0002c50d 	.word	0x0002c50d

0002cb4c <remove_chain>:
   2cb4c:	b590      	push	{r4, r7, lr}
   2cb4e:	b085      	sub	sp, #20
   2cb50:	af00      	add	r7, sp, #0
   2cb52:	6078      	str	r0, [r7, #4]
   2cb54:	6039      	str	r1, [r7, #0]
   2cb56:	683b      	ldr	r3, [r7, #0]
   2cb58:	2b01      	cmp	r3, #1
   2cb5a:	d904      	bls.n	2cb66 <remove_chain+0x1a>
   2cb5c:	687b      	ldr	r3, [r7, #4]
   2cb5e:	699a      	ldr	r2, [r3, #24]
   2cb60:	683b      	ldr	r3, [r7, #0]
   2cb62:	429a      	cmp	r2, r3
   2cb64:	d804      	bhi.n	2cb70 <remove_chain+0x24>
   2cb66:	230f      	movs	r3, #15
   2cb68:	18fb      	adds	r3, r7, r3
   2cb6a:	2202      	movs	r2, #2
   2cb6c:	701a      	strb	r2, [r3, #0]
   2cb6e:	e045      	b.n	2cbfc <remove_chain+0xb0>
   2cb70:	230f      	movs	r3, #15
   2cb72:	18fb      	adds	r3, r7, r3
   2cb74:	2200      	movs	r2, #0
   2cb76:	701a      	strb	r2, [r3, #0]
   2cb78:	e037      	b.n	2cbea <remove_chain+0x9e>
   2cb7a:	683a      	ldr	r2, [r7, #0]
   2cb7c:	687b      	ldr	r3, [r7, #4]
   2cb7e:	0011      	movs	r1, r2
   2cb80:	0018      	movs	r0, r3
   2cb82:	4b22      	ldr	r3, [pc, #136]	; (2cc0c <remove_chain+0xc0>)
   2cb84:	4798      	blx	r3
   2cb86:	0003      	movs	r3, r0
   2cb88:	60bb      	str	r3, [r7, #8]
   2cb8a:	68bb      	ldr	r3, [r7, #8]
   2cb8c:	2b00      	cmp	r3, #0
   2cb8e:	d032      	beq.n	2cbf6 <remove_chain+0xaa>
   2cb90:	68bb      	ldr	r3, [r7, #8]
   2cb92:	2b01      	cmp	r3, #1
   2cb94:	d104      	bne.n	2cba0 <remove_chain+0x54>
   2cb96:	230f      	movs	r3, #15
   2cb98:	18fb      	adds	r3, r7, r3
   2cb9a:	2202      	movs	r2, #2
   2cb9c:	701a      	strb	r2, [r3, #0]
   2cb9e:	e02d      	b.n	2cbfc <remove_chain+0xb0>
   2cba0:	68bb      	ldr	r3, [r7, #8]
   2cba2:	3301      	adds	r3, #1
   2cba4:	d104      	bne.n	2cbb0 <remove_chain+0x64>
   2cba6:	230f      	movs	r3, #15
   2cba8:	18fb      	adds	r3, r7, r3
   2cbaa:	2201      	movs	r2, #1
   2cbac:	701a      	strb	r2, [r3, #0]
   2cbae:	e025      	b.n	2cbfc <remove_chain+0xb0>
   2cbb0:	230f      	movs	r3, #15
   2cbb2:	18fc      	adds	r4, r7, r3
   2cbb4:	6839      	ldr	r1, [r7, #0]
   2cbb6:	687b      	ldr	r3, [r7, #4]
   2cbb8:	2200      	movs	r2, #0
   2cbba:	0018      	movs	r0, r3
   2cbbc:	4b14      	ldr	r3, [pc, #80]	; (2cc10 <remove_chain+0xc4>)
   2cbbe:	4798      	blx	r3
   2cbc0:	0003      	movs	r3, r0
   2cbc2:	7023      	strb	r3, [r4, #0]
   2cbc4:	230f      	movs	r3, #15
   2cbc6:	18fb      	adds	r3, r7, r3
   2cbc8:	781b      	ldrb	r3, [r3, #0]
   2cbca:	2b00      	cmp	r3, #0
   2cbcc:	d115      	bne.n	2cbfa <remove_chain+0xae>
   2cbce:	687b      	ldr	r3, [r7, #4]
   2cbd0:	691b      	ldr	r3, [r3, #16]
   2cbd2:	3301      	adds	r3, #1
   2cbd4:	d007      	beq.n	2cbe6 <remove_chain+0x9a>
   2cbd6:	687b      	ldr	r3, [r7, #4]
   2cbd8:	691b      	ldr	r3, [r3, #16]
   2cbda:	1c5a      	adds	r2, r3, #1
   2cbdc:	687b      	ldr	r3, [r7, #4]
   2cbde:	611a      	str	r2, [r3, #16]
   2cbe0:	687b      	ldr	r3, [r7, #4]
   2cbe2:	2201      	movs	r2, #1
   2cbe4:	715a      	strb	r2, [r3, #5]
   2cbe6:	68bb      	ldr	r3, [r7, #8]
   2cbe8:	603b      	str	r3, [r7, #0]
   2cbea:	687b      	ldr	r3, [r7, #4]
   2cbec:	699a      	ldr	r2, [r3, #24]
   2cbee:	683b      	ldr	r3, [r7, #0]
   2cbf0:	429a      	cmp	r2, r3
   2cbf2:	d8c2      	bhi.n	2cb7a <remove_chain+0x2e>
   2cbf4:	e002      	b.n	2cbfc <remove_chain+0xb0>
   2cbf6:	46c0      	nop			; (mov r8, r8)
   2cbf8:	e000      	b.n	2cbfc <remove_chain+0xb0>
   2cbfa:	46c0      	nop			; (mov r8, r8)
   2cbfc:	230f      	movs	r3, #15
   2cbfe:	18fb      	adds	r3, r7, r3
   2cc00:	781b      	ldrb	r3, [r3, #0]
   2cc02:	0018      	movs	r0, r3
   2cc04:	46bd      	mov	sp, r7
   2cc06:	b005      	add	sp, #20
   2cc08:	bd90      	pop	{r4, r7, pc}
   2cc0a:	46c0      	nop			; (mov r8, r8)
   2cc0c:	0002c7a5 	.word	0x0002c7a5
   2cc10:	0002c911 	.word	0x0002c911

0002cc14 <create_chain>:
   2cc14:	b590      	push	{r4, r7, lr}
   2cc16:	b087      	sub	sp, #28
   2cc18:	af00      	add	r7, sp, #0
   2cc1a:	6078      	str	r0, [r7, #4]
   2cc1c:	6039      	str	r1, [r7, #0]
   2cc1e:	683b      	ldr	r3, [r7, #0]
   2cc20:	2b00      	cmp	r3, #0
   2cc22:	d10d      	bne.n	2cc40 <create_chain+0x2c>
   2cc24:	687b      	ldr	r3, [r7, #4]
   2cc26:	68db      	ldr	r3, [r3, #12]
   2cc28:	613b      	str	r3, [r7, #16]
   2cc2a:	693b      	ldr	r3, [r7, #16]
   2cc2c:	2b00      	cmp	r3, #0
   2cc2e:	d004      	beq.n	2cc3a <create_chain+0x26>
   2cc30:	687b      	ldr	r3, [r7, #4]
   2cc32:	699a      	ldr	r2, [r3, #24]
   2cc34:	693b      	ldr	r3, [r7, #16]
   2cc36:	429a      	cmp	r2, r3
   2cc38:	d818      	bhi.n	2cc6c <create_chain+0x58>
   2cc3a:	2301      	movs	r3, #1
   2cc3c:	613b      	str	r3, [r7, #16]
   2cc3e:	e015      	b.n	2cc6c <create_chain+0x58>
   2cc40:	683a      	ldr	r2, [r7, #0]
   2cc42:	687b      	ldr	r3, [r7, #4]
   2cc44:	0011      	movs	r1, r2
   2cc46:	0018      	movs	r0, r3
   2cc48:	4b3e      	ldr	r3, [pc, #248]	; (2cd44 <create_chain+0x130>)
   2cc4a:	4798      	blx	r3
   2cc4c:	0003      	movs	r3, r0
   2cc4e:	60bb      	str	r3, [r7, #8]
   2cc50:	68bb      	ldr	r3, [r7, #8]
   2cc52:	2b01      	cmp	r3, #1
   2cc54:	d801      	bhi.n	2cc5a <create_chain+0x46>
   2cc56:	2301      	movs	r3, #1
   2cc58:	e070      	b.n	2cd3c <create_chain+0x128>
   2cc5a:	687b      	ldr	r3, [r7, #4]
   2cc5c:	699a      	ldr	r2, [r3, #24]
   2cc5e:	68bb      	ldr	r3, [r7, #8]
   2cc60:	429a      	cmp	r2, r3
   2cc62:	d901      	bls.n	2cc68 <create_chain+0x54>
   2cc64:	68bb      	ldr	r3, [r7, #8]
   2cc66:	e069      	b.n	2cd3c <create_chain+0x128>
   2cc68:	683b      	ldr	r3, [r7, #0]
   2cc6a:	613b      	str	r3, [r7, #16]
   2cc6c:	693b      	ldr	r3, [r7, #16]
   2cc6e:	617b      	str	r3, [r7, #20]
   2cc70:	697b      	ldr	r3, [r7, #20]
   2cc72:	3301      	adds	r3, #1
   2cc74:	617b      	str	r3, [r7, #20]
   2cc76:	687b      	ldr	r3, [r7, #4]
   2cc78:	699a      	ldr	r2, [r3, #24]
   2cc7a:	697b      	ldr	r3, [r7, #20]
   2cc7c:	429a      	cmp	r2, r3
   2cc7e:	d807      	bhi.n	2cc90 <create_chain+0x7c>
   2cc80:	2302      	movs	r3, #2
   2cc82:	617b      	str	r3, [r7, #20]
   2cc84:	697a      	ldr	r2, [r7, #20]
   2cc86:	693b      	ldr	r3, [r7, #16]
   2cc88:	429a      	cmp	r2, r3
   2cc8a:	d901      	bls.n	2cc90 <create_chain+0x7c>
   2cc8c:	2300      	movs	r3, #0
   2cc8e:	e055      	b.n	2cd3c <create_chain+0x128>
   2cc90:	697a      	ldr	r2, [r7, #20]
   2cc92:	687b      	ldr	r3, [r7, #4]
   2cc94:	0011      	movs	r1, r2
   2cc96:	0018      	movs	r0, r3
   2cc98:	4b2a      	ldr	r3, [pc, #168]	; (2cd44 <create_chain+0x130>)
   2cc9a:	4798      	blx	r3
   2cc9c:	0003      	movs	r3, r0
   2cc9e:	60bb      	str	r3, [r7, #8]
   2cca0:	68bb      	ldr	r3, [r7, #8]
   2cca2:	2b00      	cmp	r3, #0
   2cca4:	d00d      	beq.n	2ccc2 <create_chain+0xae>
   2cca6:	68bb      	ldr	r3, [r7, #8]
   2cca8:	3301      	adds	r3, #1
   2ccaa:	d002      	beq.n	2ccb2 <create_chain+0x9e>
   2ccac:	68bb      	ldr	r3, [r7, #8]
   2ccae:	2b01      	cmp	r3, #1
   2ccb0:	d101      	bne.n	2ccb6 <create_chain+0xa2>
   2ccb2:	68bb      	ldr	r3, [r7, #8]
   2ccb4:	e042      	b.n	2cd3c <create_chain+0x128>
   2ccb6:	697a      	ldr	r2, [r7, #20]
   2ccb8:	693b      	ldr	r3, [r7, #16]
   2ccba:	429a      	cmp	r2, r3
   2ccbc:	d1d8      	bne.n	2cc70 <create_chain+0x5c>
   2ccbe:	2300      	movs	r3, #0
   2ccc0:	e03c      	b.n	2cd3c <create_chain+0x128>
   2ccc2:	46c0      	nop			; (mov r8, r8)
   2ccc4:	230f      	movs	r3, #15
   2ccc6:	18fc      	adds	r4, r7, r3
   2ccc8:	4a1f      	ldr	r2, [pc, #124]	; (2cd48 <create_chain+0x134>)
   2ccca:	6979      	ldr	r1, [r7, #20]
   2cccc:	687b      	ldr	r3, [r7, #4]
   2ccce:	0018      	movs	r0, r3
   2ccd0:	4b1e      	ldr	r3, [pc, #120]	; (2cd4c <create_chain+0x138>)
   2ccd2:	4798      	blx	r3
   2ccd4:	0003      	movs	r3, r0
   2ccd6:	7023      	strb	r3, [r4, #0]
   2ccd8:	230f      	movs	r3, #15
   2ccda:	18fb      	adds	r3, r7, r3
   2ccdc:	781b      	ldrb	r3, [r3, #0]
   2ccde:	2b00      	cmp	r3, #0
   2cce0:	d10c      	bne.n	2ccfc <create_chain+0xe8>
   2cce2:	683b      	ldr	r3, [r7, #0]
   2cce4:	2b00      	cmp	r3, #0
   2cce6:	d009      	beq.n	2ccfc <create_chain+0xe8>
   2cce8:	230f      	movs	r3, #15
   2ccea:	18fc      	adds	r4, r7, r3
   2ccec:	697a      	ldr	r2, [r7, #20]
   2ccee:	6839      	ldr	r1, [r7, #0]
   2ccf0:	687b      	ldr	r3, [r7, #4]
   2ccf2:	0018      	movs	r0, r3
   2ccf4:	4b15      	ldr	r3, [pc, #84]	; (2cd4c <create_chain+0x138>)
   2ccf6:	4798      	blx	r3
   2ccf8:	0003      	movs	r3, r0
   2ccfa:	7023      	strb	r3, [r4, #0]
   2ccfc:	230f      	movs	r3, #15
   2ccfe:	18fb      	adds	r3, r7, r3
   2cd00:	781b      	ldrb	r3, [r3, #0]
   2cd02:	2b00      	cmp	r3, #0
   2cd04:	d10f      	bne.n	2cd26 <create_chain+0x112>
   2cd06:	687b      	ldr	r3, [r7, #4]
   2cd08:	697a      	ldr	r2, [r7, #20]
   2cd0a:	60da      	str	r2, [r3, #12]
   2cd0c:	687b      	ldr	r3, [r7, #4]
   2cd0e:	691b      	ldr	r3, [r3, #16]
   2cd10:	3301      	adds	r3, #1
   2cd12:	d012      	beq.n	2cd3a <create_chain+0x126>
   2cd14:	687b      	ldr	r3, [r7, #4]
   2cd16:	691b      	ldr	r3, [r3, #16]
   2cd18:	1e5a      	subs	r2, r3, #1
   2cd1a:	687b      	ldr	r3, [r7, #4]
   2cd1c:	611a      	str	r2, [r3, #16]
   2cd1e:	687b      	ldr	r3, [r7, #4]
   2cd20:	2201      	movs	r2, #1
   2cd22:	715a      	strb	r2, [r3, #5]
   2cd24:	e009      	b.n	2cd3a <create_chain+0x126>
   2cd26:	230f      	movs	r3, #15
   2cd28:	18fb      	adds	r3, r7, r3
   2cd2a:	781b      	ldrb	r3, [r3, #0]
   2cd2c:	2b01      	cmp	r3, #1
   2cd2e:	d102      	bne.n	2cd36 <create_chain+0x122>
   2cd30:	2301      	movs	r3, #1
   2cd32:	425b      	negs	r3, r3
   2cd34:	e000      	b.n	2cd38 <create_chain+0x124>
   2cd36:	2301      	movs	r3, #1
   2cd38:	617b      	str	r3, [r7, #20]
   2cd3a:	697b      	ldr	r3, [r7, #20]
   2cd3c:	0018      	movs	r0, r3
   2cd3e:	46bd      	mov	sp, r7
   2cd40:	b007      	add	sp, #28
   2cd42:	bd90      	pop	{r4, r7, pc}
   2cd44:	0002c7a5 	.word	0x0002c7a5
   2cd48:	0fffffff 	.word	0x0fffffff
   2cd4c:	0002c911 	.word	0x0002c911

0002cd50 <dir_sdi>:
   2cd50:	b580      	push	{r7, lr}
   2cd52:	b084      	sub	sp, #16
   2cd54:	af00      	add	r7, sp, #0
   2cd56:	6078      	str	r0, [r7, #4]
   2cd58:	000a      	movs	r2, r1
   2cd5a:	1cbb      	adds	r3, r7, #2
   2cd5c:	801a      	strh	r2, [r3, #0]
   2cd5e:	687b      	ldr	r3, [r7, #4]
   2cd60:	1cba      	adds	r2, r7, #2
   2cd62:	8812      	ldrh	r2, [r2, #0]
   2cd64:	80da      	strh	r2, [r3, #6]
   2cd66:	687b      	ldr	r3, [r7, #4]
   2cd68:	689b      	ldr	r3, [r3, #8]
   2cd6a:	60fb      	str	r3, [r7, #12]
   2cd6c:	68fb      	ldr	r3, [r7, #12]
   2cd6e:	2b01      	cmp	r3, #1
   2cd70:	d005      	beq.n	2cd7e <dir_sdi+0x2e>
   2cd72:	687b      	ldr	r3, [r7, #4]
   2cd74:	681b      	ldr	r3, [r3, #0]
   2cd76:	699a      	ldr	r2, [r3, #24]
   2cd78:	68fb      	ldr	r3, [r7, #12]
   2cd7a:	429a      	cmp	r2, r3
   2cd7c:	d801      	bhi.n	2cd82 <dir_sdi+0x32>
   2cd7e:	2302      	movs	r3, #2
   2cd80:	e075      	b.n	2ce6e <dir_sdi+0x11e>
   2cd82:	68fb      	ldr	r3, [r7, #12]
   2cd84:	2b00      	cmp	r3, #0
   2cd86:	d108      	bne.n	2cd9a <dir_sdi+0x4a>
   2cd88:	687b      	ldr	r3, [r7, #4]
   2cd8a:	681b      	ldr	r3, [r3, #0]
   2cd8c:	781b      	ldrb	r3, [r3, #0]
   2cd8e:	2b03      	cmp	r3, #3
   2cd90:	d103      	bne.n	2cd9a <dir_sdi+0x4a>
   2cd92:	687b      	ldr	r3, [r7, #4]
   2cd94:	681b      	ldr	r3, [r3, #0]
   2cd96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2cd98:	60fb      	str	r3, [r7, #12]
   2cd9a:	68fb      	ldr	r3, [r7, #12]
   2cd9c:	2b00      	cmp	r3, #0
   2cd9e:	d116      	bne.n	2cdce <dir_sdi+0x7e>
   2cda0:	687b      	ldr	r3, [r7, #4]
   2cda2:	68fa      	ldr	r2, [r7, #12]
   2cda4:	60da      	str	r2, [r3, #12]
   2cda6:	687b      	ldr	r3, [r7, #4]
   2cda8:	681b      	ldr	r3, [r3, #0]
   2cdaa:	891b      	ldrh	r3, [r3, #8]
   2cdac:	1cba      	adds	r2, r7, #2
   2cdae:	8812      	ldrh	r2, [r2, #0]
   2cdb0:	429a      	cmp	r2, r3
   2cdb2:	d301      	bcc.n	2cdb8 <dir_sdi+0x68>
   2cdb4:	2302      	movs	r3, #2
   2cdb6:	e05a      	b.n	2ce6e <dir_sdi+0x11e>
   2cdb8:	687b      	ldr	r3, [r7, #4]
   2cdba:	681b      	ldr	r3, [r3, #0]
   2cdbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2cdbe:	1cba      	adds	r2, r7, #2
   2cdc0:	8812      	ldrh	r2, [r2, #0]
   2cdc2:	0912      	lsrs	r2, r2, #4
   2cdc4:	b292      	uxth	r2, r2
   2cdc6:	189a      	adds	r2, r3, r2
   2cdc8:	687b      	ldr	r3, [r7, #4]
   2cdca:	611a      	str	r2, [r3, #16]
   2cdcc:	e042      	b.n	2ce54 <dir_sdi+0x104>
   2cdce:	687b      	ldr	r3, [r7, #4]
   2cdd0:	681b      	ldr	r3, [r3, #0]
   2cdd2:	789b      	ldrb	r3, [r3, #2]
   2cdd4:	b29a      	uxth	r2, r3
   2cdd6:	230a      	movs	r3, #10
   2cdd8:	18fb      	adds	r3, r7, r3
   2cdda:	0112      	lsls	r2, r2, #4
   2cddc:	801a      	strh	r2, [r3, #0]
   2cdde:	e020      	b.n	2ce22 <dir_sdi+0xd2>
   2cde0:	687b      	ldr	r3, [r7, #4]
   2cde2:	681b      	ldr	r3, [r3, #0]
   2cde4:	68fa      	ldr	r2, [r7, #12]
   2cde6:	0011      	movs	r1, r2
   2cde8:	0018      	movs	r0, r3
   2cdea:	4b23      	ldr	r3, [pc, #140]	; (2ce78 <dir_sdi+0x128>)
   2cdec:	4798      	blx	r3
   2cdee:	0003      	movs	r3, r0
   2cdf0:	60fb      	str	r3, [r7, #12]
   2cdf2:	68fb      	ldr	r3, [r7, #12]
   2cdf4:	3301      	adds	r3, #1
   2cdf6:	d101      	bne.n	2cdfc <dir_sdi+0xac>
   2cdf8:	2301      	movs	r3, #1
   2cdfa:	e038      	b.n	2ce6e <dir_sdi+0x11e>
   2cdfc:	68fb      	ldr	r3, [r7, #12]
   2cdfe:	2b01      	cmp	r3, #1
   2ce00:	d905      	bls.n	2ce0e <dir_sdi+0xbe>
   2ce02:	687b      	ldr	r3, [r7, #4]
   2ce04:	681b      	ldr	r3, [r3, #0]
   2ce06:	699a      	ldr	r2, [r3, #24]
   2ce08:	68fb      	ldr	r3, [r7, #12]
   2ce0a:	429a      	cmp	r2, r3
   2ce0c:	d801      	bhi.n	2ce12 <dir_sdi+0xc2>
   2ce0e:	2302      	movs	r3, #2
   2ce10:	e02d      	b.n	2ce6e <dir_sdi+0x11e>
   2ce12:	1cbb      	adds	r3, r7, #2
   2ce14:	1cb9      	adds	r1, r7, #2
   2ce16:	220a      	movs	r2, #10
   2ce18:	18ba      	adds	r2, r7, r2
   2ce1a:	8809      	ldrh	r1, [r1, #0]
   2ce1c:	8812      	ldrh	r2, [r2, #0]
   2ce1e:	1a8a      	subs	r2, r1, r2
   2ce20:	801a      	strh	r2, [r3, #0]
   2ce22:	1cba      	adds	r2, r7, #2
   2ce24:	230a      	movs	r3, #10
   2ce26:	18fb      	adds	r3, r7, r3
   2ce28:	8812      	ldrh	r2, [r2, #0]
   2ce2a:	881b      	ldrh	r3, [r3, #0]
   2ce2c:	429a      	cmp	r2, r3
   2ce2e:	d2d7      	bcs.n	2cde0 <dir_sdi+0x90>
   2ce30:	687b      	ldr	r3, [r7, #4]
   2ce32:	68fa      	ldr	r2, [r7, #12]
   2ce34:	60da      	str	r2, [r3, #12]
   2ce36:	687b      	ldr	r3, [r7, #4]
   2ce38:	681b      	ldr	r3, [r3, #0]
   2ce3a:	68fa      	ldr	r2, [r7, #12]
   2ce3c:	0011      	movs	r1, r2
   2ce3e:	0018      	movs	r0, r3
   2ce40:	4b0e      	ldr	r3, [pc, #56]	; (2ce7c <dir_sdi+0x12c>)
   2ce42:	4798      	blx	r3
   2ce44:	0002      	movs	r2, r0
   2ce46:	1cbb      	adds	r3, r7, #2
   2ce48:	881b      	ldrh	r3, [r3, #0]
   2ce4a:	091b      	lsrs	r3, r3, #4
   2ce4c:	b29b      	uxth	r3, r3
   2ce4e:	18d2      	adds	r2, r2, r3
   2ce50:	687b      	ldr	r3, [r7, #4]
   2ce52:	611a      	str	r2, [r3, #16]
   2ce54:	687b      	ldr	r3, [r7, #4]
   2ce56:	681b      	ldr	r3, [r3, #0]
   2ce58:	3330      	adds	r3, #48	; 0x30
   2ce5a:	001a      	movs	r2, r3
   2ce5c:	1cbb      	adds	r3, r7, #2
   2ce5e:	881b      	ldrh	r3, [r3, #0]
   2ce60:	210f      	movs	r1, #15
   2ce62:	400b      	ands	r3, r1
   2ce64:	015b      	lsls	r3, r3, #5
   2ce66:	18d2      	adds	r2, r2, r3
   2ce68:	687b      	ldr	r3, [r7, #4]
   2ce6a:	615a      	str	r2, [r3, #20]
   2ce6c:	2300      	movs	r3, #0
   2ce6e:	0018      	movs	r0, r3
   2ce70:	46bd      	mov	sp, r7
   2ce72:	b004      	add	sp, #16
   2ce74:	bd80      	pop	{r7, pc}
   2ce76:	46c0      	nop			; (mov r8, r8)
   2ce78:	0002c7a5 	.word	0x0002c7a5
   2ce7c:	0002c76d 	.word	0x0002c76d

0002ce80 <dir_next>:
   2ce80:	b590      	push	{r4, r7, lr}
   2ce82:	b085      	sub	sp, #20
   2ce84:	af00      	add	r7, sp, #0
   2ce86:	6078      	str	r0, [r7, #4]
   2ce88:	6039      	str	r1, [r7, #0]
   2ce8a:	687b      	ldr	r3, [r7, #4]
   2ce8c:	88da      	ldrh	r2, [r3, #6]
   2ce8e:	2308      	movs	r3, #8
   2ce90:	18fb      	adds	r3, r7, r3
   2ce92:	3201      	adds	r2, #1
   2ce94:	801a      	strh	r2, [r3, #0]
   2ce96:	2308      	movs	r3, #8
   2ce98:	18fb      	adds	r3, r7, r3
   2ce9a:	881b      	ldrh	r3, [r3, #0]
   2ce9c:	2b00      	cmp	r3, #0
   2ce9e:	d003      	beq.n	2cea8 <dir_next+0x28>
   2cea0:	687b      	ldr	r3, [r7, #4]
   2cea2:	691b      	ldr	r3, [r3, #16]
   2cea4:	2b00      	cmp	r3, #0
   2cea6:	d101      	bne.n	2ceac <dir_next+0x2c>
   2cea8:	2304      	movs	r3, #4
   2ceaa:	e0d2      	b.n	2d052 <dir_next+0x1d2>
   2ceac:	2308      	movs	r3, #8
   2ceae:	18fb      	adds	r3, r7, r3
   2ceb0:	881b      	ldrh	r3, [r3, #0]
   2ceb2:	220f      	movs	r2, #15
   2ceb4:	4013      	ands	r3, r2
   2ceb6:	b29b      	uxth	r3, r3
   2ceb8:	2b00      	cmp	r3, #0
   2ceba:	d000      	beq.n	2cebe <dir_next+0x3e>
   2cebc:	e0b6      	b.n	2d02c <dir_next+0x1ac>
   2cebe:	687b      	ldr	r3, [r7, #4]
   2cec0:	691b      	ldr	r3, [r3, #16]
   2cec2:	1c5a      	adds	r2, r3, #1
   2cec4:	687b      	ldr	r3, [r7, #4]
   2cec6:	611a      	str	r2, [r3, #16]
   2cec8:	687b      	ldr	r3, [r7, #4]
   2ceca:	68db      	ldr	r3, [r3, #12]
   2cecc:	2b00      	cmp	r3, #0
   2cece:	d10a      	bne.n	2cee6 <dir_next+0x66>
   2ced0:	687b      	ldr	r3, [r7, #4]
   2ced2:	681b      	ldr	r3, [r3, #0]
   2ced4:	891b      	ldrh	r3, [r3, #8]
   2ced6:	2208      	movs	r2, #8
   2ced8:	18ba      	adds	r2, r7, r2
   2ceda:	8812      	ldrh	r2, [r2, #0]
   2cedc:	429a      	cmp	r2, r3
   2cede:	d200      	bcs.n	2cee2 <dir_next+0x62>
   2cee0:	e0a4      	b.n	2d02c <dir_next+0x1ac>
   2cee2:	2304      	movs	r3, #4
   2cee4:	e0b5      	b.n	2d052 <dir_next+0x1d2>
   2cee6:	2308      	movs	r3, #8
   2cee8:	18fb      	adds	r3, r7, r3
   2ceea:	881b      	ldrh	r3, [r3, #0]
   2ceec:	091b      	lsrs	r3, r3, #4
   2ceee:	b29b      	uxth	r3, r3
   2cef0:	001a      	movs	r2, r3
   2cef2:	687b      	ldr	r3, [r7, #4]
   2cef4:	681b      	ldr	r3, [r3, #0]
   2cef6:	789b      	ldrb	r3, [r3, #2]
   2cef8:	3b01      	subs	r3, #1
   2cefa:	4013      	ands	r3, r2
   2cefc:	d000      	beq.n	2cf00 <dir_next+0x80>
   2cefe:	e095      	b.n	2d02c <dir_next+0x1ac>
   2cf00:	687b      	ldr	r3, [r7, #4]
   2cf02:	681a      	ldr	r2, [r3, #0]
   2cf04:	687b      	ldr	r3, [r7, #4]
   2cf06:	68db      	ldr	r3, [r3, #12]
   2cf08:	0019      	movs	r1, r3
   2cf0a:	0010      	movs	r0, r2
   2cf0c:	4b53      	ldr	r3, [pc, #332]	; (2d05c <dir_next+0x1dc>)
   2cf0e:	4798      	blx	r3
   2cf10:	0003      	movs	r3, r0
   2cf12:	60fb      	str	r3, [r7, #12]
   2cf14:	68fb      	ldr	r3, [r7, #12]
   2cf16:	2b01      	cmp	r3, #1
   2cf18:	d801      	bhi.n	2cf1e <dir_next+0x9e>
   2cf1a:	2302      	movs	r3, #2
   2cf1c:	e099      	b.n	2d052 <dir_next+0x1d2>
   2cf1e:	68fb      	ldr	r3, [r7, #12]
   2cf20:	3301      	adds	r3, #1
   2cf22:	d101      	bne.n	2cf28 <dir_next+0xa8>
   2cf24:	2301      	movs	r3, #1
   2cf26:	e094      	b.n	2d052 <dir_next+0x1d2>
   2cf28:	687b      	ldr	r3, [r7, #4]
   2cf2a:	681b      	ldr	r3, [r3, #0]
   2cf2c:	699a      	ldr	r2, [r3, #24]
   2cf2e:	68fb      	ldr	r3, [r7, #12]
   2cf30:	429a      	cmp	r2, r3
   2cf32:	d900      	bls.n	2cf36 <dir_next+0xb6>
   2cf34:	e06d      	b.n	2d012 <dir_next+0x192>
   2cf36:	683b      	ldr	r3, [r7, #0]
   2cf38:	2b00      	cmp	r3, #0
   2cf3a:	d101      	bne.n	2cf40 <dir_next+0xc0>
   2cf3c:	2304      	movs	r3, #4
   2cf3e:	e088      	b.n	2d052 <dir_next+0x1d2>
   2cf40:	687b      	ldr	r3, [r7, #4]
   2cf42:	681a      	ldr	r2, [r3, #0]
   2cf44:	687b      	ldr	r3, [r7, #4]
   2cf46:	68db      	ldr	r3, [r3, #12]
   2cf48:	0019      	movs	r1, r3
   2cf4a:	0010      	movs	r0, r2
   2cf4c:	4b44      	ldr	r3, [pc, #272]	; (2d060 <dir_next+0x1e0>)
   2cf4e:	4798      	blx	r3
   2cf50:	0003      	movs	r3, r0
   2cf52:	60fb      	str	r3, [r7, #12]
   2cf54:	68fb      	ldr	r3, [r7, #12]
   2cf56:	2b00      	cmp	r3, #0
   2cf58:	d101      	bne.n	2cf5e <dir_next+0xde>
   2cf5a:	2307      	movs	r3, #7
   2cf5c:	e079      	b.n	2d052 <dir_next+0x1d2>
   2cf5e:	68fb      	ldr	r3, [r7, #12]
   2cf60:	2b01      	cmp	r3, #1
   2cf62:	d101      	bne.n	2cf68 <dir_next+0xe8>
   2cf64:	2302      	movs	r3, #2
   2cf66:	e074      	b.n	2d052 <dir_next+0x1d2>
   2cf68:	68fb      	ldr	r3, [r7, #12]
   2cf6a:	3301      	adds	r3, #1
   2cf6c:	d101      	bne.n	2cf72 <dir_next+0xf2>
   2cf6e:	2301      	movs	r3, #1
   2cf70:	e06f      	b.n	2d052 <dir_next+0x1d2>
   2cf72:	687b      	ldr	r3, [r7, #4]
   2cf74:	681b      	ldr	r3, [r3, #0]
   2cf76:	2100      	movs	r1, #0
   2cf78:	0018      	movs	r0, r3
   2cf7a:	4b3a      	ldr	r3, [pc, #232]	; (2d064 <dir_next+0x1e4>)
   2cf7c:	4798      	blx	r3
   2cf7e:	1e03      	subs	r3, r0, #0
   2cf80:	d001      	beq.n	2cf86 <dir_next+0x106>
   2cf82:	2301      	movs	r3, #1
   2cf84:	e065      	b.n	2d052 <dir_next+0x1d2>
   2cf86:	687b      	ldr	r3, [r7, #4]
   2cf88:	681b      	ldr	r3, [r3, #0]
   2cf8a:	3330      	adds	r3, #48	; 0x30
   2cf8c:	0018      	movs	r0, r3
   2cf8e:	2380      	movs	r3, #128	; 0x80
   2cf90:	009b      	lsls	r3, r3, #2
   2cf92:	001a      	movs	r2, r3
   2cf94:	2100      	movs	r1, #0
   2cf96:	4b34      	ldr	r3, [pc, #208]	; (2d068 <dir_next+0x1e8>)
   2cf98:	4798      	blx	r3
   2cf9a:	687b      	ldr	r3, [r7, #4]
   2cf9c:	681c      	ldr	r4, [r3, #0]
   2cf9e:	687b      	ldr	r3, [r7, #4]
   2cfa0:	681b      	ldr	r3, [r3, #0]
   2cfa2:	68fa      	ldr	r2, [r7, #12]
   2cfa4:	0011      	movs	r1, r2
   2cfa6:	0018      	movs	r0, r3
   2cfa8:	4b30      	ldr	r3, [pc, #192]	; (2d06c <dir_next+0x1ec>)
   2cfaa:	4798      	blx	r3
   2cfac:	0003      	movs	r3, r0
   2cfae:	62e3      	str	r3, [r4, #44]	; 0x2c
   2cfb0:	230b      	movs	r3, #11
   2cfb2:	18fb      	adds	r3, r7, r3
   2cfb4:	2200      	movs	r2, #0
   2cfb6:	701a      	strb	r2, [r3, #0]
   2cfb8:	e019      	b.n	2cfee <dir_next+0x16e>
   2cfba:	687b      	ldr	r3, [r7, #4]
   2cfbc:	681b      	ldr	r3, [r3, #0]
   2cfbe:	2201      	movs	r2, #1
   2cfc0:	711a      	strb	r2, [r3, #4]
   2cfc2:	687b      	ldr	r3, [r7, #4]
   2cfc4:	681b      	ldr	r3, [r3, #0]
   2cfc6:	2100      	movs	r1, #0
   2cfc8:	0018      	movs	r0, r3
   2cfca:	4b26      	ldr	r3, [pc, #152]	; (2d064 <dir_next+0x1e4>)
   2cfcc:	4798      	blx	r3
   2cfce:	1e03      	subs	r3, r0, #0
   2cfd0:	d001      	beq.n	2cfd6 <dir_next+0x156>
   2cfd2:	2301      	movs	r3, #1
   2cfd4:	e03d      	b.n	2d052 <dir_next+0x1d2>
   2cfd6:	687b      	ldr	r3, [r7, #4]
   2cfd8:	681b      	ldr	r3, [r3, #0]
   2cfda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2cfdc:	3201      	adds	r2, #1
   2cfde:	62da      	str	r2, [r3, #44]	; 0x2c
   2cfe0:	230b      	movs	r3, #11
   2cfe2:	18fb      	adds	r3, r7, r3
   2cfe4:	781a      	ldrb	r2, [r3, #0]
   2cfe6:	230b      	movs	r3, #11
   2cfe8:	18fb      	adds	r3, r7, r3
   2cfea:	3201      	adds	r2, #1
   2cfec:	701a      	strb	r2, [r3, #0]
   2cfee:	687b      	ldr	r3, [r7, #4]
   2cff0:	681b      	ldr	r3, [r3, #0]
   2cff2:	789b      	ldrb	r3, [r3, #2]
   2cff4:	220b      	movs	r2, #11
   2cff6:	18ba      	adds	r2, r7, r2
   2cff8:	7812      	ldrb	r2, [r2, #0]
   2cffa:	429a      	cmp	r2, r3
   2cffc:	d3dd      	bcc.n	2cfba <dir_next+0x13a>
   2cffe:	687b      	ldr	r3, [r7, #4]
   2d000:	681b      	ldr	r3, [r3, #0]
   2d002:	687a      	ldr	r2, [r7, #4]
   2d004:	6812      	ldr	r2, [r2, #0]
   2d006:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   2d008:	220b      	movs	r2, #11
   2d00a:	18ba      	adds	r2, r7, r2
   2d00c:	7812      	ldrb	r2, [r2, #0]
   2d00e:	1a8a      	subs	r2, r1, r2
   2d010:	62da      	str	r2, [r3, #44]	; 0x2c
   2d012:	687b      	ldr	r3, [r7, #4]
   2d014:	68fa      	ldr	r2, [r7, #12]
   2d016:	60da      	str	r2, [r3, #12]
   2d018:	687b      	ldr	r3, [r7, #4]
   2d01a:	681b      	ldr	r3, [r3, #0]
   2d01c:	68fa      	ldr	r2, [r7, #12]
   2d01e:	0011      	movs	r1, r2
   2d020:	0018      	movs	r0, r3
   2d022:	4b12      	ldr	r3, [pc, #72]	; (2d06c <dir_next+0x1ec>)
   2d024:	4798      	blx	r3
   2d026:	0002      	movs	r2, r0
   2d028:	687b      	ldr	r3, [r7, #4]
   2d02a:	611a      	str	r2, [r3, #16]
   2d02c:	687b      	ldr	r3, [r7, #4]
   2d02e:	2208      	movs	r2, #8
   2d030:	18ba      	adds	r2, r7, r2
   2d032:	8812      	ldrh	r2, [r2, #0]
   2d034:	80da      	strh	r2, [r3, #6]
   2d036:	687b      	ldr	r3, [r7, #4]
   2d038:	681b      	ldr	r3, [r3, #0]
   2d03a:	3330      	adds	r3, #48	; 0x30
   2d03c:	001a      	movs	r2, r3
   2d03e:	2308      	movs	r3, #8
   2d040:	18fb      	adds	r3, r7, r3
   2d042:	881b      	ldrh	r3, [r3, #0]
   2d044:	210f      	movs	r1, #15
   2d046:	400b      	ands	r3, r1
   2d048:	015b      	lsls	r3, r3, #5
   2d04a:	18d2      	adds	r2, r2, r3
   2d04c:	687b      	ldr	r3, [r7, #4]
   2d04e:	615a      	str	r2, [r3, #20]
   2d050:	2300      	movs	r3, #0
   2d052:	0018      	movs	r0, r3
   2d054:	46bd      	mov	sp, r7
   2d056:	b005      	add	sp, #20
   2d058:	bd90      	pop	{r4, r7, pc}
   2d05a:	46c0      	nop			; (mov r8, r8)
   2d05c:	0002c7a5 	.word	0x0002c7a5
   2d060:	0002cc15 	.word	0x0002cc15
   2d064:	0002c50d 	.word	0x0002c50d
   2d068:	0002c461 	.word	0x0002c461
   2d06c:	0002c76d 	.word	0x0002c76d

0002d070 <cmp_lfn>:
   2d070:	b590      	push	{r4, r7, lr}
   2d072:	b087      	sub	sp, #28
   2d074:	af00      	add	r7, sp, #0
   2d076:	6078      	str	r0, [r7, #4]
   2d078:	6039      	str	r1, [r7, #0]
   2d07a:	683b      	ldr	r3, [r7, #0]
   2d07c:	781b      	ldrb	r3, [r3, #0]
   2d07e:	001a      	movs	r2, r3
   2d080:	2340      	movs	r3, #64	; 0x40
   2d082:	439a      	bics	r2, r3
   2d084:	0013      	movs	r3, r2
   2d086:	1e5a      	subs	r2, r3, #1
   2d088:	0013      	movs	r3, r2
   2d08a:	005b      	lsls	r3, r3, #1
   2d08c:	189b      	adds	r3, r3, r2
   2d08e:	009b      	lsls	r3, r3, #2
   2d090:	189b      	adds	r3, r3, r2
   2d092:	617b      	str	r3, [r7, #20]
   2d094:	2300      	movs	r3, #0
   2d096:	613b      	str	r3, [r7, #16]
   2d098:	230e      	movs	r3, #14
   2d09a:	18fb      	adds	r3, r7, r3
   2d09c:	2201      	movs	r2, #1
   2d09e:	801a      	strh	r2, [r3, #0]
   2d0a0:	4a31      	ldr	r2, [pc, #196]	; (2d168 <cmp_lfn+0xf8>)
   2d0a2:	693b      	ldr	r3, [r7, #16]
   2d0a4:	18d3      	adds	r3, r2, r3
   2d0a6:	781b      	ldrb	r3, [r3, #0]
   2d0a8:	3301      	adds	r3, #1
   2d0aa:	683a      	ldr	r2, [r7, #0]
   2d0ac:	18d3      	adds	r3, r2, r3
   2d0ae:	781b      	ldrb	r3, [r3, #0]
   2d0b0:	021b      	lsls	r3, r3, #8
   2d0b2:	b21a      	sxth	r2, r3
   2d0b4:	492c      	ldr	r1, [pc, #176]	; (2d168 <cmp_lfn+0xf8>)
   2d0b6:	693b      	ldr	r3, [r7, #16]
   2d0b8:	18cb      	adds	r3, r1, r3
   2d0ba:	781b      	ldrb	r3, [r3, #0]
   2d0bc:	0019      	movs	r1, r3
   2d0be:	683b      	ldr	r3, [r7, #0]
   2d0c0:	185b      	adds	r3, r3, r1
   2d0c2:	781b      	ldrb	r3, [r3, #0]
   2d0c4:	b21b      	sxth	r3, r3
   2d0c6:	4313      	orrs	r3, r2
   2d0c8:	b21a      	sxth	r2, r3
   2d0ca:	230c      	movs	r3, #12
   2d0cc:	18fb      	adds	r3, r7, r3
   2d0ce:	801a      	strh	r2, [r3, #0]
   2d0d0:	230e      	movs	r3, #14
   2d0d2:	18fb      	adds	r3, r7, r3
   2d0d4:	881b      	ldrh	r3, [r3, #0]
   2d0d6:	2b00      	cmp	r3, #0
   2d0d8:	d01f      	beq.n	2d11a <cmp_lfn+0xaa>
   2d0da:	230e      	movs	r3, #14
   2d0dc:	18fc      	adds	r4, r7, r3
   2d0de:	230c      	movs	r3, #12
   2d0e0:	18fb      	adds	r3, r7, r3
   2d0e2:	881b      	ldrh	r3, [r3, #0]
   2d0e4:	0018      	movs	r0, r3
   2d0e6:	4b21      	ldr	r3, [pc, #132]	; (2d16c <cmp_lfn+0xfc>)
   2d0e8:	4798      	blx	r3
   2d0ea:	0003      	movs	r3, r0
   2d0ec:	8023      	strh	r3, [r4, #0]
   2d0ee:	697b      	ldr	r3, [r7, #20]
   2d0f0:	2bfe      	cmp	r3, #254	; 0xfe
   2d0f2:	d810      	bhi.n	2d116 <cmp_lfn+0xa6>
   2d0f4:	697b      	ldr	r3, [r7, #20]
   2d0f6:	1c5a      	adds	r2, r3, #1
   2d0f8:	617a      	str	r2, [r7, #20]
   2d0fa:	005b      	lsls	r3, r3, #1
   2d0fc:	687a      	ldr	r2, [r7, #4]
   2d0fe:	18d3      	adds	r3, r2, r3
   2d100:	881b      	ldrh	r3, [r3, #0]
   2d102:	0018      	movs	r0, r3
   2d104:	4b19      	ldr	r3, [pc, #100]	; (2d16c <cmp_lfn+0xfc>)
   2d106:	4798      	blx	r3
   2d108:	0003      	movs	r3, r0
   2d10a:	001a      	movs	r2, r3
   2d10c:	230e      	movs	r3, #14
   2d10e:	18fb      	adds	r3, r7, r3
   2d110:	881b      	ldrh	r3, [r3, #0]
   2d112:	4293      	cmp	r3, r2
   2d114:	d009      	beq.n	2d12a <cmp_lfn+0xba>
   2d116:	2300      	movs	r3, #0
   2d118:	e022      	b.n	2d160 <cmp_lfn+0xf0>
   2d11a:	230c      	movs	r3, #12
   2d11c:	18fb      	adds	r3, r7, r3
   2d11e:	881b      	ldrh	r3, [r3, #0]
   2d120:	4a13      	ldr	r2, [pc, #76]	; (2d170 <cmp_lfn+0x100>)
   2d122:	4293      	cmp	r3, r2
   2d124:	d001      	beq.n	2d12a <cmp_lfn+0xba>
   2d126:	2300      	movs	r3, #0
   2d128:	e01a      	b.n	2d160 <cmp_lfn+0xf0>
   2d12a:	693b      	ldr	r3, [r7, #16]
   2d12c:	3301      	adds	r3, #1
   2d12e:	613b      	str	r3, [r7, #16]
   2d130:	693b      	ldr	r3, [r7, #16]
   2d132:	2b0c      	cmp	r3, #12
   2d134:	d9b4      	bls.n	2d0a0 <cmp_lfn+0x30>
   2d136:	683b      	ldr	r3, [r7, #0]
   2d138:	781b      	ldrb	r3, [r3, #0]
   2d13a:	001a      	movs	r2, r3
   2d13c:	2340      	movs	r3, #64	; 0x40
   2d13e:	4013      	ands	r3, r2
   2d140:	d00d      	beq.n	2d15e <cmp_lfn+0xee>
   2d142:	230e      	movs	r3, #14
   2d144:	18fb      	adds	r3, r7, r3
   2d146:	881b      	ldrh	r3, [r3, #0]
   2d148:	2b00      	cmp	r3, #0
   2d14a:	d008      	beq.n	2d15e <cmp_lfn+0xee>
   2d14c:	697b      	ldr	r3, [r7, #20]
   2d14e:	005b      	lsls	r3, r3, #1
   2d150:	687a      	ldr	r2, [r7, #4]
   2d152:	18d3      	adds	r3, r2, r3
   2d154:	881b      	ldrh	r3, [r3, #0]
   2d156:	2b00      	cmp	r3, #0
   2d158:	d001      	beq.n	2d15e <cmp_lfn+0xee>
   2d15a:	2300      	movs	r3, #0
   2d15c:	e000      	b.n	2d160 <cmp_lfn+0xf0>
   2d15e:	2301      	movs	r3, #1
   2d160:	0018      	movs	r0, r3
   2d162:	46bd      	mov	sp, r7
   2d164:	b007      	add	sp, #28
   2d166:	bd90      	pop	{r4, r7, pc}
   2d168:	0003a340 	.word	0x0003a340
   2d16c:	0002f11d 	.word	0x0002f11d
   2d170:	0000ffff 	.word	0x0000ffff

0002d174 <fit_lfn>:
   2d174:	b580      	push	{r7, lr}
   2d176:	b088      	sub	sp, #32
   2d178:	af00      	add	r7, sp, #0
   2d17a:	60f8      	str	r0, [r7, #12]
   2d17c:	60b9      	str	r1, [r7, #8]
   2d17e:	0019      	movs	r1, r3
   2d180:	1dfb      	adds	r3, r7, #7
   2d182:	701a      	strb	r2, [r3, #0]
   2d184:	1dbb      	adds	r3, r7, #6
   2d186:	1c0a      	adds	r2, r1, #0
   2d188:	701a      	strb	r2, [r3, #0]
   2d18a:	68bb      	ldr	r3, [r7, #8]
   2d18c:	330d      	adds	r3, #13
   2d18e:	1dba      	adds	r2, r7, #6
   2d190:	7812      	ldrb	r2, [r2, #0]
   2d192:	701a      	strb	r2, [r3, #0]
   2d194:	68bb      	ldr	r3, [r7, #8]
   2d196:	330b      	adds	r3, #11
   2d198:	220f      	movs	r2, #15
   2d19a:	701a      	strb	r2, [r3, #0]
   2d19c:	68bb      	ldr	r3, [r7, #8]
   2d19e:	330c      	adds	r3, #12
   2d1a0:	2200      	movs	r2, #0
   2d1a2:	701a      	strb	r2, [r3, #0]
   2d1a4:	68bb      	ldr	r3, [r7, #8]
   2d1a6:	331a      	adds	r3, #26
   2d1a8:	2200      	movs	r2, #0
   2d1aa:	701a      	strb	r2, [r3, #0]
   2d1ac:	68bb      	ldr	r3, [r7, #8]
   2d1ae:	331b      	adds	r3, #27
   2d1b0:	2200      	movs	r2, #0
   2d1b2:	701a      	strb	r2, [r3, #0]
   2d1b4:	1dfb      	adds	r3, r7, #7
   2d1b6:	781b      	ldrb	r3, [r3, #0]
   2d1b8:	1e5a      	subs	r2, r3, #1
   2d1ba:	0013      	movs	r3, r2
   2d1bc:	005b      	lsls	r3, r3, #1
   2d1be:	189b      	adds	r3, r3, r2
   2d1c0:	009b      	lsls	r3, r3, #2
   2d1c2:	189b      	adds	r3, r3, r2
   2d1c4:	61fb      	str	r3, [r7, #28]
   2d1c6:	2316      	movs	r3, #22
   2d1c8:	18fb      	adds	r3, r7, r3
   2d1ca:	2200      	movs	r2, #0
   2d1cc:	801a      	strh	r2, [r3, #0]
   2d1ce:	2300      	movs	r3, #0
   2d1d0:	61bb      	str	r3, [r7, #24]
   2d1d2:	2316      	movs	r3, #22
   2d1d4:	18fb      	adds	r3, r7, r3
   2d1d6:	881b      	ldrh	r3, [r3, #0]
   2d1d8:	4a28      	ldr	r2, [pc, #160]	; (2d27c <fit_lfn+0x108>)
   2d1da:	4293      	cmp	r3, r2
   2d1dc:	d009      	beq.n	2d1f2 <fit_lfn+0x7e>
   2d1de:	69fb      	ldr	r3, [r7, #28]
   2d1e0:	1c5a      	adds	r2, r3, #1
   2d1e2:	61fa      	str	r2, [r7, #28]
   2d1e4:	005b      	lsls	r3, r3, #1
   2d1e6:	68fa      	ldr	r2, [r7, #12]
   2d1e8:	18d2      	adds	r2, r2, r3
   2d1ea:	2316      	movs	r3, #22
   2d1ec:	18fb      	adds	r3, r7, r3
   2d1ee:	8812      	ldrh	r2, [r2, #0]
   2d1f0:	801a      	strh	r2, [r3, #0]
   2d1f2:	4a23      	ldr	r2, [pc, #140]	; (2d280 <fit_lfn+0x10c>)
   2d1f4:	69bb      	ldr	r3, [r7, #24]
   2d1f6:	18d3      	adds	r3, r2, r3
   2d1f8:	781b      	ldrb	r3, [r3, #0]
   2d1fa:	001a      	movs	r2, r3
   2d1fc:	68bb      	ldr	r3, [r7, #8]
   2d1fe:	189b      	adds	r3, r3, r2
   2d200:	2216      	movs	r2, #22
   2d202:	18ba      	adds	r2, r7, r2
   2d204:	8812      	ldrh	r2, [r2, #0]
   2d206:	b2d2      	uxtb	r2, r2
   2d208:	701a      	strb	r2, [r3, #0]
   2d20a:	4a1d      	ldr	r2, [pc, #116]	; (2d280 <fit_lfn+0x10c>)
   2d20c:	69bb      	ldr	r3, [r7, #24]
   2d20e:	18d3      	adds	r3, r2, r3
   2d210:	781b      	ldrb	r3, [r3, #0]
   2d212:	3301      	adds	r3, #1
   2d214:	68ba      	ldr	r2, [r7, #8]
   2d216:	18d3      	adds	r3, r2, r3
   2d218:	2216      	movs	r2, #22
   2d21a:	18ba      	adds	r2, r7, r2
   2d21c:	8812      	ldrh	r2, [r2, #0]
   2d21e:	0a12      	lsrs	r2, r2, #8
   2d220:	b292      	uxth	r2, r2
   2d222:	b2d2      	uxtb	r2, r2
   2d224:	701a      	strb	r2, [r3, #0]
   2d226:	2316      	movs	r3, #22
   2d228:	18fb      	adds	r3, r7, r3
   2d22a:	881b      	ldrh	r3, [r3, #0]
   2d22c:	2b00      	cmp	r3, #0
   2d22e:	d104      	bne.n	2d23a <fit_lfn+0xc6>
   2d230:	2316      	movs	r3, #22
   2d232:	18fb      	adds	r3, r7, r3
   2d234:	2201      	movs	r2, #1
   2d236:	4252      	negs	r2, r2
   2d238:	801a      	strh	r2, [r3, #0]
   2d23a:	69bb      	ldr	r3, [r7, #24]
   2d23c:	3301      	adds	r3, #1
   2d23e:	61bb      	str	r3, [r7, #24]
   2d240:	69bb      	ldr	r3, [r7, #24]
   2d242:	2b0c      	cmp	r3, #12
   2d244:	d9c5      	bls.n	2d1d2 <fit_lfn+0x5e>
   2d246:	2316      	movs	r3, #22
   2d248:	18fb      	adds	r3, r7, r3
   2d24a:	881b      	ldrh	r3, [r3, #0]
   2d24c:	4a0b      	ldr	r2, [pc, #44]	; (2d27c <fit_lfn+0x108>)
   2d24e:	4293      	cmp	r3, r2
   2d250:	d006      	beq.n	2d260 <fit_lfn+0xec>
   2d252:	69fb      	ldr	r3, [r7, #28]
   2d254:	005b      	lsls	r3, r3, #1
   2d256:	68fa      	ldr	r2, [r7, #12]
   2d258:	18d3      	adds	r3, r2, r3
   2d25a:	881b      	ldrh	r3, [r3, #0]
   2d25c:	2b00      	cmp	r3, #0
   2d25e:	d105      	bne.n	2d26c <fit_lfn+0xf8>
   2d260:	1dfb      	adds	r3, r7, #7
   2d262:	1dfa      	adds	r2, r7, #7
   2d264:	7812      	ldrb	r2, [r2, #0]
   2d266:	2140      	movs	r1, #64	; 0x40
   2d268:	430a      	orrs	r2, r1
   2d26a:	701a      	strb	r2, [r3, #0]
   2d26c:	68bb      	ldr	r3, [r7, #8]
   2d26e:	1dfa      	adds	r2, r7, #7
   2d270:	7812      	ldrb	r2, [r2, #0]
   2d272:	701a      	strb	r2, [r3, #0]
   2d274:	46c0      	nop			; (mov r8, r8)
   2d276:	46bd      	mov	sp, r7
   2d278:	b008      	add	sp, #32
   2d27a:	bd80      	pop	{r7, pc}
   2d27c:	0000ffff 	.word	0x0000ffff
   2d280:	0003a340 	.word	0x0003a340

0002d284 <gen_numname>:
   2d284:	b580      	push	{r7, lr}
   2d286:	b08a      	sub	sp, #40	; 0x28
   2d288:	af00      	add	r7, sp, #0
   2d28a:	60f8      	str	r0, [r7, #12]
   2d28c:	60b9      	str	r1, [r7, #8]
   2d28e:	607a      	str	r2, [r7, #4]
   2d290:	001a      	movs	r2, r3
   2d292:	1cbb      	adds	r3, r7, #2
   2d294:	801a      	strh	r2, [r3, #0]
   2d296:	68b9      	ldr	r1, [r7, #8]
   2d298:	68fb      	ldr	r3, [r7, #12]
   2d29a:	220b      	movs	r2, #11
   2d29c:	0018      	movs	r0, r3
   2d29e:	4b38      	ldr	r3, [pc, #224]	; (2d380 <gen_numname+0xfc>)
   2d2a0:	4798      	blx	r3
   2d2a2:	1cbb      	adds	r3, r7, #2
   2d2a4:	881b      	ldrh	r3, [r3, #0]
   2d2a6:	2b05      	cmp	r3, #5
   2d2a8:	d911      	bls.n	2d2ce <gen_numname+0x4a>
   2d2aa:	1cbb      	adds	r3, r7, #2
   2d2ac:	881b      	ldrh	r3, [r3, #0]
   2d2ae:	b29a      	uxth	r2, r3
   2d2b0:	0852      	lsrs	r2, r2, #1
   2d2b2:	03db      	lsls	r3, r3, #15
   2d2b4:	4313      	orrs	r3, r2
   2d2b6:	b299      	uxth	r1, r3
   2d2b8:	687b      	ldr	r3, [r7, #4]
   2d2ba:	1c9a      	adds	r2, r3, #2
   2d2bc:	607a      	str	r2, [r7, #4]
   2d2be:	881a      	ldrh	r2, [r3, #0]
   2d2c0:	1cbb      	adds	r3, r7, #2
   2d2c2:	188a      	adds	r2, r1, r2
   2d2c4:	801a      	strh	r2, [r3, #0]
   2d2c6:	687b      	ldr	r3, [r7, #4]
   2d2c8:	881b      	ldrh	r3, [r3, #0]
   2d2ca:	2b00      	cmp	r3, #0
   2d2cc:	d1ed      	bne.n	2d2aa <gen_numname+0x26>
   2d2ce:	2307      	movs	r3, #7
   2d2d0:	623b      	str	r3, [r7, #32]
   2d2d2:	1cbb      	adds	r3, r7, #2
   2d2d4:	881b      	ldrh	r3, [r3, #0]
   2d2d6:	b2db      	uxtb	r3, r3
   2d2d8:	220f      	movs	r2, #15
   2d2da:	4013      	ands	r3, r2
   2d2dc:	b2da      	uxtb	r2, r3
   2d2de:	2327      	movs	r3, #39	; 0x27
   2d2e0:	18fb      	adds	r3, r7, r3
   2d2e2:	3230      	adds	r2, #48	; 0x30
   2d2e4:	701a      	strb	r2, [r3, #0]
   2d2e6:	2327      	movs	r3, #39	; 0x27
   2d2e8:	18fb      	adds	r3, r7, r3
   2d2ea:	781b      	ldrb	r3, [r3, #0]
   2d2ec:	2b39      	cmp	r3, #57	; 0x39
   2d2ee:	d906      	bls.n	2d2fe <gen_numname+0x7a>
   2d2f0:	2327      	movs	r3, #39	; 0x27
   2d2f2:	18fb      	adds	r3, r7, r3
   2d2f4:	2227      	movs	r2, #39	; 0x27
   2d2f6:	18ba      	adds	r2, r7, r2
   2d2f8:	7812      	ldrb	r2, [r2, #0]
   2d2fa:	3207      	adds	r2, #7
   2d2fc:	701a      	strb	r2, [r3, #0]
   2d2fe:	6a3b      	ldr	r3, [r7, #32]
   2d300:	1e5a      	subs	r2, r3, #1
   2d302:	623a      	str	r2, [r7, #32]
   2d304:	2214      	movs	r2, #20
   2d306:	18ba      	adds	r2, r7, r2
   2d308:	2127      	movs	r1, #39	; 0x27
   2d30a:	1879      	adds	r1, r7, r1
   2d30c:	7809      	ldrb	r1, [r1, #0]
   2d30e:	54d1      	strb	r1, [r2, r3]
   2d310:	1cbb      	adds	r3, r7, #2
   2d312:	1cba      	adds	r2, r7, #2
   2d314:	8812      	ldrh	r2, [r2, #0]
   2d316:	0912      	lsrs	r2, r2, #4
   2d318:	801a      	strh	r2, [r3, #0]
   2d31a:	1cbb      	adds	r3, r7, #2
   2d31c:	881b      	ldrh	r3, [r3, #0]
   2d31e:	2b00      	cmp	r3, #0
   2d320:	d1d7      	bne.n	2d2d2 <gen_numname+0x4e>
   2d322:	2314      	movs	r3, #20
   2d324:	18fa      	adds	r2, r7, r3
   2d326:	6a3b      	ldr	r3, [r7, #32]
   2d328:	18d3      	adds	r3, r2, r3
   2d32a:	227e      	movs	r2, #126	; 0x7e
   2d32c:	701a      	strb	r2, [r3, #0]
   2d32e:	2300      	movs	r3, #0
   2d330:	61fb      	str	r3, [r7, #28]
   2d332:	e002      	b.n	2d33a <gen_numname+0xb6>
   2d334:	69fb      	ldr	r3, [r7, #28]
   2d336:	3301      	adds	r3, #1
   2d338:	61fb      	str	r3, [r7, #28]
   2d33a:	69fa      	ldr	r2, [r7, #28]
   2d33c:	6a3b      	ldr	r3, [r7, #32]
   2d33e:	429a      	cmp	r2, r3
   2d340:	d205      	bcs.n	2d34e <gen_numname+0xca>
   2d342:	68fa      	ldr	r2, [r7, #12]
   2d344:	69fb      	ldr	r3, [r7, #28]
   2d346:	18d3      	adds	r3, r2, r3
   2d348:	781b      	ldrb	r3, [r3, #0]
   2d34a:	2b20      	cmp	r3, #32
   2d34c:	d1f2      	bne.n	2d334 <gen_numname+0xb0>
   2d34e:	69fb      	ldr	r3, [r7, #28]
   2d350:	1c5a      	adds	r2, r3, #1
   2d352:	61fa      	str	r2, [r7, #28]
   2d354:	68fa      	ldr	r2, [r7, #12]
   2d356:	18d2      	adds	r2, r2, r3
   2d358:	6a3b      	ldr	r3, [r7, #32]
   2d35a:	2b07      	cmp	r3, #7
   2d35c:	d806      	bhi.n	2d36c <gen_numname+0xe8>
   2d35e:	6a3b      	ldr	r3, [r7, #32]
   2d360:	1c59      	adds	r1, r3, #1
   2d362:	6239      	str	r1, [r7, #32]
   2d364:	2114      	movs	r1, #20
   2d366:	1879      	adds	r1, r7, r1
   2d368:	5ccb      	ldrb	r3, [r1, r3]
   2d36a:	e000      	b.n	2d36e <gen_numname+0xea>
   2d36c:	2320      	movs	r3, #32
   2d36e:	7013      	strb	r3, [r2, #0]
   2d370:	69fb      	ldr	r3, [r7, #28]
   2d372:	2b07      	cmp	r3, #7
   2d374:	d9eb      	bls.n	2d34e <gen_numname+0xca>
   2d376:	46c0      	nop			; (mov r8, r8)
   2d378:	46bd      	mov	sp, r7
   2d37a:	b00a      	add	sp, #40	; 0x28
   2d37c:	bd80      	pop	{r7, pc}
   2d37e:	46c0      	nop			; (mov r8, r8)
   2d380:	0002c429 	.word	0x0002c429

0002d384 <sum_sfn>:
   2d384:	b580      	push	{r7, lr}
   2d386:	b084      	sub	sp, #16
   2d388:	af00      	add	r7, sp, #0
   2d38a:	6078      	str	r0, [r7, #4]
   2d38c:	230f      	movs	r3, #15
   2d38e:	18fb      	adds	r3, r7, r3
   2d390:	2200      	movs	r2, #0
   2d392:	701a      	strb	r2, [r3, #0]
   2d394:	230b      	movs	r3, #11
   2d396:	60bb      	str	r3, [r7, #8]
   2d398:	230f      	movs	r3, #15
   2d39a:	18fb      	adds	r3, r7, r3
   2d39c:	781b      	ldrb	r3, [r3, #0]
   2d39e:	b2da      	uxtb	r2, r3
   2d3a0:	0852      	lsrs	r2, r2, #1
   2d3a2:	01db      	lsls	r3, r3, #7
   2d3a4:	4313      	orrs	r3, r2
   2d3a6:	b2d9      	uxtb	r1, r3
   2d3a8:	687b      	ldr	r3, [r7, #4]
   2d3aa:	1c5a      	adds	r2, r3, #1
   2d3ac:	607a      	str	r2, [r7, #4]
   2d3ae:	781a      	ldrb	r2, [r3, #0]
   2d3b0:	230f      	movs	r3, #15
   2d3b2:	18fb      	adds	r3, r7, r3
   2d3b4:	188a      	adds	r2, r1, r2
   2d3b6:	701a      	strb	r2, [r3, #0]
   2d3b8:	68bb      	ldr	r3, [r7, #8]
   2d3ba:	3b01      	subs	r3, #1
   2d3bc:	60bb      	str	r3, [r7, #8]
   2d3be:	68bb      	ldr	r3, [r7, #8]
   2d3c0:	2b00      	cmp	r3, #0
   2d3c2:	d1e9      	bne.n	2d398 <sum_sfn+0x14>
   2d3c4:	230f      	movs	r3, #15
   2d3c6:	18fb      	adds	r3, r7, r3
   2d3c8:	781b      	ldrb	r3, [r3, #0]
   2d3ca:	0018      	movs	r0, r3
   2d3cc:	46bd      	mov	sp, r7
   2d3ce:	b004      	add	sp, #16
   2d3d0:	bd80      	pop	{r7, pc}
	...

0002d3d4 <dir_find>:
   2d3d4:	b590      	push	{r4, r7, lr}
   2d3d6:	b087      	sub	sp, #28
   2d3d8:	af00      	add	r7, sp, #0
   2d3da:	6078      	str	r0, [r7, #4]
   2d3dc:	2317      	movs	r3, #23
   2d3de:	18fc      	adds	r4, r7, r3
   2d3e0:	687b      	ldr	r3, [r7, #4]
   2d3e2:	2100      	movs	r1, #0
   2d3e4:	0018      	movs	r0, r3
   2d3e6:	4b74      	ldr	r3, [pc, #464]	; (2d5b8 <dir_find+0x1e4>)
   2d3e8:	4798      	blx	r3
   2d3ea:	0003      	movs	r3, r0
   2d3ec:	7023      	strb	r3, [r4, #0]
   2d3ee:	2317      	movs	r3, #23
   2d3f0:	18fb      	adds	r3, r7, r3
   2d3f2:	781b      	ldrb	r3, [r3, #0]
   2d3f4:	2b00      	cmp	r3, #0
   2d3f6:	d003      	beq.n	2d400 <dir_find+0x2c>
   2d3f8:	2317      	movs	r3, #23
   2d3fa:	18fb      	adds	r3, r7, r3
   2d3fc:	781b      	ldrb	r3, [r3, #0]
   2d3fe:	e0d6      	b.n	2d5ae <dir_find+0x1da>
   2d400:	2314      	movs	r3, #20
   2d402:	18fb      	adds	r3, r7, r3
   2d404:	22ff      	movs	r2, #255	; 0xff
   2d406:	701a      	strb	r2, [r3, #0]
   2d408:	2315      	movs	r3, #21
   2d40a:	18fb      	adds	r3, r7, r3
   2d40c:	2214      	movs	r2, #20
   2d40e:	18ba      	adds	r2, r7, r2
   2d410:	7812      	ldrb	r2, [r2, #0]
   2d412:	701a      	strb	r2, [r3, #0]
   2d414:	687b      	ldr	r3, [r7, #4]
   2d416:	681a      	ldr	r2, [r3, #0]
   2d418:	687b      	ldr	r3, [r7, #4]
   2d41a:	691b      	ldr	r3, [r3, #16]
   2d41c:	2117      	movs	r1, #23
   2d41e:	187c      	adds	r4, r7, r1
   2d420:	0019      	movs	r1, r3
   2d422:	0010      	movs	r0, r2
   2d424:	4b65      	ldr	r3, [pc, #404]	; (2d5bc <dir_find+0x1e8>)
   2d426:	4798      	blx	r3
   2d428:	0003      	movs	r3, r0
   2d42a:	7023      	strb	r3, [r4, #0]
   2d42c:	2317      	movs	r3, #23
   2d42e:	18fb      	adds	r3, r7, r3
   2d430:	781b      	ldrb	r3, [r3, #0]
   2d432:	2b00      	cmp	r3, #0
   2d434:	d000      	beq.n	2d438 <dir_find+0x64>
   2d436:	e0b2      	b.n	2d59e <dir_find+0x1ca>
   2d438:	687b      	ldr	r3, [r7, #4]
   2d43a:	695b      	ldr	r3, [r3, #20]
   2d43c:	613b      	str	r3, [r7, #16]
   2d43e:	2316      	movs	r3, #22
   2d440:	18fb      	adds	r3, r7, r3
   2d442:	693a      	ldr	r2, [r7, #16]
   2d444:	7812      	ldrb	r2, [r2, #0]
   2d446:	701a      	strb	r2, [r3, #0]
   2d448:	2316      	movs	r3, #22
   2d44a:	18fb      	adds	r3, r7, r3
   2d44c:	781b      	ldrb	r3, [r3, #0]
   2d44e:	2b00      	cmp	r3, #0
   2d450:	d104      	bne.n	2d45c <dir_find+0x88>
   2d452:	2317      	movs	r3, #23
   2d454:	18fb      	adds	r3, r7, r3
   2d456:	2204      	movs	r2, #4
   2d458:	701a      	strb	r2, [r3, #0]
   2d45a:	e0a5      	b.n	2d5a8 <dir_find+0x1d4>
   2d45c:	693b      	ldr	r3, [r7, #16]
   2d45e:	330b      	adds	r3, #11
   2d460:	781a      	ldrb	r2, [r3, #0]
   2d462:	230f      	movs	r3, #15
   2d464:	18fb      	adds	r3, r7, r3
   2d466:	213f      	movs	r1, #63	; 0x3f
   2d468:	400a      	ands	r2, r1
   2d46a:	701a      	strb	r2, [r3, #0]
   2d46c:	2316      	movs	r3, #22
   2d46e:	18fb      	adds	r3, r7, r3
   2d470:	781b      	ldrb	r3, [r3, #0]
   2d472:	2be5      	cmp	r3, #229	; 0xe5
   2d474:	d00a      	beq.n	2d48c <dir_find+0xb8>
   2d476:	230f      	movs	r3, #15
   2d478:	18fb      	adds	r3, r7, r3
   2d47a:	781b      	ldrb	r3, [r3, #0]
   2d47c:	2208      	movs	r2, #8
   2d47e:	4013      	ands	r3, r2
   2d480:	d009      	beq.n	2d496 <dir_find+0xc2>
   2d482:	230f      	movs	r3, #15
   2d484:	18fb      	adds	r3, r7, r3
   2d486:	781b      	ldrb	r3, [r3, #0]
   2d488:	2b0f      	cmp	r3, #15
   2d48a:	d004      	beq.n	2d496 <dir_find+0xc2>
   2d48c:	2315      	movs	r3, #21
   2d48e:	18fb      	adds	r3, r7, r3
   2d490:	22ff      	movs	r2, #255	; 0xff
   2d492:	701a      	strb	r2, [r3, #0]
   2d494:	e073      	b.n	2d57e <dir_find+0x1aa>
   2d496:	230f      	movs	r3, #15
   2d498:	18fb      	adds	r3, r7, r3
   2d49a:	781b      	ldrb	r3, [r3, #0]
   2d49c:	2b0f      	cmp	r3, #15
   2d49e:	d145      	bne.n	2d52c <dir_find+0x158>
   2d4a0:	687b      	ldr	r3, [r7, #4]
   2d4a2:	69db      	ldr	r3, [r3, #28]
   2d4a4:	2b00      	cmp	r3, #0
   2d4a6:	d100      	bne.n	2d4aa <dir_find+0xd6>
   2d4a8:	e069      	b.n	2d57e <dir_find+0x1aa>
   2d4aa:	2316      	movs	r3, #22
   2d4ac:	18fb      	adds	r3, r7, r3
   2d4ae:	781b      	ldrb	r3, [r3, #0]
   2d4b0:	2240      	movs	r2, #64	; 0x40
   2d4b2:	4013      	ands	r3, r2
   2d4b4:	d016      	beq.n	2d4e4 <dir_find+0x110>
   2d4b6:	2314      	movs	r3, #20
   2d4b8:	18fb      	adds	r3, r7, r3
   2d4ba:	693a      	ldr	r2, [r7, #16]
   2d4bc:	7b52      	ldrb	r2, [r2, #13]
   2d4be:	701a      	strb	r2, [r3, #0]
   2d4c0:	2316      	movs	r3, #22
   2d4c2:	18fb      	adds	r3, r7, r3
   2d4c4:	2216      	movs	r2, #22
   2d4c6:	18ba      	adds	r2, r7, r2
   2d4c8:	7812      	ldrb	r2, [r2, #0]
   2d4ca:	2140      	movs	r1, #64	; 0x40
   2d4cc:	438a      	bics	r2, r1
   2d4ce:	701a      	strb	r2, [r3, #0]
   2d4d0:	2315      	movs	r3, #21
   2d4d2:	18fb      	adds	r3, r7, r3
   2d4d4:	2216      	movs	r2, #22
   2d4d6:	18ba      	adds	r2, r7, r2
   2d4d8:	7812      	ldrb	r2, [r2, #0]
   2d4da:	701a      	strb	r2, [r3, #0]
   2d4dc:	687b      	ldr	r3, [r7, #4]
   2d4de:	88da      	ldrh	r2, [r3, #6]
   2d4e0:	687b      	ldr	r3, [r7, #4]
   2d4e2:	841a      	strh	r2, [r3, #32]
   2d4e4:	2316      	movs	r3, #22
   2d4e6:	18fa      	adds	r2, r7, r3
   2d4e8:	2315      	movs	r3, #21
   2d4ea:	18fb      	adds	r3, r7, r3
   2d4ec:	7812      	ldrb	r2, [r2, #0]
   2d4ee:	781b      	ldrb	r3, [r3, #0]
   2d4f0:	429a      	cmp	r2, r3
   2d4f2:	d116      	bne.n	2d522 <dir_find+0x14e>
   2d4f4:	693b      	ldr	r3, [r7, #16]
   2d4f6:	330d      	adds	r3, #13
   2d4f8:	781b      	ldrb	r3, [r3, #0]
   2d4fa:	2214      	movs	r2, #20
   2d4fc:	18ba      	adds	r2, r7, r2
   2d4fe:	7812      	ldrb	r2, [r2, #0]
   2d500:	429a      	cmp	r2, r3
   2d502:	d10e      	bne.n	2d522 <dir_find+0x14e>
   2d504:	687b      	ldr	r3, [r7, #4]
   2d506:	69db      	ldr	r3, [r3, #28]
   2d508:	693a      	ldr	r2, [r7, #16]
   2d50a:	0011      	movs	r1, r2
   2d50c:	0018      	movs	r0, r3
   2d50e:	4b2c      	ldr	r3, [pc, #176]	; (2d5c0 <dir_find+0x1ec>)
   2d510:	4798      	blx	r3
   2d512:	1e03      	subs	r3, r0, #0
   2d514:	d005      	beq.n	2d522 <dir_find+0x14e>
   2d516:	2315      	movs	r3, #21
   2d518:	18fb      	adds	r3, r7, r3
   2d51a:	781b      	ldrb	r3, [r3, #0]
   2d51c:	3b01      	subs	r3, #1
   2d51e:	b2da      	uxtb	r2, r3
   2d520:	e000      	b.n	2d524 <dir_find+0x150>
   2d522:	22ff      	movs	r2, #255	; 0xff
   2d524:	2315      	movs	r3, #21
   2d526:	18fb      	adds	r3, r7, r3
   2d528:	701a      	strb	r2, [r3, #0]
   2d52a:	e028      	b.n	2d57e <dir_find+0x1aa>
   2d52c:	2315      	movs	r3, #21
   2d52e:	18fb      	adds	r3, r7, r3
   2d530:	781b      	ldrb	r3, [r3, #0]
   2d532:	2b00      	cmp	r3, #0
   2d534:	d10a      	bne.n	2d54c <dir_find+0x178>
   2d536:	693b      	ldr	r3, [r7, #16]
   2d538:	0018      	movs	r0, r3
   2d53a:	4b22      	ldr	r3, [pc, #136]	; (2d5c4 <dir_find+0x1f0>)
   2d53c:	4798      	blx	r3
   2d53e:	0003      	movs	r3, r0
   2d540:	001a      	movs	r2, r3
   2d542:	2314      	movs	r3, #20
   2d544:	18fb      	adds	r3, r7, r3
   2d546:	781b      	ldrb	r3, [r3, #0]
   2d548:	4293      	cmp	r3, r2
   2d54a:	d02a      	beq.n	2d5a2 <dir_find+0x1ce>
   2d54c:	2315      	movs	r3, #21
   2d54e:	18fb      	adds	r3, r7, r3
   2d550:	22ff      	movs	r2, #255	; 0xff
   2d552:	701a      	strb	r2, [r3, #0]
   2d554:	687b      	ldr	r3, [r7, #4]
   2d556:	2201      	movs	r2, #1
   2d558:	4252      	negs	r2, r2
   2d55a:	841a      	strh	r2, [r3, #32]
   2d55c:	687b      	ldr	r3, [r7, #4]
   2d55e:	699b      	ldr	r3, [r3, #24]
   2d560:	330b      	adds	r3, #11
   2d562:	781b      	ldrb	r3, [r3, #0]
   2d564:	001a      	movs	r2, r3
   2d566:	2301      	movs	r3, #1
   2d568:	4013      	ands	r3, r2
   2d56a:	d108      	bne.n	2d57e <dir_find+0x1aa>
   2d56c:	687b      	ldr	r3, [r7, #4]
   2d56e:	6999      	ldr	r1, [r3, #24]
   2d570:	693b      	ldr	r3, [r7, #16]
   2d572:	220b      	movs	r2, #11
   2d574:	0018      	movs	r0, r3
   2d576:	4b14      	ldr	r3, [pc, #80]	; (2d5c8 <dir_find+0x1f4>)
   2d578:	4798      	blx	r3
   2d57a:	1e03      	subs	r3, r0, #0
   2d57c:	d013      	beq.n	2d5a6 <dir_find+0x1d2>
   2d57e:	2317      	movs	r3, #23
   2d580:	18fc      	adds	r4, r7, r3
   2d582:	687b      	ldr	r3, [r7, #4]
   2d584:	2100      	movs	r1, #0
   2d586:	0018      	movs	r0, r3
   2d588:	4b10      	ldr	r3, [pc, #64]	; (2d5cc <dir_find+0x1f8>)
   2d58a:	4798      	blx	r3
   2d58c:	0003      	movs	r3, r0
   2d58e:	7023      	strb	r3, [r4, #0]
   2d590:	2317      	movs	r3, #23
   2d592:	18fb      	adds	r3, r7, r3
   2d594:	781b      	ldrb	r3, [r3, #0]
   2d596:	2b00      	cmp	r3, #0
   2d598:	d100      	bne.n	2d59c <dir_find+0x1c8>
   2d59a:	e73b      	b.n	2d414 <dir_find+0x40>
   2d59c:	e004      	b.n	2d5a8 <dir_find+0x1d4>
   2d59e:	46c0      	nop			; (mov r8, r8)
   2d5a0:	e002      	b.n	2d5a8 <dir_find+0x1d4>
   2d5a2:	46c0      	nop			; (mov r8, r8)
   2d5a4:	e000      	b.n	2d5a8 <dir_find+0x1d4>
   2d5a6:	46c0      	nop			; (mov r8, r8)
   2d5a8:	2317      	movs	r3, #23
   2d5aa:	18fb      	adds	r3, r7, r3
   2d5ac:	781b      	ldrb	r3, [r3, #0]
   2d5ae:	0018      	movs	r0, r3
   2d5b0:	46bd      	mov	sp, r7
   2d5b2:	b007      	add	sp, #28
   2d5b4:	bd90      	pop	{r4, r7, pc}
   2d5b6:	46c0      	nop			; (mov r8, r8)
   2d5b8:	0002cd51 	.word	0x0002cd51
   2d5bc:	0002c50d 	.word	0x0002c50d
   2d5c0:	0002d071 	.word	0x0002d071
   2d5c4:	0002d385 	.word	0x0002d385
   2d5c8:	0002c491 	.word	0x0002c491
   2d5cc:	0002ce81 	.word	0x0002ce81

0002d5d0 <dir_register>:
   2d5d0:	b590      	push	{r4, r7, lr}
   2d5d2:	b08d      	sub	sp, #52	; 0x34
   2d5d4:	af00      	add	r7, sp, #0
   2d5d6:	6078      	str	r0, [r7, #4]
   2d5d8:	687b      	ldr	r3, [r7, #4]
   2d5da:	699b      	ldr	r3, [r3, #24]
   2d5dc:	627b      	str	r3, [r7, #36]	; 0x24
   2d5de:	687b      	ldr	r3, [r7, #4]
   2d5e0:	69db      	ldr	r3, [r3, #28]
   2d5e2:	623b      	str	r3, [r7, #32]
   2d5e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2d5e6:	230c      	movs	r3, #12
   2d5e8:	18fb      	adds	r3, r7, r3
   2d5ea:	220c      	movs	r2, #12
   2d5ec:	0018      	movs	r0, r3
   2d5ee:	4bc8      	ldr	r3, [pc, #800]	; (2d910 <dir_register+0x340>)
   2d5f0:	4798      	blx	r3
   2d5f2:	230c      	movs	r3, #12
   2d5f4:	18fb      	adds	r3, r7, r3
   2d5f6:	7adb      	ldrb	r3, [r3, #11]
   2d5f8:	001a      	movs	r2, r3
   2d5fa:	2301      	movs	r3, #1
   2d5fc:	4013      	ands	r3, r2
   2d5fe:	d048      	beq.n	2d692 <dir_register+0xc2>
   2d600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d602:	330b      	adds	r3, #11
   2d604:	2200      	movs	r2, #0
   2d606:	701a      	strb	r2, [r3, #0]
   2d608:	687b      	ldr	r3, [r7, #4]
   2d60a:	2200      	movs	r2, #0
   2d60c:	61da      	str	r2, [r3, #28]
   2d60e:	232c      	movs	r3, #44	; 0x2c
   2d610:	18fb      	adds	r3, r7, r3
   2d612:	2201      	movs	r2, #1
   2d614:	801a      	strh	r2, [r3, #0]
   2d616:	e01c      	b.n	2d652 <dir_register+0x82>
   2d618:	232c      	movs	r3, #44	; 0x2c
   2d61a:	18fb      	adds	r3, r7, r3
   2d61c:	881b      	ldrh	r3, [r3, #0]
   2d61e:	6a3a      	ldr	r2, [r7, #32]
   2d620:	210c      	movs	r1, #12
   2d622:	1879      	adds	r1, r7, r1
   2d624:	6a78      	ldr	r0, [r7, #36]	; 0x24
   2d626:	4cbb      	ldr	r4, [pc, #748]	; (2d914 <dir_register+0x344>)
   2d628:	47a0      	blx	r4
   2d62a:	232f      	movs	r3, #47	; 0x2f
   2d62c:	18fc      	adds	r4, r7, r3
   2d62e:	687b      	ldr	r3, [r7, #4]
   2d630:	0018      	movs	r0, r3
   2d632:	4bb9      	ldr	r3, [pc, #740]	; (2d918 <dir_register+0x348>)
   2d634:	4798      	blx	r3
   2d636:	0003      	movs	r3, r0
   2d638:	7023      	strb	r3, [r4, #0]
   2d63a:	232f      	movs	r3, #47	; 0x2f
   2d63c:	18fb      	adds	r3, r7, r3
   2d63e:	781b      	ldrb	r3, [r3, #0]
   2d640:	2b00      	cmp	r3, #0
   2d642:	d10c      	bne.n	2d65e <dir_register+0x8e>
   2d644:	232c      	movs	r3, #44	; 0x2c
   2d646:	18fb      	adds	r3, r7, r3
   2d648:	881a      	ldrh	r2, [r3, #0]
   2d64a:	232c      	movs	r3, #44	; 0x2c
   2d64c:	18fb      	adds	r3, r7, r3
   2d64e:	3201      	adds	r2, #1
   2d650:	801a      	strh	r2, [r3, #0]
   2d652:	232c      	movs	r3, #44	; 0x2c
   2d654:	18fb      	adds	r3, r7, r3
   2d656:	881b      	ldrh	r3, [r3, #0]
   2d658:	2b63      	cmp	r3, #99	; 0x63
   2d65a:	d9dd      	bls.n	2d618 <dir_register+0x48>
   2d65c:	e000      	b.n	2d660 <dir_register+0x90>
   2d65e:	46c0      	nop			; (mov r8, r8)
   2d660:	232c      	movs	r3, #44	; 0x2c
   2d662:	18fb      	adds	r3, r7, r3
   2d664:	881b      	ldrh	r3, [r3, #0]
   2d666:	2b64      	cmp	r3, #100	; 0x64
   2d668:	d101      	bne.n	2d66e <dir_register+0x9e>
   2d66a:	2307      	movs	r3, #7
   2d66c:	e14c      	b.n	2d908 <dir_register+0x338>
   2d66e:	232f      	movs	r3, #47	; 0x2f
   2d670:	18fb      	adds	r3, r7, r3
   2d672:	781b      	ldrb	r3, [r3, #0]
   2d674:	2b04      	cmp	r3, #4
   2d676:	d003      	beq.n	2d680 <dir_register+0xb0>
   2d678:	232f      	movs	r3, #47	; 0x2f
   2d67a:	18fb      	adds	r3, r7, r3
   2d67c:	781b      	ldrb	r3, [r3, #0]
   2d67e:	e143      	b.n	2d908 <dir_register+0x338>
   2d680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d682:	330b      	adds	r3, #11
   2d684:	220c      	movs	r2, #12
   2d686:	18ba      	adds	r2, r7, r2
   2d688:	7ad2      	ldrb	r2, [r2, #11]
   2d68a:	701a      	strb	r2, [r3, #0]
   2d68c:	687b      	ldr	r3, [r7, #4]
   2d68e:	6a3a      	ldr	r2, [r7, #32]
   2d690:	61da      	str	r2, [r3, #28]
   2d692:	230c      	movs	r3, #12
   2d694:	18fb      	adds	r3, r7, r3
   2d696:	7adb      	ldrb	r3, [r3, #11]
   2d698:	001a      	movs	r2, r3
   2d69a:	2302      	movs	r3, #2
   2d69c:	4013      	ands	r3, r2
   2d69e:	d023      	beq.n	2d6e8 <dir_register+0x118>
   2d6a0:	232a      	movs	r3, #42	; 0x2a
   2d6a2:	18fb      	adds	r3, r7, r3
   2d6a4:	2200      	movs	r2, #0
   2d6a6:	801a      	strh	r2, [r3, #0]
   2d6a8:	e006      	b.n	2d6b8 <dir_register+0xe8>
   2d6aa:	232a      	movs	r3, #42	; 0x2a
   2d6ac:	18fb      	adds	r3, r7, r3
   2d6ae:	881a      	ldrh	r2, [r3, #0]
   2d6b0:	232a      	movs	r3, #42	; 0x2a
   2d6b2:	18fb      	adds	r3, r7, r3
   2d6b4:	3201      	adds	r2, #1
   2d6b6:	801a      	strh	r2, [r3, #0]
   2d6b8:	232a      	movs	r3, #42	; 0x2a
   2d6ba:	18fb      	adds	r3, r7, r3
   2d6bc:	881b      	ldrh	r3, [r3, #0]
   2d6be:	005b      	lsls	r3, r3, #1
   2d6c0:	6a3a      	ldr	r2, [r7, #32]
   2d6c2:	18d3      	adds	r3, r2, r3
   2d6c4:	881b      	ldrh	r3, [r3, #0]
   2d6c6:	2b00      	cmp	r3, #0
   2d6c8:	d1ef      	bne.n	2d6aa <dir_register+0xda>
   2d6ca:	232a      	movs	r3, #42	; 0x2a
   2d6cc:	18fb      	adds	r3, r7, r3
   2d6ce:	881b      	ldrh	r3, [r3, #0]
   2d6d0:	3319      	adds	r3, #25
   2d6d2:	001a      	movs	r2, r3
   2d6d4:	4b91      	ldr	r3, [pc, #580]	; (2d91c <dir_register+0x34c>)
   2d6d6:	210d      	movs	r1, #13
   2d6d8:	0010      	movs	r0, r2
   2d6da:	4798      	blx	r3
   2d6dc:	0003      	movs	r3, r0
   2d6de:	001a      	movs	r2, r3
   2d6e0:	232a      	movs	r3, #42	; 0x2a
   2d6e2:	18fb      	adds	r3, r7, r3
   2d6e4:	801a      	strh	r2, [r3, #0]
   2d6e6:	e003      	b.n	2d6f0 <dir_register+0x120>
   2d6e8:	232a      	movs	r3, #42	; 0x2a
   2d6ea:	18fb      	adds	r3, r7, r3
   2d6ec:	2201      	movs	r2, #1
   2d6ee:	801a      	strh	r2, [r3, #0]
   2d6f0:	232f      	movs	r3, #47	; 0x2f
   2d6f2:	18fc      	adds	r4, r7, r3
   2d6f4:	687b      	ldr	r3, [r7, #4]
   2d6f6:	2100      	movs	r1, #0
   2d6f8:	0018      	movs	r0, r3
   2d6fa:	4b89      	ldr	r3, [pc, #548]	; (2d920 <dir_register+0x350>)
   2d6fc:	4798      	blx	r3
   2d6fe:	0003      	movs	r3, r0
   2d700:	7023      	strb	r3, [r4, #0]
   2d702:	232f      	movs	r3, #47	; 0x2f
   2d704:	18fb      	adds	r3, r7, r3
   2d706:	781b      	ldrb	r3, [r3, #0]
   2d708:	2b00      	cmp	r3, #0
   2d70a:	d003      	beq.n	2d714 <dir_register+0x144>
   2d70c:	232f      	movs	r3, #47	; 0x2f
   2d70e:	18fb      	adds	r3, r7, r3
   2d710:	781b      	ldrb	r3, [r3, #0]
   2d712:	e0f9      	b.n	2d908 <dir_register+0x338>
   2d714:	2328      	movs	r3, #40	; 0x28
   2d716:	18fb      	adds	r3, r7, r3
   2d718:	2200      	movs	r2, #0
   2d71a:	801a      	strh	r2, [r3, #0]
   2d71c:	232c      	movs	r3, #44	; 0x2c
   2d71e:	18fb      	adds	r3, r7, r3
   2d720:	2228      	movs	r2, #40	; 0x28
   2d722:	18ba      	adds	r2, r7, r2
   2d724:	8812      	ldrh	r2, [r2, #0]
   2d726:	801a      	strh	r2, [r3, #0]
   2d728:	687b      	ldr	r3, [r7, #4]
   2d72a:	681a      	ldr	r2, [r3, #0]
   2d72c:	687b      	ldr	r3, [r7, #4]
   2d72e:	691b      	ldr	r3, [r3, #16]
   2d730:	212f      	movs	r1, #47	; 0x2f
   2d732:	187c      	adds	r4, r7, r1
   2d734:	0019      	movs	r1, r3
   2d736:	0010      	movs	r0, r2
   2d738:	4b7a      	ldr	r3, [pc, #488]	; (2d924 <dir_register+0x354>)
   2d73a:	4798      	blx	r3
   2d73c:	0003      	movs	r3, r0
   2d73e:	7023      	strb	r3, [r4, #0]
   2d740:	232f      	movs	r3, #47	; 0x2f
   2d742:	18fb      	adds	r3, r7, r3
   2d744:	781b      	ldrb	r3, [r3, #0]
   2d746:	2b00      	cmp	r3, #0
   2d748:	d13c      	bne.n	2d7c4 <dir_register+0x1f4>
   2d74a:	687b      	ldr	r3, [r7, #4]
   2d74c:	695a      	ldr	r2, [r3, #20]
   2d74e:	231f      	movs	r3, #31
   2d750:	18fb      	adds	r3, r7, r3
   2d752:	7812      	ldrb	r2, [r2, #0]
   2d754:	701a      	strb	r2, [r3, #0]
   2d756:	231f      	movs	r3, #31
   2d758:	18fb      	adds	r3, r7, r3
   2d75a:	781b      	ldrb	r3, [r3, #0]
   2d75c:	2be5      	cmp	r3, #229	; 0xe5
   2d75e:	d004      	beq.n	2d76a <dir_register+0x19a>
   2d760:	231f      	movs	r3, #31
   2d762:	18fb      	adds	r3, r7, r3
   2d764:	781b      	ldrb	r3, [r3, #0]
   2d766:	2b00      	cmp	r3, #0
   2d768:	d119      	bne.n	2d79e <dir_register+0x1ce>
   2d76a:	232c      	movs	r3, #44	; 0x2c
   2d76c:	18fb      	adds	r3, r7, r3
   2d76e:	881b      	ldrh	r3, [r3, #0]
   2d770:	2b00      	cmp	r3, #0
   2d772:	d104      	bne.n	2d77e <dir_register+0x1ae>
   2d774:	2328      	movs	r3, #40	; 0x28
   2d776:	18fb      	adds	r3, r7, r3
   2d778:	687a      	ldr	r2, [r7, #4]
   2d77a:	88d2      	ldrh	r2, [r2, #6]
   2d77c:	801a      	strh	r2, [r3, #0]
   2d77e:	232c      	movs	r3, #44	; 0x2c
   2d780:	18fb      	adds	r3, r7, r3
   2d782:	222c      	movs	r2, #44	; 0x2c
   2d784:	18ba      	adds	r2, r7, r2
   2d786:	8812      	ldrh	r2, [r2, #0]
   2d788:	3201      	adds	r2, #1
   2d78a:	801a      	strh	r2, [r3, #0]
   2d78c:	232c      	movs	r3, #44	; 0x2c
   2d78e:	18fa      	adds	r2, r7, r3
   2d790:	232a      	movs	r3, #42	; 0x2a
   2d792:	18fb      	adds	r3, r7, r3
   2d794:	8812      	ldrh	r2, [r2, #0]
   2d796:	881b      	ldrh	r3, [r3, #0]
   2d798:	429a      	cmp	r2, r3
   2d79a:	d104      	bne.n	2d7a6 <dir_register+0x1d6>
   2d79c:	e013      	b.n	2d7c6 <dir_register+0x1f6>
   2d79e:	232c      	movs	r3, #44	; 0x2c
   2d7a0:	18fb      	adds	r3, r7, r3
   2d7a2:	2200      	movs	r2, #0
   2d7a4:	801a      	strh	r2, [r3, #0]
   2d7a6:	232f      	movs	r3, #47	; 0x2f
   2d7a8:	18fc      	adds	r4, r7, r3
   2d7aa:	687b      	ldr	r3, [r7, #4]
   2d7ac:	2101      	movs	r1, #1
   2d7ae:	0018      	movs	r0, r3
   2d7b0:	4b5d      	ldr	r3, [pc, #372]	; (2d928 <dir_register+0x358>)
   2d7b2:	4798      	blx	r3
   2d7b4:	0003      	movs	r3, r0
   2d7b6:	7023      	strb	r3, [r4, #0]
   2d7b8:	232f      	movs	r3, #47	; 0x2f
   2d7ba:	18fb      	adds	r3, r7, r3
   2d7bc:	781b      	ldrb	r3, [r3, #0]
   2d7be:	2b00      	cmp	r3, #0
   2d7c0:	d0b2      	beq.n	2d728 <dir_register+0x158>
   2d7c2:	e000      	b.n	2d7c6 <dir_register+0x1f6>
   2d7c4:	46c0      	nop			; (mov r8, r8)
   2d7c6:	232f      	movs	r3, #47	; 0x2f
   2d7c8:	18fb      	adds	r3, r7, r3
   2d7ca:	781b      	ldrb	r3, [r3, #0]
   2d7cc:	2b00      	cmp	r3, #0
   2d7ce:	d163      	bne.n	2d898 <dir_register+0x2c8>
   2d7d0:	232a      	movs	r3, #42	; 0x2a
   2d7d2:	18fb      	adds	r3, r7, r3
   2d7d4:	881b      	ldrh	r3, [r3, #0]
   2d7d6:	2b01      	cmp	r3, #1
   2d7d8:	d95e      	bls.n	2d898 <dir_register+0x2c8>
   2d7da:	232f      	movs	r3, #47	; 0x2f
   2d7dc:	18fc      	adds	r4, r7, r3
   2d7de:	2328      	movs	r3, #40	; 0x28
   2d7e0:	18fb      	adds	r3, r7, r3
   2d7e2:	881a      	ldrh	r2, [r3, #0]
   2d7e4:	687b      	ldr	r3, [r7, #4]
   2d7e6:	0011      	movs	r1, r2
   2d7e8:	0018      	movs	r0, r3
   2d7ea:	4b4d      	ldr	r3, [pc, #308]	; (2d920 <dir_register+0x350>)
   2d7ec:	4798      	blx	r3
   2d7ee:	0003      	movs	r3, r0
   2d7f0:	7023      	strb	r3, [r4, #0]
   2d7f2:	232f      	movs	r3, #47	; 0x2f
   2d7f4:	18fb      	adds	r3, r7, r3
   2d7f6:	781b      	ldrb	r3, [r3, #0]
   2d7f8:	2b00      	cmp	r3, #0
   2d7fa:	d14d      	bne.n	2d898 <dir_register+0x2c8>
   2d7fc:	687b      	ldr	r3, [r7, #4]
   2d7fe:	699b      	ldr	r3, [r3, #24]
   2d800:	221e      	movs	r2, #30
   2d802:	18bc      	adds	r4, r7, r2
   2d804:	0018      	movs	r0, r3
   2d806:	4b49      	ldr	r3, [pc, #292]	; (2d92c <dir_register+0x35c>)
   2d808:	4798      	blx	r3
   2d80a:	0003      	movs	r3, r0
   2d80c:	7023      	strb	r3, [r4, #0]
   2d80e:	232a      	movs	r3, #42	; 0x2a
   2d810:	18fb      	adds	r3, r7, r3
   2d812:	881a      	ldrh	r2, [r3, #0]
   2d814:	232a      	movs	r3, #42	; 0x2a
   2d816:	18fb      	adds	r3, r7, r3
   2d818:	3a01      	subs	r2, #1
   2d81a:	801a      	strh	r2, [r3, #0]
   2d81c:	687b      	ldr	r3, [r7, #4]
   2d81e:	681a      	ldr	r2, [r3, #0]
   2d820:	687b      	ldr	r3, [r7, #4]
   2d822:	691b      	ldr	r3, [r3, #16]
   2d824:	212f      	movs	r1, #47	; 0x2f
   2d826:	187c      	adds	r4, r7, r1
   2d828:	0019      	movs	r1, r3
   2d82a:	0010      	movs	r0, r2
   2d82c:	4b3d      	ldr	r3, [pc, #244]	; (2d924 <dir_register+0x354>)
   2d82e:	4798      	blx	r3
   2d830:	0003      	movs	r3, r0
   2d832:	7023      	strb	r3, [r4, #0]
   2d834:	232f      	movs	r3, #47	; 0x2f
   2d836:	18fb      	adds	r3, r7, r3
   2d838:	781b      	ldrb	r3, [r3, #0]
   2d83a:	2b00      	cmp	r3, #0
   2d83c:	d12b      	bne.n	2d896 <dir_register+0x2c6>
   2d83e:	687b      	ldr	r3, [r7, #4]
   2d840:	69d8      	ldr	r0, [r3, #28]
   2d842:	687b      	ldr	r3, [r7, #4]
   2d844:	6959      	ldr	r1, [r3, #20]
   2d846:	232a      	movs	r3, #42	; 0x2a
   2d848:	18fb      	adds	r3, r7, r3
   2d84a:	881b      	ldrh	r3, [r3, #0]
   2d84c:	b2da      	uxtb	r2, r3
   2d84e:	231e      	movs	r3, #30
   2d850:	18fb      	adds	r3, r7, r3
   2d852:	781b      	ldrb	r3, [r3, #0]
   2d854:	4c36      	ldr	r4, [pc, #216]	; (2d930 <dir_register+0x360>)
   2d856:	47a0      	blx	r4
   2d858:	687b      	ldr	r3, [r7, #4]
   2d85a:	681b      	ldr	r3, [r3, #0]
   2d85c:	2201      	movs	r2, #1
   2d85e:	711a      	strb	r2, [r3, #4]
   2d860:	232f      	movs	r3, #47	; 0x2f
   2d862:	18fc      	adds	r4, r7, r3
   2d864:	687b      	ldr	r3, [r7, #4]
   2d866:	2100      	movs	r1, #0
   2d868:	0018      	movs	r0, r3
   2d86a:	4b2f      	ldr	r3, [pc, #188]	; (2d928 <dir_register+0x358>)
   2d86c:	4798      	blx	r3
   2d86e:	0003      	movs	r3, r0
   2d870:	7023      	strb	r3, [r4, #0]
   2d872:	232f      	movs	r3, #47	; 0x2f
   2d874:	18fb      	adds	r3, r7, r3
   2d876:	781b      	ldrb	r3, [r3, #0]
   2d878:	2b00      	cmp	r3, #0
   2d87a:	d10d      	bne.n	2d898 <dir_register+0x2c8>
   2d87c:	232a      	movs	r3, #42	; 0x2a
   2d87e:	18fb      	adds	r3, r7, r3
   2d880:	222a      	movs	r2, #42	; 0x2a
   2d882:	18ba      	adds	r2, r7, r2
   2d884:	8812      	ldrh	r2, [r2, #0]
   2d886:	3a01      	subs	r2, #1
   2d888:	801a      	strh	r2, [r3, #0]
   2d88a:	232a      	movs	r3, #42	; 0x2a
   2d88c:	18fb      	adds	r3, r7, r3
   2d88e:	881b      	ldrh	r3, [r3, #0]
   2d890:	2b00      	cmp	r3, #0
   2d892:	d1c3      	bne.n	2d81c <dir_register+0x24c>
   2d894:	e000      	b.n	2d898 <dir_register+0x2c8>
   2d896:	46c0      	nop			; (mov r8, r8)
   2d898:	232f      	movs	r3, #47	; 0x2f
   2d89a:	18fb      	adds	r3, r7, r3
   2d89c:	781b      	ldrb	r3, [r3, #0]
   2d89e:	2b00      	cmp	r3, #0
   2d8a0:	d12f      	bne.n	2d902 <dir_register+0x332>
   2d8a2:	687b      	ldr	r3, [r7, #4]
   2d8a4:	681a      	ldr	r2, [r3, #0]
   2d8a6:	687b      	ldr	r3, [r7, #4]
   2d8a8:	691b      	ldr	r3, [r3, #16]
   2d8aa:	212f      	movs	r1, #47	; 0x2f
   2d8ac:	187c      	adds	r4, r7, r1
   2d8ae:	0019      	movs	r1, r3
   2d8b0:	0010      	movs	r0, r2
   2d8b2:	4b1c      	ldr	r3, [pc, #112]	; (2d924 <dir_register+0x354>)
   2d8b4:	4798      	blx	r3
   2d8b6:	0003      	movs	r3, r0
   2d8b8:	7023      	strb	r3, [r4, #0]
   2d8ba:	232f      	movs	r3, #47	; 0x2f
   2d8bc:	18fb      	adds	r3, r7, r3
   2d8be:	781b      	ldrb	r3, [r3, #0]
   2d8c0:	2b00      	cmp	r3, #0
   2d8c2:	d11e      	bne.n	2d902 <dir_register+0x332>
   2d8c4:	687b      	ldr	r3, [r7, #4]
   2d8c6:	695b      	ldr	r3, [r3, #20]
   2d8c8:	61bb      	str	r3, [r7, #24]
   2d8ca:	69bb      	ldr	r3, [r7, #24]
   2d8cc:	2220      	movs	r2, #32
   2d8ce:	2100      	movs	r1, #0
   2d8d0:	0018      	movs	r0, r3
   2d8d2:	4b18      	ldr	r3, [pc, #96]	; (2d934 <dir_register+0x364>)
   2d8d4:	4798      	blx	r3
   2d8d6:	687b      	ldr	r3, [r7, #4]
   2d8d8:	6999      	ldr	r1, [r3, #24]
   2d8da:	69bb      	ldr	r3, [r7, #24]
   2d8dc:	220b      	movs	r2, #11
   2d8de:	0018      	movs	r0, r3
   2d8e0:	4b0b      	ldr	r3, [pc, #44]	; (2d910 <dir_register+0x340>)
   2d8e2:	4798      	blx	r3
   2d8e4:	69bb      	ldr	r3, [r7, #24]
   2d8e6:	330c      	adds	r3, #12
   2d8e8:	001a      	movs	r2, r3
   2d8ea:	687b      	ldr	r3, [r7, #4]
   2d8ec:	699b      	ldr	r3, [r3, #24]
   2d8ee:	330b      	adds	r3, #11
   2d8f0:	781b      	ldrb	r3, [r3, #0]
   2d8f2:	2118      	movs	r1, #24
   2d8f4:	400b      	ands	r3, r1
   2d8f6:	b2db      	uxtb	r3, r3
   2d8f8:	7013      	strb	r3, [r2, #0]
   2d8fa:	687b      	ldr	r3, [r7, #4]
   2d8fc:	681b      	ldr	r3, [r3, #0]
   2d8fe:	2201      	movs	r2, #1
   2d900:	711a      	strb	r2, [r3, #4]
   2d902:	232f      	movs	r3, #47	; 0x2f
   2d904:	18fb      	adds	r3, r7, r3
   2d906:	781b      	ldrb	r3, [r3, #0]
   2d908:	0018      	movs	r0, r3
   2d90a:	46bd      	mov	sp, r7
   2d90c:	b00d      	add	sp, #52	; 0x34
   2d90e:	bd90      	pop	{r4, r7, pc}
   2d910:	0002c429 	.word	0x0002c429
   2d914:	0002d285 	.word	0x0002d285
   2d918:	0002d3d5 	.word	0x0002d3d5
   2d91c:	00033841 	.word	0x00033841
   2d920:	0002cd51 	.word	0x0002cd51
   2d924:	0002c50d 	.word	0x0002c50d
   2d928:	0002ce81 	.word	0x0002ce81
   2d92c:	0002d385 	.word	0x0002d385
   2d930:	0002d175 	.word	0x0002d175
   2d934:	0002c461 	.word	0x0002c461

0002d938 <create_name>:
   2d938:	b590      	push	{r4, r7, lr}
   2d93a:	b08b      	sub	sp, #44	; 0x2c
   2d93c:	af00      	add	r7, sp, #0
   2d93e:	6078      	str	r0, [r7, #4]
   2d940:	6039      	str	r1, [r7, #0]
   2d942:	683b      	ldr	r3, [r7, #0]
   2d944:	681b      	ldr	r3, [r3, #0]
   2d946:	613b      	str	r3, [r7, #16]
   2d948:	e002      	b.n	2d950 <create_name+0x18>
   2d94a:	693b      	ldr	r3, [r7, #16]
   2d94c:	3301      	adds	r3, #1
   2d94e:	613b      	str	r3, [r7, #16]
   2d950:	693b      	ldr	r3, [r7, #16]
   2d952:	781b      	ldrb	r3, [r3, #0]
   2d954:	2b2f      	cmp	r3, #47	; 0x2f
   2d956:	d0f8      	beq.n	2d94a <create_name+0x12>
   2d958:	693b      	ldr	r3, [r7, #16]
   2d95a:	781b      	ldrb	r3, [r3, #0]
   2d95c:	2b5c      	cmp	r3, #92	; 0x5c
   2d95e:	d0f4      	beq.n	2d94a <create_name+0x12>
   2d960:	687b      	ldr	r3, [r7, #4]
   2d962:	69db      	ldr	r3, [r3, #28]
   2d964:	60fb      	str	r3, [r7, #12]
   2d966:	2300      	movs	r3, #0
   2d968:	617b      	str	r3, [r7, #20]
   2d96a:	697b      	ldr	r3, [r7, #20]
   2d96c:	61bb      	str	r3, [r7, #24]
   2d96e:	69bb      	ldr	r3, [r7, #24]
   2d970:	1c5a      	adds	r2, r3, #1
   2d972:	61ba      	str	r2, [r7, #24]
   2d974:	693a      	ldr	r2, [r7, #16]
   2d976:	18d3      	adds	r3, r2, r3
   2d978:	781a      	ldrb	r2, [r3, #0]
   2d97a:	2324      	movs	r3, #36	; 0x24
   2d97c:	18fb      	adds	r3, r7, r3
   2d97e:	801a      	strh	r2, [r3, #0]
   2d980:	2324      	movs	r3, #36	; 0x24
   2d982:	18fb      	adds	r3, r7, r3
   2d984:	881b      	ldrh	r3, [r3, #0]
   2d986:	2b1f      	cmp	r3, #31
   2d988:	d944      	bls.n	2da14 <create_name+0xdc>
   2d98a:	2324      	movs	r3, #36	; 0x24
   2d98c:	18fb      	adds	r3, r7, r3
   2d98e:	881b      	ldrh	r3, [r3, #0]
   2d990:	2b2f      	cmp	r3, #47	; 0x2f
   2d992:	d03f      	beq.n	2da14 <create_name+0xdc>
   2d994:	2324      	movs	r3, #36	; 0x24
   2d996:	18fb      	adds	r3, r7, r3
   2d998:	881b      	ldrh	r3, [r3, #0]
   2d99a:	2b5c      	cmp	r3, #92	; 0x5c
   2d99c:	d03a      	beq.n	2da14 <create_name+0xdc>
   2d99e:	697b      	ldr	r3, [r7, #20]
   2d9a0:	2bfe      	cmp	r3, #254	; 0xfe
   2d9a2:	d901      	bls.n	2d9a8 <create_name+0x70>
   2d9a4:	2306      	movs	r3, #6
   2d9a6:	e1e7      	b.n	2dd78 <create_name+0x440>
   2d9a8:	2324      	movs	r3, #36	; 0x24
   2d9aa:	18fb      	adds	r3, r7, r3
   2d9ac:	2224      	movs	r2, #36	; 0x24
   2d9ae:	18ba      	adds	r2, r7, r2
   2d9b0:	8812      	ldrh	r2, [r2, #0]
   2d9b2:	21ff      	movs	r1, #255	; 0xff
   2d9b4:	400a      	ands	r2, r1
   2d9b6:	801a      	strh	r2, [r3, #0]
   2d9b8:	2324      	movs	r3, #36	; 0x24
   2d9ba:	18fc      	adds	r4, r7, r3
   2d9bc:	2324      	movs	r3, #36	; 0x24
   2d9be:	18fb      	adds	r3, r7, r3
   2d9c0:	881b      	ldrh	r3, [r3, #0]
   2d9c2:	2101      	movs	r1, #1
   2d9c4:	0018      	movs	r0, r3
   2d9c6:	4bba      	ldr	r3, [pc, #744]	; (2dcb0 <create_name+0x378>)
   2d9c8:	4798      	blx	r3
   2d9ca:	0003      	movs	r3, r0
   2d9cc:	8023      	strh	r3, [r4, #0]
   2d9ce:	2324      	movs	r3, #36	; 0x24
   2d9d0:	18fb      	adds	r3, r7, r3
   2d9d2:	881b      	ldrh	r3, [r3, #0]
   2d9d4:	2b00      	cmp	r3, #0
   2d9d6:	d101      	bne.n	2d9dc <create_name+0xa4>
   2d9d8:	2306      	movs	r3, #6
   2d9da:	e1cd      	b.n	2dd78 <create_name+0x440>
   2d9dc:	2324      	movs	r3, #36	; 0x24
   2d9de:	18fb      	adds	r3, r7, r3
   2d9e0:	881b      	ldrh	r3, [r3, #0]
   2d9e2:	2b7f      	cmp	r3, #127	; 0x7f
   2d9e4:	d80b      	bhi.n	2d9fe <create_name+0xc6>
   2d9e6:	2324      	movs	r3, #36	; 0x24
   2d9e8:	18fb      	adds	r3, r7, r3
   2d9ea:	881a      	ldrh	r2, [r3, #0]
   2d9ec:	4bb1      	ldr	r3, [pc, #708]	; (2dcb4 <create_name+0x37c>)
   2d9ee:	0011      	movs	r1, r2
   2d9f0:	0018      	movs	r0, r3
   2d9f2:	4bb1      	ldr	r3, [pc, #708]	; (2dcb8 <create_name+0x380>)
   2d9f4:	4798      	blx	r3
   2d9f6:	1e03      	subs	r3, r0, #0
   2d9f8:	d001      	beq.n	2d9fe <create_name+0xc6>
   2d9fa:	2306      	movs	r3, #6
   2d9fc:	e1bc      	b.n	2dd78 <create_name+0x440>
   2d9fe:	697b      	ldr	r3, [r7, #20]
   2da00:	1c5a      	adds	r2, r3, #1
   2da02:	617a      	str	r2, [r7, #20]
   2da04:	005b      	lsls	r3, r3, #1
   2da06:	68fa      	ldr	r2, [r7, #12]
   2da08:	18d3      	adds	r3, r2, r3
   2da0a:	2224      	movs	r2, #36	; 0x24
   2da0c:	18ba      	adds	r2, r7, r2
   2da0e:	8812      	ldrh	r2, [r2, #0]
   2da10:	801a      	strh	r2, [r3, #0]
   2da12:	e7ac      	b.n	2d96e <create_name+0x36>
   2da14:	693a      	ldr	r2, [r7, #16]
   2da16:	69bb      	ldr	r3, [r7, #24]
   2da18:	18d2      	adds	r2, r2, r3
   2da1a:	683b      	ldr	r3, [r7, #0]
   2da1c:	601a      	str	r2, [r3, #0]
   2da1e:	2324      	movs	r3, #36	; 0x24
   2da20:	18fb      	adds	r3, r7, r3
   2da22:	881b      	ldrh	r3, [r3, #0]
   2da24:	2b1f      	cmp	r3, #31
   2da26:	d801      	bhi.n	2da2c <create_name+0xf4>
   2da28:	2204      	movs	r2, #4
   2da2a:	e000      	b.n	2da2e <create_name+0xf6>
   2da2c:	2200      	movs	r2, #0
   2da2e:	2326      	movs	r3, #38	; 0x26
   2da30:	18fb      	adds	r3, r7, r3
   2da32:	701a      	strb	r2, [r3, #0]
   2da34:	e017      	b.n	2da66 <create_name+0x12e>
   2da36:	697b      	ldr	r3, [r7, #20]
   2da38:	4aa0      	ldr	r2, [pc, #640]	; (2dcbc <create_name+0x384>)
   2da3a:	4694      	mov	ip, r2
   2da3c:	4463      	add	r3, ip
   2da3e:	005b      	lsls	r3, r3, #1
   2da40:	68fa      	ldr	r2, [r7, #12]
   2da42:	18d2      	adds	r2, r2, r3
   2da44:	2324      	movs	r3, #36	; 0x24
   2da46:	18fb      	adds	r3, r7, r3
   2da48:	8812      	ldrh	r2, [r2, #0]
   2da4a:	801a      	strh	r2, [r3, #0]
   2da4c:	2324      	movs	r3, #36	; 0x24
   2da4e:	18fb      	adds	r3, r7, r3
   2da50:	881b      	ldrh	r3, [r3, #0]
   2da52:	2b20      	cmp	r3, #32
   2da54:	d004      	beq.n	2da60 <create_name+0x128>
   2da56:	2324      	movs	r3, #36	; 0x24
   2da58:	18fb      	adds	r3, r7, r3
   2da5a:	881b      	ldrh	r3, [r3, #0]
   2da5c:	2b2e      	cmp	r3, #46	; 0x2e
   2da5e:	d106      	bne.n	2da6e <create_name+0x136>
   2da60:	697b      	ldr	r3, [r7, #20]
   2da62:	3b01      	subs	r3, #1
   2da64:	617b      	str	r3, [r7, #20]
   2da66:	697b      	ldr	r3, [r7, #20]
   2da68:	2b00      	cmp	r3, #0
   2da6a:	d1e4      	bne.n	2da36 <create_name+0xfe>
   2da6c:	e000      	b.n	2da70 <create_name+0x138>
   2da6e:	46c0      	nop			; (mov r8, r8)
   2da70:	697b      	ldr	r3, [r7, #20]
   2da72:	2b00      	cmp	r3, #0
   2da74:	d101      	bne.n	2da7a <create_name+0x142>
   2da76:	2306      	movs	r3, #6
   2da78:	e17e      	b.n	2dd78 <create_name+0x440>
   2da7a:	697b      	ldr	r3, [r7, #20]
   2da7c:	005b      	lsls	r3, r3, #1
   2da7e:	68fa      	ldr	r2, [r7, #12]
   2da80:	18d3      	adds	r3, r2, r3
   2da82:	2200      	movs	r2, #0
   2da84:	801a      	strh	r2, [r3, #0]
   2da86:	687b      	ldr	r3, [r7, #4]
   2da88:	699b      	ldr	r3, [r3, #24]
   2da8a:	220b      	movs	r2, #11
   2da8c:	2120      	movs	r1, #32
   2da8e:	0018      	movs	r0, r3
   2da90:	4b8b      	ldr	r3, [pc, #556]	; (2dcc0 <create_name+0x388>)
   2da92:	4798      	blx	r3
   2da94:	2300      	movs	r3, #0
   2da96:	61bb      	str	r3, [r7, #24]
   2da98:	e002      	b.n	2daa0 <create_name+0x168>
   2da9a:	69bb      	ldr	r3, [r7, #24]
   2da9c:	3301      	adds	r3, #1
   2da9e:	61bb      	str	r3, [r7, #24]
   2daa0:	69bb      	ldr	r3, [r7, #24]
   2daa2:	005b      	lsls	r3, r3, #1
   2daa4:	68fa      	ldr	r2, [r7, #12]
   2daa6:	18d3      	adds	r3, r2, r3
   2daa8:	881b      	ldrh	r3, [r3, #0]
   2daaa:	2b20      	cmp	r3, #32
   2daac:	d0f5      	beq.n	2da9a <create_name+0x162>
   2daae:	69bb      	ldr	r3, [r7, #24]
   2dab0:	005b      	lsls	r3, r3, #1
   2dab2:	68fa      	ldr	r2, [r7, #12]
   2dab4:	18d3      	adds	r3, r2, r3
   2dab6:	881b      	ldrh	r3, [r3, #0]
   2dab8:	2b2e      	cmp	r3, #46	; 0x2e
   2daba:	d0ee      	beq.n	2da9a <create_name+0x162>
   2dabc:	69bb      	ldr	r3, [r7, #24]
   2dabe:	2b00      	cmp	r3, #0
   2dac0:	d00b      	beq.n	2dada <create_name+0x1a2>
   2dac2:	2326      	movs	r3, #38	; 0x26
   2dac4:	18fb      	adds	r3, r7, r3
   2dac6:	2226      	movs	r2, #38	; 0x26
   2dac8:	18ba      	adds	r2, r7, r2
   2daca:	7812      	ldrb	r2, [r2, #0]
   2dacc:	2103      	movs	r1, #3
   2dace:	430a      	orrs	r2, r1
   2dad0:	701a      	strb	r2, [r3, #0]
   2dad2:	e002      	b.n	2dada <create_name+0x1a2>
   2dad4:	697b      	ldr	r3, [r7, #20]
   2dad6:	3b01      	subs	r3, #1
   2dad8:	617b      	str	r3, [r7, #20]
   2dada:	697b      	ldr	r3, [r7, #20]
   2dadc:	2b00      	cmp	r3, #0
   2dade:	d009      	beq.n	2daf4 <create_name+0x1bc>
   2dae0:	697b      	ldr	r3, [r7, #20]
   2dae2:	4a76      	ldr	r2, [pc, #472]	; (2dcbc <create_name+0x384>)
   2dae4:	4694      	mov	ip, r2
   2dae6:	4463      	add	r3, ip
   2dae8:	005b      	lsls	r3, r3, #1
   2daea:	68fa      	ldr	r2, [r7, #12]
   2daec:	18d3      	adds	r3, r2, r3
   2daee:	881b      	ldrh	r3, [r3, #0]
   2daf0:	2b2e      	cmp	r3, #46	; 0x2e
   2daf2:	d1ef      	bne.n	2dad4 <create_name+0x19c>
   2daf4:	2300      	movs	r3, #0
   2daf6:	623b      	str	r3, [r7, #32]
   2daf8:	2327      	movs	r3, #39	; 0x27
   2dafa:	18fb      	adds	r3, r7, r3
   2dafc:	2200      	movs	r2, #0
   2dafe:	701a      	strb	r2, [r3, #0]
   2db00:	2308      	movs	r3, #8
   2db02:	61fb      	str	r3, [r7, #28]
   2db04:	69bb      	ldr	r3, [r7, #24]
   2db06:	1c5a      	adds	r2, r3, #1
   2db08:	61ba      	str	r2, [r7, #24]
   2db0a:	005b      	lsls	r3, r3, #1
   2db0c:	68fa      	ldr	r2, [r7, #12]
   2db0e:	18d2      	adds	r2, r2, r3
   2db10:	2324      	movs	r3, #36	; 0x24
   2db12:	18fb      	adds	r3, r7, r3
   2db14:	8812      	ldrh	r2, [r2, #0]
   2db16:	801a      	strh	r2, [r3, #0]
   2db18:	2324      	movs	r3, #36	; 0x24
   2db1a:	18fb      	adds	r3, r7, r3
   2db1c:	881b      	ldrh	r3, [r3, #0]
   2db1e:	2b00      	cmp	r3, #0
   2db20:	d100      	bne.n	2db24 <create_name+0x1ec>
   2db22:	e0c3      	b.n	2dcac <create_name+0x374>
   2db24:	2324      	movs	r3, #36	; 0x24
   2db26:	18fb      	adds	r3, r7, r3
   2db28:	881b      	ldrh	r3, [r3, #0]
   2db2a:	2b20      	cmp	r3, #32
   2db2c:	d008      	beq.n	2db40 <create_name+0x208>
   2db2e:	2324      	movs	r3, #36	; 0x24
   2db30:	18fb      	adds	r3, r7, r3
   2db32:	881b      	ldrh	r3, [r3, #0]
   2db34:	2b2e      	cmp	r3, #46	; 0x2e
   2db36:	d10c      	bne.n	2db52 <create_name+0x21a>
   2db38:	69ba      	ldr	r2, [r7, #24]
   2db3a:	697b      	ldr	r3, [r7, #20]
   2db3c:	429a      	cmp	r2, r3
   2db3e:	d008      	beq.n	2db52 <create_name+0x21a>
   2db40:	2326      	movs	r3, #38	; 0x26
   2db42:	18fb      	adds	r3, r7, r3
   2db44:	2226      	movs	r2, #38	; 0x26
   2db46:	18ba      	adds	r2, r7, r2
   2db48:	7812      	ldrb	r2, [r2, #0]
   2db4a:	2103      	movs	r1, #3
   2db4c:	430a      	orrs	r2, r1
   2db4e:	701a      	strb	r2, [r3, #0]
   2db50:	e0ab      	b.n	2dcaa <create_name+0x372>
   2db52:	6a3a      	ldr	r2, [r7, #32]
   2db54:	69fb      	ldr	r3, [r7, #28]
   2db56:	429a      	cmp	r2, r3
   2db58:	d203      	bcs.n	2db62 <create_name+0x22a>
   2db5a:	69ba      	ldr	r2, [r7, #24]
   2db5c:	697b      	ldr	r3, [r7, #20]
   2db5e:	429a      	cmp	r2, r3
   2db60:	d12a      	bne.n	2dbb8 <create_name+0x280>
   2db62:	69fb      	ldr	r3, [r7, #28]
   2db64:	2b0b      	cmp	r3, #11
   2db66:	d108      	bne.n	2db7a <create_name+0x242>
   2db68:	2326      	movs	r3, #38	; 0x26
   2db6a:	18fb      	adds	r3, r7, r3
   2db6c:	2226      	movs	r2, #38	; 0x26
   2db6e:	18ba      	adds	r2, r7, r2
   2db70:	7812      	ldrb	r2, [r2, #0]
   2db72:	2103      	movs	r1, #3
   2db74:	430a      	orrs	r2, r1
   2db76:	701a      	strb	r2, [r3, #0]
   2db78:	e0a9      	b.n	2dcce <create_name+0x396>
   2db7a:	69ba      	ldr	r2, [r7, #24]
   2db7c:	697b      	ldr	r3, [r7, #20]
   2db7e:	429a      	cmp	r2, r3
   2db80:	d007      	beq.n	2db92 <create_name+0x25a>
   2db82:	2326      	movs	r3, #38	; 0x26
   2db84:	18fb      	adds	r3, r7, r3
   2db86:	2226      	movs	r2, #38	; 0x26
   2db88:	18ba      	adds	r2, r7, r2
   2db8a:	7812      	ldrb	r2, [r2, #0]
   2db8c:	2103      	movs	r1, #3
   2db8e:	430a      	orrs	r2, r1
   2db90:	701a      	strb	r2, [r3, #0]
   2db92:	69ba      	ldr	r2, [r7, #24]
   2db94:	697b      	ldr	r3, [r7, #20]
   2db96:	429a      	cmp	r2, r3
   2db98:	d900      	bls.n	2db9c <create_name+0x264>
   2db9a:	e097      	b.n	2dccc <create_name+0x394>
   2db9c:	697b      	ldr	r3, [r7, #20]
   2db9e:	61bb      	str	r3, [r7, #24]
   2dba0:	2308      	movs	r3, #8
   2dba2:	623b      	str	r3, [r7, #32]
   2dba4:	230b      	movs	r3, #11
   2dba6:	61fb      	str	r3, [r7, #28]
   2dba8:	2327      	movs	r3, #39	; 0x27
   2dbaa:	18fb      	adds	r3, r7, r3
   2dbac:	2227      	movs	r2, #39	; 0x27
   2dbae:	18ba      	adds	r2, r7, r2
   2dbb0:	7812      	ldrb	r2, [r2, #0]
   2dbb2:	0092      	lsls	r2, r2, #2
   2dbb4:	701a      	strb	r2, [r3, #0]
   2dbb6:	e078      	b.n	2dcaa <create_name+0x372>
   2dbb8:	2324      	movs	r3, #36	; 0x24
   2dbba:	18fb      	adds	r3, r7, r3
   2dbbc:	881b      	ldrh	r3, [r3, #0]
   2dbbe:	2b7f      	cmp	r3, #127	; 0x7f
   2dbc0:	d920      	bls.n	2dc04 <create_name+0x2cc>
   2dbc2:	2324      	movs	r3, #36	; 0x24
   2dbc4:	18fc      	adds	r4, r7, r3
   2dbc6:	2324      	movs	r3, #36	; 0x24
   2dbc8:	18fb      	adds	r3, r7, r3
   2dbca:	881b      	ldrh	r3, [r3, #0]
   2dbcc:	2100      	movs	r1, #0
   2dbce:	0018      	movs	r0, r3
   2dbd0:	4b37      	ldr	r3, [pc, #220]	; (2dcb0 <create_name+0x378>)
   2dbd2:	4798      	blx	r3
   2dbd4:	0003      	movs	r3, r0
   2dbd6:	8023      	strh	r3, [r4, #0]
   2dbd8:	2324      	movs	r3, #36	; 0x24
   2dbda:	18fb      	adds	r3, r7, r3
   2dbdc:	881b      	ldrh	r3, [r3, #0]
   2dbde:	2b00      	cmp	r3, #0
   2dbe0:	d008      	beq.n	2dbf4 <create_name+0x2bc>
   2dbe2:	2324      	movs	r3, #36	; 0x24
   2dbe4:	18fb      	adds	r3, r7, r3
   2dbe6:	881b      	ldrh	r3, [r3, #0]
   2dbe8:	3b80      	subs	r3, #128	; 0x80
   2dbea:	4a36      	ldr	r2, [pc, #216]	; (2dcc4 <create_name+0x38c>)
   2dbec:	5cd2      	ldrb	r2, [r2, r3]
   2dbee:	2324      	movs	r3, #36	; 0x24
   2dbf0:	18fb      	adds	r3, r7, r3
   2dbf2:	801a      	strh	r2, [r3, #0]
   2dbf4:	2326      	movs	r3, #38	; 0x26
   2dbf6:	18fb      	adds	r3, r7, r3
   2dbf8:	2226      	movs	r2, #38	; 0x26
   2dbfa:	18ba      	adds	r2, r7, r2
   2dbfc:	7812      	ldrb	r2, [r2, #0]
   2dbfe:	2102      	movs	r1, #2
   2dc00:	430a      	orrs	r2, r1
   2dc02:	701a      	strb	r2, [r3, #0]
   2dc04:	2324      	movs	r3, #36	; 0x24
   2dc06:	18fb      	adds	r3, r7, r3
   2dc08:	881b      	ldrh	r3, [r3, #0]
   2dc0a:	2b00      	cmp	r3, #0
   2dc0c:	d009      	beq.n	2dc22 <create_name+0x2ea>
   2dc0e:	2324      	movs	r3, #36	; 0x24
   2dc10:	18fb      	adds	r3, r7, r3
   2dc12:	881a      	ldrh	r2, [r3, #0]
   2dc14:	4b2c      	ldr	r3, [pc, #176]	; (2dcc8 <create_name+0x390>)
   2dc16:	0011      	movs	r1, r2
   2dc18:	0018      	movs	r0, r3
   2dc1a:	4b27      	ldr	r3, [pc, #156]	; (2dcb8 <create_name+0x380>)
   2dc1c:	4798      	blx	r3
   2dc1e:	1e03      	subs	r3, r0, #0
   2dc20:	d00c      	beq.n	2dc3c <create_name+0x304>
   2dc22:	2324      	movs	r3, #36	; 0x24
   2dc24:	18fb      	adds	r3, r7, r3
   2dc26:	225f      	movs	r2, #95	; 0x5f
   2dc28:	801a      	strh	r2, [r3, #0]
   2dc2a:	2326      	movs	r3, #38	; 0x26
   2dc2c:	18fb      	adds	r3, r7, r3
   2dc2e:	2226      	movs	r2, #38	; 0x26
   2dc30:	18ba      	adds	r2, r7, r2
   2dc32:	7812      	ldrb	r2, [r2, #0]
   2dc34:	2103      	movs	r1, #3
   2dc36:	430a      	orrs	r2, r1
   2dc38:	701a      	strb	r2, [r3, #0]
   2dc3a:	e02b      	b.n	2dc94 <create_name+0x35c>
   2dc3c:	2324      	movs	r3, #36	; 0x24
   2dc3e:	18fb      	adds	r3, r7, r3
   2dc40:	881b      	ldrh	r3, [r3, #0]
   2dc42:	2b40      	cmp	r3, #64	; 0x40
   2dc44:	d90d      	bls.n	2dc62 <create_name+0x32a>
   2dc46:	2324      	movs	r3, #36	; 0x24
   2dc48:	18fb      	adds	r3, r7, r3
   2dc4a:	881b      	ldrh	r3, [r3, #0]
   2dc4c:	2b5a      	cmp	r3, #90	; 0x5a
   2dc4e:	d808      	bhi.n	2dc62 <create_name+0x32a>
   2dc50:	2327      	movs	r3, #39	; 0x27
   2dc52:	18fb      	adds	r3, r7, r3
   2dc54:	2227      	movs	r2, #39	; 0x27
   2dc56:	18ba      	adds	r2, r7, r2
   2dc58:	7812      	ldrb	r2, [r2, #0]
   2dc5a:	2102      	movs	r1, #2
   2dc5c:	430a      	orrs	r2, r1
   2dc5e:	701a      	strb	r2, [r3, #0]
   2dc60:	e018      	b.n	2dc94 <create_name+0x35c>
   2dc62:	2324      	movs	r3, #36	; 0x24
   2dc64:	18fb      	adds	r3, r7, r3
   2dc66:	881b      	ldrh	r3, [r3, #0]
   2dc68:	2b60      	cmp	r3, #96	; 0x60
   2dc6a:	d913      	bls.n	2dc94 <create_name+0x35c>
   2dc6c:	2324      	movs	r3, #36	; 0x24
   2dc6e:	18fb      	adds	r3, r7, r3
   2dc70:	881b      	ldrh	r3, [r3, #0]
   2dc72:	2b7a      	cmp	r3, #122	; 0x7a
   2dc74:	d80e      	bhi.n	2dc94 <create_name+0x35c>
   2dc76:	2327      	movs	r3, #39	; 0x27
   2dc78:	18fb      	adds	r3, r7, r3
   2dc7a:	2227      	movs	r2, #39	; 0x27
   2dc7c:	18ba      	adds	r2, r7, r2
   2dc7e:	7812      	ldrb	r2, [r2, #0]
   2dc80:	2101      	movs	r1, #1
   2dc82:	430a      	orrs	r2, r1
   2dc84:	701a      	strb	r2, [r3, #0]
   2dc86:	2324      	movs	r3, #36	; 0x24
   2dc88:	18fb      	adds	r3, r7, r3
   2dc8a:	2224      	movs	r2, #36	; 0x24
   2dc8c:	18ba      	adds	r2, r7, r2
   2dc8e:	8812      	ldrh	r2, [r2, #0]
   2dc90:	3a20      	subs	r2, #32
   2dc92:	801a      	strh	r2, [r3, #0]
   2dc94:	687b      	ldr	r3, [r7, #4]
   2dc96:	699a      	ldr	r2, [r3, #24]
   2dc98:	6a3b      	ldr	r3, [r7, #32]
   2dc9a:	1c59      	adds	r1, r3, #1
   2dc9c:	6239      	str	r1, [r7, #32]
   2dc9e:	18d3      	adds	r3, r2, r3
   2dca0:	2224      	movs	r2, #36	; 0x24
   2dca2:	18ba      	adds	r2, r7, r2
   2dca4:	8812      	ldrh	r2, [r2, #0]
   2dca6:	b2d2      	uxtb	r2, r2
   2dca8:	701a      	strb	r2, [r3, #0]
   2dcaa:	e72b      	b.n	2db04 <create_name+0x1cc>
   2dcac:	46c0      	nop			; (mov r8, r8)
   2dcae:	e00e      	b.n	2dcce <create_name+0x396>
   2dcb0:	0002f071 	.word	0x0002f071
   2dcb4:	0003a350 	.word	0x0003a350
   2dcb8:	0002c4db 	.word	0x0002c4db
   2dcbc:	7fffffff 	.word	0x7fffffff
   2dcc0:	0002c461 	.word	0x0002c461
   2dcc4:	0003a398 	.word	0x0003a398
   2dcc8:	0003a35c 	.word	0x0003a35c
   2dccc:	46c0      	nop			; (mov r8, r8)
   2dcce:	687b      	ldr	r3, [r7, #4]
   2dcd0:	699b      	ldr	r3, [r3, #24]
   2dcd2:	781b      	ldrb	r3, [r3, #0]
   2dcd4:	2be5      	cmp	r3, #229	; 0xe5
   2dcd6:	d103      	bne.n	2dce0 <create_name+0x3a8>
   2dcd8:	687b      	ldr	r3, [r7, #4]
   2dcda:	699b      	ldr	r3, [r3, #24]
   2dcdc:	2205      	movs	r2, #5
   2dcde:	701a      	strb	r2, [r3, #0]
   2dce0:	69fb      	ldr	r3, [r7, #28]
   2dce2:	2b08      	cmp	r3, #8
   2dce4:	d106      	bne.n	2dcf4 <create_name+0x3bc>
   2dce6:	2327      	movs	r3, #39	; 0x27
   2dce8:	18fb      	adds	r3, r7, r3
   2dcea:	2227      	movs	r2, #39	; 0x27
   2dcec:	18ba      	adds	r2, r7, r2
   2dcee:	7812      	ldrb	r2, [r2, #0]
   2dcf0:	0092      	lsls	r2, r2, #2
   2dcf2:	701a      	strb	r2, [r3, #0]
   2dcf4:	2327      	movs	r3, #39	; 0x27
   2dcf6:	18fb      	adds	r3, r7, r3
   2dcf8:	781b      	ldrb	r3, [r3, #0]
   2dcfa:	220c      	movs	r2, #12
   2dcfc:	4013      	ands	r3, r2
   2dcfe:	2b0c      	cmp	r3, #12
   2dd00:	d006      	beq.n	2dd10 <create_name+0x3d8>
   2dd02:	2327      	movs	r3, #39	; 0x27
   2dd04:	18fb      	adds	r3, r7, r3
   2dd06:	781b      	ldrb	r3, [r3, #0]
   2dd08:	2203      	movs	r2, #3
   2dd0a:	4013      	ands	r3, r2
   2dd0c:	2b03      	cmp	r3, #3
   2dd0e:	d107      	bne.n	2dd20 <create_name+0x3e8>
   2dd10:	2326      	movs	r3, #38	; 0x26
   2dd12:	18fb      	adds	r3, r7, r3
   2dd14:	2226      	movs	r2, #38	; 0x26
   2dd16:	18ba      	adds	r2, r7, r2
   2dd18:	7812      	ldrb	r2, [r2, #0]
   2dd1a:	2102      	movs	r1, #2
   2dd1c:	430a      	orrs	r2, r1
   2dd1e:	701a      	strb	r2, [r3, #0]
   2dd20:	2326      	movs	r3, #38	; 0x26
   2dd22:	18fb      	adds	r3, r7, r3
   2dd24:	781b      	ldrb	r3, [r3, #0]
   2dd26:	2202      	movs	r2, #2
   2dd28:	4013      	ands	r3, r2
   2dd2a:	d11d      	bne.n	2dd68 <create_name+0x430>
   2dd2c:	2327      	movs	r3, #39	; 0x27
   2dd2e:	18fb      	adds	r3, r7, r3
   2dd30:	781b      	ldrb	r3, [r3, #0]
   2dd32:	2203      	movs	r2, #3
   2dd34:	4013      	ands	r3, r2
   2dd36:	2b01      	cmp	r3, #1
   2dd38:	d107      	bne.n	2dd4a <create_name+0x412>
   2dd3a:	2326      	movs	r3, #38	; 0x26
   2dd3c:	18fb      	adds	r3, r7, r3
   2dd3e:	2226      	movs	r2, #38	; 0x26
   2dd40:	18ba      	adds	r2, r7, r2
   2dd42:	7812      	ldrb	r2, [r2, #0]
   2dd44:	2110      	movs	r1, #16
   2dd46:	430a      	orrs	r2, r1
   2dd48:	701a      	strb	r2, [r3, #0]
   2dd4a:	2327      	movs	r3, #39	; 0x27
   2dd4c:	18fb      	adds	r3, r7, r3
   2dd4e:	781b      	ldrb	r3, [r3, #0]
   2dd50:	220c      	movs	r2, #12
   2dd52:	4013      	ands	r3, r2
   2dd54:	2b04      	cmp	r3, #4
   2dd56:	d107      	bne.n	2dd68 <create_name+0x430>
   2dd58:	2326      	movs	r3, #38	; 0x26
   2dd5a:	18fb      	adds	r3, r7, r3
   2dd5c:	2226      	movs	r2, #38	; 0x26
   2dd5e:	18ba      	adds	r2, r7, r2
   2dd60:	7812      	ldrb	r2, [r2, #0]
   2dd62:	2108      	movs	r1, #8
   2dd64:	430a      	orrs	r2, r1
   2dd66:	701a      	strb	r2, [r3, #0]
   2dd68:	687b      	ldr	r3, [r7, #4]
   2dd6a:	699b      	ldr	r3, [r3, #24]
   2dd6c:	330b      	adds	r3, #11
   2dd6e:	2226      	movs	r2, #38	; 0x26
   2dd70:	18ba      	adds	r2, r7, r2
   2dd72:	7812      	ldrb	r2, [r2, #0]
   2dd74:	701a      	strb	r2, [r3, #0]
   2dd76:	2300      	movs	r3, #0
   2dd78:	0018      	movs	r0, r3
   2dd7a:	46bd      	mov	sp, r7
   2dd7c:	b00b      	add	sp, #44	; 0x2c
   2dd7e:	bd90      	pop	{r4, r7, pc}

0002dd80 <follow_path>:
   2dd80:	b590      	push	{r4, r7, lr}
   2dd82:	b085      	sub	sp, #20
   2dd84:	af00      	add	r7, sp, #0
   2dd86:	6078      	str	r0, [r7, #4]
   2dd88:	6039      	str	r1, [r7, #0]
   2dd8a:	683b      	ldr	r3, [r7, #0]
   2dd8c:	781b      	ldrb	r3, [r3, #0]
   2dd8e:	2b2f      	cmp	r3, #47	; 0x2f
   2dd90:	d003      	beq.n	2dd9a <follow_path+0x1a>
   2dd92:	683b      	ldr	r3, [r7, #0]
   2dd94:	781b      	ldrb	r3, [r3, #0]
   2dd96:	2b5c      	cmp	r3, #92	; 0x5c
   2dd98:	d102      	bne.n	2dda0 <follow_path+0x20>
   2dd9a:	683b      	ldr	r3, [r7, #0]
   2dd9c:	3301      	adds	r3, #1
   2dd9e:	603b      	str	r3, [r7, #0]
   2dda0:	687b      	ldr	r3, [r7, #4]
   2dda2:	2200      	movs	r2, #0
   2dda4:	609a      	str	r2, [r3, #8]
   2dda6:	683b      	ldr	r3, [r7, #0]
   2dda8:	781b      	ldrb	r3, [r3, #0]
   2ddaa:	2b1f      	cmp	r3, #31
   2ddac:	d80c      	bhi.n	2ddc8 <follow_path+0x48>
   2ddae:	230f      	movs	r3, #15
   2ddb0:	18fc      	adds	r4, r7, r3
   2ddb2:	687b      	ldr	r3, [r7, #4]
   2ddb4:	2100      	movs	r1, #0
   2ddb6:	0018      	movs	r0, r3
   2ddb8:	4b3c      	ldr	r3, [pc, #240]	; (2deac <follow_path+0x12c>)
   2ddba:	4798      	blx	r3
   2ddbc:	0003      	movs	r3, r0
   2ddbe:	7023      	strb	r3, [r4, #0]
   2ddc0:	687b      	ldr	r3, [r7, #4]
   2ddc2:	2200      	movs	r2, #0
   2ddc4:	615a      	str	r2, [r3, #20]
   2ddc6:	e06a      	b.n	2de9e <follow_path+0x11e>
   2ddc8:	230f      	movs	r3, #15
   2ddca:	18fc      	adds	r4, r7, r3
   2ddcc:	003a      	movs	r2, r7
   2ddce:	687b      	ldr	r3, [r7, #4]
   2ddd0:	0011      	movs	r1, r2
   2ddd2:	0018      	movs	r0, r3
   2ddd4:	4b36      	ldr	r3, [pc, #216]	; (2deb0 <follow_path+0x130>)
   2ddd6:	4798      	blx	r3
   2ddd8:	0003      	movs	r3, r0
   2ddda:	7023      	strb	r3, [r4, #0]
   2dddc:	230f      	movs	r3, #15
   2ddde:	18fb      	adds	r3, r7, r3
   2dde0:	781b      	ldrb	r3, [r3, #0]
   2dde2:	2b00      	cmp	r3, #0
   2dde4:	d154      	bne.n	2de90 <follow_path+0x110>
   2dde6:	230f      	movs	r3, #15
   2dde8:	18fc      	adds	r4, r7, r3
   2ddea:	687b      	ldr	r3, [r7, #4]
   2ddec:	0018      	movs	r0, r3
   2ddee:	4b31      	ldr	r3, [pc, #196]	; (2deb4 <follow_path+0x134>)
   2ddf0:	4798      	blx	r3
   2ddf2:	0003      	movs	r3, r0
   2ddf4:	7023      	strb	r3, [r4, #0]
   2ddf6:	687b      	ldr	r3, [r7, #4]
   2ddf8:	699a      	ldr	r2, [r3, #24]
   2ddfa:	230e      	movs	r3, #14
   2ddfc:	18fb      	adds	r3, r7, r3
   2ddfe:	7ad2      	ldrb	r2, [r2, #11]
   2de00:	701a      	strb	r2, [r3, #0]
   2de02:	230f      	movs	r3, #15
   2de04:	18fb      	adds	r3, r7, r3
   2de06:	781b      	ldrb	r3, [r3, #0]
   2de08:	2b00      	cmp	r3, #0
   2de0a:	d00f      	beq.n	2de2c <follow_path+0xac>
   2de0c:	230f      	movs	r3, #15
   2de0e:	18fb      	adds	r3, r7, r3
   2de10:	781b      	ldrb	r3, [r3, #0]
   2de12:	2b04      	cmp	r3, #4
   2de14:	d13e      	bne.n	2de94 <follow_path+0x114>
   2de16:	230e      	movs	r3, #14
   2de18:	18fb      	adds	r3, r7, r3
   2de1a:	781b      	ldrb	r3, [r3, #0]
   2de1c:	2204      	movs	r2, #4
   2de1e:	4013      	ands	r3, r2
   2de20:	d13a      	bne.n	2de98 <follow_path+0x118>
   2de22:	230f      	movs	r3, #15
   2de24:	18fb      	adds	r3, r7, r3
   2de26:	2205      	movs	r2, #5
   2de28:	701a      	strb	r2, [r3, #0]
   2de2a:	e035      	b.n	2de98 <follow_path+0x118>
   2de2c:	230e      	movs	r3, #14
   2de2e:	18fb      	adds	r3, r7, r3
   2de30:	781b      	ldrb	r3, [r3, #0]
   2de32:	2204      	movs	r2, #4
   2de34:	4013      	ands	r3, r2
   2de36:	d131      	bne.n	2de9c <follow_path+0x11c>
   2de38:	687b      	ldr	r3, [r7, #4]
   2de3a:	695b      	ldr	r3, [r3, #20]
   2de3c:	60bb      	str	r3, [r7, #8]
   2de3e:	68bb      	ldr	r3, [r7, #8]
   2de40:	330b      	adds	r3, #11
   2de42:	781b      	ldrb	r3, [r3, #0]
   2de44:	001a      	movs	r2, r3
   2de46:	2310      	movs	r3, #16
   2de48:	4013      	ands	r3, r2
   2de4a:	d104      	bne.n	2de56 <follow_path+0xd6>
   2de4c:	230f      	movs	r3, #15
   2de4e:	18fb      	adds	r3, r7, r3
   2de50:	2205      	movs	r2, #5
   2de52:	701a      	strb	r2, [r3, #0]
   2de54:	e023      	b.n	2de9e <follow_path+0x11e>
   2de56:	68bb      	ldr	r3, [r7, #8]
   2de58:	3315      	adds	r3, #21
   2de5a:	781b      	ldrb	r3, [r3, #0]
   2de5c:	021b      	lsls	r3, r3, #8
   2de5e:	b21a      	sxth	r2, r3
   2de60:	68bb      	ldr	r3, [r7, #8]
   2de62:	3314      	adds	r3, #20
   2de64:	781b      	ldrb	r3, [r3, #0]
   2de66:	b21b      	sxth	r3, r3
   2de68:	4313      	orrs	r3, r2
   2de6a:	b21b      	sxth	r3, r3
   2de6c:	b29b      	uxth	r3, r3
   2de6e:	041b      	lsls	r3, r3, #16
   2de70:	68ba      	ldr	r2, [r7, #8]
   2de72:	321b      	adds	r2, #27
   2de74:	7812      	ldrb	r2, [r2, #0]
   2de76:	0212      	lsls	r2, r2, #8
   2de78:	b211      	sxth	r1, r2
   2de7a:	68ba      	ldr	r2, [r7, #8]
   2de7c:	321a      	adds	r2, #26
   2de7e:	7812      	ldrb	r2, [r2, #0]
   2de80:	b212      	sxth	r2, r2
   2de82:	430a      	orrs	r2, r1
   2de84:	b212      	sxth	r2, r2
   2de86:	b292      	uxth	r2, r2
   2de88:	431a      	orrs	r2, r3
   2de8a:	687b      	ldr	r3, [r7, #4]
   2de8c:	609a      	str	r2, [r3, #8]
   2de8e:	e79b      	b.n	2ddc8 <follow_path+0x48>
   2de90:	46c0      	nop			; (mov r8, r8)
   2de92:	e004      	b.n	2de9e <follow_path+0x11e>
   2de94:	46c0      	nop			; (mov r8, r8)
   2de96:	e002      	b.n	2de9e <follow_path+0x11e>
   2de98:	46c0      	nop			; (mov r8, r8)
   2de9a:	e000      	b.n	2de9e <follow_path+0x11e>
   2de9c:	46c0      	nop			; (mov r8, r8)
   2de9e:	230f      	movs	r3, #15
   2dea0:	18fb      	adds	r3, r7, r3
   2dea2:	781b      	ldrb	r3, [r3, #0]
   2dea4:	0018      	movs	r0, r3
   2dea6:	46bd      	mov	sp, r7
   2dea8:	b005      	add	sp, #20
   2deaa:	bd90      	pop	{r4, r7, pc}
   2deac:	0002cd51 	.word	0x0002cd51
   2deb0:	0002d939 	.word	0x0002d939
   2deb4:	0002d3d5 	.word	0x0002d3d5

0002deb8 <check_fs>:
   2deb8:	b590      	push	{r4, r7, lr}
   2deba:	b083      	sub	sp, #12
   2debc:	af00      	add	r7, sp, #0
   2debe:	6078      	str	r0, [r7, #4]
   2dec0:	6039      	str	r1, [r7, #0]
   2dec2:	687b      	ldr	r3, [r7, #4]
   2dec4:	7858      	ldrb	r0, [r3, #1]
   2dec6:	687b      	ldr	r3, [r7, #4]
   2dec8:	3330      	adds	r3, #48	; 0x30
   2deca:	0019      	movs	r1, r3
   2decc:	683a      	ldr	r2, [r7, #0]
   2dece:	2301      	movs	r3, #1
   2ded0:	4c2a      	ldr	r4, [pc, #168]	; (2df7c <check_fs+0xc4>)
   2ded2:	47a0      	blx	r4
   2ded4:	1e03      	subs	r3, r0, #0
   2ded6:	d001      	beq.n	2dedc <check_fs+0x24>
   2ded8:	2303      	movs	r3, #3
   2deda:	e04b      	b.n	2df74 <check_fs+0xbc>
   2dedc:	687b      	ldr	r3, [r7, #4]
   2dede:	4a28      	ldr	r2, [pc, #160]	; (2df80 <check_fs+0xc8>)
   2dee0:	4694      	mov	ip, r2
   2dee2:	4463      	add	r3, ip
   2dee4:	3301      	adds	r3, #1
   2dee6:	781b      	ldrb	r3, [r3, #0]
   2dee8:	021b      	lsls	r3, r3, #8
   2deea:	b21a      	sxth	r2, r3
   2deec:	687b      	ldr	r3, [r7, #4]
   2deee:	4924      	ldr	r1, [pc, #144]	; (2df80 <check_fs+0xc8>)
   2def0:	5c5b      	ldrb	r3, [r3, r1]
   2def2:	b21b      	sxth	r3, r3
   2def4:	4313      	orrs	r3, r2
   2def6:	b21b      	sxth	r3, r3
   2def8:	4a22      	ldr	r2, [pc, #136]	; (2df84 <check_fs+0xcc>)
   2defa:	4293      	cmp	r3, r2
   2defc:	d001      	beq.n	2df02 <check_fs+0x4a>
   2defe:	2302      	movs	r3, #2
   2df00:	e038      	b.n	2df74 <check_fs+0xbc>
   2df02:	687b      	ldr	r3, [r7, #4]
   2df04:	3366      	adds	r3, #102	; 0x66
   2df06:	3303      	adds	r3, #3
   2df08:	781b      	ldrb	r3, [r3, #0]
   2df0a:	061a      	lsls	r2, r3, #24
   2df0c:	687b      	ldr	r3, [r7, #4]
   2df0e:	3366      	adds	r3, #102	; 0x66
   2df10:	3302      	adds	r3, #2
   2df12:	781b      	ldrb	r3, [r3, #0]
   2df14:	041b      	lsls	r3, r3, #16
   2df16:	4313      	orrs	r3, r2
   2df18:	687a      	ldr	r2, [r7, #4]
   2df1a:	3266      	adds	r2, #102	; 0x66
   2df1c:	3201      	adds	r2, #1
   2df1e:	7812      	ldrb	r2, [r2, #0]
   2df20:	0212      	lsls	r2, r2, #8
   2df22:	4313      	orrs	r3, r2
   2df24:	687a      	ldr	r2, [r7, #4]
   2df26:	2166      	movs	r1, #102	; 0x66
   2df28:	5c52      	ldrb	r2, [r2, r1]
   2df2a:	4313      	orrs	r3, r2
   2df2c:	021b      	lsls	r3, r3, #8
   2df2e:	0a1b      	lsrs	r3, r3, #8
   2df30:	4a15      	ldr	r2, [pc, #84]	; (2df88 <check_fs+0xd0>)
   2df32:	4293      	cmp	r3, r2
   2df34:	d101      	bne.n	2df3a <check_fs+0x82>
   2df36:	2300      	movs	r3, #0
   2df38:	e01c      	b.n	2df74 <check_fs+0xbc>
   2df3a:	687b      	ldr	r3, [r7, #4]
   2df3c:	3382      	adds	r3, #130	; 0x82
   2df3e:	3303      	adds	r3, #3
   2df40:	781b      	ldrb	r3, [r3, #0]
   2df42:	061a      	lsls	r2, r3, #24
   2df44:	687b      	ldr	r3, [r7, #4]
   2df46:	3382      	adds	r3, #130	; 0x82
   2df48:	3302      	adds	r3, #2
   2df4a:	781b      	ldrb	r3, [r3, #0]
   2df4c:	041b      	lsls	r3, r3, #16
   2df4e:	4313      	orrs	r3, r2
   2df50:	687a      	ldr	r2, [r7, #4]
   2df52:	3282      	adds	r2, #130	; 0x82
   2df54:	3201      	adds	r2, #1
   2df56:	7812      	ldrb	r2, [r2, #0]
   2df58:	0212      	lsls	r2, r2, #8
   2df5a:	4313      	orrs	r3, r2
   2df5c:	687a      	ldr	r2, [r7, #4]
   2df5e:	2182      	movs	r1, #130	; 0x82
   2df60:	5c52      	ldrb	r2, [r2, r1]
   2df62:	4313      	orrs	r3, r2
   2df64:	021b      	lsls	r3, r3, #8
   2df66:	0a1b      	lsrs	r3, r3, #8
   2df68:	4a07      	ldr	r2, [pc, #28]	; (2df88 <check_fs+0xd0>)
   2df6a:	4293      	cmp	r3, r2
   2df6c:	d101      	bne.n	2df72 <check_fs+0xba>
   2df6e:	2300      	movs	r3, #0
   2df70:	e000      	b.n	2df74 <check_fs+0xbc>
   2df72:	2301      	movs	r3, #1
   2df74:	0018      	movs	r0, r3
   2df76:	46bd      	mov	sp, r7
   2df78:	b003      	add	sp, #12
   2df7a:	bd90      	pop	{r4, r7, pc}
   2df7c:	0002c121 	.word	0x0002c121
   2df80:	0000022e 	.word	0x0000022e
   2df84:	ffffaa55 	.word	0xffffaa55
   2df88:	00544146 	.word	0x00544146

0002df8c <chk_mounted>:
   2df8c:	b590      	push	{r4, r7, lr}
   2df8e:	b093      	sub	sp, #76	; 0x4c
   2df90:	af00      	add	r7, sp, #0
   2df92:	60f8      	str	r0, [r7, #12]
   2df94:	60b9      	str	r1, [r7, #8]
   2df96:	1dfb      	adds	r3, r7, #7
   2df98:	701a      	strb	r2, [r3, #0]
   2df9a:	68fb      	ldr	r3, [r7, #12]
   2df9c:	681b      	ldr	r3, [r3, #0]
   2df9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   2dfa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2dfa2:	781b      	ldrb	r3, [r3, #0]
   2dfa4:	3b30      	subs	r3, #48	; 0x30
   2dfa6:	643b      	str	r3, [r7, #64]	; 0x40
   2dfa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2dfaa:	2b09      	cmp	r3, #9
   2dfac:	d80b      	bhi.n	2dfc6 <chk_mounted+0x3a>
   2dfae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2dfb0:	3301      	adds	r3, #1
   2dfb2:	781b      	ldrb	r3, [r3, #0]
   2dfb4:	2b3a      	cmp	r3, #58	; 0x3a
   2dfb6:	d106      	bne.n	2dfc6 <chk_mounted+0x3a>
   2dfb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2dfba:	3302      	adds	r3, #2
   2dfbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   2dfbe:	68fb      	ldr	r3, [r7, #12]
   2dfc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2dfc2:	601a      	str	r2, [r3, #0]
   2dfc4:	e001      	b.n	2dfca <chk_mounted+0x3e>
   2dfc6:	2300      	movs	r3, #0
   2dfc8:	643b      	str	r3, [r7, #64]	; 0x40
   2dfca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2dfcc:	2b07      	cmp	r3, #7
   2dfce:	d901      	bls.n	2dfd4 <chk_mounted+0x48>
   2dfd0:	230b      	movs	r3, #11
   2dfd2:	e2af      	b.n	2e534 <chk_mounted+0x5a8>
   2dfd4:	4bc5      	ldr	r3, [pc, #788]	; (2e2ec <chk_mounted+0x360>)
   2dfd6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2dfd8:	0092      	lsls	r2, r2, #2
   2dfda:	58d3      	ldr	r3, [r2, r3]
   2dfdc:	62bb      	str	r3, [r7, #40]	; 0x28
   2dfde:	68bb      	ldr	r3, [r7, #8]
   2dfe0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2dfe2:	601a      	str	r2, [r3, #0]
   2dfe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dfe6:	2b00      	cmp	r3, #0
   2dfe8:	d101      	bne.n	2dfee <chk_mounted+0x62>
   2dfea:	230c      	movs	r3, #12
   2dfec:	e2a2      	b.n	2e534 <chk_mounted+0x5a8>
   2dfee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dff0:	781b      	ldrb	r3, [r3, #0]
   2dff2:	2b00      	cmp	r3, #0
   2dff4:	d01c      	beq.n	2e030 <chk_mounted+0xa4>
   2dff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dff8:	785b      	ldrb	r3, [r3, #1]
   2dffa:	2227      	movs	r2, #39	; 0x27
   2dffc:	18bc      	adds	r4, r7, r2
   2dffe:	0018      	movs	r0, r3
   2e000:	4bbb      	ldr	r3, [pc, #748]	; (2e2f0 <chk_mounted+0x364>)
   2e002:	4798      	blx	r3
   2e004:	0003      	movs	r3, r0
   2e006:	7023      	strb	r3, [r4, #0]
   2e008:	2327      	movs	r3, #39	; 0x27
   2e00a:	18fb      	adds	r3, r7, r3
   2e00c:	781b      	ldrb	r3, [r3, #0]
   2e00e:	2201      	movs	r2, #1
   2e010:	4013      	ands	r3, r2
   2e012:	d10d      	bne.n	2e030 <chk_mounted+0xa4>
   2e014:	1dfb      	adds	r3, r7, #7
   2e016:	781b      	ldrb	r3, [r3, #0]
   2e018:	2b00      	cmp	r3, #0
   2e01a:	d007      	beq.n	2e02c <chk_mounted+0xa0>
   2e01c:	2327      	movs	r3, #39	; 0x27
   2e01e:	18fb      	adds	r3, r7, r3
   2e020:	781b      	ldrb	r3, [r3, #0]
   2e022:	2204      	movs	r2, #4
   2e024:	4013      	ands	r3, r2
   2e026:	d001      	beq.n	2e02c <chk_mounted+0xa0>
   2e028:	230a      	movs	r3, #10
   2e02a:	e283      	b.n	2e534 <chk_mounted+0x5a8>
   2e02c:	2300      	movs	r3, #0
   2e02e:	e281      	b.n	2e534 <chk_mounted+0x5a8>
   2e030:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e032:	2200      	movs	r2, #0
   2e034:	701a      	strb	r2, [r3, #0]
   2e036:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e038:	b2da      	uxtb	r2, r3
   2e03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e03c:	705a      	strb	r2, [r3, #1]
   2e03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e040:	785b      	ldrb	r3, [r3, #1]
   2e042:	2227      	movs	r2, #39	; 0x27
   2e044:	18bc      	adds	r4, r7, r2
   2e046:	0018      	movs	r0, r3
   2e048:	4baa      	ldr	r3, [pc, #680]	; (2e2f4 <chk_mounted+0x368>)
   2e04a:	4798      	blx	r3
   2e04c:	0003      	movs	r3, r0
   2e04e:	7023      	strb	r3, [r4, #0]
   2e050:	2327      	movs	r3, #39	; 0x27
   2e052:	18fb      	adds	r3, r7, r3
   2e054:	781b      	ldrb	r3, [r3, #0]
   2e056:	2201      	movs	r2, #1
   2e058:	4013      	ands	r3, r2
   2e05a:	d001      	beq.n	2e060 <chk_mounted+0xd4>
   2e05c:	2303      	movs	r3, #3
   2e05e:	e269      	b.n	2e534 <chk_mounted+0x5a8>
   2e060:	1dfb      	adds	r3, r7, #7
   2e062:	781b      	ldrb	r3, [r3, #0]
   2e064:	2b00      	cmp	r3, #0
   2e066:	d007      	beq.n	2e078 <chk_mounted+0xec>
   2e068:	2327      	movs	r3, #39	; 0x27
   2e06a:	18fb      	adds	r3, r7, r3
   2e06c:	781b      	ldrb	r3, [r3, #0]
   2e06e:	2204      	movs	r2, #4
   2e070:	4013      	ands	r3, r2
   2e072:	d001      	beq.n	2e078 <chk_mounted+0xec>
   2e074:	230a      	movs	r3, #10
   2e076:	e25d      	b.n	2e534 <chk_mounted+0x5a8>
   2e078:	2300      	movs	r3, #0
   2e07a:	63fb      	str	r3, [r7, #60]	; 0x3c
   2e07c:	2347      	movs	r3, #71	; 0x47
   2e07e:	18fc      	adds	r4, r7, r3
   2e080:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2e082:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e084:	0011      	movs	r1, r2
   2e086:	0018      	movs	r0, r3
   2e088:	4b9b      	ldr	r3, [pc, #620]	; (2e2f8 <chk_mounted+0x36c>)
   2e08a:	4798      	blx	r3
   2e08c:	0003      	movs	r3, r0
   2e08e:	7023      	strb	r3, [r4, #0]
   2e090:	2347      	movs	r3, #71	; 0x47
   2e092:	18fb      	adds	r3, r7, r3
   2e094:	781b      	ldrb	r3, [r3, #0]
   2e096:	2b01      	cmp	r3, #1
   2e098:	d13b      	bne.n	2e112 <chk_mounted+0x186>
   2e09a:	2346      	movs	r3, #70	; 0x46
   2e09c:	18fb      	adds	r3, r7, r3
   2e09e:	2200      	movs	r2, #0
   2e0a0:	701a      	strb	r2, [r3, #0]
   2e0a2:	2346      	movs	r3, #70	; 0x46
   2e0a4:	18fb      	adds	r3, r7, r3
   2e0a6:	781b      	ldrb	r3, [r3, #0]
   2e0a8:	2b00      	cmp	r3, #0
   2e0aa:	d006      	beq.n	2e0ba <chk_mounted+0x12e>
   2e0ac:	2346      	movs	r3, #70	; 0x46
   2e0ae:	18fb      	adds	r3, r7, r3
   2e0b0:	781a      	ldrb	r2, [r3, #0]
   2e0b2:	2346      	movs	r3, #70	; 0x46
   2e0b4:	18fb      	adds	r3, r7, r3
   2e0b6:	3a01      	subs	r2, #1
   2e0b8:	701a      	strb	r2, [r3, #0]
   2e0ba:	2346      	movs	r3, #70	; 0x46
   2e0bc:	18fb      	adds	r3, r7, r3
   2e0be:	781b      	ldrb	r3, [r3, #0]
   2e0c0:	011b      	lsls	r3, r3, #4
   2e0c2:	33bf      	adds	r3, #191	; 0xbf
   2e0c4:	33ff      	adds	r3, #255	; 0xff
   2e0c6:	3330      	adds	r3, #48	; 0x30
   2e0c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e0ca:	18d3      	adds	r3, r2, r3
   2e0cc:	623b      	str	r3, [r7, #32]
   2e0ce:	6a3b      	ldr	r3, [r7, #32]
   2e0d0:	3304      	adds	r3, #4
   2e0d2:	781b      	ldrb	r3, [r3, #0]
   2e0d4:	2b00      	cmp	r3, #0
   2e0d6:	d01c      	beq.n	2e112 <chk_mounted+0x186>
   2e0d8:	6a3b      	ldr	r3, [r7, #32]
   2e0da:	330b      	adds	r3, #11
   2e0dc:	781b      	ldrb	r3, [r3, #0]
   2e0de:	061a      	lsls	r2, r3, #24
   2e0e0:	6a3b      	ldr	r3, [r7, #32]
   2e0e2:	330a      	adds	r3, #10
   2e0e4:	781b      	ldrb	r3, [r3, #0]
   2e0e6:	041b      	lsls	r3, r3, #16
   2e0e8:	4313      	orrs	r3, r2
   2e0ea:	6a3a      	ldr	r2, [r7, #32]
   2e0ec:	3209      	adds	r2, #9
   2e0ee:	7812      	ldrb	r2, [r2, #0]
   2e0f0:	0212      	lsls	r2, r2, #8
   2e0f2:	4313      	orrs	r3, r2
   2e0f4:	6a3a      	ldr	r2, [r7, #32]
   2e0f6:	3208      	adds	r2, #8
   2e0f8:	7812      	ldrb	r2, [r2, #0]
   2e0fa:	4313      	orrs	r3, r2
   2e0fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   2e0fe:	2347      	movs	r3, #71	; 0x47
   2e100:	18fc      	adds	r4, r7, r3
   2e102:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2e104:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e106:	0011      	movs	r1, r2
   2e108:	0018      	movs	r0, r3
   2e10a:	4b7b      	ldr	r3, [pc, #492]	; (2e2f8 <chk_mounted+0x36c>)
   2e10c:	4798      	blx	r3
   2e10e:	0003      	movs	r3, r0
   2e110:	7023      	strb	r3, [r4, #0]
   2e112:	2347      	movs	r3, #71	; 0x47
   2e114:	18fb      	adds	r3, r7, r3
   2e116:	781b      	ldrb	r3, [r3, #0]
   2e118:	2b03      	cmp	r3, #3
   2e11a:	d101      	bne.n	2e120 <chk_mounted+0x194>
   2e11c:	2301      	movs	r3, #1
   2e11e:	e209      	b.n	2e534 <chk_mounted+0x5a8>
   2e120:	2347      	movs	r3, #71	; 0x47
   2e122:	18fb      	adds	r3, r7, r3
   2e124:	781b      	ldrb	r3, [r3, #0]
   2e126:	2b00      	cmp	r3, #0
   2e128:	d001      	beq.n	2e12e <chk_mounted+0x1a2>
   2e12a:	230d      	movs	r3, #13
   2e12c:	e202      	b.n	2e534 <chk_mounted+0x5a8>
   2e12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e130:	223c      	movs	r2, #60	; 0x3c
   2e132:	5c9b      	ldrb	r3, [r3, r2]
   2e134:	021b      	lsls	r3, r3, #8
   2e136:	b21a      	sxth	r2, r3
   2e138:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e13a:	213b      	movs	r1, #59	; 0x3b
   2e13c:	5c5b      	ldrb	r3, [r3, r1]
   2e13e:	b21b      	sxth	r3, r3
   2e140:	4313      	orrs	r3, r2
   2e142:	b21a      	sxth	r2, r3
   2e144:	2380      	movs	r3, #128	; 0x80
   2e146:	009b      	lsls	r3, r3, #2
   2e148:	429a      	cmp	r2, r3
   2e14a:	d001      	beq.n	2e150 <chk_mounted+0x1c4>
   2e14c:	230d      	movs	r3, #13
   2e14e:	e1f1      	b.n	2e534 <chk_mounted+0x5a8>
   2e150:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e152:	2247      	movs	r2, #71	; 0x47
   2e154:	5c9b      	ldrb	r3, [r3, r2]
   2e156:	021b      	lsls	r3, r3, #8
   2e158:	b21a      	sxth	r2, r3
   2e15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e15c:	2146      	movs	r1, #70	; 0x46
   2e15e:	5c5b      	ldrb	r3, [r3, r1]
   2e160:	b21b      	sxth	r3, r3
   2e162:	4313      	orrs	r3, r2
   2e164:	b21b      	sxth	r3, r3
   2e166:	b29b      	uxth	r3, r3
   2e168:	63bb      	str	r3, [r7, #56]	; 0x38
   2e16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2e16c:	2b00      	cmp	r3, #0
   2e16e:	d112      	bne.n	2e196 <chk_mounted+0x20a>
   2e170:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e172:	2257      	movs	r2, #87	; 0x57
   2e174:	5c9b      	ldrb	r3, [r3, r2]
   2e176:	061a      	lsls	r2, r3, #24
   2e178:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e17a:	2156      	movs	r1, #86	; 0x56
   2e17c:	5c5b      	ldrb	r3, [r3, r1]
   2e17e:	041b      	lsls	r3, r3, #16
   2e180:	4313      	orrs	r3, r2
   2e182:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e184:	2155      	movs	r1, #85	; 0x55
   2e186:	5c52      	ldrb	r2, [r2, r1]
   2e188:	0212      	lsls	r2, r2, #8
   2e18a:	4313      	orrs	r3, r2
   2e18c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e18e:	2154      	movs	r1, #84	; 0x54
   2e190:	5c52      	ldrb	r2, [r2, r1]
   2e192:	4313      	orrs	r3, r2
   2e194:	63bb      	str	r3, [r7, #56]	; 0x38
   2e196:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e198:	6bba      	ldr	r2, [r7, #56]	; 0x38
   2e19a:	61da      	str	r2, [r3, #28]
   2e19c:	231f      	movs	r3, #31
   2e19e:	18fb      	adds	r3, r7, r3
   2e1a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e1a2:	2140      	movs	r1, #64	; 0x40
   2e1a4:	5c52      	ldrb	r2, [r2, r1]
   2e1a6:	701a      	strb	r2, [r3, #0]
   2e1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e1aa:	221f      	movs	r2, #31
   2e1ac:	18ba      	adds	r2, r7, r2
   2e1ae:	7812      	ldrb	r2, [r2, #0]
   2e1b0:	70da      	strb	r2, [r3, #3]
   2e1b2:	231f      	movs	r3, #31
   2e1b4:	18fb      	adds	r3, r7, r3
   2e1b6:	781b      	ldrb	r3, [r3, #0]
   2e1b8:	2b01      	cmp	r3, #1
   2e1ba:	d006      	beq.n	2e1ca <chk_mounted+0x23e>
   2e1bc:	231f      	movs	r3, #31
   2e1be:	18fb      	adds	r3, r7, r3
   2e1c0:	781b      	ldrb	r3, [r3, #0]
   2e1c2:	2b02      	cmp	r3, #2
   2e1c4:	d001      	beq.n	2e1ca <chk_mounted+0x23e>
   2e1c6:	230d      	movs	r3, #13
   2e1c8:	e1b4      	b.n	2e534 <chk_mounted+0x5a8>
   2e1ca:	231f      	movs	r3, #31
   2e1cc:	18fb      	adds	r3, r7, r3
   2e1ce:	781a      	ldrb	r2, [r3, #0]
   2e1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2e1d2:	4353      	muls	r3, r2
   2e1d4:	63bb      	str	r3, [r7, #56]	; 0x38
   2e1d6:	231f      	movs	r3, #31
   2e1d8:	18fb      	adds	r3, r7, r3
   2e1da:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e1dc:	213d      	movs	r1, #61	; 0x3d
   2e1de:	5c52      	ldrb	r2, [r2, r1]
   2e1e0:	701a      	strb	r2, [r3, #0]
   2e1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e1e4:	221f      	movs	r2, #31
   2e1e6:	18ba      	adds	r2, r7, r2
   2e1e8:	7812      	ldrb	r2, [r2, #0]
   2e1ea:	709a      	strb	r2, [r3, #2]
   2e1ec:	231f      	movs	r3, #31
   2e1ee:	18fb      	adds	r3, r7, r3
   2e1f0:	781b      	ldrb	r3, [r3, #0]
   2e1f2:	2b00      	cmp	r3, #0
   2e1f4:	d008      	beq.n	2e208 <chk_mounted+0x27c>
   2e1f6:	231f      	movs	r3, #31
   2e1f8:	18fb      	adds	r3, r7, r3
   2e1fa:	781b      	ldrb	r3, [r3, #0]
   2e1fc:	221f      	movs	r2, #31
   2e1fe:	18ba      	adds	r2, r7, r2
   2e200:	7812      	ldrb	r2, [r2, #0]
   2e202:	3a01      	subs	r2, #1
   2e204:	4013      	ands	r3, r2
   2e206:	d001      	beq.n	2e20c <chk_mounted+0x280>
   2e208:	230d      	movs	r3, #13
   2e20a:	e193      	b.n	2e534 <chk_mounted+0x5a8>
   2e20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e20e:	2242      	movs	r2, #66	; 0x42
   2e210:	5c9b      	ldrb	r3, [r3, r2]
   2e212:	021b      	lsls	r3, r3, #8
   2e214:	b21a      	sxth	r2, r3
   2e216:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e218:	2141      	movs	r1, #65	; 0x41
   2e21a:	5c5b      	ldrb	r3, [r3, r1]
   2e21c:	b21b      	sxth	r3, r3
   2e21e:	4313      	orrs	r3, r2
   2e220:	b21b      	sxth	r3, r3
   2e222:	b29a      	uxth	r2, r3
   2e224:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e226:	811a      	strh	r2, [r3, #8]
   2e228:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e22a:	891b      	ldrh	r3, [r3, #8]
   2e22c:	220f      	movs	r2, #15
   2e22e:	4013      	ands	r3, r2
   2e230:	b29b      	uxth	r3, r3
   2e232:	2b00      	cmp	r3, #0
   2e234:	d001      	beq.n	2e23a <chk_mounted+0x2ae>
   2e236:	230d      	movs	r3, #13
   2e238:	e17c      	b.n	2e534 <chk_mounted+0x5a8>
   2e23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e23c:	2244      	movs	r2, #68	; 0x44
   2e23e:	5c9b      	ldrb	r3, [r3, r2]
   2e240:	021b      	lsls	r3, r3, #8
   2e242:	b21a      	sxth	r2, r3
   2e244:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e246:	2143      	movs	r1, #67	; 0x43
   2e248:	5c5b      	ldrb	r3, [r3, r1]
   2e24a:	b21b      	sxth	r3, r3
   2e24c:	4313      	orrs	r3, r2
   2e24e:	b21b      	sxth	r3, r3
   2e250:	b29b      	uxth	r3, r3
   2e252:	637b      	str	r3, [r7, #52]	; 0x34
   2e254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2e256:	2b00      	cmp	r3, #0
   2e258:	d112      	bne.n	2e280 <chk_mounted+0x2f4>
   2e25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e25c:	2253      	movs	r2, #83	; 0x53
   2e25e:	5c9b      	ldrb	r3, [r3, r2]
   2e260:	061a      	lsls	r2, r3, #24
   2e262:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e264:	2152      	movs	r1, #82	; 0x52
   2e266:	5c5b      	ldrb	r3, [r3, r1]
   2e268:	041b      	lsls	r3, r3, #16
   2e26a:	4313      	orrs	r3, r2
   2e26c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e26e:	2151      	movs	r1, #81	; 0x51
   2e270:	5c52      	ldrb	r2, [r2, r1]
   2e272:	0212      	lsls	r2, r2, #8
   2e274:	4313      	orrs	r3, r2
   2e276:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e278:	2150      	movs	r1, #80	; 0x50
   2e27a:	5c52      	ldrb	r2, [r2, r1]
   2e27c:	4313      	orrs	r3, r2
   2e27e:	637b      	str	r3, [r7, #52]	; 0x34
   2e280:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e282:	223f      	movs	r2, #63	; 0x3f
   2e284:	5c9b      	ldrb	r3, [r3, r2]
   2e286:	021b      	lsls	r3, r3, #8
   2e288:	b21a      	sxth	r2, r3
   2e28a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e28c:	213e      	movs	r1, #62	; 0x3e
   2e28e:	5c5b      	ldrb	r3, [r3, r1]
   2e290:	b21b      	sxth	r3, r3
   2e292:	4313      	orrs	r3, r2
   2e294:	b21a      	sxth	r2, r3
   2e296:	231c      	movs	r3, #28
   2e298:	18fb      	adds	r3, r7, r3
   2e29a:	801a      	strh	r2, [r3, #0]
   2e29c:	231c      	movs	r3, #28
   2e29e:	18fb      	adds	r3, r7, r3
   2e2a0:	881b      	ldrh	r3, [r3, #0]
   2e2a2:	2b00      	cmp	r3, #0
   2e2a4:	d101      	bne.n	2e2aa <chk_mounted+0x31e>
   2e2a6:	230d      	movs	r3, #13
   2e2a8:	e144      	b.n	2e534 <chk_mounted+0x5a8>
   2e2aa:	231c      	movs	r3, #28
   2e2ac:	18fb      	adds	r3, r7, r3
   2e2ae:	881a      	ldrh	r2, [r3, #0]
   2e2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2e2b2:	18d3      	adds	r3, r2, r3
   2e2b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e2b6:	8912      	ldrh	r2, [r2, #8]
   2e2b8:	0912      	lsrs	r2, r2, #4
   2e2ba:	b292      	uxth	r2, r2
   2e2bc:	189b      	adds	r3, r3, r2
   2e2be:	61bb      	str	r3, [r7, #24]
   2e2c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2e2c2:	69bb      	ldr	r3, [r7, #24]
   2e2c4:	429a      	cmp	r2, r3
   2e2c6:	d201      	bcs.n	2e2cc <chk_mounted+0x340>
   2e2c8:	230d      	movs	r3, #13
   2e2ca:	e133      	b.n	2e534 <chk_mounted+0x5a8>
   2e2cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2e2ce:	69bb      	ldr	r3, [r7, #24]
   2e2d0:	1ad2      	subs	r2, r2, r3
   2e2d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e2d4:	789b      	ldrb	r3, [r3, #2]
   2e2d6:	0019      	movs	r1, r3
   2e2d8:	4b08      	ldr	r3, [pc, #32]	; (2e2fc <chk_mounted+0x370>)
   2e2da:	0010      	movs	r0, r2
   2e2dc:	4798      	blx	r3
   2e2de:	0003      	movs	r3, r0
   2e2e0:	617b      	str	r3, [r7, #20]
   2e2e2:	697b      	ldr	r3, [r7, #20]
   2e2e4:	2b00      	cmp	r3, #0
   2e2e6:	d10b      	bne.n	2e300 <chk_mounted+0x374>
   2e2e8:	230d      	movs	r3, #13
   2e2ea:	e123      	b.n	2e534 <chk_mounted+0x5a8>
   2e2ec:	20003f34 	.word	0x20003f34
   2e2f0:	0002c0e9 	.word	0x0002c0e9
   2e2f4:	0002c065 	.word	0x0002c065
   2e2f8:	0002deb9 	.word	0x0002deb9
   2e2fc:	0003372d 	.word	0x0003372d
   2e300:	2347      	movs	r3, #71	; 0x47
   2e302:	18fb      	adds	r3, r7, r3
   2e304:	2201      	movs	r2, #1
   2e306:	701a      	strb	r2, [r3, #0]
   2e308:	697b      	ldr	r3, [r7, #20]
   2e30a:	4a8c      	ldr	r2, [pc, #560]	; (2e53c <chk_mounted+0x5b0>)
   2e30c:	4293      	cmp	r3, r2
   2e30e:	d903      	bls.n	2e318 <chk_mounted+0x38c>
   2e310:	2347      	movs	r3, #71	; 0x47
   2e312:	18fb      	adds	r3, r7, r3
   2e314:	2202      	movs	r2, #2
   2e316:	701a      	strb	r2, [r3, #0]
   2e318:	697b      	ldr	r3, [r7, #20]
   2e31a:	4a89      	ldr	r2, [pc, #548]	; (2e540 <chk_mounted+0x5b4>)
   2e31c:	4293      	cmp	r3, r2
   2e31e:	d903      	bls.n	2e328 <chk_mounted+0x39c>
   2e320:	2347      	movs	r3, #71	; 0x47
   2e322:	18fb      	adds	r3, r7, r3
   2e324:	2203      	movs	r2, #3
   2e326:	701a      	strb	r2, [r3, #0]
   2e328:	697b      	ldr	r3, [r7, #20]
   2e32a:	1c9a      	adds	r2, r3, #2
   2e32c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e32e:	619a      	str	r2, [r3, #24]
   2e330:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2e332:	69bb      	ldr	r3, [r7, #24]
   2e334:	18d2      	adds	r2, r2, r3
   2e336:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e338:	629a      	str	r2, [r3, #40]	; 0x28
   2e33a:	231c      	movs	r3, #28
   2e33c:	18fb      	adds	r3, r7, r3
   2e33e:	881a      	ldrh	r2, [r3, #0]
   2e340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2e342:	18d2      	adds	r2, r2, r3
   2e344:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e346:	621a      	str	r2, [r3, #32]
   2e348:	2347      	movs	r3, #71	; 0x47
   2e34a:	18fb      	adds	r3, r7, r3
   2e34c:	781b      	ldrb	r3, [r3, #0]
   2e34e:	2b03      	cmp	r3, #3
   2e350:	d11e      	bne.n	2e390 <chk_mounted+0x404>
   2e352:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e354:	891b      	ldrh	r3, [r3, #8]
   2e356:	2b00      	cmp	r3, #0
   2e358:	d001      	beq.n	2e35e <chk_mounted+0x3d2>
   2e35a:	230d      	movs	r3, #13
   2e35c:	e0ea      	b.n	2e534 <chk_mounted+0x5a8>
   2e35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e360:	225f      	movs	r2, #95	; 0x5f
   2e362:	5c9b      	ldrb	r3, [r3, r2]
   2e364:	061a      	lsls	r2, r3, #24
   2e366:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e368:	215e      	movs	r1, #94	; 0x5e
   2e36a:	5c5b      	ldrb	r3, [r3, r1]
   2e36c:	041b      	lsls	r3, r3, #16
   2e36e:	4313      	orrs	r3, r2
   2e370:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e372:	215d      	movs	r1, #93	; 0x5d
   2e374:	5c52      	ldrb	r2, [r2, r1]
   2e376:	0212      	lsls	r2, r2, #8
   2e378:	4313      	orrs	r3, r2
   2e37a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e37c:	215c      	movs	r1, #92	; 0x5c
   2e37e:	5c52      	ldrb	r2, [r2, r1]
   2e380:	431a      	orrs	r2, r3
   2e382:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e384:	625a      	str	r2, [r3, #36]	; 0x24
   2e386:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e388:	699b      	ldr	r3, [r3, #24]
   2e38a:	009b      	lsls	r3, r3, #2
   2e38c:	633b      	str	r3, [r7, #48]	; 0x30
   2e38e:	e020      	b.n	2e3d2 <chk_mounted+0x446>
   2e390:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e392:	891b      	ldrh	r3, [r3, #8]
   2e394:	2b00      	cmp	r3, #0
   2e396:	d101      	bne.n	2e39c <chk_mounted+0x410>
   2e398:	230d      	movs	r3, #13
   2e39a:	e0cb      	b.n	2e534 <chk_mounted+0x5a8>
   2e39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e39e:	6a1a      	ldr	r2, [r3, #32]
   2e3a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2e3a2:	18d2      	adds	r2, r2, r3
   2e3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e3a6:	625a      	str	r2, [r3, #36]	; 0x24
   2e3a8:	2347      	movs	r3, #71	; 0x47
   2e3aa:	18fb      	adds	r3, r7, r3
   2e3ac:	781b      	ldrb	r3, [r3, #0]
   2e3ae:	2b02      	cmp	r3, #2
   2e3b0:	d103      	bne.n	2e3ba <chk_mounted+0x42e>
   2e3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e3b4:	699b      	ldr	r3, [r3, #24]
   2e3b6:	005b      	lsls	r3, r3, #1
   2e3b8:	e00a      	b.n	2e3d0 <chk_mounted+0x444>
   2e3ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e3bc:	699a      	ldr	r2, [r3, #24]
   2e3be:	0013      	movs	r3, r2
   2e3c0:	005b      	lsls	r3, r3, #1
   2e3c2:	189b      	adds	r3, r3, r2
   2e3c4:	085a      	lsrs	r2, r3, #1
   2e3c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e3c8:	699b      	ldr	r3, [r3, #24]
   2e3ca:	2101      	movs	r1, #1
   2e3cc:	400b      	ands	r3, r1
   2e3ce:	18d3      	adds	r3, r2, r3
   2e3d0:	633b      	str	r3, [r7, #48]	; 0x30
   2e3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e3d4:	69da      	ldr	r2, [r3, #28]
   2e3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e3d8:	495a      	ldr	r1, [pc, #360]	; (2e544 <chk_mounted+0x5b8>)
   2e3da:	468c      	mov	ip, r1
   2e3dc:	4463      	add	r3, ip
   2e3de:	0a5b      	lsrs	r3, r3, #9
   2e3e0:	429a      	cmp	r2, r3
   2e3e2:	d201      	bcs.n	2e3e8 <chk_mounted+0x45c>
   2e3e4:	230d      	movs	r3, #13
   2e3e6:	e0a5      	b.n	2e534 <chk_mounted+0x5a8>
   2e3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e3ea:	2201      	movs	r2, #1
   2e3ec:	4252      	negs	r2, r2
   2e3ee:	611a      	str	r2, [r3, #16]
   2e3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e3f2:	2200      	movs	r2, #0
   2e3f4:	60da      	str	r2, [r3, #12]
   2e3f6:	2347      	movs	r3, #71	; 0x47
   2e3f8:	18fb      	adds	r3, r7, r3
   2e3fa:	781b      	ldrb	r3, [r3, #0]
   2e3fc:	2b03      	cmp	r3, #3
   2e3fe:	d000      	beq.n	2e402 <chk_mounted+0x476>
   2e400:	e082      	b.n	2e508 <chk_mounted+0x57c>
   2e402:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e404:	2200      	movs	r2, #0
   2e406:	715a      	strb	r2, [r3, #5]
   2e408:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e40a:	2261      	movs	r2, #97	; 0x61
   2e40c:	5c9b      	ldrb	r3, [r3, r2]
   2e40e:	021b      	lsls	r3, r3, #8
   2e410:	b21a      	sxth	r2, r3
   2e412:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e414:	2160      	movs	r1, #96	; 0x60
   2e416:	5c5b      	ldrb	r3, [r3, r1]
   2e418:	b21b      	sxth	r3, r3
   2e41a:	4313      	orrs	r3, r2
   2e41c:	b21b      	sxth	r3, r3
   2e41e:	b29b      	uxth	r3, r3
   2e420:	001a      	movs	r2, r3
   2e422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2e424:	18d2      	adds	r2, r2, r3
   2e426:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e428:	615a      	str	r2, [r3, #20]
   2e42a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e42c:	7858      	ldrb	r0, [r3, #1]
   2e42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e430:	3330      	adds	r3, #48	; 0x30
   2e432:	0019      	movs	r1, r3
   2e434:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e436:	695a      	ldr	r2, [r3, #20]
   2e438:	2301      	movs	r3, #1
   2e43a:	4c43      	ldr	r4, [pc, #268]	; (2e548 <chk_mounted+0x5bc>)
   2e43c:	47a0      	blx	r4
   2e43e:	1e03      	subs	r3, r0, #0
   2e440:	d162      	bne.n	2e508 <chk_mounted+0x57c>
   2e442:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e444:	4a41      	ldr	r2, [pc, #260]	; (2e54c <chk_mounted+0x5c0>)
   2e446:	5c9b      	ldrb	r3, [r3, r2]
   2e448:	021b      	lsls	r3, r3, #8
   2e44a:	b21a      	sxth	r2, r3
   2e44c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e44e:	4940      	ldr	r1, [pc, #256]	; (2e550 <chk_mounted+0x5c4>)
   2e450:	5c5b      	ldrb	r3, [r3, r1]
   2e452:	b21b      	sxth	r3, r3
   2e454:	4313      	orrs	r3, r2
   2e456:	b21b      	sxth	r3, r3
   2e458:	4a3e      	ldr	r2, [pc, #248]	; (2e554 <chk_mounted+0x5c8>)
   2e45a:	4293      	cmp	r3, r2
   2e45c:	d154      	bne.n	2e508 <chk_mounted+0x57c>
   2e45e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e460:	2233      	movs	r2, #51	; 0x33
   2e462:	5c9b      	ldrb	r3, [r3, r2]
   2e464:	061a      	lsls	r2, r3, #24
   2e466:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e468:	2132      	movs	r1, #50	; 0x32
   2e46a:	5c5b      	ldrb	r3, [r3, r1]
   2e46c:	041b      	lsls	r3, r3, #16
   2e46e:	4313      	orrs	r3, r2
   2e470:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e472:	2131      	movs	r1, #49	; 0x31
   2e474:	5c52      	ldrb	r2, [r2, r1]
   2e476:	0212      	lsls	r2, r2, #8
   2e478:	4313      	orrs	r3, r2
   2e47a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e47c:	2130      	movs	r1, #48	; 0x30
   2e47e:	5c52      	ldrb	r2, [r2, r1]
   2e480:	4313      	orrs	r3, r2
   2e482:	4a35      	ldr	r2, [pc, #212]	; (2e558 <chk_mounted+0x5cc>)
   2e484:	4293      	cmp	r3, r2
   2e486:	d13f      	bne.n	2e508 <chk_mounted+0x57c>
   2e488:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e48a:	4a34      	ldr	r2, [pc, #208]	; (2e55c <chk_mounted+0x5d0>)
   2e48c:	5c9b      	ldrb	r3, [r3, r2]
   2e48e:	061a      	lsls	r2, r3, #24
   2e490:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e492:	4933      	ldr	r1, [pc, #204]	; (2e560 <chk_mounted+0x5d4>)
   2e494:	5c5b      	ldrb	r3, [r3, r1]
   2e496:	041b      	lsls	r3, r3, #16
   2e498:	4313      	orrs	r3, r2
   2e49a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e49c:	4931      	ldr	r1, [pc, #196]	; (2e564 <chk_mounted+0x5d8>)
   2e49e:	5c52      	ldrb	r2, [r2, r1]
   2e4a0:	0212      	lsls	r2, r2, #8
   2e4a2:	4313      	orrs	r3, r2
   2e4a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2e4a6:	2285      	movs	r2, #133	; 0x85
   2e4a8:	0092      	lsls	r2, r2, #2
   2e4aa:	5c8a      	ldrb	r2, [r1, r2]
   2e4ac:	4313      	orrs	r3, r2
   2e4ae:	4a2e      	ldr	r2, [pc, #184]	; (2e568 <chk_mounted+0x5dc>)
   2e4b0:	4293      	cmp	r3, r2
   2e4b2:	d129      	bne.n	2e508 <chk_mounted+0x57c>
   2e4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e4b6:	4a2d      	ldr	r2, [pc, #180]	; (2e56c <chk_mounted+0x5e0>)
   2e4b8:	5c9b      	ldrb	r3, [r3, r2]
   2e4ba:	061a      	lsls	r2, r3, #24
   2e4bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e4be:	492c      	ldr	r1, [pc, #176]	; (2e570 <chk_mounted+0x5e4>)
   2e4c0:	5c5b      	ldrb	r3, [r3, r1]
   2e4c2:	041b      	lsls	r3, r3, #16
   2e4c4:	4313      	orrs	r3, r2
   2e4c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e4c8:	492a      	ldr	r1, [pc, #168]	; (2e574 <chk_mounted+0x5e8>)
   2e4ca:	5c52      	ldrb	r2, [r2, r1]
   2e4cc:	0212      	lsls	r2, r2, #8
   2e4ce:	4313      	orrs	r3, r2
   2e4d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2e4d2:	2287      	movs	r2, #135	; 0x87
   2e4d4:	0092      	lsls	r2, r2, #2
   2e4d6:	5c8a      	ldrb	r2, [r1, r2]
   2e4d8:	431a      	orrs	r2, r3
   2e4da:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e4dc:	60da      	str	r2, [r3, #12]
   2e4de:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e4e0:	4a25      	ldr	r2, [pc, #148]	; (2e578 <chk_mounted+0x5ec>)
   2e4e2:	5c9b      	ldrb	r3, [r3, r2]
   2e4e4:	061a      	lsls	r2, r3, #24
   2e4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e4e8:	4924      	ldr	r1, [pc, #144]	; (2e57c <chk_mounted+0x5f0>)
   2e4ea:	5c5b      	ldrb	r3, [r3, r1]
   2e4ec:	041b      	lsls	r3, r3, #16
   2e4ee:	4313      	orrs	r3, r2
   2e4f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e4f2:	4923      	ldr	r1, [pc, #140]	; (2e580 <chk_mounted+0x5f4>)
   2e4f4:	5c52      	ldrb	r2, [r2, r1]
   2e4f6:	0212      	lsls	r2, r2, #8
   2e4f8:	4313      	orrs	r3, r2
   2e4fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2e4fc:	2286      	movs	r2, #134	; 0x86
   2e4fe:	0092      	lsls	r2, r2, #2
   2e500:	5c8a      	ldrb	r2, [r1, r2]
   2e502:	431a      	orrs	r2, r3
   2e504:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e506:	611a      	str	r2, [r3, #16]
   2e508:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e50a:	2247      	movs	r2, #71	; 0x47
   2e50c:	18ba      	adds	r2, r7, r2
   2e50e:	7812      	ldrb	r2, [r2, #0]
   2e510:	701a      	strb	r2, [r3, #0]
   2e512:	4b1c      	ldr	r3, [pc, #112]	; (2e584 <chk_mounted+0x5f8>)
   2e514:	881b      	ldrh	r3, [r3, #0]
   2e516:	3301      	adds	r3, #1
   2e518:	b29a      	uxth	r2, r3
   2e51a:	4b1a      	ldr	r3, [pc, #104]	; (2e584 <chk_mounted+0x5f8>)
   2e51c:	801a      	strh	r2, [r3, #0]
   2e51e:	4b19      	ldr	r3, [pc, #100]	; (2e584 <chk_mounted+0x5f8>)
   2e520:	881a      	ldrh	r2, [r3, #0]
   2e522:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e524:	80da      	strh	r2, [r3, #6]
   2e526:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e528:	2200      	movs	r2, #0
   2e52a:	62da      	str	r2, [r3, #44]	; 0x2c
   2e52c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e52e:	2200      	movs	r2, #0
   2e530:	711a      	strb	r2, [r3, #4]
   2e532:	2300      	movs	r3, #0
   2e534:	0018      	movs	r0, r3
   2e536:	46bd      	mov	sp, r7
   2e538:	b013      	add	sp, #76	; 0x4c
   2e53a:	bd90      	pop	{r4, r7, pc}
   2e53c:	00000ff5 	.word	0x00000ff5
   2e540:	0000fff5 	.word	0x0000fff5
   2e544:	000001ff 	.word	0x000001ff
   2e548:	0002c121 	.word	0x0002c121
   2e54c:	0000022f 	.word	0x0000022f
   2e550:	0000022e 	.word	0x0000022e
   2e554:	ffffaa55 	.word	0xffffaa55
   2e558:	41615252 	.word	0x41615252
   2e55c:	00000217 	.word	0x00000217
   2e560:	00000216 	.word	0x00000216
   2e564:	00000215 	.word	0x00000215
   2e568:	61417272 	.word	0x61417272
   2e56c:	0000021f 	.word	0x0000021f
   2e570:	0000021e 	.word	0x0000021e
   2e574:	0000021d 	.word	0x0000021d
   2e578:	0000021b 	.word	0x0000021b
   2e57c:	0000021a 	.word	0x0000021a
   2e580:	00000219 	.word	0x00000219
   2e584:	20003f54 	.word	0x20003f54

0002e588 <validate>:
   2e588:	b580      	push	{r7, lr}
   2e58a:	b082      	sub	sp, #8
   2e58c:	af00      	add	r7, sp, #0
   2e58e:	6078      	str	r0, [r7, #4]
   2e590:	000a      	movs	r2, r1
   2e592:	1cbb      	adds	r3, r7, #2
   2e594:	801a      	strh	r2, [r3, #0]
   2e596:	687b      	ldr	r3, [r7, #4]
   2e598:	2b00      	cmp	r3, #0
   2e59a:	d009      	beq.n	2e5b0 <validate+0x28>
   2e59c:	687b      	ldr	r3, [r7, #4]
   2e59e:	781b      	ldrb	r3, [r3, #0]
   2e5a0:	2b00      	cmp	r3, #0
   2e5a2:	d005      	beq.n	2e5b0 <validate+0x28>
   2e5a4:	687b      	ldr	r3, [r7, #4]
   2e5a6:	88db      	ldrh	r3, [r3, #6]
   2e5a8:	1cba      	adds	r2, r7, #2
   2e5aa:	8812      	ldrh	r2, [r2, #0]
   2e5ac:	429a      	cmp	r2, r3
   2e5ae:	d001      	beq.n	2e5b4 <validate+0x2c>
   2e5b0:	2309      	movs	r3, #9
   2e5b2:	e00c      	b.n	2e5ce <validate+0x46>
   2e5b4:	687b      	ldr	r3, [r7, #4]
   2e5b6:	785b      	ldrb	r3, [r3, #1]
   2e5b8:	0018      	movs	r0, r3
   2e5ba:	4b07      	ldr	r3, [pc, #28]	; (2e5d8 <validate+0x50>)
   2e5bc:	4798      	blx	r3
   2e5be:	0003      	movs	r3, r0
   2e5c0:	001a      	movs	r2, r3
   2e5c2:	2301      	movs	r3, #1
   2e5c4:	4013      	ands	r3, r2
   2e5c6:	d001      	beq.n	2e5cc <validate+0x44>
   2e5c8:	2303      	movs	r3, #3
   2e5ca:	e000      	b.n	2e5ce <validate+0x46>
   2e5cc:	2300      	movs	r3, #0
   2e5ce:	0018      	movs	r0, r3
   2e5d0:	46bd      	mov	sp, r7
   2e5d2:	b002      	add	sp, #8
   2e5d4:	bd80      	pop	{r7, pc}
   2e5d6:	46c0      	nop			; (mov r8, r8)
   2e5d8:	0002c0e9 	.word	0x0002c0e9

0002e5dc <f_mount>:
   2e5dc:	b580      	push	{r7, lr}
   2e5de:	b084      	sub	sp, #16
   2e5e0:	af00      	add	r7, sp, #0
   2e5e2:	0002      	movs	r2, r0
   2e5e4:	6039      	str	r1, [r7, #0]
   2e5e6:	1dfb      	adds	r3, r7, #7
   2e5e8:	701a      	strb	r2, [r3, #0]
   2e5ea:	1dfb      	adds	r3, r7, #7
   2e5ec:	781b      	ldrb	r3, [r3, #0]
   2e5ee:	2b07      	cmp	r3, #7
   2e5f0:	d901      	bls.n	2e5f6 <f_mount+0x1a>
   2e5f2:	230b      	movs	r3, #11
   2e5f4:	e018      	b.n	2e628 <f_mount+0x4c>
   2e5f6:	1dfb      	adds	r3, r7, #7
   2e5f8:	781a      	ldrb	r2, [r3, #0]
   2e5fa:	4b0d      	ldr	r3, [pc, #52]	; (2e630 <f_mount+0x54>)
   2e5fc:	0092      	lsls	r2, r2, #2
   2e5fe:	58d3      	ldr	r3, [r2, r3]
   2e600:	60fb      	str	r3, [r7, #12]
   2e602:	68fb      	ldr	r3, [r7, #12]
   2e604:	2b00      	cmp	r3, #0
   2e606:	d002      	beq.n	2e60e <f_mount+0x32>
   2e608:	68fb      	ldr	r3, [r7, #12]
   2e60a:	2200      	movs	r2, #0
   2e60c:	701a      	strb	r2, [r3, #0]
   2e60e:	683b      	ldr	r3, [r7, #0]
   2e610:	2b00      	cmp	r3, #0
   2e612:	d002      	beq.n	2e61a <f_mount+0x3e>
   2e614:	683b      	ldr	r3, [r7, #0]
   2e616:	2200      	movs	r2, #0
   2e618:	701a      	strb	r2, [r3, #0]
   2e61a:	1dfb      	adds	r3, r7, #7
   2e61c:	781a      	ldrb	r2, [r3, #0]
   2e61e:	4b04      	ldr	r3, [pc, #16]	; (2e630 <f_mount+0x54>)
   2e620:	0092      	lsls	r2, r2, #2
   2e622:	6839      	ldr	r1, [r7, #0]
   2e624:	50d1      	str	r1, [r2, r3]
   2e626:	2300      	movs	r3, #0
   2e628:	0018      	movs	r0, r3
   2e62a:	46bd      	mov	sp, r7
   2e62c:	b004      	add	sp, #16
   2e62e:	bd80      	pop	{r7, pc}
   2e630:	20003f34 	.word	0x20003f34

0002e634 <f_open>:
   2e634:	b590      	push	{r4, r7, lr}
   2e636:	4ce5      	ldr	r4, [pc, #916]	; (2e9cc <f_open+0x398>)
   2e638:	44a5      	add	sp, r4
   2e63a:	af00      	add	r7, sp, #0
   2e63c:	60f8      	str	r0, [r7, #12]
   2e63e:	60b9      	str	r1, [r7, #8]
   2e640:	4be3      	ldr	r3, [pc, #908]	; (2e9d0 <f_open+0x39c>)
   2e642:	2194      	movs	r1, #148	; 0x94
   2e644:	0089      	lsls	r1, r1, #2
   2e646:	468c      	mov	ip, r1
   2e648:	44bc      	add	ip, r7
   2e64a:	4463      	add	r3, ip
   2e64c:	701a      	strb	r2, [r3, #0]
   2e64e:	68fb      	ldr	r3, [r7, #12]
   2e650:	2200      	movs	r2, #0
   2e652:	601a      	str	r2, [r3, #0]
   2e654:	4bde      	ldr	r3, [pc, #888]	; (2e9d0 <f_open+0x39c>)
   2e656:	2294      	movs	r2, #148	; 0x94
   2e658:	0092      	lsls	r2, r2, #2
   2e65a:	4694      	mov	ip, r2
   2e65c:	44bc      	add	ip, r7
   2e65e:	4463      	add	r3, ip
   2e660:	4adb      	ldr	r2, [pc, #876]	; (2e9d0 <f_open+0x39c>)
   2e662:	2194      	movs	r1, #148	; 0x94
   2e664:	0089      	lsls	r1, r1, #2
   2e666:	468c      	mov	ip, r1
   2e668:	44bc      	add	ip, r7
   2e66a:	4462      	add	r2, ip
   2e66c:	7812      	ldrb	r2, [r2, #0]
   2e66e:	211f      	movs	r1, #31
   2e670:	400a      	ands	r2, r1
   2e672:	701a      	strb	r2, [r3, #0]
   2e674:	4bd6      	ldr	r3, [pc, #856]	; (2e9d0 <f_open+0x39c>)
   2e676:	2294      	movs	r2, #148	; 0x94
   2e678:	0092      	lsls	r2, r2, #2
   2e67a:	4694      	mov	ip, r2
   2e67c:	44bc      	add	ip, r7
   2e67e:	4463      	add	r3, ip
   2e680:	781b      	ldrb	r3, [r3, #0]
   2e682:	2201      	movs	r2, #1
   2e684:	4393      	bics	r3, r2
   2e686:	b2da      	uxtb	r2, r3
   2e688:	4bd2      	ldr	r3, [pc, #840]	; (2e9d4 <f_open+0x3a0>)
   2e68a:	18fc      	adds	r4, r7, r3
   2e68c:	2387      	movs	r3, #135	; 0x87
   2e68e:	009b      	lsls	r3, r3, #2
   2e690:	18f9      	adds	r1, r7, r3
   2e692:	2308      	movs	r3, #8
   2e694:	18fb      	adds	r3, r7, r3
   2e696:	0018      	movs	r0, r3
   2e698:	4bcf      	ldr	r3, [pc, #828]	; (2e9d8 <f_open+0x3a4>)
   2e69a:	4798      	blx	r3
   2e69c:	0003      	movs	r3, r0
   2e69e:	7023      	strb	r3, [r4, #0]
   2e6a0:	2387      	movs	r3, #135	; 0x87
   2e6a2:	009b      	lsls	r3, r3, #2
   2e6a4:	18fb      	adds	r3, r7, r3
   2e6a6:	2284      	movs	r2, #132	; 0x84
   2e6a8:	0092      	lsls	r2, r2, #2
   2e6aa:	18ba      	adds	r2, r7, r2
   2e6ac:	619a      	str	r2, [r3, #24]
   2e6ae:	2387      	movs	r3, #135	; 0x87
   2e6b0:	009b      	lsls	r3, r3, #2
   2e6b2:	18fb      	adds	r3, r7, r3
   2e6b4:	2210      	movs	r2, #16
   2e6b6:	18ba      	adds	r2, r7, r2
   2e6b8:	61da      	str	r2, [r3, #28]
   2e6ba:	4bc6      	ldr	r3, [pc, #792]	; (2e9d4 <f_open+0x3a0>)
   2e6bc:	18fb      	adds	r3, r7, r3
   2e6be:	781b      	ldrb	r3, [r3, #0]
   2e6c0:	2b00      	cmp	r3, #0
   2e6c2:	d10b      	bne.n	2e6dc <f_open+0xa8>
   2e6c4:	68ba      	ldr	r2, [r7, #8]
   2e6c6:	4bc3      	ldr	r3, [pc, #780]	; (2e9d4 <f_open+0x3a0>)
   2e6c8:	18fc      	adds	r4, r7, r3
   2e6ca:	2387      	movs	r3, #135	; 0x87
   2e6cc:	009b      	lsls	r3, r3, #2
   2e6ce:	18fb      	adds	r3, r7, r3
   2e6d0:	0011      	movs	r1, r2
   2e6d2:	0018      	movs	r0, r3
   2e6d4:	4bc1      	ldr	r3, [pc, #772]	; (2e9dc <f_open+0x3a8>)
   2e6d6:	4798      	blx	r3
   2e6d8:	0003      	movs	r3, r0
   2e6da:	7023      	strb	r3, [r4, #0]
   2e6dc:	2387      	movs	r3, #135	; 0x87
   2e6de:	009b      	lsls	r3, r3, #2
   2e6e0:	18fb      	adds	r3, r7, r3
   2e6e2:	695b      	ldr	r3, [r3, #20]
   2e6e4:	2292      	movs	r2, #146	; 0x92
   2e6e6:	0092      	lsls	r2, r2, #2
   2e6e8:	18ba      	adds	r2, r7, r2
   2e6ea:	6013      	str	r3, [r2, #0]
   2e6ec:	4bb9      	ldr	r3, [pc, #740]	; (2e9d4 <f_open+0x3a0>)
   2e6ee:	18fb      	adds	r3, r7, r3
   2e6f0:	781b      	ldrb	r3, [r3, #0]
   2e6f2:	2b00      	cmp	r3, #0
   2e6f4:	d109      	bne.n	2e70a <f_open+0xd6>
   2e6f6:	2392      	movs	r3, #146	; 0x92
   2e6f8:	009b      	lsls	r3, r3, #2
   2e6fa:	18fb      	adds	r3, r7, r3
   2e6fc:	681b      	ldr	r3, [r3, #0]
   2e6fe:	2b00      	cmp	r3, #0
   2e700:	d103      	bne.n	2e70a <f_open+0xd6>
   2e702:	4bb4      	ldr	r3, [pc, #720]	; (2e9d4 <f_open+0x3a0>)
   2e704:	18fb      	adds	r3, r7, r3
   2e706:	2206      	movs	r2, #6
   2e708:	701a      	strb	r2, [r3, #0]
   2e70a:	4bb1      	ldr	r3, [pc, #708]	; (2e9d0 <f_open+0x39c>)
   2e70c:	2294      	movs	r2, #148	; 0x94
   2e70e:	0092      	lsls	r2, r2, #2
   2e710:	4694      	mov	ip, r2
   2e712:	44bc      	add	ip, r7
   2e714:	4463      	add	r3, ip
   2e716:	781b      	ldrb	r3, [r3, #0]
   2e718:	221c      	movs	r2, #28
   2e71a:	4013      	ands	r3, r2
   2e71c:	d100      	bne.n	2e720 <f_open+0xec>
   2e71e:	e141      	b.n	2e9a4 <f_open+0x370>
   2e720:	4bac      	ldr	r3, [pc, #688]	; (2e9d4 <f_open+0x3a0>)
   2e722:	18fb      	adds	r3, r7, r3
   2e724:	781b      	ldrb	r3, [r3, #0]
   2e726:	2b00      	cmp	r3, #0
   2e728:	d027      	beq.n	2e77a <f_open+0x146>
   2e72a:	4baa      	ldr	r3, [pc, #680]	; (2e9d4 <f_open+0x3a0>)
   2e72c:	18fb      	adds	r3, r7, r3
   2e72e:	781b      	ldrb	r3, [r3, #0]
   2e730:	2b04      	cmp	r3, #4
   2e732:	d109      	bne.n	2e748 <f_open+0x114>
   2e734:	4ba7      	ldr	r3, [pc, #668]	; (2e9d4 <f_open+0x3a0>)
   2e736:	18fc      	adds	r4, r7, r3
   2e738:	2387      	movs	r3, #135	; 0x87
   2e73a:	009b      	lsls	r3, r3, #2
   2e73c:	18fb      	adds	r3, r7, r3
   2e73e:	0018      	movs	r0, r3
   2e740:	4ba7      	ldr	r3, [pc, #668]	; (2e9e0 <f_open+0x3ac>)
   2e742:	4798      	blx	r3
   2e744:	0003      	movs	r3, r0
   2e746:	7023      	strb	r3, [r4, #0]
   2e748:	4ba1      	ldr	r3, [pc, #644]	; (2e9d0 <f_open+0x39c>)
   2e74a:	2294      	movs	r2, #148	; 0x94
   2e74c:	0092      	lsls	r2, r2, #2
   2e74e:	4694      	mov	ip, r2
   2e750:	44bc      	add	ip, r7
   2e752:	4463      	add	r3, ip
   2e754:	4a9e      	ldr	r2, [pc, #632]	; (2e9d0 <f_open+0x39c>)
   2e756:	2194      	movs	r1, #148	; 0x94
   2e758:	0089      	lsls	r1, r1, #2
   2e75a:	468c      	mov	ip, r1
   2e75c:	44bc      	add	ip, r7
   2e75e:	4462      	add	r2, ip
   2e760:	7812      	ldrb	r2, [r2, #0]
   2e762:	2108      	movs	r1, #8
   2e764:	430a      	orrs	r2, r1
   2e766:	701a      	strb	r2, [r3, #0]
   2e768:	2387      	movs	r3, #135	; 0x87
   2e76a:	009b      	lsls	r3, r3, #2
   2e76c:	18fb      	adds	r3, r7, r3
   2e76e:	695b      	ldr	r3, [r3, #20]
   2e770:	2292      	movs	r2, #146	; 0x92
   2e772:	0092      	lsls	r2, r2, #2
   2e774:	18ba      	adds	r2, r7, r2
   2e776:	6013      	str	r3, [r2, #0]
   2e778:	e01c      	b.n	2e7b4 <f_open+0x180>
   2e77a:	2392      	movs	r3, #146	; 0x92
   2e77c:	009b      	lsls	r3, r3, #2
   2e77e:	18fb      	adds	r3, r7, r3
   2e780:	681b      	ldr	r3, [r3, #0]
   2e782:	330b      	adds	r3, #11
   2e784:	781b      	ldrb	r3, [r3, #0]
   2e786:	001a      	movs	r2, r3
   2e788:	2311      	movs	r3, #17
   2e78a:	4013      	ands	r3, r2
   2e78c:	d004      	beq.n	2e798 <f_open+0x164>
   2e78e:	4b91      	ldr	r3, [pc, #580]	; (2e9d4 <f_open+0x3a0>)
   2e790:	18fb      	adds	r3, r7, r3
   2e792:	2207      	movs	r2, #7
   2e794:	701a      	strb	r2, [r3, #0]
   2e796:	e00d      	b.n	2e7b4 <f_open+0x180>
   2e798:	4b8d      	ldr	r3, [pc, #564]	; (2e9d0 <f_open+0x39c>)
   2e79a:	2294      	movs	r2, #148	; 0x94
   2e79c:	0092      	lsls	r2, r2, #2
   2e79e:	4694      	mov	ip, r2
   2e7a0:	44bc      	add	ip, r7
   2e7a2:	4463      	add	r3, ip
   2e7a4:	781b      	ldrb	r3, [r3, #0]
   2e7a6:	2204      	movs	r2, #4
   2e7a8:	4013      	ands	r3, r2
   2e7aa:	d003      	beq.n	2e7b4 <f_open+0x180>
   2e7ac:	4b89      	ldr	r3, [pc, #548]	; (2e9d4 <f_open+0x3a0>)
   2e7ae:	18fb      	adds	r3, r7, r3
   2e7b0:	2208      	movs	r2, #8
   2e7b2:	701a      	strb	r2, [r3, #0]
   2e7b4:	4b87      	ldr	r3, [pc, #540]	; (2e9d4 <f_open+0x3a0>)
   2e7b6:	18fb      	adds	r3, r7, r3
   2e7b8:	781b      	ldrb	r3, [r3, #0]
   2e7ba:	2b00      	cmp	r3, #0
   2e7bc:	d000      	beq.n	2e7c0 <f_open+0x18c>
   2e7be:	e12f      	b.n	2ea20 <f_open+0x3ec>
   2e7c0:	4b83      	ldr	r3, [pc, #524]	; (2e9d0 <f_open+0x39c>)
   2e7c2:	2294      	movs	r2, #148	; 0x94
   2e7c4:	0092      	lsls	r2, r2, #2
   2e7c6:	4694      	mov	ip, r2
   2e7c8:	44bc      	add	ip, r7
   2e7ca:	4463      	add	r3, ip
   2e7cc:	781b      	ldrb	r3, [r3, #0]
   2e7ce:	2208      	movs	r2, #8
   2e7d0:	4013      	ands	r3, r2
   2e7d2:	d100      	bne.n	2e7d6 <f_open+0x1a2>
   2e7d4:	e124      	b.n	2ea20 <f_open+0x3ec>
   2e7d6:	4b83      	ldr	r3, [pc, #524]	; (2e9e4 <f_open+0x3b0>)
   2e7d8:	4798      	blx	r3
   2e7da:	0003      	movs	r3, r0
   2e7dc:	2291      	movs	r2, #145	; 0x91
   2e7de:	0092      	lsls	r2, r2, #2
   2e7e0:	18ba      	adds	r2, r7, r2
   2e7e2:	6013      	str	r3, [r2, #0]
   2e7e4:	2392      	movs	r3, #146	; 0x92
   2e7e6:	009b      	lsls	r3, r3, #2
   2e7e8:	18fb      	adds	r3, r7, r3
   2e7ea:	681b      	ldr	r3, [r3, #0]
   2e7ec:	330e      	adds	r3, #14
   2e7ee:	2291      	movs	r2, #145	; 0x91
   2e7f0:	0092      	lsls	r2, r2, #2
   2e7f2:	18ba      	adds	r2, r7, r2
   2e7f4:	6812      	ldr	r2, [r2, #0]
   2e7f6:	b2d2      	uxtb	r2, r2
   2e7f8:	701a      	strb	r2, [r3, #0]
   2e7fa:	2392      	movs	r3, #146	; 0x92
   2e7fc:	009b      	lsls	r3, r3, #2
   2e7fe:	18fb      	adds	r3, r7, r3
   2e800:	681b      	ldr	r3, [r3, #0]
   2e802:	330f      	adds	r3, #15
   2e804:	2291      	movs	r2, #145	; 0x91
   2e806:	0092      	lsls	r2, r2, #2
   2e808:	18ba      	adds	r2, r7, r2
   2e80a:	6812      	ldr	r2, [r2, #0]
   2e80c:	b292      	uxth	r2, r2
   2e80e:	0a12      	lsrs	r2, r2, #8
   2e810:	b292      	uxth	r2, r2
   2e812:	b2d2      	uxtb	r2, r2
   2e814:	701a      	strb	r2, [r3, #0]
   2e816:	2392      	movs	r3, #146	; 0x92
   2e818:	009b      	lsls	r3, r3, #2
   2e81a:	18fb      	adds	r3, r7, r3
   2e81c:	681b      	ldr	r3, [r3, #0]
   2e81e:	3310      	adds	r3, #16
   2e820:	2291      	movs	r2, #145	; 0x91
   2e822:	0092      	lsls	r2, r2, #2
   2e824:	18ba      	adds	r2, r7, r2
   2e826:	6812      	ldr	r2, [r2, #0]
   2e828:	0c12      	lsrs	r2, r2, #16
   2e82a:	b2d2      	uxtb	r2, r2
   2e82c:	701a      	strb	r2, [r3, #0]
   2e82e:	2392      	movs	r3, #146	; 0x92
   2e830:	009b      	lsls	r3, r3, #2
   2e832:	18fb      	adds	r3, r7, r3
   2e834:	681b      	ldr	r3, [r3, #0]
   2e836:	3311      	adds	r3, #17
   2e838:	2291      	movs	r2, #145	; 0x91
   2e83a:	0092      	lsls	r2, r2, #2
   2e83c:	18ba      	adds	r2, r7, r2
   2e83e:	6812      	ldr	r2, [r2, #0]
   2e840:	0e12      	lsrs	r2, r2, #24
   2e842:	b2d2      	uxtb	r2, r2
   2e844:	701a      	strb	r2, [r3, #0]
   2e846:	2392      	movs	r3, #146	; 0x92
   2e848:	009b      	lsls	r3, r3, #2
   2e84a:	18fb      	adds	r3, r7, r3
   2e84c:	681b      	ldr	r3, [r3, #0]
   2e84e:	330b      	adds	r3, #11
   2e850:	2200      	movs	r2, #0
   2e852:	701a      	strb	r2, [r3, #0]
   2e854:	2392      	movs	r3, #146	; 0x92
   2e856:	009b      	lsls	r3, r3, #2
   2e858:	18fb      	adds	r3, r7, r3
   2e85a:	681b      	ldr	r3, [r3, #0]
   2e85c:	331c      	adds	r3, #28
   2e85e:	2200      	movs	r2, #0
   2e860:	701a      	strb	r2, [r3, #0]
   2e862:	2392      	movs	r3, #146	; 0x92
   2e864:	009b      	lsls	r3, r3, #2
   2e866:	18fb      	adds	r3, r7, r3
   2e868:	681b      	ldr	r3, [r3, #0]
   2e86a:	331d      	adds	r3, #29
   2e86c:	2200      	movs	r2, #0
   2e86e:	701a      	strb	r2, [r3, #0]
   2e870:	2392      	movs	r3, #146	; 0x92
   2e872:	009b      	lsls	r3, r3, #2
   2e874:	18fb      	adds	r3, r7, r3
   2e876:	681b      	ldr	r3, [r3, #0]
   2e878:	331e      	adds	r3, #30
   2e87a:	2200      	movs	r2, #0
   2e87c:	701a      	strb	r2, [r3, #0]
   2e87e:	2392      	movs	r3, #146	; 0x92
   2e880:	009b      	lsls	r3, r3, #2
   2e882:	18fb      	adds	r3, r7, r3
   2e884:	681b      	ldr	r3, [r3, #0]
   2e886:	331f      	adds	r3, #31
   2e888:	2200      	movs	r2, #0
   2e88a:	701a      	strb	r2, [r3, #0]
   2e88c:	2392      	movs	r3, #146	; 0x92
   2e88e:	009b      	lsls	r3, r3, #2
   2e890:	18fb      	adds	r3, r7, r3
   2e892:	681b      	ldr	r3, [r3, #0]
   2e894:	3315      	adds	r3, #21
   2e896:	781b      	ldrb	r3, [r3, #0]
   2e898:	021b      	lsls	r3, r3, #8
   2e89a:	b21a      	sxth	r2, r3
   2e89c:	2392      	movs	r3, #146	; 0x92
   2e89e:	009b      	lsls	r3, r3, #2
   2e8a0:	18fb      	adds	r3, r7, r3
   2e8a2:	681b      	ldr	r3, [r3, #0]
   2e8a4:	3314      	adds	r3, #20
   2e8a6:	781b      	ldrb	r3, [r3, #0]
   2e8a8:	b21b      	sxth	r3, r3
   2e8aa:	4313      	orrs	r3, r2
   2e8ac:	b21b      	sxth	r3, r3
   2e8ae:	b29b      	uxth	r3, r3
   2e8b0:	041b      	lsls	r3, r3, #16
   2e8b2:	2292      	movs	r2, #146	; 0x92
   2e8b4:	0092      	lsls	r2, r2, #2
   2e8b6:	18ba      	adds	r2, r7, r2
   2e8b8:	6812      	ldr	r2, [r2, #0]
   2e8ba:	321b      	adds	r2, #27
   2e8bc:	7812      	ldrb	r2, [r2, #0]
   2e8be:	0212      	lsls	r2, r2, #8
   2e8c0:	b211      	sxth	r1, r2
   2e8c2:	2292      	movs	r2, #146	; 0x92
   2e8c4:	0092      	lsls	r2, r2, #2
   2e8c6:	18ba      	adds	r2, r7, r2
   2e8c8:	6812      	ldr	r2, [r2, #0]
   2e8ca:	321a      	adds	r2, #26
   2e8cc:	7812      	ldrb	r2, [r2, #0]
   2e8ce:	b212      	sxth	r2, r2
   2e8d0:	430a      	orrs	r2, r1
   2e8d2:	b212      	sxth	r2, r2
   2e8d4:	b292      	uxth	r2, r2
   2e8d6:	4313      	orrs	r3, r2
   2e8d8:	2290      	movs	r2, #144	; 0x90
   2e8da:	0092      	lsls	r2, r2, #2
   2e8dc:	18ba      	adds	r2, r7, r2
   2e8de:	6013      	str	r3, [r2, #0]
   2e8e0:	2392      	movs	r3, #146	; 0x92
   2e8e2:	009b      	lsls	r3, r3, #2
   2e8e4:	18fb      	adds	r3, r7, r3
   2e8e6:	681b      	ldr	r3, [r3, #0]
   2e8e8:	331a      	adds	r3, #26
   2e8ea:	2200      	movs	r2, #0
   2e8ec:	701a      	strb	r2, [r3, #0]
   2e8ee:	2392      	movs	r3, #146	; 0x92
   2e8f0:	009b      	lsls	r3, r3, #2
   2e8f2:	18fb      	adds	r3, r7, r3
   2e8f4:	681b      	ldr	r3, [r3, #0]
   2e8f6:	331b      	adds	r3, #27
   2e8f8:	2200      	movs	r2, #0
   2e8fa:	701a      	strb	r2, [r3, #0]
   2e8fc:	2392      	movs	r3, #146	; 0x92
   2e8fe:	009b      	lsls	r3, r3, #2
   2e900:	18fb      	adds	r3, r7, r3
   2e902:	681b      	ldr	r3, [r3, #0]
   2e904:	3314      	adds	r3, #20
   2e906:	2200      	movs	r2, #0
   2e908:	701a      	strb	r2, [r3, #0]
   2e90a:	2392      	movs	r3, #146	; 0x92
   2e90c:	009b      	lsls	r3, r3, #2
   2e90e:	18fb      	adds	r3, r7, r3
   2e910:	681b      	ldr	r3, [r3, #0]
   2e912:	3315      	adds	r3, #21
   2e914:	2200      	movs	r2, #0
   2e916:	701a      	strb	r2, [r3, #0]
   2e918:	2387      	movs	r3, #135	; 0x87
   2e91a:	009b      	lsls	r3, r3, #2
   2e91c:	18fb      	adds	r3, r7, r3
   2e91e:	681b      	ldr	r3, [r3, #0]
   2e920:	2201      	movs	r2, #1
   2e922:	711a      	strb	r2, [r3, #4]
   2e924:	2390      	movs	r3, #144	; 0x90
   2e926:	009b      	lsls	r3, r3, #2
   2e928:	18fb      	adds	r3, r7, r3
   2e92a:	681b      	ldr	r3, [r3, #0]
   2e92c:	2b00      	cmp	r3, #0
   2e92e:	d100      	bne.n	2e932 <f_open+0x2fe>
   2e930:	e076      	b.n	2ea20 <f_open+0x3ec>
   2e932:	2387      	movs	r3, #135	; 0x87
   2e934:	009b      	lsls	r3, r3, #2
   2e936:	18fb      	adds	r3, r7, r3
   2e938:	681b      	ldr	r3, [r3, #0]
   2e93a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2e93c:	2291      	movs	r2, #145	; 0x91
   2e93e:	0092      	lsls	r2, r2, #2
   2e940:	18ba      	adds	r2, r7, r2
   2e942:	6013      	str	r3, [r2, #0]
   2e944:	2387      	movs	r3, #135	; 0x87
   2e946:	009b      	lsls	r3, r3, #2
   2e948:	18fb      	adds	r3, r7, r3
   2e94a:	681b      	ldr	r3, [r3, #0]
   2e94c:	4a21      	ldr	r2, [pc, #132]	; (2e9d4 <f_open+0x3a0>)
   2e94e:	18bc      	adds	r4, r7, r2
   2e950:	2290      	movs	r2, #144	; 0x90
   2e952:	0092      	lsls	r2, r2, #2
   2e954:	18ba      	adds	r2, r7, r2
   2e956:	6812      	ldr	r2, [r2, #0]
   2e958:	0011      	movs	r1, r2
   2e95a:	0018      	movs	r0, r3
   2e95c:	4b22      	ldr	r3, [pc, #136]	; (2e9e8 <f_open+0x3b4>)
   2e95e:	4798      	blx	r3
   2e960:	0003      	movs	r3, r0
   2e962:	7023      	strb	r3, [r4, #0]
   2e964:	4b1b      	ldr	r3, [pc, #108]	; (2e9d4 <f_open+0x3a0>)
   2e966:	18fb      	adds	r3, r7, r3
   2e968:	781b      	ldrb	r3, [r3, #0]
   2e96a:	2b00      	cmp	r3, #0
   2e96c:	d158      	bne.n	2ea20 <f_open+0x3ec>
   2e96e:	2387      	movs	r3, #135	; 0x87
   2e970:	009b      	lsls	r3, r3, #2
   2e972:	18fb      	adds	r3, r7, r3
   2e974:	681b      	ldr	r3, [r3, #0]
   2e976:	2290      	movs	r2, #144	; 0x90
   2e978:	0092      	lsls	r2, r2, #2
   2e97a:	18ba      	adds	r2, r7, r2
   2e97c:	6812      	ldr	r2, [r2, #0]
   2e97e:	3a01      	subs	r2, #1
   2e980:	60da      	str	r2, [r3, #12]
   2e982:	2387      	movs	r3, #135	; 0x87
   2e984:	009b      	lsls	r3, r3, #2
   2e986:	18fb      	adds	r3, r7, r3
   2e988:	681b      	ldr	r3, [r3, #0]
   2e98a:	4a12      	ldr	r2, [pc, #72]	; (2e9d4 <f_open+0x3a0>)
   2e98c:	18bc      	adds	r4, r7, r2
   2e98e:	2291      	movs	r2, #145	; 0x91
   2e990:	0092      	lsls	r2, r2, #2
   2e992:	18ba      	adds	r2, r7, r2
   2e994:	6812      	ldr	r2, [r2, #0]
   2e996:	0011      	movs	r1, r2
   2e998:	0018      	movs	r0, r3
   2e99a:	4b14      	ldr	r3, [pc, #80]	; (2e9ec <f_open+0x3b8>)
   2e99c:	4798      	blx	r3
   2e99e:	0003      	movs	r3, r0
   2e9a0:	7023      	strb	r3, [r4, #0]
   2e9a2:	e03d      	b.n	2ea20 <f_open+0x3ec>
   2e9a4:	4b0b      	ldr	r3, [pc, #44]	; (2e9d4 <f_open+0x3a0>)
   2e9a6:	18fb      	adds	r3, r7, r3
   2e9a8:	781b      	ldrb	r3, [r3, #0]
   2e9aa:	2b00      	cmp	r3, #0
   2e9ac:	d138      	bne.n	2ea20 <f_open+0x3ec>
   2e9ae:	2392      	movs	r3, #146	; 0x92
   2e9b0:	009b      	lsls	r3, r3, #2
   2e9b2:	18fb      	adds	r3, r7, r3
   2e9b4:	681b      	ldr	r3, [r3, #0]
   2e9b6:	330b      	adds	r3, #11
   2e9b8:	781b      	ldrb	r3, [r3, #0]
   2e9ba:	001a      	movs	r2, r3
   2e9bc:	2310      	movs	r3, #16
   2e9be:	4013      	ands	r3, r2
   2e9c0:	d016      	beq.n	2e9f0 <f_open+0x3bc>
   2e9c2:	4b04      	ldr	r3, [pc, #16]	; (2e9d4 <f_open+0x3a0>)
   2e9c4:	18fb      	adds	r3, r7, r3
   2e9c6:	2204      	movs	r2, #4
   2e9c8:	701a      	strb	r2, [r3, #0]
   2e9ca:	e029      	b.n	2ea20 <f_open+0x3ec>
   2e9cc:	fffffdac 	.word	0xfffffdac
   2e9d0:	fffffdb7 	.word	0xfffffdb7
   2e9d4:	0000024f 	.word	0x0000024f
   2e9d8:	0002df8d 	.word	0x0002df8d
   2e9dc:	0002dd81 	.word	0x0002dd81
   2e9e0:	0002d5d1 	.word	0x0002d5d1
   2e9e4:	0002c3c9 	.word	0x0002c3c9
   2e9e8:	0002cb4d 	.word	0x0002cb4d
   2e9ec:	0002c50d 	.word	0x0002c50d
   2e9f0:	4b5a      	ldr	r3, [pc, #360]	; (2eb5c <f_open+0x528>)
   2e9f2:	2294      	movs	r2, #148	; 0x94
   2e9f4:	0092      	lsls	r2, r2, #2
   2e9f6:	4694      	mov	ip, r2
   2e9f8:	44bc      	add	ip, r7
   2e9fa:	4463      	add	r3, ip
   2e9fc:	781b      	ldrb	r3, [r3, #0]
   2e9fe:	2202      	movs	r2, #2
   2ea00:	4013      	ands	r3, r2
   2ea02:	d00d      	beq.n	2ea20 <f_open+0x3ec>
   2ea04:	2392      	movs	r3, #146	; 0x92
   2ea06:	009b      	lsls	r3, r3, #2
   2ea08:	18fb      	adds	r3, r7, r3
   2ea0a:	681b      	ldr	r3, [r3, #0]
   2ea0c:	330b      	adds	r3, #11
   2ea0e:	781b      	ldrb	r3, [r3, #0]
   2ea10:	001a      	movs	r2, r3
   2ea12:	2301      	movs	r3, #1
   2ea14:	4013      	ands	r3, r2
   2ea16:	d003      	beq.n	2ea20 <f_open+0x3ec>
   2ea18:	4b51      	ldr	r3, [pc, #324]	; (2eb60 <f_open+0x52c>)
   2ea1a:	18fb      	adds	r3, r7, r3
   2ea1c:	2207      	movs	r2, #7
   2ea1e:	701a      	strb	r2, [r3, #0]
   2ea20:	4b4f      	ldr	r3, [pc, #316]	; (2eb60 <f_open+0x52c>)
   2ea22:	18fb      	adds	r3, r7, r3
   2ea24:	781b      	ldrb	r3, [r3, #0]
   2ea26:	2b00      	cmp	r3, #0
   2ea28:	d126      	bne.n	2ea78 <f_open+0x444>
   2ea2a:	4b4c      	ldr	r3, [pc, #304]	; (2eb5c <f_open+0x528>)
   2ea2c:	2294      	movs	r2, #148	; 0x94
   2ea2e:	0092      	lsls	r2, r2, #2
   2ea30:	4694      	mov	ip, r2
   2ea32:	44bc      	add	ip, r7
   2ea34:	4463      	add	r3, ip
   2ea36:	781b      	ldrb	r3, [r3, #0]
   2ea38:	2208      	movs	r2, #8
   2ea3a:	4013      	ands	r3, r2
   2ea3c:	d00f      	beq.n	2ea5e <f_open+0x42a>
   2ea3e:	4b47      	ldr	r3, [pc, #284]	; (2eb5c <f_open+0x528>)
   2ea40:	2294      	movs	r2, #148	; 0x94
   2ea42:	0092      	lsls	r2, r2, #2
   2ea44:	4694      	mov	ip, r2
   2ea46:	44bc      	add	ip, r7
   2ea48:	4463      	add	r3, ip
   2ea4a:	4a44      	ldr	r2, [pc, #272]	; (2eb5c <f_open+0x528>)
   2ea4c:	2194      	movs	r1, #148	; 0x94
   2ea4e:	0089      	lsls	r1, r1, #2
   2ea50:	468c      	mov	ip, r1
   2ea52:	44bc      	add	ip, r7
   2ea54:	4462      	add	r2, ip
   2ea56:	7812      	ldrb	r2, [r2, #0]
   2ea58:	2120      	movs	r1, #32
   2ea5a:	430a      	orrs	r2, r1
   2ea5c:	701a      	strb	r2, [r3, #0]
   2ea5e:	2387      	movs	r3, #135	; 0x87
   2ea60:	009b      	lsls	r3, r3, #2
   2ea62:	18fb      	adds	r3, r7, r3
   2ea64:	681b      	ldr	r3, [r3, #0]
   2ea66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2ea68:	68fb      	ldr	r3, [r7, #12]
   2ea6a:	61da      	str	r2, [r3, #28]
   2ea6c:	68fb      	ldr	r3, [r7, #12]
   2ea6e:	2292      	movs	r2, #146	; 0x92
   2ea70:	0092      	lsls	r2, r2, #2
   2ea72:	18ba      	adds	r2, r7, r2
   2ea74:	6812      	ldr	r2, [r2, #0]
   2ea76:	621a      	str	r2, [r3, #32]
   2ea78:	4b39      	ldr	r3, [pc, #228]	; (2eb60 <f_open+0x52c>)
   2ea7a:	18fb      	adds	r3, r7, r3
   2ea7c:	781b      	ldrb	r3, [r3, #0]
   2ea7e:	2b00      	cmp	r3, #0
   2ea80:	d163      	bne.n	2eb4a <f_open+0x516>
   2ea82:	68fb      	ldr	r3, [r7, #12]
   2ea84:	4a35      	ldr	r2, [pc, #212]	; (2eb5c <f_open+0x528>)
   2ea86:	2194      	movs	r1, #148	; 0x94
   2ea88:	0089      	lsls	r1, r1, #2
   2ea8a:	468c      	mov	ip, r1
   2ea8c:	44bc      	add	ip, r7
   2ea8e:	4462      	add	r2, ip
   2ea90:	7812      	ldrb	r2, [r2, #0]
   2ea92:	719a      	strb	r2, [r3, #6]
   2ea94:	2392      	movs	r3, #146	; 0x92
   2ea96:	009b      	lsls	r3, r3, #2
   2ea98:	18fb      	adds	r3, r7, r3
   2ea9a:	681b      	ldr	r3, [r3, #0]
   2ea9c:	3315      	adds	r3, #21
   2ea9e:	781b      	ldrb	r3, [r3, #0]
   2eaa0:	021b      	lsls	r3, r3, #8
   2eaa2:	b21a      	sxth	r2, r3
   2eaa4:	2392      	movs	r3, #146	; 0x92
   2eaa6:	009b      	lsls	r3, r3, #2
   2eaa8:	18fb      	adds	r3, r7, r3
   2eaaa:	681b      	ldr	r3, [r3, #0]
   2eaac:	3314      	adds	r3, #20
   2eaae:	781b      	ldrb	r3, [r3, #0]
   2eab0:	b21b      	sxth	r3, r3
   2eab2:	4313      	orrs	r3, r2
   2eab4:	b21b      	sxth	r3, r3
   2eab6:	b29b      	uxth	r3, r3
   2eab8:	041b      	lsls	r3, r3, #16
   2eaba:	2292      	movs	r2, #146	; 0x92
   2eabc:	0092      	lsls	r2, r2, #2
   2eabe:	18ba      	adds	r2, r7, r2
   2eac0:	6812      	ldr	r2, [r2, #0]
   2eac2:	321b      	adds	r2, #27
   2eac4:	7812      	ldrb	r2, [r2, #0]
   2eac6:	0212      	lsls	r2, r2, #8
   2eac8:	b211      	sxth	r1, r2
   2eaca:	2292      	movs	r2, #146	; 0x92
   2eacc:	0092      	lsls	r2, r2, #2
   2eace:	18ba      	adds	r2, r7, r2
   2ead0:	6812      	ldr	r2, [r2, #0]
   2ead2:	321a      	adds	r2, #26
   2ead4:	7812      	ldrb	r2, [r2, #0]
   2ead6:	b212      	sxth	r2, r2
   2ead8:	430a      	orrs	r2, r1
   2eada:	b212      	sxth	r2, r2
   2eadc:	b292      	uxth	r2, r2
   2eade:	431a      	orrs	r2, r3
   2eae0:	68fb      	ldr	r3, [r7, #12]
   2eae2:	611a      	str	r2, [r3, #16]
   2eae4:	2392      	movs	r3, #146	; 0x92
   2eae6:	009b      	lsls	r3, r3, #2
   2eae8:	18fb      	adds	r3, r7, r3
   2eaea:	681b      	ldr	r3, [r3, #0]
   2eaec:	331f      	adds	r3, #31
   2eaee:	781b      	ldrb	r3, [r3, #0]
   2eaf0:	061a      	lsls	r2, r3, #24
   2eaf2:	2392      	movs	r3, #146	; 0x92
   2eaf4:	009b      	lsls	r3, r3, #2
   2eaf6:	18fb      	adds	r3, r7, r3
   2eaf8:	681b      	ldr	r3, [r3, #0]
   2eafa:	331e      	adds	r3, #30
   2eafc:	781b      	ldrb	r3, [r3, #0]
   2eafe:	041b      	lsls	r3, r3, #16
   2eb00:	4313      	orrs	r3, r2
   2eb02:	2292      	movs	r2, #146	; 0x92
   2eb04:	0092      	lsls	r2, r2, #2
   2eb06:	18ba      	adds	r2, r7, r2
   2eb08:	6812      	ldr	r2, [r2, #0]
   2eb0a:	321d      	adds	r2, #29
   2eb0c:	7812      	ldrb	r2, [r2, #0]
   2eb0e:	0212      	lsls	r2, r2, #8
   2eb10:	4313      	orrs	r3, r2
   2eb12:	2292      	movs	r2, #146	; 0x92
   2eb14:	0092      	lsls	r2, r2, #2
   2eb16:	18ba      	adds	r2, r7, r2
   2eb18:	6812      	ldr	r2, [r2, #0]
   2eb1a:	321c      	adds	r2, #28
   2eb1c:	7812      	ldrb	r2, [r2, #0]
   2eb1e:	431a      	orrs	r2, r3
   2eb20:	68fb      	ldr	r3, [r7, #12]
   2eb22:	60da      	str	r2, [r3, #12]
   2eb24:	68fb      	ldr	r3, [r7, #12]
   2eb26:	2200      	movs	r2, #0
   2eb28:	609a      	str	r2, [r3, #8]
   2eb2a:	68fb      	ldr	r3, [r7, #12]
   2eb2c:	2200      	movs	r2, #0
   2eb2e:	619a      	str	r2, [r3, #24]
   2eb30:	2387      	movs	r3, #135	; 0x87
   2eb32:	009b      	lsls	r3, r3, #2
   2eb34:	18fb      	adds	r3, r7, r3
   2eb36:	681a      	ldr	r2, [r3, #0]
   2eb38:	68fb      	ldr	r3, [r7, #12]
   2eb3a:	601a      	str	r2, [r3, #0]
   2eb3c:	2387      	movs	r3, #135	; 0x87
   2eb3e:	009b      	lsls	r3, r3, #2
   2eb40:	18fb      	adds	r3, r7, r3
   2eb42:	681b      	ldr	r3, [r3, #0]
   2eb44:	88da      	ldrh	r2, [r3, #6]
   2eb46:	68fb      	ldr	r3, [r7, #12]
   2eb48:	809a      	strh	r2, [r3, #4]
   2eb4a:	4b05      	ldr	r3, [pc, #20]	; (2eb60 <f_open+0x52c>)
   2eb4c:	18fb      	adds	r3, r7, r3
   2eb4e:	781b      	ldrb	r3, [r3, #0]
   2eb50:	0018      	movs	r0, r3
   2eb52:	46bd      	mov	sp, r7
   2eb54:	2395      	movs	r3, #149	; 0x95
   2eb56:	009b      	lsls	r3, r3, #2
   2eb58:	449d      	add	sp, r3
   2eb5a:	bd90      	pop	{r4, r7, pc}
   2eb5c:	fffffdb7 	.word	0xfffffdb7
   2eb60:	0000024f 	.word	0x0000024f

0002eb64 <f_write>:
   2eb64:	b590      	push	{r4, r7, lr}
   2eb66:	b08b      	sub	sp, #44	; 0x2c
   2eb68:	af00      	add	r7, sp, #0
   2eb6a:	60f8      	str	r0, [r7, #12]
   2eb6c:	60b9      	str	r1, [r7, #8]
   2eb6e:	607a      	str	r2, [r7, #4]
   2eb70:	603b      	str	r3, [r7, #0]
   2eb72:	68bb      	ldr	r3, [r7, #8]
   2eb74:	61bb      	str	r3, [r7, #24]
   2eb76:	683b      	ldr	r3, [r7, #0]
   2eb78:	2200      	movs	r2, #0
   2eb7a:	601a      	str	r2, [r3, #0]
   2eb7c:	68fb      	ldr	r3, [r7, #12]
   2eb7e:	681a      	ldr	r2, [r3, #0]
   2eb80:	68fb      	ldr	r3, [r7, #12]
   2eb82:	889b      	ldrh	r3, [r3, #4]
   2eb84:	2117      	movs	r1, #23
   2eb86:	187c      	adds	r4, r7, r1
   2eb88:	0019      	movs	r1, r3
   2eb8a:	0010      	movs	r0, r2
   2eb8c:	4bc3      	ldr	r3, [pc, #780]	; (2ee9c <f_write+0x338>)
   2eb8e:	4798      	blx	r3
   2eb90:	0003      	movs	r3, r0
   2eb92:	7023      	strb	r3, [r4, #0]
   2eb94:	2317      	movs	r3, #23
   2eb96:	18fb      	adds	r3, r7, r3
   2eb98:	781b      	ldrb	r3, [r3, #0]
   2eb9a:	2b00      	cmp	r3, #0
   2eb9c:	d003      	beq.n	2eba6 <f_write+0x42>
   2eb9e:	2317      	movs	r3, #23
   2eba0:	18fb      	adds	r3, r7, r3
   2eba2:	781b      	ldrb	r3, [r3, #0]
   2eba4:	e176      	b.n	2ee94 <f_write+0x330>
   2eba6:	68fb      	ldr	r3, [r7, #12]
   2eba8:	799b      	ldrb	r3, [r3, #6]
   2ebaa:	b25b      	sxtb	r3, r3
   2ebac:	2b00      	cmp	r3, #0
   2ebae:	da01      	bge.n	2ebb4 <f_write+0x50>
   2ebb0:	2302      	movs	r3, #2
   2ebb2:	e16f      	b.n	2ee94 <f_write+0x330>
   2ebb4:	68fb      	ldr	r3, [r7, #12]
   2ebb6:	799b      	ldrb	r3, [r3, #6]
   2ebb8:	001a      	movs	r2, r3
   2ebba:	2302      	movs	r3, #2
   2ebbc:	4013      	ands	r3, r2
   2ebbe:	d101      	bne.n	2ebc4 <f_write+0x60>
   2ebc0:	2307      	movs	r3, #7
   2ebc2:	e167      	b.n	2ee94 <f_write+0x330>
   2ebc4:	68fb      	ldr	r3, [r7, #12]
   2ebc6:	68da      	ldr	r2, [r3, #12]
   2ebc8:	687b      	ldr	r3, [r7, #4]
   2ebca:	18d2      	adds	r2, r2, r3
   2ebcc:	68fb      	ldr	r3, [r7, #12]
   2ebce:	68db      	ldr	r3, [r3, #12]
   2ebd0:	429a      	cmp	r2, r3
   2ebd2:	d300      	bcc.n	2ebd6 <f_write+0x72>
   2ebd4:	e146      	b.n	2ee64 <f_write+0x300>
   2ebd6:	2300      	movs	r3, #0
   2ebd8:	607b      	str	r3, [r7, #4]
   2ebda:	e143      	b.n	2ee64 <f_write+0x300>
   2ebdc:	68fb      	ldr	r3, [r7, #12]
   2ebde:	689b      	ldr	r3, [r3, #8]
   2ebe0:	05db      	lsls	r3, r3, #23
   2ebe2:	0ddb      	lsrs	r3, r3, #23
   2ebe4:	d000      	beq.n	2ebe8 <f_write+0x84>
   2ebe6:	e0f6      	b.n	2edd6 <f_write+0x272>
   2ebe8:	68fb      	ldr	r3, [r7, #12]
   2ebea:	689b      	ldr	r3, [r3, #8]
   2ebec:	0a5b      	lsrs	r3, r3, #9
   2ebee:	b2da      	uxtb	r2, r3
   2ebf0:	68fb      	ldr	r3, [r7, #12]
   2ebf2:	681b      	ldr	r3, [r3, #0]
   2ebf4:	789b      	ldrb	r3, [r3, #2]
   2ebf6:	3b01      	subs	r3, #1
   2ebf8:	b2d9      	uxtb	r1, r3
   2ebfa:	2316      	movs	r3, #22
   2ebfc:	18fb      	adds	r3, r7, r3
   2ebfe:	400a      	ands	r2, r1
   2ec00:	701a      	strb	r2, [r3, #0]
   2ec02:	2316      	movs	r3, #22
   2ec04:	18fb      	adds	r3, r7, r3
   2ec06:	781b      	ldrb	r3, [r3, #0]
   2ec08:	2b00      	cmp	r3, #0
   2ec0a:	d140      	bne.n	2ec8e <f_write+0x12a>
   2ec0c:	68fb      	ldr	r3, [r7, #12]
   2ec0e:	689b      	ldr	r3, [r3, #8]
   2ec10:	2b00      	cmp	r3, #0
   2ec12:	d111      	bne.n	2ec38 <f_write+0xd4>
   2ec14:	68fb      	ldr	r3, [r7, #12]
   2ec16:	691b      	ldr	r3, [r3, #16]
   2ec18:	627b      	str	r3, [r7, #36]	; 0x24
   2ec1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ec1c:	2b00      	cmp	r3, #0
   2ec1e:	d115      	bne.n	2ec4c <f_write+0xe8>
   2ec20:	68fb      	ldr	r3, [r7, #12]
   2ec22:	681b      	ldr	r3, [r3, #0]
   2ec24:	2100      	movs	r1, #0
   2ec26:	0018      	movs	r0, r3
   2ec28:	4b9d      	ldr	r3, [pc, #628]	; (2eea0 <f_write+0x33c>)
   2ec2a:	4798      	blx	r3
   2ec2c:	0003      	movs	r3, r0
   2ec2e:	627b      	str	r3, [r7, #36]	; 0x24
   2ec30:	68fb      	ldr	r3, [r7, #12]
   2ec32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2ec34:	611a      	str	r2, [r3, #16]
   2ec36:	e009      	b.n	2ec4c <f_write+0xe8>
   2ec38:	68fb      	ldr	r3, [r7, #12]
   2ec3a:	681a      	ldr	r2, [r3, #0]
   2ec3c:	68fb      	ldr	r3, [r7, #12]
   2ec3e:	695b      	ldr	r3, [r3, #20]
   2ec40:	0019      	movs	r1, r3
   2ec42:	0010      	movs	r0, r2
   2ec44:	4b96      	ldr	r3, [pc, #600]	; (2eea0 <f_write+0x33c>)
   2ec46:	4798      	blx	r3
   2ec48:	0003      	movs	r3, r0
   2ec4a:	627b      	str	r3, [r7, #36]	; 0x24
   2ec4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ec4e:	2b00      	cmp	r3, #0
   2ec50:	d100      	bne.n	2ec54 <f_write+0xf0>
   2ec52:	e10c      	b.n	2ee6e <f_write+0x30a>
   2ec54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ec56:	2b01      	cmp	r3, #1
   2ec58:	d109      	bne.n	2ec6e <f_write+0x10a>
   2ec5a:	68fb      	ldr	r3, [r7, #12]
   2ec5c:	799b      	ldrb	r3, [r3, #6]
   2ec5e:	2280      	movs	r2, #128	; 0x80
   2ec60:	4252      	negs	r2, r2
   2ec62:	4313      	orrs	r3, r2
   2ec64:	b2da      	uxtb	r2, r3
   2ec66:	68fb      	ldr	r3, [r7, #12]
   2ec68:	719a      	strb	r2, [r3, #6]
   2ec6a:	2302      	movs	r3, #2
   2ec6c:	e112      	b.n	2ee94 <f_write+0x330>
   2ec6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ec70:	3301      	adds	r3, #1
   2ec72:	d109      	bne.n	2ec88 <f_write+0x124>
   2ec74:	68fb      	ldr	r3, [r7, #12]
   2ec76:	799b      	ldrb	r3, [r3, #6]
   2ec78:	2280      	movs	r2, #128	; 0x80
   2ec7a:	4252      	negs	r2, r2
   2ec7c:	4313      	orrs	r3, r2
   2ec7e:	b2da      	uxtb	r2, r3
   2ec80:	68fb      	ldr	r3, [r7, #12]
   2ec82:	719a      	strb	r2, [r3, #6]
   2ec84:	2301      	movs	r3, #1
   2ec86:	e105      	b.n	2ee94 <f_write+0x330>
   2ec88:	68fb      	ldr	r3, [r7, #12]
   2ec8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2ec8c:	615a      	str	r2, [r3, #20]
   2ec8e:	68fb      	ldr	r3, [r7, #12]
   2ec90:	681b      	ldr	r3, [r3, #0]
   2ec92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2ec94:	68fb      	ldr	r3, [r7, #12]
   2ec96:	699b      	ldr	r3, [r3, #24]
   2ec98:	429a      	cmp	r2, r3
   2ec9a:	d111      	bne.n	2ecc0 <f_write+0x15c>
   2ec9c:	68fb      	ldr	r3, [r7, #12]
   2ec9e:	681b      	ldr	r3, [r3, #0]
   2eca0:	2100      	movs	r1, #0
   2eca2:	0018      	movs	r0, r3
   2eca4:	4b7f      	ldr	r3, [pc, #508]	; (2eea4 <f_write+0x340>)
   2eca6:	4798      	blx	r3
   2eca8:	1e03      	subs	r3, r0, #0
   2ecaa:	d009      	beq.n	2ecc0 <f_write+0x15c>
   2ecac:	68fb      	ldr	r3, [r7, #12]
   2ecae:	799b      	ldrb	r3, [r3, #6]
   2ecb0:	2280      	movs	r2, #128	; 0x80
   2ecb2:	4252      	negs	r2, r2
   2ecb4:	4313      	orrs	r3, r2
   2ecb6:	b2da      	uxtb	r2, r3
   2ecb8:	68fb      	ldr	r3, [r7, #12]
   2ecba:	719a      	strb	r2, [r3, #6]
   2ecbc:	2301      	movs	r3, #1
   2ecbe:	e0e9      	b.n	2ee94 <f_write+0x330>
   2ecc0:	68fb      	ldr	r3, [r7, #12]
   2ecc2:	681a      	ldr	r2, [r3, #0]
   2ecc4:	68fb      	ldr	r3, [r7, #12]
   2ecc6:	695b      	ldr	r3, [r3, #20]
   2ecc8:	0019      	movs	r1, r3
   2ecca:	0010      	movs	r0, r2
   2eccc:	4b76      	ldr	r3, [pc, #472]	; (2eea8 <f_write+0x344>)
   2ecce:	4798      	blx	r3
   2ecd0:	0003      	movs	r3, r0
   2ecd2:	613b      	str	r3, [r7, #16]
   2ecd4:	693b      	ldr	r3, [r7, #16]
   2ecd6:	2b00      	cmp	r3, #0
   2ecd8:	d109      	bne.n	2ecee <f_write+0x18a>
   2ecda:	68fb      	ldr	r3, [r7, #12]
   2ecdc:	799b      	ldrb	r3, [r3, #6]
   2ecde:	2280      	movs	r2, #128	; 0x80
   2ece0:	4252      	negs	r2, r2
   2ece2:	4313      	orrs	r3, r2
   2ece4:	b2da      	uxtb	r2, r3
   2ece6:	68fb      	ldr	r3, [r7, #12]
   2ece8:	719a      	strb	r2, [r3, #6]
   2ecea:	2302      	movs	r3, #2
   2ecec:	e0d2      	b.n	2ee94 <f_write+0x330>
   2ecee:	2316      	movs	r3, #22
   2ecf0:	18fb      	adds	r3, r7, r3
   2ecf2:	781b      	ldrb	r3, [r3, #0]
   2ecf4:	693a      	ldr	r2, [r7, #16]
   2ecf6:	18d3      	adds	r3, r2, r3
   2ecf8:	613b      	str	r3, [r7, #16]
   2ecfa:	687b      	ldr	r3, [r7, #4]
   2ecfc:	0a5b      	lsrs	r3, r3, #9
   2ecfe:	61fb      	str	r3, [r7, #28]
   2ed00:	69fb      	ldr	r3, [r7, #28]
   2ed02:	2b00      	cmp	r3, #0
   2ed04:	d048      	beq.n	2ed98 <f_write+0x234>
   2ed06:	2316      	movs	r3, #22
   2ed08:	18fb      	adds	r3, r7, r3
   2ed0a:	781a      	ldrb	r2, [r3, #0]
   2ed0c:	69fb      	ldr	r3, [r7, #28]
   2ed0e:	18d2      	adds	r2, r2, r3
   2ed10:	68fb      	ldr	r3, [r7, #12]
   2ed12:	681b      	ldr	r3, [r3, #0]
   2ed14:	789b      	ldrb	r3, [r3, #2]
   2ed16:	429a      	cmp	r2, r3
   2ed18:	d908      	bls.n	2ed2c <f_write+0x1c8>
   2ed1a:	68fb      	ldr	r3, [r7, #12]
   2ed1c:	681b      	ldr	r3, [r3, #0]
   2ed1e:	789b      	ldrb	r3, [r3, #2]
   2ed20:	001a      	movs	r2, r3
   2ed22:	2316      	movs	r3, #22
   2ed24:	18fb      	adds	r3, r7, r3
   2ed26:	781b      	ldrb	r3, [r3, #0]
   2ed28:	1ad3      	subs	r3, r2, r3
   2ed2a:	61fb      	str	r3, [r7, #28]
   2ed2c:	68fb      	ldr	r3, [r7, #12]
   2ed2e:	681b      	ldr	r3, [r3, #0]
   2ed30:	7858      	ldrb	r0, [r3, #1]
   2ed32:	69fb      	ldr	r3, [r7, #28]
   2ed34:	b2db      	uxtb	r3, r3
   2ed36:	693a      	ldr	r2, [r7, #16]
   2ed38:	69b9      	ldr	r1, [r7, #24]
   2ed3a:	4c5c      	ldr	r4, [pc, #368]	; (2eeac <f_write+0x348>)
   2ed3c:	47a0      	blx	r4
   2ed3e:	1e03      	subs	r3, r0, #0
   2ed40:	d009      	beq.n	2ed56 <f_write+0x1f2>
   2ed42:	68fb      	ldr	r3, [r7, #12]
   2ed44:	799b      	ldrb	r3, [r3, #6]
   2ed46:	2280      	movs	r2, #128	; 0x80
   2ed48:	4252      	negs	r2, r2
   2ed4a:	4313      	orrs	r3, r2
   2ed4c:	b2da      	uxtb	r2, r3
   2ed4e:	68fb      	ldr	r3, [r7, #12]
   2ed50:	719a      	strb	r2, [r3, #6]
   2ed52:	2301      	movs	r3, #1
   2ed54:	e09e      	b.n	2ee94 <f_write+0x330>
   2ed56:	68fb      	ldr	r3, [r7, #12]
   2ed58:	681b      	ldr	r3, [r3, #0]
   2ed5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2ed5c:	693b      	ldr	r3, [r7, #16]
   2ed5e:	1ad2      	subs	r2, r2, r3
   2ed60:	69fb      	ldr	r3, [r7, #28]
   2ed62:	429a      	cmp	r2, r3
   2ed64:	d214      	bcs.n	2ed90 <f_write+0x22c>
   2ed66:	68fb      	ldr	r3, [r7, #12]
   2ed68:	681b      	ldr	r3, [r3, #0]
   2ed6a:	3330      	adds	r3, #48	; 0x30
   2ed6c:	0018      	movs	r0, r3
   2ed6e:	68fb      	ldr	r3, [r7, #12]
   2ed70:	681b      	ldr	r3, [r3, #0]
   2ed72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2ed74:	693b      	ldr	r3, [r7, #16]
   2ed76:	1ad3      	subs	r3, r2, r3
   2ed78:	025b      	lsls	r3, r3, #9
   2ed7a:	69ba      	ldr	r2, [r7, #24]
   2ed7c:	18d1      	adds	r1, r2, r3
   2ed7e:	2380      	movs	r3, #128	; 0x80
   2ed80:	009b      	lsls	r3, r3, #2
   2ed82:	001a      	movs	r2, r3
   2ed84:	4b4a      	ldr	r3, [pc, #296]	; (2eeb0 <f_write+0x34c>)
   2ed86:	4798      	blx	r3
   2ed88:	68fb      	ldr	r3, [r7, #12]
   2ed8a:	681b      	ldr	r3, [r3, #0]
   2ed8c:	2200      	movs	r2, #0
   2ed8e:	711a      	strb	r2, [r3, #4]
   2ed90:	69fb      	ldr	r3, [r7, #28]
   2ed92:	025b      	lsls	r3, r3, #9
   2ed94:	623b      	str	r3, [r7, #32]
   2ed96:	e051      	b.n	2ee3c <f_write+0x2d8>
   2ed98:	68fb      	ldr	r3, [r7, #12]
   2ed9a:	689a      	ldr	r2, [r3, #8]
   2ed9c:	68fb      	ldr	r3, [r7, #12]
   2ed9e:	68db      	ldr	r3, [r3, #12]
   2eda0:	429a      	cmp	r2, r3
   2eda2:	d315      	bcc.n	2edd0 <f_write+0x26c>
   2eda4:	68fb      	ldr	r3, [r7, #12]
   2eda6:	681b      	ldr	r3, [r3, #0]
   2eda8:	2100      	movs	r1, #0
   2edaa:	0018      	movs	r0, r3
   2edac:	4b3d      	ldr	r3, [pc, #244]	; (2eea4 <f_write+0x340>)
   2edae:	4798      	blx	r3
   2edb0:	1e03      	subs	r3, r0, #0
   2edb2:	d009      	beq.n	2edc8 <f_write+0x264>
   2edb4:	68fb      	ldr	r3, [r7, #12]
   2edb6:	799b      	ldrb	r3, [r3, #6]
   2edb8:	2280      	movs	r2, #128	; 0x80
   2edba:	4252      	negs	r2, r2
   2edbc:	4313      	orrs	r3, r2
   2edbe:	b2da      	uxtb	r2, r3
   2edc0:	68fb      	ldr	r3, [r7, #12]
   2edc2:	719a      	strb	r2, [r3, #6]
   2edc4:	2301      	movs	r3, #1
   2edc6:	e065      	b.n	2ee94 <f_write+0x330>
   2edc8:	68fb      	ldr	r3, [r7, #12]
   2edca:	681b      	ldr	r3, [r3, #0]
   2edcc:	693a      	ldr	r2, [r7, #16]
   2edce:	62da      	str	r2, [r3, #44]	; 0x2c
   2edd0:	68fb      	ldr	r3, [r7, #12]
   2edd2:	693a      	ldr	r2, [r7, #16]
   2edd4:	619a      	str	r2, [r3, #24]
   2edd6:	68fb      	ldr	r3, [r7, #12]
   2edd8:	689b      	ldr	r3, [r3, #8]
   2edda:	05db      	lsls	r3, r3, #23
   2eddc:	0ddb      	lsrs	r3, r3, #23
   2edde:	2280      	movs	r2, #128	; 0x80
   2ede0:	0092      	lsls	r2, r2, #2
   2ede2:	1ad3      	subs	r3, r2, r3
   2ede4:	623b      	str	r3, [r7, #32]
   2ede6:	6a3a      	ldr	r2, [r7, #32]
   2ede8:	687b      	ldr	r3, [r7, #4]
   2edea:	429a      	cmp	r2, r3
   2edec:	d901      	bls.n	2edf2 <f_write+0x28e>
   2edee:	687b      	ldr	r3, [r7, #4]
   2edf0:	623b      	str	r3, [r7, #32]
   2edf2:	68fb      	ldr	r3, [r7, #12]
   2edf4:	681a      	ldr	r2, [r3, #0]
   2edf6:	68fb      	ldr	r3, [r7, #12]
   2edf8:	699b      	ldr	r3, [r3, #24]
   2edfa:	0019      	movs	r1, r3
   2edfc:	0010      	movs	r0, r2
   2edfe:	4b29      	ldr	r3, [pc, #164]	; (2eea4 <f_write+0x340>)
   2ee00:	4798      	blx	r3
   2ee02:	1e03      	subs	r3, r0, #0
   2ee04:	d009      	beq.n	2ee1a <f_write+0x2b6>
   2ee06:	68fb      	ldr	r3, [r7, #12]
   2ee08:	799b      	ldrb	r3, [r3, #6]
   2ee0a:	2280      	movs	r2, #128	; 0x80
   2ee0c:	4252      	negs	r2, r2
   2ee0e:	4313      	orrs	r3, r2
   2ee10:	b2da      	uxtb	r2, r3
   2ee12:	68fb      	ldr	r3, [r7, #12]
   2ee14:	719a      	strb	r2, [r3, #6]
   2ee16:	2301      	movs	r3, #1
   2ee18:	e03c      	b.n	2ee94 <f_write+0x330>
   2ee1a:	68fb      	ldr	r3, [r7, #12]
   2ee1c:	681a      	ldr	r2, [r3, #0]
   2ee1e:	68fb      	ldr	r3, [r7, #12]
   2ee20:	689b      	ldr	r3, [r3, #8]
   2ee22:	05db      	lsls	r3, r3, #23
   2ee24:	0ddb      	lsrs	r3, r3, #23
   2ee26:	3330      	adds	r3, #48	; 0x30
   2ee28:	18d3      	adds	r3, r2, r3
   2ee2a:	6a3a      	ldr	r2, [r7, #32]
   2ee2c:	69b9      	ldr	r1, [r7, #24]
   2ee2e:	0018      	movs	r0, r3
   2ee30:	4b1f      	ldr	r3, [pc, #124]	; (2eeb0 <f_write+0x34c>)
   2ee32:	4798      	blx	r3
   2ee34:	68fb      	ldr	r3, [r7, #12]
   2ee36:	681b      	ldr	r3, [r3, #0]
   2ee38:	2201      	movs	r2, #1
   2ee3a:	711a      	strb	r2, [r3, #4]
   2ee3c:	69ba      	ldr	r2, [r7, #24]
   2ee3e:	6a3b      	ldr	r3, [r7, #32]
   2ee40:	18d3      	adds	r3, r2, r3
   2ee42:	61bb      	str	r3, [r7, #24]
   2ee44:	68fb      	ldr	r3, [r7, #12]
   2ee46:	689a      	ldr	r2, [r3, #8]
   2ee48:	6a3b      	ldr	r3, [r7, #32]
   2ee4a:	18d2      	adds	r2, r2, r3
   2ee4c:	68fb      	ldr	r3, [r7, #12]
   2ee4e:	609a      	str	r2, [r3, #8]
   2ee50:	683b      	ldr	r3, [r7, #0]
   2ee52:	681a      	ldr	r2, [r3, #0]
   2ee54:	6a3b      	ldr	r3, [r7, #32]
   2ee56:	18d2      	adds	r2, r2, r3
   2ee58:	683b      	ldr	r3, [r7, #0]
   2ee5a:	601a      	str	r2, [r3, #0]
   2ee5c:	687a      	ldr	r2, [r7, #4]
   2ee5e:	6a3b      	ldr	r3, [r7, #32]
   2ee60:	1ad3      	subs	r3, r2, r3
   2ee62:	607b      	str	r3, [r7, #4]
   2ee64:	687b      	ldr	r3, [r7, #4]
   2ee66:	2b00      	cmp	r3, #0
   2ee68:	d000      	beq.n	2ee6c <f_write+0x308>
   2ee6a:	e6b7      	b.n	2ebdc <f_write+0x78>
   2ee6c:	e000      	b.n	2ee70 <f_write+0x30c>
   2ee6e:	46c0      	nop			; (mov r8, r8)
   2ee70:	68fb      	ldr	r3, [r7, #12]
   2ee72:	689a      	ldr	r2, [r3, #8]
   2ee74:	68fb      	ldr	r3, [r7, #12]
   2ee76:	68db      	ldr	r3, [r3, #12]
   2ee78:	429a      	cmp	r2, r3
   2ee7a:	d903      	bls.n	2ee84 <f_write+0x320>
   2ee7c:	68fb      	ldr	r3, [r7, #12]
   2ee7e:	689a      	ldr	r2, [r3, #8]
   2ee80:	68fb      	ldr	r3, [r7, #12]
   2ee82:	60da      	str	r2, [r3, #12]
   2ee84:	68fb      	ldr	r3, [r7, #12]
   2ee86:	799b      	ldrb	r3, [r3, #6]
   2ee88:	2220      	movs	r2, #32
   2ee8a:	4313      	orrs	r3, r2
   2ee8c:	b2da      	uxtb	r2, r3
   2ee8e:	68fb      	ldr	r3, [r7, #12]
   2ee90:	719a      	strb	r2, [r3, #6]
   2ee92:	2300      	movs	r3, #0
   2ee94:	0018      	movs	r0, r3
   2ee96:	46bd      	mov	sp, r7
   2ee98:	b00b      	add	sp, #44	; 0x2c
   2ee9a:	bd90      	pop	{r4, r7, pc}
   2ee9c:	0002e589 	.word	0x0002e589
   2eea0:	0002cc15 	.word	0x0002cc15
   2eea4:	0002c50d 	.word	0x0002c50d
   2eea8:	0002c76d 	.word	0x0002c76d
   2eeac:	0002c1f9 	.word	0x0002c1f9
   2eeb0:	0002c429 	.word	0x0002c429

0002eeb4 <f_sync>:
   2eeb4:	b590      	push	{r4, r7, lr}
   2eeb6:	b087      	sub	sp, #28
   2eeb8:	af00      	add	r7, sp, #0
   2eeba:	6078      	str	r0, [r7, #4]
   2eebc:	687b      	ldr	r3, [r7, #4]
   2eebe:	681a      	ldr	r2, [r3, #0]
   2eec0:	687b      	ldr	r3, [r7, #4]
   2eec2:	889b      	ldrh	r3, [r3, #4]
   2eec4:	2117      	movs	r1, #23
   2eec6:	187c      	adds	r4, r7, r1
   2eec8:	0019      	movs	r1, r3
   2eeca:	0010      	movs	r0, r2
   2eecc:	4b55      	ldr	r3, [pc, #340]	; (2f024 <f_sync+0x170>)
   2eece:	4798      	blx	r3
   2eed0:	0003      	movs	r3, r0
   2eed2:	7023      	strb	r3, [r4, #0]
   2eed4:	2317      	movs	r3, #23
   2eed6:	18fb      	adds	r3, r7, r3
   2eed8:	781b      	ldrb	r3, [r3, #0]
   2eeda:	2b00      	cmp	r3, #0
   2eedc:	d000      	beq.n	2eee0 <f_sync+0x2c>
   2eede:	e09a      	b.n	2f016 <f_sync+0x162>
   2eee0:	687b      	ldr	r3, [r7, #4]
   2eee2:	799b      	ldrb	r3, [r3, #6]
   2eee4:	001a      	movs	r2, r3
   2eee6:	2320      	movs	r3, #32
   2eee8:	4013      	ands	r3, r2
   2eeea:	d100      	bne.n	2eeee <f_sync+0x3a>
   2eeec:	e093      	b.n	2f016 <f_sync+0x162>
   2eeee:	687b      	ldr	r3, [r7, #4]
   2eef0:	681a      	ldr	r2, [r3, #0]
   2eef2:	687b      	ldr	r3, [r7, #4]
   2eef4:	69db      	ldr	r3, [r3, #28]
   2eef6:	2117      	movs	r1, #23
   2eef8:	187c      	adds	r4, r7, r1
   2eefa:	0019      	movs	r1, r3
   2eefc:	0010      	movs	r0, r2
   2eefe:	4b4a      	ldr	r3, [pc, #296]	; (2f028 <f_sync+0x174>)
   2ef00:	4798      	blx	r3
   2ef02:	0003      	movs	r3, r0
   2ef04:	7023      	strb	r3, [r4, #0]
   2ef06:	2317      	movs	r3, #23
   2ef08:	18fb      	adds	r3, r7, r3
   2ef0a:	781b      	ldrb	r3, [r3, #0]
   2ef0c:	2b00      	cmp	r3, #0
   2ef0e:	d000      	beq.n	2ef12 <f_sync+0x5e>
   2ef10:	e081      	b.n	2f016 <f_sync+0x162>
   2ef12:	687b      	ldr	r3, [r7, #4]
   2ef14:	6a1b      	ldr	r3, [r3, #32]
   2ef16:	613b      	str	r3, [r7, #16]
   2ef18:	693b      	ldr	r3, [r7, #16]
   2ef1a:	330b      	adds	r3, #11
   2ef1c:	693a      	ldr	r2, [r7, #16]
   2ef1e:	320b      	adds	r2, #11
   2ef20:	7812      	ldrb	r2, [r2, #0]
   2ef22:	2120      	movs	r1, #32
   2ef24:	430a      	orrs	r2, r1
   2ef26:	b2d2      	uxtb	r2, r2
   2ef28:	701a      	strb	r2, [r3, #0]
   2ef2a:	693b      	ldr	r3, [r7, #16]
   2ef2c:	331c      	adds	r3, #28
   2ef2e:	001a      	movs	r2, r3
   2ef30:	687b      	ldr	r3, [r7, #4]
   2ef32:	68db      	ldr	r3, [r3, #12]
   2ef34:	b2db      	uxtb	r3, r3
   2ef36:	7013      	strb	r3, [r2, #0]
   2ef38:	693b      	ldr	r3, [r7, #16]
   2ef3a:	331d      	adds	r3, #29
   2ef3c:	001a      	movs	r2, r3
   2ef3e:	687b      	ldr	r3, [r7, #4]
   2ef40:	68db      	ldr	r3, [r3, #12]
   2ef42:	b29b      	uxth	r3, r3
   2ef44:	0a1b      	lsrs	r3, r3, #8
   2ef46:	b29b      	uxth	r3, r3
   2ef48:	b2db      	uxtb	r3, r3
   2ef4a:	7013      	strb	r3, [r2, #0]
   2ef4c:	693b      	ldr	r3, [r7, #16]
   2ef4e:	331e      	adds	r3, #30
   2ef50:	001a      	movs	r2, r3
   2ef52:	687b      	ldr	r3, [r7, #4]
   2ef54:	68db      	ldr	r3, [r3, #12]
   2ef56:	0c1b      	lsrs	r3, r3, #16
   2ef58:	b2db      	uxtb	r3, r3
   2ef5a:	7013      	strb	r3, [r2, #0]
   2ef5c:	693b      	ldr	r3, [r7, #16]
   2ef5e:	331f      	adds	r3, #31
   2ef60:	001a      	movs	r2, r3
   2ef62:	687b      	ldr	r3, [r7, #4]
   2ef64:	68db      	ldr	r3, [r3, #12]
   2ef66:	0e1b      	lsrs	r3, r3, #24
   2ef68:	b2db      	uxtb	r3, r3
   2ef6a:	7013      	strb	r3, [r2, #0]
   2ef6c:	693b      	ldr	r3, [r7, #16]
   2ef6e:	331a      	adds	r3, #26
   2ef70:	001a      	movs	r2, r3
   2ef72:	687b      	ldr	r3, [r7, #4]
   2ef74:	691b      	ldr	r3, [r3, #16]
   2ef76:	b2db      	uxtb	r3, r3
   2ef78:	7013      	strb	r3, [r2, #0]
   2ef7a:	693b      	ldr	r3, [r7, #16]
   2ef7c:	331b      	adds	r3, #27
   2ef7e:	001a      	movs	r2, r3
   2ef80:	687b      	ldr	r3, [r7, #4]
   2ef82:	691b      	ldr	r3, [r3, #16]
   2ef84:	b29b      	uxth	r3, r3
   2ef86:	0a1b      	lsrs	r3, r3, #8
   2ef88:	b29b      	uxth	r3, r3
   2ef8a:	b2db      	uxtb	r3, r3
   2ef8c:	7013      	strb	r3, [r2, #0]
   2ef8e:	693b      	ldr	r3, [r7, #16]
   2ef90:	3314      	adds	r3, #20
   2ef92:	001a      	movs	r2, r3
   2ef94:	687b      	ldr	r3, [r7, #4]
   2ef96:	691b      	ldr	r3, [r3, #16]
   2ef98:	0c1b      	lsrs	r3, r3, #16
   2ef9a:	b2db      	uxtb	r3, r3
   2ef9c:	7013      	strb	r3, [r2, #0]
   2ef9e:	693b      	ldr	r3, [r7, #16]
   2efa0:	3315      	adds	r3, #21
   2efa2:	001a      	movs	r2, r3
   2efa4:	687b      	ldr	r3, [r7, #4]
   2efa6:	691b      	ldr	r3, [r3, #16]
   2efa8:	0c1b      	lsrs	r3, r3, #16
   2efaa:	b29b      	uxth	r3, r3
   2efac:	0a1b      	lsrs	r3, r3, #8
   2efae:	b29b      	uxth	r3, r3
   2efb0:	b2db      	uxtb	r3, r3
   2efb2:	7013      	strb	r3, [r2, #0]
   2efb4:	4b1d      	ldr	r3, [pc, #116]	; (2f02c <f_sync+0x178>)
   2efb6:	4798      	blx	r3
   2efb8:	0003      	movs	r3, r0
   2efba:	60fb      	str	r3, [r7, #12]
   2efbc:	693b      	ldr	r3, [r7, #16]
   2efbe:	3316      	adds	r3, #22
   2efc0:	68fa      	ldr	r2, [r7, #12]
   2efc2:	b2d2      	uxtb	r2, r2
   2efc4:	701a      	strb	r2, [r3, #0]
   2efc6:	693b      	ldr	r3, [r7, #16]
   2efc8:	3317      	adds	r3, #23
   2efca:	68fa      	ldr	r2, [r7, #12]
   2efcc:	b292      	uxth	r2, r2
   2efce:	0a12      	lsrs	r2, r2, #8
   2efd0:	b292      	uxth	r2, r2
   2efd2:	b2d2      	uxtb	r2, r2
   2efd4:	701a      	strb	r2, [r3, #0]
   2efd6:	693b      	ldr	r3, [r7, #16]
   2efd8:	3318      	adds	r3, #24
   2efda:	68fa      	ldr	r2, [r7, #12]
   2efdc:	0c12      	lsrs	r2, r2, #16
   2efde:	b2d2      	uxtb	r2, r2
   2efe0:	701a      	strb	r2, [r3, #0]
   2efe2:	693b      	ldr	r3, [r7, #16]
   2efe4:	3319      	adds	r3, #25
   2efe6:	68fa      	ldr	r2, [r7, #12]
   2efe8:	0e12      	lsrs	r2, r2, #24
   2efea:	b2d2      	uxtb	r2, r2
   2efec:	701a      	strb	r2, [r3, #0]
   2efee:	687b      	ldr	r3, [r7, #4]
   2eff0:	799b      	ldrb	r3, [r3, #6]
   2eff2:	2220      	movs	r2, #32
   2eff4:	4393      	bics	r3, r2
   2eff6:	b2da      	uxtb	r2, r3
   2eff8:	687b      	ldr	r3, [r7, #4]
   2effa:	719a      	strb	r2, [r3, #6]
   2effc:	687b      	ldr	r3, [r7, #4]
   2effe:	681b      	ldr	r3, [r3, #0]
   2f000:	2201      	movs	r2, #1
   2f002:	711a      	strb	r2, [r3, #4]
   2f004:	687b      	ldr	r3, [r7, #4]
   2f006:	681b      	ldr	r3, [r3, #0]
   2f008:	2217      	movs	r2, #23
   2f00a:	18bc      	adds	r4, r7, r2
   2f00c:	0018      	movs	r0, r3
   2f00e:	4b08      	ldr	r3, [pc, #32]	; (2f030 <f_sync+0x17c>)
   2f010:	4798      	blx	r3
   2f012:	0003      	movs	r3, r0
   2f014:	7023      	strb	r3, [r4, #0]
   2f016:	2317      	movs	r3, #23
   2f018:	18fb      	adds	r3, r7, r3
   2f01a:	781b      	ldrb	r3, [r3, #0]
   2f01c:	0018      	movs	r0, r3
   2f01e:	46bd      	mov	sp, r7
   2f020:	b007      	add	sp, #28
   2f022:	bd90      	pop	{r4, r7, pc}
   2f024:	0002e589 	.word	0x0002e589
   2f028:	0002c50d 	.word	0x0002c50d
   2f02c:	0002c3c9 	.word	0x0002c3c9
   2f030:	0002c5d5 	.word	0x0002c5d5

0002f034 <f_close>:
   2f034:	b590      	push	{r4, r7, lr}
   2f036:	b085      	sub	sp, #20
   2f038:	af00      	add	r7, sp, #0
   2f03a:	6078      	str	r0, [r7, #4]
   2f03c:	230f      	movs	r3, #15
   2f03e:	18fc      	adds	r4, r7, r3
   2f040:	687b      	ldr	r3, [r7, #4]
   2f042:	0018      	movs	r0, r3
   2f044:	4b09      	ldr	r3, [pc, #36]	; (2f06c <f_close+0x38>)
   2f046:	4798      	blx	r3
   2f048:	0003      	movs	r3, r0
   2f04a:	7023      	strb	r3, [r4, #0]
   2f04c:	230f      	movs	r3, #15
   2f04e:	18fb      	adds	r3, r7, r3
   2f050:	781b      	ldrb	r3, [r3, #0]
   2f052:	2b00      	cmp	r3, #0
   2f054:	d102      	bne.n	2f05c <f_close+0x28>
   2f056:	687b      	ldr	r3, [r7, #4]
   2f058:	2200      	movs	r2, #0
   2f05a:	601a      	str	r2, [r3, #0]
   2f05c:	230f      	movs	r3, #15
   2f05e:	18fb      	adds	r3, r7, r3
   2f060:	781b      	ldrb	r3, [r3, #0]
   2f062:	0018      	movs	r0, r3
   2f064:	46bd      	mov	sp, r7
   2f066:	b005      	add	sp, #20
   2f068:	bd90      	pop	{r4, r7, pc}
   2f06a:	46c0      	nop			; (mov r8, r8)
   2f06c:	0002eeb5 	.word	0x0002eeb5

0002f070 <ff_convert>:
   2f070:	b580      	push	{r7, lr}
   2f072:	b084      	sub	sp, #16
   2f074:	af00      	add	r7, sp, #0
   2f076:	0002      	movs	r2, r0
   2f078:	6039      	str	r1, [r7, #0]
   2f07a:	1dbb      	adds	r3, r7, #6
   2f07c:	801a      	strh	r2, [r3, #0]
   2f07e:	1dbb      	adds	r3, r7, #6
   2f080:	881b      	ldrh	r3, [r3, #0]
   2f082:	2b7f      	cmp	r3, #127	; 0x7f
   2f084:	d805      	bhi.n	2f092 <ff_convert+0x22>
   2f086:	230e      	movs	r3, #14
   2f088:	18fb      	adds	r3, r7, r3
   2f08a:	1dba      	adds	r2, r7, #6
   2f08c:	8812      	ldrh	r2, [r2, #0]
   2f08e:	801a      	strh	r2, [r3, #0]
   2f090:	e03a      	b.n	2f108 <ff_convert+0x98>
   2f092:	683b      	ldr	r3, [r7, #0]
   2f094:	2b00      	cmp	r3, #0
   2f096:	d010      	beq.n	2f0ba <ff_convert+0x4a>
   2f098:	1dbb      	adds	r3, r7, #6
   2f09a:	881b      	ldrh	r3, [r3, #0]
   2f09c:	2bff      	cmp	r3, #255	; 0xff
   2f09e:	d807      	bhi.n	2f0b0 <ff_convert+0x40>
   2f0a0:	1dbb      	adds	r3, r7, #6
   2f0a2:	881b      	ldrh	r3, [r3, #0]
   2f0a4:	3b80      	subs	r3, #128	; 0x80
   2f0a6:	001a      	movs	r2, r3
   2f0a8:	4b1b      	ldr	r3, [pc, #108]	; (2f118 <ff_convert+0xa8>)
   2f0aa:	0052      	lsls	r2, r2, #1
   2f0ac:	5ad2      	ldrh	r2, [r2, r3]
   2f0ae:	e000      	b.n	2f0b2 <ff_convert+0x42>
   2f0b0:	2200      	movs	r2, #0
   2f0b2:	230e      	movs	r3, #14
   2f0b4:	18fb      	adds	r3, r7, r3
   2f0b6:	801a      	strh	r2, [r3, #0]
   2f0b8:	e026      	b.n	2f108 <ff_convert+0x98>
   2f0ba:	230e      	movs	r3, #14
   2f0bc:	18fb      	adds	r3, r7, r3
   2f0be:	2200      	movs	r2, #0
   2f0c0:	801a      	strh	r2, [r3, #0]
   2f0c2:	e010      	b.n	2f0e6 <ff_convert+0x76>
   2f0c4:	230e      	movs	r3, #14
   2f0c6:	18fb      	adds	r3, r7, r3
   2f0c8:	881a      	ldrh	r2, [r3, #0]
   2f0ca:	4b13      	ldr	r3, [pc, #76]	; (2f118 <ff_convert+0xa8>)
   2f0cc:	0052      	lsls	r2, r2, #1
   2f0ce:	5ad3      	ldrh	r3, [r2, r3]
   2f0d0:	1dba      	adds	r2, r7, #6
   2f0d2:	8812      	ldrh	r2, [r2, #0]
   2f0d4:	429a      	cmp	r2, r3
   2f0d6:	d00c      	beq.n	2f0f2 <ff_convert+0x82>
   2f0d8:	230e      	movs	r3, #14
   2f0da:	18fb      	adds	r3, r7, r3
   2f0dc:	881a      	ldrh	r2, [r3, #0]
   2f0de:	230e      	movs	r3, #14
   2f0e0:	18fb      	adds	r3, r7, r3
   2f0e2:	3201      	adds	r2, #1
   2f0e4:	801a      	strh	r2, [r3, #0]
   2f0e6:	230e      	movs	r3, #14
   2f0e8:	18fb      	adds	r3, r7, r3
   2f0ea:	881b      	ldrh	r3, [r3, #0]
   2f0ec:	2b7f      	cmp	r3, #127	; 0x7f
   2f0ee:	d9e9      	bls.n	2f0c4 <ff_convert+0x54>
   2f0f0:	e000      	b.n	2f0f4 <ff_convert+0x84>
   2f0f2:	46c0      	nop			; (mov r8, r8)
   2f0f4:	230e      	movs	r3, #14
   2f0f6:	18fb      	adds	r3, r7, r3
   2f0f8:	881b      	ldrh	r3, [r3, #0]
   2f0fa:	3380      	adds	r3, #128	; 0x80
   2f0fc:	b29a      	uxth	r2, r3
   2f0fe:	230e      	movs	r3, #14
   2f100:	18fb      	adds	r3, r7, r3
   2f102:	21ff      	movs	r1, #255	; 0xff
   2f104:	400a      	ands	r2, r1
   2f106:	801a      	strh	r2, [r3, #0]
   2f108:	230e      	movs	r3, #14
   2f10a:	18fb      	adds	r3, r7, r3
   2f10c:	881b      	ldrh	r3, [r3, #0]
   2f10e:	0018      	movs	r0, r3
   2f110:	46bd      	mov	sp, r7
   2f112:	b004      	add	sp, #16
   2f114:	bd80      	pop	{r7, pc}
   2f116:	46c0      	nop			; (mov r8, r8)
   2f118:	0003a418 	.word	0x0003a418

0002f11c <ff_wtoupper>:
   2f11c:	b580      	push	{r7, lr}
   2f11e:	b084      	sub	sp, #16
   2f120:	af00      	add	r7, sp, #0
   2f122:	0002      	movs	r2, r0
   2f124:	1dbb      	adds	r3, r7, #6
   2f126:	801a      	strh	r2, [r3, #0]
   2f128:	2300      	movs	r3, #0
   2f12a:	60fb      	str	r3, [r7, #12]
   2f12c:	e002      	b.n	2f134 <ff_wtoupper+0x18>
   2f12e:	68fb      	ldr	r3, [r7, #12]
   2f130:	3301      	adds	r3, #1
   2f132:	60fb      	str	r3, [r7, #12]
   2f134:	4b0f      	ldr	r3, [pc, #60]	; (2f174 <ff_wtoupper+0x58>)
   2f136:	68fa      	ldr	r2, [r7, #12]
   2f138:	0052      	lsls	r2, r2, #1
   2f13a:	5ad3      	ldrh	r3, [r2, r3]
   2f13c:	2b00      	cmp	r3, #0
   2f13e:	d007      	beq.n	2f150 <ff_wtoupper+0x34>
   2f140:	4b0c      	ldr	r3, [pc, #48]	; (2f174 <ff_wtoupper+0x58>)
   2f142:	68fa      	ldr	r2, [r7, #12]
   2f144:	0052      	lsls	r2, r2, #1
   2f146:	5ad3      	ldrh	r3, [r2, r3]
   2f148:	1dba      	adds	r2, r7, #6
   2f14a:	8812      	ldrh	r2, [r2, #0]
   2f14c:	429a      	cmp	r2, r3
   2f14e:	d1ee      	bne.n	2f12e <ff_wtoupper+0x12>
   2f150:	4b08      	ldr	r3, [pc, #32]	; (2f174 <ff_wtoupper+0x58>)
   2f152:	68fa      	ldr	r2, [r7, #12]
   2f154:	0052      	lsls	r2, r2, #1
   2f156:	5ad3      	ldrh	r3, [r2, r3]
   2f158:	2b00      	cmp	r3, #0
   2f15a:	d004      	beq.n	2f166 <ff_wtoupper+0x4a>
   2f15c:	4b06      	ldr	r3, [pc, #24]	; (2f178 <ff_wtoupper+0x5c>)
   2f15e:	68fa      	ldr	r2, [r7, #12]
   2f160:	0052      	lsls	r2, r2, #1
   2f162:	5ad3      	ldrh	r3, [r2, r3]
   2f164:	e001      	b.n	2f16a <ff_wtoupper+0x4e>
   2f166:	1dbb      	adds	r3, r7, #6
   2f168:	881b      	ldrh	r3, [r3, #0]
   2f16a:	0018      	movs	r0, r3
   2f16c:	46bd      	mov	sp, r7
   2f16e:	b004      	add	sp, #16
   2f170:	bd80      	pop	{r7, pc}
   2f172:	46c0      	nop			; (mov r8, r8)
   2f174:	0003a518 	.word	0x0003a518
   2f178:	0003a6f8 	.word	0x0003a6f8

0002f17c <NewMessageData>:
int cycle(MQTTClient* c, Timer* timer);
void MQTTRun(void* parm);
int waitfor(MQTTClient* c, int packet_type, Timer* timer);


static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
   2f17c:	b580      	push	{r7, lr}
   2f17e:	b084      	sub	sp, #16
   2f180:	af00      	add	r7, sp, #0
   2f182:	60f8      	str	r0, [r7, #12]
   2f184:	60b9      	str	r1, [r7, #8]
   2f186:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
   2f188:	68fb      	ldr	r3, [r7, #12]
   2f18a:	68ba      	ldr	r2, [r7, #8]
   2f18c:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
   2f18e:	68fb      	ldr	r3, [r7, #12]
   2f190:	687a      	ldr	r2, [r7, #4]
   2f192:	601a      	str	r2, [r3, #0]
}
   2f194:	46c0      	nop			; (mov r8, r8)
   2f196:	46bd      	mov	sp, r7
   2f198:	b004      	add	sp, #16
   2f19a:	bd80      	pop	{r7, pc}

0002f19c <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
   2f19c:	b580      	push	{r7, lr}
   2f19e:	b082      	sub	sp, #8
   2f1a0:	af00      	add	r7, sp, #0
   2f1a2:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   2f1a4:	687b      	ldr	r3, [r7, #4]
   2f1a6:	681b      	ldr	r3, [r3, #0]
   2f1a8:	4a07      	ldr	r2, [pc, #28]	; (2f1c8 <getNextPacketId+0x2c>)
   2f1aa:	4293      	cmp	r3, r2
   2f1ac:	d003      	beq.n	2f1b6 <getNextPacketId+0x1a>
   2f1ae:	687b      	ldr	r3, [r7, #4]
   2f1b0:	681b      	ldr	r3, [r3, #0]
   2f1b2:	1c5a      	adds	r2, r3, #1
   2f1b4:	e000      	b.n	2f1b8 <getNextPacketId+0x1c>
   2f1b6:	2201      	movs	r2, #1
   2f1b8:	687b      	ldr	r3, [r7, #4]
   2f1ba:	601a      	str	r2, [r3, #0]
   2f1bc:	687b      	ldr	r3, [r7, #4]
   2f1be:	681b      	ldr	r3, [r3, #0]
}
   2f1c0:	0018      	movs	r0, r3
   2f1c2:	46bd      	mov	sp, r7
   2f1c4:	b002      	add	sp, #8
   2f1c6:	bd80      	pop	{r7, pc}
   2f1c8:	0000ffff 	.word	0x0000ffff

0002f1cc <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   2f1cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f1ce:	b087      	sub	sp, #28
   2f1d0:	af00      	add	r7, sp, #0
   2f1d2:	60f8      	str	r0, [r7, #12]
   2f1d4:	60b9      	str	r1, [r7, #8]
   2f1d6:	607a      	str	r2, [r7, #4]
    int rc = FAILURE, 
   2f1d8:	2301      	movs	r3, #1
   2f1da:	425b      	negs	r3, r3
   2f1dc:	617b      	str	r3, [r7, #20]
        sent = 0;
   2f1de:	2300      	movs	r3, #0
   2f1e0:	613b      	str	r3, [r7, #16]
    
    while (sent < length && !TimerIsExpired(timer))
   2f1e2:	e01a      	b.n	2f21a <sendPacket+0x4e>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   2f1e4:	68fb      	ldr	r3, [r7, #12]
   2f1e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2f1e8:	68dc      	ldr	r4, [r3, #12]
   2f1ea:	68fb      	ldr	r3, [r7, #12]
   2f1ec:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2f1ee:	68fb      	ldr	r3, [r7, #12]
   2f1f0:	691a      	ldr	r2, [r3, #16]
   2f1f2:	693b      	ldr	r3, [r7, #16]
   2f1f4:	18d6      	adds	r6, r2, r3
   2f1f6:	687b      	ldr	r3, [r7, #4]
   2f1f8:	0018      	movs	r0, r3
   2f1fa:	4b1a      	ldr	r3, [pc, #104]	; (2f264 <sendPacket+0x98>)
   2f1fc:	4798      	blx	r3
   2f1fe:	0003      	movs	r3, r0
   2f200:	68ba      	ldr	r2, [r7, #8]
   2f202:	0031      	movs	r1, r6
   2f204:	0028      	movs	r0, r5
   2f206:	47a0      	blx	r4
   2f208:	0003      	movs	r3, r0
   2f20a:	617b      	str	r3, [r7, #20]
        if (rc < 0)  // there was an error writing the data
   2f20c:	697b      	ldr	r3, [r7, #20]
   2f20e:	2b00      	cmp	r3, #0
   2f210:	db0e      	blt.n	2f230 <sendPacket+0x64>
            break;
        sent += rc;
   2f212:	693a      	ldr	r2, [r7, #16]
   2f214:	697b      	ldr	r3, [r7, #20]
   2f216:	18d3      	adds	r3, r2, r3
   2f218:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
   2f21a:	693a      	ldr	r2, [r7, #16]
   2f21c:	68bb      	ldr	r3, [r7, #8]
   2f21e:	429a      	cmp	r2, r3
   2f220:	da07      	bge.n	2f232 <sendPacket+0x66>
   2f222:	687b      	ldr	r3, [r7, #4]
   2f224:	0018      	movs	r0, r3
   2f226:	4b10      	ldr	r3, [pc, #64]	; (2f268 <sendPacket+0x9c>)
   2f228:	4798      	blx	r3
   2f22a:	1e03      	subs	r3, r0, #0
   2f22c:	d0da      	beq.n	2f1e4 <sendPacket+0x18>
   2f22e:	e000      	b.n	2f232 <sendPacket+0x66>
            break;
   2f230:	46c0      	nop			; (mov r8, r8)
    }
    if (sent == length)
   2f232:	693a      	ldr	r2, [r7, #16]
   2f234:	68bb      	ldr	r3, [r7, #8]
   2f236:	429a      	cmp	r2, r3
   2f238:	d10b      	bne.n	2f252 <sendPacket+0x86>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   2f23a:	68fb      	ldr	r3, [r7, #12]
   2f23c:	3354      	adds	r3, #84	; 0x54
   2f23e:	001a      	movs	r2, r3
   2f240:	68fb      	ldr	r3, [r7, #12]
   2f242:	699b      	ldr	r3, [r3, #24]
   2f244:	0019      	movs	r1, r3
   2f246:	0010      	movs	r0, r2
   2f248:	4b08      	ldr	r3, [pc, #32]	; (2f26c <sendPacket+0xa0>)
   2f24a:	4798      	blx	r3
        rc = SUCCESS;
   2f24c:	2300      	movs	r3, #0
   2f24e:	617b      	str	r3, [r7, #20]
   2f250:	e002      	b.n	2f258 <sendPacket+0x8c>
    }
    else
        rc = FAILURE;
   2f252:	2301      	movs	r3, #1
   2f254:	425b      	negs	r3, r3
   2f256:	617b      	str	r3, [r7, #20]
    return rc;
   2f258:	697b      	ldr	r3, [r7, #20]
}
   2f25a:	0018      	movs	r0, r3
   2f25c:	46bd      	mov	sp, r7
   2f25e:	b007      	add	sp, #28
   2f260:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2f262:	46c0      	nop			; (mov r8, r8)
   2f264:	0003002d 	.word	0x0003002d
   2f268:	0002ffb1 	.word	0x0002ffb1
   2f26c:	00030005 	.word	0x00030005

0002f270 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   2f270:	b580      	push	{r7, lr}
   2f272:	b086      	sub	sp, #24
   2f274:	af00      	add	r7, sp, #0
   2f276:	60f8      	str	r0, [r7, #12]
   2f278:	60b9      	str	r1, [r7, #8]
   2f27a:	607a      	str	r2, [r7, #4]
   2f27c:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
   2f27e:	68fb      	ldr	r3, [r7, #12]
   2f280:	68ba      	ldr	r2, [r7, #8]
   2f282:	651a      	str	r2, [r3, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2f284:	2300      	movs	r3, #0
   2f286:	617b      	str	r3, [r7, #20]
   2f288:	e00a      	b.n	2f2a0 <MQTTClientInit+0x30>
        c->messageHandlers[i].topicFilter = 0;
   2f28a:	68fa      	ldr	r2, [r7, #12]
   2f28c:	697b      	ldr	r3, [r7, #20]
   2f28e:	3304      	adds	r3, #4
   2f290:	00db      	lsls	r3, r3, #3
   2f292:	18d3      	adds	r3, r2, r3
   2f294:	3304      	adds	r3, #4
   2f296:	2200      	movs	r2, #0
   2f298:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2f29a:	697b      	ldr	r3, [r7, #20]
   2f29c:	3301      	adds	r3, #1
   2f29e:	617b      	str	r3, [r7, #20]
   2f2a0:	697b      	ldr	r3, [r7, #20]
   2f2a2:	2b04      	cmp	r3, #4
   2f2a4:	ddf1      	ble.n	2f28a <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
   2f2a6:	68fb      	ldr	r3, [r7, #12]
   2f2a8:	687a      	ldr	r2, [r7, #4]
   2f2aa:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
   2f2ac:	68fb      	ldr	r3, [r7, #12]
   2f2ae:	683a      	ldr	r2, [r7, #0]
   2f2b0:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
   2f2b2:	68fb      	ldr	r3, [r7, #12]
   2f2b4:	6a3a      	ldr	r2, [r7, #32]
   2f2b6:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
   2f2b8:	68fb      	ldr	r3, [r7, #12]
   2f2ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2f2bc:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
   2f2be:	68fb      	ldr	r3, [r7, #12]
   2f2c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f2c2:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
   2f2c4:	68fb      	ldr	r3, [r7, #12]
   2f2c6:	2200      	movs	r2, #0
   2f2c8:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
   2f2ca:	68fb      	ldr	r3, [r7, #12]
   2f2cc:	2200      	movs	r2, #0
   2f2ce:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
   2f2d0:	68fb      	ldr	r3, [r7, #12]
   2f2d2:	2200      	movs	r2, #0
   2f2d4:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
   2f2d6:	68fb      	ldr	r3, [r7, #12]
   2f2d8:	2201      	movs	r2, #1
   2f2da:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
   2f2dc:	68fb      	ldr	r3, [r7, #12]
   2f2de:	3354      	adds	r3, #84	; 0x54
   2f2e0:	0018      	movs	r0, r3
   2f2e2:	4b03      	ldr	r3, [pc, #12]	; (2f2f0 <MQTTClientInit+0x80>)
   2f2e4:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   2f2e6:	46c0      	nop			; (mov r8, r8)
   2f2e8:	46bd      	mov	sp, r7
   2f2ea:	b006      	add	sp, #24
   2f2ec:	bd80      	pop	{r7, pc}
   2f2ee:	46c0      	nop			; (mov r8, r8)
   2f2f0:	00030055 	.word	0x00030055

0002f2f4 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
   2f2f4:	b590      	push	{r4, r7, lr}
   2f2f6:	b08b      	sub	sp, #44	; 0x2c
   2f2f8:	af00      	add	r7, sp, #0
   2f2fa:	60f8      	str	r0, [r7, #12]
   2f2fc:	60b9      	str	r1, [r7, #8]
   2f2fe:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
   2f300:	2301      	movs	r3, #1
   2f302:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
   2f304:	2300      	movs	r3, #0
   2f306:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
   2f308:	2304      	movs	r3, #4
   2f30a:	61fb      	str	r3, [r7, #28]

    *value = 0;
   2f30c:	68bb      	ldr	r3, [r7, #8]
   2f30e:	2200      	movs	r2, #0
   2f310:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
   2f312:	2301      	movs	r3, #1
   2f314:	425b      	negs	r3, r3
   2f316:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   2f318:	6a3b      	ldr	r3, [r7, #32]
   2f31a:	3301      	adds	r3, #1
   2f31c:	623b      	str	r3, [r7, #32]
   2f31e:	6a3a      	ldr	r2, [r7, #32]
   2f320:	69fb      	ldr	r3, [r7, #28]
   2f322:	429a      	cmp	r2, r3
   2f324:	dd03      	ble.n	2f32e <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
   2f326:	2301      	movs	r3, #1
   2f328:	425b      	negs	r3, r3
   2f32a:	61bb      	str	r3, [r7, #24]
            goto exit;
   2f32c:	e026      	b.n	2f37c <decodePacket+0x88>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   2f32e:	68fb      	ldr	r3, [r7, #12]
   2f330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2f332:	689c      	ldr	r4, [r3, #8]
   2f334:	68fb      	ldr	r3, [r7, #12]
   2f336:	6d18      	ldr	r0, [r3, #80]	; 0x50
   2f338:	687b      	ldr	r3, [r7, #4]
   2f33a:	2217      	movs	r2, #23
   2f33c:	18b9      	adds	r1, r7, r2
   2f33e:	2201      	movs	r2, #1
   2f340:	47a0      	blx	r4
   2f342:	0003      	movs	r3, r0
   2f344:	61bb      	str	r3, [r7, #24]
        if (rc != 1)
   2f346:	69bb      	ldr	r3, [r7, #24]
   2f348:	2b01      	cmp	r3, #1
   2f34a:	d116      	bne.n	2f37a <decodePacket+0x86>
            goto exit;
        *value += (i & 127) * multiplier;
   2f34c:	68bb      	ldr	r3, [r7, #8]
   2f34e:	681a      	ldr	r2, [r3, #0]
   2f350:	2317      	movs	r3, #23
   2f352:	18fb      	adds	r3, r7, r3
   2f354:	781b      	ldrb	r3, [r3, #0]
   2f356:	0019      	movs	r1, r3
   2f358:	237f      	movs	r3, #127	; 0x7f
   2f35a:	400b      	ands	r3, r1
   2f35c:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2f35e:	434b      	muls	r3, r1
   2f360:	18d2      	adds	r2, r2, r3
   2f362:	68bb      	ldr	r3, [r7, #8]
   2f364:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
   2f366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f368:	01db      	lsls	r3, r3, #7
   2f36a:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
   2f36c:	2317      	movs	r3, #23
   2f36e:	18fb      	adds	r3, r7, r3
   2f370:	781b      	ldrb	r3, [r3, #0]
   2f372:	b25b      	sxtb	r3, r3
   2f374:	2b00      	cmp	r3, #0
   2f376:	dbcc      	blt.n	2f312 <decodePacket+0x1e>
   2f378:	e000      	b.n	2f37c <decodePacket+0x88>
            goto exit;
   2f37a:	46c0      	nop			; (mov r8, r8)
exit:
    return len;
   2f37c:	6a3b      	ldr	r3, [r7, #32]
}
   2f37e:	0018      	movs	r0, r3
   2f380:	46bd      	mov	sp, r7
   2f382:	b00b      	add	sp, #44	; 0x2c
   2f384:	bd90      	pop	{r4, r7, pc}
	...

0002f388 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
   2f388:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f38a:	46c6      	mov	lr, r8
   2f38c:	b500      	push	{lr}
   2f38e:	b086      	sub	sp, #24
   2f390:	af00      	add	r7, sp, #0
   2f392:	6078      	str	r0, [r7, #4]
   2f394:	6039      	str	r1, [r7, #0]
    int rc = FAILURE;
   2f396:	2301      	movs	r3, #1
   2f398:	425b      	negs	r3, r3
   2f39a:	617b      	str	r3, [r7, #20]
    MQTTHeader header = {0};
   2f39c:	2300      	movs	r3, #0
   2f39e:	60fb      	str	r3, [r7, #12]
    int len = 0;
   2f3a0:	2300      	movs	r3, #0
   2f3a2:	613b      	str	r3, [r7, #16]
    int rem_len = 0;
   2f3a4:	2300      	movs	r3, #0
   2f3a6:	60bb      	str	r3, [r7, #8]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   2f3a8:	687b      	ldr	r3, [r7, #4]
   2f3aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2f3ac:	689c      	ldr	r4, [r3, #8]
   2f3ae:	687b      	ldr	r3, [r7, #4]
   2f3b0:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2f3b2:	687b      	ldr	r3, [r7, #4]
   2f3b4:	695e      	ldr	r6, [r3, #20]
   2f3b6:	683b      	ldr	r3, [r7, #0]
   2f3b8:	0018      	movs	r0, r3
   2f3ba:	4b2b      	ldr	r3, [pc, #172]	; (2f468 <readPacket+0xe0>)
   2f3bc:	4798      	blx	r3
   2f3be:	0003      	movs	r3, r0
   2f3c0:	2201      	movs	r2, #1
   2f3c2:	0031      	movs	r1, r6
   2f3c4:	0028      	movs	r0, r5
   2f3c6:	47a0      	blx	r4
   2f3c8:	0003      	movs	r3, r0
   2f3ca:	2b01      	cmp	r3, #1
   2f3cc:	d141      	bne.n	2f452 <readPacket+0xca>
        goto exit;

    len = 1;
   2f3ce:	2301      	movs	r3, #1
   2f3d0:	613b      	str	r3, [r7, #16]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   2f3d2:	683b      	ldr	r3, [r7, #0]
   2f3d4:	0018      	movs	r0, r3
   2f3d6:	4b24      	ldr	r3, [pc, #144]	; (2f468 <readPacket+0xe0>)
   2f3d8:	4798      	blx	r3
   2f3da:	0002      	movs	r2, r0
   2f3dc:	2308      	movs	r3, #8
   2f3de:	18f9      	adds	r1, r7, r3
   2f3e0:	687b      	ldr	r3, [r7, #4]
   2f3e2:	0018      	movs	r0, r3
   2f3e4:	4b21      	ldr	r3, [pc, #132]	; (2f46c <readPacket+0xe4>)
   2f3e6:	4798      	blx	r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   2f3e8:	687b      	ldr	r3, [r7, #4]
   2f3ea:	695b      	ldr	r3, [r3, #20]
   2f3ec:	3301      	adds	r3, #1
   2f3ee:	68ba      	ldr	r2, [r7, #8]
   2f3f0:	0011      	movs	r1, r2
   2f3f2:	0018      	movs	r0, r3
   2f3f4:	4b1e      	ldr	r3, [pc, #120]	; (2f470 <readPacket+0xe8>)
   2f3f6:	4798      	blx	r3
   2f3f8:	0002      	movs	r2, r0
   2f3fa:	693b      	ldr	r3, [r7, #16]
   2f3fc:	189b      	adds	r3, r3, r2
   2f3fe:	613b      	str	r3, [r7, #16]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   2f400:	68bb      	ldr	r3, [r7, #8]
   2f402:	2b00      	cmp	r3, #0
   2f404:	dd17      	ble.n	2f436 <readPacket+0xae>
   2f406:	687b      	ldr	r3, [r7, #4]
   2f408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2f40a:	689c      	ldr	r4, [r3, #8]
   2f40c:	687b      	ldr	r3, [r7, #4]
   2f40e:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2f410:	687b      	ldr	r3, [r7, #4]
   2f412:	695a      	ldr	r2, [r3, #20]
   2f414:	693b      	ldr	r3, [r7, #16]
   2f416:	18d6      	adds	r6, r2, r3
   2f418:	68bb      	ldr	r3, [r7, #8]
   2f41a:	4698      	mov	r8, r3
   2f41c:	683b      	ldr	r3, [r7, #0]
   2f41e:	0018      	movs	r0, r3
   2f420:	4b11      	ldr	r3, [pc, #68]	; (2f468 <readPacket+0xe0>)
   2f422:	4798      	blx	r3
   2f424:	0003      	movs	r3, r0
   2f426:	4642      	mov	r2, r8
   2f428:	0031      	movs	r1, r6
   2f42a:	0028      	movs	r0, r5
   2f42c:	47a0      	blx	r4
   2f42e:	0002      	movs	r2, r0
   2f430:	68bb      	ldr	r3, [r7, #8]
   2f432:	429a      	cmp	r2, r3
   2f434:	d10f      	bne.n	2f456 <readPacket+0xce>
        goto exit;

    header.byte = c->readbuf[0];
   2f436:	687b      	ldr	r3, [r7, #4]
   2f438:	695b      	ldr	r3, [r3, #20]
   2f43a:	781a      	ldrb	r2, [r3, #0]
   2f43c:	230c      	movs	r3, #12
   2f43e:	18fb      	adds	r3, r7, r3
   2f440:	701a      	strb	r2, [r3, #0]
    rc = header.bits.type;
   2f442:	230c      	movs	r3, #12
   2f444:	18fb      	adds	r3, r7, r3
   2f446:	781b      	ldrb	r3, [r3, #0]
   2f448:	061b      	lsls	r3, r3, #24
   2f44a:	0f1b      	lsrs	r3, r3, #28
   2f44c:	b2db      	uxtb	r3, r3
   2f44e:	617b      	str	r3, [r7, #20]
   2f450:	e002      	b.n	2f458 <readPacket+0xd0>
        goto exit;
   2f452:	46c0      	nop			; (mov r8, r8)
   2f454:	e000      	b.n	2f458 <readPacket+0xd0>
        goto exit;
   2f456:	46c0      	nop			; (mov r8, r8)
exit:
    return rc;
   2f458:	697b      	ldr	r3, [r7, #20]
}
   2f45a:	0018      	movs	r0, r3
   2f45c:	46bd      	mov	sp, r7
   2f45e:	b006      	add	sp, #24
   2f460:	bc04      	pop	{r2}
   2f462:	4690      	mov	r8, r2
   2f464:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2f466:	46c0      	nop			; (mov r8, r8)
   2f468:	0003002d 	.word	0x0003002d
   2f46c:	0002f2f5 	.word	0x0002f2f5
   2f470:	00030e05 	.word	0x00030e05

0002f474 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
   2f474:	b580      	push	{r7, lr}
   2f476:	b086      	sub	sp, #24
   2f478:	af00      	add	r7, sp, #0
   2f47a:	6078      	str	r0, [r7, #4]
   2f47c:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
   2f47e:	687b      	ldr	r3, [r7, #4]
   2f480:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
   2f482:	683b      	ldr	r3, [r7, #0]
   2f484:	689b      	ldr	r3, [r3, #8]
   2f486:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
   2f488:	683b      	ldr	r3, [r7, #0]
   2f48a:	685b      	ldr	r3, [r3, #4]
   2f48c:	001a      	movs	r2, r3
   2f48e:	693b      	ldr	r3, [r7, #16]
   2f490:	189b      	adds	r3, r3, r2
   2f492:	60bb      	str	r3, [r7, #8]
    
    while (*curf && curn < curn_end)
   2f494:	e039      	b.n	2f50a <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
   2f496:	693b      	ldr	r3, [r7, #16]
   2f498:	781b      	ldrb	r3, [r3, #0]
   2f49a:	2b2f      	cmp	r3, #47	; 0x2f
   2f49c:	d103      	bne.n	2f4a6 <isTopicMatched+0x32>
   2f49e:	697b      	ldr	r3, [r7, #20]
   2f4a0:	781b      	ldrb	r3, [r3, #0]
   2f4a2:	2b2f      	cmp	r3, #47	; 0x2f
   2f4a4:	d13a      	bne.n	2f51c <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   2f4a6:	697b      	ldr	r3, [r7, #20]
   2f4a8:	781b      	ldrb	r3, [r3, #0]
   2f4aa:	2b2b      	cmp	r3, #43	; 0x2b
   2f4ac:	d009      	beq.n	2f4c2 <isTopicMatched+0x4e>
   2f4ae:	697b      	ldr	r3, [r7, #20]
   2f4b0:	781b      	ldrb	r3, [r3, #0]
   2f4b2:	2b23      	cmp	r3, #35	; 0x23
   2f4b4:	d005      	beq.n	2f4c2 <isTopicMatched+0x4e>
   2f4b6:	697b      	ldr	r3, [r7, #20]
   2f4b8:	781a      	ldrb	r2, [r3, #0]
   2f4ba:	693b      	ldr	r3, [r7, #16]
   2f4bc:	781b      	ldrb	r3, [r3, #0]
   2f4be:	429a      	cmp	r2, r3
   2f4c0:	d12e      	bne.n	2f520 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
   2f4c2:	697b      	ldr	r3, [r7, #20]
   2f4c4:	781b      	ldrb	r3, [r3, #0]
   2f4c6:	2b2b      	cmp	r3, #43	; 0x2b
   2f4c8:	d112      	bne.n	2f4f0 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
   2f4ca:	693b      	ldr	r3, [r7, #16]
   2f4cc:	3301      	adds	r3, #1
   2f4ce:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2f4d0:	e005      	b.n	2f4de <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
   2f4d2:	693b      	ldr	r3, [r7, #16]
   2f4d4:	3301      	adds	r3, #1
   2f4d6:	613b      	str	r3, [r7, #16]
   2f4d8:	693b      	ldr	r3, [r7, #16]
   2f4da:	3301      	adds	r3, #1
   2f4dc:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2f4de:	68fa      	ldr	r2, [r7, #12]
   2f4e0:	68bb      	ldr	r3, [r7, #8]
   2f4e2:	429a      	cmp	r2, r3
   2f4e4:	d20b      	bcs.n	2f4fe <isTopicMatched+0x8a>
   2f4e6:	68fb      	ldr	r3, [r7, #12]
   2f4e8:	781b      	ldrb	r3, [r3, #0]
   2f4ea:	2b2f      	cmp	r3, #47	; 0x2f
   2f4ec:	d1f1      	bne.n	2f4d2 <isTopicMatched+0x5e>
   2f4ee:	e006      	b.n	2f4fe <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
   2f4f0:	697b      	ldr	r3, [r7, #20]
   2f4f2:	781b      	ldrb	r3, [r3, #0]
   2f4f4:	2b23      	cmp	r3, #35	; 0x23
   2f4f6:	d102      	bne.n	2f4fe <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
   2f4f8:	68bb      	ldr	r3, [r7, #8]
   2f4fa:	3b01      	subs	r3, #1
   2f4fc:	613b      	str	r3, [r7, #16]
        curf++;
   2f4fe:	697b      	ldr	r3, [r7, #20]
   2f500:	3301      	adds	r3, #1
   2f502:	617b      	str	r3, [r7, #20]
        curn++;
   2f504:	693b      	ldr	r3, [r7, #16]
   2f506:	3301      	adds	r3, #1
   2f508:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
   2f50a:	697b      	ldr	r3, [r7, #20]
   2f50c:	781b      	ldrb	r3, [r3, #0]
   2f50e:	2b00      	cmp	r3, #0
   2f510:	d007      	beq.n	2f522 <isTopicMatched+0xae>
   2f512:	693a      	ldr	r2, [r7, #16]
   2f514:	68bb      	ldr	r3, [r7, #8]
   2f516:	429a      	cmp	r2, r3
   2f518:	d3bd      	bcc.n	2f496 <isTopicMatched+0x22>
   2f51a:	e002      	b.n	2f522 <isTopicMatched+0xae>
            break;
   2f51c:	46c0      	nop			; (mov r8, r8)
   2f51e:	e000      	b.n	2f522 <isTopicMatched+0xae>
            break;
   2f520:	46c0      	nop			; (mov r8, r8)
    };
    
    return (curn == curn_end) && (*curf == '\0');
   2f522:	693a      	ldr	r2, [r7, #16]
   2f524:	68bb      	ldr	r3, [r7, #8]
   2f526:	429a      	cmp	r2, r3
   2f528:	d105      	bne.n	2f536 <isTopicMatched+0xc2>
   2f52a:	697b      	ldr	r3, [r7, #20]
   2f52c:	781b      	ldrb	r3, [r3, #0]
   2f52e:	2b00      	cmp	r3, #0
   2f530:	d101      	bne.n	2f536 <isTopicMatched+0xc2>
   2f532:	2301      	movs	r3, #1
   2f534:	e000      	b.n	2f538 <isTopicMatched+0xc4>
   2f536:	2300      	movs	r3, #0
   2f538:	b2db      	uxtb	r3, r3
}
   2f53a:	0018      	movs	r0, r3
   2f53c:	46bd      	mov	sp, r7
   2f53e:	b006      	add	sp, #24
   2f540:	bd80      	pop	{r7, pc}
	...

0002f544 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   2f544:	b580      	push	{r7, lr}
   2f546:	b08a      	sub	sp, #40	; 0x28
   2f548:	af00      	add	r7, sp, #0
   2f54a:	60f8      	str	r0, [r7, #12]
   2f54c:	60b9      	str	r1, [r7, #8]
   2f54e:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
   2f550:	2301      	movs	r3, #1
   2f552:	425b      	negs	r3, r3
   2f554:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2f556:	2300      	movs	r3, #0
   2f558:	627b      	str	r3, [r7, #36]	; 0x24
   2f55a:	e044      	b.n	2f5e6 <deliverMessage+0xa2>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2f55c:	68fa      	ldr	r2, [r7, #12]
   2f55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f560:	3304      	adds	r3, #4
   2f562:	00db      	lsls	r3, r3, #3
   2f564:	18d3      	adds	r3, r2, r3
   2f566:	3304      	adds	r3, #4
   2f568:	681b      	ldr	r3, [r3, #0]
   2f56a:	2b00      	cmp	r3, #0
   2f56c:	d038      	beq.n	2f5e0 <deliverMessage+0x9c>
   2f56e:	68fa      	ldr	r2, [r7, #12]
   2f570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f572:	3304      	adds	r3, #4
   2f574:	00db      	lsls	r3, r3, #3
   2f576:	18d3      	adds	r3, r2, r3
   2f578:	3304      	adds	r3, #4
   2f57a:	681a      	ldr	r2, [r3, #0]
   2f57c:	68bb      	ldr	r3, [r7, #8]
   2f57e:	0011      	movs	r1, r2
   2f580:	0018      	movs	r0, r3
   2f582:	4b28      	ldr	r3, [pc, #160]	; (2f624 <deliverMessage+0xe0>)
   2f584:	4798      	blx	r3
   2f586:	1e03      	subs	r3, r0, #0
   2f588:	d10d      	bne.n	2f5a6 <deliverMessage+0x62>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   2f58a:	68fa      	ldr	r2, [r7, #12]
   2f58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f58e:	3304      	adds	r3, #4
   2f590:	00db      	lsls	r3, r3, #3
   2f592:	18d3      	adds	r3, r2, r3
   2f594:	3304      	adds	r3, #4
   2f596:	681b      	ldr	r3, [r3, #0]
   2f598:	68ba      	ldr	r2, [r7, #8]
   2f59a:	0011      	movs	r1, r2
   2f59c:	0018      	movs	r0, r3
   2f59e:	4b22      	ldr	r3, [pc, #136]	; (2f628 <deliverMessage+0xe4>)
   2f5a0:	4798      	blx	r3
   2f5a2:	1e03      	subs	r3, r0, #0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2f5a4:	d01c      	beq.n	2f5e0 <deliverMessage+0x9c>
        {
            if (c->messageHandlers[i].fp != NULL)
   2f5a6:	68fa      	ldr	r2, [r7, #12]
   2f5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f5aa:	3304      	adds	r3, #4
   2f5ac:	00db      	lsls	r3, r3, #3
   2f5ae:	18d3      	adds	r3, r2, r3
   2f5b0:	3308      	adds	r3, #8
   2f5b2:	681b      	ldr	r3, [r3, #0]
   2f5b4:	2b00      	cmp	r3, #0
   2f5b6:	d013      	beq.n	2f5e0 <deliverMessage+0x9c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
   2f5b8:	687a      	ldr	r2, [r7, #4]
   2f5ba:	68b9      	ldr	r1, [r7, #8]
   2f5bc:	2318      	movs	r3, #24
   2f5be:	18fb      	adds	r3, r7, r3
   2f5c0:	0018      	movs	r0, r3
   2f5c2:	4b1a      	ldr	r3, [pc, #104]	; (2f62c <deliverMessage+0xe8>)
   2f5c4:	4798      	blx	r3
                c->messageHandlers[i].fp(&md);
   2f5c6:	68fa      	ldr	r2, [r7, #12]
   2f5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f5ca:	3304      	adds	r3, #4
   2f5cc:	00db      	lsls	r3, r3, #3
   2f5ce:	18d3      	adds	r3, r2, r3
   2f5d0:	3308      	adds	r3, #8
   2f5d2:	681b      	ldr	r3, [r3, #0]
   2f5d4:	2218      	movs	r2, #24
   2f5d6:	18ba      	adds	r2, r7, r2
   2f5d8:	0010      	movs	r0, r2
   2f5da:	4798      	blx	r3
                rc = SUCCESS;
   2f5dc:	2300      	movs	r3, #0
   2f5de:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2f5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f5e2:	3301      	adds	r3, #1
   2f5e4:	627b      	str	r3, [r7, #36]	; 0x24
   2f5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f5e8:	2b04      	cmp	r3, #4
   2f5ea:	ddb7      	ble.n	2f55c <deliverMessage+0x18>
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   2f5ec:	6a3b      	ldr	r3, [r7, #32]
   2f5ee:	3301      	adds	r3, #1
   2f5f0:	d112      	bne.n	2f618 <deliverMessage+0xd4>
   2f5f2:	68fb      	ldr	r3, [r7, #12]
   2f5f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f5f6:	2b00      	cmp	r3, #0
   2f5f8:	d00e      	beq.n	2f618 <deliverMessage+0xd4>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
   2f5fa:	687a      	ldr	r2, [r7, #4]
   2f5fc:	68b9      	ldr	r1, [r7, #8]
   2f5fe:	2310      	movs	r3, #16
   2f600:	18fb      	adds	r3, r7, r3
   2f602:	0018      	movs	r0, r3
   2f604:	4b09      	ldr	r3, [pc, #36]	; (2f62c <deliverMessage+0xe8>)
   2f606:	4798      	blx	r3
        c->defaultMessageHandler(&md);
   2f608:	68fb      	ldr	r3, [r7, #12]
   2f60a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f60c:	2210      	movs	r2, #16
   2f60e:	18ba      	adds	r2, r7, r2
   2f610:	0010      	movs	r0, r2
   2f612:	4798      	blx	r3
        rc = SUCCESS;
   2f614:	2300      	movs	r3, #0
   2f616:	623b      	str	r3, [r7, #32]
    }   
    
    return rc;
   2f618:	6a3b      	ldr	r3, [r7, #32]
}
   2f61a:	0018      	movs	r0, r3
   2f61c:	46bd      	mov	sp, r7
   2f61e:	b00a      	add	sp, #40	; 0x28
   2f620:	bd80      	pop	{r7, pc}
   2f622:	46c0      	nop			; (mov r8, r8)
   2f624:	00031219 	.word	0x00031219
   2f628:	0002f475 	.word	0x0002f475
   2f62c:	0002f17d 	.word	0x0002f17d

0002f630 <keepalive>:


int keepalive(MQTTClient* c)
{
   2f630:	b580      	push	{r7, lr}
   2f632:	b088      	sub	sp, #32
   2f634:	af00      	add	r7, sp, #0
   2f636:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2f638:	2301      	movs	r3, #1
   2f63a:	425b      	negs	r3, r3
   2f63c:	61fb      	str	r3, [r7, #28]

    if (c->keepAliveInterval == 0)
   2f63e:	687b      	ldr	r3, [r7, #4]
   2f640:	699b      	ldr	r3, [r3, #24]
   2f642:	2b00      	cmp	r3, #0
   2f644:	d102      	bne.n	2f64c <keepalive+0x1c>
    {
        rc = SUCCESS;
   2f646:	2300      	movs	r3, #0
   2f648:	61fb      	str	r3, [r7, #28]
        goto exit;
   2f64a:	e033      	b.n	2f6b4 <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
   2f64c:	687b      	ldr	r3, [r7, #4]
   2f64e:	3354      	adds	r3, #84	; 0x54
   2f650:	0018      	movs	r0, r3
   2f652:	4b1b      	ldr	r3, [pc, #108]	; (2f6c0 <keepalive+0x90>)
   2f654:	4798      	blx	r3
   2f656:	1e03      	subs	r3, r0, #0
   2f658:	d02c      	beq.n	2f6b4 <keepalive+0x84>
    {
        if (!c->ping_outstanding)
   2f65a:	687b      	ldr	r3, [r7, #4]
   2f65c:	7f1b      	ldrb	r3, [r3, #28]
   2f65e:	2b00      	cmp	r3, #0
   2f660:	d128      	bne.n	2f6b4 <keepalive+0x84>
        {
            Timer timer;
            TimerInit(&timer);
   2f662:	230c      	movs	r3, #12
   2f664:	18fb      	adds	r3, r7, r3
   2f666:	0018      	movs	r0, r3
   2f668:	4b16      	ldr	r3, [pc, #88]	; (2f6c4 <keepalive+0x94>)
   2f66a:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   2f66c:	23fa      	movs	r3, #250	; 0xfa
   2f66e:	009a      	lsls	r2, r3, #2
   2f670:	230c      	movs	r3, #12
   2f672:	18fb      	adds	r3, r7, r3
   2f674:	0011      	movs	r1, r2
   2f676:	0018      	movs	r0, r3
   2f678:	4b13      	ldr	r3, [pc, #76]	; (2f6c8 <keepalive+0x98>)
   2f67a:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   2f67c:	687b      	ldr	r3, [r7, #4]
   2f67e:	691a      	ldr	r2, [r3, #16]
   2f680:	687b      	ldr	r3, [r7, #4]
   2f682:	689b      	ldr	r3, [r3, #8]
   2f684:	0019      	movs	r1, r3
   2f686:	0010      	movs	r0, r2
   2f688:	4b10      	ldr	r3, [pc, #64]	; (2f6cc <keepalive+0x9c>)
   2f68a:	4798      	blx	r3
   2f68c:	0003      	movs	r3, r0
   2f68e:	61bb      	str	r3, [r7, #24]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   2f690:	69bb      	ldr	r3, [r7, #24]
   2f692:	2b00      	cmp	r3, #0
   2f694:	dd0e      	ble.n	2f6b4 <keepalive+0x84>
   2f696:	230c      	movs	r3, #12
   2f698:	18fa      	adds	r2, r7, r3
   2f69a:	69b9      	ldr	r1, [r7, #24]
   2f69c:	687b      	ldr	r3, [r7, #4]
   2f69e:	0018      	movs	r0, r3
   2f6a0:	4b0b      	ldr	r3, [pc, #44]	; (2f6d0 <keepalive+0xa0>)
   2f6a2:	4798      	blx	r3
   2f6a4:	0003      	movs	r3, r0
   2f6a6:	61fb      	str	r3, [r7, #28]
   2f6a8:	69fb      	ldr	r3, [r7, #28]
   2f6aa:	2b00      	cmp	r3, #0
   2f6ac:	d102      	bne.n	2f6b4 <keepalive+0x84>
                c->ping_outstanding = 1;
   2f6ae:	687b      	ldr	r3, [r7, #4]
   2f6b0:	2201      	movs	r2, #1
   2f6b2:	771a      	strb	r2, [r3, #28]
        }
    }

exit:
    return rc;
   2f6b4:	69fb      	ldr	r3, [r7, #28]
}
   2f6b6:	0018      	movs	r0, r3
   2f6b8:	46bd      	mov	sp, r7
   2f6ba:	b008      	add	sp, #32
   2f6bc:	bd80      	pop	{r7, pc}
   2f6be:	46c0      	nop			; (mov r8, r8)
   2f6c0:	0002ffb1 	.word	0x0002ffb1
   2f6c4:	00030055 	.word	0x00030055
   2f6c8:	0002ffdd 	.word	0x0002ffdd
   2f6cc:	00030c29 	.word	0x00030c29
   2f6d0:	0002f1cd 	.word	0x0002f1cd

0002f6d4 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   2f6d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f6d6:	b095      	sub	sp, #84	; 0x54
   2f6d8:	af06      	add	r7, sp, #24
   2f6da:	6078      	str	r0, [r7, #4]
   2f6dc:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
   2f6de:	683a      	ldr	r2, [r7, #0]
   2f6e0:	687b      	ldr	r3, [r7, #4]
   2f6e2:	0011      	movs	r1, r2
   2f6e4:	0018      	movs	r0, r3
   2f6e6:	4b70      	ldr	r3, [pc, #448]	; (2f8a8 <cycle+0x1d4>)
   2f6e8:	4798      	blx	r3
   2f6ea:	0002      	movs	r2, r0
   2f6ec:	232e      	movs	r3, #46	; 0x2e
   2f6ee:	18fb      	adds	r3, r7, r3
   2f6f0:	801a      	strh	r2, [r3, #0]
    
    int len = 0,
   2f6f2:	2300      	movs	r3, #0
   2f6f4:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESS;
   2f6f6:	2300      	movs	r3, #0
   2f6f8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
   2f6fa:	232e      	movs	r3, #46	; 0x2e
   2f6fc:	18fb      	adds	r3, r7, r3
   2f6fe:	881b      	ldrh	r3, [r3, #0]
   2f700:	2b0d      	cmp	r3, #13
   2f702:	d900      	bls.n	2f706 <cycle+0x32>
   2f704:	e0bd      	b.n	2f882 <cycle+0x1ae>
   2f706:	009a      	lsls	r2, r3, #2
   2f708:	4b68      	ldr	r3, [pc, #416]	; (2f8ac <cycle+0x1d8>)
   2f70a:	18d3      	adds	r3, r2, r3
   2f70c:	681b      	ldr	r3, [r3, #0]
   2f70e:	469f      	mov	pc, r3
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2f710:	687b      	ldr	r3, [r7, #4]
   2f712:	695a      	ldr	r2, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
   2f714:	687b      	ldr	r3, [r7, #4]
   2f716:	68db      	ldr	r3, [r3, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2f718:	001e      	movs	r6, r3
   2f71a:	2310      	movs	r3, #16
   2f71c:	18fb      	adds	r3, r7, r3
   2f71e:	1d1d      	adds	r5, r3, #4
   2f720:	2310      	movs	r3, #16
   2f722:	18fb      	adds	r3, r7, r3
   2f724:	1c5c      	adds	r4, r3, #1
   2f726:	230c      	movs	r3, #12
   2f728:	18f9      	adds	r1, r7, r3
   2f72a:	2310      	movs	r3, #16
   2f72c:	18fb      	adds	r3, r7, r3
   2f72e:	1c98      	adds	r0, r3, #2
   2f730:	9604      	str	r6, [sp, #16]
   2f732:	9203      	str	r2, [sp, #12]
   2f734:	2310      	movs	r3, #16
   2f736:	18fb      	adds	r3, r7, r3
   2f738:	330c      	adds	r3, #12
   2f73a:	9302      	str	r3, [sp, #8]
   2f73c:	2310      	movs	r3, #16
   2f73e:	18fb      	adds	r3, r7, r3
   2f740:	3308      	adds	r3, #8
   2f742:	9301      	str	r3, [sp, #4]
   2f744:	2320      	movs	r3, #32
   2f746:	18fb      	adds	r3, r7, r3
   2f748:	9300      	str	r3, [sp, #0]
   2f74a:	002b      	movs	r3, r5
   2f74c:	0022      	movs	r2, r4
   2f74e:	4c58      	ldr	r4, [pc, #352]	; (2f8b0 <cycle+0x1dc>)
   2f750:	47a0      	blx	r4
   2f752:	0003      	movs	r3, r0
   2f754:	2b01      	cmp	r3, #1
   2f756:	d000      	beq.n	2f75a <cycle+0x86>
   2f758:	e098      	b.n	2f88c <cycle+0x1b8>
                goto exit;
            msg.qos = (enum QoS)intQoS;
   2f75a:	68fb      	ldr	r3, [r7, #12]
   2f75c:	b2da      	uxtb	r2, r3
   2f75e:	2310      	movs	r3, #16
   2f760:	18fb      	adds	r3, r7, r3
   2f762:	701a      	strb	r2, [r3, #0]
            deliverMessage(c, &topicName, &msg);
   2f764:	2310      	movs	r3, #16
   2f766:	18fa      	adds	r2, r7, r3
   2f768:	2320      	movs	r3, #32
   2f76a:	18f9      	adds	r1, r7, r3
   2f76c:	687b      	ldr	r3, [r7, #4]
   2f76e:	0018      	movs	r0, r3
   2f770:	4b50      	ldr	r3, [pc, #320]	; (2f8b4 <cycle+0x1e0>)
   2f772:	4798      	blx	r3
            if (msg.qos != QOS0)
   2f774:	2310      	movs	r3, #16
   2f776:	18fb      	adds	r3, r7, r3
   2f778:	781b      	ldrb	r3, [r3, #0]
   2f77a:	2b00      	cmp	r3, #0
   2f77c:	d100      	bne.n	2f780 <cycle+0xac>
   2f77e:	e07d      	b.n	2f87c <cycle+0x1a8>
            {
                if (msg.qos == QOS1)
   2f780:	2310      	movs	r3, #16
   2f782:	18fb      	adds	r3, r7, r3
   2f784:	781b      	ldrb	r3, [r3, #0]
   2f786:	2b01      	cmp	r3, #1
   2f788:	d10f      	bne.n	2f7aa <cycle+0xd6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   2f78a:	687b      	ldr	r3, [r7, #4]
   2f78c:	6918      	ldr	r0, [r3, #16]
   2f78e:	687b      	ldr	r3, [r7, #4]
   2f790:	689b      	ldr	r3, [r3, #8]
   2f792:	0019      	movs	r1, r3
   2f794:	2310      	movs	r3, #16
   2f796:	18fb      	adds	r3, r7, r3
   2f798:	889b      	ldrh	r3, [r3, #4]
   2f79a:	9300      	str	r3, [sp, #0]
   2f79c:	2300      	movs	r3, #0
   2f79e:	2204      	movs	r2, #4
   2f7a0:	4c45      	ldr	r4, [pc, #276]	; (2f8b8 <cycle+0x1e4>)
   2f7a2:	47a0      	blx	r4
   2f7a4:	0003      	movs	r3, r0
   2f7a6:	637b      	str	r3, [r7, #52]	; 0x34
   2f7a8:	e013      	b.n	2f7d2 <cycle+0xfe>
                else if (msg.qos == QOS2)
   2f7aa:	2310      	movs	r3, #16
   2f7ac:	18fb      	adds	r3, r7, r3
   2f7ae:	781b      	ldrb	r3, [r3, #0]
   2f7b0:	2b02      	cmp	r3, #2
   2f7b2:	d10e      	bne.n	2f7d2 <cycle+0xfe>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   2f7b4:	687b      	ldr	r3, [r7, #4]
   2f7b6:	6918      	ldr	r0, [r3, #16]
   2f7b8:	687b      	ldr	r3, [r7, #4]
   2f7ba:	689b      	ldr	r3, [r3, #8]
   2f7bc:	0019      	movs	r1, r3
   2f7be:	2310      	movs	r3, #16
   2f7c0:	18fb      	adds	r3, r7, r3
   2f7c2:	889b      	ldrh	r3, [r3, #4]
   2f7c4:	9300      	str	r3, [sp, #0]
   2f7c6:	2300      	movs	r3, #0
   2f7c8:	2205      	movs	r2, #5
   2f7ca:	4c3b      	ldr	r4, [pc, #236]	; (2f8b8 <cycle+0x1e4>)
   2f7cc:	47a0      	blx	r4
   2f7ce:	0003      	movs	r3, r0
   2f7d0:	637b      	str	r3, [r7, #52]	; 0x34
                if (len <= 0)
   2f7d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2f7d4:	2b00      	cmp	r3, #0
   2f7d6:	dc03      	bgt.n	2f7e0 <cycle+0x10c>
                    rc = FAILURE;
   2f7d8:	2301      	movs	r3, #1
   2f7da:	425b      	negs	r3, r3
   2f7dc:	633b      	str	r3, [r7, #48]	; 0x30
   2f7de:	e007      	b.n	2f7f0 <cycle+0x11c>
                else
                    rc = sendPacket(c, len, timer);
   2f7e0:	683a      	ldr	r2, [r7, #0]
   2f7e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2f7e4:	687b      	ldr	r3, [r7, #4]
   2f7e6:	0018      	movs	r0, r3
   2f7e8:	4b34      	ldr	r3, [pc, #208]	; (2f8bc <cycle+0x1e8>)
   2f7ea:	4798      	blx	r3
   2f7ec:	0003      	movs	r3, r0
   2f7ee:	633b      	str	r3, [r7, #48]	; 0x30
                if (rc == FAILURE)
   2f7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f7f2:	3301      	adds	r3, #1
   2f7f4:	d142      	bne.n	2f87c <cycle+0x1a8>
                    goto exit; // there was a problem
   2f7f6:	46c0      	nop			; (mov r8, r8)
   2f7f8:	e049      	b.n	2f88e <cycle+0x1ba>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2f7fa:	687b      	ldr	r3, [r7, #4]
   2f7fc:	695c      	ldr	r4, [r3, #20]
   2f7fe:	687b      	ldr	r3, [r7, #4]
   2f800:	68db      	ldr	r3, [r3, #12]
   2f802:	220a      	movs	r2, #10
   2f804:	18ba      	adds	r2, r7, r2
   2f806:	2109      	movs	r1, #9
   2f808:	1879      	adds	r1, r7, r1
   2f80a:	2008      	movs	r0, #8
   2f80c:	1838      	adds	r0, r7, r0
   2f80e:	9300      	str	r3, [sp, #0]
   2f810:	0023      	movs	r3, r4
   2f812:	4c2b      	ldr	r4, [pc, #172]	; (2f8c0 <cycle+0x1ec>)
   2f814:	47a0      	blx	r4
   2f816:	0003      	movs	r3, r0
   2f818:	2b01      	cmp	r3, #1
   2f81a:	d003      	beq.n	2f824 <cycle+0x150>
                rc = FAILURE;
   2f81c:	2301      	movs	r3, #1
   2f81e:	425b      	negs	r3, r3
   2f820:	633b      	str	r3, [r7, #48]	; 0x30
   2f822:	e023      	b.n	2f86c <cycle+0x198>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   2f824:	687b      	ldr	r3, [r7, #4]
   2f826:	6918      	ldr	r0, [r3, #16]
   2f828:	687b      	ldr	r3, [r7, #4]
   2f82a:	689b      	ldr	r3, [r3, #8]
   2f82c:	0019      	movs	r1, r3
   2f82e:	230a      	movs	r3, #10
   2f830:	18fb      	adds	r3, r7, r3
   2f832:	881b      	ldrh	r3, [r3, #0]
   2f834:	9300      	str	r3, [sp, #0]
   2f836:	2300      	movs	r3, #0
   2f838:	2206      	movs	r2, #6
   2f83a:	4c1f      	ldr	r4, [pc, #124]	; (2f8b8 <cycle+0x1e4>)
   2f83c:	47a0      	blx	r4
   2f83e:	0003      	movs	r3, r0
   2f840:	637b      	str	r3, [r7, #52]	; 0x34
   2f842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2f844:	2b00      	cmp	r3, #0
   2f846:	dc03      	bgt.n	2f850 <cycle+0x17c>
                rc = FAILURE;
   2f848:	2301      	movs	r3, #1
   2f84a:	425b      	negs	r3, r3
   2f84c:	633b      	str	r3, [r7, #48]	; 0x30
   2f84e:	e00d      	b.n	2f86c <cycle+0x198>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   2f850:	683a      	ldr	r2, [r7, #0]
   2f852:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2f854:	687b      	ldr	r3, [r7, #4]
   2f856:	0018      	movs	r0, r3
   2f858:	4b18      	ldr	r3, [pc, #96]	; (2f8bc <cycle+0x1e8>)
   2f85a:	4798      	blx	r3
   2f85c:	0003      	movs	r3, r0
   2f85e:	633b      	str	r3, [r7, #48]	; 0x30
   2f860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f862:	2b00      	cmp	r3, #0
   2f864:	d002      	beq.n	2f86c <cycle+0x198>
                rc = FAILURE; // there was a problem
   2f866:	2301      	movs	r3, #1
   2f868:	425b      	negs	r3, r3
   2f86a:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
   2f86c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f86e:	3301      	adds	r3, #1
   2f870:	d106      	bne.n	2f880 <cycle+0x1ac>
                goto exit; // there was a problem
   2f872:	e00c      	b.n	2f88e <cycle+0x1ba>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   2f874:	687b      	ldr	r3, [r7, #4]
   2f876:	2200      	movs	r2, #0
   2f878:	771a      	strb	r2, [r3, #28]
            break;
   2f87a:	e002      	b.n	2f882 <cycle+0x1ae>
            break;
   2f87c:	46c0      	nop			; (mov r8, r8)
   2f87e:	e000      	b.n	2f882 <cycle+0x1ae>
            break;
   2f880:	46c0      	nop			; (mov r8, r8)
    }
    keepalive(c);
   2f882:	687b      	ldr	r3, [r7, #4]
   2f884:	0018      	movs	r0, r3
   2f886:	4b0f      	ldr	r3, [pc, #60]	; (2f8c4 <cycle+0x1f0>)
   2f888:	4798      	blx	r3
   2f88a:	e000      	b.n	2f88e <cycle+0x1ba>
                goto exit;
   2f88c:	46c0      	nop			; (mov r8, r8)
exit:
    if (rc == SUCCESS)
   2f88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f890:	2b00      	cmp	r3, #0
   2f892:	d103      	bne.n	2f89c <cycle+0x1c8>
        rc = packet_type;
   2f894:	232e      	movs	r3, #46	; 0x2e
   2f896:	18fb      	adds	r3, r7, r3
   2f898:	881b      	ldrh	r3, [r3, #0]
   2f89a:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
   2f89c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
   2f89e:	0018      	movs	r0, r3
   2f8a0:	46bd      	mov	sp, r7
   2f8a2:	b00f      	add	sp, #60	; 0x3c
   2f8a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2f8a6:	46c0      	nop			; (mov r8, r8)
   2f8a8:	0002f389 	.word	0x0002f389
   2f8ac:	0003a8d8 	.word	0x0003a8d8
   2f8b0:	00030c4d 	.word	0x00030c4d
   2f8b4:	0002f545 	.word	0x0002f545
   2f8b8:	00031445 	.word	0x00031445
   2f8bc:	0002f1cd 	.word	0x0002f1cd
   2f8c0:	00030d51 	.word	0x00030d51
   2f8c4:	0002f631 	.word	0x0002f631

0002f8c8 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   2f8c8:	b580      	push	{r7, lr}
   2f8ca:	b086      	sub	sp, #24
   2f8cc:	af00      	add	r7, sp, #0
   2f8ce:	6078      	str	r0, [r7, #4]
   2f8d0:	6039      	str	r1, [r7, #0]
    int rc = SUCCESS;
   2f8d2:	2300      	movs	r3, #0
   2f8d4:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
   2f8d6:	2308      	movs	r3, #8
   2f8d8:	18fb      	adds	r3, r7, r3
   2f8da:	0018      	movs	r0, r3
   2f8dc:	4b11      	ldr	r3, [pc, #68]	; (2f924 <MQTTYield+0x5c>)
   2f8de:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   2f8e0:	683a      	ldr	r2, [r7, #0]
   2f8e2:	2308      	movs	r3, #8
   2f8e4:	18fb      	adds	r3, r7, r3
   2f8e6:	0011      	movs	r1, r2
   2f8e8:	0018      	movs	r0, r3
   2f8ea:	4b0f      	ldr	r3, [pc, #60]	; (2f928 <MQTTYield+0x60>)
   2f8ec:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   2f8ee:	2308      	movs	r3, #8
   2f8f0:	18fa      	adds	r2, r7, r3
   2f8f2:	687b      	ldr	r3, [r7, #4]
   2f8f4:	0011      	movs	r1, r2
   2f8f6:	0018      	movs	r0, r3
   2f8f8:	4b0c      	ldr	r3, [pc, #48]	; (2f92c <MQTTYield+0x64>)
   2f8fa:	4798      	blx	r3
   2f8fc:	0003      	movs	r3, r0
   2f8fe:	3301      	adds	r3, #1
   2f900:	d103      	bne.n	2f90a <MQTTYield+0x42>
        {
            rc = FAILURE;
   2f902:	2301      	movs	r3, #1
   2f904:	425b      	negs	r3, r3
   2f906:	617b      	str	r3, [r7, #20]
            break;
   2f908:	e006      	b.n	2f918 <MQTTYield+0x50>
        }
	} while (!TimerIsExpired(&timer));
   2f90a:	2308      	movs	r3, #8
   2f90c:	18fb      	adds	r3, r7, r3
   2f90e:	0018      	movs	r0, r3
   2f910:	4b07      	ldr	r3, [pc, #28]	; (2f930 <MQTTYield+0x68>)
   2f912:	4798      	blx	r3
   2f914:	1e03      	subs	r3, r0, #0
   2f916:	d0ea      	beq.n	2f8ee <MQTTYield+0x26>
        
    return rc;
   2f918:	697b      	ldr	r3, [r7, #20]
}
   2f91a:	0018      	movs	r0, r3
   2f91c:	46bd      	mov	sp, r7
   2f91e:	b006      	add	sp, #24
   2f920:	bd80      	pop	{r7, pc}
   2f922:	46c0      	nop			; (mov r8, r8)
   2f924:	00030055 	.word	0x00030055
   2f928:	0002ffdd 	.word	0x0002ffdd
   2f92c:	0002f6d5 	.word	0x0002f6d5
   2f930:	0002ffb1 	.word	0x0002ffb1

0002f934 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   2f934:	b580      	push	{r7, lr}
   2f936:	b086      	sub	sp, #24
   2f938:	af00      	add	r7, sp, #0
   2f93a:	60f8      	str	r0, [r7, #12]
   2f93c:	60b9      	str	r1, [r7, #8]
   2f93e:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2f940:	2301      	movs	r3, #1
   2f942:	425b      	negs	r3, r3
   2f944:	617b      	str	r3, [r7, #20]
    
    do
    {
        if (TimerIsExpired(timer))
   2f946:	687b      	ldr	r3, [r7, #4]
   2f948:	0018      	movs	r0, r3
   2f94a:	4b0b      	ldr	r3, [pc, #44]	; (2f978 <waitfor+0x44>)
   2f94c:	4798      	blx	r3
   2f94e:	1e03      	subs	r3, r0, #0
   2f950:	d10c      	bne.n	2f96c <waitfor+0x38>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   2f952:	687a      	ldr	r2, [r7, #4]
   2f954:	68fb      	ldr	r3, [r7, #12]
   2f956:	0011      	movs	r1, r2
   2f958:	0018      	movs	r0, r3
   2f95a:	4b08      	ldr	r3, [pc, #32]	; (2f97c <waitfor+0x48>)
   2f95c:	4798      	blx	r3
   2f95e:	0003      	movs	r3, r0
   2f960:	617b      	str	r3, [r7, #20]
   2f962:	697a      	ldr	r2, [r7, #20]
   2f964:	68bb      	ldr	r3, [r7, #8]
   2f966:	429a      	cmp	r2, r3
   2f968:	d1ed      	bne.n	2f946 <waitfor+0x12>
   2f96a:	e000      	b.n	2f96e <waitfor+0x3a>
            break; // we timed out
   2f96c:	46c0      	nop			; (mov r8, r8)
    
    return rc;
   2f96e:	697b      	ldr	r3, [r7, #20]
}
   2f970:	0018      	movs	r0, r3
   2f972:	46bd      	mov	sp, r7
   2f974:	b006      	add	sp, #24
   2f976:	bd80      	pop	{r7, pc}
   2f978:	0002ffb1 	.word	0x0002ffb1
   2f97c:	0002f6d5 	.word	0x0002f6d5

0002f980 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   2f980:	b590      	push	{r4, r7, lr}
   2f982:	b09f      	sub	sp, #124	; 0x7c
   2f984:	af00      	add	r7, sp, #0
   2f986:	6078      	str	r0, [r7, #4]
   2f988:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
   2f98a:	2301      	movs	r3, #1
   2f98c:	425b      	negs	r3, r3
   2f98e:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   2f990:	230c      	movs	r3, #12
   2f992:	18fa      	adds	r2, r7, r3
   2f994:	4b41      	ldr	r3, [pc, #260]	; (2fa9c <MQTTConnect+0x11c>)
   2f996:	0010      	movs	r0, r2
   2f998:	0019      	movs	r1, r3
   2f99a:	2358      	movs	r3, #88	; 0x58
   2f99c:	001a      	movs	r2, r3
   2f99e:	4b40      	ldr	r3, [pc, #256]	; (2faa0 <MQTTConnect+0x120>)
   2f9a0:	4798      	blx	r3
    int len = 0;
   2f9a2:	2300      	movs	r3, #0
   2f9a4:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   2f9a6:	687b      	ldr	r3, [r7, #4]
   2f9a8:	6a1b      	ldr	r3, [r3, #32]
   2f9aa:	2b00      	cmp	r3, #0
   2f9ac:	d166      	bne.n	2fa7c <MQTTConnect+0xfc>
		goto exit;
    
    TimerInit(&connect_timer);
   2f9ae:	2364      	movs	r3, #100	; 0x64
   2f9b0:	18fb      	adds	r3, r7, r3
   2f9b2:	0018      	movs	r0, r3
   2f9b4:	4b3b      	ldr	r3, [pc, #236]	; (2faa4 <MQTTConnect+0x124>)
   2f9b6:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   2f9b8:	687b      	ldr	r3, [r7, #4]
   2f9ba:	685a      	ldr	r2, [r3, #4]
   2f9bc:	2364      	movs	r3, #100	; 0x64
   2f9be:	18fb      	adds	r3, r7, r3
   2f9c0:	0011      	movs	r1, r2
   2f9c2:	0018      	movs	r0, r3
   2f9c4:	4b38      	ldr	r3, [pc, #224]	; (2faa8 <MQTTConnect+0x128>)
   2f9c6:	4798      	blx	r3

    if (options == 0)
   2f9c8:	683b      	ldr	r3, [r7, #0]
   2f9ca:	2b00      	cmp	r3, #0
   2f9cc:	d102      	bne.n	2f9d4 <MQTTConnect+0x54>
        options = &default_options; /* set default options if none were supplied */
   2f9ce:	230c      	movs	r3, #12
   2f9d0:	18fb      	adds	r3, r7, r3
   2f9d2:	603b      	str	r3, [r7, #0]
    
    c->keepAliveInterval = options->keepAliveInterval;
   2f9d4:	683b      	ldr	r3, [r7, #0]
   2f9d6:	8b1b      	ldrh	r3, [r3, #24]
   2f9d8:	001a      	movs	r2, r3
   2f9da:	687b      	ldr	r3, [r7, #4]
   2f9dc:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   2f9de:	687b      	ldr	r3, [r7, #4]
   2f9e0:	3354      	adds	r3, #84	; 0x54
   2f9e2:	001a      	movs	r2, r3
   2f9e4:	687b      	ldr	r3, [r7, #4]
   2f9e6:	699b      	ldr	r3, [r3, #24]
   2f9e8:	0019      	movs	r1, r3
   2f9ea:	0010      	movs	r0, r2
   2f9ec:	4b2f      	ldr	r3, [pc, #188]	; (2faac <MQTTConnect+0x12c>)
   2f9ee:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   2f9f0:	687b      	ldr	r3, [r7, #4]
   2f9f2:	6918      	ldr	r0, [r3, #16]
   2f9f4:	687b      	ldr	r3, [r7, #4]
   2f9f6:	689b      	ldr	r3, [r3, #8]
   2f9f8:	0019      	movs	r1, r3
   2f9fa:	683b      	ldr	r3, [r7, #0]
   2f9fc:	001a      	movs	r2, r3
   2f9fe:	4b2c      	ldr	r3, [pc, #176]	; (2fab0 <MQTTConnect+0x130>)
   2fa00:	4798      	blx	r3
   2fa02:	0003      	movs	r3, r0
   2fa04:	673b      	str	r3, [r7, #112]	; 0x70
   2fa06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2fa08:	2b00      	cmp	r3, #0
   2fa0a:	dd39      	ble.n	2fa80 <MQTTConnect+0x100>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   2fa0c:	2364      	movs	r3, #100	; 0x64
   2fa0e:	18fa      	adds	r2, r7, r3
   2fa10:	6f39      	ldr	r1, [r7, #112]	; 0x70
   2fa12:	687b      	ldr	r3, [r7, #4]
   2fa14:	0018      	movs	r0, r3
   2fa16:	4b27      	ldr	r3, [pc, #156]	; (2fab4 <MQTTConnect+0x134>)
   2fa18:	4798      	blx	r3
   2fa1a:	0003      	movs	r3, r0
   2fa1c:	677b      	str	r3, [r7, #116]	; 0x74
   2fa1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2fa20:	2b00      	cmp	r3, #0
   2fa22:	d12f      	bne.n	2fa84 <MQTTConnect+0x104>
        goto exit; // there was a problem
    
    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   2fa24:	2364      	movs	r3, #100	; 0x64
   2fa26:	18fa      	adds	r2, r7, r3
   2fa28:	687b      	ldr	r3, [r7, #4]
   2fa2a:	2102      	movs	r1, #2
   2fa2c:	0018      	movs	r0, r3
   2fa2e:	4b22      	ldr	r3, [pc, #136]	; (2fab8 <MQTTConnect+0x138>)
   2fa30:	4798      	blx	r3
   2fa32:	0003      	movs	r3, r0
   2fa34:	2b02      	cmp	r3, #2
   2fa36:	d11d      	bne.n	2fa74 <MQTTConnect+0xf4>
    {
        unsigned char connack_rc = 255;
   2fa38:	230b      	movs	r3, #11
   2fa3a:	18fb      	adds	r3, r7, r3
   2fa3c:	22ff      	movs	r2, #255	; 0xff
   2fa3e:	701a      	strb	r2, [r3, #0]
        unsigned char sessionPresent = 0;
   2fa40:	230a      	movs	r3, #10
   2fa42:	18fb      	adds	r3, r7, r3
   2fa44:	2200      	movs	r2, #0
   2fa46:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   2fa48:	687b      	ldr	r3, [r7, #4]
   2fa4a:	695a      	ldr	r2, [r3, #20]
   2fa4c:	687b      	ldr	r3, [r7, #4]
   2fa4e:	68db      	ldr	r3, [r3, #12]
   2fa50:	210b      	movs	r1, #11
   2fa52:	1879      	adds	r1, r7, r1
   2fa54:	200a      	movs	r0, #10
   2fa56:	1838      	adds	r0, r7, r0
   2fa58:	4c18      	ldr	r4, [pc, #96]	; (2fabc <MQTTConnect+0x13c>)
   2fa5a:	47a0      	blx	r4
   2fa5c:	0003      	movs	r3, r0
   2fa5e:	2b01      	cmp	r3, #1
   2fa60:	d104      	bne.n	2fa6c <MQTTConnect+0xec>
            rc = connack_rc;
   2fa62:	230b      	movs	r3, #11
   2fa64:	18fb      	adds	r3, r7, r3
   2fa66:	781b      	ldrb	r3, [r3, #0]
   2fa68:	677b      	str	r3, [r7, #116]	; 0x74
   2fa6a:	e00c      	b.n	2fa86 <MQTTConnect+0x106>
        else
            rc = FAILURE;
   2fa6c:	2301      	movs	r3, #1
   2fa6e:	425b      	negs	r3, r3
   2fa70:	677b      	str	r3, [r7, #116]	; 0x74
   2fa72:	e008      	b.n	2fa86 <MQTTConnect+0x106>
    }
    else
        rc = FAILURE;
   2fa74:	2301      	movs	r3, #1
   2fa76:	425b      	negs	r3, r3
   2fa78:	677b      	str	r3, [r7, #116]	; 0x74
   2fa7a:	e004      	b.n	2fa86 <MQTTConnect+0x106>
		goto exit;
   2fa7c:	46c0      	nop			; (mov r8, r8)
   2fa7e:	e002      	b.n	2fa86 <MQTTConnect+0x106>
        goto exit;
   2fa80:	46c0      	nop			; (mov r8, r8)
   2fa82:	e000      	b.n	2fa86 <MQTTConnect+0x106>
        goto exit; // there was a problem
   2fa84:	46c0      	nop			; (mov r8, r8)
    
exit:
    if (rc == SUCCESS)
   2fa86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2fa88:	2b00      	cmp	r3, #0
   2fa8a:	d102      	bne.n	2fa92 <MQTTConnect+0x112>
        c->isconnected = 1;
   2fa8c:	687b      	ldr	r3, [r7, #4]
   2fa8e:	2201      	movs	r2, #1
   2fa90:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
   2fa92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   2fa94:	0018      	movs	r0, r3
   2fa96:	46bd      	mov	sp, r7
   2fa98:	b01f      	add	sp, #124	; 0x7c
   2fa9a:	bd90      	pop	{r4, r7, pc}
   2fa9c:	0003a910 	.word	0x0003a910
   2faa0:	000356d1 	.word	0x000356d1
   2faa4:	00030055 	.word	0x00030055
   2faa8:	0002ffdd 	.word	0x0002ffdd
   2faac:	00030005 	.word	0x00030005
   2fab0:	00030831 	.word	0x00030831
   2fab4:	0002f1cd 	.word	0x0002f1cd
   2fab8:	0002f935 	.word	0x0002f935
   2fabc:	00030aad 	.word	0x00030aad

0002fac0 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   2fac0:	b5b0      	push	{r4, r5, r7, lr}
   2fac2:	b096      	sub	sp, #88	; 0x58
   2fac4:	af04      	add	r7, sp, #16
   2fac6:	60f8      	str	r0, [r7, #12]
   2fac8:	60b9      	str	r1, [r7, #8]
   2faca:	603b      	str	r3, [r7, #0]
   2facc:	1dfb      	adds	r3, r7, #7
   2face:	701a      	strb	r2, [r3, #0]
    int rc = FAILURE;  
   2fad0:	2301      	movs	r3, #1
   2fad2:	425b      	negs	r3, r3
   2fad4:	647b      	str	r3, [r7, #68]	; 0x44
    Timer timer;
    int len = 0;
   2fad6:	2300      	movs	r3, #0
   2fad8:	63fb      	str	r3, [r7, #60]	; 0x3c
    MQTTString topic = MQTTString_initializer;
   2fada:	2324      	movs	r3, #36	; 0x24
   2fadc:	18fb      	adds	r3, r7, r3
   2fade:	2200      	movs	r2, #0
   2fae0:	601a      	str	r2, [r3, #0]
   2fae2:	2324      	movs	r3, #36	; 0x24
   2fae4:	18fb      	adds	r3, r7, r3
   2fae6:	2200      	movs	r2, #0
   2fae8:	605a      	str	r2, [r3, #4]
   2faea:	2324      	movs	r3, #36	; 0x24
   2faec:	18fb      	adds	r3, r7, r3
   2faee:	2200      	movs	r2, #0
   2faf0:	609a      	str	r2, [r3, #8]
	int Qoss = (int) qos;
   2faf2:	1dfb      	adds	r3, r7, #7
   2faf4:	781b      	ldrb	r3, [r3, #0]
   2faf6:	623b      	str	r3, [r7, #32]
    topic.cstring = (char *)topicFilter;
   2faf8:	2324      	movs	r3, #36	; 0x24
   2fafa:	18fb      	adds	r3, r7, r3
   2fafc:	68ba      	ldr	r2, [r7, #8]
   2fafe:	601a      	str	r2, [r3, #0]
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2fb00:	68fb      	ldr	r3, [r7, #12]
   2fb02:	6a1b      	ldr	r3, [r3, #32]
   2fb04:	2b00      	cmp	r3, #0
   2fb06:	d100      	bne.n	2fb0a <MQTTSubscribe+0x4a>
   2fb08:	e088      	b.n	2fc1c <MQTTSubscribe+0x15c>
		goto exit;

    TimerInit(&timer);
   2fb0a:	2330      	movs	r3, #48	; 0x30
   2fb0c:	18fb      	adds	r3, r7, r3
   2fb0e:	0018      	movs	r0, r3
   2fb10:	4b47      	ldr	r3, [pc, #284]	; (2fc30 <MQTTSubscribe+0x170>)
   2fb12:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2fb14:	68fb      	ldr	r3, [r7, #12]
   2fb16:	685a      	ldr	r2, [r3, #4]
   2fb18:	2330      	movs	r3, #48	; 0x30
   2fb1a:	18fb      	adds	r3, r7, r3
   2fb1c:	0011      	movs	r1, r2
   2fb1e:	0018      	movs	r0, r3
   2fb20:	4b44      	ldr	r3, [pc, #272]	; (2fc34 <MQTTSubscribe+0x174>)
   2fb22:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   2fb24:	68fb      	ldr	r3, [r7, #12]
   2fb26:	691c      	ldr	r4, [r3, #16]
   2fb28:	68fb      	ldr	r3, [r7, #12]
   2fb2a:	689b      	ldr	r3, [r3, #8]
   2fb2c:	001d      	movs	r5, r3
   2fb2e:	68fb      	ldr	r3, [r7, #12]
   2fb30:	0018      	movs	r0, r3
   2fb32:	4b41      	ldr	r3, [pc, #260]	; (2fc38 <MQTTSubscribe+0x178>)
   2fb34:	4798      	blx	r3
   2fb36:	0003      	movs	r3, r0
   2fb38:	b29a      	uxth	r2, r3
   2fb3a:	2320      	movs	r3, #32
   2fb3c:	18fb      	adds	r3, r7, r3
   2fb3e:	9302      	str	r3, [sp, #8]
   2fb40:	2324      	movs	r3, #36	; 0x24
   2fb42:	18fb      	adds	r3, r7, r3
   2fb44:	9301      	str	r3, [sp, #4]
   2fb46:	2301      	movs	r3, #1
   2fb48:	9300      	str	r3, [sp, #0]
   2fb4a:	0013      	movs	r3, r2
   2fb4c:	2200      	movs	r2, #0
   2fb4e:	0029      	movs	r1, r5
   2fb50:	0020      	movs	r0, r4
   2fb52:	4c3a      	ldr	r4, [pc, #232]	; (2fc3c <MQTTSubscribe+0x17c>)
   2fb54:	47a0      	blx	r4
   2fb56:	0003      	movs	r3, r0
   2fb58:	63fb      	str	r3, [r7, #60]	; 0x3c
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   2fb5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2fb5c:	2b00      	cmp	r3, #0
   2fb5e:	dd5f      	ble.n	2fc20 <MQTTSubscribe+0x160>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2fb60:	2330      	movs	r3, #48	; 0x30
   2fb62:	18fa      	adds	r2, r7, r3
   2fb64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   2fb66:	68fb      	ldr	r3, [r7, #12]
   2fb68:	0018      	movs	r0, r3
   2fb6a:	4b35      	ldr	r3, [pc, #212]	; (2fc40 <MQTTSubscribe+0x180>)
   2fb6c:	4798      	blx	r3
   2fb6e:	0003      	movs	r3, r0
   2fb70:	647b      	str	r3, [r7, #68]	; 0x44
   2fb72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2fb74:	2b00      	cmp	r3, #0
   2fb76:	d155      	bne.n	2fc24 <MQTTSubscribe+0x164>
        goto exit;             // there was a problem
    
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   2fb78:	2330      	movs	r3, #48	; 0x30
   2fb7a:	18fa      	adds	r2, r7, r3
   2fb7c:	68fb      	ldr	r3, [r7, #12]
   2fb7e:	2109      	movs	r1, #9
   2fb80:	0018      	movs	r0, r3
   2fb82:	4b30      	ldr	r3, [pc, #192]	; (2fc44 <MQTTSubscribe+0x184>)
   2fb84:	4798      	blx	r3
   2fb86:	0003      	movs	r3, r0
   2fb88:	2b09      	cmp	r3, #9
   2fb8a:	d143      	bne.n	2fc14 <MQTTSubscribe+0x154>
    {
        int count = 0, grantedQoS = -1;
   2fb8c:	2300      	movs	r3, #0
   2fb8e:	61fb      	str	r3, [r7, #28]
   2fb90:	2301      	movs	r3, #1
   2fb92:	425b      	negs	r3, r3
   2fb94:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   2fb96:	68fb      	ldr	r3, [r7, #12]
   2fb98:	695a      	ldr	r2, [r3, #20]
   2fb9a:	68fb      	ldr	r3, [r7, #12]
   2fb9c:	68db      	ldr	r3, [r3, #12]
   2fb9e:	001c      	movs	r4, r3
   2fba0:	2318      	movs	r3, #24
   2fba2:	18fb      	adds	r3, r7, r3
   2fba4:	211c      	movs	r1, #28
   2fba6:	1879      	adds	r1, r7, r1
   2fba8:	2016      	movs	r0, #22
   2fbaa:	1838      	adds	r0, r7, r0
   2fbac:	9401      	str	r4, [sp, #4]
   2fbae:	9200      	str	r2, [sp, #0]
   2fbb0:	000a      	movs	r2, r1
   2fbb2:	2101      	movs	r1, #1
   2fbb4:	4c24      	ldr	r4, [pc, #144]	; (2fc48 <MQTTSubscribe+0x188>)
   2fbb6:	47a0      	blx	r4
   2fbb8:	0003      	movs	r3, r0
   2fbba:	2b01      	cmp	r3, #1
   2fbbc:	d101      	bne.n	2fbc2 <MQTTSubscribe+0x102>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   2fbbe:	69bb      	ldr	r3, [r7, #24]
   2fbc0:	647b      	str	r3, [r7, #68]	; 0x44
        if (rc != 0x80)
   2fbc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2fbc4:	2b80      	cmp	r3, #128	; 0x80
   2fbc6:	d02e      	beq.n	2fc26 <MQTTSubscribe+0x166>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2fbc8:	2300      	movs	r3, #0
   2fbca:	643b      	str	r3, [r7, #64]	; 0x40
   2fbcc:	e01e      	b.n	2fc0c <MQTTSubscribe+0x14c>
            {
                if (c->messageHandlers[i].topicFilter == 0)
   2fbce:	68fa      	ldr	r2, [r7, #12]
   2fbd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2fbd2:	3304      	adds	r3, #4
   2fbd4:	00db      	lsls	r3, r3, #3
   2fbd6:	18d3      	adds	r3, r2, r3
   2fbd8:	3304      	adds	r3, #4
   2fbda:	681b      	ldr	r3, [r3, #0]
   2fbdc:	2b00      	cmp	r3, #0
   2fbde:	d112      	bne.n	2fc06 <MQTTSubscribe+0x146>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
   2fbe0:	68fa      	ldr	r2, [r7, #12]
   2fbe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2fbe4:	3304      	adds	r3, #4
   2fbe6:	00db      	lsls	r3, r3, #3
   2fbe8:	18d3      	adds	r3, r2, r3
   2fbea:	3304      	adds	r3, #4
   2fbec:	68ba      	ldr	r2, [r7, #8]
   2fbee:	601a      	str	r2, [r3, #0]
                    c->messageHandlers[i].fp = msgHandler;
   2fbf0:	68fa      	ldr	r2, [r7, #12]
   2fbf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2fbf4:	3304      	adds	r3, #4
   2fbf6:	00db      	lsls	r3, r3, #3
   2fbf8:	18d3      	adds	r3, r2, r3
   2fbfa:	3308      	adds	r3, #8
   2fbfc:	683a      	ldr	r2, [r7, #0]
   2fbfe:	601a      	str	r2, [r3, #0]
                    rc = 0;
   2fc00:	2300      	movs	r3, #0
   2fc02:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
   2fc04:	e00f      	b.n	2fc26 <MQTTSubscribe+0x166>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2fc06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2fc08:	3301      	adds	r3, #1
   2fc0a:	643b      	str	r3, [r7, #64]	; 0x40
   2fc0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2fc0e:	2b04      	cmp	r3, #4
   2fc10:	dddd      	ble.n	2fbce <MQTTSubscribe+0x10e>
   2fc12:	e008      	b.n	2fc26 <MQTTSubscribe+0x166>
                }
            }
        }
    }
    else 
        rc = FAILURE;
   2fc14:	2301      	movs	r3, #1
   2fc16:	425b      	negs	r3, r3
   2fc18:	647b      	str	r3, [r7, #68]	; 0x44
   2fc1a:	e004      	b.n	2fc26 <MQTTSubscribe+0x166>
		goto exit;
   2fc1c:	46c0      	nop			; (mov r8, r8)
   2fc1e:	e002      	b.n	2fc26 <MQTTSubscribe+0x166>
        goto exit;
   2fc20:	46c0      	nop			; (mov r8, r8)
   2fc22:	e000      	b.n	2fc26 <MQTTSubscribe+0x166>
        goto exit;             // there was a problem
   2fc24:	46c0      	nop			; (mov r8, r8)
        
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2fc26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   2fc28:	0018      	movs	r0, r3
   2fc2a:	46bd      	mov	sp, r7
   2fc2c:	b012      	add	sp, #72	; 0x48
   2fc2e:	bdb0      	pop	{r4, r5, r7, pc}
   2fc30:	00030055 	.word	0x00030055
   2fc34:	0002ffdd 	.word	0x0002ffdd
   2fc38:	0002f19d 	.word	0x0002f19d
   2fc3c:	0003158d 	.word	0x0003158d
   2fc40:	0002f1cd 	.word	0x0002f1cd
   2fc44:	0002f935 	.word	0x0002f935
   2fc48:	000316dd 	.word	0x000316dd

0002fc4c <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   2fc4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2fc4e:	46ce      	mov	lr, r9
   2fc50:	4647      	mov	r7, r8
   2fc52:	b580      	push	{r7, lr}
   2fc54:	b097      	sub	sp, #92	; 0x5c
   2fc56:	af08      	add	r7, sp, #32
   2fc58:	60f8      	str	r0, [r7, #12]
   2fc5a:	60b9      	str	r1, [r7, #8]
   2fc5c:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2fc5e:	2301      	movs	r3, #1
   2fc60:	425b      	negs	r3, r3
   2fc62:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   2fc64:	2318      	movs	r3, #24
   2fc66:	18fb      	adds	r3, r7, r3
   2fc68:	2200      	movs	r2, #0
   2fc6a:	601a      	str	r2, [r3, #0]
   2fc6c:	2318      	movs	r3, #24
   2fc6e:	18fb      	adds	r3, r7, r3
   2fc70:	2200      	movs	r2, #0
   2fc72:	605a      	str	r2, [r3, #4]
   2fc74:	2318      	movs	r3, #24
   2fc76:	18fb      	adds	r3, r7, r3
   2fc78:	2200      	movs	r2, #0
   2fc7a:	609a      	str	r2, [r3, #8]
    topic.cstring = (char *)topicName;
   2fc7c:	2318      	movs	r3, #24
   2fc7e:	18fb      	adds	r3, r7, r3
   2fc80:	68ba      	ldr	r2, [r7, #8]
   2fc82:	601a      	str	r2, [r3, #0]
    int len = 0;
   2fc84:	2300      	movs	r3, #0
   2fc86:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2fc88:	68fb      	ldr	r3, [r7, #12]
   2fc8a:	6a1b      	ldr	r3, [r3, #32]
   2fc8c:	2b00      	cmp	r3, #0
   2fc8e:	d100      	bne.n	2fc92 <MQTTPublish+0x46>
   2fc90:	e0a0      	b.n	2fdd4 <MQTTPublish+0x188>
		goto exit;

    TimerInit(&timer);
   2fc92:	2324      	movs	r3, #36	; 0x24
   2fc94:	18fb      	adds	r3, r7, r3
   2fc96:	0018      	movs	r0, r3
   2fc98:	4b55      	ldr	r3, [pc, #340]	; (2fdf0 <MQTTPublish+0x1a4>)
   2fc9a:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2fc9c:	68fb      	ldr	r3, [r7, #12]
   2fc9e:	685a      	ldr	r2, [r3, #4]
   2fca0:	2324      	movs	r3, #36	; 0x24
   2fca2:	18fb      	adds	r3, r7, r3
   2fca4:	0011      	movs	r1, r2
   2fca6:	0018      	movs	r0, r3
   2fca8:	4b52      	ldr	r3, [pc, #328]	; (2fdf4 <MQTTPublish+0x1a8>)
   2fcaa:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   2fcac:	687b      	ldr	r3, [r7, #4]
   2fcae:	781b      	ldrb	r3, [r3, #0]
   2fcb0:	2b01      	cmp	r3, #1
   2fcb2:	d003      	beq.n	2fcbc <MQTTPublish+0x70>
   2fcb4:	687b      	ldr	r3, [r7, #4]
   2fcb6:	781b      	ldrb	r3, [r3, #0]
   2fcb8:	2b02      	cmp	r3, #2
   2fcba:	d107      	bne.n	2fccc <MQTTPublish+0x80>
        message->id = getNextPacketId(c);
   2fcbc:	68fb      	ldr	r3, [r7, #12]
   2fcbe:	0018      	movs	r0, r3
   2fcc0:	4b4d      	ldr	r3, [pc, #308]	; (2fdf8 <MQTTPublish+0x1ac>)
   2fcc2:	4798      	blx	r3
   2fcc4:	0003      	movs	r3, r0
   2fcc6:	b29a      	uxth	r2, r3
   2fcc8:	687b      	ldr	r3, [r7, #4]
   2fcca:	809a      	strh	r2, [r3, #4]
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2fccc:	68fb      	ldr	r3, [r7, #12]
   2fcce:	691b      	ldr	r3, [r3, #16]
   2fcd0:	469c      	mov	ip, r3
   2fcd2:	68fb      	ldr	r3, [r7, #12]
   2fcd4:	689b      	ldr	r3, [r3, #8]
   2fcd6:	001d      	movs	r5, r3
   2fcd8:	687b      	ldr	r3, [r7, #4]
   2fcda:	781b      	ldrb	r3, [r3, #0]
   2fcdc:	001e      	movs	r6, r3
   2fcde:	687b      	ldr	r3, [r7, #4]
   2fce0:	785b      	ldrb	r3, [r3, #1]
   2fce2:	4698      	mov	r8, r3
   2fce4:	687b      	ldr	r3, [r7, #4]
   2fce6:	889b      	ldrh	r3, [r3, #4]
   2fce8:	4699      	mov	r9, r3
              topic, (unsigned char*)message->payload, message->payloadlen);
   2fcea:	687b      	ldr	r3, [r7, #4]
   2fcec:	689a      	ldr	r2, [r3, #8]
   2fcee:	687b      	ldr	r3, [r7, #4]
   2fcf0:	68db      	ldr	r3, [r3, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2fcf2:	9306      	str	r3, [sp, #24]
   2fcf4:	9205      	str	r2, [sp, #20]
   2fcf6:	2318      	movs	r3, #24
   2fcf8:	18fa      	adds	r2, r7, r3
   2fcfa:	2308      	movs	r3, #8
   2fcfc:	446b      	add	r3, sp
   2fcfe:	ca13      	ldmia	r2!, {r0, r1, r4}
   2fd00:	c313      	stmia	r3!, {r0, r1, r4}
   2fd02:	464b      	mov	r3, r9
   2fd04:	9301      	str	r3, [sp, #4]
   2fd06:	4643      	mov	r3, r8
   2fd08:	9300      	str	r3, [sp, #0]
   2fd0a:	0033      	movs	r3, r6
   2fd0c:	2200      	movs	r2, #0
   2fd0e:	0029      	movs	r1, r5
   2fd10:	4660      	mov	r0, ip
   2fd12:	4c3a      	ldr	r4, [pc, #232]	; (2fdfc <MQTTPublish+0x1b0>)
   2fd14:	47a0      	blx	r4
   2fd16:	0003      	movs	r3, r0
   2fd18:	633b      	str	r3, [r7, #48]	; 0x30
    if (len <= 0)
   2fd1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2fd1c:	2b00      	cmp	r3, #0
   2fd1e:	dd5b      	ble.n	2fdd8 <MQTTPublish+0x18c>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2fd20:	2324      	movs	r3, #36	; 0x24
   2fd22:	18fa      	adds	r2, r7, r3
   2fd24:	6b39      	ldr	r1, [r7, #48]	; 0x30
   2fd26:	68fb      	ldr	r3, [r7, #12]
   2fd28:	0018      	movs	r0, r3
   2fd2a:	4b35      	ldr	r3, [pc, #212]	; (2fe00 <MQTTPublish+0x1b4>)
   2fd2c:	4798      	blx	r3
   2fd2e:	0003      	movs	r3, r0
   2fd30:	637b      	str	r3, [r7, #52]	; 0x34
   2fd32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2fd34:	2b00      	cmp	r3, #0
   2fd36:	d151      	bne.n	2fddc <MQTTPublish+0x190>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   2fd38:	687b      	ldr	r3, [r7, #4]
   2fd3a:	781b      	ldrb	r3, [r3, #0]
   2fd3c:	2b01      	cmp	r3, #1
   2fd3e:	d122      	bne.n	2fd86 <MQTTPublish+0x13a>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   2fd40:	2324      	movs	r3, #36	; 0x24
   2fd42:	18fa      	adds	r2, r7, r3
   2fd44:	68fb      	ldr	r3, [r7, #12]
   2fd46:	2104      	movs	r1, #4
   2fd48:	0018      	movs	r0, r3
   2fd4a:	4b2e      	ldr	r3, [pc, #184]	; (2fe04 <MQTTPublish+0x1b8>)
   2fd4c:	4798      	blx	r3
   2fd4e:	0003      	movs	r3, r0
   2fd50:	2b04      	cmp	r3, #4
   2fd52:	d114      	bne.n	2fd7e <MQTTPublish+0x132>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2fd54:	68fb      	ldr	r3, [r7, #12]
   2fd56:	695c      	ldr	r4, [r3, #20]
   2fd58:	68fb      	ldr	r3, [r7, #12]
   2fd5a:	68db      	ldr	r3, [r3, #12]
   2fd5c:	2216      	movs	r2, #22
   2fd5e:	18ba      	adds	r2, r7, r2
   2fd60:	2115      	movs	r1, #21
   2fd62:	1879      	adds	r1, r7, r1
   2fd64:	2014      	movs	r0, #20
   2fd66:	1838      	adds	r0, r7, r0
   2fd68:	9300      	str	r3, [sp, #0]
   2fd6a:	0023      	movs	r3, r4
   2fd6c:	4c26      	ldr	r4, [pc, #152]	; (2fe08 <MQTTPublish+0x1bc>)
   2fd6e:	47a0      	blx	r4
   2fd70:	0003      	movs	r3, r0
   2fd72:	2b01      	cmp	r3, #1
   2fd74:	d033      	beq.n	2fdde <MQTTPublish+0x192>
                rc = FAILURE;
   2fd76:	2301      	movs	r3, #1
   2fd78:	425b      	negs	r3, r3
   2fd7a:	637b      	str	r3, [r7, #52]	; 0x34
   2fd7c:	e02f      	b.n	2fdde <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2fd7e:	2301      	movs	r3, #1
   2fd80:	425b      	negs	r3, r3
   2fd82:	637b      	str	r3, [r7, #52]	; 0x34
   2fd84:	e02b      	b.n	2fdde <MQTTPublish+0x192>
    }
    else if (message->qos == QOS2)
   2fd86:	687b      	ldr	r3, [r7, #4]
   2fd88:	781b      	ldrb	r3, [r3, #0]
   2fd8a:	2b02      	cmp	r3, #2
   2fd8c:	d127      	bne.n	2fdde <MQTTPublish+0x192>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   2fd8e:	2324      	movs	r3, #36	; 0x24
   2fd90:	18fa      	adds	r2, r7, r3
   2fd92:	68fb      	ldr	r3, [r7, #12]
   2fd94:	2107      	movs	r1, #7
   2fd96:	0018      	movs	r0, r3
   2fd98:	4b1a      	ldr	r3, [pc, #104]	; (2fe04 <MQTTPublish+0x1b8>)
   2fd9a:	4798      	blx	r3
   2fd9c:	0003      	movs	r3, r0
   2fd9e:	2b07      	cmp	r3, #7
   2fda0:	d114      	bne.n	2fdcc <MQTTPublish+0x180>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2fda2:	68fb      	ldr	r3, [r7, #12]
   2fda4:	695c      	ldr	r4, [r3, #20]
   2fda6:	68fb      	ldr	r3, [r7, #12]
   2fda8:	68db      	ldr	r3, [r3, #12]
   2fdaa:	2212      	movs	r2, #18
   2fdac:	18ba      	adds	r2, r7, r2
   2fdae:	2111      	movs	r1, #17
   2fdb0:	1879      	adds	r1, r7, r1
   2fdb2:	2010      	movs	r0, #16
   2fdb4:	1838      	adds	r0, r7, r0
   2fdb6:	9300      	str	r3, [sp, #0]
   2fdb8:	0023      	movs	r3, r4
   2fdba:	4c13      	ldr	r4, [pc, #76]	; (2fe08 <MQTTPublish+0x1bc>)
   2fdbc:	47a0      	blx	r4
   2fdbe:	0003      	movs	r3, r0
   2fdc0:	2b01      	cmp	r3, #1
   2fdc2:	d00c      	beq.n	2fdde <MQTTPublish+0x192>
                rc = FAILURE;
   2fdc4:	2301      	movs	r3, #1
   2fdc6:	425b      	negs	r3, r3
   2fdc8:	637b      	str	r3, [r7, #52]	; 0x34
   2fdca:	e008      	b.n	2fdde <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2fdcc:	2301      	movs	r3, #1
   2fdce:	425b      	negs	r3, r3
   2fdd0:	637b      	str	r3, [r7, #52]	; 0x34
   2fdd2:	e004      	b.n	2fdde <MQTTPublish+0x192>
		goto exit;
   2fdd4:	46c0      	nop			; (mov r8, r8)
   2fdd6:	e002      	b.n	2fdde <MQTTPublish+0x192>
        goto exit;
   2fdd8:	46c0      	nop			; (mov r8, r8)
   2fdda:	e000      	b.n	2fdde <MQTTPublish+0x192>
        goto exit; // there was a problem
   2fddc:	46c0      	nop			; (mov r8, r8)
    
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2fdde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   2fde0:	0018      	movs	r0, r3
   2fde2:	46bd      	mov	sp, r7
   2fde4:	b00f      	add	sp, #60	; 0x3c
   2fde6:	bc0c      	pop	{r2, r3}
   2fde8:	4690      	mov	r8, r2
   2fdea:	4699      	mov	r9, r3
   2fdec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2fdee:	46c0      	nop			; (mov r8, r8)
   2fdf0:	00030055 	.word	0x00030055
   2fdf4:	0002ffdd 	.word	0x0002ffdd
   2fdf8:	0002f19d 	.word	0x0002f19d
   2fdfc:	000312d9 	.word	0x000312d9
   2fe00:	0002f1cd 	.word	0x0002f1cd
   2fe04:	0002f935 	.word	0x0002f935
   2fe08:	00030d51 	.word	0x00030d51

0002fe0c <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   2fe0c:	b580      	push	{r7, lr}
   2fe0e:	b088      	sub	sp, #32
   2fe10:	af00      	add	r7, sp, #0
   2fe12:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2fe14:	2301      	movs	r3, #1
   2fe16:	425b      	negs	r3, r3
   2fe18:	61fb      	str	r3, [r7, #28]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
   2fe1a:	2300      	movs	r3, #0
   2fe1c:	61bb      	str	r3, [r7, #24]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   2fe1e:	230c      	movs	r3, #12
   2fe20:	18fb      	adds	r3, r7, r3
   2fe22:	0018      	movs	r0, r3
   2fe24:	4b13      	ldr	r3, [pc, #76]	; (2fe74 <MQTTDisconnect+0x68>)
   2fe26:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2fe28:	687b      	ldr	r3, [r7, #4]
   2fe2a:	685a      	ldr	r2, [r3, #4]
   2fe2c:	230c      	movs	r3, #12
   2fe2e:	18fb      	adds	r3, r7, r3
   2fe30:	0011      	movs	r1, r2
   2fe32:	0018      	movs	r0, r3
   2fe34:	4b10      	ldr	r3, [pc, #64]	; (2fe78 <MQTTDisconnect+0x6c>)
   2fe36:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   2fe38:	687b      	ldr	r3, [r7, #4]
   2fe3a:	691a      	ldr	r2, [r3, #16]
   2fe3c:	687b      	ldr	r3, [r7, #4]
   2fe3e:	689b      	ldr	r3, [r3, #8]
   2fe40:	0019      	movs	r1, r3
   2fe42:	0010      	movs	r0, r2
   2fe44:	4b0d      	ldr	r3, [pc, #52]	; (2fe7c <MQTTDisconnect+0x70>)
   2fe46:	4798      	blx	r3
   2fe48:	0003      	movs	r3, r0
   2fe4a:	61bb      	str	r3, [r7, #24]
    if (len > 0)
   2fe4c:	69bb      	ldr	r3, [r7, #24]
   2fe4e:	2b00      	cmp	r3, #0
   2fe50:	dd08      	ble.n	2fe64 <MQTTDisconnect+0x58>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   2fe52:	230c      	movs	r3, #12
   2fe54:	18fa      	adds	r2, r7, r3
   2fe56:	69b9      	ldr	r1, [r7, #24]
   2fe58:	687b      	ldr	r3, [r7, #4]
   2fe5a:	0018      	movs	r0, r3
   2fe5c:	4b08      	ldr	r3, [pc, #32]	; (2fe80 <MQTTDisconnect+0x74>)
   2fe5e:	4798      	blx	r3
   2fe60:	0003      	movs	r3, r0
   2fe62:	61fb      	str	r3, [r7, #28]
        
    c->isconnected = 0;
   2fe64:	687b      	ldr	r3, [r7, #4]
   2fe66:	2200      	movs	r2, #0
   2fe68:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2fe6a:	69fb      	ldr	r3, [r7, #28]
}
   2fe6c:	0018      	movs	r0, r3
   2fe6e:	46bd      	mov	sp, r7
   2fe70:	b008      	add	sp, #32
   2fe72:	bd80      	pop	{r7, pc}
   2fe74:	00030055 	.word	0x00030055
   2fe78:	0002ffdd 	.word	0x0002ffdd
   2fe7c:	00030c05 	.word	0x00030c05
   2fe80:	0002f1cd 	.word	0x0002f1cd

0002fe84 <isMQTTSocket>:
static uint32_t gu32MQTTRxFIFOPtr=0;
static uint32_t gu32MQTTRxFIFOLen=0;
static char *gpcHostAddr;

static bool isMQTTSocket(SOCKET sock)
{
   2fe84:	b580      	push	{r7, lr}
   2fe86:	b084      	sub	sp, #16
   2fe88:	af00      	add	r7, sp, #0
   2fe8a:	0002      	movs	r2, r0
   2fe8c:	1dfb      	adds	r3, r7, #7
   2fe8e:	701a      	strb	r2, [r3, #0]
	unsigned int cIdx;
	struct mqtt_module *mqttInstance;
	
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2fe90:	2300      	movs	r3, #0
   2fe92:	60fb      	str	r3, [r7, #12]
   2fe94:	e01c      	b.n	2fed0 <isMQTTSocket+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   2fe96:	4a12      	ldr	r2, [pc, #72]	; (2fee0 <isMQTTSocket+0x5c>)
   2fe98:	68fb      	ldr	r3, [r7, #12]
   2fe9a:	2164      	movs	r1, #100	; 0x64
   2fe9c:	434b      	muls	r3, r1
   2fe9e:	18d3      	adds	r3, r2, r3
   2fea0:	3360      	adds	r3, #96	; 0x60
   2fea2:	681b      	ldr	r3, [r3, #0]
   2fea4:	2b00      	cmp	r3, #0
   2fea6:	d010      	beq.n	2feca <isMQTTSocket+0x46>
		{
			mqttInstance = mqttClientPool[cIdx].mqtt_instance;
   2fea8:	4a0d      	ldr	r2, [pc, #52]	; (2fee0 <isMQTTSocket+0x5c>)
   2feaa:	68fb      	ldr	r3, [r7, #12]
   2feac:	2164      	movs	r1, #100	; 0x64
   2feae:	434b      	muls	r3, r1
   2feb0:	18d3      	adds	r3, r2, r3
   2feb2:	3360      	adds	r3, #96	; 0x60
   2feb4:	681b      	ldr	r3, [r3, #0]
   2feb6:	60bb      	str	r3, [r7, #8]
			if(mqttInstance->network.socket == sock)
   2feb8:	68bb      	ldr	r3, [r7, #8]
   2feba:	6a1a      	ldr	r2, [r3, #32]
   2febc:	1dfb      	adds	r3, r7, #7
   2febe:	781b      	ldrb	r3, [r3, #0]
   2fec0:	b25b      	sxtb	r3, r3
   2fec2:	429a      	cmp	r2, r3
   2fec4:	d101      	bne.n	2feca <isMQTTSocket+0x46>
				return true;
   2fec6:	2301      	movs	r3, #1
   2fec8:	e006      	b.n	2fed8 <isMQTTSocket+0x54>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2feca:	68fb      	ldr	r3, [r7, #12]
   2fecc:	3301      	adds	r3, #1
   2fece:	60fb      	str	r3, [r7, #12]
   2fed0:	68fb      	ldr	r3, [r7, #12]
   2fed2:	2b06      	cmp	r3, #6
   2fed4:	d9df      	bls.n	2fe96 <isMQTTSocket+0x12>
		}
	}
	return false;
   2fed6:	2300      	movs	r3, #0
}
   2fed8:	0018      	movs	r0, r3
   2feda:	46bd      	mov	sp, r7
   2fedc:	b004      	add	sp, #16
   2fede:	bd80      	pop	{r7, pc}
   2fee0:	20004070 	.word	0x20004070

0002fee4 <dnsResolveCallback>:

void dnsResolveCallback(uint8_t *hostName, uint32_t hostIp)
{
   2fee4:	b580      	push	{r7, lr}
   2fee6:	b082      	sub	sp, #8
   2fee8:	af00      	add	r7, sp, #0
   2feea:	6078      	str	r0, [r7, #4]
   2feec:	6039      	str	r1, [r7, #0]
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   2feee:	4b0d      	ldr	r3, [pc, #52]	; (2ff24 <dnsResolveCallback+0x40>)
   2fef0:	781b      	ldrb	r3, [r3, #0]
   2fef2:	2201      	movs	r2, #1
   2fef4:	4053      	eors	r3, r2
   2fef6:	b2db      	uxtb	r3, r3
   2fef8:	2b00      	cmp	r3, #0
   2fefa:	d00e      	beq.n	2ff1a <dnsResolveCallback+0x36>
   2fefc:	4b0a      	ldr	r3, [pc, #40]	; (2ff28 <dnsResolveCallback+0x44>)
   2fefe:	681b      	ldr	r3, [r3, #0]
   2ff00:	687a      	ldr	r2, [r7, #4]
   2ff02:	0011      	movs	r1, r2
   2ff04:	0018      	movs	r0, r3
   2ff06:	4b09      	ldr	r3, [pc, #36]	; (2ff2c <dnsResolveCallback+0x48>)
   2ff08:	4798      	blx	r3
   2ff0a:	1e03      	subs	r3, r0, #0
   2ff0c:	d105      	bne.n	2ff1a <dnsResolveCallback+0x36>
	{
		gi32MQTTBrokerIp = hostIp;
   2ff0e:	683a      	ldr	r2, [r7, #0]
   2ff10:	4b07      	ldr	r3, [pc, #28]	; (2ff30 <dnsResolveCallback+0x4c>)
   2ff12:	601a      	str	r2, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   2ff14:	4b03      	ldr	r3, [pc, #12]	; (2ff24 <dnsResolveCallback+0x40>)
   2ff16:	2201      	movs	r2, #1
   2ff18:	701a      	strb	r2, [r3, #0]
		#ifdef MQTT_PLATFORM_DBG
		printf("INFO >> Host IP of %s is %d.%d.%d.%d\r\n", hostName, (int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
		(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
		#endif
	}
}
   2ff1a:	46c0      	nop			; (mov r8, r8)
   2ff1c:	46bd      	mov	sp, r7
   2ff1e:	b002      	add	sp, #8
   2ff20:	bd80      	pop	{r7, pc}
   2ff22:	46c0      	nop			; (mov r8, r8)
   2ff24:	20003f60 	.word	0x20003f60
   2ff28:	2000406c 	.word	0x2000406c
   2ff2c:	00035a5f 	.word	0x00035a5f
   2ff30:	20003f58 	.word	0x20003f58

0002ff34 <tcpClientSocketEventHandler>:

void tcpClientSocketEventHandler(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   2ff34:	b580      	push	{r7, lr}
   2ff36:	b084      	sub	sp, #16
   2ff38:	af00      	add	r7, sp, #0
   2ff3a:	603a      	str	r2, [r7, #0]
   2ff3c:	1dfb      	adds	r3, r7, #7
   2ff3e:	1c02      	adds	r2, r0, #0
   2ff40:	701a      	strb	r2, [r3, #0]
   2ff42:	1dbb      	adds	r3, r7, #6
   2ff44:	1c0a      	adds	r2, r1, #0
   2ff46:	701a      	strb	r2, [r3, #0]
	if(isMQTTSocket(sock)) { 
   2ff48:	1dfb      	adds	r3, r7, #7
   2ff4a:	781b      	ldrb	r3, [r3, #0]
   2ff4c:	b25b      	sxtb	r3, r3
   2ff4e:	0018      	movs	r0, r3
   2ff50:	4b12      	ldr	r3, [pc, #72]	; (2ff9c <tcpClientSocketEventHandler+0x68>)
   2ff52:	4798      	blx	r3
   2ff54:	1e03      	subs	r3, r0, #0
   2ff56:	d01c      	beq.n	2ff92 <tcpClientSocketEventHandler+0x5e>
		switch (u8Msg) {
   2ff58:	1dbb      	adds	r3, r7, #6
   2ff5a:	781b      	ldrb	r3, [r3, #0]
   2ff5c:	2b06      	cmp	r3, #6
   2ff5e:	d00c      	beq.n	2ff7a <tcpClientSocketEventHandler+0x46>
   2ff60:	2b07      	cmp	r3, #7
   2ff62:	d006      	beq.n	2ff72 <tcpClientSocketEventHandler+0x3e>
   2ff64:	2b05      	cmp	r3, #5
   2ff66:	d000      	beq.n	2ff6a <tcpClientSocketEventHandler+0x36>
				printf("DEBUG >> Remaining data in Rx buffer of broker socket: %d\r\n",pstrRx->u16RemainingSize);
				#endif
				gbMQTTBrokerRecvDone=true;
			}
			break;
			default: break;
   2ff68:	e013      	b.n	2ff92 <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerConnected=true;
   2ff6a:	4b0d      	ldr	r3, [pc, #52]	; (2ffa0 <tcpClientSocketEventHandler+0x6c>)
   2ff6c:	2201      	movs	r2, #1
   2ff6e:	701a      	strb	r2, [r3, #0]
			break;
   2ff70:	e00f      	b.n	2ff92 <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerSendDone=true;
   2ff72:	4b0c      	ldr	r3, [pc, #48]	; (2ffa4 <tcpClientSocketEventHandler+0x70>)
   2ff74:	2201      	movs	r2, #1
   2ff76:	701a      	strb	r2, [r3, #0]
			break;
   2ff78:	e00b      	b.n	2ff92 <tcpClientSocketEventHandler+0x5e>
				tstrSocketRecvMsg* pstrRx = (tstrSocketRecvMsg*)pvMsg;
   2ff7a:	683b      	ldr	r3, [r7, #0]
   2ff7c:	60fb      	str	r3, [r7, #12]
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   2ff7e:	68fb      	ldr	r3, [r7, #12]
   2ff80:	2204      	movs	r2, #4
   2ff82:	5e9b      	ldrsh	r3, [r3, r2]
   2ff84:	001a      	movs	r2, r3
   2ff86:	4b08      	ldr	r3, [pc, #32]	; (2ffa8 <tcpClientSocketEventHandler+0x74>)
   2ff88:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   2ff8a:	4b08      	ldr	r3, [pc, #32]	; (2ffac <tcpClientSocketEventHandler+0x78>)
   2ff8c:	2201      	movs	r2, #1
   2ff8e:	701a      	strb	r2, [r3, #0]
			break;
   2ff90:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   2ff92:	46c0      	nop			; (mov r8, r8)
   2ff94:	46bd      	mov	sp, r7
   2ff96:	b004      	add	sp, #16
   2ff98:	bd80      	pop	{r7, pc}
   2ff9a:	46c0      	nop			; (mov r8, r8)
   2ff9c:	0002fe85 	.word	0x0002fe85
   2ffa0:	20003f61 	.word	0x20003f61
   2ffa4:	20003f62 	.word	0x20003f62
   2ffa8:	20003f5c 	.word	0x20003f5c
   2ffac:	20003f63 	.word	0x20003f63

0002ffb0 <TimerIsExpired>:

void SysTick_Handler_MQTT(void){
	MilliTimer++;
}

char TimerIsExpired(Timer* timer) {
   2ffb0:	b580      	push	{r7, lr}
   2ffb2:	b082      	sub	sp, #8
   2ffb4:	af00      	add	r7, sp, #0
   2ffb6:	6078      	str	r0, [r7, #4]
	return xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait) == pdTRUE;
   2ffb8:	687b      	ldr	r3, [r7, #4]
   2ffba:	3304      	adds	r3, #4
   2ffbc:	687a      	ldr	r2, [r7, #4]
   2ffbe:	0011      	movs	r1, r2
   2ffc0:	0018      	movs	r0, r3
   2ffc2:	4b05      	ldr	r3, [pc, #20]	; (2ffd8 <TimerIsExpired+0x28>)
   2ffc4:	4798      	blx	r3
   2ffc6:	0003      	movs	r3, r0
   2ffc8:	3b01      	subs	r3, #1
   2ffca:	425a      	negs	r2, r3
   2ffcc:	4153      	adcs	r3, r2
   2ffce:	b2db      	uxtb	r3, r3
}
   2ffd0:	0018      	movs	r0, r3
   2ffd2:	46bd      	mov	sp, r7
   2ffd4:	b002      	add	sp, #8
   2ffd6:	bd80      	pop	{r7, pc}
   2ffd8:	0001d7e5 	.word	0x0001d7e5

0002ffdc <TimerCountdownMS>:


void TimerCountdownMS(Timer* timer, unsigned int timeout_ms) {
   2ffdc:	b580      	push	{r7, lr}
   2ffde:	b082      	sub	sp, #8
   2ffe0:	af00      	add	r7, sp, #0
   2ffe2:	6078      	str	r0, [r7, #4]
   2ffe4:	6039      	str	r1, [r7, #0]
	timer->xTicksToWait = timeout_ms / portTICK_PERIOD_MS; /* convert milliseconds to ticks */
   2ffe6:	687b      	ldr	r3, [r7, #4]
   2ffe8:	683a      	ldr	r2, [r7, #0]
   2ffea:	601a      	str	r2, [r3, #0]
	vTaskSetTimeOutState(&timer->xTimeOut); /* Record the time at which this function was entered. */
   2ffec:	687b      	ldr	r3, [r7, #4]
   2ffee:	3304      	adds	r3, #4
   2fff0:	0018      	movs	r0, r3
   2fff2:	4b03      	ldr	r3, [pc, #12]	; (30000 <TimerCountdownMS+0x24>)
   2fff4:	4798      	blx	r3
}
   2fff6:	46c0      	nop			; (mov r8, r8)
   2fff8:	46bd      	mov	sp, r7
   2fffa:	b002      	add	sp, #8
   2fffc:	bd80      	pop	{r7, pc}
   2fffe:	46c0      	nop			; (mov r8, r8)
   30000:	0001d779 	.word	0x0001d779

00030004 <TimerCountdown>:


void TimerCountdown(Timer* timer, unsigned int timeout) {
   30004:	b580      	push	{r7, lr}
   30006:	b082      	sub	sp, #8
   30008:	af00      	add	r7, sp, #0
   3000a:	6078      	str	r0, [r7, #4]
   3000c:	6039      	str	r1, [r7, #0]
	TimerCountdownMS(timer, timeout * 1000);
   3000e:	683b      	ldr	r3, [r7, #0]
   30010:	22fa      	movs	r2, #250	; 0xfa
   30012:	0092      	lsls	r2, r2, #2
   30014:	435a      	muls	r2, r3
   30016:	687b      	ldr	r3, [r7, #4]
   30018:	0011      	movs	r1, r2
   3001a:	0018      	movs	r0, r3
   3001c:	4b02      	ldr	r3, [pc, #8]	; (30028 <TimerCountdown+0x24>)
   3001e:	4798      	blx	r3
}
   30020:	46c0      	nop			; (mov r8, r8)
   30022:	46bd      	mov	sp, r7
   30024:	b002      	add	sp, #8
   30026:	bd80      	pop	{r7, pc}
   30028:	0002ffdd 	.word	0x0002ffdd

0003002c <TimerLeftMS>:


int TimerLeftMS(Timer* timer) {
   3002c:	b580      	push	{r7, lr}
   3002e:	b082      	sub	sp, #8
   30030:	af00      	add	r7, sp, #0
   30032:	6078      	str	r0, [r7, #4]
	xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait); /* updates xTicksToWait to the number left */
   30034:	687b      	ldr	r3, [r7, #4]
   30036:	3304      	adds	r3, #4
   30038:	687a      	ldr	r2, [r7, #4]
   3003a:	0011      	movs	r1, r2
   3003c:	0018      	movs	r0, r3
   3003e:	4b04      	ldr	r3, [pc, #16]	; (30050 <TimerLeftMS+0x24>)
   30040:	4798      	blx	r3
	return (timer->xTicksToWait < 0) ? 0 : (timer->xTicksToWait * portTICK_PERIOD_MS);
   30042:	687b      	ldr	r3, [r7, #4]
   30044:	681b      	ldr	r3, [r3, #0]
}
   30046:	0018      	movs	r0, r3
   30048:	46bd      	mov	sp, r7
   3004a:	b002      	add	sp, #8
   3004c:	bd80      	pop	{r7, pc}
   3004e:	46c0      	nop			; (mov r8, r8)
   30050:	0001d7e5 	.word	0x0001d7e5

00030054 <TimerInit>:


void TimerInit(Timer* timer) {
   30054:	b580      	push	{r7, lr}
   30056:	b082      	sub	sp, #8
   30058:	af00      	add	r7, sp, #0
   3005a:	6078      	str	r0, [r7, #4]
	timer->xTicksToWait = 0;
   3005c:	687b      	ldr	r3, [r7, #4]
   3005e:	2200      	movs	r2, #0
   30060:	601a      	str	r2, [r3, #0]
	memset(&timer->xTimeOut, '\0', sizeof(timer->xTimeOut));
   30062:	687b      	ldr	r3, [r7, #4]
   30064:	3304      	adds	r3, #4
   30066:	2208      	movs	r2, #8
   30068:	2100      	movs	r1, #0
   3006a:	0018      	movs	r0, r3
   3006c:	4b02      	ldr	r3, [pc, #8]	; (30078 <TimerInit+0x24>)
   3006e:	4798      	blx	r3
}
   30070:	46c0      	nop			; (mov r8, r8)
   30072:	46bd      	mov	sp, r7
   30074:	b002      	add	sp, #8
   30076:	bd80      	pop	{r7, pc}
   30078:	00035707 	.word	0x00035707

0003007c <WINC1500_read>:

static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   3007c:	b590      	push	{r4, r7, lr}
   3007e:	b085      	sub	sp, #20
   30080:	af00      	add	r7, sp, #0
   30082:	60f8      	str	r0, [r7, #12]
   30084:	60b9      	str	r1, [r7, #8]
   30086:	607a      	str	r2, [r7, #4]
   30088:	603b      	str	r3, [r7, #0]
  //at times the upper layer requests for single byte of data, but network has more in rx buffer.
  //this results in callback being invoked multiple times with length 1 before returning. To prevent loss of
  //data in this process, pool data internally and give it to upper layer on request. 
  
  //temporary workaround for timer overrun 
  if(0==timeout_ms) timeout_ms=10;
   3008a:	683b      	ldr	r3, [r7, #0]
   3008c:	2b00      	cmp	r3, #0
   3008e:	d101      	bne.n	30094 <WINC1500_read+0x18>
   30090:	230a      	movs	r3, #10
   30092:	603b      	str	r3, [r7, #0]
  
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   30094:	4b2c      	ldr	r3, [pc, #176]	; (30148 <WINC1500_read+0xcc>)
   30096:	681b      	ldr	r3, [r3, #0]
   30098:	2b00      	cmp	r3, #0
   3009a:	d131      	bne.n	30100 <WINC1500_read+0x84>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("DEBUG >> Requesting data from network\r\n");
	  #endif
	  gbMQTTBrokerRecvDone=false;
   3009c:	4b2b      	ldr	r3, [pc, #172]	; (3014c <WINC1500_read+0xd0>)
   3009e:	2200      	movs	r2, #0
   300a0:	701a      	strb	r2, [r3, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   300a2:	68fb      	ldr	r3, [r7, #12]
   300a4:	681b      	ldr	r3, [r3, #0]
   300a6:	b258      	sxtb	r0, r3
   300a8:	683c      	ldr	r4, [r7, #0]
   300aa:	2380      	movs	r3, #128	; 0x80
   300ac:	005a      	lsls	r2, r3, #1
   300ae:	4928      	ldr	r1, [pc, #160]	; (30150 <WINC1500_read+0xd4>)
   300b0:	0023      	movs	r3, r4
   300b2:	4c28      	ldr	r4, [pc, #160]	; (30154 <WINC1500_read+0xd8>)
   300b4:	47a0      	blx	r4
   300b6:	1e03      	subs	r3, r0, #0
   300b8:	d005      	beq.n	300c6 <WINC1500_read+0x4a>
		  #ifdef MQTT_PLATFORM_DBG
		  printf("ERROR >> recv failed\r\n");
		  #endif
		  return -1;
   300ba:	2301      	movs	r3, #1
   300bc:	425b      	negs	r3, r3
   300be:	e03e      	b.n	3013e <WINC1500_read+0xc2>
	  }
	  //call handle_events until we get rx callback 
	  while (false==gbMQTTBrokerRecvDone){
		  m2m_wifi_handle_events(NULL);
   300c0:	2000      	movs	r0, #0
   300c2:	4b25      	ldr	r3, [pc, #148]	; (30158 <WINC1500_read+0xdc>)
   300c4:	4798      	blx	r3
	  while (false==gbMQTTBrokerRecvDone){
   300c6:	4b21      	ldr	r3, [pc, #132]	; (3014c <WINC1500_read+0xd0>)
   300c8:	781b      	ldrb	r3, [r3, #0]
   300ca:	2201      	movs	r2, #1
   300cc:	4053      	eors	r3, r2
   300ce:	b2db      	uxtb	r3, r3
   300d0:	2b00      	cmp	r3, #0
   300d2:	d1f5      	bne.n	300c0 <WINC1500_read+0x44>
	  }
	  
	  //update current FIFO length
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   300d4:	4b21      	ldr	r3, [pc, #132]	; (3015c <WINC1500_read+0xe0>)
   300d6:	681b      	ldr	r3, [r3, #0]
   300d8:	2b00      	cmp	r3, #0
   300da:	dd08      	ble.n	300ee <WINC1500_read+0x72>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   300dc:	4b1f      	ldr	r3, [pc, #124]	; (3015c <WINC1500_read+0xe0>)
   300de:	681b      	ldr	r3, [r3, #0]
   300e0:	001a      	movs	r2, r3
   300e2:	4b19      	ldr	r3, [pc, #100]	; (30148 <WINC1500_read+0xcc>)
   300e4:	601a      	str	r2, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   300e6:	4b1e      	ldr	r3, [pc, #120]	; (30160 <WINC1500_read+0xe4>)
   300e8:	2200      	movs	r2, #0
   300ea:	601a      	str	r2, [r3, #0]
   300ec:	e008      	b.n	30100 <WINC1500_read+0x84>
    	printf("0x%x, ",gcMQTTRxFIFO[i]);
    	printf("\r\n");
	  #endif
	  }
	  else{//mostly in case of timeout
		  gu32MQTTRxFIFOLen=0;
   300ee:	4b16      	ldr	r3, [pc, #88]	; (30148 <WINC1500_read+0xcc>)
   300f0:	2200      	movs	r2, #0
   300f2:	601a      	str	r2, [r3, #0]
		  gu32MQTTRxFIFOPtr=0;
   300f4:	4b1a      	ldr	r3, [pc, #104]	; (30160 <WINC1500_read+0xe4>)
   300f6:	2200      	movs	r2, #0
   300f8:	601a      	str	r2, [r3, #0]
		  #ifdef MQTT_PLATFORM_DBG
		  printf("DEBUG >> no data to send. returning error code (%d)\r\n",gi32MQTTBrokerRxLen);
		  #endif
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   300fa:	4b18      	ldr	r3, [pc, #96]	; (3015c <WINC1500_read+0xe0>)
   300fc:	681b      	ldr	r3, [r3, #0]
   300fe:	e01e      	b.n	3013e <WINC1500_read+0xc2>
	  }
  }
  //return data to client from data present in the FIFO from previous recv()
  if(len>(int)gu32MQTTRxFIFOLen){
   30100:	4b11      	ldr	r3, [pc, #68]	; (30148 <WINC1500_read+0xcc>)
   30102:	681b      	ldr	r3, [r3, #0]
   30104:	001a      	movs	r2, r3
   30106:	687b      	ldr	r3, [r7, #4]
   30108:	4293      	cmp	r3, r2
   3010a:	dd02      	ble.n	30112 <WINC1500_read+0x96>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> unable to process read request since FIFO contains less data than requested\r\n");
	  #endif
	  return -1;
   3010c:	2301      	movs	r3, #1
   3010e:	425b      	negs	r3, r3
   30110:	e015      	b.n	3013e <WINC1500_read+0xc2>
  }
 
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   30112:	4b13      	ldr	r3, [pc, #76]	; (30160 <WINC1500_read+0xe4>)
   30114:	681a      	ldr	r2, [r3, #0]
   30116:	4b0e      	ldr	r3, [pc, #56]	; (30150 <WINC1500_read+0xd4>)
   30118:	18d1      	adds	r1, r2, r3
   3011a:	687a      	ldr	r2, [r7, #4]
   3011c:	68bb      	ldr	r3, [r7, #8]
   3011e:	0018      	movs	r0, r3
   30120:	4b10      	ldr	r3, [pc, #64]	; (30164 <WINC1500_read+0xe8>)
   30122:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   30124:	4b08      	ldr	r3, [pc, #32]	; (30148 <WINC1500_read+0xcc>)
   30126:	681a      	ldr	r2, [r3, #0]
   30128:	687b      	ldr	r3, [r7, #4]
   3012a:	1ad2      	subs	r2, r2, r3
   3012c:	4b06      	ldr	r3, [pc, #24]	; (30148 <WINC1500_read+0xcc>)
   3012e:	601a      	str	r2, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   30130:	4b0b      	ldr	r3, [pc, #44]	; (30160 <WINC1500_read+0xe4>)
   30132:	681a      	ldr	r2, [r3, #0]
   30134:	687b      	ldr	r3, [r7, #4]
   30136:	18d2      	adds	r2, r2, r3
   30138:	4b09      	ldr	r3, [pc, #36]	; (30160 <WINC1500_read+0xe4>)
   3013a:	601a      	str	r2, [r3, #0]
  
  return len;
   3013c:	687b      	ldr	r3, [r7, #4]
}
   3013e:	0018      	movs	r0, r3
   30140:	46bd      	mov	sp, r7
   30142:	b005      	add	sp, #20
   30144:	bd90      	pop	{r4, r7, pc}
   30146:	46c0      	nop			; (mov r8, r8)
   30148:	20004068 	.word	0x20004068
   3014c:	20003f63 	.word	0x20003f63
   30150:	20003f64 	.word	0x20003f64
   30154:	00026731 	.word	0x00026731
   30158:	00022c79 	.word	0x00022c79
   3015c:	20003f5c 	.word	0x20003f5c
   30160:	20004064 	.word	0x20004064
   30164:	000356d1 	.word	0x000356d1

00030168 <WINC1500_write>:


static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   30168:	b590      	push	{r4, r7, lr}
   3016a:	b085      	sub	sp, #20
   3016c:	af00      	add	r7, sp, #0
   3016e:	60f8      	str	r0, [r7, #12]
   30170:	60b9      	str	r1, [r7, #8]
   30172:	607a      	str	r2, [r7, #4]
   30174:	603b      	str	r3, [r7, #0]
  gbMQTTBrokerSendDone=false;
   30176:	4b10      	ldr	r3, [pc, #64]	; (301b8 <WINC1500_write+0x50>)
   30178:	2200      	movs	r2, #0
   3017a:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   3017c:	68fb      	ldr	r3, [r7, #12]
   3017e:	681b      	ldr	r3, [r3, #0]
   30180:	b258      	sxtb	r0, r3
   30182:	687b      	ldr	r3, [r7, #4]
   30184:	b29a      	uxth	r2, r3
   30186:	68b9      	ldr	r1, [r7, #8]
   30188:	2300      	movs	r3, #0
   3018a:	4c0c      	ldr	r4, [pc, #48]	; (301bc <WINC1500_write+0x54>)
   3018c:	47a0      	blx	r4
   3018e:	1e03      	subs	r3, r0, #0
   30190:	d005      	beq.n	3019e <WINC1500_write+0x36>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> send error");
	  #endif
	  return -1;
   30192:	2301      	movs	r3, #1
   30194:	425b      	negs	r3, r3
   30196:	e00a      	b.n	301ae <WINC1500_write+0x46>
  }
  //wait for send callback
  while (false==gbMQTTBrokerSendDone){
	  m2m_wifi_handle_events(NULL);
   30198:	2000      	movs	r0, #0
   3019a:	4b09      	ldr	r3, [pc, #36]	; (301c0 <WINC1500_write+0x58>)
   3019c:	4798      	blx	r3
  while (false==gbMQTTBrokerSendDone){
   3019e:	4b06      	ldr	r3, [pc, #24]	; (301b8 <WINC1500_write+0x50>)
   301a0:	781b      	ldrb	r3, [r3, #0]
   301a2:	2201      	movs	r2, #1
   301a4:	4053      	eors	r3, r2
   301a6:	b2db      	uxtb	r3, r3
   301a8:	2b00      	cmp	r3, #0
   301aa:	d1f5      	bne.n	30198 <WINC1500_write+0x30>
  #endif

  //TODO: figure out how to get actual send length from callback
  //this length will be updated in the callback
  //return gu32MQTTBrokerSendLen;
  return len;
   301ac:	687b      	ldr	r3, [r7, #4]
}
   301ae:	0018      	movs	r0, r3
   301b0:	46bd      	mov	sp, r7
   301b2:	b005      	add	sp, #20
   301b4:	bd90      	pop	{r4, r7, pc}
   301b6:	46c0      	nop			; (mov r8, r8)
   301b8:	20003f62 	.word	0x20003f62
   301bc:	000265cd 	.word	0x000265cd
   301c0:	00022c79 	.word	0x00022c79

000301c4 <WINC1500_disconnect>:


static void WINC1500_disconnect(Network* n) {
   301c4:	b580      	push	{r7, lr}
   301c6:	b082      	sub	sp, #8
   301c8:	af00      	add	r7, sp, #0
   301ca:	6078      	str	r0, [r7, #4]
	close(n->socket);
   301cc:	687b      	ldr	r3, [r7, #4]
   301ce:	681b      	ldr	r3, [r3, #0]
   301d0:	b25b      	sxtb	r3, r3
   301d2:	0018      	movs	r0, r3
   301d4:	4b06      	ldr	r3, [pc, #24]	; (301f0 <WINC1500_disconnect+0x2c>)
   301d6:	4798      	blx	r3
	n->socket=-1;
   301d8:	687b      	ldr	r3, [r7, #4]
   301da:	2201      	movs	r2, #1
   301dc:	4252      	negs	r2, r2
   301de:	601a      	str	r2, [r3, #0]
	gbMQTTBrokerConnected=false;
   301e0:	4b04      	ldr	r3, [pc, #16]	; (301f4 <WINC1500_disconnect+0x30>)
   301e2:	2200      	movs	r2, #0
   301e4:	701a      	strb	r2, [r3, #0]
}
   301e6:	46c0      	nop			; (mov r8, r8)
   301e8:	46bd      	mov	sp, r7
   301ea:	b002      	add	sp, #8
   301ec:	bd80      	pop	{r7, pc}
   301ee:	46c0      	nop			; (mov r8, r8)
   301f0:	000268b1 	.word	0x000268b1
   301f4:	20003f61 	.word	0x20003f61

000301f8 <NetworkInit>:


void NetworkInit(Network* n) {
   301f8:	b580      	push	{r7, lr}
   301fa:	b082      	sub	sp, #8
   301fc:	af00      	add	r7, sp, #0
   301fe:	6078      	str	r0, [r7, #4]
	n->socket = -1;
   30200:	687b      	ldr	r3, [r7, #4]
   30202:	2201      	movs	r2, #1
   30204:	4252      	negs	r2, r2
   30206:	601a      	str	r2, [r3, #0]
	n->mqttread = WINC1500_read;
   30208:	687b      	ldr	r3, [r7, #4]
   3020a:	4a06      	ldr	r2, [pc, #24]	; (30224 <NetworkInit+0x2c>)
   3020c:	609a      	str	r2, [r3, #8]
	n->mqttwrite = WINC1500_write;
   3020e:	687b      	ldr	r3, [r7, #4]
   30210:	4a05      	ldr	r2, [pc, #20]	; (30228 <NetworkInit+0x30>)
   30212:	60da      	str	r2, [r3, #12]
	n->disconnect = WINC1500_disconnect;
   30214:	687b      	ldr	r3, [r7, #4]
   30216:	4a05      	ldr	r2, [pc, #20]	; (3022c <NetworkInit+0x34>)
   30218:	611a      	str	r2, [r3, #16]
}
   3021a:	46c0      	nop			; (mov r8, r8)
   3021c:	46bd      	mov	sp, r7
   3021e:	b002      	add	sp, #8
   30220:	bd80      	pop	{r7, pc}
   30222:	46c0      	nop			; (mov r8, r8)
   30224:	0003007d 	.word	0x0003007d
   30228:	00030169 	.word	0x00030169
   3022c:	000301c5 	.word	0x000301c5

00030230 <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   30230:	b580      	push	{r7, lr}
   30232:	b088      	sub	sp, #32
   30234:	af00      	add	r7, sp, #0
   30236:	60f8      	str	r0, [r7, #12]
   30238:	60b9      	str	r1, [r7, #8]
   3023a:	607a      	str	r2, [r7, #4]
   3023c:	603b      	str	r3, [r7, #0]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   3023e:	4b37      	ldr	r3, [pc, #220]	; (3031c <ConnectNetwork+0xec>)
   30240:	2200      	movs	r2, #0
   30242:	701a      	strb	r2, [r3, #0]
  gpcHostAddr = addr;
   30244:	4b36      	ldr	r3, [pc, #216]	; (30320 <ConnectNetwork+0xf0>)
   30246:	68ba      	ldr	r2, [r7, #8]
   30248:	601a      	str	r2, [r3, #0]
  gethostbyname((uint8*)addr);
   3024a:	68bb      	ldr	r3, [r7, #8]
   3024c:	0018      	movs	r0, r3
   3024e:	4b35      	ldr	r3, [pc, #212]	; (30324 <ConnectNetwork+0xf4>)
   30250:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   30252:	e002      	b.n	3025a <ConnectNetwork+0x2a>
	  m2m_wifi_handle_events(NULL);
   30254:	2000      	movs	r0, #0
   30256:	4b34      	ldr	r3, [pc, #208]	; (30328 <ConnectNetwork+0xf8>)
   30258:	4798      	blx	r3
  while (false==gbMQTTBrokerIpresolved){
   3025a:	4b30      	ldr	r3, [pc, #192]	; (3031c <ConnectNetwork+0xec>)
   3025c:	781b      	ldrb	r3, [r3, #0]
   3025e:	2201      	movs	r2, #1
   30260:	4053      	eors	r3, r2
   30262:	b2db      	uxtb	r3, r3
   30264:	2b00      	cmp	r3, #0
   30266:	d1f5      	bne.n	30254 <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   30268:	4b30      	ldr	r3, [pc, #192]	; (3032c <ConnectNetwork+0xfc>)
   3026a:	681a      	ldr	r2, [r3, #0]
   3026c:	68fb      	ldr	r3, [r7, #12]
   3026e:	605a      	str	r2, [r3, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   30270:	2310      	movs	r3, #16
   30272:	18fb      	adds	r3, r7, r3
   30274:	2202      	movs	r2, #2
   30276:	801a      	strh	r2, [r3, #0]
  addr_in.sin_port = _htons(port);
   30278:	687b      	ldr	r3, [r7, #4]
   3027a:	b29b      	uxth	r3, r3
   3027c:	021b      	lsls	r3, r3, #8
   3027e:	b21a      	sxth	r2, r3
   30280:	687b      	ldr	r3, [r7, #4]
   30282:	b29b      	uxth	r3, r3
   30284:	0a1b      	lsrs	r3, r3, #8
   30286:	b29b      	uxth	r3, r3
   30288:	b21b      	sxth	r3, r3
   3028a:	4313      	orrs	r3, r2
   3028c:	b21b      	sxth	r3, r3
   3028e:	b29a      	uxth	r2, r3
   30290:	2310      	movs	r3, #16
   30292:	18fb      	adds	r3, r7, r3
   30294:	805a      	strh	r2, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   30296:	4b25      	ldr	r3, [pc, #148]	; (3032c <ConnectNetwork+0xfc>)
   30298:	681b      	ldr	r3, [r3, #0]
   3029a:	001a      	movs	r2, r3
   3029c:	2310      	movs	r3, #16
   3029e:	18fb      	adds	r3, r7, r3
   302a0:	605a      	str	r2, [r3, #4]

  /* Create secure socket */ 
  if(n->socket < 0)
   302a2:	68fb      	ldr	r3, [r7, #12]
   302a4:	681b      	ldr	r3, [r3, #0]
   302a6:	2b00      	cmp	r3, #0
   302a8:	da0a      	bge.n	302c0 <ConnectNetwork+0x90>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   302aa:	683b      	ldr	r3, [r7, #0]
   302ac:	b2db      	uxtb	r3, r3
   302ae:	001a      	movs	r2, r3
   302b0:	2101      	movs	r1, #1
   302b2:	2002      	movs	r0, #2
   302b4:	4b1e      	ldr	r3, [pc, #120]	; (30330 <ConnectNetwork+0x100>)
   302b6:	4798      	blx	r3
   302b8:	0003      	movs	r3, r0
   302ba:	001a      	movs	r2, r3
   302bc:	68fb      	ldr	r3, [r7, #12]
   302be:	601a      	str	r2, [r3, #0]
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   302c0:	68fb      	ldr	r3, [r7, #12]
   302c2:	681b      	ldr	r3, [r3, #0]
   302c4:	3301      	adds	r3, #1
   302c6:	d108      	bne.n	302da <ConnectNetwork+0xaa>
   #ifdef MQTT_PLATFORM_DBG
   printf("ERROR >> socket error.\r\n");
   #endif
   close(n->socket);
   302c8:	68fb      	ldr	r3, [r7, #12]
   302ca:	681b      	ldr	r3, [r3, #0]
   302cc:	b25b      	sxtb	r3, r3
   302ce:	0018      	movs	r0, r3
   302d0:	4b18      	ldr	r3, [pc, #96]	; (30334 <ConnectNetwork+0x104>)
   302d2:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   302d4:	2309      	movs	r3, #9
   302d6:	425b      	negs	r3, r3
   302d8:	e01c      	b.n	30314 <ConnectNetwork+0xe4>
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   302da:	68fb      	ldr	r3, [r7, #12]
   302dc:	681b      	ldr	r3, [r3, #0]
   302de:	b25b      	sxtb	r3, r3
   302e0:	2210      	movs	r2, #16
   302e2:	18b9      	adds	r1, r7, r2
   302e4:	2210      	movs	r2, #16
   302e6:	0018      	movs	r0, r3
   302e8:	4b13      	ldr	r3, [pc, #76]	; (30338 <ConnectNetwork+0x108>)
   302ea:	4798      	blx	r3
   302ec:	1e03      	subs	r3, r0, #0
   302ee:	d002      	beq.n	302f6 <ConnectNetwork+0xc6>
   #ifdef MQTT_PLATFORM_DBG  
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
   302f0:	2309      	movs	r3, #9
   302f2:	425b      	negs	r3, r3
   302f4:	e00e      	b.n	30314 <ConnectNetwork+0xe4>
  }
  
  gbMQTTBrokerConnected = false;
   302f6:	4b11      	ldr	r3, [pc, #68]	; (3033c <ConnectNetwork+0x10c>)
   302f8:	2200      	movs	r2, #0
   302fa:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
   302fc:	e002      	b.n	30304 <ConnectNetwork+0xd4>
    m2m_wifi_handle_events(NULL);
   302fe:	2000      	movs	r0, #0
   30300:	4b09      	ldr	r3, [pc, #36]	; (30328 <ConnectNetwork+0xf8>)
   30302:	4798      	blx	r3
  while(false==gbMQTTBrokerConnected){
   30304:	4b0d      	ldr	r3, [pc, #52]	; (3033c <ConnectNetwork+0x10c>)
   30306:	781b      	ldrb	r3, [r3, #0]
   30308:	2201      	movs	r2, #1
   3030a:	4053      	eors	r3, r2
   3030c:	b2db      	uxtb	r3, r3
   3030e:	2b00      	cmp	r3, #0
   30310:	d1f5      	bne.n	302fe <ConnectNetwork+0xce>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   30312:	2300      	movs	r3, #0
   30314:	0018      	movs	r0, r3
   30316:	46bd      	mov	sp, r7
   30318:	b008      	add	sp, #32
   3031a:	bd80      	pop	{r7, pc}
   3031c:	20003f60 	.word	0x20003f60
   30320:	2000406c 	.word	0x2000406c
   30324:	00026af9 	.word	0x00026af9
   30328:	00022c79 	.word	0x00022c79
   3032c:	20003f58 	.word	0x20003f58
   30330:	000262a5 	.word	0x000262a5
   30334:	000268b1 	.word	0x000268b1
   30338:	000264b9 	.word	0x000264b9
   3033c:	20003f61 	.word	0x20003f61

00030340 <allocateClient>:

static void allocateClient(struct mqtt_module *module);
static void deAllocateClient(struct mqtt_module *module);

static void allocateClient(struct mqtt_module *module)
{
   30340:	b580      	push	{r7, lr}
   30342:	b084      	sub	sp, #16
   30344:	af00      	add	r7, sp, #0
   30346:	6078      	str	r0, [r7, #4]
	unsigned int cIdx;
	
	if(!module)
   30348:	687b      	ldr	r3, [r7, #4]
   3034a:	2b00      	cmp	r3, #0
   3034c:	d022      	beq.n	30394 <allocateClient+0x54>
		return;
		
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   3034e:	2300      	movs	r3, #0
   30350:	60fb      	str	r3, [r7, #12]
   30352:	e01b      	b.n	3038c <allocateClient+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   30354:	4a11      	ldr	r2, [pc, #68]	; (3039c <allocateClient+0x5c>)
   30356:	68fb      	ldr	r3, [r7, #12]
   30358:	2164      	movs	r1, #100	; 0x64
   3035a:	434b      	muls	r3, r1
   3035c:	18d3      	adds	r3, r2, r3
   3035e:	3360      	adds	r3, #96	; 0x60
   30360:	681b      	ldr	r3, [r3, #0]
   30362:	2b00      	cmp	r3, #0
   30364:	d10f      	bne.n	30386 <allocateClient+0x46>
		{
			mqttClientPool[cIdx].mqtt_instance = module;
   30366:	4a0d      	ldr	r2, [pc, #52]	; (3039c <allocateClient+0x5c>)
   30368:	68fb      	ldr	r3, [r7, #12]
   3036a:	2164      	movs	r1, #100	; 0x64
   3036c:	434b      	muls	r3, r1
   3036e:	18d3      	adds	r3, r2, r3
   30370:	3360      	adds	r3, #96	; 0x60
   30372:	687a      	ldr	r2, [r7, #4]
   30374:	601a      	str	r2, [r3, #0]
			module->client = &(mqttClientPool[cIdx].client);
   30376:	68fb      	ldr	r3, [r7, #12]
   30378:	2264      	movs	r2, #100	; 0x64
   3037a:	435a      	muls	r2, r3
   3037c:	4b07      	ldr	r3, [pc, #28]	; (3039c <allocateClient+0x5c>)
   3037e:	18d2      	adds	r2, r2, r3
   30380:	687b      	ldr	r3, [r7, #4]
   30382:	61da      	str	r2, [r3, #28]
			return;
   30384:	e007      	b.n	30396 <allocateClient+0x56>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   30386:	68fb      	ldr	r3, [r7, #12]
   30388:	3301      	adds	r3, #1
   3038a:	60fb      	str	r3, [r7, #12]
   3038c:	68fb      	ldr	r3, [r7, #12]
   3038e:	2b06      	cmp	r3, #6
   30390:	d9e0      	bls.n	30354 <allocateClient+0x14>
   30392:	e000      	b.n	30396 <allocateClient+0x56>
		return;
   30394:	46c0      	nop			; (mov r8, r8)
		}
	}	
}
   30396:	46bd      	mov	sp, r7
   30398:	b004      	add	sp, #16
   3039a:	bd80      	pop	{r7, pc}
   3039c:	20004070 	.word	0x20004070

000303a0 <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   303a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   303a2:	b089      	sub	sp, #36	; 0x24
   303a4:	af04      	add	r7, sp, #16
   303a6:	6078      	str	r0, [r7, #4]
   303a8:	6039      	str	r1, [r7, #0]
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   303aa:	687b      	ldr	r3, [r7, #4]
   303ac:	2b00      	cmp	r3, #0
   303ae:	d00a      	beq.n	303c6 <mqtt_init+0x26>
   303b0:	683b      	ldr	r3, [r7, #0]
   303b2:	2b00      	cmp	r3, #0
   303b4:	d007      	beq.n	303c6 <mqtt_init+0x26>
   303b6:	683b      	ldr	r3, [r7, #0]
   303b8:	691b      	ldr	r3, [r3, #16]
   303ba:	2b00      	cmp	r3, #0
   303bc:	d003      	beq.n	303c6 <mqtt_init+0x26>
   303be:	683b      	ldr	r3, [r7, #0]
   303c0:	689b      	ldr	r3, [r3, #8]
   303c2:	2b00      	cmp	r3, #0
   303c4:	d102      	bne.n	303cc <mqtt_init+0x2c>
		return FAILURE;
   303c6:	2301      	movs	r3, #1
   303c8:	425b      	negs	r3, r3
   303ca:	e034      	b.n	30436 <mqtt_init+0x96>
		
	timeout_ms = config->keep_alive * 1000;
   303cc:	683b      	ldr	r3, [r7, #0]
   303ce:	889b      	ldrh	r3, [r3, #4]
   303d0:	001a      	movs	r2, r3
   303d2:	23fa      	movs	r3, #250	; 0xfa
   303d4:	009b      	lsls	r3, r3, #2
   303d6:	4353      	muls	r3, r2
   303d8:	60fb      	str	r3, [r7, #12]
	NetworkInit(&(module->network));
   303da:	687b      	ldr	r3, [r7, #4]
   303dc:	3320      	adds	r3, #32
   303de:	0018      	movs	r0, r3
   303e0:	4b17      	ldr	r3, [pc, #92]	; (30440 <mqtt_init+0xa0>)
   303e2:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   303e4:	687b      	ldr	r3, [r7, #4]
   303e6:	3304      	adds	r3, #4
   303e8:	6839      	ldr	r1, [r7, #0]
   303ea:	2218      	movs	r2, #24
   303ec:	0018      	movs	r0, r3
   303ee:	4b15      	ldr	r3, [pc, #84]	; (30444 <mqtt_init+0xa4>)
   303f0:	4798      	blx	r3
	allocateClient(module);
   303f2:	687b      	ldr	r3, [r7, #4]
   303f4:	0018      	movs	r0, r3
   303f6:	4b14      	ldr	r3, [pc, #80]	; (30448 <mqtt_init+0xa8>)
   303f8:	4798      	blx	r3
	
	if(module->client)
   303fa:	687b      	ldr	r3, [r7, #4]
   303fc:	69db      	ldr	r3, [r3, #28]
   303fe:	2b00      	cmp	r3, #0
   30400:	d017      	beq.n	30432 <mqtt_init+0x92>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   30402:	687b      	ldr	r3, [r7, #4]
   30404:	69d8      	ldr	r0, [r3, #28]
   30406:	687b      	ldr	r3, [r7, #4]
   30408:	3320      	adds	r3, #32
   3040a:	001c      	movs	r4, r3
   3040c:	683b      	ldr	r3, [r7, #0]
   3040e:	691e      	ldr	r6, [r3, #16]
   30410:	683b      	ldr	r3, [r7, #0]
   30412:	695a      	ldr	r2, [r3, #20]
   30414:	683b      	ldr	r3, [r7, #0]
   30416:	6899      	ldr	r1, [r3, #8]
   30418:	683b      	ldr	r3, [r7, #0]
   3041a:	68db      	ldr	r3, [r3, #12]
   3041c:	68fd      	ldr	r5, [r7, #12]
   3041e:	9302      	str	r3, [sp, #8]
   30420:	9101      	str	r1, [sp, #4]
   30422:	9200      	str	r2, [sp, #0]
   30424:	0033      	movs	r3, r6
   30426:	002a      	movs	r2, r5
   30428:	0021      	movs	r1, r4
   3042a:	4c08      	ldr	r4, [pc, #32]	; (3044c <mqtt_init+0xac>)
   3042c:	47a0      	blx	r4
		return SUCCESS;
   3042e:	2300      	movs	r3, #0
   30430:	e001      	b.n	30436 <mqtt_init+0x96>
	}
	else
		return FAILURE;
   30432:	2301      	movs	r3, #1
   30434:	425b      	negs	r3, r3
}
   30436:	0018      	movs	r0, r3
   30438:	46bd      	mov	sp, r7
   3043a:	b005      	add	sp, #20
   3043c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3043e:	46c0      	nop			; (mov r8, r8)
   30440:	000301f9 	.word	0x000301f9
   30444:	000356d1 	.word	0x000356d1
   30448:	00030341 	.word	0x00030341
   3044c:	0002f271 	.word	0x0002f271

00030450 <mqtt_get_config_defaults>:
	else
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
   30450:	b580      	push	{r7, lr}
   30452:	b082      	sub	sp, #8
   30454:	af00      	add	r7, sp, #0
   30456:	6078      	str	r0, [r7, #4]
	config->port = 1883;
   30458:	687b      	ldr	r3, [r7, #4]
   3045a:	4a0c      	ldr	r2, [pc, #48]	; (3048c <mqtt_get_config_defaults+0x3c>)
   3045c:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   3045e:	687b      	ldr	r3, [r7, #4]
   30460:	2200      	movs	r2, #0
   30462:	709a      	strb	r2, [r3, #2]
	config->keep_alive = 60;
   30464:	687b      	ldr	r3, [r7, #4]
   30466:	223c      	movs	r2, #60	; 0x3c
   30468:	809a      	strh	r2, [r3, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   3046a:	687b      	ldr	r3, [r7, #4]
   3046c:	2200      	movs	r2, #0
   3046e:	609a      	str	r2, [r3, #8]
	config->send_buffer = NULL;
   30470:	687b      	ldr	r3, [r7, #4]
   30472:	2200      	movs	r2, #0
   30474:	611a      	str	r2, [r3, #16]
	config->read_buffer_size = 0;
   30476:	687b      	ldr	r3, [r7, #4]
   30478:	2200      	movs	r2, #0
   3047a:	60da      	str	r2, [r3, #12]
	config->send_buffer_size = 0;
   3047c:	687b      	ldr	r3, [r7, #4]
   3047e:	2200      	movs	r2, #0
   30480:	615a      	str	r2, [r3, #20]
}
   30482:	46c0      	nop			; (mov r8, r8)
   30484:	46bd      	mov	sp, r7
   30486:	b002      	add	sp, #8
   30488:	bd80      	pop	{r7, pc}
   3048a:	46c0      	nop			; (mov r8, r8)
   3048c:	0000075b 	.word	0x0000075b

00030490 <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
   30490:	b580      	push	{r7, lr}
   30492:	b082      	sub	sp, #8
   30494:	af00      	add	r7, sp, #0
   30496:	6078      	str	r0, [r7, #4]
   30498:	6039      	str	r1, [r7, #0]
	if(module)
   3049a:	687b      	ldr	r3, [r7, #4]
   3049c:	2b00      	cmp	r3, #0
   3049e:	d004      	beq.n	304aa <mqtt_register_callback+0x1a>
	{
		module->callback = callback;
   304a0:	687b      	ldr	r3, [r7, #4]
   304a2:	683a      	ldr	r2, [r7, #0]
   304a4:	601a      	str	r2, [r3, #0]
		return SUCCESS;
   304a6:	2300      	movs	r3, #0
   304a8:	e001      	b.n	304ae <mqtt_register_callback+0x1e>
	}
	else
		return FAILURE;
   304aa:	2301      	movs	r3, #1
   304ac:	425b      	negs	r3, r3
}
   304ae:	0018      	movs	r0, r3
   304b0:	46bd      	mov	sp, r7
   304b2:	b002      	add	sp, #8
   304b4:	bd80      	pop	{r7, pc}
	...

000304b8 <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   304b8:	b580      	push	{r7, lr}
   304ba:	b082      	sub	sp, #8
   304bc:	af00      	add	r7, sp, #0
   304be:	603a      	str	r2, [r7, #0]
   304c0:	1dfb      	adds	r3, r7, #7
   304c2:	1c02      	adds	r2, r0, #0
   304c4:	701a      	strb	r2, [r3, #0]
   304c6:	1dbb      	adds	r3, r7, #6
   304c8:	1c0a      	adds	r2, r1, #0
   304ca:	701a      	strb	r2, [r3, #0]
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   304cc:	683a      	ldr	r2, [r7, #0]
   304ce:	1dbb      	adds	r3, r7, #6
   304d0:	7819      	ldrb	r1, [r3, #0]
   304d2:	1dfb      	adds	r3, r7, #7
   304d4:	781b      	ldrb	r3, [r3, #0]
   304d6:	b25b      	sxtb	r3, r3
   304d8:	0018      	movs	r0, r3
   304da:	4b03      	ldr	r3, [pc, #12]	; (304e8 <mqtt_socket_event_handler+0x30>)
   304dc:	4798      	blx	r3
}
   304de:	46c0      	nop			; (mov r8, r8)
   304e0:	46bd      	mov	sp, r7
   304e2:	b002      	add	sp, #8
   304e4:	bd80      	pop	{r7, pc}
   304e6:	46c0      	nop			; (mov r8, r8)
   304e8:	0002ff35 	.word	0x0002ff35

000304ec <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   304ec:	b580      	push	{r7, lr}
   304ee:	b082      	sub	sp, #8
   304f0:	af00      	add	r7, sp, #0
   304f2:	6078      	str	r0, [r7, #4]
   304f4:	6039      	str	r1, [r7, #0]
	dnsResolveCallback(domain_name, server_ip);
   304f6:	683a      	ldr	r2, [r7, #0]
   304f8:	687b      	ldr	r3, [r7, #4]
   304fa:	0011      	movs	r1, r2
   304fc:	0018      	movs	r0, r3
   304fe:	4b03      	ldr	r3, [pc, #12]	; (3050c <mqtt_socket_resolve_handler+0x20>)
   30500:	4798      	blx	r3
}
   30502:	46c0      	nop			; (mov r8, r8)
   30504:	46bd      	mov	sp, r7
   30506:	b002      	add	sp, #8
   30508:	bd80      	pop	{r7, pc}
   3050a:	46c0      	nop			; (mov r8, r8)
   3050c:	0002fee5 	.word	0x0002fee5

00030510 <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   30510:	b590      	push	{r4, r7, lr}
   30512:	b085      	sub	sp, #20
   30514:	af00      	add	r7, sp, #0
   30516:	6078      	str	r0, [r7, #4]
   30518:	6039      	str	r1, [r7, #0]
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   3051a:	687b      	ldr	r3, [r7, #4]
   3051c:	3320      	adds	r3, #32
   3051e:	0018      	movs	r0, r3
   30520:	687b      	ldr	r3, [r7, #4]
   30522:	889b      	ldrh	r3, [r3, #4]
   30524:	001a      	movs	r2, r3
   30526:	687b      	ldr	r3, [r7, #4]
   30528:	799b      	ldrb	r3, [r3, #6]
   3052a:	6839      	ldr	r1, [r7, #0]
   3052c:	4c09      	ldr	r4, [pc, #36]	; (30554 <mqtt_connect+0x44>)
   3052e:	47a0      	blx	r4
   30530:	0003      	movs	r3, r0
   30532:	60fb      	str	r3, [r7, #12]
	if(module->callback)
   30534:	687b      	ldr	r3, [r7, #4]
   30536:	681b      	ldr	r3, [r3, #0]
   30538:	2b00      	cmp	r3, #0
   3053a:	d006      	beq.n	3054a <mqtt_connect+0x3a>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   3053c:	687b      	ldr	r3, [r7, #4]
   3053e:	681b      	ldr	r3, [r3, #0]
   30540:	220c      	movs	r2, #12
   30542:	18ba      	adds	r2, r7, r2
   30544:	6878      	ldr	r0, [r7, #4]
   30546:	2100      	movs	r1, #0
   30548:	4798      	blx	r3
	return connResult.sock_connected.result;
   3054a:	68fb      	ldr	r3, [r7, #12]
}
   3054c:	0018      	movs	r0, r3
   3054e:	46bd      	mov	sp, r7
   30550:	b005      	add	sp, #20
   30552:	bd90      	pop	{r4, r7, pc}
   30554:	00030231 	.word	0x00030231

00030558 <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   30558:	b580      	push	{r7, lr}
   3055a:	b09c      	sub	sp, #112	; 0x70
   3055c:	af00      	add	r7, sp, #0
   3055e:	60f8      	str	r0, [r7, #12]
   30560:	607a      	str	r2, [r7, #4]
   30562:	603b      	str	r3, [r7, #0]
   30564:	230b      	movs	r3, #11
   30566:	18fb      	adds	r3, r7, r3
   30568:	1c0a      	adds	r2, r1, #0
   3056a:	701a      	strb	r2, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   3056c:	2310      	movs	r3, #16
   3056e:	18fa      	adds	r2, r7, r3
   30570:	4b31      	ldr	r3, [pc, #196]	; (30638 <mqtt_connect_broker+0xe0>)
   30572:	0010      	movs	r0, r2
   30574:	0019      	movs	r1, r3
   30576:	2358      	movs	r3, #88	; 0x58
   30578:	001a      	movs	r2, r3
   3057a:	4b30      	ldr	r3, [pc, #192]	; (3063c <mqtt_connect_broker+0xe4>)
   3057c:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
   3057e:	2310      	movs	r3, #16
   30580:	18fb      	adds	r3, r7, r3
   30582:	2204      	movs	r2, #4
   30584:	721a      	strb	r2, [r3, #8]
	connectData.clientID.cstring = (char *)client_id;
   30586:	2310      	movs	r3, #16
   30588:	18fb      	adds	r3, r7, r3
   3058a:	6fba      	ldr	r2, [r7, #120]	; 0x78
   3058c:	60da      	str	r2, [r3, #12]
	connectData.username.cstring = (char *)id;
   3058e:	2310      	movs	r3, #16
   30590:	18fb      	adds	r3, r7, r3
   30592:	687a      	ldr	r2, [r7, #4]
   30594:	641a      	str	r2, [r3, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   30596:	2310      	movs	r3, #16
   30598:	18fb      	adds	r3, r7, r3
   3059a:	683a      	ldr	r2, [r7, #0]
   3059c:	64da      	str	r2, [r3, #76]	; 0x4c
	connectData.cleansession = clean_session;
   3059e:	2310      	movs	r3, #16
   305a0:	18fb      	adds	r3, r7, r3
   305a2:	220b      	movs	r2, #11
   305a4:	18ba      	adds	r2, r7, r2
   305a6:	7812      	ldrb	r2, [r2, #0]
   305a8:	769a      	strb	r2, [r3, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   305aa:	2310      	movs	r3, #16
   305ac:	18fb      	adds	r3, r7, r3
   305ae:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   305b0:	625a      	str	r2, [r3, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   305b2:	2310      	movs	r3, #16
   305b4:	18fb      	adds	r3, r7, r3
   305b6:	2280      	movs	r2, #128	; 0x80
   305b8:	18ba      	adds	r2, r7, r2
   305ba:	6812      	ldr	r2, [r2, #0]
   305bc:	631a      	str	r2, [r3, #48]	; 0x30
	connectData.will.retained = will_retain;
   305be:	2310      	movs	r3, #16
   305c0:	18fb      	adds	r3, r7, r3
   305c2:	228c      	movs	r2, #140	; 0x8c
   305c4:	18ba      	adds	r2, r7, r2
   305c6:	213c      	movs	r1, #60	; 0x3c
   305c8:	7812      	ldrb	r2, [r2, #0]
   305ca:	545a      	strb	r2, [r3, r1]
	connectData.will.qos = will_qos;
   305cc:	2310      	movs	r3, #16
   305ce:	18fb      	adds	r3, r7, r3
   305d0:	2288      	movs	r2, #136	; 0x88
   305d2:	18ba      	adds	r2, r7, r2
   305d4:	213d      	movs	r1, #61	; 0x3d
   305d6:	7812      	ldrb	r2, [r2, #0]
   305d8:	545a      	strb	r2, [r3, r1]
	
	if(will_topic && will_msg)
   305da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   305dc:	2b00      	cmp	r3, #0
   305de:	d008      	beq.n	305f2 <mqtt_connect_broker+0x9a>
   305e0:	2380      	movs	r3, #128	; 0x80
   305e2:	18fb      	adds	r3, r7, r3
   305e4:	681b      	ldr	r3, [r3, #0]
   305e6:	2b00      	cmp	r3, #0
   305e8:	d003      	beq.n	305f2 <mqtt_connect_broker+0x9a>
		connectData.willFlag = 1;
   305ea:	2310      	movs	r3, #16
   305ec:	18fb      	adds	r3, r7, r3
   305ee:	2201      	movs	r2, #1
   305f0:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   305f2:	68fb      	ldr	r3, [r7, #12]
   305f4:	69db      	ldr	r3, [r3, #28]
   305f6:	2210      	movs	r2, #16
   305f8:	18ba      	adds	r2, r7, r2
   305fa:	0011      	movs	r1, r2
   305fc:	0018      	movs	r0, r3
   305fe:	4b10      	ldr	r3, [pc, #64]	; (30640 <mqtt_connect_broker+0xe8>)
   30600:	4798      	blx	r3
   30602:	0003      	movs	r3, r0
   30604:	66fb      	str	r3, [r7, #108]	; 0x6c
	
	connBrokerResult.connected.result = rc;
   30606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   30608:	b2da      	uxtb	r2, r3
   3060a:	2368      	movs	r3, #104	; 0x68
   3060c:	18fb      	adds	r3, r7, r3
   3060e:	701a      	strb	r2, [r3, #0]
	if(module->callback)
   30610:	68fb      	ldr	r3, [r7, #12]
   30612:	681b      	ldr	r3, [r3, #0]
   30614:	2b00      	cmp	r3, #0
   30616:	d006      	beq.n	30626 <mqtt_connect_broker+0xce>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   30618:	68fb      	ldr	r3, [r7, #12]
   3061a:	681b      	ldr	r3, [r3, #0]
   3061c:	2268      	movs	r2, #104	; 0x68
   3061e:	18ba      	adds	r2, r7, r2
   30620:	68f8      	ldr	r0, [r7, #12]
   30622:	2101      	movs	r1, #1
   30624:	4798      	blx	r3
	
	module->isConnected = true;
   30626:	68fb      	ldr	r3, [r7, #12]
   30628:	2234      	movs	r2, #52	; 0x34
   3062a:	2101      	movs	r1, #1
   3062c:	5499      	strb	r1, [r3, r2]
	return rc;
   3062e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
   30630:	0018      	movs	r0, r3
   30632:	46bd      	mov	sp, r7
   30634:	b01c      	add	sp, #112	; 0x70
   30636:	bd80      	pop	{r7, pc}
   30638:	0003a968 	.word	0x0003a968
   3063c:	000356d1 	.word	0x000356d1
   30640:	0002f981 	.word	0x0002f981

00030644 <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   30644:	b580      	push	{r7, lr}
   30646:	b084      	sub	sp, #16
   30648:	af00      	add	r7, sp, #0
   3064a:	6078      	str	r0, [r7, #4]
   3064c:	6039      	str	r1, [r7, #0]
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   3064e:	687b      	ldr	r3, [r7, #4]
   30650:	69db      	ldr	r3, [r3, #28]
   30652:	0018      	movs	r0, r3
   30654:	4b0c      	ldr	r3, [pc, #48]	; (30688 <mqtt_disconnect+0x44>)
   30656:	4798      	blx	r3
   30658:	0003      	movs	r3, r0
   3065a:	60fb      	str	r3, [r7, #12]
	
	disconnectResult.disconnected.reason = rc;
   3065c:	68fb      	ldr	r3, [r7, #12]
   3065e:	60bb      	str	r3, [r7, #8]
	
	if(module->callback)
   30660:	687b      	ldr	r3, [r7, #4]
   30662:	681b      	ldr	r3, [r3, #0]
   30664:	2b00      	cmp	r3, #0
   30666:	d006      	beq.n	30676 <mqtt_disconnect+0x32>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   30668:	687b      	ldr	r3, [r7, #4]
   3066a:	681b      	ldr	r3, [r3, #0]
   3066c:	2208      	movs	r2, #8
   3066e:	18ba      	adds	r2, r7, r2
   30670:	6878      	ldr	r0, [r7, #4]
   30672:	2105      	movs	r1, #5
   30674:	4798      	blx	r3
	
	module->isConnected = false;
   30676:	687b      	ldr	r3, [r7, #4]
   30678:	2234      	movs	r2, #52	; 0x34
   3067a:	2100      	movs	r1, #0
   3067c:	5499      	strb	r1, [r3, r2]
	return rc;
   3067e:	68fb      	ldr	r3, [r7, #12]
}
   30680:	0018      	movs	r0, r3
   30682:	46bd      	mov	sp, r7
   30684:	b004      	add	sp, #16
   30686:	bd80      	pop	{r7, pc}
   30688:	0002fe0d 	.word	0x0002fe0d

0003068c <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   3068c:	b580      	push	{r7, lr}
   3068e:	b08a      	sub	sp, #40	; 0x28
   30690:	af00      	add	r7, sp, #0
   30692:	60f8      	str	r0, [r7, #12]
   30694:	60b9      	str	r1, [r7, #8]
   30696:	607a      	str	r2, [r7, #4]
   30698:	603b      	str	r3, [r7, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   3069a:	2314      	movs	r3, #20
   3069c:	18fb      	adds	r3, r7, r3
   3069e:	2230      	movs	r2, #48	; 0x30
   306a0:	18ba      	adds	r2, r7, r2
   306a2:	7812      	ldrb	r2, [r2, #0]
   306a4:	701a      	strb	r2, [r3, #0]
	mqttMsg.payload = (char *)msg;
   306a6:	2314      	movs	r3, #20
   306a8:	18fb      	adds	r3, r7, r3
   306aa:	687a      	ldr	r2, [r7, #4]
   306ac:	609a      	str	r2, [r3, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   306ae:	2314      	movs	r3, #20
   306b0:	18fb      	adds	r3, r7, r3
   306b2:	683a      	ldr	r2, [r7, #0]
   306b4:	60da      	str	r2, [r3, #12]
	mqttMsg.retained = retain;
   306b6:	2314      	movs	r3, #20
   306b8:	18fb      	adds	r3, r7, r3
   306ba:	2234      	movs	r2, #52	; 0x34
   306bc:	18ba      	adds	r2, r7, r2
   306be:	7812      	ldrb	r2, [r2, #0]
   306c0:	705a      	strb	r2, [r3, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   306c2:	68fb      	ldr	r3, [r7, #12]
   306c4:	69db      	ldr	r3, [r3, #28]
   306c6:	2214      	movs	r2, #20
   306c8:	18ba      	adds	r2, r7, r2
   306ca:	68b9      	ldr	r1, [r7, #8]
   306cc:	0018      	movs	r0, r3
   306ce:	4b09      	ldr	r3, [pc, #36]	; (306f4 <mqtt_publish+0x68>)
   306d0:	4798      	blx	r3
   306d2:	0003      	movs	r3, r0
   306d4:	627b      	str	r3, [r7, #36]	; 0x24
	
	if(module->callback)
   306d6:	68fb      	ldr	r3, [r7, #12]
   306d8:	681b      	ldr	r3, [r3, #0]
   306da:	2b00      	cmp	r3, #0
   306dc:	d005      	beq.n	306ea <mqtt_publish+0x5e>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   306de:	68fb      	ldr	r3, [r7, #12]
   306e0:	681b      	ldr	r3, [r3, #0]
   306e2:	68f8      	ldr	r0, [r7, #12]
   306e4:	2200      	movs	r2, #0
   306e6:	2102      	movs	r1, #2
   306e8:	4798      	blx	r3
	
	return rc;
   306ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   306ec:	0018      	movs	r0, r3
   306ee:	46bd      	mov	sp, r7
   306f0:	b00a      	add	sp, #40	; 0x28
   306f2:	bd80      	pop	{r7, pc}
   306f4:	0002fc4d 	.word	0x0002fc4d

000306f8 <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   306f8:	b590      	push	{r4, r7, lr}
   306fa:	b087      	sub	sp, #28
   306fc:	af00      	add	r7, sp, #0
   306fe:	60f8      	str	r0, [r7, #12]
   30700:	60b9      	str	r1, [r7, #8]
   30702:	603b      	str	r3, [r7, #0]
   30704:	1dfb      	adds	r3, r7, #7
   30706:	701a      	strb	r2, [r3, #0]
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   30708:	68fb      	ldr	r3, [r7, #12]
   3070a:	69d8      	ldr	r0, [r3, #28]
   3070c:	683c      	ldr	r4, [r7, #0]
   3070e:	1dfb      	adds	r3, r7, #7
   30710:	781a      	ldrb	r2, [r3, #0]
   30712:	68b9      	ldr	r1, [r7, #8]
   30714:	0023      	movs	r3, r4
   30716:	4c09      	ldr	r4, [pc, #36]	; (3073c <mqtt_subscribe+0x44>)
   30718:	47a0      	blx	r4
   3071a:	0003      	movs	r3, r0
   3071c:	617b      	str	r3, [r7, #20]
	
	if(module->callback)
   3071e:	68fb      	ldr	r3, [r7, #12]
   30720:	681b      	ldr	r3, [r3, #0]
   30722:	2b00      	cmp	r3, #0
   30724:	d005      	beq.n	30732 <mqtt_subscribe+0x3a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   30726:	68fb      	ldr	r3, [r7, #12]
   30728:	681b      	ldr	r3, [r3, #0]
   3072a:	68f8      	ldr	r0, [r7, #12]
   3072c:	2200      	movs	r2, #0
   3072e:	2103      	movs	r1, #3
   30730:	4798      	blx	r3
	
	return rc;
   30732:	697b      	ldr	r3, [r7, #20]
}
   30734:	0018      	movs	r0, r3
   30736:	46bd      	mov	sp, r7
   30738:	b007      	add	sp, #28
   3073a:	bd90      	pop	{r4, r7, pc}
   3073c:	0002fac1 	.word	0x0002fac1

00030740 <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   30740:	b580      	push	{r7, lr}
   30742:	b082      	sub	sp, #8
   30744:	af00      	add	r7, sp, #0
   30746:	6078      	str	r0, [r7, #4]
   30748:	6039      	str	r1, [r7, #0]
	return MQTTYield(module->client, timeout_ms);
   3074a:	687b      	ldr	r3, [r7, #4]
   3074c:	69db      	ldr	r3, [r3, #28]
   3074e:	683a      	ldr	r2, [r7, #0]
   30750:	0011      	movs	r1, r2
   30752:	0018      	movs	r0, r3
   30754:	4b03      	ldr	r3, [pc, #12]	; (30764 <mqtt_yield+0x24>)
   30756:	4798      	blx	r3
   30758:	0003      	movs	r3, r0
   3075a:	0018      	movs	r0, r3
   3075c:	46bd      	mov	sp, r7
   3075e:	b002      	add	sp, #8
   30760:	bd80      	pop	{r7, pc}
   30762:	46c0      	nop			; (mov r8, r8)
   30764:	0002f8c9 	.word	0x0002f8c9

00030768 <MQTTSerialize_connectLength>:
   30768:	b590      	push	{r4, r7, lr}
   3076a:	b085      	sub	sp, #20
   3076c:	af00      	add	r7, sp, #0
   3076e:	6078      	str	r0, [r7, #4]
   30770:	2300      	movs	r3, #0
   30772:	60fb      	str	r3, [r7, #12]
   30774:	687b      	ldr	r3, [r7, #4]
   30776:	7a1b      	ldrb	r3, [r3, #8]
   30778:	2b03      	cmp	r3, #3
   3077a:	d102      	bne.n	30782 <MQTTSerialize_connectLength+0x1a>
   3077c:	230c      	movs	r3, #12
   3077e:	60fb      	str	r3, [r7, #12]
   30780:	e005      	b.n	3078e <MQTTSerialize_connectLength+0x26>
   30782:	687b      	ldr	r3, [r7, #4]
   30784:	7a1b      	ldrb	r3, [r3, #8]
   30786:	2b04      	cmp	r3, #4
   30788:	d101      	bne.n	3078e <MQTTSerialize_connectLength+0x26>
   3078a:	230a      	movs	r3, #10
   3078c:	60fb      	str	r3, [r7, #12]
   3078e:	687b      	ldr	r3, [r7, #4]
   30790:	68d8      	ldr	r0, [r3, #12]
   30792:	6919      	ldr	r1, [r3, #16]
   30794:	695a      	ldr	r2, [r3, #20]
   30796:	4b25      	ldr	r3, [pc, #148]	; (3082c <MQTTSerialize_connectLength+0xc4>)
   30798:	4798      	blx	r3
   3079a:	0003      	movs	r3, r0
   3079c:	3302      	adds	r3, #2
   3079e:	68fa      	ldr	r2, [r7, #12]
   307a0:	18d3      	adds	r3, r2, r3
   307a2:	60fb      	str	r3, [r7, #12]
   307a4:	687b      	ldr	r3, [r7, #4]
   307a6:	7edb      	ldrb	r3, [r3, #27]
   307a8:	2b00      	cmp	r3, #0
   307aa:	d013      	beq.n	307d4 <MQTTSerialize_connectLength+0x6c>
   307ac:	687b      	ldr	r3, [r7, #4]
   307ae:	6a58      	ldr	r0, [r3, #36]	; 0x24
   307b0:	6a99      	ldr	r1, [r3, #40]	; 0x28
   307b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   307b4:	4b1d      	ldr	r3, [pc, #116]	; (3082c <MQTTSerialize_connectLength+0xc4>)
   307b6:	4798      	blx	r3
   307b8:	0003      	movs	r3, r0
   307ba:	1c9c      	adds	r4, r3, #2
   307bc:	687b      	ldr	r3, [r7, #4]
   307be:	6b18      	ldr	r0, [r3, #48]	; 0x30
   307c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
   307c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   307c4:	4b19      	ldr	r3, [pc, #100]	; (3082c <MQTTSerialize_connectLength+0xc4>)
   307c6:	4798      	blx	r3
   307c8:	0003      	movs	r3, r0
   307ca:	18e3      	adds	r3, r4, r3
   307cc:	3302      	adds	r3, #2
   307ce:	68fa      	ldr	r2, [r7, #12]
   307d0:	18d3      	adds	r3, r2, r3
   307d2:	60fb      	str	r3, [r7, #12]
   307d4:	687b      	ldr	r3, [r7, #4]
   307d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   307d8:	2b00      	cmp	r3, #0
   307da:	d103      	bne.n	307e4 <MQTTSerialize_connectLength+0x7c>
   307dc:	687b      	ldr	r3, [r7, #4]
   307de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   307e0:	2b00      	cmp	r3, #0
   307e2:	d00a      	beq.n	307fa <MQTTSerialize_connectLength+0x92>
   307e4:	687b      	ldr	r3, [r7, #4]
   307e6:	6c18      	ldr	r0, [r3, #64]	; 0x40
   307e8:	6c59      	ldr	r1, [r3, #68]	; 0x44
   307ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   307ec:	4b0f      	ldr	r3, [pc, #60]	; (3082c <MQTTSerialize_connectLength+0xc4>)
   307ee:	4798      	blx	r3
   307f0:	0003      	movs	r3, r0
   307f2:	3302      	adds	r3, #2
   307f4:	68fa      	ldr	r2, [r7, #12]
   307f6:	18d3      	adds	r3, r2, r3
   307f8:	60fb      	str	r3, [r7, #12]
   307fa:	687b      	ldr	r3, [r7, #4]
   307fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   307fe:	2b00      	cmp	r3, #0
   30800:	d103      	bne.n	3080a <MQTTSerialize_connectLength+0xa2>
   30802:	687b      	ldr	r3, [r7, #4]
   30804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   30806:	2b00      	cmp	r3, #0
   30808:	d00a      	beq.n	30820 <MQTTSerialize_connectLength+0xb8>
   3080a:	687b      	ldr	r3, [r7, #4]
   3080c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   3080e:	6d19      	ldr	r1, [r3, #80]	; 0x50
   30810:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   30812:	4b06      	ldr	r3, [pc, #24]	; (3082c <MQTTSerialize_connectLength+0xc4>)
   30814:	4798      	blx	r3
   30816:	0003      	movs	r3, r0
   30818:	3302      	adds	r3, #2
   3081a:	68fa      	ldr	r2, [r7, #12]
   3081c:	18d3      	adds	r3, r2, r3
   3081e:	60fb      	str	r3, [r7, #12]
   30820:	68fb      	ldr	r3, [r7, #12]
   30822:	0018      	movs	r0, r3
   30824:	46bd      	mov	sp, r7
   30826:	b005      	add	sp, #20
   30828:	bd90      	pop	{r4, r7, pc}
   3082a:	46c0      	nop			; (mov r8, r8)
   3082c:	000311d9 	.word	0x000311d9

00030830 <MQTTSerialize_connect>:
   30830:	b590      	push	{r4, r7, lr}
   30832:	b08b      	sub	sp, #44	; 0x2c
   30834:	af00      	add	r7, sp, #0
   30836:	60f8      	str	r0, [r7, #12]
   30838:	60b9      	str	r1, [r7, #8]
   3083a:	607a      	str	r2, [r7, #4]
   3083c:	68fb      	ldr	r3, [r7, #12]
   3083e:	61fb      	str	r3, [r7, #28]
   30840:	2300      	movs	r3, #0
   30842:	61bb      	str	r3, [r7, #24]
   30844:	2300      	movs	r3, #0
   30846:	617b      	str	r3, [r7, #20]
   30848:	2300      	movs	r3, #0
   3084a:	623b      	str	r3, [r7, #32]
   3084c:	2301      	movs	r3, #1
   3084e:	425b      	negs	r3, r3
   30850:	627b      	str	r3, [r7, #36]	; 0x24
   30852:	687b      	ldr	r3, [r7, #4]
   30854:	0018      	movs	r0, r3
   30856:	4b8c      	ldr	r3, [pc, #560]	; (30a88 <MQTTSerialize_connect+0x258>)
   30858:	4798      	blx	r3
   3085a:	0003      	movs	r3, r0
   3085c:	623b      	str	r3, [r7, #32]
   3085e:	6a3b      	ldr	r3, [r7, #32]
   30860:	0018      	movs	r0, r3
   30862:	4b8a      	ldr	r3, [pc, #552]	; (30a8c <MQTTSerialize_connect+0x25c>)
   30864:	4798      	blx	r3
   30866:	0002      	movs	r2, r0
   30868:	68bb      	ldr	r3, [r7, #8]
   3086a:	429a      	cmp	r2, r3
   3086c:	dd03      	ble.n	30876 <MQTTSerialize_connect+0x46>
   3086e:	2302      	movs	r3, #2
   30870:	425b      	negs	r3, r3
   30872:	627b      	str	r3, [r7, #36]	; 0x24
   30874:	e103      	b.n	30a7e <MQTTSerialize_connect+0x24e>
   30876:	2318      	movs	r3, #24
   30878:	18fb      	adds	r3, r7, r3
   3087a:	2200      	movs	r2, #0
   3087c:	701a      	strb	r2, [r3, #0]
   3087e:	2318      	movs	r3, #24
   30880:	18fb      	adds	r3, r7, r3
   30882:	781a      	ldrb	r2, [r3, #0]
   30884:	210f      	movs	r1, #15
   30886:	400a      	ands	r2, r1
   30888:	1c11      	adds	r1, r2, #0
   3088a:	2210      	movs	r2, #16
   3088c:	430a      	orrs	r2, r1
   3088e:	701a      	strb	r2, [r3, #0]
   30890:	2318      	movs	r3, #24
   30892:	18fb      	adds	r3, r7, r3
   30894:	781a      	ldrb	r2, [r3, #0]
   30896:	231c      	movs	r3, #28
   30898:	18fb      	adds	r3, r7, r3
   3089a:	0011      	movs	r1, r2
   3089c:	0018      	movs	r0, r3
   3089e:	4b7c      	ldr	r3, [pc, #496]	; (30a90 <MQTTSerialize_connect+0x260>)
   308a0:	4798      	blx	r3
   308a2:	69fb      	ldr	r3, [r7, #28]
   308a4:	6a3a      	ldr	r2, [r7, #32]
   308a6:	0011      	movs	r1, r2
   308a8:	0018      	movs	r0, r3
   308aa:	4b7a      	ldr	r3, [pc, #488]	; (30a94 <MQTTSerialize_connect+0x264>)
   308ac:	4798      	blx	r3
   308ae:	0002      	movs	r2, r0
   308b0:	69fb      	ldr	r3, [r7, #28]
   308b2:	189b      	adds	r3, r3, r2
   308b4:	61fb      	str	r3, [r7, #28]
   308b6:	687b      	ldr	r3, [r7, #4]
   308b8:	7a1b      	ldrb	r3, [r3, #8]
   308ba:	2b04      	cmp	r3, #4
   308bc:	d10d      	bne.n	308da <MQTTSerialize_connect+0xaa>
   308be:	4a76      	ldr	r2, [pc, #472]	; (30a98 <MQTTSerialize_connect+0x268>)
   308c0:	231c      	movs	r3, #28
   308c2:	18fb      	adds	r3, r7, r3
   308c4:	0011      	movs	r1, r2
   308c6:	0018      	movs	r0, r3
   308c8:	4b74      	ldr	r3, [pc, #464]	; (30a9c <MQTTSerialize_connect+0x26c>)
   308ca:	4798      	blx	r3
   308cc:	231c      	movs	r3, #28
   308ce:	18fb      	adds	r3, r7, r3
   308d0:	2104      	movs	r1, #4
   308d2:	0018      	movs	r0, r3
   308d4:	4b6e      	ldr	r3, [pc, #440]	; (30a90 <MQTTSerialize_connect+0x260>)
   308d6:	4798      	blx	r3
   308d8:	e00c      	b.n	308f4 <MQTTSerialize_connect+0xc4>
   308da:	4a71      	ldr	r2, [pc, #452]	; (30aa0 <MQTTSerialize_connect+0x270>)
   308dc:	231c      	movs	r3, #28
   308de:	18fb      	adds	r3, r7, r3
   308e0:	0011      	movs	r1, r2
   308e2:	0018      	movs	r0, r3
   308e4:	4b6d      	ldr	r3, [pc, #436]	; (30a9c <MQTTSerialize_connect+0x26c>)
   308e6:	4798      	blx	r3
   308e8:	231c      	movs	r3, #28
   308ea:	18fb      	adds	r3, r7, r3
   308ec:	2103      	movs	r1, #3
   308ee:	0018      	movs	r0, r3
   308f0:	4b67      	ldr	r3, [pc, #412]	; (30a90 <MQTTSerialize_connect+0x260>)
   308f2:	4798      	blx	r3
   308f4:	2314      	movs	r3, #20
   308f6:	18fb      	adds	r3, r7, r3
   308f8:	2200      	movs	r2, #0
   308fa:	701a      	strb	r2, [r3, #0]
   308fc:	687b      	ldr	r3, [r7, #4]
   308fe:	7e9b      	ldrb	r3, [r3, #26]
   30900:	1c1a      	adds	r2, r3, #0
   30902:	2301      	movs	r3, #1
   30904:	4013      	ands	r3, r2
   30906:	b2da      	uxtb	r2, r3
   30908:	2314      	movs	r3, #20
   3090a:	18fb      	adds	r3, r7, r3
   3090c:	2101      	movs	r1, #1
   3090e:	400a      	ands	r2, r1
   30910:	1890      	adds	r0, r2, r2
   30912:	781a      	ldrb	r2, [r3, #0]
   30914:	2102      	movs	r1, #2
   30916:	438a      	bics	r2, r1
   30918:	1c11      	adds	r1, r2, #0
   3091a:	1c02      	adds	r2, r0, #0
   3091c:	430a      	orrs	r2, r1
   3091e:	701a      	strb	r2, [r3, #0]
   30920:	687b      	ldr	r3, [r7, #4]
   30922:	7edb      	ldrb	r3, [r3, #27]
   30924:	1e5a      	subs	r2, r3, #1
   30926:	4193      	sbcs	r3, r2
   30928:	b2da      	uxtb	r2, r3
   3092a:	2314      	movs	r3, #20
   3092c:	18fb      	adds	r3, r7, r3
   3092e:	2101      	movs	r1, #1
   30930:	400a      	ands	r2, r1
   30932:	0090      	lsls	r0, r2, #2
   30934:	781a      	ldrb	r2, [r3, #0]
   30936:	2104      	movs	r1, #4
   30938:	438a      	bics	r2, r1
   3093a:	1c11      	adds	r1, r2, #0
   3093c:	1c02      	adds	r2, r0, #0
   3093e:	430a      	orrs	r2, r1
   30940:	701a      	strb	r2, [r3, #0]
   30942:	2314      	movs	r3, #20
   30944:	18fb      	adds	r3, r7, r3
   30946:	781b      	ldrb	r3, [r3, #0]
   30948:	2204      	movs	r2, #4
   3094a:	4013      	ands	r3, r2
   3094c:	b2db      	uxtb	r3, r3
   3094e:	2b00      	cmp	r3, #0
   30950:	d025      	beq.n	3099e <MQTTSerialize_connect+0x16e>
   30952:	687b      	ldr	r3, [r7, #4]
   30954:	223d      	movs	r2, #61	; 0x3d
   30956:	5c9b      	ldrb	r3, [r3, r2]
   30958:	1c1a      	adds	r2, r3, #0
   3095a:	2303      	movs	r3, #3
   3095c:	4013      	ands	r3, r2
   3095e:	b2da      	uxtb	r2, r3
   30960:	2314      	movs	r3, #20
   30962:	18fb      	adds	r3, r7, r3
   30964:	2103      	movs	r1, #3
   30966:	400a      	ands	r2, r1
   30968:	00d0      	lsls	r0, r2, #3
   3096a:	781a      	ldrb	r2, [r3, #0]
   3096c:	2118      	movs	r1, #24
   3096e:	438a      	bics	r2, r1
   30970:	1c11      	adds	r1, r2, #0
   30972:	1c02      	adds	r2, r0, #0
   30974:	430a      	orrs	r2, r1
   30976:	701a      	strb	r2, [r3, #0]
   30978:	687b      	ldr	r3, [r7, #4]
   3097a:	223c      	movs	r2, #60	; 0x3c
   3097c:	5c9b      	ldrb	r3, [r3, r2]
   3097e:	1c1a      	adds	r2, r3, #0
   30980:	2301      	movs	r3, #1
   30982:	4013      	ands	r3, r2
   30984:	b2da      	uxtb	r2, r3
   30986:	2314      	movs	r3, #20
   30988:	18fb      	adds	r3, r7, r3
   3098a:	2101      	movs	r1, #1
   3098c:	400a      	ands	r2, r1
   3098e:	0150      	lsls	r0, r2, #5
   30990:	781a      	ldrb	r2, [r3, #0]
   30992:	2120      	movs	r1, #32
   30994:	438a      	bics	r2, r1
   30996:	1c11      	adds	r1, r2, #0
   30998:	1c02      	adds	r2, r0, #0
   3099a:	430a      	orrs	r2, r1
   3099c:	701a      	strb	r2, [r3, #0]
   3099e:	687b      	ldr	r3, [r7, #4]
   309a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   309a2:	2b00      	cmp	r3, #0
   309a4:	d103      	bne.n	309ae <MQTTSerialize_connect+0x17e>
   309a6:	687b      	ldr	r3, [r7, #4]
   309a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   309aa:	2b00      	cmp	r3, #0
   309ac:	d006      	beq.n	309bc <MQTTSerialize_connect+0x18c>
   309ae:	2314      	movs	r3, #20
   309b0:	18fb      	adds	r3, r7, r3
   309b2:	781a      	ldrb	r2, [r3, #0]
   309b4:	2180      	movs	r1, #128	; 0x80
   309b6:	4249      	negs	r1, r1
   309b8:	430a      	orrs	r2, r1
   309ba:	701a      	strb	r2, [r3, #0]
   309bc:	687b      	ldr	r3, [r7, #4]
   309be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   309c0:	2b00      	cmp	r3, #0
   309c2:	d103      	bne.n	309cc <MQTTSerialize_connect+0x19c>
   309c4:	687b      	ldr	r3, [r7, #4]
   309c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   309c8:	2b00      	cmp	r3, #0
   309ca:	d005      	beq.n	309d8 <MQTTSerialize_connect+0x1a8>
   309cc:	2314      	movs	r3, #20
   309ce:	18fb      	adds	r3, r7, r3
   309d0:	781a      	ldrb	r2, [r3, #0]
   309d2:	2140      	movs	r1, #64	; 0x40
   309d4:	430a      	orrs	r2, r1
   309d6:	701a      	strb	r2, [r3, #0]
   309d8:	2314      	movs	r3, #20
   309da:	18fb      	adds	r3, r7, r3
   309dc:	781a      	ldrb	r2, [r3, #0]
   309de:	231c      	movs	r3, #28
   309e0:	18fb      	adds	r3, r7, r3
   309e2:	0011      	movs	r1, r2
   309e4:	0018      	movs	r0, r3
   309e6:	4b2a      	ldr	r3, [pc, #168]	; (30a90 <MQTTSerialize_connect+0x260>)
   309e8:	4798      	blx	r3
   309ea:	687b      	ldr	r3, [r7, #4]
   309ec:	8b1b      	ldrh	r3, [r3, #24]
   309ee:	001a      	movs	r2, r3
   309f0:	231c      	movs	r3, #28
   309f2:	18fb      	adds	r3, r7, r3
   309f4:	0011      	movs	r1, r2
   309f6:	0018      	movs	r0, r3
   309f8:	4b2a      	ldr	r3, [pc, #168]	; (30aa4 <MQTTSerialize_connect+0x274>)
   309fa:	4798      	blx	r3
   309fc:	687b      	ldr	r3, [r7, #4]
   309fe:	221c      	movs	r2, #28
   30a00:	18b8      	adds	r0, r7, r2
   30a02:	68d9      	ldr	r1, [r3, #12]
   30a04:	691a      	ldr	r2, [r3, #16]
   30a06:	695b      	ldr	r3, [r3, #20]
   30a08:	4c27      	ldr	r4, [pc, #156]	; (30aa8 <MQTTSerialize_connect+0x278>)
   30a0a:	47a0      	blx	r4
   30a0c:	687b      	ldr	r3, [r7, #4]
   30a0e:	7edb      	ldrb	r3, [r3, #27]
   30a10:	2b00      	cmp	r3, #0
   30a12:	d00f      	beq.n	30a34 <MQTTSerialize_connect+0x204>
   30a14:	687b      	ldr	r3, [r7, #4]
   30a16:	221c      	movs	r2, #28
   30a18:	18b8      	adds	r0, r7, r2
   30a1a:	6a59      	ldr	r1, [r3, #36]	; 0x24
   30a1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   30a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   30a20:	4c21      	ldr	r4, [pc, #132]	; (30aa8 <MQTTSerialize_connect+0x278>)
   30a22:	47a0      	blx	r4
   30a24:	687b      	ldr	r3, [r7, #4]
   30a26:	221c      	movs	r2, #28
   30a28:	18b8      	adds	r0, r7, r2
   30a2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
   30a2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   30a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   30a30:	4c1d      	ldr	r4, [pc, #116]	; (30aa8 <MQTTSerialize_connect+0x278>)
   30a32:	47a0      	blx	r4
   30a34:	2314      	movs	r3, #20
   30a36:	18fb      	adds	r3, r7, r3
   30a38:	781b      	ldrb	r3, [r3, #0]
   30a3a:	227f      	movs	r2, #127	; 0x7f
   30a3c:	4393      	bics	r3, r2
   30a3e:	b2db      	uxtb	r3, r3
   30a40:	2b00      	cmp	r3, #0
   30a42:	d007      	beq.n	30a54 <MQTTSerialize_connect+0x224>
   30a44:	687b      	ldr	r3, [r7, #4]
   30a46:	221c      	movs	r2, #28
   30a48:	18b8      	adds	r0, r7, r2
   30a4a:	6c19      	ldr	r1, [r3, #64]	; 0x40
   30a4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   30a4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   30a50:	4c15      	ldr	r4, [pc, #84]	; (30aa8 <MQTTSerialize_connect+0x278>)
   30a52:	47a0      	blx	r4
   30a54:	2314      	movs	r3, #20
   30a56:	18fb      	adds	r3, r7, r3
   30a58:	781b      	ldrb	r3, [r3, #0]
   30a5a:	2240      	movs	r2, #64	; 0x40
   30a5c:	4013      	ands	r3, r2
   30a5e:	b2db      	uxtb	r3, r3
   30a60:	2b00      	cmp	r3, #0
   30a62:	d007      	beq.n	30a74 <MQTTSerialize_connect+0x244>
   30a64:	687b      	ldr	r3, [r7, #4]
   30a66:	221c      	movs	r2, #28
   30a68:	18b8      	adds	r0, r7, r2
   30a6a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   30a6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   30a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   30a70:	4c0d      	ldr	r4, [pc, #52]	; (30aa8 <MQTTSerialize_connect+0x278>)
   30a72:	47a0      	blx	r4
   30a74:	69fb      	ldr	r3, [r7, #28]
   30a76:	001a      	movs	r2, r3
   30a78:	68fb      	ldr	r3, [r7, #12]
   30a7a:	1ad3      	subs	r3, r2, r3
   30a7c:	627b      	str	r3, [r7, #36]	; 0x24
   30a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30a80:	0018      	movs	r0, r3
   30a82:	46bd      	mov	sp, r7
   30a84:	b00b      	add	sp, #44	; 0x2c
   30a86:	bd90      	pop	{r4, r7, pc}
   30a88:	00030769 	.word	0x00030769
   30a8c:	00030efd 	.word	0x00030efd
   30a90:	0003101f 	.word	0x0003101f
   30a94:	00030e05 	.word	0x00030e05
   30a98:	0003a9c0 	.word	0x0003a9c0
   30a9c:	000310a1 	.word	0x000310a1
   30aa0:	0003a9c8 	.word	0x0003a9c8
   30aa4:	00031049 	.word	0x00031049
   30aa8:	000310f1 	.word	0x000310f1

00030aac <MQTTDeserialize_connack>:
   30aac:	b580      	push	{r7, lr}
   30aae:	b08a      	sub	sp, #40	; 0x28
   30ab0:	af00      	add	r7, sp, #0
   30ab2:	60f8      	str	r0, [r7, #12]
   30ab4:	60b9      	str	r1, [r7, #8]
   30ab6:	607a      	str	r2, [r7, #4]
   30ab8:	603b      	str	r3, [r7, #0]
   30aba:	2300      	movs	r3, #0
   30abc:	61fb      	str	r3, [r7, #28]
   30abe:	687b      	ldr	r3, [r7, #4]
   30ac0:	61bb      	str	r3, [r7, #24]
   30ac2:	2300      	movs	r3, #0
   30ac4:	623b      	str	r3, [r7, #32]
   30ac6:	2300      	movs	r3, #0
   30ac8:	627b      	str	r3, [r7, #36]	; 0x24
   30aca:	2300      	movs	r3, #0
   30acc:	613b      	str	r3, [r7, #16]
   30ace:	2318      	movs	r3, #24
   30ad0:	18fb      	adds	r3, r7, r3
   30ad2:	0018      	movs	r0, r3
   30ad4:	4b25      	ldr	r3, [pc, #148]	; (30b6c <MQTTDeserialize_connack+0xc0>)
   30ad6:	4798      	blx	r3
   30ad8:	0003      	movs	r3, r0
   30ada:	001a      	movs	r2, r3
   30adc:	231c      	movs	r3, #28
   30ade:	18fb      	adds	r3, r7, r3
   30ae0:	701a      	strb	r2, [r3, #0]
   30ae2:	231c      	movs	r3, #28
   30ae4:	18fb      	adds	r3, r7, r3
   30ae6:	781b      	ldrb	r3, [r3, #0]
   30ae8:	220f      	movs	r2, #15
   30aea:	4393      	bics	r3, r2
   30aec:	b2db      	uxtb	r3, r3
   30aee:	2b20      	cmp	r3, #32
   30af0:	d134      	bne.n	30b5c <MQTTDeserialize_connack+0xb0>
   30af2:	69bb      	ldr	r3, [r7, #24]
   30af4:	2214      	movs	r2, #20
   30af6:	18ba      	adds	r2, r7, r2
   30af8:	0011      	movs	r1, r2
   30afa:	0018      	movs	r0, r3
   30afc:	4b1c      	ldr	r3, [pc, #112]	; (30b70 <MQTTDeserialize_connack+0xc4>)
   30afe:	4798      	blx	r3
   30b00:	0003      	movs	r3, r0
   30b02:	627b      	str	r3, [r7, #36]	; 0x24
   30b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   30b06:	69bb      	ldr	r3, [r7, #24]
   30b08:	189b      	adds	r3, r3, r2
   30b0a:	61bb      	str	r3, [r7, #24]
   30b0c:	69bb      	ldr	r3, [r7, #24]
   30b0e:	697a      	ldr	r2, [r7, #20]
   30b10:	189b      	adds	r3, r3, r2
   30b12:	623b      	str	r3, [r7, #32]
   30b14:	6a3b      	ldr	r3, [r7, #32]
   30b16:	69ba      	ldr	r2, [r7, #24]
   30b18:	1a9b      	subs	r3, r3, r2
   30b1a:	2b01      	cmp	r3, #1
   30b1c:	dd20      	ble.n	30b60 <MQTTDeserialize_connack+0xb4>
   30b1e:	2318      	movs	r3, #24
   30b20:	18fb      	adds	r3, r7, r3
   30b22:	0018      	movs	r0, r3
   30b24:	4b11      	ldr	r3, [pc, #68]	; (30b6c <MQTTDeserialize_connack+0xc0>)
   30b26:	4798      	blx	r3
   30b28:	0003      	movs	r3, r0
   30b2a:	001a      	movs	r2, r3
   30b2c:	2310      	movs	r3, #16
   30b2e:	18fb      	adds	r3, r7, r3
   30b30:	701a      	strb	r2, [r3, #0]
   30b32:	2310      	movs	r3, #16
   30b34:	18fb      	adds	r3, r7, r3
   30b36:	781b      	ldrb	r3, [r3, #0]
   30b38:	061b      	lsls	r3, r3, #24
   30b3a:	0fdb      	lsrs	r3, r3, #31
   30b3c:	b2db      	uxtb	r3, r3
   30b3e:	001a      	movs	r2, r3
   30b40:	68fb      	ldr	r3, [r7, #12]
   30b42:	701a      	strb	r2, [r3, #0]
   30b44:	2318      	movs	r3, #24
   30b46:	18fb      	adds	r3, r7, r3
   30b48:	0018      	movs	r0, r3
   30b4a:	4b08      	ldr	r3, [pc, #32]	; (30b6c <MQTTDeserialize_connack+0xc0>)
   30b4c:	4798      	blx	r3
   30b4e:	0003      	movs	r3, r0
   30b50:	001a      	movs	r2, r3
   30b52:	68bb      	ldr	r3, [r7, #8]
   30b54:	701a      	strb	r2, [r3, #0]
   30b56:	2301      	movs	r3, #1
   30b58:	627b      	str	r3, [r7, #36]	; 0x24
   30b5a:	e002      	b.n	30b62 <MQTTDeserialize_connack+0xb6>
   30b5c:	46c0      	nop			; (mov r8, r8)
   30b5e:	e000      	b.n	30b62 <MQTTDeserialize_connack+0xb6>
   30b60:	46c0      	nop			; (mov r8, r8)
   30b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30b64:	0018      	movs	r0, r3
   30b66:	46bd      	mov	sp, r7
   30b68:	b00a      	add	sp, #40	; 0x28
   30b6a:	bd80      	pop	{r7, pc}
   30b6c:	00030ff3 	.word	0x00030ff3
   30b70:	00030f8d 	.word	0x00030f8d

00030b74 <MQTTSerialize_zero>:
   30b74:	b580      	push	{r7, lr}
   30b76:	b088      	sub	sp, #32
   30b78:	af00      	add	r7, sp, #0
   30b7a:	60f8      	str	r0, [r7, #12]
   30b7c:	60b9      	str	r1, [r7, #8]
   30b7e:	1dfb      	adds	r3, r7, #7
   30b80:	701a      	strb	r2, [r3, #0]
   30b82:	2300      	movs	r3, #0
   30b84:	61bb      	str	r3, [r7, #24]
   30b86:	2301      	movs	r3, #1
   30b88:	425b      	negs	r3, r3
   30b8a:	61fb      	str	r3, [r7, #28]
   30b8c:	68fb      	ldr	r3, [r7, #12]
   30b8e:	617b      	str	r3, [r7, #20]
   30b90:	68bb      	ldr	r3, [r7, #8]
   30b92:	2b01      	cmp	r3, #1
   30b94:	dc03      	bgt.n	30b9e <MQTTSerialize_zero+0x2a>
   30b96:	2302      	movs	r3, #2
   30b98:	425b      	negs	r3, r3
   30b9a:	61fb      	str	r3, [r7, #28]
   30b9c:	e029      	b.n	30bf2 <MQTTSerialize_zero+0x7e>
   30b9e:	2318      	movs	r3, #24
   30ba0:	18fb      	adds	r3, r7, r3
   30ba2:	2200      	movs	r2, #0
   30ba4:	701a      	strb	r2, [r3, #0]
   30ba6:	1dfb      	adds	r3, r7, #7
   30ba8:	781b      	ldrb	r3, [r3, #0]
   30baa:	220f      	movs	r2, #15
   30bac:	4013      	ands	r3, r2
   30bae:	b2da      	uxtb	r2, r3
   30bb0:	2318      	movs	r3, #24
   30bb2:	18fb      	adds	r3, r7, r3
   30bb4:	0110      	lsls	r0, r2, #4
   30bb6:	781a      	ldrb	r2, [r3, #0]
   30bb8:	210f      	movs	r1, #15
   30bba:	400a      	ands	r2, r1
   30bbc:	1c11      	adds	r1, r2, #0
   30bbe:	1c02      	adds	r2, r0, #0
   30bc0:	430a      	orrs	r2, r1
   30bc2:	701a      	strb	r2, [r3, #0]
   30bc4:	2318      	movs	r3, #24
   30bc6:	18fb      	adds	r3, r7, r3
   30bc8:	781a      	ldrb	r2, [r3, #0]
   30bca:	2314      	movs	r3, #20
   30bcc:	18fb      	adds	r3, r7, r3
   30bce:	0011      	movs	r1, r2
   30bd0:	0018      	movs	r0, r3
   30bd2:	4b0a      	ldr	r3, [pc, #40]	; (30bfc <MQTTSerialize_zero+0x88>)
   30bd4:	4798      	blx	r3
   30bd6:	697b      	ldr	r3, [r7, #20]
   30bd8:	2100      	movs	r1, #0
   30bda:	0018      	movs	r0, r3
   30bdc:	4b08      	ldr	r3, [pc, #32]	; (30c00 <MQTTSerialize_zero+0x8c>)
   30bde:	4798      	blx	r3
   30be0:	0002      	movs	r2, r0
   30be2:	697b      	ldr	r3, [r7, #20]
   30be4:	189b      	adds	r3, r3, r2
   30be6:	617b      	str	r3, [r7, #20]
   30be8:	697b      	ldr	r3, [r7, #20]
   30bea:	001a      	movs	r2, r3
   30bec:	68fb      	ldr	r3, [r7, #12]
   30bee:	1ad3      	subs	r3, r2, r3
   30bf0:	61fb      	str	r3, [r7, #28]
   30bf2:	69fb      	ldr	r3, [r7, #28]
   30bf4:	0018      	movs	r0, r3
   30bf6:	46bd      	mov	sp, r7
   30bf8:	b008      	add	sp, #32
   30bfa:	bd80      	pop	{r7, pc}
   30bfc:	0003101f 	.word	0x0003101f
   30c00:	00030e05 	.word	0x00030e05

00030c04 <MQTTSerialize_disconnect>:
   30c04:	b580      	push	{r7, lr}
   30c06:	b082      	sub	sp, #8
   30c08:	af00      	add	r7, sp, #0
   30c0a:	6078      	str	r0, [r7, #4]
   30c0c:	6039      	str	r1, [r7, #0]
   30c0e:	6839      	ldr	r1, [r7, #0]
   30c10:	687b      	ldr	r3, [r7, #4]
   30c12:	220e      	movs	r2, #14
   30c14:	0018      	movs	r0, r3
   30c16:	4b03      	ldr	r3, [pc, #12]	; (30c24 <MQTTSerialize_disconnect+0x20>)
   30c18:	4798      	blx	r3
   30c1a:	0003      	movs	r3, r0
   30c1c:	0018      	movs	r0, r3
   30c1e:	46bd      	mov	sp, r7
   30c20:	b002      	add	sp, #8
   30c22:	bd80      	pop	{r7, pc}
   30c24:	00030b75 	.word	0x00030b75

00030c28 <MQTTSerialize_pingreq>:
   30c28:	b580      	push	{r7, lr}
   30c2a:	b082      	sub	sp, #8
   30c2c:	af00      	add	r7, sp, #0
   30c2e:	6078      	str	r0, [r7, #4]
   30c30:	6039      	str	r1, [r7, #0]
   30c32:	6839      	ldr	r1, [r7, #0]
   30c34:	687b      	ldr	r3, [r7, #4]
   30c36:	220c      	movs	r2, #12
   30c38:	0018      	movs	r0, r3
   30c3a:	4b03      	ldr	r3, [pc, #12]	; (30c48 <MQTTSerialize_pingreq+0x20>)
   30c3c:	4798      	blx	r3
   30c3e:	0003      	movs	r3, r0
   30c40:	0018      	movs	r0, r3
   30c42:	46bd      	mov	sp, r7
   30c44:	b002      	add	sp, #8
   30c46:	bd80      	pop	{r7, pc}
   30c48:	00030b75 	.word	0x00030b75

00030c4c <MQTTDeserialize_publish>:
   30c4c:	b580      	push	{r7, lr}
   30c4e:	b08a      	sub	sp, #40	; 0x28
   30c50:	af00      	add	r7, sp, #0
   30c52:	60f8      	str	r0, [r7, #12]
   30c54:	60b9      	str	r1, [r7, #8]
   30c56:	607a      	str	r2, [r7, #4]
   30c58:	603b      	str	r3, [r7, #0]
   30c5a:	2300      	movs	r3, #0
   30c5c:	61fb      	str	r3, [r7, #28]
   30c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   30c60:	61bb      	str	r3, [r7, #24]
   30c62:	2300      	movs	r3, #0
   30c64:	623b      	str	r3, [r7, #32]
   30c66:	2300      	movs	r3, #0
   30c68:	627b      	str	r3, [r7, #36]	; 0x24
   30c6a:	2300      	movs	r3, #0
   30c6c:	617b      	str	r3, [r7, #20]
   30c6e:	2318      	movs	r3, #24
   30c70:	18fb      	adds	r3, r7, r3
   30c72:	0018      	movs	r0, r3
   30c74:	4b32      	ldr	r3, [pc, #200]	; (30d40 <MQTTDeserialize_publish+0xf4>)
   30c76:	4798      	blx	r3
   30c78:	0003      	movs	r3, r0
   30c7a:	001a      	movs	r2, r3
   30c7c:	231c      	movs	r3, #28
   30c7e:	18fb      	adds	r3, r7, r3
   30c80:	701a      	strb	r2, [r3, #0]
   30c82:	231c      	movs	r3, #28
   30c84:	18fb      	adds	r3, r7, r3
   30c86:	781b      	ldrb	r3, [r3, #0]
   30c88:	220f      	movs	r2, #15
   30c8a:	4393      	bics	r3, r2
   30c8c:	b2db      	uxtb	r3, r3
   30c8e:	2b30      	cmp	r3, #48	; 0x30
   30c90:	d150      	bne.n	30d34 <MQTTDeserialize_publish+0xe8>
   30c92:	231c      	movs	r3, #28
   30c94:	18fb      	adds	r3, r7, r3
   30c96:	781b      	ldrb	r3, [r3, #0]
   30c98:	071b      	lsls	r3, r3, #28
   30c9a:	0fdb      	lsrs	r3, r3, #31
   30c9c:	b2db      	uxtb	r3, r3
   30c9e:	001a      	movs	r2, r3
   30ca0:	68fb      	ldr	r3, [r7, #12]
   30ca2:	701a      	strb	r2, [r3, #0]
   30ca4:	231c      	movs	r3, #28
   30ca6:	18fb      	adds	r3, r7, r3
   30ca8:	781b      	ldrb	r3, [r3, #0]
   30caa:	075b      	lsls	r3, r3, #29
   30cac:	0f9b      	lsrs	r3, r3, #30
   30cae:	b2db      	uxtb	r3, r3
   30cb0:	001a      	movs	r2, r3
   30cb2:	68bb      	ldr	r3, [r7, #8]
   30cb4:	601a      	str	r2, [r3, #0]
   30cb6:	231c      	movs	r3, #28
   30cb8:	18fb      	adds	r3, r7, r3
   30cba:	781b      	ldrb	r3, [r3, #0]
   30cbc:	07db      	lsls	r3, r3, #31
   30cbe:	0fdb      	lsrs	r3, r3, #31
   30cc0:	b2db      	uxtb	r3, r3
   30cc2:	001a      	movs	r2, r3
   30cc4:	687b      	ldr	r3, [r7, #4]
   30cc6:	701a      	strb	r2, [r3, #0]
   30cc8:	69bb      	ldr	r3, [r7, #24]
   30cca:	2214      	movs	r2, #20
   30ccc:	18ba      	adds	r2, r7, r2
   30cce:	0011      	movs	r1, r2
   30cd0:	0018      	movs	r0, r3
   30cd2:	4b1c      	ldr	r3, [pc, #112]	; (30d44 <MQTTDeserialize_publish+0xf8>)
   30cd4:	4798      	blx	r3
   30cd6:	0003      	movs	r3, r0
   30cd8:	627b      	str	r3, [r7, #36]	; 0x24
   30cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   30cdc:	69bb      	ldr	r3, [r7, #24]
   30cde:	189b      	adds	r3, r3, r2
   30ce0:	61bb      	str	r3, [r7, #24]
   30ce2:	69bb      	ldr	r3, [r7, #24]
   30ce4:	697a      	ldr	r2, [r7, #20]
   30ce6:	189b      	adds	r3, r3, r2
   30ce8:	623b      	str	r3, [r7, #32]
   30cea:	6a3a      	ldr	r2, [r7, #32]
   30cec:	2318      	movs	r3, #24
   30cee:	18f9      	adds	r1, r7, r3
   30cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30cf2:	0018      	movs	r0, r3
   30cf4:	4b14      	ldr	r3, [pc, #80]	; (30d48 <MQTTDeserialize_publish+0xfc>)
   30cf6:	4798      	blx	r3
   30cf8:	1e03      	subs	r3, r0, #0
   30cfa:	d01c      	beq.n	30d36 <MQTTDeserialize_publish+0xea>
   30cfc:	6a3b      	ldr	r3, [r7, #32]
   30cfe:	69ba      	ldr	r2, [r7, #24]
   30d00:	1a9b      	subs	r3, r3, r2
   30d02:	d418      	bmi.n	30d36 <MQTTDeserialize_publish+0xea>
   30d04:	68bb      	ldr	r3, [r7, #8]
   30d06:	681b      	ldr	r3, [r3, #0]
   30d08:	2b00      	cmp	r3, #0
   30d0a:	dd08      	ble.n	30d1e <MQTTDeserialize_publish+0xd2>
   30d0c:	2318      	movs	r3, #24
   30d0e:	18fb      	adds	r3, r7, r3
   30d10:	0018      	movs	r0, r3
   30d12:	4b0e      	ldr	r3, [pc, #56]	; (30d4c <MQTTDeserialize_publish+0x100>)
   30d14:	4798      	blx	r3
   30d16:	0003      	movs	r3, r0
   30d18:	b29a      	uxth	r2, r3
   30d1a:	683b      	ldr	r3, [r7, #0]
   30d1c:	801a      	strh	r2, [r3, #0]
   30d1e:	6a3b      	ldr	r3, [r7, #32]
   30d20:	69ba      	ldr	r2, [r7, #24]
   30d22:	1a9a      	subs	r2, r3, r2
   30d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   30d26:	601a      	str	r2, [r3, #0]
   30d28:	69ba      	ldr	r2, [r7, #24]
   30d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   30d2c:	601a      	str	r2, [r3, #0]
   30d2e:	2301      	movs	r3, #1
   30d30:	627b      	str	r3, [r7, #36]	; 0x24
   30d32:	e000      	b.n	30d36 <MQTTDeserialize_publish+0xea>
   30d34:	46c0      	nop			; (mov r8, r8)
   30d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30d38:	0018      	movs	r0, r3
   30d3a:	46bd      	mov	sp, r7
   30d3c:	b00a      	add	sp, #40	; 0x28
   30d3e:	bd80      	pop	{r7, pc}
   30d40:	00030ff3 	.word	0x00030ff3
   30d44:	00030f8d 	.word	0x00030f8d
   30d48:	00031171 	.word	0x00031171
   30d4c:	00030fc1 	.word	0x00030fc1

00030d50 <MQTTDeserialize_ack>:
   30d50:	b580      	push	{r7, lr}
   30d52:	b08a      	sub	sp, #40	; 0x28
   30d54:	af00      	add	r7, sp, #0
   30d56:	60f8      	str	r0, [r7, #12]
   30d58:	60b9      	str	r1, [r7, #8]
   30d5a:	607a      	str	r2, [r7, #4]
   30d5c:	603b      	str	r3, [r7, #0]
   30d5e:	2300      	movs	r3, #0
   30d60:	61fb      	str	r3, [r7, #28]
   30d62:	683b      	ldr	r3, [r7, #0]
   30d64:	61bb      	str	r3, [r7, #24]
   30d66:	2300      	movs	r3, #0
   30d68:	623b      	str	r3, [r7, #32]
   30d6a:	2300      	movs	r3, #0
   30d6c:	627b      	str	r3, [r7, #36]	; 0x24
   30d6e:	2318      	movs	r3, #24
   30d70:	18fb      	adds	r3, r7, r3
   30d72:	0018      	movs	r0, r3
   30d74:	4b20      	ldr	r3, [pc, #128]	; (30df8 <MQTTDeserialize_ack+0xa8>)
   30d76:	4798      	blx	r3
   30d78:	0003      	movs	r3, r0
   30d7a:	001a      	movs	r2, r3
   30d7c:	231c      	movs	r3, #28
   30d7e:	18fb      	adds	r3, r7, r3
   30d80:	701a      	strb	r2, [r3, #0]
   30d82:	231c      	movs	r3, #28
   30d84:	18fb      	adds	r3, r7, r3
   30d86:	781b      	ldrb	r3, [r3, #0]
   30d88:	071b      	lsls	r3, r3, #28
   30d8a:	0fdb      	lsrs	r3, r3, #31
   30d8c:	b2db      	uxtb	r3, r3
   30d8e:	001a      	movs	r2, r3
   30d90:	68bb      	ldr	r3, [r7, #8]
   30d92:	701a      	strb	r2, [r3, #0]
   30d94:	231c      	movs	r3, #28
   30d96:	18fb      	adds	r3, r7, r3
   30d98:	781b      	ldrb	r3, [r3, #0]
   30d9a:	061b      	lsls	r3, r3, #24
   30d9c:	0f1b      	lsrs	r3, r3, #28
   30d9e:	b2db      	uxtb	r3, r3
   30da0:	001a      	movs	r2, r3
   30da2:	68fb      	ldr	r3, [r7, #12]
   30da4:	701a      	strb	r2, [r3, #0]
   30da6:	69bb      	ldr	r3, [r7, #24]
   30da8:	2214      	movs	r2, #20
   30daa:	18ba      	adds	r2, r7, r2
   30dac:	0011      	movs	r1, r2
   30dae:	0018      	movs	r0, r3
   30db0:	4b12      	ldr	r3, [pc, #72]	; (30dfc <MQTTDeserialize_ack+0xac>)
   30db2:	4798      	blx	r3
   30db4:	0003      	movs	r3, r0
   30db6:	627b      	str	r3, [r7, #36]	; 0x24
   30db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   30dba:	69bb      	ldr	r3, [r7, #24]
   30dbc:	189b      	adds	r3, r3, r2
   30dbe:	61bb      	str	r3, [r7, #24]
   30dc0:	69bb      	ldr	r3, [r7, #24]
   30dc2:	697a      	ldr	r2, [r7, #20]
   30dc4:	189b      	adds	r3, r3, r2
   30dc6:	623b      	str	r3, [r7, #32]
   30dc8:	6a3b      	ldr	r3, [r7, #32]
   30dca:	69ba      	ldr	r2, [r7, #24]
   30dcc:	1a9b      	subs	r3, r3, r2
   30dce:	2b01      	cmp	r3, #1
   30dd0:	dd0b      	ble.n	30dea <MQTTDeserialize_ack+0x9a>
   30dd2:	2318      	movs	r3, #24
   30dd4:	18fb      	adds	r3, r7, r3
   30dd6:	0018      	movs	r0, r3
   30dd8:	4b09      	ldr	r3, [pc, #36]	; (30e00 <MQTTDeserialize_ack+0xb0>)
   30dda:	4798      	blx	r3
   30ddc:	0003      	movs	r3, r0
   30dde:	b29a      	uxth	r2, r3
   30de0:	687b      	ldr	r3, [r7, #4]
   30de2:	801a      	strh	r2, [r3, #0]
   30de4:	2301      	movs	r3, #1
   30de6:	627b      	str	r3, [r7, #36]	; 0x24
   30de8:	e000      	b.n	30dec <MQTTDeserialize_ack+0x9c>
   30dea:	46c0      	nop			; (mov r8, r8)
   30dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30dee:	0018      	movs	r0, r3
   30df0:	46bd      	mov	sp, r7
   30df2:	b00a      	add	sp, #40	; 0x28
   30df4:	bd80      	pop	{r7, pc}
   30df6:	46c0      	nop			; (mov r8, r8)
   30df8:	00030ff3 	.word	0x00030ff3
   30dfc:	00030f8d 	.word	0x00030f8d
   30e00:	00030fc1 	.word	0x00030fc1

00030e04 <MQTTPacket_encode>:
   30e04:	b580      	push	{r7, lr}
   30e06:	b084      	sub	sp, #16
   30e08:	af00      	add	r7, sp, #0
   30e0a:	6078      	str	r0, [r7, #4]
   30e0c:	6039      	str	r1, [r7, #0]
   30e0e:	2300      	movs	r3, #0
   30e10:	60fb      	str	r3, [r7, #12]
   30e12:	683b      	ldr	r3, [r7, #0]
   30e14:	4a17      	ldr	r2, [pc, #92]	; (30e74 <MQTTPacket_encode+0x70>)
   30e16:	4013      	ands	r3, r2
   30e18:	d504      	bpl.n	30e24 <MQTTPacket_encode+0x20>
   30e1a:	3b01      	subs	r3, #1
   30e1c:	2280      	movs	r2, #128	; 0x80
   30e1e:	4252      	negs	r2, r2
   30e20:	4313      	orrs	r3, r2
   30e22:	3301      	adds	r3, #1
   30e24:	001a      	movs	r2, r3
   30e26:	230b      	movs	r3, #11
   30e28:	18fb      	adds	r3, r7, r3
   30e2a:	701a      	strb	r2, [r3, #0]
   30e2c:	683b      	ldr	r3, [r7, #0]
   30e2e:	2b00      	cmp	r3, #0
   30e30:	da00      	bge.n	30e34 <MQTTPacket_encode+0x30>
   30e32:	337f      	adds	r3, #127	; 0x7f
   30e34:	11db      	asrs	r3, r3, #7
   30e36:	603b      	str	r3, [r7, #0]
   30e38:	683b      	ldr	r3, [r7, #0]
   30e3a:	2b00      	cmp	r3, #0
   30e3c:	dd08      	ble.n	30e50 <MQTTPacket_encode+0x4c>
   30e3e:	230b      	movs	r3, #11
   30e40:	18fb      	adds	r3, r7, r3
   30e42:	220b      	movs	r2, #11
   30e44:	18ba      	adds	r2, r7, r2
   30e46:	7812      	ldrb	r2, [r2, #0]
   30e48:	2180      	movs	r1, #128	; 0x80
   30e4a:	4249      	negs	r1, r1
   30e4c:	430a      	orrs	r2, r1
   30e4e:	701a      	strb	r2, [r3, #0]
   30e50:	68fb      	ldr	r3, [r7, #12]
   30e52:	1c5a      	adds	r2, r3, #1
   30e54:	60fa      	str	r2, [r7, #12]
   30e56:	001a      	movs	r2, r3
   30e58:	687b      	ldr	r3, [r7, #4]
   30e5a:	189b      	adds	r3, r3, r2
   30e5c:	220b      	movs	r2, #11
   30e5e:	18ba      	adds	r2, r7, r2
   30e60:	7812      	ldrb	r2, [r2, #0]
   30e62:	701a      	strb	r2, [r3, #0]
   30e64:	683b      	ldr	r3, [r7, #0]
   30e66:	2b00      	cmp	r3, #0
   30e68:	dcd3      	bgt.n	30e12 <MQTTPacket_encode+0xe>
   30e6a:	68fb      	ldr	r3, [r7, #12]
   30e6c:	0018      	movs	r0, r3
   30e6e:	46bd      	mov	sp, r7
   30e70:	b004      	add	sp, #16
   30e72:	bd80      	pop	{r7, pc}
   30e74:	8000007f 	.word	0x8000007f

00030e78 <MQTTPacket_decode>:
   30e78:	b580      	push	{r7, lr}
   30e7a:	b086      	sub	sp, #24
   30e7c:	af00      	add	r7, sp, #0
   30e7e:	6078      	str	r0, [r7, #4]
   30e80:	6039      	str	r1, [r7, #0]
   30e82:	2301      	movs	r3, #1
   30e84:	617b      	str	r3, [r7, #20]
   30e86:	2300      	movs	r3, #0
   30e88:	613b      	str	r3, [r7, #16]
   30e8a:	683b      	ldr	r3, [r7, #0]
   30e8c:	2200      	movs	r2, #0
   30e8e:	601a      	str	r2, [r3, #0]
   30e90:	2301      	movs	r3, #1
   30e92:	425b      	negs	r3, r3
   30e94:	60fb      	str	r3, [r7, #12]
   30e96:	693b      	ldr	r3, [r7, #16]
   30e98:	3301      	adds	r3, #1
   30e9a:	613b      	str	r3, [r7, #16]
   30e9c:	693b      	ldr	r3, [r7, #16]
   30e9e:	2b04      	cmp	r3, #4
   30ea0:	dd03      	ble.n	30eaa <MQTTPacket_decode+0x32>
   30ea2:	2301      	movs	r3, #1
   30ea4:	425b      	negs	r3, r3
   30ea6:	60fb      	str	r3, [r7, #12]
   30ea8:	e022      	b.n	30ef0 <MQTTPacket_decode+0x78>
   30eaa:	230b      	movs	r3, #11
   30eac:	18fa      	adds	r2, r7, r3
   30eae:	687b      	ldr	r3, [r7, #4]
   30eb0:	2101      	movs	r1, #1
   30eb2:	0010      	movs	r0, r2
   30eb4:	4798      	blx	r3
   30eb6:	0003      	movs	r3, r0
   30eb8:	60fb      	str	r3, [r7, #12]
   30eba:	68fb      	ldr	r3, [r7, #12]
   30ebc:	2b01      	cmp	r3, #1
   30ebe:	d116      	bne.n	30eee <MQTTPacket_decode+0x76>
   30ec0:	683b      	ldr	r3, [r7, #0]
   30ec2:	681a      	ldr	r2, [r3, #0]
   30ec4:	230b      	movs	r3, #11
   30ec6:	18fb      	adds	r3, r7, r3
   30ec8:	781b      	ldrb	r3, [r3, #0]
   30eca:	0019      	movs	r1, r3
   30ecc:	237f      	movs	r3, #127	; 0x7f
   30ece:	400b      	ands	r3, r1
   30ed0:	6979      	ldr	r1, [r7, #20]
   30ed2:	434b      	muls	r3, r1
   30ed4:	18d2      	adds	r2, r2, r3
   30ed6:	683b      	ldr	r3, [r7, #0]
   30ed8:	601a      	str	r2, [r3, #0]
   30eda:	697b      	ldr	r3, [r7, #20]
   30edc:	01db      	lsls	r3, r3, #7
   30ede:	617b      	str	r3, [r7, #20]
   30ee0:	230b      	movs	r3, #11
   30ee2:	18fb      	adds	r3, r7, r3
   30ee4:	781b      	ldrb	r3, [r3, #0]
   30ee6:	b25b      	sxtb	r3, r3
   30ee8:	2b00      	cmp	r3, #0
   30eea:	dbd1      	blt.n	30e90 <MQTTPacket_decode+0x18>
   30eec:	e000      	b.n	30ef0 <MQTTPacket_decode+0x78>
   30eee:	46c0      	nop			; (mov r8, r8)
   30ef0:	693b      	ldr	r3, [r7, #16]
   30ef2:	0018      	movs	r0, r3
   30ef4:	46bd      	mov	sp, r7
   30ef6:	b006      	add	sp, #24
   30ef8:	bd80      	pop	{r7, pc}
	...

00030efc <MQTTPacket_len>:
   30efc:	b580      	push	{r7, lr}
   30efe:	b082      	sub	sp, #8
   30f00:	af00      	add	r7, sp, #0
   30f02:	6078      	str	r0, [r7, #4]
   30f04:	687b      	ldr	r3, [r7, #4]
   30f06:	3301      	adds	r3, #1
   30f08:	607b      	str	r3, [r7, #4]
   30f0a:	687b      	ldr	r3, [r7, #4]
   30f0c:	2b7f      	cmp	r3, #127	; 0x7f
   30f0e:	dc03      	bgt.n	30f18 <MQTTPacket_len+0x1c>
   30f10:	687b      	ldr	r3, [r7, #4]
   30f12:	3301      	adds	r3, #1
   30f14:	607b      	str	r3, [r7, #4]
   30f16:	e012      	b.n	30f3e <MQTTPacket_len+0x42>
   30f18:	687b      	ldr	r3, [r7, #4]
   30f1a:	4a0b      	ldr	r2, [pc, #44]	; (30f48 <MQTTPacket_len+0x4c>)
   30f1c:	4293      	cmp	r3, r2
   30f1e:	dc03      	bgt.n	30f28 <MQTTPacket_len+0x2c>
   30f20:	687b      	ldr	r3, [r7, #4]
   30f22:	3302      	adds	r3, #2
   30f24:	607b      	str	r3, [r7, #4]
   30f26:	e00a      	b.n	30f3e <MQTTPacket_len+0x42>
   30f28:	687b      	ldr	r3, [r7, #4]
   30f2a:	4a08      	ldr	r2, [pc, #32]	; (30f4c <MQTTPacket_len+0x50>)
   30f2c:	4293      	cmp	r3, r2
   30f2e:	dc03      	bgt.n	30f38 <MQTTPacket_len+0x3c>
   30f30:	687b      	ldr	r3, [r7, #4]
   30f32:	3303      	adds	r3, #3
   30f34:	607b      	str	r3, [r7, #4]
   30f36:	e002      	b.n	30f3e <MQTTPacket_len+0x42>
   30f38:	687b      	ldr	r3, [r7, #4]
   30f3a:	3304      	adds	r3, #4
   30f3c:	607b      	str	r3, [r7, #4]
   30f3e:	687b      	ldr	r3, [r7, #4]
   30f40:	0018      	movs	r0, r3
   30f42:	46bd      	mov	sp, r7
   30f44:	b002      	add	sp, #8
   30f46:	bd80      	pop	{r7, pc}
   30f48:	00003fff 	.word	0x00003fff
   30f4c:	001ffffe 	.word	0x001ffffe

00030f50 <bufchar>:
   30f50:	b580      	push	{r7, lr}
   30f52:	b084      	sub	sp, #16
   30f54:	af00      	add	r7, sp, #0
   30f56:	6078      	str	r0, [r7, #4]
   30f58:	6039      	str	r1, [r7, #0]
   30f5a:	2300      	movs	r3, #0
   30f5c:	60fb      	str	r3, [r7, #12]
   30f5e:	e00a      	b.n	30f76 <bufchar+0x26>
   30f60:	4b09      	ldr	r3, [pc, #36]	; (30f88 <bufchar+0x38>)
   30f62:	681b      	ldr	r3, [r3, #0]
   30f64:	1c59      	adds	r1, r3, #1
   30f66:	4a08      	ldr	r2, [pc, #32]	; (30f88 <bufchar+0x38>)
   30f68:	6011      	str	r1, [r2, #0]
   30f6a:	781a      	ldrb	r2, [r3, #0]
   30f6c:	687b      	ldr	r3, [r7, #4]
   30f6e:	701a      	strb	r2, [r3, #0]
   30f70:	68fb      	ldr	r3, [r7, #12]
   30f72:	3301      	adds	r3, #1
   30f74:	60fb      	str	r3, [r7, #12]
   30f76:	68fa      	ldr	r2, [r7, #12]
   30f78:	683b      	ldr	r3, [r7, #0]
   30f7a:	429a      	cmp	r2, r3
   30f7c:	dbf0      	blt.n	30f60 <bufchar+0x10>
   30f7e:	683b      	ldr	r3, [r7, #0]
   30f80:	0018      	movs	r0, r3
   30f82:	46bd      	mov	sp, r7
   30f84:	b004      	add	sp, #16
   30f86:	bd80      	pop	{r7, pc}
   30f88:	2000432c 	.word	0x2000432c

00030f8c <MQTTPacket_decodeBuf>:
   30f8c:	b580      	push	{r7, lr}
   30f8e:	b082      	sub	sp, #8
   30f90:	af00      	add	r7, sp, #0
   30f92:	6078      	str	r0, [r7, #4]
   30f94:	6039      	str	r1, [r7, #0]
   30f96:	4b07      	ldr	r3, [pc, #28]	; (30fb4 <MQTTPacket_decodeBuf+0x28>)
   30f98:	687a      	ldr	r2, [r7, #4]
   30f9a:	601a      	str	r2, [r3, #0]
   30f9c:	683a      	ldr	r2, [r7, #0]
   30f9e:	4b06      	ldr	r3, [pc, #24]	; (30fb8 <MQTTPacket_decodeBuf+0x2c>)
   30fa0:	0011      	movs	r1, r2
   30fa2:	0018      	movs	r0, r3
   30fa4:	4b05      	ldr	r3, [pc, #20]	; (30fbc <MQTTPacket_decodeBuf+0x30>)
   30fa6:	4798      	blx	r3
   30fa8:	0003      	movs	r3, r0
   30faa:	0018      	movs	r0, r3
   30fac:	46bd      	mov	sp, r7
   30fae:	b002      	add	sp, #8
   30fb0:	bd80      	pop	{r7, pc}
   30fb2:	46c0      	nop			; (mov r8, r8)
   30fb4:	2000432c 	.word	0x2000432c
   30fb8:	00030f51 	.word	0x00030f51
   30fbc:	00030e79 	.word	0x00030e79

00030fc0 <readInt>:
   30fc0:	b580      	push	{r7, lr}
   30fc2:	b084      	sub	sp, #16
   30fc4:	af00      	add	r7, sp, #0
   30fc6:	6078      	str	r0, [r7, #4]
   30fc8:	687b      	ldr	r3, [r7, #4]
   30fca:	681b      	ldr	r3, [r3, #0]
   30fcc:	60fb      	str	r3, [r7, #12]
   30fce:	68fb      	ldr	r3, [r7, #12]
   30fd0:	781b      	ldrb	r3, [r3, #0]
   30fd2:	021b      	lsls	r3, r3, #8
   30fd4:	68fa      	ldr	r2, [r7, #12]
   30fd6:	3201      	adds	r2, #1
   30fd8:	7812      	ldrb	r2, [r2, #0]
   30fda:	189b      	adds	r3, r3, r2
   30fdc:	60bb      	str	r3, [r7, #8]
   30fde:	687b      	ldr	r3, [r7, #4]
   30fe0:	681b      	ldr	r3, [r3, #0]
   30fe2:	1c9a      	adds	r2, r3, #2
   30fe4:	687b      	ldr	r3, [r7, #4]
   30fe6:	601a      	str	r2, [r3, #0]
   30fe8:	68bb      	ldr	r3, [r7, #8]
   30fea:	0018      	movs	r0, r3
   30fec:	46bd      	mov	sp, r7
   30fee:	b004      	add	sp, #16
   30ff0:	bd80      	pop	{r7, pc}

00030ff2 <readChar>:
   30ff2:	b580      	push	{r7, lr}
   30ff4:	b084      	sub	sp, #16
   30ff6:	af00      	add	r7, sp, #0
   30ff8:	6078      	str	r0, [r7, #4]
   30ffa:	687b      	ldr	r3, [r7, #4]
   30ffc:	681a      	ldr	r2, [r3, #0]
   30ffe:	230f      	movs	r3, #15
   31000:	18fb      	adds	r3, r7, r3
   31002:	7812      	ldrb	r2, [r2, #0]
   31004:	701a      	strb	r2, [r3, #0]
   31006:	687b      	ldr	r3, [r7, #4]
   31008:	681b      	ldr	r3, [r3, #0]
   3100a:	1c5a      	adds	r2, r3, #1
   3100c:	687b      	ldr	r3, [r7, #4]
   3100e:	601a      	str	r2, [r3, #0]
   31010:	230f      	movs	r3, #15
   31012:	18fb      	adds	r3, r7, r3
   31014:	781b      	ldrb	r3, [r3, #0]
   31016:	0018      	movs	r0, r3
   31018:	46bd      	mov	sp, r7
   3101a:	b004      	add	sp, #16
   3101c:	bd80      	pop	{r7, pc}

0003101e <writeChar>:
   3101e:	b580      	push	{r7, lr}
   31020:	b082      	sub	sp, #8
   31022:	af00      	add	r7, sp, #0
   31024:	6078      	str	r0, [r7, #4]
   31026:	000a      	movs	r2, r1
   31028:	1cfb      	adds	r3, r7, #3
   3102a:	701a      	strb	r2, [r3, #0]
   3102c:	687b      	ldr	r3, [r7, #4]
   3102e:	681b      	ldr	r3, [r3, #0]
   31030:	1cfa      	adds	r2, r7, #3
   31032:	7812      	ldrb	r2, [r2, #0]
   31034:	701a      	strb	r2, [r3, #0]
   31036:	687b      	ldr	r3, [r7, #4]
   31038:	681b      	ldr	r3, [r3, #0]
   3103a:	1c5a      	adds	r2, r3, #1
   3103c:	687b      	ldr	r3, [r7, #4]
   3103e:	601a      	str	r2, [r3, #0]
   31040:	46c0      	nop			; (mov r8, r8)
   31042:	46bd      	mov	sp, r7
   31044:	b002      	add	sp, #8
   31046:	bd80      	pop	{r7, pc}

00031048 <writeInt>:
   31048:	b580      	push	{r7, lr}
   3104a:	b082      	sub	sp, #8
   3104c:	af00      	add	r7, sp, #0
   3104e:	6078      	str	r0, [r7, #4]
   31050:	6039      	str	r1, [r7, #0]
   31052:	687b      	ldr	r3, [r7, #4]
   31054:	681a      	ldr	r2, [r3, #0]
   31056:	683b      	ldr	r3, [r7, #0]
   31058:	2b00      	cmp	r3, #0
   3105a:	da00      	bge.n	3105e <writeInt+0x16>
   3105c:	33ff      	adds	r3, #255	; 0xff
   3105e:	121b      	asrs	r3, r3, #8
   31060:	b2db      	uxtb	r3, r3
   31062:	7013      	strb	r3, [r2, #0]
   31064:	687b      	ldr	r3, [r7, #4]
   31066:	681b      	ldr	r3, [r3, #0]
   31068:	1c5a      	adds	r2, r3, #1
   3106a:	687b      	ldr	r3, [r7, #4]
   3106c:	601a      	str	r2, [r3, #0]
   3106e:	687b      	ldr	r3, [r7, #4]
   31070:	681a      	ldr	r2, [r3, #0]
   31072:	683b      	ldr	r3, [r7, #0]
   31074:	4908      	ldr	r1, [pc, #32]	; (31098 <writeInt+0x50>)
   31076:	400b      	ands	r3, r1
   31078:	d503      	bpl.n	31082 <writeInt+0x3a>
   3107a:	3b01      	subs	r3, #1
   3107c:	4907      	ldr	r1, [pc, #28]	; (3109c <writeInt+0x54>)
   3107e:	430b      	orrs	r3, r1
   31080:	3301      	adds	r3, #1
   31082:	b2db      	uxtb	r3, r3
   31084:	7013      	strb	r3, [r2, #0]
   31086:	687b      	ldr	r3, [r7, #4]
   31088:	681b      	ldr	r3, [r3, #0]
   3108a:	1c5a      	adds	r2, r3, #1
   3108c:	687b      	ldr	r3, [r7, #4]
   3108e:	601a      	str	r2, [r3, #0]
   31090:	46c0      	nop			; (mov r8, r8)
   31092:	46bd      	mov	sp, r7
   31094:	b002      	add	sp, #8
   31096:	bd80      	pop	{r7, pc}
   31098:	800000ff 	.word	0x800000ff
   3109c:	ffffff00 	.word	0xffffff00

000310a0 <writeCString>:
   310a0:	b580      	push	{r7, lr}
   310a2:	b084      	sub	sp, #16
   310a4:	af00      	add	r7, sp, #0
   310a6:	6078      	str	r0, [r7, #4]
   310a8:	6039      	str	r1, [r7, #0]
   310aa:	683b      	ldr	r3, [r7, #0]
   310ac:	0018      	movs	r0, r3
   310ae:	4b0d      	ldr	r3, [pc, #52]	; (310e4 <writeCString+0x44>)
   310b0:	4798      	blx	r3
   310b2:	0003      	movs	r3, r0
   310b4:	60fb      	str	r3, [r7, #12]
   310b6:	68fa      	ldr	r2, [r7, #12]
   310b8:	687b      	ldr	r3, [r7, #4]
   310ba:	0011      	movs	r1, r2
   310bc:	0018      	movs	r0, r3
   310be:	4b0a      	ldr	r3, [pc, #40]	; (310e8 <writeCString+0x48>)
   310c0:	4798      	blx	r3
   310c2:	687b      	ldr	r3, [r7, #4]
   310c4:	681b      	ldr	r3, [r3, #0]
   310c6:	68fa      	ldr	r2, [r7, #12]
   310c8:	6839      	ldr	r1, [r7, #0]
   310ca:	0018      	movs	r0, r3
   310cc:	4b07      	ldr	r3, [pc, #28]	; (310ec <writeCString+0x4c>)
   310ce:	4798      	blx	r3
   310d0:	687b      	ldr	r3, [r7, #4]
   310d2:	681a      	ldr	r2, [r3, #0]
   310d4:	68fb      	ldr	r3, [r7, #12]
   310d6:	18d2      	adds	r2, r2, r3
   310d8:	687b      	ldr	r3, [r7, #4]
   310da:	601a      	str	r2, [r3, #0]
   310dc:	46c0      	nop			; (mov r8, r8)
   310de:	46bd      	mov	sp, r7
   310e0:	b004      	add	sp, #16
   310e2:	bd80      	pop	{r7, pc}
   310e4:	00035abf 	.word	0x00035abf
   310e8:	00031049 	.word	0x00031049
   310ec:	000356d1 	.word	0x000356d1

000310f0 <writeMQTTString>:
   310f0:	b580      	push	{r7, lr}
   310f2:	b084      	sub	sp, #16
   310f4:	af00      	add	r7, sp, #0
   310f6:	60f8      	str	r0, [r7, #12]
   310f8:	0038      	movs	r0, r7
   310fa:	6001      	str	r1, [r0, #0]
   310fc:	6042      	str	r2, [r0, #4]
   310fe:	6083      	str	r3, [r0, #8]
   31100:	003b      	movs	r3, r7
   31102:	685b      	ldr	r3, [r3, #4]
   31104:	2b00      	cmp	r3, #0
   31106:	dd17      	ble.n	31138 <writeMQTTString+0x48>
   31108:	003b      	movs	r3, r7
   3110a:	685a      	ldr	r2, [r3, #4]
   3110c:	68fb      	ldr	r3, [r7, #12]
   3110e:	0011      	movs	r1, r2
   31110:	0018      	movs	r0, r3
   31112:	4b14      	ldr	r3, [pc, #80]	; (31164 <writeMQTTString+0x74>)
   31114:	4798      	blx	r3
   31116:	68fb      	ldr	r3, [r7, #12]
   31118:	6818      	ldr	r0, [r3, #0]
   3111a:	003b      	movs	r3, r7
   3111c:	6899      	ldr	r1, [r3, #8]
   3111e:	003b      	movs	r3, r7
   31120:	685b      	ldr	r3, [r3, #4]
   31122:	001a      	movs	r2, r3
   31124:	4b10      	ldr	r3, [pc, #64]	; (31168 <writeMQTTString+0x78>)
   31126:	4798      	blx	r3
   31128:	68fb      	ldr	r3, [r7, #12]
   3112a:	681a      	ldr	r2, [r3, #0]
   3112c:	003b      	movs	r3, r7
   3112e:	685b      	ldr	r3, [r3, #4]
   31130:	18d2      	adds	r2, r2, r3
   31132:	68fb      	ldr	r3, [r7, #12]
   31134:	601a      	str	r2, [r3, #0]
   31136:	e010      	b.n	3115a <writeMQTTString+0x6a>
   31138:	003b      	movs	r3, r7
   3113a:	681b      	ldr	r3, [r3, #0]
   3113c:	2b00      	cmp	r3, #0
   3113e:	d007      	beq.n	31150 <writeMQTTString+0x60>
   31140:	003b      	movs	r3, r7
   31142:	681a      	ldr	r2, [r3, #0]
   31144:	68fb      	ldr	r3, [r7, #12]
   31146:	0011      	movs	r1, r2
   31148:	0018      	movs	r0, r3
   3114a:	4b08      	ldr	r3, [pc, #32]	; (3116c <writeMQTTString+0x7c>)
   3114c:	4798      	blx	r3
   3114e:	e004      	b.n	3115a <writeMQTTString+0x6a>
   31150:	68fb      	ldr	r3, [r7, #12]
   31152:	2100      	movs	r1, #0
   31154:	0018      	movs	r0, r3
   31156:	4b03      	ldr	r3, [pc, #12]	; (31164 <writeMQTTString+0x74>)
   31158:	4798      	blx	r3
   3115a:	46c0      	nop			; (mov r8, r8)
   3115c:	46bd      	mov	sp, r7
   3115e:	b004      	add	sp, #16
   31160:	bd80      	pop	{r7, pc}
   31162:	46c0      	nop			; (mov r8, r8)
   31164:	00031049 	.word	0x00031049
   31168:	000356d1 	.word	0x000356d1
   3116c:	000310a1 	.word	0x000310a1

00031170 <readMQTTLenString>:
   31170:	b580      	push	{r7, lr}
   31172:	b086      	sub	sp, #24
   31174:	af00      	add	r7, sp, #0
   31176:	60f8      	str	r0, [r7, #12]
   31178:	60b9      	str	r1, [r7, #8]
   3117a:	607a      	str	r2, [r7, #4]
   3117c:	2300      	movs	r3, #0
   3117e:	617b      	str	r3, [r7, #20]
   31180:	687a      	ldr	r2, [r7, #4]
   31182:	68bb      	ldr	r3, [r7, #8]
   31184:	681b      	ldr	r3, [r3, #0]
   31186:	1ad3      	subs	r3, r2, r3
   31188:	2b01      	cmp	r3, #1
   3118a:	dd1b      	ble.n	311c4 <readMQTTLenString+0x54>
   3118c:	68bb      	ldr	r3, [r7, #8]
   3118e:	0018      	movs	r0, r3
   31190:	4b10      	ldr	r3, [pc, #64]	; (311d4 <readMQTTLenString+0x64>)
   31192:	4798      	blx	r3
   31194:	0002      	movs	r2, r0
   31196:	68fb      	ldr	r3, [r7, #12]
   31198:	605a      	str	r2, [r3, #4]
   3119a:	68bb      	ldr	r3, [r7, #8]
   3119c:	681a      	ldr	r2, [r3, #0]
   3119e:	68fb      	ldr	r3, [r7, #12]
   311a0:	685b      	ldr	r3, [r3, #4]
   311a2:	18d2      	adds	r2, r2, r3
   311a4:	687b      	ldr	r3, [r7, #4]
   311a6:	429a      	cmp	r2, r3
   311a8:	d80c      	bhi.n	311c4 <readMQTTLenString+0x54>
   311aa:	68bb      	ldr	r3, [r7, #8]
   311ac:	681a      	ldr	r2, [r3, #0]
   311ae:	68fb      	ldr	r3, [r7, #12]
   311b0:	609a      	str	r2, [r3, #8]
   311b2:	68bb      	ldr	r3, [r7, #8]
   311b4:	681a      	ldr	r2, [r3, #0]
   311b6:	68fb      	ldr	r3, [r7, #12]
   311b8:	685b      	ldr	r3, [r3, #4]
   311ba:	18d2      	adds	r2, r2, r3
   311bc:	68bb      	ldr	r3, [r7, #8]
   311be:	601a      	str	r2, [r3, #0]
   311c0:	2301      	movs	r3, #1
   311c2:	617b      	str	r3, [r7, #20]
   311c4:	68fb      	ldr	r3, [r7, #12]
   311c6:	2200      	movs	r2, #0
   311c8:	601a      	str	r2, [r3, #0]
   311ca:	697b      	ldr	r3, [r7, #20]
   311cc:	0018      	movs	r0, r3
   311ce:	46bd      	mov	sp, r7
   311d0:	b006      	add	sp, #24
   311d2:	bd80      	pop	{r7, pc}
   311d4:	00030fc1 	.word	0x00030fc1

000311d8 <MQTTstrlen>:
   311d8:	b580      	push	{r7, lr}
   311da:	b086      	sub	sp, #24
   311dc:	af00      	add	r7, sp, #0
   311de:	1d3b      	adds	r3, r7, #4
   311e0:	6018      	str	r0, [r3, #0]
   311e2:	6059      	str	r1, [r3, #4]
   311e4:	609a      	str	r2, [r3, #8]
   311e6:	2300      	movs	r3, #0
   311e8:	617b      	str	r3, [r7, #20]
   311ea:	1d3b      	adds	r3, r7, #4
   311ec:	681b      	ldr	r3, [r3, #0]
   311ee:	2b00      	cmp	r3, #0
   311f0:	d007      	beq.n	31202 <MQTTstrlen+0x2a>
   311f2:	1d3b      	adds	r3, r7, #4
   311f4:	681b      	ldr	r3, [r3, #0]
   311f6:	0018      	movs	r0, r3
   311f8:	4b06      	ldr	r3, [pc, #24]	; (31214 <MQTTstrlen+0x3c>)
   311fa:	4798      	blx	r3
   311fc:	0003      	movs	r3, r0
   311fe:	617b      	str	r3, [r7, #20]
   31200:	e002      	b.n	31208 <MQTTstrlen+0x30>
   31202:	1d3b      	adds	r3, r7, #4
   31204:	685b      	ldr	r3, [r3, #4]
   31206:	617b      	str	r3, [r7, #20]
   31208:	697b      	ldr	r3, [r7, #20]
   3120a:	0018      	movs	r0, r3
   3120c:	46bd      	mov	sp, r7
   3120e:	b006      	add	sp, #24
   31210:	bd80      	pop	{r7, pc}
   31212:	46c0      	nop			; (mov r8, r8)
   31214:	00035abf 	.word	0x00035abf

00031218 <MQTTPacket_equals>:
   31218:	b580      	push	{r7, lr}
   3121a:	b086      	sub	sp, #24
   3121c:	af00      	add	r7, sp, #0
   3121e:	6078      	str	r0, [r7, #4]
   31220:	6039      	str	r1, [r7, #0]
   31222:	2300      	movs	r3, #0
   31224:	617b      	str	r3, [r7, #20]
   31226:	2300      	movs	r3, #0
   31228:	60fb      	str	r3, [r7, #12]
   3122a:	687b      	ldr	r3, [r7, #4]
   3122c:	681b      	ldr	r3, [r3, #0]
   3122e:	2b00      	cmp	r3, #0
   31230:	d00a      	beq.n	31248 <MQTTPacket_equals+0x30>
   31232:	687b      	ldr	r3, [r7, #4]
   31234:	681b      	ldr	r3, [r3, #0]
   31236:	613b      	str	r3, [r7, #16]
   31238:	687b      	ldr	r3, [r7, #4]
   3123a:	681b      	ldr	r3, [r3, #0]
   3123c:	0018      	movs	r0, r3
   3123e:	4b12      	ldr	r3, [pc, #72]	; (31288 <MQTTPacket_equals+0x70>)
   31240:	4798      	blx	r3
   31242:	0003      	movs	r3, r0
   31244:	617b      	str	r3, [r7, #20]
   31246:	e005      	b.n	31254 <MQTTPacket_equals+0x3c>
   31248:	687b      	ldr	r3, [r7, #4]
   3124a:	689b      	ldr	r3, [r3, #8]
   3124c:	613b      	str	r3, [r7, #16]
   3124e:	687b      	ldr	r3, [r7, #4]
   31250:	685b      	ldr	r3, [r3, #4]
   31252:	617b      	str	r3, [r7, #20]
   31254:	683b      	ldr	r3, [r7, #0]
   31256:	0018      	movs	r0, r3
   31258:	4b0b      	ldr	r3, [pc, #44]	; (31288 <MQTTPacket_equals+0x70>)
   3125a:	4798      	blx	r3
   3125c:	0003      	movs	r3, r0
   3125e:	60fb      	str	r3, [r7, #12]
   31260:	697a      	ldr	r2, [r7, #20]
   31262:	68fb      	ldr	r3, [r7, #12]
   31264:	429a      	cmp	r2, r3
   31266:	d109      	bne.n	3127c <MQTTPacket_equals+0x64>
   31268:	697a      	ldr	r2, [r7, #20]
   3126a:	6839      	ldr	r1, [r7, #0]
   3126c:	693b      	ldr	r3, [r7, #16]
   3126e:	0018      	movs	r0, r3
   31270:	4b06      	ldr	r3, [pc, #24]	; (3128c <MQTTPacket_equals+0x74>)
   31272:	4798      	blx	r3
   31274:	1e03      	subs	r3, r0, #0
   31276:	d101      	bne.n	3127c <MQTTPacket_equals+0x64>
   31278:	2301      	movs	r3, #1
   3127a:	e000      	b.n	3127e <MQTTPacket_equals+0x66>
   3127c:	2300      	movs	r3, #0
   3127e:	0018      	movs	r0, r3
   31280:	46bd      	mov	sp, r7
   31282:	b006      	add	sp, #24
   31284:	bd80      	pop	{r7, pc}
   31286:	46c0      	nop			; (mov r8, r8)
   31288:	00035abf 	.word	0x00035abf
   3128c:	00035acd 	.word	0x00035acd

00031290 <MQTTSerialize_publishLength>:
   31290:	b580      	push	{r7, lr}
   31292:	b086      	sub	sp, #24
   31294:	af00      	add	r7, sp, #0
   31296:	60f8      	str	r0, [r7, #12]
   31298:	0038      	movs	r0, r7
   3129a:	6001      	str	r1, [r0, #0]
   3129c:	6042      	str	r2, [r0, #4]
   3129e:	6083      	str	r3, [r0, #8]
   312a0:	2300      	movs	r3, #0
   312a2:	617b      	str	r3, [r7, #20]
   312a4:	003b      	movs	r3, r7
   312a6:	6818      	ldr	r0, [r3, #0]
   312a8:	6859      	ldr	r1, [r3, #4]
   312aa:	689a      	ldr	r2, [r3, #8]
   312ac:	4b09      	ldr	r3, [pc, #36]	; (312d4 <MQTTSerialize_publishLength+0x44>)
   312ae:	4798      	blx	r3
   312b0:	0003      	movs	r3, r0
   312b2:	1c9a      	adds	r2, r3, #2
   312b4:	6a3b      	ldr	r3, [r7, #32]
   312b6:	18d3      	adds	r3, r2, r3
   312b8:	697a      	ldr	r2, [r7, #20]
   312ba:	18d3      	adds	r3, r2, r3
   312bc:	617b      	str	r3, [r7, #20]
   312be:	68fb      	ldr	r3, [r7, #12]
   312c0:	2b00      	cmp	r3, #0
   312c2:	dd02      	ble.n	312ca <MQTTSerialize_publishLength+0x3a>
   312c4:	697b      	ldr	r3, [r7, #20]
   312c6:	3302      	adds	r3, #2
   312c8:	617b      	str	r3, [r7, #20]
   312ca:	697b      	ldr	r3, [r7, #20]
   312cc:	0018      	movs	r0, r3
   312ce:	46bd      	mov	sp, r7
   312d0:	b006      	add	sp, #24
   312d2:	bd80      	pop	{r7, pc}
   312d4:	000311d9 	.word	0x000311d9

000312d8 <MQTTSerialize_publish>:
   312d8:	b590      	push	{r4, r7, lr}
   312da:	b08b      	sub	sp, #44	; 0x2c
   312dc:	af02      	add	r7, sp, #8
   312de:	60f8      	str	r0, [r7, #12]
   312e0:	60b9      	str	r1, [r7, #8]
   312e2:	603b      	str	r3, [r7, #0]
   312e4:	1dfb      	adds	r3, r7, #7
   312e6:	701a      	strb	r2, [r3, #0]
   312e8:	68fb      	ldr	r3, [r7, #12]
   312ea:	617b      	str	r3, [r7, #20]
   312ec:	2300      	movs	r3, #0
   312ee:	613b      	str	r3, [r7, #16]
   312f0:	2300      	movs	r3, #0
   312f2:	61bb      	str	r3, [r7, #24]
   312f4:	2300      	movs	r3, #0
   312f6:	61fb      	str	r3, [r7, #28]
   312f8:	2308      	movs	r3, #8
   312fa:	2230      	movs	r2, #48	; 0x30
   312fc:	4694      	mov	ip, r2
   312fe:	44bc      	add	ip, r7
   31300:	4463      	add	r3, ip
   31302:	6838      	ldr	r0, [r7, #0]
   31304:	6cba      	ldr	r2, [r7, #72]	; 0x48
   31306:	9200      	str	r2, [sp, #0]
   31308:	6819      	ldr	r1, [r3, #0]
   3130a:	685a      	ldr	r2, [r3, #4]
   3130c:	689b      	ldr	r3, [r3, #8]
   3130e:	4c46      	ldr	r4, [pc, #280]	; (31428 <MQTTSerialize_publish+0x150>)
   31310:	47a0      	blx	r4
   31312:	0003      	movs	r3, r0
   31314:	61bb      	str	r3, [r7, #24]
   31316:	69bb      	ldr	r3, [r7, #24]
   31318:	0018      	movs	r0, r3
   3131a:	4b44      	ldr	r3, [pc, #272]	; (3142c <MQTTSerialize_publish+0x154>)
   3131c:	4798      	blx	r3
   3131e:	0002      	movs	r2, r0
   31320:	68bb      	ldr	r3, [r7, #8]
   31322:	429a      	cmp	r2, r3
   31324:	dd03      	ble.n	3132e <MQTTSerialize_publish+0x56>
   31326:	2302      	movs	r3, #2
   31328:	425b      	negs	r3, r3
   3132a:	61fb      	str	r3, [r7, #28]
   3132c:	e077      	b.n	3141e <MQTTSerialize_publish+0x146>
   3132e:	2310      	movs	r3, #16
   31330:	18fb      	adds	r3, r7, r3
   31332:	781a      	ldrb	r2, [r3, #0]
   31334:	210f      	movs	r1, #15
   31336:	400a      	ands	r2, r1
   31338:	1c11      	adds	r1, r2, #0
   3133a:	2230      	movs	r2, #48	; 0x30
   3133c:	430a      	orrs	r2, r1
   3133e:	701a      	strb	r2, [r3, #0]
   31340:	1dfb      	adds	r3, r7, #7
   31342:	781b      	ldrb	r3, [r3, #0]
   31344:	2201      	movs	r2, #1
   31346:	4013      	ands	r3, r2
   31348:	b2da      	uxtb	r2, r3
   3134a:	2310      	movs	r3, #16
   3134c:	18fb      	adds	r3, r7, r3
   3134e:	2101      	movs	r1, #1
   31350:	400a      	ands	r2, r1
   31352:	00d0      	lsls	r0, r2, #3
   31354:	781a      	ldrb	r2, [r3, #0]
   31356:	2108      	movs	r1, #8
   31358:	438a      	bics	r2, r1
   3135a:	1c11      	adds	r1, r2, #0
   3135c:	1c02      	adds	r2, r0, #0
   3135e:	430a      	orrs	r2, r1
   31360:	701a      	strb	r2, [r3, #0]
   31362:	683b      	ldr	r3, [r7, #0]
   31364:	b2db      	uxtb	r3, r3
   31366:	1c1a      	adds	r2, r3, #0
   31368:	2303      	movs	r3, #3
   3136a:	4013      	ands	r3, r2
   3136c:	b2da      	uxtb	r2, r3
   3136e:	2310      	movs	r3, #16
   31370:	18fb      	adds	r3, r7, r3
   31372:	2103      	movs	r1, #3
   31374:	400a      	ands	r2, r1
   31376:	1890      	adds	r0, r2, r2
   31378:	781a      	ldrb	r2, [r3, #0]
   3137a:	2106      	movs	r1, #6
   3137c:	438a      	bics	r2, r1
   3137e:	1c11      	adds	r1, r2, #0
   31380:	1c02      	adds	r2, r0, #0
   31382:	430a      	orrs	r2, r1
   31384:	701a      	strb	r2, [r3, #0]
   31386:	2330      	movs	r3, #48	; 0x30
   31388:	18fb      	adds	r3, r7, r3
   3138a:	781b      	ldrb	r3, [r3, #0]
   3138c:	2201      	movs	r2, #1
   3138e:	4013      	ands	r3, r2
   31390:	b2da      	uxtb	r2, r3
   31392:	2310      	movs	r3, #16
   31394:	18fb      	adds	r3, r7, r3
   31396:	2101      	movs	r1, #1
   31398:	400a      	ands	r2, r1
   3139a:	0010      	movs	r0, r2
   3139c:	781a      	ldrb	r2, [r3, #0]
   3139e:	2101      	movs	r1, #1
   313a0:	438a      	bics	r2, r1
   313a2:	1c11      	adds	r1, r2, #0
   313a4:	1c02      	adds	r2, r0, #0
   313a6:	430a      	orrs	r2, r1
   313a8:	701a      	strb	r2, [r3, #0]
   313aa:	2310      	movs	r3, #16
   313ac:	18fb      	adds	r3, r7, r3
   313ae:	781a      	ldrb	r2, [r3, #0]
   313b0:	2314      	movs	r3, #20
   313b2:	18fb      	adds	r3, r7, r3
   313b4:	0011      	movs	r1, r2
   313b6:	0018      	movs	r0, r3
   313b8:	4b1d      	ldr	r3, [pc, #116]	; (31430 <MQTTSerialize_publish+0x158>)
   313ba:	4798      	blx	r3
   313bc:	697b      	ldr	r3, [r7, #20]
   313be:	69ba      	ldr	r2, [r7, #24]
   313c0:	0011      	movs	r1, r2
   313c2:	0018      	movs	r0, r3
   313c4:	4b1b      	ldr	r3, [pc, #108]	; (31434 <MQTTSerialize_publish+0x15c>)
   313c6:	4798      	blx	r3
   313c8:	0002      	movs	r2, r0
   313ca:	697b      	ldr	r3, [r7, #20]
   313cc:	189b      	adds	r3, r3, r2
   313ce:	617b      	str	r3, [r7, #20]
   313d0:	2308      	movs	r3, #8
   313d2:	2230      	movs	r2, #48	; 0x30
   313d4:	4694      	mov	ip, r2
   313d6:	44bc      	add	ip, r7
   313d8:	4463      	add	r3, ip
   313da:	2214      	movs	r2, #20
   313dc:	18b8      	adds	r0, r7, r2
   313de:	6819      	ldr	r1, [r3, #0]
   313e0:	685a      	ldr	r2, [r3, #4]
   313e2:	689b      	ldr	r3, [r3, #8]
   313e4:	4c14      	ldr	r4, [pc, #80]	; (31438 <MQTTSerialize_publish+0x160>)
   313e6:	47a0      	blx	r4
   313e8:	683b      	ldr	r3, [r7, #0]
   313ea:	2b00      	cmp	r3, #0
   313ec:	dd08      	ble.n	31400 <MQTTSerialize_publish+0x128>
   313ee:	2334      	movs	r3, #52	; 0x34
   313f0:	18fb      	adds	r3, r7, r3
   313f2:	881a      	ldrh	r2, [r3, #0]
   313f4:	2314      	movs	r3, #20
   313f6:	18fb      	adds	r3, r7, r3
   313f8:	0011      	movs	r1, r2
   313fa:	0018      	movs	r0, r3
   313fc:	4b0f      	ldr	r3, [pc, #60]	; (3143c <MQTTSerialize_publish+0x164>)
   313fe:	4798      	blx	r3
   31400:	697b      	ldr	r3, [r7, #20]
   31402:	6cba      	ldr	r2, [r7, #72]	; 0x48
   31404:	6c79      	ldr	r1, [r7, #68]	; 0x44
   31406:	0018      	movs	r0, r3
   31408:	4b0d      	ldr	r3, [pc, #52]	; (31440 <MQTTSerialize_publish+0x168>)
   3140a:	4798      	blx	r3
   3140c:	697a      	ldr	r2, [r7, #20]
   3140e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   31410:	18d3      	adds	r3, r2, r3
   31412:	617b      	str	r3, [r7, #20]
   31414:	697b      	ldr	r3, [r7, #20]
   31416:	001a      	movs	r2, r3
   31418:	68fb      	ldr	r3, [r7, #12]
   3141a:	1ad3      	subs	r3, r2, r3
   3141c:	61fb      	str	r3, [r7, #28]
   3141e:	69fb      	ldr	r3, [r7, #28]
   31420:	0018      	movs	r0, r3
   31422:	46bd      	mov	sp, r7
   31424:	b009      	add	sp, #36	; 0x24
   31426:	bd90      	pop	{r4, r7, pc}
   31428:	00031291 	.word	0x00031291
   3142c:	00030efd 	.word	0x00030efd
   31430:	0003101f 	.word	0x0003101f
   31434:	00030e05 	.word	0x00030e05
   31438:	000310f1 	.word	0x000310f1
   3143c:	00031049 	.word	0x00031049
   31440:	000356d1 	.word	0x000356d1

00031444 <MQTTSerialize_ack>:
   31444:	b580      	push	{r7, lr}
   31446:	b088      	sub	sp, #32
   31448:	af00      	add	r7, sp, #0
   3144a:	60f8      	str	r0, [r7, #12]
   3144c:	60b9      	str	r1, [r7, #8]
   3144e:	0019      	movs	r1, r3
   31450:	1dfb      	adds	r3, r7, #7
   31452:	701a      	strb	r2, [r3, #0]
   31454:	1dbb      	adds	r3, r7, #6
   31456:	1c0a      	adds	r2, r1, #0
   31458:	701a      	strb	r2, [r3, #0]
   3145a:	2300      	movs	r3, #0
   3145c:	61bb      	str	r3, [r7, #24]
   3145e:	2300      	movs	r3, #0
   31460:	61fb      	str	r3, [r7, #28]
   31462:	68fb      	ldr	r3, [r7, #12]
   31464:	617b      	str	r3, [r7, #20]
   31466:	68bb      	ldr	r3, [r7, #8]
   31468:	2b03      	cmp	r3, #3
   3146a:	dc03      	bgt.n	31474 <MQTTSerialize_ack+0x30>
   3146c:	2302      	movs	r3, #2
   3146e:	425b      	negs	r3, r3
   31470:	61fb      	str	r3, [r7, #28]
   31472:	e055      	b.n	31520 <MQTTSerialize_ack+0xdc>
   31474:	1dfb      	adds	r3, r7, #7
   31476:	781b      	ldrb	r3, [r3, #0]
   31478:	220f      	movs	r2, #15
   3147a:	4013      	ands	r3, r2
   3147c:	b2da      	uxtb	r2, r3
   3147e:	2318      	movs	r3, #24
   31480:	18fb      	adds	r3, r7, r3
   31482:	0110      	lsls	r0, r2, #4
   31484:	781a      	ldrb	r2, [r3, #0]
   31486:	210f      	movs	r1, #15
   31488:	400a      	ands	r2, r1
   3148a:	1c11      	adds	r1, r2, #0
   3148c:	1c02      	adds	r2, r0, #0
   3148e:	430a      	orrs	r2, r1
   31490:	701a      	strb	r2, [r3, #0]
   31492:	1dbb      	adds	r3, r7, #6
   31494:	781b      	ldrb	r3, [r3, #0]
   31496:	2201      	movs	r2, #1
   31498:	4013      	ands	r3, r2
   3149a:	b2da      	uxtb	r2, r3
   3149c:	2318      	movs	r3, #24
   3149e:	18fb      	adds	r3, r7, r3
   314a0:	2101      	movs	r1, #1
   314a2:	400a      	ands	r2, r1
   314a4:	00d0      	lsls	r0, r2, #3
   314a6:	781a      	ldrb	r2, [r3, #0]
   314a8:	2108      	movs	r1, #8
   314aa:	438a      	bics	r2, r1
   314ac:	1c11      	adds	r1, r2, #0
   314ae:	1c02      	adds	r2, r0, #0
   314b0:	430a      	orrs	r2, r1
   314b2:	701a      	strb	r2, [r3, #0]
   314b4:	1dfb      	adds	r3, r7, #7
   314b6:	781b      	ldrb	r3, [r3, #0]
   314b8:	3b06      	subs	r3, #6
   314ba:	425a      	negs	r2, r3
   314bc:	4153      	adcs	r3, r2
   314be:	b2db      	uxtb	r3, r3
   314c0:	1c1a      	adds	r2, r3, #0
   314c2:	2303      	movs	r3, #3
   314c4:	4013      	ands	r3, r2
   314c6:	b2da      	uxtb	r2, r3
   314c8:	2318      	movs	r3, #24
   314ca:	18fb      	adds	r3, r7, r3
   314cc:	2103      	movs	r1, #3
   314ce:	400a      	ands	r2, r1
   314d0:	1890      	adds	r0, r2, r2
   314d2:	781a      	ldrb	r2, [r3, #0]
   314d4:	2106      	movs	r1, #6
   314d6:	438a      	bics	r2, r1
   314d8:	1c11      	adds	r1, r2, #0
   314da:	1c02      	adds	r2, r0, #0
   314dc:	430a      	orrs	r2, r1
   314de:	701a      	strb	r2, [r3, #0]
   314e0:	2318      	movs	r3, #24
   314e2:	18fb      	adds	r3, r7, r3
   314e4:	781a      	ldrb	r2, [r3, #0]
   314e6:	2314      	movs	r3, #20
   314e8:	18fb      	adds	r3, r7, r3
   314ea:	0011      	movs	r1, r2
   314ec:	0018      	movs	r0, r3
   314ee:	4b0f      	ldr	r3, [pc, #60]	; (3152c <MQTTSerialize_ack+0xe8>)
   314f0:	4798      	blx	r3
   314f2:	697b      	ldr	r3, [r7, #20]
   314f4:	2102      	movs	r1, #2
   314f6:	0018      	movs	r0, r3
   314f8:	4b0d      	ldr	r3, [pc, #52]	; (31530 <MQTTSerialize_ack+0xec>)
   314fa:	4798      	blx	r3
   314fc:	0002      	movs	r2, r0
   314fe:	697b      	ldr	r3, [r7, #20]
   31500:	189b      	adds	r3, r3, r2
   31502:	617b      	str	r3, [r7, #20]
   31504:	2328      	movs	r3, #40	; 0x28
   31506:	18fb      	adds	r3, r7, r3
   31508:	881a      	ldrh	r2, [r3, #0]
   3150a:	2314      	movs	r3, #20
   3150c:	18fb      	adds	r3, r7, r3
   3150e:	0011      	movs	r1, r2
   31510:	0018      	movs	r0, r3
   31512:	4b08      	ldr	r3, [pc, #32]	; (31534 <MQTTSerialize_ack+0xf0>)
   31514:	4798      	blx	r3
   31516:	697b      	ldr	r3, [r7, #20]
   31518:	001a      	movs	r2, r3
   3151a:	68fb      	ldr	r3, [r7, #12]
   3151c:	1ad3      	subs	r3, r2, r3
   3151e:	61fb      	str	r3, [r7, #28]
   31520:	69fb      	ldr	r3, [r7, #28]
   31522:	0018      	movs	r0, r3
   31524:	46bd      	mov	sp, r7
   31526:	b008      	add	sp, #32
   31528:	bd80      	pop	{r7, pc}
   3152a:	46c0      	nop			; (mov r8, r8)
   3152c:	0003101f 	.word	0x0003101f
   31530:	00030e05 	.word	0x00030e05
   31534:	00031049 	.word	0x00031049

00031538 <MQTTSerialize_subscribeLength>:
   31538:	b580      	push	{r7, lr}
   3153a:	b084      	sub	sp, #16
   3153c:	af00      	add	r7, sp, #0
   3153e:	6078      	str	r0, [r7, #4]
   31540:	6039      	str	r1, [r7, #0]
   31542:	2302      	movs	r3, #2
   31544:	60bb      	str	r3, [r7, #8]
   31546:	2300      	movs	r3, #0
   31548:	60fb      	str	r3, [r7, #12]
   3154a:	e014      	b.n	31576 <MQTTSerialize_subscribeLength+0x3e>
   3154c:	68fa      	ldr	r2, [r7, #12]
   3154e:	0013      	movs	r3, r2
   31550:	005b      	lsls	r3, r3, #1
   31552:	189b      	adds	r3, r3, r2
   31554:	009b      	lsls	r3, r3, #2
   31556:	001a      	movs	r2, r3
   31558:	683b      	ldr	r3, [r7, #0]
   3155a:	189b      	adds	r3, r3, r2
   3155c:	6818      	ldr	r0, [r3, #0]
   3155e:	6859      	ldr	r1, [r3, #4]
   31560:	689a      	ldr	r2, [r3, #8]
   31562:	4b09      	ldr	r3, [pc, #36]	; (31588 <MQTTSerialize_subscribeLength+0x50>)
   31564:	4798      	blx	r3
   31566:	0003      	movs	r3, r0
   31568:	3303      	adds	r3, #3
   3156a:	68ba      	ldr	r2, [r7, #8]
   3156c:	18d3      	adds	r3, r2, r3
   3156e:	60bb      	str	r3, [r7, #8]
   31570:	68fb      	ldr	r3, [r7, #12]
   31572:	3301      	adds	r3, #1
   31574:	60fb      	str	r3, [r7, #12]
   31576:	68fa      	ldr	r2, [r7, #12]
   31578:	687b      	ldr	r3, [r7, #4]
   3157a:	429a      	cmp	r2, r3
   3157c:	dbe6      	blt.n	3154c <MQTTSerialize_subscribeLength+0x14>
   3157e:	68bb      	ldr	r3, [r7, #8]
   31580:	0018      	movs	r0, r3
   31582:	46bd      	mov	sp, r7
   31584:	b004      	add	sp, #16
   31586:	bd80      	pop	{r7, pc}
   31588:	000311d9 	.word	0x000311d9

0003158c <MQTTSerialize_subscribe>:
   3158c:	b590      	push	{r4, r7, lr}
   3158e:	b08b      	sub	sp, #44	; 0x2c
   31590:	af00      	add	r7, sp, #0
   31592:	60f8      	str	r0, [r7, #12]
   31594:	60b9      	str	r1, [r7, #8]
   31596:	0019      	movs	r1, r3
   31598:	1dfb      	adds	r3, r7, #7
   3159a:	701a      	strb	r2, [r3, #0]
   3159c:	1d3b      	adds	r3, r7, #4
   3159e:	1c0a      	adds	r2, r1, #0
   315a0:	801a      	strh	r2, [r3, #0]
   315a2:	68fb      	ldr	r3, [r7, #12]
   315a4:	61bb      	str	r3, [r7, #24]
   315a6:	2300      	movs	r3, #0
   315a8:	617b      	str	r3, [r7, #20]
   315aa:	2300      	movs	r3, #0
   315ac:	61fb      	str	r3, [r7, #28]
   315ae:	2300      	movs	r3, #0
   315b0:	627b      	str	r3, [r7, #36]	; 0x24
   315b2:	2300      	movs	r3, #0
   315b4:	623b      	str	r3, [r7, #32]
   315b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   315b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   315ba:	0011      	movs	r1, r2
   315bc:	0018      	movs	r0, r3
   315be:	4b41      	ldr	r3, [pc, #260]	; (316c4 <MQTTSerialize_subscribe+0x138>)
   315c0:	4798      	blx	r3
   315c2:	0003      	movs	r3, r0
   315c4:	61fb      	str	r3, [r7, #28]
   315c6:	69fb      	ldr	r3, [r7, #28]
   315c8:	0018      	movs	r0, r3
   315ca:	4b3f      	ldr	r3, [pc, #252]	; (316c8 <MQTTSerialize_subscribe+0x13c>)
   315cc:	4798      	blx	r3
   315ce:	0002      	movs	r2, r0
   315d0:	68bb      	ldr	r3, [r7, #8]
   315d2:	429a      	cmp	r2, r3
   315d4:	dd03      	ble.n	315de <MQTTSerialize_subscribe+0x52>
   315d6:	2302      	movs	r3, #2
   315d8:	425b      	negs	r3, r3
   315da:	627b      	str	r3, [r7, #36]	; 0x24
   315dc:	e06c      	b.n	316b8 <MQTTSerialize_subscribe+0x12c>
   315de:	2314      	movs	r3, #20
   315e0:	18fb      	adds	r3, r7, r3
   315e2:	2200      	movs	r2, #0
   315e4:	701a      	strb	r2, [r3, #0]
   315e6:	2314      	movs	r3, #20
   315e8:	18fb      	adds	r3, r7, r3
   315ea:	781a      	ldrb	r2, [r3, #0]
   315ec:	210f      	movs	r1, #15
   315ee:	400a      	ands	r2, r1
   315f0:	1c11      	adds	r1, r2, #0
   315f2:	2280      	movs	r2, #128	; 0x80
   315f4:	4252      	negs	r2, r2
   315f6:	430a      	orrs	r2, r1
   315f8:	701a      	strb	r2, [r3, #0]
   315fa:	1dfb      	adds	r3, r7, #7
   315fc:	781b      	ldrb	r3, [r3, #0]
   315fe:	2201      	movs	r2, #1
   31600:	4013      	ands	r3, r2
   31602:	b2da      	uxtb	r2, r3
   31604:	2314      	movs	r3, #20
   31606:	18fb      	adds	r3, r7, r3
   31608:	2101      	movs	r1, #1
   3160a:	400a      	ands	r2, r1
   3160c:	00d0      	lsls	r0, r2, #3
   3160e:	781a      	ldrb	r2, [r3, #0]
   31610:	2108      	movs	r1, #8
   31612:	438a      	bics	r2, r1
   31614:	1c11      	adds	r1, r2, #0
   31616:	1c02      	adds	r2, r0, #0
   31618:	430a      	orrs	r2, r1
   3161a:	701a      	strb	r2, [r3, #0]
   3161c:	2314      	movs	r3, #20
   3161e:	18fb      	adds	r3, r7, r3
   31620:	781a      	ldrb	r2, [r3, #0]
   31622:	2106      	movs	r1, #6
   31624:	438a      	bics	r2, r1
   31626:	1c11      	adds	r1, r2, #0
   31628:	2202      	movs	r2, #2
   3162a:	430a      	orrs	r2, r1
   3162c:	701a      	strb	r2, [r3, #0]
   3162e:	2314      	movs	r3, #20
   31630:	18fb      	adds	r3, r7, r3
   31632:	781a      	ldrb	r2, [r3, #0]
   31634:	2318      	movs	r3, #24
   31636:	18fb      	adds	r3, r7, r3
   31638:	0011      	movs	r1, r2
   3163a:	0018      	movs	r0, r3
   3163c:	4b23      	ldr	r3, [pc, #140]	; (316cc <MQTTSerialize_subscribe+0x140>)
   3163e:	4798      	blx	r3
   31640:	69bb      	ldr	r3, [r7, #24]
   31642:	69fa      	ldr	r2, [r7, #28]
   31644:	0011      	movs	r1, r2
   31646:	0018      	movs	r0, r3
   31648:	4b21      	ldr	r3, [pc, #132]	; (316d0 <MQTTSerialize_subscribe+0x144>)
   3164a:	4798      	blx	r3
   3164c:	0002      	movs	r2, r0
   3164e:	69bb      	ldr	r3, [r7, #24]
   31650:	189b      	adds	r3, r3, r2
   31652:	61bb      	str	r3, [r7, #24]
   31654:	1d3b      	adds	r3, r7, #4
   31656:	881a      	ldrh	r2, [r3, #0]
   31658:	2318      	movs	r3, #24
   3165a:	18fb      	adds	r3, r7, r3
   3165c:	0011      	movs	r1, r2
   3165e:	0018      	movs	r0, r3
   31660:	4b1c      	ldr	r3, [pc, #112]	; (316d4 <MQTTSerialize_subscribe+0x148>)
   31662:	4798      	blx	r3
   31664:	2300      	movs	r3, #0
   31666:	623b      	str	r3, [r7, #32]
   31668:	e01d      	b.n	316a6 <MQTTSerialize_subscribe+0x11a>
   3166a:	6a3a      	ldr	r2, [r7, #32]
   3166c:	0013      	movs	r3, r2
   3166e:	005b      	lsls	r3, r3, #1
   31670:	189b      	adds	r3, r3, r2
   31672:	009b      	lsls	r3, r3, #2
   31674:	001a      	movs	r2, r3
   31676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   31678:	189b      	adds	r3, r3, r2
   3167a:	2218      	movs	r2, #24
   3167c:	18b8      	adds	r0, r7, r2
   3167e:	6819      	ldr	r1, [r3, #0]
   31680:	685a      	ldr	r2, [r3, #4]
   31682:	689b      	ldr	r3, [r3, #8]
   31684:	4c14      	ldr	r4, [pc, #80]	; (316d8 <MQTTSerialize_subscribe+0x14c>)
   31686:	47a0      	blx	r4
   31688:	6a3b      	ldr	r3, [r7, #32]
   3168a:	009b      	lsls	r3, r3, #2
   3168c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   3168e:	18d3      	adds	r3, r2, r3
   31690:	681b      	ldr	r3, [r3, #0]
   31692:	b2da      	uxtb	r2, r3
   31694:	2318      	movs	r3, #24
   31696:	18fb      	adds	r3, r7, r3
   31698:	0011      	movs	r1, r2
   3169a:	0018      	movs	r0, r3
   3169c:	4b0b      	ldr	r3, [pc, #44]	; (316cc <MQTTSerialize_subscribe+0x140>)
   3169e:	4798      	blx	r3
   316a0:	6a3b      	ldr	r3, [r7, #32]
   316a2:	3301      	adds	r3, #1
   316a4:	623b      	str	r3, [r7, #32]
   316a6:	6a3a      	ldr	r2, [r7, #32]
   316a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   316aa:	429a      	cmp	r2, r3
   316ac:	dbdd      	blt.n	3166a <MQTTSerialize_subscribe+0xde>
   316ae:	69bb      	ldr	r3, [r7, #24]
   316b0:	001a      	movs	r2, r3
   316b2:	68fb      	ldr	r3, [r7, #12]
   316b4:	1ad3      	subs	r3, r2, r3
   316b6:	627b      	str	r3, [r7, #36]	; 0x24
   316b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   316ba:	0018      	movs	r0, r3
   316bc:	46bd      	mov	sp, r7
   316be:	b00b      	add	sp, #44	; 0x2c
   316c0:	bd90      	pop	{r4, r7, pc}
   316c2:	46c0      	nop			; (mov r8, r8)
   316c4:	00031539 	.word	0x00031539
   316c8:	00030efd 	.word	0x00030efd
   316cc:	0003101f 	.word	0x0003101f
   316d0:	00030e05 	.word	0x00030e05
   316d4:	00031049 	.word	0x00031049
   316d8:	000310f1 	.word	0x000310f1

000316dc <MQTTDeserialize_suback>:
   316dc:	b590      	push	{r4, r7, lr}
   316de:	b08b      	sub	sp, #44	; 0x2c
   316e0:	af00      	add	r7, sp, #0
   316e2:	60f8      	str	r0, [r7, #12]
   316e4:	60b9      	str	r1, [r7, #8]
   316e6:	607a      	str	r2, [r7, #4]
   316e8:	603b      	str	r3, [r7, #0]
   316ea:	2300      	movs	r3, #0
   316ec:	61fb      	str	r3, [r7, #28]
   316ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   316f0:	61bb      	str	r3, [r7, #24]
   316f2:	2300      	movs	r3, #0
   316f4:	623b      	str	r3, [r7, #32]
   316f6:	2300      	movs	r3, #0
   316f8:	627b      	str	r3, [r7, #36]	; 0x24
   316fa:	2318      	movs	r3, #24
   316fc:	18fb      	adds	r3, r7, r3
   316fe:	0018      	movs	r0, r3
   31700:	4b2c      	ldr	r3, [pc, #176]	; (317b4 <MQTTDeserialize_suback+0xd8>)
   31702:	4798      	blx	r3
   31704:	0003      	movs	r3, r0
   31706:	001a      	movs	r2, r3
   31708:	231c      	movs	r3, #28
   3170a:	18fb      	adds	r3, r7, r3
   3170c:	701a      	strb	r2, [r3, #0]
   3170e:	231c      	movs	r3, #28
   31710:	18fb      	adds	r3, r7, r3
   31712:	781b      	ldrb	r3, [r3, #0]
   31714:	220f      	movs	r2, #15
   31716:	4393      	bics	r3, r2
   31718:	b2db      	uxtb	r3, r3
   3171a:	2b90      	cmp	r3, #144	; 0x90
   3171c:	d142      	bne.n	317a4 <MQTTDeserialize_suback+0xc8>
   3171e:	69bb      	ldr	r3, [r7, #24]
   31720:	2214      	movs	r2, #20
   31722:	18ba      	adds	r2, r7, r2
   31724:	0011      	movs	r1, r2
   31726:	0018      	movs	r0, r3
   31728:	4b23      	ldr	r3, [pc, #140]	; (317b8 <MQTTDeserialize_suback+0xdc>)
   3172a:	4798      	blx	r3
   3172c:	0003      	movs	r3, r0
   3172e:	627b      	str	r3, [r7, #36]	; 0x24
   31730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   31732:	69bb      	ldr	r3, [r7, #24]
   31734:	189b      	adds	r3, r3, r2
   31736:	61bb      	str	r3, [r7, #24]
   31738:	69bb      	ldr	r3, [r7, #24]
   3173a:	697a      	ldr	r2, [r7, #20]
   3173c:	189b      	adds	r3, r3, r2
   3173e:	623b      	str	r3, [r7, #32]
   31740:	6a3b      	ldr	r3, [r7, #32]
   31742:	69ba      	ldr	r2, [r7, #24]
   31744:	1a9b      	subs	r3, r3, r2
   31746:	2b01      	cmp	r3, #1
   31748:	dd2e      	ble.n	317a8 <MQTTDeserialize_suback+0xcc>
   3174a:	2318      	movs	r3, #24
   3174c:	18fb      	adds	r3, r7, r3
   3174e:	0018      	movs	r0, r3
   31750:	4b1a      	ldr	r3, [pc, #104]	; (317bc <MQTTDeserialize_suback+0xe0>)
   31752:	4798      	blx	r3
   31754:	0003      	movs	r3, r0
   31756:	b29a      	uxth	r2, r3
   31758:	68fb      	ldr	r3, [r7, #12]
   3175a:	801a      	strh	r2, [r3, #0]
   3175c:	687b      	ldr	r3, [r7, #4]
   3175e:	2200      	movs	r2, #0
   31760:	601a      	str	r2, [r3, #0]
   31762:	e018      	b.n	31796 <MQTTDeserialize_suback+0xba>
   31764:	687b      	ldr	r3, [r7, #4]
   31766:	681a      	ldr	r2, [r3, #0]
   31768:	68bb      	ldr	r3, [r7, #8]
   3176a:	429a      	cmp	r2, r3
   3176c:	dd03      	ble.n	31776 <MQTTDeserialize_suback+0x9a>
   3176e:	2301      	movs	r3, #1
   31770:	425b      	negs	r3, r3
   31772:	627b      	str	r3, [r7, #36]	; 0x24
   31774:	e019      	b.n	317aa <MQTTDeserialize_suback+0xce>
   31776:	687b      	ldr	r3, [r7, #4]
   31778:	681a      	ldr	r2, [r3, #0]
   3177a:	1c51      	adds	r1, r2, #1
   3177c:	687b      	ldr	r3, [r7, #4]
   3177e:	6019      	str	r1, [r3, #0]
   31780:	0013      	movs	r3, r2
   31782:	009b      	lsls	r3, r3, #2
   31784:	683a      	ldr	r2, [r7, #0]
   31786:	18d4      	adds	r4, r2, r3
   31788:	2318      	movs	r3, #24
   3178a:	18fb      	adds	r3, r7, r3
   3178c:	0018      	movs	r0, r3
   3178e:	4b09      	ldr	r3, [pc, #36]	; (317b4 <MQTTDeserialize_suback+0xd8>)
   31790:	4798      	blx	r3
   31792:	0003      	movs	r3, r0
   31794:	6023      	str	r3, [r4, #0]
   31796:	69ba      	ldr	r2, [r7, #24]
   31798:	6a3b      	ldr	r3, [r7, #32]
   3179a:	429a      	cmp	r2, r3
   3179c:	d3e2      	bcc.n	31764 <MQTTDeserialize_suback+0x88>
   3179e:	2301      	movs	r3, #1
   317a0:	627b      	str	r3, [r7, #36]	; 0x24
   317a2:	e002      	b.n	317aa <MQTTDeserialize_suback+0xce>
   317a4:	46c0      	nop			; (mov r8, r8)
   317a6:	e000      	b.n	317aa <MQTTDeserialize_suback+0xce>
   317a8:	46c0      	nop			; (mov r8, r8)
   317aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   317ac:	0018      	movs	r0, r3
   317ae:	46bd      	mov	sp, r7
   317b0:	b00b      	add	sp, #44	; 0x2c
   317b2:	bd90      	pop	{r4, r7, pc}
   317b4:	00030ff3 	.word	0x00030ff3
   317b8:	00030f8d 	.word	0x00030f8d
   317bc:	00030fc1 	.word	0x00030fc1

000317c0 <http_client_get_config_defaults>:
 * So it needed reference to HTTP client module instance.
 */
static struct http_client_module *module_ref_inst[TCP_SOCK_MAX] = {NULL,};

void http_client_get_config_defaults(struct http_client_config *const config)
{
   317c0:	b580      	push	{r7, lr}
   317c2:	b082      	sub	sp, #8
   317c4:	af00      	add	r7, sp, #0
   317c6:	6078      	str	r0, [r7, #4]
	config->port = 80;
   317c8:	687b      	ldr	r3, [r7, #4]
   317ca:	2250      	movs	r2, #80	; 0x50
   317cc:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   317ce:	687b      	ldr	r3, [r7, #4]
   317d0:	2200      	movs	r2, #0
   317d2:	709a      	strb	r2, [r3, #2]
	config->timeout = 20000;
   317d4:	687b      	ldr	r3, [r7, #4]
   317d6:	4a0b      	ldr	r2, [pc, #44]	; (31804 <http_client_get_config_defaults+0x44>)
   317d8:	811a      	strh	r2, [r3, #8]
	config->timer_inst = NULL;
   317da:	687b      	ldr	r3, [r7, #4]
   317dc:	2200      	movs	r2, #0
   317de:	605a      	str	r2, [r3, #4]
	config->recv_buffer = NULL;
   317e0:	687b      	ldr	r3, [r7, #4]
   317e2:	2200      	movs	r2, #0
   317e4:	60da      	str	r2, [r3, #12]
	config->recv_buffer_size = 256;
   317e6:	687b      	ldr	r3, [r7, #4]
   317e8:	2280      	movs	r2, #128	; 0x80
   317ea:	0052      	lsls	r2, r2, #1
   317ec:	611a      	str	r2, [r3, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   317ee:	687b      	ldr	r3, [r7, #4]
   317f0:	2252      	movs	r2, #82	; 0x52
   317f2:	615a      	str	r2, [r3, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   317f4:	687b      	ldr	r3, [r7, #4]
   317f6:	4a04      	ldr	r2, [pc, #16]	; (31808 <http_client_get_config_defaults+0x48>)
   317f8:	619a      	str	r2, [r3, #24]
}
   317fa:	46c0      	nop			; (mov r8, r8)
   317fc:	46bd      	mov	sp, r7
   317fe:	b002      	add	sp, #8
   31800:	bd80      	pop	{r7, pc}
   31802:	46c0      	nop			; (mov r8, r8)
   31804:	00004e20 	.word	0x00004e20
   31808:	0003a9d0 	.word	0x0003a9d0

0003180c <http_client_init>:

int http_client_init(struct http_client_module *const module, struct http_client_config *config)
{
   3180c:	b590      	push	{r4, r7, lr}
   3180e:	b083      	sub	sp, #12
   31810:	af00      	add	r7, sp, #0
   31812:	6078      	str	r0, [r7, #4]
   31814:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL || config == NULL) {
   31816:	687b      	ldr	r3, [r7, #4]
   31818:	2b00      	cmp	r3, #0
   3181a:	d002      	beq.n	31822 <http_client_init+0x16>
   3181c:	683b      	ldr	r3, [r7, #0]
   3181e:	2b00      	cmp	r3, #0
   31820:	d102      	bne.n	31828 <http_client_init+0x1c>
		return -EINVAL;
   31822:	2316      	movs	r3, #22
   31824:	425b      	negs	r3, r3
   31826:	e058      	b.n	318da <http_client_init+0xce>
	}

	if (config->recv_buffer_size == 0) {
   31828:	683b      	ldr	r3, [r7, #0]
   3182a:	691b      	ldr	r3, [r3, #16]
   3182c:	2b00      	cmp	r3, #0
   3182e:	d102      	bne.n	31836 <http_client_init+0x2a>
		return -EINVAL;
   31830:	2316      	movs	r3, #22
   31832:	425b      	negs	r3, r3
   31834:	e051      	b.n	318da <http_client_init+0xce>
	}

	if (config->timer_inst == NULL) {
   31836:	683b      	ldr	r3, [r7, #0]
   31838:	685b      	ldr	r3, [r3, #4]
   3183a:	2b00      	cmp	r3, #0
   3183c:	d102      	bne.n	31844 <http_client_init+0x38>
		return -EINVAL;
   3183e:	2316      	movs	r3, #22
   31840:	425b      	negs	r3, r3
   31842:	e04a      	b.n	318da <http_client_init+0xce>
	}

	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   31844:	683b      	ldr	r3, [r7, #0]
   31846:	695b      	ldr	r3, [r3, #20]
   31848:	2b51      	cmp	r3, #81	; 0x51
   3184a:	d802      	bhi.n	31852 <http_client_init+0x46>
		return -EINVAL;
   3184c:	2316      	movs	r3, #22
   3184e:	425b      	negs	r3, r3
   31850:	e043      	b.n	318da <http_client_init+0xce>
	}

	memset(module, 0, sizeof(struct http_client_module));
   31852:	687b      	ldr	r3, [r7, #4]
   31854:	22e8      	movs	r2, #232	; 0xe8
   31856:	2100      	movs	r1, #0
   31858:	0018      	movs	r0, r3
   3185a:	4b22      	ldr	r3, [pc, #136]	; (318e4 <http_client_init+0xd8>)
   3185c:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   3185e:	687b      	ldr	r3, [r7, #4]
   31860:	3350      	adds	r3, #80	; 0x50
   31862:	6839      	ldr	r1, [r7, #0]
   31864:	221c      	movs	r2, #28
   31866:	0018      	movs	r0, r3
   31868:	4b1f      	ldr	r3, [pc, #124]	; (318e8 <http_client_init+0xdc>)
   3186a:	4798      	blx	r3

	/* Allocate the buffer in the heap. */
	if (module->config.recv_buffer == NULL) {
   3186c:	687b      	ldr	r3, [r7, #4]
   3186e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   31870:	2b00      	cmp	r3, #0
   31872:	d115      	bne.n	318a0 <http_client_init+0x94>
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   31874:	683b      	ldr	r3, [r7, #0]
   31876:	691b      	ldr	r3, [r3, #16]
   31878:	0018      	movs	r0, r3
   3187a:	4b1c      	ldr	r3, [pc, #112]	; (318ec <http_client_init+0xe0>)
   3187c:	4798      	blx	r3
   3187e:	0003      	movs	r3, r0
   31880:	001a      	movs	r2, r3
   31882:	687b      	ldr	r3, [r7, #4]
   31884:	65da      	str	r2, [r3, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   31886:	687b      	ldr	r3, [r7, #4]
   31888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   3188a:	2b00      	cmp	r3, #0
   3188c:	d102      	bne.n	31894 <http_client_init+0x88>
			return -ENOMEM;
   3188e:	230c      	movs	r3, #12
   31890:	425b      	negs	r3, r3
   31892:	e022      	b.n	318da <http_client_init+0xce>
		}
		module->alloc_buffer = 1;
   31894:	687b      	ldr	r3, [r7, #4]
   31896:	2241      	movs	r2, #65	; 0x41
   31898:	5c99      	ldrb	r1, [r3, r2]
   3189a:	2004      	movs	r0, #4
   3189c:	4301      	orrs	r1, r0
   3189e:	5499      	strb	r1, [r3, r2]
	}

	if (config->timeout > 0) {
   318a0:	683b      	ldr	r3, [r7, #0]
   318a2:	891b      	ldrh	r3, [r3, #8]
   318a4:	2b00      	cmp	r3, #0
   318a6:	d010      	beq.n	318ca <http_client_init+0xbe>
		/* Enable the timer. */
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   318a8:	683b      	ldr	r3, [r7, #0]
   318aa:	6858      	ldr	r0, [r3, #4]
   318ac:	687a      	ldr	r2, [r7, #4]
   318ae:	4910      	ldr	r1, [pc, #64]	; (318f0 <http_client_init+0xe4>)
   318b0:	2300      	movs	r3, #0
   318b2:	4c10      	ldr	r4, [pc, #64]	; (318f4 <http_client_init+0xe8>)
   318b4:	47a0      	blx	r4
   318b6:	0002      	movs	r2, r0
   318b8:	687b      	ldr	r3, [r7, #4]
   318ba:	649a      	str	r2, [r3, #72]	; 0x48

		if (module->timer_id < 0) {
   318bc:	687b      	ldr	r3, [r7, #4]
   318be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   318c0:	2b00      	cmp	r3, #0
   318c2:	da02      	bge.n	318ca <http_client_init+0xbe>
			return -ENOSPC;
   318c4:	231c      	movs	r3, #28
   318c6:	425b      	negs	r3, r3
   318c8:	e007      	b.n	318da <http_client_init+0xce>
		}
	}

	module->req.state = STATE_INIT;
   318ca:	687b      	ldr	r3, [r7, #4]
   318cc:	2200      	movs	r2, #0
   318ce:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   318d0:	687b      	ldr	r3, [r7, #4]
   318d2:	22d8      	movs	r2, #216	; 0xd8
   318d4:	2100      	movs	r1, #0
   318d6:	5099      	str	r1, [r3, r2]

	return 0;
   318d8:	2300      	movs	r3, #0
}
   318da:	0018      	movs	r0, r3
   318dc:	46bd      	mov	sp, r7
   318de:	b003      	add	sp, #12
   318e0:	bd90      	pop	{r4, r7, pc}
   318e2:	46c0      	nop			; (mov r8, r8)
   318e4:	00035707 	.word	0x00035707
   318e8:	000356d1 	.word	0x000356d1
   318ec:	000356a9 	.word	0x000356a9
   318f0:	00031bbd 	.word	0x00031bbd
   318f4:	00033261 	.word	0x00033261

000318f8 <http_client_register_callback>:

	return 0;
}

int http_client_register_callback(struct http_client_module *const module, http_client_callback_t callback)
{
   318f8:	b580      	push	{r7, lr}
   318fa:	b082      	sub	sp, #8
   318fc:	af00      	add	r7, sp, #0
   318fe:	6078      	str	r0, [r7, #4]
   31900:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL) {
   31902:	687b      	ldr	r3, [r7, #4]
   31904:	2b00      	cmp	r3, #0
   31906:	d102      	bne.n	3190e <http_client_register_callback+0x16>
		return -EINVAL;
   31908:	2316      	movs	r3, #22
   3190a:	425b      	negs	r3, r3
   3190c:	e003      	b.n	31916 <http_client_register_callback+0x1e>
	}

	module->cb = callback;
   3190e:	687b      	ldr	r3, [r7, #4]
   31910:	683a      	ldr	r2, [r7, #0]
   31912:	64da      	str	r2, [r3, #76]	; 0x4c

	return 0;
   31914:	2300      	movs	r3, #0
}
   31916:	0018      	movs	r0, r3
   31918:	46bd      	mov	sp, r7
   3191a:	b002      	add	sp, #8
   3191c:	bd80      	pop	{r7, pc}
	...

00031920 <_hwerr_to_stderr>:

/**
 * \brief change HW error type to standard error.
 */
static inline int _hwerr_to_stderr(int err)
{
   31920:	b580      	push	{r7, lr}
   31922:	b082      	sub	sp, #8
   31924:	af00      	add	r7, sp, #0
   31926:	6078      	str	r0, [r7, #4]
	switch (err) {
   31928:	687b      	ldr	r3, [r7, #4]
   3192a:	330e      	adds	r3, #14
   3192c:	2b0e      	cmp	r3, #14
   3192e:	d825      	bhi.n	3197c <_hwerr_to_stderr+0x5c>
   31930:	009a      	lsls	r2, r3, #2
   31932:	4b18      	ldr	r3, [pc, #96]	; (31994 <_hwerr_to_stderr+0x74>)
   31934:	18d3      	adds	r3, r2, r3
   31936:	681b      	ldr	r3, [r3, #0]
   31938:	469f      	mov	pc, r3
		case 0:
			return -EIO;
   3193a:	2305      	movs	r3, #5
   3193c:	425b      	negs	r3, r3
   3193e:	e024      	b.n	3198a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ADDRESS:
			return -ENOENT;
   31940:	2302      	movs	r3, #2
   31942:	425b      	negs	r3, r3
   31944:	e021      	b.n	3198a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_ALREADY_IN_USE:
			return -EADDRINUSE;
   31946:	2370      	movs	r3, #112	; 0x70
   31948:	425b      	negs	r3, r3
   3194a:	e01e      	b.n	3198a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_TCP_SOCK:
		case SOCK_ERR_MAX_UDP_SOCK:
			return -ENOMEM;
   3194c:	230c      	movs	r3, #12
   3194e:	425b      	negs	r3, r3
   31950:	e01b      	b.n	3198a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ARG:
			return -EINVAL;
   31952:	2316      	movs	r3, #22
   31954:	425b      	negs	r3, r3
   31956:	e018      	b.n	3198a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_LISTEN_SOCK:
			return -ENOMEM;
   31958:	230c      	movs	r3, #12
   3195a:	425b      	negs	r3, r3
   3195c:	e015      	b.n	3198a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID:
			return -EIO;
   3195e:	2305      	movs	r3, #5
   31960:	425b      	negs	r3, r3
   31962:	e012      	b.n	3198a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_IS_REQUIRED:
			return -EDESTADDRREQ;
   31964:	2379      	movs	r3, #121	; 0x79
   31966:	425b      	negs	r3, r3
   31968:	e00f      	b.n	3198a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_CONN_ABORTED:
			return -ECONNRESET;
   3196a:	2368      	movs	r3, #104	; 0x68
   3196c:	425b      	negs	r3, r3
   3196e:	e00c      	b.n	3198a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_TIMEOUT:
			return -EAGAIN;
   31970:	230b      	movs	r3, #11
   31972:	425b      	negs	r3, r3
   31974:	e009      	b.n	3198a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
   31976:	2310      	movs	r3, #16
   31978:	425b      	negs	r3, r3
   3197a:	e006      	b.n	3198a <_hwerr_to_stderr+0x6a>
		default:
			if (err < 0) {
   3197c:	687b      	ldr	r3, [r7, #4]
   3197e:	2b00      	cmp	r3, #0
   31980:	da02      	bge.n	31988 <_hwerr_to_stderr+0x68>
				return -EIO;
   31982:	2305      	movs	r3, #5
   31984:	425b      	negs	r3, r3
   31986:	e000      	b.n	3198a <_hwerr_to_stderr+0x6a>
			}
			return 0;
   31988:	2300      	movs	r3, #0
	}
}
   3198a:	0018      	movs	r0, r3
   3198c:	46bd      	mov	sp, r7
   3198e:	b002      	add	sp, #8
   31990:	bd80      	pop	{r7, pc}
   31992:	46c0      	nop			; (mov r8, r8)
   31994:	0003ab0c 	.word	0x0003ab0c

00031998 <http_client_socket_event_handler>:

void http_client_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   31998:	b580      	push	{r7, lr}
   3199a:	b08a      	sub	sp, #40	; 0x28
   3199c:	af00      	add	r7, sp, #0
   3199e:	603a      	str	r2, [r7, #0]
   319a0:	1dfb      	adds	r3, r7, #7
   319a2:	1c02      	adds	r2, r0, #0
   319a4:	701a      	strb	r2, [r3, #0]
   319a6:	1dbb      	adds	r3, r7, #6
   319a8:	1c0a      	adds	r2, r1, #0
   319aa:	701a      	strb	r2, [r3, #0]
	tstrSocketRecvMsg *msg_recv;
	int16_t send_ret;
	union http_client_data data;

	/* Find instance using the socket descriptor. */
	struct http_client_module *module = module_ref_inst[sock];
   319ac:	1dfb      	adds	r3, r7, #7
   319ae:	2200      	movs	r2, #0
   319b0:	569a      	ldrsb	r2, [r3, r2]
   319b2:	4b4b      	ldr	r3, [pc, #300]	; (31ae0 <http_client_socket_event_handler+0x148>)
   319b4:	0092      	lsls	r2, r2, #2
   319b6:	58d3      	ldr	r3, [r2, r3]
   319b8:	627b      	str	r3, [r7, #36]	; 0x24
	/* If cannot found reference, This socket is not HTTP client socket. */
	if (module == NULL) {
   319ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   319bc:	2b00      	cmp	r3, #0
   319be:	d100      	bne.n	319c2 <http_client_socket_event_handler+0x2a>
   319c0:	e08a      	b.n	31ad8 <http_client_socket_event_handler+0x140>
		return;
	}

	switch (msg_type) {
   319c2:	1dbb      	adds	r3, r7, #6
   319c4:	781b      	ldrb	r3, [r3, #0]
   319c6:	2b06      	cmp	r3, #6
   319c8:	d040      	beq.n	31a4c <http_client_socket_event_handler+0xb4>
   319ca:	2b07      	cmp	r3, #7
   319cc:	d060      	beq.n	31a90 <http_client_socket_event_handler+0xf8>
   319ce:	2b05      	cmp	r3, #5
   319d0:	d000      	beq.n	319d4 <http_client_socket_event_handler+0x3c>
		}
		/* Disable sending flag. */
		module->sending = 0;
    	break;
	default:
		break;
   319d2:	e082      	b.n	31ada <http_client_socket_event_handler+0x142>
    	msg_connect = (tstrSocketConnectMsg*)msg_data;
   319d4:	683b      	ldr	r3, [r7, #0]
   319d6:	623b      	str	r3, [r7, #32]
    	data.sock_connected.result = msg_connect->s8Error;
   319d8:	6a3b      	ldr	r3, [r7, #32]
   319da:	785b      	ldrb	r3, [r3, #1]
   319dc:	b25b      	sxtb	r3, r3
   319de:	001a      	movs	r2, r3
   319e0:	230c      	movs	r3, #12
   319e2:	18fb      	adds	r3, r7, r3
   319e4:	601a      	str	r2, [r3, #0]
    	if (msg_connect->s8Error < 0) {
   319e6:	6a3b      	ldr	r3, [r7, #32]
   319e8:	785b      	ldrb	r3, [r3, #1]
   319ea:	b25b      	sxtb	r3, r3
   319ec:	2b00      	cmp	r3, #0
   319ee:	da0c      	bge.n	31a0a <http_client_socket_event_handler+0x72>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
   319f0:	6a3b      	ldr	r3, [r7, #32]
   319f2:	785b      	ldrb	r3, [r3, #1]
   319f4:	b25b      	sxtb	r3, r3
   319f6:	0018      	movs	r0, r3
   319f8:	4b3a      	ldr	r3, [pc, #232]	; (31ae4 <http_client_socket_event_handler+0x14c>)
   319fa:	4798      	blx	r3
   319fc:	0002      	movs	r2, r0
   319fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31a00:	0011      	movs	r1, r2
   31a02:	0018      	movs	r0, r3
   31a04:	4b38      	ldr	r3, [pc, #224]	; (31ae8 <http_client_socket_event_handler+0x150>)
   31a06:	4798      	blx	r3
    	break;
   31a08:	e067      	b.n	31ada <http_client_socket_event_handler+0x142>
			if (module->cb != NULL) {
   31a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31a0e:	2b00      	cmp	r3, #0
   31a10:	d006      	beq.n	31a20 <http_client_socket_event_handler+0x88>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
   31a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31a16:	220c      	movs	r2, #12
   31a18:	18ba      	adds	r2, r7, r2
   31a1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
   31a1c:	2100      	movs	r1, #0
   31a1e:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
   31a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31a22:	2203      	movs	r2, #3
   31a24:	66da      	str	r2, [r3, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
   31a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31a28:	6d58      	ldr	r0, [r3, #84]	; 0x54
   31a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31a2c:	6c99      	ldr	r1, [r3, #72]	; 0x48
   31a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31a30:	2258      	movs	r2, #88	; 0x58
   31a32:	5a9b      	ldrh	r3, [r3, r2]
   31a34:	001a      	movs	r2, r3
   31a36:	4b2d      	ldr	r3, [pc, #180]	; (31aec <http_client_socket_event_handler+0x154>)
   31a38:	4798      	blx	r3
    		_http_client_recv_packet(module);
   31a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31a3c:	0018      	movs	r0, r3
   31a3e:	4b2c      	ldr	r3, [pc, #176]	; (31af0 <http_client_socket_event_handler+0x158>)
   31a40:	4798      	blx	r3
			_http_client_request(module);
   31a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31a44:	0018      	movs	r0, r3
   31a46:	4b2b      	ldr	r3, [pc, #172]	; (31af4 <http_client_socket_event_handler+0x15c>)
   31a48:	4798      	blx	r3
    	break;
   31a4a:	e046      	b.n	31ada <http_client_socket_event_handler+0x142>
    	msg_recv = (tstrSocketRecvMsg*)msg_data;
   31a4c:	683b      	ldr	r3, [r7, #0]
   31a4e:	61fb      	str	r3, [r7, #28]
    	if (msg_recv->s16BufferSize > 0) {
   31a50:	69fb      	ldr	r3, [r7, #28]
   31a52:	2204      	movs	r2, #4
   31a54:	5e9b      	ldrsh	r3, [r3, r2]
   31a56:	2b00      	cmp	r3, #0
   31a58:	dd09      	ble.n	31a6e <http_client_socket_event_handler+0xd6>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
   31a5a:	69fb      	ldr	r3, [r7, #28]
   31a5c:	2204      	movs	r2, #4
   31a5e:	5e9b      	ldrsh	r3, [r3, r2]
   31a60:	001a      	movs	r2, r3
   31a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31a64:	0011      	movs	r1, r2
   31a66:	0018      	movs	r0, r3
   31a68:	4b23      	ldr	r3, [pc, #140]	; (31af8 <http_client_socket_event_handler+0x160>)
   31a6a:	4798      	blx	r3
   31a6c:	e00b      	b.n	31a86 <http_client_socket_event_handler+0xee>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
   31a6e:	69fb      	ldr	r3, [r7, #28]
   31a70:	2204      	movs	r2, #4
   31a72:	5e9b      	ldrsh	r3, [r3, r2]
   31a74:	0018      	movs	r0, r3
   31a76:	4b1b      	ldr	r3, [pc, #108]	; (31ae4 <http_client_socket_event_handler+0x14c>)
   31a78:	4798      	blx	r3
   31a7a:	0002      	movs	r2, r0
   31a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31a7e:	0011      	movs	r1, r2
   31a80:	0018      	movs	r0, r3
   31a82:	4b19      	ldr	r3, [pc, #100]	; (31ae8 <http_client_socket_event_handler+0x150>)
   31a84:	4798      	blx	r3
		_http_client_recv_packet(module);
   31a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31a88:	0018      	movs	r0, r3
   31a8a:	4b19      	ldr	r3, [pc, #100]	; (31af0 <http_client_socket_event_handler+0x158>)
   31a8c:	4798      	blx	r3
		break;
   31a8e:	e024      	b.n	31ada <http_client_socket_event_handler+0x142>
		send_ret = *(int16_t*)msg_data;
   31a90:	231a      	movs	r3, #26
   31a92:	18fb      	adds	r3, r7, r3
   31a94:	683a      	ldr	r2, [r7, #0]
   31a96:	8812      	ldrh	r2, [r2, #0]
   31a98:	801a      	strh	r2, [r3, #0]
		if (send_ret < 0) {
   31a9a:	231a      	movs	r3, #26
   31a9c:	18fb      	adds	r3, r7, r3
   31a9e:	2200      	movs	r2, #0
   31aa0:	5e9b      	ldrsh	r3, [r3, r2]
   31aa2:	2b00      	cmp	r3, #0
   31aa4:	da0d      	bge.n	31ac2 <http_client_socket_event_handler+0x12a>
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
   31aa6:	231a      	movs	r3, #26
   31aa8:	18fb      	adds	r3, r7, r3
   31aaa:	2200      	movs	r2, #0
   31aac:	5e9b      	ldrsh	r3, [r3, r2]
   31aae:	0018      	movs	r0, r3
   31ab0:	4b0c      	ldr	r3, [pc, #48]	; (31ae4 <http_client_socket_event_handler+0x14c>)
   31ab2:	4798      	blx	r3
   31ab4:	0002      	movs	r2, r0
   31ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31ab8:	0011      	movs	r1, r2
   31aba:	0018      	movs	r0, r3
   31abc:	4b0a      	ldr	r3, [pc, #40]	; (31ae8 <http_client_socket_event_handler+0x150>)
   31abe:	4798      	blx	r3
   31ac0:	e003      	b.n	31aca <http_client_socket_event_handler+0x132>
    		_http_client_request(module);
   31ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31ac4:	0018      	movs	r0, r3
   31ac6:	4b0b      	ldr	r3, [pc, #44]	; (31af4 <http_client_socket_event_handler+0x15c>)
   31ac8:	4798      	blx	r3
		module->sending = 0;
   31aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31acc:	2241      	movs	r2, #65	; 0x41
   31ace:	5c99      	ldrb	r1, [r3, r2]
   31ad0:	2001      	movs	r0, #1
   31ad2:	4381      	bics	r1, r0
   31ad4:	5499      	strb	r1, [r3, r2]
    	break;
   31ad6:	e000      	b.n	31ada <http_client_socket_event_handler+0x142>
		return;
   31ad8:	46c0      	nop			; (mov r8, r8)
	}

}
   31ada:	46bd      	mov	sp, r7
   31adc:	b00a      	add	sp, #40	; 0x28
   31ade:	bd80      	pop	{r7, pc}
   31ae0:	20004330 	.word	0x20004330
   31ae4:	00031921 	.word	0x00031921
   31ae8:	00031f95 	.word	0x00031f95
   31aec:	000332f1 	.word	0x000332f1
   31af0:	00032821 	.word	0x00032821
   31af4:	000320e9 	.word	0x000320e9
   31af8:	00032885 	.word	0x00032885

00031afc <http_client_socket_resolve_handler>:

void http_client_socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   31afc:	b580      	push	{r7, lr}
   31afe:	b088      	sub	sp, #32
   31b00:	af00      	add	r7, sp, #0
   31b02:	6078      	str	r0, [r7, #4]
   31b04:	6039      	str	r1, [r7, #0]
	int i;
	struct http_client_module *module;
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
   31b06:	2300      	movs	r3, #0
   31b08:	61fb      	str	r3, [r7, #28]
   31b0a:	e048      	b.n	31b9e <http_client_socket_resolve_handler+0xa2>
		if (module_ref_inst[i] != NULL) {
   31b0c:	4b27      	ldr	r3, [pc, #156]	; (31bac <http_client_socket_resolve_handler+0xb0>)
   31b0e:	69fa      	ldr	r2, [r7, #28]
   31b10:	0092      	lsls	r2, r2, #2
   31b12:	58d3      	ldr	r3, [r2, r3]
   31b14:	2b00      	cmp	r3, #0
   31b16:	d03f      	beq.n	31b98 <http_client_socket_resolve_handler+0x9c>
			module = module_ref_inst[i];
   31b18:	4b24      	ldr	r3, [pc, #144]	; (31bac <http_client_socket_resolve_handler+0xb0>)
   31b1a:	69fa      	ldr	r2, [r7, #28]
   31b1c:	0092      	lsls	r2, r2, #2
   31b1e:	58d3      	ldr	r3, [r2, r3]
   31b20:	61bb      	str	r3, [r7, #24]
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   31b22:	69bb      	ldr	r3, [r7, #24]
   31b24:	1c5a      	adds	r2, r3, #1
   31b26:	687b      	ldr	r3, [r7, #4]
   31b28:	0011      	movs	r1, r2
   31b2a:	0018      	movs	r0, r3
   31b2c:	4b20      	ldr	r3, [pc, #128]	; (31bb0 <http_client_socket_resolve_handler+0xb4>)
   31b2e:	4798      	blx	r3
   31b30:	1e03      	subs	r3, r0, #0
   31b32:	d131      	bne.n	31b98 <http_client_socket_resolve_handler+0x9c>
   31b34:	69bb      	ldr	r3, [r7, #24]
   31b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   31b38:	2b01      	cmp	r3, #1
   31b3a:	d12d      	bne.n	31b98 <http_client_socket_resolve_handler+0x9c>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
   31b3c:	683b      	ldr	r3, [r7, #0]
   31b3e:	2b00      	cmp	r3, #0
   31b40:	d107      	bne.n	31b52 <http_client_socket_resolve_handler+0x56>
					_http_client_clear_conn(module, -EHOSTUNREACH);
   31b42:	2376      	movs	r3, #118	; 0x76
   31b44:	425a      	negs	r2, r3
   31b46:	69bb      	ldr	r3, [r7, #24]
   31b48:	0011      	movs	r1, r2
   31b4a:	0018      	movs	r0, r3
   31b4c:	4b19      	ldr	r3, [pc, #100]	; (31bb4 <http_client_socket_resolve_handler+0xb8>)
   31b4e:	4798      	blx	r3
					return;
   31b50:	e028      	b.n	31ba4 <http_client_socket_resolve_handler+0xa8>
				}
				addr_in.sin_family = AF_INET;
   31b52:	2308      	movs	r3, #8
   31b54:	18fb      	adds	r3, r7, r3
   31b56:	2202      	movs	r2, #2
   31b58:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   31b5a:	69bb      	ldr	r3, [r7, #24]
   31b5c:	2250      	movs	r2, #80	; 0x50
   31b5e:	5a9b      	ldrh	r3, [r3, r2]
   31b60:	021b      	lsls	r3, r3, #8
   31b62:	b21a      	sxth	r2, r3
   31b64:	69bb      	ldr	r3, [r7, #24]
   31b66:	2150      	movs	r1, #80	; 0x50
   31b68:	5a5b      	ldrh	r3, [r3, r1]
   31b6a:	0a1b      	lsrs	r3, r3, #8
   31b6c:	b29b      	uxth	r3, r3
   31b6e:	b21b      	sxth	r3, r3
   31b70:	4313      	orrs	r3, r2
   31b72:	b21b      	sxth	r3, r3
   31b74:	b29a      	uxth	r2, r3
   31b76:	2308      	movs	r3, #8
   31b78:	18fb      	adds	r3, r7, r3
   31b7a:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = server_ip;
   31b7c:	2308      	movs	r3, #8
   31b7e:	18fb      	adds	r3, r7, r3
   31b80:	683a      	ldr	r2, [r7, #0]
   31b82:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   31b84:	69bb      	ldr	r3, [r7, #24]
   31b86:	781b      	ldrb	r3, [r3, #0]
   31b88:	b25b      	sxtb	r3, r3
   31b8a:	2208      	movs	r2, #8
   31b8c:	18b9      	adds	r1, r7, r2
   31b8e:	2210      	movs	r2, #16
   31b90:	0018      	movs	r0, r3
   31b92:	4b09      	ldr	r3, [pc, #36]	; (31bb8 <http_client_socket_resolve_handler+0xbc>)
   31b94:	4798      	blx	r3
				return;
   31b96:	e005      	b.n	31ba4 <http_client_socket_resolve_handler+0xa8>
	for (i = 0; i < TCP_SOCK_MAX; i++) {
   31b98:	69fb      	ldr	r3, [r7, #28]
   31b9a:	3301      	adds	r3, #1
   31b9c:	61fb      	str	r3, [r7, #28]
   31b9e:	69fb      	ldr	r3, [r7, #28]
   31ba0:	2b06      	cmp	r3, #6
   31ba2:	ddb3      	ble.n	31b0c <http_client_socket_resolve_handler+0x10>
			}
		}
	}
}
   31ba4:	46bd      	mov	sp, r7
   31ba6:	b008      	add	sp, #32
   31ba8:	bd80      	pop	{r7, pc}
   31baa:	46c0      	nop			; (mov r8, r8)
   31bac:	20004330 	.word	0x20004330
   31bb0:	00035a5f 	.word	0x00035a5f
   31bb4:	00031f95 	.word	0x00031f95
   31bb8:	000264b9 	.word	0x000264b9

00031bbc <http_client_timer_callback>:

void http_client_timer_callback(struct sw_timer_module *const module, int timer_id, void *context, int period)
{
   31bbc:	b580      	push	{r7, lr}
   31bbe:	b086      	sub	sp, #24
   31bc0:	af00      	add	r7, sp, #0
   31bc2:	60f8      	str	r0, [r7, #12]
   31bc4:	60b9      	str	r1, [r7, #8]
   31bc6:	607a      	str	r2, [r7, #4]
   31bc8:	603b      	str	r3, [r7, #0]
	struct http_client_module *module_inst = (struct http_client_module *)context;
   31bca:	687b      	ldr	r3, [r7, #4]
   31bcc:	617b      	str	r3, [r7, #20]

	/* Checks invalid arguments. */
	if (module_inst == NULL) {
   31bce:	697b      	ldr	r3, [r7, #20]
   31bd0:	2b00      	cmp	r3, #0
   31bd2:	d007      	beq.n	31be4 <http_client_timer_callback+0x28>
		return;
	}

	_http_client_clear_conn(module_inst, -ETIME);
   31bd4:	233e      	movs	r3, #62	; 0x3e
   31bd6:	425a      	negs	r2, r3
   31bd8:	697b      	ldr	r3, [r7, #20]
   31bda:	0011      	movs	r1, r2
   31bdc:	0018      	movs	r0, r3
   31bde:	4b03      	ldr	r3, [pc, #12]	; (31bec <http_client_timer_callback+0x30>)
   31be0:	4798      	blx	r3
   31be2:	e000      	b.n	31be6 <http_client_timer_callback+0x2a>
		return;
   31be4:	46c0      	nop			; (mov r8, r8)
}
   31be6:	46bd      	mov	sp, r7
   31be8:	b006      	add	sp, #24
   31bea:	bd80      	pop	{r7, pc}
   31bec:	00031f95 	.word	0x00031f95

00031bf0 <_is_ip>:

static int _is_ip(const char *host)
{
   31bf0:	b580      	push	{r7, lr}
   31bf2:	b084      	sub	sp, #16
   31bf4:	af00      	add	r7, sp, #0
   31bf6:	6078      	str	r0, [r7, #4]
	uint32_t isv6 = 0;
   31bf8:	2300      	movs	r3, #0
   31bfa:	60fb      	str	r3, [r7, #12]
	char ch;

	while (*host != '\0') {
   31bfc:	e03a      	b.n	31c74 <_is_ip+0x84>
		ch = *host++;
   31bfe:	687b      	ldr	r3, [r7, #4]
   31c00:	1c5a      	adds	r2, r3, #1
   31c02:	607a      	str	r2, [r7, #4]
   31c04:	220b      	movs	r2, #11
   31c06:	18ba      	adds	r2, r7, r2
   31c08:	781b      	ldrb	r3, [r3, #0]
   31c0a:	7013      	strb	r3, [r2, #0]
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   31c0c:	230b      	movs	r3, #11
   31c0e:	18fb      	adds	r3, r7, r3
   31c10:	781b      	ldrb	r3, [r3, #0]
   31c12:	2b60      	cmp	r3, #96	; 0x60
   31c14:	d904      	bls.n	31c20 <_is_ip+0x30>
   31c16:	230b      	movs	r3, #11
   31c18:	18fb      	adds	r3, r7, r3
   31c1a:	781b      	ldrb	r3, [r3, #0]
   31c1c:	2b66      	cmp	r3, #102	; 0x66
   31c1e:	d913      	bls.n	31c48 <_is_ip+0x58>
   31c20:	230b      	movs	r3, #11
   31c22:	18fb      	adds	r3, r7, r3
   31c24:	781b      	ldrb	r3, [r3, #0]
   31c26:	2b40      	cmp	r3, #64	; 0x40
   31c28:	d904      	bls.n	31c34 <_is_ip+0x44>
   31c2a:	230b      	movs	r3, #11
   31c2c:	18fb      	adds	r3, r7, r3
   31c2e:	781b      	ldrb	r3, [r3, #0]
   31c30:	2b46      	cmp	r3, #70	; 0x46
   31c32:	d909      	bls.n	31c48 <_is_ip+0x58>
   31c34:	230b      	movs	r3, #11
   31c36:	18fb      	adds	r3, r7, r3
   31c38:	781b      	ldrb	r3, [r3, #0]
   31c3a:	2b3a      	cmp	r3, #58	; 0x3a
   31c3c:	d004      	beq.n	31c48 <_is_ip+0x58>
   31c3e:	230b      	movs	r3, #11
   31c40:	18fb      	adds	r3, r7, r3
   31c42:	781b      	ldrb	r3, [r3, #0]
   31c44:	2b2f      	cmp	r3, #47	; 0x2f
   31c46:	d102      	bne.n	31c4e <_is_ip+0x5e>
			isv6 = 1;
   31c48:	2301      	movs	r3, #1
   31c4a:	60fb      	str	r3, [r7, #12]
   31c4c:	e012      	b.n	31c74 <_is_ip+0x84>
		} else if (ch == '.') {
   31c4e:	230b      	movs	r3, #11
   31c50:	18fb      	adds	r3, r7, r3
   31c52:	781b      	ldrb	r3, [r3, #0]
   31c54:	2b2e      	cmp	r3, #46	; 0x2e
   31c56:	d104      	bne.n	31c62 <_is_ip+0x72>
			if (isv6) {
   31c58:	68fb      	ldr	r3, [r7, #12]
   31c5a:	2b00      	cmp	r3, #0
   31c5c:	d00a      	beq.n	31c74 <_is_ip+0x84>
				return 0;
   31c5e:	2300      	movs	r3, #0
   31c60:	e00d      	b.n	31c7e <_is_ip+0x8e>
			}
		} else if ((ch & 0x30) != 0x30) {
   31c62:	230b      	movs	r3, #11
   31c64:	18fb      	adds	r3, r7, r3
   31c66:	781b      	ldrb	r3, [r3, #0]
   31c68:	2230      	movs	r2, #48	; 0x30
   31c6a:	4013      	ands	r3, r2
   31c6c:	2b30      	cmp	r3, #48	; 0x30
   31c6e:	d001      	beq.n	31c74 <_is_ip+0x84>
			return 0;
   31c70:	2300      	movs	r3, #0
   31c72:	e004      	b.n	31c7e <_is_ip+0x8e>
	while (*host != '\0') {
   31c74:	687b      	ldr	r3, [r7, #4]
   31c76:	781b      	ldrb	r3, [r3, #0]
   31c78:	2b00      	cmp	r3, #0
   31c7a:	d1c0      	bne.n	31bfe <_is_ip+0xe>
		}
	}
	return 1;
   31c7c:	2301      	movs	r3, #1
}
   31c7e:	0018      	movs	r0, r3
   31c80:	46bd      	mov	sp, r7
   31c82:	b004      	add	sp, #16
   31c84:	bd80      	pop	{r7, pc}
	...

00031c88 <http_client_send_request>:

int http_client_send_request(struct http_client_module *const module, const char *url,
	enum http_method method, struct http_entity *const entity, const char *ext_header)
{
   31c88:	b5b0      	push	{r4, r5, r7, lr}
   31c8a:	b08e      	sub	sp, #56	; 0x38
   31c8c:	af00      	add	r7, sp, #0
   31c8e:	60f8      	str	r0, [r7, #12]
   31c90:	60b9      	str	r1, [r7, #8]
   31c92:	603b      	str	r3, [r7, #0]
   31c94:	1dfb      	adds	r3, r7, #7
   31c96:	701a      	strb	r2, [r3, #0]
	uint8_t flag = 0;
   31c98:	2337      	movs	r3, #55	; 0x37
   31c9a:	18fb      	adds	r3, r7, r3
   31c9c:	2200      	movs	r2, #0
   31c9e:	701a      	strb	r2, [r3, #0]
	struct sockaddr_in addr_in;
	const char *uri = NULL;
   31ca0:	2300      	movs	r3, #0
   31ca2:	62bb      	str	r3, [r7, #40]	; 0x28
	int i = 0, j = 0, reconnect = 0;
   31ca4:	2300      	movs	r3, #0
   31ca6:	633b      	str	r3, [r7, #48]	; 0x30
   31ca8:	2300      	movs	r3, #0
   31caa:	62fb      	str	r3, [r7, #44]	; 0x2c
   31cac:	2300      	movs	r3, #0
   31cae:	627b      	str	r3, [r7, #36]	; 0x24

	if (module == NULL) {
   31cb0:	68fb      	ldr	r3, [r7, #12]
   31cb2:	2b00      	cmp	r3, #0
   31cb4:	d102      	bne.n	31cbc <http_client_send_request+0x34>
		return -EINVAL;
   31cb6:	2316      	movs	r3, #22
   31cb8:	425b      	negs	r3, r3
   31cba:	e145      	b.n	31f48 <http_client_send_request+0x2c0>
	}

	if (module->req.state > STATE_SOCK_CONNECTED) {
   31cbc:	68fb      	ldr	r3, [r7, #12]
   31cbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   31cc0:	2b02      	cmp	r3, #2
   31cc2:	d902      	bls.n	31cca <http_client_send_request+0x42>
		return -EBUSY;
   31cc4:	2310      	movs	r3, #16
   31cc6:	425b      	negs	r3, r3
   31cc8:	e13e      	b.n	31f48 <http_client_send_request+0x2c0>
	}

	/* Separate host and uri */
	if (!strncmp(url, "http://", 7)) {
   31cca:	49a1      	ldr	r1, [pc, #644]	; (31f50 <http_client_send_request+0x2c8>)
   31ccc:	68bb      	ldr	r3, [r7, #8]
   31cce:	2207      	movs	r2, #7
   31cd0:	0018      	movs	r0, r3
   31cd2:	4ba0      	ldr	r3, [pc, #640]	; (31f54 <http_client_send_request+0x2cc>)
   31cd4:	4798      	blx	r3
   31cd6:	1e03      	subs	r3, r0, #0
   31cd8:	d102      	bne.n	31ce0 <http_client_send_request+0x58>
		i = 7;
   31cda:	2307      	movs	r3, #7
   31cdc:	633b      	str	r3, [r7, #48]	; 0x30
   31cde:	e009      	b.n	31cf4 <http_client_send_request+0x6c>
	} else if (!strncmp(url, "https://", 8)) {
   31ce0:	499d      	ldr	r1, [pc, #628]	; (31f58 <http_client_send_request+0x2d0>)
   31ce2:	68bb      	ldr	r3, [r7, #8]
   31ce4:	2208      	movs	r2, #8
   31ce6:	0018      	movs	r0, r3
   31ce8:	4b9a      	ldr	r3, [pc, #616]	; (31f54 <http_client_send_request+0x2cc>)
   31cea:	4798      	blx	r3
   31cec:	1e03      	subs	r3, r0, #0
   31cee:	d101      	bne.n	31cf4 <http_client_send_request+0x6c>
		i = 8;
   31cf0:	2308      	movs	r3, #8
   31cf2:	633b      	str	r3, [r7, #48]	; 0x30
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   31cf4:	68fb      	ldr	r3, [r7, #12]
   31cf6:	1c5c      	adds	r4, r3, #1
   31cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31cfa:	68ba      	ldr	r2, [r7, #8]
   31cfc:	18d5      	adds	r5, r2, r3
   31cfe:	68fb      	ldr	r3, [r7, #12]
   31d00:	3301      	adds	r3, #1
   31d02:	0018      	movs	r0, r3
   31d04:	4b95      	ldr	r3, [pc, #596]	; (31f5c <http_client_send_request+0x2d4>)
   31d06:	4798      	blx	r3
   31d08:	0003      	movs	r3, r0
   31d0a:	001a      	movs	r2, r3
   31d0c:	0029      	movs	r1, r5
   31d0e:	0020      	movs	r0, r4
   31d10:	4b90      	ldr	r3, [pc, #576]	; (31f54 <http_client_send_request+0x2cc>)
   31d12:	4798      	blx	r3
   31d14:	0003      	movs	r3, r0
   31d16:	627b      	str	r3, [r7, #36]	; 0x24

	for (; url[i] != '\0' && url[i] != '/'; i++) {
   31d18:	e00d      	b.n	31d36 <http_client_send_request+0xae>
		module->host[j++] = url[i];
   31d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   31d1c:	1c5a      	adds	r2, r3, #1
   31d1e:	62fa      	str	r2, [r7, #44]	; 0x2c
   31d20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   31d22:	68b9      	ldr	r1, [r7, #8]
   31d24:	188a      	adds	r2, r1, r2
   31d26:	7811      	ldrb	r1, [r2, #0]
   31d28:	68fa      	ldr	r2, [r7, #12]
   31d2a:	18d3      	adds	r3, r2, r3
   31d2c:	1c0a      	adds	r2, r1, #0
   31d2e:	705a      	strb	r2, [r3, #1]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   31d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31d32:	3301      	adds	r3, #1
   31d34:	633b      	str	r3, [r7, #48]	; 0x30
   31d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31d38:	68ba      	ldr	r2, [r7, #8]
   31d3a:	18d3      	adds	r3, r2, r3
   31d3c:	781b      	ldrb	r3, [r3, #0]
   31d3e:	2b00      	cmp	r3, #0
   31d40:	d005      	beq.n	31d4e <http_client_send_request+0xc6>
   31d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31d44:	68ba      	ldr	r2, [r7, #8]
   31d46:	18d3      	adds	r3, r2, r3
   31d48:	781b      	ldrb	r3, [r3, #0]
   31d4a:	2b2f      	cmp	r3, #47	; 0x2f
   31d4c:	d1e5      	bne.n	31d1a <http_client_send_request+0x92>
	}
	module->host[j] = '\0';
   31d4e:	68fa      	ldr	r2, [r7, #12]
   31d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   31d52:	18d3      	adds	r3, r2, r3
   31d54:	3301      	adds	r3, #1
   31d56:	2200      	movs	r2, #0
   31d58:	701a      	strb	r2, [r3, #0]
	uri = url + i;
   31d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31d5c:	68ba      	ldr	r2, [r7, #8]
   31d5e:	18d3      	adds	r3, r2, r3
   31d60:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Checks the parameters. */
	if (strlen(module->host) == 0) {
   31d62:	68fb      	ldr	r3, [r7, #12]
   31d64:	3301      	adds	r3, #1
   31d66:	781b      	ldrb	r3, [r3, #0]
   31d68:	2b00      	cmp	r3, #0
   31d6a:	d102      	bne.n	31d72 <http_client_send_request+0xea>
		return -EINVAL;
   31d6c:	2316      	movs	r3, #22
   31d6e:	425b      	negs	r3, r3
   31d70:	e0ea      	b.n	31f48 <http_client_send_request+0x2c0>
	}

	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   31d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
   31d74:	0018      	movs	r0, r3
   31d76:	4b79      	ldr	r3, [pc, #484]	; (31f5c <http_client_send_request+0x2d4>)
   31d78:	4798      	blx	r3
   31d7a:	0003      	movs	r3, r0
   31d7c:	2b3f      	cmp	r3, #63	; 0x3f
   31d7e:	d902      	bls.n	31d86 <http_client_send_request+0xfe>
		return -ENAMETOOLONG;
   31d80:	235b      	movs	r3, #91	; 0x5b
   31d82:	425b      	negs	r3, r3
   31d84:	e0e0      	b.n	31f48 <http_client_send_request+0x2c0>
	}

	if (module->req.ext_header != NULL) {
   31d86:	68fb      	ldr	r3, [r7, #12]
   31d88:	22d4      	movs	r2, #212	; 0xd4
   31d8a:	589b      	ldr	r3, [r3, r2]
   31d8c:	2b00      	cmp	r3, #0
   31d8e:	d005      	beq.n	31d9c <http_client_send_request+0x114>
		free(module->req.ext_header);
   31d90:	68fb      	ldr	r3, [r7, #12]
   31d92:	22d4      	movs	r2, #212	; 0xd4
   31d94:	589b      	ldr	r3, [r3, r2]
   31d96:	0018      	movs	r0, r3
   31d98:	4b71      	ldr	r3, [pc, #452]	; (31f60 <http_client_send_request+0x2d8>)
   31d9a:	4798      	blx	r3
	}
	if (ext_header != NULL) {
   31d9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   31d9e:	2b00      	cmp	r3, #0
   31da0:	d010      	beq.n	31dc4 <http_client_send_request+0x13c>
		module->req.ext_header = strdup(ext_header);
   31da2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   31da4:	0018      	movs	r0, r3
   31da6:	4b6f      	ldr	r3, [pc, #444]	; (31f64 <http_client_send_request+0x2dc>)
   31da8:	4798      	blx	r3
   31daa:	0003      	movs	r3, r0
   31dac:	0019      	movs	r1, r3
   31dae:	68fb      	ldr	r3, [r7, #12]
   31db0:	22d4      	movs	r2, #212	; 0xd4
   31db2:	5099      	str	r1, [r3, r2]
		if (module->req.ext_header == NULL) {
   31db4:	68fb      	ldr	r3, [r7, #12]
   31db6:	22d4      	movs	r2, #212	; 0xd4
   31db8:	589b      	ldr	r3, [r3, r2]
   31dba:	2b00      	cmp	r3, #0
   31dbc:	d106      	bne.n	31dcc <http_client_send_request+0x144>
			return -ENOMEM;
   31dbe:	230c      	movs	r3, #12
   31dc0:	425b      	negs	r3, r3
   31dc2:	e0c1      	b.n	31f48 <http_client_send_request+0x2c0>
		}
	} else {
		module->req.ext_header = NULL;
   31dc4:	68fb      	ldr	r3, [r7, #12]
   31dc6:	22d4      	movs	r2, #212	; 0xd4
   31dc8:	2100      	movs	r1, #0
   31dca:	5099      	str	r1, [r3, r2]
	}

	module->sending = 0;
   31dcc:	68fb      	ldr	r3, [r7, #12]
   31dce:	2241      	movs	r2, #65	; 0x41
   31dd0:	5c99      	ldrb	r1, [r3, r2]
   31dd2:	2001      	movs	r0, #1
   31dd4:	4381      	bics	r1, r0
   31dd6:	5499      	strb	r1, [r3, r2]
	module->recved_size = 0;
   31dd8:	68fb      	ldr	r3, [r7, #12]
   31dda:	2200      	movs	r2, #0
   31ddc:	645a      	str	r2, [r3, #68]	; 0x44
	if (uri[0] == '/') {
   31dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
   31de0:	781b      	ldrb	r3, [r3, #0]
   31de2:	2b2f      	cmp	r3, #47	; 0x2f
   31de4:	d107      	bne.n	31df6 <http_client_send_request+0x16e>
		strcpy(module->req.uri, uri);
   31de6:	68fb      	ldr	r3, [r7, #12]
   31de8:	3370      	adds	r3, #112	; 0x70
   31dea:	6aba      	ldr	r2, [r7, #40]	; 0x28
   31dec:	0011      	movs	r1, r2
   31dee:	0018      	movs	r0, r3
   31df0:	4b5d      	ldr	r3, [pc, #372]	; (31f68 <http_client_send_request+0x2e0>)
   31df2:	4798      	blx	r3
   31df4:	e00f      	b.n	31e16 <http_client_send_request+0x18e>
		} else {
		module->req.uri[0] = '/';
   31df6:	68fb      	ldr	r3, [r7, #12]
   31df8:	2270      	movs	r2, #112	; 0x70
   31dfa:	212f      	movs	r1, #47	; 0x2f
   31dfc:	5499      	strb	r1, [r3, r2]
		if (uri[0] != 0) {
   31dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   31e00:	781b      	ldrb	r3, [r3, #0]
   31e02:	2b00      	cmp	r3, #0
   31e04:	d007      	beq.n	31e16 <http_client_send_request+0x18e>
			strcpy(module->req.uri + 1, uri);
   31e06:	68fb      	ldr	r3, [r7, #12]
   31e08:	3370      	adds	r3, #112	; 0x70
   31e0a:	3301      	adds	r3, #1
   31e0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   31e0e:	0011      	movs	r1, r2
   31e10:	0018      	movs	r0, r3
   31e12:	4b55      	ldr	r3, [pc, #340]	; (31f68 <http_client_send_request+0x2e0>)
   31e14:	4798      	blx	r3
		}
	}

	if (entity != NULL) {
   31e16:	683b      	ldr	r3, [r7, #0]
   31e18:	2b00      	cmp	r3, #0
   31e1a:	d007      	beq.n	31e2c <http_client_send_request+0x1a4>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   31e1c:	68fb      	ldr	r3, [r7, #12]
   31e1e:	33b0      	adds	r3, #176	; 0xb0
   31e20:	6839      	ldr	r1, [r7, #0]
   31e22:	2218      	movs	r2, #24
   31e24:	0018      	movs	r0, r3
   31e26:	4b51      	ldr	r3, [pc, #324]	; (31f6c <http_client_send_request+0x2e4>)
   31e28:	4798      	blx	r3
   31e2a:	e006      	b.n	31e3a <http_client_send_request+0x1b2>
		} else {
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   31e2c:	68fb      	ldr	r3, [r7, #12]
   31e2e:	33b0      	adds	r3, #176	; 0xb0
   31e30:	2218      	movs	r2, #24
   31e32:	2100      	movs	r1, #0
   31e34:	0018      	movs	r0, r3
   31e36:	4b4e      	ldr	r3, [pc, #312]	; (31f70 <http_client_send_request+0x2e8>)
   31e38:	4798      	blx	r3
	}

	module->req.method = method;
   31e3a:	68fb      	ldr	r3, [r7, #12]
   31e3c:	1dfa      	adds	r2, r7, #7
   31e3e:	21c8      	movs	r1, #200	; 0xc8
   31e40:	7812      	ldrb	r2, [r2, #0]
   31e42:	545a      	strb	r2, [r3, r1]
	
	switch (module->req.state) {
   31e44:	68fb      	ldr	r3, [r7, #12]
   31e46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   31e48:	2b01      	cmp	r3, #1
   31e4a:	d003      	beq.n	31e54 <http_client_send_request+0x1cc>
   31e4c:	d316      	bcc.n	31e7c <http_client_send_request+0x1f4>
   31e4e:	2b02      	cmp	r3, #2
   31e50:	d004      	beq.n	31e5c <http_client_send_request+0x1d4>
   31e52:	e074      	b.n	31f3e <http_client_send_request+0x2b6>
	case STATE_TRY_SOCK_CONNECT:
		if (!reconnect) {
   31e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31e56:	2b00      	cmp	r3, #0
   31e58:	d100      	bne.n	31e5c <http_client_send_request+0x1d4>
   31e5a:	e073      	b.n	31f44 <http_client_send_request+0x2bc>
			break; /* Currently try to connect to the same server. */
		}
	case STATE_SOCK_CONNECTED:
		if (!reconnect) {
   31e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31e5e:	2b00      	cmp	r3, #0
   31e60:	d107      	bne.n	31e72 <http_client_send_request+0x1ea>
			module->req.state = STATE_REQ_SEND_HEADER;
   31e62:	68fb      	ldr	r3, [r7, #12]
   31e64:	2203      	movs	r2, #3
   31e66:	66da      	str	r2, [r3, #108]	; 0x6c
			/* Send request immediately. */
			_http_client_request(module);
   31e68:	68fb      	ldr	r3, [r7, #12]
   31e6a:	0018      	movs	r0, r3
   31e6c:	4b41      	ldr	r3, [pc, #260]	; (31f74 <http_client_send_request+0x2ec>)
   31e6e:	4798      	blx	r3
			break;
   31e70:	e069      	b.n	31f46 <http_client_send_request+0x2be>
		} else {
			/* Request to another peer. Disconnect and try connect again. */
			_http_client_clear_conn(module, 0);
   31e72:	68fb      	ldr	r3, [r7, #12]
   31e74:	2100      	movs	r1, #0
   31e76:	0018      	movs	r0, r3
   31e78:	4b3f      	ldr	r3, [pc, #252]	; (31f78 <http_client_send_request+0x2f0>)
   31e7a:	4798      	blx	r3
		}
	case STATE_INIT:
		if (module->config.tls) {
   31e7c:	68fb      	ldr	r3, [r7, #12]
   31e7e:	2252      	movs	r2, #82	; 0x52
   31e80:	5c9b      	ldrb	r3, [r3, r2]
   31e82:	2b00      	cmp	r3, #0
   31e84:	d007      	beq.n	31e96 <http_client_send_request+0x20e>
			flag |= SOCKET_FLAGS_SSL;
   31e86:	2337      	movs	r3, #55	; 0x37
   31e88:	18fb      	adds	r3, r7, r3
   31e8a:	2237      	movs	r2, #55	; 0x37
   31e8c:	18ba      	adds	r2, r7, r2
   31e8e:	7812      	ldrb	r2, [r2, #0]
   31e90:	2101      	movs	r1, #1
   31e92:	430a      	orrs	r2, r1
   31e94:	701a      	strb	r2, [r3, #0]
		}
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   31e96:	2337      	movs	r3, #55	; 0x37
   31e98:	18fb      	adds	r3, r7, r3
   31e9a:	781b      	ldrb	r3, [r3, #0]
   31e9c:	001a      	movs	r2, r3
   31e9e:	2101      	movs	r1, #1
   31ea0:	2002      	movs	r0, #2
   31ea2:	4b36      	ldr	r3, [pc, #216]	; (31f7c <http_client_send_request+0x2f4>)
   31ea4:	4798      	blx	r3
   31ea6:	0003      	movs	r3, r0
   31ea8:	001a      	movs	r2, r3
   31eaa:	68fb      	ldr	r3, [r7, #12]
   31eac:	701a      	strb	r2, [r3, #0]
		if (module->sock >= 0) {
   31eae:	68fb      	ldr	r3, [r7, #12]
   31eb0:	781b      	ldrb	r3, [r3, #0]
   31eb2:	b25b      	sxtb	r3, r3
   31eb4:	2b00      	cmp	r3, #0
   31eb6:	db3f      	blt.n	31f38 <http_client_send_request+0x2b0>
			module_ref_inst[module->sock] = module;
   31eb8:	68fb      	ldr	r3, [r7, #12]
   31eba:	781b      	ldrb	r3, [r3, #0]
   31ebc:	b25b      	sxtb	r3, r3
   31ebe:	001a      	movs	r2, r3
   31ec0:	4b2f      	ldr	r3, [pc, #188]	; (31f80 <http_client_send_request+0x2f8>)
   31ec2:	0092      	lsls	r2, r2, #2
   31ec4:	68f9      	ldr	r1, [r7, #12]
   31ec6:	50d1      	str	r1, [r2, r3]
			if (_is_ip(module->host)) {
   31ec8:	68fb      	ldr	r3, [r7, #12]
   31eca:	3301      	adds	r3, #1
   31ecc:	0018      	movs	r0, r3
   31ece:	4b2d      	ldr	r3, [pc, #180]	; (31f84 <http_client_send_request+0x2fc>)
   31ed0:	4798      	blx	r3
   31ed2:	1e03      	subs	r3, r0, #0
   31ed4:	d027      	beq.n	31f26 <http_client_send_request+0x29e>
				addr_in.sin_family = AF_INET;
   31ed6:	2314      	movs	r3, #20
   31ed8:	18fb      	adds	r3, r7, r3
   31eda:	2202      	movs	r2, #2
   31edc:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   31ede:	68fb      	ldr	r3, [r7, #12]
   31ee0:	2250      	movs	r2, #80	; 0x50
   31ee2:	5a9b      	ldrh	r3, [r3, r2]
   31ee4:	021b      	lsls	r3, r3, #8
   31ee6:	b21a      	sxth	r2, r3
   31ee8:	68fb      	ldr	r3, [r7, #12]
   31eea:	2150      	movs	r1, #80	; 0x50
   31eec:	5a5b      	ldrh	r3, [r3, r1]
   31eee:	0a1b      	lsrs	r3, r3, #8
   31ef0:	b29b      	uxth	r3, r3
   31ef2:	b21b      	sxth	r3, r3
   31ef4:	4313      	orrs	r3, r2
   31ef6:	b21b      	sxth	r3, r3
   31ef8:	b29a      	uxth	r2, r3
   31efa:	2314      	movs	r3, #20
   31efc:	18fb      	adds	r3, r7, r3
   31efe:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   31f00:	68fb      	ldr	r3, [r7, #12]
   31f02:	3301      	adds	r3, #1
   31f04:	0018      	movs	r0, r3
   31f06:	4b20      	ldr	r3, [pc, #128]	; (31f88 <http_client_send_request+0x300>)
   31f08:	4798      	blx	r3
   31f0a:	0002      	movs	r2, r0
   31f0c:	2314      	movs	r3, #20
   31f0e:	18fb      	adds	r3, r7, r3
   31f10:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   31f12:	68fb      	ldr	r3, [r7, #12]
   31f14:	781b      	ldrb	r3, [r3, #0]
   31f16:	b25b      	sxtb	r3, r3
   31f18:	2214      	movs	r2, #20
   31f1a:	18b9      	adds	r1, r7, r2
   31f1c:	2210      	movs	r2, #16
   31f1e:	0018      	movs	r0, r3
   31f20:	4b1a      	ldr	r3, [pc, #104]	; (31f8c <http_client_send_request+0x304>)
   31f22:	4798      	blx	r3
   31f24:	e004      	b.n	31f30 <http_client_send_request+0x2a8>
			} else {
				gethostbyname((uint8*)module->host);
   31f26:	68fb      	ldr	r3, [r7, #12]
   31f28:	3301      	adds	r3, #1
   31f2a:	0018      	movs	r0, r3
   31f2c:	4b18      	ldr	r3, [pc, #96]	; (31f90 <http_client_send_request+0x308>)
   31f2e:	4798      	blx	r3
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
   31f30:	68fb      	ldr	r3, [r7, #12]
   31f32:	2201      	movs	r2, #1
   31f34:	66da      	str	r2, [r3, #108]	; 0x6c
		} else {
			return -ENOSPC;
		}
		break;
   31f36:	e006      	b.n	31f46 <http_client_send_request+0x2be>
			return -ENOSPC;
   31f38:	231c      	movs	r3, #28
   31f3a:	425b      	negs	r3, r3
   31f3c:	e004      	b.n	31f48 <http_client_send_request+0x2c0>
	default:
		/* STATE_TRY_REQ */
		/* STATE_WAIT_RESP */
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
   31f3e:	230b      	movs	r3, #11
   31f40:	425b      	negs	r3, r3
   31f42:	e001      	b.n	31f48 <http_client_send_request+0x2c0>
			break; /* Currently try to connect to the same server. */
   31f44:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
   31f46:	2300      	movs	r3, #0
}
   31f48:	0018      	movs	r0, r3
   31f4a:	46bd      	mov	sp, r7
   31f4c:	b00e      	add	sp, #56	; 0x38
   31f4e:	bdb0      	pop	{r4, r5, r7, pc}
   31f50:	0003a9dc 	.word	0x0003a9dc
   31f54:	00035acd 	.word	0x00035acd
   31f58:	0003a9e4 	.word	0x0003a9e4
   31f5c:	00035abf 	.word	0x00035abf
   31f60:	000356bd 	.word	0x000356bd
   31f64:	00035a85 	.word	0x00035a85
   31f68:	00035a73 	.word	0x00035a73
   31f6c:	000356d1 	.word	0x000356d1
   31f70:	00035707 	.word	0x00035707
   31f74:	000320e9 	.word	0x000320e9
   31f78:	00031f95 	.word	0x00031f95
   31f7c:	000262a5 	.word	0x000262a5
   31f80:	20004330 	.word	0x20004330
   31f84:	00031bf1 	.word	0x00031bf1
   31f88:	000269f1 	.word	0x000269f1
   31f8c:	000264b9 	.word	0x000264b9
   31f90:	00026af9 	.word	0x00026af9

00031f94 <_http_client_clear_conn>:

	return 0;
}

void _http_client_clear_conn(struct http_client_module *const module, int reason)
{
   31f94:	b580      	push	{r7, lr}
   31f96:	b086      	sub	sp, #24
   31f98:	af00      	add	r7, sp, #0
   31f9a:	6078      	str	r0, [r7, #4]
   31f9c:	6039      	str	r1, [r7, #0]
	union http_client_data data;

	if (module->req.entity.close) {
   31f9e:	687b      	ldr	r3, [r7, #4]
   31fa0:	22c0      	movs	r2, #192	; 0xc0
   31fa2:	589b      	ldr	r3, [r3, r2]
   31fa4:	2b00      	cmp	r3, #0
   31fa6:	d007      	beq.n	31fb8 <_http_client_clear_conn+0x24>
		module->req.entity.close(module->req.entity.priv_data);
   31fa8:	687b      	ldr	r3, [r7, #4]
   31faa:	22c0      	movs	r2, #192	; 0xc0
   31fac:	589b      	ldr	r3, [r3, r2]
   31fae:	687a      	ldr	r2, [r7, #4]
   31fb0:	21c4      	movs	r1, #196	; 0xc4
   31fb2:	5852      	ldr	r2, [r2, r1]
   31fb4:	0010      	movs	r0, r2
   31fb6:	4798      	blx	r3
	}

	memset(&module->req.entity, 0, sizeof(struct http_entity));
   31fb8:	687b      	ldr	r3, [r7, #4]
   31fba:	33b0      	adds	r3, #176	; 0xb0
   31fbc:	2218      	movs	r2, #24
   31fbe:	2100      	movs	r1, #0
   31fc0:	0018      	movs	r0, r3
   31fc2:	4b24      	ldr	r3, [pc, #144]	; (32054 <_http_client_clear_conn+0xc0>)
   31fc4:	4798      	blx	r3

	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   31fc6:	687b      	ldr	r3, [r7, #4]
   31fc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   31fca:	2b00      	cmp	r3, #0
   31fcc:	d005      	beq.n	31fda <_http_client_clear_conn+0x46>
		close(module->sock);
   31fce:	687b      	ldr	r3, [r7, #4]
   31fd0:	781b      	ldrb	r3, [r3, #0]
   31fd2:	b25b      	sxtb	r3, r3
   31fd4:	0018      	movs	r0, r3
   31fd6:	4b20      	ldr	r3, [pc, #128]	; (32058 <_http_client_clear_conn+0xc4>)
   31fd8:	4798      	blx	r3
	}

	module_ref_inst[module->sock] = NULL;
   31fda:	687b      	ldr	r3, [r7, #4]
   31fdc:	781b      	ldrb	r3, [r3, #0]
   31fde:	b25b      	sxtb	r3, r3
   31fe0:	001a      	movs	r2, r3
   31fe2:	4b1e      	ldr	r3, [pc, #120]	; (3205c <_http_client_clear_conn+0xc8>)
   31fe4:	0092      	lsls	r2, r2, #2
   31fe6:	2100      	movs	r1, #0
   31fe8:	50d1      	str	r1, [r2, r3]
	memset(&module->req, 0, sizeof(struct http_client_req));
   31fea:	687b      	ldr	r3, [r7, #4]
   31fec:	336c      	adds	r3, #108	; 0x6c
   31fee:	226c      	movs	r2, #108	; 0x6c
   31ff0:	2100      	movs	r1, #0
   31ff2:	0018      	movs	r0, r3
   31ff4:	4b17      	ldr	r3, [pc, #92]	; (32054 <_http_client_clear_conn+0xc0>)
   31ff6:	4798      	blx	r3
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   31ff8:	687b      	ldr	r3, [r7, #4]
   31ffa:	33d8      	adds	r3, #216	; 0xd8
   31ffc:	2210      	movs	r2, #16
   31ffe:	2100      	movs	r1, #0
   32000:	0018      	movs	r0, r3
   32002:	4b14      	ldr	r3, [pc, #80]	; (32054 <_http_client_clear_conn+0xc0>)
   32004:	4798      	blx	r3
	module->req.state = STATE_INIT;
   32006:	687b      	ldr	r3, [r7, #4]
   32008:	2200      	movs	r2, #0
   3200a:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   3200c:	687b      	ldr	r3, [r7, #4]
   3200e:	22d8      	movs	r2, #216	; 0xd8
   32010:	2100      	movs	r1, #0
   32012:	5099      	str	r1, [r3, r2]

	module->sending = 0;
   32014:	687b      	ldr	r3, [r7, #4]
   32016:	2241      	movs	r2, #65	; 0x41
   32018:	5c99      	ldrb	r1, [r3, r2]
   3201a:	2001      	movs	r0, #1
   3201c:	4381      	bics	r1, r0
   3201e:	5499      	strb	r1, [r3, r2]
	module->permanent = 0;
   32020:	687b      	ldr	r3, [r7, #4]
   32022:	2241      	movs	r2, #65	; 0x41
   32024:	5c99      	ldrb	r1, [r3, r2]
   32026:	2002      	movs	r0, #2
   32028:	4381      	bics	r1, r0
   3202a:	5499      	strb	r1, [r3, r2]
	data.disconnected.reason = reason;
   3202c:	230c      	movs	r3, #12
   3202e:	18fb      	adds	r3, r7, r3
   32030:	683a      	ldr	r2, [r7, #0]
   32032:	601a      	str	r2, [r3, #0]
	if (module->cb) {
   32034:	687b      	ldr	r3, [r7, #4]
   32036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32038:	2b00      	cmp	r3, #0
   3203a:	d006      	beq.n	3204a <_http_client_clear_conn+0xb6>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   3203c:	687b      	ldr	r3, [r7, #4]
   3203e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32040:	220c      	movs	r2, #12
   32042:	18ba      	adds	r2, r7, r2
   32044:	6878      	ldr	r0, [r7, #4]
   32046:	2104      	movs	r1, #4
   32048:	4798      	blx	r3
	}
}
   3204a:	46c0      	nop			; (mov r8, r8)
   3204c:	46bd      	mov	sp, r7
   3204e:	b006      	add	sp, #24
   32050:	bd80      	pop	{r7, pc}
   32052:	46c0      	nop			; (mov r8, r8)
   32054:	00035707 	.word	0x00035707
   32058:	000268b1 	.word	0x000268b1
   3205c:	20004330 	.word	0x20004330

00032060 <_http_client_send_wait>:

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   32060:	b590      	push	{r4, r7, lr}
   32062:	b087      	sub	sp, #28
   32064:	af00      	add	r7, sp, #0
   32066:	60f8      	str	r0, [r7, #12]
   32068:	60b9      	str	r1, [r7, #8]
   3206a:	607a      	str	r2, [r7, #4]
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
   3206c:	68fb      	ldr	r3, [r7, #12]
   3206e:	617b      	str	r3, [r7, #20]
	
	module->sending = 1;
   32070:	697b      	ldr	r3, [r7, #20]
   32072:	2241      	movs	r2, #65	; 0x41
   32074:	5c99      	ldrb	r1, [r3, r2]
   32076:	2001      	movs	r0, #1
   32078:	4301      	orrs	r1, r0
   3207a:	5499      	strb	r1, [r3, r2]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   3207c:	697b      	ldr	r3, [r7, #20]
   3207e:	2000      	movs	r0, #0
   32080:	5618      	ldrsb	r0, [r3, r0]
   32082:	687b      	ldr	r3, [r7, #4]
   32084:	b29a      	uxth	r2, r3
   32086:	68b9      	ldr	r1, [r7, #8]
   32088:	2300      	movs	r3, #0
   3208a:	4c14      	ldr	r4, [pc, #80]	; (320dc <_http_client_send_wait+0x7c>)
   3208c:	47a0      	blx	r4
   3208e:	0003      	movs	r3, r0
   32090:	613b      	str	r3, [r7, #16]
   32092:	693b      	ldr	r3, [r7, #16]
   32094:	2b00      	cmp	r3, #0
   32096:	da0f      	bge.n	320b8 <_http_client_send_wait+0x58>
		module->sending = 0;
   32098:	697b      	ldr	r3, [r7, #20]
   3209a:	2241      	movs	r2, #65	; 0x41
   3209c:	5c99      	ldrb	r1, [r3, r2]
   3209e:	2001      	movs	r0, #1
   320a0:	4381      	bics	r1, r0
   320a2:	5499      	strb	r1, [r3, r2]
		return result;
   320a4:	693b      	ldr	r3, [r7, #16]
   320a6:	e014      	b.n	320d2 <_http_client_send_wait+0x72>
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
		m2m_wifi_handle_events(NULL);
   320a8:	2000      	movs	r0, #0
   320aa:	4b0d      	ldr	r3, [pc, #52]	; (320e0 <_http_client_send_wait+0x80>)
   320ac:	4798      	blx	r3
		sw_timer_task(module->config.timer_inst);
   320ae:	697b      	ldr	r3, [r7, #20]
   320b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   320b2:	0018      	movs	r0, r3
   320b4:	4b0b      	ldr	r3, [pc, #44]	; (320e4 <_http_client_send_wait+0x84>)
   320b6:	4798      	blx	r3
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   320b8:	697b      	ldr	r3, [r7, #20]
   320ba:	2241      	movs	r2, #65	; 0x41
   320bc:	5c9b      	ldrb	r3, [r3, r2]
   320be:	2201      	movs	r2, #1
   320c0:	4013      	ands	r3, r2
   320c2:	b2db      	uxtb	r3, r3
   320c4:	2b00      	cmp	r3, #0
   320c6:	d003      	beq.n	320d0 <_http_client_send_wait+0x70>
   320c8:	697b      	ldr	r3, [r7, #20]
   320ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   320cc:	2b02      	cmp	r3, #2
   320ce:	d8eb      	bhi.n	320a8 <_http_client_send_wait+0x48>
	}

	return 0;
   320d0:	2300      	movs	r3, #0
}
   320d2:	0018      	movs	r0, r3
   320d4:	46bd      	mov	sp, r7
   320d6:	b007      	add	sp, #28
   320d8:	bd90      	pop	{r4, r7, pc}
   320da:	46c0      	nop			; (mov r8, r8)
   320dc:	000265cd 	.word	0x000265cd
   320e0:	00022c79 	.word	0x00022c79
   320e4:	0003336d 	.word	0x0003336d

000320e8 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   320e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   320ea:	46c6      	mov	lr, r8
   320ec:	b500      	push	{lr}
   320ee:	b0a0      	sub	sp, #128	; 0x80
   320f0:	af02      	add	r7, sp, #8
   320f2:	61f8      	str	r0, [r7, #28]
   320f4:	4668      	mov	r0, sp
   320f6:	61b8      	str	r0, [r7, #24]
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   320f8:	2318      	movs	r3, #24
   320fa:	2218      	movs	r2, #24
   320fc:	18ba      	adds	r2, r7, r2
   320fe:	18d0      	adds	r0, r2, r3
   32100:	4bbd      	ldr	r3, [pc, #756]	; (323f8 <_http_client_request+0x310>)
   32102:	469c      	mov	ip, r3
   32104:	4663      	mov	r3, ip
   32106:	cb16      	ldmia	r3!, {r1, r2, r4}
   32108:	c016      	stmia	r0!, {r1, r2, r4}
   3210a:	469c      	mov	ip, r3
   3210c:	4663      	mov	r3, ip
   3210e:	681b      	ldr	r3, [r3, #0]
   32110:	469c      	mov	ip, r3
   32112:	4663      	mov	r3, ip
   32114:	6003      	str	r3, [r0, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   32116:	69f8      	ldr	r0, [r7, #28]
   32118:	6e40      	ldr	r0, [r0, #100]	; 0x64
   3211a:	4684      	mov	ip, r0
   3211c:	2301      	movs	r3, #1
   3211e:	425b      	negs	r3, r3
   32120:	4698      	mov	r8, r3
   32122:	44c4      	add	ip, r8
   32124:	4663      	mov	r3, ip
   32126:	66fb      	str	r3, [r7, #108]	; 0x6c
   32128:	6038      	str	r0, [r7, #0]
   3212a:	2300      	movs	r3, #0
   3212c:	607b      	str	r3, [r7, #4]
   3212e:	6839      	ldr	r1, [r7, #0]
   32130:	687a      	ldr	r2, [r7, #4]
   32132:	000b      	movs	r3, r1
   32134:	0f5b      	lsrs	r3, r3, #29
   32136:	469c      	mov	ip, r3
   32138:	0013      	movs	r3, r2
   3213a:	00db      	lsls	r3, r3, #3
   3213c:	617b      	str	r3, [r7, #20]
   3213e:	4663      	mov	r3, ip
   32140:	697c      	ldr	r4, [r7, #20]
   32142:	431c      	orrs	r4, r3
   32144:	617c      	str	r4, [r7, #20]
   32146:	000b      	movs	r3, r1
   32148:	00db      	lsls	r3, r3, #3
   3214a:	613b      	str	r3, [r7, #16]
   3214c:	0005      	movs	r5, r0
   3214e:	2200      	movs	r2, #0
   32150:	0016      	movs	r6, r2
   32152:	0f6a      	lsrs	r2, r5, #29
   32154:	00f3      	lsls	r3, r6, #3
   32156:	60fb      	str	r3, [r7, #12]
   32158:	68fb      	ldr	r3, [r7, #12]
   3215a:	4313      	orrs	r3, r2
   3215c:	60fb      	str	r3, [r7, #12]
   3215e:	00eb      	lsls	r3, r5, #3
   32160:	60bb      	str	r3, [r7, #8]
   32162:	1dc3      	adds	r3, r0, #7
   32164:	08db      	lsrs	r3, r3, #3
   32166:	00db      	lsls	r3, r3, #3
   32168:	466a      	mov	r2, sp
   3216a:	1ad3      	subs	r3, r2, r3
   3216c:	469d      	mov	sp, r3
   3216e:	ab02      	add	r3, sp, #8
   32170:	3300      	adds	r3, #0
   32172:	66bb      	str	r3, [r7, #104]	; 0x68

	if (module == NULL) {
   32174:	69fb      	ldr	r3, [r7, #28]
   32176:	2b00      	cmp	r3, #0
   32178:	d100      	bne.n	3217c <_http_client_request+0x94>
   3217a:	e346      	b.n	3280a <_http_client_request+0x722>
		return;
	}

	if (module->sending != 0) {
   3217c:	69fb      	ldr	r3, [r7, #28]
   3217e:	2241      	movs	r2, #65	; 0x41
   32180:	5c9b      	ldrb	r3, [r3, r2]
   32182:	2201      	movs	r2, #1
   32184:	4013      	ands	r3, r2
   32186:	b2db      	uxtb	r3, r3
   32188:	2b00      	cmp	r3, #0
   3218a:	d000      	beq.n	3218e <_http_client_request+0xa6>
   3218c:	e33f      	b.n	3280e <_http_client_request+0x726>
		/* Device is busy. */
		return;
	}

	entity = &module->req.entity;
   3218e:	69fb      	ldr	r3, [r7, #28]
   32190:	33b0      	adds	r3, #176	; 0xb0
   32192:	667b      	str	r3, [r7, #100]	; 0x64

	switch (module->req.state) {
   32194:	69fb      	ldr	r3, [r7, #28]
   32196:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   32198:	2b03      	cmp	r3, #3
   3219a:	d003      	beq.n	321a4 <_http_client_request+0xbc>
   3219c:	2b04      	cmp	r3, #4
   3219e:	d100      	bne.n	321a2 <_http_client_request+0xba>
   321a0:	e1b3      	b.n	3250a <_http_client_request+0x422>
		}

		break;
	default:
		/* Invalid status. */
		break;
   321a2:	e32f      	b.n	32804 <_http_client_request+0x71c>
		module->req.content_length = 0;
   321a4:	69fb      	ldr	r3, [r7, #28]
   321a6:	22cc      	movs	r2, #204	; 0xcc
   321a8:	2100      	movs	r1, #0
   321aa:	5099      	str	r1, [r3, r2]
		module->req.sent_length = 0;
   321ac:	69fb      	ldr	r3, [r7, #28]
   321ae:	22d0      	movs	r2, #208	; 0xd0
   321b0:	2100      	movs	r1, #0
   321b2:	5099      	str	r1, [r3, r2]
		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   321b4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   321b6:	69fb      	ldr	r3, [r7, #28]
   321b8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   321ba:	4c90      	ldr	r4, [pc, #576]	; (323fc <_http_client_request+0x314>)
   321bc:	2334      	movs	r3, #52	; 0x34
   321be:	2018      	movs	r0, #24
   321c0:	1838      	adds	r0, r7, r0
   321c2:	18c0      	adds	r0, r0, r3
   321c4:	69fb      	ldr	r3, [r7, #28]
   321c6:	9300      	str	r3, [sp, #0]
   321c8:	0023      	movs	r3, r4
   321ca:	4c8d      	ldr	r4, [pc, #564]	; (32400 <_http_client_request+0x318>)
   321cc:	47a0      	blx	r4
		if (module->req.method == HTTP_METHOD_GET) {
   321ce:	69fb      	ldr	r3, [r7, #28]
   321d0:	22c8      	movs	r2, #200	; 0xc8
   321d2:	5c9b      	ldrb	r3, [r3, r2]
   321d4:	2b01      	cmp	r3, #1
   321d6:	d10a      	bne.n	321ee <_http_client_request+0x106>
			stream_writer_send_buffer(&writer, "GET ", 4);
   321d8:	498a      	ldr	r1, [pc, #552]	; (32404 <_http_client_request+0x31c>)
   321da:	2334      	movs	r3, #52	; 0x34
   321dc:	2218      	movs	r2, #24
   321de:	4694      	mov	ip, r2
   321e0:	44bc      	add	ip, r7
   321e2:	4463      	add	r3, ip
   321e4:	2204      	movs	r2, #4
   321e6:	0018      	movs	r0, r3
   321e8:	4b87      	ldr	r3, [pc, #540]	; (32408 <_http_client_request+0x320>)
   321ea:	4798      	blx	r3
   321ec:	e04e      	b.n	3228c <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_POST) {
   321ee:	69fb      	ldr	r3, [r7, #28]
   321f0:	22c8      	movs	r2, #200	; 0xc8
   321f2:	5c9b      	ldrb	r3, [r3, r2]
   321f4:	2b02      	cmp	r3, #2
   321f6:	d10a      	bne.n	3220e <_http_client_request+0x126>
			stream_writer_send_buffer(&writer, "POST ", 5);
   321f8:	4984      	ldr	r1, [pc, #528]	; (3240c <_http_client_request+0x324>)
   321fa:	2334      	movs	r3, #52	; 0x34
   321fc:	2218      	movs	r2, #24
   321fe:	4694      	mov	ip, r2
   32200:	44bc      	add	ip, r7
   32202:	4463      	add	r3, ip
   32204:	2205      	movs	r2, #5
   32206:	0018      	movs	r0, r3
   32208:	4b7f      	ldr	r3, [pc, #508]	; (32408 <_http_client_request+0x320>)
   3220a:	4798      	blx	r3
   3220c:	e03e      	b.n	3228c <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   3220e:	69fb      	ldr	r3, [r7, #28]
   32210:	22c8      	movs	r2, #200	; 0xc8
   32212:	5c9b      	ldrb	r3, [r3, r2]
   32214:	2b03      	cmp	r3, #3
   32216:	d10a      	bne.n	3222e <_http_client_request+0x146>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   32218:	497d      	ldr	r1, [pc, #500]	; (32410 <_http_client_request+0x328>)
   3221a:	2334      	movs	r3, #52	; 0x34
   3221c:	2218      	movs	r2, #24
   3221e:	4694      	mov	ip, r2
   32220:	44bc      	add	ip, r7
   32222:	4463      	add	r3, ip
   32224:	2207      	movs	r2, #7
   32226:	0018      	movs	r0, r3
   32228:	4b77      	ldr	r3, [pc, #476]	; (32408 <_http_client_request+0x320>)
   3222a:	4798      	blx	r3
   3222c:	e02e      	b.n	3228c <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_PUT) {
   3222e:	69fb      	ldr	r3, [r7, #28]
   32230:	22c8      	movs	r2, #200	; 0xc8
   32232:	5c9b      	ldrb	r3, [r3, r2]
   32234:	2b04      	cmp	r3, #4
   32236:	d10a      	bne.n	3224e <_http_client_request+0x166>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   32238:	4976      	ldr	r1, [pc, #472]	; (32414 <_http_client_request+0x32c>)
   3223a:	2334      	movs	r3, #52	; 0x34
   3223c:	2218      	movs	r2, #24
   3223e:	4694      	mov	ip, r2
   32240:	44bc      	add	ip, r7
   32242:	4463      	add	r3, ip
   32244:	2204      	movs	r2, #4
   32246:	0018      	movs	r0, r3
   32248:	4b6f      	ldr	r3, [pc, #444]	; (32408 <_http_client_request+0x320>)
   3224a:	4798      	blx	r3
   3224c:	e01e      	b.n	3228c <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   3224e:	69fb      	ldr	r3, [r7, #28]
   32250:	22c8      	movs	r2, #200	; 0xc8
   32252:	5c9b      	ldrb	r3, [r3, r2]
   32254:	2b05      	cmp	r3, #5
   32256:	d10a      	bne.n	3226e <_http_client_request+0x186>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   32258:	496f      	ldr	r1, [pc, #444]	; (32418 <_http_client_request+0x330>)
   3225a:	2334      	movs	r3, #52	; 0x34
   3225c:	2218      	movs	r2, #24
   3225e:	4694      	mov	ip, r2
   32260:	44bc      	add	ip, r7
   32262:	4463      	add	r3, ip
   32264:	2208      	movs	r2, #8
   32266:	0018      	movs	r0, r3
   32268:	4b67      	ldr	r3, [pc, #412]	; (32408 <_http_client_request+0x320>)
   3226a:	4798      	blx	r3
   3226c:	e00e      	b.n	3228c <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   3226e:	69fb      	ldr	r3, [r7, #28]
   32270:	22c8      	movs	r2, #200	; 0xc8
   32272:	5c9b      	ldrb	r3, [r3, r2]
   32274:	2b06      	cmp	r3, #6
   32276:	d109      	bne.n	3228c <_http_client_request+0x1a4>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   32278:	4968      	ldr	r1, [pc, #416]	; (3241c <_http_client_request+0x334>)
   3227a:	2334      	movs	r3, #52	; 0x34
   3227c:	2218      	movs	r2, #24
   3227e:	4694      	mov	ip, r2
   32280:	44bc      	add	ip, r7
   32282:	4463      	add	r3, ip
   32284:	2205      	movs	r2, #5
   32286:	0018      	movs	r0, r3
   32288:	4b5f      	ldr	r3, [pc, #380]	; (32408 <_http_client_request+0x320>)
   3228a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   3228c:	69fb      	ldr	r3, [r7, #28]
   3228e:	3370      	adds	r3, #112	; 0x70
   32290:	001c      	movs	r4, r3
   32292:	69fb      	ldr	r3, [r7, #28]
   32294:	3370      	adds	r3, #112	; 0x70
   32296:	0018      	movs	r0, r3
   32298:	4b61      	ldr	r3, [pc, #388]	; (32420 <_http_client_request+0x338>)
   3229a:	4798      	blx	r3
   3229c:	0002      	movs	r2, r0
   3229e:	2334      	movs	r3, #52	; 0x34
   322a0:	2118      	movs	r1, #24
   322a2:	468c      	mov	ip, r1
   322a4:	44bc      	add	ip, r7
   322a6:	4463      	add	r3, ip
   322a8:	0021      	movs	r1, r4
   322aa:	0018      	movs	r0, r3
   322ac:	4b56      	ldr	r3, [pc, #344]	; (32408 <_http_client_request+0x320>)
   322ae:	4798      	blx	r3
		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   322b0:	495c      	ldr	r1, [pc, #368]	; (32424 <_http_client_request+0x33c>)
   322b2:	2334      	movs	r3, #52	; 0x34
   322b4:	2218      	movs	r2, #24
   322b6:	4694      	mov	ip, r2
   322b8:	44bc      	add	ip, r7
   322ba:	4463      	add	r3, ip
   322bc:	220b      	movs	r2, #11
   322be:	0018      	movs	r0, r3
   322c0:	4b51      	ldr	r3, [pc, #324]	; (32408 <_http_client_request+0x320>)
   322c2:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   322c4:	4958      	ldr	r1, [pc, #352]	; (32428 <_http_client_request+0x340>)
   322c6:	2334      	movs	r3, #52	; 0x34
   322c8:	2218      	movs	r2, #24
   322ca:	4694      	mov	ip, r2
   322cc:	44bc      	add	ip, r7
   322ce:	4463      	add	r3, ip
   322d0:	220c      	movs	r2, #12
   322d2:	0018      	movs	r0, r3
   322d4:	4b4c      	ldr	r3, [pc, #304]	; (32408 <_http_client_request+0x320>)
   322d6:	4798      	blx	r3
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   322d8:	69fb      	ldr	r3, [r7, #28]
   322da:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   322dc:	69fb      	ldr	r3, [r7, #28]
   322de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   322e0:	0018      	movs	r0, r3
   322e2:	4b4f      	ldr	r3, [pc, #316]	; (32420 <_http_client_request+0x338>)
   322e4:	4798      	blx	r3
   322e6:	0002      	movs	r2, r0
   322e8:	2334      	movs	r3, #52	; 0x34
   322ea:	2118      	movs	r1, #24
   322ec:	468c      	mov	ip, r1
   322ee:	44bc      	add	ip, r7
   322f0:	4463      	add	r3, ip
   322f2:	0021      	movs	r1, r4
   322f4:	0018      	movs	r0, r3
   322f6:	4b44      	ldr	r3, [pc, #272]	; (32408 <_http_client_request+0x320>)
   322f8:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   322fa:	494c      	ldr	r1, [pc, #304]	; (3242c <_http_client_request+0x344>)
   322fc:	2334      	movs	r3, #52	; 0x34
   322fe:	2218      	movs	r2, #24
   32300:	4694      	mov	ip, r2
   32302:	44bc      	add	ip, r7
   32304:	4463      	add	r3, ip
   32306:	2202      	movs	r2, #2
   32308:	0018      	movs	r0, r3
   3230a:	4b3f      	ldr	r3, [pc, #252]	; (32408 <_http_client_request+0x320>)
   3230c:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   3230e:	4948      	ldr	r1, [pc, #288]	; (32430 <_http_client_request+0x348>)
   32310:	2334      	movs	r3, #52	; 0x34
   32312:	2218      	movs	r2, #24
   32314:	4694      	mov	ip, r2
   32316:	44bc      	add	ip, r7
   32318:	4463      	add	r3, ip
   3231a:	2206      	movs	r2, #6
   3231c:	0018      	movs	r0, r3
   3231e:	4b3a      	ldr	r3, [pc, #232]	; (32408 <_http_client_request+0x320>)
   32320:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   32322:	69fb      	ldr	r3, [r7, #28]
   32324:	1c5c      	adds	r4, r3, #1
   32326:	69fb      	ldr	r3, [r7, #28]
   32328:	3301      	adds	r3, #1
   3232a:	0018      	movs	r0, r3
   3232c:	4b3c      	ldr	r3, [pc, #240]	; (32420 <_http_client_request+0x338>)
   3232e:	4798      	blx	r3
   32330:	0002      	movs	r2, r0
   32332:	2334      	movs	r3, #52	; 0x34
   32334:	2118      	movs	r1, #24
   32336:	468c      	mov	ip, r1
   32338:	44bc      	add	ip, r7
   3233a:	4463      	add	r3, ip
   3233c:	0021      	movs	r1, r4
   3233e:	0018      	movs	r0, r3
   32340:	4b31      	ldr	r3, [pc, #196]	; (32408 <_http_client_request+0x320>)
   32342:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   32344:	4939      	ldr	r1, [pc, #228]	; (3242c <_http_client_request+0x344>)
   32346:	2334      	movs	r3, #52	; 0x34
   32348:	2218      	movs	r2, #24
   3234a:	4694      	mov	ip, r2
   3234c:	44bc      	add	ip, r7
   3234e:	4463      	add	r3, ip
   32350:	2202      	movs	r2, #2
   32352:	0018      	movs	r0, r3
   32354:	4b2c      	ldr	r3, [pc, #176]	; (32408 <_http_client_request+0x320>)
   32356:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   32358:	4936      	ldr	r1, [pc, #216]	; (32434 <_http_client_request+0x34c>)
   3235a:	2334      	movs	r3, #52	; 0x34
   3235c:	2218      	movs	r2, #24
   3235e:	4694      	mov	ip, r2
   32360:	44bc      	add	ip, r7
   32362:	4463      	add	r3, ip
   32364:	2218      	movs	r2, #24
   32366:	0018      	movs	r0, r3
   32368:	4b27      	ldr	r3, [pc, #156]	; (32408 <_http_client_request+0x320>)
   3236a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   3236c:	4932      	ldr	r1, [pc, #200]	; (32438 <_http_client_request+0x350>)
   3236e:	2334      	movs	r3, #52	; 0x34
   32370:	2218      	movs	r2, #24
   32372:	4694      	mov	ip, r2
   32374:	44bc      	add	ip, r7
   32376:	4463      	add	r3, ip
   32378:	2213      	movs	r2, #19
   3237a:	0018      	movs	r0, r3
   3237c:	4b22      	ldr	r3, [pc, #136]	; (32408 <_http_client_request+0x320>)
   3237e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   32380:	492e      	ldr	r1, [pc, #184]	; (3243c <_http_client_request+0x354>)
   32382:	2334      	movs	r3, #52	; 0x34
   32384:	2218      	movs	r2, #24
   32386:	4694      	mov	ip, r2
   32388:	44bc      	add	ip, r7
   3238a:	4463      	add	r3, ip
   3238c:	2217      	movs	r2, #23
   3238e:	0018      	movs	r0, r3
   32390:	4b1d      	ldr	r3, [pc, #116]	; (32408 <_http_client_request+0x320>)
   32392:	4798      	blx	r3
		if (entity->read != NULL) {
   32394:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   32396:	68db      	ldr	r3, [r3, #12]
   32398:	2b00      	cmp	r3, #0
   3239a:	d100      	bne.n	3239e <_http_client_request+0x2b6>
   3239c:	e088      	b.n	324b0 <_http_client_request+0x3c8>
			if (entity->is_chunked) {
   3239e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   323a0:	781b      	ldrb	r3, [r3, #0]
   323a2:	2b00      	cmp	r3, #0
   323a4:	d00f      	beq.n	323c6 <_http_client_request+0x2de>
				module->req.content_length = -1;
   323a6:	69fb      	ldr	r3, [r7, #28]
   323a8:	21cc      	movs	r1, #204	; 0xcc
   323aa:	2201      	movs	r2, #1
   323ac:	4252      	negs	r2, r2
   323ae:	505a      	str	r2, [r3, r1]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   323b0:	4923      	ldr	r1, [pc, #140]	; (32440 <_http_client_request+0x358>)
   323b2:	2334      	movs	r3, #52	; 0x34
   323b4:	2218      	movs	r2, #24
   323b6:	4694      	mov	ip, r2
   323b8:	44bc      	add	ip, r7
   323ba:	4463      	add	r3, ip
   323bc:	221c      	movs	r2, #28
   323be:	0018      	movs	r0, r3
   323c0:	4b11      	ldr	r3, [pc, #68]	; (32408 <_http_client_request+0x320>)
   323c2:	4798      	blx	r3
   323c4:	e074      	b.n	324b0 <_http_client_request+0x3c8>
			} else if(entity->get_contents_length) {
   323c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   323c8:	689b      	ldr	r3, [r3, #8]
   323ca:	2b00      	cmp	r3, #0
   323cc:	d070      	beq.n	324b0 <_http_client_request+0x3c8>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   323ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   323d0:	689a      	ldr	r2, [r3, #8]
   323d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   323d4:	695b      	ldr	r3, [r3, #20]
   323d6:	0018      	movs	r0, r3
   323d8:	4790      	blx	r2
   323da:	0001      	movs	r1, r0
   323dc:	69fb      	ldr	r3, [r7, #28]
   323de:	22cc      	movs	r2, #204	; 0xcc
   323e0:	5099      	str	r1, [r3, r2]
				if (module->req.content_length < 0) {
   323e2:	69fb      	ldr	r3, [r7, #28]
   323e4:	22cc      	movs	r2, #204	; 0xcc
   323e6:	589b      	ldr	r3, [r3, r2]
   323e8:	2b00      	cmp	r3, #0
   323ea:	da2b      	bge.n	32444 <_http_client_request+0x35c>
					module->req.content_length = 0;
   323ec:	69fb      	ldr	r3, [r7, #28]
   323ee:	22cc      	movs	r2, #204	; 0xcc
   323f0:	2100      	movs	r1, #0
   323f2:	5099      	str	r1, [r3, r2]
   323f4:	e05c      	b.n	324b0 <_http_client_request+0x3c8>
   323f6:	46c0      	nop			; (mov r8, r8)
   323f8:	0003aacc 	.word	0x0003aacc
   323fc:	00032061 	.word	0x00032061
   32400:	00032fc9 	.word	0x00032fc9
   32404:	0003a9f0 	.word	0x0003a9f0
   32408:	00033049 	.word	0x00033049
   3240c:	0003a9f8 	.word	0x0003a9f8
   32410:	0003aa00 	.word	0x0003aa00
   32414:	0003aa08 	.word	0x0003aa08
   32418:	0003aa10 	.word	0x0003aa10
   3241c:	0003aa1c 	.word	0x0003aa1c
   32420:	00035abf 	.word	0x00035abf
   32424:	0003aa24 	.word	0x0003aa24
   32428:	0003aa30 	.word	0x0003aa30
   3242c:	0003aa40 	.word	0x0003aa40
   32430:	0003aa44 	.word	0x0003aa44
   32434:	0003aa4c 	.word	0x0003aa4c
   32438:	0003aa68 	.word	0x0003aa68
   3243c:	0003aa7c 	.word	0x0003aa7c
   32440:	0003aa94 	.word	0x0003aa94
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   32444:	69fb      	ldr	r3, [r7, #28]
   32446:	22cc      	movs	r2, #204	; 0xcc
   32448:	589b      	ldr	r3, [r3, r2]
   3244a:	001a      	movs	r2, r3
   3244c:	49e0      	ldr	r1, [pc, #896]	; (327d0 <_http_client_request+0x6e8>)
   3244e:	2328      	movs	r3, #40	; 0x28
   32450:	2018      	movs	r0, #24
   32452:	4684      	mov	ip, r0
   32454:	44bc      	add	ip, r7
   32456:	4463      	add	r3, ip
   32458:	0018      	movs	r0, r3
   3245a:	4bde      	ldr	r3, [pc, #888]	; (327d4 <_http_client_request+0x6ec>)
   3245c:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   3245e:	49de      	ldr	r1, [pc, #888]	; (327d8 <_http_client_request+0x6f0>)
   32460:	2334      	movs	r3, #52	; 0x34
   32462:	2218      	movs	r2, #24
   32464:	4694      	mov	ip, r2
   32466:	44bc      	add	ip, r7
   32468:	4463      	add	r3, ip
   3246a:	2210      	movs	r2, #16
   3246c:	0018      	movs	r0, r3
   3246e:	4bdb      	ldr	r3, [pc, #876]	; (327dc <_http_client_request+0x6f4>)
   32470:	4798      	blx	r3
					stream_writer_send_buffer(&writer, length, strlen(length));
   32472:	2328      	movs	r3, #40	; 0x28
   32474:	2218      	movs	r2, #24
   32476:	4694      	mov	ip, r2
   32478:	44bc      	add	ip, r7
   3247a:	4463      	add	r3, ip
   3247c:	0018      	movs	r0, r3
   3247e:	4bd8      	ldr	r3, [pc, #864]	; (327e0 <_http_client_request+0x6f8>)
   32480:	4798      	blx	r3
   32482:	0002      	movs	r2, r0
   32484:	2328      	movs	r3, #40	; 0x28
   32486:	2118      	movs	r1, #24
   32488:	1879      	adds	r1, r7, r1
   3248a:	18c9      	adds	r1, r1, r3
   3248c:	2334      	movs	r3, #52	; 0x34
   3248e:	2018      	movs	r0, #24
   32490:	4684      	mov	ip, r0
   32492:	44bc      	add	ip, r7
   32494:	4463      	add	r3, ip
   32496:	0018      	movs	r0, r3
   32498:	4bd0      	ldr	r3, [pc, #832]	; (327dc <_http_client_request+0x6f4>)
   3249a:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   3249c:	49d1      	ldr	r1, [pc, #836]	; (327e4 <_http_client_request+0x6fc>)
   3249e:	2334      	movs	r3, #52	; 0x34
   324a0:	2218      	movs	r2, #24
   324a2:	4694      	mov	ip, r2
   324a4:	44bc      	add	ip, r7
   324a6:	4463      	add	r3, ip
   324a8:	2202      	movs	r2, #2
   324aa:	0018      	movs	r0, r3
   324ac:	4bcb      	ldr	r3, [pc, #812]	; (327dc <_http_client_request+0x6f4>)
   324ae:	4798      	blx	r3
		if (module->req.ext_header != NULL ) {
   324b0:	69fb      	ldr	r3, [r7, #28]
   324b2:	22d4      	movs	r2, #212	; 0xd4
   324b4:	589b      	ldr	r3, [r3, r2]
   324b6:	2b00      	cmp	r3, #0
   324b8:	d012      	beq.n	324e0 <_http_client_request+0x3f8>
				module->req.ext_header,
   324ba:	69fb      	ldr	r3, [r7, #28]
   324bc:	22d4      	movs	r2, #212	; 0xd4
   324be:	589c      	ldr	r4, [r3, r2]
				strlen(module->req.ext_header));
   324c0:	69fb      	ldr	r3, [r7, #28]
   324c2:	22d4      	movs	r2, #212	; 0xd4
   324c4:	589b      	ldr	r3, [r3, r2]
			stream_writer_send_buffer(&writer,
   324c6:	0018      	movs	r0, r3
   324c8:	4bc5      	ldr	r3, [pc, #788]	; (327e0 <_http_client_request+0x6f8>)
   324ca:	4798      	blx	r3
   324cc:	0002      	movs	r2, r0
   324ce:	2334      	movs	r3, #52	; 0x34
   324d0:	2118      	movs	r1, #24
   324d2:	468c      	mov	ip, r1
   324d4:	44bc      	add	ip, r7
   324d6:	4463      	add	r3, ip
   324d8:	0021      	movs	r1, r4
   324da:	0018      	movs	r0, r3
   324dc:	4bbf      	ldr	r3, [pc, #764]	; (327dc <_http_client_request+0x6f4>)
   324de:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   324e0:	49c0      	ldr	r1, [pc, #768]	; (327e4 <_http_client_request+0x6fc>)
   324e2:	2334      	movs	r3, #52	; 0x34
   324e4:	2218      	movs	r2, #24
   324e6:	4694      	mov	ip, r2
   324e8:	44bc      	add	ip, r7
   324ea:	4463      	add	r3, ip
   324ec:	2202      	movs	r2, #2
   324ee:	0018      	movs	r0, r3
   324f0:	4bba      	ldr	r3, [pc, #744]	; (327dc <_http_client_request+0x6f4>)
   324f2:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   324f4:	2334      	movs	r3, #52	; 0x34
   324f6:	2218      	movs	r2, #24
   324f8:	4694      	mov	ip, r2
   324fa:	44bc      	add	ip, r7
   324fc:	4463      	add	r3, ip
   324fe:	0018      	movs	r0, r3
   32500:	4bb9      	ldr	r3, [pc, #740]	; (327e8 <_http_client_request+0x700>)
   32502:	4798      	blx	r3
		module->req.state = STATE_REQ_SEND_ENTITY;
   32504:	69fb      	ldr	r3, [r7, #28]
   32506:	2204      	movs	r2, #4
   32508:	66da      	str	r2, [r3, #108]	; 0x6c
		if (module->req.content_length < 0 && entity->read) {
   3250a:	69fb      	ldr	r3, [r7, #28]
   3250c:	22cc      	movs	r2, #204	; 0xcc
   3250e:	589b      	ldr	r3, [r3, r2]
   32510:	2b00      	cmp	r3, #0
   32512:	db00      	blt.n	32516 <_http_client_request+0x42e>
   32514:	e0c6      	b.n	326a4 <_http_client_request+0x5bc>
   32516:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   32518:	68db      	ldr	r3, [r3, #12]
   3251a:	2b00      	cmp	r3, #0
   3251c:	d100      	bne.n	32520 <_http_client_request+0x438>
   3251e:	e0c1      	b.n	326a4 <_http_client_request+0x5bc>
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   32520:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   32522:	68dc      	ldr	r4, [r3, #12]
   32524:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   32526:	6958      	ldr	r0, [r3, #20]
   32528:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   3252a:	1d59      	adds	r1, r3, #5
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   3252c:	69fb      	ldr	r3, [r7, #28]
   3252e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   32530:	1fdd      	subs	r5, r3, #7
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   32532:	69fb      	ldr	r3, [r7, #28]
   32534:	22d0      	movs	r2, #208	; 0xd0
   32536:	589b      	ldr	r3, [r3, r2]
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   32538:	002a      	movs	r2, r5
   3253a:	47a0      	blx	r4
   3253c:	0003      	movs	r3, r0
   3253e:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   32540:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32542:	2b00      	cmp	r3, #0
   32544:	da01      	bge.n	3254a <_http_client_request+0x462>
				size = 0;
   32546:	2300      	movs	r3, #0
   32548:	677b      	str	r3, [r7, #116]	; 0x74
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   3254a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   3254c:	220a      	movs	r2, #10
   3254e:	711a      	strb	r2, [r3, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   32550:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   32552:	220d      	movs	r2, #13
   32554:	70da      	strb	r2, [r3, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   32556:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32558:	3305      	adds	r3, #5
   3255a:	6eba      	ldr	r2, [r7, #104]	; 0x68
   3255c:	210d      	movs	r1, #13
   3255e:	54d1      	strb	r1, [r2, r3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   32560:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32562:	3306      	adds	r3, #6
   32564:	6eba      	ldr	r2, [r7, #104]	; 0x68
   32566:	210a      	movs	r1, #10
   32568:	54d1      	strb	r1, [r2, r3]
			if (size >= 0) {
   3256a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3256c:	2b00      	cmp	r3, #0
   3256e:	db14      	blt.n	3259a <_http_client_request+0x4b2>
				ptr = buffer + 2;
   32570:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   32572:	3302      	adds	r3, #2
   32574:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[size % 16];
   32576:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32578:	4a9c      	ldr	r2, [pc, #624]	; (327ec <_http_client_request+0x704>)
   3257a:	4013      	ands	r3, r2
   3257c:	d504      	bpl.n	32588 <_http_client_request+0x4a0>
   3257e:	3b01      	subs	r3, #1
   32580:	2210      	movs	r2, #16
   32582:	4252      	negs	r2, r2
   32584:	4313      	orrs	r3, r2
   32586:	3301      	adds	r3, #1
   32588:	001a      	movs	r2, r3
   3258a:	2318      	movs	r3, #24
   3258c:	2118      	movs	r1, #24
   3258e:	468c      	mov	ip, r1
   32590:	44bc      	add	ip, r7
   32592:	4463      	add	r3, ip
   32594:	5c9a      	ldrb	r2, [r3, r2]
   32596:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   32598:	701a      	strb	r2, [r3, #0]
			if (size >= 0x10) {
   3259a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3259c:	2b0f      	cmp	r3, #15
   3259e:	dd19      	ble.n	325d4 <_http_client_request+0x4ec>
				ptr = buffer + 1;
   325a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   325a2:	3301      	adds	r3, #1
   325a4:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x10) % 16];
   325a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   325a8:	2b00      	cmp	r3, #0
   325aa:	da00      	bge.n	325ae <_http_client_request+0x4c6>
   325ac:	330f      	adds	r3, #15
   325ae:	111b      	asrs	r3, r3, #4
   325b0:	001a      	movs	r2, r3
   325b2:	4b8e      	ldr	r3, [pc, #568]	; (327ec <_http_client_request+0x704>)
   325b4:	4013      	ands	r3, r2
   325b6:	d504      	bpl.n	325c2 <_http_client_request+0x4da>
   325b8:	3b01      	subs	r3, #1
   325ba:	2210      	movs	r2, #16
   325bc:	4252      	negs	r2, r2
   325be:	4313      	orrs	r3, r2
   325c0:	3301      	adds	r3, #1
   325c2:	001a      	movs	r2, r3
   325c4:	2318      	movs	r3, #24
   325c6:	2118      	movs	r1, #24
   325c8:	468c      	mov	ip, r1
   325ca:	44bc      	add	ip, r7
   325cc:	4463      	add	r3, ip
   325ce:	5c9a      	ldrb	r2, [r3, r2]
   325d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   325d2:	701a      	strb	r2, [r3, #0]
			if (size >= 0x100) {
   325d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   325d6:	2bff      	cmp	r3, #255	; 0xff
   325d8:	dd18      	ble.n	3260c <_http_client_request+0x524>
				ptr = buffer;
   325da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   325dc:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x100) % 16];
   325de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   325e0:	2b00      	cmp	r3, #0
   325e2:	da00      	bge.n	325e6 <_http_client_request+0x4fe>
   325e4:	33ff      	adds	r3, #255	; 0xff
   325e6:	121b      	asrs	r3, r3, #8
   325e8:	001a      	movs	r2, r3
   325ea:	4b80      	ldr	r3, [pc, #512]	; (327ec <_http_client_request+0x704>)
   325ec:	4013      	ands	r3, r2
   325ee:	d504      	bpl.n	325fa <_http_client_request+0x512>
   325f0:	3b01      	subs	r3, #1
   325f2:	2210      	movs	r2, #16
   325f4:	4252      	negs	r2, r2
   325f6:	4313      	orrs	r3, r2
   325f8:	3301      	adds	r3, #1
   325fa:	001a      	movs	r2, r3
   325fc:	2318      	movs	r3, #24
   325fe:	2118      	movs	r1, #24
   32600:	468c      	mov	ip, r1
   32602:	44bc      	add	ip, r7
   32604:	4463      	add	r3, ip
   32606:	5c9a      	ldrb	r2, [r3, r2]
   32608:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   3260a:	701a      	strb	r2, [r3, #0]
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   3260c:	69fb      	ldr	r3, [r7, #28]
   3260e:	2000      	movs	r0, #0
   32610:	5618      	ldrsb	r0, [r3, r0]
   32612:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   32614:	3303      	adds	r3, #3
   32616:	001a      	movs	r2, r3
   32618:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   3261a:	1ad3      	subs	r3, r2, r3
   3261c:	b29a      	uxth	r2, r3
   3261e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32620:	b29b      	uxth	r3, r3
   32622:	18d3      	adds	r3, r2, r3
   32624:	b29b      	uxth	r3, r3
   32626:	3304      	adds	r3, #4
   32628:	b29a      	uxth	r2, r3
   3262a:	6f39      	ldr	r1, [r7, #112]	; 0x70
   3262c:	2300      	movs	r3, #0
   3262e:	4c70      	ldr	r4, [pc, #448]	; (327f0 <_http_client_request+0x708>)
   32630:	47a0      	blx	r4
   32632:	0003      	movs	r3, r0
   32634:	663b      	str	r3, [r7, #96]	; 0x60
   32636:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   32638:	2b00      	cmp	r3, #0
   3263a:	da07      	bge.n	3264c <_http_client_request+0x564>
				_http_client_clear_conn(module, -EIO);
   3263c:	2305      	movs	r3, #5
   3263e:	425a      	negs	r2, r3
   32640:	69fb      	ldr	r3, [r7, #28]
   32642:	0011      	movs	r1, r2
   32644:	0018      	movs	r0, r3
   32646:	4b6b      	ldr	r3, [pc, #428]	; (327f4 <_http_client_request+0x70c>)
   32648:	4798      	blx	r3
				return;
   3264a:	e0e1      	b.n	32810 <_http_client_request+0x728>
			module->req.sent_length += size;
   3264c:	69fb      	ldr	r3, [r7, #28]
   3264e:	22d0      	movs	r2, #208	; 0xd0
   32650:	589a      	ldr	r2, [r3, r2]
   32652:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32654:	18d2      	adds	r2, r2, r3
   32656:	69fb      	ldr	r3, [r7, #28]
   32658:	21d0      	movs	r1, #208	; 0xd0
   3265a:	505a      	str	r2, [r3, r1]
			if(size == 0) {
   3265c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3265e:	2b00      	cmp	r3, #0
   32660:	d000      	beq.n	32664 <_http_client_request+0x57c>
   32662:	e0c9      	b.n	327f8 <_http_client_request+0x710>
				if (module->req.entity.close) {
   32664:	69fb      	ldr	r3, [r7, #28]
   32666:	22c0      	movs	r2, #192	; 0xc0
   32668:	589b      	ldr	r3, [r3, r2]
   3266a:	2b00      	cmp	r3, #0
   3266c:	d007      	beq.n	3267e <_http_client_request+0x596>
					module->req.entity.close(module->req.entity.priv_data);
   3266e:	69fb      	ldr	r3, [r7, #28]
   32670:	22c0      	movs	r2, #192	; 0xc0
   32672:	589b      	ldr	r3, [r3, r2]
   32674:	69fa      	ldr	r2, [r7, #28]
   32676:	21c4      	movs	r1, #196	; 0xc4
   32678:	5852      	ldr	r2, [r2, r1]
   3267a:	0010      	movs	r0, r2
   3267c:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   3267e:	69fb      	ldr	r3, [r7, #28]
   32680:	2202      	movs	r2, #2
   32682:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   32684:	69fb      	ldr	r3, [r7, #28]
   32686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32688:	2b00      	cmp	r3, #0
   3268a:	d100      	bne.n	3268e <_http_client_request+0x5a6>
   3268c:	e0b5      	b.n	327fa <_http_client_request+0x712>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   3268e:	69fb      	ldr	r3, [r7, #28]
   32690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32692:	220c      	movs	r2, #12
   32694:	2118      	movs	r1, #24
   32696:	468c      	mov	ip, r1
   32698:	44bc      	add	ip, r7
   3269a:	4462      	add	r2, ip
   3269c:	69f8      	ldr	r0, [r7, #28]
   3269e:	2101      	movs	r1, #1
   326a0:	4798      	blx	r3
				break;
   326a2:	e0aa      	b.n	327fa <_http_client_request+0x712>
		} else if (module->req.content_length > 0 && entity->read) {
   326a4:	69fb      	ldr	r3, [r7, #28]
   326a6:	22cc      	movs	r2, #204	; 0xcc
   326a8:	589b      	ldr	r3, [r3, r2]
   326aa:	2b00      	cmp	r3, #0
   326ac:	dc00      	bgt.n	326b0 <_http_client_request+0x5c8>
   326ae:	e07c      	b.n	327aa <_http_client_request+0x6c2>
   326b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   326b2:	68db      	ldr	r3, [r3, #12]
   326b4:	2b00      	cmp	r3, #0
   326b6:	d100      	bne.n	326ba <_http_client_request+0x5d2>
   326b8:	e077      	b.n	327aa <_http_client_request+0x6c2>
			if (module->req.sent_length >= module->req.content_length) {
   326ba:	69fb      	ldr	r3, [r7, #28]
   326bc:	22d0      	movs	r2, #208	; 0xd0
   326be:	589a      	ldr	r2, [r3, r2]
   326c0:	69fb      	ldr	r3, [r7, #28]
   326c2:	21cc      	movs	r1, #204	; 0xcc
   326c4:	585b      	ldr	r3, [r3, r1]
   326c6:	429a      	cmp	r2, r3
   326c8:	db1f      	blt.n	3270a <_http_client_request+0x622>
				if (module->req.entity.close) {
   326ca:	69fb      	ldr	r3, [r7, #28]
   326cc:	22c0      	movs	r2, #192	; 0xc0
   326ce:	589b      	ldr	r3, [r3, r2]
   326d0:	2b00      	cmp	r3, #0
   326d2:	d007      	beq.n	326e4 <_http_client_request+0x5fc>
					module->req.entity.close(module->req.entity.priv_data);
   326d4:	69fb      	ldr	r3, [r7, #28]
   326d6:	22c0      	movs	r2, #192	; 0xc0
   326d8:	589b      	ldr	r3, [r3, r2]
   326da:	69fa      	ldr	r2, [r7, #28]
   326dc:	21c4      	movs	r1, #196	; 0xc4
   326de:	5852      	ldr	r2, [r2, r1]
   326e0:	0010      	movs	r0, r2
   326e2:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   326e4:	69fb      	ldr	r3, [r7, #28]
   326e6:	2202      	movs	r2, #2
   326e8:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   326ea:	69fb      	ldr	r3, [r7, #28]
   326ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   326ee:	2b00      	cmp	r3, #0
   326f0:	d100      	bne.n	326f4 <_http_client_request+0x60c>
   326f2:	e084      	b.n	327fe <_http_client_request+0x716>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   326f4:	69fb      	ldr	r3, [r7, #28]
   326f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   326f8:	220c      	movs	r2, #12
   326fa:	2118      	movs	r1, #24
   326fc:	468c      	mov	ip, r1
   326fe:	44bc      	add	ip, r7
   32700:	4462      	add	r2, ip
   32702:	69f8      	ldr	r0, [r7, #28]
   32704:	2101      	movs	r1, #1
   32706:	4798      	blx	r3
				break;
   32708:	e079      	b.n	327fe <_http_client_request+0x716>
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   3270a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3270c:	68dc      	ldr	r4, [r3, #12]
   3270e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   32710:	6958      	ldr	r0, [r3, #20]
   32712:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   32714:	69fb      	ldr	r3, [r7, #28]
   32716:	6e5d      	ldr	r5, [r3, #100]	; 0x64
   32718:	69fb      	ldr	r3, [r7, #28]
   3271a:	22d0      	movs	r2, #208	; 0xd0
   3271c:	589b      	ldr	r3, [r3, r2]
   3271e:	002a      	movs	r2, r5
   32720:	47a0      	blx	r4
   32722:	0003      	movs	r3, r0
   32724:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   32726:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32728:	2b00      	cmp	r3, #0
   3272a:	da0d      	bge.n	32748 <_http_client_request+0x660>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   3272c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3272e:	2b00      	cmp	r3, #0
   32730:	d102      	bne.n	32738 <_http_client_request+0x650>
   32732:	234d      	movs	r3, #77	; 0x4d
   32734:	425b      	negs	r3, r3
   32736:	e001      	b.n	3273c <_http_client_request+0x654>
   32738:	2305      	movs	r3, #5
   3273a:	425b      	negs	r3, r3
   3273c:	69fa      	ldr	r2, [r7, #28]
   3273e:	0019      	movs	r1, r3
   32740:	0010      	movs	r0, r2
   32742:	4b2c      	ldr	r3, [pc, #176]	; (327f4 <_http_client_request+0x70c>)
   32744:	4798      	blx	r3
			if (size < 0) {
   32746:	e057      	b.n	327f8 <_http_client_request+0x710>
				if (size > module->req.content_length - module->req.sent_length) {
   32748:	69fb      	ldr	r3, [r7, #28]
   3274a:	22cc      	movs	r2, #204	; 0xcc
   3274c:	589a      	ldr	r2, [r3, r2]
   3274e:	69fb      	ldr	r3, [r7, #28]
   32750:	21d0      	movs	r1, #208	; 0xd0
   32752:	585b      	ldr	r3, [r3, r1]
   32754:	1ad2      	subs	r2, r2, r3
   32756:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32758:	429a      	cmp	r2, r3
   3275a:	da07      	bge.n	3276c <_http_client_request+0x684>
					size = module->req.content_length - module->req.sent_length;
   3275c:	69fb      	ldr	r3, [r7, #28]
   3275e:	22cc      	movs	r2, #204	; 0xcc
   32760:	589a      	ldr	r2, [r3, r2]
   32762:	69fb      	ldr	r3, [r7, #28]
   32764:	21d0      	movs	r1, #208	; 0xd0
   32766:	585b      	ldr	r3, [r3, r1]
   32768:	1ad3      	subs	r3, r2, r3
   3276a:	677b      	str	r3, [r7, #116]	; 0x74
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   3276c:	69fb      	ldr	r3, [r7, #28]
   3276e:	2000      	movs	r0, #0
   32770:	5618      	ldrsb	r0, [r3, r0]
   32772:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   32774:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32776:	b29a      	uxth	r2, r3
   32778:	2300      	movs	r3, #0
   3277a:	4c1d      	ldr	r4, [pc, #116]	; (327f0 <_http_client_request+0x708>)
   3277c:	47a0      	blx	r4
   3277e:	0003      	movs	r3, r0
   32780:	663b      	str	r3, [r7, #96]	; 0x60
   32782:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   32784:	2b00      	cmp	r3, #0
   32786:	da07      	bge.n	32798 <_http_client_request+0x6b0>
					_http_client_clear_conn(module, -EIO);
   32788:	2305      	movs	r3, #5
   3278a:	425a      	negs	r2, r3
   3278c:	69fb      	ldr	r3, [r7, #28]
   3278e:	0011      	movs	r1, r2
   32790:	0018      	movs	r0, r3
   32792:	4b18      	ldr	r3, [pc, #96]	; (327f4 <_http_client_request+0x70c>)
   32794:	4798      	blx	r3
					return;
   32796:	e03b      	b.n	32810 <_http_client_request+0x728>
				module->req.sent_length += size;
   32798:	69fb      	ldr	r3, [r7, #28]
   3279a:	22d0      	movs	r2, #208	; 0xd0
   3279c:	589a      	ldr	r2, [r3, r2]
   3279e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   327a0:	18d2      	adds	r2, r2, r3
   327a2:	69fb      	ldr	r3, [r7, #28]
   327a4:	21d0      	movs	r1, #208	; 0xd0
   327a6:	505a      	str	r2, [r3, r1]
			if (size < 0) {
   327a8:	e026      	b.n	327f8 <_http_client_request+0x710>
			module->req.state = STATE_SOCK_CONNECTED;
   327aa:	69fb      	ldr	r3, [r7, #28]
   327ac:	2202      	movs	r2, #2
   327ae:	66da      	str	r2, [r3, #108]	; 0x6c
			if (module->cb) {
   327b0:	69fb      	ldr	r3, [r7, #28]
   327b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   327b4:	2b00      	cmp	r3, #0
   327b6:	d024      	beq.n	32802 <_http_client_request+0x71a>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   327b8:	69fb      	ldr	r3, [r7, #28]
   327ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   327bc:	220c      	movs	r2, #12
   327be:	2118      	movs	r1, #24
   327c0:	468c      	mov	ip, r1
   327c2:	44bc      	add	ip, r7
   327c4:	4462      	add	r2, ip
   327c6:	69f8      	ldr	r0, [r7, #28]
   327c8:	2101      	movs	r1, #1
   327ca:	4798      	blx	r3
			break;
   327cc:	e019      	b.n	32802 <_http_client_request+0x71a>
   327ce:	46c0      	nop			; (mov r8, r8)
   327d0:	0003aab4 	.word	0x0003aab4
   327d4:	000359c5 	.word	0x000359c5
   327d8:	0003aab8 	.word	0x0003aab8
   327dc:	00033049 	.word	0x00033049
   327e0:	00035abf 	.word	0x00035abf
   327e4:	0003aa40 	.word	0x0003aa40
   327e8:	00033085 	.word	0x00033085
   327ec:	8000000f 	.word	0x8000000f
   327f0:	000265cd 	.word	0x000265cd
   327f4:	00031f95 	.word	0x00031f95
		break;
   327f8:	e004      	b.n	32804 <_http_client_request+0x71c>
				break;
   327fa:	46c0      	nop			; (mov r8, r8)
   327fc:	e002      	b.n	32804 <_http_client_request+0x71c>
				break;
   327fe:	46c0      	nop			; (mov r8, r8)
   32800:	e000      	b.n	32804 <_http_client_request+0x71c>
			break;
   32802:	46c0      	nop			; (mov r8, r8)
   32804:	69bb      	ldr	r3, [r7, #24]
   32806:	469d      	mov	sp, r3
   32808:	e004      	b.n	32814 <_http_client_request+0x72c>
		return;
   3280a:	46c0      	nop			; (mov r8, r8)
   3280c:	e000      	b.n	32810 <_http_client_request+0x728>
		return;
   3280e:	46c0      	nop			; (mov r8, r8)
   32810:	69bb      	ldr	r3, [r7, #24]
   32812:	469d      	mov	sp, r3
	}
}
   32814:	46bd      	mov	sp, r7
   32816:	b01e      	add	sp, #120	; 0x78
   32818:	bc04      	pop	{r2}
   3281a:	4690      	mov	r8, r2
   3281c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3281e:	46c0      	nop			; (mov r8, r8)

00032820 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   32820:	b590      	push	{r4, r7, lr}
   32822:	b083      	sub	sp, #12
   32824:	af00      	add	r7, sp, #0
   32826:	6078      	str	r0, [r7, #4]
	if (module == NULL) {
   32828:	687b      	ldr	r3, [r7, #4]
   3282a:	2b00      	cmp	r3, #0
   3282c:	d021      	beq.n	32872 <_http_client_recv_packet+0x52>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   3282e:	687b      	ldr	r3, [r7, #4]
   32830:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   32832:	687b      	ldr	r3, [r7, #4]
   32834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   32836:	429a      	cmp	r2, r3
   32838:	d307      	bcc.n	3284a <_http_client_recv_packet+0x2a>
		/* Has not enough memory. */
		_http_client_clear_conn(module, -EOVERFLOW);
   3283a:	238b      	movs	r3, #139	; 0x8b
   3283c:	425a      	negs	r2, r3
   3283e:	687b      	ldr	r3, [r7, #4]
   32840:	0011      	movs	r1, r2
   32842:	0018      	movs	r0, r3
   32844:	4b0d      	ldr	r3, [pc, #52]	; (3287c <_http_client_recv_packet+0x5c>)
   32846:	4798      	blx	r3
		return;
   32848:	e014      	b.n	32874 <_http_client_recv_packet+0x54>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   3284a:	687b      	ldr	r3, [r7, #4]
   3284c:	2000      	movs	r0, #0
   3284e:	5618      	ldrsb	r0, [r3, r0]
		module->config.recv_buffer + module->recved_size,
   32850:	687b      	ldr	r3, [r7, #4]
   32852:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   32854:	687b      	ldr	r3, [r7, #4]
   32856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32858:	18d1      	adds	r1, r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   3285a:	687b      	ldr	r3, [r7, #4]
   3285c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	recv(module->sock,
   3285e:	b29a      	uxth	r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   32860:	687b      	ldr	r3, [r7, #4]
   32862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	recv(module->sock,
   32864:	b29b      	uxth	r3, r3
   32866:	1ad3      	subs	r3, r2, r3
   32868:	b29a      	uxth	r2, r3
   3286a:	2300      	movs	r3, #0
   3286c:	4c04      	ldr	r4, [pc, #16]	; (32880 <_http_client_recv_packet+0x60>)
   3286e:	47a0      	blx	r4
   32870:	e000      	b.n	32874 <_http_client_recv_packet+0x54>
		return;
   32872:	46c0      	nop			; (mov r8, r8)
}
   32874:	46bd      	mov	sp, r7
   32876:	b003      	add	sp, #12
   32878:	bd90      	pop	{r4, r7, pc}
   3287a:	46c0      	nop			; (mov r8, r8)
   3287c:	00031f95 	.word	0x00031f95
   32880:	00026731 	.word	0x00026731

00032884 <_http_client_recved_packet>:

void _http_client_recved_packet(struct http_client_module *const module, int read_len)
{
   32884:	b580      	push	{r7, lr}
   32886:	b082      	sub	sp, #8
   32888:	af00      	add	r7, sp, #0
   3288a:	6078      	str	r0, [r7, #4]
   3288c:	6039      	str	r1, [r7, #0]
	module->recved_size += read_len;
   3288e:	687b      	ldr	r3, [r7, #4]
   32890:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   32892:	683b      	ldr	r3, [r7, #0]
   32894:	18d2      	adds	r2, r2, r3
   32896:	687b      	ldr	r3, [r7, #4]
   32898:	645a      	str	r2, [r3, #68]	; 0x44
	if (module->config.timeout > 0) {
   3289a:	687b      	ldr	r3, [r7, #4]
   3289c:	2258      	movs	r2, #88	; 0x58
   3289e:	5a9b      	ldrh	r3, [r3, r2]
   328a0:	2b00      	cmp	r3, #0
   328a2:	d007      	beq.n	328b4 <_http_client_recved_packet+0x30>
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   328a4:	687b      	ldr	r3, [r7, #4]
   328a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   328a8:	687b      	ldr	r3, [r7, #4]
   328aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   328ac:	0019      	movs	r1, r3
   328ae:	0010      	movs	r0, r2
   328b0:	4b06      	ldr	r3, [pc, #24]	; (328cc <_http_client_recved_packet+0x48>)
   328b2:	4798      	blx	r3
	}

	/* Recursive function call can be occurred overflow. */
	while(_http_client_handle_response(module) != 0);
   328b4:	46c0      	nop			; (mov r8, r8)
   328b6:	687b      	ldr	r3, [r7, #4]
   328b8:	0018      	movs	r0, r3
   328ba:	4b05      	ldr	r3, [pc, #20]	; (328d0 <_http_client_recved_packet+0x4c>)
   328bc:	4798      	blx	r3
   328be:	1e03      	subs	r3, r0, #0
   328c0:	d1f9      	bne.n	328b6 <_http_client_recved_packet+0x32>
}
   328c2:	46c0      	nop			; (mov r8, r8)
   328c4:	46bd      	mov	sp, r7
   328c6:	b002      	add	sp, #8
   328c8:	bd80      	pop	{r7, pc}
   328ca:	46c0      	nop			; (mov r8, r8)
   328cc:	00033341 	.word	0x00033341
   328d0:	000328d5 	.word	0x000328d5

000328d4 <_http_client_handle_response>:

int _http_client_handle_response(struct http_client_module *const module)
{
   328d4:	b580      	push	{r7, lr}
   328d6:	b082      	sub	sp, #8
   328d8:	af00      	add	r7, sp, #0
   328da:	6078      	str	r0, [r7, #4]
	switch(module->resp.state) {
   328dc:	687b      	ldr	r3, [r7, #4]
   328de:	22d8      	movs	r2, #216	; 0xd8
   328e0:	589b      	ldr	r3, [r3, r2]
   328e2:	2b00      	cmp	r3, #0
   328e4:	d002      	beq.n	328ec <_http_client_handle_response+0x18>
   328e6:	2b01      	cmp	r3, #1
   328e8:	d006      	beq.n	328f8 <_http_client_handle_response+0x24>
   328ea:	e00b      	b.n	32904 <_http_client_handle_response+0x30>
	case STATE_PARSE_HEADER:
		return _http_client_handle_header(module);
   328ec:	687b      	ldr	r3, [r7, #4]
   328ee:	0018      	movs	r0, r3
   328f0:	4b07      	ldr	r3, [pc, #28]	; (32910 <_http_client_handle_response+0x3c>)
   328f2:	4798      	blx	r3
   328f4:	0003      	movs	r3, r0
   328f6:	e006      	b.n	32906 <_http_client_handle_response+0x32>
	case STATE_PARSE_ENTITY:
		return _http_client_handle_entity(module);
   328f8:	687b      	ldr	r3, [r7, #4]
   328fa:	0018      	movs	r0, r3
   328fc:	4b05      	ldr	r3, [pc, #20]	; (32914 <_http_client_handle_response+0x40>)
   328fe:	4798      	blx	r3
   32900:	0003      	movs	r3, r0
   32902:	e000      	b.n	32906 <_http_client_handle_response+0x32>
	}
	return 0;
   32904:	2300      	movs	r3, #0
}
   32906:	0018      	movs	r0, r3
   32908:	46bd      	mov	sp, r7
   3290a:	b002      	add	sp, #8
   3290c:	bd80      	pop	{r7, pc}
   3290e:	46c0      	nop			; (mov r8, r8)
   32910:	00032919 	.word	0x00032919
   32914:	00032dd1 	.word	0x00032dd1

00032918 <_http_client_handle_header>:

int _http_client_handle_header(struct http_client_module *const module)
{
   32918:	b590      	push	{r4, r7, lr}
   3291a:	b08b      	sub	sp, #44	; 0x2c
   3291c:	af00      	add	r7, sp, #0
   3291e:	6078      	str	r0, [r7, #4]
	/* New line character only used in this function. So variable registered in the code region. */
	static const char *new_line = "\r\n";

	//TODO : header filter

	for (ptr = module->config.recv_buffer ; ; ) {
   32920:	687b      	ldr	r3, [r7, #4]
   32922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   32924:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   32926:	4b9a      	ldr	r3, [pc, #616]	; (32b90 <_http_client_handle_header+0x278>)
   32928:	681a      	ldr	r2, [r3, #0]
   3292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3292c:	0011      	movs	r1, r2
   3292e:	0018      	movs	r0, r3
   32930:	4b98      	ldr	r3, [pc, #608]	; (32b94 <_http_client_handle_header+0x27c>)
   32932:	4798      	blx	r3
   32934:	0003      	movs	r3, r0
   32936:	61bb      	str	r3, [r7, #24]
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   32938:	69bb      	ldr	r3, [r7, #24]
   3293a:	2b00      	cmp	r3, #0
   3293c:	d007      	beq.n	3294e <_http_client_handle_header+0x36>
   3293e:	687b      	ldr	r3, [r7, #4]
   32940:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   32942:	687b      	ldr	r3, [r7, #4]
   32944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32946:	18d2      	adds	r2, r2, r3
   32948:	69bb      	ldr	r3, [r7, #24]
   3294a:	429a      	cmp	r2, r3
   3294c:	d807      	bhi.n	3295e <_http_client_handle_header+0x46>
			/* not enough buffer. */
			_http_client_move_buffer(module, ptr);
   3294e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   32950:	687b      	ldr	r3, [r7, #4]
   32952:	0011      	movs	r1, r2
   32954:	0018      	movs	r0, r3
   32956:	4b90      	ldr	r3, [pc, #576]	; (32b98 <_http_client_handle_header+0x280>)
   32958:	4798      	blx	r3
			return 0;
   3295a:	2300      	movs	r3, #0
   3295c:	e114      	b.n	32b88 <_http_client_handle_header+0x270>
		}

		if (!strncmp(ptr, new_line, strlen(new_line))) {
   3295e:	4b8c      	ldr	r3, [pc, #560]	; (32b90 <_http_client_handle_header+0x278>)
   32960:	681c      	ldr	r4, [r3, #0]
   32962:	4b8b      	ldr	r3, [pc, #556]	; (32b90 <_http_client_handle_header+0x278>)
   32964:	681b      	ldr	r3, [r3, #0]
   32966:	0018      	movs	r0, r3
   32968:	4b8c      	ldr	r3, [pc, #560]	; (32b9c <_http_client_handle_header+0x284>)
   3296a:	4798      	blx	r3
   3296c:	0002      	movs	r2, r0
   3296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32970:	0021      	movs	r1, r4
   32972:	0018      	movs	r0, r3
   32974:	4b8a      	ldr	r3, [pc, #552]	; (32ba0 <_http_client_handle_header+0x288>)
   32976:	4798      	blx	r3
   32978:	1e03      	subs	r3, r0, #0
   3297a:	d15d      	bne.n	32a38 <_http_client_handle_header+0x120>
			/* Move remain data to forward part of buffer. */
			_http_client_move_buffer(module, ptr + strlen(new_line));
   3297c:	4b84      	ldr	r3, [pc, #528]	; (32b90 <_http_client_handle_header+0x278>)
   3297e:	681b      	ldr	r3, [r3, #0]
   32980:	0018      	movs	r0, r3
   32982:	4b86      	ldr	r3, [pc, #536]	; (32b9c <_http_client_handle_header+0x284>)
   32984:	4798      	blx	r3
   32986:	0002      	movs	r2, r0
   32988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3298a:	189a      	adds	r2, r3, r2
   3298c:	687b      	ldr	r3, [r7, #4]
   3298e:	0011      	movs	r1, r2
   32990:	0018      	movs	r0, r3
   32992:	4b81      	ldr	r3, [pc, #516]	; (32b98 <_http_client_handle_header+0x280>)
   32994:	4798      	blx	r3

			/* Check validation first. */
			if (module->cb && module->resp.response_code) {
   32996:	687b      	ldr	r3, [r7, #4]
   32998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3299a:	2b00      	cmp	r3, #0
   3299c:	d046      	beq.n	32a2c <_http_client_handle_header+0x114>
   3299e:	687b      	ldr	r3, [r7, #4]
   329a0:	22e4      	movs	r2, #228	; 0xe4
   329a2:	5a9b      	ldrh	r3, [r3, r2]
   329a4:	2b00      	cmp	r3, #0
   329a6:	d041      	beq.n	32a2c <_http_client_handle_header+0x114>
				/* Chunked transfer */
				if (module->resp.content_length < 0) {
   329a8:	687b      	ldr	r3, [r7, #4]
   329aa:	22dc      	movs	r2, #220	; 0xdc
   329ac:	589b      	ldr	r3, [r3, r2]
   329ae:	2b00      	cmp	r3, #0
   329b0:	da19      	bge.n	329e6 <_http_client_handle_header+0xce>
					data.recv_response.response_code = module->resp.response_code;
   329b2:	687b      	ldr	r3, [r7, #4]
   329b4:	22e4      	movs	r2, #228	; 0xe4
   329b6:	5a9a      	ldrh	r2, [r3, r2]
   329b8:	230c      	movs	r3, #12
   329ba:	18fb      	adds	r3, r7, r3
   329bc:	801a      	strh	r2, [r3, #0]
					data.recv_response.is_chunked = 1;
   329be:	230c      	movs	r3, #12
   329c0:	18fb      	adds	r3, r7, r3
   329c2:	2201      	movs	r2, #1
   329c4:	709a      	strb	r2, [r3, #2]
					module->resp.read_length = 0;
   329c6:	687b      	ldr	r3, [r7, #4]
   329c8:	22e0      	movs	r2, #224	; 0xe0
   329ca:	2100      	movs	r1, #0
   329cc:	5099      	str	r1, [r3, r2]
					data.recv_response.content = NULL;
   329ce:	230c      	movs	r3, #12
   329d0:	18fb      	adds	r3, r7, r3
   329d2:	2200      	movs	r2, #0
   329d4:	609a      	str	r2, [r3, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   329d6:	687b      	ldr	r3, [r7, #4]
   329d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   329da:	220c      	movs	r2, #12
   329dc:	18ba      	adds	r2, r7, r2
   329de:	6878      	ldr	r0, [r7, #4]
   329e0:	2102      	movs	r1, #2
   329e2:	4798      	blx	r3
   329e4:	e022      	b.n	32a2c <_http_client_handle_header+0x114>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   329e6:	687b      	ldr	r3, [r7, #4]
   329e8:	22dc      	movs	r2, #220	; 0xdc
   329ea:	589a      	ldr	r2, [r3, r2]
   329ec:	687b      	ldr	r3, [r7, #4]
   329ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   329f0:	429a      	cmp	r2, r3
   329f2:	dd1b      	ble.n	32a2c <_http_client_handle_header+0x114>
					/* Entity is bigger than receive buffer. Sending the buffer to user like chunked transfer. */
					data.recv_response.response_code = module->resp.response_code;
   329f4:	687b      	ldr	r3, [r7, #4]
   329f6:	22e4      	movs	r2, #228	; 0xe4
   329f8:	5a9a      	ldrh	r2, [r3, r2]
   329fa:	230c      	movs	r3, #12
   329fc:	18fb      	adds	r3, r7, r3
   329fe:	801a      	strh	r2, [r3, #0]
					data.recv_response.content_length = module->resp.content_length;
   32a00:	687b      	ldr	r3, [r7, #4]
   32a02:	22dc      	movs	r2, #220	; 0xdc
   32a04:	589b      	ldr	r3, [r3, r2]
   32a06:	001a      	movs	r2, r3
   32a08:	230c      	movs	r3, #12
   32a0a:	18fb      	adds	r3, r7, r3
   32a0c:	605a      	str	r2, [r3, #4]
					data.recv_response.content = NULL;
   32a0e:	230c      	movs	r3, #12
   32a10:	18fb      	adds	r3, r7, r3
   32a12:	2200      	movs	r2, #0
   32a14:	609a      	str	r2, [r3, #8]
					module->resp.read_length = 0;
   32a16:	687b      	ldr	r3, [r7, #4]
   32a18:	22e0      	movs	r2, #224	; 0xe0
   32a1a:	2100      	movs	r1, #0
   32a1c:	5099      	str	r1, [r3, r2]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   32a1e:	687b      	ldr	r3, [r7, #4]
   32a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32a22:	220c      	movs	r2, #12
   32a24:	18ba      	adds	r2, r7, r2
   32a26:	6878      	ldr	r0, [r7, #4]
   32a28:	2102      	movs	r1, #2
   32a2a:	4798      	blx	r3
				}
			}

			module->resp.state = STATE_PARSE_ENTITY;
   32a2c:	687b      	ldr	r3, [r7, #4]
   32a2e:	22d8      	movs	r2, #216	; 0xd8
   32a30:	2101      	movs	r1, #1
   32a32:	5099      	str	r1, [r3, r2]
			return 1;
   32a34:	2301      	movs	r3, #1
   32a36:	e0a7      	b.n	32b88 <_http_client_handle_header+0x270>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   32a38:	495a      	ldr	r1, [pc, #360]	; (32ba4 <_http_client_handle_header+0x28c>)
   32a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32a3c:	2210      	movs	r2, #16
   32a3e:	0018      	movs	r0, r3
   32a40:	4b57      	ldr	r3, [pc, #348]	; (32ba0 <_http_client_handle_header+0x288>)
   32a42:	4798      	blx	r3
   32a44:	1e03      	subs	r3, r0, #0
   32a46:	d109      	bne.n	32a5c <_http_client_handle_header+0x144>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   32a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32a4a:	3310      	adds	r3, #16
   32a4c:	0018      	movs	r0, r3
   32a4e:	4b56      	ldr	r3, [pc, #344]	; (32ba8 <_http_client_handle_header+0x290>)
   32a50:	4798      	blx	r3
   32a52:	0001      	movs	r1, r0
   32a54:	687b      	ldr	r3, [r7, #4]
   32a56:	22dc      	movs	r2, #220	; 0xdc
   32a58:	5099      	str	r1, [r3, r2]
   32a5a:	e08b      	b.n	32b74 <_http_client_handle_header+0x25c>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   32a5c:	4953      	ldr	r1, [pc, #332]	; (32bac <_http_client_handle_header+0x294>)
   32a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32a60:	2213      	movs	r2, #19
   32a62:	0018      	movs	r0, r3
   32a64:	4b4e      	ldr	r3, [pc, #312]	; (32ba0 <_http_client_handle_header+0x288>)
   32a66:	4798      	blx	r3
   32a68:	1e03      	subs	r3, r0, #0
   32a6a:	d127      	bne.n	32abc <_http_client_handle_header+0x1a4>
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   32a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32a6e:	3313      	adds	r3, #19
   32a70:	623b      	str	r3, [r7, #32]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   32a72:	e01e      	b.n	32ab2 <_http_client_handle_header+0x19a>
				if (*type_ptr == ' ') {
   32a74:	6a3b      	ldr	r3, [r7, #32]
   32a76:	781b      	ldrb	r3, [r3, #0]
   32a78:	2b20      	cmp	r3, #32
   32a7a:	d103      	bne.n	32a84 <_http_client_handle_header+0x16c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   32a7c:	6a3b      	ldr	r3, [r7, #32]
   32a7e:	3301      	adds	r3, #1
   32a80:	623b      	str	r3, [r7, #32]
   32a82:	e016      	b.n	32ab2 <_http_client_handle_header+0x19a>
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   32a84:	6a3b      	ldr	r3, [r7, #32]
   32a86:	781b      	ldrb	r3, [r3, #0]
   32a88:	2b43      	cmp	r3, #67	; 0x43
   32a8a:	d003      	beq.n	32a94 <_http_client_handle_header+0x17c>
   32a8c:	6a3b      	ldr	r3, [r7, #32]
   32a8e:	781b      	ldrb	r3, [r3, #0]
   32a90:	2b63      	cmp	r3, #99	; 0x63
   32a92:	d105      	bne.n	32aa0 <_http_client_handle_header+0x188>
					/* Chunked transfer */
					module->req.content_length = -1;
   32a94:	687b      	ldr	r3, [r7, #4]
   32a96:	21cc      	movs	r1, #204	; 0xcc
   32a98:	2201      	movs	r2, #1
   32a9a:	4252      	negs	r2, r2
   32a9c:	505a      	str	r2, [r3, r1]
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
					return 0;
				}
				break;
   32a9e:	e069      	b.n	32b74 <_http_client_handle_header+0x25c>
					_http_client_clear_conn(module, -ENOTSUP);
   32aa0:	2386      	movs	r3, #134	; 0x86
   32aa2:	425a      	negs	r2, r3
   32aa4:	687b      	ldr	r3, [r7, #4]
   32aa6:	0011      	movs	r1, r2
   32aa8:	0018      	movs	r0, r3
   32aaa:	4b41      	ldr	r3, [pc, #260]	; (32bb0 <_http_client_handle_header+0x298>)
   32aac:	4798      	blx	r3
					return 0;
   32aae:	2300      	movs	r3, #0
   32ab0:	e06a      	b.n	32b88 <_http_client_handle_header+0x270>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   32ab2:	69ba      	ldr	r2, [r7, #24]
   32ab4:	6a3b      	ldr	r3, [r7, #32]
   32ab6:	429a      	cmp	r2, r3
   32ab8:	d8dc      	bhi.n	32a74 <_http_client_handle_header+0x15c>
   32aba:	e05b      	b.n	32b74 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   32abc:	493d      	ldr	r1, [pc, #244]	; (32bb4 <_http_client_handle_header+0x29c>)
   32abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32ac0:	220c      	movs	r2, #12
   32ac2:	0018      	movs	r0, r3
   32ac4:	4b36      	ldr	r3, [pc, #216]	; (32ba0 <_http_client_handle_header+0x288>)
   32ac6:	4798      	blx	r3
   32ac8:	1e03      	subs	r3, r0, #0
   32aca:	d126      	bne.n	32b1a <_http_client_handle_header+0x202>
			char *type_ptr = ptr + strlen("Connection: ");
   32acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32ace:	330c      	adds	r3, #12
   32ad0:	61fb      	str	r3, [r7, #28]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   32ad2:	e01d      	b.n	32b10 <_http_client_handle_header+0x1f8>
				if (*type_ptr == ' ') {
   32ad4:	69fb      	ldr	r3, [r7, #28]
   32ad6:	781b      	ldrb	r3, [r3, #0]
   32ad8:	2b20      	cmp	r3, #32
   32ada:	d103      	bne.n	32ae4 <_http_client_handle_header+0x1cc>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   32adc:	69fb      	ldr	r3, [r7, #28]
   32ade:	3301      	adds	r3, #1
   32ae0:	61fb      	str	r3, [r7, #28]
   32ae2:	e015      	b.n	32b10 <_http_client_handle_header+0x1f8>
					continue;
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   32ae4:	69fb      	ldr	r3, [r7, #28]
   32ae6:	781b      	ldrb	r3, [r3, #0]
   32ae8:	2b4b      	cmp	r3, #75	; 0x4b
   32aea:	d003      	beq.n	32af4 <_http_client_handle_header+0x1dc>
   32aec:	69fb      	ldr	r3, [r7, #28]
   32aee:	781b      	ldrb	r3, [r3, #0]
   32af0:	2b6b      	cmp	r3, #107	; 0x6b
   32af2:	d106      	bne.n	32b02 <_http_client_handle_header+0x1ea>
					module->permanent = 1;
   32af4:	687b      	ldr	r3, [r7, #4]
   32af6:	2241      	movs	r2, #65	; 0x41
   32af8:	5c99      	ldrb	r1, [r3, r2]
   32afa:	2002      	movs	r0, #2
   32afc:	4301      	orrs	r1, r0
   32afe:	5499      	strb	r1, [r3, r2]
				} else {
					module->permanent = 0;
				}
				break;
   32b00:	e038      	b.n	32b74 <_http_client_handle_header+0x25c>
					module->permanent = 0;
   32b02:	687b      	ldr	r3, [r7, #4]
   32b04:	2241      	movs	r2, #65	; 0x41
   32b06:	5c99      	ldrb	r1, [r3, r2]
   32b08:	2002      	movs	r0, #2
   32b0a:	4381      	bics	r1, r0
   32b0c:	5499      	strb	r1, [r3, r2]
				break;
   32b0e:	e031      	b.n	32b74 <_http_client_handle_header+0x25c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   32b10:	69ba      	ldr	r2, [r7, #24]
   32b12:	69fb      	ldr	r3, [r7, #28]
   32b14:	429a      	cmp	r2, r3
   32b16:	d8dd      	bhi.n	32ad4 <_http_client_handle_header+0x1bc>
   32b18:	e02c      	b.n	32b74 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   32b1a:	4927      	ldr	r1, [pc, #156]	; (32bb8 <_http_client_handle_header+0x2a0>)
   32b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32b1e:	2205      	movs	r2, #5
   32b20:	0018      	movs	r0, r3
   32b22:	4b1f      	ldr	r3, [pc, #124]	; (32ba0 <_http_client_handle_header+0x288>)
   32b24:	4798      	blx	r3
   32b26:	1e03      	subs	r3, r0, #0
   32b28:	d124      	bne.n	32b74 <_http_client_handle_header+0x25c>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   32b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32b2c:	3309      	adds	r3, #9
   32b2e:	0018      	movs	r0, r3
   32b30:	4b1d      	ldr	r3, [pc, #116]	; (32ba8 <_http_client_handle_header+0x290>)
   32b32:	4798      	blx	r3
   32b34:	0003      	movs	r3, r0
   32b36:	b299      	uxth	r1, r3
   32b38:	687b      	ldr	r3, [r7, #4]
   32b3a:	22e4      	movs	r2, #228	; 0xe4
   32b3c:	5299      	strh	r1, [r3, r2]
			/* Initializing the variables */
			module->resp.content_length = 0;
   32b3e:	687b      	ldr	r3, [r7, #4]
   32b40:	22dc      	movs	r2, #220	; 0xdc
   32b42:	2100      	movs	r1, #0
   32b44:	5099      	str	r1, [r3, r2]
			/* persistent connection is turn on in the HTTP 1.1 or above version of protocols. */  
			if (ptr [5] > '1' || ptr[7] > '0') {
   32b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32b48:	3305      	adds	r3, #5
   32b4a:	781b      	ldrb	r3, [r3, #0]
   32b4c:	2b31      	cmp	r3, #49	; 0x31
   32b4e:	d804      	bhi.n	32b5a <_http_client_handle_header+0x242>
   32b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32b52:	3307      	adds	r3, #7
   32b54:	781b      	ldrb	r3, [r3, #0]
   32b56:	2b30      	cmp	r3, #48	; 0x30
   32b58:	d906      	bls.n	32b68 <_http_client_handle_header+0x250>
				module->permanent = 1;
   32b5a:	687b      	ldr	r3, [r7, #4]
   32b5c:	2241      	movs	r2, #65	; 0x41
   32b5e:	5c99      	ldrb	r1, [r3, r2]
   32b60:	2002      	movs	r0, #2
   32b62:	4301      	orrs	r1, r0
   32b64:	5499      	strb	r1, [r3, r2]
   32b66:	e005      	b.n	32b74 <_http_client_handle_header+0x25c>
			} else {
				module->permanent = 0;
   32b68:	687b      	ldr	r3, [r7, #4]
   32b6a:	2241      	movs	r2, #65	; 0x41
   32b6c:	5c99      	ldrb	r1, [r3, r2]
   32b6e:	2002      	movs	r0, #2
   32b70:	4381      	bics	r1, r0
   32b72:	5499      	strb	r1, [r3, r2]
			}
		}

		ptr = ptr_line_end + strlen(new_line);
   32b74:	4b06      	ldr	r3, [pc, #24]	; (32b90 <_http_client_handle_header+0x278>)
   32b76:	681b      	ldr	r3, [r3, #0]
   32b78:	0018      	movs	r0, r3
   32b7a:	4b08      	ldr	r3, [pc, #32]	; (32b9c <_http_client_handle_header+0x284>)
   32b7c:	4798      	blx	r3
   32b7e:	0002      	movs	r2, r0
   32b80:	69bb      	ldr	r3, [r7, #24]
   32b82:	189b      	adds	r3, r3, r2
   32b84:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   32b86:	e6ce      	b.n	32926 <_http_client_handle_header+0xe>
	}
}
   32b88:	0018      	movs	r0, r3
   32b8a:	46bd      	mov	sp, r7
   32b8c:	b00b      	add	sp, #44	; 0x2c
   32b8e:	bd90      	pop	{r4, r7, pc}
   32b90:	20000120 	.word	0x20000120
   32b94:	00035b3d 	.word	0x00035b3d
   32b98:	00032f7d 	.word	0x00032f7d
   32b9c:	00035abf 	.word	0x00035abf
   32ba0:	00035acd 	.word	0x00035acd
   32ba4:	0003aab8 	.word	0x0003aab8
   32ba8:	00035655 	.word	0x00035655
   32bac:	0003aadc 	.word	0x0003aadc
   32bb0:	00031f95 	.word	0x00031f95
   32bb4:	0003aaf0 	.word	0x0003aaf0
   32bb8:	0003ab00 	.word	0x0003ab00

00032bbc <_http_client_read_chuked_entity>:

static void _http_client_read_chuked_entity(struct http_client_module *const module)
{
   32bbc:	b580      	push	{r7, lr}
   32bbe:	b088      	sub	sp, #32
   32bc0:	af00      	add	r7, sp, #0
   32bc2:	6078      	str	r0, [r7, #4]
	/* In chunked mode, read_length variable is means to remain data in the chunk. */
	union http_client_data data;
	int length = (int)module->recved_size;
   32bc4:	687b      	ldr	r3, [r7, #4]
   32bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32bc8:	61fb      	str	r3, [r7, #28]
	int extension = 0;
   32bca:	2300      	movs	r3, #0
   32bcc:	61bb      	str	r3, [r7, #24]
	char *buffer= module->config.recv_buffer;
   32bce:	687b      	ldr	r3, [r7, #4]
   32bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   32bd2:	617b      	str	r3, [r7, #20]

	do {
		if (module->resp.read_length >= 0) {
   32bd4:	687b      	ldr	r3, [r7, #4]
   32bd6:	22e0      	movs	r2, #224	; 0xe0
   32bd8:	589b      	ldr	r3, [r3, r2]
   32bda:	2b00      	cmp	r3, #0
   32bdc:	db71      	blt.n	32cc2 <_http_client_read_chuked_entity+0x106>
			if (module->resp.read_length == 0) {
   32bde:	687b      	ldr	r3, [r7, #4]
   32be0:	22e0      	movs	r2, #224	; 0xe0
   32be2:	589b      	ldr	r3, [r3, r2]
   32be4:	2b00      	cmp	r3, #0
   32be6:	d134      	bne.n	32c52 <_http_client_read_chuked_entity+0x96>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   32be8:	687b      	ldr	r3, [r7, #4]
   32bea:	22d8      	movs	r2, #216	; 0xd8
   32bec:	2100      	movs	r1, #0
   32bee:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   32bf0:	687b      	ldr	r3, [r7, #4]
   32bf2:	22e4      	movs	r2, #228	; 0xe4
   32bf4:	2100      	movs	r1, #0
   32bf6:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   32bf8:	2308      	movs	r3, #8
   32bfa:	18fb      	adds	r3, r7, r3
   32bfc:	2201      	movs	r2, #1
   32bfe:	721a      	strb	r2, [r3, #8]
				data.recv_chunked_data.length = 0;
   32c00:	2308      	movs	r3, #8
   32c02:	18fb      	adds	r3, r7, r3
   32c04:	2200      	movs	r2, #0
   32c06:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = NULL;
   32c08:	2308      	movs	r3, #8
   32c0a:	18fb      	adds	r3, r7, r3
   32c0c:	2200      	movs	r2, #0
   32c0e:	605a      	str	r2, [r3, #4]
				if (module->cb) {
   32c10:	687b      	ldr	r3, [r7, #4]
   32c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32c14:	2b00      	cmp	r3, #0
   32c16:	d006      	beq.n	32c26 <_http_client_read_chuked_entity+0x6a>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   32c18:	687b      	ldr	r3, [r7, #4]
   32c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32c1c:	2208      	movs	r2, #8
   32c1e:	18ba      	adds	r2, r7, r2
   32c20:	6878      	ldr	r0, [r7, #4]
   32c22:	2103      	movs	r1, #3
   32c24:	4798      	blx	r3
				}
				if (module->permanent == 0) {
   32c26:	687b      	ldr	r3, [r7, #4]
   32c28:	2241      	movs	r2, #65	; 0x41
   32c2a:	5c9b      	ldrb	r3, [r3, r2]
   32c2c:	2202      	movs	r2, #2
   32c2e:	4013      	ands	r3, r2
   32c30:	b2db      	uxtb	r3, r3
   32c32:	2b00      	cmp	r3, #0
   32c34:	d105      	bne.n	32c42 <_http_client_read_chuked_entity+0x86>
					/* This server was not supported keep alive. */
					_http_client_clear_conn(module, 0);
   32c36:	687b      	ldr	r3, [r7, #4]
   32c38:	2100      	movs	r1, #0
   32c3a:	0018      	movs	r0, r3
   32c3c:	4b62      	ldr	r3, [pc, #392]	; (32dc8 <_http_client_read_chuked_entity+0x20c>)
   32c3e:	4798      	blx	r3
					return;
   32c40:	e0bf      	b.n	32dc2 <_http_client_read_chuked_entity+0x206>
				}
				_http_client_move_buffer(module, buffer + 2);
   32c42:	697b      	ldr	r3, [r7, #20]
   32c44:	1c9a      	adds	r2, r3, #2
   32c46:	687b      	ldr	r3, [r7, #4]
   32c48:	0011      	movs	r1, r2
   32c4a:	0018      	movs	r0, r3
   32c4c:	4b5f      	ldr	r3, [pc, #380]	; (32dcc <_http_client_read_chuked_entity+0x210>)
   32c4e:	4798      	blx	r3
   32c50:	e0b2      	b.n	32db8 <_http_client_read_chuked_entity+0x1fc>
			} else if (module->resp.read_length <= length) {
   32c52:	687b      	ldr	r3, [r7, #4]
   32c54:	22e0      	movs	r2, #224	; 0xe0
   32c56:	589a      	ldr	r2, [r3, r2]
   32c58:	69fb      	ldr	r3, [r7, #28]
   32c5a:	429a      	cmp	r2, r3
   32c5c:	dd00      	ble.n	32c60 <_http_client_read_chuked_entity+0xa4>
   32c5e:	e0ab      	b.n	32db8 <_http_client_read_chuked_entity+0x1fc>
				data.recv_chunked_data.length = module->resp.read_length;
   32c60:	687b      	ldr	r3, [r7, #4]
   32c62:	22e0      	movs	r2, #224	; 0xe0
   32c64:	589b      	ldr	r3, [r3, r2]
   32c66:	001a      	movs	r2, r3
   32c68:	2308      	movs	r3, #8
   32c6a:	18fb      	adds	r3, r7, r3
   32c6c:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = buffer;
   32c6e:	2308      	movs	r3, #8
   32c70:	18fb      	adds	r3, r7, r3
   32c72:	697a      	ldr	r2, [r7, #20]
   32c74:	605a      	str	r2, [r3, #4]
				data.recv_chunked_data.is_complete = 0;
   32c76:	2308      	movs	r3, #8
   32c78:	18fb      	adds	r3, r7, r3
   32c7a:	2200      	movs	r2, #0
   32c7c:	721a      	strb	r2, [r3, #8]

				if (module->cb) {
   32c7e:	687b      	ldr	r3, [r7, #4]
   32c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32c82:	2b00      	cmp	r3, #0
   32c84:	d006      	beq.n	32c94 <_http_client_read_chuked_entity+0xd8>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   32c86:	687b      	ldr	r3, [r7, #4]
   32c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32c8a:	2208      	movs	r2, #8
   32c8c:	18ba      	adds	r2, r7, r2
   32c8e:	6878      	ldr	r0, [r7, #4]
   32c90:	2103      	movs	r1, #3
   32c92:	4798      	blx	r3
				}
				/* Last two character in the chunk is '\r\n'. */
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   32c94:	687b      	ldr	r3, [r7, #4]
   32c96:	22e0      	movs	r2, #224	; 0xe0
   32c98:	589b      	ldr	r3, [r3, r2]
   32c9a:	3302      	adds	r3, #2
   32c9c:	697a      	ldr	r2, [r7, #20]
   32c9e:	18d2      	adds	r2, r2, r3
   32ca0:	687b      	ldr	r3, [r7, #4]
   32ca2:	0011      	movs	r1, r2
   32ca4:	0018      	movs	r0, r3
   32ca6:	4b49      	ldr	r3, [pc, #292]	; (32dcc <_http_client_read_chuked_entity+0x210>)
   32ca8:	4798      	blx	r3
				length = (int)module->recved_size;
   32caa:	687b      	ldr	r3, [r7, #4]
   32cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32cae:	61fb      	str	r3, [r7, #28]
				buffer = module->config.recv_buffer;
   32cb0:	687b      	ldr	r3, [r7, #4]
   32cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   32cb4:	617b      	str	r3, [r7, #20]
				module->resp.read_length = -1;
   32cb6:	687b      	ldr	r3, [r7, #4]
   32cb8:	21e0      	movs	r1, #224	; 0xe0
   32cba:	2201      	movs	r2, #1
   32cbc:	4252      	negs	r2, r2
   32cbe:	505a      	str	r2, [r3, r1]
   32cc0:	e07a      	b.n	32db8 <_http_client_read_chuked_entity+0x1fc>
			}
		} else {
			/* Read chunked length. */
			module->resp.read_length = 0;
   32cc2:	687b      	ldr	r3, [r7, #4]
   32cc4:	22e0      	movs	r2, #224	; 0xe0
   32cc6:	2100      	movs	r1, #0
   32cc8:	5099      	str	r1, [r3, r2]
			for (; length > 0; buffer++, length--) {
   32cca:	e05a      	b.n	32d82 <_http_client_read_chuked_entity+0x1c6>
				if (*buffer == '\n') {
   32ccc:	697b      	ldr	r3, [r7, #20]
   32cce:	781b      	ldrb	r3, [r3, #0]
   32cd0:	2b0a      	cmp	r3, #10
   32cd2:	d106      	bne.n	32ce2 <_http_client_read_chuked_entity+0x126>
					buffer++;
   32cd4:	697b      	ldr	r3, [r7, #20]
   32cd6:	3301      	adds	r3, #1
   32cd8:	617b      	str	r3, [r7, #20]
					length--;
   32cda:	69fb      	ldr	r3, [r7, #28]
   32cdc:	3b01      	subs	r3, #1
   32cde:	61fb      	str	r3, [r7, #28]
					break;
   32ce0:	e052      	b.n	32d88 <_http_client_read_chuked_entity+0x1cc>
				}
				if (extension != 0) {
   32ce2:	69bb      	ldr	r3, [r7, #24]
   32ce4:	2b00      	cmp	r3, #0
   32ce6:	d145      	bne.n	32d74 <_http_client_read_chuked_entity+0x1b8>
					continue;
				}
				if (*buffer >= '0' && *buffer <= '9') {
   32ce8:	697b      	ldr	r3, [r7, #20]
   32cea:	781b      	ldrb	r3, [r3, #0]
   32cec:	2b2f      	cmp	r3, #47	; 0x2f
   32cee:	d910      	bls.n	32d12 <_http_client_read_chuked_entity+0x156>
   32cf0:	697b      	ldr	r3, [r7, #20]
   32cf2:	781b      	ldrb	r3, [r3, #0]
   32cf4:	2b39      	cmp	r3, #57	; 0x39
   32cf6:	d80c      	bhi.n	32d12 <_http_client_read_chuked_entity+0x156>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   32cf8:	687b      	ldr	r3, [r7, #4]
   32cfa:	22e0      	movs	r2, #224	; 0xe0
   32cfc:	589b      	ldr	r3, [r3, r2]
   32cfe:	011b      	lsls	r3, r3, #4
   32d00:	697a      	ldr	r2, [r7, #20]
   32d02:	7812      	ldrb	r2, [r2, #0]
   32d04:	189b      	adds	r3, r3, r2
   32d06:	3b30      	subs	r3, #48	; 0x30
   32d08:	001a      	movs	r2, r3
   32d0a:	687b      	ldr	r3, [r7, #4]
   32d0c:	21e0      	movs	r1, #224	; 0xe0
   32d0e:	505a      	str	r2, [r3, r1]
   32d10:	e031      	b.n	32d76 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   32d12:	697b      	ldr	r3, [r7, #20]
   32d14:	781b      	ldrb	r3, [r3, #0]
   32d16:	2b60      	cmp	r3, #96	; 0x60
   32d18:	d910      	bls.n	32d3c <_http_client_read_chuked_entity+0x180>
   32d1a:	697b      	ldr	r3, [r7, #20]
   32d1c:	781b      	ldrb	r3, [r3, #0]
   32d1e:	2b66      	cmp	r3, #102	; 0x66
   32d20:	d80c      	bhi.n	32d3c <_http_client_read_chuked_entity+0x180>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   32d22:	687b      	ldr	r3, [r7, #4]
   32d24:	22e0      	movs	r2, #224	; 0xe0
   32d26:	589b      	ldr	r3, [r3, r2]
   32d28:	011b      	lsls	r3, r3, #4
   32d2a:	697a      	ldr	r2, [r7, #20]
   32d2c:	7812      	ldrb	r2, [r2, #0]
   32d2e:	189b      	adds	r3, r3, r2
   32d30:	3b61      	subs	r3, #97	; 0x61
   32d32:	001a      	movs	r2, r3
   32d34:	687b      	ldr	r3, [r7, #4]
   32d36:	21e0      	movs	r1, #224	; 0xe0
   32d38:	505a      	str	r2, [r3, r1]
   32d3a:	e01c      	b.n	32d76 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   32d3c:	697b      	ldr	r3, [r7, #20]
   32d3e:	781b      	ldrb	r3, [r3, #0]
   32d40:	2b40      	cmp	r3, #64	; 0x40
   32d42:	d910      	bls.n	32d66 <_http_client_read_chuked_entity+0x1aa>
   32d44:	697b      	ldr	r3, [r7, #20]
   32d46:	781b      	ldrb	r3, [r3, #0]
   32d48:	2b46      	cmp	r3, #70	; 0x46
   32d4a:	d80c      	bhi.n	32d66 <_http_client_read_chuked_entity+0x1aa>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   32d4c:	687b      	ldr	r3, [r7, #4]
   32d4e:	22e0      	movs	r2, #224	; 0xe0
   32d50:	589b      	ldr	r3, [r3, r2]
   32d52:	011b      	lsls	r3, r3, #4
   32d54:	697a      	ldr	r2, [r7, #20]
   32d56:	7812      	ldrb	r2, [r2, #0]
   32d58:	189b      	adds	r3, r3, r2
   32d5a:	3b41      	subs	r3, #65	; 0x41
   32d5c:	001a      	movs	r2, r3
   32d5e:	687b      	ldr	r3, [r7, #4]
   32d60:	21e0      	movs	r1, #224	; 0xe0
   32d62:	505a      	str	r2, [r3, r1]
   32d64:	e007      	b.n	32d76 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer == ';') {
   32d66:	697b      	ldr	r3, [r7, #20]
   32d68:	781b      	ldrb	r3, [r3, #0]
   32d6a:	2b3b      	cmp	r3, #59	; 0x3b
   32d6c:	d103      	bne.n	32d76 <_http_client_read_chuked_entity+0x1ba>
					extension = 1;
   32d6e:	2301      	movs	r3, #1
   32d70:	61bb      	str	r3, [r7, #24]
   32d72:	e000      	b.n	32d76 <_http_client_read_chuked_entity+0x1ba>
					continue;
   32d74:	46c0      	nop			; (mov r8, r8)
			for (; length > 0; buffer++, length--) {
   32d76:	697b      	ldr	r3, [r7, #20]
   32d78:	3301      	adds	r3, #1
   32d7a:	617b      	str	r3, [r7, #20]
   32d7c:	69fb      	ldr	r3, [r7, #28]
   32d7e:	3b01      	subs	r3, #1
   32d80:	61fb      	str	r3, [r7, #28]
   32d82:	69fb      	ldr	r3, [r7, #28]
   32d84:	2b00      	cmp	r3, #0
   32d86:	dca1      	bgt.n	32ccc <_http_client_read_chuked_entity+0x110>
				}
			}

			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   32d88:	687b      	ldr	r3, [r7, #4]
   32d8a:	22e0      	movs	r2, #224	; 0xe0
   32d8c:	589a      	ldr	r2, [r3, r2]
   32d8e:	687b      	ldr	r3, [r7, #4]
   32d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   32d92:	429a      	cmp	r2, r3
   32d94:	dd07      	ble.n	32da6 <_http_client_read_chuked_entity+0x1ea>
				/* Chunked size is too big. */
				/* Through exception. */
				_http_client_clear_conn(module, -EOVERFLOW);
   32d96:	238b      	movs	r3, #139	; 0x8b
   32d98:	425a      	negs	r2, r3
   32d9a:	687b      	ldr	r3, [r7, #4]
   32d9c:	0011      	movs	r1, r2
   32d9e:	0018      	movs	r0, r3
   32da0:	4b09      	ldr	r3, [pc, #36]	; (32dc8 <_http_client_read_chuked_entity+0x20c>)
   32da2:	4798      	blx	r3
				return;
   32da4:	e00d      	b.n	32dc2 <_http_client_read_chuked_entity+0x206>
			}

			if (length  == 0) {
   32da6:	69fb      	ldr	r3, [r7, #28]
   32da8:	2b00      	cmp	r3, #0
   32daa:	d105      	bne.n	32db8 <_http_client_read_chuked_entity+0x1fc>
				/* currently not received packet yet. */
				module->resp.read_length = -1;
   32dac:	687b      	ldr	r3, [r7, #4]
   32dae:	21e0      	movs	r1, #224	; 0xe0
   32db0:	2201      	movs	r2, #1
   32db2:	4252      	negs	r2, r2
   32db4:	505a      	str	r2, [r3, r1]
				return;
   32db6:	e004      	b.n	32dc2 <_http_client_read_chuked_entity+0x206>
			}
		}
	} while(module->recved_size > 0);
   32db8:	687b      	ldr	r3, [r7, #4]
   32dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32dbc:	2b00      	cmp	r3, #0
   32dbe:	d000      	beq.n	32dc2 <_http_client_read_chuked_entity+0x206>
   32dc0:	e708      	b.n	32bd4 <_http_client_read_chuked_entity+0x18>
}
   32dc2:	46bd      	mov	sp, r7
   32dc4:	b008      	add	sp, #32
   32dc6:	bd80      	pop	{r7, pc}
   32dc8:	00031f95 	.word	0x00031f95
   32dcc:	00032f7d 	.word	0x00032f7d

00032dd0 <_http_client_handle_entity>:

int _http_client_handle_entity(struct http_client_module *const module)
{
   32dd0:	b580      	push	{r7, lr}
   32dd2:	b086      	sub	sp, #24
   32dd4:	af00      	add	r7, sp, #0
   32dd6:	6078      	str	r0, [r7, #4]
	union http_client_data data;
	char *buffer = module->config.recv_buffer;
   32dd8:	687b      	ldr	r3, [r7, #4]
   32dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   32ddc:	617b      	str	r3, [r7, #20]

	/* If data size is lesser than buffer size, read all buffer and retransmission it to application. */
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   32dde:	687b      	ldr	r3, [r7, #4]
   32de0:	22dc      	movs	r2, #220	; 0xdc
   32de2:	589b      	ldr	r3, [r3, r2]
   32de4:	2b00      	cmp	r3, #0
   32de6:	db58      	blt.n	32e9a <_http_client_handle_entity+0xca>
   32de8:	687b      	ldr	r3, [r7, #4]
   32dea:	22dc      	movs	r2, #220	; 0xdc
   32dec:	589a      	ldr	r2, [r3, r2]
   32dee:	687b      	ldr	r3, [r7, #4]
   32df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   32df2:	429a      	cmp	r2, r3
   32df4:	dc51      	bgt.n	32e9a <_http_client_handle_entity+0xca>
		if ((int)module->recved_size >= module->resp.content_length) {
   32df6:	687b      	ldr	r3, [r7, #4]
   32df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32dfa:	0019      	movs	r1, r3
   32dfc:	687b      	ldr	r3, [r7, #4]
   32dfe:	22dc      	movs	r2, #220	; 0xdc
   32e00:	589b      	ldr	r3, [r3, r2]
   32e02:	4299      	cmp	r1, r3
   32e04:	da00      	bge.n	32e08 <_http_client_handle_entity+0x38>
   32e06:	e0a9      	b.n	32f5c <_http_client_handle_entity+0x18c>
			if (module->cb && module->resp.response_code) {
   32e08:	687b      	ldr	r3, [r7, #4]
   32e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32e0c:	2b00      	cmp	r3, #0
   32e0e:	d020      	beq.n	32e52 <_http_client_handle_entity+0x82>
   32e10:	687b      	ldr	r3, [r7, #4]
   32e12:	22e4      	movs	r2, #228	; 0xe4
   32e14:	5a9b      	ldrh	r3, [r3, r2]
   32e16:	2b00      	cmp	r3, #0
   32e18:	d01b      	beq.n	32e52 <_http_client_handle_entity+0x82>
				data.recv_response.response_code = module->resp.response_code;
   32e1a:	687b      	ldr	r3, [r7, #4]
   32e1c:	22e4      	movs	r2, #228	; 0xe4
   32e1e:	5a9a      	ldrh	r2, [r3, r2]
   32e20:	2308      	movs	r3, #8
   32e22:	18fb      	adds	r3, r7, r3
   32e24:	801a      	strh	r2, [r3, #0]
				data.recv_response.is_chunked = 0;
   32e26:	2308      	movs	r3, #8
   32e28:	18fb      	adds	r3, r7, r3
   32e2a:	2200      	movs	r2, #0
   32e2c:	709a      	strb	r2, [r3, #2]
				data.recv_response.content_length = module->resp.content_length;
   32e2e:	687b      	ldr	r3, [r7, #4]
   32e30:	22dc      	movs	r2, #220	; 0xdc
   32e32:	589b      	ldr	r3, [r3, r2]
   32e34:	001a      	movs	r2, r3
   32e36:	2308      	movs	r3, #8
   32e38:	18fb      	adds	r3, r7, r3
   32e3a:	605a      	str	r2, [r3, #4]
				data.recv_response.content = buffer;
   32e3c:	2308      	movs	r3, #8
   32e3e:	18fb      	adds	r3, r7, r3
   32e40:	697a      	ldr	r2, [r7, #20]
   32e42:	609a      	str	r2, [r3, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   32e44:	687b      	ldr	r3, [r7, #4]
   32e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32e48:	2208      	movs	r2, #8
   32e4a:	18ba      	adds	r2, r7, r2
   32e4c:	6878      	ldr	r0, [r7, #4]
   32e4e:	2102      	movs	r1, #2
   32e50:	4798      	blx	r3
			}
			module->resp.state = STATE_PARSE_HEADER;
   32e52:	687b      	ldr	r3, [r7, #4]
   32e54:	22d8      	movs	r2, #216	; 0xd8
   32e56:	2100      	movs	r1, #0
   32e58:	5099      	str	r1, [r3, r2]
			module->resp.response_code = 0;
   32e5a:	687b      	ldr	r3, [r7, #4]
   32e5c:	22e4      	movs	r2, #228	; 0xe4
   32e5e:	2100      	movs	r1, #0
   32e60:	5299      	strh	r1, [r3, r2]
			
			if (module->permanent == 0) {
   32e62:	687b      	ldr	r3, [r7, #4]
   32e64:	2241      	movs	r2, #65	; 0x41
   32e66:	5c9b      	ldrb	r3, [r3, r2]
   32e68:	2202      	movs	r2, #2
   32e6a:	4013      	ands	r3, r2
   32e6c:	b2db      	uxtb	r3, r3
   32e6e:	2b00      	cmp	r3, #0
   32e70:	d105      	bne.n	32e7e <_http_client_handle_entity+0xae>
				/* This server was not supported keep alive. */
				_http_client_clear_conn(module, 0);
   32e72:	687b      	ldr	r3, [r7, #4]
   32e74:	2100      	movs	r1, #0
   32e76:	0018      	movs	r0, r3
   32e78:	4b3b      	ldr	r3, [pc, #236]	; (32f68 <_http_client_handle_entity+0x198>)
   32e7a:	4798      	blx	r3
		if ((int)module->recved_size >= module->resp.content_length) {
   32e7c:	e06e      	b.n	32f5c <_http_client_handle_entity+0x18c>
			} else {
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   32e7e:	687b      	ldr	r3, [r7, #4]
   32e80:	22dc      	movs	r2, #220	; 0xdc
   32e82:	589b      	ldr	r3, [r3, r2]
   32e84:	001a      	movs	r2, r3
   32e86:	697b      	ldr	r3, [r7, #20]
   32e88:	189a      	adds	r2, r3, r2
   32e8a:	687b      	ldr	r3, [r7, #4]
   32e8c:	0011      	movs	r1, r2
   32e8e:	0018      	movs	r0, r3
   32e90:	4b36      	ldr	r3, [pc, #216]	; (32f6c <_http_client_handle_entity+0x19c>)
   32e92:	4798      	blx	r3
				return module->recved_size;
   32e94:	687b      	ldr	r3, [r7, #4]
   32e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32e98:	e061      	b.n	32f5e <_http_client_handle_entity+0x18e>
			}
		}
		/* else, buffer was not received enough size yet. */
	} else {
		if (module->resp.content_length >= 0) {
   32e9a:	687b      	ldr	r3, [r7, #4]
   32e9c:	22dc      	movs	r2, #220	; 0xdc
   32e9e:	589b      	ldr	r3, [r3, r2]
   32ea0:	2b00      	cmp	r3, #0
   32ea2:	db57      	blt.n	32f54 <_http_client_handle_entity+0x184>
			data.recv_chunked_data.length = module->recved_size;
   32ea4:	687b      	ldr	r3, [r7, #4]
   32ea6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   32ea8:	2308      	movs	r3, #8
   32eaa:	18fb      	adds	r3, r7, r3
   32eac:	601a      	str	r2, [r3, #0]
			data.recv_chunked_data.data = buffer;
   32eae:	2308      	movs	r3, #8
   32eb0:	18fb      	adds	r3, r7, r3
   32eb2:	697a      	ldr	r2, [r7, #20]
   32eb4:	605a      	str	r2, [r3, #4]
			module->resp.read_length += (int)module->recved_size;
   32eb6:	687b      	ldr	r3, [r7, #4]
   32eb8:	22e0      	movs	r2, #224	; 0xe0
   32eba:	589a      	ldr	r2, [r3, r2]
   32ebc:	687b      	ldr	r3, [r7, #4]
   32ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32ec0:	18d2      	adds	r2, r2, r3
   32ec2:	687b      	ldr	r3, [r7, #4]
   32ec4:	21e0      	movs	r1, #224	; 0xe0
   32ec6:	505a      	str	r2, [r3, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   32ec8:	687b      	ldr	r3, [r7, #4]
   32eca:	22dc      	movs	r2, #220	; 0xdc
   32ecc:	589a      	ldr	r2, [r3, r2]
   32ece:	687b      	ldr	r3, [r7, #4]
   32ed0:	21e0      	movs	r1, #224	; 0xe0
   32ed2:	585b      	ldr	r3, [r3, r1]
   32ed4:	429a      	cmp	r2, r3
   32ed6:	dc0c      	bgt.n	32ef2 <_http_client_handle_entity+0x122>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   32ed8:	687b      	ldr	r3, [r7, #4]
   32eda:	22d8      	movs	r2, #216	; 0xd8
   32edc:	2100      	movs	r1, #0
   32ede:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   32ee0:	687b      	ldr	r3, [r7, #4]
   32ee2:	22e4      	movs	r2, #228	; 0xe4
   32ee4:	2100      	movs	r1, #0
   32ee6:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   32ee8:	2308      	movs	r3, #8
   32eea:	18fb      	adds	r3, r7, r3
   32eec:	2201      	movs	r2, #1
   32eee:	721a      	strb	r2, [r3, #8]
   32ef0:	e003      	b.n	32efa <_http_client_handle_entity+0x12a>
			} else {
				data.recv_chunked_data.is_complete = 0;
   32ef2:	2308      	movs	r3, #8
   32ef4:	18fb      	adds	r3, r7, r3
   32ef6:	2200      	movs	r2, #0
   32ef8:	721a      	strb	r2, [r3, #8]
			}

			if (module->cb) {
   32efa:	687b      	ldr	r3, [r7, #4]
   32efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32efe:	2b00      	cmp	r3, #0
   32f00:	d006      	beq.n	32f10 <_http_client_handle_entity+0x140>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   32f02:	687b      	ldr	r3, [r7, #4]
   32f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32f06:	2208      	movs	r2, #8
   32f08:	18ba      	adds	r2, r7, r2
   32f0a:	6878      	ldr	r0, [r7, #4]
   32f0c:	2103      	movs	r1, #3
   32f0e:	4798      	blx	r3
			}
			
			if (data.recv_chunked_data.is_complete == 1) {
   32f10:	2308      	movs	r3, #8
   32f12:	18fb      	adds	r3, r7, r3
   32f14:	7a1b      	ldrb	r3, [r3, #8]
   32f16:	2b01      	cmp	r3, #1
   32f18:	d112      	bne.n	32f40 <_http_client_handle_entity+0x170>
				if (module->permanent == 0) {
   32f1a:	687b      	ldr	r3, [r7, #4]
   32f1c:	2241      	movs	r2, #65	; 0x41
   32f1e:	5c9b      	ldrb	r3, [r3, r2]
   32f20:	2202      	movs	r2, #2
   32f22:	4013      	ands	r3, r2
   32f24:	b2db      	uxtb	r3, r3
   32f26:	2b00      	cmp	r3, #0
   32f28:	d10a      	bne.n	32f40 <_http_client_handle_entity+0x170>
					/* This server was not supported keep alive. */
					printf("1\r\n");
   32f2a:	4b11      	ldr	r3, [pc, #68]	; (32f70 <_http_client_handle_entity+0x1a0>)
   32f2c:	0018      	movs	r0, r3
   32f2e:	4b11      	ldr	r3, [pc, #68]	; (32f74 <_http_client_handle_entity+0x1a4>)
   32f30:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   32f32:	687b      	ldr	r3, [r7, #4]
   32f34:	2100      	movs	r1, #0
   32f36:	0018      	movs	r0, r3
   32f38:	4b0b      	ldr	r3, [pc, #44]	; (32f68 <_http_client_handle_entity+0x198>)
   32f3a:	4798      	blx	r3
					return 0;
   32f3c:	2300      	movs	r3, #0
   32f3e:	e00e      	b.n	32f5e <_http_client_handle_entity+0x18e>
				}
			}
			_http_client_move_buffer(module, buffer + module->recved_size);
   32f40:	687b      	ldr	r3, [r7, #4]
   32f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32f44:	697a      	ldr	r2, [r7, #20]
   32f46:	18d2      	adds	r2, r2, r3
   32f48:	687b      	ldr	r3, [r7, #4]
   32f4a:	0011      	movs	r1, r2
   32f4c:	0018      	movs	r0, r3
   32f4e:	4b07      	ldr	r3, [pc, #28]	; (32f6c <_http_client_handle_entity+0x19c>)
   32f50:	4798      	blx	r3
   32f52:	e003      	b.n	32f5c <_http_client_handle_entity+0x18c>
		} else {
			_http_client_read_chuked_entity(module);
   32f54:	687b      	ldr	r3, [r7, #4]
   32f56:	0018      	movs	r0, r3
   32f58:	4b07      	ldr	r3, [pc, #28]	; (32f78 <_http_client_handle_entity+0x1a8>)
   32f5a:	4798      	blx	r3
		}
	}

	return 0;
   32f5c:	2300      	movs	r3, #0
}
   32f5e:	0018      	movs	r0, r3
   32f60:	46bd      	mov	sp, r7
   32f62:	b006      	add	sp, #24
   32f64:	bd80      	pop	{r7, pc}
   32f66:	46c0      	nop			; (mov r8, r8)
   32f68:	00031f95 	.word	0x00031f95
   32f6c:	00032f7d 	.word	0x00032f7d
   32f70:	0003ab08 	.word	0x0003ab08
   32f74:	00035929 	.word	0x00035929
   32f78:	00032bbd 	.word	0x00032bbd

00032f7c <_http_client_move_buffer>:

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   32f7c:	b580      	push	{r7, lr}
   32f7e:	b084      	sub	sp, #16
   32f80:	af00      	add	r7, sp, #0
   32f82:	6078      	str	r0, [r7, #4]
   32f84:	6039      	str	r1, [r7, #0]
	char *buffer = module->config.recv_buffer;
   32f86:	687b      	ldr	r3, [r7, #4]
   32f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   32f8a:	60fb      	str	r3, [r7, #12]
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   32f8c:	687b      	ldr	r3, [r7, #4]
   32f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32f90:	001a      	movs	r2, r3
   32f92:	683b      	ldr	r3, [r7, #0]
   32f94:	1ad2      	subs	r2, r2, r3
   32f96:	68fb      	ldr	r3, [r7, #12]
   32f98:	18d3      	adds	r3, r2, r3
   32f9a:	60bb      	str	r3, [r7, #8]

	if (remain > 0) {
   32f9c:	68bb      	ldr	r3, [r7, #8]
   32f9e:	2b00      	cmp	r3, #0
   32fa0:	dd09      	ble.n	32fb6 <_http_client_move_buffer+0x3a>
		memmove(buffer, base, remain);
   32fa2:	68ba      	ldr	r2, [r7, #8]
   32fa4:	6839      	ldr	r1, [r7, #0]
   32fa6:	68fb      	ldr	r3, [r7, #12]
   32fa8:	0018      	movs	r0, r3
   32faa:	4b06      	ldr	r3, [pc, #24]	; (32fc4 <_http_client_move_buffer+0x48>)
   32fac:	4798      	blx	r3
		module->recved_size = remain;
   32fae:	68ba      	ldr	r2, [r7, #8]
   32fb0:	687b      	ldr	r3, [r7, #4]
   32fb2:	645a      	str	r2, [r3, #68]	; 0x44
	} else {
		module->recved_size = 0;
	}
}
   32fb4:	e002      	b.n	32fbc <_http_client_move_buffer+0x40>
		module->recved_size = 0;
   32fb6:	687b      	ldr	r3, [r7, #4]
   32fb8:	2200      	movs	r2, #0
   32fba:	645a      	str	r2, [r3, #68]	; 0x44
}
   32fbc:	46c0      	nop			; (mov r8, r8)
   32fbe:	46bd      	mov	sp, r7
   32fc0:	b004      	add	sp, #16
   32fc2:	bd80      	pop	{r7, pc}
   32fc4:	000356e3 	.word	0x000356e3

00032fc8 <stream_writer_init>:
#include <asf.h>
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
   32fc8:	b580      	push	{r7, lr}
   32fca:	b084      	sub	sp, #16
   32fcc:	af00      	add	r7, sp, #0
   32fce:	60f8      	str	r0, [r7, #12]
   32fd0:	60b9      	str	r1, [r7, #8]
   32fd2:	607a      	str	r2, [r7, #4]
   32fd4:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
   32fd6:	68fb      	ldr	r3, [r7, #12]
   32fd8:	687a      	ldr	r2, [r7, #4]
   32fda:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
   32fdc:	68fb      	ldr	r3, [r7, #12]
   32fde:	68ba      	ldr	r2, [r7, #8]
   32fe0:	611a      	str	r2, [r3, #16]
	writer->written = 0;
   32fe2:	68fb      	ldr	r3, [r7, #12]
   32fe4:	2200      	movs	r2, #0
   32fe6:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
   32fe8:	68fb      	ldr	r3, [r7, #12]
   32fea:	683a      	ldr	r2, [r7, #0]
   32fec:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
   32fee:	68fb      	ldr	r3, [r7, #12]
   32ff0:	69ba      	ldr	r2, [r7, #24]
   32ff2:	60da      	str	r2, [r3, #12]
}
   32ff4:	46c0      	nop			; (mov r8, r8)
   32ff6:	46bd      	mov	sp, r7
   32ff8:	b004      	add	sp, #16
   32ffa:	bd80      	pop	{r7, pc}

00032ffc <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
   32ffc:	b580      	push	{r7, lr}
   32ffe:	b084      	sub	sp, #16
   33000:	af00      	add	r7, sp, #0
   33002:	6078      	str	r0, [r7, #4]
   33004:	000a      	movs	r2, r1
   33006:	1cfb      	adds	r3, r7, #3
   33008:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
   3300a:	687b      	ldr	r3, [r7, #4]
   3300c:	681a      	ldr	r2, [r3, #0]
   3300e:	687b      	ldr	r3, [r7, #4]
   33010:	685b      	ldr	r3, [r3, #4]
   33012:	1ad3      	subs	r3, r2, r3
   33014:	60fb      	str	r3, [r7, #12]
	
	if (remain < 1) {
   33016:	68fb      	ldr	r3, [r7, #12]
   33018:	2b00      	cmp	r3, #0
   3301a:	dc03      	bgt.n	33024 <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
   3301c:	687b      	ldr	r3, [r7, #4]
   3301e:	0018      	movs	r0, r3
   33020:	4b08      	ldr	r3, [pc, #32]	; (33044 <stream_writer_send_8+0x48>)
   33022:	4798      	blx	r3
	}
	
	writer->buffer[writer->written++] = (char)value;
   33024:	687b      	ldr	r3, [r7, #4]
   33026:	6919      	ldr	r1, [r3, #16]
   33028:	687b      	ldr	r3, [r7, #4]
   3302a:	685b      	ldr	r3, [r3, #4]
   3302c:	1c58      	adds	r0, r3, #1
   3302e:	687a      	ldr	r2, [r7, #4]
   33030:	6050      	str	r0, [r2, #4]
   33032:	18cb      	adds	r3, r1, r3
   33034:	1cfa      	adds	r2, r7, #3
   33036:	7812      	ldrb	r2, [r2, #0]
   33038:	701a      	strb	r2, [r3, #0]
}
   3303a:	46c0      	nop			; (mov r8, r8)
   3303c:	46bd      	mov	sp, r7
   3303e:	b004      	add	sp, #16
   33040:	bd80      	pop	{r7, pc}
   33042:	46c0      	nop			; (mov r8, r8)
   33044:	00033085 	.word	0x00033085

00033048 <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, const char *buffer, size_t length)
{
   33048:	b580      	push	{r7, lr}
   3304a:	b084      	sub	sp, #16
   3304c:	af00      	add	r7, sp, #0
   3304e:	60f8      	str	r0, [r7, #12]
   33050:	60b9      	str	r1, [r7, #8]
   33052:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
   33054:	e00d      	b.n	33072 <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
   33056:	68bb      	ldr	r3, [r7, #8]
   33058:	781b      	ldrb	r3, [r3, #0]
   3305a:	b25a      	sxtb	r2, r3
   3305c:	68fb      	ldr	r3, [r7, #12]
   3305e:	0011      	movs	r1, r2
   33060:	0018      	movs	r0, r3
   33062:	4b07      	ldr	r3, [pc, #28]	; (33080 <stream_writer_send_buffer+0x38>)
   33064:	4798      	blx	r3
	for (; length > 0; length--, buffer++) {
   33066:	687b      	ldr	r3, [r7, #4]
   33068:	3b01      	subs	r3, #1
   3306a:	607b      	str	r3, [r7, #4]
   3306c:	68bb      	ldr	r3, [r7, #8]
   3306e:	3301      	adds	r3, #1
   33070:	60bb      	str	r3, [r7, #8]
   33072:	687b      	ldr	r3, [r7, #4]
   33074:	2b00      	cmp	r3, #0
   33076:	d1ee      	bne.n	33056 <stream_writer_send_buffer+0xe>
	}
}
   33078:	46c0      	nop			; (mov r8, r8)
   3307a:	46bd      	mov	sp, r7
   3307c:	b004      	add	sp, #16
   3307e:	bd80      	pop	{r7, pc}
   33080:	00032ffd 	.word	0x00032ffd

00033084 <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
   33084:	b590      	push	{r4, r7, lr}
   33086:	b083      	sub	sp, #12
   33088:	af00      	add	r7, sp, #0
   3308a:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
   3308c:	687b      	ldr	r3, [r7, #4]
   3308e:	685b      	ldr	r3, [r3, #4]
   33090:	2b00      	cmp	r3, #0
   33092:	d00c      	beq.n	330ae <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   33094:	687b      	ldr	r3, [r7, #4]
   33096:	689c      	ldr	r4, [r3, #8]
   33098:	687b      	ldr	r3, [r7, #4]
   3309a:	68d8      	ldr	r0, [r3, #12]
   3309c:	687b      	ldr	r3, [r7, #4]
   3309e:	6919      	ldr	r1, [r3, #16]
   330a0:	687b      	ldr	r3, [r7, #4]
   330a2:	685b      	ldr	r3, [r3, #4]
   330a4:	001a      	movs	r2, r3
   330a6:	47a0      	blx	r4
		writer->written = 0;
   330a8:	687b      	ldr	r3, [r7, #4]
   330aa:	2200      	movs	r2, #0
   330ac:	605a      	str	r2, [r3, #4]
	}
}
   330ae:	46c0      	nop			; (mov r8, r8)
   330b0:	46bd      	mov	sp, r7
   330b2:	b003      	add	sp, #12
   330b4:	bd90      	pop	{r4, r7, pc}
	...

000330b8 <system_cpu_clock_get_hz>:
 * generic clock and the set CPU bus divider.
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
   330b8:	b580      	push	{r7, lr}
   330ba:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   330bc:	2000      	movs	r0, #0
   330be:	4b05      	ldr	r3, [pc, #20]	; (330d4 <system_cpu_clock_get_hz+0x1c>)
   330c0:	4798      	blx	r3
   330c2:	0002      	movs	r2, r0
   330c4:	4b04      	ldr	r3, [pc, #16]	; (330d8 <system_cpu_clock_get_hz+0x20>)
   330c6:	7a1b      	ldrb	r3, [r3, #8]
   330c8:	b2db      	uxtb	r3, r3
   330ca:	40da      	lsrs	r2, r3
   330cc:	0013      	movs	r3, r2
}
   330ce:	0018      	movs	r0, r3
   330d0:	46bd      	mov	sp, r7
   330d2:	bd80      	pop	{r7, pc}
   330d4:	0002aa99 	.word	0x0002aa99
   330d8:	40000400 	.word	0x40000400

000330dc <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
   330dc:	b580      	push	{r7, lr}
   330de:	b084      	sub	sp, #16
   330e0:	af00      	add	r7, sp, #0
   330e2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   330e4:	687b      	ldr	r3, [r7, #4]
   330e6:	681b      	ldr	r3, [r3, #0]
   330e8:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   330ea:	46c0      	nop			; (mov r8, r8)
   330ec:	68fb      	ldr	r3, [r7, #12]
   330ee:	689b      	ldr	r3, [r3, #8]
   330f0:	2202      	movs	r2, #2
   330f2:	4013      	ands	r3, r2
   330f4:	d1fa      	bne.n	330ec <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   330f6:	68fb      	ldr	r3, [r7, #12]
   330f8:	681b      	ldr	r3, [r3, #0]
   330fa:	2202      	movs	r2, #2
   330fc:	431a      	orrs	r2, r3
   330fe:	68fb      	ldr	r3, [r7, #12]
   33100:	601a      	str	r2, [r3, #0]
}
   33102:	46c0      	nop			; (mov r8, r8)
   33104:	46bd      	mov	sp, r7
   33106:	b004      	add	sp, #16
   33108:	bd80      	pop	{r7, pc}
	...

0003310c <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
   3310c:	b580      	push	{r7, lr}
   3310e:	b082      	sub	sp, #8
   33110:	af00      	add	r7, sp, #0
   33112:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
   33114:	4b04      	ldr	r3, [pc, #16]	; (33128 <sw_timer_tcc_callback+0x1c>)
   33116:	681b      	ldr	r3, [r3, #0]
   33118:	1c5a      	adds	r2, r3, #1
   3311a:	4b03      	ldr	r3, [pc, #12]	; (33128 <sw_timer_tcc_callback+0x1c>)
   3311c:	601a      	str	r2, [r3, #0]
}
   3311e:	46c0      	nop			; (mov r8, r8)
   33120:	46bd      	mov	sp, r7
   33122:	b002      	add	sp, #8
   33124:	bd80      	pop	{r7, pc}
   33126:	46c0      	nop			; (mov r8, r8)
   33128:	2000434c 	.word	0x2000434c

0003312c <sw_timer_get_config_defaults>:
}

#endif

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
   3312c:	b580      	push	{r7, lr}
   3312e:	b082      	sub	sp, #8
   33130:	af00      	add	r7, sp, #0
   33132:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
   33134:	687b      	ldr	r3, [r7, #4]
   33136:	2264      	movs	r2, #100	; 0x64
   33138:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
   3313a:	687b      	ldr	r3, [r7, #4]
   3313c:	2200      	movs	r2, #0
   3313e:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
   33140:	687b      	ldr	r3, [r7, #4]
   33142:	2200      	movs	r2, #0
   33144:	705a      	strb	r2, [r3, #1]
}
   33146:	46c0      	nop			; (mov r8, r8)
   33148:	46bd      	mov	sp, r7
   3314a:	b002      	add	sp, #8
   3314c:	bd80      	pop	{r7, pc}
	...

00033150 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   33150:	b590      	push	{r4, r7, lr}
   33152:	b0b1      	sub	sp, #196	; 0xc4
   33154:	af00      	add	r7, sp, #0
   33156:	6078      	str	r0, [r7, #4]
   33158:	6039      	str	r1, [r7, #0]
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   3315a:	230c      	movs	r3, #12
   3315c:	18fb      	adds	r3, r7, r3
   3315e:	4a2e      	ldr	r2, [pc, #184]	; (33218 <sw_timer_init+0xc8>)
   33160:	ca13      	ldmia	r2!, {r0, r1, r4}
   33162:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   33164:	683b      	ldr	r3, [r7, #0]
   33166:	885b      	ldrh	r3, [r3, #2]
   33168:	001a      	movs	r2, r3
   3316a:	687b      	ldr	r3, [r7, #4]
   3316c:	655a      	str	r2, [r3, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   3316e:	687b      	ldr	r3, [r7, #4]
   33170:	3314      	adds	r3, #20
   33172:	22bc      	movs	r2, #188	; 0xbc
   33174:	18ba      	adds	r2, r7, r2
   33176:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   33178:	683b      	ldr	r3, [r7, #0]
   3317a:	781b      	ldrb	r3, [r3, #0]
   3317c:	001a      	movs	r2, r3
   3317e:	230c      	movs	r3, #12
   33180:	18fb      	adds	r3, r7, r3
   33182:	0092      	lsls	r2, r2, #2
   33184:	58d2      	ldr	r2, [r2, r3]
   33186:	2318      	movs	r3, #24
   33188:	18fb      	adds	r3, r7, r3
   3318a:	0011      	movs	r1, r2
   3318c:	0018      	movs	r0, r3
   3318e:	4b23      	ldr	r3, [pc, #140]	; (3321c <sw_timer_init+0xcc>)
   33190:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   33192:	4b23      	ldr	r3, [pc, #140]	; (33220 <sw_timer_init+0xd0>)
   33194:	4798      	blx	r3
   33196:	0004      	movs	r4, r0
   33198:	683b      	ldr	r3, [r7, #0]
   3319a:	885b      	ldrh	r3, [r3, #2]
   3319c:	001a      	movs	r2, r3
   3319e:	4b21      	ldr	r3, [pc, #132]	; (33224 <sw_timer_init+0xd4>)
   331a0:	0011      	movs	r1, r2
   331a2:	22fa      	movs	r2, #250	; 0xfa
   331a4:	0210      	lsls	r0, r2, #8
   331a6:	4798      	blx	r3
   331a8:	0003      	movs	r3, r0
   331aa:	001a      	movs	r2, r3
   331ac:	4b1e      	ldr	r3, [pc, #120]	; (33228 <sw_timer_init+0xd8>)
   331ae:	0011      	movs	r1, r2
   331b0:	0020      	movs	r0, r4
   331b2:	4798      	blx	r3
   331b4:	0003      	movs	r3, r0
   331b6:	001a      	movs	r2, r3
   331b8:	2318      	movs	r3, #24
   331ba:	18fb      	adds	r3, r7, r3
   331bc:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   331be:	2318      	movs	r3, #24
   331c0:	18fb      	adds	r3, r7, r3
   331c2:	2205      	movs	r2, #5
   331c4:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   331c6:	683b      	ldr	r3, [r7, #0]
   331c8:	781b      	ldrb	r3, [r3, #0]
   331ca:	001a      	movs	r2, r3
   331cc:	230c      	movs	r3, #12
   331ce:	18fb      	adds	r3, r7, r3
   331d0:	0092      	lsls	r2, r2, #2
   331d2:	58d1      	ldr	r1, [r2, r3]
   331d4:	2318      	movs	r3, #24
   331d6:	18fa      	adds	r2, r7, r3
   331d8:	23bc      	movs	r3, #188	; 0xbc
   331da:	18fb      	adds	r3, r7, r3
   331dc:	681b      	ldr	r3, [r3, #0]
   331de:	0018      	movs	r0, r3
   331e0:	4b12      	ldr	r3, [pc, #72]	; (3322c <sw_timer_init+0xdc>)
   331e2:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   331e4:	683b      	ldr	r3, [r7, #0]
   331e6:	785b      	ldrb	r3, [r3, #1]
   331e8:	3308      	adds	r3, #8
   331ea:	b2da      	uxtb	r2, r3
   331ec:	4910      	ldr	r1, [pc, #64]	; (33230 <sw_timer_init+0xe0>)
   331ee:	23bc      	movs	r3, #188	; 0xbc
   331f0:	18fb      	adds	r3, r7, r3
   331f2:	681b      	ldr	r3, [r3, #0]
   331f4:	0018      	movs	r0, r3
   331f6:	4b0f      	ldr	r3, [pc, #60]	; (33234 <sw_timer_init+0xe4>)
   331f8:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   331fa:	683b      	ldr	r3, [r7, #0]
   331fc:	785b      	ldrb	r3, [r3, #1]
   331fe:	3308      	adds	r3, #8
   33200:	b2da      	uxtb	r2, r3
   33202:	23bc      	movs	r3, #188	; 0xbc
   33204:	18fb      	adds	r3, r7, r3
   33206:	681b      	ldr	r3, [r3, #0]
   33208:	0011      	movs	r1, r2
   3320a:	0018      	movs	r0, r3
   3320c:	4b0a      	ldr	r3, [pc, #40]	; (33238 <sw_timer_init+0xe8>)
   3320e:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   33210:	46c0      	nop			; (mov r8, r8)
   33212:	46bd      	mov	sp, r7
   33214:	b031      	add	sp, #196	; 0xc4
   33216:	bd90      	pop	{r4, r7, pc}
   33218:	0003ab48 	.word	0x0003ab48
   3321c:	0002b031 	.word	0x0002b031
   33220:	000330b9 	.word	0x000330b9
   33224:	00033841 	.word	0x00033841
   33228:	0003372d 	.word	0x0003372d
   3322c:	0002b68d 	.word	0x0002b68d
   33230:	0003310d 	.word	0x0003310d
   33234:	0002baa5 	.word	0x0002baa5
   33238:	0002bae5 	.word	0x0002bae5

0003323c <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
   3323c:	b580      	push	{r7, lr}
   3323e:	b084      	sub	sp, #16
   33240:	af00      	add	r7, sp, #0
   33242:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;
#endif

	Assert(module_inst);
#if (SAMD21)
	tcc_module = &module_inst->tcc_inst;
   33244:	687b      	ldr	r3, [r7, #4]
   33246:	3314      	adds	r3, #20
   33248:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
   3324a:	68fb      	ldr	r3, [r7, #12]
   3324c:	0018      	movs	r0, r3
   3324e:	4b03      	ldr	r3, [pc, #12]	; (3325c <sw_timer_enable+0x20>)
   33250:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   33252:	46c0      	nop			; (mov r8, r8)
   33254:	46bd      	mov	sp, r7
   33256:	b004      	add	sp, #16
   33258:	bd80      	pop	{r7, pc}
   3325a:	46c0      	nop			; (mov r8, r8)
   3325c:	000330dd 	.word	0x000330dd

00033260 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   33260:	b580      	push	{r7, lr}
   33262:	b086      	sub	sp, #24
   33264:	af00      	add	r7, sp, #0
   33266:	60f8      	str	r0, [r7, #12]
   33268:	60b9      	str	r1, [r7, #8]
   3326a:	607a      	str	r2, [r7, #4]
   3326c:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   3326e:	2300      	movs	r3, #0
   33270:	617b      	str	r3, [r7, #20]
   33272:	e032      	b.n	332da <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
   33274:	68f9      	ldr	r1, [r7, #12]
   33276:	697a      	ldr	r2, [r7, #20]
   33278:	0013      	movs	r3, r2
   3327a:	009b      	lsls	r3, r3, #2
   3327c:	189b      	adds	r3, r3, r2
   3327e:	009b      	lsls	r3, r3, #2
   33280:	5c5b      	ldrb	r3, [r3, r1]
   33282:	07db      	lsls	r3, r3, #31
   33284:	0fdb      	lsrs	r3, r3, #31
   33286:	b2db      	uxtb	r3, r3
   33288:	2b00      	cmp	r3, #0
   3328a:	d123      	bne.n	332d4 <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
   3328c:	697a      	ldr	r2, [r7, #20]
   3328e:	0013      	movs	r3, r2
   33290:	009b      	lsls	r3, r3, #2
   33292:	189b      	adds	r3, r3, r2
   33294:	009b      	lsls	r3, r3, #2
   33296:	68fa      	ldr	r2, [r7, #12]
   33298:	18d3      	adds	r3, r2, r3
   3329a:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
   3329c:	693b      	ldr	r3, [r7, #16]
   3329e:	68ba      	ldr	r2, [r7, #8]
   332a0:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
   332a2:	693b      	ldr	r3, [r7, #16]
   332a4:	781a      	ldrb	r2, [r3, #0]
   332a6:	2102      	movs	r1, #2
   332a8:	438a      	bics	r2, r1
   332aa:	701a      	strb	r2, [r3, #0]
			handler->context = context;
   332ac:	693b      	ldr	r3, [r7, #16]
   332ae:	687a      	ldr	r2, [r7, #4]
   332b0:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
   332b2:	68fb      	ldr	r3, [r7, #12]
   332b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   332b6:	4b0d      	ldr	r3, [pc, #52]	; (332ec <sw_timer_register_callback+0x8c>)
   332b8:	0011      	movs	r1, r2
   332ba:	6838      	ldr	r0, [r7, #0]
   332bc:	4798      	blx	r3
   332be:	0003      	movs	r3, r0
   332c0:	001a      	movs	r2, r3
   332c2:	693b      	ldr	r3, [r7, #16]
   332c4:	60da      	str	r2, [r3, #12]
			handler->used = 1;
   332c6:	693b      	ldr	r3, [r7, #16]
   332c8:	781a      	ldrb	r2, [r3, #0]
   332ca:	2101      	movs	r1, #1
   332cc:	430a      	orrs	r2, r1
   332ce:	701a      	strb	r2, [r3, #0]
			return index;
   332d0:	697b      	ldr	r3, [r7, #20]
   332d2:	e007      	b.n	332e4 <sw_timer_register_callback+0x84>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   332d4:	697b      	ldr	r3, [r7, #20]
   332d6:	3301      	adds	r3, #1
   332d8:	617b      	str	r3, [r7, #20]
   332da:	697b      	ldr	r3, [r7, #20]
   332dc:	2b00      	cmp	r3, #0
   332de:	ddc9      	ble.n	33274 <sw_timer_register_callback+0x14>
		}
	}
	return -1;
   332e0:	2301      	movs	r3, #1
   332e2:	425b      	negs	r3, r3
}
   332e4:	0018      	movs	r0, r3
   332e6:	46bd      	mov	sp, r7
   332e8:	b006      	add	sp, #24
   332ea:	bd80      	pop	{r7, pc}
   332ec:	0003372d 	.word	0x0003372d

000332f0 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   332f0:	b580      	push	{r7, lr}
   332f2:	b086      	sub	sp, #24
   332f4:	af00      	add	r7, sp, #0
   332f6:	60f8      	str	r0, [r7, #12]
   332f8:	60b9      	str	r1, [r7, #8]
   332fa:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   332fc:	68ba      	ldr	r2, [r7, #8]
   332fe:	0013      	movs	r3, r2
   33300:	009b      	lsls	r3, r3, #2
   33302:	189b      	adds	r3, r3, r2
   33304:	009b      	lsls	r3, r3, #2
   33306:	68fa      	ldr	r2, [r7, #12]
   33308:	18d3      	adds	r3, r2, r3
   3330a:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
   3330c:	697b      	ldr	r3, [r7, #20]
   3330e:	781a      	ldrb	r2, [r3, #0]
   33310:	2102      	movs	r1, #2
   33312:	430a      	orrs	r2, r1
   33314:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   33316:	68fb      	ldr	r3, [r7, #12]
   33318:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   3331a:	4b07      	ldr	r3, [pc, #28]	; (33338 <sw_timer_enable_callback+0x48>)
   3331c:	0011      	movs	r1, r2
   3331e:	6878      	ldr	r0, [r7, #4]
   33320:	4798      	blx	r3
   33322:	0003      	movs	r3, r0
   33324:	001a      	movs	r2, r3
   33326:	4b05      	ldr	r3, [pc, #20]	; (3333c <sw_timer_enable_callback+0x4c>)
   33328:	681b      	ldr	r3, [r3, #0]
   3332a:	18d2      	adds	r2, r2, r3
   3332c:	697b      	ldr	r3, [r7, #20]
   3332e:	611a      	str	r2, [r3, #16]
}
   33330:	46c0      	nop			; (mov r8, r8)
   33332:	46bd      	mov	sp, r7
   33334:	b006      	add	sp, #24
   33336:	bd80      	pop	{r7, pc}
   33338:	0003372d 	.word	0x0003372d
   3333c:	2000434c 	.word	0x2000434c

00033340 <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
   33340:	b580      	push	{r7, lr}
   33342:	b084      	sub	sp, #16
   33344:	af00      	add	r7, sp, #0
   33346:	6078      	str	r0, [r7, #4]
   33348:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   3334a:	683a      	ldr	r2, [r7, #0]
   3334c:	0013      	movs	r3, r2
   3334e:	009b      	lsls	r3, r3, #2
   33350:	189b      	adds	r3, r3, r2
   33352:	009b      	lsls	r3, r3, #2
   33354:	687a      	ldr	r2, [r7, #4]
   33356:	18d3      	adds	r3, r2, r3
   33358:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
   3335a:	68fb      	ldr	r3, [r7, #12]
   3335c:	781a      	ldrb	r2, [r3, #0]
   3335e:	2102      	movs	r1, #2
   33360:	438a      	bics	r2, r1
   33362:	701a      	strb	r2, [r3, #0]
}
   33364:	46c0      	nop			; (mov r8, r8)
   33366:	46bd      	mov	sp, r7
   33368:	b004      	add	sp, #16
   3336a:	bd80      	pop	{r7, pc}

0003336c <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   3336c:	b590      	push	{r4, r7, lr}
   3336e:	b085      	sub	sp, #20
   33370:	af00      	add	r7, sp, #0
   33372:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   33374:	2300      	movs	r3, #0
   33376:	60fb      	str	r3, [r7, #12]
   33378:	e053      	b.n	33422 <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   3337a:	6879      	ldr	r1, [r7, #4]
   3337c:	68fa      	ldr	r2, [r7, #12]
   3337e:	0013      	movs	r3, r2
   33380:	009b      	lsls	r3, r3, #2
   33382:	189b      	adds	r3, r3, r2
   33384:	009b      	lsls	r3, r3, #2
   33386:	5c5b      	ldrb	r3, [r3, r1]
   33388:	07db      	lsls	r3, r3, #31
   3338a:	0fdb      	lsrs	r3, r3, #31
   3338c:	b2db      	uxtb	r3, r3
   3338e:	2b00      	cmp	r3, #0
   33390:	d044      	beq.n	3341c <sw_timer_task+0xb0>
   33392:	6879      	ldr	r1, [r7, #4]
   33394:	68fa      	ldr	r2, [r7, #12]
   33396:	0013      	movs	r3, r2
   33398:	009b      	lsls	r3, r3, #2
   3339a:	189b      	adds	r3, r3, r2
   3339c:	009b      	lsls	r3, r3, #2
   3339e:	5c5b      	ldrb	r3, [r3, r1]
   333a0:	079b      	lsls	r3, r3, #30
   333a2:	0fdb      	lsrs	r3, r3, #31
   333a4:	b2db      	uxtb	r3, r3
   333a6:	2b00      	cmp	r3, #0
   333a8:	d038      	beq.n	3341c <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
   333aa:	68fa      	ldr	r2, [r7, #12]
   333ac:	0013      	movs	r3, r2
   333ae:	009b      	lsls	r3, r3, #2
   333b0:	189b      	adds	r3, r3, r2
   333b2:	009b      	lsls	r3, r3, #2
   333b4:	687a      	ldr	r2, [r7, #4]
   333b6:	18d3      	adds	r3, r2, r3
   333b8:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   333ba:	68bb      	ldr	r3, [r7, #8]
   333bc:	691a      	ldr	r2, [r3, #16]
   333be:	4b1c      	ldr	r3, [pc, #112]	; (33430 <sw_timer_task+0xc4>)
   333c0:	681b      	ldr	r3, [r3, #0]
   333c2:	1ad3      	subs	r3, r2, r3
   333c4:	d52a      	bpl.n	3341c <sw_timer_task+0xb0>
   333c6:	68bb      	ldr	r3, [r7, #8]
   333c8:	781b      	ldrb	r3, [r3, #0]
   333ca:	2204      	movs	r2, #4
   333cc:	4013      	ands	r3, r2
   333ce:	b2db      	uxtb	r3, r3
   333d0:	2b00      	cmp	r3, #0
   333d2:	d123      	bne.n	3341c <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
   333d4:	68bb      	ldr	r3, [r7, #8]
   333d6:	781a      	ldrb	r2, [r3, #0]
   333d8:	2104      	movs	r1, #4
   333da:	430a      	orrs	r2, r1
   333dc:	701a      	strb	r2, [r3, #0]
				/* Timer was expired. */
				if (handler->period > 0) {
   333de:	68bb      	ldr	r3, [r7, #8]
   333e0:	68db      	ldr	r3, [r3, #12]
   333e2:	2b00      	cmp	r3, #0
   333e4:	d007      	beq.n	333f6 <sw_timer_task+0x8a>
					handler->expire_time = sw_timer_tick + handler->period;
   333e6:	68bb      	ldr	r3, [r7, #8]
   333e8:	68da      	ldr	r2, [r3, #12]
   333ea:	4b11      	ldr	r3, [pc, #68]	; (33430 <sw_timer_task+0xc4>)
   333ec:	681b      	ldr	r3, [r3, #0]
   333ee:	18d2      	adds	r2, r2, r3
   333f0:	68bb      	ldr	r3, [r7, #8]
   333f2:	611a      	str	r2, [r3, #16]
   333f4:	e004      	b.n	33400 <sw_timer_task+0x94>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
   333f6:	68bb      	ldr	r3, [r7, #8]
   333f8:	781a      	ldrb	r2, [r3, #0]
   333fa:	2102      	movs	r1, #2
   333fc:	438a      	bics	r2, r1
   333fe:	701a      	strb	r2, [r3, #0]
				}
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
   33400:	68bb      	ldr	r3, [r7, #8]
   33402:	685c      	ldr	r4, [r3, #4]
   33404:	68bb      	ldr	r3, [r7, #8]
   33406:	689a      	ldr	r2, [r3, #8]
   33408:	68bb      	ldr	r3, [r7, #8]
   3340a:	68db      	ldr	r3, [r3, #12]
   3340c:	68f9      	ldr	r1, [r7, #12]
   3340e:	6878      	ldr	r0, [r7, #4]
   33410:	47a0      	blx	r4
				/* Leave critical section. */
				handler->busy = 0;
   33412:	68bb      	ldr	r3, [r7, #8]
   33414:	781a      	ldrb	r2, [r3, #0]
   33416:	2104      	movs	r1, #4
   33418:	438a      	bics	r2, r1
   3341a:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   3341c:	68fb      	ldr	r3, [r7, #12]
   3341e:	3301      	adds	r3, #1
   33420:	60fb      	str	r3, [r7, #12]
   33422:	68fb      	ldr	r3, [r7, #12]
   33424:	2b00      	cmp	r3, #0
   33426:	dda8      	ble.n	3337a <sw_timer_task+0xe>
			}
		}
	}
}
   33428:	46c0      	nop			; (mov r8, r8)
   3342a:	46bd      	mov	sp, r7
   3342c:	b005      	add	sp, #20
   3342e:	bd90      	pop	{r4, r7, pc}
   33430:	2000434c 	.word	0x2000434c

00033434 <main>:
 * @brief Main application function.
 * Application entry point.
 * @return int
 */
int main(void)
{
   33434:	b580      	push	{r7, lr}
   33436:	af00      	add	r7, sp, #0
    /* Initialize the board. */
    system_init();
   33438:	4b06      	ldr	r3, [pc, #24]	; (33454 <main+0x20>)
   3343a:	4798      	blx	r3

    /* Initialize the UART console. */
    InitializeSerialConsole();
   3343c:	4b06      	ldr	r3, [pc, #24]	; (33458 <main+0x24>)
   3343e:	4798      	blx	r3

    // Initialize trace capabilities
    vTraceEnable(TRC_START);
   33440:	2001      	movs	r0, #1
   33442:	4b06      	ldr	r3, [pc, #24]	; (3345c <main+0x28>)
   33444:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
   33446:	4b06      	ldr	r3, [pc, #24]	; (33460 <main+0x2c>)
   33448:	4798      	blx	r3

    return 0;  // Will not get here
   3344a:	2300      	movs	r3, #0
}
   3344c:	0018      	movs	r0, r3
   3344e:	46bd      	mov	sp, r7
   33450:	bd80      	pop	{r7, pc}
   33452:	46c0      	nop			; (mov r8, r8)
   33454:	0002af25 	.word	0x0002af25
   33458:	0001e9c9 	.word	0x0001e9c9
   3345c:	00019095 	.word	0x00019095
   33460:	0001d021 	.word	0x0001d021

00033464 <vApplicationDaemonTaskStartupHook>:
 *					here will be called before other tasks are initilized.
 * @param[in]        None
 * @return           None
 */
void vApplicationDaemonTaskStartupHook(void)
{
   33464:	b580      	push	{r7, lr}
   33466:	b082      	sub	sp, #8
   33468:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("\r\n\r\n-----ESE516 Main Program-----\r\n");
   3346a:	4b2e      	ldr	r3, [pc, #184]	; (33524 <vApplicationDaemonTaskStartupHook+0xc0>)
   3346c:	0018      	movs	r0, r3
   3346e:	4b2e      	ldr	r3, [pc, #184]	; (33528 <vApplicationDaemonTaskStartupHook+0xc4>)
   33470:	4798      	blx	r3

    // Initialize HW that needs FreeRTOS Initialization
    SerialConsoleWriteString("\r\n\r\nInitialize HW...\r\n");
   33472:	4b2e      	ldr	r3, [pc, #184]	; (3352c <vApplicationDaemonTaskStartupHook+0xc8>)
   33474:	0018      	movs	r0, r3
   33476:	4b2c      	ldr	r3, [pc, #176]	; (33528 <vApplicationDaemonTaskStartupHook+0xc4>)
   33478:	4798      	blx	r3
    if (I2cInitializeDriver() != STATUS_OK) {
   3347a:	4b2d      	ldr	r3, [pc, #180]	; (33530 <vApplicationDaemonTaskStartupHook+0xcc>)
   3347c:	4798      	blx	r3
   3347e:	1e03      	subs	r3, r0, #0
   33480:	d004      	beq.n	3348c <vApplicationDaemonTaskStartupHook+0x28>
        SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
   33482:	4b2c      	ldr	r3, [pc, #176]	; (33534 <vApplicationDaemonTaskStartupHook+0xd0>)
   33484:	0018      	movs	r0, r3
   33486:	4b28      	ldr	r3, [pc, #160]	; (33528 <vApplicationDaemonTaskStartupHook+0xc4>)
   33488:	4798      	blx	r3
   3348a:	e003      	b.n	33494 <vApplicationDaemonTaskStartupHook+0x30>
    } else {
        SerialConsoleWriteString("Initialized I2C Driver!\r\n");
   3348c:	4b2a      	ldr	r3, [pc, #168]	; (33538 <vApplicationDaemonTaskStartupHook+0xd4>)
   3348e:	0018      	movs	r0, r3
   33490:	4b25      	ldr	r3, [pc, #148]	; (33528 <vApplicationDaemonTaskStartupHook+0xc4>)
   33492:	4798      	blx	r3
    }

    if (0 != InitializeSeesaw()) {
   33494:	4b29      	ldr	r3, [pc, #164]	; (3353c <vApplicationDaemonTaskStartupHook+0xd8>)
   33496:	4798      	blx	r3
   33498:	1e03      	subs	r3, r0, #0
   3349a:	d004      	beq.n	334a6 <vApplicationDaemonTaskStartupHook+0x42>
        SerialConsoleWriteString("Error initializing Seesaw!\r\n");
   3349c:	4b28      	ldr	r3, [pc, #160]	; (33540 <vApplicationDaemonTaskStartupHook+0xdc>)
   3349e:	0018      	movs	r0, r3
   334a0:	4b21      	ldr	r3, [pc, #132]	; (33528 <vApplicationDaemonTaskStartupHook+0xc4>)
   334a2:	4798      	blx	r3
   334a4:	e003      	b.n	334ae <vApplicationDaemonTaskStartupHook+0x4a>
    } else {
        SerialConsoleWriteString("Initialized Seesaw!\r\n");
   334a6:	4b27      	ldr	r3, [pc, #156]	; (33544 <vApplicationDaemonTaskStartupHook+0xe0>)
   334a8:	0018      	movs	r0, r3
   334aa:	4b1f      	ldr	r3, [pc, #124]	; (33528 <vApplicationDaemonTaskStartupHook+0xc4>)
   334ac:	4798      	blx	r3
    }

    uint8_t whoamI = 0;
   334ae:	1dfb      	adds	r3, r7, #7
   334b0:	2200      	movs	r2, #0
   334b2:	701a      	strb	r2, [r3, #0]
    (lsm6dso_device_id_get(GetImuStruct(), &whoamI));
   334b4:	4b24      	ldr	r3, [pc, #144]	; (33548 <vApplicationDaemonTaskStartupHook+0xe4>)
   334b6:	4798      	blx	r3
   334b8:	0002      	movs	r2, r0
   334ba:	1dfb      	adds	r3, r7, #7
   334bc:	0019      	movs	r1, r3
   334be:	0010      	movs	r0, r2
   334c0:	4b22      	ldr	r3, [pc, #136]	; (3354c <vApplicationDaemonTaskStartupHook+0xe8>)
   334c2:	4798      	blx	r3

    if (whoamI != LSM6DSO_ID) {
   334c4:	1dfb      	adds	r3, r7, #7
   334c6:	781b      	ldrb	r3, [r3, #0]
   334c8:	2b6c      	cmp	r3, #108	; 0x6c
   334ca:	d004      	beq.n	334d6 <vApplicationDaemonTaskStartupHook+0x72>
        SerialConsoleWriteString("Cannot find IMU!\r\n");
   334cc:	4b20      	ldr	r3, [pc, #128]	; (33550 <vApplicationDaemonTaskStartupHook+0xec>)
   334ce:	0018      	movs	r0, r3
   334d0:	4b15      	ldr	r3, [pc, #84]	; (33528 <vApplicationDaemonTaskStartupHook+0xc4>)
   334d2:	4798      	blx	r3
   334d4:	e010      	b.n	334f8 <vApplicationDaemonTaskStartupHook+0x94>
    } else {
        SerialConsoleWriteString("IMU found!\r\n");
   334d6:	4b1f      	ldr	r3, [pc, #124]	; (33554 <vApplicationDaemonTaskStartupHook+0xf0>)
   334d8:	0018      	movs	r0, r3
   334da:	4b13      	ldr	r3, [pc, #76]	; (33528 <vApplicationDaemonTaskStartupHook+0xc4>)
   334dc:	4798      	blx	r3
        if (InitImu() == 0) {
   334de:	4b1e      	ldr	r3, [pc, #120]	; (33558 <vApplicationDaemonTaskStartupHook+0xf4>)
   334e0:	4798      	blx	r3
   334e2:	1e03      	subs	r3, r0, #0
   334e4:	d104      	bne.n	334f0 <vApplicationDaemonTaskStartupHook+0x8c>
            SerialConsoleWriteString("IMU initialized!\r\n");
   334e6:	4b1d      	ldr	r3, [pc, #116]	; (3355c <vApplicationDaemonTaskStartupHook+0xf8>)
   334e8:	0018      	movs	r0, r3
   334ea:	4b0f      	ldr	r3, [pc, #60]	; (33528 <vApplicationDaemonTaskStartupHook+0xc4>)
   334ec:	4798      	blx	r3
   334ee:	e003      	b.n	334f8 <vApplicationDaemonTaskStartupHook+0x94>
        } else {
            SerialConsoleWriteString("Could not initialize IMU\r\n");
   334f0:	4b1b      	ldr	r3, [pc, #108]	; (33560 <vApplicationDaemonTaskStartupHook+0xfc>)
   334f2:	0018      	movs	r0, r3
   334f4:	4b0c      	ldr	r3, [pc, #48]	; (33528 <vApplicationDaemonTaskStartupHook+0xc4>)
   334f6:	4798      	blx	r3
        }
    }

    SerialConsoleWriteString("Initializing distance sensor\r\n");
   334f8:	4b1a      	ldr	r3, [pc, #104]	; (33564 <vApplicationDaemonTaskStartupHook+0x100>)
   334fa:	0018      	movs	r0, r3
   334fc:	4b0a      	ldr	r3, [pc, #40]	; (33528 <vApplicationDaemonTaskStartupHook+0xc4>)
   334fe:	4798      	blx	r3
    InitializeDistanceSensor();
   33500:	4b19      	ldr	r3, [pc, #100]	; (33568 <vApplicationDaemonTaskStartupHook+0x104>)
   33502:	4798      	blx	r3
    SerialConsoleWriteString("Distance sensor initialized\r\n");
   33504:	4b19      	ldr	r3, [pc, #100]	; (3356c <vApplicationDaemonTaskStartupHook+0x108>)
   33506:	0018      	movs	r0, r3
   33508:	4b07      	ldr	r3, [pc, #28]	; (33528 <vApplicationDaemonTaskStartupHook+0xc4>)
   3350a:	4798      	blx	r3

    StartTasks();
   3350c:	4b18      	ldr	r3, [pc, #96]	; (33570 <vApplicationDaemonTaskStartupHook+0x10c>)
   3350e:	4798      	blx	r3

    vTaskSuspend(daemonTaskHandle);
   33510:	4b18      	ldr	r3, [pc, #96]	; (33574 <vApplicationDaemonTaskStartupHook+0x110>)
   33512:	681b      	ldr	r3, [r3, #0]
   33514:	0018      	movs	r0, r3
   33516:	4b18      	ldr	r3, [pc, #96]	; (33578 <vApplicationDaemonTaskStartupHook+0x114>)
   33518:	4798      	blx	r3
}
   3351a:	46c0      	nop			; (mov r8, r8)
   3351c:	46bd      	mov	sp, r7
   3351e:	b002      	add	sp, #8
   33520:	bd80      	pop	{r7, pc}
   33522:	46c0      	nop			; (mov r8, r8)
   33524:	0003ab54 	.word	0x0003ab54
   33528:	0001ea39 	.word	0x0001ea39
   3352c:	0003ab78 	.word	0x0003ab78
   33530:	00014d79 	.word	0x00014d79
   33534:	0003ab90 	.word	0x0003ab90
   33538:	0003abb4 	.word	0x0003abb4
   3353c:	00015fbd 	.word	0x00015fbd
   33540:	0003abd0 	.word	0x0003abd0
   33544:	0003abf0 	.word	0x0003abf0
   33548:	00015ee5 	.word	0x00015ee5
   3354c:	00015ae9 	.word	0x00015ae9
   33550:	0003ac08 	.word	0x0003ac08
   33554:	0003ac1c 	.word	0x0003ac1c
   33558:	00015ef5 	.word	0x00015ef5
   3355c:	0003ac2c 	.word	0x0003ac2c
   33560:	0003ac40 	.word	0x0003ac40
   33564:	0003ac5c 	.word	0x0003ac5c
   33568:	00014745 	.word	0x00014745
   3356c:	0003ac7c 	.word	0x0003ac7c
   33570:	0003357d 	.word	0x0003357d
   33574:	20004354 	.word	0x20004354
   33578:	0001cec5 	.word	0x0001cec5

0003357c <StartTasks>:
 * @details
 * @param[in]        None
 * @return           None
 */
static void StartTasks(void)
{
   3357c:	b590      	push	{r4, r7, lr}
   3357e:	b083      	sub	sp, #12
   33580:	af02      	add	r7, sp, #8
    snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
   33582:	4b44      	ldr	r3, [pc, #272]	; (33694 <StartTasks+0x118>)
   33584:	4798      	blx	r3
   33586:	0003      	movs	r3, r0
   33588:	4a43      	ldr	r2, [pc, #268]	; (33698 <StartTasks+0x11c>)
   3358a:	4844      	ldr	r0, [pc, #272]	; (3369c <StartTasks+0x120>)
   3358c:	2140      	movs	r1, #64	; 0x40
   3358e:	4c44      	ldr	r4, [pc, #272]	; (336a0 <StartTasks+0x124>)
   33590:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   33592:	4b42      	ldr	r3, [pc, #264]	; (3369c <StartTasks+0x120>)
   33594:	0018      	movs	r0, r3
   33596:	4b43      	ldr	r3, [pc, #268]	; (336a4 <StartTasks+0x128>)
   33598:	4798      	blx	r3

    // Initialize Tasks here

    if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
   3359a:	23c8      	movs	r3, #200	; 0xc8
   3359c:	005a      	lsls	r2, r3, #1
   3359e:	4942      	ldr	r1, [pc, #264]	; (336a8 <StartTasks+0x12c>)
   335a0:	4842      	ldr	r0, [pc, #264]	; (336ac <StartTasks+0x130>)
   335a2:	4b43      	ldr	r3, [pc, #268]	; (336b0 <StartTasks+0x134>)
   335a4:	9301      	str	r3, [sp, #4]
   335a6:	2304      	movs	r3, #4
   335a8:	9300      	str	r3, [sp, #0]
   335aa:	2300      	movs	r3, #0
   335ac:	4c41      	ldr	r4, [pc, #260]	; (336b4 <StartTasks+0x138>)
   335ae:	47a0      	blx	r4
   335b0:	0003      	movs	r3, r0
   335b2:	2b01      	cmp	r3, #1
   335b4:	d003      	beq.n	335be <StartTasks+0x42>
        SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   335b6:	4b40      	ldr	r3, [pc, #256]	; (336b8 <StartTasks+0x13c>)
   335b8:	0018      	movs	r0, r3
   335ba:	4b3a      	ldr	r3, [pc, #232]	; (336a4 <StartTasks+0x128>)
   335bc:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
   335be:	4b35      	ldr	r3, [pc, #212]	; (33694 <StartTasks+0x118>)
   335c0:	4798      	blx	r3
   335c2:	0003      	movs	r3, r0
   335c4:	4a3d      	ldr	r2, [pc, #244]	; (336bc <StartTasks+0x140>)
   335c6:	4835      	ldr	r0, [pc, #212]	; (3369c <StartTasks+0x120>)
   335c8:	2140      	movs	r1, #64	; 0x40
   335ca:	4c35      	ldr	r4, [pc, #212]	; (336a0 <StartTasks+0x124>)
   335cc:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   335ce:	4b33      	ldr	r3, [pc, #204]	; (3369c <StartTasks+0x120>)
   335d0:	0018      	movs	r0, r3
   335d2:	4b34      	ldr	r3, [pc, #208]	; (336a4 <StartTasks+0x128>)
   335d4:	4798      	blx	r3

    if (xTaskCreate(vWifiTask, "WIFI_TASK", WIFI_TASK_SIZE, NULL, WIFI_PRIORITY, &wifiTaskHandle) != pdPASS) {
   335d6:	23fa      	movs	r3, #250	; 0xfa
   335d8:	009a      	lsls	r2, r3, #2
   335da:	4939      	ldr	r1, [pc, #228]	; (336c0 <StartTasks+0x144>)
   335dc:	4839      	ldr	r0, [pc, #228]	; (336c4 <StartTasks+0x148>)
   335de:	4b3a      	ldr	r3, [pc, #232]	; (336c8 <StartTasks+0x14c>)
   335e0:	9301      	str	r3, [sp, #4]
   335e2:	2303      	movs	r3, #3
   335e4:	9300      	str	r3, [sp, #0]
   335e6:	2300      	movs	r3, #0
   335e8:	4c32      	ldr	r4, [pc, #200]	; (336b4 <StartTasks+0x138>)
   335ea:	47a0      	blx	r4
   335ec:	0003      	movs	r3, r0
   335ee:	2b01      	cmp	r3, #1
   335f0:	d003      	beq.n	335fa <StartTasks+0x7e>
        SerialConsoleWriteString("ERR: WIFI task could not be initialized!\r\n");
   335f2:	4b36      	ldr	r3, [pc, #216]	; (336cc <StartTasks+0x150>)
   335f4:	0018      	movs	r0, r3
   335f6:	4b2b      	ldr	r3, [pc, #172]	; (336a4 <StartTasks+0x128>)
   335f8:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting WIFI: %d\r\n", xPortGetFreeHeapSize());
   335fa:	4b26      	ldr	r3, [pc, #152]	; (33694 <StartTasks+0x118>)
   335fc:	4798      	blx	r3
   335fe:	0003      	movs	r3, r0
   33600:	4a33      	ldr	r2, [pc, #204]	; (336d0 <StartTasks+0x154>)
   33602:	4826      	ldr	r0, [pc, #152]	; (3369c <StartTasks+0x120>)
   33604:	2140      	movs	r1, #64	; 0x40
   33606:	4c26      	ldr	r4, [pc, #152]	; (336a0 <StartTasks+0x124>)
   33608:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   3360a:	4b24      	ldr	r3, [pc, #144]	; (3369c <StartTasks+0x120>)
   3360c:	0018      	movs	r0, r3
   3360e:	4b25      	ldr	r3, [pc, #148]	; (336a4 <StartTasks+0x128>)
   33610:	4798      	blx	r3

    if (xTaskCreate(vUiHandlerTask, "UI Task", UI_TASK_SIZE, NULL, UI_TASK_PRIORITY, &uiTaskHandle) != pdPASS) {
   33612:	23c8      	movs	r3, #200	; 0xc8
   33614:	005a      	lsls	r2, r3, #1
   33616:	492f      	ldr	r1, [pc, #188]	; (336d4 <StartTasks+0x158>)
   33618:	482f      	ldr	r0, [pc, #188]	; (336d8 <StartTasks+0x15c>)
   3361a:	4b30      	ldr	r3, [pc, #192]	; (336dc <StartTasks+0x160>)
   3361c:	9301      	str	r3, [sp, #4]
   3361e:	2302      	movs	r3, #2
   33620:	9300      	str	r3, [sp, #0]
   33622:	2300      	movs	r3, #0
   33624:	4c23      	ldr	r4, [pc, #140]	; (336b4 <StartTasks+0x138>)
   33626:	47a0      	blx	r4
   33628:	0003      	movs	r3, r0
   3362a:	2b01      	cmp	r3, #1
   3362c:	d003      	beq.n	33636 <StartTasks+0xba>
        SerialConsoleWriteString("ERR: UI task could not be initialized!\r\n");
   3362e:	4b2c      	ldr	r3, [pc, #176]	; (336e0 <StartTasks+0x164>)
   33630:	0018      	movs	r0, r3
   33632:	4b1c      	ldr	r3, [pc, #112]	; (336a4 <StartTasks+0x128>)
   33634:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting UI Task: %d\r\n", xPortGetFreeHeapSize());
   33636:	4b17      	ldr	r3, [pc, #92]	; (33694 <StartTasks+0x118>)
   33638:	4798      	blx	r3
   3363a:	0003      	movs	r3, r0
   3363c:	4a29      	ldr	r2, [pc, #164]	; (336e4 <StartTasks+0x168>)
   3363e:	4817      	ldr	r0, [pc, #92]	; (3369c <StartTasks+0x120>)
   33640:	2140      	movs	r1, #64	; 0x40
   33642:	4c17      	ldr	r4, [pc, #92]	; (336a0 <StartTasks+0x124>)
   33644:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   33646:	4b15      	ldr	r3, [pc, #84]	; (3369c <StartTasks+0x120>)
   33648:	0018      	movs	r0, r3
   3364a:	4b16      	ldr	r3, [pc, #88]	; (336a4 <StartTasks+0x128>)
   3364c:	4798      	blx	r3

    if (xTaskCreate(vControlHandlerTask, "Control Task", CONTROL_TASK_SIZE, NULL, CONTROL_TASK_PRIORITY, &controlTaskHandle) != pdPASS) {
   3364e:	2380      	movs	r3, #128	; 0x80
   33650:	005a      	lsls	r2, r3, #1
   33652:	4925      	ldr	r1, [pc, #148]	; (336e8 <StartTasks+0x16c>)
   33654:	4825      	ldr	r0, [pc, #148]	; (336ec <StartTasks+0x170>)
   33656:	4b26      	ldr	r3, [pc, #152]	; (336f0 <StartTasks+0x174>)
   33658:	9301      	str	r3, [sp, #4]
   3365a:	2304      	movs	r3, #4
   3365c:	9300      	str	r3, [sp, #0]
   3365e:	2300      	movs	r3, #0
   33660:	4c14      	ldr	r4, [pc, #80]	; (336b4 <StartTasks+0x138>)
   33662:	47a0      	blx	r4
   33664:	0003      	movs	r3, r0
   33666:	2b01      	cmp	r3, #1
   33668:	d003      	beq.n	33672 <StartTasks+0xf6>
        SerialConsoleWriteString("ERR: Control task could not be initialized!\r\n");
   3366a:	4b22      	ldr	r3, [pc, #136]	; (336f4 <StartTasks+0x178>)
   3366c:	0018      	movs	r0, r3
   3366e:	4b0d      	ldr	r3, [pc, #52]	; (336a4 <StartTasks+0x128>)
   33670:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting Control Task: %d\r\n", xPortGetFreeHeapSize());
   33672:	4b08      	ldr	r3, [pc, #32]	; (33694 <StartTasks+0x118>)
   33674:	4798      	blx	r3
   33676:	0003      	movs	r3, r0
   33678:	4a1f      	ldr	r2, [pc, #124]	; (336f8 <StartTasks+0x17c>)
   3367a:	4808      	ldr	r0, [pc, #32]	; (3369c <StartTasks+0x120>)
   3367c:	2140      	movs	r1, #64	; 0x40
   3367e:	4c08      	ldr	r4, [pc, #32]	; (336a0 <StartTasks+0x124>)
   33680:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   33682:	4b06      	ldr	r3, [pc, #24]	; (3369c <StartTasks+0x120>)
   33684:	0018      	movs	r0, r3
   33686:	4b07      	ldr	r3, [pc, #28]	; (336a4 <StartTasks+0x128>)
   33688:	4798      	blx	r3
}
   3368a:	46c0      	nop			; (mov r8, r8)
   3368c:	46bd      	mov	sp, r7
   3368e:	b001      	add	sp, #4
   33690:	bd90      	pop	{r4, r7, pc}
   33692:	46c0      	nop			; (mov r8, r8)
   33694:	0001b001 	.word	0x0001b001
   33698:	0003ac9c 	.word	0x0003ac9c
   3369c:	20005890 	.word	0x20005890
   336a0:	00035961 	.word	0x00035961
   336a4:	0001ea39 	.word	0x0001ea39
   336a8:	0003acc0 	.word	0x0003acc0
   336ac:	00013ac9 	.word	0x00013ac9
   336b0:	20004350 	.word	0x20004350
   336b4:	0001ca49 	.word	0x0001ca49
   336b8:	0003accc 	.word	0x0003accc
   336bc:	0003acf8 	.word	0x0003acf8
   336c0:	0003ad18 	.word	0x0003ad18
   336c4:	00017e2d 	.word	0x00017e2d
   336c8:	20004358 	.word	0x20004358
   336cc:	0003ad24 	.word	0x0003ad24
   336d0:	0003ad50 	.word	0x0003ad50
   336d4:	0003ad70 	.word	0x0003ad70
   336d8:	000164d1 	.word	0x000164d1
   336dc:	2000435c 	.word	0x2000435c
   336e0:	0003ad78 	.word	0x0003ad78
   336e4:	0003ada4 	.word	0x0003ada4
   336e8:	0003adc8 	.word	0x0003adc8
   336ec:	000143d1 	.word	0x000143d1
   336f0:	20004360 	.word	0x20004360
   336f4:	0003add8 	.word	0x0003add8
   336f8:	0003ae08 	.word	0x0003ae08

000336fc <vApplicationMallocFailedHook>:



void vApplicationMallocFailedHook(void)
{
   336fc:	b580      	push	{r7, lr}
   336fe:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
   33700:	4b02      	ldr	r3, [pc, #8]	; (3370c <vApplicationMallocFailedHook+0x10>)
   33702:	0018      	movs	r0, r3
   33704:	4b02      	ldr	r3, [pc, #8]	; (33710 <vApplicationMallocFailedHook+0x14>)
   33706:	4798      	blx	r3
    while (1)
   33708:	e7fe      	b.n	33708 <vApplicationMallocFailedHook+0xc>
   3370a:	46c0      	nop			; (mov r8, r8)
   3370c:	0003ae30 	.word	0x0003ae30
   33710:	0001ea39 	.word	0x0001ea39

00033714 <vApplicationStackOverflowHook>:
        ;
}

void vApplicationStackOverflowHook(void)
{
   33714:	b580      	push	{r7, lr}
   33716:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
   33718:	4b02      	ldr	r3, [pc, #8]	; (33724 <vApplicationStackOverflowHook+0x10>)
   3371a:	0018      	movs	r0, r3
   3371c:	4b02      	ldr	r3, [pc, #8]	; (33728 <vApplicationStackOverflowHook+0x14>)
   3371e:	4798      	blx	r3
    while (1)
   33720:	e7fe      	b.n	33720 <vApplicationStackOverflowHook+0xc>
   33722:	46c0      	nop			; (mov r8, r8)
   33724:	0003ae5c 	.word	0x0003ae5c
   33728:	0001ea39 	.word	0x0001ea39

0003372c <__udivsi3>:
   3372c:	2200      	movs	r2, #0
   3372e:	0843      	lsrs	r3, r0, #1
   33730:	428b      	cmp	r3, r1
   33732:	d374      	bcc.n	3381e <__udivsi3+0xf2>
   33734:	0903      	lsrs	r3, r0, #4
   33736:	428b      	cmp	r3, r1
   33738:	d35f      	bcc.n	337fa <__udivsi3+0xce>
   3373a:	0a03      	lsrs	r3, r0, #8
   3373c:	428b      	cmp	r3, r1
   3373e:	d344      	bcc.n	337ca <__udivsi3+0x9e>
   33740:	0b03      	lsrs	r3, r0, #12
   33742:	428b      	cmp	r3, r1
   33744:	d328      	bcc.n	33798 <__udivsi3+0x6c>
   33746:	0c03      	lsrs	r3, r0, #16
   33748:	428b      	cmp	r3, r1
   3374a:	d30d      	bcc.n	33768 <__udivsi3+0x3c>
   3374c:	22ff      	movs	r2, #255	; 0xff
   3374e:	0209      	lsls	r1, r1, #8
   33750:	ba12      	rev	r2, r2
   33752:	0c03      	lsrs	r3, r0, #16
   33754:	428b      	cmp	r3, r1
   33756:	d302      	bcc.n	3375e <__udivsi3+0x32>
   33758:	1212      	asrs	r2, r2, #8
   3375a:	0209      	lsls	r1, r1, #8
   3375c:	d065      	beq.n	3382a <__udivsi3+0xfe>
   3375e:	0b03      	lsrs	r3, r0, #12
   33760:	428b      	cmp	r3, r1
   33762:	d319      	bcc.n	33798 <__udivsi3+0x6c>
   33764:	e000      	b.n	33768 <__udivsi3+0x3c>
   33766:	0a09      	lsrs	r1, r1, #8
   33768:	0bc3      	lsrs	r3, r0, #15
   3376a:	428b      	cmp	r3, r1
   3376c:	d301      	bcc.n	33772 <__udivsi3+0x46>
   3376e:	03cb      	lsls	r3, r1, #15
   33770:	1ac0      	subs	r0, r0, r3
   33772:	4152      	adcs	r2, r2
   33774:	0b83      	lsrs	r3, r0, #14
   33776:	428b      	cmp	r3, r1
   33778:	d301      	bcc.n	3377e <__udivsi3+0x52>
   3377a:	038b      	lsls	r3, r1, #14
   3377c:	1ac0      	subs	r0, r0, r3
   3377e:	4152      	adcs	r2, r2
   33780:	0b43      	lsrs	r3, r0, #13
   33782:	428b      	cmp	r3, r1
   33784:	d301      	bcc.n	3378a <__udivsi3+0x5e>
   33786:	034b      	lsls	r3, r1, #13
   33788:	1ac0      	subs	r0, r0, r3
   3378a:	4152      	adcs	r2, r2
   3378c:	0b03      	lsrs	r3, r0, #12
   3378e:	428b      	cmp	r3, r1
   33790:	d301      	bcc.n	33796 <__udivsi3+0x6a>
   33792:	030b      	lsls	r3, r1, #12
   33794:	1ac0      	subs	r0, r0, r3
   33796:	4152      	adcs	r2, r2
   33798:	0ac3      	lsrs	r3, r0, #11
   3379a:	428b      	cmp	r3, r1
   3379c:	d301      	bcc.n	337a2 <__udivsi3+0x76>
   3379e:	02cb      	lsls	r3, r1, #11
   337a0:	1ac0      	subs	r0, r0, r3
   337a2:	4152      	adcs	r2, r2
   337a4:	0a83      	lsrs	r3, r0, #10
   337a6:	428b      	cmp	r3, r1
   337a8:	d301      	bcc.n	337ae <__udivsi3+0x82>
   337aa:	028b      	lsls	r3, r1, #10
   337ac:	1ac0      	subs	r0, r0, r3
   337ae:	4152      	adcs	r2, r2
   337b0:	0a43      	lsrs	r3, r0, #9
   337b2:	428b      	cmp	r3, r1
   337b4:	d301      	bcc.n	337ba <__udivsi3+0x8e>
   337b6:	024b      	lsls	r3, r1, #9
   337b8:	1ac0      	subs	r0, r0, r3
   337ba:	4152      	adcs	r2, r2
   337bc:	0a03      	lsrs	r3, r0, #8
   337be:	428b      	cmp	r3, r1
   337c0:	d301      	bcc.n	337c6 <__udivsi3+0x9a>
   337c2:	020b      	lsls	r3, r1, #8
   337c4:	1ac0      	subs	r0, r0, r3
   337c6:	4152      	adcs	r2, r2
   337c8:	d2cd      	bcs.n	33766 <__udivsi3+0x3a>
   337ca:	09c3      	lsrs	r3, r0, #7
   337cc:	428b      	cmp	r3, r1
   337ce:	d301      	bcc.n	337d4 <__udivsi3+0xa8>
   337d0:	01cb      	lsls	r3, r1, #7
   337d2:	1ac0      	subs	r0, r0, r3
   337d4:	4152      	adcs	r2, r2
   337d6:	0983      	lsrs	r3, r0, #6
   337d8:	428b      	cmp	r3, r1
   337da:	d301      	bcc.n	337e0 <__udivsi3+0xb4>
   337dc:	018b      	lsls	r3, r1, #6
   337de:	1ac0      	subs	r0, r0, r3
   337e0:	4152      	adcs	r2, r2
   337e2:	0943      	lsrs	r3, r0, #5
   337e4:	428b      	cmp	r3, r1
   337e6:	d301      	bcc.n	337ec <__udivsi3+0xc0>
   337e8:	014b      	lsls	r3, r1, #5
   337ea:	1ac0      	subs	r0, r0, r3
   337ec:	4152      	adcs	r2, r2
   337ee:	0903      	lsrs	r3, r0, #4
   337f0:	428b      	cmp	r3, r1
   337f2:	d301      	bcc.n	337f8 <__udivsi3+0xcc>
   337f4:	010b      	lsls	r3, r1, #4
   337f6:	1ac0      	subs	r0, r0, r3
   337f8:	4152      	adcs	r2, r2
   337fa:	08c3      	lsrs	r3, r0, #3
   337fc:	428b      	cmp	r3, r1
   337fe:	d301      	bcc.n	33804 <__udivsi3+0xd8>
   33800:	00cb      	lsls	r3, r1, #3
   33802:	1ac0      	subs	r0, r0, r3
   33804:	4152      	adcs	r2, r2
   33806:	0883      	lsrs	r3, r0, #2
   33808:	428b      	cmp	r3, r1
   3380a:	d301      	bcc.n	33810 <__udivsi3+0xe4>
   3380c:	008b      	lsls	r3, r1, #2
   3380e:	1ac0      	subs	r0, r0, r3
   33810:	4152      	adcs	r2, r2
   33812:	0843      	lsrs	r3, r0, #1
   33814:	428b      	cmp	r3, r1
   33816:	d301      	bcc.n	3381c <__udivsi3+0xf0>
   33818:	004b      	lsls	r3, r1, #1
   3381a:	1ac0      	subs	r0, r0, r3
   3381c:	4152      	adcs	r2, r2
   3381e:	1a41      	subs	r1, r0, r1
   33820:	d200      	bcs.n	33824 <__udivsi3+0xf8>
   33822:	4601      	mov	r1, r0
   33824:	4152      	adcs	r2, r2
   33826:	4610      	mov	r0, r2
   33828:	4770      	bx	lr
   3382a:	e7ff      	b.n	3382c <__udivsi3+0x100>
   3382c:	b501      	push	{r0, lr}
   3382e:	2000      	movs	r0, #0
   33830:	f000 f8f0 	bl	33a14 <__aeabi_idiv0>
   33834:	bd02      	pop	{r1, pc}
   33836:	46c0      	nop			; (mov r8, r8)

00033838 <__aeabi_uidivmod>:
   33838:	2900      	cmp	r1, #0
   3383a:	d0f7      	beq.n	3382c <__udivsi3+0x100>
   3383c:	e776      	b.n	3372c <__udivsi3>
   3383e:	4770      	bx	lr

00033840 <__divsi3>:
   33840:	4603      	mov	r3, r0
   33842:	430b      	orrs	r3, r1
   33844:	d47f      	bmi.n	33946 <__divsi3+0x106>
   33846:	2200      	movs	r2, #0
   33848:	0843      	lsrs	r3, r0, #1
   3384a:	428b      	cmp	r3, r1
   3384c:	d374      	bcc.n	33938 <__divsi3+0xf8>
   3384e:	0903      	lsrs	r3, r0, #4
   33850:	428b      	cmp	r3, r1
   33852:	d35f      	bcc.n	33914 <__divsi3+0xd4>
   33854:	0a03      	lsrs	r3, r0, #8
   33856:	428b      	cmp	r3, r1
   33858:	d344      	bcc.n	338e4 <__divsi3+0xa4>
   3385a:	0b03      	lsrs	r3, r0, #12
   3385c:	428b      	cmp	r3, r1
   3385e:	d328      	bcc.n	338b2 <__divsi3+0x72>
   33860:	0c03      	lsrs	r3, r0, #16
   33862:	428b      	cmp	r3, r1
   33864:	d30d      	bcc.n	33882 <__divsi3+0x42>
   33866:	22ff      	movs	r2, #255	; 0xff
   33868:	0209      	lsls	r1, r1, #8
   3386a:	ba12      	rev	r2, r2
   3386c:	0c03      	lsrs	r3, r0, #16
   3386e:	428b      	cmp	r3, r1
   33870:	d302      	bcc.n	33878 <__divsi3+0x38>
   33872:	1212      	asrs	r2, r2, #8
   33874:	0209      	lsls	r1, r1, #8
   33876:	d065      	beq.n	33944 <__divsi3+0x104>
   33878:	0b03      	lsrs	r3, r0, #12
   3387a:	428b      	cmp	r3, r1
   3387c:	d319      	bcc.n	338b2 <__divsi3+0x72>
   3387e:	e000      	b.n	33882 <__divsi3+0x42>
   33880:	0a09      	lsrs	r1, r1, #8
   33882:	0bc3      	lsrs	r3, r0, #15
   33884:	428b      	cmp	r3, r1
   33886:	d301      	bcc.n	3388c <__divsi3+0x4c>
   33888:	03cb      	lsls	r3, r1, #15
   3388a:	1ac0      	subs	r0, r0, r3
   3388c:	4152      	adcs	r2, r2
   3388e:	0b83      	lsrs	r3, r0, #14
   33890:	428b      	cmp	r3, r1
   33892:	d301      	bcc.n	33898 <__divsi3+0x58>
   33894:	038b      	lsls	r3, r1, #14
   33896:	1ac0      	subs	r0, r0, r3
   33898:	4152      	adcs	r2, r2
   3389a:	0b43      	lsrs	r3, r0, #13
   3389c:	428b      	cmp	r3, r1
   3389e:	d301      	bcc.n	338a4 <__divsi3+0x64>
   338a0:	034b      	lsls	r3, r1, #13
   338a2:	1ac0      	subs	r0, r0, r3
   338a4:	4152      	adcs	r2, r2
   338a6:	0b03      	lsrs	r3, r0, #12
   338a8:	428b      	cmp	r3, r1
   338aa:	d301      	bcc.n	338b0 <__divsi3+0x70>
   338ac:	030b      	lsls	r3, r1, #12
   338ae:	1ac0      	subs	r0, r0, r3
   338b0:	4152      	adcs	r2, r2
   338b2:	0ac3      	lsrs	r3, r0, #11
   338b4:	428b      	cmp	r3, r1
   338b6:	d301      	bcc.n	338bc <__divsi3+0x7c>
   338b8:	02cb      	lsls	r3, r1, #11
   338ba:	1ac0      	subs	r0, r0, r3
   338bc:	4152      	adcs	r2, r2
   338be:	0a83      	lsrs	r3, r0, #10
   338c0:	428b      	cmp	r3, r1
   338c2:	d301      	bcc.n	338c8 <__divsi3+0x88>
   338c4:	028b      	lsls	r3, r1, #10
   338c6:	1ac0      	subs	r0, r0, r3
   338c8:	4152      	adcs	r2, r2
   338ca:	0a43      	lsrs	r3, r0, #9
   338cc:	428b      	cmp	r3, r1
   338ce:	d301      	bcc.n	338d4 <__divsi3+0x94>
   338d0:	024b      	lsls	r3, r1, #9
   338d2:	1ac0      	subs	r0, r0, r3
   338d4:	4152      	adcs	r2, r2
   338d6:	0a03      	lsrs	r3, r0, #8
   338d8:	428b      	cmp	r3, r1
   338da:	d301      	bcc.n	338e0 <__divsi3+0xa0>
   338dc:	020b      	lsls	r3, r1, #8
   338de:	1ac0      	subs	r0, r0, r3
   338e0:	4152      	adcs	r2, r2
   338e2:	d2cd      	bcs.n	33880 <__divsi3+0x40>
   338e4:	09c3      	lsrs	r3, r0, #7
   338e6:	428b      	cmp	r3, r1
   338e8:	d301      	bcc.n	338ee <__divsi3+0xae>
   338ea:	01cb      	lsls	r3, r1, #7
   338ec:	1ac0      	subs	r0, r0, r3
   338ee:	4152      	adcs	r2, r2
   338f0:	0983      	lsrs	r3, r0, #6
   338f2:	428b      	cmp	r3, r1
   338f4:	d301      	bcc.n	338fa <__divsi3+0xba>
   338f6:	018b      	lsls	r3, r1, #6
   338f8:	1ac0      	subs	r0, r0, r3
   338fa:	4152      	adcs	r2, r2
   338fc:	0943      	lsrs	r3, r0, #5
   338fe:	428b      	cmp	r3, r1
   33900:	d301      	bcc.n	33906 <__divsi3+0xc6>
   33902:	014b      	lsls	r3, r1, #5
   33904:	1ac0      	subs	r0, r0, r3
   33906:	4152      	adcs	r2, r2
   33908:	0903      	lsrs	r3, r0, #4
   3390a:	428b      	cmp	r3, r1
   3390c:	d301      	bcc.n	33912 <__divsi3+0xd2>
   3390e:	010b      	lsls	r3, r1, #4
   33910:	1ac0      	subs	r0, r0, r3
   33912:	4152      	adcs	r2, r2
   33914:	08c3      	lsrs	r3, r0, #3
   33916:	428b      	cmp	r3, r1
   33918:	d301      	bcc.n	3391e <__divsi3+0xde>
   3391a:	00cb      	lsls	r3, r1, #3
   3391c:	1ac0      	subs	r0, r0, r3
   3391e:	4152      	adcs	r2, r2
   33920:	0883      	lsrs	r3, r0, #2
   33922:	428b      	cmp	r3, r1
   33924:	d301      	bcc.n	3392a <__divsi3+0xea>
   33926:	008b      	lsls	r3, r1, #2
   33928:	1ac0      	subs	r0, r0, r3
   3392a:	4152      	adcs	r2, r2
   3392c:	0843      	lsrs	r3, r0, #1
   3392e:	428b      	cmp	r3, r1
   33930:	d301      	bcc.n	33936 <__divsi3+0xf6>
   33932:	004b      	lsls	r3, r1, #1
   33934:	1ac0      	subs	r0, r0, r3
   33936:	4152      	adcs	r2, r2
   33938:	1a41      	subs	r1, r0, r1
   3393a:	d200      	bcs.n	3393e <__divsi3+0xfe>
   3393c:	4601      	mov	r1, r0
   3393e:	4152      	adcs	r2, r2
   33940:	4610      	mov	r0, r2
   33942:	4770      	bx	lr
   33944:	e05d      	b.n	33a02 <__divsi3+0x1c2>
   33946:	0fca      	lsrs	r2, r1, #31
   33948:	d000      	beq.n	3394c <__divsi3+0x10c>
   3394a:	4249      	negs	r1, r1
   3394c:	1003      	asrs	r3, r0, #32
   3394e:	d300      	bcc.n	33952 <__divsi3+0x112>
   33950:	4240      	negs	r0, r0
   33952:	4053      	eors	r3, r2
   33954:	2200      	movs	r2, #0
   33956:	469c      	mov	ip, r3
   33958:	0903      	lsrs	r3, r0, #4
   3395a:	428b      	cmp	r3, r1
   3395c:	d32d      	bcc.n	339ba <__divsi3+0x17a>
   3395e:	0a03      	lsrs	r3, r0, #8
   33960:	428b      	cmp	r3, r1
   33962:	d312      	bcc.n	3398a <__divsi3+0x14a>
   33964:	22fc      	movs	r2, #252	; 0xfc
   33966:	0189      	lsls	r1, r1, #6
   33968:	ba12      	rev	r2, r2
   3396a:	0a03      	lsrs	r3, r0, #8
   3396c:	428b      	cmp	r3, r1
   3396e:	d30c      	bcc.n	3398a <__divsi3+0x14a>
   33970:	0189      	lsls	r1, r1, #6
   33972:	1192      	asrs	r2, r2, #6
   33974:	428b      	cmp	r3, r1
   33976:	d308      	bcc.n	3398a <__divsi3+0x14a>
   33978:	0189      	lsls	r1, r1, #6
   3397a:	1192      	asrs	r2, r2, #6
   3397c:	428b      	cmp	r3, r1
   3397e:	d304      	bcc.n	3398a <__divsi3+0x14a>
   33980:	0189      	lsls	r1, r1, #6
   33982:	d03a      	beq.n	339fa <__divsi3+0x1ba>
   33984:	1192      	asrs	r2, r2, #6
   33986:	e000      	b.n	3398a <__divsi3+0x14a>
   33988:	0989      	lsrs	r1, r1, #6
   3398a:	09c3      	lsrs	r3, r0, #7
   3398c:	428b      	cmp	r3, r1
   3398e:	d301      	bcc.n	33994 <__divsi3+0x154>
   33990:	01cb      	lsls	r3, r1, #7
   33992:	1ac0      	subs	r0, r0, r3
   33994:	4152      	adcs	r2, r2
   33996:	0983      	lsrs	r3, r0, #6
   33998:	428b      	cmp	r3, r1
   3399a:	d301      	bcc.n	339a0 <__divsi3+0x160>
   3399c:	018b      	lsls	r3, r1, #6
   3399e:	1ac0      	subs	r0, r0, r3
   339a0:	4152      	adcs	r2, r2
   339a2:	0943      	lsrs	r3, r0, #5
   339a4:	428b      	cmp	r3, r1
   339a6:	d301      	bcc.n	339ac <__divsi3+0x16c>
   339a8:	014b      	lsls	r3, r1, #5
   339aa:	1ac0      	subs	r0, r0, r3
   339ac:	4152      	adcs	r2, r2
   339ae:	0903      	lsrs	r3, r0, #4
   339b0:	428b      	cmp	r3, r1
   339b2:	d301      	bcc.n	339b8 <__divsi3+0x178>
   339b4:	010b      	lsls	r3, r1, #4
   339b6:	1ac0      	subs	r0, r0, r3
   339b8:	4152      	adcs	r2, r2
   339ba:	08c3      	lsrs	r3, r0, #3
   339bc:	428b      	cmp	r3, r1
   339be:	d301      	bcc.n	339c4 <__divsi3+0x184>
   339c0:	00cb      	lsls	r3, r1, #3
   339c2:	1ac0      	subs	r0, r0, r3
   339c4:	4152      	adcs	r2, r2
   339c6:	0883      	lsrs	r3, r0, #2
   339c8:	428b      	cmp	r3, r1
   339ca:	d301      	bcc.n	339d0 <__divsi3+0x190>
   339cc:	008b      	lsls	r3, r1, #2
   339ce:	1ac0      	subs	r0, r0, r3
   339d0:	4152      	adcs	r2, r2
   339d2:	d2d9      	bcs.n	33988 <__divsi3+0x148>
   339d4:	0843      	lsrs	r3, r0, #1
   339d6:	428b      	cmp	r3, r1
   339d8:	d301      	bcc.n	339de <__divsi3+0x19e>
   339da:	004b      	lsls	r3, r1, #1
   339dc:	1ac0      	subs	r0, r0, r3
   339de:	4152      	adcs	r2, r2
   339e0:	1a41      	subs	r1, r0, r1
   339e2:	d200      	bcs.n	339e6 <__divsi3+0x1a6>
   339e4:	4601      	mov	r1, r0
   339e6:	4663      	mov	r3, ip
   339e8:	4152      	adcs	r2, r2
   339ea:	105b      	asrs	r3, r3, #1
   339ec:	4610      	mov	r0, r2
   339ee:	d301      	bcc.n	339f4 <__divsi3+0x1b4>
   339f0:	4240      	negs	r0, r0
   339f2:	2b00      	cmp	r3, #0
   339f4:	d500      	bpl.n	339f8 <__divsi3+0x1b8>
   339f6:	4249      	negs	r1, r1
   339f8:	4770      	bx	lr
   339fa:	4663      	mov	r3, ip
   339fc:	105b      	asrs	r3, r3, #1
   339fe:	d300      	bcc.n	33a02 <__divsi3+0x1c2>
   33a00:	4240      	negs	r0, r0
   33a02:	b501      	push	{r0, lr}
   33a04:	2000      	movs	r0, #0
   33a06:	f000 f805 	bl	33a14 <__aeabi_idiv0>
   33a0a:	bd02      	pop	{r1, pc}

00033a0c <__aeabi_idivmod>:
   33a0c:	2900      	cmp	r1, #0
   33a0e:	d0f8      	beq.n	33a02 <__divsi3+0x1c2>
   33a10:	e716      	b.n	33840 <__divsi3>
   33a12:	4770      	bx	lr

00033a14 <__aeabi_idiv0>:
   33a14:	4770      	bx	lr
   33a16:	46c0      	nop			; (mov r8, r8)

00033a18 <__aeabi_lmul>:
   33a18:	b5f0      	push	{r4, r5, r6, r7, lr}
   33a1a:	46ce      	mov	lr, r9
   33a1c:	4647      	mov	r7, r8
   33a1e:	0415      	lsls	r5, r2, #16
   33a20:	0c2d      	lsrs	r5, r5, #16
   33a22:	002e      	movs	r6, r5
   33a24:	b580      	push	{r7, lr}
   33a26:	0407      	lsls	r7, r0, #16
   33a28:	0c14      	lsrs	r4, r2, #16
   33a2a:	0c3f      	lsrs	r7, r7, #16
   33a2c:	4699      	mov	r9, r3
   33a2e:	0c03      	lsrs	r3, r0, #16
   33a30:	437e      	muls	r6, r7
   33a32:	435d      	muls	r5, r3
   33a34:	4367      	muls	r7, r4
   33a36:	4363      	muls	r3, r4
   33a38:	197f      	adds	r7, r7, r5
   33a3a:	0c34      	lsrs	r4, r6, #16
   33a3c:	19e4      	adds	r4, r4, r7
   33a3e:	469c      	mov	ip, r3
   33a40:	42a5      	cmp	r5, r4
   33a42:	d903      	bls.n	33a4c <__aeabi_lmul+0x34>
   33a44:	2380      	movs	r3, #128	; 0x80
   33a46:	025b      	lsls	r3, r3, #9
   33a48:	4698      	mov	r8, r3
   33a4a:	44c4      	add	ip, r8
   33a4c:	464b      	mov	r3, r9
   33a4e:	4351      	muls	r1, r2
   33a50:	4343      	muls	r3, r0
   33a52:	0436      	lsls	r6, r6, #16
   33a54:	0c36      	lsrs	r6, r6, #16
   33a56:	0c25      	lsrs	r5, r4, #16
   33a58:	0424      	lsls	r4, r4, #16
   33a5a:	4465      	add	r5, ip
   33a5c:	19a4      	adds	r4, r4, r6
   33a5e:	1859      	adds	r1, r3, r1
   33a60:	1949      	adds	r1, r1, r5
   33a62:	0020      	movs	r0, r4
   33a64:	bc0c      	pop	{r2, r3}
   33a66:	4690      	mov	r8, r2
   33a68:	4699      	mov	r9, r3
   33a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00033a6c <__aeabi_fmul>:
   33a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   33a6e:	4657      	mov	r7, sl
   33a70:	464e      	mov	r6, r9
   33a72:	4645      	mov	r5, r8
   33a74:	46de      	mov	lr, fp
   33a76:	b5e0      	push	{r5, r6, r7, lr}
   33a78:	0247      	lsls	r7, r0, #9
   33a7a:	0046      	lsls	r6, r0, #1
   33a7c:	4688      	mov	r8, r1
   33a7e:	0a7f      	lsrs	r7, r7, #9
   33a80:	0e36      	lsrs	r6, r6, #24
   33a82:	0fc4      	lsrs	r4, r0, #31
   33a84:	2e00      	cmp	r6, #0
   33a86:	d047      	beq.n	33b18 <__aeabi_fmul+0xac>
   33a88:	2eff      	cmp	r6, #255	; 0xff
   33a8a:	d024      	beq.n	33ad6 <__aeabi_fmul+0x6a>
   33a8c:	00fb      	lsls	r3, r7, #3
   33a8e:	2780      	movs	r7, #128	; 0x80
   33a90:	04ff      	lsls	r7, r7, #19
   33a92:	431f      	orrs	r7, r3
   33a94:	2300      	movs	r3, #0
   33a96:	4699      	mov	r9, r3
   33a98:	469a      	mov	sl, r3
   33a9a:	3e7f      	subs	r6, #127	; 0x7f
   33a9c:	4643      	mov	r3, r8
   33a9e:	025d      	lsls	r5, r3, #9
   33aa0:	0058      	lsls	r0, r3, #1
   33aa2:	0fdb      	lsrs	r3, r3, #31
   33aa4:	0a6d      	lsrs	r5, r5, #9
   33aa6:	0e00      	lsrs	r0, r0, #24
   33aa8:	4698      	mov	r8, r3
   33aaa:	d043      	beq.n	33b34 <__aeabi_fmul+0xc8>
   33aac:	28ff      	cmp	r0, #255	; 0xff
   33aae:	d03b      	beq.n	33b28 <__aeabi_fmul+0xbc>
   33ab0:	00eb      	lsls	r3, r5, #3
   33ab2:	2580      	movs	r5, #128	; 0x80
   33ab4:	2200      	movs	r2, #0
   33ab6:	04ed      	lsls	r5, r5, #19
   33ab8:	431d      	orrs	r5, r3
   33aba:	387f      	subs	r0, #127	; 0x7f
   33abc:	1836      	adds	r6, r6, r0
   33abe:	1c73      	adds	r3, r6, #1
   33ac0:	4641      	mov	r1, r8
   33ac2:	469b      	mov	fp, r3
   33ac4:	464b      	mov	r3, r9
   33ac6:	4061      	eors	r1, r4
   33ac8:	4313      	orrs	r3, r2
   33aca:	2b0f      	cmp	r3, #15
   33acc:	d864      	bhi.n	33b98 <__aeabi_fmul+0x12c>
   33ace:	4875      	ldr	r0, [pc, #468]	; (33ca4 <__aeabi_fmul+0x238>)
   33ad0:	009b      	lsls	r3, r3, #2
   33ad2:	58c3      	ldr	r3, [r0, r3]
   33ad4:	469f      	mov	pc, r3
   33ad6:	2f00      	cmp	r7, #0
   33ad8:	d142      	bne.n	33b60 <__aeabi_fmul+0xf4>
   33ada:	2308      	movs	r3, #8
   33adc:	4699      	mov	r9, r3
   33ade:	3b06      	subs	r3, #6
   33ae0:	26ff      	movs	r6, #255	; 0xff
   33ae2:	469a      	mov	sl, r3
   33ae4:	e7da      	b.n	33a9c <__aeabi_fmul+0x30>
   33ae6:	4641      	mov	r1, r8
   33ae8:	2a02      	cmp	r2, #2
   33aea:	d028      	beq.n	33b3e <__aeabi_fmul+0xd2>
   33aec:	2a03      	cmp	r2, #3
   33aee:	d100      	bne.n	33af2 <__aeabi_fmul+0x86>
   33af0:	e0ce      	b.n	33c90 <__aeabi_fmul+0x224>
   33af2:	2a01      	cmp	r2, #1
   33af4:	d000      	beq.n	33af8 <__aeabi_fmul+0x8c>
   33af6:	e0ac      	b.n	33c52 <__aeabi_fmul+0x1e6>
   33af8:	4011      	ands	r1, r2
   33afa:	2000      	movs	r0, #0
   33afc:	2200      	movs	r2, #0
   33afe:	b2cc      	uxtb	r4, r1
   33b00:	0240      	lsls	r0, r0, #9
   33b02:	05d2      	lsls	r2, r2, #23
   33b04:	0a40      	lsrs	r0, r0, #9
   33b06:	07e4      	lsls	r4, r4, #31
   33b08:	4310      	orrs	r0, r2
   33b0a:	4320      	orrs	r0, r4
   33b0c:	bc3c      	pop	{r2, r3, r4, r5}
   33b0e:	4690      	mov	r8, r2
   33b10:	4699      	mov	r9, r3
   33b12:	46a2      	mov	sl, r4
   33b14:	46ab      	mov	fp, r5
   33b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   33b18:	2f00      	cmp	r7, #0
   33b1a:	d115      	bne.n	33b48 <__aeabi_fmul+0xdc>
   33b1c:	2304      	movs	r3, #4
   33b1e:	4699      	mov	r9, r3
   33b20:	3b03      	subs	r3, #3
   33b22:	2600      	movs	r6, #0
   33b24:	469a      	mov	sl, r3
   33b26:	e7b9      	b.n	33a9c <__aeabi_fmul+0x30>
   33b28:	20ff      	movs	r0, #255	; 0xff
   33b2a:	2202      	movs	r2, #2
   33b2c:	2d00      	cmp	r5, #0
   33b2e:	d0c5      	beq.n	33abc <__aeabi_fmul+0x50>
   33b30:	2203      	movs	r2, #3
   33b32:	e7c3      	b.n	33abc <__aeabi_fmul+0x50>
   33b34:	2d00      	cmp	r5, #0
   33b36:	d119      	bne.n	33b6c <__aeabi_fmul+0x100>
   33b38:	2000      	movs	r0, #0
   33b3a:	2201      	movs	r2, #1
   33b3c:	e7be      	b.n	33abc <__aeabi_fmul+0x50>
   33b3e:	2401      	movs	r4, #1
   33b40:	22ff      	movs	r2, #255	; 0xff
   33b42:	400c      	ands	r4, r1
   33b44:	2000      	movs	r0, #0
   33b46:	e7db      	b.n	33b00 <__aeabi_fmul+0x94>
   33b48:	0038      	movs	r0, r7
   33b4a:	f001 fd65 	bl	35618 <__clzsi2>
   33b4e:	2676      	movs	r6, #118	; 0x76
   33b50:	1f43      	subs	r3, r0, #5
   33b52:	409f      	lsls	r7, r3
   33b54:	2300      	movs	r3, #0
   33b56:	4276      	negs	r6, r6
   33b58:	1a36      	subs	r6, r6, r0
   33b5a:	4699      	mov	r9, r3
   33b5c:	469a      	mov	sl, r3
   33b5e:	e79d      	b.n	33a9c <__aeabi_fmul+0x30>
   33b60:	230c      	movs	r3, #12
   33b62:	4699      	mov	r9, r3
   33b64:	3b09      	subs	r3, #9
   33b66:	26ff      	movs	r6, #255	; 0xff
   33b68:	469a      	mov	sl, r3
   33b6a:	e797      	b.n	33a9c <__aeabi_fmul+0x30>
   33b6c:	0028      	movs	r0, r5
   33b6e:	f001 fd53 	bl	35618 <__clzsi2>
   33b72:	1f43      	subs	r3, r0, #5
   33b74:	409d      	lsls	r5, r3
   33b76:	2376      	movs	r3, #118	; 0x76
   33b78:	425b      	negs	r3, r3
   33b7a:	1a18      	subs	r0, r3, r0
   33b7c:	2200      	movs	r2, #0
   33b7e:	e79d      	b.n	33abc <__aeabi_fmul+0x50>
   33b80:	2080      	movs	r0, #128	; 0x80
   33b82:	2400      	movs	r4, #0
   33b84:	03c0      	lsls	r0, r0, #15
   33b86:	22ff      	movs	r2, #255	; 0xff
   33b88:	e7ba      	b.n	33b00 <__aeabi_fmul+0x94>
   33b8a:	003d      	movs	r5, r7
   33b8c:	4652      	mov	r2, sl
   33b8e:	e7ab      	b.n	33ae8 <__aeabi_fmul+0x7c>
   33b90:	003d      	movs	r5, r7
   33b92:	0021      	movs	r1, r4
   33b94:	4652      	mov	r2, sl
   33b96:	e7a7      	b.n	33ae8 <__aeabi_fmul+0x7c>
   33b98:	0c3b      	lsrs	r3, r7, #16
   33b9a:	469c      	mov	ip, r3
   33b9c:	042a      	lsls	r2, r5, #16
   33b9e:	0c12      	lsrs	r2, r2, #16
   33ba0:	0c2b      	lsrs	r3, r5, #16
   33ba2:	0014      	movs	r4, r2
   33ba4:	4660      	mov	r0, ip
   33ba6:	4665      	mov	r5, ip
   33ba8:	043f      	lsls	r7, r7, #16
   33baa:	0c3f      	lsrs	r7, r7, #16
   33bac:	437c      	muls	r4, r7
   33bae:	4342      	muls	r2, r0
   33bb0:	435d      	muls	r5, r3
   33bb2:	437b      	muls	r3, r7
   33bb4:	0c27      	lsrs	r7, r4, #16
   33bb6:	189b      	adds	r3, r3, r2
   33bb8:	18ff      	adds	r7, r7, r3
   33bba:	42ba      	cmp	r2, r7
   33bbc:	d903      	bls.n	33bc6 <__aeabi_fmul+0x15a>
   33bbe:	2380      	movs	r3, #128	; 0x80
   33bc0:	025b      	lsls	r3, r3, #9
   33bc2:	469c      	mov	ip, r3
   33bc4:	4465      	add	r5, ip
   33bc6:	0424      	lsls	r4, r4, #16
   33bc8:	043a      	lsls	r2, r7, #16
   33bca:	0c24      	lsrs	r4, r4, #16
   33bcc:	1912      	adds	r2, r2, r4
   33bce:	0193      	lsls	r3, r2, #6
   33bd0:	1e5c      	subs	r4, r3, #1
   33bd2:	41a3      	sbcs	r3, r4
   33bd4:	0c3f      	lsrs	r7, r7, #16
   33bd6:	0e92      	lsrs	r2, r2, #26
   33bd8:	197d      	adds	r5, r7, r5
   33bda:	431a      	orrs	r2, r3
   33bdc:	01ad      	lsls	r5, r5, #6
   33bde:	4315      	orrs	r5, r2
   33be0:	012b      	lsls	r3, r5, #4
   33be2:	d504      	bpl.n	33bee <__aeabi_fmul+0x182>
   33be4:	2301      	movs	r3, #1
   33be6:	465e      	mov	r6, fp
   33be8:	086a      	lsrs	r2, r5, #1
   33bea:	401d      	ands	r5, r3
   33bec:	4315      	orrs	r5, r2
   33bee:	0032      	movs	r2, r6
   33bf0:	327f      	adds	r2, #127	; 0x7f
   33bf2:	2a00      	cmp	r2, #0
   33bf4:	dd25      	ble.n	33c42 <__aeabi_fmul+0x1d6>
   33bf6:	076b      	lsls	r3, r5, #29
   33bf8:	d004      	beq.n	33c04 <__aeabi_fmul+0x198>
   33bfa:	230f      	movs	r3, #15
   33bfc:	402b      	ands	r3, r5
   33bfe:	2b04      	cmp	r3, #4
   33c00:	d000      	beq.n	33c04 <__aeabi_fmul+0x198>
   33c02:	3504      	adds	r5, #4
   33c04:	012b      	lsls	r3, r5, #4
   33c06:	d503      	bpl.n	33c10 <__aeabi_fmul+0x1a4>
   33c08:	0032      	movs	r2, r6
   33c0a:	4b27      	ldr	r3, [pc, #156]	; (33ca8 <__aeabi_fmul+0x23c>)
   33c0c:	3280      	adds	r2, #128	; 0x80
   33c0e:	401d      	ands	r5, r3
   33c10:	2afe      	cmp	r2, #254	; 0xfe
   33c12:	dc94      	bgt.n	33b3e <__aeabi_fmul+0xd2>
   33c14:	2401      	movs	r4, #1
   33c16:	01a8      	lsls	r0, r5, #6
   33c18:	0a40      	lsrs	r0, r0, #9
   33c1a:	b2d2      	uxtb	r2, r2
   33c1c:	400c      	ands	r4, r1
   33c1e:	e76f      	b.n	33b00 <__aeabi_fmul+0x94>
   33c20:	2080      	movs	r0, #128	; 0x80
   33c22:	03c0      	lsls	r0, r0, #15
   33c24:	4207      	tst	r7, r0
   33c26:	d007      	beq.n	33c38 <__aeabi_fmul+0x1cc>
   33c28:	4205      	tst	r5, r0
   33c2a:	d105      	bne.n	33c38 <__aeabi_fmul+0x1cc>
   33c2c:	4328      	orrs	r0, r5
   33c2e:	0240      	lsls	r0, r0, #9
   33c30:	0a40      	lsrs	r0, r0, #9
   33c32:	4644      	mov	r4, r8
   33c34:	22ff      	movs	r2, #255	; 0xff
   33c36:	e763      	b.n	33b00 <__aeabi_fmul+0x94>
   33c38:	4338      	orrs	r0, r7
   33c3a:	0240      	lsls	r0, r0, #9
   33c3c:	0a40      	lsrs	r0, r0, #9
   33c3e:	22ff      	movs	r2, #255	; 0xff
   33c40:	e75e      	b.n	33b00 <__aeabi_fmul+0x94>
   33c42:	2401      	movs	r4, #1
   33c44:	1aa3      	subs	r3, r4, r2
   33c46:	2b1b      	cmp	r3, #27
   33c48:	dd05      	ble.n	33c56 <__aeabi_fmul+0x1ea>
   33c4a:	400c      	ands	r4, r1
   33c4c:	2200      	movs	r2, #0
   33c4e:	2000      	movs	r0, #0
   33c50:	e756      	b.n	33b00 <__aeabi_fmul+0x94>
   33c52:	465e      	mov	r6, fp
   33c54:	e7cb      	b.n	33bee <__aeabi_fmul+0x182>
   33c56:	002a      	movs	r2, r5
   33c58:	2020      	movs	r0, #32
   33c5a:	40da      	lsrs	r2, r3
   33c5c:	1ac3      	subs	r3, r0, r3
   33c5e:	409d      	lsls	r5, r3
   33c60:	002b      	movs	r3, r5
   33c62:	1e5d      	subs	r5, r3, #1
   33c64:	41ab      	sbcs	r3, r5
   33c66:	4313      	orrs	r3, r2
   33c68:	075a      	lsls	r2, r3, #29
   33c6a:	d004      	beq.n	33c76 <__aeabi_fmul+0x20a>
   33c6c:	220f      	movs	r2, #15
   33c6e:	401a      	ands	r2, r3
   33c70:	2a04      	cmp	r2, #4
   33c72:	d000      	beq.n	33c76 <__aeabi_fmul+0x20a>
   33c74:	3304      	adds	r3, #4
   33c76:	015a      	lsls	r2, r3, #5
   33c78:	d504      	bpl.n	33c84 <__aeabi_fmul+0x218>
   33c7a:	2401      	movs	r4, #1
   33c7c:	2201      	movs	r2, #1
   33c7e:	400c      	ands	r4, r1
   33c80:	2000      	movs	r0, #0
   33c82:	e73d      	b.n	33b00 <__aeabi_fmul+0x94>
   33c84:	2401      	movs	r4, #1
   33c86:	019b      	lsls	r3, r3, #6
   33c88:	0a58      	lsrs	r0, r3, #9
   33c8a:	400c      	ands	r4, r1
   33c8c:	2200      	movs	r2, #0
   33c8e:	e737      	b.n	33b00 <__aeabi_fmul+0x94>
   33c90:	2080      	movs	r0, #128	; 0x80
   33c92:	2401      	movs	r4, #1
   33c94:	03c0      	lsls	r0, r0, #15
   33c96:	4328      	orrs	r0, r5
   33c98:	0240      	lsls	r0, r0, #9
   33c9a:	0a40      	lsrs	r0, r0, #9
   33c9c:	400c      	ands	r4, r1
   33c9e:	22ff      	movs	r2, #255	; 0xff
   33ca0:	e72e      	b.n	33b00 <__aeabi_fmul+0x94>
   33ca2:	46c0      	nop			; (mov r8, r8)
   33ca4:	0003ae84 	.word	0x0003ae84
   33ca8:	f7ffffff 	.word	0xf7ffffff

00033cac <__aeabi_f2iz>:
   33cac:	0241      	lsls	r1, r0, #9
   33cae:	0043      	lsls	r3, r0, #1
   33cb0:	0fc2      	lsrs	r2, r0, #31
   33cb2:	0a49      	lsrs	r1, r1, #9
   33cb4:	0e1b      	lsrs	r3, r3, #24
   33cb6:	2000      	movs	r0, #0
   33cb8:	2b7e      	cmp	r3, #126	; 0x7e
   33cba:	dd0d      	ble.n	33cd8 <__aeabi_f2iz+0x2c>
   33cbc:	2b9d      	cmp	r3, #157	; 0x9d
   33cbe:	dc0c      	bgt.n	33cda <__aeabi_f2iz+0x2e>
   33cc0:	2080      	movs	r0, #128	; 0x80
   33cc2:	0400      	lsls	r0, r0, #16
   33cc4:	4301      	orrs	r1, r0
   33cc6:	2b95      	cmp	r3, #149	; 0x95
   33cc8:	dc0a      	bgt.n	33ce0 <__aeabi_f2iz+0x34>
   33cca:	2096      	movs	r0, #150	; 0x96
   33ccc:	1ac3      	subs	r3, r0, r3
   33cce:	40d9      	lsrs	r1, r3
   33cd0:	4248      	negs	r0, r1
   33cd2:	2a00      	cmp	r2, #0
   33cd4:	d100      	bne.n	33cd8 <__aeabi_f2iz+0x2c>
   33cd6:	0008      	movs	r0, r1
   33cd8:	4770      	bx	lr
   33cda:	4b03      	ldr	r3, [pc, #12]	; (33ce8 <__aeabi_f2iz+0x3c>)
   33cdc:	18d0      	adds	r0, r2, r3
   33cde:	e7fb      	b.n	33cd8 <__aeabi_f2iz+0x2c>
   33ce0:	3b96      	subs	r3, #150	; 0x96
   33ce2:	4099      	lsls	r1, r3
   33ce4:	e7f4      	b.n	33cd0 <__aeabi_f2iz+0x24>
   33ce6:	46c0      	nop			; (mov r8, r8)
   33ce8:	7fffffff 	.word	0x7fffffff

00033cec <__aeabi_i2f>:
   33cec:	b570      	push	{r4, r5, r6, lr}
   33cee:	2800      	cmp	r0, #0
   33cf0:	d030      	beq.n	33d54 <__aeabi_i2f+0x68>
   33cf2:	17c3      	asrs	r3, r0, #31
   33cf4:	18c4      	adds	r4, r0, r3
   33cf6:	405c      	eors	r4, r3
   33cf8:	0fc5      	lsrs	r5, r0, #31
   33cfa:	0020      	movs	r0, r4
   33cfc:	f001 fc8c 	bl	35618 <__clzsi2>
   33d00:	239e      	movs	r3, #158	; 0x9e
   33d02:	1a1b      	subs	r3, r3, r0
   33d04:	2b96      	cmp	r3, #150	; 0x96
   33d06:	dc0d      	bgt.n	33d24 <__aeabi_i2f+0x38>
   33d08:	2296      	movs	r2, #150	; 0x96
   33d0a:	1ad2      	subs	r2, r2, r3
   33d0c:	4094      	lsls	r4, r2
   33d0e:	002a      	movs	r2, r5
   33d10:	0264      	lsls	r4, r4, #9
   33d12:	0a64      	lsrs	r4, r4, #9
   33d14:	b2db      	uxtb	r3, r3
   33d16:	0264      	lsls	r4, r4, #9
   33d18:	05db      	lsls	r3, r3, #23
   33d1a:	0a60      	lsrs	r0, r4, #9
   33d1c:	07d2      	lsls	r2, r2, #31
   33d1e:	4318      	orrs	r0, r3
   33d20:	4310      	orrs	r0, r2
   33d22:	bd70      	pop	{r4, r5, r6, pc}
   33d24:	2b99      	cmp	r3, #153	; 0x99
   33d26:	dc19      	bgt.n	33d5c <__aeabi_i2f+0x70>
   33d28:	2299      	movs	r2, #153	; 0x99
   33d2a:	1ad2      	subs	r2, r2, r3
   33d2c:	2a00      	cmp	r2, #0
   33d2e:	dd29      	ble.n	33d84 <__aeabi_i2f+0x98>
   33d30:	4094      	lsls	r4, r2
   33d32:	0022      	movs	r2, r4
   33d34:	4c14      	ldr	r4, [pc, #80]	; (33d88 <__aeabi_i2f+0x9c>)
   33d36:	4014      	ands	r4, r2
   33d38:	0751      	lsls	r1, r2, #29
   33d3a:	d004      	beq.n	33d46 <__aeabi_i2f+0x5a>
   33d3c:	210f      	movs	r1, #15
   33d3e:	400a      	ands	r2, r1
   33d40:	2a04      	cmp	r2, #4
   33d42:	d000      	beq.n	33d46 <__aeabi_i2f+0x5a>
   33d44:	3404      	adds	r4, #4
   33d46:	0162      	lsls	r2, r4, #5
   33d48:	d413      	bmi.n	33d72 <__aeabi_i2f+0x86>
   33d4a:	01a4      	lsls	r4, r4, #6
   33d4c:	0a64      	lsrs	r4, r4, #9
   33d4e:	b2db      	uxtb	r3, r3
   33d50:	002a      	movs	r2, r5
   33d52:	e7e0      	b.n	33d16 <__aeabi_i2f+0x2a>
   33d54:	2200      	movs	r2, #0
   33d56:	2300      	movs	r3, #0
   33d58:	2400      	movs	r4, #0
   33d5a:	e7dc      	b.n	33d16 <__aeabi_i2f+0x2a>
   33d5c:	2205      	movs	r2, #5
   33d5e:	0021      	movs	r1, r4
   33d60:	1a12      	subs	r2, r2, r0
   33d62:	40d1      	lsrs	r1, r2
   33d64:	22b9      	movs	r2, #185	; 0xb9
   33d66:	1ad2      	subs	r2, r2, r3
   33d68:	4094      	lsls	r4, r2
   33d6a:	1e62      	subs	r2, r4, #1
   33d6c:	4194      	sbcs	r4, r2
   33d6e:	430c      	orrs	r4, r1
   33d70:	e7da      	b.n	33d28 <__aeabi_i2f+0x3c>
   33d72:	4b05      	ldr	r3, [pc, #20]	; (33d88 <__aeabi_i2f+0x9c>)
   33d74:	002a      	movs	r2, r5
   33d76:	401c      	ands	r4, r3
   33d78:	239f      	movs	r3, #159	; 0x9f
   33d7a:	01a4      	lsls	r4, r4, #6
   33d7c:	1a1b      	subs	r3, r3, r0
   33d7e:	0a64      	lsrs	r4, r4, #9
   33d80:	b2db      	uxtb	r3, r3
   33d82:	e7c8      	b.n	33d16 <__aeabi_i2f+0x2a>
   33d84:	0022      	movs	r2, r4
   33d86:	e7d5      	b.n	33d34 <__aeabi_i2f+0x48>
   33d88:	fbffffff 	.word	0xfbffffff

00033d8c <__aeabi_dadd>:
   33d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   33d8e:	4645      	mov	r5, r8
   33d90:	46de      	mov	lr, fp
   33d92:	4657      	mov	r7, sl
   33d94:	464e      	mov	r6, r9
   33d96:	030c      	lsls	r4, r1, #12
   33d98:	b5e0      	push	{r5, r6, r7, lr}
   33d9a:	004e      	lsls	r6, r1, #1
   33d9c:	0fc9      	lsrs	r1, r1, #31
   33d9e:	4688      	mov	r8, r1
   33da0:	000d      	movs	r5, r1
   33da2:	0a61      	lsrs	r1, r4, #9
   33da4:	0f44      	lsrs	r4, r0, #29
   33da6:	430c      	orrs	r4, r1
   33da8:	00c7      	lsls	r7, r0, #3
   33daa:	0319      	lsls	r1, r3, #12
   33dac:	0058      	lsls	r0, r3, #1
   33dae:	0fdb      	lsrs	r3, r3, #31
   33db0:	469b      	mov	fp, r3
   33db2:	0a4b      	lsrs	r3, r1, #9
   33db4:	0f51      	lsrs	r1, r2, #29
   33db6:	430b      	orrs	r3, r1
   33db8:	0d76      	lsrs	r6, r6, #21
   33dba:	0d40      	lsrs	r0, r0, #21
   33dbc:	0019      	movs	r1, r3
   33dbe:	00d2      	lsls	r2, r2, #3
   33dc0:	45d8      	cmp	r8, fp
   33dc2:	d100      	bne.n	33dc6 <__aeabi_dadd+0x3a>
   33dc4:	e0ae      	b.n	33f24 <__aeabi_dadd+0x198>
   33dc6:	1a35      	subs	r5, r6, r0
   33dc8:	2d00      	cmp	r5, #0
   33dca:	dc00      	bgt.n	33dce <__aeabi_dadd+0x42>
   33dcc:	e0f6      	b.n	33fbc <__aeabi_dadd+0x230>
   33dce:	2800      	cmp	r0, #0
   33dd0:	d10f      	bne.n	33df2 <__aeabi_dadd+0x66>
   33dd2:	4313      	orrs	r3, r2
   33dd4:	d100      	bne.n	33dd8 <__aeabi_dadd+0x4c>
   33dd6:	e0db      	b.n	33f90 <__aeabi_dadd+0x204>
   33dd8:	1e6b      	subs	r3, r5, #1
   33dda:	2b00      	cmp	r3, #0
   33ddc:	d000      	beq.n	33de0 <__aeabi_dadd+0x54>
   33dde:	e137      	b.n	34050 <__aeabi_dadd+0x2c4>
   33de0:	1aba      	subs	r2, r7, r2
   33de2:	4297      	cmp	r7, r2
   33de4:	41bf      	sbcs	r7, r7
   33de6:	1a64      	subs	r4, r4, r1
   33de8:	427f      	negs	r7, r7
   33dea:	1be4      	subs	r4, r4, r7
   33dec:	2601      	movs	r6, #1
   33dee:	0017      	movs	r7, r2
   33df0:	e024      	b.n	33e3c <__aeabi_dadd+0xb0>
   33df2:	4bc6      	ldr	r3, [pc, #792]	; (3410c <__aeabi_dadd+0x380>)
   33df4:	429e      	cmp	r6, r3
   33df6:	d04d      	beq.n	33e94 <__aeabi_dadd+0x108>
   33df8:	2380      	movs	r3, #128	; 0x80
   33dfa:	041b      	lsls	r3, r3, #16
   33dfc:	4319      	orrs	r1, r3
   33dfe:	2d38      	cmp	r5, #56	; 0x38
   33e00:	dd00      	ble.n	33e04 <__aeabi_dadd+0x78>
   33e02:	e107      	b.n	34014 <__aeabi_dadd+0x288>
   33e04:	2d1f      	cmp	r5, #31
   33e06:	dd00      	ble.n	33e0a <__aeabi_dadd+0x7e>
   33e08:	e138      	b.n	3407c <__aeabi_dadd+0x2f0>
   33e0a:	2020      	movs	r0, #32
   33e0c:	1b43      	subs	r3, r0, r5
   33e0e:	469a      	mov	sl, r3
   33e10:	000b      	movs	r3, r1
   33e12:	4650      	mov	r0, sl
   33e14:	4083      	lsls	r3, r0
   33e16:	4699      	mov	r9, r3
   33e18:	0013      	movs	r3, r2
   33e1a:	4648      	mov	r0, r9
   33e1c:	40eb      	lsrs	r3, r5
   33e1e:	4318      	orrs	r0, r3
   33e20:	0003      	movs	r3, r0
   33e22:	4650      	mov	r0, sl
   33e24:	4082      	lsls	r2, r0
   33e26:	1e50      	subs	r0, r2, #1
   33e28:	4182      	sbcs	r2, r0
   33e2a:	40e9      	lsrs	r1, r5
   33e2c:	431a      	orrs	r2, r3
   33e2e:	1aba      	subs	r2, r7, r2
   33e30:	1a61      	subs	r1, r4, r1
   33e32:	4297      	cmp	r7, r2
   33e34:	41a4      	sbcs	r4, r4
   33e36:	0017      	movs	r7, r2
   33e38:	4264      	negs	r4, r4
   33e3a:	1b0c      	subs	r4, r1, r4
   33e3c:	0223      	lsls	r3, r4, #8
   33e3e:	d562      	bpl.n	33f06 <__aeabi_dadd+0x17a>
   33e40:	0264      	lsls	r4, r4, #9
   33e42:	0a65      	lsrs	r5, r4, #9
   33e44:	2d00      	cmp	r5, #0
   33e46:	d100      	bne.n	33e4a <__aeabi_dadd+0xbe>
   33e48:	e0df      	b.n	3400a <__aeabi_dadd+0x27e>
   33e4a:	0028      	movs	r0, r5
   33e4c:	f001 fbe4 	bl	35618 <__clzsi2>
   33e50:	0003      	movs	r3, r0
   33e52:	3b08      	subs	r3, #8
   33e54:	2b1f      	cmp	r3, #31
   33e56:	dd00      	ble.n	33e5a <__aeabi_dadd+0xce>
   33e58:	e0d2      	b.n	34000 <__aeabi_dadd+0x274>
   33e5a:	2220      	movs	r2, #32
   33e5c:	003c      	movs	r4, r7
   33e5e:	1ad2      	subs	r2, r2, r3
   33e60:	409d      	lsls	r5, r3
   33e62:	40d4      	lsrs	r4, r2
   33e64:	409f      	lsls	r7, r3
   33e66:	4325      	orrs	r5, r4
   33e68:	429e      	cmp	r6, r3
   33e6a:	dd00      	ble.n	33e6e <__aeabi_dadd+0xe2>
   33e6c:	e0c4      	b.n	33ff8 <__aeabi_dadd+0x26c>
   33e6e:	1b9e      	subs	r6, r3, r6
   33e70:	1c73      	adds	r3, r6, #1
   33e72:	2b1f      	cmp	r3, #31
   33e74:	dd00      	ble.n	33e78 <__aeabi_dadd+0xec>
   33e76:	e0f1      	b.n	3405c <__aeabi_dadd+0x2d0>
   33e78:	2220      	movs	r2, #32
   33e7a:	0038      	movs	r0, r7
   33e7c:	0029      	movs	r1, r5
   33e7e:	1ad2      	subs	r2, r2, r3
   33e80:	40d8      	lsrs	r0, r3
   33e82:	4091      	lsls	r1, r2
   33e84:	4097      	lsls	r7, r2
   33e86:	002c      	movs	r4, r5
   33e88:	4301      	orrs	r1, r0
   33e8a:	1e78      	subs	r0, r7, #1
   33e8c:	4187      	sbcs	r7, r0
   33e8e:	40dc      	lsrs	r4, r3
   33e90:	2600      	movs	r6, #0
   33e92:	430f      	orrs	r7, r1
   33e94:	077b      	lsls	r3, r7, #29
   33e96:	d009      	beq.n	33eac <__aeabi_dadd+0x120>
   33e98:	230f      	movs	r3, #15
   33e9a:	403b      	ands	r3, r7
   33e9c:	2b04      	cmp	r3, #4
   33e9e:	d005      	beq.n	33eac <__aeabi_dadd+0x120>
   33ea0:	1d3b      	adds	r3, r7, #4
   33ea2:	42bb      	cmp	r3, r7
   33ea4:	41bf      	sbcs	r7, r7
   33ea6:	427f      	negs	r7, r7
   33ea8:	19e4      	adds	r4, r4, r7
   33eaa:	001f      	movs	r7, r3
   33eac:	0223      	lsls	r3, r4, #8
   33eae:	d52c      	bpl.n	33f0a <__aeabi_dadd+0x17e>
   33eb0:	4b96      	ldr	r3, [pc, #600]	; (3410c <__aeabi_dadd+0x380>)
   33eb2:	3601      	adds	r6, #1
   33eb4:	429e      	cmp	r6, r3
   33eb6:	d100      	bne.n	33eba <__aeabi_dadd+0x12e>
   33eb8:	e09a      	b.n	33ff0 <__aeabi_dadd+0x264>
   33eba:	4645      	mov	r5, r8
   33ebc:	4b94      	ldr	r3, [pc, #592]	; (34110 <__aeabi_dadd+0x384>)
   33ebe:	08ff      	lsrs	r7, r7, #3
   33ec0:	401c      	ands	r4, r3
   33ec2:	0760      	lsls	r0, r4, #29
   33ec4:	0576      	lsls	r6, r6, #21
   33ec6:	0264      	lsls	r4, r4, #9
   33ec8:	4307      	orrs	r7, r0
   33eca:	0b24      	lsrs	r4, r4, #12
   33ecc:	0d76      	lsrs	r6, r6, #21
   33ece:	2100      	movs	r1, #0
   33ed0:	0324      	lsls	r4, r4, #12
   33ed2:	0b23      	lsrs	r3, r4, #12
   33ed4:	0d0c      	lsrs	r4, r1, #20
   33ed6:	4a8f      	ldr	r2, [pc, #572]	; (34114 <__aeabi_dadd+0x388>)
   33ed8:	0524      	lsls	r4, r4, #20
   33eda:	431c      	orrs	r4, r3
   33edc:	4014      	ands	r4, r2
   33ede:	0533      	lsls	r3, r6, #20
   33ee0:	4323      	orrs	r3, r4
   33ee2:	005b      	lsls	r3, r3, #1
   33ee4:	07ed      	lsls	r5, r5, #31
   33ee6:	085b      	lsrs	r3, r3, #1
   33ee8:	432b      	orrs	r3, r5
   33eea:	0038      	movs	r0, r7
   33eec:	0019      	movs	r1, r3
   33eee:	bc3c      	pop	{r2, r3, r4, r5}
   33ef0:	4690      	mov	r8, r2
   33ef2:	4699      	mov	r9, r3
   33ef4:	46a2      	mov	sl, r4
   33ef6:	46ab      	mov	fp, r5
   33ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   33efa:	4664      	mov	r4, ip
   33efc:	4304      	orrs	r4, r0
   33efe:	d100      	bne.n	33f02 <__aeabi_dadd+0x176>
   33f00:	e211      	b.n	34326 <__aeabi_dadd+0x59a>
   33f02:	0004      	movs	r4, r0
   33f04:	4667      	mov	r7, ip
   33f06:	077b      	lsls	r3, r7, #29
   33f08:	d1c6      	bne.n	33e98 <__aeabi_dadd+0x10c>
   33f0a:	4645      	mov	r5, r8
   33f0c:	0760      	lsls	r0, r4, #29
   33f0e:	08ff      	lsrs	r7, r7, #3
   33f10:	4307      	orrs	r7, r0
   33f12:	08e4      	lsrs	r4, r4, #3
   33f14:	4b7d      	ldr	r3, [pc, #500]	; (3410c <__aeabi_dadd+0x380>)
   33f16:	429e      	cmp	r6, r3
   33f18:	d030      	beq.n	33f7c <__aeabi_dadd+0x1f0>
   33f1a:	0324      	lsls	r4, r4, #12
   33f1c:	0576      	lsls	r6, r6, #21
   33f1e:	0b24      	lsrs	r4, r4, #12
   33f20:	0d76      	lsrs	r6, r6, #21
   33f22:	e7d4      	b.n	33ece <__aeabi_dadd+0x142>
   33f24:	1a33      	subs	r3, r6, r0
   33f26:	469a      	mov	sl, r3
   33f28:	2b00      	cmp	r3, #0
   33f2a:	dd78      	ble.n	3401e <__aeabi_dadd+0x292>
   33f2c:	2800      	cmp	r0, #0
   33f2e:	d031      	beq.n	33f94 <__aeabi_dadd+0x208>
   33f30:	4876      	ldr	r0, [pc, #472]	; (3410c <__aeabi_dadd+0x380>)
   33f32:	4286      	cmp	r6, r0
   33f34:	d0ae      	beq.n	33e94 <__aeabi_dadd+0x108>
   33f36:	2080      	movs	r0, #128	; 0x80
   33f38:	0400      	lsls	r0, r0, #16
   33f3a:	4301      	orrs	r1, r0
   33f3c:	4653      	mov	r3, sl
   33f3e:	2b38      	cmp	r3, #56	; 0x38
   33f40:	dc00      	bgt.n	33f44 <__aeabi_dadd+0x1b8>
   33f42:	e0e9      	b.n	34118 <__aeabi_dadd+0x38c>
   33f44:	430a      	orrs	r2, r1
   33f46:	1e51      	subs	r1, r2, #1
   33f48:	418a      	sbcs	r2, r1
   33f4a:	2100      	movs	r1, #0
   33f4c:	19d2      	adds	r2, r2, r7
   33f4e:	42ba      	cmp	r2, r7
   33f50:	41bf      	sbcs	r7, r7
   33f52:	1909      	adds	r1, r1, r4
   33f54:	427c      	negs	r4, r7
   33f56:	0017      	movs	r7, r2
   33f58:	190c      	adds	r4, r1, r4
   33f5a:	0223      	lsls	r3, r4, #8
   33f5c:	d5d3      	bpl.n	33f06 <__aeabi_dadd+0x17a>
   33f5e:	4b6b      	ldr	r3, [pc, #428]	; (3410c <__aeabi_dadd+0x380>)
   33f60:	3601      	adds	r6, #1
   33f62:	429e      	cmp	r6, r3
   33f64:	d100      	bne.n	33f68 <__aeabi_dadd+0x1dc>
   33f66:	e13a      	b.n	341de <__aeabi_dadd+0x452>
   33f68:	2001      	movs	r0, #1
   33f6a:	4b69      	ldr	r3, [pc, #420]	; (34110 <__aeabi_dadd+0x384>)
   33f6c:	401c      	ands	r4, r3
   33f6e:	087b      	lsrs	r3, r7, #1
   33f70:	4007      	ands	r7, r0
   33f72:	431f      	orrs	r7, r3
   33f74:	07e0      	lsls	r0, r4, #31
   33f76:	4307      	orrs	r7, r0
   33f78:	0864      	lsrs	r4, r4, #1
   33f7a:	e78b      	b.n	33e94 <__aeabi_dadd+0x108>
   33f7c:	0023      	movs	r3, r4
   33f7e:	433b      	orrs	r3, r7
   33f80:	d100      	bne.n	33f84 <__aeabi_dadd+0x1f8>
   33f82:	e1cb      	b.n	3431c <__aeabi_dadd+0x590>
   33f84:	2280      	movs	r2, #128	; 0x80
   33f86:	0312      	lsls	r2, r2, #12
   33f88:	4314      	orrs	r4, r2
   33f8a:	0324      	lsls	r4, r4, #12
   33f8c:	0b24      	lsrs	r4, r4, #12
   33f8e:	e79e      	b.n	33ece <__aeabi_dadd+0x142>
   33f90:	002e      	movs	r6, r5
   33f92:	e77f      	b.n	33e94 <__aeabi_dadd+0x108>
   33f94:	0008      	movs	r0, r1
   33f96:	4310      	orrs	r0, r2
   33f98:	d100      	bne.n	33f9c <__aeabi_dadd+0x210>
   33f9a:	e0b4      	b.n	34106 <__aeabi_dadd+0x37a>
   33f9c:	1e58      	subs	r0, r3, #1
   33f9e:	2800      	cmp	r0, #0
   33fa0:	d000      	beq.n	33fa4 <__aeabi_dadd+0x218>
   33fa2:	e0de      	b.n	34162 <__aeabi_dadd+0x3d6>
   33fa4:	18ba      	adds	r2, r7, r2
   33fa6:	42ba      	cmp	r2, r7
   33fa8:	419b      	sbcs	r3, r3
   33faa:	1864      	adds	r4, r4, r1
   33fac:	425b      	negs	r3, r3
   33fae:	18e4      	adds	r4, r4, r3
   33fb0:	0017      	movs	r7, r2
   33fb2:	2601      	movs	r6, #1
   33fb4:	0223      	lsls	r3, r4, #8
   33fb6:	d5a6      	bpl.n	33f06 <__aeabi_dadd+0x17a>
   33fb8:	2602      	movs	r6, #2
   33fba:	e7d5      	b.n	33f68 <__aeabi_dadd+0x1dc>
   33fbc:	2d00      	cmp	r5, #0
   33fbe:	d16e      	bne.n	3409e <__aeabi_dadd+0x312>
   33fc0:	1c70      	adds	r0, r6, #1
   33fc2:	0540      	lsls	r0, r0, #21
   33fc4:	0d40      	lsrs	r0, r0, #21
   33fc6:	2801      	cmp	r0, #1
   33fc8:	dc00      	bgt.n	33fcc <__aeabi_dadd+0x240>
   33fca:	e0f9      	b.n	341c0 <__aeabi_dadd+0x434>
   33fcc:	1ab8      	subs	r0, r7, r2
   33fce:	4684      	mov	ip, r0
   33fd0:	4287      	cmp	r7, r0
   33fd2:	4180      	sbcs	r0, r0
   33fd4:	1ae5      	subs	r5, r4, r3
   33fd6:	4240      	negs	r0, r0
   33fd8:	1a2d      	subs	r5, r5, r0
   33fda:	0228      	lsls	r0, r5, #8
   33fdc:	d400      	bmi.n	33fe0 <__aeabi_dadd+0x254>
   33fde:	e089      	b.n	340f4 <__aeabi_dadd+0x368>
   33fe0:	1bd7      	subs	r7, r2, r7
   33fe2:	42ba      	cmp	r2, r7
   33fe4:	4192      	sbcs	r2, r2
   33fe6:	1b1c      	subs	r4, r3, r4
   33fe8:	4252      	negs	r2, r2
   33fea:	1aa5      	subs	r5, r4, r2
   33fec:	46d8      	mov	r8, fp
   33fee:	e729      	b.n	33e44 <__aeabi_dadd+0xb8>
   33ff0:	4645      	mov	r5, r8
   33ff2:	2400      	movs	r4, #0
   33ff4:	2700      	movs	r7, #0
   33ff6:	e76a      	b.n	33ece <__aeabi_dadd+0x142>
   33ff8:	4c45      	ldr	r4, [pc, #276]	; (34110 <__aeabi_dadd+0x384>)
   33ffa:	1af6      	subs	r6, r6, r3
   33ffc:	402c      	ands	r4, r5
   33ffe:	e749      	b.n	33e94 <__aeabi_dadd+0x108>
   34000:	003d      	movs	r5, r7
   34002:	3828      	subs	r0, #40	; 0x28
   34004:	4085      	lsls	r5, r0
   34006:	2700      	movs	r7, #0
   34008:	e72e      	b.n	33e68 <__aeabi_dadd+0xdc>
   3400a:	0038      	movs	r0, r7
   3400c:	f001 fb04 	bl	35618 <__clzsi2>
   34010:	3020      	adds	r0, #32
   34012:	e71d      	b.n	33e50 <__aeabi_dadd+0xc4>
   34014:	430a      	orrs	r2, r1
   34016:	1e51      	subs	r1, r2, #1
   34018:	418a      	sbcs	r2, r1
   3401a:	2100      	movs	r1, #0
   3401c:	e707      	b.n	33e2e <__aeabi_dadd+0xa2>
   3401e:	2b00      	cmp	r3, #0
   34020:	d000      	beq.n	34024 <__aeabi_dadd+0x298>
   34022:	e0f3      	b.n	3420c <__aeabi_dadd+0x480>
   34024:	1c70      	adds	r0, r6, #1
   34026:	0543      	lsls	r3, r0, #21
   34028:	0d5b      	lsrs	r3, r3, #21
   3402a:	2b01      	cmp	r3, #1
   3402c:	dc00      	bgt.n	34030 <__aeabi_dadd+0x2a4>
   3402e:	e0ad      	b.n	3418c <__aeabi_dadd+0x400>
   34030:	4b36      	ldr	r3, [pc, #216]	; (3410c <__aeabi_dadd+0x380>)
   34032:	4298      	cmp	r0, r3
   34034:	d100      	bne.n	34038 <__aeabi_dadd+0x2ac>
   34036:	e0d1      	b.n	341dc <__aeabi_dadd+0x450>
   34038:	18ba      	adds	r2, r7, r2
   3403a:	42ba      	cmp	r2, r7
   3403c:	41bf      	sbcs	r7, r7
   3403e:	1864      	adds	r4, r4, r1
   34040:	427f      	negs	r7, r7
   34042:	19e4      	adds	r4, r4, r7
   34044:	07e7      	lsls	r7, r4, #31
   34046:	0852      	lsrs	r2, r2, #1
   34048:	4317      	orrs	r7, r2
   3404a:	0864      	lsrs	r4, r4, #1
   3404c:	0006      	movs	r6, r0
   3404e:	e721      	b.n	33e94 <__aeabi_dadd+0x108>
   34050:	482e      	ldr	r0, [pc, #184]	; (3410c <__aeabi_dadd+0x380>)
   34052:	4285      	cmp	r5, r0
   34054:	d100      	bne.n	34058 <__aeabi_dadd+0x2cc>
   34056:	e093      	b.n	34180 <__aeabi_dadd+0x3f4>
   34058:	001d      	movs	r5, r3
   3405a:	e6d0      	b.n	33dfe <__aeabi_dadd+0x72>
   3405c:	0029      	movs	r1, r5
   3405e:	3e1f      	subs	r6, #31
   34060:	40f1      	lsrs	r1, r6
   34062:	2b20      	cmp	r3, #32
   34064:	d100      	bne.n	34068 <__aeabi_dadd+0x2dc>
   34066:	e08d      	b.n	34184 <__aeabi_dadd+0x3f8>
   34068:	2240      	movs	r2, #64	; 0x40
   3406a:	1ad3      	subs	r3, r2, r3
   3406c:	409d      	lsls	r5, r3
   3406e:	432f      	orrs	r7, r5
   34070:	1e7d      	subs	r5, r7, #1
   34072:	41af      	sbcs	r7, r5
   34074:	2400      	movs	r4, #0
   34076:	430f      	orrs	r7, r1
   34078:	2600      	movs	r6, #0
   3407a:	e744      	b.n	33f06 <__aeabi_dadd+0x17a>
   3407c:	002b      	movs	r3, r5
   3407e:	0008      	movs	r0, r1
   34080:	3b20      	subs	r3, #32
   34082:	40d8      	lsrs	r0, r3
   34084:	0003      	movs	r3, r0
   34086:	2d20      	cmp	r5, #32
   34088:	d100      	bne.n	3408c <__aeabi_dadd+0x300>
   3408a:	e07d      	b.n	34188 <__aeabi_dadd+0x3fc>
   3408c:	2040      	movs	r0, #64	; 0x40
   3408e:	1b45      	subs	r5, r0, r5
   34090:	40a9      	lsls	r1, r5
   34092:	430a      	orrs	r2, r1
   34094:	1e51      	subs	r1, r2, #1
   34096:	418a      	sbcs	r2, r1
   34098:	2100      	movs	r1, #0
   3409a:	431a      	orrs	r2, r3
   3409c:	e6c7      	b.n	33e2e <__aeabi_dadd+0xa2>
   3409e:	2e00      	cmp	r6, #0
   340a0:	d050      	beq.n	34144 <__aeabi_dadd+0x3b8>
   340a2:	4e1a      	ldr	r6, [pc, #104]	; (3410c <__aeabi_dadd+0x380>)
   340a4:	42b0      	cmp	r0, r6
   340a6:	d057      	beq.n	34158 <__aeabi_dadd+0x3cc>
   340a8:	2680      	movs	r6, #128	; 0x80
   340aa:	426b      	negs	r3, r5
   340ac:	4699      	mov	r9, r3
   340ae:	0436      	lsls	r6, r6, #16
   340b0:	4334      	orrs	r4, r6
   340b2:	464b      	mov	r3, r9
   340b4:	2b38      	cmp	r3, #56	; 0x38
   340b6:	dd00      	ble.n	340ba <__aeabi_dadd+0x32e>
   340b8:	e0d6      	b.n	34268 <__aeabi_dadd+0x4dc>
   340ba:	2b1f      	cmp	r3, #31
   340bc:	dd00      	ble.n	340c0 <__aeabi_dadd+0x334>
   340be:	e135      	b.n	3432c <__aeabi_dadd+0x5a0>
   340c0:	2620      	movs	r6, #32
   340c2:	1af5      	subs	r5, r6, r3
   340c4:	0026      	movs	r6, r4
   340c6:	40ae      	lsls	r6, r5
   340c8:	46b2      	mov	sl, r6
   340ca:	003e      	movs	r6, r7
   340cc:	40de      	lsrs	r6, r3
   340ce:	46ac      	mov	ip, r5
   340d0:	0035      	movs	r5, r6
   340d2:	4656      	mov	r6, sl
   340d4:	432e      	orrs	r6, r5
   340d6:	4665      	mov	r5, ip
   340d8:	40af      	lsls	r7, r5
   340da:	1e7d      	subs	r5, r7, #1
   340dc:	41af      	sbcs	r7, r5
   340de:	40dc      	lsrs	r4, r3
   340e0:	4337      	orrs	r7, r6
   340e2:	1bd7      	subs	r7, r2, r7
   340e4:	42ba      	cmp	r2, r7
   340e6:	4192      	sbcs	r2, r2
   340e8:	1b0c      	subs	r4, r1, r4
   340ea:	4252      	negs	r2, r2
   340ec:	1aa4      	subs	r4, r4, r2
   340ee:	0006      	movs	r6, r0
   340f0:	46d8      	mov	r8, fp
   340f2:	e6a3      	b.n	33e3c <__aeabi_dadd+0xb0>
   340f4:	4664      	mov	r4, ip
   340f6:	4667      	mov	r7, ip
   340f8:	432c      	orrs	r4, r5
   340fa:	d000      	beq.n	340fe <__aeabi_dadd+0x372>
   340fc:	e6a2      	b.n	33e44 <__aeabi_dadd+0xb8>
   340fe:	2500      	movs	r5, #0
   34100:	2600      	movs	r6, #0
   34102:	2700      	movs	r7, #0
   34104:	e706      	b.n	33f14 <__aeabi_dadd+0x188>
   34106:	001e      	movs	r6, r3
   34108:	e6c4      	b.n	33e94 <__aeabi_dadd+0x108>
   3410a:	46c0      	nop			; (mov r8, r8)
   3410c:	000007ff 	.word	0x000007ff
   34110:	ff7fffff 	.word	0xff7fffff
   34114:	800fffff 	.word	0x800fffff
   34118:	2b1f      	cmp	r3, #31
   3411a:	dc63      	bgt.n	341e4 <__aeabi_dadd+0x458>
   3411c:	2020      	movs	r0, #32
   3411e:	1ac3      	subs	r3, r0, r3
   34120:	0008      	movs	r0, r1
   34122:	4098      	lsls	r0, r3
   34124:	469c      	mov	ip, r3
   34126:	4683      	mov	fp, r0
   34128:	4653      	mov	r3, sl
   3412a:	0010      	movs	r0, r2
   3412c:	40d8      	lsrs	r0, r3
   3412e:	0003      	movs	r3, r0
   34130:	4658      	mov	r0, fp
   34132:	4318      	orrs	r0, r3
   34134:	4663      	mov	r3, ip
   34136:	409a      	lsls	r2, r3
   34138:	1e53      	subs	r3, r2, #1
   3413a:	419a      	sbcs	r2, r3
   3413c:	4653      	mov	r3, sl
   3413e:	4302      	orrs	r2, r0
   34140:	40d9      	lsrs	r1, r3
   34142:	e703      	b.n	33f4c <__aeabi_dadd+0x1c0>
   34144:	0026      	movs	r6, r4
   34146:	433e      	orrs	r6, r7
   34148:	d006      	beq.n	34158 <__aeabi_dadd+0x3cc>
   3414a:	43eb      	mvns	r3, r5
   3414c:	4699      	mov	r9, r3
   3414e:	2b00      	cmp	r3, #0
   34150:	d0c7      	beq.n	340e2 <__aeabi_dadd+0x356>
   34152:	4e94      	ldr	r6, [pc, #592]	; (343a4 <__aeabi_dadd+0x618>)
   34154:	42b0      	cmp	r0, r6
   34156:	d1ac      	bne.n	340b2 <__aeabi_dadd+0x326>
   34158:	000c      	movs	r4, r1
   3415a:	0017      	movs	r7, r2
   3415c:	0006      	movs	r6, r0
   3415e:	46d8      	mov	r8, fp
   34160:	e698      	b.n	33e94 <__aeabi_dadd+0x108>
   34162:	4b90      	ldr	r3, [pc, #576]	; (343a4 <__aeabi_dadd+0x618>)
   34164:	459a      	cmp	sl, r3
   34166:	d00b      	beq.n	34180 <__aeabi_dadd+0x3f4>
   34168:	4682      	mov	sl, r0
   3416a:	e6e7      	b.n	33f3c <__aeabi_dadd+0x1b0>
   3416c:	2800      	cmp	r0, #0
   3416e:	d000      	beq.n	34172 <__aeabi_dadd+0x3e6>
   34170:	e09e      	b.n	342b0 <__aeabi_dadd+0x524>
   34172:	0018      	movs	r0, r3
   34174:	4310      	orrs	r0, r2
   34176:	d100      	bne.n	3417a <__aeabi_dadd+0x3ee>
   34178:	e0e9      	b.n	3434e <__aeabi_dadd+0x5c2>
   3417a:	001c      	movs	r4, r3
   3417c:	0017      	movs	r7, r2
   3417e:	46d8      	mov	r8, fp
   34180:	4e88      	ldr	r6, [pc, #544]	; (343a4 <__aeabi_dadd+0x618>)
   34182:	e687      	b.n	33e94 <__aeabi_dadd+0x108>
   34184:	2500      	movs	r5, #0
   34186:	e772      	b.n	3406e <__aeabi_dadd+0x2e2>
   34188:	2100      	movs	r1, #0
   3418a:	e782      	b.n	34092 <__aeabi_dadd+0x306>
   3418c:	0023      	movs	r3, r4
   3418e:	433b      	orrs	r3, r7
   34190:	2e00      	cmp	r6, #0
   34192:	d000      	beq.n	34196 <__aeabi_dadd+0x40a>
   34194:	e0ab      	b.n	342ee <__aeabi_dadd+0x562>
   34196:	2b00      	cmp	r3, #0
   34198:	d100      	bne.n	3419c <__aeabi_dadd+0x410>
   3419a:	e0e7      	b.n	3436c <__aeabi_dadd+0x5e0>
   3419c:	000b      	movs	r3, r1
   3419e:	4313      	orrs	r3, r2
   341a0:	d100      	bne.n	341a4 <__aeabi_dadd+0x418>
   341a2:	e677      	b.n	33e94 <__aeabi_dadd+0x108>
   341a4:	18ba      	adds	r2, r7, r2
   341a6:	42ba      	cmp	r2, r7
   341a8:	41bf      	sbcs	r7, r7
   341aa:	1864      	adds	r4, r4, r1
   341ac:	427f      	negs	r7, r7
   341ae:	19e4      	adds	r4, r4, r7
   341b0:	0223      	lsls	r3, r4, #8
   341b2:	d400      	bmi.n	341b6 <__aeabi_dadd+0x42a>
   341b4:	e0f2      	b.n	3439c <__aeabi_dadd+0x610>
   341b6:	4b7c      	ldr	r3, [pc, #496]	; (343a8 <__aeabi_dadd+0x61c>)
   341b8:	0017      	movs	r7, r2
   341ba:	401c      	ands	r4, r3
   341bc:	0006      	movs	r6, r0
   341be:	e669      	b.n	33e94 <__aeabi_dadd+0x108>
   341c0:	0020      	movs	r0, r4
   341c2:	4338      	orrs	r0, r7
   341c4:	2e00      	cmp	r6, #0
   341c6:	d1d1      	bne.n	3416c <__aeabi_dadd+0x3e0>
   341c8:	2800      	cmp	r0, #0
   341ca:	d15b      	bne.n	34284 <__aeabi_dadd+0x4f8>
   341cc:	001c      	movs	r4, r3
   341ce:	4314      	orrs	r4, r2
   341d0:	d100      	bne.n	341d4 <__aeabi_dadd+0x448>
   341d2:	e0a8      	b.n	34326 <__aeabi_dadd+0x59a>
   341d4:	001c      	movs	r4, r3
   341d6:	0017      	movs	r7, r2
   341d8:	46d8      	mov	r8, fp
   341da:	e65b      	b.n	33e94 <__aeabi_dadd+0x108>
   341dc:	0006      	movs	r6, r0
   341de:	2400      	movs	r4, #0
   341e0:	2700      	movs	r7, #0
   341e2:	e697      	b.n	33f14 <__aeabi_dadd+0x188>
   341e4:	4650      	mov	r0, sl
   341e6:	000b      	movs	r3, r1
   341e8:	3820      	subs	r0, #32
   341ea:	40c3      	lsrs	r3, r0
   341ec:	4699      	mov	r9, r3
   341ee:	4653      	mov	r3, sl
   341f0:	2b20      	cmp	r3, #32
   341f2:	d100      	bne.n	341f6 <__aeabi_dadd+0x46a>
   341f4:	e095      	b.n	34322 <__aeabi_dadd+0x596>
   341f6:	2340      	movs	r3, #64	; 0x40
   341f8:	4650      	mov	r0, sl
   341fa:	1a1b      	subs	r3, r3, r0
   341fc:	4099      	lsls	r1, r3
   341fe:	430a      	orrs	r2, r1
   34200:	1e51      	subs	r1, r2, #1
   34202:	418a      	sbcs	r2, r1
   34204:	464b      	mov	r3, r9
   34206:	2100      	movs	r1, #0
   34208:	431a      	orrs	r2, r3
   3420a:	e69f      	b.n	33f4c <__aeabi_dadd+0x1c0>
   3420c:	2e00      	cmp	r6, #0
   3420e:	d130      	bne.n	34272 <__aeabi_dadd+0x4e6>
   34210:	0026      	movs	r6, r4
   34212:	433e      	orrs	r6, r7
   34214:	d067      	beq.n	342e6 <__aeabi_dadd+0x55a>
   34216:	43db      	mvns	r3, r3
   34218:	469a      	mov	sl, r3
   3421a:	2b00      	cmp	r3, #0
   3421c:	d01c      	beq.n	34258 <__aeabi_dadd+0x4cc>
   3421e:	4e61      	ldr	r6, [pc, #388]	; (343a4 <__aeabi_dadd+0x618>)
   34220:	42b0      	cmp	r0, r6
   34222:	d060      	beq.n	342e6 <__aeabi_dadd+0x55a>
   34224:	4653      	mov	r3, sl
   34226:	2b38      	cmp	r3, #56	; 0x38
   34228:	dd00      	ble.n	3422c <__aeabi_dadd+0x4a0>
   3422a:	e096      	b.n	3435a <__aeabi_dadd+0x5ce>
   3422c:	2b1f      	cmp	r3, #31
   3422e:	dd00      	ble.n	34232 <__aeabi_dadd+0x4a6>
   34230:	e09f      	b.n	34372 <__aeabi_dadd+0x5e6>
   34232:	2620      	movs	r6, #32
   34234:	1af3      	subs	r3, r6, r3
   34236:	0026      	movs	r6, r4
   34238:	409e      	lsls	r6, r3
   3423a:	469c      	mov	ip, r3
   3423c:	46b3      	mov	fp, r6
   3423e:	4653      	mov	r3, sl
   34240:	003e      	movs	r6, r7
   34242:	40de      	lsrs	r6, r3
   34244:	0033      	movs	r3, r6
   34246:	465e      	mov	r6, fp
   34248:	431e      	orrs	r6, r3
   3424a:	4663      	mov	r3, ip
   3424c:	409f      	lsls	r7, r3
   3424e:	1e7b      	subs	r3, r7, #1
   34250:	419f      	sbcs	r7, r3
   34252:	4653      	mov	r3, sl
   34254:	40dc      	lsrs	r4, r3
   34256:	4337      	orrs	r7, r6
   34258:	18bf      	adds	r7, r7, r2
   3425a:	4297      	cmp	r7, r2
   3425c:	4192      	sbcs	r2, r2
   3425e:	1864      	adds	r4, r4, r1
   34260:	4252      	negs	r2, r2
   34262:	18a4      	adds	r4, r4, r2
   34264:	0006      	movs	r6, r0
   34266:	e678      	b.n	33f5a <__aeabi_dadd+0x1ce>
   34268:	4327      	orrs	r7, r4
   3426a:	1e7c      	subs	r4, r7, #1
   3426c:	41a7      	sbcs	r7, r4
   3426e:	2400      	movs	r4, #0
   34270:	e737      	b.n	340e2 <__aeabi_dadd+0x356>
   34272:	4e4c      	ldr	r6, [pc, #304]	; (343a4 <__aeabi_dadd+0x618>)
   34274:	42b0      	cmp	r0, r6
   34276:	d036      	beq.n	342e6 <__aeabi_dadd+0x55a>
   34278:	2680      	movs	r6, #128	; 0x80
   3427a:	425b      	negs	r3, r3
   3427c:	0436      	lsls	r6, r6, #16
   3427e:	469a      	mov	sl, r3
   34280:	4334      	orrs	r4, r6
   34282:	e7cf      	b.n	34224 <__aeabi_dadd+0x498>
   34284:	0018      	movs	r0, r3
   34286:	4310      	orrs	r0, r2
   34288:	d100      	bne.n	3428c <__aeabi_dadd+0x500>
   3428a:	e603      	b.n	33e94 <__aeabi_dadd+0x108>
   3428c:	1ab8      	subs	r0, r7, r2
   3428e:	4684      	mov	ip, r0
   34290:	4567      	cmp	r7, ip
   34292:	41ad      	sbcs	r5, r5
   34294:	1ae0      	subs	r0, r4, r3
   34296:	426d      	negs	r5, r5
   34298:	1b40      	subs	r0, r0, r5
   3429a:	0205      	lsls	r5, r0, #8
   3429c:	d400      	bmi.n	342a0 <__aeabi_dadd+0x514>
   3429e:	e62c      	b.n	33efa <__aeabi_dadd+0x16e>
   342a0:	1bd7      	subs	r7, r2, r7
   342a2:	42ba      	cmp	r2, r7
   342a4:	4192      	sbcs	r2, r2
   342a6:	1b1c      	subs	r4, r3, r4
   342a8:	4252      	negs	r2, r2
   342aa:	1aa4      	subs	r4, r4, r2
   342ac:	46d8      	mov	r8, fp
   342ae:	e5f1      	b.n	33e94 <__aeabi_dadd+0x108>
   342b0:	0018      	movs	r0, r3
   342b2:	4310      	orrs	r0, r2
   342b4:	d100      	bne.n	342b8 <__aeabi_dadd+0x52c>
   342b6:	e763      	b.n	34180 <__aeabi_dadd+0x3f4>
   342b8:	08f8      	lsrs	r0, r7, #3
   342ba:	0767      	lsls	r7, r4, #29
   342bc:	4307      	orrs	r7, r0
   342be:	2080      	movs	r0, #128	; 0x80
   342c0:	08e4      	lsrs	r4, r4, #3
   342c2:	0300      	lsls	r0, r0, #12
   342c4:	4204      	tst	r4, r0
   342c6:	d008      	beq.n	342da <__aeabi_dadd+0x54e>
   342c8:	08dd      	lsrs	r5, r3, #3
   342ca:	4205      	tst	r5, r0
   342cc:	d105      	bne.n	342da <__aeabi_dadd+0x54e>
   342ce:	08d2      	lsrs	r2, r2, #3
   342d0:	0759      	lsls	r1, r3, #29
   342d2:	4311      	orrs	r1, r2
   342d4:	000f      	movs	r7, r1
   342d6:	002c      	movs	r4, r5
   342d8:	46d8      	mov	r8, fp
   342da:	0f7b      	lsrs	r3, r7, #29
   342dc:	00e4      	lsls	r4, r4, #3
   342de:	431c      	orrs	r4, r3
   342e0:	00ff      	lsls	r7, r7, #3
   342e2:	4e30      	ldr	r6, [pc, #192]	; (343a4 <__aeabi_dadd+0x618>)
   342e4:	e5d6      	b.n	33e94 <__aeabi_dadd+0x108>
   342e6:	000c      	movs	r4, r1
   342e8:	0017      	movs	r7, r2
   342ea:	0006      	movs	r6, r0
   342ec:	e5d2      	b.n	33e94 <__aeabi_dadd+0x108>
   342ee:	2b00      	cmp	r3, #0
   342f0:	d038      	beq.n	34364 <__aeabi_dadd+0x5d8>
   342f2:	000b      	movs	r3, r1
   342f4:	4313      	orrs	r3, r2
   342f6:	d100      	bne.n	342fa <__aeabi_dadd+0x56e>
   342f8:	e742      	b.n	34180 <__aeabi_dadd+0x3f4>
   342fa:	08f8      	lsrs	r0, r7, #3
   342fc:	0767      	lsls	r7, r4, #29
   342fe:	4307      	orrs	r7, r0
   34300:	2080      	movs	r0, #128	; 0x80
   34302:	08e4      	lsrs	r4, r4, #3
   34304:	0300      	lsls	r0, r0, #12
   34306:	4204      	tst	r4, r0
   34308:	d0e7      	beq.n	342da <__aeabi_dadd+0x54e>
   3430a:	08cb      	lsrs	r3, r1, #3
   3430c:	4203      	tst	r3, r0
   3430e:	d1e4      	bne.n	342da <__aeabi_dadd+0x54e>
   34310:	08d2      	lsrs	r2, r2, #3
   34312:	0749      	lsls	r1, r1, #29
   34314:	4311      	orrs	r1, r2
   34316:	000f      	movs	r7, r1
   34318:	001c      	movs	r4, r3
   3431a:	e7de      	b.n	342da <__aeabi_dadd+0x54e>
   3431c:	2700      	movs	r7, #0
   3431e:	2400      	movs	r4, #0
   34320:	e5d5      	b.n	33ece <__aeabi_dadd+0x142>
   34322:	2100      	movs	r1, #0
   34324:	e76b      	b.n	341fe <__aeabi_dadd+0x472>
   34326:	2500      	movs	r5, #0
   34328:	2700      	movs	r7, #0
   3432a:	e5f3      	b.n	33f14 <__aeabi_dadd+0x188>
   3432c:	464e      	mov	r6, r9
   3432e:	0025      	movs	r5, r4
   34330:	3e20      	subs	r6, #32
   34332:	40f5      	lsrs	r5, r6
   34334:	464b      	mov	r3, r9
   34336:	002e      	movs	r6, r5
   34338:	2b20      	cmp	r3, #32
   3433a:	d02d      	beq.n	34398 <__aeabi_dadd+0x60c>
   3433c:	2540      	movs	r5, #64	; 0x40
   3433e:	1aed      	subs	r5, r5, r3
   34340:	40ac      	lsls	r4, r5
   34342:	4327      	orrs	r7, r4
   34344:	1e7c      	subs	r4, r7, #1
   34346:	41a7      	sbcs	r7, r4
   34348:	2400      	movs	r4, #0
   3434a:	4337      	orrs	r7, r6
   3434c:	e6c9      	b.n	340e2 <__aeabi_dadd+0x356>
   3434e:	2480      	movs	r4, #128	; 0x80
   34350:	2500      	movs	r5, #0
   34352:	0324      	lsls	r4, r4, #12
   34354:	4e13      	ldr	r6, [pc, #76]	; (343a4 <__aeabi_dadd+0x618>)
   34356:	2700      	movs	r7, #0
   34358:	e5dc      	b.n	33f14 <__aeabi_dadd+0x188>
   3435a:	4327      	orrs	r7, r4
   3435c:	1e7c      	subs	r4, r7, #1
   3435e:	41a7      	sbcs	r7, r4
   34360:	2400      	movs	r4, #0
   34362:	e779      	b.n	34258 <__aeabi_dadd+0x4cc>
   34364:	000c      	movs	r4, r1
   34366:	0017      	movs	r7, r2
   34368:	4e0e      	ldr	r6, [pc, #56]	; (343a4 <__aeabi_dadd+0x618>)
   3436a:	e593      	b.n	33e94 <__aeabi_dadd+0x108>
   3436c:	000c      	movs	r4, r1
   3436e:	0017      	movs	r7, r2
   34370:	e590      	b.n	33e94 <__aeabi_dadd+0x108>
   34372:	4656      	mov	r6, sl
   34374:	0023      	movs	r3, r4
   34376:	3e20      	subs	r6, #32
   34378:	40f3      	lsrs	r3, r6
   3437a:	4699      	mov	r9, r3
   3437c:	4653      	mov	r3, sl
   3437e:	2b20      	cmp	r3, #32
   34380:	d00e      	beq.n	343a0 <__aeabi_dadd+0x614>
   34382:	2340      	movs	r3, #64	; 0x40
   34384:	4656      	mov	r6, sl
   34386:	1b9b      	subs	r3, r3, r6
   34388:	409c      	lsls	r4, r3
   3438a:	4327      	orrs	r7, r4
   3438c:	1e7c      	subs	r4, r7, #1
   3438e:	41a7      	sbcs	r7, r4
   34390:	464b      	mov	r3, r9
   34392:	2400      	movs	r4, #0
   34394:	431f      	orrs	r7, r3
   34396:	e75f      	b.n	34258 <__aeabi_dadd+0x4cc>
   34398:	2400      	movs	r4, #0
   3439a:	e7d2      	b.n	34342 <__aeabi_dadd+0x5b6>
   3439c:	0017      	movs	r7, r2
   3439e:	e5b2      	b.n	33f06 <__aeabi_dadd+0x17a>
   343a0:	2400      	movs	r4, #0
   343a2:	e7f2      	b.n	3438a <__aeabi_dadd+0x5fe>
   343a4:	000007ff 	.word	0x000007ff
   343a8:	ff7fffff 	.word	0xff7fffff

000343ac <__aeabi_ddiv>:
   343ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   343ae:	4657      	mov	r7, sl
   343b0:	4645      	mov	r5, r8
   343b2:	46de      	mov	lr, fp
   343b4:	464e      	mov	r6, r9
   343b6:	b5e0      	push	{r5, r6, r7, lr}
   343b8:	004c      	lsls	r4, r1, #1
   343ba:	030e      	lsls	r6, r1, #12
   343bc:	b087      	sub	sp, #28
   343be:	4683      	mov	fp, r0
   343c0:	4692      	mov	sl, r2
   343c2:	001d      	movs	r5, r3
   343c4:	4680      	mov	r8, r0
   343c6:	0b36      	lsrs	r6, r6, #12
   343c8:	0d64      	lsrs	r4, r4, #21
   343ca:	0fcf      	lsrs	r7, r1, #31
   343cc:	2c00      	cmp	r4, #0
   343ce:	d04f      	beq.n	34470 <__aeabi_ddiv+0xc4>
   343d0:	4b6f      	ldr	r3, [pc, #444]	; (34590 <__aeabi_ddiv+0x1e4>)
   343d2:	429c      	cmp	r4, r3
   343d4:	d035      	beq.n	34442 <__aeabi_ddiv+0x96>
   343d6:	2380      	movs	r3, #128	; 0x80
   343d8:	0f42      	lsrs	r2, r0, #29
   343da:	041b      	lsls	r3, r3, #16
   343dc:	00f6      	lsls	r6, r6, #3
   343de:	4313      	orrs	r3, r2
   343e0:	4333      	orrs	r3, r6
   343e2:	4699      	mov	r9, r3
   343e4:	00c3      	lsls	r3, r0, #3
   343e6:	4698      	mov	r8, r3
   343e8:	4b6a      	ldr	r3, [pc, #424]	; (34594 <__aeabi_ddiv+0x1e8>)
   343ea:	2600      	movs	r6, #0
   343ec:	469c      	mov	ip, r3
   343ee:	2300      	movs	r3, #0
   343f0:	4464      	add	r4, ip
   343f2:	9303      	str	r3, [sp, #12]
   343f4:	032b      	lsls	r3, r5, #12
   343f6:	0b1b      	lsrs	r3, r3, #12
   343f8:	469b      	mov	fp, r3
   343fa:	006b      	lsls	r3, r5, #1
   343fc:	0fed      	lsrs	r5, r5, #31
   343fe:	4650      	mov	r0, sl
   34400:	0d5b      	lsrs	r3, r3, #21
   34402:	9501      	str	r5, [sp, #4]
   34404:	d05e      	beq.n	344c4 <__aeabi_ddiv+0x118>
   34406:	4a62      	ldr	r2, [pc, #392]	; (34590 <__aeabi_ddiv+0x1e4>)
   34408:	4293      	cmp	r3, r2
   3440a:	d053      	beq.n	344b4 <__aeabi_ddiv+0x108>
   3440c:	465a      	mov	r2, fp
   3440e:	00d1      	lsls	r1, r2, #3
   34410:	2280      	movs	r2, #128	; 0x80
   34412:	0f40      	lsrs	r0, r0, #29
   34414:	0412      	lsls	r2, r2, #16
   34416:	4302      	orrs	r2, r0
   34418:	430a      	orrs	r2, r1
   3441a:	4693      	mov	fp, r2
   3441c:	4652      	mov	r2, sl
   3441e:	00d1      	lsls	r1, r2, #3
   34420:	4a5c      	ldr	r2, [pc, #368]	; (34594 <__aeabi_ddiv+0x1e8>)
   34422:	4694      	mov	ip, r2
   34424:	2200      	movs	r2, #0
   34426:	4463      	add	r3, ip
   34428:	0038      	movs	r0, r7
   3442a:	4068      	eors	r0, r5
   3442c:	4684      	mov	ip, r0
   3442e:	9002      	str	r0, [sp, #8]
   34430:	1ae4      	subs	r4, r4, r3
   34432:	4316      	orrs	r6, r2
   34434:	2e0f      	cmp	r6, #15
   34436:	d900      	bls.n	3443a <__aeabi_ddiv+0x8e>
   34438:	e0b4      	b.n	345a4 <__aeabi_ddiv+0x1f8>
   3443a:	4b57      	ldr	r3, [pc, #348]	; (34598 <__aeabi_ddiv+0x1ec>)
   3443c:	00b6      	lsls	r6, r6, #2
   3443e:	599b      	ldr	r3, [r3, r6]
   34440:	469f      	mov	pc, r3
   34442:	0003      	movs	r3, r0
   34444:	4333      	orrs	r3, r6
   34446:	4699      	mov	r9, r3
   34448:	d16c      	bne.n	34524 <__aeabi_ddiv+0x178>
   3444a:	2300      	movs	r3, #0
   3444c:	4698      	mov	r8, r3
   3444e:	3302      	adds	r3, #2
   34450:	2608      	movs	r6, #8
   34452:	9303      	str	r3, [sp, #12]
   34454:	e7ce      	b.n	343f4 <__aeabi_ddiv+0x48>
   34456:	46cb      	mov	fp, r9
   34458:	4641      	mov	r1, r8
   3445a:	9a03      	ldr	r2, [sp, #12]
   3445c:	9701      	str	r7, [sp, #4]
   3445e:	2a02      	cmp	r2, #2
   34460:	d165      	bne.n	3452e <__aeabi_ddiv+0x182>
   34462:	9b01      	ldr	r3, [sp, #4]
   34464:	4c4a      	ldr	r4, [pc, #296]	; (34590 <__aeabi_ddiv+0x1e4>)
   34466:	469c      	mov	ip, r3
   34468:	2300      	movs	r3, #0
   3446a:	2200      	movs	r2, #0
   3446c:	4698      	mov	r8, r3
   3446e:	e06b      	b.n	34548 <__aeabi_ddiv+0x19c>
   34470:	0003      	movs	r3, r0
   34472:	4333      	orrs	r3, r6
   34474:	4699      	mov	r9, r3
   34476:	d04e      	beq.n	34516 <__aeabi_ddiv+0x16a>
   34478:	2e00      	cmp	r6, #0
   3447a:	d100      	bne.n	3447e <__aeabi_ddiv+0xd2>
   3447c:	e1bc      	b.n	347f8 <__aeabi_ddiv+0x44c>
   3447e:	0030      	movs	r0, r6
   34480:	f001 f8ca 	bl	35618 <__clzsi2>
   34484:	0003      	movs	r3, r0
   34486:	3b0b      	subs	r3, #11
   34488:	2b1c      	cmp	r3, #28
   3448a:	dd00      	ble.n	3448e <__aeabi_ddiv+0xe2>
   3448c:	e1ac      	b.n	347e8 <__aeabi_ddiv+0x43c>
   3448e:	221d      	movs	r2, #29
   34490:	1ad3      	subs	r3, r2, r3
   34492:	465a      	mov	r2, fp
   34494:	0001      	movs	r1, r0
   34496:	40da      	lsrs	r2, r3
   34498:	3908      	subs	r1, #8
   3449a:	408e      	lsls	r6, r1
   3449c:	0013      	movs	r3, r2
   3449e:	4333      	orrs	r3, r6
   344a0:	4699      	mov	r9, r3
   344a2:	465b      	mov	r3, fp
   344a4:	408b      	lsls	r3, r1
   344a6:	4698      	mov	r8, r3
   344a8:	2300      	movs	r3, #0
   344aa:	4c3c      	ldr	r4, [pc, #240]	; (3459c <__aeabi_ddiv+0x1f0>)
   344ac:	2600      	movs	r6, #0
   344ae:	1a24      	subs	r4, r4, r0
   344b0:	9303      	str	r3, [sp, #12]
   344b2:	e79f      	b.n	343f4 <__aeabi_ddiv+0x48>
   344b4:	4651      	mov	r1, sl
   344b6:	465a      	mov	r2, fp
   344b8:	4311      	orrs	r1, r2
   344ba:	d129      	bne.n	34510 <__aeabi_ddiv+0x164>
   344bc:	2200      	movs	r2, #0
   344be:	4693      	mov	fp, r2
   344c0:	3202      	adds	r2, #2
   344c2:	e7b1      	b.n	34428 <__aeabi_ddiv+0x7c>
   344c4:	4659      	mov	r1, fp
   344c6:	4301      	orrs	r1, r0
   344c8:	d01e      	beq.n	34508 <__aeabi_ddiv+0x15c>
   344ca:	465b      	mov	r3, fp
   344cc:	2b00      	cmp	r3, #0
   344ce:	d100      	bne.n	344d2 <__aeabi_ddiv+0x126>
   344d0:	e19e      	b.n	34810 <__aeabi_ddiv+0x464>
   344d2:	4658      	mov	r0, fp
   344d4:	f001 f8a0 	bl	35618 <__clzsi2>
   344d8:	0003      	movs	r3, r0
   344da:	3b0b      	subs	r3, #11
   344dc:	2b1c      	cmp	r3, #28
   344de:	dd00      	ble.n	344e2 <__aeabi_ddiv+0x136>
   344e0:	e18f      	b.n	34802 <__aeabi_ddiv+0x456>
   344e2:	0002      	movs	r2, r0
   344e4:	4659      	mov	r1, fp
   344e6:	3a08      	subs	r2, #8
   344e8:	4091      	lsls	r1, r2
   344ea:	468b      	mov	fp, r1
   344ec:	211d      	movs	r1, #29
   344ee:	1acb      	subs	r3, r1, r3
   344f0:	4651      	mov	r1, sl
   344f2:	40d9      	lsrs	r1, r3
   344f4:	000b      	movs	r3, r1
   344f6:	4659      	mov	r1, fp
   344f8:	430b      	orrs	r3, r1
   344fa:	4651      	mov	r1, sl
   344fc:	469b      	mov	fp, r3
   344fe:	4091      	lsls	r1, r2
   34500:	4b26      	ldr	r3, [pc, #152]	; (3459c <__aeabi_ddiv+0x1f0>)
   34502:	2200      	movs	r2, #0
   34504:	1a1b      	subs	r3, r3, r0
   34506:	e78f      	b.n	34428 <__aeabi_ddiv+0x7c>
   34508:	2300      	movs	r3, #0
   3450a:	2201      	movs	r2, #1
   3450c:	469b      	mov	fp, r3
   3450e:	e78b      	b.n	34428 <__aeabi_ddiv+0x7c>
   34510:	4651      	mov	r1, sl
   34512:	2203      	movs	r2, #3
   34514:	e788      	b.n	34428 <__aeabi_ddiv+0x7c>
   34516:	2300      	movs	r3, #0
   34518:	4698      	mov	r8, r3
   3451a:	3301      	adds	r3, #1
   3451c:	2604      	movs	r6, #4
   3451e:	2400      	movs	r4, #0
   34520:	9303      	str	r3, [sp, #12]
   34522:	e767      	b.n	343f4 <__aeabi_ddiv+0x48>
   34524:	2303      	movs	r3, #3
   34526:	46b1      	mov	r9, r6
   34528:	9303      	str	r3, [sp, #12]
   3452a:	260c      	movs	r6, #12
   3452c:	e762      	b.n	343f4 <__aeabi_ddiv+0x48>
   3452e:	2a03      	cmp	r2, #3
   34530:	d100      	bne.n	34534 <__aeabi_ddiv+0x188>
   34532:	e25c      	b.n	349ee <__aeabi_ddiv+0x642>
   34534:	9b01      	ldr	r3, [sp, #4]
   34536:	2a01      	cmp	r2, #1
   34538:	d000      	beq.n	3453c <__aeabi_ddiv+0x190>
   3453a:	e1e4      	b.n	34906 <__aeabi_ddiv+0x55a>
   3453c:	4013      	ands	r3, r2
   3453e:	469c      	mov	ip, r3
   34540:	2300      	movs	r3, #0
   34542:	2400      	movs	r4, #0
   34544:	2200      	movs	r2, #0
   34546:	4698      	mov	r8, r3
   34548:	2100      	movs	r1, #0
   3454a:	0312      	lsls	r2, r2, #12
   3454c:	0b13      	lsrs	r3, r2, #12
   3454e:	0d0a      	lsrs	r2, r1, #20
   34550:	0512      	lsls	r2, r2, #20
   34552:	431a      	orrs	r2, r3
   34554:	0523      	lsls	r3, r4, #20
   34556:	4c12      	ldr	r4, [pc, #72]	; (345a0 <__aeabi_ddiv+0x1f4>)
   34558:	4640      	mov	r0, r8
   3455a:	4022      	ands	r2, r4
   3455c:	4313      	orrs	r3, r2
   3455e:	4662      	mov	r2, ip
   34560:	005b      	lsls	r3, r3, #1
   34562:	07d2      	lsls	r2, r2, #31
   34564:	085b      	lsrs	r3, r3, #1
   34566:	4313      	orrs	r3, r2
   34568:	0019      	movs	r1, r3
   3456a:	b007      	add	sp, #28
   3456c:	bc3c      	pop	{r2, r3, r4, r5}
   3456e:	4690      	mov	r8, r2
   34570:	4699      	mov	r9, r3
   34572:	46a2      	mov	sl, r4
   34574:	46ab      	mov	fp, r5
   34576:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34578:	2300      	movs	r3, #0
   3457a:	2280      	movs	r2, #128	; 0x80
   3457c:	469c      	mov	ip, r3
   3457e:	0312      	lsls	r2, r2, #12
   34580:	4698      	mov	r8, r3
   34582:	4c03      	ldr	r4, [pc, #12]	; (34590 <__aeabi_ddiv+0x1e4>)
   34584:	e7e0      	b.n	34548 <__aeabi_ddiv+0x19c>
   34586:	2300      	movs	r3, #0
   34588:	4c01      	ldr	r4, [pc, #4]	; (34590 <__aeabi_ddiv+0x1e4>)
   3458a:	2200      	movs	r2, #0
   3458c:	4698      	mov	r8, r3
   3458e:	e7db      	b.n	34548 <__aeabi_ddiv+0x19c>
   34590:	000007ff 	.word	0x000007ff
   34594:	fffffc01 	.word	0xfffffc01
   34598:	0003aec4 	.word	0x0003aec4
   3459c:	fffffc0d 	.word	0xfffffc0d
   345a0:	800fffff 	.word	0x800fffff
   345a4:	45d9      	cmp	r9, fp
   345a6:	d900      	bls.n	345aa <__aeabi_ddiv+0x1fe>
   345a8:	e139      	b.n	3481e <__aeabi_ddiv+0x472>
   345aa:	d100      	bne.n	345ae <__aeabi_ddiv+0x202>
   345ac:	e134      	b.n	34818 <__aeabi_ddiv+0x46c>
   345ae:	2300      	movs	r3, #0
   345b0:	4646      	mov	r6, r8
   345b2:	464d      	mov	r5, r9
   345b4:	469a      	mov	sl, r3
   345b6:	3c01      	subs	r4, #1
   345b8:	465b      	mov	r3, fp
   345ba:	0e0a      	lsrs	r2, r1, #24
   345bc:	021b      	lsls	r3, r3, #8
   345be:	431a      	orrs	r2, r3
   345c0:	020b      	lsls	r3, r1, #8
   345c2:	0c17      	lsrs	r7, r2, #16
   345c4:	9303      	str	r3, [sp, #12]
   345c6:	0413      	lsls	r3, r2, #16
   345c8:	0c1b      	lsrs	r3, r3, #16
   345ca:	0039      	movs	r1, r7
   345cc:	0028      	movs	r0, r5
   345ce:	4690      	mov	r8, r2
   345d0:	9301      	str	r3, [sp, #4]
   345d2:	f7ff f8ab 	bl	3372c <__udivsi3>
   345d6:	0002      	movs	r2, r0
   345d8:	9b01      	ldr	r3, [sp, #4]
   345da:	4683      	mov	fp, r0
   345dc:	435a      	muls	r2, r3
   345de:	0028      	movs	r0, r5
   345e0:	0039      	movs	r1, r7
   345e2:	4691      	mov	r9, r2
   345e4:	f7ff f928 	bl	33838 <__aeabi_uidivmod>
   345e8:	0c35      	lsrs	r5, r6, #16
   345ea:	0409      	lsls	r1, r1, #16
   345ec:	430d      	orrs	r5, r1
   345ee:	45a9      	cmp	r9, r5
   345f0:	d90d      	bls.n	3460e <__aeabi_ddiv+0x262>
   345f2:	465b      	mov	r3, fp
   345f4:	4445      	add	r5, r8
   345f6:	3b01      	subs	r3, #1
   345f8:	45a8      	cmp	r8, r5
   345fa:	d900      	bls.n	345fe <__aeabi_ddiv+0x252>
   345fc:	e13a      	b.n	34874 <__aeabi_ddiv+0x4c8>
   345fe:	45a9      	cmp	r9, r5
   34600:	d800      	bhi.n	34604 <__aeabi_ddiv+0x258>
   34602:	e137      	b.n	34874 <__aeabi_ddiv+0x4c8>
   34604:	2302      	movs	r3, #2
   34606:	425b      	negs	r3, r3
   34608:	469c      	mov	ip, r3
   3460a:	4445      	add	r5, r8
   3460c:	44e3      	add	fp, ip
   3460e:	464b      	mov	r3, r9
   34610:	1aeb      	subs	r3, r5, r3
   34612:	0039      	movs	r1, r7
   34614:	0018      	movs	r0, r3
   34616:	9304      	str	r3, [sp, #16]
   34618:	f7ff f888 	bl	3372c <__udivsi3>
   3461c:	9b01      	ldr	r3, [sp, #4]
   3461e:	0005      	movs	r5, r0
   34620:	4343      	muls	r3, r0
   34622:	0039      	movs	r1, r7
   34624:	9804      	ldr	r0, [sp, #16]
   34626:	4699      	mov	r9, r3
   34628:	f7ff f906 	bl	33838 <__aeabi_uidivmod>
   3462c:	0433      	lsls	r3, r6, #16
   3462e:	0409      	lsls	r1, r1, #16
   34630:	0c1b      	lsrs	r3, r3, #16
   34632:	430b      	orrs	r3, r1
   34634:	4599      	cmp	r9, r3
   34636:	d909      	bls.n	3464c <__aeabi_ddiv+0x2a0>
   34638:	4443      	add	r3, r8
   3463a:	1e6a      	subs	r2, r5, #1
   3463c:	4598      	cmp	r8, r3
   3463e:	d900      	bls.n	34642 <__aeabi_ddiv+0x296>
   34640:	e11a      	b.n	34878 <__aeabi_ddiv+0x4cc>
   34642:	4599      	cmp	r9, r3
   34644:	d800      	bhi.n	34648 <__aeabi_ddiv+0x29c>
   34646:	e117      	b.n	34878 <__aeabi_ddiv+0x4cc>
   34648:	3d02      	subs	r5, #2
   3464a:	4443      	add	r3, r8
   3464c:	464a      	mov	r2, r9
   3464e:	1a9b      	subs	r3, r3, r2
   34650:	465a      	mov	r2, fp
   34652:	0412      	lsls	r2, r2, #16
   34654:	432a      	orrs	r2, r5
   34656:	9903      	ldr	r1, [sp, #12]
   34658:	4693      	mov	fp, r2
   3465a:	0c10      	lsrs	r0, r2, #16
   3465c:	0c0a      	lsrs	r2, r1, #16
   3465e:	4691      	mov	r9, r2
   34660:	0409      	lsls	r1, r1, #16
   34662:	465a      	mov	r2, fp
   34664:	0c09      	lsrs	r1, r1, #16
   34666:	464e      	mov	r6, r9
   34668:	000d      	movs	r5, r1
   3466a:	0412      	lsls	r2, r2, #16
   3466c:	0c12      	lsrs	r2, r2, #16
   3466e:	4345      	muls	r5, r0
   34670:	9105      	str	r1, [sp, #20]
   34672:	4351      	muls	r1, r2
   34674:	4372      	muls	r2, r6
   34676:	4370      	muls	r0, r6
   34678:	1952      	adds	r2, r2, r5
   3467a:	0c0e      	lsrs	r6, r1, #16
   3467c:	18b2      	adds	r2, r6, r2
   3467e:	4295      	cmp	r5, r2
   34680:	d903      	bls.n	3468a <__aeabi_ddiv+0x2de>
   34682:	2580      	movs	r5, #128	; 0x80
   34684:	026d      	lsls	r5, r5, #9
   34686:	46ac      	mov	ip, r5
   34688:	4460      	add	r0, ip
   3468a:	0c15      	lsrs	r5, r2, #16
   3468c:	0409      	lsls	r1, r1, #16
   3468e:	0412      	lsls	r2, r2, #16
   34690:	0c09      	lsrs	r1, r1, #16
   34692:	1828      	adds	r0, r5, r0
   34694:	1852      	adds	r2, r2, r1
   34696:	4283      	cmp	r3, r0
   34698:	d200      	bcs.n	3469c <__aeabi_ddiv+0x2f0>
   3469a:	e0ce      	b.n	3483a <__aeabi_ddiv+0x48e>
   3469c:	d100      	bne.n	346a0 <__aeabi_ddiv+0x2f4>
   3469e:	e0c8      	b.n	34832 <__aeabi_ddiv+0x486>
   346a0:	1a1d      	subs	r5, r3, r0
   346a2:	4653      	mov	r3, sl
   346a4:	1a9e      	subs	r6, r3, r2
   346a6:	45b2      	cmp	sl, r6
   346a8:	4192      	sbcs	r2, r2
   346aa:	4252      	negs	r2, r2
   346ac:	1aab      	subs	r3, r5, r2
   346ae:	469a      	mov	sl, r3
   346b0:	4598      	cmp	r8, r3
   346b2:	d100      	bne.n	346b6 <__aeabi_ddiv+0x30a>
   346b4:	e117      	b.n	348e6 <__aeabi_ddiv+0x53a>
   346b6:	0039      	movs	r1, r7
   346b8:	0018      	movs	r0, r3
   346ba:	f7ff f837 	bl	3372c <__udivsi3>
   346be:	9b01      	ldr	r3, [sp, #4]
   346c0:	0005      	movs	r5, r0
   346c2:	4343      	muls	r3, r0
   346c4:	0039      	movs	r1, r7
   346c6:	4650      	mov	r0, sl
   346c8:	9304      	str	r3, [sp, #16]
   346ca:	f7ff f8b5 	bl	33838 <__aeabi_uidivmod>
   346ce:	9804      	ldr	r0, [sp, #16]
   346d0:	040b      	lsls	r3, r1, #16
   346d2:	0c31      	lsrs	r1, r6, #16
   346d4:	4319      	orrs	r1, r3
   346d6:	4288      	cmp	r0, r1
   346d8:	d909      	bls.n	346ee <__aeabi_ddiv+0x342>
   346da:	4441      	add	r1, r8
   346dc:	1e6b      	subs	r3, r5, #1
   346de:	4588      	cmp	r8, r1
   346e0:	d900      	bls.n	346e4 <__aeabi_ddiv+0x338>
   346e2:	e107      	b.n	348f4 <__aeabi_ddiv+0x548>
   346e4:	4288      	cmp	r0, r1
   346e6:	d800      	bhi.n	346ea <__aeabi_ddiv+0x33e>
   346e8:	e104      	b.n	348f4 <__aeabi_ddiv+0x548>
   346ea:	3d02      	subs	r5, #2
   346ec:	4441      	add	r1, r8
   346ee:	9b04      	ldr	r3, [sp, #16]
   346f0:	1acb      	subs	r3, r1, r3
   346f2:	0018      	movs	r0, r3
   346f4:	0039      	movs	r1, r7
   346f6:	9304      	str	r3, [sp, #16]
   346f8:	f7ff f818 	bl	3372c <__udivsi3>
   346fc:	9b01      	ldr	r3, [sp, #4]
   346fe:	4682      	mov	sl, r0
   34700:	4343      	muls	r3, r0
   34702:	0039      	movs	r1, r7
   34704:	9804      	ldr	r0, [sp, #16]
   34706:	9301      	str	r3, [sp, #4]
   34708:	f7ff f896 	bl	33838 <__aeabi_uidivmod>
   3470c:	9801      	ldr	r0, [sp, #4]
   3470e:	040b      	lsls	r3, r1, #16
   34710:	0431      	lsls	r1, r6, #16
   34712:	0c09      	lsrs	r1, r1, #16
   34714:	4319      	orrs	r1, r3
   34716:	4288      	cmp	r0, r1
   34718:	d90d      	bls.n	34736 <__aeabi_ddiv+0x38a>
   3471a:	4653      	mov	r3, sl
   3471c:	4441      	add	r1, r8
   3471e:	3b01      	subs	r3, #1
   34720:	4588      	cmp	r8, r1
   34722:	d900      	bls.n	34726 <__aeabi_ddiv+0x37a>
   34724:	e0e8      	b.n	348f8 <__aeabi_ddiv+0x54c>
   34726:	4288      	cmp	r0, r1
   34728:	d800      	bhi.n	3472c <__aeabi_ddiv+0x380>
   3472a:	e0e5      	b.n	348f8 <__aeabi_ddiv+0x54c>
   3472c:	2302      	movs	r3, #2
   3472e:	425b      	negs	r3, r3
   34730:	469c      	mov	ip, r3
   34732:	4441      	add	r1, r8
   34734:	44e2      	add	sl, ip
   34736:	9b01      	ldr	r3, [sp, #4]
   34738:	042d      	lsls	r5, r5, #16
   3473a:	1ace      	subs	r6, r1, r3
   3473c:	4651      	mov	r1, sl
   3473e:	4329      	orrs	r1, r5
   34740:	9d05      	ldr	r5, [sp, #20]
   34742:	464f      	mov	r7, r9
   34744:	002a      	movs	r2, r5
   34746:	040b      	lsls	r3, r1, #16
   34748:	0c08      	lsrs	r0, r1, #16
   3474a:	0c1b      	lsrs	r3, r3, #16
   3474c:	435a      	muls	r2, r3
   3474e:	4345      	muls	r5, r0
   34750:	437b      	muls	r3, r7
   34752:	4378      	muls	r0, r7
   34754:	195b      	adds	r3, r3, r5
   34756:	0c17      	lsrs	r7, r2, #16
   34758:	18fb      	adds	r3, r7, r3
   3475a:	429d      	cmp	r5, r3
   3475c:	d903      	bls.n	34766 <__aeabi_ddiv+0x3ba>
   3475e:	2580      	movs	r5, #128	; 0x80
   34760:	026d      	lsls	r5, r5, #9
   34762:	46ac      	mov	ip, r5
   34764:	4460      	add	r0, ip
   34766:	0c1d      	lsrs	r5, r3, #16
   34768:	0412      	lsls	r2, r2, #16
   3476a:	041b      	lsls	r3, r3, #16
   3476c:	0c12      	lsrs	r2, r2, #16
   3476e:	1828      	adds	r0, r5, r0
   34770:	189b      	adds	r3, r3, r2
   34772:	4286      	cmp	r6, r0
   34774:	d200      	bcs.n	34778 <__aeabi_ddiv+0x3cc>
   34776:	e093      	b.n	348a0 <__aeabi_ddiv+0x4f4>
   34778:	d100      	bne.n	3477c <__aeabi_ddiv+0x3d0>
   3477a:	e08e      	b.n	3489a <__aeabi_ddiv+0x4ee>
   3477c:	2301      	movs	r3, #1
   3477e:	4319      	orrs	r1, r3
   34780:	4ba0      	ldr	r3, [pc, #640]	; (34a04 <__aeabi_ddiv+0x658>)
   34782:	18e3      	adds	r3, r4, r3
   34784:	2b00      	cmp	r3, #0
   34786:	dc00      	bgt.n	3478a <__aeabi_ddiv+0x3de>
   34788:	e099      	b.n	348be <__aeabi_ddiv+0x512>
   3478a:	074a      	lsls	r2, r1, #29
   3478c:	d000      	beq.n	34790 <__aeabi_ddiv+0x3e4>
   3478e:	e09e      	b.n	348ce <__aeabi_ddiv+0x522>
   34790:	465a      	mov	r2, fp
   34792:	01d2      	lsls	r2, r2, #7
   34794:	d506      	bpl.n	347a4 <__aeabi_ddiv+0x3f8>
   34796:	465a      	mov	r2, fp
   34798:	4b9b      	ldr	r3, [pc, #620]	; (34a08 <__aeabi_ddiv+0x65c>)
   3479a:	401a      	ands	r2, r3
   3479c:	2380      	movs	r3, #128	; 0x80
   3479e:	4693      	mov	fp, r2
   347a0:	00db      	lsls	r3, r3, #3
   347a2:	18e3      	adds	r3, r4, r3
   347a4:	4a99      	ldr	r2, [pc, #612]	; (34a0c <__aeabi_ddiv+0x660>)
   347a6:	4293      	cmp	r3, r2
   347a8:	dd68      	ble.n	3487c <__aeabi_ddiv+0x4d0>
   347aa:	2301      	movs	r3, #1
   347ac:	9a02      	ldr	r2, [sp, #8]
   347ae:	4c98      	ldr	r4, [pc, #608]	; (34a10 <__aeabi_ddiv+0x664>)
   347b0:	401a      	ands	r2, r3
   347b2:	2300      	movs	r3, #0
   347b4:	4694      	mov	ip, r2
   347b6:	4698      	mov	r8, r3
   347b8:	2200      	movs	r2, #0
   347ba:	e6c5      	b.n	34548 <__aeabi_ddiv+0x19c>
   347bc:	2280      	movs	r2, #128	; 0x80
   347be:	464b      	mov	r3, r9
   347c0:	0312      	lsls	r2, r2, #12
   347c2:	4213      	tst	r3, r2
   347c4:	d00a      	beq.n	347dc <__aeabi_ddiv+0x430>
   347c6:	465b      	mov	r3, fp
   347c8:	4213      	tst	r3, r2
   347ca:	d106      	bne.n	347da <__aeabi_ddiv+0x42e>
   347cc:	431a      	orrs	r2, r3
   347ce:	0312      	lsls	r2, r2, #12
   347d0:	0b12      	lsrs	r2, r2, #12
   347d2:	46ac      	mov	ip, r5
   347d4:	4688      	mov	r8, r1
   347d6:	4c8e      	ldr	r4, [pc, #568]	; (34a10 <__aeabi_ddiv+0x664>)
   347d8:	e6b6      	b.n	34548 <__aeabi_ddiv+0x19c>
   347da:	464b      	mov	r3, r9
   347dc:	431a      	orrs	r2, r3
   347de:	0312      	lsls	r2, r2, #12
   347e0:	0b12      	lsrs	r2, r2, #12
   347e2:	46bc      	mov	ip, r7
   347e4:	4c8a      	ldr	r4, [pc, #552]	; (34a10 <__aeabi_ddiv+0x664>)
   347e6:	e6af      	b.n	34548 <__aeabi_ddiv+0x19c>
   347e8:	0003      	movs	r3, r0
   347ea:	465a      	mov	r2, fp
   347ec:	3b28      	subs	r3, #40	; 0x28
   347ee:	409a      	lsls	r2, r3
   347f0:	2300      	movs	r3, #0
   347f2:	4691      	mov	r9, r2
   347f4:	4698      	mov	r8, r3
   347f6:	e657      	b.n	344a8 <__aeabi_ddiv+0xfc>
   347f8:	4658      	mov	r0, fp
   347fa:	f000 ff0d 	bl	35618 <__clzsi2>
   347fe:	3020      	adds	r0, #32
   34800:	e640      	b.n	34484 <__aeabi_ddiv+0xd8>
   34802:	0003      	movs	r3, r0
   34804:	4652      	mov	r2, sl
   34806:	3b28      	subs	r3, #40	; 0x28
   34808:	409a      	lsls	r2, r3
   3480a:	2100      	movs	r1, #0
   3480c:	4693      	mov	fp, r2
   3480e:	e677      	b.n	34500 <__aeabi_ddiv+0x154>
   34810:	f000 ff02 	bl	35618 <__clzsi2>
   34814:	3020      	adds	r0, #32
   34816:	e65f      	b.n	344d8 <__aeabi_ddiv+0x12c>
   34818:	4588      	cmp	r8, r1
   3481a:	d200      	bcs.n	3481e <__aeabi_ddiv+0x472>
   3481c:	e6c7      	b.n	345ae <__aeabi_ddiv+0x202>
   3481e:	464b      	mov	r3, r9
   34820:	07de      	lsls	r6, r3, #31
   34822:	085d      	lsrs	r5, r3, #1
   34824:	4643      	mov	r3, r8
   34826:	085b      	lsrs	r3, r3, #1
   34828:	431e      	orrs	r6, r3
   3482a:	4643      	mov	r3, r8
   3482c:	07db      	lsls	r3, r3, #31
   3482e:	469a      	mov	sl, r3
   34830:	e6c2      	b.n	345b8 <__aeabi_ddiv+0x20c>
   34832:	2500      	movs	r5, #0
   34834:	4592      	cmp	sl, r2
   34836:	d300      	bcc.n	3483a <__aeabi_ddiv+0x48e>
   34838:	e733      	b.n	346a2 <__aeabi_ddiv+0x2f6>
   3483a:	9e03      	ldr	r6, [sp, #12]
   3483c:	4659      	mov	r1, fp
   3483e:	46b4      	mov	ip, r6
   34840:	44e2      	add	sl, ip
   34842:	45b2      	cmp	sl, r6
   34844:	41ad      	sbcs	r5, r5
   34846:	426d      	negs	r5, r5
   34848:	4445      	add	r5, r8
   3484a:	18eb      	adds	r3, r5, r3
   3484c:	3901      	subs	r1, #1
   3484e:	4598      	cmp	r8, r3
   34850:	d207      	bcs.n	34862 <__aeabi_ddiv+0x4b6>
   34852:	4298      	cmp	r0, r3
   34854:	d900      	bls.n	34858 <__aeabi_ddiv+0x4ac>
   34856:	e07f      	b.n	34958 <__aeabi_ddiv+0x5ac>
   34858:	d100      	bne.n	3485c <__aeabi_ddiv+0x4b0>
   3485a:	e0bc      	b.n	349d6 <__aeabi_ddiv+0x62a>
   3485c:	1a1d      	subs	r5, r3, r0
   3485e:	468b      	mov	fp, r1
   34860:	e71f      	b.n	346a2 <__aeabi_ddiv+0x2f6>
   34862:	4598      	cmp	r8, r3
   34864:	d1fa      	bne.n	3485c <__aeabi_ddiv+0x4b0>
   34866:	9d03      	ldr	r5, [sp, #12]
   34868:	4555      	cmp	r5, sl
   3486a:	d9f2      	bls.n	34852 <__aeabi_ddiv+0x4a6>
   3486c:	4643      	mov	r3, r8
   3486e:	468b      	mov	fp, r1
   34870:	1a1d      	subs	r5, r3, r0
   34872:	e716      	b.n	346a2 <__aeabi_ddiv+0x2f6>
   34874:	469b      	mov	fp, r3
   34876:	e6ca      	b.n	3460e <__aeabi_ddiv+0x262>
   34878:	0015      	movs	r5, r2
   3487a:	e6e7      	b.n	3464c <__aeabi_ddiv+0x2a0>
   3487c:	465a      	mov	r2, fp
   3487e:	08c9      	lsrs	r1, r1, #3
   34880:	0752      	lsls	r2, r2, #29
   34882:	430a      	orrs	r2, r1
   34884:	055b      	lsls	r3, r3, #21
   34886:	4690      	mov	r8, r2
   34888:	0d5c      	lsrs	r4, r3, #21
   3488a:	465a      	mov	r2, fp
   3488c:	2301      	movs	r3, #1
   3488e:	9902      	ldr	r1, [sp, #8]
   34890:	0252      	lsls	r2, r2, #9
   34892:	4019      	ands	r1, r3
   34894:	0b12      	lsrs	r2, r2, #12
   34896:	468c      	mov	ip, r1
   34898:	e656      	b.n	34548 <__aeabi_ddiv+0x19c>
   3489a:	2b00      	cmp	r3, #0
   3489c:	d100      	bne.n	348a0 <__aeabi_ddiv+0x4f4>
   3489e:	e76f      	b.n	34780 <__aeabi_ddiv+0x3d4>
   348a0:	4446      	add	r6, r8
   348a2:	1e4a      	subs	r2, r1, #1
   348a4:	45b0      	cmp	r8, r6
   348a6:	d929      	bls.n	348fc <__aeabi_ddiv+0x550>
   348a8:	0011      	movs	r1, r2
   348aa:	4286      	cmp	r6, r0
   348ac:	d000      	beq.n	348b0 <__aeabi_ddiv+0x504>
   348ae:	e765      	b.n	3477c <__aeabi_ddiv+0x3d0>
   348b0:	9a03      	ldr	r2, [sp, #12]
   348b2:	4293      	cmp	r3, r2
   348b4:	d000      	beq.n	348b8 <__aeabi_ddiv+0x50c>
   348b6:	e761      	b.n	3477c <__aeabi_ddiv+0x3d0>
   348b8:	e762      	b.n	34780 <__aeabi_ddiv+0x3d4>
   348ba:	2101      	movs	r1, #1
   348bc:	4249      	negs	r1, r1
   348be:	2001      	movs	r0, #1
   348c0:	1ac2      	subs	r2, r0, r3
   348c2:	2a38      	cmp	r2, #56	; 0x38
   348c4:	dd21      	ble.n	3490a <__aeabi_ddiv+0x55e>
   348c6:	9b02      	ldr	r3, [sp, #8]
   348c8:	4003      	ands	r3, r0
   348ca:	469c      	mov	ip, r3
   348cc:	e638      	b.n	34540 <__aeabi_ddiv+0x194>
   348ce:	220f      	movs	r2, #15
   348d0:	400a      	ands	r2, r1
   348d2:	2a04      	cmp	r2, #4
   348d4:	d100      	bne.n	348d8 <__aeabi_ddiv+0x52c>
   348d6:	e75b      	b.n	34790 <__aeabi_ddiv+0x3e4>
   348d8:	000a      	movs	r2, r1
   348da:	1d11      	adds	r1, r2, #4
   348dc:	4291      	cmp	r1, r2
   348de:	4192      	sbcs	r2, r2
   348e0:	4252      	negs	r2, r2
   348e2:	4493      	add	fp, r2
   348e4:	e754      	b.n	34790 <__aeabi_ddiv+0x3e4>
   348e6:	4b47      	ldr	r3, [pc, #284]	; (34a04 <__aeabi_ddiv+0x658>)
   348e8:	18e3      	adds	r3, r4, r3
   348ea:	2b00      	cmp	r3, #0
   348ec:	dde5      	ble.n	348ba <__aeabi_ddiv+0x50e>
   348ee:	2201      	movs	r2, #1
   348f0:	4252      	negs	r2, r2
   348f2:	e7f2      	b.n	348da <__aeabi_ddiv+0x52e>
   348f4:	001d      	movs	r5, r3
   348f6:	e6fa      	b.n	346ee <__aeabi_ddiv+0x342>
   348f8:	469a      	mov	sl, r3
   348fa:	e71c      	b.n	34736 <__aeabi_ddiv+0x38a>
   348fc:	42b0      	cmp	r0, r6
   348fe:	d839      	bhi.n	34974 <__aeabi_ddiv+0x5c8>
   34900:	d06e      	beq.n	349e0 <__aeabi_ddiv+0x634>
   34902:	0011      	movs	r1, r2
   34904:	e73a      	b.n	3477c <__aeabi_ddiv+0x3d0>
   34906:	9302      	str	r3, [sp, #8]
   34908:	e73a      	b.n	34780 <__aeabi_ddiv+0x3d4>
   3490a:	2a1f      	cmp	r2, #31
   3490c:	dc3c      	bgt.n	34988 <__aeabi_ddiv+0x5dc>
   3490e:	2320      	movs	r3, #32
   34910:	1a9b      	subs	r3, r3, r2
   34912:	000c      	movs	r4, r1
   34914:	4658      	mov	r0, fp
   34916:	4099      	lsls	r1, r3
   34918:	4098      	lsls	r0, r3
   3491a:	1e4b      	subs	r3, r1, #1
   3491c:	4199      	sbcs	r1, r3
   3491e:	465b      	mov	r3, fp
   34920:	40d4      	lsrs	r4, r2
   34922:	40d3      	lsrs	r3, r2
   34924:	4320      	orrs	r0, r4
   34926:	4308      	orrs	r0, r1
   34928:	001a      	movs	r2, r3
   3492a:	0743      	lsls	r3, r0, #29
   3492c:	d009      	beq.n	34942 <__aeabi_ddiv+0x596>
   3492e:	230f      	movs	r3, #15
   34930:	4003      	ands	r3, r0
   34932:	2b04      	cmp	r3, #4
   34934:	d005      	beq.n	34942 <__aeabi_ddiv+0x596>
   34936:	0001      	movs	r1, r0
   34938:	1d08      	adds	r0, r1, #4
   3493a:	4288      	cmp	r0, r1
   3493c:	419b      	sbcs	r3, r3
   3493e:	425b      	negs	r3, r3
   34940:	18d2      	adds	r2, r2, r3
   34942:	0213      	lsls	r3, r2, #8
   34944:	d53a      	bpl.n	349bc <__aeabi_ddiv+0x610>
   34946:	2301      	movs	r3, #1
   34948:	9a02      	ldr	r2, [sp, #8]
   3494a:	2401      	movs	r4, #1
   3494c:	401a      	ands	r2, r3
   3494e:	2300      	movs	r3, #0
   34950:	4694      	mov	ip, r2
   34952:	4698      	mov	r8, r3
   34954:	2200      	movs	r2, #0
   34956:	e5f7      	b.n	34548 <__aeabi_ddiv+0x19c>
   34958:	2102      	movs	r1, #2
   3495a:	4249      	negs	r1, r1
   3495c:	468c      	mov	ip, r1
   3495e:	9d03      	ldr	r5, [sp, #12]
   34960:	44e3      	add	fp, ip
   34962:	46ac      	mov	ip, r5
   34964:	44e2      	add	sl, ip
   34966:	45aa      	cmp	sl, r5
   34968:	41ad      	sbcs	r5, r5
   3496a:	426d      	negs	r5, r5
   3496c:	4445      	add	r5, r8
   3496e:	18ed      	adds	r5, r5, r3
   34970:	1a2d      	subs	r5, r5, r0
   34972:	e696      	b.n	346a2 <__aeabi_ddiv+0x2f6>
   34974:	1e8a      	subs	r2, r1, #2
   34976:	9903      	ldr	r1, [sp, #12]
   34978:	004d      	lsls	r5, r1, #1
   3497a:	428d      	cmp	r5, r1
   3497c:	4189      	sbcs	r1, r1
   3497e:	4249      	negs	r1, r1
   34980:	4441      	add	r1, r8
   34982:	1876      	adds	r6, r6, r1
   34984:	9503      	str	r5, [sp, #12]
   34986:	e78f      	b.n	348a8 <__aeabi_ddiv+0x4fc>
   34988:	201f      	movs	r0, #31
   3498a:	4240      	negs	r0, r0
   3498c:	1ac3      	subs	r3, r0, r3
   3498e:	4658      	mov	r0, fp
   34990:	40d8      	lsrs	r0, r3
   34992:	0003      	movs	r3, r0
   34994:	2a20      	cmp	r2, #32
   34996:	d028      	beq.n	349ea <__aeabi_ddiv+0x63e>
   34998:	2040      	movs	r0, #64	; 0x40
   3499a:	465d      	mov	r5, fp
   3499c:	1a82      	subs	r2, r0, r2
   3499e:	4095      	lsls	r5, r2
   349a0:	4329      	orrs	r1, r5
   349a2:	1e4a      	subs	r2, r1, #1
   349a4:	4191      	sbcs	r1, r2
   349a6:	4319      	orrs	r1, r3
   349a8:	2307      	movs	r3, #7
   349aa:	2200      	movs	r2, #0
   349ac:	400b      	ands	r3, r1
   349ae:	d009      	beq.n	349c4 <__aeabi_ddiv+0x618>
   349b0:	230f      	movs	r3, #15
   349b2:	2200      	movs	r2, #0
   349b4:	400b      	ands	r3, r1
   349b6:	0008      	movs	r0, r1
   349b8:	2b04      	cmp	r3, #4
   349ba:	d1bd      	bne.n	34938 <__aeabi_ddiv+0x58c>
   349bc:	0001      	movs	r1, r0
   349be:	0753      	lsls	r3, r2, #29
   349c0:	0252      	lsls	r2, r2, #9
   349c2:	0b12      	lsrs	r2, r2, #12
   349c4:	08c9      	lsrs	r1, r1, #3
   349c6:	4319      	orrs	r1, r3
   349c8:	2301      	movs	r3, #1
   349ca:	4688      	mov	r8, r1
   349cc:	9902      	ldr	r1, [sp, #8]
   349ce:	2400      	movs	r4, #0
   349d0:	4019      	ands	r1, r3
   349d2:	468c      	mov	ip, r1
   349d4:	e5b8      	b.n	34548 <__aeabi_ddiv+0x19c>
   349d6:	4552      	cmp	r2, sl
   349d8:	d8be      	bhi.n	34958 <__aeabi_ddiv+0x5ac>
   349da:	468b      	mov	fp, r1
   349dc:	2500      	movs	r5, #0
   349de:	e660      	b.n	346a2 <__aeabi_ddiv+0x2f6>
   349e0:	9d03      	ldr	r5, [sp, #12]
   349e2:	429d      	cmp	r5, r3
   349e4:	d3c6      	bcc.n	34974 <__aeabi_ddiv+0x5c8>
   349e6:	0011      	movs	r1, r2
   349e8:	e762      	b.n	348b0 <__aeabi_ddiv+0x504>
   349ea:	2500      	movs	r5, #0
   349ec:	e7d8      	b.n	349a0 <__aeabi_ddiv+0x5f4>
   349ee:	2280      	movs	r2, #128	; 0x80
   349f0:	465b      	mov	r3, fp
   349f2:	0312      	lsls	r2, r2, #12
   349f4:	431a      	orrs	r2, r3
   349f6:	9b01      	ldr	r3, [sp, #4]
   349f8:	0312      	lsls	r2, r2, #12
   349fa:	0b12      	lsrs	r2, r2, #12
   349fc:	469c      	mov	ip, r3
   349fe:	4688      	mov	r8, r1
   34a00:	4c03      	ldr	r4, [pc, #12]	; (34a10 <__aeabi_ddiv+0x664>)
   34a02:	e5a1      	b.n	34548 <__aeabi_ddiv+0x19c>
   34a04:	000003ff 	.word	0x000003ff
   34a08:	feffffff 	.word	0xfeffffff
   34a0c:	000007fe 	.word	0x000007fe
   34a10:	000007ff 	.word	0x000007ff

00034a14 <__aeabi_dmul>:
   34a14:	b5f0      	push	{r4, r5, r6, r7, lr}
   34a16:	4657      	mov	r7, sl
   34a18:	4645      	mov	r5, r8
   34a1a:	46de      	mov	lr, fp
   34a1c:	464e      	mov	r6, r9
   34a1e:	b5e0      	push	{r5, r6, r7, lr}
   34a20:	030c      	lsls	r4, r1, #12
   34a22:	4698      	mov	r8, r3
   34a24:	004e      	lsls	r6, r1, #1
   34a26:	0b23      	lsrs	r3, r4, #12
   34a28:	b087      	sub	sp, #28
   34a2a:	0007      	movs	r7, r0
   34a2c:	4692      	mov	sl, r2
   34a2e:	469b      	mov	fp, r3
   34a30:	0d76      	lsrs	r6, r6, #21
   34a32:	0fcd      	lsrs	r5, r1, #31
   34a34:	2e00      	cmp	r6, #0
   34a36:	d06b      	beq.n	34b10 <__aeabi_dmul+0xfc>
   34a38:	4b6d      	ldr	r3, [pc, #436]	; (34bf0 <__aeabi_dmul+0x1dc>)
   34a3a:	429e      	cmp	r6, r3
   34a3c:	d035      	beq.n	34aaa <__aeabi_dmul+0x96>
   34a3e:	2480      	movs	r4, #128	; 0x80
   34a40:	465b      	mov	r3, fp
   34a42:	0f42      	lsrs	r2, r0, #29
   34a44:	0424      	lsls	r4, r4, #16
   34a46:	00db      	lsls	r3, r3, #3
   34a48:	4314      	orrs	r4, r2
   34a4a:	431c      	orrs	r4, r3
   34a4c:	00c3      	lsls	r3, r0, #3
   34a4e:	4699      	mov	r9, r3
   34a50:	4b68      	ldr	r3, [pc, #416]	; (34bf4 <__aeabi_dmul+0x1e0>)
   34a52:	46a3      	mov	fp, r4
   34a54:	469c      	mov	ip, r3
   34a56:	2300      	movs	r3, #0
   34a58:	2700      	movs	r7, #0
   34a5a:	4466      	add	r6, ip
   34a5c:	9302      	str	r3, [sp, #8]
   34a5e:	4643      	mov	r3, r8
   34a60:	031c      	lsls	r4, r3, #12
   34a62:	005a      	lsls	r2, r3, #1
   34a64:	0fdb      	lsrs	r3, r3, #31
   34a66:	4650      	mov	r0, sl
   34a68:	0b24      	lsrs	r4, r4, #12
   34a6a:	0d52      	lsrs	r2, r2, #21
   34a6c:	4698      	mov	r8, r3
   34a6e:	d100      	bne.n	34a72 <__aeabi_dmul+0x5e>
   34a70:	e076      	b.n	34b60 <__aeabi_dmul+0x14c>
   34a72:	4b5f      	ldr	r3, [pc, #380]	; (34bf0 <__aeabi_dmul+0x1dc>)
   34a74:	429a      	cmp	r2, r3
   34a76:	d06d      	beq.n	34b54 <__aeabi_dmul+0x140>
   34a78:	2380      	movs	r3, #128	; 0x80
   34a7a:	0f41      	lsrs	r1, r0, #29
   34a7c:	041b      	lsls	r3, r3, #16
   34a7e:	430b      	orrs	r3, r1
   34a80:	495c      	ldr	r1, [pc, #368]	; (34bf4 <__aeabi_dmul+0x1e0>)
   34a82:	00e4      	lsls	r4, r4, #3
   34a84:	468c      	mov	ip, r1
   34a86:	431c      	orrs	r4, r3
   34a88:	00c3      	lsls	r3, r0, #3
   34a8a:	2000      	movs	r0, #0
   34a8c:	4462      	add	r2, ip
   34a8e:	4641      	mov	r1, r8
   34a90:	18b6      	adds	r6, r6, r2
   34a92:	4069      	eors	r1, r5
   34a94:	1c72      	adds	r2, r6, #1
   34a96:	9101      	str	r1, [sp, #4]
   34a98:	4694      	mov	ip, r2
   34a9a:	4307      	orrs	r7, r0
   34a9c:	2f0f      	cmp	r7, #15
   34a9e:	d900      	bls.n	34aa2 <__aeabi_dmul+0x8e>
   34aa0:	e0b0      	b.n	34c04 <__aeabi_dmul+0x1f0>
   34aa2:	4a55      	ldr	r2, [pc, #340]	; (34bf8 <__aeabi_dmul+0x1e4>)
   34aa4:	00bf      	lsls	r7, r7, #2
   34aa6:	59d2      	ldr	r2, [r2, r7]
   34aa8:	4697      	mov	pc, r2
   34aaa:	465b      	mov	r3, fp
   34aac:	4303      	orrs	r3, r0
   34aae:	4699      	mov	r9, r3
   34ab0:	d000      	beq.n	34ab4 <__aeabi_dmul+0xa0>
   34ab2:	e087      	b.n	34bc4 <__aeabi_dmul+0x1b0>
   34ab4:	2300      	movs	r3, #0
   34ab6:	469b      	mov	fp, r3
   34ab8:	3302      	adds	r3, #2
   34aba:	2708      	movs	r7, #8
   34abc:	9302      	str	r3, [sp, #8]
   34abe:	e7ce      	b.n	34a5e <__aeabi_dmul+0x4a>
   34ac0:	4642      	mov	r2, r8
   34ac2:	9201      	str	r2, [sp, #4]
   34ac4:	2802      	cmp	r0, #2
   34ac6:	d067      	beq.n	34b98 <__aeabi_dmul+0x184>
   34ac8:	2803      	cmp	r0, #3
   34aca:	d100      	bne.n	34ace <__aeabi_dmul+0xba>
   34acc:	e20e      	b.n	34eec <__aeabi_dmul+0x4d8>
   34ace:	2801      	cmp	r0, #1
   34ad0:	d000      	beq.n	34ad4 <__aeabi_dmul+0xc0>
   34ad2:	e162      	b.n	34d9a <__aeabi_dmul+0x386>
   34ad4:	2300      	movs	r3, #0
   34ad6:	2400      	movs	r4, #0
   34ad8:	2200      	movs	r2, #0
   34ada:	4699      	mov	r9, r3
   34adc:	9901      	ldr	r1, [sp, #4]
   34ade:	4001      	ands	r1, r0
   34ae0:	b2cd      	uxtb	r5, r1
   34ae2:	2100      	movs	r1, #0
   34ae4:	0312      	lsls	r2, r2, #12
   34ae6:	0d0b      	lsrs	r3, r1, #20
   34ae8:	0b12      	lsrs	r2, r2, #12
   34aea:	051b      	lsls	r3, r3, #20
   34aec:	4313      	orrs	r3, r2
   34aee:	4a43      	ldr	r2, [pc, #268]	; (34bfc <__aeabi_dmul+0x1e8>)
   34af0:	0524      	lsls	r4, r4, #20
   34af2:	4013      	ands	r3, r2
   34af4:	431c      	orrs	r4, r3
   34af6:	0064      	lsls	r4, r4, #1
   34af8:	07ed      	lsls	r5, r5, #31
   34afa:	0864      	lsrs	r4, r4, #1
   34afc:	432c      	orrs	r4, r5
   34afe:	4648      	mov	r0, r9
   34b00:	0021      	movs	r1, r4
   34b02:	b007      	add	sp, #28
   34b04:	bc3c      	pop	{r2, r3, r4, r5}
   34b06:	4690      	mov	r8, r2
   34b08:	4699      	mov	r9, r3
   34b0a:	46a2      	mov	sl, r4
   34b0c:	46ab      	mov	fp, r5
   34b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34b10:	4303      	orrs	r3, r0
   34b12:	4699      	mov	r9, r3
   34b14:	d04f      	beq.n	34bb6 <__aeabi_dmul+0x1a2>
   34b16:	465b      	mov	r3, fp
   34b18:	2b00      	cmp	r3, #0
   34b1a:	d100      	bne.n	34b1e <__aeabi_dmul+0x10a>
   34b1c:	e189      	b.n	34e32 <__aeabi_dmul+0x41e>
   34b1e:	4658      	mov	r0, fp
   34b20:	f000 fd7a 	bl	35618 <__clzsi2>
   34b24:	0003      	movs	r3, r0
   34b26:	3b0b      	subs	r3, #11
   34b28:	2b1c      	cmp	r3, #28
   34b2a:	dd00      	ble.n	34b2e <__aeabi_dmul+0x11a>
   34b2c:	e17a      	b.n	34e24 <__aeabi_dmul+0x410>
   34b2e:	221d      	movs	r2, #29
   34b30:	1ad3      	subs	r3, r2, r3
   34b32:	003a      	movs	r2, r7
   34b34:	0001      	movs	r1, r0
   34b36:	465c      	mov	r4, fp
   34b38:	40da      	lsrs	r2, r3
   34b3a:	3908      	subs	r1, #8
   34b3c:	408c      	lsls	r4, r1
   34b3e:	0013      	movs	r3, r2
   34b40:	408f      	lsls	r7, r1
   34b42:	4323      	orrs	r3, r4
   34b44:	469b      	mov	fp, r3
   34b46:	46b9      	mov	r9, r7
   34b48:	2300      	movs	r3, #0
   34b4a:	4e2d      	ldr	r6, [pc, #180]	; (34c00 <__aeabi_dmul+0x1ec>)
   34b4c:	2700      	movs	r7, #0
   34b4e:	1a36      	subs	r6, r6, r0
   34b50:	9302      	str	r3, [sp, #8]
   34b52:	e784      	b.n	34a5e <__aeabi_dmul+0x4a>
   34b54:	4653      	mov	r3, sl
   34b56:	4323      	orrs	r3, r4
   34b58:	d12a      	bne.n	34bb0 <__aeabi_dmul+0x19c>
   34b5a:	2400      	movs	r4, #0
   34b5c:	2002      	movs	r0, #2
   34b5e:	e796      	b.n	34a8e <__aeabi_dmul+0x7a>
   34b60:	4653      	mov	r3, sl
   34b62:	4323      	orrs	r3, r4
   34b64:	d020      	beq.n	34ba8 <__aeabi_dmul+0x194>
   34b66:	2c00      	cmp	r4, #0
   34b68:	d100      	bne.n	34b6c <__aeabi_dmul+0x158>
   34b6a:	e157      	b.n	34e1c <__aeabi_dmul+0x408>
   34b6c:	0020      	movs	r0, r4
   34b6e:	f000 fd53 	bl	35618 <__clzsi2>
   34b72:	0003      	movs	r3, r0
   34b74:	3b0b      	subs	r3, #11
   34b76:	2b1c      	cmp	r3, #28
   34b78:	dd00      	ble.n	34b7c <__aeabi_dmul+0x168>
   34b7a:	e149      	b.n	34e10 <__aeabi_dmul+0x3fc>
   34b7c:	211d      	movs	r1, #29
   34b7e:	1acb      	subs	r3, r1, r3
   34b80:	4651      	mov	r1, sl
   34b82:	0002      	movs	r2, r0
   34b84:	40d9      	lsrs	r1, r3
   34b86:	4653      	mov	r3, sl
   34b88:	3a08      	subs	r2, #8
   34b8a:	4094      	lsls	r4, r2
   34b8c:	4093      	lsls	r3, r2
   34b8e:	430c      	orrs	r4, r1
   34b90:	4a1b      	ldr	r2, [pc, #108]	; (34c00 <__aeabi_dmul+0x1ec>)
   34b92:	1a12      	subs	r2, r2, r0
   34b94:	2000      	movs	r0, #0
   34b96:	e77a      	b.n	34a8e <__aeabi_dmul+0x7a>
   34b98:	2501      	movs	r5, #1
   34b9a:	9b01      	ldr	r3, [sp, #4]
   34b9c:	4c14      	ldr	r4, [pc, #80]	; (34bf0 <__aeabi_dmul+0x1dc>)
   34b9e:	401d      	ands	r5, r3
   34ba0:	2300      	movs	r3, #0
   34ba2:	2200      	movs	r2, #0
   34ba4:	4699      	mov	r9, r3
   34ba6:	e79c      	b.n	34ae2 <__aeabi_dmul+0xce>
   34ba8:	2400      	movs	r4, #0
   34baa:	2200      	movs	r2, #0
   34bac:	2001      	movs	r0, #1
   34bae:	e76e      	b.n	34a8e <__aeabi_dmul+0x7a>
   34bb0:	4653      	mov	r3, sl
   34bb2:	2003      	movs	r0, #3
   34bb4:	e76b      	b.n	34a8e <__aeabi_dmul+0x7a>
   34bb6:	2300      	movs	r3, #0
   34bb8:	469b      	mov	fp, r3
   34bba:	3301      	adds	r3, #1
   34bbc:	2704      	movs	r7, #4
   34bbe:	2600      	movs	r6, #0
   34bc0:	9302      	str	r3, [sp, #8]
   34bc2:	e74c      	b.n	34a5e <__aeabi_dmul+0x4a>
   34bc4:	2303      	movs	r3, #3
   34bc6:	4681      	mov	r9, r0
   34bc8:	270c      	movs	r7, #12
   34bca:	9302      	str	r3, [sp, #8]
   34bcc:	e747      	b.n	34a5e <__aeabi_dmul+0x4a>
   34bce:	2280      	movs	r2, #128	; 0x80
   34bd0:	2300      	movs	r3, #0
   34bd2:	2500      	movs	r5, #0
   34bd4:	0312      	lsls	r2, r2, #12
   34bd6:	4699      	mov	r9, r3
   34bd8:	4c05      	ldr	r4, [pc, #20]	; (34bf0 <__aeabi_dmul+0x1dc>)
   34bda:	e782      	b.n	34ae2 <__aeabi_dmul+0xce>
   34bdc:	465c      	mov	r4, fp
   34bde:	464b      	mov	r3, r9
   34be0:	9802      	ldr	r0, [sp, #8]
   34be2:	e76f      	b.n	34ac4 <__aeabi_dmul+0xb0>
   34be4:	465c      	mov	r4, fp
   34be6:	464b      	mov	r3, r9
   34be8:	9501      	str	r5, [sp, #4]
   34bea:	9802      	ldr	r0, [sp, #8]
   34bec:	e76a      	b.n	34ac4 <__aeabi_dmul+0xb0>
   34bee:	46c0      	nop			; (mov r8, r8)
   34bf0:	000007ff 	.word	0x000007ff
   34bf4:	fffffc01 	.word	0xfffffc01
   34bf8:	0003af04 	.word	0x0003af04
   34bfc:	800fffff 	.word	0x800fffff
   34c00:	fffffc0d 	.word	0xfffffc0d
   34c04:	464a      	mov	r2, r9
   34c06:	4649      	mov	r1, r9
   34c08:	0c17      	lsrs	r7, r2, #16
   34c0a:	0c1a      	lsrs	r2, r3, #16
   34c0c:	041b      	lsls	r3, r3, #16
   34c0e:	0c1b      	lsrs	r3, r3, #16
   34c10:	0408      	lsls	r0, r1, #16
   34c12:	0019      	movs	r1, r3
   34c14:	0c00      	lsrs	r0, r0, #16
   34c16:	4341      	muls	r1, r0
   34c18:	0015      	movs	r5, r2
   34c1a:	4688      	mov	r8, r1
   34c1c:	0019      	movs	r1, r3
   34c1e:	437d      	muls	r5, r7
   34c20:	4379      	muls	r1, r7
   34c22:	9503      	str	r5, [sp, #12]
   34c24:	4689      	mov	r9, r1
   34c26:	0029      	movs	r1, r5
   34c28:	0015      	movs	r5, r2
   34c2a:	4345      	muls	r5, r0
   34c2c:	444d      	add	r5, r9
   34c2e:	9502      	str	r5, [sp, #8]
   34c30:	4645      	mov	r5, r8
   34c32:	0c2d      	lsrs	r5, r5, #16
   34c34:	46aa      	mov	sl, r5
   34c36:	9d02      	ldr	r5, [sp, #8]
   34c38:	4455      	add	r5, sl
   34c3a:	45a9      	cmp	r9, r5
   34c3c:	d906      	bls.n	34c4c <__aeabi_dmul+0x238>
   34c3e:	468a      	mov	sl, r1
   34c40:	2180      	movs	r1, #128	; 0x80
   34c42:	0249      	lsls	r1, r1, #9
   34c44:	4689      	mov	r9, r1
   34c46:	44ca      	add	sl, r9
   34c48:	4651      	mov	r1, sl
   34c4a:	9103      	str	r1, [sp, #12]
   34c4c:	0c29      	lsrs	r1, r5, #16
   34c4e:	9104      	str	r1, [sp, #16]
   34c50:	4641      	mov	r1, r8
   34c52:	0409      	lsls	r1, r1, #16
   34c54:	042d      	lsls	r5, r5, #16
   34c56:	0c09      	lsrs	r1, r1, #16
   34c58:	4688      	mov	r8, r1
   34c5a:	0029      	movs	r1, r5
   34c5c:	0c25      	lsrs	r5, r4, #16
   34c5e:	0424      	lsls	r4, r4, #16
   34c60:	4441      	add	r1, r8
   34c62:	0c24      	lsrs	r4, r4, #16
   34c64:	9105      	str	r1, [sp, #20]
   34c66:	0021      	movs	r1, r4
   34c68:	4341      	muls	r1, r0
   34c6a:	4688      	mov	r8, r1
   34c6c:	0021      	movs	r1, r4
   34c6e:	4379      	muls	r1, r7
   34c70:	468a      	mov	sl, r1
   34c72:	4368      	muls	r0, r5
   34c74:	4641      	mov	r1, r8
   34c76:	4450      	add	r0, sl
   34c78:	4681      	mov	r9, r0
   34c7a:	0c08      	lsrs	r0, r1, #16
   34c7c:	4448      	add	r0, r9
   34c7e:	436f      	muls	r7, r5
   34c80:	4582      	cmp	sl, r0
   34c82:	d903      	bls.n	34c8c <__aeabi_dmul+0x278>
   34c84:	2180      	movs	r1, #128	; 0x80
   34c86:	0249      	lsls	r1, r1, #9
   34c88:	4689      	mov	r9, r1
   34c8a:	444f      	add	r7, r9
   34c8c:	0c01      	lsrs	r1, r0, #16
   34c8e:	4689      	mov	r9, r1
   34c90:	0039      	movs	r1, r7
   34c92:	4449      	add	r1, r9
   34c94:	9102      	str	r1, [sp, #8]
   34c96:	4641      	mov	r1, r8
   34c98:	040f      	lsls	r7, r1, #16
   34c9a:	9904      	ldr	r1, [sp, #16]
   34c9c:	0c3f      	lsrs	r7, r7, #16
   34c9e:	4688      	mov	r8, r1
   34ca0:	0400      	lsls	r0, r0, #16
   34ca2:	19c0      	adds	r0, r0, r7
   34ca4:	4480      	add	r8, r0
   34ca6:	4641      	mov	r1, r8
   34ca8:	9104      	str	r1, [sp, #16]
   34caa:	4659      	mov	r1, fp
   34cac:	0c0f      	lsrs	r7, r1, #16
   34cae:	0409      	lsls	r1, r1, #16
   34cb0:	0c09      	lsrs	r1, r1, #16
   34cb2:	4688      	mov	r8, r1
   34cb4:	4359      	muls	r1, r3
   34cb6:	468a      	mov	sl, r1
   34cb8:	0039      	movs	r1, r7
   34cba:	4351      	muls	r1, r2
   34cbc:	4689      	mov	r9, r1
   34cbe:	4641      	mov	r1, r8
   34cc0:	434a      	muls	r2, r1
   34cc2:	4651      	mov	r1, sl
   34cc4:	0c09      	lsrs	r1, r1, #16
   34cc6:	468b      	mov	fp, r1
   34cc8:	437b      	muls	r3, r7
   34cca:	18d2      	adds	r2, r2, r3
   34ccc:	445a      	add	r2, fp
   34cce:	4293      	cmp	r3, r2
   34cd0:	d903      	bls.n	34cda <__aeabi_dmul+0x2c6>
   34cd2:	2380      	movs	r3, #128	; 0x80
   34cd4:	025b      	lsls	r3, r3, #9
   34cd6:	469b      	mov	fp, r3
   34cd8:	44d9      	add	r9, fp
   34cda:	4651      	mov	r1, sl
   34cdc:	0409      	lsls	r1, r1, #16
   34cde:	0c09      	lsrs	r1, r1, #16
   34ce0:	468a      	mov	sl, r1
   34ce2:	4641      	mov	r1, r8
   34ce4:	4361      	muls	r1, r4
   34ce6:	437c      	muls	r4, r7
   34ce8:	0c13      	lsrs	r3, r2, #16
   34cea:	0412      	lsls	r2, r2, #16
   34cec:	444b      	add	r3, r9
   34cee:	4452      	add	r2, sl
   34cf0:	46a1      	mov	r9, r4
   34cf2:	468a      	mov	sl, r1
   34cf4:	003c      	movs	r4, r7
   34cf6:	4641      	mov	r1, r8
   34cf8:	436c      	muls	r4, r5
   34cfa:	434d      	muls	r5, r1
   34cfc:	4651      	mov	r1, sl
   34cfe:	444d      	add	r5, r9
   34d00:	0c0f      	lsrs	r7, r1, #16
   34d02:	197d      	adds	r5, r7, r5
   34d04:	45a9      	cmp	r9, r5
   34d06:	d903      	bls.n	34d10 <__aeabi_dmul+0x2fc>
   34d08:	2180      	movs	r1, #128	; 0x80
   34d0a:	0249      	lsls	r1, r1, #9
   34d0c:	4688      	mov	r8, r1
   34d0e:	4444      	add	r4, r8
   34d10:	9f04      	ldr	r7, [sp, #16]
   34d12:	9903      	ldr	r1, [sp, #12]
   34d14:	46b8      	mov	r8, r7
   34d16:	4441      	add	r1, r8
   34d18:	468b      	mov	fp, r1
   34d1a:	4583      	cmp	fp, r0
   34d1c:	4180      	sbcs	r0, r0
   34d1e:	4241      	negs	r1, r0
   34d20:	4688      	mov	r8, r1
   34d22:	4651      	mov	r1, sl
   34d24:	0408      	lsls	r0, r1, #16
   34d26:	042f      	lsls	r7, r5, #16
   34d28:	0c00      	lsrs	r0, r0, #16
   34d2a:	183f      	adds	r7, r7, r0
   34d2c:	4658      	mov	r0, fp
   34d2e:	9902      	ldr	r1, [sp, #8]
   34d30:	1810      	adds	r0, r2, r0
   34d32:	4689      	mov	r9, r1
   34d34:	4290      	cmp	r0, r2
   34d36:	4192      	sbcs	r2, r2
   34d38:	444f      	add	r7, r9
   34d3a:	46ba      	mov	sl, r7
   34d3c:	4252      	negs	r2, r2
   34d3e:	4699      	mov	r9, r3
   34d40:	4693      	mov	fp, r2
   34d42:	44c2      	add	sl, r8
   34d44:	44d1      	add	r9, sl
   34d46:	44cb      	add	fp, r9
   34d48:	428f      	cmp	r7, r1
   34d4a:	41bf      	sbcs	r7, r7
   34d4c:	45c2      	cmp	sl, r8
   34d4e:	4189      	sbcs	r1, r1
   34d50:	4599      	cmp	r9, r3
   34d52:	419b      	sbcs	r3, r3
   34d54:	4593      	cmp	fp, r2
   34d56:	4192      	sbcs	r2, r2
   34d58:	427f      	negs	r7, r7
   34d5a:	4249      	negs	r1, r1
   34d5c:	0c2d      	lsrs	r5, r5, #16
   34d5e:	4252      	negs	r2, r2
   34d60:	430f      	orrs	r7, r1
   34d62:	425b      	negs	r3, r3
   34d64:	4313      	orrs	r3, r2
   34d66:	197f      	adds	r7, r7, r5
   34d68:	18ff      	adds	r7, r7, r3
   34d6a:	465b      	mov	r3, fp
   34d6c:	193c      	adds	r4, r7, r4
   34d6e:	0ddb      	lsrs	r3, r3, #23
   34d70:	9a05      	ldr	r2, [sp, #20]
   34d72:	0264      	lsls	r4, r4, #9
   34d74:	431c      	orrs	r4, r3
   34d76:	0243      	lsls	r3, r0, #9
   34d78:	4313      	orrs	r3, r2
   34d7a:	1e5d      	subs	r5, r3, #1
   34d7c:	41ab      	sbcs	r3, r5
   34d7e:	465a      	mov	r2, fp
   34d80:	0dc0      	lsrs	r0, r0, #23
   34d82:	4303      	orrs	r3, r0
   34d84:	0252      	lsls	r2, r2, #9
   34d86:	4313      	orrs	r3, r2
   34d88:	01e2      	lsls	r2, r4, #7
   34d8a:	d556      	bpl.n	34e3a <__aeabi_dmul+0x426>
   34d8c:	2001      	movs	r0, #1
   34d8e:	085a      	lsrs	r2, r3, #1
   34d90:	4003      	ands	r3, r0
   34d92:	4313      	orrs	r3, r2
   34d94:	07e2      	lsls	r2, r4, #31
   34d96:	4313      	orrs	r3, r2
   34d98:	0864      	lsrs	r4, r4, #1
   34d9a:	485a      	ldr	r0, [pc, #360]	; (34f04 <__aeabi_dmul+0x4f0>)
   34d9c:	4460      	add	r0, ip
   34d9e:	2800      	cmp	r0, #0
   34da0:	dd4d      	ble.n	34e3e <__aeabi_dmul+0x42a>
   34da2:	075a      	lsls	r2, r3, #29
   34da4:	d009      	beq.n	34dba <__aeabi_dmul+0x3a6>
   34da6:	220f      	movs	r2, #15
   34da8:	401a      	ands	r2, r3
   34daa:	2a04      	cmp	r2, #4
   34dac:	d005      	beq.n	34dba <__aeabi_dmul+0x3a6>
   34dae:	1d1a      	adds	r2, r3, #4
   34db0:	429a      	cmp	r2, r3
   34db2:	419b      	sbcs	r3, r3
   34db4:	425b      	negs	r3, r3
   34db6:	18e4      	adds	r4, r4, r3
   34db8:	0013      	movs	r3, r2
   34dba:	01e2      	lsls	r2, r4, #7
   34dbc:	d504      	bpl.n	34dc8 <__aeabi_dmul+0x3b4>
   34dbe:	2080      	movs	r0, #128	; 0x80
   34dc0:	4a51      	ldr	r2, [pc, #324]	; (34f08 <__aeabi_dmul+0x4f4>)
   34dc2:	00c0      	lsls	r0, r0, #3
   34dc4:	4014      	ands	r4, r2
   34dc6:	4460      	add	r0, ip
   34dc8:	4a50      	ldr	r2, [pc, #320]	; (34f0c <__aeabi_dmul+0x4f8>)
   34dca:	4290      	cmp	r0, r2
   34dcc:	dd00      	ble.n	34dd0 <__aeabi_dmul+0x3bc>
   34dce:	e6e3      	b.n	34b98 <__aeabi_dmul+0x184>
   34dd0:	2501      	movs	r5, #1
   34dd2:	08db      	lsrs	r3, r3, #3
   34dd4:	0762      	lsls	r2, r4, #29
   34dd6:	431a      	orrs	r2, r3
   34dd8:	0264      	lsls	r4, r4, #9
   34dda:	9b01      	ldr	r3, [sp, #4]
   34ddc:	4691      	mov	r9, r2
   34dde:	0b22      	lsrs	r2, r4, #12
   34de0:	0544      	lsls	r4, r0, #21
   34de2:	0d64      	lsrs	r4, r4, #21
   34de4:	401d      	ands	r5, r3
   34de6:	e67c      	b.n	34ae2 <__aeabi_dmul+0xce>
   34de8:	2280      	movs	r2, #128	; 0x80
   34dea:	4659      	mov	r1, fp
   34dec:	0312      	lsls	r2, r2, #12
   34dee:	4211      	tst	r1, r2
   34df0:	d008      	beq.n	34e04 <__aeabi_dmul+0x3f0>
   34df2:	4214      	tst	r4, r2
   34df4:	d106      	bne.n	34e04 <__aeabi_dmul+0x3f0>
   34df6:	4322      	orrs	r2, r4
   34df8:	0312      	lsls	r2, r2, #12
   34dfa:	0b12      	lsrs	r2, r2, #12
   34dfc:	4645      	mov	r5, r8
   34dfe:	4699      	mov	r9, r3
   34e00:	4c43      	ldr	r4, [pc, #268]	; (34f10 <__aeabi_dmul+0x4fc>)
   34e02:	e66e      	b.n	34ae2 <__aeabi_dmul+0xce>
   34e04:	465b      	mov	r3, fp
   34e06:	431a      	orrs	r2, r3
   34e08:	0312      	lsls	r2, r2, #12
   34e0a:	0b12      	lsrs	r2, r2, #12
   34e0c:	4c40      	ldr	r4, [pc, #256]	; (34f10 <__aeabi_dmul+0x4fc>)
   34e0e:	e668      	b.n	34ae2 <__aeabi_dmul+0xce>
   34e10:	0003      	movs	r3, r0
   34e12:	4654      	mov	r4, sl
   34e14:	3b28      	subs	r3, #40	; 0x28
   34e16:	409c      	lsls	r4, r3
   34e18:	2300      	movs	r3, #0
   34e1a:	e6b9      	b.n	34b90 <__aeabi_dmul+0x17c>
   34e1c:	f000 fbfc 	bl	35618 <__clzsi2>
   34e20:	3020      	adds	r0, #32
   34e22:	e6a6      	b.n	34b72 <__aeabi_dmul+0x15e>
   34e24:	0003      	movs	r3, r0
   34e26:	3b28      	subs	r3, #40	; 0x28
   34e28:	409f      	lsls	r7, r3
   34e2a:	2300      	movs	r3, #0
   34e2c:	46bb      	mov	fp, r7
   34e2e:	4699      	mov	r9, r3
   34e30:	e68a      	b.n	34b48 <__aeabi_dmul+0x134>
   34e32:	f000 fbf1 	bl	35618 <__clzsi2>
   34e36:	3020      	adds	r0, #32
   34e38:	e674      	b.n	34b24 <__aeabi_dmul+0x110>
   34e3a:	46b4      	mov	ip, r6
   34e3c:	e7ad      	b.n	34d9a <__aeabi_dmul+0x386>
   34e3e:	2501      	movs	r5, #1
   34e40:	1a2a      	subs	r2, r5, r0
   34e42:	2a38      	cmp	r2, #56	; 0x38
   34e44:	dd06      	ble.n	34e54 <__aeabi_dmul+0x440>
   34e46:	9b01      	ldr	r3, [sp, #4]
   34e48:	2400      	movs	r4, #0
   34e4a:	401d      	ands	r5, r3
   34e4c:	2300      	movs	r3, #0
   34e4e:	2200      	movs	r2, #0
   34e50:	4699      	mov	r9, r3
   34e52:	e646      	b.n	34ae2 <__aeabi_dmul+0xce>
   34e54:	2a1f      	cmp	r2, #31
   34e56:	dc21      	bgt.n	34e9c <__aeabi_dmul+0x488>
   34e58:	2520      	movs	r5, #32
   34e5a:	0020      	movs	r0, r4
   34e5c:	1aad      	subs	r5, r5, r2
   34e5e:	001e      	movs	r6, r3
   34e60:	40ab      	lsls	r3, r5
   34e62:	40a8      	lsls	r0, r5
   34e64:	40d6      	lsrs	r6, r2
   34e66:	1e5d      	subs	r5, r3, #1
   34e68:	41ab      	sbcs	r3, r5
   34e6a:	4330      	orrs	r0, r6
   34e6c:	4318      	orrs	r0, r3
   34e6e:	40d4      	lsrs	r4, r2
   34e70:	0743      	lsls	r3, r0, #29
   34e72:	d009      	beq.n	34e88 <__aeabi_dmul+0x474>
   34e74:	230f      	movs	r3, #15
   34e76:	4003      	ands	r3, r0
   34e78:	2b04      	cmp	r3, #4
   34e7a:	d005      	beq.n	34e88 <__aeabi_dmul+0x474>
   34e7c:	0003      	movs	r3, r0
   34e7e:	1d18      	adds	r0, r3, #4
   34e80:	4298      	cmp	r0, r3
   34e82:	419b      	sbcs	r3, r3
   34e84:	425b      	negs	r3, r3
   34e86:	18e4      	adds	r4, r4, r3
   34e88:	0223      	lsls	r3, r4, #8
   34e8a:	d521      	bpl.n	34ed0 <__aeabi_dmul+0x4bc>
   34e8c:	2501      	movs	r5, #1
   34e8e:	9b01      	ldr	r3, [sp, #4]
   34e90:	2401      	movs	r4, #1
   34e92:	401d      	ands	r5, r3
   34e94:	2300      	movs	r3, #0
   34e96:	2200      	movs	r2, #0
   34e98:	4699      	mov	r9, r3
   34e9a:	e622      	b.n	34ae2 <__aeabi_dmul+0xce>
   34e9c:	251f      	movs	r5, #31
   34e9e:	0021      	movs	r1, r4
   34ea0:	426d      	negs	r5, r5
   34ea2:	1a28      	subs	r0, r5, r0
   34ea4:	40c1      	lsrs	r1, r0
   34ea6:	0008      	movs	r0, r1
   34ea8:	2a20      	cmp	r2, #32
   34eaa:	d01d      	beq.n	34ee8 <__aeabi_dmul+0x4d4>
   34eac:	355f      	adds	r5, #95	; 0x5f
   34eae:	1aaa      	subs	r2, r5, r2
   34eb0:	4094      	lsls	r4, r2
   34eb2:	4323      	orrs	r3, r4
   34eb4:	1e5c      	subs	r4, r3, #1
   34eb6:	41a3      	sbcs	r3, r4
   34eb8:	2507      	movs	r5, #7
   34eba:	4303      	orrs	r3, r0
   34ebc:	401d      	ands	r5, r3
   34ebe:	2200      	movs	r2, #0
   34ec0:	2d00      	cmp	r5, #0
   34ec2:	d009      	beq.n	34ed8 <__aeabi_dmul+0x4c4>
   34ec4:	220f      	movs	r2, #15
   34ec6:	2400      	movs	r4, #0
   34ec8:	401a      	ands	r2, r3
   34eca:	0018      	movs	r0, r3
   34ecc:	2a04      	cmp	r2, #4
   34ece:	d1d6      	bne.n	34e7e <__aeabi_dmul+0x46a>
   34ed0:	0003      	movs	r3, r0
   34ed2:	0765      	lsls	r5, r4, #29
   34ed4:	0264      	lsls	r4, r4, #9
   34ed6:	0b22      	lsrs	r2, r4, #12
   34ed8:	08db      	lsrs	r3, r3, #3
   34eda:	432b      	orrs	r3, r5
   34edc:	2501      	movs	r5, #1
   34ede:	4699      	mov	r9, r3
   34ee0:	9b01      	ldr	r3, [sp, #4]
   34ee2:	2400      	movs	r4, #0
   34ee4:	401d      	ands	r5, r3
   34ee6:	e5fc      	b.n	34ae2 <__aeabi_dmul+0xce>
   34ee8:	2400      	movs	r4, #0
   34eea:	e7e2      	b.n	34eb2 <__aeabi_dmul+0x49e>
   34eec:	2280      	movs	r2, #128	; 0x80
   34eee:	2501      	movs	r5, #1
   34ef0:	0312      	lsls	r2, r2, #12
   34ef2:	4322      	orrs	r2, r4
   34ef4:	9901      	ldr	r1, [sp, #4]
   34ef6:	0312      	lsls	r2, r2, #12
   34ef8:	0b12      	lsrs	r2, r2, #12
   34efa:	400d      	ands	r5, r1
   34efc:	4699      	mov	r9, r3
   34efe:	4c04      	ldr	r4, [pc, #16]	; (34f10 <__aeabi_dmul+0x4fc>)
   34f00:	e5ef      	b.n	34ae2 <__aeabi_dmul+0xce>
   34f02:	46c0      	nop			; (mov r8, r8)
   34f04:	000003ff 	.word	0x000003ff
   34f08:	feffffff 	.word	0xfeffffff
   34f0c:	000007fe 	.word	0x000007fe
   34f10:	000007ff 	.word	0x000007ff

00034f14 <__aeabi_dsub>:
   34f14:	b5f0      	push	{r4, r5, r6, r7, lr}
   34f16:	4646      	mov	r6, r8
   34f18:	46d6      	mov	lr, sl
   34f1a:	464f      	mov	r7, r9
   34f1c:	030c      	lsls	r4, r1, #12
   34f1e:	b5c0      	push	{r6, r7, lr}
   34f20:	0fcd      	lsrs	r5, r1, #31
   34f22:	004e      	lsls	r6, r1, #1
   34f24:	0a61      	lsrs	r1, r4, #9
   34f26:	0f44      	lsrs	r4, r0, #29
   34f28:	430c      	orrs	r4, r1
   34f2a:	00c1      	lsls	r1, r0, #3
   34f2c:	0058      	lsls	r0, r3, #1
   34f2e:	0d40      	lsrs	r0, r0, #21
   34f30:	4684      	mov	ip, r0
   34f32:	468a      	mov	sl, r1
   34f34:	000f      	movs	r7, r1
   34f36:	0319      	lsls	r1, r3, #12
   34f38:	0f50      	lsrs	r0, r2, #29
   34f3a:	0a49      	lsrs	r1, r1, #9
   34f3c:	4301      	orrs	r1, r0
   34f3e:	48c6      	ldr	r0, [pc, #792]	; (35258 <__aeabi_dsub+0x344>)
   34f40:	0d76      	lsrs	r6, r6, #21
   34f42:	46a8      	mov	r8, r5
   34f44:	0fdb      	lsrs	r3, r3, #31
   34f46:	00d2      	lsls	r2, r2, #3
   34f48:	4584      	cmp	ip, r0
   34f4a:	d100      	bne.n	34f4e <__aeabi_dsub+0x3a>
   34f4c:	e0d8      	b.n	35100 <__aeabi_dsub+0x1ec>
   34f4e:	2001      	movs	r0, #1
   34f50:	4043      	eors	r3, r0
   34f52:	42ab      	cmp	r3, r5
   34f54:	d100      	bne.n	34f58 <__aeabi_dsub+0x44>
   34f56:	e0a6      	b.n	350a6 <__aeabi_dsub+0x192>
   34f58:	4660      	mov	r0, ip
   34f5a:	1a35      	subs	r5, r6, r0
   34f5c:	2d00      	cmp	r5, #0
   34f5e:	dc00      	bgt.n	34f62 <__aeabi_dsub+0x4e>
   34f60:	e105      	b.n	3516e <__aeabi_dsub+0x25a>
   34f62:	2800      	cmp	r0, #0
   34f64:	d110      	bne.n	34f88 <__aeabi_dsub+0x74>
   34f66:	000b      	movs	r3, r1
   34f68:	4313      	orrs	r3, r2
   34f6a:	d100      	bne.n	34f6e <__aeabi_dsub+0x5a>
   34f6c:	e0d7      	b.n	3511e <__aeabi_dsub+0x20a>
   34f6e:	1e6b      	subs	r3, r5, #1
   34f70:	2b00      	cmp	r3, #0
   34f72:	d000      	beq.n	34f76 <__aeabi_dsub+0x62>
   34f74:	e14b      	b.n	3520e <__aeabi_dsub+0x2fa>
   34f76:	4653      	mov	r3, sl
   34f78:	1a9f      	subs	r7, r3, r2
   34f7a:	45ba      	cmp	sl, r7
   34f7c:	4180      	sbcs	r0, r0
   34f7e:	1a64      	subs	r4, r4, r1
   34f80:	4240      	negs	r0, r0
   34f82:	1a24      	subs	r4, r4, r0
   34f84:	2601      	movs	r6, #1
   34f86:	e01e      	b.n	34fc6 <__aeabi_dsub+0xb2>
   34f88:	4bb3      	ldr	r3, [pc, #716]	; (35258 <__aeabi_dsub+0x344>)
   34f8a:	429e      	cmp	r6, r3
   34f8c:	d048      	beq.n	35020 <__aeabi_dsub+0x10c>
   34f8e:	2380      	movs	r3, #128	; 0x80
   34f90:	041b      	lsls	r3, r3, #16
   34f92:	4319      	orrs	r1, r3
   34f94:	2d38      	cmp	r5, #56	; 0x38
   34f96:	dd00      	ble.n	34f9a <__aeabi_dsub+0x86>
   34f98:	e119      	b.n	351ce <__aeabi_dsub+0x2ba>
   34f9a:	2d1f      	cmp	r5, #31
   34f9c:	dd00      	ble.n	34fa0 <__aeabi_dsub+0x8c>
   34f9e:	e14c      	b.n	3523a <__aeabi_dsub+0x326>
   34fa0:	2320      	movs	r3, #32
   34fa2:	000f      	movs	r7, r1
   34fa4:	1b5b      	subs	r3, r3, r5
   34fa6:	0010      	movs	r0, r2
   34fa8:	409a      	lsls	r2, r3
   34faa:	409f      	lsls	r7, r3
   34fac:	40e8      	lsrs	r0, r5
   34fae:	1e53      	subs	r3, r2, #1
   34fb0:	419a      	sbcs	r2, r3
   34fb2:	40e9      	lsrs	r1, r5
   34fb4:	4307      	orrs	r7, r0
   34fb6:	4317      	orrs	r7, r2
   34fb8:	4653      	mov	r3, sl
   34fba:	1bdf      	subs	r7, r3, r7
   34fbc:	1a61      	subs	r1, r4, r1
   34fbe:	45ba      	cmp	sl, r7
   34fc0:	41a4      	sbcs	r4, r4
   34fc2:	4264      	negs	r4, r4
   34fc4:	1b0c      	subs	r4, r1, r4
   34fc6:	0223      	lsls	r3, r4, #8
   34fc8:	d400      	bmi.n	34fcc <__aeabi_dsub+0xb8>
   34fca:	e0c5      	b.n	35158 <__aeabi_dsub+0x244>
   34fcc:	0264      	lsls	r4, r4, #9
   34fce:	0a65      	lsrs	r5, r4, #9
   34fd0:	2d00      	cmp	r5, #0
   34fd2:	d100      	bne.n	34fd6 <__aeabi_dsub+0xc2>
   34fd4:	e0f6      	b.n	351c4 <__aeabi_dsub+0x2b0>
   34fd6:	0028      	movs	r0, r5
   34fd8:	f000 fb1e 	bl	35618 <__clzsi2>
   34fdc:	0003      	movs	r3, r0
   34fde:	3b08      	subs	r3, #8
   34fe0:	2b1f      	cmp	r3, #31
   34fe2:	dd00      	ble.n	34fe6 <__aeabi_dsub+0xd2>
   34fe4:	e0e9      	b.n	351ba <__aeabi_dsub+0x2a6>
   34fe6:	2220      	movs	r2, #32
   34fe8:	003c      	movs	r4, r7
   34fea:	1ad2      	subs	r2, r2, r3
   34fec:	409d      	lsls	r5, r3
   34fee:	40d4      	lsrs	r4, r2
   34ff0:	409f      	lsls	r7, r3
   34ff2:	4325      	orrs	r5, r4
   34ff4:	429e      	cmp	r6, r3
   34ff6:	dd00      	ble.n	34ffa <__aeabi_dsub+0xe6>
   34ff8:	e0db      	b.n	351b2 <__aeabi_dsub+0x29e>
   34ffa:	1b9e      	subs	r6, r3, r6
   34ffc:	1c73      	adds	r3, r6, #1
   34ffe:	2b1f      	cmp	r3, #31
   35000:	dd00      	ble.n	35004 <__aeabi_dsub+0xf0>
   35002:	e10a      	b.n	3521a <__aeabi_dsub+0x306>
   35004:	2220      	movs	r2, #32
   35006:	0038      	movs	r0, r7
   35008:	1ad2      	subs	r2, r2, r3
   3500a:	0029      	movs	r1, r5
   3500c:	4097      	lsls	r7, r2
   3500e:	002c      	movs	r4, r5
   35010:	4091      	lsls	r1, r2
   35012:	40d8      	lsrs	r0, r3
   35014:	1e7a      	subs	r2, r7, #1
   35016:	4197      	sbcs	r7, r2
   35018:	40dc      	lsrs	r4, r3
   3501a:	2600      	movs	r6, #0
   3501c:	4301      	orrs	r1, r0
   3501e:	430f      	orrs	r7, r1
   35020:	077b      	lsls	r3, r7, #29
   35022:	d009      	beq.n	35038 <__aeabi_dsub+0x124>
   35024:	230f      	movs	r3, #15
   35026:	403b      	ands	r3, r7
   35028:	2b04      	cmp	r3, #4
   3502a:	d005      	beq.n	35038 <__aeabi_dsub+0x124>
   3502c:	1d3b      	adds	r3, r7, #4
   3502e:	42bb      	cmp	r3, r7
   35030:	41bf      	sbcs	r7, r7
   35032:	427f      	negs	r7, r7
   35034:	19e4      	adds	r4, r4, r7
   35036:	001f      	movs	r7, r3
   35038:	0223      	lsls	r3, r4, #8
   3503a:	d525      	bpl.n	35088 <__aeabi_dsub+0x174>
   3503c:	4b86      	ldr	r3, [pc, #536]	; (35258 <__aeabi_dsub+0x344>)
   3503e:	3601      	adds	r6, #1
   35040:	429e      	cmp	r6, r3
   35042:	d100      	bne.n	35046 <__aeabi_dsub+0x132>
   35044:	e0af      	b.n	351a6 <__aeabi_dsub+0x292>
   35046:	4b85      	ldr	r3, [pc, #532]	; (3525c <__aeabi_dsub+0x348>)
   35048:	2501      	movs	r5, #1
   3504a:	401c      	ands	r4, r3
   3504c:	4643      	mov	r3, r8
   3504e:	0762      	lsls	r2, r4, #29
   35050:	08ff      	lsrs	r7, r7, #3
   35052:	0264      	lsls	r4, r4, #9
   35054:	0576      	lsls	r6, r6, #21
   35056:	4317      	orrs	r7, r2
   35058:	0b24      	lsrs	r4, r4, #12
   3505a:	0d76      	lsrs	r6, r6, #21
   3505c:	401d      	ands	r5, r3
   3505e:	2100      	movs	r1, #0
   35060:	0324      	lsls	r4, r4, #12
   35062:	0b23      	lsrs	r3, r4, #12
   35064:	0d0c      	lsrs	r4, r1, #20
   35066:	4a7e      	ldr	r2, [pc, #504]	; (35260 <__aeabi_dsub+0x34c>)
   35068:	0524      	lsls	r4, r4, #20
   3506a:	431c      	orrs	r4, r3
   3506c:	4014      	ands	r4, r2
   3506e:	0533      	lsls	r3, r6, #20
   35070:	4323      	orrs	r3, r4
   35072:	005b      	lsls	r3, r3, #1
   35074:	07ed      	lsls	r5, r5, #31
   35076:	085b      	lsrs	r3, r3, #1
   35078:	432b      	orrs	r3, r5
   3507a:	0038      	movs	r0, r7
   3507c:	0019      	movs	r1, r3
   3507e:	bc1c      	pop	{r2, r3, r4}
   35080:	4690      	mov	r8, r2
   35082:	4699      	mov	r9, r3
   35084:	46a2      	mov	sl, r4
   35086:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35088:	2501      	movs	r5, #1
   3508a:	4643      	mov	r3, r8
   3508c:	0762      	lsls	r2, r4, #29
   3508e:	08ff      	lsrs	r7, r7, #3
   35090:	4317      	orrs	r7, r2
   35092:	08e4      	lsrs	r4, r4, #3
   35094:	401d      	ands	r5, r3
   35096:	4b70      	ldr	r3, [pc, #448]	; (35258 <__aeabi_dsub+0x344>)
   35098:	429e      	cmp	r6, r3
   3509a:	d036      	beq.n	3510a <__aeabi_dsub+0x1f6>
   3509c:	0324      	lsls	r4, r4, #12
   3509e:	0576      	lsls	r6, r6, #21
   350a0:	0b24      	lsrs	r4, r4, #12
   350a2:	0d76      	lsrs	r6, r6, #21
   350a4:	e7db      	b.n	3505e <__aeabi_dsub+0x14a>
   350a6:	4663      	mov	r3, ip
   350a8:	1af3      	subs	r3, r6, r3
   350aa:	2b00      	cmp	r3, #0
   350ac:	dc00      	bgt.n	350b0 <__aeabi_dsub+0x19c>
   350ae:	e094      	b.n	351da <__aeabi_dsub+0x2c6>
   350b0:	4660      	mov	r0, ip
   350b2:	2800      	cmp	r0, #0
   350b4:	d035      	beq.n	35122 <__aeabi_dsub+0x20e>
   350b6:	4868      	ldr	r0, [pc, #416]	; (35258 <__aeabi_dsub+0x344>)
   350b8:	4286      	cmp	r6, r0
   350ba:	d0b1      	beq.n	35020 <__aeabi_dsub+0x10c>
   350bc:	2780      	movs	r7, #128	; 0x80
   350be:	043f      	lsls	r7, r7, #16
   350c0:	4339      	orrs	r1, r7
   350c2:	2b38      	cmp	r3, #56	; 0x38
   350c4:	dc00      	bgt.n	350c8 <__aeabi_dsub+0x1b4>
   350c6:	e0fd      	b.n	352c4 <__aeabi_dsub+0x3b0>
   350c8:	430a      	orrs	r2, r1
   350ca:	0017      	movs	r7, r2
   350cc:	2100      	movs	r1, #0
   350ce:	1e7a      	subs	r2, r7, #1
   350d0:	4197      	sbcs	r7, r2
   350d2:	4457      	add	r7, sl
   350d4:	4557      	cmp	r7, sl
   350d6:	4180      	sbcs	r0, r0
   350d8:	1909      	adds	r1, r1, r4
   350da:	4244      	negs	r4, r0
   350dc:	190c      	adds	r4, r1, r4
   350de:	0223      	lsls	r3, r4, #8
   350e0:	d53a      	bpl.n	35158 <__aeabi_dsub+0x244>
   350e2:	4b5d      	ldr	r3, [pc, #372]	; (35258 <__aeabi_dsub+0x344>)
   350e4:	3601      	adds	r6, #1
   350e6:	429e      	cmp	r6, r3
   350e8:	d100      	bne.n	350ec <__aeabi_dsub+0x1d8>
   350ea:	e14b      	b.n	35384 <__aeabi_dsub+0x470>
   350ec:	2201      	movs	r2, #1
   350ee:	4b5b      	ldr	r3, [pc, #364]	; (3525c <__aeabi_dsub+0x348>)
   350f0:	401c      	ands	r4, r3
   350f2:	087b      	lsrs	r3, r7, #1
   350f4:	4017      	ands	r7, r2
   350f6:	431f      	orrs	r7, r3
   350f8:	07e2      	lsls	r2, r4, #31
   350fa:	4317      	orrs	r7, r2
   350fc:	0864      	lsrs	r4, r4, #1
   350fe:	e78f      	b.n	35020 <__aeabi_dsub+0x10c>
   35100:	0008      	movs	r0, r1
   35102:	4310      	orrs	r0, r2
   35104:	d000      	beq.n	35108 <__aeabi_dsub+0x1f4>
   35106:	e724      	b.n	34f52 <__aeabi_dsub+0x3e>
   35108:	e721      	b.n	34f4e <__aeabi_dsub+0x3a>
   3510a:	0023      	movs	r3, r4
   3510c:	433b      	orrs	r3, r7
   3510e:	d100      	bne.n	35112 <__aeabi_dsub+0x1fe>
   35110:	e1b9      	b.n	35486 <__aeabi_dsub+0x572>
   35112:	2280      	movs	r2, #128	; 0x80
   35114:	0312      	lsls	r2, r2, #12
   35116:	4314      	orrs	r4, r2
   35118:	0324      	lsls	r4, r4, #12
   3511a:	0b24      	lsrs	r4, r4, #12
   3511c:	e79f      	b.n	3505e <__aeabi_dsub+0x14a>
   3511e:	002e      	movs	r6, r5
   35120:	e77e      	b.n	35020 <__aeabi_dsub+0x10c>
   35122:	0008      	movs	r0, r1
   35124:	4310      	orrs	r0, r2
   35126:	d100      	bne.n	3512a <__aeabi_dsub+0x216>
   35128:	e0ca      	b.n	352c0 <__aeabi_dsub+0x3ac>
   3512a:	1e58      	subs	r0, r3, #1
   3512c:	4684      	mov	ip, r0
   3512e:	2800      	cmp	r0, #0
   35130:	d000      	beq.n	35134 <__aeabi_dsub+0x220>
   35132:	e0e7      	b.n	35304 <__aeabi_dsub+0x3f0>
   35134:	4452      	add	r2, sl
   35136:	4552      	cmp	r2, sl
   35138:	4180      	sbcs	r0, r0
   3513a:	1864      	adds	r4, r4, r1
   3513c:	4240      	negs	r0, r0
   3513e:	1824      	adds	r4, r4, r0
   35140:	0017      	movs	r7, r2
   35142:	2601      	movs	r6, #1
   35144:	0223      	lsls	r3, r4, #8
   35146:	d507      	bpl.n	35158 <__aeabi_dsub+0x244>
   35148:	2602      	movs	r6, #2
   3514a:	e7cf      	b.n	350ec <__aeabi_dsub+0x1d8>
   3514c:	4664      	mov	r4, ip
   3514e:	432c      	orrs	r4, r5
   35150:	d100      	bne.n	35154 <__aeabi_dsub+0x240>
   35152:	e1b3      	b.n	354bc <__aeabi_dsub+0x5a8>
   35154:	002c      	movs	r4, r5
   35156:	4667      	mov	r7, ip
   35158:	077b      	lsls	r3, r7, #29
   3515a:	d000      	beq.n	3515e <__aeabi_dsub+0x24a>
   3515c:	e762      	b.n	35024 <__aeabi_dsub+0x110>
   3515e:	0763      	lsls	r3, r4, #29
   35160:	08ff      	lsrs	r7, r7, #3
   35162:	431f      	orrs	r7, r3
   35164:	2501      	movs	r5, #1
   35166:	4643      	mov	r3, r8
   35168:	08e4      	lsrs	r4, r4, #3
   3516a:	401d      	ands	r5, r3
   3516c:	e793      	b.n	35096 <__aeabi_dsub+0x182>
   3516e:	2d00      	cmp	r5, #0
   35170:	d178      	bne.n	35264 <__aeabi_dsub+0x350>
   35172:	1c75      	adds	r5, r6, #1
   35174:	056d      	lsls	r5, r5, #21
   35176:	0d6d      	lsrs	r5, r5, #21
   35178:	2d01      	cmp	r5, #1
   3517a:	dc00      	bgt.n	3517e <__aeabi_dsub+0x26a>
   3517c:	e0f2      	b.n	35364 <__aeabi_dsub+0x450>
   3517e:	4650      	mov	r0, sl
   35180:	1a80      	subs	r0, r0, r2
   35182:	4582      	cmp	sl, r0
   35184:	41bf      	sbcs	r7, r7
   35186:	1a65      	subs	r5, r4, r1
   35188:	427f      	negs	r7, r7
   3518a:	1bed      	subs	r5, r5, r7
   3518c:	4684      	mov	ip, r0
   3518e:	0228      	lsls	r0, r5, #8
   35190:	d400      	bmi.n	35194 <__aeabi_dsub+0x280>
   35192:	e08c      	b.n	352ae <__aeabi_dsub+0x39a>
   35194:	4650      	mov	r0, sl
   35196:	1a17      	subs	r7, r2, r0
   35198:	42ba      	cmp	r2, r7
   3519a:	4192      	sbcs	r2, r2
   3519c:	1b0c      	subs	r4, r1, r4
   3519e:	4255      	negs	r5, r2
   351a0:	1b65      	subs	r5, r4, r5
   351a2:	4698      	mov	r8, r3
   351a4:	e714      	b.n	34fd0 <__aeabi_dsub+0xbc>
   351a6:	2501      	movs	r5, #1
   351a8:	4643      	mov	r3, r8
   351aa:	2400      	movs	r4, #0
   351ac:	401d      	ands	r5, r3
   351ae:	2700      	movs	r7, #0
   351b0:	e755      	b.n	3505e <__aeabi_dsub+0x14a>
   351b2:	4c2a      	ldr	r4, [pc, #168]	; (3525c <__aeabi_dsub+0x348>)
   351b4:	1af6      	subs	r6, r6, r3
   351b6:	402c      	ands	r4, r5
   351b8:	e732      	b.n	35020 <__aeabi_dsub+0x10c>
   351ba:	003d      	movs	r5, r7
   351bc:	3828      	subs	r0, #40	; 0x28
   351be:	4085      	lsls	r5, r0
   351c0:	2700      	movs	r7, #0
   351c2:	e717      	b.n	34ff4 <__aeabi_dsub+0xe0>
   351c4:	0038      	movs	r0, r7
   351c6:	f000 fa27 	bl	35618 <__clzsi2>
   351ca:	3020      	adds	r0, #32
   351cc:	e706      	b.n	34fdc <__aeabi_dsub+0xc8>
   351ce:	430a      	orrs	r2, r1
   351d0:	0017      	movs	r7, r2
   351d2:	2100      	movs	r1, #0
   351d4:	1e7a      	subs	r2, r7, #1
   351d6:	4197      	sbcs	r7, r2
   351d8:	e6ee      	b.n	34fb8 <__aeabi_dsub+0xa4>
   351da:	2b00      	cmp	r3, #0
   351dc:	d000      	beq.n	351e0 <__aeabi_dsub+0x2cc>
   351de:	e0e5      	b.n	353ac <__aeabi_dsub+0x498>
   351e0:	1c73      	adds	r3, r6, #1
   351e2:	469c      	mov	ip, r3
   351e4:	055b      	lsls	r3, r3, #21
   351e6:	0d5b      	lsrs	r3, r3, #21
   351e8:	2b01      	cmp	r3, #1
   351ea:	dc00      	bgt.n	351ee <__aeabi_dsub+0x2da>
   351ec:	e09f      	b.n	3532e <__aeabi_dsub+0x41a>
   351ee:	4b1a      	ldr	r3, [pc, #104]	; (35258 <__aeabi_dsub+0x344>)
   351f0:	459c      	cmp	ip, r3
   351f2:	d100      	bne.n	351f6 <__aeabi_dsub+0x2e2>
   351f4:	e0c5      	b.n	35382 <__aeabi_dsub+0x46e>
   351f6:	4452      	add	r2, sl
   351f8:	4552      	cmp	r2, sl
   351fa:	4180      	sbcs	r0, r0
   351fc:	1864      	adds	r4, r4, r1
   351fe:	4240      	negs	r0, r0
   35200:	1824      	adds	r4, r4, r0
   35202:	07e7      	lsls	r7, r4, #31
   35204:	0852      	lsrs	r2, r2, #1
   35206:	4317      	orrs	r7, r2
   35208:	0864      	lsrs	r4, r4, #1
   3520a:	4666      	mov	r6, ip
   3520c:	e708      	b.n	35020 <__aeabi_dsub+0x10c>
   3520e:	4812      	ldr	r0, [pc, #72]	; (35258 <__aeabi_dsub+0x344>)
   35210:	4285      	cmp	r5, r0
   35212:	d100      	bne.n	35216 <__aeabi_dsub+0x302>
   35214:	e085      	b.n	35322 <__aeabi_dsub+0x40e>
   35216:	001d      	movs	r5, r3
   35218:	e6bc      	b.n	34f94 <__aeabi_dsub+0x80>
   3521a:	0029      	movs	r1, r5
   3521c:	3e1f      	subs	r6, #31
   3521e:	40f1      	lsrs	r1, r6
   35220:	2b20      	cmp	r3, #32
   35222:	d100      	bne.n	35226 <__aeabi_dsub+0x312>
   35224:	e07f      	b.n	35326 <__aeabi_dsub+0x412>
   35226:	2240      	movs	r2, #64	; 0x40
   35228:	1ad3      	subs	r3, r2, r3
   3522a:	409d      	lsls	r5, r3
   3522c:	432f      	orrs	r7, r5
   3522e:	1e7d      	subs	r5, r7, #1
   35230:	41af      	sbcs	r7, r5
   35232:	2400      	movs	r4, #0
   35234:	430f      	orrs	r7, r1
   35236:	2600      	movs	r6, #0
   35238:	e78e      	b.n	35158 <__aeabi_dsub+0x244>
   3523a:	002b      	movs	r3, r5
   3523c:	000f      	movs	r7, r1
   3523e:	3b20      	subs	r3, #32
   35240:	40df      	lsrs	r7, r3
   35242:	2d20      	cmp	r5, #32
   35244:	d071      	beq.n	3532a <__aeabi_dsub+0x416>
   35246:	2340      	movs	r3, #64	; 0x40
   35248:	1b5d      	subs	r5, r3, r5
   3524a:	40a9      	lsls	r1, r5
   3524c:	430a      	orrs	r2, r1
   3524e:	1e51      	subs	r1, r2, #1
   35250:	418a      	sbcs	r2, r1
   35252:	2100      	movs	r1, #0
   35254:	4317      	orrs	r7, r2
   35256:	e6af      	b.n	34fb8 <__aeabi_dsub+0xa4>
   35258:	000007ff 	.word	0x000007ff
   3525c:	ff7fffff 	.word	0xff7fffff
   35260:	800fffff 	.word	0x800fffff
   35264:	2e00      	cmp	r6, #0
   35266:	d03e      	beq.n	352e6 <__aeabi_dsub+0x3d2>
   35268:	4eb3      	ldr	r6, [pc, #716]	; (35538 <__aeabi_dsub+0x624>)
   3526a:	45b4      	cmp	ip, r6
   3526c:	d045      	beq.n	352fa <__aeabi_dsub+0x3e6>
   3526e:	2680      	movs	r6, #128	; 0x80
   35270:	0436      	lsls	r6, r6, #16
   35272:	426d      	negs	r5, r5
   35274:	4334      	orrs	r4, r6
   35276:	2d38      	cmp	r5, #56	; 0x38
   35278:	dd00      	ble.n	3527c <__aeabi_dsub+0x368>
   3527a:	e0a8      	b.n	353ce <__aeabi_dsub+0x4ba>
   3527c:	2d1f      	cmp	r5, #31
   3527e:	dd00      	ble.n	35282 <__aeabi_dsub+0x36e>
   35280:	e11f      	b.n	354c2 <__aeabi_dsub+0x5ae>
   35282:	2620      	movs	r6, #32
   35284:	0027      	movs	r7, r4
   35286:	4650      	mov	r0, sl
   35288:	1b76      	subs	r6, r6, r5
   3528a:	40b7      	lsls	r7, r6
   3528c:	40e8      	lsrs	r0, r5
   3528e:	4307      	orrs	r7, r0
   35290:	4650      	mov	r0, sl
   35292:	40b0      	lsls	r0, r6
   35294:	1e46      	subs	r6, r0, #1
   35296:	41b0      	sbcs	r0, r6
   35298:	40ec      	lsrs	r4, r5
   3529a:	4338      	orrs	r0, r7
   3529c:	1a17      	subs	r7, r2, r0
   3529e:	42ba      	cmp	r2, r7
   352a0:	4192      	sbcs	r2, r2
   352a2:	1b0c      	subs	r4, r1, r4
   352a4:	4252      	negs	r2, r2
   352a6:	1aa4      	subs	r4, r4, r2
   352a8:	4666      	mov	r6, ip
   352aa:	4698      	mov	r8, r3
   352ac:	e68b      	b.n	34fc6 <__aeabi_dsub+0xb2>
   352ae:	4664      	mov	r4, ip
   352b0:	4667      	mov	r7, ip
   352b2:	432c      	orrs	r4, r5
   352b4:	d000      	beq.n	352b8 <__aeabi_dsub+0x3a4>
   352b6:	e68b      	b.n	34fd0 <__aeabi_dsub+0xbc>
   352b8:	2500      	movs	r5, #0
   352ba:	2600      	movs	r6, #0
   352bc:	2700      	movs	r7, #0
   352be:	e6ea      	b.n	35096 <__aeabi_dsub+0x182>
   352c0:	001e      	movs	r6, r3
   352c2:	e6ad      	b.n	35020 <__aeabi_dsub+0x10c>
   352c4:	2b1f      	cmp	r3, #31
   352c6:	dc60      	bgt.n	3538a <__aeabi_dsub+0x476>
   352c8:	2720      	movs	r7, #32
   352ca:	1af8      	subs	r0, r7, r3
   352cc:	000f      	movs	r7, r1
   352ce:	4684      	mov	ip, r0
   352d0:	4087      	lsls	r7, r0
   352d2:	0010      	movs	r0, r2
   352d4:	40d8      	lsrs	r0, r3
   352d6:	4307      	orrs	r7, r0
   352d8:	4660      	mov	r0, ip
   352da:	4082      	lsls	r2, r0
   352dc:	1e50      	subs	r0, r2, #1
   352de:	4182      	sbcs	r2, r0
   352e0:	40d9      	lsrs	r1, r3
   352e2:	4317      	orrs	r7, r2
   352e4:	e6f5      	b.n	350d2 <__aeabi_dsub+0x1be>
   352e6:	0026      	movs	r6, r4
   352e8:	4650      	mov	r0, sl
   352ea:	4306      	orrs	r6, r0
   352ec:	d005      	beq.n	352fa <__aeabi_dsub+0x3e6>
   352ee:	43ed      	mvns	r5, r5
   352f0:	2d00      	cmp	r5, #0
   352f2:	d0d3      	beq.n	3529c <__aeabi_dsub+0x388>
   352f4:	4e90      	ldr	r6, [pc, #576]	; (35538 <__aeabi_dsub+0x624>)
   352f6:	45b4      	cmp	ip, r6
   352f8:	d1bd      	bne.n	35276 <__aeabi_dsub+0x362>
   352fa:	000c      	movs	r4, r1
   352fc:	0017      	movs	r7, r2
   352fe:	4666      	mov	r6, ip
   35300:	4698      	mov	r8, r3
   35302:	e68d      	b.n	35020 <__aeabi_dsub+0x10c>
   35304:	488c      	ldr	r0, [pc, #560]	; (35538 <__aeabi_dsub+0x624>)
   35306:	4283      	cmp	r3, r0
   35308:	d00b      	beq.n	35322 <__aeabi_dsub+0x40e>
   3530a:	4663      	mov	r3, ip
   3530c:	e6d9      	b.n	350c2 <__aeabi_dsub+0x1ae>
   3530e:	2d00      	cmp	r5, #0
   35310:	d000      	beq.n	35314 <__aeabi_dsub+0x400>
   35312:	e096      	b.n	35442 <__aeabi_dsub+0x52e>
   35314:	0008      	movs	r0, r1
   35316:	4310      	orrs	r0, r2
   35318:	d100      	bne.n	3531c <__aeabi_dsub+0x408>
   3531a:	e0e2      	b.n	354e2 <__aeabi_dsub+0x5ce>
   3531c:	000c      	movs	r4, r1
   3531e:	0017      	movs	r7, r2
   35320:	4698      	mov	r8, r3
   35322:	4e85      	ldr	r6, [pc, #532]	; (35538 <__aeabi_dsub+0x624>)
   35324:	e67c      	b.n	35020 <__aeabi_dsub+0x10c>
   35326:	2500      	movs	r5, #0
   35328:	e780      	b.n	3522c <__aeabi_dsub+0x318>
   3532a:	2100      	movs	r1, #0
   3532c:	e78e      	b.n	3524c <__aeabi_dsub+0x338>
   3532e:	0023      	movs	r3, r4
   35330:	4650      	mov	r0, sl
   35332:	4303      	orrs	r3, r0
   35334:	2e00      	cmp	r6, #0
   35336:	d000      	beq.n	3533a <__aeabi_dsub+0x426>
   35338:	e0a8      	b.n	3548c <__aeabi_dsub+0x578>
   3533a:	2b00      	cmp	r3, #0
   3533c:	d100      	bne.n	35340 <__aeabi_dsub+0x42c>
   3533e:	e0de      	b.n	354fe <__aeabi_dsub+0x5ea>
   35340:	000b      	movs	r3, r1
   35342:	4313      	orrs	r3, r2
   35344:	d100      	bne.n	35348 <__aeabi_dsub+0x434>
   35346:	e66b      	b.n	35020 <__aeabi_dsub+0x10c>
   35348:	4452      	add	r2, sl
   3534a:	4552      	cmp	r2, sl
   3534c:	4180      	sbcs	r0, r0
   3534e:	1864      	adds	r4, r4, r1
   35350:	4240      	negs	r0, r0
   35352:	1824      	adds	r4, r4, r0
   35354:	0017      	movs	r7, r2
   35356:	0223      	lsls	r3, r4, #8
   35358:	d400      	bmi.n	3535c <__aeabi_dsub+0x448>
   3535a:	e6fd      	b.n	35158 <__aeabi_dsub+0x244>
   3535c:	4b77      	ldr	r3, [pc, #476]	; (3553c <__aeabi_dsub+0x628>)
   3535e:	4666      	mov	r6, ip
   35360:	401c      	ands	r4, r3
   35362:	e65d      	b.n	35020 <__aeabi_dsub+0x10c>
   35364:	0025      	movs	r5, r4
   35366:	4650      	mov	r0, sl
   35368:	4305      	orrs	r5, r0
   3536a:	2e00      	cmp	r6, #0
   3536c:	d1cf      	bne.n	3530e <__aeabi_dsub+0x3fa>
   3536e:	2d00      	cmp	r5, #0
   35370:	d14f      	bne.n	35412 <__aeabi_dsub+0x4fe>
   35372:	000c      	movs	r4, r1
   35374:	4314      	orrs	r4, r2
   35376:	d100      	bne.n	3537a <__aeabi_dsub+0x466>
   35378:	e0a0      	b.n	354bc <__aeabi_dsub+0x5a8>
   3537a:	000c      	movs	r4, r1
   3537c:	0017      	movs	r7, r2
   3537e:	4698      	mov	r8, r3
   35380:	e64e      	b.n	35020 <__aeabi_dsub+0x10c>
   35382:	4666      	mov	r6, ip
   35384:	2400      	movs	r4, #0
   35386:	2700      	movs	r7, #0
   35388:	e685      	b.n	35096 <__aeabi_dsub+0x182>
   3538a:	001f      	movs	r7, r3
   3538c:	0008      	movs	r0, r1
   3538e:	3f20      	subs	r7, #32
   35390:	40f8      	lsrs	r0, r7
   35392:	0007      	movs	r7, r0
   35394:	2b20      	cmp	r3, #32
   35396:	d100      	bne.n	3539a <__aeabi_dsub+0x486>
   35398:	e08e      	b.n	354b8 <__aeabi_dsub+0x5a4>
   3539a:	2040      	movs	r0, #64	; 0x40
   3539c:	1ac3      	subs	r3, r0, r3
   3539e:	4099      	lsls	r1, r3
   353a0:	430a      	orrs	r2, r1
   353a2:	1e51      	subs	r1, r2, #1
   353a4:	418a      	sbcs	r2, r1
   353a6:	2100      	movs	r1, #0
   353a8:	4317      	orrs	r7, r2
   353aa:	e692      	b.n	350d2 <__aeabi_dsub+0x1be>
   353ac:	2e00      	cmp	r6, #0
   353ae:	d114      	bne.n	353da <__aeabi_dsub+0x4c6>
   353b0:	0026      	movs	r6, r4
   353b2:	4650      	mov	r0, sl
   353b4:	4306      	orrs	r6, r0
   353b6:	d062      	beq.n	3547e <__aeabi_dsub+0x56a>
   353b8:	43db      	mvns	r3, r3
   353ba:	2b00      	cmp	r3, #0
   353bc:	d15c      	bne.n	35478 <__aeabi_dsub+0x564>
   353be:	1887      	adds	r7, r0, r2
   353c0:	4297      	cmp	r7, r2
   353c2:	4192      	sbcs	r2, r2
   353c4:	1864      	adds	r4, r4, r1
   353c6:	4252      	negs	r2, r2
   353c8:	18a4      	adds	r4, r4, r2
   353ca:	4666      	mov	r6, ip
   353cc:	e687      	b.n	350de <__aeabi_dsub+0x1ca>
   353ce:	4650      	mov	r0, sl
   353d0:	4320      	orrs	r0, r4
   353d2:	1e44      	subs	r4, r0, #1
   353d4:	41a0      	sbcs	r0, r4
   353d6:	2400      	movs	r4, #0
   353d8:	e760      	b.n	3529c <__aeabi_dsub+0x388>
   353da:	4e57      	ldr	r6, [pc, #348]	; (35538 <__aeabi_dsub+0x624>)
   353dc:	45b4      	cmp	ip, r6
   353de:	d04e      	beq.n	3547e <__aeabi_dsub+0x56a>
   353e0:	2680      	movs	r6, #128	; 0x80
   353e2:	0436      	lsls	r6, r6, #16
   353e4:	425b      	negs	r3, r3
   353e6:	4334      	orrs	r4, r6
   353e8:	2b38      	cmp	r3, #56	; 0x38
   353ea:	dd00      	ble.n	353ee <__aeabi_dsub+0x4da>
   353ec:	e07f      	b.n	354ee <__aeabi_dsub+0x5da>
   353ee:	2b1f      	cmp	r3, #31
   353f0:	dd00      	ble.n	353f4 <__aeabi_dsub+0x4e0>
   353f2:	e08b      	b.n	3550c <__aeabi_dsub+0x5f8>
   353f4:	2620      	movs	r6, #32
   353f6:	0027      	movs	r7, r4
   353f8:	4650      	mov	r0, sl
   353fa:	1af6      	subs	r6, r6, r3
   353fc:	40b7      	lsls	r7, r6
   353fe:	40d8      	lsrs	r0, r3
   35400:	4307      	orrs	r7, r0
   35402:	4650      	mov	r0, sl
   35404:	40b0      	lsls	r0, r6
   35406:	1e46      	subs	r6, r0, #1
   35408:	41b0      	sbcs	r0, r6
   3540a:	4307      	orrs	r7, r0
   3540c:	40dc      	lsrs	r4, r3
   3540e:	18bf      	adds	r7, r7, r2
   35410:	e7d6      	b.n	353c0 <__aeabi_dsub+0x4ac>
   35412:	000d      	movs	r5, r1
   35414:	4315      	orrs	r5, r2
   35416:	d100      	bne.n	3541a <__aeabi_dsub+0x506>
   35418:	e602      	b.n	35020 <__aeabi_dsub+0x10c>
   3541a:	4650      	mov	r0, sl
   3541c:	1a80      	subs	r0, r0, r2
   3541e:	4582      	cmp	sl, r0
   35420:	41bf      	sbcs	r7, r7
   35422:	1a65      	subs	r5, r4, r1
   35424:	427f      	negs	r7, r7
   35426:	1bed      	subs	r5, r5, r7
   35428:	4684      	mov	ip, r0
   3542a:	0228      	lsls	r0, r5, #8
   3542c:	d400      	bmi.n	35430 <__aeabi_dsub+0x51c>
   3542e:	e68d      	b.n	3514c <__aeabi_dsub+0x238>
   35430:	4650      	mov	r0, sl
   35432:	1a17      	subs	r7, r2, r0
   35434:	42ba      	cmp	r2, r7
   35436:	4192      	sbcs	r2, r2
   35438:	1b0c      	subs	r4, r1, r4
   3543a:	4252      	negs	r2, r2
   3543c:	1aa4      	subs	r4, r4, r2
   3543e:	4698      	mov	r8, r3
   35440:	e5ee      	b.n	35020 <__aeabi_dsub+0x10c>
   35442:	000d      	movs	r5, r1
   35444:	4315      	orrs	r5, r2
   35446:	d100      	bne.n	3544a <__aeabi_dsub+0x536>
   35448:	e76b      	b.n	35322 <__aeabi_dsub+0x40e>
   3544a:	4650      	mov	r0, sl
   3544c:	0767      	lsls	r7, r4, #29
   3544e:	08c0      	lsrs	r0, r0, #3
   35450:	4307      	orrs	r7, r0
   35452:	2080      	movs	r0, #128	; 0x80
   35454:	08e4      	lsrs	r4, r4, #3
   35456:	0300      	lsls	r0, r0, #12
   35458:	4204      	tst	r4, r0
   3545a:	d007      	beq.n	3546c <__aeabi_dsub+0x558>
   3545c:	08cd      	lsrs	r5, r1, #3
   3545e:	4205      	tst	r5, r0
   35460:	d104      	bne.n	3546c <__aeabi_dsub+0x558>
   35462:	002c      	movs	r4, r5
   35464:	4698      	mov	r8, r3
   35466:	08d7      	lsrs	r7, r2, #3
   35468:	0749      	lsls	r1, r1, #29
   3546a:	430f      	orrs	r7, r1
   3546c:	0f7b      	lsrs	r3, r7, #29
   3546e:	00e4      	lsls	r4, r4, #3
   35470:	431c      	orrs	r4, r3
   35472:	00ff      	lsls	r7, r7, #3
   35474:	4e30      	ldr	r6, [pc, #192]	; (35538 <__aeabi_dsub+0x624>)
   35476:	e5d3      	b.n	35020 <__aeabi_dsub+0x10c>
   35478:	4e2f      	ldr	r6, [pc, #188]	; (35538 <__aeabi_dsub+0x624>)
   3547a:	45b4      	cmp	ip, r6
   3547c:	d1b4      	bne.n	353e8 <__aeabi_dsub+0x4d4>
   3547e:	000c      	movs	r4, r1
   35480:	0017      	movs	r7, r2
   35482:	4666      	mov	r6, ip
   35484:	e5cc      	b.n	35020 <__aeabi_dsub+0x10c>
   35486:	2700      	movs	r7, #0
   35488:	2400      	movs	r4, #0
   3548a:	e5e8      	b.n	3505e <__aeabi_dsub+0x14a>
   3548c:	2b00      	cmp	r3, #0
   3548e:	d039      	beq.n	35504 <__aeabi_dsub+0x5f0>
   35490:	000b      	movs	r3, r1
   35492:	4313      	orrs	r3, r2
   35494:	d100      	bne.n	35498 <__aeabi_dsub+0x584>
   35496:	e744      	b.n	35322 <__aeabi_dsub+0x40e>
   35498:	08c0      	lsrs	r0, r0, #3
   3549a:	0767      	lsls	r7, r4, #29
   3549c:	4307      	orrs	r7, r0
   3549e:	2080      	movs	r0, #128	; 0x80
   354a0:	08e4      	lsrs	r4, r4, #3
   354a2:	0300      	lsls	r0, r0, #12
   354a4:	4204      	tst	r4, r0
   354a6:	d0e1      	beq.n	3546c <__aeabi_dsub+0x558>
   354a8:	08cb      	lsrs	r3, r1, #3
   354aa:	4203      	tst	r3, r0
   354ac:	d1de      	bne.n	3546c <__aeabi_dsub+0x558>
   354ae:	08d7      	lsrs	r7, r2, #3
   354b0:	0749      	lsls	r1, r1, #29
   354b2:	430f      	orrs	r7, r1
   354b4:	001c      	movs	r4, r3
   354b6:	e7d9      	b.n	3546c <__aeabi_dsub+0x558>
   354b8:	2100      	movs	r1, #0
   354ba:	e771      	b.n	353a0 <__aeabi_dsub+0x48c>
   354bc:	2500      	movs	r5, #0
   354be:	2700      	movs	r7, #0
   354c0:	e5e9      	b.n	35096 <__aeabi_dsub+0x182>
   354c2:	002e      	movs	r6, r5
   354c4:	0027      	movs	r7, r4
   354c6:	3e20      	subs	r6, #32
   354c8:	40f7      	lsrs	r7, r6
   354ca:	2d20      	cmp	r5, #32
   354cc:	d02f      	beq.n	3552e <__aeabi_dsub+0x61a>
   354ce:	2640      	movs	r6, #64	; 0x40
   354d0:	1b75      	subs	r5, r6, r5
   354d2:	40ac      	lsls	r4, r5
   354d4:	4650      	mov	r0, sl
   354d6:	4320      	orrs	r0, r4
   354d8:	1e44      	subs	r4, r0, #1
   354da:	41a0      	sbcs	r0, r4
   354dc:	2400      	movs	r4, #0
   354de:	4338      	orrs	r0, r7
   354e0:	e6dc      	b.n	3529c <__aeabi_dsub+0x388>
   354e2:	2480      	movs	r4, #128	; 0x80
   354e4:	2500      	movs	r5, #0
   354e6:	0324      	lsls	r4, r4, #12
   354e8:	4e13      	ldr	r6, [pc, #76]	; (35538 <__aeabi_dsub+0x624>)
   354ea:	2700      	movs	r7, #0
   354ec:	e5d3      	b.n	35096 <__aeabi_dsub+0x182>
   354ee:	4650      	mov	r0, sl
   354f0:	4320      	orrs	r0, r4
   354f2:	0007      	movs	r7, r0
   354f4:	1e78      	subs	r0, r7, #1
   354f6:	4187      	sbcs	r7, r0
   354f8:	2400      	movs	r4, #0
   354fa:	18bf      	adds	r7, r7, r2
   354fc:	e760      	b.n	353c0 <__aeabi_dsub+0x4ac>
   354fe:	000c      	movs	r4, r1
   35500:	0017      	movs	r7, r2
   35502:	e58d      	b.n	35020 <__aeabi_dsub+0x10c>
   35504:	000c      	movs	r4, r1
   35506:	0017      	movs	r7, r2
   35508:	4e0b      	ldr	r6, [pc, #44]	; (35538 <__aeabi_dsub+0x624>)
   3550a:	e589      	b.n	35020 <__aeabi_dsub+0x10c>
   3550c:	001e      	movs	r6, r3
   3550e:	0027      	movs	r7, r4
   35510:	3e20      	subs	r6, #32
   35512:	40f7      	lsrs	r7, r6
   35514:	2b20      	cmp	r3, #32
   35516:	d00c      	beq.n	35532 <__aeabi_dsub+0x61e>
   35518:	2640      	movs	r6, #64	; 0x40
   3551a:	1af3      	subs	r3, r6, r3
   3551c:	409c      	lsls	r4, r3
   3551e:	4650      	mov	r0, sl
   35520:	4320      	orrs	r0, r4
   35522:	1e44      	subs	r4, r0, #1
   35524:	41a0      	sbcs	r0, r4
   35526:	4307      	orrs	r7, r0
   35528:	2400      	movs	r4, #0
   3552a:	18bf      	adds	r7, r7, r2
   3552c:	e748      	b.n	353c0 <__aeabi_dsub+0x4ac>
   3552e:	2400      	movs	r4, #0
   35530:	e7d0      	b.n	354d4 <__aeabi_dsub+0x5c0>
   35532:	2400      	movs	r4, #0
   35534:	e7f3      	b.n	3551e <__aeabi_dsub+0x60a>
   35536:	46c0      	nop			; (mov r8, r8)
   35538:	000007ff 	.word	0x000007ff
   3553c:	ff7fffff 	.word	0xff7fffff

00035540 <__aeabi_d2iz>:
   35540:	b530      	push	{r4, r5, lr}
   35542:	4d13      	ldr	r5, [pc, #76]	; (35590 <__aeabi_d2iz+0x50>)
   35544:	030a      	lsls	r2, r1, #12
   35546:	004b      	lsls	r3, r1, #1
   35548:	0b12      	lsrs	r2, r2, #12
   3554a:	0d5b      	lsrs	r3, r3, #21
   3554c:	0fc9      	lsrs	r1, r1, #31
   3554e:	2400      	movs	r4, #0
   35550:	42ab      	cmp	r3, r5
   35552:	dd10      	ble.n	35576 <__aeabi_d2iz+0x36>
   35554:	4c0f      	ldr	r4, [pc, #60]	; (35594 <__aeabi_d2iz+0x54>)
   35556:	42a3      	cmp	r3, r4
   35558:	dc0f      	bgt.n	3557a <__aeabi_d2iz+0x3a>
   3555a:	2480      	movs	r4, #128	; 0x80
   3555c:	4d0e      	ldr	r5, [pc, #56]	; (35598 <__aeabi_d2iz+0x58>)
   3555e:	0364      	lsls	r4, r4, #13
   35560:	4322      	orrs	r2, r4
   35562:	1aed      	subs	r5, r5, r3
   35564:	2d1f      	cmp	r5, #31
   35566:	dd0b      	ble.n	35580 <__aeabi_d2iz+0x40>
   35568:	480c      	ldr	r0, [pc, #48]	; (3559c <__aeabi_d2iz+0x5c>)
   3556a:	1ac3      	subs	r3, r0, r3
   3556c:	40da      	lsrs	r2, r3
   3556e:	4254      	negs	r4, r2
   35570:	2900      	cmp	r1, #0
   35572:	d100      	bne.n	35576 <__aeabi_d2iz+0x36>
   35574:	0014      	movs	r4, r2
   35576:	0020      	movs	r0, r4
   35578:	bd30      	pop	{r4, r5, pc}
   3557a:	4b09      	ldr	r3, [pc, #36]	; (355a0 <__aeabi_d2iz+0x60>)
   3557c:	18cc      	adds	r4, r1, r3
   3557e:	e7fa      	b.n	35576 <__aeabi_d2iz+0x36>
   35580:	4c08      	ldr	r4, [pc, #32]	; (355a4 <__aeabi_d2iz+0x64>)
   35582:	40e8      	lsrs	r0, r5
   35584:	46a4      	mov	ip, r4
   35586:	4463      	add	r3, ip
   35588:	409a      	lsls	r2, r3
   3558a:	4302      	orrs	r2, r0
   3558c:	e7ef      	b.n	3556e <__aeabi_d2iz+0x2e>
   3558e:	46c0      	nop			; (mov r8, r8)
   35590:	000003fe 	.word	0x000003fe
   35594:	0000041d 	.word	0x0000041d
   35598:	00000433 	.word	0x00000433
   3559c:	00000413 	.word	0x00000413
   355a0:	7fffffff 	.word	0x7fffffff
   355a4:	fffffbed 	.word	0xfffffbed

000355a8 <__aeabi_ui2d>:
   355a8:	b510      	push	{r4, lr}
   355aa:	1e04      	subs	r4, r0, #0
   355ac:	d028      	beq.n	35600 <__aeabi_ui2d+0x58>
   355ae:	f000 f833 	bl	35618 <__clzsi2>
   355b2:	4b15      	ldr	r3, [pc, #84]	; (35608 <__aeabi_ui2d+0x60>)
   355b4:	4a15      	ldr	r2, [pc, #84]	; (3560c <__aeabi_ui2d+0x64>)
   355b6:	1a1b      	subs	r3, r3, r0
   355b8:	1ad2      	subs	r2, r2, r3
   355ba:	2a1f      	cmp	r2, #31
   355bc:	dd15      	ble.n	355ea <__aeabi_ui2d+0x42>
   355be:	4a14      	ldr	r2, [pc, #80]	; (35610 <__aeabi_ui2d+0x68>)
   355c0:	1ad2      	subs	r2, r2, r3
   355c2:	4094      	lsls	r4, r2
   355c4:	2200      	movs	r2, #0
   355c6:	0324      	lsls	r4, r4, #12
   355c8:	055b      	lsls	r3, r3, #21
   355ca:	0b24      	lsrs	r4, r4, #12
   355cc:	0d5b      	lsrs	r3, r3, #21
   355ce:	2100      	movs	r1, #0
   355d0:	0010      	movs	r0, r2
   355d2:	0324      	lsls	r4, r4, #12
   355d4:	0d0a      	lsrs	r2, r1, #20
   355d6:	0b24      	lsrs	r4, r4, #12
   355d8:	0512      	lsls	r2, r2, #20
   355da:	4322      	orrs	r2, r4
   355dc:	4c0d      	ldr	r4, [pc, #52]	; (35614 <__aeabi_ui2d+0x6c>)
   355de:	051b      	lsls	r3, r3, #20
   355e0:	4022      	ands	r2, r4
   355e2:	4313      	orrs	r3, r2
   355e4:	005b      	lsls	r3, r3, #1
   355e6:	0859      	lsrs	r1, r3, #1
   355e8:	bd10      	pop	{r4, pc}
   355ea:	0021      	movs	r1, r4
   355ec:	4091      	lsls	r1, r2
   355ee:	000a      	movs	r2, r1
   355f0:	210b      	movs	r1, #11
   355f2:	1a08      	subs	r0, r1, r0
   355f4:	40c4      	lsrs	r4, r0
   355f6:	055b      	lsls	r3, r3, #21
   355f8:	0324      	lsls	r4, r4, #12
   355fa:	0b24      	lsrs	r4, r4, #12
   355fc:	0d5b      	lsrs	r3, r3, #21
   355fe:	e7e6      	b.n	355ce <__aeabi_ui2d+0x26>
   35600:	2300      	movs	r3, #0
   35602:	2400      	movs	r4, #0
   35604:	2200      	movs	r2, #0
   35606:	e7e2      	b.n	355ce <__aeabi_ui2d+0x26>
   35608:	0000041e 	.word	0x0000041e
   3560c:	00000433 	.word	0x00000433
   35610:	00000413 	.word	0x00000413
   35614:	800fffff 	.word	0x800fffff

00035618 <__clzsi2>:
   35618:	211c      	movs	r1, #28
   3561a:	2301      	movs	r3, #1
   3561c:	041b      	lsls	r3, r3, #16
   3561e:	4298      	cmp	r0, r3
   35620:	d301      	bcc.n	35626 <__clzsi2+0xe>
   35622:	0c00      	lsrs	r0, r0, #16
   35624:	3910      	subs	r1, #16
   35626:	0a1b      	lsrs	r3, r3, #8
   35628:	4298      	cmp	r0, r3
   3562a:	d301      	bcc.n	35630 <__clzsi2+0x18>
   3562c:	0a00      	lsrs	r0, r0, #8
   3562e:	3908      	subs	r1, #8
   35630:	091b      	lsrs	r3, r3, #4
   35632:	4298      	cmp	r0, r3
   35634:	d301      	bcc.n	3563a <__clzsi2+0x22>
   35636:	0900      	lsrs	r0, r0, #4
   35638:	3904      	subs	r1, #4
   3563a:	a202      	add	r2, pc, #8	; (adr r2, 35644 <__clzsi2+0x2c>)
   3563c:	5c10      	ldrb	r0, [r2, r0]
   3563e:	1840      	adds	r0, r0, r1
   35640:	4770      	bx	lr
   35642:	46c0      	nop			; (mov r8, r8)
   35644:	02020304 	.word	0x02020304
   35648:	01010101 	.word	0x01010101
	...

00035654 <atoi>:
   35654:	b510      	push	{r4, lr}
   35656:	220a      	movs	r2, #10
   35658:	2100      	movs	r1, #0
   3565a:	f000 fb0d 	bl	35c78 <strtol>
   3565e:	bd10      	pop	{r4, pc}

00035660 <__libc_init_array>:
   35660:	b570      	push	{r4, r5, r6, lr}
   35662:	2600      	movs	r6, #0
   35664:	4d0c      	ldr	r5, [pc, #48]	; (35698 <__libc_init_array+0x38>)
   35666:	4c0d      	ldr	r4, [pc, #52]	; (3569c <__libc_init_array+0x3c>)
   35668:	1b64      	subs	r4, r4, r5
   3566a:	10a4      	asrs	r4, r4, #2
   3566c:	42a6      	cmp	r6, r4
   3566e:	d109      	bne.n	35684 <__libc_init_array+0x24>
   35670:	2600      	movs	r6, #0
   35672:	f005 fd39 	bl	3b0e8 <_init>
   35676:	4d0a      	ldr	r5, [pc, #40]	; (356a0 <__libc_init_array+0x40>)
   35678:	4c0a      	ldr	r4, [pc, #40]	; (356a4 <__libc_init_array+0x44>)
   3567a:	1b64      	subs	r4, r4, r5
   3567c:	10a4      	asrs	r4, r4, #2
   3567e:	42a6      	cmp	r6, r4
   35680:	d105      	bne.n	3568e <__libc_init_array+0x2e>
   35682:	bd70      	pop	{r4, r5, r6, pc}
   35684:	00b3      	lsls	r3, r6, #2
   35686:	58eb      	ldr	r3, [r5, r3]
   35688:	4798      	blx	r3
   3568a:	3601      	adds	r6, #1
   3568c:	e7ee      	b.n	3566c <__libc_init_array+0xc>
   3568e:	00b3      	lsls	r3, r6, #2
   35690:	58eb      	ldr	r3, [r5, r3]
   35692:	4798      	blx	r3
   35694:	3601      	adds	r6, #1
   35696:	e7f2      	b.n	3567e <__libc_init_array+0x1e>
   35698:	0003b0f4 	.word	0x0003b0f4
   3569c:	0003b0f4 	.word	0x0003b0f4
   356a0:	0003b0f4 	.word	0x0003b0f4
   356a4:	0003b0f8 	.word	0x0003b0f8

000356a8 <malloc>:
   356a8:	b510      	push	{r4, lr}
   356aa:	4b03      	ldr	r3, [pc, #12]	; (356b8 <malloc+0x10>)
   356ac:	0001      	movs	r1, r0
   356ae:	6818      	ldr	r0, [r3, #0]
   356b0:	f000 f87c 	bl	357ac <_malloc_r>
   356b4:	bd10      	pop	{r4, pc}
   356b6:	46c0      	nop			; (mov r8, r8)
   356b8:	20000124 	.word	0x20000124

000356bc <free>:
   356bc:	b510      	push	{r4, lr}
   356be:	4b03      	ldr	r3, [pc, #12]	; (356cc <free+0x10>)
   356c0:	0001      	movs	r1, r0
   356c2:	6818      	ldr	r0, [r3, #0]
   356c4:	f000 f828 	bl	35718 <_free_r>
   356c8:	bd10      	pop	{r4, pc}
   356ca:	46c0      	nop			; (mov r8, r8)
   356cc:	20000124 	.word	0x20000124

000356d0 <memcpy>:
   356d0:	2300      	movs	r3, #0
   356d2:	b510      	push	{r4, lr}
   356d4:	429a      	cmp	r2, r3
   356d6:	d100      	bne.n	356da <memcpy+0xa>
   356d8:	bd10      	pop	{r4, pc}
   356da:	5ccc      	ldrb	r4, [r1, r3]
   356dc:	54c4      	strb	r4, [r0, r3]
   356de:	3301      	adds	r3, #1
   356e0:	e7f8      	b.n	356d4 <memcpy+0x4>

000356e2 <memmove>:
   356e2:	b510      	push	{r4, lr}
   356e4:	4288      	cmp	r0, r1
   356e6:	d902      	bls.n	356ee <memmove+0xc>
   356e8:	188b      	adds	r3, r1, r2
   356ea:	4298      	cmp	r0, r3
   356ec:	d308      	bcc.n	35700 <memmove+0x1e>
   356ee:	2300      	movs	r3, #0
   356f0:	429a      	cmp	r2, r3
   356f2:	d007      	beq.n	35704 <memmove+0x22>
   356f4:	5ccc      	ldrb	r4, [r1, r3]
   356f6:	54c4      	strb	r4, [r0, r3]
   356f8:	3301      	adds	r3, #1
   356fa:	e7f9      	b.n	356f0 <memmove+0xe>
   356fc:	5c8b      	ldrb	r3, [r1, r2]
   356fe:	5483      	strb	r3, [r0, r2]
   35700:	3a01      	subs	r2, #1
   35702:	d2fb      	bcs.n	356fc <memmove+0x1a>
   35704:	bd10      	pop	{r4, pc}

00035706 <memset>:
   35706:	0003      	movs	r3, r0
   35708:	1882      	adds	r2, r0, r2
   3570a:	4293      	cmp	r3, r2
   3570c:	d100      	bne.n	35710 <memset+0xa>
   3570e:	4770      	bx	lr
   35710:	7019      	strb	r1, [r3, #0]
   35712:	3301      	adds	r3, #1
   35714:	e7f9      	b.n	3570a <memset+0x4>
	...

00035718 <_free_r>:
   35718:	b570      	push	{r4, r5, r6, lr}
   3571a:	0005      	movs	r5, r0
   3571c:	2900      	cmp	r1, #0
   3571e:	d010      	beq.n	35742 <_free_r+0x2a>
   35720:	1f0c      	subs	r4, r1, #4
   35722:	6823      	ldr	r3, [r4, #0]
   35724:	2b00      	cmp	r3, #0
   35726:	da00      	bge.n	3572a <_free_r+0x12>
   35728:	18e4      	adds	r4, r4, r3
   3572a:	0028      	movs	r0, r5
   3572c:	f000 fdd8 	bl	362e0 <__malloc_lock>
   35730:	4a1d      	ldr	r2, [pc, #116]	; (357a8 <_free_r+0x90>)
   35732:	6813      	ldr	r3, [r2, #0]
   35734:	2b00      	cmp	r3, #0
   35736:	d105      	bne.n	35744 <_free_r+0x2c>
   35738:	6063      	str	r3, [r4, #4]
   3573a:	6014      	str	r4, [r2, #0]
   3573c:	0028      	movs	r0, r5
   3573e:	f000 fdd0 	bl	362e2 <__malloc_unlock>
   35742:	bd70      	pop	{r4, r5, r6, pc}
   35744:	42a3      	cmp	r3, r4
   35746:	d909      	bls.n	3575c <_free_r+0x44>
   35748:	6821      	ldr	r1, [r4, #0]
   3574a:	1860      	adds	r0, r4, r1
   3574c:	4283      	cmp	r3, r0
   3574e:	d1f3      	bne.n	35738 <_free_r+0x20>
   35750:	6818      	ldr	r0, [r3, #0]
   35752:	685b      	ldr	r3, [r3, #4]
   35754:	1841      	adds	r1, r0, r1
   35756:	6021      	str	r1, [r4, #0]
   35758:	e7ee      	b.n	35738 <_free_r+0x20>
   3575a:	0013      	movs	r3, r2
   3575c:	685a      	ldr	r2, [r3, #4]
   3575e:	2a00      	cmp	r2, #0
   35760:	d001      	beq.n	35766 <_free_r+0x4e>
   35762:	42a2      	cmp	r2, r4
   35764:	d9f9      	bls.n	3575a <_free_r+0x42>
   35766:	6819      	ldr	r1, [r3, #0]
   35768:	1858      	adds	r0, r3, r1
   3576a:	42a0      	cmp	r0, r4
   3576c:	d10b      	bne.n	35786 <_free_r+0x6e>
   3576e:	6820      	ldr	r0, [r4, #0]
   35770:	1809      	adds	r1, r1, r0
   35772:	1858      	adds	r0, r3, r1
   35774:	6019      	str	r1, [r3, #0]
   35776:	4282      	cmp	r2, r0
   35778:	d1e0      	bne.n	3573c <_free_r+0x24>
   3577a:	6810      	ldr	r0, [r2, #0]
   3577c:	6852      	ldr	r2, [r2, #4]
   3577e:	1841      	adds	r1, r0, r1
   35780:	6019      	str	r1, [r3, #0]
   35782:	605a      	str	r2, [r3, #4]
   35784:	e7da      	b.n	3573c <_free_r+0x24>
   35786:	42a0      	cmp	r0, r4
   35788:	d902      	bls.n	35790 <_free_r+0x78>
   3578a:	230c      	movs	r3, #12
   3578c:	602b      	str	r3, [r5, #0]
   3578e:	e7d5      	b.n	3573c <_free_r+0x24>
   35790:	6821      	ldr	r1, [r4, #0]
   35792:	1860      	adds	r0, r4, r1
   35794:	4282      	cmp	r2, r0
   35796:	d103      	bne.n	357a0 <_free_r+0x88>
   35798:	6810      	ldr	r0, [r2, #0]
   3579a:	6852      	ldr	r2, [r2, #4]
   3579c:	1841      	adds	r1, r0, r1
   3579e:	6021      	str	r1, [r4, #0]
   357a0:	6062      	str	r2, [r4, #4]
   357a2:	605c      	str	r4, [r3, #4]
   357a4:	e7ca      	b.n	3573c <_free_r+0x24>
   357a6:	46c0      	nop			; (mov r8, r8)
   357a8:	20004364 	.word	0x20004364

000357ac <_malloc_r>:
   357ac:	2303      	movs	r3, #3
   357ae:	b570      	push	{r4, r5, r6, lr}
   357b0:	1ccd      	adds	r5, r1, #3
   357b2:	439d      	bics	r5, r3
   357b4:	3508      	adds	r5, #8
   357b6:	0006      	movs	r6, r0
   357b8:	2d0c      	cmp	r5, #12
   357ba:	d21e      	bcs.n	357fa <_malloc_r+0x4e>
   357bc:	250c      	movs	r5, #12
   357be:	42a9      	cmp	r1, r5
   357c0:	d81d      	bhi.n	357fe <_malloc_r+0x52>
   357c2:	0030      	movs	r0, r6
   357c4:	f000 fd8c 	bl	362e0 <__malloc_lock>
   357c8:	4a25      	ldr	r2, [pc, #148]	; (35860 <_malloc_r+0xb4>)
   357ca:	6814      	ldr	r4, [r2, #0]
   357cc:	0021      	movs	r1, r4
   357ce:	2900      	cmp	r1, #0
   357d0:	d119      	bne.n	35806 <_malloc_r+0x5a>
   357d2:	4c24      	ldr	r4, [pc, #144]	; (35864 <_malloc_r+0xb8>)
   357d4:	6823      	ldr	r3, [r4, #0]
   357d6:	2b00      	cmp	r3, #0
   357d8:	d103      	bne.n	357e2 <_malloc_r+0x36>
   357da:	0030      	movs	r0, r6
   357dc:	f000 f8ae 	bl	3593c <_sbrk_r>
   357e0:	6020      	str	r0, [r4, #0]
   357e2:	0029      	movs	r1, r5
   357e4:	0030      	movs	r0, r6
   357e6:	f000 f8a9 	bl	3593c <_sbrk_r>
   357ea:	1c43      	adds	r3, r0, #1
   357ec:	d12c      	bne.n	35848 <_malloc_r+0x9c>
   357ee:	230c      	movs	r3, #12
   357f0:	0030      	movs	r0, r6
   357f2:	6033      	str	r3, [r6, #0]
   357f4:	f000 fd75 	bl	362e2 <__malloc_unlock>
   357f8:	e003      	b.n	35802 <_malloc_r+0x56>
   357fa:	2d00      	cmp	r5, #0
   357fc:	dadf      	bge.n	357be <_malloc_r+0x12>
   357fe:	230c      	movs	r3, #12
   35800:	6033      	str	r3, [r6, #0]
   35802:	2000      	movs	r0, #0
   35804:	bd70      	pop	{r4, r5, r6, pc}
   35806:	680b      	ldr	r3, [r1, #0]
   35808:	1b5b      	subs	r3, r3, r5
   3580a:	d41a      	bmi.n	35842 <_malloc_r+0x96>
   3580c:	2b0b      	cmp	r3, #11
   3580e:	d903      	bls.n	35818 <_malloc_r+0x6c>
   35810:	600b      	str	r3, [r1, #0]
   35812:	18cc      	adds	r4, r1, r3
   35814:	6025      	str	r5, [r4, #0]
   35816:	e003      	b.n	35820 <_malloc_r+0x74>
   35818:	428c      	cmp	r4, r1
   3581a:	d10e      	bne.n	3583a <_malloc_r+0x8e>
   3581c:	6863      	ldr	r3, [r4, #4]
   3581e:	6013      	str	r3, [r2, #0]
   35820:	0030      	movs	r0, r6
   35822:	f000 fd5e 	bl	362e2 <__malloc_unlock>
   35826:	0020      	movs	r0, r4
   35828:	2207      	movs	r2, #7
   3582a:	300b      	adds	r0, #11
   3582c:	1d23      	adds	r3, r4, #4
   3582e:	4390      	bics	r0, r2
   35830:	1ac3      	subs	r3, r0, r3
   35832:	d0e7      	beq.n	35804 <_malloc_r+0x58>
   35834:	425a      	negs	r2, r3
   35836:	50e2      	str	r2, [r4, r3]
   35838:	e7e4      	b.n	35804 <_malloc_r+0x58>
   3583a:	684b      	ldr	r3, [r1, #4]
   3583c:	6063      	str	r3, [r4, #4]
   3583e:	000c      	movs	r4, r1
   35840:	e7ee      	b.n	35820 <_malloc_r+0x74>
   35842:	000c      	movs	r4, r1
   35844:	6849      	ldr	r1, [r1, #4]
   35846:	e7c2      	b.n	357ce <_malloc_r+0x22>
   35848:	2303      	movs	r3, #3
   3584a:	1cc4      	adds	r4, r0, #3
   3584c:	439c      	bics	r4, r3
   3584e:	42a0      	cmp	r0, r4
   35850:	d0e0      	beq.n	35814 <_malloc_r+0x68>
   35852:	1a21      	subs	r1, r4, r0
   35854:	0030      	movs	r0, r6
   35856:	f000 f871 	bl	3593c <_sbrk_r>
   3585a:	1c43      	adds	r3, r0, #1
   3585c:	d1da      	bne.n	35814 <_malloc_r+0x68>
   3585e:	e7c6      	b.n	357ee <_malloc_r+0x42>
   35860:	20004364 	.word	0x20004364
   35864:	20004368 	.word	0x20004368

00035868 <_puts_r>:
   35868:	b570      	push	{r4, r5, r6, lr}
   3586a:	0005      	movs	r5, r0
   3586c:	000e      	movs	r6, r1
   3586e:	2800      	cmp	r0, #0
   35870:	d004      	beq.n	3587c <_puts_r+0x14>
   35872:	6983      	ldr	r3, [r0, #24]
   35874:	2b00      	cmp	r3, #0
   35876:	d101      	bne.n	3587c <_puts_r+0x14>
   35878:	f000 fc0e 	bl	36098 <__sinit>
   3587c:	69ab      	ldr	r3, [r5, #24]
   3587e:	68ac      	ldr	r4, [r5, #8]
   35880:	2b00      	cmp	r3, #0
   35882:	d102      	bne.n	3588a <_puts_r+0x22>
   35884:	0028      	movs	r0, r5
   35886:	f000 fc07 	bl	36098 <__sinit>
   3588a:	4b24      	ldr	r3, [pc, #144]	; (3591c <_puts_r+0xb4>)
   3588c:	429c      	cmp	r4, r3
   3588e:	d10f      	bne.n	358b0 <_puts_r+0x48>
   35890:	686c      	ldr	r4, [r5, #4]
   35892:	89a3      	ldrh	r3, [r4, #12]
   35894:	071b      	lsls	r3, r3, #28
   35896:	d502      	bpl.n	3589e <_puts_r+0x36>
   35898:	6923      	ldr	r3, [r4, #16]
   3589a:	2b00      	cmp	r3, #0
   3589c:	d120      	bne.n	358e0 <_puts_r+0x78>
   3589e:	0021      	movs	r1, r4
   358a0:	0028      	movs	r0, r5
   358a2:	f000 fa8b 	bl	35dbc <__swsetup_r>
   358a6:	2800      	cmp	r0, #0
   358a8:	d01a      	beq.n	358e0 <_puts_r+0x78>
   358aa:	2001      	movs	r0, #1
   358ac:	4240      	negs	r0, r0
   358ae:	bd70      	pop	{r4, r5, r6, pc}
   358b0:	4b1b      	ldr	r3, [pc, #108]	; (35920 <_puts_r+0xb8>)
   358b2:	429c      	cmp	r4, r3
   358b4:	d101      	bne.n	358ba <_puts_r+0x52>
   358b6:	68ac      	ldr	r4, [r5, #8]
   358b8:	e7eb      	b.n	35892 <_puts_r+0x2a>
   358ba:	4b1a      	ldr	r3, [pc, #104]	; (35924 <_puts_r+0xbc>)
   358bc:	429c      	cmp	r4, r3
   358be:	d1e8      	bne.n	35892 <_puts_r+0x2a>
   358c0:	68ec      	ldr	r4, [r5, #12]
   358c2:	e7e6      	b.n	35892 <_puts_r+0x2a>
   358c4:	3b01      	subs	r3, #1
   358c6:	3601      	adds	r6, #1
   358c8:	60a3      	str	r3, [r4, #8]
   358ca:	2b00      	cmp	r3, #0
   358cc:	da04      	bge.n	358d8 <_puts_r+0x70>
   358ce:	69a2      	ldr	r2, [r4, #24]
   358d0:	4293      	cmp	r3, r2
   358d2:	db16      	blt.n	35902 <_puts_r+0x9a>
   358d4:	290a      	cmp	r1, #10
   358d6:	d014      	beq.n	35902 <_puts_r+0x9a>
   358d8:	6823      	ldr	r3, [r4, #0]
   358da:	1c5a      	adds	r2, r3, #1
   358dc:	6022      	str	r2, [r4, #0]
   358de:	7019      	strb	r1, [r3, #0]
   358e0:	7831      	ldrb	r1, [r6, #0]
   358e2:	68a3      	ldr	r3, [r4, #8]
   358e4:	2900      	cmp	r1, #0
   358e6:	d1ed      	bne.n	358c4 <_puts_r+0x5c>
   358e8:	3b01      	subs	r3, #1
   358ea:	60a3      	str	r3, [r4, #8]
   358ec:	2b00      	cmp	r3, #0
   358ee:	da0f      	bge.n	35910 <_puts_r+0xa8>
   358f0:	0022      	movs	r2, r4
   358f2:	310a      	adds	r1, #10
   358f4:	0028      	movs	r0, r5
   358f6:	f000 fa0b 	bl	35d10 <__swbuf_r>
   358fa:	1c43      	adds	r3, r0, #1
   358fc:	d0d5      	beq.n	358aa <_puts_r+0x42>
   358fe:	200a      	movs	r0, #10
   35900:	e7d5      	b.n	358ae <_puts_r+0x46>
   35902:	0022      	movs	r2, r4
   35904:	0028      	movs	r0, r5
   35906:	f000 fa03 	bl	35d10 <__swbuf_r>
   3590a:	1c43      	adds	r3, r0, #1
   3590c:	d1e8      	bne.n	358e0 <_puts_r+0x78>
   3590e:	e7cc      	b.n	358aa <_puts_r+0x42>
   35910:	200a      	movs	r0, #10
   35912:	6823      	ldr	r3, [r4, #0]
   35914:	1c5a      	adds	r2, r3, #1
   35916:	6022      	str	r2, [r4, #0]
   35918:	7018      	strb	r0, [r3, #0]
   3591a:	e7c8      	b.n	358ae <_puts_r+0x46>
   3591c:	0003af68 	.word	0x0003af68
   35920:	0003af88 	.word	0x0003af88
   35924:	0003af48 	.word	0x0003af48

00035928 <puts>:
   35928:	b510      	push	{r4, lr}
   3592a:	4b03      	ldr	r3, [pc, #12]	; (35938 <puts+0x10>)
   3592c:	0001      	movs	r1, r0
   3592e:	6818      	ldr	r0, [r3, #0]
   35930:	f7ff ff9a 	bl	35868 <_puts_r>
   35934:	bd10      	pop	{r4, pc}
   35936:	46c0      	nop			; (mov r8, r8)
   35938:	20000124 	.word	0x20000124

0003593c <_sbrk_r>:
   3593c:	2300      	movs	r3, #0
   3593e:	b570      	push	{r4, r5, r6, lr}
   35940:	4c06      	ldr	r4, [pc, #24]	; (3595c <_sbrk_r+0x20>)
   35942:	0005      	movs	r5, r0
   35944:	0008      	movs	r0, r1
   35946:	6023      	str	r3, [r4, #0]
   35948:	f7f6 fa88 	bl	2be5c <_sbrk>
   3594c:	1c43      	adds	r3, r0, #1
   3594e:	d103      	bne.n	35958 <_sbrk_r+0x1c>
   35950:	6823      	ldr	r3, [r4, #0]
   35952:	2b00      	cmp	r3, #0
   35954:	d000      	beq.n	35958 <_sbrk_r+0x1c>
   35956:	602b      	str	r3, [r5, #0]
   35958:	bd70      	pop	{r4, r5, r6, pc}
   3595a:	46c0      	nop			; (mov r8, r8)
   3595c:	200058d0 	.word	0x200058d0

00035960 <sniprintf>:
   35960:	b40c      	push	{r2, r3}
   35962:	b530      	push	{r4, r5, lr}
   35964:	4b16      	ldr	r3, [pc, #88]	; (359c0 <sniprintf+0x60>)
   35966:	b09d      	sub	sp, #116	; 0x74
   35968:	1e0c      	subs	r4, r1, #0
   3596a:	681d      	ldr	r5, [r3, #0]
   3596c:	da08      	bge.n	35980 <sniprintf+0x20>
   3596e:	238b      	movs	r3, #139	; 0x8b
   35970:	2001      	movs	r0, #1
   35972:	602b      	str	r3, [r5, #0]
   35974:	4240      	negs	r0, r0
   35976:	b01d      	add	sp, #116	; 0x74
   35978:	bc30      	pop	{r4, r5}
   3597a:	bc08      	pop	{r3}
   3597c:	b002      	add	sp, #8
   3597e:	4718      	bx	r3
   35980:	2382      	movs	r3, #130	; 0x82
   35982:	a902      	add	r1, sp, #8
   35984:	009b      	lsls	r3, r3, #2
   35986:	818b      	strh	r3, [r1, #12]
   35988:	2300      	movs	r3, #0
   3598a:	9002      	str	r0, [sp, #8]
   3598c:	6108      	str	r0, [r1, #16]
   3598e:	429c      	cmp	r4, r3
   35990:	d000      	beq.n	35994 <sniprintf+0x34>
   35992:	1e63      	subs	r3, r4, #1
   35994:	608b      	str	r3, [r1, #8]
   35996:	614b      	str	r3, [r1, #20]
   35998:	2301      	movs	r3, #1
   3599a:	425b      	negs	r3, r3
   3599c:	81cb      	strh	r3, [r1, #14]
   3599e:	9a20      	ldr	r2, [sp, #128]	; 0x80
   359a0:	ab21      	add	r3, sp, #132	; 0x84
   359a2:	0028      	movs	r0, r5
   359a4:	9301      	str	r3, [sp, #4]
   359a6:	f000 fcff 	bl	363a8 <_svfiprintf_r>
   359aa:	1c43      	adds	r3, r0, #1
   359ac:	da01      	bge.n	359b2 <sniprintf+0x52>
   359ae:	238b      	movs	r3, #139	; 0x8b
   359b0:	602b      	str	r3, [r5, #0]
   359b2:	2c00      	cmp	r4, #0
   359b4:	d0df      	beq.n	35976 <sniprintf+0x16>
   359b6:	2300      	movs	r3, #0
   359b8:	9a02      	ldr	r2, [sp, #8]
   359ba:	7013      	strb	r3, [r2, #0]
   359bc:	e7db      	b.n	35976 <sniprintf+0x16>
   359be:	46c0      	nop			; (mov r8, r8)
   359c0:	20000124 	.word	0x20000124

000359c4 <siprintf>:
   359c4:	b40e      	push	{r1, r2, r3}
   359c6:	b510      	push	{r4, lr}
   359c8:	b09d      	sub	sp, #116	; 0x74
   359ca:	a902      	add	r1, sp, #8
   359cc:	9002      	str	r0, [sp, #8]
   359ce:	6108      	str	r0, [r1, #16]
   359d0:	480b      	ldr	r0, [pc, #44]	; (35a00 <siprintf+0x3c>)
   359d2:	2482      	movs	r4, #130	; 0x82
   359d4:	6088      	str	r0, [r1, #8]
   359d6:	6148      	str	r0, [r1, #20]
   359d8:	2001      	movs	r0, #1
   359da:	4240      	negs	r0, r0
   359dc:	ab1f      	add	r3, sp, #124	; 0x7c
   359de:	81c8      	strh	r0, [r1, #14]
   359e0:	4808      	ldr	r0, [pc, #32]	; (35a04 <siprintf+0x40>)
   359e2:	cb04      	ldmia	r3!, {r2}
   359e4:	00a4      	lsls	r4, r4, #2
   359e6:	6800      	ldr	r0, [r0, #0]
   359e8:	9301      	str	r3, [sp, #4]
   359ea:	818c      	strh	r4, [r1, #12]
   359ec:	f000 fcdc 	bl	363a8 <_svfiprintf_r>
   359f0:	2300      	movs	r3, #0
   359f2:	9a02      	ldr	r2, [sp, #8]
   359f4:	7013      	strb	r3, [r2, #0]
   359f6:	b01d      	add	sp, #116	; 0x74
   359f8:	bc10      	pop	{r4}
   359fa:	bc08      	pop	{r3}
   359fc:	b003      	add	sp, #12
   359fe:	4718      	bx	r3
   35a00:	7fffffff 	.word	0x7fffffff
   35a04:	20000124 	.word	0x20000124

00035a08 <strcasecmp>:
   35a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35a0a:	0007      	movs	r7, r0
   35a0c:	000e      	movs	r6, r1
   35a0e:	783c      	ldrb	r4, [r7, #0]
   35a10:	f000 fbda 	bl	361c8 <__locale_ctype_ptr>
   35a14:	2203      	movs	r2, #3
   35a16:	1900      	adds	r0, r0, r4
   35a18:	7843      	ldrb	r3, [r0, #1]
   35a1a:	4013      	ands	r3, r2
   35a1c:	2b01      	cmp	r3, #1
   35a1e:	d100      	bne.n	35a22 <strcasecmp+0x1a>
   35a20:	3420      	adds	r4, #32
   35a22:	7835      	ldrb	r5, [r6, #0]
   35a24:	f000 fbd0 	bl	361c8 <__locale_ctype_ptr>
   35a28:	2203      	movs	r2, #3
   35a2a:	1940      	adds	r0, r0, r5
   35a2c:	7843      	ldrb	r3, [r0, #1]
   35a2e:	4013      	ands	r3, r2
   35a30:	2b01      	cmp	r3, #1
   35a32:	d100      	bne.n	35a36 <strcasecmp+0x2e>
   35a34:	3520      	adds	r5, #32
   35a36:	1b60      	subs	r0, r4, r5
   35a38:	d103      	bne.n	35a42 <strcasecmp+0x3a>
   35a3a:	3701      	adds	r7, #1
   35a3c:	3601      	adds	r6, #1
   35a3e:	2d00      	cmp	r5, #0
   35a40:	d1e5      	bne.n	35a0e <strcasecmp+0x6>
   35a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00035a44 <strcat>:
   35a44:	0002      	movs	r2, r0
   35a46:	b510      	push	{r4, lr}
   35a48:	7813      	ldrb	r3, [r2, #0]
   35a4a:	2b00      	cmp	r3, #0
   35a4c:	d105      	bne.n	35a5a <strcat+0x16>
   35a4e:	5ccc      	ldrb	r4, [r1, r3]
   35a50:	54d4      	strb	r4, [r2, r3]
   35a52:	3301      	adds	r3, #1
   35a54:	2c00      	cmp	r4, #0
   35a56:	d1fa      	bne.n	35a4e <strcat+0xa>
   35a58:	bd10      	pop	{r4, pc}
   35a5a:	3201      	adds	r2, #1
   35a5c:	e7f4      	b.n	35a48 <strcat+0x4>

00035a5e <strcmp>:
   35a5e:	7802      	ldrb	r2, [r0, #0]
   35a60:	780b      	ldrb	r3, [r1, #0]
   35a62:	2a00      	cmp	r2, #0
   35a64:	d003      	beq.n	35a6e <strcmp+0x10>
   35a66:	3001      	adds	r0, #1
   35a68:	3101      	adds	r1, #1
   35a6a:	429a      	cmp	r2, r3
   35a6c:	d0f7      	beq.n	35a5e <strcmp>
   35a6e:	1ad0      	subs	r0, r2, r3
   35a70:	4770      	bx	lr

00035a72 <strcpy>:
   35a72:	1c03      	adds	r3, r0, #0
   35a74:	780a      	ldrb	r2, [r1, #0]
   35a76:	3101      	adds	r1, #1
   35a78:	701a      	strb	r2, [r3, #0]
   35a7a:	3301      	adds	r3, #1
   35a7c:	2a00      	cmp	r2, #0
   35a7e:	d1f9      	bne.n	35a74 <strcpy+0x2>
   35a80:	4770      	bx	lr
	...

00035a84 <strdup>:
   35a84:	b510      	push	{r4, lr}
   35a86:	4b03      	ldr	r3, [pc, #12]	; (35a94 <strdup+0x10>)
   35a88:	0001      	movs	r1, r0
   35a8a:	6818      	ldr	r0, [r3, #0]
   35a8c:	f000 f804 	bl	35a98 <_strdup_r>
   35a90:	bd10      	pop	{r4, pc}
   35a92:	46c0      	nop			; (mov r8, r8)
   35a94:	20000124 	.word	0x20000124

00035a98 <_strdup_r>:
   35a98:	b570      	push	{r4, r5, r6, lr}
   35a9a:	0005      	movs	r5, r0
   35a9c:	0008      	movs	r0, r1
   35a9e:	000e      	movs	r6, r1
   35aa0:	f000 f80d 	bl	35abe <strlen>
   35aa4:	1c44      	adds	r4, r0, #1
   35aa6:	0021      	movs	r1, r4
   35aa8:	0028      	movs	r0, r5
   35aaa:	f7ff fe7f 	bl	357ac <_malloc_r>
   35aae:	1e05      	subs	r5, r0, #0
   35ab0:	d003      	beq.n	35aba <_strdup_r+0x22>
   35ab2:	0022      	movs	r2, r4
   35ab4:	0031      	movs	r1, r6
   35ab6:	f7ff fe0b 	bl	356d0 <memcpy>
   35aba:	0028      	movs	r0, r5
   35abc:	bd70      	pop	{r4, r5, r6, pc}

00035abe <strlen>:
   35abe:	2300      	movs	r3, #0
   35ac0:	5cc2      	ldrb	r2, [r0, r3]
   35ac2:	3301      	adds	r3, #1
   35ac4:	2a00      	cmp	r2, #0
   35ac6:	d1fb      	bne.n	35ac0 <strlen+0x2>
   35ac8:	1e58      	subs	r0, r3, #1
   35aca:	4770      	bx	lr

00035acc <strncmp>:
   35acc:	2300      	movs	r3, #0
   35ace:	b530      	push	{r4, r5, lr}
   35ad0:	429a      	cmp	r2, r3
   35ad2:	d00a      	beq.n	35aea <strncmp+0x1e>
   35ad4:	3a01      	subs	r2, #1
   35ad6:	5cc4      	ldrb	r4, [r0, r3]
   35ad8:	5ccd      	ldrb	r5, [r1, r3]
   35ada:	42ac      	cmp	r4, r5
   35adc:	d104      	bne.n	35ae8 <strncmp+0x1c>
   35ade:	429a      	cmp	r2, r3
   35ae0:	d002      	beq.n	35ae8 <strncmp+0x1c>
   35ae2:	3301      	adds	r3, #1
   35ae4:	2c00      	cmp	r4, #0
   35ae6:	d1f6      	bne.n	35ad6 <strncmp+0xa>
   35ae8:	1b63      	subs	r3, r4, r5
   35aea:	0018      	movs	r0, r3
   35aec:	bd30      	pop	{r4, r5, pc}

00035aee <strncpy>:
   35aee:	b570      	push	{r4, r5, r6, lr}
   35af0:	0004      	movs	r4, r0
   35af2:	2a00      	cmp	r2, #0
   35af4:	d100      	bne.n	35af8 <strncpy+0xa>
   35af6:	bd70      	pop	{r4, r5, r6, pc}
   35af8:	780d      	ldrb	r5, [r1, #0]
   35afa:	1e56      	subs	r6, r2, #1
   35afc:	1c63      	adds	r3, r4, #1
   35afe:	7025      	strb	r5, [r4, #0]
   35b00:	3101      	adds	r1, #1
   35b02:	2d00      	cmp	r5, #0
   35b04:	d105      	bne.n	35b12 <strncpy+0x24>
   35b06:	18a4      	adds	r4, r4, r2
   35b08:	429c      	cmp	r4, r3
   35b0a:	d0f4      	beq.n	35af6 <strncpy+0x8>
   35b0c:	701d      	strb	r5, [r3, #0]
   35b0e:	3301      	adds	r3, #1
   35b10:	e7fa      	b.n	35b08 <strncpy+0x1a>
   35b12:	001c      	movs	r4, r3
   35b14:	0032      	movs	r2, r6
   35b16:	e7ec      	b.n	35af2 <strncpy+0x4>

00035b18 <strrchr>:
   35b18:	b570      	push	{r4, r5, r6, lr}
   35b1a:	000d      	movs	r5, r1
   35b1c:	2400      	movs	r4, #0
   35b1e:	2900      	cmp	r1, #0
   35b20:	d105      	bne.n	35b2e <strrchr+0x16>
   35b22:	f000 ff19 	bl	36958 <strchr>
   35b26:	0004      	movs	r4, r0
   35b28:	e006      	b.n	35b38 <strrchr+0x20>
   35b2a:	001c      	movs	r4, r3
   35b2c:	1c58      	adds	r0, r3, #1
   35b2e:	0029      	movs	r1, r5
   35b30:	f000 ff12 	bl	36958 <strchr>
   35b34:	1e03      	subs	r3, r0, #0
   35b36:	d1f8      	bne.n	35b2a <strrchr+0x12>
   35b38:	0020      	movs	r0, r4
   35b3a:	bd70      	pop	{r4, r5, r6, pc}

00035b3c <strstr>:
   35b3c:	b510      	push	{r4, lr}
   35b3e:	0002      	movs	r2, r0
   35b40:	7800      	ldrb	r0, [r0, #0]
   35b42:	2800      	cmp	r0, #0
   35b44:	d104      	bne.n	35b50 <strstr+0x14>
   35b46:	7809      	ldrb	r1, [r1, #0]
   35b48:	2900      	cmp	r1, #0
   35b4a:	d00d      	beq.n	35b68 <strstr+0x2c>
   35b4c:	bd10      	pop	{r4, pc}
   35b4e:	3201      	adds	r2, #1
   35b50:	7810      	ldrb	r0, [r2, #0]
   35b52:	2800      	cmp	r0, #0
   35b54:	d0fa      	beq.n	35b4c <strstr+0x10>
   35b56:	2300      	movs	r3, #0
   35b58:	5cc8      	ldrb	r0, [r1, r3]
   35b5a:	2800      	cmp	r0, #0
   35b5c:	d004      	beq.n	35b68 <strstr+0x2c>
   35b5e:	5cd4      	ldrb	r4, [r2, r3]
   35b60:	4284      	cmp	r4, r0
   35b62:	d1f4      	bne.n	35b4e <strstr+0x12>
   35b64:	3301      	adds	r3, #1
   35b66:	e7f7      	b.n	35b58 <strstr+0x1c>
   35b68:	0010      	movs	r0, r2
   35b6a:	e7ef      	b.n	35b4c <strstr+0x10>

00035b6c <_strtol_l.isra.0>:
   35b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   35b6e:	001f      	movs	r7, r3
   35b70:	000e      	movs	r6, r1
   35b72:	b087      	sub	sp, #28
   35b74:	9005      	str	r0, [sp, #20]
   35b76:	9103      	str	r1, [sp, #12]
   35b78:	9202      	str	r2, [sp, #8]
   35b7a:	980c      	ldr	r0, [sp, #48]	; 0x30
   35b7c:	7834      	ldrb	r4, [r6, #0]
   35b7e:	f000 fb20 	bl	361c2 <__locale_ctype_ptr_l>
   35b82:	2208      	movs	r2, #8
   35b84:	1900      	adds	r0, r0, r4
   35b86:	7843      	ldrb	r3, [r0, #1]
   35b88:	1c75      	adds	r5, r6, #1
   35b8a:	4013      	ands	r3, r2
   35b8c:	d10c      	bne.n	35ba8 <_strtol_l.isra.0+0x3c>
   35b8e:	2c2d      	cmp	r4, #45	; 0x2d
   35b90:	d10c      	bne.n	35bac <_strtol_l.isra.0+0x40>
   35b92:	3301      	adds	r3, #1
   35b94:	782c      	ldrb	r4, [r5, #0]
   35b96:	9301      	str	r3, [sp, #4]
   35b98:	1cb5      	adds	r5, r6, #2
   35b9a:	2f00      	cmp	r7, #0
   35b9c:	d00c      	beq.n	35bb8 <_strtol_l.isra.0+0x4c>
   35b9e:	2f10      	cmp	r7, #16
   35ba0:	d114      	bne.n	35bcc <_strtol_l.isra.0+0x60>
   35ba2:	2c30      	cmp	r4, #48	; 0x30
   35ba4:	d00a      	beq.n	35bbc <_strtol_l.isra.0+0x50>
   35ba6:	e011      	b.n	35bcc <_strtol_l.isra.0+0x60>
   35ba8:	002e      	movs	r6, r5
   35baa:	e7e6      	b.n	35b7a <_strtol_l.isra.0+0xe>
   35bac:	9301      	str	r3, [sp, #4]
   35bae:	2c2b      	cmp	r4, #43	; 0x2b
   35bb0:	d1f3      	bne.n	35b9a <_strtol_l.isra.0+0x2e>
   35bb2:	782c      	ldrb	r4, [r5, #0]
   35bb4:	1cb5      	adds	r5, r6, #2
   35bb6:	e7f0      	b.n	35b9a <_strtol_l.isra.0+0x2e>
   35bb8:	2c30      	cmp	r4, #48	; 0x30
   35bba:	d12f      	bne.n	35c1c <_strtol_l.isra.0+0xb0>
   35bbc:	2220      	movs	r2, #32
   35bbe:	782b      	ldrb	r3, [r5, #0]
   35bc0:	4393      	bics	r3, r2
   35bc2:	2b58      	cmp	r3, #88	; 0x58
   35bc4:	d151      	bne.n	35c6a <_strtol_l.isra.0+0xfe>
   35bc6:	2710      	movs	r7, #16
   35bc8:	786c      	ldrb	r4, [r5, #1]
   35bca:	3502      	adds	r5, #2
   35bcc:	9b01      	ldr	r3, [sp, #4]
   35bce:	4a29      	ldr	r2, [pc, #164]	; (35c74 <_strtol_l.isra.0+0x108>)
   35bd0:	0039      	movs	r1, r7
   35bd2:	189e      	adds	r6, r3, r2
   35bd4:	0030      	movs	r0, r6
   35bd6:	f7fd fe2f 	bl	33838 <__aeabi_uidivmod>
   35bda:	0030      	movs	r0, r6
   35bdc:	9104      	str	r1, [sp, #16]
   35bde:	0039      	movs	r1, r7
   35be0:	f7fd fda4 	bl	3372c <__udivsi3>
   35be4:	2101      	movs	r1, #1
   35be6:	2300      	movs	r3, #0
   35be8:	4249      	negs	r1, r1
   35bea:	0002      	movs	r2, r0
   35bec:	468c      	mov	ip, r1
   35bee:	0018      	movs	r0, r3
   35bf0:	0021      	movs	r1, r4
   35bf2:	3930      	subs	r1, #48	; 0x30
   35bf4:	2909      	cmp	r1, #9
   35bf6:	d813      	bhi.n	35c20 <_strtol_l.isra.0+0xb4>
   35bf8:	000c      	movs	r4, r1
   35bfa:	42a7      	cmp	r7, r4
   35bfc:	dd1c      	ble.n	35c38 <_strtol_l.isra.0+0xcc>
   35bfe:	1c59      	adds	r1, r3, #1
   35c00:	d009      	beq.n	35c16 <_strtol_l.isra.0+0xaa>
   35c02:	4663      	mov	r3, ip
   35c04:	4282      	cmp	r2, r0
   35c06:	d306      	bcc.n	35c16 <_strtol_l.isra.0+0xaa>
   35c08:	d102      	bne.n	35c10 <_strtol_l.isra.0+0xa4>
   35c0a:	9904      	ldr	r1, [sp, #16]
   35c0c:	42a1      	cmp	r1, r4
   35c0e:	db02      	blt.n	35c16 <_strtol_l.isra.0+0xaa>
   35c10:	2301      	movs	r3, #1
   35c12:	4378      	muls	r0, r7
   35c14:	1820      	adds	r0, r4, r0
   35c16:	782c      	ldrb	r4, [r5, #0]
   35c18:	3501      	adds	r5, #1
   35c1a:	e7e9      	b.n	35bf0 <_strtol_l.isra.0+0x84>
   35c1c:	270a      	movs	r7, #10
   35c1e:	e7d5      	b.n	35bcc <_strtol_l.isra.0+0x60>
   35c20:	0021      	movs	r1, r4
   35c22:	3941      	subs	r1, #65	; 0x41
   35c24:	2919      	cmp	r1, #25
   35c26:	d801      	bhi.n	35c2c <_strtol_l.isra.0+0xc0>
   35c28:	3c37      	subs	r4, #55	; 0x37
   35c2a:	e7e6      	b.n	35bfa <_strtol_l.isra.0+0x8e>
   35c2c:	0021      	movs	r1, r4
   35c2e:	3961      	subs	r1, #97	; 0x61
   35c30:	2919      	cmp	r1, #25
   35c32:	d801      	bhi.n	35c38 <_strtol_l.isra.0+0xcc>
   35c34:	3c57      	subs	r4, #87	; 0x57
   35c36:	e7e0      	b.n	35bfa <_strtol_l.isra.0+0x8e>
   35c38:	1c5a      	adds	r2, r3, #1
   35c3a:	d108      	bne.n	35c4e <_strtol_l.isra.0+0xe2>
   35c3c:	9a05      	ldr	r2, [sp, #20]
   35c3e:	3323      	adds	r3, #35	; 0x23
   35c40:	6013      	str	r3, [r2, #0]
   35c42:	9b02      	ldr	r3, [sp, #8]
   35c44:	0030      	movs	r0, r6
   35c46:	2b00      	cmp	r3, #0
   35c48:	d10b      	bne.n	35c62 <_strtol_l.isra.0+0xf6>
   35c4a:	b007      	add	sp, #28
   35c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35c4e:	9a01      	ldr	r2, [sp, #4]
   35c50:	2a00      	cmp	r2, #0
   35c52:	d000      	beq.n	35c56 <_strtol_l.isra.0+0xea>
   35c54:	4240      	negs	r0, r0
   35c56:	9a02      	ldr	r2, [sp, #8]
   35c58:	2a00      	cmp	r2, #0
   35c5a:	d0f6      	beq.n	35c4a <_strtol_l.isra.0+0xde>
   35c5c:	9a03      	ldr	r2, [sp, #12]
   35c5e:	2b00      	cmp	r3, #0
   35c60:	d000      	beq.n	35c64 <_strtol_l.isra.0+0xf8>
   35c62:	1e6a      	subs	r2, r5, #1
   35c64:	9b02      	ldr	r3, [sp, #8]
   35c66:	601a      	str	r2, [r3, #0]
   35c68:	e7ef      	b.n	35c4a <_strtol_l.isra.0+0xde>
   35c6a:	2430      	movs	r4, #48	; 0x30
   35c6c:	2f00      	cmp	r7, #0
   35c6e:	d1ad      	bne.n	35bcc <_strtol_l.isra.0+0x60>
   35c70:	3708      	adds	r7, #8
   35c72:	e7ab      	b.n	35bcc <_strtol_l.isra.0+0x60>
   35c74:	7fffffff 	.word	0x7fffffff

00035c78 <strtol>:
   35c78:	b537      	push	{r0, r1, r2, r4, r5, lr}
   35c7a:	0013      	movs	r3, r2
   35c7c:	4a06      	ldr	r2, [pc, #24]	; (35c98 <strtol+0x20>)
   35c7e:	0005      	movs	r5, r0
   35c80:	6810      	ldr	r0, [r2, #0]
   35c82:	6a04      	ldr	r4, [r0, #32]
   35c84:	2c00      	cmp	r4, #0
   35c86:	d100      	bne.n	35c8a <strtol+0x12>
   35c88:	4c04      	ldr	r4, [pc, #16]	; (35c9c <strtol+0x24>)
   35c8a:	000a      	movs	r2, r1
   35c8c:	9400      	str	r4, [sp, #0]
   35c8e:	0029      	movs	r1, r5
   35c90:	f7ff ff6c 	bl	35b6c <_strtol_l.isra.0>
   35c94:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   35c96:	46c0      	nop			; (mov r8, r8)
   35c98:	20000124 	.word	0x20000124
   35c9c:	20000188 	.word	0x20000188

00035ca0 <_vsniprintf_r>:
   35ca0:	b530      	push	{r4, r5, lr}
   35ca2:	0014      	movs	r4, r2
   35ca4:	b09b      	sub	sp, #108	; 0x6c
   35ca6:	0005      	movs	r5, r0
   35ca8:	001a      	movs	r2, r3
   35caa:	2c00      	cmp	r4, #0
   35cac:	da05      	bge.n	35cba <_vsniprintf_r+0x1a>
   35cae:	238b      	movs	r3, #139	; 0x8b
   35cb0:	6003      	str	r3, [r0, #0]
   35cb2:	2001      	movs	r0, #1
   35cb4:	4240      	negs	r0, r0
   35cb6:	b01b      	add	sp, #108	; 0x6c
   35cb8:	bd30      	pop	{r4, r5, pc}
   35cba:	2382      	movs	r3, #130	; 0x82
   35cbc:	4668      	mov	r0, sp
   35cbe:	009b      	lsls	r3, r3, #2
   35cc0:	8183      	strh	r3, [r0, #12]
   35cc2:	2300      	movs	r3, #0
   35cc4:	9100      	str	r1, [sp, #0]
   35cc6:	9104      	str	r1, [sp, #16]
   35cc8:	429c      	cmp	r4, r3
   35cca:	d000      	beq.n	35cce <_vsniprintf_r+0x2e>
   35ccc:	1e63      	subs	r3, r4, #1
   35cce:	9302      	str	r3, [sp, #8]
   35cd0:	9305      	str	r3, [sp, #20]
   35cd2:	2301      	movs	r3, #1
   35cd4:	4669      	mov	r1, sp
   35cd6:	425b      	negs	r3, r3
   35cd8:	81cb      	strh	r3, [r1, #14]
   35cda:	0028      	movs	r0, r5
   35cdc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   35cde:	f000 fb63 	bl	363a8 <_svfiprintf_r>
   35ce2:	1c43      	adds	r3, r0, #1
   35ce4:	da01      	bge.n	35cea <_vsniprintf_r+0x4a>
   35ce6:	238b      	movs	r3, #139	; 0x8b
   35ce8:	602b      	str	r3, [r5, #0]
   35cea:	2c00      	cmp	r4, #0
   35cec:	d0e3      	beq.n	35cb6 <_vsniprintf_r+0x16>
   35cee:	2300      	movs	r3, #0
   35cf0:	9a00      	ldr	r2, [sp, #0]
   35cf2:	7013      	strb	r3, [r2, #0]
   35cf4:	e7df      	b.n	35cb6 <_vsniprintf_r+0x16>
	...

00035cf8 <vsniprintf>:
   35cf8:	b507      	push	{r0, r1, r2, lr}
   35cfa:	9300      	str	r3, [sp, #0]
   35cfc:	0013      	movs	r3, r2
   35cfe:	000a      	movs	r2, r1
   35d00:	0001      	movs	r1, r0
   35d02:	4802      	ldr	r0, [pc, #8]	; (35d0c <vsniprintf+0x14>)
   35d04:	6800      	ldr	r0, [r0, #0]
   35d06:	f7ff ffcb 	bl	35ca0 <_vsniprintf_r>
   35d0a:	bd0e      	pop	{r1, r2, r3, pc}
   35d0c:	20000124 	.word	0x20000124

00035d10 <__swbuf_r>:
   35d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35d12:	0005      	movs	r5, r0
   35d14:	000e      	movs	r6, r1
   35d16:	0014      	movs	r4, r2
   35d18:	2800      	cmp	r0, #0
   35d1a:	d004      	beq.n	35d26 <__swbuf_r+0x16>
   35d1c:	6983      	ldr	r3, [r0, #24]
   35d1e:	2b00      	cmp	r3, #0
   35d20:	d101      	bne.n	35d26 <__swbuf_r+0x16>
   35d22:	f000 f9b9 	bl	36098 <__sinit>
   35d26:	4b22      	ldr	r3, [pc, #136]	; (35db0 <__swbuf_r+0xa0>)
   35d28:	429c      	cmp	r4, r3
   35d2a:	d12d      	bne.n	35d88 <__swbuf_r+0x78>
   35d2c:	686c      	ldr	r4, [r5, #4]
   35d2e:	69a3      	ldr	r3, [r4, #24]
   35d30:	60a3      	str	r3, [r4, #8]
   35d32:	89a3      	ldrh	r3, [r4, #12]
   35d34:	071b      	lsls	r3, r3, #28
   35d36:	d531      	bpl.n	35d9c <__swbuf_r+0x8c>
   35d38:	6923      	ldr	r3, [r4, #16]
   35d3a:	2b00      	cmp	r3, #0
   35d3c:	d02e      	beq.n	35d9c <__swbuf_r+0x8c>
   35d3e:	6823      	ldr	r3, [r4, #0]
   35d40:	6922      	ldr	r2, [r4, #16]
   35d42:	b2f7      	uxtb	r7, r6
   35d44:	1a98      	subs	r0, r3, r2
   35d46:	6963      	ldr	r3, [r4, #20]
   35d48:	b2f6      	uxtb	r6, r6
   35d4a:	4298      	cmp	r0, r3
   35d4c:	db05      	blt.n	35d5a <__swbuf_r+0x4a>
   35d4e:	0021      	movs	r1, r4
   35d50:	0028      	movs	r0, r5
   35d52:	f000 f933 	bl	35fbc <_fflush_r>
   35d56:	2800      	cmp	r0, #0
   35d58:	d126      	bne.n	35da8 <__swbuf_r+0x98>
   35d5a:	68a3      	ldr	r3, [r4, #8]
   35d5c:	3001      	adds	r0, #1
   35d5e:	3b01      	subs	r3, #1
   35d60:	60a3      	str	r3, [r4, #8]
   35d62:	6823      	ldr	r3, [r4, #0]
   35d64:	1c5a      	adds	r2, r3, #1
   35d66:	6022      	str	r2, [r4, #0]
   35d68:	701f      	strb	r7, [r3, #0]
   35d6a:	6963      	ldr	r3, [r4, #20]
   35d6c:	4298      	cmp	r0, r3
   35d6e:	d004      	beq.n	35d7a <__swbuf_r+0x6a>
   35d70:	89a3      	ldrh	r3, [r4, #12]
   35d72:	07db      	lsls	r3, r3, #31
   35d74:	d51a      	bpl.n	35dac <__swbuf_r+0x9c>
   35d76:	2e0a      	cmp	r6, #10
   35d78:	d118      	bne.n	35dac <__swbuf_r+0x9c>
   35d7a:	0021      	movs	r1, r4
   35d7c:	0028      	movs	r0, r5
   35d7e:	f000 f91d 	bl	35fbc <_fflush_r>
   35d82:	2800      	cmp	r0, #0
   35d84:	d012      	beq.n	35dac <__swbuf_r+0x9c>
   35d86:	e00f      	b.n	35da8 <__swbuf_r+0x98>
   35d88:	4b0a      	ldr	r3, [pc, #40]	; (35db4 <__swbuf_r+0xa4>)
   35d8a:	429c      	cmp	r4, r3
   35d8c:	d101      	bne.n	35d92 <__swbuf_r+0x82>
   35d8e:	68ac      	ldr	r4, [r5, #8]
   35d90:	e7cd      	b.n	35d2e <__swbuf_r+0x1e>
   35d92:	4b09      	ldr	r3, [pc, #36]	; (35db8 <__swbuf_r+0xa8>)
   35d94:	429c      	cmp	r4, r3
   35d96:	d1ca      	bne.n	35d2e <__swbuf_r+0x1e>
   35d98:	68ec      	ldr	r4, [r5, #12]
   35d9a:	e7c8      	b.n	35d2e <__swbuf_r+0x1e>
   35d9c:	0021      	movs	r1, r4
   35d9e:	0028      	movs	r0, r5
   35da0:	f000 f80c 	bl	35dbc <__swsetup_r>
   35da4:	2800      	cmp	r0, #0
   35da6:	d0ca      	beq.n	35d3e <__swbuf_r+0x2e>
   35da8:	2601      	movs	r6, #1
   35daa:	4276      	negs	r6, r6
   35dac:	0030      	movs	r0, r6
   35dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35db0:	0003af68 	.word	0x0003af68
   35db4:	0003af88 	.word	0x0003af88
   35db8:	0003af48 	.word	0x0003af48

00035dbc <__swsetup_r>:
   35dbc:	4b36      	ldr	r3, [pc, #216]	; (35e98 <__swsetup_r+0xdc>)
   35dbe:	b570      	push	{r4, r5, r6, lr}
   35dc0:	681d      	ldr	r5, [r3, #0]
   35dc2:	0006      	movs	r6, r0
   35dc4:	000c      	movs	r4, r1
   35dc6:	2d00      	cmp	r5, #0
   35dc8:	d005      	beq.n	35dd6 <__swsetup_r+0x1a>
   35dca:	69ab      	ldr	r3, [r5, #24]
   35dcc:	2b00      	cmp	r3, #0
   35dce:	d102      	bne.n	35dd6 <__swsetup_r+0x1a>
   35dd0:	0028      	movs	r0, r5
   35dd2:	f000 f961 	bl	36098 <__sinit>
   35dd6:	4b31      	ldr	r3, [pc, #196]	; (35e9c <__swsetup_r+0xe0>)
   35dd8:	429c      	cmp	r4, r3
   35dda:	d10f      	bne.n	35dfc <__swsetup_r+0x40>
   35ddc:	686c      	ldr	r4, [r5, #4]
   35dde:	230c      	movs	r3, #12
   35de0:	5ee2      	ldrsh	r2, [r4, r3]
   35de2:	b293      	uxth	r3, r2
   35de4:	0719      	lsls	r1, r3, #28
   35de6:	d42d      	bmi.n	35e44 <__swsetup_r+0x88>
   35de8:	06d9      	lsls	r1, r3, #27
   35dea:	d411      	bmi.n	35e10 <__swsetup_r+0x54>
   35dec:	2309      	movs	r3, #9
   35dee:	2001      	movs	r0, #1
   35df0:	6033      	str	r3, [r6, #0]
   35df2:	3337      	adds	r3, #55	; 0x37
   35df4:	4313      	orrs	r3, r2
   35df6:	81a3      	strh	r3, [r4, #12]
   35df8:	4240      	negs	r0, r0
   35dfa:	bd70      	pop	{r4, r5, r6, pc}
   35dfc:	4b28      	ldr	r3, [pc, #160]	; (35ea0 <__swsetup_r+0xe4>)
   35dfe:	429c      	cmp	r4, r3
   35e00:	d101      	bne.n	35e06 <__swsetup_r+0x4a>
   35e02:	68ac      	ldr	r4, [r5, #8]
   35e04:	e7eb      	b.n	35dde <__swsetup_r+0x22>
   35e06:	4b27      	ldr	r3, [pc, #156]	; (35ea4 <__swsetup_r+0xe8>)
   35e08:	429c      	cmp	r4, r3
   35e0a:	d1e8      	bne.n	35dde <__swsetup_r+0x22>
   35e0c:	68ec      	ldr	r4, [r5, #12]
   35e0e:	e7e6      	b.n	35dde <__swsetup_r+0x22>
   35e10:	075b      	lsls	r3, r3, #29
   35e12:	d513      	bpl.n	35e3c <__swsetup_r+0x80>
   35e14:	6b61      	ldr	r1, [r4, #52]	; 0x34
   35e16:	2900      	cmp	r1, #0
   35e18:	d008      	beq.n	35e2c <__swsetup_r+0x70>
   35e1a:	0023      	movs	r3, r4
   35e1c:	3344      	adds	r3, #68	; 0x44
   35e1e:	4299      	cmp	r1, r3
   35e20:	d002      	beq.n	35e28 <__swsetup_r+0x6c>
   35e22:	0030      	movs	r0, r6
   35e24:	f7ff fc78 	bl	35718 <_free_r>
   35e28:	2300      	movs	r3, #0
   35e2a:	6363      	str	r3, [r4, #52]	; 0x34
   35e2c:	2224      	movs	r2, #36	; 0x24
   35e2e:	89a3      	ldrh	r3, [r4, #12]
   35e30:	4393      	bics	r3, r2
   35e32:	81a3      	strh	r3, [r4, #12]
   35e34:	2300      	movs	r3, #0
   35e36:	6063      	str	r3, [r4, #4]
   35e38:	6923      	ldr	r3, [r4, #16]
   35e3a:	6023      	str	r3, [r4, #0]
   35e3c:	2308      	movs	r3, #8
   35e3e:	89a2      	ldrh	r2, [r4, #12]
   35e40:	4313      	orrs	r3, r2
   35e42:	81a3      	strh	r3, [r4, #12]
   35e44:	6923      	ldr	r3, [r4, #16]
   35e46:	2b00      	cmp	r3, #0
   35e48:	d10b      	bne.n	35e62 <__swsetup_r+0xa6>
   35e4a:	21a0      	movs	r1, #160	; 0xa0
   35e4c:	2280      	movs	r2, #128	; 0x80
   35e4e:	89a3      	ldrh	r3, [r4, #12]
   35e50:	0089      	lsls	r1, r1, #2
   35e52:	0092      	lsls	r2, r2, #2
   35e54:	400b      	ands	r3, r1
   35e56:	4293      	cmp	r3, r2
   35e58:	d003      	beq.n	35e62 <__swsetup_r+0xa6>
   35e5a:	0021      	movs	r1, r4
   35e5c:	0030      	movs	r0, r6
   35e5e:	f000 f9e9 	bl	36234 <__smakebuf_r>
   35e62:	2301      	movs	r3, #1
   35e64:	89a2      	ldrh	r2, [r4, #12]
   35e66:	4013      	ands	r3, r2
   35e68:	d011      	beq.n	35e8e <__swsetup_r+0xd2>
   35e6a:	2300      	movs	r3, #0
   35e6c:	60a3      	str	r3, [r4, #8]
   35e6e:	6963      	ldr	r3, [r4, #20]
   35e70:	425b      	negs	r3, r3
   35e72:	61a3      	str	r3, [r4, #24]
   35e74:	2000      	movs	r0, #0
   35e76:	6923      	ldr	r3, [r4, #16]
   35e78:	4283      	cmp	r3, r0
   35e7a:	d1be      	bne.n	35dfa <__swsetup_r+0x3e>
   35e7c:	230c      	movs	r3, #12
   35e7e:	5ee2      	ldrsh	r2, [r4, r3]
   35e80:	0613      	lsls	r3, r2, #24
   35e82:	d5ba      	bpl.n	35dfa <__swsetup_r+0x3e>
   35e84:	2340      	movs	r3, #64	; 0x40
   35e86:	4313      	orrs	r3, r2
   35e88:	81a3      	strh	r3, [r4, #12]
   35e8a:	3801      	subs	r0, #1
   35e8c:	e7b5      	b.n	35dfa <__swsetup_r+0x3e>
   35e8e:	0792      	lsls	r2, r2, #30
   35e90:	d400      	bmi.n	35e94 <__swsetup_r+0xd8>
   35e92:	6963      	ldr	r3, [r4, #20]
   35e94:	60a3      	str	r3, [r4, #8]
   35e96:	e7ed      	b.n	35e74 <__swsetup_r+0xb8>
   35e98:	20000124 	.word	0x20000124
   35e9c:	0003af68 	.word	0x0003af68
   35ea0:	0003af88 	.word	0x0003af88
   35ea4:	0003af48 	.word	0x0003af48

00035ea8 <__sflush_r>:
   35ea8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   35eaa:	898a      	ldrh	r2, [r1, #12]
   35eac:	0005      	movs	r5, r0
   35eae:	000c      	movs	r4, r1
   35eb0:	0713      	lsls	r3, r2, #28
   35eb2:	d460      	bmi.n	35f76 <__sflush_r+0xce>
   35eb4:	684b      	ldr	r3, [r1, #4]
   35eb6:	2b00      	cmp	r3, #0
   35eb8:	dc04      	bgt.n	35ec4 <__sflush_r+0x1c>
   35eba:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   35ebc:	2b00      	cmp	r3, #0
   35ebe:	dc01      	bgt.n	35ec4 <__sflush_r+0x1c>
   35ec0:	2000      	movs	r0, #0
   35ec2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   35ec4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   35ec6:	2f00      	cmp	r7, #0
   35ec8:	d0fa      	beq.n	35ec0 <__sflush_r+0x18>
   35eca:	2300      	movs	r3, #0
   35ecc:	682e      	ldr	r6, [r5, #0]
   35ece:	602b      	str	r3, [r5, #0]
   35ed0:	2380      	movs	r3, #128	; 0x80
   35ed2:	015b      	lsls	r3, r3, #5
   35ed4:	401a      	ands	r2, r3
   35ed6:	d034      	beq.n	35f42 <__sflush_r+0x9a>
   35ed8:	6d60      	ldr	r0, [r4, #84]	; 0x54
   35eda:	89a3      	ldrh	r3, [r4, #12]
   35edc:	075b      	lsls	r3, r3, #29
   35ede:	d506      	bpl.n	35eee <__sflush_r+0x46>
   35ee0:	6863      	ldr	r3, [r4, #4]
   35ee2:	1ac0      	subs	r0, r0, r3
   35ee4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   35ee6:	2b00      	cmp	r3, #0
   35ee8:	d001      	beq.n	35eee <__sflush_r+0x46>
   35eea:	6c23      	ldr	r3, [r4, #64]	; 0x40
   35eec:	1ac0      	subs	r0, r0, r3
   35eee:	0002      	movs	r2, r0
   35ef0:	6a21      	ldr	r1, [r4, #32]
   35ef2:	2300      	movs	r3, #0
   35ef4:	0028      	movs	r0, r5
   35ef6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   35ef8:	47b8      	blx	r7
   35efa:	89a1      	ldrh	r1, [r4, #12]
   35efc:	1c43      	adds	r3, r0, #1
   35efe:	d106      	bne.n	35f0e <__sflush_r+0x66>
   35f00:	682b      	ldr	r3, [r5, #0]
   35f02:	2b1d      	cmp	r3, #29
   35f04:	d831      	bhi.n	35f6a <__sflush_r+0xc2>
   35f06:	4a2c      	ldr	r2, [pc, #176]	; (35fb8 <__sflush_r+0x110>)
   35f08:	40da      	lsrs	r2, r3
   35f0a:	07d3      	lsls	r3, r2, #31
   35f0c:	d52d      	bpl.n	35f6a <__sflush_r+0xc2>
   35f0e:	2300      	movs	r3, #0
   35f10:	6063      	str	r3, [r4, #4]
   35f12:	6923      	ldr	r3, [r4, #16]
   35f14:	6023      	str	r3, [r4, #0]
   35f16:	04cb      	lsls	r3, r1, #19
   35f18:	d505      	bpl.n	35f26 <__sflush_r+0x7e>
   35f1a:	1c43      	adds	r3, r0, #1
   35f1c:	d102      	bne.n	35f24 <__sflush_r+0x7c>
   35f1e:	682b      	ldr	r3, [r5, #0]
   35f20:	2b00      	cmp	r3, #0
   35f22:	d100      	bne.n	35f26 <__sflush_r+0x7e>
   35f24:	6560      	str	r0, [r4, #84]	; 0x54
   35f26:	6b61      	ldr	r1, [r4, #52]	; 0x34
   35f28:	602e      	str	r6, [r5, #0]
   35f2a:	2900      	cmp	r1, #0
   35f2c:	d0c8      	beq.n	35ec0 <__sflush_r+0x18>
   35f2e:	0023      	movs	r3, r4
   35f30:	3344      	adds	r3, #68	; 0x44
   35f32:	4299      	cmp	r1, r3
   35f34:	d002      	beq.n	35f3c <__sflush_r+0x94>
   35f36:	0028      	movs	r0, r5
   35f38:	f7ff fbee 	bl	35718 <_free_r>
   35f3c:	2000      	movs	r0, #0
   35f3e:	6360      	str	r0, [r4, #52]	; 0x34
   35f40:	e7bf      	b.n	35ec2 <__sflush_r+0x1a>
   35f42:	2301      	movs	r3, #1
   35f44:	6a21      	ldr	r1, [r4, #32]
   35f46:	0028      	movs	r0, r5
   35f48:	47b8      	blx	r7
   35f4a:	1c43      	adds	r3, r0, #1
   35f4c:	d1c5      	bne.n	35eda <__sflush_r+0x32>
   35f4e:	682b      	ldr	r3, [r5, #0]
   35f50:	2b00      	cmp	r3, #0
   35f52:	d0c2      	beq.n	35eda <__sflush_r+0x32>
   35f54:	2b1d      	cmp	r3, #29
   35f56:	d001      	beq.n	35f5c <__sflush_r+0xb4>
   35f58:	2b16      	cmp	r3, #22
   35f5a:	d101      	bne.n	35f60 <__sflush_r+0xb8>
   35f5c:	602e      	str	r6, [r5, #0]
   35f5e:	e7af      	b.n	35ec0 <__sflush_r+0x18>
   35f60:	2340      	movs	r3, #64	; 0x40
   35f62:	89a2      	ldrh	r2, [r4, #12]
   35f64:	4313      	orrs	r3, r2
   35f66:	81a3      	strh	r3, [r4, #12]
   35f68:	e7ab      	b.n	35ec2 <__sflush_r+0x1a>
   35f6a:	2340      	movs	r3, #64	; 0x40
   35f6c:	430b      	orrs	r3, r1
   35f6e:	2001      	movs	r0, #1
   35f70:	81a3      	strh	r3, [r4, #12]
   35f72:	4240      	negs	r0, r0
   35f74:	e7a5      	b.n	35ec2 <__sflush_r+0x1a>
   35f76:	690f      	ldr	r7, [r1, #16]
   35f78:	2f00      	cmp	r7, #0
   35f7a:	d0a1      	beq.n	35ec0 <__sflush_r+0x18>
   35f7c:	680b      	ldr	r3, [r1, #0]
   35f7e:	600f      	str	r7, [r1, #0]
   35f80:	1bdb      	subs	r3, r3, r7
   35f82:	9301      	str	r3, [sp, #4]
   35f84:	2300      	movs	r3, #0
   35f86:	0792      	lsls	r2, r2, #30
   35f88:	d100      	bne.n	35f8c <__sflush_r+0xe4>
   35f8a:	694b      	ldr	r3, [r1, #20]
   35f8c:	60a3      	str	r3, [r4, #8]
   35f8e:	9b01      	ldr	r3, [sp, #4]
   35f90:	2b00      	cmp	r3, #0
   35f92:	dc00      	bgt.n	35f96 <__sflush_r+0xee>
   35f94:	e794      	b.n	35ec0 <__sflush_r+0x18>
   35f96:	9b01      	ldr	r3, [sp, #4]
   35f98:	003a      	movs	r2, r7
   35f9a:	6a21      	ldr	r1, [r4, #32]
   35f9c:	0028      	movs	r0, r5
   35f9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   35fa0:	47b0      	blx	r6
   35fa2:	2800      	cmp	r0, #0
   35fa4:	dc03      	bgt.n	35fae <__sflush_r+0x106>
   35fa6:	2340      	movs	r3, #64	; 0x40
   35fa8:	89a2      	ldrh	r2, [r4, #12]
   35faa:	4313      	orrs	r3, r2
   35fac:	e7df      	b.n	35f6e <__sflush_r+0xc6>
   35fae:	9b01      	ldr	r3, [sp, #4]
   35fb0:	183f      	adds	r7, r7, r0
   35fb2:	1a1b      	subs	r3, r3, r0
   35fb4:	9301      	str	r3, [sp, #4]
   35fb6:	e7ea      	b.n	35f8e <__sflush_r+0xe6>
   35fb8:	20400001 	.word	0x20400001

00035fbc <_fflush_r>:
   35fbc:	690b      	ldr	r3, [r1, #16]
   35fbe:	b570      	push	{r4, r5, r6, lr}
   35fc0:	0005      	movs	r5, r0
   35fc2:	000c      	movs	r4, r1
   35fc4:	2b00      	cmp	r3, #0
   35fc6:	d101      	bne.n	35fcc <_fflush_r+0x10>
   35fc8:	2000      	movs	r0, #0
   35fca:	bd70      	pop	{r4, r5, r6, pc}
   35fcc:	2800      	cmp	r0, #0
   35fce:	d004      	beq.n	35fda <_fflush_r+0x1e>
   35fd0:	6983      	ldr	r3, [r0, #24]
   35fd2:	2b00      	cmp	r3, #0
   35fd4:	d101      	bne.n	35fda <_fflush_r+0x1e>
   35fd6:	f000 f85f 	bl	36098 <__sinit>
   35fda:	4b0b      	ldr	r3, [pc, #44]	; (36008 <_fflush_r+0x4c>)
   35fdc:	429c      	cmp	r4, r3
   35fde:	d109      	bne.n	35ff4 <_fflush_r+0x38>
   35fe0:	686c      	ldr	r4, [r5, #4]
   35fe2:	220c      	movs	r2, #12
   35fe4:	5ea3      	ldrsh	r3, [r4, r2]
   35fe6:	2b00      	cmp	r3, #0
   35fe8:	d0ee      	beq.n	35fc8 <_fflush_r+0xc>
   35fea:	0021      	movs	r1, r4
   35fec:	0028      	movs	r0, r5
   35fee:	f7ff ff5b 	bl	35ea8 <__sflush_r>
   35ff2:	e7ea      	b.n	35fca <_fflush_r+0xe>
   35ff4:	4b05      	ldr	r3, [pc, #20]	; (3600c <_fflush_r+0x50>)
   35ff6:	429c      	cmp	r4, r3
   35ff8:	d101      	bne.n	35ffe <_fflush_r+0x42>
   35ffa:	68ac      	ldr	r4, [r5, #8]
   35ffc:	e7f1      	b.n	35fe2 <_fflush_r+0x26>
   35ffe:	4b04      	ldr	r3, [pc, #16]	; (36010 <_fflush_r+0x54>)
   36000:	429c      	cmp	r4, r3
   36002:	d1ee      	bne.n	35fe2 <_fflush_r+0x26>
   36004:	68ec      	ldr	r4, [r5, #12]
   36006:	e7ec      	b.n	35fe2 <_fflush_r+0x26>
   36008:	0003af68 	.word	0x0003af68
   3600c:	0003af88 	.word	0x0003af88
   36010:	0003af48 	.word	0x0003af48

00036014 <_cleanup_r>:
   36014:	b510      	push	{r4, lr}
   36016:	4902      	ldr	r1, [pc, #8]	; (36020 <_cleanup_r+0xc>)
   36018:	f000 f8b2 	bl	36180 <_fwalk_reent>
   3601c:	bd10      	pop	{r4, pc}
   3601e:	46c0      	nop			; (mov r8, r8)
   36020:	00035fbd 	.word	0x00035fbd

00036024 <std.isra.0>:
   36024:	2300      	movs	r3, #0
   36026:	b510      	push	{r4, lr}
   36028:	0004      	movs	r4, r0
   3602a:	6003      	str	r3, [r0, #0]
   3602c:	6043      	str	r3, [r0, #4]
   3602e:	6083      	str	r3, [r0, #8]
   36030:	8181      	strh	r1, [r0, #12]
   36032:	6643      	str	r3, [r0, #100]	; 0x64
   36034:	81c2      	strh	r2, [r0, #14]
   36036:	6103      	str	r3, [r0, #16]
   36038:	6143      	str	r3, [r0, #20]
   3603a:	6183      	str	r3, [r0, #24]
   3603c:	0019      	movs	r1, r3
   3603e:	2208      	movs	r2, #8
   36040:	305c      	adds	r0, #92	; 0x5c
   36042:	f7ff fb60 	bl	35706 <memset>
   36046:	4b05      	ldr	r3, [pc, #20]	; (3605c <std.isra.0+0x38>)
   36048:	6224      	str	r4, [r4, #32]
   3604a:	6263      	str	r3, [r4, #36]	; 0x24
   3604c:	4b04      	ldr	r3, [pc, #16]	; (36060 <std.isra.0+0x3c>)
   3604e:	62a3      	str	r3, [r4, #40]	; 0x28
   36050:	4b04      	ldr	r3, [pc, #16]	; (36064 <std.isra.0+0x40>)
   36052:	62e3      	str	r3, [r4, #44]	; 0x2c
   36054:	4b04      	ldr	r3, [pc, #16]	; (36068 <std.isra.0+0x44>)
   36056:	6323      	str	r3, [r4, #48]	; 0x30
   36058:	bd10      	pop	{r4, pc}
   3605a:	46c0      	nop			; (mov r8, r8)
   3605c:	000368c1 	.word	0x000368c1
   36060:	000368e9 	.word	0x000368e9
   36064:	00036921 	.word	0x00036921
   36068:	0003694d 	.word	0x0003694d

0003606c <__sfmoreglue>:
   3606c:	b570      	push	{r4, r5, r6, lr}
   3606e:	2568      	movs	r5, #104	; 0x68
   36070:	1e4a      	subs	r2, r1, #1
   36072:	4355      	muls	r5, r2
   36074:	000e      	movs	r6, r1
   36076:	0029      	movs	r1, r5
   36078:	3174      	adds	r1, #116	; 0x74
   3607a:	f7ff fb97 	bl	357ac <_malloc_r>
   3607e:	1e04      	subs	r4, r0, #0
   36080:	d008      	beq.n	36094 <__sfmoreglue+0x28>
   36082:	2100      	movs	r1, #0
   36084:	002a      	movs	r2, r5
   36086:	6001      	str	r1, [r0, #0]
   36088:	6046      	str	r6, [r0, #4]
   3608a:	300c      	adds	r0, #12
   3608c:	60a0      	str	r0, [r4, #8]
   3608e:	3268      	adds	r2, #104	; 0x68
   36090:	f7ff fb39 	bl	35706 <memset>
   36094:	0020      	movs	r0, r4
   36096:	bd70      	pop	{r4, r5, r6, pc}

00036098 <__sinit>:
   36098:	6983      	ldr	r3, [r0, #24]
   3609a:	b513      	push	{r0, r1, r4, lr}
   3609c:	0004      	movs	r4, r0
   3609e:	2b00      	cmp	r3, #0
   360a0:	d128      	bne.n	360f4 <__sinit+0x5c>
   360a2:	6483      	str	r3, [r0, #72]	; 0x48
   360a4:	64c3      	str	r3, [r0, #76]	; 0x4c
   360a6:	6503      	str	r3, [r0, #80]	; 0x50
   360a8:	4b13      	ldr	r3, [pc, #76]	; (360f8 <__sinit+0x60>)
   360aa:	4a14      	ldr	r2, [pc, #80]	; (360fc <__sinit+0x64>)
   360ac:	681b      	ldr	r3, [r3, #0]
   360ae:	6282      	str	r2, [r0, #40]	; 0x28
   360b0:	9301      	str	r3, [sp, #4]
   360b2:	4298      	cmp	r0, r3
   360b4:	d101      	bne.n	360ba <__sinit+0x22>
   360b6:	2301      	movs	r3, #1
   360b8:	6183      	str	r3, [r0, #24]
   360ba:	0020      	movs	r0, r4
   360bc:	f000 f820 	bl	36100 <__sfp>
   360c0:	6060      	str	r0, [r4, #4]
   360c2:	0020      	movs	r0, r4
   360c4:	f000 f81c 	bl	36100 <__sfp>
   360c8:	60a0      	str	r0, [r4, #8]
   360ca:	0020      	movs	r0, r4
   360cc:	f000 f818 	bl	36100 <__sfp>
   360d0:	2200      	movs	r2, #0
   360d2:	60e0      	str	r0, [r4, #12]
   360d4:	2104      	movs	r1, #4
   360d6:	6860      	ldr	r0, [r4, #4]
   360d8:	f7ff ffa4 	bl	36024 <std.isra.0>
   360dc:	2201      	movs	r2, #1
   360de:	2109      	movs	r1, #9
   360e0:	68a0      	ldr	r0, [r4, #8]
   360e2:	f7ff ff9f 	bl	36024 <std.isra.0>
   360e6:	2202      	movs	r2, #2
   360e8:	2112      	movs	r1, #18
   360ea:	68e0      	ldr	r0, [r4, #12]
   360ec:	f7ff ff9a 	bl	36024 <std.isra.0>
   360f0:	2301      	movs	r3, #1
   360f2:	61a3      	str	r3, [r4, #24]
   360f4:	bd13      	pop	{r0, r1, r4, pc}
   360f6:	46c0      	nop			; (mov r8, r8)
   360f8:	0003af44 	.word	0x0003af44
   360fc:	00036015 	.word	0x00036015

00036100 <__sfp>:
   36100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   36102:	4b1e      	ldr	r3, [pc, #120]	; (3617c <__sfp+0x7c>)
   36104:	0007      	movs	r7, r0
   36106:	681e      	ldr	r6, [r3, #0]
   36108:	69b3      	ldr	r3, [r6, #24]
   3610a:	2b00      	cmp	r3, #0
   3610c:	d102      	bne.n	36114 <__sfp+0x14>
   3610e:	0030      	movs	r0, r6
   36110:	f7ff ffc2 	bl	36098 <__sinit>
   36114:	3648      	adds	r6, #72	; 0x48
   36116:	68b4      	ldr	r4, [r6, #8]
   36118:	6873      	ldr	r3, [r6, #4]
   3611a:	3b01      	subs	r3, #1
   3611c:	d504      	bpl.n	36128 <__sfp+0x28>
   3611e:	6833      	ldr	r3, [r6, #0]
   36120:	2b00      	cmp	r3, #0
   36122:	d007      	beq.n	36134 <__sfp+0x34>
   36124:	6836      	ldr	r6, [r6, #0]
   36126:	e7f6      	b.n	36116 <__sfp+0x16>
   36128:	220c      	movs	r2, #12
   3612a:	5ea5      	ldrsh	r5, [r4, r2]
   3612c:	2d00      	cmp	r5, #0
   3612e:	d00d      	beq.n	3614c <__sfp+0x4c>
   36130:	3468      	adds	r4, #104	; 0x68
   36132:	e7f2      	b.n	3611a <__sfp+0x1a>
   36134:	2104      	movs	r1, #4
   36136:	0038      	movs	r0, r7
   36138:	f7ff ff98 	bl	3606c <__sfmoreglue>
   3613c:	6030      	str	r0, [r6, #0]
   3613e:	2800      	cmp	r0, #0
   36140:	d1f0      	bne.n	36124 <__sfp+0x24>
   36142:	230c      	movs	r3, #12
   36144:	0004      	movs	r4, r0
   36146:	603b      	str	r3, [r7, #0]
   36148:	0020      	movs	r0, r4
   3614a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3614c:	2301      	movs	r3, #1
   3614e:	0020      	movs	r0, r4
   36150:	425b      	negs	r3, r3
   36152:	81e3      	strh	r3, [r4, #14]
   36154:	3302      	adds	r3, #2
   36156:	81a3      	strh	r3, [r4, #12]
   36158:	6665      	str	r5, [r4, #100]	; 0x64
   3615a:	6025      	str	r5, [r4, #0]
   3615c:	60a5      	str	r5, [r4, #8]
   3615e:	6065      	str	r5, [r4, #4]
   36160:	6125      	str	r5, [r4, #16]
   36162:	6165      	str	r5, [r4, #20]
   36164:	61a5      	str	r5, [r4, #24]
   36166:	2208      	movs	r2, #8
   36168:	0029      	movs	r1, r5
   3616a:	305c      	adds	r0, #92	; 0x5c
   3616c:	f7ff facb 	bl	35706 <memset>
   36170:	6365      	str	r5, [r4, #52]	; 0x34
   36172:	63a5      	str	r5, [r4, #56]	; 0x38
   36174:	64a5      	str	r5, [r4, #72]	; 0x48
   36176:	64e5      	str	r5, [r4, #76]	; 0x4c
   36178:	e7e6      	b.n	36148 <__sfp+0x48>
   3617a:	46c0      	nop			; (mov r8, r8)
   3617c:	0003af44 	.word	0x0003af44

00036180 <_fwalk_reent>:
   36180:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   36182:	0004      	movs	r4, r0
   36184:	0007      	movs	r7, r0
   36186:	2600      	movs	r6, #0
   36188:	9101      	str	r1, [sp, #4]
   3618a:	3448      	adds	r4, #72	; 0x48
   3618c:	2c00      	cmp	r4, #0
   3618e:	d101      	bne.n	36194 <_fwalk_reent+0x14>
   36190:	0030      	movs	r0, r6
   36192:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   36194:	6863      	ldr	r3, [r4, #4]
   36196:	68a5      	ldr	r5, [r4, #8]
   36198:	9300      	str	r3, [sp, #0]
   3619a:	9b00      	ldr	r3, [sp, #0]
   3619c:	3b01      	subs	r3, #1
   3619e:	9300      	str	r3, [sp, #0]
   361a0:	d501      	bpl.n	361a6 <_fwalk_reent+0x26>
   361a2:	6824      	ldr	r4, [r4, #0]
   361a4:	e7f2      	b.n	3618c <_fwalk_reent+0xc>
   361a6:	89ab      	ldrh	r3, [r5, #12]
   361a8:	2b01      	cmp	r3, #1
   361aa:	d908      	bls.n	361be <_fwalk_reent+0x3e>
   361ac:	220e      	movs	r2, #14
   361ae:	5eab      	ldrsh	r3, [r5, r2]
   361b0:	3301      	adds	r3, #1
   361b2:	d004      	beq.n	361be <_fwalk_reent+0x3e>
   361b4:	0029      	movs	r1, r5
   361b6:	0038      	movs	r0, r7
   361b8:	9b01      	ldr	r3, [sp, #4]
   361ba:	4798      	blx	r3
   361bc:	4306      	orrs	r6, r0
   361be:	3568      	adds	r5, #104	; 0x68
   361c0:	e7eb      	b.n	3619a <_fwalk_reent+0x1a>

000361c2 <__locale_ctype_ptr_l>:
   361c2:	30ec      	adds	r0, #236	; 0xec
   361c4:	6800      	ldr	r0, [r0, #0]
   361c6:	4770      	bx	lr

000361c8 <__locale_ctype_ptr>:
   361c8:	4b04      	ldr	r3, [pc, #16]	; (361dc <__locale_ctype_ptr+0x14>)
   361ca:	681b      	ldr	r3, [r3, #0]
   361cc:	6a1b      	ldr	r3, [r3, #32]
   361ce:	2b00      	cmp	r3, #0
   361d0:	d100      	bne.n	361d4 <__locale_ctype_ptr+0xc>
   361d2:	4b03      	ldr	r3, [pc, #12]	; (361e0 <__locale_ctype_ptr+0x18>)
   361d4:	33ec      	adds	r3, #236	; 0xec
   361d6:	6818      	ldr	r0, [r3, #0]
   361d8:	4770      	bx	lr
   361da:	46c0      	nop			; (mov r8, r8)
   361dc:	20000124 	.word	0x20000124
   361e0:	20000188 	.word	0x20000188

000361e4 <__swhatbuf_r>:
   361e4:	b570      	push	{r4, r5, r6, lr}
   361e6:	000e      	movs	r6, r1
   361e8:	001d      	movs	r5, r3
   361ea:	230e      	movs	r3, #14
   361ec:	5ec9      	ldrsh	r1, [r1, r3]
   361ee:	b090      	sub	sp, #64	; 0x40
   361f0:	0014      	movs	r4, r2
   361f2:	2900      	cmp	r1, #0
   361f4:	da07      	bge.n	36206 <__swhatbuf_r+0x22>
   361f6:	2300      	movs	r3, #0
   361f8:	602b      	str	r3, [r5, #0]
   361fa:	89b3      	ldrh	r3, [r6, #12]
   361fc:	061b      	lsls	r3, r3, #24
   361fe:	d411      	bmi.n	36224 <__swhatbuf_r+0x40>
   36200:	2380      	movs	r3, #128	; 0x80
   36202:	00db      	lsls	r3, r3, #3
   36204:	e00f      	b.n	36226 <__swhatbuf_r+0x42>
   36206:	aa01      	add	r2, sp, #4
   36208:	f000 fbe6 	bl	369d8 <_fstat_r>
   3620c:	2800      	cmp	r0, #0
   3620e:	dbf2      	blt.n	361f6 <__swhatbuf_r+0x12>
   36210:	22f0      	movs	r2, #240	; 0xf0
   36212:	9b02      	ldr	r3, [sp, #8]
   36214:	0212      	lsls	r2, r2, #8
   36216:	4013      	ands	r3, r2
   36218:	4a05      	ldr	r2, [pc, #20]	; (36230 <__swhatbuf_r+0x4c>)
   3621a:	189b      	adds	r3, r3, r2
   3621c:	425a      	negs	r2, r3
   3621e:	4153      	adcs	r3, r2
   36220:	602b      	str	r3, [r5, #0]
   36222:	e7ed      	b.n	36200 <__swhatbuf_r+0x1c>
   36224:	2340      	movs	r3, #64	; 0x40
   36226:	2000      	movs	r0, #0
   36228:	6023      	str	r3, [r4, #0]
   3622a:	b010      	add	sp, #64	; 0x40
   3622c:	bd70      	pop	{r4, r5, r6, pc}
   3622e:	46c0      	nop			; (mov r8, r8)
   36230:	ffffe000 	.word	0xffffe000

00036234 <__smakebuf_r>:
   36234:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   36236:	2602      	movs	r6, #2
   36238:	898b      	ldrh	r3, [r1, #12]
   3623a:	0005      	movs	r5, r0
   3623c:	000c      	movs	r4, r1
   3623e:	4233      	tst	r3, r6
   36240:	d006      	beq.n	36250 <__smakebuf_r+0x1c>
   36242:	0023      	movs	r3, r4
   36244:	3347      	adds	r3, #71	; 0x47
   36246:	6023      	str	r3, [r4, #0]
   36248:	6123      	str	r3, [r4, #16]
   3624a:	2301      	movs	r3, #1
   3624c:	6163      	str	r3, [r4, #20]
   3624e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   36250:	ab01      	add	r3, sp, #4
   36252:	466a      	mov	r2, sp
   36254:	f7ff ffc6 	bl	361e4 <__swhatbuf_r>
   36258:	9900      	ldr	r1, [sp, #0]
   3625a:	0007      	movs	r7, r0
   3625c:	0028      	movs	r0, r5
   3625e:	f7ff faa5 	bl	357ac <_malloc_r>
   36262:	2800      	cmp	r0, #0
   36264:	d108      	bne.n	36278 <__smakebuf_r+0x44>
   36266:	220c      	movs	r2, #12
   36268:	5ea3      	ldrsh	r3, [r4, r2]
   3626a:	059a      	lsls	r2, r3, #22
   3626c:	d4ef      	bmi.n	3624e <__smakebuf_r+0x1a>
   3626e:	2203      	movs	r2, #3
   36270:	4393      	bics	r3, r2
   36272:	431e      	orrs	r6, r3
   36274:	81a6      	strh	r6, [r4, #12]
   36276:	e7e4      	b.n	36242 <__smakebuf_r+0xe>
   36278:	4b0f      	ldr	r3, [pc, #60]	; (362b8 <__smakebuf_r+0x84>)
   3627a:	62ab      	str	r3, [r5, #40]	; 0x28
   3627c:	2380      	movs	r3, #128	; 0x80
   3627e:	89a2      	ldrh	r2, [r4, #12]
   36280:	6020      	str	r0, [r4, #0]
   36282:	4313      	orrs	r3, r2
   36284:	81a3      	strh	r3, [r4, #12]
   36286:	9b00      	ldr	r3, [sp, #0]
   36288:	6120      	str	r0, [r4, #16]
   3628a:	6163      	str	r3, [r4, #20]
   3628c:	9b01      	ldr	r3, [sp, #4]
   3628e:	2b00      	cmp	r3, #0
   36290:	d00d      	beq.n	362ae <__smakebuf_r+0x7a>
   36292:	230e      	movs	r3, #14
   36294:	5ee1      	ldrsh	r1, [r4, r3]
   36296:	0028      	movs	r0, r5
   36298:	f000 fbb0 	bl	369fc <_isatty_r>
   3629c:	2800      	cmp	r0, #0
   3629e:	d006      	beq.n	362ae <__smakebuf_r+0x7a>
   362a0:	2203      	movs	r2, #3
   362a2:	89a3      	ldrh	r3, [r4, #12]
   362a4:	4393      	bics	r3, r2
   362a6:	001a      	movs	r2, r3
   362a8:	2301      	movs	r3, #1
   362aa:	4313      	orrs	r3, r2
   362ac:	81a3      	strh	r3, [r4, #12]
   362ae:	89a0      	ldrh	r0, [r4, #12]
   362b0:	4338      	orrs	r0, r7
   362b2:	81a0      	strh	r0, [r4, #12]
   362b4:	e7cb      	b.n	3624e <__smakebuf_r+0x1a>
   362b6:	46c0      	nop			; (mov r8, r8)
   362b8:	00036015 	.word	0x00036015

000362bc <__ascii_mbtowc>:
   362bc:	b082      	sub	sp, #8
   362be:	2900      	cmp	r1, #0
   362c0:	d100      	bne.n	362c4 <__ascii_mbtowc+0x8>
   362c2:	a901      	add	r1, sp, #4
   362c4:	1e10      	subs	r0, r2, #0
   362c6:	d006      	beq.n	362d6 <__ascii_mbtowc+0x1a>
   362c8:	2b00      	cmp	r3, #0
   362ca:	d006      	beq.n	362da <__ascii_mbtowc+0x1e>
   362cc:	7813      	ldrb	r3, [r2, #0]
   362ce:	600b      	str	r3, [r1, #0]
   362d0:	7810      	ldrb	r0, [r2, #0]
   362d2:	1e43      	subs	r3, r0, #1
   362d4:	4198      	sbcs	r0, r3
   362d6:	b002      	add	sp, #8
   362d8:	4770      	bx	lr
   362da:	2002      	movs	r0, #2
   362dc:	4240      	negs	r0, r0
   362de:	e7fa      	b.n	362d6 <__ascii_mbtowc+0x1a>

000362e0 <__malloc_lock>:
   362e0:	4770      	bx	lr

000362e2 <__malloc_unlock>:
   362e2:	4770      	bx	lr

000362e4 <__ssputs_r>:
   362e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   362e6:	688e      	ldr	r6, [r1, #8]
   362e8:	b085      	sub	sp, #20
   362ea:	0007      	movs	r7, r0
   362ec:	000c      	movs	r4, r1
   362ee:	9203      	str	r2, [sp, #12]
   362f0:	9301      	str	r3, [sp, #4]
   362f2:	429e      	cmp	r6, r3
   362f4:	d839      	bhi.n	3636a <__ssputs_r+0x86>
   362f6:	2390      	movs	r3, #144	; 0x90
   362f8:	898a      	ldrh	r2, [r1, #12]
   362fa:	00db      	lsls	r3, r3, #3
   362fc:	421a      	tst	r2, r3
   362fe:	d034      	beq.n	3636a <__ssputs_r+0x86>
   36300:	2503      	movs	r5, #3
   36302:	6909      	ldr	r1, [r1, #16]
   36304:	6823      	ldr	r3, [r4, #0]
   36306:	1a5b      	subs	r3, r3, r1
   36308:	9302      	str	r3, [sp, #8]
   3630a:	6963      	ldr	r3, [r4, #20]
   3630c:	9802      	ldr	r0, [sp, #8]
   3630e:	435d      	muls	r5, r3
   36310:	0feb      	lsrs	r3, r5, #31
   36312:	195d      	adds	r5, r3, r5
   36314:	9b01      	ldr	r3, [sp, #4]
   36316:	106d      	asrs	r5, r5, #1
   36318:	3301      	adds	r3, #1
   3631a:	181b      	adds	r3, r3, r0
   3631c:	42ab      	cmp	r3, r5
   3631e:	d900      	bls.n	36322 <__ssputs_r+0x3e>
   36320:	001d      	movs	r5, r3
   36322:	0553      	lsls	r3, r2, #21
   36324:	d532      	bpl.n	3638c <__ssputs_r+0xa8>
   36326:	0029      	movs	r1, r5
   36328:	0038      	movs	r0, r7
   3632a:	f7ff fa3f 	bl	357ac <_malloc_r>
   3632e:	1e06      	subs	r6, r0, #0
   36330:	d109      	bne.n	36346 <__ssputs_r+0x62>
   36332:	230c      	movs	r3, #12
   36334:	603b      	str	r3, [r7, #0]
   36336:	2340      	movs	r3, #64	; 0x40
   36338:	2001      	movs	r0, #1
   3633a:	89a2      	ldrh	r2, [r4, #12]
   3633c:	4240      	negs	r0, r0
   3633e:	4313      	orrs	r3, r2
   36340:	81a3      	strh	r3, [r4, #12]
   36342:	b005      	add	sp, #20
   36344:	bdf0      	pop	{r4, r5, r6, r7, pc}
   36346:	9a02      	ldr	r2, [sp, #8]
   36348:	6921      	ldr	r1, [r4, #16]
   3634a:	f7ff f9c1 	bl	356d0 <memcpy>
   3634e:	89a3      	ldrh	r3, [r4, #12]
   36350:	4a14      	ldr	r2, [pc, #80]	; (363a4 <__ssputs_r+0xc0>)
   36352:	401a      	ands	r2, r3
   36354:	2380      	movs	r3, #128	; 0x80
   36356:	4313      	orrs	r3, r2
   36358:	81a3      	strh	r3, [r4, #12]
   3635a:	9b02      	ldr	r3, [sp, #8]
   3635c:	6126      	str	r6, [r4, #16]
   3635e:	18f6      	adds	r6, r6, r3
   36360:	6026      	str	r6, [r4, #0]
   36362:	6165      	str	r5, [r4, #20]
   36364:	9e01      	ldr	r6, [sp, #4]
   36366:	1aed      	subs	r5, r5, r3
   36368:	60a5      	str	r5, [r4, #8]
   3636a:	9b01      	ldr	r3, [sp, #4]
   3636c:	42b3      	cmp	r3, r6
   3636e:	d200      	bcs.n	36372 <__ssputs_r+0x8e>
   36370:	001e      	movs	r6, r3
   36372:	0032      	movs	r2, r6
   36374:	9903      	ldr	r1, [sp, #12]
   36376:	6820      	ldr	r0, [r4, #0]
   36378:	f7ff f9b3 	bl	356e2 <memmove>
   3637c:	68a3      	ldr	r3, [r4, #8]
   3637e:	2000      	movs	r0, #0
   36380:	1b9b      	subs	r3, r3, r6
   36382:	60a3      	str	r3, [r4, #8]
   36384:	6823      	ldr	r3, [r4, #0]
   36386:	199e      	adds	r6, r3, r6
   36388:	6026      	str	r6, [r4, #0]
   3638a:	e7da      	b.n	36342 <__ssputs_r+0x5e>
   3638c:	002a      	movs	r2, r5
   3638e:	0038      	movs	r0, r7
   36390:	f000 fb65 	bl	36a5e <_realloc_r>
   36394:	1e06      	subs	r6, r0, #0
   36396:	d1e0      	bne.n	3635a <__ssputs_r+0x76>
   36398:	6921      	ldr	r1, [r4, #16]
   3639a:	0038      	movs	r0, r7
   3639c:	f7ff f9bc 	bl	35718 <_free_r>
   363a0:	e7c7      	b.n	36332 <__ssputs_r+0x4e>
   363a2:	46c0      	nop			; (mov r8, r8)
   363a4:	fffffb7f 	.word	0xfffffb7f

000363a8 <_svfiprintf_r>:
   363a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   363aa:	b09f      	sub	sp, #124	; 0x7c
   363ac:	9002      	str	r0, [sp, #8]
   363ae:	9305      	str	r3, [sp, #20]
   363b0:	898b      	ldrh	r3, [r1, #12]
   363b2:	000f      	movs	r7, r1
   363b4:	0016      	movs	r6, r2
   363b6:	061b      	lsls	r3, r3, #24
   363b8:	d511      	bpl.n	363de <_svfiprintf_r+0x36>
   363ba:	690b      	ldr	r3, [r1, #16]
   363bc:	2b00      	cmp	r3, #0
   363be:	d10e      	bne.n	363de <_svfiprintf_r+0x36>
   363c0:	2140      	movs	r1, #64	; 0x40
   363c2:	f7ff f9f3 	bl	357ac <_malloc_r>
   363c6:	6038      	str	r0, [r7, #0]
   363c8:	6138      	str	r0, [r7, #16]
   363ca:	2800      	cmp	r0, #0
   363cc:	d105      	bne.n	363da <_svfiprintf_r+0x32>
   363ce:	230c      	movs	r3, #12
   363d0:	9a02      	ldr	r2, [sp, #8]
   363d2:	3801      	subs	r0, #1
   363d4:	6013      	str	r3, [r2, #0]
   363d6:	b01f      	add	sp, #124	; 0x7c
   363d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   363da:	2340      	movs	r3, #64	; 0x40
   363dc:	617b      	str	r3, [r7, #20]
   363de:	2300      	movs	r3, #0
   363e0:	ad06      	add	r5, sp, #24
   363e2:	616b      	str	r3, [r5, #20]
   363e4:	3320      	adds	r3, #32
   363e6:	766b      	strb	r3, [r5, #25]
   363e8:	3310      	adds	r3, #16
   363ea:	76ab      	strb	r3, [r5, #26]
   363ec:	0034      	movs	r4, r6
   363ee:	7823      	ldrb	r3, [r4, #0]
   363f0:	2b00      	cmp	r3, #0
   363f2:	d147      	bne.n	36484 <_svfiprintf_r+0xdc>
   363f4:	1ba3      	subs	r3, r4, r6
   363f6:	9304      	str	r3, [sp, #16]
   363f8:	d00d      	beq.n	36416 <_svfiprintf_r+0x6e>
   363fa:	1ba3      	subs	r3, r4, r6
   363fc:	0032      	movs	r2, r6
   363fe:	0039      	movs	r1, r7
   36400:	9802      	ldr	r0, [sp, #8]
   36402:	f7ff ff6f 	bl	362e4 <__ssputs_r>
   36406:	1c43      	adds	r3, r0, #1
   36408:	d100      	bne.n	3640c <_svfiprintf_r+0x64>
   3640a:	e0b5      	b.n	36578 <_svfiprintf_r+0x1d0>
   3640c:	696a      	ldr	r2, [r5, #20]
   3640e:	9b04      	ldr	r3, [sp, #16]
   36410:	4694      	mov	ip, r2
   36412:	4463      	add	r3, ip
   36414:	616b      	str	r3, [r5, #20]
   36416:	7823      	ldrb	r3, [r4, #0]
   36418:	2b00      	cmp	r3, #0
   3641a:	d100      	bne.n	3641e <_svfiprintf_r+0x76>
   3641c:	e0ac      	b.n	36578 <_svfiprintf_r+0x1d0>
   3641e:	2201      	movs	r2, #1
   36420:	2300      	movs	r3, #0
   36422:	4252      	negs	r2, r2
   36424:	606a      	str	r2, [r5, #4]
   36426:	a902      	add	r1, sp, #8
   36428:	3254      	adds	r2, #84	; 0x54
   3642a:	1852      	adds	r2, r2, r1
   3642c:	3401      	adds	r4, #1
   3642e:	602b      	str	r3, [r5, #0]
   36430:	60eb      	str	r3, [r5, #12]
   36432:	60ab      	str	r3, [r5, #8]
   36434:	7013      	strb	r3, [r2, #0]
   36436:	65ab      	str	r3, [r5, #88]	; 0x58
   36438:	4e58      	ldr	r6, [pc, #352]	; (3659c <_svfiprintf_r+0x1f4>)
   3643a:	2205      	movs	r2, #5
   3643c:	7821      	ldrb	r1, [r4, #0]
   3643e:	0030      	movs	r0, r6
   36440:	f000 fb02 	bl	36a48 <memchr>
   36444:	1c62      	adds	r2, r4, #1
   36446:	2800      	cmp	r0, #0
   36448:	d120      	bne.n	3648c <_svfiprintf_r+0xe4>
   3644a:	6829      	ldr	r1, [r5, #0]
   3644c:	06cb      	lsls	r3, r1, #27
   3644e:	d504      	bpl.n	3645a <_svfiprintf_r+0xb2>
   36450:	2353      	movs	r3, #83	; 0x53
   36452:	ae02      	add	r6, sp, #8
   36454:	3020      	adds	r0, #32
   36456:	199b      	adds	r3, r3, r6
   36458:	7018      	strb	r0, [r3, #0]
   3645a:	070b      	lsls	r3, r1, #28
   3645c:	d504      	bpl.n	36468 <_svfiprintf_r+0xc0>
   3645e:	2353      	movs	r3, #83	; 0x53
   36460:	202b      	movs	r0, #43	; 0x2b
   36462:	ae02      	add	r6, sp, #8
   36464:	199b      	adds	r3, r3, r6
   36466:	7018      	strb	r0, [r3, #0]
   36468:	7823      	ldrb	r3, [r4, #0]
   3646a:	2b2a      	cmp	r3, #42	; 0x2a
   3646c:	d016      	beq.n	3649c <_svfiprintf_r+0xf4>
   3646e:	2000      	movs	r0, #0
   36470:	210a      	movs	r1, #10
   36472:	9b09      	ldr	r3, [sp, #36]	; 0x24
   36474:	7822      	ldrb	r2, [r4, #0]
   36476:	3a30      	subs	r2, #48	; 0x30
   36478:	2a09      	cmp	r2, #9
   3647a:	d955      	bls.n	36528 <_svfiprintf_r+0x180>
   3647c:	2800      	cmp	r0, #0
   3647e:	d015      	beq.n	364ac <_svfiprintf_r+0x104>
   36480:	9309      	str	r3, [sp, #36]	; 0x24
   36482:	e013      	b.n	364ac <_svfiprintf_r+0x104>
   36484:	2b25      	cmp	r3, #37	; 0x25
   36486:	d0b5      	beq.n	363f4 <_svfiprintf_r+0x4c>
   36488:	3401      	adds	r4, #1
   3648a:	e7b0      	b.n	363ee <_svfiprintf_r+0x46>
   3648c:	2301      	movs	r3, #1
   3648e:	1b80      	subs	r0, r0, r6
   36490:	4083      	lsls	r3, r0
   36492:	6829      	ldr	r1, [r5, #0]
   36494:	0014      	movs	r4, r2
   36496:	430b      	orrs	r3, r1
   36498:	602b      	str	r3, [r5, #0]
   3649a:	e7cd      	b.n	36438 <_svfiprintf_r+0x90>
   3649c:	9b05      	ldr	r3, [sp, #20]
   3649e:	1d18      	adds	r0, r3, #4
   364a0:	681b      	ldr	r3, [r3, #0]
   364a2:	9005      	str	r0, [sp, #20]
   364a4:	2b00      	cmp	r3, #0
   364a6:	db39      	blt.n	3651c <_svfiprintf_r+0x174>
   364a8:	9309      	str	r3, [sp, #36]	; 0x24
   364aa:	0014      	movs	r4, r2
   364ac:	7823      	ldrb	r3, [r4, #0]
   364ae:	2b2e      	cmp	r3, #46	; 0x2e
   364b0:	d10b      	bne.n	364ca <_svfiprintf_r+0x122>
   364b2:	7863      	ldrb	r3, [r4, #1]
   364b4:	1c62      	adds	r2, r4, #1
   364b6:	2b2a      	cmp	r3, #42	; 0x2a
   364b8:	d13e      	bne.n	36538 <_svfiprintf_r+0x190>
   364ba:	9b05      	ldr	r3, [sp, #20]
   364bc:	3402      	adds	r4, #2
   364be:	1d1a      	adds	r2, r3, #4
   364c0:	681b      	ldr	r3, [r3, #0]
   364c2:	9205      	str	r2, [sp, #20]
   364c4:	2b00      	cmp	r3, #0
   364c6:	db34      	blt.n	36532 <_svfiprintf_r+0x18a>
   364c8:	9307      	str	r3, [sp, #28]
   364ca:	4e35      	ldr	r6, [pc, #212]	; (365a0 <_svfiprintf_r+0x1f8>)
   364cc:	7821      	ldrb	r1, [r4, #0]
   364ce:	2203      	movs	r2, #3
   364d0:	0030      	movs	r0, r6
   364d2:	f000 fab9 	bl	36a48 <memchr>
   364d6:	2800      	cmp	r0, #0
   364d8:	d006      	beq.n	364e8 <_svfiprintf_r+0x140>
   364da:	2340      	movs	r3, #64	; 0x40
   364dc:	1b80      	subs	r0, r0, r6
   364de:	4083      	lsls	r3, r0
   364e0:	682a      	ldr	r2, [r5, #0]
   364e2:	3401      	adds	r4, #1
   364e4:	4313      	orrs	r3, r2
   364e6:	602b      	str	r3, [r5, #0]
   364e8:	7821      	ldrb	r1, [r4, #0]
   364ea:	2206      	movs	r2, #6
   364ec:	482d      	ldr	r0, [pc, #180]	; (365a4 <_svfiprintf_r+0x1fc>)
   364ee:	1c66      	adds	r6, r4, #1
   364f0:	7629      	strb	r1, [r5, #24]
   364f2:	f000 faa9 	bl	36a48 <memchr>
   364f6:	2800      	cmp	r0, #0
   364f8:	d046      	beq.n	36588 <_svfiprintf_r+0x1e0>
   364fa:	4b2b      	ldr	r3, [pc, #172]	; (365a8 <_svfiprintf_r+0x200>)
   364fc:	2b00      	cmp	r3, #0
   364fe:	d12f      	bne.n	36560 <_svfiprintf_r+0x1b8>
   36500:	6829      	ldr	r1, [r5, #0]
   36502:	9b05      	ldr	r3, [sp, #20]
   36504:	2207      	movs	r2, #7
   36506:	05c9      	lsls	r1, r1, #23
   36508:	d528      	bpl.n	3655c <_svfiprintf_r+0x1b4>
   3650a:	189b      	adds	r3, r3, r2
   3650c:	4393      	bics	r3, r2
   3650e:	3308      	adds	r3, #8
   36510:	9305      	str	r3, [sp, #20]
   36512:	696b      	ldr	r3, [r5, #20]
   36514:	9a03      	ldr	r2, [sp, #12]
   36516:	189b      	adds	r3, r3, r2
   36518:	616b      	str	r3, [r5, #20]
   3651a:	e767      	b.n	363ec <_svfiprintf_r+0x44>
   3651c:	425b      	negs	r3, r3
   3651e:	60eb      	str	r3, [r5, #12]
   36520:	2302      	movs	r3, #2
   36522:	430b      	orrs	r3, r1
   36524:	602b      	str	r3, [r5, #0]
   36526:	e7c0      	b.n	364aa <_svfiprintf_r+0x102>
   36528:	434b      	muls	r3, r1
   3652a:	3401      	adds	r4, #1
   3652c:	189b      	adds	r3, r3, r2
   3652e:	2001      	movs	r0, #1
   36530:	e7a0      	b.n	36474 <_svfiprintf_r+0xcc>
   36532:	2301      	movs	r3, #1
   36534:	425b      	negs	r3, r3
   36536:	e7c7      	b.n	364c8 <_svfiprintf_r+0x120>
   36538:	2300      	movs	r3, #0
   3653a:	0014      	movs	r4, r2
   3653c:	200a      	movs	r0, #10
   3653e:	001a      	movs	r2, r3
   36540:	606b      	str	r3, [r5, #4]
   36542:	7821      	ldrb	r1, [r4, #0]
   36544:	3930      	subs	r1, #48	; 0x30
   36546:	2909      	cmp	r1, #9
   36548:	d903      	bls.n	36552 <_svfiprintf_r+0x1aa>
   3654a:	2b00      	cmp	r3, #0
   3654c:	d0bd      	beq.n	364ca <_svfiprintf_r+0x122>
   3654e:	9207      	str	r2, [sp, #28]
   36550:	e7bb      	b.n	364ca <_svfiprintf_r+0x122>
   36552:	4342      	muls	r2, r0
   36554:	3401      	adds	r4, #1
   36556:	1852      	adds	r2, r2, r1
   36558:	2301      	movs	r3, #1
   3655a:	e7f2      	b.n	36542 <_svfiprintf_r+0x19a>
   3655c:	3307      	adds	r3, #7
   3655e:	e7d5      	b.n	3650c <_svfiprintf_r+0x164>
   36560:	ab05      	add	r3, sp, #20
   36562:	9300      	str	r3, [sp, #0]
   36564:	003a      	movs	r2, r7
   36566:	4b11      	ldr	r3, [pc, #68]	; (365ac <_svfiprintf_r+0x204>)
   36568:	0029      	movs	r1, r5
   3656a:	9802      	ldr	r0, [sp, #8]
   3656c:	e000      	b.n	36570 <_svfiprintf_r+0x1c8>
   3656e:	bf00      	nop
   36570:	9003      	str	r0, [sp, #12]
   36572:	9b03      	ldr	r3, [sp, #12]
   36574:	3301      	adds	r3, #1
   36576:	d1cc      	bne.n	36512 <_svfiprintf_r+0x16a>
   36578:	89bb      	ldrh	r3, [r7, #12]
   3657a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   3657c:	065b      	lsls	r3, r3, #25
   3657e:	d400      	bmi.n	36582 <_svfiprintf_r+0x1da>
   36580:	e729      	b.n	363d6 <_svfiprintf_r+0x2e>
   36582:	2001      	movs	r0, #1
   36584:	4240      	negs	r0, r0
   36586:	e726      	b.n	363d6 <_svfiprintf_r+0x2e>
   36588:	ab05      	add	r3, sp, #20
   3658a:	9300      	str	r3, [sp, #0]
   3658c:	003a      	movs	r2, r7
   3658e:	4b07      	ldr	r3, [pc, #28]	; (365ac <_svfiprintf_r+0x204>)
   36590:	0029      	movs	r1, r5
   36592:	9802      	ldr	r0, [sp, #8]
   36594:	f000 f87a 	bl	3668c <_printf_i>
   36598:	e7ea      	b.n	36570 <_svfiprintf_r+0x1c8>
   3659a:	46c0      	nop			; (mov r8, r8)
   3659c:	0003afb2 	.word	0x0003afb2
   365a0:	0003afb8 	.word	0x0003afb8
   365a4:	0003afbc 	.word	0x0003afbc
   365a8:	00000000 	.word	0x00000000
   365ac:	000362e5 	.word	0x000362e5

000365b0 <_printf_common>:
   365b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   365b2:	0015      	movs	r5, r2
   365b4:	9301      	str	r3, [sp, #4]
   365b6:	688a      	ldr	r2, [r1, #8]
   365b8:	690b      	ldr	r3, [r1, #16]
   365ba:	9000      	str	r0, [sp, #0]
   365bc:	000c      	movs	r4, r1
   365be:	4293      	cmp	r3, r2
   365c0:	da00      	bge.n	365c4 <_printf_common+0x14>
   365c2:	0013      	movs	r3, r2
   365c4:	0022      	movs	r2, r4
   365c6:	602b      	str	r3, [r5, #0]
   365c8:	3243      	adds	r2, #67	; 0x43
   365ca:	7812      	ldrb	r2, [r2, #0]
   365cc:	2a00      	cmp	r2, #0
   365ce:	d001      	beq.n	365d4 <_printf_common+0x24>
   365d0:	3301      	adds	r3, #1
   365d2:	602b      	str	r3, [r5, #0]
   365d4:	6823      	ldr	r3, [r4, #0]
   365d6:	069b      	lsls	r3, r3, #26
   365d8:	d502      	bpl.n	365e0 <_printf_common+0x30>
   365da:	682b      	ldr	r3, [r5, #0]
   365dc:	3302      	adds	r3, #2
   365de:	602b      	str	r3, [r5, #0]
   365e0:	2706      	movs	r7, #6
   365e2:	6823      	ldr	r3, [r4, #0]
   365e4:	401f      	ands	r7, r3
   365e6:	d027      	beq.n	36638 <_printf_common+0x88>
   365e8:	0023      	movs	r3, r4
   365ea:	3343      	adds	r3, #67	; 0x43
   365ec:	781b      	ldrb	r3, [r3, #0]
   365ee:	1e5a      	subs	r2, r3, #1
   365f0:	4193      	sbcs	r3, r2
   365f2:	6822      	ldr	r2, [r4, #0]
   365f4:	0692      	lsls	r2, r2, #26
   365f6:	d430      	bmi.n	3665a <_printf_common+0xaa>
   365f8:	0022      	movs	r2, r4
   365fa:	9901      	ldr	r1, [sp, #4]
   365fc:	3243      	adds	r2, #67	; 0x43
   365fe:	9800      	ldr	r0, [sp, #0]
   36600:	9e08      	ldr	r6, [sp, #32]
   36602:	47b0      	blx	r6
   36604:	1c43      	adds	r3, r0, #1
   36606:	d025      	beq.n	36654 <_printf_common+0xa4>
   36608:	2306      	movs	r3, #6
   3660a:	6820      	ldr	r0, [r4, #0]
   3660c:	682a      	ldr	r2, [r5, #0]
   3660e:	68e1      	ldr	r1, [r4, #12]
   36610:	4003      	ands	r3, r0
   36612:	2500      	movs	r5, #0
   36614:	2b04      	cmp	r3, #4
   36616:	d103      	bne.n	36620 <_printf_common+0x70>
   36618:	1a8d      	subs	r5, r1, r2
   3661a:	43eb      	mvns	r3, r5
   3661c:	17db      	asrs	r3, r3, #31
   3661e:	401d      	ands	r5, r3
   36620:	68a3      	ldr	r3, [r4, #8]
   36622:	6922      	ldr	r2, [r4, #16]
   36624:	4293      	cmp	r3, r2
   36626:	dd01      	ble.n	3662c <_printf_common+0x7c>
   36628:	1a9b      	subs	r3, r3, r2
   3662a:	18ed      	adds	r5, r5, r3
   3662c:	2700      	movs	r7, #0
   3662e:	42bd      	cmp	r5, r7
   36630:	d120      	bne.n	36674 <_printf_common+0xc4>
   36632:	2000      	movs	r0, #0
   36634:	e010      	b.n	36658 <_printf_common+0xa8>
   36636:	3701      	adds	r7, #1
   36638:	68e3      	ldr	r3, [r4, #12]
   3663a:	682a      	ldr	r2, [r5, #0]
   3663c:	1a9b      	subs	r3, r3, r2
   3663e:	429f      	cmp	r7, r3
   36640:	dad2      	bge.n	365e8 <_printf_common+0x38>
   36642:	0022      	movs	r2, r4
   36644:	2301      	movs	r3, #1
   36646:	3219      	adds	r2, #25
   36648:	9901      	ldr	r1, [sp, #4]
   3664a:	9800      	ldr	r0, [sp, #0]
   3664c:	9e08      	ldr	r6, [sp, #32]
   3664e:	47b0      	blx	r6
   36650:	1c43      	adds	r3, r0, #1
   36652:	d1f0      	bne.n	36636 <_printf_common+0x86>
   36654:	2001      	movs	r0, #1
   36656:	4240      	negs	r0, r0
   36658:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   3665a:	2030      	movs	r0, #48	; 0x30
   3665c:	18e1      	adds	r1, r4, r3
   3665e:	3143      	adds	r1, #67	; 0x43
   36660:	7008      	strb	r0, [r1, #0]
   36662:	0021      	movs	r1, r4
   36664:	1c5a      	adds	r2, r3, #1
   36666:	3145      	adds	r1, #69	; 0x45
   36668:	7809      	ldrb	r1, [r1, #0]
   3666a:	18a2      	adds	r2, r4, r2
   3666c:	3243      	adds	r2, #67	; 0x43
   3666e:	3302      	adds	r3, #2
   36670:	7011      	strb	r1, [r2, #0]
   36672:	e7c1      	b.n	365f8 <_printf_common+0x48>
   36674:	0022      	movs	r2, r4
   36676:	2301      	movs	r3, #1
   36678:	321a      	adds	r2, #26
   3667a:	9901      	ldr	r1, [sp, #4]
   3667c:	9800      	ldr	r0, [sp, #0]
   3667e:	9e08      	ldr	r6, [sp, #32]
   36680:	47b0      	blx	r6
   36682:	1c43      	adds	r3, r0, #1
   36684:	d0e6      	beq.n	36654 <_printf_common+0xa4>
   36686:	3701      	adds	r7, #1
   36688:	e7d1      	b.n	3662e <_printf_common+0x7e>
	...

0003668c <_printf_i>:
   3668c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3668e:	b08b      	sub	sp, #44	; 0x2c
   36690:	9206      	str	r2, [sp, #24]
   36692:	000a      	movs	r2, r1
   36694:	3243      	adds	r2, #67	; 0x43
   36696:	9307      	str	r3, [sp, #28]
   36698:	9005      	str	r0, [sp, #20]
   3669a:	9204      	str	r2, [sp, #16]
   3669c:	7e0a      	ldrb	r2, [r1, #24]
   3669e:	000c      	movs	r4, r1
   366a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   366a2:	2a6e      	cmp	r2, #110	; 0x6e
   366a4:	d100      	bne.n	366a8 <_printf_i+0x1c>
   366a6:	e08f      	b.n	367c8 <_printf_i+0x13c>
   366a8:	d817      	bhi.n	366da <_printf_i+0x4e>
   366aa:	2a63      	cmp	r2, #99	; 0x63
   366ac:	d02c      	beq.n	36708 <_printf_i+0x7c>
   366ae:	d808      	bhi.n	366c2 <_printf_i+0x36>
   366b0:	2a00      	cmp	r2, #0
   366b2:	d100      	bne.n	366b6 <_printf_i+0x2a>
   366b4:	e099      	b.n	367ea <_printf_i+0x15e>
   366b6:	2a58      	cmp	r2, #88	; 0x58
   366b8:	d054      	beq.n	36764 <_printf_i+0xd8>
   366ba:	0026      	movs	r6, r4
   366bc:	3642      	adds	r6, #66	; 0x42
   366be:	7032      	strb	r2, [r6, #0]
   366c0:	e029      	b.n	36716 <_printf_i+0x8a>
   366c2:	2a64      	cmp	r2, #100	; 0x64
   366c4:	d001      	beq.n	366ca <_printf_i+0x3e>
   366c6:	2a69      	cmp	r2, #105	; 0x69
   366c8:	d1f7      	bne.n	366ba <_printf_i+0x2e>
   366ca:	6821      	ldr	r1, [r4, #0]
   366cc:	681a      	ldr	r2, [r3, #0]
   366ce:	0608      	lsls	r0, r1, #24
   366d0:	d523      	bpl.n	3671a <_printf_i+0x8e>
   366d2:	1d11      	adds	r1, r2, #4
   366d4:	6019      	str	r1, [r3, #0]
   366d6:	6815      	ldr	r5, [r2, #0]
   366d8:	e025      	b.n	36726 <_printf_i+0x9a>
   366da:	2a73      	cmp	r2, #115	; 0x73
   366dc:	d100      	bne.n	366e0 <_printf_i+0x54>
   366de:	e088      	b.n	367f2 <_printf_i+0x166>
   366e0:	d808      	bhi.n	366f4 <_printf_i+0x68>
   366e2:	2a6f      	cmp	r2, #111	; 0x6f
   366e4:	d029      	beq.n	3673a <_printf_i+0xae>
   366e6:	2a70      	cmp	r2, #112	; 0x70
   366e8:	d1e7      	bne.n	366ba <_printf_i+0x2e>
   366ea:	2220      	movs	r2, #32
   366ec:	6809      	ldr	r1, [r1, #0]
   366ee:	430a      	orrs	r2, r1
   366f0:	6022      	str	r2, [r4, #0]
   366f2:	e003      	b.n	366fc <_printf_i+0x70>
   366f4:	2a75      	cmp	r2, #117	; 0x75
   366f6:	d020      	beq.n	3673a <_printf_i+0xae>
   366f8:	2a78      	cmp	r2, #120	; 0x78
   366fa:	d1de      	bne.n	366ba <_printf_i+0x2e>
   366fc:	0022      	movs	r2, r4
   366fe:	2178      	movs	r1, #120	; 0x78
   36700:	3245      	adds	r2, #69	; 0x45
   36702:	7011      	strb	r1, [r2, #0]
   36704:	4a6c      	ldr	r2, [pc, #432]	; (368b8 <_printf_i+0x22c>)
   36706:	e030      	b.n	3676a <_printf_i+0xde>
   36708:	000e      	movs	r6, r1
   3670a:	681a      	ldr	r2, [r3, #0]
   3670c:	3642      	adds	r6, #66	; 0x42
   3670e:	1d11      	adds	r1, r2, #4
   36710:	6019      	str	r1, [r3, #0]
   36712:	6813      	ldr	r3, [r2, #0]
   36714:	7033      	strb	r3, [r6, #0]
   36716:	2301      	movs	r3, #1
   36718:	e079      	b.n	3680e <_printf_i+0x182>
   3671a:	0649      	lsls	r1, r1, #25
   3671c:	d5d9      	bpl.n	366d2 <_printf_i+0x46>
   3671e:	1d11      	adds	r1, r2, #4
   36720:	6019      	str	r1, [r3, #0]
   36722:	2300      	movs	r3, #0
   36724:	5ed5      	ldrsh	r5, [r2, r3]
   36726:	2d00      	cmp	r5, #0
   36728:	da03      	bge.n	36732 <_printf_i+0xa6>
   3672a:	232d      	movs	r3, #45	; 0x2d
   3672c:	9a04      	ldr	r2, [sp, #16]
   3672e:	426d      	negs	r5, r5
   36730:	7013      	strb	r3, [r2, #0]
   36732:	4b62      	ldr	r3, [pc, #392]	; (368bc <_printf_i+0x230>)
   36734:	270a      	movs	r7, #10
   36736:	9303      	str	r3, [sp, #12]
   36738:	e02f      	b.n	3679a <_printf_i+0x10e>
   3673a:	6820      	ldr	r0, [r4, #0]
   3673c:	6819      	ldr	r1, [r3, #0]
   3673e:	0605      	lsls	r5, r0, #24
   36740:	d503      	bpl.n	3674a <_printf_i+0xbe>
   36742:	1d08      	adds	r0, r1, #4
   36744:	6018      	str	r0, [r3, #0]
   36746:	680d      	ldr	r5, [r1, #0]
   36748:	e005      	b.n	36756 <_printf_i+0xca>
   3674a:	0640      	lsls	r0, r0, #25
   3674c:	d5f9      	bpl.n	36742 <_printf_i+0xb6>
   3674e:	680d      	ldr	r5, [r1, #0]
   36750:	1d08      	adds	r0, r1, #4
   36752:	6018      	str	r0, [r3, #0]
   36754:	b2ad      	uxth	r5, r5
   36756:	4b59      	ldr	r3, [pc, #356]	; (368bc <_printf_i+0x230>)
   36758:	2708      	movs	r7, #8
   3675a:	9303      	str	r3, [sp, #12]
   3675c:	2a6f      	cmp	r2, #111	; 0x6f
   3675e:	d018      	beq.n	36792 <_printf_i+0x106>
   36760:	270a      	movs	r7, #10
   36762:	e016      	b.n	36792 <_printf_i+0x106>
   36764:	3145      	adds	r1, #69	; 0x45
   36766:	700a      	strb	r2, [r1, #0]
   36768:	4a54      	ldr	r2, [pc, #336]	; (368bc <_printf_i+0x230>)
   3676a:	9203      	str	r2, [sp, #12]
   3676c:	681a      	ldr	r2, [r3, #0]
   3676e:	6821      	ldr	r1, [r4, #0]
   36770:	1d10      	adds	r0, r2, #4
   36772:	6018      	str	r0, [r3, #0]
   36774:	6815      	ldr	r5, [r2, #0]
   36776:	0608      	lsls	r0, r1, #24
   36778:	d522      	bpl.n	367c0 <_printf_i+0x134>
   3677a:	07cb      	lsls	r3, r1, #31
   3677c:	d502      	bpl.n	36784 <_printf_i+0xf8>
   3677e:	2320      	movs	r3, #32
   36780:	4319      	orrs	r1, r3
   36782:	6021      	str	r1, [r4, #0]
   36784:	2710      	movs	r7, #16
   36786:	2d00      	cmp	r5, #0
   36788:	d103      	bne.n	36792 <_printf_i+0x106>
   3678a:	2320      	movs	r3, #32
   3678c:	6822      	ldr	r2, [r4, #0]
   3678e:	439a      	bics	r2, r3
   36790:	6022      	str	r2, [r4, #0]
   36792:	0023      	movs	r3, r4
   36794:	2200      	movs	r2, #0
   36796:	3343      	adds	r3, #67	; 0x43
   36798:	701a      	strb	r2, [r3, #0]
   3679a:	6863      	ldr	r3, [r4, #4]
   3679c:	60a3      	str	r3, [r4, #8]
   3679e:	2b00      	cmp	r3, #0
   367a0:	db5c      	blt.n	3685c <_printf_i+0x1d0>
   367a2:	2204      	movs	r2, #4
   367a4:	6821      	ldr	r1, [r4, #0]
   367a6:	4391      	bics	r1, r2
   367a8:	6021      	str	r1, [r4, #0]
   367aa:	2d00      	cmp	r5, #0
   367ac:	d158      	bne.n	36860 <_printf_i+0x1d4>
   367ae:	9e04      	ldr	r6, [sp, #16]
   367b0:	2b00      	cmp	r3, #0
   367b2:	d064      	beq.n	3687e <_printf_i+0x1f2>
   367b4:	0026      	movs	r6, r4
   367b6:	9b03      	ldr	r3, [sp, #12]
   367b8:	3642      	adds	r6, #66	; 0x42
   367ba:	781b      	ldrb	r3, [r3, #0]
   367bc:	7033      	strb	r3, [r6, #0]
   367be:	e05e      	b.n	3687e <_printf_i+0x1f2>
   367c0:	0648      	lsls	r0, r1, #25
   367c2:	d5da      	bpl.n	3677a <_printf_i+0xee>
   367c4:	b2ad      	uxth	r5, r5
   367c6:	e7d8      	b.n	3677a <_printf_i+0xee>
   367c8:	6809      	ldr	r1, [r1, #0]
   367ca:	681a      	ldr	r2, [r3, #0]
   367cc:	0608      	lsls	r0, r1, #24
   367ce:	d505      	bpl.n	367dc <_printf_i+0x150>
   367d0:	1d11      	adds	r1, r2, #4
   367d2:	6019      	str	r1, [r3, #0]
   367d4:	6813      	ldr	r3, [r2, #0]
   367d6:	6962      	ldr	r2, [r4, #20]
   367d8:	601a      	str	r2, [r3, #0]
   367da:	e006      	b.n	367ea <_printf_i+0x15e>
   367dc:	0649      	lsls	r1, r1, #25
   367de:	d5f7      	bpl.n	367d0 <_printf_i+0x144>
   367e0:	1d11      	adds	r1, r2, #4
   367e2:	6019      	str	r1, [r3, #0]
   367e4:	6813      	ldr	r3, [r2, #0]
   367e6:	8aa2      	ldrh	r2, [r4, #20]
   367e8:	801a      	strh	r2, [r3, #0]
   367ea:	2300      	movs	r3, #0
   367ec:	9e04      	ldr	r6, [sp, #16]
   367ee:	6123      	str	r3, [r4, #16]
   367f0:	e054      	b.n	3689c <_printf_i+0x210>
   367f2:	681a      	ldr	r2, [r3, #0]
   367f4:	1d11      	adds	r1, r2, #4
   367f6:	6019      	str	r1, [r3, #0]
   367f8:	6816      	ldr	r6, [r2, #0]
   367fa:	2100      	movs	r1, #0
   367fc:	6862      	ldr	r2, [r4, #4]
   367fe:	0030      	movs	r0, r6
   36800:	f000 f922 	bl	36a48 <memchr>
   36804:	2800      	cmp	r0, #0
   36806:	d001      	beq.n	3680c <_printf_i+0x180>
   36808:	1b80      	subs	r0, r0, r6
   3680a:	6060      	str	r0, [r4, #4]
   3680c:	6863      	ldr	r3, [r4, #4]
   3680e:	6123      	str	r3, [r4, #16]
   36810:	2300      	movs	r3, #0
   36812:	9a04      	ldr	r2, [sp, #16]
   36814:	7013      	strb	r3, [r2, #0]
   36816:	e041      	b.n	3689c <_printf_i+0x210>
   36818:	6923      	ldr	r3, [r4, #16]
   3681a:	0032      	movs	r2, r6
   3681c:	9906      	ldr	r1, [sp, #24]
   3681e:	9805      	ldr	r0, [sp, #20]
   36820:	9d07      	ldr	r5, [sp, #28]
   36822:	47a8      	blx	r5
   36824:	1c43      	adds	r3, r0, #1
   36826:	d043      	beq.n	368b0 <_printf_i+0x224>
   36828:	6823      	ldr	r3, [r4, #0]
   3682a:	2500      	movs	r5, #0
   3682c:	079b      	lsls	r3, r3, #30
   3682e:	d40f      	bmi.n	36850 <_printf_i+0x1c4>
   36830:	9b09      	ldr	r3, [sp, #36]	; 0x24
   36832:	68e0      	ldr	r0, [r4, #12]
   36834:	4298      	cmp	r0, r3
   36836:	da3d      	bge.n	368b4 <_printf_i+0x228>
   36838:	0018      	movs	r0, r3
   3683a:	e03b      	b.n	368b4 <_printf_i+0x228>
   3683c:	0022      	movs	r2, r4
   3683e:	2301      	movs	r3, #1
   36840:	3219      	adds	r2, #25
   36842:	9906      	ldr	r1, [sp, #24]
   36844:	9805      	ldr	r0, [sp, #20]
   36846:	9e07      	ldr	r6, [sp, #28]
   36848:	47b0      	blx	r6
   3684a:	1c43      	adds	r3, r0, #1
   3684c:	d030      	beq.n	368b0 <_printf_i+0x224>
   3684e:	3501      	adds	r5, #1
   36850:	68e3      	ldr	r3, [r4, #12]
   36852:	9a09      	ldr	r2, [sp, #36]	; 0x24
   36854:	1a9b      	subs	r3, r3, r2
   36856:	429d      	cmp	r5, r3
   36858:	dbf0      	blt.n	3683c <_printf_i+0x1b0>
   3685a:	e7e9      	b.n	36830 <_printf_i+0x1a4>
   3685c:	2d00      	cmp	r5, #0
   3685e:	d0a9      	beq.n	367b4 <_printf_i+0x128>
   36860:	9e04      	ldr	r6, [sp, #16]
   36862:	0028      	movs	r0, r5
   36864:	0039      	movs	r1, r7
   36866:	f7fc ffe7 	bl	33838 <__aeabi_uidivmod>
   3686a:	9b03      	ldr	r3, [sp, #12]
   3686c:	3e01      	subs	r6, #1
   3686e:	5c5b      	ldrb	r3, [r3, r1]
   36870:	0028      	movs	r0, r5
   36872:	7033      	strb	r3, [r6, #0]
   36874:	0039      	movs	r1, r7
   36876:	f7fc ff59 	bl	3372c <__udivsi3>
   3687a:	1e05      	subs	r5, r0, #0
   3687c:	d1f1      	bne.n	36862 <_printf_i+0x1d6>
   3687e:	2f08      	cmp	r7, #8
   36880:	d109      	bne.n	36896 <_printf_i+0x20a>
   36882:	6823      	ldr	r3, [r4, #0]
   36884:	07db      	lsls	r3, r3, #31
   36886:	d506      	bpl.n	36896 <_printf_i+0x20a>
   36888:	6863      	ldr	r3, [r4, #4]
   3688a:	6922      	ldr	r2, [r4, #16]
   3688c:	4293      	cmp	r3, r2
   3688e:	dc02      	bgt.n	36896 <_printf_i+0x20a>
   36890:	2330      	movs	r3, #48	; 0x30
   36892:	3e01      	subs	r6, #1
   36894:	7033      	strb	r3, [r6, #0]
   36896:	9b04      	ldr	r3, [sp, #16]
   36898:	1b9b      	subs	r3, r3, r6
   3689a:	6123      	str	r3, [r4, #16]
   3689c:	9b07      	ldr	r3, [sp, #28]
   3689e:	aa09      	add	r2, sp, #36	; 0x24
   368a0:	9300      	str	r3, [sp, #0]
   368a2:	0021      	movs	r1, r4
   368a4:	9b06      	ldr	r3, [sp, #24]
   368a6:	9805      	ldr	r0, [sp, #20]
   368a8:	f7ff fe82 	bl	365b0 <_printf_common>
   368ac:	1c43      	adds	r3, r0, #1
   368ae:	d1b3      	bne.n	36818 <_printf_i+0x18c>
   368b0:	2001      	movs	r0, #1
   368b2:	4240      	negs	r0, r0
   368b4:	b00b      	add	sp, #44	; 0x2c
   368b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   368b8:	0003afd4 	.word	0x0003afd4
   368bc:	0003afc3 	.word	0x0003afc3

000368c0 <__sread>:
   368c0:	b570      	push	{r4, r5, r6, lr}
   368c2:	000c      	movs	r4, r1
   368c4:	250e      	movs	r5, #14
   368c6:	5f49      	ldrsh	r1, [r1, r5]
   368c8:	f000 f8f0 	bl	36aac <_read_r>
   368cc:	2800      	cmp	r0, #0
   368ce:	db03      	blt.n	368d8 <__sread+0x18>
   368d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
   368d2:	181b      	adds	r3, r3, r0
   368d4:	6563      	str	r3, [r4, #84]	; 0x54
   368d6:	bd70      	pop	{r4, r5, r6, pc}
   368d8:	89a3      	ldrh	r3, [r4, #12]
   368da:	4a02      	ldr	r2, [pc, #8]	; (368e4 <__sread+0x24>)
   368dc:	4013      	ands	r3, r2
   368de:	81a3      	strh	r3, [r4, #12]
   368e0:	e7f9      	b.n	368d6 <__sread+0x16>
   368e2:	46c0      	nop			; (mov r8, r8)
   368e4:	ffffefff 	.word	0xffffefff

000368e8 <__swrite>:
   368e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   368ea:	001f      	movs	r7, r3
   368ec:	898b      	ldrh	r3, [r1, #12]
   368ee:	0005      	movs	r5, r0
   368f0:	000c      	movs	r4, r1
   368f2:	0016      	movs	r6, r2
   368f4:	05db      	lsls	r3, r3, #23
   368f6:	d505      	bpl.n	36904 <__swrite+0x1c>
   368f8:	230e      	movs	r3, #14
   368fa:	5ec9      	ldrsh	r1, [r1, r3]
   368fc:	2200      	movs	r2, #0
   368fe:	2302      	movs	r3, #2
   36900:	f000 f88e 	bl	36a20 <_lseek_r>
   36904:	89a3      	ldrh	r3, [r4, #12]
   36906:	4a05      	ldr	r2, [pc, #20]	; (3691c <__swrite+0x34>)
   36908:	0028      	movs	r0, r5
   3690a:	4013      	ands	r3, r2
   3690c:	81a3      	strh	r3, [r4, #12]
   3690e:	0032      	movs	r2, r6
   36910:	230e      	movs	r3, #14
   36912:	5ee1      	ldrsh	r1, [r4, r3]
   36914:	003b      	movs	r3, r7
   36916:	f000 f839 	bl	3698c <_write_r>
   3691a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3691c:	ffffefff 	.word	0xffffefff

00036920 <__sseek>:
   36920:	b570      	push	{r4, r5, r6, lr}
   36922:	000c      	movs	r4, r1
   36924:	250e      	movs	r5, #14
   36926:	5f49      	ldrsh	r1, [r1, r5]
   36928:	f000 f87a 	bl	36a20 <_lseek_r>
   3692c:	89a3      	ldrh	r3, [r4, #12]
   3692e:	1c42      	adds	r2, r0, #1
   36930:	d103      	bne.n	3693a <__sseek+0x1a>
   36932:	4a05      	ldr	r2, [pc, #20]	; (36948 <__sseek+0x28>)
   36934:	4013      	ands	r3, r2
   36936:	81a3      	strh	r3, [r4, #12]
   36938:	bd70      	pop	{r4, r5, r6, pc}
   3693a:	2280      	movs	r2, #128	; 0x80
   3693c:	0152      	lsls	r2, r2, #5
   3693e:	4313      	orrs	r3, r2
   36940:	81a3      	strh	r3, [r4, #12]
   36942:	6560      	str	r0, [r4, #84]	; 0x54
   36944:	e7f8      	b.n	36938 <__sseek+0x18>
   36946:	46c0      	nop			; (mov r8, r8)
   36948:	ffffefff 	.word	0xffffefff

0003694c <__sclose>:
   3694c:	b510      	push	{r4, lr}
   3694e:	230e      	movs	r3, #14
   36950:	5ec9      	ldrsh	r1, [r1, r3]
   36952:	f000 f82f 	bl	369b4 <_close_r>
   36956:	bd10      	pop	{r4, pc}

00036958 <strchr>:
   36958:	b2c9      	uxtb	r1, r1
   3695a:	7803      	ldrb	r3, [r0, #0]
   3695c:	2b00      	cmp	r3, #0
   3695e:	d004      	beq.n	3696a <strchr+0x12>
   36960:	4299      	cmp	r1, r3
   36962:	d100      	bne.n	36966 <strchr+0xe>
   36964:	4770      	bx	lr
   36966:	3001      	adds	r0, #1
   36968:	e7f7      	b.n	3695a <strchr+0x2>
   3696a:	424b      	negs	r3, r1
   3696c:	4159      	adcs	r1, r3
   3696e:	4249      	negs	r1, r1
   36970:	4008      	ands	r0, r1
   36972:	e7f7      	b.n	36964 <strchr+0xc>

00036974 <__ascii_wctomb>:
   36974:	1e0b      	subs	r3, r1, #0
   36976:	d004      	beq.n	36982 <__ascii_wctomb+0xe>
   36978:	2aff      	cmp	r2, #255	; 0xff
   3697a:	d904      	bls.n	36986 <__ascii_wctomb+0x12>
   3697c:	238a      	movs	r3, #138	; 0x8a
   3697e:	6003      	str	r3, [r0, #0]
   36980:	3b8b      	subs	r3, #139	; 0x8b
   36982:	0018      	movs	r0, r3
   36984:	4770      	bx	lr
   36986:	700a      	strb	r2, [r1, #0]
   36988:	2301      	movs	r3, #1
   3698a:	e7fa      	b.n	36982 <__ascii_wctomb+0xe>

0003698c <_write_r>:
   3698c:	b570      	push	{r4, r5, r6, lr}
   3698e:	0005      	movs	r5, r0
   36990:	0008      	movs	r0, r1
   36992:	0011      	movs	r1, r2
   36994:	2200      	movs	r2, #0
   36996:	4c06      	ldr	r4, [pc, #24]	; (369b0 <_write_r+0x24>)
   36998:	6022      	str	r2, [r4, #0]
   3699a:	001a      	movs	r2, r3
   3699c:	f7f5 fa28 	bl	2bdf0 <_write>
   369a0:	1c43      	adds	r3, r0, #1
   369a2:	d103      	bne.n	369ac <_write_r+0x20>
   369a4:	6823      	ldr	r3, [r4, #0]
   369a6:	2b00      	cmp	r3, #0
   369a8:	d000      	beq.n	369ac <_write_r+0x20>
   369aa:	602b      	str	r3, [r5, #0]
   369ac:	bd70      	pop	{r4, r5, r6, pc}
   369ae:	46c0      	nop			; (mov r8, r8)
   369b0:	200058d0 	.word	0x200058d0

000369b4 <_close_r>:
   369b4:	2300      	movs	r3, #0
   369b6:	b570      	push	{r4, r5, r6, lr}
   369b8:	4c06      	ldr	r4, [pc, #24]	; (369d4 <_close_r+0x20>)
   369ba:	0005      	movs	r5, r0
   369bc:	0008      	movs	r0, r1
   369be:	6023      	str	r3, [r4, #0]
   369c0:	f7f5 fa6a 	bl	2be98 <_close>
   369c4:	1c43      	adds	r3, r0, #1
   369c6:	d103      	bne.n	369d0 <_close_r+0x1c>
   369c8:	6823      	ldr	r3, [r4, #0]
   369ca:	2b00      	cmp	r3, #0
   369cc:	d000      	beq.n	369d0 <_close_r+0x1c>
   369ce:	602b      	str	r3, [r5, #0]
   369d0:	bd70      	pop	{r4, r5, r6, pc}
   369d2:	46c0      	nop			; (mov r8, r8)
   369d4:	200058d0 	.word	0x200058d0

000369d8 <_fstat_r>:
   369d8:	2300      	movs	r3, #0
   369da:	b570      	push	{r4, r5, r6, lr}
   369dc:	4c06      	ldr	r4, [pc, #24]	; (369f8 <_fstat_r+0x20>)
   369de:	0005      	movs	r5, r0
   369e0:	0008      	movs	r0, r1
   369e2:	0011      	movs	r1, r2
   369e4:	6023      	str	r3, [r4, #0]
   369e6:	f7f5 fa61 	bl	2beac <_fstat>
   369ea:	1c43      	adds	r3, r0, #1
   369ec:	d103      	bne.n	369f6 <_fstat_r+0x1e>
   369ee:	6823      	ldr	r3, [r4, #0]
   369f0:	2b00      	cmp	r3, #0
   369f2:	d000      	beq.n	369f6 <_fstat_r+0x1e>
   369f4:	602b      	str	r3, [r5, #0]
   369f6:	bd70      	pop	{r4, r5, r6, pc}
   369f8:	200058d0 	.word	0x200058d0

000369fc <_isatty_r>:
   369fc:	2300      	movs	r3, #0
   369fe:	b570      	push	{r4, r5, r6, lr}
   36a00:	4c06      	ldr	r4, [pc, #24]	; (36a1c <_isatty_r+0x20>)
   36a02:	0005      	movs	r5, r0
   36a04:	0008      	movs	r0, r1
   36a06:	6023      	str	r3, [r4, #0]
   36a08:	f7f5 fa5e 	bl	2bec8 <_isatty>
   36a0c:	1c43      	adds	r3, r0, #1
   36a0e:	d103      	bne.n	36a18 <_isatty_r+0x1c>
   36a10:	6823      	ldr	r3, [r4, #0]
   36a12:	2b00      	cmp	r3, #0
   36a14:	d000      	beq.n	36a18 <_isatty_r+0x1c>
   36a16:	602b      	str	r3, [r5, #0]
   36a18:	bd70      	pop	{r4, r5, r6, pc}
   36a1a:	46c0      	nop			; (mov r8, r8)
   36a1c:	200058d0 	.word	0x200058d0

00036a20 <_lseek_r>:
   36a20:	b570      	push	{r4, r5, r6, lr}
   36a22:	0005      	movs	r5, r0
   36a24:	0008      	movs	r0, r1
   36a26:	0011      	movs	r1, r2
   36a28:	2200      	movs	r2, #0
   36a2a:	4c06      	ldr	r4, [pc, #24]	; (36a44 <_lseek_r+0x24>)
   36a2c:	6022      	str	r2, [r4, #0]
   36a2e:	001a      	movs	r2, r3
   36a30:	f7f5 fa53 	bl	2beda <_lseek>
   36a34:	1c43      	adds	r3, r0, #1
   36a36:	d103      	bne.n	36a40 <_lseek_r+0x20>
   36a38:	6823      	ldr	r3, [r4, #0]
   36a3a:	2b00      	cmp	r3, #0
   36a3c:	d000      	beq.n	36a40 <_lseek_r+0x20>
   36a3e:	602b      	str	r3, [r5, #0]
   36a40:	bd70      	pop	{r4, r5, r6, pc}
   36a42:	46c0      	nop			; (mov r8, r8)
   36a44:	200058d0 	.word	0x200058d0

00036a48 <memchr>:
   36a48:	b2c9      	uxtb	r1, r1
   36a4a:	1882      	adds	r2, r0, r2
   36a4c:	4290      	cmp	r0, r2
   36a4e:	d101      	bne.n	36a54 <memchr+0xc>
   36a50:	2000      	movs	r0, #0
   36a52:	4770      	bx	lr
   36a54:	7803      	ldrb	r3, [r0, #0]
   36a56:	428b      	cmp	r3, r1
   36a58:	d0fb      	beq.n	36a52 <memchr+0xa>
   36a5a:	3001      	adds	r0, #1
   36a5c:	e7f6      	b.n	36a4c <memchr+0x4>

00036a5e <_realloc_r>:
   36a5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   36a60:	0007      	movs	r7, r0
   36a62:	000d      	movs	r5, r1
   36a64:	0016      	movs	r6, r2
   36a66:	2900      	cmp	r1, #0
   36a68:	d105      	bne.n	36a76 <_realloc_r+0x18>
   36a6a:	0011      	movs	r1, r2
   36a6c:	f7fe fe9e 	bl	357ac <_malloc_r>
   36a70:	0004      	movs	r4, r0
   36a72:	0020      	movs	r0, r4
   36a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   36a76:	2a00      	cmp	r2, #0
   36a78:	d103      	bne.n	36a82 <_realloc_r+0x24>
   36a7a:	f7fe fe4d 	bl	35718 <_free_r>
   36a7e:	0034      	movs	r4, r6
   36a80:	e7f7      	b.n	36a72 <_realloc_r+0x14>
   36a82:	f000 f827 	bl	36ad4 <_malloc_usable_size_r>
   36a86:	002c      	movs	r4, r5
   36a88:	4286      	cmp	r6, r0
   36a8a:	d9f2      	bls.n	36a72 <_realloc_r+0x14>
   36a8c:	0031      	movs	r1, r6
   36a8e:	0038      	movs	r0, r7
   36a90:	f7fe fe8c 	bl	357ac <_malloc_r>
   36a94:	1e04      	subs	r4, r0, #0
   36a96:	d0ec      	beq.n	36a72 <_realloc_r+0x14>
   36a98:	0029      	movs	r1, r5
   36a9a:	0032      	movs	r2, r6
   36a9c:	f7fe fe18 	bl	356d0 <memcpy>
   36aa0:	0029      	movs	r1, r5
   36aa2:	0038      	movs	r0, r7
   36aa4:	f7fe fe38 	bl	35718 <_free_r>
   36aa8:	e7e3      	b.n	36a72 <_realloc_r+0x14>
	...

00036aac <_read_r>:
   36aac:	b570      	push	{r4, r5, r6, lr}
   36aae:	0005      	movs	r5, r0
   36ab0:	0008      	movs	r0, r1
   36ab2:	0011      	movs	r1, r2
   36ab4:	2200      	movs	r2, #0
   36ab6:	4c06      	ldr	r4, [pc, #24]	; (36ad0 <_read_r+0x24>)
   36ab8:	6022      	str	r2, [r4, #0]
   36aba:	001a      	movs	r2, r3
   36abc:	f7f5 f96e 	bl	2bd9c <_read>
   36ac0:	1c43      	adds	r3, r0, #1
   36ac2:	d103      	bne.n	36acc <_read_r+0x20>
   36ac4:	6823      	ldr	r3, [r4, #0]
   36ac6:	2b00      	cmp	r3, #0
   36ac8:	d000      	beq.n	36acc <_read_r+0x20>
   36aca:	602b      	str	r3, [r5, #0]
   36acc:	bd70      	pop	{r4, r5, r6, pc}
   36ace:	46c0      	nop			; (mov r8, r8)
   36ad0:	200058d0 	.word	0x200058d0

00036ad4 <_malloc_usable_size_r>:
   36ad4:	1f0b      	subs	r3, r1, #4
   36ad6:	681b      	ldr	r3, [r3, #0]
   36ad8:	1f18      	subs	r0, r3, #4
   36ada:	2b00      	cmp	r3, #0
   36adc:	da01      	bge.n	36ae2 <_malloc_usable_size_r+0xe>
   36ade:	580b      	ldr	r3, [r1, r0]
   36ae0:	18c0      	adds	r0, r0, r3
   36ae2:	4770      	bx	lr

00036ae4 <pcWelcomeMessage>:
   36ae4:	7246 6565 5452 534f 4320 494c 0d2e 540a     FreeRTOS CLI...T
   36af4:	7079 2065 6548 706c 7420 206f 6976 7765     ype Help to view
   36b04:	6120 6c20 7369 2074 666f 7220 6765 7369      a list of regis
   36b14:	6574 6572 2064 6f63 6d6d 6e61 7364 0d2e     tered commands..
   36b24:	000a 0000 6d69 0075 6d69 3a75 5220 7465     ....imu.imu: Ret
   36b34:	7275 736e 6120 7620 6c61 6575 6620 6f72     urns a value fro
   36b44:	206d 6874 2065 4d49 0d55 000a 7766 0000     m the IMU...fw..
   36b54:	7766 203a 6f44 6e77 6f6c 6461 6120 6620     fw: Download a f
   36b64:	6c69 2065 6e61 2064 6570 6672 726f 206d     ile and perform 
   36b74:	6e61 4620 2057 7075 6164 6574 0a0d 0000     an FW update....
   36b84:	6572 6573 0074 0000 6572 6573 3a74 5220     reset...reset: R
   36b94:	7365 7465 2073 6874 2065 6564 6976 6563     esets the device
   36ba4:	0a0d 0000 656c 0064 656c 2064 6b5b 7965     ....led.led [key
   36bb4:	756e 5d6d 525b 5b5d 5d47 425b 3a5d 5320     num][R][G][B]: S
   36bc4:	7465 2073 6874 2065 6967 6576 206e 454c     ets the given LE
   36bd4:	2044 6f74 7420 6568 6720 7669 6e65 5220     D to the given R
   36be4:	472c 422c 7620 6c61 6575 2e73 0a0d 0000     ,G,B values.....
   36bf4:	6567 6274 7475 6f74 006e 0000 6567 6274     getbutton...getb
   36c04:	7475 6f74 3a6e 5020 6f72 6563 7373 7365     utton: Processes
   36c14:	6120 646e 7020 6972 746e 2073 6874 2065      and prints the 
   36c24:	4946 4f46 6220 7475 6f74 206e 7562 6666     FIFO button buff
   36c34:	7265 6620 6f72 206d 6874 2065 6573 7365     er from the sees
   36c44:	7761 0d2e 000a 0000 6567 6474 7369 6174     aw......getdista
   36c54:	636e 0065 6567 6474 7369 6174 636e 3a65     nce.getdistance:
   36c64:	5220 7465 7275 736e 7420 6568 6420 7369      Returns the dis
   36c74:	6174 636e 2065 7266 6d6f 7420 6568 5520     tance from the U
   36c84:	2d53 3031 2030 6553 736e 726f 0d2e 000a     S-100 Sensor....
   36c94:	6167 656d 0000 0000 6167 656d 203a 6553     game....game: Se
   36ca4:	646e 2073 7564 6d6d 2079 6167 656d 6420     nds dummy game d
   36cb4:	7461 0d61 000a 0000 3269 0063 3269 3a63     ata.....i2c.i2c:
   36cc4:	5320 6163 736e 4920 4332 6220 7375 0a0d      Scans I2C bus..
   36cd4:	0000 0000 6574 7473 0000 0000 6574 7473     ....test....test
   36ce4:	203a 6553 646e 2073 6574 7473 6420 7461     : Sends test dat
   36cf4:	0d61 000a 6c63 0073 6c63 3a73 4320 656c     a...cls.cls: Cle
   36d04:	7261 2073 6874 2065 6574 6d72 6e69 6c61     ars the terminal
   36d14:	7320 7263 6565 0d6e 000a 0000 6f43 6c75      screen.....Coul
   36d24:	2064 6f6e 2074 6c61 6f6c 6163 6574 7320     d not allocate s
   36d34:	6d65 7061 6f68 6572 0a0d 0000 0a0d 0000     emaphore........
   36d44:	616f 0000 6325 325b 0d4b 003e 2008 0008     oa..%c[2K.>.. ..
   36d54:	6341 6563 656c 6172 6974 6e6f 5b20 676d     Acceleration [mg
   36d64:	3a5d 2058 6425 5909 2520 0964 205a 6425     ]:X %d.Y %d.Z %d
   36d74:	0a0d 0000 6f4e 6420 7461 2061 6572 6461     ....No data read
   36d84:	2179 0d20 000a 0000 6325 325b 004a 0000     y! .....%c[2J...
   36d94:	7453 6475 6e65 7374 7420 206f 6966 6c6c     Students to fill
   36da4:	6f20 7475 0021 0000 7542 7474 6e6f 2320      out!...Button #
   36db4:	6425 6920 2073 6572 656c 7361 6465 0a0d     %d is released..
   36dc4:	0000 0000 7542 7474 6e6f 2320 6425 6920     ....Button #%d i
   36dd4:	2073 7270 7365 6573 0d64 000a 6553 736e     s pressed...Sens
   36de4:	726f 4520 7272 726f 2520 2164 0a0d 0000     or Error %d!....
   36df4:	6944 7473 6e61 6563 203a 6425 6d20 0d6d     Distance: %d mm.
   36e04:	000a 0000 6944 7473 6e61 6563 4420 7461     ....Distance Dat
   36e14:	2061 514d 5454 5020 736f 0d74 000a 0000     a MQTT Post.....
   36e24:	7544 6d6d 2079 6147 656d 4420 7461 2061     Dummy Game Data 
   36e34:	514d 5454 5020 736f 0d74 000a 6554 7473     MQTT Post...Test
   36e44:	4420 7461 2061 514d 5454 5020 736f 0d74      Data MQTT Post.
   36e54:	000a 0000 2030 3120 2020 2032 3320 2020     ....0  1  2  3  
   36e64:	2034 3520 2020 2036 3720 2020 2038 3920     4  5  6  7  8  9
   36e74:	2020 2061 6220 2020 2063 6420 2020 2065       a  b  c  d  e 
   36e84:	6620 0a0d 0000 0000 3025 7832 203a 0000      f......%02x: ..
   36e94:	2058 0000                                   X ..

00036e98 <xImuGetCommand>:
   36e98:	6b28 0003 6b2c 0003 3e6d 0001 0000 0000     (k..,k..m>......

00036ea8 <xOTAUCommand>:
   36ea8:	6b50 0003 6b54 0003 3fa9 0001 0000 0000     Pk..Tk...?......

00036eb8 <xResetCommand>:
   36eb8:	6b84 0003 6b8c 0003 3fc9 0001 0000 0000     .k...k...?......

00036ec8 <xNeotrellisTurnLEDCommand>:
   36ec8:	6ba8 0003 6bac 0003 3fe9 0001 0004 0000     .k...k...?......

00036ed8 <xNeotrellisProcessButtonCommand>:
   36ed8:	6bf4 0003 6c00 0003 4015 0001 0000 0000     .k...l...@......

00036ee8 <xDistanceSensorGetDistance>:
   36ee8:	6c4c 0003 6c58 0003 4119 0001 0000 0000     Ll..Xl...A......

00036ef8 <xSendDummyGameData>:
   36ef8:	6c94 0003 6c9c 0003 41bd 0001 0000 0000     .l...l...A......

00036f08 <xI2cScan>:
   36f08:	6cbc 0003 6cc0 0003 42a5 0001 0000 0000     .l...l...B......

00036f18 <xSendTestData>:
   36f18:	6cd8 0003 6ce0 0003 4259 0001 0000 0000     .l...l..YB......

00036f28 <xClearScreen>:
   36f28:	6cf8 0003 6cfc 0003 3f61 0001 0000 0000     .l...l..a?......
   36f38:	5345 3545 3631 2d20 4320 6e6f 7274 6c6f     ESE516 - Control
   36f48:	4920 696e 2074 6f43 6564 0a0d 0000 0000      Init Code......
   36f58:	5245 4f52 2052 6e49 7469 6169 696c 697a     ERROR Initializi
   36f68:	676e 4320 6e6f 7274 6c6f 4420 7461 2061     ng Control Data 
   36f78:	7571 7565 7365 0d21 000a 0000 6f43 746e     queues!.....Cont
   36f88:	6f72 206c 6854 6572 6461 203a 6f43 736e     rol Thread: Cons
   36f98:	6d75 6465 6720 6d61 2065 6170 6b63 7465     umed game packet
   36fa8:	0d21 000a 6f43 746e 6f72 206c 6854 6572     !...Control Thre
   36fb8:	6461 203a 6f43 6c75 2064 6f6e 2074 6573     ad: Could not se
   36fc8:	646e 6720 6d61 2065 6170 6b63 7465 0d21     nd game packet!.
   36fd8:	000a 0000 6f43 6c75 2064 6f6e 2074 6e69     ....Could not in
   36fe8:	7469 6169 696c 657a 4420 7369 6174 636e     itialize Distanc
   36ff8:	2065 6553 736e 726f 0021 0000               e Sensor!...

00037004 <msgBaseGetHWID>:
   37004:	0100 0000                                   ....

00037008 <msgNeopixelPin>:
   37008:	010e 0003                                   ....

0003700c <msgNeopixelSpeed>:
   3700c:	020e 0001                                   ....

00037010 <msgNeopixelBufLength>:
   37010:	030e 3000                                   ...0

00037014 <msgKeypadEnableInt>:
   37014:	0210 0001                                   ....

00037018 <msgKeypadGetCount>:
   37018:	0410 0000 7245 6f72 2072 6e69 7469 6169     ....Error initia
   37028:	696c 697a 676e 5320 6565 6173 2177 722f     lizing Seesaw!/r
   37038:	6e2f 0000 7245 6f72 2f72 2f72 006e 0000     /n..Error/r/n...
   37048:	6f46 6e75 2064 6553 7365 7761 2f21 2f72     Found Seesaw!/r/
   37058:	006e 0000 6f43 6c75 2064 6f6e 2074 7277     n...Could not wr
   37068:	7469 2065 6553 7365 7761 7020 6e69 2f21     ite Seesaw pin!/
   37078:	2f72 006e 6f43 6c75 2064 6f6e 2074 6573     r/n.Could not se
   37088:	2074 6573 7365 7761 4e20 6f65 6970 6578     t seesaw Neopixe
   37098:	206c 7073 6565 2164 722f 6e2f 0000 0000     l speed!/r/n....
   370a8:	6f43 6c75 2064 6f6e 2074 6573 2074 6573     Could not set se
   370b8:	7365 7761 4e20 6f65 6970 6578 206c 756e     esaw Neopixel nu
   370c8:	626d 7265 6f20 2066 6564 6976 6563 2f73     mber of devices/
   370d8:	2f72 006e 7245 6f72 2072 6572 6461 6e69     r/n.Error readin
   370e8:	2067 6553 7365 7761 6320 756f 746e 2173     g Seesaw counts!
   370f8:	722f 6e2f 0000 0000 1010 0000 050e 0000     /r/n............
   37108:	6f43 6c75 2064 6f6e 2074 6e69 7469 6169     Could not initia
   37118:	696c 657a 4b20 7965 6170 2164 722f 6e2f     lize Keypad!/r/n
   37128:	0000 0000 4955 5420 7361 206b 7453 7261     ....UI Task Star
   37138:	6574 2164 0000 0000                         ted!....

00037140 <main_mqtt_broker>:
   37140:	7262 6b6f 7265 682e 7669 6d65 2e71 6f63     broker.hivemq.co
   37150:	006d 0000 3025 6433 0000 0000 7473 7261     m...%03d....star
   37160:	5f74 6f64 6e77 6f6c 6461 203a 4d4d 2043     t_download: MMC 
   37170:	7473 726f 6761 2065 6f6e 2074 6572 6461     storage not read
   37180:	2e79 0a0d 0000 0000 7473 7261 5f74 6f64     y.......start_do
   37190:	6e77 6f6c 6461 203a 6957 462d 2069 7369     wnload: Wi-Fi is
   371a0:	6e20 746f 6320 6e6f 656e 7463 6465 0d2e      not connected..
   371b0:	000a 0000 7473 7261 5f74 6f64 6e77 6f6c     ....start_downlo
   371c0:	6461 203a 6572 7571 7365 2074 7369 7320     ad: request is s
   371d0:	6e65 2074 6c61 6572 6461 2e79 0a0d 0000     ent already.....
   371e0:	7473 7261 5f74 6f64 6e77 6f6c 6461 203a     start_download: 
   371f0:	7572 6e6e 6e69 2067 6f64 6e77 6f6c 6461     running download
   37200:	6120 726c 6165 7964 0d2e 000a 7473 7261      already....star
   37210:	5f74 6f64 6e77 6f6c 6461 203a 6573 646e     t_download: send
   37220:	6e69 2067 5448 5054 7220 7165 6575 7473     ing HTTP request
   37230:	2e2e 0d2e 000a 0000 7468 7074 3a73 2f2f     ........https://
   37240:	3437 322e 3533 312e 3537 342e 2f31 6554     74.235.175.41/Te
   37250:	7473 2e42 6962 006e 7473 726f 5f65 6966     stB.bin.store_fi
   37260:	656c 705f 6361 656b 3a74 6520 706d 7974     le_packet: empty
   37270:	6420 7461 2e61 0a0d 0000 0000 7473 726f      data.......stor
   37280:	5f65 6966 656c 705f 6361 656b 3a74 6620     e_file_packet: f
   37290:	6c69 2065 616e 656d 6920 2073 6e69 6176     ile name is inva
   372a0:	696c 2e64 4420 776f 6c6e 616f 2064 6163     lid. Download ca
   372b0:	636e 6c65 6465 0d2e 000a 0000 7473 726f     nceled......stor
   372c0:	5f65 6966 656c 705f 6361 656b 3a74 6320     e_file_packet: c
   372d0:	6572 7461 6e69 2067 6966 656c 5b20 7325     reating file [%s
   372e0:	0d5d 000a 7473 726f 5f65 6966 656c 705f     ]...store_file_p
   372f0:	6361 656b 3a74 6620 6c69 2065 7263 6165     acket: file crea
   37300:	6974 6e6f 6520 7272 726f 2021 6572 3a74     tion error! ret:
   37310:	6425 0a0d 0000 0000 7473 726f 5f65 6966     %d......store_fi
   37320:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
   37330:	7277 7469 2065 7265 6f72 2c72 6420 776f     write error, dow
   37340:	6c6e 616f 2064 6163 636e 6c65 6465 0d2e     nload canceled..
   37350:	000a 0000 7473 726f 5f65 6966 656c 705f     ....store_file_p
   37360:	6361 656b 3a74 7220 6365 6965 6576 5b64     acket: received[
   37370:	6c25 5d75 202c 6966 656c 7320 7a69 5b65     %lu], file size[
   37380:	6c25 5d75 0a0d 0000 7473 726f 5f65 6966     %lu]....store_fi
   37390:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
   373a0:	6f64 6e77 6f6c 6461 6465 7320 6375 6563     downloaded succe
   373b0:	7373 7566 6c6c 2e79 0a0d 0000 7468 7074     ssfully.....http
   373c0:	635f 696c 6e65 5f74 6163 6c6c 6162 6b63     _client_callback
   373d0:	203a 5448 5054 6320 696c 6e65 2074 6f73     : HTTP client so
   373e0:	6b63 7465 6320 6e6f 656e 7463 6465 0d2e     cket connected..
   373f0:	000a 0000 7468 7074 635f 696c 6e65 5f74     ....http_client_
   37400:	6163 6c6c 6162 6b63 203a 6572 7571 7365     callback: reques
   37410:	2074 6f63 706d 656c 6574 2e64 0a0d 0000     t completed.....
   37420:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
   37430:	6162 6b63 203a 6572 6563 7669 6465 7220     back: received r
   37440:	7365 6f70 736e 2065 7525 6420 7461 2061     esponse %u data 
   37450:	6973 657a 2520 0d75 000a 0000 7468 7074     size %u.....http
   37460:	635f 696c 6e65 5f74 6163 6c6c 6162 6b63     _client_callback
   37470:	203a 6964 6373 6e6f 656e 7463 6f69 206e     : disconnection 
   37480:	6572 7361 6e6f 253a 0d64 000a 6572 6f73     reason:%d...reso
   37490:	766c 5f65 6263 203a 7325 4920 2050 6461     lve_cb: %s IP ad
   374a0:	7264 7365 2073 7369 2520 2e64 6425 252e     dress is %d.%d.%
   374b0:	2e64 6425 0a0d 0a0d 0000 0000 6977 6966     d.%d........wifi
   374c0:	635f 3a62 4d20 4d32 575f 4649 5f49 4f43     _cb: M2M_WIFI_CO
   374d0:	4e4e 4345 4554 0d44 000a 0000 6977 6966     NNECTED.....wifi
   374e0:	635f 3a62 4d20 4d32 575f 4649 5f49 4944     _cb: M2M_WIFI_DI
   374f0:	4353 4e4f 454e 5443 4445 0a0d 0000 0000     SCONNECTED......
   37500:	5761 3174 3332 3534 3736 0000 7645 506f     aWt1234567..EvoP
   37510:	6968 6c6c 0079 0000 6977 6966 635f 3a62     hilly...wifi_cb:
   37520:	4920 2050 6461 7264 7365 2073 7369 2520      IP address is %
   37530:	2e75 7525 252e 2e75 7525 0a0d 0000 0000     u.%u.%u.%u......
   37540:	7245 6f72 2072 6f63 6e6e 6365 6974 676e     Error connecting
   37550:	7420 206f 514d 5454 4220 6f72 656b 2172      to MQTT Broker!
   37560:	0a0d 0000 6e69 7469 735f 6f74 6172 6567     ....init_storage
   37570:	203a 6c70 6165 6573 7020 756c 2067 6e61     : please plug an
   37580:	5320 2f44 4d4d 2043 6163 6472 6920 206e      SD/MMC card in 
   37590:	6c73 746f 2e2e 0d2e 000a 0000 6e69 7469     slot........init
   375a0:	735f 6f74 6172 6567 203a 4453 4320 7261     _storage: SD Car
   375b0:	2064 6e69 7473 6c61 206c 6166 6c69 6465     d install failed
   375c0:	0d2e 000a 6e69 7469 735f 6f74 6172 6567     ....init_storage
   375d0:	203a 7274 2079 6e75 6c70 6775 6120 646e     : try unplug and
   375e0:	7220 2d65 6c70 6775 7420 6568 6320 7261      re-plug the car
   375f0:	2e64 0a0d 0000 0000 6e69 7469 735f 6f74     d.......init_sto
   37600:	6172 6567 203a 6f6d 6e75 6974 676e 5320     rage: mounting S
   37610:	2044 6163 6472 2e2e 0d2e 000a 6e69 7469     D card......init
   37620:	735f 6f74 6172 6567 203a 4453 6320 7261     _storage: SD car
   37630:	2064 6f6d 6e75 2074 6166 6c69 6465 2021     d mount failed! 
   37640:	7228 7365 2520 2964 0a0d 0000 6e69 7469     (res %d)....init
   37650:	735f 6f74 6172 6567 203a 4453 6320 7261     _storage: SD car
   37660:	2064 6f6d 6e75 2074 4b4f 0d2e 000a 0000     d mount OK......
   37670:	6f63 666e 6769 7275 5f65 7468 7074 635f     configure_http_c
   37680:	696c 6e65 3a74 4820 5454 2050 6c63 6569     lient: HTTP clie
   37690:	746e 6920 696e 6974 6c61 7a69 7461 6f69     nt initializatio
   376a0:	206e 6166 6c69 6465 2021 7228 7365 2520     n failed! (res %
   376b0:	2964 0a0d 0000 0000 0a0d 2520 2a2e 0073     d)........ %.*s.
   376c0:	6772 2862 0000 0000 0a0d 4752 2042 6425     rgb(......RGB %d
   376d0:	2520 2064 6425 0a0d 0000 0000 227b 6167      %d %d......{"ga
   376e0:	656d 3a22 005b 0000 0a0d 6147 656d 6d20     me":[.....Game m
   376f0:	7365 6173 6567 7220 6365 6965 6576 2164     essage received!
   37700:	0a0d 0000 2e25 732a 0000 0000 0a0d 6150     ....%.*s......Pa
   37710:	7372 6465 4320 6d6f 616d 646e 203a 0000     rsed Command: ..
   37720:	6425 002c 0a0d 6553 746e 7020 616c 2079     %d,...Sent play 
   37730:	6f74 6320 6e6f 7274 6c6f 0d21 000a 0000     to control!.....
   37740:	0a0d 6147 656d 6d20 7365 6173 6567 7220     ..Game message r
   37750:	6365 6965 6576 2064 7562 2074 6f6e 2074     eceived but not 
   37760:	6e75 6564 7372 6f74 646f 0d21 000a 0000     understood!.....
   37770:	3e20 203e 0000 0000 3150 4c5f 4445 455f      >> ....P1_LED_E
   37780:	4553 3135 5f36 3954 0000 0000 6166 736c     SE516_T9....fals
   37790:	0065 0000 7274 6575 0000 0000 0a0d 6f43     e...true......Co
   377a0:	6e6e 6365 6974 676e 7420 206f 7242 6b6f     nnecting to Brok
   377b0:	7265 2e2e 002e 0000 7242 4a73 4e42 6f56     er......BrsJBNVo
   377c0:	4251 376c 0000 0000 7472 7974 626f 6a65     QBl7....rttyobej
   377d0:	0000 0000 514d 5454 2020 7245 6f72 2072     ....MQTT  Error 
   377e0:	202d 4f4e 2054 6f43 6e6e 6365 6574 2064     - NOT Connected 
   377f0:	6f74 6220 6f72 656b 0d72 000a 514d 5454     to broker...MQTT
   37800:	4320 6e6f 656e 7463 6465 7420 206f 7262      Connected to br
   37810:	6b6f 7265 0a0d 0000 6f43 6e6e 6365 2074     oker....Connect 
   37820:	6166 6c69 7420 206f 6573 7672 7265 2528     fail to server(%
   37830:	2973 2021 6572 7274 2079 7469 6120 7475     s)! retry it aut
   37840:	6d6f 7461 6369 6c61 796c 0d2e 000a 0000     omatically......
   37850:	3150 475f 4d41 5f45 5345 3545 3631 545f     P1_GAME_ESE516_T
   37860:	0039 0000 514d 5454 4320 6e6f 656e 7463     9...MQTT Connect
   37870:	6465 0a0d 0000 0000 514d 5454 6220 6f72     ed......MQTT bro
   37880:	656b 2072 6564 6c63 6e69 2065 6f79 7275     ker decline your
   37890:	6120 6363 7365 2173 6520 7272 726f 6320      access! error c
   378a0:	646f 2065 6425 0a0d 0000 0000 514d 5454     ode %d......MQTT
   378b0:	6420 7369 6f63 6e6e 6365 6574 0d64 000a      disconnected...
   378c0:	514d 5454 6920 696e 6974 6c61 7a69 7461     MQTT initializat
   378d0:	6f69 206e 6166 6c69 6465 202e 7245 6f72     ion failed. Erro
   378e0:	2072 6f63 6564 6920 2073 2528 2964 0a0d     r code is (%d)..
   378f0:	0000 0000 514d 5454 7220 6765 7369 6574     ....MQTT registe
   37900:	2072 6163 6c6c 6162 6b63 6620 6961 656c     r callback faile
   37910:	2e64 4520 7272 726f 6320 646f 2065 7369     d. Error code is
   37920:	2820 6425 0d29 000a 227b 2264 7b3a 7422      (%d)...{"d":{"t
   37930:	6d65 2270 253a 7d64 007d 0000 465b 4941     emp":%d}}...[FAI
   37940:	5d4c 7220 7365 2520 0d64 000a 6c46 6761     L] res %d...Flag
   37950:	2e41 7874 2074 6461 6564 2164 0a0d 0000     A.txt added!....
   37960:	3a30 6c46 6761 2e41 7874 0074 6f43 6e6e     0:FlagA.txt.Conn
   37970:	6365 6574 2064 6f74 4d20 5451 2054 7242     ected to MQTT Br
   37980:	6b6f 7265 0d21 000a 227b 6d69 7875 3a22     oker!...{"imux":
   37990:	6425 202c 6922 756d 2279 203a 6425 202c     %d, "imuy": %d, 
   379a0:	6922 756d 227a 203a 6425 007d 3150 495f     "imuz": %d}.P1_I
   379b0:	554d 455f 4553 3135 5f36 3954 0000 0000     MU_ESE516_T9....
   379c0:	227b 6574 7473 3a22 6425 7d20 0000 0000     {"test":%d }....
   379d0:	4554 5453 545f 504f 4349 355f 3631 545f     TEST_TOPIC_516_T
   379e0:	0039 0000 6425 0000 7d5d 0000 0a0d 0000     9...%d..]}......
   379f0:	3250 475f 4d41 5f45 5345 3545 3631 545f     P2_GAME_ESE516_T
   37a00:	0039 0000 5245 4f52 2052 6e49 7469 6169     9...ERROR Initia
   37a10:	696c 697a 676e 5720 6669 2069 6144 6174     lizing Wifi Data
   37a20:	7120 6575 6575 2173 0a0d 0000 5345 3545      queues!....ESE5
   37a30:	3631 2d20 5720 6669 2069 6e49 7469 4320     16 - Wifi Init C
   37a40:	646f 0d65 000a 0000 616d 6e69 203a 326d     ode.....main: m2
   37a50:	5f6d 6977 6966 695f 696e 2074 6163 6c6c     m_wifi_init call
   37a60:	6520 7272 726f 2021 7228 7365 2520 2964      error! (res %d)
   37a70:	0a0d 0000 616d 6e69 203a 6f63 6e6e 6365     ....main: connec
   37a80:	6974 676e 7420 206f 6957 6946 4120 2050     ting to WiFi AP 
   37a90:	7325 2e2e 0d2e 000a 3150 545f 4d45 4550     %s......P1_TEMPE
   37aa0:	4152 5554 4552 455f 4553 3135 5f36 3954     RATURE_ESE516_T9
   37ab0:	0000 0000 514d 5454 7320 6e65 2064 7325     ....MQTT send %s
   37ac0:	0a0d 0000 6f80 0001 6f8c 0001 6f9e 0001     .....o...o...o..
   37ad0:	6ff4 0001 7014 0001 6568 706c 0000 0000     .o...p..help....
   37ae0:	0a0d 6568 706c 0d3a 200a 694c 7473 2073     ..help:.. Lists 
   37af0:	6c61 206c 6874 2065 6572 6967 7473 7265     all the register
   37b00:	6465 6320 6d6f 616d 646e 0d73 0d0a 000a     ed commands.....
   37b10:	6e49 6f63 7272 6365 2074 6f63 6d6d 6e61     Incorrect comman
   37b20:	2064 6170 6172 656d 6574 2872 2973 202e     d parameter(s). 
   37b30:	4520 746e 7265 2220 6568 706c 2022 6f74      Enter "help" to
   37b40:	7620 6569 2077 2061 696c 7473 6f20 2066      view a list of 
   37b50:	7661 6961 616c 6c62 2065 6f63 6d6d 6e61     available comman
   37b60:	7364 0d2e 0d0a 000a 6f43 6d6d 6e61 2064     ds......Command 
   37b70:	6f6e 2074 6572 6f63 6e67 7369 6465 202e     not recognised. 
   37b80:	4520 746e 7265 2720 6568 706c 2027 6f74      Enter 'help' to
   37b90:	7620 6569 2077 2061 696c 7473 6f20 2066      view a list of 
   37ba0:	7661 6961 616c 6c62 2065 6f63 6d6d 6e61     available comman
   37bb0:	7364 0d2e 0d0a 000a                         ds......

00037bb8 <xHelpCommand>:
   37bb8:	7ad8 0003 7ae0 0003 8ca9 0001 0000 0000     .z...z..........
   37bc8:	5476 6172 6563 6e45 6261 656c 5428 4352     vTraceEnable(TRC
   37bd8:	535f 4154 5452 415f 4157 5449 485f 534f     _START_AWAIT_HOS
   37be8:	2954 6e20 746f 6120 6c6c 776f 6465 6920     T) not allowed i
   37bf8:	206e 6e53 7061 6873 746f 6d20 646f 0065     n Snapshot mode.
   37c08:	6e55 7865 6570 7463 6465 6120 6772 6d75     Unexpected argum
   37c18:	6e65 2074 6f74 7620 7254 6361 4565 616e     ent to vTraceEna
   37c28:	6c62 2065 7328 616e 7370 6f68 2074 6f6d     ble (snapshot mo
   37c38:	6564 0029 7a54 7443 6c72 0000 6f4e 2074     de).TzCtrl..Not 
   37c48:	6e65 756f 6867 5420 5341 204b 6168 646e     enough TASK hand
   37c58:	656c 2073 202d 6e69 7263 6165 6573 5420     les - increase T
   37c68:	4352 435f 4746 4e5f 4154 4b53 6920 206e     RC_CFG_NTASK in 
   37c78:	7274 5363 616e 7370 6f68 4374 6e6f 6966     trcSnapshotConfi
   37c88:	2e67 0068 6f4e 2074 6e65 756f 6867 4920     g.h.Not enough I
   37c98:	5253 6820 6e61 6c64 7365 2d20 6920 636e     SR handles - inc
   37ca8:	6572 7361 2065 5254 5f43 4643 5f47 494e     rease TRC_CFG_NI
   37cb8:	5253 6920 206e 7274 5363 616e 7370 6f68     SR in trcSnapsho
   37cc8:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   37cd8:	6e65 756f 6867 5320 4d45 5041 4f48 4552     enough SEMAPHORE
   37ce8:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   37cf8:	7361 2065 5254 5f43 4643 5f47 534e 4d45     ase TRC_CFG_NSEM
   37d08:	5041 4f48 4552 6920 206e 7274 5363 616e     APHORE in trcSna
   37d18:	7370 6f68 4374 6e6f 6966 2e67 0068 0000     pshotConfig.h...
   37d28:	6f4e 2074 6e65 756f 6867 4d20 5455 5845     Not enough MUTEX
   37d38:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   37d48:	7361 2065 5254 5f43 4643 5f47 4d4e 5455     ase TRC_CFG_NMUT
   37d58:	5845 6920 206e 7274 5363 616e 7370 6f68     EX in trcSnapsho
   37d68:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   37d78:	6e65 756f 6867 5120 4555 4555 6820 6e61     enough QUEUE han
   37d88:	6c64 7365 2d20 6920 636e 6572 7361 2065     dles - increase 
   37d98:	5254 5f43 4643 5f47 514e 4555 4555 6920     TRC_CFG_NQUEUE i
   37da8:	206e 7274 5363 616e 7370 6f68 4374 6e6f     n trcSnapshotCon
   37db8:	6966 2e67 0068 0000 6f4e 2074 6e65 756f     fig.h...Not enou
   37dc8:	6867 5420 4d49 5245 6820 6e61 6c64 7365     gh TIMER handles
   37dd8:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   37de8:	4643 5f47 544e 4d49 5245 6920 206e 7274     CFG_NTIMER in tr
   37df8:	5363 616e 7370 6f68 4374 6e6f 6966 2e67     cSnapshotConfig.
   37e08:	0068 0000 6f4e 2074 6e65 756f 6867 4520     h...Not enough E
   37e18:	4556 544e 5247 554f 2050 6168 646e 656c     VENTGROUP handle
   37e28:	2073 202d 6e69 7263 6165 6573 5420 4352     s - increase TRC
   37e38:	435f 4746 4e5f 5645 4e45 4754 4f52 5055     _CFG_NEVENTGROUP
   37e48:	6920 206e 7274 5363 616e 7370 6f68 4374      in trcSnapshotC
   37e58:	6e6f 6966 2e67 0068 6f4e 2074 6e65 756f     onfig.h.Not enou
   37e68:	6867 5320 5254 4145 424d 4655 4546 2052     gh STREAMBUFFER 
   37e78:	6168 646e 656c 2073 202d 6e69 7263 6165     handles - increa
   37e88:	6573 5420 4352 435f 4746 4e5f 5453 4552     se TRC_CFG_NSTRE
   37e98:	4d41 5542 4646 5245 6920 206e 7274 5363     AMBUFFER in trcS
   37ea8:	616e 7370 6f68 4374 6e6f 6966 2e67 0068     napshotConfig.h.
   37eb8:	6f4e 2074 6e65 756f 6867 4d20 5345 4153     Not enough MESSA
   37ec8:	4547 5542 4646 5245 6820 6e61 6c64 7365     GEBUFFER handles
   37ed8:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   37ee8:	4643 5f47 4d4e 5345 4153 4547 5542 4646     CFG_NMESSAGEBUFF
   37ef8:	5245 6920 206e 7274 5363 616e 7370 6f68     ER in trcSnapsho
   37f08:	4374 6e6f 6966 2e67 0068 0000 7370 547a     tConfig.h...pszT
   37f18:	6172 6563 6547 4574 7272 726f 6148 646e     raceGetErrorHand
   37f28:	656c 3a73 4920 766e 6c61 6469 6f20 6a62     les: Invalid obj
   37f38:	6365 6374 616c 7373 0021 0000 93ce 0001     ectclass!.......
   37f48:	93c6 0001 93ca 0001 93be 0001 93c2 0001     ................
   37f58:	93d2 0001 93d6 0001 93da 0001 93de 0001     ................
   37f68:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   37f78:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   37f88:	6c61 7a69 6465 202e 7355 2065 5476 6172     alized. Use vTra
   37f98:	6563 6e45 6261 656c 2928 6920 736e 6574     ceEnable() inste
   37fa8:	6461 0021 7328 6174 7472 7075 0029 0000     ad!.(startup)...
   37fb8:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   37fc8:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   37fd8:	6c61 7a69 6465 202c 6163 6c6c 7620 7254     alized, call vTr
   37fe8:	6361 4565 616e 6c62 2865 2029 6966 7372     aceEnable() firs
   37ff8:	2174 0000 5254 4341 5f45 5341 4553 5452     t!..TRACE_ASSERT
   38008:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   38018:	706f 7265 6974 7365 203a 6e49 6176 696c     operties: Invali
   38028:	2064 6176 756c 2065 6f66 2072 6168 646e     d value for hand
   38038:	656c 0000 5254 4341 5f45 5341 4553 5452     le..TRACE_ASSERT
   38048:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   38058:	706f 7265 6974 7365 203a 616e 656d 3d20     operties: name =
   38068:	203d 554e 4c4c 0000 5476 6172 6563 7453     = NULL..vTraceSt
   38078:	726f 4965 5253 6542 6967 206e 202d 6572     oreISRBegin - re
   38088:	6f63 6472 7265 6220 7375 2179 5320 6565     corder busy! See
   38098:	6320 646f 2065 6f63 6d6d 6e65 2e74 0000      code comment...
   380a8:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   380b8:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   380c8:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   380d8:	6e61 6c64 2065 4e28 4c55 294c 0000 0000     andle (NULL)....
   380e8:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   380f8:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   38108:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   38118:	6e61 6c64 2065 3e28 4e20 5349 2952 0000     andle (> NISR)..
   38128:	6f54 206f 616d 796e 6e20 7365 6574 2064     Too many nested 
   38138:	6e69 6574 7272 7075 7374 0021 5476 6172     interrupts!.vTra
   38148:	6563 7453 726f 4965 5253 6e45 2064 202d     ceStoreISREnd - 
   38158:	6572 6f63 6472 7265 6220 7375 2179 5320     recorder busy! S
   38168:	6565 6320 646f 2065 6f63 6d6d 6e65 2e74     ee code comment.
   38178:	0000 0000 6e55 616d 6374 6568 2064 6163     ....Unmatched ca
   38188:	6c6c 7420 206f 5476 6172 6563 7453 726f     ll to vTraceStor
   38198:	4965 5253 6e45 2064 6e28 5349 6152 7463     eISREnd (nISRact
   381a8:	7669 2065 3d3d 3020 202c 7865 6570 7463     ive == 0, expect
   381b8:	6465 3e20 3020 0029 5254 4341 5f45 5341     ed > 0).TRACE_AS
   381c8:	4553 5452 203a 7277 7469 4965 746e 3a38     SERT: writeInt8:
   381d8:	6220 6675 6566 2072 3d3d 4e20 4c55 004c      buffer == NULL.
   381e8:	5254 4341 5f45 5341 4553 5452 203a 7277     TRACE_ASSERT: wr
   381f8:	7469 4965 746e 3631 203a 7562 6666 7265     iteInt16: buffer
   38208:	3d20 203d 554e 4c4c 0000 0000 5254 4341      == NULL....TRAC
   38218:	5f45 5341 4553 5452 203a 7277 7469 4965     E_ASSERT: writeI
   38228:	746e 3233 203a 7562 6666 7265 3d20 203d     nt32: buffer == 
   38238:	554e 4c4c 0000 0000 5476 6172 6563 7250     NULL....vTracePr
   38248:	6e69 4674 2d20 5420 6f6f 6d20 6e61 2079     intF - Too many 
   38258:	7261 7567 656d 746e 2c73 6d20 7861 3120     arguments, max 1
   38268:	2035 6c61 6f6c 6577 2164 0000 5476 6172     5 allowed!..vTra
   38278:	6563 7250 6e69 4674 2d20 5420 6f6f 6c20     cePrintF - Too l
   38288:	7261 6567 6120 6772 6d75 6e65 7374 202c     arge arguments, 
   38298:	616d 2078 3233 6220 7479 2065 6c61 6f6c     max 32 byte allo
   382a8:	6577 2164 0000 0000 5254 4341 5f45 5341     wed!....TRACE_AS
   382b8:	4553 5452 203a 5476 6172 6563 5056 6972     SERT: vTraceVPri
   382c8:	746e 3a46 6620 726f 616d 5374 7274 3d20     ntF: formatStr =
   382d8:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   382e8:	4553 5452 203a 5478 6172 6563 6552 6967     SERT: xTraceRegi
   382f8:	7473 7265 7453 6972 676e 203a 616c 6562     sterString: labe
   38308:	206c 3d3d 4e20 4c55 004c 0000 5254 4341     l == NULL...TRAC
   38318:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38328:	6563 7453 726f 5465 7361 526b 6165 7964     ceStoreTaskReady
   38338:	203a 6e49 6176 696c 2064 6176 756c 2065     : Invalid value 
   38348:	6f66 2072 6168 646e 656c 0000 6552 6f63     for handle..Reco
   38358:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   38368:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   38378:	6e69 2067 7973 6373 6c61 3f6c 2820 2931     ing syscall? (1)
   38388:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   38398:	203a 7270 5476 6172 6563 7453 726f 4c65     : prvTraceStoreL
   383a8:	776f 6f50 6577 3a72 4920 766e 6c61 6469     owPower: Invalid
   383b8:	6620 616c 2067 6176 756c 0065 5254 4341      flag value.TRAC
   383c8:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   383d8:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   383e8:	3a6c 6520 6f63 6564 3e20 203d 7830 4646     l: ecode >= 0xFF
   383f8:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   38408:	203a 7270 5476 6172 6563 7453 726f 4b65     : prvTraceStoreK
   38418:	7265 656e 436c 6c61 3a6c 6f20 6a62 6365     ernelCall: objec
   38428:	4374 616c 7373 3e20 203d 5254 4341 5f45     tClass >= TRACE_
   38438:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   38448:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38458:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   38468:	3a6c 4920 766e 6c61 6469 7620 6c61 6575     l: Invalid value
   38478:	6620 726f 6f20 6a62 6365 4e74 6d75 6562      for objectNumbe
   38488:	0072 0000 6552 6f63 6472 7265 6220 7375     r...Recorder bus
   38498:	2079 202d 6968 6867 7020 6972 726f 7469     y - high priorit
   384a8:	2079 5349 2052 7375 6e69 2067 7973 6373     y ISR using sysc
   384b8:	6c61 3f6c 2820 2932 0000 0000 5254 4341     all? (2)....TRAC
   384c8:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   384d8:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   384e8:	576c 7469 5068 7261 6d61 203a 7665 6374     lWithParam: evtc
   384f8:	646f 2065 3d3e 3020 4678 0046 5254 4341     ode >= 0xFF.TRAC
   38508:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38518:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   38528:	576c 7469 5068 7261 6d61 203a 626f 656a     lWithParam: obje
   38538:	7463 6c43 7361 2073 3d3e 5420 4152 4543     ctClass >= TRACE
   38548:	4e5f 4c43 5341 4553 0053 0000 5254 4341     _NCLASSES...TRAC
   38558:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38568:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   38578:	576c 7469 5068 7261 6d61 203a 6e49 6176     lWithParam: Inva
   38588:	696c 2064 6176 756c 2065 6f66 2072 626f     lid value for ob
   38598:	656a 7463 754e 626d 7265 0000 6552 6f63     jectNumber..Reco
   385a8:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   385b8:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   385c8:	6e69 2067 7973 6373 6c61 3f6c 2820 2933     ing syscall? (3)
   385d8:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   385e8:	203a 7270 5476 6172 6563 6547 5074 7261     : prvTraceGetPar
   385f8:	6d61 203a 6e49 6176 696c 2064 6176 756c     am: Invalid valu
   38608:	2065 6f66 2072 6170 6172 5f6d 616d 0078     e for param_max.
   38618:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38628:	5476 6172 6563 7453 726f 4b65 7265 656e     vTraceStoreKerne
   38638:	436c 6c61 576c 7469 4e68 6d75 7265 6369     lCallWithNumeric
   38648:	6150 6172 4f6d 6c6e 3a79 4920 766e 6c61     ParamOnly: Inval
   38658:	6469 7620 6c61 6575 6620 726f 6520 7476     id value for evt
   38668:	6f63 6564 0000 0000 6552 6f63 6472 7265     code....Recorder
   38678:	6220 7375 2079 202d 6968 6867 7020 6972      busy - high pri
   38688:	726f 7469 2079 5349 2052 7375 6e69 2067     ority ISR using 
   38698:	7973 6373 6c61 3f6c 2820 2934 0000 0000     syscall? (4)....
   386a8:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   386b8:	5476 6172 6563 7453 726f 5465 7361 736b     vTraceStoreTasks
   386c8:	6977 6374 3a68 4920 766e 6c61 6469 7620     witch: Invalid v
   386d8:	6c61 6575 6620 726f 7420 7361 5f6b 6168     alue for task_ha
   386e8:	646e 656c 0000 0000 5254 4341 5f45 5341     ndle....TRACE_AS
   386f8:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   38708:	726f 4f65 6a62 6365 4e74 6d61 4f65 436e     oreObjectNameOnC
   38718:	6f6c 6573 7645 6e65 3a74 6f20 6a62 6365     loseEvent: objec
   38728:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   38738:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   38748:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38758:	6563 7453 726f 4f65 6a62 6365 4e74 6d61     ceStoreObjectNam
   38768:	4f65 436e 6f6c 6573 7645 6e65 3a74 4920     eOnCloseEvent: I
   38778:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   38788:	6820 6e61 6c64 0065 5254 4341 5f45 5341      handle.TRACE_AS
   38798:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   387a8:	726f 4f65 6a62 6365 5074 6f72 6570 7472     oreObjectPropert
   387b8:	6569 4f73 436e 6f6c 6573 7645 6e65 3a74     iesOnCloseEvent:
   387c8:	6f20 6a62 6365 6374 616c 7373 3e20 203d      objectclass >= 
   387d8:	5254 4341 5f45 434e 414c 5353 5345 0000     TRACE_NCLASSES..
   387e8:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   387f8:	5476 6172 6563 7453 726f 4f65 6a62 6365     vTraceStoreObjec
   38808:	5074 6f72 6570 7472 6569 4f73 436e 6f6c     tPropertiesOnClo
   38818:	6573 7645 6e65 3a74 4920 766e 6c61 6469     seEvent: Invalid
   38828:	7620 6c61 6575 6620 726f 6820 6e61 6c64      value for handl
   38838:	0065 0000 5254 4341 5f45 5341 4553 5452     e...TRACE_ASSERT
   38848:	203a 7270 5476 6172 6563 6553 5074 6972     : prvTraceSetPri
   38858:	726f 7469 5079 6f72 6570 7472 3a79 6f20     orityProperty: o
   38868:	6a62 6365 6374 616c 7373 3e20 203d 5254     bjectclass >= TR
   38878:	4341 5f45 434e 414c 5353 5345 0000 0000     ACE_NCLASSES....
   38888:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38898:	5476 6172 6563 6553 5074 6972 726f 7469     vTraceSetPriorit
   388a8:	5079 6f72 6570 7472 3a79 4920 766e 6c61     yProperty: Inval
   388b8:	6469 7620 6c61 6575 6620 726f 6920 0064     id value for id.
   388c8:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   388d8:	5476 6172 6563 6547 5074 6972 726f 7469     vTraceGetPriorit
   388e8:	5079 6f72 6570 7472 3a79 6f20 6a62 6365     yProperty: objec
   388f8:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   38908:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   38918:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38928:	6563 6547 5074 6972 726f 7469 5079 6f72     ceGetPriorityPro
   38938:	6570 7472 3a79 4920 766e 6c61 6469 7620     perty: Invalid v
   38948:	6c61 6575 6620 726f 6920 0064 5254 4341     alue for id.TRAC
   38958:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38968:	6563 6553 4f74 6a62 6365 5374 6174 6574     ceSetObjectState
   38978:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   38988:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   38998:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   389a8:	5476 6172 6563 6553 4f74 6a62 6365 5374     vTraceSetObjectS
   389b8:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   389c8:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   389d8:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   389e8:	6563 6547 4f74 6a62 6365 5374 6174 6574     ceGetObjectState
   389f8:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   38a08:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   38a18:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38a28:	5476 6172 6563 6547 4f74 6a62 6365 5374     vTraceGetObjectS
   38a38:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   38a48:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   38a58:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38a68:	6563 6553 5474 7361 496b 736e 6174 636e     ceSetTaskInstanc
   38a78:	4665 6e69 7369 6568 3a64 4920 766e 6c61     eFinished: Inval
   38a88:	6469 7620 6c61 6575 6620 726f 6820 6e61     id value for han
   38a98:	6c64 0065 7254 6361 2065 6552 6f63 6472     dle.Trace Record
   38aa8:	7265 4420 6d65 006f 7441 6574 706d 2074     er Demo.Attempt 
   38ab8:	6f74 6920 646e 7865 6f20 7475 6973 6564     to index outside
   38ac8:	6520 6576 746e 6220 6675 6566 2172 0000      event buffer!..
   38ad8:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   38ae8:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   38af8:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   38b08:	6f20 6a62 6365 6374 616c 7373 0000 0000      objectclass....
   38b18:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   38b28:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   38b38:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   38b48:	6f20 6a62 6365 6874 6e61 6c64 0065 0000      objecthandle...
   38b58:	624f 656a 7463 7420 6261 656c 6c20 6f6f     Object table loo
   38b68:	756b 2070 6977 6874 6920 766e 6c61 6469     kup with invalid
   38b78:	6f20 6a62 6365 2074 6168 646e 656c 6f20      object handle o
   38b88:	2072 626f 656a 7463 6320 616c 7373 0021     r object class!.
   38b98:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38ba8:	5476 6172 6563 6547 4f74 6a62 6365 4874     vTraceGetObjectH
   38bb8:	6e61 6c64 3a65 4920 766e 6c61 6469 7620     andle: Invalid v
   38bc8:	6c61 6575 6620 726f 6f20 6a62 6365 6374     alue for objectc
   38bd8:	616c 7373 0000 0000 5254 4341 5f45 5341     lass....TRACE_AS
   38be8:	4553 5452 203a 7270 5476 6172 6563 7246     SERT: prvTraceFr
   38bf8:	6565 624f 656a 7463 6148 646e 656c 203a     eeObjectHandle: 
   38c08:	6e49 6176 696c 2064 6176 756c 2065 6f66     Invalid value fo
   38c18:	2072 626f 656a 7463 6c63 7361 0073 0000     r objectclass...
   38c28:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38c38:	5476 6172 6563 7246 6565 624f 656a 7463     vTraceFreeObject
   38c48:	6148 646e 656c 203a 6e49 6176 696c 2064     Handle: Invalid 
   38c58:	6176 756c 2065 6f66 2072 6168 646e 656c     value for handle
   38c68:	0000 0000 7441 6574 706d 2074 6f74 6620     ....Attempt to f
   38c78:	6572 2065 6f6d 6572 6820 6e61 6c64 7365     ree more handles
   38c88:	7420 6168 206e 6c61 6f6c 6163 6574 2164      than allocated!
   38c98:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   38ca8:	203a 7270 5476 6172 6563 6553 4f74 6a62     : prvTraceSetObj
   38cb8:	6365 4e74 6d61 3a65 6e20 6d61 2065 3d3d     ectName: name ==
   38cc8:	4e20 4c55 004c 0000 6c49 656c 6167 206c      NULL...Illegal 
   38cd8:	626f 656a 7463 6320 616c 7373 6920 206e     object class in 
   38ce8:	7270 5476 6172 6563 6553 4f74 6a62 6365     prvTraceSetObjec
   38cf8:	4e74 6d61 0065 0000 6c49 656c 6167 206c     tName...Illegal 
   38d08:	6168 646e 656c 2820 2930 6920 206e 7270     handle (0) in pr
   38d18:	5476 6172 6563 6553 4f74 6a62 6365 4e74     vTraceSetObjectN
   38d28:	6d61 2e65 0000 0000 5254 4341 5f45 5341     ame.....TRACE_AS
   38d38:	4553 5452 203a 7270 5476 6172 6563 704f     SERT: prvTraceOp
   38d48:	6e65 7953 626d 6c6f 203a 616e 656d 3d20     enSymbol: name =
   38d58:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   38d68:	4553 5452 203a 7270 4376 6568 6b63 6144     SERT: prvCheckDa
   38d78:	6174 6f54 6542 764f 7265 7277 7469 6574     taToBeOverwritte
   38d88:	466e 726f 754d 746c 4569 746e 7972 7645     nForMultiEntryEv
   38d98:	6e65 7374 203a 6f6e 4566 746e 6972 7365     ents: nofEntries
   38da8:	6f54 6843 6365 206b 3d3d 3020 0000 0000     ToCheck == 0....
   38db8:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38dc8:	5476 6172 6563 6547 4474 5354 203a 6e49     vTraceGetDTS: In
   38dd8:	6176 696c 2064 6176 756c 2065 6f66 2072     valid value for 
   38de8:	6170 6172 5f6d 616d 4478 5354 0000 0000     param_maxDTS....
   38df8:	6142 2064 6170 6172 5f6d 616d 4478 5354     Bad param_maxDTS
   38e08:	6920 206e 7270 5476 6172 6563 6547 4474      in prvTraceGetD
   38e18:	5354 0000 5254 4341 5f45 5341 4553 5452     TS..TRACE_ASSERT
   38e28:	203a 7270 5476 6172 6563 6f4c 6b6f 7075     : prvTraceLookup
   38e38:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   38e48:	203a 616e 656d 3d20 203d 554e 4c4c 0000     : name == NULL..
   38e58:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38e68:	5476 6172 6563 6f4c 6b6f 7075 7953 626d     vTraceLookupSymb
   38e78:	6c6f 6154 6c62 4565 746e 7972 203a 656c     olTableEntry: le
   38e88:	206e 3d3d 3020 0000 5254 4341 5f45 5341     n == 0..TRACE_AS
   38e98:	4553 5452 203a 7270 5476 6172 6563 7243     SERT: prvTraceCr
   38ea8:	6165 6574 7953 626d 6c6f 6154 6c62 4565     eateSymbolTableE
   38eb8:	746e 7972 203a 616e 656d 3d20 203d 554e     ntry: name == NU
   38ec8:	4c4c 0000 5254 4341 5f45 5341 4553 5452     LL..TRACE_ASSERT
   38ed8:	203a 7270 5476 6172 6563 7243 6165 6574     : prvTraceCreate
   38ee8:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   38ef8:	203a 656c 206e 3d3d 3020 0000 7953 626d     : len == 0..Symb
   38f08:	6c6f 7420 6261 656c 6620 6c75 2e6c 4920     ol table full. I
   38f18:	636e 6572 7361 2065 5254 5f43 4643 5f47     ncrease TRC_CFG_
   38f28:	5953 424d 4c4f 545f 4241 454c 535f 5a49     SYMBOL_TABLE_SIZ
   38f38:	2045 6e69 7420 6372 6f43 666e 6769 682e     E in trcConfig.h
   38f48:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   38f58:	203a 7270 5476 6172 6563 6547 4374 6568     : prvTraceGetChe
   38f68:	6b63 7573 3a6d 7020 616e 656d 3d20 203d     cksum: pname == 
   38f78:	554e 4c4c 0000 0000 5254 4341 5f45 5341     NULL....TRACE_AS
   38f88:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   38f98:	4374 6568 6b63 7573 3a6d 7020 7263 2063     tChecksum: pcrc 
   38fa8:	3d3d 4e20 4c55 004c 5254 4341 5f45 5341     == NULL.TRACE_AS
   38fb8:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   38fc8:	4374 6568 6b63 7573 3a6d 7020 656c 676e     tChecksum: pleng
   38fd8:	6874 3d20 203d 554e 4c4c 0000 4449 454c     th == NULL..IDLE
   38fe8:	0000 0000 6d54 2072 7653 0063 e46c 0001     ....Tmr Svc.l...
   38ff8:	e46c 0001 e46c 0001 e4fa 0001 e4c4 0001     l...l...........
   39008:	e4ee 0001 e46c 0001 e46c 0001 e4fa 0001     ....l...l.......
   39018:	e4c4 0001                                   ....

0003901c <sd_mmc_trans_units>:
   3901c:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

00039038 <sd_trans_multipliers>:
   39038:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   39048:	000f 0000 0014 0000 0019 0000 001e 0000     ................
   39058:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
   39068:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

00039078 <mmc_trans_multipliers>:
   39078:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   39088:	000f 0000 0014 0000 001a 0000 001e 0000     ................
   39098:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
   390a8:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...
   390b8:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   390c8:	5d64 0000 6e69 6176 696c 6564 6920 636f     d]..invalide ioc
   390d8:	746c 6320 646d 000a 000d 0000               lt cmd......

000390e4 <__FUNCTION__.17099>:
   390e4:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
   390f4:	4128 5050 2829 4e49 4f46 0029 6c53 776f     (APP)(INFO).Slow
   39104:	6e69 2067 6f64 6e77 2e2e 0a2e 0000 0000     ing down........
   39114:	000d 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   39124:	5d73 255b 5d64 0000 4828 4649 4629 6961     s][%d]..(HIF)Fai
   39134:	206c 6f74 7720 6b61 7075 7420 6568 6320     l to wakup the c
   39144:	6968 0a70 0000 0000 6828 6669 2029 4957     hip.....(hif) WI
   39154:	4946 485f 534f 5f54 4352 5f56 5443 4c52     FI_HOST_RCV_CTRL
   39164:	315f 6220 7375 6620 6961 0a6c 0000 0000     _1 bus fail.....
   39174:	6828 6669 2029 6461 7264 7365 2073 7562     (hif) address bu
   39184:	2073 6166 6c69 000a 6828 6669 2029 6f43     s fail..(hif) Co
   39194:	7272 7075 6574 2064 6170 6b63 7465 5320     rrupted packet S
   391a4:	7a69 2065 203d 7525 3c20 204c 203d 7525     ize = %u <L = %u
   391b4:	202c 2047 203d 7525 202c 504f 3d20 2520     , G = %u, OP = %
   391c4:	3230 3e58 000a 0000 4957 4946 6320 6c61     02X>....WIFI cal
   391d4:	626c 6361 206b 7369 6e20 746f 7220 6765     lback is not reg
   391e4:	7369 6574 6572 0a64 0000 0000 6353 6b6f     istered.....Scok
   391f4:	7465 6320 6c61 626c 6361 206b 7369 6e20     et callback is n
   39204:	746f 7220 6765 7369 6574 6572 0a64 0000     ot registered...
   39214:	744f 2061 6163 6c6c 6162 6b63 6920 2073     Ota callback is 
   39224:	6f6e 2074 6572 6967 7473 7265 6465 000a     not registered..
   39234:	7243 7079 6f74 6320 6c61 626c 6361 206b     Crypto callback 
   39244:	7369 6e20 746f 7220 6765 7369 6574 6572     is not registere
   39254:	0a64 0000 6953 6d67 2061 6163 6c6c 6162     d...Sigma callba
   39264:	6b63 6920 2073 6f6e 2074 6572 6967 7473     ck is not regist
   39274:	7265 6465 000a 0000 6828 6669 2029 6e69     ered....(hif) in
   39284:	6176 696c 2064 7267 756f 2070 4449 000a     valid group ID..
   39294:	6828 6669 2029 6f68 7473 6120 7070 6420     (hif) host app d
   392a4:	6469 276e 2074 6573 2074 5852 4420 6e6f     idn't set RX Don
   392b4:	2065 253c 3e75 253c 3e58 000a 6828 6669     e <%u><%X>..(hif
   392c4:	2029 7257 6e6f 2067 6953 657a 000a 0000     ) Wrong Size....
   392d4:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
   392e4:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
   392f4:	2029 6146 6c69 7420 206f 6552 6461 6920     ) Fail to Read i
   39304:	746e 7265 7572 7470 7220 6765 000a 0000     nterrupt reg....
   39314:	4828 4649 2029 6146 6c69 7420 206f 6168     (HIF) Fail to ha
   39324:	646e 656c 6920 746e 7265 7572 7470 2520     ndle interrupt %
   39334:	2064 7274 2079 6741 6961 2e6e 0a2e 0000     d try Again.....
   39344:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
   39354:	6176 696c 2064 7261 7567 656d 746e 000a     valid argument..
   39364:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
   39374:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
   39384:	206e 6874 2065 6572 6963 6576 2064 7562     n the recived bu
   39394:	6666 7265 7320 7a69 2065 253c 3e75 253c     ffer size <%u><%
   393a4:	756c 0a3e 0000 0000 5041 2050 6552 7571     lu>.....APP Requ
   393b4:	7365 6574 2064 6441 7264 7365 2073 6562     ested Address be
   393c4:	6f79 646e 7420 6568 7220 6365 7669 6465     yond the recived
   393d4:	6220 6675 6566 2072 6461 7264 7365 2073      buffer address 
   393e4:	6e61 2064 656c 676e 6874 000a 5247 2070     and length..GRp 
   393f4:	203f 6425 000a 0000 2670 0002 2640 0002     ? %d....p&..@&..
   39404:	2638 0002 2650 0002 2648 0002 2668 0002     8&..P&..H&..h&..
   39414:	2658 0002 2660 0002                         X&..`&..

0003941c <__FUNCTION__.17967>:
   3941c:	6968 5f66 6573 646e 0000 0000               hif_send....

00039428 <__FUNCTION__.17977>:
   39428:	6968 5f66 7369 0072                         hif_isr.

00039430 <__FUNCTION__.17986>:
   39430:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

00039440 <__FUNCTION__.17998>:
   39440:	6968 5f66 6572 6563 7669 0065               hif_receive.

0003944c <__FUNCTION__.18014>:
   3944c:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
   3945c:	4128 5050 2829 4e49 4f46 0029 6f43 666e     (APP)(INFO).Conf
   3946c:	696c 7463 6465 4920 2050 2022 7525 252e     licted IP " %u.%
   3947c:	2e75 7525 252e 2075 2022 000a 000d 0000     u.%u.%u " ......
   3948c:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   3949c:	5d64 0000 4552 2051 6f4e 2074 6564 6966     d]..REQ Not defi
   394ac:	656e 2064 6425 000a 4e49 4156 494c 2044     ned %d..INVALID 
   394bc:	4f50 4e49 4554 0a52 0000 0000 4e49 4156     POINTER.....INVA
   394cc:	494c 2044 5353 4449 000a 0000 4e49 4156     LID SSID....INVA
   394dc:	494c 2044 4843 000a 4e49 4156 494c 2044     LID CH..INVALID 
   394ec:	4844 5043 5320 5245 4556 2052 5049 000a     DHCP SERVER IP..
   394fc:	4e49 4156 494c 2044 454b 2059 4e49 4544     INVALID KEY INDE
   3950c:	0a58 0000 4e49 4156 494c 2044 454b 2059     X...INVALID KEY 
   3951c:	5453 4952 474e 5320 5a49 0a45 0000 0000     STRING SIZE.....
   3952c:	4e49 4156 494c 2044 454b 2059 4953 455a     INVALID KEY SIZE
   3953c:	000a 0000 4e49 4156 494c 2044 5057 2041     ....INVALID WPA 
   3954c:	454b 2059 4953 455a 000a 0000 4e49 4156     KEY SIZE....INVA
   3955c:	494c 2044 5541 4854 4e45 4954 4143 4954     LID AUTHENTICATI
   3956c:	4e4f 4d20 444f 0a45 0000 0000 4e49 4156     ON MODE.....INVA
   3957c:	494c 2044 6f4e 6f20 2066 6373 6e61 7320     LID No of scan s
   3958c:	6f6c 7374 2021 6425 000a 0000 4e49 4156     lots! %d....INVA
   3959c:	494c 2044 6373 6e61 7320 6f6c 2074 6974     LID scan slot ti
   395ac:	656d 2021 6425 000a 4e49 4156 494c 2044     me! %d..INVALID 
   395bc:	6f4e 6f20 2066 7270 626f 2065 6572 7571     No of probe requ
   395cc:	7365 7374 7020 7265 7320 6163 206e 6c73     ests per scan sl
   395dc:	746f 2520 0a64 0000 4e49 4156 494c 2044     ot %d...INVALID 
   395ec:	5352 4953 7420 7268 7365 6f68 646c 2520     RSSI threshold %
   395fc:	2064 000a 6946 6d72 6177 6572 7620 7265     d ..Firmware ver
   3960c:	2020 3a20 2520 2e75 7525 252e 2075 7653        : %u.%u.%u Sv
   3961c:	726e 7665 2520 0a75 0000 0000 6946 6d72     nrev %u.....Firm
   3962c:	6177 6572 4220 6975 646c 2520 2073 6954     ware Build %s Ti
   3963c:	656d 2520 0a73 0000 6946 6d72 6177 6572     me %s...Firmware
   3964c:	4d20 6e69 6420 6972 6576 2072 6576 2072      Min driver ver 
   3965c:	203a 7525 252e 2e75 7525 000a 7244 7669     : %u.%u.%u..Driv
   3966c:	7265 7620 7265 203a 7525 252e 2e75 7525     er ver: %u.%u.%u
   3967c:	000a 0000 3132 313a 3a35 3033 0000 0000     ....21:15:30....
   3968c:	7041 2072 3831 3220 3230 0033 7244 7669     Apr 18 2023.Driv
   3969c:	7265 6220 6975 746c 6120 2074 7325 2509     er built at %s.%
   396ac:	0a73 0000 694d 6d73 7461 6863 4620 7269     s...Mismatch Fir
   396bc:	616d 7277 2065 6556 7372 6f69 0a6e 0000     mawre Version...
   396cc:	654b 2079 7369 6e20 746f 7620 6c61 6469     Key is not valid
   396dc:	000a 0000 6e49 6176 696c 2064 654b 0a79     ....Invalid Key.
   396ec:	0000 0000 5353 4449 4c20 4e45 4920 564e     ....SSID LEN INV
   396fc:	4c41 4449 000a 0000 4843 4920 564e 4c41     ALID....CH INVAL
   3970c:	4449 000a 6e49 6176 696c 2064 6557 2070     ID..Invalid Wep 
   3971c:	656b 2079 6e69 6564 2078 6425 000a 0000     key index %d....
   3972c:	6e49 6176 696c 2064 6557 2070 656b 2079     Invalid Wep key 
   3973c:	656c 676e 6874 2520 0a64 0000 6e49 6f63     length %d...Inco
   3974c:	7272 6365 2074 5350 204b 656b 2079 656c     rrect PSK key le
   3975c:	676e 6874 000a 0000 6e75 6564 6966 656e     ngth....undefine
   3976c:	2064 6573 2063 7974 6570 000a 505f 5f53     d sec type.._PS_
   3977c:	4553 5652 5245 205f 7369 6e20 746f 6420     SERVER_ is not d
   3978c:	6665 6e69 6465 000a 694c 7473 6e65 6320     efined..Listen c
   3979c:	6168 6e6e 6c65 7320 6f68 6c75 2064 6e6f     hannel should on
   397ac:	796c 6220 2065 324d 5f4d 4957 4946 435f     ly be M2M_WIFI_C
   397bc:	5f48 2f31 2f36 3131 0a20 0000 4f50 4557     H_1/6/11 ...POWE
   397cc:	2052 4153 4556 2520 0a64 0000 4e49 4156     R SAVE %d...INVA
   397dc:	494c 2044 4f44 414d 4e49 4e20 4d41 0a45     LID DOMAIN NAME.
   397ec:	0000 0000 5250 474e 4220 6675 6566 2072     ....PRNG Buffer 
   397fc:	7865 6563 6465 6465 6d20 7861 6d69 6d75     exceeded maximum
   3980c:	7320 7a69 2065 6425 6f20 2072 554e 4c4c      size %d or NULL
   3981c:	4220 6675 6566 0a72 0000 0000                Buffer.....

00039828 <__FUNCTION__.17949>:
   39828:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

00039834 <__FUNCTION__.17978>:
   39834:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

00039844 <__FUNCTION__.18009>:
   39844:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
   39854:	735f 0063 4128 5050 2829 5245 2952 255b     _sc.(APP)(ERR)[%
   39864:	5d73 255b 5d64 0000 7542 2073 7265 6f72     s][%d]..Bus erro
   39874:	2072 3528 2e29 6425 2520 786c 000a 0000     r (5).%d %lx....
   39884:	000d 0000 6146 6c69 6465 7420 206f 6177     ....Failed to wa
   39894:	756b 2070 6874 2065 6863 7069 000a 0000     kup the chip....
   398a4:	4128 5050 2829 4e49 4f46 0029 7244 7669     (APP)(INFO).Driv
   398b4:	7265 6556 4972 666e 3a6f 3020 2578 3830     erVerInfo: 0x%08
   398c4:	786c 000a 6166 6c69 6465 7420 206f 6564     lx..failed to de
   398d4:	692d 696e 6974 6c61 7a69 0a65 0000 0000     -initialize.....

000398e4 <__FUNCTION__.17806>:
   398e4:	6863 7069 775f 6b61 0065 0000               chip_wake...

000398f0 <__FUNCTION__.17855>:
   398f0:	6863 7069 645f 6965 696e 0074 4128 5050     chip_deinit.(APP
   39900:	2829 5245 2952 255b 5d73 255b 5d64 0000     )(ERR)[%s][%d]..
   39910:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
   39920:	206c 6e69 7469 6220 7375 000a 000d 0000     l init bus......
   39930:	4128 5050 2829 4e49 4f46 0029 6843 7069     (APP)(INFO).Chip
   39940:	4920 2044 6c25 0a78 0000 0000 6166 6c69      ID %lx.....fail
   39950:	6465 7420 206f 6e65 6261 656c 6920 746e     ed to enable int
   39960:	7265 7572 7470 2e73 0a2e 0000 6e5b 696d     errupts.....[nmi
   39970:	7320 6f74 5d70 203a 6863 7069 645f 6965      stop]: chip_dei
   39980:	696e 2074 6166 6c69 000a 0000 6e5b 696d     nit fail....[nmi
   39990:	7320 6f74 5d70 203a 5053 2049 6c66 7361      stop]: SPI flas
   399a0:	2068 6964 6173 6c62 2065 6166 6c69 000a     h disable fail..
   399b0:	6e5b 696d 7320 6f74 5d70 203a 6166 6c69     [nmi stop]: fail
   399c0:	6920 696e 2074 7562 0a73 0000                init bus...

000399cc <__FUNCTION__.17853>:
   399cc:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

000399d8 <__FUNCTION__.17860>:
   399d8:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...

000399e8 <crc7_syndrome_table>:
   399e8:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
   399f8:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
   39a08:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
   39a18:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
   39a28:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
   39a38:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
   39a48:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
   39a58:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
   39a68:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
   39a78:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
   39a88:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
   39a98:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
   39aa8:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
   39ab8:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
   39ac8:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
   39ad8:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
   39ae8:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   39af8:	5d64 0000 6e5b 696d 7320 6970 3a5d 4620     d]..[nmi spi]: F
   39b08:	6961 656c 2064 6d63 2064 7277 7469 2c65     ailed cmd write,
   39b18:	6220 7375 6520 7272 726f 2e2e 0a2e 0000      bus error......
   39b28:	000d 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   39b38:	6961 656c 2064 7562 2073 7265 6f72 2e72     ailed bus error.
   39b48:	2e2e 000a 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   39b58:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   39b68:	736e 2065 6572 6461 202c 7825 2520 2078     nse read, %x %x 
   39b78:	7825 000a 6e5b 696d 7320 6970 3a5d 4620     %x..[nmi spi]: F
   39b88:	6961 656c 2064 6d63 2064 6572 7073 6e6f     ailed cmd respon
   39b98:	6573 7220 6165 2c64 6220 7375 6520 7272     se read, bus err
   39ba8:	726f 2e2e 0a2e 0000 6e5b 696d 7320 6970     or......[nmi spi
   39bb8:	3a5d 7320 6970 6220 6675 6566 2072 6973     ]: spi buffer si
   39bc8:	657a 7420 6f6f 7320 616d 6c6c 2820 6425     ze too small (%d
   39bd8:	2029 2528 2964 000a 6e5b 696d 7320 6970     ) (%d)..[nmi spi
   39be8:	3a5d 4620 6961 656c 2064 6d63 2064 6572     ]: Failed cmd re
   39bf8:	7073 6e6f 6573 202c 6d63 2064 2528 3230     sponse, cmd (%02
   39c08:	2978 202c 6572 7073 2820 3025 7832 0a29     x), resp (%02x).
   39c18:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   39c28:	6961 656c 2064 6d63 2064 7473 7461 2065     ailed cmd state 
   39c38:	6572 7073 6e6f 6573 7320 6174 6574 2820     response state (
   39c48:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   39c58:	3a5d 4520 7272 726f 202c 6164 6174 7220     ]: Error, data r
   39c68:	6165 2064 6572 7073 6e6f 6573 2820 3025     ead response (%0
   39c78:	7832 0a29 0000 0000 6e5b 696d 7320 6970     2x).....[nmi spi
   39c88:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   39c98:	206e 6877 6e65 7220 6165 6964 676e 6420     n when reading d
   39ca8:	7461 2e61 000a 0000 6e5b 696d 7320 6970     ata.....[nmi spi
   39cb8:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   39cc8:	206e 6877 6e65 7220 6165 6964 676e 6320     n when reading c
   39cd8:	6372 0a2e 0000 0000 6e5b 696d 7320 6970     rc......[nmi spi
   39ce8:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   39cf8:	6f6c 6b63 7220 6165 2c64 6220 7375 6520     lock read, bus e
   39d08:	7272 726f 2e2e 0a2e 0000 0000 6e5b 696d     rror........[nmi
   39d18:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
   39d28:	6174 6220 6f6c 6b63 6320 6372 7220 6165     ta block crc rea
   39d38:	2c64 6220 7375 6520 7272 726f 2e2e 0a2e     d, bus error....
   39d48:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   39d58:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   39d68:	736e 2065 6572 6461 202c 7562 2073 7265     nse read, bus er
   39d78:	6f72 2e72 2e2e 000a 6e5b 696d 7320 6970     ror.....[nmi spi
   39d88:	3a5d 4620 6961 656c 2064 6164 6174 7220     ]: Failed data r
   39d98:	7365 6f70 736e 2065 6572 6461 2e2e 282e     esponse read...(
   39da8:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   39db8:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   39dc8:	6f6c 6b63 6320 646d 7720 6972 6574 202c     lock cmd write, 
   39dd8:	7562 2073 7265 6f72 2e72 2e2e 000a 0000     bus error.......
   39de8:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   39df8:	2064 6164 6174 6220 6f6c 6b63 7720 6972     d data block wri
   39e08:	6574 202c 7562 2073 7265 6f72 2e72 2e2e     te, bus error...
   39e18:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   39e28:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
   39e38:	6320 6372 7720 6972 6574 202c 7562 2073      crc write, bus 
   39e48:	7265 6f72 2e72 2e2e 000a 0000 6e5b 696d     error.......[nmi
   39e58:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   39e68:	2c64 7720 6972 6574 7220 6765 2820 3025     d, write reg (%0
   39e78:	7838 2e29 2e2e 000a 6552 6573 2074 6e61     8x).....Reset an
   39e88:	2064 6572 7274 2079 6425 2520 786c 2520     d retry %d %lx %
   39e98:	786c 000a 6e5b 696d 7320 6970 3a5d 4620     lx..[nmi spi]: F
   39ea8:	6961 656c 2064 6d63 2c64 7720 6972 6574     ailed cmd, write
   39eb8:	6220 6f6c 6b63 2820 3025 7838 2e29 2e2e      block (%08x)...
   39ec8:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   39ed8:	6961 656c 2064 6c62 636f 206b 6164 6174     ailed block data
   39ee8:	7720 6972 6574 2e2e 0a2e 0000 6552 6573      write......Rese
   39ef8:	2074 6e61 2064 6572 7274 2079 6425 2520     t and retry %d %
   39f08:	786c 2520 0a64 0000 6e5b 696d 7320 6970     lx %d...[nmi spi
   39f18:	3a5d 4620 6961 656c 2064 6d63 2c64 7220     ]: Failed cmd, r
   39f28:	6165 2064 6572 2067 2528 3830 2978 2e2e     ead reg (%08x)..
   39f38:	0a2e 0000 6552 6573 2074 6e61 2064 6572     ....Reset and re
   39f48:	7274 2079 6425 2520 786c 000a 6e5b 696d     try %d %lx..[nmi
   39f58:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   39f68:	2c64 7220 6165 2064 6c62 636f 206b 2528     d, read block (%
   39f78:	3830 2978 2e2e 0a2e 0000 0000 6e5b 696d     08x)........[nmi
   39f88:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   39f98:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   39fa8:	636f 6c6f 7720 7469 2068 5243 2043 6e6f     ocol with CRC on
   39fb8:	202c 6572 7974 6972 676e 7720 7469 2068     , retyring with 
   39fc8:	5243 2043 666f 2e66 2e2e 000a 6e5b 696d     CRC off.....[nmi
   39fd8:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   39fe8:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   39ff8:	636f 6c6f 2e2e 0a2e 0000 0000 6e5b 696d     ocol........[nmi
   3a008:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   3a018:	6574 6e72 6c61 7720 6972 6574 7020 6f72     ternal write pro
   3a028:	6f74 6f63 206c 6572 2e67 2e2e 000a 0000     tocol reg.......
   3a038:	6e5b 696d 7320 6970 3a5d 4620 6961 206c     [nmi spi]: Fail 
   3a048:	6d63 2064 6572 6461 6320 6968 2070 6469     cmd read chip id
   3a058:	2e2e 0a2e 0000 0000 4298 0002 4298 0002     .........B...B..
   3a068:	4328 0002 41ec 0002 4232 0002 4254 0002     (C...A..2B..TB..
   3a078:	42da 0002 42da 0002 4394 0002 41c0 0002     .B...B...C...A..
   3a088:	43ee 0002 43ee 0002 43ee 0002 43ee 0002     .C...C...C...C..
   3a098:	4276 0002 47f8 0002 47f8 0002 4880 0002     vB...G...G...H..
   3a0a8:	475c 0002 479e 0002 47bc 0002 4836 0002     \G...G...G..6H..
   3a0b8:	4836 0002 48e2 0002 4734 0002 4932 0002     6H...H..4G..2I..
   3a0c8:	4932 0002 4932 0002 4932 0002 47da 0002     2I..2I..2I...G..

0003a0d8 <__FUNCTION__.17128>:
   3a0d8:	7073 5f69 6d63 0064                         spi_cmd.

0003a0e0 <__FUNCTION__.17135>:
   3a0e0:	7073 5f69 6164 6174 725f 7073 0000 0000     spi_data_rsp....

0003a0f0 <__FUNCTION__.17144>:
   3a0f0:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

0003a0fc <__FUNCTION__.17177>:
   3a0fc:	7073 5f69 6d63 5f64 6f63 706d 656c 6574     spi_cmd_complete
   3a10c:	0000 0000                                   ....

0003a110 <__FUNCTION__.17223>:
   3a110:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

0003a120 <__FUNCTION__.17235>:
   3a120:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

0003a130 <__FUNCTION__.17246>:
   3a130:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

0003a140 <__FUNCTION__.17258>:
   3a140:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

0003a150 <__FUNCTION__.17269>:
   3a150:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

0003a15c <__FUNCTION__.17290>:
   3a15c:	6d6e 735f 6970 695f 696e 0074 4128 5050     nm_spi_init.(APP
   3a16c:	2829 4e49 4f46 0029 4528 5252 2952 7543     )(INFO).(ERRR)Cu
   3a17c:	7272 6e65 2074 253c 3e64 000a 000d 0000     rrent <%d>......
   3a18c:	6f53 6b63 7465 2520 2064 6573 7373 6f69     Socket %d sessio
   3a19c:	206e 4449 3d20 2520 0d64 000a 6f53 6b63     n ID = %d...Sock
   3a1ac:	7420 206f 6564 656c 6574 3c20 6425 0a3e      to delete <%d>.
   3a1bc:	0000 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   3a1cc:	5d73 255b 5d64 0000 4e53 2049 7845 6563     s][%d]..SNI Exce
   3a1dc:	6465 2073 614d 2078 654c 676e 6874 000a     eds Max Length..
   3a1ec:	6e55 6e6b 776f 206e 5353 204c 6f53 6b63     Unknown SSL Sock
   3a1fc:	7465 4f20 7470 6f69 206e 6425 000a 0000     et Option %d....
   3a20c:	6f4e 2074 5353 204c 6f53 6b63 7465 000a     Not SSL Socket..
   3a21c:	5322 2f44 4d4d 2043 6143 6472 5320 6f6c     "SD/MMC Card Slo
   3a22c:	2074 2230 0000 0000                         t 0"....

0003a234 <lun_desc>:
   3a234:	fe91 0001 fee9 0001 ff35 0001 ff81 0001     ........5.......
   3a244:	ffb1 0001 0035 0002 00c5 0002 a21c 0003     ....5...........
   3a254:	0800 4200 0c00 4200 1000 4200 1400 4200     ...B...B...B...B
   3a264:	1800 4200 1c00 4200 0a09 0c0b 0e0d 0000     ...B...B........
   3a274:	a216 0002 a290 0002 a290 0002 a234 0002     ............4...
   3a284:	a22e 0002 a23a 0002 a21c 0002 a240 0002     ....:.......@...
   3a294:	a276 0002 a478 0002 a4c8 0002 a4c8 0002     v...x...........
   3a2a4:	a4c4 0002 a46a 0002 a48a 0002 a45a 0002     ....j.......Z...
   3a2b4:	a49c 0002 a4ae 0002 a516 0002 a544 0002     ............D...
   3a2c4:	a544 0002 a540 0002 a510 0002 a51c 0002     D...@...........
   3a2d4:	a50a 0002 a522 0002 a528 0002               ...."...(...

0003a2e0 <tcc_modules>:
   3a2e0:	2000 4200 2400 4200 2800 4200               . .B.$.B.(.B

0003a2ec <_tcc_gclk_ids>:
   3a2ec:	1a1a 001b                                   ....

0003a2f0 <_tcc_apbcmasks>:
   3a2f0:	0100 0000 0200 0000 0400 0000               ............

0003a2fc <_tcc_maxs>:
   3a2fc:	ffff 00ff ffff 00ff ffff 0000               ............

0003a308 <_tcc_cc_nums>:
   3a308:	0204 0002                                   ....

0003a30c <_tcc_ow_nums>:
   3a30c:	0408 0002                                   ....

0003a310 <_tcc_intflag>:
   3a310:	0001 0000 0002 0000 0004 0000 0008 0000     ................
   3a320:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
   3a330:	0000 0001 0000 0002 0000 0004 0000 0008     ................

0003a340 <LfnOfs>:
   3a340:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................
   3a350:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
   3a360:	5d5b 0000 feeb 4d90 4453 534f 2e35 0030     [].....MSDOS5.0.
   3a370:	4f4e 4e20 4d41 2045 2020 4620 5441 3233     NO NAME    FAT32
   3a380:	2020 0020 4f4e 4e20 4d41 2045 2020 4620        .NO NAME    F
   3a390:	5441 2020 2020 0020                         AT     .

0003a398 <excvt.4558>:
   3a398:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
   3a3a8:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
   3a3b8:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
   3a3c8:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
   3a3d8:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
   3a3e8:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
   3a3f8:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
   3a408:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................

0003a418 <Tbl>:
   3a418:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
   3a428:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
   3a438:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
   3a448:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
   3a458:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
   3a468:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
   3a478:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
   3a488:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
   3a498:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
   3a4a8:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
   3a4b8:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
   3a4c8:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
   3a4d8:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
   3a4e8:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
   3a4f8:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
   3a508:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

0003a518 <tbl_lower.4308>:
   3a518:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
   3a528:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
   3a538:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
   3a548:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
   3a558:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
   3a568:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
   3a578:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
   3a588:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
   3a598:	0103 0105 0107 0109 010b 010d 010f 0111     ................
   3a5a8:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
   3a5b8:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
   3a5c8:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
   3a5d8:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
   3a5e8:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
   3a5f8:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
   3a608:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
   3a618:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
   3a628:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
   3a638:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
   3a648:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
   3a658:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
   3a668:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
   3a678:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
   3a688:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
   3a698:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
   3a6a8:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
   3a6b8:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
   3a6c8:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
   3a6d8:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
   3a6e8:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

0003a6f8 <tbl_upper.4309>:
   3a6f8:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
   3a708:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
   3a718:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
   3a728:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
   3a738:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
   3a748:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
   3a758:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
   3a768:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
   3a778:	0102 0104 0106 0108 010a 010c 010e 0110     ................
   3a788:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
   3a798:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
   3a7a8:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
   3a7b8:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
   3a7c8:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
   3a7d8:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
   3a7e8:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
   3a7f8:	0393 0394 0395 0396 0397 0398 0399 039a     ................
   3a808:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
   3a818:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
   3a828:	0411 0412 0413 0414 0415 0416 0417 0418     ................
   3a838:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
   3a848:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
   3a858:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
   3a868:	0402 0403 0404 0405 0406 0407 0408 0409     ................
   3a878:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
   3a888:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
   3a898:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
   3a8a8:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
   3a8b8:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
   3a8c8:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
   3a8d8:	f882 0002 f882 0002 f882 0002 f710 0002     ................
   3a8e8:	f882 0002 f7fa 0002 f882 0002 f882 0002     ................
   3a8f8:	f882 0002 f882 0002 f882 0002 f882 0002     ................
   3a908:	f882 0002 f874 0002 514d 4354 0000 0000     ....t...MQTC....
   3a918:	0004 0000 0000 0000 0000 0000 0000 0000     ................
   3a928:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   3a968:	514d 4354 0000 0000 0004 0000 0000 0000     MQTC............
	...
   3a980:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   3a9c0:	514d 5454 0000 0000 514d 7349 7064 0000     MQTT....MQIsdp..
   3a9d0:	7461 656d 2f6c 2e31 2e30 0032 7468 7074     atmel/1.0.2.http
   3a9e0:	2f3a 002f 7468 7074 3a73 2f2f 0000 0000     ://.https://....
   3a9f0:	4547 2054 0000 0000 4f50 5453 0020 0000     GET ....POST ...
   3aa00:	4544 454c 4554 0020 5550 2054 0000 0000     DELETE .PUT ....
   3aa10:	504f 4954 4e4f 2053 0000 0000 4548 4441     OPTIONS ....HEAD
   3aa20:	0020 0000 4820 5454 2f50 2e31 0d31 000a      ... HTTP/1.1...
   3aa30:	7355 7265 412d 6567 746e 203a 0000 0000     User-Agent: ....
   3aa40:	0a0d 0000 6f48 7473 203a 0000 6f43 6e6e     ....Host: ..Conn
   3aa50:	6365 6974 6e6f 203a 654b 7065 412d 696c     ection: Keep-Ali
   3aa60:	6576 0a0d 0000 0000 6341 6563 7470 452d     ve......Accept-E
   3aa70:	636e 646f 6e69 3a67 0d20 000a 6341 6563     ncoding: ...Acce
   3aa80:	7470 432d 6168 7372 7465 203a 7475 2d66     pt-Charset: utf-
   3aa90:	0d38 000a 7254 6e61 6673 7265 452d 636e     8...Transfer-Enc
   3aaa0:	646f 6e69 3a67 6320 7568 6b6e 6465 0a0d     oding: chunked..
   3aab0:	0000 0000 7525 0000 6f43 746e 6e65 2d74     ....%u..Content-
   3aac0:	654c 676e 6874 203a 0000 0000 3130 3332     Length: ....0123
   3aad0:	3534 3736 3938 6261 6463 6665 7254 6e61     456789abcdefTran
   3aae0:	6673 7265 452d 636e 646f 6e69 3a67 0020     sfer-Encoding: .
   3aaf0:	6f43 6e6e 6365 6974 6e6f 203a 0000 0000     Connection: ....
   3ab00:	5448 5054 002f 0000 0d31 0000 1976 0003     HTTP/...1...v...
   3ab10:	1970 0003 196a 0003 1964 0003 197c 0003     p...j...d...|...
   3ab20:	195e 0003 197c 0003 1958 0003 1952 0003     ^...|...X...R...
   3ab30:	197c 0003 194c 0003 194c 0003 1946 0003     |...L...L...F...
   3ab40:	1940 0003 193a 0003 2000 4200 2400 4200     @...:.... .B.$.B
   3ab50:	2800 4200 0a0d 0a0d 2d2d 2d2d 452d 4553     .(.B....-----ESE
   3ab60:	3135 2036 614d 6e69 5020 6f72 7267 6d61     516 Main Program
   3ab70:	2d2d 2d2d 0d2d 000a 0a0d 0a0d 6e49 7469     -----.......Init
   3ab80:	6169 696c 657a 4820 2e57 2e2e 0a0d 0000     ialize HW.......
   3ab90:	7245 6f72 2072 6e69 7469 6169 696c 697a     Error initializi
   3aba0:	676e 4920 4332 4420 6972 6576 2172 0a0d     ng I2C Driver!..
   3abb0:	0000 0000 6e49 7469 6169 696c 657a 2064     ....Initialized 
   3abc0:	3249 2043 7244 7669 7265 0d21 000a 0000     I2C Driver!.....
   3abd0:	7245 6f72 2072 6e69 7469 6169 696c 697a     Error initializi
   3abe0:	676e 5320 6565 6173 2177 0a0d 0000 0000     ng Seesaw!......
   3abf0:	6e49 7469 6169 696c 657a 2064 6553 7365     Initialized Sees
   3ac00:	7761 0d21 000a 0000 6143 6e6e 746f 6620     aw!.....Cannot f
   3ac10:	6e69 2064 4d49 2155 0a0d 0000 4d49 2055     ind IMU!....IMU 
   3ac20:	6f66 6e75 2164 0a0d 0000 0000 4d49 2055     found!......IMU 
   3ac30:	6e69 7469 6169 696c 657a 2164 0a0d 0000     initialized!....
   3ac40:	6f43 6c75 2064 6f6e 2074 6e69 7469 6169     Could not initia
   3ac50:	696c 657a 4920 554d 0a0d 0000 6e49 7469     lize IMU....Init
   3ac60:	6169 696c 697a 676e 6420 7369 6174 636e     ializing distanc
   3ac70:	2065 6573 736e 726f 0a0d 0000 6944 7473     e sensor....Dist
   3ac80:	6e61 6563 7320 6e65 6f73 2072 6e69 7469     ance sensor init
   3ac90:	6169 696c 657a 0d64 000a 0000 6548 7061     ialized.....Heap
   3aca0:	6220 6665 726f 2065 7473 7261 6974 676e      before starting
   3acb0:	7420 7361 736b 203a 6425 0a0d 0000 0000      tasks: %d......
   3acc0:	4c43 5f49 4154 4b53 0000 0000 5245 3a52     CLI_TASK....ERR:
   3acd0:	4320 494c 7420 7361 206b 6f63 6c75 2064      CLI task could 
   3ace0:	6f6e 2074 6562 6920 696e 6974 6c61 7a69     not be initializ
   3acf0:	6465 0d21 000a 0000 6548 7061 6120 7466     ed!.....Heap aft
   3ad00:	7265 7320 6174 7472 6e69 2067 4c43 3a49     er starting CLI:
   3ad10:	2520 0d64 000a 0000 4957 4946 545f 5341      %d.....WIFI_TAS
   3ad20:	004b 0000 5245 3a52 5720 4649 2049 6174     K...ERR: WIFI ta
   3ad30:	6b73 6320 756f 646c 6e20 746f 6220 2065     sk could not be 
   3ad40:	6e69 7469 6169 696c 657a 2164 0a0d 0000     initialized!....
   3ad50:	6548 7061 6120 7466 7265 7320 6174 7472     Heap after start
   3ad60:	6e69 2067 4957 4946 203a 6425 0a0d 0000     ing WIFI: %d....
   3ad70:	4955 5420 7361 006b 5245 3a52 5520 2049     UI Task.ERR: UI 
   3ad80:	6174 6b73 6320 756f 646c 6e20 746f 6220     task could not b
   3ad90:	2065 6e69 7469 6169 696c 657a 2164 0a0d     e initialized!..
   3ada0:	0000 0000 6548 7061 6120 7466 7265 7320     ....Heap after s
   3adb0:	6174 7472 6e69 2067 4955 5420 7361 3a6b     tarting UI Task:
   3adc0:	2520 0d64 000a 0000 6f43 746e 6f72 206c      %d.....Control 
   3add0:	6154 6b73 0000 0000 5245 3a52 4320 6e6f     Task....ERR: Con
   3ade0:	7274 6c6f 7420 7361 206b 6f63 6c75 2064     trol task could 
   3adf0:	6f6e 2074 6562 6920 696e 6974 6c61 7a69     not be initializ
   3ae00:	6465 0d21 000a 0000 6548 7061 6120 7466     ed!.....Heap aft
   3ae10:	7265 7320 6174 7472 6e69 2067 6f43 746e     er starting Cont
   3ae20:	6f72 206c 6154 6b73 203a 6425 0a0d 0000     rol Task: %d....
   3ae30:	7245 6f72 2072 6e6f 6d20 6d65 726f 2079     Error on memory 
   3ae40:	6c61 6f6c 6163 6974 6e6f 6f20 206e 5246     allocation on FR
   3ae50:	4545 5452 534f 0d21 000a 0000 7245 6f72     EERTOS!.....Erro
   3ae60:	2072 6e6f 7320 6174 6b63 6f20 6576 6672     r on stack overf
   3ae70:	6f6c 2077 6e6f 4620 4552 5245 4f54 2153     low on FREERTOS!
   3ae80:	0a0d 0000 3b98 0003 3ae8 0003 3ae8 0003     .....;...:...:..
   3ae90:	3ae6 0003 3b8a 0003 3b8a 0003 3b80 0003     .:...;...;...;..
   3aea0:	3ae6 0003 3b8a 0003 3b80 0003 3b8a 0003     .:...;...;...;..
   3aeb0:	3ae6 0003 3b90 0003 3b90 0003 3b90 0003     .:...;...;...;..
   3aec0:	3c20 0003 45a4 0003 4586 0003 4540 0003      <...E...E..@E..
   3aed0:	445e 0003 4540 0003 4578 0003 4540 0003     ^D..@E..xE..@E..
   3aee0:	445e 0003 4586 0003 4586 0003 4578 0003     ^D...E...E..xE..
   3aef0:	445e 0003 4456 0003 4456 0003 4456 0003     ^D..VD..VD..VD..
   3af00:	47bc 0003 4c04 0003 4ac4 0003 4ac4 0003     .G...L...J...J..
   3af10:	4ac0 0003 4bdc 0003 4bdc 0003 4bce 0003     .J...K...K...K..
   3af20:	4ac0 0003 4bdc 0003 4bce 0003 4bdc 0003     .J...K...K...K..
   3af30:	4ac0 0003 4be4 0003 4be4 0003 4be4 0003     .J...K...K...K..
   3af40:	4de8 0003                                   .M..

0003af44 <_global_impure_ptr>:
   3af44:	0128 2000                                   (.. 

0003af48 <__sf_fake_stderr>:
	...

0003af68 <__sf_fake_stdin>:
	...

0003af88 <__sf_fake_stdout>:
	...
   3afa8:	0043 4f50 4953 0058 002e 2d23 2b30 0020     C.POSIX...#-0+ .
   3afb8:	6c68 004c 6665 4567 4746 3000 3231 3433     hlL.efgEFG.01234
   3afc8:	3635 3837 4139 4342 4544 0046 3130 3332     56789ABCDEF.0123
   3afd8:	3534 3736 3938 6261 6463 6665 0000               456789abcdef.

0003afe5 <_ctype_>:
   3afe5:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   3aff5:	2020 2020 2020 2020 2020 2020 2020 2020                     
   3b005:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   3b015:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   3b025:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   3b035:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   3b045:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   3b055:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   3b065:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0003b0e8 <_init>:
   3b0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3b0ea:	46c0      	nop			; (mov r8, r8)
   3b0ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
   3b0ee:	bc08      	pop	{r3}
   3b0f0:	469e      	mov	lr, r3
   3b0f2:	4770      	bx	lr

0003b0f4 <__init_array_start>:
   3b0f4:	000120dd 	.word	0x000120dd

0003b0f8 <_fini>:
   3b0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3b0fa:	46c0      	nop			; (mov r8, r8)
   3b0fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   3b0fe:	bc08      	pop	{r3}
   3b100:	469e      	mov	lr, r3
   3b102:	4770      	bx	lr

0003b104 <__fini_array_start>:
   3b104:	000120b5 	.word	0x000120b5
