
ESE516 MAIN FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00027d6c  00012000  00012000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000002f0  20000000  00039d6c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00005968  200002f0  0003a060  000302f0  2**4
                  ALLOC
  3 .stack        00002000  20005c58  0003f9c8  000302f0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000302f0  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00030318  2**0
                  CONTENTS, READONLY
  6 .debug_info   00122a03  00000000  00000000  00030371  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00010f6a  00000000  00000000  00152d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00012353  00000000  00000000  00163cde  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000032c0  00000000  00000000  00176031  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00002ec8  00000000  00000000  001792f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00041682  00000000  00000000  0017c1b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0005b471  00000000  00000000  001bd83b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000be636  00000000  00000000  00218cac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000be1c  00000000  00000000  002d72e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00012000 <exception_table>:
   12000:	58 7c 00 20 f9 a0 02 00 f1 a1 02 00 f1 a1 02 00     X|. ............
	...
   1202c:	05 91 01 00 00 00 00 00 00 00 00 00 21 92 01 00     ............!...
   1203c:	69 92 01 00 f1 a1 02 00 f1 a1 02 00 f1 a1 02 00     i...............
   1204c:	1d 61 02 00 49 56 02 00 f1 a1 02 00 09 2e 01 00     .a..IV..........
   1205c:	f1 a1 02 00 4d 2f 01 00 c1 67 02 00 d9 67 02 00     ....M/...g...g..
   1206c:	f1 67 02 00 09 68 02 00 21 68 02 00 39 68 02 00     .g...h..!h..9h..
   1207c:	41 a0 02 00 55 a0 02 00 69 a0 02 00 f1 6d 01 00     A...U...i....m..
   1208c:	05 6e 01 00 19 6e 01 00 00 00 00 00 00 00 00 00     .n...n..........
   1209c:	91 2c 01 00 f1 a1 02 00 cd 2d 01 00 f1 a1 02 00     .,.......-......
   120ac:	f1 a1 02 00 00 00 00 00                             ........

000120b4 <__do_global_dtors_aux>:
   120b4:	b510      	push	{r4, lr}
   120b6:	4c06      	ldr	r4, [pc, #24]	; (120d0 <__do_global_dtors_aux+0x1c>)
   120b8:	7823      	ldrb	r3, [r4, #0]
   120ba:	2b00      	cmp	r3, #0
   120bc:	d107      	bne.n	120ce <__do_global_dtors_aux+0x1a>
   120be:	4b05      	ldr	r3, [pc, #20]	; (120d4 <__do_global_dtors_aux+0x20>)
   120c0:	2b00      	cmp	r3, #0
   120c2:	d002      	beq.n	120ca <__do_global_dtors_aux+0x16>
   120c4:	4804      	ldr	r0, [pc, #16]	; (120d8 <__do_global_dtors_aux+0x24>)
   120c6:	e000      	b.n	120ca <__do_global_dtors_aux+0x16>
   120c8:	bf00      	nop
   120ca:	2301      	movs	r3, #1
   120cc:	7023      	strb	r3, [r4, #0]
   120ce:	bd10      	pop	{r4, pc}
   120d0:	200002f0 	.word	0x200002f0
   120d4:	00000000 	.word	0x00000000
   120d8:	00039d6c 	.word	0x00039d6c

000120dc <frame_dummy>:
   120dc:	4b08      	ldr	r3, [pc, #32]	; (12100 <frame_dummy+0x24>)
   120de:	b510      	push	{r4, lr}
   120e0:	2b00      	cmp	r3, #0
   120e2:	d003      	beq.n	120ec <frame_dummy+0x10>
   120e4:	4907      	ldr	r1, [pc, #28]	; (12104 <frame_dummy+0x28>)
   120e6:	4808      	ldr	r0, [pc, #32]	; (12108 <frame_dummy+0x2c>)
   120e8:	e000      	b.n	120ec <frame_dummy+0x10>
   120ea:	bf00      	nop
   120ec:	4807      	ldr	r0, [pc, #28]	; (1210c <frame_dummy+0x30>)
   120ee:	6803      	ldr	r3, [r0, #0]
   120f0:	2b00      	cmp	r3, #0
   120f2:	d100      	bne.n	120f6 <frame_dummy+0x1a>
   120f4:	bd10      	pop	{r4, pc}
   120f6:	4b06      	ldr	r3, [pc, #24]	; (12110 <frame_dummy+0x34>)
   120f8:	2b00      	cmp	r3, #0
   120fa:	d0fb      	beq.n	120f4 <frame_dummy+0x18>
   120fc:	4798      	blx	r3
   120fe:	e7f9      	b.n	120f4 <frame_dummy+0x18>
   12100:	00000000 	.word	0x00000000
   12104:	200002f4 	.word	0x200002f4
   12108:	00039d6c 	.word	0x00039d6c
   1210c:	00039d6c 	.word	0x00039d6c
   12110:	00000000 	.word	0x00000000

00012114 <ssd1306_hard_reset>:
 * \brief Perform a hard reset of the OLED controller
 *
 * This functions will reset the OLED controller by setting the reset pin low.
 */
static inline void ssd1306_hard_reset(void)
{
   12114:	b580      	push	{r7, lr}
   12116:	af00      	add	r7, sp, #0
	/*uint32_t delay_10us = 10 * (system_gclk_gen_get_hz(0)/1000000);
	port_pin_set_output_level(SSD1306_RES_PIN, false);
	delay_cycles(delay_10us); // At lest 10us
	port_pin_set_output_level(SSD1306_RES_PIN, true);
	delay_cycles(delay_10us); // At lest 10us*/
}
   12118:	46c0      	nop			; (mov r8, r8)
   1211a:	46bd      	mov	sp, r7
   1211c:	bd80      	pop	{r7, pc}

0001211e <ssd1306_interface_init>:
 *
 * Depending on what interface used for interfacing the OLED controller this
 * function will initialize the necessary hardware.
 */
static void ssd1306_interface_init(void)
{
   1211e:	b580      	push	{r7, lr}
   12120:	af00      	add	r7, sp, #0

}
   12122:	46c0      	nop			; (mov r8, r8)
   12124:	46bd      	mov	sp, r7
   12126:	bd80      	pop	{r7, pc}

00012128 <ssd1306_init>:
 * Call this function to initialize the hardware interface and the OLED
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void ssd1306_init(void)
{
   12128:	b580      	push	{r7, lr}
   1212a:	af00      	add	r7, sp, #0


	// Initialize the interface
	ssd1306_interface_init();
   1212c:	4b25      	ldr	r3, [pc, #148]	; (121c4 <ssd1306_init+0x9c>)
   1212e:	4798      	blx	r3

	// Do a hard reset of the OLED display controller
	ssd1306_hard_reset();
   12130:	4b25      	ldr	r3, [pc, #148]	; (121c8 <ssd1306_init+0xa0>)
   12132:	4798      	blx	r3

	// Set the reset pin to the default state
	//port_pin_set_output_level(SSD1306_RES_PIN, true);
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFF); //0xAE
   12134:	20ae      	movs	r0, #174	; 0xae
   12136:	4b25      	ldr	r3, [pc, #148]	; (121cc <ssd1306_init+0xa4>)
   12138:	4798      	blx	r3
	
	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO); //0XD5
   1213a:	20d5      	movs	r0, #213	; 0xd5
   1213c:	4b23      	ldr	r3, [pc, #140]	; (121cc <ssd1306_init+0xa4>)
   1213e:	4798      	blx	r3
	ssd1306_write_command(0x80);
   12140:	2080      	movs	r0, #128	; 0x80
   12142:	4b22      	ldr	r3, [pc, #136]	; (121cc <ssd1306_init+0xa4>)
   12144:	4798      	blx	r3
	
	
	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO); //0XA8
   12146:	20a8      	movs	r0, #168	; 0xa8
   12148:	4b20      	ldr	r3, [pc, #128]	; (121cc <ssd1306_init+0xa4>)
   1214a:	4798      	blx	r3
	ssd1306_write_command(0x2F); //2F
   1214c:	202f      	movs	r0, #47	; 0x2f
   1214e:	4b1f      	ldr	r3, [pc, #124]	; (121cc <ssd1306_init+0xa4>)
   12150:	4798      	blx	r3
	
	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET); //D3
   12152:	20d3      	movs	r0, #211	; 0xd3
   12154:	4b1d      	ldr	r3, [pc, #116]	; (121cc <ssd1306_init+0xa4>)
   12156:	4798      	blx	r3
	ssd1306_write_command(0x00);
   12158:	2000      	movs	r0, #0
   1215a:	4b1c      	ldr	r3, [pc, #112]	; (121cc <ssd1306_init+0xa4>)
   1215c:	4798      	blx	r3
	
	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));	
   1215e:	2040      	movs	r0, #64	; 0x40
   12160:	4b1a      	ldr	r3, [pc, #104]	; (121cc <ssd1306_init+0xa4>)
   12162:	4798      	blx	r3
	
	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING); //8D
   12164:	208d      	movs	r0, #141	; 0x8d
   12166:	4b19      	ldr	r3, [pc, #100]	; (121cc <ssd1306_init+0xa4>)
   12168:	4798      	blx	r3
	ssd1306_write_command(0x14);
   1216a:	2014      	movs	r0, #20
   1216c:	4b17      	ldr	r3, [pc, #92]	; (121cc <ssd1306_init+0xa4>)
   1216e:	4798      	blx	r3

	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY); //A6
   12170:	20a6      	movs	r0, #166	; 0xa6
   12172:	4b16      	ldr	r3, [pc, #88]	; (121cc <ssd1306_init+0xa4>)
   12174:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON); //0xA4
   12176:	20a4      	movs	r0, #164	; 0xa4
   12178:	4b14      	ldr	r3, [pc, #80]	; (121cc <ssd1306_init+0xa4>)
   1217a:	4798      	blx	r3
		
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL0_SEG0| 0x1); //0xA0
   1217c:	20a1      	movs	r0, #161	; 0xa1
   1217e:	4b13      	ldr	r3, [pc, #76]	; (121cc <ssd1306_init+0xa4>)
   12180:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN); //0xC8
   12182:	20c8      	movs	r0, #200	; 0xc8
   12184:	4b11      	ldr	r3, [pc, #68]	; (121cc <ssd1306_init+0xa4>)
   12186:	4798      	blx	r3
	
	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS); //0xDA
   12188:	20da      	movs	r0, #218	; 0xda
   1218a:	4b10      	ldr	r3, [pc, #64]	; (121cc <ssd1306_init+0xa4>)
   1218c:	4798      	blx	r3
	ssd1306_write_command(0x12);
   1218e:	2012      	movs	r0, #18
   12190:	4b0e      	ldr	r3, [pc, #56]	; (121cc <ssd1306_init+0xa4>)
   12192:	4798      	blx	r3
		
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0); //0x81
   12194:	2081      	movs	r0, #129	; 0x81
   12196:	4b0d      	ldr	r3, [pc, #52]	; (121cc <ssd1306_init+0xa4>)
   12198:	4798      	blx	r3
	ssd1306_write_command(0x8F);
   1219a:	208f      	movs	r0, #143	; 0x8f
   1219c:	4b0b      	ldr	r3, [pc, #44]	; (121cc <ssd1306_init+0xa4>)
   1219e:	4798      	blx	r3
	
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD); //0xD9
   121a0:	20d9      	movs	r0, #217	; 0xd9
   121a2:	4b0a      	ldr	r3, [pc, #40]	; (121cc <ssd1306_init+0xa4>)
   121a4:	4798      	blx	r3
	ssd1306_write_command(0xF1);	
   121a6:	20f1      	movs	r0, #241	; 0xf1
   121a8:	4b08      	ldr	r3, [pc, #32]	; (121cc <ssd1306_init+0xa4>)
   121aa:	4798      	blx	r3
	
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL); //DB
   121ac:	20db      	movs	r0, #219	; 0xdb
   121ae:	4b07      	ldr	r3, [pc, #28]	; (121cc <ssd1306_init+0xa4>)
   121b0:	4798      	blx	r3
	ssd1306_write_command(0x40);
   121b2:	2040      	movs	r0, #64	; 0x40
   121b4:	4b05      	ldr	r3, [pc, #20]	; (121cc <ssd1306_init+0xa4>)
   121b6:	4798      	blx	r3

	
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
   121b8:	20af      	movs	r0, #175	; 0xaf
   121ba:	4b04      	ldr	r3, [pc, #16]	; (121cc <ssd1306_init+0xa4>)
   121bc:	4798      	blx	r3

}
   121be:	46c0      	nop			; (mov r8, r8)
   121c0:	46bd      	mov	sp, r7
   121c2:	bd80      	pop	{r7, pc}
   121c4:	0001211f 	.word	0x0001211f
   121c8:	00012115 	.word	0x00012115
   121cc:	000121d1 	.word	0x000121d1

000121d0 <ssd1306_write_command>:
 * \param command the command to write
 */


void ssd1306_write_command(uint8_t command)
{
   121d0:	b580      	push	{r7, lr}
   121d2:	b084      	sub	sp, #16
   121d4:	af00      	add	r7, sp, #0
   121d6:	0002      	movs	r2, r0
   121d8:	1dfb      	adds	r3, r7, #7
   121da:	701a      	strb	r2, [r3, #0]
	//Send 0 command byte
	uint8_t data[2];
	data[0] = I2C_COMMAND_SSD1306;
   121dc:	230c      	movs	r3, #12
   121de:	18fb      	adds	r3, r7, r3
   121e0:	2200      	movs	r2, #0
   121e2:	701a      	strb	r2, [r3, #0]
	data[1] = command;
   121e4:	230c      	movs	r3, #12
   121e6:	18fb      	adds	r3, r7, r3
   121e8:	1dfa      	adds	r2, r7, #7
   121ea:	7812      	ldrb	r2, [r2, #0]
   121ec:	705a      	strb	r2, [r3, #1]
	i2cOled.address = SSD1306_I2C_ADDRESS;
   121ee:	4b0c      	ldr	r3, [pc, #48]	; (12220 <ssd1306_write_command+0x50>)
   121f0:	223c      	movs	r2, #60	; 0x3c
   121f2:	701a      	strb	r2, [r3, #0]
	i2cOled.msgOut = (const uint8_t*) &data[0];
   121f4:	4b0a      	ldr	r3, [pc, #40]	; (12220 <ssd1306_write_command+0x50>)
   121f6:	220c      	movs	r2, #12
   121f8:	18ba      	adds	r2, r7, r2
   121fa:	605a      	str	r2, [r3, #4]
	i2cOled.lenOut = sizeof(data);
   121fc:	4b08      	ldr	r3, [pc, #32]	; (12220 <ssd1306_write_command+0x50>)
   121fe:	2202      	movs	r2, #2
   12200:	81da      	strh	r2, [r3, #14]
	i2cOled.msgIn = 0;
   12202:	4b07      	ldr	r3, [pc, #28]	; (12220 <ssd1306_write_command+0x50>)
   12204:	2200      	movs	r2, #0
   12206:	609a      	str	r2, [r3, #8]
	i2cOled.lenIn = 0;
   12208:	4b05      	ldr	r3, [pc, #20]	; (12220 <ssd1306_write_command+0x50>)
   1220a:	2200      	movs	r2, #0
   1220c:	819a      	strh	r2, [r3, #12]
	
	I2cWriteDataWait(&i2cOled, 100);
   1220e:	4b04      	ldr	r3, [pc, #16]	; (12220 <ssd1306_write_command+0x50>)
   12210:	2164      	movs	r1, #100	; 0x64
   12212:	0018      	movs	r0, r3
   12214:	4b03      	ldr	r3, [pc, #12]	; (12224 <ssd1306_write_command+0x54>)
   12216:	4798      	blx	r3
}
   12218:	46c0      	nop			; (mov r8, r8)
   1221a:	46bd      	mov	sp, r7
   1221c:	b004      	add	sp, #16
   1221e:	bd80      	pop	{r7, pc}
   12220:	20004734 	.word	0x20004734
   12224:	000144f1 	.word	0x000144f1

00012228 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
   12228:	b580      	push	{r7, lr}
   1222a:	b084      	sub	sp, #16
   1222c:	af00      	add	r7, sp, #0
   1222e:	0002      	movs	r2, r0
   12230:	1dfb      	adds	r3, r7, #7
   12232:	701a      	strb	r2, [r3, #0]
	uint8_t msg[2];
	msg[0] = I2C_DATA_SSD1306;
   12234:	230c      	movs	r3, #12
   12236:	18fb      	adds	r3, r7, r3
   12238:	2240      	movs	r2, #64	; 0x40
   1223a:	701a      	strb	r2, [r3, #0]
	msg[1] = data;
   1223c:	230c      	movs	r3, #12
   1223e:	18fb      	adds	r3, r7, r3
   12240:	1dfa      	adds	r2, r7, #7
   12242:	7812      	ldrb	r2, [r2, #0]
   12244:	705a      	strb	r2, [r3, #1]
	i2cOled.address = SSD1306_I2C_ADDRESS;
   12246:	4b0c      	ldr	r3, [pc, #48]	; (12278 <ssd1306_write_data+0x50>)
   12248:	223c      	movs	r2, #60	; 0x3c
   1224a:	701a      	strb	r2, [r3, #0]
	i2cOled.msgOut = (const uint8_t*) &msg[0];
   1224c:	4b0a      	ldr	r3, [pc, #40]	; (12278 <ssd1306_write_data+0x50>)
   1224e:	220c      	movs	r2, #12
   12250:	18ba      	adds	r2, r7, r2
   12252:	605a      	str	r2, [r3, #4]
	i2cOled.lenOut = sizeof(msg);
   12254:	4b08      	ldr	r3, [pc, #32]	; (12278 <ssd1306_write_data+0x50>)
   12256:	2202      	movs	r2, #2
   12258:	81da      	strh	r2, [r3, #14]
	i2cOled.msgIn = 0;
   1225a:	4b07      	ldr	r3, [pc, #28]	; (12278 <ssd1306_write_data+0x50>)
   1225c:	2200      	movs	r2, #0
   1225e:	609a      	str	r2, [r3, #8]
	i2cOled.lenIn = 0;
   12260:	4b05      	ldr	r3, [pc, #20]	; (12278 <ssd1306_write_data+0x50>)
   12262:	2200      	movs	r2, #0
   12264:	819a      	strh	r2, [r3, #12]
	
	I2cWriteDataWait(&i2cOled, 100);
   12266:	4b04      	ldr	r3, [pc, #16]	; (12278 <ssd1306_write_data+0x50>)
   12268:	2164      	movs	r1, #100	; 0x64
   1226a:	0018      	movs	r0, r3
   1226c:	4b03      	ldr	r3, [pc, #12]	; (1227c <ssd1306_write_data+0x54>)
   1226e:	4798      	blx	r3
}
   12270:	46c0      	nop			; (mov r8, r8)
   12272:	46bd      	mov	sp, r7
   12274:	b004      	add	sp, #16
   12276:	bd80      	pop	{r7, pc}
   12278:	20004734 	.word	0x20004734
   1227c:	000144f1 	.word	0x000144f1

00012280 <gfx_mono_set_framebuffer>:
	uint8_t framebuffer[FRAMEBUFFER_SIZE];
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
   12280:	b580      	push	{r7, lr}
   12282:	b082      	sub	sp, #8
   12284:	af00      	add	r7, sp, #0
   12286:	6078      	str	r0, [r7, #4]
	fbpointer = framebuffer;
   12288:	4b03      	ldr	r3, [pc, #12]	; (12298 <gfx_mono_set_framebuffer+0x18>)
   1228a:	687a      	ldr	r2, [r7, #4]
   1228c:	601a      	str	r2, [r3, #0]
}
   1228e:	46c0      	nop			; (mov r8, r8)
   12290:	46bd      	mov	sp, r7
   12292:	b002      	add	sp, #8
   12294:	bd80      	pop	{r7, pc}
   12296:	46c0      	nop			; (mov r8, r8)
   12298:	2000030c 	.word	0x2000030c

0001229c <gfx_mono_framebuffer_put_byte>:
	gfx_mono_framebuffer_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
   1229c:	b590      	push	{r4, r7, lr}
   1229e:	b083      	sub	sp, #12
   122a0:	af00      	add	r7, sp, #0
   122a2:	0004      	movs	r4, r0
   122a4:	0008      	movs	r0, r1
   122a6:	0011      	movs	r1, r2
   122a8:	1dfb      	adds	r3, r7, #7
   122aa:	1c22      	adds	r2, r4, #0
   122ac:	701a      	strb	r2, [r3, #0]
   122ae:	1dbb      	adds	r3, r7, #6
   122b0:	1c02      	adds	r2, r0, #0
   122b2:	701a      	strb	r2, [r3, #0]
   122b4:	1d7b      	adds	r3, r7, #5
   122b6:	1c0a      	adds	r2, r1, #0
   122b8:	701a      	strb	r2, [r3, #0]
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
   122ba:	4b08      	ldr	r3, [pc, #32]	; (122dc <gfx_mono_framebuffer_put_byte+0x40>)
   122bc:	681a      	ldr	r2, [r3, #0]
   122be:	1dfb      	adds	r3, r7, #7
   122c0:	781b      	ldrb	r3, [r3, #0]
   122c2:	019b      	lsls	r3, r3, #6
   122c4:	0019      	movs	r1, r3
   122c6:	1dbb      	adds	r3, r7, #6
   122c8:	781b      	ldrb	r3, [r3, #0]
   122ca:	18cb      	adds	r3, r1, r3
   122cc:	18d3      	adds	r3, r2, r3
   122ce:	1d7a      	adds	r2, r7, #5
   122d0:	7812      	ldrb	r2, [r2, #0]
   122d2:	701a      	strb	r2, [r3, #0]
}
   122d4:	46c0      	nop			; (mov r8, r8)
   122d6:	46bd      	mov	sp, r7
   122d8:	b003      	add	sp, #12
   122da:	bd90      	pop	{r4, r7, pc}
   122dc:	2000030c 	.word	0x2000030c

000122e0 <gfx_mono_framebuffer_get_byte>:
 * \code
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
   122e0:	b580      	push	{r7, lr}
   122e2:	b082      	sub	sp, #8
   122e4:	af00      	add	r7, sp, #0
   122e6:	0002      	movs	r2, r0
   122e8:	1dfb      	adds	r3, r7, #7
   122ea:	701a      	strb	r2, [r3, #0]
   122ec:	1dbb      	adds	r3, r7, #6
   122ee:	1c0a      	adds	r2, r1, #0
   122f0:	701a      	strb	r2, [r3, #0]
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
   122f2:	4b07      	ldr	r3, [pc, #28]	; (12310 <gfx_mono_framebuffer_get_byte+0x30>)
   122f4:	681a      	ldr	r2, [r3, #0]
   122f6:	1dfb      	adds	r3, r7, #7
   122f8:	781b      	ldrb	r3, [r3, #0]
   122fa:	019b      	lsls	r3, r3, #6
   122fc:	0019      	movs	r1, r3
   122fe:	1dbb      	adds	r3, r7, #6
   12300:	781b      	ldrb	r3, [r3, #0]
   12302:	18cb      	adds	r3, r1, r3
   12304:	18d3      	adds	r3, r2, r3
   12306:	781b      	ldrb	r3, [r3, #0]
}
   12308:	0018      	movs	r0, r3
   1230a:	46bd      	mov	sp, r7
   1230c:	b002      	add	sp, #8
   1230e:	bd80      	pop	{r7, pc}
   12310:	2000030c 	.word	0x2000030c

00012314 <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
   12314:	b5b0      	push	{r4, r5, r7, lr}
   12316:	b084      	sub	sp, #16
   12318:	af00      	add	r7, sp, #0
   1231a:	0005      	movs	r5, r0
   1231c:	000c      	movs	r4, r1
   1231e:	0010      	movs	r0, r2
   12320:	0019      	movs	r1, r3
   12322:	1dfb      	adds	r3, r7, #7
   12324:	1c2a      	adds	r2, r5, #0
   12326:	701a      	strb	r2, [r3, #0]
   12328:	1dbb      	adds	r3, r7, #6
   1232a:	1c22      	adds	r2, r4, #0
   1232c:	701a      	strb	r2, [r3, #0]
   1232e:	1d7b      	adds	r3, r7, #5
   12330:	1c02      	adds	r2, r0, #0
   12332:	701a      	strb	r2, [r3, #0]
   12334:	1d3b      	adds	r3, r7, #4
   12336:	1c0a      	adds	r2, r1, #0
   12338:	701a      	strb	r2, [r3, #0]
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
   1233a:	1dfb      	adds	r3, r7, #7
   1233c:	781a      	ldrb	r2, [r3, #0]
   1233e:	1d7b      	adds	r3, r7, #5
   12340:	781b      	ldrb	r3, [r3, #0]
   12342:	18d3      	adds	r3, r2, r3
   12344:	2b40      	cmp	r3, #64	; 0x40
   12346:	dd05      	ble.n	12354 <gfx_mono_generic_draw_horizontal_line+0x40>
		length = GFX_MONO_LCD_WIDTH - x;
   12348:	1d7b      	adds	r3, r7, #5
   1234a:	1dfa      	adds	r2, r7, #7
   1234c:	7812      	ldrb	r2, [r2, #0]
   1234e:	2140      	movs	r1, #64	; 0x40
   12350:	1a8a      	subs	r2, r1, r2
   12352:	701a      	strb	r2, [r3, #0]
	}

	page = y / 8;
   12354:	230f      	movs	r3, #15
   12356:	18fb      	adds	r3, r7, r3
   12358:	1dba      	adds	r2, r7, #6
   1235a:	7812      	ldrb	r2, [r2, #0]
   1235c:	08d2      	lsrs	r2, r2, #3
   1235e:	701a      	strb	r2, [r3, #0]
	pixelmask = (1 << (y - (page * 8)));
   12360:	1dbb      	adds	r3, r7, #6
   12362:	781a      	ldrb	r2, [r3, #0]
   12364:	230f      	movs	r3, #15
   12366:	18fb      	adds	r3, r7, r3
   12368:	781b      	ldrb	r3, [r3, #0]
   1236a:	00db      	lsls	r3, r3, #3
   1236c:	1ad3      	subs	r3, r2, r3
   1236e:	2201      	movs	r2, #1
   12370:	409a      	lsls	r2, r3
   12372:	230e      	movs	r3, #14
   12374:	18fb      	adds	r3, r7, r3
   12376:	701a      	strb	r2, [r3, #0]

	if (length == 0) {
   12378:	1d7b      	adds	r3, r7, #5
   1237a:	781b      	ldrb	r3, [r3, #0]
   1237c:	2b00      	cmp	r3, #0
   1237e:	d100      	bne.n	12382 <gfx_mono_generic_draw_horizontal_line+0x6e>
   12380:	e0a4      	b.n	124cc <gfx_mono_generic_draw_horizontal_line+0x1b8>
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
   12382:	1d3b      	adds	r3, r7, #4
   12384:	781b      	ldrb	r3, [r3, #0]
   12386:	2b01      	cmp	r3, #1
   12388:	d02f      	beq.n	123ea <gfx_mono_generic_draw_horizontal_line+0xd6>
   1238a:	2b02      	cmp	r3, #2
   1238c:	d100      	bne.n	12390 <gfx_mono_generic_draw_horizontal_line+0x7c>
   1238e:	e095      	b.n	124bc <gfx_mono_generic_draw_horizontal_line+0x1a8>
   12390:	2b00      	cmp	r3, #0
   12392:	d061      	beq.n	12458 <gfx_mono_generic_draw_horizontal_line+0x144>
			gfx_mono_put_byte(page, x + length, temp);
		}
		break;

	default:
		break;
   12394:	e09b      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
			temp = gfx_mono_get_byte(page, x + length);
   12396:	1dfa      	adds	r2, r7, #7
   12398:	1d7b      	adds	r3, r7, #5
   1239a:	7812      	ldrb	r2, [r2, #0]
   1239c:	781b      	ldrb	r3, [r3, #0]
   1239e:	18d3      	adds	r3, r2, r3
   123a0:	b2da      	uxtb	r2, r3
   123a2:	230d      	movs	r3, #13
   123a4:	18fc      	adds	r4, r7, r3
   123a6:	230f      	movs	r3, #15
   123a8:	18fb      	adds	r3, r7, r3
   123aa:	781b      	ldrb	r3, [r3, #0]
   123ac:	0011      	movs	r1, r2
   123ae:	0018      	movs	r0, r3
   123b0:	4b48      	ldr	r3, [pc, #288]	; (124d4 <gfx_mono_generic_draw_horizontal_line+0x1c0>)
   123b2:	4798      	blx	r3
   123b4:	0003      	movs	r3, r0
   123b6:	7023      	strb	r3, [r4, #0]
			temp |= pixelmask;
   123b8:	230d      	movs	r3, #13
   123ba:	18fb      	adds	r3, r7, r3
   123bc:	220d      	movs	r2, #13
   123be:	18b9      	adds	r1, r7, r2
   123c0:	220e      	movs	r2, #14
   123c2:	18ba      	adds	r2, r7, r2
   123c4:	7809      	ldrb	r1, [r1, #0]
   123c6:	7812      	ldrb	r2, [r2, #0]
   123c8:	430a      	orrs	r2, r1
   123ca:	701a      	strb	r2, [r3, #0]
			gfx_mono_put_byte(page, x + length, temp);
   123cc:	1dfa      	adds	r2, r7, #7
   123ce:	1d7b      	adds	r3, r7, #5
   123d0:	7812      	ldrb	r2, [r2, #0]
   123d2:	781b      	ldrb	r3, [r3, #0]
   123d4:	18d3      	adds	r3, r2, r3
   123d6:	b2d9      	uxtb	r1, r3
   123d8:	230d      	movs	r3, #13
   123da:	18fb      	adds	r3, r7, r3
   123dc:	781a      	ldrb	r2, [r3, #0]
   123de:	230f      	movs	r3, #15
   123e0:	18fb      	adds	r3, r7, r3
   123e2:	7818      	ldrb	r0, [r3, #0]
   123e4:	2300      	movs	r3, #0
   123e6:	4c3c      	ldr	r4, [pc, #240]	; (124d8 <gfx_mono_generic_draw_horizontal_line+0x1c4>)
   123e8:	47a0      	blx	r4
		while (length-- > 0) {
   123ea:	1d7b      	adds	r3, r7, #5
   123ec:	781b      	ldrb	r3, [r3, #0]
   123ee:	1d7a      	adds	r2, r7, #5
   123f0:	1e59      	subs	r1, r3, #1
   123f2:	7011      	strb	r1, [r2, #0]
   123f4:	2b00      	cmp	r3, #0
   123f6:	d1ce      	bne.n	12396 <gfx_mono_generic_draw_horizontal_line+0x82>
		break;
   123f8:	e069      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
			temp = gfx_mono_get_byte(page, x + length);
   123fa:	1dfa      	adds	r2, r7, #7
   123fc:	1d7b      	adds	r3, r7, #5
   123fe:	7812      	ldrb	r2, [r2, #0]
   12400:	781b      	ldrb	r3, [r3, #0]
   12402:	18d3      	adds	r3, r2, r3
   12404:	b2da      	uxtb	r2, r3
   12406:	230d      	movs	r3, #13
   12408:	18fc      	adds	r4, r7, r3
   1240a:	230f      	movs	r3, #15
   1240c:	18fb      	adds	r3, r7, r3
   1240e:	781b      	ldrb	r3, [r3, #0]
   12410:	0011      	movs	r1, r2
   12412:	0018      	movs	r0, r3
   12414:	4b2f      	ldr	r3, [pc, #188]	; (124d4 <gfx_mono_generic_draw_horizontal_line+0x1c0>)
   12416:	4798      	blx	r3
   12418:	0003      	movs	r3, r0
   1241a:	7023      	strb	r3, [r4, #0]
			temp &= ~pixelmask;
   1241c:	230e      	movs	r3, #14
   1241e:	18fb      	adds	r3, r7, r3
   12420:	781b      	ldrb	r3, [r3, #0]
   12422:	b25b      	sxtb	r3, r3
   12424:	43db      	mvns	r3, r3
   12426:	b25b      	sxtb	r3, r3
   12428:	220d      	movs	r2, #13
   1242a:	18ba      	adds	r2, r7, r2
   1242c:	7812      	ldrb	r2, [r2, #0]
   1242e:	b252      	sxtb	r2, r2
   12430:	4013      	ands	r3, r2
   12432:	b25a      	sxtb	r2, r3
   12434:	230d      	movs	r3, #13
   12436:	18fb      	adds	r3, r7, r3
   12438:	701a      	strb	r2, [r3, #0]
			gfx_mono_put_byte(page, x + length, temp);
   1243a:	1dfa      	adds	r2, r7, #7
   1243c:	1d7b      	adds	r3, r7, #5
   1243e:	7812      	ldrb	r2, [r2, #0]
   12440:	781b      	ldrb	r3, [r3, #0]
   12442:	18d3      	adds	r3, r2, r3
   12444:	b2d9      	uxtb	r1, r3
   12446:	230d      	movs	r3, #13
   12448:	18fb      	adds	r3, r7, r3
   1244a:	781a      	ldrb	r2, [r3, #0]
   1244c:	230f      	movs	r3, #15
   1244e:	18fb      	adds	r3, r7, r3
   12450:	7818      	ldrb	r0, [r3, #0]
   12452:	2300      	movs	r3, #0
   12454:	4c20      	ldr	r4, [pc, #128]	; (124d8 <gfx_mono_generic_draw_horizontal_line+0x1c4>)
   12456:	47a0      	blx	r4
		while (length-- > 0) {
   12458:	1d7b      	adds	r3, r7, #5
   1245a:	781b      	ldrb	r3, [r3, #0]
   1245c:	1d7a      	adds	r2, r7, #5
   1245e:	1e59      	subs	r1, r3, #1
   12460:	7011      	strb	r1, [r2, #0]
   12462:	2b00      	cmp	r3, #0
   12464:	d1c9      	bne.n	123fa <gfx_mono_generic_draw_horizontal_line+0xe6>
		break;
   12466:	e032      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
			temp = gfx_mono_get_byte(page, x + length);
   12468:	1dfa      	adds	r2, r7, #7
   1246a:	1d7b      	adds	r3, r7, #5
   1246c:	7812      	ldrb	r2, [r2, #0]
   1246e:	781b      	ldrb	r3, [r3, #0]
   12470:	18d3      	adds	r3, r2, r3
   12472:	b2da      	uxtb	r2, r3
   12474:	230d      	movs	r3, #13
   12476:	18fc      	adds	r4, r7, r3
   12478:	230f      	movs	r3, #15
   1247a:	18fb      	adds	r3, r7, r3
   1247c:	781b      	ldrb	r3, [r3, #0]
   1247e:	0011      	movs	r1, r2
   12480:	0018      	movs	r0, r3
   12482:	4b14      	ldr	r3, [pc, #80]	; (124d4 <gfx_mono_generic_draw_horizontal_line+0x1c0>)
   12484:	4798      	blx	r3
   12486:	0003      	movs	r3, r0
   12488:	7023      	strb	r3, [r4, #0]
			temp ^= pixelmask;
   1248a:	230d      	movs	r3, #13
   1248c:	18fb      	adds	r3, r7, r3
   1248e:	220d      	movs	r2, #13
   12490:	18b9      	adds	r1, r7, r2
   12492:	220e      	movs	r2, #14
   12494:	18ba      	adds	r2, r7, r2
   12496:	7809      	ldrb	r1, [r1, #0]
   12498:	7812      	ldrb	r2, [r2, #0]
   1249a:	404a      	eors	r2, r1
   1249c:	701a      	strb	r2, [r3, #0]
			gfx_mono_put_byte(page, x + length, temp);
   1249e:	1dfa      	adds	r2, r7, #7
   124a0:	1d7b      	adds	r3, r7, #5
   124a2:	7812      	ldrb	r2, [r2, #0]
   124a4:	781b      	ldrb	r3, [r3, #0]
   124a6:	18d3      	adds	r3, r2, r3
   124a8:	b2d9      	uxtb	r1, r3
   124aa:	230d      	movs	r3, #13
   124ac:	18fb      	adds	r3, r7, r3
   124ae:	781a      	ldrb	r2, [r3, #0]
   124b0:	230f      	movs	r3, #15
   124b2:	18fb      	adds	r3, r7, r3
   124b4:	7818      	ldrb	r0, [r3, #0]
   124b6:	2300      	movs	r3, #0
   124b8:	4c07      	ldr	r4, [pc, #28]	; (124d8 <gfx_mono_generic_draw_horizontal_line+0x1c4>)
   124ba:	47a0      	blx	r4
		while (length-- > 0) {
   124bc:	1d7b      	adds	r3, r7, #5
   124be:	781b      	ldrb	r3, [r3, #0]
   124c0:	1d7a      	adds	r2, r7, #5
   124c2:	1e59      	subs	r1, r3, #1
   124c4:	7011      	strb	r1, [r2, #0]
   124c6:	2b00      	cmp	r3, #0
   124c8:	d1ce      	bne.n	12468 <gfx_mono_generic_draw_horizontal_line+0x154>
		break;
   124ca:	e000      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
		return;
   124cc:	46c0      	nop			; (mov r8, r8)
	}
}
   124ce:	46bd      	mov	sp, r7
   124d0:	b004      	add	sp, #16
   124d2:	bdb0      	pop	{r4, r5, r7, pc}
   124d4:	00012a8d 	.word	0x00012a8d
   124d8:	000129ed 	.word	0x000129ed

000124dc <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
   124dc:	b5b0      	push	{r4, r5, r7, lr}
   124de:	b082      	sub	sp, #8
   124e0:	af00      	add	r7, sp, #0
   124e2:	0005      	movs	r5, r0
   124e4:	000c      	movs	r4, r1
   124e6:	0010      	movs	r0, r2
   124e8:	0019      	movs	r1, r3
   124ea:	1dfb      	adds	r3, r7, #7
   124ec:	1c2a      	adds	r2, r5, #0
   124ee:	701a      	strb	r2, [r3, #0]
   124f0:	1dbb      	adds	r3, r7, #6
   124f2:	1c22      	adds	r2, r4, #0
   124f4:	701a      	strb	r2, [r3, #0]
   124f6:	1d7b      	adds	r3, r7, #5
   124f8:	1c02      	adds	r2, r0, #0
   124fa:	701a      	strb	r2, [r3, #0]
   124fc:	1d3b      	adds	r3, r7, #4
   124fe:	1c0a      	adds	r2, r1, #0
   12500:	701a      	strb	r2, [r3, #0]
	if (height == 0) {
   12502:	1d3b      	adds	r3, r7, #4
   12504:	781b      	ldrb	r3, [r3, #0]
   12506:	2b00      	cmp	r3, #0
   12508:	d018      	beq.n	1253c <gfx_mono_generic_draw_filled_rect+0x60>
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
   1250a:	e00f      	b.n	1252c <gfx_mono_generic_draw_filled_rect+0x50>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
   1250c:	1dba      	adds	r2, r7, #6
   1250e:	1d3b      	adds	r3, r7, #4
   12510:	7812      	ldrb	r2, [r2, #0]
   12512:	781b      	ldrb	r3, [r3, #0]
   12514:	18d3      	adds	r3, r2, r3
   12516:	b2d9      	uxtb	r1, r3
   12518:	2318      	movs	r3, #24
   1251a:	18fb      	adds	r3, r7, r3
   1251c:	781c      	ldrb	r4, [r3, #0]
   1251e:	1d7b      	adds	r3, r7, #5
   12520:	781a      	ldrb	r2, [r3, #0]
   12522:	1dfb      	adds	r3, r7, #7
   12524:	7818      	ldrb	r0, [r3, #0]
   12526:	0023      	movs	r3, r4
   12528:	4c06      	ldr	r4, [pc, #24]	; (12544 <gfx_mono_generic_draw_filled_rect+0x68>)
   1252a:	47a0      	blx	r4
	while (height-- > 0) {
   1252c:	1d3b      	adds	r3, r7, #4
   1252e:	781b      	ldrb	r3, [r3, #0]
   12530:	1d3a      	adds	r2, r7, #4
   12532:	1e59      	subs	r1, r3, #1
   12534:	7011      	strb	r1, [r2, #0]
   12536:	2b00      	cmp	r3, #0
   12538:	d1e8      	bne.n	1250c <gfx_mono_generic_draw_filled_rect+0x30>
   1253a:	e000      	b.n	1253e <gfx_mono_generic_draw_filled_rect+0x62>
		return;
   1253c:	46c0      	nop			; (mov r8, r8)
	}
}
   1253e:	46bd      	mov	sp, r7
   12540:	b002      	add	sp, #8
   12542:	bdb0      	pop	{r4, r5, r7, pc}
   12544:	00012315 	.word	0x00012315

00012548 <gfx_mono_draw_char_progmem>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
static void gfx_mono_draw_char_progmem(const char ch, const gfx_coord_t x,
		const gfx_coord_t y, const struct font *font)
{
   12548:	b590      	push	{r4, r7, lr}
   1254a:	b087      	sub	sp, #28
   1254c:	af00      	add	r7, sp, #0
   1254e:	0004      	movs	r4, r0
   12550:	0008      	movs	r0, r1
   12552:	0011      	movs	r1, r2
   12554:	603b      	str	r3, [r7, #0]
   12556:	1dfb      	adds	r3, r7, #7
   12558:	1c22      	adds	r2, r4, #0
   1255a:	701a      	strb	r2, [r3, #0]
   1255c:	1dbb      	adds	r3, r7, #6
   1255e:	1c02      	adds	r2, r0, #0
   12560:	701a      	strb	r2, [r3, #0]
   12562:	1d7b      	adds	r3, r7, #5
   12564:	1c0a      	adds	r2, r1, #0
   12566:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	/* Sanity check on parameters, assert if font is NULL. */
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
   12568:	2310      	movs	r3, #16
   1256a:	18fb      	adds	r3, r7, r3
   1256c:	1dba      	adds	r2, r7, #6
   1256e:	7812      	ldrb	r2, [r2, #0]
   12570:	701a      	strb	r2, [r3, #0]
	gfx_coord_t inc_y = y;
   12572:	230f      	movs	r3, #15
   12574:	18fb      	adds	r3, r7, r3
   12576:	1d7a      	adds	r2, r7, #5
   12578:	7812      	ldrb	r2, [r2, #0]
   1257a:	701a      	strb	r2, [r3, #0]

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
   1257c:	683b      	ldr	r3, [r7, #0]
   1257e:	7a1a      	ldrb	r2, [r3, #8]
   12580:	2313      	movs	r3, #19
   12582:	18fb      	adds	r3, r7, r3
   12584:	08d2      	lsrs	r2, r2, #3
   12586:	701a      	strb	r2, [r3, #0]
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
   12588:	683b      	ldr	r3, [r7, #0]
   1258a:	7a1b      	ldrb	r3, [r3, #8]
   1258c:	2207      	movs	r2, #7
   1258e:	4013      	ands	r3, r2
   12590:	b2db      	uxtb	r3, r3
   12592:	2b00      	cmp	r3, #0
   12594:	d006      	beq.n	125a4 <gfx_mono_draw_char_progmem+0x5c>
		char_row_size++;
   12596:	2313      	movs	r3, #19
   12598:	18fb      	adds	r3, r7, r3
   1259a:	781a      	ldrb	r2, [r3, #0]
   1259c:	2313      	movs	r3, #19
   1259e:	18fb      	adds	r3, r7, r3
   125a0:	3201      	adds	r2, #1
   125a2:	701a      	strb	r2, [r3, #0]
	}

	glyph_data_offset = char_row_size * font->height *
   125a4:	2313      	movs	r3, #19
   125a6:	18fb      	adds	r3, r7, r3
   125a8:	781b      	ldrb	r3, [r3, #0]
   125aa:	b29b      	uxth	r3, r3
   125ac:	683a      	ldr	r2, [r7, #0]
   125ae:	7a52      	ldrb	r2, [r2, #9]
   125b0:	b292      	uxth	r2, r2
   125b2:	4353      	muls	r3, r2
   125b4:	b29a      	uxth	r2, r3
			((uint8_t)ch - font->first_char);
   125b6:	1dfb      	adds	r3, r7, #7
   125b8:	781b      	ldrb	r3, [r3, #0]
   125ba:	6839      	ldr	r1, [r7, #0]
   125bc:	7a89      	ldrb	r1, [r1, #10]
   125be:	1a5b      	subs	r3, r3, r1
	glyph_data_offset = char_row_size * font->height *
   125c0:	b299      	uxth	r1, r3
   125c2:	230c      	movs	r3, #12
   125c4:	18fb      	adds	r3, r7, r3
   125c6:	434a      	muls	r2, r1
   125c8:	801a      	strh	r2, [r3, #0]
	glyph_data = font->data.progmem + glyph_data_offset;
   125ca:	683b      	ldr	r3, [r7, #0]
   125cc:	685a      	ldr	r2, [r3, #4]
   125ce:	230c      	movs	r3, #12
   125d0:	18fb      	adds	r3, r7, r3
   125d2:	881b      	ldrh	r3, [r3, #0]
   125d4:	18d3      	adds	r3, r2, r3
   125d6:	617b      	str	r3, [r7, #20]
	rows_left = font->height;
   125d8:	2312      	movs	r3, #18
   125da:	18fb      	adds	r3, r7, r3
   125dc:	683a      	ldr	r2, [r7, #0]
   125de:	7a52      	ldrb	r2, [r2, #9]
   125e0:	701a      	strb	r2, [r3, #0]

	do {
		uint8_t glyph_byte = 0;
   125e2:	230e      	movs	r3, #14
   125e4:	18fb      	adds	r3, r7, r3
   125e6:	2200      	movs	r2, #0
   125e8:	701a      	strb	r2, [r3, #0]
		uint8_t pixelsToDraw = font->width;
   125ea:	230b      	movs	r3, #11
   125ec:	18fb      	adds	r3, r7, r3
   125ee:	683a      	ldr	r2, [r7, #0]
   125f0:	7a12      	ldrb	r2, [r2, #8]
   125f2:	701a      	strb	r2, [r3, #0]

		for (i = 0; i < pixelsToDraw; i++) {
   125f4:	2311      	movs	r3, #17
   125f6:	18fb      	adds	r3, r7, r3
   125f8:	2200      	movs	r2, #0
   125fa:	701a      	strb	r2, [r3, #0]
   125fc:	e034      	b.n	12668 <gfx_mono_draw_char_progmem+0x120>
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
   125fe:	2311      	movs	r3, #17
   12600:	18fb      	adds	r3, r7, r3
   12602:	781b      	ldrb	r3, [r3, #0]
   12604:	2207      	movs	r2, #7
   12606:	4013      	ands	r3, r2
   12608:	b2db      	uxtb	r3, r3
   1260a:	2b00      	cmp	r3, #0
   1260c:	d107      	bne.n	1261e <gfx_mono_draw_char_progmem+0xd6>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
   1260e:	230e      	movs	r3, #14
   12610:	18fb      	adds	r3, r7, r3
   12612:	697a      	ldr	r2, [r7, #20]
   12614:	7812      	ldrb	r2, [r2, #0]
   12616:	701a      	strb	r2, [r3, #0]
				glyph_data++;
   12618:	697b      	ldr	r3, [r7, #20]
   1261a:	3301      	adds	r3, #1
   1261c:	617b      	str	r3, [r7, #20]
			}

			if ((glyph_byte & 0x80)) {
   1261e:	230e      	movs	r3, #14
   12620:	18fb      	adds	r3, r7, r3
   12622:	781b      	ldrb	r3, [r3, #0]
   12624:	b25b      	sxtb	r3, r3
   12626:	2b00      	cmp	r3, #0
   12628:	da09      	bge.n	1263e <gfx_mono_draw_char_progmem+0xf6>
				gfx_mono_draw_pixel(inc_x, inc_y,
   1262a:	230f      	movs	r3, #15
   1262c:	18fb      	adds	r3, r7, r3
   1262e:	7819      	ldrb	r1, [r3, #0]
   12630:	2310      	movs	r3, #16
   12632:	18fb      	adds	r3, r7, r3
   12634:	781b      	ldrb	r3, [r3, #0]
   12636:	2201      	movs	r2, #1
   12638:	0018      	movs	r0, r3
   1263a:	4b1d      	ldr	r3, [pc, #116]	; (126b0 <gfx_mono_draw_char_progmem+0x168>)
   1263c:	4798      	blx	r3
						GFX_PIXEL_SET);
			}

			inc_x += 1;
   1263e:	2310      	movs	r3, #16
   12640:	18fb      	adds	r3, r7, r3
   12642:	2210      	movs	r2, #16
   12644:	18ba      	adds	r2, r7, r2
   12646:	7812      	ldrb	r2, [r2, #0]
   12648:	3201      	adds	r2, #1
   1264a:	701a      	strb	r2, [r3, #0]
			glyph_byte <<= 1;
   1264c:	230e      	movs	r3, #14
   1264e:	18fa      	adds	r2, r7, r3
   12650:	230e      	movs	r3, #14
   12652:	18fb      	adds	r3, r7, r3
   12654:	781b      	ldrb	r3, [r3, #0]
   12656:	18db      	adds	r3, r3, r3
   12658:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < pixelsToDraw; i++) {
   1265a:	2311      	movs	r3, #17
   1265c:	18fb      	adds	r3, r7, r3
   1265e:	781a      	ldrb	r2, [r3, #0]
   12660:	2311      	movs	r3, #17
   12662:	18fb      	adds	r3, r7, r3
   12664:	3201      	adds	r2, #1
   12666:	701a      	strb	r2, [r3, #0]
   12668:	2311      	movs	r3, #17
   1266a:	18fa      	adds	r2, r7, r3
   1266c:	230b      	movs	r3, #11
   1266e:	18fb      	adds	r3, r7, r3
   12670:	7812      	ldrb	r2, [r2, #0]
   12672:	781b      	ldrb	r3, [r3, #0]
   12674:	429a      	cmp	r2, r3
   12676:	d3c2      	bcc.n	125fe <gfx_mono_draw_char_progmem+0xb6>
		}

		inc_y += 1;
   12678:	230f      	movs	r3, #15
   1267a:	18fb      	adds	r3, r7, r3
   1267c:	220f      	movs	r2, #15
   1267e:	18ba      	adds	r2, r7, r2
   12680:	7812      	ldrb	r2, [r2, #0]
   12682:	3201      	adds	r2, #1
   12684:	701a      	strb	r2, [r3, #0]
		inc_x = x;
   12686:	2310      	movs	r3, #16
   12688:	18fb      	adds	r3, r7, r3
   1268a:	1dba      	adds	r2, r7, #6
   1268c:	7812      	ldrb	r2, [r2, #0]
   1268e:	701a      	strb	r2, [r3, #0]
		rows_left--;
   12690:	2312      	movs	r3, #18
   12692:	18fb      	adds	r3, r7, r3
   12694:	781a      	ldrb	r2, [r3, #0]
   12696:	2312      	movs	r3, #18
   12698:	18fb      	adds	r3, r7, r3
   1269a:	3a01      	subs	r2, #1
   1269c:	701a      	strb	r2, [r3, #0]
	} while (rows_left > 0);
   1269e:	2312      	movs	r3, #18
   126a0:	18fb      	adds	r3, r7, r3
   126a2:	781b      	ldrb	r3, [r3, #0]
   126a4:	2b00      	cmp	r3, #0
   126a6:	d19c      	bne.n	125e2 <gfx_mono_draw_char_progmem+0x9a>
}
   126a8:	46c0      	nop			; (mov r8, r8)
   126aa:	46bd      	mov	sp, r7
   126ac:	b007      	add	sp, #28
   126ae:	bd90      	pop	{r4, r7, pc}
   126b0:	000128f9 	.word	0x000128f9

000126b4 <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
   126b4:	b590      	push	{r4, r7, lr}
   126b6:	b085      	sub	sp, #20
   126b8:	af02      	add	r7, sp, #8
   126ba:	0004      	movs	r4, r0
   126bc:	0008      	movs	r0, r1
   126be:	0011      	movs	r1, r2
   126c0:	603b      	str	r3, [r7, #0]
   126c2:	1dfb      	adds	r3, r7, #7
   126c4:	1c22      	adds	r2, r4, #0
   126c6:	701a      	strb	r2, [r3, #0]
   126c8:	1dbb      	adds	r3, r7, #6
   126ca:	1c02      	adds	r2, r0, #0
   126cc:	701a      	strb	r2, [r3, #0]
   126ce:	1d7b      	adds	r3, r7, #5
   126d0:	1c0a      	adds	r2, r1, #0
   126d2:	701a      	strb	r2, [r3, #0]
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
   126d4:	683b      	ldr	r3, [r7, #0]
   126d6:	7a1a      	ldrb	r2, [r3, #8]
   126d8:	683b      	ldr	r3, [r7, #0]
   126da:	7a5c      	ldrb	r4, [r3, #9]
   126dc:	1d7b      	adds	r3, r7, #5
   126de:	7819      	ldrb	r1, [r3, #0]
   126e0:	1dbb      	adds	r3, r7, #6
   126e2:	7818      	ldrb	r0, [r3, #0]
   126e4:	2300      	movs	r3, #0
   126e6:	9300      	str	r3, [sp, #0]
   126e8:	0023      	movs	r3, r4
   126ea:	4c0b      	ldr	r4, [pc, #44]	; (12718 <gfx_mono_draw_char+0x64>)
   126ec:	47a0      	blx	r4
			GFX_PIXEL_CLR);

	switch (font->type) {
   126ee:	683b      	ldr	r3, [r7, #0]
   126f0:	781b      	ldrb	r3, [r3, #0]
   126f2:	2b00      	cmp	r3, #0
   126f4:	d000      	beq.n	126f8 <gfx_mono_draw_char+0x44>

#endif
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
   126f6:	e00a      	b.n	1270e <gfx_mono_draw_char+0x5a>
		gfx_mono_draw_char_progmem(c, x, y, font);
   126f8:	683c      	ldr	r4, [r7, #0]
   126fa:	1d7b      	adds	r3, r7, #5
   126fc:	781a      	ldrb	r2, [r3, #0]
   126fe:	1dbb      	adds	r3, r7, #6
   12700:	7819      	ldrb	r1, [r3, #0]
   12702:	1dfb      	adds	r3, r7, #7
   12704:	7818      	ldrb	r0, [r3, #0]
   12706:	0023      	movs	r3, r4
   12708:	4c04      	ldr	r4, [pc, #16]	; (1271c <gfx_mono_draw_char+0x68>)
   1270a:	47a0      	blx	r4
		break;
   1270c:	46c0      	nop			; (mov r8, r8)
	}
}
   1270e:	46c0      	nop			; (mov r8, r8)
   12710:	46bd      	mov	sp, r7
   12712:	b003      	add	sp, #12
   12714:	bd90      	pop	{r4, r7, pc}
   12716:	46c0      	nop			; (mov r8, r8)
   12718:	000124dd 	.word	0x000124dd
   1271c:	00012549 	.word	0x00012549

00012720 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
   12720:	b590      	push	{r4, r7, lr}
   12722:	b087      	sub	sp, #28
   12724:	af00      	add	r7, sp, #0
   12726:	60f8      	str	r0, [r7, #12]
   12728:	0008      	movs	r0, r1
   1272a:	0011      	movs	r1, r2
   1272c:	607b      	str	r3, [r7, #4]
   1272e:	230b      	movs	r3, #11
   12730:	18fb      	adds	r3, r7, r3
   12732:	1c02      	adds	r2, r0, #0
   12734:	701a      	strb	r2, [r3, #0]
   12736:	230a      	movs	r3, #10
   12738:	18fb      	adds	r3, r7, r3
   1273a:	1c0a      	adds	r2, r1, #0
   1273c:	701a      	strb	r2, [r3, #0]
	/* Save X in order to know where to return to on CR. */
	const gfx_coord_t start_of_string_position_x = x;
   1273e:	2317      	movs	r3, #23
   12740:	18fb      	adds	r3, r7, r3
   12742:	220b      	movs	r2, #11
   12744:	18ba      	adds	r2, r7, r2
   12746:	7812      	ldrb	r2, [r2, #0]
   12748:	701a      	strb	r2, [r3, #0]
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
   1274a:	68fb      	ldr	r3, [r7, #12]
   1274c:	781b      	ldrb	r3, [r3, #0]
   1274e:	2b0a      	cmp	r3, #10
   12750:	d111      	bne.n	12776 <gfx_mono_draw_string+0x56>
			x = start_of_string_position_x;
   12752:	230b      	movs	r3, #11
   12754:	18fb      	adds	r3, r7, r3
   12756:	2217      	movs	r2, #23
   12758:	18ba      	adds	r2, r7, r2
   1275a:	7812      	ldrb	r2, [r2, #0]
   1275c:	701a      	strb	r2, [r3, #0]
			y += font->height + 1;
   1275e:	687b      	ldr	r3, [r7, #4]
   12760:	7a5a      	ldrb	r2, [r3, #9]
   12762:	230a      	movs	r3, #10
   12764:	18fb      	adds	r3, r7, r3
   12766:	781b      	ldrb	r3, [r3, #0]
   12768:	18d3      	adds	r3, r2, r3
   1276a:	b2da      	uxtb	r2, r3
   1276c:	230a      	movs	r3, #10
   1276e:	18fb      	adds	r3, r7, r3
   12770:	3201      	adds	r2, #1
   12772:	701a      	strb	r2, [r3, #0]
   12774:	e018      	b.n	127a8 <gfx_mono_draw_string+0x88>
		} else if (*str == '\r') {
   12776:	68fb      	ldr	r3, [r7, #12]
   12778:	781b      	ldrb	r3, [r3, #0]
   1277a:	2b0d      	cmp	r3, #13
   1277c:	d014      	beq.n	127a8 <gfx_mono_draw_string+0x88>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
   1277e:	68fb      	ldr	r3, [r7, #12]
   12780:	7818      	ldrb	r0, [r3, #0]
   12782:	687c      	ldr	r4, [r7, #4]
   12784:	230a      	movs	r3, #10
   12786:	18fb      	adds	r3, r7, r3
   12788:	781a      	ldrb	r2, [r3, #0]
   1278a:	230b      	movs	r3, #11
   1278c:	18fb      	adds	r3, r7, r3
   1278e:	7819      	ldrb	r1, [r3, #0]
   12790:	0023      	movs	r3, r4
   12792:	4c0b      	ldr	r4, [pc, #44]	; (127c0 <gfx_mono_draw_string+0xa0>)
   12794:	47a0      	blx	r4
			x += font->width;
   12796:	687b      	ldr	r3, [r7, #4]
   12798:	7a19      	ldrb	r1, [r3, #8]
   1279a:	230b      	movs	r3, #11
   1279c:	18fb      	adds	r3, r7, r3
   1279e:	220b      	movs	r2, #11
   127a0:	18ba      	adds	r2, r7, r2
   127a2:	7812      	ldrb	r2, [r2, #0]
   127a4:	188a      	adds	r2, r1, r2
   127a6:	701a      	strb	r2, [r3, #0]
		}
	} while (*(++str));
   127a8:	68fb      	ldr	r3, [r7, #12]
   127aa:	3301      	adds	r3, #1
   127ac:	60fb      	str	r3, [r7, #12]
   127ae:	68fb      	ldr	r3, [r7, #12]
   127b0:	781b      	ldrb	r3, [r3, #0]
   127b2:	2b00      	cmp	r3, #0
   127b4:	d1c9      	bne.n	1274a <gfx_mono_draw_string+0x2a>
}
   127b6:	46c0      	nop			; (mov r8, r8)
   127b8:	46bd      	mov	sp, r7
   127ba:	b007      	add	sp, #28
   127bc:	bd90      	pop	{r4, r7, pc}
   127be:	46c0      	nop			; (mov r8, r8)
   127c0:	000126b5 	.word	0x000126b5

000127c4 <ssd1306_set_page_address>:
 * RAM.
 *
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
   127c4:	b580      	push	{r7, lr}
   127c6:	b082      	sub	sp, #8
   127c8:	af00      	add	r7, sp, #0
   127ca:	0002      	movs	r2, r0
   127cc:	1dfb      	adds	r3, r7, #7
   127ce:	701a      	strb	r2, [r3, #0]
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
   127d0:	1dfb      	adds	r3, r7, #7
   127d2:	1dfa      	adds	r2, r7, #7
   127d4:	7812      	ldrb	r2, [r2, #0]
   127d6:	210f      	movs	r1, #15
   127d8:	400a      	ands	r2, r1
   127da:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
   127dc:	1dfb      	adds	r3, r7, #7
   127de:	781b      	ldrb	r3, [r3, #0]
   127e0:	2250      	movs	r2, #80	; 0x50
   127e2:	4252      	negs	r2, r2
   127e4:	4313      	orrs	r3, r2
   127e6:	b2db      	uxtb	r3, r3
   127e8:	0018      	movs	r0, r3
   127ea:	4b03      	ldr	r3, [pc, #12]	; (127f8 <ssd1306_set_page_address+0x34>)
   127ec:	4798      	blx	r3
}
   127ee:	46c0      	nop			; (mov r8, r8)
   127f0:	46bd      	mov	sp, r7
   127f2:	b002      	add	sp, #8
   127f4:	bd80      	pop	{r7, pc}
   127f6:	46c0      	nop			; (mov r8, r8)
   127f8:	000121d1 	.word	0x000121d1

000127fc <ssd1306_set_column_address>:
 * \brief Set current column in display RAM
 *
 * \param address the column address
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
   127fc:	b580      	push	{r7, lr}
   127fe:	b082      	sub	sp, #8
   12800:	af00      	add	r7, sp, #0
   12802:	0002      	movs	r2, r0
   12804:	1dfb      	adds	r3, r7, #7
   12806:	701a      	strb	r2, [r3, #0]
	// Make sure the address is 7 bits
	address &= 0x7F;
   12808:	1dfb      	adds	r3, r7, #7
   1280a:	1dfa      	adds	r2, r7, #7
   1280c:	7812      	ldrb	r2, [r2, #0]
   1280e:	217f      	movs	r1, #127	; 0x7f
   12810:	400a      	ands	r2, r1
   12812:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4)+ 0x02); //ESE516 change
   12814:	1dfb      	adds	r3, r7, #7
   12816:	781b      	ldrb	r3, [r3, #0]
   12818:	091b      	lsrs	r3, r3, #4
   1281a:	b2db      	uxtb	r3, r3
   1281c:	2210      	movs	r2, #16
   1281e:	4313      	orrs	r3, r2
   12820:	b2db      	uxtb	r3, r3
   12822:	3302      	adds	r3, #2
   12824:	b2db      	uxtb	r3, r3
   12826:	0018      	movs	r0, r3
   12828:	4b06      	ldr	r3, [pc, #24]	; (12844 <ssd1306_set_column_address+0x48>)
   1282a:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
   1282c:	1dfb      	adds	r3, r7, #7
   1282e:	781b      	ldrb	r3, [r3, #0]
   12830:	220f      	movs	r2, #15
   12832:	4013      	ands	r3, r2
   12834:	b2db      	uxtb	r3, r3
   12836:	0018      	movs	r0, r3
   12838:	4b02      	ldr	r3, [pc, #8]	; (12844 <ssd1306_set_column_address+0x48>)
   1283a:	4798      	blx	r3
}
   1283c:	46c0      	nop			; (mov r8, r8)
   1283e:	46bd      	mov	sp, r7
   12840:	b002      	add	sp, #8
   12842:	bd80      	pop	{r7, pc}
   12844:	000121d1 	.word	0x000121d1

00012848 <ssd1306_set_display_start_line_address>:
 * \brief Set the display start draw line address
 *
 * This function will set which line should be the start draw line for the OLED.
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
   12848:	b580      	push	{r7, lr}
   1284a:	b082      	sub	sp, #8
   1284c:	af00      	add	r7, sp, #0
   1284e:	0002      	movs	r2, r0
   12850:	1dfb      	adds	r3, r7, #7
   12852:	701a      	strb	r2, [r3, #0]
	// Make sure address is 6 bits
	address &= 0x3F;
   12854:	1dfb      	adds	r3, r7, #7
   12856:	1dfa      	adds	r2, r7, #7
   12858:	7812      	ldrb	r2, [r2, #0]
   1285a:	213f      	movs	r1, #63	; 0x3f
   1285c:	400a      	ands	r2, r1
   1285e:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
   12860:	1dfb      	adds	r3, r7, #7
   12862:	781b      	ldrb	r3, [r3, #0]
   12864:	2240      	movs	r2, #64	; 0x40
   12866:	4313      	orrs	r3, r2
   12868:	b2db      	uxtb	r3, r3
   1286a:	0018      	movs	r0, r3
   1286c:	4b02      	ldr	r3, [pc, #8]	; (12878 <ssd1306_set_display_start_line_address+0x30>)
   1286e:	4798      	blx	r3
}
   12870:	46c0      	nop			; (mov r8, r8)
   12872:	46bd      	mov	sp, r7
   12874:	b002      	add	sp, #8
   12876:	bd80      	pop	{r7, pc}
   12878:	000121d1 	.word	0x000121d1

0001287c <gfx_mono_ssd1306_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_ssd1306_init(void)
{
   1287c:	b590      	push	{r4, r7, lr}
   1287e:	b083      	sub	sp, #12
   12880:	af00      	add	r7, sp, #0
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_SSD1306_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
   12882:	4b18      	ldr	r3, [pc, #96]	; (128e4 <gfx_mono_ssd1306_init+0x68>)
   12884:	0018      	movs	r0, r3
   12886:	4b18      	ldr	r3, [pc, #96]	; (128e8 <gfx_mono_ssd1306_init+0x6c>)
   12888:	4798      	blx	r3
#endif

	/* Initialize the low-level display controller. */
	ssd1306_init();
   1288a:	4b18      	ldr	r3, [pc, #96]	; (128ec <gfx_mono_ssd1306_init+0x70>)
   1288c:	4798      	blx	r3

	/* Set display to output data from line 0 */
	ssd1306_set_display_start_line_address(0);
   1288e:	2000      	movs	r0, #0
   12890:	4b17      	ldr	r3, [pc, #92]	; (128f0 <gfx_mono_ssd1306_init+0x74>)
   12892:	4798      	blx	r3

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
   12894:	1dfb      	adds	r3, r7, #7
   12896:	2200      	movs	r2, #0
   12898:	701a      	strb	r2, [r3, #0]
   1289a:	e01a      	b.n	128d2 <gfx_mono_ssd1306_init+0x56>
		for (column = 0; column < 128; column++) {
   1289c:	1dbb      	adds	r3, r7, #6
   1289e:	2200      	movs	r2, #0
   128a0:	701a      	strb	r2, [r3, #0]
   128a2:	e00c      	b.n	128be <gfx_mono_ssd1306_init+0x42>
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
   128a4:	1dbb      	adds	r3, r7, #6
   128a6:	7819      	ldrb	r1, [r3, #0]
   128a8:	1dfb      	adds	r3, r7, #7
   128aa:	7818      	ldrb	r0, [r3, #0]
   128ac:	2301      	movs	r3, #1
   128ae:	2200      	movs	r2, #0
   128b0:	4c10      	ldr	r4, [pc, #64]	; (128f4 <gfx_mono_ssd1306_init+0x78>)
   128b2:	47a0      	blx	r4
		for (column = 0; column < 128; column++) {
   128b4:	1dbb      	adds	r3, r7, #6
   128b6:	781a      	ldrb	r2, [r3, #0]
   128b8:	1dbb      	adds	r3, r7, #6
   128ba:	3201      	adds	r2, #1
   128bc:	701a      	strb	r2, [r3, #0]
   128be:	1dbb      	adds	r3, r7, #6
   128c0:	781b      	ldrb	r3, [r3, #0]
   128c2:	b25b      	sxtb	r3, r3
   128c4:	2b00      	cmp	r3, #0
   128c6:	daed      	bge.n	128a4 <gfx_mono_ssd1306_init+0x28>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
   128c8:	1dfb      	adds	r3, r7, #7
   128ca:	781a      	ldrb	r2, [r3, #0]
   128cc:	1dfb      	adds	r3, r7, #7
   128ce:	3201      	adds	r2, #1
   128d0:	701a      	strb	r2, [r3, #0]
   128d2:	1dfb      	adds	r3, r7, #7
   128d4:	781b      	ldrb	r3, [r3, #0]
   128d6:	2b05      	cmp	r3, #5
   128d8:	d9e0      	bls.n	1289c <gfx_mono_ssd1306_init+0x20>
		}
	}
}
   128da:	46c0      	nop			; (mov r8, r8)
   128dc:	46bd      	mov	sp, r7
   128de:	b003      	add	sp, #12
   128e0:	bd90      	pop	{r4, r7, pc}
   128e2:	46c0      	nop			; (mov r8, r8)
   128e4:	20000310 	.word	0x20000310
   128e8:	00012281 	.word	0x00012281
   128ec:	00012129 	.word	0x00012129
   128f0:	00012849 	.word	0x00012849
   128f4:	000129ed 	.word	0x000129ed

000128f8 <gfx_mono_ssd1306_draw_pixel>:
	gfx_mono_ssd1306_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
   128f8:	b590      	push	{r4, r7, lr}
   128fa:	b085      	sub	sp, #20
   128fc:	af00      	add	r7, sp, #0
   128fe:	0004      	movs	r4, r0
   12900:	0008      	movs	r0, r1
   12902:	0011      	movs	r1, r2
   12904:	1dfb      	adds	r3, r7, #7
   12906:	1c22      	adds	r2, r4, #0
   12908:	701a      	strb	r2, [r3, #0]
   1290a:	1dbb      	adds	r3, r7, #6
   1290c:	1c02      	adds	r2, r0, #0
   1290e:	701a      	strb	r2, [r3, #0]
   12910:	1d7b      	adds	r3, r7, #5
   12912:	1c0a      	adds	r2, r1, #0
   12914:	701a      	strb	r2, [r3, #0]
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
   12916:	1dfb      	adds	r3, r7, #7
   12918:	781b      	ldrb	r3, [r3, #0]
   1291a:	2b3f      	cmp	r3, #63	; 0x3f
   1291c:	d85d      	bhi.n	129da <gfx_mono_ssd1306_draw_pixel+0xe2>
   1291e:	1dbb      	adds	r3, r7, #6
   12920:	781b      	ldrb	r3, [r3, #0]
   12922:	2b2f      	cmp	r3, #47	; 0x2f
   12924:	d859      	bhi.n	129da <gfx_mono_ssd1306_draw_pixel+0xe2>
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
   12926:	230e      	movs	r3, #14
   12928:	18fb      	adds	r3, r7, r3
   1292a:	1dba      	adds	r2, r7, #6
   1292c:	7812      	ldrb	r2, [r2, #0]
   1292e:	08d2      	lsrs	r2, r2, #3
   12930:	701a      	strb	r2, [r3, #0]
	pixel_mask = (1 << (y - (page * 8)));
   12932:	1dbb      	adds	r3, r7, #6
   12934:	781a      	ldrb	r2, [r3, #0]
   12936:	230e      	movs	r3, #14
   12938:	18fb      	adds	r3, r7, r3
   1293a:	781b      	ldrb	r3, [r3, #0]
   1293c:	00db      	lsls	r3, r3, #3
   1293e:	1ad3      	subs	r3, r2, r3
   12940:	2201      	movs	r2, #1
   12942:	409a      	lsls	r2, r3
   12944:	230d      	movs	r3, #13
   12946:	18fb      	adds	r3, r7, r3
   12948:	701a      	strb	r2, [r3, #0]
	/*
	 * Read the page containing the pixel in interest, then perform the
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);
   1294a:	230f      	movs	r3, #15
   1294c:	18fc      	adds	r4, r7, r3
   1294e:	1dfb      	adds	r3, r7, #7
   12950:	781a      	ldrb	r2, [r3, #0]
   12952:	230e      	movs	r3, #14
   12954:	18fb      	adds	r3, r7, r3
   12956:	781b      	ldrb	r3, [r3, #0]
   12958:	0011      	movs	r1, r2
   1295a:	0018      	movs	r0, r3
   1295c:	4b21      	ldr	r3, [pc, #132]	; (129e4 <gfx_mono_ssd1306_draw_pixel+0xec>)
   1295e:	4798      	blx	r3
   12960:	0003      	movs	r3, r0
   12962:	7023      	strb	r3, [r4, #0]

	switch (color) {
   12964:	1d7b      	adds	r3, r7, #5
   12966:	781b      	ldrb	r3, [r3, #0]
   12968:	2b01      	cmp	r3, #1
   1296a:	d004      	beq.n	12976 <gfx_mono_ssd1306_draw_pixel+0x7e>
   1296c:	2b02      	cmp	r3, #2
   1296e:	d01d      	beq.n	129ac <gfx_mono_ssd1306_draw_pixel+0xb4>
   12970:	2b00      	cmp	r3, #0
   12972:	d00b      	beq.n	1298c <gfx_mono_ssd1306_draw_pixel+0x94>
	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
		break;

	default:
		break;
   12974:	e025      	b.n	129c2 <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value |= pixel_mask;
   12976:	230f      	movs	r3, #15
   12978:	18fb      	adds	r3, r7, r3
   1297a:	220f      	movs	r2, #15
   1297c:	18b9      	adds	r1, r7, r2
   1297e:	220d      	movs	r2, #13
   12980:	18ba      	adds	r2, r7, r2
   12982:	7809      	ldrb	r1, [r1, #0]
   12984:	7812      	ldrb	r2, [r2, #0]
   12986:	430a      	orrs	r2, r1
   12988:	701a      	strb	r2, [r3, #0]
		break;
   1298a:	e01a      	b.n	129c2 <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value &= ~pixel_mask;
   1298c:	230d      	movs	r3, #13
   1298e:	18fb      	adds	r3, r7, r3
   12990:	781b      	ldrb	r3, [r3, #0]
   12992:	b25b      	sxtb	r3, r3
   12994:	43db      	mvns	r3, r3
   12996:	b25b      	sxtb	r3, r3
   12998:	220f      	movs	r2, #15
   1299a:	18ba      	adds	r2, r7, r2
   1299c:	7812      	ldrb	r2, [r2, #0]
   1299e:	b252      	sxtb	r2, r2
   129a0:	4013      	ands	r3, r2
   129a2:	b25a      	sxtb	r2, r3
   129a4:	230f      	movs	r3, #15
   129a6:	18fb      	adds	r3, r7, r3
   129a8:	701a      	strb	r2, [r3, #0]
		break;
   129aa:	e00a      	b.n	129c2 <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value ^= pixel_mask;
   129ac:	230f      	movs	r3, #15
   129ae:	18fb      	adds	r3, r7, r3
   129b0:	220f      	movs	r2, #15
   129b2:	18b9      	adds	r1, r7, r2
   129b4:	220d      	movs	r2, #13
   129b6:	18ba      	adds	r2, r7, r2
   129b8:	7809      	ldrb	r1, [r1, #0]
   129ba:	7812      	ldrb	r2, [r2, #0]
   129bc:	404a      	eors	r2, r1
   129be:	701a      	strb	r2, [r3, #0]
		break;
   129c0:	46c0      	nop			; (mov r8, r8)
	}

	gfx_mono_put_byte(page, x, pixel_value);
   129c2:	230f      	movs	r3, #15
   129c4:	18fb      	adds	r3, r7, r3
   129c6:	781a      	ldrb	r2, [r3, #0]
   129c8:	1dfb      	adds	r3, r7, #7
   129ca:	7819      	ldrb	r1, [r3, #0]
   129cc:	230e      	movs	r3, #14
   129ce:	18fb      	adds	r3, r7, r3
   129d0:	7818      	ldrb	r0, [r3, #0]
   129d2:	2300      	movs	r3, #0
   129d4:	4c04      	ldr	r4, [pc, #16]	; (129e8 <gfx_mono_ssd1306_draw_pixel+0xf0>)
   129d6:	47a0      	blx	r4
   129d8:	e000      	b.n	129dc <gfx_mono_ssd1306_draw_pixel+0xe4>
		return;
   129da:	46c0      	nop			; (mov r8, r8)
}
   129dc:	46bd      	mov	sp, r7
   129de:	b005      	add	sp, #20
   129e0:	bd90      	pop	{r4, r7, pc}
   129e2:	46c0      	nop			; (mov r8, r8)
   129e4:	00012a8d 	.word	0x00012a8d
   129e8:	000129ed 	.word	0x000129ed

000129ec <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
   129ec:	b5b0      	push	{r4, r5, r7, lr}
   129ee:	b082      	sub	sp, #8
   129f0:	af00      	add	r7, sp, #0
   129f2:	0005      	movs	r5, r0
   129f4:	000c      	movs	r4, r1
   129f6:	0010      	movs	r0, r2
   129f8:	0019      	movs	r1, r3
   129fa:	1dfb      	adds	r3, r7, #7
   129fc:	1c2a      	adds	r2, r5, #0
   129fe:	701a      	strb	r2, [r3, #0]
   12a00:	1dbb      	adds	r3, r7, #6
   12a02:	1c22      	adds	r2, r4, #0
   12a04:	701a      	strb	r2, [r3, #0]
   12a06:	1d7b      	adds	r3, r7, #5
   12a08:	1c02      	adds	r2, r0, #0
   12a0a:	701a      	strb	r2, [r3, #0]
   12a0c:	1d3b      	adds	r3, r7, #4
   12a0e:	1c0a      	adds	r2, r1, #0
   12a10:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
   12a12:	1d3b      	adds	r3, r7, #4
   12a14:	781b      	ldrb	r3, [r3, #0]
   12a16:	2201      	movs	r2, #1
   12a18:	4053      	eors	r3, r2
   12a1a:	b2db      	uxtb	r3, r3
   12a1c:	2b00      	cmp	r3, #0
   12a1e:	d00d      	beq.n	12a3c <gfx_mono_ssd1306_put_byte+0x50>
   12a20:	1dbb      	adds	r3, r7, #6
   12a22:	781a      	ldrb	r2, [r3, #0]
   12a24:	1dfb      	adds	r3, r7, #7
   12a26:	781b      	ldrb	r3, [r3, #0]
   12a28:	0011      	movs	r1, r2
   12a2a:	0018      	movs	r0, r3
   12a2c:	4b12      	ldr	r3, [pc, #72]	; (12a78 <gfx_mono_ssd1306_put_byte+0x8c>)
   12a2e:	4798      	blx	r3
   12a30:	0003      	movs	r3, r0
   12a32:	001a      	movs	r2, r3
   12a34:	1d7b      	adds	r3, r7, #5
   12a36:	781b      	ldrb	r3, [r3, #0]
   12a38:	4293      	cmp	r3, r2
   12a3a:	d018      	beq.n	12a6e <gfx_mono_ssd1306_put_byte+0x82>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
   12a3c:	1d7b      	adds	r3, r7, #5
   12a3e:	781a      	ldrb	r2, [r3, #0]
   12a40:	1dbb      	adds	r3, r7, #6
   12a42:	7819      	ldrb	r1, [r3, #0]
   12a44:	1dfb      	adds	r3, r7, #7
   12a46:	781b      	ldrb	r3, [r3, #0]
   12a48:	0018      	movs	r0, r3
   12a4a:	4b0c      	ldr	r3, [pc, #48]	; (12a7c <gfx_mono_ssd1306_put_byte+0x90>)
   12a4c:	4798      	blx	r3
#endif

	ssd1306_set_page_address(page);
   12a4e:	1dfb      	adds	r3, r7, #7
   12a50:	781b      	ldrb	r3, [r3, #0]
   12a52:	0018      	movs	r0, r3
   12a54:	4b0a      	ldr	r3, [pc, #40]	; (12a80 <gfx_mono_ssd1306_put_byte+0x94>)
   12a56:	4798      	blx	r3
	ssd1306_set_column_address(column);
   12a58:	1dbb      	adds	r3, r7, #6
   12a5a:	781b      	ldrb	r3, [r3, #0]
   12a5c:	0018      	movs	r0, r3
   12a5e:	4b09      	ldr	r3, [pc, #36]	; (12a84 <gfx_mono_ssd1306_put_byte+0x98>)
   12a60:	4798      	blx	r3

	ssd1306_write_data(data);
   12a62:	1d7b      	adds	r3, r7, #5
   12a64:	781b      	ldrb	r3, [r3, #0]
   12a66:	0018      	movs	r0, r3
   12a68:	4b07      	ldr	r3, [pc, #28]	; (12a88 <gfx_mono_ssd1306_put_byte+0x9c>)
   12a6a:	4798      	blx	r3
   12a6c:	e000      	b.n	12a70 <gfx_mono_ssd1306_put_byte+0x84>
		return;
   12a6e:	46c0      	nop			; (mov r8, r8)
}
   12a70:	46bd      	mov	sp, r7
   12a72:	b002      	add	sp, #8
   12a74:	bdb0      	pop	{r4, r5, r7, pc}
   12a76:	46c0      	nop			; (mov r8, r8)
   12a78:	000122e1 	.word	0x000122e1
   12a7c:	0001229d 	.word	0x0001229d
   12a80:	000127c5 	.word	0x000127c5
   12a84:	000127fd 	.word	0x000127fd
   12a88:	00012229 	.word	0x00012229

00012a8c <gfx_mono_ssd1306_get_byte>:
 * \code
	data = gfx_mono_ssd1306_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
   12a8c:	b580      	push	{r7, lr}
   12a8e:	b082      	sub	sp, #8
   12a90:	af00      	add	r7, sp, #0
   12a92:	0002      	movs	r2, r0
   12a94:	1dfb      	adds	r3, r7, #7
   12a96:	701a      	strb	r2, [r3, #0]
   12a98:	1dbb      	adds	r3, r7, #6
   12a9a:	1c0a      	adds	r2, r1, #0
   12a9c:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
   12a9e:	1dbb      	adds	r3, r7, #6
   12aa0:	781a      	ldrb	r2, [r3, #0]
   12aa2:	1dfb      	adds	r3, r7, #7
   12aa4:	781b      	ldrb	r3, [r3, #0]
   12aa6:	0011      	movs	r1, r2
   12aa8:	0018      	movs	r0, r3
   12aaa:	4b03      	ldr	r3, [pc, #12]	; (12ab8 <gfx_mono_ssd1306_get_byte+0x2c>)
   12aac:	4798      	blx	r3
   12aae:	0003      	movs	r3, r0
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
   12ab0:	0018      	movs	r0, r3
   12ab2:	46bd      	mov	sp, r7
   12ab4:	b002      	add	sp, #8
   12ab6:	bd80      	pop	{r7, pc}
   12ab8:	000122e1 	.word	0x000122e1

00012abc <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
   12abc:	b580      	push	{r7, lr}
   12abe:	b084      	sub	sp, #16
   12ac0:	af00      	add	r7, sp, #0
   12ac2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
   12ac4:	687b      	ldr	r3, [r7, #4]
   12ac6:	681b      	ldr	r3, [r3, #0]
   12ac8:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   12aca:	68fb      	ldr	r3, [r7, #12]
   12acc:	7e5b      	ldrb	r3, [r3, #25]
   12ace:	b2db      	uxtb	r3, r3
   12ad0:	b25b      	sxtb	r3, r3
   12ad2:	2b00      	cmp	r3, #0
   12ad4:	da01      	bge.n	12ada <adc_is_syncing+0x1e>
		return true;
   12ad6:	2301      	movs	r3, #1
   12ad8:	e000      	b.n	12adc <adc_is_syncing+0x20>
	}

	return false;
   12ada:	2300      	movs	r3, #0
}
   12adc:	0018      	movs	r0, r3
   12ade:	46bd      	mov	sp, r7
   12ae0:	b004      	add	sp, #16
   12ae2:	bd80      	pop	{r7, pc}

00012ae4 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
   12ae4:	b580      	push	{r7, lr}
   12ae6:	b084      	sub	sp, #16
   12ae8:	af00      	add	r7, sp, #0
   12aea:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12aec:	687b      	ldr	r3, [r7, #4]
   12aee:	681b      	ldr	r3, [r3, #0]
   12af0:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   12af2:	46c0      	nop			; (mov r8, r8)
   12af4:	687b      	ldr	r3, [r7, #4]
   12af6:	0018      	movs	r0, r3
   12af8:	4b0b      	ldr	r3, [pc, #44]	; (12b28 <adc_start_conversion+0x44>)
   12afa:	4798      	blx	r3
   12afc:	1e03      	subs	r3, r0, #0
   12afe:	d1f9      	bne.n	12af4 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   12b00:	68fb      	ldr	r3, [r7, #12]
   12b02:	7b1b      	ldrb	r3, [r3, #12]
   12b04:	b2db      	uxtb	r3, r3
   12b06:	2202      	movs	r2, #2
   12b08:	4313      	orrs	r3, r2
   12b0a:	b2da      	uxtb	r2, r3
   12b0c:	68fb      	ldr	r3, [r7, #12]
   12b0e:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
   12b10:	46c0      	nop			; (mov r8, r8)
   12b12:	687b      	ldr	r3, [r7, #4]
   12b14:	0018      	movs	r0, r3
   12b16:	4b04      	ldr	r3, [pc, #16]	; (12b28 <adc_start_conversion+0x44>)
   12b18:	4798      	blx	r3
   12b1a:	1e03      	subs	r3, r0, #0
   12b1c:	d1f9      	bne.n	12b12 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
   12b1e:	46c0      	nop			; (mov r8, r8)
   12b20:	46bd      	mov	sp, r7
   12b22:	b004      	add	sp, #16
   12b24:	bd80      	pop	{r7, pc}
   12b26:	46c0      	nop			; (mov r8, r8)
   12b28:	00012abd 	.word	0x00012abd

00012b2c <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
   12b2c:	b580      	push	{r7, lr}
   12b2e:	b084      	sub	sp, #16
   12b30:	af00      	add	r7, sp, #0
   12b32:	6078      	str	r0, [r7, #4]
   12b34:	000a      	movs	r2, r1
   12b36:	1cfb      	adds	r3, r7, #3
   12b38:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12b3a:	687b      	ldr	r3, [r7, #4]
   12b3c:	681b      	ldr	r3, [r3, #0]
   12b3e:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
   12b40:	68fb      	ldr	r3, [r7, #12]
   12b42:	1cfa      	adds	r2, r7, #3
   12b44:	7812      	ldrb	r2, [r2, #0]
   12b46:	759a      	strb	r2, [r3, #22]
}
   12b48:	46c0      	nop			; (mov r8, r8)
   12b4a:	46bd      	mov	sp, r7
   12b4c:	b004      	add	sp, #16
   12b4e:	bd80      	pop	{r7, pc}

00012b50 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
   12b50:	b580      	push	{r7, lr}
   12b52:	b084      	sub	sp, #16
   12b54:	af00      	add	r7, sp, #0
   12b56:	0002      	movs	r2, r0
   12b58:	1dfb      	adds	r3, r7, #7
   12b5a:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
   12b5c:	1dfb      	adds	r3, r7, #7
   12b5e:	781a      	ldrb	r2, [r3, #0]
   12b60:	4b47      	ldr	r3, [pc, #284]	; (12c80 <_adc_interrupt_handler+0x130>)
   12b62:	0092      	lsls	r2, r2, #2
   12b64:	58d3      	ldr	r3, [r2, r3]
   12b66:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
   12b68:	68fb      	ldr	r3, [r7, #12]
   12b6a:	681b      	ldr	r3, [r3, #0]
   12b6c:	7e1b      	ldrb	r3, [r3, #24]
   12b6e:	b2da      	uxtb	r2, r3
   12b70:	68fb      	ldr	r3, [r7, #12]
   12b72:	681b      	ldr	r3, [r3, #0]
   12b74:	7ddb      	ldrb	r3, [r3, #23]
   12b76:	b2db      	uxtb	r3, r3
   12b78:	4013      	ands	r3, r2
   12b7a:	b2db      	uxtb	r3, r3
   12b7c:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
   12b7e:	68bb      	ldr	r3, [r7, #8]
   12b80:	2201      	movs	r2, #1
   12b82:	4013      	ands	r3, r2
   12b84:	d045      	beq.n	12c12 <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
   12b86:	68fb      	ldr	r3, [r7, #12]
   12b88:	681b      	ldr	r3, [r3, #0]
   12b8a:	2201      	movs	r2, #1
   12b8c:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
   12b8e:	46c0      	nop			; (mov r8, r8)
   12b90:	68fb      	ldr	r3, [r7, #12]
   12b92:	0018      	movs	r0, r3
   12b94:	4b3b      	ldr	r3, [pc, #236]	; (12c84 <_adc_interrupt_handler+0x134>)
   12b96:	4798      	blx	r3
   12b98:	1e03      	subs	r3, r0, #0
   12b9a:	d1f9      	bne.n	12b90 <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
   12b9c:	68fb      	ldr	r3, [r7, #12]
   12b9e:	695b      	ldr	r3, [r3, #20]
   12ba0:	1c99      	adds	r1, r3, #2
   12ba2:	68fa      	ldr	r2, [r7, #12]
   12ba4:	6151      	str	r1, [r2, #20]
   12ba6:	68fa      	ldr	r2, [r7, #12]
   12ba8:	6812      	ldr	r2, [r2, #0]
   12baa:	8b52      	ldrh	r2, [r2, #26]
   12bac:	b292      	uxth	r2, r2
   12bae:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
   12bb0:	68fb      	ldr	r3, [r7, #12]
   12bb2:	8b1b      	ldrh	r3, [r3, #24]
   12bb4:	b29b      	uxth	r3, r3
   12bb6:	3b01      	subs	r3, #1
   12bb8:	b29b      	uxth	r3, r3
   12bba:	68fa      	ldr	r2, [r7, #12]
   12bbc:	1c19      	adds	r1, r3, #0
   12bbe:	8311      	strh	r1, [r2, #24]
   12bc0:	2b00      	cmp	r3, #0
   12bc2:	d008      	beq.n	12bd6 <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
   12bc4:	68fb      	ldr	r3, [r7, #12]
   12bc6:	7f5b      	ldrb	r3, [r3, #29]
   12bc8:	2b00      	cmp	r3, #0
   12bca:	d022      	beq.n	12c12 <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
   12bcc:	68fb      	ldr	r3, [r7, #12]
   12bce:	0018      	movs	r0, r3
   12bd0:	4b2d      	ldr	r3, [pc, #180]	; (12c88 <_adc_interrupt_handler+0x138>)
   12bd2:	4798      	blx	r3
   12bd4:	e01d      	b.n	12c12 <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
   12bd6:	68fb      	ldr	r3, [r7, #12]
   12bd8:	2101      	movs	r1, #1
   12bda:	0018      	movs	r0, r3
   12bdc:	4b2b      	ldr	r3, [pc, #172]	; (12c8c <_adc_interrupt_handler+0x13c>)
   12bde:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
   12be0:	68fb      	ldr	r3, [r7, #12]
   12be2:	7f1b      	ldrb	r3, [r3, #28]
   12be4:	b2db      	uxtb	r3, r3
   12be6:	2b05      	cmp	r3, #5
   12be8:	d113      	bne.n	12c12 <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
   12bea:	68fb      	ldr	r3, [r7, #12]
   12bec:	2200      	movs	r2, #0
   12bee:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
   12bf0:	68fb      	ldr	r3, [r7, #12]
   12bf2:	7edb      	ldrb	r3, [r3, #27]
   12bf4:	001a      	movs	r2, r3
   12bf6:	2301      	movs	r3, #1
   12bf8:	4013      	ands	r3, r2
   12bfa:	d00a      	beq.n	12c12 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
   12bfc:	68fb      	ldr	r3, [r7, #12]
   12bfe:	7e9b      	ldrb	r3, [r3, #26]
   12c00:	001a      	movs	r2, r3
   12c02:	2301      	movs	r3, #1
   12c04:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
   12c06:	d004      	beq.n	12c12 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
   12c08:	68fb      	ldr	r3, [r7, #12]
   12c0a:	689b      	ldr	r3, [r3, #8]
   12c0c:	68fa      	ldr	r2, [r7, #12]
   12c0e:	0010      	movs	r0, r2
   12c10:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
   12c12:	68bb      	ldr	r3, [r7, #8]
   12c14:	2204      	movs	r2, #4
   12c16:	4013      	ands	r3, r2
   12c18:	d014      	beq.n	12c44 <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
   12c1a:	68fb      	ldr	r3, [r7, #12]
   12c1c:	681b      	ldr	r3, [r3, #0]
   12c1e:	2204      	movs	r2, #4
   12c20:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   12c22:	68fb      	ldr	r3, [r7, #12]
   12c24:	7edb      	ldrb	r3, [r3, #27]
   12c26:	001a      	movs	r2, r3
   12c28:	2302      	movs	r3, #2
   12c2a:	4013      	ands	r3, r2
   12c2c:	d00a      	beq.n	12c44 <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
   12c2e:	68fb      	ldr	r3, [r7, #12]
   12c30:	7e9b      	ldrb	r3, [r3, #26]
   12c32:	001a      	movs	r2, r3
   12c34:	2302      	movs	r3, #2
   12c36:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   12c38:	d004      	beq.n	12c44 <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
   12c3a:	68fb      	ldr	r3, [r7, #12]
   12c3c:	68db      	ldr	r3, [r3, #12]
   12c3e:	68fa      	ldr	r2, [r7, #12]
   12c40:	0010      	movs	r0, r2
   12c42:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
   12c44:	68bb      	ldr	r3, [r7, #8]
   12c46:	2202      	movs	r2, #2
   12c48:	4013      	ands	r3, r2
   12c4a:	d014      	beq.n	12c76 <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
   12c4c:	68fb      	ldr	r3, [r7, #12]
   12c4e:	681b      	ldr	r3, [r3, #0]
   12c50:	2202      	movs	r2, #2
   12c52:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   12c54:	68fb      	ldr	r3, [r7, #12]
   12c56:	7edb      	ldrb	r3, [r3, #27]
   12c58:	001a      	movs	r2, r3
   12c5a:	2304      	movs	r3, #4
   12c5c:	4013      	ands	r3, r2
   12c5e:	d00a      	beq.n	12c76 <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
   12c60:	68fb      	ldr	r3, [r7, #12]
   12c62:	7e9b      	ldrb	r3, [r3, #26]
   12c64:	001a      	movs	r2, r3
   12c66:	2304      	movs	r3, #4
   12c68:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   12c6a:	d004      	beq.n	12c76 <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
   12c6c:	68fb      	ldr	r3, [r7, #12]
   12c6e:	691b      	ldr	r3, [r3, #16]
   12c70:	68fa      	ldr	r2, [r7, #12]
   12c72:	0010      	movs	r0, r2
   12c74:	4798      	blx	r3
		}
	}
}
   12c76:	46c0      	nop			; (mov r8, r8)
   12c78:	46bd      	mov	sp, r7
   12c7a:	b004      	add	sp, #16
   12c7c:	bd80      	pop	{r7, pc}
   12c7e:	46c0      	nop			; (mov r8, r8)
   12c80:	20004748 	.word	0x20004748
   12c84:	00012abd 	.word	0x00012abd
   12c88:	00012ae5 	.word	0x00012ae5
   12c8c:	00012b2d 	.word	0x00012b2d

00012c90 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
   12c90:	b580      	push	{r7, lr}
   12c92:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
   12c94:	2000      	movs	r0, #0
   12c96:	4b02      	ldr	r3, [pc, #8]	; (12ca0 <ADC_Handler+0x10>)
   12c98:	4798      	blx	r3
}
   12c9a:	46c0      	nop			; (mov r8, r8)
   12c9c:	46bd      	mov	sp, r7
   12c9e:	bd80      	pop	{r7, pc}
   12ca0:	00012b51 	.word	0x00012b51

00012ca4 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
   12ca4:	b580      	push	{r7, lr}
   12ca6:	b082      	sub	sp, #8
   12ca8:	af00      	add	r7, sp, #0
   12caa:	0002      	movs	r2, r0
   12cac:	1dfb      	adds	r3, r7, #7
   12cae:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   12cb0:	4a07      	ldr	r2, [pc, #28]	; (12cd0 <system_interrupt_disable+0x2c>)
   12cb2:	1dfb      	adds	r3, r7, #7
   12cb4:	781b      	ldrb	r3, [r3, #0]
   12cb6:	0019      	movs	r1, r3
   12cb8:	231f      	movs	r3, #31
   12cba:	400b      	ands	r3, r1
   12cbc:	2101      	movs	r1, #1
   12cbe:	4099      	lsls	r1, r3
   12cc0:	000b      	movs	r3, r1
   12cc2:	0019      	movs	r1, r3
   12cc4:	2380      	movs	r3, #128	; 0x80
   12cc6:	50d1      	str	r1, [r2, r3]
}
   12cc8:	46c0      	nop			; (mov r8, r8)
   12cca:	46bd      	mov	sp, r7
   12ccc:	b002      	add	sp, #8
   12cce:	bd80      	pop	{r7, pc}
   12cd0:	e000e100 	.word	0xe000e100

00012cd4 <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
   12cd4:	b580      	push	{r7, lr}
   12cd6:	b084      	sub	sp, #16
   12cd8:	af00      	add	r7, sp, #0
   12cda:	0002      	movs	r2, r0
   12cdc:	1dfb      	adds	r3, r7, #7
   12cde:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
   12ce0:	1dfb      	adds	r3, r7, #7
   12ce2:	781a      	ldrb	r2, [r3, #0]
   12ce4:	4b37      	ldr	r3, [pc, #220]	; (12dc4 <_dac_interrupt_handler+0xf0>)
   12ce6:	0092      	lsls	r2, r2, #2
   12ce8:	58d3      	ldr	r3, [r2, r3]
   12cea:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
   12cec:	68fb      	ldr	r3, [r7, #12]
   12cee:	681b      	ldr	r3, [r3, #0]
   12cf0:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
   12cf2:	68bb      	ldr	r3, [r7, #8]
   12cf4:	799b      	ldrb	r3, [r3, #6]
   12cf6:	b2db      	uxtb	r3, r3
   12cf8:	001a      	movs	r2, r3
   12cfa:	2301      	movs	r3, #1
   12cfc:	4013      	ands	r3, r2
   12cfe:	d00e      	beq.n	12d1e <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
   12d00:	68bb      	ldr	r3, [r7, #8]
   12d02:	2201      	movs	r2, #1
   12d04:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
   12d06:	68fb      	ldr	r3, [r7, #12]
   12d08:	3314      	adds	r3, #20
   12d0a:	2b00      	cmp	r3, #0
   12d0c:	d007      	beq.n	12d1e <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
   12d0e:	68fb      	ldr	r3, [r7, #12]
   12d10:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
   12d12:	2b00      	cmp	r3, #0
   12d14:	d003      	beq.n	12d1e <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
   12d16:	68fb      	ldr	r3, [r7, #12]
   12d18:	699b      	ldr	r3, [r3, #24]
   12d1a:	2000      	movs	r0, #0
   12d1c:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
   12d1e:	68bb      	ldr	r3, [r7, #8]
   12d20:	799b      	ldrb	r3, [r3, #6]
   12d22:	b2db      	uxtb	r3, r3
   12d24:	001a      	movs	r2, r3
   12d26:	2302      	movs	r3, #2
   12d28:	4013      	ands	r3, r2
   12d2a:	d047      	beq.n	12dbc <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   12d2c:	68bb      	ldr	r3, [r7, #8]
   12d2e:	2202      	movs	r2, #2
   12d30:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
   12d32:	68fb      	ldr	r3, [r7, #12]
   12d34:	899b      	ldrh	r3, [r3, #12]
   12d36:	b29b      	uxth	r3, r3
   12d38:	2b00      	cmp	r3, #0
   12d3a:	d033      	beq.n	12da4 <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
   12d3c:	68fb      	ldr	r3, [r7, #12]
   12d3e:	689a      	ldr	r2, [r3, #8]
   12d40:	68fb      	ldr	r3, [r7, #12]
   12d42:	89db      	ldrh	r3, [r3, #14]
   12d44:	b29b      	uxth	r3, r3
   12d46:	1c59      	adds	r1, r3, #1
   12d48:	b288      	uxth	r0, r1
   12d4a:	68f9      	ldr	r1, [r7, #12]
   12d4c:	81c8      	strh	r0, [r1, #14]
   12d4e:	005b      	lsls	r3, r3, #1
   12d50:	18d3      	adds	r3, r2, r3
   12d52:	881b      	ldrh	r3, [r3, #0]
   12d54:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
   12d56:	68bb      	ldr	r3, [r7, #8]
   12d58:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
   12d5a:	68fb      	ldr	r3, [r7, #12]
   12d5c:	899b      	ldrh	r3, [r3, #12]
   12d5e:	b29b      	uxth	r3, r3
   12d60:	3b01      	subs	r3, #1
   12d62:	b29a      	uxth	r2, r3
   12d64:	68fb      	ldr	r3, [r7, #12]
   12d66:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
   12d68:	68fb      	ldr	r3, [r7, #12]
   12d6a:	899b      	ldrh	r3, [r3, #12]
   12d6c:	b29b      	uxth	r3, r3
   12d6e:	2b00      	cmp	r3, #0
   12d70:	d118      	bne.n	12da4 <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
   12d72:	68fb      	ldr	r3, [r7, #12]
   12d74:	2220      	movs	r2, #32
   12d76:	2100      	movs	r1, #0
   12d78:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
   12d7a:	68bb      	ldr	r3, [r7, #8]
   12d7c:	2202      	movs	r2, #2
   12d7e:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   12d80:	68bb      	ldr	r3, [r7, #8]
   12d82:	2202      	movs	r2, #2
   12d84:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
   12d86:	2019      	movs	r0, #25
   12d88:	4b0f      	ldr	r3, [pc, #60]	; (12dc8 <_dac_interrupt_handler+0xf4>)
   12d8a:	4798      	blx	r3

				if ((module->callback) &&
   12d8c:	68fb      	ldr	r3, [r7, #12]
   12d8e:	3314      	adds	r3, #20
   12d90:	2b00      	cmp	r3, #0
   12d92:	d007      	beq.n	12da4 <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
   12d94:	68fb      	ldr	r3, [r7, #12]
   12d96:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
   12d98:	2b00      	cmp	r3, #0
   12d9a:	d003      	beq.n	12da4 <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
   12d9c:	68fb      	ldr	r3, [r7, #12]
   12d9e:	69db      	ldr	r3, [r3, #28]
   12da0:	2000      	movs	r0, #0
   12da2:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
   12da4:	68fb      	ldr	r3, [r7, #12]
   12da6:	3314      	adds	r3, #20
   12da8:	2b00      	cmp	r3, #0
   12daa:	d007      	beq.n	12dbc <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
   12dac:	68fb      	ldr	r3, [r7, #12]
   12dae:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
   12db0:	2b00      	cmp	r3, #0
   12db2:	d003      	beq.n	12dbc <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
   12db4:	68fb      	ldr	r3, [r7, #12]
   12db6:	695b      	ldr	r3, [r3, #20]
   12db8:	2000      	movs	r0, #0
   12dba:	4798      	blx	r3
		}
	}
}
   12dbc:	46c0      	nop			; (mov r8, r8)
   12dbe:	46bd      	mov	sp, r7
   12dc0:	b004      	add	sp, #16
   12dc2:	bd80      	pop	{r7, pc}
   12dc4:	2000474c 	.word	0x2000474c
   12dc8:	00012ca5 	.word	0x00012ca5

00012dcc <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
   12dcc:	b580      	push	{r7, lr}
   12dce:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
   12dd0:	2000      	movs	r0, #0
   12dd2:	4b02      	ldr	r3, [pc, #8]	; (12ddc <DAC_Handler+0x10>)
   12dd4:	4798      	blx	r3
}
   12dd6:	46c0      	nop			; (mov r8, r8)
   12dd8:	46bd      	mov	sp, r7
   12dda:	bd80      	pop	{r7, pc}
   12ddc:	00012cd5 	.word	0x00012cd5

00012de0 <system_interrupt_enter_critical_section>:
{
   12de0:	b580      	push	{r7, lr}
   12de2:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   12de4:	4b02      	ldr	r3, [pc, #8]	; (12df0 <system_interrupt_enter_critical_section+0x10>)
   12de6:	4798      	blx	r3
}
   12de8:	46c0      	nop			; (mov r8, r8)
   12dea:	46bd      	mov	sp, r7
   12dec:	bd80      	pop	{r7, pc}
   12dee:	46c0      	nop			; (mov r8, r8)
   12df0:	000252a9 	.word	0x000252a9

00012df4 <system_interrupt_leave_critical_section>:
{
   12df4:	b580      	push	{r7, lr}
   12df6:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   12df8:	4b02      	ldr	r3, [pc, #8]	; (12e04 <system_interrupt_leave_critical_section+0x10>)
   12dfa:	4798      	blx	r3
}
   12dfc:	46c0      	nop			; (mov r8, r8)
   12dfe:	46bd      	mov	sp, r7
   12e00:	bd80      	pop	{r7, pc}
   12e02:	46c0      	nop			; (mov r8, r8)
   12e04:	000252fd 	.word	0x000252fd

00012e08 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
   12e08:	b580      	push	{r7, lr}
   12e0a:	b086      	sub	sp, #24
   12e0c:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
   12e0e:	4b49      	ldr	r3, [pc, #292]	; (12f34 <DMAC_Handler+0x12c>)
   12e10:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
   12e12:	4b49      	ldr	r3, [pc, #292]	; (12f38 <DMAC_Handler+0x130>)
   12e14:	8c1b      	ldrh	r3, [r3, #32]
   12e16:	b29b      	uxth	r3, r3
   12e18:	b2da      	uxtb	r2, r3
   12e1a:	2317      	movs	r3, #23
   12e1c:	18fb      	adds	r3, r7, r3
   12e1e:	210f      	movs	r1, #15
   12e20:	400a      	ands	r2, r1
   12e22:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
   12e24:	2317      	movs	r3, #23
   12e26:	18fb      	adds	r3, r7, r3
   12e28:	781a      	ldrb	r2, [r3, #0]
   12e2a:	4b44      	ldr	r3, [pc, #272]	; (12f3c <DMAC_Handler+0x134>)
   12e2c:	0092      	lsls	r2, r2, #2
   12e2e:	58d3      	ldr	r3, [r2, r3]
   12e30:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
   12e32:	4a41      	ldr	r2, [pc, #260]	; (12f38 <DMAC_Handler+0x130>)
   12e34:	693b      	ldr	r3, [r7, #16]
   12e36:	781b      	ldrb	r3, [r3, #0]
   12e38:	210f      	movs	r1, #15
   12e3a:	400b      	ands	r3, r1
   12e3c:	b2d9      	uxtb	r1, r3
   12e3e:	233f      	movs	r3, #63	; 0x3f
   12e40:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
   12e42:	493d      	ldr	r1, [pc, #244]	; (12f38 <DMAC_Handler+0x130>)
   12e44:	230f      	movs	r3, #15
   12e46:	18fb      	adds	r3, r7, r3
   12e48:	224e      	movs	r2, #78	; 0x4e
   12e4a:	5c8a      	ldrb	r2, [r1, r2]
   12e4c:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
   12e4e:	693b      	ldr	r3, [r7, #16]
   12e50:	781b      	ldrb	r3, [r3, #0]
   12e52:	4a3b      	ldr	r2, [pc, #236]	; (12f40 <DMAC_Handler+0x138>)
   12e54:	011b      	lsls	r3, r3, #4
   12e56:	18d3      	adds	r3, r2, r3
   12e58:	3302      	adds	r3, #2
   12e5a:	881b      	ldrh	r3, [r3, #0]
   12e5c:	b29b      	uxth	r3, r3
   12e5e:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
   12e60:	693b      	ldr	r3, [r7, #16]
   12e62:	781b      	ldrb	r3, [r3, #0]
   12e64:	4a37      	ldr	r2, [pc, #220]	; (12f44 <DMAC_Handler+0x13c>)
   12e66:	011b      	lsls	r3, r3, #4
   12e68:	18d3      	adds	r3, r2, r3
   12e6a:	3302      	adds	r3, #2
   12e6c:	881b      	ldrh	r3, [r3, #0]
   12e6e:	b29b      	uxth	r3, r3
   12e70:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
   12e72:	68ba      	ldr	r2, [r7, #8]
   12e74:	687b      	ldr	r3, [r7, #4]
   12e76:	1ad2      	subs	r2, r2, r3
   12e78:	693b      	ldr	r3, [r7, #16]
   12e7a:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
   12e7c:	230f      	movs	r3, #15
   12e7e:	18fb      	adds	r3, r7, r3
   12e80:	781b      	ldrb	r3, [r3, #0]
   12e82:	2201      	movs	r2, #1
   12e84:	4013      	ands	r3, r2
   12e86:	d016      	beq.n	12eb6 <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
   12e88:	4a2b      	ldr	r2, [pc, #172]	; (12f38 <DMAC_Handler+0x130>)
   12e8a:	234e      	movs	r3, #78	; 0x4e
   12e8c:	2101      	movs	r1, #1
   12e8e:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
   12e90:	693b      	ldr	r3, [r7, #16]
   12e92:	2210      	movs	r2, #16
   12e94:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   12e96:	693b      	ldr	r3, [r7, #16]
   12e98:	7c1b      	ldrb	r3, [r3, #16]
   12e9a:	001a      	movs	r2, r3
   12e9c:	2301      	movs	r3, #1
   12e9e:	4013      	ands	r3, r2
   12ea0:	d042      	beq.n	12f28 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
   12ea2:	693b      	ldr	r3, [r7, #16]
   12ea4:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   12ea6:	2b00      	cmp	r3, #0
   12ea8:	d03e      	beq.n	12f28 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
   12eaa:	693b      	ldr	r3, [r7, #16]
   12eac:	685b      	ldr	r3, [r3, #4]
   12eae:	693a      	ldr	r2, [r7, #16]
   12eb0:	0010      	movs	r0, r2
   12eb2:	4798      	blx	r3
   12eb4:	e038      	b.n	12f28 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
   12eb6:	230f      	movs	r3, #15
   12eb8:	18fb      	adds	r3, r7, r3
   12eba:	781b      	ldrb	r3, [r3, #0]
   12ebc:	2202      	movs	r2, #2
   12ebe:	4013      	ands	r3, r2
   12ec0:	d016      	beq.n	12ef0 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
   12ec2:	4a1d      	ldr	r2, [pc, #116]	; (12f38 <DMAC_Handler+0x130>)
   12ec4:	234e      	movs	r3, #78	; 0x4e
   12ec6:	2102      	movs	r1, #2
   12ec8:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
   12eca:	693b      	ldr	r3, [r7, #16]
   12ecc:	2200      	movs	r2, #0
   12ece:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12ed0:	693b      	ldr	r3, [r7, #16]
   12ed2:	7c1b      	ldrb	r3, [r3, #16]
   12ed4:	001a      	movs	r2, r3
   12ed6:	2302      	movs	r3, #2
   12ed8:	4013      	ands	r3, r2
   12eda:	d025      	beq.n	12f28 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
   12edc:	693b      	ldr	r3, [r7, #16]
   12ede:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12ee0:	2b00      	cmp	r3, #0
   12ee2:	d021      	beq.n	12f28 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
   12ee4:	693b      	ldr	r3, [r7, #16]
   12ee6:	689b      	ldr	r3, [r3, #8]
   12ee8:	693a      	ldr	r2, [r7, #16]
   12eea:	0010      	movs	r0, r2
   12eec:	4798      	blx	r3
   12eee:	e01b      	b.n	12f28 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
   12ef0:	230f      	movs	r3, #15
   12ef2:	18fb      	adds	r3, r7, r3
   12ef4:	781b      	ldrb	r3, [r3, #0]
   12ef6:	2204      	movs	r2, #4
   12ef8:	4013      	ands	r3, r2
   12efa:	d015      	beq.n	12f28 <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
   12efc:	4a0e      	ldr	r2, [pc, #56]	; (12f38 <DMAC_Handler+0x130>)
   12efe:	234e      	movs	r3, #78	; 0x4e
   12f00:	2104      	movs	r1, #4
   12f02:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
   12f04:	693b      	ldr	r3, [r7, #16]
   12f06:	2206      	movs	r2, #6
   12f08:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12f0a:	693b      	ldr	r3, [r7, #16]
   12f0c:	7c1b      	ldrb	r3, [r3, #16]
   12f0e:	001a      	movs	r2, r3
   12f10:	2304      	movs	r3, #4
   12f12:	4013      	ands	r3, r2
   12f14:	d008      	beq.n	12f28 <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
   12f16:	693b      	ldr	r3, [r7, #16]
   12f18:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12f1a:	2b00      	cmp	r3, #0
   12f1c:	d004      	beq.n	12f28 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
   12f1e:	693b      	ldr	r3, [r7, #16]
   12f20:	68db      	ldr	r3, [r3, #12]
   12f22:	693a      	ldr	r2, [r7, #16]
   12f24:	0010      	movs	r0, r2
   12f26:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
   12f28:	4b07      	ldr	r3, [pc, #28]	; (12f48 <DMAC_Handler+0x140>)
   12f2a:	4798      	blx	r3
}
   12f2c:	46c0      	nop			; (mov r8, r8)
   12f2e:	46bd      	mov	sp, r7
   12f30:	b006      	add	sp, #24
   12f32:	bd80      	pop	{r7, pc}
   12f34:	00012de1 	.word	0x00012de1
   12f38:	41004800 	.word	0x41004800
   12f3c:	200004e0 	.word	0x200004e0
   12f40:	20004750 	.word	0x20004750
   12f44:	20000490 	.word	0x20000490
   12f48:	00012df5 	.word	0x00012df5

00012f4c <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
   12f4c:	b580      	push	{r7, lr}
   12f4e:	b082      	sub	sp, #8
   12f50:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
   12f52:	4b15      	ldr	r3, [pc, #84]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f54:	691b      	ldr	r3, [r3, #16]
   12f56:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
   12f58:	4b14      	ldr	r3, [pc, #80]	; (12fac <EVSYS_Handler+0x60>)
   12f5a:	699b      	ldr	r3, [r3, #24]
   12f5c:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
   12f5e:	4b12      	ldr	r3, [pc, #72]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f60:	689a      	ldr	r2, [r3, #8]
   12f62:	683b      	ldr	r3, [r7, #0]
   12f64:	431a      	orrs	r2, r3
   12f66:	4b10      	ldr	r3, [pc, #64]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f68:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
   12f6a:	4b10      	ldr	r3, [pc, #64]	; (12fac <EVSYS_Handler+0x60>)
   12f6c:	4a10      	ldr	r2, [pc, #64]	; (12fb0 <EVSYS_Handler+0x64>)
   12f6e:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
   12f70:	e008      	b.n	12f84 <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
   12f72:	687b      	ldr	r3, [r7, #4]
   12f74:	685a      	ldr	r2, [r3, #4]
   12f76:	687b      	ldr	r3, [r7, #4]
   12f78:	681b      	ldr	r3, [r3, #0]
   12f7a:	0018      	movs	r0, r3
   12f7c:	4790      	blx	r2
		current_hook = current_hook->next;
   12f7e:	687b      	ldr	r3, [r7, #4]
   12f80:	689b      	ldr	r3, [r3, #8]
   12f82:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
   12f84:	687b      	ldr	r3, [r7, #4]
   12f86:	2b00      	cmp	r3, #0
   12f88:	d1f3      	bne.n	12f72 <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
   12f8a:	4b07      	ldr	r3, [pc, #28]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f8c:	68db      	ldr	r3, [r3, #12]
   12f8e:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
   12f90:	4b05      	ldr	r3, [pc, #20]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f92:	689b      	ldr	r3, [r3, #8]
   12f94:	683a      	ldr	r2, [r7, #0]
   12f96:	43d2      	mvns	r2, r2
   12f98:	401a      	ands	r2, r3
   12f9a:	4b03      	ldr	r3, [pc, #12]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f9c:	609a      	str	r2, [r3, #8]
}
   12f9e:	46c0      	nop			; (mov r8, r8)
   12fa0:	46bd      	mov	sp, r7
   12fa2:	b002      	add	sp, #8
   12fa4:	bd80      	pop	{r7, pc}
   12fa6:	46c0      	nop			; (mov r8, r8)
   12fa8:	2000000c 	.word	0x2000000c
   12fac:	42000400 	.word	0x42000400
   12fb0:	0f0fffff 	.word	0x0f0fffff

00012fb4 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   12fb4:	b580      	push	{r7, lr}
   12fb6:	b082      	sub	sp, #8
   12fb8:	af00      	add	r7, sp, #0
   12fba:	0002      	movs	r2, r0
   12fbc:	6039      	str	r1, [r7, #0]
   12fbe:	1dfb      	adds	r3, r7, #7
   12fc0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   12fc2:	1dfb      	adds	r3, r7, #7
   12fc4:	781b      	ldrb	r3, [r3, #0]
   12fc6:	2b01      	cmp	r3, #1
   12fc8:	d00a      	beq.n	12fe0 <system_apb_clock_set_mask+0x2c>
   12fca:	2b02      	cmp	r3, #2
   12fcc:	d00f      	beq.n	12fee <system_apb_clock_set_mask+0x3a>
   12fce:	2b00      	cmp	r3, #0
   12fd0:	d114      	bne.n	12ffc <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   12fd2:	4b0e      	ldr	r3, [pc, #56]	; (1300c <system_apb_clock_set_mask+0x58>)
   12fd4:	4a0d      	ldr	r2, [pc, #52]	; (1300c <system_apb_clock_set_mask+0x58>)
   12fd6:	6991      	ldr	r1, [r2, #24]
   12fd8:	683a      	ldr	r2, [r7, #0]
   12fda:	430a      	orrs	r2, r1
   12fdc:	619a      	str	r2, [r3, #24]
			break;
   12fde:	e00f      	b.n	13000 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   12fe0:	4b0a      	ldr	r3, [pc, #40]	; (1300c <system_apb_clock_set_mask+0x58>)
   12fe2:	4a0a      	ldr	r2, [pc, #40]	; (1300c <system_apb_clock_set_mask+0x58>)
   12fe4:	69d1      	ldr	r1, [r2, #28]
   12fe6:	683a      	ldr	r2, [r7, #0]
   12fe8:	430a      	orrs	r2, r1
   12fea:	61da      	str	r2, [r3, #28]
			break;
   12fec:	e008      	b.n	13000 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   12fee:	4b07      	ldr	r3, [pc, #28]	; (1300c <system_apb_clock_set_mask+0x58>)
   12ff0:	4a06      	ldr	r2, [pc, #24]	; (1300c <system_apb_clock_set_mask+0x58>)
   12ff2:	6a11      	ldr	r1, [r2, #32]
   12ff4:	683a      	ldr	r2, [r7, #0]
   12ff6:	430a      	orrs	r2, r1
   12ff8:	621a      	str	r2, [r3, #32]
			break;
   12ffa:	e001      	b.n	13000 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   12ffc:	2317      	movs	r3, #23
   12ffe:	e000      	b.n	13002 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   13000:	2300      	movs	r3, #0
}
   13002:	0018      	movs	r0, r3
   13004:	46bd      	mov	sp, r7
   13006:	b002      	add	sp, #8
   13008:	bd80      	pop	{r7, pc}
   1300a:	46c0      	nop			; (mov r8, r8)
   1300c:	40000400 	.word	0x40000400

00013010 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
   13010:	b580      	push	{r7, lr}
   13012:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
   13014:	2102      	movs	r1, #2
   13016:	2002      	movs	r0, #2
   13018:	4b07      	ldr	r3, [pc, #28]	; (13038 <_system_events_init+0x28>)
   1301a:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
   1301c:	4b07      	ldr	r3, [pc, #28]	; (1303c <_system_events_init+0x2c>)
   1301e:	2201      	movs	r2, #1
   13020:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
   13022:	46c0      	nop			; (mov r8, r8)
   13024:	4b05      	ldr	r3, [pc, #20]	; (1303c <_system_events_init+0x2c>)
   13026:	781b      	ldrb	r3, [r3, #0]
   13028:	b2db      	uxtb	r3, r3
   1302a:	001a      	movs	r2, r3
   1302c:	2301      	movs	r3, #1
   1302e:	4013      	ands	r3, r2
   13030:	d1f8      	bne.n	13024 <_system_events_init+0x14>
	}
}
   13032:	46c0      	nop			; (mov r8, r8)
   13034:	46bd      	mov	sp, r7
   13036:	bd80      	pop	{r7, pc}
   13038:	00012fb5 	.word	0x00012fb5
   1303c:	42000400 	.word	0x42000400

00013040 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
   13040:	b580      	push	{r7, lr}
   13042:	b084      	sub	sp, #16
   13044:	af00      	add	r7, sp, #0
   13046:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   13048:	687b      	ldr	r3, [r7, #4]
   1304a:	681b      	ldr	r3, [r3, #0]
   1304c:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   1304e:	68fb      	ldr	r3, [r7, #12]
   13050:	69db      	ldr	r3, [r3, #28]
   13052:	2207      	movs	r2, #7
   13054:	4013      	ands	r3, r2
   13056:	1e5a      	subs	r2, r3, #1
   13058:	4193      	sbcs	r3, r2
   1305a:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
   1305c:	0018      	movs	r0, r3
   1305e:	46bd      	mov	sp, r7
   13060:	b004      	add	sp, #16
   13062:	bd80      	pop	{r7, pc}

00013064 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
   13064:	b580      	push	{r7, lr}
   13066:	b082      	sub	sp, #8
   13068:	af00      	add	r7, sp, #0
   1306a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
   1306c:	46c0      	nop			; (mov r8, r8)
   1306e:	687b      	ldr	r3, [r7, #4]
   13070:	0018      	movs	r0, r3
   13072:	4b04      	ldr	r3, [pc, #16]	; (13084 <_i2c_master_wait_for_sync+0x20>)
   13074:	4798      	blx	r3
   13076:	1e03      	subs	r3, r0, #0
   13078:	d1f9      	bne.n	1306e <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
   1307a:	46c0      	nop			; (mov r8, r8)
   1307c:	46bd      	mov	sp, r7
   1307e:	b002      	add	sp, #8
   13080:	bd80      	pop	{r7, pc}
   13082:	46c0      	nop			; (mov r8, r8)
   13084:	00013041 	.word	0x00013041

00013088 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
   13088:	b580      	push	{r7, lr}
   1308a:	b084      	sub	sp, #16
   1308c:	af00      	add	r7, sp, #0
   1308e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13090:	687b      	ldr	r3, [r7, #4]
   13092:	681b      	ldr	r3, [r3, #0]
   13094:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   13096:	68fb      	ldr	r3, [r7, #12]
   13098:	681b      	ldr	r3, [r3, #0]
   1309a:	011b      	lsls	r3, r3, #4
   1309c:	0fdb      	lsrs	r3, r3, #31
   1309e:	b2db      	uxtb	r3, r3
   130a0:	001a      	movs	r2, r3
   130a2:	230b      	movs	r3, #11
   130a4:	18fb      	adds	r3, r7, r3
   130a6:	1e51      	subs	r1, r2, #1
   130a8:	418a      	sbcs	r2, r1
   130aa:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
   130ac:	2308      	movs	r3, #8
   130ae:	18fb      	adds	r3, r7, r3
   130b0:	687a      	ldr	r2, [r7, #4]
   130b2:	8b52      	ldrh	r2, [r2, #26]
   130b4:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   130b6:	687b      	ldr	r3, [r7, #4]
   130b8:	8b9b      	ldrh	r3, [r3, #28]
   130ba:	b29a      	uxth	r2, r3
   130bc:	2308      	movs	r3, #8
   130be:	18fb      	adds	r3, r7, r3
   130c0:	2108      	movs	r1, #8
   130c2:	1879      	adds	r1, r7, r1
   130c4:	8809      	ldrh	r1, [r1, #0]
   130c6:	1a8a      	subs	r2, r1, r2
   130c8:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   130ca:	687b      	ldr	r3, [r7, #4]
   130cc:	8b9b      	ldrh	r3, [r3, #28]
   130ce:	b29b      	uxth	r3, r3
   130d0:	3b01      	subs	r3, #1
   130d2:	b29a      	uxth	r2, r3
   130d4:	687b      	ldr	r3, [r7, #4]
   130d6:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
   130d8:	230b      	movs	r3, #11
   130da:	18fb      	adds	r3, r7, r3
   130dc:	781b      	ldrb	r3, [r3, #0]
   130de:	2b00      	cmp	r3, #0
   130e0:	d010      	beq.n	13104 <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
   130e2:	687b      	ldr	r3, [r7, #4]
   130e4:	7adb      	ldrb	r3, [r3, #11]
   130e6:	2b00      	cmp	r3, #0
   130e8:	d01c      	beq.n	13124 <_i2c_master_read+0x9c>
   130ea:	687b      	ldr	r3, [r7, #4]
   130ec:	8b9b      	ldrh	r3, [r3, #28]
   130ee:	b29b      	uxth	r3, r3
   130f0:	2b01      	cmp	r3, #1
   130f2:	d117      	bne.n	13124 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   130f4:	68fb      	ldr	r3, [r7, #12]
   130f6:	685b      	ldr	r3, [r3, #4]
   130f8:	2280      	movs	r2, #128	; 0x80
   130fa:	02d2      	lsls	r2, r2, #11
   130fc:	431a      	orrs	r2, r3
   130fe:	68fb      	ldr	r3, [r7, #12]
   13100:	605a      	str	r2, [r3, #4]
   13102:	e00f      	b.n	13124 <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
   13104:	687b      	ldr	r3, [r7, #4]
   13106:	7adb      	ldrb	r3, [r3, #11]
   13108:	2b00      	cmp	r3, #0
   1310a:	d00b      	beq.n	13124 <_i2c_master_read+0x9c>
   1310c:	687b      	ldr	r3, [r7, #4]
   1310e:	8b9b      	ldrh	r3, [r3, #28]
   13110:	b29b      	uxth	r3, r3
   13112:	2b00      	cmp	r3, #0
   13114:	d106      	bne.n	13124 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   13116:	68fb      	ldr	r3, [r7, #12]
   13118:	685b      	ldr	r3, [r3, #4]
   1311a:	2280      	movs	r2, #128	; 0x80
   1311c:	02d2      	lsls	r2, r2, #11
   1311e:	431a      	orrs	r2, r3
   13120:	68fb      	ldr	r3, [r7, #12]
   13122:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
   13124:	687b      	ldr	r3, [r7, #4]
   13126:	8b9b      	ldrh	r3, [r3, #28]
   13128:	b29b      	uxth	r3, r3
   1312a:	2b00      	cmp	r3, #0
   1312c:	d10e      	bne.n	1314c <_i2c_master_read+0xc4>
		if (module->send_stop) {
   1312e:	687b      	ldr	r3, [r7, #4]
   13130:	7a9b      	ldrb	r3, [r3, #10]
   13132:	2b00      	cmp	r3, #0
   13134:	d00a      	beq.n	1314c <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   13136:	687b      	ldr	r3, [r7, #4]
   13138:	0018      	movs	r0, r3
   1313a:	4b0e      	ldr	r3, [pc, #56]	; (13174 <_i2c_master_read+0xec>)
   1313c:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   1313e:	68fb      	ldr	r3, [r7, #12]
   13140:	685b      	ldr	r3, [r3, #4]
   13142:	22c0      	movs	r2, #192	; 0xc0
   13144:	0292      	lsls	r2, r2, #10
   13146:	431a      	orrs	r2, r3
   13148:	68fb      	ldr	r3, [r7, #12]
   1314a:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
   1314c:	687b      	ldr	r3, [r7, #4]
   1314e:	0018      	movs	r0, r3
   13150:	4b08      	ldr	r3, [pc, #32]	; (13174 <_i2c_master_read+0xec>)
   13152:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
   13154:	687b      	ldr	r3, [r7, #4]
   13156:	6a1a      	ldr	r2, [r3, #32]
   13158:	2308      	movs	r3, #8
   1315a:	18fb      	adds	r3, r7, r3
   1315c:	881b      	ldrh	r3, [r3, #0]
   1315e:	18d3      	adds	r3, r2, r3
   13160:	68fa      	ldr	r2, [r7, #12]
   13162:	2128      	movs	r1, #40	; 0x28
   13164:	5c52      	ldrb	r2, [r2, r1]
   13166:	b2d2      	uxtb	r2, r2
   13168:	701a      	strb	r2, [r3, #0]
}
   1316a:	46c0      	nop			; (mov r8, r8)
   1316c:	46bd      	mov	sp, r7
   1316e:	b004      	add	sp, #16
   13170:	bd80      	pop	{r7, pc}
   13172:	46c0      	nop			; (mov r8, r8)
   13174:	00013065 	.word	0x00013065

00013178 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
   13178:	b580      	push	{r7, lr}
   1317a:	b084      	sub	sp, #16
   1317c:	af00      	add	r7, sp, #0
   1317e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13180:	687b      	ldr	r3, [r7, #4]
   13182:	681b      	ldr	r3, [r3, #0]
   13184:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
   13186:	68fb      	ldr	r3, [r7, #12]
   13188:	8b5b      	ldrh	r3, [r3, #26]
   1318a:	b29b      	uxth	r3, r3
   1318c:	001a      	movs	r2, r3
   1318e:	2304      	movs	r3, #4
   13190:	4013      	ands	r3, r2
   13192:	d004      	beq.n	1319e <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
   13194:	687b      	ldr	r3, [r7, #4]
   13196:	2225      	movs	r2, #37	; 0x25
   13198:	211e      	movs	r1, #30
   1319a:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
   1319c:	e024      	b.n	131e8 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
   1319e:	230a      	movs	r3, #10
   131a0:	18fb      	adds	r3, r7, r3
   131a2:	687a      	ldr	r2, [r7, #4]
   131a4:	8b52      	ldrh	r2, [r2, #26]
   131a6:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   131a8:	687b      	ldr	r3, [r7, #4]
   131aa:	8b9b      	ldrh	r3, [r3, #28]
   131ac:	b29a      	uxth	r2, r3
   131ae:	230a      	movs	r3, #10
   131b0:	18fb      	adds	r3, r7, r3
   131b2:	210a      	movs	r1, #10
   131b4:	1879      	adds	r1, r7, r1
   131b6:	8809      	ldrh	r1, [r1, #0]
   131b8:	1a8a      	subs	r2, r1, r2
   131ba:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   131bc:	687b      	ldr	r3, [r7, #4]
   131be:	8b9b      	ldrh	r3, [r3, #28]
   131c0:	b29b      	uxth	r3, r3
   131c2:	3b01      	subs	r3, #1
   131c4:	b29a      	uxth	r2, r3
   131c6:	687b      	ldr	r3, [r7, #4]
   131c8:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
   131ca:	687b      	ldr	r3, [r7, #4]
   131cc:	0018      	movs	r0, r3
   131ce:	4b08      	ldr	r3, [pc, #32]	; (131f0 <_i2c_master_write+0x78>)
   131d0:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
   131d2:	687b      	ldr	r3, [r7, #4]
   131d4:	6a1a      	ldr	r2, [r3, #32]
   131d6:	230a      	movs	r3, #10
   131d8:	18fb      	adds	r3, r7, r3
   131da:	881b      	ldrh	r3, [r3, #0]
   131dc:	18d3      	adds	r3, r2, r3
   131de:	781b      	ldrb	r3, [r3, #0]
   131e0:	b2d9      	uxtb	r1, r3
   131e2:	68fb      	ldr	r3, [r7, #12]
   131e4:	2228      	movs	r2, #40	; 0x28
   131e6:	5499      	strb	r1, [r3, r2]
}
   131e8:	46bd      	mov	sp, r7
   131ea:	b004      	add	sp, #16
   131ec:	bd80      	pop	{r7, pc}
   131ee:	46c0      	nop			; (mov r8, r8)
   131f0:	00013065 	.word	0x00013065

000131f4 <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
   131f4:	b580      	push	{r7, lr}
   131f6:	b084      	sub	sp, #16
   131f8:	af00      	add	r7, sp, #0
   131fa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   131fc:	687b      	ldr	r3, [r7, #4]
   131fe:	681b      	ldr	r3, [r3, #0]
   13200:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
   13202:	68fb      	ldr	r3, [r7, #12]
   13204:	7e1b      	ldrb	r3, [r3, #24]
   13206:	b2db      	uxtb	r3, r3
   13208:	001a      	movs	r2, r3
   1320a:	2301      	movs	r3, #1
   1320c:	4013      	ands	r3, r2
   1320e:	d02b      	beq.n	13268 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   13210:	68fb      	ldr	r3, [r7, #12]
   13212:	2201      	movs	r2, #1
   13214:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   13216:	68fb      	ldr	r3, [r7, #12]
   13218:	8b5b      	ldrh	r3, [r3, #26]
   1321a:	b29b      	uxth	r3, r3
   1321c:	001a      	movs	r2, r3
   1321e:	2302      	movs	r3, #2
   13220:	4013      	ands	r3, r2
   13222:	d004      	beq.n	1322e <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
   13224:	687b      	ldr	r3, [r7, #4]
   13226:	2225      	movs	r2, #37	; 0x25
   13228:	2141      	movs	r1, #65	; 0x41
   1322a:	5499      	strb	r1, [r3, r2]
   1322c:	e01c      	b.n	13268 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   1322e:	68fb      	ldr	r3, [r7, #12]
   13230:	8b5b      	ldrh	r3, [r3, #26]
   13232:	b29b      	uxth	r3, r3
   13234:	001a      	movs	r2, r3
   13236:	2304      	movs	r3, #4
   13238:	4013      	ands	r3, r2
   1323a:	d015      	beq.n	13268 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
   1323c:	687b      	ldr	r3, [r7, #4]
   1323e:	2225      	movs	r2, #37	; 0x25
   13240:	2118      	movs	r1, #24
   13242:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
   13244:	687b      	ldr	r3, [r7, #4]
   13246:	2200      	movs	r2, #0
   13248:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
   1324a:	687b      	ldr	r3, [r7, #4]
   1324c:	7a9b      	ldrb	r3, [r3, #10]
   1324e:	2b00      	cmp	r3, #0
   13250:	d00a      	beq.n	13268 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
   13252:	687b      	ldr	r3, [r7, #4]
   13254:	0018      	movs	r0, r3
   13256:	4b13      	ldr	r3, [pc, #76]	; (132a4 <_i2c_master_async_address_response+0xb0>)
   13258:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   1325a:	68fb      	ldr	r3, [r7, #12]
   1325c:	685b      	ldr	r3, [r3, #4]
   1325e:	22c0      	movs	r2, #192	; 0xc0
   13260:	0292      	lsls	r2, r2, #10
   13262:	431a      	orrs	r2, r3
   13264:	68fb      	ldr	r3, [r7, #12]
   13266:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
   13268:	687b      	ldr	r3, [r7, #4]
   1326a:	8b9b      	ldrh	r3, [r3, #28]
   1326c:	b29a      	uxth	r2, r3
   1326e:	687b      	ldr	r3, [r7, #4]
   13270:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
   13272:	687b      	ldr	r3, [r7, #4]
   13274:	2225      	movs	r2, #37	; 0x25
   13276:	5c9b      	ldrb	r3, [r3, r2]
   13278:	b2db      	uxtb	r3, r3
   1327a:	2b05      	cmp	r3, #5
   1327c:	d10e      	bne.n	1329c <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   1327e:	687b      	ldr	r3, [r7, #4]
   13280:	2224      	movs	r2, #36	; 0x24
   13282:	5c9b      	ldrb	r3, [r3, r2]
   13284:	b2db      	uxtb	r3, r3
   13286:	2b00      	cmp	r3, #0
   13288:	d104      	bne.n	13294 <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
   1328a:	687b      	ldr	r3, [r7, #4]
   1328c:	0018      	movs	r0, r3
   1328e:	4b06      	ldr	r3, [pc, #24]	; (132a8 <_i2c_master_async_address_response+0xb4>)
   13290:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
   13292:	e003      	b.n	1329c <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
   13294:	687b      	ldr	r3, [r7, #4]
   13296:	0018      	movs	r0, r3
   13298:	4b04      	ldr	r3, [pc, #16]	; (132ac <_i2c_master_async_address_response+0xb8>)
   1329a:	4798      	blx	r3
}
   1329c:	46c0      	nop			; (mov r8, r8)
   1329e:	46bd      	mov	sp, r7
   132a0:	b004      	add	sp, #16
   132a2:	bd80      	pop	{r7, pc}
   132a4:	00013065 	.word	0x00013065
   132a8:	00013179 	.word	0x00013179
   132ac:	00013089 	.word	0x00013089

000132b0 <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
   132b0:	b580      	push	{r7, lr}
   132b2:	b084      	sub	sp, #16
   132b4:	af00      	add	r7, sp, #0
   132b6:	60f8      	str	r0, [r7, #12]
   132b8:	60b9      	str	r1, [r7, #8]
   132ba:	1dfb      	adds	r3, r7, #7
   132bc:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
   132be:	1dfb      	adds	r3, r7, #7
   132c0:	781b      	ldrb	r3, [r3, #0]
   132c2:	68fa      	ldr	r2, [r7, #12]
   132c4:	3302      	adds	r3, #2
   132c6:	009b      	lsls	r3, r3, #2
   132c8:	18d3      	adds	r3, r2, r3
   132ca:	3304      	adds	r3, #4
   132cc:	68ba      	ldr	r2, [r7, #8]
   132ce:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
   132d0:	68fb      	ldr	r3, [r7, #12]
   132d2:	7e1b      	ldrb	r3, [r3, #24]
   132d4:	b2db      	uxtb	r3, r3
   132d6:	b25a      	sxtb	r2, r3
   132d8:	1dfb      	adds	r3, r7, #7
   132da:	781b      	ldrb	r3, [r3, #0]
   132dc:	2101      	movs	r1, #1
   132de:	4099      	lsls	r1, r3
   132e0:	000b      	movs	r3, r1
   132e2:	b25b      	sxtb	r3, r3
   132e4:	4313      	orrs	r3, r2
   132e6:	b25b      	sxtb	r3, r3
   132e8:	b2da      	uxtb	r2, r3
   132ea:	68fb      	ldr	r3, [r7, #12]
   132ec:	761a      	strb	r2, [r3, #24]
}
   132ee:	46c0      	nop			; (mov r8, r8)
   132f0:	46bd      	mov	sp, r7
   132f2:	b004      	add	sp, #16
   132f4:	bd80      	pop	{r7, pc}
	...

000132f8 <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   132f8:	b590      	push	{r4, r7, lr}
   132fa:	b087      	sub	sp, #28
   132fc:	af00      	add	r7, sp, #0
   132fe:	6078      	str	r0, [r7, #4]
   13300:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13302:	687b      	ldr	r3, [r7, #4]
   13304:	681b      	ldr	r3, [r3, #0]
   13306:	613b      	str	r3, [r7, #16]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
   13308:	683b      	ldr	r3, [r7, #0]
   1330a:	685a      	ldr	r2, [r3, #4]
   1330c:	687b      	ldr	r3, [r7, #4]
   1330e:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   13310:	683b      	ldr	r3, [r7, #0]
   13312:	885a      	ldrh	r2, [r3, #2]
   13314:	687b      	ldr	r3, [r7, #4]
   13316:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
   13318:	687b      	ldr	r3, [r7, #4]
   1331a:	2224      	movs	r2, #36	; 0x24
   1331c:	2101      	movs	r1, #1
   1331e:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   13320:	687b      	ldr	r3, [r7, #4]
   13322:	2225      	movs	r2, #37	; 0x25
   13324:	2105      	movs	r1, #5
   13326:	5499      	strb	r1, [r3, r2]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   13328:	693b      	ldr	r3, [r7, #16]
   1332a:	681b      	ldr	r3, [r3, #0]
   1332c:	011b      	lsls	r3, r3, #4
   1332e:	0fdb      	lsrs	r3, r3, #31
   13330:	b2db      	uxtb	r3, r3
   13332:	001a      	movs	r2, r3
   13334:	230f      	movs	r3, #15
   13336:	18fb      	adds	r3, r7, r3
   13338:	1e51      	subs	r1, r2, #1
   1333a:	418a      	sbcs	r2, r1
   1333c:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   1333e:	683b      	ldr	r3, [r7, #0]
   13340:	7a5b      	ldrb	r3, [r3, #9]
   13342:	2b00      	cmp	r3, #0
   13344:	d006      	beq.n	13354 <_i2c_master_read_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   13346:	683b      	ldr	r3, [r7, #0]
   13348:	7a9a      	ldrb	r2, [r3, #10]
   1334a:	687b      	ldr	r3, [r7, #4]
   1334c:	0011      	movs	r1, r2
   1334e:	0018      	movs	r0, r3
   13350:	4b3b      	ldr	r3, [pc, #236]	; (13440 <_i2c_master_read_packet+0x148>)
   13352:	4798      	blx	r3
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
   13354:	230f      	movs	r3, #15
   13356:	18fb      	adds	r3, r7, r3
   13358:	781b      	ldrb	r3, [r3, #0]
   1335a:	2b00      	cmp	r3, #0
   1335c:	d00b      	beq.n	13376 <_i2c_master_read_packet+0x7e>
   1335e:	683b      	ldr	r3, [r7, #0]
   13360:	885b      	ldrh	r3, [r3, #2]
   13362:	2b01      	cmp	r3, #1
   13364:	d107      	bne.n	13376 <_i2c_master_read_packet+0x7e>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   13366:	693b      	ldr	r3, [r7, #16]
   13368:	685b      	ldr	r3, [r3, #4]
   1336a:	2280      	movs	r2, #128	; 0x80
   1336c:	02d2      	lsls	r2, r2, #11
   1336e:	431a      	orrs	r2, r3
   13370:	693b      	ldr	r3, [r7, #16]
   13372:	605a      	str	r2, [r3, #4]
   13374:	e005      	b.n	13382 <_i2c_master_read_packet+0x8a>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   13376:	693b      	ldr	r3, [r7, #16]
   13378:	685b      	ldr	r3, [r3, #4]
   1337a:	4a32      	ldr	r2, [pc, #200]	; (13444 <_i2c_master_read_packet+0x14c>)
   1337c:	401a      	ands	r2, r3
   1337e:	693b      	ldr	r3, [r7, #16]
   13380:	605a      	str	r2, [r3, #4]
	}

	if (packet->ten_bit_address) {
   13382:	683b      	ldr	r3, [r7, #0]
   13384:	7a1b      	ldrb	r3, [r3, #8]
   13386:	2b00      	cmp	r3, #0
   13388:	d045      	beq.n	13416 <_i2c_master_read_packet+0x11e>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
   1338a:	683b      	ldr	r3, [r7, #0]
   1338c:	881b      	ldrh	r3, [r3, #0]
   1338e:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13390:	683b      	ldr	r3, [r7, #0]
   13392:	7a5b      	ldrb	r3, [r3, #9]
   13394:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
   13396:	4313      	orrs	r3, r2
   13398:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   1339a:	2380      	movs	r3, #128	; 0x80
   1339c:	021b      	lsls	r3, r3, #8
   1339e:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
   133a0:	693b      	ldr	r3, [r7, #16]
   133a2:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
   133a4:	2317      	movs	r3, #23
   133a6:	18fc      	adds	r4, r7, r3
   133a8:	687b      	ldr	r3, [r7, #4]
   133aa:	0018      	movs	r0, r3
   133ac:	4b26      	ldr	r3, [pc, #152]	; (13448 <_i2c_master_read_packet+0x150>)
   133ae:	4798      	blx	r3
   133b0:	0003      	movs	r3, r0
   133b2:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   133b4:	693b      	ldr	r3, [r7, #16]
   133b6:	685b      	ldr	r3, [r3, #4]
   133b8:	4a22      	ldr	r2, [pc, #136]	; (13444 <_i2c_master_read_packet+0x14c>)
   133ba:	401a      	ands	r2, r3
   133bc:	693b      	ldr	r3, [r7, #16]
   133be:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
   133c0:	2317      	movs	r3, #23
   133c2:	18fb      	adds	r3, r7, r3
   133c4:	781b      	ldrb	r3, [r3, #0]
   133c6:	2b00      	cmp	r3, #0
   133c8:	d107      	bne.n	133da <_i2c_master_read_packet+0xe2>
			tmp_status = _i2c_master_address_response(module);
   133ca:	2317      	movs	r3, #23
   133cc:	18fc      	adds	r4, r7, r3
   133ce:	687b      	ldr	r3, [r7, #4]
   133d0:	0018      	movs	r0, r3
   133d2:	4b1e      	ldr	r3, [pc, #120]	; (1344c <_i2c_master_read_packet+0x154>)
   133d4:	4798      	blx	r3
   133d6:	0003      	movs	r3, r0
   133d8:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
   133da:	2317      	movs	r3, #23
   133dc:	18fb      	adds	r3, r7, r3
   133de:	781b      	ldrb	r3, [r3, #0]
   133e0:	2b00      	cmp	r3, #0
   133e2:	d114      	bne.n	1340e <_i2c_master_read_packet+0x116>
			/* Enable interrupts */
			i2c_module->INTENSET.reg =
   133e4:	693b      	ldr	r3, [r7, #16]
   133e6:	2203      	movs	r2, #3
   133e8:	759a      	strb	r2, [r3, #22]

			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   133ea:	683b      	ldr	r3, [r7, #0]
   133ec:	881b      	ldrh	r3, [r3, #0]
   133ee:	0a1b      	lsrs	r3, r3, #8
   133f0:	b29b      	uxth	r3, r3
   133f2:	2278      	movs	r2, #120	; 0x78
   133f4:	4313      	orrs	r3, r2
   133f6:	b29b      	uxth	r3, r3
   133f8:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   133fa:	683b      	ldr	r3, [r7, #0]
   133fc:	7a5b      	ldrb	r3, [r3, #9]
   133fe:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   13400:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13402:	2201      	movs	r2, #1
   13404:	4313      	orrs	r3, r2
   13406:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   13408:	693b      	ldr	r3, [r7, #16]
   1340a:	625a      	str	r2, [r3, #36]	; 0x24
   1340c:	e012      	b.n	13434 <_i2c_master_read_packet+0x13c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
   1340e:	2317      	movs	r3, #23
   13410:	18fb      	adds	r3, r7, r3
   13412:	781b      	ldrb	r3, [r3, #0]
   13414:	e00f      	b.n	13436 <_i2c_master_read_packet+0x13e>
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
   13416:	693b      	ldr	r3, [r7, #16]
   13418:	2203      	movs	r2, #3
   1341a:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   1341c:	683b      	ldr	r3, [r7, #0]
   1341e:	881b      	ldrh	r3, [r3, #0]
   13420:	005b      	lsls	r3, r3, #1
   13422:	2201      	movs	r2, #1
   13424:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   13426:	683b      	ldr	r3, [r7, #0]
   13428:	7a5b      	ldrb	r3, [r3, #9]
   1342a:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   1342c:	4313      	orrs	r3, r2
   1342e:	001a      	movs	r2, r3
   13430:	693b      	ldr	r3, [r7, #16]
   13432:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   13434:	2300      	movs	r3, #0
}
   13436:	0018      	movs	r0, r3
   13438:	46bd      	mov	sp, r7
   1343a:	b007      	add	sp, #28
   1343c:	bd90      	pop	{r4, r7, pc}
   1343e:	46c0      	nop			; (mov r8, r8)
   13440:	00016d9d 	.word	0x00016d9d
   13444:	fffbffff 	.word	0xfffbffff
   13448:	00016d3f 	.word	0x00016d3f
   1344c:	00016ce1 	.word	0x00016ce1

00013450 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13450:	b580      	push	{r7, lr}
   13452:	b082      	sub	sp, #8
   13454:	af00      	add	r7, sp, #0
   13456:	6078      	str	r0, [r7, #4]
   13458:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
   1345a:	687b      	ldr	r3, [r7, #4]
   1345c:	8b9b      	ldrh	r3, [r3, #28]
   1345e:	b29b      	uxth	r3, r3
   13460:	2b00      	cmp	r3, #0
   13462:	d001      	beq.n	13468 <i2c_master_read_packet_job+0x18>
		return STATUS_BUSY;
   13464:	2305      	movs	r3, #5
   13466:	e00c      	b.n	13482 <i2c_master_read_packet_job+0x32>
	}

	/* Make sure we send STOP */
	module->send_stop = true;
   13468:	687b      	ldr	r3, [r7, #4]
   1346a:	2201      	movs	r2, #1
   1346c:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   1346e:	687b      	ldr	r3, [r7, #4]
   13470:	2201      	movs	r2, #1
   13472:	72da      	strb	r2, [r3, #11]
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
   13474:	683a      	ldr	r2, [r7, #0]
   13476:	687b      	ldr	r3, [r7, #4]
   13478:	0011      	movs	r1, r2
   1347a:	0018      	movs	r0, r3
   1347c:	4b03      	ldr	r3, [pc, #12]	; (1348c <i2c_master_read_packet_job+0x3c>)
   1347e:	4798      	blx	r3
   13480:	0003      	movs	r3, r0
}
   13482:	0018      	movs	r0, r3
   13484:	46bd      	mov	sp, r7
   13486:	b002      	add	sp, #8
   13488:	bd80      	pop	{r7, pc}
   1348a:	46c0      	nop			; (mov r8, r8)
   1348c:	000132f9 	.word	0x000132f9

00013490 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13490:	b580      	push	{r7, lr}
   13492:	b084      	sub	sp, #16
   13494:	af00      	add	r7, sp, #0
   13496:	6078      	str	r0, [r7, #4]
   13498:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1349a:	687b      	ldr	r3, [r7, #4]
   1349c:	681b      	ldr	r3, [r3, #0]
   1349e:	60fb      	str	r3, [r7, #12]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   134a0:	683b      	ldr	r3, [r7, #0]
   134a2:	7a5b      	ldrb	r3, [r3, #9]
   134a4:	2b00      	cmp	r3, #0
   134a6:	d006      	beq.n	134b6 <_i2c_master_write_packet+0x26>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   134a8:	683b      	ldr	r3, [r7, #0]
   134aa:	7a9a      	ldrb	r2, [r3, #10]
   134ac:	687b      	ldr	r3, [r7, #4]
   134ae:	0011      	movs	r1, r2
   134b0:	0018      	movs	r0, r3
   134b2:	4b1e      	ldr	r3, [pc, #120]	; (1352c <_i2c_master_write_packet+0x9c>)
   134b4:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   134b6:	68fb      	ldr	r3, [r7, #12]
   134b8:	685b      	ldr	r3, [r3, #4]
   134ba:	4a1d      	ldr	r2, [pc, #116]	; (13530 <_i2c_master_write_packet+0xa0>)
   134bc:	401a      	ands	r2, r3
   134be:	68fb      	ldr	r3, [r7, #12]
   134c0:	605a      	str	r2, [r3, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
   134c2:	683b      	ldr	r3, [r7, #0]
   134c4:	685a      	ldr	r2, [r3, #4]
   134c6:	687b      	ldr	r3, [r7, #4]
   134c8:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   134ca:	683b      	ldr	r3, [r7, #0]
   134cc:	885a      	ldrh	r2, [r3, #2]
   134ce:	687b      	ldr	r3, [r7, #4]
   134d0:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
   134d2:	687b      	ldr	r3, [r7, #4]
   134d4:	2224      	movs	r2, #36	; 0x24
   134d6:	2100      	movs	r1, #0
   134d8:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   134da:	687b      	ldr	r3, [r7, #4]
   134dc:	2225      	movs	r2, #37	; 0x25
   134de:	2105      	movs	r1, #5
   134e0:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
   134e2:	68fb      	ldr	r3, [r7, #12]
   134e4:	2203      	movs	r2, #3
   134e6:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
   134e8:	683b      	ldr	r3, [r7, #0]
   134ea:	7a1b      	ldrb	r3, [r3, #8]
   134ec:	2b00      	cmp	r3, #0
   134ee:	d00d      	beq.n	1350c <_i2c_master_write_packet+0x7c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   134f0:	683b      	ldr	r3, [r7, #0]
   134f2:	881b      	ldrh	r3, [r3, #0]
   134f4:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   134f6:	683b      	ldr	r3, [r7, #0]
   134f8:	7a5b      	ldrb	r3, [r3, #9]
   134fa:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   134fc:	4313      	orrs	r3, r2
   134fe:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13500:	2380      	movs	r3, #128	; 0x80
   13502:	021b      	lsls	r3, r3, #8
   13504:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   13506:	68fb      	ldr	r3, [r7, #12]
   13508:	625a      	str	r2, [r3, #36]	; 0x24
   1350a:	e009      	b.n	13520 <_i2c_master_write_packet+0x90>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   1350c:	683b      	ldr	r3, [r7, #0]
   1350e:	881b      	ldrh	r3, [r3, #0]
   13510:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   13512:	683b      	ldr	r3, [r7, #0]
   13514:	7a5b      	ldrb	r3, [r3, #9]
   13516:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   13518:	4313      	orrs	r3, r2
   1351a:	001a      	movs	r2, r3
   1351c:	68fb      	ldr	r3, [r7, #12]
   1351e:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   13520:	2300      	movs	r3, #0
}
   13522:	0018      	movs	r0, r3
   13524:	46bd      	mov	sp, r7
   13526:	b004      	add	sp, #16
   13528:	bd80      	pop	{r7, pc}
   1352a:	46c0      	nop			; (mov r8, r8)
   1352c:	00016d9d 	.word	0x00016d9d
   13530:	fffbffff 	.word	0xfffbffff

00013534 <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13534:	b580      	push	{r7, lr}
   13536:	b082      	sub	sp, #8
   13538:	af00      	add	r7, sp, #0
   1353a:	6078      	str	r0, [r7, #4]
   1353c:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
   1353e:	687b      	ldr	r3, [r7, #4]
   13540:	8b9b      	ldrh	r3, [r3, #28]
   13542:	b29b      	uxth	r3, r3
   13544:	2b00      	cmp	r3, #0
   13546:	d001      	beq.n	1354c <i2c_master_write_packet_job+0x18>
		return STATUS_BUSY;
   13548:	2305      	movs	r3, #5
   1354a:	e00c      	b.n	13566 <i2c_master_write_packet_job+0x32>
	}

	/* Make sure we send STOP at end*/
	module->send_stop = true;
   1354c:	687b      	ldr	r3, [r7, #4]
   1354e:	2201      	movs	r2, #1
   13550:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   13552:	687b      	ldr	r3, [r7, #4]
   13554:	2201      	movs	r2, #1
   13556:	72da      	strb	r2, [r3, #11]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
   13558:	683a      	ldr	r2, [r7, #0]
   1355a:	687b      	ldr	r3, [r7, #4]
   1355c:	0011      	movs	r1, r2
   1355e:	0018      	movs	r0, r3
   13560:	4b03      	ldr	r3, [pc, #12]	; (13570 <i2c_master_write_packet_job+0x3c>)
   13562:	4798      	blx	r3
   13564:	0003      	movs	r3, r0
}
   13566:	0018      	movs	r0, r3
   13568:	46bd      	mov	sp, r7
   1356a:	b002      	add	sp, #8
   1356c:	bd80      	pop	{r7, pc}
   1356e:	46c0      	nop			; (mov r8, r8)
   13570:	00013491 	.word	0x00013491

00013574 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
   13574:	b580      	push	{r7, lr}
   13576:	b086      	sub	sp, #24
   13578:	af00      	add	r7, sp, #0
   1357a:	0002      	movs	r2, r0
   1357c:	1dfb      	adds	r3, r7, #7
   1357e:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
   13580:	1dfb      	adds	r3, r7, #7
   13582:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
   13584:	4b93      	ldr	r3, [pc, #588]	; (137d4 <_i2c_master_interrupt_handler+0x260>)
   13586:	0092      	lsls	r2, r2, #2
   13588:	58d3      	ldr	r3, [r2, r3]
   1358a:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1358c:	697b      	ldr	r3, [r7, #20]
   1358e:	681b      	ldr	r3, [r3, #0]
   13590:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   13592:	693b      	ldr	r3, [r7, #16]
   13594:	681b      	ldr	r3, [r3, #0]
   13596:	011b      	lsls	r3, r3, #4
   13598:	0fdb      	lsrs	r3, r3, #31
   1359a:	b2db      	uxtb	r3, r3
   1359c:	001a      	movs	r2, r3
   1359e:	230f      	movs	r3, #15
   135a0:	18fb      	adds	r3, r7, r3
   135a2:	1e51      	subs	r1, r2, #1
   135a4:	418a      	sbcs	r2, r1
   135a6:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
   135a8:	230e      	movs	r3, #14
   135aa:	18fb      	adds	r3, r7, r3
   135ac:	697a      	ldr	r2, [r7, #20]
   135ae:	7e52      	ldrb	r2, [r2, #25]
   135b0:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   135b2:	697b      	ldr	r3, [r7, #20]
   135b4:	7e1b      	ldrb	r3, [r3, #24]
   135b6:	b2da      	uxtb	r2, r3
   135b8:	230e      	movs	r3, #14
   135ba:	18fb      	adds	r3, r7, r3
   135bc:	210e      	movs	r1, #14
   135be:	1879      	adds	r1, r7, r1
   135c0:	7809      	ldrb	r1, [r1, #0]
   135c2:	400a      	ands	r2, r1
   135c4:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
   135c6:	697b      	ldr	r3, [r7, #20]
   135c8:	8b5b      	ldrh	r3, [r3, #26]
   135ca:	b29b      	uxth	r3, r3
   135cc:	2b00      	cmp	r3, #0
   135ce:	d109      	bne.n	135e4 <_i2c_master_interrupt_handler+0x70>
   135d0:	697b      	ldr	r3, [r7, #20]
   135d2:	8b9b      	ldrh	r3, [r3, #28]
   135d4:	b29b      	uxth	r3, r3
   135d6:	2b00      	cmp	r3, #0
   135d8:	d004      	beq.n	135e4 <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
   135da:	697b      	ldr	r3, [r7, #20]
   135dc:	0018      	movs	r0, r3
   135de:	4b7e      	ldr	r3, [pc, #504]	; (137d8 <_i2c_master_interrupt_handler+0x264>)
   135e0:	4798      	blx	r3
   135e2:	e070      	b.n	136c6 <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   135e4:	697b      	ldr	r3, [r7, #20]
   135e6:	8b5b      	ldrh	r3, [r3, #26]
   135e8:	b29b      	uxth	r3, r3
   135ea:	2b00      	cmp	r3, #0
   135ec:	d039      	beq.n	13662 <_i2c_master_interrupt_handler+0xee>
   135ee:	697b      	ldr	r3, [r7, #20]
   135f0:	8b9b      	ldrh	r3, [r3, #28]
   135f2:	b29b      	uxth	r3, r3
   135f4:	2b00      	cmp	r3, #0
   135f6:	d134      	bne.n	13662 <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
   135f8:	697b      	ldr	r3, [r7, #20]
   135fa:	2225      	movs	r2, #37	; 0x25
   135fc:	5c9b      	ldrb	r3, [r3, r2]
   135fe:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   13600:	2b05      	cmp	r3, #5
   13602:	d12e      	bne.n	13662 <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
   13604:	697b      	ldr	r3, [r7, #20]
   13606:	2224      	movs	r2, #36	; 0x24
   13608:	5c9b      	ldrb	r3, [r3, r2]
   1360a:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   1360c:	2b00      	cmp	r3, #0
   1360e:	d128      	bne.n	13662 <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   13610:	693b      	ldr	r3, [r7, #16]
   13612:	2203      	movs	r2, #3
   13614:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   13616:	697b      	ldr	r3, [r7, #20]
   13618:	2200      	movs	r2, #0
   1361a:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   1361c:	697b      	ldr	r3, [r7, #20]
   1361e:	2225      	movs	r2, #37	; 0x25
   13620:	2100      	movs	r1, #0
   13622:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
   13624:	697b      	ldr	r3, [r7, #20]
   13626:	7a9b      	ldrb	r3, [r3, #10]
   13628:	2b00      	cmp	r3, #0
   1362a:	d00b      	beq.n	13644 <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   1362c:	697b      	ldr	r3, [r7, #20]
   1362e:	0018      	movs	r0, r3
   13630:	4b6a      	ldr	r3, [pc, #424]	; (137dc <_i2c_master_interrupt_handler+0x268>)
   13632:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   13634:	693b      	ldr	r3, [r7, #16]
   13636:	685b      	ldr	r3, [r3, #4]
   13638:	22c0      	movs	r2, #192	; 0xc0
   1363a:	0292      	lsls	r2, r2, #10
   1363c:	431a      	orrs	r2, r3
   1363e:	693b      	ldr	r3, [r7, #16]
   13640:	605a      	str	r2, [r3, #4]
   13642:	e002      	b.n	1364a <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
   13644:	693b      	ldr	r3, [r7, #16]
   13646:	2201      	movs	r2, #1
   13648:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   1364a:	230e      	movs	r3, #14
   1364c:	18fb      	adds	r3, r7, r3
   1364e:	781b      	ldrb	r3, [r3, #0]
   13650:	2201      	movs	r2, #1
   13652:	4013      	ands	r3, r2
   13654:	d037      	beq.n	136c6 <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   13656:	697b      	ldr	r3, [r7, #20]
   13658:	68db      	ldr	r3, [r3, #12]
   1365a:	697a      	ldr	r2, [r7, #20]
   1365c:	0010      	movs	r0, r2
   1365e:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   13660:	e031      	b.n	136c6 <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
   13662:	697b      	ldr	r3, [r7, #20]
   13664:	8b5b      	ldrh	r3, [r3, #26]
   13666:	b29b      	uxth	r3, r3
   13668:	2b00      	cmp	r3, #0
   1366a:	d02c      	beq.n	136c6 <_i2c_master_interrupt_handler+0x152>
   1366c:	697b      	ldr	r3, [r7, #20]
   1366e:	8b9b      	ldrh	r3, [r3, #28]
   13670:	b29b      	uxth	r3, r3
   13672:	2b00      	cmp	r3, #0
   13674:	d027      	beq.n	136c6 <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   13676:	693b      	ldr	r3, [r7, #16]
   13678:	8b5b      	ldrh	r3, [r3, #26]
   1367a:	b29b      	uxth	r3, r3
   1367c:	001a      	movs	r2, r3
   1367e:	2320      	movs	r3, #32
   13680:	4013      	ands	r3, r2
   13682:	d111      	bne.n	136a8 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   13684:	230f      	movs	r3, #15
   13686:	18fb      	adds	r3, r7, r3
   13688:	781b      	ldrb	r3, [r3, #0]
   1368a:	2201      	movs	r2, #1
   1368c:	4053      	eors	r3, r2
   1368e:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   13690:	2b00      	cmp	r3, #0
   13692:	d104      	bne.n	1369e <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   13694:	697b      	ldr	r3, [r7, #20]
   13696:	8b9b      	ldrh	r3, [r3, #28]
   13698:	b29b      	uxth	r3, r3
   1369a:	2b01      	cmp	r3, #1
   1369c:	d004      	beq.n	136a8 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
   1369e:	697b      	ldr	r3, [r7, #20]
   136a0:	2225      	movs	r2, #37	; 0x25
   136a2:	2141      	movs	r1, #65	; 0x41
   136a4:	5499      	strb	r1, [r3, r2]
   136a6:	e00e      	b.n	136c6 <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   136a8:	697b      	ldr	r3, [r7, #20]
   136aa:	2224      	movs	r2, #36	; 0x24
   136ac:	5c9b      	ldrb	r3, [r3, r2]
   136ae:	b2db      	uxtb	r3, r3
   136b0:	2b00      	cmp	r3, #0
   136b2:	d104      	bne.n	136be <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
   136b4:	697b      	ldr	r3, [r7, #20]
   136b6:	0018      	movs	r0, r3
   136b8:	4b49      	ldr	r3, [pc, #292]	; (137e0 <_i2c_master_interrupt_handler+0x26c>)
   136ba:	4798      	blx	r3
   136bc:	e003      	b.n	136c6 <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
   136be:	697b      	ldr	r3, [r7, #20]
   136c0:	0018      	movs	r0, r3
   136c2:	4b48      	ldr	r3, [pc, #288]	; (137e4 <_i2c_master_interrupt_handler+0x270>)
   136c4:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   136c6:	697b      	ldr	r3, [r7, #20]
   136c8:	8b5b      	ldrh	r3, [r3, #26]
   136ca:	b29b      	uxth	r3, r3
   136cc:	2b00      	cmp	r3, #0
   136ce:	d047      	beq.n	13760 <_i2c_master_interrupt_handler+0x1ec>
   136d0:	697b      	ldr	r3, [r7, #20]
   136d2:	8b9b      	ldrh	r3, [r3, #28]
   136d4:	b29b      	uxth	r3, r3
   136d6:	2b00      	cmp	r3, #0
   136d8:	d142      	bne.n	13760 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
   136da:	697b      	ldr	r3, [r7, #20]
   136dc:	2225      	movs	r2, #37	; 0x25
   136de:	5c9b      	ldrb	r3, [r3, r2]
   136e0:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   136e2:	2b05      	cmp	r3, #5
   136e4:	d13c      	bne.n	13760 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
   136e6:	697b      	ldr	r3, [r7, #20]
   136e8:	2224      	movs	r2, #36	; 0x24
   136ea:	5c9b      	ldrb	r3, [r3, r2]
   136ec:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   136ee:	2b01      	cmp	r3, #1
   136f0:	d136      	bne.n	13760 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   136f2:	693b      	ldr	r3, [r7, #16]
   136f4:	7e1b      	ldrb	r3, [r3, #24]
   136f6:	b2db      	uxtb	r3, r3
   136f8:	001a      	movs	r2, r3
   136fa:	2302      	movs	r3, #2
   136fc:	4013      	ands	r3, r2
   136fe:	d002      	beq.n	13706 <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   13700:	693b      	ldr	r3, [r7, #16]
   13702:	2202      	movs	r2, #2
   13704:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   13706:	693b      	ldr	r3, [r7, #16]
   13708:	2203      	movs	r2, #3
   1370a:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
   1370c:	697b      	ldr	r3, [r7, #20]
   1370e:	2200      	movs	r2, #0
   13710:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   13712:	697b      	ldr	r3, [r7, #20]
   13714:	2225      	movs	r2, #37	; 0x25
   13716:	2100      	movs	r1, #0
   13718:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
   1371a:	230e      	movs	r3, #14
   1371c:	18fb      	adds	r3, r7, r3
   1371e:	781b      	ldrb	r3, [r3, #0]
   13720:	2202      	movs	r2, #2
   13722:	4013      	ands	r3, r2
   13724:	d00b      	beq.n	1373e <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
   13726:	697b      	ldr	r3, [r7, #20]
   13728:	2224      	movs	r2, #36	; 0x24
   1372a:	5c9b      	ldrb	r3, [r3, r2]
   1372c:	b2db      	uxtb	r3, r3
   1372e:	2b01      	cmp	r3, #1
   13730:	d105      	bne.n	1373e <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
   13732:	697b      	ldr	r3, [r7, #20]
   13734:	691b      	ldr	r3, [r3, #16]
   13736:	697a      	ldr	r2, [r7, #20]
   13738:	0010      	movs	r0, r2
   1373a:	4798      	blx	r3
   1373c:	e010      	b.n	13760 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
   1373e:	230e      	movs	r3, #14
   13740:	18fb      	adds	r3, r7, r3
   13742:	781b      	ldrb	r3, [r3, #0]
   13744:	2201      	movs	r2, #1
   13746:	4013      	ands	r3, r2
   13748:	d00a      	beq.n	13760 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
   1374a:	697b      	ldr	r3, [r7, #20]
   1374c:	2224      	movs	r2, #36	; 0x24
   1374e:	5c9b      	ldrb	r3, [r3, r2]
   13750:	b2db      	uxtb	r3, r3
   13752:	2b00      	cmp	r3, #0
   13754:	d104      	bne.n	13760 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   13756:	697b      	ldr	r3, [r7, #20]
   13758:	68db      	ldr	r3, [r3, #12]
   1375a:	697a      	ldr	r2, [r7, #20]
   1375c:	0010      	movs	r0, r2
   1375e:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
   13760:	697b      	ldr	r3, [r7, #20]
   13762:	2225      	movs	r2, #37	; 0x25
   13764:	5c9b      	ldrb	r3, [r3, r2]
   13766:	b2db      	uxtb	r3, r3
   13768:	2b05      	cmp	r3, #5
   1376a:	d02e      	beq.n	137ca <_i2c_master_interrupt_handler+0x256>
   1376c:	697b      	ldr	r3, [r7, #20]
   1376e:	2225      	movs	r2, #37	; 0x25
   13770:	5c9b      	ldrb	r3, [r3, r2]
   13772:	b2db      	uxtb	r3, r3
   13774:	2b00      	cmp	r3, #0
   13776:	d028      	beq.n	137ca <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
   13778:	693b      	ldr	r3, [r7, #16]
   1377a:	2203      	movs	r2, #3
   1377c:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   1377e:	697b      	ldr	r3, [r7, #20]
   13780:	2200      	movs	r2, #0
   13782:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
   13784:	697b      	ldr	r3, [r7, #20]
   13786:	2200      	movs	r2, #0
   13788:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   1378a:	697b      	ldr	r3, [r7, #20]
   1378c:	2225      	movs	r2, #37	; 0x25
   1378e:	5c9b      	ldrb	r3, [r3, r2]
   13790:	b2db      	uxtb	r3, r3
   13792:	2b41      	cmp	r3, #65	; 0x41
   13794:	d00e      	beq.n	137b4 <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
   13796:	697b      	ldr	r3, [r7, #20]
   13798:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   1379a:	2b00      	cmp	r3, #0
   1379c:	d00a      	beq.n	137b4 <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
   1379e:	697b      	ldr	r3, [r7, #20]
   137a0:	0018      	movs	r0, r3
   137a2:	4b0e      	ldr	r3, [pc, #56]	; (137dc <_i2c_master_interrupt_handler+0x268>)
   137a4:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
   137a6:	693b      	ldr	r3, [r7, #16]
   137a8:	685b      	ldr	r3, [r3, #4]
   137aa:	22e0      	movs	r2, #224	; 0xe0
   137ac:	02d2      	lsls	r2, r2, #11
   137ae:	431a      	orrs	r2, r3
   137b0:	693b      	ldr	r3, [r7, #16]
   137b2:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
   137b4:	230e      	movs	r3, #14
   137b6:	18fb      	adds	r3, r7, r3
   137b8:	781b      	ldrb	r3, [r3, #0]
   137ba:	2204      	movs	r2, #4
   137bc:	4013      	ands	r3, r2
   137be:	d004      	beq.n	137ca <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
   137c0:	697b      	ldr	r3, [r7, #20]
   137c2:	695b      	ldr	r3, [r3, #20]
   137c4:	697a      	ldr	r2, [r7, #20]
   137c6:	0010      	movs	r0, r2
   137c8:	4798      	blx	r3
		}
	}
}
   137ca:	46c0      	nop			; (mov r8, r8)
   137cc:	46bd      	mov	sp, r7
   137ce:	b006      	add	sp, #24
   137d0:	bd80      	pop	{r7, pc}
   137d2:	46c0      	nop			; (mov r8, r8)
   137d4:	20005bcc 	.word	0x20005bcc
   137d8:	000131f5 	.word	0x000131f5
   137dc:	00013065 	.word	0x00013065
   137e0:	00013179 	.word	0x00013179
   137e4:	00013089 	.word	0x00013089

000137e8 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
   137e8:	b580      	push	{r7, lr}
   137ea:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   137ec:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   137f0:	4b02      	ldr	r3, [pc, #8]	; (137fc <NVIC_SystemReset+0x14>)
   137f2:	4a03      	ldr	r2, [pc, #12]	; (13800 <NVIC_SystemReset+0x18>)
   137f4:	60da      	str	r2, [r3, #12]
   137f6:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
   137fa:	e7fe      	b.n	137fa <NVIC_SystemReset+0x12>
   137fc:	e000ed00 	.word	0xe000ed00
   13800:	05fa0004 	.word	0x05fa0004

00013804 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
   13804:	b580      	push	{r7, lr}
   13806:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   13808:	4b02      	ldr	r3, [pc, #8]	; (13814 <system_reset+0x10>)
   1380a:	4798      	blx	r3
}
   1380c:	46c0      	nop			; (mov r8, r8)
   1380e:	46bd      	mov	sp, r7
   13810:	bd80      	pop	{r7, pc}
   13812:	46c0      	nop			; (mov r8, r8)
   13814:	000137e9 	.word	0x000137e9

00013818 <vCommandConsoleTask>:
/******************************************************************************
 * CLI Thread
 ******************************************************************************/

void vCommandConsoleTask(void *pvParameters)
{
   13818:	b580      	push	{r7, lr}
   1381a:	b086      	sub	sp, #24
   1381c:	af00      	add	r7, sp, #0
   1381e:	6078      	str	r0, [r7, #4]
    // REGISTER COMMANDS HERE
    FreeRTOS_CLIRegisterCommand(&xOTAUCommand);
   13820:	4b9c      	ldr	r3, [pc, #624]	; (13a94 <vCommandConsoleTask+0x27c>)
   13822:	0018      	movs	r0, r3
   13824:	4b9c      	ldr	r3, [pc, #624]	; (13a98 <vCommandConsoleTask+0x280>)
   13826:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xClearScreen);
   13828:	4b9c      	ldr	r3, [pc, #624]	; (13a9c <vCommandConsoleTask+0x284>)
   1382a:	0018      	movs	r0, r3
   1382c:	4b9a      	ldr	r3, [pc, #616]	; (13a98 <vCommandConsoleTask+0x280>)
   1382e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xResetCommand);
   13830:	4b9b      	ldr	r3, [pc, #620]	; (13aa0 <vCommandConsoleTask+0x288>)
   13832:	0018      	movs	r0, r3
   13834:	4b98      	ldr	r3, [pc, #608]	; (13a98 <vCommandConsoleTask+0x280>)
   13836:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xSendTestData);
   13838:	4b9a      	ldr	r3, [pc, #616]	; (13aa4 <vCommandConsoleTask+0x28c>)
   1383a:	0018      	movs	r0, r3
   1383c:	4b96      	ldr	r3, [pc, #600]	; (13a98 <vCommandConsoleTask+0x280>)
   1383e:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xI2cScan);
   13840:	4b99      	ldr	r3, [pc, #612]	; (13aa8 <vCommandConsoleTask+0x290>)
   13842:	0018      	movs	r0, r3
   13844:	4b94      	ldr	r3, [pc, #592]	; (13a98 <vCommandConsoleTask+0x280>)
   13846:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xSendWeightData);
   13848:	4b98      	ldr	r3, [pc, #608]	; (13aac <vCommandConsoleTask+0x294>)
   1384a:	0018      	movs	r0, r3
   1384c:	4b92      	ldr	r3, [pc, #584]	; (13a98 <vCommandConsoleTask+0x280>)
   1384e:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xServoOpen);
   13850:	4b97      	ldr	r3, [pc, #604]	; (13ab0 <vCommandConsoleTask+0x298>)
   13852:	0018      	movs	r0, r3
   13854:	4b90      	ldr	r3, [pc, #576]	; (13a98 <vCommandConsoleTask+0x280>)
   13856:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xServoClose);
   13858:	4b96      	ldr	r3, [pc, #600]	; (13ab4 <vCommandConsoleTask+0x29c>)
   1385a:	0018      	movs	r0, r3
   1385c:	4b8e      	ldr	r3, [pc, #568]	; (13a98 <vCommandConsoleTask+0x280>)
   1385e:	4798      	blx	r3

    char cRxedChar[2];
    unsigned char cInputIndex = 0;
   13860:	2317      	movs	r3, #23
   13862:	18fb      	adds	r3, r7, r3
   13864:	2200      	movs	r2, #0
   13866:	701a      	strb	r2, [r3, #0]
    /* This code assumes the peripheral being used as the console has already
    been opened and configured, and is passed into the task as the task
    parameter.  Cast the task parameter to the correct type. */

    /* Send a welcome message to the user knows they are connected. */
    SerialConsoleWriteString((char *)pcWelcomeMessage);
   13868:	4b93      	ldr	r3, [pc, #588]	; (13ab8 <vCommandConsoleTask+0x2a0>)
   1386a:	0018      	movs	r0, r3
   1386c:	4b93      	ldr	r3, [pc, #588]	; (13abc <vCommandConsoleTask+0x2a4>)
   1386e:	4798      	blx	r3

    // Any semaphores/mutexes/etc you needed to be initialized, you can do them here
    cliCharReadySemaphore = xSemaphoreCreateBinary();
   13870:	2203      	movs	r2, #3
   13872:	2100      	movs	r1, #0
   13874:	2001      	movs	r0, #1
   13876:	4b92      	ldr	r3, [pc, #584]	; (13ac0 <vCommandConsoleTask+0x2a8>)
   13878:	4798      	blx	r3
   1387a:	0002      	movs	r2, r0
   1387c:	4b91      	ldr	r3, [pc, #580]	; (13ac4 <vCommandConsoleTask+0x2ac>)
   1387e:	601a      	str	r2, [r3, #0]
    if (cliCharReadySemaphore == NULL) {
   13880:	4b90      	ldr	r3, [pc, #576]	; (13ac4 <vCommandConsoleTask+0x2ac>)
   13882:	681b      	ldr	r3, [r3, #0]
   13884:	2b00      	cmp	r3, #0
   13886:	d107      	bne.n	13898 <vCommandConsoleTask+0x80>
        LogMessage(LOG_ERROR_LVL, "Could not allocate semaphore\r\n");
   13888:	4b8f      	ldr	r3, [pc, #572]	; (13ac8 <vCommandConsoleTask+0x2b0>)
   1388a:	0019      	movs	r1, r3
   1388c:	2003      	movs	r0, #3
   1388e:	4b8f      	ldr	r3, [pc, #572]	; (13acc <vCommandConsoleTask+0x2b4>)
   13890:	4798      	blx	r3
        vTaskSuspend(NULL);
   13892:	2000      	movs	r0, #0
   13894:	4b8e      	ldr	r3, [pc, #568]	; (13ad0 <vCommandConsoleTask+0x2b8>)
   13896:	4798      	blx	r3
    }

    for (;;) {
        FreeRTOS_read(&cRxedChar[0]);
   13898:	230c      	movs	r3, #12
   1389a:	18fb      	adds	r3, r7, r3
   1389c:	0018      	movs	r0, r3
   1389e:	4b8d      	ldr	r3, [pc, #564]	; (13ad4 <vCommandConsoleTask+0x2bc>)
   138a0:	4798      	blx	r3

        if (cRxedChar[0] == '\n' || cRxedChar[0] == '\r') {
   138a2:	230c      	movs	r3, #12
   138a4:	18fb      	adds	r3, r7, r3
   138a6:	781b      	ldrb	r3, [r3, #0]
   138a8:	2b0a      	cmp	r3, #10
   138aa:	d004      	beq.n	138b6 <vCommandConsoleTask+0x9e>
   138ac:	230c      	movs	r3, #12
   138ae:	18fb      	adds	r3, r7, r3
   138b0:	781b      	ldrb	r3, [r3, #0]
   138b2:	2b0d      	cmp	r3, #13
   138b4:	d137      	bne.n	13926 <vCommandConsoleTask+0x10e>
            /* A newline character was received, so the input command string is
            complete and can be processed.  Transmit a line separator, just to
            make the output easier to read. */
            SerialConsoleWriteString((char *)"\r\n");
   138b6:	4b88      	ldr	r3, [pc, #544]	; (13ad8 <vCommandConsoleTask+0x2c0>)
   138b8:	0018      	movs	r0, r3
   138ba:	4b80      	ldr	r3, [pc, #512]	; (13abc <vCommandConsoleTask+0x2a4>)
   138bc:	4798      	blx	r3
            // Copy for last command
            isEscapeCode = false;
   138be:	4b87      	ldr	r3, [pc, #540]	; (13adc <vCommandConsoleTask+0x2c4>)
   138c0:	2200      	movs	r2, #0
   138c2:	701a      	strb	r2, [r3, #0]
            pcEscapeCodePos = 0;
   138c4:	4b86      	ldr	r3, [pc, #536]	; (13ae0 <vCommandConsoleTask+0x2c8>)
   138c6:	2200      	movs	r2, #0
   138c8:	701a      	strb	r2, [r3, #0]
            strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI - 1);
   138ca:	4986      	ldr	r1, [pc, #536]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   138cc:	4b86      	ldr	r3, [pc, #536]	; (13ae8 <vCommandConsoleTask+0x2d0>)
   138ce:	2231      	movs	r2, #49	; 0x31
   138d0:	0018      	movs	r0, r3
   138d2:	4b86      	ldr	r3, [pc, #536]	; (13aec <vCommandConsoleTask+0x2d4>)
   138d4:	4798      	blx	r3
            pcLastCommand[MAX_INPUT_LENGTH_CLI - 1] = 0;  // Ensure null termination
   138d6:	4b84      	ldr	r3, [pc, #528]	; (13ae8 <vCommandConsoleTask+0x2d0>)
   138d8:	2231      	movs	r2, #49	; 0x31
   138da:	2100      	movs	r1, #0
   138dc:	5499      	strb	r1, [r3, r2]
            explanation of why this is. */
            do {
                /* Send the command string to the command interpreter.  Any
                output generated by the command interpreter will be placed in the
                pcOutputString buffer. */
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString,        /* The command string.*/
   138de:	4984      	ldr	r1, [pc, #528]	; (13af0 <vCommandConsoleTask+0x2d8>)
   138e0:	4b80      	ldr	r3, [pc, #512]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   138e2:	2264      	movs	r2, #100	; 0x64
   138e4:	0018      	movs	r0, r3
   138e6:	4b83      	ldr	r3, [pc, #524]	; (13af4 <vCommandConsoleTask+0x2dc>)
   138e8:	4798      	blx	r3
   138ea:	0003      	movs	r3, r0
   138ec:	613b      	str	r3, [r7, #16]
                );

                /* Write the output generated by the command interpreter to the
                console. */
                // Ensure it is null terminated
                pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
   138ee:	4b80      	ldr	r3, [pc, #512]	; (13af0 <vCommandConsoleTask+0x2d8>)
   138f0:	2263      	movs	r2, #99	; 0x63
   138f2:	2100      	movs	r1, #0
   138f4:	5499      	strb	r1, [r3, r2]
                SerialConsoleWriteString(pcOutputString);
   138f6:	4b7e      	ldr	r3, [pc, #504]	; (13af0 <vCommandConsoleTask+0x2d8>)
   138f8:	0018      	movs	r0, r3
   138fa:	4b70      	ldr	r3, [pc, #448]	; (13abc <vCommandConsoleTask+0x2a4>)
   138fc:	4798      	blx	r3

            } while (xMoreDataToFollow != pdFALSE);
   138fe:	693b      	ldr	r3, [r7, #16]
   13900:	2b00      	cmp	r3, #0
   13902:	d1ec      	bne.n	138de <vCommandConsoleTask+0xc6>

            /* All the strings generated by the input command have been sent.
            Processing of the command is complete.  Clear the input string ready
            to receive the next command. */
            cInputIndex = 0;
   13904:	2317      	movs	r3, #23
   13906:	18fb      	adds	r3, r7, r3
   13908:	2200      	movs	r2, #0
   1390a:	701a      	strb	r2, [r3, #0]
            memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   1390c:	4b75      	ldr	r3, [pc, #468]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   1390e:	2232      	movs	r2, #50	; 0x32
   13910:	2100      	movs	r1, #0
   13912:	0018      	movs	r0, r3
   13914:	4b78      	ldr	r3, [pc, #480]	; (13af8 <vCommandConsoleTask+0x2e0>)
   13916:	4798      	blx	r3
            memset(pcOutputString, 0, MAX_OUTPUT_LENGTH_CLI);
   13918:	4b75      	ldr	r3, [pc, #468]	; (13af0 <vCommandConsoleTask+0x2d8>)
   1391a:	2264      	movs	r2, #100	; 0x64
   1391c:	2100      	movs	r1, #0
   1391e:	0018      	movs	r0, r3
   13920:	4b75      	ldr	r3, [pc, #468]	; (13af8 <vCommandConsoleTask+0x2e0>)
   13922:	4798      	blx	r3
   13924:	e0b5      	b.n	13a92 <vCommandConsoleTask+0x27a>
        } else {
            /* The if() clause performs the processing after a newline character
is received.  This else clause performs the processing if any other
character is received. */

            if (true == isEscapeCode) {
   13926:	4b6d      	ldr	r3, [pc, #436]	; (13adc <vCommandConsoleTask+0x2c4>)
   13928:	781b      	ldrb	r3, [r3, #0]
   1392a:	2b00      	cmp	r3, #0
   1392c:	d059      	beq.n	139e2 <vCommandConsoleTask+0x1ca>
                if (pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
   1392e:	4b6c      	ldr	r3, [pc, #432]	; (13ae0 <vCommandConsoleTask+0x2c8>)
   13930:	781b      	ldrb	r3, [r3, #0]
   13932:	2b03      	cmp	r3, #3
   13934:	d80c      	bhi.n	13950 <vCommandConsoleTask+0x138>
                    pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
   13936:	4b6a      	ldr	r3, [pc, #424]	; (13ae0 <vCommandConsoleTask+0x2c8>)
   13938:	781b      	ldrb	r3, [r3, #0]
   1393a:	1c5a      	adds	r2, r3, #1
   1393c:	b2d1      	uxtb	r1, r2
   1393e:	4a68      	ldr	r2, [pc, #416]	; (13ae0 <vCommandConsoleTask+0x2c8>)
   13940:	7011      	strb	r1, [r2, #0]
   13942:	001a      	movs	r2, r3
   13944:	230c      	movs	r3, #12
   13946:	18fb      	adds	r3, r7, r3
   13948:	7819      	ldrb	r1, [r3, #0]
   1394a:	4b6c      	ldr	r3, [pc, #432]	; (13afc <vCommandConsoleTask+0x2e4>)
   1394c:	5499      	strb	r1, [r3, r2]
   1394e:	e005      	b.n	1395c <vCommandConsoleTask+0x144>
                } else {
                    isEscapeCode = false;
   13950:	4b62      	ldr	r3, [pc, #392]	; (13adc <vCommandConsoleTask+0x2c4>)
   13952:	2200      	movs	r2, #0
   13954:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   13956:	4b62      	ldr	r3, [pc, #392]	; (13ae0 <vCommandConsoleTask+0x2c8>)
   13958:	2200      	movs	r2, #0
   1395a:	701a      	strb	r2, [r3, #0]
                }

                if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
   1395c:	4b60      	ldr	r3, [pc, #384]	; (13ae0 <vCommandConsoleTask+0x2c8>)
   1395e:	781b      	ldrb	r3, [r3, #0]
   13960:	2b01      	cmp	r3, #1
   13962:	d999      	bls.n	13898 <vCommandConsoleTask+0x80>
                    // UP ARROW SHOW LAST COMMAND
                    if (strcasecmp(pcEscapeCodes, "oa")) {
   13964:	4a66      	ldr	r2, [pc, #408]	; (13b00 <vCommandConsoleTask+0x2e8>)
   13966:	4b65      	ldr	r3, [pc, #404]	; (13afc <vCommandConsoleTask+0x2e4>)
   13968:	0011      	movs	r1, r2
   1396a:	0018      	movs	r0, r3
   1396c:	4b65      	ldr	r3, [pc, #404]	; (13b04 <vCommandConsoleTask+0x2ec>)
   1396e:	4798      	blx	r3
   13970:	1e03      	subs	r3, r0, #0
   13972:	d02f      	beq.n	139d4 <vCommandConsoleTask+0x1bc>
                        /// Delete current line and add prompt (">")
                        sprintf(pcInputString, "%c[2K\r>", 27);
   13974:	4964      	ldr	r1, [pc, #400]	; (13b08 <vCommandConsoleTask+0x2f0>)
   13976:	4b5b      	ldr	r3, [pc, #364]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   13978:	221b      	movs	r2, #27
   1397a:	0018      	movs	r0, r3
   1397c:	4b63      	ldr	r3, [pc, #396]	; (13b0c <vCommandConsoleTask+0x2f4>)
   1397e:	4798      	blx	r3
                        SerialConsoleWriteString((char *)pcInputString);
   13980:	4b58      	ldr	r3, [pc, #352]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   13982:	0018      	movs	r0, r3
   13984:	4b4d      	ldr	r3, [pc, #308]	; (13abc <vCommandConsoleTask+0x2a4>)
   13986:	4798      	blx	r3
                        /// Clear input buffer
                        cInputIndex = 0;
   13988:	2317      	movs	r3, #23
   1398a:	18fb      	adds	r3, r7, r3
   1398c:	2200      	movs	r2, #0
   1398e:	701a      	strb	r2, [r3, #0]
                        memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   13990:	4b54      	ldr	r3, [pc, #336]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   13992:	2232      	movs	r2, #50	; 0x32
   13994:	2100      	movs	r1, #0
   13996:	0018      	movs	r0, r3
   13998:	4b57      	ldr	r3, [pc, #348]	; (13af8 <vCommandConsoleTask+0x2e0>)
   1399a:	4798      	blx	r3
                        /// Send last command
                        strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1);
   1399c:	4952      	ldr	r1, [pc, #328]	; (13ae8 <vCommandConsoleTask+0x2d0>)
   1399e:	4b51      	ldr	r3, [pc, #324]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   139a0:	2231      	movs	r2, #49	; 0x31
   139a2:	0018      	movs	r0, r3
   139a4:	4b51      	ldr	r3, [pc, #324]	; (13aec <vCommandConsoleTask+0x2d4>)
   139a6:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
   139a8:	4b4e      	ldr	r3, [pc, #312]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   139aa:	0018      	movs	r0, r3
   139ac:	4b58      	ldr	r3, [pc, #352]	; (13b10 <vCommandConsoleTask+0x2f8>)
   139ae:	4798      	blx	r3
   139b0:	0003      	movs	r3, r0
   139b2:	2b30      	cmp	r3, #48	; 0x30
   139b4:	d806      	bhi.n	139c4 <vCommandConsoleTask+0x1ac>
   139b6:	4b4c      	ldr	r3, [pc, #304]	; (13ae8 <vCommandConsoleTask+0x2d0>)
   139b8:	0018      	movs	r0, r3
   139ba:	4b55      	ldr	r3, [pc, #340]	; (13b10 <vCommandConsoleTask+0x2f8>)
   139bc:	4798      	blx	r3
   139be:	0003      	movs	r3, r0
   139c0:	b2da      	uxtb	r2, r3
   139c2:	e000      	b.n	139c6 <vCommandConsoleTask+0x1ae>
   139c4:	2231      	movs	r2, #49	; 0x31
   139c6:	2317      	movs	r3, #23
   139c8:	18fb      	adds	r3, r7, r3
   139ca:	701a      	strb	r2, [r3, #0]
                        SerialConsoleWriteString(pcInputString);
   139cc:	4b45      	ldr	r3, [pc, #276]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   139ce:	0018      	movs	r0, r3
   139d0:	4b3a      	ldr	r3, [pc, #232]	; (13abc <vCommandConsoleTask+0x2a4>)
   139d2:	4798      	blx	r3
                    }

                    isEscapeCode = false;
   139d4:	4b41      	ldr	r3, [pc, #260]	; (13adc <vCommandConsoleTask+0x2c4>)
   139d6:	2200      	movs	r2, #0
   139d8:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   139da:	4b41      	ldr	r3, [pc, #260]	; (13ae0 <vCommandConsoleTask+0x2c8>)
   139dc:	2200      	movs	r2, #0
   139de:	701a      	strb	r2, [r3, #0]
   139e0:	e75a      	b.n	13898 <vCommandConsoleTask+0x80>
            }
            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */

            else if (cRxedChar[0] == '\r') {
   139e2:	230c      	movs	r3, #12
   139e4:	18fb      	adds	r3, r7, r3
   139e6:	781b      	ldrb	r3, [r3, #0]
   139e8:	2b0d      	cmp	r3, #13
   139ea:	d100      	bne.n	139ee <vCommandConsoleTask+0x1d6>
   139ec:	e754      	b.n	13898 <vCommandConsoleTask+0x80>
                /* Ignore carriage returns. */
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   139ee:	230c      	movs	r3, #12
   139f0:	18fb      	adds	r3, r7, r3
   139f2:	781b      	ldrb	r3, [r3, #0]
   139f4:	2b08      	cmp	r3, #8
   139f6:	d004      	beq.n	13a02 <vCommandConsoleTask+0x1ea>
   139f8:	230c      	movs	r3, #12
   139fa:	18fb      	adds	r3, r7, r3
   139fc:	781b      	ldrb	r3, [r3, #0]
   139fe:	2b7f      	cmp	r3, #127	; 0x7f
   13a00:	d11c      	bne.n	13a3c <vCommandConsoleTask+0x224>
                char erase[4] = {0x08, 0x20, 0x08, 0x00};
   13a02:	2308      	movs	r3, #8
   13a04:	18fb      	adds	r3, r7, r3
   13a06:	4a43      	ldr	r2, [pc, #268]	; (13b14 <vCommandConsoleTask+0x2fc>)
   13a08:	6812      	ldr	r2, [r2, #0]
   13a0a:	601a      	str	r2, [r3, #0]
                SerialConsoleWriteString(erase);
   13a0c:	2308      	movs	r3, #8
   13a0e:	18fb      	adds	r3, r7, r3
   13a10:	0018      	movs	r0, r3
   13a12:	4b2a      	ldr	r3, [pc, #168]	; (13abc <vCommandConsoleTask+0x2a4>)
   13a14:	4798      	blx	r3
                /* Backspace was pressed.  Erase the last character in the input
                buffer - if there are any. */
                if (cInputIndex > 0) {
   13a16:	2317      	movs	r3, #23
   13a18:	18fb      	adds	r3, r7, r3
   13a1a:	781b      	ldrb	r3, [r3, #0]
   13a1c:	2b00      	cmp	r3, #0
   13a1e:	d037      	beq.n	13a90 <vCommandConsoleTask+0x278>
                    cInputIndex--;
   13a20:	2317      	movs	r3, #23
   13a22:	18fb      	adds	r3, r7, r3
   13a24:	781a      	ldrb	r2, [r3, #0]
   13a26:	2317      	movs	r3, #23
   13a28:	18fb      	adds	r3, r7, r3
   13a2a:	3a01      	subs	r2, #1
   13a2c:	701a      	strb	r2, [r3, #0]
                    pcInputString[cInputIndex] = 0;
   13a2e:	2317      	movs	r3, #23
   13a30:	18fb      	adds	r3, r7, r3
   13a32:	781b      	ldrb	r3, [r3, #0]
   13a34:	4a2b      	ldr	r2, [pc, #172]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   13a36:	2100      	movs	r1, #0
   13a38:	54d1      	strb	r1, [r2, r3]
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   13a3a:	e029      	b.n	13a90 <vCommandConsoleTask+0x278>
                }
            }
            // ESC
            else if (cRxedChar[0] == ASCII_ESC) {
   13a3c:	230c      	movs	r3, #12
   13a3e:	18fb      	adds	r3, r7, r3
   13a40:	781b      	ldrb	r3, [r3, #0]
   13a42:	2b1b      	cmp	r3, #27
   13a44:	d106      	bne.n	13a54 <vCommandConsoleTask+0x23c>
                isEscapeCode = true;  // Next characters will be code arguments
   13a46:	4b25      	ldr	r3, [pc, #148]	; (13adc <vCommandConsoleTask+0x2c4>)
   13a48:	2201      	movs	r2, #1
   13a4a:	701a      	strb	r2, [r3, #0]
                pcEscapeCodePos = 0;
   13a4c:	4b24      	ldr	r3, [pc, #144]	; (13ae0 <vCommandConsoleTask+0x2c8>)
   13a4e:	2200      	movs	r2, #0
   13a50:	701a      	strb	r2, [r3, #0]
   13a52:	e721      	b.n	13898 <vCommandConsoleTask+0x80>
            } else {
                /* A character was entered.  It was not a new line, backspace
                or carriage return, so it is accepted as part of the input and
                placed into the input buffer.  When a n is entered the complete
                string will be passed to the command interpreter. */
                if (cInputIndex < MAX_INPUT_LENGTH_CLI) {
   13a54:	2317      	movs	r3, #23
   13a56:	18fb      	adds	r3, r7, r3
   13a58:	781b      	ldrb	r3, [r3, #0]
   13a5a:	2b31      	cmp	r3, #49	; 0x31
   13a5c:	d80e      	bhi.n	13a7c <vCommandConsoleTask+0x264>
                    pcInputString[cInputIndex] = cRxedChar[0];
   13a5e:	2317      	movs	r3, #23
   13a60:	18fb      	adds	r3, r7, r3
   13a62:	781b      	ldrb	r3, [r3, #0]
   13a64:	220c      	movs	r2, #12
   13a66:	18ba      	adds	r2, r7, r2
   13a68:	7811      	ldrb	r1, [r2, #0]
   13a6a:	4a1e      	ldr	r2, [pc, #120]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   13a6c:	54d1      	strb	r1, [r2, r3]
                    cInputIndex++;
   13a6e:	2317      	movs	r3, #23
   13a70:	18fb      	adds	r3, r7, r3
   13a72:	781a      	ldrb	r2, [r3, #0]
   13a74:	2317      	movs	r3, #23
   13a76:	18fb      	adds	r3, r7, r3
   13a78:	3201      	adds	r2, #1
   13a7a:	701a      	strb	r2, [r3, #0]
                }

                // Order Echo
                cRxedChar[1] = 0;
   13a7c:	230c      	movs	r3, #12
   13a7e:	18fb      	adds	r3, r7, r3
   13a80:	2200      	movs	r2, #0
   13a82:	705a      	strb	r2, [r3, #1]
                SerialConsoleWriteString(&cRxedChar[0]);
   13a84:	230c      	movs	r3, #12
   13a86:	18fb      	adds	r3, r7, r3
   13a88:	0018      	movs	r0, r3
   13a8a:	4b0c      	ldr	r3, [pc, #48]	; (13abc <vCommandConsoleTask+0x2a4>)
   13a8c:	4798      	blx	r3
   13a8e:	e703      	b.n	13898 <vCommandConsoleTask+0x80>
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   13a90:	46c0      	nop			; (mov r8, r8)
        FreeRTOS_read(&cRxedChar[0]);
   13a92:	e701      	b.n	13898 <vCommandConsoleTask+0x80>
   13a94:	00035e58 	.word	0x00035e58
   13a98:	00016ee5 	.word	0x00016ee5
   13a9c:	00035ec8 	.word	0x00035ec8
   13aa0:	00035e68 	.word	0x00035e68
   13aa4:	00035e88 	.word	0x00035e88
   13aa8:	00035e78 	.word	0x00035e78
   13aac:	00035e98 	.word	0x00035e98
   13ab0:	00035ea8 	.word	0x00035ea8
   13ab4:	00035eb8 	.word	0x00035eb8
   13ab8:	00035c34 	.word	0x00035c34
   13abc:	0001ce05 	.word	0x0001ce05
   13ac0:	000194a5 	.word	0x000194a5
   13ac4:	200047a0 	.word	0x200047a0
   13ac8:	00035d84 	.word	0x00035d84
   13acc:	0001cef1 	.word	0x0001cef1
   13ad0:	0001b291 	.word	0x0001b291
   13ad4:	00013b19 	.word	0x00013b19
   13ad8:	00035da4 	.word	0x00035da4
   13adc:	20000504 	.word	0x20000504
   13ae0:	20000505 	.word	0x20000505
   13ae4:	2000053c 	.word	0x2000053c
   13ae8:	20000508 	.word	0x20000508
   13aec:	000349ab 	.word	0x000349ab
   13af0:	20000570 	.word	0x20000570
   13af4:	00016f55 	.word	0x00016f55
   13af8:	000345df 	.word	0x000345df
   13afc:	200005d4 	.word	0x200005d4
   13b00:	00035da8 	.word	0x00035da8
   13b04:	000348e1 	.word	0x000348e1
   13b08:	00035dac 	.word	0x00035dac
   13b0c:	0003489d 	.word	0x0003489d
   13b10:	0003497b 	.word	0x0003497b
   13b14:	00035db4 	.word	0x00035db4

00013b18 <FreeRTOS_read>:
 * @brief		This function block the thread unless we received a character
 * @details		This function blocks until UartSemaphoreHandle is released to continue reading characters in CLI
 * @note
 */
static void FreeRTOS_read(char *character)
{
   13b18:	b580      	push	{r7, lr}
   13b1a:	b084      	sub	sp, #16
   13b1c:	af00      	add	r7, sp, #0
   13b1e:	6078      	str	r0, [r7, #4]
    // We check if there are more characters in the buffer that arrived since the last time
    // This function returns -1 if the buffer is empty, other value otherwise
    int ret = SerialConsoleReadCharacter((uint8_t *)character);
   13b20:	687b      	ldr	r3, [r7, #4]
   13b22:	0018      	movs	r0, r3
   13b24:	4b0c      	ldr	r3, [pc, #48]	; (13b58 <FreeRTOS_read+0x40>)
   13b26:	4798      	blx	r3
   13b28:	0003      	movs	r3, r0
   13b2a:	60fb      	str	r3, [r7, #12]

    while (ret == -1) {
   13b2c:	e00d      	b.n	13b4a <FreeRTOS_read+0x32>
        // there are no more characters - block the thread until we receive a semaphore indicating reception of at least 1 character
        xSemaphoreTake(cliCharReadySemaphore, portMAX_DELAY);
   13b2e:	4b0b      	ldr	r3, [pc, #44]	; (13b5c <FreeRTOS_read+0x44>)
   13b30:	681a      	ldr	r2, [r3, #0]
   13b32:	2301      	movs	r3, #1
   13b34:	425b      	negs	r3, r3
   13b36:	0019      	movs	r1, r3
   13b38:	0010      	movs	r0, r2
   13b3a:	4b09      	ldr	r3, [pc, #36]	; (13b60 <FreeRTOS_read+0x48>)
   13b3c:	4798      	blx	r3

        // If we are here it means there are characters in the buffer - we re-read from the buffer to get the newly acquired character
        ret = SerialConsoleReadCharacter((uint8_t *)character);
   13b3e:	687b      	ldr	r3, [r7, #4]
   13b40:	0018      	movs	r0, r3
   13b42:	4b05      	ldr	r3, [pc, #20]	; (13b58 <FreeRTOS_read+0x40>)
   13b44:	4798      	blx	r3
   13b46:	0003      	movs	r3, r0
   13b48:	60fb      	str	r3, [r7, #12]
    while (ret == -1) {
   13b4a:	68fb      	ldr	r3, [r7, #12]
   13b4c:	3301      	adds	r3, #1
   13b4e:	d0ee      	beq.n	13b2e <FreeRTOS_read+0x16>
    }
}
   13b50:	46c0      	nop			; (mov r8, r8)
   13b52:	46bd      	mov	sp, r7
   13b54:	b004      	add	sp, #16
   13b56:	bd80      	pop	{r7, pc}
   13b58:	0001cea1 	.word	0x0001cea1
   13b5c:	200047a0 	.word	0x200047a0
   13b60:	0001a45d 	.word	0x0001a45d

00013b64 <CliCharReadySemaphoreGiveFromISR>:
 * @brief		Give cliCharReadySemaphore binary semaphore from an ISR
 * @details
 * @note
 */
void CliCharReadySemaphoreGiveFromISR(void)
{
   13b64:	b580      	push	{r7, lr}
   13b66:	af00      	add	r7, sp, #0
    static BaseType_t xHigherPriorityTaskWoken;
    xHigherPriorityTaskWoken = pdFALSE;
   13b68:	4b0a      	ldr	r3, [pc, #40]	; (13b94 <CliCharReadySemaphoreGiveFromISR+0x30>)
   13b6a:	2200      	movs	r2, #0
   13b6c:	601a      	str	r2, [r3, #0]
    xSemaphoreGiveFromISR(cliCharReadySemaphore, &xHigherPriorityTaskWoken);
   13b6e:	4b0a      	ldr	r3, [pc, #40]	; (13b98 <CliCharReadySemaphoreGiveFromISR+0x34>)
   13b70:	681b      	ldr	r3, [r3, #0]
   13b72:	4a08      	ldr	r2, [pc, #32]	; (13b94 <CliCharReadySemaphoreGiveFromISR+0x30>)
   13b74:	0011      	movs	r1, r2
   13b76:	0018      	movs	r0, r3
   13b78:	4b08      	ldr	r3, [pc, #32]	; (13b9c <CliCharReadySemaphoreGiveFromISR+0x38>)
   13b7a:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   13b7c:	4b05      	ldr	r3, [pc, #20]	; (13b94 <CliCharReadySemaphoreGiveFromISR+0x30>)
   13b7e:	681b      	ldr	r3, [r3, #0]
   13b80:	2b00      	cmp	r3, #0
   13b82:	d003      	beq.n	13b8c <CliCharReadySemaphoreGiveFromISR+0x28>
   13b84:	4b06      	ldr	r3, [pc, #24]	; (13ba0 <CliCharReadySemaphoreGiveFromISR+0x3c>)
   13b86:	2280      	movs	r2, #128	; 0x80
   13b88:	0552      	lsls	r2, r2, #21
   13b8a:	601a      	str	r2, [r3, #0]
}
   13b8c:	46c0      	nop			; (mov r8, r8)
   13b8e:	46bd      	mov	sp, r7
   13b90:	bd80      	pop	{r7, pc}
   13b92:	46c0      	nop			; (mov r8, r8)
   13b94:	200005d8 	.word	0x200005d8
   13b98:	200047a0 	.word	0x200047a0
   13b9c:	00019dd5 	.word	0x00019dd5
   13ba0:	e000ed04 	.word	0xe000ed04

00013ba4 <xCliClearTerminalScreen>:
// THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
// SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
// CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen(char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13ba4:	b590      	push	{r4, r7, lr}
   13ba6:	b087      	sub	sp, #28
   13ba8:	af00      	add	r7, sp, #0
   13baa:	60f8      	str	r0, [r7, #12]
   13bac:	60b9      	str	r1, [r7, #8]
   13bae:	607a      	str	r2, [r7, #4]
    char clearScreen = ASCII_ESC;
   13bb0:	2317      	movs	r3, #23
   13bb2:	18fb      	adds	r3, r7, r3
   13bb4:	221b      	movs	r2, #27
   13bb6:	701a      	strb	r2, [r3, #0]
    snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
   13bb8:	2317      	movs	r3, #23
   13bba:	18fb      	adds	r3, r7, r3
   13bbc:	781b      	ldrb	r3, [r3, #0]
   13bbe:	4a08      	ldr	r2, [pc, #32]	; (13be0 <xCliClearTerminalScreen+0x3c>)
   13bc0:	4808      	ldr	r0, [pc, #32]	; (13be4 <xCliClearTerminalScreen+0x40>)
   13bc2:	210f      	movs	r1, #15
   13bc4:	4c08      	ldr	r4, [pc, #32]	; (13be8 <xCliClearTerminalScreen+0x44>)
   13bc6:	47a0      	blx	r4
    snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
   13bc8:	4a06      	ldr	r2, [pc, #24]	; (13be4 <xCliClearTerminalScreen+0x40>)
   13bca:	68b9      	ldr	r1, [r7, #8]
   13bcc:	68fb      	ldr	r3, [r7, #12]
   13bce:	0018      	movs	r0, r3
   13bd0:	4b05      	ldr	r3, [pc, #20]	; (13be8 <xCliClearTerminalScreen+0x44>)
   13bd2:	4798      	blx	r3
    return pdFALSE;
   13bd4:	2300      	movs	r3, #0
}
   13bd6:	0018      	movs	r0, r3
   13bd8:	46bd      	mov	sp, r7
   13bda:	b007      	add	sp, #28
   13bdc:	bd90      	pop	{r4, r7, pc}
   13bde:	46c0      	nop			; (mov r8, r8)
   13be0:	00035db8 	.word	0x00035db8
   13be4:	200004f4 	.word	0x200004f4
   13be8:	00034839 	.word	0x00034839

00013bec <CLI_OTAU>:

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_OTAU(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13bec:	b580      	push	{r7, lr}
   13bee:	b084      	sub	sp, #16
   13bf0:	af00      	add	r7, sp, #0
   13bf2:	60f8      	str	r0, [r7, #12]
   13bf4:	60b9      	str	r1, [r7, #8]
   13bf6:	607a      	str	r2, [r7, #4]
    WifiHandlerSetState(WIFI_DOWNLOAD_INIT);
   13bf8:	2002      	movs	r0, #2
   13bfa:	4b03      	ldr	r3, [pc, #12]	; (13c08 <CLI_OTAU+0x1c>)
   13bfc:	4798      	blx	r3

    return pdFALSE;
   13bfe:	2300      	movs	r3, #0
}
   13c00:	0018      	movs	r0, r3
   13c02:	46bd      	mov	sp, r7
   13c04:	b004      	add	sp, #16
   13c06:	bd80      	pop	{r7, pc}
   13c08:	000164f5 	.word	0x000164f5

00013c0c <CLI_ResetDevice>:

// Example CLI Command. Resets system.
BaseType_t CLI_ResetDevice(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13c0c:	b580      	push	{r7, lr}
   13c0e:	b084      	sub	sp, #16
   13c10:	af00      	add	r7, sp, #0
   13c12:	60f8      	str	r0, [r7, #12]
   13c14:	60b9      	str	r1, [r7, #8]
   13c16:	607a      	str	r2, [r7, #4]
    system_reset();
   13c18:	4b03      	ldr	r3, [pc, #12]	; (13c28 <CLI_ResetDevice+0x1c>)
   13c1a:	4798      	blx	r3
    return pdFALSE;
   13c1c:	2300      	movs	r3, #0
}
   13c1e:	0018      	movs	r0, r3
   13c20:	46bd      	mov	sp, r7
   13c22:	b004      	add	sp, #16
   13c24:	bd80      	pop	{r7, pc}
   13c26:	46c0      	nop			; (mov r8, r8)
   13c28:	00013805 	.word	0x00013805

00013c2c <CLI_SendTestData>:



BaseType_t CLI_SendTestData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13c2c:	b580      	push	{r7, lr}
   13c2e:	b086      	sub	sp, #24
   13c30:	af00      	add	r7, sp, #0
   13c32:	60f8      	str	r0, [r7, #12]
   13c34:	60b9      	str	r1, [r7, #8]
   13c36:	607a      	str	r2, [r7, #4]
	struct TestPacket testvar;

	testvar.test = 6;
   13c38:	2310      	movs	r3, #16
   13c3a:	18fb      	adds	r3, r7, r3
   13c3c:	2206      	movs	r2, #6
   13c3e:	701a      	strb	r2, [r3, #0]

	int error = WifiAddTestDataToQueue(&testvar);
   13c40:	2310      	movs	r3, #16
   13c42:	18fb      	adds	r3, r7, r3
   13c44:	0018      	movs	r0, r3
   13c46:	4b09      	ldr	r3, [pc, #36]	; (13c6c <CLI_SendTestData+0x40>)
   13c48:	4798      	blx	r3
   13c4a:	0003      	movs	r3, r0
   13c4c:	617b      	str	r3, [r7, #20]
	if (error == pdTRUE) {
   13c4e:	697b      	ldr	r3, [r7, #20]
   13c50:	2b01      	cmp	r3, #1
   13c52:	d105      	bne.n	13c60 <CLI_SendTestData+0x34>
		snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Test Data MQTT Post\r\n");
   13c54:	4a06      	ldr	r2, [pc, #24]	; (13c70 <CLI_SendTestData+0x44>)
   13c56:	68b9      	ldr	r1, [r7, #8]
   13c58:	68fb      	ldr	r3, [r7, #12]
   13c5a:	0018      	movs	r0, r3
   13c5c:	4b05      	ldr	r3, [pc, #20]	; (13c74 <CLI_SendTestData+0x48>)
   13c5e:	4798      	blx	r3
	}
	return pdFALSE;
   13c60:	2300      	movs	r3, #0
}
   13c62:	0018      	movs	r0, r3
   13c64:	46bd      	mov	sp, r7
   13c66:	b006      	add	sp, #24
   13c68:	bd80      	pop	{r7, pc}
   13c6a:	46c0      	nop			; (mov r8, r8)
   13c6c:	00016529 	.word	0x00016529
   13c70:	00035dc0 	.word	0x00035dc0
   13c74:	00034839 	.word	0x00034839

00013c78 <CLI_ServoOpen>:

BaseType_t CLI_ServoOpen(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13c78:	b580      	push	{r7, lr}
   13c7a:	b084      	sub	sp, #16
   13c7c:	af00      	add	r7, sp, #0
   13c7e:	60f8      	str	r0, [r7, #12]
   13c80:	60b9      	str	r1, [r7, #8]
   13c82:	607a      	str	r2, [r7, #4]
	servo_setDuty(2);	
   13c84:	2002      	movs	r0, #2
   13c86:	4b03      	ldr	r3, [pc, #12]	; (13c94 <CLI_ServoOpen+0x1c>)
   13c88:	4798      	blx	r3
	return pdFALSE;
   13c8a:	2300      	movs	r3, #0
}
   13c8c:	0018      	movs	r0, r3
   13c8e:	46bd      	mov	sp, r7
   13c90:	b004      	add	sp, #16
   13c92:	bd80      	pop	{r7, pc}
   13c94:	00014d59 	.word	0x00014d59

00013c98 <CLI_ServoClose>:

BaseType_t CLI_ServoClose(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13c98:	b580      	push	{r7, lr}
   13c9a:	b084      	sub	sp, #16
   13c9c:	af00      	add	r7, sp, #0
   13c9e:	60f8      	str	r0, [r7, #12]
   13ca0:	60b9      	str	r1, [r7, #8]
   13ca2:	607a      	str	r2, [r7, #4]
	servo_setDuty(3);
   13ca4:	2003      	movs	r0, #3
   13ca6:	4b03      	ldr	r3, [pc, #12]	; (13cb4 <CLI_ServoClose+0x1c>)
   13ca8:	4798      	blx	r3
	return pdFALSE;
   13caa:	2300      	movs	r3, #0
}
   13cac:	0018      	movs	r0, r3
   13cae:	46bd      	mov	sp, r7
   13cb0:	b004      	add	sp, #16
   13cb2:	bd80      	pop	{r7, pc}
   13cb4:	00014d59 	.word	0x00014d59

00013cb8 <CLI_SendWeightData>:

BaseType_t CLI_SendWeightData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13cb8:	b590      	push	{r4, r7, lr}
   13cba:	b0ab      	sub	sp, #172	; 0xac
   13cbc:	af00      	add	r7, sp, #0
   13cbe:	60f8      	str	r0, [r7, #12]
   13cc0:	60b9      	str	r1, [r7, #8]
   13cc2:	607a      	str	r2, [r7, #4]
	struct NauPacket nauvar;
	ADCchip_Init();
   13cc4:	4b33      	ldr	r3, [pc, #204]	; (13d94 <CLI_SendWeightData+0xdc>)
   13cc6:	4798      	blx	r3
	ADC_StartConversion();
   13cc8:	4b33      	ldr	r3, [pc, #204]	; (13d98 <CLI_SendWeightData+0xe0>)
   13cca:	4798      	blx	r3
	
	
	while ((ADC_ReadReg(PU_CTRL_ADDR)&CR_Msk) != CR_DATA_RDY);
   13ccc:	46c0      	nop			; (mov r8, r8)
   13cce:	2000      	movs	r0, #0
   13cd0:	4b32      	ldr	r3, [pc, #200]	; (13d9c <CLI_SendWeightData+0xe4>)
   13cd2:	4798      	blx	r3
   13cd4:	0003      	movs	r3, r0
   13cd6:	001a      	movs	r2, r3
   13cd8:	2320      	movs	r3, #32
   13cda:	4013      	ands	r3, r2
   13cdc:	2b20      	cmp	r3, #32
   13cde:	d1f6      	bne.n	13cce <CLI_SendWeightData+0x16>
	uint32_t ADC_value=ADC_Read_Conversion_Data();
   13ce0:	4b2f      	ldr	r3, [pc, #188]	; (13da0 <CLI_SendWeightData+0xe8>)
   13ce2:	4798      	blx	r3
   13ce4:	0003      	movs	r3, r0
   13ce6:	22a4      	movs	r2, #164	; 0xa4
   13ce8:	18ba      	adds	r2, r7, r2
   13cea:	6013      	str	r3, [r2, #0]
	int ADC_Array[2];
	
	//int i32ConversionData = (int)(ADC_value << 8);
	///* Shift the number back right to recover its intended magnitude */
	//i32ConversionData = (i32ConversionData >> 8);
	Value_conversion(ADC_value,ADC_Array);
   13cec:	23a4      	movs	r3, #164	; 0xa4
   13cee:	18fb      	adds	r3, r7, r3
   13cf0:	681b      	ldr	r3, [r3, #0]
   13cf2:	2290      	movs	r2, #144	; 0x90
   13cf4:	18ba      	adds	r2, r7, r2
   13cf6:	0011      	movs	r1, r2
   13cf8:	0018      	movs	r0, r3
   13cfa:	4b2a      	ldr	r3, [pc, #168]	; (13da4 <CLI_SendWeightData+0xec>)
   13cfc:	4798      	blx	r3
	
	char help[64];
	//snprintf(help, 64, "input vol = VIN1P - VIN1N = %.2f\r\n",((float)i32ConversionData / 16777216) * (float)(3.14));
	snprintf(help, 64, "input vol = VIN1P - VIN1N = %d\r\n",ADC_Array[0]);
   13cfe:	2390      	movs	r3, #144	; 0x90
   13d00:	18fb      	adds	r3, r7, r3
   13d02:	681b      	ldr	r3, [r3, #0]
   13d04:	4a28      	ldr	r2, [pc, #160]	; (13da8 <CLI_SendWeightData+0xf0>)
   13d06:	2150      	movs	r1, #80	; 0x50
   13d08:	1878      	adds	r0, r7, r1
   13d0a:	2140      	movs	r1, #64	; 0x40
   13d0c:	4c27      	ldr	r4, [pc, #156]	; (13dac <CLI_SendWeightData+0xf4>)
   13d0e:	47a0      	blx	r4
	
	SerialConsoleWriteString(help);
   13d10:	2350      	movs	r3, #80	; 0x50
   13d12:	18fb      	adds	r3, r7, r3
   13d14:	0018      	movs	r0, r3
   13d16:	4b26      	ldr	r3, [pc, #152]	; (13db0 <CLI_SendWeightData+0xf8>)
   13d18:	4798      	blx	r3
	nauvar.nau_i = ADC_Array[0];
   13d1a:	2390      	movs	r3, #144	; 0x90
   13d1c:	18fb      	adds	r3, r7, r3
   13d1e:	681b      	ldr	r3, [r3, #0]
   13d20:	b29a      	uxth	r2, r3
   13d22:	2398      	movs	r3, #152	; 0x98
   13d24:	18fb      	adds	r3, r7, r3
   13d26:	801a      	strh	r2, [r3, #0]
	nauvar.nau_f = ADC_Array[1];
   13d28:	2390      	movs	r3, #144	; 0x90
   13d2a:	18fb      	adds	r3, r7, r3
   13d2c:	685b      	ldr	r3, [r3, #4]
   13d2e:	b29a      	uxth	r2, r3
   13d30:	2398      	movs	r3, #152	; 0x98
   13d32:	18fb      	adds	r3, r7, r3
   13d34:	805a      	strh	r2, [r3, #2]
	
	int error = WifiAddNauDataToQueue(&nauvar);
   13d36:	2398      	movs	r3, #152	; 0x98
   13d38:	18fb      	adds	r3, r7, r3
   13d3a:	0018      	movs	r0, r3
   13d3c:	4b1d      	ldr	r3, [pc, #116]	; (13db4 <CLI_SendWeightData+0xfc>)
   13d3e:	4798      	blx	r3
   13d40:	0003      	movs	r3, r0
   13d42:	22a0      	movs	r2, #160	; 0xa0
   13d44:	18ba      	adds	r2, r7, r2
   13d46:	6013      	str	r3, [r2, #0]
	if (error == pdTRUE) {
   13d48:	23a0      	movs	r3, #160	; 0xa0
   13d4a:	18fb      	adds	r3, r7, r3
   13d4c:	681b      	ldr	r3, [r3, #0]
   13d4e:	2b01      	cmp	r3, #1
   13d50:	d105      	bne.n	13d5e <CLI_SendWeightData+0xa6>
		snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Nau Data MQTT Post\r\n");
   13d52:	4a19      	ldr	r2, [pc, #100]	; (13db8 <CLI_SendWeightData+0x100>)
   13d54:	68b9      	ldr	r1, [r7, #8]
   13d56:	68fb      	ldr	r3, [r7, #12]
   13d58:	0018      	movs	r0, r3
   13d5a:	4b14      	ldr	r3, [pc, #80]	; (13dac <CLI_SendWeightData+0xf4>)
   13d5c:	4798      	blx	r3
	}
	gfx_mono_init();
   13d5e:	4b17      	ldr	r3, [pc, #92]	; (13dbc <CLI_SendWeightData+0x104>)
   13d60:	4798      	blx	r3
	uint8_t charge = 100;
   13d62:	239f      	movs	r3, #159	; 0x9f
   13d64:	18fb      	adds	r3, r7, r3
   13d66:	2264      	movs	r2, #100	; 0x64
   13d68:	701a      	strb	r2, [r3, #0]
	char charge_char[64];
	sprintf(charge_char, "%d", charge);
   13d6a:	239f      	movs	r3, #159	; 0x9f
   13d6c:	18fb      	adds	r3, r7, r3
   13d6e:	781a      	ldrb	r2, [r3, #0]
   13d70:	4913      	ldr	r1, [pc, #76]	; (13dc0 <CLI_SendWeightData+0x108>)
   13d72:	2310      	movs	r3, #16
   13d74:	18fb      	adds	r3, r7, r3
   13d76:	0018      	movs	r0, r3
   13d78:	4b12      	ldr	r3, [pc, #72]	; (13dc4 <CLI_SendWeightData+0x10c>)
   13d7a:	4798      	blx	r3
	gfx_mono_draw_string(charge_char, 0, 8, &sysfont);
   13d7c:	4b12      	ldr	r3, [pc, #72]	; (13dc8 <CLI_SendWeightData+0x110>)
   13d7e:	2210      	movs	r2, #16
   13d80:	18b8      	adds	r0, r7, r2
   13d82:	2208      	movs	r2, #8
   13d84:	2100      	movs	r1, #0
   13d86:	4c11      	ldr	r4, [pc, #68]	; (13dcc <CLI_SendWeightData+0x114>)
   13d88:	47a0      	blx	r4
	return pdFALSE;
   13d8a:	2300      	movs	r3, #0
}
   13d8c:	0018      	movs	r0, r3
   13d8e:	46bd      	mov	sp, r7
   13d90:	b02b      	add	sp, #172	; 0xac
   13d92:	bd90      	pop	{r4, r7, pc}
   13d94:	00014905 	.word	0x00014905
   13d98:	000149a1 	.word	0x000149a1
   13d9c:	000147ed 	.word	0x000147ed
   13da0:	00014a5d 	.word	0x00014a5d
   13da4:	00014a81 	.word	0x00014a81
   13da8:	00035dd8 	.word	0x00035dd8
   13dac:	00034839 	.word	0x00034839
   13db0:	0001ce05 	.word	0x0001ce05
   13db4:	00016555 	.word	0x00016555
   13db8:	00035dfc 	.word	0x00035dfc
   13dbc:	0001287d 	.word	0x0001287d
   13dc0:	00035e14 	.word	0x00035e14
   13dc4:	0003489d 	.word	0x0003489d
   13dc8:	20000000 	.word	0x20000000
   13dcc:	00012721 	.word	0x00012721

00013dd0 <CLI_i2cScan>:
 * @param    p_cli 
 * @param    argc 
 * @param    argv 
 ******************************************************************************/
BaseType_t CLI_i2cScan(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13dd0:	b590      	push	{r4, r7, lr}
   13dd2:	b08f      	sub	sp, #60	; 0x3c
   13dd4:	af00      	add	r7, sp, #0
   13dd6:	60f8      	str	r0, [r7, #12]
   13dd8:	60b9      	str	r1, [r7, #8]
   13dda:	607a      	str	r2, [r7, #4]

		I2C_Data i2cOled; 
        uint8_t address;
		//Send 0 command byte
		uint8_t dataOut[2] = {0,0};
   13ddc:	2318      	movs	r3, #24
   13dde:	18fb      	adds	r3, r7, r3
   13de0:	2200      	movs	r2, #0
   13de2:	701a      	strb	r2, [r3, #0]
   13de4:	2318      	movs	r3, #24
   13de6:	18fb      	adds	r3, r7, r3
   13de8:	2200      	movs	r2, #0
   13dea:	705a      	strb	r2, [r3, #1]
		uint8_t dataIn[2];
		dataOut[0] = 0;
   13dec:	2318      	movs	r3, #24
   13dee:	18fb      	adds	r3, r7, r3
   13df0:	2200      	movs	r2, #0
   13df2:	701a      	strb	r2, [r3, #0]
		dataOut[1] = 0;
   13df4:	2318      	movs	r3, #24
   13df6:	18fb      	adds	r3, r7, r3
   13df8:	2200      	movs	r2, #0
   13dfa:	705a      	strb	r2, [r3, #1]
		i2cOled.address = 0;
   13dfc:	231c      	movs	r3, #28
   13dfe:	18fb      	adds	r3, r7, r3
   13e00:	2200      	movs	r2, #0
   13e02:	701a      	strb	r2, [r3, #0]
		i2cOled.msgIn = (uint8_t*) &dataIn[0];
   13e04:	231c      	movs	r3, #28
   13e06:	18fb      	adds	r3, r7, r3
   13e08:	2214      	movs	r2, #20
   13e0a:	18ba      	adds	r2, r7, r2
   13e0c:	609a      	str	r2, [r3, #8]
		i2cOled.lenOut = 1;
   13e0e:	231c      	movs	r3, #28
   13e10:	18fb      	adds	r3, r7, r3
   13e12:	2201      	movs	r2, #1
   13e14:	81da      	strh	r2, [r3, #14]
		i2cOled.msgOut = (const uint8_t*) &dataOut[0];
   13e16:	231c      	movs	r3, #28
   13e18:	18fb      	adds	r3, r7, r3
   13e1a:	2218      	movs	r2, #24
   13e1c:	18ba      	adds	r2, r7, r2
   13e1e:	605a      	str	r2, [r3, #4]
		i2cOled.lenIn = 1;
   13e20:	231c      	movs	r3, #28
   13e22:	18fb      	adds	r3, r7, r3
   13e24:	2201      	movs	r2, #1
   13e26:	819a      	strh	r2, [r3, #12]

            SerialConsoleWriteString("0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\r\n");
   13e28:	4b2c      	ldr	r3, [pc, #176]	; (13edc <CLI_i2cScan+0x10c>)
   13e2a:	0018      	movs	r0, r3
   13e2c:	4b2c      	ldr	r3, [pc, #176]	; (13ee0 <CLI_i2cScan+0x110>)
   13e2e:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   13e30:	2300      	movs	r3, #0
   13e32:	637b      	str	r3, [r7, #52]	; 0x34
   13e34:	e046      	b.n	13ec4 <CLI_i2cScan+0xf4>
            {
				snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i);
   13e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13e38:	4a2a      	ldr	r2, [pc, #168]	; (13ee4 <CLI_i2cScan+0x114>)
   13e3a:	482b      	ldr	r0, [pc, #172]	; (13ee8 <CLI_i2cScan+0x118>)
   13e3c:	210f      	movs	r1, #15
   13e3e:	4c2b      	ldr	r4, [pc, #172]	; (13eec <CLI_i2cScan+0x11c>)
   13e40:	47a0      	blx	r4
                SerialConsoleWriteString(bufCli);
   13e42:	4b29      	ldr	r3, [pc, #164]	; (13ee8 <CLI_i2cScan+0x118>)
   13e44:	0018      	movs	r0, r3
   13e46:	4b26      	ldr	r3, [pc, #152]	; (13ee0 <CLI_i2cScan+0x110>)
   13e48:	4798      	blx	r3

                for (int j = 0; j < 16; j++)
   13e4a:	2300      	movs	r3, #0
   13e4c:	633b      	str	r3, [r7, #48]	; 0x30
   13e4e:	e02f      	b.n	13eb0 <CLI_i2cScan+0xe0>
                {

                    i2cOled.address = (i + j) << 1;
   13e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13e52:	b2da      	uxtb	r2, r3
   13e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13e56:	b2db      	uxtb	r3, r3
   13e58:	18d3      	adds	r3, r2, r3
   13e5a:	b2db      	uxtb	r3, r3
   13e5c:	18db      	adds	r3, r3, r3
   13e5e:	b2da      	uxtb	r2, r3
   13e60:	231c      	movs	r3, #28
   13e62:	18fb      	adds	r3, r7, r3
   13e64:	701a      	strb	r2, [r3, #0]

                    	
                    int32_t ret = I2cWriteDataWait(&i2cOled, 100);
   13e66:	231c      	movs	r3, #28
   13e68:	18fb      	adds	r3, r7, r3
   13e6a:	2164      	movs	r1, #100	; 0x64
   13e6c:	0018      	movs	r0, r3
   13e6e:	4b20      	ldr	r3, [pc, #128]	; (13ef0 <CLI_i2cScan+0x120>)
   13e70:	4798      	blx	r3
   13e72:	0003      	movs	r3, r0
   13e74:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if (ret == 0)
   13e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13e78:	2b00      	cmp	r3, #0
   13e7a:	d10c      	bne.n	13e96 <CLI_i2cScan+0xc6>
                    {
						snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i2cOled.address);
   13e7c:	231c      	movs	r3, #28
   13e7e:	18fb      	adds	r3, r7, r3
   13e80:	781b      	ldrb	r3, [r3, #0]
   13e82:	4a18      	ldr	r2, [pc, #96]	; (13ee4 <CLI_i2cScan+0x114>)
   13e84:	4818      	ldr	r0, [pc, #96]	; (13ee8 <CLI_i2cScan+0x118>)
   13e86:	210f      	movs	r1, #15
   13e88:	4c18      	ldr	r4, [pc, #96]	; (13eec <CLI_i2cScan+0x11c>)
   13e8a:	47a0      	blx	r4
                        SerialConsoleWriteString(bufCli);
   13e8c:	4b16      	ldr	r3, [pc, #88]	; (13ee8 <CLI_i2cScan+0x118>)
   13e8e:	0018      	movs	r0, r3
   13e90:	4b13      	ldr	r3, [pc, #76]	; (13ee0 <CLI_i2cScan+0x110>)
   13e92:	4798      	blx	r3
   13e94:	e009      	b.n	13eaa <CLI_i2cScan+0xda>
                    }
                    else
                    {
                        snprintf(bufCli, CLI_MSG_LEN - 1, "X ");
   13e96:	4b14      	ldr	r3, [pc, #80]	; (13ee8 <CLI_i2cScan+0x118>)
   13e98:	4a16      	ldr	r2, [pc, #88]	; (13ef4 <CLI_i2cScan+0x124>)
   13e9a:	8811      	ldrh	r1, [r2, #0]
   13e9c:	8019      	strh	r1, [r3, #0]
   13e9e:	7892      	ldrb	r2, [r2, #2]
   13ea0:	709a      	strb	r2, [r3, #2]
						SerialConsoleWriteString(bufCli);
   13ea2:	4b11      	ldr	r3, [pc, #68]	; (13ee8 <CLI_i2cScan+0x118>)
   13ea4:	0018      	movs	r0, r3
   13ea6:	4b0e      	ldr	r3, [pc, #56]	; (13ee0 <CLI_i2cScan+0x110>)
   13ea8:	4798      	blx	r3
                for (int j = 0; j < 16; j++)
   13eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13eac:	3301      	adds	r3, #1
   13eae:	633b      	str	r3, [r7, #48]	; 0x30
   13eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13eb2:	2b0f      	cmp	r3, #15
   13eb4:	ddcc      	ble.n	13e50 <CLI_i2cScan+0x80>
                    }
                }
                SerialConsoleWriteString( "\r\n");
   13eb6:	4b10      	ldr	r3, [pc, #64]	; (13ef8 <CLI_i2cScan+0x128>)
   13eb8:	0018      	movs	r0, r3
   13eba:	4b09      	ldr	r3, [pc, #36]	; (13ee0 <CLI_i2cScan+0x110>)
   13ebc:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   13ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13ec0:	3310      	adds	r3, #16
   13ec2:	637b      	str	r3, [r7, #52]	; 0x34
   13ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13ec6:	2b7f      	cmp	r3, #127	; 0x7f
   13ec8:	ddb5      	ble.n	13e36 <CLI_i2cScan+0x66>
            }
            SerialConsoleWriteString( "\r\n");
   13eca:	4b0b      	ldr	r3, [pc, #44]	; (13ef8 <CLI_i2cScan+0x128>)
   13ecc:	0018      	movs	r0, r3
   13ece:	4b04      	ldr	r3, [pc, #16]	; (13ee0 <CLI_i2cScan+0x110>)
   13ed0:	4798      	blx	r3
			return pdFALSE;
   13ed2:	2300      	movs	r3, #0

}
   13ed4:	0018      	movs	r0, r3
   13ed6:	46bd      	mov	sp, r7
   13ed8:	b00f      	add	sp, #60	; 0x3c
   13eda:	bd90      	pop	{r4, r7, pc}
   13edc:	00035e18 	.word	0x00035e18
   13ee0:	0001ce05 	.word	0x0001ce05
   13ee4:	00035e4c 	.word	0x00035e4c
   13ee8:	200004f4 	.word	0x200004f4
   13eec:	00034839 	.word	0x00034839
   13ef0:	000144f1 	.word	0x000144f1
   13ef4:	00035e54 	.word	0x00035e54
   13ef8:	00035da4 	.word	0x00035da4

00013efc <system_interrupt_enable>:
{
   13efc:	b580      	push	{r7, lr}
   13efe:	b082      	sub	sp, #8
   13f00:	af00      	add	r7, sp, #0
   13f02:	0002      	movs	r2, r0
   13f04:	1dfb      	adds	r3, r7, #7
   13f06:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   13f08:	4b06      	ldr	r3, [pc, #24]	; (13f24 <system_interrupt_enable+0x28>)
   13f0a:	1dfa      	adds	r2, r7, #7
   13f0c:	7812      	ldrb	r2, [r2, #0]
   13f0e:	0011      	movs	r1, r2
   13f10:	221f      	movs	r2, #31
   13f12:	400a      	ands	r2, r1
   13f14:	2101      	movs	r1, #1
   13f16:	4091      	lsls	r1, r2
   13f18:	000a      	movs	r2, r1
   13f1a:	601a      	str	r2, [r3, #0]
}
   13f1c:	46c0      	nop			; (mov r8, r8)
   13f1e:	46bd      	mov	sp, r7
   13f20:	b002      	add	sp, #8
   13f22:	bd80      	pop	{r7, pc}
   13f24:	e000e100 	.word	0xe000e100

00013f28 <i2c_master_is_syncing>:
{
   13f28:	b580      	push	{r7, lr}
   13f2a:	b084      	sub	sp, #16
   13f2c:	af00      	add	r7, sp, #0
   13f2e:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   13f30:	687b      	ldr	r3, [r7, #4]
   13f32:	681b      	ldr	r3, [r3, #0]
   13f34:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   13f36:	68fb      	ldr	r3, [r7, #12]
   13f38:	69db      	ldr	r3, [r3, #28]
   13f3a:	2207      	movs	r2, #7
   13f3c:	4013      	ands	r3, r2
   13f3e:	1e5a      	subs	r2, r3, #1
   13f40:	4193      	sbcs	r3, r2
   13f42:	b2db      	uxtb	r3, r3
}
   13f44:	0018      	movs	r0, r3
   13f46:	46bd      	mov	sp, r7
   13f48:	b004      	add	sp, #16
   13f4a:	bd80      	pop	{r7, pc}

00013f4c <_i2c_master_wait_for_sync>:
{
   13f4c:	b580      	push	{r7, lr}
   13f4e:	b082      	sub	sp, #8
   13f50:	af00      	add	r7, sp, #0
   13f52:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   13f54:	46c0      	nop			; (mov r8, r8)
   13f56:	687b      	ldr	r3, [r7, #4]
   13f58:	0018      	movs	r0, r3
   13f5a:	4b04      	ldr	r3, [pc, #16]	; (13f6c <_i2c_master_wait_for_sync+0x20>)
   13f5c:	4798      	blx	r3
   13f5e:	1e03      	subs	r3, r0, #0
   13f60:	d1f9      	bne.n	13f56 <_i2c_master_wait_for_sync+0xa>
}
   13f62:	46c0      	nop			; (mov r8, r8)
   13f64:	46bd      	mov	sp, r7
   13f66:	b002      	add	sp, #8
   13f68:	bd80      	pop	{r7, pc}
   13f6a:	46c0      	nop			; (mov r8, r8)
   13f6c:	00013f29 	.word	0x00013f29

00013f70 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
   13f70:	b580      	push	{r7, lr}
   13f72:	b082      	sub	sp, #8
   13f74:	af00      	add	r7, sp, #0
   13f76:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   13f78:	687b      	ldr	r3, [r7, #4]
   13f7a:	2264      	movs	r2, #100	; 0x64
   13f7c:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   13f7e:	687b      	ldr	r3, [r7, #4]
   13f80:	4a1b      	ldr	r2, [pc, #108]	; (13ff0 <i2c_master_get_config_defaults+0x80>)
   13f82:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   13f84:	687b      	ldr	r3, [r7, #4]
   13f86:	2200      	movs	r2, #0
   13f88:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
   13f8a:	687b      	ldr	r3, [r7, #4]
   13f8c:	2200      	movs	r2, #0
   13f8e:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
   13f90:	687b      	ldr	r3, [r7, #4]
   13f92:	2200      	movs	r2, #0
   13f94:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   13f96:	687b      	ldr	r3, [r7, #4]
   13f98:	2280      	movs	r2, #128	; 0x80
   13f9a:	0392      	lsls	r2, r2, #14
   13f9c:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
   13f9e:	687b      	ldr	r3, [r7, #4]
   13fa0:	2201      	movs	r2, #1
   13fa2:	4252      	negs	r2, r2
   13fa4:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
   13fa6:	687b      	ldr	r3, [r7, #4]
   13fa8:	2201      	movs	r2, #1
   13faa:	4252      	negs	r2, r2
   13fac:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   13fae:	687b      	ldr	r3, [r7, #4]
   13fb0:	2200      	movs	r2, #0
   13fb2:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
   13fb4:	687b      	ldr	r3, [r7, #4]
   13fb6:	2200      	movs	r2, #0
   13fb8:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
   13fba:	687b      	ldr	r3, [r7, #4]
   13fbc:	2224      	movs	r2, #36	; 0x24
   13fbe:	2100      	movs	r1, #0
   13fc0:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
   13fc2:	687b      	ldr	r3, [r7, #4]
   13fc4:	2200      	movs	r2, #0
   13fc6:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
   13fc8:	687b      	ldr	r3, [r7, #4]
   13fca:	222c      	movs	r2, #44	; 0x2c
   13fcc:	2100      	movs	r1, #0
   13fce:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
   13fd0:	687b      	ldr	r3, [r7, #4]
   13fd2:	222d      	movs	r2, #45	; 0x2d
   13fd4:	2100      	movs	r1, #0
   13fd6:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
   13fd8:	687b      	ldr	r3, [r7, #4]
   13fda:	222e      	movs	r2, #46	; 0x2e
   13fdc:	2100      	movs	r1, #0
   13fde:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
   13fe0:	687b      	ldr	r3, [r7, #4]
   13fe2:	22d7      	movs	r2, #215	; 0xd7
   13fe4:	861a      	strh	r2, [r3, #48]	; 0x30
}
   13fe6:	46c0      	nop			; (mov r8, r8)
   13fe8:	46bd      	mov	sp, r7
   13fea:	b002      	add	sp, #8
   13fec:	bd80      	pop	{r7, pc}
   13fee:	46c0      	nop			; (mov r8, r8)
   13ff0:	00000d48 	.word	0x00000d48

00013ff4 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
   13ff4:	b580      	push	{r7, lr}
   13ff6:	b084      	sub	sp, #16
   13ff8:	af00      	add	r7, sp, #0
   13ffa:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13ffc:	687b      	ldr	r3, [r7, #4]
   13ffe:	681b      	ldr	r3, [r3, #0]
   14000:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
   14002:	2300      	movs	r3, #0
   14004:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   14006:	687b      	ldr	r3, [r7, #4]
   14008:	0018      	movs	r0, r3
   1400a:	4b14      	ldr	r3, [pc, #80]	; (1405c <i2c_master_enable+0x68>)
   1400c:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
   1400e:	68bb      	ldr	r3, [r7, #8]
   14010:	681b      	ldr	r3, [r3, #0]
   14012:	2202      	movs	r2, #2
   14014:	431a      	orrs	r2, r3
   14016:	68bb      	ldr	r3, [r7, #8]
   14018:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1401a:	687b      	ldr	r3, [r7, #4]
   1401c:	681b      	ldr	r3, [r3, #0]
   1401e:	0018      	movs	r0, r3
   14020:	4b0f      	ldr	r3, [pc, #60]	; (14060 <i2c_master_enable+0x6c>)
   14022:	4798      	blx	r3
   14024:	0003      	movs	r3, r0
   14026:	0018      	movs	r0, r3
   14028:	4b0e      	ldr	r3, [pc, #56]	; (14064 <i2c_master_enable+0x70>)
   1402a:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   1402c:	e00c      	b.n	14048 <i2c_master_enable+0x54>
		timeout_counter++;
   1402e:	68fb      	ldr	r3, [r7, #12]
   14030:	3301      	adds	r3, #1
   14032:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   14034:	687b      	ldr	r3, [r7, #4]
   14036:	88db      	ldrh	r3, [r3, #6]
   14038:	001a      	movs	r2, r3
   1403a:	68fb      	ldr	r3, [r7, #12]
   1403c:	429a      	cmp	r2, r3
   1403e:	d803      	bhi.n	14048 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
   14040:	68bb      	ldr	r3, [r7, #8]
   14042:	2210      	movs	r2, #16
   14044:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
   14046:	e006      	b.n	14056 <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   14048:	68bb      	ldr	r3, [r7, #8]
   1404a:	8b5b      	ldrh	r3, [r3, #26]
   1404c:	b29b      	uxth	r3, r3
   1404e:	001a      	movs	r2, r3
   14050:	2310      	movs	r3, #16
   14052:	4013      	ands	r3, r2
   14054:	d0eb      	beq.n	1402e <i2c_master_enable+0x3a>
		}
	}
}
   14056:	46bd      	mov	sp, r7
   14058:	b004      	add	sp, #16
   1405a:	bd80      	pop	{r7, pc}
   1405c:	00013f4d 	.word	0x00013f4d
   14060:	0002677d 	.word	0x0002677d
   14064:	00013efd 	.word	0x00013efd

00014068 <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
   14068:	b580      	push	{r7, lr}
   1406a:	b082      	sub	sp, #8
   1406c:	af00      	add	r7, sp, #0
   1406e:	6078      	str	r0, [r7, #4]
   14070:	000a      	movs	r2, r1
   14072:	1cfb      	adds	r3, r7, #3
   14074:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
   14076:	687b      	ldr	r3, [r7, #4]
   14078:	7e5b      	ldrb	r3, [r3, #25]
   1407a:	b2db      	uxtb	r3, r3
   1407c:	b25a      	sxtb	r2, r3
   1407e:	1cfb      	adds	r3, r7, #3
   14080:	781b      	ldrb	r3, [r3, #0]
   14082:	2101      	movs	r1, #1
   14084:	4099      	lsls	r1, r3
   14086:	000b      	movs	r3, r1
   14088:	b25b      	sxtb	r3, r3
   1408a:	4313      	orrs	r3, r2
   1408c:	b25b      	sxtb	r3, r3
   1408e:	b2da      	uxtb	r2, r3
   14090:	687b      	ldr	r3, [r7, #4]
   14092:	765a      	strb	r2, [r3, #25]
}
   14094:	46c0      	nop			; (mov r8, r8)
   14096:	46bd      	mov	sp, r7
   14098:	b002      	add	sp, #8
   1409a:	bd80      	pop	{r7, pc}

0001409c <I2cDriverConfigureSensorBus>:
struct i2c_master_packet sensorPacketWrite;
/******************************************************************************
 * Forward Declarations
 ******************************************************************************/
static int32_t I2cDriverConfigureSensorBus(void)
{
   1409c:	b590      	push	{r4, r7, lr}
   1409e:	b091      	sub	sp, #68	; 0x44
   140a0:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   140a2:	2300      	movs	r3, #0
   140a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    status_code_genare_t errCodeAsf = STATUS_OK;
   140a6:	233a      	movs	r3, #58	; 0x3a
   140a8:	18fb      	adds	r3, r7, r3
   140aa:	2200      	movs	r2, #0
   140ac:	701a      	strb	r2, [r3, #0]
    /* Initialize config structure and software module */
    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
   140ae:	1d3b      	adds	r3, r7, #4
   140b0:	0018      	movs	r0, r3
   140b2:	4b21      	ldr	r3, [pc, #132]	; (14138 <I2cDriverConfigureSensorBus+0x9c>)
   140b4:	4798      	blx	r3

    config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
   140b6:	1d3b      	adds	r3, r7, #4
   140b8:	4a20      	ldr	r2, [pc, #128]	; (1413c <I2cDriverConfigureSensorBus+0xa0>)
   140ba:	61da      	str	r2, [r3, #28]
    config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
   140bc:	1d3b      	adds	r3, r7, #4
   140be:	4a20      	ldr	r2, [pc, #128]	; (14140 <I2cDriverConfigureSensorBus+0xa4>)
   140c0:	621a      	str	r2, [r3, #32]
    /* Change buffer timeout to something longer */
    config_i2c_master.buffer_timeout = 1000;
   140c2:	1d3b      	adds	r3, r7, #4
   140c4:	22fa      	movs	r2, #250	; 0xfa
   140c6:	0092      	lsls	r2, r2, #2
   140c8:	82da      	strh	r2, [r3, #22]
    /* Initialize and enable device with config. Try three times to initialize */

    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   140ca:	233b      	movs	r3, #59	; 0x3b
   140cc:	18fb      	adds	r3, r7, r3
   140ce:	2203      	movs	r2, #3
   140d0:	701a      	strb	r2, [r3, #0]
   140d2:	e01e      	b.n	14112 <I2cDriverConfigureSensorBus+0x76>
        errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
   140d4:	233a      	movs	r3, #58	; 0x3a
   140d6:	18fc      	adds	r4, r7, r3
   140d8:	1d3a      	adds	r2, r7, #4
   140da:	491a      	ldr	r1, [pc, #104]	; (14144 <I2cDriverConfigureSensorBus+0xa8>)
   140dc:	4b1a      	ldr	r3, [pc, #104]	; (14148 <I2cDriverConfigureSensorBus+0xac>)
   140de:	0018      	movs	r0, r3
   140e0:	4b1a      	ldr	r3, [pc, #104]	; (1414c <I2cDriverConfigureSensorBus+0xb0>)
   140e2:	4798      	blx	r3
   140e4:	0003      	movs	r3, r0
   140e6:	7023      	strb	r3, [r4, #0]
        if (STATUS_OK == errCodeAsf) {
   140e8:	233a      	movs	r3, #58	; 0x3a
   140ea:	18fb      	adds	r3, r7, r3
   140ec:	781b      	ldrb	r3, [r3, #0]
   140ee:	2b00      	cmp	r3, #0
   140f0:	d104      	bne.n	140fc <I2cDriverConfigureSensorBus+0x60>
            error = errCodeAsf;
   140f2:	233a      	movs	r3, #58	; 0x3a
   140f4:	18fb      	adds	r3, r7, r3
   140f6:	781b      	ldrb	r3, [r3, #0]
   140f8:	63fb      	str	r3, [r7, #60]	; 0x3c
            break;
   140fa:	e00f      	b.n	1411c <I2cDriverConfigureSensorBus+0x80>
        } else {
            i2c_master_reset(&i2cSensorBusInstance);
   140fc:	4b12      	ldr	r3, [pc, #72]	; (14148 <I2cDriverConfigureSensorBus+0xac>)
   140fe:	0018      	movs	r0, r3
   14100:	4b13      	ldr	r3, [pc, #76]	; (14150 <I2cDriverConfigureSensorBus+0xb4>)
   14102:	4798      	blx	r3
    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   14104:	233b      	movs	r3, #59	; 0x3b
   14106:	18fb      	adds	r3, r7, r3
   14108:	781a      	ldrb	r2, [r3, #0]
   1410a:	233b      	movs	r3, #59	; 0x3b
   1410c:	18fb      	adds	r3, r7, r3
   1410e:	3a01      	subs	r2, #1
   14110:	701a      	strb	r2, [r3, #0]
   14112:	233b      	movs	r3, #59	; 0x3b
   14114:	18fb      	adds	r3, r7, r3
   14116:	781b      	ldrb	r3, [r3, #0]
   14118:	2b00      	cmp	r3, #0
   1411a:	d1db      	bne.n	140d4 <I2cDriverConfigureSensorBus+0x38>
        }
    }

    if (STATUS_OK != error) goto exit;
   1411c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1411e:	2b00      	cmp	r3, #0
   14120:	d104      	bne.n	1412c <I2cDriverConfigureSensorBus+0x90>

    i2c_master_enable(&i2cSensorBusInstance);
   14122:	4b09      	ldr	r3, [pc, #36]	; (14148 <I2cDriverConfigureSensorBus+0xac>)
   14124:	0018      	movs	r0, r3
   14126:	4b0b      	ldr	r3, [pc, #44]	; (14154 <I2cDriverConfigureSensorBus+0xb8>)
   14128:	4798      	blx	r3
   1412a:	e000      	b.n	1412e <I2cDriverConfigureSensorBus+0x92>
    if (STATUS_OK != error) goto exit;
   1412c:	46c0      	nop			; (mov r8, r8)

exit:
    return error;
   1412e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   14130:	0018      	movs	r0, r3
   14132:	46bd      	mov	sp, r7
   14134:	b011      	add	sp, #68	; 0x44
   14136:	bd90      	pop	{r4, r7, pc}
   14138:	00013f71 	.word	0x00013f71
   1413c:	00080002 	.word	0x00080002
   14140:	00090002 	.word	0x00090002
   14144:	42000800 	.word	0x42000800
   14148:	200047a8 	.word	0x200047a8
   1414c:	00016b45 	.word	0x00016b45
   14150:	00016c79 	.word	0x00016c79
   14154:	00013ff5 	.word	0x00013ff5

00014158 <I2cSensorsTxComplete>:
  * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
  * @note
  */
void I2cSensorsTxComplete(struct i2c_master_module *const module)
{
   14158:	b580      	push	{r7, lr}
   1415a:	b084      	sub	sp, #16
   1415c:	af00      	add	r7, sp, #0
   1415e:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   14160:	4b0e      	ldr	r3, [pc, #56]	; (1419c <I2cSensorsTxComplete+0x44>)
   14162:	2200      	movs	r2, #0
   14164:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   14166:	4b0d      	ldr	r3, [pc, #52]	; (1419c <I2cSensorsTxComplete+0x44>)
   14168:	2201      	movs	r2, #1
   1416a:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   1416c:	2300      	movs	r3, #0
   1416e:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   14170:	4b0b      	ldr	r3, [pc, #44]	; (141a0 <I2cSensorsTxComplete+0x48>)
   14172:	681b      	ldr	r3, [r3, #0]
   14174:	220c      	movs	r2, #12
   14176:	18ba      	adds	r2, r7, r2
   14178:	0011      	movs	r1, r2
   1417a:	0018      	movs	r0, r3
   1417c:	4b09      	ldr	r3, [pc, #36]	; (141a4 <I2cSensorsTxComplete+0x4c>)
   1417e:	4798      	blx	r3
    sensorTransmitError = false;
   14180:	4b09      	ldr	r3, [pc, #36]	; (141a8 <I2cSensorsTxComplete+0x50>)
   14182:	2200      	movs	r2, #0
   14184:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   14186:	68fb      	ldr	r3, [r7, #12]
   14188:	2b00      	cmp	r3, #0
   1418a:	d003      	beq.n	14194 <I2cSensorsTxComplete+0x3c>
   1418c:	4b07      	ldr	r3, [pc, #28]	; (141ac <I2cSensorsTxComplete+0x54>)
   1418e:	2280      	movs	r2, #128	; 0x80
   14190:	0552      	lsls	r2, r2, #21
   14192:	601a      	str	r2, [r3, #0]
}
   14194:	46c0      	nop			; (mov r8, r8)
   14196:	46bd      	mov	sp, r7
   14198:	b004      	add	sp, #16
   1419a:	bd80      	pop	{r7, pc}
   1419c:	200005e0 	.word	0x200005e0
   141a0:	200047d0 	.word	0x200047d0
   141a4:	00019dd5 	.word	0x00019dd5
   141a8:	200005dc 	.word	0x200005dc
   141ac:	e000ed04 	.word	0xe000ed04

000141b0 <I2cSensorsRxComplete>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsRxComplete(struct i2c_master_module *const module)
{
   141b0:	b580      	push	{r7, lr}
   141b2:	b084      	sub	sp, #16
   141b4:	af00      	add	r7, sp, #0
   141b6:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   141b8:	4b0e      	ldr	r3, [pc, #56]	; (141f4 <I2cSensorsRxComplete+0x44>)
   141ba:	2200      	movs	r2, #0
   141bc:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   141be:	4b0d      	ldr	r3, [pc, #52]	; (141f4 <I2cSensorsRxComplete+0x44>)
   141c0:	2201      	movs	r2, #1
   141c2:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   141c4:	2300      	movs	r3, #0
   141c6:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   141c8:	4b0b      	ldr	r3, [pc, #44]	; (141f8 <I2cSensorsRxComplete+0x48>)
   141ca:	681b      	ldr	r3, [r3, #0]
   141cc:	220c      	movs	r2, #12
   141ce:	18ba      	adds	r2, r7, r2
   141d0:	0011      	movs	r1, r2
   141d2:	0018      	movs	r0, r3
   141d4:	4b09      	ldr	r3, [pc, #36]	; (141fc <I2cSensorsRxComplete+0x4c>)
   141d6:	4798      	blx	r3
    sensorTransmitError = false;
   141d8:	4b09      	ldr	r3, [pc, #36]	; (14200 <I2cSensorsRxComplete+0x50>)
   141da:	2200      	movs	r2, #0
   141dc:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   141de:	68fb      	ldr	r3, [r7, #12]
   141e0:	2b00      	cmp	r3, #0
   141e2:	d003      	beq.n	141ec <I2cSensorsRxComplete+0x3c>
   141e4:	4b07      	ldr	r3, [pc, #28]	; (14204 <I2cSensorsRxComplete+0x54>)
   141e6:	2280      	movs	r2, #128	; 0x80
   141e8:	0552      	lsls	r2, r2, #21
   141ea:	601a      	str	r2, [r3, #0]
}
   141ec:	46c0      	nop			; (mov r8, r8)
   141ee:	46bd      	mov	sp, r7
   141f0:	b004      	add	sp, #16
   141f2:	bd80      	pop	{r7, pc}
   141f4:	200005e0 	.word	0x200005e0
   141f8:	200047d0 	.word	0x200047d0
   141fc:	00019dd5 	.word	0x00019dd5
   14200:	200005dc 	.word	0x200005dc
   14204:	e000ed04 	.word	0xe000ed04

00014208 <I2cSensorsError>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsError(struct i2c_master_module *const module)
{
   14208:	b580      	push	{r7, lr}
   1420a:	b084      	sub	sp, #16
   1420c:	af00      	add	r7, sp, #0
   1420e:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   14210:	4b0e      	ldr	r3, [pc, #56]	; (1424c <I2cSensorsError+0x44>)
   14212:	2200      	movs	r2, #0
   14214:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.txDoneFlag = true;
   14216:	4b0d      	ldr	r3, [pc, #52]	; (1424c <I2cSensorsError+0x44>)
   14218:	2201      	movs	r2, #1
   1421a:	605a      	str	r2, [r3, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   1421c:	2300      	movs	r3, #0
   1421e:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   14220:	4b0b      	ldr	r3, [pc, #44]	; (14250 <I2cSensorsError+0x48>)
   14222:	681b      	ldr	r3, [r3, #0]
   14224:	220c      	movs	r2, #12
   14226:	18ba      	adds	r2, r7, r2
   14228:	0011      	movs	r1, r2
   1422a:	0018      	movs	r0, r3
   1422c:	4b09      	ldr	r3, [pc, #36]	; (14254 <I2cSensorsError+0x4c>)
   1422e:	4798      	blx	r3
    sensorTransmitError = true;
   14230:	4b09      	ldr	r3, [pc, #36]	; (14258 <I2cSensorsError+0x50>)
   14232:	2201      	movs	r2, #1
   14234:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   14236:	68fb      	ldr	r3, [r7, #12]
   14238:	2b00      	cmp	r3, #0
   1423a:	d003      	beq.n	14244 <I2cSensorsError+0x3c>
   1423c:	4b07      	ldr	r3, [pc, #28]	; (1425c <I2cSensorsError+0x54>)
   1423e:	2280      	movs	r2, #128	; 0x80
   14240:	0552      	lsls	r2, r2, #21
   14242:	601a      	str	r2, [r3, #0]
}
   14244:	46c0      	nop			; (mov r8, r8)
   14246:	46bd      	mov	sp, r7
   14248:	b004      	add	sp, #16
   1424a:	bd80      	pop	{r7, pc}
   1424c:	200005e0 	.word	0x200005e0
   14250:	200047d0 	.word	0x200047d0
   14254:	00019dd5 	.word	0x00019dd5
   14258:	200005dc 	.word	0x200005dc
   1425c:	e000ed04 	.word	0xe000ed04

00014260 <I2cDriverRegisterSensorBusCallbacks>:

void I2cDriverRegisterSensorBusCallbacks(void)
{
   14260:	b580      	push	{r7, lr}
   14262:	af00      	add	r7, sp, #0
    /* Register callback function. */
    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   14264:	4911      	ldr	r1, [pc, #68]	; (142ac <I2cDriverRegisterSensorBusCallbacks+0x4c>)
   14266:	4b12      	ldr	r3, [pc, #72]	; (142b0 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14268:	2200      	movs	r2, #0
   1426a:	0018      	movs	r0, r3
   1426c:	4b11      	ldr	r3, [pc, #68]	; (142b4 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   1426e:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   14270:	4b0f      	ldr	r3, [pc, #60]	; (142b0 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14272:	2100      	movs	r1, #0
   14274:	0018      	movs	r0, r3
   14276:	4b10      	ldr	r3, [pc, #64]	; (142b8 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   14278:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
   1427a:	4910      	ldr	r1, [pc, #64]	; (142bc <I2cDriverRegisterSensorBusCallbacks+0x5c>)
   1427c:	4b0c      	ldr	r3, [pc, #48]	; (142b0 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   1427e:	2201      	movs	r2, #1
   14280:	0018      	movs	r0, r3
   14282:	4b0c      	ldr	r3, [pc, #48]	; (142b4 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   14284:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_READ_COMPLETE);
   14286:	4b0a      	ldr	r3, [pc, #40]	; (142b0 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14288:	2101      	movs	r1, #1
   1428a:	0018      	movs	r0, r3
   1428c:	4b0a      	ldr	r3, [pc, #40]	; (142b8 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   1428e:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError, I2C_MASTER_CALLBACK_ERROR);
   14290:	490b      	ldr	r1, [pc, #44]	; (142c0 <I2cDriverRegisterSensorBusCallbacks+0x60>)
   14292:	4b07      	ldr	r3, [pc, #28]	; (142b0 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14294:	2202      	movs	r2, #2
   14296:	0018      	movs	r0, r3
   14298:	4b06      	ldr	r3, [pc, #24]	; (142b4 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   1429a:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_ERROR);
   1429c:	4b04      	ldr	r3, [pc, #16]	; (142b0 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   1429e:	2102      	movs	r1, #2
   142a0:	0018      	movs	r0, r3
   142a2:	4b05      	ldr	r3, [pc, #20]	; (142b8 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   142a4:	4798      	blx	r3
}
   142a6:	46c0      	nop			; (mov r8, r8)
   142a8:	46bd      	mov	sp, r7
   142aa:	bd80      	pop	{r7, pc}
   142ac:	00014159 	.word	0x00014159
   142b0:	200047a8 	.word	0x200047a8
   142b4:	000132b1 	.word	0x000132b1
   142b8:	00014069 	.word	0x00014069
   142bc:	000141b1 	.word	0x000141b1
   142c0:	00014209 	.word	0x00014209

000142c4 <I2cInitializeDriver>:
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note
 */
int32_t I2cInitializeDriver(void)
{
   142c4:	b580      	push	{r7, lr}
   142c6:	b082      	sub	sp, #8
   142c8:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   142ca:	2300      	movs	r3, #0
   142cc:	607b      	str	r3, [r7, #4]

    error = I2cDriverConfigureSensorBus();
   142ce:	4b14      	ldr	r3, [pc, #80]	; (14320 <I2cInitializeDriver+0x5c>)
   142d0:	4798      	blx	r3
   142d2:	0003      	movs	r3, r0
   142d4:	607b      	str	r3, [r7, #4]
    if (STATUS_OK != error) goto exit;
   142d6:	687b      	ldr	r3, [r7, #4]
   142d8:	2b00      	cmp	r3, #0
   142da:	d11a      	bne.n	14312 <I2cInitializeDriver+0x4e>

    I2cDriverRegisterSensorBusCallbacks();
   142dc:	4b11      	ldr	r3, [pc, #68]	; (14324 <I2cInitializeDriver+0x60>)
   142de:	4798      	blx	r3

    sensorI2cMutexHandle = xSemaphoreCreateMutex();
   142e0:	2001      	movs	r0, #1
   142e2:	4b11      	ldr	r3, [pc, #68]	; (14328 <I2cInitializeDriver+0x64>)
   142e4:	4798      	blx	r3
   142e6:	0002      	movs	r2, r0
   142e8:	4b10      	ldr	r3, [pc, #64]	; (1432c <I2cInitializeDriver+0x68>)
   142ea:	601a      	str	r2, [r3, #0]

    sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
   142ec:	2203      	movs	r2, #3
   142ee:	2100      	movs	r1, #0
   142f0:	2001      	movs	r0, #1
   142f2:	4b0f      	ldr	r3, [pc, #60]	; (14330 <I2cInitializeDriver+0x6c>)
   142f4:	4798      	blx	r3
   142f6:	0002      	movs	r2, r0
   142f8:	4b0e      	ldr	r3, [pc, #56]	; (14334 <I2cInitializeDriver+0x70>)
   142fa:	601a      	str	r2, [r3, #0]
    // xSemaphoreGive(sensorI2cSemaphoreHandle);

    if (NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle) {
   142fc:	4b0b      	ldr	r3, [pc, #44]	; (1432c <I2cInitializeDriver+0x68>)
   142fe:	681b      	ldr	r3, [r3, #0]
   14300:	2b00      	cmp	r3, #0
   14302:	d003      	beq.n	1430c <I2cInitializeDriver+0x48>
   14304:	4b0b      	ldr	r3, [pc, #44]	; (14334 <I2cInitializeDriver+0x70>)
   14306:	681b      	ldr	r3, [r3, #0]
   14308:	2b00      	cmp	r3, #0
   1430a:	d103      	bne.n	14314 <I2cInitializeDriver+0x50>
        error = STATUS_SUSPEND;  // Could not initialize mutex!
   1430c:	2306      	movs	r3, #6
   1430e:	607b      	str	r3, [r7, #4]
        goto exit;
   14310:	e000      	b.n	14314 <I2cInitializeDriver+0x50>
    if (STATUS_OK != error) goto exit;
   14312:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   14314:	687b      	ldr	r3, [r7, #4]
}
   14316:	0018      	movs	r0, r3
   14318:	46bd      	mov	sp, r7
   1431a:	b002      	add	sp, #8
   1431c:	bd80      	pop	{r7, pc}
   1431e:	46c0      	nop			; (mov r8, r8)
   14320:	0001409d 	.word	0x0001409d
   14324:	00014261 	.word	0x00014261
   14328:	0001970d 	.word	0x0001970d
   1432c:	200047a4 	.word	0x200047a4
   14330:	000194a5 	.word	0x000194a5
   14334:	200047d0 	.word	0x200047d0

00014338 <I2cWriteData>:
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */

int32_t I2cWriteData(I2C_Data *data)
{
   14338:	b590      	push	{r4, r7, lr}
   1433a:	b085      	sub	sp, #20
   1433c:	af00      	add	r7, sp, #0
   1433e:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14340:	2300      	movs	r3, #0
   14342:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   14344:	687b      	ldr	r3, [r7, #4]
   14346:	2b00      	cmp	r3, #0
   14348:	d003      	beq.n	14352 <I2cWriteData+0x1a>
   1434a:	687b      	ldr	r3, [r7, #4]
   1434c:	685b      	ldr	r3, [r3, #4]
   1434e:	2b00      	cmp	r3, #0
   14350:	d103      	bne.n	1435a <I2cWriteData+0x22>
        error = ERR_INVALID_ARG;
   14352:	2308      	movs	r3, #8
   14354:	425b      	negs	r3, r3
   14356:	60fb      	str	r3, [r7, #12]
        goto exit;
   14358:	e01f      	b.n	1439a <I2cWriteData+0x62>
    }

    // Prepare to write
    sensorPacketWrite.address = data->address;
   1435a:	687b      	ldr	r3, [r7, #4]
   1435c:	781b      	ldrb	r3, [r3, #0]
   1435e:	b29a      	uxth	r2, r3
   14360:	4b10      	ldr	r3, [pc, #64]	; (143a4 <I2cWriteData+0x6c>)
   14362:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = (uint8_t *)data->msgOut;
   14364:	687b      	ldr	r3, [r7, #4]
   14366:	685a      	ldr	r2, [r3, #4]
   14368:	4b0e      	ldr	r3, [pc, #56]	; (143a4 <I2cWriteData+0x6c>)
   1436a:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenOut;
   1436c:	687b      	ldr	r3, [r7, #4]
   1436e:	89da      	ldrh	r2, [r3, #14]
   14370:	4b0c      	ldr	r3, [pc, #48]	; (143a4 <I2cWriteData+0x6c>)
   14372:	805a      	strh	r2, [r3, #2]

    // Write

    hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   14374:	230b      	movs	r3, #11
   14376:	18fc      	adds	r4, r7, r3
   14378:	4a0a      	ldr	r2, [pc, #40]	; (143a4 <I2cWriteData+0x6c>)
   1437a:	4b0b      	ldr	r3, [pc, #44]	; (143a8 <I2cWriteData+0x70>)
   1437c:	0011      	movs	r1, r2
   1437e:	0018      	movs	r0, r3
   14380:	4b0a      	ldr	r3, [pc, #40]	; (143ac <I2cWriteData+0x74>)
   14382:	4798      	blx	r3
   14384:	0003      	movs	r3, r0
   14386:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   14388:	230b      	movs	r3, #11
   1438a:	18fb      	adds	r3, r7, r3
   1438c:	781b      	ldrb	r3, [r3, #0]
   1438e:	2b00      	cmp	r3, #0
   14390:	d003      	beq.n	1439a <I2cWriteData+0x62>
        error = ERROR_IO;
   14392:	2306      	movs	r3, #6
   14394:	425b      	negs	r3, r3
   14396:	60fb      	str	r3, [r7, #12]
        goto exit;
   14398:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   1439a:	68fb      	ldr	r3, [r7, #12]
}
   1439c:	0018      	movs	r0, r3
   1439e:	46bd      	mov	sp, r7
   143a0:	b005      	add	sp, #20
   143a2:	bd90      	pop	{r4, r7, pc}
   143a4:	200047d4 	.word	0x200047d4
   143a8:	200047a8 	.word	0x200047a8
   143ac:	00013535 	.word	0x00013535

000143b0 <I2cReadData>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
int32_t I2cReadData(I2C_Data *data)
{
   143b0:	b590      	push	{r4, r7, lr}
   143b2:	b085      	sub	sp, #20
   143b4:	af00      	add	r7, sp, #0
   143b6:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   143b8:	2300      	movs	r3, #0
   143ba:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   143bc:	687b      	ldr	r3, [r7, #4]
   143be:	2b00      	cmp	r3, #0
   143c0:	d003      	beq.n	143ca <I2cReadData+0x1a>
   143c2:	687b      	ldr	r3, [r7, #4]
   143c4:	685b      	ldr	r3, [r3, #4]
   143c6:	2b00      	cmp	r3, #0
   143c8:	d103      	bne.n	143d2 <I2cReadData+0x22>
        error = ERR_INVALID_ARG;
   143ca:	2308      	movs	r3, #8
   143cc:	425b      	negs	r3, r3
   143ce:	60fb      	str	r3, [r7, #12]
        goto exit;
   143d0:	e01f      	b.n	14412 <I2cReadData+0x62>
    }

    // Prepare to read
    sensorPacketWrite.address = data->address;
   143d2:	687b      	ldr	r3, [r7, #4]
   143d4:	781b      	ldrb	r3, [r3, #0]
   143d6:	b29a      	uxth	r2, r3
   143d8:	4b10      	ldr	r3, [pc, #64]	; (1441c <I2cReadData+0x6c>)
   143da:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = data->msgIn;
   143dc:	687b      	ldr	r3, [r7, #4]
   143de:	689a      	ldr	r2, [r3, #8]
   143e0:	4b0e      	ldr	r3, [pc, #56]	; (1441c <I2cReadData+0x6c>)
   143e2:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenIn;
   143e4:	687b      	ldr	r3, [r7, #4]
   143e6:	899a      	ldrh	r2, [r3, #12]
   143e8:	4b0c      	ldr	r3, [pc, #48]	; (1441c <I2cReadData+0x6c>)
   143ea:	805a      	strh	r2, [r3, #2]

    // Read

    hwError = i2c_master_read_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   143ec:	230b      	movs	r3, #11
   143ee:	18fc      	adds	r4, r7, r3
   143f0:	4a0a      	ldr	r2, [pc, #40]	; (1441c <I2cReadData+0x6c>)
   143f2:	4b0b      	ldr	r3, [pc, #44]	; (14420 <I2cReadData+0x70>)
   143f4:	0011      	movs	r1, r2
   143f6:	0018      	movs	r0, r3
   143f8:	4b0a      	ldr	r3, [pc, #40]	; (14424 <I2cReadData+0x74>)
   143fa:	4798      	blx	r3
   143fc:	0003      	movs	r3, r0
   143fe:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   14400:	230b      	movs	r3, #11
   14402:	18fb      	adds	r3, r7, r3
   14404:	781b      	ldrb	r3, [r3, #0]
   14406:	2b00      	cmp	r3, #0
   14408:	d003      	beq.n	14412 <I2cReadData+0x62>
        error = ERROR_IO;
   1440a:	2306      	movs	r3, #6
   1440c:	425b      	negs	r3, r3
   1440e:	60fb      	str	r3, [r7, #12]
        goto exit;
   14410:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   14412:	68fb      	ldr	r3, [r7, #12]
}
   14414:	0018      	movs	r0, r3
   14416:	46bd      	mov	sp, r7
   14418:	b005      	add	sp, #20
   1441a:	bd90      	pop	{r4, r7, pc}
   1441c:	200047d4 	.word	0x200047d4
   14420:	200047a8 	.word	0x200047a8
   14424:	00013451 	.word	0x00013451

00014428 <I2cFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cFreeMutex(void)
{
   14428:	b590      	push	{r4, r7, lr}
   1442a:	b083      	sub	sp, #12
   1442c:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
   1442e:	2300      	movs	r3, #0
   14430:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE) {
   14432:	4b09      	ldr	r3, [pc, #36]	; (14458 <I2cFreeMutex+0x30>)
   14434:	6818      	ldr	r0, [r3, #0]
   14436:	2300      	movs	r3, #0
   14438:	2200      	movs	r2, #0
   1443a:	2100      	movs	r1, #0
   1443c:	4c07      	ldr	r4, [pc, #28]	; (1445c <I2cFreeMutex+0x34>)
   1443e:	47a0      	blx	r4
   14440:	0003      	movs	r3, r0
   14442:	2b01      	cmp	r3, #1
   14444:	d002      	beq.n	1444c <I2cFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
   14446:	2314      	movs	r3, #20
   14448:	425b      	negs	r3, r3
   1444a:	607b      	str	r3, [r7, #4]
    }
    return error;
   1444c:	687b      	ldr	r3, [r7, #4]
}
   1444e:	0018      	movs	r0, r3
   14450:	46bd      	mov	sp, r7
   14452:	b003      	add	sp, #12
   14454:	bd90      	pop	{r4, r7, pc}
   14456:	46c0      	nop			; (mov r8, r8)
   14458:	200047a4 	.word	0x200047a4
   1445c:	0001974d 	.word	0x0001974d

00014460 <I2cGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cGetMutex(TickType_t waitTime)
{
   14460:	b580      	push	{r7, lr}
   14462:	b084      	sub	sp, #16
   14464:	af00      	add	r7, sp, #0
   14466:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14468:	2300      	movs	r3, #0
   1446a:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorI2cMutexHandle, waitTime) != pdTRUE) {
   1446c:	4b08      	ldr	r3, [pc, #32]	; (14490 <I2cGetMutex+0x30>)
   1446e:	681b      	ldr	r3, [r3, #0]
   14470:	687a      	ldr	r2, [r7, #4]
   14472:	0011      	movs	r1, r2
   14474:	0018      	movs	r0, r3
   14476:	4b07      	ldr	r3, [pc, #28]	; (14494 <I2cGetMutex+0x34>)
   14478:	4798      	blx	r3
   1447a:	0003      	movs	r3, r0
   1447c:	2b01      	cmp	r3, #1
   1447e:	d002      	beq.n	14486 <I2cGetMutex+0x26>
        error = ERROR_NOT_READY;
   14480:	231d      	movs	r3, #29
   14482:	425b      	negs	r3, r3
   14484:	60fb      	str	r3, [r7, #12]
    }
    return error;
   14486:	68fb      	ldr	r3, [r7, #12]
}
   14488:	0018      	movs	r0, r3
   1448a:	46bd      	mov	sp, r7
   1448c:	b004      	add	sp, #16
   1448e:	bd80      	pop	{r7, pc}
   14490:	200047a4 	.word	0x200047a4
   14494:	0001a45d 	.word	0x0001a45d

00014498 <I2cGetSemaphoreHandle>:

static int32_t I2cGetSemaphoreHandle(SemaphoreHandle_t *handle)
{
   14498:	b580      	push	{r7, lr}
   1449a:	b084      	sub	sp, #16
   1449c:	af00      	add	r7, sp, #0
   1449e:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   144a0:	2300      	movs	r3, #0
   144a2:	60fb      	str	r3, [r7, #12]
    *handle = sensorI2cSemaphoreHandle;
   144a4:	4b04      	ldr	r3, [pc, #16]	; (144b8 <I2cGetSemaphoreHandle+0x20>)
   144a6:	681a      	ldr	r2, [r3, #0]
   144a8:	687b      	ldr	r3, [r7, #4]
   144aa:	601a      	str	r2, [r3, #0]
    return error;
   144ac:	68fb      	ldr	r3, [r7, #12]
}
   144ae:	0018      	movs	r0, r3
   144b0:	46bd      	mov	sp, r7
   144b2:	b004      	add	sp, #16
   144b4:	bd80      	pop	{r7, pc}
   144b6:	46c0      	nop			; (mov r8, r8)
   144b8:	200047d0 	.word	0x200047d0

000144bc <I2cGetTaskErrorStatus>:
 *the I2C data structure).
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static uint8_t I2cGetTaskErrorStatus(void)
{
   144bc:	b580      	push	{r7, lr}
   144be:	af00      	add	r7, sp, #0
    return sensorTransmitError;
   144c0:	4b02      	ldr	r3, [pc, #8]	; (144cc <I2cGetTaskErrorStatus+0x10>)
   144c2:	781b      	ldrb	r3, [r3, #0]
}
   144c4:	0018      	movs	r0, r3
   144c6:	46bd      	mov	sp, r7
   144c8:	bd80      	pop	{r7, pc}
   144ca:	46c0      	nop			; (mov r8, r8)
   144cc:	200005dc 	.word	0x200005dc

000144d0 <I2cSetTaskErrorStatus>:
 * @param[in]   value Value to which to set the error flag to.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static void I2cSetTaskErrorStatus(uint8_t value)
{
   144d0:	b580      	push	{r7, lr}
   144d2:	b082      	sub	sp, #8
   144d4:	af00      	add	r7, sp, #0
   144d6:	0002      	movs	r2, r0
   144d8:	1dfb      	adds	r3, r7, #7
   144da:	701a      	strb	r2, [r3, #0]
    sensorTransmitError = value;
   144dc:	4b03      	ldr	r3, [pc, #12]	; (144ec <I2cSetTaskErrorStatus+0x1c>)
   144de:	1dfa      	adds	r2, r7, #7
   144e0:	7812      	ldrb	r2, [r2, #0]
   144e2:	701a      	strb	r2, [r3, #0]
}
   144e4:	46c0      	nop			; (mov r8, r8)
   144e6:	46bd      	mov	sp, r7
   144e8:	b002      	add	sp, #8
   144ea:	bd80      	pop	{r7, pc}
   144ec:	200005dc 	.word	0x200005dc

000144f0 <I2cWriteDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error.
  * @note
  */
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime)
{
   144f0:	b580      	push	{r7, lr}
   144f2:	b084      	sub	sp, #16
   144f4:	af00      	add	r7, sp, #0
   144f6:	6078      	str	r0, [r7, #4]
   144f8:	6039      	str	r1, [r7, #0]
    int32_t error = ERROR_NONE;
   144fa:	2300      	movs	r3, #0
   144fc:	60fb      	str	r3, [r7, #12]
    SemaphoreHandle_t semHandle = NULL;
   144fe:	2300      	movs	r3, #0
   14500:	60bb      	str	r3, [r7, #8]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   14502:	2396      	movs	r3, #150	; 0x96
   14504:	005b      	lsls	r3, r3, #1
   14506:	0018      	movs	r0, r3
   14508:	4b28      	ldr	r3, [pc, #160]	; (145ac <I2cWriteDataWait+0xbc>)
   1450a:	4798      	blx	r3
   1450c:	0003      	movs	r3, r0
   1450e:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   14510:	68fb      	ldr	r3, [r7, #12]
   14512:	2b00      	cmp	r3, #0
   14514:	d138      	bne.n	14588 <I2cWriteDataWait+0x98>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   14516:	2308      	movs	r3, #8
   14518:	18fb      	adds	r3, r7, r3
   1451a:	0018      	movs	r0, r3
   1451c:	4b24      	ldr	r3, [pc, #144]	; (145b0 <I2cWriteDataWait+0xc0>)
   1451e:	4798      	blx	r3
   14520:	0003      	movs	r3, r0
   14522:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   14524:	68fb      	ldr	r3, [r7, #12]
   14526:	2b00      	cmp	r3, #0
   14528:	d130      	bne.n	1458c <I2cWriteDataWait+0x9c>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   1452a:	687b      	ldr	r3, [r7, #4]
   1452c:	0018      	movs	r0, r3
   1452e:	4b21      	ldr	r3, [pc, #132]	; (145b4 <I2cWriteDataWait+0xc4>)
   14530:	4798      	blx	r3
   14532:	0003      	movs	r3, r0
   14534:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) {
   14536:	68fb      	ldr	r3, [r7, #12]
   14538:	2b00      	cmp	r3, #0
   1453a:	d12a      	bne.n	14592 <I2cWriteDataWait+0xa2>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   1453c:	68bb      	ldr	r3, [r7, #8]
   1453e:	683a      	ldr	r2, [r7, #0]
   14540:	0011      	movs	r1, r2
   14542:	0018      	movs	r0, r3
   14544:	4b1c      	ldr	r3, [pc, #112]	; (145b8 <I2cWriteDataWait+0xc8>)
   14546:	4798      	blx	r3
   14548:	0003      	movs	r3, r0
   1454a:	2b01      	cmp	r3, #1
   1454c:	d111      	bne.n	14572 <I2cWriteDataWait+0x82>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   1454e:	4b1b      	ldr	r3, [pc, #108]	; (145bc <I2cWriteDataWait+0xcc>)
   14550:	4798      	blx	r3
   14552:	1e03      	subs	r3, r0, #0
   14554:	d011      	beq.n	1457a <I2cWriteDataWait+0x8a>
            I2cSetTaskErrorStatus(false);
   14556:	2000      	movs	r0, #0
   14558:	4b19      	ldr	r3, [pc, #100]	; (145c0 <I2cWriteDataWait+0xd0>)
   1455a:	4798      	blx	r3
            if (error != ERROR_NONE) {
   1455c:	68fb      	ldr	r3, [r7, #12]
   1455e:	2b00      	cmp	r3, #0
   14560:	d003      	beq.n	1456a <I2cWriteDataWait+0x7a>
                error = ERROR_I2C_HANG_RESET;
   14562:	2321      	movs	r3, #33	; 0x21
   14564:	425b      	negs	r3, r3
   14566:	60fb      	str	r3, [r7, #12]
            } else {
                error = ERROR_ABORTED;
            }
            goto exitError0;
   14568:	e014      	b.n	14594 <I2cWriteDataWait+0xa4>
                error = ERROR_ABORTED;
   1456a:	2303      	movs	r3, #3
   1456c:	425b      	negs	r3, r3
   1456e:	60fb      	str	r3, [r7, #12]
            goto exitError0;
   14570:	e010      	b.n	14594 <I2cWriteDataWait+0xa4>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   14572:	2303      	movs	r3, #3
   14574:	425b      	negs	r3, r3
   14576:	60fb      	str	r3, [r7, #12]
        goto exitError0;
   14578:	e00c      	b.n	14594 <I2cWriteDataWait+0xa4>
    }

    //---8. Release Mutex
    error |= I2cFreeMutex();
   1457a:	4b12      	ldr	r3, [pc, #72]	; (145c4 <I2cWriteDataWait+0xd4>)
   1457c:	4798      	blx	r3
   1457e:	0002      	movs	r2, r0
   14580:	68fb      	ldr	r3, [r7, #12]
   14582:	4313      	orrs	r3, r2
   14584:	60fb      	str	r3, [r7, #12]
   14586:	e002      	b.n	1458e <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   14588:	46c0      	nop			; (mov r8, r8)
   1458a:	e000      	b.n	1458e <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   1458c:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   1458e:	68fb      	ldr	r3, [r7, #12]
   14590:	e007      	b.n	145a2 <I2cWriteDataWait+0xb2>
        goto exitError0;
   14592:	46c0      	nop			; (mov r8, r8)

exitError0:
    error |= I2cFreeMutex();
   14594:	4b0b      	ldr	r3, [pc, #44]	; (145c4 <I2cWriteDataWait+0xd4>)
   14596:	4798      	blx	r3
   14598:	0002      	movs	r2, r0
   1459a:	68fb      	ldr	r3, [r7, #12]
   1459c:	4313      	orrs	r3, r2
   1459e:	60fb      	str	r3, [r7, #12]
    // xSemaphoreGive(semHandle);
    return error;
   145a0:	68fb      	ldr	r3, [r7, #12]
}
   145a2:	0018      	movs	r0, r3
   145a4:	46bd      	mov	sp, r7
   145a6:	b004      	add	sp, #16
   145a8:	bd80      	pop	{r7, pc}
   145aa:	46c0      	nop			; (mov r8, r8)
   145ac:	00014461 	.word	0x00014461
   145b0:	00014499 	.word	0x00014499
   145b4:	00014339 	.word	0x00014339
   145b8:	0001a45d 	.word	0x0001a45d
   145bc:	000144bd 	.word	0x000144bd
   145c0:	000144d1 	.word	0x000144d1
   145c4:	00014429 	.word	0x00014429

000145c8 <I2cReadDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error. See ErrCodes.h
  * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!
  */
int32_t I2cReadDataWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime)
{
   145c8:	b580      	push	{r7, lr}
   145ca:	b086      	sub	sp, #24
   145cc:	af00      	add	r7, sp, #0
   145ce:	60f8      	str	r0, [r7, #12]
   145d0:	60b9      	str	r1, [r7, #8]
   145d2:	607a      	str	r2, [r7, #4]
    int32_t error = ERROR_NONE;
   145d4:	2300      	movs	r3, #0
   145d6:	617b      	str	r3, [r7, #20]
    SemaphoreHandle_t semHandle = NULL;
   145d8:	2300      	movs	r3, #0
   145da:	613b      	str	r3, [r7, #16]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   145dc:	2396      	movs	r3, #150	; 0x96
   145de:	005b      	lsls	r3, r3, #1
   145e0:	0018      	movs	r0, r3
   145e2:	4b35      	ldr	r3, [pc, #212]	; (146b8 <I2cReadDataWait+0xf0>)
   145e4:	4798      	blx	r3
   145e6:	0003      	movs	r3, r0
   145e8:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   145ea:	697b      	ldr	r3, [r7, #20]
   145ec:	2b00      	cmp	r3, #0
   145ee:	d155      	bne.n	1469c <I2cReadDataWait+0xd4>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   145f0:	2310      	movs	r3, #16
   145f2:	18fb      	adds	r3, r7, r3
   145f4:	0018      	movs	r0, r3
   145f6:	4b31      	ldr	r3, [pc, #196]	; (146bc <I2cReadDataWait+0xf4>)
   145f8:	4798      	blx	r3
   145fa:	0003      	movs	r3, r0
   145fc:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   145fe:	697b      	ldr	r3, [r7, #20]
   14600:	2b00      	cmp	r3, #0
   14602:	d14d      	bne.n	146a0 <I2cReadDataWait+0xd8>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   14604:	68fb      	ldr	r3, [r7, #12]
   14606:	0018      	movs	r0, r3
   14608:	4b2d      	ldr	r3, [pc, #180]	; (146c0 <I2cReadDataWait+0xf8>)
   1460a:	4798      	blx	r3
   1460c:	0003      	movs	r3, r0
   1460e:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   14610:	697b      	ldr	r3, [r7, #20]
   14612:	2b00      	cmp	r3, #0
   14614:	d147      	bne.n	146a6 <I2cReadDataWait+0xde>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   14616:	693b      	ldr	r3, [r7, #16]
   14618:	687a      	ldr	r2, [r7, #4]
   1461a:	0011      	movs	r1, r2
   1461c:	0018      	movs	r0, r3
   1461e:	4b29      	ldr	r3, [pc, #164]	; (146c4 <I2cReadDataWait+0xfc>)
   14620:	4798      	blx	r3
   14622:	0003      	movs	r3, r0
   14624:	2b01      	cmp	r3, #1
   14626:	d118      	bne.n	1465a <I2cReadDataWait+0x92>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   14628:	4b27      	ldr	r3, [pc, #156]	; (146c8 <I2cReadDataWait+0x100>)
   1462a:	4798      	blx	r3
   1462c:	1e03      	subs	r3, r0, #0
   1462e:	d006      	beq.n	1463e <I2cReadDataWait+0x76>
            I2cSetTaskErrorStatus(false);
   14630:	2000      	movs	r0, #0
   14632:	4b26      	ldr	r3, [pc, #152]	; (146cc <I2cReadDataWait+0x104>)
   14634:	4798      	blx	r3
            error = ERROR_ABORTED;
   14636:	2303      	movs	r3, #3
   14638:	425b      	negs	r3, r3
   1463a:	617b      	str	r3, [r7, #20]
            goto exitError0;
   1463c:	e034      	b.n	146a8 <I2cReadDataWait+0xe0>
        }
        vTaskDelay(delay);
   1463e:	68bb      	ldr	r3, [r7, #8]
   14640:	0018      	movs	r0, r3
   14642:	4b23      	ldr	r3, [pc, #140]	; (146d0 <I2cReadDataWait+0x108>)
   14644:	4798      	blx	r3
        error = ERR_TIMEOUT;
        goto exitError0;
    }

    //---6. Initiate Read data
    error = I2cReadData(data);
   14646:	68fb      	ldr	r3, [r7, #12]
   14648:	0018      	movs	r0, r3
   1464a:	4b22      	ldr	r3, [pc, #136]	; (146d4 <I2cReadDataWait+0x10c>)
   1464c:	4798      	blx	r3
   1464e:	0003      	movs	r3, r0
   14650:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   14652:	697b      	ldr	r3, [r7, #20]
   14654:	2b00      	cmp	r3, #0
   14656:	d004      	beq.n	14662 <I2cReadDataWait+0x9a>
        goto exitError0;
   14658:	e026      	b.n	146a8 <I2cReadDataWait+0xe0>
        error = ERR_TIMEOUT;
   1465a:	2303      	movs	r3, #3
   1465c:	425b      	negs	r3, r3
   1465e:	617b      	str	r3, [r7, #20]
        goto exitError0;
   14660:	e022      	b.n	146a8 <I2cReadDataWait+0xe0>
    }
    //---7. Wait for notification
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   14662:	693b      	ldr	r3, [r7, #16]
   14664:	687a      	ldr	r2, [r7, #4]
   14666:	0011      	movs	r1, r2
   14668:	0018      	movs	r0, r3
   1466a:	4b16      	ldr	r3, [pc, #88]	; (146c4 <I2cReadDataWait+0xfc>)
   1466c:	4798      	blx	r3
   1466e:	0003      	movs	r3, r0
   14670:	2b01      	cmp	r3, #1
   14672:	d10a      	bne.n	1468a <I2cReadDataWait+0xc2>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   14674:	4b14      	ldr	r3, [pc, #80]	; (146c8 <I2cReadDataWait+0x100>)
   14676:	4798      	blx	r3
   14678:	1e03      	subs	r3, r0, #0
   1467a:	d00a      	beq.n	14692 <I2cReadDataWait+0xca>
            I2cSetTaskErrorStatus(false);
   1467c:	2000      	movs	r0, #0
   1467e:	4b13      	ldr	r3, [pc, #76]	; (146cc <I2cReadDataWait+0x104>)
   14680:	4798      	blx	r3
            error = ERROR_ABORTED;
   14682:	2303      	movs	r3, #3
   14684:	425b      	negs	r3, r3
   14686:	617b      	str	r3, [r7, #20]
            goto exitError0;
   14688:	e00e      	b.n	146a8 <I2cReadDataWait+0xe0>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   1468a:	2303      	movs	r3, #3
   1468c:	425b      	negs	r3, r3
   1468e:	617b      	str	r3, [r7, #20]
        goto exitError0;
   14690:	e00a      	b.n	146a8 <I2cReadDataWait+0xe0>
    }

    //---8. Release Mutex
    error = I2cFreeMutex();
   14692:	4b11      	ldr	r3, [pc, #68]	; (146d8 <I2cReadDataWait+0x110>)
   14694:	4798      	blx	r3
   14696:	0003      	movs	r3, r0
   14698:	617b      	str	r3, [r7, #20]
   1469a:	e002      	b.n	146a2 <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   1469c:	46c0      	nop			; (mov r8, r8)
   1469e:	e000      	b.n	146a2 <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   146a0:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   146a2:	697b      	ldr	r3, [r7, #20]
   146a4:	e003      	b.n	146ae <I2cReadDataWait+0xe6>
        goto exitError0;
   146a6:	46c0      	nop			; (mov r8, r8)

exitError0:
    I2cFreeMutex();
   146a8:	4b0b      	ldr	r3, [pc, #44]	; (146d8 <I2cReadDataWait+0x110>)
   146aa:	4798      	blx	r3
    // xSemaphoreGive(semHandle);
    return error;
   146ac:	697b      	ldr	r3, [r7, #20]
}
   146ae:	0018      	movs	r0, r3
   146b0:	46bd      	mov	sp, r7
   146b2:	b006      	add	sp, #24
   146b4:	bd80      	pop	{r7, pc}
   146b6:	46c0      	nop			; (mov r8, r8)
   146b8:	00014461 	.word	0x00014461
   146bc:	00014499 	.word	0x00014499
   146c0:	00014339 	.word	0x00014339
   146c4:	0001a45d 	.word	0x0001a45d
   146c8:	000144bd 	.word	0x000144bd
   146cc:	000144d1 	.word	0x000144d1
   146d0:	0001b1b1 	.word	0x0001b1b1
   146d4:	000143b1 	.word	0x000143b1
   146d8:	00014429 	.word	0x00014429

000146dc <reg_write>:
#include "I2cDriver/I2cDriver.h"
#include "SerialConsole.h"
uint8_t msgOut[64];
I2C_Data adcData; 
static int32_t reg_write(void *handle, uint8_t reg, uint8_t *bufp,uint16_t len)
{
   146dc:	b580      	push	{r7, lr}
   146de:	b096      	sub	sp, #88	; 0x58
   146e0:	af00      	add	r7, sp, #0
   146e2:	60f8      	str	r0, [r7, #12]
   146e4:	0008      	movs	r0, r1
   146e6:	607a      	str	r2, [r7, #4]
   146e8:	0019      	movs	r1, r3
   146ea:	230b      	movs	r3, #11
   146ec:	18fb      	adds	r3, r7, r3
   146ee:	1c02      	adds	r2, r0, #0
   146f0:	701a      	strb	r2, [r3, #0]
   146f2:	2308      	movs	r3, #8
   146f4:	18fb      	adds	r3, r7, r3
   146f6:	1c0a      	adds	r2, r1, #0
   146f8:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Use the array "msgOutImu" to copy the data to be sent. Remember that the position [0] of the array you send must be the register, and
	//starting from position [1] you can copy the data to be sent. Remember to adjust the length accordingly
	int32_t error = ERROR_NONE;
   146fa:	2300      	movs	r3, #0
   146fc:	653b      	str	r3, [r7, #80]	; 0x50
	msgOut[0]=reg;
   146fe:	4b19      	ldr	r3, [pc, #100]	; (14764 <reg_write+0x88>)
   14700:	220b      	movs	r2, #11
   14702:	18ba      	adds	r2, r7, r2
   14704:	7812      	ldrb	r2, [r2, #0]
   14706:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<len;i++)
   14708:	2300      	movs	r3, #0
   1470a:	657b      	str	r3, [r7, #84]	; 0x54
   1470c:	e00a      	b.n	14724 <reg_write+0x48>
	{
		msgOut[1+i]=bufp[i];
   1470e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   14710:	3301      	adds	r3, #1
   14712:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   14714:	6879      	ldr	r1, [r7, #4]
   14716:	188a      	adds	r2, r1, r2
   14718:	7811      	ldrb	r1, [r2, #0]
   1471a:	4a12      	ldr	r2, [pc, #72]	; (14764 <reg_write+0x88>)
   1471c:	54d1      	strb	r1, [r2, r3]
	for(int i=0;i<len;i++)
   1471e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   14720:	3301      	adds	r3, #1
   14722:	657b      	str	r3, [r7, #84]	; 0x54
   14724:	2308      	movs	r3, #8
   14726:	18fb      	adds	r3, r7, r3
   14728:	881a      	ldrh	r2, [r3, #0]
   1472a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1472c:	429a      	cmp	r2, r3
   1472e:	dcee      	bgt.n	1470e <reg_write+0x32>
	}
	
	adcData.address=ADC_SLAVE_ADDR;	///<Address of the I2C device
   14730:	4b0d      	ldr	r3, [pc, #52]	; (14768 <reg_write+0x8c>)
   14732:	222a      	movs	r2, #42	; 0x2a
   14734:	701a      	strb	r2, [r3, #0]
	adcData.msgOut=&msgOut;		///<Pointer to array buffer that we will write from
   14736:	4b0c      	ldr	r3, [pc, #48]	; (14768 <reg_write+0x8c>)
   14738:	4a0a      	ldr	r2, [pc, #40]	; (14764 <reg_write+0x88>)
   1473a:	605a      	str	r2, [r3, #4]
	adcData.lenOut=1+len;
   1473c:	2308      	movs	r3, #8
   1473e:	18fb      	adds	r3, r7, r3
   14740:	881b      	ldrh	r3, [r3, #0]
   14742:	3301      	adds	r3, #1
   14744:	b29a      	uxth	r2, r3
   14746:	4b08      	ldr	r3, [pc, #32]	; (14768 <reg_write+0x8c>)
   14748:	81da      	strh	r2, [r3, #14]
	error= I2cWriteDataWait(&adcData, 100);
   1474a:	4b07      	ldr	r3, [pc, #28]	; (14768 <reg_write+0x8c>)
   1474c:	2164      	movs	r1, #100	; 0x64
   1474e:	0018      	movs	r0, r3
   14750:	4b06      	ldr	r3, [pc, #24]	; (1476c <reg_write+0x90>)
   14752:	4798      	blx	r3
   14754:	0003      	movs	r3, r0
   14756:	653b      	str	r3, [r7, #80]	; 0x50
		char help[64];
		//snprintf(help, 64, "error_write = %d\r\n",error);
		//SerialConsoleWriteString(help);
	return error;
   14758:	6d3b      	ldr	r3, [r7, #80]	; 0x50

}
   1475a:	0018      	movs	r0, r3
   1475c:	46bd      	mov	sp, r7
   1475e:	b016      	add	sp, #88	; 0x58
   14760:	bd80      	pop	{r7, pc}
   14762:	46c0      	nop			; (mov r8, r8)
   14764:	200047e4 	.word	0x200047e4
   14768:	20004824 	.word	0x20004824
   1476c:	000144f1 	.word	0x000144f1

00014770 <reg_read>:

static  int32_t reg_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
   14770:	b580      	push	{r7, lr}
   14772:	b096      	sub	sp, #88	; 0x58
   14774:	af00      	add	r7, sp, #0
   14776:	60f8      	str	r0, [r7, #12]
   14778:	0008      	movs	r0, r1
   1477a:	607a      	str	r2, [r7, #4]
   1477c:	0019      	movs	r1, r3
   1477e:	230b      	movs	r3, #11
   14780:	18fb      	adds	r3, r7, r3
   14782:	1c02      	adds	r2, r0, #0
   14784:	701a      	strb	r2, [r3, #0]
   14786:	2308      	movs	r3, #8
   14788:	18fb      	adds	r3, r7, r3
   1478a:	1c0a      	adds	r2, r1, #0
   1478c:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Check the structure "imuData" and notice that it has a msgOut and msgIn parameter. How do we fill this to our advantage?
	int32_t error = ERROR_NONE;
   1478e:	2300      	movs	r3, #0
   14790:	657b      	str	r3, [r7, #84]	; 0x54
	
	adcData.address=ADC_SLAVE_ADDR;	///<Address of the I2C device
   14792:	4b13      	ldr	r3, [pc, #76]	; (147e0 <reg_read+0x70>)
   14794:	222a      	movs	r2, #42	; 0x2a
   14796:	701a      	strb	r2, [r3, #0]

	adcData.lenIn=len;			///<Length of message to read/write;	
   14798:	4b11      	ldr	r3, [pc, #68]	; (147e0 <reg_read+0x70>)
   1479a:	2208      	movs	r2, #8
   1479c:	18ba      	adds	r2, r7, r2
   1479e:	8812      	ldrh	r2, [r2, #0]
   147a0:	819a      	strh	r2, [r3, #12]
	adcData.msgIn=bufp;
   147a2:	4b0f      	ldr	r3, [pc, #60]	; (147e0 <reg_read+0x70>)
   147a4:	687a      	ldr	r2, [r7, #4]
   147a6:	609a      	str	r2, [r3, #8]
	msgOut[0]=reg;
   147a8:	4b0e      	ldr	r3, [pc, #56]	; (147e4 <reg_read+0x74>)
   147aa:	220b      	movs	r2, #11
   147ac:	18ba      	adds	r2, r7, r2
   147ae:	7812      	ldrb	r2, [r2, #0]
   147b0:	701a      	strb	r2, [r3, #0]
	msgOut[1]=0;
   147b2:	4b0c      	ldr	r3, [pc, #48]	; (147e4 <reg_read+0x74>)
   147b4:	2200      	movs	r2, #0
   147b6:	705a      	strb	r2, [r3, #1]
	adcData.msgOut=&msgOut;	
   147b8:	4b09      	ldr	r3, [pc, #36]	; (147e0 <reg_read+0x70>)
   147ba:	4a0a      	ldr	r2, [pc, #40]	; (147e4 <reg_read+0x74>)
   147bc:	605a      	str	r2, [r3, #4]
	adcData.lenOut=1;	///<Pointer to array buffer that we will write from
   147be:	4b08      	ldr	r3, [pc, #32]	; (147e0 <reg_read+0x70>)
   147c0:	2201      	movs	r2, #1
   147c2:	81da      	strh	r2, [r3, #14]
	error= I2cReadDataWait(&adcData, 5, 100);
   147c4:	4b06      	ldr	r3, [pc, #24]	; (147e0 <reg_read+0x70>)
   147c6:	2264      	movs	r2, #100	; 0x64
   147c8:	2105      	movs	r1, #5
   147ca:	0018      	movs	r0, r3
   147cc:	4b06      	ldr	r3, [pc, #24]	; (147e8 <reg_read+0x78>)
   147ce:	4798      	blx	r3
   147d0:	0003      	movs	r3, r0
   147d2:	657b      	str	r3, [r7, #84]	; 0x54
	char help[64];
	//snprintf(help, 64, "error_read = %d\r\n",error);
	//SerialConsoleWriteString(help);
	
	
	return error;
   147d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
   147d6:	0018      	movs	r0, r3
   147d8:	46bd      	mov	sp, r7
   147da:	b016      	add	sp, #88	; 0x58
   147dc:	bd80      	pop	{r7, pc}
   147de:	46c0      	nop			; (mov r8, r8)
   147e0:	20004824 	.word	0x20004824
   147e4:	200047e4 	.word	0x200047e4
   147e8:	000145c9 	.word	0x000145c9

000147ec <ADC_ReadReg>:
void *handle;
uint8_t ADC_ReadReg(uint8_t u8RegAddr)
{
   147ec:	b590      	push	{r4, r7, lr}
   147ee:	b085      	sub	sp, #20
   147f0:	af00      	add	r7, sp, #0
   147f2:	0002      	movs	r2, r0
   147f4:	1dfb      	adds	r3, r7, #7
   147f6:	701a      	strb	r2, [r3, #0]
	//rdata = I2C_ReadByteOneReg(I2C1, ADC_SLAVE_ADDR, u8RegAddr);
	int32_t err= I2cReadData(&adcData);
	return ADC_bytes[0];*/
	static uint8_t read_bytes;
	
	int32_t err= reg_read(handle, u8RegAddr, &read_bytes,1);
   147f8:	4b07      	ldr	r3, [pc, #28]	; (14818 <ADC_ReadReg+0x2c>)
   147fa:	6818      	ldr	r0, [r3, #0]
   147fc:	4a07      	ldr	r2, [pc, #28]	; (1481c <ADC_ReadReg+0x30>)
   147fe:	1dfb      	adds	r3, r7, #7
   14800:	7819      	ldrb	r1, [r3, #0]
   14802:	2301      	movs	r3, #1
   14804:	4c06      	ldr	r4, [pc, #24]	; (14820 <ADC_ReadReg+0x34>)
   14806:	47a0      	blx	r4
   14808:	0003      	movs	r3, r0
   1480a:	60fb      	str	r3, [r7, #12]
	return read_bytes;
   1480c:	4b03      	ldr	r3, [pc, #12]	; (1481c <ADC_ReadReg+0x30>)
   1480e:	781b      	ldrb	r3, [r3, #0]
	
}
   14810:	0018      	movs	r0, r3
   14812:	46bd      	mov	sp, r7
   14814:	b005      	add	sp, #20
   14816:	bd90      	pop	{r4, r7, pc}
   14818:	200047e0 	.word	0x200047e0
   1481c:	200005f4 	.word	0x200005f4
   14820:	00014771 	.word	0x00014771

00014824 <ADC_WriteReg>:


uint8_t ADC_WriteReg(uint8_t u8RegAddr, uint8_t data)
{
   14824:	b590      	push	{r4, r7, lr}
   14826:	b085      	sub	sp, #20
   14828:	af00      	add	r7, sp, #0
   1482a:	0002      	movs	r2, r0
   1482c:	1dfb      	adds	r3, r7, #7
   1482e:	701a      	strb	r2, [r3, #0]
   14830:	1dbb      	adds	r3, r7, #6
   14832:	1c0a      	adds	r2, r1, #0
   14834:	701a      	strb	r2, [r3, #0]
	adcData.address = u8RegAddr;
	adcData.msgOut=&data;
	adcData.lenOut=sizeof(data);
	int32_t err=I2cWriteData(&adcData);
	return err;*/
	int32_t err=reg_write(handle, u8RegAddr,&data,1);
   14836:	4b08      	ldr	r3, [pc, #32]	; (14858 <ADC_WriteReg+0x34>)
   14838:	6818      	ldr	r0, [r3, #0]
   1483a:	1dba      	adds	r2, r7, #6
   1483c:	1dfb      	adds	r3, r7, #7
   1483e:	7819      	ldrb	r1, [r3, #0]
   14840:	2301      	movs	r3, #1
   14842:	4c06      	ldr	r4, [pc, #24]	; (1485c <ADC_WriteReg+0x38>)
   14844:	47a0      	blx	r4
   14846:	0003      	movs	r3, r0
   14848:	60fb      	str	r3, [r7, #12]
	return err;
   1484a:	68fb      	ldr	r3, [r7, #12]
   1484c:	b2db      	uxtb	r3, r3
}
   1484e:	0018      	movs	r0, r3
   14850:	46bd      	mov	sp, r7
   14852:	b005      	add	sp, #20
   14854:	bd90      	pop	{r4, r7, pc}
   14856:	46c0      	nop			; (mov r8, r8)
   14858:	200047e0 	.word	0x200047e0
   1485c:	000146dd 	.word	0x000146dd

00014860 <ADC_Calibration>:

	ADC_WriteReg(CTRL1_ADDR, reg);
}

void ADC_Calibration(void)
{
   14860:	b590      	push	{r4, r7, lr}
   14862:	b083      	sub	sp, #12
   14864:	af00      	add	r7, sp, #0
	uint8_t reg = 0;
   14866:	1dfb      	adds	r3, r7, #7
   14868:	2200      	movs	r2, #0
   1486a:	701a      	strb	r2, [r3, #0]
	while (1)
	{
		reg = ADC_ReadReg(CTRL2_ADDR);
   1486c:	1dfc      	adds	r4, r7, #7
   1486e:	2002      	movs	r0, #2
   14870:	4b21      	ldr	r3, [pc, #132]	; (148f8 <ADC_Calibration+0x98>)
   14872:	4798      	blx	r3
   14874:	0003      	movs	r3, r0
   14876:	7023      	strb	r3, [r4, #0]
		reg &= ~(CALMOD_Msk | CALS_Msk);
   14878:	1dfb      	adds	r3, r7, #7
   1487a:	1dfa      	adds	r2, r7, #7
   1487c:	7812      	ldrb	r2, [r2, #0]
   1487e:	2107      	movs	r1, #7
   14880:	438a      	bics	r2, r1
   14882:	701a      	strb	r2, [r3, #0]

		/* Set Calibration mode */
		reg |= CALMOD_OFFSET_INTERNAL;   /* Calibration mode = Internal Offset Calibration */
   14884:	1dfb      	adds	r3, r7, #7
   14886:	1dfa      	adds	r2, r7, #7
   14888:	7812      	ldrb	r2, [r2, #0]
   1488a:	701a      	strb	r2, [r3, #0]
		ADC_WriteReg(CTRL2_ADDR, reg);
   1488c:	1dfb      	adds	r3, r7, #7
   1488e:	781b      	ldrb	r3, [r3, #0]
   14890:	0019      	movs	r1, r3
   14892:	2002      	movs	r0, #2
   14894:	4b19      	ldr	r3, [pc, #100]	; (148fc <ADC_Calibration+0x9c>)
   14896:	4798      	blx	r3
		/* Start calibration */
		reg |= CALS_ACTION;              /* Start calibration */
   14898:	1dfb      	adds	r3, r7, #7
   1489a:	1dfa      	adds	r2, r7, #7
   1489c:	7812      	ldrb	r2, [r2, #0]
   1489e:	2104      	movs	r1, #4
   148a0:	430a      	orrs	r2, r1
   148a2:	701a      	strb	r2, [r3, #0]
		ADC_WriteReg(CTRL2_ADDR, reg);
   148a4:	1dfb      	adds	r3, r7, #7
   148a6:	781b      	ldrb	r3, [r3, #0]
   148a8:	0019      	movs	r1, r3
   148aa:	2002      	movs	r0, #2
   148ac:	4b13      	ldr	r3, [pc, #76]	; (148fc <ADC_Calibration+0x9c>)
   148ae:	4798      	blx	r3

		while (1)
		{
			/* Wait for calibration finish */
			delay_ms(50); /* Wait 50ms */
   148b0:	2032      	movs	r0, #50	; 0x32
   148b2:	4b13      	ldr	r3, [pc, #76]	; (14900 <ADC_Calibration+0xa0>)
   148b4:	4798      	blx	r3
			/* Read calibration result */
			reg = ADC_ReadReg(CTRL2_ADDR);
   148b6:	1dfc      	adds	r4, r7, #7
   148b8:	2002      	movs	r0, #2
   148ba:	4b0f      	ldr	r3, [pc, #60]	; (148f8 <ADC_Calibration+0x98>)
   148bc:	4798      	blx	r3
   148be:	0003      	movs	r3, r0
   148c0:	7023      	strb	r3, [r4, #0]

			if ((reg & CALS_Msk) == CALS_FINISHED)
   148c2:	1dfb      	adds	r3, r7, #7
   148c4:	781b      	ldrb	r3, [r3, #0]
   148c6:	2204      	movs	r2, #4
   148c8:	4013      	ands	r3, r2
   148ca:	d000      	beq.n	148ce <ADC_Calibration+0x6e>
			delay_ms(50); /* Wait 50ms */
   148cc:	e7f0      	b.n	148b0 <ADC_Calibration+0x50>
			break;
   148ce:	46c0      	nop			; (mov r8, r8)
		}
		reg &= CAL_ERR_Msk;
   148d0:	1dfb      	adds	r3, r7, #7
   148d2:	1dfa      	adds	r2, r7, #7
   148d4:	7812      	ldrb	r2, [r2, #0]
   148d6:	2108      	movs	r1, #8
   148d8:	400a      	ands	r2, r1
   148da:	701a      	strb	r2, [r3, #0]
		if ((reg & CAL_ERR_Msk) == 0) /* There is no error */
   148dc:	1dfb      	adds	r3, r7, #7
   148de:	781b      	ldrb	r3, [r3, #0]
   148e0:	2208      	movs	r2, #8
   148e2:	4013      	ands	r3, r2
   148e4:	d000      	beq.n	148e8 <ADC_Calibration+0x88>
		reg = ADC_ReadReg(CTRL2_ADDR);
   148e6:	e7c1      	b.n	1486c <ADC_Calibration+0xc>
		break;
   148e8:	46c0      	nop			; (mov r8, r8)
	}
	delay_ms(1);    /* Wait 1 ms */
   148ea:	2001      	movs	r0, #1
   148ec:	4b04      	ldr	r3, [pc, #16]	; (14900 <ADC_Calibration+0xa0>)
   148ee:	4798      	blx	r3

}
   148f0:	46c0      	nop			; (mov r8, r8)
   148f2:	46bd      	mov	sp, r7
   148f4:	b003      	add	sp, #12
   148f6:	bd90      	pop	{r4, r7, pc}
   148f8:	000147ed 	.word	0x000147ed
   148fc:	00014825 	.word	0x00014825
   14900:	0001f1bd 	.word	0x0001f1bd

00014904 <ADCchip_Init>:

void  ADCchip_Init(void)
{
   14904:	b580      	push	{r7, lr}
   14906:	b082      	sub	sp, #8
   14908:	af00      	add	r7, sp, #0
	uint8_t reg = 0;
   1490a:	1dfb      	adds	r3, r7, #7
   1490c:	2200      	movs	r2, #0
   1490e:	701a      	strb	r2, [r3, #0]

	/* Reset */
	reg =  0x01;                   /* Enter reset mode */
   14910:	1dfb      	adds	r3, r7, #7
   14912:	2201      	movs	r2, #1
   14914:	701a      	strb	r2, [r3, #0]
	ADC_WriteReg(PU_CTRL_ADDR, reg);
   14916:	1dfb      	adds	r3, r7, #7
   14918:	781b      	ldrb	r3, [r3, #0]
   1491a:	0019      	movs	r1, r3
   1491c:	2000      	movs	r0, #0
   1491e:	4b1d      	ldr	r3, [pc, #116]	; (14994 <ADCchip_Init+0x90>)
   14920:	4798      	blx	r3
	delay_ms(1);         /* Wait 1 ms */
   14922:	2001      	movs	r0, #1
   14924:	4b1c      	ldr	r3, [pc, #112]	; (14998 <ADCchip_Init+0x94>)
   14926:	4798      	blx	r3
	
	reg =  0x02 ;                  /* Enter Noraml mode */
   14928:	1dfb      	adds	r3, r7, #7
   1492a:	2202      	movs	r2, #2
   1492c:	701a      	strb	r2, [r3, #0]
	ADC_WriteReg(PU_CTRL_ADDR, reg);
   1492e:	1dfb      	adds	r3, r7, #7
   14930:	781b      	ldrb	r3, [r3, #0]
   14932:	0019      	movs	r1, r3
   14934:	2000      	movs	r0, #0
   14936:	4b17      	ldr	r3, [pc, #92]	; (14994 <ADCchip_Init+0x90>)
   14938:	4798      	blx	r3
	delay_ms(50);         /* Wait 1 ms */
   1493a:	2032      	movs	r0, #50	; 0x32
   1493c:	4b16      	ldr	r3, [pc, #88]	; (14998 <ADCchip_Init+0x94>)
   1493e:	4798      	blx	r3
	reg = (CRP_ACTIVE_LOW |             // DRDY = LOW Active 
	DRDY_SEL_OUTPUT_CONVERSION | // DRDY output = conversion ready 
	VLDO_3V3 |                   // LDO = 3.3V  (no use) 
	GAINS_1);                    // PGA = x1 
*/	
	reg=0x27;
   14940:	1dfb      	adds	r3, r7, #7
   14942:	2227      	movs	r2, #39	; 0x27
   14944:	701a      	strb	r2, [r3, #0]
	ADC_WriteReg(CTRL1_ADDR, reg);
   14946:	1dfb      	adds	r3, r7, #7
   14948:	781b      	ldrb	r3, [r3, #0]
   1494a:	0019      	movs	r1, r3
   1494c:	2001      	movs	r0, #1
   1494e:	4b11      	ldr	r3, [pc, #68]	; (14994 <ADCchip_Init+0x90>)
   14950:	4798      	blx	r3
	delay_ms(1);
   14952:	2001      	movs	r0, #1
   14954:	4b10      	ldr	r3, [pc, #64]	; (14998 <ADCchip_Init+0x94>)
   14956:	4798      	blx	r3
	
	reg=0x86;
   14958:	1dfb      	adds	r3, r7, #7
   1495a:	2286      	movs	r2, #134	; 0x86
   1495c:	701a      	strb	r2, [r3, #0]
	ADC_WriteReg(PU_CTRL_ADDR, reg);
   1495e:	1dfb      	adds	r3, r7, #7
   14960:	781b      	ldrb	r3, [r3, #0]
   14962:	0019      	movs	r1, r3
   14964:	2000      	movs	r0, #0
   14966:	4b0b      	ldr	r3, [pc, #44]	; (14994 <ADCchip_Init+0x90>)
   14968:	4798      	blx	r3
	delay_ms(1);
   1496a:	2001      	movs	r0, #1
   1496c:	4b0a      	ldr	r3, [pc, #40]	; (14998 <ADCchip_Init+0x94>)
   1496e:	4798      	blx	r3
	
	reg=0x30;
   14970:	1dfb      	adds	r3, r7, #7
   14972:	2230      	movs	r2, #48	; 0x30
   14974:	701a      	strb	r2, [r3, #0]
	ADC_WriteReg(OTP_B1_ADDR , reg);
   14976:	1dfb      	adds	r3, r7, #7
   14978:	781b      	ldrb	r3, [r3, #0]
   1497a:	0019      	movs	r1, r3
   1497c:	2015      	movs	r0, #21
   1497e:	4b05      	ldr	r3, [pc, #20]	; (14994 <ADCchip_Init+0x90>)
   14980:	4798      	blx	r3
	delay_ms(1);
   14982:	2001      	movs	r0, #1
   14984:	4b04      	ldr	r3, [pc, #16]	; (14998 <ADCchip_Init+0x94>)
   14986:	4798      	blx	r3
   

	/* Calibration */
	ADC_Calibration();
   14988:	4b04      	ldr	r3, [pc, #16]	; (1499c <ADCchip_Init+0x98>)
   1498a:	4798      	blx	r3
}
   1498c:	46c0      	nop			; (mov r8, r8)
   1498e:	46bd      	mov	sp, r7
   14990:	b002      	add	sp, #8
   14992:	bd80      	pop	{r7, pc}
   14994:	00014825 	.word	0x00014825
   14998:	0001f1bd 	.word	0x0001f1bd
   1499c:	00014861 	.word	0x00014861

000149a0 <ADC_StartConversion>:

void ADC_StartConversion(void)
{
   149a0:	b590      	push	{r4, r7, lr}
   149a2:	b083      	sub	sp, #12
   149a4:	af00      	add	r7, sp, #0
	uint8_t reg = 0;
   149a6:	1dfb      	adds	r3, r7, #7
   149a8:	2200      	movs	r2, #0
   149aa:	701a      	strb	r2, [r3, #0]
	/* Start conversion */
	reg = ADC_ReadReg(PU_CTRL_ADDR);
   149ac:	1dfc      	adds	r4, r7, #7
   149ae:	2000      	movs	r0, #0
   149b0:	4b09      	ldr	r3, [pc, #36]	; (149d8 <ADC_StartConversion+0x38>)
   149b2:	4798      	blx	r3
   149b4:	0003      	movs	r3, r0
   149b6:	7023      	strb	r3, [r4, #0]
	reg |= CS_START_CONVERSION; /* CS=1 */
   149b8:	1dfb      	adds	r3, r7, #7
   149ba:	1dfa      	adds	r2, r7, #7
   149bc:	7812      	ldrb	r2, [r2, #0]
   149be:	2110      	movs	r1, #16
   149c0:	430a      	orrs	r2, r1
   149c2:	701a      	strb	r2, [r3, #0]
	ADC_WriteReg(PU_CTRL_ADDR, reg);
   149c4:	1dfb      	adds	r3, r7, #7
   149c6:	781b      	ldrb	r3, [r3, #0]
   149c8:	0019      	movs	r1, r3
   149ca:	2000      	movs	r0, #0
   149cc:	4b03      	ldr	r3, [pc, #12]	; (149dc <ADC_StartConversion+0x3c>)
   149ce:	4798      	blx	r3
}
   149d0:	46c0      	nop			; (mov r8, r8)
   149d2:	46bd      	mov	sp, r7
   149d4:	b003      	add	sp, #12
   149d6:	bd90      	pop	{r4, r7, pc}
   149d8:	000147ed 	.word	0x000147ed
   149dc:	00014825 	.word	0x00014825

000149e0 <I2C_ReadMultiBytesOneReg>:

int32_t I2C_ReadMultiBytesOneReg(uint8_t u8RegAddr1, uint8_t u8RegAddr2,uint8_t *data,uint32_t len)
{
   149e0:	b580      	push	{r7, lr}
   149e2:	b088      	sub	sp, #32
   149e4:	af00      	add	r7, sp, #0
   149e6:	60ba      	str	r2, [r7, #8]
   149e8:	607b      	str	r3, [r7, #4]
   149ea:	230f      	movs	r3, #15
   149ec:	18fb      	adds	r3, r7, r3
   149ee:	1c02      	adds	r2, r0, #0
   149f0:	701a      	strb	r2, [r3, #0]
   149f2:	230e      	movs	r3, #14
   149f4:	18fb      	adds	r3, r7, r3
   149f6:	1c0a      	adds	r2, r1, #0
   149f8:	701a      	strb	r2, [r3, #0]
	int32_t temp1, temp2, temp3, x;
	temp1 = ADC_ReadReg( 0x02);
   149fa:	2002      	movs	r0, #2
   149fc:	4b14      	ldr	r3, [pc, #80]	; (14a50 <I2C_ReadMultiBytesOneReg+0x70>)
   149fe:	4798      	blx	r3
   14a00:	0003      	movs	r3, r0
   14a02:	61fb      	str	r3, [r7, #28]
	temp1 |= 0 << 7;
	ADC_WriteReg(0x02, temp1);
   14a04:	69fb      	ldr	r3, [r7, #28]
   14a06:	b2db      	uxtb	r3, r3
   14a08:	0019      	movs	r1, r3
   14a0a:	2002      	movs	r0, #2
   14a0c:	4b11      	ldr	r3, [pc, #68]	; (14a54 <I2C_ReadMultiBytesOneReg+0x74>)
   14a0e:	4798      	blx	r3
	delay_ms(1);
   14a10:	2001      	movs	r0, #1
   14a12:	4b11      	ldr	r3, [pc, #68]	; (14a58 <I2C_ReadMultiBytesOneReg+0x78>)
   14a14:	4798      	blx	r3

	temp1 = ADC_ReadReg(0x12);
   14a16:	2012      	movs	r0, #18
   14a18:	4b0d      	ldr	r3, [pc, #52]	; (14a50 <I2C_ReadMultiBytesOneReg+0x70>)
   14a1a:	4798      	blx	r3
   14a1c:	0003      	movs	r3, r0
   14a1e:	61fb      	str	r3, [r7, #28]
	temp2 = ADC_ReadReg(0x13);
   14a20:	2013      	movs	r0, #19
   14a22:	4b0b      	ldr	r3, [pc, #44]	; (14a50 <I2C_ReadMultiBytesOneReg+0x70>)
   14a24:	4798      	blx	r3
   14a26:	0003      	movs	r3, r0
   14a28:	61bb      	str	r3, [r7, #24]
	temp3 = ADC_ReadReg( 0x14);
   14a2a:	2014      	movs	r0, #20
   14a2c:	4b08      	ldr	r3, [pc, #32]	; (14a50 <I2C_ReadMultiBytesOneReg+0x70>)
   14a2e:	4798      	blx	r3
   14a30:	0003      	movs	r3, r0
   14a32:	617b      	str	r3, [r7, #20]

	x = temp1 << 16 | temp2 << 8 | temp3 << 0;
   14a34:	69fb      	ldr	r3, [r7, #28]
   14a36:	041a      	lsls	r2, r3, #16
   14a38:	69bb      	ldr	r3, [r7, #24]
   14a3a:	021b      	lsls	r3, r3, #8
   14a3c:	431a      	orrs	r2, r3
   14a3e:	697b      	ldr	r3, [r7, #20]
   14a40:	4313      	orrs	r3, r2
   14a42:	613b      	str	r3, [r7, #16]
	return x;
   14a44:	693b      	ldr	r3, [r7, #16]
	adcData.lenOut = sizeof(data);

	int32_t err= I2cReadData(&adcData);*/
	
	//int32_t err= reg_read(handle, u8RegAddr2, data,len);
}
   14a46:	0018      	movs	r0, r3
   14a48:	46bd      	mov	sp, r7
   14a4a:	b008      	add	sp, #32
   14a4c:	bd80      	pop	{r7, pc}
   14a4e:	46c0      	nop			; (mov r8, r8)
   14a50:	000147ed 	.word	0x000147ed
   14a54:	00014825 	.word	0x00014825
   14a58:	0001f1bd 	.word	0x0001f1bd

00014a5c <ADC_Read_Conversion_Data>:

uint32_t ADC_Read_Conversion_Data(void)
{
   14a5c:	b590      	push	{r4, r7, lr}
   14a5e:	b083      	sub	sp, #12
   14a60:	af00      	add	r7, sp, #0
	uint8_t rdata[3];
	uint32_t result;
	result = I2C_ReadMultiBytesOneReg( ADC_SLAVE_ADDR, ADCO_B2_ADDR, &rdata[0], 3);
   14a62:	003a      	movs	r2, r7
   14a64:	2303      	movs	r3, #3
   14a66:	2112      	movs	r1, #18
   14a68:	202a      	movs	r0, #42	; 0x2a
   14a6a:	4c04      	ldr	r4, [pc, #16]	; (14a7c <ADC_Read_Conversion_Data+0x20>)
   14a6c:	47a0      	blx	r4
   14a6e:	0003      	movs	r3, r0
   14a70:	607b      	str	r3, [r7, #4]
	//((rdata[0] << 16) | (rdata[1] << 8) | rdata[2]);
	return result;
   14a72:	687b      	ldr	r3, [r7, #4]
}
   14a74:	0018      	movs	r0, r3
   14a76:	46bd      	mov	sp, r7
   14a78:	b003      	add	sp, #12
   14a7a:	bd90      	pop	{r4, r7, pc}
   14a7c:	000149e1 	.word	0x000149e1

00014a80 <Value_conversion>:

void Value_conversion(int value,uint16_t final[2]){
   14a80:	b5b0      	push	{r4, r5, r7, lr}
   14a82:	b092      	sub	sp, #72	; 0x48
   14a84:	af00      	add	r7, sp, #0
   14a86:	6078      	str	r0, [r7, #4]
   14a88:	6039      	str	r1, [r7, #0]
	float gain;
	float offset;
	uint8_t gain_reg[4];
	uint8_t offset_reg[3];
	//int final[2];
	gain_reg[0]=ADC_ReadReg(GCAL1_B3_ADDR);
   14a8a:	2006      	movs	r0, #6
   14a8c:	4b7d      	ldr	r3, [pc, #500]	; (14c84 <Value_conversion+0x204>)
   14a8e:	4798      	blx	r3
   14a90:	0003      	movs	r3, r0
   14a92:	001a      	movs	r2, r3
   14a94:	232c      	movs	r3, #44	; 0x2c
   14a96:	18fb      	adds	r3, r7, r3
   14a98:	701a      	strb	r2, [r3, #0]
	gain_reg[1]=ADC_ReadReg(GCAL1_B2_ADDR);
   14a9a:	2007      	movs	r0, #7
   14a9c:	4b79      	ldr	r3, [pc, #484]	; (14c84 <Value_conversion+0x204>)
   14a9e:	4798      	blx	r3
   14aa0:	0003      	movs	r3, r0
   14aa2:	001a      	movs	r2, r3
   14aa4:	232c      	movs	r3, #44	; 0x2c
   14aa6:	18fb      	adds	r3, r7, r3
   14aa8:	705a      	strb	r2, [r3, #1]
	gain_reg[2]=ADC_ReadReg(GCAL1_B1_ADDR);
   14aaa:	2008      	movs	r0, #8
   14aac:	4b75      	ldr	r3, [pc, #468]	; (14c84 <Value_conversion+0x204>)
   14aae:	4798      	blx	r3
   14ab0:	0003      	movs	r3, r0
   14ab2:	001a      	movs	r2, r3
   14ab4:	232c      	movs	r3, #44	; 0x2c
   14ab6:	18fb      	adds	r3, r7, r3
   14ab8:	709a      	strb	r2, [r3, #2]
	gain_reg[3]=ADC_ReadReg(GCAL1_B0_ADDR);
   14aba:	2009      	movs	r0, #9
   14abc:	4b71      	ldr	r3, [pc, #452]	; (14c84 <Value_conversion+0x204>)
   14abe:	4798      	blx	r3
   14ac0:	0003      	movs	r3, r0
   14ac2:	001a      	movs	r2, r3
   14ac4:	232c      	movs	r3, #44	; 0x2c
   14ac6:	18fb      	adds	r3, r7, r3
   14ac8:	70da      	strb	r2, [r3, #3]
	offset_reg[0]=ADC_ReadReg(OCAL1_B2_ADDR);
   14aca:	2003      	movs	r0, #3
   14acc:	4b6d      	ldr	r3, [pc, #436]	; (14c84 <Value_conversion+0x204>)
   14ace:	4798      	blx	r3
   14ad0:	0003      	movs	r3, r0
   14ad2:	001a      	movs	r2, r3
   14ad4:	2328      	movs	r3, #40	; 0x28
   14ad6:	18fb      	adds	r3, r7, r3
   14ad8:	701a      	strb	r2, [r3, #0]
	offset_reg[1]=ADC_ReadReg(OCAL1_B1_ADDR);
   14ada:	2004      	movs	r0, #4
   14adc:	4b69      	ldr	r3, [pc, #420]	; (14c84 <Value_conversion+0x204>)
   14ade:	4798      	blx	r3
   14ae0:	0003      	movs	r3, r0
   14ae2:	001a      	movs	r2, r3
   14ae4:	2328      	movs	r3, #40	; 0x28
   14ae6:	18fb      	adds	r3, r7, r3
   14ae8:	705a      	strb	r2, [r3, #1]
	offset_reg[2]=ADC_ReadReg(OCAL1_B0_ADDR);
   14aea:	2005      	movs	r0, #5
   14aec:	4b65      	ldr	r3, [pc, #404]	; (14c84 <Value_conversion+0x204>)
   14aee:	4798      	blx	r3
   14af0:	0003      	movs	r3, r0
   14af2:	001a      	movs	r2, r3
   14af4:	2328      	movs	r3, #40	; 0x28
   14af6:	18fb      	adds	r3, r7, r3
   14af8:	709a      	strb	r2, [r3, #2]
	

	for(int j=0;j<4;j++)
   14afa:	2300      	movs	r3, #0
   14afc:	63fb      	str	r3, [r7, #60]	; 0x3c
   14afe:	e002      	b.n	14b06 <Value_conversion+0x86>
   14b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14b02:	3301      	adds	r3, #1
   14b04:	63fb      	str	r3, [r7, #60]	; 0x3c
   14b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14b08:	2b03      	cmp	r3, #3
   14b0a:	ddf9      	ble.n	14b00 <Value_conversion+0x80>
		//SerialConsoleWriteString(help);
		//snprintf(help, 32, "offset_reg [%d]= %d\r\n",j%4,offset_reg[j%4]);
		//SerialConsoleWriteString(help);
	}

	for(int i=31;i>=0;i--){
   14b0c:	231f      	movs	r3, #31
   14b0e:	63bb      	str	r3, [r7, #56]	; 0x38
   14b10:	e02c      	b.n	14b6c <Value_conversion+0xec>
		gain+=(float)(((gain_reg[3-i/8]>>(i%8))&0x01)*(2<<(i-23)*10000));
   14b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14b14:	2b00      	cmp	r3, #0
   14b16:	da00      	bge.n	14b1a <Value_conversion+0x9a>
   14b18:	3307      	adds	r3, #7
   14b1a:	10db      	asrs	r3, r3, #3
   14b1c:	425b      	negs	r3, r3
   14b1e:	3303      	adds	r3, #3
   14b20:	222c      	movs	r2, #44	; 0x2c
   14b22:	18ba      	adds	r2, r7, r2
   14b24:	5cd3      	ldrb	r3, [r2, r3]
   14b26:	0019      	movs	r1, r3
   14b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14b2a:	4a57      	ldr	r2, [pc, #348]	; (14c88 <Value_conversion+0x208>)
   14b2c:	4013      	ands	r3, r2
   14b2e:	d504      	bpl.n	14b3a <Value_conversion+0xba>
   14b30:	3b01      	subs	r3, #1
   14b32:	2208      	movs	r2, #8
   14b34:	4252      	negs	r2, r2
   14b36:	4313      	orrs	r3, r2
   14b38:	3301      	adds	r3, #1
   14b3a:	4119      	asrs	r1, r3
   14b3c:	000b      	movs	r3, r1
   14b3e:	2201      	movs	r2, #1
   14b40:	4013      	ands	r3, r2
   14b42:	6bba      	ldr	r2, [r7, #56]	; 0x38
   14b44:	3a17      	subs	r2, #23
   14b46:	4951      	ldr	r1, [pc, #324]	; (14c8c <Value_conversion+0x20c>)
   14b48:	434a      	muls	r2, r1
   14b4a:	2102      	movs	r1, #2
   14b4c:	4091      	lsls	r1, r2
   14b4e:	000a      	movs	r2, r1
   14b50:	435a      	muls	r2, r3
   14b52:	4b4f      	ldr	r3, [pc, #316]	; (14c90 <Value_conversion+0x210>)
   14b54:	0010      	movs	r0, r2
   14b56:	4798      	blx	r3
   14b58:	1c02      	adds	r2, r0, #0
   14b5a:	4b4e      	ldr	r3, [pc, #312]	; (14c94 <Value_conversion+0x214>)
   14b5c:	1c11      	adds	r1, r2, #0
   14b5e:	6c78      	ldr	r0, [r7, #68]	; 0x44
   14b60:	4798      	blx	r3
   14b62:	1c03      	adds	r3, r0, #0
   14b64:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i=31;i>=0;i--){
   14b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14b68:	3b01      	subs	r3, #1
   14b6a:	63bb      	str	r3, [r7, #56]	; 0x38
   14b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14b6e:	2b00      	cmp	r3, #0
   14b70:	dacf      	bge.n	14b12 <Value_conversion+0x92>
	}
	for(int i=22;i>=0;i--){
   14b72:	2316      	movs	r3, #22
   14b74:	637b      	str	r3, [r7, #52]	; 0x34
   14b76:	e02c      	b.n	14bd2 <Value_conversion+0x152>
		offset+=(float)(((offset_reg[2-i/8]>>(i%8))&0x01)*(2<<(i-23)*10000));
   14b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14b7a:	2b00      	cmp	r3, #0
   14b7c:	da00      	bge.n	14b80 <Value_conversion+0x100>
   14b7e:	3307      	adds	r3, #7
   14b80:	10db      	asrs	r3, r3, #3
   14b82:	425b      	negs	r3, r3
   14b84:	3302      	adds	r3, #2
   14b86:	2228      	movs	r2, #40	; 0x28
   14b88:	18ba      	adds	r2, r7, r2
   14b8a:	5cd3      	ldrb	r3, [r2, r3]
   14b8c:	0019      	movs	r1, r3
   14b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14b90:	4a3d      	ldr	r2, [pc, #244]	; (14c88 <Value_conversion+0x208>)
   14b92:	4013      	ands	r3, r2
   14b94:	d504      	bpl.n	14ba0 <Value_conversion+0x120>
   14b96:	3b01      	subs	r3, #1
   14b98:	2208      	movs	r2, #8
   14b9a:	4252      	negs	r2, r2
   14b9c:	4313      	orrs	r3, r2
   14b9e:	3301      	adds	r3, #1
   14ba0:	4119      	asrs	r1, r3
   14ba2:	000b      	movs	r3, r1
   14ba4:	2201      	movs	r2, #1
   14ba6:	4013      	ands	r3, r2
   14ba8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   14baa:	3a17      	subs	r2, #23
   14bac:	4937      	ldr	r1, [pc, #220]	; (14c8c <Value_conversion+0x20c>)
   14bae:	434a      	muls	r2, r1
   14bb0:	2102      	movs	r1, #2
   14bb2:	4091      	lsls	r1, r2
   14bb4:	000a      	movs	r2, r1
   14bb6:	435a      	muls	r2, r3
   14bb8:	4b35      	ldr	r3, [pc, #212]	; (14c90 <Value_conversion+0x210>)
   14bba:	0010      	movs	r0, r2
   14bbc:	4798      	blx	r3
   14bbe:	1c02      	adds	r2, r0, #0
   14bc0:	4b34      	ldr	r3, [pc, #208]	; (14c94 <Value_conversion+0x214>)
   14bc2:	1c11      	adds	r1, r2, #0
   14bc4:	6c38      	ldr	r0, [r7, #64]	; 0x40
   14bc6:	4798      	blx	r3
   14bc8:	1c03      	adds	r3, r0, #0
   14bca:	643b      	str	r3, [r7, #64]	; 0x40
	for(int i=22;i>=0;i--){
   14bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14bce:	3b01      	subs	r3, #1
   14bd0:	637b      	str	r3, [r7, #52]	; 0x34
   14bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14bd4:	2b00      	cmp	r3, #0
   14bd6:	dacf      	bge.n	14b78 <Value_conversion+0xf8>
	}
	offset*=(float)(1-(offset_reg[0]>>7)&0x01);
   14bd8:	2328      	movs	r3, #40	; 0x28
   14bda:	18fb      	adds	r3, r7, r3
   14bdc:	781b      	ldrb	r3, [r3, #0]
   14bde:	09db      	lsrs	r3, r3, #7
   14be0:	b2db      	uxtb	r3, r3
   14be2:	001a      	movs	r2, r3
   14be4:	2301      	movs	r3, #1
   14be6:	1a9b      	subs	r3, r3, r2
   14be8:	2201      	movs	r2, #1
   14bea:	401a      	ands	r2, r3
   14bec:	4b28      	ldr	r3, [pc, #160]	; (14c90 <Value_conversion+0x210>)
   14bee:	0010      	movs	r0, r2
   14bf0:	4798      	blx	r3
   14bf2:	1c02      	adds	r2, r0, #0
   14bf4:	4b28      	ldr	r3, [pc, #160]	; (14c98 <Value_conversion+0x218>)
   14bf6:	1c11      	adds	r1, r2, #0
   14bf8:	6c38      	ldr	r0, [r7, #64]	; 0x40
   14bfa:	4798      	blx	r3
   14bfc:	1c03      	adds	r3, r0, #0
   14bfe:	643b      	str	r3, [r7, #64]	; 0x40
	//snprintf(help, 32, " gain= %d\r\n",gain);
	//SerialConsoleWriteString(help);
	//snprintf(help, 32, "final offset= %d\r\n",offset);
	//SerialConsoleWriteString(help);
	
	calibrate_adc=(float)gain/10000*((float)value-(float)offset/10000);
   14c00:	4b26      	ldr	r3, [pc, #152]	; (14c9c <Value_conversion+0x21c>)
   14c02:	4927      	ldr	r1, [pc, #156]	; (14ca0 <Value_conversion+0x220>)
   14c04:	6c78      	ldr	r0, [r7, #68]	; 0x44
   14c06:	4798      	blx	r3
   14c08:	1c03      	adds	r3, r0, #0
   14c0a:	1c1c      	adds	r4, r3, #0
   14c0c:	4b20      	ldr	r3, [pc, #128]	; (14c90 <Value_conversion+0x210>)
   14c0e:	6878      	ldr	r0, [r7, #4]
   14c10:	4798      	blx	r3
   14c12:	1c05      	adds	r5, r0, #0
   14c14:	4b21      	ldr	r3, [pc, #132]	; (14c9c <Value_conversion+0x21c>)
   14c16:	4922      	ldr	r1, [pc, #136]	; (14ca0 <Value_conversion+0x220>)
   14c18:	6c38      	ldr	r0, [r7, #64]	; 0x40
   14c1a:	4798      	blx	r3
   14c1c:	1c03      	adds	r3, r0, #0
   14c1e:	1c1a      	adds	r2, r3, #0
   14c20:	4b20      	ldr	r3, [pc, #128]	; (14ca4 <Value_conversion+0x224>)
   14c22:	1c11      	adds	r1, r2, #0
   14c24:	1c28      	adds	r0, r5, #0
   14c26:	4798      	blx	r3
   14c28:	1c03      	adds	r3, r0, #0
   14c2a:	1c1a      	adds	r2, r3, #0
   14c2c:	4b1a      	ldr	r3, [pc, #104]	; (14c98 <Value_conversion+0x218>)
   14c2e:	1c11      	adds	r1, r2, #0
   14c30:	1c20      	adds	r0, r4, #0
   14c32:	4798      	blx	r3
   14c34:	1c03      	adds	r3, r0, #0
   14c36:	633b      	str	r3, [r7, #48]	; 0x30
	
	final[0]=(int)calibrate_adc;
   14c38:	4b1b      	ldr	r3, [pc, #108]	; (14ca8 <Value_conversion+0x228>)
   14c3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
   14c3c:	4798      	blx	r3
   14c3e:	0003      	movs	r3, r0
   14c40:	b29a      	uxth	r2, r3
   14c42:	683b      	ldr	r3, [r7, #0]
   14c44:	801a      	strh	r2, [r3, #0]
	final[1]=10000*(calibrate_adc-final[0]);
   14c46:	683b      	ldr	r3, [r7, #0]
   14c48:	1c9c      	adds	r4, r3, #2
   14c4a:	683b      	ldr	r3, [r7, #0]
   14c4c:	881b      	ldrh	r3, [r3, #0]
   14c4e:	001a      	movs	r2, r3
   14c50:	4b0f      	ldr	r3, [pc, #60]	; (14c90 <Value_conversion+0x210>)
   14c52:	0010      	movs	r0, r2
   14c54:	4798      	blx	r3
   14c56:	1c02      	adds	r2, r0, #0
   14c58:	4b12      	ldr	r3, [pc, #72]	; (14ca4 <Value_conversion+0x224>)
   14c5a:	1c11      	adds	r1, r2, #0
   14c5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
   14c5e:	4798      	blx	r3
   14c60:	1c03      	adds	r3, r0, #0
   14c62:	1c1a      	adds	r2, r3, #0
   14c64:	4b0c      	ldr	r3, [pc, #48]	; (14c98 <Value_conversion+0x218>)
   14c66:	490e      	ldr	r1, [pc, #56]	; (14ca0 <Value_conversion+0x220>)
   14c68:	1c10      	adds	r0, r2, #0
   14c6a:	4798      	blx	r3
   14c6c:	1c03      	adds	r3, r0, #0
   14c6e:	1c1a      	adds	r2, r3, #0
   14c70:	4b0e      	ldr	r3, [pc, #56]	; (14cac <Value_conversion+0x22c>)
   14c72:	1c10      	adds	r0, r2, #0
   14c74:	4798      	blx	r3
   14c76:	0003      	movs	r3, r0
   14c78:	b29b      	uxth	r3, r3
   14c7a:	8023      	strh	r3, [r4, #0]
	//snprintf(help, 32, "final_int= %d\r\n",final[0]);
	//SerialConsoleWriteString(help);
	//snprintf(help, 32, "final_decimal= %d\r\n",final[1]);
	//SerialConsoleWriteString(help);
	return final;
   14c7c:	46c0      	nop			; (mov r8, r8)
	//final=(float)((float)value / 16777216) * (float)(3.14);
   14c7e:	46bd      	mov	sp, r7
   14c80:	b012      	add	sp, #72	; 0x48
   14c82:	bdb0      	pop	{r4, r5, r7, pc}
   14c84:	000147ed 	.word	0x000147ed
   14c88:	80000007 	.word	0x80000007
   14c8c:	00002710 	.word	0x00002710
   14c90:	00032a01 	.word	0x00032a01
   14c94:	00031e95 	.word	0x00031e95
   14c98:	00032449 	.word	0x00032449
   14c9c:	000321b9 	.word	0x000321b9
   14ca0:	461c4000 	.word	0x461c4000
   14ca4:	00032689 	.word	0x00032689
   14ca8:	000329c1 	.word	0x000329c1
   14cac:	00031e65 	.word	0x00031e65

00014cb0 <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
   14cb0:	b580      	push	{r7, lr}
   14cb2:	b084      	sub	sp, #16
   14cb4:	af00      	add	r7, sp, #0
   14cb6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   14cb8:	687b      	ldr	r3, [r7, #4]
   14cba:	681b      	ldr	r3, [r3, #0]
   14cbc:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   14cbe:	46c0      	nop			; (mov r8, r8)
   14cc0:	68fb      	ldr	r3, [r7, #12]
   14cc2:	689b      	ldr	r3, [r3, #8]
   14cc4:	2202      	movs	r2, #2
   14cc6:	4013      	ands	r3, r2
   14cc8:	d1fa      	bne.n	14cc0 <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   14cca:	68fb      	ldr	r3, [r7, #12]
   14ccc:	681b      	ldr	r3, [r3, #0]
   14cce:	2202      	movs	r2, #2
   14cd0:	431a      	orrs	r2, r3
   14cd2:	68fb      	ldr	r3, [r7, #12]
   14cd4:	601a      	str	r2, [r3, #0]
}
   14cd6:	46c0      	nop			; (mov r8, r8)
   14cd8:	46bd      	mov	sp, r7
   14cda:	b004      	add	sp, #16
   14cdc:	bd80      	pop	{r7, pc}
	...

00014ce0 <configure_tcc>:
 *  Author: 60267
 */ 
#include "servo.h"
struct tcc_module tcc_instance;
void configure_tcc(void)
{
   14ce0:	b580      	push	{r7, lr}
   14ce2:	b0aa      	sub	sp, #168	; 0xa8
   14ce4:	af00      	add	r7, sp, #0
	struct tcc_config config_tcc;
	tcc_get_config_defaults(&config_tcc, CONF_PWM_MODULE);
   14ce6:	4a15      	ldr	r2, [pc, #84]	; (14d3c <configure_tcc+0x5c>)
   14ce8:	1d3b      	adds	r3, r7, #4
   14cea:	0011      	movs	r1, r2
   14cec:	0018      	movs	r0, r3
   14cee:	4b14      	ldr	r3, [pc, #80]	; (14d40 <configure_tcc+0x60>)
   14cf0:	4798      	blx	r3
	config_tcc.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV4;
   14cf2:	1d3b      	adds	r3, r7, #4
   14cf4:	2202      	movs	r2, #2
   14cf6:	72da      	strb	r2, [r3, #11]
	config_tcc.counter.period = 0xBA2E;
   14cf8:	1d3b      	adds	r3, r7, #4
   14cfa:	4a12      	ldr	r2, [pc, #72]	; (14d44 <configure_tcc+0x64>)
   14cfc:	605a      	str	r2, [r3, #4]
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
   14cfe:	1d3b      	adds	r3, r7, #4
   14d00:	2202      	movs	r2, #2
   14d02:	761a      	strb	r2, [r3, #24]
	config_tcc.compare.match[CONF_PWM_CHANNEL] = (0xBA2E / 2);
   14d04:	1d3b      	adds	r3, r7, #4
   14d06:	4a10      	ldr	r2, [pc, #64]	; (14d48 <configure_tcc+0x68>)
   14d08:	625a      	str	r2, [r3, #36]	; 0x24
	config_tcc.pins.enable_wave_out_pin[CONF_PWM_OUTPUT] = true;
   14d0a:	1d3b      	adds	r3, r7, #4
   14d0c:	229a      	movs	r2, #154	; 0x9a
   14d0e:	2101      	movs	r1, #1
   14d10:	5499      	strb	r1, [r3, r2]
	config_tcc.pins.wave_out_pin[CONF_PWM_OUTPUT]        = CONF_PWM_OUT_PIN;
   14d12:	1d3b      	adds	r3, r7, #4
   14d14:	220a      	movs	r2, #10
   14d16:	661a      	str	r2, [r3, #96]	; 0x60
	config_tcc.pins.wave_out_pin_mux[CONF_PWM_OUTPUT]    = CONF_PWM_OUT_MUX;
   14d18:	1d3b      	adds	r3, r7, #4
   14d1a:	2280      	movs	r2, #128	; 0x80
   14d1c:	2105      	movs	r1, #5
   14d1e:	5099      	str	r1, [r3, r2]
	tcc_init(&tcc_instance, CONF_PWM_MODULE, &config_tcc);
   14d20:	1d3a      	adds	r2, r7, #4
   14d22:	4906      	ldr	r1, [pc, #24]	; (14d3c <configure_tcc+0x5c>)
   14d24:	4b09      	ldr	r3, [pc, #36]	; (14d4c <configure_tcc+0x6c>)
   14d26:	0018      	movs	r0, r3
   14d28:	4b09      	ldr	r3, [pc, #36]	; (14d50 <configure_tcc+0x70>)
   14d2a:	4798      	blx	r3
	tcc_enable(&tcc_instance);
   14d2c:	4b07      	ldr	r3, [pc, #28]	; (14d4c <configure_tcc+0x6c>)
   14d2e:	0018      	movs	r0, r3
   14d30:	4b08      	ldr	r3, [pc, #32]	; (14d54 <configure_tcc+0x74>)
   14d32:	4798      	blx	r3
}
   14d34:	46c0      	nop			; (mov r8, r8)
   14d36:	46bd      	mov	sp, r7
   14d38:	b02a      	add	sp, #168	; 0xa8
   14d3a:	bd80      	pop	{r7, pc}
   14d3c:	42002000 	.word	0x42002000
   14d40:	000293fd 	.word	0x000293fd
   14d44:	0000ba2e 	.word	0x0000ba2e
   14d48:	00005d17 	.word	0x00005d17
   14d4c:	20004834 	.word	0x20004834
   14d50:	00029a59 	.word	0x00029a59
   14d54:	00014cb1 	.word	0x00014cb1

00014d58 <servo_setDuty>:


void servo_setDuty(int dutyCycle)
{
   14d58:	b580      	push	{r7, lr}
   14d5a:	b084      	sub	sp, #16
   14d5c:	af00      	add	r7, sp, #0
   14d5e:	6078      	str	r0, [r7, #4]
	uint32_t compareValue = 0xBA2E / dutyCycle;
   14d60:	4b07      	ldr	r3, [pc, #28]	; (14d80 <servo_setDuty+0x28>)
   14d62:	6879      	ldr	r1, [r7, #4]
   14d64:	4807      	ldr	r0, [pc, #28]	; (14d84 <servo_setDuty+0x2c>)
   14d66:	4798      	blx	r3
   14d68:	0003      	movs	r3, r0
   14d6a:	60fb      	str	r3, [r7, #12]
	tcc_set_compare_value(&tcc_instance, CONF_PWM_CHANNEL, compareValue);
   14d6c:	68fa      	ldr	r2, [r7, #12]
   14d6e:	4b06      	ldr	r3, [pc, #24]	; (14d88 <servo_setDuty+0x30>)
   14d70:	2102      	movs	r1, #2
   14d72:	0018      	movs	r0, r3
   14d74:	4b05      	ldr	r3, [pc, #20]	; (14d8c <servo_setDuty+0x34>)
   14d76:	4798      	blx	r3
   14d78:	46c0      	nop			; (mov r8, r8)
   14d7a:	46bd      	mov	sp, r7
   14d7c:	b004      	add	sp, #16
   14d7e:	bd80      	pop	{r7, pc}
   14d80:	00031c39 	.word	0x00031c39
   14d84:	0000ba2e 	.word	0x0000ba2e
   14d88:	20004834 	.word	0x20004834
   14d8c:	00029f19 	.word	0x00029f19

00014d90 <vUiHandlerTask>:
 * @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
 * @return		Should not return! This is a task defining function.
 * @note
 */
void vUiHandlerTask(void *pvParameters)
{
   14d90:	b590      	push	{r4, r7, lr}
   14d92:	b0a1      	sub	sp, #132	; 0x84
   14d94:	af00      	add	r7, sp, #0
   14d96:	6078      	str	r0, [r7, #4]
    // Do initialization code here
	SerialConsoleWriteString("UI Task Started!");
   14d98:	4b47      	ldr	r3, [pc, #284]	; (14eb8 <vUiHandlerTask+0x128>)
   14d9a:	0018      	movs	r0, r3
   14d9c:	4b47      	ldr	r3, [pc, #284]	; (14ebc <vUiHandlerTask+0x12c>)
   14d9e:	4798      	blx	r3
	configure_tcc();
   14da0:	4b47      	ldr	r3, [pc, #284]	; (14ec0 <vUiHandlerTask+0x130>)
   14da2:	4798      	blx	r3
	servo_setDuty(2);
   14da4:	2002      	movs	r0, #2
   14da6:	4b47      	ldr	r3, [pc, #284]	; (14ec4 <vUiHandlerTask+0x134>)
   14da8:	4798      	blx	r3

	
    // Graphics Test - Students to uncomment to test out the OLED driver if you are using it! 
	
    gfx_mono_init();
   14daa:	4b47      	ldr	r3, [pc, #284]	; (14ec8 <vUiHandlerTask+0x138>)
   14dac:	4798      	blx	r3
    gfx_mono_draw_string("ESE516", 0, 8, &sysfont);
   14dae:	4b47      	ldr	r3, [pc, #284]	; (14ecc <vUiHandlerTask+0x13c>)
   14db0:	4847      	ldr	r0, [pc, #284]	; (14ed0 <vUiHandlerTask+0x140>)
   14db2:	2208      	movs	r2, #8
   14db4:	2100      	movs	r1, #0
   14db6:	4c47      	ldr	r4, [pc, #284]	; (14ed4 <vUiHandlerTask+0x144>)
   14db8:	47a0      	blx	r4
    gfx_mono_draw_string("HIGHWAY", 0, 18, &sysfont);
   14dba:	4b44      	ldr	r3, [pc, #272]	; (14ecc <vUiHandlerTask+0x13c>)
   14dbc:	4846      	ldr	r0, [pc, #280]	; (14ed8 <vUiHandlerTask+0x148>)
   14dbe:	2212      	movs	r2, #18
   14dc0:	2100      	movs	r1, #0
   14dc2:	4c44      	ldr	r4, [pc, #272]	; (14ed4 <vUiHandlerTask+0x144>)
   14dc4:	47a0      	blx	r4
	uint8_t count = 0;
   14dc6:	237f      	movs	r3, #127	; 0x7f
   14dc8:	18fb      	adds	r3, r7, r3
   14dca:	2200      	movs	r2, #0
   14dcc:	701a      	strb	r2, [r3, #0]
	uint8_t count_nau = 0;
   14dce:	237e      	movs	r3, #126	; 0x7e
   14dd0:	18fb      	adds	r3, r7, r3
   14dd2:	2200      	movs	r2, #0
   14dd4:	701a      	strb	r2, [r3, #0]
	uint16_t nau_i_total = 0;
   14dd6:	237c      	movs	r3, #124	; 0x7c
   14dd8:	18fb      	adds	r3, r7, r3
   14dda:	2200      	movs	r2, #0
   14ddc:	801a      	strh	r2, [r3, #0]
	uint16_t nau_f_total = 0;
   14dde:	237a      	movs	r3, #122	; 0x7a
   14de0:	18fb      	adds	r3, r7, r3
   14de2:	2200      	movs	r2, #0
   14de4:	801a      	strh	r2, [r3, #0]
	char oled_display[24];
	bool servo_flag = false;
   14de6:	2379      	movs	r3, #121	; 0x79
   14de8:	18fb      	adds	r3, r7, r3
   14dea:	2200      	movs	r2, #0
   14dec:	701a      	strb	r2, [r3, #0]
	ADCchip_Init();
   14dee:	4b3b      	ldr	r3, [pc, #236]	; (14edc <vUiHandlerTask+0x14c>)
   14df0:	4798      	blx	r3
	

    // Here we start the loop for the UI State Machine
    while (1) {
		ADC_StartConversion();
   14df2:	4b3b      	ldr	r3, [pc, #236]	; (14ee0 <vUiHandlerTask+0x150>)
   14df4:	4798      	blx	r3
		struct NauPacket nauvar;
		
		while ((ADC_ReadReg(PU_CTRL_ADDR)&CR_Msk) != CR_DATA_RDY);
   14df6:	46c0      	nop			; (mov r8, r8)
   14df8:	2000      	movs	r0, #0
   14dfa:	4b3a      	ldr	r3, [pc, #232]	; (14ee4 <vUiHandlerTask+0x154>)
   14dfc:	4798      	blx	r3
   14dfe:	0003      	movs	r3, r0
   14e00:	001a      	movs	r2, r3
   14e02:	2320      	movs	r3, #32
   14e04:	4013      	ands	r3, r2
   14e06:	2b20      	cmp	r3, #32
   14e08:	d1f6      	bne.n	14df8 <vUiHandlerTask+0x68>
		uint32_t ADC_value=ADC_Read_Conversion_Data();
   14e0a:	4b37      	ldr	r3, [pc, #220]	; (14ee8 <vUiHandlerTask+0x158>)
   14e0c:	4798      	blx	r3
   14e0e:	0003      	movs	r3, r0
   14e10:	677b      	str	r3, [r7, #116]	; 0x74
		uint16_t ADC_Array[2];
		//int ADC_Array[2];
		Value_conversion(ADC_value,ADC_Array);
   14e12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   14e14:	224c      	movs	r2, #76	; 0x4c
   14e16:	18ba      	adds	r2, r7, r2
   14e18:	0011      	movs	r1, r2
   14e1a:	0018      	movs	r0, r3
   14e1c:	4b33      	ldr	r3, [pc, #204]	; (14eec <vUiHandlerTask+0x15c>)
   14e1e:	4798      	blx	r3
		char help[64];
		//snprintf(help, 64, "input vol = VIN1P - VIN1N = %d\r\n",ADC_Array[0]);
		nauvar.nau_i = ADC_Array[0];
   14e20:	234c      	movs	r3, #76	; 0x4c
   14e22:	18fb      	adds	r3, r7, r3
   14e24:	881a      	ldrh	r2, [r3, #0]
   14e26:	2350      	movs	r3, #80	; 0x50
   14e28:	18fb      	adds	r3, r7, r3
   14e2a:	801a      	strh	r2, [r3, #0]
		nauvar.nau_f = ADC_Array[1];
   14e2c:	234c      	movs	r3, #76	; 0x4c
   14e2e:	18fb      	adds	r3, r7, r3
   14e30:	885a      	ldrh	r2, [r3, #2]
   14e32:	2350      	movs	r3, #80	; 0x50
   14e34:	18fb      	adds	r3, r7, r3
   14e36:	805a      	strh	r2, [r3, #2]
		//nau_i_total = ADC_Array[0] + nau_i_total;
		//nau_f_total = ADC_Array[1] + nau_f_total;
		
		int error = WifiAddNauDataToQueue(&nauvar);
   14e38:	2350      	movs	r3, #80	; 0x50
   14e3a:	18fb      	adds	r3, r7, r3
   14e3c:	0018      	movs	r0, r3
   14e3e:	4b2c      	ldr	r3, [pc, #176]	; (14ef0 <vUiHandlerTask+0x160>)
   14e40:	4798      	blx	r3
   14e42:	0003      	movs	r3, r0
   14e44:	673b      	str	r3, [r7, #112]	; 0x70
		//{
			//count = count + 1;
		//}
		//else
		//{
			count = 0;
   14e46:	237f      	movs	r3, #127	; 0x7f
   14e48:	18fb      	adds	r3, r7, r3
   14e4a:	2200      	movs	r2, #0
   14e4c:	701a      	strb	r2, [r3, #0]
			//gfx_mono_init();
			int result = ADC_Array[0] + ADC_Array[1] / 10000 - 112;
   14e4e:	234c      	movs	r3, #76	; 0x4c
   14e50:	18fb      	adds	r3, r7, r3
   14e52:	881b      	ldrh	r3, [r3, #0]
   14e54:	001c      	movs	r4, r3
   14e56:	234c      	movs	r3, #76	; 0x4c
   14e58:	18fb      	adds	r3, r7, r3
   14e5a:	885a      	ldrh	r2, [r3, #2]
   14e5c:	4b25      	ldr	r3, [pc, #148]	; (14ef4 <vUiHandlerTask+0x164>)
   14e5e:	4926      	ldr	r1, [pc, #152]	; (14ef8 <vUiHandlerTask+0x168>)
   14e60:	0010      	movs	r0, r2
   14e62:	4798      	blx	r3
   14e64:	0003      	movs	r3, r0
   14e66:	b29b      	uxth	r3, r3
   14e68:	18e3      	adds	r3, r4, r3
   14e6a:	3b70      	subs	r3, #112	; 0x70
   14e6c:	66fb      	str	r3, [r7, #108]	; 0x6c
			result = getValue(result);
   14e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   14e70:	0018      	movs	r0, r3
   14e72:	4b22      	ldr	r3, [pc, #136]	; (14efc <vUiHandlerTask+0x16c>)
   14e74:	4798      	blx	r3
   14e76:	0003      	movs	r3, r0
   14e78:	66fb      	str	r3, [r7, #108]	; 0x6c
			if(result == -1){
   14e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   14e7c:	3301      	adds	r3, #1
   14e7e:	d106      	bne.n	14e8e <vUiHandlerTask+0xfe>
				gfx_mono_draw_string("Undefined!", 0, 28, &sysfont);
   14e80:	4b12      	ldr	r3, [pc, #72]	; (14ecc <vUiHandlerTask+0x13c>)
   14e82:	481f      	ldr	r0, [pc, #124]	; (14f00 <vUiHandlerTask+0x170>)
   14e84:	221c      	movs	r2, #28
   14e86:	2100      	movs	r1, #0
   14e88:	4c12      	ldr	r4, [pc, #72]	; (14ed4 <vUiHandlerTask+0x144>)
   14e8a:	47a0      	blx	r4
   14e8c:	e00d      	b.n	14eaa <vUiHandlerTask+0x11a>
			}
			else{
				sprintf(oled_display, "$ %d", result);
   14e8e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   14e90:	491c      	ldr	r1, [pc, #112]	; (14f04 <vUiHandlerTask+0x174>)
   14e92:	2354      	movs	r3, #84	; 0x54
   14e94:	18fb      	adds	r3, r7, r3
   14e96:	0018      	movs	r0, r3
   14e98:	4b1b      	ldr	r3, [pc, #108]	; (14f08 <vUiHandlerTask+0x178>)
   14e9a:	4798      	blx	r3
				gfx_mono_draw_string(oled_display, 0, 28, &sysfont);
   14e9c:	4b0b      	ldr	r3, [pc, #44]	; (14ecc <vUiHandlerTask+0x13c>)
   14e9e:	2254      	movs	r2, #84	; 0x54
   14ea0:	18b8      	adds	r0, r7, r2
   14ea2:	221c      	movs	r2, #28
   14ea4:	2100      	movs	r1, #0
   14ea6:	4c0b      	ldr	r4, [pc, #44]	; (14ed4 <vUiHandlerTask+0x144>)
   14ea8:	47a0      	blx	r4
		//}
		
		
		
        // After execution, you can put a thread to sleep for some time.
        vTaskDelay(4000);
   14eaa:	23fa      	movs	r3, #250	; 0xfa
   14eac:	011b      	lsls	r3, r3, #4
   14eae:	0018      	movs	r0, r3
   14eb0:	4b16      	ldr	r3, [pc, #88]	; (14f0c <vUiHandlerTask+0x17c>)
   14eb2:	4798      	blx	r3
    while (1) {
   14eb4:	e79d      	b.n	14df2 <vUiHandlerTask+0x62>
   14eb6:	46c0      	nop			; (mov r8, r8)
   14eb8:	00035ed8 	.word	0x00035ed8
   14ebc:	0001ce05 	.word	0x0001ce05
   14ec0:	00014ce1 	.word	0x00014ce1
   14ec4:	00014d59 	.word	0x00014d59
   14ec8:	0001287d 	.word	0x0001287d
   14ecc:	20000000 	.word	0x20000000
   14ed0:	00035eec 	.word	0x00035eec
   14ed4:	00012721 	.word	0x00012721
   14ed8:	00035ef4 	.word	0x00035ef4
   14edc:	00014905 	.word	0x00014905
   14ee0:	000149a1 	.word	0x000149a1
   14ee4:	000147ed 	.word	0x000147ed
   14ee8:	00014a5d 	.word	0x00014a5d
   14eec:	00014a81 	.word	0x00014a81
   14ef0:	00016555 	.word	0x00016555
   14ef4:	00031b25 	.word	0x00031b25
   14ef8:	00002710 	.word	0x00002710
   14efc:	00014f11 	.word	0x00014f11
   14f00:	00035efc 	.word	0x00035efc
   14f04:	00035f08 	.word	0x00035f08
   14f08:	0003489d 	.word	0x0003489d
   14f0c:	0001b1b1 	.word	0x0001b1b1

00014f10 <getValue>:
    }
}
int getValue(int ret){
   14f10:	b580      	push	{r7, lr}
   14f12:	b082      	sub	sp, #8
   14f14:	af00      	add	r7, sp, #0
   14f16:	6078      	str	r0, [r7, #4]
	if (ret >= 3 && ret < 20) {
   14f18:	687b      	ldr	r3, [r7, #4]
   14f1a:	2b02      	cmp	r3, #2
   14f1c:	dd04      	ble.n	14f28 <getValue+0x18>
   14f1e:	687b      	ldr	r3, [r7, #4]
   14f20:	2b13      	cmp	r3, #19
   14f22:	dc01      	bgt.n	14f28 <getValue+0x18>
		return 3;
   14f24:	2303      	movs	r3, #3
   14f26:	e00e      	b.n	14f46 <getValue+0x36>
		} else if (ret >= 25 && ret < 55) {
   14f28:	687b      	ldr	r3, [r7, #4]
   14f2a:	2b18      	cmp	r3, #24
   14f2c:	dd04      	ble.n	14f38 <getValue+0x28>
   14f2e:	687b      	ldr	r3, [r7, #4]
   14f30:	2b36      	cmp	r3, #54	; 0x36
   14f32:	dc01      	bgt.n	14f38 <getValue+0x28>
			return 7;
   14f34:	2307      	movs	r3, #7
   14f36:	e006      	b.n	14f46 <getValue+0x36>
		} else if (ret <= 3) {
   14f38:	687b      	ldr	r3, [r7, #4]
   14f3a:	2b03      	cmp	r3, #3
   14f3c:	dc01      	bgt.n	14f42 <getValue+0x32>
			return 0;
   14f3e:	2300      	movs	r3, #0
   14f40:	e001      	b.n	14f46 <getValue+0x36>
		} else {
			return -1;
   14f42:	2301      	movs	r3, #1
   14f44:	425b      	negs	r3, r3
	}
   14f46:	0018      	movs	r0, r3
   14f48:	46bd      	mov	sp, r7
   14f4a:	b002      	add	sp, #8
   14f4c:	bd80      	pop	{r7, pc}
	...

00014f50 <NVIC_SystemReset>:
{
   14f50:	b580      	push	{r7, lr}
   14f52:	af00      	add	r7, sp, #0
   14f54:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   14f58:	4b02      	ldr	r3, [pc, #8]	; (14f64 <NVIC_SystemReset+0x14>)
   14f5a:	4a03      	ldr	r2, [pc, #12]	; (14f68 <NVIC_SystemReset+0x18>)
   14f5c:	60da      	str	r2, [r3, #12]
   14f5e:	f3bf 8f4f 	dsb	sy
  while(1);                                                    /* wait until reset */
   14f62:	e7fe      	b.n	14f62 <NVIC_SystemReset+0x12>
   14f64:	e000ed00 	.word	0xe000ed00
   14f68:	05fa0004 	.word	0x05fa0004

00014f6c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   14f6c:	b580      	push	{r7, lr}
   14f6e:	b084      	sub	sp, #16
   14f70:	af00      	add	r7, sp, #0
   14f72:	0002      	movs	r2, r0
   14f74:	1dfb      	adds	r3, r7, #7
   14f76:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   14f78:	230f      	movs	r3, #15
   14f7a:	18fb      	adds	r3, r7, r3
   14f7c:	1dfa      	adds	r2, r7, #7
   14f7e:	7812      	ldrb	r2, [r2, #0]
   14f80:	09d2      	lsrs	r2, r2, #7
   14f82:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   14f84:	230e      	movs	r3, #14
   14f86:	18fb      	adds	r3, r7, r3
   14f88:	1dfa      	adds	r2, r7, #7
   14f8a:	7812      	ldrb	r2, [r2, #0]
   14f8c:	0952      	lsrs	r2, r2, #5
   14f8e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   14f90:	4b0d      	ldr	r3, [pc, #52]	; (14fc8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   14f92:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   14f94:	230f      	movs	r3, #15
   14f96:	18fb      	adds	r3, r7, r3
   14f98:	781b      	ldrb	r3, [r3, #0]
   14f9a:	2b00      	cmp	r3, #0
   14f9c:	d10f      	bne.n	14fbe <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   14f9e:	230f      	movs	r3, #15
   14fa0:	18fb      	adds	r3, r7, r3
   14fa2:	781b      	ldrb	r3, [r3, #0]
   14fa4:	009b      	lsls	r3, r3, #2
   14fa6:	2210      	movs	r2, #16
   14fa8:	4694      	mov	ip, r2
   14faa:	44bc      	add	ip, r7
   14fac:	4463      	add	r3, ip
   14fae:	3b08      	subs	r3, #8
   14fb0:	681a      	ldr	r2, [r3, #0]
   14fb2:	230e      	movs	r3, #14
   14fb4:	18fb      	adds	r3, r7, r3
   14fb6:	781b      	ldrb	r3, [r3, #0]
   14fb8:	01db      	lsls	r3, r3, #7
   14fba:	18d3      	adds	r3, r2, r3
   14fbc:	e000      	b.n	14fc0 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   14fbe:	2300      	movs	r3, #0
	}
}
   14fc0:	0018      	movs	r0, r3
   14fc2:	46bd      	mov	sp, r7
   14fc4:	b004      	add	sp, #16
   14fc6:	bd80      	pop	{r7, pc}
   14fc8:	41004400 	.word	0x41004400

00014fcc <system_reset>:
{
   14fcc:	b580      	push	{r7, lr}
   14fce:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   14fd0:	4b02      	ldr	r3, [pc, #8]	; (14fdc <system_reset+0x10>)
   14fd2:	4798      	blx	r3
}
   14fd4:	46c0      	nop			; (mov r8, r8)
   14fd6:	46bd      	mov	sp, r7
   14fd8:	bd80      	pop	{r7, pc}
   14fda:	46c0      	nop			; (mov r8, r8)
   14fdc:	00014f51 	.word	0x00014f51

00014fe0 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   14fe0:	b580      	push	{r7, lr}
   14fe2:	b082      	sub	sp, #8
   14fe4:	af00      	add	r7, sp, #0
   14fe6:	0002      	movs	r2, r0
   14fe8:	1dfb      	adds	r3, r7, #7
   14fea:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   14fec:	1dfb      	adds	r3, r7, #7
   14fee:	781b      	ldrb	r3, [r3, #0]
   14ff0:	0018      	movs	r0, r3
   14ff2:	4b03      	ldr	r3, [pc, #12]	; (15000 <port_get_group_from_gpio_pin+0x20>)
   14ff4:	4798      	blx	r3
   14ff6:	0003      	movs	r3, r0
}
   14ff8:	0018      	movs	r0, r3
   14ffa:	46bd      	mov	sp, r7
   14ffc:	b002      	add	sp, #8
   14ffe:	bd80      	pop	{r7, pc}
   15000:	00014f6d 	.word	0x00014f6d

00015004 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   15004:	b580      	push	{r7, lr}
   15006:	b084      	sub	sp, #16
   15008:	af00      	add	r7, sp, #0
   1500a:	0002      	movs	r2, r0
   1500c:	1dfb      	adds	r3, r7, #7
   1500e:	701a      	strb	r2, [r3, #0]
   15010:	1dbb      	adds	r3, r7, #6
   15012:	1c0a      	adds	r2, r1, #0
   15014:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   15016:	1dfb      	adds	r3, r7, #7
   15018:	781b      	ldrb	r3, [r3, #0]
   1501a:	0018      	movs	r0, r3
   1501c:	4b0d      	ldr	r3, [pc, #52]	; (15054 <port_pin_set_output_level+0x50>)
   1501e:	4798      	blx	r3
   15020:	0003      	movs	r3, r0
   15022:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   15024:	1dfb      	adds	r3, r7, #7
   15026:	781b      	ldrb	r3, [r3, #0]
   15028:	221f      	movs	r2, #31
   1502a:	4013      	ands	r3, r2
   1502c:	2201      	movs	r2, #1
   1502e:	409a      	lsls	r2, r3
   15030:	0013      	movs	r3, r2
   15032:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   15034:	1dbb      	adds	r3, r7, #6
   15036:	781b      	ldrb	r3, [r3, #0]
   15038:	2b00      	cmp	r3, #0
   1503a:	d003      	beq.n	15044 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1503c:	68fb      	ldr	r3, [r7, #12]
   1503e:	68ba      	ldr	r2, [r7, #8]
   15040:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   15042:	e002      	b.n	1504a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   15044:	68fb      	ldr	r3, [r7, #12]
   15046:	68ba      	ldr	r2, [r7, #8]
   15048:	615a      	str	r2, [r3, #20]
}
   1504a:	46c0      	nop			; (mov r8, r8)
   1504c:	46bd      	mov	sp, r7
   1504e:	b004      	add	sp, #16
   15050:	bd80      	pop	{r7, pc}
   15052:	46c0      	nop			; (mov r8, r8)
   15054:	00014fe1 	.word	0x00014fe1

00015058 <init_state>:

/**
 * \brief Initialize download state to not ready.
 */
static void init_state(void)
{
   15058:	b580      	push	{r7, lr}
   1505a:	af00      	add	r7, sp, #0
    down_state = NOT_READY;
   1505c:	4b02      	ldr	r3, [pc, #8]	; (15068 <init_state+0x10>)
   1505e:	2200      	movs	r2, #0
   15060:	701a      	strb	r2, [r3, #0]
}
   15062:	46c0      	nop			; (mov r8, r8)
   15064:	46bd      	mov	sp, r7
   15066:	bd80      	pop	{r7, pc}
   15068:	20000605 	.word	0x20000605

0001506c <clear_state>:
/**
 * \brief Clear state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void clear_state(download_state mask)
{
   1506c:	b580      	push	{r7, lr}
   1506e:	b082      	sub	sp, #8
   15070:	af00      	add	r7, sp, #0
   15072:	0002      	movs	r2, r0
   15074:	1dfb      	adds	r3, r7, #7
   15076:	701a      	strb	r2, [r3, #0]
    down_state &= ~mask;
   15078:	1dfb      	adds	r3, r7, #7
   1507a:	781b      	ldrb	r3, [r3, #0]
   1507c:	b25b      	sxtb	r3, r3
   1507e:	43db      	mvns	r3, r3
   15080:	b25b      	sxtb	r3, r3
   15082:	4a06      	ldr	r2, [pc, #24]	; (1509c <clear_state+0x30>)
   15084:	7812      	ldrb	r2, [r2, #0]
   15086:	b252      	sxtb	r2, r2
   15088:	4013      	ands	r3, r2
   1508a:	b25b      	sxtb	r3, r3
   1508c:	b2da      	uxtb	r2, r3
   1508e:	4b03      	ldr	r3, [pc, #12]	; (1509c <clear_state+0x30>)
   15090:	701a      	strb	r2, [r3, #0]
}
   15092:	46c0      	nop			; (mov r8, r8)
   15094:	46bd      	mov	sp, r7
   15096:	b002      	add	sp, #8
   15098:	bd80      	pop	{r7, pc}
   1509a:	46c0      	nop			; (mov r8, r8)
   1509c:	20000605 	.word	0x20000605

000150a0 <add_state>:
/**
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
   150a0:	b580      	push	{r7, lr}
   150a2:	b082      	sub	sp, #8
   150a4:	af00      	add	r7, sp, #0
   150a6:	0002      	movs	r2, r0
   150a8:	1dfb      	adds	r3, r7, #7
   150aa:	701a      	strb	r2, [r3, #0]
    down_state |= mask;
   150ac:	4b05      	ldr	r3, [pc, #20]	; (150c4 <add_state+0x24>)
   150ae:	781a      	ldrb	r2, [r3, #0]
   150b0:	1dfb      	adds	r3, r7, #7
   150b2:	781b      	ldrb	r3, [r3, #0]
   150b4:	4313      	orrs	r3, r2
   150b6:	b2da      	uxtb	r2, r3
   150b8:	4b02      	ldr	r3, [pc, #8]	; (150c4 <add_state+0x24>)
   150ba:	701a      	strb	r2, [r3, #0]
}
   150bc:	46c0      	nop			; (mov r8, r8)
   150be:	46bd      	mov	sp, r7
   150c0:	b002      	add	sp, #8
   150c2:	bd80      	pop	{r7, pc}
   150c4:	20000605 	.word	0x20000605

000150c8 <is_state_set>:
 * \param[in] mask Check download_state.
 * \return true if this state is set, false otherwise.
 */

static inline bool is_state_set(download_state mask)
{
   150c8:	b580      	push	{r7, lr}
   150ca:	b082      	sub	sp, #8
   150cc:	af00      	add	r7, sp, #0
   150ce:	0002      	movs	r2, r0
   150d0:	1dfb      	adds	r3, r7, #7
   150d2:	701a      	strb	r2, [r3, #0]
    return ((down_state & mask) != 0);
   150d4:	4b06      	ldr	r3, [pc, #24]	; (150f0 <is_state_set+0x28>)
   150d6:	781b      	ldrb	r3, [r3, #0]
   150d8:	1dfa      	adds	r2, r7, #7
   150da:	7812      	ldrb	r2, [r2, #0]
   150dc:	4013      	ands	r3, r2
   150de:	b2db      	uxtb	r3, r3
   150e0:	1e5a      	subs	r2, r3, #1
   150e2:	4193      	sbcs	r3, r2
   150e4:	b2db      	uxtb	r3, r3
}
   150e6:	0018      	movs	r0, r3
   150e8:	46bd      	mov	sp, r7
   150ea:	b002      	add	sp, #8
   150ec:	bd80      	pop	{r7, pc}
   150ee:	46c0      	nop			; (mov r8, r8)
   150f0:	20000605 	.word	0x20000605

000150f4 <is_exist_file>:
 * \param[in] fp The file pointer to check.
 * \param[in] file_path_name The file name to check.
 * \return true if this file name is exist, false otherwise.
 */
static bool is_exist_file(FIL *fp, const char *file_path_name)
{
   150f4:	b590      	push	{r4, r7, lr}
   150f6:	b085      	sub	sp, #20
   150f8:	af00      	add	r7, sp, #0
   150fa:	6078      	str	r0, [r7, #4]
   150fc:	6039      	str	r1, [r7, #0]
    if (fp == NULL || file_path_name == NULL) {
   150fe:	687b      	ldr	r3, [r7, #4]
   15100:	2b00      	cmp	r3, #0
   15102:	d002      	beq.n	1510a <is_exist_file+0x16>
   15104:	683b      	ldr	r3, [r7, #0]
   15106:	2b00      	cmp	r3, #0
   15108:	d101      	bne.n	1510e <is_exist_file+0x1a>
        return false;
   1510a:	2300      	movs	r3, #0
   1510c:	e013      	b.n	15136 <is_exist_file+0x42>
    }

    FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   1510e:	230f      	movs	r3, #15
   15110:	18fc      	adds	r4, r7, r3
   15112:	6839      	ldr	r1, [r7, #0]
   15114:	4b0a      	ldr	r3, [pc, #40]	; (15140 <is_exist_file+0x4c>)
   15116:	2200      	movs	r2, #0
   15118:	0018      	movs	r0, r3
   1511a:	4b0a      	ldr	r3, [pc, #40]	; (15144 <is_exist_file+0x50>)
   1511c:	4798      	blx	r3
   1511e:	0003      	movs	r3, r0
   15120:	7023      	strb	r3, [r4, #0]
    f_close(&file_object);
   15122:	4b07      	ldr	r3, [pc, #28]	; (15140 <is_exist_file+0x4c>)
   15124:	0018      	movs	r0, r3
   15126:	4b08      	ldr	r3, [pc, #32]	; (15148 <is_exist_file+0x54>)
   15128:	4798      	blx	r3
    return (ret == FR_OK);
   1512a:	230f      	movs	r3, #15
   1512c:	18fb      	adds	r3, r7, r3
   1512e:	781b      	ldrb	r3, [r3, #0]
   15130:	425a      	negs	r2, r3
   15132:	4153      	adcs	r3, r2
   15134:	b2db      	uxtb	r3, r3
}
   15136:	0018      	movs	r0, r3
   15138:	46bd      	mov	sp, r7
   1513a:	b005      	add	sp, #20
   1513c:	bd90      	pop	{r4, r7, pc}
   1513e:	46c0      	nop			; (mov r8, r8)
   15140:	20000838 	.word	0x20000838
   15144:	0002cb2d 	.word	0x0002cb2d
   15148:	0002d52d 	.word	0x0002d52d

0001514c <rename_to_unique>:
 * \param[out] file_path_name The file name change to uniquely and changed name is returned to this buffer.
 * \param[in] max_len Maximum file name length.
 * \return true if this file name is unique, false otherwise.
 */
static bool rename_to_unique(FIL *fp, char *file_path_name, uint8_t max_len)
{
   1514c:	b580      	push	{r7, lr}
   1514e:	b09e      	sub	sp, #120	; 0x78
   15150:	af00      	add	r7, sp, #0
   15152:	60f8      	str	r0, [r7, #12]
   15154:	60b9      	str	r1, [r7, #8]
   15156:	1dfb      	adds	r3, r7, #7
   15158:	701a      	strb	r2, [r3, #0]
#define NUMBRING_MAX (3)
#define ADDITION_SIZE (NUMBRING_MAX + 1) /* '-' character is added before the number. */
    uint16_t i = 1, name_len = 0, ext_len = 0, count = 0;
   1515a:	2376      	movs	r3, #118	; 0x76
   1515c:	18fb      	adds	r3, r7, r3
   1515e:	2201      	movs	r2, #1
   15160:	801a      	strh	r2, [r3, #0]
   15162:	2374      	movs	r3, #116	; 0x74
   15164:	18fb      	adds	r3, r7, r3
   15166:	2200      	movs	r2, #0
   15168:	801a      	strh	r2, [r3, #0]
   1516a:	236e      	movs	r3, #110	; 0x6e
   1516c:	18fb      	adds	r3, r7, r3
   1516e:	2200      	movs	r2, #0
   15170:	801a      	strh	r2, [r3, #0]
   15172:	2372      	movs	r3, #114	; 0x72
   15174:	18fb      	adds	r3, r7, r3
   15176:	2200      	movs	r2, #0
   15178:	801a      	strh	r2, [r3, #0]
    char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
   1517a:	2324      	movs	r3, #36	; 0x24
   1517c:	18fb      	adds	r3, r7, r3
   1517e:	0018      	movs	r0, r3
   15180:	2341      	movs	r3, #65	; 0x41
   15182:	001a      	movs	r2, r3
   15184:	2100      	movs	r1, #0
   15186:	4b92      	ldr	r3, [pc, #584]	; (153d0 <rename_to_unique+0x284>)
   15188:	4798      	blx	r3
    char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
   1518a:	2318      	movs	r3, #24
   1518c:	18fb      	adds	r3, r7, r3
   1518e:	0018      	movs	r0, r3
   15190:	2309      	movs	r3, #9
   15192:	001a      	movs	r2, r3
   15194:	2100      	movs	r1, #0
   15196:	4b8e      	ldr	r3, [pc, #568]	; (153d0 <rename_to_unique+0x284>)
   15198:	4798      	blx	r3
    char numbering[NUMBRING_MAX + 1] = {0};
   1519a:	2314      	movs	r3, #20
   1519c:	18fb      	adds	r3, r7, r3
   1519e:	2200      	movs	r2, #0
   151a0:	601a      	str	r2, [r3, #0]
    char *p = NULL;
   151a2:	2300      	movs	r3, #0
   151a4:	66bb      	str	r3, [r7, #104]	; 0x68
    bool valid_ext = false;
   151a6:	2371      	movs	r3, #113	; 0x71
   151a8:	18fb      	adds	r3, r7, r3
   151aa:	2200      	movs	r2, #0
   151ac:	701a      	strb	r2, [r3, #0]

    if (file_path_name == NULL) {
   151ae:	68bb      	ldr	r3, [r7, #8]
   151b0:	2b00      	cmp	r3, #0
   151b2:	d101      	bne.n	151b8 <rename_to_unique+0x6c>
        return false;
   151b4:	2300      	movs	r3, #0
   151b6:	e106      	b.n	153c6 <rename_to_unique+0x27a>
    }

    if (!is_exist_file(fp, file_path_name)) {
   151b8:	68ba      	ldr	r2, [r7, #8]
   151ba:	68fb      	ldr	r3, [r7, #12]
   151bc:	0011      	movs	r1, r2
   151be:	0018      	movs	r0, r3
   151c0:	4b84      	ldr	r3, [pc, #528]	; (153d4 <rename_to_unique+0x288>)
   151c2:	4798      	blx	r3
   151c4:	0003      	movs	r3, r0
   151c6:	001a      	movs	r2, r3
   151c8:	2301      	movs	r3, #1
   151ca:	4053      	eors	r3, r2
   151cc:	b2db      	uxtb	r3, r3
   151ce:	2b00      	cmp	r3, #0
   151d0:	d001      	beq.n	151d6 <rename_to_unique+0x8a>
        return true;
   151d2:	2301      	movs	r3, #1
   151d4:	e0f7      	b.n	153c6 <rename_to_unique+0x27a>
    } else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
   151d6:	68bb      	ldr	r3, [r7, #8]
   151d8:	0018      	movs	r0, r3
   151da:	4b7f      	ldr	r3, [pc, #508]	; (153d8 <rename_to_unique+0x28c>)
   151dc:	4798      	blx	r3
   151de:	0003      	movs	r3, r0
   151e0:	2b40      	cmp	r3, #64	; 0x40
   151e2:	d901      	bls.n	151e8 <rename_to_unique+0x9c>
        return false;
   151e4:	2300      	movs	r3, #0
   151e6:	e0ee      	b.n	153c6 <rename_to_unique+0x27a>
    }

    p = strrchr(file_path_name, '.');
   151e8:	68bb      	ldr	r3, [r7, #8]
   151ea:	212e      	movs	r1, #46	; 0x2e
   151ec:	0018      	movs	r0, r3
   151ee:	4b7b      	ldr	r3, [pc, #492]	; (153dc <rename_to_unique+0x290>)
   151f0:	4798      	blx	r3
   151f2:	0003      	movs	r3, r0
   151f4:	66bb      	str	r3, [r7, #104]	; 0x68
    if (p != NULL) {
   151f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   151f8:	2b00      	cmp	r3, #0
   151fa:	d052      	beq.n	152a2 <rename_to_unique+0x156>
        ext_len = strlen(p);
   151fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   151fe:	0018      	movs	r0, r3
   15200:	4b75      	ldr	r3, [pc, #468]	; (153d8 <rename_to_unique+0x28c>)
   15202:	4798      	blx	r3
   15204:	0002      	movs	r2, r0
   15206:	236e      	movs	r3, #110	; 0x6e
   15208:	18fb      	adds	r3, r7, r3
   1520a:	801a      	strh	r2, [r3, #0]
        if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
   1520c:	236e      	movs	r3, #110	; 0x6e
   1520e:	18fb      	adds	r3, r7, r3
   15210:	881b      	ldrh	r3, [r3, #0]
   15212:	2b07      	cmp	r3, #7
   15214:	d837      	bhi.n	15286 <rename_to_unique+0x13a>
            valid_ext = true;
   15216:	2371      	movs	r3, #113	; 0x71
   15218:	18fb      	adds	r3, r7, r3
   1521a:	2201      	movs	r2, #1
   1521c:	701a      	strb	r2, [r3, #0]
            strcpy(ext, p);
   1521e:	6eba      	ldr	r2, [r7, #104]	; 0x68
   15220:	2318      	movs	r3, #24
   15222:	18fb      	adds	r3, r7, r3
   15224:	0011      	movs	r1, r2
   15226:	0018      	movs	r0, r3
   15228:	4b6d      	ldr	r3, [pc, #436]	; (153e0 <rename_to_unique+0x294>)
   1522a:	4798      	blx	r3
            if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
   1522c:	68bb      	ldr	r3, [r7, #8]
   1522e:	0018      	movs	r0, r3
   15230:	4b69      	ldr	r3, [pc, #420]	; (153d8 <rename_to_unique+0x28c>)
   15232:	4798      	blx	r3
   15234:	0002      	movs	r2, r0
   15236:	236e      	movs	r3, #110	; 0x6e
   15238:	18fb      	adds	r3, r7, r3
   1523a:	881b      	ldrh	r3, [r3, #0]
   1523c:	1ad3      	subs	r3, r2, r3
   1523e:	2b3c      	cmp	r3, #60	; 0x3c
   15240:	d911      	bls.n	15266 <rename_to_unique+0x11a>
                name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
   15242:	2374      	movs	r3, #116	; 0x74
   15244:	18fb      	adds	r3, r7, r3
   15246:	226e      	movs	r2, #110	; 0x6e
   15248:	18ba      	adds	r2, r7, r2
   1524a:	8812      	ldrh	r2, [r2, #0]
   1524c:	213c      	movs	r1, #60	; 0x3c
   1524e:	1a8a      	subs	r2, r1, r2
   15250:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   15252:	2374      	movs	r3, #116	; 0x74
   15254:	18fb      	adds	r3, r7, r3
   15256:	881a      	ldrh	r2, [r3, #0]
   15258:	68b9      	ldr	r1, [r7, #8]
   1525a:	2324      	movs	r3, #36	; 0x24
   1525c:	18fb      	adds	r3, r7, r3
   1525e:	0018      	movs	r0, r3
   15260:	4b60      	ldr	r3, [pc, #384]	; (153e4 <rename_to_unique+0x298>)
   15262:	4798      	blx	r3
   15264:	e02a      	b.n	152bc <rename_to_unique+0x170>
            } else {
                name_len = (p - file_path_name);
   15266:	6eba      	ldr	r2, [r7, #104]	; 0x68
   15268:	68bb      	ldr	r3, [r7, #8]
   1526a:	1ad2      	subs	r2, r2, r3
   1526c:	2374      	movs	r3, #116	; 0x74
   1526e:	18fb      	adds	r3, r7, r3
   15270:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   15272:	2374      	movs	r3, #116	; 0x74
   15274:	18fb      	adds	r3, r7, r3
   15276:	881a      	ldrh	r2, [r3, #0]
   15278:	68b9      	ldr	r1, [r7, #8]
   1527a:	2324      	movs	r3, #36	; 0x24
   1527c:	18fb      	adds	r3, r7, r3
   1527e:	0018      	movs	r0, r3
   15280:	4b58      	ldr	r3, [pc, #352]	; (153e4 <rename_to_unique+0x298>)
   15282:	4798      	blx	r3
   15284:	e01a      	b.n	152bc <rename_to_unique+0x170>
            }
        } else {
            name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   15286:	2374      	movs	r3, #116	; 0x74
   15288:	18fb      	adds	r3, r7, r3
   1528a:	223c      	movs	r2, #60	; 0x3c
   1528c:	801a      	strh	r2, [r3, #0]
            strncpy(name, file_path_name, name_len);
   1528e:	2374      	movs	r3, #116	; 0x74
   15290:	18fb      	adds	r3, r7, r3
   15292:	881a      	ldrh	r2, [r3, #0]
   15294:	68b9      	ldr	r1, [r7, #8]
   15296:	2324      	movs	r3, #36	; 0x24
   15298:	18fb      	adds	r3, r7, r3
   1529a:	0018      	movs	r0, r3
   1529c:	4b51      	ldr	r3, [pc, #324]	; (153e4 <rename_to_unique+0x298>)
   1529e:	4798      	blx	r3
   152a0:	e00c      	b.n	152bc <rename_to_unique+0x170>
        }
    } else {
        name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   152a2:	2374      	movs	r3, #116	; 0x74
   152a4:	18fb      	adds	r3, r7, r3
   152a6:	223c      	movs	r2, #60	; 0x3c
   152a8:	801a      	strh	r2, [r3, #0]
        strncpy(name, file_path_name, name_len);
   152aa:	2374      	movs	r3, #116	; 0x74
   152ac:	18fb      	adds	r3, r7, r3
   152ae:	881a      	ldrh	r2, [r3, #0]
   152b0:	68b9      	ldr	r1, [r7, #8]
   152b2:	2324      	movs	r3, #36	; 0x24
   152b4:	18fb      	adds	r3, r7, r3
   152b6:	0018      	movs	r0, r3
   152b8:	4b4a      	ldr	r3, [pc, #296]	; (153e4 <rename_to_unique+0x298>)
   152ba:	4798      	blx	r3
    }

    name[name_len++] = '-';
   152bc:	2374      	movs	r3, #116	; 0x74
   152be:	18fb      	adds	r3, r7, r3
   152c0:	881b      	ldrh	r3, [r3, #0]
   152c2:	2274      	movs	r2, #116	; 0x74
   152c4:	18ba      	adds	r2, r7, r2
   152c6:	1c59      	adds	r1, r3, #1
   152c8:	8011      	strh	r1, [r2, #0]
   152ca:	001a      	movs	r2, r3
   152cc:	2324      	movs	r3, #36	; 0x24
   152ce:	18fb      	adds	r3, r7, r3
   152d0:	212d      	movs	r1, #45	; 0x2d
   152d2:	5499      	strb	r1, [r3, r2]

    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   152d4:	2376      	movs	r3, #118	; 0x76
   152d6:	18fb      	adds	r3, r7, r3
   152d8:	2200      	movs	r2, #0
   152da:	801a      	strh	r2, [r3, #0]
   152dc:	2372      	movs	r3, #114	; 0x72
   152de:	18fb      	adds	r3, r7, r3
   152e0:	2201      	movs	r2, #1
   152e2:	801a      	strh	r2, [r3, #0]
   152e4:	e010      	b.n	15308 <rename_to_unique+0x1bc>
        count *= 10;
   152e6:	2372      	movs	r3, #114	; 0x72
   152e8:	18fa      	adds	r2, r7, r3
   152ea:	2372      	movs	r3, #114	; 0x72
   152ec:	18fb      	adds	r3, r7, r3
   152ee:	881b      	ldrh	r3, [r3, #0]
   152f0:	1c19      	adds	r1, r3, #0
   152f2:	0089      	lsls	r1, r1, #2
   152f4:	18cb      	adds	r3, r1, r3
   152f6:	18db      	adds	r3, r3, r3
   152f8:	8013      	strh	r3, [r2, #0]
    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   152fa:	2376      	movs	r3, #118	; 0x76
   152fc:	18fb      	adds	r3, r7, r3
   152fe:	881a      	ldrh	r2, [r3, #0]
   15300:	2376      	movs	r3, #118	; 0x76
   15302:	18fb      	adds	r3, r7, r3
   15304:	3201      	adds	r2, #1
   15306:	801a      	strh	r2, [r3, #0]
   15308:	2376      	movs	r3, #118	; 0x76
   1530a:	18fb      	adds	r3, r7, r3
   1530c:	881b      	ldrh	r3, [r3, #0]
   1530e:	2b02      	cmp	r3, #2
   15310:	d9e9      	bls.n	152e6 <rename_to_unique+0x19a>
    }
    for (i = 1; i < count; i++) {
   15312:	2376      	movs	r3, #118	; 0x76
   15314:	18fb      	adds	r3, r7, r3
   15316:	2201      	movs	r2, #1
   15318:	801a      	strh	r2, [r3, #0]
   1531a:	e04b      	b.n	153b4 <rename_to_unique+0x268>
        sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
   1531c:	2376      	movs	r3, #118	; 0x76
   1531e:	18fb      	adds	r3, r7, r3
   15320:	881a      	ldrh	r2, [r3, #0]
   15322:	4931      	ldr	r1, [pc, #196]	; (153e8 <rename_to_unique+0x29c>)
   15324:	2314      	movs	r3, #20
   15326:	18fb      	adds	r3, r7, r3
   15328:	0018      	movs	r0, r3
   1532a:	4b30      	ldr	r3, [pc, #192]	; (153ec <rename_to_unique+0x2a0>)
   1532c:	4798      	blx	r3
        strncpy(&name[name_len], numbering, NUMBRING_MAX);
   1532e:	2374      	movs	r3, #116	; 0x74
   15330:	18fb      	adds	r3, r7, r3
   15332:	881b      	ldrh	r3, [r3, #0]
   15334:	2224      	movs	r2, #36	; 0x24
   15336:	18ba      	adds	r2, r7, r2
   15338:	18d3      	adds	r3, r2, r3
   1533a:	2214      	movs	r2, #20
   1533c:	18b9      	adds	r1, r7, r2
   1533e:	2203      	movs	r2, #3
   15340:	0018      	movs	r0, r3
   15342:	4b28      	ldr	r3, [pc, #160]	; (153e4 <rename_to_unique+0x298>)
   15344:	4798      	blx	r3
        if (valid_ext) {
   15346:	2371      	movs	r3, #113	; 0x71
   15348:	18fb      	adds	r3, r7, r3
   1534a:	781b      	ldrb	r3, [r3, #0]
   1534c:	2b00      	cmp	r3, #0
   1534e:	d00c      	beq.n	1536a <rename_to_unique+0x21e>
            strcpy(&name[name_len + NUMBRING_MAX], ext);
   15350:	2374      	movs	r3, #116	; 0x74
   15352:	18fb      	adds	r3, r7, r3
   15354:	881b      	ldrh	r3, [r3, #0]
   15356:	3303      	adds	r3, #3
   15358:	2224      	movs	r2, #36	; 0x24
   1535a:	18ba      	adds	r2, r7, r2
   1535c:	18d3      	adds	r3, r2, r3
   1535e:	2218      	movs	r2, #24
   15360:	18ba      	adds	r2, r7, r2
   15362:	0011      	movs	r1, r2
   15364:	0018      	movs	r0, r3
   15366:	4b1e      	ldr	r3, [pc, #120]	; (153e0 <rename_to_unique+0x294>)
   15368:	4798      	blx	r3
        }

        if (!is_exist_file(fp, name)) {
   1536a:	2324      	movs	r3, #36	; 0x24
   1536c:	18fa      	adds	r2, r7, r3
   1536e:	68fb      	ldr	r3, [r7, #12]
   15370:	0011      	movs	r1, r2
   15372:	0018      	movs	r0, r3
   15374:	4b17      	ldr	r3, [pc, #92]	; (153d4 <rename_to_unique+0x288>)
   15376:	4798      	blx	r3
   15378:	0003      	movs	r3, r0
   1537a:	001a      	movs	r2, r3
   1537c:	2301      	movs	r3, #1
   1537e:	4053      	eors	r3, r2
   15380:	b2db      	uxtb	r3, r3
   15382:	2b00      	cmp	r3, #0
   15384:	d00f      	beq.n	153a6 <rename_to_unique+0x25a>
            memset(file_path_name, 0, max_len);
   15386:	1dfb      	adds	r3, r7, #7
   15388:	781a      	ldrb	r2, [r3, #0]
   1538a:	68bb      	ldr	r3, [r7, #8]
   1538c:	2100      	movs	r1, #0
   1538e:	0018      	movs	r0, r3
   15390:	4b0f      	ldr	r3, [pc, #60]	; (153d0 <rename_to_unique+0x284>)
   15392:	4798      	blx	r3
            strcpy(file_path_name, name);
   15394:	2324      	movs	r3, #36	; 0x24
   15396:	18fa      	adds	r2, r7, r3
   15398:	68bb      	ldr	r3, [r7, #8]
   1539a:	0011      	movs	r1, r2
   1539c:	0018      	movs	r0, r3
   1539e:	4b10      	ldr	r3, [pc, #64]	; (153e0 <rename_to_unique+0x294>)
   153a0:	4798      	blx	r3
            return true;
   153a2:	2301      	movs	r3, #1
   153a4:	e00f      	b.n	153c6 <rename_to_unique+0x27a>
    for (i = 1; i < count; i++) {
   153a6:	2376      	movs	r3, #118	; 0x76
   153a8:	18fb      	adds	r3, r7, r3
   153aa:	881a      	ldrh	r2, [r3, #0]
   153ac:	2376      	movs	r3, #118	; 0x76
   153ae:	18fb      	adds	r3, r7, r3
   153b0:	3201      	adds	r2, #1
   153b2:	801a      	strh	r2, [r3, #0]
   153b4:	2376      	movs	r3, #118	; 0x76
   153b6:	18fa      	adds	r2, r7, r3
   153b8:	2372      	movs	r3, #114	; 0x72
   153ba:	18fb      	adds	r3, r7, r3
   153bc:	8812      	ldrh	r2, [r2, #0]
   153be:	881b      	ldrh	r3, [r3, #0]
   153c0:	429a      	cmp	r2, r3
   153c2:	d3ab      	bcc.n	1531c <rename_to_unique+0x1d0>
        }
    }
    return false;
   153c4:	2300      	movs	r3, #0
}
   153c6:	0018      	movs	r0, r3
   153c8:	46bd      	mov	sp, r7
   153ca:	b01e      	add	sp, #120	; 0x78
   153cc:	bd80      	pop	{r7, pc}
   153ce:	46c0      	nop			; (mov r8, r8)
   153d0:	000345df 	.word	0x000345df
   153d4:	000150f5 	.word	0x000150f5
   153d8:	0003497b 	.word	0x0003497b
   153dc:	000349d5 	.word	0x000349d5
   153e0:	00034931 	.word	0x00034931
   153e4:	000349ab 	.word	0x000349ab
   153e8:	00035f24 	.word	0x00035f24
   153ec:	0003489d 	.word	0x0003489d

000153f0 <start_download>:

/**
 * \brief Start file download via HTTP connection.
 */
static void start_download(void)
{
   153f0:	b590      	push	{r4, r7, lr}
   153f2:	b083      	sub	sp, #12
   153f4:	af02      	add	r7, sp, #8
    if (!is_state_set(STORAGE_READY)) {
   153f6:	2001      	movs	r0, #1
   153f8:	4b22      	ldr	r3, [pc, #136]	; (15484 <start_download+0x94>)
   153fa:	4798      	blx	r3
   153fc:	0003      	movs	r3, r0
   153fe:	001a      	movs	r2, r3
   15400:	2301      	movs	r3, #1
   15402:	4053      	eors	r3, r2
   15404:	b2db      	uxtb	r3, r3
   15406:	2b00      	cmp	r3, #0
   15408:	d005      	beq.n	15416 <start_download+0x26>
        LogMessage(LOG_DEBUG_LVL, "start_download: MMC storage not ready.\r\n");
   1540a:	4b1f      	ldr	r3, [pc, #124]	; (15488 <start_download+0x98>)
   1540c:	0019      	movs	r1, r3
   1540e:	2001      	movs	r0, #1
   15410:	4b1e      	ldr	r3, [pc, #120]	; (1548c <start_download+0x9c>)
   15412:	4798      	blx	r3
        return;
   15414:	e032      	b.n	1547c <start_download+0x8c>
    }

    if (!is_state_set(WIFI_CONNECTED)) {
   15416:	2002      	movs	r0, #2
   15418:	4b1a      	ldr	r3, [pc, #104]	; (15484 <start_download+0x94>)
   1541a:	4798      	blx	r3
   1541c:	0003      	movs	r3, r0
   1541e:	001a      	movs	r2, r3
   15420:	2301      	movs	r3, #1
   15422:	4053      	eors	r3, r2
   15424:	b2db      	uxtb	r3, r3
   15426:	2b00      	cmp	r3, #0
   15428:	d005      	beq.n	15436 <start_download+0x46>
        LogMessage(LOG_DEBUG_LVL, "start_download: Wi-Fi is not connected.\r\n");
   1542a:	4b19      	ldr	r3, [pc, #100]	; (15490 <start_download+0xa0>)
   1542c:	0019      	movs	r1, r3
   1542e:	2001      	movs	r0, #1
   15430:	4b16      	ldr	r3, [pc, #88]	; (1548c <start_download+0x9c>)
   15432:	4798      	blx	r3
        return;
   15434:	e022      	b.n	1547c <start_download+0x8c>
    }

    if (is_state_set(GET_REQUESTED)) {
   15436:	2004      	movs	r0, #4
   15438:	4b12      	ldr	r3, [pc, #72]	; (15484 <start_download+0x94>)
   1543a:	4798      	blx	r3
   1543c:	1e03      	subs	r3, r0, #0
   1543e:	d005      	beq.n	1544c <start_download+0x5c>
        LogMessage(LOG_DEBUG_LVL, "start_download: request is sent already.\r\n");
   15440:	4b14      	ldr	r3, [pc, #80]	; (15494 <start_download+0xa4>)
   15442:	0019      	movs	r1, r3
   15444:	2001      	movs	r0, #1
   15446:	4b11      	ldr	r3, [pc, #68]	; (1548c <start_download+0x9c>)
   15448:	4798      	blx	r3
        return;
   1544a:	e017      	b.n	1547c <start_download+0x8c>
    }

    if (is_state_set(DOWNLOADING)) {
   1544c:	2008      	movs	r0, #8
   1544e:	4b0d      	ldr	r3, [pc, #52]	; (15484 <start_download+0x94>)
   15450:	4798      	blx	r3
   15452:	1e03      	subs	r3, r0, #0
   15454:	d005      	beq.n	15462 <start_download+0x72>
        LogMessage(LOG_DEBUG_LVL, "start_download: running download already.\r\n");
   15456:	4b10      	ldr	r3, [pc, #64]	; (15498 <start_download+0xa8>)
   15458:	0019      	movs	r1, r3
   1545a:	2001      	movs	r0, #1
   1545c:	4b0b      	ldr	r3, [pc, #44]	; (1548c <start_download+0x9c>)
   1545e:	4798      	blx	r3
        return;
   15460:	e00c      	b.n	1547c <start_download+0x8c>
    }

    /* Send the HTTP request. */
    LogMessage(LOG_DEBUG_LVL, "start_download: sending HTTP request...\r\n");
   15462:	4b0e      	ldr	r3, [pc, #56]	; (1549c <start_download+0xac>)
   15464:	0019      	movs	r1, r3
   15466:	2001      	movs	r0, #1
   15468:	4b08      	ldr	r3, [pc, #32]	; (1548c <start_download+0x9c>)
   1546a:	4798      	blx	r3
    http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
   1546c:	490c      	ldr	r1, [pc, #48]	; (154a0 <start_download+0xb0>)
   1546e:	480d      	ldr	r0, [pc, #52]	; (154a4 <start_download+0xb4>)
   15470:	2300      	movs	r3, #0
   15472:	9300      	str	r3, [sp, #0]
   15474:	2300      	movs	r3, #0
   15476:	2201      	movs	r2, #1
   15478:	4c0b      	ldr	r4, [pc, #44]	; (154a8 <start_download+0xb8>)
   1547a:	47a0      	blx	r4
}
   1547c:	46bd      	mov	sp, r7
   1547e:	b001      	add	sp, #4
   15480:	bd90      	pop	{r4, r7, pc}
   15482:	46c0      	nop			; (mov r8, r8)
   15484:	000150c9 	.word	0x000150c9
   15488:	00035f2c 	.word	0x00035f2c
   1548c:	0001cef1 	.word	0x0001cef1
   15490:	00035f58 	.word	0x00035f58
   15494:	00035f84 	.word	0x00035f84
   15498:	00035fb0 	.word	0x00035fb0
   1549c:	00035fdc 	.word	0x00035fdc
   154a0:	00036008 	.word	0x00036008
   154a4:	200048cc 	.word	0x200048cc
   154a8:	00030181 	.word	0x00030181

000154ac <store_file_packet>:
 * \brief Store received packet to file.
 * \param[in] data Packet data.
 * \param[in] length Packet data length.
 */
static void store_file_packet(char *data, uint32_t length)
{
   154ac:	b5b0      	push	{r4, r5, r7, lr}
   154ae:	b086      	sub	sp, #24
   154b0:	af00      	add	r7, sp, #0
   154b2:	6078      	str	r0, [r7, #4]
   154b4:	6039      	str	r1, [r7, #0]
    FRESULT ret;
    if ((data == NULL) || (length < 1)) {
   154b6:	687b      	ldr	r3, [r7, #4]
   154b8:	2b00      	cmp	r3, #0
   154ba:	d002      	beq.n	154c2 <store_file_packet+0x16>
   154bc:	683b      	ldr	r3, [r7, #0]
   154be:	2b00      	cmp	r3, #0
   154c0:	d105      	bne.n	154ce <store_file_packet+0x22>
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: empty data.\r\n");
   154c2:	4b58      	ldr	r3, [pc, #352]	; (15624 <store_file_packet+0x178>)
   154c4:	0019      	movs	r1, r3
   154c6:	2001      	movs	r0, #1
   154c8:	4b57      	ldr	r3, [pc, #348]	; (15628 <store_file_packet+0x17c>)
   154ca:	4798      	blx	r3
        return;
   154cc:	e0a6      	b.n	1561c <store_file_packet+0x170>
    }

    if (!is_state_set(DOWNLOADING)) {
   154ce:	2008      	movs	r0, #8
   154d0:	4b56      	ldr	r3, [pc, #344]	; (1562c <store_file_packet+0x180>)
   154d2:	4798      	blx	r3
   154d4:	0003      	movs	r3, r0
   154d6:	001a      	movs	r2, r3
   154d8:	2301      	movs	r3, #1
   154da:	4053      	eors	r3, r2
   154dc:	b2db      	uxtb	r3, r3
   154de:	2b00      	cmp	r3, #0
   154e0:	d055      	beq.n	1558e <store_file_packet+0xe2>
        char *cp = NULL;
   154e2:	2300      	movs	r3, #0
   154e4:	617b      	str	r3, [r7, #20]
        save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   154e6:	4b52      	ldr	r3, [pc, #328]	; (15630 <store_file_packet+0x184>)
   154e8:	2230      	movs	r2, #48	; 0x30
   154ea:	701a      	strb	r2, [r3, #0]
        save_file_name[1] = ':';
   154ec:	4b50      	ldr	r3, [pc, #320]	; (15630 <store_file_packet+0x184>)
   154ee:	223a      	movs	r2, #58	; 0x3a
   154f0:	705a      	strb	r2, [r3, #1]
        cp = (char *)(MAIN_HTTP_FILE_URL + strlen(MAIN_HTTP_FILE_URL));
   154f2:	4b50      	ldr	r3, [pc, #320]	; (15634 <store_file_packet+0x188>)
   154f4:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   154f6:	e002      	b.n	154fe <store_file_packet+0x52>
            cp--;
   154f8:	697b      	ldr	r3, [r7, #20]
   154fa:	3b01      	subs	r3, #1
   154fc:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   154fe:	697b      	ldr	r3, [r7, #20]
   15500:	781b      	ldrb	r3, [r3, #0]
   15502:	2b2f      	cmp	r3, #47	; 0x2f
   15504:	d1f8      	bne.n	154f8 <store_file_packet+0x4c>
        }
        if (strlen(cp) > 1) {
   15506:	697b      	ldr	r3, [r7, #20]
   15508:	0018      	movs	r0, r3
   1550a:	4b4b      	ldr	r3, [pc, #300]	; (15638 <store_file_packet+0x18c>)
   1550c:	4798      	blx	r3
   1550e:	0003      	movs	r3, r0
   15510:	2b01      	cmp	r3, #1
   15512:	d924      	bls.n	1555e <store_file_packet+0xb2>
            cp++;
   15514:	697b      	ldr	r3, [r7, #20]
   15516:	3301      	adds	r3, #1
   15518:	617b      	str	r3, [r7, #20]
            strcpy(&save_file_name[2], cp);
   1551a:	697a      	ldr	r2, [r7, #20]
   1551c:	4b47      	ldr	r3, [pc, #284]	; (1563c <store_file_packet+0x190>)
   1551e:	0011      	movs	r1, r2
   15520:	0018      	movs	r0, r3
   15522:	4b47      	ldr	r3, [pc, #284]	; (15640 <store_file_packet+0x194>)
   15524:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
            add_state(CANCELED);
            return;
        }

        rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
   15526:	4942      	ldr	r1, [pc, #264]	; (15630 <store_file_packet+0x184>)
   15528:	4b46      	ldr	r3, [pc, #280]	; (15644 <store_file_packet+0x198>)
   1552a:	2240      	movs	r2, #64	; 0x40
   1552c:	0018      	movs	r0, r3
   1552e:	4b46      	ldr	r3, [pc, #280]	; (15648 <store_file_packet+0x19c>)
   15530:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: creating file [%s]\r\n", save_file_name);
   15532:	4a3f      	ldr	r2, [pc, #252]	; (15630 <store_file_packet+0x184>)
   15534:	4b45      	ldr	r3, [pc, #276]	; (1564c <store_file_packet+0x1a0>)
   15536:	0019      	movs	r1, r3
   15538:	2001      	movs	r0, #1
   1553a:	4b3b      	ldr	r3, [pc, #236]	; (15628 <store_file_packet+0x17c>)
   1553c:	4798      	blx	r3
        ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   1553e:	2313      	movs	r3, #19
   15540:	18fc      	adds	r4, r7, r3
   15542:	493b      	ldr	r1, [pc, #236]	; (15630 <store_file_packet+0x184>)
   15544:	4b3f      	ldr	r3, [pc, #252]	; (15644 <store_file_packet+0x198>)
   15546:	220a      	movs	r2, #10
   15548:	0018      	movs	r0, r3
   1554a:	4b41      	ldr	r3, [pc, #260]	; (15650 <store_file_packet+0x1a4>)
   1554c:	4798      	blx	r3
   1554e:	0003      	movs	r3, r0
   15550:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   15552:	2313      	movs	r3, #19
   15554:	18fb      	adds	r3, r7, r3
   15556:	781b      	ldrb	r3, [r3, #0]
   15558:	2b00      	cmp	r3, #0
   1555a:	d012      	beq.n	15582 <store_file_packet+0xd6>
   1555c:	e008      	b.n	15570 <store_file_packet+0xc4>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
   1555e:	4b3d      	ldr	r3, [pc, #244]	; (15654 <store_file_packet+0x1a8>)
   15560:	0019      	movs	r1, r3
   15562:	2001      	movs	r0, #1
   15564:	4b30      	ldr	r3, [pc, #192]	; (15628 <store_file_packet+0x17c>)
   15566:	4798      	blx	r3
            add_state(CANCELED);
   15568:	2020      	movs	r0, #32
   1556a:	4b3b      	ldr	r3, [pc, #236]	; (15658 <store_file_packet+0x1ac>)
   1556c:	4798      	blx	r3
            return;
   1556e:	e055      	b.n	1561c <store_file_packet+0x170>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file creation error! ret:%d\r\n", ret);
   15570:	2313      	movs	r3, #19
   15572:	18fb      	adds	r3, r7, r3
   15574:	781a      	ldrb	r2, [r3, #0]
   15576:	4b39      	ldr	r3, [pc, #228]	; (1565c <store_file_packet+0x1b0>)
   15578:	0019      	movs	r1, r3
   1557a:	2001      	movs	r0, #1
   1557c:	4b2a      	ldr	r3, [pc, #168]	; (15628 <store_file_packet+0x17c>)
   1557e:	4798      	blx	r3
            return;
   15580:	e04c      	b.n	1561c <store_file_packet+0x170>
        }

        received_file_size = 0;
   15582:	4b37      	ldr	r3, [pc, #220]	; (15660 <store_file_packet+0x1b4>)
   15584:	2200      	movs	r2, #0
   15586:	601a      	str	r2, [r3, #0]
        add_state(DOWNLOADING);
   15588:	2008      	movs	r0, #8
   1558a:	4b33      	ldr	r3, [pc, #204]	; (15658 <store_file_packet+0x1ac>)
   1558c:	4798      	blx	r3
    }

    if (data != NULL) {
   1558e:	687b      	ldr	r3, [r7, #4]
   15590:	2b00      	cmp	r3, #0
   15592:	d043      	beq.n	1561c <store_file_packet+0x170>
        UINT wsize = 0;
   15594:	2300      	movs	r3, #0
   15596:	60fb      	str	r3, [r7, #12]
        ret = f_write(&file_object, (const void *)data, length, &wsize);
   15598:	2313      	movs	r3, #19
   1559a:	18fc      	adds	r4, r7, r3
   1559c:	230c      	movs	r3, #12
   1559e:	18fb      	adds	r3, r7, r3
   155a0:	683a      	ldr	r2, [r7, #0]
   155a2:	6879      	ldr	r1, [r7, #4]
   155a4:	4827      	ldr	r0, [pc, #156]	; (15644 <store_file_packet+0x198>)
   155a6:	4d2f      	ldr	r5, [pc, #188]	; (15664 <store_file_packet+0x1b8>)
   155a8:	47a8      	blx	r5
   155aa:	0003      	movs	r3, r0
   155ac:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   155ae:	2313      	movs	r3, #19
   155b0:	18fb      	adds	r3, r7, r3
   155b2:	781b      	ldrb	r3, [r3, #0]
   155b4:	2b00      	cmp	r3, #0
   155b6:	d00c      	beq.n	155d2 <store_file_packet+0x126>
            f_close(&file_object);
   155b8:	4b22      	ldr	r3, [pc, #136]	; (15644 <store_file_packet+0x198>)
   155ba:	0018      	movs	r0, r3
   155bc:	4b2a      	ldr	r3, [pc, #168]	; (15668 <store_file_packet+0x1bc>)
   155be:	4798      	blx	r3
            add_state(CANCELED);
   155c0:	2020      	movs	r0, #32
   155c2:	4b25      	ldr	r3, [pc, #148]	; (15658 <store_file_packet+0x1ac>)
   155c4:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file write error, download canceled.\r\n");
   155c6:	4b29      	ldr	r3, [pc, #164]	; (1566c <store_file_packet+0x1c0>)
   155c8:	0019      	movs	r1, r3
   155ca:	2001      	movs	r0, #1
   155cc:	4b16      	ldr	r3, [pc, #88]	; (15628 <store_file_packet+0x17c>)
   155ce:	4798      	blx	r3
            return;
   155d0:	e024      	b.n	1561c <store_file_packet+0x170>
        }

        received_file_size += wsize;
   155d2:	4b23      	ldr	r3, [pc, #140]	; (15660 <store_file_packet+0x1b4>)
   155d4:	681a      	ldr	r2, [r3, #0]
   155d6:	68fb      	ldr	r3, [r7, #12]
   155d8:	18d2      	adds	r2, r2, r3
   155da:	4b21      	ldr	r3, [pc, #132]	; (15660 <store_file_packet+0x1b4>)
   155dc:	601a      	str	r2, [r3, #0]
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
   155de:	4b20      	ldr	r3, [pc, #128]	; (15660 <store_file_packet+0x1b4>)
   155e0:	681a      	ldr	r2, [r3, #0]
   155e2:	4b23      	ldr	r3, [pc, #140]	; (15670 <store_file_packet+0x1c4>)
   155e4:	681b      	ldr	r3, [r3, #0]
   155e6:	4923      	ldr	r1, [pc, #140]	; (15674 <store_file_packet+0x1c8>)
   155e8:	2001      	movs	r0, #1
   155ea:	4c0f      	ldr	r4, [pc, #60]	; (15628 <store_file_packet+0x17c>)
   155ec:	47a0      	blx	r4
        if (received_file_size >= http_file_size) {
   155ee:	4b1c      	ldr	r3, [pc, #112]	; (15660 <store_file_packet+0x1b4>)
   155f0:	681a      	ldr	r2, [r3, #0]
   155f2:	4b1f      	ldr	r3, [pc, #124]	; (15670 <store_file_packet+0x1c4>)
   155f4:	681b      	ldr	r3, [r3, #0]
   155f6:	429a      	cmp	r2, r3
   155f8:	d310      	bcc.n	1561c <store_file_packet+0x170>
            f_close(&file_object);
   155fa:	4b12      	ldr	r3, [pc, #72]	; (15644 <store_file_packet+0x198>)
   155fc:	0018      	movs	r0, r3
   155fe:	4b1a      	ldr	r3, [pc, #104]	; (15668 <store_file_packet+0x1bc>)
   15600:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file downloaded successfully.\r\n");
   15602:	4b1d      	ldr	r3, [pc, #116]	; (15678 <store_file_packet+0x1cc>)
   15604:	0019      	movs	r1, r3
   15606:	2001      	movs	r0, #1
   15608:	4b07      	ldr	r3, [pc, #28]	; (15628 <store_file_packet+0x17c>)
   1560a:	4798      	blx	r3
            port_pin_set_output_level(LED_0_PIN, false);
   1560c:	2100      	movs	r1, #0
   1560e:	2017      	movs	r0, #23
   15610:	4b1a      	ldr	r3, [pc, #104]	; (1567c <store_file_packet+0x1d0>)
   15612:	4798      	blx	r3
            add_state(COMPLETED);
   15614:	2010      	movs	r0, #16
   15616:	4b10      	ldr	r3, [pc, #64]	; (15658 <store_file_packet+0x1ac>)
   15618:	4798      	blx	r3
            return;
   1561a:	46c0      	nop			; (mov r8, r8)
        }
    }
}
   1561c:	46bd      	mov	sp, r7
   1561e:	b006      	add	sp, #24
   15620:	bdb0      	pop	{r4, r5, r7, pc}
   15622:	46c0      	nop			; (mov r8, r8)
   15624:	00036028 	.word	0x00036028
   15628:	0001cef1 	.word	0x0001cef1
   1562c:	000150c9 	.word	0x000150c9
   15630:	200000a4 	.word	0x200000a4
   15634:	00036027 	.word	0x00036027
   15638:	0003497b 	.word	0x0003497b
   1563c:	200000a6 	.word	0x200000a6
   15640:	00034931 	.word	0x00034931
   15644:	20000838 	.word	0x20000838
   15648:	0001514d 	.word	0x0001514d
   1564c:	0003608c 	.word	0x0003608c
   15650:	0002cb2d 	.word	0x0002cb2d
   15654:	0003604c 	.word	0x0003604c
   15658:	000150a1 	.word	0x000150a1
   1565c:	000360b4 	.word	0x000360b4
   15660:	20000860 	.word	0x20000860
   15664:	0002d05d 	.word	0x0002d05d
   15668:	0002d52d 	.word	0x0002d52d
   1566c:	000360e8 	.word	0x000360e8
   15670:	2000085c 	.word	0x2000085c
   15674:	00036124 	.word	0x00036124
   15678:	00036158 	.word	0x00036158
   1567c:	00015005 	.word	0x00015005

00015680 <http_client_callback>:
 * \param[in]  module_inst     Module instance of HTTP client module.
 * \param[in]  type            Type of event.
 * \param[in]  data            Data structure of the event. \refer http_client_data
 */
static void http_client_callback(struct http_client_module *module_inst, int type, union http_client_data *data)
{
   15680:	b590      	push	{r4, r7, lr}
   15682:	b085      	sub	sp, #20
   15684:	af00      	add	r7, sp, #0
   15686:	60f8      	str	r0, [r7, #12]
   15688:	60b9      	str	r1, [r7, #8]
   1568a:	607a      	str	r2, [r7, #4]
    switch (type) {
   1568c:	68bb      	ldr	r3, [r7, #8]
   1568e:	2b04      	cmp	r3, #4
   15690:	d900      	bls.n	15694 <http_client_callback+0x14>
   15692:	e077      	b.n	15784 <http_client_callback+0x104>
   15694:	68bb      	ldr	r3, [r7, #8]
   15696:	009a      	lsls	r2, r3, #2
   15698:	4b3c      	ldr	r3, [pc, #240]	; (1578c <http_client_callback+0x10c>)
   1569a:	18d3      	adds	r3, r2, r3
   1569c:	681b      	ldr	r3, [r3, #0]
   1569e:	469f      	mov	pc, r3
        case HTTP_CLIENT_CALLBACK_SOCK_CONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: HTTP client socket connected.\r\n");
   156a0:	4b3b      	ldr	r3, [pc, #236]	; (15790 <http_client_callback+0x110>)
   156a2:	0019      	movs	r1, r3
   156a4:	2001      	movs	r0, #1
   156a6:	4b3b      	ldr	r3, [pc, #236]	; (15794 <http_client_callback+0x114>)
   156a8:	4798      	blx	r3
            break;
   156aa:	e06b      	b.n	15784 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_REQUESTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: request completed.\r\n");
   156ac:	4b3a      	ldr	r3, [pc, #232]	; (15798 <http_client_callback+0x118>)
   156ae:	0019      	movs	r1, r3
   156b0:	2001      	movs	r0, #1
   156b2:	4b38      	ldr	r3, [pc, #224]	; (15794 <http_client_callback+0x114>)
   156b4:	4798      	blx	r3
            add_state(GET_REQUESTED);
   156b6:	2004      	movs	r0, #4
   156b8:	4b38      	ldr	r3, [pc, #224]	; (1579c <http_client_callback+0x11c>)
   156ba:	4798      	blx	r3
            break;
   156bc:	e062      	b.n	15784 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_RECV_RESPONSE:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: received response %u data size %u\r\n", (unsigned int)data->recv_response.response_code, (unsigned int)data->recv_response.content_length);
   156be:	687b      	ldr	r3, [r7, #4]
   156c0:	881b      	ldrh	r3, [r3, #0]
   156c2:	001a      	movs	r2, r3
   156c4:	687b      	ldr	r3, [r7, #4]
   156c6:	685b      	ldr	r3, [r3, #4]
   156c8:	4935      	ldr	r1, [pc, #212]	; (157a0 <http_client_callback+0x120>)
   156ca:	2001      	movs	r0, #1
   156cc:	4c31      	ldr	r4, [pc, #196]	; (15794 <http_client_callback+0x114>)
   156ce:	47a0      	blx	r4
            if ((unsigned int)data->recv_response.response_code == 200) {
   156d0:	687b      	ldr	r3, [r7, #4]
   156d2:	881b      	ldrh	r3, [r3, #0]
   156d4:	2bc8      	cmp	r3, #200	; 0xc8
   156d6:	d10d      	bne.n	156f4 <http_client_callback+0x74>
                http_file_size = data->recv_response.content_length;
   156d8:	687b      	ldr	r3, [r7, #4]
   156da:	685a      	ldr	r2, [r3, #4]
   156dc:	4b31      	ldr	r3, [pc, #196]	; (157a4 <http_client_callback+0x124>)
   156de:	601a      	str	r2, [r3, #0]
                received_file_size = 0;
   156e0:	4b31      	ldr	r3, [pc, #196]	; (157a8 <http_client_callback+0x128>)
   156e2:	2200      	movs	r2, #0
   156e4:	601a      	str	r2, [r3, #0]
            } else {
                add_state(CANCELED);
                return;
            }
            if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
   156e6:	687b      	ldr	r3, [r7, #4]
   156e8:	685a      	ldr	r2, [r3, #4]
   156ea:	2380      	movs	r3, #128	; 0x80
   156ec:	009b      	lsls	r3, r3, #2
   156ee:	429a      	cmp	r2, r3
   156f0:	d843      	bhi.n	1577a <http_client_callback+0xfa>
   156f2:	e003      	b.n	156fc <http_client_callback+0x7c>
                add_state(CANCELED);
   156f4:	2020      	movs	r0, #32
   156f6:	4b29      	ldr	r3, [pc, #164]	; (1579c <http_client_callback+0x11c>)
   156f8:	4798      	blx	r3
                return;
   156fa:	e043      	b.n	15784 <http_client_callback+0x104>
                store_file_packet(data->recv_response.content, data->recv_response.content_length);
   156fc:	687b      	ldr	r3, [r7, #4]
   156fe:	689a      	ldr	r2, [r3, #8]
   15700:	687b      	ldr	r3, [r7, #4]
   15702:	685b      	ldr	r3, [r3, #4]
   15704:	0019      	movs	r1, r3
   15706:	0010      	movs	r0, r2
   15708:	4b28      	ldr	r3, [pc, #160]	; (157ac <http_client_callback+0x12c>)
   1570a:	4798      	blx	r3
                add_state(COMPLETED);
   1570c:	2010      	movs	r0, #16
   1570e:	4b23      	ldr	r3, [pc, #140]	; (1579c <http_client_callback+0x11c>)
   15710:	4798      	blx	r3
            }
            break;
   15712:	e032      	b.n	1577a <http_client_callback+0xfa>

        case HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA:
            store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
   15714:	687b      	ldr	r3, [r7, #4]
   15716:	685a      	ldr	r2, [r3, #4]
   15718:	687b      	ldr	r3, [r7, #4]
   1571a:	681b      	ldr	r3, [r3, #0]
   1571c:	0019      	movs	r1, r3
   1571e:	0010      	movs	r0, r2
   15720:	4b22      	ldr	r3, [pc, #136]	; (157ac <http_client_callback+0x12c>)
   15722:	4798      	blx	r3
            if (data->recv_chunked_data.is_complete) {
   15724:	687b      	ldr	r3, [r7, #4]
   15726:	7a1b      	ldrb	r3, [r3, #8]
   15728:	2b00      	cmp	r3, #0
   1572a:	d028      	beq.n	1577e <http_client_callback+0xfe>
                add_state(COMPLETED);
   1572c:	2010      	movs	r0, #16
   1572e:	4b1b      	ldr	r3, [pc, #108]	; (1579c <http_client_callback+0x11c>)
   15730:	4798      	blx	r3
            }

            break;
   15732:	e024      	b.n	1577e <http_client_callback+0xfe>

        case HTTP_CLIENT_CALLBACK_DISCONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
   15734:	687b      	ldr	r3, [r7, #4]
   15736:	681a      	ldr	r2, [r3, #0]
   15738:	4b1d      	ldr	r3, [pc, #116]	; (157b0 <http_client_callback+0x130>)
   1573a:	0019      	movs	r1, r3
   1573c:	2001      	movs	r0, #1
   1573e:	4b15      	ldr	r3, [pc, #84]	; (15794 <http_client_callback+0x114>)
   15740:	4798      	blx	r3

            /* If disconnect reason is equal to -ECONNRESET(-104),
             * It means the server has closed the connection (timeout).
             * This is normal operation.
             */
            if (data->disconnected.reason == -EAGAIN) {
   15742:	687b      	ldr	r3, [r7, #4]
   15744:	681b      	ldr	r3, [r3, #0]
   15746:	330b      	adds	r3, #11
   15748:	d11b      	bne.n	15782 <http_client_callback+0x102>
                /* Server has not responded. Retry immediately. */
                if (is_state_set(DOWNLOADING)) {
   1574a:	2008      	movs	r0, #8
   1574c:	4b19      	ldr	r3, [pc, #100]	; (157b4 <http_client_callback+0x134>)
   1574e:	4798      	blx	r3
   15750:	1e03      	subs	r3, r0, #0
   15752:	d006      	beq.n	15762 <http_client_callback+0xe2>
                    f_close(&file_object);
   15754:	4b18      	ldr	r3, [pc, #96]	; (157b8 <http_client_callback+0x138>)
   15756:	0018      	movs	r0, r3
   15758:	4b18      	ldr	r3, [pc, #96]	; (157bc <http_client_callback+0x13c>)
   1575a:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   1575c:	2008      	movs	r0, #8
   1575e:	4b18      	ldr	r3, [pc, #96]	; (157c0 <http_client_callback+0x140>)
   15760:	4798      	blx	r3
                }

                if (is_state_set(GET_REQUESTED)) {
   15762:	2004      	movs	r0, #4
   15764:	4b13      	ldr	r3, [pc, #76]	; (157b4 <http_client_callback+0x134>)
   15766:	4798      	blx	r3
   15768:	1e03      	subs	r3, r0, #0
   1576a:	d002      	beq.n	15772 <http_client_callback+0xf2>
                    clear_state(GET_REQUESTED);
   1576c:	2004      	movs	r0, #4
   1576e:	4b14      	ldr	r3, [pc, #80]	; (157c0 <http_client_callback+0x140>)
   15770:	4798      	blx	r3
                }

                start_download();
   15772:	4b14      	ldr	r3, [pc, #80]	; (157c4 <http_client_callback+0x144>)
   15774:	4798      	blx	r3
            }

            break;
   15776:	46c0      	nop			; (mov r8, r8)
   15778:	e003      	b.n	15782 <http_client_callback+0x102>
            break;
   1577a:	46c0      	nop			; (mov r8, r8)
   1577c:	e002      	b.n	15784 <http_client_callback+0x104>
            break;
   1577e:	46c0      	nop			; (mov r8, r8)
   15780:	e000      	b.n	15784 <http_client_callback+0x104>
            break;
   15782:	46c0      	nop			; (mov r8, r8)
    }
}
   15784:	46bd      	mov	sp, r7
   15786:	b005      	add	sp, #20
   15788:	bd90      	pop	{r4, r7, pc}
   1578a:	46c0      	nop			; (mov r8, r8)
   1578c:	000367dc 	.word	0x000367dc
   15790:	0003618c 	.word	0x0003618c
   15794:	0001cef1 	.word	0x0001cef1
   15798:	000361c4 	.word	0x000361c4
   1579c:	000150a1 	.word	0x000150a1
   157a0:	000361f0 	.word	0x000361f0
   157a4:	2000085c 	.word	0x2000085c
   157a8:	20000860 	.word	0x20000860
   157ac:	000154ad 	.word	0x000154ad
   157b0:	0003622c 	.word	0x0003622c
   157b4:	000150c9 	.word	0x000150c9
   157b8:	20000838 	.word	0x20000838
   157bc:	0002d52d 	.word	0x0002d52d
   157c0:	0001506d 	.word	0x0001506d
   157c4:	000153f1 	.word	0x000153f1

000157c8 <socket_cb>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   157c8:	b580      	push	{r7, lr}
   157ca:	b082      	sub	sp, #8
   157cc:	af00      	add	r7, sp, #0
   157ce:	603a      	str	r2, [r7, #0]
   157d0:	1dfb      	adds	r3, r7, #7
   157d2:	1c02      	adds	r2, r0, #0
   157d4:	701a      	strb	r2, [r3, #0]
   157d6:	1dbb      	adds	r3, r7, #6
   157d8:	1c0a      	adds	r2, r1, #0
   157da:	701a      	strb	r2, [r3, #0]
    http_client_socket_event_handler(sock, u8Msg, pvMsg);
   157dc:	683a      	ldr	r2, [r7, #0]
   157de:	1dbb      	adds	r3, r7, #6
   157e0:	7819      	ldrb	r1, [r3, #0]
   157e2:	1dfb      	adds	r3, r7, #7
   157e4:	781b      	ldrb	r3, [r3, #0]
   157e6:	b25b      	sxtb	r3, r3
   157e8:	0018      	movs	r0, r3
   157ea:	4b03      	ldr	r3, [pc, #12]	; (157f8 <socket_cb+0x30>)
   157ec:	4798      	blx	r3
}
   157ee:	46c0      	nop			; (mov r8, r8)
   157f0:	46bd      	mov	sp, r7
   157f2:	b002      	add	sp, #8
   157f4:	bd80      	pop	{r7, pc}
   157f6:	46c0      	nop			; (mov r8, r8)
   157f8:	0002fe91 	.word	0x0002fe91

000157fc <resolve_cb>:
 * \brief Callback for the gethostbyname function (DNS Resolution callback).
 * \param[in] pu8DomainName Domain name of the host.
 * \param[in] u32ServerIP Server IPv4 address encoded in NW byte order format. If it is Zero, then the DNS resolution failed.
 */
static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
   157fc:	b5b0      	push	{r4, r5, r7, lr}
   157fe:	b086      	sub	sp, #24
   15800:	af04      	add	r7, sp, #16
   15802:	6078      	str	r0, [r7, #4]
   15804:	6039      	str	r1, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
               "resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n",
               pu8DomainName,
               (int)IPV4_BYTE(u32ServerIP, 0),
   15806:	683b      	ldr	r3, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
   15808:	22ff      	movs	r2, #255	; 0xff
   1580a:	4013      	ands	r3, r2
   1580c:	001c      	movs	r4, r3
               (int)IPV4_BYTE(u32ServerIP, 1),
   1580e:	683b      	ldr	r3, [r7, #0]
   15810:	0a1b      	lsrs	r3, r3, #8
   15812:	001a      	movs	r2, r3
    LogMessage(LOG_DEBUG_LVL,
   15814:	23ff      	movs	r3, #255	; 0xff
   15816:	4013      	ands	r3, r2
               (int)IPV4_BYTE(u32ServerIP, 2),
   15818:	683a      	ldr	r2, [r7, #0]
   1581a:	0c12      	lsrs	r2, r2, #16
   1581c:	0011      	movs	r1, r2
    LogMessage(LOG_DEBUG_LVL,
   1581e:	22ff      	movs	r2, #255	; 0xff
   15820:	400a      	ands	r2, r1
               (int)IPV4_BYTE(u32ServerIP, 3));
   15822:	6839      	ldr	r1, [r7, #0]
   15824:	0e09      	lsrs	r1, r1, #24
    LogMessage(LOG_DEBUG_LVL,
   15826:	000d      	movs	r5, r1
   15828:	6878      	ldr	r0, [r7, #4]
   1582a:	4909      	ldr	r1, [pc, #36]	; (15850 <resolve_cb+0x54>)
   1582c:	9502      	str	r5, [sp, #8]
   1582e:	9201      	str	r2, [sp, #4]
   15830:	9300      	str	r3, [sp, #0]
   15832:	0023      	movs	r3, r4
   15834:	0002      	movs	r2, r0
   15836:	2001      	movs	r0, #1
   15838:	4c06      	ldr	r4, [pc, #24]	; (15854 <resolve_cb+0x58>)
   1583a:	47a0      	blx	r4
    http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
   1583c:	683a      	ldr	r2, [r7, #0]
   1583e:	687b      	ldr	r3, [r7, #4]
   15840:	0011      	movs	r1, r2
   15842:	0018      	movs	r0, r3
   15844:	4b04      	ldr	r3, [pc, #16]	; (15858 <resolve_cb+0x5c>)
   15846:	4798      	blx	r3
}
   15848:	46c0      	nop			; (mov r8, r8)
   1584a:	46bd      	mov	sp, r7
   1584c:	b002      	add	sp, #8
   1584e:	bdb0      	pop	{r4, r5, r7, pc}
   15850:	0003625c 	.word	0x0003625c
   15854:	0001cef1 	.word	0x0001cef1
   15858:	0002fff5 	.word	0x0002fff5

0001585c <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
   1585c:	b590      	push	{r4, r7, lr}
   1585e:	b087      	sub	sp, #28
   15860:	af02      	add	r7, sp, #8
   15862:	0002      	movs	r2, r0
   15864:	6039      	str	r1, [r7, #0]
   15866:	1dfb      	adds	r3, r7, #7
   15868:	701a      	strb	r2, [r3, #0]
    switch (u8MsgType) {
   1586a:	1dfb      	adds	r3, r7, #7
   1586c:	781b      	ldrb	r3, [r3, #0]
   1586e:	2b2c      	cmp	r3, #44	; 0x2c
   15870:	d002      	beq.n	15878 <wifi_cb+0x1c>
   15872:	2b32      	cmp	r3, #50	; 0x32
   15874:	d03d      	beq.n	158f2 <wifi_cb+0x96>
                }
            }
        } break;

        default:
            break;
   15876:	e06f      	b.n	15958 <wifi_cb+0xfc>
            tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
   15878:	683b      	ldr	r3, [r7, #0]
   1587a:	60fb      	str	r3, [r7, #12]
            if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   1587c:	68fb      	ldr	r3, [r7, #12]
   1587e:	781b      	ldrb	r3, [r3, #0]
   15880:	2b01      	cmp	r3, #1
   15882:	d107      	bne.n	15894 <wifi_cb+0x38>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_CONNECTED\r\n");
   15884:	4b36      	ldr	r3, [pc, #216]	; (15960 <wifi_cb+0x104>)
   15886:	0019      	movs	r1, r3
   15888:	2001      	movs	r0, #1
   1588a:	4b36      	ldr	r3, [pc, #216]	; (15964 <wifi_cb+0x108>)
   1588c:	4798      	blx	r3
                m2m_wifi_request_dhcp_client();
   1588e:	4b36      	ldr	r3, [pc, #216]	; (15968 <wifi_cb+0x10c>)
   15890:	4798      	blx	r3
            break;
   15892:	e05e      	b.n	15952 <wifi_cb+0xf6>
            } else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   15894:	68fb      	ldr	r3, [r7, #12]
   15896:	781b      	ldrb	r3, [r3, #0]
   15898:	2b00      	cmp	r3, #0
   1589a:	d15a      	bne.n	15952 <wifi_cb+0xf6>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
   1589c:	4b33      	ldr	r3, [pc, #204]	; (1596c <wifi_cb+0x110>)
   1589e:	0019      	movs	r1, r3
   158a0:	2001      	movs	r0, #1
   158a2:	4b30      	ldr	r3, [pc, #192]	; (15964 <wifi_cb+0x108>)
   158a4:	4798      	blx	r3
                clear_state(WIFI_CONNECTED);
   158a6:	2002      	movs	r0, #2
   158a8:	4b31      	ldr	r3, [pc, #196]	; (15970 <wifi_cb+0x114>)
   158aa:	4798      	blx	r3
                if (is_state_set(DOWNLOADING)) {
   158ac:	2008      	movs	r0, #8
   158ae:	4b31      	ldr	r3, [pc, #196]	; (15974 <wifi_cb+0x118>)
   158b0:	4798      	blx	r3
   158b2:	1e03      	subs	r3, r0, #0
   158b4:	d006      	beq.n	158c4 <wifi_cb+0x68>
                    f_close(&file_object);
   158b6:	4b30      	ldr	r3, [pc, #192]	; (15978 <wifi_cb+0x11c>)
   158b8:	0018      	movs	r0, r3
   158ba:	4b30      	ldr	r3, [pc, #192]	; (1597c <wifi_cb+0x120>)
   158bc:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   158be:	2008      	movs	r0, #8
   158c0:	4b2b      	ldr	r3, [pc, #172]	; (15970 <wifi_cb+0x114>)
   158c2:	4798      	blx	r3
                if (is_state_set(GET_REQUESTED)) {
   158c4:	2004      	movs	r0, #4
   158c6:	4b2b      	ldr	r3, [pc, #172]	; (15974 <wifi_cb+0x118>)
   158c8:	4798      	blx	r3
   158ca:	1e03      	subs	r3, r0, #0
   158cc:	d002      	beq.n	158d4 <wifi_cb+0x78>
                    clear_state(GET_REQUESTED);
   158ce:	2004      	movs	r0, #4
   158d0:	4b27      	ldr	r3, [pc, #156]	; (15970 <wifi_cb+0x114>)
   158d2:	4798      	blx	r3
                mqtt_disconnect(&mqtt_inst, 1);
   158d4:	4b2a      	ldr	r3, [pc, #168]	; (15980 <wifi_cb+0x124>)
   158d6:	2101      	movs	r1, #1
   158d8:	0018      	movs	r0, r3
   158da:	4b2a      	ldr	r3, [pc, #168]	; (15984 <wifi_cb+0x128>)
   158dc:	4798      	blx	r3
                m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   158de:	4a2a      	ldr	r2, [pc, #168]	; (15988 <wifi_cb+0x12c>)
   158e0:	482a      	ldr	r0, [pc, #168]	; (1598c <wifi_cb+0x130>)
   158e2:	23ff      	movs	r3, #255	; 0xff
   158e4:	9300      	str	r3, [sp, #0]
   158e6:	0013      	movs	r3, r2
   158e8:	2202      	movs	r2, #2
   158ea:	2112      	movs	r1, #18
   158ec:	4c28      	ldr	r4, [pc, #160]	; (15990 <wifi_cb+0x134>)
   158ee:	47a0      	blx	r4
            break;
   158f0:	e02f      	b.n	15952 <wifi_cb+0xf6>
            uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
   158f2:	683b      	ldr	r3, [r7, #0]
   158f4:	60bb      	str	r3, [r7, #8]
            LogMessage(LOG_DEBUG_LVL, "wifi_cb: IP address is %u.%u.%u.%u\r\n", pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   158f6:	68bb      	ldr	r3, [r7, #8]
   158f8:	781b      	ldrb	r3, [r3, #0]
   158fa:	0018      	movs	r0, r3
   158fc:	68bb      	ldr	r3, [r7, #8]
   158fe:	3301      	adds	r3, #1
   15900:	781b      	ldrb	r3, [r3, #0]
   15902:	001c      	movs	r4, r3
   15904:	68bb      	ldr	r3, [r7, #8]
   15906:	3302      	adds	r3, #2
   15908:	781b      	ldrb	r3, [r3, #0]
   1590a:	001a      	movs	r2, r3
   1590c:	68bb      	ldr	r3, [r7, #8]
   1590e:	3303      	adds	r3, #3
   15910:	781b      	ldrb	r3, [r3, #0]
   15912:	4920      	ldr	r1, [pc, #128]	; (15994 <wifi_cb+0x138>)
   15914:	9301      	str	r3, [sp, #4]
   15916:	9200      	str	r2, [sp, #0]
   15918:	0023      	movs	r3, r4
   1591a:	0002      	movs	r2, r0
   1591c:	2001      	movs	r0, #1
   1591e:	4c11      	ldr	r4, [pc, #68]	; (15964 <wifi_cb+0x108>)
   15920:	47a0      	blx	r4
            add_state(WIFI_CONNECTED);
   15922:	2002      	movs	r0, #2
   15924:	4b1c      	ldr	r3, [pc, #112]	; (15998 <wifi_cb+0x13c>)
   15926:	4798      	blx	r3
            if (do_download_flag == 1) {
   15928:	4b1c      	ldr	r3, [pc, #112]	; (1599c <wifi_cb+0x140>)
   1592a:	781b      	ldrb	r3, [r3, #0]
   1592c:	2b01      	cmp	r3, #1
   1592e:	d102      	bne.n	15936 <wifi_cb+0xda>
                start_download();
   15930:	4b1b      	ldr	r3, [pc, #108]	; (159a0 <wifi_cb+0x144>)
   15932:	4798      	blx	r3
        } break;
   15934:	e00f      	b.n	15956 <wifi_cb+0xfa>
                if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   15936:	4a1b      	ldr	r2, [pc, #108]	; (159a4 <wifi_cb+0x148>)
   15938:	4b11      	ldr	r3, [pc, #68]	; (15980 <wifi_cb+0x124>)
   1593a:	0011      	movs	r1, r2
   1593c:	0018      	movs	r0, r3
   1593e:	4b1a      	ldr	r3, [pc, #104]	; (159a8 <wifi_cb+0x14c>)
   15940:	4798      	blx	r3
   15942:	1e03      	subs	r3, r0, #0
   15944:	d007      	beq.n	15956 <wifi_cb+0xfa>
                    LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   15946:	4b19      	ldr	r3, [pc, #100]	; (159ac <wifi_cb+0x150>)
   15948:	0019      	movs	r1, r3
   1594a:	2001      	movs	r0, #1
   1594c:	4b05      	ldr	r3, [pc, #20]	; (15964 <wifi_cb+0x108>)
   1594e:	4798      	blx	r3
        } break;
   15950:	e001      	b.n	15956 <wifi_cb+0xfa>
            break;
   15952:	46c0      	nop			; (mov r8, r8)
   15954:	e000      	b.n	15958 <wifi_cb+0xfc>
        } break;
   15956:	46c0      	nop			; (mov r8, r8)
    }
}
   15958:	46c0      	nop			; (mov r8, r8)
   1595a:	46bd      	mov	sp, r7
   1595c:	b005      	add	sp, #20
   1595e:	bd90      	pop	{r4, r7, pc}
   15960:	0003628c 	.word	0x0003628c
   15964:	0001cef1 	.word	0x0001cef1
   15968:	00021535 	.word	0x00021535
   1596c:	000362ac 	.word	0x000362ac
   15970:	0001506d 	.word	0x0001506d
   15974:	000150c9 	.word	0x000150c9
   15978:	20000838 	.word	0x20000838
   1597c:	0002d52d 	.word	0x0002d52d
   15980:	20000864 	.word	0x20000864
   15984:	0002eb3d 	.word	0x0002eb3d
   15988:	000362d0 	.word	0x000362d0
   1598c:	000362e0 	.word	0x000362e0
   15990:	00021061 	.word	0x00021061
   15994:	000362f4 	.word	0x000362f4
   15998:	000150a1 	.word	0x000150a1
   1599c:	20000604 	.word	0x20000604
   159a0:	000153f1 	.word	0x000153f1
   159a4:	00035f10 	.word	0x00035f10
   159a8:	0002ea09 	.word	0x0002ea09
   159ac:	0003631c 	.word	0x0003631c

000159b0 <init_storage>:

/**
 * \brief Initialize SD/MMC storage.
 */
void init_storage(void)
{
   159b0:	b590      	push	{r4, r7, lr}
   159b2:	b083      	sub	sp, #12
   159b4:	af00      	add	r7, sp, #0
    FRESULT res;
    Ctrl_status status;

    /* Initialize SD/MMC stack. */
    sd_mmc_init();
   159b6:	4b29      	ldr	r3, [pc, #164]	; (15a5c <init_storage+0xac>)
   159b8:	4798      	blx	r3
    while (true) {
        LogMessage(LOG_DEBUG_LVL, "init_storage: please plug an SD/MMC card in slot...\r\n");
   159ba:	4b29      	ldr	r3, [pc, #164]	; (15a60 <init_storage+0xb0>)
   159bc:	0019      	movs	r1, r3
   159be:	2001      	movs	r0, #1
   159c0:	4b28      	ldr	r3, [pc, #160]	; (15a64 <init_storage+0xb4>)
   159c2:	4798      	blx	r3

        /* Wait card present and ready. */
        do {
            status = sd_mmc_test_unit_ready(0);
   159c4:	1dfc      	adds	r4, r7, #7
   159c6:	2000      	movs	r0, #0
   159c8:	4b27      	ldr	r3, [pc, #156]	; (15a68 <init_storage+0xb8>)
   159ca:	4798      	blx	r3
   159cc:	0003      	movs	r3, r0
   159ce:	7023      	strb	r3, [r4, #0]
            if (CTRL_FAIL == status) {
   159d0:	1dfb      	adds	r3, r7, #7
   159d2:	781b      	ldrb	r3, [r3, #0]
   159d4:	2b01      	cmp	r3, #1
   159d6:	d110      	bne.n	159fa <init_storage+0x4a>
                LogMessage(LOG_DEBUG_LVL, "init_storage: SD Card install failed.\r\n");
   159d8:	4b24      	ldr	r3, [pc, #144]	; (15a6c <init_storage+0xbc>)
   159da:	0019      	movs	r1, r3
   159dc:	2001      	movs	r0, #1
   159de:	4b21      	ldr	r3, [pc, #132]	; (15a64 <init_storage+0xb4>)
   159e0:	4798      	blx	r3
                LogMessage(LOG_DEBUG_LVL, "init_storage: try unplug and re-plug the card.\r\n");
   159e2:	4b23      	ldr	r3, [pc, #140]	; (15a70 <init_storage+0xc0>)
   159e4:	0019      	movs	r1, r3
   159e6:	2001      	movs	r0, #1
   159e8:	4b1e      	ldr	r3, [pc, #120]	; (15a64 <init_storage+0xb4>)
   159ea:	4798      	blx	r3
                while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
   159ec:	46c0      	nop			; (mov r8, r8)
   159ee:	2000      	movs	r0, #0
   159f0:	4b20      	ldr	r3, [pc, #128]	; (15a74 <init_storage+0xc4>)
   159f2:	4798      	blx	r3
   159f4:	0003      	movs	r3, r0
   159f6:	2b02      	cmp	r3, #2
   159f8:	d1f9      	bne.n	159ee <init_storage+0x3e>
                }
            }
        } while (CTRL_GOOD != status);
   159fa:	1dfb      	adds	r3, r7, #7
   159fc:	781b      	ldrb	r3, [r3, #0]
   159fe:	2b00      	cmp	r3, #0
   15a00:	d1e0      	bne.n	159c4 <init_storage+0x14>

        LogMessage(LOG_DEBUG_LVL, "init_storage: mounting SD card...\r\n");
   15a02:	4b1d      	ldr	r3, [pc, #116]	; (15a78 <init_storage+0xc8>)
   15a04:	0019      	movs	r1, r3
   15a06:	2001      	movs	r0, #1
   15a08:	4b16      	ldr	r3, [pc, #88]	; (15a64 <init_storage+0xb4>)
   15a0a:	4798      	blx	r3
        memset(&fatfs, 0, sizeof(FATFS));
   15a0c:	238c      	movs	r3, #140	; 0x8c
   15a0e:	009a      	lsls	r2, r3, #2
   15a10:	4b1a      	ldr	r3, [pc, #104]	; (15a7c <init_storage+0xcc>)
   15a12:	2100      	movs	r1, #0
   15a14:	0018      	movs	r0, r3
   15a16:	4b1a      	ldr	r3, [pc, #104]	; (15a80 <init_storage+0xd0>)
   15a18:	4798      	blx	r3
        res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
   15a1a:	1dbc      	adds	r4, r7, #6
   15a1c:	4b17      	ldr	r3, [pc, #92]	; (15a7c <init_storage+0xcc>)
   15a1e:	0019      	movs	r1, r3
   15a20:	2000      	movs	r0, #0
   15a22:	4b18      	ldr	r3, [pc, #96]	; (15a84 <init_storage+0xd4>)
   15a24:	4798      	blx	r3
   15a26:	0003      	movs	r3, r0
   15a28:	7023      	strb	r3, [r4, #0]
        if (FR_INVALID_DRIVE == res) {
   15a2a:	1dbb      	adds	r3, r7, #6
   15a2c:	781b      	ldrb	r3, [r3, #0]
   15a2e:	2b0b      	cmp	r3, #11
   15a30:	d107      	bne.n	15a42 <init_storage+0x92>
            LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount failed! (res %d)\r\n", res);
   15a32:	1dbb      	adds	r3, r7, #6
   15a34:	781a      	ldrb	r2, [r3, #0]
   15a36:	4b14      	ldr	r3, [pc, #80]	; (15a88 <init_storage+0xd8>)
   15a38:	0019      	movs	r1, r3
   15a3a:	2001      	movs	r0, #1
   15a3c:	4b09      	ldr	r3, [pc, #36]	; (15a64 <init_storage+0xb4>)
   15a3e:	4798      	blx	r3
            return;
   15a40:	e008      	b.n	15a54 <init_storage+0xa4>
        }

        LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount OK.\r\n");
   15a42:	4b12      	ldr	r3, [pc, #72]	; (15a8c <init_storage+0xdc>)
   15a44:	0019      	movs	r1, r3
   15a46:	2001      	movs	r0, #1
   15a48:	4b06      	ldr	r3, [pc, #24]	; (15a64 <init_storage+0xb4>)
   15a4a:	4798      	blx	r3
        add_state(STORAGE_READY);
   15a4c:	2001      	movs	r0, #1
   15a4e:	4b10      	ldr	r3, [pc, #64]	; (15a90 <init_storage+0xe0>)
   15a50:	4798      	blx	r3
        return;
   15a52:	46c0      	nop			; (mov r8, r8)
    }
}
   15a54:	46bd      	mov	sp, r7
   15a56:	b003      	add	sp, #12
   15a58:	bd90      	pop	{r4, r7, pc}
   15a5a:	46c0      	nop			; (mov r8, r8)
   15a5c:	0001dd09 	.word	0x0001dd09
   15a60:	00036340 	.word	0x00036340
   15a64:	0001cef1 	.word	0x0001cef1
   15a68:	0001e1e5 	.word	0x0001e1e5
   15a6c:	00036378 	.word	0x00036378
   15a70:	000363a0 	.word	0x000363a0
   15a74:	0001dd59 	.word	0x0001dd59
   15a78:	000363d4 	.word	0x000363d4
   15a7c:	20000608 	.word	0x20000608
   15a80:	000345df 	.word	0x000345df
   15a84:	0002cad5 	.word	0x0002cad5
   15a88:	000363f8 	.word	0x000363f8
   15a8c:	00036428 	.word	0x00036428
   15a90:	000150a1 	.word	0x000150a1

00015a94 <configure_timer>:

/**
 * \brief Configure Timer module.
 */
static void configure_timer(void)
{
   15a94:	b580      	push	{r7, lr}
   15a96:	b082      	sub	sp, #8
   15a98:	af00      	add	r7, sp, #0
    struct sw_timer_config swt_conf;
    sw_timer_get_config_defaults(&swt_conf);
   15a9a:	1d3b      	adds	r3, r7, #4
   15a9c:	0018      	movs	r0, r3
   15a9e:	4b08      	ldr	r3, [pc, #32]	; (15ac0 <configure_timer+0x2c>)
   15aa0:	4798      	blx	r3

    sw_timer_init(&swt_module_inst, &swt_conf);
   15aa2:	1d3a      	adds	r2, r7, #4
   15aa4:	4b07      	ldr	r3, [pc, #28]	; (15ac4 <configure_timer+0x30>)
   15aa6:	0011      	movs	r1, r2
   15aa8:	0018      	movs	r0, r3
   15aaa:	4b07      	ldr	r3, [pc, #28]	; (15ac8 <configure_timer+0x34>)
   15aac:	4798      	blx	r3
    sw_timer_enable(&swt_module_inst);
   15aae:	4b05      	ldr	r3, [pc, #20]	; (15ac4 <configure_timer+0x30>)
   15ab0:	0018      	movs	r0, r3
   15ab2:	4b06      	ldr	r3, [pc, #24]	; (15acc <configure_timer+0x38>)
   15ab4:	4798      	blx	r3
}
   15ab6:	46c0      	nop			; (mov r8, r8)
   15ab8:	46bd      	mov	sp, r7
   15aba:	b002      	add	sp, #8
   15abc:	bd80      	pop	{r7, pc}
   15abe:	46c0      	nop			; (mov r8, r8)
   15ac0:	00031625 	.word	0x00031625
   15ac4:	20004874 	.word	0x20004874
   15ac8:	00031649 	.word	0x00031649
   15acc:	00031735 	.word	0x00031735

00015ad0 <configure_http_client>:

/**
 * \brief Configure HTTP client module.
 */
static void configure_http_client(void)
{
   15ad0:	b580      	push	{r7, lr}
   15ad2:	b088      	sub	sp, #32
   15ad4:	af00      	add	r7, sp, #0
    struct http_client_config httpc_conf;
    int ret;

    http_client_get_config_defaults(&httpc_conf);
   15ad6:	003b      	movs	r3, r7
   15ad8:	0018      	movs	r0, r3
   15ada:	4b12      	ldr	r3, [pc, #72]	; (15b24 <configure_http_client+0x54>)
   15adc:	4798      	blx	r3

    httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   15ade:	003b      	movs	r3, r7
   15ae0:	2280      	movs	r2, #128	; 0x80
   15ae2:	0092      	lsls	r2, r2, #2
   15ae4:	611a      	str	r2, [r3, #16]
    httpc_conf.timer_inst = &swt_module_inst;
   15ae6:	003b      	movs	r3, r7
   15ae8:	4a0f      	ldr	r2, [pc, #60]	; (15b28 <configure_http_client+0x58>)
   15aea:	605a      	str	r2, [r3, #4]
    //httpc_conf.port = 443;
    //httpc_conf.tls = 1;

    ret = http_client_init(&http_client_module_inst, &httpc_conf);
   15aec:	003a      	movs	r2, r7
   15aee:	4b0f      	ldr	r3, [pc, #60]	; (15b2c <configure_http_client+0x5c>)
   15af0:	0011      	movs	r1, r2
   15af2:	0018      	movs	r0, r3
   15af4:	4b0e      	ldr	r3, [pc, #56]	; (15b30 <configure_http_client+0x60>)
   15af6:	4798      	blx	r3
   15af8:	0003      	movs	r3, r0
   15afa:	61fb      	str	r3, [r7, #28]
    if (ret < 0) {
   15afc:	69fb      	ldr	r3, [r7, #28]
   15afe:	2b00      	cmp	r3, #0
   15b00:	da06      	bge.n	15b10 <configure_http_client+0x40>
        LogMessage(LOG_DEBUG_LVL, "configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   15b02:	69fa      	ldr	r2, [r7, #28]
   15b04:	4b0b      	ldr	r3, [pc, #44]	; (15b34 <configure_http_client+0x64>)
   15b06:	0019      	movs	r1, r3
   15b08:	2001      	movs	r0, #1
   15b0a:	4b0b      	ldr	r3, [pc, #44]	; (15b38 <configure_http_client+0x68>)
   15b0c:	4798      	blx	r3
        while (1) {
   15b0e:	e7fe      	b.n	15b0e <configure_http_client+0x3e>
        } /* Loop forever. */
    }

    http_client_register_callback(&http_client_module_inst, http_client_callback);
   15b10:	4a0a      	ldr	r2, [pc, #40]	; (15b3c <configure_http_client+0x6c>)
   15b12:	4b06      	ldr	r3, [pc, #24]	; (15b2c <configure_http_client+0x5c>)
   15b14:	0011      	movs	r1, r2
   15b16:	0018      	movs	r0, r3
   15b18:	4b09      	ldr	r3, [pc, #36]	; (15b40 <configure_http_client+0x70>)
   15b1a:	4798      	blx	r3
}
   15b1c:	46c0      	nop			; (mov r8, r8)
   15b1e:	46bd      	mov	sp, r7
   15b20:	b008      	add	sp, #32
   15b22:	bd80      	pop	{r7, pc}
   15b24:	0002fcb9 	.word	0x0002fcb9
   15b28:	20004874 	.word	0x20004874
   15b2c:	200048cc 	.word	0x200048cc
   15b30:	0002fd05 	.word	0x0002fd05
   15b34:	0003644c 	.word	0x0003644c
   15b38:	0001cef1 	.word	0x0001cef1
   15b3c:	00015681 	.word	0x00015681
   15b40:	0002fdf1 	.word	0x0002fdf1

00015b44 <socket_event_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   15b44:	b580      	push	{r7, lr}
   15b46:	b082      	sub	sp, #8
   15b48:	af00      	add	r7, sp, #0
   15b4a:	603a      	str	r2, [r7, #0]
   15b4c:	1dfb      	adds	r3, r7, #7
   15b4e:	1c02      	adds	r2, r0, #0
   15b50:	701a      	strb	r2, [r3, #0]
   15b52:	1dbb      	adds	r3, r7, #6
   15b54:	1c0a      	adds	r2, r1, #0
   15b56:	701a      	strb	r2, [r3, #0]
    mqtt_socket_event_handler(sock, msg_type, msg_data);
   15b58:	683a      	ldr	r2, [r7, #0]
   15b5a:	1dbb      	adds	r3, r7, #6
   15b5c:	7819      	ldrb	r1, [r3, #0]
   15b5e:	1dfb      	adds	r3, r7, #7
   15b60:	781b      	ldrb	r3, [r3, #0]
   15b62:	b25b      	sxtb	r3, r3
   15b64:	0018      	movs	r0, r3
   15b66:	4b03      	ldr	r3, [pc, #12]	; (15b74 <socket_event_handler+0x30>)
   15b68:	4798      	blx	r3
}
   15b6a:	46c0      	nop			; (mov r8, r8)
   15b6c:	46bd      	mov	sp, r7
   15b6e:	b002      	add	sp, #8
   15b70:	bd80      	pop	{r7, pc}
   15b72:	46c0      	nop			; (mov r8, r8)
   15b74:	0002e9b1 	.word	0x0002e9b1

00015b78 <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   15b78:	b580      	push	{r7, lr}
   15b7a:	b082      	sub	sp, #8
   15b7c:	af00      	add	r7, sp, #0
   15b7e:	6078      	str	r0, [r7, #4]
   15b80:	6039      	str	r1, [r7, #0]
    mqtt_socket_resolve_handler(doamin_name, server_ip);
   15b82:	683a      	ldr	r2, [r7, #0]
   15b84:	687b      	ldr	r3, [r7, #4]
   15b86:	0011      	movs	r1, r2
   15b88:	0018      	movs	r0, r3
   15b8a:	4b03      	ldr	r3, [pc, #12]	; (15b98 <socket_resolve_handler+0x20>)
   15b8c:	4798      	blx	r3
}
   15b8e:	46c0      	nop			; (mov r8, r8)
   15b90:	46bd      	mov	sp, r7
   15b92:	b002      	add	sp, #8
   15b94:	bd80      	pop	{r7, pc}
   15b96:	46c0      	nop			; (mov r8, r8)
   15b98:	0002e9e5 	.word	0x0002e9e5

00015b9c <SubscribeHandlerServo>:
        }
    }
}

void SubscribeHandlerServo(MessageData *msgData)
{
   15b9c:	b590      	push	{r4, r7, lr}
   15b9e:	b083      	sub	sp, #12
   15ba0:	af00      	add	r7, sp, #0
   15ba2:	6078      	str	r0, [r7, #4]
	/* You received publish message which you had subscribed. */
	/* Print Topic and message */
	LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   15ba4:	687b      	ldr	r3, [r7, #4]
   15ba6:	685b      	ldr	r3, [r3, #4]
   15ba8:	685a      	ldr	r2, [r3, #4]
   15baa:	687b      	ldr	r3, [r7, #4]
   15bac:	685b      	ldr	r3, [r3, #4]
   15bae:	689b      	ldr	r3, [r3, #8]
   15bb0:	4920      	ldr	r1, [pc, #128]	; (15c34 <SubscribeHandlerServo+0x98>)
   15bb2:	2001      	movs	r0, #1
   15bb4:	4c20      	ldr	r4, [pc, #128]	; (15c38 <SubscribeHandlerServo+0x9c>)
   15bb6:	47a0      	blx	r4
	LogMessage(LOG_DEBUG_LVL, " >> ");
   15bb8:	4b20      	ldr	r3, [pc, #128]	; (15c3c <SubscribeHandlerServo+0xa0>)
   15bba:	0019      	movs	r1, r3
   15bbc:	2001      	movs	r0, #1
   15bbe:	4b1e      	ldr	r3, [pc, #120]	; (15c38 <SubscribeHandlerServo+0x9c>)
   15bc0:	4798      	blx	r3
	LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   15bc2:	687b      	ldr	r3, [r7, #4]
   15bc4:	681b      	ldr	r3, [r3, #0]
   15bc6:	68da      	ldr	r2, [r3, #12]
   15bc8:	687b      	ldr	r3, [r7, #4]
   15bca:	681b      	ldr	r3, [r3, #0]
   15bcc:	689b      	ldr	r3, [r3, #8]
   15bce:	491c      	ldr	r1, [pc, #112]	; (15c40 <SubscribeHandlerServo+0xa4>)
   15bd0:	2001      	movs	r0, #1
   15bd2:	4c19      	ldr	r4, [pc, #100]	; (15c38 <SubscribeHandlerServo+0x9c>)
   15bd4:	47a0      	blx	r4

	// Handle LedData message
	if (strncmp((char *)msgData->topicName->lenstring.data, SERVO_TOPIC, msgData->message->payloadlen) == 0) {
   15bd6:	687b      	ldr	r3, [r7, #4]
   15bd8:	685b      	ldr	r3, [r3, #4]
   15bda:	6898      	ldr	r0, [r3, #8]
   15bdc:	687b      	ldr	r3, [r7, #4]
   15bde:	681b      	ldr	r3, [r3, #0]
   15be0:	68da      	ldr	r2, [r3, #12]
   15be2:	4b18      	ldr	r3, [pc, #96]	; (15c44 <SubscribeHandlerServo+0xa8>)
   15be4:	0019      	movs	r1, r3
   15be6:	4b18      	ldr	r3, [pc, #96]	; (15c48 <SubscribeHandlerServo+0xac>)
   15be8:	4798      	blx	r3
   15bea:	1e03      	subs	r3, r0, #0
   15bec:	d11e      	bne.n	15c2c <SubscribeHandlerServo+0x90>
		if (strncmp((char *)msgData->message->payload, LED_TOPIC_LED_OFF, msgData->message->payloadlen) == 0) {
   15bee:	687b      	ldr	r3, [r7, #4]
   15bf0:	681b      	ldr	r3, [r3, #0]
   15bf2:	6898      	ldr	r0, [r3, #8]
   15bf4:	687b      	ldr	r3, [r7, #4]
   15bf6:	681b      	ldr	r3, [r3, #0]
   15bf8:	68da      	ldr	r2, [r3, #12]
   15bfa:	4b14      	ldr	r3, [pc, #80]	; (15c4c <SubscribeHandlerServo+0xb0>)
   15bfc:	0019      	movs	r1, r3
   15bfe:	4b12      	ldr	r3, [pc, #72]	; (15c48 <SubscribeHandlerServo+0xac>)
   15c00:	4798      	blx	r3
   15c02:	1e03      	subs	r3, r0, #0
   15c04:	d103      	bne.n	15c0e <SubscribeHandlerServo+0x72>
			servo_setDuty(2);
   15c06:	2002      	movs	r0, #2
   15c08:	4b11      	ldr	r3, [pc, #68]	; (15c50 <SubscribeHandlerServo+0xb4>)
   15c0a:	4798      	blx	r3
			} else if (strncmp((char *)msgData->message->payload, LED_TOPIC_LED_ON, msgData->message->payloadlen) == 0) {
			servo_setDuty(3);
			//servo_sub_flag = 1;
		}
	}
}
   15c0c:	e00e      	b.n	15c2c <SubscribeHandlerServo+0x90>
			} else if (strncmp((char *)msgData->message->payload, LED_TOPIC_LED_ON, msgData->message->payloadlen) == 0) {
   15c0e:	687b      	ldr	r3, [r7, #4]
   15c10:	681b      	ldr	r3, [r3, #0]
   15c12:	6898      	ldr	r0, [r3, #8]
   15c14:	687b      	ldr	r3, [r7, #4]
   15c16:	681b      	ldr	r3, [r3, #0]
   15c18:	68da      	ldr	r2, [r3, #12]
   15c1a:	4b0e      	ldr	r3, [pc, #56]	; (15c54 <SubscribeHandlerServo+0xb8>)
   15c1c:	0019      	movs	r1, r3
   15c1e:	4b0a      	ldr	r3, [pc, #40]	; (15c48 <SubscribeHandlerServo+0xac>)
   15c20:	4798      	blx	r3
   15c22:	1e03      	subs	r3, r0, #0
   15c24:	d102      	bne.n	15c2c <SubscribeHandlerServo+0x90>
			servo_setDuty(3);
   15c26:	2003      	movs	r0, #3
   15c28:	4b09      	ldr	r3, [pc, #36]	; (15c50 <SubscribeHandlerServo+0xb4>)
   15c2a:	4798      	blx	r3
}
   15c2c:	46c0      	nop			; (mov r8, r8)
   15c2e:	46bd      	mov	sp, r7
   15c30:	b003      	add	sp, #12
   15c32:	bd90      	pop	{r4, r7, pc}
   15c34:	00036494 	.word	0x00036494
   15c38:	0001cef1 	.word	0x0001cef1
   15c3c:	0003649c 	.word	0x0003649c
   15c40:	000364a4 	.word	0x000364a4
   15c44:	000364d0 	.word	0x000364d0
   15c48:	00034989 	.word	0x00034989
   15c4c:	000364c0 	.word	0x000364c0
   15c50:	00014d59 	.word	0x00014d59
   15c54:	000364c8 	.word	0x000364c8

00015c58 <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
   15c58:	b590      	push	{r4, r7, lr}
   15c5a:	b08b      	sub	sp, #44	; 0x2c
   15c5c:	af06      	add	r7, sp, #24
   15c5e:	60f8      	str	r0, [r7, #12]
   15c60:	60b9      	str	r1, [r7, #8]
   15c62:	607a      	str	r2, [r7, #4]
    switch (type) {
   15c64:	68bb      	ldr	r3, [r7, #8]
   15c66:	2b01      	cmp	r3, #1
   15c68:	d03b      	beq.n	15ce2 <mqtt_callback+0x8a>
   15c6a:	2b05      	cmp	r3, #5
   15c6c:	d052      	beq.n	15d14 <mqtt_callback+0xbc>
   15c6e:	2b00      	cmp	r3, #0
   15c70:	d000      	beq.n	15c74 <mqtt_callback+0x1c>
            /* Stop timer and USART callback. */
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
            // usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
            break;
    }
}
   15c72:	e055      	b.n	15d20 <mqtt_callback+0xc8>
            if (data->sock_connected.result >= 0) {
   15c74:	687b      	ldr	r3, [r7, #4]
   15c76:	681b      	ldr	r3, [r3, #0]
   15c78:	2b00      	cmp	r3, #0
   15c7a:	db25      	blt.n	15cc8 <mqtt_callback+0x70>
                LogMessage(LOG_DEBUG_LVL, "\r\nConnecting to Broker...");
   15c7c:	4b2a      	ldr	r3, [pc, #168]	; (15d28 <mqtt_callback+0xd0>)
   15c7e:	0019      	movs	r1, r3
   15c80:	2001      	movs	r0, #1
   15c82:	4b2a      	ldr	r3, [pc, #168]	; (15d2c <mqtt_callback+0xd4>)
   15c84:	4798      	blx	r3
                if (0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0)) {
   15c86:	492a      	ldr	r1, [pc, #168]	; (15d30 <mqtt_callback+0xd8>)
   15c88:	4a2a      	ldr	r2, [pc, #168]	; (15d34 <mqtt_callback+0xdc>)
   15c8a:	68f8      	ldr	r0, [r7, #12]
   15c8c:	2300      	movs	r3, #0
   15c8e:	9305      	str	r3, [sp, #20]
   15c90:	2300      	movs	r3, #0
   15c92:	9304      	str	r3, [sp, #16]
   15c94:	2300      	movs	r3, #0
   15c96:	9303      	str	r3, [sp, #12]
   15c98:	2300      	movs	r3, #0
   15c9a:	9302      	str	r3, [sp, #8]
   15c9c:	2300      	movs	r3, #0
   15c9e:	9301      	str	r3, [sp, #4]
   15ca0:	4b24      	ldr	r3, [pc, #144]	; (15d34 <mqtt_callback+0xdc>)
   15ca2:	9300      	str	r3, [sp, #0]
   15ca4:	000b      	movs	r3, r1
   15ca6:	2101      	movs	r1, #1
   15ca8:	4c23      	ldr	r4, [pc, #140]	; (15d38 <mqtt_callback+0xe0>)
   15caa:	47a0      	blx	r4
   15cac:	1e03      	subs	r3, r0, #0
   15cae:	d005      	beq.n	15cbc <mqtt_callback+0x64>
                    LogMessage(LOG_DEBUG_LVL, "MQTT  Error - NOT Connected to broker\r\n");
   15cb0:	4b22      	ldr	r3, [pc, #136]	; (15d3c <mqtt_callback+0xe4>)
   15cb2:	0019      	movs	r1, r3
   15cb4:	2001      	movs	r0, #1
   15cb6:	4b1d      	ldr	r3, [pc, #116]	; (15d2c <mqtt_callback+0xd4>)
   15cb8:	4798      	blx	r3
        } break;
   15cba:	e031      	b.n	15d20 <mqtt_callback+0xc8>
                    LogMessage(LOG_DEBUG_LVL, "MQTT Connected to broker\r\n");
   15cbc:	4b20      	ldr	r3, [pc, #128]	; (15d40 <mqtt_callback+0xe8>)
   15cbe:	0019      	movs	r1, r3
   15cc0:	2001      	movs	r0, #1
   15cc2:	4b1a      	ldr	r3, [pc, #104]	; (15d2c <mqtt_callback+0xd4>)
   15cc4:	4798      	blx	r3
        } break;
   15cc6:	e02b      	b.n	15d20 <mqtt_callback+0xc8>
                LogMessage(LOG_DEBUG_LVL, "Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
   15cc8:	4a1e      	ldr	r2, [pc, #120]	; (15d44 <mqtt_callback+0xec>)
   15cca:	4b1f      	ldr	r3, [pc, #124]	; (15d48 <mqtt_callback+0xf0>)
   15ccc:	0019      	movs	r1, r3
   15cce:	2001      	movs	r0, #1
   15cd0:	4b16      	ldr	r3, [pc, #88]	; (15d2c <mqtt_callback+0xd4>)
   15cd2:	4798      	blx	r3
                mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
   15cd4:	4a1b      	ldr	r2, [pc, #108]	; (15d44 <mqtt_callback+0xec>)
   15cd6:	68fb      	ldr	r3, [r7, #12]
   15cd8:	0011      	movs	r1, r2
   15cda:	0018      	movs	r0, r3
   15cdc:	4b1b      	ldr	r3, [pc, #108]	; (15d4c <mqtt_callback+0xf4>)
   15cde:	4798      	blx	r3
        } break;
   15ce0:	e01e      	b.n	15d20 <mqtt_callback+0xc8>
            if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
   15ce2:	687b      	ldr	r3, [r7, #4]
   15ce4:	781b      	ldrb	r3, [r3, #0]
   15ce6:	2b00      	cmp	r3, #0
   15ce8:	d10b      	bne.n	15d02 <mqtt_callback+0xaa>
				mqtt_subscribe(module_inst, SERVO_TOPIC, 2, SubscribeHandlerServo);
   15cea:	4b19      	ldr	r3, [pc, #100]	; (15d50 <mqtt_callback+0xf8>)
   15cec:	4919      	ldr	r1, [pc, #100]	; (15d54 <mqtt_callback+0xfc>)
   15cee:	68f8      	ldr	r0, [r7, #12]
   15cf0:	2202      	movs	r2, #2
   15cf2:	4c19      	ldr	r4, [pc, #100]	; (15d58 <mqtt_callback+0x100>)
   15cf4:	47a0      	blx	r4
                LogMessage(LOG_DEBUG_LVL, "MQTT Connected\r\n");
   15cf6:	4b19      	ldr	r3, [pc, #100]	; (15d5c <mqtt_callback+0x104>)
   15cf8:	0019      	movs	r1, r3
   15cfa:	2001      	movs	r0, #1
   15cfc:	4b0b      	ldr	r3, [pc, #44]	; (15d2c <mqtt_callback+0xd4>)
   15cfe:	4798      	blx	r3
            break;
   15d00:	e00e      	b.n	15d20 <mqtt_callback+0xc8>
                LogMessage(LOG_DEBUG_LVL, "MQTT broker decline your access! error code %d\r\n", data->connected.result);
   15d02:	687b      	ldr	r3, [r7, #4]
   15d04:	781b      	ldrb	r3, [r3, #0]
   15d06:	001a      	movs	r2, r3
   15d08:	4b15      	ldr	r3, [pc, #84]	; (15d60 <mqtt_callback+0x108>)
   15d0a:	0019      	movs	r1, r3
   15d0c:	2001      	movs	r0, #1
   15d0e:	4b07      	ldr	r3, [pc, #28]	; (15d2c <mqtt_callback+0xd4>)
   15d10:	4798      	blx	r3
            break;
   15d12:	e005      	b.n	15d20 <mqtt_callback+0xc8>
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
   15d14:	4b13      	ldr	r3, [pc, #76]	; (15d64 <mqtt_callback+0x10c>)
   15d16:	0019      	movs	r1, r3
   15d18:	2001      	movs	r0, #1
   15d1a:	4b04      	ldr	r3, [pc, #16]	; (15d2c <mqtt_callback+0xd4>)
   15d1c:	4798      	blx	r3
            break;
   15d1e:	46c0      	nop			; (mov r8, r8)
}
   15d20:	46c0      	nop			; (mov r8, r8)
   15d22:	46bd      	mov	sp, r7
   15d24:	b005      	add	sp, #20
   15d26:	bd90      	pop	{r4, r7, pc}
   15d28:	000364e4 	.word	0x000364e4
   15d2c:	0001cef1 	.word	0x0001cef1
   15d30:	00036500 	.word	0x00036500
   15d34:	0003650c 	.word	0x0003650c
   15d38:	0002ea51 	.word	0x0002ea51
   15d3c:	00036514 	.word	0x00036514
   15d40:	0003653c 	.word	0x0003653c
   15d44:	00035f10 	.word	0x00035f10
   15d48:	00036558 	.word	0x00036558
   15d4c:	0002ea09 	.word	0x0002ea09
   15d50:	00015b9d 	.word	0x00015b9d
   15d54:	000364d0 	.word	0x000364d0
   15d58:	0002ebf1 	.word	0x0002ebf1
   15d5c:	00036590 	.word	0x00036590
   15d60:	000365a4 	.word	0x000365a4
   15d64:	000365d8 	.word	0x000365d8

00015d68 <configure_mqtt>:

/**
 * \brief Configure MQTT service.
 */
static void configure_mqtt(void)
{
   15d68:	b580      	push	{r7, lr}
   15d6a:	b088      	sub	sp, #32
   15d6c:	af00      	add	r7, sp, #0
    struct mqtt_config mqtt_conf;
    int result;

    mqtt_get_config_defaults(&mqtt_conf);
   15d6e:	1d3b      	adds	r3, r7, #4
   15d70:	0018      	movs	r0, r3
   15d72:	4b1f      	ldr	r3, [pc, #124]	; (15df0 <configure_mqtt+0x88>)
   15d74:	4798      	blx	r3
    /* To use the MQTT service, it is necessary to always set the buffer and the timer. */
    mqtt_conf.read_buffer = mqtt_read_buffer;
   15d76:	1d3b      	adds	r3, r7, #4
   15d78:	4a1e      	ldr	r2, [pc, #120]	; (15df4 <configure_mqtt+0x8c>)
   15d7a:	609a      	str	r2, [r3, #8]
    mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   15d7c:	1d3b      	adds	r3, r7, #4
   15d7e:	2280      	movs	r2, #128	; 0x80
   15d80:	0092      	lsls	r2, r2, #2
   15d82:	60da      	str	r2, [r3, #12]
    mqtt_conf.send_buffer = mqtt_send_buffer;
   15d84:	1d3b      	adds	r3, r7, #4
   15d86:	4a1c      	ldr	r2, [pc, #112]	; (15df8 <configure_mqtt+0x90>)
   15d88:	611a      	str	r2, [r3, #16]
    mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   15d8a:	1d3b      	adds	r3, r7, #4
   15d8c:	2280      	movs	r2, #128	; 0x80
   15d8e:	0092      	lsls	r2, r2, #2
   15d90:	615a      	str	r2, [r3, #20]
    mqtt_conf.port = CLOUDMQTT_PORT;
   15d92:	1d3b      	adds	r3, r7, #4
   15d94:	4a19      	ldr	r2, [pc, #100]	; (15dfc <configure_mqtt+0x94>)
   15d96:	801a      	strh	r2, [r3, #0]
    mqtt_conf.keep_alive = 6000;
   15d98:	1d3b      	adds	r3, r7, #4
   15d9a:	4a19      	ldr	r2, [pc, #100]	; (15e00 <configure_mqtt+0x98>)
   15d9c:	809a      	strh	r2, [r3, #4]

    result = mqtt_init(&mqtt_inst, &mqtt_conf);
   15d9e:	1d3a      	adds	r2, r7, #4
   15da0:	4b18      	ldr	r3, [pc, #96]	; (15e04 <configure_mqtt+0x9c>)
   15da2:	0011      	movs	r1, r2
   15da4:	0018      	movs	r0, r3
   15da6:	4b18      	ldr	r3, [pc, #96]	; (15e08 <configure_mqtt+0xa0>)
   15da8:	4798      	blx	r3
   15daa:	0003      	movs	r3, r0
   15dac:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   15dae:	69fb      	ldr	r3, [r7, #28]
   15db0:	2b00      	cmp	r3, #0
   15db2:	da06      	bge.n	15dc2 <configure_mqtt+0x5a>
        LogMessage(LOG_DEBUG_LVL, "MQTT initialization failed. Error code is (%d)\r\n", result);
   15db4:	69fa      	ldr	r2, [r7, #28]
   15db6:	4b15      	ldr	r3, [pc, #84]	; (15e0c <configure_mqtt+0xa4>)
   15db8:	0019      	movs	r1, r3
   15dba:	2001      	movs	r0, #1
   15dbc:	4b14      	ldr	r3, [pc, #80]	; (15e10 <configure_mqtt+0xa8>)
   15dbe:	4798      	blx	r3
        while (1) {
   15dc0:	e7fe      	b.n	15dc0 <configure_mqtt+0x58>
        }
    }

    result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
   15dc2:	4a14      	ldr	r2, [pc, #80]	; (15e14 <configure_mqtt+0xac>)
   15dc4:	4b0f      	ldr	r3, [pc, #60]	; (15e04 <configure_mqtt+0x9c>)
   15dc6:	0011      	movs	r1, r2
   15dc8:	0018      	movs	r0, r3
   15dca:	4b13      	ldr	r3, [pc, #76]	; (15e18 <configure_mqtt+0xb0>)
   15dcc:	4798      	blx	r3
   15dce:	0003      	movs	r3, r0
   15dd0:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   15dd2:	69fb      	ldr	r3, [r7, #28]
   15dd4:	2b00      	cmp	r3, #0
   15dd6:	da06      	bge.n	15de6 <configure_mqtt+0x7e>
        LogMessage(LOG_DEBUG_LVL, "MQTT register callback failed. Error code is (%d)\r\n", result);
   15dd8:	69fa      	ldr	r2, [r7, #28]
   15dda:	4b10      	ldr	r3, [pc, #64]	; (15e1c <configure_mqtt+0xb4>)
   15ddc:	0019      	movs	r1, r3
   15dde:	2001      	movs	r0, #1
   15de0:	4b0b      	ldr	r3, [pc, #44]	; (15e10 <configure_mqtt+0xa8>)
   15de2:	4798      	blx	r3
        while (1) {
   15de4:	e7fe      	b.n	15de4 <configure_mqtt+0x7c>
        }
    }
}
   15de6:	46c0      	nop			; (mov r8, r8)
   15de8:	46bd      	mov	sp, r7
   15dea:	b008      	add	sp, #32
   15dec:	bd80      	pop	{r7, pc}
   15dee:	46c0      	nop			; (mov r8, r8)
   15df0:	0002e949 	.word	0x0002e949
   15df4:	2000089c 	.word	0x2000089c
   15df8:	20000a9c 	.word	0x20000a9c
   15dfc:	0000075b 	.word	0x0000075b
   15e00:	00001770 	.word	0x00001770
   15e04:	20000864 	.word	0x20000864
   15e08:	0002e899 	.word	0x0002e899
   15e0c:	000365ec 	.word	0x000365ec
   15e10:	0001cef1 	.word	0x0001cef1
   15e14:	00015c59 	.word	0x00015c59
   15e18:	0002e989 	.word	0x0002e989
   15e1c:	00036620 	.word	0x00036620

00015e20 <configure_extint_channel>:

// SETUP FOR EXTERNAL BUTTON INTERRUPT -- Used to send an MQTT Message

void configure_extint_channel(void)
{
   15e20:	b580      	push	{r7, lr}
   15e22:	b084      	sub	sp, #16
   15e24:	af00      	add	r7, sp, #0
    struct extint_chan_conf config_extint_chan;
    extint_chan_get_config_defaults(&config_extint_chan);
   15e26:	1d3b      	adds	r3, r7, #4
   15e28:	0018      	movs	r0, r3
   15e2a:	4b0b      	ldr	r3, [pc, #44]	; (15e58 <configure_extint_channel+0x38>)
   15e2c:	4798      	blx	r3
    config_extint_chan.gpio_pin = BUTTON_0_EIC_PIN;
   15e2e:	1d3b      	adds	r3, r7, #4
   15e30:	2237      	movs	r2, #55	; 0x37
   15e32:	601a      	str	r2, [r3, #0]
    config_extint_chan.gpio_pin_mux = BUTTON_0_EIC_MUX;
   15e34:	1d3b      	adds	r3, r7, #4
   15e36:	2200      	movs	r2, #0
   15e38:	605a      	str	r2, [r3, #4]
    config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   15e3a:	1d3b      	adds	r3, r7, #4
   15e3c:	2201      	movs	r2, #1
   15e3e:	721a      	strb	r2, [r3, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   15e40:	1d3b      	adds	r3, r7, #4
   15e42:	2202      	movs	r2, #2
   15e44:	72da      	strb	r2, [r3, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
   15e46:	1d3b      	adds	r3, r7, #4
   15e48:	0019      	movs	r1, r3
   15e4a:	2007      	movs	r0, #7
   15e4c:	4b03      	ldr	r3, [pc, #12]	; (15e5c <configure_extint_channel+0x3c>)
   15e4e:	4798      	blx	r3
}
   15e50:	46c0      	nop			; (mov r8, r8)
   15e52:	46bd      	mov	sp, r7
   15e54:	b004      	add	sp, #16
   15e56:	bd80      	pop	{r7, pc}
   15e58:	00025955 	.word	0x00025955
   15e5c:	00025989 	.word	0x00025989

00015e60 <configure_extint_callbacks>:

void extint_detection_callback(void);
void configure_extint_callbacks(void)
{
   15e60:	b580      	push	{r7, lr}
   15e62:	af00      	add	r7, sp, #0
    extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   15e64:	4b06      	ldr	r3, [pc, #24]	; (15e80 <configure_extint_callbacks+0x20>)
   15e66:	2200      	movs	r2, #0
   15e68:	2107      	movs	r1, #7
   15e6a:	0018      	movs	r0, r3
   15e6c:	4b05      	ldr	r3, [pc, #20]	; (15e84 <configure_extint_callbacks+0x24>)
   15e6e:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   15e70:	2100      	movs	r1, #0
   15e72:	2007      	movs	r0, #7
   15e74:	4b04      	ldr	r3, [pc, #16]	; (15e88 <configure_extint_callbacks+0x28>)
   15e76:	4798      	blx	r3
}
   15e78:	46c0      	nop			; (mov r8, r8)
   15e7a:	46bd      	mov	sp, r7
   15e7c:	bd80      	pop	{r7, pc}
   15e7e:	46c0      	nop			; (mov r8, r8)
   15e80:	00015e8d 	.word	0x00015e8d
   15e84:	00025555 	.word	0x00025555
   15e88:	000255b9 	.word	0x000255b9

00015e8c <extint_detection_callback>:

volatile bool isPressed = false;
void extint_detection_callback(void)
{
   15e8c:	b5b0      	push	{r4, r5, r7, lr}
   15e8e:	af00      	add	r7, sp, #0
    // Publish some data after a button press and release. Note: just an example! This is not the most elegant way of doing this!
    temperature++;
   15e90:	4b0c      	ldr	r3, [pc, #48]	; (15ec4 <extint_detection_callback+0x38>)
   15e92:	681b      	ldr	r3, [r3, #0]
   15e94:	1c5a      	adds	r2, r3, #1
   15e96:	4b0b      	ldr	r3, [pc, #44]	; (15ec4 <extint_detection_callback+0x38>)
   15e98:	601a      	str	r2, [r3, #0]
    if (temperature > 40) temperature = 1;
   15e9a:	4b0a      	ldr	r3, [pc, #40]	; (15ec4 <extint_detection_callback+0x38>)
   15e9c:	681b      	ldr	r3, [r3, #0]
   15e9e:	2b28      	cmp	r3, #40	; 0x28
   15ea0:	d902      	bls.n	15ea8 <extint_detection_callback+0x1c>
   15ea2:	4b08      	ldr	r3, [pc, #32]	; (15ec4 <extint_detection_callback+0x38>)
   15ea4:	2201      	movs	r2, #1
   15ea6:	601a      	str	r2, [r3, #0]
    snprintf(mqtt_msg_temp, 63, "{\"d\":{\"temp\":%d}}", temperature);
   15ea8:	4b06      	ldr	r3, [pc, #24]	; (15ec4 <extint_detection_callback+0x38>)
   15eaa:	681b      	ldr	r3, [r3, #0]
   15eac:	4a06      	ldr	r2, [pc, #24]	; (15ec8 <extint_detection_callback+0x3c>)
   15eae:	4807      	ldr	r0, [pc, #28]	; (15ecc <extint_detection_callback+0x40>)
   15eb0:	213f      	movs	r1, #63	; 0x3f
   15eb2:	4c07      	ldr	r4, [pc, #28]	; (15ed0 <extint_detection_callback+0x44>)
   15eb4:	47a0      	blx	r4
    isPressed = true;
   15eb6:	4b07      	ldr	r3, [pc, #28]	; (15ed4 <extint_detection_callback+0x48>)
   15eb8:	2201      	movs	r2, #1
   15eba:	701a      	strb	r2, [r3, #0]
    //Published in the Wifi thread main loop
}
   15ebc:	46c0      	nop			; (mov r8, r8)
   15ebe:	46bd      	mov	sp, r7
   15ec0:	bdb0      	pop	{r4, r5, r7, pc}
   15ec2:	46c0      	nop			; (mov r8, r8)
   15ec4:	200000a0 	.word	0x200000a0
   15ec8:	00036654 	.word	0x00036654
   15ecc:	20000060 	.word	0x20000060
   15ed0:	00034839 	.word	0x00034839
   15ed4:	20000c9c 	.word	0x20000c9c

00015ed8 <HTTP_DownloadFileInit>:
 * @brief	Routine to initialize HTTP download of the OTAU file
 * @note

*/
static void HTTP_DownloadFileInit(void)
{
   15ed8:	b580      	push	{r7, lr}
   15eda:	af00      	add	r7, sp, #0
    if (mqtt_disconnect(&mqtt_inst, main_mqtt_broker)) {
   15edc:	4a15      	ldr	r2, [pc, #84]	; (15f34 <HTTP_DownloadFileInit+0x5c>)
   15ede:	4b16      	ldr	r3, [pc, #88]	; (15f38 <HTTP_DownloadFileInit+0x60>)
   15ee0:	0011      	movs	r1, r2
   15ee2:	0018      	movs	r0, r3
   15ee4:	4b15      	ldr	r3, [pc, #84]	; (15f3c <HTTP_DownloadFileInit+0x64>)
   15ee6:	4798      	blx	r3
   15ee8:	1e03      	subs	r3, r0, #0
   15eea:	d008      	beq.n	15efe <HTTP_DownloadFileInit+0x26>
        LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   15eec:	4b14      	ldr	r3, [pc, #80]	; (15f40 <HTTP_DownloadFileInit+0x68>)
   15eee:	0019      	movs	r1, r3
   15ef0:	2001      	movs	r0, #1
   15ef2:	4b14      	ldr	r3, [pc, #80]	; (15f44 <HTTP_DownloadFileInit+0x6c>)
   15ef4:	4798      	blx	r3
    }
    while ((mqtt_inst.isConnected)) {
   15ef6:	e002      	b.n	15efe <HTTP_DownloadFileInit+0x26>
        m2m_wifi_handle_events(NULL);
   15ef8:	2000      	movs	r0, #0
   15efa:	4b13      	ldr	r3, [pc, #76]	; (15f48 <HTTP_DownloadFileInit+0x70>)
   15efc:	4798      	blx	r3
    while ((mqtt_inst.isConnected)) {
   15efe:	4b0e      	ldr	r3, [pc, #56]	; (15f38 <HTTP_DownloadFileInit+0x60>)
   15f00:	2234      	movs	r2, #52	; 0x34
   15f02:	5c9b      	ldrb	r3, [r3, r2]
   15f04:	2b00      	cmp	r3, #0
   15f06:	d1f7      	bne.n	15ef8 <HTTP_DownloadFileInit+0x20>
    }
    socketDeinit();
   15f08:	4b10      	ldr	r3, [pc, #64]	; (15f4c <HTTP_DownloadFileInit+0x74>)
   15f0a:	4798      	blx	r3
    // DOWNLOAD A FILE
    do_download_flag = true;
   15f0c:	4b10      	ldr	r3, [pc, #64]	; (15f50 <HTTP_DownloadFileInit+0x78>)
   15f0e:	2201      	movs	r2, #1
   15f10:	701a      	strb	r2, [r3, #0]
    /* Register socket callback function. */
    registerSocketCallback(socket_cb, resolve_cb);
   15f12:	4a10      	ldr	r2, [pc, #64]	; (15f54 <HTTP_DownloadFileInit+0x7c>)
   15f14:	4b10      	ldr	r3, [pc, #64]	; (15f58 <HTTP_DownloadFileInit+0x80>)
   15f16:	0011      	movs	r1, r2
   15f18:	0018      	movs	r0, r3
   15f1a:	4b10      	ldr	r3, [pc, #64]	; (15f5c <HTTP_DownloadFileInit+0x84>)
   15f1c:	4798      	blx	r3
    /* Initialize socket module. */
    socketInit();
   15f1e:	4b10      	ldr	r3, [pc, #64]	; (15f60 <HTTP_DownloadFileInit+0x88>)
   15f20:	4798      	blx	r3

    start_download();
   15f22:	4b10      	ldr	r3, [pc, #64]	; (15f64 <HTTP_DownloadFileInit+0x8c>)
   15f24:	4798      	blx	r3
    wifiStateMachine = WIFI_DOWNLOAD_HANDLE;
   15f26:	4b10      	ldr	r3, [pc, #64]	; (15f68 <HTTP_DownloadFileInit+0x90>)
   15f28:	2203      	movs	r2, #3
   15f2a:	701a      	strb	r2, [r3, #0]
}
   15f2c:	46c0      	nop			; (mov r8, r8)
   15f2e:	46bd      	mov	sp, r7
   15f30:	bd80      	pop	{r7, pc}
   15f32:	46c0      	nop			; (mov r8, r8)
   15f34:	00035f10 	.word	0x00035f10
   15f38:	20000864 	.word	0x20000864
   15f3c:	0002eb3d 	.word	0x0002eb3d
   15f40:	0003631c 	.word	0x0003631c
   15f44:	0001cef1 	.word	0x0001cef1
   15f48:	00021045 	.word	0x00021045
   15f4c:	00024601 	.word	0x00024601
   15f50:	20000604 	.word	0x20000604
   15f54:	000157fd 	.word	0x000157fd
   15f58:	000157c9 	.word	0x000157c9
   15f5c:	00024649 	.word	0x00024649
   15f60:	000245b1 	.word	0x000245b1
   15f64:	000153f1 	.word	0x000153f1
   15f68:	200005f5 	.word	0x200005f5

00015f6c <HTTP_DownloadFileTransaction>:
 * @brief	Routine to handle the HTTP transaction of downloading a file
 * @note

*/
static void HTTP_DownloadFileTransaction(void)
{
   15f6c:	b590      	push	{r4, r7, lr}
   15f6e:	b085      	sub	sp, #20
   15f70:	af00      	add	r7, sp, #0
    /* Connect to router. */
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   15f72:	e009      	b.n	15f88 <HTTP_DownloadFileTransaction+0x1c>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   15f74:	2000      	movs	r0, #0
   15f76:	4b30      	ldr	r3, [pc, #192]	; (16038 <HTTP_DownloadFileTransaction+0xcc>)
   15f78:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   15f7a:	4b30      	ldr	r3, [pc, #192]	; (1603c <HTTP_DownloadFileTransaction+0xd0>)
   15f7c:	0018      	movs	r0, r3
   15f7e:	4b30      	ldr	r3, [pc, #192]	; (16040 <HTTP_DownloadFileTransaction+0xd4>)
   15f80:	4798      	blx	r3
        vTaskDelay(5);
   15f82:	2005      	movs	r0, #5
   15f84:	4b2f      	ldr	r3, [pc, #188]	; (16044 <HTTP_DownloadFileTransaction+0xd8>)
   15f86:	4798      	blx	r3
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   15f88:	2010      	movs	r0, #16
   15f8a:	4b2f      	ldr	r3, [pc, #188]	; (16048 <HTTP_DownloadFileTransaction+0xdc>)
   15f8c:	4798      	blx	r3
   15f8e:	0003      	movs	r3, r0
   15f90:	001a      	movs	r2, r3
   15f92:	2301      	movs	r3, #1
   15f94:	4053      	eors	r3, r2
   15f96:	b2db      	uxtb	r3, r3
   15f98:	2b00      	cmp	r3, #0
   15f9a:	d009      	beq.n	15fb0 <HTTP_DownloadFileTransaction+0x44>
   15f9c:	2020      	movs	r0, #32
   15f9e:	4b2a      	ldr	r3, [pc, #168]	; (16048 <HTTP_DownloadFileTransaction+0xdc>)
   15fa0:	4798      	blx	r3
   15fa2:	0003      	movs	r3, r0
   15fa4:	001a      	movs	r2, r3
   15fa6:	2301      	movs	r3, #1
   15fa8:	4053      	eors	r3, r2
   15faa:	b2db      	uxtb	r3, r3
   15fac:	2b00      	cmp	r3, #0
   15fae:	d1e1      	bne.n	15f74 <HTTP_DownloadFileTransaction+0x8>
    }

    // Disable socket for HTTP Transfer
    socketDeinit();
   15fb0:	4b26      	ldr	r3, [pc, #152]	; (1604c <HTTP_DownloadFileTransaction+0xe0>)
   15fb2:	4798      	blx	r3
    vTaskDelay(1000);
   15fb4:	23fa      	movs	r3, #250	; 0xfa
   15fb6:	009b      	lsls	r3, r3, #2
   15fb8:	0018      	movs	r0, r3
   15fba:	4b22      	ldr	r3, [pc, #136]	; (16044 <HTTP_DownloadFileTransaction+0xd8>)
   15fbc:	4798      	blx	r3
    // CONNECT TO MQTT BROKER
    do_download_flag = false;
   15fbe:	4b24      	ldr	r3, [pc, #144]	; (16050 <HTTP_DownloadFileTransaction+0xe4>)
   15fc0:	2200      	movs	r2, #0
   15fc2:	701a      	strb	r2, [r3, #0]

    // Write Flag
    char test_file_name[] = "0:FlagA.txt";
   15fc4:	003b      	movs	r3, r7
   15fc6:	4a23      	ldr	r2, [pc, #140]	; (16054 <HTTP_DownloadFileTransaction+0xe8>)
   15fc8:	ca13      	ldmia	r2!, {r0, r1, r4}
   15fca:	c313      	stmia	r3!, {r0, r1, r4}
    test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   15fcc:	003b      	movs	r3, r7
   15fce:	2230      	movs	r2, #48	; 0x30
   15fd0:	701a      	strb	r2, [r3, #0]
    FRESULT res = f_open(&file_object, (char const *)test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   15fd2:	230f      	movs	r3, #15
   15fd4:	18fc      	adds	r4, r7, r3
   15fd6:	0039      	movs	r1, r7
   15fd8:	4b1f      	ldr	r3, [pc, #124]	; (16058 <HTTP_DownloadFileTransaction+0xec>)
   15fda:	220a      	movs	r2, #10
   15fdc:	0018      	movs	r0, r3
   15fde:	4b1f      	ldr	r3, [pc, #124]	; (1605c <HTTP_DownloadFileTransaction+0xf0>)
   15fe0:	4798      	blx	r3
   15fe2:	0003      	movs	r3, r0
   15fe4:	7023      	strb	r3, [r4, #0]
    res = f_open(&file_object, (char const *)test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   15fe6:	230f      	movs	r3, #15
   15fe8:	18fc      	adds	r4, r7, r3
   15fea:	0039      	movs	r1, r7
   15fec:	4b1a      	ldr	r3, [pc, #104]	; (16058 <HTTP_DownloadFileTransaction+0xec>)
   15fee:	220a      	movs	r2, #10
   15ff0:	0018      	movs	r0, r3
   15ff2:	4b1a      	ldr	r3, [pc, #104]	; (1605c <HTTP_DownloadFileTransaction+0xf0>)
   15ff4:	4798      	blx	r3
   15ff6:	0003      	movs	r3, r0
   15ff8:	7023      	strb	r3, [r4, #0]

    if (res != FR_OK) {
   15ffa:	230f      	movs	r3, #15
   15ffc:	18fb      	adds	r3, r7, r3
   15ffe:	781b      	ldrb	r3, [r3, #0]
   16000:	2b00      	cmp	r3, #0
   16002:	d008      	beq.n	16016 <HTTP_DownloadFileTransaction+0xaa>
        LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
   16004:	230f      	movs	r3, #15
   16006:	18fb      	adds	r3, r7, r3
   16008:	781a      	ldrb	r2, [r3, #0]
   1600a:	4b15      	ldr	r3, [pc, #84]	; (16060 <HTTP_DownloadFileTransaction+0xf4>)
   1600c:	0019      	movs	r1, r3
   1600e:	2000      	movs	r0, #0
   16010:	4b14      	ldr	r3, [pc, #80]	; (16064 <HTTP_DownloadFileTransaction+0xf8>)
   16012:	4798      	blx	r3
   16014:	e003      	b.n	1601e <HTTP_DownloadFileTransaction+0xb2>
    } else {
        SerialConsoleWriteString("FlagA.txt added!\r\n");
   16016:	4b14      	ldr	r3, [pc, #80]	; (16068 <HTTP_DownloadFileTransaction+0xfc>)
   16018:	0018      	movs	r0, r3
   1601a:	4b14      	ldr	r3, [pc, #80]	; (1606c <HTTP_DownloadFileTransaction+0x100>)
   1601c:	4798      	blx	r3
    }
    vTaskDelay(100);
   1601e:	2064      	movs	r0, #100	; 0x64
   16020:	4b08      	ldr	r3, [pc, #32]	; (16044 <HTTP_DownloadFileTransaction+0xd8>)
   16022:	4798      	blx	r3
    system_reset();
   16024:	4b12      	ldr	r3, [pc, #72]	; (16070 <HTTP_DownloadFileTransaction+0x104>)
   16026:	4798      	blx	r3
    wifiStateMachine = WIFI_MQTT_INIT;
   16028:	4b12      	ldr	r3, [pc, #72]	; (16074 <HTTP_DownloadFileTransaction+0x108>)
   1602a:	2200      	movs	r2, #0
   1602c:	701a      	strb	r2, [r3, #0]
}
   1602e:	46c0      	nop			; (mov r8, r8)
   16030:	46bd      	mov	sp, r7
   16032:	b005      	add	sp, #20
   16034:	bd90      	pop	{r4, r7, pc}
   16036:	46c0      	nop			; (mov r8, r8)
   16038:	00021045 	.word	0x00021045
   1603c:	20004874 	.word	0x20004874
   16040:	00031865 	.word	0x00031865
   16044:	0001b1b1 	.word	0x0001b1b1
   16048:	000150c9 	.word	0x000150c9
   1604c:	00024601 	.word	0x00024601
   16050:	20000604 	.word	0x20000604
   16054:	0003668c 	.word	0x0003668c
   16058:	20000838 	.word	0x20000838
   1605c:	0002cb2d 	.word	0x0002cb2d
   16060:	00036668 	.word	0x00036668
   16064:	0001cef1 	.word	0x0001cef1
   16068:	00036678 	.word	0x00036678
   1606c:	0001ce05 	.word	0x0001ce05
   16070:	00014fcd 	.word	0x00014fcd
   16074:	200005f5 	.word	0x200005f5

00016078 <MQTT_InitRoutine>:
 * @brief	Routine to initialize the MQTT socket to prepare for MQTT transactions
 * @note

*/
static void MQTT_InitRoutine(void)
{
   16078:	b580      	push	{r7, lr}
   1607a:	af00      	add	r7, sp, #0
    socketDeinit();
   1607c:	4b18      	ldr	r3, [pc, #96]	; (160e0 <MQTT_InitRoutine+0x68>)
   1607e:	4798      	blx	r3
    configure_mqtt();
   16080:	4b18      	ldr	r3, [pc, #96]	; (160e4 <MQTT_InitRoutine+0x6c>)
   16082:	4798      	blx	r3
    // Re-enable socket for MQTT Transfer
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   16084:	4a18      	ldr	r2, [pc, #96]	; (160e8 <MQTT_InitRoutine+0x70>)
   16086:	4b19      	ldr	r3, [pc, #100]	; (160ec <MQTT_InitRoutine+0x74>)
   16088:	0011      	movs	r1, r2
   1608a:	0018      	movs	r0, r3
   1608c:	4b18      	ldr	r3, [pc, #96]	; (160f0 <MQTT_InitRoutine+0x78>)
   1608e:	4798      	blx	r3
    socketInit();
   16090:	4b18      	ldr	r3, [pc, #96]	; (160f4 <MQTT_InitRoutine+0x7c>)
   16092:	4798      	blx	r3
    /* Connect to router. */
    if (!(mqtt_inst.isConnected)) {
   16094:	4b18      	ldr	r3, [pc, #96]	; (160f8 <MQTT_InitRoutine+0x80>)
   16096:	2234      	movs	r2, #52	; 0x34
   16098:	5c9b      	ldrb	r3, [r3, r2]
   1609a:	2201      	movs	r2, #1
   1609c:	4053      	eors	r3, r2
   1609e:	b2db      	uxtb	r3, r3
   160a0:	2b00      	cmp	r3, #0
   160a2:	d00c      	beq.n	160be <MQTT_InitRoutine+0x46>
        if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   160a4:	4a15      	ldr	r2, [pc, #84]	; (160fc <MQTT_InitRoutine+0x84>)
   160a6:	4b14      	ldr	r3, [pc, #80]	; (160f8 <MQTT_InitRoutine+0x80>)
   160a8:	0011      	movs	r1, r2
   160aa:	0018      	movs	r0, r3
   160ac:	4b14      	ldr	r3, [pc, #80]	; (16100 <MQTT_InitRoutine+0x88>)
   160ae:	4798      	blx	r3
   160b0:	1e03      	subs	r3, r0, #0
   160b2:	d004      	beq.n	160be <MQTT_InitRoutine+0x46>
            LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   160b4:	4b13      	ldr	r3, [pc, #76]	; (16104 <MQTT_InitRoutine+0x8c>)
   160b6:	0019      	movs	r1, r3
   160b8:	2001      	movs	r0, #1
   160ba:	4b13      	ldr	r3, [pc, #76]	; (16108 <MQTT_InitRoutine+0x90>)
   160bc:	4798      	blx	r3
        }
    }

    if (mqtt_inst.isConnected) {
   160be:	4b0e      	ldr	r3, [pc, #56]	; (160f8 <MQTT_InitRoutine+0x80>)
   160c0:	2234      	movs	r2, #52	; 0x34
   160c2:	5c9b      	ldrb	r3, [r3, r2]
   160c4:	2b00      	cmp	r3, #0
   160c6:	d004      	beq.n	160d2 <MQTT_InitRoutine+0x5a>
        LogMessage(LOG_DEBUG_LVL, "Connected to MQTT Broker!\r\n");
   160c8:	4b10      	ldr	r3, [pc, #64]	; (1610c <MQTT_InitRoutine+0x94>)
   160ca:	0019      	movs	r1, r3
   160cc:	2001      	movs	r0, #1
   160ce:	4b0e      	ldr	r3, [pc, #56]	; (16108 <MQTT_InitRoutine+0x90>)
   160d0:	4798      	blx	r3
    }
    wifiStateMachine = WIFI_MQTT_HANDLE;
   160d2:	4b0f      	ldr	r3, [pc, #60]	; (16110 <MQTT_InitRoutine+0x98>)
   160d4:	2201      	movs	r2, #1
   160d6:	701a      	strb	r2, [r3, #0]
}
   160d8:	46c0      	nop			; (mov r8, r8)
   160da:	46bd      	mov	sp, r7
   160dc:	bd80      	pop	{r7, pc}
   160de:	46c0      	nop			; (mov r8, r8)
   160e0:	00024601 	.word	0x00024601
   160e4:	00015d69 	.word	0x00015d69
   160e8:	00015b79 	.word	0x00015b79
   160ec:	00015b45 	.word	0x00015b45
   160f0:	00024649 	.word	0x00024649
   160f4:	000245b1 	.word	0x000245b1
   160f8:	20000864 	.word	0x20000864
   160fc:	00035f10 	.word	0x00035f10
   16100:	0002ea09 	.word	0x0002ea09
   16104:	0003631c 	.word	0x0003631c
   16108:	0001cef1 	.word	0x0001cef1
   1610c:	00036698 	.word	0x00036698
   16110:	200005f5 	.word	0x200005f5

00016114 <MQTT_HandleTransactions>:
 * @brief	Routine to handle MQTT transactions
 * @note

*/
static void MQTT_HandleTransactions(void)
{
   16114:	b580      	push	{r7, lr}
   16116:	af00      	add	r7, sp, #0
    /* Handle pending events from network controller. */
    m2m_wifi_handle_events(NULL);
   16118:	2000      	movs	r0, #0
   1611a:	4b0b      	ldr	r3, [pc, #44]	; (16148 <MQTT_HandleTransactions+0x34>)
   1611c:	4798      	blx	r3
    sw_timer_task(&swt_module_inst);
   1611e:	4b0b      	ldr	r3, [pc, #44]	; (1614c <MQTT_HandleTransactions+0x38>)
   16120:	0018      	movs	r0, r3
   16122:	4b0b      	ldr	r3, [pc, #44]	; (16150 <MQTT_HandleTransactions+0x3c>)
   16124:	4798      	blx	r3

    // Check if data has to be sent!
	MQTT_HandleTestMessages();
   16126:	4b0b      	ldr	r3, [pc, #44]	; (16154 <MQTT_HandleTransactions+0x40>)
   16128:	4798      	blx	r3
	MQTT_HandleNauMessages();
   1612a:	4b0b      	ldr	r3, [pc, #44]	; (16158 <MQTT_HandleTransactions+0x44>)
   1612c:	4798      	blx	r3

    // Handle MQTT messages
    if (mqtt_inst.isConnected) mqtt_yield(&mqtt_inst, 100);
   1612e:	4b0b      	ldr	r3, [pc, #44]	; (1615c <MQTT_HandleTransactions+0x48>)
   16130:	2234      	movs	r2, #52	; 0x34
   16132:	5c9b      	ldrb	r3, [r3, r2]
   16134:	2b00      	cmp	r3, #0
   16136:	d004      	beq.n	16142 <MQTT_HandleTransactions+0x2e>
   16138:	4b08      	ldr	r3, [pc, #32]	; (1615c <MQTT_HandleTransactions+0x48>)
   1613a:	2164      	movs	r1, #100	; 0x64
   1613c:	0018      	movs	r0, r3
   1613e:	4b08      	ldr	r3, [pc, #32]	; (16160 <MQTT_HandleTransactions+0x4c>)
   16140:	4798      	blx	r3
}
   16142:	46c0      	nop			; (mov r8, r8)
   16144:	46bd      	mov	sp, r7
   16146:	bd80      	pop	{r7, pc}
   16148:	00021045 	.word	0x00021045
   1614c:	20004874 	.word	0x20004874
   16150:	00031865 	.word	0x00031865
   16154:	00016165 	.word	0x00016165
   16158:	000161d9 	.word	0x000161d9
   1615c:	20000864 	.word	0x20000864
   16160:	0002ec39 	.word	0x0002ec39

00016164 <MQTT_HandleTestMessages>:


static void MQTT_HandleTestMessages(void)
{
   16164:	b590      	push	{r4, r7, lr}
   16166:	b085      	sub	sp, #20
   16168:	af02      	add	r7, sp, #8
	struct TestPacket TestDataVar;
	if (pdPASS == xQueueReceive(xQueueTestBuffer, &TestDataVar, 0)) {
   1616a:	4b12      	ldr	r3, [pc, #72]	; (161b4 <MQTT_HandleTestMessages+0x50>)
   1616c:	681b      	ldr	r3, [r3, #0]
   1616e:	1d39      	adds	r1, r7, #4
   16170:	2200      	movs	r2, #0
   16172:	0018      	movs	r0, r3
   16174:	4b10      	ldr	r3, [pc, #64]	; (161b8 <MQTT_HandleTestMessages+0x54>)
   16176:	4798      	blx	r3
   16178:	0003      	movs	r3, r0
   1617a:	2b01      	cmp	r3, #1
   1617c:	d115      	bne.n	161aa <MQTT_HandleTestMessages+0x46>
		snprintf(mqtt_msg, 63, "{\"test\":%d }", TestDataVar.test);
   1617e:	1d3b      	adds	r3, r7, #4
   16180:	781b      	ldrb	r3, [r3, #0]
   16182:	4a0e      	ldr	r2, [pc, #56]	; (161bc <MQTT_HandleTestMessages+0x58>)
   16184:	480e      	ldr	r0, [pc, #56]	; (161c0 <MQTT_HandleTestMessages+0x5c>)
   16186:	213f      	movs	r1, #63	; 0x3f
   16188:	4c0e      	ldr	r4, [pc, #56]	; (161c4 <MQTT_HandleTestMessages+0x60>)
   1618a:	47a0      	blx	r4
		mqtt_publish(&mqtt_inst, TEST_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   1618c:	4b0c      	ldr	r3, [pc, #48]	; (161c0 <MQTT_HandleTestMessages+0x5c>)
   1618e:	0018      	movs	r0, r3
   16190:	4b0d      	ldr	r3, [pc, #52]	; (161c8 <MQTT_HandleTestMessages+0x64>)
   16192:	4798      	blx	r3
   16194:	0004      	movs	r4, r0
   16196:	4a0a      	ldr	r2, [pc, #40]	; (161c0 <MQTT_HandleTestMessages+0x5c>)
   16198:	490c      	ldr	r1, [pc, #48]	; (161cc <MQTT_HandleTestMessages+0x68>)
   1619a:	480d      	ldr	r0, [pc, #52]	; (161d0 <MQTT_HandleTestMessages+0x6c>)
   1619c:	2300      	movs	r3, #0
   1619e:	9301      	str	r3, [sp, #4]
   161a0:	2301      	movs	r3, #1
   161a2:	9300      	str	r3, [sp, #0]
   161a4:	0023      	movs	r3, r4
   161a6:	4c0b      	ldr	r4, [pc, #44]	; (161d4 <MQTT_HandleTestMessages+0x70>)
   161a8:	47a0      	blx	r4
	}
}
   161aa:	46c0      	nop			; (mov r8, r8)
   161ac:	46bd      	mov	sp, r7
   161ae:	b003      	add	sp, #12
   161b0:	bd90      	pop	{r4, r7, pc}
   161b2:	46c0      	nop			; (mov r8, r8)
   161b4:	200005fc 	.word	0x200005fc
   161b8:	0001a005 	.word	0x0001a005
   161bc:	000366b4 	.word	0x000366b4
   161c0:	20000020 	.word	0x20000020
   161c4:	00034839 	.word	0x00034839
   161c8:	0003497b 	.word	0x0003497b
   161cc:	000366c4 	.word	0x000366c4
   161d0:	20000864 	.word	0x20000864
   161d4:	0002eb85 	.word	0x0002eb85

000161d8 <MQTT_HandleNauMessages>:

static void MQTT_HandleNauMessages(void)
{
   161d8:	b590      	push	{r4, r7, lr}
   161da:	b085      	sub	sp, #20
   161dc:	af02      	add	r7, sp, #8
	struct NauPacket NauDataVar;
	if (pdPASS == xQueueReceive(xQueueNauBuffer, &NauDataVar, 0)) {
   161de:	4b16      	ldr	r3, [pc, #88]	; (16238 <MQTT_HandleNauMessages+0x60>)
   161e0:	681b      	ldr	r3, [r3, #0]
   161e2:	1d39      	adds	r1, r7, #4
   161e4:	2200      	movs	r2, #0
   161e6:	0018      	movs	r0, r3
   161e8:	4b14      	ldr	r3, [pc, #80]	; (1623c <MQTT_HandleNauMessages+0x64>)
   161ea:	4798      	blx	r3
   161ec:	0003      	movs	r3, r0
   161ee:	2b01      	cmp	r3, #1
   161f0:	d11e      	bne.n	16230 <MQTT_HandleNauMessages+0x58>
		snprintf(mqtt_msg, 63, "{\"nau_i\":%d,  \"nau_f\": %d}", NauDataVar.nau_i, NauDataVar.nau_f);
   161f2:	1d3b      	adds	r3, r7, #4
   161f4:	881b      	ldrh	r3, [r3, #0]
   161f6:	0019      	movs	r1, r3
   161f8:	1d3b      	adds	r3, r7, #4
   161fa:	885b      	ldrh	r3, [r3, #2]
   161fc:	4a10      	ldr	r2, [pc, #64]	; (16240 <MQTT_HandleNauMessages+0x68>)
   161fe:	4811      	ldr	r0, [pc, #68]	; (16244 <MQTT_HandleNauMessages+0x6c>)
   16200:	9300      	str	r3, [sp, #0]
   16202:	000b      	movs	r3, r1
   16204:	213f      	movs	r1, #63	; 0x3f
   16206:	4c10      	ldr	r4, [pc, #64]	; (16248 <MQTT_HandleNauMessages+0x70>)
   16208:	47a0      	blx	r4
		mqtt_publish(&mqtt_inst, NAU_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   1620a:	4b0e      	ldr	r3, [pc, #56]	; (16244 <MQTT_HandleNauMessages+0x6c>)
   1620c:	0018      	movs	r0, r3
   1620e:	4b0f      	ldr	r3, [pc, #60]	; (1624c <MQTT_HandleNauMessages+0x74>)
   16210:	4798      	blx	r3
   16212:	0004      	movs	r4, r0
   16214:	4a0b      	ldr	r2, [pc, #44]	; (16244 <MQTT_HandleNauMessages+0x6c>)
   16216:	490e      	ldr	r1, [pc, #56]	; (16250 <MQTT_HandleNauMessages+0x78>)
   16218:	480e      	ldr	r0, [pc, #56]	; (16254 <MQTT_HandleNauMessages+0x7c>)
   1621a:	2300      	movs	r3, #0
   1621c:	9301      	str	r3, [sp, #4]
   1621e:	2301      	movs	r3, #1
   16220:	9300      	str	r3, [sp, #0]
   16222:	0023      	movs	r3, r4
   16224:	4c0c      	ldr	r4, [pc, #48]	; (16258 <MQTT_HandleNauMessages+0x80>)
   16226:	47a0      	blx	r4
		SerialConsoleWriteString("NAU DATA POSTED\r\n");
   16228:	4b0c      	ldr	r3, [pc, #48]	; (1625c <MQTT_HandleNauMessages+0x84>)
   1622a:	0018      	movs	r0, r3
   1622c:	4b0c      	ldr	r3, [pc, #48]	; (16260 <MQTT_HandleNauMessages+0x88>)
   1622e:	4798      	blx	r3
	}
}
   16230:	46c0      	nop			; (mov r8, r8)
   16232:	46bd      	mov	sp, r7
   16234:	b003      	add	sp, #12
   16236:	bd90      	pop	{r4, r7, pc}
   16238:	20000600 	.word	0x20000600
   1623c:	0001a005 	.word	0x0001a005
   16240:	000366d8 	.word	0x000366d8
   16244:	20000020 	.word	0x20000020
   16248:	00034839 	.word	0x00034839
   1624c:	0003497b 	.word	0x0003497b
   16250:	000366f4 	.word	0x000366f4
   16254:	20000864 	.word	0x20000864
   16258:	0002eb85 	.word	0x0002eb85
   1625c:	00036708 	.word	0x00036708
   16260:	0001ce05 	.word	0x0001ce05

00016264 <vWifiTask>:
 * Application entry point.
 *
 * \return program return value.
 */
void vWifiTask(void *pvParameters)
{
   16264:	b590      	push	{r4, r7, lr}
   16266:	b08d      	sub	sp, #52	; 0x34
   16268:	af02      	add	r7, sp, #8
   1626a:	6078      	str	r0, [r7, #4]
    tstrWifiInitParam param;
    int8_t ret;
    vTaskDelay(100);
   1626c:	2064      	movs	r0, #100	; 0x64
   1626e:	4b73      	ldr	r3, [pc, #460]	; (1643c <vWifiTask+0x1d8>)
   16270:	4798      	blx	r3
    init_state();
   16272:	4b73      	ldr	r3, [pc, #460]	; (16440 <vWifiTask+0x1dc>)
   16274:	4798      	blx	r3
    // Create buffers to send data
    xQueueWifiState = xQueueCreate(5, sizeof(uint32_t));
   16276:	2200      	movs	r2, #0
   16278:	2104      	movs	r1, #4
   1627a:	2005      	movs	r0, #5
   1627c:	4b71      	ldr	r3, [pc, #452]	; (16444 <vWifiTask+0x1e0>)
   1627e:	4798      	blx	r3
   16280:	0002      	movs	r2, r0
   16282:	4b71      	ldr	r3, [pc, #452]	; (16448 <vWifiTask+0x1e4>)
   16284:	601a      	str	r2, [r3, #0]
	xQueueTestBuffer = xQueueCreate(5, sizeof(struct TestPacket));
   16286:	2200      	movs	r2, #0
   16288:	2101      	movs	r1, #1
   1628a:	2005      	movs	r0, #5
   1628c:	4b6d      	ldr	r3, [pc, #436]	; (16444 <vWifiTask+0x1e0>)
   1628e:	4798      	blx	r3
   16290:	0002      	movs	r2, r0
   16292:	4b6e      	ldr	r3, [pc, #440]	; (1644c <vWifiTask+0x1e8>)
   16294:	601a      	str	r2, [r3, #0]
	xQueueNauBuffer = xQueueCreate(5, sizeof(struct NauPacket));
   16296:	2200      	movs	r2, #0
   16298:	2104      	movs	r1, #4
   1629a:	2005      	movs	r0, #5
   1629c:	4b69      	ldr	r3, [pc, #420]	; (16444 <vWifiTask+0x1e0>)
   1629e:	4798      	blx	r3
   162a0:	0002      	movs	r2, r0
   162a2:	4b6b      	ldr	r3, [pc, #428]	; (16450 <vWifiTask+0x1ec>)
   162a4:	601a      	str	r2, [r3, #0]

    if (xQueueWifiState == NULL || xQueueTestBuffer == NULL || xQueueNauBuffer == NULL) {
   162a6:	4b68      	ldr	r3, [pc, #416]	; (16448 <vWifiTask+0x1e4>)
   162a8:	681b      	ldr	r3, [r3, #0]
   162aa:	2b00      	cmp	r3, #0
   162ac:	d007      	beq.n	162be <vWifiTask+0x5a>
   162ae:	4b67      	ldr	r3, [pc, #412]	; (1644c <vWifiTask+0x1e8>)
   162b0:	681b      	ldr	r3, [r3, #0]
   162b2:	2b00      	cmp	r3, #0
   162b4:	d003      	beq.n	162be <vWifiTask+0x5a>
   162b6:	4b66      	ldr	r3, [pc, #408]	; (16450 <vWifiTask+0x1ec>)
   162b8:	681b      	ldr	r3, [r3, #0]
   162ba:	2b00      	cmp	r3, #0
   162bc:	d103      	bne.n	162c6 <vWifiTask+0x62>
        SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
   162be:	4b65      	ldr	r3, [pc, #404]	; (16454 <vWifiTask+0x1f0>)
   162c0:	0018      	movs	r0, r3
   162c2:	4b65      	ldr	r3, [pc, #404]	; (16458 <vWifiTask+0x1f4>)
   162c4:	4798      	blx	r3
    }

    SerialConsoleWriteString("ESE516 - Wifi Init Code\r\n");
   162c6:	4b65      	ldr	r3, [pc, #404]	; (1645c <vWifiTask+0x1f8>)
   162c8:	0018      	movs	r0, r3
   162ca:	4b63      	ldr	r3, [pc, #396]	; (16458 <vWifiTask+0x1f4>)
   162cc:	4798      	blx	r3
    /* Initialize the Timer. */
    configure_timer();
   162ce:	4b64      	ldr	r3, [pc, #400]	; (16460 <vWifiTask+0x1fc>)
   162d0:	4798      	blx	r3

    /* Initialize the HTTP client service. */
    configure_http_client();
   162d2:	4b64      	ldr	r3, [pc, #400]	; (16464 <vWifiTask+0x200>)
   162d4:	4798      	blx	r3

    /* Initialize the MQTT service. */
    configure_mqtt();
   162d6:	4b64      	ldr	r3, [pc, #400]	; (16468 <vWifiTask+0x204>)
   162d8:	4798      	blx	r3

    /* Initialize SD/MMC storage. */
    init_storage();
   162da:	4b64      	ldr	r3, [pc, #400]	; (1646c <vWifiTask+0x208>)
   162dc:	4798      	blx	r3

    /*Initialize BUTTON 0 as an external interrupt*/
    configure_extint_channel();
   162de:	4b64      	ldr	r3, [pc, #400]	; (16470 <vWifiTask+0x20c>)
   162e0:	4798      	blx	r3
    configure_extint_callbacks();
   162e2:	4b64      	ldr	r3, [pc, #400]	; (16474 <vWifiTask+0x210>)
   162e4:	4798      	blx	r3

    /* Initialize Wi-Fi parameters structure. */
    memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   162e6:	230c      	movs	r3, #12
   162e8:	18fb      	adds	r3, r7, r3
   162ea:	2218      	movs	r2, #24
   162ec:	2100      	movs	r1, #0
   162ee:	0018      	movs	r0, r3
   162f0:	4b61      	ldr	r3, [pc, #388]	; (16478 <vWifiTask+0x214>)
   162f2:	4798      	blx	r3

    nm_bsp_init();
   162f4:	4b61      	ldr	r3, [pc, #388]	; (1647c <vWifiTask+0x218>)
   162f6:	4798      	blx	r3

    /* Initialize Wi-Fi driver with data and status callbacks. */
    param.pfAppWifiCb = wifi_cb;
   162f8:	230c      	movs	r3, #12
   162fa:	18fb      	adds	r3, r7, r3
   162fc:	4a60      	ldr	r2, [pc, #384]	; (16480 <vWifiTask+0x21c>)
   162fe:	601a      	str	r2, [r3, #0]
    ret = m2m_wifi_init(&param);
   16300:	2327      	movs	r3, #39	; 0x27
   16302:	18fc      	adds	r4, r7, r3
   16304:	230c      	movs	r3, #12
   16306:	18fb      	adds	r3, r7, r3
   16308:	0018      	movs	r0, r3
   1630a:	4b5e      	ldr	r3, [pc, #376]	; (16484 <vWifiTask+0x220>)
   1630c:	4798      	blx	r3
   1630e:	0003      	movs	r3, r0
   16310:	7023      	strb	r3, [r4, #0]
    if (M2M_SUCCESS != ret) {
   16312:	2327      	movs	r3, #39	; 0x27
   16314:	18fb      	adds	r3, r7, r3
   16316:	781b      	ldrb	r3, [r3, #0]
   16318:	b25b      	sxtb	r3, r3
   1631a:	2b00      	cmp	r3, #0
   1631c:	d009      	beq.n	16332 <vWifiTask+0xce>
        LogMessage(LOG_DEBUG_LVL, "main: m2m_wifi_init call error! (res %d)\r\n", ret);
   1631e:	2327      	movs	r3, #39	; 0x27
   16320:	18fb      	adds	r3, r7, r3
   16322:	2200      	movs	r2, #0
   16324:	569a      	ldrsb	r2, [r3, r2]
   16326:	4b58      	ldr	r3, [pc, #352]	; (16488 <vWifiTask+0x224>)
   16328:	0019      	movs	r1, r3
   1632a:	2001      	movs	r0, #1
   1632c:	4b57      	ldr	r3, [pc, #348]	; (1648c <vWifiTask+0x228>)
   1632e:	4798      	blx	r3
        while (1) {
   16330:	e7fe      	b.n	16330 <vWifiTask+0xcc>
        }
    }

    LogMessage(LOG_DEBUG_LVL, "main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   16332:	4a57      	ldr	r2, [pc, #348]	; (16490 <vWifiTask+0x22c>)
   16334:	4b57      	ldr	r3, [pc, #348]	; (16494 <vWifiTask+0x230>)
   16336:	0019      	movs	r1, r3
   16338:	2001      	movs	r0, #1
   1633a:	4b54      	ldr	r3, [pc, #336]	; (1648c <vWifiTask+0x228>)
   1633c:	4798      	blx	r3

    // Re-enable socket for MQTT Transfer
    socketInit();
   1633e:	4b56      	ldr	r3, [pc, #344]	; (16498 <vWifiTask+0x234>)
   16340:	4798      	blx	r3
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   16342:	4a56      	ldr	r2, [pc, #344]	; (1649c <vWifiTask+0x238>)
   16344:	4b56      	ldr	r3, [pc, #344]	; (164a0 <vWifiTask+0x23c>)
   16346:	0011      	movs	r1, r2
   16348:	0018      	movs	r0, r3
   1634a:	4b56      	ldr	r3, [pc, #344]	; (164a4 <vWifiTask+0x240>)
   1634c:	4798      	blx	r3

    m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   1634e:	4a56      	ldr	r2, [pc, #344]	; (164a8 <vWifiTask+0x244>)
   16350:	484f      	ldr	r0, [pc, #316]	; (16490 <vWifiTask+0x22c>)
   16352:	23ff      	movs	r3, #255	; 0xff
   16354:	9300      	str	r3, [sp, #0]
   16356:	0013      	movs	r3, r2
   16358:	2202      	movs	r2, #2
   1635a:	2112      	movs	r1, #18
   1635c:	4c53      	ldr	r4, [pc, #332]	; (164ac <vWifiTask+0x248>)
   1635e:	47a0      	blx	r4

    while (!(is_state_set(WIFI_CONNECTED))) {
   16360:	e006      	b.n	16370 <vWifiTask+0x10c>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   16362:	2000      	movs	r0, #0
   16364:	4b52      	ldr	r3, [pc, #328]	; (164b0 <vWifiTask+0x24c>)
   16366:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   16368:	4b52      	ldr	r3, [pc, #328]	; (164b4 <vWifiTask+0x250>)
   1636a:	0018      	movs	r0, r3
   1636c:	4b52      	ldr	r3, [pc, #328]	; (164b8 <vWifiTask+0x254>)
   1636e:	4798      	blx	r3
    while (!(is_state_set(WIFI_CONNECTED))) {
   16370:	2002      	movs	r0, #2
   16372:	4b52      	ldr	r3, [pc, #328]	; (164bc <vWifiTask+0x258>)
   16374:	4798      	blx	r3
   16376:	0003      	movs	r3, r0
   16378:	001a      	movs	r2, r3
   1637a:	2301      	movs	r3, #1
   1637c:	4053      	eors	r3, r2
   1637e:	b2db      	uxtb	r3, r3
   16380:	2b00      	cmp	r3, #0
   16382:	d1ee      	bne.n	16362 <vWifiTask+0xfe>
    }

    vTaskDelay(1000);
   16384:	23fa      	movs	r3, #250	; 0xfa
   16386:	009b      	lsls	r3, r3, #2
   16388:	0018      	movs	r0, r3
   1638a:	4b2c      	ldr	r3, [pc, #176]	; (1643c <vWifiTask+0x1d8>)
   1638c:	4798      	blx	r3

    wifiStateMachine = WIFI_MQTT_HANDLE;
   1638e:	4b4c      	ldr	r3, [pc, #304]	; (164c0 <vWifiTask+0x25c>)
   16390:	2201      	movs	r2, #1
   16392:	701a      	strb	r2, [r3, #0]
    while (1) {
        switch (wifiStateMachine) {
   16394:	4b4a      	ldr	r3, [pc, #296]	; (164c0 <vWifiTask+0x25c>)
   16396:	781b      	ldrb	r3, [r3, #0]
   16398:	b25b      	sxtb	r3, r3
   1639a:	2b01      	cmp	r3, #1
   1639c:	d00b      	beq.n	163b6 <vWifiTask+0x152>
   1639e:	dc02      	bgt.n	163a6 <vWifiTask+0x142>
   163a0:	2b00      	cmp	r3, #0
   163a2:	d005      	beq.n	163b0 <vWifiTask+0x14c>
   163a4:	e010      	b.n	163c8 <vWifiTask+0x164>
   163a6:	2b02      	cmp	r3, #2
   163a8:	d008      	beq.n	163bc <vWifiTask+0x158>
   163aa:	2b03      	cmp	r3, #3
   163ac:	d009      	beq.n	163c2 <vWifiTask+0x15e>
   163ae:	e00b      	b.n	163c8 <vWifiTask+0x164>
            case (WIFI_MQTT_INIT): {
                MQTT_InitRoutine();
   163b0:	4b44      	ldr	r3, [pc, #272]	; (164c4 <vWifiTask+0x260>)
   163b2:	4798      	blx	r3

                break;
   163b4:	e00c      	b.n	163d0 <vWifiTask+0x16c>
            }

            case (WIFI_MQTT_HANDLE): {
                MQTT_HandleTransactions();
   163b6:	4b44      	ldr	r3, [pc, #272]	; (164c8 <vWifiTask+0x264>)
   163b8:	4798      	blx	r3
                break;
   163ba:	e009      	b.n	163d0 <vWifiTask+0x16c>
            }

            case (WIFI_DOWNLOAD_INIT): {
                HTTP_DownloadFileInit();
   163bc:	4b43      	ldr	r3, [pc, #268]	; (164cc <vWifiTask+0x268>)
   163be:	4798      	blx	r3
                break;
   163c0:	e006      	b.n	163d0 <vWifiTask+0x16c>
            }

            case (WIFI_DOWNLOAD_HANDLE): {
                HTTP_DownloadFileTransaction();
   163c2:	4b43      	ldr	r3, [pc, #268]	; (164d0 <vWifiTask+0x26c>)
   163c4:	4798      	blx	r3
                break;
   163c6:	e003      	b.n	163d0 <vWifiTask+0x16c>
            }

            default:
                wifiStateMachine = WIFI_MQTT_INIT;
   163c8:	4b3d      	ldr	r3, [pc, #244]	; (164c0 <vWifiTask+0x25c>)
   163ca:	2200      	movs	r2, #0
   163cc:	701a      	strb	r2, [r3, #0]
                break;
   163ce:	46c0      	nop			; (mov r8, r8)
        }
        // Check if a new state was called
        uint8_t DataToReceive = 0;
   163d0:	230b      	movs	r3, #11
   163d2:	18fb      	adds	r3, r7, r3
   163d4:	2200      	movs	r2, #0
   163d6:	701a      	strb	r2, [r3, #0]
        if (pdPASS == xQueueReceive(xQueueWifiState, &DataToReceive, 0)) {
   163d8:	4b1b      	ldr	r3, [pc, #108]	; (16448 <vWifiTask+0x1e4>)
   163da:	681b      	ldr	r3, [r3, #0]
   163dc:	220b      	movs	r2, #11
   163de:	18b9      	adds	r1, r7, r2
   163e0:	2200      	movs	r2, #0
   163e2:	0018      	movs	r0, r3
   163e4:	4b3b      	ldr	r3, [pc, #236]	; (164d4 <vWifiTask+0x270>)
   163e6:	4798      	blx	r3
   163e8:	0003      	movs	r3, r0
   163ea:	2b01      	cmp	r3, #1
   163ec:	d105      	bne.n	163fa <vWifiTask+0x196>
            wifiStateMachine = DataToReceive;  // Update new state
   163ee:	230b      	movs	r3, #11
   163f0:	18fb      	adds	r3, r7, r3
   163f2:	781b      	ldrb	r3, [r3, #0]
   163f4:	b25a      	sxtb	r2, r3
   163f6:	4b32      	ldr	r3, [pc, #200]	; (164c0 <vWifiTask+0x25c>)
   163f8:	701a      	strb	r2, [r3, #0]
        }

        //Check if we need to publis something. In this example, we publish the "temperature" when the button was pressed.
        if(isPressed)
   163fa:	4b37      	ldr	r3, [pc, #220]	; (164d8 <vWifiTask+0x274>)
   163fc:	781b      	ldrb	r3, [r3, #0]
   163fe:	b2db      	uxtb	r3, r3
   16400:	2b00      	cmp	r3, #0
   16402:	d017      	beq.n	16434 <vWifiTask+0x1d0>
        {
            mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, mqtt_msg_temp, strlen(mqtt_msg_temp), 1, 0);
   16404:	4b35      	ldr	r3, [pc, #212]	; (164dc <vWifiTask+0x278>)
   16406:	0018      	movs	r0, r3
   16408:	4b35      	ldr	r3, [pc, #212]	; (164e0 <vWifiTask+0x27c>)
   1640a:	4798      	blx	r3
   1640c:	0004      	movs	r4, r0
   1640e:	4a33      	ldr	r2, [pc, #204]	; (164dc <vWifiTask+0x278>)
   16410:	4934      	ldr	r1, [pc, #208]	; (164e4 <vWifiTask+0x280>)
   16412:	4835      	ldr	r0, [pc, #212]	; (164e8 <vWifiTask+0x284>)
   16414:	2300      	movs	r3, #0
   16416:	9301      	str	r3, [sp, #4]
   16418:	2301      	movs	r3, #1
   1641a:	9300      	str	r3, [sp, #0]
   1641c:	0023      	movs	r3, r4
   1641e:	4c33      	ldr	r4, [pc, #204]	; (164ec <vWifiTask+0x288>)
   16420:	47a0      	blx	r4
            LogMessage(LOG_DEBUG_LVL, "MQTT send %s\r\n", mqtt_msg_temp);
   16422:	4a2e      	ldr	r2, [pc, #184]	; (164dc <vWifiTask+0x278>)
   16424:	4b32      	ldr	r3, [pc, #200]	; (164f0 <vWifiTask+0x28c>)
   16426:	0019      	movs	r1, r3
   16428:	2001      	movs	r0, #1
   1642a:	4b18      	ldr	r3, [pc, #96]	; (1648c <vWifiTask+0x228>)
   1642c:	4798      	blx	r3
            isPressed = false;
   1642e:	4b2a      	ldr	r3, [pc, #168]	; (164d8 <vWifiTask+0x274>)
   16430:	2200      	movs	r2, #0
   16432:	701a      	strb	r2, [r3, #0]

        }

        vTaskDelay(100);
   16434:	2064      	movs	r0, #100	; 0x64
   16436:	4b01      	ldr	r3, [pc, #4]	; (1643c <vWifiTask+0x1d8>)
   16438:	4798      	blx	r3
    while (1) {
   1643a:	e7ab      	b.n	16394 <vWifiTask+0x130>
   1643c:	0001b1b1 	.word	0x0001b1b1
   16440:	00015059 	.word	0x00015059
   16444:	000194a5 	.word	0x000194a5
   16448:	200005f8 	.word	0x200005f8
   1644c:	200005fc 	.word	0x200005fc
   16450:	20000600 	.word	0x20000600
   16454:	0003671c 	.word	0x0003671c
   16458:	0001ce05 	.word	0x0001ce05
   1645c:	00036744 	.word	0x00036744
   16460:	00015a95 	.word	0x00015a95
   16464:	00015ad1 	.word	0x00015ad1
   16468:	00015d69 	.word	0x00015d69
   1646c:	000159b1 	.word	0x000159b1
   16470:	00015e21 	.word	0x00015e21
   16474:	00015e61 	.word	0x00015e61
   16478:	000345df 	.word	0x000345df
   1647c:	0001f379 	.word	0x0001f379
   16480:	0001585d 	.word	0x0001585d
   16484:	00020e51 	.word	0x00020e51
   16488:	00036760 	.word	0x00036760
   1648c:	0001cef1 	.word	0x0001cef1
   16490:	000362e0 	.word	0x000362e0
   16494:	0003678c 	.word	0x0003678c
   16498:	000245b1 	.word	0x000245b1
   1649c:	00015b79 	.word	0x00015b79
   164a0:	00015b45 	.word	0x00015b45
   164a4:	00024649 	.word	0x00024649
   164a8:	000362d0 	.word	0x000362d0
   164ac:	00021061 	.word	0x00021061
   164b0:	00021045 	.word	0x00021045
   164b4:	20004874 	.word	0x20004874
   164b8:	00031865 	.word	0x00031865
   164bc:	000150c9 	.word	0x000150c9
   164c0:	200005f5 	.word	0x200005f5
   164c4:	00016079 	.word	0x00016079
   164c8:	00016115 	.word	0x00016115
   164cc:	00015ed9 	.word	0x00015ed9
   164d0:	00015f6d 	.word	0x00015f6d
   164d4:	0001a005 	.word	0x0001a005
   164d8:	20000c9c 	.word	0x20000c9c
   164dc:	20000060 	.word	0x20000060
   164e0:	0003497b 	.word	0x0003497b
   164e4:	000367b0 	.word	0x000367b0
   164e8:	20000864 	.word	0x20000864
   164ec:	0002eb85 	.word	0x0002eb85
   164f0:	000367cc 	.word	0x000367cc

000164f4 <WifiHandlerSetState>:
    }
    return;
}

void WifiHandlerSetState(uint8_t state)
{
   164f4:	b590      	push	{r4, r7, lr}
   164f6:	b083      	sub	sp, #12
   164f8:	af00      	add	r7, sp, #0
   164fa:	0002      	movs	r2, r0
   164fc:	1dfb      	adds	r3, r7, #7
   164fe:	701a      	strb	r2, [r3, #0]
    if (state <= WIFI_DOWNLOAD_HANDLE) {
   16500:	1dfb      	adds	r3, r7, #7
   16502:	781b      	ldrb	r3, [r3, #0]
   16504:	2b03      	cmp	r3, #3
   16506:	d806      	bhi.n	16516 <WifiHandlerSetState+0x22>
        xQueueSend(xQueueWifiState, &state, (TickType_t)10);
   16508:	4b05      	ldr	r3, [pc, #20]	; (16520 <WifiHandlerSetState+0x2c>)
   1650a:	6818      	ldr	r0, [r3, #0]
   1650c:	1df9      	adds	r1, r7, #7
   1650e:	2300      	movs	r3, #0
   16510:	220a      	movs	r2, #10
   16512:	4c04      	ldr	r4, [pc, #16]	; (16524 <WifiHandlerSetState+0x30>)
   16514:	47a0      	blx	r4
    }
}
   16516:	46c0      	nop			; (mov r8, r8)
   16518:	46bd      	mov	sp, r7
   1651a:	b003      	add	sp, #12
   1651c:	bd90      	pop	{r4, r7, pc}
   1651e:	46c0      	nop			; (mov r8, r8)
   16520:	200005f8 	.word	0x200005f8
   16524:	0001974d 	.word	0x0001974d

00016528 <WifiAddTestDataToQueue>:


int WifiAddTestDataToQueue(struct TestPacket *test)
{
   16528:	b590      	push	{r4, r7, lr}
   1652a:	b085      	sub	sp, #20
   1652c:	af00      	add	r7, sp, #0
   1652e:	6078      	str	r0, [r7, #4]
	int error = xQueueSend(xQueueTestBuffer, test, (TickType_t)10);
   16530:	4b06      	ldr	r3, [pc, #24]	; (1654c <WifiAddTestDataToQueue+0x24>)
   16532:	6818      	ldr	r0, [r3, #0]
   16534:	6879      	ldr	r1, [r7, #4]
   16536:	2300      	movs	r3, #0
   16538:	220a      	movs	r2, #10
   1653a:	4c05      	ldr	r4, [pc, #20]	; (16550 <WifiAddTestDataToQueue+0x28>)
   1653c:	47a0      	blx	r4
   1653e:	0003      	movs	r3, r0
   16540:	60fb      	str	r3, [r7, #12]
	return error;
   16542:	68fb      	ldr	r3, [r7, #12]
}
   16544:	0018      	movs	r0, r3
   16546:	46bd      	mov	sp, r7
   16548:	b005      	add	sp, #20
   1654a:	bd90      	pop	{r4, r7, pc}
   1654c:	200005fc 	.word	0x200005fc
   16550:	0001974d 	.word	0x0001974d

00016554 <WifiAddNauDataToQueue>:

int WifiAddNauDataToQueue(struct NauPacket *nau)
{
   16554:	b590      	push	{r4, r7, lr}
   16556:	b085      	sub	sp, #20
   16558:	af00      	add	r7, sp, #0
   1655a:	6078      	str	r0, [r7, #4]
	int error = xQueueSend(xQueueNauBuffer, nau, (TickType_t)10);
   1655c:	4b06      	ldr	r3, [pc, #24]	; (16578 <WifiAddNauDataToQueue+0x24>)
   1655e:	6818      	ldr	r0, [r3, #0]
   16560:	6879      	ldr	r1, [r7, #4]
   16562:	2300      	movs	r3, #0
   16564:	220a      	movs	r2, #10
   16566:	4c05      	ldr	r4, [pc, #20]	; (1657c <WifiAddNauDataToQueue+0x28>)
   16568:	47a0      	blx	r4
   1656a:	0003      	movs	r3, r0
   1656c:	60fb      	str	r3, [r7, #12]
	return error;
   1656e:	68fb      	ldr	r3, [r7, #12]
   16570:	0018      	movs	r0, r3
   16572:	46bd      	mov	sp, r7
   16574:	b005      	add	sp, #20
   16576:	bd90      	pop	{r4, r7, pc}
   16578:	20000600 	.word	0x20000600
   1657c:	0001974d 	.word	0x0001974d

00016580 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   16580:	b580      	push	{r7, lr}
   16582:	b082      	sub	sp, #8
   16584:	af00      	add	r7, sp, #0
   16586:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   16588:	687b      	ldr	r3, [r7, #4]
   1658a:	2200      	movs	r2, #0
   1658c:	701a      	strb	r2, [r3, #0]
}
   1658e:	46c0      	nop			; (mov r8, r8)
   16590:	46bd      	mov	sp, r7
   16592:	b002      	add	sp, #8
   16594:	bd80      	pop	{r7, pc}
	...

00016598 <system_apb_clock_set_mask>:
{
   16598:	b580      	push	{r7, lr}
   1659a:	b082      	sub	sp, #8
   1659c:	af00      	add	r7, sp, #0
   1659e:	0002      	movs	r2, r0
   165a0:	6039      	str	r1, [r7, #0]
   165a2:	1dfb      	adds	r3, r7, #7
   165a4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   165a6:	1dfb      	adds	r3, r7, #7
   165a8:	781b      	ldrb	r3, [r3, #0]
   165aa:	2b01      	cmp	r3, #1
   165ac:	d00a      	beq.n	165c4 <system_apb_clock_set_mask+0x2c>
   165ae:	2b02      	cmp	r3, #2
   165b0:	d00f      	beq.n	165d2 <system_apb_clock_set_mask+0x3a>
   165b2:	2b00      	cmp	r3, #0
   165b4:	d114      	bne.n	165e0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   165b6:	4b0e      	ldr	r3, [pc, #56]	; (165f0 <system_apb_clock_set_mask+0x58>)
   165b8:	4a0d      	ldr	r2, [pc, #52]	; (165f0 <system_apb_clock_set_mask+0x58>)
   165ba:	6991      	ldr	r1, [r2, #24]
   165bc:	683a      	ldr	r2, [r7, #0]
   165be:	430a      	orrs	r2, r1
   165c0:	619a      	str	r2, [r3, #24]
			break;
   165c2:	e00f      	b.n	165e4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   165c4:	4b0a      	ldr	r3, [pc, #40]	; (165f0 <system_apb_clock_set_mask+0x58>)
   165c6:	4a0a      	ldr	r2, [pc, #40]	; (165f0 <system_apb_clock_set_mask+0x58>)
   165c8:	69d1      	ldr	r1, [r2, #28]
   165ca:	683a      	ldr	r2, [r7, #0]
   165cc:	430a      	orrs	r2, r1
   165ce:	61da      	str	r2, [r3, #28]
			break;
   165d0:	e008      	b.n	165e4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   165d2:	4b07      	ldr	r3, [pc, #28]	; (165f0 <system_apb_clock_set_mask+0x58>)
   165d4:	4a06      	ldr	r2, [pc, #24]	; (165f0 <system_apb_clock_set_mask+0x58>)
   165d6:	6a11      	ldr	r1, [r2, #32]
   165d8:	683a      	ldr	r2, [r7, #0]
   165da:	430a      	orrs	r2, r1
   165dc:	621a      	str	r2, [r3, #32]
			break;
   165de:	e001      	b.n	165e4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   165e0:	2317      	movs	r3, #23
   165e2:	e000      	b.n	165e6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   165e4:	2300      	movs	r3, #0
}
   165e6:	0018      	movs	r0, r3
   165e8:	46bd      	mov	sp, r7
   165ea:	b002      	add	sp, #8
   165ec:	bd80      	pop	{r7, pc}
   165ee:	46c0      	nop			; (mov r8, r8)
   165f0:	40000400 	.word	0x40000400

000165f4 <system_pinmux_get_config_defaults>:
{
   165f4:	b580      	push	{r7, lr}
   165f6:	b082      	sub	sp, #8
   165f8:	af00      	add	r7, sp, #0
   165fa:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   165fc:	687b      	ldr	r3, [r7, #4]
   165fe:	2280      	movs	r2, #128	; 0x80
   16600:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   16602:	687b      	ldr	r3, [r7, #4]
   16604:	2200      	movs	r2, #0
   16606:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   16608:	687b      	ldr	r3, [r7, #4]
   1660a:	2201      	movs	r2, #1
   1660c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   1660e:	687b      	ldr	r3, [r7, #4]
   16610:	2200      	movs	r2, #0
   16612:	70da      	strb	r2, [r3, #3]
}
   16614:	46c0      	nop			; (mov r8, r8)
   16616:	46bd      	mov	sp, r7
   16618:	b002      	add	sp, #8
   1661a:	bd80      	pop	{r7, pc}

0001661c <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   1661c:	b580      	push	{r7, lr}
   1661e:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   16620:	4b05      	ldr	r3, [pc, #20]	; (16638 <system_is_debugger_present+0x1c>)
   16622:	789b      	ldrb	r3, [r3, #2]
   16624:	b2db      	uxtb	r3, r3
   16626:	001a      	movs	r2, r3
   16628:	2302      	movs	r3, #2
   1662a:	4013      	ands	r3, r2
   1662c:	1e5a      	subs	r2, r3, #1
   1662e:	4193      	sbcs	r3, r2
   16630:	b2db      	uxtb	r3, r3
}
   16632:	0018      	movs	r0, r3
   16634:	46bd      	mov	sp, r7
   16636:	bd80      	pop	{r7, pc}
   16638:	41002000 	.word	0x41002000

0001663c <system_interrupt_enter_critical_section>:
{
   1663c:	b580      	push	{r7, lr}
   1663e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   16640:	4b02      	ldr	r3, [pc, #8]	; (1664c <system_interrupt_enter_critical_section+0x10>)
   16642:	4798      	blx	r3
}
   16644:	46c0      	nop			; (mov r8, r8)
   16646:	46bd      	mov	sp, r7
   16648:	bd80      	pop	{r7, pc}
   1664a:	46c0      	nop			; (mov r8, r8)
   1664c:	000252a9 	.word	0x000252a9

00016650 <system_interrupt_leave_critical_section>:
{
   16650:	b580      	push	{r7, lr}
   16652:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   16654:	4b02      	ldr	r3, [pc, #8]	; (16660 <system_interrupt_leave_critical_section+0x10>)
   16656:	4798      	blx	r3
}
   16658:	46c0      	nop			; (mov r8, r8)
   1665a:	46bd      	mov	sp, r7
   1665c:	bd80      	pop	{r7, pc}
   1665e:	46c0      	nop			; (mov r8, r8)
   16660:	000252fd 	.word	0x000252fd

00016664 <system_interrupt_disable>:
{
   16664:	b580      	push	{r7, lr}
   16666:	b082      	sub	sp, #8
   16668:	af00      	add	r7, sp, #0
   1666a:	0002      	movs	r2, r0
   1666c:	1dfb      	adds	r3, r7, #7
   1666e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   16670:	4a07      	ldr	r2, [pc, #28]	; (16690 <system_interrupt_disable+0x2c>)
   16672:	1dfb      	adds	r3, r7, #7
   16674:	781b      	ldrb	r3, [r3, #0]
   16676:	0019      	movs	r1, r3
   16678:	231f      	movs	r3, #31
   1667a:	400b      	ands	r3, r1
   1667c:	2101      	movs	r1, #1
   1667e:	4099      	lsls	r1, r3
   16680:	000b      	movs	r3, r1
   16682:	0019      	movs	r1, r3
   16684:	2380      	movs	r3, #128	; 0x80
   16686:	50d1      	str	r1, [r2, r3]
}
   16688:	46c0      	nop			; (mov r8, r8)
   1668a:	46bd      	mov	sp, r7
   1668c:	b002      	add	sp, #8
   1668e:	bd80      	pop	{r7, pc}
   16690:	e000e100 	.word	0xe000e100

00016694 <i2c_master_is_syncing>:
{
   16694:	b580      	push	{r7, lr}
   16696:	b084      	sub	sp, #16
   16698:	af00      	add	r7, sp, #0
   1669a:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   1669c:	687b      	ldr	r3, [r7, #4]
   1669e:	681b      	ldr	r3, [r3, #0]
   166a0:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   166a2:	68fb      	ldr	r3, [r7, #12]
   166a4:	69db      	ldr	r3, [r3, #28]
   166a6:	2207      	movs	r2, #7
   166a8:	4013      	ands	r3, r2
   166aa:	1e5a      	subs	r2, r3, #1
   166ac:	4193      	sbcs	r3, r2
   166ae:	b2db      	uxtb	r3, r3
}
   166b0:	0018      	movs	r0, r3
   166b2:	46bd      	mov	sp, r7
   166b4:	b004      	add	sp, #16
   166b6:	bd80      	pop	{r7, pc}

000166b8 <_i2c_master_wait_for_sync>:
{
   166b8:	b580      	push	{r7, lr}
   166ba:	b082      	sub	sp, #8
   166bc:	af00      	add	r7, sp, #0
   166be:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   166c0:	46c0      	nop			; (mov r8, r8)
   166c2:	687b      	ldr	r3, [r7, #4]
   166c4:	0018      	movs	r0, r3
   166c6:	4b04      	ldr	r3, [pc, #16]	; (166d8 <_i2c_master_wait_for_sync+0x20>)
   166c8:	4798      	blx	r3
   166ca:	1e03      	subs	r3, r0, #0
   166cc:	d1f9      	bne.n	166c2 <_i2c_master_wait_for_sync+0xa>
}
   166ce:	46c0      	nop			; (mov r8, r8)
   166d0:	46bd      	mov	sp, r7
   166d2:	b002      	add	sp, #8
   166d4:	bd80      	pop	{r7, pc}
   166d6:	46c0      	nop			; (mov r8, r8)
   166d8:	00016695 	.word	0x00016695

000166dc <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
   166dc:	b580      	push	{r7, lr}
   166de:	b084      	sub	sp, #16
   166e0:	af00      	add	r7, sp, #0
   166e2:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   166e4:	687b      	ldr	r3, [r7, #4]
   166e6:	681b      	ldr	r3, [r3, #0]
   166e8:	60fb      	str	r3, [r7, #12]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   166ea:	687b      	ldr	r3, [r7, #4]
   166ec:	681b      	ldr	r3, [r3, #0]
   166ee:	0018      	movs	r0, r3
   166f0:	4b0d      	ldr	r3, [pc, #52]	; (16728 <i2c_master_disable+0x4c>)
   166f2:	4798      	blx	r3
   166f4:	0003      	movs	r3, r0
   166f6:	0018      	movs	r0, r3
   166f8:	4b0c      	ldr	r3, [pc, #48]	; (1672c <i2c_master_disable+0x50>)
   166fa:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   166fc:	687b      	ldr	r3, [r7, #4]
   166fe:	0018      	movs	r0, r3
   16700:	4b0b      	ldr	r3, [pc, #44]	; (16730 <i2c_master_disable+0x54>)
   16702:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   16704:	68fb      	ldr	r3, [r7, #12]
   16706:	2283      	movs	r2, #131	; 0x83
   16708:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
   1670a:	68fb      	ldr	r3, [r7, #12]
   1670c:	2283      	movs	r2, #131	; 0x83
   1670e:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   16710:	68fb      	ldr	r3, [r7, #12]
   16712:	681b      	ldr	r3, [r3, #0]
   16714:	2202      	movs	r2, #2
   16716:	4393      	bics	r3, r2
   16718:	001a      	movs	r2, r3
   1671a:	68fb      	ldr	r3, [r7, #12]
   1671c:	601a      	str	r2, [r3, #0]

}
   1671e:	46c0      	nop			; (mov r8, r8)
   16720:	46bd      	mov	sp, r7
   16722:	b004      	add	sp, #16
   16724:	bd80      	pop	{r7, pc}
   16726:	46c0      	nop			; (mov r8, r8)
   16728:	0002677d 	.word	0x0002677d
   1672c:	00016665 	.word	0x00016665
   16730:	000166b9 	.word	0x000166b9

00016734 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
   16734:	b5f0      	push	{r4, r5, r6, r7, lr}
   16736:	b097      	sub	sp, #92	; 0x5c
   16738:	af00      	add	r7, sp, #0
   1673a:	6178      	str	r0, [r7, #20]
   1673c:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
   1673e:	2300      	movs	r3, #0
   16740:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
   16742:	2300      	movs	r3, #0
   16744:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
   16746:	2300      	movs	r3, #0
   16748:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
   1674a:	233b      	movs	r3, #59	; 0x3b
   1674c:	2210      	movs	r2, #16
   1674e:	4694      	mov	ip, r2
   16750:	44bc      	add	ip, r7
   16752:	4463      	add	r3, ip
   16754:	2200      	movs	r2, #0
   16756:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   16758:	697b      	ldr	r3, [r7, #20]
   1675a:	681b      	ldr	r3, [r3, #0]
   1675c:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
   1675e:	697b      	ldr	r3, [r7, #20]
   16760:	681b      	ldr	r3, [r3, #0]
   16762:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
   16764:	2323      	movs	r3, #35	; 0x23
   16766:	2210      	movs	r2, #16
   16768:	18ba      	adds	r2, r7, r2
   1676a:	18d4      	adds	r4, r2, r3
   1676c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1676e:	0018      	movs	r0, r3
   16770:	4bc0      	ldr	r3, [pc, #768]	; (16a74 <_i2c_master_set_config+0x340>)
   16772:	4798      	blx	r3
   16774:	0003      	movs	r3, r0
   16776:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   16778:	230c      	movs	r3, #12
   1677a:	2210      	movs	r2, #16
   1677c:	4694      	mov	ip, r2
   1677e:	44bc      	add	ip, r7
   16780:	4463      	add	r3, ip
   16782:	0018      	movs	r0, r3
   16784:	4bbc      	ldr	r3, [pc, #752]	; (16a78 <_i2c_master_set_config+0x344>)
   16786:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
   16788:	693b      	ldr	r3, [r7, #16]
   1678a:	69db      	ldr	r3, [r3, #28]
   1678c:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
   1678e:	693b      	ldr	r3, [r7, #16]
   16790:	6a1b      	ldr	r3, [r3, #32]
   16792:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
   16794:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   16796:	2b00      	cmp	r3, #0
   16798:	d106      	bne.n	167a8 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
   1679a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1679c:	2100      	movs	r1, #0
   1679e:	0018      	movs	r0, r3
   167a0:	4bb6      	ldr	r3, [pc, #728]	; (16a7c <_i2c_master_set_config+0x348>)
   167a2:	4798      	blx	r3
   167a4:	0003      	movs	r3, r0
   167a6:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
   167a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   167aa:	b2da      	uxtb	r2, r3
   167ac:	230c      	movs	r3, #12
   167ae:	2110      	movs	r1, #16
   167b0:	468c      	mov	ip, r1
   167b2:	44bc      	add	ip, r7
   167b4:	4463      	add	r3, ip
   167b6:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   167b8:	230c      	movs	r3, #12
   167ba:	2210      	movs	r2, #16
   167bc:	4694      	mov	ip, r2
   167be:	44bc      	add	ip, r7
   167c0:	4463      	add	r3, ip
   167c2:	2202      	movs	r2, #2
   167c4:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
   167c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   167c8:	0c1b      	lsrs	r3, r3, #16
   167ca:	b2db      	uxtb	r3, r3
   167cc:	220c      	movs	r2, #12
   167ce:	2110      	movs	r1, #16
   167d0:	468c      	mov	ip, r1
   167d2:	44bc      	add	ip, r7
   167d4:	4462      	add	r2, ip
   167d6:	0011      	movs	r1, r2
   167d8:	0018      	movs	r0, r3
   167da:	4ba9      	ldr	r3, [pc, #676]	; (16a80 <_i2c_master_set_config+0x34c>)
   167dc:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
   167de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   167e0:	2b00      	cmp	r3, #0
   167e2:	d106      	bne.n	167f2 <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
   167e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   167e6:	2101      	movs	r1, #1
   167e8:	0018      	movs	r0, r3
   167ea:	4ba4      	ldr	r3, [pc, #656]	; (16a7c <_i2c_master_set_config+0x348>)
   167ec:	4798      	blx	r3
   167ee:	0003      	movs	r3, r0
   167f0:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
   167f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   167f4:	b2da      	uxtb	r2, r3
   167f6:	230c      	movs	r3, #12
   167f8:	2110      	movs	r1, #16
   167fa:	468c      	mov	ip, r1
   167fc:	44bc      	add	ip, r7
   167fe:	4463      	add	r3, ip
   16800:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   16802:	230c      	movs	r3, #12
   16804:	2210      	movs	r2, #16
   16806:	4694      	mov	ip, r2
   16808:	44bc      	add	ip, r7
   1680a:	4463      	add	r3, ip
   1680c:	2202      	movs	r2, #2
   1680e:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
   16810:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16812:	0c1b      	lsrs	r3, r3, #16
   16814:	b2db      	uxtb	r3, r3
   16816:	220c      	movs	r2, #12
   16818:	2110      	movs	r1, #16
   1681a:	468c      	mov	ip, r1
   1681c:	44bc      	add	ip, r7
   1681e:	4462      	add	r2, ip
   16820:	0011      	movs	r1, r2
   16822:	0018      	movs	r0, r3
   16824:	4b96      	ldr	r3, [pc, #600]	; (16a80 <_i2c_master_set_config+0x34c>)
   16826:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
   16828:	693b      	ldr	r3, [r7, #16]
   1682a:	8a9a      	ldrh	r2, [r3, #20]
   1682c:	697b      	ldr	r3, [r7, #20]
   1682e:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
   16830:	693b      	ldr	r3, [r7, #16]
   16832:	8ada      	ldrh	r2, [r3, #22]
   16834:	697b      	ldr	r3, [r7, #20]
   16836:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   16838:	693b      	ldr	r3, [r7, #16]
   1683a:	7e1b      	ldrb	r3, [r3, #24]
   1683c:	2b00      	cmp	r3, #0
   1683e:	d103      	bne.n	16848 <_i2c_master_set_config+0x114>
   16840:	4b90      	ldr	r3, [pc, #576]	; (16a84 <_i2c_master_set_config+0x350>)
   16842:	4798      	blx	r3
   16844:	1e03      	subs	r3, r0, #0
   16846:	d002      	beq.n	1684e <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
   16848:	2380      	movs	r3, #128	; 0x80
   1684a:	657b      	str	r3, [r7, #84]	; 0x54
   1684c:	e001      	b.n	16852 <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
   1684e:	2300      	movs	r3, #0
   16850:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
   16852:	693b      	ldr	r3, [r7, #16]
   16854:	691b      	ldr	r3, [r3, #16]
   16856:	2b00      	cmp	r3, #0
   16858:	d004      	beq.n	16864 <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
   1685a:	693b      	ldr	r3, [r7, #16]
   1685c:	691b      	ldr	r3, [r3, #16]
   1685e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   16860:	4313      	orrs	r3, r2
   16862:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
   16864:	693b      	ldr	r3, [r7, #16]
   16866:	689b      	ldr	r3, [r3, #8]
   16868:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1686a:	4313      	orrs	r3, r2
   1686c:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
   1686e:	693b      	ldr	r3, [r7, #16]
   16870:	2224      	movs	r2, #36	; 0x24
   16872:	5c9b      	ldrb	r3, [r3, r2]
   16874:	2b00      	cmp	r3, #0
   16876:	d004      	beq.n	16882 <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
   16878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1687a:	2280      	movs	r2, #128	; 0x80
   1687c:	05d2      	lsls	r2, r2, #23
   1687e:	4313      	orrs	r3, r2
   16880:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
   16882:	693b      	ldr	r3, [r7, #16]
   16884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16886:	2b00      	cmp	r3, #0
   16888:	d004      	beq.n	16894 <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
   1688a:	693b      	ldr	r3, [r7, #16]
   1688c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1688e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   16890:	4313      	orrs	r3, r2
   16892:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
   16894:	693b      	ldr	r3, [r7, #16]
   16896:	222c      	movs	r2, #44	; 0x2c
   16898:	5c9b      	ldrb	r3, [r3, r2]
   1689a:	2b00      	cmp	r3, #0
   1689c:	d105      	bne.n	168aa <_i2c_master_set_config+0x176>
   1689e:	693b      	ldr	r3, [r7, #16]
   168a0:	689a      	ldr	r2, [r3, #8]
   168a2:	2380      	movs	r3, #128	; 0x80
   168a4:	049b      	lsls	r3, r3, #18
   168a6:	429a      	cmp	r2, r3
   168a8:	d104      	bne.n	168b4 <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
   168aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   168ac:	2280      	movs	r2, #128	; 0x80
   168ae:	0512      	lsls	r2, r2, #20
   168b0:	4313      	orrs	r3, r2
   168b2:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
   168b4:	693b      	ldr	r3, [r7, #16]
   168b6:	222d      	movs	r2, #45	; 0x2d
   168b8:	5c9b      	ldrb	r3, [r3, r2]
   168ba:	2b00      	cmp	r3, #0
   168bc:	d004      	beq.n	168c8 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
   168be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   168c0:	2280      	movs	r2, #128	; 0x80
   168c2:	0412      	lsls	r2, r2, #16
   168c4:	4313      	orrs	r3, r2
   168c6:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
   168c8:	693b      	ldr	r3, [r7, #16]
   168ca:	222e      	movs	r2, #46	; 0x2e
   168cc:	5c9b      	ldrb	r3, [r3, r2]
   168ce:	2b00      	cmp	r3, #0
   168d0:	d004      	beq.n	168dc <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
   168d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   168d4:	2280      	movs	r2, #128	; 0x80
   168d6:	03d2      	lsls	r2, r2, #15
   168d8:	4313      	orrs	r3, r2
   168da:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
   168dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   168de:	681a      	ldr	r2, [r3, #0]
   168e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   168e2:	431a      	orrs	r2, r3
   168e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   168e6:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
   168e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   168ea:	2280      	movs	r2, #128	; 0x80
   168ec:	0052      	lsls	r2, r2, #1
   168ee:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
   168f0:	2323      	movs	r3, #35	; 0x23
   168f2:	2210      	movs	r2, #16
   168f4:	4694      	mov	ip, r2
   168f6:	44bc      	add	ip, r7
   168f8:	4463      	add	r3, ip
   168fa:	781b      	ldrb	r3, [r3, #0]
   168fc:	3314      	adds	r3, #20
   168fe:	b2db      	uxtb	r3, r3
   16900:	0018      	movs	r0, r3
   16902:	4b61      	ldr	r3, [pc, #388]	; (16a88 <_i2c_master_set_config+0x354>)
   16904:	4798      	blx	r3
   16906:	0003      	movs	r3, r0
   16908:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
   1690a:	693b      	ldr	r3, [r7, #16]
   1690c:	681b      	ldr	r3, [r3, #0]
   1690e:	22fa      	movs	r2, #250	; 0xfa
   16910:	0092      	lsls	r2, r2, #2
   16912:	4353      	muls	r3, r2
   16914:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
   16916:	693b      	ldr	r3, [r7, #16]
   16918:	685b      	ldr	r3, [r3, #4]
   1691a:	22fa      	movs	r2, #250	; 0xfa
   1691c:	0092      	lsls	r2, r2, #2
   1691e:	4353      	muls	r3, r2
   16920:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
   16922:	693b      	ldr	r3, [r7, #16]
   16924:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   16926:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
   16928:	4b58      	ldr	r3, [pc, #352]	; (16a8c <_i2c_master_set_config+0x358>)
   1692a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1692c:	4798      	blx	r3
   1692e:	0005      	movs	r5, r0
   16930:	000e      	movs	r6, r1
   16932:	4b56      	ldr	r3, [pc, #344]	; (16a8c <_i2c_master_set_config+0x358>)
   16934:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   16936:	4798      	blx	r3
   16938:	60b8      	str	r0, [r7, #8]
   1693a:	60f9      	str	r1, [r7, #12]
   1693c:	4b53      	ldr	r3, [pc, #332]	; (16a8c <_i2c_master_set_config+0x358>)
   1693e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   16940:	4798      	blx	r3
   16942:	4c53      	ldr	r4, [pc, #332]	; (16a90 <_i2c_master_set_config+0x35c>)
   16944:	4a53      	ldr	r2, [pc, #332]	; (16a94 <_i2c_master_set_config+0x360>)
   16946:	4b54      	ldr	r3, [pc, #336]	; (16a98 <_i2c_master_set_config+0x364>)
   16948:	47a0      	blx	r4
   1694a:	0003      	movs	r3, r0
   1694c:	000c      	movs	r4, r1
   1694e:	603b      	str	r3, [r7, #0]
   16950:	607c      	str	r4, [r7, #4]
   16952:	4b4e      	ldr	r3, [pc, #312]	; (16a8c <_i2c_master_set_config+0x358>)
   16954:	6a38      	ldr	r0, [r7, #32]
   16956:	4798      	blx	r3
   16958:	0002      	movs	r2, r0
   1695a:	000b      	movs	r3, r1
   1695c:	4c4c      	ldr	r4, [pc, #304]	; (16a90 <_i2c_master_set_config+0x35c>)
   1695e:	6838      	ldr	r0, [r7, #0]
   16960:	6879      	ldr	r1, [r7, #4]
   16962:	47a0      	blx	r4
   16964:	0003      	movs	r3, r0
   16966:	000c      	movs	r4, r1
   16968:	0018      	movs	r0, r3
   1696a:	0021      	movs	r1, r4
   1696c:	4c4b      	ldr	r4, [pc, #300]	; (16a9c <_i2c_master_set_config+0x368>)
   1696e:	2200      	movs	r2, #0
   16970:	4b4b      	ldr	r3, [pc, #300]	; (16aa0 <_i2c_master_set_config+0x36c>)
   16972:	47a0      	blx	r4
   16974:	0003      	movs	r3, r0
   16976:	000c      	movs	r4, r1
   16978:	001a      	movs	r2, r3
   1697a:	0023      	movs	r3, r4
   1697c:	4c44      	ldr	r4, [pc, #272]	; (16a90 <_i2c_master_set_config+0x35c>)
   1697e:	68b8      	ldr	r0, [r7, #8]
   16980:	68f9      	ldr	r1, [r7, #12]
   16982:	47a0      	blx	r4
   16984:	0003      	movs	r3, r0
   16986:	000c      	movs	r4, r1
   16988:	001a      	movs	r2, r3
   1698a:	0023      	movs	r3, r4
   1698c:	4c45      	ldr	r4, [pc, #276]	; (16aa4 <_i2c_master_set_config+0x370>)
   1698e:	0028      	movs	r0, r5
   16990:	0031      	movs	r1, r6
   16992:	47a0      	blx	r4
   16994:	0003      	movs	r3, r0
   16996:	000c      	movs	r4, r1
   16998:	001d      	movs	r5, r3
   1699a:	0026      	movs	r6, r4
   1699c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1699e:	005a      	lsls	r2, r3, #1
   169a0:	4b3a      	ldr	r3, [pc, #232]	; (16a8c <_i2c_master_set_config+0x358>)
   169a2:	0010      	movs	r0, r2
   169a4:	4798      	blx	r3
   169a6:	0002      	movs	r2, r0
   169a8:	000b      	movs	r3, r1
   169aa:	4c3c      	ldr	r4, [pc, #240]	; (16a9c <_i2c_master_set_config+0x368>)
   169ac:	0028      	movs	r0, r5
   169ae:	0031      	movs	r1, r6
   169b0:	47a0      	blx	r4
   169b2:	0003      	movs	r3, r0
   169b4:	000c      	movs	r4, r1
   169b6:	0018      	movs	r0, r3
   169b8:	0021      	movs	r1, r4
   169ba:	4c3a      	ldr	r4, [pc, #232]	; (16aa4 <_i2c_master_set_config+0x370>)
   169bc:	2200      	movs	r2, #0
   169be:	4b3a      	ldr	r3, [pc, #232]	; (16aa8 <_i2c_master_set_config+0x374>)
   169c0:	47a0      	blx	r4
   169c2:	0003      	movs	r3, r0
   169c4:	000c      	movs	r4, r1
   169c6:	001d      	movs	r5, r3
   169c8:	0026      	movs	r6, r4
   169ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
   169cc:	005a      	lsls	r2, r3, #1
   169ce:	4b2f      	ldr	r3, [pc, #188]	; (16a8c <_i2c_master_set_config+0x358>)
   169d0:	0010      	movs	r0, r2
   169d2:	4798      	blx	r3
   169d4:	0002      	movs	r2, r0
   169d6:	000b      	movs	r3, r1
   169d8:	4c34      	ldr	r4, [pc, #208]	; (16aac <_i2c_master_set_config+0x378>)
   169da:	0028      	movs	r0, r5
   169dc:	0031      	movs	r1, r6
   169de:	47a0      	blx	r4
   169e0:	0003      	movs	r3, r0
   169e2:	000c      	movs	r4, r1
   169e4:	0019      	movs	r1, r3
   169e6:	0022      	movs	r2, r4
   169e8:	4b31      	ldr	r3, [pc, #196]	; (16ab0 <_i2c_master_set_config+0x37c>)
   169ea:	0008      	movs	r0, r1
   169ec:	0011      	movs	r1, r2
   169ee:	4798      	blx	r3
   169f0:	0003      	movs	r3, r0
   169f2:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
   169f4:	693b      	ldr	r3, [r7, #16]
   169f6:	689a      	ldr	r2, [r3, #8]
   169f8:	2380      	movs	r3, #128	; 0x80
   169fa:	049b      	lsls	r3, r3, #18
   169fc:	429a      	cmp	r2, r3
   169fe:	d16a      	bne.n	16ad6 <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
   16a00:	4b22      	ldr	r3, [pc, #136]	; (16a8c <_i2c_master_set_config+0x358>)
   16a02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   16a04:	4798      	blx	r3
   16a06:	4c25      	ldr	r4, [pc, #148]	; (16a9c <_i2c_master_set_config+0x368>)
   16a08:	0002      	movs	r2, r0
   16a0a:	000b      	movs	r3, r1
   16a0c:	47a0      	blx	r4
   16a0e:	0003      	movs	r3, r0
   16a10:	000c      	movs	r4, r1
   16a12:	001d      	movs	r5, r3
   16a14:	0026      	movs	r6, r4
   16a16:	4b1d      	ldr	r3, [pc, #116]	; (16a8c <_i2c_master_set_config+0x358>)
   16a18:	6a78      	ldr	r0, [r7, #36]	; 0x24
   16a1a:	4798      	blx	r3
   16a1c:	4c1c      	ldr	r4, [pc, #112]	; (16a90 <_i2c_master_set_config+0x35c>)
   16a1e:	2200      	movs	r2, #0
   16a20:	4b24      	ldr	r3, [pc, #144]	; (16ab4 <_i2c_master_set_config+0x380>)
   16a22:	47a0      	blx	r4
   16a24:	0003      	movs	r3, r0
   16a26:	000c      	movs	r4, r1
   16a28:	001a      	movs	r2, r3
   16a2a:	0023      	movs	r3, r4
   16a2c:	4c1f      	ldr	r4, [pc, #124]	; (16aac <_i2c_master_set_config+0x378>)
   16a2e:	0028      	movs	r0, r5
   16a30:	0031      	movs	r1, r6
   16a32:	47a0      	blx	r4
   16a34:	0003      	movs	r3, r0
   16a36:	000c      	movs	r4, r1
   16a38:	0018      	movs	r0, r3
   16a3a:	0021      	movs	r1, r4
   16a3c:	4c19      	ldr	r4, [pc, #100]	; (16aa4 <_i2c_master_set_config+0x370>)
   16a3e:	2200      	movs	r2, #0
   16a40:	4b19      	ldr	r3, [pc, #100]	; (16aa8 <_i2c_master_set_config+0x374>)
   16a42:	47a0      	blx	r4
   16a44:	0003      	movs	r3, r0
   16a46:	000c      	movs	r4, r1
   16a48:	0019      	movs	r1, r3
   16a4a:	0022      	movs	r2, r4
   16a4c:	4b18      	ldr	r3, [pc, #96]	; (16ab0 <_i2c_master_set_config+0x37c>)
   16a4e:	0008      	movs	r0, r1
   16a50:	0011      	movs	r1, r2
   16a52:	4798      	blx	r3
   16a54:	0003      	movs	r3, r0
   16a56:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
   16a58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   16a5a:	2b00      	cmp	r3, #0
   16a5c:	d02e      	beq.n	16abc <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
   16a5e:	4b16      	ldr	r3, [pc, #88]	; (16ab8 <_i2c_master_set_config+0x384>)
   16a60:	6a79      	ldr	r1, [r7, #36]	; 0x24
   16a62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   16a64:	4798      	blx	r3
   16a66:	0003      	movs	r3, r0
   16a68:	1e9a      	subs	r2, r3, #2
   16a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   16a6c:	1ad3      	subs	r3, r2, r3
   16a6e:	653b      	str	r3, [r7, #80]	; 0x50
   16a70:	e031      	b.n	16ad6 <_i2c_master_set_config+0x3a2>
   16a72:	46c0      	nop			; (mov r8, r8)
   16a74:	000266ad 	.word	0x000266ad
   16a78:	000165f5 	.word	0x000165f5
   16a7c:	000264f1 	.word	0x000264f1
   16a80:	0002929d 	.word	0x0002929d
   16a84:	0001661d 	.word	0x0001661d
   16a88:	00029061 	.word	0x00029061
   16a8c:	000342bd 	.word	0x000342bd
   16a90:	00033729 	.word	0x00033729
   16a94:	e826d695 	.word	0xe826d695
   16a98:	3e112e0b 	.word	0x3e112e0b
   16a9c:	00032aa1 	.word	0x00032aa1
   16aa0:	40240000 	.word	0x40240000
   16aa4:	00033c29 	.word	0x00033c29
   16aa8:	3ff00000 	.word	0x3ff00000
   16aac:	000330c1 	.word	0x000330c1
   16ab0:	00034255 	.word	0x00034255
   16ab4:	40080000 	.word	0x40080000
   16ab8:	00031b25 	.word	0x00031b25
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
   16abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16abe:	005a      	lsls	r2, r3, #1
   16ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16ac2:	18d3      	adds	r3, r2, r3
   16ac4:	1e5a      	subs	r2, r3, #1
   16ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16ac8:	0059      	lsls	r1, r3, #1
   16aca:	4b1d      	ldr	r3, [pc, #116]	; (16b40 <_i2c_master_set_config+0x40c>)
   16acc:	0010      	movs	r0, r2
   16ace:	4798      	blx	r3
   16ad0:	0003      	movs	r3, r0
   16ad2:	3b01      	subs	r3, #1
   16ad4:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   16ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16ad8:	2bff      	cmp	r3, #255	; 0xff
   16ada:	dc08      	bgt.n	16aee <_i2c_master_set_config+0x3ba>
   16adc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16ade:	2b00      	cmp	r3, #0
   16ae0:	db05      	blt.n	16aee <_i2c_master_set_config+0x3ba>
   16ae2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   16ae4:	2bff      	cmp	r3, #255	; 0xff
   16ae6:	dc02      	bgt.n	16aee <_i2c_master_set_config+0x3ba>
   16ae8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   16aea:	2b00      	cmp	r3, #0
   16aec:	da06      	bge.n	16afc <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
   16aee:	233b      	movs	r3, #59	; 0x3b
   16af0:	2210      	movs	r2, #16
   16af2:	4694      	mov	ip, r2
   16af4:	44bc      	add	ip, r7
   16af6:	4463      	add	r3, ip
   16af8:	2240      	movs	r2, #64	; 0x40
   16afa:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
   16afc:	233b      	movs	r3, #59	; 0x3b
   16afe:	2210      	movs	r2, #16
   16b00:	4694      	mov	ip, r2
   16b02:	44bc      	add	ip, r7
   16b04:	4463      	add	r3, ip
   16b06:	781b      	ldrb	r3, [r3, #0]
   16b08:	2b40      	cmp	r3, #64	; 0x40
   16b0a:	d00e      	beq.n	16b2a <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   16b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16b0e:	22ff      	movs	r2, #255	; 0xff
   16b10:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   16b12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   16b14:	041b      	lsls	r3, r3, #16
   16b16:	0019      	movs	r1, r3
   16b18:	23ff      	movs	r3, #255	; 0xff
   16b1a:	041b      	lsls	r3, r3, #16
   16b1c:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   16b1e:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   16b20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   16b22:	0612      	lsls	r2, r2, #24
   16b24:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   16b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16b28:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
   16b2a:	233b      	movs	r3, #59	; 0x3b
   16b2c:	2210      	movs	r2, #16
   16b2e:	4694      	mov	ip, r2
   16b30:	44bc      	add	ip, r7
   16b32:	4463      	add	r3, ip
   16b34:	781b      	ldrb	r3, [r3, #0]
}
   16b36:	0018      	movs	r0, r3
   16b38:	46bd      	mov	sp, r7
   16b3a:	b017      	add	sp, #92	; 0x5c
   16b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16b3e:	46c0      	nop			; (mov r8, r8)
   16b40:	00031b25 	.word	0x00031b25

00016b44 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
   16b44:	b590      	push	{r4, r7, lr}
   16b46:	b08b      	sub	sp, #44	; 0x2c
   16b48:	af00      	add	r7, sp, #0
   16b4a:	60f8      	str	r0, [r7, #12]
   16b4c:	60b9      	str	r1, [r7, #8]
   16b4e:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
   16b50:	68fb      	ldr	r3, [r7, #12]
   16b52:	68ba      	ldr	r2, [r7, #8]
   16b54:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   16b56:	68fb      	ldr	r3, [r7, #12]
   16b58:	681b      	ldr	r3, [r3, #0]
   16b5a:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   16b5c:	68fb      	ldr	r3, [r7, #12]
   16b5e:	681b      	ldr	r3, [r3, #0]
   16b60:	0018      	movs	r0, r3
   16b62:	4b3b      	ldr	r3, [pc, #236]	; (16c50 <i2c_master_init+0x10c>)
   16b64:	4798      	blx	r3
   16b66:	0003      	movs	r3, r0
   16b68:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   16b6a:	6a3b      	ldr	r3, [r7, #32]
   16b6c:	3302      	adds	r3, #2
   16b6e:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   16b70:	6a3b      	ldr	r3, [r7, #32]
   16b72:	3314      	adds	r3, #20
   16b74:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   16b76:	2201      	movs	r2, #1
   16b78:	69fb      	ldr	r3, [r7, #28]
   16b7a:	409a      	lsls	r2, r3
   16b7c:	0013      	movs	r3, r2
   16b7e:	0019      	movs	r1, r3
   16b80:	2002      	movs	r0, #2
   16b82:	4b34      	ldr	r3, [pc, #208]	; (16c54 <i2c_master_init+0x110>)
   16b84:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   16b86:	2314      	movs	r3, #20
   16b88:	18fb      	adds	r3, r7, r3
   16b8a:	0018      	movs	r0, r3
   16b8c:	4b32      	ldr	r3, [pc, #200]	; (16c58 <i2c_master_init+0x114>)
   16b8e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   16b90:	687b      	ldr	r3, [r7, #4]
   16b92:	7b1a      	ldrb	r2, [r3, #12]
   16b94:	2314      	movs	r3, #20
   16b96:	18fb      	adds	r3, r7, r3
   16b98:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   16b9a:	69bb      	ldr	r3, [r7, #24]
   16b9c:	b2db      	uxtb	r3, r3
   16b9e:	2214      	movs	r2, #20
   16ba0:	18ba      	adds	r2, r7, r2
   16ba2:	0011      	movs	r1, r2
   16ba4:	0018      	movs	r0, r3
   16ba6:	4b2d      	ldr	r3, [pc, #180]	; (16c5c <i2c_master_init+0x118>)
   16ba8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   16baa:	69bb      	ldr	r3, [r7, #24]
   16bac:	b2db      	uxtb	r3, r3
   16bae:	0018      	movs	r0, r3
   16bb0:	4b2b      	ldr	r3, [pc, #172]	; (16c60 <i2c_master_init+0x11c>)
   16bb2:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   16bb4:	687b      	ldr	r3, [r7, #4]
   16bb6:	7b1b      	ldrb	r3, [r3, #12]
   16bb8:	2100      	movs	r1, #0
   16bba:	0018      	movs	r0, r3
   16bbc:	4b29      	ldr	r3, [pc, #164]	; (16c64 <i2c_master_init+0x120>)
   16bbe:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   16bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16bc2:	681b      	ldr	r3, [r3, #0]
   16bc4:	2202      	movs	r2, #2
   16bc6:	4013      	ands	r3, r2
   16bc8:	d001      	beq.n	16bce <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
   16bca:	231c      	movs	r3, #28
   16bcc:	e03b      	b.n	16c46 <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   16bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16bd0:	681b      	ldr	r3, [r3, #0]
   16bd2:	2201      	movs	r2, #1
   16bd4:	4013      	ands	r3, r2
   16bd6:	d001      	beq.n	16bdc <i2c_master_init+0x98>
		return STATUS_BUSY;
   16bd8:	2305      	movs	r3, #5
   16bda:	e034      	b.n	16c46 <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   16bdc:	68fb      	ldr	r3, [r7, #12]
   16bde:	681b      	ldr	r3, [r3, #0]
   16be0:	2217      	movs	r2, #23
   16be2:	18bc      	adds	r4, r7, r2
   16be4:	0018      	movs	r0, r3
   16be6:	4b1a      	ldr	r3, [pc, #104]	; (16c50 <i2c_master_init+0x10c>)
   16be8:	4798      	blx	r3
   16bea:	0003      	movs	r3, r0
   16bec:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
   16bee:	4a1e      	ldr	r2, [pc, #120]	; (16c68 <i2c_master_init+0x124>)
   16bf0:	2317      	movs	r3, #23
   16bf2:	18fb      	adds	r3, r7, r3
   16bf4:	781b      	ldrb	r3, [r3, #0]
   16bf6:	0011      	movs	r1, r2
   16bf8:	0018      	movs	r0, r3
   16bfa:	4b1c      	ldr	r3, [pc, #112]	; (16c6c <i2c_master_init+0x128>)
   16bfc:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   16bfe:	2317      	movs	r3, #23
   16c00:	18fb      	adds	r3, r7, r3
   16c02:	781a      	ldrb	r2, [r3, #0]
   16c04:	4b1a      	ldr	r3, [pc, #104]	; (16c70 <i2c_master_init+0x12c>)
   16c06:	0092      	lsls	r2, r2, #2
   16c08:	68f9      	ldr	r1, [r7, #12]
   16c0a:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
   16c0c:	68fb      	ldr	r3, [r7, #12]
   16c0e:	2200      	movs	r2, #0
   16c10:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
   16c12:	68fb      	ldr	r3, [r7, #12]
   16c14:	2200      	movs	r2, #0
   16c16:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
   16c18:	68fb      	ldr	r3, [r7, #12]
   16c1a:	2200      	movs	r2, #0
   16c1c:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
   16c1e:	68fb      	ldr	r3, [r7, #12]
   16c20:	2200      	movs	r2, #0
   16c22:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
   16c24:	68fb      	ldr	r3, [r7, #12]
   16c26:	2225      	movs	r2, #37	; 0x25
   16c28:	2100      	movs	r1, #0
   16c2a:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
   16c2c:	68fb      	ldr	r3, [r7, #12]
   16c2e:	2200      	movs	r2, #0
   16c30:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
   16c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16c34:	2214      	movs	r2, #20
   16c36:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
   16c38:	687a      	ldr	r2, [r7, #4]
   16c3a:	68fb      	ldr	r3, [r7, #12]
   16c3c:	0011      	movs	r1, r2
   16c3e:	0018      	movs	r0, r3
   16c40:	4b0c      	ldr	r3, [pc, #48]	; (16c74 <i2c_master_init+0x130>)
   16c42:	4798      	blx	r3
   16c44:	0003      	movs	r3, r0
}
   16c46:	0018      	movs	r0, r3
   16c48:	46bd      	mov	sp, r7
   16c4a:	b00b      	add	sp, #44	; 0x2c
   16c4c:	bd90      	pop	{r4, r7, pc}
   16c4e:	46c0      	nop			; (mov r8, r8)
   16c50:	000266ad 	.word	0x000266ad
   16c54:	00016599 	.word	0x00016599
   16c58:	00016581 	.word	0x00016581
   16c5c:	00028f3d 	.word	0x00028f3d
   16c60:	00028f81 	.word	0x00028f81
   16c64:	00026465 	.word	0x00026465
   16c68:	00013575 	.word	0x00013575
   16c6c:	00026711 	.word	0x00026711
   16c70:	20005bcc 	.word	0x20005bcc
   16c74:	00016735 	.word	0x00016735

00016c78 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
   16c78:	b580      	push	{r7, lr}
   16c7a:	b084      	sub	sp, #16
   16c7c:	af00      	add	r7, sp, #0
   16c7e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   16c80:	687b      	ldr	r3, [r7, #4]
   16c82:	681b      	ldr	r3, [r3, #0]
   16c84:	60fb      	str	r3, [r7, #12]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   16c86:	687b      	ldr	r3, [r7, #4]
   16c88:	0018      	movs	r0, r3
   16c8a:	4b0f      	ldr	r3, [pc, #60]	; (16cc8 <i2c_master_reset+0x50>)
   16c8c:	4798      	blx	r3

	/* Disable module */
	i2c_master_disable(module);
   16c8e:	687b      	ldr	r3, [r7, #4]
   16c90:	0018      	movs	r0, r3
   16c92:	4b0e      	ldr	r3, [pc, #56]	; (16ccc <i2c_master_reset+0x54>)
   16c94:	4798      	blx	r3

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
   16c96:	4b0e      	ldr	r3, [pc, #56]	; (16cd0 <i2c_master_reset+0x58>)
   16c98:	4798      	blx	r3
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
   16c9a:	687b      	ldr	r3, [r7, #4]
   16c9c:	681b      	ldr	r3, [r3, #0]
   16c9e:	0018      	movs	r0, r3
   16ca0:	4b0c      	ldr	r3, [pc, #48]	; (16cd4 <i2c_master_reset+0x5c>)
   16ca2:	4798      	blx	r3
   16ca4:	0003      	movs	r3, r0
   16ca6:	0018      	movs	r0, r3
   16ca8:	4b0b      	ldr	r3, [pc, #44]	; (16cd8 <i2c_master_reset+0x60>)
   16caa:	4798      	blx	r3
	system_interrupt_leave_critical_section();
   16cac:	4b0b      	ldr	r3, [pc, #44]	; (16cdc <i2c_master_reset+0x64>)
   16cae:	4798      	blx	r3
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   16cb0:	687b      	ldr	r3, [r7, #4]
   16cb2:	0018      	movs	r0, r3
   16cb4:	4b04      	ldr	r3, [pc, #16]	; (16cc8 <i2c_master_reset+0x50>)
   16cb6:	4798      	blx	r3

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
   16cb8:	68fb      	ldr	r3, [r7, #12]
   16cba:	2201      	movs	r2, #1
   16cbc:	601a      	str	r2, [r3, #0]
}
   16cbe:	46c0      	nop			; (mov r8, r8)
   16cc0:	46bd      	mov	sp, r7
   16cc2:	b004      	add	sp, #16
   16cc4:	bd80      	pop	{r7, pc}
   16cc6:	46c0      	nop			; (mov r8, r8)
   16cc8:	000166b9 	.word	0x000166b9
   16ccc:	000166dd 	.word	0x000166dd
   16cd0:	0001663d 	.word	0x0001663d
   16cd4:	0002677d 	.word	0x0002677d
   16cd8:	000290b9 	.word	0x000290b9
   16cdc:	00016651 	.word	0x00016651

00016ce0 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
   16ce0:	b580      	push	{r7, lr}
   16ce2:	b084      	sub	sp, #16
   16ce4:	af00      	add	r7, sp, #0
   16ce6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   16ce8:	687b      	ldr	r3, [r7, #4]
   16cea:	681b      	ldr	r3, [r3, #0]
   16cec:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   16cee:	68fb      	ldr	r3, [r7, #12]
   16cf0:	7e1b      	ldrb	r3, [r3, #24]
   16cf2:	b2db      	uxtb	r3, r3
   16cf4:	001a      	movs	r2, r3
   16cf6:	2302      	movs	r3, #2
   16cf8:	4013      	ands	r3, r2
   16cfa:	d00b      	beq.n	16d14 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   16cfc:	68fb      	ldr	r3, [r7, #12]
   16cfe:	2202      	movs	r2, #2
   16d00:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   16d02:	68fb      	ldr	r3, [r7, #12]
   16d04:	8b5b      	ldrh	r3, [r3, #26]
   16d06:	b29b      	uxth	r3, r3
   16d08:	001a      	movs	r2, r3
   16d0a:	2302      	movs	r3, #2
   16d0c:	4013      	ands	r3, r2
   16d0e:	d011      	beq.n	16d34 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
   16d10:	2341      	movs	r3, #65	; 0x41
   16d12:	e010      	b.n	16d36 <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   16d14:	68fb      	ldr	r3, [r7, #12]
   16d16:	8b5b      	ldrh	r3, [r3, #26]
   16d18:	b29b      	uxth	r3, r3
   16d1a:	001a      	movs	r2, r3
   16d1c:	2304      	movs	r3, #4
   16d1e:	4013      	ands	r3, r2
   16d20:	d008      	beq.n	16d34 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   16d22:	68fb      	ldr	r3, [r7, #12]
   16d24:	685b      	ldr	r3, [r3, #4]
   16d26:	22c0      	movs	r2, #192	; 0xc0
   16d28:	0292      	lsls	r2, r2, #10
   16d2a:	431a      	orrs	r2, r3
   16d2c:	68fb      	ldr	r3, [r7, #12]
   16d2e:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
   16d30:	2318      	movs	r3, #24
   16d32:	e000      	b.n	16d36 <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
   16d34:	2300      	movs	r3, #0
}
   16d36:	0018      	movs	r0, r3
   16d38:	46bd      	mov	sp, r7
   16d3a:	b004      	add	sp, #16
   16d3c:	bd80      	pop	{r7, pc}

00016d3e <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
   16d3e:	b580      	push	{r7, lr}
   16d40:	b084      	sub	sp, #16
   16d42:	af00      	add	r7, sp, #0
   16d44:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   16d46:	687b      	ldr	r3, [r7, #4]
   16d48:	681b      	ldr	r3, [r3, #0]
   16d4a:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
   16d4c:	230e      	movs	r3, #14
   16d4e:	18fb      	adds	r3, r7, r3
   16d50:	2200      	movs	r2, #0
   16d52:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   16d54:	e00f      	b.n	16d76 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
   16d56:	230e      	movs	r3, #14
   16d58:	18fb      	adds	r3, r7, r3
   16d5a:	220e      	movs	r2, #14
   16d5c:	18ba      	adds	r2, r7, r2
   16d5e:	8812      	ldrh	r2, [r2, #0]
   16d60:	3201      	adds	r2, #1
   16d62:	801a      	strh	r2, [r3, #0]
   16d64:	687b      	ldr	r3, [r7, #4]
   16d66:	891b      	ldrh	r3, [r3, #8]
   16d68:	220e      	movs	r2, #14
   16d6a:	18ba      	adds	r2, r7, r2
   16d6c:	8812      	ldrh	r2, [r2, #0]
   16d6e:	429a      	cmp	r2, r3
   16d70:	d301      	bcc.n	16d76 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
   16d72:	2312      	movs	r3, #18
   16d74:	e00e      	b.n	16d94 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   16d76:	68bb      	ldr	r3, [r7, #8]
   16d78:	7e1b      	ldrb	r3, [r3, #24]
   16d7a:	b2db      	uxtb	r3, r3
   16d7c:	001a      	movs	r2, r3
   16d7e:	2301      	movs	r3, #1
   16d80:	4013      	ands	r3, r2
   16d82:	d106      	bne.n	16d92 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   16d84:	68bb      	ldr	r3, [r7, #8]
   16d86:	7e1b      	ldrb	r3, [r3, #24]
   16d88:	b2db      	uxtb	r3, r3
   16d8a:	001a      	movs	r2, r3
   16d8c:	2302      	movs	r3, #2
   16d8e:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   16d90:	d0e1      	beq.n	16d56 <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
   16d92:	2300      	movs	r3, #0
}
   16d94:	0018      	movs	r0, r3
   16d96:	46bd      	mov	sp, r7
   16d98:	b004      	add	sp, #16
   16d9a:	bd80      	pop	{r7, pc}

00016d9c <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
   16d9c:	b590      	push	{r4, r7, lr}
   16d9e:	b085      	sub	sp, #20
   16da0:	af00      	add	r7, sp, #0
   16da2:	6078      	str	r0, [r7, #4]
   16da4:	000a      	movs	r2, r1
   16da6:	1cfb      	adds	r3, r7, #3
   16da8:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   16daa:	687b      	ldr	r3, [r7, #4]
   16dac:	681b      	ldr	r3, [r3, #0]
   16dae:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   16db0:	68fb      	ldr	r3, [r7, #12]
   16db2:	685b      	ldr	r3, [r3, #4]
   16db4:	2280      	movs	r2, #128	; 0x80
   16db6:	02d2      	lsls	r2, r2, #11
   16db8:	431a      	orrs	r2, r3
   16dba:	68fb      	ldr	r3, [r7, #12]
   16dbc:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
   16dbe:	1cfb      	adds	r3, r7, #3
   16dc0:	781a      	ldrb	r2, [r3, #0]
   16dc2:	68fb      	ldr	r3, [r7, #12]
   16dc4:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   16dc6:	230b      	movs	r3, #11
   16dc8:	18fc      	adds	r4, r7, r3
   16dca:	687b      	ldr	r3, [r7, #4]
   16dcc:	0018      	movs	r0, r3
   16dce:	4b07      	ldr	r3, [pc, #28]	; (16dec <_i2c_master_send_hs_master_code+0x50>)
   16dd0:	4798      	blx	r3
   16dd2:	0003      	movs	r3, r0
   16dd4:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   16dd6:	68fb      	ldr	r3, [r7, #12]
   16dd8:	2201      	movs	r2, #1
   16dda:	761a      	strb	r2, [r3, #24]

	return tmp_status;
   16ddc:	230b      	movs	r3, #11
   16dde:	18fb      	adds	r3, r7, r3
   16de0:	781b      	ldrb	r3, [r3, #0]
}
   16de2:	0018      	movs	r0, r3
   16de4:	46bd      	mov	sp, r7
   16de6:	b005      	add	sp, #20
   16de8:	bd90      	pop	{r4, r7, pc}
   16dea:	46c0      	nop			; (mov r8, r8)
   16dec:	00016d3f 	.word	0x00016d3f

00016df0 <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   16df0:	b580      	push	{r7, lr}
   16df2:	af00      	add	r7, sp, #0
   16df4:	2000      	movs	r0, #0
   16df6:	4b02      	ldr	r3, [pc, #8]	; (16e00 <TC3_Handler+0x10>)
   16df8:	4798      	blx	r3
   16dfa:	46c0      	nop			; (mov r8, r8)
   16dfc:	46bd      	mov	sp, r7
   16dfe:	bd80      	pop	{r7, pc}
   16e00:	00016e2d 	.word	0x00016e2d

00016e04 <TC4_Handler>:
   16e04:	b580      	push	{r7, lr}
   16e06:	af00      	add	r7, sp, #0
   16e08:	2001      	movs	r0, #1
   16e0a:	4b02      	ldr	r3, [pc, #8]	; (16e14 <TC4_Handler+0x10>)
   16e0c:	4798      	blx	r3
   16e0e:	46c0      	nop			; (mov r8, r8)
   16e10:	46bd      	mov	sp, r7
   16e12:	bd80      	pop	{r7, pc}
   16e14:	00016e2d 	.word	0x00016e2d

00016e18 <TC5_Handler>:
   16e18:	b580      	push	{r7, lr}
   16e1a:	af00      	add	r7, sp, #0
   16e1c:	2002      	movs	r0, #2
   16e1e:	4b02      	ldr	r3, [pc, #8]	; (16e28 <TC5_Handler+0x10>)
   16e20:	4798      	blx	r3
   16e22:	46c0      	nop			; (mov r8, r8)
   16e24:	46bd      	mov	sp, r7
   16e26:	bd80      	pop	{r7, pc}
   16e28:	00016e2d 	.word	0x00016e2d

00016e2c <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   16e2c:	b580      	push	{r7, lr}
   16e2e:	b084      	sub	sp, #16
   16e30:	af00      	add	r7, sp, #0
   16e32:	0002      	movs	r2, r0
   16e34:	1dfb      	adds	r3, r7, #7
   16e36:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
   16e38:	1dfb      	adds	r3, r7, #7
   16e3a:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
   16e3c:	4b28      	ldr	r3, [pc, #160]	; (16ee0 <_tc_interrupt_handler+0xb4>)
   16e3e:	0092      	lsls	r2, r2, #2
   16e40:	58d3      	ldr	r3, [r2, r3]
   16e42:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   16e44:	68fb      	ldr	r3, [r7, #12]
   16e46:	681b      	ldr	r3, [r3, #0]
   16e48:	7b9b      	ldrb	r3, [r3, #14]
   16e4a:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
   16e4c:	68fa      	ldr	r2, [r7, #12]
   16e4e:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   16e50:	4013      	ands	r3, r2
   16e52:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
   16e54:	68fb      	ldr	r3, [r7, #12]
   16e56:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   16e58:	230b      	movs	r3, #11
   16e5a:	18fb      	adds	r3, r7, r3
   16e5c:	400a      	ands	r2, r1
   16e5e:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   16e60:	230b      	movs	r3, #11
   16e62:	18fb      	adds	r3, r7, r3
   16e64:	781b      	ldrb	r3, [r3, #0]
   16e66:	2201      	movs	r2, #1
   16e68:	4013      	ands	r3, r2
   16e6a:	d008      	beq.n	16e7e <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   16e6c:	68fb      	ldr	r3, [r7, #12]
   16e6e:	689b      	ldr	r3, [r3, #8]
   16e70:	68fa      	ldr	r2, [r7, #12]
   16e72:	0010      	movs	r0, r2
   16e74:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   16e76:	68fb      	ldr	r3, [r7, #12]
   16e78:	681b      	ldr	r3, [r3, #0]
   16e7a:	2201      	movs	r2, #1
   16e7c:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   16e7e:	230b      	movs	r3, #11
   16e80:	18fb      	adds	r3, r7, r3
   16e82:	781b      	ldrb	r3, [r3, #0]
   16e84:	2202      	movs	r2, #2
   16e86:	4013      	ands	r3, r2
   16e88:	d008      	beq.n	16e9c <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   16e8a:	68fb      	ldr	r3, [r7, #12]
   16e8c:	68db      	ldr	r3, [r3, #12]
   16e8e:	68fa      	ldr	r2, [r7, #12]
   16e90:	0010      	movs	r0, r2
   16e92:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   16e94:	68fb      	ldr	r3, [r7, #12]
   16e96:	681b      	ldr	r3, [r3, #0]
   16e98:	2202      	movs	r2, #2
   16e9a:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   16e9c:	230b      	movs	r3, #11
   16e9e:	18fb      	adds	r3, r7, r3
   16ea0:	781b      	ldrb	r3, [r3, #0]
   16ea2:	2210      	movs	r2, #16
   16ea4:	4013      	ands	r3, r2
   16ea6:	d008      	beq.n	16eba <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   16ea8:	68fb      	ldr	r3, [r7, #12]
   16eaa:	691b      	ldr	r3, [r3, #16]
   16eac:	68fa      	ldr	r2, [r7, #12]
   16eae:	0010      	movs	r0, r2
   16eb0:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   16eb2:	68fb      	ldr	r3, [r7, #12]
   16eb4:	681b      	ldr	r3, [r3, #0]
   16eb6:	2210      	movs	r2, #16
   16eb8:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   16eba:	230b      	movs	r3, #11
   16ebc:	18fb      	adds	r3, r7, r3
   16ebe:	781b      	ldrb	r3, [r3, #0]
   16ec0:	2220      	movs	r2, #32
   16ec2:	4013      	ands	r3, r2
   16ec4:	d008      	beq.n	16ed8 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   16ec6:	68fb      	ldr	r3, [r7, #12]
   16ec8:	695b      	ldr	r3, [r3, #20]
   16eca:	68fa      	ldr	r2, [r7, #12]
   16ecc:	0010      	movs	r0, r2
   16ece:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   16ed0:	68fb      	ldr	r3, [r7, #12]
   16ed2:	681b      	ldr	r3, [r3, #0]
   16ed4:	2220      	movs	r2, #32
   16ed6:	739a      	strb	r2, [r3, #14]
	}
}
   16ed8:	46c0      	nop			; (mov r8, r8)
   16eda:	46bd      	mov	sp, r7
   16edc:	b004      	add	sp, #16
   16ede:	bd80      	pop	{r7, pc}
   16ee0:	200049b4 	.word	0x200049b4

00016ee4 <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
   16ee4:	b580      	push	{r7, lr}
   16ee6:	b084      	sub	sp, #16
   16ee8:	af00      	add	r7, sp, #0
   16eea:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
   16eec:	2300      	movs	r3, #0
   16eee:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
   16ef0:	687b      	ldr	r3, [r7, #4]
   16ef2:	2b00      	cmp	r3, #0
   16ef4:	d101      	bne.n	16efa <FreeRTOS_CLIRegisterCommand+0x16>
   16ef6:	b672      	cpsid	i
   16ef8:	e7fe      	b.n	16ef8 <FreeRTOS_CLIRegisterCommand+0x14>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
   16efa:	2008      	movs	r0, #8
   16efc:	4b11      	ldr	r3, [pc, #68]	; (16f44 <FreeRTOS_CLIRegisterCommand+0x60>)
   16efe:	4798      	blx	r3
   16f00:	0003      	movs	r3, r0
   16f02:	60bb      	str	r3, [r7, #8]
	configASSERT( pxNewListItem );
   16f04:	68bb      	ldr	r3, [r7, #8]
   16f06:	2b00      	cmp	r3, #0
   16f08:	d101      	bne.n	16f0e <FreeRTOS_CLIRegisterCommand+0x2a>
   16f0a:	b672      	cpsid	i
   16f0c:	e7fe      	b.n	16f0c <FreeRTOS_CLIRegisterCommand+0x28>

	if( pxNewListItem != NULL )
   16f0e:	68bb      	ldr	r3, [r7, #8]
   16f10:	2b00      	cmp	r3, #0
   16f12:	d012      	beq.n	16f3a <FreeRTOS_CLIRegisterCommand+0x56>
	{
		taskENTER_CRITICAL();
   16f14:	4b0c      	ldr	r3, [pc, #48]	; (16f48 <FreeRTOS_CLIRegisterCommand+0x64>)
   16f16:	4798      	blx	r3
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
   16f18:	68bb      	ldr	r3, [r7, #8]
   16f1a:	687a      	ldr	r2, [r7, #4]
   16f1c:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
   16f1e:	68bb      	ldr	r3, [r7, #8]
   16f20:	2200      	movs	r2, #0
   16f22:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
   16f24:	4b09      	ldr	r3, [pc, #36]	; (16f4c <FreeRTOS_CLIRegisterCommand+0x68>)
   16f26:	681b      	ldr	r3, [r3, #0]
   16f28:	68ba      	ldr	r2, [r7, #8]
   16f2a:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
   16f2c:	4b07      	ldr	r3, [pc, #28]	; (16f4c <FreeRTOS_CLIRegisterCommand+0x68>)
   16f2e:	68ba      	ldr	r2, [r7, #8]
   16f30:	601a      	str	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
   16f32:	4b07      	ldr	r3, [pc, #28]	; (16f50 <FreeRTOS_CLIRegisterCommand+0x6c>)
   16f34:	4798      	blx	r3

		xReturn = pdPASS;
   16f36:	2301      	movs	r3, #1
   16f38:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   16f3a:	68fb      	ldr	r3, [r7, #12]
}
   16f3c:	0018      	movs	r0, r3
   16f3e:	46bd      	mov	sp, r7
   16f40:	b004      	add	sp, #16
   16f42:	bd80      	pop	{r7, pc}
   16f44:	000192f1 	.word	0x000192f1
   16f48:	000191b9 	.word	0x000191b9
   16f4c:	200000f0 	.word	0x200000f0
   16f50:	000191dd 	.word	0x000191dd

00016f54 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
   16f54:	b580      	push	{r7, lr}
   16f56:	b088      	sub	sp, #32
   16f58:	af00      	add	r7, sp, #0
   16f5a:	60f8      	str	r0, [r7, #12]
   16f5c:	60b9      	str	r1, [r7, #8]
   16f5e:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
   16f60:	2301      	movs	r3, #1
   16f62:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
   16f64:	4b3d      	ldr	r3, [pc, #244]	; (1705c <FreeRTOS_CLIProcessCommand+0x108>)
   16f66:	681b      	ldr	r3, [r3, #0]
   16f68:	2b00      	cmp	r3, #0
   16f6a:	d144      	bne.n	16ff6 <FreeRTOS_CLIProcessCommand+0xa2>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   16f6c:	4b3b      	ldr	r3, [pc, #236]	; (1705c <FreeRTOS_CLIProcessCommand+0x108>)
   16f6e:	4a3c      	ldr	r2, [pc, #240]	; (17060 <FreeRTOS_CLIProcessCommand+0x10c>)
   16f70:	601a      	str	r2, [r3, #0]
   16f72:	e03a      	b.n	16fea <FreeRTOS_CLIProcessCommand+0x96>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
   16f74:	4b39      	ldr	r3, [pc, #228]	; (1705c <FreeRTOS_CLIProcessCommand+0x108>)
   16f76:	681b      	ldr	r3, [r3, #0]
   16f78:	681b      	ldr	r3, [r3, #0]
   16f7a:	681b      	ldr	r3, [r3, #0]
   16f7c:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
   16f7e:	69bb      	ldr	r3, [r7, #24]
   16f80:	0018      	movs	r0, r3
   16f82:	4b38      	ldr	r3, [pc, #224]	; (17064 <FreeRTOS_CLIProcessCommand+0x110>)
   16f84:	4798      	blx	r3
   16f86:	0003      	movs	r3, r0
   16f88:	617b      	str	r3, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
   16f8a:	68fa      	ldr	r2, [r7, #12]
   16f8c:	697b      	ldr	r3, [r7, #20]
   16f8e:	18d3      	adds	r3, r2, r3
   16f90:	781b      	ldrb	r3, [r3, #0]
   16f92:	2b20      	cmp	r3, #32
   16f94:	d005      	beq.n	16fa2 <FreeRTOS_CLIProcessCommand+0x4e>
   16f96:	68fa      	ldr	r2, [r7, #12]
   16f98:	697b      	ldr	r3, [r7, #20]
   16f9a:	18d3      	adds	r3, r2, r3
   16f9c:	781b      	ldrb	r3, [r3, #0]
   16f9e:	2b00      	cmp	r3, #0
   16fa0:	d11e      	bne.n	16fe0 <FreeRTOS_CLIProcessCommand+0x8c>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
   16fa2:	697a      	ldr	r2, [r7, #20]
   16fa4:	69b9      	ldr	r1, [r7, #24]
   16fa6:	68fb      	ldr	r3, [r7, #12]
   16fa8:	0018      	movs	r0, r3
   16faa:	4b2f      	ldr	r3, [pc, #188]	; (17068 <FreeRTOS_CLIProcessCommand+0x114>)
   16fac:	4798      	blx	r3
   16fae:	1e03      	subs	r3, r0, #0
   16fb0:	d116      	bne.n	16fe0 <FreeRTOS_CLIProcessCommand+0x8c>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
   16fb2:	4b2a      	ldr	r3, [pc, #168]	; (1705c <FreeRTOS_CLIProcessCommand+0x108>)
   16fb4:	681b      	ldr	r3, [r3, #0]
   16fb6:	681b      	ldr	r3, [r3, #0]
   16fb8:	7b1b      	ldrb	r3, [r3, #12]
   16fba:	b25b      	sxtb	r3, r3
   16fbc:	2b00      	cmp	r3, #0
   16fbe:	db19      	blt.n	16ff4 <FreeRTOS_CLIProcessCommand+0xa0>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
   16fc0:	68fb      	ldr	r3, [r7, #12]
   16fc2:	0018      	movs	r0, r3
   16fc4:	4b29      	ldr	r3, [pc, #164]	; (1706c <FreeRTOS_CLIProcessCommand+0x118>)
   16fc6:	4798      	blx	r3
   16fc8:	0003      	movs	r3, r0
   16fca:	001a      	movs	r2, r3
   16fcc:	4b23      	ldr	r3, [pc, #140]	; (1705c <FreeRTOS_CLIProcessCommand+0x108>)
   16fce:	681b      	ldr	r3, [r3, #0]
   16fd0:	681b      	ldr	r3, [r3, #0]
   16fd2:	7b1b      	ldrb	r3, [r3, #12]
   16fd4:	b25b      	sxtb	r3, r3
   16fd6:	429a      	cmp	r2, r3
   16fd8:	d00c      	beq.n	16ff4 <FreeRTOS_CLIProcessCommand+0xa0>
						{
							xReturn = pdFALSE;
   16fda:	2300      	movs	r3, #0
   16fdc:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
   16fde:	e009      	b.n	16ff4 <FreeRTOS_CLIProcessCommand+0xa0>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   16fe0:	4b1e      	ldr	r3, [pc, #120]	; (1705c <FreeRTOS_CLIProcessCommand+0x108>)
   16fe2:	681b      	ldr	r3, [r3, #0]
   16fe4:	685a      	ldr	r2, [r3, #4]
   16fe6:	4b1d      	ldr	r3, [pc, #116]	; (1705c <FreeRTOS_CLIProcessCommand+0x108>)
   16fe8:	601a      	str	r2, [r3, #0]
   16fea:	4b1c      	ldr	r3, [pc, #112]	; (1705c <FreeRTOS_CLIProcessCommand+0x108>)
   16fec:	681b      	ldr	r3, [r3, #0]
   16fee:	2b00      	cmp	r3, #0
   16ff0:	d1c0      	bne.n	16f74 <FreeRTOS_CLIProcessCommand+0x20>
   16ff2:	e000      	b.n	16ff6 <FreeRTOS_CLIProcessCommand+0xa2>
					break;
   16ff4:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
   16ff6:	4b19      	ldr	r3, [pc, #100]	; (1705c <FreeRTOS_CLIProcessCommand+0x108>)
   16ff8:	681b      	ldr	r3, [r3, #0]
   16ffa:	2b00      	cmp	r3, #0
   16ffc:	d00c      	beq.n	17018 <FreeRTOS_CLIProcessCommand+0xc4>
   16ffe:	69fb      	ldr	r3, [r7, #28]
   17000:	2b00      	cmp	r3, #0
   17002:	d109      	bne.n	17018 <FreeRTOS_CLIProcessCommand+0xc4>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   17004:	687a      	ldr	r2, [r7, #4]
   17006:	491a      	ldr	r1, [pc, #104]	; (17070 <FreeRTOS_CLIProcessCommand+0x11c>)
   17008:	68bb      	ldr	r3, [r7, #8]
   1700a:	0018      	movs	r0, r3
   1700c:	4b19      	ldr	r3, [pc, #100]	; (17074 <FreeRTOS_CLIProcessCommand+0x120>)
   1700e:	4798      	blx	r3
		pxCommand = NULL;
   17010:	4b12      	ldr	r3, [pc, #72]	; (1705c <FreeRTOS_CLIProcessCommand+0x108>)
   17012:	2200      	movs	r2, #0
   17014:	601a      	str	r2, [r3, #0]
   17016:	e01c      	b.n	17052 <FreeRTOS_CLIProcessCommand+0xfe>
	}
	else if( pxCommand != NULL )
   17018:	4b10      	ldr	r3, [pc, #64]	; (1705c <FreeRTOS_CLIProcessCommand+0x108>)
   1701a:	681b      	ldr	r3, [r3, #0]
   1701c:	2b00      	cmp	r3, #0
   1701e:	d010      	beq.n	17042 <FreeRTOS_CLIProcessCommand+0xee>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
   17020:	4b0e      	ldr	r3, [pc, #56]	; (1705c <FreeRTOS_CLIProcessCommand+0x108>)
   17022:	681b      	ldr	r3, [r3, #0]
   17024:	681b      	ldr	r3, [r3, #0]
   17026:	689b      	ldr	r3, [r3, #8]
   17028:	68fa      	ldr	r2, [r7, #12]
   1702a:	6879      	ldr	r1, [r7, #4]
   1702c:	68b8      	ldr	r0, [r7, #8]
   1702e:	4798      	blx	r3
   17030:	0003      	movs	r3, r0
   17032:	61fb      	str	r3, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
   17034:	69fb      	ldr	r3, [r7, #28]
   17036:	2b00      	cmp	r3, #0
   17038:	d10b      	bne.n	17052 <FreeRTOS_CLIProcessCommand+0xfe>
		{
			pxCommand = NULL;
   1703a:	4b08      	ldr	r3, [pc, #32]	; (1705c <FreeRTOS_CLIProcessCommand+0x108>)
   1703c:	2200      	movs	r2, #0
   1703e:	601a      	str	r2, [r3, #0]
   17040:	e007      	b.n	17052 <FreeRTOS_CLIProcessCommand+0xfe>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   17042:	687a      	ldr	r2, [r7, #4]
   17044:	490c      	ldr	r1, [pc, #48]	; (17078 <FreeRTOS_CLIProcessCommand+0x124>)
   17046:	68bb      	ldr	r3, [r7, #8]
   17048:	0018      	movs	r0, r3
   1704a:	4b0a      	ldr	r3, [pc, #40]	; (17074 <FreeRTOS_CLIProcessCommand+0x120>)
   1704c:	4798      	blx	r3
		xReturn = pdFALSE;
   1704e:	2300      	movs	r3, #0
   17050:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
   17052:	69fb      	ldr	r3, [r7, #28]
}
   17054:	0018      	movs	r0, r3
   17056:	46bd      	mov	sp, r7
   17058:	b008      	add	sp, #32
   1705a:	bd80      	pop	{r7, pc}
   1705c:	20000ca0 	.word	0x20000ca0
   17060:	200000e8 	.word	0x200000e8
   17064:	0003497b 	.word	0x0003497b
   17068:	00034989 	.word	0x00034989
   1706c:	000170dd 	.word	0x000170dd
   17070:	00036828 	.word	0x00036828
   17074:	000349ab 	.word	0x000349ab
   17078:	00036880 	.word	0x00036880

0001707c <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
   1707c:	b580      	push	{r7, lr}
   1707e:	b086      	sub	sp, #24
   17080:	af00      	add	r7, sp, #0
   17082:	60f8      	str	r0, [r7, #12]
   17084:	60b9      	str	r1, [r7, #8]
   17086:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
   17088:	4b11      	ldr	r3, [pc, #68]	; (170d0 <prvHelpCommand+0x54>)
   1708a:	681b      	ldr	r3, [r3, #0]
   1708c:	2b00      	cmp	r3, #0
   1708e:	d102      	bne.n	17096 <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
   17090:	4b0f      	ldr	r3, [pc, #60]	; (170d0 <prvHelpCommand+0x54>)
   17092:	4a10      	ldr	r2, [pc, #64]	; (170d4 <prvHelpCommand+0x58>)
   17094:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
   17096:	4b0e      	ldr	r3, [pc, #56]	; (170d0 <prvHelpCommand+0x54>)
   17098:	681b      	ldr	r3, [r3, #0]
   1709a:	681b      	ldr	r3, [r3, #0]
   1709c:	6859      	ldr	r1, [r3, #4]
   1709e:	68ba      	ldr	r2, [r7, #8]
   170a0:	68fb      	ldr	r3, [r7, #12]
   170a2:	0018      	movs	r0, r3
   170a4:	4b0c      	ldr	r3, [pc, #48]	; (170d8 <prvHelpCommand+0x5c>)
   170a6:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
   170a8:	4b09      	ldr	r3, [pc, #36]	; (170d0 <prvHelpCommand+0x54>)
   170aa:	681b      	ldr	r3, [r3, #0]
   170ac:	685a      	ldr	r2, [r3, #4]
   170ae:	4b08      	ldr	r3, [pc, #32]	; (170d0 <prvHelpCommand+0x54>)
   170b0:	601a      	str	r2, [r3, #0]

	if( pxCommand == NULL )
   170b2:	4b07      	ldr	r3, [pc, #28]	; (170d0 <prvHelpCommand+0x54>)
   170b4:	681b      	ldr	r3, [r3, #0]
   170b6:	2b00      	cmp	r3, #0
   170b8:	d102      	bne.n	170c0 <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
   170ba:	2300      	movs	r3, #0
   170bc:	617b      	str	r3, [r7, #20]
   170be:	e001      	b.n	170c4 <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
   170c0:	2301      	movs	r3, #1
   170c2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
   170c4:	697b      	ldr	r3, [r7, #20]
}
   170c6:	0018      	movs	r0, r3
   170c8:	46bd      	mov	sp, r7
   170ca:	b006      	add	sp, #24
   170cc:	bd80      	pop	{r7, pc}
   170ce:	46c0      	nop			; (mov r8, r8)
   170d0:	20000ca4 	.word	0x20000ca4
   170d4:	200000e8 	.word	0x200000e8
   170d8:	000349ab 	.word	0x000349ab

000170dc <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
   170dc:	b580      	push	{r7, lr}
   170de:	b084      	sub	sp, #16
   170e0:	af00      	add	r7, sp, #0
   170e2:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
   170e4:	230f      	movs	r3, #15
   170e6:	18fb      	adds	r3, r7, r3
   170e8:	2200      	movs	r2, #0
   170ea:	701a      	strb	r2, [r3, #0]
BaseType_t xLastCharacterWasSpace = pdFALSE;
   170ec:	2300      	movs	r3, #0
   170ee:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
   170f0:	e018      	b.n	17124 <prvGetNumberOfParameters+0x48>
	{
		if( ( *pcCommandString ) == ' ' )
   170f2:	687b      	ldr	r3, [r7, #4]
   170f4:	781b      	ldrb	r3, [r3, #0]
   170f6:	2b20      	cmp	r3, #32
   170f8:	d10f      	bne.n	1711a <prvGetNumberOfParameters+0x3e>
		{
			if( xLastCharacterWasSpace != pdTRUE )
   170fa:	68bb      	ldr	r3, [r7, #8]
   170fc:	2b01      	cmp	r3, #1
   170fe:	d00e      	beq.n	1711e <prvGetNumberOfParameters+0x42>
			{
				cParameters++;
   17100:	230f      	movs	r3, #15
   17102:	18fb      	adds	r3, r7, r3
   17104:	781b      	ldrb	r3, [r3, #0]
   17106:	b25b      	sxtb	r3, r3
   17108:	b2db      	uxtb	r3, r3
   1710a:	3301      	adds	r3, #1
   1710c:	b2da      	uxtb	r2, r3
   1710e:	230f      	movs	r3, #15
   17110:	18fb      	adds	r3, r7, r3
   17112:	701a      	strb	r2, [r3, #0]
				xLastCharacterWasSpace = pdTRUE;
   17114:	2301      	movs	r3, #1
   17116:	60bb      	str	r3, [r7, #8]
   17118:	e001      	b.n	1711e <prvGetNumberOfParameters+0x42>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
   1711a:	2300      	movs	r3, #0
   1711c:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
   1711e:	687b      	ldr	r3, [r7, #4]
   17120:	3301      	adds	r3, #1
   17122:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
   17124:	687b      	ldr	r3, [r7, #4]
   17126:	781b      	ldrb	r3, [r3, #0]
   17128:	2b00      	cmp	r3, #0
   1712a:	d1e2      	bne.n	170f2 <prvGetNumberOfParameters+0x16>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
   1712c:	68bb      	ldr	r3, [r7, #8]
   1712e:	2b01      	cmp	r3, #1
   17130:	d109      	bne.n	17146 <prvGetNumberOfParameters+0x6a>
	{
		cParameters--;
   17132:	230f      	movs	r3, #15
   17134:	18fb      	adds	r3, r7, r3
   17136:	781b      	ldrb	r3, [r3, #0]
   17138:	b25b      	sxtb	r3, r3
   1713a:	b2db      	uxtb	r3, r3
   1713c:	3b01      	subs	r3, #1
   1713e:	b2da      	uxtb	r2, r3
   17140:	230f      	movs	r3, #15
   17142:	18fb      	adds	r3, r7, r3
   17144:	701a      	strb	r2, [r3, #0]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
   17146:	230f      	movs	r3, #15
   17148:	18fb      	adds	r3, r7, r3
   1714a:	781b      	ldrb	r3, [r3, #0]
   1714c:	b25b      	sxtb	r3, r3
}
   1714e:	0018      	movs	r0, r3
   17150:	46bd      	mov	sp, r7
   17152:	b004      	add	sp, #16
   17154:	bd80      	pop	{r7, pc}
	...

00017158 <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
   17158:	b580      	push	{r7, lr}
   1715a:	b082      	sub	sp, #8
   1715c:	af00      	add	r7, sp, #0
   1715e:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
   17160:	687b      	ldr	r3, [r7, #4]
   17162:	0018      	movs	r0, r3
   17164:	4b03      	ldr	r3, [pc, #12]	; (17174 <prvTraceGetQueueNumber+0x1c>)
   17166:	4798      	blx	r3
   17168:	0003      	movs	r3, r0
}
   1716a:	0018      	movs	r0, r3
   1716c:	46bd      	mov	sp, r7
   1716e:	b002      	add	sp, #8
   17170:	bd80      	pop	{r7, pc}
   17172:	46c0      	nop			; (mov r8, r8)
   17174:	0001a915 	.word	0x0001a915

00017178 <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
   17178:	b580      	push	{r7, lr}
   1717a:	b082      	sub	sp, #8
   1717c:	af00      	add	r7, sp, #0
   1717e:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
   17180:	687b      	ldr	r3, [r7, #4]
   17182:	0018      	movs	r0, r3
   17184:	4b03      	ldr	r3, [pc, #12]	; (17194 <prvTraceGetQueueType+0x1c>)
   17186:	4798      	blx	r3
   17188:	0003      	movs	r3, r0
}
   1718a:	0018      	movs	r0, r3
   1718c:	46bd      	mov	sp, r7
   1718e:	b002      	add	sp, #8
   17190:	bd80      	pop	{r7, pc}
   17192:	46c0      	nop			; (mov r8, r8)
   17194:	0001a941 	.word	0x0001a941

00017198 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
   17198:	b580      	push	{r7, lr}
   1719a:	b082      	sub	sp, #8
   1719c:	af00      	add	r7, sp, #0
   1719e:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
   171a0:	687b      	ldr	r3, [r7, #4]
   171a2:	0018      	movs	r0, r3
   171a4:	4b03      	ldr	r3, [pc, #12]	; (171b4 <prvTraceGetTaskNumberLow16+0x1c>)
   171a6:	4798      	blx	r3
   171a8:	0003      	movs	r3, r0
   171aa:	b29b      	uxth	r3, r3
}
   171ac:	0018      	movs	r0, r3
   171ae:	46bd      	mov	sp, r7
   171b0:	b002      	add	sp, #8
   171b2:	bd80      	pop	{r7, pc}
   171b4:	0001bc71 	.word	0x0001bc71

000171b8 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
   171b8:	b580      	push	{r7, lr}
   171ba:	b082      	sub	sp, #8
   171bc:	af00      	add	r7, sp, #0
   171be:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
   171c0:	687b      	ldr	r3, [r7, #4]
   171c2:	0018      	movs	r0, r3
   171c4:	4b04      	ldr	r3, [pc, #16]	; (171d8 <prvTraceGetTaskNumberHigh16+0x20>)
   171c6:	4798      	blx	r3
   171c8:	0003      	movs	r3, r0
   171ca:	0c1b      	lsrs	r3, r3, #16
   171cc:	b29b      	uxth	r3, r3
}
   171ce:	0018      	movs	r0, r3
   171d0:	46bd      	mov	sp, r7
   171d2:	b002      	add	sp, #8
   171d4:	bd80      	pop	{r7, pc}
   171d6:	46c0      	nop			; (mov r8, r8)
   171d8:	0001bc71 	.word	0x0001bc71

000171dc <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
   171dc:	b580      	push	{r7, lr}
   171de:	b082      	sub	sp, #8
   171e0:	af00      	add	r7, sp, #0
   171e2:	6078      	str	r0, [r7, #4]
   171e4:	000a      	movs	r2, r1
   171e6:	1cbb      	adds	r3, r7, #2
   171e8:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
   171ea:	687b      	ldr	r3, [r7, #4]
   171ec:	0018      	movs	r0, r3
   171ee:	4b08      	ldr	r3, [pc, #32]	; (17210 <prvTraceSetTaskNumberLow16+0x34>)
   171f0:	4798      	blx	r3
   171f2:	0003      	movs	r3, r0
   171f4:	0c1b      	lsrs	r3, r3, #16
   171f6:	041a      	lsls	r2, r3, #16
   171f8:	1cbb      	adds	r3, r7, #2
   171fa:	881b      	ldrh	r3, [r3, #0]
   171fc:	431a      	orrs	r2, r3
   171fe:	687b      	ldr	r3, [r7, #4]
   17200:	0011      	movs	r1, r2
   17202:	0018      	movs	r0, r3
   17204:	4b03      	ldr	r3, [pc, #12]	; (17214 <prvTraceSetTaskNumberLow16+0x38>)
   17206:	4798      	blx	r3
}
   17208:	46c0      	nop			; (mov r8, r8)
   1720a:	46bd      	mov	sp, r7
   1720c:	b002      	add	sp, #8
   1720e:	bd80      	pop	{r7, pc}
   17210:	0001bc71 	.word	0x0001bc71
   17214:	0001bc99 	.word	0x0001bc99

00017218 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
   17218:	b580      	push	{r7, lr}
   1721a:	b082      	sub	sp, #8
   1721c:	af00      	add	r7, sp, #0
   1721e:	6078      	str	r0, [r7, #4]
   17220:	000a      	movs	r2, r1
   17222:	1cbb      	adds	r3, r7, #2
   17224:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
   17226:	687b      	ldr	r3, [r7, #4]
   17228:	0018      	movs	r0, r3
   1722a:	4b09      	ldr	r3, [pc, #36]	; (17250 <prvTraceSetTaskNumberHigh16+0x38>)
   1722c:	4798      	blx	r3
   1722e:	0003      	movs	r3, r0
   17230:	041b      	lsls	r3, r3, #16
   17232:	0c1a      	lsrs	r2, r3, #16
   17234:	1cbb      	adds	r3, r7, #2
   17236:	881b      	ldrh	r3, [r3, #0]
   17238:	041b      	lsls	r3, r3, #16
   1723a:	431a      	orrs	r2, r3
   1723c:	687b      	ldr	r3, [r7, #4]
   1723e:	0011      	movs	r1, r2
   17240:	0018      	movs	r0, r3
   17242:	4b04      	ldr	r3, [pc, #16]	; (17254 <prvTraceSetTaskNumberHigh16+0x3c>)
   17244:	4798      	blx	r3
}
   17246:	46c0      	nop			; (mov r8, r8)
   17248:	46bd      	mov	sp, r7
   1724a:	b002      	add	sp, #8
   1724c:	bd80      	pop	{r7, pc}
   1724e:	46c0      	nop			; (mov r8, r8)
   17250:	0001bc71 	.word	0x0001bc71
   17254:	0001bc99 	.word	0x0001bc99

00017258 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
   17258:	b580      	push	{r7, lr}
   1725a:	b082      	sub	sp, #8
   1725c:	af00      	add	r7, sp, #0
   1725e:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
   17260:	687b      	ldr	r3, [r7, #4]
   17262:	0018      	movs	r0, r3
   17264:	4b03      	ldr	r3, [pc, #12]	; (17274 <prvTraceGetQueueNumberLow16+0x1c>)
   17266:	4798      	blx	r3
   17268:	0003      	movs	r3, r0
   1726a:	b29b      	uxth	r3, r3
}
   1726c:	0018      	movs	r0, r3
   1726e:	46bd      	mov	sp, r7
   17270:	b002      	add	sp, #8
   17272:	bd80      	pop	{r7, pc}
   17274:	00017159 	.word	0x00017159

00017278 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
   17278:	b580      	push	{r7, lr}
   1727a:	b082      	sub	sp, #8
   1727c:	af00      	add	r7, sp, #0
   1727e:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
   17280:	687b      	ldr	r3, [r7, #4]
   17282:	0018      	movs	r0, r3
   17284:	4b04      	ldr	r3, [pc, #16]	; (17298 <prvTraceGetQueueNumberHigh16+0x20>)
   17286:	4798      	blx	r3
   17288:	0003      	movs	r3, r0
   1728a:	0c1b      	lsrs	r3, r3, #16
   1728c:	b29b      	uxth	r3, r3
}
   1728e:	0018      	movs	r0, r3
   17290:	46bd      	mov	sp, r7
   17292:	b002      	add	sp, #8
   17294:	bd80      	pop	{r7, pc}
   17296:	46c0      	nop			; (mov r8, r8)
   17298:	00017159 	.word	0x00017159

0001729c <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
   1729c:	b580      	push	{r7, lr}
   1729e:	b082      	sub	sp, #8
   172a0:	af00      	add	r7, sp, #0
   172a2:	6078      	str	r0, [r7, #4]
   172a4:	000a      	movs	r2, r1
   172a6:	1cbb      	adds	r3, r7, #2
   172a8:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
   172aa:	687b      	ldr	r3, [r7, #4]
   172ac:	0018      	movs	r0, r3
   172ae:	4b08      	ldr	r3, [pc, #32]	; (172d0 <prvTraceSetQueueNumberLow16+0x34>)
   172b0:	4798      	blx	r3
   172b2:	0003      	movs	r3, r0
   172b4:	0c1b      	lsrs	r3, r3, #16
   172b6:	041a      	lsls	r2, r3, #16
   172b8:	1cbb      	adds	r3, r7, #2
   172ba:	881b      	ldrh	r3, [r3, #0]
   172bc:	431a      	orrs	r2, r3
   172be:	687b      	ldr	r3, [r7, #4]
   172c0:	0011      	movs	r1, r2
   172c2:	0018      	movs	r0, r3
   172c4:	4b03      	ldr	r3, [pc, #12]	; (172d4 <prvTraceSetQueueNumberLow16+0x38>)
   172c6:	4798      	blx	r3
}
   172c8:	46c0      	nop			; (mov r8, r8)
   172ca:	46bd      	mov	sp, r7
   172cc:	b002      	add	sp, #8
   172ce:	bd80      	pop	{r7, pc}
   172d0:	00017159 	.word	0x00017159
   172d4:	0001a929 	.word	0x0001a929

000172d8 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
   172d8:	b580      	push	{r7, lr}
   172da:	b082      	sub	sp, #8
   172dc:	af00      	add	r7, sp, #0
   172de:	6078      	str	r0, [r7, #4]
   172e0:	000a      	movs	r2, r1
   172e2:	1cbb      	adds	r3, r7, #2
   172e4:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
   172e6:	687b      	ldr	r3, [r7, #4]
   172e8:	0018      	movs	r0, r3
   172ea:	4b09      	ldr	r3, [pc, #36]	; (17310 <prvTraceSetQueueNumberHigh16+0x38>)
   172ec:	4798      	blx	r3
   172ee:	0003      	movs	r3, r0
   172f0:	041b      	lsls	r3, r3, #16
   172f2:	0c1a      	lsrs	r2, r3, #16
   172f4:	1cbb      	adds	r3, r7, #2
   172f6:	881b      	ldrh	r3, [r3, #0]
   172f8:	041b      	lsls	r3, r3, #16
   172fa:	431a      	orrs	r2, r3
   172fc:	687b      	ldr	r3, [r7, #4]
   172fe:	0011      	movs	r1, r2
   17300:	0018      	movs	r0, r3
   17302:	4b04      	ldr	r3, [pc, #16]	; (17314 <prvTraceSetQueueNumberHigh16+0x3c>)
   17304:	4798      	blx	r3
}
   17306:	46c0      	nop			; (mov r8, r8)
   17308:	46bd      	mov	sp, r7
   1730a:	b002      	add	sp, #8
   1730c:	bd80      	pop	{r7, pc}
   1730e:	46c0      	nop			; (mov r8, r8)
   17310:	00017159 	.word	0x00017159
   17314:	0001a929 	.word	0x0001a929

00017318 <prvAddTaskToStackMonitor>:
TaskStackMonitorEntry_t tasksInStackMonitor[TRC_CFG_STACK_MONITOR_MAX_TASKS] = { NULL };

int tasksNotIncluded = 0;

void prvAddTaskToStackMonitor(void* task)
{
   17318:	b580      	push	{r7, lr}
   1731a:	b084      	sub	sp, #16
   1731c:	af00      	add	r7, sp, #0
   1731e:	6078      	str	r0, [r7, #4]
	int foundEmptySlot = 0;
   17320:	2300      	movs	r3, #0
   17322:	60fb      	str	r3, [r7, #12]

	// find an empty slot
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   17324:	2300      	movs	r3, #0
   17326:	60bb      	str	r3, [r7, #8]
   17328:	e018      	b.n	1735c <prvAddTaskToStackMonitor+0x44>
	{
		if (tasksInStackMonitor[i].tcb == NULL)
   1732a:	4b14      	ldr	r3, [pc, #80]	; (1737c <prvAddTaskToStackMonitor+0x64>)
   1732c:	68ba      	ldr	r2, [r7, #8]
   1732e:	00d2      	lsls	r2, r2, #3
   17330:	58d3      	ldr	r3, [r2, r3]
   17332:	2b00      	cmp	r3, #0
   17334:	d10f      	bne.n	17356 <prvAddTaskToStackMonitor+0x3e>
		{
			tasksInStackMonitor[i].tcb = task;
   17336:	4b11      	ldr	r3, [pc, #68]	; (1737c <prvAddTaskToStackMonitor+0x64>)
   17338:	68ba      	ldr	r2, [r7, #8]
   1733a:	00d2      	lsls	r2, r2, #3
   1733c:	6879      	ldr	r1, [r7, #4]
   1733e:	50d1      	str	r1, [r2, r3]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
   17340:	4a0e      	ldr	r2, [pc, #56]	; (1737c <prvAddTaskToStackMonitor+0x64>)
   17342:	68bb      	ldr	r3, [r7, #8]
   17344:	00db      	lsls	r3, r3, #3
   17346:	18d3      	adds	r3, r2, r3
   17348:	3304      	adds	r3, #4
   1734a:	2201      	movs	r2, #1
   1734c:	4252      	negs	r2, r2
   1734e:	601a      	str	r2, [r3, #0]
			foundEmptySlot = 1;
   17350:	2301      	movs	r3, #1
   17352:	60fb      	str	r3, [r7, #12]
			break;
   17354:	e005      	b.n	17362 <prvAddTaskToStackMonitor+0x4a>
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   17356:	68bb      	ldr	r3, [r7, #8]
   17358:	3301      	adds	r3, #1
   1735a:	60bb      	str	r3, [r7, #8]
   1735c:	68bb      	ldr	r3, [r7, #8]
   1735e:	2b09      	cmp	r3, #9
   17360:	dde3      	ble.n	1732a <prvAddTaskToStackMonitor+0x12>
		}
	}

	if (foundEmptySlot == 0)
   17362:	68fb      	ldr	r3, [r7, #12]
   17364:	2b00      	cmp	r3, #0
   17366:	d104      	bne.n	17372 <prvAddTaskToStackMonitor+0x5a>
	{
		tasksNotIncluded++;
   17368:	4b05      	ldr	r3, [pc, #20]	; (17380 <prvAddTaskToStackMonitor+0x68>)
   1736a:	681b      	ldr	r3, [r3, #0]
   1736c:	1c5a      	adds	r2, r3, #1
   1736e:	4b04      	ldr	r3, [pc, #16]	; (17380 <prvAddTaskToStackMonitor+0x68>)
   17370:	601a      	str	r2, [r3, #0]
	}
}
   17372:	46c0      	nop			; (mov r8, r8)
   17374:	46bd      	mov	sp, r7
   17376:	b004      	add	sp, #16
   17378:	bd80      	pop	{r7, pc}
   1737a:	46c0      	nop			; (mov r8, r8)
   1737c:	20000cac 	.word	0x20000cac
   17380:	20000cfc 	.word	0x20000cfc

00017384 <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
   17384:	b590      	push	{r4, r7, lr}
   17386:	b085      	sub	sp, #20
   17388:	af00      	add	r7, sp, #0
	static int i = 0;	/* Static index used to loop over the monitored tasks */
	int count = 0;		/* The number of generated reports */
   1738a:	2300      	movs	r3, #0
   1738c:	60fb      	str	r3, [r7, #12]
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
   1738e:	4b2b      	ldr	r3, [pc, #172]	; (1743c <prvReportStackUsage+0xb8>)
   17390:	681b      	ldr	r3, [r3, #0]
   17392:	60bb      	str	r3, [r7, #8]
	
	do
	{
		/* Check the current spot */
		if (tasksInStackMonitor[i].tcb != NULL)
   17394:	4b29      	ldr	r3, [pc, #164]	; (1743c <prvReportStackUsage+0xb8>)
   17396:	681a      	ldr	r2, [r3, #0]
   17398:	4b29      	ldr	r3, [pc, #164]	; (17440 <prvReportStackUsage+0xbc>)
   1739a:	00d2      	lsls	r2, r2, #3
   1739c:	58d3      	ldr	r3, [r2, r3]
   1739e:	2b00      	cmp	r3, #0
   173a0:	d035      	beq.n	1740e <prvReportStackUsage+0x8a>
		{
			/* Get the amount of unused stack */
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
   173a2:	4b26      	ldr	r3, [pc, #152]	; (1743c <prvReportStackUsage+0xb8>)
   173a4:	681a      	ldr	r2, [r3, #0]
   173a6:	4b26      	ldr	r3, [pc, #152]	; (17440 <prvReportStackUsage+0xbc>)
   173a8:	00d2      	lsls	r2, r2, #3
   173aa:	58d3      	ldr	r3, [r2, r3]
   173ac:	0018      	movs	r0, r3
   173ae:	4b25      	ldr	r3, [pc, #148]	; (17444 <prvReportStackUsage+0xc0>)
   173b0:	4798      	blx	r3
   173b2:	0003      	movs	r3, r0
   173b4:	607b      	str	r3, [r7, #4]

			/* Store for later use */
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
   173b6:	4b21      	ldr	r3, [pc, #132]	; (1743c <prvReportStackUsage+0xb8>)
   173b8:	681b      	ldr	r3, [r3, #0]
   173ba:	4a21      	ldr	r2, [pc, #132]	; (17440 <prvReportStackUsage+0xbc>)
   173bc:	00db      	lsls	r3, r3, #3
   173be:	18d3      	adds	r3, r2, r3
   173c0:	3304      	adds	r3, #4
   173c2:	681a      	ldr	r2, [r3, #0]
   173c4:	687b      	ldr	r3, [r7, #4]
   173c6:	429a      	cmp	r2, r3
   173c8:	d907      	bls.n	173da <prvReportStackUsage+0x56>
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
   173ca:	4b1c      	ldr	r3, [pc, #112]	; (1743c <prvReportStackUsage+0xb8>)
   173cc:	681b      	ldr	r3, [r3, #0]
   173ce:	4a1c      	ldr	r2, [pc, #112]	; (17440 <prvReportStackUsage+0xbc>)
   173d0:	00db      	lsls	r3, r3, #3
   173d2:	18d3      	adds	r3, r2, r3
   173d4:	3304      	adds	r3, #4
   173d6:	687a      	ldr	r2, [r7, #4]
   173d8:	601a      	str	r2, [r3, #0]

#if TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
   173da:	4b18      	ldr	r3, [pc, #96]	; (1743c <prvReportStackUsage+0xb8>)
   173dc:	681a      	ldr	r2, [r3, #0]
   173de:	4b18      	ldr	r3, [pc, #96]	; (17440 <prvReportStackUsage+0xbc>)
   173e0:	00d2      	lsls	r2, r2, #3
   173e2:	58d3      	ldr	r3, [r2, r3]
   173e4:	0018      	movs	r0, r3
   173e6:	4b18      	ldr	r3, [pc, #96]	; (17448 <prvReportStackUsage+0xc4>)
   173e8:	4798      	blx	r3
   173ea:	0003      	movs	r3, r0
   173ec:	b2db      	uxtb	r3, r3
   173ee:	0019      	movs	r1, r3
   173f0:	4b12      	ldr	r3, [pc, #72]	; (1743c <prvReportStackUsage+0xb8>)
   173f2:	681b      	ldr	r3, [r3, #0]
   173f4:	4a12      	ldr	r2, [pc, #72]	; (17440 <prvReportStackUsage+0xbc>)
   173f6:	00db      	lsls	r3, r3, #3
   173f8:	18d3      	adds	r3, r2, r3
   173fa:	3304      	adds	r3, #4
   173fc:	681b      	ldr	r3, [r3, #0]
   173fe:	000a      	movs	r2, r1
   17400:	2103      	movs	r1, #3
   17402:	20ea      	movs	r0, #234	; 0xea
   17404:	4c11      	ldr	r4, [pc, #68]	; (1744c <prvReportStackUsage+0xc8>)
   17406:	47a0      	blx	r4
#else /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
#endif /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */

			count++;
   17408:	68fb      	ldr	r3, [r7, #12]
   1740a:	3301      	adds	r3, #1
   1740c:	60fb      	str	r3, [r7, #12]
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
   1740e:	4b0b      	ldr	r3, [pc, #44]	; (1743c <prvReportStackUsage+0xb8>)
   17410:	681b      	ldr	r3, [r3, #0]
   17412:	1c5a      	adds	r2, r3, #1
   17414:	4b0e      	ldr	r3, [pc, #56]	; (17450 <prvReportStackUsage+0xcc>)
   17416:	210a      	movs	r1, #10
   17418:	0010      	movs	r0, r2
   1741a:	4798      	blx	r3
   1741c:	000b      	movs	r3, r1
   1741e:	001a      	movs	r2, r3
   17420:	4b06      	ldr	r3, [pc, #24]	; (1743c <prvReportStackUsage+0xb8>)
   17422:	601a      	str	r2, [r3, #0]
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
   17424:	68fb      	ldr	r3, [r7, #12]
   17426:	2b00      	cmp	r3, #0
   17428:	dc04      	bgt.n	17434 <prvReportStackUsage+0xb0>
   1742a:	4b04      	ldr	r3, [pc, #16]	; (1743c <prvReportStackUsage+0xb8>)
   1742c:	681a      	ldr	r2, [r3, #0]
   1742e:	68bb      	ldr	r3, [r7, #8]
   17430:	429a      	cmp	r2, r3
   17432:	d1af      	bne.n	17394 <prvReportStackUsage+0x10>
}
   17434:	46c0      	nop			; (mov r8, r8)
   17436:	46bd      	mov	sp, r7
   17438:	b005      	add	sp, #20
   1743a:	bd90      	pop	{r4, r7, pc}
   1743c:	20000d00 	.word	0x20000d00
   17440:	20000cac 	.word	0x20000cac
   17444:	0001be11 	.word	0x0001be11
   17448:	00017199 	.word	0x00017199
   1744c:	00017ce1 	.word	0x00017ce1
   17450:	00031e05 	.word	0x00031e05

00017454 <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
   17454:	b580      	push	{r7, lr}
   17456:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
   17458:	4b02      	ldr	r3, [pc, #8]	; (17464 <prvTraceGetCurrentTaskHandle+0x10>)
   1745a:	4798      	blx	r3
   1745c:	0003      	movs	r3, r0
}
   1745e:	0018      	movs	r0, r3
   17460:	46bd      	mov	sp, r7
   17462:	bd80      	pop	{r7, pc}
   17464:	0001bebd 	.word	0x0001bebd

00017468 <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
   17468:	b590      	push	{r4, r7, lr}
   1746a:	b085      	sub	sp, #20
   1746c:	af02      	add	r7, sp, #8
   1746e:	6078      	str	r0, [r7, #4]
	prvTraceInitTraceData();
   17470:	4b14      	ldr	r3, [pc, #80]	; (174c4 <vTraceEnable+0x5c>)
   17472:	4798      	blx	r3

	if (startOption == TRC_START)
   17474:	687b      	ldr	r3, [r7, #4]
   17476:	2b01      	cmp	r3, #1
   17478:	d102      	bne.n	17480 <vTraceEnable+0x18>
	{
		vTraceStart();
   1747a:	4b13      	ldr	r3, [pc, #76]	; (174c8 <vTraceEnable+0x60>)
   1747c:	4798      	blx	r3
   1747e:	e00e      	b.n	1749e <vTraceEnable+0x36>
	}
	else if (startOption == TRC_START_AWAIT_HOST)
   17480:	687b      	ldr	r3, [r7, #4]
   17482:	2b02      	cmp	r3, #2
   17484:	d104      	bne.n	17490 <vTraceEnable+0x28>
	{
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
   17486:	4b11      	ldr	r3, [pc, #68]	; (174cc <vTraceEnable+0x64>)
   17488:	0018      	movs	r0, r3
   1748a:	4b11      	ldr	r3, [pc, #68]	; (174d0 <vTraceEnable+0x68>)
   1748c:	4798      	blx	r3
   1748e:	e006      	b.n	1749e <vTraceEnable+0x36>
	}
	else if (startOption != TRC_INIT)
   17490:	687b      	ldr	r3, [r7, #4]
   17492:	2b00      	cmp	r3, #0
   17494:	d003      	beq.n	1749e <vTraceEnable+0x36>
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
   17496:	4b0f      	ldr	r3, [pc, #60]	; (174d4 <vTraceEnable+0x6c>)
   17498:	0018      	movs	r0, r3
   1749a:	4b0d      	ldr	r3, [pc, #52]	; (174d0 <vTraceEnable+0x68>)
   1749c:	4798      	blx	r3
	}

#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	/* Creates the TzCtrl task - reports unsed stack */
	if (HandleTzCtrl == NULL)
   1749e:	4b0e      	ldr	r3, [pc, #56]	; (174d8 <vTraceEnable+0x70>)
   174a0:	681b      	ldr	r3, [r3, #0]
   174a2:	2b00      	cmp	r3, #0
   174a4:	d10a      	bne.n	174bc <vTraceEnable+0x54>
	{
#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		HandleTzCtrl = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
#else /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
   174a6:	2396      	movs	r3, #150	; 0x96
   174a8:	005a      	lsls	r2, r3, #1
   174aa:	490c      	ldr	r1, [pc, #48]	; (174dc <vTraceEnable+0x74>)
   174ac:	480c      	ldr	r0, [pc, #48]	; (174e0 <vTraceEnable+0x78>)
   174ae:	4b0a      	ldr	r3, [pc, #40]	; (174d8 <vTraceEnable+0x70>)
   174b0:	9301      	str	r3, [sp, #4]
   174b2:	2304      	movs	r3, #4
   174b4:	9300      	str	r3, [sp, #0]
   174b6:	2300      	movs	r3, #0
   174b8:	4c0a      	ldr	r4, [pc, #40]	; (174e4 <vTraceEnable+0x7c>)
   174ba:	47a0      	blx	r4
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}

#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */
}
   174bc:	46c0      	nop			; (mov r8, r8)
   174be:	46bd      	mov	sp, r7
   174c0:	b003      	add	sp, #12
   174c2:	bd90      	pop	{r4, r7, pc}
   174c4:	000183ad 	.word	0x000183ad
   174c8:	00017905 	.word	0x00017905
   174cc:	000368e0 	.word	0x000368e0
   174d0:	00018a55 	.word	0x00018a55
   174d4:	00036920 	.word	0x00036920
   174d8:	20000ca8 	.word	0x20000ca8
   174dc:	00036954 	.word	0x00036954
   174e0:	000174e9 	.word	0x000174e9
   174e4:	0001ae15 	.word	0x0001ae15

000174e8 <TzCtrl>:
* interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
* receiving commands from Tracealyzer. Also does some diagnostics.
******************************************************************************/
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
static portTASK_FUNCTION(TzCtrl, pvParameters)
{
   174e8:	b580      	push	{r7, lr}
   174ea:	b082      	sub	sp, #8
   174ec:	af00      	add	r7, sp, #0
   174ee:	6078      	str	r0, [r7, #4]
	(void)pvParameters;

	while (1)
	{
		if (xTraceIsRecordingEnabled())
   174f0:	4b04      	ldr	r3, [pc, #16]	; (17504 <TzCtrl+0x1c>)
   174f2:	4798      	blx	r3
   174f4:	1e03      	subs	r3, r0, #0
   174f6:	d001      	beq.n	174fc <TzCtrl+0x14>
		{
			prvReportStackUsage();
   174f8:	4b03      	ldr	r3, [pc, #12]	; (17508 <TzCtrl+0x20>)
   174fa:	4798      	blx	r3
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
   174fc:	2004      	movs	r0, #4
   174fe:	4b03      	ldr	r3, [pc, #12]	; (1750c <TzCtrl+0x24>)
   17500:	4798      	blx	r3
		if (xTraceIsRecordingEnabled())
   17502:	e7f5      	b.n	174f0 <TzCtrl+0x8>
   17504:	00017949 	.word	0x00017949
   17508:	00017385 	.word	0x00017385
   1750c:	0001b1b1 	.word	0x0001b1b1

00017510 <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
   17510:	b580      	push	{r7, lr}
   17512:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
   17514:	4b60      	ldr	r3, [pc, #384]	; (17698 <vTraceInitObjectPropertyTable+0x188>)
   17516:	681b      	ldr	r3, [r3, #0]
   17518:	2209      	movs	r2, #9
   1751a:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
   1751c:	4b5e      	ldr	r3, [pc, #376]	; (17698 <vTraceInitObjectPropertyTable+0x188>)
   1751e:	681b      	ldr	r3, [r3, #0]
   17520:	2264      	movs	r2, #100	; 0x64
   17522:	210a      	movs	r1, #10
   17524:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
   17526:	4b5c      	ldr	r3, [pc, #368]	; (17698 <vTraceInitObjectPropertyTable+0x188>)
   17528:	681b      	ldr	r3, [r3, #0]
   1752a:	2265      	movs	r2, #101	; 0x65
   1752c:	210a      	movs	r1, #10
   1752e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
   17530:	4b59      	ldr	r3, [pc, #356]	; (17698 <vTraceInitObjectPropertyTable+0x188>)
   17532:	681b      	ldr	r3, [r3, #0]
   17534:	2266      	movs	r2, #102	; 0x66
   17536:	210a      	movs	r1, #10
   17538:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
   1753a:	4b57      	ldr	r3, [pc, #348]	; (17698 <vTraceInitObjectPropertyTable+0x188>)
   1753c:	681b      	ldr	r3, [r3, #0]
   1753e:	2267      	movs	r2, #103	; 0x67
   17540:	210f      	movs	r1, #15
   17542:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
   17544:	4b54      	ldr	r3, [pc, #336]	; (17698 <vTraceInitObjectPropertyTable+0x188>)
   17546:	681b      	ldr	r3, [r3, #0]
   17548:	2268      	movs	r2, #104	; 0x68
   1754a:	2105      	movs	r1, #5
   1754c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
   1754e:	4b52      	ldr	r3, [pc, #328]	; (17698 <vTraceInitObjectPropertyTable+0x188>)
   17550:	681b      	ldr	r3, [r3, #0]
   17552:	2269      	movs	r2, #105	; 0x69
   17554:	2105      	movs	r1, #5
   17556:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
   17558:	4b4f      	ldr	r3, [pc, #316]	; (17698 <vTraceInitObjectPropertyTable+0x188>)
   1755a:	681b      	ldr	r3, [r3, #0]
   1755c:	226a      	movs	r2, #106	; 0x6a
   1755e:	2105      	movs	r1, #5
   17560:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
   17562:	4b4d      	ldr	r3, [pc, #308]	; (17698 <vTraceInitObjectPropertyTable+0x188>)
   17564:	681b      	ldr	r3, [r3, #0]
   17566:	226b      	movs	r2, #107	; 0x6b
   17568:	2105      	movs	r1, #5
   1756a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
   1756c:	4b4a      	ldr	r3, [pc, #296]	; (17698 <vTraceInitObjectPropertyTable+0x188>)
   1756e:	681b      	ldr	r3, [r3, #0]
   17570:	226c      	movs	r2, #108	; 0x6c
   17572:	2105      	movs	r1, #5
   17574:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
   17576:	4b48      	ldr	r3, [pc, #288]	; (17698 <vTraceInitObjectPropertyTable+0x188>)
   17578:	681b      	ldr	r3, [r3, #0]
   1757a:	2270      	movs	r2, #112	; 0x70
   1757c:	210f      	movs	r1, #15
   1757e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
   17580:	4b45      	ldr	r3, [pc, #276]	; (17698 <vTraceInitObjectPropertyTable+0x188>)
   17582:	681b      	ldr	r3, [r3, #0]
   17584:	2271      	movs	r2, #113	; 0x71
   17586:	210f      	movs	r1, #15
   17588:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
   1758a:	4b43      	ldr	r3, [pc, #268]	; (17698 <vTraceInitObjectPropertyTable+0x188>)
   1758c:	681b      	ldr	r3, [r3, #0]
   1758e:	2272      	movs	r2, #114	; 0x72
   17590:	210f      	movs	r1, #15
   17592:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
   17594:	4b40      	ldr	r3, [pc, #256]	; (17698 <vTraceInitObjectPropertyTable+0x188>)
   17596:	681b      	ldr	r3, [r3, #0]
   17598:	2273      	movs	r2, #115	; 0x73
   1759a:	210f      	movs	r1, #15
   1759c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
   1759e:	4b3e      	ldr	r3, [pc, #248]	; (17698 <vTraceInitObjectPropertyTable+0x188>)
   175a0:	681b      	ldr	r3, [r3, #0]
   175a2:	2274      	movs	r2, #116	; 0x74
   175a4:	210f      	movs	r1, #15
   175a6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
   175a8:	4b3b      	ldr	r3, [pc, #236]	; (17698 <vTraceInitObjectPropertyTable+0x188>)
   175aa:	681b      	ldr	r3, [r3, #0]
   175ac:	2275      	movs	r2, #117	; 0x75
   175ae:	210f      	movs	r1, #15
   175b0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
   175b2:	4b39      	ldr	r3, [pc, #228]	; (17698 <vTraceInitObjectPropertyTable+0x188>)
   175b4:	681b      	ldr	r3, [r3, #0]
   175b6:	2276      	movs	r2, #118	; 0x76
   175b8:	210f      	movs	r1, #15
   175ba:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
   175bc:	4b36      	ldr	r3, [pc, #216]	; (17698 <vTraceInitObjectPropertyTable+0x188>)
   175be:	681b      	ldr	r3, [r3, #0]
   175c0:	2277      	movs	r2, #119	; 0x77
   175c2:	210f      	movs	r1, #15
   175c4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
   175c6:	4b34      	ldr	r3, [pc, #208]	; (17698 <vTraceInitObjectPropertyTable+0x188>)
   175c8:	681b      	ldr	r3, [r3, #0]
   175ca:	2278      	movs	r2, #120	; 0x78
   175cc:	210f      	movs	r1, #15
   175ce:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
   175d0:	4b31      	ldr	r3, [pc, #196]	; (17698 <vTraceInitObjectPropertyTable+0x188>)
   175d2:	681b      	ldr	r3, [r3, #0]
   175d4:	227c      	movs	r2, #124	; 0x7c
   175d6:	2110      	movs	r1, #16
   175d8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
   175da:	4b2f      	ldr	r3, [pc, #188]	; (17698 <vTraceInitObjectPropertyTable+0x188>)
   175dc:	681b      	ldr	r3, [r3, #0]
   175de:	227d      	movs	r2, #125	; 0x7d
   175e0:	2110      	movs	r1, #16
   175e2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
   175e4:	4b2c      	ldr	r3, [pc, #176]	; (17698 <vTraceInitObjectPropertyTable+0x188>)
   175e6:	681b      	ldr	r3, [r3, #0]
   175e8:	227e      	movs	r2, #126	; 0x7e
   175ea:	2110      	movs	r1, #16
   175ec:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
   175ee:	4b2a      	ldr	r3, [pc, #168]	; (17698 <vTraceInitObjectPropertyTable+0x188>)
   175f0:	681b      	ldr	r3, [r3, #0]
   175f2:	227f      	movs	r2, #127	; 0x7f
   175f4:	2113      	movs	r1, #19
   175f6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
   175f8:	4b27      	ldr	r3, [pc, #156]	; (17698 <vTraceInitObjectPropertyTable+0x188>)
   175fa:	681b      	ldr	r3, [r3, #0]
   175fc:	2280      	movs	r2, #128	; 0x80
   175fe:	2111      	movs	r1, #17
   17600:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
   17602:	4b25      	ldr	r3, [pc, #148]	; (17698 <vTraceInitObjectPropertyTable+0x188>)
   17604:	681b      	ldr	r3, [r3, #0]
   17606:	2281      	movs	r2, #129	; 0x81
   17608:	2110      	movs	r1, #16
   1760a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
   1760c:	4b22      	ldr	r3, [pc, #136]	; (17698 <vTraceInitObjectPropertyTable+0x188>)
   1760e:	681b      	ldr	r3, [r3, #0]
   17610:	2282      	movs	r2, #130	; 0x82
   17612:	2113      	movs	r1, #19
   17614:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
   17616:	4b20      	ldr	r3, [pc, #128]	; (17698 <vTraceInitObjectPropertyTable+0x188>)
   17618:	681b      	ldr	r3, [r3, #0]
   1761a:	2283      	movs	r2, #131	; 0x83
   1761c:	2113      	movs	r1, #19
   1761e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
   17620:	4b1d      	ldr	r3, [pc, #116]	; (17698 <vTraceInitObjectPropertyTable+0x188>)
   17622:	681b      	ldr	r3, [r3, #0]
   17624:	2284      	movs	r2, #132	; 0x84
   17626:	2113      	movs	r1, #19
   17628:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
   1762a:	4b1b      	ldr	r3, [pc, #108]	; (17698 <vTraceInitObjectPropertyTable+0x188>)
   1762c:	681b      	ldr	r3, [r3, #0]
   1762e:	2288      	movs	r2, #136	; 0x88
   17630:	2100      	movs	r1, #0
   17632:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
   17634:	4b18      	ldr	r3, [pc, #96]	; (17698 <vTraceInitObjectPropertyTable+0x188>)
   17636:	681b      	ldr	r3, [r3, #0]
   17638:	228a      	movs	r2, #138	; 0x8a
   1763a:	21a0      	movs	r1, #160	; 0xa0
   1763c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
   1763e:	4b16      	ldr	r3, [pc, #88]	; (17698 <vTraceInitObjectPropertyTable+0x188>)
   17640:	681b      	ldr	r3, [r3, #0]
   17642:	228c      	movs	r2, #140	; 0x8c
   17644:	21a0      	movs	r1, #160	; 0xa0
   17646:	0049      	lsls	r1, r1, #1
   17648:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
   1764a:	4b13      	ldr	r3, [pc, #76]	; (17698 <vTraceInitObjectPropertyTable+0x188>)
   1764c:	681b      	ldr	r3, [r3, #0]
   1764e:	228e      	movs	r2, #142	; 0x8e
   17650:	21f0      	movs	r1, #240	; 0xf0
   17652:	0049      	lsls	r1, r1, #1
   17654:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
   17656:	4b10      	ldr	r3, [pc, #64]	; (17698 <vTraceInitObjectPropertyTable+0x188>)
   17658:	681b      	ldr	r3, [r3, #0]
   1765a:	2290      	movs	r2, #144	; 0x90
   1765c:	490f      	ldr	r1, [pc, #60]	; (1769c <vTraceInitObjectPropertyTable+0x18c>)
   1765e:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
   17660:	4b0d      	ldr	r3, [pc, #52]	; (17698 <vTraceInitObjectPropertyTable+0x188>)
   17662:	681b      	ldr	r3, [r3, #0]
   17664:	2292      	movs	r2, #146	; 0x92
   17666:	490e      	ldr	r1, [pc, #56]	; (176a0 <vTraceInitObjectPropertyTable+0x190>)
   17668:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
   1766a:	4b0b      	ldr	r3, [pc, #44]	; (17698 <vTraceInitObjectPropertyTable+0x188>)
   1766c:	681b      	ldr	r3, [r3, #0]
   1766e:	2294      	movs	r2, #148	; 0x94
   17670:	490c      	ldr	r1, [pc, #48]	; (176a4 <vTraceInitObjectPropertyTable+0x194>)
   17672:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
   17674:	4b08      	ldr	r3, [pc, #32]	; (17698 <vTraceInitObjectPropertyTable+0x188>)
   17676:	681b      	ldr	r3, [r3, #0]
   17678:	2296      	movs	r2, #150	; 0x96
   1767a:	490b      	ldr	r1, [pc, #44]	; (176a8 <vTraceInitObjectPropertyTable+0x198>)
   1767c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
   1767e:	4b06      	ldr	r3, [pc, #24]	; (17698 <vTraceInitObjectPropertyTable+0x188>)
   17680:	681b      	ldr	r3, [r3, #0]
   17682:	2298      	movs	r2, #152	; 0x98
   17684:	218c      	movs	r1, #140	; 0x8c
   17686:	00c9      	lsls	r1, r1, #3
   17688:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
   1768a:	4b03      	ldr	r3, [pc, #12]	; (17698 <vTraceInitObjectPropertyTable+0x188>)
   1768c:	681b      	ldr	r3, [r3, #0]
   1768e:	4a07      	ldr	r2, [pc, #28]	; (176ac <vTraceInitObjectPropertyTable+0x19c>)
   17690:	661a      	str	r2, [r3, #96]	; 0x60
}
   17692:	46c0      	nop			; (mov r8, r8)
   17694:	46bd      	mov	sp, r7
   17696:	bd80      	pop	{r7, pc}
   17698:	20000dc0 	.word	0x20000dc0
   1769c:	000002fd 	.word	0x000002fd
   176a0:	00000352 	.word	0x00000352
   176a4:	000003a2 	.word	0x000003a2
   176a8:	00000401 	.word	0x00000401
   176ac:	000004bf 	.word	0x000004bf

000176b0 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
   176b0:	b580      	push	{r7, lr}
   176b2:	af00      	add	r7, sp, #0
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
   176b4:	4b2e      	ldr	r3, [pc, #184]	; (17770 <vTraceInitObjectHandleStack+0xc0>)
   176b6:	2200      	movs	r2, #0
   176b8:	825a      	strh	r2, [r3, #18]
   176ba:	4b2d      	ldr	r3, [pc, #180]	; (17770 <vTraceInitObjectHandleStack+0xc0>)
   176bc:	8a5a      	ldrh	r2, [r3, #18]
   176be:	4b2c      	ldr	r3, [pc, #176]	; (17770 <vTraceInitObjectHandleStack+0xc0>)
   176c0:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
   176c2:	4b2b      	ldr	r3, [pc, #172]	; (17770 <vTraceInitObjectHandleStack+0xc0>)
   176c4:	220a      	movs	r2, #10
   176c6:	829a      	strh	r2, [r3, #20]
   176c8:	4b29      	ldr	r3, [pc, #164]	; (17770 <vTraceInitObjectHandleStack+0xc0>)
   176ca:	8a9a      	ldrh	r2, [r3, #20]
   176cc:	4b28      	ldr	r3, [pc, #160]	; (17770 <vTraceInitObjectHandleStack+0xc0>)
   176ce:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
   176d0:	4b27      	ldr	r3, [pc, #156]	; (17770 <vTraceInitObjectHandleStack+0xc0>)
   176d2:	2214      	movs	r2, #20
   176d4:	82da      	strh	r2, [r3, #22]
   176d6:	4b26      	ldr	r3, [pc, #152]	; (17770 <vTraceInitObjectHandleStack+0xc0>)
   176d8:	8ada      	ldrh	r2, [r3, #22]
   176da:	4b25      	ldr	r3, [pc, #148]	; (17770 <vTraceInitObjectHandleStack+0xc0>)
   176dc:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
   176de:	4b24      	ldr	r3, [pc, #144]	; (17770 <vTraceInitObjectHandleStack+0xc0>)
   176e0:	221e      	movs	r2, #30
   176e2:	831a      	strh	r2, [r3, #24]
   176e4:	4b22      	ldr	r3, [pc, #136]	; (17770 <vTraceInitObjectHandleStack+0xc0>)
   176e6:	8b1a      	ldrh	r2, [r3, #24]
   176e8:	4b21      	ldr	r3, [pc, #132]	; (17770 <vTraceInitObjectHandleStack+0xc0>)
   176ea:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
   176ec:	4b20      	ldr	r3, [pc, #128]	; (17770 <vTraceInitObjectHandleStack+0xc0>)
   176ee:	222d      	movs	r2, #45	; 0x2d
   176f0:	835a      	strh	r2, [r3, #26]
   176f2:	4b1f      	ldr	r3, [pc, #124]	; (17770 <vTraceInitObjectHandleStack+0xc0>)
   176f4:	8b5a      	ldrh	r2, [r3, #26]
   176f6:	4b1e      	ldr	r3, [pc, #120]	; (17770 <vTraceInitObjectHandleStack+0xc0>)
   176f8:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
   176fa:	4b1d      	ldr	r3, [pc, #116]	; (17770 <vTraceInitObjectHandleStack+0xc0>)
   176fc:	2232      	movs	r2, #50	; 0x32
   176fe:	839a      	strh	r2, [r3, #28]
   17700:	4b1b      	ldr	r3, [pc, #108]	; (17770 <vTraceInitObjectHandleStack+0xc0>)
   17702:	8b9a      	ldrh	r2, [r3, #28]
   17704:	4b1a      	ldr	r3, [pc, #104]	; (17770 <vTraceInitObjectHandleStack+0xc0>)
   17706:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
   17708:	4b19      	ldr	r3, [pc, #100]	; (17770 <vTraceInitObjectHandleStack+0xc0>)
   1770a:	2237      	movs	r2, #55	; 0x37
   1770c:	83da      	strh	r2, [r3, #30]
   1770e:	4b18      	ldr	r3, [pc, #96]	; (17770 <vTraceInitObjectHandleStack+0xc0>)
   17710:	8bda      	ldrh	r2, [r3, #30]
   17712:	4b17      	ldr	r3, [pc, #92]	; (17770 <vTraceInitObjectHandleStack+0xc0>)
   17714:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
   17716:	4b16      	ldr	r3, [pc, #88]	; (17770 <vTraceInitObjectHandleStack+0xc0>)
   17718:	223c      	movs	r2, #60	; 0x3c
   1771a:	841a      	strh	r2, [r3, #32]
   1771c:	4b14      	ldr	r3, [pc, #80]	; (17770 <vTraceInitObjectHandleStack+0xc0>)
   1771e:	8c1a      	ldrh	r2, [r3, #32]
   17720:	4b13      	ldr	r3, [pc, #76]	; (17770 <vTraceInitObjectHandleStack+0xc0>)
   17722:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
   17724:	4b12      	ldr	r3, [pc, #72]	; (17770 <vTraceInitObjectHandleStack+0xc0>)
   17726:	2241      	movs	r2, #65	; 0x41
   17728:	845a      	strh	r2, [r3, #34]	; 0x22
   1772a:	4b11      	ldr	r3, [pc, #68]	; (17770 <vTraceInitObjectHandleStack+0xc0>)
   1772c:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
   1772e:	4b10      	ldr	r3, [pc, #64]	; (17770 <vTraceInitObjectHandleStack+0xc0>)
   17730:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
   17732:	4b0f      	ldr	r3, [pc, #60]	; (17770 <vTraceInitObjectHandleStack+0xc0>)
   17734:	2209      	movs	r2, #9
   17736:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
   17738:	4b0d      	ldr	r3, [pc, #52]	; (17770 <vTraceInitObjectHandleStack+0xc0>)
   1773a:	2213      	movs	r2, #19
   1773c:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
   1773e:	4b0c      	ldr	r3, [pc, #48]	; (17770 <vTraceInitObjectHandleStack+0xc0>)
   17740:	221d      	movs	r2, #29
   17742:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
   17744:	4b0a      	ldr	r3, [pc, #40]	; (17770 <vTraceInitObjectHandleStack+0xc0>)
   17746:	222c      	movs	r2, #44	; 0x2c
   17748:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
   1774a:	4b09      	ldr	r3, [pc, #36]	; (17770 <vTraceInitObjectHandleStack+0xc0>)
   1774c:	2231      	movs	r2, #49	; 0x31
   1774e:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
   17750:	4b07      	ldr	r3, [pc, #28]	; (17770 <vTraceInitObjectHandleStack+0xc0>)
   17752:	2236      	movs	r2, #54	; 0x36
   17754:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
   17756:	4b06      	ldr	r3, [pc, #24]	; (17770 <vTraceInitObjectHandleStack+0xc0>)
   17758:	223b      	movs	r2, #59	; 0x3b
   1775a:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
   1775c:	4b04      	ldr	r3, [pc, #16]	; (17770 <vTraceInitObjectHandleStack+0xc0>)
   1775e:	2240      	movs	r2, #64	; 0x40
   17760:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
   17762:	4b03      	ldr	r3, [pc, #12]	; (17770 <vTraceInitObjectHandleStack+0xc0>)
   17764:	2245      	movs	r2, #69	; 0x45
   17766:	869a      	strh	r2, [r3, #52]	; 0x34
}
   17768:	46c0      	nop			; (mov r8, r8)
   1776a:	46bd      	mov	sp, r7
   1776c:	bd80      	pop	{r7, pc}
   1776e:	46c0      	nop			; (mov r8, r8)
   17770:	20000d30 	.word	0x20000d30

00017774 <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
   17774:	b580      	push	{r7, lr}
   17776:	b082      	sub	sp, #8
   17778:	af00      	add	r7, sp, #0
   1777a:	0002      	movs	r2, r0
   1777c:	1dfb      	adds	r3, r7, #7
   1777e:	701a      	strb	r2, [r3, #0]
	switch(objectclass)
   17780:	1dfb      	adds	r3, r7, #7
   17782:	781b      	ldrb	r3, [r3, #0]
   17784:	2b08      	cmp	r3, #8
   17786:	d816      	bhi.n	177b6 <pszTraceGetErrorNotEnoughHandles+0x42>
   17788:	009a      	lsls	r2, r3, #2
   1778a:	4b0d      	ldr	r3, [pc, #52]	; (177c0 <pszTraceGetErrorNotEnoughHandles+0x4c>)
   1778c:	18d3      	adds	r3, r2, r3
   1778e:	681b      	ldr	r3, [r3, #0]
   17790:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
   17792:	4b0c      	ldr	r3, [pc, #48]	; (177c4 <pszTraceGetErrorNotEnoughHandles+0x50>)
   17794:	e010      	b.n	177b8 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
   17796:	4b0c      	ldr	r3, [pc, #48]	; (177c8 <pszTraceGetErrorNotEnoughHandles+0x54>)
   17798:	e00e      	b.n	177b8 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
   1779a:	4b0c      	ldr	r3, [pc, #48]	; (177cc <pszTraceGetErrorNotEnoughHandles+0x58>)
   1779c:	e00c      	b.n	177b8 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
   1779e:	4b0c      	ldr	r3, [pc, #48]	; (177d0 <pszTraceGetErrorNotEnoughHandles+0x5c>)
   177a0:	e00a      	b.n	177b8 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
   177a2:	4b0c      	ldr	r3, [pc, #48]	; (177d4 <pszTraceGetErrorNotEnoughHandles+0x60>)
   177a4:	e008      	b.n	177b8 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
   177a6:	4b0c      	ldr	r3, [pc, #48]	; (177d8 <pszTraceGetErrorNotEnoughHandles+0x64>)
   177a8:	e006      	b.n	177b8 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
   177aa:	4b0c      	ldr	r3, [pc, #48]	; (177dc <pszTraceGetErrorNotEnoughHandles+0x68>)
   177ac:	e004      	b.n	177b8 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
   177ae:	4b0c      	ldr	r3, [pc, #48]	; (177e0 <pszTraceGetErrorNotEnoughHandles+0x6c>)
   177b0:	e002      	b.n	177b8 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
   177b2:	4b0c      	ldr	r3, [pc, #48]	; (177e4 <pszTraceGetErrorNotEnoughHandles+0x70>)
   177b4:	e000      	b.n	177b8 <pszTraceGetErrorNotEnoughHandles+0x44>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
   177b6:	4b0c      	ldr	r3, [pc, #48]	; (177e8 <pszTraceGetErrorNotEnoughHandles+0x74>)
	}
}
   177b8:	0018      	movs	r0, r3
   177ba:	46bd      	mov	sp, r7
   177bc:	b002      	add	sp, #8
   177be:	bd80      	pop	{r7, pc}
   177c0:	00036c5c 	.word	0x00036c5c
   177c4:	0003695c 	.word	0x0003695c
   177c8:	000369a4 	.word	0x000369a4
   177cc:	000369ec 	.word	0x000369ec
   177d0:	00036a40 	.word	0x00036a40
   177d4:	00036a8c 	.word	0x00036a8c
   177d8:	00036ad8 	.word	0x00036ad8
   177dc:	00036b24 	.word	0x00036b24
   177e0:	00036b78 	.word	0x00036b78
   177e4:	00036bd0 	.word	0x00036bd0
   177e8:	00036c2c 	.word	0x00036c2c

000177ec <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
   177ec:	b590      	push	{r4, r7, lr}
   177ee:	b087      	sub	sp, #28
   177f0:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
   177f2:	2317      	movs	r3, #23
   177f4:	18fb      	adds	r3, r7, r3
   177f6:	2200      	movs	r2, #0
   177f8:	701a      	strb	r2, [r3, #0]

	if (RecorderDataPtr == NULL)
   177fa:	4b36      	ldr	r3, [pc, #216]	; (178d4 <uiTraceStart+0xe8>)
   177fc:	681b      	ldr	r3, [r3, #0]
   177fe:	2b00      	cmp	r3, #0
   17800:	d10b      	bne.n	1781a <uiTraceStart+0x2e>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
   17802:	4b34      	ldr	r3, [pc, #208]	; (178d4 <uiTraceStart+0xe8>)
   17804:	681b      	ldr	r3, [r3, #0]
   17806:	2b00      	cmp	r3, #0
   17808:	d105      	bne.n	17816 <uiTraceStart+0x2a>
   1780a:	4b33      	ldr	r3, [pc, #204]	; (178d8 <uiTraceStart+0xec>)
   1780c:	0018      	movs	r0, r3
   1780e:	4b33      	ldr	r3, [pc, #204]	; (178dc <uiTraceStart+0xf0>)
   17810:	4798      	blx	r3
   17812:	2300      	movs	r3, #0
   17814:	e059      	b.n	178ca <uiTraceStart+0xde>
		return 0;
   17816:	2300      	movs	r3, #0
   17818:	e057      	b.n	178ca <uiTraceStart+0xde>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
   1781a:	4b2e      	ldr	r3, [pc, #184]	; (178d4 <uiTraceStart+0xe8>)
   1781c:	681b      	ldr	r3, [r3, #0]
   1781e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   17820:	2b01      	cmp	r3, #1
   17822:	d101      	bne.n	17828 <uiTraceStart+0x3c>
		return 1; /* Already running */
   17824:	2301      	movs	r3, #1
   17826:	e050      	b.n	178ca <uiTraceStart+0xde>

	if (traceErrorMessage == NULL)
   17828:	4b2d      	ldr	r3, [pc, #180]	; (178e0 <uiTraceStart+0xf4>)
   1782a:	681b      	ldr	r3, [r3, #0]
   1782c:	2b00      	cmp	r3, #0
   1782e:	d149      	bne.n	178c4 <uiTraceStart+0xd8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   17830:	f3ef 8310 	mrs	r3, PRIMASK
   17834:	60bb      	str	r3, [r7, #8]
  return(result);
   17836:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
   17838:	613b      	str	r3, [r7, #16]
   1783a:	2301      	movs	r3, #1
   1783c:	60fb      	str	r3, [r7, #12]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1783e:	68fb      	ldr	r3, [r7, #12]
   17840:	f383 8810 	msr	PRIMASK, r3
   17844:	4b27      	ldr	r3, [pc, #156]	; (178e4 <uiTraceStart+0xf8>)
   17846:	681b      	ldr	r3, [r3, #0]
   17848:	1c5a      	adds	r2, r3, #1
   1784a:	4b26      	ldr	r3, [pc, #152]	; (178e4 <uiTraceStart+0xf8>)
   1784c:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
   1784e:	4b21      	ldr	r3, [pc, #132]	; (178d4 <uiTraceStart+0xe8>)
   17850:	681b      	ldr	r3, [r3, #0]
   17852:	2201      	movs	r2, #1
   17854:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
   17856:	4b24      	ldr	r3, [pc, #144]	; (178e8 <uiTraceStart+0xfc>)
   17858:	4798      	blx	r3
   1785a:	0003      	movs	r3, r0
   1785c:	0018      	movs	r0, r3
   1785e:	4b23      	ldr	r3, [pc, #140]	; (178ec <uiTraceStart+0x100>)
   17860:	4798      	blx	r3
   17862:	0003      	movs	r3, r0
   17864:	001a      	movs	r2, r3
   17866:	2317      	movs	r3, #23
   17868:	18fb      	adds	r3, r7, r3
   1786a:	701a      	strb	r2, [r3, #0]
		if (handle == 0)
   1786c:	2317      	movs	r3, #23
   1786e:	18fb      	adds	r3, r7, r3
   17870:	781b      	ldrb	r3, [r3, #0]
   17872:	2b00      	cmp	r3, #0
   17874:	d116      	bne.n	178a4 <uiTraceStart+0xb8>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
   17876:	2317      	movs	r3, #23
   17878:	18fc      	adds	r4, r7, r3
   1787a:	2003      	movs	r0, #3
   1787c:	4b1c      	ldr	r3, [pc, #112]	; (178f0 <uiTraceStart+0x104>)
   1787e:	4798      	blx	r3
   17880:	0003      	movs	r3, r0
   17882:	7023      	strb	r3, [r4, #0]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
   17884:	4a1b      	ldr	r2, [pc, #108]	; (178f4 <uiTraceStart+0x108>)
   17886:	2317      	movs	r3, #23
   17888:	18fb      	adds	r3, r7, r3
   1788a:	781b      	ldrb	r3, [r3, #0]
   1788c:	0019      	movs	r1, r3
   1788e:	2003      	movs	r0, #3
   17890:	4b19      	ldr	r3, [pc, #100]	; (178f8 <uiTraceStart+0x10c>)
   17892:	4798      	blx	r3

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
   17894:	2317      	movs	r3, #23
   17896:	18fb      	adds	r3, r7, r3
   17898:	781b      	ldrb	r3, [r3, #0]
   1789a:	2200      	movs	r2, #0
   1789c:	0019      	movs	r1, r3
   1789e:	2003      	movs	r0, #3
   178a0:	4b16      	ldr	r3, [pc, #88]	; (178fc <uiTraceStart+0x110>)
   178a2:	4798      	blx	r3
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
   178a4:	2317      	movs	r3, #23
   178a6:	18fb      	adds	r3, r7, r3
   178a8:	781b      	ldrb	r3, [r3, #0]
   178aa:	0018      	movs	r0, r3
   178ac:	4b14      	ldr	r3, [pc, #80]	; (17900 <uiTraceStart+0x114>)
   178ae:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
   178b0:	4b0c      	ldr	r3, [pc, #48]	; (178e4 <uiTraceStart+0xf8>)
   178b2:	681b      	ldr	r3, [r3, #0]
   178b4:	1e5a      	subs	r2, r3, #1
   178b6:	4b0b      	ldr	r3, [pc, #44]	; (178e4 <uiTraceStart+0xf8>)
   178b8:	601a      	str	r2, [r3, #0]
   178ba:	693b      	ldr	r3, [r7, #16]
   178bc:	607b      	str	r3, [r7, #4]
   178be:	687b      	ldr	r3, [r7, #4]
   178c0:	f383 8810 	msr	PRIMASK, r3
	}

	return RecorderDataPtr->recorderActive;
   178c4:	4b03      	ldr	r3, [pc, #12]	; (178d4 <uiTraceStart+0xe8>)
   178c6:	681b      	ldr	r3, [r3, #0]
   178c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   178ca:	0018      	movs	r0, r3
   178cc:	46bd      	mov	sp, r7
   178ce:	b007      	add	sp, #28
   178d0:	bd90      	pop	{r4, r7, pc}
   178d2:	46c0      	nop			; (mov r8, r8)
   178d4:	20000dc0 	.word	0x20000dc0
   178d8:	00036c80 	.word	0x00036c80
   178dc:	00018a55 	.word	0x00018a55
   178e0:	20000d20 	.word	0x20000d20
   178e4:	20000d18 	.word	0x20000d18
   178e8:	00017455 	.word	0x00017455
   178ec:	00017199 	.word	0x00017199
   178f0:	00018739 	.word	0x00018739
   178f4:	00036cc4 	.word	0x00036cc4
   178f8:	00018969 	.word	0x00018969
   178fc:	000180cd 	.word	0x000180cd
   17900:	00017fb5 	.word	0x00017fb5

00017904 <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
   17904:	b580      	push	{r7, lr}
   17906:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
   17908:	4b02      	ldr	r3, [pc, #8]	; (17914 <vTraceStart+0x10>)
   1790a:	4798      	blx	r3
}
   1790c:	46c0      	nop			; (mov r8, r8)
   1790e:	46bd      	mov	sp, r7
   17910:	bd80      	pop	{r7, pc}
   17912:	46c0      	nop			; (mov r8, r8)
   17914:	000177ed 	.word	0x000177ed

00017918 <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
   17918:	b580      	push	{r7, lr}
   1791a:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   1791c:	4b08      	ldr	r3, [pc, #32]	; (17940 <vTraceStop+0x28>)
   1791e:	681b      	ldr	r3, [r3, #0]
   17920:	2b00      	cmp	r3, #0
   17922:	d003      	beq.n	1792c <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
   17924:	4b06      	ldr	r3, [pc, #24]	; (17940 <vTraceStop+0x28>)
   17926:	681b      	ldr	r3, [r3, #0]
   17928:	2200      	movs	r2, #0
   1792a:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
   1792c:	4b05      	ldr	r3, [pc, #20]	; (17944 <vTraceStop+0x2c>)
   1792e:	681b      	ldr	r3, [r3, #0]
   17930:	2b00      	cmp	r3, #0
   17932:	d002      	beq.n	1793a <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
   17934:	4b03      	ldr	r3, [pc, #12]	; (17944 <vTraceStop+0x2c>)
   17936:	681b      	ldr	r3, [r3, #0]
   17938:	4798      	blx	r3
	}
}
   1793a:	46c0      	nop			; (mov r8, r8)
   1793c:	46bd      	mov	sp, r7
   1793e:	bd80      	pop	{r7, pc}
   17940:	20000dc0 	.word	0x20000dc0
   17944:	20000d28 	.word	0x20000d28

00017948 <xTraceIsRecordingEnabled>:
/*******************************************************************************
* xTraceIsRecordingEnabled
* Returns true (1) if the recorder is enabled (i.e. is recording), otherwise 0.
******************************************************************************/
int xTraceIsRecordingEnabled(void)
{
   17948:	b580      	push	{r7, lr}
   1794a:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   1794c:	4b05      	ldr	r3, [pc, #20]	; (17964 <xTraceIsRecordingEnabled+0x1c>)
   1794e:	681b      	ldr	r3, [r3, #0]
   17950:	2b00      	cmp	r3, #0
   17952:	d003      	beq.n	1795c <xTraceIsRecordingEnabled+0x14>
	{
		return (int)RecorderDataPtr->recorderActive;
   17954:	4b03      	ldr	r3, [pc, #12]	; (17964 <xTraceIsRecordingEnabled+0x1c>)
   17956:	681b      	ldr	r3, [r3, #0]
   17958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1795a:	e000      	b.n	1795e <xTraceIsRecordingEnabled+0x16>
	}
	else
	{
		return 0;
   1795c:	2300      	movs	r3, #0
	}
}
   1795e:	0018      	movs	r0, r3
   17960:	46bd      	mov	sp, r7
   17962:	bd80      	pop	{r7, pc}
   17964:	20000dc0 	.word	0x20000dc0

00017968 <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
   17968:	b590      	push	{r4, r7, lr}
   1796a:	b089      	sub	sp, #36	; 0x24
   1796c:	af00      	add	r7, sp, #0
   1796e:	0002      	movs	r2, r0
   17970:	1dfb      	adds	r3, r7, #7
   17972:	701a      	strb	r2, [r3, #0]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
   17974:	1dfb      	adds	r3, r7, #7
   17976:	781b      	ldrb	r3, [r3, #0]
   17978:	2b00      	cmp	r3, #0
   1797a:	d057      	beq.n	17a2c <prvTraceStoreTaskReady+0xc4>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
   1797c:	4b2e      	ldr	r3, [pc, #184]	; (17a38 <prvTraceStoreTaskReady+0xd0>)
   1797e:	681b      	ldr	r3, [r3, #0]
   17980:	2b00      	cmp	r3, #0
   17982:	d055      	beq.n	17a30 <prvTraceStoreTaskReady+0xc8>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
   17984:	1dfb      	adds	r3, r7, #7
   17986:	781b      	ldrb	r3, [r3, #0]
   17988:	2b0f      	cmp	r3, #15
   1798a:	d904      	bls.n	17996 <prvTraceStoreTaskReady+0x2e>
   1798c:	4b2b      	ldr	r3, [pc, #172]	; (17a3c <prvTraceStoreTaskReady+0xd4>)
   1798e:	0018      	movs	r0, r3
   17990:	4b2b      	ldr	r3, [pc, #172]	; (17a40 <prvTraceStoreTaskReady+0xd8>)
   17992:	4798      	blx	r3
   17994:	e04d      	b.n	17a32 <prvTraceStoreTaskReady+0xca>

	if (recorder_busy)
   17996:	4b2b      	ldr	r3, [pc, #172]	; (17a44 <prvTraceStoreTaskReady+0xdc>)
   17998:	681b      	ldr	r3, [r3, #0]
   1799a:	2b00      	cmp	r3, #0
   1799c:	d004      	beq.n	179a8 <prvTraceStoreTaskReady+0x40>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
   1799e:	4b2a      	ldr	r3, [pc, #168]	; (17a48 <prvTraceStoreTaskReady+0xe0>)
   179a0:	0018      	movs	r0, r3
   179a2:	4b27      	ldr	r3, [pc, #156]	; (17a40 <prvTraceStoreTaskReady+0xd8>)
   179a4:	4798      	blx	r3
		return;
   179a6:	e044      	b.n	17a32 <prvTraceStoreTaskReady+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   179a8:	f3ef 8310 	mrs	r3, PRIMASK
   179ac:	60fb      	str	r3, [r7, #12]
  return(result);
   179ae:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
   179b0:	61fb      	str	r3, [r7, #28]
   179b2:	2301      	movs	r3, #1
   179b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   179b6:	693b      	ldr	r3, [r7, #16]
   179b8:	f383 8810 	msr	PRIMASK, r3
   179bc:	4b21      	ldr	r3, [pc, #132]	; (17a44 <prvTraceStoreTaskReady+0xdc>)
   179be:	681b      	ldr	r3, [r3, #0]
   179c0:	1c5a      	adds	r2, r3, #1
   179c2:	4b20      	ldr	r3, [pc, #128]	; (17a44 <prvTraceStoreTaskReady+0xdc>)
   179c4:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
   179c6:	4b21      	ldr	r3, [pc, #132]	; (17a4c <prvTraceStoreTaskReady+0xe4>)
   179c8:	681b      	ldr	r3, [r3, #0]
   179ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   179cc:	2b00      	cmp	r3, #0
   179ce:	d022      	beq.n	17a16 <prvTraceStoreTaskReady+0xae>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   179d0:	231a      	movs	r3, #26
   179d2:	18fc      	adds	r4, r7, r3
   179d4:	4b1e      	ldr	r3, [pc, #120]	; (17a50 <prvTraceStoreTaskReady+0xe8>)
   179d6:	0018      	movs	r0, r3
   179d8:	4b1e      	ldr	r3, [pc, #120]	; (17a54 <prvTraceStoreTaskReady+0xec>)
   179da:	4798      	blx	r3
   179dc:	0003      	movs	r3, r0
   179de:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle(handle);
   179e0:	2319      	movs	r3, #25
   179e2:	18fb      	adds	r3, r7, r3
   179e4:	1dfa      	adds	r2, r7, #7
   179e6:	7812      	ldrb	r2, [r2, #0]
   179e8:	701a      	strb	r2, [r3, #0]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
   179ea:	4b1b      	ldr	r3, [pc, #108]	; (17a58 <prvTraceStoreTaskReady+0xf0>)
   179ec:	4798      	blx	r3
   179ee:	0003      	movs	r3, r0
   179f0:	617b      	str	r3, [r7, #20]
		if (tr != NULL)
   179f2:	697b      	ldr	r3, [r7, #20]
   179f4:	2b00      	cmp	r3, #0
   179f6:	d00e      	beq.n	17a16 <prvTraceStoreTaskReady+0xae>
		{
			tr->type = DIV_TASK_READY;
   179f8:	697b      	ldr	r3, [r7, #20]
   179fa:	2202      	movs	r2, #2
   179fc:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
   179fe:	697b      	ldr	r3, [r7, #20]
   17a00:	221a      	movs	r2, #26
   17a02:	18ba      	adds	r2, r7, r2
   17a04:	8812      	ldrh	r2, [r2, #0]
   17a06:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
   17a08:	697b      	ldr	r3, [r7, #20]
   17a0a:	2219      	movs	r2, #25
   17a0c:	18ba      	adds	r2, r7, r2
   17a0e:	7812      	ldrb	r2, [r2, #0]
   17a10:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   17a12:	4b12      	ldr	r3, [pc, #72]	; (17a5c <prvTraceStoreTaskReady+0xf4>)
   17a14:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   17a16:	4b0b      	ldr	r3, [pc, #44]	; (17a44 <prvTraceStoreTaskReady+0xdc>)
   17a18:	681b      	ldr	r3, [r3, #0]
   17a1a:	1e5a      	subs	r2, r3, #1
   17a1c:	4b09      	ldr	r3, [pc, #36]	; (17a44 <prvTraceStoreTaskReady+0xdc>)
   17a1e:	601a      	str	r2, [r3, #0]
   17a20:	69fb      	ldr	r3, [r7, #28]
   17a22:	60bb      	str	r3, [r7, #8]
   17a24:	68bb      	ldr	r3, [r7, #8]
   17a26:	f383 8810 	msr	PRIMASK, r3
   17a2a:	e002      	b.n	17a32 <prvTraceStoreTaskReady+0xca>
		return;
   17a2c:	46c0      	nop			; (mov r8, r8)
   17a2e:	e000      	b.n	17a32 <prvTraceStoreTaskReady+0xca>
		return;
   17a30:	46c0      	nop			; (mov r8, r8)
}
   17a32:	46bd      	mov	sp, r7
   17a34:	b009      	add	sp, #36	; 0x24
   17a36:	bd90      	pop	{r4, r7, pc}
   17a38:	200000fc 	.word	0x200000fc
   17a3c:	0003702c 	.word	0x0003702c
   17a40:	00018a55 	.word	0x00018a55
   17a44:	20000d18 	.word	0x20000d18
   17a48:	0003706c 	.word	0x0003706c
   17a4c:	20000dc0 	.word	0x20000dc0
   17a50:	0000ffff 	.word	0x0000ffff
   17a54:	00018c69 	.word	0x00018c69
   17a58:	0001860d 	.word	0x0001860d
   17a5c:	00018c11 	.word	0x00018c11

00017a60 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
   17a60:	b580      	push	{r7, lr}
   17a62:	b08e      	sub	sp, #56	; 0x38
   17a64:	af00      	add	r7, sp, #0
   17a66:	60f8      	str	r0, [r7, #12]
   17a68:	60b9      	str	r1, [r7, #8]
   17a6a:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
   17a6c:	4b48      	ldr	r3, [pc, #288]	; (17b90 <vTraceStoreMemMangEvent+0x130>)
   17a6e:	681b      	ldr	r3, [r3, #0]
   17a70:	2b00      	cmp	r3, #0
   17a72:	d100      	bne.n	17a76 <vTraceStoreMemMangEvent+0x16>
   17a74:	e088      	b.n	17b88 <vTraceStoreMemMangEvent+0x128>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
   17a76:	687b      	ldr	r3, [r7, #4]
   17a78:	2b00      	cmp	r3, #0
   17a7a:	da03      	bge.n	17a84 <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
   17a7c:	687b      	ldr	r3, [r7, #4]
   17a7e:	425b      	negs	r3, r3
   17a80:	637b      	str	r3, [r7, #52]	; 0x34
   17a82:	e001      	b.n	17a88 <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
   17a84:	687b      	ldr	r3, [r7, #4]
   17a86:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   17a88:	f3ef 8310 	mrs	r3, PRIMASK
   17a8c:	61bb      	str	r3, [r7, #24]
  return(result);
   17a8e:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
   17a90:	633b      	str	r3, [r7, #48]	; 0x30
   17a92:	2301      	movs	r3, #1
   17a94:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   17a96:	69fb      	ldr	r3, [r7, #28]
   17a98:	f383 8810 	msr	PRIMASK, r3
   17a9c:	4b3d      	ldr	r3, [pc, #244]	; (17b94 <vTraceStoreMemMangEvent+0x134>)
   17a9e:	681b      	ldr	r3, [r3, #0]
   17aa0:	1c5a      	adds	r2, r3, #1
   17aa2:	4b3c      	ldr	r3, [pc, #240]	; (17b94 <vTraceStoreMemMangEvent+0x134>)
   17aa4:	601a      	str	r2, [r3, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
   17aa6:	68bb      	ldr	r3, [r7, #8]
   17aa8:	2b00      	cmp	r3, #0
   17aaa:	d005      	beq.n	17ab8 <vTraceStoreMemMangEvent+0x58>
		heapMemUsage += (uint32_t)signed_size;
   17aac:	4b3a      	ldr	r3, [pc, #232]	; (17b98 <vTraceStoreMemMangEvent+0x138>)
   17aae:	681a      	ldr	r2, [r3, #0]
   17ab0:	687b      	ldr	r3, [r7, #4]
   17ab2:	18d2      	adds	r2, r2, r3
   17ab4:	4b38      	ldr	r3, [pc, #224]	; (17b98 <vTraceStoreMemMangEvent+0x138>)
   17ab6:	601a      	str	r2, [r3, #0]
	
	if (RecorderDataPtr->recorderActive)
   17ab8:	4b35      	ldr	r3, [pc, #212]	; (17b90 <vTraceStoreMemMangEvent+0x130>)
   17aba:	681b      	ldr	r3, [r3, #0]
   17abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   17abe:	2b00      	cmp	r3, #0
   17ac0:	d057      	beq.n	17b72 <vTraceStoreMemMangEvent+0x112>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
   17ac2:	20ff      	movs	r0, #255	; 0xff
   17ac4:	4b35      	ldr	r3, [pc, #212]	; (17b9c <vTraceStoreMemMangEvent+0x13c>)
   17ac6:	4798      	blx	r3
   17ac8:	0003      	movs	r3, r0
   17aca:	001a      	movs	r2, r3
   17acc:	232f      	movs	r3, #47	; 0x2f
   17ace:	18fb      	adds	r3, r7, r3
   17ad0:	701a      	strb	r2, [r3, #0]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
   17ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17ad4:	4a32      	ldr	r2, [pc, #200]	; (17ba0 <vTraceStoreMemMangEvent+0x140>)
   17ad6:	0019      	movs	r1, r3
   17ad8:	0010      	movs	r0, r2
   17ada:	4b32      	ldr	r3, [pc, #200]	; (17ba4 <vTraceStoreMemMangEvent+0x144>)
   17adc:	4798      	blx	r3
   17ade:	0002      	movs	r2, r0
   17ae0:	232c      	movs	r3, #44	; 0x2c
   17ae2:	18fb      	adds	r3, r7, r3
   17ae4:	801a      	strh	r2, [r3, #0]
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
   17ae6:	4b30      	ldr	r3, [pc, #192]	; (17ba8 <vTraceStoreMemMangEvent+0x148>)
   17ae8:	4798      	blx	r3
   17aea:	0003      	movs	r3, r0
   17aec:	62bb      	str	r3, [r7, #40]	; 0x28

		if (ms != NULL)
   17aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17af0:	2b00      	cmp	r3, #0
   17af2:	d03e      	beq.n	17b72 <vTraceStoreMemMangEvent+0x112>
		{
			ms->dts = dts1;
   17af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17af6:	222f      	movs	r2, #47	; 0x2f
   17af8:	18ba      	adds	r2, r7, r2
   17afa:	7812      	ldrb	r2, [r2, #0]
   17afc:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
   17afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17b00:	2200      	movs	r2, #0
   17b02:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
   17b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17b06:	222c      	movs	r2, #44	; 0x2c
   17b08:	18ba      	adds	r2, r7, r2
   17b0a:	8812      	ldrh	r2, [r2, #0]
   17b0c:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   17b0e:	4b27      	ldr	r3, [pc, #156]	; (17bac <vTraceStoreMemMangEvent+0x14c>)
   17b10:	4798      	blx	r3
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
   17b12:	68bb      	ldr	r3, [r7, #8]
   17b14:	4a22      	ldr	r2, [pc, #136]	; (17ba0 <vTraceStoreMemMangEvent+0x140>)
   17b16:	0019      	movs	r1, r3
   17b18:	0010      	movs	r0, r2
   17b1a:	4b22      	ldr	r3, [pc, #136]	; (17ba4 <vTraceStoreMemMangEvent+0x144>)
   17b1c:	4798      	blx	r3
   17b1e:	0002      	movs	r2, r0
   17b20:	2326      	movs	r3, #38	; 0x26
   17b22:	18fb      	adds	r3, r7, r3
   17b24:	801a      	strh	r2, [r3, #0]
				addr_high = 0;
   17b26:	2325      	movs	r3, #37	; 0x25
   17b28:	18fb      	adds	r3, r7, r3
   17b2a:	2200      	movs	r2, #0
   17b2c:	701a      	strb	r2, [r3, #0]
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
   17b2e:	4b1e      	ldr	r3, [pc, #120]	; (17ba8 <vTraceStoreMemMangEvent+0x148>)
   17b30:	4798      	blx	r3
   17b32:	0003      	movs	r3, r0
   17b34:	623b      	str	r3, [r7, #32]
			if (ma != NULL)
   17b36:	6a3b      	ldr	r3, [r7, #32]
   17b38:	2b00      	cmp	r3, #0
   17b3a:	d01a      	beq.n	17b72 <vTraceStoreMemMangEvent+0x112>
			{
				ma->addr_low = addr_low;
   17b3c:	6a3b      	ldr	r3, [r7, #32]
   17b3e:	2226      	movs	r2, #38	; 0x26
   17b40:	18ba      	adds	r2, r7, r2
   17b42:	8812      	ldrh	r2, [r2, #0]
   17b44:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
   17b46:	6a3b      	ldr	r3, [r7, #32]
   17b48:	2225      	movs	r2, #37	; 0x25
   17b4a:	18ba      	adds	r2, r7, r2
   17b4c:	7812      	ldrb	r2, [r2, #0]
   17b4e:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
   17b50:	68fb      	ldr	r3, [r7, #12]
   17b52:	b2db      	uxtb	r3, r3
   17b54:	3301      	adds	r3, #1
   17b56:	b2da      	uxtb	r2, r3
   17b58:	6a3b      	ldr	r3, [r7, #32]
   17b5a:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;
   17b5c:	68fb      	ldr	r3, [r7, #12]
   17b5e:	b2da      	uxtb	r2, r3
   17b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17b62:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();					
   17b64:	4b11      	ldr	r3, [pc, #68]	; (17bac <vTraceStoreMemMangEvent+0x14c>)
   17b66:	4798      	blx	r3
				RecorderDataPtr->heapMemUsage = heapMemUsage;
   17b68:	4b09      	ldr	r3, [pc, #36]	; (17b90 <vTraceStoreMemMangEvent+0x130>)
   17b6a:	681b      	ldr	r3, [r3, #0]
   17b6c:	4a0a      	ldr	r2, [pc, #40]	; (17b98 <vTraceStoreMemMangEvent+0x138>)
   17b6e:	6812      	ldr	r2, [r2, #0]
   17b70:	651a      	str	r2, [r3, #80]	; 0x50
			}
		}
	}
	trcCRITICAL_SECTION_END();
   17b72:	4b08      	ldr	r3, [pc, #32]	; (17b94 <vTraceStoreMemMangEvent+0x134>)
   17b74:	681b      	ldr	r3, [r3, #0]
   17b76:	1e5a      	subs	r2, r3, #1
   17b78:	4b06      	ldr	r3, [pc, #24]	; (17b94 <vTraceStoreMemMangEvent+0x134>)
   17b7a:	601a      	str	r2, [r3, #0]
   17b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17b7e:	617b      	str	r3, [r7, #20]
   17b80:	697b      	ldr	r3, [r7, #20]
   17b82:	f383 8810 	msr	PRIMASK, r3
   17b86:	e000      	b.n	17b8a <vTraceStoreMemMangEvent+0x12a>
		return;
   17b88:	46c0      	nop			; (mov r8, r8)
}
   17b8a:	46bd      	mov	sp, r7
   17b8c:	b00e      	add	sp, #56	; 0x38
   17b8e:	bd80      	pop	{r7, pc}
   17b90:	20000dc0 	.word	0x20000dc0
   17b94:	20000d18 	.word	0x20000d18
   17b98:	20000d2c 	.word	0x20000d2c
   17b9c:	00018c69 	.word	0x00018c69
   17ba0:	0000ffff 	.word	0x0000ffff
   17ba4:	00017e2d 	.word	0x00017e2d
   17ba8:	0001860d 	.word	0x0001860d
   17bac:	00018c11 	.word	0x00018c11

00017bb0 <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
   17bb0:	b590      	push	{r4, r7, lr}
   17bb2:	b08b      	sub	sp, #44	; 0x2c
   17bb4:	af00      	add	r7, sp, #0
   17bb6:	60f8      	str	r0, [r7, #12]
   17bb8:	607a      	str	r2, [r7, #4]
   17bba:	230b      	movs	r3, #11
   17bbc:	18fb      	adds	r3, r7, r3
   17bbe:	1c0a      	adds	r2, r1, #0
   17bc0:	701a      	strb	r2, [r3, #0]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
   17bc2:	68fb      	ldr	r3, [r7, #12]
   17bc4:	2bfe      	cmp	r3, #254	; 0xfe
   17bc6:	d904      	bls.n	17bd2 <prvTraceStoreKernelCall+0x22>
   17bc8:	4b39      	ldr	r3, [pc, #228]	; (17cb0 <prvTraceStoreKernelCall+0x100>)
   17bca:	0018      	movs	r0, r3
   17bcc:	4b39      	ldr	r3, [pc, #228]	; (17cb4 <prvTraceStoreKernelCall+0x104>)
   17bce:	4798      	blx	r3
   17bd0:	e06b      	b.n	17caa <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   17bd2:	230b      	movs	r3, #11
   17bd4:	18fb      	adds	r3, r7, r3
   17bd6:	781b      	ldrb	r3, [r3, #0]
   17bd8:	2b08      	cmp	r3, #8
   17bda:	d904      	bls.n	17be6 <prvTraceStoreKernelCall+0x36>
   17bdc:	4b36      	ldr	r3, [pc, #216]	; (17cb8 <prvTraceStoreKernelCall+0x108>)
   17bde:	0018      	movs	r0, r3
   17be0:	4b34      	ldr	r3, [pc, #208]	; (17cb4 <prvTraceStoreKernelCall+0x104>)
   17be2:	4798      	blx	r3
   17be4:	e061      	b.n	17caa <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
   17be6:	4b35      	ldr	r3, [pc, #212]	; (17cbc <prvTraceStoreKernelCall+0x10c>)
   17be8:	681a      	ldr	r2, [r3, #0]
   17bea:	230b      	movs	r3, #11
   17bec:	18fb      	adds	r3, r7, r3
   17bee:	781b      	ldrb	r3, [r3, #0]
   17bf0:	2164      	movs	r1, #100	; 0x64
   17bf2:	18d3      	adds	r3, r2, r3
   17bf4:	185b      	adds	r3, r3, r1
   17bf6:	781b      	ldrb	r3, [r3, #0]
   17bf8:	001a      	movs	r2, r3
   17bfa:	687b      	ldr	r3, [r7, #4]
   17bfc:	429a      	cmp	r2, r3
   17bfe:	d204      	bcs.n	17c0a <prvTraceStoreKernelCall+0x5a>
   17c00:	4b2f      	ldr	r3, [pc, #188]	; (17cc0 <prvTraceStoreKernelCall+0x110>)
   17c02:	0018      	movs	r0, r3
   17c04:	4b2b      	ldr	r3, [pc, #172]	; (17cb4 <prvTraceStoreKernelCall+0x104>)
   17c06:	4798      	blx	r3
   17c08:	e04f      	b.n	17caa <prvTraceStoreKernelCall+0xfa>

	if (recorder_busy)
   17c0a:	4b2e      	ldr	r3, [pc, #184]	; (17cc4 <prvTraceStoreKernelCall+0x114>)
   17c0c:	681b      	ldr	r3, [r3, #0]
   17c0e:	2b00      	cmp	r3, #0
   17c10:	d004      	beq.n	17c1c <prvTraceStoreKernelCall+0x6c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
   17c12:	4b2d      	ldr	r3, [pc, #180]	; (17cc8 <prvTraceStoreKernelCall+0x118>)
   17c14:	0018      	movs	r0, r3
   17c16:	4b27      	ldr	r3, [pc, #156]	; (17cb4 <prvTraceStoreKernelCall+0x104>)
   17c18:	4798      	blx	r3
		return;
   17c1a:	e046      	b.n	17caa <prvTraceStoreKernelCall+0xfa>
	}

	if (handle_of_last_logged_task == 0)
   17c1c:	4b2b      	ldr	r3, [pc, #172]	; (17ccc <prvTraceStoreKernelCall+0x11c>)
   17c1e:	781b      	ldrb	r3, [r3, #0]
   17c20:	2b00      	cmp	r3, #0
   17c22:	d041      	beq.n	17ca8 <prvTraceStoreKernelCall+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   17c24:	f3ef 8310 	mrs	r3, PRIMASK
   17c28:	617b      	str	r3, [r7, #20]
  return(result);
   17c2a:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
   17c2c:	627b      	str	r3, [r7, #36]	; 0x24
   17c2e:	2301      	movs	r3, #1
   17c30:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   17c32:	69bb      	ldr	r3, [r7, #24]
   17c34:	f383 8810 	msr	PRIMASK, r3
   17c38:	4b22      	ldr	r3, [pc, #136]	; (17cc4 <prvTraceStoreKernelCall+0x114>)
   17c3a:	681b      	ldr	r3, [r3, #0]
   17c3c:	1c5a      	adds	r2, r3, #1
   17c3e:	4b21      	ldr	r3, [pc, #132]	; (17cc4 <prvTraceStoreKernelCall+0x114>)
   17c40:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
   17c42:	4b1e      	ldr	r3, [pc, #120]	; (17cbc <prvTraceStoreKernelCall+0x10c>)
   17c44:	681b      	ldr	r3, [r3, #0]
   17c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   17c48:	2b00      	cmp	r3, #0
   17c4a:	d022      	beq.n	17c92 <prvTraceStoreKernelCall+0xe2>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
   17c4c:	2322      	movs	r3, #34	; 0x22
   17c4e:	18fc      	adds	r4, r7, r3
   17c50:	4b1f      	ldr	r3, [pc, #124]	; (17cd0 <prvTraceStoreKernelCall+0x120>)
   17c52:	0018      	movs	r0, r3
   17c54:	4b1f      	ldr	r3, [pc, #124]	; (17cd4 <prvTraceStoreKernelCall+0x124>)
   17c56:	4798      	blx	r3
   17c58:	0003      	movs	r3, r0
   17c5a:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   17c5c:	2321      	movs	r3, #33	; 0x21
   17c5e:	18fb      	adds	r3, r7, r3
   17c60:	687a      	ldr	r2, [r7, #4]
   17c62:	701a      	strb	r2, [r3, #0]
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
   17c64:	4b1c      	ldr	r3, [pc, #112]	; (17cd8 <prvTraceStoreKernelCall+0x128>)
   17c66:	4798      	blx	r3
   17c68:	0003      	movs	r3, r0
   17c6a:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   17c6c:	69fb      	ldr	r3, [r7, #28]
   17c6e:	2b00      	cmp	r3, #0
   17c70:	d00f      	beq.n	17c92 <prvTraceStoreKernelCall+0xe2>
		{
			kse->dts = dts1;
   17c72:	69fb      	ldr	r3, [r7, #28]
   17c74:	2222      	movs	r2, #34	; 0x22
   17c76:	18ba      	adds	r2, r7, r2
   17c78:	8812      	ldrh	r2, [r2, #0]
   17c7a:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
   17c7c:	68fb      	ldr	r3, [r7, #12]
   17c7e:	b2da      	uxtb	r2, r3
   17c80:	69fb      	ldr	r3, [r7, #28]
   17c82:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   17c84:	69fb      	ldr	r3, [r7, #28]
   17c86:	2221      	movs	r2, #33	; 0x21
   17c88:	18ba      	adds	r2, r7, r2
   17c8a:	7812      	ldrb	r2, [r2, #0]
   17c8c:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   17c8e:	4b13      	ldr	r3, [pc, #76]	; (17cdc <prvTraceStoreKernelCall+0x12c>)
   17c90:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   17c92:	4b0c      	ldr	r3, [pc, #48]	; (17cc4 <prvTraceStoreKernelCall+0x114>)
   17c94:	681b      	ldr	r3, [r3, #0]
   17c96:	1e5a      	subs	r2, r3, #1
   17c98:	4b0a      	ldr	r3, [pc, #40]	; (17cc4 <prvTraceStoreKernelCall+0x114>)
   17c9a:	601a      	str	r2, [r3, #0]
   17c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17c9e:	613b      	str	r3, [r7, #16]
   17ca0:	693b      	ldr	r3, [r7, #16]
   17ca2:	f383 8810 	msr	PRIMASK, r3
   17ca6:	e000      	b.n	17caa <prvTraceStoreKernelCall+0xfa>
		return;
   17ca8:	46c0      	nop			; (mov r8, r8)
}
   17caa:	46bd      	mov	sp, r7
   17cac:	b00b      	add	sp, #44	; 0x2c
   17cae:	bd90      	pop	{r4, r7, pc}
   17cb0:	000370dc 	.word	0x000370dc
   17cb4:	00018a55 	.word	0x00018a55
   17cb8:	00037114 	.word	0x00037114
   17cbc:	20000dc0 	.word	0x20000dc0
   17cc0:	0003715c 	.word	0x0003715c
   17cc4:	20000d18 	.word	0x20000d18
   17cc8:	000371a4 	.word	0x000371a4
   17ccc:	20000d24 	.word	0x20000d24
   17cd0:	0000ffff 	.word	0x0000ffff
   17cd4:	00018c69 	.word	0x00018c69
   17cd8:	0001860d 	.word	0x0001860d
   17cdc:	00018c11 	.word	0x00018c11

00017ce0 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
   17ce0:	b580      	push	{r7, lr}
   17ce2:	b08a      	sub	sp, #40	; 0x28
   17ce4:	af00      	add	r7, sp, #0
   17ce6:	60f8      	str	r0, [r7, #12]
   17ce8:	607a      	str	r2, [r7, #4]
   17cea:	603b      	str	r3, [r7, #0]
   17cec:	230b      	movs	r3, #11
   17cee:	18fb      	adds	r3, r7, r3
   17cf0:	1c0a      	adds	r2, r1, #0
   17cf2:	701a      	strb	r2, [r3, #0]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
   17cf4:	68fb      	ldr	r3, [r7, #12]
   17cf6:	2bfe      	cmp	r3, #254	; 0xfe
   17cf8:	d904      	bls.n	17d04 <prvTraceStoreKernelCallWithParam+0x24>
   17cfa:	4b40      	ldr	r3, [pc, #256]	; (17dfc <prvTraceStoreKernelCallWithParam+0x11c>)
   17cfc:	0018      	movs	r0, r3
   17cfe:	4b40      	ldr	r3, [pc, #256]	; (17e00 <prvTraceStoreKernelCallWithParam+0x120>)
   17d00:	4798      	blx	r3
   17d02:	e077      	b.n	17df4 <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   17d04:	230b      	movs	r3, #11
   17d06:	18fb      	adds	r3, r7, r3
   17d08:	781b      	ldrb	r3, [r3, #0]
   17d0a:	2b08      	cmp	r3, #8
   17d0c:	d904      	bls.n	17d18 <prvTraceStoreKernelCallWithParam+0x38>
   17d0e:	4b3d      	ldr	r3, [pc, #244]	; (17e04 <prvTraceStoreKernelCallWithParam+0x124>)
   17d10:	0018      	movs	r0, r3
   17d12:	4b3b      	ldr	r3, [pc, #236]	; (17e00 <prvTraceStoreKernelCallWithParam+0x120>)
   17d14:	4798      	blx	r3
   17d16:	e06d      	b.n	17df4 <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
   17d18:	4b3b      	ldr	r3, [pc, #236]	; (17e08 <prvTraceStoreKernelCallWithParam+0x128>)
   17d1a:	681a      	ldr	r2, [r3, #0]
   17d1c:	230b      	movs	r3, #11
   17d1e:	18fb      	adds	r3, r7, r3
   17d20:	781b      	ldrb	r3, [r3, #0]
   17d22:	2164      	movs	r1, #100	; 0x64
   17d24:	18d3      	adds	r3, r2, r3
   17d26:	185b      	adds	r3, r3, r1
   17d28:	781b      	ldrb	r3, [r3, #0]
   17d2a:	001a      	movs	r2, r3
   17d2c:	687b      	ldr	r3, [r7, #4]
   17d2e:	429a      	cmp	r2, r3
   17d30:	d204      	bcs.n	17d3c <prvTraceStoreKernelCallWithParam+0x5c>
   17d32:	4b36      	ldr	r3, [pc, #216]	; (17e0c <prvTraceStoreKernelCallWithParam+0x12c>)
   17d34:	0018      	movs	r0, r3
   17d36:	4b32      	ldr	r3, [pc, #200]	; (17e00 <prvTraceStoreKernelCallWithParam+0x120>)
   17d38:	4798      	blx	r3
   17d3a:	e05b      	b.n	17df4 <prvTraceStoreKernelCallWithParam+0x114>

	if (recorder_busy)
   17d3c:	4b34      	ldr	r3, [pc, #208]	; (17e10 <prvTraceStoreKernelCallWithParam+0x130>)
   17d3e:	681b      	ldr	r3, [r3, #0]
   17d40:	2b00      	cmp	r3, #0
   17d42:	d004      	beq.n	17d4e <prvTraceStoreKernelCallWithParam+0x6e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
   17d44:	4b33      	ldr	r3, [pc, #204]	; (17e14 <prvTraceStoreKernelCallWithParam+0x134>)
   17d46:	0018      	movs	r0, r3
   17d48:	4b2d      	ldr	r3, [pc, #180]	; (17e00 <prvTraceStoreKernelCallWithParam+0x120>)
   17d4a:	4798      	blx	r3
		return;
   17d4c:	e052      	b.n	17df4 <prvTraceStoreKernelCallWithParam+0x114>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   17d4e:	f3ef 8310 	mrs	r3, PRIMASK
   17d52:	617b      	str	r3, [r7, #20]
  return(result);
   17d54:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
   17d56:	627b      	str	r3, [r7, #36]	; 0x24
   17d58:	2301      	movs	r3, #1
   17d5a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   17d5c:	69bb      	ldr	r3, [r7, #24]
   17d5e:	f383 8810 	msr	PRIMASK, r3
   17d62:	4b2b      	ldr	r3, [pc, #172]	; (17e10 <prvTraceStoreKernelCallWithParam+0x130>)
   17d64:	681b      	ldr	r3, [r3, #0]
   17d66:	1c5a      	adds	r2, r3, #1
   17d68:	4b29      	ldr	r3, [pc, #164]	; (17e10 <prvTraceStoreKernelCallWithParam+0x130>)
   17d6a:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   17d6c:	4b26      	ldr	r3, [pc, #152]	; (17e08 <prvTraceStoreKernelCallWithParam+0x128>)
   17d6e:	681b      	ldr	r3, [r3, #0]
   17d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   17d72:	2b00      	cmp	r3, #0
   17d74:	d034      	beq.n	17de0 <prvTraceStoreKernelCallWithParam+0x100>
   17d76:	4b28      	ldr	r3, [pc, #160]	; (17e18 <prvTraceStoreKernelCallWithParam+0x138>)
   17d78:	781b      	ldrb	r3, [r3, #0]
   17d7a:	2b00      	cmp	r3, #0
   17d7c:	d030      	beq.n	17de0 <prvTraceStoreKernelCallWithParam+0x100>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
   17d7e:	20ff      	movs	r0, #255	; 0xff
   17d80:	4b26      	ldr	r3, [pc, #152]	; (17e1c <prvTraceStoreKernelCallWithParam+0x13c>)
   17d82:	4798      	blx	r3
   17d84:	0003      	movs	r3, r0
   17d86:	001a      	movs	r2, r3
   17d88:	2323      	movs	r3, #35	; 0x23
   17d8a:	18fb      	adds	r3, r7, r3
   17d8c:	701a      	strb	r2, [r3, #0]
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
   17d8e:	683b      	ldr	r3, [r7, #0]
   17d90:	0019      	movs	r1, r3
   17d92:	20ff      	movs	r0, #255	; 0xff
   17d94:	4b22      	ldr	r3, [pc, #136]	; (17e20 <prvTraceStoreKernelCallWithParam+0x140>)
   17d96:	4798      	blx	r3
   17d98:	0002      	movs	r2, r0
   17d9a:	2322      	movs	r3, #34	; 0x22
   17d9c:	18fb      	adds	r3, r7, r3
   17d9e:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   17da0:	2321      	movs	r3, #33	; 0x21
   17da2:	18fb      	adds	r3, r7, r3
   17da4:	687a      	ldr	r2, [r7, #4]
   17da6:	701a      	strb	r2, [r3, #0]
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
   17da8:	4b1e      	ldr	r3, [pc, #120]	; (17e24 <prvTraceStoreKernelCallWithParam+0x144>)
   17daa:	4798      	blx	r3
   17dac:	0003      	movs	r3, r0
   17dae:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   17db0:	69fb      	ldr	r3, [r7, #28]
   17db2:	2b00      	cmp	r3, #0
   17db4:	d014      	beq.n	17de0 <prvTraceStoreKernelCallWithParam+0x100>
		{
			kse->dts = dts2;
   17db6:	69fb      	ldr	r3, [r7, #28]
   17db8:	2223      	movs	r2, #35	; 0x23
   17dba:	18ba      	adds	r2, r7, r2
   17dbc:	7812      	ldrb	r2, [r2, #0]
   17dbe:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
   17dc0:	68fb      	ldr	r3, [r7, #12]
   17dc2:	b2da      	uxtb	r2, r3
   17dc4:	69fb      	ldr	r3, [r7, #28]
   17dc6:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   17dc8:	69fb      	ldr	r3, [r7, #28]
   17dca:	2221      	movs	r2, #33	; 0x21
   17dcc:	18ba      	adds	r2, r7, r2
   17dce:	7812      	ldrb	r2, [r2, #0]
   17dd0:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
   17dd2:	69fb      	ldr	r3, [r7, #28]
   17dd4:	2222      	movs	r2, #34	; 0x22
   17dd6:	18ba      	adds	r2, r7, r2
   17dd8:	7812      	ldrb	r2, [r2, #0]
   17dda:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
   17ddc:	4b12      	ldr	r3, [pc, #72]	; (17e28 <prvTraceStoreKernelCallWithParam+0x148>)
   17dde:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   17de0:	4b0b      	ldr	r3, [pc, #44]	; (17e10 <prvTraceStoreKernelCallWithParam+0x130>)
   17de2:	681b      	ldr	r3, [r3, #0]
   17de4:	1e5a      	subs	r2, r3, #1
   17de6:	4b0a      	ldr	r3, [pc, #40]	; (17e10 <prvTraceStoreKernelCallWithParam+0x130>)
   17de8:	601a      	str	r2, [r3, #0]
   17dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17dec:	613b      	str	r3, [r7, #16]
   17dee:	693b      	ldr	r3, [r7, #16]
   17df0:	f383 8810 	msr	PRIMASK, r3
}
   17df4:	46bd      	mov	sp, r7
   17df6:	b00a      	add	sp, #40	; 0x28
   17df8:	bd80      	pop	{r7, pc}
   17dfa:	46c0      	nop			; (mov r8, r8)
   17dfc:	000371dc 	.word	0x000371dc
   17e00:	00018a55 	.word	0x00018a55
   17e04:	0003721c 	.word	0x0003721c
   17e08:	20000dc0 	.word	0x20000dc0
   17e0c:	0003726c 	.word	0x0003726c
   17e10:	20000d18 	.word	0x20000d18
   17e14:	000372bc 	.word	0x000372bc
   17e18:	20000d24 	.word	0x20000d24
   17e1c:	00018c69 	.word	0x00018c69
   17e20:	00017e2d 	.word	0x00017e2d
   17e24:	0001860d 	.word	0x0001860d
   17e28:	00018c11 	.word	0x00018c11

00017e2c <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
   17e2c:	b580      	push	{r7, lr}
   17e2e:	b084      	sub	sp, #16
   17e30:	af00      	add	r7, sp, #0
   17e32:	6078      	str	r0, [r7, #4]
   17e34:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
   17e36:	687b      	ldr	r3, [r7, #4]
   17e38:	2bff      	cmp	r3, #255	; 0xff
   17e3a:	d009      	beq.n	17e50 <prvTraceGetParam+0x24>
   17e3c:	687b      	ldr	r3, [r7, #4]
   17e3e:	4a19      	ldr	r2, [pc, #100]	; (17ea4 <prvTraceGetParam+0x78>)
   17e40:	4293      	cmp	r3, r2
   17e42:	d005      	beq.n	17e50 <prvTraceGetParam+0x24>
   17e44:	4b18      	ldr	r3, [pc, #96]	; (17ea8 <prvTraceGetParam+0x7c>)
   17e46:	0018      	movs	r0, r3
   17e48:	4b18      	ldr	r3, [pc, #96]	; (17eac <prvTraceGetParam+0x80>)
   17e4a:	4798      	blx	r3
   17e4c:	683b      	ldr	r3, [r7, #0]
   17e4e:	e024      	b.n	17e9a <prvTraceGetParam+0x6e>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
   17e50:	683a      	ldr	r2, [r7, #0]
   17e52:	687b      	ldr	r3, [r7, #4]
   17e54:	429a      	cmp	r2, r3
   17e56:	d801      	bhi.n	17e5c <prvTraceGetParam+0x30>
	{
		return param;
   17e58:	683b      	ldr	r3, [r7, #0]
   17e5a:	e01e      	b.n	17e9a <prvTraceGetParam+0x6e>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
   17e5c:	4b14      	ldr	r3, [pc, #80]	; (17eb0 <prvTraceGetParam+0x84>)
   17e5e:	4798      	blx	r3
   17e60:	0003      	movs	r3, r0
   17e62:	60fb      	str	r3, [r7, #12]
		if (xps != NULL)
   17e64:	68fb      	ldr	r3, [r7, #12]
   17e66:	2b00      	cmp	r3, #0
   17e68:	d014      	beq.n	17e94 <prvTraceGetParam+0x68>
		{
			xps->type = DIV_XPS;
   17e6a:	68fb      	ldr	r3, [r7, #12]
   17e6c:	2201      	movs	r2, #1
   17e6e:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
   17e70:	687b      	ldr	r3, [r7, #4]
   17e72:	43db      	mvns	r3, r3
   17e74:	683a      	ldr	r2, [r7, #0]
   17e76:	4013      	ands	r3, r2
   17e78:	0a1b      	lsrs	r3, r3, #8
   17e7a:	b2da      	uxtb	r2, r3
   17e7c:	68fb      	ldr	r3, [r7, #12]
   17e7e:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
   17e80:	687b      	ldr	r3, [r7, #4]
   17e82:	43db      	mvns	r3, r3
   17e84:	683a      	ldr	r2, [r7, #0]
   17e86:	4013      	ands	r3, r2
   17e88:	0c1b      	lsrs	r3, r3, #16
   17e8a:	b29a      	uxth	r2, r3
   17e8c:	68fb      	ldr	r3, [r7, #12]
   17e8e:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   17e90:	4b08      	ldr	r3, [pc, #32]	; (17eb4 <prvTraceGetParam+0x88>)
   17e92:	4798      	blx	r3
		}

		return param & param_max;
   17e94:	683b      	ldr	r3, [r7, #0]
   17e96:	687a      	ldr	r2, [r7, #4]
   17e98:	4013      	ands	r3, r2
	}
}
   17e9a:	0018      	movs	r0, r3
   17e9c:	46bd      	mov	sp, r7
   17e9e:	b004      	add	sp, #16
   17ea0:	bd80      	pop	{r7, pc}
   17ea2:	46c0      	nop			; (mov r8, r8)
   17ea4:	0000ffff 	.word	0x0000ffff
   17ea8:	000372f4 	.word	0x000372f4
   17eac:	00018a55 	.word	0x00018a55
   17eb0:	0001860d 	.word	0x0001860d
   17eb4:	00018c11 	.word	0x00018c11

00017eb8 <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
   17eb8:	b580      	push	{r7, lr}
   17eba:	b08a      	sub	sp, #40	; 0x28
   17ebc:	af00      	add	r7, sp, #0
   17ebe:	6078      	str	r0, [r7, #4]
   17ec0:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
   17ec2:	2326      	movs	r3, #38	; 0x26
   17ec4:	18fb      	adds	r3, r7, r3
   17ec6:	2200      	movs	r2, #0
   17ec8:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
   17eca:	687b      	ldr	r3, [r7, #4]
   17ecc:	2bfe      	cmp	r3, #254	; 0xfe
   17ece:	d904      	bls.n	17eda <prvTraceStoreKernelCallWithNumericParamOnly+0x22>
   17ed0:	4b2d      	ldr	r3, [pc, #180]	; (17f88 <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
   17ed2:	0018      	movs	r0, r3
   17ed4:	4b2d      	ldr	r3, [pc, #180]	; (17f8c <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   17ed6:	4798      	blx	r3
   17ed8:	e053      	b.n	17f82 <prvTraceStoreKernelCallWithNumericParamOnly+0xca>

	if (recorder_busy)
   17eda:	4b2d      	ldr	r3, [pc, #180]	; (17f90 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   17edc:	681b      	ldr	r3, [r3, #0]
   17ede:	2b00      	cmp	r3, #0
   17ee0:	d004      	beq.n	17eec <prvTraceStoreKernelCallWithNumericParamOnly+0x34>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
   17ee2:	4b2c      	ldr	r3, [pc, #176]	; (17f94 <prvTraceStoreKernelCallWithNumericParamOnly+0xdc>)
   17ee4:	0018      	movs	r0, r3
   17ee6:	4b29      	ldr	r3, [pc, #164]	; (17f8c <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   17ee8:	4798      	blx	r3
		return;
   17eea:	e04a      	b.n	17f82 <prvTraceStoreKernelCallWithNumericParamOnly+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   17eec:	f3ef 8310 	mrs	r3, PRIMASK
   17ef0:	613b      	str	r3, [r7, #16]
  return(result);
   17ef2:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
   17ef4:	623b      	str	r3, [r7, #32]
   17ef6:	2301      	movs	r3, #1
   17ef8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   17efa:	697b      	ldr	r3, [r7, #20]
   17efc:	f383 8810 	msr	PRIMASK, r3
   17f00:	4b23      	ldr	r3, [pc, #140]	; (17f90 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   17f02:	681b      	ldr	r3, [r3, #0]
   17f04:	1c5a      	adds	r2, r3, #1
   17f06:	4b22      	ldr	r3, [pc, #136]	; (17f90 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   17f08:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   17f0a:	4b23      	ldr	r3, [pc, #140]	; (17f98 <prvTraceStoreKernelCallWithNumericParamOnly+0xe0>)
   17f0c:	681b      	ldr	r3, [r3, #0]
   17f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   17f10:	2b00      	cmp	r3, #0
   17f12:	d02c      	beq.n	17f6e <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
   17f14:	4b21      	ldr	r3, [pc, #132]	; (17f9c <prvTraceStoreKernelCallWithNumericParamOnly+0xe4>)
   17f16:	781b      	ldrb	r3, [r3, #0]
   17f18:	2b00      	cmp	r3, #0
   17f1a:	d028      	beq.n	17f6e <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
   17f1c:	20ff      	movs	r0, #255	; 0xff
   17f1e:	4b20      	ldr	r3, [pc, #128]	; (17fa0 <prvTraceStoreKernelCallWithNumericParamOnly+0xe8>)
   17f20:	4798      	blx	r3
   17f22:	0003      	movs	r3, r0
   17f24:	001a      	movs	r2, r3
   17f26:	231f      	movs	r3, #31
   17f28:	18fb      	adds	r3, r7, r3
   17f2a:	701a      	strb	r2, [r3, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
   17f2c:	683b      	ldr	r3, [r7, #0]
   17f2e:	4a1d      	ldr	r2, [pc, #116]	; (17fa4 <prvTraceStoreKernelCallWithNumericParamOnly+0xec>)
   17f30:	0019      	movs	r1, r3
   17f32:	0010      	movs	r0, r2
   17f34:	4b1c      	ldr	r3, [pc, #112]	; (17fa8 <prvTraceStoreKernelCallWithNumericParamOnly+0xf0>)
   17f36:	4798      	blx	r3
   17f38:	0002      	movs	r2, r0
   17f3a:	2326      	movs	r3, #38	; 0x26
   17f3c:	18fb      	adds	r3, r7, r3
   17f3e:	801a      	strh	r2, [r3, #0]
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
   17f40:	4b1a      	ldr	r3, [pc, #104]	; (17fac <prvTraceStoreKernelCallWithNumericParamOnly+0xf4>)
   17f42:	4798      	blx	r3
   17f44:	0003      	movs	r3, r0
   17f46:	61bb      	str	r3, [r7, #24]
		if (kse != NULL)
   17f48:	69bb      	ldr	r3, [r7, #24]
   17f4a:	2b00      	cmp	r3, #0
   17f4c:	d00f      	beq.n	17f6e <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
		{
			kse->dts = dts6;
   17f4e:	69bb      	ldr	r3, [r7, #24]
   17f50:	221f      	movs	r2, #31
   17f52:	18ba      	adds	r2, r7, r2
   17f54:	7812      	ldrb	r2, [r2, #0]
   17f56:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
   17f58:	687b      	ldr	r3, [r7, #4]
   17f5a:	b2da      	uxtb	r2, r3
   17f5c:	69bb      	ldr	r3, [r7, #24]
   17f5e:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
   17f60:	69bb      	ldr	r3, [r7, #24]
   17f62:	2226      	movs	r2, #38	; 0x26
   17f64:	18ba      	adds	r2, r7, r2
   17f66:	8812      	ldrh	r2, [r2, #0]
   17f68:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   17f6a:	4b11      	ldr	r3, [pc, #68]	; (17fb0 <prvTraceStoreKernelCallWithNumericParamOnly+0xf8>)
   17f6c:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   17f6e:	4b08      	ldr	r3, [pc, #32]	; (17f90 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   17f70:	681b      	ldr	r3, [r3, #0]
   17f72:	1e5a      	subs	r2, r3, #1
   17f74:	4b06      	ldr	r3, [pc, #24]	; (17f90 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   17f76:	601a      	str	r2, [r3, #0]
   17f78:	6a3b      	ldr	r3, [r7, #32]
   17f7a:	60fb      	str	r3, [r7, #12]
   17f7c:	68fb      	ldr	r3, [r7, #12]
   17f7e:	f383 8810 	msr	PRIMASK, r3
}
   17f82:	46bd      	mov	sp, r7
   17f84:	b00a      	add	sp, #40	; 0x28
   17f86:	bd80      	pop	{r7, pc}
   17f88:	00037330 	.word	0x00037330
   17f8c:	00018a55 	.word	0x00018a55
   17f90:	20000d18 	.word	0x20000d18
   17f94:	00037388 	.word	0x00037388
   17f98:	20000dc0 	.word	0x20000dc0
   17f9c:	20000d24 	.word	0x20000d24
   17fa0:	00018c69 	.word	0x00018c69
   17fa4:	0000ffff 	.word	0x0000ffff
   17fa8:	00017e2d 	.word	0x00017e2d
   17fac:	0001860d 	.word	0x0001860d
   17fb0:	00018c11 	.word	0x00018c11

00017fb4 <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
   17fb4:	b590      	push	{r4, r7, lr}
   17fb6:	b089      	sub	sp, #36	; 0x24
   17fb8:	af00      	add	r7, sp, #0
   17fba:	0002      	movs	r2, r0
   17fbc:	1dfb      	adds	r3, r7, #7
   17fbe:	701a      	strb	r2, [r3, #0]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
   17fc0:	1dfb      	adds	r3, r7, #7
   17fc2:	781b      	ldrb	r3, [r3, #0]
   17fc4:	2b0f      	cmp	r3, #15
   17fc6:	d904      	bls.n	17fd2 <prvTraceStoreTaskswitch+0x1e>
   17fc8:	4b34      	ldr	r3, [pc, #208]	; (1809c <prvTraceStoreTaskswitch+0xe8>)
   17fca:	0018      	movs	r0, r3
   17fcc:	4b34      	ldr	r3, [pc, #208]	; (180a0 <prvTraceStoreTaskswitch+0xec>)
   17fce:	4798      	blx	r3
   17fd0:	e061      	b.n	18096 <prvTraceStoreTaskswitch+0xe2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   17fd2:	f3ef 8310 	mrs	r3, PRIMASK
   17fd6:	60fb      	str	r3, [r7, #12]
  return(result);
   17fd8:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
   17fda:	61fb      	str	r3, [r7, #28]
   17fdc:	2301      	movs	r3, #1
   17fde:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   17fe0:	693b      	ldr	r3, [r7, #16]
   17fe2:	f383 8810 	msr	PRIMASK, r3
   17fe6:	4b2f      	ldr	r3, [pc, #188]	; (180a4 <prvTraceStoreTaskswitch+0xf0>)
   17fe8:	681b      	ldr	r3, [r3, #0]
   17fea:	1c5a      	adds	r2, r3, #1
   17fec:	4b2d      	ldr	r3, [pc, #180]	; (180a4 <prvTraceStoreTaskswitch+0xf0>)
   17fee:	601a      	str	r2, [r3, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
   17ff0:	4b2d      	ldr	r3, [pc, #180]	; (180a8 <prvTraceStoreTaskswitch+0xf4>)
   17ff2:	781b      	ldrb	r3, [r3, #0]
   17ff4:	1dfa      	adds	r2, r7, #7
   17ff6:	7812      	ldrb	r2, [r2, #0]
   17ff8:	429a      	cmp	r2, r3
   17ffa:	d042      	beq.n	18082 <prvTraceStoreTaskswitch+0xce>
   17ffc:	4b2b      	ldr	r3, [pc, #172]	; (180ac <prvTraceStoreTaskswitch+0xf8>)
   17ffe:	681b      	ldr	r3, [r3, #0]
   18000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18002:	2b00      	cmp	r3, #0
   18004:	d03d      	beq.n	18082 <prvTraceStoreTaskswitch+0xce>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
   18006:	4b2a      	ldr	r3, [pc, #168]	; (180b0 <prvTraceStoreTaskswitch+0xfc>)
   18008:	2200      	movs	r2, #0
   1800a:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   1800c:	231a      	movs	r3, #26
   1800e:	18fc      	adds	r4, r7, r3
   18010:	4b28      	ldr	r3, [pc, #160]	; (180b4 <prvTraceStoreTaskswitch+0x100>)
   18012:	0018      	movs	r0, r3
   18014:	4b28      	ldr	r3, [pc, #160]	; (180b8 <prvTraceStoreTaskswitch+0x104>)
   18016:	4798      	blx	r3
   18018:	0003      	movs	r3, r0
   1801a:	8023      	strh	r3, [r4, #0]
		handle_of_last_logged_task = task_handle;
   1801c:	4b22      	ldr	r3, [pc, #136]	; (180a8 <prvTraceStoreTaskswitch+0xf4>)
   1801e:	1dfa      	adds	r2, r7, #7
   18020:	7812      	ldrb	r2, [r2, #0]
   18022:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
   18024:	2319      	movs	r3, #25
   18026:	18fb      	adds	r3, r7, r3
   18028:	4a1f      	ldr	r2, [pc, #124]	; (180a8 <prvTraceStoreTaskswitch+0xf4>)
   1802a:	7812      	ldrb	r2, [r2, #0]
   1802c:	701a      	strb	r2, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
   1802e:	4b23      	ldr	r3, [pc, #140]	; (180bc <prvTraceStoreTaskswitch+0x108>)
   18030:	4798      	blx	r3
   18032:	0003      	movs	r3, r0
   18034:	617b      	str	r3, [r7, #20]

		if (ts != NULL)
   18036:	697b      	ldr	r3, [r7, #20]
   18038:	2b00      	cmp	r3, #0
   1803a:	d022      	beq.n	18082 <prvTraceStoreTaskswitch+0xce>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
   1803c:	4b1a      	ldr	r3, [pc, #104]	; (180a8 <prvTraceStoreTaskswitch+0xf4>)
   1803e:	781b      	ldrb	r3, [r3, #0]
   18040:	0019      	movs	r1, r3
   18042:	2003      	movs	r0, #3
   18044:	4b1e      	ldr	r3, [pc, #120]	; (180c0 <prvTraceStoreTaskswitch+0x10c>)
   18046:	4798      	blx	r3
   18048:	0003      	movs	r3, r0
   1804a:	2b01      	cmp	r3, #1
   1804c:	d103      	bne.n	18056 <prvTraceStoreTaskswitch+0xa2>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
   1804e:	697b      	ldr	r3, [r7, #20]
   18050:	2207      	movs	r2, #7
   18052:	701a      	strb	r2, [r3, #0]
   18054:	e002      	b.n	1805c <prvTraceStoreTaskswitch+0xa8>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
   18056:	697b      	ldr	r3, [r7, #20]
   18058:	2206      	movs	r2, #6
   1805a:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
   1805c:	697b      	ldr	r3, [r7, #20]
   1805e:	221a      	movs	r2, #26
   18060:	18ba      	adds	r2, r7, r2
   18062:	8812      	ldrh	r2, [r2, #0]
   18064:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
   18066:	697b      	ldr	r3, [r7, #20]
   18068:	2219      	movs	r2, #25
   1806a:	18ba      	adds	r2, r7, r2
   1806c:	7812      	ldrb	r2, [r2, #0]
   1806e:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
   18070:	4b0d      	ldr	r3, [pc, #52]	; (180a8 <prvTraceStoreTaskswitch+0xf4>)
   18072:	781b      	ldrb	r3, [r3, #0]
   18074:	2201      	movs	r2, #1
   18076:	0019      	movs	r1, r3
   18078:	2003      	movs	r0, #3
   1807a:	4b12      	ldr	r3, [pc, #72]	; (180c4 <prvTraceStoreTaskswitch+0x110>)
   1807c:	4798      	blx	r3
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
   1807e:	4b12      	ldr	r3, [pc, #72]	; (180c8 <prvTraceStoreTaskswitch+0x114>)
   18080:	4798      	blx	r3
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
   18082:	4b08      	ldr	r3, [pc, #32]	; (180a4 <prvTraceStoreTaskswitch+0xf0>)
   18084:	681b      	ldr	r3, [r3, #0]
   18086:	1e5a      	subs	r2, r3, #1
   18088:	4b06      	ldr	r3, [pc, #24]	; (180a4 <prvTraceStoreTaskswitch+0xf0>)
   1808a:	601a      	str	r2, [r3, #0]
   1808c:	69fb      	ldr	r3, [r7, #28]
   1808e:	60bb      	str	r3, [r7, #8]
   18090:	68bb      	ldr	r3, [r7, #8]
   18092:	f383 8810 	msr	PRIMASK, r3
}
   18096:	46bd      	mov	sp, r7
   18098:	b009      	add	sp, #36	; 0x24
   1809a:	bd90      	pop	{r4, r7, pc}
   1809c:	000373c0 	.word	0x000373c0
   180a0:	00018a55 	.word	0x00018a55
   180a4:	20000d18 	.word	0x20000d18
   180a8:	20000d24 	.word	0x20000d24
   180ac:	20000dc0 	.word	0x20000dc0
   180b0:	20000d04 	.word	0x20000d04
   180b4:	0000ffff 	.word	0x0000ffff
   180b8:	00018c69 	.word	0x00018c69
   180bc:	0001860d 	.word	0x0001860d
   180c0:	000182b1 	.word	0x000182b1
   180c4:	0001820d 	.word	0x0001820d
   180c8:	00018c11 	.word	0x00018c11

000180cc <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
   180cc:	b590      	push	{r4, r7, lr}
   180ce:	b083      	sub	sp, #12
   180d0:	af00      	add	r7, sp, #0
   180d2:	0004      	movs	r4, r0
   180d4:	0008      	movs	r0, r1
   180d6:	0011      	movs	r1, r2
   180d8:	1dfb      	adds	r3, r7, #7
   180da:	1c22      	adds	r2, r4, #0
   180dc:	701a      	strb	r2, [r3, #0]
   180de:	1dbb      	adds	r3, r7, #6
   180e0:	1c02      	adds	r2, r0, #0
   180e2:	701a      	strb	r2, [r3, #0]
   180e4:	1d7b      	adds	r3, r7, #5
   180e6:	1c0a      	adds	r2, r1, #0
   180e8:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   180ea:	1dfb      	adds	r3, r7, #7
   180ec:	781b      	ldrb	r3, [r3, #0]
   180ee:	2b08      	cmp	r3, #8
   180f0:	d904      	bls.n	180fc <prvTraceSetPriorityProperty+0x30>
   180f2:	4b1a      	ldr	r3, [pc, #104]	; (1815c <prvTraceSetPriorityProperty+0x90>)
   180f4:	0018      	movs	r0, r3
   180f6:	4b1a      	ldr	r3, [pc, #104]	; (18160 <prvTraceSetPriorityProperty+0x94>)
   180f8:	4798      	blx	r3
   180fa:	e02c      	b.n	18156 <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   180fc:	4b19      	ldr	r3, [pc, #100]	; (18164 <prvTraceSetPriorityProperty+0x98>)
   180fe:	681a      	ldr	r2, [r3, #0]
   18100:	1dfb      	adds	r3, r7, #7
   18102:	781b      	ldrb	r3, [r3, #0]
   18104:	2164      	movs	r1, #100	; 0x64
   18106:	18d3      	adds	r3, r2, r3
   18108:	185b      	adds	r3, r3, r1
   1810a:	781b      	ldrb	r3, [r3, #0]
   1810c:	1dba      	adds	r2, r7, #6
   1810e:	7812      	ldrb	r2, [r2, #0]
   18110:	429a      	cmp	r2, r3
   18112:	d904      	bls.n	1811e <prvTraceSetPriorityProperty+0x52>
   18114:	4b14      	ldr	r3, [pc, #80]	; (18168 <prvTraceSetPriorityProperty+0x9c>)
   18116:	0018      	movs	r0, r3
   18118:	4b11      	ldr	r3, [pc, #68]	; (18160 <prvTraceSetPriorityProperty+0x94>)
   1811a:	4798      	blx	r3
   1811c:	e01b      	b.n	18156 <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
   1811e:	4b11      	ldr	r3, [pc, #68]	; (18164 <prvTraceSetPriorityProperty+0x98>)
   18120:	681c      	ldr	r4, [r3, #0]
   18122:	1dfb      	adds	r3, r7, #7
   18124:	781a      	ldrb	r2, [r3, #0]
   18126:	1dbb      	adds	r3, r7, #6
   18128:	781b      	ldrb	r3, [r3, #0]
   1812a:	0011      	movs	r1, r2
   1812c:	0018      	movs	r0, r3
   1812e:	4b0f      	ldr	r3, [pc, #60]	; (1816c <prvTraceSetPriorityProperty+0xa0>)
   18130:	4798      	blx	r3
   18132:	0003      	movs	r3, r0
   18134:	0018      	movs	r0, r3
   18136:	4b0b      	ldr	r3, [pc, #44]	; (18164 <prvTraceSetPriorityProperty+0x98>)
   18138:	681a      	ldr	r2, [r3, #0]
   1813a:	1dfb      	adds	r3, r7, #7
   1813c:	781b      	ldrb	r3, [r3, #0]
   1813e:	2170      	movs	r1, #112	; 0x70
   18140:	18d3      	adds	r3, r2, r3
   18142:	185b      	adds	r3, r3, r1
   18144:	781b      	ldrb	r3, [r3, #0]
   18146:	18c3      	adds	r3, r0, r3
   18148:	3301      	adds	r3, #1
   1814a:	229c      	movs	r2, #156	; 0x9c
   1814c:	18e3      	adds	r3, r4, r3
   1814e:	189b      	adds	r3, r3, r2
   18150:	1d7a      	adds	r2, r7, #5
   18152:	7812      	ldrb	r2, [r2, #0]
   18154:	701a      	strb	r2, [r3, #0]
}
   18156:	46bd      	mov	sp, r7
   18158:	b003      	add	sp, #12
   1815a:	bd90      	pop	{r4, r7, pc}
   1815c:	00037554 	.word	0x00037554
   18160:	00018a55 	.word	0x00018a55
   18164:	20000dc0 	.word	0x20000dc0
   18168:	000375a0 	.word	0x000375a0
   1816c:	00018661 	.word	0x00018661

00018170 <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
   18170:	b590      	push	{r4, r7, lr}
   18172:	b083      	sub	sp, #12
   18174:	af00      	add	r7, sp, #0
   18176:	0002      	movs	r2, r0
   18178:	1dfb      	adds	r3, r7, #7
   1817a:	701a      	strb	r2, [r3, #0]
   1817c:	1dbb      	adds	r3, r7, #6
   1817e:	1c0a      	adds	r2, r1, #0
   18180:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   18182:	1dfb      	adds	r3, r7, #7
   18184:	781b      	ldrb	r3, [r3, #0]
   18186:	2b08      	cmp	r3, #8
   18188:	d905      	bls.n	18196 <prvTraceGetPriorityProperty+0x26>
   1818a:	4b1b      	ldr	r3, [pc, #108]	; (181f8 <prvTraceGetPriorityProperty+0x88>)
   1818c:	0018      	movs	r0, r3
   1818e:	4b1b      	ldr	r3, [pc, #108]	; (181fc <prvTraceGetPriorityProperty+0x8c>)
   18190:	4798      	blx	r3
   18192:	2300      	movs	r3, #0
   18194:	e02b      	b.n	181ee <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   18196:	4b1a      	ldr	r3, [pc, #104]	; (18200 <prvTraceGetPriorityProperty+0x90>)
   18198:	681a      	ldr	r2, [r3, #0]
   1819a:	1dfb      	adds	r3, r7, #7
   1819c:	781b      	ldrb	r3, [r3, #0]
   1819e:	2164      	movs	r1, #100	; 0x64
   181a0:	18d3      	adds	r3, r2, r3
   181a2:	185b      	adds	r3, r3, r1
   181a4:	781b      	ldrb	r3, [r3, #0]
   181a6:	1dba      	adds	r2, r7, #6
   181a8:	7812      	ldrb	r2, [r2, #0]
   181aa:	429a      	cmp	r2, r3
   181ac:	d905      	bls.n	181ba <prvTraceGetPriorityProperty+0x4a>
   181ae:	4b15      	ldr	r3, [pc, #84]	; (18204 <prvTraceGetPriorityProperty+0x94>)
   181b0:	0018      	movs	r0, r3
   181b2:	4b12      	ldr	r3, [pc, #72]	; (181fc <prvTraceGetPriorityProperty+0x8c>)
   181b4:	4798      	blx	r3
   181b6:	2300      	movs	r3, #0
   181b8:	e019      	b.n	181ee <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
   181ba:	4b11      	ldr	r3, [pc, #68]	; (18200 <prvTraceGetPriorityProperty+0x90>)
   181bc:	681c      	ldr	r4, [r3, #0]
   181be:	1dfb      	adds	r3, r7, #7
   181c0:	781a      	ldrb	r2, [r3, #0]
   181c2:	1dbb      	adds	r3, r7, #6
   181c4:	781b      	ldrb	r3, [r3, #0]
   181c6:	0011      	movs	r1, r2
   181c8:	0018      	movs	r0, r3
   181ca:	4b0f      	ldr	r3, [pc, #60]	; (18208 <prvTraceGetPriorityProperty+0x98>)
   181cc:	4798      	blx	r3
   181ce:	0003      	movs	r3, r0
   181d0:	0018      	movs	r0, r3
   181d2:	4b0b      	ldr	r3, [pc, #44]	; (18200 <prvTraceGetPriorityProperty+0x90>)
   181d4:	681a      	ldr	r2, [r3, #0]
   181d6:	1dfb      	adds	r3, r7, #7
   181d8:	781b      	ldrb	r3, [r3, #0]
   181da:	2170      	movs	r1, #112	; 0x70
   181dc:	18d3      	adds	r3, r2, r3
   181de:	185b      	adds	r3, r3, r1
   181e0:	781b      	ldrb	r3, [r3, #0]
   181e2:	18c3      	adds	r3, r0, r3
   181e4:	3301      	adds	r3, #1
   181e6:	229c      	movs	r2, #156	; 0x9c
   181e8:	18e3      	adds	r3, r4, r3
   181ea:	189b      	adds	r3, r3, r2
   181ec:	781b      	ldrb	r3, [r3, #0]
}
   181ee:	0018      	movs	r0, r3
   181f0:	46bd      	mov	sp, r7
   181f2:	b003      	add	sp, #12
   181f4:	bd90      	pop	{r4, r7, pc}
   181f6:	46c0      	nop			; (mov r8, r8)
   181f8:	000375e0 	.word	0x000375e0
   181fc:	00018a55 	.word	0x00018a55
   18200:	20000dc0 	.word	0x20000dc0
   18204:	0003762c 	.word	0x0003762c
   18208:	00018661 	.word	0x00018661

0001820c <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
   1820c:	b590      	push	{r4, r7, lr}
   1820e:	b083      	sub	sp, #12
   18210:	af00      	add	r7, sp, #0
   18212:	0004      	movs	r4, r0
   18214:	0008      	movs	r0, r1
   18216:	0011      	movs	r1, r2
   18218:	1dfb      	adds	r3, r7, #7
   1821a:	1c22      	adds	r2, r4, #0
   1821c:	701a      	strb	r2, [r3, #0]
   1821e:	1dbb      	adds	r3, r7, #6
   18220:	1c02      	adds	r2, r0, #0
   18222:	701a      	strb	r2, [r3, #0]
   18224:	1d7b      	adds	r3, r7, #5
   18226:	1c0a      	adds	r2, r1, #0
   18228:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   1822a:	1dfb      	adds	r3, r7, #7
   1822c:	781b      	ldrb	r3, [r3, #0]
   1822e:	2b08      	cmp	r3, #8
   18230:	d904      	bls.n	1823c <prvTraceSetObjectState+0x30>
   18232:	4b1a      	ldr	r3, [pc, #104]	; (1829c <prvTraceSetObjectState+0x90>)
   18234:	0018      	movs	r0, r3
   18236:	4b1a      	ldr	r3, [pc, #104]	; (182a0 <prvTraceSetObjectState+0x94>)
   18238:	4798      	blx	r3
   1823a:	e02b      	b.n	18294 <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   1823c:	4b19      	ldr	r3, [pc, #100]	; (182a4 <prvTraceSetObjectState+0x98>)
   1823e:	681a      	ldr	r2, [r3, #0]
   18240:	1dfb      	adds	r3, r7, #7
   18242:	781b      	ldrb	r3, [r3, #0]
   18244:	2164      	movs	r1, #100	; 0x64
   18246:	18d3      	adds	r3, r2, r3
   18248:	185b      	adds	r3, r3, r1
   1824a:	781b      	ldrb	r3, [r3, #0]
   1824c:	1dba      	adds	r2, r7, #6
   1824e:	7812      	ldrb	r2, [r2, #0]
   18250:	429a      	cmp	r2, r3
   18252:	d904      	bls.n	1825e <prvTraceSetObjectState+0x52>
   18254:	4b14      	ldr	r3, [pc, #80]	; (182a8 <prvTraceSetObjectState+0x9c>)
   18256:	0018      	movs	r0, r3
   18258:	4b11      	ldr	r3, [pc, #68]	; (182a0 <prvTraceSetObjectState+0x94>)
   1825a:	4798      	blx	r3
   1825c:	e01a      	b.n	18294 <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
   1825e:	4b11      	ldr	r3, [pc, #68]	; (182a4 <prvTraceSetObjectState+0x98>)
   18260:	681c      	ldr	r4, [r3, #0]
   18262:	1dfb      	adds	r3, r7, #7
   18264:	781a      	ldrb	r2, [r3, #0]
   18266:	1dbb      	adds	r3, r7, #6
   18268:	781b      	ldrb	r3, [r3, #0]
   1826a:	0011      	movs	r1, r2
   1826c:	0018      	movs	r0, r3
   1826e:	4b0f      	ldr	r3, [pc, #60]	; (182ac <prvTraceSetObjectState+0xa0>)
   18270:	4798      	blx	r3
   18272:	0003      	movs	r3, r0
   18274:	0018      	movs	r0, r3
   18276:	4b0b      	ldr	r3, [pc, #44]	; (182a4 <prvTraceSetObjectState+0x98>)
   18278:	681a      	ldr	r2, [r3, #0]
   1827a:	1dfb      	adds	r3, r7, #7
   1827c:	781b      	ldrb	r3, [r3, #0]
   1827e:	2170      	movs	r1, #112	; 0x70
   18280:	18d3      	adds	r3, r2, r3
   18282:	185b      	adds	r3, r3, r1
   18284:	781b      	ldrb	r3, [r3, #0]
   18286:	18c3      	adds	r3, r0, r3
   18288:	229c      	movs	r2, #156	; 0x9c
   1828a:	18e3      	adds	r3, r4, r3
   1828c:	189b      	adds	r3, r3, r2
   1828e:	1d7a      	adds	r2, r7, #5
   18290:	7812      	ldrb	r2, [r2, #0]
   18292:	701a      	strb	r2, [r3, #0]
}
   18294:	46bd      	mov	sp, r7
   18296:	b003      	add	sp, #12
   18298:	bd90      	pop	{r4, r7, pc}
   1829a:	46c0      	nop			; (mov r8, r8)
   1829c:	0003766c 	.word	0x0003766c
   182a0:	00018a55 	.word	0x00018a55
   182a4:	20000dc0 	.word	0x20000dc0
   182a8:	000376b0 	.word	0x000376b0
   182ac:	00018661 	.word	0x00018661

000182b0 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
   182b0:	b590      	push	{r4, r7, lr}
   182b2:	b083      	sub	sp, #12
   182b4:	af00      	add	r7, sp, #0
   182b6:	0002      	movs	r2, r0
   182b8:	1dfb      	adds	r3, r7, #7
   182ba:	701a      	strb	r2, [r3, #0]
   182bc:	1dbb      	adds	r3, r7, #6
   182be:	1c0a      	adds	r2, r1, #0
   182c0:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   182c2:	1dfb      	adds	r3, r7, #7
   182c4:	781b      	ldrb	r3, [r3, #0]
   182c6:	2b08      	cmp	r3, #8
   182c8:	d905      	bls.n	182d6 <prvTraceGetObjectState+0x26>
   182ca:	4b1a      	ldr	r3, [pc, #104]	; (18334 <prvTraceGetObjectState+0x84>)
   182cc:	0018      	movs	r0, r3
   182ce:	4b1a      	ldr	r3, [pc, #104]	; (18338 <prvTraceGetObjectState+0x88>)
   182d0:	4798      	blx	r3
   182d2:	2300      	movs	r3, #0
   182d4:	e02a      	b.n	1832c <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   182d6:	4b19      	ldr	r3, [pc, #100]	; (1833c <prvTraceGetObjectState+0x8c>)
   182d8:	681a      	ldr	r2, [r3, #0]
   182da:	1dfb      	adds	r3, r7, #7
   182dc:	781b      	ldrb	r3, [r3, #0]
   182de:	2164      	movs	r1, #100	; 0x64
   182e0:	18d3      	adds	r3, r2, r3
   182e2:	185b      	adds	r3, r3, r1
   182e4:	781b      	ldrb	r3, [r3, #0]
   182e6:	1dba      	adds	r2, r7, #6
   182e8:	7812      	ldrb	r2, [r2, #0]
   182ea:	429a      	cmp	r2, r3
   182ec:	d905      	bls.n	182fa <prvTraceGetObjectState+0x4a>
   182ee:	4b14      	ldr	r3, [pc, #80]	; (18340 <prvTraceGetObjectState+0x90>)
   182f0:	0018      	movs	r0, r3
   182f2:	4b11      	ldr	r3, [pc, #68]	; (18338 <prvTraceGetObjectState+0x88>)
   182f4:	4798      	blx	r3
   182f6:	2300      	movs	r3, #0
   182f8:	e018      	b.n	1832c <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
   182fa:	4b10      	ldr	r3, [pc, #64]	; (1833c <prvTraceGetObjectState+0x8c>)
   182fc:	681c      	ldr	r4, [r3, #0]
   182fe:	1dfb      	adds	r3, r7, #7
   18300:	781a      	ldrb	r2, [r3, #0]
   18302:	1dbb      	adds	r3, r7, #6
   18304:	781b      	ldrb	r3, [r3, #0]
   18306:	0011      	movs	r1, r2
   18308:	0018      	movs	r0, r3
   1830a:	4b0e      	ldr	r3, [pc, #56]	; (18344 <prvTraceGetObjectState+0x94>)
   1830c:	4798      	blx	r3
   1830e:	0003      	movs	r3, r0
   18310:	0018      	movs	r0, r3
   18312:	4b0a      	ldr	r3, [pc, #40]	; (1833c <prvTraceGetObjectState+0x8c>)
   18314:	681a      	ldr	r2, [r3, #0]
   18316:	1dfb      	adds	r3, r7, #7
   18318:	781b      	ldrb	r3, [r3, #0]
   1831a:	2170      	movs	r1, #112	; 0x70
   1831c:	18d3      	adds	r3, r2, r3
   1831e:	185b      	adds	r3, r3, r1
   18320:	781b      	ldrb	r3, [r3, #0]
   18322:	18c3      	adds	r3, r0, r3
   18324:	229c      	movs	r2, #156	; 0x9c
   18326:	18e3      	adds	r3, r4, r3
   18328:	189b      	adds	r3, r3, r2
   1832a:	781b      	ldrb	r3, [r3, #0]
}
   1832c:	0018      	movs	r0, r3
   1832e:	46bd      	mov	sp, r7
   18330:	b003      	add	sp, #12
   18332:	bd90      	pop	{r4, r7, pc}
   18334:	000376ec 	.word	0x000376ec
   18338:	00018a55 	.word	0x00018a55
   1833c:	20000dc0 	.word	0x20000dc0
   18340:	00037730 	.word	0x00037730
   18344:	00018661 	.word	0x00018661

00018348 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
   18348:	b590      	push	{r4, r7, lr}
   1834a:	b083      	sub	sp, #12
   1834c:	af00      	add	r7, sp, #0
   1834e:	0002      	movs	r2, r0
   18350:	1dfb      	adds	r3, r7, #7
   18352:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
   18354:	4b11      	ldr	r3, [pc, #68]	; (1839c <prvTraceSetTaskInstanceFinished+0x54>)
   18356:	681b      	ldr	r3, [r3, #0]
   18358:	2267      	movs	r2, #103	; 0x67
   1835a:	5c9b      	ldrb	r3, [r3, r2]
   1835c:	1dfa      	adds	r2, r7, #7
   1835e:	7812      	ldrb	r2, [r2, #0]
   18360:	429a      	cmp	r2, r3
   18362:	d904      	bls.n	1836e <prvTraceSetTaskInstanceFinished+0x26>
   18364:	4b0e      	ldr	r3, [pc, #56]	; (183a0 <prvTraceSetTaskInstanceFinished+0x58>)
   18366:	0018      	movs	r0, r3
   18368:	4b0e      	ldr	r3, [pc, #56]	; (183a4 <prvTraceSetTaskInstanceFinished+0x5c>)
   1836a:	4798      	blx	r3
   1836c:	e013      	b.n	18396 <prvTraceSetTaskInstanceFinished+0x4e>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
   1836e:	4b0b      	ldr	r3, [pc, #44]	; (1839c <prvTraceSetTaskInstanceFinished+0x54>)
   18370:	681c      	ldr	r4, [r3, #0]
   18372:	1dfb      	adds	r3, r7, #7
   18374:	781b      	ldrb	r3, [r3, #0]
   18376:	2103      	movs	r1, #3
   18378:	0018      	movs	r0, r3
   1837a:	4b0b      	ldr	r3, [pc, #44]	; (183a8 <prvTraceSetTaskInstanceFinished+0x60>)
   1837c:	4798      	blx	r3
   1837e:	0003      	movs	r3, r0
   18380:	0019      	movs	r1, r3
   18382:	4b06      	ldr	r3, [pc, #24]	; (1839c <prvTraceSetTaskInstanceFinished+0x54>)
   18384:	681b      	ldr	r3, [r3, #0]
   18386:	2273      	movs	r2, #115	; 0x73
   18388:	5c9b      	ldrb	r3, [r3, r2]
   1838a:	18cb      	adds	r3, r1, r3
   1838c:	229c      	movs	r2, #156	; 0x9c
   1838e:	18e3      	adds	r3, r4, r3
   18390:	189b      	adds	r3, r3, r2
   18392:	2200      	movs	r2, #0
   18394:	701a      	strb	r2, [r3, #0]
#endif
}
   18396:	46bd      	mov	sp, r7
   18398:	b003      	add	sp, #12
   1839a:	bd90      	pop	{r4, r7, pc}
   1839c:	20000dc0 	.word	0x20000dc0
   183a0:	0003776c 	.word	0x0003776c
   183a4:	00018a55 	.word	0x00018a55
   183a8:	00018661 	.word	0x00018661

000183ac <prvTraceInitTraceData>:
 ******************************************************************************/
RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{	
   183ac:	b580      	push	{r7, lr}
   183ae:	af00      	add	r7, sp, #0
	
	if (RecorderDataPtr == NULL)
   183b0:	4b75      	ldr	r3, [pc, #468]	; (18588 <prvTraceInitTraceData+0x1dc>)
   183b2:	681b      	ldr	r3, [r3, #0]
   183b4:	2b00      	cmp	r3, #0
   183b6:	d103      	bne.n	183c0 <prvTraceInitTraceData+0x14>
	{
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
   183b8:	4b73      	ldr	r3, [pc, #460]	; (18588 <prvTraceInitTraceData+0x1dc>)
   183ba:	4a74      	ldr	r2, [pc, #464]	; (1858c <prvTraceInitTraceData+0x1e0>)
   183bc:	601a      	str	r2, [r3, #0]
   183be:	e006      	b.n	183ce <prvTraceInitTraceData+0x22>
		}
#endif
	}
	else
	{
		if (RecorderDataPtr->startmarker0 == 1)
   183c0:	4b71      	ldr	r3, [pc, #452]	; (18588 <prvTraceInitTraceData+0x1dc>)
   183c2:	681b      	ldr	r3, [r3, #0]
   183c4:	781b      	ldrb	r3, [r3, #0]
   183c6:	b2db      	uxtb	r3, r3
   183c8:	2b01      	cmp	r3, #1
   183ca:	d100      	bne.n	183ce <prvTraceInitTraceData+0x22>
   183cc:	e0d8      	b.n	18580 <prvTraceInitTraceData+0x1d4>
			/* Already initialized */
			return;
		}
	}
	
	init_hwtc_count = TRC_HWTC_COUNT;
   183ce:	4b70      	ldr	r3, [pc, #448]	; (18590 <prvTraceInitTraceData+0x1e4>)
   183d0:	681a      	ldr	r2, [r3, #0]
   183d2:	4b70      	ldr	r3, [pc, #448]	; (18594 <prvTraceInitTraceData+0x1e8>)
   183d4:	601a      	str	r2, [r3, #0]
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
   183d6:	4b6c      	ldr	r3, [pc, #432]	; (18588 <prvTraceInitTraceData+0x1dc>)
   183d8:	6818      	ldr	r0, [r3, #0]
   183da:	23bd      	movs	r3, #189	; 0xbd
   183dc:	011b      	lsls	r3, r3, #4
   183de:	001a      	movs	r2, r3
   183e0:	2100      	movs	r1, #0
   183e2:	4b6d      	ldr	r3, [pc, #436]	; (18598 <prvTraceInitTraceData+0x1ec>)
   183e4:	4798      	blx	r3
	
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
   183e6:	4b68      	ldr	r3, [pc, #416]	; (18588 <prvTraceInitTraceData+0x1dc>)
   183e8:	681b      	ldr	r3, [r3, #0]
   183ea:	4a6c      	ldr	r2, [pc, #432]	; (1859c <prvTraceInitTraceData+0x1f0>)
   183ec:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
   183ee:	4b66      	ldr	r3, [pc, #408]	; (18588 <prvTraceInitTraceData+0x1dc>)
   183f0:	681b      	ldr	r3, [r3, #0]
   183f2:	2205      	movs	r2, #5
   183f4:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
   183f6:	4b64      	ldr	r3, [pc, #400]	; (18588 <prvTraceInitTraceData+0x1dc>)
   183f8:	681b      	ldr	r3, [r3, #0]
   183fa:	2200      	movs	r2, #0
   183fc:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
   183fe:	4b62      	ldr	r3, [pc, #392]	; (18588 <prvTraceInitTraceData+0x1dc>)
   18400:	681b      	ldr	r3, [r3, #0]
   18402:	22bd      	movs	r2, #189	; 0xbd
   18404:	0112      	lsls	r2, r2, #4
   18406:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
   18408:	4b5f      	ldr	r3, [pc, #380]	; (18588 <prvTraceInitTraceData+0x1dc>)
   1840a:	681b      	ldr	r3, [r3, #0]
   1840c:	2296      	movs	r2, #150	; 0x96
   1840e:	0052      	lsls	r2, r2, #1
   18410:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
   18412:	4b5d      	ldr	r3, [pc, #372]	; (18588 <prvTraceInitTraceData+0x1dc>)
   18414:	681b      	ldr	r3, [r3, #0]
   18416:	4a62      	ldr	r2, [pc, #392]	; (185a0 <prvTraceInitTraceData+0x1f4>)
   18418:	655a      	str	r2, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
   1841a:	4b5b      	ldr	r3, [pc, #364]	; (18588 <prvTraceInitTraceData+0x1dc>)
   1841c:	681b      	ldr	r3, [r3, #0]
   1841e:	2200      	movs	r2, #0
   18420:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
   18422:	4b59      	ldr	r3, [pc, #356]	; (18588 <prvTraceInitTraceData+0x1dc>)
   18424:	681b      	ldr	r3, [r3, #0]
   18426:	2200      	movs	r2, #0
   18428:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
   1842a:	4b5e      	ldr	r3, [pc, #376]	; (185a4 <prvTraceInitTraceData+0x1f8>)
   1842c:	4798      	blx	r3

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
   1842e:	4b56      	ldr	r3, [pc, #344]	; (18588 <prvTraceInitTraceData+0x1dc>)
   18430:	681b      	ldr	r3, [r3, #0]
   18432:	4a5d      	ldr	r2, [pc, #372]	; (185a8 <prvTraceInitTraceData+0x1fc>)
   18434:	495d      	ldr	r1, [pc, #372]	; (185ac <prvTraceInitTraceData+0x200>)
   18436:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
   18438:	4b53      	ldr	r3, [pc, #332]	; (18588 <prvTraceInitTraceData+0x1dc>)
   1843a:	681a      	ldr	r2, [r3, #0]
   1843c:	23ac      	movs	r3, #172	; 0xac
   1843e:	00db      	lsls	r3, r3, #3
   18440:	21c8      	movs	r1, #200	; 0xc8
   18442:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
   18444:	4b50      	ldr	r3, [pc, #320]	; (18588 <prvTraceInitTraceData+0x1dc>)
   18446:	681b      	ldr	r3, [r3, #0]
   18448:	4a59      	ldr	r2, [pc, #356]	; (185b0 <prvTraceInitTraceData+0x204>)
   1844a:	2101      	movs	r1, #1
   1844c:	5099      	str	r1, [r3, r2]
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
   1844e:	4b4e      	ldr	r3, [pc, #312]	; (18588 <prvTraceInitTraceData+0x1dc>)
   18450:	681a      	ldr	r2, [r3, #0]
   18452:	23d7      	movs	r3, #215	; 0xd7
   18454:	00db      	lsls	r3, r3, #3
   18456:	4957      	ldr	r1, [pc, #348]	; (185b4 <prvTraceInitTraceData+0x208>)
   18458:	50d1      	str	r1, [r2, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
   1845a:	4b4b      	ldr	r3, [pc, #300]	; (18588 <prvTraceInitTraceData+0x1dc>)
   1845c:	681b      	ldr	r3, [r3, #0]
   1845e:	4a56      	ldr	r2, [pc, #344]	; (185b8 <prvTraceInitTraceData+0x20c>)
   18460:	4694      	mov	ip, r2
   18462:	4463      	add	r3, ip
   18464:	4955      	ldr	r1, [pc, #340]	; (185bc <prvTraceInitTraceData+0x210>)
   18466:	2250      	movs	r2, #80	; 0x50
   18468:	0018      	movs	r0, r3
   1846a:	4b55      	ldr	r3, [pc, #340]	; (185c0 <prvTraceInitTraceData+0x214>)
   1846c:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
   1846e:	4b46      	ldr	r3, [pc, #280]	; (18588 <prvTraceInitTraceData+0x1dc>)
   18470:	681b      	ldr	r3, [r3, #0]
   18472:	4a54      	ldr	r2, [pc, #336]	; (185c4 <prvTraceInitTraceData+0x218>)
   18474:	4954      	ldr	r1, [pc, #336]	; (185c8 <prvTraceInitTraceData+0x21c>)
   18476:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
   18478:	4b43      	ldr	r3, [pc, #268]	; (18588 <prvTraceInitTraceData+0x1dc>)
   1847a:	681b      	ldr	r3, [r3, #0]
   1847c:	4a53      	ldr	r2, [pc, #332]	; (185cc <prvTraceInitTraceData+0x220>)
   1847e:	210a      	movs	r1, #10
   18480:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
   18482:	4b41      	ldr	r3, [pc, #260]	; (18588 <prvTraceInitTraceData+0x1dc>)
   18484:	681b      	ldr	r3, [r3, #0]
   18486:	4a52      	ldr	r2, [pc, #328]	; (185d0 <prvTraceInitTraceData+0x224>)
   18488:	210b      	movs	r1, #11
   1848a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
   1848c:	4b3e      	ldr	r3, [pc, #248]	; (18588 <prvTraceInitTraceData+0x1dc>)
   1848e:	681b      	ldr	r3, [r3, #0]
   18490:	4a50      	ldr	r2, [pc, #320]	; (185d4 <prvTraceInitTraceData+0x228>)
   18492:	210c      	movs	r1, #12
   18494:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
   18496:	4b3c      	ldr	r3, [pc, #240]	; (18588 <prvTraceInitTraceData+0x1dc>)
   18498:	681b      	ldr	r3, [r3, #0]
   1849a:	4a4f      	ldr	r2, [pc, #316]	; (185d8 <prvTraceInitTraceData+0x22c>)
   1849c:	210d      	movs	r1, #13
   1849e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
   184a0:	4b39      	ldr	r3, [pc, #228]	; (18588 <prvTraceInitTraceData+0x1dc>)
   184a2:	681b      	ldr	r3, [r3, #0]
   184a4:	4a4d      	ldr	r2, [pc, #308]	; (185dc <prvTraceInitTraceData+0x230>)
   184a6:	2171      	movs	r1, #113	; 0x71
   184a8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
   184aa:	4b37      	ldr	r3, [pc, #220]	; (18588 <prvTraceInitTraceData+0x1dc>)
   184ac:	681b      	ldr	r3, [r3, #0]
   184ae:	4a4c      	ldr	r2, [pc, #304]	; (185e0 <prvTraceInitTraceData+0x234>)
   184b0:	2172      	movs	r1, #114	; 0x72
   184b2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
   184b4:	4b34      	ldr	r3, [pc, #208]	; (18588 <prvTraceInitTraceData+0x1dc>)
   184b6:	681b      	ldr	r3, [r3, #0]
   184b8:	4a4a      	ldr	r2, [pc, #296]	; (185e4 <prvTraceInitTraceData+0x238>)
   184ba:	2173      	movs	r1, #115	; 0x73
   184bc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
   184be:	4b32      	ldr	r3, [pc, #200]	; (18588 <prvTraceInitTraceData+0x1dc>)
   184c0:	681b      	ldr	r3, [r3, #0]
   184c2:	4a49      	ldr	r2, [pc, #292]	; (185e8 <prvTraceInitTraceData+0x23c>)
   184c4:	2174      	movs	r1, #116	; 0x74
   184c6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
   184c8:	4b2f      	ldr	r3, [pc, #188]	; (18588 <prvTraceInitTraceData+0x1dc>)
   184ca:	681b      	ldr	r3, [r3, #0]
   184cc:	4a47      	ldr	r2, [pc, #284]	; (185ec <prvTraceInitTraceData+0x240>)
   184ce:	21f1      	movs	r1, #241	; 0xf1
   184d0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
   184d2:	4b2d      	ldr	r3, [pc, #180]	; (18588 <prvTraceInitTraceData+0x1dc>)
   184d4:	681b      	ldr	r3, [r3, #0]
   184d6:	4a46      	ldr	r2, [pc, #280]	; (185f0 <prvTraceInitTraceData+0x244>)
   184d8:	21f2      	movs	r1, #242	; 0xf2
   184da:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
   184dc:	4b2a      	ldr	r3, [pc, #168]	; (18588 <prvTraceInitTraceData+0x1dc>)
   184de:	681b      	ldr	r3, [r3, #0]
   184e0:	4a44      	ldr	r2, [pc, #272]	; (185f4 <prvTraceInitTraceData+0x248>)
   184e2:	21f3      	movs	r1, #243	; 0xf3
   184e4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
   184e6:	4b28      	ldr	r3, [pc, #160]	; (18588 <prvTraceInitTraceData+0x1dc>)
   184e8:	681b      	ldr	r3, [r3, #0]
   184ea:	4a43      	ldr	r2, [pc, #268]	; (185f8 <prvTraceInitTraceData+0x24c>)
   184ec:	21f4      	movs	r1, #244	; 0xf4
   184ee:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS) + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
   184f0:	4b42      	ldr	r3, [pc, #264]	; (185fc <prvTraceInitTraceData+0x250>)
   184f2:	4798      	blx	r3
	and the fields are volatile to ensure this assignment order. This to avoid any 
	chance of accidental duplicates of this elsewhere in memory.
	
	Moreover, the fields are set byte-by-byte to avoid endian issues.*/
	
	RecorderDataPtr->startmarker11 = 0xF4;
   184f4:	4b24      	ldr	r3, [pc, #144]	; (18588 <prvTraceInitTraceData+0x1dc>)
   184f6:	681b      	ldr	r3, [r3, #0]
   184f8:	22f4      	movs	r2, #244	; 0xf4
   184fa:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
   184fc:	4b22      	ldr	r3, [pc, #136]	; (18588 <prvTraceInitTraceData+0x1dc>)
   184fe:	681b      	ldr	r3, [r3, #0]
   18500:	22f3      	movs	r2, #243	; 0xf3
   18502:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
   18504:	4b20      	ldr	r3, [pc, #128]	; (18588 <prvTraceInitTraceData+0x1dc>)
   18506:	681b      	ldr	r3, [r3, #0]
   18508:	22f2      	movs	r2, #242	; 0xf2
   1850a:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
   1850c:	4b1e      	ldr	r3, [pc, #120]	; (18588 <prvTraceInitTraceData+0x1dc>)
   1850e:	681b      	ldr	r3, [r3, #0]
   18510:	22f1      	movs	r2, #241	; 0xf1
   18512:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
   18514:	4b1c      	ldr	r3, [pc, #112]	; (18588 <prvTraceInitTraceData+0x1dc>)
   18516:	681b      	ldr	r3, [r3, #0]
   18518:	2274      	movs	r2, #116	; 0x74
   1851a:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
   1851c:	4b1a      	ldr	r3, [pc, #104]	; (18588 <prvTraceInitTraceData+0x1dc>)
   1851e:	681b      	ldr	r3, [r3, #0]
   18520:	2273      	movs	r2, #115	; 0x73
   18522:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
   18524:	4b18      	ldr	r3, [pc, #96]	; (18588 <prvTraceInitTraceData+0x1dc>)
   18526:	681b      	ldr	r3, [r3, #0]
   18528:	2272      	movs	r2, #114	; 0x72
   1852a:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
   1852c:	4b16      	ldr	r3, [pc, #88]	; (18588 <prvTraceInitTraceData+0x1dc>)
   1852e:	681b      	ldr	r3, [r3, #0]
   18530:	2271      	movs	r2, #113	; 0x71
   18532:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
   18534:	4b14      	ldr	r3, [pc, #80]	; (18588 <prvTraceInitTraceData+0x1dc>)
   18536:	681b      	ldr	r3, [r3, #0]
   18538:	2204      	movs	r2, #4
   1853a:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
   1853c:	4b12      	ldr	r3, [pc, #72]	; (18588 <prvTraceInitTraceData+0x1dc>)
   1853e:	681b      	ldr	r3, [r3, #0]
   18540:	2203      	movs	r2, #3
   18542:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
   18544:	4b10      	ldr	r3, [pc, #64]	; (18588 <prvTraceInitTraceData+0x1dc>)
   18546:	681b      	ldr	r3, [r3, #0]
   18548:	2202      	movs	r2, #2
   1854a:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
   1854c:	4b0e      	ldr	r3, [pc, #56]	; (18588 <prvTraceInitTraceData+0x1dc>)
   1854e:	681b      	ldr	r3, [r3, #0]
   18550:	2201      	movs	r2, #1
   18552:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
   18554:	4b2a      	ldr	r3, [pc, #168]	; (18600 <prvTraceInitTraceData+0x254>)
   18556:	681b      	ldr	r3, [r3, #0]
   18558:	2b00      	cmp	r3, #0
   1855a:	d012      	beq.n	18582 <prvTraceInitTraceData+0x1d6>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   1855c:	4b0a      	ldr	r3, [pc, #40]	; (18588 <prvTraceInitTraceData+0x1dc>)
   1855e:	681b      	ldr	r3, [r3, #0]
   18560:	4a15      	ldr	r2, [pc, #84]	; (185b8 <prvTraceInitTraceData+0x20c>)
   18562:	1898      	adds	r0, r3, r2
   18564:	4b26      	ldr	r3, [pc, #152]	; (18600 <prvTraceInitTraceData+0x254>)
   18566:	681b      	ldr	r3, [r3, #0]
   18568:	2250      	movs	r2, #80	; 0x50
   1856a:	0019      	movs	r1, r3
   1856c:	4b14      	ldr	r3, [pc, #80]	; (185c0 <prvTraceInitTraceData+0x214>)
   1856e:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;
   18570:	4b05      	ldr	r3, [pc, #20]	; (18588 <prvTraceInitTraceData+0x1dc>)
   18572:	681b      	ldr	r3, [r3, #0]
   18574:	4a23      	ldr	r2, [pc, #140]	; (18604 <prvTraceInitTraceData+0x258>)
   18576:	2101      	movs	r1, #1
   18578:	5099      	str	r1, [r3, r2]
		vTraceStop();
   1857a:	4b23      	ldr	r3, [pc, #140]	; (18608 <prvTraceInitTraceData+0x25c>)
   1857c:	4798      	blx	r3
   1857e:	e000      	b.n	18582 <prvTraceInitTraceData+0x1d6>
			return;
   18580:	46c0      	nop			; (mov r8, r8)

	
#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
#endif
}
   18582:	46bd      	mov	sp, r7
   18584:	bd80      	pop	{r7, pc}
   18586:	46c0      	nop			; (mov r8, r8)
   18588:	20000dc0 	.word	0x20000dc0
   1858c:	200049c0 	.word	0x200049c0
   18590:	e000e018 	.word	0xe000e018
   18594:	20005590 	.word	0x20005590
   18598:	000345df 	.word	0x000345df
   1859c:	00001aa1 	.word	0x00001aa1
   185a0:	f0f0f0f0 	.word	0xf0f0f0f0
   185a4:	00017511 	.word	0x00017511
   185a8:	0000055c 	.word	0x0000055c
   185ac:	f1f1f1f1 	.word	0xf1f1f1f1
   185b0:	00000564 	.word	0x00000564
   185b4:	f2f2f2f2 	.word	0xf2f2f2f2
   185b8:	000006bc 	.word	0x000006bc
   185bc:	000377b4 	.word	0x000377b4
   185c0:	00018921 	.word	0x00018921
   185c4:	0000070c 	.word	0x0000070c
   185c8:	f3f3f3f3 	.word	0xf3f3f3f3
   185cc:	00000bc4 	.word	0x00000bc4
   185d0:	00000bc5 	.word	0x00000bc5
   185d4:	00000bc6 	.word	0x00000bc6
   185d8:	00000bc7 	.word	0x00000bc7
   185dc:	00000bc8 	.word	0x00000bc8
   185e0:	00000bc9 	.word	0x00000bc9
   185e4:	00000bca 	.word	0x00000bca
   185e8:	00000bcb 	.word	0x00000bcb
   185ec:	00000bcc 	.word	0x00000bcc
   185f0:	00000bcd 	.word	0x00000bcd
   185f4:	00000bce 	.word	0x00000bce
   185f8:	00000bcf 	.word	0x00000bcf
   185fc:	000176b1 	.word	0x000176b1
   18600:	20000d20 	.word	0x20000d20
   18604:	000006b4 	.word	0x000006b4
   18608:	00017919 	.word	0x00017919

0001860c <prvTraceNextFreeEventBufferSlot>:


void* prvTraceNextFreeEventBufferSlot(void)
{
   1860c:	b580      	push	{r7, lr}
   1860e:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
   18610:	4b10      	ldr	r3, [pc, #64]	; (18654 <prvTraceNextFreeEventBufferSlot+0x48>)
   18612:	681b      	ldr	r3, [r3, #0]
   18614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18616:	2b00      	cmp	r3, #0
   18618:	d101      	bne.n	1861e <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
   1861a:	2300      	movs	r3, #0
   1861c:	e017      	b.n	1864e <prvTraceNextFreeEventBufferSlot+0x42>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   1861e:	4b0d      	ldr	r3, [pc, #52]	; (18654 <prvTraceNextFreeEventBufferSlot+0x48>)
   18620:	681b      	ldr	r3, [r3, #0]
   18622:	69da      	ldr	r2, [r3, #28]
   18624:	232c      	movs	r3, #44	; 0x2c
   18626:	33ff      	adds	r3, #255	; 0xff
   18628:	429a      	cmp	r2, r3
   1862a:	d905      	bls.n	18638 <prvTraceNextFreeEventBufferSlot+0x2c>
	{
		prvTraceError("Attempt to index outside event buffer!");
   1862c:	4b0a      	ldr	r3, [pc, #40]	; (18658 <prvTraceNextFreeEventBufferSlot+0x4c>)
   1862e:	0018      	movs	r0, r3
   18630:	4b0a      	ldr	r3, [pc, #40]	; (1865c <prvTraceNextFreeEventBufferSlot+0x50>)
   18632:	4798      	blx	r3
		return NULL;
   18634:	2300      	movs	r3, #0
   18636:	e00a      	b.n	1864e <prvTraceNextFreeEventBufferSlot+0x42>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
   18638:	4b06      	ldr	r3, [pc, #24]	; (18654 <prvTraceNextFreeEventBufferSlot+0x48>)
   1863a:	681a      	ldr	r2, [r3, #0]
   1863c:	4b05      	ldr	r3, [pc, #20]	; (18654 <prvTraceNextFreeEventBufferSlot+0x48>)
   1863e:	681b      	ldr	r3, [r3, #0]
   18640:	69db      	ldr	r3, [r3, #28]
   18642:	009b      	lsls	r3, r3, #2
   18644:	21e2      	movs	r1, #226	; 0xe2
   18646:	00c9      	lsls	r1, r1, #3
   18648:	468c      	mov	ip, r1
   1864a:	4463      	add	r3, ip
   1864c:	18d3      	adds	r3, r2, r3
}
   1864e:	0018      	movs	r0, r3
   18650:	46bd      	mov	sp, r7
   18652:	bd80      	pop	{r7, pc}
   18654:	20000dc0 	.word	0x20000dc0
   18658:	000377c8 	.word	0x000377c8
   1865c:	00018a55 	.word	0x00018a55

00018660 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
   18660:	b580      	push	{r7, lr}
   18662:	b082      	sub	sp, #8
   18664:	af00      	add	r7, sp, #0
   18666:	0002      	movs	r2, r0
   18668:	1dfb      	adds	r3, r7, #7
   1866a:	701a      	strb	r2, [r3, #0]
   1866c:	1dbb      	adds	r3, r7, #6
   1866e:	1c0a      	adds	r2, r1, #0
   18670:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   18672:	1dbb      	adds	r3, r7, #6
   18674:	781b      	ldrb	r3, [r3, #0]
   18676:	2b08      	cmp	r3, #8
   18678:	d905      	bls.n	18686 <uiIndexOfObject+0x26>
   1867a:	4b2a      	ldr	r3, [pc, #168]	; (18724 <uiIndexOfObject+0xc4>)
   1867c:	0018      	movs	r0, r3
   1867e:	4b2a      	ldr	r3, [pc, #168]	; (18728 <uiIndexOfObject+0xc8>)
   18680:	4798      	blx	r3
   18682:	2300      	movs	r3, #0
   18684:	e049      	b.n	1871a <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
   18686:	1dfb      	adds	r3, r7, #7
   18688:	781b      	ldrb	r3, [r3, #0]
   1868a:	2b00      	cmp	r3, #0
   1868c:	d00b      	beq.n	186a6 <uiIndexOfObject+0x46>
   1868e:	4b27      	ldr	r3, [pc, #156]	; (1872c <uiIndexOfObject+0xcc>)
   18690:	681a      	ldr	r2, [r3, #0]
   18692:	1dbb      	adds	r3, r7, #6
   18694:	781b      	ldrb	r3, [r3, #0]
   18696:	2164      	movs	r1, #100	; 0x64
   18698:	18d3      	adds	r3, r2, r3
   1869a:	185b      	adds	r3, r3, r1
   1869c:	781b      	ldrb	r3, [r3, #0]
   1869e:	1dfa      	adds	r2, r7, #7
   186a0:	7812      	ldrb	r2, [r2, #0]
   186a2:	429a      	cmp	r2, r3
   186a4:	d905      	bls.n	186b2 <uiIndexOfObject+0x52>
   186a6:	4b22      	ldr	r3, [pc, #136]	; (18730 <uiIndexOfObject+0xd0>)
   186a8:	0018      	movs	r0, r3
   186aa:	4b1f      	ldr	r3, [pc, #124]	; (18728 <uiIndexOfObject+0xc8>)
   186ac:	4798      	blx	r3
   186ae:	2300      	movs	r3, #0
   186b0:	e033      	b.n	1871a <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   186b2:	1dbb      	adds	r3, r7, #6
   186b4:	781b      	ldrb	r3, [r3, #0]
   186b6:	2b08      	cmp	r3, #8
   186b8:	d82a      	bhi.n	18710 <uiIndexOfObject+0xb0>
   186ba:	1dfb      	adds	r3, r7, #7
   186bc:	781b      	ldrb	r3, [r3, #0]
   186be:	2b00      	cmp	r3, #0
   186c0:	d026      	beq.n	18710 <uiIndexOfObject+0xb0>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
   186c2:	4b1a      	ldr	r3, [pc, #104]	; (1872c <uiIndexOfObject+0xcc>)
   186c4:	681a      	ldr	r2, [r3, #0]
   186c6:	1dbb      	adds	r3, r7, #6
   186c8:	781b      	ldrb	r3, [r3, #0]
   186ca:	2164      	movs	r1, #100	; 0x64
   186cc:	18d3      	adds	r3, r2, r3
   186ce:	185b      	adds	r3, r3, r1
   186d0:	781b      	ldrb	r3, [r3, #0]
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   186d2:	1dfa      	adds	r2, r7, #7
   186d4:	7812      	ldrb	r2, [r2, #0]
   186d6:	429a      	cmp	r2, r3
   186d8:	d81a      	bhi.n	18710 <uiIndexOfObject+0xb0>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   186da:	4b14      	ldr	r3, [pc, #80]	; (1872c <uiIndexOfObject+0xcc>)
   186dc:	681a      	ldr	r2, [r3, #0]
   186de:	1dbb      	adds	r3, r7, #6
   186e0:	781b      	ldrb	r3, [r3, #0]
   186e2:	3340      	adds	r3, #64	; 0x40
   186e4:	005b      	lsls	r3, r3, #1
   186e6:	18d3      	adds	r3, r2, r3
   186e8:	3308      	adds	r3, #8
   186ea:	881a      	ldrh	r2, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   186ec:	4b0f      	ldr	r3, [pc, #60]	; (1872c <uiIndexOfObject+0xcc>)
   186ee:	6819      	ldr	r1, [r3, #0]
   186f0:	1dbb      	adds	r3, r7, #6
   186f2:	781b      	ldrb	r3, [r3, #0]
   186f4:	207c      	movs	r0, #124	; 0x7c
   186f6:	18cb      	adds	r3, r1, r3
   186f8:	181b      	adds	r3, r3, r0
   186fa:	781b      	ldrb	r3, [r3, #0]
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   186fc:	b29b      	uxth	r3, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   186fe:	1df9      	adds	r1, r7, #7
   18700:	7809      	ldrb	r1, [r1, #0]
   18702:	3901      	subs	r1, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   18704:	b289      	uxth	r1, r1
   18706:	434b      	muls	r3, r1
   18708:	b29b      	uxth	r3, r3
   1870a:	18d3      	adds	r3, r2, r3
   1870c:	b29b      	uxth	r3, r3
   1870e:	e004      	b.n	1871a <uiIndexOfObject+0xba>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
   18710:	4b08      	ldr	r3, [pc, #32]	; (18734 <uiIndexOfObject+0xd4>)
   18712:	0018      	movs	r0, r3
   18714:	4b04      	ldr	r3, [pc, #16]	; (18728 <uiIndexOfObject+0xc8>)
   18716:	4798      	blx	r3
	return 0;
   18718:	2300      	movs	r3, #0
}
   1871a:	0018      	movs	r0, r3
   1871c:	46bd      	mov	sp, r7
   1871e:	b002      	add	sp, #8
   18720:	bd80      	pop	{r7, pc}
   18722:	46c0      	nop			; (mov r8, r8)
   18724:	000377f0 	.word	0x000377f0
   18728:	00018a55 	.word	0x00018a55
   1872c:	20000dc0 	.word	0x20000dc0
   18730:	00037830 	.word	0x00037830
   18734:	00037870 	.word	0x00037870

00018738 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
   18738:	b580      	push	{r7, lr}
   1873a:	b088      	sub	sp, #32
   1873c:	af00      	add	r7, sp, #0
   1873e:	0002      	movs	r2, r0
   18740:	1dfb      	adds	r3, r7, #7
   18742:	701a      	strb	r2, [r3, #0]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
   18744:	4b5a      	ldr	r3, [pc, #360]	; (188b0 <prvTraceGetObjectHandle+0x178>)
   18746:	681b      	ldr	r3, [r3, #0]
   18748:	2b00      	cmp	r3, #0
   1874a:	d105      	bne.n	18758 <prvTraceGetObjectHandle+0x20>
   1874c:	4b59      	ldr	r3, [pc, #356]	; (188b4 <prvTraceGetObjectHandle+0x17c>)
   1874e:	0018      	movs	r0, r3
   18750:	4b59      	ldr	r3, [pc, #356]	; (188b8 <prvTraceGetObjectHandle+0x180>)
   18752:	4798      	blx	r3
   18754:	2300      	movs	r3, #0
   18756:	e0a7      	b.n	188a8 <prvTraceGetObjectHandle+0x170>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   18758:	1dfb      	adds	r3, r7, #7
   1875a:	781b      	ldrb	r3, [r3, #0]
   1875c:	2b08      	cmp	r3, #8
   1875e:	d905      	bls.n	1876c <prvTraceGetObjectHandle+0x34>
   18760:	4b56      	ldr	r3, [pc, #344]	; (188bc <prvTraceGetObjectHandle+0x184>)
   18762:	0018      	movs	r0, r3
   18764:	4b54      	ldr	r3, [pc, #336]	; (188b8 <prvTraceGetObjectHandle+0x180>)
   18766:	4798      	blx	r3
   18768:	2300      	movs	r3, #0
   1876a:	e09d      	b.n	188a8 <prvTraceGetObjectHandle+0x170>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1876c:	f3ef 8310 	mrs	r3, PRIMASK
   18770:	60fb      	str	r3, [r7, #12]
  return(result);
   18772:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
   18774:	61bb      	str	r3, [r7, #24]
   18776:	2301      	movs	r3, #1
   18778:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1877a:	693b      	ldr	r3, [r7, #16]
   1877c:	f383 8810 	msr	PRIMASK, r3
   18780:	4b4f      	ldr	r3, [pc, #316]	; (188c0 <prvTraceGetObjectHandle+0x188>)
   18782:	681b      	ldr	r3, [r3, #0]
   18784:	1c5a      	adds	r2, r3, #1
   18786:	4b4e      	ldr	r3, [pc, #312]	; (188c0 <prvTraceGetObjectHandle+0x188>)
   18788:	601a      	str	r2, [r3, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
   1878a:	1dfb      	adds	r3, r7, #7
   1878c:	781a      	ldrb	r2, [r3, #0]
   1878e:	4b4d      	ldr	r3, [pc, #308]	; (188c4 <prvTraceGetObjectHandle+0x18c>)
   18790:	0052      	lsls	r2, r2, #1
   18792:	5ad3      	ldrh	r3, [r2, r3]
   18794:	001a      	movs	r2, r3
   18796:	4b4c      	ldr	r3, [pc, #304]	; (188c8 <prvTraceGetObjectHandle+0x190>)
   18798:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
   1879a:	4b4b      	ldr	r3, [pc, #300]	; (188c8 <prvTraceGetObjectHandle+0x190>)
   1879c:	681b      	ldr	r3, [r3, #0]
   1879e:	4a49      	ldr	r2, [pc, #292]	; (188c4 <prvTraceGetObjectHandle+0x18c>)
   187a0:	2148      	movs	r1, #72	; 0x48
   187a2:	18d3      	adds	r3, r2, r3
   187a4:	185b      	adds	r3, r3, r1
   187a6:	781b      	ldrb	r3, [r3, #0]
   187a8:	2b00      	cmp	r3, #0
   187aa:	d117      	bne.n	187dc <prvTraceGetObjectHandle+0xa4>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
   187ac:	4b46      	ldr	r3, [pc, #280]	; (188c8 <prvTraceGetObjectHandle+0x190>)
   187ae:	681a      	ldr	r2, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   187b0:	4b45      	ldr	r3, [pc, #276]	; (188c8 <prvTraceGetObjectHandle+0x190>)
   187b2:	681b      	ldr	r3, [r3, #0]
   187b4:	b2d9      	uxtb	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
   187b6:	1dfb      	adds	r3, r7, #7
   187b8:	781b      	ldrb	r3, [r3, #0]
   187ba:	4842      	ldr	r0, [pc, #264]	; (188c4 <prvTraceGetObjectHandle+0x18c>)
   187bc:	3308      	adds	r3, #8
   187be:	005b      	lsls	r3, r3, #1
   187c0:	18c3      	adds	r3, r0, r3
   187c2:	3302      	adds	r3, #2
   187c4:	881b      	ldrh	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   187c6:	b2db      	uxtb	r3, r3
   187c8:	1acb      	subs	r3, r1, r3
   187ca:	b2db      	uxtb	r3, r3
   187cc:	3301      	adds	r3, #1
   187ce:	b2d8      	uxtb	r0, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
   187d0:	4b3c      	ldr	r3, [pc, #240]	; (188c4 <prvTraceGetObjectHandle+0x18c>)
   187d2:	2148      	movs	r1, #72	; 0x48
   187d4:	189b      	adds	r3, r3, r2
   187d6:	185b      	adds	r3, r3, r1
   187d8:	1c02      	adds	r2, r0, #0
   187da:	701a      	strb	r2, [r3, #0]
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
   187dc:	4b3a      	ldr	r3, [pc, #232]	; (188c8 <prvTraceGetObjectHandle+0x190>)
   187de:	681a      	ldr	r2, [r3, #0]
   187e0:	231f      	movs	r3, #31
   187e2:	18fb      	adds	r3, r7, r3
   187e4:	4937      	ldr	r1, [pc, #220]	; (188c4 <prvTraceGetObjectHandle+0x18c>)
   187e6:	2048      	movs	r0, #72	; 0x48
   187e8:	188a      	adds	r2, r1, r2
   187ea:	1812      	adds	r2, r2, r0
   187ec:	7812      	ldrb	r2, [r2, #0]
   187ee:	701a      	strb	r2, [r3, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   187f0:	1dfb      	adds	r3, r7, #7
   187f2:	781a      	ldrb	r2, [r3, #0]
   187f4:	4b33      	ldr	r3, [pc, #204]	; (188c4 <prvTraceGetObjectHandle+0x18c>)
   187f6:	0052      	lsls	r2, r2, #1
   187f8:	5ad2      	ldrh	r2, [r2, r3]
		> objectHandleStacks.highestIndexOfClass[objectclass])
   187fa:	1dfb      	adds	r3, r7, #7
   187fc:	781b      	ldrb	r3, [r3, #0]
   187fe:	4931      	ldr	r1, [pc, #196]	; (188c4 <prvTraceGetObjectHandle+0x18c>)
   18800:	3310      	adds	r3, #16
   18802:	005b      	lsls	r3, r3, #1
   18804:	18cb      	adds	r3, r1, r3
   18806:	3304      	adds	r3, #4
   18808:	881b      	ldrh	r3, [r3, #0]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   1880a:	429a      	cmp	r2, r3
   1880c:	d90d      	bls.n	1882a <prvTraceGetObjectHandle+0xf2>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   1880e:	1dfb      	adds	r3, r7, #7
   18810:	781b      	ldrb	r3, [r3, #0]
   18812:	0018      	movs	r0, r3
   18814:	4b2d      	ldr	r3, [pc, #180]	; (188cc <prvTraceGetObjectHandle+0x194>)
   18816:	4798      	blx	r3
   18818:	0003      	movs	r3, r0
   1881a:	0018      	movs	r0, r3
   1881c:	4b26      	ldr	r3, [pc, #152]	; (188b8 <prvTraceGetObjectHandle+0x180>)
   1881e:	4798      	blx	r3
		handle = 0;
   18820:	231f      	movs	r3, #31
   18822:	18fb      	adds	r3, r7, r3
   18824:	2200      	movs	r2, #0
   18826:	701a      	strb	r2, [r3, #0]
   18828:	e031      	b.n	1888e <prvTraceGetObjectHandle+0x156>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
   1882a:	1dfb      	adds	r3, r7, #7
   1882c:	781b      	ldrb	r3, [r3, #0]
   1882e:	4a25      	ldr	r2, [pc, #148]	; (188c4 <prvTraceGetObjectHandle+0x18c>)
   18830:	0059      	lsls	r1, r3, #1
   18832:	5a8a      	ldrh	r2, [r1, r2]
   18834:	3201      	adds	r2, #1
   18836:	b291      	uxth	r1, r2
   18838:	4a22      	ldr	r2, [pc, #136]	; (188c4 <prvTraceGetObjectHandle+0x18c>)
   1883a:	005b      	lsls	r3, r3, #1
   1883c:	5299      	strh	r1, [r3, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   1883e:	1dfb      	adds	r3, r7, #7
   18840:	781a      	ldrb	r2, [r3, #0]
   18842:	4b20      	ldr	r3, [pc, #128]	; (188c4 <prvTraceGetObjectHandle+0x18c>)
   18844:	0052      	lsls	r2, r2, #1
   18846:	5ad3      	ldrh	r3, [r2, r3]
   18848:	0019      	movs	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
   1884a:	1dfb      	adds	r3, r7, #7
   1884c:	781b      	ldrb	r3, [r3, #0]
   1884e:	4a1d      	ldr	r2, [pc, #116]	; (188c4 <prvTraceGetObjectHandle+0x18c>)
   18850:	3308      	adds	r3, #8
   18852:	005b      	lsls	r3, r3, #1
   18854:	18d3      	adds	r3, r2, r3
   18856:	3302      	adds	r3, #2
   18858:	881b      	ldrh	r3, [r3, #0]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   1885a:	1acb      	subs	r3, r1, r3
   1885c:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
   1885e:	1dfb      	adds	r3, r7, #7
   18860:	781b      	ldrb	r3, [r3, #0]
   18862:	4a18      	ldr	r2, [pc, #96]	; (188c4 <prvTraceGetObjectHandle+0x18c>)
   18864:	3318      	adds	r3, #24
   18866:	005b      	lsls	r3, r3, #1
   18868:	18d3      	adds	r3, r2, r3
   1886a:	3306      	adds	r3, #6
   1886c:	881b      	ldrh	r3, [r3, #0]
   1886e:	001a      	movs	r2, r3
		if (hndCount >
   18870:	697b      	ldr	r3, [r7, #20]
   18872:	429a      	cmp	r2, r3
   18874:	da0b      	bge.n	1888e <prvTraceGetObjectHandle+0x156>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   18876:	1dfb      	adds	r3, r7, #7
   18878:	781b      	ldrb	r3, [r3, #0]
				(traceHandle)hndCount;
   1887a:	697a      	ldr	r2, [r7, #20]
   1887c:	b2d2      	uxtb	r2, r2
   1887e:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   18880:	4a10      	ldr	r2, [pc, #64]	; (188c4 <prvTraceGetObjectHandle+0x18c>)
   18882:	3318      	adds	r3, #24
   18884:	005b      	lsls	r3, r3, #1
   18886:	18d3      	adds	r3, r2, r3
   18888:	3306      	adds	r3, #6
   1888a:	1c0a      	adds	r2, r1, #0
   1888c:	801a      	strh	r2, [r3, #0]
		}
	}
	trcCRITICAL_SECTION_END();
   1888e:	4b0c      	ldr	r3, [pc, #48]	; (188c0 <prvTraceGetObjectHandle+0x188>)
   18890:	681b      	ldr	r3, [r3, #0]
   18892:	1e5a      	subs	r2, r3, #1
   18894:	4b0a      	ldr	r3, [pc, #40]	; (188c0 <prvTraceGetObjectHandle+0x188>)
   18896:	601a      	str	r2, [r3, #0]
   18898:	69bb      	ldr	r3, [r7, #24]
   1889a:	60bb      	str	r3, [r7, #8]
   1889c:	68bb      	ldr	r3, [r7, #8]
   1889e:	f383 8810 	msr	PRIMASK, r3

	return handle;
   188a2:	231f      	movs	r3, #31
   188a4:	18fb      	adds	r3, r7, r3
   188a6:	781b      	ldrb	r3, [r3, #0]
}
   188a8:	0018      	movs	r0, r3
   188aa:	46bd      	mov	sp, r7
   188ac:	b008      	add	sp, #32
   188ae:	bd80      	pop	{r7, pc}
   188b0:	20000dc0 	.word	0x20000dc0
   188b4:	00036cd0 	.word	0x00036cd0
   188b8:	00018a55 	.word	0x00018a55
   188bc:	000378b0 	.word	0x000378b0
   188c0:	20000d18 	.word	0x20000d18
   188c4:	20000d30 	.word	0x20000d30
   188c8:	20000dc4 	.word	0x20000dc4
   188cc:	00017775 	.word	0x00017775

000188d0 <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
   188d0:	b590      	push	{r4, r7, lr}
   188d2:	b085      	sub	sp, #20
   188d4:	af00      	add	r7, sp, #0
   188d6:	0002      	movs	r2, r0
   188d8:	1dfb      	adds	r3, r7, #7
   188da:	701a      	strb	r2, [r3, #0]
   188dc:	1dbb      	adds	r3, r7, #6
   188de:	1c0a      	adds	r2, r1, #0
   188e0:	701a      	strb	r2, [r3, #0]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
   188e2:	230e      	movs	r3, #14
   188e4:	18fc      	adds	r4, r7, r3
   188e6:	1dfb      	adds	r3, r7, #7
   188e8:	781a      	ldrb	r2, [r3, #0]
   188ea:	1dbb      	adds	r3, r7, #6
   188ec:	781b      	ldrb	r3, [r3, #0]
   188ee:	0011      	movs	r1, r2
   188f0:	0018      	movs	r0, r3
   188f2:	4b09      	ldr	r3, [pc, #36]	; (18918 <prvMarkObjectAsUsed+0x48>)
   188f4:	4798      	blx	r3
   188f6:	0003      	movs	r3, r0
   188f8:	8023      	strh	r3, [r4, #0]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
   188fa:	4b08      	ldr	r3, [pc, #32]	; (1891c <prvMarkObjectAsUsed+0x4c>)
   188fc:	681a      	ldr	r2, [r3, #0]
   188fe:	230e      	movs	r3, #14
   18900:	18fb      	adds	r3, r7, r3
   18902:	881b      	ldrh	r3, [r3, #0]
   18904:	219c      	movs	r1, #156	; 0x9c
   18906:	18d3      	adds	r3, r2, r3
   18908:	185b      	adds	r3, r3, r1
   1890a:	2201      	movs	r2, #1
   1890c:	701a      	strb	r2, [r3, #0]
}
   1890e:	46c0      	nop			; (mov r8, r8)
   18910:	46bd      	mov	sp, r7
   18912:	b005      	add	sp, #20
   18914:	bd90      	pop	{r4, r7, pc}
   18916:	46c0      	nop			; (mov r8, r8)
   18918:	00018661 	.word	0x00018661
   1891c:	20000dc0 	.word	0x20000dc0

00018920 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
   18920:	b580      	push	{r7, lr}
   18922:	b086      	sub	sp, #24
   18924:	af00      	add	r7, sp, #0
   18926:	60f8      	str	r0, [r7, #12]
   18928:	60b9      	str	r1, [r7, #8]
   1892a:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
   1892c:	2300      	movs	r3, #0
   1892e:	617b      	str	r3, [r7, #20]
   18930:	e010      	b.n	18954 <prvStrncpy+0x34>
	{
		dst[i] = src[i];
   18932:	68fa      	ldr	r2, [r7, #12]
   18934:	697b      	ldr	r3, [r7, #20]
   18936:	18d3      	adds	r3, r2, r3
   18938:	68b9      	ldr	r1, [r7, #8]
   1893a:	697a      	ldr	r2, [r7, #20]
   1893c:	188a      	adds	r2, r1, r2
   1893e:	7812      	ldrb	r2, [r2, #0]
   18940:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
   18942:	68ba      	ldr	r2, [r7, #8]
   18944:	697b      	ldr	r3, [r7, #20]
   18946:	18d3      	adds	r3, r2, r3
   18948:	781b      	ldrb	r3, [r3, #0]
   1894a:	2b00      	cmp	r3, #0
   1894c:	d007      	beq.n	1895e <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
   1894e:	697b      	ldr	r3, [r7, #20]
   18950:	3301      	adds	r3, #1
   18952:	617b      	str	r3, [r7, #20]
   18954:	697a      	ldr	r2, [r7, #20]
   18956:	687b      	ldr	r3, [r7, #4]
   18958:	429a      	cmp	r2, r3
   1895a:	d3ea      	bcc.n	18932 <prvStrncpy+0x12>
			break;
	}
}
   1895c:	e000      	b.n	18960 <prvStrncpy+0x40>
			break;
   1895e:	46c0      	nop			; (mov r8, r8)
}
   18960:	46c0      	nop			; (mov r8, r8)
   18962:	46bd      	mov	sp, r7
   18964:	b006      	add	sp, #24
   18966:	bd80      	pop	{r7, pc}

00018968 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
   18968:	b580      	push	{r7, lr}
   1896a:	b082      	sub	sp, #8
   1896c:	af00      	add	r7, sp, #0
   1896e:	603a      	str	r2, [r7, #0]
   18970:	1dfb      	adds	r3, r7, #7
   18972:	1c02      	adds	r2, r0, #0
   18974:	701a      	strb	r2, [r3, #0]
   18976:	1dbb      	adds	r3, r7, #6
   18978:	1c0a      	adds	r2, r1, #0
   1897a:	701a      	strb	r2, [r3, #0]
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
   1897c:	683b      	ldr	r3, [r7, #0]
   1897e:	2b00      	cmp	r3, #0
   18980:	d104      	bne.n	1898c <prvTraceSetObjectName+0x24>
   18982:	4b2a      	ldr	r3, [pc, #168]	; (18a2c <prvTraceSetObjectName+0xc4>)
   18984:	0018      	movs	r0, r3
   18986:	4b2a      	ldr	r3, [pc, #168]	; (18a30 <prvTraceSetObjectName+0xc8>)
   18988:	4798      	blx	r3
   1898a:	e04b      	b.n	18a24 <prvTraceSetObjectName+0xbc>

	if (objectclass >= TRACE_NCLASSES)
   1898c:	1dfb      	adds	r3, r7, #7
   1898e:	781b      	ldrb	r3, [r3, #0]
   18990:	2b08      	cmp	r3, #8
   18992:	d904      	bls.n	1899e <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
   18994:	4b27      	ldr	r3, [pc, #156]	; (18a34 <prvTraceSetObjectName+0xcc>)
   18996:	0018      	movs	r0, r3
   18998:	4b25      	ldr	r3, [pc, #148]	; (18a30 <prvTraceSetObjectName+0xc8>)
   1899a:	4798      	blx	r3
		return;
   1899c:	e042      	b.n	18a24 <prvTraceSetObjectName+0xbc>
	}

	if (handle == 0)
   1899e:	1dbb      	adds	r3, r7, #6
   189a0:	781b      	ldrb	r3, [r3, #0]
   189a2:	2b00      	cmp	r3, #0
   189a4:	d104      	bne.n	189b0 <prvTraceSetObjectName+0x48>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
   189a6:	4b24      	ldr	r3, [pc, #144]	; (18a38 <prvTraceSetObjectName+0xd0>)
   189a8:	0018      	movs	r0, r3
   189aa:	4b21      	ldr	r3, [pc, #132]	; (18a30 <prvTraceSetObjectName+0xc8>)
   189ac:	4798      	blx	r3
		return;
   189ae:	e039      	b.n	18a24 <prvTraceSetObjectName+0xbc>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
   189b0:	4b22      	ldr	r3, [pc, #136]	; (18a3c <prvTraceSetObjectName+0xd4>)
   189b2:	681a      	ldr	r2, [r3, #0]
   189b4:	1dfb      	adds	r3, r7, #7
   189b6:	781b      	ldrb	r3, [r3, #0]
   189b8:	2164      	movs	r1, #100	; 0x64
   189ba:	18d3      	adds	r3, r2, r3
   189bc:	185b      	adds	r3, r3, r1
   189be:	781b      	ldrb	r3, [r3, #0]
   189c0:	1dba      	adds	r2, r7, #6
   189c2:	7812      	ldrb	r2, [r2, #0]
   189c4:	429a      	cmp	r2, r3
   189c6:	d909      	bls.n	189dc <prvTraceSetObjectName+0x74>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   189c8:	1dfb      	adds	r3, r7, #7
   189ca:	781b      	ldrb	r3, [r3, #0]
   189cc:	0018      	movs	r0, r3
   189ce:	4b1c      	ldr	r3, [pc, #112]	; (18a40 <prvTraceSetObjectName+0xd8>)
   189d0:	4798      	blx	r3
   189d2:	0003      	movs	r3, r0
   189d4:	0018      	movs	r0, r3
   189d6:	4b16      	ldr	r3, [pc, #88]	; (18a30 <prvTraceSetObjectName+0xc8>)
   189d8:	4798      	blx	r3
   189da:	e023      	b.n	18a24 <prvTraceSetObjectName+0xbc>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
   189dc:	1dfb      	adds	r3, r7, #7
   189de:	781a      	ldrb	r2, [r3, #0]
   189e0:	1dbb      	adds	r3, r7, #6
   189e2:	781b      	ldrb	r3, [r3, #0]
   189e4:	0011      	movs	r1, r2
   189e6:	0018      	movs	r0, r3
   189e8:	4b16      	ldr	r3, [pc, #88]	; (18a44 <prvTraceSetObjectName+0xdc>)
   189ea:	4798      	blx	r3
   189ec:	0003      	movs	r3, r0
   189ee:	001a      	movs	r2, r3
   189f0:	4b15      	ldr	r3, [pc, #84]	; (18a48 <prvTraceSetObjectName+0xe0>)
   189f2:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
   189f4:	4b15      	ldr	r3, [pc, #84]	; (18a4c <prvTraceSetObjectName+0xe4>)
   189f6:	681b      	ldr	r3, [r3, #0]
   189f8:	2b00      	cmp	r3, #0
   189fa:	d113      	bne.n	18a24 <prvTraceSetObjectName+0xbc>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   189fc:	4b0f      	ldr	r3, [pc, #60]	; (18a3c <prvTraceSetObjectName+0xd4>)
   189fe:	681a      	ldr	r2, [r3, #0]
   18a00:	4b11      	ldr	r3, [pc, #68]	; (18a48 <prvTraceSetObjectName+0xe0>)
   18a02:	881b      	ldrh	r3, [r3, #0]
   18a04:	3398      	adds	r3, #152	; 0x98
   18a06:	18d3      	adds	r3, r2, r3
   18a08:	1d18      	adds	r0, r3, #4
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
   18a0a:	4b0c      	ldr	r3, [pc, #48]	; (18a3c <prvTraceSetObjectName+0xd4>)
   18a0c:	681a      	ldr	r2, [r3, #0]
   18a0e:	1dfb      	adds	r3, r7, #7
   18a10:	781b      	ldrb	r3, [r3, #0]
   18a12:	2170      	movs	r1, #112	; 0x70
   18a14:	18d3      	adds	r3, r2, r3
   18a16:	185b      	adds	r3, r3, r1
   18a18:	781b      	ldrb	r3, [r3, #0]
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   18a1a:	001a      	movs	r2, r3
   18a1c:	683b      	ldr	r3, [r7, #0]
   18a1e:	0019      	movs	r1, r3
   18a20:	4b0b      	ldr	r3, [pc, #44]	; (18a50 <prvTraceSetObjectName+0xe8>)
   18a22:	4798      	blx	r3
		}
	}
}
   18a24:	46bd      	mov	sp, r7
   18a26:	b002      	add	sp, #8
   18a28:	bd80      	pop	{r7, pc}
   18a2a:	46c0      	nop			; (mov r8, r8)
   18a2c:	000379b4 	.word	0x000379b4
   18a30:	00018a55 	.word	0x00018a55
   18a34:	000379e8 	.word	0x000379e8
   18a38:	00037a18 	.word	0x00037a18
   18a3c:	20000dc0 	.word	0x20000dc0
   18a40:	00017775 	.word	0x00017775
   18a44:	00018661 	.word	0x00018661
   18a48:	20000dc8 	.word	0x20000dc8
   18a4c:	20000d20 	.word	0x20000d20
   18a50:	00018921 	.word	0x00018921

00018a54 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
   18a54:	b580      	push	{r7, lr}
   18a56:	b082      	sub	sp, #8
   18a58:	af00      	add	r7, sp, #0
   18a5a:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
   18a5c:	4b11      	ldr	r3, [pc, #68]	; (18aa4 <prvTraceError+0x50>)
   18a5e:	681b      	ldr	r3, [r3, #0]
   18a60:	2b00      	cmp	r3, #0
   18a62:	d001      	beq.n	18a68 <prvTraceError+0x14>
	{
		vTraceStop();
   18a64:	4b10      	ldr	r3, [pc, #64]	; (18aa8 <prvTraceError+0x54>)
   18a66:	4798      	blx	r3
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
   18a68:	4b10      	ldr	r3, [pc, #64]	; (18aac <prvTraceError+0x58>)
   18a6a:	681b      	ldr	r3, [r3, #0]
   18a6c:	2b00      	cmp	r3, #0
   18a6e:	d115      	bne.n	18a9c <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
   18a70:	4b0e      	ldr	r3, [pc, #56]	; (18aac <prvTraceError+0x58>)
   18a72:	687a      	ldr	r2, [r7, #4]
   18a74:	601a      	str	r2, [r3, #0]
		if (RecorderDataPtr != NULL)
   18a76:	4b0b      	ldr	r3, [pc, #44]	; (18aa4 <prvTraceError+0x50>)
   18a78:	681b      	ldr	r3, [r3, #0]
   18a7a:	2b00      	cmp	r3, #0
   18a7c:	d00e      	beq.n	18a9c <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   18a7e:	4b09      	ldr	r3, [pc, #36]	; (18aa4 <prvTraceError+0x50>)
   18a80:	681b      	ldr	r3, [r3, #0]
   18a82:	4a0b      	ldr	r2, [pc, #44]	; (18ab0 <prvTraceError+0x5c>)
   18a84:	1898      	adds	r0, r3, r2
   18a86:	4b09      	ldr	r3, [pc, #36]	; (18aac <prvTraceError+0x58>)
   18a88:	681b      	ldr	r3, [r3, #0]
   18a8a:	2250      	movs	r2, #80	; 0x50
   18a8c:	0019      	movs	r1, r3
   18a8e:	4b09      	ldr	r3, [pc, #36]	; (18ab4 <prvTraceError+0x60>)
   18a90:	4798      	blx	r3
			RecorderDataPtr->internalErrorOccured = 1;
   18a92:	4b04      	ldr	r3, [pc, #16]	; (18aa4 <prvTraceError+0x50>)
   18a94:	681b      	ldr	r3, [r3, #0]
   18a96:	4a08      	ldr	r2, [pc, #32]	; (18ab8 <prvTraceError+0x64>)
   18a98:	2101      	movs	r1, #1
   18a9a:	5099      	str	r1, [r3, r2]
		}
	}
}
   18a9c:	46c0      	nop			; (mov r8, r8)
   18a9e:	46bd      	mov	sp, r7
   18aa0:	b002      	add	sp, #8
   18aa2:	bd80      	pop	{r7, pc}
   18aa4:	20000dc0 	.word	0x20000dc0
   18aa8:	00017919 	.word	0x00017919
   18aac:	20000d20 	.word	0x20000d20
   18ab0:	000006bc 	.word	0x000006bc
   18ab4:	00018921 	.word	0x00018921
   18ab8:	000006b4 	.word	0x000006b4

00018abc <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
   18abc:	b580      	push	{r7, lr}
   18abe:	b086      	sub	sp, #24
   18ac0:	af00      	add	r7, sp, #0
   18ac2:	0002      	movs	r2, r0
   18ac4:	1dfb      	adds	r3, r7, #7
   18ac6:	701a      	strb	r2, [r3, #0]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
   18ac8:	2300      	movs	r3, #0
   18aca:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
   18acc:	2300      	movs	r3, #0
   18ace:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
   18ad0:	1dfb      	adds	r3, r7, #7
   18ad2:	781b      	ldrb	r3, [r3, #0]
   18ad4:	2b00      	cmp	r3, #0
   18ad6:	d000      	beq.n	18ada <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
   18ad8:	e089      	b.n	18bee <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x132>
   18ada:	4b49      	ldr	r3, [pc, #292]	; (18c00 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x144>)
   18adc:	0018      	movs	r0, r3
   18ade:	4b49      	ldr	r3, [pc, #292]	; (18c04 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x148>)
   18ae0:	4798      	blx	r3
   18ae2:	e08a      	b.n	18bfa <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
   18ae4:	4b48      	ldr	r3, [pc, #288]	; (18c08 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18ae6:	681b      	ldr	r3, [r3, #0]
   18ae8:	69da      	ldr	r2, [r3, #28]
   18aea:	697b      	ldr	r3, [r7, #20]
   18aec:	18d3      	adds	r3, r2, r3
   18aee:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   18af0:	4b45      	ldr	r3, [pc, #276]	; (18c08 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18af2:	6819      	ldr	r1, [r3, #0]
   18af4:	693b      	ldr	r3, [r7, #16]
   18af6:	009a      	lsls	r2, r3, #2
   18af8:	23e2      	movs	r3, #226	; 0xe2
   18afa:	00db      	lsls	r3, r3, #3
   18afc:	188a      	adds	r2, r1, r2
   18afe:	18d3      	adds	r3, r2, r3
   18b00:	781b      	ldrb	r3, [r3, #0]
   18b02:	2b98      	cmp	r3, #152	; 0x98
   18b04:	d934      	bls.n	18b70 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
   18b06:	4b40      	ldr	r3, [pc, #256]	; (18c08 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18b08:	6819      	ldr	r1, [r3, #0]
   18b0a:	693b      	ldr	r3, [r7, #16]
   18b0c:	009a      	lsls	r2, r3, #2
   18b0e:	23e2      	movs	r3, #226	; 0xe2
   18b10:	00db      	lsls	r3, r3, #3
   18b12:	188a      	adds	r2, r1, r2
   18b14:	18d3      	adds	r3, r2, r3
   18b16:	781b      	ldrb	r3, [r3, #0]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   18b18:	2ba7      	cmp	r3, #167	; 0xa7
   18b1a:	d829      	bhi.n	18b70 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
   18b1c:	4b3a      	ldr	r3, [pc, #232]	; (18c08 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18b1e:	6819      	ldr	r1, [r3, #0]
   18b20:	693b      	ldr	r3, [r7, #16]
   18b22:	009a      	lsls	r2, r3, #2
   18b24:	23e2      	movs	r3, #226	; 0xe2
   18b26:	00db      	lsls	r3, r3, #3
   18b28:	188a      	adds	r2, r1, r2
   18b2a:	18d3      	adds	r3, r2, r3
   18b2c:	781a      	ldrb	r2, [r3, #0]
   18b2e:	230f      	movs	r3, #15
   18b30:	18fb      	adds	r3, r7, r3
   18b32:	3268      	adds	r2, #104	; 0x68
   18b34:	701a      	strb	r2, [r3, #0]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
   18b36:	230f      	movs	r3, #15
   18b38:	18fb      	adds	r3, r7, r3
   18b3a:	781a      	ldrb	r2, [r3, #0]
   18b3c:	693b      	ldr	r3, [r7, #16]
   18b3e:	18d2      	adds	r2, r2, r3
   18b40:	4b31      	ldr	r3, [pc, #196]	; (18c08 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18b42:	681b      	ldr	r3, [r3, #0]
   18b44:	699b      	ldr	r3, [r3, #24]
   18b46:	429a      	cmp	r2, r3
   18b48:	d24d      	bcs.n	18be6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
   18b4a:	4b2f      	ldr	r3, [pc, #188]	; (18c08 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18b4c:	681a      	ldr	r2, [r3, #0]
   18b4e:	693b      	ldr	r3, [r7, #16]
   18b50:	009b      	lsls	r3, r3, #2
   18b52:	21e2      	movs	r1, #226	; 0xe2
   18b54:	00c9      	lsls	r1, r1, #3
   18b56:	468c      	mov	ip, r1
   18b58:	4463      	add	r3, ip
   18b5a:	18d0      	adds	r0, r2, r3
   18b5c:	230f      	movs	r3, #15
   18b5e:	18fb      	adds	r3, r7, r3
   18b60:	781b      	ldrb	r3, [r3, #0]
   18b62:	3301      	adds	r3, #1
   18b64:	009b      	lsls	r3, r3, #2
   18b66:	001a      	movs	r2, r3
   18b68:	2100      	movs	r1, #0
   18b6a:	4b28      	ldr	r3, [pc, #160]	; (18c0c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   18b6c:	4798      	blx	r3
		{
   18b6e:	e03a      	b.n	18be6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
   18b70:	4b25      	ldr	r3, [pc, #148]	; (18c08 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18b72:	6819      	ldr	r1, [r3, #0]
   18b74:	693b      	ldr	r3, [r7, #16]
   18b76:	009a      	lsls	r2, r3, #2
   18b78:	23e2      	movs	r3, #226	; 0xe2
   18b7a:	00db      	lsls	r3, r3, #3
   18b7c:	188a      	adds	r2, r1, r2
   18b7e:	18d3      	adds	r3, r2, r3
   18b80:	781b      	ldrb	r3, [r3, #0]
   18b82:	2b01      	cmp	r3, #1
   18b84:	d130      	bne.n	18be8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
   18b86:	693b      	ldr	r3, [r7, #16]
   18b88:	1c5a      	adds	r2, r3, #1
   18b8a:	4b1f      	ldr	r3, [pc, #124]	; (18c08 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18b8c:	681b      	ldr	r3, [r3, #0]
   18b8e:	699b      	ldr	r3, [r3, #24]
   18b90:	429a      	cmp	r2, r3
   18b92:	d20e      	bcs.n	18bb2 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
   18b94:	4b1c      	ldr	r3, [pc, #112]	; (18c08 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18b96:	681a      	ldr	r2, [r3, #0]
   18b98:	693b      	ldr	r3, [r7, #16]
   18b9a:	009b      	lsls	r3, r3, #2
   18b9c:	21e2      	movs	r1, #226	; 0xe2
   18b9e:	00c9      	lsls	r1, r1, #3
   18ba0:	468c      	mov	ip, r1
   18ba2:	4463      	add	r3, ip
   18ba4:	18d3      	adds	r3, r2, r3
   18ba6:	2208      	movs	r2, #8
   18ba8:	2100      	movs	r1, #0
   18baa:	0018      	movs	r0, r3
   18bac:	4b17      	ldr	r3, [pc, #92]	; (18c0c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   18bae:	4798      	blx	r3
   18bb0:	e01a      	b.n	18be8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
   18bb2:	4b15      	ldr	r3, [pc, #84]	; (18c08 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18bb4:	681b      	ldr	r3, [r3, #0]
   18bb6:	22e2      	movs	r2, #226	; 0xe2
   18bb8:	00d2      	lsls	r2, r2, #3
   18bba:	4694      	mov	ip, r2
   18bbc:	4463      	add	r3, ip
   18bbe:	2204      	movs	r2, #4
   18bc0:	2100      	movs	r1, #0
   18bc2:	0018      	movs	r0, r3
   18bc4:	4b11      	ldr	r3, [pc, #68]	; (18c0c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   18bc6:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
   18bc8:	4b0f      	ldr	r3, [pc, #60]	; (18c08 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18bca:	681a      	ldr	r2, [r3, #0]
   18bcc:	693b      	ldr	r3, [r7, #16]
   18bce:	009b      	lsls	r3, r3, #2
   18bd0:	21e2      	movs	r1, #226	; 0xe2
   18bd2:	00c9      	lsls	r1, r1, #3
   18bd4:	468c      	mov	ip, r1
   18bd6:	4463      	add	r3, ip
   18bd8:	18d3      	adds	r3, r2, r3
   18bda:	2204      	movs	r2, #4
   18bdc:	2100      	movs	r1, #0
   18bde:	0018      	movs	r0, r3
   18be0:	4b0a      	ldr	r3, [pc, #40]	; (18c0c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   18be2:	4798      	blx	r3
   18be4:	e000      	b.n	18be8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
   18be6:	46c0      	nop			; (mov r8, r8)
			}
		}
		i++;
   18be8:	697b      	ldr	r3, [r7, #20]
   18bea:	3301      	adds	r3, #1
   18bec:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
   18bee:	1dfb      	adds	r3, r7, #7
   18bf0:	781a      	ldrb	r2, [r3, #0]
   18bf2:	697b      	ldr	r3, [r7, #20]
   18bf4:	429a      	cmp	r2, r3
   18bf6:	d900      	bls.n	18bfa <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
   18bf8:	e774      	b.n	18ae4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
	}
}
   18bfa:	46bd      	mov	sp, r7
   18bfc:	b006      	add	sp, #24
   18bfe:	bd80      	pop	{r7, pc}
   18c00:	00037a78 	.word	0x00037a78
   18c04:	00018a55 	.word	0x00018a55
   18c08:	20000dc0 	.word	0x20000dc0
   18c0c:	000345df 	.word	0x000345df

00018c10 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
   18c10:	b580      	push	{r7, lr}
   18c12:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
   18c14:	4b12      	ldr	r3, [pc, #72]	; (18c60 <prvTraceUpdateCounters+0x50>)
   18c16:	681b      	ldr	r3, [r3, #0]
   18c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18c1a:	2b00      	cmp	r3, #0
   18c1c:	d01c      	beq.n	18c58 <prvTraceUpdateCounters+0x48>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
   18c1e:	4b10      	ldr	r3, [pc, #64]	; (18c60 <prvTraceUpdateCounters+0x50>)
   18c20:	681b      	ldr	r3, [r3, #0]
   18c22:	695a      	ldr	r2, [r3, #20]
   18c24:	3201      	adds	r2, #1
   18c26:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
   18c28:	4b0d      	ldr	r3, [pc, #52]	; (18c60 <prvTraceUpdateCounters+0x50>)
   18c2a:	681b      	ldr	r3, [r3, #0]
   18c2c:	69da      	ldr	r2, [r3, #28]
   18c2e:	3201      	adds	r2, #1
   18c30:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   18c32:	4b0b      	ldr	r3, [pc, #44]	; (18c60 <prvTraceUpdateCounters+0x50>)
   18c34:	681b      	ldr	r3, [r3, #0]
   18c36:	69da      	ldr	r2, [r3, #28]
   18c38:	232c      	movs	r3, #44	; 0x2c
   18c3a:	33ff      	adds	r3, #255	; 0xff
   18c3c:	429a      	cmp	r2, r3
   18c3e:	d907      	bls.n	18c50 <prvTraceUpdateCounters+0x40>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
   18c40:	4b07      	ldr	r3, [pc, #28]	; (18c60 <prvTraceUpdateCounters+0x50>)
   18c42:	681b      	ldr	r3, [r3, #0]
   18c44:	2201      	movs	r2, #1
   18c46:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
   18c48:	4b05      	ldr	r3, [pc, #20]	; (18c60 <prvTraceUpdateCounters+0x50>)
   18c4a:	681b      	ldr	r3, [r3, #0]
   18c4c:	2200      	movs	r2, #0
   18c4e:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
   18c50:	2001      	movs	r0, #1
   18c52:	4b04      	ldr	r3, [pc, #16]	; (18c64 <prvTraceUpdateCounters+0x54>)
   18c54:	4798      	blx	r3
   18c56:	e000      	b.n	18c5a <prvTraceUpdateCounters+0x4a>
		return;
   18c58:	46c0      	nop			; (mov r8, r8)
#endif
}
   18c5a:	46bd      	mov	sp, r7
   18c5c:	bd80      	pop	{r7, pc}
   18c5e:	46c0      	nop			; (mov r8, r8)
   18c60:	20000dc0 	.word	0x20000dc0
   18c64:	00018abd 	.word	0x00018abd

00018c68 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
   18c68:	b5b0      	push	{r4, r5, r7, lr}
   18c6a:	b086      	sub	sp, #24
   18c6c:	af00      	add	r7, sp, #0
   18c6e:	0002      	movs	r2, r0
   18c70:	1dbb      	adds	r3, r7, #6
   18c72:	801a      	strh	r2, [r3, #0]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
   18c74:	2300      	movs	r3, #0
   18c76:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
   18c78:	2300      	movs	r3, #0
   18c7a:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
   18c7c:	2300      	movs	r3, #0
   18c7e:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
   18c80:	1dbb      	adds	r3, r7, #6
   18c82:	881b      	ldrh	r3, [r3, #0]
   18c84:	2bff      	cmp	r3, #255	; 0xff
   18c86:	d00a      	beq.n	18c9e <prvTraceGetDTS+0x36>
   18c88:	1dbb      	adds	r3, r7, #6
   18c8a:	881b      	ldrh	r3, [r3, #0]
   18c8c:	4a60      	ldr	r2, [pc, #384]	; (18e10 <prvTraceGetDTS+0x1a8>)
   18c8e:	4293      	cmp	r3, r2
   18c90:	d005      	beq.n	18c9e <prvTraceGetDTS+0x36>
   18c92:	4b60      	ldr	r3, [pc, #384]	; (18e14 <prvTraceGetDTS+0x1ac>)
   18c94:	0018      	movs	r0, r3
   18c96:	4b60      	ldr	r3, [pc, #384]	; (18e18 <prvTraceGetDTS+0x1b0>)
   18c98:	4798      	blx	r3
   18c9a:	2300      	movs	r3, #0
   18c9c:	e0b3      	b.n	18e06 <prvTraceGetDTS+0x19e>

	
	if (RecorderDataPtr->frequency == 0)
   18c9e:	4b5f      	ldr	r3, [pc, #380]	; (18e1c <prvTraceGetDTS+0x1b4>)
   18ca0:	681b      	ldr	r3, [r3, #0]
   18ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   18ca4:	2b00      	cmp	r3, #0
   18ca6:	d118      	bne.n	18cda <prvTraceGetDTS+0x72>
	{	
		if (timestampFrequency != 0)
   18ca8:	4b5d      	ldr	r3, [pc, #372]	; (18e20 <prvTraceGetDTS+0x1b8>)
   18caa:	681b      	ldr	r3, [r3, #0]
   18cac:	2b00      	cmp	r3, #0
   18cae:	d006      	beq.n	18cbe <prvTraceGetDTS+0x56>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
   18cb0:	4b5a      	ldr	r3, [pc, #360]	; (18e1c <prvTraceGetDTS+0x1b4>)
   18cb2:	681b      	ldr	r3, [r3, #0]
   18cb4:	4a5a      	ldr	r2, [pc, #360]	; (18e20 <prvTraceGetDTS+0x1b8>)
   18cb6:	6812      	ldr	r2, [r2, #0]
   18cb8:	0892      	lsrs	r2, r2, #2
   18cba:	625a      	str	r2, [r3, #36]	; 0x24
   18cbc:	e00d      	b.n	18cda <prvTraceGetDTS+0x72>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
   18cbe:	4b59      	ldr	r3, [pc, #356]	; (18e24 <prvTraceGetDTS+0x1bc>)
   18cc0:	681a      	ldr	r2, [r3, #0]
   18cc2:	4b59      	ldr	r3, [pc, #356]	; (18e28 <prvTraceGetDTS+0x1c0>)
   18cc4:	681b      	ldr	r3, [r3, #0]
   18cc6:	429a      	cmp	r2, r3
   18cc8:	d007      	beq.n	18cda <prvTraceGetDTS+0x72>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
   18cca:	4b54      	ldr	r3, [pc, #336]	; (18e1c <prvTraceGetDTS+0x1b4>)
   18ccc:	681c      	ldr	r4, [r3, #0]
   18cce:	2000      	movs	r0, #0
   18cd0:	4b56      	ldr	r3, [pc, #344]	; (18e2c <prvTraceGetDTS+0x1c4>)
   18cd2:	4798      	blx	r3
   18cd4:	0003      	movs	r3, r0
   18cd6:	089b      	lsrs	r3, r3, #2
   18cd8:	6263      	str	r3, [r4, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
   18cda:	230c      	movs	r3, #12
   18cdc:	18fb      	adds	r3, r7, r3
   18cde:	0018      	movs	r0, r3
   18ce0:	4b53      	ldr	r3, [pc, #332]	; (18e30 <prvTraceGetDTS+0x1c8>)
   18ce2:	4798      	blx	r3
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
   18ce4:	68fa      	ldr	r2, [r7, #12]
   18ce6:	4b53      	ldr	r3, [pc, #332]	; (18e34 <prvTraceGetDTS+0x1cc>)
   18ce8:	681b      	ldr	r3, [r3, #0]
   18cea:	1ad3      	subs	r3, r2, r3
   18cec:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
   18cee:	68fa      	ldr	r2, [r7, #12]
   18cf0:	4b50      	ldr	r3, [pc, #320]	; (18e34 <prvTraceGetDTS+0x1cc>)
   18cf2:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
   18cf4:	4b49      	ldr	r3, [pc, #292]	; (18e1c <prvTraceGetDTS+0x1b4>)
   18cf6:	681b      	ldr	r3, [r3, #0]
   18cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   18cfa:	2b00      	cmp	r3, #0
   18cfc:	d044      	beq.n	18d88 <prvTraceGetDTS+0x120>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
   18cfe:	4b47      	ldr	r3, [pc, #284]	; (18e1c <prvTraceGetDTS+0x1b4>)
   18d00:	681b      	ldr	r3, [r3, #0]
   18d02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   18d04:	693b      	ldr	r3, [r7, #16]
   18d06:	429a      	cmp	r2, r3
   18d08:	d21e      	bcs.n	18d48 <prvTraceGetDTS+0xe0>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
   18d0a:	4b44      	ldr	r3, [pc, #272]	; (18e1c <prvTraceGetDTS+0x1b4>)
   18d0c:	681c      	ldr	r4, [r3, #0]
   18d0e:	4b43      	ldr	r3, [pc, #268]	; (18e1c <prvTraceGetDTS+0x1b4>)
   18d10:	681b      	ldr	r3, [r3, #0]
   18d12:	6add      	ldr	r5, [r3, #44]	; 0x2c
   18d14:	4b41      	ldr	r3, [pc, #260]	; (18e1c <prvTraceGetDTS+0x1b4>)
   18d16:	681b      	ldr	r3, [r3, #0]
   18d18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   18d1a:	4b47      	ldr	r3, [pc, #284]	; (18e38 <prvTraceGetDTS+0x1d0>)
   18d1c:	0011      	movs	r1, r2
   18d1e:	6938      	ldr	r0, [r7, #16]
   18d20:	4798      	blx	r3
   18d22:	0003      	movs	r3, r0
   18d24:	18eb      	adds	r3, r5, r3
   18d26:	62e3      	str	r3, [r4, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
   18d28:	4b3c      	ldr	r3, [pc, #240]	; (18e1c <prvTraceGetDTS+0x1b4>)
   18d2a:	681c      	ldr	r4, [r3, #0]
   18d2c:	4b3b      	ldr	r3, [pc, #236]	; (18e1c <prvTraceGetDTS+0x1b4>)
   18d2e:	681b      	ldr	r3, [r3, #0]
   18d30:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   18d32:	4b3a      	ldr	r3, [pc, #232]	; (18e1c <prvTraceGetDTS+0x1b4>)
   18d34:	681b      	ldr	r3, [r3, #0]
   18d36:	6a59      	ldr	r1, [r3, #36]	; 0x24
   18d38:	693a      	ldr	r2, [r7, #16]
   18d3a:	4b40      	ldr	r3, [pc, #256]	; (18e3c <prvTraceGetDTS+0x1d4>)
   18d3c:	0010      	movs	r0, r2
   18d3e:	4798      	blx	r3
   18d40:	000b      	movs	r3, r1
   18d42:	18eb      	adds	r3, r5, r3
   18d44:	62a3      	str	r3, [r4, #40]	; 0x28
   18d46:	e007      	b.n	18d58 <prvTraceGetDTS+0xf0>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
   18d48:	4b34      	ldr	r3, [pc, #208]	; (18e1c <prvTraceGetDTS+0x1b4>)
   18d4a:	681b      	ldr	r3, [r3, #0]
   18d4c:	4a33      	ldr	r2, [pc, #204]	; (18e1c <prvTraceGetDTS+0x1b4>)
   18d4e:	6812      	ldr	r2, [r2, #0]
   18d50:	6a91      	ldr	r1, [r2, #40]	; 0x28
   18d52:	693a      	ldr	r2, [r7, #16]
   18d54:	188a      	adds	r2, r1, r2
   18d56:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
   18d58:	4b30      	ldr	r3, [pc, #192]	; (18e1c <prvTraceGetDTS+0x1b4>)
   18d5a:	681b      	ldr	r3, [r3, #0]
   18d5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   18d5e:	4b2f      	ldr	r3, [pc, #188]	; (18e1c <prvTraceGetDTS+0x1b4>)
   18d60:	681b      	ldr	r3, [r3, #0]
   18d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   18d64:	429a      	cmp	r2, r3
   18d66:	d313      	bcc.n	18d90 <prvTraceGetDTS+0x128>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
   18d68:	4b2c      	ldr	r3, [pc, #176]	; (18e1c <prvTraceGetDTS+0x1b4>)
   18d6a:	681b      	ldr	r3, [r3, #0]
   18d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   18d6e:	3201      	adds	r2, #1
   18d70:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
   18d72:	4b2a      	ldr	r3, [pc, #168]	; (18e1c <prvTraceGetDTS+0x1b4>)
   18d74:	681b      	ldr	r3, [r3, #0]
   18d76:	4a29      	ldr	r2, [pc, #164]	; (18e1c <prvTraceGetDTS+0x1b4>)
   18d78:	6812      	ldr	r2, [r2, #0]
   18d7a:	6a91      	ldr	r1, [r2, #40]	; 0x28
   18d7c:	4a27      	ldr	r2, [pc, #156]	; (18e1c <prvTraceGetDTS+0x1b4>)
   18d7e:	6812      	ldr	r2, [r2, #0]
   18d80:	6a52      	ldr	r2, [r2, #36]	; 0x24
   18d82:	1a8a      	subs	r2, r1, r2
   18d84:	629a      	str	r2, [r3, #40]	; 0x28
   18d86:	e003      	b.n	18d90 <prvTraceGetDTS+0x128>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
   18d88:	4b24      	ldr	r3, [pc, #144]	; (18e1c <prvTraceGetDTS+0x1b4>)
   18d8a:	681b      	ldr	r3, [r3, #0]
   18d8c:	68fa      	ldr	r2, [r7, #12]
   18d8e:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
   18d90:	1dbb      	adds	r3, r7, #6
   18d92:	881a      	ldrh	r2, [r3, #0]
   18d94:	693b      	ldr	r3, [r7, #16]
   18d96:	429a      	cmp	r2, r3
   18d98:	d22f      	bcs.n	18dfa <prvTraceGetDTS+0x192>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
   18d9a:	4b29      	ldr	r3, [pc, #164]	; (18e40 <prvTraceGetDTS+0x1d8>)
   18d9c:	4798      	blx	r3
   18d9e:	0003      	movs	r3, r0
   18da0:	617b      	str	r3, [r7, #20]

		if (xts != NULL)
   18da2:	697b      	ldr	r3, [r7, #20]
   18da4:	2b00      	cmp	r3, #0
   18da6:	d028      	beq.n	18dfa <prvTraceGetDTS+0x192>
		{
			if (param_maxDTS == 0xFFFF)
   18da8:	1dbb      	adds	r3, r7, #6
   18daa:	881b      	ldrh	r3, [r3, #0]
   18dac:	4a18      	ldr	r2, [pc, #96]	; (18e10 <prvTraceGetDTS+0x1a8>)
   18dae:	4293      	cmp	r3, r2
   18db0:	d10b      	bne.n	18dca <prvTraceGetDTS+0x162>
			{
				xts->type = XTS16;
   18db2:	697b      	ldr	r3, [r7, #20]
   18db4:	22a9      	movs	r2, #169	; 0xa9
   18db6:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
   18db8:	693b      	ldr	r3, [r7, #16]
   18dba:	0c1b      	lsrs	r3, r3, #16
   18dbc:	b29a      	uxth	r2, r3
   18dbe:	697b      	ldr	r3, [r7, #20]
   18dc0:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
   18dc2:	697b      	ldr	r3, [r7, #20]
   18dc4:	2200      	movs	r2, #0
   18dc6:	705a      	strb	r2, [r3, #1]
   18dc8:	e015      	b.n	18df6 <prvTraceGetDTS+0x18e>
			}
			else if (param_maxDTS == 0xFF)
   18dca:	1dbb      	adds	r3, r7, #6
   18dcc:	881b      	ldrh	r3, [r3, #0]
   18dce:	2bff      	cmp	r3, #255	; 0xff
   18dd0:	d10d      	bne.n	18dee <prvTraceGetDTS+0x186>
			{
				xts->type = XTS8;
   18dd2:	697b      	ldr	r3, [r7, #20]
   18dd4:	22a8      	movs	r2, #168	; 0xa8
   18dd6:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
   18dd8:	693b      	ldr	r3, [r7, #16]
   18dda:	0a1b      	lsrs	r3, r3, #8
   18ddc:	b29a      	uxth	r2, r3
   18dde:	697b      	ldr	r3, [r7, #20]
   18de0:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
   18de2:	693b      	ldr	r3, [r7, #16]
   18de4:	0e1b      	lsrs	r3, r3, #24
   18de6:	b2da      	uxtb	r2, r3
   18de8:	697b      	ldr	r3, [r7, #20]
   18dea:	705a      	strb	r2, [r3, #1]
   18dec:	e003      	b.n	18df6 <prvTraceGetDTS+0x18e>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
   18dee:	4b15      	ldr	r3, [pc, #84]	; (18e44 <prvTraceGetDTS+0x1dc>)
   18df0:	0018      	movs	r0, r3
   18df2:	4b09      	ldr	r3, [pc, #36]	; (18e18 <prvTraceGetDTS+0x1b0>)
   18df4:	4798      	blx	r3
			}
			prvTraceUpdateCounters();
   18df6:	4b14      	ldr	r3, [pc, #80]	; (18e48 <prvTraceGetDTS+0x1e0>)
   18df8:	4798      	blx	r3
		}
	}

	return (uint16_t)dts & param_maxDTS;
   18dfa:	693b      	ldr	r3, [r7, #16]
   18dfc:	b29b      	uxth	r3, r3
   18dfe:	1dba      	adds	r2, r7, #6
   18e00:	8812      	ldrh	r2, [r2, #0]
   18e02:	4013      	ands	r3, r2
   18e04:	b29b      	uxth	r3, r3
}
   18e06:	0018      	movs	r0, r3
   18e08:	46bd      	mov	sp, r7
   18e0a:	b006      	add	sp, #24
   18e0c:	bdb0      	pop	{r4, r5, r7, pc}
   18e0e:	46c0      	nop			; (mov r8, r8)
   18e10:	0000ffff 	.word	0x0000ffff
   18e14:	00037ad0 	.word	0x00037ad0
   18e18:	00018a55 	.word	0x00018a55
   18e1c:	20000dc0 	.word	0x20000dc0
   18e20:	20000d1c 	.word	0x20000d1c
   18e24:	e000e018 	.word	0xe000e018
   18e28:	20005590 	.word	0x20005590
   18e2c:	00028e65 	.word	0x00028e65
   18e30:	00018e4d 	.word	0x00018e4d
   18e34:	20000dcc 	.word	0x20000dcc
   18e38:	00031b25 	.word	0x00031b25
   18e3c:	00031c31 	.word	0x00031c31
   18e40:	0001860d 	.word	0x0001860d
   18e44:	00037b10 	.word	0x00037b10
   18e48:	00018c11 	.word	0x00018c11

00018e4c <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
   18e4c:	b580      	push	{r7, lr}
   18e4e:	b084      	sub	sp, #16
   18e50:	af00      	add	r7, sp, #0
   18e52:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
   18e54:	2300      	movs	r3, #0
   18e56:	60bb      	str	r3, [r7, #8]

#if TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR
	/* systick based timer */
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
   18e58:	2300      	movs	r3, #0
   18e5a:	60fb      	str	r3, [r7, #12]
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
   18e5c:	4b2d      	ldr	r3, [pc, #180]	; (18f14 <prvTracePortGetTimeStamp+0xc8>)
   18e5e:	681b      	ldr	r3, [r3, #0]
   18e60:	2b01      	cmp	r3, #1
   18e62:	d107      	bne.n	18e74 <prvTracePortGetTimeStamp+0x28>
	{
		if (pTimestamp)
   18e64:	687b      	ldr	r3, [r7, #4]
   18e66:	2b00      	cmp	r3, #0
   18e68:	d04f      	beq.n	18f0a <prvTracePortGetTimeStamp+0xbe>
			*pTimestamp = last_timestamp;
   18e6a:	4b2b      	ldr	r3, [pc, #172]	; (18f18 <prvTracePortGetTimeStamp+0xcc>)
   18e6c:	681a      	ldr	r2, [r3, #0]
   18e6e:	687b      	ldr	r3, [r7, #4]
   18e70:	601a      	str	r2, [r3, #0]
		return;
   18e72:	e04a      	b.n	18f0a <prvTracePortGetTimeStamp+0xbe>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
   18e74:	4b29      	ldr	r3, [pc, #164]	; (18f1c <prvTracePortGetTimeStamp+0xd0>)
   18e76:	681a      	ldr	r2, [r3, #0]
   18e78:	4b29      	ldr	r3, [pc, #164]	; (18f20 <prvTracePortGetTimeStamp+0xd4>)
   18e7a:	681b      	ldr	r3, [r3, #0]
   18e7c:	1ad3      	subs	r3, r2, r3
   18e7e:	3301      	adds	r3, #1
   18e80:	60bb      	str	r3, [r7, #8]
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
   18e82:	4b28      	ldr	r3, [pc, #160]	; (18f24 <prvTracePortGetTimeStamp+0xd8>)
   18e84:	681a      	ldr	r2, [r3, #0]
   18e86:	4b28      	ldr	r3, [pc, #160]	; (18f28 <prvTracePortGetTimeStamp+0xdc>)
   18e88:	681b      	ldr	r3, [r3, #0]
   18e8a:	1ad3      	subs	r3, r2, r3
   18e8c:	3b01      	subs	r3, #1
   18e8e:	2b00      	cmp	r3, #0
   18e90:	db03      	blt.n	18e9a <prvTracePortGetTimeStamp+0x4e>
	{
		/* This means last_traceTickCount is higher than uiTraceTickCount,
		so we have previously compensated for a missed tick.
		Therefore we use the last stored value because that is more accurate. */
		traceTickCount = last_traceTickCount;
   18e92:	4b24      	ldr	r3, [pc, #144]	; (18f24 <prvTracePortGetTimeStamp+0xd8>)
   18e94:	681b      	ldr	r3, [r3, #0]
   18e96:	60fb      	str	r3, [r7, #12]
   18e98:	e002      	b.n	18ea0 <prvTracePortGetTimeStamp+0x54>
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
   18e9a:	4b23      	ldr	r3, [pc, #140]	; (18f28 <prvTracePortGetTimeStamp+0xdc>)
   18e9c:	681b      	ldr	r3, [r3, #0]
   18e9e:	60fb      	str	r3, [r7, #12]
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
   18ea0:	4b20      	ldr	r3, [pc, #128]	; (18f24 <prvTracePortGetTimeStamp+0xd8>)
   18ea2:	681b      	ldr	r3, [r3, #0]
   18ea4:	68fa      	ldr	r2, [r7, #12]
   18ea6:	429a      	cmp	r2, r3
   18ea8:	d107      	bne.n	18eba <prvTracePortGetTimeStamp+0x6e>
   18eaa:	4b20      	ldr	r3, [pc, #128]	; (18f2c <prvTracePortGetTimeStamp+0xe0>)
   18eac:	681b      	ldr	r3, [r3, #0]
   18eae:	68ba      	ldr	r2, [r7, #8]
   18eb0:	429a      	cmp	r2, r3
   18eb2:	d202      	bcs.n	18eba <prvTracePortGetTimeStamp+0x6e>
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
   18eb4:	68fb      	ldr	r3, [r7, #12]
   18eb6:	3301      	adds	r3, #1
   18eb8:	60fb      	str	r3, [r7, #12]
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
   18eba:	687b      	ldr	r3, [r7, #4]
   18ebc:	2b00      	cmp	r3, #0
   18ebe:	d016      	beq.n	18eee <prvTracePortGetTimeStamp+0xa2>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
   18ec0:	4b16      	ldr	r3, [pc, #88]	; (18f1c <prvTracePortGetTimeStamp+0xd0>)
   18ec2:	681b      	ldr	r3, [r3, #0]
   18ec4:	3301      	adds	r3, #1
   18ec6:	089b      	lsrs	r3, r3, #2
   18ec8:	68fa      	ldr	r2, [r7, #12]
   18eca:	435a      	muls	r2, r3
   18ecc:	4b12      	ldr	r3, [pc, #72]	; (18f18 <prvTracePortGetTimeStamp+0xcc>)
   18ece:	601a      	str	r2, [r3, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
   18ed0:	4b12      	ldr	r3, [pc, #72]	; (18f1c <prvTracePortGetTimeStamp+0xd0>)
   18ed2:	681b      	ldr	r3, [r3, #0]
   18ed4:	3301      	adds	r3, #1
   18ed6:	2203      	movs	r2, #3
   18ed8:	4013      	ands	r3, r2
   18eda:	68fa      	ldr	r2, [r7, #12]
   18edc:	435a      	muls	r2, r3
   18ede:	68bb      	ldr	r3, [r7, #8]
   18ee0:	18d3      	adds	r3, r2, r3
   18ee2:	089a      	lsrs	r2, r3, #2
   18ee4:	4b0c      	ldr	r3, [pc, #48]	; (18f18 <prvTracePortGetTimeStamp+0xcc>)
   18ee6:	681b      	ldr	r3, [r3, #0]
   18ee8:	18d2      	adds	r2, r2, r3
   18eea:	4b0b      	ldr	r3, [pc, #44]	; (18f18 <prvTracePortGetTimeStamp+0xcc>)
   18eec:	601a      	str	r2, [r3, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
   18eee:	4b0d      	ldr	r3, [pc, #52]	; (18f24 <prvTracePortGetTimeStamp+0xd8>)
   18ef0:	68fa      	ldr	r2, [r7, #12]
   18ef2:	601a      	str	r2, [r3, #0]
	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
   18ef4:	687b      	ldr	r3, [r7, #4]
   18ef6:	2b00      	cmp	r3, #0
   18ef8:	d003      	beq.n	18f02 <prvTracePortGetTimeStamp+0xb6>
		*pTimestamp = last_timestamp;
   18efa:	4b07      	ldr	r3, [pc, #28]	; (18f18 <prvTracePortGetTimeStamp+0xcc>)
   18efc:	681a      	ldr	r2, [r3, #0]
   18efe:	687b      	ldr	r3, [r7, #4]
   18f00:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
   18f02:	4b0a      	ldr	r3, [pc, #40]	; (18f2c <prvTracePortGetTimeStamp+0xe0>)
   18f04:	68ba      	ldr	r2, [r7, #8]
   18f06:	601a      	str	r2, [r3, #0]
   18f08:	e000      	b.n	18f0c <prvTracePortGetTimeStamp+0xc0>
		return;
   18f0a:	46c0      	nop			; (mov r8, r8)
}
   18f0c:	46bd      	mov	sp, r7
   18f0e:	b004      	add	sp, #16
   18f10:	bd80      	pop	{r7, pc}
   18f12:	46c0      	nop			; (mov r8, r8)
   18f14:	20000d0c 	.word	0x20000d0c
   18f18:	20000d10 	.word	0x20000d10
   18f1c:	e000e014 	.word	0xe000e014
   18f20:	e000e018 	.word	0xe000e018
   18f24:	20000dd0 	.word	0x20000dd0
   18f28:	20000d08 	.word	0x20000d08
   18f2c:	20000dd4 	.word	0x20000dd4

00018f30 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   18f30:	b580      	push	{r7, lr}
   18f32:	b082      	sub	sp, #8
   18f34:	af00      	add	r7, sp, #0
   18f36:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   18f38:	687b      	ldr	r3, [r7, #4]
   18f3a:	3308      	adds	r3, #8
   18f3c:	001a      	movs	r2, r3
   18f3e:	687b      	ldr	r3, [r7, #4]
   18f40:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   18f42:	687b      	ldr	r3, [r7, #4]
   18f44:	2201      	movs	r2, #1
   18f46:	4252      	negs	r2, r2
   18f48:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   18f4a:	687b      	ldr	r3, [r7, #4]
   18f4c:	3308      	adds	r3, #8
   18f4e:	001a      	movs	r2, r3
   18f50:	687b      	ldr	r3, [r7, #4]
   18f52:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   18f54:	687b      	ldr	r3, [r7, #4]
   18f56:	3308      	adds	r3, #8
   18f58:	001a      	movs	r2, r3
   18f5a:	687b      	ldr	r3, [r7, #4]
   18f5c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   18f5e:	687b      	ldr	r3, [r7, #4]
   18f60:	2200      	movs	r2, #0
   18f62:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   18f64:	46c0      	nop			; (mov r8, r8)
   18f66:	46bd      	mov	sp, r7
   18f68:	b002      	add	sp, #8
   18f6a:	bd80      	pop	{r7, pc}

00018f6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   18f6c:	b580      	push	{r7, lr}
   18f6e:	b082      	sub	sp, #8
   18f70:	af00      	add	r7, sp, #0
   18f72:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   18f74:	687b      	ldr	r3, [r7, #4]
   18f76:	2200      	movs	r2, #0
   18f78:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   18f7a:	46c0      	nop			; (mov r8, r8)
   18f7c:	46bd      	mov	sp, r7
   18f7e:	b002      	add	sp, #8
   18f80:	bd80      	pop	{r7, pc}

00018f82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   18f82:	b580      	push	{r7, lr}
   18f84:	b084      	sub	sp, #16
   18f86:	af00      	add	r7, sp, #0
   18f88:	6078      	str	r0, [r7, #4]
   18f8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   18f8c:	687b      	ldr	r3, [r7, #4]
   18f8e:	685b      	ldr	r3, [r3, #4]
   18f90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   18f92:	683b      	ldr	r3, [r7, #0]
   18f94:	68fa      	ldr	r2, [r7, #12]
   18f96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   18f98:	68fb      	ldr	r3, [r7, #12]
   18f9a:	689a      	ldr	r2, [r3, #8]
   18f9c:	683b      	ldr	r3, [r7, #0]
   18f9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   18fa0:	68fb      	ldr	r3, [r7, #12]
   18fa2:	689b      	ldr	r3, [r3, #8]
   18fa4:	683a      	ldr	r2, [r7, #0]
   18fa6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   18fa8:	68fb      	ldr	r3, [r7, #12]
   18faa:	683a      	ldr	r2, [r7, #0]
   18fac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   18fae:	683b      	ldr	r3, [r7, #0]
   18fb0:	687a      	ldr	r2, [r7, #4]
   18fb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   18fb4:	687b      	ldr	r3, [r7, #4]
   18fb6:	681b      	ldr	r3, [r3, #0]
   18fb8:	1c5a      	adds	r2, r3, #1
   18fba:	687b      	ldr	r3, [r7, #4]
   18fbc:	601a      	str	r2, [r3, #0]
}
   18fbe:	46c0      	nop			; (mov r8, r8)
   18fc0:	46bd      	mov	sp, r7
   18fc2:	b004      	add	sp, #16
   18fc4:	bd80      	pop	{r7, pc}

00018fc6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   18fc6:	b580      	push	{r7, lr}
   18fc8:	b084      	sub	sp, #16
   18fca:	af00      	add	r7, sp, #0
   18fcc:	6078      	str	r0, [r7, #4]
   18fce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   18fd0:	683b      	ldr	r3, [r7, #0]
   18fd2:	681b      	ldr	r3, [r3, #0]
   18fd4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   18fd6:	68bb      	ldr	r3, [r7, #8]
   18fd8:	3301      	adds	r3, #1
   18fda:	d103      	bne.n	18fe4 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   18fdc:	687b      	ldr	r3, [r7, #4]
   18fde:	691b      	ldr	r3, [r3, #16]
   18fe0:	60fb      	str	r3, [r7, #12]
   18fe2:	e00c      	b.n	18ffe <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   18fe4:	687b      	ldr	r3, [r7, #4]
   18fe6:	3308      	adds	r3, #8
   18fe8:	60fb      	str	r3, [r7, #12]
   18fea:	e002      	b.n	18ff2 <vListInsert+0x2c>
   18fec:	68fb      	ldr	r3, [r7, #12]
   18fee:	685b      	ldr	r3, [r3, #4]
   18ff0:	60fb      	str	r3, [r7, #12]
   18ff2:	68fb      	ldr	r3, [r7, #12]
   18ff4:	685b      	ldr	r3, [r3, #4]
   18ff6:	681a      	ldr	r2, [r3, #0]
   18ff8:	68bb      	ldr	r3, [r7, #8]
   18ffa:	429a      	cmp	r2, r3
   18ffc:	d9f6      	bls.n	18fec <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   18ffe:	68fb      	ldr	r3, [r7, #12]
   19000:	685a      	ldr	r2, [r3, #4]
   19002:	683b      	ldr	r3, [r7, #0]
   19004:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   19006:	683b      	ldr	r3, [r7, #0]
   19008:	685b      	ldr	r3, [r3, #4]
   1900a:	683a      	ldr	r2, [r7, #0]
   1900c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   1900e:	683b      	ldr	r3, [r7, #0]
   19010:	68fa      	ldr	r2, [r7, #12]
   19012:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   19014:	68fb      	ldr	r3, [r7, #12]
   19016:	683a      	ldr	r2, [r7, #0]
   19018:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1901a:	683b      	ldr	r3, [r7, #0]
   1901c:	687a      	ldr	r2, [r7, #4]
   1901e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   19020:	687b      	ldr	r3, [r7, #4]
   19022:	681b      	ldr	r3, [r3, #0]
   19024:	1c5a      	adds	r2, r3, #1
   19026:	687b      	ldr	r3, [r7, #4]
   19028:	601a      	str	r2, [r3, #0]
}
   1902a:	46c0      	nop			; (mov r8, r8)
   1902c:	46bd      	mov	sp, r7
   1902e:	b004      	add	sp, #16
   19030:	bd80      	pop	{r7, pc}

00019032 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   19032:	b580      	push	{r7, lr}
   19034:	b084      	sub	sp, #16
   19036:	af00      	add	r7, sp, #0
   19038:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   1903a:	687b      	ldr	r3, [r7, #4]
   1903c:	691b      	ldr	r3, [r3, #16]
   1903e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   19040:	687b      	ldr	r3, [r7, #4]
   19042:	685b      	ldr	r3, [r3, #4]
   19044:	687a      	ldr	r2, [r7, #4]
   19046:	6892      	ldr	r2, [r2, #8]
   19048:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   1904a:	687b      	ldr	r3, [r7, #4]
   1904c:	689b      	ldr	r3, [r3, #8]
   1904e:	687a      	ldr	r2, [r7, #4]
   19050:	6852      	ldr	r2, [r2, #4]
   19052:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   19054:	68fb      	ldr	r3, [r7, #12]
   19056:	685a      	ldr	r2, [r3, #4]
   19058:	687b      	ldr	r3, [r7, #4]
   1905a:	429a      	cmp	r2, r3
   1905c:	d103      	bne.n	19066 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   1905e:	687b      	ldr	r3, [r7, #4]
   19060:	689a      	ldr	r2, [r3, #8]
   19062:	68fb      	ldr	r3, [r7, #12]
   19064:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   19066:	687b      	ldr	r3, [r7, #4]
   19068:	2200      	movs	r2, #0
   1906a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   1906c:	68fb      	ldr	r3, [r7, #12]
   1906e:	681b      	ldr	r3, [r3, #0]
   19070:	1e5a      	subs	r2, r3, #1
   19072:	68fb      	ldr	r3, [r7, #12]
   19074:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   19076:	68fb      	ldr	r3, [r7, #12]
   19078:	681b      	ldr	r3, [r3, #0]
}
   1907a:	0018      	movs	r0, r3
   1907c:	46bd      	mov	sp, r7
   1907e:	b004      	add	sp, #16
   19080:	bd80      	pop	{r7, pc}
	...

00019084 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   19084:	b580      	push	{r7, lr}
   19086:	b084      	sub	sp, #16
   19088:	af00      	add	r7, sp, #0
   1908a:	60f8      	str	r0, [r7, #12]
   1908c:	60b9      	str	r1, [r7, #8]
   1908e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   19090:	68fb      	ldr	r3, [r7, #12]
   19092:	3b04      	subs	r3, #4
   19094:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   19096:	68fb      	ldr	r3, [r7, #12]
   19098:	2280      	movs	r2, #128	; 0x80
   1909a:	0452      	lsls	r2, r2, #17
   1909c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1909e:	68fb      	ldr	r3, [r7, #12]
   190a0:	3b04      	subs	r3, #4
   190a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   190a4:	68ba      	ldr	r2, [r7, #8]
   190a6:	68fb      	ldr	r3, [r7, #12]
   190a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   190aa:	68fb      	ldr	r3, [r7, #12]
   190ac:	3b04      	subs	r3, #4
   190ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   190b0:	4a08      	ldr	r2, [pc, #32]	; (190d4 <pxPortInitialiseStack+0x50>)
   190b2:	68fb      	ldr	r3, [r7, #12]
   190b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   190b6:	68fb      	ldr	r3, [r7, #12]
   190b8:	3b14      	subs	r3, #20
   190ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   190bc:	687a      	ldr	r2, [r7, #4]
   190be:	68fb      	ldr	r3, [r7, #12]
   190c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
   190c2:	68fb      	ldr	r3, [r7, #12]
   190c4:	3b20      	subs	r3, #32
   190c6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   190c8:	68fb      	ldr	r3, [r7, #12]
}
   190ca:	0018      	movs	r0, r3
   190cc:	46bd      	mov	sp, r7
   190ce:	b004      	add	sp, #16
   190d0:	bd80      	pop	{r7, pc}
   190d2:	46c0      	nop			; (mov r8, r8)
   190d4:	000190d9 	.word	0x000190d9

000190d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   190d8:	b580      	push	{r7, lr}
   190da:	b082      	sub	sp, #8
   190dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
   190de:	2300      	movs	r3, #0
   190e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   190e2:	4b07      	ldr	r3, [pc, #28]	; (19100 <prvTaskExitError+0x28>)
   190e4:	681b      	ldr	r3, [r3, #0]
   190e6:	3301      	adds	r3, #1
   190e8:	d001      	beq.n	190ee <prvTaskExitError+0x16>
   190ea:	b672      	cpsid	i
   190ec:	e7fe      	b.n	190ec <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
   190ee:	b672      	cpsid	i
	while( ulDummy == 0 )
   190f0:	46c0      	nop			; (mov r8, r8)
   190f2:	687b      	ldr	r3, [r7, #4]
   190f4:	2b00      	cmp	r3, #0
   190f6:	d0fc      	beq.n	190f2 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   190f8:	46c0      	nop			; (mov r8, r8)
   190fa:	46bd      	mov	sp, r7
   190fc:	b002      	add	sp, #8
   190fe:	bd80      	pop	{r7, pc}
   19100:	20000104 	.word	0x20000104

00019104 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
   19104:	b580      	push	{r7, lr}
   19106:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
   19108:	46c0      	nop			; (mov r8, r8)
   1910a:	46bd      	mov	sp, r7
   1910c:	bd80      	pop	{r7, pc}
	...

00019110 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
   19110:	4a0b      	ldr	r2, [pc, #44]	; (19140 <pxCurrentTCBConst2>)
   19112:	6813      	ldr	r3, [r2, #0]
   19114:	6818      	ldr	r0, [r3, #0]
   19116:	3020      	adds	r0, #32
   19118:	f380 8809 	msr	PSP, r0
   1911c:	2002      	movs	r0, #2
   1911e:	f380 8814 	msr	CONTROL, r0
   19122:	f3bf 8f6f 	isb	sy
   19126:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   19128:	46ae      	mov	lr, r5
   1912a:	bc08      	pop	{r3}
   1912c:	bc04      	pop	{r2}
   1912e:	b662      	cpsie	i
   19130:	4718      	bx	r3
   19132:	46c0      	nop			; (mov r8, r8)
   19134:	46c0      	nop			; (mov r8, r8)
   19136:	46c0      	nop			; (mov r8, r8)
   19138:	46c0      	nop			; (mov r8, r8)
   1913a:	46c0      	nop			; (mov r8, r8)
   1913c:	46c0      	nop			; (mov r8, r8)
   1913e:	46c0      	nop			; (mov r8, r8)

00019140 <pxCurrentTCBConst2>:
   19140:	200040a8 	.word	0x200040a8
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
   19144:	46c0      	nop			; (mov r8, r8)
   19146:	46c0      	nop			; (mov r8, r8)

00019148 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   19148:	b580      	push	{r7, lr}
   1914a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   1914c:	4b0e      	ldr	r3, [pc, #56]	; (19188 <xPortStartScheduler+0x40>)
   1914e:	4a0e      	ldr	r2, [pc, #56]	; (19188 <xPortStartScheduler+0x40>)
   19150:	6812      	ldr	r2, [r2, #0]
   19152:	21ff      	movs	r1, #255	; 0xff
   19154:	0409      	lsls	r1, r1, #16
   19156:	430a      	orrs	r2, r1
   19158:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   1915a:	4b0b      	ldr	r3, [pc, #44]	; (19188 <xPortStartScheduler+0x40>)
   1915c:	4a0a      	ldr	r2, [pc, #40]	; (19188 <xPortStartScheduler+0x40>)
   1915e:	6812      	ldr	r2, [r2, #0]
   19160:	21ff      	movs	r1, #255	; 0xff
   19162:	0609      	lsls	r1, r1, #24
   19164:	430a      	orrs	r2, r1
   19166:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   19168:	4b08      	ldr	r3, [pc, #32]	; (1918c <xPortStartScheduler+0x44>)
   1916a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   1916c:	4b08      	ldr	r3, [pc, #32]	; (19190 <xPortStartScheduler+0x48>)
   1916e:	2200      	movs	r2, #0
   19170:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
   19172:	4b08      	ldr	r3, [pc, #32]	; (19194 <xPortStartScheduler+0x4c>)
   19174:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   19176:	4b08      	ldr	r3, [pc, #32]	; (19198 <xPortStartScheduler+0x50>)
   19178:	4798      	blx	r3
	prvTaskExitError();
   1917a:	4b08      	ldr	r3, [pc, #32]	; (1919c <xPortStartScheduler+0x54>)
   1917c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   1917e:	2300      	movs	r3, #0
}
   19180:	0018      	movs	r0, r3
   19182:	46bd      	mov	sp, r7
   19184:	bd80      	pop	{r7, pc}
   19186:	46c0      	nop			; (mov r8, r8)
   19188:	e000ed20 	.word	0xe000ed20
   1918c:	000192a9 	.word	0x000192a9
   19190:	20000104 	.word	0x20000104
   19194:	00019111 	.word	0x00019111
   19198:	0001b805 	.word	0x0001b805
   1919c:	000190d9 	.word	0x000190d9

000191a0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   191a0:	b580      	push	{r7, lr}
   191a2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
   191a4:	4b03      	ldr	r3, [pc, #12]	; (191b4 <vPortYield+0x14>)
   191a6:	2280      	movs	r2, #128	; 0x80
   191a8:	0552      	lsls	r2, r2, #21
   191aa:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	//__asm volatile( "dsb" ::: "memory" );
	//__asm volatile( "isb" );
}
   191ac:	46c0      	nop			; (mov r8, r8)
   191ae:	46bd      	mov	sp, r7
   191b0:	bd80      	pop	{r7, pc}
   191b2:	46c0      	nop			; (mov r8, r8)
   191b4:	e000ed04 	.word	0xe000ed04

000191b8 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   191b8:	b580      	push	{r7, lr}
   191ba:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
   191bc:	b672      	cpsid	i
    uxCriticalNesting++;
   191be:	4b06      	ldr	r3, [pc, #24]	; (191d8 <vPortEnterCritical+0x20>)
   191c0:	681b      	ldr	r3, [r3, #0]
   191c2:	1c5a      	adds	r2, r3, #1
   191c4:	4b04      	ldr	r3, [pc, #16]	; (191d8 <vPortEnterCritical+0x20>)
   191c6:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
   191c8:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   191cc:	f3bf 8f6f 	isb	sy
}
   191d0:	46c0      	nop			; (mov r8, r8)
   191d2:	46bd      	mov	sp, r7
   191d4:	bd80      	pop	{r7, pc}
   191d6:	46c0      	nop			; (mov r8, r8)
   191d8:	20000104 	.word	0x20000104

000191dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   191dc:	b580      	push	{r7, lr}
   191de:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   191e0:	4b09      	ldr	r3, [pc, #36]	; (19208 <vPortExitCritical+0x2c>)
   191e2:	681b      	ldr	r3, [r3, #0]
   191e4:	2b00      	cmp	r3, #0
   191e6:	d101      	bne.n	191ec <vPortExitCritical+0x10>
   191e8:	b672      	cpsid	i
   191ea:	e7fe      	b.n	191ea <vPortExitCritical+0xe>
    uxCriticalNesting--;
   191ec:	4b06      	ldr	r3, [pc, #24]	; (19208 <vPortExitCritical+0x2c>)
   191ee:	681b      	ldr	r3, [r3, #0]
   191f0:	1e5a      	subs	r2, r3, #1
   191f2:	4b05      	ldr	r3, [pc, #20]	; (19208 <vPortExitCritical+0x2c>)
   191f4:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
   191f6:	4b04      	ldr	r3, [pc, #16]	; (19208 <vPortExitCritical+0x2c>)
   191f8:	681b      	ldr	r3, [r3, #0]
   191fa:	2b00      	cmp	r3, #0
   191fc:	d100      	bne.n	19200 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
   191fe:	b662      	cpsie	i
    }
}
   19200:	46c0      	nop			; (mov r8, r8)
   19202:	46bd      	mov	sp, r7
   19204:	bd80      	pop	{r7, pc}
   19206:	46c0      	nop			; (mov r8, r8)
   19208:	20000104 	.word	0x20000104

0001920c <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
   1920c:	f3ef 8010 	mrs	r0, PRIMASK
   19210:	b672      	cpsid	i
   19212:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
   19214:	46c0      	nop			; (mov r8, r8)
   19216:	0018      	movs	r0, r3

00019218 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
   19218:	f380 8810 	msr	PRIMASK, r0
   1921c:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
   1921e:	46c0      	nop			; (mov r8, r8)

00019220 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   19220:	f3ef 8009 	mrs	r0, PSP
   19224:	4b0e      	ldr	r3, [pc, #56]	; (19260 <pxCurrentTCBConst>)
   19226:	681a      	ldr	r2, [r3, #0]
   19228:	3820      	subs	r0, #32
   1922a:	6010      	str	r0, [r2, #0]
   1922c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1922e:	4644      	mov	r4, r8
   19230:	464d      	mov	r5, r9
   19232:	4656      	mov	r6, sl
   19234:	465f      	mov	r7, fp
   19236:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   19238:	b508      	push	{r3, lr}
   1923a:	b672      	cpsid	i
   1923c:	f002 fae2 	bl	1b804 <vTaskSwitchContext>
   19240:	b662      	cpsie	i
   19242:	bc0c      	pop	{r2, r3}
   19244:	6811      	ldr	r1, [r2, #0]
   19246:	6808      	ldr	r0, [r1, #0]
   19248:	3010      	adds	r0, #16
   1924a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1924c:	46a0      	mov	r8, r4
   1924e:	46a9      	mov	r9, r5
   19250:	46b2      	mov	sl, r6
   19252:	46bb      	mov	fp, r7
   19254:	f380 8809 	msr	PSP, r0
   19258:	3820      	subs	r0, #32
   1925a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1925c:	4718      	bx	r3
   1925e:	46c0      	nop			; (mov r8, r8)

00019260 <pxCurrentTCBConst>:
   19260:	200040a8 	.word	0x200040a8
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
   19264:	46c0      	nop			; (mov r8, r8)
   19266:	46c0      	nop			; (mov r8, r8)

00019268 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   19268:	b580      	push	{r7, lr}
   1926a:	b082      	sub	sp, #8
   1926c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   1926e:	4b0a      	ldr	r3, [pc, #40]	; (19298 <SysTick_Handler+0x30>)
   19270:	4798      	blx	r3
   19272:	0003      	movs	r3, r0
   19274:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   19276:	4b09      	ldr	r3, [pc, #36]	; (1929c <SysTick_Handler+0x34>)
   19278:	4798      	blx	r3
   1927a:	1e03      	subs	r3, r0, #0
   1927c:	d003      	beq.n	19286 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   1927e:	4b08      	ldr	r3, [pc, #32]	; (192a0 <SysTick_Handler+0x38>)
   19280:	2280      	movs	r2, #128	; 0x80
   19282:	0552      	lsls	r2, r2, #21
   19284:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
   19286:	687b      	ldr	r3, [r7, #4]
   19288:	0018      	movs	r0, r3
   1928a:	4b06      	ldr	r3, [pc, #24]	; (192a4 <SysTick_Handler+0x3c>)
   1928c:	4798      	blx	r3
}
   1928e:	46c0      	nop			; (mov r8, r8)
   19290:	46bd      	mov	sp, r7
   19292:	b002      	add	sp, #8
   19294:	bd80      	pop	{r7, pc}
   19296:	46c0      	nop			; (mov r8, r8)
   19298:	0001920d 	.word	0x0001920d
   1929c:	0001b615 	.word	0x0001b615
   192a0:	e000ed04 	.word	0xe000ed04
   192a4:	00019219 	.word	0x00019219

000192a8 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
   192a8:	b5b0      	push	{r4, r5, r7, lr}
   192aa:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   192ac:	4b0b      	ldr	r3, [pc, #44]	; (192dc <prvSetupTimerInterrupt+0x34>)
   192ae:	2200      	movs	r2, #0
   192b0:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
   192b2:	4b0b      	ldr	r3, [pc, #44]	; (192e0 <prvSetupTimerInterrupt+0x38>)
   192b4:	2200      	movs	r2, #0
   192b6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   192b8:	4c0a      	ldr	r4, [pc, #40]	; (192e4 <prvSetupTimerInterrupt+0x3c>)
   192ba:	2000      	movs	r0, #0
   192bc:	4b0a      	ldr	r3, [pc, #40]	; (192e8 <prvSetupTimerInterrupt+0x40>)
   192be:	4798      	blx	r3
   192c0:	4b0a      	ldr	r3, [pc, #40]	; (192ec <prvSetupTimerInterrupt+0x44>)
   192c2:	22fa      	movs	r2, #250	; 0xfa
   192c4:	0091      	lsls	r1, r2, #2
   192c6:	4798      	blx	r3
   192c8:	0003      	movs	r3, r0
   192ca:	3b01      	subs	r3, #1
   192cc:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   192ce:	4b03      	ldr	r3, [pc, #12]	; (192dc <prvSetupTimerInterrupt+0x34>)
   192d0:	2207      	movs	r2, #7
   192d2:	601a      	str	r2, [r3, #0]
}
   192d4:	46c0      	nop			; (mov r8, r8)
   192d6:	46bd      	mov	sp, r7
   192d8:	bdb0      	pop	{r4, r5, r7, pc}
   192da:	46c0      	nop			; (mov r8, r8)
   192dc:	e000e010 	.word	0xe000e010
   192e0:	e000e018 	.word	0xe000e018
   192e4:	e000e014 	.word	0xe000e014
   192e8:	00028e65 	.word	0x00028e65
   192ec:	00031b25 	.word	0x00031b25

000192f0 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   192f0:	b580      	push	{r7, lr}
   192f2:	b084      	sub	sp, #16
   192f4:	af00      	add	r7, sp, #0
   192f6:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
   192f8:	2300      	movs	r3, #0
   192fa:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   192fc:	687b      	ldr	r3, [r7, #4]
   192fe:	2207      	movs	r2, #7
   19300:	4013      	ands	r3, r2
   19302:	d004      	beq.n	1930e <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   19304:	687b      	ldr	r3, [r7, #4]
   19306:	2207      	movs	r2, #7
   19308:	4393      	bics	r3, r2
   1930a:	3308      	adds	r3, #8
   1930c:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
   1930e:	4b21      	ldr	r3, [pc, #132]	; (19394 <pvPortMalloc+0xa4>)
   19310:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
   19312:	4b21      	ldr	r3, [pc, #132]	; (19398 <pvPortMalloc+0xa8>)
   19314:	681b      	ldr	r3, [r3, #0]
   19316:	2b00      	cmp	r3, #0
   19318:	d105      	bne.n	19326 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   1931a:	4b20      	ldr	r3, [pc, #128]	; (1939c <pvPortMalloc+0xac>)
   1931c:	2207      	movs	r2, #7
   1931e:	4393      	bics	r3, r2
   19320:	001a      	movs	r2, r3
   19322:	4b1d      	ldr	r3, [pc, #116]	; (19398 <pvPortMalloc+0xa8>)
   19324:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   19326:	4b1e      	ldr	r3, [pc, #120]	; (193a0 <pvPortMalloc+0xb0>)
   19328:	681a      	ldr	r2, [r3, #0]
   1932a:	687b      	ldr	r3, [r7, #4]
   1932c:	18d3      	adds	r3, r2, r3
   1932e:	4a1d      	ldr	r2, [pc, #116]	; (193a4 <pvPortMalloc+0xb4>)
   19330:	4293      	cmp	r3, r2
   19332:	d813      	bhi.n	1935c <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
   19334:	4b1a      	ldr	r3, [pc, #104]	; (193a0 <pvPortMalloc+0xb0>)
   19336:	681a      	ldr	r2, [r3, #0]
   19338:	687b      	ldr	r3, [r7, #4]
   1933a:	18d2      	adds	r2, r2, r3
   1933c:	4b18      	ldr	r3, [pc, #96]	; (193a0 <pvPortMalloc+0xb0>)
   1933e:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   19340:	429a      	cmp	r2, r3
   19342:	d90b      	bls.n	1935c <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
   19344:	4b14      	ldr	r3, [pc, #80]	; (19398 <pvPortMalloc+0xa8>)
   19346:	681a      	ldr	r2, [r3, #0]
   19348:	4b15      	ldr	r3, [pc, #84]	; (193a0 <pvPortMalloc+0xb0>)
   1934a:	681b      	ldr	r3, [r3, #0]
   1934c:	18d3      	adds	r3, r2, r3
   1934e:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
   19350:	4b13      	ldr	r3, [pc, #76]	; (193a0 <pvPortMalloc+0xb0>)
   19352:	681a      	ldr	r2, [r3, #0]
   19354:	687b      	ldr	r3, [r7, #4]
   19356:	18d2      	adds	r2, r2, r3
   19358:	4b11      	ldr	r3, [pc, #68]	; (193a0 <pvPortMalloc+0xb0>)
   1935a:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
   1935c:	68fb      	ldr	r3, [r7, #12]
   1935e:	2b00      	cmp	r3, #0
   19360:	d006      	beq.n	19370 <pvPortMalloc+0x80>
   19362:	68fb      	ldr	r3, [r7, #12]
   19364:	687a      	ldr	r2, [r7, #4]
   19366:	0019      	movs	r1, r3
   19368:	2094      	movs	r0, #148	; 0x94
   1936a:	4b0f      	ldr	r3, [pc, #60]	; (193a8 <pvPortMalloc+0xb8>)
   1936c:	4798      	blx	r3
   1936e:	e005      	b.n	1937c <pvPortMalloc+0x8c>
   19370:	68fb      	ldr	r3, [r7, #12]
   19372:	687a      	ldr	r2, [r7, #4]
   19374:	0019      	movs	r1, r3
   19376:	20e8      	movs	r0, #232	; 0xe8
   19378:	4b0b      	ldr	r3, [pc, #44]	; (193a8 <pvPortMalloc+0xb8>)
   1937a:	4798      	blx	r3
	}
	( void ) xTaskResumeAll();
   1937c:	4b0b      	ldr	r3, [pc, #44]	; (193ac <pvPortMalloc+0xbc>)
   1937e:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   19380:	68fb      	ldr	r3, [r7, #12]
   19382:	2b00      	cmp	r3, #0
   19384:	d101      	bne.n	1938a <pvPortMalloc+0x9a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   19386:	4b0a      	ldr	r3, [pc, #40]	; (193b0 <pvPortMalloc+0xc0>)
   19388:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
   1938a:	68fb      	ldr	r3, [r7, #12]
}
   1938c:	0018      	movs	r0, r3
   1938e:	46bd      	mov	sp, r7
   19390:	b004      	add	sp, #16
   19392:	bd80      	pop	{r7, pc}
   19394:	0001b471 	.word	0x0001b471
   19398:	200040a4 	.word	0x200040a4
   1939c:	20000de0 	.word	0x20000de0
   193a0:	200040a0 	.word	0x200040a0
   193a4:	000032bf 	.word	0x000032bf
   193a8:	00017a61 	.word	0x00017a61
   193ac:	0001b489 	.word	0x0001b489
   193b0:	00031af5 	.word	0x00031af5

000193b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   193b4:	b580      	push	{r7, lr}
   193b6:	b082      	sub	sp, #8
   193b8:	af00      	add	r7, sp, #0
   193ba:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
   193bc:	687b      	ldr	r3, [r7, #4]
   193be:	2b00      	cmp	r3, #0
   193c0:	d001      	beq.n	193c6 <vPortFree+0x12>
   193c2:	b672      	cpsid	i
   193c4:	e7fe      	b.n	193c4 <vPortFree+0x10>
}
   193c6:	46c0      	nop			; (mov r8, r8)
   193c8:	46bd      	mov	sp, r7
   193ca:	b002      	add	sp, #8
   193cc:	bd80      	pop	{r7, pc}
	...

000193d0 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
   193d0:	b580      	push	{r7, lr}
   193d2:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
   193d4:	4b03      	ldr	r3, [pc, #12]	; (193e4 <xPortGetFreeHeapSize+0x14>)
   193d6:	681b      	ldr	r3, [r3, #0]
   193d8:	22cb      	movs	r2, #203	; 0xcb
   193da:	0192      	lsls	r2, r2, #6
   193dc:	1ad3      	subs	r3, r2, r3
}
   193de:	0018      	movs	r0, r3
   193e0:	46bd      	mov	sp, r7
   193e2:	bd80      	pop	{r7, pc}
   193e4:	200040a0 	.word	0x200040a0

000193e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   193e8:	b580      	push	{r7, lr}
   193ea:	b084      	sub	sp, #16
   193ec:	af00      	add	r7, sp, #0
   193ee:	6078      	str	r0, [r7, #4]
   193f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   193f2:	687b      	ldr	r3, [r7, #4]
   193f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   193f6:	68fb      	ldr	r3, [r7, #12]
   193f8:	2b00      	cmp	r3, #0
   193fa:	d101      	bne.n	19400 <xQueueGenericReset+0x18>
   193fc:	b672      	cpsid	i
   193fe:	e7fe      	b.n	193fe <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
   19400:	4b23      	ldr	r3, [pc, #140]	; (19490 <xQueueGenericReset+0xa8>)
   19402:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   19404:	68fb      	ldr	r3, [r7, #12]
   19406:	681a      	ldr	r2, [r3, #0]
   19408:	68fb      	ldr	r3, [r7, #12]
   1940a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   1940c:	68fb      	ldr	r3, [r7, #12]
   1940e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   19410:	434b      	muls	r3, r1
   19412:	18d2      	adds	r2, r2, r3
   19414:	68fb      	ldr	r3, [r7, #12]
   19416:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   19418:	68fb      	ldr	r3, [r7, #12]
   1941a:	2200      	movs	r2, #0
   1941c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   1941e:	68fb      	ldr	r3, [r7, #12]
   19420:	681a      	ldr	r2, [r3, #0]
   19422:	68fb      	ldr	r3, [r7, #12]
   19424:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   19426:	68fb      	ldr	r3, [r7, #12]
   19428:	681a      	ldr	r2, [r3, #0]
   1942a:	68fb      	ldr	r3, [r7, #12]
   1942c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1942e:	1e59      	subs	r1, r3, #1
   19430:	68fb      	ldr	r3, [r7, #12]
   19432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   19434:	434b      	muls	r3, r1
   19436:	18d2      	adds	r2, r2, r3
   19438:	68fb      	ldr	r3, [r7, #12]
   1943a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   1943c:	68fb      	ldr	r3, [r7, #12]
   1943e:	2244      	movs	r2, #68	; 0x44
   19440:	21ff      	movs	r1, #255	; 0xff
   19442:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
   19444:	68fb      	ldr	r3, [r7, #12]
   19446:	2245      	movs	r2, #69	; 0x45
   19448:	21ff      	movs	r1, #255	; 0xff
   1944a:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
   1944c:	683b      	ldr	r3, [r7, #0]
   1944e:	2b00      	cmp	r3, #0
   19450:	d10d      	bne.n	1946e <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   19452:	68fb      	ldr	r3, [r7, #12]
   19454:	691b      	ldr	r3, [r3, #16]
   19456:	2b00      	cmp	r3, #0
   19458:	d013      	beq.n	19482 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1945a:	68fb      	ldr	r3, [r7, #12]
   1945c:	3310      	adds	r3, #16
   1945e:	0018      	movs	r0, r3
   19460:	4b0c      	ldr	r3, [pc, #48]	; (19494 <xQueueGenericReset+0xac>)
   19462:	4798      	blx	r3
   19464:	1e03      	subs	r3, r0, #0
   19466:	d00c      	beq.n	19482 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
   19468:	4b0b      	ldr	r3, [pc, #44]	; (19498 <xQueueGenericReset+0xb0>)
   1946a:	4798      	blx	r3
   1946c:	e009      	b.n	19482 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   1946e:	68fb      	ldr	r3, [r7, #12]
   19470:	3310      	adds	r3, #16
   19472:	0018      	movs	r0, r3
   19474:	4b09      	ldr	r3, [pc, #36]	; (1949c <xQueueGenericReset+0xb4>)
   19476:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   19478:	68fb      	ldr	r3, [r7, #12]
   1947a:	3324      	adds	r3, #36	; 0x24
   1947c:	0018      	movs	r0, r3
   1947e:	4b07      	ldr	r3, [pc, #28]	; (1949c <xQueueGenericReset+0xb4>)
   19480:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   19482:	4b07      	ldr	r3, [pc, #28]	; (194a0 <xQueueGenericReset+0xb8>)
   19484:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   19486:	2301      	movs	r3, #1
}
   19488:	0018      	movs	r0, r3
   1948a:	46bd      	mov	sp, r7
   1948c:	b004      	add	sp, #16
   1948e:	bd80      	pop	{r7, pc}
   19490:	000191b9 	.word	0x000191b9
   19494:	0001ba49 	.word	0x0001ba49
   19498:	000191a1 	.word	0x000191a1
   1949c:	00018f31 	.word	0x00018f31
   194a0:	000191dd 	.word	0x000191dd

000194a4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   194a4:	b590      	push	{r4, r7, lr}
   194a6:	b08b      	sub	sp, #44	; 0x2c
   194a8:	af02      	add	r7, sp, #8
   194aa:	60f8      	str	r0, [r7, #12]
   194ac:	60b9      	str	r1, [r7, #8]
   194ae:	1dfb      	adds	r3, r7, #7
   194b0:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   194b2:	68fb      	ldr	r3, [r7, #12]
   194b4:	2b00      	cmp	r3, #0
   194b6:	d101      	bne.n	194bc <xQueueGenericCreate+0x18>
   194b8:	b672      	cpsid	i
   194ba:	e7fe      	b.n	194ba <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
   194bc:	68bb      	ldr	r3, [r7, #8]
   194be:	2b00      	cmp	r3, #0
   194c0:	d102      	bne.n	194c8 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   194c2:	2300      	movs	r3, #0
   194c4:	61fb      	str	r3, [r7, #28]
   194c6:	e003      	b.n	194d0 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   194c8:	68fb      	ldr	r3, [r7, #12]
   194ca:	68ba      	ldr	r2, [r7, #8]
   194cc:	4353      	muls	r3, r2
   194ce:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   194d0:	69fb      	ldr	r3, [r7, #28]
   194d2:	3354      	adds	r3, #84	; 0x54
   194d4:	0018      	movs	r0, r3
   194d6:	4b19      	ldr	r3, [pc, #100]	; (1953c <xQueueGenericCreate+0x98>)
   194d8:	4798      	blx	r3
   194da:	0003      	movs	r3, r0
   194dc:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
   194de:	69bb      	ldr	r3, [r7, #24]
   194e0:	2b00      	cmp	r3, #0
   194e2:	d00d      	beq.n	19500 <xQueueGenericCreate+0x5c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   194e4:	69bb      	ldr	r3, [r7, #24]
   194e6:	3354      	adds	r3, #84	; 0x54
   194e8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   194ea:	1dfb      	adds	r3, r7, #7
   194ec:	781c      	ldrb	r4, [r3, #0]
   194ee:	697a      	ldr	r2, [r7, #20]
   194f0:	68b9      	ldr	r1, [r7, #8]
   194f2:	68f8      	ldr	r0, [r7, #12]
   194f4:	69bb      	ldr	r3, [r7, #24]
   194f6:	9300      	str	r3, [sp, #0]
   194f8:	0023      	movs	r3, r4
   194fa:	4c11      	ldr	r4, [pc, #68]	; (19540 <xQueueGenericCreate+0x9c>)
   194fc:	47a0      	blx	r4
   194fe:	e017      	b.n	19530 <xQueueGenericCreate+0x8c>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
   19500:	4b10      	ldr	r3, [pc, #64]	; (19544 <xQueueGenericCreate+0xa0>)
   19502:	4798      	blx	r3
   19504:	0003      	movs	r3, r0
   19506:	0018      	movs	r0, r3
   19508:	4b0f      	ldr	r3, [pc, #60]	; (19548 <xQueueGenericCreate+0xa4>)
   1950a:	4798      	blx	r3
   1950c:	0003      	movs	r3, r0
   1950e:	001a      	movs	r2, r3
   19510:	4b0e      	ldr	r3, [pc, #56]	; (1954c <xQueueGenericCreate+0xa8>)
   19512:	881b      	ldrh	r3, [r3, #0]
   19514:	4013      	ands	r3, r2
   19516:	b29b      	uxth	r3, r3
   19518:	2b00      	cmp	r3, #0
   1951a:	d009      	beq.n	19530 <xQueueGenericCreate+0x8c>
   1951c:	1dfb      	adds	r3, r7, #7
   1951e:	781b      	ldrb	r3, [r3, #0]
   19520:	4a0b      	ldr	r2, [pc, #44]	; (19550 <xQueueGenericCreate+0xac>)
   19522:	5cd3      	ldrb	r3, [r2, r3]
   19524:	3340      	adds	r3, #64	; 0x40
   19526:	b2db      	uxtb	r3, r3
   19528:	2100      	movs	r1, #0
   1952a:	0018      	movs	r0, r3
   1952c:	4b09      	ldr	r3, [pc, #36]	; (19554 <xQueueGenericCreate+0xb0>)
   1952e:	4798      	blx	r3
		}

		return pxNewQueue;
   19530:	69bb      	ldr	r3, [r7, #24]
	}
   19532:	0018      	movs	r0, r3
   19534:	46bd      	mov	sp, r7
   19536:	b009      	add	sp, #36	; 0x24
   19538:	bd90      	pop	{r4, r7, pc}
   1953a:	46c0      	nop			; (mov r8, r8)
   1953c:	000192f1 	.word	0x000192f1
   19540:	00019559 	.word	0x00019559
   19544:	00017455 	.word	0x00017455
   19548:	000171b9 	.word	0x000171b9
   1954c:	20000100 	.word	0x20000100
   19550:	200000f4 	.word	0x200000f4
   19554:	00017eb9 	.word	0x00017eb9

00019558 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   19558:	b5b0      	push	{r4, r5, r7, lr}
   1955a:	b084      	sub	sp, #16
   1955c:	af00      	add	r7, sp, #0
   1955e:	60f8      	str	r0, [r7, #12]
   19560:	60b9      	str	r1, [r7, #8]
   19562:	607a      	str	r2, [r7, #4]
   19564:	001a      	movs	r2, r3
   19566:	1cfb      	adds	r3, r7, #3
   19568:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   1956a:	68bb      	ldr	r3, [r7, #8]
   1956c:	2b00      	cmp	r3, #0
   1956e:	d103      	bne.n	19578 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   19570:	6a3b      	ldr	r3, [r7, #32]
   19572:	6a3a      	ldr	r2, [r7, #32]
   19574:	601a      	str	r2, [r3, #0]
   19576:	e002      	b.n	1957e <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   19578:	6a3b      	ldr	r3, [r7, #32]
   1957a:	687a      	ldr	r2, [r7, #4]
   1957c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   1957e:	6a3b      	ldr	r3, [r7, #32]
   19580:	68fa      	ldr	r2, [r7, #12]
   19582:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   19584:	6a3b      	ldr	r3, [r7, #32]
   19586:	68ba      	ldr	r2, [r7, #8]
   19588:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   1958a:	6a3b      	ldr	r3, [r7, #32]
   1958c:	2101      	movs	r1, #1
   1958e:	0018      	movs	r0, r3
   19590:	4b41      	ldr	r3, [pc, #260]	; (19698 <prvInitialiseNewQueue+0x140>)
   19592:	4798      	blx	r3

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
   19594:	6a3b      	ldr	r3, [r7, #32]
   19596:	1cfa      	adds	r2, r7, #3
   19598:	2150      	movs	r1, #80	; 0x50
   1959a:	7812      	ldrb	r2, [r2, #0]
   1959c:	545a      	strb	r2, [r3, r1]
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
   1959e:	6a3b      	ldr	r3, [r7, #32]
   195a0:	2200      	movs	r2, #0
   195a2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
   195a4:	6a3b      	ldr	r3, [r7, #32]
   195a6:	0018      	movs	r0, r3
   195a8:	4b3c      	ldr	r3, [pc, #240]	; (1969c <prvInitialiseNewQueue+0x144>)
   195aa:	4798      	blx	r3
   195ac:	0003      	movs	r3, r0
   195ae:	001a      	movs	r2, r3
   195b0:	4b3b      	ldr	r3, [pc, #236]	; (196a0 <prvInitialiseNewQueue+0x148>)
   195b2:	5c9b      	ldrb	r3, [r3, r2]
   195b4:	0018      	movs	r0, r3
   195b6:	4b3b      	ldr	r3, [pc, #236]	; (196a4 <prvInitialiseNewQueue+0x14c>)
   195b8:	4798      	blx	r3
   195ba:	0003      	movs	r3, r0
   195bc:	b29a      	uxth	r2, r3
   195be:	6a3b      	ldr	r3, [r7, #32]
   195c0:	0011      	movs	r1, r2
   195c2:	0018      	movs	r0, r3
   195c4:	4b38      	ldr	r3, [pc, #224]	; (196a8 <prvInitialiseNewQueue+0x150>)
   195c6:	4798      	blx	r3
   195c8:	4b38      	ldr	r3, [pc, #224]	; (196ac <prvInitialiseNewQueue+0x154>)
   195ca:	881a      	ldrh	r2, [r3, #0]
   195cc:	6a3b      	ldr	r3, [r7, #32]
   195ce:	0011      	movs	r1, r2
   195d0:	0018      	movs	r0, r3
   195d2:	4b37      	ldr	r3, [pc, #220]	; (196b0 <prvInitialiseNewQueue+0x158>)
   195d4:	4798      	blx	r3
   195d6:	6a3b      	ldr	r3, [r7, #32]
   195d8:	0018      	movs	r0, r3
   195da:	4b30      	ldr	r3, [pc, #192]	; (1969c <prvInitialiseNewQueue+0x144>)
   195dc:	4798      	blx	r3
   195de:	0003      	movs	r3, r0
   195e0:	001a      	movs	r2, r3
   195e2:	4b2f      	ldr	r3, [pc, #188]	; (196a0 <prvInitialiseNewQueue+0x148>)
   195e4:	5c9c      	ldrb	r4, [r3, r2]
   195e6:	6a3b      	ldr	r3, [r7, #32]
   195e8:	0018      	movs	r0, r3
   195ea:	4b32      	ldr	r3, [pc, #200]	; (196b4 <prvInitialiseNewQueue+0x15c>)
   195ec:	4798      	blx	r3
   195ee:	0003      	movs	r3, r0
   195f0:	b2db      	uxtb	r3, r3
   195f2:	0019      	movs	r1, r3
   195f4:	0020      	movs	r0, r4
   195f6:	4b30      	ldr	r3, [pc, #192]	; (196b8 <prvInitialiseNewQueue+0x160>)
   195f8:	4798      	blx	r3
   195fa:	4b30      	ldr	r3, [pc, #192]	; (196bc <prvInitialiseNewQueue+0x164>)
   195fc:	4798      	blx	r3
   195fe:	0003      	movs	r3, r0
   19600:	0018      	movs	r0, r3
   19602:	4b2f      	ldr	r3, [pc, #188]	; (196c0 <prvInitialiseNewQueue+0x168>)
   19604:	4798      	blx	r3
   19606:	0003      	movs	r3, r0
   19608:	001a      	movs	r2, r3
   1960a:	4b2e      	ldr	r3, [pc, #184]	; (196c4 <prvInitialiseNewQueue+0x16c>)
   1960c:	881b      	ldrh	r3, [r3, #0]
   1960e:	4013      	ands	r3, r2
   19610:	b29b      	uxth	r3, r3
   19612:	2b00      	cmp	r3, #0
   19614:	d029      	beq.n	1966a <prvInitialiseNewQueue+0x112>
   19616:	6a3b      	ldr	r3, [r7, #32]
   19618:	0018      	movs	r0, r3
   1961a:	4b2b      	ldr	r3, [pc, #172]	; (196c8 <prvInitialiseNewQueue+0x170>)
   1961c:	4798      	blx	r3
   1961e:	0003      	movs	r3, r0
   19620:	001a      	movs	r2, r3
   19622:	4b28      	ldr	r3, [pc, #160]	; (196c4 <prvInitialiseNewQueue+0x16c>)
   19624:	881b      	ldrh	r3, [r3, #0]
   19626:	4013      	ands	r3, r2
   19628:	b29b      	uxth	r3, r3
   1962a:	2b00      	cmp	r3, #0
   1962c:	d01d      	beq.n	1966a <prvInitialiseNewQueue+0x112>
   1962e:	6a3b      	ldr	r3, [r7, #32]
   19630:	0018      	movs	r0, r3
   19632:	4b1a      	ldr	r3, [pc, #104]	; (1969c <prvInitialiseNewQueue+0x144>)
   19634:	4798      	blx	r3
   19636:	0003      	movs	r3, r0
   19638:	001a      	movs	r2, r3
   1963a:	4b19      	ldr	r3, [pc, #100]	; (196a0 <prvInitialiseNewQueue+0x148>)
   1963c:	5c9b      	ldrb	r3, [r3, r2]
   1963e:	3318      	adds	r3, #24
   19640:	b2db      	uxtb	r3, r3
   19642:	001d      	movs	r5, r3
   19644:	6a3b      	ldr	r3, [r7, #32]
   19646:	0018      	movs	r0, r3
   19648:	4b14      	ldr	r3, [pc, #80]	; (1969c <prvInitialiseNewQueue+0x144>)
   1964a:	4798      	blx	r3
   1964c:	0003      	movs	r3, r0
   1964e:	001a      	movs	r2, r3
   19650:	4b13      	ldr	r3, [pc, #76]	; (196a0 <prvInitialiseNewQueue+0x148>)
   19652:	5c9c      	ldrb	r4, [r3, r2]
   19654:	6a3b      	ldr	r3, [r7, #32]
   19656:	0018      	movs	r0, r3
   19658:	4b16      	ldr	r3, [pc, #88]	; (196b4 <prvInitialiseNewQueue+0x15c>)
   1965a:	4798      	blx	r3
   1965c:	0003      	movs	r3, r0
   1965e:	b2db      	uxtb	r3, r3
   19660:	001a      	movs	r2, r3
   19662:	0021      	movs	r1, r4
   19664:	0028      	movs	r0, r5
   19666:	4b19      	ldr	r3, [pc, #100]	; (196cc <prvInitialiseNewQueue+0x174>)
   19668:	4798      	blx	r3
   1966a:	6a3b      	ldr	r3, [r7, #32]
   1966c:	0018      	movs	r0, r3
   1966e:	4b0b      	ldr	r3, [pc, #44]	; (1969c <prvInitialiseNewQueue+0x144>)
   19670:	4798      	blx	r3
   19672:	0003      	movs	r3, r0
   19674:	001a      	movs	r2, r3
   19676:	4b0a      	ldr	r3, [pc, #40]	; (196a0 <prvInitialiseNewQueue+0x148>)
   19678:	5c9c      	ldrb	r4, [r3, r2]
   1967a:	6a3b      	ldr	r3, [r7, #32]
   1967c:	0018      	movs	r0, r3
   1967e:	4b0d      	ldr	r3, [pc, #52]	; (196b4 <prvInitialiseNewQueue+0x15c>)
   19680:	4798      	blx	r3
   19682:	0003      	movs	r3, r0
   19684:	b2db      	uxtb	r3, r3
   19686:	2200      	movs	r2, #0
   19688:	0019      	movs	r1, r3
   1968a:	0020      	movs	r0, r4
   1968c:	4b10      	ldr	r3, [pc, #64]	; (196d0 <prvInitialiseNewQueue+0x178>)
   1968e:	4798      	blx	r3
}
   19690:	46c0      	nop			; (mov r8, r8)
   19692:	46bd      	mov	sp, r7
   19694:	b004      	add	sp, #16
   19696:	bdb0      	pop	{r4, r5, r7, pc}
   19698:	000193e9 	.word	0x000193e9
   1969c:	00017179 	.word	0x00017179
   196a0:	200000f4 	.word	0x200000f4
   196a4:	00018739 	.word	0x00018739
   196a8:	0001729d 	.word	0x0001729d
   196ac:	20000102 	.word	0x20000102
   196b0:	000172d9 	.word	0x000172d9
   196b4:	00017259 	.word	0x00017259
   196b8:	000188d1 	.word	0x000188d1
   196bc:	00017455 	.word	0x00017455
   196c0:	000171b9 	.word	0x000171b9
   196c4:	20000100 	.word	0x20000100
   196c8:	00017279 	.word	0x00017279
   196cc:	00017bb1 	.word	0x00017bb1
   196d0:	0001820d 	.word	0x0001820d

000196d4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
   196d4:	b590      	push	{r4, r7, lr}
   196d6:	b083      	sub	sp, #12
   196d8:	af00      	add	r7, sp, #0
   196da:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
   196dc:	687b      	ldr	r3, [r7, #4]
   196de:	2b00      	cmp	r3, #0
   196e0:	d00e      	beq.n	19700 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
   196e2:	687b      	ldr	r3, [r7, #4]
   196e4:	2200      	movs	r2, #0
   196e6:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
   196e8:	687b      	ldr	r3, [r7, #4]
   196ea:	2200      	movs	r2, #0
   196ec:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
   196ee:	687b      	ldr	r3, [r7, #4]
   196f0:	2200      	movs	r2, #0
   196f2:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
   196f4:	6878      	ldr	r0, [r7, #4]
   196f6:	2300      	movs	r3, #0
   196f8:	2200      	movs	r2, #0
   196fa:	2100      	movs	r1, #0
   196fc:	4c02      	ldr	r4, [pc, #8]	; (19708 <prvInitialiseMutex+0x34>)
   196fe:	47a0      	blx	r4
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
   19700:	46c0      	nop			; (mov r8, r8)
   19702:	46bd      	mov	sp, r7
   19704:	b003      	add	sp, #12
   19706:	bd90      	pop	{r4, r7, pc}
   19708:	0001974d 	.word	0x0001974d

0001970c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
   1970c:	b580      	push	{r7, lr}
   1970e:	b086      	sub	sp, #24
   19710:	af00      	add	r7, sp, #0
   19712:	0002      	movs	r2, r0
   19714:	1dfb      	adds	r3, r7, #7
   19716:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
   19718:	2301      	movs	r3, #1
   1971a:	617b      	str	r3, [r7, #20]
   1971c:	2300      	movs	r3, #0
   1971e:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
   19720:	1dfb      	adds	r3, r7, #7
   19722:	781a      	ldrb	r2, [r3, #0]
   19724:	6939      	ldr	r1, [r7, #16]
   19726:	697b      	ldr	r3, [r7, #20]
   19728:	0018      	movs	r0, r3
   1972a:	4b06      	ldr	r3, [pc, #24]	; (19744 <xQueueCreateMutex+0x38>)
   1972c:	4798      	blx	r3
   1972e:	0003      	movs	r3, r0
   19730:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
   19732:	68fb      	ldr	r3, [r7, #12]
   19734:	0018      	movs	r0, r3
   19736:	4b04      	ldr	r3, [pc, #16]	; (19748 <xQueueCreateMutex+0x3c>)
   19738:	4798      	blx	r3

		return pxNewQueue;
   1973a:	68fb      	ldr	r3, [r7, #12]
	}
   1973c:	0018      	movs	r0, r3
   1973e:	46bd      	mov	sp, r7
   19740:	b006      	add	sp, #24
   19742:	bd80      	pop	{r7, pc}
   19744:	000194a5 	.word	0x000194a5
   19748:	000196d5 	.word	0x000196d5

0001974c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   1974c:	b5b0      	push	{r4, r5, r7, lr}
   1974e:	b08a      	sub	sp, #40	; 0x28
   19750:	af00      	add	r7, sp, #0
   19752:	60f8      	str	r0, [r7, #12]
   19754:	60b9      	str	r1, [r7, #8]
   19756:	607a      	str	r2, [r7, #4]
   19758:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   1975a:	2300      	movs	r3, #0
   1975c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1975e:	68fb      	ldr	r3, [r7, #12]
   19760:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   19762:	6a3b      	ldr	r3, [r7, #32]
   19764:	2b00      	cmp	r3, #0
   19766:	d101      	bne.n	1976c <xQueueGenericSend+0x20>
   19768:	b672      	cpsid	i
   1976a:	e7fe      	b.n	1976a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1976c:	68bb      	ldr	r3, [r7, #8]
   1976e:	2b00      	cmp	r3, #0
   19770:	d103      	bne.n	1977a <xQueueGenericSend+0x2e>
   19772:	6a3b      	ldr	r3, [r7, #32]
   19774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   19776:	2b00      	cmp	r3, #0
   19778:	d101      	bne.n	1977e <xQueueGenericSend+0x32>
   1977a:	2301      	movs	r3, #1
   1977c:	e000      	b.n	19780 <xQueueGenericSend+0x34>
   1977e:	2300      	movs	r3, #0
   19780:	2b00      	cmp	r3, #0
   19782:	d101      	bne.n	19788 <xQueueGenericSend+0x3c>
   19784:	b672      	cpsid	i
   19786:	e7fe      	b.n	19786 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   19788:	683b      	ldr	r3, [r7, #0]
   1978a:	2b02      	cmp	r3, #2
   1978c:	d103      	bne.n	19796 <xQueueGenericSend+0x4a>
   1978e:	6a3b      	ldr	r3, [r7, #32]
   19790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   19792:	2b01      	cmp	r3, #1
   19794:	d101      	bne.n	1979a <xQueueGenericSend+0x4e>
   19796:	2301      	movs	r3, #1
   19798:	e000      	b.n	1979c <xQueueGenericSend+0x50>
   1979a:	2300      	movs	r3, #0
   1979c:	2b00      	cmp	r3, #0
   1979e:	d101      	bne.n	197a4 <xQueueGenericSend+0x58>
   197a0:	b672      	cpsid	i
   197a2:	e7fe      	b.n	197a2 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   197a4:	4bbc      	ldr	r3, [pc, #752]	; (19a98 <xQueueGenericSend+0x34c>)
   197a6:	4798      	blx	r3
   197a8:	1e03      	subs	r3, r0, #0
   197aa:	d102      	bne.n	197b2 <xQueueGenericSend+0x66>
   197ac:	687b      	ldr	r3, [r7, #4]
   197ae:	2b00      	cmp	r3, #0
   197b0:	d101      	bne.n	197b6 <xQueueGenericSend+0x6a>
   197b2:	2301      	movs	r3, #1
   197b4:	e000      	b.n	197b8 <xQueueGenericSend+0x6c>
   197b6:	2300      	movs	r3, #0
   197b8:	2b00      	cmp	r3, #0
   197ba:	d101      	bne.n	197c0 <xQueueGenericSend+0x74>
   197bc:	b672      	cpsid	i
   197be:	e7fe      	b.n	197be <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   197c0:	4bb6      	ldr	r3, [pc, #728]	; (19a9c <xQueueGenericSend+0x350>)
   197c2:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   197c4:	6a3b      	ldr	r3, [r7, #32]
   197c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   197c8:	6a3b      	ldr	r3, [r7, #32]
   197ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   197cc:	429a      	cmp	r2, r3
   197ce:	d303      	bcc.n	197d8 <xQueueGenericSend+0x8c>
   197d0:	683b      	ldr	r3, [r7, #0]
   197d2:	2b02      	cmp	r3, #2
   197d4:	d000      	beq.n	197d8 <xQueueGenericSend+0x8c>
   197d6:	e08e      	b.n	198f6 <xQueueGenericSend+0x1aa>
			{
				traceQUEUE_SEND( pxQueue );
   197d8:	4bb1      	ldr	r3, [pc, #708]	; (19aa0 <xQueueGenericSend+0x354>)
   197da:	4798      	blx	r3
   197dc:	0003      	movs	r3, r0
   197de:	0018      	movs	r0, r3
   197e0:	4bb0      	ldr	r3, [pc, #704]	; (19aa4 <xQueueGenericSend+0x358>)
   197e2:	4798      	blx	r3
   197e4:	0003      	movs	r3, r0
   197e6:	001a      	movs	r2, r3
   197e8:	4baf      	ldr	r3, [pc, #700]	; (19aa8 <xQueueGenericSend+0x35c>)
   197ea:	881b      	ldrh	r3, [r3, #0]
   197ec:	4013      	ands	r3, r2
   197ee:	b29b      	uxth	r3, r3
   197f0:	2b00      	cmp	r3, #0
   197f2:	d02e      	beq.n	19852 <xQueueGenericSend+0x106>
   197f4:	6a3b      	ldr	r3, [r7, #32]
   197f6:	0018      	movs	r0, r3
   197f8:	4bac      	ldr	r3, [pc, #688]	; (19aac <xQueueGenericSend+0x360>)
   197fa:	4798      	blx	r3
   197fc:	0003      	movs	r3, r0
   197fe:	001a      	movs	r2, r3
   19800:	4ba9      	ldr	r3, [pc, #676]	; (19aa8 <xQueueGenericSend+0x35c>)
   19802:	881b      	ldrh	r3, [r3, #0]
   19804:	4013      	ands	r3, r2
   19806:	b29b      	uxth	r3, r3
   19808:	2b00      	cmp	r3, #0
   1980a:	d022      	beq.n	19852 <xQueueGenericSend+0x106>
   1980c:	683b      	ldr	r3, [r7, #0]
   1980e:	2b00      	cmp	r3, #0
   19810:	d10b      	bne.n	1982a <xQueueGenericSend+0xde>
   19812:	6a3b      	ldr	r3, [r7, #32]
   19814:	0018      	movs	r0, r3
   19816:	4ba6      	ldr	r3, [pc, #664]	; (19ab0 <xQueueGenericSend+0x364>)
   19818:	4798      	blx	r3
   1981a:	0003      	movs	r3, r0
   1981c:	001a      	movs	r2, r3
   1981e:	4ba5      	ldr	r3, [pc, #660]	; (19ab4 <xQueueGenericSend+0x368>)
   19820:	5c9b      	ldrb	r3, [r3, r2]
   19822:	3320      	adds	r3, #32
   19824:	b2db      	uxtb	r3, r3
   19826:	001d      	movs	r5, r3
   19828:	e000      	b.n	1982c <xQueueGenericSend+0xe0>
   1982a:	2525      	movs	r5, #37	; 0x25
   1982c:	6a3b      	ldr	r3, [r7, #32]
   1982e:	0018      	movs	r0, r3
   19830:	4b9f      	ldr	r3, [pc, #636]	; (19ab0 <xQueueGenericSend+0x364>)
   19832:	4798      	blx	r3
   19834:	0003      	movs	r3, r0
   19836:	001a      	movs	r2, r3
   19838:	4b9e      	ldr	r3, [pc, #632]	; (19ab4 <xQueueGenericSend+0x368>)
   1983a:	5c9c      	ldrb	r4, [r3, r2]
   1983c:	6a3b      	ldr	r3, [r7, #32]
   1983e:	0018      	movs	r0, r3
   19840:	4b9d      	ldr	r3, [pc, #628]	; (19ab8 <xQueueGenericSend+0x36c>)
   19842:	4798      	blx	r3
   19844:	0003      	movs	r3, r0
   19846:	b2db      	uxtb	r3, r3
   19848:	001a      	movs	r2, r3
   1984a:	0021      	movs	r1, r4
   1984c:	0028      	movs	r0, r5
   1984e:	4b9b      	ldr	r3, [pc, #620]	; (19abc <xQueueGenericSend+0x370>)
   19850:	4798      	blx	r3
   19852:	6a3b      	ldr	r3, [r7, #32]
   19854:	0018      	movs	r0, r3
   19856:	4b96      	ldr	r3, [pc, #600]	; (19ab0 <xQueueGenericSend+0x364>)
   19858:	4798      	blx	r3
   1985a:	0003      	movs	r3, r0
   1985c:	001a      	movs	r2, r3
   1985e:	4b95      	ldr	r3, [pc, #596]	; (19ab4 <xQueueGenericSend+0x368>)
   19860:	5c9c      	ldrb	r4, [r3, r2]
   19862:	6a3b      	ldr	r3, [r7, #32]
   19864:	0018      	movs	r0, r3
   19866:	4b94      	ldr	r3, [pc, #592]	; (19ab8 <xQueueGenericSend+0x36c>)
   19868:	4798      	blx	r3
   1986a:	0003      	movs	r3, r0
   1986c:	b2dd      	uxtb	r5, r3
   1986e:	6a3b      	ldr	r3, [r7, #32]
   19870:	0018      	movs	r0, r3
   19872:	4b8f      	ldr	r3, [pc, #572]	; (19ab0 <xQueueGenericSend+0x364>)
   19874:	4798      	blx	r3
   19876:	0003      	movs	r3, r0
   19878:	001a      	movs	r2, r3
   1987a:	4b8e      	ldr	r3, [pc, #568]	; (19ab4 <xQueueGenericSend+0x368>)
   1987c:	5c9b      	ldrb	r3, [r3, r2]
   1987e:	2b02      	cmp	r3, #2
   19880:	d005      	beq.n	1988e <xQueueGenericSend+0x142>
   19882:	6a3b      	ldr	r3, [r7, #32]
   19884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   19886:	b2db      	uxtb	r3, r3
   19888:	3301      	adds	r3, #1
   1988a:	b2db      	uxtb	r3, r3
   1988c:	e000      	b.n	19890 <xQueueGenericSend+0x144>
   1988e:	2300      	movs	r3, #0
   19890:	001a      	movs	r2, r3
   19892:	0029      	movs	r1, r5
   19894:	0020      	movs	r0, r4
   19896:	4b8a      	ldr	r3, [pc, #552]	; (19ac0 <xQueueGenericSend+0x374>)
   19898:	4798      	blx	r3
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1989a:	683a      	ldr	r2, [r7, #0]
   1989c:	68b9      	ldr	r1, [r7, #8]
   1989e:	6a3b      	ldr	r3, [r7, #32]
   198a0:	0018      	movs	r0, r3
   198a2:	4b88      	ldr	r3, [pc, #544]	; (19ac4 <xQueueGenericSend+0x378>)
   198a4:	4798      	blx	r3
   198a6:	0003      	movs	r3, r0
   198a8:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   198aa:	6a3b      	ldr	r3, [r7, #32]
   198ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   198ae:	2b00      	cmp	r3, #0
   198b0:	d00a      	beq.n	198c8 <xQueueGenericSend+0x17c>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   198b2:	683a      	ldr	r2, [r7, #0]
   198b4:	6a3b      	ldr	r3, [r7, #32]
   198b6:	0011      	movs	r1, r2
   198b8:	0018      	movs	r0, r3
   198ba:	4b83      	ldr	r3, [pc, #524]	; (19ac8 <xQueueGenericSend+0x37c>)
   198bc:	4798      	blx	r3
   198be:	1e03      	subs	r3, r0, #0
   198c0:	d015      	beq.n	198ee <xQueueGenericSend+0x1a2>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
   198c2:	4b82      	ldr	r3, [pc, #520]	; (19acc <xQueueGenericSend+0x380>)
   198c4:	4798      	blx	r3
   198c6:	e012      	b.n	198ee <xQueueGenericSend+0x1a2>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   198c8:	6a3b      	ldr	r3, [r7, #32]
   198ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   198cc:	2b00      	cmp	r3, #0
   198ce:	d009      	beq.n	198e4 <xQueueGenericSend+0x198>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   198d0:	6a3b      	ldr	r3, [r7, #32]
   198d2:	3324      	adds	r3, #36	; 0x24
   198d4:	0018      	movs	r0, r3
   198d6:	4b7e      	ldr	r3, [pc, #504]	; (19ad0 <xQueueGenericSend+0x384>)
   198d8:	4798      	blx	r3
   198da:	1e03      	subs	r3, r0, #0
   198dc:	d007      	beq.n	198ee <xQueueGenericSend+0x1a2>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
   198de:	4b7b      	ldr	r3, [pc, #492]	; (19acc <xQueueGenericSend+0x380>)
   198e0:	4798      	blx	r3
   198e2:	e004      	b.n	198ee <xQueueGenericSend+0x1a2>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
   198e4:	69fb      	ldr	r3, [r7, #28]
   198e6:	2b00      	cmp	r3, #0
   198e8:	d001      	beq.n	198ee <xQueueGenericSend+0x1a2>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
   198ea:	4b78      	ldr	r3, [pc, #480]	; (19acc <xQueueGenericSend+0x380>)
   198ec:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   198ee:	4b79      	ldr	r3, [pc, #484]	; (19ad4 <xQueueGenericSend+0x388>)
   198f0:	4798      	blx	r3
				return pdPASS;
   198f2:	2301      	movs	r3, #1
   198f4:	e142      	b.n	19b7c <xQueueGenericSend+0x430>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   198f6:	687b      	ldr	r3, [r7, #4]
   198f8:	2b00      	cmp	r3, #0
   198fa:	d140      	bne.n	1997e <xQueueGenericSend+0x232>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   198fc:	4b75      	ldr	r3, [pc, #468]	; (19ad4 <xQueueGenericSend+0x388>)
   198fe:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
   19900:	4b67      	ldr	r3, [pc, #412]	; (19aa0 <xQueueGenericSend+0x354>)
   19902:	4798      	blx	r3
   19904:	0003      	movs	r3, r0
   19906:	0018      	movs	r0, r3
   19908:	4b66      	ldr	r3, [pc, #408]	; (19aa4 <xQueueGenericSend+0x358>)
   1990a:	4798      	blx	r3
   1990c:	0003      	movs	r3, r0
   1990e:	001a      	movs	r2, r3
   19910:	4b65      	ldr	r3, [pc, #404]	; (19aa8 <xQueueGenericSend+0x35c>)
   19912:	881b      	ldrh	r3, [r3, #0]
   19914:	4013      	ands	r3, r2
   19916:	b29b      	uxth	r3, r3
   19918:	2b00      	cmp	r3, #0
   1991a:	d02e      	beq.n	1997a <xQueueGenericSend+0x22e>
   1991c:	6a3b      	ldr	r3, [r7, #32]
   1991e:	0018      	movs	r0, r3
   19920:	4b62      	ldr	r3, [pc, #392]	; (19aac <xQueueGenericSend+0x360>)
   19922:	4798      	blx	r3
   19924:	0003      	movs	r3, r0
   19926:	001a      	movs	r2, r3
   19928:	4b5f      	ldr	r3, [pc, #380]	; (19aa8 <xQueueGenericSend+0x35c>)
   1992a:	881b      	ldrh	r3, [r3, #0]
   1992c:	4013      	ands	r3, r2
   1992e:	b29b      	uxth	r3, r3
   19930:	2b00      	cmp	r3, #0
   19932:	d022      	beq.n	1997a <xQueueGenericSend+0x22e>
   19934:	683b      	ldr	r3, [r7, #0]
   19936:	2b00      	cmp	r3, #0
   19938:	d10b      	bne.n	19952 <xQueueGenericSend+0x206>
   1993a:	6a3b      	ldr	r3, [r7, #32]
   1993c:	0018      	movs	r0, r3
   1993e:	4b5c      	ldr	r3, [pc, #368]	; (19ab0 <xQueueGenericSend+0x364>)
   19940:	4798      	blx	r3
   19942:	0003      	movs	r3, r0
   19944:	001a      	movs	r2, r3
   19946:	4b5b      	ldr	r3, [pc, #364]	; (19ab4 <xQueueGenericSend+0x368>)
   19948:	5c9b      	ldrb	r3, [r3, r2]
   1994a:	3348      	adds	r3, #72	; 0x48
   1994c:	b2db      	uxtb	r3, r3
   1994e:	001d      	movs	r5, r3
   19950:	e000      	b.n	19954 <xQueueGenericSend+0x208>
   19952:	254d      	movs	r5, #77	; 0x4d
   19954:	6a3b      	ldr	r3, [r7, #32]
   19956:	0018      	movs	r0, r3
   19958:	4b55      	ldr	r3, [pc, #340]	; (19ab0 <xQueueGenericSend+0x364>)
   1995a:	4798      	blx	r3
   1995c:	0003      	movs	r3, r0
   1995e:	001a      	movs	r2, r3
   19960:	4b54      	ldr	r3, [pc, #336]	; (19ab4 <xQueueGenericSend+0x368>)
   19962:	5c9c      	ldrb	r4, [r3, r2]
   19964:	6a3b      	ldr	r3, [r7, #32]
   19966:	0018      	movs	r0, r3
   19968:	4b53      	ldr	r3, [pc, #332]	; (19ab8 <xQueueGenericSend+0x36c>)
   1996a:	4798      	blx	r3
   1996c:	0003      	movs	r3, r0
   1996e:	b2db      	uxtb	r3, r3
   19970:	001a      	movs	r2, r3
   19972:	0021      	movs	r1, r4
   19974:	0028      	movs	r0, r5
   19976:	4b51      	ldr	r3, [pc, #324]	; (19abc <xQueueGenericSend+0x370>)
   19978:	4798      	blx	r3
					return errQUEUE_FULL;
   1997a:	2300      	movs	r3, #0
   1997c:	e0fe      	b.n	19b7c <xQueueGenericSend+0x430>
				}
				else if( xEntryTimeSet == pdFALSE )
   1997e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19980:	2b00      	cmp	r3, #0
   19982:	d106      	bne.n	19992 <xQueueGenericSend+0x246>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   19984:	2314      	movs	r3, #20
   19986:	18fb      	adds	r3, r7, r3
   19988:	0018      	movs	r0, r3
   1998a:	4b53      	ldr	r3, [pc, #332]	; (19ad8 <xQueueGenericSend+0x38c>)
   1998c:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1998e:	2301      	movs	r3, #1
   19990:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   19992:	4b50      	ldr	r3, [pc, #320]	; (19ad4 <xQueueGenericSend+0x388>)
   19994:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   19996:	4b51      	ldr	r3, [pc, #324]	; (19adc <xQueueGenericSend+0x390>)
   19998:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1999a:	4b40      	ldr	r3, [pc, #256]	; (19a9c <xQueueGenericSend+0x350>)
   1999c:	4798      	blx	r3
   1999e:	6a3b      	ldr	r3, [r7, #32]
   199a0:	2244      	movs	r2, #68	; 0x44
   199a2:	5c9b      	ldrb	r3, [r3, r2]
   199a4:	b25b      	sxtb	r3, r3
   199a6:	3301      	adds	r3, #1
   199a8:	d103      	bne.n	199b2 <xQueueGenericSend+0x266>
   199aa:	6a3b      	ldr	r3, [r7, #32]
   199ac:	2244      	movs	r2, #68	; 0x44
   199ae:	2100      	movs	r1, #0
   199b0:	5499      	strb	r1, [r3, r2]
   199b2:	6a3b      	ldr	r3, [r7, #32]
   199b4:	2245      	movs	r2, #69	; 0x45
   199b6:	5c9b      	ldrb	r3, [r3, r2]
   199b8:	b25b      	sxtb	r3, r3
   199ba:	3301      	adds	r3, #1
   199bc:	d103      	bne.n	199c6 <xQueueGenericSend+0x27a>
   199be:	6a3b      	ldr	r3, [r7, #32]
   199c0:	2245      	movs	r2, #69	; 0x45
   199c2:	2100      	movs	r1, #0
   199c4:	5499      	strb	r1, [r3, r2]
   199c6:	4b43      	ldr	r3, [pc, #268]	; (19ad4 <xQueueGenericSend+0x388>)
   199c8:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   199ca:	1d3a      	adds	r2, r7, #4
   199cc:	2314      	movs	r3, #20
   199ce:	18fb      	adds	r3, r7, r3
   199d0:	0011      	movs	r1, r2
   199d2:	0018      	movs	r0, r3
   199d4:	4b42      	ldr	r3, [pc, #264]	; (19ae0 <xQueueGenericSend+0x394>)
   199d6:	4798      	blx	r3
   199d8:	1e03      	subs	r3, r0, #0
   199da:	d000      	beq.n	199de <xQueueGenericSend+0x292>
   199dc:	e08a      	b.n	19af4 <xQueueGenericSend+0x3a8>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   199de:	6a3b      	ldr	r3, [r7, #32]
   199e0:	0018      	movs	r0, r3
   199e2:	4b40      	ldr	r3, [pc, #256]	; (19ae4 <xQueueGenericSend+0x398>)
   199e4:	4798      	blx	r3
   199e6:	1e03      	subs	r3, r0, #0
   199e8:	d04f      	beq.n	19a8a <xQueueGenericSend+0x33e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
   199ea:	4b2d      	ldr	r3, [pc, #180]	; (19aa0 <xQueueGenericSend+0x354>)
   199ec:	4798      	blx	r3
   199ee:	0003      	movs	r3, r0
   199f0:	0018      	movs	r0, r3
   199f2:	4b2c      	ldr	r3, [pc, #176]	; (19aa4 <xQueueGenericSend+0x358>)
   199f4:	4798      	blx	r3
   199f6:	0003      	movs	r3, r0
   199f8:	001a      	movs	r2, r3
   199fa:	4b2b      	ldr	r3, [pc, #172]	; (19aa8 <xQueueGenericSend+0x35c>)
   199fc:	881b      	ldrh	r3, [r3, #0]
   199fe:	4013      	ands	r3, r2
   19a00:	b29b      	uxth	r3, r3
   19a02:	2b00      	cmp	r3, #0
   19a04:	d02e      	beq.n	19a64 <xQueueGenericSend+0x318>
   19a06:	6a3b      	ldr	r3, [r7, #32]
   19a08:	0018      	movs	r0, r3
   19a0a:	4b28      	ldr	r3, [pc, #160]	; (19aac <xQueueGenericSend+0x360>)
   19a0c:	4798      	blx	r3
   19a0e:	0003      	movs	r3, r0
   19a10:	001a      	movs	r2, r3
   19a12:	4b25      	ldr	r3, [pc, #148]	; (19aa8 <xQueueGenericSend+0x35c>)
   19a14:	881b      	ldrh	r3, [r3, #0]
   19a16:	4013      	ands	r3, r2
   19a18:	b29b      	uxth	r3, r3
   19a1a:	2b00      	cmp	r3, #0
   19a1c:	d022      	beq.n	19a64 <xQueueGenericSend+0x318>
   19a1e:	683b      	ldr	r3, [r7, #0]
   19a20:	2b00      	cmp	r3, #0
   19a22:	d10b      	bne.n	19a3c <xQueueGenericSend+0x2f0>
   19a24:	6a3b      	ldr	r3, [r7, #32]
   19a26:	0018      	movs	r0, r3
   19a28:	4b21      	ldr	r3, [pc, #132]	; (19ab0 <xQueueGenericSend+0x364>)
   19a2a:	4798      	blx	r3
   19a2c:	0003      	movs	r3, r0
   19a2e:	001a      	movs	r2, r3
   19a30:	4b20      	ldr	r3, [pc, #128]	; (19ab4 <xQueueGenericSend+0x368>)
   19a32:	5c9b      	ldrb	r3, [r3, r2]
   19a34:	3370      	adds	r3, #112	; 0x70
   19a36:	b2db      	uxtb	r3, r3
   19a38:	001d      	movs	r5, r3
   19a3a:	e000      	b.n	19a3e <xQueueGenericSend+0x2f2>
   19a3c:	2575      	movs	r5, #117	; 0x75
   19a3e:	6a3b      	ldr	r3, [r7, #32]
   19a40:	0018      	movs	r0, r3
   19a42:	4b1b      	ldr	r3, [pc, #108]	; (19ab0 <xQueueGenericSend+0x364>)
   19a44:	4798      	blx	r3
   19a46:	0003      	movs	r3, r0
   19a48:	001a      	movs	r2, r3
   19a4a:	4b1a      	ldr	r3, [pc, #104]	; (19ab4 <xQueueGenericSend+0x368>)
   19a4c:	5c9c      	ldrb	r4, [r3, r2]
   19a4e:	6a3b      	ldr	r3, [r7, #32]
   19a50:	0018      	movs	r0, r3
   19a52:	4b19      	ldr	r3, [pc, #100]	; (19ab8 <xQueueGenericSend+0x36c>)
   19a54:	4798      	blx	r3
   19a56:	0003      	movs	r3, r0
   19a58:	b2db      	uxtb	r3, r3
   19a5a:	001a      	movs	r2, r3
   19a5c:	0021      	movs	r1, r4
   19a5e:	0028      	movs	r0, r5
   19a60:	4b16      	ldr	r3, [pc, #88]	; (19abc <xQueueGenericSend+0x370>)
   19a62:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   19a64:	6a3b      	ldr	r3, [r7, #32]
   19a66:	3310      	adds	r3, #16
   19a68:	687a      	ldr	r2, [r7, #4]
   19a6a:	0011      	movs	r1, r2
   19a6c:	0018      	movs	r0, r3
   19a6e:	4b1e      	ldr	r3, [pc, #120]	; (19ae8 <xQueueGenericSend+0x39c>)
   19a70:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   19a72:	6a3b      	ldr	r3, [r7, #32]
   19a74:	0018      	movs	r0, r3
   19a76:	4b1d      	ldr	r3, [pc, #116]	; (19aec <xQueueGenericSend+0x3a0>)
   19a78:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   19a7a:	4b1d      	ldr	r3, [pc, #116]	; (19af0 <xQueueGenericSend+0x3a4>)
   19a7c:	4798      	blx	r3
   19a7e:	1e03      	subs	r3, r0, #0
   19a80:	d000      	beq.n	19a84 <xQueueGenericSend+0x338>
   19a82:	e69d      	b.n	197c0 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
   19a84:	4b11      	ldr	r3, [pc, #68]	; (19acc <xQueueGenericSend+0x380>)
   19a86:	4798      	blx	r3
   19a88:	e69a      	b.n	197c0 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   19a8a:	6a3b      	ldr	r3, [r7, #32]
   19a8c:	0018      	movs	r0, r3
   19a8e:	4b17      	ldr	r3, [pc, #92]	; (19aec <xQueueGenericSend+0x3a0>)
   19a90:	4798      	blx	r3
				( void ) xTaskResumeAll();
   19a92:	4b17      	ldr	r3, [pc, #92]	; (19af0 <xQueueGenericSend+0x3a4>)
   19a94:	4798      	blx	r3
   19a96:	e693      	b.n	197c0 <xQueueGenericSend+0x74>
   19a98:	0001bed9 	.word	0x0001bed9
   19a9c:	000191b9 	.word	0x000191b9
   19aa0:	00017455 	.word	0x00017455
   19aa4:	000171b9 	.word	0x000171b9
   19aa8:	20000100 	.word	0x20000100
   19aac:	00017279 	.word	0x00017279
   19ab0:	00017179 	.word	0x00017179
   19ab4:	200000f4 	.word	0x200000f4
   19ab8:	00017259 	.word	0x00017259
   19abc:	00017bb1 	.word	0x00017bb1
   19ac0:	0001820d 	.word	0x0001820d
   19ac4:	0001a985 	.word	0x0001a985
   19ac8:	0001ac89 	.word	0x0001ac89
   19acc:	000191a1 	.word	0x000191a1
   19ad0:	0001ba49 	.word	0x0001ba49
   19ad4:	000191dd 	.word	0x000191dd
   19ad8:	0001bb89 	.word	0x0001bb89
   19adc:	0001b471 	.word	0x0001b471
   19ae0:	0001bbb1 	.word	0x0001bbb1
   19ae4:	0001abd9 	.word	0x0001abd9
   19ae8:	0001b925 	.word	0x0001b925
   19aec:	0001aab5 	.word	0x0001aab5
   19af0:	0001b489 	.word	0x0001b489
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   19af4:	6a3b      	ldr	r3, [r7, #32]
   19af6:	0018      	movs	r0, r3
   19af8:	4b22      	ldr	r3, [pc, #136]	; (19b84 <xQueueGenericSend+0x438>)
   19afa:	4798      	blx	r3
			( void ) xTaskResumeAll();
   19afc:	4b22      	ldr	r3, [pc, #136]	; (19b88 <xQueueGenericSend+0x43c>)
   19afe:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
   19b00:	4b22      	ldr	r3, [pc, #136]	; (19b8c <xQueueGenericSend+0x440>)
   19b02:	4798      	blx	r3
   19b04:	0003      	movs	r3, r0
   19b06:	0018      	movs	r0, r3
   19b08:	4b21      	ldr	r3, [pc, #132]	; (19b90 <xQueueGenericSend+0x444>)
   19b0a:	4798      	blx	r3
   19b0c:	0003      	movs	r3, r0
   19b0e:	001a      	movs	r2, r3
   19b10:	4b20      	ldr	r3, [pc, #128]	; (19b94 <xQueueGenericSend+0x448>)
   19b12:	881b      	ldrh	r3, [r3, #0]
   19b14:	4013      	ands	r3, r2
   19b16:	b29b      	uxth	r3, r3
   19b18:	2b00      	cmp	r3, #0
   19b1a:	d02e      	beq.n	19b7a <xQueueGenericSend+0x42e>
   19b1c:	6a3b      	ldr	r3, [r7, #32]
   19b1e:	0018      	movs	r0, r3
   19b20:	4b1d      	ldr	r3, [pc, #116]	; (19b98 <xQueueGenericSend+0x44c>)
   19b22:	4798      	blx	r3
   19b24:	0003      	movs	r3, r0
   19b26:	001a      	movs	r2, r3
   19b28:	4b1a      	ldr	r3, [pc, #104]	; (19b94 <xQueueGenericSend+0x448>)
   19b2a:	881b      	ldrh	r3, [r3, #0]
   19b2c:	4013      	ands	r3, r2
   19b2e:	b29b      	uxth	r3, r3
   19b30:	2b00      	cmp	r3, #0
   19b32:	d022      	beq.n	19b7a <xQueueGenericSend+0x42e>
   19b34:	683b      	ldr	r3, [r7, #0]
   19b36:	2b00      	cmp	r3, #0
   19b38:	d10b      	bne.n	19b52 <xQueueGenericSend+0x406>
   19b3a:	6a3b      	ldr	r3, [r7, #32]
   19b3c:	0018      	movs	r0, r3
   19b3e:	4b17      	ldr	r3, [pc, #92]	; (19b9c <xQueueGenericSend+0x450>)
   19b40:	4798      	blx	r3
   19b42:	0003      	movs	r3, r0
   19b44:	001a      	movs	r2, r3
   19b46:	4b16      	ldr	r3, [pc, #88]	; (19ba0 <xQueueGenericSend+0x454>)
   19b48:	5c9b      	ldrb	r3, [r3, r2]
   19b4a:	3348      	adds	r3, #72	; 0x48
   19b4c:	b2db      	uxtb	r3, r3
   19b4e:	001d      	movs	r5, r3
   19b50:	e000      	b.n	19b54 <xQueueGenericSend+0x408>
   19b52:	254d      	movs	r5, #77	; 0x4d
   19b54:	6a3b      	ldr	r3, [r7, #32]
   19b56:	0018      	movs	r0, r3
   19b58:	4b10      	ldr	r3, [pc, #64]	; (19b9c <xQueueGenericSend+0x450>)
   19b5a:	4798      	blx	r3
   19b5c:	0003      	movs	r3, r0
   19b5e:	001a      	movs	r2, r3
   19b60:	4b0f      	ldr	r3, [pc, #60]	; (19ba0 <xQueueGenericSend+0x454>)
   19b62:	5c9c      	ldrb	r4, [r3, r2]
   19b64:	6a3b      	ldr	r3, [r7, #32]
   19b66:	0018      	movs	r0, r3
   19b68:	4b0e      	ldr	r3, [pc, #56]	; (19ba4 <xQueueGenericSend+0x458>)
   19b6a:	4798      	blx	r3
   19b6c:	0003      	movs	r3, r0
   19b6e:	b2db      	uxtb	r3, r3
   19b70:	001a      	movs	r2, r3
   19b72:	0021      	movs	r1, r4
   19b74:	0028      	movs	r0, r5
   19b76:	4b0c      	ldr	r3, [pc, #48]	; (19ba8 <xQueueGenericSend+0x45c>)
   19b78:	4798      	blx	r3
			return errQUEUE_FULL;
   19b7a:	2300      	movs	r3, #0
		}
	}
}
   19b7c:	0018      	movs	r0, r3
   19b7e:	46bd      	mov	sp, r7
   19b80:	b00a      	add	sp, #40	; 0x28
   19b82:	bdb0      	pop	{r4, r5, r7, pc}
   19b84:	0001aab5 	.word	0x0001aab5
   19b88:	0001b489 	.word	0x0001b489
   19b8c:	00017455 	.word	0x00017455
   19b90:	000171b9 	.word	0x000171b9
   19b94:	20000100 	.word	0x20000100
   19b98:	00017279 	.word	0x00017279
   19b9c:	00017179 	.word	0x00017179
   19ba0:	200000f4 	.word	0x200000f4
   19ba4:	00017259 	.word	0x00017259
   19ba8:	00017bb1 	.word	0x00017bb1

00019bac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   19bac:	b5b0      	push	{r4, r5, r7, lr}
   19bae:	b088      	sub	sp, #32
   19bb0:	af00      	add	r7, sp, #0
   19bb2:	60f8      	str	r0, [r7, #12]
   19bb4:	60b9      	str	r1, [r7, #8]
   19bb6:	607a      	str	r2, [r7, #4]
   19bb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   19bba:	68fb      	ldr	r3, [r7, #12]
   19bbc:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   19bbe:	69bb      	ldr	r3, [r7, #24]
   19bc0:	2b00      	cmp	r3, #0
   19bc2:	d101      	bne.n	19bc8 <xQueueGenericSendFromISR+0x1c>
   19bc4:	b672      	cpsid	i
   19bc6:	e7fe      	b.n	19bc6 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   19bc8:	68bb      	ldr	r3, [r7, #8]
   19bca:	2b00      	cmp	r3, #0
   19bcc:	d103      	bne.n	19bd6 <xQueueGenericSendFromISR+0x2a>
   19bce:	69bb      	ldr	r3, [r7, #24]
   19bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   19bd2:	2b00      	cmp	r3, #0
   19bd4:	d101      	bne.n	19bda <xQueueGenericSendFromISR+0x2e>
   19bd6:	2301      	movs	r3, #1
   19bd8:	e000      	b.n	19bdc <xQueueGenericSendFromISR+0x30>
   19bda:	2300      	movs	r3, #0
   19bdc:	2b00      	cmp	r3, #0
   19bde:	d101      	bne.n	19be4 <xQueueGenericSendFromISR+0x38>
   19be0:	b672      	cpsid	i
   19be2:	e7fe      	b.n	19be2 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   19be4:	683b      	ldr	r3, [r7, #0]
   19be6:	2b02      	cmp	r3, #2
   19be8:	d103      	bne.n	19bf2 <xQueueGenericSendFromISR+0x46>
   19bea:	69bb      	ldr	r3, [r7, #24]
   19bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   19bee:	2b01      	cmp	r3, #1
   19bf0:	d101      	bne.n	19bf6 <xQueueGenericSendFromISR+0x4a>
   19bf2:	2301      	movs	r3, #1
   19bf4:	e000      	b.n	19bf8 <xQueueGenericSendFromISR+0x4c>
   19bf6:	2300      	movs	r3, #0
   19bf8:	2b00      	cmp	r3, #0
   19bfa:	d101      	bne.n	19c00 <xQueueGenericSendFromISR+0x54>
   19bfc:	b672      	cpsid	i
   19bfe:	e7fe      	b.n	19bfe <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   19c00:	4b68      	ldr	r3, [pc, #416]	; (19da4 <xQueueGenericSendFromISR+0x1f8>)
   19c02:	4798      	blx	r3
   19c04:	0003      	movs	r3, r0
   19c06:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   19c08:	69bb      	ldr	r3, [r7, #24]
   19c0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   19c0c:	69bb      	ldr	r3, [r7, #24]
   19c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   19c10:	429a      	cmp	r2, r3
   19c12:	d303      	bcc.n	19c1c <xQueueGenericSendFromISR+0x70>
   19c14:	683b      	ldr	r3, [r7, #0]
   19c16:	2b02      	cmp	r3, #2
   19c18:	d000      	beq.n	19c1c <xQueueGenericSendFromISR+0x70>
   19c1a:	e088      	b.n	19d2e <xQueueGenericSendFromISR+0x182>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   19c1c:	2313      	movs	r3, #19
   19c1e:	18fb      	adds	r3, r7, r3
   19c20:	69ba      	ldr	r2, [r7, #24]
   19c22:	2145      	movs	r1, #69	; 0x45
   19c24:	5c52      	ldrb	r2, [r2, r1]
   19c26:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   19c28:	69bb      	ldr	r3, [r7, #24]
   19c2a:	0018      	movs	r0, r3
   19c2c:	4b5e      	ldr	r3, [pc, #376]	; (19da8 <xQueueGenericSendFromISR+0x1fc>)
   19c2e:	4798      	blx	r3
   19c30:	0003      	movs	r3, r0
   19c32:	001a      	movs	r2, r3
   19c34:	4b5d      	ldr	r3, [pc, #372]	; (19dac <xQueueGenericSendFromISR+0x200>)
   19c36:	881b      	ldrh	r3, [r3, #0]
   19c38:	4013      	ands	r3, r2
   19c3a:	b29b      	uxth	r3, r3
   19c3c:	2b00      	cmp	r3, #0
   19c3e:	d022      	beq.n	19c86 <xQueueGenericSendFromISR+0xda>
   19c40:	683b      	ldr	r3, [r7, #0]
   19c42:	2b00      	cmp	r3, #0
   19c44:	d10b      	bne.n	19c5e <xQueueGenericSendFromISR+0xb2>
   19c46:	69bb      	ldr	r3, [r7, #24]
   19c48:	0018      	movs	r0, r3
   19c4a:	4b59      	ldr	r3, [pc, #356]	; (19db0 <xQueueGenericSendFromISR+0x204>)
   19c4c:	4798      	blx	r3
   19c4e:	0003      	movs	r3, r0
   19c50:	001a      	movs	r2, r3
   19c52:	4b58      	ldr	r3, [pc, #352]	; (19db4 <xQueueGenericSendFromISR+0x208>)
   19c54:	5c9b      	ldrb	r3, [r3, r2]
   19c56:	3330      	adds	r3, #48	; 0x30
   19c58:	b2db      	uxtb	r3, r3
   19c5a:	001d      	movs	r5, r3
   19c5c:	e000      	b.n	19c60 <xQueueGenericSendFromISR+0xb4>
   19c5e:	2535      	movs	r5, #53	; 0x35
   19c60:	69bb      	ldr	r3, [r7, #24]
   19c62:	0018      	movs	r0, r3
   19c64:	4b52      	ldr	r3, [pc, #328]	; (19db0 <xQueueGenericSendFromISR+0x204>)
   19c66:	4798      	blx	r3
   19c68:	0003      	movs	r3, r0
   19c6a:	001a      	movs	r2, r3
   19c6c:	4b51      	ldr	r3, [pc, #324]	; (19db4 <xQueueGenericSendFromISR+0x208>)
   19c6e:	5c9c      	ldrb	r4, [r3, r2]
   19c70:	69bb      	ldr	r3, [r7, #24]
   19c72:	0018      	movs	r0, r3
   19c74:	4b50      	ldr	r3, [pc, #320]	; (19db8 <xQueueGenericSendFromISR+0x20c>)
   19c76:	4798      	blx	r3
   19c78:	0003      	movs	r3, r0
   19c7a:	b2db      	uxtb	r3, r3
   19c7c:	001a      	movs	r2, r3
   19c7e:	0021      	movs	r1, r4
   19c80:	0028      	movs	r0, r5
   19c82:	4b4e      	ldr	r3, [pc, #312]	; (19dbc <xQueueGenericSendFromISR+0x210>)
   19c84:	4798      	blx	r3
   19c86:	69bb      	ldr	r3, [r7, #24]
   19c88:	0018      	movs	r0, r3
   19c8a:	4b49      	ldr	r3, [pc, #292]	; (19db0 <xQueueGenericSendFromISR+0x204>)
   19c8c:	4798      	blx	r3
   19c8e:	0003      	movs	r3, r0
   19c90:	001a      	movs	r2, r3
   19c92:	4b48      	ldr	r3, [pc, #288]	; (19db4 <xQueueGenericSendFromISR+0x208>)
   19c94:	5c9c      	ldrb	r4, [r3, r2]
   19c96:	69bb      	ldr	r3, [r7, #24]
   19c98:	0018      	movs	r0, r3
   19c9a:	4b47      	ldr	r3, [pc, #284]	; (19db8 <xQueueGenericSendFromISR+0x20c>)
   19c9c:	4798      	blx	r3
   19c9e:	0003      	movs	r3, r0
   19ca0:	b2d9      	uxtb	r1, r3
   19ca2:	69bb      	ldr	r3, [r7, #24]
   19ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   19ca6:	b2db      	uxtb	r3, r3
   19ca8:	3301      	adds	r3, #1
   19caa:	b2db      	uxtb	r3, r3
   19cac:	001a      	movs	r2, r3
   19cae:	0020      	movs	r0, r4
   19cb0:	4b43      	ldr	r3, [pc, #268]	; (19dc0 <xQueueGenericSendFromISR+0x214>)
   19cb2:	4798      	blx	r3
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   19cb4:	683a      	ldr	r2, [r7, #0]
   19cb6:	68b9      	ldr	r1, [r7, #8]
   19cb8:	69bb      	ldr	r3, [r7, #24]
   19cba:	0018      	movs	r0, r3
   19cbc:	4b41      	ldr	r3, [pc, #260]	; (19dc4 <xQueueGenericSendFromISR+0x218>)
   19cbe:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   19cc0:	2313      	movs	r3, #19
   19cc2:	18fb      	adds	r3, r7, r3
   19cc4:	781b      	ldrb	r3, [r3, #0]
   19cc6:	b25b      	sxtb	r3, r3
   19cc8:	3301      	adds	r3, #1
   19cca:	d124      	bne.n	19d16 <xQueueGenericSendFromISR+0x16a>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   19ccc:	69bb      	ldr	r3, [r7, #24]
   19cce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   19cd0:	2b00      	cmp	r3, #0
   19cd2:	d00e      	beq.n	19cf2 <xQueueGenericSendFromISR+0x146>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   19cd4:	683a      	ldr	r2, [r7, #0]
   19cd6:	69bb      	ldr	r3, [r7, #24]
   19cd8:	0011      	movs	r1, r2
   19cda:	0018      	movs	r0, r3
   19cdc:	4b3a      	ldr	r3, [pc, #232]	; (19dc8 <xQueueGenericSendFromISR+0x21c>)
   19cde:	4798      	blx	r3
   19ce0:	1e03      	subs	r3, r0, #0
   19ce2:	d021      	beq.n	19d28 <xQueueGenericSendFromISR+0x17c>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   19ce4:	687b      	ldr	r3, [r7, #4]
   19ce6:	2b00      	cmp	r3, #0
   19ce8:	d01e      	beq.n	19d28 <xQueueGenericSendFromISR+0x17c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   19cea:	687b      	ldr	r3, [r7, #4]
   19cec:	2201      	movs	r2, #1
   19cee:	601a      	str	r2, [r3, #0]
   19cf0:	e01a      	b.n	19d28 <xQueueGenericSendFromISR+0x17c>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   19cf2:	69bb      	ldr	r3, [r7, #24]
   19cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19cf6:	2b00      	cmp	r3, #0
   19cf8:	d016      	beq.n	19d28 <xQueueGenericSendFromISR+0x17c>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   19cfa:	69bb      	ldr	r3, [r7, #24]
   19cfc:	3324      	adds	r3, #36	; 0x24
   19cfe:	0018      	movs	r0, r3
   19d00:	4b32      	ldr	r3, [pc, #200]	; (19dcc <xQueueGenericSendFromISR+0x220>)
   19d02:	4798      	blx	r3
   19d04:	1e03      	subs	r3, r0, #0
   19d06:	d00f      	beq.n	19d28 <xQueueGenericSendFromISR+0x17c>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   19d08:	687b      	ldr	r3, [r7, #4]
   19d0a:	2b00      	cmp	r3, #0
   19d0c:	d00c      	beq.n	19d28 <xQueueGenericSendFromISR+0x17c>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   19d0e:	687b      	ldr	r3, [r7, #4]
   19d10:	2201      	movs	r2, #1
   19d12:	601a      	str	r2, [r3, #0]
   19d14:	e008      	b.n	19d28 <xQueueGenericSendFromISR+0x17c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   19d16:	2313      	movs	r3, #19
   19d18:	18fb      	adds	r3, r7, r3
   19d1a:	781b      	ldrb	r3, [r3, #0]
   19d1c:	3301      	adds	r3, #1
   19d1e:	b2db      	uxtb	r3, r3
   19d20:	b259      	sxtb	r1, r3
   19d22:	69bb      	ldr	r3, [r7, #24]
   19d24:	2245      	movs	r2, #69	; 0x45
   19d26:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   19d28:	2301      	movs	r3, #1
   19d2a:	61fb      	str	r3, [r7, #28]
		{
   19d2c:	e030      	b.n	19d90 <xQueueGenericSendFromISR+0x1e4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   19d2e:	69bb      	ldr	r3, [r7, #24]
   19d30:	0018      	movs	r0, r3
   19d32:	4b1d      	ldr	r3, [pc, #116]	; (19da8 <xQueueGenericSendFromISR+0x1fc>)
   19d34:	4798      	blx	r3
   19d36:	0003      	movs	r3, r0
   19d38:	001a      	movs	r2, r3
   19d3a:	4b1c      	ldr	r3, [pc, #112]	; (19dac <xQueueGenericSendFromISR+0x200>)
   19d3c:	881b      	ldrh	r3, [r3, #0]
   19d3e:	4013      	ands	r3, r2
   19d40:	b29b      	uxth	r3, r3
   19d42:	2b00      	cmp	r3, #0
   19d44:	d022      	beq.n	19d8c <xQueueGenericSendFromISR+0x1e0>
   19d46:	683b      	ldr	r3, [r7, #0]
   19d48:	2b00      	cmp	r3, #0
   19d4a:	d10b      	bne.n	19d64 <xQueueGenericSendFromISR+0x1b8>
   19d4c:	69bb      	ldr	r3, [r7, #24]
   19d4e:	0018      	movs	r0, r3
   19d50:	4b17      	ldr	r3, [pc, #92]	; (19db0 <xQueueGenericSendFromISR+0x204>)
   19d52:	4798      	blx	r3
   19d54:	0003      	movs	r3, r0
   19d56:	001a      	movs	r2, r3
   19d58:	4b16      	ldr	r3, [pc, #88]	; (19db4 <xQueueGenericSendFromISR+0x208>)
   19d5a:	5c9b      	ldrb	r3, [r3, r2]
   19d5c:	3358      	adds	r3, #88	; 0x58
   19d5e:	b2db      	uxtb	r3, r3
   19d60:	001d      	movs	r5, r3
   19d62:	e000      	b.n	19d66 <xQueueGenericSendFromISR+0x1ba>
   19d64:	255d      	movs	r5, #93	; 0x5d
   19d66:	69bb      	ldr	r3, [r7, #24]
   19d68:	0018      	movs	r0, r3
   19d6a:	4b11      	ldr	r3, [pc, #68]	; (19db0 <xQueueGenericSendFromISR+0x204>)
   19d6c:	4798      	blx	r3
   19d6e:	0003      	movs	r3, r0
   19d70:	001a      	movs	r2, r3
   19d72:	4b10      	ldr	r3, [pc, #64]	; (19db4 <xQueueGenericSendFromISR+0x208>)
   19d74:	5c9c      	ldrb	r4, [r3, r2]
   19d76:	69bb      	ldr	r3, [r7, #24]
   19d78:	0018      	movs	r0, r3
   19d7a:	4b0f      	ldr	r3, [pc, #60]	; (19db8 <xQueueGenericSendFromISR+0x20c>)
   19d7c:	4798      	blx	r3
   19d7e:	0003      	movs	r3, r0
   19d80:	b2db      	uxtb	r3, r3
   19d82:	001a      	movs	r2, r3
   19d84:	0021      	movs	r1, r4
   19d86:	0028      	movs	r0, r5
   19d88:	4b0c      	ldr	r3, [pc, #48]	; (19dbc <xQueueGenericSendFromISR+0x210>)
   19d8a:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   19d8c:	2300      	movs	r3, #0
   19d8e:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   19d90:	697b      	ldr	r3, [r7, #20]
   19d92:	0018      	movs	r0, r3
   19d94:	4b0e      	ldr	r3, [pc, #56]	; (19dd0 <xQueueGenericSendFromISR+0x224>)
   19d96:	4798      	blx	r3

	return xReturn;
   19d98:	69fb      	ldr	r3, [r7, #28]
}
   19d9a:	0018      	movs	r0, r3
   19d9c:	46bd      	mov	sp, r7
   19d9e:	b008      	add	sp, #32
   19da0:	bdb0      	pop	{r4, r5, r7, pc}
   19da2:	46c0      	nop			; (mov r8, r8)
   19da4:	0001920d 	.word	0x0001920d
   19da8:	00017279 	.word	0x00017279
   19dac:	20000100 	.word	0x20000100
   19db0:	00017179 	.word	0x00017179
   19db4:	200000f4 	.word	0x200000f4
   19db8:	00017259 	.word	0x00017259
   19dbc:	00017bb1 	.word	0x00017bb1
   19dc0:	0001820d 	.word	0x0001820d
   19dc4:	0001a985 	.word	0x0001a985
   19dc8:	0001ac89 	.word	0x0001ac89
   19dcc:	0001ba49 	.word	0x0001ba49
   19dd0:	00019219 	.word	0x00019219

00019dd4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
   19dd4:	b580      	push	{r7, lr}
   19dd6:	b082      	sub	sp, #8
   19dd8:	af00      	add	r7, sp, #0
   19dda:	6078      	str	r0, [r7, #4]
   19ddc:	6039      	str	r1, [r7, #0]
   19dde:	6839      	ldr	r1, [r7, #0]
   19de0:	687b      	ldr	r3, [r7, #4]
   19de2:	2200      	movs	r2, #0
   19de4:	0018      	movs	r0, r3
   19de6:	4b03      	ldr	r3, [pc, #12]	; (19df4 <xQueueGiveFromISR+0x20>)
   19de8:	4798      	blx	r3
   19dea:	0003      	movs	r3, r0
   19dec:	0018      	movs	r0, r3
   19dee:	46bd      	mov	sp, r7
   19df0:	b002      	add	sp, #8
   19df2:	bd80      	pop	{r7, pc}
   19df4:	00019df9 	.word	0x00019df9

00019df8 <MyWrapper>:
{
   19df8:	b5b0      	push	{r4, r5, r7, lr}
   19dfa:	b08a      	sub	sp, #40	; 0x28
   19dfc:	af00      	add	r7, sp, #0
   19dfe:	60f8      	str	r0, [r7, #12]
   19e00:	60b9      	str	r1, [r7, #8]
   19e02:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   19e04:	68fb      	ldr	r3, [r7, #12]
   19e06:	623b      	str	r3, [r7, #32]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
   19e08:	6a3b      	ldr	r3, [r7, #32]
   19e0a:	2b00      	cmp	r3, #0
   19e0c:	d101      	bne.n	19e12 <MyWrapper+0x1a>
   19e0e:	b672      	cpsid	i
   19e10:	e7fe      	b.n	19e10 <MyWrapper+0x18>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   19e12:	6a3b      	ldr	r3, [r7, #32]
   19e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   19e16:	2b00      	cmp	r3, #0
   19e18:	d001      	beq.n	19e1e <MyWrapper+0x26>
   19e1a:	b672      	cpsid	i
   19e1c:	e7fe      	b.n	19e1c <MyWrapper+0x24>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
   19e1e:	6a3b      	ldr	r3, [r7, #32]
   19e20:	681b      	ldr	r3, [r3, #0]
   19e22:	2b00      	cmp	r3, #0
   19e24:	d103      	bne.n	19e2e <MyWrapper+0x36>
   19e26:	6a3b      	ldr	r3, [r7, #32]
   19e28:	685b      	ldr	r3, [r3, #4]
   19e2a:	2b00      	cmp	r3, #0
   19e2c:	d101      	bne.n	19e32 <MyWrapper+0x3a>
   19e2e:	2301      	movs	r3, #1
   19e30:	e000      	b.n	19e34 <MyWrapper+0x3c>
   19e32:	2300      	movs	r3, #0
   19e34:	2b00      	cmp	r3, #0
   19e36:	d101      	bne.n	19e3c <MyWrapper+0x44>
   19e38:	b672      	cpsid	i
   19e3a:	e7fe      	b.n	19e3a <MyWrapper+0x42>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   19e3c:	4b66      	ldr	r3, [pc, #408]	; (19fd8 <MyWrapper+0x1e0>)
   19e3e:	4798      	blx	r3
   19e40:	0003      	movs	r3, r0
   19e42:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   19e44:	6a3b      	ldr	r3, [r7, #32]
   19e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   19e48:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
   19e4a:	6a3b      	ldr	r3, [r7, #32]
   19e4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   19e4e:	69bb      	ldr	r3, [r7, #24]
   19e50:	429a      	cmp	r2, r3
   19e52:	d800      	bhi.n	19e56 <MyWrapper+0x5e>
   19e54:	e085      	b.n	19f62 <MyWrapper+0x16a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   19e56:	2317      	movs	r3, #23
   19e58:	18fb      	adds	r3, r7, r3
   19e5a:	6a3a      	ldr	r2, [r7, #32]
   19e5c:	2145      	movs	r1, #69	; 0x45
   19e5e:	5c52      	ldrb	r2, [r2, r1]
   19e60:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   19e62:	6a3b      	ldr	r3, [r7, #32]
   19e64:	0018      	movs	r0, r3
   19e66:	4b5d      	ldr	r3, [pc, #372]	; (19fdc <MyWrapper+0x1e4>)
   19e68:	4798      	blx	r3
   19e6a:	0003      	movs	r3, r0
   19e6c:	001a      	movs	r2, r3
   19e6e:	4b5c      	ldr	r3, [pc, #368]	; (19fe0 <MyWrapper+0x1e8>)
   19e70:	881b      	ldrh	r3, [r3, #0]
   19e72:	4013      	ands	r3, r2
   19e74:	b29b      	uxth	r3, r3
   19e76:	2b00      	cmp	r3, #0
   19e78:	d022      	beq.n	19ec0 <MyWrapper+0xc8>
   19e7a:	687b      	ldr	r3, [r7, #4]
   19e7c:	2b00      	cmp	r3, #0
   19e7e:	d10b      	bne.n	19e98 <MyWrapper+0xa0>
   19e80:	6a3b      	ldr	r3, [r7, #32]
   19e82:	0018      	movs	r0, r3
   19e84:	4b57      	ldr	r3, [pc, #348]	; (19fe4 <MyWrapper+0x1ec>)
   19e86:	4798      	blx	r3
   19e88:	0003      	movs	r3, r0
   19e8a:	001a      	movs	r2, r3
   19e8c:	4b56      	ldr	r3, [pc, #344]	; (19fe8 <MyWrapper+0x1f0>)
   19e8e:	5c9b      	ldrb	r3, [r3, r2]
   19e90:	3330      	adds	r3, #48	; 0x30
   19e92:	b2db      	uxtb	r3, r3
   19e94:	001d      	movs	r5, r3
   19e96:	e000      	b.n	19e9a <MyWrapper+0xa2>
   19e98:	2535      	movs	r5, #53	; 0x35
   19e9a:	6a3b      	ldr	r3, [r7, #32]
   19e9c:	0018      	movs	r0, r3
   19e9e:	4b51      	ldr	r3, [pc, #324]	; (19fe4 <MyWrapper+0x1ec>)
   19ea0:	4798      	blx	r3
   19ea2:	0003      	movs	r3, r0
   19ea4:	001a      	movs	r2, r3
   19ea6:	4b50      	ldr	r3, [pc, #320]	; (19fe8 <MyWrapper+0x1f0>)
   19ea8:	5c9c      	ldrb	r4, [r3, r2]
   19eaa:	6a3b      	ldr	r3, [r7, #32]
   19eac:	0018      	movs	r0, r3
   19eae:	4b4f      	ldr	r3, [pc, #316]	; (19fec <MyWrapper+0x1f4>)
   19eb0:	4798      	blx	r3
   19eb2:	0003      	movs	r3, r0
   19eb4:	b2db      	uxtb	r3, r3
   19eb6:	001a      	movs	r2, r3
   19eb8:	0021      	movs	r1, r4
   19eba:	0028      	movs	r0, r5
   19ebc:	4b4c      	ldr	r3, [pc, #304]	; (19ff0 <MyWrapper+0x1f8>)
   19ebe:	4798      	blx	r3
   19ec0:	6a3b      	ldr	r3, [r7, #32]
   19ec2:	0018      	movs	r0, r3
   19ec4:	4b47      	ldr	r3, [pc, #284]	; (19fe4 <MyWrapper+0x1ec>)
   19ec6:	4798      	blx	r3
   19ec8:	0003      	movs	r3, r0
   19eca:	001a      	movs	r2, r3
   19ecc:	4b46      	ldr	r3, [pc, #280]	; (19fe8 <MyWrapper+0x1f0>)
   19ece:	5c9c      	ldrb	r4, [r3, r2]
   19ed0:	6a3b      	ldr	r3, [r7, #32]
   19ed2:	0018      	movs	r0, r3
   19ed4:	4b45      	ldr	r3, [pc, #276]	; (19fec <MyWrapper+0x1f4>)
   19ed6:	4798      	blx	r3
   19ed8:	0003      	movs	r3, r0
   19eda:	b2d9      	uxtb	r1, r3
   19edc:	6a3b      	ldr	r3, [r7, #32]
   19ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   19ee0:	b2db      	uxtb	r3, r3
   19ee2:	3301      	adds	r3, #1
   19ee4:	b2db      	uxtb	r3, r3
   19ee6:	001a      	movs	r2, r3
   19ee8:	0020      	movs	r0, r4
   19eea:	4b42      	ldr	r3, [pc, #264]	; (19ff4 <MyWrapper+0x1fc>)
   19eec:	4798      	blx	r3
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   19eee:	69bb      	ldr	r3, [r7, #24]
   19ef0:	1c5a      	adds	r2, r3, #1
   19ef2:	6a3b      	ldr	r3, [r7, #32]
   19ef4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   19ef6:	2317      	movs	r3, #23
   19ef8:	18fb      	adds	r3, r7, r3
   19efa:	781b      	ldrb	r3, [r3, #0]
   19efc:	b25b      	sxtb	r3, r3
   19efe:	3301      	adds	r3, #1
   19f00:	d123      	bne.n	19f4a <MyWrapper+0x152>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   19f02:	6a3b      	ldr	r3, [r7, #32]
   19f04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   19f06:	2b00      	cmp	r3, #0
   19f08:	d00d      	beq.n	19f26 <MyWrapper+0x12e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   19f0a:	6a3b      	ldr	r3, [r7, #32]
   19f0c:	2100      	movs	r1, #0
   19f0e:	0018      	movs	r0, r3
   19f10:	4b39      	ldr	r3, [pc, #228]	; (19ff8 <MyWrapper+0x200>)
   19f12:	4798      	blx	r3
   19f14:	1e03      	subs	r3, r0, #0
   19f16:	d021      	beq.n	19f5c <MyWrapper+0x164>
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   19f18:	68bb      	ldr	r3, [r7, #8]
   19f1a:	2b00      	cmp	r3, #0
   19f1c:	d01e      	beq.n	19f5c <MyWrapper+0x164>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   19f1e:	68bb      	ldr	r3, [r7, #8]
   19f20:	2201      	movs	r2, #1
   19f22:	601a      	str	r2, [r3, #0]
   19f24:	e01a      	b.n	19f5c <MyWrapper+0x164>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   19f26:	6a3b      	ldr	r3, [r7, #32]
   19f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19f2a:	2b00      	cmp	r3, #0
   19f2c:	d016      	beq.n	19f5c <MyWrapper+0x164>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   19f2e:	6a3b      	ldr	r3, [r7, #32]
   19f30:	3324      	adds	r3, #36	; 0x24
   19f32:	0018      	movs	r0, r3
   19f34:	4b31      	ldr	r3, [pc, #196]	; (19ffc <MyWrapper+0x204>)
   19f36:	4798      	blx	r3
   19f38:	1e03      	subs	r3, r0, #0
   19f3a:	d00f      	beq.n	19f5c <MyWrapper+0x164>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   19f3c:	68bb      	ldr	r3, [r7, #8]
   19f3e:	2b00      	cmp	r3, #0
   19f40:	d00c      	beq.n	19f5c <MyWrapper+0x164>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   19f42:	68bb      	ldr	r3, [r7, #8]
   19f44:	2201      	movs	r2, #1
   19f46:	601a      	str	r2, [r3, #0]
   19f48:	e008      	b.n	19f5c <MyWrapper+0x164>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   19f4a:	2317      	movs	r3, #23
   19f4c:	18fb      	adds	r3, r7, r3
   19f4e:	781b      	ldrb	r3, [r3, #0]
   19f50:	3301      	adds	r3, #1
   19f52:	b2db      	uxtb	r3, r3
   19f54:	b259      	sxtb	r1, r3
   19f56:	6a3b      	ldr	r3, [r7, #32]
   19f58:	2245      	movs	r2, #69	; 0x45
   19f5a:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   19f5c:	2301      	movs	r3, #1
   19f5e:	627b      	str	r3, [r7, #36]	; 0x24
   19f60:	e030      	b.n	19fc4 <MyWrapper+0x1cc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   19f62:	6a3b      	ldr	r3, [r7, #32]
   19f64:	0018      	movs	r0, r3
   19f66:	4b1d      	ldr	r3, [pc, #116]	; (19fdc <MyWrapper+0x1e4>)
   19f68:	4798      	blx	r3
   19f6a:	0003      	movs	r3, r0
   19f6c:	001a      	movs	r2, r3
   19f6e:	4b1c      	ldr	r3, [pc, #112]	; (19fe0 <MyWrapper+0x1e8>)
   19f70:	881b      	ldrh	r3, [r3, #0]
   19f72:	4013      	ands	r3, r2
   19f74:	b29b      	uxth	r3, r3
   19f76:	2b00      	cmp	r3, #0
   19f78:	d022      	beq.n	19fc0 <MyWrapper+0x1c8>
   19f7a:	687b      	ldr	r3, [r7, #4]
   19f7c:	2b00      	cmp	r3, #0
   19f7e:	d10b      	bne.n	19f98 <MyWrapper+0x1a0>
   19f80:	6a3b      	ldr	r3, [r7, #32]
   19f82:	0018      	movs	r0, r3
   19f84:	4b17      	ldr	r3, [pc, #92]	; (19fe4 <MyWrapper+0x1ec>)
   19f86:	4798      	blx	r3
   19f88:	0003      	movs	r3, r0
   19f8a:	001a      	movs	r2, r3
   19f8c:	4b16      	ldr	r3, [pc, #88]	; (19fe8 <MyWrapper+0x1f0>)
   19f8e:	5c9b      	ldrb	r3, [r3, r2]
   19f90:	3358      	adds	r3, #88	; 0x58
   19f92:	b2db      	uxtb	r3, r3
   19f94:	001d      	movs	r5, r3
   19f96:	e000      	b.n	19f9a <MyWrapper+0x1a2>
   19f98:	255d      	movs	r5, #93	; 0x5d
   19f9a:	6a3b      	ldr	r3, [r7, #32]
   19f9c:	0018      	movs	r0, r3
   19f9e:	4b11      	ldr	r3, [pc, #68]	; (19fe4 <MyWrapper+0x1ec>)
   19fa0:	4798      	blx	r3
   19fa2:	0003      	movs	r3, r0
   19fa4:	001a      	movs	r2, r3
   19fa6:	4b10      	ldr	r3, [pc, #64]	; (19fe8 <MyWrapper+0x1f0>)
   19fa8:	5c9c      	ldrb	r4, [r3, r2]
   19faa:	6a3b      	ldr	r3, [r7, #32]
   19fac:	0018      	movs	r0, r3
   19fae:	4b0f      	ldr	r3, [pc, #60]	; (19fec <MyWrapper+0x1f4>)
   19fb0:	4798      	blx	r3
   19fb2:	0003      	movs	r3, r0
   19fb4:	b2db      	uxtb	r3, r3
   19fb6:	001a      	movs	r2, r3
   19fb8:	0021      	movs	r1, r4
   19fba:	0028      	movs	r0, r5
   19fbc:	4b0c      	ldr	r3, [pc, #48]	; (19ff0 <MyWrapper+0x1f8>)
   19fbe:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   19fc0:	2300      	movs	r3, #0
   19fc2:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   19fc4:	69fb      	ldr	r3, [r7, #28]
   19fc6:	0018      	movs	r0, r3
   19fc8:	4b0d      	ldr	r3, [pc, #52]	; (1a000 <MyWrapper+0x208>)
   19fca:	4798      	blx	r3

	return xReturn;
   19fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   19fce:	0018      	movs	r0, r3
   19fd0:	46bd      	mov	sp, r7
   19fd2:	b00a      	add	sp, #40	; 0x28
   19fd4:	bdb0      	pop	{r4, r5, r7, pc}
   19fd6:	46c0      	nop			; (mov r8, r8)
   19fd8:	0001920d 	.word	0x0001920d
   19fdc:	00017279 	.word	0x00017279
   19fe0:	20000100 	.word	0x20000100
   19fe4:	00017179 	.word	0x00017179
   19fe8:	200000f4 	.word	0x200000f4
   19fec:	00017259 	.word	0x00017259
   19ff0:	00017bb1 	.word	0x00017bb1
   19ff4:	0001820d 	.word	0x0001820d
   19ff8:	0001ac89 	.word	0x0001ac89
   19ffc:	0001ba49 	.word	0x0001ba49
   1a000:	00019219 	.word	0x00019219

0001a004 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   1a004:	b5b0      	push	{r4, r5, r7, lr}
   1a006:	b08a      	sub	sp, #40	; 0x28
   1a008:	af00      	add	r7, sp, #0
   1a00a:	60f8      	str	r0, [r7, #12]
   1a00c:	60b9      	str	r1, [r7, #8]
   1a00e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   1a010:	2300      	movs	r3, #0
   1a012:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1a014:	68fb      	ldr	r3, [r7, #12]
   1a016:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1a018:	6a3b      	ldr	r3, [r7, #32]
   1a01a:	2b00      	cmp	r3, #0
   1a01c:	d101      	bne.n	1a022 <xQueueReceive+0x1e>
   1a01e:	b672      	cpsid	i
   1a020:	e7fe      	b.n	1a020 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1a022:	68bb      	ldr	r3, [r7, #8]
   1a024:	2b00      	cmp	r3, #0
   1a026:	d103      	bne.n	1a030 <xQueueReceive+0x2c>
   1a028:	6a3b      	ldr	r3, [r7, #32]
   1a02a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a02c:	2b00      	cmp	r3, #0
   1a02e:	d101      	bne.n	1a034 <xQueueReceive+0x30>
   1a030:	2301      	movs	r3, #1
   1a032:	e000      	b.n	1a036 <xQueueReceive+0x32>
   1a034:	2300      	movs	r3, #0
   1a036:	2b00      	cmp	r3, #0
   1a038:	d101      	bne.n	1a03e <xQueueReceive+0x3a>
   1a03a:	b672      	cpsid	i
   1a03c:	e7fe      	b.n	1a03c <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1a03e:	4bbf      	ldr	r3, [pc, #764]	; (1a33c <xQueueReceive+0x338>)
   1a040:	4798      	blx	r3
   1a042:	1e03      	subs	r3, r0, #0
   1a044:	d102      	bne.n	1a04c <xQueueReceive+0x48>
   1a046:	687b      	ldr	r3, [r7, #4]
   1a048:	2b00      	cmp	r3, #0
   1a04a:	d101      	bne.n	1a050 <xQueueReceive+0x4c>
   1a04c:	2301      	movs	r3, #1
   1a04e:	e000      	b.n	1a052 <xQueueReceive+0x4e>
   1a050:	2300      	movs	r3, #0
   1a052:	2b00      	cmp	r3, #0
   1a054:	d101      	bne.n	1a05a <xQueueReceive+0x56>
   1a056:	b672      	cpsid	i
   1a058:	e7fe      	b.n	1a058 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1a05a:	4bb9      	ldr	r3, [pc, #740]	; (1a340 <xQueueReceive+0x33c>)
   1a05c:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1a05e:	6a3b      	ldr	r3, [r7, #32]
   1a060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a062:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1a064:	69fb      	ldr	r3, [r7, #28]
   1a066:	2b00      	cmp	r3, #0
   1a068:	d100      	bne.n	1a06c <xQueueReceive+0x68>
   1a06a:	e07d      	b.n	1a168 <xQueueReceive+0x164>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   1a06c:	68ba      	ldr	r2, [r7, #8]
   1a06e:	6a3b      	ldr	r3, [r7, #32]
   1a070:	0011      	movs	r1, r2
   1a072:	0018      	movs	r0, r3
   1a074:	4bb3      	ldr	r3, [pc, #716]	; (1a344 <xQueueReceive+0x340>)
   1a076:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
   1a078:	4bb3      	ldr	r3, [pc, #716]	; (1a348 <xQueueReceive+0x344>)
   1a07a:	4798      	blx	r3
   1a07c:	0003      	movs	r3, r0
   1a07e:	0018      	movs	r0, r3
   1a080:	4bb2      	ldr	r3, [pc, #712]	; (1a34c <xQueueReceive+0x348>)
   1a082:	4798      	blx	r3
   1a084:	0003      	movs	r3, r0
   1a086:	001a      	movs	r2, r3
   1a088:	4bb1      	ldr	r3, [pc, #708]	; (1a350 <xQueueReceive+0x34c>)
   1a08a:	881b      	ldrh	r3, [r3, #0]
   1a08c:	4013      	ands	r3, r2
   1a08e:	b29b      	uxth	r3, r3
   1a090:	2b00      	cmp	r3, #0
   1a092:	d029      	beq.n	1a0e8 <xQueueReceive+0xe4>
   1a094:	6a3b      	ldr	r3, [r7, #32]
   1a096:	0018      	movs	r0, r3
   1a098:	4bae      	ldr	r3, [pc, #696]	; (1a354 <xQueueReceive+0x350>)
   1a09a:	4798      	blx	r3
   1a09c:	0003      	movs	r3, r0
   1a09e:	001a      	movs	r2, r3
   1a0a0:	4bab      	ldr	r3, [pc, #684]	; (1a350 <xQueueReceive+0x34c>)
   1a0a2:	881b      	ldrh	r3, [r3, #0]
   1a0a4:	4013      	ands	r3, r2
   1a0a6:	b29b      	uxth	r3, r3
   1a0a8:	2b00      	cmp	r3, #0
   1a0aa:	d01d      	beq.n	1a0e8 <xQueueReceive+0xe4>
   1a0ac:	6a3b      	ldr	r3, [r7, #32]
   1a0ae:	0018      	movs	r0, r3
   1a0b0:	4ba9      	ldr	r3, [pc, #676]	; (1a358 <xQueueReceive+0x354>)
   1a0b2:	4798      	blx	r3
   1a0b4:	0003      	movs	r3, r0
   1a0b6:	001a      	movs	r2, r3
   1a0b8:	4ba8      	ldr	r3, [pc, #672]	; (1a35c <xQueueReceive+0x358>)
   1a0ba:	5c9b      	ldrb	r3, [r3, r2]
   1a0bc:	3328      	adds	r3, #40	; 0x28
   1a0be:	b2db      	uxtb	r3, r3
   1a0c0:	001d      	movs	r5, r3
   1a0c2:	6a3b      	ldr	r3, [r7, #32]
   1a0c4:	0018      	movs	r0, r3
   1a0c6:	4ba4      	ldr	r3, [pc, #656]	; (1a358 <xQueueReceive+0x354>)
   1a0c8:	4798      	blx	r3
   1a0ca:	0003      	movs	r3, r0
   1a0cc:	001a      	movs	r2, r3
   1a0ce:	4ba3      	ldr	r3, [pc, #652]	; (1a35c <xQueueReceive+0x358>)
   1a0d0:	5c9c      	ldrb	r4, [r3, r2]
   1a0d2:	6a3b      	ldr	r3, [r7, #32]
   1a0d4:	0018      	movs	r0, r3
   1a0d6:	4ba2      	ldr	r3, [pc, #648]	; (1a360 <xQueueReceive+0x35c>)
   1a0d8:	4798      	blx	r3
   1a0da:	0003      	movs	r3, r0
   1a0dc:	b2db      	uxtb	r3, r3
   1a0de:	001a      	movs	r2, r3
   1a0e0:	0021      	movs	r1, r4
   1a0e2:	0028      	movs	r0, r5
   1a0e4:	4b9f      	ldr	r3, [pc, #636]	; (1a364 <xQueueReceive+0x360>)
   1a0e6:	4798      	blx	r3
   1a0e8:	6a3b      	ldr	r3, [r7, #32]
   1a0ea:	0018      	movs	r0, r3
   1a0ec:	4b9a      	ldr	r3, [pc, #616]	; (1a358 <xQueueReceive+0x354>)
   1a0ee:	4798      	blx	r3
   1a0f0:	0003      	movs	r3, r0
   1a0f2:	001a      	movs	r2, r3
   1a0f4:	4b99      	ldr	r3, [pc, #612]	; (1a35c <xQueueReceive+0x358>)
   1a0f6:	5c9c      	ldrb	r4, [r3, r2]
   1a0f8:	6a3b      	ldr	r3, [r7, #32]
   1a0fa:	0018      	movs	r0, r3
   1a0fc:	4b98      	ldr	r3, [pc, #608]	; (1a360 <xQueueReceive+0x35c>)
   1a0fe:	4798      	blx	r3
   1a100:	0003      	movs	r3, r0
   1a102:	b2dd      	uxtb	r5, r3
   1a104:	6a3b      	ldr	r3, [r7, #32]
   1a106:	0018      	movs	r0, r3
   1a108:	4b93      	ldr	r3, [pc, #588]	; (1a358 <xQueueReceive+0x354>)
   1a10a:	4798      	blx	r3
   1a10c:	0003      	movs	r3, r0
   1a10e:	001a      	movs	r2, r3
   1a110:	4b92      	ldr	r3, [pc, #584]	; (1a35c <xQueueReceive+0x358>)
   1a112:	5c9b      	ldrb	r3, [r3, r2]
   1a114:	2b02      	cmp	r3, #2
   1a116:	d108      	bne.n	1a12a <xQueueReceive+0x126>
   1a118:	4b8b      	ldr	r3, [pc, #556]	; (1a348 <xQueueReceive+0x344>)
   1a11a:	4798      	blx	r3
   1a11c:	0003      	movs	r3, r0
   1a11e:	0018      	movs	r0, r3
   1a120:	4b91      	ldr	r3, [pc, #580]	; (1a368 <xQueueReceive+0x364>)
   1a122:	4798      	blx	r3
   1a124:	0003      	movs	r3, r0
   1a126:	b2db      	uxtb	r3, r3
   1a128:	e004      	b.n	1a134 <xQueueReceive+0x130>
   1a12a:	6a3b      	ldr	r3, [r7, #32]
   1a12c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a12e:	b2db      	uxtb	r3, r3
   1a130:	3b01      	subs	r3, #1
   1a132:	b2db      	uxtb	r3, r3
   1a134:	001a      	movs	r2, r3
   1a136:	0029      	movs	r1, r5
   1a138:	0020      	movs	r0, r4
   1a13a:	4b8c      	ldr	r3, [pc, #560]	; (1a36c <xQueueReceive+0x368>)
   1a13c:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   1a13e:	69fb      	ldr	r3, [r7, #28]
   1a140:	1e5a      	subs	r2, r3, #1
   1a142:	6a3b      	ldr	r3, [r7, #32]
   1a144:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1a146:	6a3b      	ldr	r3, [r7, #32]
   1a148:	691b      	ldr	r3, [r3, #16]
   1a14a:	2b00      	cmp	r3, #0
   1a14c:	d008      	beq.n	1a160 <xQueueReceive+0x15c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1a14e:	6a3b      	ldr	r3, [r7, #32]
   1a150:	3310      	adds	r3, #16
   1a152:	0018      	movs	r0, r3
   1a154:	4b86      	ldr	r3, [pc, #536]	; (1a370 <xQueueReceive+0x36c>)
   1a156:	4798      	blx	r3
   1a158:	1e03      	subs	r3, r0, #0
   1a15a:	d001      	beq.n	1a160 <xQueueReceive+0x15c>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1a15c:	4b85      	ldr	r3, [pc, #532]	; (1a374 <xQueueReceive+0x370>)
   1a15e:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1a160:	4b85      	ldr	r3, [pc, #532]	; (1a378 <xQueueReceive+0x374>)
   1a162:	4798      	blx	r3
				return pdPASS;
   1a164:	2301      	movs	r3, #1
   1a166:	e15f      	b.n	1a428 <xQueueReceive+0x424>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1a168:	687b      	ldr	r3, [r7, #4]
   1a16a:	2b00      	cmp	r3, #0
   1a16c:	d13b      	bne.n	1a1e6 <xQueueReceive+0x1e2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1a16e:	4b82      	ldr	r3, [pc, #520]	; (1a378 <xQueueReceive+0x374>)
   1a170:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1a172:	4b75      	ldr	r3, [pc, #468]	; (1a348 <xQueueReceive+0x344>)
   1a174:	4798      	blx	r3
   1a176:	0003      	movs	r3, r0
   1a178:	0018      	movs	r0, r3
   1a17a:	4b74      	ldr	r3, [pc, #464]	; (1a34c <xQueueReceive+0x348>)
   1a17c:	4798      	blx	r3
   1a17e:	0003      	movs	r3, r0
   1a180:	001a      	movs	r2, r3
   1a182:	4b73      	ldr	r3, [pc, #460]	; (1a350 <xQueueReceive+0x34c>)
   1a184:	881b      	ldrh	r3, [r3, #0]
   1a186:	4013      	ands	r3, r2
   1a188:	b29b      	uxth	r3, r3
   1a18a:	2b00      	cmp	r3, #0
   1a18c:	d029      	beq.n	1a1e2 <xQueueReceive+0x1de>
   1a18e:	6a3b      	ldr	r3, [r7, #32]
   1a190:	0018      	movs	r0, r3
   1a192:	4b70      	ldr	r3, [pc, #448]	; (1a354 <xQueueReceive+0x350>)
   1a194:	4798      	blx	r3
   1a196:	0003      	movs	r3, r0
   1a198:	001a      	movs	r2, r3
   1a19a:	4b6d      	ldr	r3, [pc, #436]	; (1a350 <xQueueReceive+0x34c>)
   1a19c:	881b      	ldrh	r3, [r3, #0]
   1a19e:	4013      	ands	r3, r2
   1a1a0:	b29b      	uxth	r3, r3
   1a1a2:	2b00      	cmp	r3, #0
   1a1a4:	d01d      	beq.n	1a1e2 <xQueueReceive+0x1de>
   1a1a6:	6a3b      	ldr	r3, [r7, #32]
   1a1a8:	0018      	movs	r0, r3
   1a1aa:	4b6b      	ldr	r3, [pc, #428]	; (1a358 <xQueueReceive+0x354>)
   1a1ac:	4798      	blx	r3
   1a1ae:	0003      	movs	r3, r0
   1a1b0:	001a      	movs	r2, r3
   1a1b2:	4b6a      	ldr	r3, [pc, #424]	; (1a35c <xQueueReceive+0x358>)
   1a1b4:	5c9b      	ldrb	r3, [r3, r2]
   1a1b6:	3350      	adds	r3, #80	; 0x50
   1a1b8:	b2db      	uxtb	r3, r3
   1a1ba:	001d      	movs	r5, r3
   1a1bc:	6a3b      	ldr	r3, [r7, #32]
   1a1be:	0018      	movs	r0, r3
   1a1c0:	4b65      	ldr	r3, [pc, #404]	; (1a358 <xQueueReceive+0x354>)
   1a1c2:	4798      	blx	r3
   1a1c4:	0003      	movs	r3, r0
   1a1c6:	001a      	movs	r2, r3
   1a1c8:	4b64      	ldr	r3, [pc, #400]	; (1a35c <xQueueReceive+0x358>)
   1a1ca:	5c9c      	ldrb	r4, [r3, r2]
   1a1cc:	6a3b      	ldr	r3, [r7, #32]
   1a1ce:	0018      	movs	r0, r3
   1a1d0:	4b63      	ldr	r3, [pc, #396]	; (1a360 <xQueueReceive+0x35c>)
   1a1d2:	4798      	blx	r3
   1a1d4:	0003      	movs	r3, r0
   1a1d6:	b2db      	uxtb	r3, r3
   1a1d8:	001a      	movs	r2, r3
   1a1da:	0021      	movs	r1, r4
   1a1dc:	0028      	movs	r0, r5
   1a1de:	4b61      	ldr	r3, [pc, #388]	; (1a364 <xQueueReceive+0x360>)
   1a1e0:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1a1e2:	2300      	movs	r3, #0
   1a1e4:	e120      	b.n	1a428 <xQueueReceive+0x424>
				}
				else if( xEntryTimeSet == pdFALSE )
   1a1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a1e8:	2b00      	cmp	r3, #0
   1a1ea:	d106      	bne.n	1a1fa <xQueueReceive+0x1f6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1a1ec:	2314      	movs	r3, #20
   1a1ee:	18fb      	adds	r3, r7, r3
   1a1f0:	0018      	movs	r0, r3
   1a1f2:	4b62      	ldr	r3, [pc, #392]	; (1a37c <xQueueReceive+0x378>)
   1a1f4:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1a1f6:	2301      	movs	r3, #1
   1a1f8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1a1fa:	4b5f      	ldr	r3, [pc, #380]	; (1a378 <xQueueReceive+0x374>)
   1a1fc:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1a1fe:	4b60      	ldr	r3, [pc, #384]	; (1a380 <xQueueReceive+0x37c>)
   1a200:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1a202:	4b4f      	ldr	r3, [pc, #316]	; (1a340 <xQueueReceive+0x33c>)
   1a204:	4798      	blx	r3
   1a206:	6a3b      	ldr	r3, [r7, #32]
   1a208:	2244      	movs	r2, #68	; 0x44
   1a20a:	5c9b      	ldrb	r3, [r3, r2]
   1a20c:	b25b      	sxtb	r3, r3
   1a20e:	3301      	adds	r3, #1
   1a210:	d103      	bne.n	1a21a <xQueueReceive+0x216>
   1a212:	6a3b      	ldr	r3, [r7, #32]
   1a214:	2244      	movs	r2, #68	; 0x44
   1a216:	2100      	movs	r1, #0
   1a218:	5499      	strb	r1, [r3, r2]
   1a21a:	6a3b      	ldr	r3, [r7, #32]
   1a21c:	2245      	movs	r2, #69	; 0x45
   1a21e:	5c9b      	ldrb	r3, [r3, r2]
   1a220:	b25b      	sxtb	r3, r3
   1a222:	3301      	adds	r3, #1
   1a224:	d103      	bne.n	1a22e <xQueueReceive+0x22a>
   1a226:	6a3b      	ldr	r3, [r7, #32]
   1a228:	2245      	movs	r2, #69	; 0x45
   1a22a:	2100      	movs	r1, #0
   1a22c:	5499      	strb	r1, [r3, r2]
   1a22e:	4b52      	ldr	r3, [pc, #328]	; (1a378 <xQueueReceive+0x374>)
   1a230:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1a232:	1d3a      	adds	r2, r7, #4
   1a234:	2314      	movs	r3, #20
   1a236:	18fb      	adds	r3, r7, r3
   1a238:	0011      	movs	r1, r2
   1a23a:	0018      	movs	r0, r3
   1a23c:	4b51      	ldr	r3, [pc, #324]	; (1a384 <xQueueReceive+0x380>)
   1a23e:	4798      	blx	r3
   1a240:	1e03      	subs	r3, r0, #0
   1a242:	d000      	beq.n	1a246 <xQueueReceive+0x242>
   1a244:	e0aa      	b.n	1a39c <xQueueReceive+0x398>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1a246:	6a3b      	ldr	r3, [r7, #32]
   1a248:	0018      	movs	r0, r3
   1a24a:	4b4f      	ldr	r3, [pc, #316]	; (1a388 <xQueueReceive+0x384>)
   1a24c:	4798      	blx	r3
   1a24e:	1e03      	subs	r3, r0, #0
   1a250:	d06d      	beq.n	1a32e <xQueueReceive+0x32a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1a252:	4b3d      	ldr	r3, [pc, #244]	; (1a348 <xQueueReceive+0x344>)
   1a254:	4798      	blx	r3
   1a256:	0003      	movs	r3, r0
   1a258:	0018      	movs	r0, r3
   1a25a:	4b3c      	ldr	r3, [pc, #240]	; (1a34c <xQueueReceive+0x348>)
   1a25c:	4798      	blx	r3
   1a25e:	0003      	movs	r3, r0
   1a260:	001a      	movs	r2, r3
   1a262:	4b3b      	ldr	r3, [pc, #236]	; (1a350 <xQueueReceive+0x34c>)
   1a264:	881b      	ldrh	r3, [r3, #0]
   1a266:	4013      	ands	r3, r2
   1a268:	b29b      	uxth	r3, r3
   1a26a:	2b00      	cmp	r3, #0
   1a26c:	d029      	beq.n	1a2c2 <xQueueReceive+0x2be>
   1a26e:	6a3b      	ldr	r3, [r7, #32]
   1a270:	0018      	movs	r0, r3
   1a272:	4b38      	ldr	r3, [pc, #224]	; (1a354 <xQueueReceive+0x350>)
   1a274:	4798      	blx	r3
   1a276:	0003      	movs	r3, r0
   1a278:	001a      	movs	r2, r3
   1a27a:	4b35      	ldr	r3, [pc, #212]	; (1a350 <xQueueReceive+0x34c>)
   1a27c:	881b      	ldrh	r3, [r3, #0]
   1a27e:	4013      	ands	r3, r2
   1a280:	b29b      	uxth	r3, r3
   1a282:	2b00      	cmp	r3, #0
   1a284:	d01d      	beq.n	1a2c2 <xQueueReceive+0x2be>
   1a286:	6a3b      	ldr	r3, [r7, #32]
   1a288:	0018      	movs	r0, r3
   1a28a:	4b33      	ldr	r3, [pc, #204]	; (1a358 <xQueueReceive+0x354>)
   1a28c:	4798      	blx	r3
   1a28e:	0003      	movs	r3, r0
   1a290:	001a      	movs	r2, r3
   1a292:	4b32      	ldr	r3, [pc, #200]	; (1a35c <xQueueReceive+0x358>)
   1a294:	5c9b      	ldrb	r3, [r3, r2]
   1a296:	3368      	adds	r3, #104	; 0x68
   1a298:	b2db      	uxtb	r3, r3
   1a29a:	001d      	movs	r5, r3
   1a29c:	6a3b      	ldr	r3, [r7, #32]
   1a29e:	0018      	movs	r0, r3
   1a2a0:	4b2d      	ldr	r3, [pc, #180]	; (1a358 <xQueueReceive+0x354>)
   1a2a2:	4798      	blx	r3
   1a2a4:	0003      	movs	r3, r0
   1a2a6:	001a      	movs	r2, r3
   1a2a8:	4b2c      	ldr	r3, [pc, #176]	; (1a35c <xQueueReceive+0x358>)
   1a2aa:	5c9c      	ldrb	r4, [r3, r2]
   1a2ac:	6a3b      	ldr	r3, [r7, #32]
   1a2ae:	0018      	movs	r0, r3
   1a2b0:	4b2b      	ldr	r3, [pc, #172]	; (1a360 <xQueueReceive+0x35c>)
   1a2b2:	4798      	blx	r3
   1a2b4:	0003      	movs	r3, r0
   1a2b6:	b2db      	uxtb	r3, r3
   1a2b8:	001a      	movs	r2, r3
   1a2ba:	0021      	movs	r1, r4
   1a2bc:	0028      	movs	r0, r5
   1a2be:	4b29      	ldr	r3, [pc, #164]	; (1a364 <xQueueReceive+0x360>)
   1a2c0:	4798      	blx	r3
   1a2c2:	6a3b      	ldr	r3, [r7, #32]
   1a2c4:	0018      	movs	r0, r3
   1a2c6:	4b24      	ldr	r3, [pc, #144]	; (1a358 <xQueueReceive+0x354>)
   1a2c8:	4798      	blx	r3
   1a2ca:	0003      	movs	r3, r0
   1a2cc:	001a      	movs	r2, r3
   1a2ce:	4b23      	ldr	r3, [pc, #140]	; (1a35c <xQueueReceive+0x358>)
   1a2d0:	5c9b      	ldrb	r3, [r3, r2]
   1a2d2:	2b02      	cmp	r3, #2
   1a2d4:	d018      	beq.n	1a308 <xQueueReceive+0x304>
   1a2d6:	4b1c      	ldr	r3, [pc, #112]	; (1a348 <xQueueReceive+0x344>)
   1a2d8:	4798      	blx	r3
   1a2da:	0003      	movs	r3, r0
   1a2dc:	0018      	movs	r0, r3
   1a2de:	4b1b      	ldr	r3, [pc, #108]	; (1a34c <xQueueReceive+0x348>)
   1a2e0:	4798      	blx	r3
   1a2e2:	0003      	movs	r3, r0
   1a2e4:	001a      	movs	r2, r3
   1a2e6:	4b1a      	ldr	r3, [pc, #104]	; (1a350 <xQueueReceive+0x34c>)
   1a2e8:	881b      	ldrh	r3, [r3, #0]
   1a2ea:	4013      	ands	r3, r2
   1a2ec:	b29b      	uxth	r3, r3
   1a2ee:	2b00      	cmp	r3, #0
   1a2f0:	d00a      	beq.n	1a308 <xQueueReceive+0x304>
   1a2f2:	4b15      	ldr	r3, [pc, #84]	; (1a348 <xQueueReceive+0x344>)
   1a2f4:	4798      	blx	r3
   1a2f6:	0003      	movs	r3, r0
   1a2f8:	0018      	movs	r0, r3
   1a2fa:	4b1b      	ldr	r3, [pc, #108]	; (1a368 <xQueueReceive+0x364>)
   1a2fc:	4798      	blx	r3
   1a2fe:	0003      	movs	r3, r0
   1a300:	b2db      	uxtb	r3, r3
   1a302:	0018      	movs	r0, r3
   1a304:	4b21      	ldr	r3, [pc, #132]	; (1a38c <xQueueReceive+0x388>)
   1a306:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1a308:	6a3b      	ldr	r3, [r7, #32]
   1a30a:	3324      	adds	r3, #36	; 0x24
   1a30c:	687a      	ldr	r2, [r7, #4]
   1a30e:	0011      	movs	r1, r2
   1a310:	0018      	movs	r0, r3
   1a312:	4b1f      	ldr	r3, [pc, #124]	; (1a390 <xQueueReceive+0x38c>)
   1a314:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1a316:	6a3b      	ldr	r3, [r7, #32]
   1a318:	0018      	movs	r0, r3
   1a31a:	4b1e      	ldr	r3, [pc, #120]	; (1a394 <xQueueReceive+0x390>)
   1a31c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1a31e:	4b1e      	ldr	r3, [pc, #120]	; (1a398 <xQueueReceive+0x394>)
   1a320:	4798      	blx	r3
   1a322:	1e03      	subs	r3, r0, #0
   1a324:	d000      	beq.n	1a328 <xQueueReceive+0x324>
   1a326:	e698      	b.n	1a05a <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
   1a328:	4b12      	ldr	r3, [pc, #72]	; (1a374 <xQueueReceive+0x370>)
   1a32a:	4798      	blx	r3
   1a32c:	e695      	b.n	1a05a <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   1a32e:	6a3b      	ldr	r3, [r7, #32]
   1a330:	0018      	movs	r0, r3
   1a332:	4b18      	ldr	r3, [pc, #96]	; (1a394 <xQueueReceive+0x390>)
   1a334:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1a336:	4b18      	ldr	r3, [pc, #96]	; (1a398 <xQueueReceive+0x394>)
   1a338:	4798      	blx	r3
   1a33a:	e68e      	b.n	1a05a <xQueueReceive+0x56>
   1a33c:	0001bed9 	.word	0x0001bed9
   1a340:	000191b9 	.word	0x000191b9
   1a344:	0001aa65 	.word	0x0001aa65
   1a348:	00017455 	.word	0x00017455
   1a34c:	000171b9 	.word	0x000171b9
   1a350:	20000100 	.word	0x20000100
   1a354:	00017279 	.word	0x00017279
   1a358:	00017179 	.word	0x00017179
   1a35c:	200000f4 	.word	0x200000f4
   1a360:	00017259 	.word	0x00017259
   1a364:	00017bb1 	.word	0x00017bb1
   1a368:	00017199 	.word	0x00017199
   1a36c:	0001820d 	.word	0x0001820d
   1a370:	0001ba49 	.word	0x0001ba49
   1a374:	000191a1 	.word	0x000191a1
   1a378:	000191dd 	.word	0x000191dd
   1a37c:	0001bb89 	.word	0x0001bb89
   1a380:	0001b471 	.word	0x0001b471
   1a384:	0001bbb1 	.word	0x0001bbb1
   1a388:	0001aba5 	.word	0x0001aba5
   1a38c:	00018349 	.word	0x00018349
   1a390:	0001b925 	.word	0x0001b925
   1a394:	0001aab5 	.word	0x0001aab5
   1a398:	0001b489 	.word	0x0001b489
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   1a39c:	6a3b      	ldr	r3, [r7, #32]
   1a39e:	0018      	movs	r0, r3
   1a3a0:	4b23      	ldr	r3, [pc, #140]	; (1a430 <xQueueReceive+0x42c>)
   1a3a2:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1a3a4:	4b23      	ldr	r3, [pc, #140]	; (1a434 <xQueueReceive+0x430>)
   1a3a6:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1a3a8:	6a3b      	ldr	r3, [r7, #32]
   1a3aa:	0018      	movs	r0, r3
   1a3ac:	4b22      	ldr	r3, [pc, #136]	; (1a438 <xQueueReceive+0x434>)
   1a3ae:	4798      	blx	r3
   1a3b0:	1e03      	subs	r3, r0, #0
   1a3b2:	d100      	bne.n	1a3b6 <xQueueReceive+0x3b2>
   1a3b4:	e651      	b.n	1a05a <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1a3b6:	4b21      	ldr	r3, [pc, #132]	; (1a43c <xQueueReceive+0x438>)
   1a3b8:	4798      	blx	r3
   1a3ba:	0003      	movs	r3, r0
   1a3bc:	0018      	movs	r0, r3
   1a3be:	4b20      	ldr	r3, [pc, #128]	; (1a440 <xQueueReceive+0x43c>)
   1a3c0:	4798      	blx	r3
   1a3c2:	0003      	movs	r3, r0
   1a3c4:	001a      	movs	r2, r3
   1a3c6:	4b1f      	ldr	r3, [pc, #124]	; (1a444 <xQueueReceive+0x440>)
   1a3c8:	881b      	ldrh	r3, [r3, #0]
   1a3ca:	4013      	ands	r3, r2
   1a3cc:	b29b      	uxth	r3, r3
   1a3ce:	2b00      	cmp	r3, #0
   1a3d0:	d029      	beq.n	1a426 <xQueueReceive+0x422>
   1a3d2:	6a3b      	ldr	r3, [r7, #32]
   1a3d4:	0018      	movs	r0, r3
   1a3d6:	4b1c      	ldr	r3, [pc, #112]	; (1a448 <xQueueReceive+0x444>)
   1a3d8:	4798      	blx	r3
   1a3da:	0003      	movs	r3, r0
   1a3dc:	001a      	movs	r2, r3
   1a3de:	4b19      	ldr	r3, [pc, #100]	; (1a444 <xQueueReceive+0x440>)
   1a3e0:	881b      	ldrh	r3, [r3, #0]
   1a3e2:	4013      	ands	r3, r2
   1a3e4:	b29b      	uxth	r3, r3
   1a3e6:	2b00      	cmp	r3, #0
   1a3e8:	d01d      	beq.n	1a426 <xQueueReceive+0x422>
   1a3ea:	6a3b      	ldr	r3, [r7, #32]
   1a3ec:	0018      	movs	r0, r3
   1a3ee:	4b17      	ldr	r3, [pc, #92]	; (1a44c <xQueueReceive+0x448>)
   1a3f0:	4798      	blx	r3
   1a3f2:	0003      	movs	r3, r0
   1a3f4:	001a      	movs	r2, r3
   1a3f6:	4b16      	ldr	r3, [pc, #88]	; (1a450 <xQueueReceive+0x44c>)
   1a3f8:	5c9b      	ldrb	r3, [r3, r2]
   1a3fa:	3350      	adds	r3, #80	; 0x50
   1a3fc:	b2db      	uxtb	r3, r3
   1a3fe:	001d      	movs	r5, r3
   1a400:	6a3b      	ldr	r3, [r7, #32]
   1a402:	0018      	movs	r0, r3
   1a404:	4b11      	ldr	r3, [pc, #68]	; (1a44c <xQueueReceive+0x448>)
   1a406:	4798      	blx	r3
   1a408:	0003      	movs	r3, r0
   1a40a:	001a      	movs	r2, r3
   1a40c:	4b10      	ldr	r3, [pc, #64]	; (1a450 <xQueueReceive+0x44c>)
   1a40e:	5c9c      	ldrb	r4, [r3, r2]
   1a410:	6a3b      	ldr	r3, [r7, #32]
   1a412:	0018      	movs	r0, r3
   1a414:	4b0f      	ldr	r3, [pc, #60]	; (1a454 <xQueueReceive+0x450>)
   1a416:	4798      	blx	r3
   1a418:	0003      	movs	r3, r0
   1a41a:	b2db      	uxtb	r3, r3
   1a41c:	001a      	movs	r2, r3
   1a41e:	0021      	movs	r1, r4
   1a420:	0028      	movs	r0, r5
   1a422:	4b0d      	ldr	r3, [pc, #52]	; (1a458 <xQueueReceive+0x454>)
   1a424:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1a426:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1a428:	0018      	movs	r0, r3
   1a42a:	46bd      	mov	sp, r7
   1a42c:	b00a      	add	sp, #40	; 0x28
   1a42e:	bdb0      	pop	{r4, r5, r7, pc}
   1a430:	0001aab5 	.word	0x0001aab5
   1a434:	0001b489 	.word	0x0001b489
   1a438:	0001aba5 	.word	0x0001aba5
   1a43c:	00017455 	.word	0x00017455
   1a440:	000171b9 	.word	0x000171b9
   1a444:	20000100 	.word	0x20000100
   1a448:	00017279 	.word	0x00017279
   1a44c:	00017179 	.word	0x00017179
   1a450:	200000f4 	.word	0x200000f4
   1a454:	00017259 	.word	0x00017259
   1a458:	00017bb1 	.word	0x00017bb1

0001a45c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
   1a45c:	b5b0      	push	{r4, r5, r7, lr}
   1a45e:	b08a      	sub	sp, #40	; 0x28
   1a460:	af00      	add	r7, sp, #0
   1a462:	6078      	str	r0, [r7, #4]
   1a464:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   1a466:	2300      	movs	r3, #0
   1a468:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1a46a:	687b      	ldr	r3, [r7, #4]
   1a46c:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
   1a46e:	2300      	movs	r3, #0
   1a470:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1a472:	69fb      	ldr	r3, [r7, #28]
   1a474:	2b00      	cmp	r3, #0
   1a476:	d101      	bne.n	1a47c <xQueueSemaphoreTake+0x20>
   1a478:	b672      	cpsid	i
   1a47a:	e7fe      	b.n	1a47a <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1a47c:	69fb      	ldr	r3, [r7, #28]
   1a47e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a480:	2b00      	cmp	r3, #0
   1a482:	d001      	beq.n	1a488 <xQueueSemaphoreTake+0x2c>
   1a484:	b672      	cpsid	i
   1a486:	e7fe      	b.n	1a486 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1a488:	4bcb      	ldr	r3, [pc, #812]	; (1a7b8 <xQueueSemaphoreTake+0x35c>)
   1a48a:	4798      	blx	r3
   1a48c:	1e03      	subs	r3, r0, #0
   1a48e:	d102      	bne.n	1a496 <xQueueSemaphoreTake+0x3a>
   1a490:	683b      	ldr	r3, [r7, #0]
   1a492:	2b00      	cmp	r3, #0
   1a494:	d101      	bne.n	1a49a <xQueueSemaphoreTake+0x3e>
   1a496:	2301      	movs	r3, #1
   1a498:	e000      	b.n	1a49c <xQueueSemaphoreTake+0x40>
   1a49a:	2300      	movs	r3, #0
   1a49c:	2b00      	cmp	r3, #0
   1a49e:	d101      	bne.n	1a4a4 <xQueueSemaphoreTake+0x48>
   1a4a0:	b672      	cpsid	i
   1a4a2:	e7fe      	b.n	1a4a2 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1a4a4:	4bc5      	ldr	r3, [pc, #788]	; (1a7bc <xQueueSemaphoreTake+0x360>)
   1a4a6:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   1a4a8:	69fb      	ldr	r3, [r7, #28]
   1a4aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a4ac:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   1a4ae:	69bb      	ldr	r3, [r7, #24]
   1a4b0:	2b00      	cmp	r3, #0
   1a4b2:	d100      	bne.n	1a4b6 <xQueueSemaphoreTake+0x5a>
   1a4b4:	e080      	b.n	1a5b8 <xQueueSemaphoreTake+0x15c>
			{
				traceQUEUE_RECEIVE( pxQueue );
   1a4b6:	4bc2      	ldr	r3, [pc, #776]	; (1a7c0 <xQueueSemaphoreTake+0x364>)
   1a4b8:	4798      	blx	r3
   1a4ba:	0003      	movs	r3, r0
   1a4bc:	0018      	movs	r0, r3
   1a4be:	4bc1      	ldr	r3, [pc, #772]	; (1a7c4 <xQueueSemaphoreTake+0x368>)
   1a4c0:	4798      	blx	r3
   1a4c2:	0003      	movs	r3, r0
   1a4c4:	001a      	movs	r2, r3
   1a4c6:	4bc0      	ldr	r3, [pc, #768]	; (1a7c8 <xQueueSemaphoreTake+0x36c>)
   1a4c8:	881b      	ldrh	r3, [r3, #0]
   1a4ca:	4013      	ands	r3, r2
   1a4cc:	b29b      	uxth	r3, r3
   1a4ce:	2b00      	cmp	r3, #0
   1a4d0:	d029      	beq.n	1a526 <xQueueSemaphoreTake+0xca>
   1a4d2:	69fb      	ldr	r3, [r7, #28]
   1a4d4:	0018      	movs	r0, r3
   1a4d6:	4bbd      	ldr	r3, [pc, #756]	; (1a7cc <xQueueSemaphoreTake+0x370>)
   1a4d8:	4798      	blx	r3
   1a4da:	0003      	movs	r3, r0
   1a4dc:	001a      	movs	r2, r3
   1a4de:	4bba      	ldr	r3, [pc, #744]	; (1a7c8 <xQueueSemaphoreTake+0x36c>)
   1a4e0:	881b      	ldrh	r3, [r3, #0]
   1a4e2:	4013      	ands	r3, r2
   1a4e4:	b29b      	uxth	r3, r3
   1a4e6:	2b00      	cmp	r3, #0
   1a4e8:	d01d      	beq.n	1a526 <xQueueSemaphoreTake+0xca>
   1a4ea:	69fb      	ldr	r3, [r7, #28]
   1a4ec:	0018      	movs	r0, r3
   1a4ee:	4bb8      	ldr	r3, [pc, #736]	; (1a7d0 <xQueueSemaphoreTake+0x374>)
   1a4f0:	4798      	blx	r3
   1a4f2:	0003      	movs	r3, r0
   1a4f4:	001a      	movs	r2, r3
   1a4f6:	4bb7      	ldr	r3, [pc, #732]	; (1a7d4 <xQueueSemaphoreTake+0x378>)
   1a4f8:	5c9b      	ldrb	r3, [r3, r2]
   1a4fa:	3328      	adds	r3, #40	; 0x28
   1a4fc:	b2db      	uxtb	r3, r3
   1a4fe:	001d      	movs	r5, r3
   1a500:	69fb      	ldr	r3, [r7, #28]
   1a502:	0018      	movs	r0, r3
   1a504:	4bb2      	ldr	r3, [pc, #712]	; (1a7d0 <xQueueSemaphoreTake+0x374>)
   1a506:	4798      	blx	r3
   1a508:	0003      	movs	r3, r0
   1a50a:	001a      	movs	r2, r3
   1a50c:	4bb1      	ldr	r3, [pc, #708]	; (1a7d4 <xQueueSemaphoreTake+0x378>)
   1a50e:	5c9c      	ldrb	r4, [r3, r2]
   1a510:	69fb      	ldr	r3, [r7, #28]
   1a512:	0018      	movs	r0, r3
   1a514:	4bb0      	ldr	r3, [pc, #704]	; (1a7d8 <xQueueSemaphoreTake+0x37c>)
   1a516:	4798      	blx	r3
   1a518:	0003      	movs	r3, r0
   1a51a:	b2db      	uxtb	r3, r3
   1a51c:	001a      	movs	r2, r3
   1a51e:	0021      	movs	r1, r4
   1a520:	0028      	movs	r0, r5
   1a522:	4bae      	ldr	r3, [pc, #696]	; (1a7dc <xQueueSemaphoreTake+0x380>)
   1a524:	4798      	blx	r3
   1a526:	69fb      	ldr	r3, [r7, #28]
   1a528:	0018      	movs	r0, r3
   1a52a:	4ba9      	ldr	r3, [pc, #676]	; (1a7d0 <xQueueSemaphoreTake+0x374>)
   1a52c:	4798      	blx	r3
   1a52e:	0003      	movs	r3, r0
   1a530:	001a      	movs	r2, r3
   1a532:	4ba8      	ldr	r3, [pc, #672]	; (1a7d4 <xQueueSemaphoreTake+0x378>)
   1a534:	5c9c      	ldrb	r4, [r3, r2]
   1a536:	69fb      	ldr	r3, [r7, #28]
   1a538:	0018      	movs	r0, r3
   1a53a:	4ba7      	ldr	r3, [pc, #668]	; (1a7d8 <xQueueSemaphoreTake+0x37c>)
   1a53c:	4798      	blx	r3
   1a53e:	0003      	movs	r3, r0
   1a540:	b2dd      	uxtb	r5, r3
   1a542:	69fb      	ldr	r3, [r7, #28]
   1a544:	0018      	movs	r0, r3
   1a546:	4ba2      	ldr	r3, [pc, #648]	; (1a7d0 <xQueueSemaphoreTake+0x374>)
   1a548:	4798      	blx	r3
   1a54a:	0003      	movs	r3, r0
   1a54c:	001a      	movs	r2, r3
   1a54e:	4ba1      	ldr	r3, [pc, #644]	; (1a7d4 <xQueueSemaphoreTake+0x378>)
   1a550:	5c9b      	ldrb	r3, [r3, r2]
   1a552:	2b02      	cmp	r3, #2
   1a554:	d108      	bne.n	1a568 <xQueueSemaphoreTake+0x10c>
   1a556:	4b9a      	ldr	r3, [pc, #616]	; (1a7c0 <xQueueSemaphoreTake+0x364>)
   1a558:	4798      	blx	r3
   1a55a:	0003      	movs	r3, r0
   1a55c:	0018      	movs	r0, r3
   1a55e:	4ba0      	ldr	r3, [pc, #640]	; (1a7e0 <xQueueSemaphoreTake+0x384>)
   1a560:	4798      	blx	r3
   1a562:	0003      	movs	r3, r0
   1a564:	b2db      	uxtb	r3, r3
   1a566:	e004      	b.n	1a572 <xQueueSemaphoreTake+0x116>
   1a568:	69fb      	ldr	r3, [r7, #28]
   1a56a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a56c:	b2db      	uxtb	r3, r3
   1a56e:	3b01      	subs	r3, #1
   1a570:	b2db      	uxtb	r3, r3
   1a572:	001a      	movs	r2, r3
   1a574:	0029      	movs	r1, r5
   1a576:	0020      	movs	r0, r4
   1a578:	4b9a      	ldr	r3, [pc, #616]	; (1a7e4 <xQueueSemaphoreTake+0x388>)
   1a57a:	4798      	blx	r3

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   1a57c:	69bb      	ldr	r3, [r7, #24]
   1a57e:	1e5a      	subs	r2, r3, #1
   1a580:	69fb      	ldr	r3, [r7, #28]
   1a582:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1a584:	69fb      	ldr	r3, [r7, #28]
   1a586:	681b      	ldr	r3, [r3, #0]
   1a588:	2b00      	cmp	r3, #0
   1a58a:	d104      	bne.n	1a596 <xQueueSemaphoreTake+0x13a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   1a58c:	4b96      	ldr	r3, [pc, #600]	; (1a7e8 <xQueueSemaphoreTake+0x38c>)
   1a58e:	4798      	blx	r3
   1a590:	0002      	movs	r2, r0
   1a592:	69fb      	ldr	r3, [r7, #28]
   1a594:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1a596:	69fb      	ldr	r3, [r7, #28]
   1a598:	691b      	ldr	r3, [r3, #16]
   1a59a:	2b00      	cmp	r3, #0
   1a59c:	d008      	beq.n	1a5b0 <xQueueSemaphoreTake+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1a59e:	69fb      	ldr	r3, [r7, #28]
   1a5a0:	3310      	adds	r3, #16
   1a5a2:	0018      	movs	r0, r3
   1a5a4:	4b91      	ldr	r3, [pc, #580]	; (1a7ec <xQueueSemaphoreTake+0x390>)
   1a5a6:	4798      	blx	r3
   1a5a8:	1e03      	subs	r3, r0, #0
   1a5aa:	d001      	beq.n	1a5b0 <xQueueSemaphoreTake+0x154>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1a5ac:	4b90      	ldr	r3, [pc, #576]	; (1a7f0 <xQueueSemaphoreTake+0x394>)
   1a5ae:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1a5b0:	4b90      	ldr	r3, [pc, #576]	; (1a7f4 <xQueueSemaphoreTake+0x398>)
   1a5b2:	4798      	blx	r3
				return pdPASS;
   1a5b4:	2301      	movs	r3, #1
   1a5b6:	e18b      	b.n	1a8d0 <xQueueSemaphoreTake+0x474>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1a5b8:	683b      	ldr	r3, [r7, #0]
   1a5ba:	2b00      	cmp	r3, #0
   1a5bc:	d140      	bne.n	1a640 <xQueueSemaphoreTake+0x1e4>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
   1a5be:	6a3b      	ldr	r3, [r7, #32]
   1a5c0:	2b00      	cmp	r3, #0
   1a5c2:	d001      	beq.n	1a5c8 <xQueueSemaphoreTake+0x16c>
   1a5c4:	b672      	cpsid	i
   1a5c6:	e7fe      	b.n	1a5c6 <xQueueSemaphoreTake+0x16a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
   1a5c8:	4b8a      	ldr	r3, [pc, #552]	; (1a7f4 <xQueueSemaphoreTake+0x398>)
   1a5ca:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1a5cc:	4b7c      	ldr	r3, [pc, #496]	; (1a7c0 <xQueueSemaphoreTake+0x364>)
   1a5ce:	4798      	blx	r3
   1a5d0:	0003      	movs	r3, r0
   1a5d2:	0018      	movs	r0, r3
   1a5d4:	4b7b      	ldr	r3, [pc, #492]	; (1a7c4 <xQueueSemaphoreTake+0x368>)
   1a5d6:	4798      	blx	r3
   1a5d8:	0003      	movs	r3, r0
   1a5da:	001a      	movs	r2, r3
   1a5dc:	4b7a      	ldr	r3, [pc, #488]	; (1a7c8 <xQueueSemaphoreTake+0x36c>)
   1a5de:	881b      	ldrh	r3, [r3, #0]
   1a5e0:	4013      	ands	r3, r2
   1a5e2:	b29b      	uxth	r3, r3
   1a5e4:	2b00      	cmp	r3, #0
   1a5e6:	d029      	beq.n	1a63c <xQueueSemaphoreTake+0x1e0>
   1a5e8:	69fb      	ldr	r3, [r7, #28]
   1a5ea:	0018      	movs	r0, r3
   1a5ec:	4b77      	ldr	r3, [pc, #476]	; (1a7cc <xQueueSemaphoreTake+0x370>)
   1a5ee:	4798      	blx	r3
   1a5f0:	0003      	movs	r3, r0
   1a5f2:	001a      	movs	r2, r3
   1a5f4:	4b74      	ldr	r3, [pc, #464]	; (1a7c8 <xQueueSemaphoreTake+0x36c>)
   1a5f6:	881b      	ldrh	r3, [r3, #0]
   1a5f8:	4013      	ands	r3, r2
   1a5fa:	b29b      	uxth	r3, r3
   1a5fc:	2b00      	cmp	r3, #0
   1a5fe:	d01d      	beq.n	1a63c <xQueueSemaphoreTake+0x1e0>
   1a600:	69fb      	ldr	r3, [r7, #28]
   1a602:	0018      	movs	r0, r3
   1a604:	4b72      	ldr	r3, [pc, #456]	; (1a7d0 <xQueueSemaphoreTake+0x374>)
   1a606:	4798      	blx	r3
   1a608:	0003      	movs	r3, r0
   1a60a:	001a      	movs	r2, r3
   1a60c:	4b71      	ldr	r3, [pc, #452]	; (1a7d4 <xQueueSemaphoreTake+0x378>)
   1a60e:	5c9b      	ldrb	r3, [r3, r2]
   1a610:	3350      	adds	r3, #80	; 0x50
   1a612:	b2db      	uxtb	r3, r3
   1a614:	001d      	movs	r5, r3
   1a616:	69fb      	ldr	r3, [r7, #28]
   1a618:	0018      	movs	r0, r3
   1a61a:	4b6d      	ldr	r3, [pc, #436]	; (1a7d0 <xQueueSemaphoreTake+0x374>)
   1a61c:	4798      	blx	r3
   1a61e:	0003      	movs	r3, r0
   1a620:	001a      	movs	r2, r3
   1a622:	4b6c      	ldr	r3, [pc, #432]	; (1a7d4 <xQueueSemaphoreTake+0x378>)
   1a624:	5c9c      	ldrb	r4, [r3, r2]
   1a626:	69fb      	ldr	r3, [r7, #28]
   1a628:	0018      	movs	r0, r3
   1a62a:	4b6b      	ldr	r3, [pc, #428]	; (1a7d8 <xQueueSemaphoreTake+0x37c>)
   1a62c:	4798      	blx	r3
   1a62e:	0003      	movs	r3, r0
   1a630:	b2db      	uxtb	r3, r3
   1a632:	001a      	movs	r2, r3
   1a634:	0021      	movs	r1, r4
   1a636:	0028      	movs	r0, r5
   1a638:	4b68      	ldr	r3, [pc, #416]	; (1a7dc <xQueueSemaphoreTake+0x380>)
   1a63a:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1a63c:	2300      	movs	r3, #0
   1a63e:	e147      	b.n	1a8d0 <xQueueSemaphoreTake+0x474>
				}
				else if( xEntryTimeSet == pdFALSE )
   1a640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a642:	2b00      	cmp	r3, #0
   1a644:	d106      	bne.n	1a654 <xQueueSemaphoreTake+0x1f8>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1a646:	230c      	movs	r3, #12
   1a648:	18fb      	adds	r3, r7, r3
   1a64a:	0018      	movs	r0, r3
   1a64c:	4b6a      	ldr	r3, [pc, #424]	; (1a7f8 <xQueueSemaphoreTake+0x39c>)
   1a64e:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1a650:	2301      	movs	r3, #1
   1a652:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1a654:	4b67      	ldr	r3, [pc, #412]	; (1a7f4 <xQueueSemaphoreTake+0x398>)
   1a656:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
   1a658:	4b68      	ldr	r3, [pc, #416]	; (1a7fc <xQueueSemaphoreTake+0x3a0>)
   1a65a:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1a65c:	4b57      	ldr	r3, [pc, #348]	; (1a7bc <xQueueSemaphoreTake+0x360>)
   1a65e:	4798      	blx	r3
   1a660:	69fb      	ldr	r3, [r7, #28]
   1a662:	2244      	movs	r2, #68	; 0x44
   1a664:	5c9b      	ldrb	r3, [r3, r2]
   1a666:	b25b      	sxtb	r3, r3
   1a668:	3301      	adds	r3, #1
   1a66a:	d103      	bne.n	1a674 <xQueueSemaphoreTake+0x218>
   1a66c:	69fb      	ldr	r3, [r7, #28]
   1a66e:	2244      	movs	r2, #68	; 0x44
   1a670:	2100      	movs	r1, #0
   1a672:	5499      	strb	r1, [r3, r2]
   1a674:	69fb      	ldr	r3, [r7, #28]
   1a676:	2245      	movs	r2, #69	; 0x45
   1a678:	5c9b      	ldrb	r3, [r3, r2]
   1a67a:	b25b      	sxtb	r3, r3
   1a67c:	3301      	adds	r3, #1
   1a67e:	d103      	bne.n	1a688 <xQueueSemaphoreTake+0x22c>
   1a680:	69fb      	ldr	r3, [r7, #28]
   1a682:	2245      	movs	r2, #69	; 0x45
   1a684:	2100      	movs	r1, #0
   1a686:	5499      	strb	r1, [r3, r2]
   1a688:	4b5a      	ldr	r3, [pc, #360]	; (1a7f4 <xQueueSemaphoreTake+0x398>)
   1a68a:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1a68c:	003a      	movs	r2, r7
   1a68e:	230c      	movs	r3, #12
   1a690:	18fb      	adds	r3, r7, r3
   1a692:	0011      	movs	r1, r2
   1a694:	0018      	movs	r0, r3
   1a696:	4b5a      	ldr	r3, [pc, #360]	; (1a800 <xQueueSemaphoreTake+0x3a4>)
   1a698:	4798      	blx	r3
   1a69a:	1e03      	subs	r3, r0, #0
   1a69c:	d000      	beq.n	1a6a0 <xQueueSemaphoreTake+0x244>
   1a69e:	e0bd      	b.n	1a81c <xQueueSemaphoreTake+0x3c0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1a6a0:	69fb      	ldr	r3, [r7, #28]
   1a6a2:	0018      	movs	r0, r3
   1a6a4:	4b57      	ldr	r3, [pc, #348]	; (1a804 <xQueueSemaphoreTake+0x3a8>)
   1a6a6:	4798      	blx	r3
   1a6a8:	1e03      	subs	r3, r0, #0
   1a6aa:	d100      	bne.n	1a6ae <xQueueSemaphoreTake+0x252>
   1a6ac:	e07c      	b.n	1a7a8 <xQueueSemaphoreTake+0x34c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1a6ae:	4b44      	ldr	r3, [pc, #272]	; (1a7c0 <xQueueSemaphoreTake+0x364>)
   1a6b0:	4798      	blx	r3
   1a6b2:	0003      	movs	r3, r0
   1a6b4:	0018      	movs	r0, r3
   1a6b6:	4b43      	ldr	r3, [pc, #268]	; (1a7c4 <xQueueSemaphoreTake+0x368>)
   1a6b8:	4798      	blx	r3
   1a6ba:	0003      	movs	r3, r0
   1a6bc:	001a      	movs	r2, r3
   1a6be:	4b42      	ldr	r3, [pc, #264]	; (1a7c8 <xQueueSemaphoreTake+0x36c>)
   1a6c0:	881b      	ldrh	r3, [r3, #0]
   1a6c2:	4013      	ands	r3, r2
   1a6c4:	b29b      	uxth	r3, r3
   1a6c6:	2b00      	cmp	r3, #0
   1a6c8:	d029      	beq.n	1a71e <xQueueSemaphoreTake+0x2c2>
   1a6ca:	69fb      	ldr	r3, [r7, #28]
   1a6cc:	0018      	movs	r0, r3
   1a6ce:	4b3f      	ldr	r3, [pc, #252]	; (1a7cc <xQueueSemaphoreTake+0x370>)
   1a6d0:	4798      	blx	r3
   1a6d2:	0003      	movs	r3, r0
   1a6d4:	001a      	movs	r2, r3
   1a6d6:	4b3c      	ldr	r3, [pc, #240]	; (1a7c8 <xQueueSemaphoreTake+0x36c>)
   1a6d8:	881b      	ldrh	r3, [r3, #0]
   1a6da:	4013      	ands	r3, r2
   1a6dc:	b29b      	uxth	r3, r3
   1a6de:	2b00      	cmp	r3, #0
   1a6e0:	d01d      	beq.n	1a71e <xQueueSemaphoreTake+0x2c2>
   1a6e2:	69fb      	ldr	r3, [r7, #28]
   1a6e4:	0018      	movs	r0, r3
   1a6e6:	4b3a      	ldr	r3, [pc, #232]	; (1a7d0 <xQueueSemaphoreTake+0x374>)
   1a6e8:	4798      	blx	r3
   1a6ea:	0003      	movs	r3, r0
   1a6ec:	001a      	movs	r2, r3
   1a6ee:	4b39      	ldr	r3, [pc, #228]	; (1a7d4 <xQueueSemaphoreTake+0x378>)
   1a6f0:	5c9b      	ldrb	r3, [r3, r2]
   1a6f2:	3368      	adds	r3, #104	; 0x68
   1a6f4:	b2db      	uxtb	r3, r3
   1a6f6:	001d      	movs	r5, r3
   1a6f8:	69fb      	ldr	r3, [r7, #28]
   1a6fa:	0018      	movs	r0, r3
   1a6fc:	4b34      	ldr	r3, [pc, #208]	; (1a7d0 <xQueueSemaphoreTake+0x374>)
   1a6fe:	4798      	blx	r3
   1a700:	0003      	movs	r3, r0
   1a702:	001a      	movs	r2, r3
   1a704:	4b33      	ldr	r3, [pc, #204]	; (1a7d4 <xQueueSemaphoreTake+0x378>)
   1a706:	5c9c      	ldrb	r4, [r3, r2]
   1a708:	69fb      	ldr	r3, [r7, #28]
   1a70a:	0018      	movs	r0, r3
   1a70c:	4b32      	ldr	r3, [pc, #200]	; (1a7d8 <xQueueSemaphoreTake+0x37c>)
   1a70e:	4798      	blx	r3
   1a710:	0003      	movs	r3, r0
   1a712:	b2db      	uxtb	r3, r3
   1a714:	001a      	movs	r2, r3
   1a716:	0021      	movs	r1, r4
   1a718:	0028      	movs	r0, r5
   1a71a:	4b30      	ldr	r3, [pc, #192]	; (1a7dc <xQueueSemaphoreTake+0x380>)
   1a71c:	4798      	blx	r3
   1a71e:	69fb      	ldr	r3, [r7, #28]
   1a720:	0018      	movs	r0, r3
   1a722:	4b2b      	ldr	r3, [pc, #172]	; (1a7d0 <xQueueSemaphoreTake+0x374>)
   1a724:	4798      	blx	r3
   1a726:	0003      	movs	r3, r0
   1a728:	001a      	movs	r2, r3
   1a72a:	4b2a      	ldr	r3, [pc, #168]	; (1a7d4 <xQueueSemaphoreTake+0x378>)
   1a72c:	5c9b      	ldrb	r3, [r3, r2]
   1a72e:	2b02      	cmp	r3, #2
   1a730:	d018      	beq.n	1a764 <xQueueSemaphoreTake+0x308>
   1a732:	4b23      	ldr	r3, [pc, #140]	; (1a7c0 <xQueueSemaphoreTake+0x364>)
   1a734:	4798      	blx	r3
   1a736:	0003      	movs	r3, r0
   1a738:	0018      	movs	r0, r3
   1a73a:	4b22      	ldr	r3, [pc, #136]	; (1a7c4 <xQueueSemaphoreTake+0x368>)
   1a73c:	4798      	blx	r3
   1a73e:	0003      	movs	r3, r0
   1a740:	001a      	movs	r2, r3
   1a742:	4b21      	ldr	r3, [pc, #132]	; (1a7c8 <xQueueSemaphoreTake+0x36c>)
   1a744:	881b      	ldrh	r3, [r3, #0]
   1a746:	4013      	ands	r3, r2
   1a748:	b29b      	uxth	r3, r3
   1a74a:	2b00      	cmp	r3, #0
   1a74c:	d00a      	beq.n	1a764 <xQueueSemaphoreTake+0x308>
   1a74e:	4b1c      	ldr	r3, [pc, #112]	; (1a7c0 <xQueueSemaphoreTake+0x364>)
   1a750:	4798      	blx	r3
   1a752:	0003      	movs	r3, r0
   1a754:	0018      	movs	r0, r3
   1a756:	4b22      	ldr	r3, [pc, #136]	; (1a7e0 <xQueueSemaphoreTake+0x384>)
   1a758:	4798      	blx	r3
   1a75a:	0003      	movs	r3, r0
   1a75c:	b2db      	uxtb	r3, r3
   1a75e:	0018      	movs	r0, r3
   1a760:	4b29      	ldr	r3, [pc, #164]	; (1a808 <xQueueSemaphoreTake+0x3ac>)
   1a762:	4798      	blx	r3

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1a764:	69fb      	ldr	r3, [r7, #28]
   1a766:	681b      	ldr	r3, [r3, #0]
   1a768:	2b00      	cmp	r3, #0
   1a76a:	d10a      	bne.n	1a782 <xQueueSemaphoreTake+0x326>
					{
						taskENTER_CRITICAL();
   1a76c:	4b13      	ldr	r3, [pc, #76]	; (1a7bc <xQueueSemaphoreTake+0x360>)
   1a76e:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   1a770:	69fb      	ldr	r3, [r7, #28]
   1a772:	685b      	ldr	r3, [r3, #4]
   1a774:	0018      	movs	r0, r3
   1a776:	4b25      	ldr	r3, [pc, #148]	; (1a80c <xQueueSemaphoreTake+0x3b0>)
   1a778:	4798      	blx	r3
   1a77a:	0003      	movs	r3, r0
   1a77c:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
   1a77e:	4b1d      	ldr	r3, [pc, #116]	; (1a7f4 <xQueueSemaphoreTake+0x398>)
   1a780:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1a782:	69fb      	ldr	r3, [r7, #28]
   1a784:	3324      	adds	r3, #36	; 0x24
   1a786:	683a      	ldr	r2, [r7, #0]
   1a788:	0011      	movs	r1, r2
   1a78a:	0018      	movs	r0, r3
   1a78c:	4b20      	ldr	r3, [pc, #128]	; (1a810 <xQueueSemaphoreTake+0x3b4>)
   1a78e:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1a790:	69fb      	ldr	r3, [r7, #28]
   1a792:	0018      	movs	r0, r3
   1a794:	4b1f      	ldr	r3, [pc, #124]	; (1a814 <xQueueSemaphoreTake+0x3b8>)
   1a796:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1a798:	4b1f      	ldr	r3, [pc, #124]	; (1a818 <xQueueSemaphoreTake+0x3bc>)
   1a79a:	4798      	blx	r3
   1a79c:	1e03      	subs	r3, r0, #0
   1a79e:	d000      	beq.n	1a7a2 <xQueueSemaphoreTake+0x346>
   1a7a0:	e680      	b.n	1a4a4 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
   1a7a2:	4b13      	ldr	r3, [pc, #76]	; (1a7f0 <xQueueSemaphoreTake+0x394>)
   1a7a4:	4798      	blx	r3
   1a7a6:	e67d      	b.n	1a4a4 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
   1a7a8:	69fb      	ldr	r3, [r7, #28]
   1a7aa:	0018      	movs	r0, r3
   1a7ac:	4b19      	ldr	r3, [pc, #100]	; (1a814 <xQueueSemaphoreTake+0x3b8>)
   1a7ae:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1a7b0:	4b19      	ldr	r3, [pc, #100]	; (1a818 <xQueueSemaphoreTake+0x3bc>)
   1a7b2:	4798      	blx	r3
   1a7b4:	e676      	b.n	1a4a4 <xQueueSemaphoreTake+0x48>
   1a7b6:	46c0      	nop			; (mov r8, r8)
   1a7b8:	0001bed9 	.word	0x0001bed9
   1a7bc:	000191b9 	.word	0x000191b9
   1a7c0:	00017455 	.word	0x00017455
   1a7c4:	000171b9 	.word	0x000171b9
   1a7c8:	20000100 	.word	0x20000100
   1a7cc:	00017279 	.word	0x00017279
   1a7d0:	00017179 	.word	0x00017179
   1a7d4:	200000f4 	.word	0x200000f4
   1a7d8:	00017259 	.word	0x00017259
   1a7dc:	00017bb1 	.word	0x00017bb1
   1a7e0:	00017199 	.word	0x00017199
   1a7e4:	0001820d 	.word	0x0001820d
   1a7e8:	0001c3a5 	.word	0x0001c3a5
   1a7ec:	0001ba49 	.word	0x0001ba49
   1a7f0:	000191a1 	.word	0x000191a1
   1a7f4:	000191dd 	.word	0x000191dd
   1a7f8:	0001bb89 	.word	0x0001bb89
   1a7fc:	0001b471 	.word	0x0001b471
   1a800:	0001bbb1 	.word	0x0001bbb1
   1a804:	0001aba5 	.word	0x0001aba5
   1a808:	00018349 	.word	0x00018349
   1a80c:	0001bf11 	.word	0x0001bf11
   1a810:	0001b925 	.word	0x0001b925
   1a814:	0001aab5 	.word	0x0001aab5
   1a818:	0001b489 	.word	0x0001b489
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
   1a81c:	69fb      	ldr	r3, [r7, #28]
   1a81e:	0018      	movs	r0, r3
   1a820:	4b2d      	ldr	r3, [pc, #180]	; (1a8d8 <xQueueSemaphoreTake+0x47c>)
   1a822:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1a824:	4b2d      	ldr	r3, [pc, #180]	; (1a8dc <xQueueSemaphoreTake+0x480>)
   1a826:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1a828:	69fb      	ldr	r3, [r7, #28]
   1a82a:	0018      	movs	r0, r3
   1a82c:	4b2c      	ldr	r3, [pc, #176]	; (1a8e0 <xQueueSemaphoreTake+0x484>)
   1a82e:	4798      	blx	r3
   1a830:	1e03      	subs	r3, r0, #0
   1a832:	d100      	bne.n	1a836 <xQueueSemaphoreTake+0x3da>
   1a834:	e636      	b.n	1a4a4 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
   1a836:	6a3b      	ldr	r3, [r7, #32]
   1a838:	2b00      	cmp	r3, #0
   1a83a:	d010      	beq.n	1a85e <xQueueSemaphoreTake+0x402>
					{
						taskENTER_CRITICAL();
   1a83c:	4b29      	ldr	r3, [pc, #164]	; (1a8e4 <xQueueSemaphoreTake+0x488>)
   1a83e:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
   1a840:	69fb      	ldr	r3, [r7, #28]
   1a842:	0018      	movs	r0, r3
   1a844:	4b28      	ldr	r3, [pc, #160]	; (1a8e8 <xQueueSemaphoreTake+0x48c>)
   1a846:	4798      	blx	r3
   1a848:	0003      	movs	r3, r0
   1a84a:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   1a84c:	69fb      	ldr	r3, [r7, #28]
   1a84e:	685b      	ldr	r3, [r3, #4]
   1a850:	697a      	ldr	r2, [r7, #20]
   1a852:	0011      	movs	r1, r2
   1a854:	0018      	movs	r0, r3
   1a856:	4b25      	ldr	r3, [pc, #148]	; (1a8ec <xQueueSemaphoreTake+0x490>)
   1a858:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   1a85a:	4b25      	ldr	r3, [pc, #148]	; (1a8f0 <xQueueSemaphoreTake+0x494>)
   1a85c:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1a85e:	4b25      	ldr	r3, [pc, #148]	; (1a8f4 <xQueueSemaphoreTake+0x498>)
   1a860:	4798      	blx	r3
   1a862:	0003      	movs	r3, r0
   1a864:	0018      	movs	r0, r3
   1a866:	4b24      	ldr	r3, [pc, #144]	; (1a8f8 <xQueueSemaphoreTake+0x49c>)
   1a868:	4798      	blx	r3
   1a86a:	0003      	movs	r3, r0
   1a86c:	001a      	movs	r2, r3
   1a86e:	4b23      	ldr	r3, [pc, #140]	; (1a8fc <xQueueSemaphoreTake+0x4a0>)
   1a870:	881b      	ldrh	r3, [r3, #0]
   1a872:	4013      	ands	r3, r2
   1a874:	b29b      	uxth	r3, r3
   1a876:	2b00      	cmp	r3, #0
   1a878:	d029      	beq.n	1a8ce <xQueueSemaphoreTake+0x472>
   1a87a:	69fb      	ldr	r3, [r7, #28]
   1a87c:	0018      	movs	r0, r3
   1a87e:	4b20      	ldr	r3, [pc, #128]	; (1a900 <xQueueSemaphoreTake+0x4a4>)
   1a880:	4798      	blx	r3
   1a882:	0003      	movs	r3, r0
   1a884:	001a      	movs	r2, r3
   1a886:	4b1d      	ldr	r3, [pc, #116]	; (1a8fc <xQueueSemaphoreTake+0x4a0>)
   1a888:	881b      	ldrh	r3, [r3, #0]
   1a88a:	4013      	ands	r3, r2
   1a88c:	b29b      	uxth	r3, r3
   1a88e:	2b00      	cmp	r3, #0
   1a890:	d01d      	beq.n	1a8ce <xQueueSemaphoreTake+0x472>
   1a892:	69fb      	ldr	r3, [r7, #28]
   1a894:	0018      	movs	r0, r3
   1a896:	4b1b      	ldr	r3, [pc, #108]	; (1a904 <xQueueSemaphoreTake+0x4a8>)
   1a898:	4798      	blx	r3
   1a89a:	0003      	movs	r3, r0
   1a89c:	001a      	movs	r2, r3
   1a89e:	4b1a      	ldr	r3, [pc, #104]	; (1a908 <xQueueSemaphoreTake+0x4ac>)
   1a8a0:	5c9b      	ldrb	r3, [r3, r2]
   1a8a2:	3350      	adds	r3, #80	; 0x50
   1a8a4:	b2db      	uxtb	r3, r3
   1a8a6:	001d      	movs	r5, r3
   1a8a8:	69fb      	ldr	r3, [r7, #28]
   1a8aa:	0018      	movs	r0, r3
   1a8ac:	4b15      	ldr	r3, [pc, #84]	; (1a904 <xQueueSemaphoreTake+0x4a8>)
   1a8ae:	4798      	blx	r3
   1a8b0:	0003      	movs	r3, r0
   1a8b2:	001a      	movs	r2, r3
   1a8b4:	4b14      	ldr	r3, [pc, #80]	; (1a908 <xQueueSemaphoreTake+0x4ac>)
   1a8b6:	5c9c      	ldrb	r4, [r3, r2]
   1a8b8:	69fb      	ldr	r3, [r7, #28]
   1a8ba:	0018      	movs	r0, r3
   1a8bc:	4b13      	ldr	r3, [pc, #76]	; (1a90c <xQueueSemaphoreTake+0x4b0>)
   1a8be:	4798      	blx	r3
   1a8c0:	0003      	movs	r3, r0
   1a8c2:	b2db      	uxtb	r3, r3
   1a8c4:	001a      	movs	r2, r3
   1a8c6:	0021      	movs	r1, r4
   1a8c8:	0028      	movs	r0, r5
   1a8ca:	4b11      	ldr	r3, [pc, #68]	; (1a910 <xQueueSemaphoreTake+0x4b4>)
   1a8cc:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1a8ce:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1a8d0:	0018      	movs	r0, r3
   1a8d2:	46bd      	mov	sp, r7
   1a8d4:	b00a      	add	sp, #40	; 0x28
   1a8d6:	bdb0      	pop	{r4, r5, r7, pc}
   1a8d8:	0001aab5 	.word	0x0001aab5
   1a8dc:	0001b489 	.word	0x0001b489
   1a8e0:	0001aba5 	.word	0x0001aba5
   1a8e4:	000191b9 	.word	0x000191b9
   1a8e8:	0001a957 	.word	0x0001a957
   1a8ec:	0001c209 	.word	0x0001c209
   1a8f0:	000191dd 	.word	0x000191dd
   1a8f4:	00017455 	.word	0x00017455
   1a8f8:	000171b9 	.word	0x000171b9
   1a8fc:	20000100 	.word	0x20000100
   1a900:	00017279 	.word	0x00017279
   1a904:	00017179 	.word	0x00017179
   1a908:	200000f4 	.word	0x200000f4
   1a90c:	00017259 	.word	0x00017259
   1a910:	00017bb1 	.word	0x00017bb1

0001a914 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
   1a914:	b580      	push	{r7, lr}
   1a916:	b082      	sub	sp, #8
   1a918:	af00      	add	r7, sp, #0
   1a91a:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
   1a91c:	687b      	ldr	r3, [r7, #4]
   1a91e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	}
   1a920:	0018      	movs	r0, r3
   1a922:	46bd      	mov	sp, r7
   1a924:	b002      	add	sp, #8
   1a926:	bd80      	pop	{r7, pc}

0001a928 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
   1a928:	b580      	push	{r7, lr}
   1a92a:	b082      	sub	sp, #8
   1a92c:	af00      	add	r7, sp, #0
   1a92e:	6078      	str	r0, [r7, #4]
   1a930:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
   1a932:	687b      	ldr	r3, [r7, #4]
   1a934:	683a      	ldr	r2, [r7, #0]
   1a936:	64da      	str	r2, [r3, #76]	; 0x4c
	}
   1a938:	46c0      	nop			; (mov r8, r8)
   1a93a:	46bd      	mov	sp, r7
   1a93c:	b002      	add	sp, #8
   1a93e:	bd80      	pop	{r7, pc}

0001a940 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
   1a940:	b580      	push	{r7, lr}
   1a942:	b082      	sub	sp, #8
   1a944:	af00      	add	r7, sp, #0
   1a946:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
   1a948:	687b      	ldr	r3, [r7, #4]
   1a94a:	2250      	movs	r2, #80	; 0x50
   1a94c:	5c9b      	ldrb	r3, [r3, r2]
	}
   1a94e:	0018      	movs	r0, r3
   1a950:	46bd      	mov	sp, r7
   1a952:	b002      	add	sp, #8
   1a954:	bd80      	pop	{r7, pc}

0001a956 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
   1a956:	b580      	push	{r7, lr}
   1a958:	b084      	sub	sp, #16
   1a95a:	af00      	add	r7, sp, #0
   1a95c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   1a95e:	687b      	ldr	r3, [r7, #4]
   1a960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a962:	2b00      	cmp	r3, #0
   1a964:	d006      	beq.n	1a974 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   1a966:	687b      	ldr	r3, [r7, #4]
   1a968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1a96a:	681b      	ldr	r3, [r3, #0]
   1a96c:	2205      	movs	r2, #5
   1a96e:	1ad3      	subs	r3, r2, r3
   1a970:	60fb      	str	r3, [r7, #12]
   1a972:	e001      	b.n	1a978 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   1a974:	2300      	movs	r3, #0
   1a976:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
   1a978:	68fb      	ldr	r3, [r7, #12]
	}
   1a97a:	0018      	movs	r0, r3
   1a97c:	46bd      	mov	sp, r7
   1a97e:	b004      	add	sp, #16
   1a980:	bd80      	pop	{r7, pc}
	...

0001a984 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   1a984:	b580      	push	{r7, lr}
   1a986:	b086      	sub	sp, #24
   1a988:	af00      	add	r7, sp, #0
   1a98a:	60f8      	str	r0, [r7, #12]
   1a98c:	60b9      	str	r1, [r7, #8]
   1a98e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   1a990:	2300      	movs	r3, #0
   1a992:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1a994:	68fb      	ldr	r3, [r7, #12]
   1a996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a998:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1a99a:	68fb      	ldr	r3, [r7, #12]
   1a99c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a99e:	2b00      	cmp	r3, #0
   1a9a0:	d10e      	bne.n	1a9c0 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1a9a2:	68fb      	ldr	r3, [r7, #12]
   1a9a4:	681b      	ldr	r3, [r3, #0]
   1a9a6:	2b00      	cmp	r3, #0
   1a9a8:	d14e      	bne.n	1aa48 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   1a9aa:	68fb      	ldr	r3, [r7, #12]
   1a9ac:	685b      	ldr	r3, [r3, #4]
   1a9ae:	0018      	movs	r0, r3
   1a9b0:	4b2a      	ldr	r3, [pc, #168]	; (1aa5c <prvCopyDataToQueue+0xd8>)
   1a9b2:	4798      	blx	r3
   1a9b4:	0003      	movs	r3, r0
   1a9b6:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   1a9b8:	68fb      	ldr	r3, [r7, #12]
   1a9ba:	2200      	movs	r2, #0
   1a9bc:	605a      	str	r2, [r3, #4]
   1a9be:	e043      	b.n	1aa48 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   1a9c0:	687b      	ldr	r3, [r7, #4]
   1a9c2:	2b00      	cmp	r3, #0
   1a9c4:	d119      	bne.n	1a9fa <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   1a9c6:	68fb      	ldr	r3, [r7, #12]
   1a9c8:	6898      	ldr	r0, [r3, #8]
   1a9ca:	68fb      	ldr	r3, [r7, #12]
   1a9cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1a9ce:	68bb      	ldr	r3, [r7, #8]
   1a9d0:	0019      	movs	r1, r3
   1a9d2:	4b23      	ldr	r3, [pc, #140]	; (1aa60 <prvCopyDataToQueue+0xdc>)
   1a9d4:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   1a9d6:	68fb      	ldr	r3, [r7, #12]
   1a9d8:	689a      	ldr	r2, [r3, #8]
   1a9da:	68fb      	ldr	r3, [r7, #12]
   1a9dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a9de:	18d2      	adds	r2, r2, r3
   1a9e0:	68fb      	ldr	r3, [r7, #12]
   1a9e2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1a9e4:	68fb      	ldr	r3, [r7, #12]
   1a9e6:	689a      	ldr	r2, [r3, #8]
   1a9e8:	68fb      	ldr	r3, [r7, #12]
   1a9ea:	685b      	ldr	r3, [r3, #4]
   1a9ec:	429a      	cmp	r2, r3
   1a9ee:	d32b      	bcc.n	1aa48 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1a9f0:	68fb      	ldr	r3, [r7, #12]
   1a9f2:	681a      	ldr	r2, [r3, #0]
   1a9f4:	68fb      	ldr	r3, [r7, #12]
   1a9f6:	609a      	str	r2, [r3, #8]
   1a9f8:	e026      	b.n	1aa48 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1a9fa:	68fb      	ldr	r3, [r7, #12]
   1a9fc:	68d8      	ldr	r0, [r3, #12]
   1a9fe:	68fb      	ldr	r3, [r7, #12]
   1aa00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1aa02:	68bb      	ldr	r3, [r7, #8]
   1aa04:	0019      	movs	r1, r3
   1aa06:	4b16      	ldr	r3, [pc, #88]	; (1aa60 <prvCopyDataToQueue+0xdc>)
   1aa08:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   1aa0a:	68fb      	ldr	r3, [r7, #12]
   1aa0c:	68da      	ldr	r2, [r3, #12]
   1aa0e:	68fb      	ldr	r3, [r7, #12]
   1aa10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1aa12:	425b      	negs	r3, r3
   1aa14:	18d2      	adds	r2, r2, r3
   1aa16:	68fb      	ldr	r3, [r7, #12]
   1aa18:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1aa1a:	68fb      	ldr	r3, [r7, #12]
   1aa1c:	68da      	ldr	r2, [r3, #12]
   1aa1e:	68fb      	ldr	r3, [r7, #12]
   1aa20:	681b      	ldr	r3, [r3, #0]
   1aa22:	429a      	cmp	r2, r3
   1aa24:	d207      	bcs.n	1aa36 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   1aa26:	68fb      	ldr	r3, [r7, #12]
   1aa28:	685a      	ldr	r2, [r3, #4]
   1aa2a:	68fb      	ldr	r3, [r7, #12]
   1aa2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1aa2e:	425b      	negs	r3, r3
   1aa30:	18d2      	adds	r2, r2, r3
   1aa32:	68fb      	ldr	r3, [r7, #12]
   1aa34:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   1aa36:	687b      	ldr	r3, [r7, #4]
   1aa38:	2b02      	cmp	r3, #2
   1aa3a:	d105      	bne.n	1aa48 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1aa3c:	693b      	ldr	r3, [r7, #16]
   1aa3e:	2b00      	cmp	r3, #0
   1aa40:	d002      	beq.n	1aa48 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   1aa42:	693b      	ldr	r3, [r7, #16]
   1aa44:	3b01      	subs	r3, #1
   1aa46:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1aa48:	693b      	ldr	r3, [r7, #16]
   1aa4a:	1c5a      	adds	r2, r3, #1
   1aa4c:	68fb      	ldr	r3, [r7, #12]
   1aa4e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   1aa50:	697b      	ldr	r3, [r7, #20]
}
   1aa52:	0018      	movs	r0, r3
   1aa54:	46bd      	mov	sp, r7
   1aa56:	b006      	add	sp, #24
   1aa58:	bd80      	pop	{r7, pc}
   1aa5a:	46c0      	nop			; (mov r8, r8)
   1aa5c:	0001c0a1 	.word	0x0001c0a1
   1aa60:	000345a9 	.word	0x000345a9

0001aa64 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   1aa64:	b580      	push	{r7, lr}
   1aa66:	b082      	sub	sp, #8
   1aa68:	af00      	add	r7, sp, #0
   1aa6a:	6078      	str	r0, [r7, #4]
   1aa6c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   1aa6e:	687b      	ldr	r3, [r7, #4]
   1aa70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1aa72:	2b00      	cmp	r3, #0
   1aa74:	d018      	beq.n	1aaa8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   1aa76:	687b      	ldr	r3, [r7, #4]
   1aa78:	68da      	ldr	r2, [r3, #12]
   1aa7a:	687b      	ldr	r3, [r7, #4]
   1aa7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1aa7e:	18d2      	adds	r2, r2, r3
   1aa80:	687b      	ldr	r3, [r7, #4]
   1aa82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   1aa84:	687b      	ldr	r3, [r7, #4]
   1aa86:	68da      	ldr	r2, [r3, #12]
   1aa88:	687b      	ldr	r3, [r7, #4]
   1aa8a:	685b      	ldr	r3, [r3, #4]
   1aa8c:	429a      	cmp	r2, r3
   1aa8e:	d303      	bcc.n	1aa98 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   1aa90:	687b      	ldr	r3, [r7, #4]
   1aa92:	681a      	ldr	r2, [r3, #0]
   1aa94:	687b      	ldr	r3, [r7, #4]
   1aa96:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   1aa98:	687b      	ldr	r3, [r7, #4]
   1aa9a:	68d9      	ldr	r1, [r3, #12]
   1aa9c:	687b      	ldr	r3, [r7, #4]
   1aa9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1aaa0:	683b      	ldr	r3, [r7, #0]
   1aaa2:	0018      	movs	r0, r3
   1aaa4:	4b02      	ldr	r3, [pc, #8]	; (1aab0 <prvCopyDataFromQueue+0x4c>)
   1aaa6:	4798      	blx	r3
	}
}
   1aaa8:	46c0      	nop			; (mov r8, r8)
   1aaaa:	46bd      	mov	sp, r7
   1aaac:	b002      	add	sp, #8
   1aaae:	bd80      	pop	{r7, pc}
   1aab0:	000345a9 	.word	0x000345a9

0001aab4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   1aab4:	b580      	push	{r7, lr}
   1aab6:	b084      	sub	sp, #16
   1aab8:	af00      	add	r7, sp, #0
   1aaba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   1aabc:	4b34      	ldr	r3, [pc, #208]	; (1ab90 <prvUnlockQueue+0xdc>)
   1aabe:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
   1aac0:	230f      	movs	r3, #15
   1aac2:	18fb      	adds	r3, r7, r3
   1aac4:	687a      	ldr	r2, [r7, #4]
   1aac6:	2145      	movs	r1, #69	; 0x45
   1aac8:	5c52      	ldrb	r2, [r2, r1]
   1aaca:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1aacc:	e022      	b.n	1ab14 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
   1aace:	687b      	ldr	r3, [r7, #4]
   1aad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1aad2:	2b00      	cmp	r3, #0
   1aad4:	d009      	beq.n	1aaea <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1aad6:	687b      	ldr	r3, [r7, #4]
   1aad8:	2100      	movs	r1, #0
   1aada:	0018      	movs	r0, r3
   1aadc:	4b2d      	ldr	r3, [pc, #180]	; (1ab94 <prvUnlockQueue+0xe0>)
   1aade:	4798      	blx	r3
   1aae0:	1e03      	subs	r3, r0, #0
   1aae2:	d00f      	beq.n	1ab04 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
   1aae4:	4b2c      	ldr	r3, [pc, #176]	; (1ab98 <prvUnlockQueue+0xe4>)
   1aae6:	4798      	blx	r3
   1aae8:	e00c      	b.n	1ab04 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1aaea:	687b      	ldr	r3, [r7, #4]
   1aaec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1aaee:	2b00      	cmp	r3, #0
   1aaf0:	d017      	beq.n	1ab22 <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1aaf2:	687b      	ldr	r3, [r7, #4]
   1aaf4:	3324      	adds	r3, #36	; 0x24
   1aaf6:	0018      	movs	r0, r3
   1aaf8:	4b28      	ldr	r3, [pc, #160]	; (1ab9c <prvUnlockQueue+0xe8>)
   1aafa:	4798      	blx	r3
   1aafc:	1e03      	subs	r3, r0, #0
   1aafe:	d001      	beq.n	1ab04 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
   1ab00:	4b25      	ldr	r3, [pc, #148]	; (1ab98 <prvUnlockQueue+0xe4>)
   1ab02:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   1ab04:	230f      	movs	r3, #15
   1ab06:	18fb      	adds	r3, r7, r3
   1ab08:	781b      	ldrb	r3, [r3, #0]
   1ab0a:	3b01      	subs	r3, #1
   1ab0c:	b2da      	uxtb	r2, r3
   1ab0e:	230f      	movs	r3, #15
   1ab10:	18fb      	adds	r3, r7, r3
   1ab12:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1ab14:	230f      	movs	r3, #15
   1ab16:	18fb      	adds	r3, r7, r3
   1ab18:	781b      	ldrb	r3, [r3, #0]
   1ab1a:	b25b      	sxtb	r3, r3
   1ab1c:	2b00      	cmp	r3, #0
   1ab1e:	dcd6      	bgt.n	1aace <prvUnlockQueue+0x1a>
   1ab20:	e000      	b.n	1ab24 <prvUnlockQueue+0x70>
						break;
   1ab22:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
   1ab24:	687b      	ldr	r3, [r7, #4]
   1ab26:	2245      	movs	r2, #69	; 0x45
   1ab28:	21ff      	movs	r1, #255	; 0xff
   1ab2a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1ab2c:	4b1c      	ldr	r3, [pc, #112]	; (1aba0 <prvUnlockQueue+0xec>)
   1ab2e:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   1ab30:	4b17      	ldr	r3, [pc, #92]	; (1ab90 <prvUnlockQueue+0xdc>)
   1ab32:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
   1ab34:	230e      	movs	r3, #14
   1ab36:	18fb      	adds	r3, r7, r3
   1ab38:	687a      	ldr	r2, [r7, #4]
   1ab3a:	2144      	movs	r1, #68	; 0x44
   1ab3c:	5c52      	ldrb	r2, [r2, r1]
   1ab3e:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   1ab40:	e014      	b.n	1ab6c <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1ab42:	687b      	ldr	r3, [r7, #4]
   1ab44:	691b      	ldr	r3, [r3, #16]
   1ab46:	2b00      	cmp	r3, #0
   1ab48:	d017      	beq.n	1ab7a <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1ab4a:	687b      	ldr	r3, [r7, #4]
   1ab4c:	3310      	adds	r3, #16
   1ab4e:	0018      	movs	r0, r3
   1ab50:	4b12      	ldr	r3, [pc, #72]	; (1ab9c <prvUnlockQueue+0xe8>)
   1ab52:	4798      	blx	r3
   1ab54:	1e03      	subs	r3, r0, #0
   1ab56:	d001      	beq.n	1ab5c <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
   1ab58:	4b0f      	ldr	r3, [pc, #60]	; (1ab98 <prvUnlockQueue+0xe4>)
   1ab5a:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   1ab5c:	230e      	movs	r3, #14
   1ab5e:	18fb      	adds	r3, r7, r3
   1ab60:	781b      	ldrb	r3, [r3, #0]
   1ab62:	3b01      	subs	r3, #1
   1ab64:	b2da      	uxtb	r2, r3
   1ab66:	230e      	movs	r3, #14
   1ab68:	18fb      	adds	r3, r7, r3
   1ab6a:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1ab6c:	230e      	movs	r3, #14
   1ab6e:	18fb      	adds	r3, r7, r3
   1ab70:	781b      	ldrb	r3, [r3, #0]
   1ab72:	b25b      	sxtb	r3, r3
   1ab74:	2b00      	cmp	r3, #0
   1ab76:	dce4      	bgt.n	1ab42 <prvUnlockQueue+0x8e>
   1ab78:	e000      	b.n	1ab7c <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
   1ab7a:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   1ab7c:	687b      	ldr	r3, [r7, #4]
   1ab7e:	2244      	movs	r2, #68	; 0x44
   1ab80:	21ff      	movs	r1, #255	; 0xff
   1ab82:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1ab84:	4b06      	ldr	r3, [pc, #24]	; (1aba0 <prvUnlockQueue+0xec>)
   1ab86:	4798      	blx	r3
}
   1ab88:	46c0      	nop			; (mov r8, r8)
   1ab8a:	46bd      	mov	sp, r7
   1ab8c:	b004      	add	sp, #16
   1ab8e:	bd80      	pop	{r7, pc}
   1ab90:	000191b9 	.word	0x000191b9
   1ab94:	0001ac89 	.word	0x0001ac89
   1ab98:	0001bc5d 	.word	0x0001bc5d
   1ab9c:	0001ba49 	.word	0x0001ba49
   1aba0:	000191dd 	.word	0x000191dd

0001aba4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   1aba4:	b580      	push	{r7, lr}
   1aba6:	b084      	sub	sp, #16
   1aba8:	af00      	add	r7, sp, #0
   1abaa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1abac:	4b08      	ldr	r3, [pc, #32]	; (1abd0 <prvIsQueueEmpty+0x2c>)
   1abae:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   1abb0:	687b      	ldr	r3, [r7, #4]
   1abb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1abb4:	2b00      	cmp	r3, #0
   1abb6:	d102      	bne.n	1abbe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   1abb8:	2301      	movs	r3, #1
   1abba:	60fb      	str	r3, [r7, #12]
   1abbc:	e001      	b.n	1abc2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   1abbe:	2300      	movs	r3, #0
   1abc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1abc2:	4b04      	ldr	r3, [pc, #16]	; (1abd4 <prvIsQueueEmpty+0x30>)
   1abc4:	4798      	blx	r3

	return xReturn;
   1abc6:	68fb      	ldr	r3, [r7, #12]
}
   1abc8:	0018      	movs	r0, r3
   1abca:	46bd      	mov	sp, r7
   1abcc:	b004      	add	sp, #16
   1abce:	bd80      	pop	{r7, pc}
   1abd0:	000191b9 	.word	0x000191b9
   1abd4:	000191dd 	.word	0x000191dd

0001abd8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   1abd8:	b580      	push	{r7, lr}
   1abda:	b084      	sub	sp, #16
   1abdc:	af00      	add	r7, sp, #0
   1abde:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1abe0:	4b09      	ldr	r3, [pc, #36]	; (1ac08 <prvIsQueueFull+0x30>)
   1abe2:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   1abe4:	687b      	ldr	r3, [r7, #4]
   1abe6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1abe8:	687b      	ldr	r3, [r7, #4]
   1abea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1abec:	429a      	cmp	r2, r3
   1abee:	d102      	bne.n	1abf6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   1abf0:	2301      	movs	r3, #1
   1abf2:	60fb      	str	r3, [r7, #12]
   1abf4:	e001      	b.n	1abfa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   1abf6:	2300      	movs	r3, #0
   1abf8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1abfa:	4b04      	ldr	r3, [pc, #16]	; (1ac0c <prvIsQueueFull+0x34>)
   1abfc:	4798      	blx	r3

	return xReturn;
   1abfe:	68fb      	ldr	r3, [r7, #12]
}
   1ac00:	0018      	movs	r0, r3
   1ac02:	46bd      	mov	sp, r7
   1ac04:	b004      	add	sp, #16
   1ac06:	bd80      	pop	{r7, pc}
   1ac08:	000191b9 	.word	0x000191b9
   1ac0c:	000191dd 	.word	0x000191dd

0001ac10 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1ac10:	b580      	push	{r7, lr}
   1ac12:	b086      	sub	sp, #24
   1ac14:	af00      	add	r7, sp, #0
   1ac16:	60f8      	str	r0, [r7, #12]
   1ac18:	60b9      	str	r1, [r7, #8]
   1ac1a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1ac1c:	68fb      	ldr	r3, [r7, #12]
   1ac1e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   1ac20:	4b15      	ldr	r3, [pc, #84]	; (1ac78 <vQueueWaitForMessageRestricted+0x68>)
   1ac22:	4798      	blx	r3
   1ac24:	697b      	ldr	r3, [r7, #20]
   1ac26:	2244      	movs	r2, #68	; 0x44
   1ac28:	5c9b      	ldrb	r3, [r3, r2]
   1ac2a:	b25b      	sxtb	r3, r3
   1ac2c:	3301      	adds	r3, #1
   1ac2e:	d103      	bne.n	1ac38 <vQueueWaitForMessageRestricted+0x28>
   1ac30:	697b      	ldr	r3, [r7, #20]
   1ac32:	2244      	movs	r2, #68	; 0x44
   1ac34:	2100      	movs	r1, #0
   1ac36:	5499      	strb	r1, [r3, r2]
   1ac38:	697b      	ldr	r3, [r7, #20]
   1ac3a:	2245      	movs	r2, #69	; 0x45
   1ac3c:	5c9b      	ldrb	r3, [r3, r2]
   1ac3e:	b25b      	sxtb	r3, r3
   1ac40:	3301      	adds	r3, #1
   1ac42:	d103      	bne.n	1ac4c <vQueueWaitForMessageRestricted+0x3c>
   1ac44:	697b      	ldr	r3, [r7, #20]
   1ac46:	2245      	movs	r2, #69	; 0x45
   1ac48:	2100      	movs	r1, #0
   1ac4a:	5499      	strb	r1, [r3, r2]
   1ac4c:	4b0b      	ldr	r3, [pc, #44]	; (1ac7c <vQueueWaitForMessageRestricted+0x6c>)
   1ac4e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   1ac50:	697b      	ldr	r3, [r7, #20]
   1ac52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1ac54:	2b00      	cmp	r3, #0
   1ac56:	d106      	bne.n	1ac66 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   1ac58:	697b      	ldr	r3, [r7, #20]
   1ac5a:	3324      	adds	r3, #36	; 0x24
   1ac5c:	687a      	ldr	r2, [r7, #4]
   1ac5e:	68b9      	ldr	r1, [r7, #8]
   1ac60:	0018      	movs	r0, r3
   1ac62:	4b07      	ldr	r3, [pc, #28]	; (1ac80 <vQueueWaitForMessageRestricted+0x70>)
   1ac64:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   1ac66:	697b      	ldr	r3, [r7, #20]
   1ac68:	0018      	movs	r0, r3
   1ac6a:	4b06      	ldr	r3, [pc, #24]	; (1ac84 <vQueueWaitForMessageRestricted+0x74>)
   1ac6c:	4798      	blx	r3
	}
   1ac6e:	46c0      	nop			; (mov r8, r8)
   1ac70:	46bd      	mov	sp, r7
   1ac72:	b006      	add	sp, #24
   1ac74:	bd80      	pop	{r7, pc}
   1ac76:	46c0      	nop			; (mov r8, r8)
   1ac78:	000191b9 	.word	0x000191b9
   1ac7c:	000191dd 	.word	0x000191dd
   1ac80:	0001b969 	.word	0x0001b969
   1ac84:	0001aab5 	.word	0x0001aab5

0001ac88 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
   1ac88:	b5b0      	push	{r4, r5, r7, lr}
   1ac8a:	b086      	sub	sp, #24
   1ac8c:	af00      	add	r7, sp, #0
   1ac8e:	6078      	str	r0, [r7, #4]
   1ac90:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
   1ac92:	687b      	ldr	r3, [r7, #4]
   1ac94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1ac96:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
   1ac98:	2300      	movs	r3, #0
   1ac9a:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
   1ac9c:	693b      	ldr	r3, [r7, #16]
   1ac9e:	2b00      	cmp	r3, #0
   1aca0:	d101      	bne.n	1aca6 <prvNotifyQueueSetContainer+0x1e>
   1aca2:	b672      	cpsid	i
   1aca4:	e7fe      	b.n	1aca4 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
   1aca6:	693b      	ldr	r3, [r7, #16]
   1aca8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1acaa:	693b      	ldr	r3, [r7, #16]
   1acac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1acae:	429a      	cmp	r2, r3
   1acb0:	d301      	bcc.n	1acb6 <prvNotifyQueueSetContainer+0x2e>
   1acb2:	b672      	cpsid	i
   1acb4:	e7fe      	b.n	1acb4 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   1acb6:	693b      	ldr	r3, [r7, #16]
   1acb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1acba:	693b      	ldr	r3, [r7, #16]
   1acbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1acbe:	429a      	cmp	r2, r3
   1acc0:	d300      	bcc.n	1acc4 <prvNotifyQueueSetContainer+0x3c>
   1acc2:	e08b      	b.n	1addc <prvNotifyQueueSetContainer+0x154>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
   1acc4:	230f      	movs	r3, #15
   1acc6:	18fb      	adds	r3, r7, r3
   1acc8:	693a      	ldr	r2, [r7, #16]
   1acca:	2145      	movs	r1, #69	; 0x45
   1accc:	5c52      	ldrb	r2, [r2, r1]
   1acce:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );
   1acd0:	4b45      	ldr	r3, [pc, #276]	; (1ade8 <prvNotifyQueueSetContainer+0x160>)
   1acd2:	4798      	blx	r3
   1acd4:	0003      	movs	r3, r0
   1acd6:	0018      	movs	r0, r3
   1acd8:	4b44      	ldr	r3, [pc, #272]	; (1adec <prvNotifyQueueSetContainer+0x164>)
   1acda:	4798      	blx	r3
   1acdc:	0003      	movs	r3, r0
   1acde:	001a      	movs	r2, r3
   1ace0:	4b43      	ldr	r3, [pc, #268]	; (1adf0 <prvNotifyQueueSetContainer+0x168>)
   1ace2:	881b      	ldrh	r3, [r3, #0]
   1ace4:	4013      	ands	r3, r2
   1ace6:	b29b      	uxth	r3, r3
   1ace8:	2b00      	cmp	r3, #0
   1acea:	d02e      	beq.n	1ad4a <prvNotifyQueueSetContainer+0xc2>
   1acec:	693b      	ldr	r3, [r7, #16]
   1acee:	0018      	movs	r0, r3
   1acf0:	4b40      	ldr	r3, [pc, #256]	; (1adf4 <prvNotifyQueueSetContainer+0x16c>)
   1acf2:	4798      	blx	r3
   1acf4:	0003      	movs	r3, r0
   1acf6:	001a      	movs	r2, r3
   1acf8:	4b3d      	ldr	r3, [pc, #244]	; (1adf0 <prvNotifyQueueSetContainer+0x168>)
   1acfa:	881b      	ldrh	r3, [r3, #0]
   1acfc:	4013      	ands	r3, r2
   1acfe:	b29b      	uxth	r3, r3
   1ad00:	2b00      	cmp	r3, #0
   1ad02:	d022      	beq.n	1ad4a <prvNotifyQueueSetContainer+0xc2>
   1ad04:	683b      	ldr	r3, [r7, #0]
   1ad06:	2b00      	cmp	r3, #0
   1ad08:	d10b      	bne.n	1ad22 <prvNotifyQueueSetContainer+0x9a>
   1ad0a:	693b      	ldr	r3, [r7, #16]
   1ad0c:	0018      	movs	r0, r3
   1ad0e:	4b3a      	ldr	r3, [pc, #232]	; (1adf8 <prvNotifyQueueSetContainer+0x170>)
   1ad10:	4798      	blx	r3
   1ad12:	0003      	movs	r3, r0
   1ad14:	001a      	movs	r2, r3
   1ad16:	4b39      	ldr	r3, [pc, #228]	; (1adfc <prvNotifyQueueSetContainer+0x174>)
   1ad18:	5c9b      	ldrb	r3, [r3, r2]
   1ad1a:	3320      	adds	r3, #32
   1ad1c:	b2db      	uxtb	r3, r3
   1ad1e:	001d      	movs	r5, r3
   1ad20:	e000      	b.n	1ad24 <prvNotifyQueueSetContainer+0x9c>
   1ad22:	2525      	movs	r5, #37	; 0x25
   1ad24:	693b      	ldr	r3, [r7, #16]
   1ad26:	0018      	movs	r0, r3
   1ad28:	4b33      	ldr	r3, [pc, #204]	; (1adf8 <prvNotifyQueueSetContainer+0x170>)
   1ad2a:	4798      	blx	r3
   1ad2c:	0003      	movs	r3, r0
   1ad2e:	001a      	movs	r2, r3
   1ad30:	4b32      	ldr	r3, [pc, #200]	; (1adfc <prvNotifyQueueSetContainer+0x174>)
   1ad32:	5c9c      	ldrb	r4, [r3, r2]
   1ad34:	693b      	ldr	r3, [r7, #16]
   1ad36:	0018      	movs	r0, r3
   1ad38:	4b31      	ldr	r3, [pc, #196]	; (1ae00 <prvNotifyQueueSetContainer+0x178>)
   1ad3a:	4798      	blx	r3
   1ad3c:	0003      	movs	r3, r0
   1ad3e:	b2db      	uxtb	r3, r3
   1ad40:	001a      	movs	r2, r3
   1ad42:	0021      	movs	r1, r4
   1ad44:	0028      	movs	r0, r5
   1ad46:	4b2f      	ldr	r3, [pc, #188]	; (1ae04 <prvNotifyQueueSetContainer+0x17c>)
   1ad48:	4798      	blx	r3
   1ad4a:	693b      	ldr	r3, [r7, #16]
   1ad4c:	0018      	movs	r0, r3
   1ad4e:	4b2a      	ldr	r3, [pc, #168]	; (1adf8 <prvNotifyQueueSetContainer+0x170>)
   1ad50:	4798      	blx	r3
   1ad52:	0003      	movs	r3, r0
   1ad54:	001a      	movs	r2, r3
   1ad56:	4b29      	ldr	r3, [pc, #164]	; (1adfc <prvNotifyQueueSetContainer+0x174>)
   1ad58:	5c9c      	ldrb	r4, [r3, r2]
   1ad5a:	693b      	ldr	r3, [r7, #16]
   1ad5c:	0018      	movs	r0, r3
   1ad5e:	4b28      	ldr	r3, [pc, #160]	; (1ae00 <prvNotifyQueueSetContainer+0x178>)
   1ad60:	4798      	blx	r3
   1ad62:	0003      	movs	r3, r0
   1ad64:	b2dd      	uxtb	r5, r3
   1ad66:	693b      	ldr	r3, [r7, #16]
   1ad68:	0018      	movs	r0, r3
   1ad6a:	4b23      	ldr	r3, [pc, #140]	; (1adf8 <prvNotifyQueueSetContainer+0x170>)
   1ad6c:	4798      	blx	r3
   1ad6e:	0003      	movs	r3, r0
   1ad70:	001a      	movs	r2, r3
   1ad72:	4b22      	ldr	r3, [pc, #136]	; (1adfc <prvNotifyQueueSetContainer+0x174>)
   1ad74:	5c9b      	ldrb	r3, [r3, r2]
   1ad76:	2b02      	cmp	r3, #2
   1ad78:	d005      	beq.n	1ad86 <prvNotifyQueueSetContainer+0xfe>
   1ad7a:	693b      	ldr	r3, [r7, #16]
   1ad7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1ad7e:	b2db      	uxtb	r3, r3
   1ad80:	3301      	adds	r3, #1
   1ad82:	b2db      	uxtb	r3, r3
   1ad84:	e000      	b.n	1ad88 <prvNotifyQueueSetContainer+0x100>
   1ad86:	2300      	movs	r3, #0
   1ad88:	001a      	movs	r2, r3
   1ad8a:	0029      	movs	r1, r5
   1ad8c:	0020      	movs	r0, r4
   1ad8e:	4b1e      	ldr	r3, [pc, #120]	; (1ae08 <prvNotifyQueueSetContainer+0x180>)
   1ad90:	4798      	blx	r3

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
   1ad92:	683a      	ldr	r2, [r7, #0]
   1ad94:	1d39      	adds	r1, r7, #4
   1ad96:	693b      	ldr	r3, [r7, #16]
   1ad98:	0018      	movs	r0, r3
   1ad9a:	4b1c      	ldr	r3, [pc, #112]	; (1ae0c <prvNotifyQueueSetContainer+0x184>)
   1ad9c:	4798      	blx	r3
   1ad9e:	0003      	movs	r3, r0
   1ada0:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
   1ada2:	230f      	movs	r3, #15
   1ada4:	18fb      	adds	r3, r7, r3
   1ada6:	781b      	ldrb	r3, [r3, #0]
   1ada8:	b25b      	sxtb	r3, r3
   1adaa:	3301      	adds	r3, #1
   1adac:	d10d      	bne.n	1adca <prvNotifyQueueSetContainer+0x142>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
   1adae:	693b      	ldr	r3, [r7, #16]
   1adb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1adb2:	2b00      	cmp	r3, #0
   1adb4:	d012      	beq.n	1addc <prvNotifyQueueSetContainer+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
   1adb6:	693b      	ldr	r3, [r7, #16]
   1adb8:	3324      	adds	r3, #36	; 0x24
   1adba:	0018      	movs	r0, r3
   1adbc:	4b14      	ldr	r3, [pc, #80]	; (1ae10 <prvNotifyQueueSetContainer+0x188>)
   1adbe:	4798      	blx	r3
   1adc0:	1e03      	subs	r3, r0, #0
   1adc2:	d00b      	beq.n	1addc <prvNotifyQueueSetContainer+0x154>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
   1adc4:	2301      	movs	r3, #1
   1adc6:	617b      	str	r3, [r7, #20]
   1adc8:	e008      	b.n	1addc <prvNotifyQueueSetContainer+0x154>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1adca:	230f      	movs	r3, #15
   1adcc:	18fb      	adds	r3, r7, r3
   1adce:	781b      	ldrb	r3, [r3, #0]
   1add0:	3301      	adds	r3, #1
   1add2:	b2db      	uxtb	r3, r3
   1add4:	b259      	sxtb	r1, r3
   1add6:	693b      	ldr	r3, [r7, #16]
   1add8:	2245      	movs	r2, #69	; 0x45
   1adda:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1addc:	697b      	ldr	r3, [r7, #20]
	}
   1adde:	0018      	movs	r0, r3
   1ade0:	46bd      	mov	sp, r7
   1ade2:	b006      	add	sp, #24
   1ade4:	bdb0      	pop	{r4, r5, r7, pc}
   1ade6:	46c0      	nop			; (mov r8, r8)
   1ade8:	00017455 	.word	0x00017455
   1adec:	000171b9 	.word	0x000171b9
   1adf0:	20000100 	.word	0x20000100
   1adf4:	00017279 	.word	0x00017279
   1adf8:	00017179 	.word	0x00017179
   1adfc:	200000f4 	.word	0x200000f4
   1ae00:	00017259 	.word	0x00017259
   1ae04:	00017bb1 	.word	0x00017bb1
   1ae08:	0001820d 	.word	0x0001820d
   1ae0c:	0001a985 	.word	0x0001a985
   1ae10:	0001ba49 	.word	0x0001ba49

0001ae14 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   1ae14:	b590      	push	{r4, r7, lr}
   1ae16:	b08d      	sub	sp, #52	; 0x34
   1ae18:	af04      	add	r7, sp, #16
   1ae1a:	60f8      	str	r0, [r7, #12]
   1ae1c:	60b9      	str	r1, [r7, #8]
   1ae1e:	603b      	str	r3, [r7, #0]
   1ae20:	1dbb      	adds	r3, r7, #6
   1ae22:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1ae24:	1dbb      	adds	r3, r7, #6
   1ae26:	881b      	ldrh	r3, [r3, #0]
   1ae28:	009b      	lsls	r3, r3, #2
   1ae2a:	0018      	movs	r0, r3
   1ae2c:	4b1d      	ldr	r3, [pc, #116]	; (1aea4 <xTaskCreate+0x90>)
   1ae2e:	4798      	blx	r3
   1ae30:	0003      	movs	r3, r0
   1ae32:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
   1ae34:	697b      	ldr	r3, [r7, #20]
   1ae36:	2b00      	cmp	r3, #0
   1ae38:	d010      	beq.n	1ae5c <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   1ae3a:	2054      	movs	r0, #84	; 0x54
   1ae3c:	4b19      	ldr	r3, [pc, #100]	; (1aea4 <xTaskCreate+0x90>)
   1ae3e:	4798      	blx	r3
   1ae40:	0003      	movs	r3, r0
   1ae42:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
   1ae44:	69fb      	ldr	r3, [r7, #28]
   1ae46:	2b00      	cmp	r3, #0
   1ae48:	d003      	beq.n	1ae52 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   1ae4a:	69fb      	ldr	r3, [r7, #28]
   1ae4c:	697a      	ldr	r2, [r7, #20]
   1ae4e:	631a      	str	r2, [r3, #48]	; 0x30
   1ae50:	e006      	b.n	1ae60 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   1ae52:	697b      	ldr	r3, [r7, #20]
   1ae54:	0018      	movs	r0, r3
   1ae56:	4b14      	ldr	r3, [pc, #80]	; (1aea8 <xTaskCreate+0x94>)
   1ae58:	4798      	blx	r3
   1ae5a:	e001      	b.n	1ae60 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
   1ae5c:	2300      	movs	r3, #0
   1ae5e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   1ae60:	69fb      	ldr	r3, [r7, #28]
   1ae62:	2b00      	cmp	r3, #0
   1ae64:	d016      	beq.n	1ae94 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   1ae66:	1dbb      	adds	r3, r7, #6
   1ae68:	881a      	ldrh	r2, [r3, #0]
   1ae6a:	683c      	ldr	r4, [r7, #0]
   1ae6c:	68b9      	ldr	r1, [r7, #8]
   1ae6e:	68f8      	ldr	r0, [r7, #12]
   1ae70:	2300      	movs	r3, #0
   1ae72:	9303      	str	r3, [sp, #12]
   1ae74:	69fb      	ldr	r3, [r7, #28]
   1ae76:	9302      	str	r3, [sp, #8]
   1ae78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1ae7a:	9301      	str	r3, [sp, #4]
   1ae7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1ae7e:	9300      	str	r3, [sp, #0]
   1ae80:	0023      	movs	r3, r4
   1ae82:	4c0a      	ldr	r4, [pc, #40]	; (1aeac <xTaskCreate+0x98>)
   1ae84:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
   1ae86:	69fb      	ldr	r3, [r7, #28]
   1ae88:	0018      	movs	r0, r3
   1ae8a:	4b09      	ldr	r3, [pc, #36]	; (1aeb0 <xTaskCreate+0x9c>)
   1ae8c:	4798      	blx	r3
			xReturn = pdPASS;
   1ae8e:	2301      	movs	r3, #1
   1ae90:	61bb      	str	r3, [r7, #24]
   1ae92:	e002      	b.n	1ae9a <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   1ae94:	2301      	movs	r3, #1
   1ae96:	425b      	negs	r3, r3
   1ae98:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
   1ae9a:	69bb      	ldr	r3, [r7, #24]
	}
   1ae9c:	0018      	movs	r0, r3
   1ae9e:	46bd      	mov	sp, r7
   1aea0:	b009      	add	sp, #36	; 0x24
   1aea2:	bd90      	pop	{r4, r7, pc}
   1aea4:	000192f1 	.word	0x000192f1
   1aea8:	000193b5 	.word	0x000193b5
   1aeac:	0001aeb5 	.word	0x0001aeb5
   1aeb0:	0001afc5 	.word	0x0001afc5

0001aeb4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   1aeb4:	b580      	push	{r7, lr}
   1aeb6:	b086      	sub	sp, #24
   1aeb8:	af00      	add	r7, sp, #0
   1aeba:	60f8      	str	r0, [r7, #12]
   1aebc:	60b9      	str	r1, [r7, #8]
   1aebe:	607a      	str	r2, [r7, #4]
   1aec0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   1aec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1aec4:	6b18      	ldr	r0, [r3, #48]	; 0x30
   1aec6:	687b      	ldr	r3, [r7, #4]
   1aec8:	009b      	lsls	r3, r3, #2
   1aeca:	001a      	movs	r2, r3
   1aecc:	21a5      	movs	r1, #165	; 0xa5
   1aece:	4b39      	ldr	r3, [pc, #228]	; (1afb4 <prvInitialiseNewTask+0x100>)
   1aed0:	4798      	blx	r3
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   1aed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1aed4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1aed6:	687b      	ldr	r3, [r7, #4]
   1aed8:	4937      	ldr	r1, [pc, #220]	; (1afb8 <prvInitialiseNewTask+0x104>)
   1aeda:	468c      	mov	ip, r1
   1aedc:	4463      	add	r3, ip
   1aede:	009b      	lsls	r3, r3, #2
   1aee0:	18d3      	adds	r3, r2, r3
   1aee2:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   1aee4:	693b      	ldr	r3, [r7, #16]
   1aee6:	2207      	movs	r2, #7
   1aee8:	4393      	bics	r3, r2
   1aeea:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   1aeec:	693b      	ldr	r3, [r7, #16]
   1aeee:	2207      	movs	r2, #7
   1aef0:	4013      	ands	r3, r2
   1aef2:	d001      	beq.n	1aef8 <prvInitialiseNewTask+0x44>
   1aef4:	b672      	cpsid	i
   1aef6:	e7fe      	b.n	1aef6 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1aef8:	2300      	movs	r3, #0
   1aefa:	617b      	str	r3, [r7, #20]
   1aefc:	e013      	b.n	1af26 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1aefe:	68ba      	ldr	r2, [r7, #8]
   1af00:	697b      	ldr	r3, [r7, #20]
   1af02:	18d3      	adds	r3, r2, r3
   1af04:	7818      	ldrb	r0, [r3, #0]
   1af06:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1af08:	2134      	movs	r1, #52	; 0x34
   1af0a:	697b      	ldr	r3, [r7, #20]
   1af0c:	18d3      	adds	r3, r2, r3
   1af0e:	185b      	adds	r3, r3, r1
   1af10:	1c02      	adds	r2, r0, #0
   1af12:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   1af14:	68ba      	ldr	r2, [r7, #8]
   1af16:	697b      	ldr	r3, [r7, #20]
   1af18:	18d3      	adds	r3, r2, r3
   1af1a:	781b      	ldrb	r3, [r3, #0]
   1af1c:	2b00      	cmp	r3, #0
   1af1e:	d006      	beq.n	1af2e <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1af20:	697b      	ldr	r3, [r7, #20]
   1af22:	3301      	adds	r3, #1
   1af24:	617b      	str	r3, [r7, #20]
   1af26:	697b      	ldr	r3, [r7, #20]
   1af28:	2b07      	cmp	r3, #7
   1af2a:	d9e8      	bls.n	1aefe <prvInitialiseNewTask+0x4a>
   1af2c:	e000      	b.n	1af30 <prvInitialiseNewTask+0x7c>
		{
			break;
   1af2e:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   1af30:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1af32:	223b      	movs	r2, #59	; 0x3b
   1af34:	2100      	movs	r1, #0
   1af36:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   1af38:	6a3b      	ldr	r3, [r7, #32]
   1af3a:	2b04      	cmp	r3, #4
   1af3c:	d901      	bls.n	1af42 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   1af3e:	2304      	movs	r3, #4
   1af40:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   1af42:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1af44:	6a3a      	ldr	r2, [r7, #32]
   1af46:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
   1af48:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1af4a:	6a3a      	ldr	r2, [r7, #32]
   1af4c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
   1af4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1af50:	2200      	movs	r2, #0
   1af52:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1af54:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1af56:	3304      	adds	r3, #4
   1af58:	0018      	movs	r0, r3
   1af5a:	4b18      	ldr	r3, [pc, #96]	; (1afbc <prvInitialiseNewTask+0x108>)
   1af5c:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   1af5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1af60:	3318      	adds	r3, #24
   1af62:	0018      	movs	r0, r3
   1af64:	4b15      	ldr	r3, [pc, #84]	; (1afbc <prvInitialiseNewTask+0x108>)
   1af66:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   1af68:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1af6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1af6c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1af6e:	6a3b      	ldr	r3, [r7, #32]
   1af70:	2205      	movs	r2, #5
   1af72:	1ad2      	subs	r2, r2, r3
   1af74:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1af76:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   1af78:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1af7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1af7c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   1af7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1af80:	2200      	movs	r2, #0
   1af82:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1af84:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1af86:	2250      	movs	r2, #80	; 0x50
   1af88:	2100      	movs	r1, #0
   1af8a:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1af8c:	683a      	ldr	r2, [r7, #0]
   1af8e:	68f9      	ldr	r1, [r7, #12]
   1af90:	693b      	ldr	r3, [r7, #16]
   1af92:	0018      	movs	r0, r3
   1af94:	4b0a      	ldr	r3, [pc, #40]	; (1afc0 <prvInitialiseNewTask+0x10c>)
   1af96:	4798      	blx	r3
   1af98:	0002      	movs	r2, r0
   1af9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1af9c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
   1af9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1afa0:	2b00      	cmp	r3, #0
   1afa2:	d002      	beq.n	1afaa <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   1afa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1afa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1afa8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1afaa:	46c0      	nop			; (mov r8, r8)
   1afac:	46bd      	mov	sp, r7
   1afae:	b006      	add	sp, #24
   1afb0:	bd80      	pop	{r7, pc}
   1afb2:	46c0      	nop			; (mov r8, r8)
   1afb4:	000345df 	.word	0x000345df
   1afb8:	3fffffff 	.word	0x3fffffff
   1afbc:	00018f6d 	.word	0x00018f6d
   1afc0:	00019085 	.word	0x00019085

0001afc4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   1afc4:	b580      	push	{r7, lr}
   1afc6:	b082      	sub	sp, #8
   1afc8:	af00      	add	r7, sp, #0
   1afca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   1afcc:	4b60      	ldr	r3, [pc, #384]	; (1b150 <prvAddNewTaskToReadyList+0x18c>)
   1afce:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
   1afd0:	4b60      	ldr	r3, [pc, #384]	; (1b154 <prvAddNewTaskToReadyList+0x190>)
   1afd2:	681b      	ldr	r3, [r3, #0]
   1afd4:	1c5a      	adds	r2, r3, #1
   1afd6:	4b5f      	ldr	r3, [pc, #380]	; (1b154 <prvAddNewTaskToReadyList+0x190>)
   1afd8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
   1afda:	4b5f      	ldr	r3, [pc, #380]	; (1b158 <prvAddNewTaskToReadyList+0x194>)
   1afdc:	681b      	ldr	r3, [r3, #0]
   1afde:	2b00      	cmp	r3, #0
   1afe0:	d109      	bne.n	1aff6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   1afe2:	4b5d      	ldr	r3, [pc, #372]	; (1b158 <prvAddNewTaskToReadyList+0x194>)
   1afe4:	687a      	ldr	r2, [r7, #4]
   1afe6:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   1afe8:	4b5a      	ldr	r3, [pc, #360]	; (1b154 <prvAddNewTaskToReadyList+0x190>)
   1afea:	681b      	ldr	r3, [r3, #0]
   1afec:	2b01      	cmp	r3, #1
   1afee:	d110      	bne.n	1b012 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   1aff0:	4b5a      	ldr	r3, [pc, #360]	; (1b15c <prvAddNewTaskToReadyList+0x198>)
   1aff2:	4798      	blx	r3
   1aff4:	e00d      	b.n	1b012 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   1aff6:	4b5a      	ldr	r3, [pc, #360]	; (1b160 <prvAddNewTaskToReadyList+0x19c>)
   1aff8:	681b      	ldr	r3, [r3, #0]
   1affa:	2b00      	cmp	r3, #0
   1affc:	d109      	bne.n	1b012 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   1affe:	4b56      	ldr	r3, [pc, #344]	; (1b158 <prvAddNewTaskToReadyList+0x194>)
   1b000:	681b      	ldr	r3, [r3, #0]
   1b002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b004:	687b      	ldr	r3, [r7, #4]
   1b006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b008:	429a      	cmp	r2, r3
   1b00a:	d802      	bhi.n	1b012 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
   1b00c:	4b52      	ldr	r3, [pc, #328]	; (1b158 <prvAddNewTaskToReadyList+0x194>)
   1b00e:	687a      	ldr	r2, [r7, #4]
   1b010:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   1b012:	4b54      	ldr	r3, [pc, #336]	; (1b164 <prvAddNewTaskToReadyList+0x1a0>)
   1b014:	681b      	ldr	r3, [r3, #0]
   1b016:	1c5a      	adds	r2, r3, #1
   1b018:	4b52      	ldr	r3, [pc, #328]	; (1b164 <prvAddNewTaskToReadyList+0x1a0>)
   1b01a:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
   1b01c:	4b51      	ldr	r3, [pc, #324]	; (1b164 <prvAddNewTaskToReadyList+0x1a0>)
   1b01e:	681a      	ldr	r2, [r3, #0]
   1b020:	687b      	ldr	r3, [r7, #4]
   1b022:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
   1b024:	687b      	ldr	r3, [r7, #4]
   1b026:	2b00      	cmp	r3, #0
   1b028:	d052      	beq.n	1b0d0 <prvAddNewTaskToReadyList+0x10c>
   1b02a:	2003      	movs	r0, #3
   1b02c:	4b4e      	ldr	r3, [pc, #312]	; (1b168 <prvAddNewTaskToReadyList+0x1a4>)
   1b02e:	4798      	blx	r3
   1b030:	0003      	movs	r3, r0
   1b032:	b29a      	uxth	r2, r3
   1b034:	687b      	ldr	r3, [r7, #4]
   1b036:	0011      	movs	r1, r2
   1b038:	0018      	movs	r0, r3
   1b03a:	4b4c      	ldr	r3, [pc, #304]	; (1b16c <prvAddNewTaskToReadyList+0x1a8>)
   1b03c:	4798      	blx	r3
   1b03e:	4b4c      	ldr	r3, [pc, #304]	; (1b170 <prvAddNewTaskToReadyList+0x1ac>)
   1b040:	881a      	ldrh	r2, [r3, #0]
   1b042:	687b      	ldr	r3, [r7, #4]
   1b044:	0011      	movs	r1, r2
   1b046:	0018      	movs	r0, r3
   1b048:	4b4a      	ldr	r3, [pc, #296]	; (1b174 <prvAddNewTaskToReadyList+0x1b0>)
   1b04a:	4798      	blx	r3
   1b04c:	687b      	ldr	r3, [r7, #4]
   1b04e:	0018      	movs	r0, r3
   1b050:	4b49      	ldr	r3, [pc, #292]	; (1b178 <prvAddNewTaskToReadyList+0x1b4>)
   1b052:	4798      	blx	r3
   1b054:	0003      	movs	r3, r0
   1b056:	b2d9      	uxtb	r1, r3
   1b058:	687b      	ldr	r3, [r7, #4]
   1b05a:	3334      	adds	r3, #52	; 0x34
   1b05c:	001a      	movs	r2, r3
   1b05e:	2003      	movs	r0, #3
   1b060:	4b46      	ldr	r3, [pc, #280]	; (1b17c <prvAddNewTaskToReadyList+0x1b8>)
   1b062:	4798      	blx	r3
   1b064:	687b      	ldr	r3, [r7, #4]
   1b066:	0018      	movs	r0, r3
   1b068:	4b43      	ldr	r3, [pc, #268]	; (1b178 <prvAddNewTaskToReadyList+0x1b4>)
   1b06a:	4798      	blx	r3
   1b06c:	0003      	movs	r3, r0
   1b06e:	b2d9      	uxtb	r1, r3
   1b070:	687b      	ldr	r3, [r7, #4]
   1b072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b074:	b2db      	uxtb	r3, r3
   1b076:	001a      	movs	r2, r3
   1b078:	2003      	movs	r0, #3
   1b07a:	4b41      	ldr	r3, [pc, #260]	; (1b180 <prvAddNewTaskToReadyList+0x1bc>)
   1b07c:	4798      	blx	r3
   1b07e:	4b41      	ldr	r3, [pc, #260]	; (1b184 <prvAddNewTaskToReadyList+0x1c0>)
   1b080:	4798      	blx	r3
   1b082:	0003      	movs	r3, r0
   1b084:	0018      	movs	r0, r3
   1b086:	4b40      	ldr	r3, [pc, #256]	; (1b188 <prvAddNewTaskToReadyList+0x1c4>)
   1b088:	4798      	blx	r3
   1b08a:	0003      	movs	r3, r0
   1b08c:	001a      	movs	r2, r3
   1b08e:	4b3f      	ldr	r3, [pc, #252]	; (1b18c <prvAddNewTaskToReadyList+0x1c8>)
   1b090:	881b      	ldrh	r3, [r3, #0]
   1b092:	4013      	ands	r3, r2
   1b094:	b29b      	uxth	r3, r3
   1b096:	2b00      	cmp	r3, #0
   1b098:	d016      	beq.n	1b0c8 <prvAddNewTaskToReadyList+0x104>
   1b09a:	687b      	ldr	r3, [r7, #4]
   1b09c:	0018      	movs	r0, r3
   1b09e:	4b3a      	ldr	r3, [pc, #232]	; (1b188 <prvAddNewTaskToReadyList+0x1c4>)
   1b0a0:	4798      	blx	r3
   1b0a2:	0003      	movs	r3, r0
   1b0a4:	001a      	movs	r2, r3
   1b0a6:	4b39      	ldr	r3, [pc, #228]	; (1b18c <prvAddNewTaskToReadyList+0x1c8>)
   1b0a8:	881b      	ldrh	r3, [r3, #0]
   1b0aa:	4013      	ands	r3, r2
   1b0ac:	b29b      	uxth	r3, r3
   1b0ae:	2b00      	cmp	r3, #0
   1b0b0:	d00a      	beq.n	1b0c8 <prvAddNewTaskToReadyList+0x104>
   1b0b2:	687b      	ldr	r3, [r7, #4]
   1b0b4:	0018      	movs	r0, r3
   1b0b6:	4b30      	ldr	r3, [pc, #192]	; (1b178 <prvAddNewTaskToReadyList+0x1b4>)
   1b0b8:	4798      	blx	r3
   1b0ba:	0003      	movs	r3, r0
   1b0bc:	b2db      	uxtb	r3, r3
   1b0be:	001a      	movs	r2, r3
   1b0c0:	2103      	movs	r1, #3
   1b0c2:	201b      	movs	r0, #27
   1b0c4:	4b32      	ldr	r3, [pc, #200]	; (1b190 <prvAddNewTaskToReadyList+0x1cc>)
   1b0c6:	4798      	blx	r3
   1b0c8:	687b      	ldr	r3, [r7, #4]
   1b0ca:	0018      	movs	r0, r3
   1b0cc:	4b31      	ldr	r3, [pc, #196]	; (1b194 <prvAddNewTaskToReadyList+0x1d0>)
   1b0ce:	4798      	blx	r3

		prvAddTaskToReadyList( pxNewTCB );
   1b0d0:	687b      	ldr	r3, [r7, #4]
   1b0d2:	0018      	movs	r0, r3
   1b0d4:	4b2c      	ldr	r3, [pc, #176]	; (1b188 <prvAddNewTaskToReadyList+0x1c4>)
   1b0d6:	4798      	blx	r3
   1b0d8:	0003      	movs	r3, r0
   1b0da:	001a      	movs	r2, r3
   1b0dc:	4b2b      	ldr	r3, [pc, #172]	; (1b18c <prvAddNewTaskToReadyList+0x1c8>)
   1b0de:	881b      	ldrh	r3, [r3, #0]
   1b0e0:	4013      	ands	r3, r2
   1b0e2:	b29b      	uxth	r3, r3
   1b0e4:	2b00      	cmp	r3, #0
   1b0e6:	d008      	beq.n	1b0fa <prvAddNewTaskToReadyList+0x136>
   1b0e8:	687b      	ldr	r3, [r7, #4]
   1b0ea:	0018      	movs	r0, r3
   1b0ec:	4b22      	ldr	r3, [pc, #136]	; (1b178 <prvAddNewTaskToReadyList+0x1b4>)
   1b0ee:	4798      	blx	r3
   1b0f0:	0003      	movs	r3, r0
   1b0f2:	b2db      	uxtb	r3, r3
   1b0f4:	0018      	movs	r0, r3
   1b0f6:	4b28      	ldr	r3, [pc, #160]	; (1b198 <prvAddNewTaskToReadyList+0x1d4>)
   1b0f8:	4798      	blx	r3
   1b0fa:	687b      	ldr	r3, [r7, #4]
   1b0fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b0fe:	4b27      	ldr	r3, [pc, #156]	; (1b19c <prvAddNewTaskToReadyList+0x1d8>)
   1b100:	681b      	ldr	r3, [r3, #0]
   1b102:	429a      	cmp	r2, r3
   1b104:	d903      	bls.n	1b10e <prvAddNewTaskToReadyList+0x14a>
   1b106:	687b      	ldr	r3, [r7, #4]
   1b108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b10a:	4b24      	ldr	r3, [pc, #144]	; (1b19c <prvAddNewTaskToReadyList+0x1d8>)
   1b10c:	601a      	str	r2, [r3, #0]
   1b10e:	687b      	ldr	r3, [r7, #4]
   1b110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b112:	0013      	movs	r3, r2
   1b114:	009b      	lsls	r3, r3, #2
   1b116:	189b      	adds	r3, r3, r2
   1b118:	009b      	lsls	r3, r3, #2
   1b11a:	4a21      	ldr	r2, [pc, #132]	; (1b1a0 <prvAddNewTaskToReadyList+0x1dc>)
   1b11c:	189a      	adds	r2, r3, r2
   1b11e:	687b      	ldr	r3, [r7, #4]
   1b120:	3304      	adds	r3, #4
   1b122:	0019      	movs	r1, r3
   1b124:	0010      	movs	r0, r2
   1b126:	4b1f      	ldr	r3, [pc, #124]	; (1b1a4 <prvAddNewTaskToReadyList+0x1e0>)
   1b128:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   1b12a:	4b1f      	ldr	r3, [pc, #124]	; (1b1a8 <prvAddNewTaskToReadyList+0x1e4>)
   1b12c:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
   1b12e:	4b0c      	ldr	r3, [pc, #48]	; (1b160 <prvAddNewTaskToReadyList+0x19c>)
   1b130:	681b      	ldr	r3, [r3, #0]
   1b132:	2b00      	cmp	r3, #0
   1b134:	d008      	beq.n	1b148 <prvAddNewTaskToReadyList+0x184>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   1b136:	4b08      	ldr	r3, [pc, #32]	; (1b158 <prvAddNewTaskToReadyList+0x194>)
   1b138:	681b      	ldr	r3, [r3, #0]
   1b13a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b13c:	687b      	ldr	r3, [r7, #4]
   1b13e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b140:	429a      	cmp	r2, r3
   1b142:	d201      	bcs.n	1b148 <prvAddNewTaskToReadyList+0x184>
		{
			taskYIELD_IF_USING_PREEMPTION();
   1b144:	4b19      	ldr	r3, [pc, #100]	; (1b1ac <prvAddNewTaskToReadyList+0x1e8>)
   1b146:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1b148:	46c0      	nop			; (mov r8, r8)
   1b14a:	46bd      	mov	sp, r7
   1b14c:	b002      	add	sp, #8
   1b14e:	bd80      	pop	{r7, pc}
   1b150:	000191b9 	.word	0x000191b9
   1b154:	20004180 	.word	0x20004180
   1b158:	200040a8 	.word	0x200040a8
   1b15c:	0001bce5 	.word	0x0001bce5
   1b160:	2000418c 	.word	0x2000418c
   1b164:	2000419c 	.word	0x2000419c
   1b168:	00018739 	.word	0x00018739
   1b16c:	000171dd 	.word	0x000171dd
   1b170:	20000102 	.word	0x20000102
   1b174:	00017219 	.word	0x00017219
   1b178:	00017199 	.word	0x00017199
   1b17c:	00018969 	.word	0x00018969
   1b180:	000180cd 	.word	0x000180cd
   1b184:	00017455 	.word	0x00017455
   1b188:	000171b9 	.word	0x000171b9
   1b18c:	20000100 	.word	0x20000100
   1b190:	00017bb1 	.word	0x00017bb1
   1b194:	00017319 	.word	0x00017319
   1b198:	00017969 	.word	0x00017969
   1b19c:	20004188 	.word	0x20004188
   1b1a0:	200040ac 	.word	0x200040ac
   1b1a4:	00018f83 	.word	0x00018f83
   1b1a8:	000191dd 	.word	0x000191dd
   1b1ac:	000191a1 	.word	0x000191a1

0001b1b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
   1b1b0:	b580      	push	{r7, lr}
   1b1b2:	b084      	sub	sp, #16
   1b1b4:	af00      	add	r7, sp, #0
   1b1b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
   1b1b8:	2300      	movs	r3, #0
   1b1ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
   1b1bc:	687b      	ldr	r3, [r7, #4]
   1b1be:	2b00      	cmp	r3, #0
   1b1c0:	d045      	beq.n	1b24e <vTaskDelay+0x9e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
   1b1c2:	4b27      	ldr	r3, [pc, #156]	; (1b260 <vTaskDelay+0xb0>)
   1b1c4:	681b      	ldr	r3, [r3, #0]
   1b1c6:	2b00      	cmp	r3, #0
   1b1c8:	d001      	beq.n	1b1ce <vTaskDelay+0x1e>
   1b1ca:	b672      	cpsid	i
   1b1cc:	e7fe      	b.n	1b1cc <vTaskDelay+0x1c>
			vTaskSuspendAll();
   1b1ce:	4b25      	ldr	r3, [pc, #148]	; (1b264 <vTaskDelay+0xb4>)
   1b1d0:	4798      	blx	r3
			{
				traceTASK_DELAY();
   1b1d2:	4b25      	ldr	r3, [pc, #148]	; (1b268 <vTaskDelay+0xb8>)
   1b1d4:	681b      	ldr	r3, [r3, #0]
   1b1d6:	0018      	movs	r0, r3
   1b1d8:	4b24      	ldr	r3, [pc, #144]	; (1b26c <vTaskDelay+0xbc>)
   1b1da:	4798      	blx	r3
   1b1dc:	0003      	movs	r3, r0
   1b1de:	001a      	movs	r2, r3
   1b1e0:	4b23      	ldr	r3, [pc, #140]	; (1b270 <vTaskDelay+0xc0>)
   1b1e2:	881b      	ldrh	r3, [r3, #0]
   1b1e4:	4013      	ands	r3, r2
   1b1e6:	b29b      	uxth	r3, r3
   1b1e8:	2b00      	cmp	r3, #0
   1b1ea:	d00e      	beq.n	1b20a <vTaskDelay+0x5a>
   1b1ec:	687b      	ldr	r3, [r7, #4]
   1b1ee:	0019      	movs	r1, r3
   1b1f0:	2089      	movs	r0, #137	; 0x89
   1b1f2:	4b20      	ldr	r3, [pc, #128]	; (1b274 <vTaskDelay+0xc4>)
   1b1f4:	4798      	blx	r3
   1b1f6:	4b1c      	ldr	r3, [pc, #112]	; (1b268 <vTaskDelay+0xb8>)
   1b1f8:	681b      	ldr	r3, [r3, #0]
   1b1fa:	0018      	movs	r0, r3
   1b1fc:	4b1e      	ldr	r3, [pc, #120]	; (1b278 <vTaskDelay+0xc8>)
   1b1fe:	4798      	blx	r3
   1b200:	0003      	movs	r3, r0
   1b202:	b2db      	uxtb	r3, r3
   1b204:	0018      	movs	r0, r3
   1b206:	4b1d      	ldr	r3, [pc, #116]	; (1b27c <vTaskDelay+0xcc>)
   1b208:	4798      	blx	r3
   1b20a:	4b1d      	ldr	r3, [pc, #116]	; (1b280 <vTaskDelay+0xd0>)
   1b20c:	4798      	blx	r3
   1b20e:	0003      	movs	r3, r0
   1b210:	0018      	movs	r0, r3
   1b212:	4b16      	ldr	r3, [pc, #88]	; (1b26c <vTaskDelay+0xbc>)
   1b214:	4798      	blx	r3
   1b216:	0003      	movs	r3, r0
   1b218:	001a      	movs	r2, r3
   1b21a:	4b15      	ldr	r3, [pc, #84]	; (1b270 <vTaskDelay+0xc0>)
   1b21c:	881b      	ldrh	r3, [r3, #0]
   1b21e:	4013      	ands	r3, r2
   1b220:	b29b      	uxth	r3, r3
   1b222:	2b00      	cmp	r3, #0
   1b224:	d00a      	beq.n	1b23c <vTaskDelay+0x8c>
   1b226:	4b16      	ldr	r3, [pc, #88]	; (1b280 <vTaskDelay+0xd0>)
   1b228:	4798      	blx	r3
   1b22a:	0003      	movs	r3, r0
   1b22c:	0018      	movs	r0, r3
   1b22e:	4b12      	ldr	r3, [pc, #72]	; (1b278 <vTaskDelay+0xc8>)
   1b230:	4798      	blx	r3
   1b232:	0003      	movs	r3, r0
   1b234:	b2db      	uxtb	r3, r3
   1b236:	0018      	movs	r0, r3
   1b238:	4b10      	ldr	r3, [pc, #64]	; (1b27c <vTaskDelay+0xcc>)
   1b23a:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   1b23c:	687b      	ldr	r3, [r7, #4]
   1b23e:	2100      	movs	r1, #0
   1b240:	0018      	movs	r0, r3
   1b242:	4b10      	ldr	r3, [pc, #64]	; (1b284 <vTaskDelay+0xd4>)
   1b244:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   1b246:	4b10      	ldr	r3, [pc, #64]	; (1b288 <vTaskDelay+0xd8>)
   1b248:	4798      	blx	r3
   1b24a:	0003      	movs	r3, r0
   1b24c:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   1b24e:	68fb      	ldr	r3, [r7, #12]
   1b250:	2b00      	cmp	r3, #0
   1b252:	d101      	bne.n	1b258 <vTaskDelay+0xa8>
		{
			portYIELD_WITHIN_API();
   1b254:	4b0d      	ldr	r3, [pc, #52]	; (1b28c <vTaskDelay+0xdc>)
   1b256:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1b258:	46c0      	nop			; (mov r8, r8)
   1b25a:	46bd      	mov	sp, r7
   1b25c:	b004      	add	sp, #16
   1b25e:	bd80      	pop	{r7, pc}
   1b260:	200041a8 	.word	0x200041a8
   1b264:	0001b471 	.word	0x0001b471
   1b268:	200040a8 	.word	0x200040a8
   1b26c:	000171b9 	.word	0x000171b9
   1b270:	20000100 	.word	0x20000100
   1b274:	00017eb9 	.word	0x00017eb9
   1b278:	00017199 	.word	0x00017199
   1b27c:	00018349 	.word	0x00018349
   1b280:	00017455 	.word	0x00017455
   1b284:	0001c3c9 	.word	0x0001c3c9
   1b288:	0001b489 	.word	0x0001b489
   1b28c:	000191a1 	.word	0x000191a1

0001b290 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
   1b290:	b580      	push	{r7, lr}
   1b292:	b084      	sub	sp, #16
   1b294:	af00      	add	r7, sp, #0
   1b296:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
   1b298:	4b42      	ldr	r3, [pc, #264]	; (1b3a4 <vTaskSuspend+0x114>)
   1b29a:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   1b29c:	687b      	ldr	r3, [r7, #4]
   1b29e:	2b00      	cmp	r3, #0
   1b2a0:	d102      	bne.n	1b2a8 <vTaskSuspend+0x18>
   1b2a2:	4b41      	ldr	r3, [pc, #260]	; (1b3a8 <vTaskSuspend+0x118>)
   1b2a4:	681b      	ldr	r3, [r3, #0]
   1b2a6:	e000      	b.n	1b2aa <vTaskSuspend+0x1a>
   1b2a8:	687b      	ldr	r3, [r7, #4]
   1b2aa:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );
   1b2ac:	4b3f      	ldr	r3, [pc, #252]	; (1b3ac <vTaskSuspend+0x11c>)
   1b2ae:	4798      	blx	r3
   1b2b0:	0003      	movs	r3, r0
   1b2b2:	0018      	movs	r0, r3
   1b2b4:	4b3e      	ldr	r3, [pc, #248]	; (1b3b0 <vTaskSuspend+0x120>)
   1b2b6:	4798      	blx	r3
   1b2b8:	0003      	movs	r3, r0
   1b2ba:	001a      	movs	r2, r3
   1b2bc:	4b3d      	ldr	r3, [pc, #244]	; (1b3b4 <vTaskSuspend+0x124>)
   1b2be:	881b      	ldrh	r3, [r3, #0]
   1b2c0:	4013      	ands	r3, r2
   1b2c2:	b29b      	uxth	r3, r3
   1b2c4:	2b00      	cmp	r3, #0
   1b2c6:	d016      	beq.n	1b2f6 <vTaskSuspend+0x66>
   1b2c8:	68fb      	ldr	r3, [r7, #12]
   1b2ca:	0018      	movs	r0, r3
   1b2cc:	4b38      	ldr	r3, [pc, #224]	; (1b3b0 <vTaskSuspend+0x120>)
   1b2ce:	4798      	blx	r3
   1b2d0:	0003      	movs	r3, r0
   1b2d2:	001a      	movs	r2, r3
   1b2d4:	4b37      	ldr	r3, [pc, #220]	; (1b3b4 <vTaskSuspend+0x124>)
   1b2d6:	881b      	ldrh	r3, [r3, #0]
   1b2d8:	4013      	ands	r3, r2
   1b2da:	b29b      	uxth	r3, r3
   1b2dc:	2b00      	cmp	r3, #0
   1b2de:	d00a      	beq.n	1b2f6 <vTaskSuspend+0x66>
   1b2e0:	68fb      	ldr	r3, [r7, #12]
   1b2e2:	0018      	movs	r0, r3
   1b2e4:	4b34      	ldr	r3, [pc, #208]	; (1b3b8 <vTaskSuspend+0x128>)
   1b2e6:	4798      	blx	r3
   1b2e8:	0003      	movs	r3, r0
   1b2ea:	b2db      	uxtb	r3, r3
   1b2ec:	001a      	movs	r2, r3
   1b2ee:	2103      	movs	r1, #3
   1b2f0:	208a      	movs	r0, #138	; 0x8a
   1b2f2:	4b32      	ldr	r3, [pc, #200]	; (1b3bc <vTaskSuspend+0x12c>)
   1b2f4:	4798      	blx	r3
   1b2f6:	68fb      	ldr	r3, [r7, #12]
   1b2f8:	0018      	movs	r0, r3
   1b2fa:	4b2f      	ldr	r3, [pc, #188]	; (1b3b8 <vTaskSuspend+0x128>)
   1b2fc:	4798      	blx	r3
   1b2fe:	0003      	movs	r3, r0
   1b300:	b2db      	uxtb	r3, r3
   1b302:	0018      	movs	r0, r3
   1b304:	4b2e      	ldr	r3, [pc, #184]	; (1b3c0 <vTaskSuspend+0x130>)
   1b306:	4798      	blx	r3

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1b308:	68fb      	ldr	r3, [r7, #12]
   1b30a:	3304      	adds	r3, #4
   1b30c:	0018      	movs	r0, r3
   1b30e:	4b2d      	ldr	r3, [pc, #180]	; (1b3c4 <vTaskSuspend+0x134>)
   1b310:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1b312:	68fb      	ldr	r3, [r7, #12]
   1b314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1b316:	2b00      	cmp	r3, #0
   1b318:	d004      	beq.n	1b324 <vTaskSuspend+0x94>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1b31a:	68fb      	ldr	r3, [r7, #12]
   1b31c:	3318      	adds	r3, #24
   1b31e:	0018      	movs	r0, r3
   1b320:	4b28      	ldr	r3, [pc, #160]	; (1b3c4 <vTaskSuspend+0x134>)
   1b322:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   1b324:	68fb      	ldr	r3, [r7, #12]
   1b326:	1d1a      	adds	r2, r3, #4
   1b328:	4b27      	ldr	r3, [pc, #156]	; (1b3c8 <vTaskSuspend+0x138>)
   1b32a:	0011      	movs	r1, r2
   1b32c:	0018      	movs	r0, r3
   1b32e:	4b27      	ldr	r3, [pc, #156]	; (1b3cc <vTaskSuspend+0x13c>)
   1b330:	4798      	blx	r3

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   1b332:	68fb      	ldr	r3, [r7, #12]
   1b334:	2250      	movs	r2, #80	; 0x50
   1b336:	5c9b      	ldrb	r3, [r3, r2]
   1b338:	b2db      	uxtb	r3, r3
   1b33a:	2b01      	cmp	r3, #1
   1b33c:	d103      	bne.n	1b346 <vTaskSuspend+0xb6>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1b33e:	68fb      	ldr	r3, [r7, #12]
   1b340:	2250      	movs	r2, #80	; 0x50
   1b342:	2100      	movs	r1, #0
   1b344:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
   1b346:	4b22      	ldr	r3, [pc, #136]	; (1b3d0 <vTaskSuspend+0x140>)
   1b348:	4798      	blx	r3

		if( xSchedulerRunning != pdFALSE )
   1b34a:	4b22      	ldr	r3, [pc, #136]	; (1b3d4 <vTaskSuspend+0x144>)
   1b34c:	681b      	ldr	r3, [r3, #0]
   1b34e:	2b00      	cmp	r3, #0
   1b350:	d005      	beq.n	1b35e <vTaskSuspend+0xce>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
   1b352:	4b14      	ldr	r3, [pc, #80]	; (1b3a4 <vTaskSuspend+0x114>)
   1b354:	4798      	blx	r3
			{
				prvResetNextTaskUnblockTime();
   1b356:	4b20      	ldr	r3, [pc, #128]	; (1b3d8 <vTaskSuspend+0x148>)
   1b358:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   1b35a:	4b1d      	ldr	r3, [pc, #116]	; (1b3d0 <vTaskSuspend+0x140>)
   1b35c:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
   1b35e:	4b12      	ldr	r3, [pc, #72]	; (1b3a8 <vTaskSuspend+0x118>)
   1b360:	681b      	ldr	r3, [r3, #0]
   1b362:	68fa      	ldr	r2, [r7, #12]
   1b364:	429a      	cmp	r2, r3
   1b366:	d118      	bne.n	1b39a <vTaskSuspend+0x10a>
		{
			if( xSchedulerRunning != pdFALSE )
   1b368:	4b1a      	ldr	r3, [pc, #104]	; (1b3d4 <vTaskSuspend+0x144>)
   1b36a:	681b      	ldr	r3, [r3, #0]
   1b36c:	2b00      	cmp	r3, #0
   1b36e:	d008      	beq.n	1b382 <vTaskSuspend+0xf2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
   1b370:	4b1a      	ldr	r3, [pc, #104]	; (1b3dc <vTaskSuspend+0x14c>)
   1b372:	681b      	ldr	r3, [r3, #0]
   1b374:	2b00      	cmp	r3, #0
   1b376:	d001      	beq.n	1b37c <vTaskSuspend+0xec>
   1b378:	b672      	cpsid	i
   1b37a:	e7fe      	b.n	1b37a <vTaskSuspend+0xea>
				portYIELD_WITHIN_API();
   1b37c:	4b18      	ldr	r3, [pc, #96]	; (1b3e0 <vTaskSuspend+0x150>)
   1b37e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1b380:	e00b      	b.n	1b39a <vTaskSuspend+0x10a>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   1b382:	4b11      	ldr	r3, [pc, #68]	; (1b3c8 <vTaskSuspend+0x138>)
   1b384:	681a      	ldr	r2, [r3, #0]
   1b386:	4b17      	ldr	r3, [pc, #92]	; (1b3e4 <vTaskSuspend+0x154>)
   1b388:	681b      	ldr	r3, [r3, #0]
   1b38a:	429a      	cmp	r2, r3
   1b38c:	d103      	bne.n	1b396 <vTaskSuspend+0x106>
					pxCurrentTCB = NULL;
   1b38e:	4b06      	ldr	r3, [pc, #24]	; (1b3a8 <vTaskSuspend+0x118>)
   1b390:	2200      	movs	r2, #0
   1b392:	601a      	str	r2, [r3, #0]
	}
   1b394:	e001      	b.n	1b39a <vTaskSuspend+0x10a>
					vTaskSwitchContext();
   1b396:	4b14      	ldr	r3, [pc, #80]	; (1b3e8 <vTaskSuspend+0x158>)
   1b398:	4798      	blx	r3
	}
   1b39a:	46c0      	nop			; (mov r8, r8)
   1b39c:	46bd      	mov	sp, r7
   1b39e:	b004      	add	sp, #16
   1b3a0:	bd80      	pop	{r7, pc}
   1b3a2:	46c0      	nop			; (mov r8, r8)
   1b3a4:	000191b9 	.word	0x000191b9
   1b3a8:	200040a8 	.word	0x200040a8
   1b3ac:	00017455 	.word	0x00017455
   1b3b0:	000171b9 	.word	0x000171b9
   1b3b4:	20000100 	.word	0x20000100
   1b3b8:	00017199 	.word	0x00017199
   1b3bc:	00017bb1 	.word	0x00017bb1
   1b3c0:	00018349 	.word	0x00018349
   1b3c4:	00019033 	.word	0x00019033
   1b3c8:	2000416c 	.word	0x2000416c
   1b3cc:	00018f83 	.word	0x00018f83
   1b3d0:	000191dd 	.word	0x000191dd
   1b3d4:	2000418c 	.word	0x2000418c
   1b3d8:	0001be75 	.word	0x0001be75
   1b3dc:	200041a8 	.word	0x200041a8
   1b3e0:	000191a1 	.word	0x000191a1
   1b3e4:	20004180 	.word	0x20004180
   1b3e8:	0001b805 	.word	0x0001b805

0001b3ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   1b3ec:	b590      	push	{r4, r7, lr}
   1b3ee:	b085      	sub	sp, #20
   1b3f0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   1b3f2:	4916      	ldr	r1, [pc, #88]	; (1b44c <vTaskStartScheduler+0x60>)
   1b3f4:	4816      	ldr	r0, [pc, #88]	; (1b450 <vTaskStartScheduler+0x64>)
   1b3f6:	4b17      	ldr	r3, [pc, #92]	; (1b454 <vTaskStartScheduler+0x68>)
   1b3f8:	9301      	str	r3, [sp, #4]
   1b3fa:	2300      	movs	r3, #0
   1b3fc:	9300      	str	r3, [sp, #0]
   1b3fe:	2300      	movs	r3, #0
   1b400:	2296      	movs	r2, #150	; 0x96
   1b402:	4c15      	ldr	r4, [pc, #84]	; (1b458 <vTaskStartScheduler+0x6c>)
   1b404:	47a0      	blx	r4
   1b406:	0003      	movs	r3, r0
   1b408:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   1b40a:	687b      	ldr	r3, [r7, #4]
   1b40c:	2b01      	cmp	r3, #1
   1b40e:	d103      	bne.n	1b418 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
   1b410:	4b12      	ldr	r3, [pc, #72]	; (1b45c <vTaskStartScheduler+0x70>)
   1b412:	4798      	blx	r3
   1b414:	0003      	movs	r3, r0
   1b416:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   1b418:	687b      	ldr	r3, [r7, #4]
   1b41a:	2b01      	cmp	r3, #1
   1b41c:	d10d      	bne.n	1b43a <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   1b41e:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   1b420:	4b0f      	ldr	r3, [pc, #60]	; (1b460 <vTaskStartScheduler+0x74>)
   1b422:	2201      	movs	r2, #1
   1b424:	4252      	negs	r2, r2
   1b426:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   1b428:	4b0e      	ldr	r3, [pc, #56]	; (1b464 <vTaskStartScheduler+0x78>)
   1b42a:	2201      	movs	r2, #1
   1b42c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   1b42e:	4b0e      	ldr	r3, [pc, #56]	; (1b468 <vTaskStartScheduler+0x7c>)
   1b430:	2200      	movs	r2, #0
   1b432:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   1b434:	4b0d      	ldr	r3, [pc, #52]	; (1b46c <vTaskStartScheduler+0x80>)
   1b436:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   1b438:	e004      	b.n	1b444 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   1b43a:	687b      	ldr	r3, [r7, #4]
   1b43c:	3301      	adds	r3, #1
   1b43e:	d101      	bne.n	1b444 <vTaskStartScheduler+0x58>
   1b440:	b672      	cpsid	i
   1b442:	e7fe      	b.n	1b442 <vTaskStartScheduler+0x56>
}
   1b444:	46c0      	nop			; (mov r8, r8)
   1b446:	46bd      	mov	sp, r7
   1b448:	b003      	add	sp, #12
   1b44a:	bd90      	pop	{r4, r7, pc}
   1b44c:	00037cfc 	.word	0x00037cfc
   1b450:	0001bcbd 	.word	0x0001bcbd
   1b454:	200041a4 	.word	0x200041a4
   1b458:	0001ae15 	.word	0x0001ae15
   1b45c:	0001c47d 	.word	0x0001c47d
   1b460:	200041a0 	.word	0x200041a0
   1b464:	2000418c 	.word	0x2000418c
   1b468:	20004184 	.word	0x20004184
   1b46c:	00019149 	.word	0x00019149

0001b470 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   1b470:	b580      	push	{r7, lr}
   1b472:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   1b474:	4b03      	ldr	r3, [pc, #12]	; (1b484 <vTaskSuspendAll+0x14>)
   1b476:	681b      	ldr	r3, [r3, #0]
   1b478:	1c5a      	adds	r2, r3, #1
   1b47a:	4b02      	ldr	r3, [pc, #8]	; (1b484 <vTaskSuspendAll+0x14>)
   1b47c:	601a      	str	r2, [r3, #0]
}
   1b47e:	46c0      	nop			; (mov r8, r8)
   1b480:	46bd      	mov	sp, r7
   1b482:	bd80      	pop	{r7, pc}
   1b484:	200041a8 	.word	0x200041a8

0001b488 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   1b488:	b580      	push	{r7, lr}
   1b48a:	b084      	sub	sp, #16
   1b48c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
   1b48e:	2300      	movs	r3, #0
   1b490:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   1b492:	2300      	movs	r3, #0
   1b494:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   1b496:	4b45      	ldr	r3, [pc, #276]	; (1b5ac <xTaskResumeAll+0x124>)
   1b498:	681b      	ldr	r3, [r3, #0]
   1b49a:	2b00      	cmp	r3, #0
   1b49c:	d101      	bne.n	1b4a2 <xTaskResumeAll+0x1a>
   1b49e:	b672      	cpsid	i
   1b4a0:	e7fe      	b.n	1b4a0 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   1b4a2:	4b43      	ldr	r3, [pc, #268]	; (1b5b0 <xTaskResumeAll+0x128>)
   1b4a4:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   1b4a6:	4b41      	ldr	r3, [pc, #260]	; (1b5ac <xTaskResumeAll+0x124>)
   1b4a8:	681b      	ldr	r3, [r3, #0]
   1b4aa:	1e5a      	subs	r2, r3, #1
   1b4ac:	4b3f      	ldr	r3, [pc, #252]	; (1b5ac <xTaskResumeAll+0x124>)
   1b4ae:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1b4b0:	4b3e      	ldr	r3, [pc, #248]	; (1b5ac <xTaskResumeAll+0x124>)
   1b4b2:	681b      	ldr	r3, [r3, #0]
   1b4b4:	2b00      	cmp	r3, #0
   1b4b6:	d000      	beq.n	1b4ba <xTaskResumeAll+0x32>
   1b4b8:	e071      	b.n	1b59e <xTaskResumeAll+0x116>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   1b4ba:	4b3e      	ldr	r3, [pc, #248]	; (1b5b4 <xTaskResumeAll+0x12c>)
   1b4bc:	681b      	ldr	r3, [r3, #0]
   1b4be:	2b00      	cmp	r3, #0
   1b4c0:	d100      	bne.n	1b4c4 <xTaskResumeAll+0x3c>
   1b4c2:	e06c      	b.n	1b59e <xTaskResumeAll+0x116>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1b4c4:	e044      	b.n	1b550 <xTaskResumeAll+0xc8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   1b4c6:	4b3c      	ldr	r3, [pc, #240]	; (1b5b8 <xTaskResumeAll+0x130>)
   1b4c8:	68db      	ldr	r3, [r3, #12]
   1b4ca:	68db      	ldr	r3, [r3, #12]
   1b4cc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1b4ce:	68fb      	ldr	r3, [r7, #12]
   1b4d0:	3318      	adds	r3, #24
   1b4d2:	0018      	movs	r0, r3
   1b4d4:	4b39      	ldr	r3, [pc, #228]	; (1b5bc <xTaskResumeAll+0x134>)
   1b4d6:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1b4d8:	68fb      	ldr	r3, [r7, #12]
   1b4da:	3304      	adds	r3, #4
   1b4dc:	0018      	movs	r0, r3
   1b4de:	4b37      	ldr	r3, [pc, #220]	; (1b5bc <xTaskResumeAll+0x134>)
   1b4e0:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   1b4e2:	68fb      	ldr	r3, [r7, #12]
   1b4e4:	0018      	movs	r0, r3
   1b4e6:	4b36      	ldr	r3, [pc, #216]	; (1b5c0 <xTaskResumeAll+0x138>)
   1b4e8:	4798      	blx	r3
   1b4ea:	0003      	movs	r3, r0
   1b4ec:	001a      	movs	r2, r3
   1b4ee:	4b35      	ldr	r3, [pc, #212]	; (1b5c4 <xTaskResumeAll+0x13c>)
   1b4f0:	881b      	ldrh	r3, [r3, #0]
   1b4f2:	4013      	ands	r3, r2
   1b4f4:	b29b      	uxth	r3, r3
   1b4f6:	2b00      	cmp	r3, #0
   1b4f8:	d008      	beq.n	1b50c <xTaskResumeAll+0x84>
   1b4fa:	68fb      	ldr	r3, [r7, #12]
   1b4fc:	0018      	movs	r0, r3
   1b4fe:	4b32      	ldr	r3, [pc, #200]	; (1b5c8 <xTaskResumeAll+0x140>)
   1b500:	4798      	blx	r3
   1b502:	0003      	movs	r3, r0
   1b504:	b2db      	uxtb	r3, r3
   1b506:	0018      	movs	r0, r3
   1b508:	4b30      	ldr	r3, [pc, #192]	; (1b5cc <xTaskResumeAll+0x144>)
   1b50a:	4798      	blx	r3
   1b50c:	68fb      	ldr	r3, [r7, #12]
   1b50e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b510:	4b2f      	ldr	r3, [pc, #188]	; (1b5d0 <xTaskResumeAll+0x148>)
   1b512:	681b      	ldr	r3, [r3, #0]
   1b514:	429a      	cmp	r2, r3
   1b516:	d903      	bls.n	1b520 <xTaskResumeAll+0x98>
   1b518:	68fb      	ldr	r3, [r7, #12]
   1b51a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b51c:	4b2c      	ldr	r3, [pc, #176]	; (1b5d0 <xTaskResumeAll+0x148>)
   1b51e:	601a      	str	r2, [r3, #0]
   1b520:	68fb      	ldr	r3, [r7, #12]
   1b522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b524:	0013      	movs	r3, r2
   1b526:	009b      	lsls	r3, r3, #2
   1b528:	189b      	adds	r3, r3, r2
   1b52a:	009b      	lsls	r3, r3, #2
   1b52c:	4a29      	ldr	r2, [pc, #164]	; (1b5d4 <xTaskResumeAll+0x14c>)
   1b52e:	189a      	adds	r2, r3, r2
   1b530:	68fb      	ldr	r3, [r7, #12]
   1b532:	3304      	adds	r3, #4
   1b534:	0019      	movs	r1, r3
   1b536:	0010      	movs	r0, r2
   1b538:	4b27      	ldr	r3, [pc, #156]	; (1b5d8 <xTaskResumeAll+0x150>)
   1b53a:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1b53c:	68fb      	ldr	r3, [r7, #12]
   1b53e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b540:	4b26      	ldr	r3, [pc, #152]	; (1b5dc <xTaskResumeAll+0x154>)
   1b542:	681b      	ldr	r3, [r3, #0]
   1b544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b546:	429a      	cmp	r2, r3
   1b548:	d302      	bcc.n	1b550 <xTaskResumeAll+0xc8>
					{
						xYieldPending = pdTRUE;
   1b54a:	4b25      	ldr	r3, [pc, #148]	; (1b5e0 <xTaskResumeAll+0x158>)
   1b54c:	2201      	movs	r2, #1
   1b54e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1b550:	4b19      	ldr	r3, [pc, #100]	; (1b5b8 <xTaskResumeAll+0x130>)
   1b552:	681b      	ldr	r3, [r3, #0]
   1b554:	2b00      	cmp	r3, #0
   1b556:	d1b6      	bne.n	1b4c6 <xTaskResumeAll+0x3e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   1b558:	68fb      	ldr	r3, [r7, #12]
   1b55a:	2b00      	cmp	r3, #0
   1b55c:	d001      	beq.n	1b562 <xTaskResumeAll+0xda>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   1b55e:	4b21      	ldr	r3, [pc, #132]	; (1b5e4 <xTaskResumeAll+0x15c>)
   1b560:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   1b562:	4b21      	ldr	r3, [pc, #132]	; (1b5e8 <xTaskResumeAll+0x160>)
   1b564:	681b      	ldr	r3, [r3, #0]
   1b566:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   1b568:	687b      	ldr	r3, [r7, #4]
   1b56a:	2b00      	cmp	r3, #0
   1b56c:	d00f      	beq.n	1b58e <xTaskResumeAll+0x106>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   1b56e:	4b1f      	ldr	r3, [pc, #124]	; (1b5ec <xTaskResumeAll+0x164>)
   1b570:	4798      	blx	r3
   1b572:	1e03      	subs	r3, r0, #0
   1b574:	d002      	beq.n	1b57c <xTaskResumeAll+0xf4>
							{
								xYieldPending = pdTRUE;
   1b576:	4b1a      	ldr	r3, [pc, #104]	; (1b5e0 <xTaskResumeAll+0x158>)
   1b578:	2201      	movs	r2, #1
   1b57a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   1b57c:	687b      	ldr	r3, [r7, #4]
   1b57e:	3b01      	subs	r3, #1
   1b580:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   1b582:	687b      	ldr	r3, [r7, #4]
   1b584:	2b00      	cmp	r3, #0
   1b586:	d1f2      	bne.n	1b56e <xTaskResumeAll+0xe6>

						uxPendedTicks = 0;
   1b588:	4b17      	ldr	r3, [pc, #92]	; (1b5e8 <xTaskResumeAll+0x160>)
   1b58a:	2200      	movs	r2, #0
   1b58c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   1b58e:	4b14      	ldr	r3, [pc, #80]	; (1b5e0 <xTaskResumeAll+0x158>)
   1b590:	681b      	ldr	r3, [r3, #0]
   1b592:	2b00      	cmp	r3, #0
   1b594:	d003      	beq.n	1b59e <xTaskResumeAll+0x116>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   1b596:	2301      	movs	r3, #1
   1b598:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   1b59a:	4b15      	ldr	r3, [pc, #84]	; (1b5f0 <xTaskResumeAll+0x168>)
   1b59c:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1b59e:	4b15      	ldr	r3, [pc, #84]	; (1b5f4 <xTaskResumeAll+0x16c>)
   1b5a0:	4798      	blx	r3

	return xAlreadyYielded;
   1b5a2:	68bb      	ldr	r3, [r7, #8]
}
   1b5a4:	0018      	movs	r0, r3
   1b5a6:	46bd      	mov	sp, r7
   1b5a8:	b004      	add	sp, #16
   1b5aa:	bd80      	pop	{r7, pc}
   1b5ac:	200041a8 	.word	0x200041a8
   1b5b0:	000191b9 	.word	0x000191b9
   1b5b4:	20004180 	.word	0x20004180
   1b5b8:	20004140 	.word	0x20004140
   1b5bc:	00019033 	.word	0x00019033
   1b5c0:	000171b9 	.word	0x000171b9
   1b5c4:	20000100 	.word	0x20000100
   1b5c8:	00017199 	.word	0x00017199
   1b5cc:	00017969 	.word	0x00017969
   1b5d0:	20004188 	.word	0x20004188
   1b5d4:	200040ac 	.word	0x200040ac
   1b5d8:	00018f83 	.word	0x00018f83
   1b5dc:	200040a8 	.word	0x200040a8
   1b5e0:	20004194 	.word	0x20004194
   1b5e4:	0001be75 	.word	0x0001be75
   1b5e8:	20004190 	.word	0x20004190
   1b5ec:	0001b615 	.word	0x0001b615
   1b5f0:	000191a1 	.word	0x000191a1
   1b5f4:	000191dd 	.word	0x000191dd

0001b5f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   1b5f8:	b580      	push	{r7, lr}
   1b5fa:	b082      	sub	sp, #8
   1b5fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   1b5fe:	4b04      	ldr	r3, [pc, #16]	; (1b610 <xTaskGetTickCount+0x18>)
   1b600:	681b      	ldr	r3, [r3, #0]
   1b602:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   1b604:	687b      	ldr	r3, [r7, #4]
}
   1b606:	0018      	movs	r0, r3
   1b608:	46bd      	mov	sp, r7
   1b60a:	b002      	add	sp, #8
   1b60c:	bd80      	pop	{r7, pc}
   1b60e:	46c0      	nop			; (mov r8, r8)
   1b610:	20004184 	.word	0x20004184

0001b614 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   1b614:	b580      	push	{r7, lr}
   1b616:	b086      	sub	sp, #24
   1b618:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   1b61a:	2300      	movs	r3, #0
   1b61c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
   1b61e:	4b64      	ldr	r3, [pc, #400]	; (1b7b0 <xTaskIncrementTick+0x19c>)
   1b620:	681b      	ldr	r3, [r3, #0]
   1b622:	2b01      	cmp	r3, #1
   1b624:	d003      	beq.n	1b62e <xTaskIncrementTick+0x1a>
   1b626:	4b63      	ldr	r3, [pc, #396]	; (1b7b4 <xTaskIncrementTick+0x1a0>)
   1b628:	681b      	ldr	r3, [r3, #0]
   1b62a:	2b00      	cmp	r3, #0
   1b62c:	d107      	bne.n	1b63e <xTaskIncrementTick+0x2a>
   1b62e:	4b62      	ldr	r3, [pc, #392]	; (1b7b8 <xTaskIncrementTick+0x1a4>)
   1b630:	681b      	ldr	r3, [r3, #0]
   1b632:	1c5a      	adds	r2, r3, #1
   1b634:	4b60      	ldr	r3, [pc, #384]	; (1b7b8 <xTaskIncrementTick+0x1a4>)
   1b636:	601a      	str	r2, [r3, #0]
   1b638:	2000      	movs	r0, #0
   1b63a:	4b60      	ldr	r3, [pc, #384]	; (1b7bc <xTaskIncrementTick+0x1a8>)
   1b63c:	4798      	blx	r3
   1b63e:	4b5c      	ldr	r3, [pc, #368]	; (1b7b0 <xTaskIncrementTick+0x19c>)
   1b640:	681b      	ldr	r3, [r3, #0]
   1b642:	2b00      	cmp	r3, #0
   1b644:	d106      	bne.n	1b654 <xTaskIncrementTick+0x40>
   1b646:	4b5e      	ldr	r3, [pc, #376]	; (1b7c0 <xTaskIncrementTick+0x1ac>)
   1b648:	681b      	ldr	r3, [r3, #0]
   1b64a:	3301      	adds	r3, #1
   1b64c:	0019      	movs	r1, r3
   1b64e:	2003      	movs	r0, #3
   1b650:	4b5c      	ldr	r3, [pc, #368]	; (1b7c4 <xTaskIncrementTick+0x1b0>)
   1b652:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1b654:	4b56      	ldr	r3, [pc, #344]	; (1b7b0 <xTaskIncrementTick+0x19c>)
   1b656:	681b      	ldr	r3, [r3, #0]
   1b658:	2b00      	cmp	r3, #0
   1b65a:	d000      	beq.n	1b65e <xTaskIncrementTick+0x4a>
   1b65c:	e098      	b.n	1b790 <xTaskIncrementTick+0x17c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   1b65e:	4b58      	ldr	r3, [pc, #352]	; (1b7c0 <xTaskIncrementTick+0x1ac>)
   1b660:	681b      	ldr	r3, [r3, #0]
   1b662:	3301      	adds	r3, #1
   1b664:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   1b666:	4b56      	ldr	r3, [pc, #344]	; (1b7c0 <xTaskIncrementTick+0x1ac>)
   1b668:	693a      	ldr	r2, [r7, #16]
   1b66a:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   1b66c:	693b      	ldr	r3, [r7, #16]
   1b66e:	2b00      	cmp	r3, #0
   1b670:	d117      	bne.n	1b6a2 <xTaskIncrementTick+0x8e>
		{
			taskSWITCH_DELAYED_LISTS();
   1b672:	4b55      	ldr	r3, [pc, #340]	; (1b7c8 <xTaskIncrementTick+0x1b4>)
   1b674:	681b      	ldr	r3, [r3, #0]
   1b676:	681b      	ldr	r3, [r3, #0]
   1b678:	2b00      	cmp	r3, #0
   1b67a:	d001      	beq.n	1b680 <xTaskIncrementTick+0x6c>
   1b67c:	b672      	cpsid	i
   1b67e:	e7fe      	b.n	1b67e <xTaskIncrementTick+0x6a>
   1b680:	4b51      	ldr	r3, [pc, #324]	; (1b7c8 <xTaskIncrementTick+0x1b4>)
   1b682:	681b      	ldr	r3, [r3, #0]
   1b684:	60fb      	str	r3, [r7, #12]
   1b686:	4b51      	ldr	r3, [pc, #324]	; (1b7cc <xTaskIncrementTick+0x1b8>)
   1b688:	681a      	ldr	r2, [r3, #0]
   1b68a:	4b4f      	ldr	r3, [pc, #316]	; (1b7c8 <xTaskIncrementTick+0x1b4>)
   1b68c:	601a      	str	r2, [r3, #0]
   1b68e:	4b4f      	ldr	r3, [pc, #316]	; (1b7cc <xTaskIncrementTick+0x1b8>)
   1b690:	68fa      	ldr	r2, [r7, #12]
   1b692:	601a      	str	r2, [r3, #0]
   1b694:	4b4e      	ldr	r3, [pc, #312]	; (1b7d0 <xTaskIncrementTick+0x1bc>)
   1b696:	681b      	ldr	r3, [r3, #0]
   1b698:	1c5a      	adds	r2, r3, #1
   1b69a:	4b4d      	ldr	r3, [pc, #308]	; (1b7d0 <xTaskIncrementTick+0x1bc>)
   1b69c:	601a      	str	r2, [r3, #0]
   1b69e:	4b4d      	ldr	r3, [pc, #308]	; (1b7d4 <xTaskIncrementTick+0x1c0>)
   1b6a0:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   1b6a2:	4b4d      	ldr	r3, [pc, #308]	; (1b7d8 <xTaskIncrementTick+0x1c4>)
   1b6a4:	681b      	ldr	r3, [r3, #0]
   1b6a6:	693a      	ldr	r2, [r7, #16]
   1b6a8:	429a      	cmp	r2, r3
   1b6aa:	d363      	bcc.n	1b774 <xTaskIncrementTick+0x160>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1b6ac:	4b46      	ldr	r3, [pc, #280]	; (1b7c8 <xTaskIncrementTick+0x1b4>)
   1b6ae:	681b      	ldr	r3, [r3, #0]
   1b6b0:	681b      	ldr	r3, [r3, #0]
   1b6b2:	2b00      	cmp	r3, #0
   1b6b4:	d101      	bne.n	1b6ba <xTaskIncrementTick+0xa6>
   1b6b6:	2301      	movs	r3, #1
   1b6b8:	e000      	b.n	1b6bc <xTaskIncrementTick+0xa8>
   1b6ba:	2300      	movs	r3, #0
   1b6bc:	2b00      	cmp	r3, #0
   1b6be:	d004      	beq.n	1b6ca <xTaskIncrementTick+0xb6>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1b6c0:	4b45      	ldr	r3, [pc, #276]	; (1b7d8 <xTaskIncrementTick+0x1c4>)
   1b6c2:	2201      	movs	r2, #1
   1b6c4:	4252      	negs	r2, r2
   1b6c6:	601a      	str	r2, [r3, #0]
					break;
   1b6c8:	e054      	b.n	1b774 <xTaskIncrementTick+0x160>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1b6ca:	4b3f      	ldr	r3, [pc, #252]	; (1b7c8 <xTaskIncrementTick+0x1b4>)
   1b6cc:	681b      	ldr	r3, [r3, #0]
   1b6ce:	68db      	ldr	r3, [r3, #12]
   1b6d0:	68db      	ldr	r3, [r3, #12]
   1b6d2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   1b6d4:	68bb      	ldr	r3, [r7, #8]
   1b6d6:	685b      	ldr	r3, [r3, #4]
   1b6d8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
   1b6da:	693a      	ldr	r2, [r7, #16]
   1b6dc:	687b      	ldr	r3, [r7, #4]
   1b6de:	429a      	cmp	r2, r3
   1b6e0:	d203      	bcs.n	1b6ea <xTaskIncrementTick+0xd6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   1b6e2:	4b3d      	ldr	r3, [pc, #244]	; (1b7d8 <xTaskIncrementTick+0x1c4>)
   1b6e4:	687a      	ldr	r2, [r7, #4]
   1b6e6:	601a      	str	r2, [r3, #0]
						break;
   1b6e8:	e044      	b.n	1b774 <xTaskIncrementTick+0x160>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1b6ea:	68bb      	ldr	r3, [r7, #8]
   1b6ec:	3304      	adds	r3, #4
   1b6ee:	0018      	movs	r0, r3
   1b6f0:	4b3a      	ldr	r3, [pc, #232]	; (1b7dc <xTaskIncrementTick+0x1c8>)
   1b6f2:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1b6f4:	68bb      	ldr	r3, [r7, #8]
   1b6f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1b6f8:	2b00      	cmp	r3, #0
   1b6fa:	d004      	beq.n	1b706 <xTaskIncrementTick+0xf2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1b6fc:	68bb      	ldr	r3, [r7, #8]
   1b6fe:	3318      	adds	r3, #24
   1b700:	0018      	movs	r0, r3
   1b702:	4b36      	ldr	r3, [pc, #216]	; (1b7dc <xTaskIncrementTick+0x1c8>)
   1b704:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   1b706:	68bb      	ldr	r3, [r7, #8]
   1b708:	0018      	movs	r0, r3
   1b70a:	4b35      	ldr	r3, [pc, #212]	; (1b7e0 <xTaskIncrementTick+0x1cc>)
   1b70c:	4798      	blx	r3
   1b70e:	0003      	movs	r3, r0
   1b710:	001a      	movs	r2, r3
   1b712:	4b34      	ldr	r3, [pc, #208]	; (1b7e4 <xTaskIncrementTick+0x1d0>)
   1b714:	881b      	ldrh	r3, [r3, #0]
   1b716:	4013      	ands	r3, r2
   1b718:	b29b      	uxth	r3, r3
   1b71a:	2b00      	cmp	r3, #0
   1b71c:	d008      	beq.n	1b730 <xTaskIncrementTick+0x11c>
   1b71e:	68bb      	ldr	r3, [r7, #8]
   1b720:	0018      	movs	r0, r3
   1b722:	4b31      	ldr	r3, [pc, #196]	; (1b7e8 <xTaskIncrementTick+0x1d4>)
   1b724:	4798      	blx	r3
   1b726:	0003      	movs	r3, r0
   1b728:	b2db      	uxtb	r3, r3
   1b72a:	0018      	movs	r0, r3
   1b72c:	4b2f      	ldr	r3, [pc, #188]	; (1b7ec <xTaskIncrementTick+0x1d8>)
   1b72e:	4798      	blx	r3
   1b730:	68bb      	ldr	r3, [r7, #8]
   1b732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b734:	4b2e      	ldr	r3, [pc, #184]	; (1b7f0 <xTaskIncrementTick+0x1dc>)
   1b736:	681b      	ldr	r3, [r3, #0]
   1b738:	429a      	cmp	r2, r3
   1b73a:	d903      	bls.n	1b744 <xTaskIncrementTick+0x130>
   1b73c:	68bb      	ldr	r3, [r7, #8]
   1b73e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b740:	4b2b      	ldr	r3, [pc, #172]	; (1b7f0 <xTaskIncrementTick+0x1dc>)
   1b742:	601a      	str	r2, [r3, #0]
   1b744:	68bb      	ldr	r3, [r7, #8]
   1b746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b748:	0013      	movs	r3, r2
   1b74a:	009b      	lsls	r3, r3, #2
   1b74c:	189b      	adds	r3, r3, r2
   1b74e:	009b      	lsls	r3, r3, #2
   1b750:	4a28      	ldr	r2, [pc, #160]	; (1b7f4 <xTaskIncrementTick+0x1e0>)
   1b752:	189a      	adds	r2, r3, r2
   1b754:	68bb      	ldr	r3, [r7, #8]
   1b756:	3304      	adds	r3, #4
   1b758:	0019      	movs	r1, r3
   1b75a:	0010      	movs	r0, r2
   1b75c:	4b26      	ldr	r3, [pc, #152]	; (1b7f8 <xTaskIncrementTick+0x1e4>)
   1b75e:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1b760:	68bb      	ldr	r3, [r7, #8]
   1b762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b764:	4b25      	ldr	r3, [pc, #148]	; (1b7fc <xTaskIncrementTick+0x1e8>)
   1b766:	681b      	ldr	r3, [r3, #0]
   1b768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b76a:	429a      	cmp	r2, r3
   1b76c:	d39e      	bcc.n	1b6ac <xTaskIncrementTick+0x98>
						{
							xSwitchRequired = pdTRUE;
   1b76e:	2301      	movs	r3, #1
   1b770:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1b772:	e79b      	b.n	1b6ac <xTaskIncrementTick+0x98>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   1b774:	4b21      	ldr	r3, [pc, #132]	; (1b7fc <xTaskIncrementTick+0x1e8>)
   1b776:	681b      	ldr	r3, [r3, #0]
   1b778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b77a:	491e      	ldr	r1, [pc, #120]	; (1b7f4 <xTaskIncrementTick+0x1e0>)
   1b77c:	0013      	movs	r3, r2
   1b77e:	009b      	lsls	r3, r3, #2
   1b780:	189b      	adds	r3, r3, r2
   1b782:	009b      	lsls	r3, r3, #2
   1b784:	585b      	ldr	r3, [r3, r1]
   1b786:	2b01      	cmp	r3, #1
   1b788:	d907      	bls.n	1b79a <xTaskIncrementTick+0x186>
			{
				xSwitchRequired = pdTRUE;
   1b78a:	2301      	movs	r3, #1
   1b78c:	617b      	str	r3, [r7, #20]
   1b78e:	e004      	b.n	1b79a <xTaskIncrementTick+0x186>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   1b790:	4b08      	ldr	r3, [pc, #32]	; (1b7b4 <xTaskIncrementTick+0x1a0>)
   1b792:	681b      	ldr	r3, [r3, #0]
   1b794:	1c5a      	adds	r2, r3, #1
   1b796:	4b07      	ldr	r3, [pc, #28]	; (1b7b4 <xTaskIncrementTick+0x1a0>)
   1b798:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   1b79a:	4b19      	ldr	r3, [pc, #100]	; (1b800 <xTaskIncrementTick+0x1ec>)
   1b79c:	681b      	ldr	r3, [r3, #0]
   1b79e:	2b00      	cmp	r3, #0
   1b7a0:	d001      	beq.n	1b7a6 <xTaskIncrementTick+0x192>
		{
			xSwitchRequired = pdTRUE;
   1b7a2:	2301      	movs	r3, #1
   1b7a4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   1b7a6:	697b      	ldr	r3, [r7, #20]
}
   1b7a8:	0018      	movs	r0, r3
   1b7aa:	46bd      	mov	sp, r7
   1b7ac:	b006      	add	sp, #24
   1b7ae:	bd80      	pop	{r7, pc}
   1b7b0:	200041a8 	.word	0x200041a8
   1b7b4:	20004190 	.word	0x20004190
   1b7b8:	20000d08 	.word	0x20000d08
   1b7bc:	00018e4d 	.word	0x00018e4d
   1b7c0:	20004184 	.word	0x20004184
   1b7c4:	00017eb9 	.word	0x00017eb9
   1b7c8:	20004138 	.word	0x20004138
   1b7cc:	2000413c 	.word	0x2000413c
   1b7d0:	20004198 	.word	0x20004198
   1b7d4:	0001be75 	.word	0x0001be75
   1b7d8:	200041a0 	.word	0x200041a0
   1b7dc:	00019033 	.word	0x00019033
   1b7e0:	000171b9 	.word	0x000171b9
   1b7e4:	20000100 	.word	0x20000100
   1b7e8:	00017199 	.word	0x00017199
   1b7ec:	00017969 	.word	0x00017969
   1b7f0:	20004188 	.word	0x20004188
   1b7f4:	200040ac 	.word	0x200040ac
   1b7f8:	00018f83 	.word	0x00018f83
   1b7fc:	200040a8 	.word	0x200040a8
   1b800:	20004194 	.word	0x20004194

0001b804 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   1b804:	b580      	push	{r7, lr}
   1b806:	b082      	sub	sp, #8
   1b808:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   1b80a:	4b3a      	ldr	r3, [pc, #232]	; (1b8f4 <vTaskSwitchContext+0xf0>)
   1b80c:	681b      	ldr	r3, [r3, #0]
   1b80e:	2b00      	cmp	r3, #0
   1b810:	d003      	beq.n	1b81a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   1b812:	4b39      	ldr	r3, [pc, #228]	; (1b8f8 <vTaskSwitchContext+0xf4>)
   1b814:	2201      	movs	r2, #1
   1b816:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   1b818:	e067      	b.n	1b8ea <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
   1b81a:	4b37      	ldr	r3, [pc, #220]	; (1b8f8 <vTaskSwitchContext+0xf4>)
   1b81c:	2200      	movs	r2, #0
   1b81e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   1b820:	4b36      	ldr	r3, [pc, #216]	; (1b8fc <vTaskSwitchContext+0xf8>)
   1b822:	681b      	ldr	r3, [r3, #0]
   1b824:	681a      	ldr	r2, [r3, #0]
   1b826:	4b35      	ldr	r3, [pc, #212]	; (1b8fc <vTaskSwitchContext+0xf8>)
   1b828:	681b      	ldr	r3, [r3, #0]
   1b82a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b82c:	429a      	cmp	r2, r3
   1b82e:	d808      	bhi.n	1b842 <vTaskSwitchContext+0x3e>
   1b830:	4b32      	ldr	r3, [pc, #200]	; (1b8fc <vTaskSwitchContext+0xf8>)
   1b832:	681a      	ldr	r2, [r3, #0]
   1b834:	4b31      	ldr	r3, [pc, #196]	; (1b8fc <vTaskSwitchContext+0xf8>)
   1b836:	681b      	ldr	r3, [r3, #0]
   1b838:	3334      	adds	r3, #52	; 0x34
   1b83a:	0019      	movs	r1, r3
   1b83c:	0010      	movs	r0, r2
   1b83e:	4b30      	ldr	r3, [pc, #192]	; (1b900 <vTaskSwitchContext+0xfc>)
   1b840:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
   1b842:	4b30      	ldr	r3, [pc, #192]	; (1b904 <vTaskSwitchContext+0x100>)
   1b844:	681b      	ldr	r3, [r3, #0]
   1b846:	607b      	str	r3, [r7, #4]
   1b848:	e007      	b.n	1b85a <vTaskSwitchContext+0x56>
   1b84a:	687b      	ldr	r3, [r7, #4]
   1b84c:	2b00      	cmp	r3, #0
   1b84e:	d101      	bne.n	1b854 <vTaskSwitchContext+0x50>
   1b850:	b672      	cpsid	i
   1b852:	e7fe      	b.n	1b852 <vTaskSwitchContext+0x4e>
   1b854:	687b      	ldr	r3, [r7, #4]
   1b856:	3b01      	subs	r3, #1
   1b858:	607b      	str	r3, [r7, #4]
   1b85a:	492b      	ldr	r1, [pc, #172]	; (1b908 <vTaskSwitchContext+0x104>)
   1b85c:	687a      	ldr	r2, [r7, #4]
   1b85e:	0013      	movs	r3, r2
   1b860:	009b      	lsls	r3, r3, #2
   1b862:	189b      	adds	r3, r3, r2
   1b864:	009b      	lsls	r3, r3, #2
   1b866:	585b      	ldr	r3, [r3, r1]
   1b868:	2b00      	cmp	r3, #0
   1b86a:	d0ee      	beq.n	1b84a <vTaskSwitchContext+0x46>
   1b86c:	687a      	ldr	r2, [r7, #4]
   1b86e:	0013      	movs	r3, r2
   1b870:	009b      	lsls	r3, r3, #2
   1b872:	189b      	adds	r3, r3, r2
   1b874:	009b      	lsls	r3, r3, #2
   1b876:	4a24      	ldr	r2, [pc, #144]	; (1b908 <vTaskSwitchContext+0x104>)
   1b878:	189b      	adds	r3, r3, r2
   1b87a:	603b      	str	r3, [r7, #0]
   1b87c:	683b      	ldr	r3, [r7, #0]
   1b87e:	685b      	ldr	r3, [r3, #4]
   1b880:	685a      	ldr	r2, [r3, #4]
   1b882:	683b      	ldr	r3, [r7, #0]
   1b884:	605a      	str	r2, [r3, #4]
   1b886:	683b      	ldr	r3, [r7, #0]
   1b888:	685a      	ldr	r2, [r3, #4]
   1b88a:	683b      	ldr	r3, [r7, #0]
   1b88c:	3308      	adds	r3, #8
   1b88e:	429a      	cmp	r2, r3
   1b890:	d104      	bne.n	1b89c <vTaskSwitchContext+0x98>
   1b892:	683b      	ldr	r3, [r7, #0]
   1b894:	685b      	ldr	r3, [r3, #4]
   1b896:	685a      	ldr	r2, [r3, #4]
   1b898:	683b      	ldr	r3, [r7, #0]
   1b89a:	605a      	str	r2, [r3, #4]
   1b89c:	683b      	ldr	r3, [r7, #0]
   1b89e:	685b      	ldr	r3, [r3, #4]
   1b8a0:	68da      	ldr	r2, [r3, #12]
   1b8a2:	4b16      	ldr	r3, [pc, #88]	; (1b8fc <vTaskSwitchContext+0xf8>)
   1b8a4:	601a      	str	r2, [r3, #0]
   1b8a6:	4b17      	ldr	r3, [pc, #92]	; (1b904 <vTaskSwitchContext+0x100>)
   1b8a8:	687a      	ldr	r2, [r7, #4]
   1b8aa:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_IN();
   1b8ac:	4b17      	ldr	r3, [pc, #92]	; (1b90c <vTaskSwitchContext+0x108>)
   1b8ae:	2201      	movs	r2, #1
   1b8b0:	601a      	str	r2, [r3, #0]
   1b8b2:	4b17      	ldr	r3, [pc, #92]	; (1b910 <vTaskSwitchContext+0x10c>)
   1b8b4:	4798      	blx	r3
   1b8b6:	0003      	movs	r3, r0
   1b8b8:	0018      	movs	r0, r3
   1b8ba:	4b16      	ldr	r3, [pc, #88]	; (1b914 <vTaskSwitchContext+0x110>)
   1b8bc:	4798      	blx	r3
   1b8be:	0003      	movs	r3, r0
   1b8c0:	001a      	movs	r2, r3
   1b8c2:	4b15      	ldr	r3, [pc, #84]	; (1b918 <vTaskSwitchContext+0x114>)
   1b8c4:	881b      	ldrh	r3, [r3, #0]
   1b8c6:	4013      	ands	r3, r2
   1b8c8:	b29b      	uxth	r3, r3
   1b8ca:	2b00      	cmp	r3, #0
   1b8cc:	d00a      	beq.n	1b8e4 <vTaskSwitchContext+0xe0>
   1b8ce:	4b10      	ldr	r3, [pc, #64]	; (1b910 <vTaskSwitchContext+0x10c>)
   1b8d0:	4798      	blx	r3
   1b8d2:	0003      	movs	r3, r0
   1b8d4:	0018      	movs	r0, r3
   1b8d6:	4b11      	ldr	r3, [pc, #68]	; (1b91c <vTaskSwitchContext+0x118>)
   1b8d8:	4798      	blx	r3
   1b8da:	0003      	movs	r3, r0
   1b8dc:	b2db      	uxtb	r3, r3
   1b8de:	0018      	movs	r0, r3
   1b8e0:	4b0f      	ldr	r3, [pc, #60]	; (1b920 <vTaskSwitchContext+0x11c>)
   1b8e2:	4798      	blx	r3
   1b8e4:	4b09      	ldr	r3, [pc, #36]	; (1b90c <vTaskSwitchContext+0x108>)
   1b8e6:	2202      	movs	r2, #2
   1b8e8:	601a      	str	r2, [r3, #0]
}
   1b8ea:	46c0      	nop			; (mov r8, r8)
   1b8ec:	46bd      	mov	sp, r7
   1b8ee:	b002      	add	sp, #8
   1b8f0:	bd80      	pop	{r7, pc}
   1b8f2:	46c0      	nop			; (mov r8, r8)
   1b8f4:	200041a8 	.word	0x200041a8
   1b8f8:	20004194 	.word	0x20004194
   1b8fc:	200040a8 	.word	0x200040a8
   1b900:	00031b0d 	.word	0x00031b0d
   1b904:	20004188 	.word	0x20004188
   1b908:	200040ac 	.word	0x200040ac
   1b90c:	20000d14 	.word	0x20000d14
   1b910:	00017455 	.word	0x00017455
   1b914:	000171b9 	.word	0x000171b9
   1b918:	20000100 	.word	0x20000100
   1b91c:	00017199 	.word	0x00017199
   1b920:	00017fb5 	.word	0x00017fb5

0001b924 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   1b924:	b580      	push	{r7, lr}
   1b926:	b082      	sub	sp, #8
   1b928:	af00      	add	r7, sp, #0
   1b92a:	6078      	str	r0, [r7, #4]
   1b92c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
   1b92e:	687b      	ldr	r3, [r7, #4]
   1b930:	2b00      	cmp	r3, #0
   1b932:	d101      	bne.n	1b938 <vTaskPlaceOnEventList+0x14>
   1b934:	b672      	cpsid	i
   1b936:	e7fe      	b.n	1b936 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1b938:	4b08      	ldr	r3, [pc, #32]	; (1b95c <vTaskPlaceOnEventList+0x38>)
   1b93a:	681b      	ldr	r3, [r3, #0]
   1b93c:	3318      	adds	r3, #24
   1b93e:	001a      	movs	r2, r3
   1b940:	687b      	ldr	r3, [r7, #4]
   1b942:	0011      	movs	r1, r2
   1b944:	0018      	movs	r0, r3
   1b946:	4b06      	ldr	r3, [pc, #24]	; (1b960 <vTaskPlaceOnEventList+0x3c>)
   1b948:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   1b94a:	683b      	ldr	r3, [r7, #0]
   1b94c:	2101      	movs	r1, #1
   1b94e:	0018      	movs	r0, r3
   1b950:	4b04      	ldr	r3, [pc, #16]	; (1b964 <vTaskPlaceOnEventList+0x40>)
   1b952:	4798      	blx	r3
}
   1b954:	46c0      	nop			; (mov r8, r8)
   1b956:	46bd      	mov	sp, r7
   1b958:	b002      	add	sp, #8
   1b95a:	bd80      	pop	{r7, pc}
   1b95c:	200040a8 	.word	0x200040a8
   1b960:	00018fc7 	.word	0x00018fc7
   1b964:	0001c3c9 	.word	0x0001c3c9

0001b968 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1b968:	b580      	push	{r7, lr}
   1b96a:	b084      	sub	sp, #16
   1b96c:	af00      	add	r7, sp, #0
   1b96e:	60f8      	str	r0, [r7, #12]
   1b970:	60b9      	str	r1, [r7, #8]
   1b972:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
   1b974:	68fb      	ldr	r3, [r7, #12]
   1b976:	2b00      	cmp	r3, #0
   1b978:	d101      	bne.n	1b97e <vTaskPlaceOnEventListRestricted+0x16>
   1b97a:	b672      	cpsid	i
   1b97c:	e7fe      	b.n	1b97c <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1b97e:	4b28      	ldr	r3, [pc, #160]	; (1ba20 <vTaskPlaceOnEventListRestricted+0xb8>)
   1b980:	681b      	ldr	r3, [r3, #0]
   1b982:	3318      	adds	r3, #24
   1b984:	001a      	movs	r2, r3
   1b986:	68fb      	ldr	r3, [r7, #12]
   1b988:	0011      	movs	r1, r2
   1b98a:	0018      	movs	r0, r3
   1b98c:	4b25      	ldr	r3, [pc, #148]	; (1ba24 <vTaskPlaceOnEventListRestricted+0xbc>)
   1b98e:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   1b990:	687b      	ldr	r3, [r7, #4]
   1b992:	2b00      	cmp	r3, #0
   1b994:	d002      	beq.n	1b99c <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
   1b996:	2301      	movs	r3, #1
   1b998:	425b      	negs	r3, r3
   1b99a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
   1b99c:	4b20      	ldr	r3, [pc, #128]	; (1ba20 <vTaskPlaceOnEventListRestricted+0xb8>)
   1b99e:	681b      	ldr	r3, [r3, #0]
   1b9a0:	0018      	movs	r0, r3
   1b9a2:	4b21      	ldr	r3, [pc, #132]	; (1ba28 <vTaskPlaceOnEventListRestricted+0xc0>)
   1b9a4:	4798      	blx	r3
   1b9a6:	0003      	movs	r3, r0
   1b9a8:	001a      	movs	r2, r3
   1b9aa:	4b20      	ldr	r3, [pc, #128]	; (1ba2c <vTaskPlaceOnEventListRestricted+0xc4>)
   1b9ac:	881b      	ldrh	r3, [r3, #0]
   1b9ae:	4013      	ands	r3, r2
   1b9b0:	b29b      	uxth	r3, r3
   1b9b2:	2b00      	cmp	r3, #0
   1b9b4:	d011      	beq.n	1b9da <vTaskPlaceOnEventListRestricted+0x72>
   1b9b6:	4b1e      	ldr	r3, [pc, #120]	; (1ba30 <vTaskPlaceOnEventListRestricted+0xc8>)
   1b9b8:	681a      	ldr	r2, [r3, #0]
   1b9ba:	68bb      	ldr	r3, [r7, #8]
   1b9bc:	18d3      	adds	r3, r2, r3
   1b9be:	0019      	movs	r1, r3
   1b9c0:	2088      	movs	r0, #136	; 0x88
   1b9c2:	4b1c      	ldr	r3, [pc, #112]	; (1ba34 <vTaskPlaceOnEventListRestricted+0xcc>)
   1b9c4:	4798      	blx	r3
   1b9c6:	4b16      	ldr	r3, [pc, #88]	; (1ba20 <vTaskPlaceOnEventListRestricted+0xb8>)
   1b9c8:	681b      	ldr	r3, [r3, #0]
   1b9ca:	0018      	movs	r0, r3
   1b9cc:	4b1a      	ldr	r3, [pc, #104]	; (1ba38 <vTaskPlaceOnEventListRestricted+0xd0>)
   1b9ce:	4798      	blx	r3
   1b9d0:	0003      	movs	r3, r0
   1b9d2:	b2db      	uxtb	r3, r3
   1b9d4:	0018      	movs	r0, r3
   1b9d6:	4b19      	ldr	r3, [pc, #100]	; (1ba3c <vTaskPlaceOnEventListRestricted+0xd4>)
   1b9d8:	4798      	blx	r3
   1b9da:	4b19      	ldr	r3, [pc, #100]	; (1ba40 <vTaskPlaceOnEventListRestricted+0xd8>)
   1b9dc:	4798      	blx	r3
   1b9de:	0003      	movs	r3, r0
   1b9e0:	0018      	movs	r0, r3
   1b9e2:	4b11      	ldr	r3, [pc, #68]	; (1ba28 <vTaskPlaceOnEventListRestricted+0xc0>)
   1b9e4:	4798      	blx	r3
   1b9e6:	0003      	movs	r3, r0
   1b9e8:	001a      	movs	r2, r3
   1b9ea:	4b10      	ldr	r3, [pc, #64]	; (1ba2c <vTaskPlaceOnEventListRestricted+0xc4>)
   1b9ec:	881b      	ldrh	r3, [r3, #0]
   1b9ee:	4013      	ands	r3, r2
   1b9f0:	b29b      	uxth	r3, r3
   1b9f2:	2b00      	cmp	r3, #0
   1b9f4:	d00a      	beq.n	1ba0c <vTaskPlaceOnEventListRestricted+0xa4>
   1b9f6:	4b12      	ldr	r3, [pc, #72]	; (1ba40 <vTaskPlaceOnEventListRestricted+0xd8>)
   1b9f8:	4798      	blx	r3
   1b9fa:	0003      	movs	r3, r0
   1b9fc:	0018      	movs	r0, r3
   1b9fe:	4b0e      	ldr	r3, [pc, #56]	; (1ba38 <vTaskPlaceOnEventListRestricted+0xd0>)
   1ba00:	4798      	blx	r3
   1ba02:	0003      	movs	r3, r0
   1ba04:	b2db      	uxtb	r3, r3
   1ba06:	0018      	movs	r0, r3
   1ba08:	4b0c      	ldr	r3, [pc, #48]	; (1ba3c <vTaskPlaceOnEventListRestricted+0xd4>)
   1ba0a:	4798      	blx	r3
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   1ba0c:	687a      	ldr	r2, [r7, #4]
   1ba0e:	68bb      	ldr	r3, [r7, #8]
   1ba10:	0011      	movs	r1, r2
   1ba12:	0018      	movs	r0, r3
   1ba14:	4b0b      	ldr	r3, [pc, #44]	; (1ba44 <vTaskPlaceOnEventListRestricted+0xdc>)
   1ba16:	4798      	blx	r3
	}
   1ba18:	46c0      	nop			; (mov r8, r8)
   1ba1a:	46bd      	mov	sp, r7
   1ba1c:	b004      	add	sp, #16
   1ba1e:	bd80      	pop	{r7, pc}
   1ba20:	200040a8 	.word	0x200040a8
   1ba24:	00018f83 	.word	0x00018f83
   1ba28:	000171b9 	.word	0x000171b9
   1ba2c:	20000100 	.word	0x20000100
   1ba30:	20004184 	.word	0x20004184
   1ba34:	00017eb9 	.word	0x00017eb9
   1ba38:	00017199 	.word	0x00017199
   1ba3c:	00018349 	.word	0x00018349
   1ba40:	00017455 	.word	0x00017455
   1ba44:	0001c3c9 	.word	0x0001c3c9

0001ba48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   1ba48:	b580      	push	{r7, lr}
   1ba4a:	b084      	sub	sp, #16
   1ba4c:	af00      	add	r7, sp, #0
   1ba4e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   1ba50:	687b      	ldr	r3, [r7, #4]
   1ba52:	68db      	ldr	r3, [r3, #12]
   1ba54:	68db      	ldr	r3, [r3, #12]
   1ba56:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   1ba58:	68bb      	ldr	r3, [r7, #8]
   1ba5a:	2b00      	cmp	r3, #0
   1ba5c:	d101      	bne.n	1ba62 <xTaskRemoveFromEventList+0x1a>
   1ba5e:	b672      	cpsid	i
   1ba60:	e7fe      	b.n	1ba60 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   1ba62:	68bb      	ldr	r3, [r7, #8]
   1ba64:	3318      	adds	r3, #24
   1ba66:	0018      	movs	r0, r3
   1ba68:	4b2a      	ldr	r3, [pc, #168]	; (1bb14 <xTaskRemoveFromEventList+0xcc>)
   1ba6a:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1ba6c:	4b2a      	ldr	r3, [pc, #168]	; (1bb18 <xTaskRemoveFromEventList+0xd0>)
   1ba6e:	681b      	ldr	r3, [r3, #0]
   1ba70:	2b00      	cmp	r3, #0
   1ba72:	d132      	bne.n	1bada <xTaskRemoveFromEventList+0x92>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   1ba74:	68bb      	ldr	r3, [r7, #8]
   1ba76:	3304      	adds	r3, #4
   1ba78:	0018      	movs	r0, r3
   1ba7a:	4b26      	ldr	r3, [pc, #152]	; (1bb14 <xTaskRemoveFromEventList+0xcc>)
   1ba7c:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   1ba7e:	68bb      	ldr	r3, [r7, #8]
   1ba80:	0018      	movs	r0, r3
   1ba82:	4b26      	ldr	r3, [pc, #152]	; (1bb1c <xTaskRemoveFromEventList+0xd4>)
   1ba84:	4798      	blx	r3
   1ba86:	0003      	movs	r3, r0
   1ba88:	001a      	movs	r2, r3
   1ba8a:	4b25      	ldr	r3, [pc, #148]	; (1bb20 <xTaskRemoveFromEventList+0xd8>)
   1ba8c:	881b      	ldrh	r3, [r3, #0]
   1ba8e:	4013      	ands	r3, r2
   1ba90:	b29b      	uxth	r3, r3
   1ba92:	2b00      	cmp	r3, #0
   1ba94:	d008      	beq.n	1baa8 <xTaskRemoveFromEventList+0x60>
   1ba96:	68bb      	ldr	r3, [r7, #8]
   1ba98:	0018      	movs	r0, r3
   1ba9a:	4b22      	ldr	r3, [pc, #136]	; (1bb24 <xTaskRemoveFromEventList+0xdc>)
   1ba9c:	4798      	blx	r3
   1ba9e:	0003      	movs	r3, r0
   1baa0:	b2db      	uxtb	r3, r3
   1baa2:	0018      	movs	r0, r3
   1baa4:	4b20      	ldr	r3, [pc, #128]	; (1bb28 <xTaskRemoveFromEventList+0xe0>)
   1baa6:	4798      	blx	r3
   1baa8:	68bb      	ldr	r3, [r7, #8]
   1baaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1baac:	4b1f      	ldr	r3, [pc, #124]	; (1bb2c <xTaskRemoveFromEventList+0xe4>)
   1baae:	681b      	ldr	r3, [r3, #0]
   1bab0:	429a      	cmp	r2, r3
   1bab2:	d903      	bls.n	1babc <xTaskRemoveFromEventList+0x74>
   1bab4:	68bb      	ldr	r3, [r7, #8]
   1bab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bab8:	4b1c      	ldr	r3, [pc, #112]	; (1bb2c <xTaskRemoveFromEventList+0xe4>)
   1baba:	601a      	str	r2, [r3, #0]
   1babc:	68bb      	ldr	r3, [r7, #8]
   1babe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bac0:	0013      	movs	r3, r2
   1bac2:	009b      	lsls	r3, r3, #2
   1bac4:	189b      	adds	r3, r3, r2
   1bac6:	009b      	lsls	r3, r3, #2
   1bac8:	4a19      	ldr	r2, [pc, #100]	; (1bb30 <xTaskRemoveFromEventList+0xe8>)
   1baca:	189a      	adds	r2, r3, r2
   1bacc:	68bb      	ldr	r3, [r7, #8]
   1bace:	3304      	adds	r3, #4
   1bad0:	0019      	movs	r1, r3
   1bad2:	0010      	movs	r0, r2
   1bad4:	4b17      	ldr	r3, [pc, #92]	; (1bb34 <xTaskRemoveFromEventList+0xec>)
   1bad6:	4798      	blx	r3
   1bad8:	e007      	b.n	1baea <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   1bada:	68bb      	ldr	r3, [r7, #8]
   1badc:	3318      	adds	r3, #24
   1bade:	001a      	movs	r2, r3
   1bae0:	4b15      	ldr	r3, [pc, #84]	; (1bb38 <xTaskRemoveFromEventList+0xf0>)
   1bae2:	0011      	movs	r1, r2
   1bae4:	0018      	movs	r0, r3
   1bae6:	4b13      	ldr	r3, [pc, #76]	; (1bb34 <xTaskRemoveFromEventList+0xec>)
   1bae8:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   1baea:	68bb      	ldr	r3, [r7, #8]
   1baec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1baee:	4b13      	ldr	r3, [pc, #76]	; (1bb3c <xTaskRemoveFromEventList+0xf4>)
   1baf0:	681b      	ldr	r3, [r3, #0]
   1baf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1baf4:	429a      	cmp	r2, r3
   1baf6:	d905      	bls.n	1bb04 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   1baf8:	2301      	movs	r3, #1
   1bafa:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   1bafc:	4b10      	ldr	r3, [pc, #64]	; (1bb40 <xTaskRemoveFromEventList+0xf8>)
   1bafe:	2201      	movs	r2, #1
   1bb00:	601a      	str	r2, [r3, #0]
   1bb02:	e001      	b.n	1bb08 <xTaskRemoveFromEventList+0xc0>
	}
	else
	{
		xReturn = pdFALSE;
   1bb04:	2300      	movs	r3, #0
   1bb06:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
   1bb08:	68fb      	ldr	r3, [r7, #12]
}
   1bb0a:	0018      	movs	r0, r3
   1bb0c:	46bd      	mov	sp, r7
   1bb0e:	b004      	add	sp, #16
   1bb10:	bd80      	pop	{r7, pc}
   1bb12:	46c0      	nop			; (mov r8, r8)
   1bb14:	00019033 	.word	0x00019033
   1bb18:	200041a8 	.word	0x200041a8
   1bb1c:	000171b9 	.word	0x000171b9
   1bb20:	20000100 	.word	0x20000100
   1bb24:	00017199 	.word	0x00017199
   1bb28:	00017969 	.word	0x00017969
   1bb2c:	20004188 	.word	0x20004188
   1bb30:	200040ac 	.word	0x200040ac
   1bb34:	00018f83 	.word	0x00018f83
   1bb38:	20004140 	.word	0x20004140
   1bb3c:	200040a8 	.word	0x200040a8
   1bb40:	20004194 	.word	0x20004194

0001bb44 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1bb44:	b580      	push	{r7, lr}
   1bb46:	b082      	sub	sp, #8
   1bb48:	af00      	add	r7, sp, #0
   1bb4a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
   1bb4c:	687b      	ldr	r3, [r7, #4]
   1bb4e:	2b00      	cmp	r3, #0
   1bb50:	d101      	bne.n	1bb56 <vTaskSetTimeOutState+0x12>
   1bb52:	b672      	cpsid	i
   1bb54:	e7fe      	b.n	1bb54 <vTaskSetTimeOutState+0x10>
	taskENTER_CRITICAL();
   1bb56:	4b08      	ldr	r3, [pc, #32]	; (1bb78 <vTaskSetTimeOutState+0x34>)
   1bb58:	4798      	blx	r3
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
   1bb5a:	4b08      	ldr	r3, [pc, #32]	; (1bb7c <vTaskSetTimeOutState+0x38>)
   1bb5c:	681a      	ldr	r2, [r3, #0]
   1bb5e:	687b      	ldr	r3, [r7, #4]
   1bb60:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
   1bb62:	4b07      	ldr	r3, [pc, #28]	; (1bb80 <vTaskSetTimeOutState+0x3c>)
   1bb64:	681a      	ldr	r2, [r3, #0]
   1bb66:	687b      	ldr	r3, [r7, #4]
   1bb68:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
   1bb6a:	4b06      	ldr	r3, [pc, #24]	; (1bb84 <vTaskSetTimeOutState+0x40>)
   1bb6c:	4798      	blx	r3
}
   1bb6e:	46c0      	nop			; (mov r8, r8)
   1bb70:	46bd      	mov	sp, r7
   1bb72:	b002      	add	sp, #8
   1bb74:	bd80      	pop	{r7, pc}
   1bb76:	46c0      	nop			; (mov r8, r8)
   1bb78:	000191b9 	.word	0x000191b9
   1bb7c:	20004198 	.word	0x20004198
   1bb80:	20004184 	.word	0x20004184
   1bb84:	000191dd 	.word	0x000191dd

0001bb88 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1bb88:	b580      	push	{r7, lr}
   1bb8a:	b082      	sub	sp, #8
   1bb8c:	af00      	add	r7, sp, #0
   1bb8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   1bb90:	4b05      	ldr	r3, [pc, #20]	; (1bba8 <vTaskInternalSetTimeOutState+0x20>)
   1bb92:	681a      	ldr	r2, [r3, #0]
   1bb94:	687b      	ldr	r3, [r7, #4]
   1bb96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   1bb98:	4b04      	ldr	r3, [pc, #16]	; (1bbac <vTaskInternalSetTimeOutState+0x24>)
   1bb9a:	681a      	ldr	r2, [r3, #0]
   1bb9c:	687b      	ldr	r3, [r7, #4]
   1bb9e:	605a      	str	r2, [r3, #4]
}
   1bba0:	46c0      	nop			; (mov r8, r8)
   1bba2:	46bd      	mov	sp, r7
   1bba4:	b002      	add	sp, #8
   1bba6:	bd80      	pop	{r7, pc}
   1bba8:	20004198 	.word	0x20004198
   1bbac:	20004184 	.word	0x20004184

0001bbb0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   1bbb0:	b580      	push	{r7, lr}
   1bbb2:	b086      	sub	sp, #24
   1bbb4:	af00      	add	r7, sp, #0
   1bbb6:	6078      	str	r0, [r7, #4]
   1bbb8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   1bbba:	687b      	ldr	r3, [r7, #4]
   1bbbc:	2b00      	cmp	r3, #0
   1bbbe:	d101      	bne.n	1bbc4 <xTaskCheckForTimeOut+0x14>
   1bbc0:	b672      	cpsid	i
   1bbc2:	e7fe      	b.n	1bbc2 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   1bbc4:	683b      	ldr	r3, [r7, #0]
   1bbc6:	2b00      	cmp	r3, #0
   1bbc8:	d101      	bne.n	1bbce <xTaskCheckForTimeOut+0x1e>
   1bbca:	b672      	cpsid	i
   1bbcc:	e7fe      	b.n	1bbcc <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
   1bbce:	4b1e      	ldr	r3, [pc, #120]	; (1bc48 <xTaskCheckForTimeOut+0x98>)
   1bbd0:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   1bbd2:	4b1e      	ldr	r3, [pc, #120]	; (1bc4c <xTaskCheckForTimeOut+0x9c>)
   1bbd4:	681b      	ldr	r3, [r3, #0]
   1bbd6:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   1bbd8:	687b      	ldr	r3, [r7, #4]
   1bbda:	685b      	ldr	r3, [r3, #4]
   1bbdc:	693a      	ldr	r2, [r7, #16]
   1bbde:	1ad3      	subs	r3, r2, r3
   1bbe0:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   1bbe2:	683b      	ldr	r3, [r7, #0]
   1bbe4:	681b      	ldr	r3, [r3, #0]
   1bbe6:	3301      	adds	r3, #1
   1bbe8:	d102      	bne.n	1bbf0 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   1bbea:	2300      	movs	r3, #0
   1bbec:	617b      	str	r3, [r7, #20]
   1bbee:	e024      	b.n	1bc3a <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   1bbf0:	687b      	ldr	r3, [r7, #4]
   1bbf2:	681a      	ldr	r2, [r3, #0]
   1bbf4:	4b16      	ldr	r3, [pc, #88]	; (1bc50 <xTaskCheckForTimeOut+0xa0>)
   1bbf6:	681b      	ldr	r3, [r3, #0]
   1bbf8:	429a      	cmp	r2, r3
   1bbfa:	d007      	beq.n	1bc0c <xTaskCheckForTimeOut+0x5c>
   1bbfc:	687b      	ldr	r3, [r7, #4]
   1bbfe:	685a      	ldr	r2, [r3, #4]
   1bc00:	693b      	ldr	r3, [r7, #16]
   1bc02:	429a      	cmp	r2, r3
   1bc04:	d802      	bhi.n	1bc0c <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   1bc06:	2301      	movs	r3, #1
   1bc08:	617b      	str	r3, [r7, #20]
   1bc0a:	e016      	b.n	1bc3a <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   1bc0c:	683b      	ldr	r3, [r7, #0]
   1bc0e:	681a      	ldr	r2, [r3, #0]
   1bc10:	68fb      	ldr	r3, [r7, #12]
   1bc12:	429a      	cmp	r2, r3
   1bc14:	d90c      	bls.n	1bc30 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   1bc16:	683b      	ldr	r3, [r7, #0]
   1bc18:	681a      	ldr	r2, [r3, #0]
   1bc1a:	68fb      	ldr	r3, [r7, #12]
   1bc1c:	1ad2      	subs	r2, r2, r3
   1bc1e:	683b      	ldr	r3, [r7, #0]
   1bc20:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   1bc22:	687b      	ldr	r3, [r7, #4]
   1bc24:	0018      	movs	r0, r3
   1bc26:	4b0b      	ldr	r3, [pc, #44]	; (1bc54 <xTaskCheckForTimeOut+0xa4>)
   1bc28:	4798      	blx	r3
			xReturn = pdFALSE;
   1bc2a:	2300      	movs	r3, #0
   1bc2c:	617b      	str	r3, [r7, #20]
   1bc2e:	e004      	b.n	1bc3a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
   1bc30:	683b      	ldr	r3, [r7, #0]
   1bc32:	2200      	movs	r2, #0
   1bc34:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   1bc36:	2301      	movs	r3, #1
   1bc38:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
   1bc3a:	4b07      	ldr	r3, [pc, #28]	; (1bc58 <xTaskCheckForTimeOut+0xa8>)
   1bc3c:	4798      	blx	r3

	return xReturn;
   1bc3e:	697b      	ldr	r3, [r7, #20]
}
   1bc40:	0018      	movs	r0, r3
   1bc42:	46bd      	mov	sp, r7
   1bc44:	b006      	add	sp, #24
   1bc46:	bd80      	pop	{r7, pc}
   1bc48:	000191b9 	.word	0x000191b9
   1bc4c:	20004184 	.word	0x20004184
   1bc50:	20004198 	.word	0x20004198
   1bc54:	0001bb89 	.word	0x0001bb89
   1bc58:	000191dd 	.word	0x000191dd

0001bc5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   1bc5c:	b580      	push	{r7, lr}
   1bc5e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   1bc60:	4b02      	ldr	r3, [pc, #8]	; (1bc6c <vTaskMissedYield+0x10>)
   1bc62:	2201      	movs	r2, #1
   1bc64:	601a      	str	r2, [r3, #0]
}
   1bc66:	46c0      	nop			; (mov r8, r8)
   1bc68:	46bd      	mov	sp, r7
   1bc6a:	bd80      	pop	{r7, pc}
   1bc6c:	20004194 	.word	0x20004194

0001bc70 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
   1bc70:	b580      	push	{r7, lr}
   1bc72:	b084      	sub	sp, #16
   1bc74:	af00      	add	r7, sp, #0
   1bc76:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
   1bc78:	687b      	ldr	r3, [r7, #4]
   1bc7a:	2b00      	cmp	r3, #0
   1bc7c:	d005      	beq.n	1bc8a <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1bc7e:	687b      	ldr	r3, [r7, #4]
   1bc80:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
   1bc82:	68bb      	ldr	r3, [r7, #8]
   1bc84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1bc86:	60fb      	str	r3, [r7, #12]
   1bc88:	e001      	b.n	1bc8e <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
   1bc8a:	2300      	movs	r3, #0
   1bc8c:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
   1bc8e:	68fb      	ldr	r3, [r7, #12]
	}
   1bc90:	0018      	movs	r0, r3
   1bc92:	46bd      	mov	sp, r7
   1bc94:	b004      	add	sp, #16
   1bc96:	bd80      	pop	{r7, pc}

0001bc98 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
   1bc98:	b580      	push	{r7, lr}
   1bc9a:	b084      	sub	sp, #16
   1bc9c:	af00      	add	r7, sp, #0
   1bc9e:	6078      	str	r0, [r7, #4]
   1bca0:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;

		if( xTask != NULL )
   1bca2:	687b      	ldr	r3, [r7, #4]
   1bca4:	2b00      	cmp	r3, #0
   1bca6:	d004      	beq.n	1bcb2 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1bca8:	687b      	ldr	r3, [r7, #4]
   1bcaa:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
   1bcac:	68fb      	ldr	r3, [r7, #12]
   1bcae:	683a      	ldr	r2, [r7, #0]
   1bcb0:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
   1bcb2:	46c0      	nop			; (mov r8, r8)
   1bcb4:	46bd      	mov	sp, r7
   1bcb6:	b004      	add	sp, #16
   1bcb8:	bd80      	pop	{r7, pc}
	...

0001bcbc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   1bcbc:	b580      	push	{r7, lr}
   1bcbe:	b082      	sub	sp, #8
   1bcc0:	af00      	add	r7, sp, #0
   1bcc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   1bcc4:	4b04      	ldr	r3, [pc, #16]	; (1bcd8 <prvIdleTask+0x1c>)
   1bcc6:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   1bcc8:	4b04      	ldr	r3, [pc, #16]	; (1bcdc <prvIdleTask+0x20>)
   1bcca:	681b      	ldr	r3, [r3, #0]
   1bccc:	2b01      	cmp	r3, #1
   1bcce:	d9f9      	bls.n	1bcc4 <prvIdleTask+0x8>
			{
				taskYIELD();
   1bcd0:	4b03      	ldr	r3, [pc, #12]	; (1bce0 <prvIdleTask+0x24>)
   1bcd2:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
   1bcd4:	e7f6      	b.n	1bcc4 <prvIdleTask+0x8>
   1bcd6:	46c0      	nop			; (mov r8, r8)
   1bcd8:	0001bd71 	.word	0x0001bd71
   1bcdc:	200040ac 	.word	0x200040ac
   1bce0:	000191a1 	.word	0x000191a1

0001bce4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   1bce4:	b580      	push	{r7, lr}
   1bce6:	b082      	sub	sp, #8
   1bce8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1bcea:	2300      	movs	r3, #0
   1bcec:	607b      	str	r3, [r7, #4]
   1bcee:	e00c      	b.n	1bd0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   1bcf0:	687a      	ldr	r2, [r7, #4]
   1bcf2:	0013      	movs	r3, r2
   1bcf4:	009b      	lsls	r3, r3, #2
   1bcf6:	189b      	adds	r3, r3, r2
   1bcf8:	009b      	lsls	r3, r3, #2
   1bcfa:	4a14      	ldr	r2, [pc, #80]	; (1bd4c <prvInitialiseTaskLists+0x68>)
   1bcfc:	189b      	adds	r3, r3, r2
   1bcfe:	0018      	movs	r0, r3
   1bd00:	4b13      	ldr	r3, [pc, #76]	; (1bd50 <prvInitialiseTaskLists+0x6c>)
   1bd02:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1bd04:	687b      	ldr	r3, [r7, #4]
   1bd06:	3301      	adds	r3, #1
   1bd08:	607b      	str	r3, [r7, #4]
   1bd0a:	687b      	ldr	r3, [r7, #4]
   1bd0c:	2b04      	cmp	r3, #4
   1bd0e:	d9ef      	bls.n	1bcf0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
   1bd10:	4b10      	ldr	r3, [pc, #64]	; (1bd54 <prvInitialiseTaskLists+0x70>)
   1bd12:	0018      	movs	r0, r3
   1bd14:	4b0e      	ldr	r3, [pc, #56]	; (1bd50 <prvInitialiseTaskLists+0x6c>)
   1bd16:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   1bd18:	4b0f      	ldr	r3, [pc, #60]	; (1bd58 <prvInitialiseTaskLists+0x74>)
   1bd1a:	0018      	movs	r0, r3
   1bd1c:	4b0c      	ldr	r3, [pc, #48]	; (1bd50 <prvInitialiseTaskLists+0x6c>)
   1bd1e:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   1bd20:	4b0e      	ldr	r3, [pc, #56]	; (1bd5c <prvInitialiseTaskLists+0x78>)
   1bd22:	0018      	movs	r0, r3
   1bd24:	4b0a      	ldr	r3, [pc, #40]	; (1bd50 <prvInitialiseTaskLists+0x6c>)
   1bd26:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   1bd28:	4b0d      	ldr	r3, [pc, #52]	; (1bd60 <prvInitialiseTaskLists+0x7c>)
   1bd2a:	0018      	movs	r0, r3
   1bd2c:	4b08      	ldr	r3, [pc, #32]	; (1bd50 <prvInitialiseTaskLists+0x6c>)
   1bd2e:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   1bd30:	4b0c      	ldr	r3, [pc, #48]	; (1bd64 <prvInitialiseTaskLists+0x80>)
   1bd32:	0018      	movs	r0, r3
   1bd34:	4b06      	ldr	r3, [pc, #24]	; (1bd50 <prvInitialiseTaskLists+0x6c>)
   1bd36:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   1bd38:	4b0b      	ldr	r3, [pc, #44]	; (1bd68 <prvInitialiseTaskLists+0x84>)
   1bd3a:	4a06      	ldr	r2, [pc, #24]	; (1bd54 <prvInitialiseTaskLists+0x70>)
   1bd3c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   1bd3e:	4b0b      	ldr	r3, [pc, #44]	; (1bd6c <prvInitialiseTaskLists+0x88>)
   1bd40:	4a05      	ldr	r2, [pc, #20]	; (1bd58 <prvInitialiseTaskLists+0x74>)
   1bd42:	601a      	str	r2, [r3, #0]
}
   1bd44:	46c0      	nop			; (mov r8, r8)
   1bd46:	46bd      	mov	sp, r7
   1bd48:	b002      	add	sp, #8
   1bd4a:	bd80      	pop	{r7, pc}
   1bd4c:	200040ac 	.word	0x200040ac
   1bd50:	00018f31 	.word	0x00018f31
   1bd54:	20004110 	.word	0x20004110
   1bd58:	20004124 	.word	0x20004124
   1bd5c:	20004140 	.word	0x20004140
   1bd60:	20004154 	.word	0x20004154
   1bd64:	2000416c 	.word	0x2000416c
   1bd68:	20004138 	.word	0x20004138
   1bd6c:	2000413c 	.word	0x2000413c

0001bd70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   1bd70:	b580      	push	{r7, lr}
   1bd72:	b082      	sub	sp, #8
   1bd74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1bd76:	e01a      	b.n	1bdae <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
   1bd78:	4b11      	ldr	r3, [pc, #68]	; (1bdc0 <prvCheckTasksWaitingTermination+0x50>)
   1bd7a:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   1bd7c:	4b11      	ldr	r3, [pc, #68]	; (1bdc4 <prvCheckTasksWaitingTermination+0x54>)
   1bd7e:	68db      	ldr	r3, [r3, #12]
   1bd80:	68db      	ldr	r3, [r3, #12]
   1bd82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1bd84:	687b      	ldr	r3, [r7, #4]
   1bd86:	3304      	adds	r3, #4
   1bd88:	0018      	movs	r0, r3
   1bd8a:	4b0f      	ldr	r3, [pc, #60]	; (1bdc8 <prvCheckTasksWaitingTermination+0x58>)
   1bd8c:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
   1bd8e:	4b0f      	ldr	r3, [pc, #60]	; (1bdcc <prvCheckTasksWaitingTermination+0x5c>)
   1bd90:	681b      	ldr	r3, [r3, #0]
   1bd92:	1e5a      	subs	r2, r3, #1
   1bd94:	4b0d      	ldr	r3, [pc, #52]	; (1bdcc <prvCheckTasksWaitingTermination+0x5c>)
   1bd96:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
   1bd98:	4b0d      	ldr	r3, [pc, #52]	; (1bdd0 <prvCheckTasksWaitingTermination+0x60>)
   1bd9a:	681b      	ldr	r3, [r3, #0]
   1bd9c:	1e5a      	subs	r2, r3, #1
   1bd9e:	4b0c      	ldr	r3, [pc, #48]	; (1bdd0 <prvCheckTasksWaitingTermination+0x60>)
   1bda0:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
   1bda2:	4b0c      	ldr	r3, [pc, #48]	; (1bdd4 <prvCheckTasksWaitingTermination+0x64>)
   1bda4:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
   1bda6:	687b      	ldr	r3, [r7, #4]
   1bda8:	0018      	movs	r0, r3
   1bdaa:	4b0b      	ldr	r3, [pc, #44]	; (1bdd8 <prvCheckTasksWaitingTermination+0x68>)
   1bdac:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1bdae:	4b08      	ldr	r3, [pc, #32]	; (1bdd0 <prvCheckTasksWaitingTermination+0x60>)
   1bdb0:	681b      	ldr	r3, [r3, #0]
   1bdb2:	2b00      	cmp	r3, #0
   1bdb4:	d1e0      	bne.n	1bd78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   1bdb6:	46c0      	nop			; (mov r8, r8)
   1bdb8:	46bd      	mov	sp, r7
   1bdba:	b002      	add	sp, #8
   1bdbc:	bd80      	pop	{r7, pc}
   1bdbe:	46c0      	nop			; (mov r8, r8)
   1bdc0:	000191b9 	.word	0x000191b9
   1bdc4:	20004154 	.word	0x20004154
   1bdc8:	00019033 	.word	0x00019033
   1bdcc:	20004180 	.word	0x20004180
   1bdd0:	20004168 	.word	0x20004168
   1bdd4:	000191dd 	.word	0x000191dd
   1bdd8:	0001be4d 	.word	0x0001be4d

0001bddc <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
   1bddc:	b580      	push	{r7, lr}
   1bdde:	b084      	sub	sp, #16
   1bde0:	af00      	add	r7, sp, #0
   1bde2:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
   1bde4:	2300      	movs	r3, #0
   1bde6:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1bde8:	e005      	b.n	1bdf6 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
   1bdea:	687b      	ldr	r3, [r7, #4]
   1bdec:	3301      	adds	r3, #1
   1bdee:	607b      	str	r3, [r7, #4]
			ulCount++;
   1bdf0:	68fb      	ldr	r3, [r7, #12]
   1bdf2:	3301      	adds	r3, #1
   1bdf4:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1bdf6:	687b      	ldr	r3, [r7, #4]
   1bdf8:	781b      	ldrb	r3, [r3, #0]
   1bdfa:	2ba5      	cmp	r3, #165	; 0xa5
   1bdfc:	d0f5      	beq.n	1bdea <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
   1bdfe:	68fb      	ldr	r3, [r7, #12]
   1be00:	089b      	lsrs	r3, r3, #2
   1be02:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
   1be04:	68fb      	ldr	r3, [r7, #12]
   1be06:	b29b      	uxth	r3, r3
	}
   1be08:	0018      	movs	r0, r3
   1be0a:	46bd      	mov	sp, r7
   1be0c:	b004      	add	sp, #16
   1be0e:	bd80      	pop	{r7, pc}

0001be10 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
   1be10:	b580      	push	{r7, lr}
   1be12:	b086      	sub	sp, #24
   1be14:	af00      	add	r7, sp, #0
   1be16:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
   1be18:	687b      	ldr	r3, [r7, #4]
   1be1a:	2b00      	cmp	r3, #0
   1be1c:	d102      	bne.n	1be24 <uxTaskGetStackHighWaterMark+0x14>
   1be1e:	4b09      	ldr	r3, [pc, #36]	; (1be44 <uxTaskGetStackHighWaterMark+0x34>)
   1be20:	681b      	ldr	r3, [r3, #0]
   1be22:	e000      	b.n	1be26 <uxTaskGetStackHighWaterMark+0x16>
   1be24:	687b      	ldr	r3, [r7, #4]
   1be26:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
   1be28:	697b      	ldr	r3, [r7, #20]
   1be2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1be2c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
   1be2e:	693b      	ldr	r3, [r7, #16]
   1be30:	0018      	movs	r0, r3
   1be32:	4b05      	ldr	r3, [pc, #20]	; (1be48 <uxTaskGetStackHighWaterMark+0x38>)
   1be34:	4798      	blx	r3
   1be36:	0003      	movs	r3, r0
   1be38:	60fb      	str	r3, [r7, #12]

		return uxReturn;
   1be3a:	68fb      	ldr	r3, [r7, #12]
	}
   1be3c:	0018      	movs	r0, r3
   1be3e:	46bd      	mov	sp, r7
   1be40:	b006      	add	sp, #24
   1be42:	bd80      	pop	{r7, pc}
   1be44:	200040a8 	.word	0x200040a8
   1be48:	0001bddd 	.word	0x0001bddd

0001be4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   1be4c:	b580      	push	{r7, lr}
   1be4e:	b082      	sub	sp, #8
   1be50:	af00      	add	r7, sp, #0
   1be52:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
   1be54:	687b      	ldr	r3, [r7, #4]
   1be56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1be58:	0018      	movs	r0, r3
   1be5a:	4b05      	ldr	r3, [pc, #20]	; (1be70 <prvDeleteTCB+0x24>)
   1be5c:	4798      	blx	r3
			vPortFree( pxTCB );
   1be5e:	687b      	ldr	r3, [r7, #4]
   1be60:	0018      	movs	r0, r3
   1be62:	4b03      	ldr	r3, [pc, #12]	; (1be70 <prvDeleteTCB+0x24>)
   1be64:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
   1be66:	46c0      	nop			; (mov r8, r8)
   1be68:	46bd      	mov	sp, r7
   1be6a:	b002      	add	sp, #8
   1be6c:	bd80      	pop	{r7, pc}
   1be6e:	46c0      	nop			; (mov r8, r8)
   1be70:	000193b5 	.word	0x000193b5

0001be74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   1be74:	b580      	push	{r7, lr}
   1be76:	b082      	sub	sp, #8
   1be78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1be7a:	4b0e      	ldr	r3, [pc, #56]	; (1beb4 <prvResetNextTaskUnblockTime+0x40>)
   1be7c:	681b      	ldr	r3, [r3, #0]
   1be7e:	681b      	ldr	r3, [r3, #0]
   1be80:	2b00      	cmp	r3, #0
   1be82:	d101      	bne.n	1be88 <prvResetNextTaskUnblockTime+0x14>
   1be84:	2301      	movs	r3, #1
   1be86:	e000      	b.n	1be8a <prvResetNextTaskUnblockTime+0x16>
   1be88:	2300      	movs	r3, #0
   1be8a:	2b00      	cmp	r3, #0
   1be8c:	d004      	beq.n	1be98 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   1be8e:	4b0a      	ldr	r3, [pc, #40]	; (1beb8 <prvResetNextTaskUnblockTime+0x44>)
   1be90:	2201      	movs	r2, #1
   1be92:	4252      	negs	r2, r2
   1be94:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   1be96:	e008      	b.n	1beaa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1be98:	4b06      	ldr	r3, [pc, #24]	; (1beb4 <prvResetNextTaskUnblockTime+0x40>)
   1be9a:	681b      	ldr	r3, [r3, #0]
   1be9c:	68db      	ldr	r3, [r3, #12]
   1be9e:	68db      	ldr	r3, [r3, #12]
   1bea0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1bea2:	687b      	ldr	r3, [r7, #4]
   1bea4:	685a      	ldr	r2, [r3, #4]
   1bea6:	4b04      	ldr	r3, [pc, #16]	; (1beb8 <prvResetNextTaskUnblockTime+0x44>)
   1bea8:	601a      	str	r2, [r3, #0]
}
   1beaa:	46c0      	nop			; (mov r8, r8)
   1beac:	46bd      	mov	sp, r7
   1beae:	b002      	add	sp, #8
   1beb0:	bd80      	pop	{r7, pc}
   1beb2:	46c0      	nop			; (mov r8, r8)
   1beb4:	20004138 	.word	0x20004138
   1beb8:	200041a0 	.word	0x200041a0

0001bebc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
   1bebc:	b580      	push	{r7, lr}
   1bebe:	b082      	sub	sp, #8
   1bec0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   1bec2:	4b04      	ldr	r3, [pc, #16]	; (1bed4 <xTaskGetCurrentTaskHandle+0x18>)
   1bec4:	681b      	ldr	r3, [r3, #0]
   1bec6:	607b      	str	r3, [r7, #4]

		return xReturn;
   1bec8:	687b      	ldr	r3, [r7, #4]
	}
   1beca:	0018      	movs	r0, r3
   1becc:	46bd      	mov	sp, r7
   1bece:	b002      	add	sp, #8
   1bed0:	bd80      	pop	{r7, pc}
   1bed2:	46c0      	nop			; (mov r8, r8)
   1bed4:	200040a8 	.word	0x200040a8

0001bed8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   1bed8:	b580      	push	{r7, lr}
   1beda:	b082      	sub	sp, #8
   1bedc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   1bede:	4b0a      	ldr	r3, [pc, #40]	; (1bf08 <xTaskGetSchedulerState+0x30>)
   1bee0:	681b      	ldr	r3, [r3, #0]
   1bee2:	2b00      	cmp	r3, #0
   1bee4:	d102      	bne.n	1beec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   1bee6:	2301      	movs	r3, #1
   1bee8:	607b      	str	r3, [r7, #4]
   1beea:	e008      	b.n	1befe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1beec:	4b07      	ldr	r3, [pc, #28]	; (1bf0c <xTaskGetSchedulerState+0x34>)
   1beee:	681b      	ldr	r3, [r3, #0]
   1bef0:	2b00      	cmp	r3, #0
   1bef2:	d102      	bne.n	1befa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   1bef4:	2302      	movs	r3, #2
   1bef6:	607b      	str	r3, [r7, #4]
   1bef8:	e001      	b.n	1befe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   1befa:	2300      	movs	r3, #0
   1befc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   1befe:	687b      	ldr	r3, [r7, #4]
	}
   1bf00:	0018      	movs	r0, r3
   1bf02:	46bd      	mov	sp, r7
   1bf04:	b002      	add	sp, #8
   1bf06:	bd80      	pop	{r7, pc}
   1bf08:	2000418c 	.word	0x2000418c
   1bf0c:	200041a8 	.word	0x200041a8

0001bf10 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   1bf10:	b590      	push	{r4, r7, lr}
   1bf12:	b085      	sub	sp, #20
   1bf14:	af00      	add	r7, sp, #0
   1bf16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
   1bf18:	687b      	ldr	r3, [r7, #4]
   1bf1a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1bf1c:	2300      	movs	r3, #0
   1bf1e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
   1bf20:	687b      	ldr	r3, [r7, #4]
   1bf22:	2b00      	cmp	r3, #0
   1bf24:	d100      	bne.n	1bf28 <xTaskPriorityInherit+0x18>
   1bf26:	e09d      	b.n	1c064 <xTaskPriorityInherit+0x154>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   1bf28:	68bb      	ldr	r3, [r7, #8]
   1bf2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bf2c:	4b50      	ldr	r3, [pc, #320]	; (1c070 <xTaskPriorityInherit+0x160>)
   1bf2e:	681b      	ldr	r3, [r3, #0]
   1bf30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1bf32:	429a      	cmp	r2, r3
   1bf34:	d300      	bcc.n	1bf38 <xTaskPriorityInherit+0x28>
   1bf36:	e08c      	b.n	1c052 <xTaskPriorityInherit+0x142>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1bf38:	68bb      	ldr	r3, [r7, #8]
   1bf3a:	699b      	ldr	r3, [r3, #24]
   1bf3c:	2b00      	cmp	r3, #0
   1bf3e:	db06      	blt.n	1bf4e <xTaskPriorityInherit+0x3e>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1bf40:	4b4b      	ldr	r3, [pc, #300]	; (1c070 <xTaskPriorityInherit+0x160>)
   1bf42:	681b      	ldr	r3, [r3, #0]
   1bf44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1bf46:	2205      	movs	r2, #5
   1bf48:	1ad2      	subs	r2, r2, r3
   1bf4a:	68bb      	ldr	r3, [r7, #8]
   1bf4c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   1bf4e:	68bb      	ldr	r3, [r7, #8]
   1bf50:	6959      	ldr	r1, [r3, #20]
   1bf52:	68bb      	ldr	r3, [r7, #8]
   1bf54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bf56:	0013      	movs	r3, r2
   1bf58:	009b      	lsls	r3, r3, #2
   1bf5a:	189b      	adds	r3, r3, r2
   1bf5c:	009b      	lsls	r3, r3, #2
   1bf5e:	4a45      	ldr	r2, [pc, #276]	; (1c074 <xTaskPriorityInherit+0x164>)
   1bf60:	189b      	adds	r3, r3, r2
   1bf62:	4299      	cmp	r1, r3
   1bf64:	d101      	bne.n	1bf6a <xTaskPriorityInherit+0x5a>
   1bf66:	2301      	movs	r3, #1
   1bf68:	e000      	b.n	1bf6c <xTaskPriorityInherit+0x5c>
   1bf6a:	2300      	movs	r3, #0
   1bf6c:	2b00      	cmp	r3, #0
   1bf6e:	d037      	beq.n	1bfe0 <xTaskPriorityInherit+0xd0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1bf70:	68bb      	ldr	r3, [r7, #8]
   1bf72:	3304      	adds	r3, #4
   1bf74:	0018      	movs	r0, r3
   1bf76:	4b40      	ldr	r3, [pc, #256]	; (1c078 <xTaskPriorityInherit+0x168>)
   1bf78:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1bf7a:	4b3d      	ldr	r3, [pc, #244]	; (1c070 <xTaskPriorityInherit+0x160>)
   1bf7c:	681b      	ldr	r3, [r3, #0]
   1bf7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bf80:	68bb      	ldr	r3, [r7, #8]
   1bf82:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   1bf84:	68bb      	ldr	r3, [r7, #8]
   1bf86:	0018      	movs	r0, r3
   1bf88:	4b3c      	ldr	r3, [pc, #240]	; (1c07c <xTaskPriorityInherit+0x16c>)
   1bf8a:	4798      	blx	r3
   1bf8c:	0003      	movs	r3, r0
   1bf8e:	001a      	movs	r2, r3
   1bf90:	4b3b      	ldr	r3, [pc, #236]	; (1c080 <xTaskPriorityInherit+0x170>)
   1bf92:	881b      	ldrh	r3, [r3, #0]
   1bf94:	4013      	ands	r3, r2
   1bf96:	b29b      	uxth	r3, r3
   1bf98:	2b00      	cmp	r3, #0
   1bf9a:	d008      	beq.n	1bfae <xTaskPriorityInherit+0x9e>
   1bf9c:	68bb      	ldr	r3, [r7, #8]
   1bf9e:	0018      	movs	r0, r3
   1bfa0:	4b38      	ldr	r3, [pc, #224]	; (1c084 <xTaskPriorityInherit+0x174>)
   1bfa2:	4798      	blx	r3
   1bfa4:	0003      	movs	r3, r0
   1bfa6:	b2db      	uxtb	r3, r3
   1bfa8:	0018      	movs	r0, r3
   1bfaa:	4b37      	ldr	r3, [pc, #220]	; (1c088 <xTaskPriorityInherit+0x178>)
   1bfac:	4798      	blx	r3
   1bfae:	68bb      	ldr	r3, [r7, #8]
   1bfb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bfb2:	4b36      	ldr	r3, [pc, #216]	; (1c08c <xTaskPriorityInherit+0x17c>)
   1bfb4:	681b      	ldr	r3, [r3, #0]
   1bfb6:	429a      	cmp	r2, r3
   1bfb8:	d903      	bls.n	1bfc2 <xTaskPriorityInherit+0xb2>
   1bfba:	68bb      	ldr	r3, [r7, #8]
   1bfbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bfbe:	4b33      	ldr	r3, [pc, #204]	; (1c08c <xTaskPriorityInherit+0x17c>)
   1bfc0:	601a      	str	r2, [r3, #0]
   1bfc2:	68bb      	ldr	r3, [r7, #8]
   1bfc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bfc6:	0013      	movs	r3, r2
   1bfc8:	009b      	lsls	r3, r3, #2
   1bfca:	189b      	adds	r3, r3, r2
   1bfcc:	009b      	lsls	r3, r3, #2
   1bfce:	4a29      	ldr	r2, [pc, #164]	; (1c074 <xTaskPriorityInherit+0x164>)
   1bfd0:	189a      	adds	r2, r3, r2
   1bfd2:	68bb      	ldr	r3, [r7, #8]
   1bfd4:	3304      	adds	r3, #4
   1bfd6:	0019      	movs	r1, r3
   1bfd8:	0010      	movs	r0, r2
   1bfda:	4b2d      	ldr	r3, [pc, #180]	; (1c090 <xTaskPriorityInherit+0x180>)
   1bfdc:	4798      	blx	r3
   1bfde:	e004      	b.n	1bfea <xTaskPriorityInherit+0xda>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1bfe0:	4b23      	ldr	r3, [pc, #140]	; (1c070 <xTaskPriorityInherit+0x160>)
   1bfe2:	681b      	ldr	r3, [r3, #0]
   1bfe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bfe6:	68bb      	ldr	r3, [r7, #8]
   1bfe8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
   1bfea:	68bb      	ldr	r3, [r7, #8]
   1bfec:	0018      	movs	r0, r3
   1bfee:	4b23      	ldr	r3, [pc, #140]	; (1c07c <xTaskPriorityInherit+0x16c>)
   1bff0:	4798      	blx	r3
   1bff2:	0003      	movs	r3, r0
   1bff4:	001a      	movs	r2, r3
   1bff6:	4b22      	ldr	r3, [pc, #136]	; (1c080 <xTaskPriorityInherit+0x170>)
   1bff8:	881b      	ldrh	r3, [r3, #0]
   1bffa:	4013      	ands	r3, r2
   1bffc:	b29b      	uxth	r3, r3
   1bffe:	2b00      	cmp	r3, #0
   1c000:	d024      	beq.n	1c04c <xTaskPriorityInherit+0x13c>
   1c002:	68bb      	ldr	r3, [r7, #8]
   1c004:	0018      	movs	r0, r3
   1c006:	4b1f      	ldr	r3, [pc, #124]	; (1c084 <xTaskPriorityInherit+0x174>)
   1c008:	4798      	blx	r3
   1c00a:	0003      	movs	r3, r0
   1c00c:	b2db      	uxtb	r3, r3
   1c00e:	001c      	movs	r4, r3
   1c010:	68bb      	ldr	r3, [r7, #8]
   1c012:	0018      	movs	r0, r3
   1c014:	4b1b      	ldr	r3, [pc, #108]	; (1c084 <xTaskPriorityInherit+0x174>)
   1c016:	4798      	blx	r3
   1c018:	0003      	movs	r3, r0
   1c01a:	b2db      	uxtb	r3, r3
   1c01c:	0019      	movs	r1, r3
   1c01e:	2003      	movs	r0, #3
   1c020:	4b1c      	ldr	r3, [pc, #112]	; (1c094 <xTaskPriorityInherit+0x184>)
   1c022:	4798      	blx	r3
   1c024:	0003      	movs	r3, r0
   1c026:	0022      	movs	r2, r4
   1c028:	2103      	movs	r1, #3
   1c02a:	208e      	movs	r0, #142	; 0x8e
   1c02c:	4c1a      	ldr	r4, [pc, #104]	; (1c098 <xTaskPriorityInherit+0x188>)
   1c02e:	47a0      	blx	r4
   1c030:	68bb      	ldr	r3, [r7, #8]
   1c032:	0018      	movs	r0, r3
   1c034:	4b13      	ldr	r3, [pc, #76]	; (1c084 <xTaskPriorityInherit+0x174>)
   1c036:	4798      	blx	r3
   1c038:	0003      	movs	r3, r0
   1c03a:	b2d9      	uxtb	r1, r3
   1c03c:	4b0c      	ldr	r3, [pc, #48]	; (1c070 <xTaskPriorityInherit+0x160>)
   1c03e:	681b      	ldr	r3, [r3, #0]
   1c040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c042:	b2db      	uxtb	r3, r3
   1c044:	001a      	movs	r2, r3
   1c046:	2003      	movs	r0, #3
   1c048:	4b14      	ldr	r3, [pc, #80]	; (1c09c <xTaskPriorityInherit+0x18c>)
   1c04a:	4798      	blx	r3

				/* Inheritance occurred. */
				xReturn = pdTRUE;
   1c04c:	2301      	movs	r3, #1
   1c04e:	60fb      	str	r3, [r7, #12]
   1c050:	e008      	b.n	1c064 <xTaskPriorityInherit+0x154>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   1c052:	68bb      	ldr	r3, [r7, #8]
   1c054:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1c056:	4b06      	ldr	r3, [pc, #24]	; (1c070 <xTaskPriorityInherit+0x160>)
   1c058:	681b      	ldr	r3, [r3, #0]
   1c05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c05c:	429a      	cmp	r2, r3
   1c05e:	d201      	bcs.n	1c064 <xTaskPriorityInherit+0x154>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
   1c060:	2301      	movs	r3, #1
   1c062:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1c064:	68fb      	ldr	r3, [r7, #12]
	}
   1c066:	0018      	movs	r0, r3
   1c068:	46bd      	mov	sp, r7
   1c06a:	b005      	add	sp, #20
   1c06c:	bd90      	pop	{r4, r7, pc}
   1c06e:	46c0      	nop			; (mov r8, r8)
   1c070:	200040a8 	.word	0x200040a8
   1c074:	200040ac 	.word	0x200040ac
   1c078:	00019033 	.word	0x00019033
   1c07c:	000171b9 	.word	0x000171b9
   1c080:	20000100 	.word	0x20000100
   1c084:	00017199 	.word	0x00017199
   1c088:	00017969 	.word	0x00017969
   1c08c:	20004188 	.word	0x20004188
   1c090:	00018f83 	.word	0x00018f83
   1c094:	00018171 	.word	0x00018171
   1c098:	00017ce1 	.word	0x00017ce1
   1c09c:	000180cd 	.word	0x000180cd

0001c0a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   1c0a0:	b590      	push	{r4, r7, lr}
   1c0a2:	b085      	sub	sp, #20
   1c0a4:	af00      	add	r7, sp, #0
   1c0a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1c0a8:	687b      	ldr	r3, [r7, #4]
   1c0aa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1c0ac:	2300      	movs	r3, #0
   1c0ae:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1c0b0:	687b      	ldr	r3, [r7, #4]
   1c0b2:	2b00      	cmp	r3, #0
   1c0b4:	d100      	bne.n	1c0b8 <xTaskPriorityDisinherit+0x18>
   1c0b6:	e089      	b.n	1c1cc <xTaskPriorityDisinherit+0x12c>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
   1c0b8:	4b47      	ldr	r3, [pc, #284]	; (1c1d8 <xTaskPriorityDisinherit+0x138>)
   1c0ba:	681b      	ldr	r3, [r3, #0]
   1c0bc:	68ba      	ldr	r2, [r7, #8]
   1c0be:	429a      	cmp	r2, r3
   1c0c0:	d001      	beq.n	1c0c6 <xTaskPriorityDisinherit+0x26>
   1c0c2:	b672      	cpsid	i
   1c0c4:	e7fe      	b.n	1c0c4 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
   1c0c6:	68bb      	ldr	r3, [r7, #8]
   1c0c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c0ca:	2b00      	cmp	r3, #0
   1c0cc:	d101      	bne.n	1c0d2 <xTaskPriorityDisinherit+0x32>
   1c0ce:	b672      	cpsid	i
   1c0d0:	e7fe      	b.n	1c0d0 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
   1c0d2:	68bb      	ldr	r3, [r7, #8]
   1c0d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c0d6:	1e5a      	subs	r2, r3, #1
   1c0d8:	68bb      	ldr	r3, [r7, #8]
   1c0da:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   1c0dc:	68bb      	ldr	r3, [r7, #8]
   1c0de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c0e0:	68bb      	ldr	r3, [r7, #8]
   1c0e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1c0e4:	429a      	cmp	r2, r3
   1c0e6:	d071      	beq.n	1c1cc <xTaskPriorityDisinherit+0x12c>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   1c0e8:	68bb      	ldr	r3, [r7, #8]
   1c0ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c0ec:	2b00      	cmp	r3, #0
   1c0ee:	d16d      	bne.n	1c1cc <xTaskPriorityDisinherit+0x12c>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1c0f0:	68bb      	ldr	r3, [r7, #8]
   1c0f2:	3304      	adds	r3, #4
   1c0f4:	0018      	movs	r0, r3
   1c0f6:	4b39      	ldr	r3, [pc, #228]	; (1c1dc <xTaskPriorityDisinherit+0x13c>)
   1c0f8:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1c0fa:	68bb      	ldr	r3, [r7, #8]
   1c0fc:	0018      	movs	r0, r3
   1c0fe:	4b38      	ldr	r3, [pc, #224]	; (1c1e0 <xTaskPriorityDisinherit+0x140>)
   1c100:	4798      	blx	r3
   1c102:	0003      	movs	r3, r0
   1c104:	001a      	movs	r2, r3
   1c106:	4b37      	ldr	r3, [pc, #220]	; (1c1e4 <xTaskPriorityDisinherit+0x144>)
   1c108:	881b      	ldrh	r3, [r3, #0]
   1c10a:	4013      	ands	r3, r2
   1c10c:	b29b      	uxth	r3, r3
   1c10e:	2b00      	cmp	r3, #0
   1c110:	d023      	beq.n	1c15a <xTaskPriorityDisinherit+0xba>
   1c112:	68bb      	ldr	r3, [r7, #8]
   1c114:	0018      	movs	r0, r3
   1c116:	4b34      	ldr	r3, [pc, #208]	; (1c1e8 <xTaskPriorityDisinherit+0x148>)
   1c118:	4798      	blx	r3
   1c11a:	0003      	movs	r3, r0
   1c11c:	b2db      	uxtb	r3, r3
   1c11e:	001c      	movs	r4, r3
   1c120:	68bb      	ldr	r3, [r7, #8]
   1c122:	0018      	movs	r0, r3
   1c124:	4b30      	ldr	r3, [pc, #192]	; (1c1e8 <xTaskPriorityDisinherit+0x148>)
   1c126:	4798      	blx	r3
   1c128:	0003      	movs	r3, r0
   1c12a:	b2db      	uxtb	r3, r3
   1c12c:	0019      	movs	r1, r3
   1c12e:	2003      	movs	r0, #3
   1c130:	4b2e      	ldr	r3, [pc, #184]	; (1c1ec <xTaskPriorityDisinherit+0x14c>)
   1c132:	4798      	blx	r3
   1c134:	0003      	movs	r3, r0
   1c136:	0022      	movs	r2, r4
   1c138:	2103      	movs	r1, #3
   1c13a:	208f      	movs	r0, #143	; 0x8f
   1c13c:	4c2c      	ldr	r4, [pc, #176]	; (1c1f0 <xTaskPriorityDisinherit+0x150>)
   1c13e:	47a0      	blx	r4
   1c140:	68bb      	ldr	r3, [r7, #8]
   1c142:	0018      	movs	r0, r3
   1c144:	4b28      	ldr	r3, [pc, #160]	; (1c1e8 <xTaskPriorityDisinherit+0x148>)
   1c146:	4798      	blx	r3
   1c148:	0003      	movs	r3, r0
   1c14a:	b2d9      	uxtb	r1, r3
   1c14c:	68bb      	ldr	r3, [r7, #8]
   1c14e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1c150:	b2db      	uxtb	r3, r3
   1c152:	001a      	movs	r2, r3
   1c154:	2003      	movs	r0, #3
   1c156:	4b27      	ldr	r3, [pc, #156]	; (1c1f4 <xTaskPriorityDisinherit+0x154>)
   1c158:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   1c15a:	68bb      	ldr	r3, [r7, #8]
   1c15c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1c15e:	68bb      	ldr	r3, [r7, #8]
   1c160:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c162:	68bb      	ldr	r3, [r7, #8]
   1c164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c166:	2205      	movs	r2, #5
   1c168:	1ad2      	subs	r2, r2, r3
   1c16a:	68bb      	ldr	r3, [r7, #8]
   1c16c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   1c16e:	68bb      	ldr	r3, [r7, #8]
   1c170:	0018      	movs	r0, r3
   1c172:	4b1b      	ldr	r3, [pc, #108]	; (1c1e0 <xTaskPriorityDisinherit+0x140>)
   1c174:	4798      	blx	r3
   1c176:	0003      	movs	r3, r0
   1c178:	001a      	movs	r2, r3
   1c17a:	4b1a      	ldr	r3, [pc, #104]	; (1c1e4 <xTaskPriorityDisinherit+0x144>)
   1c17c:	881b      	ldrh	r3, [r3, #0]
   1c17e:	4013      	ands	r3, r2
   1c180:	b29b      	uxth	r3, r3
   1c182:	2b00      	cmp	r3, #0
   1c184:	d008      	beq.n	1c198 <xTaskPriorityDisinherit+0xf8>
   1c186:	68bb      	ldr	r3, [r7, #8]
   1c188:	0018      	movs	r0, r3
   1c18a:	4b17      	ldr	r3, [pc, #92]	; (1c1e8 <xTaskPriorityDisinherit+0x148>)
   1c18c:	4798      	blx	r3
   1c18e:	0003      	movs	r3, r0
   1c190:	b2db      	uxtb	r3, r3
   1c192:	0018      	movs	r0, r3
   1c194:	4b18      	ldr	r3, [pc, #96]	; (1c1f8 <xTaskPriorityDisinherit+0x158>)
   1c196:	4798      	blx	r3
   1c198:	68bb      	ldr	r3, [r7, #8]
   1c19a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c19c:	4b17      	ldr	r3, [pc, #92]	; (1c1fc <xTaskPriorityDisinherit+0x15c>)
   1c19e:	681b      	ldr	r3, [r3, #0]
   1c1a0:	429a      	cmp	r2, r3
   1c1a2:	d903      	bls.n	1c1ac <xTaskPriorityDisinherit+0x10c>
   1c1a4:	68bb      	ldr	r3, [r7, #8]
   1c1a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c1a8:	4b14      	ldr	r3, [pc, #80]	; (1c1fc <xTaskPriorityDisinherit+0x15c>)
   1c1aa:	601a      	str	r2, [r3, #0]
   1c1ac:	68bb      	ldr	r3, [r7, #8]
   1c1ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c1b0:	0013      	movs	r3, r2
   1c1b2:	009b      	lsls	r3, r3, #2
   1c1b4:	189b      	adds	r3, r3, r2
   1c1b6:	009b      	lsls	r3, r3, #2
   1c1b8:	4a11      	ldr	r2, [pc, #68]	; (1c200 <xTaskPriorityDisinherit+0x160>)
   1c1ba:	189a      	adds	r2, r3, r2
   1c1bc:	68bb      	ldr	r3, [r7, #8]
   1c1be:	3304      	adds	r3, #4
   1c1c0:	0019      	movs	r1, r3
   1c1c2:	0010      	movs	r0, r2
   1c1c4:	4b0f      	ldr	r3, [pc, #60]	; (1c204 <xTaskPriorityDisinherit+0x164>)
   1c1c6:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
   1c1c8:	2301      	movs	r3, #1
   1c1ca:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1c1cc:	68fb      	ldr	r3, [r7, #12]
	}
   1c1ce:	0018      	movs	r0, r3
   1c1d0:	46bd      	mov	sp, r7
   1c1d2:	b005      	add	sp, #20
   1c1d4:	bd90      	pop	{r4, r7, pc}
   1c1d6:	46c0      	nop			; (mov r8, r8)
   1c1d8:	200040a8 	.word	0x200040a8
   1c1dc:	00019033 	.word	0x00019033
   1c1e0:	000171b9 	.word	0x000171b9
   1c1e4:	20000100 	.word	0x20000100
   1c1e8:	00017199 	.word	0x00017199
   1c1ec:	00018171 	.word	0x00018171
   1c1f0:	00017ce1 	.word	0x00017ce1
   1c1f4:	000180cd 	.word	0x000180cd
   1c1f8:	00017969 	.word	0x00017969
   1c1fc:	20004188 	.word	0x20004188
   1c200:	200040ac 	.word	0x200040ac
   1c204:	00018f83 	.word	0x00018f83

0001c208 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
   1c208:	b590      	push	{r4, r7, lr}
   1c20a:	b087      	sub	sp, #28
   1c20c:	af00      	add	r7, sp, #0
   1c20e:	6078      	str	r0, [r7, #4]
   1c210:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1c212:	687b      	ldr	r3, [r7, #4]
   1c214:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
   1c216:	2301      	movs	r3, #1
   1c218:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1c21a:	687b      	ldr	r3, [r7, #4]
   1c21c:	2b00      	cmp	r3, #0
   1c21e:	d100      	bne.n	1c222 <vTaskPriorityDisinheritAfterTimeout+0x1a>
   1c220:	e0a4      	b.n	1c36c <vTaskPriorityDisinheritAfterTimeout+0x164>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
   1c222:	693b      	ldr	r3, [r7, #16]
   1c224:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c226:	2b00      	cmp	r3, #0
   1c228:	d101      	bne.n	1c22e <vTaskPriorityDisinheritAfterTimeout+0x26>
   1c22a:	b672      	cpsid	i
   1c22c:	e7fe      	b.n	1c22c <vTaskPriorityDisinheritAfterTimeout+0x24>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
   1c22e:	693b      	ldr	r3, [r7, #16]
   1c230:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1c232:	683b      	ldr	r3, [r7, #0]
   1c234:	429a      	cmp	r2, r3
   1c236:	d202      	bcs.n	1c23e <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
   1c238:	683b      	ldr	r3, [r7, #0]
   1c23a:	617b      	str	r3, [r7, #20]
   1c23c:	e002      	b.n	1c244 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
   1c23e:	693b      	ldr	r3, [r7, #16]
   1c240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1c242:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
   1c244:	693b      	ldr	r3, [r7, #16]
   1c246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c248:	697b      	ldr	r3, [r7, #20]
   1c24a:	429a      	cmp	r2, r3
   1c24c:	d100      	bne.n	1c250 <vTaskPriorityDisinheritAfterTimeout+0x48>
   1c24e:	e08d      	b.n	1c36c <vTaskPriorityDisinheritAfterTimeout+0x164>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   1c250:	693b      	ldr	r3, [r7, #16]
   1c252:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1c254:	68fb      	ldr	r3, [r7, #12]
   1c256:	429a      	cmp	r2, r3
   1c258:	d000      	beq.n	1c25c <vTaskPriorityDisinheritAfterTimeout+0x54>
   1c25a:	e087      	b.n	1c36c <vTaskPriorityDisinheritAfterTimeout+0x164>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
   1c25c:	4b45      	ldr	r3, [pc, #276]	; (1c374 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
   1c25e:	681b      	ldr	r3, [r3, #0]
   1c260:	693a      	ldr	r2, [r7, #16]
   1c262:	429a      	cmp	r2, r3
   1c264:	d101      	bne.n	1c26a <vTaskPriorityDisinheritAfterTimeout+0x62>
   1c266:	b672      	cpsid	i
   1c268:	e7fe      	b.n	1c268 <vTaskPriorityDisinheritAfterTimeout+0x60>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1c26a:	693b      	ldr	r3, [r7, #16]
   1c26c:	0018      	movs	r0, r3
   1c26e:	4b42      	ldr	r3, [pc, #264]	; (1c378 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1c270:	4798      	blx	r3
   1c272:	0003      	movs	r3, r0
   1c274:	001a      	movs	r2, r3
   1c276:	4b41      	ldr	r3, [pc, #260]	; (1c37c <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1c278:	881b      	ldrh	r3, [r3, #0]
   1c27a:	4013      	ands	r3, r2
   1c27c:	b29b      	uxth	r3, r3
   1c27e:	2b00      	cmp	r3, #0
   1c280:	d023      	beq.n	1c2ca <vTaskPriorityDisinheritAfterTimeout+0xc2>
   1c282:	693b      	ldr	r3, [r7, #16]
   1c284:	0018      	movs	r0, r3
   1c286:	4b3e      	ldr	r3, [pc, #248]	; (1c380 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1c288:	4798      	blx	r3
   1c28a:	0003      	movs	r3, r0
   1c28c:	b2db      	uxtb	r3, r3
   1c28e:	001c      	movs	r4, r3
   1c290:	693b      	ldr	r3, [r7, #16]
   1c292:	0018      	movs	r0, r3
   1c294:	4b3a      	ldr	r3, [pc, #232]	; (1c380 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1c296:	4798      	blx	r3
   1c298:	0003      	movs	r3, r0
   1c29a:	b2db      	uxtb	r3, r3
   1c29c:	0019      	movs	r1, r3
   1c29e:	2003      	movs	r0, #3
   1c2a0:	4b38      	ldr	r3, [pc, #224]	; (1c384 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
   1c2a2:	4798      	blx	r3
   1c2a4:	0003      	movs	r3, r0
   1c2a6:	0022      	movs	r2, r4
   1c2a8:	2103      	movs	r1, #3
   1c2aa:	208f      	movs	r0, #143	; 0x8f
   1c2ac:	4c36      	ldr	r4, [pc, #216]	; (1c388 <vTaskPriorityDisinheritAfterTimeout+0x180>)
   1c2ae:	47a0      	blx	r4
   1c2b0:	693b      	ldr	r3, [r7, #16]
   1c2b2:	0018      	movs	r0, r3
   1c2b4:	4b32      	ldr	r3, [pc, #200]	; (1c380 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1c2b6:	4798      	blx	r3
   1c2b8:	0003      	movs	r3, r0
   1c2ba:	b2d9      	uxtb	r1, r3
   1c2bc:	693b      	ldr	r3, [r7, #16]
   1c2be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1c2c0:	b2db      	uxtb	r3, r3
   1c2c2:	001a      	movs	r2, r3
   1c2c4:	2003      	movs	r0, #3
   1c2c6:	4b31      	ldr	r3, [pc, #196]	; (1c38c <vTaskPriorityDisinheritAfterTimeout+0x184>)
   1c2c8:	4798      	blx	r3
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
   1c2ca:	693b      	ldr	r3, [r7, #16]
   1c2cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c2ce:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
   1c2d0:	693b      	ldr	r3, [r7, #16]
   1c2d2:	697a      	ldr	r2, [r7, #20]
   1c2d4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1c2d6:	693b      	ldr	r3, [r7, #16]
   1c2d8:	699b      	ldr	r3, [r3, #24]
   1c2da:	2b00      	cmp	r3, #0
   1c2dc:	db04      	blt.n	1c2e8 <vTaskPriorityDisinheritAfterTimeout+0xe0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c2de:	697b      	ldr	r3, [r7, #20]
   1c2e0:	2205      	movs	r2, #5
   1c2e2:	1ad2      	subs	r2, r2, r3
   1c2e4:	693b      	ldr	r3, [r7, #16]
   1c2e6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   1c2e8:	693b      	ldr	r3, [r7, #16]
   1c2ea:	6959      	ldr	r1, [r3, #20]
   1c2ec:	68ba      	ldr	r2, [r7, #8]
   1c2ee:	0013      	movs	r3, r2
   1c2f0:	009b      	lsls	r3, r3, #2
   1c2f2:	189b      	adds	r3, r3, r2
   1c2f4:	009b      	lsls	r3, r3, #2
   1c2f6:	4a26      	ldr	r2, [pc, #152]	; (1c390 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1c2f8:	189b      	adds	r3, r3, r2
   1c2fa:	4299      	cmp	r1, r3
   1c2fc:	d101      	bne.n	1c302 <vTaskPriorityDisinheritAfterTimeout+0xfa>
   1c2fe:	2301      	movs	r3, #1
   1c300:	e000      	b.n	1c304 <vTaskPriorityDisinheritAfterTimeout+0xfc>
   1c302:	2300      	movs	r3, #0
   1c304:	2b00      	cmp	r3, #0
   1c306:	d031      	beq.n	1c36c <vTaskPriorityDisinheritAfterTimeout+0x164>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1c308:	693b      	ldr	r3, [r7, #16]
   1c30a:	3304      	adds	r3, #4
   1c30c:	0018      	movs	r0, r3
   1c30e:	4b21      	ldr	r3, [pc, #132]	; (1c394 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
   1c310:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
   1c312:	693b      	ldr	r3, [r7, #16]
   1c314:	0018      	movs	r0, r3
   1c316:	4b18      	ldr	r3, [pc, #96]	; (1c378 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1c318:	4798      	blx	r3
   1c31a:	0003      	movs	r3, r0
   1c31c:	001a      	movs	r2, r3
   1c31e:	4b17      	ldr	r3, [pc, #92]	; (1c37c <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1c320:	881b      	ldrh	r3, [r3, #0]
   1c322:	4013      	ands	r3, r2
   1c324:	b29b      	uxth	r3, r3
   1c326:	2b00      	cmp	r3, #0
   1c328:	d008      	beq.n	1c33c <vTaskPriorityDisinheritAfterTimeout+0x134>
   1c32a:	693b      	ldr	r3, [r7, #16]
   1c32c:	0018      	movs	r0, r3
   1c32e:	4b14      	ldr	r3, [pc, #80]	; (1c380 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1c330:	4798      	blx	r3
   1c332:	0003      	movs	r3, r0
   1c334:	b2db      	uxtb	r3, r3
   1c336:	0018      	movs	r0, r3
   1c338:	4b17      	ldr	r3, [pc, #92]	; (1c398 <vTaskPriorityDisinheritAfterTimeout+0x190>)
   1c33a:	4798      	blx	r3
   1c33c:	693b      	ldr	r3, [r7, #16]
   1c33e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c340:	4b16      	ldr	r3, [pc, #88]	; (1c39c <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1c342:	681b      	ldr	r3, [r3, #0]
   1c344:	429a      	cmp	r2, r3
   1c346:	d903      	bls.n	1c350 <vTaskPriorityDisinheritAfterTimeout+0x148>
   1c348:	693b      	ldr	r3, [r7, #16]
   1c34a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c34c:	4b13      	ldr	r3, [pc, #76]	; (1c39c <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1c34e:	601a      	str	r2, [r3, #0]
   1c350:	693b      	ldr	r3, [r7, #16]
   1c352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c354:	0013      	movs	r3, r2
   1c356:	009b      	lsls	r3, r3, #2
   1c358:	189b      	adds	r3, r3, r2
   1c35a:	009b      	lsls	r3, r3, #2
   1c35c:	4a0c      	ldr	r2, [pc, #48]	; (1c390 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1c35e:	189a      	adds	r2, r3, r2
   1c360:	693b      	ldr	r3, [r7, #16]
   1c362:	3304      	adds	r3, #4
   1c364:	0019      	movs	r1, r3
   1c366:	0010      	movs	r0, r2
   1c368:	4b0d      	ldr	r3, [pc, #52]	; (1c3a0 <vTaskPriorityDisinheritAfterTimeout+0x198>)
   1c36a:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1c36c:	46c0      	nop			; (mov r8, r8)
   1c36e:	46bd      	mov	sp, r7
   1c370:	b007      	add	sp, #28
   1c372:	bd90      	pop	{r4, r7, pc}
   1c374:	200040a8 	.word	0x200040a8
   1c378:	000171b9 	.word	0x000171b9
   1c37c:	20000100 	.word	0x20000100
   1c380:	00017199 	.word	0x00017199
   1c384:	00018171 	.word	0x00018171
   1c388:	00017ce1 	.word	0x00017ce1
   1c38c:	000180cd 	.word	0x000180cd
   1c390:	200040ac 	.word	0x200040ac
   1c394:	00019033 	.word	0x00019033
   1c398:	00017969 	.word	0x00017969
   1c39c:	20004188 	.word	0x20004188
   1c3a0:	00018f83 	.word	0x00018f83

0001c3a4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   1c3a4:	b580      	push	{r7, lr}
   1c3a6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   1c3a8:	4b06      	ldr	r3, [pc, #24]	; (1c3c4 <pvTaskIncrementMutexHeldCount+0x20>)
   1c3aa:	681b      	ldr	r3, [r3, #0]
   1c3ac:	2b00      	cmp	r3, #0
   1c3ae:	d004      	beq.n	1c3ba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   1c3b0:	4b04      	ldr	r3, [pc, #16]	; (1c3c4 <pvTaskIncrementMutexHeldCount+0x20>)
   1c3b2:	681b      	ldr	r3, [r3, #0]
   1c3b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1c3b6:	3201      	adds	r2, #1
   1c3b8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
   1c3ba:	4b02      	ldr	r3, [pc, #8]	; (1c3c4 <pvTaskIncrementMutexHeldCount+0x20>)
   1c3bc:	681b      	ldr	r3, [r3, #0]
	}
   1c3be:	0018      	movs	r0, r3
   1c3c0:	46bd      	mov	sp, r7
   1c3c2:	bd80      	pop	{r7, pc}
   1c3c4:	200040a8 	.word	0x200040a8

0001c3c8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   1c3c8:	b580      	push	{r7, lr}
   1c3ca:	b084      	sub	sp, #16
   1c3cc:	af00      	add	r7, sp, #0
   1c3ce:	6078      	str	r0, [r7, #4]
   1c3d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   1c3d2:	4b21      	ldr	r3, [pc, #132]	; (1c458 <prvAddCurrentTaskToDelayedList+0x90>)
   1c3d4:	681b      	ldr	r3, [r3, #0]
   1c3d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1c3d8:	4b20      	ldr	r3, [pc, #128]	; (1c45c <prvAddCurrentTaskToDelayedList+0x94>)
   1c3da:	681b      	ldr	r3, [r3, #0]
   1c3dc:	3304      	adds	r3, #4
   1c3de:	0018      	movs	r0, r3
   1c3e0:	4b1f      	ldr	r3, [pc, #124]	; (1c460 <prvAddCurrentTaskToDelayedList+0x98>)
   1c3e2:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   1c3e4:	687b      	ldr	r3, [r7, #4]
   1c3e6:	3301      	adds	r3, #1
   1c3e8:	d10b      	bne.n	1c402 <prvAddCurrentTaskToDelayedList+0x3a>
   1c3ea:	683b      	ldr	r3, [r7, #0]
   1c3ec:	2b00      	cmp	r3, #0
   1c3ee:	d008      	beq.n	1c402 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1c3f0:	4b1a      	ldr	r3, [pc, #104]	; (1c45c <prvAddCurrentTaskToDelayedList+0x94>)
   1c3f2:	681b      	ldr	r3, [r3, #0]
   1c3f4:	1d1a      	adds	r2, r3, #4
   1c3f6:	4b1b      	ldr	r3, [pc, #108]	; (1c464 <prvAddCurrentTaskToDelayedList+0x9c>)
   1c3f8:	0011      	movs	r1, r2
   1c3fa:	0018      	movs	r0, r3
   1c3fc:	4b1a      	ldr	r3, [pc, #104]	; (1c468 <prvAddCurrentTaskToDelayedList+0xa0>)
   1c3fe:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   1c400:	e026      	b.n	1c450 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
   1c402:	68fa      	ldr	r2, [r7, #12]
   1c404:	687b      	ldr	r3, [r7, #4]
   1c406:	18d3      	adds	r3, r2, r3
   1c408:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   1c40a:	4b14      	ldr	r3, [pc, #80]	; (1c45c <prvAddCurrentTaskToDelayedList+0x94>)
   1c40c:	681b      	ldr	r3, [r3, #0]
   1c40e:	68ba      	ldr	r2, [r7, #8]
   1c410:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   1c412:	68ba      	ldr	r2, [r7, #8]
   1c414:	68fb      	ldr	r3, [r7, #12]
   1c416:	429a      	cmp	r2, r3
   1c418:	d209      	bcs.n	1c42e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1c41a:	4b14      	ldr	r3, [pc, #80]	; (1c46c <prvAddCurrentTaskToDelayedList+0xa4>)
   1c41c:	681a      	ldr	r2, [r3, #0]
   1c41e:	4b0f      	ldr	r3, [pc, #60]	; (1c45c <prvAddCurrentTaskToDelayedList+0x94>)
   1c420:	681b      	ldr	r3, [r3, #0]
   1c422:	3304      	adds	r3, #4
   1c424:	0019      	movs	r1, r3
   1c426:	0010      	movs	r0, r2
   1c428:	4b11      	ldr	r3, [pc, #68]	; (1c470 <prvAddCurrentTaskToDelayedList+0xa8>)
   1c42a:	4798      	blx	r3
}
   1c42c:	e010      	b.n	1c450 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1c42e:	4b11      	ldr	r3, [pc, #68]	; (1c474 <prvAddCurrentTaskToDelayedList+0xac>)
   1c430:	681a      	ldr	r2, [r3, #0]
   1c432:	4b0a      	ldr	r3, [pc, #40]	; (1c45c <prvAddCurrentTaskToDelayedList+0x94>)
   1c434:	681b      	ldr	r3, [r3, #0]
   1c436:	3304      	adds	r3, #4
   1c438:	0019      	movs	r1, r3
   1c43a:	0010      	movs	r0, r2
   1c43c:	4b0c      	ldr	r3, [pc, #48]	; (1c470 <prvAddCurrentTaskToDelayedList+0xa8>)
   1c43e:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
   1c440:	4b0d      	ldr	r3, [pc, #52]	; (1c478 <prvAddCurrentTaskToDelayedList+0xb0>)
   1c442:	681b      	ldr	r3, [r3, #0]
   1c444:	68ba      	ldr	r2, [r7, #8]
   1c446:	429a      	cmp	r2, r3
   1c448:	d202      	bcs.n	1c450 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
   1c44a:	4b0b      	ldr	r3, [pc, #44]	; (1c478 <prvAddCurrentTaskToDelayedList+0xb0>)
   1c44c:	68ba      	ldr	r2, [r7, #8]
   1c44e:	601a      	str	r2, [r3, #0]
}
   1c450:	46c0      	nop			; (mov r8, r8)
   1c452:	46bd      	mov	sp, r7
   1c454:	b004      	add	sp, #16
   1c456:	bd80      	pop	{r7, pc}
   1c458:	20004184 	.word	0x20004184
   1c45c:	200040a8 	.word	0x200040a8
   1c460:	00019033 	.word	0x00019033
   1c464:	2000416c 	.word	0x2000416c
   1c468:	00018f83 	.word	0x00018f83
   1c46c:	2000413c 	.word	0x2000413c
   1c470:	00018fc7 	.word	0x00018fc7
   1c474:	20004138 	.word	0x20004138
   1c478:	200041a0 	.word	0x200041a0

0001c47c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   1c47c:	b590      	push	{r4, r7, lr}
   1c47e:	b085      	sub	sp, #20
   1c480:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
   1c482:	2300      	movs	r3, #0
   1c484:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   1c486:	4b0e      	ldr	r3, [pc, #56]	; (1c4c0 <xTimerCreateTimerTask+0x44>)
   1c488:	4798      	blx	r3

	if( xTimerQueue != NULL )
   1c48a:	4b0e      	ldr	r3, [pc, #56]	; (1c4c4 <xTimerCreateTimerTask+0x48>)
   1c48c:	681b      	ldr	r3, [r3, #0]
   1c48e:	2b00      	cmp	r3, #0
   1c490:	d00b      	beq.n	1c4aa <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   1c492:	490d      	ldr	r1, [pc, #52]	; (1c4c8 <xTimerCreateTimerTask+0x4c>)
   1c494:	480d      	ldr	r0, [pc, #52]	; (1c4cc <xTimerCreateTimerTask+0x50>)
   1c496:	4b0e      	ldr	r3, [pc, #56]	; (1c4d0 <xTimerCreateTimerTask+0x54>)
   1c498:	9301      	str	r3, [sp, #4]
   1c49a:	2302      	movs	r3, #2
   1c49c:	9300      	str	r3, [sp, #0]
   1c49e:	2300      	movs	r3, #0
   1c4a0:	2280      	movs	r2, #128	; 0x80
   1c4a2:	4c0c      	ldr	r4, [pc, #48]	; (1c4d4 <xTimerCreateTimerTask+0x58>)
   1c4a4:	47a0      	blx	r4
   1c4a6:	0003      	movs	r3, r0
   1c4a8:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   1c4aa:	687b      	ldr	r3, [r7, #4]
   1c4ac:	2b00      	cmp	r3, #0
   1c4ae:	d101      	bne.n	1c4b4 <xTimerCreateTimerTask+0x38>
   1c4b0:	b672      	cpsid	i
   1c4b2:	e7fe      	b.n	1c4b2 <xTimerCreateTimerTask+0x36>
	return xReturn;
   1c4b4:	687b      	ldr	r3, [r7, #4]
}
   1c4b6:	0018      	movs	r0, r3
   1c4b8:	46bd      	mov	sp, r7
   1c4ba:	b003      	add	sp, #12
   1c4bc:	bd90      	pop	{r4, r7, pc}
   1c4be:	46c0      	nop			; (mov r8, r8)
   1c4c0:	0001c9c5 	.word	0x0001c9c5
   1c4c4:	200041dc 	.word	0x200041dc
   1c4c8:	00037d04 	.word	0x00037d04
   1c4cc:	0001c5fd 	.word	0x0001c5fd
   1c4d0:	200041e0 	.word	0x200041e0
   1c4d4:	0001ae15 	.word	0x0001ae15

0001c4d8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   1c4d8:	b590      	push	{r4, r7, lr}
   1c4da:	b089      	sub	sp, #36	; 0x24
   1c4dc:	af00      	add	r7, sp, #0
   1c4de:	60f8      	str	r0, [r7, #12]
   1c4e0:	60b9      	str	r1, [r7, #8]
   1c4e2:	607a      	str	r2, [r7, #4]
   1c4e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   1c4e6:	2300      	movs	r3, #0
   1c4e8:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   1c4ea:	68fb      	ldr	r3, [r7, #12]
   1c4ec:	2b00      	cmp	r3, #0
   1c4ee:	d101      	bne.n	1c4f4 <xTimerGenericCommand+0x1c>
   1c4f0:	b672      	cpsid	i
   1c4f2:	e7fe      	b.n	1c4f2 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   1c4f4:	4b1e      	ldr	r3, [pc, #120]	; (1c570 <xTimerGenericCommand+0x98>)
   1c4f6:	681b      	ldr	r3, [r3, #0]
   1c4f8:	2b00      	cmp	r3, #0
   1c4fa:	d033      	beq.n	1c564 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   1c4fc:	2310      	movs	r3, #16
   1c4fe:	18fb      	adds	r3, r7, r3
   1c500:	68ba      	ldr	r2, [r7, #8]
   1c502:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   1c504:	2310      	movs	r3, #16
   1c506:	18fb      	adds	r3, r7, r3
   1c508:	687a      	ldr	r2, [r7, #4]
   1c50a:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   1c50c:	2310      	movs	r3, #16
   1c50e:	18fb      	adds	r3, r7, r3
   1c510:	68fa      	ldr	r2, [r7, #12]
   1c512:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   1c514:	68bb      	ldr	r3, [r7, #8]
   1c516:	2b05      	cmp	r3, #5
   1c518:	dc1a      	bgt.n	1c550 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   1c51a:	4b16      	ldr	r3, [pc, #88]	; (1c574 <xTimerGenericCommand+0x9c>)
   1c51c:	4798      	blx	r3
   1c51e:	0003      	movs	r3, r0
   1c520:	2b02      	cmp	r3, #2
   1c522:	d10a      	bne.n	1c53a <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   1c524:	4b12      	ldr	r3, [pc, #72]	; (1c570 <xTimerGenericCommand+0x98>)
   1c526:	6818      	ldr	r0, [r3, #0]
   1c528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1c52a:	2310      	movs	r3, #16
   1c52c:	18f9      	adds	r1, r7, r3
   1c52e:	2300      	movs	r3, #0
   1c530:	4c11      	ldr	r4, [pc, #68]	; (1c578 <xTimerGenericCommand+0xa0>)
   1c532:	47a0      	blx	r4
   1c534:	0003      	movs	r3, r0
   1c536:	61fb      	str	r3, [r7, #28]
   1c538:	e014      	b.n	1c564 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   1c53a:	4b0d      	ldr	r3, [pc, #52]	; (1c570 <xTimerGenericCommand+0x98>)
   1c53c:	6818      	ldr	r0, [r3, #0]
   1c53e:	2310      	movs	r3, #16
   1c540:	18f9      	adds	r1, r7, r3
   1c542:	2300      	movs	r3, #0
   1c544:	2200      	movs	r2, #0
   1c546:	4c0c      	ldr	r4, [pc, #48]	; (1c578 <xTimerGenericCommand+0xa0>)
   1c548:	47a0      	blx	r4
   1c54a:	0003      	movs	r3, r0
   1c54c:	61fb      	str	r3, [r7, #28]
   1c54e:	e009      	b.n	1c564 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1c550:	4b07      	ldr	r3, [pc, #28]	; (1c570 <xTimerGenericCommand+0x98>)
   1c552:	6818      	ldr	r0, [r3, #0]
   1c554:	683a      	ldr	r2, [r7, #0]
   1c556:	2310      	movs	r3, #16
   1c558:	18f9      	adds	r1, r7, r3
   1c55a:	2300      	movs	r3, #0
   1c55c:	4c07      	ldr	r4, [pc, #28]	; (1c57c <xTimerGenericCommand+0xa4>)
   1c55e:	47a0      	blx	r4
   1c560:	0003      	movs	r3, r0
   1c562:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   1c564:	69fb      	ldr	r3, [r7, #28]
}
   1c566:	0018      	movs	r0, r3
   1c568:	46bd      	mov	sp, r7
   1c56a:	b009      	add	sp, #36	; 0x24
   1c56c:	bd90      	pop	{r4, r7, pc}
   1c56e:	46c0      	nop			; (mov r8, r8)
   1c570:	200041dc 	.word	0x200041dc
   1c574:	0001bed9 	.word	0x0001bed9
   1c578:	0001974d 	.word	0x0001974d
   1c57c:	00019bad 	.word	0x00019bad

0001c580 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   1c580:	b590      	push	{r4, r7, lr}
   1c582:	b087      	sub	sp, #28
   1c584:	af02      	add	r7, sp, #8
   1c586:	6078      	str	r0, [r7, #4]
   1c588:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1c58a:	4b18      	ldr	r3, [pc, #96]	; (1c5ec <prvProcessExpiredTimer+0x6c>)
   1c58c:	681b      	ldr	r3, [r3, #0]
   1c58e:	68db      	ldr	r3, [r3, #12]
   1c590:	68db      	ldr	r3, [r3, #12]
   1c592:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1c594:	68fb      	ldr	r3, [r7, #12]
   1c596:	3304      	adds	r3, #4
   1c598:	0018      	movs	r0, r3
   1c59a:	4b15      	ldr	r3, [pc, #84]	; (1c5f0 <prvProcessExpiredTimer+0x70>)
   1c59c:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1c59e:	68fb      	ldr	r3, [r7, #12]
   1c5a0:	69db      	ldr	r3, [r3, #28]
   1c5a2:	2b01      	cmp	r3, #1
   1c5a4:	d119      	bne.n	1c5da <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   1c5a6:	68fb      	ldr	r3, [r7, #12]
   1c5a8:	699a      	ldr	r2, [r3, #24]
   1c5aa:	687b      	ldr	r3, [r7, #4]
   1c5ac:	18d1      	adds	r1, r2, r3
   1c5ae:	687b      	ldr	r3, [r7, #4]
   1c5b0:	683a      	ldr	r2, [r7, #0]
   1c5b2:	68f8      	ldr	r0, [r7, #12]
   1c5b4:	4c0f      	ldr	r4, [pc, #60]	; (1c5f4 <prvProcessExpiredTimer+0x74>)
   1c5b6:	47a0      	blx	r4
   1c5b8:	1e03      	subs	r3, r0, #0
   1c5ba:	d00e      	beq.n	1c5da <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1c5bc:	687a      	ldr	r2, [r7, #4]
   1c5be:	68f8      	ldr	r0, [r7, #12]
   1c5c0:	2300      	movs	r3, #0
   1c5c2:	9300      	str	r3, [sp, #0]
   1c5c4:	2300      	movs	r3, #0
   1c5c6:	2100      	movs	r1, #0
   1c5c8:	4c0b      	ldr	r4, [pc, #44]	; (1c5f8 <prvProcessExpiredTimer+0x78>)
   1c5ca:	47a0      	blx	r4
   1c5cc:	0003      	movs	r3, r0
   1c5ce:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
   1c5d0:	68bb      	ldr	r3, [r7, #8]
   1c5d2:	2b00      	cmp	r3, #0
   1c5d4:	d101      	bne.n	1c5da <prvProcessExpiredTimer+0x5a>
   1c5d6:	b672      	cpsid	i
   1c5d8:	e7fe      	b.n	1c5d8 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1c5da:	68fb      	ldr	r3, [r7, #12]
   1c5dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c5de:	68fa      	ldr	r2, [r7, #12]
   1c5e0:	0010      	movs	r0, r2
   1c5e2:	4798      	blx	r3
}
   1c5e4:	46c0      	nop			; (mov r8, r8)
   1c5e6:	46bd      	mov	sp, r7
   1c5e8:	b005      	add	sp, #20
   1c5ea:	bd90      	pop	{r4, r7, pc}
   1c5ec:	200041d4 	.word	0x200041d4
   1c5f0:	00019033 	.word	0x00019033
   1c5f4:	0001c765 	.word	0x0001c765
   1c5f8:	0001c4d9 	.word	0x0001c4d9

0001c5fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   1c5fc:	b580      	push	{r7, lr}
   1c5fe:	b084      	sub	sp, #16
   1c600:	af00      	add	r7, sp, #0
   1c602:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
   1c604:	4b08      	ldr	r3, [pc, #32]	; (1c628 <prvTimerTask+0x2c>)
   1c606:	4798      	blx	r3

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1c608:	2308      	movs	r3, #8
   1c60a:	18fb      	adds	r3, r7, r3
   1c60c:	0018      	movs	r0, r3
   1c60e:	4b07      	ldr	r3, [pc, #28]	; (1c62c <prvTimerTask+0x30>)
   1c610:	4798      	blx	r3
   1c612:	0003      	movs	r3, r0
   1c614:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   1c616:	68ba      	ldr	r2, [r7, #8]
   1c618:	68fb      	ldr	r3, [r7, #12]
   1c61a:	0011      	movs	r1, r2
   1c61c:	0018      	movs	r0, r3
   1c61e:	4b04      	ldr	r3, [pc, #16]	; (1c630 <prvTimerTask+0x34>)
   1c620:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   1c622:	4b04      	ldr	r3, [pc, #16]	; (1c634 <prvTimerTask+0x38>)
   1c624:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1c626:	e7ef      	b.n	1c608 <prvTimerTask+0xc>
   1c628:	0003195d 	.word	0x0003195d
   1c62c:	0001c6dd 	.word	0x0001c6dd
   1c630:	0001c639 	.word	0x0001c639
   1c634:	0001c7ed 	.word	0x0001c7ed

0001c638 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   1c638:	b580      	push	{r7, lr}
   1c63a:	b084      	sub	sp, #16
   1c63c:	af00      	add	r7, sp, #0
   1c63e:	6078      	str	r0, [r7, #4]
   1c640:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   1c642:	4b1e      	ldr	r3, [pc, #120]	; (1c6bc <prvProcessTimerOrBlockTask+0x84>)
   1c644:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1c646:	2308      	movs	r3, #8
   1c648:	18fb      	adds	r3, r7, r3
   1c64a:	0018      	movs	r0, r3
   1c64c:	4b1c      	ldr	r3, [pc, #112]	; (1c6c0 <prvProcessTimerOrBlockTask+0x88>)
   1c64e:	4798      	blx	r3
   1c650:	0003      	movs	r3, r0
   1c652:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   1c654:	68bb      	ldr	r3, [r7, #8]
   1c656:	2b00      	cmp	r3, #0
   1c658:	d129      	bne.n	1c6ae <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   1c65a:	683b      	ldr	r3, [r7, #0]
   1c65c:	2b00      	cmp	r3, #0
   1c65e:	d10c      	bne.n	1c67a <prvProcessTimerOrBlockTask+0x42>
   1c660:	687a      	ldr	r2, [r7, #4]
   1c662:	68fb      	ldr	r3, [r7, #12]
   1c664:	429a      	cmp	r2, r3
   1c666:	d808      	bhi.n	1c67a <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
   1c668:	4b16      	ldr	r3, [pc, #88]	; (1c6c4 <prvProcessTimerOrBlockTask+0x8c>)
   1c66a:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   1c66c:	68fa      	ldr	r2, [r7, #12]
   1c66e:	687b      	ldr	r3, [r7, #4]
   1c670:	0011      	movs	r1, r2
   1c672:	0018      	movs	r0, r3
   1c674:	4b14      	ldr	r3, [pc, #80]	; (1c6c8 <prvProcessTimerOrBlockTask+0x90>)
   1c676:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   1c678:	e01b      	b.n	1c6b2 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
   1c67a:	683b      	ldr	r3, [r7, #0]
   1c67c:	2b00      	cmp	r3, #0
   1c67e:	d006      	beq.n	1c68e <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   1c680:	4b12      	ldr	r3, [pc, #72]	; (1c6cc <prvProcessTimerOrBlockTask+0x94>)
   1c682:	681b      	ldr	r3, [r3, #0]
   1c684:	681b      	ldr	r3, [r3, #0]
   1c686:	425a      	negs	r2, r3
   1c688:	4153      	adcs	r3, r2
   1c68a:	b2db      	uxtb	r3, r3
   1c68c:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   1c68e:	4b10      	ldr	r3, [pc, #64]	; (1c6d0 <prvProcessTimerOrBlockTask+0x98>)
   1c690:	6818      	ldr	r0, [r3, #0]
   1c692:	687a      	ldr	r2, [r7, #4]
   1c694:	68fb      	ldr	r3, [r7, #12]
   1c696:	1ad3      	subs	r3, r2, r3
   1c698:	683a      	ldr	r2, [r7, #0]
   1c69a:	0019      	movs	r1, r3
   1c69c:	4b0d      	ldr	r3, [pc, #52]	; (1c6d4 <prvProcessTimerOrBlockTask+0x9c>)
   1c69e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1c6a0:	4b08      	ldr	r3, [pc, #32]	; (1c6c4 <prvProcessTimerOrBlockTask+0x8c>)
   1c6a2:	4798      	blx	r3
   1c6a4:	1e03      	subs	r3, r0, #0
   1c6a6:	d104      	bne.n	1c6b2 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
   1c6a8:	4b0b      	ldr	r3, [pc, #44]	; (1c6d8 <prvProcessTimerOrBlockTask+0xa0>)
   1c6aa:	4798      	blx	r3
}
   1c6ac:	e001      	b.n	1c6b2 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
   1c6ae:	4b05      	ldr	r3, [pc, #20]	; (1c6c4 <prvProcessTimerOrBlockTask+0x8c>)
   1c6b0:	4798      	blx	r3
}
   1c6b2:	46c0      	nop			; (mov r8, r8)
   1c6b4:	46bd      	mov	sp, r7
   1c6b6:	b004      	add	sp, #16
   1c6b8:	bd80      	pop	{r7, pc}
   1c6ba:	46c0      	nop			; (mov r8, r8)
   1c6bc:	0001b471 	.word	0x0001b471
   1c6c0:	0001c71d 	.word	0x0001c71d
   1c6c4:	0001b489 	.word	0x0001b489
   1c6c8:	0001c581 	.word	0x0001c581
   1c6cc:	200041d8 	.word	0x200041d8
   1c6d0:	200041dc 	.word	0x200041dc
   1c6d4:	0001ac11 	.word	0x0001ac11
   1c6d8:	000191a1 	.word	0x000191a1

0001c6dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   1c6dc:	b580      	push	{r7, lr}
   1c6de:	b084      	sub	sp, #16
   1c6e0:	af00      	add	r7, sp, #0
   1c6e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   1c6e4:	4b0c      	ldr	r3, [pc, #48]	; (1c718 <prvGetNextExpireTime+0x3c>)
   1c6e6:	681b      	ldr	r3, [r3, #0]
   1c6e8:	681b      	ldr	r3, [r3, #0]
   1c6ea:	425a      	negs	r2, r3
   1c6ec:	4153      	adcs	r3, r2
   1c6ee:	b2db      	uxtb	r3, r3
   1c6f0:	001a      	movs	r2, r3
   1c6f2:	687b      	ldr	r3, [r7, #4]
   1c6f4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   1c6f6:	687b      	ldr	r3, [r7, #4]
   1c6f8:	681b      	ldr	r3, [r3, #0]
   1c6fa:	2b00      	cmp	r3, #0
   1c6fc:	d105      	bne.n	1c70a <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1c6fe:	4b06      	ldr	r3, [pc, #24]	; (1c718 <prvGetNextExpireTime+0x3c>)
   1c700:	681b      	ldr	r3, [r3, #0]
   1c702:	68db      	ldr	r3, [r3, #12]
   1c704:	681b      	ldr	r3, [r3, #0]
   1c706:	60fb      	str	r3, [r7, #12]
   1c708:	e001      	b.n	1c70e <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   1c70a:	2300      	movs	r3, #0
   1c70c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   1c70e:	68fb      	ldr	r3, [r7, #12]
}
   1c710:	0018      	movs	r0, r3
   1c712:	46bd      	mov	sp, r7
   1c714:	b004      	add	sp, #16
   1c716:	bd80      	pop	{r7, pc}
   1c718:	200041d4 	.word	0x200041d4

0001c71c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   1c71c:	b580      	push	{r7, lr}
   1c71e:	b084      	sub	sp, #16
   1c720:	af00      	add	r7, sp, #0
   1c722:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   1c724:	4b0c      	ldr	r3, [pc, #48]	; (1c758 <prvSampleTimeNow+0x3c>)
   1c726:	4798      	blx	r3
   1c728:	0003      	movs	r3, r0
   1c72a:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
   1c72c:	4b0b      	ldr	r3, [pc, #44]	; (1c75c <prvSampleTimeNow+0x40>)
   1c72e:	681b      	ldr	r3, [r3, #0]
   1c730:	68fa      	ldr	r2, [r7, #12]
   1c732:	429a      	cmp	r2, r3
   1c734:	d205      	bcs.n	1c742 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
   1c736:	4b0a      	ldr	r3, [pc, #40]	; (1c760 <prvSampleTimeNow+0x44>)
   1c738:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   1c73a:	687b      	ldr	r3, [r7, #4]
   1c73c:	2201      	movs	r2, #1
   1c73e:	601a      	str	r2, [r3, #0]
   1c740:	e002      	b.n	1c748 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   1c742:	687b      	ldr	r3, [r7, #4]
   1c744:	2200      	movs	r2, #0
   1c746:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   1c748:	4b04      	ldr	r3, [pc, #16]	; (1c75c <prvSampleTimeNow+0x40>)
   1c74a:	68fa      	ldr	r2, [r7, #12]
   1c74c:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   1c74e:	68fb      	ldr	r3, [r7, #12]
}
   1c750:	0018      	movs	r0, r3
   1c752:	46bd      	mov	sp, r7
   1c754:	b004      	add	sp, #16
   1c756:	bd80      	pop	{r7, pc}
   1c758:	0001b5f9 	.word	0x0001b5f9
   1c75c:	200041e4 	.word	0x200041e4
   1c760:	0001c905 	.word	0x0001c905

0001c764 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   1c764:	b580      	push	{r7, lr}
   1c766:	b086      	sub	sp, #24
   1c768:	af00      	add	r7, sp, #0
   1c76a:	60f8      	str	r0, [r7, #12]
   1c76c:	60b9      	str	r1, [r7, #8]
   1c76e:	607a      	str	r2, [r7, #4]
   1c770:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   1c772:	2300      	movs	r3, #0
   1c774:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   1c776:	68fb      	ldr	r3, [r7, #12]
   1c778:	68ba      	ldr	r2, [r7, #8]
   1c77a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1c77c:	68fb      	ldr	r3, [r7, #12]
   1c77e:	68fa      	ldr	r2, [r7, #12]
   1c780:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   1c782:	68ba      	ldr	r2, [r7, #8]
   1c784:	687b      	ldr	r3, [r7, #4]
   1c786:	429a      	cmp	r2, r3
   1c788:	d812      	bhi.n	1c7b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c78a:	687a      	ldr	r2, [r7, #4]
   1c78c:	683b      	ldr	r3, [r7, #0]
   1c78e:	1ad2      	subs	r2, r2, r3
   1c790:	68fb      	ldr	r3, [r7, #12]
   1c792:	699b      	ldr	r3, [r3, #24]
   1c794:	429a      	cmp	r2, r3
   1c796:	d302      	bcc.n	1c79e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   1c798:	2301      	movs	r3, #1
   1c79a:	617b      	str	r3, [r7, #20]
   1c79c:	e01b      	b.n	1c7d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   1c79e:	4b10      	ldr	r3, [pc, #64]	; (1c7e0 <prvInsertTimerInActiveList+0x7c>)
   1c7a0:	681a      	ldr	r2, [r3, #0]
   1c7a2:	68fb      	ldr	r3, [r7, #12]
   1c7a4:	3304      	adds	r3, #4
   1c7a6:	0019      	movs	r1, r3
   1c7a8:	0010      	movs	r0, r2
   1c7aa:	4b0e      	ldr	r3, [pc, #56]	; (1c7e4 <prvInsertTimerInActiveList+0x80>)
   1c7ac:	4798      	blx	r3
   1c7ae:	e012      	b.n	1c7d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   1c7b0:	687a      	ldr	r2, [r7, #4]
   1c7b2:	683b      	ldr	r3, [r7, #0]
   1c7b4:	429a      	cmp	r2, r3
   1c7b6:	d206      	bcs.n	1c7c6 <prvInsertTimerInActiveList+0x62>
   1c7b8:	68ba      	ldr	r2, [r7, #8]
   1c7ba:	683b      	ldr	r3, [r7, #0]
   1c7bc:	429a      	cmp	r2, r3
   1c7be:	d302      	bcc.n	1c7c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   1c7c0:	2301      	movs	r3, #1
   1c7c2:	617b      	str	r3, [r7, #20]
   1c7c4:	e007      	b.n	1c7d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1c7c6:	4b08      	ldr	r3, [pc, #32]	; (1c7e8 <prvInsertTimerInActiveList+0x84>)
   1c7c8:	681a      	ldr	r2, [r3, #0]
   1c7ca:	68fb      	ldr	r3, [r7, #12]
   1c7cc:	3304      	adds	r3, #4
   1c7ce:	0019      	movs	r1, r3
   1c7d0:	0010      	movs	r0, r2
   1c7d2:	4b04      	ldr	r3, [pc, #16]	; (1c7e4 <prvInsertTimerInActiveList+0x80>)
   1c7d4:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   1c7d6:	697b      	ldr	r3, [r7, #20]
}
   1c7d8:	0018      	movs	r0, r3
   1c7da:	46bd      	mov	sp, r7
   1c7dc:	b006      	add	sp, #24
   1c7de:	bd80      	pop	{r7, pc}
   1c7e0:	200041d8 	.word	0x200041d8
   1c7e4:	00018fc7 	.word	0x00018fc7
   1c7e8:	200041d4 	.word	0x200041d4

0001c7ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   1c7ec:	b590      	push	{r4, r7, lr}
   1c7ee:	b08b      	sub	sp, #44	; 0x2c
   1c7f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1c7f2:	e068      	b.n	1c8c6 <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   1c7f4:	2308      	movs	r3, #8
   1c7f6:	18fb      	adds	r3, r7, r3
   1c7f8:	681b      	ldr	r3, [r3, #0]
   1c7fa:	2b00      	cmp	r3, #0
   1c7fc:	db63      	blt.n	1c8c6 <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   1c7fe:	2308      	movs	r3, #8
   1c800:	18fb      	adds	r3, r7, r3
   1c802:	689b      	ldr	r3, [r3, #8]
   1c804:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   1c806:	69fb      	ldr	r3, [r7, #28]
   1c808:	695b      	ldr	r3, [r3, #20]
   1c80a:	2b00      	cmp	r3, #0
   1c80c:	d004      	beq.n	1c818 <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1c80e:	69fb      	ldr	r3, [r7, #28]
   1c810:	3304      	adds	r3, #4
   1c812:	0018      	movs	r0, r3
   1c814:	4b33      	ldr	r3, [pc, #204]	; (1c8e4 <prvProcessReceivedCommands+0xf8>)
   1c816:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1c818:	1d3b      	adds	r3, r7, #4
   1c81a:	0018      	movs	r0, r3
   1c81c:	4b32      	ldr	r3, [pc, #200]	; (1c8e8 <prvProcessReceivedCommands+0xfc>)
   1c81e:	4798      	blx	r3
   1c820:	0003      	movs	r3, r0
   1c822:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
   1c824:	2308      	movs	r3, #8
   1c826:	18fb      	adds	r3, r7, r3
   1c828:	681b      	ldr	r3, [r3, #0]
   1c82a:	2b09      	cmp	r3, #9
   1c82c:	d84a      	bhi.n	1c8c4 <prvProcessReceivedCommands+0xd8>
   1c82e:	009a      	lsls	r2, r3, #2
   1c830:	4b2e      	ldr	r3, [pc, #184]	; (1c8ec <prvProcessReceivedCommands+0x100>)
   1c832:	18d3      	adds	r3, r2, r3
   1c834:	681b      	ldr	r3, [r3, #0]
   1c836:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   1c838:	2308      	movs	r3, #8
   1c83a:	18fb      	adds	r3, r7, r3
   1c83c:	685a      	ldr	r2, [r3, #4]
   1c83e:	69fb      	ldr	r3, [r7, #28]
   1c840:	699b      	ldr	r3, [r3, #24]
   1c842:	18d1      	adds	r1, r2, r3
   1c844:	2308      	movs	r3, #8
   1c846:	18fb      	adds	r3, r7, r3
   1c848:	685b      	ldr	r3, [r3, #4]
   1c84a:	69ba      	ldr	r2, [r7, #24]
   1c84c:	69f8      	ldr	r0, [r7, #28]
   1c84e:	4c28      	ldr	r4, [pc, #160]	; (1c8f0 <prvProcessReceivedCommands+0x104>)
   1c850:	47a0      	blx	r4
   1c852:	1e03      	subs	r3, r0, #0
   1c854:	d037      	beq.n	1c8c6 <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1c856:	69fb      	ldr	r3, [r7, #28]
   1c858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c85a:	69fa      	ldr	r2, [r7, #28]
   1c85c:	0010      	movs	r0, r2
   1c85e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1c860:	69fb      	ldr	r3, [r7, #28]
   1c862:	69db      	ldr	r3, [r3, #28]
   1c864:	2b01      	cmp	r3, #1
   1c866:	d12e      	bne.n	1c8c6 <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   1c868:	2308      	movs	r3, #8
   1c86a:	18fb      	adds	r3, r7, r3
   1c86c:	685a      	ldr	r2, [r3, #4]
   1c86e:	69fb      	ldr	r3, [r7, #28]
   1c870:	699b      	ldr	r3, [r3, #24]
   1c872:	18d2      	adds	r2, r2, r3
   1c874:	69f8      	ldr	r0, [r7, #28]
   1c876:	2300      	movs	r3, #0
   1c878:	9300      	str	r3, [sp, #0]
   1c87a:	2300      	movs	r3, #0
   1c87c:	2100      	movs	r1, #0
   1c87e:	4c1d      	ldr	r4, [pc, #116]	; (1c8f4 <prvProcessReceivedCommands+0x108>)
   1c880:	47a0      	blx	r4
   1c882:	0003      	movs	r3, r0
   1c884:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
   1c886:	697b      	ldr	r3, [r7, #20]
   1c888:	2b00      	cmp	r3, #0
   1c88a:	d11c      	bne.n	1c8c6 <prvProcessReceivedCommands+0xda>
   1c88c:	b672      	cpsid	i
   1c88e:	e7fe      	b.n	1c88e <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   1c890:	2308      	movs	r3, #8
   1c892:	18fb      	adds	r3, r7, r3
   1c894:	685a      	ldr	r2, [r3, #4]
   1c896:	69fb      	ldr	r3, [r7, #28]
   1c898:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   1c89a:	69fb      	ldr	r3, [r7, #28]
   1c89c:	699b      	ldr	r3, [r3, #24]
   1c89e:	2b00      	cmp	r3, #0
   1c8a0:	d101      	bne.n	1c8a6 <prvProcessReceivedCommands+0xba>
   1c8a2:	b672      	cpsid	i
   1c8a4:	e7fe      	b.n	1c8a4 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   1c8a6:	69fb      	ldr	r3, [r7, #28]
   1c8a8:	699a      	ldr	r2, [r3, #24]
   1c8aa:	69bb      	ldr	r3, [r7, #24]
   1c8ac:	18d1      	adds	r1, r2, r3
   1c8ae:	69bb      	ldr	r3, [r7, #24]
   1c8b0:	69ba      	ldr	r2, [r7, #24]
   1c8b2:	69f8      	ldr	r0, [r7, #28]
   1c8b4:	4c0e      	ldr	r4, [pc, #56]	; (1c8f0 <prvProcessReceivedCommands+0x104>)
   1c8b6:	47a0      	blx	r4
					break;
   1c8b8:	e005      	b.n	1c8c6 <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   1c8ba:	69fb      	ldr	r3, [r7, #28]
   1c8bc:	0018      	movs	r0, r3
   1c8be:	4b0e      	ldr	r3, [pc, #56]	; (1c8f8 <prvProcessReceivedCommands+0x10c>)
   1c8c0:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   1c8c2:	e000      	b.n	1c8c6 <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
   1c8c4:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1c8c6:	4b0d      	ldr	r3, [pc, #52]	; (1c8fc <prvProcessReceivedCommands+0x110>)
   1c8c8:	681b      	ldr	r3, [r3, #0]
   1c8ca:	2208      	movs	r2, #8
   1c8cc:	18b9      	adds	r1, r7, r2
   1c8ce:	2200      	movs	r2, #0
   1c8d0:	0018      	movs	r0, r3
   1c8d2:	4b0b      	ldr	r3, [pc, #44]	; (1c900 <prvProcessReceivedCommands+0x114>)
   1c8d4:	4798      	blx	r3
   1c8d6:	1e03      	subs	r3, r0, #0
   1c8d8:	d18c      	bne.n	1c7f4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   1c8da:	46c0      	nop			; (mov r8, r8)
   1c8dc:	46bd      	mov	sp, r7
   1c8de:	b009      	add	sp, #36	; 0x24
   1c8e0:	bd90      	pop	{r4, r7, pc}
   1c8e2:	46c0      	nop			; (mov r8, r8)
   1c8e4:	00019033 	.word	0x00019033
   1c8e8:	0001c71d 	.word	0x0001c71d
   1c8ec:	00037d0c 	.word	0x00037d0c
   1c8f0:	0001c765 	.word	0x0001c765
   1c8f4:	0001c4d9 	.word	0x0001c4d9
   1c8f8:	000193b5 	.word	0x000193b5
   1c8fc:	200041dc 	.word	0x200041dc
   1c900:	0001a005 	.word	0x0001a005

0001c904 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   1c904:	b590      	push	{r4, r7, lr}
   1c906:	b089      	sub	sp, #36	; 0x24
   1c908:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1c90a:	e03e      	b.n	1c98a <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1c90c:	4b28      	ldr	r3, [pc, #160]	; (1c9b0 <prvSwitchTimerLists+0xac>)
   1c90e:	681b      	ldr	r3, [r3, #0]
   1c910:	68db      	ldr	r3, [r3, #12]
   1c912:	681b      	ldr	r3, [r3, #0]
   1c914:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1c916:	4b26      	ldr	r3, [pc, #152]	; (1c9b0 <prvSwitchTimerLists+0xac>)
   1c918:	681b      	ldr	r3, [r3, #0]
   1c91a:	68db      	ldr	r3, [r3, #12]
   1c91c:	68db      	ldr	r3, [r3, #12]
   1c91e:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1c920:	693b      	ldr	r3, [r7, #16]
   1c922:	3304      	adds	r3, #4
   1c924:	0018      	movs	r0, r3
   1c926:	4b23      	ldr	r3, [pc, #140]	; (1c9b4 <prvSwitchTimerLists+0xb0>)
   1c928:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1c92a:	693b      	ldr	r3, [r7, #16]
   1c92c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c92e:	693a      	ldr	r2, [r7, #16]
   1c930:	0010      	movs	r0, r2
   1c932:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1c934:	693b      	ldr	r3, [r7, #16]
   1c936:	69db      	ldr	r3, [r3, #28]
   1c938:	2b01      	cmp	r3, #1
   1c93a:	d126      	bne.n	1c98a <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   1c93c:	693b      	ldr	r3, [r7, #16]
   1c93e:	699a      	ldr	r2, [r3, #24]
   1c940:	697b      	ldr	r3, [r7, #20]
   1c942:	18d3      	adds	r3, r2, r3
   1c944:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   1c946:	68fa      	ldr	r2, [r7, #12]
   1c948:	697b      	ldr	r3, [r7, #20]
   1c94a:	429a      	cmp	r2, r3
   1c94c:	d90e      	bls.n	1c96c <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   1c94e:	693b      	ldr	r3, [r7, #16]
   1c950:	68fa      	ldr	r2, [r7, #12]
   1c952:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1c954:	693b      	ldr	r3, [r7, #16]
   1c956:	693a      	ldr	r2, [r7, #16]
   1c958:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1c95a:	4b15      	ldr	r3, [pc, #84]	; (1c9b0 <prvSwitchTimerLists+0xac>)
   1c95c:	681a      	ldr	r2, [r3, #0]
   1c95e:	693b      	ldr	r3, [r7, #16]
   1c960:	3304      	adds	r3, #4
   1c962:	0019      	movs	r1, r3
   1c964:	0010      	movs	r0, r2
   1c966:	4b14      	ldr	r3, [pc, #80]	; (1c9b8 <prvSwitchTimerLists+0xb4>)
   1c968:	4798      	blx	r3
   1c96a:	e00e      	b.n	1c98a <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1c96c:	697a      	ldr	r2, [r7, #20]
   1c96e:	6938      	ldr	r0, [r7, #16]
   1c970:	2300      	movs	r3, #0
   1c972:	9300      	str	r3, [sp, #0]
   1c974:	2300      	movs	r3, #0
   1c976:	2100      	movs	r1, #0
   1c978:	4c10      	ldr	r4, [pc, #64]	; (1c9bc <prvSwitchTimerLists+0xb8>)
   1c97a:	47a0      	blx	r4
   1c97c:	0003      	movs	r3, r0
   1c97e:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
   1c980:	68bb      	ldr	r3, [r7, #8]
   1c982:	2b00      	cmp	r3, #0
   1c984:	d101      	bne.n	1c98a <prvSwitchTimerLists+0x86>
   1c986:	b672      	cpsid	i
   1c988:	e7fe      	b.n	1c988 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1c98a:	4b09      	ldr	r3, [pc, #36]	; (1c9b0 <prvSwitchTimerLists+0xac>)
   1c98c:	681b      	ldr	r3, [r3, #0]
   1c98e:	681b      	ldr	r3, [r3, #0]
   1c990:	2b00      	cmp	r3, #0
   1c992:	d1bb      	bne.n	1c90c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   1c994:	4b06      	ldr	r3, [pc, #24]	; (1c9b0 <prvSwitchTimerLists+0xac>)
   1c996:	681b      	ldr	r3, [r3, #0]
   1c998:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   1c99a:	4b09      	ldr	r3, [pc, #36]	; (1c9c0 <prvSwitchTimerLists+0xbc>)
   1c99c:	681a      	ldr	r2, [r3, #0]
   1c99e:	4b04      	ldr	r3, [pc, #16]	; (1c9b0 <prvSwitchTimerLists+0xac>)
   1c9a0:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   1c9a2:	4b07      	ldr	r3, [pc, #28]	; (1c9c0 <prvSwitchTimerLists+0xbc>)
   1c9a4:	687a      	ldr	r2, [r7, #4]
   1c9a6:	601a      	str	r2, [r3, #0]
}
   1c9a8:	46c0      	nop			; (mov r8, r8)
   1c9aa:	46bd      	mov	sp, r7
   1c9ac:	b007      	add	sp, #28
   1c9ae:	bd90      	pop	{r4, r7, pc}
   1c9b0:	200041d4 	.word	0x200041d4
   1c9b4:	00019033 	.word	0x00019033
   1c9b8:	00018fc7 	.word	0x00018fc7
   1c9bc:	0001c4d9 	.word	0x0001c4d9
   1c9c0:	200041d8 	.word	0x200041d8

0001c9c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   1c9c4:	b580      	push	{r7, lr}
   1c9c6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   1c9c8:	4b10      	ldr	r3, [pc, #64]	; (1ca0c <prvCheckForValidListAndQueue+0x48>)
   1c9ca:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   1c9cc:	4b10      	ldr	r3, [pc, #64]	; (1ca10 <prvCheckForValidListAndQueue+0x4c>)
   1c9ce:	681b      	ldr	r3, [r3, #0]
   1c9d0:	2b00      	cmp	r3, #0
   1c9d2:	d115      	bne.n	1ca00 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
   1c9d4:	4b0f      	ldr	r3, [pc, #60]	; (1ca14 <prvCheckForValidListAndQueue+0x50>)
   1c9d6:	0018      	movs	r0, r3
   1c9d8:	4b0f      	ldr	r3, [pc, #60]	; (1ca18 <prvCheckForValidListAndQueue+0x54>)
   1c9da:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   1c9dc:	4b0f      	ldr	r3, [pc, #60]	; (1ca1c <prvCheckForValidListAndQueue+0x58>)
   1c9de:	0018      	movs	r0, r3
   1c9e0:	4b0d      	ldr	r3, [pc, #52]	; (1ca18 <prvCheckForValidListAndQueue+0x54>)
   1c9e2:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   1c9e4:	4b0e      	ldr	r3, [pc, #56]	; (1ca20 <prvCheckForValidListAndQueue+0x5c>)
   1c9e6:	4a0b      	ldr	r2, [pc, #44]	; (1ca14 <prvCheckForValidListAndQueue+0x50>)
   1c9e8:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   1c9ea:	4b0e      	ldr	r3, [pc, #56]	; (1ca24 <prvCheckForValidListAndQueue+0x60>)
   1c9ec:	4a0b      	ldr	r2, [pc, #44]	; (1ca1c <prvCheckForValidListAndQueue+0x58>)
   1c9ee:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   1c9f0:	2200      	movs	r2, #0
   1c9f2:	210c      	movs	r1, #12
   1c9f4:	2005      	movs	r0, #5
   1c9f6:	4b0c      	ldr	r3, [pc, #48]	; (1ca28 <prvCheckForValidListAndQueue+0x64>)
   1c9f8:	4798      	blx	r3
   1c9fa:	0002      	movs	r2, r0
   1c9fc:	4b04      	ldr	r3, [pc, #16]	; (1ca10 <prvCheckForValidListAndQueue+0x4c>)
   1c9fe:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1ca00:	4b0a      	ldr	r3, [pc, #40]	; (1ca2c <prvCheckForValidListAndQueue+0x68>)
   1ca02:	4798      	blx	r3
}
   1ca04:	46c0      	nop			; (mov r8, r8)
   1ca06:	46bd      	mov	sp, r7
   1ca08:	bd80      	pop	{r7, pc}
   1ca0a:	46c0      	nop			; (mov r8, r8)
   1ca0c:	000191b9 	.word	0x000191b9
   1ca10:	200041dc 	.word	0x200041dc
   1ca14:	200041ac 	.word	0x200041ac
   1ca18:	00018f31 	.word	0x00018f31
   1ca1c:	200041c0 	.word	0x200041c0
   1ca20:	200041d4 	.word	0x200041d4
   1ca24:	200041d8 	.word	0x200041d8
   1ca28:	000194a5 	.word	0x000194a5
   1ca2c:	000191dd 	.word	0x000191dd

0001ca30 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
   1ca30:	b580      	push	{r7, lr}
   1ca32:	b082      	sub	sp, #8
   1ca34:	af00      	add	r7, sp, #0
   1ca36:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
   1ca38:	687b      	ldr	r3, [r7, #4]
   1ca3a:	7c1b      	ldrb	r3, [r3, #16]
   1ca3c:	2b00      	cmp	r3, #0
   1ca3e:	d00b      	beq.n	1ca58 <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1ca40:	687b      	ldr	r3, [r7, #4]
   1ca42:	689b      	ldr	r3, [r3, #8]
   1ca44:	1c5a      	adds	r2, r3, #1
   1ca46:	687b      	ldr	r3, [r7, #4]
   1ca48:	68d9      	ldr	r1, [r3, #12]
   1ca4a:	4b10      	ldr	r3, [pc, #64]	; (1ca8c <advance_pointer+0x5c>)
   1ca4c:	0010      	movs	r0, r2
   1ca4e:	4798      	blx	r3
   1ca50:	000b      	movs	r3, r1
   1ca52:	001a      	movs	r2, r3
   1ca54:	687b      	ldr	r3, [r7, #4]
   1ca56:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
   1ca58:	687b      	ldr	r3, [r7, #4]
   1ca5a:	685b      	ldr	r3, [r3, #4]
   1ca5c:	1c5a      	adds	r2, r3, #1
   1ca5e:	687b      	ldr	r3, [r7, #4]
   1ca60:	68d9      	ldr	r1, [r3, #12]
   1ca62:	4b0a      	ldr	r3, [pc, #40]	; (1ca8c <advance_pointer+0x5c>)
   1ca64:	0010      	movs	r0, r2
   1ca66:	4798      	blx	r3
   1ca68:	000b      	movs	r3, r1
   1ca6a:	001a      	movs	r2, r3
   1ca6c:	687b      	ldr	r3, [r7, #4]
   1ca6e:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
   1ca70:	687b      	ldr	r3, [r7, #4]
   1ca72:	685a      	ldr	r2, [r3, #4]
   1ca74:	687b      	ldr	r3, [r7, #4]
   1ca76:	689b      	ldr	r3, [r3, #8]
   1ca78:	1ad3      	subs	r3, r2, r3
   1ca7a:	425a      	negs	r2, r3
   1ca7c:	4153      	adcs	r3, r2
   1ca7e:	b2da      	uxtb	r2, r3
   1ca80:	687b      	ldr	r3, [r7, #4]
   1ca82:	741a      	strb	r2, [r3, #16]
 }
   1ca84:	46c0      	nop			; (mov r8, r8)
   1ca86:	46bd      	mov	sp, r7
   1ca88:	b002      	add	sp, #8
   1ca8a:	bd80      	pop	{r7, pc}
   1ca8c:	00031c31 	.word	0x00031c31

0001ca90 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
   1ca90:	b580      	push	{r7, lr}
   1ca92:	b082      	sub	sp, #8
   1ca94:	af00      	add	r7, sp, #0
   1ca96:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
   1ca98:	687b      	ldr	r3, [r7, #4]
   1ca9a:	2200      	movs	r2, #0
   1ca9c:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1ca9e:	687b      	ldr	r3, [r7, #4]
   1caa0:	689b      	ldr	r3, [r3, #8]
   1caa2:	1c5a      	adds	r2, r3, #1
   1caa4:	687b      	ldr	r3, [r7, #4]
   1caa6:	68d9      	ldr	r1, [r3, #12]
   1caa8:	4b05      	ldr	r3, [pc, #20]	; (1cac0 <retreat_pointer+0x30>)
   1caaa:	0010      	movs	r0, r2
   1caac:	4798      	blx	r3
   1caae:	000b      	movs	r3, r1
   1cab0:	001a      	movs	r2, r3
   1cab2:	687b      	ldr	r3, [r7, #4]
   1cab4:	609a      	str	r2, [r3, #8]
 }
   1cab6:	46c0      	nop			; (mov r8, r8)
   1cab8:	46bd      	mov	sp, r7
   1caba:	b002      	add	sp, #8
   1cabc:	bd80      	pop	{r7, pc}
   1cabe:	46c0      	nop			; (mov r8, r8)
   1cac0:	00031c31 	.word	0x00031c31

0001cac4 <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
   1cac4:	b580      	push	{r7, lr}
   1cac6:	b084      	sub	sp, #16
   1cac8:	af00      	add	r7, sp, #0
   1caca:	6078      	str	r0, [r7, #4]
   1cacc:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
   1cace:	2014      	movs	r0, #20
   1cad0:	4b09      	ldr	r3, [pc, #36]	; (1caf8 <circular_buf_init+0x34>)
   1cad2:	4798      	blx	r3
   1cad4:	0003      	movs	r3, r0
   1cad6:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
   1cad8:	68fb      	ldr	r3, [r7, #12]
   1cada:	687a      	ldr	r2, [r7, #4]
   1cadc:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
   1cade:	68fb      	ldr	r3, [r7, #12]
   1cae0:	683a      	ldr	r2, [r7, #0]
   1cae2:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
   1cae4:	68fb      	ldr	r3, [r7, #12]
   1cae6:	0018      	movs	r0, r3
   1cae8:	4b04      	ldr	r3, [pc, #16]	; (1cafc <circular_buf_init+0x38>)
   1caea:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
   1caec:	68fb      	ldr	r3, [r7, #12]
 }
   1caee:	0018      	movs	r0, r3
   1caf0:	46bd      	mov	sp, r7
   1caf2:	b004      	add	sp, #16
   1caf4:	bd80      	pop	{r7, pc}
   1caf6:	46c0      	nop			; (mov r8, r8)
   1caf8:	00034581 	.word	0x00034581
   1cafc:	0001cb01 	.word	0x0001cb01

0001cb00 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
   1cb00:	b580      	push	{r7, lr}
   1cb02:	b082      	sub	sp, #8
   1cb04:	af00      	add	r7, sp, #0
   1cb06:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
   1cb08:	687b      	ldr	r3, [r7, #4]
   1cb0a:	2200      	movs	r2, #0
   1cb0c:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
   1cb0e:	687b      	ldr	r3, [r7, #4]
   1cb10:	2200      	movs	r2, #0
   1cb12:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
   1cb14:	687b      	ldr	r3, [r7, #4]
   1cb16:	2200      	movs	r2, #0
   1cb18:	741a      	strb	r2, [r3, #16]
 }
   1cb1a:	46c0      	nop			; (mov r8, r8)
   1cb1c:	46bd      	mov	sp, r7
   1cb1e:	b002      	add	sp, #8
   1cb20:	bd80      	pop	{r7, pc}
	...

0001cb24 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
   1cb24:	b580      	push	{r7, lr}
   1cb26:	b082      	sub	sp, #8
   1cb28:	af00      	add	r7, sp, #0
   1cb2a:	6078      	str	r0, [r7, #4]
   1cb2c:	000a      	movs	r2, r1
   1cb2e:	1cfb      	adds	r3, r7, #3
   1cb30:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
   1cb32:	687b      	ldr	r3, [r7, #4]
   1cb34:	681a      	ldr	r2, [r3, #0]
   1cb36:	687b      	ldr	r3, [r7, #4]
   1cb38:	685b      	ldr	r3, [r3, #4]
   1cb3a:	18d3      	adds	r3, r2, r3
   1cb3c:	1cfa      	adds	r2, r7, #3
   1cb3e:	7812      	ldrb	r2, [r2, #0]
   1cb40:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
   1cb42:	687b      	ldr	r3, [r7, #4]
   1cb44:	0018      	movs	r0, r3
   1cb46:	4b03      	ldr	r3, [pc, #12]	; (1cb54 <circular_buf_put+0x30>)
   1cb48:	4798      	blx	r3
 }
   1cb4a:	46c0      	nop			; (mov r8, r8)
   1cb4c:	46bd      	mov	sp, r7
   1cb4e:	b002      	add	sp, #8
   1cb50:	bd80      	pop	{r7, pc}
   1cb52:	46c0      	nop			; (mov r8, r8)
   1cb54:	0001ca31 	.word	0x0001ca31

0001cb58 <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
   1cb58:	b580      	push	{r7, lr}
   1cb5a:	b084      	sub	sp, #16
   1cb5c:	af00      	add	r7, sp, #0
   1cb5e:	6078      	str	r0, [r7, #4]
   1cb60:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
   1cb62:	2301      	movs	r3, #1
   1cb64:	425b      	negs	r3, r3
   1cb66:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
   1cb68:	687b      	ldr	r3, [r7, #4]
   1cb6a:	0018      	movs	r0, r3
   1cb6c:	4b0d      	ldr	r3, [pc, #52]	; (1cba4 <circular_buf_get+0x4c>)
   1cb6e:	4798      	blx	r3
   1cb70:	0003      	movs	r3, r0
   1cb72:	001a      	movs	r2, r3
   1cb74:	2301      	movs	r3, #1
   1cb76:	4053      	eors	r3, r2
   1cb78:	b2db      	uxtb	r3, r3
   1cb7a:	2b00      	cmp	r3, #0
   1cb7c:	d00d      	beq.n	1cb9a <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
   1cb7e:	687b      	ldr	r3, [r7, #4]
   1cb80:	681a      	ldr	r2, [r3, #0]
   1cb82:	687b      	ldr	r3, [r7, #4]
   1cb84:	689b      	ldr	r3, [r3, #8]
   1cb86:	18d3      	adds	r3, r2, r3
   1cb88:	781a      	ldrb	r2, [r3, #0]
   1cb8a:	683b      	ldr	r3, [r7, #0]
   1cb8c:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
   1cb8e:	687b      	ldr	r3, [r7, #4]
   1cb90:	0018      	movs	r0, r3
   1cb92:	4b05      	ldr	r3, [pc, #20]	; (1cba8 <circular_buf_get+0x50>)
   1cb94:	4798      	blx	r3

		 r = 0;
   1cb96:	2300      	movs	r3, #0
   1cb98:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
   1cb9a:	68fb      	ldr	r3, [r7, #12]
 }
   1cb9c:	0018      	movs	r0, r3
   1cb9e:	46bd      	mov	sp, r7
   1cba0:	b004      	add	sp, #16
   1cba2:	bd80      	pop	{r7, pc}
   1cba4:	0001cbad 	.word	0x0001cbad
   1cba8:	0001ca91 	.word	0x0001ca91

0001cbac <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
   1cbac:	b580      	push	{r7, lr}
   1cbae:	b082      	sub	sp, #8
   1cbb0:	af00      	add	r7, sp, #0
   1cbb2:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
   1cbb4:	687b      	ldr	r3, [r7, #4]
   1cbb6:	7c1b      	ldrb	r3, [r3, #16]
   1cbb8:	2201      	movs	r2, #1
   1cbba:	4053      	eors	r3, r2
   1cbbc:	b2db      	uxtb	r3, r3
   1cbbe:	2b00      	cmp	r3, #0
   1cbc0:	d007      	beq.n	1cbd2 <circular_buf_empty+0x26>
   1cbc2:	687b      	ldr	r3, [r7, #4]
   1cbc4:	685a      	ldr	r2, [r3, #4]
   1cbc6:	687b      	ldr	r3, [r7, #4]
   1cbc8:	689b      	ldr	r3, [r3, #8]
   1cbca:	429a      	cmp	r2, r3
   1cbcc:	d101      	bne.n	1cbd2 <circular_buf_empty+0x26>
   1cbce:	2301      	movs	r3, #1
   1cbd0:	e000      	b.n	1cbd4 <circular_buf_empty+0x28>
   1cbd2:	2300      	movs	r3, #0
   1cbd4:	1c1a      	adds	r2, r3, #0
   1cbd6:	2301      	movs	r3, #1
   1cbd8:	4013      	ands	r3, r2
   1cbda:	b2db      	uxtb	r3, r3
 }
   1cbdc:	0018      	movs	r0, r3
   1cbde:	46bd      	mov	sp, r7
   1cbe0:	b002      	add	sp, #8
   1cbe2:	bd80      	pop	{r7, pc}

0001cbe4 <system_interrupt_enable>:
{
   1cbe4:	b580      	push	{r7, lr}
   1cbe6:	b082      	sub	sp, #8
   1cbe8:	af00      	add	r7, sp, #0
   1cbea:	0002      	movs	r2, r0
   1cbec:	1dfb      	adds	r3, r7, #7
   1cbee:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1cbf0:	4b06      	ldr	r3, [pc, #24]	; (1cc0c <system_interrupt_enable+0x28>)
   1cbf2:	1dfa      	adds	r2, r7, #7
   1cbf4:	7812      	ldrb	r2, [r2, #0]
   1cbf6:	0011      	movs	r1, r2
   1cbf8:	221f      	movs	r2, #31
   1cbfa:	400a      	ands	r2, r1
   1cbfc:	2101      	movs	r1, #1
   1cbfe:	4091      	lsls	r1, r2
   1cc00:	000a      	movs	r2, r1
   1cc02:	601a      	str	r2, [r3, #0]
}
   1cc04:	46c0      	nop			; (mov r8, r8)
   1cc06:	46bd      	mov	sp, r7
   1cc08:	b002      	add	sp, #8
   1cc0a:	bd80      	pop	{r7, pc}
   1cc0c:	e000e100 	.word	0xe000e100

0001cc10 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   1cc10:	b580      	push	{r7, lr}
   1cc12:	b084      	sub	sp, #16
   1cc14:	af00      	add	r7, sp, #0
   1cc16:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   1cc18:	687b      	ldr	r3, [r7, #4]
   1cc1a:	681b      	ldr	r3, [r3, #0]
   1cc1c:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   1cc1e:	68fb      	ldr	r3, [r7, #12]
   1cc20:	69db      	ldr	r3, [r3, #28]
   1cc22:	1e5a      	subs	r2, r3, #1
   1cc24:	4193      	sbcs	r3, r2
   1cc26:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   1cc28:	0018      	movs	r0, r3
   1cc2a:	46bd      	mov	sp, r7
   1cc2c:	b004      	add	sp, #16
   1cc2e:	bd80      	pop	{r7, pc}

0001cc30 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   1cc30:	b580      	push	{r7, lr}
   1cc32:	b082      	sub	sp, #8
   1cc34:	af00      	add	r7, sp, #0
   1cc36:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   1cc38:	46c0      	nop			; (mov r8, r8)
   1cc3a:	687b      	ldr	r3, [r7, #4]
   1cc3c:	0018      	movs	r0, r3
   1cc3e:	4b04      	ldr	r3, [pc, #16]	; (1cc50 <_usart_wait_for_sync+0x20>)
   1cc40:	4798      	blx	r3
   1cc42:	1e03      	subs	r3, r0, #0
   1cc44:	d1f9      	bne.n	1cc3a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   1cc46:	46c0      	nop			; (mov r8, r8)
   1cc48:	46bd      	mov	sp, r7
   1cc4a:	b002      	add	sp, #8
   1cc4c:	bd80      	pop	{r7, pc}
   1cc4e:	46c0      	nop			; (mov r8, r8)
   1cc50:	0001cc11 	.word	0x0001cc11

0001cc54 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   1cc54:	b580      	push	{r7, lr}
   1cc56:	b082      	sub	sp, #8
   1cc58:	af00      	add	r7, sp, #0
   1cc5a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   1cc5c:	687b      	ldr	r3, [r7, #4]
   1cc5e:	2280      	movs	r2, #128	; 0x80
   1cc60:	05d2      	lsls	r2, r2, #23
   1cc62:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   1cc64:	687b      	ldr	r3, [r7, #4]
   1cc66:	2200      	movs	r2, #0
   1cc68:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   1cc6a:	687b      	ldr	r3, [r7, #4]
   1cc6c:	22ff      	movs	r2, #255	; 0xff
   1cc6e:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   1cc70:	687b      	ldr	r3, [r7, #4]
   1cc72:	2200      	movs	r2, #0
   1cc74:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   1cc76:	687b      	ldr	r3, [r7, #4]
   1cc78:	2200      	movs	r2, #0
   1cc7a:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   1cc7c:	687b      	ldr	r3, [r7, #4]
   1cc7e:	2296      	movs	r2, #150	; 0x96
   1cc80:	0192      	lsls	r2, r2, #6
   1cc82:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   1cc84:	687b      	ldr	r3, [r7, #4]
   1cc86:	2224      	movs	r2, #36	; 0x24
   1cc88:	2101      	movs	r1, #1
   1cc8a:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   1cc8c:	687b      	ldr	r3, [r7, #4]
   1cc8e:	2225      	movs	r2, #37	; 0x25
   1cc90:	2101      	movs	r1, #1
   1cc92:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   1cc94:	687b      	ldr	r3, [r7, #4]
   1cc96:	2226      	movs	r2, #38	; 0x26
   1cc98:	2100      	movs	r1, #0
   1cc9a:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   1cc9c:	687b      	ldr	r3, [r7, #4]
   1cc9e:	2227      	movs	r2, #39	; 0x27
   1cca0:	2100      	movs	r1, #0
   1cca2:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   1cca4:	687b      	ldr	r3, [r7, #4]
   1cca6:	2200      	movs	r2, #0
   1cca8:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   1ccaa:	687b      	ldr	r3, [r7, #4]
   1ccac:	2288      	movs	r2, #136	; 0x88
   1ccae:	0352      	lsls	r2, r2, #13
   1ccb0:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   1ccb2:	687b      	ldr	r3, [r7, #4]
   1ccb4:	222c      	movs	r2, #44	; 0x2c
   1ccb6:	2100      	movs	r1, #0
   1ccb8:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   1ccba:	687b      	ldr	r3, [r7, #4]
   1ccbc:	222d      	movs	r2, #45	; 0x2d
   1ccbe:	2100      	movs	r1, #0
   1ccc0:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   1ccc2:	687b      	ldr	r3, [r7, #4]
   1ccc4:	2200      	movs	r2, #0
   1ccc6:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   1ccc8:	687b      	ldr	r3, [r7, #4]
   1ccca:	2200      	movs	r2, #0
   1cccc:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   1ccce:	687b      	ldr	r3, [r7, #4]
   1ccd0:	2200      	movs	r2, #0
   1ccd2:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   1ccd4:	687b      	ldr	r3, [r7, #4]
   1ccd6:	2200      	movs	r2, #0
   1ccd8:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   1ccda:	687b      	ldr	r3, [r7, #4]
   1ccdc:	2200      	movs	r2, #0
   1ccde:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   1cce0:	687b      	ldr	r3, [r7, #4]
   1cce2:	2200      	movs	r2, #0
   1cce4:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   1cce6:	687b      	ldr	r3, [r7, #4]
   1cce8:	2200      	movs	r2, #0
   1ccea:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   1ccec:	687b      	ldr	r3, [r7, #4]
   1ccee:	2200      	movs	r2, #0
   1ccf0:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   1ccf2:	687b      	ldr	r3, [r7, #4]
   1ccf4:	2200      	movs	r2, #0
   1ccf6:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   1ccf8:	687b      	ldr	r3, [r7, #4]
   1ccfa:	2200      	movs	r2, #0
   1ccfc:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   1ccfe:	687b      	ldr	r3, [r7, #4]
   1cd00:	2213      	movs	r2, #19
   1cd02:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   1cd04:	687b      	ldr	r3, [r7, #4]
   1cd06:	2200      	movs	r2, #0
   1cd08:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   1cd0a:	46c0      	nop			; (mov r8, r8)
   1cd0c:	46bd      	mov	sp, r7
   1cd0e:	b002      	add	sp, #8
   1cd10:	bd80      	pop	{r7, pc}
	...

0001cd14 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   1cd14:	b580      	push	{r7, lr}
   1cd16:	b084      	sub	sp, #16
   1cd18:	af00      	add	r7, sp, #0
   1cd1a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1cd1c:	687b      	ldr	r3, [r7, #4]
   1cd1e:	681b      	ldr	r3, [r3, #0]
   1cd20:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1cd22:	687b      	ldr	r3, [r7, #4]
   1cd24:	681b      	ldr	r3, [r3, #0]
   1cd26:	0018      	movs	r0, r3
   1cd28:	4b09      	ldr	r3, [pc, #36]	; (1cd50 <usart_enable+0x3c>)
   1cd2a:	4798      	blx	r3
   1cd2c:	0003      	movs	r3, r0
   1cd2e:	0018      	movs	r0, r3
   1cd30:	4b08      	ldr	r3, [pc, #32]	; (1cd54 <usart_enable+0x40>)
   1cd32:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1cd34:	687b      	ldr	r3, [r7, #4]
   1cd36:	0018      	movs	r0, r3
   1cd38:	4b07      	ldr	r3, [pc, #28]	; (1cd58 <usart_enable+0x44>)
   1cd3a:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   1cd3c:	68fb      	ldr	r3, [r7, #12]
   1cd3e:	681b      	ldr	r3, [r3, #0]
   1cd40:	2202      	movs	r2, #2
   1cd42:	431a      	orrs	r2, r3
   1cd44:	68fb      	ldr	r3, [r7, #12]
   1cd46:	601a      	str	r2, [r3, #0]
}
   1cd48:	46c0      	nop			; (mov r8, r8)
   1cd4a:	46bd      	mov	sp, r7
   1cd4c:	b004      	add	sp, #16
   1cd4e:	bd80      	pop	{r7, pc}
   1cd50:	0002677d 	.word	0x0002677d
   1cd54:	0001cbe5 	.word	0x0001cbe5
   1cd58:	0001cc31 	.word	0x0001cc31

0001cd5c <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
   1cd5c:	b580      	push	{r7, lr}
   1cd5e:	b082      	sub	sp, #8
   1cd60:	af00      	add	r7, sp, #0
   1cd62:	6078      	str	r0, [r7, #4]
   1cd64:	000a      	movs	r2, r1
   1cd66:	1cfb      	adds	r3, r7, #3
   1cd68:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
   1cd6a:	687b      	ldr	r3, [r7, #4]
   1cd6c:	2231      	movs	r2, #49	; 0x31
   1cd6e:	5c9b      	ldrb	r3, [r3, r2]
   1cd70:	b25a      	sxtb	r2, r3
   1cd72:	1cfb      	adds	r3, r7, #3
   1cd74:	781b      	ldrb	r3, [r3, #0]
   1cd76:	2101      	movs	r1, #1
   1cd78:	4099      	lsls	r1, r3
   1cd7a:	000b      	movs	r3, r1
   1cd7c:	b25b      	sxtb	r3, r3
   1cd7e:	4313      	orrs	r3, r2
   1cd80:	b25b      	sxtb	r3, r3
   1cd82:	b2d9      	uxtb	r1, r3
   1cd84:	687b      	ldr	r3, [r7, #4]
   1cd86:	2231      	movs	r2, #49	; 0x31
   1cd88:	5499      	strb	r1, [r3, r2]

}
   1cd8a:	46c0      	nop			; (mov r8, r8)
   1cd8c:	46bd      	mov	sp, r7
   1cd8e:	b002      	add	sp, #8
   1cd90:	bd80      	pop	{r7, pc}
	...

0001cd94 <InitializeSerialConsole>:
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 */

void InitializeSerialConsole(void)
{
   1cd94:	b580      	push	{r7, lr}
   1cd96:	af00      	add	r7, sp, #0
    // Initialize circular buffers for RX and TX
    cbufRx = circular_buf_init((uint8_t *)rxCharacterBuffer, RX_BUFFER_SIZE);
   1cd98:	2380      	movs	r3, #128	; 0x80
   1cd9a:	009a      	lsls	r2, r3, #2
   1cd9c:	4b0f      	ldr	r3, [pc, #60]	; (1cddc <InitializeSerialConsole+0x48>)
   1cd9e:	0011      	movs	r1, r2
   1cda0:	0018      	movs	r0, r3
   1cda2:	4b0f      	ldr	r3, [pc, #60]	; (1cde0 <InitializeSerialConsole+0x4c>)
   1cda4:	4798      	blx	r3
   1cda6:	0002      	movs	r2, r0
   1cda8:	4b0e      	ldr	r3, [pc, #56]	; (1cde4 <InitializeSerialConsole+0x50>)
   1cdaa:	601a      	str	r2, [r3, #0]
    cbufTx = circular_buf_init((uint8_t *)txCharacterBuffer, RX_BUFFER_SIZE);
   1cdac:	2380      	movs	r3, #128	; 0x80
   1cdae:	009a      	lsls	r2, r3, #2
   1cdb0:	4b0d      	ldr	r3, [pc, #52]	; (1cde8 <InitializeSerialConsole+0x54>)
   1cdb2:	0011      	movs	r1, r2
   1cdb4:	0018      	movs	r0, r3
   1cdb6:	4b0a      	ldr	r3, [pc, #40]	; (1cde0 <InitializeSerialConsole+0x4c>)
   1cdb8:	4798      	blx	r3
   1cdba:	0002      	movs	r2, r0
   1cdbc:	4b0b      	ldr	r3, [pc, #44]	; (1cdec <InitializeSerialConsole+0x58>)
   1cdbe:	601a      	str	r2, [r3, #0]

    // Configure USART and Callbacks
    configure_usart();
   1cdc0:	4b0b      	ldr	r3, [pc, #44]	; (1cdf0 <InitializeSerialConsole+0x5c>)
   1cdc2:	4798      	blx	r3
    configure_usart_callbacks();
   1cdc4:	4b0b      	ldr	r3, [pc, #44]	; (1cdf4 <InitializeSerialConsole+0x60>)
   1cdc6:	4798      	blx	r3

    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Kicks off constant reading of characters
   1cdc8:	490b      	ldr	r1, [pc, #44]	; (1cdf8 <InitializeSerialConsole+0x64>)
   1cdca:	4b0c      	ldr	r3, [pc, #48]	; (1cdfc <InitializeSerialConsole+0x68>)
   1cdcc:	2201      	movs	r2, #1
   1cdce:	0018      	movs	r0, r3
   1cdd0:	4b0b      	ldr	r3, [pc, #44]	; (1ce00 <InitializeSerialConsole+0x6c>)
   1cdd2:	4798      	blx	r3

    // Add any other calls you need to do to initialize your Serial Console
}
   1cdd4:	46c0      	nop			; (mov r8, r8)
   1cdd6:	46bd      	mov	sp, r7
   1cdd8:	bd80      	pop	{r7, pc}
   1cdda:	46c0      	nop			; (mov r8, r8)
   1cddc:	20005850 	.word	0x20005850
   1cde0:	0001cac5 	.word	0x0001cac5
   1cde4:	20005648 	.word	0x20005648
   1cde8:	20005650 	.word	0x20005650
   1cdec:	20005a54 	.word	0x20005a54
   1cdf0:	0001cf69 	.word	0x0001cf69
   1cdf4:	0001cfe1 	.word	0x0001cfe1
   1cdf8:	2000564c 	.word	0x2000564c
   1cdfc:	20005614 	.word	0x20005614
   1ce00:	00028025 	.word	0x00028025

0001ce04 <SerialConsoleWriteString>:
 * @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'. Modified to be
 *thread safe.
 * @note			Use to send a string of characters to the user via UART
 */
void SerialConsoleWriteString(const char *string)
{
   1ce04:	b580      	push	{r7, lr}
   1ce06:	b084      	sub	sp, #16
   1ce08:	af00      	add	r7, sp, #0
   1ce0a:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1ce0c:	4b1a      	ldr	r3, [pc, #104]	; (1ce78 <SerialConsoleWriteString+0x74>)
   1ce0e:	4798      	blx	r3
    if (string != NULL) {
   1ce10:	687b      	ldr	r3, [r7, #4]
   1ce12:	2b00      	cmp	r3, #0
   1ce14:	d02a      	beq.n	1ce6c <SerialConsoleWriteString+0x68>
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1ce16:	2300      	movs	r3, #0
   1ce18:	60fb      	str	r3, [r7, #12]
   1ce1a:	e00b      	b.n	1ce34 <SerialConsoleWriteString+0x30>
            circular_buf_put(cbufTx, string[iter]);
   1ce1c:	4b17      	ldr	r3, [pc, #92]	; (1ce7c <SerialConsoleWriteString+0x78>)
   1ce1e:	6818      	ldr	r0, [r3, #0]
   1ce20:	687a      	ldr	r2, [r7, #4]
   1ce22:	68fb      	ldr	r3, [r7, #12]
   1ce24:	18d3      	adds	r3, r2, r3
   1ce26:	781b      	ldrb	r3, [r3, #0]
   1ce28:	0019      	movs	r1, r3
   1ce2a:	4b15      	ldr	r3, [pc, #84]	; (1ce80 <SerialConsoleWriteString+0x7c>)
   1ce2c:	4798      	blx	r3
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1ce2e:	68fb      	ldr	r3, [r7, #12]
   1ce30:	3301      	adds	r3, #1
   1ce32:	60fb      	str	r3, [r7, #12]
   1ce34:	687b      	ldr	r3, [r7, #4]
   1ce36:	0018      	movs	r0, r3
   1ce38:	4b12      	ldr	r3, [pc, #72]	; (1ce84 <SerialConsoleWriteString+0x80>)
   1ce3a:	4798      	blx	r3
   1ce3c:	0002      	movs	r2, r0
   1ce3e:	68fb      	ldr	r3, [r7, #12]
   1ce40:	429a      	cmp	r2, r3
   1ce42:	d8eb      	bhi.n	1ce1c <SerialConsoleWriteString+0x18>
        }

        if (usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK) {
   1ce44:	4b10      	ldr	r3, [pc, #64]	; (1ce88 <SerialConsoleWriteString+0x84>)
   1ce46:	2101      	movs	r1, #1
   1ce48:	0018      	movs	r0, r3
   1ce4a:	4b10      	ldr	r3, [pc, #64]	; (1ce8c <SerialConsoleWriteString+0x88>)
   1ce4c:	4798      	blx	r3
   1ce4e:	1e03      	subs	r3, r0, #0
   1ce50:	d10c      	bne.n	1ce6c <SerialConsoleWriteString+0x68>
            circular_buf_get(cbufTx, (uint8_t *)&latestTx);  // Perform only if the SERCOM TX is free (not busy)
   1ce52:	4b0a      	ldr	r3, [pc, #40]	; (1ce7c <SerialConsoleWriteString+0x78>)
   1ce54:	681b      	ldr	r3, [r3, #0]
   1ce56:	4a0e      	ldr	r2, [pc, #56]	; (1ce90 <SerialConsoleWriteString+0x8c>)
   1ce58:	0011      	movs	r1, r2
   1ce5a:	0018      	movs	r0, r3
   1ce5c:	4b0d      	ldr	r3, [pc, #52]	; (1ce94 <SerialConsoleWriteString+0x90>)
   1ce5e:	4798      	blx	r3
            usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1ce60:	490b      	ldr	r1, [pc, #44]	; (1ce90 <SerialConsoleWriteString+0x8c>)
   1ce62:	4b09      	ldr	r3, [pc, #36]	; (1ce88 <SerialConsoleWriteString+0x84>)
   1ce64:	2201      	movs	r2, #1
   1ce66:	0018      	movs	r0, r3
   1ce68:	4b0b      	ldr	r3, [pc, #44]	; (1ce98 <SerialConsoleWriteString+0x94>)
   1ce6a:	4798      	blx	r3
        }
    }
    xTaskResumeAll();
   1ce6c:	4b0b      	ldr	r3, [pc, #44]	; (1ce9c <SerialConsoleWriteString+0x98>)
   1ce6e:	4798      	blx	r3
}
   1ce70:	46c0      	nop			; (mov r8, r8)
   1ce72:	46bd      	mov	sp, r7
   1ce74:	b004      	add	sp, #16
   1ce76:	bd80      	pop	{r7, pc}
   1ce78:	0001b471 	.word	0x0001b471
   1ce7c:	20005a54 	.word	0x20005a54
   1ce80:	0001cb25 	.word	0x0001cb25
   1ce84:	0003497b 	.word	0x0003497b
   1ce88:	20005614 	.word	0x20005614
   1ce8c:	0002806d 	.word	0x0002806d
   1ce90:	20005a50 	.word	0x20005a50
   1ce94:	0001cb59 	.word	0x0001cb59
   1ce98:	00027fdd 	.word	0x00027fdd
   1ce9c:	0001b489 	.word	0x0001b489

0001cea0 <SerialConsoleReadCharacter>:
 * @param[in]	Pointer to a character. This function will return the character from the RX buffer into this pointer
 * @return		Returns -1 if there are no characters in the buffer
 * @note			Use to receive characters from the RX buffer (FIFO)
 */
int SerialConsoleReadCharacter(uint8_t *rxChar)
{
   1cea0:	b580      	push	{r7, lr}
   1cea2:	b084      	sub	sp, #16
   1cea4:	af00      	add	r7, sp, #0
   1cea6:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1cea8:	4b08      	ldr	r3, [pc, #32]	; (1cecc <SerialConsoleReadCharacter+0x2c>)
   1ceaa:	4798      	blx	r3
    int a = circular_buf_get(cbufRx, (uint8_t *)rxChar);
   1ceac:	4b08      	ldr	r3, [pc, #32]	; (1ced0 <SerialConsoleReadCharacter+0x30>)
   1ceae:	681b      	ldr	r3, [r3, #0]
   1ceb0:	687a      	ldr	r2, [r7, #4]
   1ceb2:	0011      	movs	r1, r2
   1ceb4:	0018      	movs	r0, r3
   1ceb6:	4b07      	ldr	r3, [pc, #28]	; (1ced4 <SerialConsoleReadCharacter+0x34>)
   1ceb8:	4798      	blx	r3
   1ceba:	0003      	movs	r3, r0
   1cebc:	60fb      	str	r3, [r7, #12]
    xTaskResumeAll();
   1cebe:	4b06      	ldr	r3, [pc, #24]	; (1ced8 <SerialConsoleReadCharacter+0x38>)
   1cec0:	4798      	blx	r3
    return a;
   1cec2:	68fb      	ldr	r3, [r7, #12]
}
   1cec4:	0018      	movs	r0, r3
   1cec6:	46bd      	mov	sp, r7
   1cec8:	b004      	add	sp, #16
   1ceca:	bd80      	pop	{r7, pc}
   1cecc:	0001b471 	.word	0x0001b471
   1ced0:	20005648 	.word	0x20005648
   1ced4:	0001cb59 	.word	0x0001cb59
   1ced8:	0001b489 	.word	0x0001b489

0001cedc <getLogLevel>:
 * @return		Returns the current debug level of the system.
 * @note
 */

enum eDebugLogLevels getLogLevel(void)
{
   1cedc:	b580      	push	{r7, lr}
   1cede:	af00      	add	r7, sp, #0
    return currentDebugLevel;
   1cee0:	4b02      	ldr	r3, [pc, #8]	; (1ceec <getLogLevel+0x10>)
   1cee2:	781b      	ldrb	r3, [r3, #0]
}
   1cee4:	0018      	movs	r0, r3
   1cee6:	46bd      	mov	sp, r7
   1cee8:	bd80      	pop	{r7, pc}
   1ceea:	46c0      	nop			; (mov r8, r8)
   1ceec:	200041e8 	.word	0x200041e8

0001cef0 <LogMessage>:
 * @fn			LogMessage
 * @brief
 * @note
 */
void LogMessage(enum eDebugLogLevels level, const char *format, ...)
{
   1cef0:	b40e      	push	{r1, r2, r3}
   1cef2:	b590      	push	{r4, r7, lr}
   1cef4:	b084      	sub	sp, #16
   1cef6:	af00      	add	r7, sp, #0
   1cef8:	0002      	movs	r2, r0
   1cefa:	1dfb      	adds	r3, r7, #7
   1cefc:	701a      	strb	r2, [r3, #0]
    if (getLogLevel() <= level) {
   1cefe:	4b0e      	ldr	r3, [pc, #56]	; (1cf38 <LogMessage+0x48>)
   1cf00:	4798      	blx	r3
   1cf02:	0003      	movs	r3, r0
   1cf04:	001a      	movs	r2, r3
   1cf06:	1dfb      	adds	r3, r7, #7
   1cf08:	781b      	ldrb	r3, [r3, #0]
   1cf0a:	4293      	cmp	r3, r2
   1cf0c:	d30c      	bcc.n	1cf28 <LogMessage+0x38>
        va_list ap;
        va_start(ap, format);
   1cf0e:	2320      	movs	r3, #32
   1cf10:	18fb      	adds	r3, r7, r3
   1cf12:	60fb      	str	r3, [r7, #12]
        vsnprintf(debugBuffer, 127, format, ap);
   1cf14:	68fb      	ldr	r3, [r7, #12]
   1cf16:	69fa      	ldr	r2, [r7, #28]
   1cf18:	4808      	ldr	r0, [pc, #32]	; (1cf3c <LogMessage+0x4c>)
   1cf1a:	217f      	movs	r1, #127	; 0x7f
   1cf1c:	4c08      	ldr	r4, [pc, #32]	; (1cf40 <LogMessage+0x50>)
   1cf1e:	47a0      	blx	r4
        SerialConsoleWriteString(debugBuffer);
   1cf20:	4b06      	ldr	r3, [pc, #24]	; (1cf3c <LogMessage+0x4c>)
   1cf22:	0018      	movs	r0, r3
   1cf24:	4b07      	ldr	r3, [pc, #28]	; (1cf44 <LogMessage+0x54>)
   1cf26:	4798      	blx	r3
        va_end(ap);
    }
};
   1cf28:	46c0      	nop			; (mov r8, r8)
   1cf2a:	46bd      	mov	sp, r7
   1cf2c:	b004      	add	sp, #16
   1cf2e:	bc90      	pop	{r4, r7}
   1cf30:	bc08      	pop	{r3}
   1cf32:	b003      	add	sp, #12
   1cf34:	4718      	bx	r3
   1cf36:	46c0      	nop			; (mov r8, r8)
   1cf38:	0001cedd 	.word	0x0001cedd
   1cf3c:	20005594 	.word	0x20005594
   1cf40:	00034bb5 	.word	0x00034bb5
   1cf44:	0001ce05 	.word	0x0001ce05

0001cf48 <LogMessageDebug>:
 * @fn			LogMessage Debug
 * @brief
 * @note
 */
void LogMessageDebug(const char *format, ...)
{
   1cf48:	b40f      	push	{r0, r1, r2, r3}
   1cf4a:	b580      	push	{r7, lr}
   1cf4c:	af00      	add	r7, sp, #0
    LogMessage(LOG_DEBUG_LVL, format);
   1cf4e:	68bb      	ldr	r3, [r7, #8]
   1cf50:	0019      	movs	r1, r3
   1cf52:	2001      	movs	r0, #1
   1cf54:	4b03      	ldr	r3, [pc, #12]	; (1cf64 <LogMessageDebug+0x1c>)
   1cf56:	4798      	blx	r3
};
   1cf58:	46c0      	nop			; (mov r8, r8)
   1cf5a:	46bd      	mov	sp, r7
   1cf5c:	bc80      	pop	{r7}
   1cf5e:	bc08      	pop	{r3}
   1cf60:	b004      	add	sp, #16
   1cf62:	4718      	bx	r3
   1cf64:	0001cef1 	.word	0x0001cef1

0001cf68 <configure_usart>:
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 */
static void configure_usart(void)
{
   1cf68:	b580      	push	{r7, lr}
   1cf6a:	b090      	sub	sp, #64	; 0x40
   1cf6c:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
   1cf6e:	003b      	movs	r3, r7
   1cf70:	0018      	movs	r0, r3
   1cf72:	4b14      	ldr	r3, [pc, #80]	; (1cfc4 <configure_usart+0x5c>)
   1cf74:	4798      	blx	r3

    config_usart.baudrate = 115200;
   1cf76:	003b      	movs	r3, r7
   1cf78:	22e1      	movs	r2, #225	; 0xe1
   1cf7a:	0252      	lsls	r2, r2, #9
   1cf7c:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   1cf7e:	003b      	movs	r3, r7
   1cf80:	22c4      	movs	r2, #196	; 0xc4
   1cf82:	0392      	lsls	r2, r2, #14
   1cf84:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   1cf86:	003b      	movs	r3, r7
   1cf88:	2201      	movs	r2, #1
   1cf8a:	4252      	negs	r2, r2
   1cf8c:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   1cf8e:	003b      	movs	r3, r7
   1cf90:	2201      	movs	r2, #1
   1cf92:	4252      	negs	r2, r2
   1cf94:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   1cf96:	003b      	movs	r3, r7
   1cf98:	4a0b      	ldr	r2, [pc, #44]	; (1cfc8 <configure_usart+0x60>)
   1cf9a:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   1cf9c:	003b      	movs	r3, r7
   1cf9e:	4a0b      	ldr	r2, [pc, #44]	; (1cfcc <configure_usart+0x64>)
   1cfa0:	63da      	str	r2, [r3, #60]	; 0x3c
    while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
   1cfa2:	46c0      	nop			; (mov r8, r8)
   1cfa4:	003a      	movs	r2, r7
   1cfa6:	490a      	ldr	r1, [pc, #40]	; (1cfd0 <configure_usart+0x68>)
   1cfa8:	4b0a      	ldr	r3, [pc, #40]	; (1cfd4 <configure_usart+0x6c>)
   1cfaa:	0018      	movs	r0, r3
   1cfac:	4b0a      	ldr	r3, [pc, #40]	; (1cfd8 <configure_usart+0x70>)
   1cfae:	4798      	blx	r3
   1cfb0:	1e03      	subs	r3, r0, #0
   1cfb2:	d1f7      	bne.n	1cfa4 <configure_usart+0x3c>
    }

    usart_enable(&usart_instance);
   1cfb4:	4b07      	ldr	r3, [pc, #28]	; (1cfd4 <configure_usart+0x6c>)
   1cfb6:	0018      	movs	r0, r3
   1cfb8:	4b08      	ldr	r3, [pc, #32]	; (1cfdc <configure_usart+0x74>)
   1cfba:	4798      	blx	r3
}
   1cfbc:	46c0      	nop			; (mov r8, r8)
   1cfbe:	46bd      	mov	sp, r7
   1cfc0:	b010      	add	sp, #64	; 0x40
   1cfc2:	bd80      	pop	{r7, pc}
   1cfc4:	0001cc55 	.word	0x0001cc55
   1cfc8:	002a0003 	.word	0x002a0003
   1cfcc:	002b0003 	.word	0x002b0003
   1cfd0:	42001800 	.word	0x42001800
   1cfd4:	20005614 	.word	0x20005614
   1cfd8:	00027be1 	.word	0x00027be1
   1cfdc:	0001cd15 	.word	0x0001cd15

0001cfe0 <configure_usart_callbacks>:
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 */
static void configure_usart_callbacks(void)
{
   1cfe0:	b580      	push	{r7, lr}
   1cfe2:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
   1cfe4:	490c      	ldr	r1, [pc, #48]	; (1d018 <configure_usart_callbacks+0x38>)
   1cfe6:	4b0d      	ldr	r3, [pc, #52]	; (1d01c <configure_usart_callbacks+0x3c>)
   1cfe8:	2200      	movs	r2, #0
   1cfea:	0018      	movs	r0, r3
   1cfec:	4b0c      	ldr	r3, [pc, #48]	; (1d020 <configure_usart_callbacks+0x40>)
   1cfee:	4798      	blx	r3
    usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
   1cff0:	490c      	ldr	r1, [pc, #48]	; (1d024 <configure_usart_callbacks+0x44>)
   1cff2:	4b0a      	ldr	r3, [pc, #40]	; (1d01c <configure_usart_callbacks+0x3c>)
   1cff4:	2201      	movs	r2, #1
   1cff6:	0018      	movs	r0, r3
   1cff8:	4b09      	ldr	r3, [pc, #36]	; (1d020 <configure_usart_callbacks+0x40>)
   1cffa:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
   1cffc:	4b07      	ldr	r3, [pc, #28]	; (1d01c <configure_usart_callbacks+0x3c>)
   1cffe:	2100      	movs	r1, #0
   1d000:	0018      	movs	r0, r3
   1d002:	4b09      	ldr	r3, [pc, #36]	; (1d028 <configure_usart_callbacks+0x48>)
   1d004:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
   1d006:	4b05      	ldr	r3, [pc, #20]	; (1d01c <configure_usart_callbacks+0x3c>)
   1d008:	2101      	movs	r1, #1
   1d00a:	0018      	movs	r0, r3
   1d00c:	4b06      	ldr	r3, [pc, #24]	; (1d028 <configure_usart_callbacks+0x48>)
   1d00e:	4798      	blx	r3
}
   1d010:	46c0      	nop			; (mov r8, r8)
   1d012:	46bd      	mov	sp, r7
   1d014:	bd80      	pop	{r7, pc}
   1d016:	46c0      	nop			; (mov r8, r8)
   1d018:	0001d075 	.word	0x0001d075
   1d01c:	20005614 	.word	0x20005614
   1d020:	00027f95 	.word	0x00027f95
   1d024:	0001d02d 	.word	0x0001d02d
   1d028:	0001cd5d 	.word	0x0001cd5d

0001d02c <usart_read_callback>:
 * @fn			void usart_read_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
 * @note
 */
void usart_read_callback(struct usart_module *const usart_module)
{
   1d02c:	b580      	push	{r7, lr}
   1d02e:	b082      	sub	sp, #8
   1d030:	af00      	add	r7, sp, #0
   1d032:	6078      	str	r0, [r7, #4]
    circular_buf_put(cbufRx, (uint8_t)latestRx);                      // Add the latest read character into the RX circular Buffer
   1d034:	4b09      	ldr	r3, [pc, #36]	; (1d05c <usart_read_callback+0x30>)
   1d036:	681a      	ldr	r2, [r3, #0]
   1d038:	4b09      	ldr	r3, [pc, #36]	; (1d060 <usart_read_callback+0x34>)
   1d03a:	781b      	ldrb	r3, [r3, #0]
   1d03c:	0019      	movs	r1, r3
   1d03e:	0010      	movs	r0, r2
   1d040:	4b08      	ldr	r3, [pc, #32]	; (1d064 <usart_read_callback+0x38>)
   1d042:	4798      	blx	r3
    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Order the MCU to keep reading
   1d044:	4906      	ldr	r1, [pc, #24]	; (1d060 <usart_read_callback+0x34>)
   1d046:	4b08      	ldr	r3, [pc, #32]	; (1d068 <usart_read_callback+0x3c>)
   1d048:	2201      	movs	r2, #1
   1d04a:	0018      	movs	r0, r3
   1d04c:	4b07      	ldr	r3, [pc, #28]	; (1d06c <usart_read_callback+0x40>)
   1d04e:	4798      	blx	r3
    CliCharReadySemaphoreGiveFromISR();                               // Give binary semaphore
   1d050:	4b07      	ldr	r3, [pc, #28]	; (1d070 <usart_read_callback+0x44>)
   1d052:	4798      	blx	r3
}
   1d054:	46c0      	nop			; (mov r8, r8)
   1d056:	46bd      	mov	sp, r7
   1d058:	b002      	add	sp, #8
   1d05a:	bd80      	pop	{r7, pc}
   1d05c:	20005648 	.word	0x20005648
   1d060:	2000564c 	.word	0x2000564c
   1d064:	0001cb25 	.word	0x0001cb25
   1d068:	20005614 	.word	0x20005614
   1d06c:	00028025 	.word	0x00028025
   1d070:	00013b65 	.word	0x00013b65

0001d074 <usart_write_callback>:
 * @fn			void usart_write_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
 * @note
 */
void usart_write_callback(struct usart_module *const usart_module)
{
   1d074:	b580      	push	{r7, lr}
   1d076:	b082      	sub	sp, #8
   1d078:	af00      	add	r7, sp, #0
   1d07a:	6078      	str	r0, [r7, #4]
    if (circular_buf_get(cbufTx, (uint8_t *)&latestTx) != -1)  // Only continue if there are more characters to send
   1d07c:	4b09      	ldr	r3, [pc, #36]	; (1d0a4 <usart_write_callback+0x30>)
   1d07e:	681b      	ldr	r3, [r3, #0]
   1d080:	4a09      	ldr	r2, [pc, #36]	; (1d0a8 <usart_write_callback+0x34>)
   1d082:	0011      	movs	r1, r2
   1d084:	0018      	movs	r0, r3
   1d086:	4b09      	ldr	r3, [pc, #36]	; (1d0ac <usart_write_callback+0x38>)
   1d088:	4798      	blx	r3
   1d08a:	0003      	movs	r3, r0
   1d08c:	3301      	adds	r3, #1
   1d08e:	d005      	beq.n	1d09c <usart_write_callback+0x28>
    {
        usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1d090:	4905      	ldr	r1, [pc, #20]	; (1d0a8 <usart_write_callback+0x34>)
   1d092:	4b07      	ldr	r3, [pc, #28]	; (1d0b0 <usart_write_callback+0x3c>)
   1d094:	2201      	movs	r2, #1
   1d096:	0018      	movs	r0, r3
   1d098:	4b06      	ldr	r3, [pc, #24]	; (1d0b4 <usart_write_callback+0x40>)
   1d09a:	4798      	blx	r3
    }
}
   1d09c:	46c0      	nop			; (mov r8, r8)
   1d09e:	46bd      	mov	sp, r7
   1d0a0:	b002      	add	sp, #8
   1d0a2:	bd80      	pop	{r7, pc}
   1d0a4:	20005a54 	.word	0x20005a54
   1d0a8:	20005a50 	.word	0x20005a50
   1d0ac:	0001cb59 	.word	0x0001cb59
   1d0b0:	20005614 	.word	0x20005614
   1d0b4:	00027fdd 	.word	0x00027fdd

0001d0b8 <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
   1d0b8:	b590      	push	{r4, r7, lr}
   1d0ba:	b087      	sub	sp, #28
   1d0bc:	af00      	add	r7, sp, #0
   1d0be:	60f8      	str	r0, [r7, #12]
   1d0c0:	000c      	movs	r4, r1
   1d0c2:	0010      	movs	r0, r2
   1d0c4:	0019      	movs	r1, r3
   1d0c6:	230a      	movs	r3, #10
   1d0c8:	18fb      	adds	r3, r7, r3
   1d0ca:	1c22      	adds	r2, r4, #0
   1d0cc:	801a      	strh	r2, [r3, #0]
   1d0ce:	2308      	movs	r3, #8
   1d0d0:	18fb      	adds	r3, r7, r3
   1d0d2:	1c02      	adds	r2, r0, #0
   1d0d4:	801a      	strh	r2, [r3, #0]
   1d0d6:	1dfb      	adds	r3, r7, #7
   1d0d8:	1c0a      	adds	r2, r1, #0
   1d0da:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   1d0dc:	230a      	movs	r3, #10
   1d0de:	18fb      	adds	r3, r7, r3
   1d0e0:	881a      	ldrh	r2, [r3, #0]
   1d0e2:	2308      	movs	r3, #8
   1d0e4:	18fb      	adds	r3, r7, r3
   1d0e6:	881b      	ldrh	r3, [r3, #0]
   1d0e8:	1ad3      	subs	r3, r2, r3
   1d0ea:	3307      	adds	r3, #7
   1d0ec:	2b00      	cmp	r3, #0
   1d0ee:	da00      	bge.n	1d0f2 <SDMMC_UNSTUFF_BITS+0x3a>
   1d0f0:	3307      	adds	r3, #7
   1d0f2:	10db      	asrs	r3, r3, #3
   1d0f4:	3b01      	subs	r3, #1
   1d0f6:	68fa      	ldr	r2, [r7, #12]
   1d0f8:	18d3      	adds	r3, r2, r3
   1d0fa:	781b      	ldrb	r3, [r3, #0]
   1d0fc:	0019      	movs	r1, r3
   1d0fe:	2308      	movs	r3, #8
   1d100:	18fb      	adds	r3, r7, r3
   1d102:	881b      	ldrh	r3, [r3, #0]
   1d104:	2207      	movs	r2, #7
   1d106:	4013      	ands	r3, r2
   1d108:	4119      	asrs	r1, r3
   1d10a:	000b      	movs	r3, r1
   1d10c:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
   1d10e:	2308      	movs	r3, #8
   1d110:	18fb      	adds	r3, r7, r3
   1d112:	881b      	ldrh	r3, [r3, #0]
   1d114:	2207      	movs	r2, #7
   1d116:	401a      	ands	r2, r3
   1d118:	1dfb      	adds	r3, r7, #7
   1d11a:	781b      	ldrb	r3, [r3, #0]
   1d11c:	18d3      	adds	r3, r2, r3
   1d11e:	2b08      	cmp	r3, #8
   1d120:	dd1c      	ble.n	1d15c <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   1d122:	230a      	movs	r3, #10
   1d124:	18fb      	adds	r3, r7, r3
   1d126:	881a      	ldrh	r2, [r3, #0]
   1d128:	2308      	movs	r3, #8
   1d12a:	18fb      	adds	r3, r7, r3
   1d12c:	881b      	ldrh	r3, [r3, #0]
   1d12e:	1ad3      	subs	r3, r2, r3
   1d130:	3307      	adds	r3, #7
   1d132:	2b00      	cmp	r3, #0
   1d134:	da00      	bge.n	1d138 <SDMMC_UNSTUFF_BITS+0x80>
   1d136:	3307      	adds	r3, #7
   1d138:	10db      	asrs	r3, r3, #3
   1d13a:	3b02      	subs	r3, #2
   1d13c:	68fa      	ldr	r2, [r7, #12]
   1d13e:	18d3      	adds	r3, r2, r3
   1d140:	781b      	ldrb	r3, [r3, #0]
   1d142:	0019      	movs	r1, r3
   1d144:	2308      	movs	r3, #8
   1d146:	18fb      	adds	r3, r7, r3
   1d148:	881b      	ldrh	r3, [r3, #0]
   1d14a:	2207      	movs	r2, #7
   1d14c:	4013      	ands	r3, r2
   1d14e:	2208      	movs	r2, #8
   1d150:	1ad3      	subs	r3, r2, r3
   1d152:	4099      	lsls	r1, r3
   1d154:	000b      	movs	r3, r1
   1d156:	697a      	ldr	r2, [r7, #20]
   1d158:	4313      	orrs	r3, r2
   1d15a:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1d15c:	2308      	movs	r3, #8
   1d15e:	18fb      	adds	r3, r7, r3
   1d160:	881b      	ldrh	r3, [r3, #0]
   1d162:	2207      	movs	r2, #7
   1d164:	401a      	ands	r2, r3
   1d166:	1dfb      	adds	r3, r7, #7
   1d168:	781b      	ldrb	r3, [r3, #0]
   1d16a:	18d3      	adds	r3, r2, r3
   1d16c:	2b10      	cmp	r3, #16
   1d16e:	dd1c      	ble.n	1d1aa <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1d170:	230a      	movs	r3, #10
   1d172:	18fb      	adds	r3, r7, r3
   1d174:	881a      	ldrh	r2, [r3, #0]
   1d176:	2308      	movs	r3, #8
   1d178:	18fb      	adds	r3, r7, r3
   1d17a:	881b      	ldrh	r3, [r3, #0]
   1d17c:	1ad3      	subs	r3, r2, r3
   1d17e:	3307      	adds	r3, #7
   1d180:	2b00      	cmp	r3, #0
   1d182:	da00      	bge.n	1d186 <SDMMC_UNSTUFF_BITS+0xce>
   1d184:	3307      	adds	r3, #7
   1d186:	10db      	asrs	r3, r3, #3
   1d188:	3b03      	subs	r3, #3
   1d18a:	68fa      	ldr	r2, [r7, #12]
   1d18c:	18d3      	adds	r3, r2, r3
   1d18e:	781b      	ldrb	r3, [r3, #0]
   1d190:	0019      	movs	r1, r3
   1d192:	2308      	movs	r3, #8
   1d194:	18fb      	adds	r3, r7, r3
   1d196:	881b      	ldrh	r3, [r3, #0]
   1d198:	2207      	movs	r2, #7
   1d19a:	4013      	ands	r3, r2
   1d19c:	2210      	movs	r2, #16
   1d19e:	1ad3      	subs	r3, r2, r3
   1d1a0:	4099      	lsls	r1, r3
   1d1a2:	000b      	movs	r3, r1
   1d1a4:	697a      	ldr	r2, [r7, #20]
   1d1a6:	4313      	orrs	r3, r2
   1d1a8:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1d1aa:	2308      	movs	r3, #8
   1d1ac:	18fb      	adds	r3, r7, r3
   1d1ae:	881b      	ldrh	r3, [r3, #0]
   1d1b0:	2207      	movs	r2, #7
   1d1b2:	401a      	ands	r2, r3
   1d1b4:	1dfb      	adds	r3, r7, #7
   1d1b6:	781b      	ldrb	r3, [r3, #0]
   1d1b8:	18d3      	adds	r3, r2, r3
   1d1ba:	2b10      	cmp	r3, #16
   1d1bc:	dd1c      	ble.n	1d1f8 <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1d1be:	230a      	movs	r3, #10
   1d1c0:	18fb      	adds	r3, r7, r3
   1d1c2:	881a      	ldrh	r2, [r3, #0]
   1d1c4:	2308      	movs	r3, #8
   1d1c6:	18fb      	adds	r3, r7, r3
   1d1c8:	881b      	ldrh	r3, [r3, #0]
   1d1ca:	1ad3      	subs	r3, r2, r3
   1d1cc:	3307      	adds	r3, #7
   1d1ce:	2b00      	cmp	r3, #0
   1d1d0:	da00      	bge.n	1d1d4 <SDMMC_UNSTUFF_BITS+0x11c>
   1d1d2:	3307      	adds	r3, #7
   1d1d4:	10db      	asrs	r3, r3, #3
   1d1d6:	3b03      	subs	r3, #3
   1d1d8:	68fa      	ldr	r2, [r7, #12]
   1d1da:	18d3      	adds	r3, r2, r3
   1d1dc:	781b      	ldrb	r3, [r3, #0]
   1d1de:	0019      	movs	r1, r3
   1d1e0:	2308      	movs	r3, #8
   1d1e2:	18fb      	adds	r3, r7, r3
   1d1e4:	881b      	ldrh	r3, [r3, #0]
   1d1e6:	2207      	movs	r2, #7
   1d1e8:	4013      	ands	r3, r2
   1d1ea:	2210      	movs	r2, #16
   1d1ec:	1ad3      	subs	r3, r2, r3
   1d1ee:	4099      	lsls	r1, r3
   1d1f0:	000b      	movs	r3, r1
   1d1f2:	697a      	ldr	r2, [r7, #20]
   1d1f4:	4313      	orrs	r3, r2
   1d1f6:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
   1d1f8:	1dfb      	adds	r3, r7, #7
   1d1fa:	781b      	ldrb	r3, [r3, #0]
   1d1fc:	2201      	movs	r2, #1
   1d1fe:	409a      	lsls	r2, r3
   1d200:	0013      	movs	r3, r2
   1d202:	1e5a      	subs	r2, r3, #1
   1d204:	697b      	ldr	r3, [r7, #20]
   1d206:	4013      	ands	r3, r2
   1d208:	617b      	str	r3, [r7, #20]
	return value;
   1d20a:	697b      	ldr	r3, [r7, #20]
}
   1d20c:	0018      	movs	r0, r3
   1d20e:	46bd      	mov	sp, r7
   1d210:	b007      	add	sp, #28
   1d212:	bd90      	pop	{r4, r7, pc}

0001d214 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
   1d214:	b580      	push	{r7, lr}
   1d216:	b082      	sub	sp, #8
   1d218:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1d21a:	4b23      	ldr	r3, [pc, #140]	; (1d2a8 <mmc_spi_op_cond+0x94>)
   1d21c:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
   1d21e:	4b23      	ldr	r3, [pc, #140]	; (1d2ac <mmc_spi_op_cond+0x98>)
   1d220:	2100      	movs	r1, #0
   1d222:	0018      	movs	r0, r3
   1d224:	4b22      	ldr	r3, [pc, #136]	; (1d2b0 <mmc_spi_op_cond+0x9c>)
   1d226:	4798      	blx	r3
   1d228:	0003      	movs	r3, r0
   1d22a:	001a      	movs	r2, r3
   1d22c:	2301      	movs	r3, #1
   1d22e:	4053      	eors	r3, r2
   1d230:	b2db      	uxtb	r3, r3
   1d232:	2b00      	cmp	r3, #0
   1d234:	d001      	beq.n	1d23a <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
   1d236:	2300      	movs	r3, #0
   1d238:	e031      	b.n	1d29e <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
   1d23a:	4b1e      	ldr	r3, [pc, #120]	; (1d2b4 <mmc_spi_op_cond+0xa0>)
   1d23c:	4798      	blx	r3
   1d23e:	0003      	movs	r3, r0
   1d240:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
   1d242:	683b      	ldr	r3, [r7, #0]
   1d244:	2201      	movs	r2, #1
   1d246:	4013      	ands	r3, r2
   1d248:	d006      	beq.n	1d258 <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
   1d24a:	687b      	ldr	r3, [r7, #4]
   1d24c:	1e5a      	subs	r2, r3, #1
   1d24e:	607a      	str	r2, [r7, #4]
   1d250:	2b00      	cmp	r3, #0
   1d252:	d1e4      	bne.n	1d21e <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
   1d254:	2300      	movs	r3, #0
   1d256:	e022      	b.n	1d29e <mmc_spi_op_cond+0x8a>
			break;
   1d258:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1d25a:	4b17      	ldr	r3, [pc, #92]	; (1d2b8 <mmc_spi_op_cond+0xa4>)
   1d25c:	2100      	movs	r1, #0
   1d25e:	0018      	movs	r0, r3
   1d260:	4b13      	ldr	r3, [pc, #76]	; (1d2b0 <mmc_spi_op_cond+0x9c>)
   1d262:	4798      	blx	r3
   1d264:	0003      	movs	r3, r0
   1d266:	001a      	movs	r2, r3
   1d268:	2301      	movs	r3, #1
   1d26a:	4053      	eors	r3, r2
   1d26c:	b2db      	uxtb	r3, r3
   1d26e:	2b00      	cmp	r3, #0
   1d270:	d001      	beq.n	1d276 <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1d272:	2300      	movs	r3, #0
   1d274:	e013      	b.n	1d29e <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
   1d276:	4b0f      	ldr	r3, [pc, #60]	; (1d2b4 <mmc_spi_op_cond+0xa0>)
   1d278:	4798      	blx	r3
   1d27a:	0002      	movs	r2, r0
   1d27c:	23c0      	movs	r3, #192	; 0xc0
   1d27e:	05db      	lsls	r3, r3, #23
   1d280:	401a      	ands	r2, r3
   1d282:	2380      	movs	r3, #128	; 0x80
   1d284:	05db      	lsls	r3, r3, #23
   1d286:	429a      	cmp	r2, r3
   1d288:	d108      	bne.n	1d29c <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
   1d28a:	4b0c      	ldr	r3, [pc, #48]	; (1d2bc <mmc_spi_op_cond+0xa8>)
   1d28c:	681a      	ldr	r2, [r3, #0]
   1d28e:	4b0b      	ldr	r3, [pc, #44]	; (1d2bc <mmc_spi_op_cond+0xa8>)
   1d290:	681b      	ldr	r3, [r3, #0]
   1d292:	7adb      	ldrb	r3, [r3, #11]
   1d294:	2108      	movs	r1, #8
   1d296:	430b      	orrs	r3, r1
   1d298:	b2db      	uxtb	r3, r3
   1d29a:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1d29c:	2301      	movs	r3, #1
}
   1d29e:	0018      	movs	r0, r3
   1d2a0:	46bd      	mov	sp, r7
   1d2a2:	b002      	add	sp, #8
   1d2a4:	bd80      	pop	{r7, pc}
   1d2a6:	46c0      	nop			; (mov r8, r8)
   1d2a8:	00001bee 	.word	0x00001bee
   1d2ac:	00001101 	.word	0x00001101
   1d2b0:	0001ec91 	.word	0x0001ec91
   1d2b4:	0001eed1 	.word	0x0001eed1
   1d2b8:	0000053a 	.word	0x0000053a
   1d2bc:	20004210 	.word	0x20004210

0001d2c0 <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
   1d2c0:	b580      	push	{r7, lr}
   1d2c2:	b086      	sub	sp, #24
   1d2c4:	af00      	add	r7, sp, #0
   1d2c6:	0002      	movs	r2, r0
   1d2c8:	1dfb      	adds	r3, r7, #7
   1d2ca:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1d2cc:	4b2e      	ldr	r3, [pc, #184]	; (1d388 <sd_spi_op_cond+0xc8>)
   1d2ce:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   1d2d0:	4b2e      	ldr	r3, [pc, #184]	; (1d38c <sd_spi_op_cond+0xcc>)
   1d2d2:	2100      	movs	r1, #0
   1d2d4:	0018      	movs	r0, r3
   1d2d6:	4b2e      	ldr	r3, [pc, #184]	; (1d390 <sd_spi_op_cond+0xd0>)
   1d2d8:	4798      	blx	r3
   1d2da:	0003      	movs	r3, r0
   1d2dc:	001a      	movs	r2, r3
   1d2de:	2301      	movs	r3, #1
   1d2e0:	4053      	eors	r3, r2
   1d2e2:	b2db      	uxtb	r3, r3
   1d2e4:	2b00      	cmp	r3, #0
   1d2e6:	d001      	beq.n	1d2ec <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
   1d2e8:	2300      	movs	r3, #0
   1d2ea:	e048      	b.n	1d37e <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
   1d2ec:	2300      	movs	r3, #0
   1d2ee:	617b      	str	r3, [r7, #20]
		if (v2) {
   1d2f0:	1dfb      	adds	r3, r7, #7
   1d2f2:	781b      	ldrb	r3, [r3, #0]
   1d2f4:	2b00      	cmp	r3, #0
   1d2f6:	d004      	beq.n	1d302 <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
   1d2f8:	697b      	ldr	r3, [r7, #20]
   1d2fa:	2280      	movs	r2, #128	; 0x80
   1d2fc:	05d2      	lsls	r2, r2, #23
   1d2fe:	4313      	orrs	r3, r2
   1d300:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
   1d302:	697b      	ldr	r3, [r7, #20]
   1d304:	4a23      	ldr	r2, [pc, #140]	; (1d394 <sd_spi_op_cond+0xd4>)
   1d306:	0019      	movs	r1, r3
   1d308:	0010      	movs	r0, r2
   1d30a:	4b21      	ldr	r3, [pc, #132]	; (1d390 <sd_spi_op_cond+0xd0>)
   1d30c:	4798      	blx	r3
   1d30e:	0003      	movs	r3, r0
   1d310:	001a      	movs	r2, r3
   1d312:	2301      	movs	r3, #1
   1d314:	4053      	eors	r3, r2
   1d316:	b2db      	uxtb	r3, r3
   1d318:	2b00      	cmp	r3, #0
   1d31a:	d001      	beq.n	1d320 <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
   1d31c:	2300      	movs	r3, #0
   1d31e:	e02e      	b.n	1d37e <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
   1d320:	4b1d      	ldr	r3, [pc, #116]	; (1d398 <sd_spi_op_cond+0xd8>)
   1d322:	4798      	blx	r3
   1d324:	0003      	movs	r3, r0
   1d326:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
   1d328:	68fb      	ldr	r3, [r7, #12]
   1d32a:	2201      	movs	r2, #1
   1d32c:	4013      	ands	r3, r2
   1d32e:	d006      	beq.n	1d33e <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
   1d330:	693b      	ldr	r3, [r7, #16]
   1d332:	1e5a      	subs	r2, r3, #1
   1d334:	613a      	str	r2, [r7, #16]
   1d336:	2b00      	cmp	r3, #0
   1d338:	d1ca      	bne.n	1d2d0 <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
   1d33a:	2300      	movs	r3, #0
   1d33c:	e01f      	b.n	1d37e <sd_spi_op_cond+0xbe>
			break;
   1d33e:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1d340:	4b16      	ldr	r3, [pc, #88]	; (1d39c <sd_spi_op_cond+0xdc>)
   1d342:	2100      	movs	r1, #0
   1d344:	0018      	movs	r0, r3
   1d346:	4b12      	ldr	r3, [pc, #72]	; (1d390 <sd_spi_op_cond+0xd0>)
   1d348:	4798      	blx	r3
   1d34a:	0003      	movs	r3, r0
   1d34c:	001a      	movs	r2, r3
   1d34e:	2301      	movs	r3, #1
   1d350:	4053      	eors	r3, r2
   1d352:	b2db      	uxtb	r3, r3
   1d354:	2b00      	cmp	r3, #0
   1d356:	d001      	beq.n	1d35c <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1d358:	2300      	movs	r3, #0
   1d35a:	e010      	b.n	1d37e <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
   1d35c:	4b0e      	ldr	r3, [pc, #56]	; (1d398 <sd_spi_op_cond+0xd8>)
   1d35e:	4798      	blx	r3
   1d360:	0002      	movs	r2, r0
   1d362:	2380      	movs	r3, #128	; 0x80
   1d364:	05db      	lsls	r3, r3, #23
   1d366:	4013      	ands	r3, r2
   1d368:	d008      	beq.n	1d37c <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
   1d36a:	4b0d      	ldr	r3, [pc, #52]	; (1d3a0 <sd_spi_op_cond+0xe0>)
   1d36c:	681a      	ldr	r2, [r3, #0]
   1d36e:	4b0c      	ldr	r3, [pc, #48]	; (1d3a0 <sd_spi_op_cond+0xe0>)
   1d370:	681b      	ldr	r3, [r3, #0]
   1d372:	7adb      	ldrb	r3, [r3, #11]
   1d374:	2108      	movs	r1, #8
   1d376:	430b      	orrs	r3, r1
   1d378:	b2db      	uxtb	r3, r3
   1d37a:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1d37c:	2301      	movs	r3, #1
}
   1d37e:	0018      	movs	r0, r3
   1d380:	46bd      	mov	sp, r7
   1d382:	b006      	add	sp, #24
   1d384:	bd80      	pop	{r7, pc}
   1d386:	46c0      	nop			; (mov r8, r8)
   1d388:	00001bee 	.word	0x00001bee
   1d38c:	00001137 	.word	0x00001137
   1d390:	0001ec91 	.word	0x0001ec91
   1d394:	00001129 	.word	0x00001129
   1d398:	0001eed1 	.word	0x0001eed1
   1d39c:	0000053a 	.word	0x0000053a
   1d3a0:	20004210 	.word	0x20004210

0001d3a4 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
   1d3a4:	b580      	push	{r7, lr}
   1d3a6:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
   1d3a8:	2301      	movs	r3, #1
}
   1d3aa:	0018      	movs	r0, r3
   1d3ac:	46bd      	mov	sp, r7
   1d3ae:	bd80      	pop	{r7, pc}

0001d3b0 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
   1d3b0:	b580      	push	{r7, lr}
   1d3b2:	b084      	sub	sp, #16
   1d3b4:	af00      	add	r7, sp, #0
   1d3b6:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
   1d3b8:	687b      	ldr	r3, [r7, #4]
   1d3ba:	2200      	movs	r2, #0
   1d3bc:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   1d3be:	23d5      	movs	r3, #213	; 0xd5
   1d3c0:	005b      	lsls	r3, r3, #1
   1d3c2:	4a14      	ldr	r2, [pc, #80]	; (1d414 <sd_cmd8+0x64>)
   1d3c4:	0019      	movs	r1, r3
   1d3c6:	0010      	movs	r0, r2
   1d3c8:	4b13      	ldr	r3, [pc, #76]	; (1d418 <sd_cmd8+0x68>)
   1d3ca:	4798      	blx	r3
   1d3cc:	0003      	movs	r3, r0
   1d3ce:	001a      	movs	r2, r3
   1d3d0:	2301      	movs	r3, #1
   1d3d2:	4053      	eors	r3, r2
   1d3d4:	b2db      	uxtb	r3, r3
   1d3d6:	2b00      	cmp	r3, #0
   1d3d8:	d001      	beq.n	1d3de <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
   1d3da:	2301      	movs	r3, #1
   1d3dc:	e015      	b.n	1d40a <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
   1d3de:	4b0f      	ldr	r3, [pc, #60]	; (1d41c <sd_cmd8+0x6c>)
   1d3e0:	4798      	blx	r3
   1d3e2:	0003      	movs	r3, r0
   1d3e4:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
   1d3e6:	68fb      	ldr	r3, [r7, #12]
   1d3e8:	3301      	adds	r3, #1
   1d3ea:	d101      	bne.n	1d3f0 <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
   1d3ec:	2301      	movs	r3, #1
   1d3ee:	e00c      	b.n	1d40a <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   1d3f0:	68fb      	ldr	r3, [r7, #12]
   1d3f2:	051b      	lsls	r3, r3, #20
   1d3f4:	0d1a      	lsrs	r2, r3, #20
   1d3f6:	23d5      	movs	r3, #213	; 0xd5
   1d3f8:	005b      	lsls	r3, r3, #1
   1d3fa:	429a      	cmp	r2, r3
   1d3fc:	d001      	beq.n	1d402 <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
   1d3fe:	2300      	movs	r3, #0
   1d400:	e003      	b.n	1d40a <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
   1d402:	687b      	ldr	r3, [r7, #4]
   1d404:	2201      	movs	r2, #1
   1d406:	701a      	strb	r2, [r3, #0]
	return true;
   1d408:	2301      	movs	r3, #1
}
   1d40a:	0018      	movs	r0, r3
   1d40c:	46bd      	mov	sp, r7
   1d40e:	b004      	add	sp, #16
   1d410:	bd80      	pop	{r7, pc}
   1d412:	46c0      	nop			; (mov r8, r8)
   1d414:	00005508 	.word	0x00005508
   1d418:	0001ec91 	.word	0x0001ec91
   1d41c:	0001eed1 	.word	0x0001eed1

0001d420 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
   1d420:	b590      	push	{r4, r7, lr}
   1d422:	b089      	sub	sp, #36	; 0x24
   1d424:	af02      	add	r7, sp, #8
   1d426:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
   1d428:	2380      	movs	r3, #128	; 0x80
   1d42a:	009a      	lsls	r2, r3, #2
   1d42c:	4841      	ldr	r0, [pc, #260]	; (1d534 <mmc_cmd8+0x114>)
   1d42e:	2300      	movs	r3, #0
   1d430:	9300      	str	r3, [sp, #0]
   1d432:	2301      	movs	r3, #1
   1d434:	2100      	movs	r1, #0
   1d436:	4c40      	ldr	r4, [pc, #256]	; (1d538 <mmc_cmd8+0x118>)
   1d438:	47a0      	blx	r4
   1d43a:	0003      	movs	r3, r0
   1d43c:	001a      	movs	r2, r3
   1d43e:	2301      	movs	r3, #1
   1d440:	4053      	eors	r3, r2
   1d442:	b2db      	uxtb	r3, r3
   1d444:	2b00      	cmp	r3, #0
   1d446:	d001      	beq.n	1d44c <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
   1d448:	2300      	movs	r3, #0
   1d44a:	e06e      	b.n	1d52a <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1d44c:	2316      	movs	r3, #22
   1d44e:	18fb      	adds	r3, r7, r3
   1d450:	2200      	movs	r2, #0
   1d452:	801a      	strh	r2, [r3, #0]
   1d454:	e014      	b.n	1d480 <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
   1d456:	2310      	movs	r3, #16
   1d458:	18fb      	adds	r3, r7, r3
   1d45a:	0018      	movs	r0, r3
   1d45c:	4b37      	ldr	r3, [pc, #220]	; (1d53c <mmc_cmd8+0x11c>)
   1d45e:	4798      	blx	r3
   1d460:	0003      	movs	r3, r0
   1d462:	001a      	movs	r2, r3
   1d464:	2301      	movs	r3, #1
   1d466:	4053      	eors	r3, r2
   1d468:	b2db      	uxtb	r3, r3
   1d46a:	2b00      	cmp	r3, #0
   1d46c:	d001      	beq.n	1d472 <mmc_cmd8+0x52>
			return false;
   1d46e:	2300      	movs	r3, #0
   1d470:	e05b      	b.n	1d52a <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1d472:	2316      	movs	r3, #22
   1d474:	18fb      	adds	r3, r7, r3
   1d476:	881a      	ldrh	r2, [r3, #0]
   1d478:	2316      	movs	r3, #22
   1d47a:	18fb      	adds	r3, r7, r3
   1d47c:	3201      	adds	r2, #1
   1d47e:	801a      	strh	r2, [r3, #0]
   1d480:	2316      	movs	r3, #22
   1d482:	18fb      	adds	r3, r7, r3
   1d484:	881b      	ldrh	r3, [r3, #0]
   1d486:	2b31      	cmp	r3, #49	; 0x31
   1d488:	d9e5      	bls.n	1d456 <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
   1d48a:	693b      	ldr	r3, [r7, #16]
   1d48c:	b2db      	uxtb	r3, r3
   1d48e:	2202      	movs	r2, #2
   1d490:	4013      	ands	r3, r2
   1d492:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
   1d494:	687b      	ldr	r3, [r7, #4]
   1d496:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
   1d498:	4b29      	ldr	r3, [pc, #164]	; (1d540 <mmc_cmd8+0x120>)
   1d49a:	681b      	ldr	r3, [r3, #0]
   1d49c:	330e      	adds	r3, #14
   1d49e:	0018      	movs	r0, r3
   1d4a0:	230c      	movs	r3, #12
   1d4a2:	223e      	movs	r2, #62	; 0x3e
   1d4a4:	2180      	movs	r1, #128	; 0x80
   1d4a6:	4c27      	ldr	r4, [pc, #156]	; (1d544 <mmc_cmd8+0x124>)
   1d4a8:	47a0      	blx	r4
   1d4aa:	0002      	movs	r2, r0
   1d4ac:	4b26      	ldr	r3, [pc, #152]	; (1d548 <mmc_cmd8+0x128>)
   1d4ae:	429a      	cmp	r2, r3
   1d4b0:	d135      	bne.n	1d51e <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1d4b2:	e014      	b.n	1d4de <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
   1d4b4:	230c      	movs	r3, #12
   1d4b6:	18fb      	adds	r3, r7, r3
   1d4b8:	0018      	movs	r0, r3
   1d4ba:	4b20      	ldr	r3, [pc, #128]	; (1d53c <mmc_cmd8+0x11c>)
   1d4bc:	4798      	blx	r3
   1d4be:	0003      	movs	r3, r0
   1d4c0:	001a      	movs	r2, r3
   1d4c2:	2301      	movs	r3, #1
   1d4c4:	4053      	eors	r3, r2
   1d4c6:	b2db      	uxtb	r3, r3
   1d4c8:	2b00      	cmp	r3, #0
   1d4ca:	d001      	beq.n	1d4d0 <mmc_cmd8+0xb0>
				return false;
   1d4cc:	2300      	movs	r3, #0
   1d4ce:	e02c      	b.n	1d52a <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1d4d0:	2316      	movs	r3, #22
   1d4d2:	18fb      	adds	r3, r7, r3
   1d4d4:	881a      	ldrh	r2, [r3, #0]
   1d4d6:	2316      	movs	r3, #22
   1d4d8:	18fb      	adds	r3, r7, r3
   1d4da:	3201      	adds	r2, #1
   1d4dc:	801a      	strh	r2, [r3, #0]
   1d4de:	2316      	movs	r3, #22
   1d4e0:	18fb      	adds	r3, r7, r3
   1d4e2:	881b      	ldrh	r3, [r3, #0]
   1d4e4:	2b35      	cmp	r3, #53	; 0x35
   1d4e6:	d9e5      	bls.n	1d4b4 <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
   1d4e8:	4b15      	ldr	r3, [pc, #84]	; (1d540 <mmc_cmd8+0x120>)
   1d4ea:	681b      	ldr	r3, [r3, #0]
   1d4ec:	68fa      	ldr	r2, [r7, #12]
   1d4ee:	0852      	lsrs	r2, r2, #1
   1d4f0:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1d4f2:	e014      	b.n	1d51e <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
   1d4f4:	230c      	movs	r3, #12
   1d4f6:	18fb      	adds	r3, r7, r3
   1d4f8:	0018      	movs	r0, r3
   1d4fa:	4b10      	ldr	r3, [pc, #64]	; (1d53c <mmc_cmd8+0x11c>)
   1d4fc:	4798      	blx	r3
   1d4fe:	0003      	movs	r3, r0
   1d500:	001a      	movs	r2, r3
   1d502:	2301      	movs	r3, #1
   1d504:	4053      	eors	r3, r2
   1d506:	b2db      	uxtb	r3, r3
   1d508:	2b00      	cmp	r3, #0
   1d50a:	d001      	beq.n	1d510 <mmc_cmd8+0xf0>
			return false;
   1d50c:	2300      	movs	r3, #0
   1d50e:	e00c      	b.n	1d52a <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1d510:	2316      	movs	r3, #22
   1d512:	18fb      	adds	r3, r7, r3
   1d514:	881a      	ldrh	r2, [r3, #0]
   1d516:	2316      	movs	r3, #22
   1d518:	18fb      	adds	r3, r7, r3
   1d51a:	3201      	adds	r2, #1
   1d51c:	801a      	strh	r2, [r3, #0]
   1d51e:	2316      	movs	r3, #22
   1d520:	18fb      	adds	r3, r7, r3
   1d522:	881b      	ldrh	r3, [r3, #0]
   1d524:	2b7f      	cmp	r3, #127	; 0x7f
   1d526:	d9e5      	bls.n	1d4f4 <mmc_cmd8+0xd4>
		}
	}
	return true;
   1d528:	2301      	movs	r3, #1
}
   1d52a:	0018      	movs	r0, r3
   1d52c:	46bd      	mov	sp, r7
   1d52e:	b007      	add	sp, #28
   1d530:	bd90      	pop	{r4, r7, pc}
   1d532:	46c0      	nop			; (mov r8, r8)
   1d534:	00081108 	.word	0x00081108
   1d538:	0001ecb9 	.word	0x0001ecb9
   1d53c:	0001eee5 	.word	0x0001eee5
   1d540:	20004210 	.word	0x20004210
   1d544:	0001d0b9 	.word	0x0001d0b9
   1d548:	00000fff 	.word	0x00000fff

0001d54c <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
   1d54c:	b590      	push	{r4, r7, lr}
   1d54e:	b083      	sub	sp, #12
   1d550:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
   1d552:	4b15      	ldr	r3, [pc, #84]	; (1d5a8 <sd_mmc_cmd9_spi+0x5c>)
   1d554:	681b      	ldr	r3, [r3, #0]
   1d556:	891b      	ldrh	r3, [r3, #8]
   1d558:	0419      	lsls	r1, r3, #16
   1d55a:	4814      	ldr	r0, [pc, #80]	; (1d5ac <sd_mmc_cmd9_spi+0x60>)
   1d55c:	2301      	movs	r3, #1
   1d55e:	9300      	str	r3, [sp, #0]
   1d560:	2301      	movs	r3, #1
   1d562:	2210      	movs	r2, #16
   1d564:	4c12      	ldr	r4, [pc, #72]	; (1d5b0 <sd_mmc_cmd9_spi+0x64>)
   1d566:	47a0      	blx	r4
   1d568:	0003      	movs	r3, r0
   1d56a:	001a      	movs	r2, r3
   1d56c:	2301      	movs	r3, #1
   1d56e:	4053      	eors	r3, r2
   1d570:	b2db      	uxtb	r3, r3
   1d572:	2b00      	cmp	r3, #0
   1d574:	d001      	beq.n	1d57a <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
   1d576:	2300      	movs	r3, #0
   1d578:	e012      	b.n	1d5a0 <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
   1d57a:	4b0b      	ldr	r3, [pc, #44]	; (1d5a8 <sd_mmc_cmd9_spi+0x5c>)
   1d57c:	681b      	ldr	r3, [r3, #0]
   1d57e:	330e      	adds	r3, #14
   1d580:	2101      	movs	r1, #1
   1d582:	0018      	movs	r0, r3
   1d584:	4b0b      	ldr	r3, [pc, #44]	; (1d5b4 <sd_mmc_cmd9_spi+0x68>)
   1d586:	4798      	blx	r3
   1d588:	0003      	movs	r3, r0
   1d58a:	001a      	movs	r2, r3
   1d58c:	2301      	movs	r3, #1
   1d58e:	4053      	eors	r3, r2
   1d590:	b2db      	uxtb	r3, r3
   1d592:	2b00      	cmp	r3, #0
   1d594:	d001      	beq.n	1d59a <sd_mmc_cmd9_spi+0x4e>
		return false;
   1d596:	2300      	movs	r3, #0
   1d598:	e002      	b.n	1d5a0 <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
   1d59a:	4b07      	ldr	r3, [pc, #28]	; (1d5b8 <sd_mmc_cmd9_spi+0x6c>)
   1d59c:	4798      	blx	r3
   1d59e:	0003      	movs	r3, r0
}
   1d5a0:	0018      	movs	r0, r3
   1d5a2:	46bd      	mov	sp, r7
   1d5a4:	b001      	add	sp, #4
   1d5a6:	bd90      	pop	{r4, r7, pc}
   1d5a8:	20004210 	.word	0x20004210
   1d5ac:	00081109 	.word	0x00081109
   1d5b0:	0001ecb9 	.word	0x0001ecb9
   1d5b4:	0001ef89 	.word	0x0001ef89
   1d5b8:	0001f02d 	.word	0x0001f02d

0001d5bc <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
   1d5bc:	b5b0      	push	{r4, r5, r7, lr}
   1d5be:	b084      	sub	sp, #16
   1d5c0:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   1d5c2:	4b45      	ldr	r3, [pc, #276]	; (1d6d8 <mmc_decode_csd+0x11c>)
   1d5c4:	681b      	ldr	r3, [r3, #0]
   1d5c6:	330e      	adds	r3, #14
   1d5c8:	0018      	movs	r0, r3
   1d5ca:	2304      	movs	r3, #4
   1d5cc:	227a      	movs	r2, #122	; 0x7a
   1d5ce:	2180      	movs	r1, #128	; 0x80
   1d5d0:	4c42      	ldr	r4, [pc, #264]	; (1d6dc <mmc_decode_csd+0x120>)
   1d5d2:	47a0      	blx	r4
   1d5d4:	0003      	movs	r3, r0
   1d5d6:	2b02      	cmp	r3, #2
   1d5d8:	d011      	beq.n	1d5fe <mmc_decode_csd+0x42>
   1d5da:	d802      	bhi.n	1d5e2 <mmc_decode_csd+0x26>
   1d5dc:	2b01      	cmp	r3, #1
   1d5de:	d009      	beq.n	1d5f4 <mmc_decode_csd+0x38>
   1d5e0:	e003      	b.n	1d5ea <mmc_decode_csd+0x2e>
   1d5e2:	2b03      	cmp	r3, #3
   1d5e4:	d010      	beq.n	1d608 <mmc_decode_csd+0x4c>
   1d5e6:	2b04      	cmp	r3, #4
   1d5e8:	d013      	beq.n	1d612 <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
   1d5ea:	4b3b      	ldr	r3, [pc, #236]	; (1d6d8 <mmc_decode_csd+0x11c>)
   1d5ec:	681b      	ldr	r3, [r3, #0]
   1d5ee:	2212      	movs	r2, #18
   1d5f0:	731a      	strb	r2, [r3, #12]
		break;
   1d5f2:	e013      	b.n	1d61c <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
   1d5f4:	4b38      	ldr	r3, [pc, #224]	; (1d6d8 <mmc_decode_csd+0x11c>)
   1d5f6:	681b      	ldr	r3, [r3, #0]
   1d5f8:	2214      	movs	r2, #20
   1d5fa:	731a      	strb	r2, [r3, #12]
		break;
   1d5fc:	e00e      	b.n	1d61c <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
   1d5fe:	4b36      	ldr	r3, [pc, #216]	; (1d6d8 <mmc_decode_csd+0x11c>)
   1d600:	681b      	ldr	r3, [r3, #0]
   1d602:	2222      	movs	r2, #34	; 0x22
   1d604:	731a      	strb	r2, [r3, #12]
		break;
   1d606:	e009      	b.n	1d61c <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
   1d608:	4b33      	ldr	r3, [pc, #204]	; (1d6d8 <mmc_decode_csd+0x11c>)
   1d60a:	681b      	ldr	r3, [r3, #0]
   1d60c:	2230      	movs	r2, #48	; 0x30
   1d60e:	731a      	strb	r2, [r3, #12]
		break;
   1d610:	e004      	b.n	1d61c <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
   1d612:	4b31      	ldr	r3, [pc, #196]	; (1d6d8 <mmc_decode_csd+0x11c>)
   1d614:	681b      	ldr	r3, [r3, #0]
   1d616:	2240      	movs	r2, #64	; 0x40
   1d618:	731a      	strb	r2, [r3, #12]
		break;
   1d61a:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1d61c:	4b2e      	ldr	r3, [pc, #184]	; (1d6d8 <mmc_decode_csd+0x11c>)
   1d61e:	681b      	ldr	r3, [r3, #0]
   1d620:	330e      	adds	r3, #14
   1d622:	0018      	movs	r0, r3
   1d624:	2308      	movs	r3, #8
   1d626:	2260      	movs	r2, #96	; 0x60
   1d628:	2180      	movs	r1, #128	; 0x80
   1d62a:	4c2c      	ldr	r4, [pc, #176]	; (1d6dc <mmc_decode_csd+0x120>)
   1d62c:	47a0      	blx	r4
   1d62e:	0003      	movs	r3, r0
   1d630:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1d632:	68fb      	ldr	r3, [r7, #12]
   1d634:	2207      	movs	r2, #7
   1d636:	401a      	ands	r2, r3
   1d638:	4b29      	ldr	r3, [pc, #164]	; (1d6e0 <mmc_decode_csd+0x124>)
   1d63a:	0092      	lsls	r2, r2, #2
   1d63c:	58d3      	ldr	r3, [r2, r3]
   1d63e:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   1d640:	68fb      	ldr	r3, [r7, #12]
   1d642:	08db      	lsrs	r3, r3, #3
   1d644:	220f      	movs	r2, #15
   1d646:	401a      	ands	r2, r3
   1d648:	4b26      	ldr	r3, [pc, #152]	; (1d6e4 <mmc_decode_csd+0x128>)
   1d64a:	0092      	lsls	r2, r2, #2
   1d64c:	58d3      	ldr	r3, [r2, r3]
   1d64e:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1d650:	4b21      	ldr	r3, [pc, #132]	; (1d6d8 <mmc_decode_csd+0x11c>)
   1d652:	681b      	ldr	r3, [r3, #0]
   1d654:	68ba      	ldr	r2, [r7, #8]
   1d656:	6879      	ldr	r1, [r7, #4]
   1d658:	434a      	muls	r2, r1
   1d65a:	21fa      	movs	r1, #250	; 0xfa
   1d65c:	0089      	lsls	r1, r1, #2
   1d65e:	434a      	muls	r2, r1
   1d660:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
   1d662:	4b1d      	ldr	r3, [pc, #116]	; (1d6d8 <mmc_decode_csd+0x11c>)
   1d664:	681b      	ldr	r3, [r3, #0]
   1d666:	330e      	adds	r3, #14
   1d668:	0018      	movs	r0, r3
   1d66a:	230c      	movs	r3, #12
   1d66c:	223e      	movs	r2, #62	; 0x3e
   1d66e:	2180      	movs	r1, #128	; 0x80
   1d670:	4c1a      	ldr	r4, [pc, #104]	; (1d6dc <mmc_decode_csd+0x120>)
   1d672:	47a0      	blx	r4
   1d674:	0002      	movs	r2, r0
   1d676:	4b1c      	ldr	r3, [pc, #112]	; (1d6e8 <mmc_decode_csd+0x12c>)
   1d678:	429a      	cmp	r2, r3
   1d67a:	d028      	beq.n	1d6ce <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1d67c:	4b16      	ldr	r3, [pc, #88]	; (1d6d8 <mmc_decode_csd+0x11c>)
   1d67e:	681b      	ldr	r3, [r3, #0]
   1d680:	330e      	adds	r3, #14
   1d682:	0018      	movs	r0, r3
   1d684:	230c      	movs	r3, #12
   1d686:	223e      	movs	r2, #62	; 0x3e
   1d688:	2180      	movs	r1, #128	; 0x80
   1d68a:	4c14      	ldr	r4, [pc, #80]	; (1d6dc <mmc_decode_csd+0x120>)
   1d68c:	47a0      	blx	r4
   1d68e:	0003      	movs	r3, r0
   1d690:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1d692:	4b11      	ldr	r3, [pc, #68]	; (1d6d8 <mmc_decode_csd+0x11c>)
   1d694:	681b      	ldr	r3, [r3, #0]
   1d696:	330e      	adds	r3, #14
   1d698:	0018      	movs	r0, r3
   1d69a:	2303      	movs	r3, #3
   1d69c:	222f      	movs	r2, #47	; 0x2f
   1d69e:	2180      	movs	r1, #128	; 0x80
   1d6a0:	4d0e      	ldr	r5, [pc, #56]	; (1d6dc <mmc_decode_csd+0x120>)
   1d6a2:	47a8      	blx	r5
   1d6a4:	0003      	movs	r3, r0
   1d6a6:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1d6a8:	409c      	lsls	r4, r3
   1d6aa:	0023      	movs	r3, r4
   1d6ac:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1d6ae:	4b0a      	ldr	r3, [pc, #40]	; (1d6d8 <mmc_decode_csd+0x11c>)
   1d6b0:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1d6b2:	4b09      	ldr	r3, [pc, #36]	; (1d6d8 <mmc_decode_csd+0x11c>)
   1d6b4:	681b      	ldr	r3, [r3, #0]
   1d6b6:	330e      	adds	r3, #14
   1d6b8:	0018      	movs	r0, r3
   1d6ba:	2304      	movs	r3, #4
   1d6bc:	2250      	movs	r2, #80	; 0x50
   1d6be:	2180      	movs	r1, #128	; 0x80
   1d6c0:	4d06      	ldr	r5, [pc, #24]	; (1d6dc <mmc_decode_csd+0x120>)
   1d6c2:	47a8      	blx	r5
   1d6c4:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1d6c6:	683b      	ldr	r3, [r7, #0]
   1d6c8:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1d6ca:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1d6cc:	6063      	str	r3, [r4, #4]
	}
}
   1d6ce:	46c0      	nop			; (mov r8, r8)
   1d6d0:	46bd      	mov	sp, r7
   1d6d2:	b004      	add	sp, #16
   1d6d4:	bdb0      	pop	{r4, r5, r7, pc}
   1d6d6:	46c0      	nop			; (mov r8, r8)
   1d6d8:	20004210 	.word	0x20004210
   1d6dc:	0001d0b9 	.word	0x0001d0b9
   1d6e0:	00037d34 	.word	0x00037d34
   1d6e4:	00037d90 	.word	0x00037d90
   1d6e8:	00000fff 	.word	0x00000fff

0001d6ec <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
   1d6ec:	b5b0      	push	{r4, r5, r7, lr}
   1d6ee:	b084      	sub	sp, #16
   1d6f0:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1d6f2:	4b35      	ldr	r3, [pc, #212]	; (1d7c8 <sd_decode_csd+0xdc>)
   1d6f4:	681b      	ldr	r3, [r3, #0]
   1d6f6:	330e      	adds	r3, #14
   1d6f8:	0018      	movs	r0, r3
   1d6fa:	2308      	movs	r3, #8
   1d6fc:	2260      	movs	r2, #96	; 0x60
   1d6fe:	2180      	movs	r1, #128	; 0x80
   1d700:	4c32      	ldr	r4, [pc, #200]	; (1d7cc <sd_decode_csd+0xe0>)
   1d702:	47a0      	blx	r4
   1d704:	0003      	movs	r3, r0
   1d706:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1d708:	68fb      	ldr	r3, [r7, #12]
   1d70a:	2207      	movs	r2, #7
   1d70c:	401a      	ands	r2, r3
   1d70e:	4b30      	ldr	r3, [pc, #192]	; (1d7d0 <sd_decode_csd+0xe4>)
   1d710:	0092      	lsls	r2, r2, #2
   1d712:	58d3      	ldr	r3, [r2, r3]
   1d714:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   1d716:	68fb      	ldr	r3, [r7, #12]
   1d718:	08db      	lsrs	r3, r3, #3
   1d71a:	220f      	movs	r2, #15
   1d71c:	401a      	ands	r2, r3
   1d71e:	4b2d      	ldr	r3, [pc, #180]	; (1d7d4 <sd_decode_csd+0xe8>)
   1d720:	0092      	lsls	r2, r2, #2
   1d722:	58d3      	ldr	r3, [r2, r3]
   1d724:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1d726:	4b28      	ldr	r3, [pc, #160]	; (1d7c8 <sd_decode_csd+0xdc>)
   1d728:	681b      	ldr	r3, [r3, #0]
   1d72a:	68ba      	ldr	r2, [r7, #8]
   1d72c:	6879      	ldr	r1, [r7, #4]
   1d72e:	434a      	muls	r2, r1
   1d730:	21fa      	movs	r1, #250	; 0xfa
   1d732:	0089      	lsls	r1, r1, #2
   1d734:	434a      	muls	r2, r1
   1d736:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
   1d738:	4b23      	ldr	r3, [pc, #140]	; (1d7c8 <sd_decode_csd+0xdc>)
   1d73a:	681b      	ldr	r3, [r3, #0]
   1d73c:	330e      	adds	r3, #14
   1d73e:	0018      	movs	r0, r3
   1d740:	2302      	movs	r3, #2
   1d742:	227e      	movs	r2, #126	; 0x7e
   1d744:	2180      	movs	r1, #128	; 0x80
   1d746:	4c21      	ldr	r4, [pc, #132]	; (1d7cc <sd_decode_csd+0xe0>)
   1d748:	47a0      	blx	r4
   1d74a:	1e03      	subs	r3, r0, #0
   1d74c:	d00f      	beq.n	1d76e <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
   1d74e:	4b1e      	ldr	r3, [pc, #120]	; (1d7c8 <sd_decode_csd+0xdc>)
   1d750:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
   1d752:	4b1d      	ldr	r3, [pc, #116]	; (1d7c8 <sd_decode_csd+0xdc>)
   1d754:	681b      	ldr	r3, [r3, #0]
   1d756:	330e      	adds	r3, #14
   1d758:	0018      	movs	r0, r3
   1d75a:	2316      	movs	r3, #22
   1d75c:	2230      	movs	r2, #48	; 0x30
   1d75e:	2180      	movs	r1, #128	; 0x80
   1d760:	4d1a      	ldr	r5, [pc, #104]	; (1d7cc <sd_decode_csd+0xe0>)
   1d762:	47a8      	blx	r5
   1d764:	0003      	movs	r3, r0
				* 512;
   1d766:	3301      	adds	r3, #1
   1d768:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
   1d76a:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
   1d76c:	e028      	b.n	1d7c0 <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1d76e:	4b16      	ldr	r3, [pc, #88]	; (1d7c8 <sd_decode_csd+0xdc>)
   1d770:	681b      	ldr	r3, [r3, #0]
   1d772:	330e      	adds	r3, #14
   1d774:	0018      	movs	r0, r3
   1d776:	230c      	movs	r3, #12
   1d778:	223e      	movs	r2, #62	; 0x3e
   1d77a:	2180      	movs	r1, #128	; 0x80
   1d77c:	4c13      	ldr	r4, [pc, #76]	; (1d7cc <sd_decode_csd+0xe0>)
   1d77e:	47a0      	blx	r4
   1d780:	0003      	movs	r3, r0
   1d782:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1d784:	4b10      	ldr	r3, [pc, #64]	; (1d7c8 <sd_decode_csd+0xdc>)
   1d786:	681b      	ldr	r3, [r3, #0]
   1d788:	330e      	adds	r3, #14
   1d78a:	0018      	movs	r0, r3
   1d78c:	2303      	movs	r3, #3
   1d78e:	222f      	movs	r2, #47	; 0x2f
   1d790:	2180      	movs	r1, #128	; 0x80
   1d792:	4d0e      	ldr	r5, [pc, #56]	; (1d7cc <sd_decode_csd+0xe0>)
   1d794:	47a8      	blx	r5
   1d796:	0003      	movs	r3, r0
   1d798:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1d79a:	409c      	lsls	r4, r3
   1d79c:	0023      	movs	r3, r4
   1d79e:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1d7a0:	4b09      	ldr	r3, [pc, #36]	; (1d7c8 <sd_decode_csd+0xdc>)
   1d7a2:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
   1d7a4:	4b08      	ldr	r3, [pc, #32]	; (1d7c8 <sd_decode_csd+0xdc>)
   1d7a6:	681b      	ldr	r3, [r3, #0]
   1d7a8:	330e      	adds	r3, #14
   1d7aa:	0018      	movs	r0, r3
   1d7ac:	2304      	movs	r3, #4
   1d7ae:	2250      	movs	r2, #80	; 0x50
   1d7b0:	2180      	movs	r1, #128	; 0x80
   1d7b2:	4d06      	ldr	r5, [pc, #24]	; (1d7cc <sd_decode_csd+0xe0>)
   1d7b4:	47a8      	blx	r5
   1d7b6:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1d7b8:	683b      	ldr	r3, [r7, #0]
   1d7ba:	4093      	lsls	r3, r2
				/ 1024;
   1d7bc:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1d7be:	6063      	str	r3, [r4, #4]
}
   1d7c0:	46c0      	nop			; (mov r8, r8)
   1d7c2:	46bd      	mov	sp, r7
   1d7c4:	b004      	add	sp, #16
   1d7c6:	bdb0      	pop	{r4, r5, r7, pc}
   1d7c8:	20004210 	.word	0x20004210
   1d7cc:	0001d0b9 	.word	0x0001d0b9
   1d7d0:	00037d34 	.word	0x00037d34
   1d7d4:	00037d50 	.word	0x00037d50

0001d7d8 <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
   1d7d8:	b580      	push	{r7, lr}
   1d7da:	b082      	sub	sp, #8
   1d7dc:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
   1d7de:	4b11      	ldr	r3, [pc, #68]	; (1d824 <sd_mmc_cmd13+0x4c>)
   1d7e0:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
   1d7e2:	4b11      	ldr	r3, [pc, #68]	; (1d828 <sd_mmc_cmd13+0x50>)
   1d7e4:	2100      	movs	r1, #0
   1d7e6:	0018      	movs	r0, r3
   1d7e8:	4b10      	ldr	r3, [pc, #64]	; (1d82c <sd_mmc_cmd13+0x54>)
   1d7ea:	4798      	blx	r3
   1d7ec:	0003      	movs	r3, r0
   1d7ee:	001a      	movs	r2, r3
   1d7f0:	2301      	movs	r3, #1
   1d7f2:	4053      	eors	r3, r2
   1d7f4:	b2db      	uxtb	r3, r3
   1d7f6:	2b00      	cmp	r3, #0
   1d7f8:	d001      	beq.n	1d7fe <sd_mmc_cmd13+0x26>
				return false;
   1d7fa:	2300      	movs	r3, #0
   1d7fc:	e00e      	b.n	1d81c <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
   1d7fe:	4b0c      	ldr	r3, [pc, #48]	; (1d830 <sd_mmc_cmd13+0x58>)
   1d800:	4798      	blx	r3
   1d802:	0002      	movs	r2, r0
   1d804:	23ff      	movs	r3, #255	; 0xff
   1d806:	4013      	ands	r3, r2
   1d808:	d006      	beq.n	1d818 <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
   1d80a:	687b      	ldr	r3, [r7, #4]
   1d80c:	1e5a      	subs	r2, r3, #1
   1d80e:	607a      	str	r2, [r7, #4]
   1d810:	2b00      	cmp	r3, #0
   1d812:	d1e6      	bne.n	1d7e2 <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
   1d814:	2300      	movs	r3, #0
   1d816:	e001      	b.n	1d81c <sd_mmc_cmd13+0x44>
				break;
   1d818:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
   1d81a:	2301      	movs	r3, #1
}
   1d81c:	0018      	movs	r0, r3
   1d81e:	46bd      	mov	sp, r7
   1d820:	b002      	add	sp, #8
   1d822:	bd80      	pop	{r7, pc}
   1d824:	00030d40 	.word	0x00030d40
   1d828:	00001b0d 	.word	0x00001b0d
   1d82c:	0001ec91 	.word	0x0001ec91
   1d830:	0001eed1 	.word	0x0001eed1

0001d834 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
   1d834:	b590      	push	{r4, r7, lr}
   1d836:	b085      	sub	sp, #20
   1d838:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   1d83a:	4b38      	ldr	r3, [pc, #224]	; (1d91c <sd_acmd51+0xe8>)
   1d83c:	681b      	ldr	r3, [r3, #0]
   1d83e:	891b      	ldrh	r3, [r3, #8]
   1d840:	041b      	lsls	r3, r3, #16
   1d842:	4a37      	ldr	r2, [pc, #220]	; (1d920 <sd_acmd51+0xec>)
   1d844:	0019      	movs	r1, r3
   1d846:	0010      	movs	r0, r2
   1d848:	4b36      	ldr	r3, [pc, #216]	; (1d924 <sd_acmd51+0xf0>)
   1d84a:	4798      	blx	r3
   1d84c:	0003      	movs	r3, r0
   1d84e:	001a      	movs	r2, r3
   1d850:	2301      	movs	r3, #1
   1d852:	4053      	eors	r3, r2
   1d854:	b2db      	uxtb	r3, r3
   1d856:	2b00      	cmp	r3, #0
   1d858:	d001      	beq.n	1d85e <sd_acmd51+0x2a>
		return false;
   1d85a:	2300      	movs	r3, #0
   1d85c:	e059      	b.n	1d912 <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
   1d85e:	4832      	ldr	r0, [pc, #200]	; (1d928 <sd_acmd51+0xf4>)
   1d860:	2301      	movs	r3, #1
   1d862:	9300      	str	r3, [sp, #0]
   1d864:	2301      	movs	r3, #1
   1d866:	2208      	movs	r2, #8
   1d868:	2100      	movs	r1, #0
   1d86a:	4c30      	ldr	r4, [pc, #192]	; (1d92c <sd_acmd51+0xf8>)
   1d86c:	47a0      	blx	r4
   1d86e:	0003      	movs	r3, r0
   1d870:	001a      	movs	r2, r3
   1d872:	2301      	movs	r3, #1
   1d874:	4053      	eors	r3, r2
   1d876:	b2db      	uxtb	r3, r3
   1d878:	2b00      	cmp	r3, #0
   1d87a:	d001      	beq.n	1d880 <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
   1d87c:	2300      	movs	r3, #0
   1d87e:	e048      	b.n	1d912 <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
   1d880:	003b      	movs	r3, r7
   1d882:	2101      	movs	r1, #1
   1d884:	0018      	movs	r0, r3
   1d886:	4b2a      	ldr	r3, [pc, #168]	; (1d930 <sd_acmd51+0xfc>)
   1d888:	4798      	blx	r3
   1d88a:	0003      	movs	r3, r0
   1d88c:	001a      	movs	r2, r3
   1d88e:	2301      	movs	r3, #1
   1d890:	4053      	eors	r3, r2
   1d892:	b2db      	uxtb	r3, r3
   1d894:	2b00      	cmp	r3, #0
   1d896:	d001      	beq.n	1d89c <sd_acmd51+0x68>
		return false;
   1d898:	2300      	movs	r3, #0
   1d89a:	e03a      	b.n	1d912 <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
   1d89c:	4b25      	ldr	r3, [pc, #148]	; (1d934 <sd_acmd51+0x100>)
   1d89e:	4798      	blx	r3
   1d8a0:	0003      	movs	r3, r0
   1d8a2:	001a      	movs	r2, r3
   1d8a4:	2301      	movs	r3, #1
   1d8a6:	4053      	eors	r3, r2
   1d8a8:	b2db      	uxtb	r3, r3
   1d8aa:	2b00      	cmp	r3, #0
   1d8ac:	d001      	beq.n	1d8b2 <sd_acmd51+0x7e>
		return false;
   1d8ae:	2300      	movs	r3, #0
   1d8b0:	e02f      	b.n	1d912 <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
   1d8b2:	0038      	movs	r0, r7
   1d8b4:	2304      	movs	r3, #4
   1d8b6:	2238      	movs	r2, #56	; 0x38
   1d8b8:	2140      	movs	r1, #64	; 0x40
   1d8ba:	4c1f      	ldr	r4, [pc, #124]	; (1d938 <sd_acmd51+0x104>)
   1d8bc:	47a0      	blx	r4
   1d8be:	0003      	movs	r3, r0
   1d8c0:	2b01      	cmp	r3, #1
   1d8c2:	d008      	beq.n	1d8d6 <sd_acmd51+0xa2>
   1d8c4:	d302      	bcc.n	1d8cc <sd_acmd51+0x98>
   1d8c6:	2b02      	cmp	r3, #2
   1d8c8:	d00a      	beq.n	1d8e0 <sd_acmd51+0xac>
   1d8ca:	e01c      	b.n	1d906 <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1d8cc:	4b13      	ldr	r3, [pc, #76]	; (1d91c <sd_acmd51+0xe8>)
   1d8ce:	681b      	ldr	r3, [r3, #0]
   1d8d0:	2210      	movs	r2, #16
   1d8d2:	731a      	strb	r2, [r3, #12]
		break;
   1d8d4:	e01c      	b.n	1d910 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
   1d8d6:	4b11      	ldr	r3, [pc, #68]	; (1d91c <sd_acmd51+0xe8>)
   1d8d8:	681b      	ldr	r3, [r3, #0]
   1d8da:	221a      	movs	r2, #26
   1d8dc:	731a      	strb	r2, [r3, #12]
		break;
   1d8de:	e017      	b.n	1d910 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
   1d8e0:	0038      	movs	r0, r7
   1d8e2:	2301      	movs	r3, #1
   1d8e4:	222f      	movs	r2, #47	; 0x2f
   1d8e6:	2140      	movs	r1, #64	; 0x40
   1d8e8:	4c13      	ldr	r4, [pc, #76]	; (1d938 <sd_acmd51+0x104>)
   1d8ea:	47a0      	blx	r4
   1d8ec:	0003      	movs	r3, r0
   1d8ee:	2b01      	cmp	r3, #1
   1d8f0:	d104      	bne.n	1d8fc <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
   1d8f2:	4b0a      	ldr	r3, [pc, #40]	; (1d91c <sd_acmd51+0xe8>)
   1d8f4:	681b      	ldr	r3, [r3, #0]
   1d8f6:	2230      	movs	r2, #48	; 0x30
   1d8f8:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
   1d8fa:	e009      	b.n	1d910 <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
   1d8fc:	4b07      	ldr	r3, [pc, #28]	; (1d91c <sd_acmd51+0xe8>)
   1d8fe:	681b      	ldr	r3, [r3, #0]
   1d900:	2220      	movs	r2, #32
   1d902:	731a      	strb	r2, [r3, #12]
		break;
   1d904:	e004      	b.n	1d910 <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1d906:	4b05      	ldr	r3, [pc, #20]	; (1d91c <sd_acmd51+0xe8>)
   1d908:	681b      	ldr	r3, [r3, #0]
   1d90a:	2210      	movs	r2, #16
   1d90c:	731a      	strb	r2, [r3, #12]
		break;
   1d90e:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   1d910:	2301      	movs	r3, #1
}
   1d912:	0018      	movs	r0, r3
   1d914:	46bd      	mov	sp, r7
   1d916:	b003      	add	sp, #12
   1d918:	bd90      	pop	{r4, r7, pc}
   1d91a:	46c0      	nop			; (mov r8, r8)
   1d91c:	20004210 	.word	0x20004210
   1d920:	00001137 	.word	0x00001137
   1d924:	0001ec91 	.word	0x0001ec91
   1d928:	00081133 	.word	0x00081133
   1d92c:	0001ecb9 	.word	0x0001ecb9
   1d930:	0001ef89 	.word	0x0001ef89
   1d934:	0001f02d 	.word	0x0001f02d
   1d938:	0001d0b9 	.word	0x0001d0b9

0001d93c <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
   1d93c:	b580      	push	{r7, lr}
   1d93e:	b082      	sub	sp, #8
   1d940:	af00      	add	r7, sp, #0
   1d942:	0002      	movs	r2, r0
   1d944:	1dfb      	adds	r3, r7, #7
   1d946:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
   1d948:	1dfb      	adds	r3, r7, #7
   1d94a:	781b      	ldrb	r3, [r3, #0]
   1d94c:	2b00      	cmp	r3, #0
   1d94e:	d001      	beq.n	1d954 <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
   1d950:	2304      	movs	r3, #4
   1d952:	e047      	b.n	1d9e4 <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   1d954:	1dfb      	adds	r3, r7, #7
   1d956:	781b      	ldrb	r3, [r3, #0]
   1d958:	4a24      	ldr	r2, [pc, #144]	; (1d9ec <sd_mmc_select_slot+0xb0>)
   1d95a:	015b      	lsls	r3, r3, #5
   1d95c:	18d3      	adds	r3, r2, r3
   1d95e:	330a      	adds	r3, #10
   1d960:	781b      	ldrb	r3, [r3, #0]
   1d962:	2b04      	cmp	r3, #4
   1d964:	d008      	beq.n	1d978 <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
   1d966:	1dfb      	adds	r3, r7, #7
   1d968:	781b      	ldrb	r3, [r3, #0]
   1d96a:	4a20      	ldr	r2, [pc, #128]	; (1d9ec <sd_mmc_select_slot+0xb0>)
   1d96c:	015b      	lsls	r3, r3, #5
   1d96e:	18d3      	adds	r3, r2, r3
   1d970:	330a      	adds	r3, #10
   1d972:	781b      	ldrb	r3, [r3, #0]
   1d974:	2b03      	cmp	r3, #3
   1d976:	d11d      	bne.n	1d9b4 <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   1d978:	1dfb      	adds	r3, r7, #7
   1d97a:	781b      	ldrb	r3, [r3, #0]
   1d97c:	4a1b      	ldr	r2, [pc, #108]	; (1d9ec <sd_mmc_select_slot+0xb0>)
   1d97e:	015b      	lsls	r3, r3, #5
   1d980:	18d3      	adds	r3, r2, r3
   1d982:	330a      	adds	r3, #10
   1d984:	2202      	movs	r2, #2
   1d986:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   1d988:	1dfb      	adds	r3, r7, #7
   1d98a:	781a      	ldrb	r2, [r3, #0]
   1d98c:	4b17      	ldr	r3, [pc, #92]	; (1d9ec <sd_mmc_select_slot+0xb0>)
   1d98e:	0152      	lsls	r2, r2, #5
   1d990:	4917      	ldr	r1, [pc, #92]	; (1d9f0 <sd_mmc_select_slot+0xb4>)
   1d992:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
   1d994:	1dfb      	adds	r3, r7, #7
   1d996:	781b      	ldrb	r3, [r3, #0]
   1d998:	4a14      	ldr	r2, [pc, #80]	; (1d9ec <sd_mmc_select_slot+0xb0>)
   1d99a:	015b      	lsls	r3, r3, #5
   1d99c:	18d3      	adds	r3, r2, r3
   1d99e:	330d      	adds	r3, #13
   1d9a0:	2201      	movs	r2, #1
   1d9a2:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
   1d9a4:	1dfb      	adds	r3, r7, #7
   1d9a6:	781b      	ldrb	r3, [r3, #0]
   1d9a8:	4a10      	ldr	r2, [pc, #64]	; (1d9ec <sd_mmc_select_slot+0xb0>)
   1d9aa:	015b      	lsls	r3, r3, #5
   1d9ac:	18d3      	adds	r3, r2, r3
   1d9ae:	331e      	adds	r3, #30
   1d9b0:	2200      	movs	r2, #0
   1d9b2:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
   1d9b4:	4b0f      	ldr	r3, [pc, #60]	; (1d9f4 <sd_mmc_select_slot+0xb8>)
   1d9b6:	1dfa      	adds	r2, r7, #7
   1d9b8:	7812      	ldrb	r2, [r2, #0]
   1d9ba:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   1d9bc:	1dfb      	adds	r3, r7, #7
   1d9be:	781b      	ldrb	r3, [r3, #0]
   1d9c0:	015a      	lsls	r2, r3, #5
   1d9c2:	4b0a      	ldr	r3, [pc, #40]	; (1d9ec <sd_mmc_select_slot+0xb0>)
   1d9c4:	18d2      	adds	r2, r2, r3
   1d9c6:	4b0c      	ldr	r3, [pc, #48]	; (1d9f8 <sd_mmc_select_slot+0xbc>)
   1d9c8:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
   1d9ca:	4b0c      	ldr	r3, [pc, #48]	; (1d9fc <sd_mmc_select_slot+0xc0>)
   1d9cc:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
   1d9ce:	1dfb      	adds	r3, r7, #7
   1d9d0:	781b      	ldrb	r3, [r3, #0]
   1d9d2:	4a06      	ldr	r2, [pc, #24]	; (1d9ec <sd_mmc_select_slot+0xb0>)
   1d9d4:	015b      	lsls	r3, r3, #5
   1d9d6:	18d3      	adds	r3, r2, r3
   1d9d8:	330a      	adds	r3, #10
   1d9da:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
   1d9dc:	3b02      	subs	r3, #2
   1d9de:	425a      	negs	r2, r3
   1d9e0:	4153      	adcs	r3, r2
   1d9e2:	b2db      	uxtb	r3, r3
}
   1d9e4:	0018      	movs	r0, r3
   1d9e6:	46bd      	mov	sp, r7
   1d9e8:	b002      	add	sp, #8
   1d9ea:	bd80      	pop	{r7, pc}
   1d9ec:	200041ec 	.word	0x200041ec
   1d9f0:	00061a80 	.word	0x00061a80
   1d9f4:	2000420c 	.word	0x2000420c
   1d9f8:	20004210 	.word	0x20004210
   1d9fc:	0001da01 	.word	0x0001da01

0001da00 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
   1da00:	b5b0      	push	{r4, r5, r7, lr}
   1da02:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1da04:	4b09      	ldr	r3, [pc, #36]	; (1da2c <sd_mmc_configure_slot+0x2c>)
   1da06:	7818      	ldrb	r0, [r3, #0]
   1da08:	4b09      	ldr	r3, [pc, #36]	; (1da30 <sd_mmc_configure_slot+0x30>)
   1da0a:	681b      	ldr	r3, [r3, #0]
   1da0c:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1da0e:	4b08      	ldr	r3, [pc, #32]	; (1da30 <sd_mmc_configure_slot+0x30>)
   1da10:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1da12:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1da14:	4b06      	ldr	r3, [pc, #24]	; (1da30 <sd_mmc_configure_slot+0x30>)
   1da16:	681b      	ldr	r3, [r3, #0]
   1da18:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1da1a:	1e5c      	subs	r4, r3, #1
   1da1c:	41a3      	sbcs	r3, r4
   1da1e:	b2db      	uxtb	r3, r3
   1da20:	4c04      	ldr	r4, [pc, #16]	; (1da34 <sd_mmc_configure_slot+0x34>)
   1da22:	47a0      	blx	r4
}
   1da24:	46c0      	nop			; (mov r8, r8)
   1da26:	46bd      	mov	sp, r7
   1da28:	bdb0      	pop	{r4, r5, r7, pc}
   1da2a:	46c0      	nop			; (mov r8, r8)
   1da2c:	2000420c 	.word	0x2000420c
   1da30:	20004210 	.word	0x20004210
   1da34:	0001eb79 	.word	0x0001eb79

0001da38 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
   1da38:	b580      	push	{r7, lr}
   1da3a:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   1da3c:	4b05      	ldr	r3, [pc, #20]	; (1da54 <sd_mmc_deselect_slot+0x1c>)
   1da3e:	781b      	ldrb	r3, [r3, #0]
   1da40:	2b00      	cmp	r3, #0
   1da42:	d104      	bne.n	1da4e <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
   1da44:	4b03      	ldr	r3, [pc, #12]	; (1da54 <sd_mmc_deselect_slot+0x1c>)
   1da46:	781b      	ldrb	r3, [r3, #0]
   1da48:	0018      	movs	r0, r3
   1da4a:	4b03      	ldr	r3, [pc, #12]	; (1da58 <sd_mmc_deselect_slot+0x20>)
   1da4c:	4798      	blx	r3
	}
}
   1da4e:	46c0      	nop			; (mov r8, r8)
   1da50:	46bd      	mov	sp, r7
   1da52:	bd80      	pop	{r7, pc}
   1da54:	2000420c 	.word	0x2000420c
   1da58:	0001ec01 	.word	0x0001ec01

0001da5c <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
   1da5c:	b580      	push	{r7, lr}
   1da5e:	b082      	sub	sp, #8
   1da60:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
   1da62:	1dfb      	adds	r3, r7, #7
   1da64:	2200      	movs	r2, #0
   1da66:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
   1da68:	4b59      	ldr	r3, [pc, #356]	; (1dbd0 <sd_mmc_spi_card_init+0x174>)
   1da6a:	681b      	ldr	r3, [r3, #0]
   1da6c:	2201      	movs	r2, #1
   1da6e:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
   1da70:	4b57      	ldr	r3, [pc, #348]	; (1dbd0 <sd_mmc_spi_card_init+0x174>)
   1da72:	681b      	ldr	r3, [r3, #0]
   1da74:	2200      	movs	r2, #0
   1da76:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
   1da78:	4b55      	ldr	r3, [pc, #340]	; (1dbd0 <sd_mmc_spi_card_init+0x174>)
   1da7a:	681b      	ldr	r3, [r3, #0]
   1da7c:	2200      	movs	r2, #0
   1da7e:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
   1da80:	4b54      	ldr	r3, [pc, #336]	; (1dbd4 <sd_mmc_spi_card_init+0x178>)
   1da82:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1da84:	2388      	movs	r3, #136	; 0x88
   1da86:	015b      	lsls	r3, r3, #5
   1da88:	2100      	movs	r1, #0
   1da8a:	0018      	movs	r0, r3
   1da8c:	4b52      	ldr	r3, [pc, #328]	; (1dbd8 <sd_mmc_spi_card_init+0x17c>)
   1da8e:	4798      	blx	r3
   1da90:	0003      	movs	r3, r0
   1da92:	001a      	movs	r2, r3
   1da94:	2301      	movs	r3, #1
   1da96:	4053      	eors	r3, r2
   1da98:	b2db      	uxtb	r3, r3
   1da9a:	2b00      	cmp	r3, #0
   1da9c:	d001      	beq.n	1daa2 <sd_mmc_spi_card_init+0x46>
		return false;
   1da9e:	2300      	movs	r3, #0
   1daa0:	e092      	b.n	1dbc8 <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
   1daa2:	1dfb      	adds	r3, r7, #7
   1daa4:	0018      	movs	r0, r3
   1daa6:	4b4d      	ldr	r3, [pc, #308]	; (1dbdc <sd_mmc_spi_card_init+0x180>)
   1daa8:	4798      	blx	r3
   1daaa:	0003      	movs	r3, r0
   1daac:	001a      	movs	r2, r3
   1daae:	2301      	movs	r3, #1
   1dab0:	4053      	eors	r3, r2
   1dab2:	b2db      	uxtb	r3, r3
   1dab4:	2b00      	cmp	r3, #0
   1dab6:	d001      	beq.n	1dabc <sd_mmc_spi_card_init+0x60>
		return false;
   1dab8:	2300      	movs	r3, #0
   1daba:	e085      	b.n	1dbc8 <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
   1dabc:	4b48      	ldr	r3, [pc, #288]	; (1dbe0 <sd_mmc_spi_card_init+0x184>)
   1dabe:	4798      	blx	r3
   1dac0:	0003      	movs	r3, r0
   1dac2:	001a      	movs	r2, r3
   1dac4:	2301      	movs	r3, #1
   1dac6:	4053      	eors	r3, r2
   1dac8:	b2db      	uxtb	r3, r3
   1daca:	2b00      	cmp	r3, #0
   1dacc:	d001      	beq.n	1dad2 <sd_mmc_spi_card_init+0x76>
		return false;
   1dace:	2300      	movs	r3, #0
   1dad0:	e07a      	b.n	1dbc8 <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1dad2:	4b3f      	ldr	r3, [pc, #252]	; (1dbd0 <sd_mmc_spi_card_init+0x174>)
   1dad4:	681b      	ldr	r3, [r3, #0]
   1dad6:	7adb      	ldrb	r3, [r3, #11]
   1dad8:	001a      	movs	r2, r3
   1dada:	2301      	movs	r3, #1
   1dadc:	4013      	ands	r3, r2
   1dade:	d021      	beq.n	1db24 <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
   1dae0:	1dfb      	adds	r3, r7, #7
   1dae2:	781b      	ldrb	r3, [r3, #0]
   1dae4:	0018      	movs	r0, r3
   1dae6:	4b3f      	ldr	r3, [pc, #252]	; (1dbe4 <sd_mmc_spi_card_init+0x188>)
   1dae8:	4798      	blx	r3
   1daea:	0003      	movs	r3, r0
   1daec:	001a      	movs	r2, r3
   1daee:	2301      	movs	r3, #1
   1daf0:	4053      	eors	r3, r2
   1daf2:	b2db      	uxtb	r3, r3
   1daf4:	2b00      	cmp	r3, #0
   1daf6:	d007      	beq.n	1db08 <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
   1daf8:	4b35      	ldr	r3, [pc, #212]	; (1dbd0 <sd_mmc_spi_card_init+0x174>)
   1dafa:	681b      	ldr	r3, [r3, #0]
   1dafc:	2202      	movs	r2, #2
   1dafe:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
   1db00:	4b39      	ldr	r3, [pc, #228]	; (1dbe8 <sd_mmc_spi_card_init+0x18c>)
   1db02:	4798      	blx	r3
   1db04:	0003      	movs	r3, r0
   1db06:	e05f      	b.n	1dbc8 <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1db08:	4b38      	ldr	r3, [pc, #224]	; (1dbec <sd_mmc_spi_card_init+0x190>)
   1db0a:	2100      	movs	r1, #0
   1db0c:	0018      	movs	r0, r3
   1db0e:	4b32      	ldr	r3, [pc, #200]	; (1dbd8 <sd_mmc_spi_card_init+0x17c>)
   1db10:	4798      	blx	r3
   1db12:	0003      	movs	r3, r0
   1db14:	001a      	movs	r2, r3
   1db16:	2301      	movs	r3, #1
   1db18:	4053      	eors	r3, r2
   1db1a:	b2db      	uxtb	r3, r3
   1db1c:	2b00      	cmp	r3, #0
   1db1e:	d001      	beq.n	1db24 <sd_mmc_spi_card_init+0xc8>
			return false;
   1db20:	2300      	movs	r3, #0
   1db22:	e051      	b.n	1dbc8 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1db24:	4b2a      	ldr	r3, [pc, #168]	; (1dbd0 <sd_mmc_spi_card_init+0x174>)
   1db26:	681b      	ldr	r3, [r3, #0]
   1db28:	7adb      	ldrb	r3, [r3, #11]
   1db2a:	001a      	movs	r2, r3
   1db2c:	2301      	movs	r3, #1
   1db2e:	4013      	ands	r3, r2
   1db30:	d017      	beq.n	1db62 <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
   1db32:	4b2f      	ldr	r3, [pc, #188]	; (1dbf0 <sd_mmc_spi_card_init+0x194>)
   1db34:	4798      	blx	r3
   1db36:	0003      	movs	r3, r0
   1db38:	001a      	movs	r2, r3
   1db3a:	2301      	movs	r3, #1
   1db3c:	4053      	eors	r3, r2
   1db3e:	b2db      	uxtb	r3, r3
   1db40:	2b00      	cmp	r3, #0
   1db42:	d001      	beq.n	1db48 <sd_mmc_spi_card_init+0xec>
			return false;
   1db44:	2300      	movs	r3, #0
   1db46:	e03f      	b.n	1dbc8 <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
   1db48:	4b2a      	ldr	r3, [pc, #168]	; (1dbf4 <sd_mmc_spi_card_init+0x198>)
   1db4a:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
   1db4c:	4b2a      	ldr	r3, [pc, #168]	; (1dbf8 <sd_mmc_spi_card_init+0x19c>)
   1db4e:	4798      	blx	r3
   1db50:	0003      	movs	r3, r0
   1db52:	001a      	movs	r2, r3
   1db54:	2301      	movs	r3, #1
   1db56:	4053      	eors	r3, r2
   1db58:	b2db      	uxtb	r3, r3
   1db5a:	2b00      	cmp	r3, #0
   1db5c:	d001      	beq.n	1db62 <sd_mmc_spi_card_init+0x106>
			return false;
   1db5e:	2300      	movs	r3, #0
   1db60:	e032      	b.n	1dbc8 <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1db62:	4b1b      	ldr	r3, [pc, #108]	; (1dbd0 <sd_mmc_spi_card_init+0x174>)
   1db64:	681b      	ldr	r3, [r3, #0]
   1db66:	7adb      	ldrb	r3, [r3, #11]
   1db68:	001a      	movs	r2, r3
   1db6a:	2301      	movs	r3, #1
   1db6c:	4013      	ands	r3, r2
   1db6e:	d016      	beq.n	1db9e <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
   1db70:	4b17      	ldr	r3, [pc, #92]	; (1dbd0 <sd_mmc_spi_card_init+0x174>)
   1db72:	681b      	ldr	r3, [r3, #0]
   1db74:	7adb      	ldrb	r3, [r3, #11]
   1db76:	001a      	movs	r2, r3
   1db78:	2308      	movs	r3, #8
   1db7a:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1db7c:	d10f      	bne.n	1db9e <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1db7e:	2380      	movs	r3, #128	; 0x80
   1db80:	009b      	lsls	r3, r3, #2
   1db82:	4a1e      	ldr	r2, [pc, #120]	; (1dbfc <sd_mmc_spi_card_init+0x1a0>)
   1db84:	0019      	movs	r1, r3
   1db86:	0010      	movs	r0, r2
   1db88:	4b13      	ldr	r3, [pc, #76]	; (1dbd8 <sd_mmc_spi_card_init+0x17c>)
   1db8a:	4798      	blx	r3
   1db8c:	0003      	movs	r3, r0
   1db8e:	001a      	movs	r2, r3
   1db90:	2301      	movs	r3, #1
   1db92:	4053      	eors	r3, r2
   1db94:	b2db      	uxtb	r3, r3
   1db96:	2b00      	cmp	r3, #0
   1db98:	d001      	beq.n	1db9e <sd_mmc_spi_card_init+0x142>
			return false;
   1db9a:	2300      	movs	r3, #0
   1db9c:	e014      	b.n	1dbc8 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1db9e:	4b0c      	ldr	r3, [pc, #48]	; (1dbd0 <sd_mmc_spi_card_init+0x174>)
   1dba0:	681b      	ldr	r3, [r3, #0]
   1dba2:	7adb      	ldrb	r3, [r3, #11]
   1dba4:	001a      	movs	r2, r3
   1dba6:	2301      	movs	r3, #1
   1dba8:	4013      	ands	r3, r2
   1dbaa:	d00a      	beq.n	1dbc2 <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
   1dbac:	4b14      	ldr	r3, [pc, #80]	; (1dc00 <sd_mmc_spi_card_init+0x1a4>)
   1dbae:	4798      	blx	r3
   1dbb0:	0003      	movs	r3, r0
   1dbb2:	001a      	movs	r2, r3
   1dbb4:	2301      	movs	r3, #1
   1dbb6:	4053      	eors	r3, r2
   1dbb8:	b2db      	uxtb	r3, r3
   1dbba:	2b00      	cmp	r3, #0
   1dbbc:	d001      	beq.n	1dbc2 <sd_mmc_spi_card_init+0x166>
			return false;
   1dbbe:	2300      	movs	r3, #0
   1dbc0:	e002      	b.n	1dbc8 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1dbc2:	4b10      	ldr	r3, [pc, #64]	; (1dc04 <sd_mmc_spi_card_init+0x1a8>)
   1dbc4:	4798      	blx	r3
	return true;
   1dbc6:	2301      	movs	r3, #1
}
   1dbc8:	0018      	movs	r0, r3
   1dbca:	46bd      	mov	sp, r7
   1dbcc:	b002      	add	sp, #8
   1dbce:	bd80      	pop	{r7, pc}
   1dbd0:	20004210 	.word	0x20004210
   1dbd4:	0001ec45 	.word	0x0001ec45
   1dbd8:	0001ec91 	.word	0x0001ec91
   1dbdc:	0001d3b1 	.word	0x0001d3b1
   1dbe0:	0001d3a5 	.word	0x0001d3a5
   1dbe4:	0001d2c1 	.word	0x0001d2c1
   1dbe8:	0001dc09 	.word	0x0001dc09
   1dbec:	0000113b 	.word	0x0000113b
   1dbf0:	0001d54d 	.word	0x0001d54d
   1dbf4:	0001d6ed 	.word	0x0001d6ed
   1dbf8:	0001d835 	.word	0x0001d835
   1dbfc:	00001110 	.word	0x00001110
   1dc00:	0001d7d9 	.word	0x0001d7d9
   1dc04:	0001da01 	.word	0x0001da01

0001dc08 <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
   1dc08:	b580      	push	{r7, lr}
   1dc0a:	b082      	sub	sp, #8
   1dc0c:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1dc0e:	2388      	movs	r3, #136	; 0x88
   1dc10:	015b      	lsls	r3, r3, #5
   1dc12:	2100      	movs	r1, #0
   1dc14:	0018      	movs	r0, r3
   1dc16:	4b32      	ldr	r3, [pc, #200]	; (1dce0 <sd_mmc_spi_install_mmc+0xd8>)
   1dc18:	4798      	blx	r3
   1dc1a:	0003      	movs	r3, r0
   1dc1c:	001a      	movs	r2, r3
   1dc1e:	2301      	movs	r3, #1
   1dc20:	4053      	eors	r3, r2
   1dc22:	b2db      	uxtb	r3, r3
   1dc24:	2b00      	cmp	r3, #0
   1dc26:	d001      	beq.n	1dc2c <sd_mmc_spi_install_mmc+0x24>
		return false;
   1dc28:	2300      	movs	r3, #0
   1dc2a:	e055      	b.n	1dcd8 <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
   1dc2c:	4b2d      	ldr	r3, [pc, #180]	; (1dce4 <sd_mmc_spi_install_mmc+0xdc>)
   1dc2e:	4798      	blx	r3
   1dc30:	0003      	movs	r3, r0
   1dc32:	001a      	movs	r2, r3
   1dc34:	2301      	movs	r3, #1
   1dc36:	4053      	eors	r3, r2
   1dc38:	b2db      	uxtb	r3, r3
   1dc3a:	2b00      	cmp	r3, #0
   1dc3c:	d001      	beq.n	1dc42 <sd_mmc_spi_install_mmc+0x3a>
		return false;
   1dc3e:	2300      	movs	r3, #0
   1dc40:	e04a      	b.n	1dcd8 <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1dc42:	4b29      	ldr	r3, [pc, #164]	; (1dce8 <sd_mmc_spi_install_mmc+0xe0>)
   1dc44:	2100      	movs	r1, #0
   1dc46:	0018      	movs	r0, r3
   1dc48:	4b25      	ldr	r3, [pc, #148]	; (1dce0 <sd_mmc_spi_install_mmc+0xd8>)
   1dc4a:	4798      	blx	r3
   1dc4c:	0003      	movs	r3, r0
   1dc4e:	001a      	movs	r2, r3
   1dc50:	2301      	movs	r3, #1
   1dc52:	4053      	eors	r3, r2
   1dc54:	b2db      	uxtb	r3, r3
   1dc56:	2b00      	cmp	r3, #0
   1dc58:	d001      	beq.n	1dc5e <sd_mmc_spi_install_mmc+0x56>
		return false;
   1dc5a:	2300      	movs	r3, #0
   1dc5c:	e03c      	b.n	1dcd8 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
   1dc5e:	4b23      	ldr	r3, [pc, #140]	; (1dcec <sd_mmc_spi_install_mmc+0xe4>)
   1dc60:	4798      	blx	r3
   1dc62:	0003      	movs	r3, r0
   1dc64:	001a      	movs	r2, r3
   1dc66:	2301      	movs	r3, #1
   1dc68:	4053      	eors	r3, r2
   1dc6a:	b2db      	uxtb	r3, r3
   1dc6c:	2b00      	cmp	r3, #0
   1dc6e:	d001      	beq.n	1dc74 <sd_mmc_spi_install_mmc+0x6c>
		return false;
   1dc70:	2300      	movs	r3, #0
   1dc72:	e031      	b.n	1dcd8 <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
   1dc74:	4b1e      	ldr	r3, [pc, #120]	; (1dcf0 <sd_mmc_spi_install_mmc+0xe8>)
   1dc76:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
   1dc78:	4b1e      	ldr	r3, [pc, #120]	; (1dcf4 <sd_mmc_spi_install_mmc+0xec>)
   1dc7a:	681b      	ldr	r3, [r3, #0]
   1dc7c:	7b1b      	ldrb	r3, [r3, #12]
   1dc7e:	2b3f      	cmp	r3, #63	; 0x3f
   1dc80:	d90c      	bls.n	1dc9c <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
   1dc82:	1dfb      	adds	r3, r7, #7
   1dc84:	0018      	movs	r0, r3
   1dc86:	4b1c      	ldr	r3, [pc, #112]	; (1dcf8 <sd_mmc_spi_install_mmc+0xf0>)
   1dc88:	4798      	blx	r3
   1dc8a:	0003      	movs	r3, r0
   1dc8c:	001a      	movs	r2, r3
   1dc8e:	2301      	movs	r3, #1
   1dc90:	4053      	eors	r3, r2
   1dc92:	b2db      	uxtb	r3, r3
   1dc94:	2b00      	cmp	r3, #0
   1dc96:	d001      	beq.n	1dc9c <sd_mmc_spi_install_mmc+0x94>
			return false;
   1dc98:	2300      	movs	r3, #0
   1dc9a:	e01d      	b.n	1dcd8 <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1dc9c:	2380      	movs	r3, #128	; 0x80
   1dc9e:	009b      	lsls	r3, r3, #2
   1dca0:	4a16      	ldr	r2, [pc, #88]	; (1dcfc <sd_mmc_spi_install_mmc+0xf4>)
   1dca2:	0019      	movs	r1, r3
   1dca4:	0010      	movs	r0, r2
   1dca6:	4b0e      	ldr	r3, [pc, #56]	; (1dce0 <sd_mmc_spi_install_mmc+0xd8>)
   1dca8:	4798      	blx	r3
   1dcaa:	0003      	movs	r3, r0
   1dcac:	001a      	movs	r2, r3
   1dcae:	2301      	movs	r3, #1
   1dcb0:	4053      	eors	r3, r2
   1dcb2:	b2db      	uxtb	r3, r3
   1dcb4:	2b00      	cmp	r3, #0
   1dcb6:	d001      	beq.n	1dcbc <sd_mmc_spi_install_mmc+0xb4>
		return false;
   1dcb8:	2300      	movs	r3, #0
   1dcba:	e00d      	b.n	1dcd8 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
   1dcbc:	4b10      	ldr	r3, [pc, #64]	; (1dd00 <sd_mmc_spi_install_mmc+0xf8>)
   1dcbe:	4798      	blx	r3
   1dcc0:	0003      	movs	r3, r0
   1dcc2:	001a      	movs	r2, r3
   1dcc4:	2301      	movs	r3, #1
   1dcc6:	4053      	eors	r3, r2
   1dcc8:	b2db      	uxtb	r3, r3
   1dcca:	2b00      	cmp	r3, #0
   1dccc:	d001      	beq.n	1dcd2 <sd_mmc_spi_install_mmc+0xca>
		return false;
   1dcce:	2300      	movs	r3, #0
   1dcd0:	e002      	b.n	1dcd8 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1dcd2:	4b0c      	ldr	r3, [pc, #48]	; (1dd04 <sd_mmc_spi_install_mmc+0xfc>)
   1dcd4:	4798      	blx	r3
	return true;
   1dcd6:	2301      	movs	r3, #1
}
   1dcd8:	0018      	movs	r0, r3
   1dcda:	46bd      	mov	sp, r7
   1dcdc:	b002      	add	sp, #8
   1dcde:	bd80      	pop	{r7, pc}
   1dce0:	0001ec91 	.word	0x0001ec91
   1dce4:	0001d215 	.word	0x0001d215
   1dce8:	0000113b 	.word	0x0000113b
   1dcec:	0001d54d 	.word	0x0001d54d
   1dcf0:	0001d5bd 	.word	0x0001d5bd
   1dcf4:	20004210 	.word	0x20004210
   1dcf8:	0001d421 	.word	0x0001d421
   1dcfc:	00001110 	.word	0x00001110
   1dd00:	0001d7d9 	.word	0x0001d7d9
   1dd04:	0001da01 	.word	0x0001da01

0001dd08 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
   1dd08:	b580      	push	{r7, lr}
   1dd0a:	b082      	sub	sp, #8
   1dd0c:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1dd0e:	1dfb      	adds	r3, r7, #7
   1dd10:	2200      	movs	r2, #0
   1dd12:	701a      	strb	r2, [r3, #0]
   1dd14:	e00c      	b.n	1dd30 <sd_mmc_init+0x28>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   1dd16:	1dfb      	adds	r3, r7, #7
   1dd18:	781b      	ldrb	r3, [r3, #0]
   1dd1a:	4a0c      	ldr	r2, [pc, #48]	; (1dd4c <sd_mmc_init+0x44>)
   1dd1c:	015b      	lsls	r3, r3, #5
   1dd1e:	18d3      	adds	r3, r2, r3
   1dd20:	330a      	adds	r3, #10
   1dd22:	2204      	movs	r2, #4
   1dd24:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1dd26:	1dfb      	adds	r3, r7, #7
   1dd28:	781a      	ldrb	r2, [r3, #0]
   1dd2a:	1dfb      	adds	r3, r7, #7
   1dd2c:	3201      	adds	r2, #1
   1dd2e:	701a      	strb	r2, [r3, #0]
   1dd30:	1dfb      	adds	r3, r7, #7
   1dd32:	781b      	ldrb	r3, [r3, #0]
   1dd34:	2b00      	cmp	r3, #0
   1dd36:	d0ee      	beq.n	1dd16 <sd_mmc_init+0xe>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
   1dd38:	4b05      	ldr	r3, [pc, #20]	; (1dd50 <sd_mmc_init+0x48>)
   1dd3a:	22ff      	movs	r2, #255	; 0xff
   1dd3c:	701a      	strb	r2, [r3, #0]
	driver_init();
   1dd3e:	4b05      	ldr	r3, [pc, #20]	; (1dd54 <sd_mmc_init+0x4c>)
   1dd40:	4798      	blx	r3
}
   1dd42:	46c0      	nop			; (mov r8, r8)
   1dd44:	46bd      	mov	sp, r7
   1dd46:	b002      	add	sp, #8
   1dd48:	bd80      	pop	{r7, pc}
   1dd4a:	46c0      	nop			; (mov r8, r8)
   1dd4c:	200041ec 	.word	0x200041ec
   1dd50:	2000420c 	.word	0x2000420c
   1dd54:	0001eab1 	.word	0x0001eab1

0001dd58 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
   1dd58:	b590      	push	{r4, r7, lr}
   1dd5a:	b085      	sub	sp, #20
   1dd5c:	af00      	add	r7, sp, #0
   1dd5e:	0002      	movs	r2, r0
   1dd60:	1dfb      	adds	r3, r7, #7
   1dd62:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1dd64:	230f      	movs	r3, #15
   1dd66:	18fc      	adds	r4, r7, r3
   1dd68:	1dfb      	adds	r3, r7, #7
   1dd6a:	781b      	ldrb	r3, [r3, #0]
   1dd6c:	0018      	movs	r0, r3
   1dd6e:	4b13      	ldr	r3, [pc, #76]	; (1ddbc <sd_mmc_check+0x64>)
   1dd70:	4798      	blx	r3
   1dd72:	0003      	movs	r3, r0
   1dd74:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
   1dd76:	230f      	movs	r3, #15
   1dd78:	18fb      	adds	r3, r7, r3
   1dd7a:	781b      	ldrb	r3, [r3, #0]
   1dd7c:	2b01      	cmp	r3, #1
   1dd7e:	d005      	beq.n	1dd8c <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
   1dd80:	4b0f      	ldr	r3, [pc, #60]	; (1ddc0 <sd_mmc_check+0x68>)
   1dd82:	4798      	blx	r3
		return sd_mmc_err;
   1dd84:	230f      	movs	r3, #15
   1dd86:	18fb      	adds	r3, r7, r3
   1dd88:	781b      	ldrb	r3, [r3, #0]
   1dd8a:	e012      	b.n	1ddb2 <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
   1dd8c:	4b0d      	ldr	r3, [pc, #52]	; (1ddc4 <sd_mmc_check+0x6c>)
   1dd8e:	4798      	blx	r3
   1dd90:	1e03      	subs	r3, r0, #0
   1dd92:	d007      	beq.n	1dda4 <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
   1dd94:	4b0c      	ldr	r3, [pc, #48]	; (1ddc8 <sd_mmc_check+0x70>)
   1dd96:	681b      	ldr	r3, [r3, #0]
   1dd98:	2200      	movs	r2, #0
   1dd9a:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
   1dd9c:	4b08      	ldr	r3, [pc, #32]	; (1ddc0 <sd_mmc_check+0x68>)
   1dd9e:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
   1dda0:	2301      	movs	r3, #1
   1dda2:	e006      	b.n	1ddb2 <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
   1dda4:	4b08      	ldr	r3, [pc, #32]	; (1ddc8 <sd_mmc_check+0x70>)
   1dda6:	681b      	ldr	r3, [r3, #0]
   1dda8:	2203      	movs	r2, #3
   1ddaa:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
   1ddac:	4b04      	ldr	r3, [pc, #16]	; (1ddc0 <sd_mmc_check+0x68>)
   1ddae:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
   1ddb0:	2303      	movs	r3, #3
}
   1ddb2:	0018      	movs	r0, r3
   1ddb4:	46bd      	mov	sp, r7
   1ddb6:	b005      	add	sp, #20
   1ddb8:	bd90      	pop	{r4, r7, pc}
   1ddba:	46c0      	nop			; (mov r8, r8)
   1ddbc:	0001d93d 	.word	0x0001d93d
   1ddc0:	0001da39 	.word	0x0001da39
   1ddc4:	0001da5d 	.word	0x0001da5d
   1ddc8:	20004210 	.word	0x20004210

0001ddcc <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
   1ddcc:	b580      	push	{r7, lr}
   1ddce:	b082      	sub	sp, #8
   1ddd0:	af00      	add	r7, sp, #0
   1ddd2:	0002      	movs	r2, r0
   1ddd4:	1dfb      	adds	r3, r7, #7
   1ddd6:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1ddd8:	1dfb      	adds	r3, r7, #7
   1ddda:	781b      	ldrb	r3, [r3, #0]
   1dddc:	0018      	movs	r0, r3
   1ddde:	4b07      	ldr	r3, [pc, #28]	; (1ddfc <sd_mmc_get_type+0x30>)
   1dde0:	4798      	blx	r3
   1dde2:	1e03      	subs	r3, r0, #0
   1dde4:	d001      	beq.n	1ddea <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
   1dde6:	2300      	movs	r3, #0
   1dde8:	e004      	b.n	1ddf4 <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
   1ddea:	4b05      	ldr	r3, [pc, #20]	; (1de00 <sd_mmc_get_type+0x34>)
   1ddec:	4798      	blx	r3
	return sd_mmc_card->type;
   1ddee:	4b05      	ldr	r3, [pc, #20]	; (1de04 <sd_mmc_get_type+0x38>)
   1ddf0:	681b      	ldr	r3, [r3, #0]
   1ddf2:	7adb      	ldrb	r3, [r3, #11]
}
   1ddf4:	0018      	movs	r0, r3
   1ddf6:	46bd      	mov	sp, r7
   1ddf8:	b002      	add	sp, #8
   1ddfa:	bd80      	pop	{r7, pc}
   1ddfc:	0001d93d 	.word	0x0001d93d
   1de00:	0001da39 	.word	0x0001da39
   1de04:	20004210 	.word	0x20004210

0001de08 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
   1de08:	b580      	push	{r7, lr}
   1de0a:	b082      	sub	sp, #8
   1de0c:	af00      	add	r7, sp, #0
   1de0e:	0002      	movs	r2, r0
   1de10:	1dfb      	adds	r3, r7, #7
   1de12:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1de14:	1dfb      	adds	r3, r7, #7
   1de16:	781b      	ldrb	r3, [r3, #0]
   1de18:	0018      	movs	r0, r3
   1de1a:	4b07      	ldr	r3, [pc, #28]	; (1de38 <sd_mmc_get_capacity+0x30>)
   1de1c:	4798      	blx	r3
   1de1e:	1e03      	subs	r3, r0, #0
   1de20:	d001      	beq.n	1de26 <sd_mmc_get_capacity+0x1e>
		return 0;
   1de22:	2300      	movs	r3, #0
   1de24:	e004      	b.n	1de30 <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
   1de26:	4b05      	ldr	r3, [pc, #20]	; (1de3c <sd_mmc_get_capacity+0x34>)
   1de28:	4798      	blx	r3
	return sd_mmc_card->capacity;
   1de2a:	4b05      	ldr	r3, [pc, #20]	; (1de40 <sd_mmc_get_capacity+0x38>)
   1de2c:	681b      	ldr	r3, [r3, #0]
   1de2e:	685b      	ldr	r3, [r3, #4]
}
   1de30:	0018      	movs	r0, r3
   1de32:	46bd      	mov	sp, r7
   1de34:	b002      	add	sp, #8
   1de36:	bd80      	pop	{r7, pc}
   1de38:	0001d93d 	.word	0x0001d93d
   1de3c:	0001da39 	.word	0x0001da39
   1de40:	20004210 	.word	0x20004210

0001de44 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
   1de44:	b580      	push	{r7, lr}
   1de46:	b082      	sub	sp, #8
   1de48:	af00      	add	r7, sp, #0
   1de4a:	0002      	movs	r2, r0
   1de4c:	1dfb      	adds	r3, r7, #7
   1de4e:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
   1de50:	2300      	movs	r3, #0
}
   1de52:	0018      	movs	r0, r3
   1de54:	46bd      	mov	sp, r7
   1de56:	b002      	add	sp, #8
   1de58:	bd80      	pop	{r7, pc}
	...

0001de5c <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1de5c:	b590      	push	{r4, r7, lr}
   1de5e:	b089      	sub	sp, #36	; 0x24
   1de60:	af02      	add	r7, sp, #8
   1de62:	6039      	str	r1, [r7, #0]
   1de64:	0011      	movs	r1, r2
   1de66:	1dfb      	adds	r3, r7, #7
   1de68:	1c02      	adds	r2, r0, #0
   1de6a:	701a      	strb	r2, [r3, #0]
   1de6c:	1d3b      	adds	r3, r7, #4
   1de6e:	1c0a      	adds	r2, r1, #0
   1de70:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1de72:	230f      	movs	r3, #15
   1de74:	18fc      	adds	r4, r7, r3
   1de76:	1dfb      	adds	r3, r7, #7
   1de78:	781b      	ldrb	r3, [r3, #0]
   1de7a:	0018      	movs	r0, r3
   1de7c:	4b29      	ldr	r3, [pc, #164]	; (1df24 <sd_mmc_init_read_blocks+0xc8>)
   1de7e:	4798      	blx	r3
   1de80:	0003      	movs	r3, r0
   1de82:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1de84:	230f      	movs	r3, #15
   1de86:	18fb      	adds	r3, r7, r3
   1de88:	781b      	ldrb	r3, [r3, #0]
   1de8a:	2b00      	cmp	r3, #0
   1de8c:	d003      	beq.n	1de96 <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
   1de8e:	230f      	movs	r3, #15
   1de90:	18fb      	adds	r3, r7, r3
   1de92:	781b      	ldrb	r3, [r3, #0]
   1de94:	e041      	b.n	1df1a <sd_mmc_init_read_blocks+0xbe>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
   1de96:	4b24      	ldr	r3, [pc, #144]	; (1df28 <sd_mmc_init_read_blocks+0xcc>)
   1de98:	4798      	blx	r3
   1de9a:	0003      	movs	r3, r0
   1de9c:	001a      	movs	r2, r3
   1de9e:	2301      	movs	r3, #1
   1dea0:	4053      	eors	r3, r2
   1dea2:	b2db      	uxtb	r3, r3
   1dea4:	2b00      	cmp	r3, #0
   1dea6:	d003      	beq.n	1deb0 <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
   1dea8:	4b20      	ldr	r3, [pc, #128]	; (1df2c <sd_mmc_init_read_blocks+0xd0>)
   1deaa:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1deac:	2305      	movs	r3, #5
   1deae:	e034      	b.n	1df1a <sd_mmc_init_read_blocks+0xbe>
	}

	if (nb_block > 1) {
   1deb0:	1d3b      	adds	r3, r7, #4
   1deb2:	881b      	ldrh	r3, [r3, #0]
   1deb4:	2b01      	cmp	r3, #1
   1deb6:	d902      	bls.n	1debe <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
   1deb8:	4b1d      	ldr	r3, [pc, #116]	; (1df30 <sd_mmc_init_read_blocks+0xd4>)
   1deba:	617b      	str	r3, [r7, #20]
   1debc:	e001      	b.n	1dec2 <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
   1debe:	4b1d      	ldr	r3, [pc, #116]	; (1df34 <sd_mmc_init_read_blocks+0xd8>)
   1dec0:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1dec2:	4b1d      	ldr	r3, [pc, #116]	; (1df38 <sd_mmc_init_read_blocks+0xdc>)
   1dec4:	681b      	ldr	r3, [r3, #0]
   1dec6:	7adb      	ldrb	r3, [r3, #11]
   1dec8:	001a      	movs	r2, r3
   1deca:	2308      	movs	r3, #8
   1decc:	4013      	ands	r3, r2
   1dece:	d002      	beq.n	1ded6 <sd_mmc_init_read_blocks+0x7a>
		arg = start;
   1ded0:	683b      	ldr	r3, [r7, #0]
   1ded2:	613b      	str	r3, [r7, #16]
   1ded4:	e002      	b.n	1dedc <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1ded6:	683b      	ldr	r3, [r7, #0]
   1ded8:	025b      	lsls	r3, r3, #9
   1deda:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1dedc:	1d3b      	adds	r3, r7, #4
   1dede:	881c      	ldrh	r4, [r3, #0]
   1dee0:	2380      	movs	r3, #128	; 0x80
   1dee2:	009a      	lsls	r2, r3, #2
   1dee4:	6939      	ldr	r1, [r7, #16]
   1dee6:	6978      	ldr	r0, [r7, #20]
   1dee8:	2301      	movs	r3, #1
   1deea:	9300      	str	r3, [sp, #0]
   1deec:	0023      	movs	r3, r4
   1deee:	4c13      	ldr	r4, [pc, #76]	; (1df3c <sd_mmc_init_read_blocks+0xe0>)
   1def0:	47a0      	blx	r4
   1def2:	0003      	movs	r3, r0
   1def4:	001a      	movs	r2, r3
   1def6:	2301      	movs	r3, #1
   1def8:	4053      	eors	r3, r2
   1defa:	b2db      	uxtb	r3, r3
   1defc:	2b00      	cmp	r3, #0
   1defe:	d003      	beq.n	1df08 <sd_mmc_init_read_blocks+0xac>
		sd_mmc_deselect_slot();
   1df00:	4b0a      	ldr	r3, [pc, #40]	; (1df2c <sd_mmc_init_read_blocks+0xd0>)
   1df02:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1df04:	2305      	movs	r3, #5
   1df06:	e008      	b.n	1df1a <sd_mmc_init_read_blocks+0xbe>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1df08:	4b0d      	ldr	r3, [pc, #52]	; (1df40 <sd_mmc_init_read_blocks+0xe4>)
   1df0a:	1d3a      	adds	r2, r7, #4
   1df0c:	8812      	ldrh	r2, [r2, #0]
   1df0e:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1df10:	4b0c      	ldr	r3, [pc, #48]	; (1df44 <sd_mmc_init_read_blocks+0xe8>)
   1df12:	1d3a      	adds	r2, r7, #4
   1df14:	8812      	ldrh	r2, [r2, #0]
   1df16:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1df18:	2300      	movs	r3, #0
}
   1df1a:	0018      	movs	r0, r3
   1df1c:	46bd      	mov	sp, r7
   1df1e:	b007      	add	sp, #28
   1df20:	bd90      	pop	{r4, r7, pc}
   1df22:	46c0      	nop			; (mov r8, r8)
   1df24:	0001d93d 	.word	0x0001d93d
   1df28:	0001d7d9 	.word	0x0001d7d9
   1df2c:	0001da39 	.word	0x0001da39
   1df30:	00101112 	.word	0x00101112
   1df34:	00081111 	.word	0x00081111
   1df38:	20004210 	.word	0x20004210
   1df3c:	0001ecb9 	.word	0x0001ecb9
   1df40:	20004216 	.word	0x20004216
   1df44:	20004214 	.word	0x20004214

0001df48 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
   1df48:	b580      	push	{r7, lr}
   1df4a:	b082      	sub	sp, #8
   1df4c:	af00      	add	r7, sp, #0
   1df4e:	6078      	str	r0, [r7, #4]
   1df50:	000a      	movs	r2, r1
   1df52:	1cbb      	adds	r3, r7, #2
   1df54:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
   1df56:	1cbb      	adds	r3, r7, #2
   1df58:	881a      	ldrh	r2, [r3, #0]
   1df5a:	687b      	ldr	r3, [r7, #4]
   1df5c:	0011      	movs	r1, r2
   1df5e:	0018      	movs	r0, r3
   1df60:	4b0d      	ldr	r3, [pc, #52]	; (1df98 <sd_mmc_start_read_blocks+0x50>)
   1df62:	4798      	blx	r3
   1df64:	0003      	movs	r3, r0
   1df66:	001a      	movs	r2, r3
   1df68:	2301      	movs	r3, #1
   1df6a:	4053      	eors	r3, r2
   1df6c:	b2db      	uxtb	r3, r3
   1df6e:	2b00      	cmp	r3, #0
   1df70:	d004      	beq.n	1df7c <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1df72:	4b0a      	ldr	r3, [pc, #40]	; (1df9c <sd_mmc_start_read_blocks+0x54>)
   1df74:	2200      	movs	r2, #0
   1df76:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1df78:	2305      	movs	r3, #5
   1df7a:	e008      	b.n	1df8e <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1df7c:	4b07      	ldr	r3, [pc, #28]	; (1df9c <sd_mmc_start_read_blocks+0x54>)
   1df7e:	881a      	ldrh	r2, [r3, #0]
   1df80:	1cbb      	adds	r3, r7, #2
   1df82:	881b      	ldrh	r3, [r3, #0]
   1df84:	1ad3      	subs	r3, r2, r3
   1df86:	b29a      	uxth	r2, r3
   1df88:	4b04      	ldr	r3, [pc, #16]	; (1df9c <sd_mmc_start_read_blocks+0x54>)
   1df8a:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1df8c:	2300      	movs	r3, #0
}
   1df8e:	0018      	movs	r0, r3
   1df90:	46bd      	mov	sp, r7
   1df92:	b002      	add	sp, #8
   1df94:	bd80      	pop	{r7, pc}
   1df96:	46c0      	nop			; (mov r8, r8)
   1df98:	0001ef89 	.word	0x0001ef89
   1df9c:	20004216 	.word	0x20004216

0001dfa0 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
   1dfa0:	b580      	push	{r7, lr}
   1dfa2:	b082      	sub	sp, #8
   1dfa4:	af00      	add	r7, sp, #0
   1dfa6:	0002      	movs	r2, r0
   1dfa8:	1dfb      	adds	r3, r7, #7
   1dfaa:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
   1dfac:	4b1c      	ldr	r3, [pc, #112]	; (1e020 <sd_mmc_wait_end_of_read_blocks+0x80>)
   1dfae:	4798      	blx	r3
   1dfb0:	0003      	movs	r3, r0
   1dfb2:	001a      	movs	r2, r3
   1dfb4:	2301      	movs	r3, #1
   1dfb6:	4053      	eors	r3, r2
   1dfb8:	b2db      	uxtb	r3, r3
   1dfba:	2b00      	cmp	r3, #0
   1dfbc:	d001      	beq.n	1dfc2 <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1dfbe:	2305      	movs	r3, #5
   1dfc0:	e029      	b.n	1e016 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
   1dfc2:	1dfb      	adds	r3, r7, #7
   1dfc4:	781b      	ldrb	r3, [r3, #0]
   1dfc6:	2b00      	cmp	r3, #0
   1dfc8:	d003      	beq.n	1dfd2 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1dfca:	4b16      	ldr	r3, [pc, #88]	; (1e024 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1dfcc:	2200      	movs	r2, #0
   1dfce:	801a      	strh	r2, [r3, #0]
   1dfd0:	e005      	b.n	1dfde <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1dfd2:	4b14      	ldr	r3, [pc, #80]	; (1e024 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1dfd4:	881b      	ldrh	r3, [r3, #0]
   1dfd6:	2b00      	cmp	r3, #0
   1dfd8:	d001      	beq.n	1dfde <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
   1dfda:	2300      	movs	r3, #0
   1dfdc:	e01b      	b.n	1e016 <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1dfde:	4b12      	ldr	r3, [pc, #72]	; (1e028 <sd_mmc_wait_end_of_read_blocks+0x88>)
   1dfe0:	881b      	ldrh	r3, [r3, #0]
   1dfe2:	2b01      	cmp	r3, #1
   1dfe4:	d103      	bne.n	1dfee <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1dfe6:	4b11      	ldr	r3, [pc, #68]	; (1e02c <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1dfe8:	4798      	blx	r3
		return SD_MMC_OK;
   1dfea:	2300      	movs	r3, #0
   1dfec:	e013      	b.n	1e016 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   1dfee:	4b10      	ldr	r3, [pc, #64]	; (1e030 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1dff0:	2100      	movs	r1, #0
   1dff2:	0018      	movs	r0, r3
   1dff4:	4b0f      	ldr	r3, [pc, #60]	; (1e034 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1dff6:	4798      	blx	r3
   1dff8:	0003      	movs	r3, r0
   1dffa:	001a      	movs	r2, r3
   1dffc:	2301      	movs	r3, #1
   1dffe:	4053      	eors	r3, r2
   1e000:	b2db      	uxtb	r3, r3
   1e002:	2b00      	cmp	r3, #0
   1e004:	d004      	beq.n	1e010 <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
   1e006:	4b0a      	ldr	r3, [pc, #40]	; (1e030 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1e008:	2100      	movs	r1, #0
   1e00a:	0018      	movs	r0, r3
   1e00c:	4b09      	ldr	r3, [pc, #36]	; (1e034 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1e00e:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
   1e010:	4b06      	ldr	r3, [pc, #24]	; (1e02c <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1e012:	4798      	blx	r3
	return SD_MMC_OK;
   1e014:	2300      	movs	r3, #0
}
   1e016:	0018      	movs	r0, r3
   1e018:	46bd      	mov	sp, r7
   1e01a:	b002      	add	sp, #8
   1e01c:	bd80      	pop	{r7, pc}
   1e01e:	46c0      	nop			; (mov r8, r8)
   1e020:	0001f02d 	.word	0x0001f02d
   1e024:	20004216 	.word	0x20004216
   1e028:	20004214 	.word	0x20004214
   1e02c:	0001da39 	.word	0x0001da39
   1e030:	0000310c 	.word	0x0000310c
   1e034:	0001ec91 	.word	0x0001ec91

0001e038 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1e038:	b590      	push	{r4, r7, lr}
   1e03a:	b089      	sub	sp, #36	; 0x24
   1e03c:	af02      	add	r7, sp, #8
   1e03e:	6039      	str	r1, [r7, #0]
   1e040:	0011      	movs	r1, r2
   1e042:	1dfb      	adds	r3, r7, #7
   1e044:	1c02      	adds	r2, r0, #0
   1e046:	701a      	strb	r2, [r3, #0]
   1e048:	1d3b      	adds	r3, r7, #4
   1e04a:	1c0a      	adds	r2, r1, #0
   1e04c:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1e04e:	230f      	movs	r3, #15
   1e050:	18fc      	adds	r4, r7, r3
   1e052:	1dfb      	adds	r3, r7, #7
   1e054:	781b      	ldrb	r3, [r3, #0]
   1e056:	0018      	movs	r0, r3
   1e058:	4b28      	ldr	r3, [pc, #160]	; (1e0fc <sd_mmc_init_write_blocks+0xc4>)
   1e05a:	4798      	blx	r3
   1e05c:	0003      	movs	r3, r0
   1e05e:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1e060:	230f      	movs	r3, #15
   1e062:	18fb      	adds	r3, r7, r3
   1e064:	781b      	ldrb	r3, [r3, #0]
   1e066:	2b00      	cmp	r3, #0
   1e068:	d003      	beq.n	1e072 <sd_mmc_init_write_blocks+0x3a>
		return sd_mmc_err;
   1e06a:	230f      	movs	r3, #15
   1e06c:	18fb      	adds	r3, r7, r3
   1e06e:	781b      	ldrb	r3, [r3, #0]
   1e070:	e03f      	b.n	1e0f2 <sd_mmc_init_write_blocks+0xba>
	}
	if (sd_mmc_is_write_protected(slot)) {
   1e072:	1dfb      	adds	r3, r7, #7
   1e074:	781b      	ldrb	r3, [r3, #0]
   1e076:	0018      	movs	r0, r3
   1e078:	4b21      	ldr	r3, [pc, #132]	; (1e100 <sd_mmc_init_write_blocks+0xc8>)
   1e07a:	4798      	blx	r3
   1e07c:	1e03      	subs	r3, r0, #0
   1e07e:	d003      	beq.n	1e088 <sd_mmc_init_write_blocks+0x50>
		sd_mmc_deselect_slot();
   1e080:	4b20      	ldr	r3, [pc, #128]	; (1e104 <sd_mmc_init_write_blocks+0xcc>)
   1e082:	4798      	blx	r3
		return SD_MMC_ERR_WP;
   1e084:	2307      	movs	r3, #7
   1e086:	e034      	b.n	1e0f2 <sd_mmc_init_write_blocks+0xba>
	}

	if (nb_block > 1) {
   1e088:	1d3b      	adds	r3, r7, #4
   1e08a:	881b      	ldrh	r3, [r3, #0]
   1e08c:	2b01      	cmp	r3, #1
   1e08e:	d902      	bls.n	1e096 <sd_mmc_init_write_blocks+0x5e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
   1e090:	4b1d      	ldr	r3, [pc, #116]	; (1e108 <sd_mmc_init_write_blocks+0xd0>)
   1e092:	617b      	str	r3, [r7, #20]
   1e094:	e001      	b.n	1e09a <sd_mmc_init_write_blocks+0x62>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
   1e096:	4b1d      	ldr	r3, [pc, #116]	; (1e10c <sd_mmc_init_write_blocks+0xd4>)
   1e098:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1e09a:	4b1d      	ldr	r3, [pc, #116]	; (1e110 <sd_mmc_init_write_blocks+0xd8>)
   1e09c:	681b      	ldr	r3, [r3, #0]
   1e09e:	7adb      	ldrb	r3, [r3, #11]
   1e0a0:	001a      	movs	r2, r3
   1e0a2:	2308      	movs	r3, #8
   1e0a4:	4013      	ands	r3, r2
   1e0a6:	d002      	beq.n	1e0ae <sd_mmc_init_write_blocks+0x76>
		arg = start;
   1e0a8:	683b      	ldr	r3, [r7, #0]
   1e0aa:	613b      	str	r3, [r7, #16]
   1e0ac:	e002      	b.n	1e0b4 <sd_mmc_init_write_blocks+0x7c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1e0ae:	683b      	ldr	r3, [r7, #0]
   1e0b0:	025b      	lsls	r3, r3, #9
   1e0b2:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1e0b4:	1d3b      	adds	r3, r7, #4
   1e0b6:	881c      	ldrh	r4, [r3, #0]
   1e0b8:	2380      	movs	r3, #128	; 0x80
   1e0ba:	009a      	lsls	r2, r3, #2
   1e0bc:	6939      	ldr	r1, [r7, #16]
   1e0be:	6978      	ldr	r0, [r7, #20]
   1e0c0:	2301      	movs	r3, #1
   1e0c2:	9300      	str	r3, [sp, #0]
   1e0c4:	0023      	movs	r3, r4
   1e0c6:	4c13      	ldr	r4, [pc, #76]	; (1e114 <sd_mmc_init_write_blocks+0xdc>)
   1e0c8:	47a0      	blx	r4
   1e0ca:	0003      	movs	r3, r0
   1e0cc:	001a      	movs	r2, r3
   1e0ce:	2301      	movs	r3, #1
   1e0d0:	4053      	eors	r3, r2
   1e0d2:	b2db      	uxtb	r3, r3
   1e0d4:	2b00      	cmp	r3, #0
   1e0d6:	d003      	beq.n	1e0e0 <sd_mmc_init_write_blocks+0xa8>
		sd_mmc_deselect_slot();
   1e0d8:	4b0a      	ldr	r3, [pc, #40]	; (1e104 <sd_mmc_init_write_blocks+0xcc>)
   1e0da:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1e0dc:	2305      	movs	r3, #5
   1e0de:	e008      	b.n	1e0f2 <sd_mmc_init_write_blocks+0xba>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1e0e0:	4b0d      	ldr	r3, [pc, #52]	; (1e118 <sd_mmc_init_write_blocks+0xe0>)
   1e0e2:	1d3a      	adds	r2, r7, #4
   1e0e4:	8812      	ldrh	r2, [r2, #0]
   1e0e6:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1e0e8:	4b0c      	ldr	r3, [pc, #48]	; (1e11c <sd_mmc_init_write_blocks+0xe4>)
   1e0ea:	1d3a      	adds	r2, r7, #4
   1e0ec:	8812      	ldrh	r2, [r2, #0]
   1e0ee:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1e0f0:	2300      	movs	r3, #0
}
   1e0f2:	0018      	movs	r0, r3
   1e0f4:	46bd      	mov	sp, r7
   1e0f6:	b007      	add	sp, #28
   1e0f8:	bd90      	pop	{r4, r7, pc}
   1e0fa:	46c0      	nop			; (mov r8, r8)
   1e0fc:	0001d93d 	.word	0x0001d93d
   1e100:	0001de45 	.word	0x0001de45
   1e104:	0001da39 	.word	0x0001da39
   1e108:	00109119 	.word	0x00109119
   1e10c:	00089118 	.word	0x00089118
   1e110:	20004210 	.word	0x20004210
   1e114:	0001ecb9 	.word	0x0001ecb9
   1e118:	20004216 	.word	0x20004216
   1e11c:	20004214 	.word	0x20004214

0001e120 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
   1e120:	b580      	push	{r7, lr}
   1e122:	b082      	sub	sp, #8
   1e124:	af00      	add	r7, sp, #0
   1e126:	6078      	str	r0, [r7, #4]
   1e128:	000a      	movs	r2, r1
   1e12a:	1cbb      	adds	r3, r7, #2
   1e12c:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
   1e12e:	1cbb      	adds	r3, r7, #2
   1e130:	881a      	ldrh	r2, [r3, #0]
   1e132:	687b      	ldr	r3, [r7, #4]
   1e134:	0011      	movs	r1, r2
   1e136:	0018      	movs	r0, r3
   1e138:	4b0d      	ldr	r3, [pc, #52]	; (1e170 <sd_mmc_start_write_blocks+0x50>)
   1e13a:	4798      	blx	r3
   1e13c:	0003      	movs	r3, r0
   1e13e:	001a      	movs	r2, r3
   1e140:	2301      	movs	r3, #1
   1e142:	4053      	eors	r3, r2
   1e144:	b2db      	uxtb	r3, r3
   1e146:	2b00      	cmp	r3, #0
   1e148:	d004      	beq.n	1e154 <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1e14a:	4b0a      	ldr	r3, [pc, #40]	; (1e174 <sd_mmc_start_write_blocks+0x54>)
   1e14c:	2200      	movs	r2, #0
   1e14e:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1e150:	2305      	movs	r3, #5
   1e152:	e008      	b.n	1e166 <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1e154:	4b07      	ldr	r3, [pc, #28]	; (1e174 <sd_mmc_start_write_blocks+0x54>)
   1e156:	881a      	ldrh	r2, [r3, #0]
   1e158:	1cbb      	adds	r3, r7, #2
   1e15a:	881b      	ldrh	r3, [r3, #0]
   1e15c:	1ad3      	subs	r3, r2, r3
   1e15e:	b29a      	uxth	r2, r3
   1e160:	4b04      	ldr	r3, [pc, #16]	; (1e174 <sd_mmc_start_write_blocks+0x54>)
   1e162:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1e164:	2300      	movs	r3, #0
}
   1e166:	0018      	movs	r0, r3
   1e168:	46bd      	mov	sp, r7
   1e16a:	b002      	add	sp, #8
   1e16c:	bd80      	pop	{r7, pc}
   1e16e:	46c0      	nop			; (mov r8, r8)
   1e170:	0001f039 	.word	0x0001f039
   1e174:	20004216 	.word	0x20004216

0001e178 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
   1e178:	b580      	push	{r7, lr}
   1e17a:	b082      	sub	sp, #8
   1e17c:	af00      	add	r7, sp, #0
   1e17e:	0002      	movs	r2, r0
   1e180:	1dfb      	adds	r3, r7, #7
   1e182:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
   1e184:	4b13      	ldr	r3, [pc, #76]	; (1e1d4 <sd_mmc_wait_end_of_write_blocks+0x5c>)
   1e186:	4798      	blx	r3
   1e188:	0003      	movs	r3, r0
   1e18a:	001a      	movs	r2, r3
   1e18c:	2301      	movs	r3, #1
   1e18e:	4053      	eors	r3, r2
   1e190:	b2db      	uxtb	r3, r3
   1e192:	2b00      	cmp	r3, #0
   1e194:	d001      	beq.n	1e19a <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1e196:	2305      	movs	r3, #5
   1e198:	e018      	b.n	1e1cc <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
   1e19a:	1dfb      	adds	r3, r7, #7
   1e19c:	781b      	ldrb	r3, [r3, #0]
   1e19e:	2b00      	cmp	r3, #0
   1e1a0:	d003      	beq.n	1e1aa <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1e1a2:	4b0d      	ldr	r3, [pc, #52]	; (1e1d8 <sd_mmc_wait_end_of_write_blocks+0x60>)
   1e1a4:	2200      	movs	r2, #0
   1e1a6:	801a      	strh	r2, [r3, #0]
   1e1a8:	e005      	b.n	1e1b6 <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1e1aa:	4b0b      	ldr	r3, [pc, #44]	; (1e1d8 <sd_mmc_wait_end_of_write_blocks+0x60>)
   1e1ac:	881b      	ldrh	r3, [r3, #0]
   1e1ae:	2b00      	cmp	r3, #0
   1e1b0:	d001      	beq.n	1e1b6 <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
   1e1b2:	2300      	movs	r3, #0
   1e1b4:	e00a      	b.n	1e1cc <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1e1b6:	4b09      	ldr	r3, [pc, #36]	; (1e1dc <sd_mmc_wait_end_of_write_blocks+0x64>)
   1e1b8:	881b      	ldrh	r3, [r3, #0]
   1e1ba:	2b01      	cmp	r3, #1
   1e1bc:	d103      	bne.n	1e1c6 <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1e1be:	4b08      	ldr	r3, [pc, #32]	; (1e1e0 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1e1c0:	4798      	blx	r3
		return SD_MMC_OK;
   1e1c2:	2300      	movs	r3, #0
   1e1c4:	e002      	b.n	1e1cc <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
   1e1c6:	4b06      	ldr	r3, [pc, #24]	; (1e1e0 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1e1c8:	4798      	blx	r3
	return SD_MMC_OK;
   1e1ca:	2300      	movs	r3, #0
}
   1e1cc:	0018      	movs	r0, r3
   1e1ce:	46bd      	mov	sp, r7
   1e1d0:	b002      	add	sp, #8
   1e1d2:	bd80      	pop	{r7, pc}
   1e1d4:	0001f0f9 	.word	0x0001f0f9
   1e1d8:	20004216 	.word	0x20004216
   1e1dc:	20004214 	.word	0x20004214
   1e1e0:	0001da39 	.word	0x0001da39

0001e1e4 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
   1e1e4:	b580      	push	{r7, lr}
   1e1e6:	b082      	sub	sp, #8
   1e1e8:	af00      	add	r7, sp, #0
   1e1ea:	0002      	movs	r2, r0
   1e1ec:	1dfb      	adds	r3, r7, #7
   1e1ee:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
   1e1f0:	1dfb      	adds	r3, r7, #7
   1e1f2:	781b      	ldrb	r3, [r3, #0]
   1e1f4:	0018      	movs	r0, r3
   1e1f6:	4b16      	ldr	r3, [pc, #88]	; (1e250 <sd_mmc_test_unit_ready+0x6c>)
   1e1f8:	4798      	blx	r3
   1e1fa:	0003      	movs	r3, r0
   1e1fc:	2b01      	cmp	r3, #1
   1e1fe:	d019      	beq.n	1e234 <sd_mmc_test_unit_ready+0x50>
   1e200:	2b02      	cmp	r3, #2
   1e202:	d019      	beq.n	1e238 <sd_mmc_test_unit_ready+0x54>
   1e204:	2b00      	cmp	r3, #0
   1e206:	d11e      	bne.n	1e246 <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
   1e208:	1dfb      	adds	r3, r7, #7
   1e20a:	781b      	ldrb	r3, [r3, #0]
   1e20c:	4a11      	ldr	r2, [pc, #68]	; (1e254 <sd_mmc_test_unit_ready+0x70>)
   1e20e:	5cd3      	ldrb	r3, [r2, r3]
   1e210:	2b00      	cmp	r3, #0
   1e212:	d001      	beq.n	1e218 <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
   1e214:	2302      	movs	r3, #2
   1e216:	e017      	b.n	1e248 <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   1e218:	1dfb      	adds	r3, r7, #7
   1e21a:	781b      	ldrb	r3, [r3, #0]
   1e21c:	0018      	movs	r0, r3
   1e21e:	4b0e      	ldr	r3, [pc, #56]	; (1e258 <sd_mmc_test_unit_ready+0x74>)
   1e220:	4798      	blx	r3
   1e222:	0003      	movs	r3, r0
   1e224:	001a      	movs	r2, r3
   1e226:	2303      	movs	r3, #3
   1e228:	4013      	ands	r3, r2
   1e22a:	d001      	beq.n	1e230 <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
   1e22c:	2300      	movs	r3, #0
   1e22e:	e00b      	b.n	1e248 <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
   1e230:	2302      	movs	r3, #2
   1e232:	e009      	b.n	1e248 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
   1e234:	2303      	movs	r3, #3
   1e236:	e007      	b.n	1e248 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
   1e238:	1dfb      	adds	r3, r7, #7
   1e23a:	781b      	ldrb	r3, [r3, #0]
   1e23c:	4a05      	ldr	r2, [pc, #20]	; (1e254 <sd_mmc_test_unit_ready+0x70>)
   1e23e:	2100      	movs	r1, #0
   1e240:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
   1e242:	2302      	movs	r3, #2
   1e244:	e000      	b.n	1e248 <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
   1e246:	2301      	movs	r3, #1
	}
}
   1e248:	0018      	movs	r0, r3
   1e24a:	46bd      	mov	sp, r7
   1e24c:	b002      	add	sp, #8
   1e24e:	bd80      	pop	{r7, pc}
   1e250:	0001dd59 	.word	0x0001dd59
   1e254:	20004218 	.word	0x20004218
   1e258:	0001ddcd 	.word	0x0001ddcd

0001e25c <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   1e25c:	b580      	push	{r7, lr}
   1e25e:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
   1e260:	2000      	movs	r0, #0
   1e262:	4b03      	ldr	r3, [pc, #12]	; (1e270 <sd_mmc_test_unit_ready_0+0x14>)
   1e264:	4798      	blx	r3
   1e266:	0003      	movs	r3, r0
}
   1e268:	0018      	movs	r0, r3
   1e26a:	46bd      	mov	sp, r7
   1e26c:	bd80      	pop	{r7, pc}
   1e26e:	46c0      	nop			; (mov r8, r8)
   1e270:	0001e1e5 	.word	0x0001e1e5

0001e274 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
   1e274:	b580      	push	{r7, lr}
   1e276:	b082      	sub	sp, #8
   1e278:	af00      	add	r7, sp, #0
   1e27a:	0002      	movs	r2, r0
   1e27c:	6039      	str	r1, [r7, #0]
   1e27e:	1dfb      	adds	r3, r7, #7
   1e280:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   1e282:	1dfb      	adds	r3, r7, #7
   1e284:	781b      	ldrb	r3, [r3, #0]
   1e286:	0018      	movs	r0, r3
   1e288:	4b08      	ldr	r3, [pc, #32]	; (1e2ac <sd_mmc_read_capacity+0x38>)
   1e28a:	4798      	blx	r3
   1e28c:	0003      	movs	r3, r0
   1e28e:	005b      	lsls	r3, r3, #1
   1e290:	1e5a      	subs	r2, r3, #1
   1e292:	683b      	ldr	r3, [r7, #0]
   1e294:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
   1e296:	1dfb      	adds	r3, r7, #7
   1e298:	781b      	ldrb	r3, [r3, #0]
   1e29a:	0018      	movs	r0, r3
   1e29c:	4b04      	ldr	r3, [pc, #16]	; (1e2b0 <sd_mmc_read_capacity+0x3c>)
   1e29e:	4798      	blx	r3
   1e2a0:	0003      	movs	r3, r0
}
   1e2a2:	0018      	movs	r0, r3
   1e2a4:	46bd      	mov	sp, r7
   1e2a6:	b002      	add	sp, #8
   1e2a8:	bd80      	pop	{r7, pc}
   1e2aa:	46c0      	nop			; (mov r8, r8)
   1e2ac:	0001de09 	.word	0x0001de09
   1e2b0:	0001e1e5 	.word	0x0001e1e5

0001e2b4 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   1e2b4:	b580      	push	{r7, lr}
   1e2b6:	b082      	sub	sp, #8
   1e2b8:	af00      	add	r7, sp, #0
   1e2ba:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
   1e2bc:	687b      	ldr	r3, [r7, #4]
   1e2be:	0019      	movs	r1, r3
   1e2c0:	2000      	movs	r0, #0
   1e2c2:	4b03      	ldr	r3, [pc, #12]	; (1e2d0 <sd_mmc_read_capacity_0+0x1c>)
   1e2c4:	4798      	blx	r3
   1e2c6:	0003      	movs	r3, r0
}
   1e2c8:	0018      	movs	r0, r3
   1e2ca:	46bd      	mov	sp, r7
   1e2cc:	b002      	add	sp, #8
   1e2ce:	bd80      	pop	{r7, pc}
   1e2d0:	0001e275 	.word	0x0001e275

0001e2d4 <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
   1e2d4:	b580      	push	{r7, lr}
   1e2d6:	b082      	sub	sp, #8
   1e2d8:	af00      	add	r7, sp, #0
   1e2da:	0002      	movs	r2, r0
   1e2dc:	1dfb      	adds	r3, r7, #7
   1e2de:	701a      	strb	r2, [r3, #0]
   1e2e0:	1dbb      	adds	r3, r7, #6
   1e2e2:	1c0a      	adds	r2, r1, #0
   1e2e4:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
   1e2e6:	1dfb      	adds	r3, r7, #7
   1e2e8:	781b      	ldrb	r3, [r3, #0]
   1e2ea:	4a04      	ldr	r2, [pc, #16]	; (1e2fc <sd_mmc_unload+0x28>)
   1e2ec:	1db9      	adds	r1, r7, #6
   1e2ee:	7809      	ldrb	r1, [r1, #0]
   1e2f0:	54d1      	strb	r1, [r2, r3]
	return true;
   1e2f2:	2301      	movs	r3, #1
}
   1e2f4:	0018      	movs	r0, r3
   1e2f6:	46bd      	mov	sp, r7
   1e2f8:	b002      	add	sp, #8
   1e2fa:	bd80      	pop	{r7, pc}
   1e2fc:	20004218 	.word	0x20004218

0001e300 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
   1e300:	b580      	push	{r7, lr}
   1e302:	b082      	sub	sp, #8
   1e304:	af00      	add	r7, sp, #0
   1e306:	0002      	movs	r2, r0
   1e308:	1dfb      	adds	r3, r7, #7
   1e30a:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
   1e30c:	1dfb      	adds	r3, r7, #7
   1e30e:	781b      	ldrb	r3, [r3, #0]
   1e310:	0019      	movs	r1, r3
   1e312:	2000      	movs	r0, #0
   1e314:	4b03      	ldr	r3, [pc, #12]	; (1e324 <sd_mmc_unload_0+0x24>)
   1e316:	4798      	blx	r3
   1e318:	0003      	movs	r3, r0
}
   1e31a:	0018      	movs	r0, r3
   1e31c:	46bd      	mov	sp, r7
   1e31e:	b002      	add	sp, #8
   1e320:	bd80      	pop	{r7, pc}
   1e322:	46c0      	nop			; (mov r8, r8)
   1e324:	0001e2d5 	.word	0x0001e2d5

0001e328 <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
   1e328:	b580      	push	{r7, lr}
   1e32a:	b082      	sub	sp, #8
   1e32c:	af00      	add	r7, sp, #0
   1e32e:	0002      	movs	r2, r0
   1e330:	1dfb      	adds	r3, r7, #7
   1e332:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
   1e334:	1dfb      	adds	r3, r7, #7
   1e336:	781b      	ldrb	r3, [r3, #0]
   1e338:	0018      	movs	r0, r3
   1e33a:	4b03      	ldr	r3, [pc, #12]	; (1e348 <sd_mmc_wr_protect+0x20>)
   1e33c:	4798      	blx	r3
   1e33e:	0003      	movs	r3, r0
}
   1e340:	0018      	movs	r0, r3
   1e342:	46bd      	mov	sp, r7
   1e344:	b002      	add	sp, #8
   1e346:	bd80      	pop	{r7, pc}
   1e348:	0001de45 	.word	0x0001de45

0001e34c <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
   1e34c:	b580      	push	{r7, lr}
   1e34e:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
   1e350:	2000      	movs	r0, #0
   1e352:	4b03      	ldr	r3, [pc, #12]	; (1e360 <sd_mmc_wr_protect_0+0x14>)
   1e354:	4798      	blx	r3
   1e356:	0003      	movs	r3, r0
}
   1e358:	0018      	movs	r0, r3
   1e35a:	46bd      	mov	sp, r7
   1e35c:	bd80      	pop	{r7, pc}
   1e35e:	46c0      	nop			; (mov r8, r8)
   1e360:	0001e329 	.word	0x0001e329

0001e364 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
   1e364:	b580      	push	{r7, lr}
   1e366:	b082      	sub	sp, #8
   1e368:	af00      	add	r7, sp, #0
   1e36a:	0002      	movs	r2, r0
   1e36c:	1dfb      	adds	r3, r7, #7
   1e36e:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
   1e370:	2301      	movs	r3, #1
}
   1e372:	0018      	movs	r0, r3
   1e374:	46bd      	mov	sp, r7
   1e376:	b002      	add	sp, #8
   1e378:	bd80      	pop	{r7, pc}
	...

0001e37c <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
   1e37c:	b580      	push	{r7, lr}
   1e37e:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
   1e380:	2000      	movs	r0, #0
   1e382:	4b03      	ldr	r3, [pc, #12]	; (1e390 <sd_mmc_removal_0+0x14>)
   1e384:	4798      	blx	r3
   1e386:	0003      	movs	r3, r0
}
   1e388:	0018      	movs	r0, r3
   1e38a:	46bd      	mov	sp, r7
   1e38c:	bd80      	pop	{r7, pc}
   1e38e:	46c0      	nop			; (mov r8, r8)
   1e390:	0001e365 	.word	0x0001e365

0001e394 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
   1e394:	b580      	push	{r7, lr}
   1e396:	b084      	sub	sp, #16
   1e398:	af00      	add	r7, sp, #0
   1e39a:	60b9      	str	r1, [r7, #8]
   1e39c:	607a      	str	r2, [r7, #4]
   1e39e:	230f      	movs	r3, #15
   1e3a0:	18fb      	adds	r3, r7, r3
   1e3a2:	1c02      	adds	r2, r0, #0
   1e3a4:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
   1e3a6:	68b9      	ldr	r1, [r7, #8]
   1e3a8:	230f      	movs	r3, #15
   1e3aa:	18fb      	adds	r3, r7, r3
   1e3ac:	781b      	ldrb	r3, [r3, #0]
   1e3ae:	2201      	movs	r2, #1
   1e3b0:	0018      	movs	r0, r3
   1e3b2:	4b10      	ldr	r3, [pc, #64]	; (1e3f4 <sd_mmc_mem_2_ram+0x60>)
   1e3b4:	4798      	blx	r3
   1e3b6:	1e03      	subs	r3, r0, #0
   1e3b8:	d005      	beq.n	1e3c6 <sd_mmc_mem_2_ram+0x32>
   1e3ba:	2b02      	cmp	r3, #2
   1e3bc:	d101      	bne.n	1e3c2 <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   1e3be:	2302      	movs	r3, #2
   1e3c0:	e013      	b.n	1e3ea <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
   1e3c2:	2301      	movs	r3, #1
   1e3c4:	e011      	b.n	1e3ea <sd_mmc_mem_2_ram+0x56>
		break;
   1e3c6:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   1e3c8:	687b      	ldr	r3, [r7, #4]
   1e3ca:	2101      	movs	r1, #1
   1e3cc:	0018      	movs	r0, r3
   1e3ce:	4b0a      	ldr	r3, [pc, #40]	; (1e3f8 <sd_mmc_mem_2_ram+0x64>)
   1e3d0:	4798      	blx	r3
   1e3d2:	1e03      	subs	r3, r0, #0
   1e3d4:	d001      	beq.n	1e3da <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
   1e3d6:	2301      	movs	r3, #1
   1e3d8:	e007      	b.n	1e3ea <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
   1e3da:	2000      	movs	r0, #0
   1e3dc:	4b07      	ldr	r3, [pc, #28]	; (1e3fc <sd_mmc_mem_2_ram+0x68>)
   1e3de:	4798      	blx	r3
   1e3e0:	1e03      	subs	r3, r0, #0
   1e3e2:	d001      	beq.n	1e3e8 <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
   1e3e4:	2301      	movs	r3, #1
   1e3e6:	e000      	b.n	1e3ea <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
   1e3e8:	2300      	movs	r3, #0
}
   1e3ea:	0018      	movs	r0, r3
   1e3ec:	46bd      	mov	sp, r7
   1e3ee:	b004      	add	sp, #16
   1e3f0:	bd80      	pop	{r7, pc}
   1e3f2:	46c0      	nop			; (mov r8, r8)
   1e3f4:	0001de5d 	.word	0x0001de5d
   1e3f8:	0001df49 	.word	0x0001df49
   1e3fc:	0001dfa1 	.word	0x0001dfa1

0001e400 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
   1e400:	b580      	push	{r7, lr}
   1e402:	b082      	sub	sp, #8
   1e404:	af00      	add	r7, sp, #0
   1e406:	6078      	str	r0, [r7, #4]
   1e408:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
   1e40a:	683a      	ldr	r2, [r7, #0]
   1e40c:	687b      	ldr	r3, [r7, #4]
   1e40e:	0019      	movs	r1, r3
   1e410:	2000      	movs	r0, #0
   1e412:	4b03      	ldr	r3, [pc, #12]	; (1e420 <sd_mmc_mem_2_ram_0+0x20>)
   1e414:	4798      	blx	r3
   1e416:	0003      	movs	r3, r0
}
   1e418:	0018      	movs	r0, r3
   1e41a:	46bd      	mov	sp, r7
   1e41c:	b002      	add	sp, #8
   1e41e:	bd80      	pop	{r7, pc}
   1e420:	0001e395 	.word	0x0001e395

0001e424 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
   1e424:	b580      	push	{r7, lr}
   1e426:	b084      	sub	sp, #16
   1e428:	af00      	add	r7, sp, #0
   1e42a:	60b9      	str	r1, [r7, #8]
   1e42c:	607a      	str	r2, [r7, #4]
   1e42e:	230f      	movs	r3, #15
   1e430:	18fb      	adds	r3, r7, r3
   1e432:	1c02      	adds	r2, r0, #0
   1e434:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
   1e436:	68b9      	ldr	r1, [r7, #8]
   1e438:	230f      	movs	r3, #15
   1e43a:	18fb      	adds	r3, r7, r3
   1e43c:	781b      	ldrb	r3, [r3, #0]
   1e43e:	2201      	movs	r2, #1
   1e440:	0018      	movs	r0, r3
   1e442:	4b10      	ldr	r3, [pc, #64]	; (1e484 <sd_mmc_ram_2_mem+0x60>)
   1e444:	4798      	blx	r3
   1e446:	1e03      	subs	r3, r0, #0
   1e448:	d005      	beq.n	1e456 <sd_mmc_ram_2_mem+0x32>
   1e44a:	2b02      	cmp	r3, #2
   1e44c:	d101      	bne.n	1e452 <sd_mmc_ram_2_mem+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   1e44e:	2302      	movs	r3, #2
   1e450:	e013      	b.n	1e47a <sd_mmc_ram_2_mem+0x56>
	default:
		return CTRL_FAIL;
   1e452:	2301      	movs	r3, #1
   1e454:	e011      	b.n	1e47a <sd_mmc_ram_2_mem+0x56>
		break;
   1e456:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   1e458:	687b      	ldr	r3, [r7, #4]
   1e45a:	2101      	movs	r1, #1
   1e45c:	0018      	movs	r0, r3
   1e45e:	4b0a      	ldr	r3, [pc, #40]	; (1e488 <sd_mmc_ram_2_mem+0x64>)
   1e460:	4798      	blx	r3
   1e462:	1e03      	subs	r3, r0, #0
   1e464:	d001      	beq.n	1e46a <sd_mmc_ram_2_mem+0x46>
		return CTRL_FAIL;
   1e466:	2301      	movs	r3, #1
   1e468:	e007      	b.n	1e47a <sd_mmc_ram_2_mem+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
   1e46a:	2000      	movs	r0, #0
   1e46c:	4b07      	ldr	r3, [pc, #28]	; (1e48c <sd_mmc_ram_2_mem+0x68>)
   1e46e:	4798      	blx	r3
   1e470:	1e03      	subs	r3, r0, #0
   1e472:	d001      	beq.n	1e478 <sd_mmc_ram_2_mem+0x54>
		return CTRL_FAIL;
   1e474:	2301      	movs	r3, #1
   1e476:	e000      	b.n	1e47a <sd_mmc_ram_2_mem+0x56>
	}
	return CTRL_GOOD;
   1e478:	2300      	movs	r3, #0
}
   1e47a:	0018      	movs	r0, r3
   1e47c:	46bd      	mov	sp, r7
   1e47e:	b004      	add	sp, #16
   1e480:	bd80      	pop	{r7, pc}
   1e482:	46c0      	nop			; (mov r8, r8)
   1e484:	0001e039 	.word	0x0001e039
   1e488:	0001e121 	.word	0x0001e121
   1e48c:	0001e179 	.word	0x0001e179

0001e490 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
   1e490:	b580      	push	{r7, lr}
   1e492:	b082      	sub	sp, #8
   1e494:	af00      	add	r7, sp, #0
   1e496:	6078      	str	r0, [r7, #4]
   1e498:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
   1e49a:	683a      	ldr	r2, [r7, #0]
   1e49c:	687b      	ldr	r3, [r7, #4]
   1e49e:	0019      	movs	r1, r3
   1e4a0:	2000      	movs	r0, #0
   1e4a2:	4b03      	ldr	r3, [pc, #12]	; (1e4b0 <sd_mmc_ram_2_mem_0+0x20>)
   1e4a4:	4798      	blx	r3
   1e4a6:	0003      	movs	r3, r0
}
   1e4a8:	0018      	movs	r0, r3
   1e4aa:	46bd      	mov	sp, r7
   1e4ac:	b002      	add	sp, #8
   1e4ae:	bd80      	pop	{r7, pc}
   1e4b0:	0001e425 	.word	0x0001e425

0001e4b4 <system_pinmux_get_group_from_gpio_pin>:
{
   1e4b4:	b580      	push	{r7, lr}
   1e4b6:	b084      	sub	sp, #16
   1e4b8:	af00      	add	r7, sp, #0
   1e4ba:	0002      	movs	r2, r0
   1e4bc:	1dfb      	adds	r3, r7, #7
   1e4be:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1e4c0:	230f      	movs	r3, #15
   1e4c2:	18fb      	adds	r3, r7, r3
   1e4c4:	1dfa      	adds	r2, r7, #7
   1e4c6:	7812      	ldrb	r2, [r2, #0]
   1e4c8:	09d2      	lsrs	r2, r2, #7
   1e4ca:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1e4cc:	230e      	movs	r3, #14
   1e4ce:	18fb      	adds	r3, r7, r3
   1e4d0:	1dfa      	adds	r2, r7, #7
   1e4d2:	7812      	ldrb	r2, [r2, #0]
   1e4d4:	0952      	lsrs	r2, r2, #5
   1e4d6:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1e4d8:	4b0d      	ldr	r3, [pc, #52]	; (1e510 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1e4da:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1e4dc:	230f      	movs	r3, #15
   1e4de:	18fb      	adds	r3, r7, r3
   1e4e0:	781b      	ldrb	r3, [r3, #0]
   1e4e2:	2b00      	cmp	r3, #0
   1e4e4:	d10f      	bne.n	1e506 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1e4e6:	230f      	movs	r3, #15
   1e4e8:	18fb      	adds	r3, r7, r3
   1e4ea:	781b      	ldrb	r3, [r3, #0]
   1e4ec:	009b      	lsls	r3, r3, #2
   1e4ee:	2210      	movs	r2, #16
   1e4f0:	4694      	mov	ip, r2
   1e4f2:	44bc      	add	ip, r7
   1e4f4:	4463      	add	r3, ip
   1e4f6:	3b08      	subs	r3, #8
   1e4f8:	681a      	ldr	r2, [r3, #0]
   1e4fa:	230e      	movs	r3, #14
   1e4fc:	18fb      	adds	r3, r7, r3
   1e4fe:	781b      	ldrb	r3, [r3, #0]
   1e500:	01db      	lsls	r3, r3, #7
   1e502:	18d3      	adds	r3, r2, r3
   1e504:	e000      	b.n	1e508 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1e506:	2300      	movs	r3, #0
}
   1e508:	0018      	movs	r0, r3
   1e50a:	46bd      	mov	sp, r7
   1e50c:	b004      	add	sp, #16
   1e50e:	bd80      	pop	{r7, pc}
   1e510:	41004400 	.word	0x41004400

0001e514 <system_interrupt_enable>:
{
   1e514:	b580      	push	{r7, lr}
   1e516:	b082      	sub	sp, #8
   1e518:	af00      	add	r7, sp, #0
   1e51a:	0002      	movs	r2, r0
   1e51c:	1dfb      	adds	r3, r7, #7
   1e51e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1e520:	4b06      	ldr	r3, [pc, #24]	; (1e53c <system_interrupt_enable+0x28>)
   1e522:	1dfa      	adds	r2, r7, #7
   1e524:	7812      	ldrb	r2, [r2, #0]
   1e526:	0011      	movs	r1, r2
   1e528:	221f      	movs	r2, #31
   1e52a:	400a      	ands	r2, r1
   1e52c:	2101      	movs	r1, #1
   1e52e:	4091      	lsls	r1, r2
   1e530:	000a      	movs	r2, r1
   1e532:	601a      	str	r2, [r3, #0]
}
   1e534:	46c0      	nop			; (mov r8, r8)
   1e536:	46bd      	mov	sp, r7
   1e538:	b002      	add	sp, #8
   1e53a:	bd80      	pop	{r7, pc}
   1e53c:	e000e100 	.word	0xe000e100

0001e540 <port_get_group_from_gpio_pin>:
{
   1e540:	b580      	push	{r7, lr}
   1e542:	b082      	sub	sp, #8
   1e544:	af00      	add	r7, sp, #0
   1e546:	0002      	movs	r2, r0
   1e548:	1dfb      	adds	r3, r7, #7
   1e54a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1e54c:	1dfb      	adds	r3, r7, #7
   1e54e:	781b      	ldrb	r3, [r3, #0]
   1e550:	0018      	movs	r0, r3
   1e552:	4b03      	ldr	r3, [pc, #12]	; (1e560 <port_get_group_from_gpio_pin+0x20>)
   1e554:	4798      	blx	r3
   1e556:	0003      	movs	r3, r0
}
   1e558:	0018      	movs	r0, r3
   1e55a:	46bd      	mov	sp, r7
   1e55c:	b002      	add	sp, #8
   1e55e:	bd80      	pop	{r7, pc}
   1e560:	0001e4b5 	.word	0x0001e4b5

0001e564 <port_get_config_defaults>:
{
   1e564:	b580      	push	{r7, lr}
   1e566:	b082      	sub	sp, #8
   1e568:	af00      	add	r7, sp, #0
   1e56a:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1e56c:	687b      	ldr	r3, [r7, #4]
   1e56e:	2200      	movs	r2, #0
   1e570:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1e572:	687b      	ldr	r3, [r7, #4]
   1e574:	2201      	movs	r2, #1
   1e576:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1e578:	687b      	ldr	r3, [r7, #4]
   1e57a:	2200      	movs	r2, #0
   1e57c:	709a      	strb	r2, [r3, #2]
}
   1e57e:	46c0      	nop			; (mov r8, r8)
   1e580:	46bd      	mov	sp, r7
   1e582:	b002      	add	sp, #8
   1e584:	bd80      	pop	{r7, pc}
	...

0001e588 <port_pin_set_output_level>:
{
   1e588:	b580      	push	{r7, lr}
   1e58a:	b084      	sub	sp, #16
   1e58c:	af00      	add	r7, sp, #0
   1e58e:	0002      	movs	r2, r0
   1e590:	1dfb      	adds	r3, r7, #7
   1e592:	701a      	strb	r2, [r3, #0]
   1e594:	1dbb      	adds	r3, r7, #6
   1e596:	1c0a      	adds	r2, r1, #0
   1e598:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1e59a:	1dfb      	adds	r3, r7, #7
   1e59c:	781b      	ldrb	r3, [r3, #0]
   1e59e:	0018      	movs	r0, r3
   1e5a0:	4b0d      	ldr	r3, [pc, #52]	; (1e5d8 <port_pin_set_output_level+0x50>)
   1e5a2:	4798      	blx	r3
   1e5a4:	0003      	movs	r3, r0
   1e5a6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1e5a8:	1dfb      	adds	r3, r7, #7
   1e5aa:	781b      	ldrb	r3, [r3, #0]
   1e5ac:	221f      	movs	r2, #31
   1e5ae:	4013      	ands	r3, r2
   1e5b0:	2201      	movs	r2, #1
   1e5b2:	409a      	lsls	r2, r3
   1e5b4:	0013      	movs	r3, r2
   1e5b6:	60bb      	str	r3, [r7, #8]
	if (level) {
   1e5b8:	1dbb      	adds	r3, r7, #6
   1e5ba:	781b      	ldrb	r3, [r3, #0]
   1e5bc:	2b00      	cmp	r3, #0
   1e5be:	d003      	beq.n	1e5c8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1e5c0:	68fb      	ldr	r3, [r7, #12]
   1e5c2:	68ba      	ldr	r2, [r7, #8]
   1e5c4:	619a      	str	r2, [r3, #24]
}
   1e5c6:	e002      	b.n	1e5ce <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1e5c8:	68fb      	ldr	r3, [r7, #12]
   1e5ca:	68ba      	ldr	r2, [r7, #8]
   1e5cc:	615a      	str	r2, [r3, #20]
}
   1e5ce:	46c0      	nop			; (mov r8, r8)
   1e5d0:	46bd      	mov	sp, r7
   1e5d2:	b004      	add	sp, #16
   1e5d4:	bd80      	pop	{r7, pc}
   1e5d6:	46c0      	nop			; (mov r8, r8)
   1e5d8:	0001e541 	.word	0x0001e541

0001e5dc <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
   1e5dc:	b580      	push	{r7, lr}
   1e5de:	b084      	sub	sp, #16
   1e5e0:	af00      	add	r7, sp, #0
   1e5e2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1e5e4:	687b      	ldr	r3, [r7, #4]
   1e5e6:	681b      	ldr	r3, [r3, #0]
   1e5e8:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
   1e5ea:	68fb      	ldr	r3, [r7, #12]
   1e5ec:	69db      	ldr	r3, [r3, #28]
   1e5ee:	1e5a      	subs	r2, r3, #1
   1e5f0:	4193      	sbcs	r3, r2
   1e5f2:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
   1e5f4:	0018      	movs	r0, r3
   1e5f6:	46bd      	mov	sp, r7
   1e5f8:	b004      	add	sp, #16
   1e5fa:	bd80      	pop	{r7, pc}

0001e5fc <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
   1e5fc:	b580      	push	{r7, lr}
   1e5fe:	b082      	sub	sp, #8
   1e600:	af00      	add	r7, sp, #0
   1e602:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
   1e604:	687b      	ldr	r3, [r7, #4]
   1e606:	2201      	movs	r2, #1
   1e608:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   1e60a:	687b      	ldr	r3, [r7, #4]
   1e60c:	2200      	movs	r2, #0
   1e60e:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   1e610:	687b      	ldr	r3, [r7, #4]
   1e612:	2200      	movs	r2, #0
   1e614:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   1e616:	687b      	ldr	r3, [r7, #4]
   1e618:	22c0      	movs	r2, #192	; 0xc0
   1e61a:	0392      	lsls	r2, r2, #14
   1e61c:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   1e61e:	687b      	ldr	r3, [r7, #4]
   1e620:	2200      	movs	r2, #0
   1e622:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   1e624:	687b      	ldr	r3, [r7, #4]
   1e626:	2200      	movs	r2, #0
   1e628:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   1e62a:	687b      	ldr	r3, [r7, #4]
   1e62c:	2201      	movs	r2, #1
   1e62e:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
   1e630:	687b      	ldr	r3, [r7, #4]
   1e632:	2201      	movs	r2, #1
   1e634:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
   1e636:	687b      	ldr	r3, [r7, #4]
   1e638:	2200      	movs	r2, #0
   1e63a:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
   1e63c:	687b      	ldr	r3, [r7, #4]
   1e63e:	2224      	movs	r2, #36	; 0x24
   1e640:	2100      	movs	r1, #0
   1e642:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   1e644:	687b      	ldr	r3, [r7, #4]
   1e646:	3318      	adds	r3, #24
   1e648:	220c      	movs	r2, #12
   1e64a:	2100      	movs	r1, #0
   1e64c:	0018      	movs	r0, r3
   1e64e:	4b0a      	ldr	r3, [pc, #40]	; (1e678 <spi_get_config_defaults+0x7c>)
   1e650:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
   1e652:	687b      	ldr	r3, [r7, #4]
   1e654:	4a09      	ldr	r2, [pc, #36]	; (1e67c <spi_get_config_defaults+0x80>)
   1e656:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
   1e658:	687b      	ldr	r3, [r7, #4]
   1e65a:	2200      	movs	r2, #0
   1e65c:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   1e65e:	687b      	ldr	r3, [r7, #4]
   1e660:	2200      	movs	r2, #0
   1e662:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   1e664:	687b      	ldr	r3, [r7, #4]
   1e666:	2200      	movs	r2, #0
   1e668:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   1e66a:	687b      	ldr	r3, [r7, #4]
   1e66c:	2200      	movs	r2, #0
   1e66e:	635a      	str	r2, [r3, #52]	; 0x34

};
   1e670:	46c0      	nop			; (mov r8, r8)
   1e672:	46bd      	mov	sp, r7
   1e674:	b002      	add	sp, #8
   1e676:	bd80      	pop	{r7, pc}
   1e678:	000345df 	.word	0x000345df
   1e67c:	000186a0 	.word	0x000186a0

0001e680 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
   1e680:	b580      	push	{r7, lr}
   1e682:	b082      	sub	sp, #8
   1e684:	af00      	add	r7, sp, #0
   1e686:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
   1e688:	687b      	ldr	r3, [r7, #4]
   1e68a:	220a      	movs	r2, #10
   1e68c:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   1e68e:	687b      	ldr	r3, [r7, #4]
   1e690:	2200      	movs	r2, #0
   1e692:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   1e694:	687b      	ldr	r3, [r7, #4]
   1e696:	2200      	movs	r2, #0
   1e698:	709a      	strb	r2, [r3, #2]
}
   1e69a:	46c0      	nop			; (mov r8, r8)
   1e69c:	46bd      	mov	sp, r7
   1e69e:	b002      	add	sp, #8
   1e6a0:	bd80      	pop	{r7, pc}
	...

0001e6a4 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
   1e6a4:	b580      	push	{r7, lr}
   1e6a6:	b084      	sub	sp, #16
   1e6a8:	af00      	add	r7, sp, #0
   1e6aa:	6078      	str	r0, [r7, #4]
   1e6ac:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
   1e6ae:	683b      	ldr	r3, [r7, #0]
   1e6b0:	781a      	ldrb	r2, [r3, #0]
   1e6b2:	687b      	ldr	r3, [r7, #4]
   1e6b4:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   1e6b6:	683b      	ldr	r3, [r7, #0]
   1e6b8:	785a      	ldrb	r2, [r3, #1]
   1e6ba:	687b      	ldr	r3, [r7, #4]
   1e6bc:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   1e6be:	683b      	ldr	r3, [r7, #0]
   1e6c0:	789a      	ldrb	r2, [r3, #2]
   1e6c2:	687b      	ldr	r3, [r7, #4]
   1e6c4:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   1e6c6:	230c      	movs	r3, #12
   1e6c8:	18fb      	adds	r3, r7, r3
   1e6ca:	0018      	movs	r0, r3
   1e6cc:	4b0b      	ldr	r3, [pc, #44]	; (1e6fc <spi_attach_slave+0x58>)
   1e6ce:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   1e6d0:	230c      	movs	r3, #12
   1e6d2:	18fb      	adds	r3, r7, r3
   1e6d4:	2201      	movs	r2, #1
   1e6d6:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1e6d8:	687b      	ldr	r3, [r7, #4]
   1e6da:	781b      	ldrb	r3, [r3, #0]
   1e6dc:	220c      	movs	r2, #12
   1e6de:	18ba      	adds	r2, r7, r2
   1e6e0:	0011      	movs	r1, r2
   1e6e2:	0018      	movs	r0, r3
   1e6e4:	4b06      	ldr	r3, [pc, #24]	; (1e700 <spi_attach_slave+0x5c>)
   1e6e6:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   1e6e8:	687b      	ldr	r3, [r7, #4]
   1e6ea:	781b      	ldrb	r3, [r3, #0]
   1e6ec:	2101      	movs	r1, #1
   1e6ee:	0018      	movs	r0, r3
   1e6f0:	4b04      	ldr	r3, [pc, #16]	; (1e704 <spi_attach_slave+0x60>)
   1e6f2:	4798      	blx	r3
}
   1e6f4:	46c0      	nop			; (mov r8, r8)
   1e6f6:	46bd      	mov	sp, r7
   1e6f8:	b004      	add	sp, #16
   1e6fa:	bd80      	pop	{r7, pc}
   1e6fc:	0001e565 	.word	0x0001e565
   1e700:	00025aad 	.word	0x00025aad
   1e704:	0001e589 	.word	0x0001e589

0001e708 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
   1e708:	b580      	push	{r7, lr}
   1e70a:	b084      	sub	sp, #16
   1e70c:	af00      	add	r7, sp, #0
   1e70e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1e710:	687b      	ldr	r3, [r7, #4]
   1e712:	681b      	ldr	r3, [r3, #0]
   1e714:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1e716:	687b      	ldr	r3, [r7, #4]
   1e718:	681b      	ldr	r3, [r3, #0]
   1e71a:	0018      	movs	r0, r3
   1e71c:	4b0b      	ldr	r3, [pc, #44]	; (1e74c <spi_enable+0x44>)
   1e71e:	4798      	blx	r3
   1e720:	0003      	movs	r3, r0
   1e722:	0018      	movs	r0, r3
   1e724:	4b0a      	ldr	r3, [pc, #40]	; (1e750 <spi_enable+0x48>)
   1e726:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   1e728:	46c0      	nop			; (mov r8, r8)
   1e72a:	687b      	ldr	r3, [r7, #4]
   1e72c:	0018      	movs	r0, r3
   1e72e:	4b09      	ldr	r3, [pc, #36]	; (1e754 <spi_enable+0x4c>)
   1e730:	4798      	blx	r3
   1e732:	1e03      	subs	r3, r0, #0
   1e734:	d1f9      	bne.n	1e72a <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   1e736:	68fb      	ldr	r3, [r7, #12]
   1e738:	681b      	ldr	r3, [r3, #0]
   1e73a:	2202      	movs	r2, #2
   1e73c:	431a      	orrs	r2, r3
   1e73e:	68fb      	ldr	r3, [r7, #12]
   1e740:	601a      	str	r2, [r3, #0]
}
   1e742:	46c0      	nop			; (mov r8, r8)
   1e744:	46bd      	mov	sp, r7
   1e746:	b004      	add	sp, #16
   1e748:	bd80      	pop	{r7, pc}
   1e74a:	46c0      	nop			; (mov r8, r8)
   1e74c:	0002677d 	.word	0x0002677d
   1e750:	0001e515 	.word	0x0001e515
   1e754:	0001e5dd 	.word	0x0001e5dd

0001e758 <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
   1e758:	b580      	push	{r7, lr}
   1e75a:	b084      	sub	sp, #16
   1e75c:	af00      	add	r7, sp, #0
   1e75e:	6078      	str	r0, [r7, #4]
   1e760:	000a      	movs	r2, r1
   1e762:	1cfb      	adds	r3, r7, #3
   1e764:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
   1e766:	230f      	movs	r3, #15
   1e768:	18fb      	adds	r3, r7, r3
   1e76a:	2200      	movs	r2, #0
   1e76c:	701a      	strb	r2, [r3, #0]
	while (size--) {
   1e76e:	e038      	b.n	1e7e2 <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
   1e770:	687b      	ldr	r3, [r7, #4]
   1e772:	1c5a      	adds	r2, r3, #1
   1e774:	607a      	str	r2, [r7, #4]
   1e776:	220e      	movs	r2, #14
   1e778:	18ba      	adds	r2, r7, r2
   1e77a:	781b      	ldrb	r3, [r3, #0]
   1e77c:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   1e77e:	230d      	movs	r3, #13
   1e780:	18fb      	adds	r3, r7, r3
   1e782:	2200      	movs	r2, #0
   1e784:	701a      	strb	r2, [r3, #0]
   1e786:	e027      	b.n	1e7d8 <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
   1e788:	230f      	movs	r3, #15
   1e78a:	18fa      	adds	r2, r7, r3
   1e78c:	230f      	movs	r3, #15
   1e78e:	18fb      	adds	r3, r7, r3
   1e790:	781b      	ldrb	r3, [r3, #0]
   1e792:	18db      	adds	r3, r3, r3
   1e794:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
   1e796:	230e      	movs	r3, #14
   1e798:	18fa      	adds	r2, r7, r3
   1e79a:	230f      	movs	r3, #15
   1e79c:	18fb      	adds	r3, r7, r3
   1e79e:	7812      	ldrb	r2, [r2, #0]
   1e7a0:	781b      	ldrb	r3, [r3, #0]
   1e7a2:	4053      	eors	r3, r2
   1e7a4:	b2db      	uxtb	r3, r3
   1e7a6:	b25b      	sxtb	r3, r3
   1e7a8:	2b00      	cmp	r3, #0
   1e7aa:	da07      	bge.n	1e7bc <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
   1e7ac:	230f      	movs	r3, #15
   1e7ae:	18fb      	adds	r3, r7, r3
   1e7b0:	220f      	movs	r2, #15
   1e7b2:	18ba      	adds	r2, r7, r2
   1e7b4:	7812      	ldrb	r2, [r2, #0]
   1e7b6:	2109      	movs	r1, #9
   1e7b8:	404a      	eors	r2, r1
   1e7ba:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
   1e7bc:	230e      	movs	r3, #14
   1e7be:	18fa      	adds	r2, r7, r3
   1e7c0:	230e      	movs	r3, #14
   1e7c2:	18fb      	adds	r3, r7, r3
   1e7c4:	781b      	ldrb	r3, [r3, #0]
   1e7c6:	18db      	adds	r3, r3, r3
   1e7c8:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   1e7ca:	230d      	movs	r3, #13
   1e7cc:	18fb      	adds	r3, r7, r3
   1e7ce:	781a      	ldrb	r2, [r3, #0]
   1e7d0:	230d      	movs	r3, #13
   1e7d2:	18fb      	adds	r3, r7, r3
   1e7d4:	3201      	adds	r2, #1
   1e7d6:	701a      	strb	r2, [r3, #0]
   1e7d8:	230d      	movs	r3, #13
   1e7da:	18fb      	adds	r3, r7, r3
   1e7dc:	781b      	ldrb	r3, [r3, #0]
   1e7de:	2b07      	cmp	r3, #7
   1e7e0:	d9d2      	bls.n	1e788 <sd_mmc_spi_crc7+0x30>
	while (size--) {
   1e7e2:	1cfb      	adds	r3, r7, #3
   1e7e4:	781b      	ldrb	r3, [r3, #0]
   1e7e6:	1cfa      	adds	r2, r7, #3
   1e7e8:	1e59      	subs	r1, r3, #1
   1e7ea:	7011      	strb	r1, [r2, #0]
   1e7ec:	2b00      	cmp	r3, #0
   1e7ee:	d1bf      	bne.n	1e770 <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
   1e7f0:	230f      	movs	r3, #15
   1e7f2:	18fb      	adds	r3, r7, r3
   1e7f4:	781b      	ldrb	r3, [r3, #0]
   1e7f6:	005b      	lsls	r3, r3, #1
   1e7f8:	b25b      	sxtb	r3, r3
   1e7fa:	2201      	movs	r2, #1
   1e7fc:	4313      	orrs	r3, r2
   1e7fe:	b25a      	sxtb	r2, r3
   1e800:	230f      	movs	r3, #15
   1e802:	18fb      	adds	r3, r7, r3
   1e804:	701a      	strb	r2, [r3, #0]
	return crc;
   1e806:	230f      	movs	r3, #15
   1e808:	18fb      	adds	r3, r7, r3
   1e80a:	781b      	ldrb	r3, [r3, #0]
}
   1e80c:	0018      	movs	r0, r3
   1e80e:	46bd      	mov	sp, r7
   1e810:	b004      	add	sp, #16
   1e812:	bd80      	pop	{r7, pc}

0001e814 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
   1e814:	b590      	push	{r4, r7, lr}
   1e816:	b083      	sub	sp, #12
   1e818:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
   1e81a:	1c7b      	adds	r3, r7, #1
   1e81c:	22ff      	movs	r2, #255	; 0xff
   1e81e:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
   1e820:	1cbb      	adds	r3, r7, #2
   1e822:	22ff      	movs	r2, #255	; 0xff
   1e824:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1e826:	1cbb      	adds	r3, r7, #2
   1e828:	881b      	ldrh	r3, [r3, #0]
   1e82a:	1c79      	adds	r1, r7, #1
   1e82c:	4811      	ldr	r0, [pc, #68]	; (1e874 <sd_mmc_spi_wait_busy+0x60>)
   1e82e:	2201      	movs	r2, #1
   1e830:	4c11      	ldr	r4, [pc, #68]	; (1e878 <sd_mmc_spi_wait_busy+0x64>)
   1e832:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
   1e834:	4b11      	ldr	r3, [pc, #68]	; (1e87c <sd_mmc_spi_wait_busy+0x68>)
   1e836:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1e838:	1cbb      	adds	r3, r7, #2
   1e83a:	881b      	ldrh	r3, [r3, #0]
   1e83c:	1c79      	adds	r1, r7, #1
   1e83e:	480d      	ldr	r0, [pc, #52]	; (1e874 <sd_mmc_spi_wait_busy+0x60>)
   1e840:	2201      	movs	r2, #1
   1e842:	4c0d      	ldr	r4, [pc, #52]	; (1e878 <sd_mmc_spi_wait_busy+0x64>)
   1e844:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1e846:	1cbb      	adds	r3, r7, #2
   1e848:	881b      	ldrh	r3, [r3, #0]
   1e84a:	1c79      	adds	r1, r7, #1
   1e84c:	4809      	ldr	r0, [pc, #36]	; (1e874 <sd_mmc_spi_wait_busy+0x60>)
   1e84e:	2201      	movs	r2, #1
   1e850:	4c09      	ldr	r4, [pc, #36]	; (1e878 <sd_mmc_spi_wait_busy+0x64>)
   1e852:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
   1e854:	687b      	ldr	r3, [r7, #4]
   1e856:	1e5a      	subs	r2, r3, #1
   1e858:	607a      	str	r2, [r7, #4]
   1e85a:	2b00      	cmp	r3, #0
   1e85c:	d101      	bne.n	1e862 <sd_mmc_spi_wait_busy+0x4e>
			return false;
   1e85e:	2300      	movs	r3, #0
   1e860:	e004      	b.n	1e86c <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
   1e862:	1c7b      	adds	r3, r7, #1
   1e864:	781b      	ldrb	r3, [r3, #0]
   1e866:	2bff      	cmp	r3, #255	; 0xff
   1e868:	d1ed      	bne.n	1e846 <sd_mmc_spi_wait_busy+0x32>
	return true;
   1e86a:	2301      	movs	r3, #1
}
   1e86c:	0018      	movs	r0, r3
   1e86e:	46bd      	mov	sp, r7
   1e870:	b003      	add	sp, #12
   1e872:	bd90      	pop	{r4, r7, pc}
   1e874:	2000421c 	.word	0x2000421c
   1e878:	000270bd 	.word	0x000270bd
   1e87c:	00030d40 	.word	0x00030d40

0001e880 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
   1e880:	b590      	push	{r4, r7, lr}
   1e882:	b083      	sub	sp, #12
   1e884:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
   1e886:	1cbb      	adds	r3, r7, #2
   1e888:	22ff      	movs	r2, #255	; 0xff
   1e88a:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
   1e88c:	1c7b      	adds	r3, r7, #1
   1e88e:	2200      	movs	r2, #0
   1e890:	701a      	strb	r2, [r3, #0]
	i = 500000;
   1e892:	4b18      	ldr	r3, [pc, #96]	; (1e8f4 <sd_mmc_spi_start_read_block+0x74>)
   1e894:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
   1e896:	687b      	ldr	r3, [r7, #4]
   1e898:	1e5a      	subs	r2, r3, #1
   1e89a:	607a      	str	r2, [r7, #4]
   1e89c:	2b00      	cmp	r3, #0
   1e89e:	d104      	bne.n	1e8aa <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
   1e8a0:	4b15      	ldr	r3, [pc, #84]	; (1e8f8 <sd_mmc_spi_start_read_block+0x78>)
   1e8a2:	2204      	movs	r2, #4
   1e8a4:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
   1e8a6:	2300      	movs	r3, #0
   1e8a8:	e020      	b.n	1e8ec <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
   1e8aa:	1cbb      	adds	r3, r7, #2
   1e8ac:	881b      	ldrh	r3, [r3, #0]
   1e8ae:	1c79      	adds	r1, r7, #1
   1e8b0:	4812      	ldr	r0, [pc, #72]	; (1e8fc <sd_mmc_spi_start_read_block+0x7c>)
   1e8b2:	2201      	movs	r2, #1
   1e8b4:	4c12      	ldr	r4, [pc, #72]	; (1e900 <sd_mmc_spi_start_read_block+0x80>)
   1e8b6:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
   1e8b8:	1c7b      	adds	r3, r7, #1
   1e8ba:	781b      	ldrb	r3, [r3, #0]
   1e8bc:	001a      	movs	r2, r3
   1e8be:	23f0      	movs	r3, #240	; 0xf0
   1e8c0:	4013      	ands	r3, r2
   1e8c2:	d10e      	bne.n	1e8e2 <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
   1e8c4:	1c7b      	adds	r3, r7, #1
   1e8c6:	781b      	ldrb	r3, [r3, #0]
   1e8c8:	001a      	movs	r2, r3
   1e8ca:	2307      	movs	r3, #7
   1e8cc:	4013      	ands	r3, r2
   1e8ce:	d003      	beq.n	1e8d8 <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
   1e8d0:	4b09      	ldr	r3, [pc, #36]	; (1e8f8 <sd_mmc_spi_start_read_block+0x78>)
   1e8d2:	2207      	movs	r2, #7
   1e8d4:	701a      	strb	r2, [r3, #0]
   1e8d6:	e002      	b.n	1e8de <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
   1e8d8:	4b07      	ldr	r3, [pc, #28]	; (1e8f8 <sd_mmc_spi_start_read_block+0x78>)
   1e8da:	220b      	movs	r2, #11
   1e8dc:	701a      	strb	r2, [r3, #0]
			}
			return false;
   1e8de:	2300      	movs	r3, #0
   1e8e0:	e004      	b.n	1e8ec <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
   1e8e2:	1c7b      	adds	r3, r7, #1
   1e8e4:	781b      	ldrb	r3, [r3, #0]
   1e8e6:	2bfe      	cmp	r3, #254	; 0xfe
   1e8e8:	d1d5      	bne.n	1e896 <sd_mmc_spi_start_read_block+0x16>

	return true;
   1e8ea:	2301      	movs	r3, #1
}
   1e8ec:	0018      	movs	r0, r3
   1e8ee:	46bd      	mov	sp, r7
   1e8f0:	b003      	add	sp, #12
   1e8f2:	bd90      	pop	{r4, r7, pc}
   1e8f4:	0007a120 	.word	0x0007a120
   1e8f8:	2000425f 	.word	0x2000425f
   1e8fc:	2000421c 	.word	0x2000421c
   1e900:	000270bd 	.word	0x000270bd

0001e904 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
   1e904:	b590      	push	{r4, r7, lr}
   1e906:	b083      	sub	sp, #12
   1e908:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
   1e90a:	1dbb      	adds	r3, r7, #6
   1e90c:	22ff      	movs	r2, #255	; 0xff
   1e90e:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
   1e910:	1dbb      	adds	r3, r7, #6
   1e912:	881b      	ldrh	r3, [r3, #0]
   1e914:	1d39      	adds	r1, r7, #4
   1e916:	4804      	ldr	r0, [pc, #16]	; (1e928 <sd_mmc_spi_stop_read_block+0x24>)
   1e918:	2202      	movs	r2, #2
   1e91a:	4c04      	ldr	r4, [pc, #16]	; (1e92c <sd_mmc_spi_stop_read_block+0x28>)
   1e91c:	47a0      	blx	r4
			dummy);
}
   1e91e:	46c0      	nop			; (mov r8, r8)
   1e920:	46bd      	mov	sp, r7
   1e922:	b003      	add	sp, #12
   1e924:	bd90      	pop	{r4, r7, pc}
   1e926:	46c0      	nop			; (mov r8, r8)
   1e928:	2000421c 	.word	0x2000421c
   1e92c:	000270bd 	.word	0x000270bd

0001e930 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
   1e930:	b580      	push	{r7, lr}
   1e932:	b082      	sub	sp, #8
   1e934:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
   1e936:	1dfb      	adds	r3, r7, #7
   1e938:	22ff      	movs	r2, #255	; 0xff
   1e93a:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
   1e93c:	1df9      	adds	r1, r7, #7
   1e93e:	4b0d      	ldr	r3, [pc, #52]	; (1e974 <sd_mmc_spi_start_write_block+0x44>)
   1e940:	2201      	movs	r2, #1
   1e942:	0018      	movs	r0, r3
   1e944:	4b0c      	ldr	r3, [pc, #48]	; (1e978 <sd_mmc_spi_start_write_block+0x48>)
   1e946:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
   1e948:	4b0c      	ldr	r3, [pc, #48]	; (1e97c <sd_mmc_spi_start_write_block+0x4c>)
   1e94a:	881b      	ldrh	r3, [r3, #0]
   1e94c:	2b01      	cmp	r3, #1
   1e94e:	d103      	bne.n	1e958 <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
   1e950:	1dbb      	adds	r3, r7, #6
   1e952:	22fe      	movs	r2, #254	; 0xfe
   1e954:	701a      	strb	r2, [r3, #0]
   1e956:	e002      	b.n	1e95e <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
   1e958:	1dbb      	adds	r3, r7, #6
   1e95a:	22fc      	movs	r2, #252	; 0xfc
   1e95c:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
   1e95e:	1db9      	adds	r1, r7, #6
   1e960:	4b04      	ldr	r3, [pc, #16]	; (1e974 <sd_mmc_spi_start_write_block+0x44>)
   1e962:	2201      	movs	r2, #1
   1e964:	0018      	movs	r0, r3
   1e966:	4b04      	ldr	r3, [pc, #16]	; (1e978 <sd_mmc_spi_start_write_block+0x48>)
   1e968:	4798      	blx	r3
}
   1e96a:	46c0      	nop			; (mov r8, r8)
   1e96c:	46bd      	mov	sp, r7
   1e96e:	b002      	add	sp, #8
   1e970:	bd80      	pop	{r7, pc}
   1e972:	46c0      	nop			; (mov r8, r8)
   1e974:	2000421c 	.word	0x2000421c
   1e978:	000272e1 	.word	0x000272e1
   1e97c:	2000426a 	.word	0x2000426a

0001e980 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
   1e980:	b590      	push	{r4, r7, lr}
   1e982:	b083      	sub	sp, #12
   1e984:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
   1e986:	1dbb      	adds	r3, r7, #6
   1e988:	22ff      	movs	r2, #255	; 0xff
   1e98a:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
   1e98c:	1cbb      	adds	r3, r7, #2
   1e98e:	2201      	movs	r2, #1
   1e990:	4252      	negs	r2, r2
   1e992:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
   1e994:	1cb9      	adds	r1, r7, #2
   1e996:	4b1b      	ldr	r3, [pc, #108]	; (1ea04 <sd_mmc_spi_stop_write_block+0x84>)
   1e998:	2202      	movs	r2, #2
   1e99a:	0018      	movs	r0, r3
   1e99c:	4b1a      	ldr	r3, [pc, #104]	; (1ea08 <sd_mmc_spi_stop_write_block+0x88>)
   1e99e:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
   1e9a0:	1dbb      	adds	r3, r7, #6
   1e9a2:	881b      	ldrh	r3, [r3, #0]
   1e9a4:	1d79      	adds	r1, r7, #5
   1e9a6:	4817      	ldr	r0, [pc, #92]	; (1ea04 <sd_mmc_spi_stop_write_block+0x84>)
   1e9a8:	2201      	movs	r2, #1
   1e9aa:	4c18      	ldr	r4, [pc, #96]	; (1ea0c <sd_mmc_spi_stop_write_block+0x8c>)
   1e9ac:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
   1e9ae:	1d7b      	adds	r3, r7, #5
   1e9b0:	781b      	ldrb	r3, [r3, #0]
   1e9b2:	001a      	movs	r2, r3
   1e9b4:	2310      	movs	r3, #16
   1e9b6:	4013      	ands	r3, r2
   1e9b8:	d105      	bne.n	1e9c6 <sd_mmc_spi_stop_write_block+0x46>
   1e9ba:	1d7b      	adds	r3, r7, #5
   1e9bc:	781b      	ldrb	r3, [r3, #0]
   1e9be:	001a      	movs	r2, r3
   1e9c0:	2301      	movs	r3, #1
   1e9c2:	4013      	ands	r3, r2
   1e9c4:	d104      	bne.n	1e9d0 <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   1e9c6:	4b12      	ldr	r3, [pc, #72]	; (1ea10 <sd_mmc_spi_stop_write_block+0x90>)
   1e9c8:	2201      	movs	r2, #1
   1e9ca:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
   1e9cc:	2300      	movs	r3, #0
   1e9ce:	e014      	b.n	1e9fa <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
   1e9d0:	1d7b      	adds	r3, r7, #5
   1e9d2:	781b      	ldrb	r3, [r3, #0]
   1e9d4:	001a      	movs	r2, r3
   1e9d6:	231e      	movs	r3, #30
   1e9d8:	4013      	ands	r3, r2
   1e9da:	2b04      	cmp	r3, #4
   1e9dc:	d00b      	beq.n	1e9f6 <sd_mmc_spi_stop_write_block+0x76>
   1e9de:	2b0a      	cmp	r3, #10
   1e9e0:	d104      	bne.n	1e9ec <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
   1e9e2:	4b0b      	ldr	r3, [pc, #44]	; (1ea10 <sd_mmc_spi_stop_write_block+0x90>)
   1e9e4:	2208      	movs	r2, #8
   1e9e6:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
   1e9e8:	2300      	movs	r3, #0
   1e9ea:	e006      	b.n	1e9fa <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
   1e9ec:	4b08      	ldr	r3, [pc, #32]	; (1ea10 <sd_mmc_spi_stop_write_block+0x90>)
   1e9ee:	220a      	movs	r2, #10
   1e9f0:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
   1e9f2:	2300      	movs	r3, #0
   1e9f4:	e001      	b.n	1e9fa <sd_mmc_spi_stop_write_block+0x7a>
		break;
   1e9f6:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   1e9f8:	2301      	movs	r3, #1
}
   1e9fa:	0018      	movs	r0, r3
   1e9fc:	46bd      	mov	sp, r7
   1e9fe:	b003      	add	sp, #12
   1ea00:	bd90      	pop	{r4, r7, pc}
   1ea02:	46c0      	nop			; (mov r8, r8)
   1ea04:	2000421c 	.word	0x2000421c
   1ea08:	000272e1 	.word	0x000272e1
   1ea0c:	000270bd 	.word	0x000270bd
   1ea10:	2000425f 	.word	0x2000425f

0001ea14 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
   1ea14:	b590      	push	{r4, r7, lr}
   1ea16:	b083      	sub	sp, #12
   1ea18:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
   1ea1a:	4b1d      	ldr	r3, [pc, #116]	; (1ea90 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   1ea1c:	881b      	ldrh	r3, [r3, #0]
   1ea1e:	2b01      	cmp	r3, #1
   1ea20:	d101      	bne.n	1ea26 <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
   1ea22:	2301      	movs	r3, #1
   1ea24:	e030      	b.n	1ea88 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
   1ea26:	4b1a      	ldr	r3, [pc, #104]	; (1ea90 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   1ea28:	881b      	ldrh	r3, [r3, #0]
   1ea2a:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
   1ea2c:	4b19      	ldr	r3, [pc, #100]	; (1ea94 <sd_mmc_spi_stop_multiwrite_block+0x80>)
   1ea2e:	681a      	ldr	r2, [r3, #0]
   1ea30:	4b19      	ldr	r3, [pc, #100]	; (1ea98 <sd_mmc_spi_stop_multiwrite_block+0x84>)
   1ea32:	881b      	ldrh	r3, [r3, #0]
   1ea34:	0019      	movs	r1, r3
   1ea36:	4b19      	ldr	r3, [pc, #100]	; (1ea9c <sd_mmc_spi_stop_multiwrite_block+0x88>)
   1ea38:	0010      	movs	r0, r2
   1ea3a:	4798      	blx	r3
   1ea3c:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
   1ea3e:	429c      	cmp	r4, r3
   1ea40:	d901      	bls.n	1ea46 <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
   1ea42:	2301      	movs	r3, #1
   1ea44:	e020      	b.n	1ea88 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
   1ea46:	1dfb      	adds	r3, r7, #7
   1ea48:	22ff      	movs	r2, #255	; 0xff
   1ea4a:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   1ea4c:	1df9      	adds	r1, r7, #7
   1ea4e:	4b14      	ldr	r3, [pc, #80]	; (1eaa0 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   1ea50:	2201      	movs	r2, #1
   1ea52:	0018      	movs	r0, r3
   1ea54:	4b13      	ldr	r3, [pc, #76]	; (1eaa4 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   1ea56:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
   1ea58:	1dfb      	adds	r3, r7, #7
   1ea5a:	22fd      	movs	r2, #253	; 0xfd
   1ea5c:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   1ea5e:	1df9      	adds	r1, r7, #7
   1ea60:	4b0f      	ldr	r3, [pc, #60]	; (1eaa0 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   1ea62:	2201      	movs	r2, #1
   1ea64:	0018      	movs	r0, r3
   1ea66:	4b0f      	ldr	r3, [pc, #60]	; (1eaa4 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   1ea68:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
   1ea6a:	4b0f      	ldr	r3, [pc, #60]	; (1eaa8 <sd_mmc_spi_stop_multiwrite_block+0x94>)
   1ea6c:	4798      	blx	r3
   1ea6e:	0003      	movs	r3, r0
   1ea70:	001a      	movs	r2, r3
   1ea72:	2301      	movs	r3, #1
   1ea74:	4053      	eors	r3, r2
   1ea76:	b2db      	uxtb	r3, r3
   1ea78:	2b00      	cmp	r3, #0
   1ea7a:	d004      	beq.n	1ea86 <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1ea7c:	4b0b      	ldr	r3, [pc, #44]	; (1eaac <sd_mmc_spi_stop_multiwrite_block+0x98>)
   1ea7e:	2205      	movs	r2, #5
   1ea80:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
   1ea82:	2300      	movs	r3, #0
   1ea84:	e000      	b.n	1ea88 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
   1ea86:	2301      	movs	r3, #1
}
   1ea88:	0018      	movs	r0, r3
   1ea8a:	46bd      	mov	sp, r7
   1ea8c:	b003      	add	sp, #12
   1ea8e:	bd90      	pop	{r4, r7, pc}
   1ea90:	2000426a 	.word	0x2000426a
   1ea94:	20004264 	.word	0x20004264
   1ea98:	20004268 	.word	0x20004268
   1ea9c:	00031b25 	.word	0x00031b25
   1eaa0:	2000421c 	.word	0x2000421c
   1eaa4:	000272e1 	.word	0x000272e1
   1eaa8:	0001e815 	.word	0x0001e815
   1eaac:	2000425f 	.word	0x2000425f

0001eab0 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
   1eab0:	b580      	push	{r7, lr}
   1eab2:	b090      	sub	sp, #64	; 0x40
   1eab4:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1eab6:	4b1f      	ldr	r3, [pc, #124]	; (1eb34 <sd_mmc_spi_init+0x84>)
   1eab8:	2200      	movs	r2, #0
   1eaba:	701a      	strb	r2, [r3, #0]

	// Initialize card detect pin
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   1eabc:	233c      	movs	r3, #60	; 0x3c
   1eabe:	18fb      	adds	r3, r7, r3
   1eac0:	0018      	movs	r0, r3
   1eac2:	4b1d      	ldr	r3, [pc, #116]	; (1eb38 <sd_mmc_spi_init+0x88>)
   1eac4:	4798      	blx	r3
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
	#endif

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
   1eac6:	1d3b      	adds	r3, r7, #4
   1eac8:	0018      	movs	r0, r3
   1eaca:	4b1c      	ldr	r3, [pc, #112]	; (1eb3c <sd_mmc_spi_init+0x8c>)
   1eacc:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
   1eace:	1d3b      	adds	r3, r7, #4
   1ead0:	2280      	movs	r2, #128	; 0x80
   1ead2:	0252      	lsls	r2, r2, #9
   1ead4:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
   1ead6:	1d3b      	adds	r3, r7, #4
   1ead8:	4a19      	ldr	r2, [pc, #100]	; (1eb40 <sd_mmc_spi_init+0x90>)
   1eada:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
   1eadc:	1d3b      	adds	r3, r7, #4
   1eade:	4a19      	ldr	r2, [pc, #100]	; (1eb44 <sd_mmc_spi_init+0x94>)
   1eae0:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
   1eae2:	1d3b      	adds	r3, r7, #4
   1eae4:	4a18      	ldr	r2, [pc, #96]	; (1eb48 <sd_mmc_spi_init+0x98>)
   1eae6:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
   1eae8:	1d3b      	adds	r3, r7, #4
   1eaea:	4a18      	ldr	r2, [pc, #96]	; (1eb4c <sd_mmc_spi_init+0x9c>)
   1eaec:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
   1eaee:	1d3b      	adds	r3, r7, #4
   1eaf0:	2224      	movs	r2, #36	; 0x24
   1eaf2:	2100      	movs	r1, #0
   1eaf4:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
   1eaf6:	1d3b      	adds	r3, r7, #4
   1eaf8:	4a15      	ldr	r2, [pc, #84]	; (1eb50 <sd_mmc_spi_init+0xa0>)
   1eafa:	619a      	str	r2, [r3, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
   1eafc:	1d3a      	adds	r2, r7, #4
   1eafe:	4915      	ldr	r1, [pc, #84]	; (1eb54 <sd_mmc_spi_init+0xa4>)
   1eb00:	4b15      	ldr	r3, [pc, #84]	; (1eb58 <sd_mmc_spi_init+0xa8>)
   1eb02:	0018      	movs	r0, r3
   1eb04:	4b15      	ldr	r3, [pc, #84]	; (1eb5c <sd_mmc_spi_init+0xac>)
   1eb06:	4798      	blx	r3
	spi_enable(&sd_mmc_master);
   1eb08:	4b13      	ldr	r3, [pc, #76]	; (1eb58 <sd_mmc_spi_init+0xa8>)
   1eb0a:	0018      	movs	r0, r3
   1eb0c:	4b14      	ldr	r3, [pc, #80]	; (1eb60 <sd_mmc_spi_init+0xb0>)
   1eb0e:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
   1eb10:	4b14      	ldr	r3, [pc, #80]	; (1eb64 <sd_mmc_spi_init+0xb4>)
   1eb12:	0018      	movs	r0, r3
   1eb14:	4b14      	ldr	r3, [pc, #80]	; (1eb68 <sd_mmc_spi_init+0xb8>)
   1eb16:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
   1eb18:	4b14      	ldr	r3, [pc, #80]	; (1eb6c <sd_mmc_spi_init+0xbc>)
   1eb1a:	781a      	ldrb	r2, [r3, #0]
   1eb1c:	4b11      	ldr	r3, [pc, #68]	; (1eb64 <sd_mmc_spi_init+0xb4>)
   1eb1e:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
   1eb20:	4a10      	ldr	r2, [pc, #64]	; (1eb64 <sd_mmc_spi_init+0xb4>)
   1eb22:	4b13      	ldr	r3, [pc, #76]	; (1eb70 <sd_mmc_spi_init+0xc0>)
   1eb24:	0011      	movs	r1, r2
   1eb26:	0018      	movs	r0, r3
   1eb28:	4b12      	ldr	r3, [pc, #72]	; (1eb74 <sd_mmc_spi_init+0xc4>)
   1eb2a:	4798      	blx	r3
}
   1eb2c:	46c0      	nop			; (mov r8, r8)
   1eb2e:	46bd      	mov	sp, r7
   1eb30:	b010      	add	sp, #64	; 0x40
   1eb32:	bd80      	pop	{r7, pc}
   1eb34:	2000425f 	.word	0x2000425f
   1eb38:	0001e565 	.word	0x0001e565
   1eb3c:	0001e5fd 	.word	0x0001e5fd
   1eb40:	00100002 	.word	0x00100002
   1eb44:	00110002 	.word	0x00110002
   1eb48:	00120002 	.word	0x00120002
   1eb4c:	00130002 	.word	0x00130002
   1eb50:	00061a80 	.word	0x00061a80
   1eb54:	42000c00 	.word	0x42000c00
   1eb58:	2000421c 	.word	0x2000421c
   1eb5c:	00026f2d 	.word	0x00026f2d
   1eb60:	0001e709 	.word	0x0001e709
   1eb64:	2000425c 	.word	0x2000425c
   1eb68:	0001e681 	.word	0x0001e681
   1eb6c:	20000108 	.word	0x20000108
   1eb70:	20004258 	.word	0x20004258
   1eb74:	0001e6a5 	.word	0x0001e6a5

0001eb78 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
   1eb78:	b590      	push	{r4, r7, lr}
   1eb7a:	b083      	sub	sp, #12
   1eb7c:	af00      	add	r7, sp, #0
   1eb7e:	0004      	movs	r4, r0
   1eb80:	6039      	str	r1, [r7, #0]
   1eb82:	0010      	movs	r0, r2
   1eb84:	0019      	movs	r1, r3
   1eb86:	1dfb      	adds	r3, r7, #7
   1eb88:	1c22      	adds	r2, r4, #0
   1eb8a:	701a      	strb	r2, [r3, #0]
   1eb8c:	1dbb      	adds	r3, r7, #6
   1eb8e:	1c02      	adds	r2, r0, #0
   1eb90:	701a      	strb	r2, [r3, #0]
   1eb92:	1d7b      	adds	r3, r7, #5
   1eb94:	1c0a      	adds	r2, r1, #0
   1eb96:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1eb98:	4b13      	ldr	r3, [pc, #76]	; (1ebe8 <sd_mmc_spi_select_device+0x70>)
   1eb9a:	2200      	movs	r2, #0
   1eb9c:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
   1eb9e:	683b      	ldr	r3, [r7, #0]
   1eba0:	4a12      	ldr	r2, [pc, #72]	; (1ebec <sd_mmc_spi_select_device+0x74>)
   1eba2:	4293      	cmp	r3, r2
   1eba4:	d907      	bls.n	1ebb6 <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
   1eba6:	4b11      	ldr	r3, [pc, #68]	; (1ebec <sd_mmc_spi_select_device+0x74>)
   1eba8:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   1ebaa:	e004      	b.n	1ebb6 <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
   1ebac:	683b      	ldr	r3, [r7, #0]
   1ebae:	08db      	lsrs	r3, r3, #3
   1ebb0:	683a      	ldr	r2, [r7, #0]
   1ebb2:	1ad3      	subs	r3, r2, r3
   1ebb4:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   1ebb6:	683a      	ldr	r2, [r7, #0]
   1ebb8:	4b0d      	ldr	r3, [pc, #52]	; (1ebf0 <sd_mmc_spi_select_device+0x78>)
   1ebba:	0011      	movs	r1, r2
   1ebbc:	0018      	movs	r0, r3
   1ebbe:	4b0d      	ldr	r3, [pc, #52]	; (1ebf4 <sd_mmc_spi_select_device+0x7c>)
   1ebc0:	4798      	blx	r3
   1ebc2:	0003      	movs	r3, r0
   1ebc4:	2b17      	cmp	r3, #23
   1ebc6:	d0f1      	beq.n	1ebac <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
   1ebc8:	1dfb      	adds	r3, r7, #7
   1ebca:	781a      	ldrb	r2, [r3, #0]
   1ebcc:	0013      	movs	r3, r2
   1ebce:	005b      	lsls	r3, r3, #1
   1ebd0:	189b      	adds	r3, r3, r2
   1ebd2:	4a09      	ldr	r2, [pc, #36]	; (1ebf8 <sd_mmc_spi_select_device+0x80>)
   1ebd4:	1899      	adds	r1, r3, r2
   1ebd6:	4b06      	ldr	r3, [pc, #24]	; (1ebf0 <sd_mmc_spi_select_device+0x78>)
   1ebd8:	2201      	movs	r2, #1
   1ebda:	0018      	movs	r0, r3
   1ebdc:	4b07      	ldr	r3, [pc, #28]	; (1ebfc <sd_mmc_spi_select_device+0x84>)
   1ebde:	4798      	blx	r3
}
   1ebe0:	46c0      	nop			; (mov r8, r8)
   1ebe2:	46bd      	mov	sp, r7
   1ebe4:	b003      	add	sp, #12
   1ebe6:	bd90      	pop	{r4, r7, pc}
   1ebe8:	2000425f 	.word	0x2000425f
   1ebec:	00989680 	.word	0x00989680
   1ebf0:	2000421c 	.word	0x2000421c
   1ebf4:	00026c55 	.word	0x00026c55
   1ebf8:	20004258 	.word	0x20004258
   1ebfc:	000271f1 	.word	0x000271f1

0001ec00 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
   1ec00:	b580      	push	{r7, lr}
   1ec02:	b082      	sub	sp, #8
   1ec04:	af00      	add	r7, sp, #0
   1ec06:	0002      	movs	r2, r0
   1ec08:	1dfb      	adds	r3, r7, #7
   1ec0a:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1ec0c:	4b09      	ldr	r3, [pc, #36]	; (1ec34 <sd_mmc_spi_deselect_device+0x34>)
   1ec0e:	2200      	movs	r2, #0
   1ec10:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
   1ec12:	1dfb      	adds	r3, r7, #7
   1ec14:	781a      	ldrb	r2, [r3, #0]
   1ec16:	0013      	movs	r3, r2
   1ec18:	005b      	lsls	r3, r3, #1
   1ec1a:	189b      	adds	r3, r3, r2
   1ec1c:	4a06      	ldr	r2, [pc, #24]	; (1ec38 <sd_mmc_spi_deselect_device+0x38>)
   1ec1e:	1899      	adds	r1, r3, r2
   1ec20:	4b06      	ldr	r3, [pc, #24]	; (1ec3c <sd_mmc_spi_deselect_device+0x3c>)
   1ec22:	2200      	movs	r2, #0
   1ec24:	0018      	movs	r0, r3
   1ec26:	4b06      	ldr	r3, [pc, #24]	; (1ec40 <sd_mmc_spi_deselect_device+0x40>)
   1ec28:	4798      	blx	r3
}
   1ec2a:	46c0      	nop			; (mov r8, r8)
   1ec2c:	46bd      	mov	sp, r7
   1ec2e:	b002      	add	sp, #8
   1ec30:	bd80      	pop	{r7, pc}
   1ec32:	46c0      	nop			; (mov r8, r8)
   1ec34:	2000425f 	.word	0x2000425f
   1ec38:	20004258 	.word	0x20004258
   1ec3c:	2000421c 	.word	0x2000421c
   1ec40:	000271f1 	.word	0x000271f1

0001ec44 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
   1ec44:	b580      	push	{r7, lr}
   1ec46:	b082      	sub	sp, #8
   1ec48:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
   1ec4a:	1dbb      	adds	r3, r7, #6
   1ec4c:	22ff      	movs	r2, #255	; 0xff
   1ec4e:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1ec50:	4b0c      	ldr	r3, [pc, #48]	; (1ec84 <sd_mmc_spi_send_clock+0x40>)
   1ec52:	2200      	movs	r2, #0
   1ec54:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
   1ec56:	1dfb      	adds	r3, r7, #7
   1ec58:	2200      	movs	r2, #0
   1ec5a:	701a      	strb	r2, [r3, #0]
   1ec5c:	e00a      	b.n	1ec74 <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
   1ec5e:	1db9      	adds	r1, r7, #6
   1ec60:	4b09      	ldr	r3, [pc, #36]	; (1ec88 <sd_mmc_spi_send_clock+0x44>)
   1ec62:	2201      	movs	r2, #1
   1ec64:	0018      	movs	r0, r3
   1ec66:	4b09      	ldr	r3, [pc, #36]	; (1ec8c <sd_mmc_spi_send_clock+0x48>)
   1ec68:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
   1ec6a:	1dfb      	adds	r3, r7, #7
   1ec6c:	781a      	ldrb	r2, [r3, #0]
   1ec6e:	1dfb      	adds	r3, r7, #7
   1ec70:	3201      	adds	r2, #1
   1ec72:	701a      	strb	r2, [r3, #0]
   1ec74:	1dfb      	adds	r3, r7, #7
   1ec76:	781b      	ldrb	r3, [r3, #0]
   1ec78:	2b09      	cmp	r3, #9
   1ec7a:	d9f0      	bls.n	1ec5e <sd_mmc_spi_send_clock+0x1a>
	}
}
   1ec7c:	46c0      	nop			; (mov r8, r8)
   1ec7e:	46bd      	mov	sp, r7
   1ec80:	b002      	add	sp, #8
   1ec82:	bd80      	pop	{r7, pc}
   1ec84:	2000425f 	.word	0x2000425f
   1ec88:	2000421c 	.word	0x2000421c
   1ec8c:	000272e1 	.word	0x000272e1

0001ec90 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
   1ec90:	b590      	push	{r4, r7, lr}
   1ec92:	b085      	sub	sp, #20
   1ec94:	af02      	add	r7, sp, #8
   1ec96:	6078      	str	r0, [r7, #4]
   1ec98:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
   1ec9a:	6839      	ldr	r1, [r7, #0]
   1ec9c:	6878      	ldr	r0, [r7, #4]
   1ec9e:	2300      	movs	r3, #0
   1eca0:	9300      	str	r3, [sp, #0]
   1eca2:	2300      	movs	r3, #0
   1eca4:	2200      	movs	r2, #0
   1eca6:	4c03      	ldr	r4, [pc, #12]	; (1ecb4 <sd_mmc_spi_send_cmd+0x24>)
   1eca8:	47a0      	blx	r4
   1ecaa:	0003      	movs	r3, r0
}
   1ecac:	0018      	movs	r0, r3
   1ecae:	46bd      	mov	sp, r7
   1ecb0:	b003      	add	sp, #12
   1ecb2:	bd90      	pop	{r4, r7, pc}
   1ecb4:	0001ecb9 	.word	0x0001ecb9

0001ecb8 <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
   1ecb8:	b590      	push	{r4, r7, lr}
   1ecba:	b089      	sub	sp, #36	; 0x24
   1ecbc:	af00      	add	r7, sp, #0
   1ecbe:	60f8      	str	r0, [r7, #12]
   1ecc0:	60b9      	str	r1, [r7, #8]
   1ecc2:	0019      	movs	r1, r3
   1ecc4:	1dbb      	adds	r3, r7, #6
   1ecc6:	801a      	strh	r2, [r3, #0]
   1ecc8:	1d3b      	adds	r3, r7, #4
   1ecca:	1c0a      	adds	r2, r1, #0
   1eccc:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
   1ecce:	231b      	movs	r3, #27
   1ecd0:	18fb      	adds	r3, r7, r3
   1ecd2:	22ff      	movs	r2, #255	; 0xff
   1ecd4:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
   1ecd6:	231c      	movs	r3, #28
   1ecd8:	18fb      	adds	r3, r7, r3
   1ecda:	22ff      	movs	r2, #255	; 0xff
   1ecdc:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1ecde:	4b72      	ldr	r3, [pc, #456]	; (1eea8 <sd_mmc_spi_adtc_start+0x1f0>)
   1ece0:	2200      	movs	r2, #0
   1ece2:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
   1ece4:	68fb      	ldr	r3, [r7, #12]
   1ece6:	b2db      	uxtb	r3, r3
   1ece8:	223f      	movs	r2, #63	; 0x3f
   1ecea:	4013      	ands	r3, r2
   1ecec:	b2db      	uxtb	r3, r3
   1ecee:	2240      	movs	r2, #64	; 0x40
   1ecf0:	4313      	orrs	r3, r2
   1ecf2:	b2da      	uxtb	r2, r3
   1ecf4:	2314      	movs	r3, #20
   1ecf6:	18fb      	adds	r3, r7, r3
   1ecf8:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
   1ecfa:	68bb      	ldr	r3, [r7, #8]
   1ecfc:	0e1b      	lsrs	r3, r3, #24
   1ecfe:	b2da      	uxtb	r2, r3
   1ed00:	2314      	movs	r3, #20
   1ed02:	18fb      	adds	r3, r7, r3
   1ed04:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
   1ed06:	68bb      	ldr	r3, [r7, #8]
   1ed08:	0c1b      	lsrs	r3, r3, #16
   1ed0a:	b2da      	uxtb	r2, r3
   1ed0c:	2314      	movs	r3, #20
   1ed0e:	18fb      	adds	r3, r7, r3
   1ed10:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
   1ed12:	68bb      	ldr	r3, [r7, #8]
   1ed14:	0a1b      	lsrs	r3, r3, #8
   1ed16:	b2da      	uxtb	r2, r3
   1ed18:	2314      	movs	r3, #20
   1ed1a:	18fb      	adds	r3, r7, r3
   1ed1c:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
   1ed1e:	68bb      	ldr	r3, [r7, #8]
   1ed20:	b2da      	uxtb	r2, r3
   1ed22:	2314      	movs	r3, #20
   1ed24:	18fb      	adds	r3, r7, r3
   1ed26:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
   1ed28:	2314      	movs	r3, #20
   1ed2a:	18fb      	adds	r3, r7, r3
   1ed2c:	2105      	movs	r1, #5
   1ed2e:	0018      	movs	r0, r3
   1ed30:	4b5e      	ldr	r3, [pc, #376]	; (1eeac <sd_mmc_spi_adtc_start+0x1f4>)
   1ed32:	4798      	blx	r3
   1ed34:	0003      	movs	r3, r0
   1ed36:	001a      	movs	r2, r3
   1ed38:	2314      	movs	r3, #20
   1ed3a:	18fb      	adds	r3, r7, r3
   1ed3c:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
   1ed3e:	231b      	movs	r3, #27
   1ed40:	18f9      	adds	r1, r7, r3
   1ed42:	4b5b      	ldr	r3, [pc, #364]	; (1eeb0 <sd_mmc_spi_adtc_start+0x1f8>)
   1ed44:	2201      	movs	r2, #1
   1ed46:	0018      	movs	r0, r3
   1ed48:	4b5a      	ldr	r3, [pc, #360]	; (1eeb4 <sd_mmc_spi_adtc_start+0x1fc>)
   1ed4a:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
   1ed4c:	2314      	movs	r3, #20
   1ed4e:	18f9      	adds	r1, r7, r3
   1ed50:	4b57      	ldr	r3, [pc, #348]	; (1eeb0 <sd_mmc_spi_adtc_start+0x1f8>)
   1ed52:	2206      	movs	r2, #6
   1ed54:	0018      	movs	r0, r3
   1ed56:	4b57      	ldr	r3, [pc, #348]	; (1eeb4 <sd_mmc_spi_adtc_start+0x1fc>)
   1ed58:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
   1ed5a:	2313      	movs	r3, #19
   1ed5c:	18fb      	adds	r3, r7, r3
   1ed5e:	22ff      	movs	r2, #255	; 0xff
   1ed60:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   1ed62:	231c      	movs	r3, #28
   1ed64:	18fb      	adds	r3, r7, r3
   1ed66:	881b      	ldrh	r3, [r3, #0]
   1ed68:	2213      	movs	r2, #19
   1ed6a:	18b9      	adds	r1, r7, r2
   1ed6c:	4850      	ldr	r0, [pc, #320]	; (1eeb0 <sd_mmc_spi_adtc_start+0x1f8>)
   1ed6e:	2201      	movs	r2, #1
   1ed70:	4c51      	ldr	r4, [pc, #324]	; (1eeb8 <sd_mmc_spi_adtc_start+0x200>)
   1ed72:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
   1ed74:	231f      	movs	r3, #31
   1ed76:	18fb      	adds	r3, r7, r3
   1ed78:	2207      	movs	r2, #7
   1ed7a:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   1ed7c:	231c      	movs	r3, #28
   1ed7e:	18fb      	adds	r3, r7, r3
   1ed80:	881b      	ldrh	r3, [r3, #0]
   1ed82:	2213      	movs	r2, #19
   1ed84:	18b9      	adds	r1, r7, r2
   1ed86:	484a      	ldr	r0, [pc, #296]	; (1eeb0 <sd_mmc_spi_adtc_start+0x1f8>)
   1ed88:	2201      	movs	r2, #1
   1ed8a:	4c4b      	ldr	r4, [pc, #300]	; (1eeb8 <sd_mmc_spi_adtc_start+0x200>)
   1ed8c:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
   1ed8e:	2313      	movs	r3, #19
   1ed90:	18fb      	adds	r3, r7, r3
   1ed92:	781b      	ldrb	r3, [r3, #0]
   1ed94:	b25b      	sxtb	r3, r3
   1ed96:	2b00      	cmp	r3, #0
   1ed98:	da10      	bge.n	1edbc <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
   1ed9a:	231f      	movs	r3, #31
   1ed9c:	18fb      	adds	r3, r7, r3
   1ed9e:	221f      	movs	r2, #31
   1eda0:	18ba      	adds	r2, r7, r2
   1eda2:	7812      	ldrb	r2, [r2, #0]
   1eda4:	3a01      	subs	r2, #1
   1eda6:	701a      	strb	r2, [r3, #0]
   1eda8:	231f      	movs	r3, #31
   1edaa:	18fb      	adds	r3, r7, r3
   1edac:	781b      	ldrb	r3, [r3, #0]
   1edae:	2b00      	cmp	r3, #0
   1edb0:	d1e4      	bne.n	1ed7c <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
   1edb2:	4b3d      	ldr	r3, [pc, #244]	; (1eea8 <sd_mmc_spi_adtc_start+0x1f0>)
   1edb4:	2202      	movs	r2, #2
   1edb6:	701a      	strb	r2, [r3, #0]
			return false;
   1edb8:	2300      	movs	r3, #0
   1edba:	e070      	b.n	1ee9e <sd_mmc_spi_adtc_start+0x1e6>
			break;
   1edbc:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
   1edbe:	2313      	movs	r3, #19
   1edc0:	18fb      	adds	r3, r7, r3
   1edc2:	781b      	ldrb	r3, [r3, #0]
   1edc4:	001a      	movs	r2, r3
   1edc6:	4b3d      	ldr	r3, [pc, #244]	; (1eebc <sd_mmc_spi_adtc_start+0x204>)
   1edc8:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
   1edca:	2313      	movs	r3, #19
   1edcc:	18fb      	adds	r3, r7, r3
   1edce:	781b      	ldrb	r3, [r3, #0]
   1edd0:	001a      	movs	r2, r3
   1edd2:	2308      	movs	r3, #8
   1edd4:	4013      	ands	r3, r2
   1edd6:	d004      	beq.n	1ede2 <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
   1edd8:	4b33      	ldr	r3, [pc, #204]	; (1eea8 <sd_mmc_spi_adtc_start+0x1f0>)
   1edda:	2206      	movs	r2, #6
   1eddc:	701a      	strb	r2, [r3, #0]
		return false;
   1edde:	2300      	movs	r3, #0
   1ede0:	e05d      	b.n	1ee9e <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
   1ede2:	2313      	movs	r3, #19
   1ede4:	18fb      	adds	r3, r7, r3
   1ede6:	781b      	ldrb	r3, [r3, #0]
   1ede8:	001a      	movs	r2, r3
   1edea:	2304      	movs	r3, #4
   1edec:	4013      	ands	r3, r2
   1edee:	d004      	beq.n	1edfa <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
   1edf0:	4b2d      	ldr	r3, [pc, #180]	; (1eea8 <sd_mmc_spi_adtc_start+0x1f0>)
   1edf2:	2209      	movs	r2, #9
   1edf4:	701a      	strb	r2, [r3, #0]
		return false;
   1edf6:	2300      	movs	r3, #0
   1edf8:	e051      	b.n	1ee9e <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
   1edfa:	2313      	movs	r3, #19
   1edfc:	18fb      	adds	r3, r7, r3
   1edfe:	781b      	ldrb	r3, [r3, #0]
   1ee00:	001a      	movs	r2, r3
   1ee02:	2301      	movs	r3, #1
   1ee04:	439a      	bics	r2, r3
   1ee06:	1e13      	subs	r3, r2, #0
   1ee08:	d004      	beq.n	1ee14 <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   1ee0a:	4b27      	ldr	r3, [pc, #156]	; (1eea8 <sd_mmc_spi_adtc_start+0x1f0>)
   1ee0c:	2201      	movs	r2, #1
   1ee0e:	701a      	strb	r2, [r3, #0]
		return false;
   1ee10:	2300      	movs	r3, #0
   1ee12:	e044      	b.n	1ee9e <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
   1ee14:	68fa      	ldr	r2, [r7, #12]
   1ee16:	2380      	movs	r3, #128	; 0x80
   1ee18:	019b      	lsls	r3, r3, #6
   1ee1a:	4013      	ands	r3, r2
   1ee1c:	d00d      	beq.n	1ee3a <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
   1ee1e:	4b28      	ldr	r3, [pc, #160]	; (1eec0 <sd_mmc_spi_adtc_start+0x208>)
   1ee20:	4798      	blx	r3
   1ee22:	0003      	movs	r3, r0
   1ee24:	001a      	movs	r2, r3
   1ee26:	2301      	movs	r3, #1
   1ee28:	4053      	eors	r3, r2
   1ee2a:	b2db      	uxtb	r3, r3
   1ee2c:	2b00      	cmp	r3, #0
   1ee2e:	d004      	beq.n	1ee3a <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
   1ee30:	4b1d      	ldr	r3, [pc, #116]	; (1eea8 <sd_mmc_spi_adtc_start+0x1f0>)
   1ee32:	2203      	movs	r2, #3
   1ee34:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
   1ee36:	2300      	movs	r3, #0
   1ee38:	e031      	b.n	1ee9e <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
   1ee3a:	68fa      	ldr	r2, [r7, #12]
   1ee3c:	2380      	movs	r3, #128	; 0x80
   1ee3e:	009b      	lsls	r3, r3, #2
   1ee40:	4013      	ands	r3, r2
   1ee42:	d00e      	beq.n	1ee62 <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
   1ee44:	4b1d      	ldr	r3, [pc, #116]	; (1eebc <sd_mmc_spi_adtc_start+0x204>)
   1ee46:	2200      	movs	r2, #0
   1ee48:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
   1ee4a:	231c      	movs	r3, #28
   1ee4c:	18fb      	adds	r3, r7, r3
   1ee4e:	881b      	ldrh	r3, [r3, #0]
   1ee50:	491a      	ldr	r1, [pc, #104]	; (1eebc <sd_mmc_spi_adtc_start+0x204>)
   1ee52:	4817      	ldr	r0, [pc, #92]	; (1eeb0 <sd_mmc_spi_adtc_start+0x1f8>)
   1ee54:	2201      	movs	r2, #1
   1ee56:	4c18      	ldr	r4, [pc, #96]	; (1eeb8 <sd_mmc_spi_adtc_start+0x200>)
   1ee58:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
   1ee5a:	4b18      	ldr	r3, [pc, #96]	; (1eebc <sd_mmc_spi_adtc_start+0x204>)
   1ee5c:	681a      	ldr	r2, [r3, #0]
   1ee5e:	4b17      	ldr	r3, [pc, #92]	; (1eebc <sd_mmc_spi_adtc_start+0x204>)
   1ee60:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
   1ee62:	68fa      	ldr	r2, [r7, #12]
   1ee64:	2380      	movs	r3, #128	; 0x80
   1ee66:	00db      	lsls	r3, r3, #3
   1ee68:	4013      	ands	r3, r2
   1ee6a:	d00c      	beq.n	1ee86 <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
   1ee6c:	231c      	movs	r3, #28
   1ee6e:	18fb      	adds	r3, r7, r3
   1ee70:	881b      	ldrh	r3, [r3, #0]
   1ee72:	4912      	ldr	r1, [pc, #72]	; (1eebc <sd_mmc_spi_adtc_start+0x204>)
   1ee74:	480e      	ldr	r0, [pc, #56]	; (1eeb0 <sd_mmc_spi_adtc_start+0x1f8>)
   1ee76:	2204      	movs	r2, #4
   1ee78:	4c0f      	ldr	r4, [pc, #60]	; (1eeb8 <sd_mmc_spi_adtc_start+0x200>)
   1ee7a:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
   1ee7c:	4b0f      	ldr	r3, [pc, #60]	; (1eebc <sd_mmc_spi_adtc_start+0x204>)
   1ee7e:	681b      	ldr	r3, [r3, #0]
   1ee80:	ba1a      	rev	r2, r3
   1ee82:	4b0e      	ldr	r3, [pc, #56]	; (1eebc <sd_mmc_spi_adtc_start+0x204>)
   1ee84:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
   1ee86:	4b0f      	ldr	r3, [pc, #60]	; (1eec4 <sd_mmc_spi_adtc_start+0x20c>)
   1ee88:	1dba      	adds	r2, r7, #6
   1ee8a:	8812      	ldrh	r2, [r2, #0]
   1ee8c:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
   1ee8e:	4b0e      	ldr	r3, [pc, #56]	; (1eec8 <sd_mmc_spi_adtc_start+0x210>)
   1ee90:	1d3a      	adds	r2, r7, #4
   1ee92:	8812      	ldrh	r2, [r2, #0]
   1ee94:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
   1ee96:	4b0d      	ldr	r3, [pc, #52]	; (1eecc <sd_mmc_spi_adtc_start+0x214>)
   1ee98:	2200      	movs	r2, #0
   1ee9a:	601a      	str	r2, [r3, #0]
	return true; // Command complete
   1ee9c:	2301      	movs	r3, #1
}
   1ee9e:	0018      	movs	r0, r3
   1eea0:	46bd      	mov	sp, r7
   1eea2:	b009      	add	sp, #36	; 0x24
   1eea4:	bd90      	pop	{r4, r7, pc}
   1eea6:	46c0      	nop			; (mov r8, r8)
   1eea8:	2000425f 	.word	0x2000425f
   1eeac:	0001e759 	.word	0x0001e759
   1eeb0:	2000421c 	.word	0x2000421c
   1eeb4:	000272e1 	.word	0x000272e1
   1eeb8:	000270bd 	.word	0x000270bd
   1eebc:	20004260 	.word	0x20004260
   1eec0:	0001e815 	.word	0x0001e815
   1eec4:	20004268 	.word	0x20004268
   1eec8:	2000426a 	.word	0x2000426a
   1eecc:	20004264 	.word	0x20004264

0001eed0 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
   1eed0:	b580      	push	{r7, lr}
   1eed2:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
   1eed4:	4b02      	ldr	r3, [pc, #8]	; (1eee0 <sd_mmc_spi_get_response+0x10>)
   1eed6:	681b      	ldr	r3, [r3, #0]
}
   1eed8:	0018      	movs	r0, r3
   1eeda:	46bd      	mov	sp, r7
   1eedc:	bd80      	pop	{r7, pc}
   1eede:	46c0      	nop			; (mov r8, r8)
   1eee0:	20004260 	.word	0x20004260

0001eee4 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
   1eee4:	b590      	push	{r4, r7, lr}
   1eee6:	b085      	sub	sp, #20
   1eee8:	af00      	add	r7, sp, #0
   1eeea:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
   1eeec:	230e      	movs	r3, #14
   1eeee:	18fb      	adds	r3, r7, r3
   1eef0:	22ff      	movs	r2, #255	; 0xff
   1eef2:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1eef4:	4b1c      	ldr	r3, [pc, #112]	; (1ef68 <sd_mmc_spi_read_word+0x84>)
   1eef6:	2200      	movs	r2, #0
   1eef8:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   1eefa:	4b1c      	ldr	r3, [pc, #112]	; (1ef6c <sd_mmc_spi_read_word+0x88>)
   1eefc:	681a      	ldr	r2, [r3, #0]
   1eefe:	4b1c      	ldr	r3, [pc, #112]	; (1ef70 <sd_mmc_spi_read_word+0x8c>)
   1ef00:	881b      	ldrh	r3, [r3, #0]
   1ef02:	0019      	movs	r1, r3
   1ef04:	4b1b      	ldr	r3, [pc, #108]	; (1ef74 <sd_mmc_spi_read_word+0x90>)
   1ef06:	0010      	movs	r0, r2
   1ef08:	4798      	blx	r3
   1ef0a:	1e0b      	subs	r3, r1, #0
   1ef0c:	d10a      	bne.n	1ef24 <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
   1ef0e:	4b1a      	ldr	r3, [pc, #104]	; (1ef78 <sd_mmc_spi_read_word+0x94>)
   1ef10:	4798      	blx	r3
   1ef12:	0003      	movs	r3, r0
   1ef14:	001a      	movs	r2, r3
   1ef16:	2301      	movs	r3, #1
   1ef18:	4053      	eors	r3, r2
   1ef1a:	b2db      	uxtb	r3, r3
   1ef1c:	2b00      	cmp	r3, #0
   1ef1e:	d001      	beq.n	1ef24 <sd_mmc_spi_read_word+0x40>
			return false;
   1ef20:	2300      	movs	r3, #0
   1ef22:	e01d      	b.n	1ef60 <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
   1ef24:	230e      	movs	r3, #14
   1ef26:	18fb      	adds	r3, r7, r3
   1ef28:	881b      	ldrh	r3, [r3, #0]
   1ef2a:	1d39      	adds	r1, r7, #4
   1ef2c:	4813      	ldr	r0, [pc, #76]	; (1ef7c <sd_mmc_spi_read_word+0x98>)
   1ef2e:	2204      	movs	r2, #4
   1ef30:	4c13      	ldr	r4, [pc, #76]	; (1ef80 <sd_mmc_spi_read_word+0x9c>)
   1ef32:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
   1ef34:	687b      	ldr	r3, [r7, #4]
   1ef36:	687a      	ldr	r2, [r7, #4]
   1ef38:	6812      	ldr	r2, [r2, #0]
   1ef3a:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
   1ef3c:	4b0b      	ldr	r3, [pc, #44]	; (1ef6c <sd_mmc_spi_read_word+0x88>)
   1ef3e:	681b      	ldr	r3, [r3, #0]
   1ef40:	1d1a      	adds	r2, r3, #4
   1ef42:	4b0a      	ldr	r3, [pc, #40]	; (1ef6c <sd_mmc_spi_read_word+0x88>)
   1ef44:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   1ef46:	4b09      	ldr	r3, [pc, #36]	; (1ef6c <sd_mmc_spi_read_word+0x88>)
   1ef48:	681a      	ldr	r2, [r3, #0]
   1ef4a:	4b09      	ldr	r3, [pc, #36]	; (1ef70 <sd_mmc_spi_read_word+0x8c>)
   1ef4c:	881b      	ldrh	r3, [r3, #0]
   1ef4e:	0019      	movs	r1, r3
   1ef50:	4b08      	ldr	r3, [pc, #32]	; (1ef74 <sd_mmc_spi_read_word+0x90>)
   1ef52:	0010      	movs	r0, r2
   1ef54:	4798      	blx	r3
   1ef56:	1e0b      	subs	r3, r1, #0
   1ef58:	d101      	bne.n	1ef5e <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
   1ef5a:	4b0a      	ldr	r3, [pc, #40]	; (1ef84 <sd_mmc_spi_read_word+0xa0>)
   1ef5c:	4798      	blx	r3
	}
	return true;
   1ef5e:	2301      	movs	r3, #1
}
   1ef60:	0018      	movs	r0, r3
   1ef62:	46bd      	mov	sp, r7
   1ef64:	b005      	add	sp, #20
   1ef66:	bd90      	pop	{r4, r7, pc}
   1ef68:	2000425f 	.word	0x2000425f
   1ef6c:	20004264 	.word	0x20004264
   1ef70:	20004268 	.word	0x20004268
   1ef74:	00031c31 	.word	0x00031c31
   1ef78:	0001e881 	.word	0x0001e881
   1ef7c:	2000421c 	.word	0x2000421c
   1ef80:	000270bd 	.word	0x000270bd
   1ef84:	0001e905 	.word	0x0001e905

0001ef88 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
   1ef88:	b590      	push	{r4, r7, lr}
   1ef8a:	b085      	sub	sp, #20
   1ef8c:	af00      	add	r7, sp, #0
   1ef8e:	6078      	str	r0, [r7, #4]
   1ef90:	000a      	movs	r2, r1
   1ef92:	1cbb      	adds	r3, r7, #2
   1ef94:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
   1ef96:	230a      	movs	r3, #10
   1ef98:	18fb      	adds	r3, r7, r3
   1ef9a:	22ff      	movs	r2, #255	; 0xff
   1ef9c:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1ef9e:	4b1c      	ldr	r3, [pc, #112]	; (1f010 <sd_mmc_spi_start_read_blocks+0x88>)
   1efa0:	2200      	movs	r2, #0
   1efa2:	701a      	strb	r2, [r3, #0]
	pos = 0;
   1efa4:	2300      	movs	r3, #0
   1efa6:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   1efa8:	e025      	b.n	1eff6 <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
   1efaa:	4b1a      	ldr	r3, [pc, #104]	; (1f014 <sd_mmc_spi_start_read_blocks+0x8c>)
   1efac:	4798      	blx	r3
   1efae:	0003      	movs	r3, r0
   1efb0:	001a      	movs	r2, r3
   1efb2:	2301      	movs	r3, #1
   1efb4:	4053      	eors	r3, r2
   1efb6:	b2db      	uxtb	r3, r3
   1efb8:	2b00      	cmp	r3, #0
   1efba:	d001      	beq.n	1efc0 <sd_mmc_spi_start_read_blocks+0x38>
			return false;
   1efbc:	2300      	movs	r3, #0
   1efbe:	e022      	b.n	1f006 <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
   1efc0:	687a      	ldr	r2, [r7, #4]
   1efc2:	68fb      	ldr	r3, [r7, #12]
   1efc4:	18d1      	adds	r1, r2, r3
   1efc6:	4b14      	ldr	r3, [pc, #80]	; (1f018 <sd_mmc_spi_start_read_blocks+0x90>)
   1efc8:	881a      	ldrh	r2, [r3, #0]
   1efca:	230a      	movs	r3, #10
   1efcc:	18fb      	adds	r3, r7, r3
   1efce:	881b      	ldrh	r3, [r3, #0]
   1efd0:	4812      	ldr	r0, [pc, #72]	; (1f01c <sd_mmc_spi_start_read_blocks+0x94>)
   1efd2:	4c13      	ldr	r4, [pc, #76]	; (1f020 <sd_mmc_spi_start_read_blocks+0x98>)
   1efd4:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
   1efd6:	4b10      	ldr	r3, [pc, #64]	; (1f018 <sd_mmc_spi_start_read_blocks+0x90>)
   1efd8:	881b      	ldrh	r3, [r3, #0]
   1efda:	001a      	movs	r2, r3
   1efdc:	68fb      	ldr	r3, [r7, #12]
   1efde:	189b      	adds	r3, r3, r2
   1efe0:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   1efe2:	4b0d      	ldr	r3, [pc, #52]	; (1f018 <sd_mmc_spi_start_read_blocks+0x90>)
   1efe4:	881b      	ldrh	r3, [r3, #0]
   1efe6:	001a      	movs	r2, r3
   1efe8:	4b0e      	ldr	r3, [pc, #56]	; (1f024 <sd_mmc_spi_start_read_blocks+0x9c>)
   1efea:	681b      	ldr	r3, [r3, #0]
   1efec:	18d2      	adds	r2, r2, r3
   1efee:	4b0d      	ldr	r3, [pc, #52]	; (1f024 <sd_mmc_spi_start_read_blocks+0x9c>)
   1eff0:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
   1eff2:	4b0d      	ldr	r3, [pc, #52]	; (1f028 <sd_mmc_spi_start_read_blocks+0xa0>)
   1eff4:	4798      	blx	r3
	while (nb_block--) {
   1eff6:	1cbb      	adds	r3, r7, #2
   1eff8:	881b      	ldrh	r3, [r3, #0]
   1effa:	1cba      	adds	r2, r7, #2
   1effc:	1e59      	subs	r1, r3, #1
   1effe:	8011      	strh	r1, [r2, #0]
   1f000:	2b00      	cmp	r3, #0
   1f002:	d1d2      	bne.n	1efaa <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
   1f004:	2301      	movs	r3, #1
}
   1f006:	0018      	movs	r0, r3
   1f008:	46bd      	mov	sp, r7
   1f00a:	b005      	add	sp, #20
   1f00c:	bd90      	pop	{r4, r7, pc}
   1f00e:	46c0      	nop			; (mov r8, r8)
   1f010:	2000425f 	.word	0x2000425f
   1f014:	0001e881 	.word	0x0001e881
   1f018:	20004268 	.word	0x20004268
   1f01c:	2000421c 	.word	0x2000421c
   1f020:	000270bd 	.word	0x000270bd
   1f024:	20004264 	.word	0x20004264
   1f028:	0001e905 	.word	0x0001e905

0001f02c <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
   1f02c:	b580      	push	{r7, lr}
   1f02e:	af00      	add	r7, sp, #0
	return true;
   1f030:	2301      	movs	r3, #1
}
   1f032:	0018      	movs	r0, r3
   1f034:	46bd      	mov	sp, r7
   1f036:	bd80      	pop	{r7, pc}

0001f038 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
   1f038:	b580      	push	{r7, lr}
   1f03a:	b084      	sub	sp, #16
   1f03c:	af00      	add	r7, sp, #0
   1f03e:	6078      	str	r0, [r7, #4]
   1f040:	000a      	movs	r2, r1
   1f042:	1cbb      	adds	r3, r7, #2
   1f044:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1f046:	4b24      	ldr	r3, [pc, #144]	; (1f0d8 <sd_mmc_spi_start_write_blocks+0xa0>)
   1f048:	2200      	movs	r2, #0
   1f04a:	701a      	strb	r2, [r3, #0]
	pos = 0;
   1f04c:	2300      	movs	r3, #0
   1f04e:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   1f050:	e035      	b.n	1f0be <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
   1f052:	4b22      	ldr	r3, [pc, #136]	; (1f0dc <sd_mmc_spi_start_write_blocks+0xa4>)
   1f054:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
   1f056:	687a      	ldr	r2, [r7, #4]
   1f058:	68fb      	ldr	r3, [r7, #12]
   1f05a:	18d1      	adds	r1, r2, r3
   1f05c:	4b20      	ldr	r3, [pc, #128]	; (1f0e0 <sd_mmc_spi_start_write_blocks+0xa8>)
   1f05e:	881a      	ldrh	r2, [r3, #0]
   1f060:	4b20      	ldr	r3, [pc, #128]	; (1f0e4 <sd_mmc_spi_start_write_blocks+0xac>)
   1f062:	0018      	movs	r0, r3
   1f064:	4b20      	ldr	r3, [pc, #128]	; (1f0e8 <sd_mmc_spi_start_write_blocks+0xb0>)
   1f066:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
   1f068:	4b1d      	ldr	r3, [pc, #116]	; (1f0e0 <sd_mmc_spi_start_write_blocks+0xa8>)
   1f06a:	881b      	ldrh	r3, [r3, #0]
   1f06c:	001a      	movs	r2, r3
   1f06e:	68fb      	ldr	r3, [r7, #12]
   1f070:	189b      	adds	r3, r3, r2
   1f072:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   1f074:	4b1a      	ldr	r3, [pc, #104]	; (1f0e0 <sd_mmc_spi_start_write_blocks+0xa8>)
   1f076:	881b      	ldrh	r3, [r3, #0]
   1f078:	001a      	movs	r2, r3
   1f07a:	4b1c      	ldr	r3, [pc, #112]	; (1f0ec <sd_mmc_spi_start_write_blocks+0xb4>)
   1f07c:	681b      	ldr	r3, [r3, #0]
   1f07e:	18d2      	adds	r2, r2, r3
   1f080:	4b1a      	ldr	r3, [pc, #104]	; (1f0ec <sd_mmc_spi_start_write_blocks+0xb4>)
   1f082:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
   1f084:	4b1a      	ldr	r3, [pc, #104]	; (1f0f0 <sd_mmc_spi_start_write_blocks+0xb8>)
   1f086:	4798      	blx	r3
   1f088:	0003      	movs	r3, r0
   1f08a:	001a      	movs	r2, r3
   1f08c:	2301      	movs	r3, #1
   1f08e:	4053      	eors	r3, r2
   1f090:	b2db      	uxtb	r3, r3
   1f092:	2b00      	cmp	r3, #0
   1f094:	d001      	beq.n	1f09a <sd_mmc_spi_start_write_blocks+0x62>
			return false;
   1f096:	2300      	movs	r3, #0
   1f098:	e019      	b.n	1f0ce <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
   1f09a:	1cbb      	adds	r3, r7, #2
   1f09c:	881b      	ldrh	r3, [r3, #0]
   1f09e:	2b00      	cmp	r3, #0
   1f0a0:	d00d      	beq.n	1f0be <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
   1f0a2:	4b14      	ldr	r3, [pc, #80]	; (1f0f4 <sd_mmc_spi_start_write_blocks+0xbc>)
   1f0a4:	4798      	blx	r3
   1f0a6:	0003      	movs	r3, r0
   1f0a8:	001a      	movs	r2, r3
   1f0aa:	2301      	movs	r3, #1
   1f0ac:	4053      	eors	r3, r2
   1f0ae:	b2db      	uxtb	r3, r3
   1f0b0:	2b00      	cmp	r3, #0
   1f0b2:	d004      	beq.n	1f0be <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1f0b4:	4b08      	ldr	r3, [pc, #32]	; (1f0d8 <sd_mmc_spi_start_write_blocks+0xa0>)
   1f0b6:	2205      	movs	r2, #5
   1f0b8:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
   1f0ba:	2300      	movs	r3, #0
   1f0bc:	e007      	b.n	1f0ce <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
   1f0be:	1cbb      	adds	r3, r7, #2
   1f0c0:	881b      	ldrh	r3, [r3, #0]
   1f0c2:	1cba      	adds	r2, r7, #2
   1f0c4:	1e59      	subs	r1, r3, #1
   1f0c6:	8011      	strh	r1, [r2, #0]
   1f0c8:	2b00      	cmp	r3, #0
   1f0ca:	d1c2      	bne.n	1f052 <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
   1f0cc:	2301      	movs	r3, #1
}
   1f0ce:	0018      	movs	r0, r3
   1f0d0:	46bd      	mov	sp, r7
   1f0d2:	b004      	add	sp, #16
   1f0d4:	bd80      	pop	{r7, pc}
   1f0d6:	46c0      	nop			; (mov r8, r8)
   1f0d8:	2000425f 	.word	0x2000425f
   1f0dc:	0001e931 	.word	0x0001e931
   1f0e0:	20004268 	.word	0x20004268
   1f0e4:	2000421c 	.word	0x2000421c
   1f0e8:	000272e1 	.word	0x000272e1
   1f0ec:	20004264 	.word	0x20004264
   1f0f0:	0001e981 	.word	0x0001e981
   1f0f4:	0001e815 	.word	0x0001e815

0001f0f8 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
   1f0f8:	b580      	push	{r7, lr}
   1f0fa:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
   1f0fc:	4b09      	ldr	r3, [pc, #36]	; (1f124 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
   1f0fe:	4798      	blx	r3
   1f100:	0003      	movs	r3, r0
   1f102:	001a      	movs	r2, r3
   1f104:	2301      	movs	r3, #1
   1f106:	4053      	eors	r3, r2
   1f108:	b2db      	uxtb	r3, r3
   1f10a:	2b00      	cmp	r3, #0
   1f10c:	d004      	beq.n	1f118 <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1f10e:	4b06      	ldr	r3, [pc, #24]	; (1f128 <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
   1f110:	2205      	movs	r2, #5
   1f112:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
   1f114:	2300      	movs	r3, #0
   1f116:	e002      	b.n	1f11e <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
   1f118:	4b04      	ldr	r3, [pc, #16]	; (1f12c <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
   1f11a:	4798      	blx	r3
   1f11c:	0003      	movs	r3, r0
}
   1f11e:	0018      	movs	r0, r3
   1f120:	46bd      	mov	sp, r7
   1f122:	bd80      	pop	{r7, pc}
   1f124:	0001e815 	.word	0x0001e815
   1f128:	2000425f 	.word	0x2000425f
   1f12c:	0001ea15 	.word	0x0001ea15

0001f130 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
   1f130:	b580      	push	{r7, lr}
   1f132:	b082      	sub	sp, #8
   1f134:	af00      	add	r7, sp, #0
   1f136:	6078      	str	r0, [r7, #4]
	if (n > 0) {
   1f138:	687b      	ldr	r3, [r7, #4]
   1f13a:	2b00      	cmp	r3, #0
   1f13c:	d00c      	beq.n	1f158 <delay_cycles+0x28>
		SysTick->LOAD = n;
   1f13e:	4b08      	ldr	r3, [pc, #32]	; (1f160 <delay_cycles+0x30>)
   1f140:	687a      	ldr	r2, [r7, #4]
   1f142:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
   1f144:	4b06      	ldr	r3, [pc, #24]	; (1f160 <delay_cycles+0x30>)
   1f146:	2200      	movs	r2, #0
   1f148:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   1f14a:	46c0      	nop			; (mov r8, r8)
   1f14c:	4b04      	ldr	r3, [pc, #16]	; (1f160 <delay_cycles+0x30>)
   1f14e:	681a      	ldr	r2, [r3, #0]
   1f150:	2380      	movs	r3, #128	; 0x80
   1f152:	025b      	lsls	r3, r3, #9
   1f154:	4013      	ands	r3, r2
   1f156:	d0f9      	beq.n	1f14c <delay_cycles+0x1c>
		};
	}
}
   1f158:	46c0      	nop			; (mov r8, r8)
   1f15a:	46bd      	mov	sp, r7
   1f15c:	b002      	add	sp, #8
   1f15e:	bd80      	pop	{r7, pc}
   1f160:	e000e010 	.word	0xe000e010

0001f164 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
   1f164:	b580      	push	{r7, lr}
   1f166:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
   1f168:	2000      	movs	r0, #0
   1f16a:	4b0f      	ldr	r3, [pc, #60]	; (1f1a8 <delay_init+0x44>)
   1f16c:	4798      	blx	r3
   1f16e:	0002      	movs	r2, r0
   1f170:	4b0e      	ldr	r3, [pc, #56]	; (1f1ac <delay_init+0x48>)
   1f172:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
   1f174:	4b0d      	ldr	r3, [pc, #52]	; (1f1ac <delay_init+0x48>)
   1f176:	6818      	ldr	r0, [r3, #0]
   1f178:	4b0d      	ldr	r3, [pc, #52]	; (1f1b0 <delay_init+0x4c>)
   1f17a:	22fa      	movs	r2, #250	; 0xfa
   1f17c:	0091      	lsls	r1, r2, #2
   1f17e:	4798      	blx	r3
   1f180:	0003      	movs	r3, r0
   1f182:	001a      	movs	r2, r3
   1f184:	4b09      	ldr	r3, [pc, #36]	; (1f1ac <delay_init+0x48>)
   1f186:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
   1f188:	4b08      	ldr	r3, [pc, #32]	; (1f1ac <delay_init+0x48>)
   1f18a:	6818      	ldr	r0, [r3, #0]
   1f18c:	4b08      	ldr	r3, [pc, #32]	; (1f1b0 <delay_init+0x4c>)
   1f18e:	22fa      	movs	r2, #250	; 0xfa
   1f190:	0091      	lsls	r1, r2, #2
   1f192:	4798      	blx	r3
   1f194:	0003      	movs	r3, r0
   1f196:	001a      	movs	r2, r3
   1f198:	4b06      	ldr	r3, [pc, #24]	; (1f1b4 <delay_init+0x50>)
   1f19a:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   1f19c:	4b06      	ldr	r3, [pc, #24]	; (1f1b8 <delay_init+0x54>)
   1f19e:	2205      	movs	r2, #5
   1f1a0:	601a      	str	r2, [r3, #0]
}
   1f1a2:	46c0      	nop			; (mov r8, r8)
   1f1a4:	46bd      	mov	sp, r7
   1f1a6:	bd80      	pop	{r7, pc}
   1f1a8:	00028e65 	.word	0x00028e65
   1f1ac:	2000010c 	.word	0x2000010c
   1f1b0:	00031b25 	.word	0x00031b25
   1f1b4:	20000110 	.word	0x20000110
   1f1b8:	e000e010 	.word	0xe000e010

0001f1bc <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
   1f1bc:	b580      	push	{r7, lr}
   1f1be:	b082      	sub	sp, #8
   1f1c0:	af00      	add	r7, sp, #0
   1f1c2:	6078      	str	r0, [r7, #4]
	while (n--) {
   1f1c4:	e004      	b.n	1f1d0 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
   1f1c6:	4b07      	ldr	r3, [pc, #28]	; (1f1e4 <delay_cycles_ms+0x28>)
   1f1c8:	681b      	ldr	r3, [r3, #0]
   1f1ca:	0018      	movs	r0, r3
   1f1cc:	4b06      	ldr	r3, [pc, #24]	; (1f1e8 <delay_cycles_ms+0x2c>)
   1f1ce:	4798      	blx	r3
	while (n--) {
   1f1d0:	687b      	ldr	r3, [r7, #4]
   1f1d2:	1e5a      	subs	r2, r3, #1
   1f1d4:	607a      	str	r2, [r7, #4]
   1f1d6:	2b00      	cmp	r3, #0
   1f1d8:	d1f5      	bne.n	1f1c6 <delay_cycles_ms+0xa>
	}
}
   1f1da:	46c0      	nop			; (mov r8, r8)
   1f1dc:	46bd      	mov	sp, r7
   1f1de:	b002      	add	sp, #8
   1f1e0:	bd80      	pop	{r7, pc}
   1f1e2:	46c0      	nop			; (mov r8, r8)
   1f1e4:	2000010c 	.word	0x2000010c
   1f1e8:	0001f131 	.word	0x0001f131

0001f1ec <system_pinmux_get_group_from_gpio_pin>:
{
   1f1ec:	b580      	push	{r7, lr}
   1f1ee:	b084      	sub	sp, #16
   1f1f0:	af00      	add	r7, sp, #0
   1f1f2:	0002      	movs	r2, r0
   1f1f4:	1dfb      	adds	r3, r7, #7
   1f1f6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1f1f8:	230f      	movs	r3, #15
   1f1fa:	18fb      	adds	r3, r7, r3
   1f1fc:	1dfa      	adds	r2, r7, #7
   1f1fe:	7812      	ldrb	r2, [r2, #0]
   1f200:	09d2      	lsrs	r2, r2, #7
   1f202:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1f204:	230e      	movs	r3, #14
   1f206:	18fb      	adds	r3, r7, r3
   1f208:	1dfa      	adds	r2, r7, #7
   1f20a:	7812      	ldrb	r2, [r2, #0]
   1f20c:	0952      	lsrs	r2, r2, #5
   1f20e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1f210:	4b0d      	ldr	r3, [pc, #52]	; (1f248 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1f212:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1f214:	230f      	movs	r3, #15
   1f216:	18fb      	adds	r3, r7, r3
   1f218:	781b      	ldrb	r3, [r3, #0]
   1f21a:	2b00      	cmp	r3, #0
   1f21c:	d10f      	bne.n	1f23e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1f21e:	230f      	movs	r3, #15
   1f220:	18fb      	adds	r3, r7, r3
   1f222:	781b      	ldrb	r3, [r3, #0]
   1f224:	009b      	lsls	r3, r3, #2
   1f226:	2210      	movs	r2, #16
   1f228:	4694      	mov	ip, r2
   1f22a:	44bc      	add	ip, r7
   1f22c:	4463      	add	r3, ip
   1f22e:	3b08      	subs	r3, #8
   1f230:	681a      	ldr	r2, [r3, #0]
   1f232:	230e      	movs	r3, #14
   1f234:	18fb      	adds	r3, r7, r3
   1f236:	781b      	ldrb	r3, [r3, #0]
   1f238:	01db      	lsls	r3, r3, #7
   1f23a:	18d3      	adds	r3, r2, r3
   1f23c:	e000      	b.n	1f240 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1f23e:	2300      	movs	r3, #0
}
   1f240:	0018      	movs	r0, r3
   1f242:	46bd      	mov	sp, r7
   1f244:	b004      	add	sp, #16
   1f246:	bd80      	pop	{r7, pc}
   1f248:	41004400 	.word	0x41004400

0001f24c <system_interrupt_enable_global>:
{
   1f24c:	b580      	push	{r7, lr}
   1f24e:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   1f250:	4b04      	ldr	r3, [pc, #16]	; (1f264 <system_interrupt_enable_global+0x18>)
   1f252:	2201      	movs	r2, #1
   1f254:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   1f256:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   1f25a:	b662      	cpsie	i
}
   1f25c:	46c0      	nop			; (mov r8, r8)
   1f25e:	46bd      	mov	sp, r7
   1f260:	bd80      	pop	{r7, pc}
   1f262:	46c0      	nop			; (mov r8, r8)
   1f264:	20000116 	.word	0x20000116

0001f268 <port_get_group_from_gpio_pin>:
{
   1f268:	b580      	push	{r7, lr}
   1f26a:	b082      	sub	sp, #8
   1f26c:	af00      	add	r7, sp, #0
   1f26e:	0002      	movs	r2, r0
   1f270:	1dfb      	adds	r3, r7, #7
   1f272:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1f274:	1dfb      	adds	r3, r7, #7
   1f276:	781b      	ldrb	r3, [r3, #0]
   1f278:	0018      	movs	r0, r3
   1f27a:	4b03      	ldr	r3, [pc, #12]	; (1f288 <port_get_group_from_gpio_pin+0x20>)
   1f27c:	4798      	blx	r3
   1f27e:	0003      	movs	r3, r0
}
   1f280:	0018      	movs	r0, r3
   1f282:	46bd      	mov	sp, r7
   1f284:	b002      	add	sp, #8
   1f286:	bd80      	pop	{r7, pc}
   1f288:	0001f1ed 	.word	0x0001f1ed

0001f28c <port_get_config_defaults>:
{
   1f28c:	b580      	push	{r7, lr}
   1f28e:	b082      	sub	sp, #8
   1f290:	af00      	add	r7, sp, #0
   1f292:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1f294:	687b      	ldr	r3, [r7, #4]
   1f296:	2200      	movs	r2, #0
   1f298:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1f29a:	687b      	ldr	r3, [r7, #4]
   1f29c:	2201      	movs	r2, #1
   1f29e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1f2a0:	687b      	ldr	r3, [r7, #4]
   1f2a2:	2200      	movs	r2, #0
   1f2a4:	709a      	strb	r2, [r3, #2]
}
   1f2a6:	46c0      	nop			; (mov r8, r8)
   1f2a8:	46bd      	mov	sp, r7
   1f2aa:	b002      	add	sp, #8
   1f2ac:	bd80      	pop	{r7, pc}
	...

0001f2b0 <port_pin_set_output_level>:
{
   1f2b0:	b580      	push	{r7, lr}
   1f2b2:	b084      	sub	sp, #16
   1f2b4:	af00      	add	r7, sp, #0
   1f2b6:	0002      	movs	r2, r0
   1f2b8:	1dfb      	adds	r3, r7, #7
   1f2ba:	701a      	strb	r2, [r3, #0]
   1f2bc:	1dbb      	adds	r3, r7, #6
   1f2be:	1c0a      	adds	r2, r1, #0
   1f2c0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1f2c2:	1dfb      	adds	r3, r7, #7
   1f2c4:	781b      	ldrb	r3, [r3, #0]
   1f2c6:	0018      	movs	r0, r3
   1f2c8:	4b0d      	ldr	r3, [pc, #52]	; (1f300 <port_pin_set_output_level+0x50>)
   1f2ca:	4798      	blx	r3
   1f2cc:	0003      	movs	r3, r0
   1f2ce:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1f2d0:	1dfb      	adds	r3, r7, #7
   1f2d2:	781b      	ldrb	r3, [r3, #0]
   1f2d4:	221f      	movs	r2, #31
   1f2d6:	4013      	ands	r3, r2
   1f2d8:	2201      	movs	r2, #1
   1f2da:	409a      	lsls	r2, r3
   1f2dc:	0013      	movs	r3, r2
   1f2de:	60bb      	str	r3, [r7, #8]
	if (level) {
   1f2e0:	1dbb      	adds	r3, r7, #6
   1f2e2:	781b      	ldrb	r3, [r3, #0]
   1f2e4:	2b00      	cmp	r3, #0
   1f2e6:	d003      	beq.n	1f2f0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1f2e8:	68fb      	ldr	r3, [r7, #12]
   1f2ea:	68ba      	ldr	r2, [r7, #8]
   1f2ec:	619a      	str	r2, [r3, #24]
}
   1f2ee:	e002      	b.n	1f2f6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1f2f0:	68fb      	ldr	r3, [r7, #12]
   1f2f2:	68ba      	ldr	r2, [r7, #8]
   1f2f4:	615a      	str	r2, [r3, #20]
}
   1f2f6:	46c0      	nop			; (mov r8, r8)
   1f2f8:	46bd      	mov	sp, r7
   1f2fa:	b004      	add	sp, #16
   1f2fc:	bd80      	pop	{r7, pc}
   1f2fe:	46c0      	nop			; (mov r8, r8)
   1f300:	0001f269 	.word	0x0001f269

0001f304 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
   1f304:	b580      	push	{r7, lr}
   1f306:	af00      	add	r7, sp, #0
	if (gpfIsr) {
   1f308:	4b04      	ldr	r3, [pc, #16]	; (1f31c <chip_isr+0x18>)
   1f30a:	681b      	ldr	r3, [r3, #0]
   1f30c:	2b00      	cmp	r3, #0
   1f30e:	d002      	beq.n	1f316 <chip_isr+0x12>
		gpfIsr();
   1f310:	4b02      	ldr	r3, [pc, #8]	; (1f31c <chip_isr+0x18>)
   1f312:	681b      	ldr	r3, [r3, #0]
   1f314:	4798      	blx	r3
	}
}
   1f316:	46c0      	nop			; (mov r8, r8)
   1f318:	46bd      	mov	sp, r7
   1f31a:	bd80      	pop	{r7, pc}
   1f31c:	2000426c 	.word	0x2000426c

0001f320 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
   1f320:	b580      	push	{r7, lr}
   1f322:	b082      	sub	sp, #8
   1f324:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
   1f326:	1d3b      	adds	r3, r7, #4
   1f328:	0018      	movs	r0, r3
   1f32a:	4b10      	ldr	r3, [pc, #64]	; (1f36c <init_chip_pins+0x4c>)
   1f32c:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   1f32e:	1d3b      	adds	r3, r7, #4
   1f330:	2201      	movs	r2, #1
   1f332:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
   1f334:	1d3b      	adds	r3, r7, #4
   1f336:	0019      	movs	r1, r3
   1f338:	201b      	movs	r0, #27
   1f33a:	4b0d      	ldr	r3, [pc, #52]	; (1f370 <init_chip_pins+0x50>)
   1f33c:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
   1f33e:	1d3b      	adds	r3, r7, #4
   1f340:	0019      	movs	r1, r3
   1f342:	201c      	movs	r0, #28
   1f344:	4b0a      	ldr	r3, [pc, #40]	; (1f370 <init_chip_pins+0x50>)
   1f346:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
   1f348:	1d3b      	adds	r3, r7, #4
   1f34a:	0019      	movs	r1, r3
   1f34c:	2028      	movs	r0, #40	; 0x28
   1f34e:	4b08      	ldr	r3, [pc, #32]	; (1f370 <init_chip_pins+0x50>)
   1f350:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   1f352:	2100      	movs	r1, #0
   1f354:	201c      	movs	r0, #28
   1f356:	4b07      	ldr	r3, [pc, #28]	; (1f374 <init_chip_pins+0x54>)
   1f358:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   1f35a:	2100      	movs	r1, #0
   1f35c:	201b      	movs	r0, #27
   1f35e:	4b05      	ldr	r3, [pc, #20]	; (1f374 <init_chip_pins+0x54>)
   1f360:	4798      	blx	r3
}
   1f362:	46c0      	nop			; (mov r8, r8)
   1f364:	46bd      	mov	sp, r7
   1f366:	b002      	add	sp, #8
   1f368:	bd80      	pop	{r7, pc}
   1f36a:	46c0      	nop			; (mov r8, r8)
   1f36c:	0001f28d 	.word	0x0001f28d
   1f370:	00025aad 	.word	0x00025aad
   1f374:	0001f2b1 	.word	0x0001f2b1

0001f378 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
   1f378:	b580      	push	{r7, lr}
   1f37a:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
   1f37c:	4b0b      	ldr	r3, [pc, #44]	; (1f3ac <nm_bsp_init+0x34>)
   1f37e:	2200      	movs	r2, #0
   1f380:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
   1f382:	4b0b      	ldr	r3, [pc, #44]	; (1f3b0 <nm_bsp_init+0x38>)
   1f384:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
   1f386:	4b0b      	ldr	r3, [pc, #44]	; (1f3b4 <nm_bsp_init+0x3c>)
   1f388:	681b      	ldr	r3, [r3, #0]
   1f38a:	2201      	movs	r2, #1
   1f38c:	4013      	ands	r3, r2
   1f38e:	d004      	beq.n	1f39a <nm_bsp_init+0x22>
   1f390:	4b08      	ldr	r3, [pc, #32]	; (1f3b4 <nm_bsp_init+0x3c>)
   1f392:	681b      	ldr	r3, [r3, #0]
   1f394:	2202      	movs	r2, #2
   1f396:	4013      	ands	r3, r2
   1f398:	d101      	bne.n	1f39e <nm_bsp_init+0x26>
	    delay_init();
   1f39a:	4b07      	ldr	r3, [pc, #28]	; (1f3b8 <nm_bsp_init+0x40>)
   1f39c:	4798      	blx	r3
    }

	system_interrupt_enable_global();
   1f39e:	4b07      	ldr	r3, [pc, #28]	; (1f3bc <nm_bsp_init+0x44>)
   1f3a0:	4798      	blx	r3

	return M2M_SUCCESS;
   1f3a2:	2300      	movs	r3, #0
}
   1f3a4:	0018      	movs	r0, r3
   1f3a6:	46bd      	mov	sp, r7
   1f3a8:	bd80      	pop	{r7, pc}
   1f3aa:	46c0      	nop			; (mov r8, r8)
   1f3ac:	2000426c 	.word	0x2000426c
   1f3b0:	0001f321 	.word	0x0001f321
   1f3b4:	e000e010 	.word	0xe000e010
   1f3b8:	0001f165 	.word	0x0001f165
   1f3bc:	0001f24d 	.word	0x0001f24d

0001f3c0 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
   1f3c0:	b580      	push	{r7, lr}
   1f3c2:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   1f3c4:	2100      	movs	r1, #0
   1f3c6:	201c      	movs	r0, #28
   1f3c8:	4b0b      	ldr	r3, [pc, #44]	; (1f3f8 <nm_bsp_reset+0x38>)
   1f3ca:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   1f3cc:	2100      	movs	r1, #0
   1f3ce:	201b      	movs	r0, #27
   1f3d0:	4b09      	ldr	r3, [pc, #36]	; (1f3f8 <nm_bsp_reset+0x38>)
   1f3d2:	4798      	blx	r3
	nm_bsp_sleep(1);
   1f3d4:	2001      	movs	r0, #1
   1f3d6:	4b09      	ldr	r3, [pc, #36]	; (1f3fc <nm_bsp_reset+0x3c>)
   1f3d8:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
   1f3da:	2101      	movs	r1, #1
   1f3dc:	201c      	movs	r0, #28
   1f3de:	4b06      	ldr	r3, [pc, #24]	; (1f3f8 <nm_bsp_reset+0x38>)
   1f3e0:	4798      	blx	r3
	nm_bsp_sleep(10);
   1f3e2:	200a      	movs	r0, #10
   1f3e4:	4b05      	ldr	r3, [pc, #20]	; (1f3fc <nm_bsp_reset+0x3c>)
   1f3e6:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
   1f3e8:	2101      	movs	r1, #1
   1f3ea:	201b      	movs	r0, #27
   1f3ec:	4b02      	ldr	r3, [pc, #8]	; (1f3f8 <nm_bsp_reset+0x38>)
   1f3ee:	4798      	blx	r3
}
   1f3f0:	46c0      	nop			; (mov r8, r8)
   1f3f2:	46bd      	mov	sp, r7
   1f3f4:	bd80      	pop	{r7, pc}
   1f3f6:	46c0      	nop			; (mov r8, r8)
   1f3f8:	0001f2b1 	.word	0x0001f2b1
   1f3fc:	0001f401 	.word	0x0001f401

0001f400 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
   1f400:	b580      	push	{r7, lr}
   1f402:	b082      	sub	sp, #8
   1f404:	af00      	add	r7, sp, #0
   1f406:	6078      	str	r0, [r7, #4]
#ifdef __FREERTOS__
	vTaskDelay(u32TimeMsec);
   1f408:	687b      	ldr	r3, [r7, #4]
   1f40a:	0018      	movs	r0, r3
   1f40c:	4b02      	ldr	r3, [pc, #8]	; (1f418 <nm_bsp_sleep+0x18>)
   1f40e:	4798      	blx	r3
	while (u32TimeMsec--) {
		delay_ms(1);
	}
	
#endif
}
   1f410:	46c0      	nop			; (mov r8, r8)
   1f412:	46bd      	mov	sp, r7
   1f414:	b002      	add	sp, #8
   1f416:	bd80      	pop	{r7, pc}
   1f418:	0001b1b1 	.word	0x0001b1b1

0001f41c <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
   1f41c:	b580      	push	{r7, lr}
   1f41e:	b086      	sub	sp, #24
   1f420:	af00      	add	r7, sp, #0
   1f422:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
   1f424:	4b15      	ldr	r3, [pc, #84]	; (1f47c <nm_bsp_register_isr+0x60>)
   1f426:	687a      	ldr	r2, [r7, #4]
   1f428:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
   1f42a:	230c      	movs	r3, #12
   1f42c:	18fb      	adds	r3, r7, r3
   1f42e:	0018      	movs	r0, r3
   1f430:	4b13      	ldr	r3, [pc, #76]	; (1f480 <nm_bsp_register_isr+0x64>)
   1f432:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
   1f434:	230c      	movs	r3, #12
   1f436:	18fb      	adds	r3, r7, r3
   1f438:	2229      	movs	r2, #41	; 0x29
   1f43a:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
   1f43c:	230c      	movs	r3, #12
   1f43e:	18fb      	adds	r3, r7, r3
   1f440:	2200      	movs	r2, #0
   1f442:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1f444:	230c      	movs	r3, #12
   1f446:	18fb      	adds	r3, r7, r3
   1f448:	2201      	movs	r2, #1
   1f44a:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1f44c:	230c      	movs	r3, #12
   1f44e:	18fb      	adds	r3, r7, r3
   1f450:	2202      	movs	r2, #2
   1f452:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
   1f454:	230c      	movs	r3, #12
   1f456:	18fb      	adds	r3, r7, r3
   1f458:	0019      	movs	r1, r3
   1f45a:	2009      	movs	r0, #9
   1f45c:	4b09      	ldr	r3, [pc, #36]	; (1f484 <nm_bsp_register_isr+0x68>)
   1f45e:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
   1f460:	4b09      	ldr	r3, [pc, #36]	; (1f488 <nm_bsp_register_isr+0x6c>)
   1f462:	2200      	movs	r2, #0
   1f464:	2109      	movs	r1, #9
   1f466:	0018      	movs	r0, r3
   1f468:	4b08      	ldr	r3, [pc, #32]	; (1f48c <nm_bsp_register_isr+0x70>)
   1f46a:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   1f46c:	2100      	movs	r1, #0
   1f46e:	2009      	movs	r0, #9
   1f470:	4b07      	ldr	r3, [pc, #28]	; (1f490 <nm_bsp_register_isr+0x74>)
   1f472:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
   1f474:	46c0      	nop			; (mov r8, r8)
   1f476:	46bd      	mov	sp, r7
   1f478:	b006      	add	sp, #24
   1f47a:	bd80      	pop	{r7, pc}
   1f47c:	2000426c 	.word	0x2000426c
   1f480:	00025955 	.word	0x00025955
   1f484:	00025989 	.word	0x00025989
   1f488:	0001f305 	.word	0x0001f305
   1f48c:	00025555 	.word	0x00025555
   1f490:	000255b9 	.word	0x000255b9

0001f494 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
   1f494:	b580      	push	{r7, lr}
   1f496:	b082      	sub	sp, #8
   1f498:	af00      	add	r7, sp, #0
   1f49a:	0002      	movs	r2, r0
   1f49c:	1dfb      	adds	r3, r7, #7
   1f49e:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
   1f4a0:	1dfb      	adds	r3, r7, #7
   1f4a2:	781b      	ldrb	r3, [r3, #0]
   1f4a4:	2b00      	cmp	r3, #0
   1f4a6:	d004      	beq.n	1f4b2 <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   1f4a8:	2100      	movs	r1, #0
   1f4aa:	2009      	movs	r0, #9
   1f4ac:	4b05      	ldr	r3, [pc, #20]	; (1f4c4 <nm_bsp_interrupt_ctrl+0x30>)
   1f4ae:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
   1f4b0:	e003      	b.n	1f4ba <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
   1f4b2:	2100      	movs	r1, #0
   1f4b4:	2009      	movs	r0, #9
   1f4b6:	4b04      	ldr	r3, [pc, #16]	; (1f4c8 <nm_bsp_interrupt_ctrl+0x34>)
   1f4b8:	4798      	blx	r3
}
   1f4ba:	46c0      	nop			; (mov r8, r8)
   1f4bc:	46bd      	mov	sp, r7
   1f4be:	b002      	add	sp, #8
   1f4c0:	bd80      	pop	{r7, pc}
   1f4c2:	46c0      	nop			; (mov r8, r8)
   1f4c4:	000255b9 	.word	0x000255b9
   1f4c8:	00025601 	.word	0x00025601

0001f4cc <system_pinmux_get_group_from_gpio_pin>:
{
   1f4cc:	b580      	push	{r7, lr}
   1f4ce:	b084      	sub	sp, #16
   1f4d0:	af00      	add	r7, sp, #0
   1f4d2:	0002      	movs	r2, r0
   1f4d4:	1dfb      	adds	r3, r7, #7
   1f4d6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1f4d8:	230f      	movs	r3, #15
   1f4da:	18fb      	adds	r3, r7, r3
   1f4dc:	1dfa      	adds	r2, r7, #7
   1f4de:	7812      	ldrb	r2, [r2, #0]
   1f4e0:	09d2      	lsrs	r2, r2, #7
   1f4e2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1f4e4:	230e      	movs	r3, #14
   1f4e6:	18fb      	adds	r3, r7, r3
   1f4e8:	1dfa      	adds	r2, r7, #7
   1f4ea:	7812      	ldrb	r2, [r2, #0]
   1f4ec:	0952      	lsrs	r2, r2, #5
   1f4ee:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1f4f0:	4b0d      	ldr	r3, [pc, #52]	; (1f528 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1f4f2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1f4f4:	230f      	movs	r3, #15
   1f4f6:	18fb      	adds	r3, r7, r3
   1f4f8:	781b      	ldrb	r3, [r3, #0]
   1f4fa:	2b00      	cmp	r3, #0
   1f4fc:	d10f      	bne.n	1f51e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1f4fe:	230f      	movs	r3, #15
   1f500:	18fb      	adds	r3, r7, r3
   1f502:	781b      	ldrb	r3, [r3, #0]
   1f504:	009b      	lsls	r3, r3, #2
   1f506:	2210      	movs	r2, #16
   1f508:	4694      	mov	ip, r2
   1f50a:	44bc      	add	ip, r7
   1f50c:	4463      	add	r3, ip
   1f50e:	3b08      	subs	r3, #8
   1f510:	681a      	ldr	r2, [r3, #0]
   1f512:	230e      	movs	r3, #14
   1f514:	18fb      	adds	r3, r7, r3
   1f516:	781b      	ldrb	r3, [r3, #0]
   1f518:	01db      	lsls	r3, r3, #7
   1f51a:	18d3      	adds	r3, r2, r3
   1f51c:	e000      	b.n	1f520 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1f51e:	2300      	movs	r3, #0
}
   1f520:	0018      	movs	r0, r3
   1f522:	46bd      	mov	sp, r7
   1f524:	b004      	add	sp, #16
   1f526:	bd80      	pop	{r7, pc}
   1f528:	41004400 	.word	0x41004400

0001f52c <system_interrupt_enable>:
{
   1f52c:	b580      	push	{r7, lr}
   1f52e:	b082      	sub	sp, #8
   1f530:	af00      	add	r7, sp, #0
   1f532:	0002      	movs	r2, r0
   1f534:	1dfb      	adds	r3, r7, #7
   1f536:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1f538:	4b06      	ldr	r3, [pc, #24]	; (1f554 <system_interrupt_enable+0x28>)
   1f53a:	1dfa      	adds	r2, r7, #7
   1f53c:	7812      	ldrb	r2, [r2, #0]
   1f53e:	0011      	movs	r1, r2
   1f540:	221f      	movs	r2, #31
   1f542:	400a      	ands	r2, r1
   1f544:	2101      	movs	r1, #1
   1f546:	4091      	lsls	r1, r2
   1f548:	000a      	movs	r2, r1
   1f54a:	601a      	str	r2, [r3, #0]
}
   1f54c:	46c0      	nop			; (mov r8, r8)
   1f54e:	46bd      	mov	sp, r7
   1f550:	b002      	add	sp, #8
   1f552:	bd80      	pop	{r7, pc}
   1f554:	e000e100 	.word	0xe000e100

0001f558 <system_interrupt_disable>:
{
   1f558:	b580      	push	{r7, lr}
   1f55a:	b082      	sub	sp, #8
   1f55c:	af00      	add	r7, sp, #0
   1f55e:	0002      	movs	r2, r0
   1f560:	1dfb      	adds	r3, r7, #7
   1f562:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1f564:	4a07      	ldr	r2, [pc, #28]	; (1f584 <system_interrupt_disable+0x2c>)
   1f566:	1dfb      	adds	r3, r7, #7
   1f568:	781b      	ldrb	r3, [r3, #0]
   1f56a:	0019      	movs	r1, r3
   1f56c:	231f      	movs	r3, #31
   1f56e:	400b      	ands	r3, r1
   1f570:	2101      	movs	r1, #1
   1f572:	4099      	lsls	r1, r3
   1f574:	000b      	movs	r3, r1
   1f576:	0019      	movs	r1, r3
   1f578:	2380      	movs	r3, #128	; 0x80
   1f57a:	50d1      	str	r1, [r2, r3]
}
   1f57c:	46c0      	nop			; (mov r8, r8)
   1f57e:	46bd      	mov	sp, r7
   1f580:	b002      	add	sp, #8
   1f582:	bd80      	pop	{r7, pc}
   1f584:	e000e100 	.word	0xe000e100

0001f588 <port_get_group_from_gpio_pin>:
{
   1f588:	b580      	push	{r7, lr}
   1f58a:	b082      	sub	sp, #8
   1f58c:	af00      	add	r7, sp, #0
   1f58e:	0002      	movs	r2, r0
   1f590:	1dfb      	adds	r3, r7, #7
   1f592:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1f594:	1dfb      	adds	r3, r7, #7
   1f596:	781b      	ldrb	r3, [r3, #0]
   1f598:	0018      	movs	r0, r3
   1f59a:	4b03      	ldr	r3, [pc, #12]	; (1f5a8 <port_get_group_from_gpio_pin+0x20>)
   1f59c:	4798      	blx	r3
   1f59e:	0003      	movs	r3, r0
}
   1f5a0:	0018      	movs	r0, r3
   1f5a2:	46bd      	mov	sp, r7
   1f5a4:	b002      	add	sp, #8
   1f5a6:	bd80      	pop	{r7, pc}
   1f5a8:	0001f4cd 	.word	0x0001f4cd

0001f5ac <port_get_config_defaults>:
{
   1f5ac:	b580      	push	{r7, lr}
   1f5ae:	b082      	sub	sp, #8
   1f5b0:	af00      	add	r7, sp, #0
   1f5b2:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1f5b4:	687b      	ldr	r3, [r7, #4]
   1f5b6:	2200      	movs	r2, #0
   1f5b8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1f5ba:	687b      	ldr	r3, [r7, #4]
   1f5bc:	2201      	movs	r2, #1
   1f5be:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1f5c0:	687b      	ldr	r3, [r7, #4]
   1f5c2:	2200      	movs	r2, #0
   1f5c4:	709a      	strb	r2, [r3, #2]
}
   1f5c6:	46c0      	nop			; (mov r8, r8)
   1f5c8:	46bd      	mov	sp, r7
   1f5ca:	b002      	add	sp, #8
   1f5cc:	bd80      	pop	{r7, pc}
	...

0001f5d0 <port_pin_set_output_level>:
{
   1f5d0:	b580      	push	{r7, lr}
   1f5d2:	b084      	sub	sp, #16
   1f5d4:	af00      	add	r7, sp, #0
   1f5d6:	0002      	movs	r2, r0
   1f5d8:	1dfb      	adds	r3, r7, #7
   1f5da:	701a      	strb	r2, [r3, #0]
   1f5dc:	1dbb      	adds	r3, r7, #6
   1f5de:	1c0a      	adds	r2, r1, #0
   1f5e0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1f5e2:	1dfb      	adds	r3, r7, #7
   1f5e4:	781b      	ldrb	r3, [r3, #0]
   1f5e6:	0018      	movs	r0, r3
   1f5e8:	4b0d      	ldr	r3, [pc, #52]	; (1f620 <port_pin_set_output_level+0x50>)
   1f5ea:	4798      	blx	r3
   1f5ec:	0003      	movs	r3, r0
   1f5ee:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1f5f0:	1dfb      	adds	r3, r7, #7
   1f5f2:	781b      	ldrb	r3, [r3, #0]
   1f5f4:	221f      	movs	r2, #31
   1f5f6:	4013      	ands	r3, r2
   1f5f8:	2201      	movs	r2, #1
   1f5fa:	409a      	lsls	r2, r3
   1f5fc:	0013      	movs	r3, r2
   1f5fe:	60bb      	str	r3, [r7, #8]
	if (level) {
   1f600:	1dbb      	adds	r3, r7, #6
   1f602:	781b      	ldrb	r3, [r3, #0]
   1f604:	2b00      	cmp	r3, #0
   1f606:	d003      	beq.n	1f610 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1f608:	68fb      	ldr	r3, [r7, #12]
   1f60a:	68ba      	ldr	r2, [r7, #8]
   1f60c:	619a      	str	r2, [r3, #24]
}
   1f60e:	e002      	b.n	1f616 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1f610:	68fb      	ldr	r3, [r7, #12]
   1f612:	68ba      	ldr	r2, [r7, #8]
   1f614:	615a      	str	r2, [r3, #20]
}
   1f616:	46c0      	nop			; (mov r8, r8)
   1f618:	46bd      	mov	sp, r7
   1f61a:	b004      	add	sp, #16
   1f61c:	bd80      	pop	{r7, pc}
   1f61e:	46c0      	nop			; (mov r8, r8)
   1f620:	0001f589 	.word	0x0001f589

0001f624 <spi_is_syncing>:
{
   1f624:	b580      	push	{r7, lr}
   1f626:	b084      	sub	sp, #16
   1f628:	af00      	add	r7, sp, #0
   1f62a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1f62c:	687b      	ldr	r3, [r7, #4]
   1f62e:	681b      	ldr	r3, [r3, #0]
   1f630:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   1f632:	68fb      	ldr	r3, [r7, #12]
   1f634:	69db      	ldr	r3, [r3, #28]
   1f636:	1e5a      	subs	r2, r3, #1
   1f638:	4193      	sbcs	r3, r2
   1f63a:	b2db      	uxtb	r3, r3
}
   1f63c:	0018      	movs	r0, r3
   1f63e:	46bd      	mov	sp, r7
   1f640:	b004      	add	sp, #16
   1f642:	bd80      	pop	{r7, pc}

0001f644 <spi_get_config_defaults>:
{
   1f644:	b580      	push	{r7, lr}
   1f646:	b082      	sub	sp, #8
   1f648:	af00      	add	r7, sp, #0
   1f64a:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
   1f64c:	687b      	ldr	r3, [r7, #4]
   1f64e:	2201      	movs	r2, #1
   1f650:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   1f652:	687b      	ldr	r3, [r7, #4]
   1f654:	2200      	movs	r2, #0
   1f656:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   1f658:	687b      	ldr	r3, [r7, #4]
   1f65a:	2200      	movs	r2, #0
   1f65c:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   1f65e:	687b      	ldr	r3, [r7, #4]
   1f660:	22c0      	movs	r2, #192	; 0xc0
   1f662:	0392      	lsls	r2, r2, #14
   1f664:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   1f666:	687b      	ldr	r3, [r7, #4]
   1f668:	2200      	movs	r2, #0
   1f66a:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   1f66c:	687b      	ldr	r3, [r7, #4]
   1f66e:	2200      	movs	r2, #0
   1f670:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   1f672:	687b      	ldr	r3, [r7, #4]
   1f674:	2201      	movs	r2, #1
   1f676:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
   1f678:	687b      	ldr	r3, [r7, #4]
   1f67a:	2201      	movs	r2, #1
   1f67c:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
   1f67e:	687b      	ldr	r3, [r7, #4]
   1f680:	2200      	movs	r2, #0
   1f682:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
   1f684:	687b      	ldr	r3, [r7, #4]
   1f686:	2224      	movs	r2, #36	; 0x24
   1f688:	2100      	movs	r1, #0
   1f68a:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   1f68c:	687b      	ldr	r3, [r7, #4]
   1f68e:	3318      	adds	r3, #24
   1f690:	220c      	movs	r2, #12
   1f692:	2100      	movs	r1, #0
   1f694:	0018      	movs	r0, r3
   1f696:	4b0a      	ldr	r3, [pc, #40]	; (1f6c0 <spi_get_config_defaults+0x7c>)
   1f698:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
   1f69a:	687b      	ldr	r3, [r7, #4]
   1f69c:	4a09      	ldr	r2, [pc, #36]	; (1f6c4 <spi_get_config_defaults+0x80>)
   1f69e:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
   1f6a0:	687b      	ldr	r3, [r7, #4]
   1f6a2:	2200      	movs	r2, #0
   1f6a4:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   1f6a6:	687b      	ldr	r3, [r7, #4]
   1f6a8:	2200      	movs	r2, #0
   1f6aa:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   1f6ac:	687b      	ldr	r3, [r7, #4]
   1f6ae:	2200      	movs	r2, #0
   1f6b0:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   1f6b2:	687b      	ldr	r3, [r7, #4]
   1f6b4:	2200      	movs	r2, #0
   1f6b6:	635a      	str	r2, [r3, #52]	; 0x34
};
   1f6b8:	46c0      	nop			; (mov r8, r8)
   1f6ba:	46bd      	mov	sp, r7
   1f6bc:	b002      	add	sp, #8
   1f6be:	bd80      	pop	{r7, pc}
   1f6c0:	000345df 	.word	0x000345df
   1f6c4:	000186a0 	.word	0x000186a0

0001f6c8 <spi_slave_inst_get_config_defaults>:
{
   1f6c8:	b580      	push	{r7, lr}
   1f6ca:	b082      	sub	sp, #8
   1f6cc:	af00      	add	r7, sp, #0
   1f6ce:	6078      	str	r0, [r7, #4]
	config->ss_pin          = 10;
   1f6d0:	687b      	ldr	r3, [r7, #4]
   1f6d2:	220a      	movs	r2, #10
   1f6d4:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   1f6d6:	687b      	ldr	r3, [r7, #4]
   1f6d8:	2200      	movs	r2, #0
   1f6da:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   1f6dc:	687b      	ldr	r3, [r7, #4]
   1f6de:	2200      	movs	r2, #0
   1f6e0:	709a      	strb	r2, [r3, #2]
}
   1f6e2:	46c0      	nop			; (mov r8, r8)
   1f6e4:	46bd      	mov	sp, r7
   1f6e6:	b002      	add	sp, #8
   1f6e8:	bd80      	pop	{r7, pc}
	...

0001f6ec <spi_attach_slave>:
{
   1f6ec:	b580      	push	{r7, lr}
   1f6ee:	b084      	sub	sp, #16
   1f6f0:	af00      	add	r7, sp, #0
   1f6f2:	6078      	str	r0, [r7, #4]
   1f6f4:	6039      	str	r1, [r7, #0]
	slave->ss_pin          = config->ss_pin;
   1f6f6:	683b      	ldr	r3, [r7, #0]
   1f6f8:	781a      	ldrb	r2, [r3, #0]
   1f6fa:	687b      	ldr	r3, [r7, #4]
   1f6fc:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   1f6fe:	683b      	ldr	r3, [r7, #0]
   1f700:	785a      	ldrb	r2, [r3, #1]
   1f702:	687b      	ldr	r3, [r7, #4]
   1f704:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   1f706:	683b      	ldr	r3, [r7, #0]
   1f708:	789a      	ldrb	r2, [r3, #2]
   1f70a:	687b      	ldr	r3, [r7, #4]
   1f70c:	709a      	strb	r2, [r3, #2]
	port_get_config_defaults(&pin_conf);
   1f70e:	230c      	movs	r3, #12
   1f710:	18fb      	adds	r3, r7, r3
   1f712:	0018      	movs	r0, r3
   1f714:	4b0b      	ldr	r3, [pc, #44]	; (1f744 <spi_attach_slave+0x58>)
   1f716:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   1f718:	230c      	movs	r3, #12
   1f71a:	18fb      	adds	r3, r7, r3
   1f71c:	2201      	movs	r2, #1
   1f71e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1f720:	687b      	ldr	r3, [r7, #4]
   1f722:	781b      	ldrb	r3, [r3, #0]
   1f724:	220c      	movs	r2, #12
   1f726:	18ba      	adds	r2, r7, r2
   1f728:	0011      	movs	r1, r2
   1f72a:	0018      	movs	r0, r3
   1f72c:	4b06      	ldr	r3, [pc, #24]	; (1f748 <spi_attach_slave+0x5c>)
   1f72e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   1f730:	687b      	ldr	r3, [r7, #4]
   1f732:	781b      	ldrb	r3, [r3, #0]
   1f734:	2101      	movs	r1, #1
   1f736:	0018      	movs	r0, r3
   1f738:	4b04      	ldr	r3, [pc, #16]	; (1f74c <spi_attach_slave+0x60>)
   1f73a:	4798      	blx	r3
}
   1f73c:	46c0      	nop			; (mov r8, r8)
   1f73e:	46bd      	mov	sp, r7
   1f740:	b004      	add	sp, #16
   1f742:	bd80      	pop	{r7, pc}
   1f744:	0001f5ad 	.word	0x0001f5ad
   1f748:	00025aad 	.word	0x00025aad
   1f74c:	0001f5d1 	.word	0x0001f5d1

0001f750 <spi_enable>:
{
   1f750:	b580      	push	{r7, lr}
   1f752:	b084      	sub	sp, #16
   1f754:	af00      	add	r7, sp, #0
   1f756:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1f758:	687b      	ldr	r3, [r7, #4]
   1f75a:	681b      	ldr	r3, [r3, #0]
   1f75c:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1f75e:	687b      	ldr	r3, [r7, #4]
   1f760:	681b      	ldr	r3, [r3, #0]
   1f762:	0018      	movs	r0, r3
   1f764:	4b0b      	ldr	r3, [pc, #44]	; (1f794 <spi_enable+0x44>)
   1f766:	4798      	blx	r3
   1f768:	0003      	movs	r3, r0
   1f76a:	0018      	movs	r0, r3
   1f76c:	4b0a      	ldr	r3, [pc, #40]	; (1f798 <spi_enable+0x48>)
   1f76e:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   1f770:	46c0      	nop			; (mov r8, r8)
   1f772:	687b      	ldr	r3, [r7, #4]
   1f774:	0018      	movs	r0, r3
   1f776:	4b09      	ldr	r3, [pc, #36]	; (1f79c <spi_enable+0x4c>)
   1f778:	4798      	blx	r3
   1f77a:	1e03      	subs	r3, r0, #0
   1f77c:	d1f9      	bne.n	1f772 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   1f77e:	68fb      	ldr	r3, [r7, #12]
   1f780:	681b      	ldr	r3, [r3, #0]
   1f782:	2202      	movs	r2, #2
   1f784:	431a      	orrs	r2, r3
   1f786:	68fb      	ldr	r3, [r7, #12]
   1f788:	601a      	str	r2, [r3, #0]
}
   1f78a:	46c0      	nop			; (mov r8, r8)
   1f78c:	46bd      	mov	sp, r7
   1f78e:	b004      	add	sp, #16
   1f790:	bd80      	pop	{r7, pc}
   1f792:	46c0      	nop			; (mov r8, r8)
   1f794:	0002677d 	.word	0x0002677d
   1f798:	0001f52d 	.word	0x0001f52d
   1f79c:	0001f625 	.word	0x0001f625

0001f7a0 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
   1f7a0:	b580      	push	{r7, lr}
   1f7a2:	b084      	sub	sp, #16
   1f7a4:	af00      	add	r7, sp, #0
   1f7a6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1f7a8:	687b      	ldr	r3, [r7, #4]
   1f7aa:	681b      	ldr	r3, [r3, #0]
   1f7ac:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   1f7ae:	687b      	ldr	r3, [r7, #4]
   1f7b0:	681b      	ldr	r3, [r3, #0]
   1f7b2:	0018      	movs	r0, r3
   1f7b4:	4b0e      	ldr	r3, [pc, #56]	; (1f7f0 <spi_disable+0x50>)
   1f7b6:	4798      	blx	r3
   1f7b8:	0003      	movs	r3, r0
   1f7ba:	0018      	movs	r0, r3
   1f7bc:	4b0d      	ldr	r3, [pc, #52]	; (1f7f4 <spi_disable+0x54>)
   1f7be:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   1f7c0:	46c0      	nop			; (mov r8, r8)
   1f7c2:	687b      	ldr	r3, [r7, #4]
   1f7c4:	0018      	movs	r0, r3
   1f7c6:	4b0c      	ldr	r3, [pc, #48]	; (1f7f8 <spi_disable+0x58>)
   1f7c8:	4798      	blx	r3
   1f7ca:	1e03      	subs	r3, r0, #0
   1f7cc:	d1f9      	bne.n	1f7c2 <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   1f7ce:	68fb      	ldr	r3, [r7, #12]
   1f7d0:	228f      	movs	r2, #143	; 0x8f
   1f7d2:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   1f7d4:	68fb      	ldr	r3, [r7, #12]
   1f7d6:	228f      	movs	r2, #143	; 0x8f
   1f7d8:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   1f7da:	68fb      	ldr	r3, [r7, #12]
   1f7dc:	681b      	ldr	r3, [r3, #0]
   1f7de:	2202      	movs	r2, #2
   1f7e0:	4393      	bics	r3, r2
   1f7e2:	001a      	movs	r2, r3
   1f7e4:	68fb      	ldr	r3, [r7, #12]
   1f7e6:	601a      	str	r2, [r3, #0]
}
   1f7e8:	46c0      	nop			; (mov r8, r8)
   1f7ea:	46bd      	mov	sp, r7
   1f7ec:	b004      	add	sp, #16
   1f7ee:	bd80      	pop	{r7, pc}
   1f7f0:	0002677d 	.word	0x0002677d
   1f7f4:	0001f559 	.word	0x0001f559
   1f7f8:	0001f625 	.word	0x0001f625

0001f7fc <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
   1f7fc:	b580      	push	{r7, lr}
   1f7fe:	b084      	sub	sp, #16
   1f800:	af00      	add	r7, sp, #0
   1f802:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1f804:	687b      	ldr	r3, [r7, #4]
   1f806:	681b      	ldr	r3, [r3, #0]
   1f808:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   1f80a:	68fb      	ldr	r3, [r7, #12]
   1f80c:	7e1b      	ldrb	r3, [r3, #24]
   1f80e:	b2db      	uxtb	r3, r3
   1f810:	001a      	movs	r2, r3
   1f812:	2302      	movs	r3, #2
   1f814:	4013      	ands	r3, r2
   1f816:	1e5a      	subs	r2, r3, #1
   1f818:	4193      	sbcs	r3, r2
   1f81a:	b2db      	uxtb	r3, r3
}
   1f81c:	0018      	movs	r0, r3
   1f81e:	46bd      	mov	sp, r7
   1f820:	b004      	add	sp, #16
   1f822:	bd80      	pop	{r7, pc}

0001f824 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
   1f824:	b580      	push	{r7, lr}
   1f826:	b084      	sub	sp, #16
   1f828:	af00      	add	r7, sp, #0
   1f82a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1f82c:	687b      	ldr	r3, [r7, #4]
   1f82e:	681b      	ldr	r3, [r3, #0]
   1f830:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   1f832:	68fb      	ldr	r3, [r7, #12]
   1f834:	7e1b      	ldrb	r3, [r3, #24]
   1f836:	b2db      	uxtb	r3, r3
   1f838:	001a      	movs	r2, r3
   1f83a:	2301      	movs	r3, #1
   1f83c:	4013      	ands	r3, r2
   1f83e:	1e5a      	subs	r2, r3, #1
   1f840:	4193      	sbcs	r3, r2
   1f842:	b2db      	uxtb	r3, r3
}
   1f844:	0018      	movs	r0, r3
   1f846:	46bd      	mov	sp, r7
   1f848:	b004      	add	sp, #16
   1f84a:	bd80      	pop	{r7, pc}

0001f84c <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
   1f84c:	b580      	push	{r7, lr}
   1f84e:	b084      	sub	sp, #16
   1f850:	af00      	add	r7, sp, #0
   1f852:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1f854:	687b      	ldr	r3, [r7, #4]
   1f856:	681b      	ldr	r3, [r3, #0]
   1f858:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   1f85a:	68fb      	ldr	r3, [r7, #12]
   1f85c:	7e1b      	ldrb	r3, [r3, #24]
   1f85e:	b2db      	uxtb	r3, r3
   1f860:	001a      	movs	r2, r3
   1f862:	2304      	movs	r3, #4
   1f864:	4013      	ands	r3, r2
   1f866:	1e5a      	subs	r2, r3, #1
   1f868:	4193      	sbcs	r3, r2
   1f86a:	b2db      	uxtb	r3, r3
}
   1f86c:	0018      	movs	r0, r3
   1f86e:	46bd      	mov	sp, r7
   1f870:	b004      	add	sp, #16
   1f872:	bd80      	pop	{r7, pc}

0001f874 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
   1f874:	b580      	push	{r7, lr}
   1f876:	b084      	sub	sp, #16
   1f878:	af00      	add	r7, sp, #0
   1f87a:	6078      	str	r0, [r7, #4]
   1f87c:	000a      	movs	r2, r1
   1f87e:	1cbb      	adds	r3, r7, #2
   1f880:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1f882:	687b      	ldr	r3, [r7, #4]
   1f884:	681b      	ldr	r3, [r3, #0]
   1f886:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
   1f888:	687b      	ldr	r3, [r7, #4]
   1f88a:	0018      	movs	r0, r3
   1f88c:	4b0a      	ldr	r3, [pc, #40]	; (1f8b8 <spi_write+0x44>)
   1f88e:	4798      	blx	r3
   1f890:	0003      	movs	r3, r0
   1f892:	001a      	movs	r2, r3
   1f894:	2301      	movs	r3, #1
   1f896:	4053      	eors	r3, r2
   1f898:	b2db      	uxtb	r3, r3
   1f89a:	2b00      	cmp	r3, #0
   1f89c:	d001      	beq.n	1f8a2 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
   1f89e:	2305      	movs	r3, #5
   1f8a0:	e006      	b.n	1f8b0 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   1f8a2:	1cbb      	adds	r3, r7, #2
   1f8a4:	881b      	ldrh	r3, [r3, #0]
   1f8a6:	05db      	lsls	r3, r3, #23
   1f8a8:	0dda      	lsrs	r2, r3, #23
   1f8aa:	68fb      	ldr	r3, [r7, #12]
   1f8ac:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
   1f8ae:	2300      	movs	r3, #0
}
   1f8b0:	0018      	movs	r0, r3
   1f8b2:	46bd      	mov	sp, r7
   1f8b4:	b004      	add	sp, #16
   1f8b6:	bd80      	pop	{r7, pc}
   1f8b8:	0001f825 	.word	0x0001f825

0001f8bc <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
   1f8bc:	b580      	push	{r7, lr}
   1f8be:	b084      	sub	sp, #16
   1f8c0:	af00      	add	r7, sp, #0
   1f8c2:	6078      	str	r0, [r7, #4]
   1f8c4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1f8c6:	687b      	ldr	r3, [r7, #4]
   1f8c8:	681b      	ldr	r3, [r3, #0]
   1f8ca:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
   1f8cc:	687b      	ldr	r3, [r7, #4]
   1f8ce:	0018      	movs	r0, r3
   1f8d0:	4b1b      	ldr	r3, [pc, #108]	; (1f940 <spi_read+0x84>)
   1f8d2:	4798      	blx	r3
   1f8d4:	0003      	movs	r3, r0
   1f8d6:	001a      	movs	r2, r3
   1f8d8:	2301      	movs	r3, #1
   1f8da:	4053      	eors	r3, r2
   1f8dc:	b2db      	uxtb	r3, r3
   1f8de:	2b00      	cmp	r3, #0
   1f8e0:	d001      	beq.n	1f8e6 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
   1f8e2:	2310      	movs	r3, #16
   1f8e4:	e027      	b.n	1f936 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
   1f8e6:	230f      	movs	r3, #15
   1f8e8:	18fb      	adds	r3, r7, r3
   1f8ea:	2200      	movs	r2, #0
   1f8ec:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1f8ee:	68bb      	ldr	r3, [r7, #8]
   1f8f0:	8b5b      	ldrh	r3, [r3, #26]
   1f8f2:	b29b      	uxth	r3, r3
   1f8f4:	001a      	movs	r2, r3
   1f8f6:	2304      	movs	r3, #4
   1f8f8:	4013      	ands	r3, r2
   1f8fa:	d006      	beq.n	1f90a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   1f8fc:	230f      	movs	r3, #15
   1f8fe:	18fb      	adds	r3, r7, r3
   1f900:	221e      	movs	r2, #30
   1f902:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   1f904:	68bb      	ldr	r3, [r7, #8]
   1f906:	2204      	movs	r2, #4
   1f908:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1f90a:	687b      	ldr	r3, [r7, #4]
   1f90c:	799b      	ldrb	r3, [r3, #6]
   1f90e:	2b01      	cmp	r3, #1
   1f910:	d108      	bne.n	1f924 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   1f912:	68bb      	ldr	r3, [r7, #8]
   1f914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1f916:	b29b      	uxth	r3, r3
   1f918:	05db      	lsls	r3, r3, #23
   1f91a:	0ddb      	lsrs	r3, r3, #23
   1f91c:	b29a      	uxth	r2, r3
   1f91e:	683b      	ldr	r3, [r7, #0]
   1f920:	801a      	strh	r2, [r3, #0]
   1f922:	e005      	b.n	1f930 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   1f924:	68bb      	ldr	r3, [r7, #8]
   1f926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1f928:	b2db      	uxtb	r3, r3
   1f92a:	b29a      	uxth	r2, r3
   1f92c:	683b      	ldr	r3, [r7, #0]
   1f92e:	801a      	strh	r2, [r3, #0]
	}

	return retval;
   1f930:	230f      	movs	r3, #15
   1f932:	18fb      	adds	r3, r7, r3
   1f934:	781b      	ldrb	r3, [r3, #0]
}
   1f936:	0018      	movs	r0, r3
   1f938:	46bd      	mov	sp, r7
   1f93a:	b004      	add	sp, #16
   1f93c:	bd80      	pop	{r7, pc}
   1f93e:	46c0      	nop			; (mov r8, r8)
   1f940:	0001f84d 	.word	0x0001f84d

0001f944 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
   1f944:	b580      	push	{r7, lr}
   1f946:	b086      	sub	sp, #24
   1f948:	af00      	add	r7, sp, #0
   1f94a:	60f8      	str	r0, [r7, #12]
   1f94c:	60b9      	str	r1, [r7, #8]
   1f94e:	1dbb      	adds	r3, r7, #6
   1f950:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0xFF;
   1f952:	2313      	movs	r3, #19
   1f954:	18fb      	adds	r3, r7, r3
   1f956:	22ff      	movs	r2, #255	; 0xff
   1f958:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
   1f95a:	2317      	movs	r3, #23
   1f95c:	18fb      	adds	r3, r7, r3
   1f95e:	2200      	movs	r2, #0
   1f960:	701a      	strb	r2, [r3, #0]
   1f962:	2316      	movs	r3, #22
   1f964:	18fb      	adds	r3, r7, r3
   1f966:	2200      	movs	r2, #0
   1f968:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
   1f96a:	2314      	movs	r3, #20
   1f96c:	18fb      	adds	r3, r7, r3
   1f96e:	2200      	movs	r2, #0
   1f970:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
   1f972:	2310      	movs	r3, #16
   1f974:	18fb      	adds	r3, r7, r3
   1f976:	2200      	movs	r2, #0
   1f978:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
   1f97a:	68bb      	ldr	r3, [r7, #8]
   1f97c:	2b00      	cmp	r3, #0
   1f97e:	d102      	bne.n	1f986 <spi_rw+0x42>
   1f980:	68fb      	ldr	r3, [r7, #12]
   1f982:	2b00      	cmp	r3, #0
   1f984:	d003      	beq.n	1f98e <spi_rw+0x4a>
   1f986:	1dbb      	adds	r3, r7, #6
   1f988:	881b      	ldrh	r3, [r3, #0]
   1f98a:	2b00      	cmp	r3, #0
   1f98c:	d102      	bne.n	1f994 <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
   1f98e:	230f      	movs	r3, #15
   1f990:	425b      	negs	r3, r3
   1f992:	e07e      	b.n	1fa92 <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
   1f994:	68fb      	ldr	r3, [r7, #12]
   1f996:	2b00      	cmp	r3, #0
   1f998:	d106      	bne.n	1f9a8 <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
   1f99a:	2313      	movs	r3, #19
   1f99c:	18fb      	adds	r3, r7, r3
   1f99e:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
   1f9a0:	2317      	movs	r3, #23
   1f9a2:	18fb      	adds	r3, r7, r3
   1f9a4:	2201      	movs	r2, #1
   1f9a6:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
   1f9a8:	68bb      	ldr	r3, [r7, #8]
   1f9aa:	2b00      	cmp	r3, #0
   1f9ac:	d106      	bne.n	1f9bc <spi_rw+0x78>
		pu8Miso = &u8Dummy;
   1f9ae:	2313      	movs	r3, #19
   1f9b0:	18fb      	adds	r3, r7, r3
   1f9b2:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
   1f9b4:	2316      	movs	r3, #22
   1f9b6:	18fb      	adds	r3, r7, r3
   1f9b8:	2201      	movs	r2, #1
   1f9ba:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
   1f9bc:	4937      	ldr	r1, [pc, #220]	; (1fa9c <spi_rw+0x158>)
   1f9be:	4b38      	ldr	r3, [pc, #224]	; (1faa0 <spi_rw+0x15c>)
   1f9c0:	2201      	movs	r2, #1
   1f9c2:	0018      	movs	r0, r3
   1f9c4:	4b37      	ldr	r3, [pc, #220]	; (1faa4 <spi_rw+0x160>)
   1f9c6:	4798      	blx	r3

	while (u16Sz) {
   1f9c8:	e04c      	b.n	1fa64 <spi_rw+0x120>
		txd_data = *pu8Mosi;
   1f9ca:	68fb      	ldr	r3, [r7, #12]
   1f9cc:	781a      	ldrb	r2, [r3, #0]
   1f9ce:	2314      	movs	r3, #20
   1f9d0:	18fb      	adds	r3, r7, r3
   1f9d2:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
   1f9d4:	46c0      	nop			; (mov r8, r8)
   1f9d6:	4b32      	ldr	r3, [pc, #200]	; (1faa0 <spi_rw+0x15c>)
   1f9d8:	0018      	movs	r0, r3
   1f9da:	4b33      	ldr	r3, [pc, #204]	; (1faa8 <spi_rw+0x164>)
   1f9dc:	4798      	blx	r3
   1f9de:	0003      	movs	r3, r0
   1f9e0:	001a      	movs	r2, r3
   1f9e2:	2301      	movs	r3, #1
   1f9e4:	4053      	eors	r3, r2
   1f9e6:	b2db      	uxtb	r3, r3
   1f9e8:	2b00      	cmp	r3, #0
   1f9ea:	d1f4      	bne.n	1f9d6 <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
   1f9ec:	46c0      	nop			; (mov r8, r8)
   1f9ee:	2314      	movs	r3, #20
   1f9f0:	18fb      	adds	r3, r7, r3
   1f9f2:	881a      	ldrh	r2, [r3, #0]
   1f9f4:	4b2a      	ldr	r3, [pc, #168]	; (1faa0 <spi_rw+0x15c>)
   1f9f6:	0011      	movs	r1, r2
   1f9f8:	0018      	movs	r0, r3
   1f9fa:	4b2c      	ldr	r3, [pc, #176]	; (1faac <spi_rw+0x168>)
   1f9fc:	4798      	blx	r3
   1f9fe:	1e03      	subs	r3, r0, #0
   1fa00:	d1f5      	bne.n	1f9ee <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
   1fa02:	46c0      	nop			; (mov r8, r8)
   1fa04:	4b26      	ldr	r3, [pc, #152]	; (1faa0 <spi_rw+0x15c>)
   1fa06:	0018      	movs	r0, r3
   1fa08:	4b29      	ldr	r3, [pc, #164]	; (1fab0 <spi_rw+0x16c>)
   1fa0a:	4798      	blx	r3
   1fa0c:	0003      	movs	r3, r0
   1fa0e:	001a      	movs	r2, r3
   1fa10:	2301      	movs	r3, #1
   1fa12:	4053      	eors	r3, r2
   1fa14:	b2db      	uxtb	r3, r3
   1fa16:	2b00      	cmp	r3, #0
   1fa18:	d1f4      	bne.n	1fa04 <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
   1fa1a:	46c0      	nop			; (mov r8, r8)
   1fa1c:	2310      	movs	r3, #16
   1fa1e:	18fa      	adds	r2, r7, r3
   1fa20:	4b1f      	ldr	r3, [pc, #124]	; (1faa0 <spi_rw+0x15c>)
   1fa22:	0011      	movs	r1, r2
   1fa24:	0018      	movs	r0, r3
   1fa26:	4b23      	ldr	r3, [pc, #140]	; (1fab4 <spi_rw+0x170>)
   1fa28:	4798      	blx	r3
   1fa2a:	1e03      	subs	r3, r0, #0
   1fa2c:	d1f6      	bne.n	1fa1c <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
   1fa2e:	2310      	movs	r3, #16
   1fa30:	18fb      	adds	r3, r7, r3
   1fa32:	881b      	ldrh	r3, [r3, #0]
   1fa34:	b2da      	uxtb	r2, r3
   1fa36:	68bb      	ldr	r3, [r7, #8]
   1fa38:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
   1fa3a:	1dbb      	adds	r3, r7, #6
   1fa3c:	881a      	ldrh	r2, [r3, #0]
   1fa3e:	1dbb      	adds	r3, r7, #6
   1fa40:	3a01      	subs	r2, #1
   1fa42:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
   1fa44:	2316      	movs	r3, #22
   1fa46:	18fb      	adds	r3, r7, r3
   1fa48:	781b      	ldrb	r3, [r3, #0]
   1fa4a:	2b00      	cmp	r3, #0
   1fa4c:	d102      	bne.n	1fa54 <spi_rw+0x110>
			pu8Miso++;
   1fa4e:	68bb      	ldr	r3, [r7, #8]
   1fa50:	3301      	adds	r3, #1
   1fa52:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
   1fa54:	2317      	movs	r3, #23
   1fa56:	18fb      	adds	r3, r7, r3
   1fa58:	781b      	ldrb	r3, [r3, #0]
   1fa5a:	2b00      	cmp	r3, #0
   1fa5c:	d102      	bne.n	1fa64 <spi_rw+0x120>
			pu8Mosi++;
   1fa5e:	68fb      	ldr	r3, [r7, #12]
   1fa60:	3301      	adds	r3, #1
   1fa62:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
   1fa64:	1dbb      	adds	r3, r7, #6
   1fa66:	881b      	ldrh	r3, [r3, #0]
   1fa68:	2b00      	cmp	r3, #0
   1fa6a:	d1ae      	bne.n	1f9ca <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
   1fa6c:	46c0      	nop			; (mov r8, r8)
   1fa6e:	4b0c      	ldr	r3, [pc, #48]	; (1faa0 <spi_rw+0x15c>)
   1fa70:	0018      	movs	r0, r3
   1fa72:	4b11      	ldr	r3, [pc, #68]	; (1fab8 <spi_rw+0x174>)
   1fa74:	4798      	blx	r3
   1fa76:	0003      	movs	r3, r0
   1fa78:	001a      	movs	r2, r3
   1fa7a:	2301      	movs	r3, #1
   1fa7c:	4053      	eors	r3, r2
   1fa7e:	b2db      	uxtb	r3, r3
   1fa80:	2b00      	cmp	r3, #0
   1fa82:	d1f4      	bne.n	1fa6e <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
   1fa84:	4905      	ldr	r1, [pc, #20]	; (1fa9c <spi_rw+0x158>)
   1fa86:	4b06      	ldr	r3, [pc, #24]	; (1faa0 <spi_rw+0x15c>)
   1fa88:	2200      	movs	r2, #0
   1fa8a:	0018      	movs	r0, r3
   1fa8c:	4b05      	ldr	r3, [pc, #20]	; (1faa4 <spi_rw+0x160>)
   1fa8e:	4798      	blx	r3

	return M2M_SUCCESS;
   1fa90:	2300      	movs	r3, #0
}
   1fa92:	0018      	movs	r0, r3
   1fa94:	46bd      	mov	sp, r7
   1fa96:	b006      	add	sp, #24
   1fa98:	bd80      	pop	{r7, pc}
   1fa9a:	46c0      	nop			; (mov r8, r8)
   1fa9c:	20005a58 	.word	0x20005a58
   1faa0:	20005a5c 	.word	0x20005a5c
   1faa4:	000271f1 	.word	0x000271f1
   1faa8:	0001f825 	.word	0x0001f825
   1faac:	0001f875 	.word	0x0001f875
   1fab0:	0001f84d 	.word	0x0001f84d
   1fab4:	0001f8bd 	.word	0x0001f8bd
   1fab8:	0001f7fd 	.word	0x0001f7fd

0001fabc <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
   1fabc:	b580      	push	{r7, lr}
   1fabe:	b092      	sub	sp, #72	; 0x48
   1fac0:	af00      	add	r7, sp, #0
   1fac2:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
   1fac4:	2347      	movs	r3, #71	; 0x47
   1fac6:	18fb      	adds	r3, r7, r3
   1fac8:	2200      	movs	r2, #0
   1faca:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
   1facc:	2308      	movs	r3, #8
   1face:	18fb      	adds	r3, r7, r3
   1fad0:	0018      	movs	r0, r3
   1fad2:	4b26      	ldr	r3, [pc, #152]	; (1fb6c <nm_bus_init+0xb0>)
   1fad4:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
   1fad6:	2308      	movs	r3, #8
   1fad8:	18fb      	adds	r3, r7, r3
   1fada:	220e      	movs	r2, #14
   1fadc:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
   1fade:	2308      	movs	r3, #8
   1fae0:	18fa      	adds	r2, r7, r3
   1fae2:	4b23      	ldr	r3, [pc, #140]	; (1fb70 <nm_bus_init+0xb4>)
   1fae4:	0011      	movs	r1, r2
   1fae6:	0018      	movs	r0, r3
   1fae8:	4b22      	ldr	r3, [pc, #136]	; (1fb74 <nm_bus_init+0xb8>)
   1faea:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
   1faec:	230c      	movs	r3, #12
   1faee:	18fb      	adds	r3, r7, r3
   1faf0:	0018      	movs	r0, r3
   1faf2:	4b21      	ldr	r3, [pc, #132]	; (1fb78 <nm_bus_init+0xbc>)
   1faf4:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
   1faf6:	230c      	movs	r3, #12
   1faf8:	18fb      	adds	r3, r7, r3
   1fafa:	22c0      	movs	r2, #192	; 0xc0
   1fafc:	0392      	lsls	r2, r2, #14
   1fafe:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
   1fb00:	230c      	movs	r3, #12
   1fb02:	18fb      	adds	r3, r7, r3
   1fb04:	4a1d      	ldr	r2, [pc, #116]	; (1fb7c <nm_bus_init+0xc0>)
   1fb06:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
   1fb08:	230c      	movs	r3, #12
   1fb0a:	18fb      	adds	r3, r7, r3
   1fb0c:	4a1c      	ldr	r2, [pc, #112]	; (1fb80 <nm_bus_init+0xc4>)
   1fb0e:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
   1fb10:	230c      	movs	r3, #12
   1fb12:	18fb      	adds	r3, r7, r3
   1fb14:	2201      	movs	r2, #1
   1fb16:	4252      	negs	r2, r2
   1fb18:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
   1fb1a:	230c      	movs	r3, #12
   1fb1c:	18fb      	adds	r3, r7, r3
   1fb1e:	4a19      	ldr	r2, [pc, #100]	; (1fb84 <nm_bus_init+0xc8>)
   1fb20:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
   1fb22:	230c      	movs	r3, #12
   1fb24:	18fb      	adds	r3, r7, r3
   1fb26:	2200      	movs	r2, #0
   1fb28:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
   1fb2a:	230c      	movs	r3, #12
   1fb2c:	18fb      	adds	r3, r7, r3
   1fb2e:	4a16      	ldr	r2, [pc, #88]	; (1fb88 <nm_bus_init+0xcc>)
   1fb30:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
   1fb32:	230c      	movs	r3, #12
   1fb34:	18fa      	adds	r2, r7, r3
   1fb36:	4915      	ldr	r1, [pc, #84]	; (1fb8c <nm_bus_init+0xd0>)
   1fb38:	4b15      	ldr	r3, [pc, #84]	; (1fb90 <nm_bus_init+0xd4>)
   1fb3a:	0018      	movs	r0, r3
   1fb3c:	4b15      	ldr	r3, [pc, #84]	; (1fb94 <nm_bus_init+0xd8>)
   1fb3e:	4798      	blx	r3
   1fb40:	1e03      	subs	r3, r0, #0
   1fb42:	d002      	beq.n	1fb4a <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
   1fb44:	2306      	movs	r3, #6
   1fb46:	425b      	negs	r3, r3
   1fb48:	e00c      	b.n	1fb64 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
   1fb4a:	4b11      	ldr	r3, [pc, #68]	; (1fb90 <nm_bus_init+0xd4>)
   1fb4c:	0018      	movs	r0, r3
   1fb4e:	4b12      	ldr	r3, [pc, #72]	; (1fb98 <nm_bus_init+0xdc>)
   1fb50:	4798      	blx	r3

	nm_bsp_reset();
   1fb52:	4b12      	ldr	r3, [pc, #72]	; (1fb9c <nm_bus_init+0xe0>)
   1fb54:	4798      	blx	r3
	nm_bsp_sleep(1);
   1fb56:	2001      	movs	r0, #1
   1fb58:	4b11      	ldr	r3, [pc, #68]	; (1fba0 <nm_bus_init+0xe4>)
   1fb5a:	4798      	blx	r3
#endif
	return result;
   1fb5c:	2347      	movs	r3, #71	; 0x47
   1fb5e:	18fb      	adds	r3, r7, r3
   1fb60:	781b      	ldrb	r3, [r3, #0]
   1fb62:	b25b      	sxtb	r3, r3
}
   1fb64:	0018      	movs	r0, r3
   1fb66:	46bd      	mov	sp, r7
   1fb68:	b012      	add	sp, #72	; 0x48
   1fb6a:	bd80      	pop	{r7, pc}
   1fb6c:	0001f6c9 	.word	0x0001f6c9
   1fb70:	20005a58 	.word	0x20005a58
   1fb74:	0001f6ed 	.word	0x0001f6ed
   1fb78:	0001f645 	.word	0x0001f645
   1fb7c:	000c0002 	.word	0x000c0002
   1fb80:	000d0002 	.word	0x000d0002
   1fb84:	000f0002 	.word	0x000f0002
   1fb88:	00124f80 	.word	0x00124f80
   1fb8c:	42001000 	.word	0x42001000
   1fb90:	20005a5c 	.word	0x20005a5c
   1fb94:	00026f2d 	.word	0x00026f2d
   1fb98:	0001f751 	.word	0x0001f751
   1fb9c:	0001f3c1 	.word	0x0001f3c1
   1fba0:	0001f401 	.word	0x0001f401

0001fba4 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
   1fba4:	b590      	push	{r4, r7, lr}
   1fba6:	b085      	sub	sp, #20
   1fba8:	af00      	add	r7, sp, #0
   1fbaa:	0002      	movs	r2, r0
   1fbac:	6039      	str	r1, [r7, #0]
   1fbae:	1dfb      	adds	r3, r7, #7
   1fbb0:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
   1fbb2:	230f      	movs	r3, #15
   1fbb4:	18fb      	adds	r3, r7, r3
   1fbb6:	2200      	movs	r2, #0
   1fbb8:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
   1fbba:	1dfb      	adds	r3, r7, #7
   1fbbc:	781b      	ldrb	r3, [r3, #0]
   1fbbe:	2b03      	cmp	r3, #3
   1fbc0:	d10f      	bne.n	1fbe2 <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
   1fbc2:	683b      	ldr	r3, [r7, #0]
   1fbc4:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
   1fbc6:	68bb      	ldr	r3, [r7, #8]
   1fbc8:	6818      	ldr	r0, [r3, #0]
   1fbca:	68bb      	ldr	r3, [r7, #8]
   1fbcc:	6859      	ldr	r1, [r3, #4]
   1fbce:	68bb      	ldr	r3, [r7, #8]
   1fbd0:	891b      	ldrh	r3, [r3, #8]
   1fbd2:	220f      	movs	r2, #15
   1fbd4:	18bc      	adds	r4, r7, r2
   1fbd6:	001a      	movs	r2, r3
   1fbd8:	4b10      	ldr	r3, [pc, #64]	; (1fc1c <nm_bus_ioctl+0x78>)
   1fbda:	4798      	blx	r3
   1fbdc:	0003      	movs	r3, r0
   1fbde:	7023      	strb	r3, [r4, #0]
		}
		break;
   1fbe0:	e013      	b.n	1fc0a <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
   1fbe2:	230f      	movs	r3, #15
   1fbe4:	18fb      	adds	r3, r7, r3
   1fbe6:	22ff      	movs	r2, #255	; 0xff
   1fbe8:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
   1fbea:	2383      	movs	r3, #131	; 0x83
   1fbec:	005a      	lsls	r2, r3, #1
   1fbee:	490c      	ldr	r1, [pc, #48]	; (1fc20 <nm_bus_ioctl+0x7c>)
   1fbf0:	4b0c      	ldr	r3, [pc, #48]	; (1fc24 <nm_bus_ioctl+0x80>)
   1fbf2:	0018      	movs	r0, r3
   1fbf4:	4b0c      	ldr	r3, [pc, #48]	; (1fc28 <nm_bus_ioctl+0x84>)
   1fbf6:	4798      	blx	r3
   1fbf8:	4b0c      	ldr	r3, [pc, #48]	; (1fc2c <nm_bus_ioctl+0x88>)
   1fbfa:	0018      	movs	r0, r3
   1fbfc:	4b0a      	ldr	r3, [pc, #40]	; (1fc28 <nm_bus_ioctl+0x84>)
   1fbfe:	4798      	blx	r3
   1fc00:	4b0b      	ldr	r3, [pc, #44]	; (1fc30 <nm_bus_ioctl+0x8c>)
   1fc02:	0018      	movs	r0, r3
   1fc04:	4b08      	ldr	r3, [pc, #32]	; (1fc28 <nm_bus_ioctl+0x84>)
   1fc06:	4798      	blx	r3
			break;
   1fc08:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
   1fc0a:	230f      	movs	r3, #15
   1fc0c:	18fb      	adds	r3, r7, r3
   1fc0e:	781b      	ldrb	r3, [r3, #0]
   1fc10:	b25b      	sxtb	r3, r3
}
   1fc12:	0018      	movs	r0, r3
   1fc14:	46bd      	mov	sp, r7
   1fc16:	b005      	add	sp, #20
   1fc18:	bd90      	pop	{r4, r7, pc}
   1fc1a:	46c0      	nop			; (mov r8, r8)
   1fc1c:	0001f945 	.word	0x0001f945
   1fc20:	00037dfc 	.word	0x00037dfc
   1fc24:	00037dd0 	.word	0x00037dd0
   1fc28:	0001cf49 	.word	0x0001cf49
   1fc2c:	00037de4 	.word	0x00037de4
   1fc30:	00037df8 	.word	0x00037df8

0001fc34 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
   1fc34:	b580      	push	{r7, lr}
   1fc36:	b082      	sub	sp, #8
   1fc38:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
   1fc3a:	1dfb      	adds	r3, r7, #7
   1fc3c:	2200      	movs	r2, #0
   1fc3e:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
   1fc40:	1d3b      	adds	r3, r7, #4
   1fc42:	0018      	movs	r0, r3
   1fc44:	4b13      	ldr	r3, [pc, #76]	; (1fc94 <nm_bus_deinit+0x60>)
   1fc46:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   1fc48:	1d3b      	adds	r3, r7, #4
   1fc4a:	2200      	movs	r2, #0
   1fc4c:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
   1fc4e:	1d3b      	adds	r3, r7, #4
   1fc50:	2200      	movs	r2, #0
   1fc52:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
   1fc54:	4b10      	ldr	r3, [pc, #64]	; (1fc98 <nm_bus_deinit+0x64>)
   1fc56:	0018      	movs	r0, r3
   1fc58:	4b10      	ldr	r3, [pc, #64]	; (1fc9c <nm_bus_deinit+0x68>)
   1fc5a:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
   1fc5c:	1d3b      	adds	r3, r7, #4
   1fc5e:	0019      	movs	r1, r3
   1fc60:	200c      	movs	r0, #12
   1fc62:	4b0f      	ldr	r3, [pc, #60]	; (1fca0 <nm_bus_deinit+0x6c>)
   1fc64:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
   1fc66:	1d3b      	adds	r3, r7, #4
   1fc68:	0019      	movs	r1, r3
   1fc6a:	200f      	movs	r0, #15
   1fc6c:	4b0c      	ldr	r3, [pc, #48]	; (1fca0 <nm_bus_deinit+0x6c>)
   1fc6e:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
   1fc70:	1d3b      	adds	r3, r7, #4
   1fc72:	0019      	movs	r1, r3
   1fc74:	200d      	movs	r0, #13
   1fc76:	4b0a      	ldr	r3, [pc, #40]	; (1fca0 <nm_bus_deinit+0x6c>)
   1fc78:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
   1fc7a:	1d3b      	adds	r3, r7, #4
   1fc7c:	0019      	movs	r1, r3
   1fc7e:	200e      	movs	r0, #14
   1fc80:	4b07      	ldr	r3, [pc, #28]	; (1fca0 <nm_bus_deinit+0x6c>)
   1fc82:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
   1fc84:	1dfb      	adds	r3, r7, #7
   1fc86:	781b      	ldrb	r3, [r3, #0]
   1fc88:	b25b      	sxtb	r3, r3
}
   1fc8a:	0018      	movs	r0, r3
   1fc8c:	46bd      	mov	sp, r7
   1fc8e:	b002      	add	sp, #8
   1fc90:	bd80      	pop	{r7, pc}
   1fc92:	46c0      	nop			; (mov r8, r8)
   1fc94:	0001f5ad 	.word	0x0001f5ad
   1fc98:	20005a5c 	.word	0x20005a5c
   1fc9c:	0001f7a1 	.word	0x0001f7a1
   1fca0:	00025aad 	.word	0x00025aad

0001fca4 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
   1fca4:	b580      	push	{r7, lr}
   1fca6:	b084      	sub	sp, #16
   1fca8:	af00      	add	r7, sp, #0
   1fcaa:	60f8      	str	r0, [r7, #12]
   1fcac:	60b9      	str	r1, [r7, #8]
   1fcae:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
   1fcb0:	687b      	ldr	r3, [r7, #4]
   1fcb2:	2b00      	cmp	r3, #0
   1fcb4:	d010      	beq.n	1fcd8 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
   1fcb6:	68bb      	ldr	r3, [r7, #8]
   1fcb8:	781a      	ldrb	r2, [r3, #0]
   1fcba:	68fb      	ldr	r3, [r7, #12]
   1fcbc:	701a      	strb	r2, [r3, #0]
		pDst++;
   1fcbe:	68fb      	ldr	r3, [r7, #12]
   1fcc0:	3301      	adds	r3, #1
   1fcc2:	60fb      	str	r3, [r7, #12]
		pSrc++;
   1fcc4:	68bb      	ldr	r3, [r7, #8]
   1fcc6:	3301      	adds	r3, #1
   1fcc8:	60bb      	str	r3, [r7, #8]
	}while(--sz);
   1fcca:	687b      	ldr	r3, [r7, #4]
   1fccc:	3b01      	subs	r3, #1
   1fcce:	607b      	str	r3, [r7, #4]
   1fcd0:	687b      	ldr	r3, [r7, #4]
   1fcd2:	2b00      	cmp	r3, #0
   1fcd4:	d1ef      	bne.n	1fcb6 <m2m_memcpy+0x12>
   1fcd6:	e000      	b.n	1fcda <m2m_memcpy+0x36>
	if(sz == 0) return;
   1fcd8:	46c0      	nop			; (mov r8, r8)
}
   1fcda:	46bd      	mov	sp, r7
   1fcdc:	b004      	add	sp, #16
   1fcde:	bd80      	pop	{r7, pc}

0001fce0 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
   1fce0:	b580      	push	{r7, lr}
   1fce2:	b084      	sub	sp, #16
   1fce4:	af00      	add	r7, sp, #0
   1fce6:	60f8      	str	r0, [r7, #12]
   1fce8:	607a      	str	r2, [r7, #4]
   1fcea:	230b      	movs	r3, #11
   1fcec:	18fb      	adds	r3, r7, r3
   1fcee:	1c0a      	adds	r2, r1, #0
   1fcf0:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
   1fcf2:	687b      	ldr	r3, [r7, #4]
   1fcf4:	2b00      	cmp	r3, #0
   1fcf6:	d00e      	beq.n	1fd16 <m2m_memset+0x36>
	do
	{
		*pBuf = val;
   1fcf8:	68fb      	ldr	r3, [r7, #12]
   1fcfa:	220b      	movs	r2, #11
   1fcfc:	18ba      	adds	r2, r7, r2
   1fcfe:	7812      	ldrb	r2, [r2, #0]
   1fd00:	701a      	strb	r2, [r3, #0]
		pBuf++;
   1fd02:	68fb      	ldr	r3, [r7, #12]
   1fd04:	3301      	adds	r3, #1
   1fd06:	60fb      	str	r3, [r7, #12]
	}while(--sz);
   1fd08:	687b      	ldr	r3, [r7, #4]
   1fd0a:	3b01      	subs	r3, #1
   1fd0c:	607b      	str	r3, [r7, #4]
   1fd0e:	687b      	ldr	r3, [r7, #4]
   1fd10:	2b00      	cmp	r3, #0
   1fd12:	d1f1      	bne.n	1fcf8 <m2m_memset+0x18>
   1fd14:	e000      	b.n	1fd18 <m2m_memset+0x38>
	if(sz == 0) return;
   1fd16:	46c0      	nop			; (mov r8, r8)
}
   1fd18:	46bd      	mov	sp, r7
   1fd1a:	b004      	add	sp, #16
   1fd1c:	bd80      	pop	{r7, pc}

0001fd1e <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
   1fd1e:	b580      	push	{r7, lr}
   1fd20:	b084      	sub	sp, #16
   1fd22:	af00      	add	r7, sp, #0
   1fd24:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
   1fd26:	230e      	movs	r3, #14
   1fd28:	18fb      	adds	r3, r7, r3
   1fd2a:	2200      	movs	r2, #0
   1fd2c:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
   1fd2e:	e009      	b.n	1fd44 <m2m_strlen+0x26>
	{
		u16StrLen ++;
   1fd30:	230e      	movs	r3, #14
   1fd32:	18fb      	adds	r3, r7, r3
   1fd34:	881a      	ldrh	r2, [r3, #0]
   1fd36:	230e      	movs	r3, #14
   1fd38:	18fb      	adds	r3, r7, r3
   1fd3a:	3201      	adds	r2, #1
   1fd3c:	801a      	strh	r2, [r3, #0]
		pcStr++;
   1fd3e:	687b      	ldr	r3, [r7, #4]
   1fd40:	3301      	adds	r3, #1
   1fd42:	607b      	str	r3, [r7, #4]
	while(*pcStr)
   1fd44:	687b      	ldr	r3, [r7, #4]
   1fd46:	781b      	ldrb	r3, [r3, #0]
   1fd48:	2b00      	cmp	r3, #0
   1fd4a:	d1f1      	bne.n	1fd30 <m2m_strlen+0x12>
	}
	return u16StrLen;
   1fd4c:	230e      	movs	r3, #14
   1fd4e:	18fb      	adds	r3, r7, r3
   1fd50:	881b      	ldrh	r3, [r3, #0]
}
   1fd52:	0018      	movs	r0, r3
   1fd54:	46bd      	mov	sp, r7
   1fd56:	b004      	add	sp, #16
   1fd58:	bd80      	pop	{r7, pc}
	...

0001fd5c <isr>:
#ifdef ETH_MODE
extern void os_hook_isr(void);
#endif

static void isr(void)
{
   1fd5c:	b580      	push	{r7, lr}
   1fd5e:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
   1fd60:	4b04      	ldr	r3, [pc, #16]	; (1fd74 <isr+0x18>)
   1fd62:	78db      	ldrb	r3, [r3, #3]
   1fd64:	b2db      	uxtb	r3, r3
   1fd66:	3301      	adds	r3, #1
   1fd68:	b2da      	uxtb	r2, r3
   1fd6a:	4b02      	ldr	r3, [pc, #8]	; (1fd74 <isr+0x18>)
   1fd6c:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
   1fd6e:	46c0      	nop			; (mov r8, r8)
   1fd70:	46bd      	mov	sp, r7
   1fd72:	bd80      	pop	{r7, pc}
   1fd74:	20005a98 	.word	0x20005a98

0001fd78 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
   1fd78:	b590      	push	{r4, r7, lr}
   1fd7a:	b083      	sub	sp, #12
   1fd7c:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   1fd7e:	1dfb      	adds	r3, r7, #7
   1fd80:	2200      	movs	r2, #0
   1fd82:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
   1fd84:	4b14      	ldr	r3, [pc, #80]	; (1fdd8 <hif_set_rx_done+0x60>)
   1fd86:	2200      	movs	r2, #0
   1fd88:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
   1fd8a:	2001      	movs	r0, #1
   1fd8c:	4b13      	ldr	r3, [pc, #76]	; (1fddc <hif_set_rx_done+0x64>)
   1fd8e:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
   1fd90:	1dfc      	adds	r4, r7, #7
   1fd92:	003b      	movs	r3, r7
   1fd94:	4a12      	ldr	r2, [pc, #72]	; (1fde0 <hif_set_rx_done+0x68>)
   1fd96:	0019      	movs	r1, r3
   1fd98:	0010      	movs	r0, r2
   1fd9a:	4b12      	ldr	r3, [pc, #72]	; (1fde4 <hif_set_rx_done+0x6c>)
   1fd9c:	4798      	blx	r3
   1fd9e:	0003      	movs	r3, r0
   1fda0:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   1fda2:	1dfb      	adds	r3, r7, #7
   1fda4:	781b      	ldrb	r3, [r3, #0]
   1fda6:	b25b      	sxtb	r3, r3
   1fda8:	2b00      	cmp	r3, #0
   1fdaa:	d10d      	bne.n	1fdc8 <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
   1fdac:	683b      	ldr	r3, [r7, #0]
   1fdae:	2202      	movs	r2, #2
   1fdb0:	4313      	orrs	r3, r2
   1fdb2:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   1fdb4:	683b      	ldr	r3, [r7, #0]
   1fdb6:	1dfc      	adds	r4, r7, #7
   1fdb8:	4a09      	ldr	r2, [pc, #36]	; (1fde0 <hif_set_rx_done+0x68>)
   1fdba:	0019      	movs	r1, r3
   1fdbc:	0010      	movs	r0, r2
   1fdbe:	4b0a      	ldr	r3, [pc, #40]	; (1fde8 <hif_set_rx_done+0x70>)
   1fdc0:	4798      	blx	r3
   1fdc2:	0003      	movs	r3, r0
   1fdc4:	7023      	strb	r3, [r4, #0]
   1fdc6:	e000      	b.n	1fdca <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
   1fdc8:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
   1fdca:	1dfb      	adds	r3, r7, #7
   1fdcc:	781b      	ldrb	r3, [r3, #0]
   1fdce:	b25b      	sxtb	r3, r3

}
   1fdd0:	0018      	movs	r0, r3
   1fdd2:	46bd      	mov	sp, r7
   1fdd4:	b003      	add	sp, #12
   1fdd6:	bd90      	pop	{r4, r7, pc}
   1fdd8:	20005a98 	.word	0x20005a98
   1fddc:	0001f495 	.word	0x0001f495
   1fde0:	00001070 	.word	0x00001070
   1fde4:	00021d71 	.word	0x00021d71
   1fde8:	00021d95 	.word	0x00021d95

0001fdec <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   1fdec:	b580      	push	{r7, lr}
   1fdee:	b082      	sub	sp, #8
   1fdf0:	af00      	add	r7, sp, #0
   1fdf2:	603a      	str	r2, [r7, #0]
   1fdf4:	1dfb      	adds	r3, r7, #7
   1fdf6:	1c02      	adds	r2, r0, #0
   1fdf8:	701a      	strb	r2, [r3, #0]
   1fdfa:	1d3b      	adds	r3, r7, #4
   1fdfc:	1c0a      	adds	r2, r1, #0
   1fdfe:	801a      	strh	r2, [r3, #0]


}
   1fe00:	46c0      	nop			; (mov r8, r8)
   1fe02:	46bd      	mov	sp, r7
   1fe04:	b002      	add	sp, #8
   1fe06:	bd80      	pop	{r7, pc}

0001fe08 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
   1fe08:	b590      	push	{r4, r7, lr}
   1fe0a:	b083      	sub	sp, #12
   1fe0c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   1fe0e:	1dfb      	adds	r3, r7, #7
   1fe10:	2200      	movs	r2, #0
   1fe12:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
   1fe14:	4b16      	ldr	r3, [pc, #88]	; (1fe70 <hif_chip_wake+0x68>)
   1fe16:	789b      	ldrb	r3, [r3, #2]
   1fe18:	b2db      	uxtb	r3, r3
   1fe1a:	2b00      	cmp	r3, #0
   1fe1c:	d003      	beq.n	1fe26 <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
   1fe1e:	1dfb      	adds	r3, r7, #7
   1fe20:	781b      	ldrb	r3, [r3, #0]
   1fe22:	b25b      	sxtb	r3, r3
   1fe24:	e01f      	b.n	1fe66 <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
   1fe26:	4b12      	ldr	r3, [pc, #72]	; (1fe70 <hif_chip_wake+0x68>)
   1fe28:	785b      	ldrb	r3, [r3, #1]
   1fe2a:	b2db      	uxtb	r3, r3
   1fe2c:	2b00      	cmp	r3, #0
   1fe2e:	d10e      	bne.n	1fe4e <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   1fe30:	4b0f      	ldr	r3, [pc, #60]	; (1fe70 <hif_chip_wake+0x68>)
   1fe32:	781b      	ldrb	r3, [r3, #0]
   1fe34:	b2db      	uxtb	r3, r3
   1fe36:	2b00      	cmp	r3, #0
   1fe38:	d009      	beq.n	1fe4e <hif_chip_wake+0x46>
		{
			ret = chip_wake();
   1fe3a:	1dfc      	adds	r4, r7, #7
   1fe3c:	4b0d      	ldr	r3, [pc, #52]	; (1fe74 <hif_chip_wake+0x6c>)
   1fe3e:	4798      	blx	r3
   1fe40:	0003      	movs	r3, r0
   1fe42:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   1fe44:	1dfb      	adds	r3, r7, #7
   1fe46:	781b      	ldrb	r3, [r3, #0]
   1fe48:	b25b      	sxtb	r3, r3
   1fe4a:	2b00      	cmp	r3, #0
   1fe4c:	d107      	bne.n	1fe5e <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
   1fe4e:	4b08      	ldr	r3, [pc, #32]	; (1fe70 <hif_chip_wake+0x68>)
   1fe50:	785b      	ldrb	r3, [r3, #1]
   1fe52:	b2db      	uxtb	r3, r3
   1fe54:	3301      	adds	r3, #1
   1fe56:	b2da      	uxtb	r2, r3
   1fe58:	4b05      	ldr	r3, [pc, #20]	; (1fe70 <hif_chip_wake+0x68>)
   1fe5a:	705a      	strb	r2, [r3, #1]
   1fe5c:	e000      	b.n	1fe60 <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
   1fe5e:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
   1fe60:	1dfb      	adds	r3, r7, #7
   1fe62:	781b      	ldrb	r3, [r3, #0]
   1fe64:	b25b      	sxtb	r3, r3
}
   1fe66:	0018      	movs	r0, r3
   1fe68:	46bd      	mov	sp, r7
   1fe6a:	b003      	add	sp, #12
   1fe6c:	bd90      	pop	{r4, r7, pc}
   1fe6e:	46c0      	nop			; (mov r8, r8)
   1fe70:	20005a98 	.word	0x20005a98
   1fe74:	00021841 	.word	0x00021841

0001fe78 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
   1fe78:	b580      	push	{r7, lr}
   1fe7a:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
   1fe7c:	4b07      	ldr	r3, [pc, #28]	; (1fe9c <hif_chip_sleep_sc+0x24>)
   1fe7e:	785b      	ldrb	r3, [r3, #1]
   1fe80:	b2db      	uxtb	r3, r3
   1fe82:	2b00      	cmp	r3, #0
   1fe84:	d006      	beq.n	1fe94 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
   1fe86:	4b05      	ldr	r3, [pc, #20]	; (1fe9c <hif_chip_sleep_sc+0x24>)
   1fe88:	785b      	ldrb	r3, [r3, #1]
   1fe8a:	b2db      	uxtb	r3, r3
   1fe8c:	3b01      	subs	r3, #1
   1fe8e:	b2da      	uxtb	r2, r3
   1fe90:	4b02      	ldr	r3, [pc, #8]	; (1fe9c <hif_chip_sleep_sc+0x24>)
   1fe92:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
   1fe94:	2300      	movs	r3, #0
}
   1fe96:	0018      	movs	r0, r3
   1fe98:	46bd      	mov	sp, r7
   1fe9a:	bd80      	pop	{r7, pc}
   1fe9c:	20005a98 	.word	0x20005a98

0001fea0 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
   1fea0:	b590      	push	{r4, r7, lr}
   1fea2:	b083      	sub	sp, #12
   1fea4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   1fea6:	1dfb      	adds	r3, r7, #7
   1fea8:	2200      	movs	r2, #0
   1feaa:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
   1feac:	4b10      	ldr	r3, [pc, #64]	; (1fef0 <hif_chip_sleep+0x50>)
   1feae:	785b      	ldrb	r3, [r3, #1]
   1feb0:	b2db      	uxtb	r3, r3
   1feb2:	2b00      	cmp	r3, #0
   1feb4:	d006      	beq.n	1fec4 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
   1feb6:	4b0e      	ldr	r3, [pc, #56]	; (1fef0 <hif_chip_sleep+0x50>)
   1feb8:	785b      	ldrb	r3, [r3, #1]
   1feba:	b2db      	uxtb	r3, r3
   1febc:	3b01      	subs	r3, #1
   1febe:	b2da      	uxtb	r2, r3
   1fec0:	4b0b      	ldr	r3, [pc, #44]	; (1fef0 <hif_chip_sleep+0x50>)
   1fec2:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
   1fec4:	4b0a      	ldr	r3, [pc, #40]	; (1fef0 <hif_chip_sleep+0x50>)
   1fec6:	785b      	ldrb	r3, [r3, #1]
   1fec8:	b2db      	uxtb	r3, r3
   1feca:	2b00      	cmp	r3, #0
   1fecc:	d109      	bne.n	1fee2 <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   1fece:	4b08      	ldr	r3, [pc, #32]	; (1fef0 <hif_chip_sleep+0x50>)
   1fed0:	781b      	ldrb	r3, [r3, #0]
   1fed2:	b2db      	uxtb	r3, r3
   1fed4:	2b00      	cmp	r3, #0
   1fed6:	d004      	beq.n	1fee2 <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
   1fed8:	1dfc      	adds	r4, r7, #7
   1feda:	4b06      	ldr	r3, [pc, #24]	; (1fef4 <hif_chip_sleep+0x54>)
   1fedc:	4798      	blx	r3
   1fede:	0003      	movs	r3, r0
   1fee0:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
   1fee2:	1dfb      	adds	r3, r7, #7
   1fee4:	781b      	ldrb	r3, [r3, #0]
   1fee6:	b25b      	sxtb	r3, r3
}
   1fee8:	0018      	movs	r0, r3
   1feea:	46bd      	mov	sp, r7
   1feec:	b003      	add	sp, #12
   1feee:	bd90      	pop	{r4, r7, pc}
   1fef0:	20005a98 	.word	0x20005a98
   1fef4:	00021769 	.word	0x00021769

0001fef8 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
   1fef8:	b580      	push	{r7, lr}
   1fefa:	b082      	sub	sp, #8
   1fefc:	af00      	add	r7, sp, #0
   1fefe:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
   1ff00:	4b09      	ldr	r3, [pc, #36]	; (1ff28 <hif_init+0x30>)
   1ff02:	222c      	movs	r2, #44	; 0x2c
   1ff04:	2100      	movs	r1, #0
   1ff06:	0018      	movs	r0, r3
   1ff08:	4b08      	ldr	r3, [pc, #32]	; (1ff2c <hif_init+0x34>)
   1ff0a:	4798      	blx	r3
	nm_bsp_register_isr(isr);
   1ff0c:	4b08      	ldr	r3, [pc, #32]	; (1ff30 <hif_init+0x38>)
   1ff0e:	0018      	movs	r0, r3
   1ff10:	4b08      	ldr	r3, [pc, #32]	; (1ff34 <hif_init+0x3c>)
   1ff12:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
   1ff14:	4b08      	ldr	r3, [pc, #32]	; (1ff38 <hif_init+0x40>)
   1ff16:	0019      	movs	r1, r3
   1ff18:	2003      	movs	r0, #3
   1ff1a:	4b08      	ldr	r3, [pc, #32]	; (1ff3c <hif_init+0x44>)
   1ff1c:	4798      	blx	r3
	return M2M_SUCCESS;
   1ff1e:	2300      	movs	r3, #0
}
   1ff20:	0018      	movs	r0, r3
   1ff22:	46bd      	mov	sp, r7
   1ff24:	b002      	add	sp, #8
   1ff26:	bd80      	pop	{r7, pc}
   1ff28:	20005a98 	.word	0x20005a98
   1ff2c:	0001fce1 	.word	0x0001fce1
   1ff30:	0001fd5d 	.word	0x0001fd5d
   1ff34:	0001f41d 	.word	0x0001f41d
   1ff38:	0001fded 	.word	0x0001fded
   1ff3c:	000209dd 	.word	0x000209dd

0001ff40 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
   1ff40:	b590      	push	{r4, r7, lr}
   1ff42:	b089      	sub	sp, #36	; 0x24
   1ff44:	af00      	add	r7, sp, #0
   1ff46:	0004      	movs	r4, r0
   1ff48:	0008      	movs	r0, r1
   1ff4a:	603a      	str	r2, [r7, #0]
   1ff4c:	0019      	movs	r1, r3
   1ff4e:	1dfb      	adds	r3, r7, #7
   1ff50:	1c22      	adds	r2, r4, #0
   1ff52:	701a      	strb	r2, [r3, #0]
   1ff54:	1dbb      	adds	r3, r7, #6
   1ff56:	1c02      	adds	r2, r0, #0
   1ff58:	701a      	strb	r2, [r3, #0]
   1ff5a:	1d3b      	adds	r3, r7, #4
   1ff5c:	1c0a      	adds	r2, r1, #0
   1ff5e:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
   1ff60:	231f      	movs	r3, #31
   1ff62:	18fb      	adds	r3, r7, r3
   1ff64:	22ff      	movs	r2, #255	; 0xff
   1ff66:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
   1ff68:	1dbb      	adds	r3, r7, #6
   1ff6a:	781b      	ldrb	r3, [r3, #0]
   1ff6c:	227f      	movs	r2, #127	; 0x7f
   1ff6e:	4013      	ands	r3, r2
   1ff70:	b2da      	uxtb	r2, r3
   1ff72:	2318      	movs	r3, #24
   1ff74:	18fb      	adds	r3, r7, r3
   1ff76:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
   1ff78:	2318      	movs	r3, #24
   1ff7a:	18fb      	adds	r3, r7, r3
   1ff7c:	1dfa      	adds	r2, r7, #7
   1ff7e:	7812      	ldrb	r2, [r2, #0]
   1ff80:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
   1ff82:	2318      	movs	r3, #24
   1ff84:	18fb      	adds	r3, r7, r3
   1ff86:	2208      	movs	r2, #8
   1ff88:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
   1ff8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1ff8c:	2b00      	cmp	r3, #0
   1ff8e:	d011      	beq.n	1ffb4 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
   1ff90:	2318      	movs	r3, #24
   1ff92:	18fb      	adds	r3, r7, r3
   1ff94:	885b      	ldrh	r3, [r3, #2]
   1ff96:	b29a      	uxth	r2, r3
   1ff98:	2338      	movs	r3, #56	; 0x38
   1ff9a:	18f9      	adds	r1, r7, r3
   1ff9c:	2334      	movs	r3, #52	; 0x34
   1ff9e:	18fb      	adds	r3, r7, r3
   1ffa0:	8809      	ldrh	r1, [r1, #0]
   1ffa2:	881b      	ldrh	r3, [r3, #0]
   1ffa4:	18cb      	adds	r3, r1, r3
   1ffa6:	b29b      	uxth	r3, r3
   1ffa8:	18d3      	adds	r3, r2, r3
   1ffaa:	b29a      	uxth	r2, r3
   1ffac:	2318      	movs	r3, #24
   1ffae:	18fb      	adds	r3, r7, r3
   1ffb0:	805a      	strh	r2, [r3, #2]
   1ffb2:	e00a      	b.n	1ffca <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
   1ffb4:	2318      	movs	r3, #24
   1ffb6:	18fb      	adds	r3, r7, r3
   1ffb8:	885b      	ldrh	r3, [r3, #2]
   1ffba:	b29a      	uxth	r2, r3
   1ffbc:	1d3b      	adds	r3, r7, #4
   1ffbe:	881b      	ldrh	r3, [r3, #0]
   1ffc0:	18d3      	adds	r3, r2, r3
   1ffc2:	b29a      	uxth	r2, r3
   1ffc4:	2318      	movs	r3, #24
   1ffc6:	18fb      	adds	r3, r7, r3
   1ffc8:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
   1ffca:	231f      	movs	r3, #31
   1ffcc:	18fc      	adds	r4, r7, r3
   1ffce:	4bb2      	ldr	r3, [pc, #712]	; (20298 <hif_send+0x358>)
   1ffd0:	4798      	blx	r3
   1ffd2:	0003      	movs	r3, r0
   1ffd4:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
   1ffd6:	231f      	movs	r3, #31
   1ffd8:	18fb      	adds	r3, r7, r3
   1ffda:	781b      	ldrb	r3, [r3, #0]
   1ffdc:	b25b      	sxtb	r3, r3
   1ffde:	2b00      	cmp	r3, #0
   1ffe0:	d000      	beq.n	1ffe4 <hif_send+0xa4>
   1ffe2:	e129      	b.n	20238 <hif_send+0x2f8>
	{
		volatile uint32 reg, dma_addr = 0;
   1ffe4:	2300      	movs	r3, #0
   1ffe6:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
   1ffe8:	230e      	movs	r3, #14
   1ffea:	18fb      	adds	r3, r7, r3
   1ffec:	2200      	movs	r2, #0
   1ffee:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
   1fff0:	2300      	movs	r3, #0
   1fff2:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
   1fff4:	1dfb      	adds	r3, r7, #7
   1fff6:	781a      	ldrb	r2, [r3, #0]
   1fff8:	697b      	ldr	r3, [r7, #20]
   1fffa:	4313      	orrs	r3, r2
   1fffc:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
   1fffe:	1dbb      	adds	r3, r7, #6
   20000:	781b      	ldrb	r3, [r3, #0]
   20002:	021a      	lsls	r2, r3, #8
   20004:	697b      	ldr	r3, [r7, #20]
   20006:	4313      	orrs	r3, r2
   20008:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
   2000a:	2318      	movs	r3, #24
   2000c:	18fb      	adds	r3, r7, r3
   2000e:	885b      	ldrh	r3, [r3, #2]
   20010:	b29b      	uxth	r3, r3
   20012:	041a      	lsls	r2, r3, #16
   20014:	697b      	ldr	r3, [r7, #20]
   20016:	4313      	orrs	r3, r2
   20018:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
   2001a:	697b      	ldr	r3, [r7, #20]
   2001c:	221f      	movs	r2, #31
   2001e:	18bc      	adds	r4, r7, r2
   20020:	4a9e      	ldr	r2, [pc, #632]	; (2029c <hif_send+0x35c>)
   20022:	0019      	movs	r1, r3
   20024:	0010      	movs	r0, r2
   20026:	4b9e      	ldr	r3, [pc, #632]	; (202a0 <hif_send+0x360>)
   20028:	4798      	blx	r3
   2002a:	0003      	movs	r3, r0
   2002c:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   2002e:	231f      	movs	r3, #31
   20030:	18fb      	adds	r3, r7, r3
   20032:	781b      	ldrb	r3, [r3, #0]
   20034:	b25b      	sxtb	r3, r3
   20036:	2b00      	cmp	r3, #0
   20038:	d000      	beq.n	2003c <hif_send+0xfc>
   2003a:	e119      	b.n	20270 <hif_send+0x330>

		reg = 0UL;
   2003c:	2300      	movs	r3, #0
   2003e:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
   20040:	697b      	ldr	r3, [r7, #20]
   20042:	2202      	movs	r2, #2
   20044:	4313      	orrs	r3, r2
   20046:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
   20048:	697b      	ldr	r3, [r7, #20]
   2004a:	221f      	movs	r2, #31
   2004c:	18bc      	adds	r4, r7, r2
   2004e:	4a95      	ldr	r2, [pc, #596]	; (202a4 <hif_send+0x364>)
   20050:	0019      	movs	r1, r3
   20052:	0010      	movs	r0, r2
   20054:	4b92      	ldr	r3, [pc, #584]	; (202a0 <hif_send+0x360>)
   20056:	4798      	blx	r3
   20058:	0003      	movs	r3, r0
   2005a:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   2005c:	231f      	movs	r3, #31
   2005e:	18fb      	adds	r3, r7, r3
   20060:	781b      	ldrb	r3, [r3, #0]
   20062:	b25b      	sxtb	r3, r3
   20064:	2b00      	cmp	r3, #0
   20066:	d000      	beq.n	2006a <hif_send+0x12a>
   20068:	e104      	b.n	20274 <hif_send+0x334>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
   2006a:	2300      	movs	r3, #0
   2006c:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
   2006e:	230e      	movs	r3, #14
   20070:	18fb      	adds	r3, r7, r3
   20072:	2200      	movs	r2, #0
   20074:	801a      	strh	r2, [r3, #0]
   20076:	e050      	b.n	2011a <hif_send+0x1da>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
   20078:	231f      	movs	r3, #31
   2007a:	18fc      	adds	r4, r7, r3
   2007c:	2314      	movs	r3, #20
   2007e:	18fb      	adds	r3, r7, r3
   20080:	4a88      	ldr	r2, [pc, #544]	; (202a4 <hif_send+0x364>)
   20082:	0019      	movs	r1, r3
   20084:	0010      	movs	r0, r2
   20086:	4b88      	ldr	r3, [pc, #544]	; (202a8 <hif_send+0x368>)
   20088:	4798      	blx	r3
   2008a:	0003      	movs	r3, r0
   2008c:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
   2008e:	231f      	movs	r3, #31
   20090:	18fb      	adds	r3, r7, r3
   20092:	781b      	ldrb	r3, [r3, #0]
   20094:	b25b      	sxtb	r3, r3
   20096:	2b00      	cmp	r3, #0
   20098:	d147      	bne.n	2012a <hif_send+0x1ea>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
   2009a:	230e      	movs	r3, #14
   2009c:	18fb      	adds	r3, r7, r3
   2009e:	881b      	ldrh	r3, [r3, #0]
   200a0:	b29a      	uxth	r2, r3
   200a2:	23f4      	movs	r3, #244	; 0xf4
   200a4:	33ff      	adds	r3, #255	; 0xff
   200a6:	429a      	cmp	r2, r3
   200a8:	d916      	bls.n	200d8 <hif_send+0x198>
				if(cnt < 501) {
   200aa:	230e      	movs	r3, #14
   200ac:	18fb      	adds	r3, r7, r3
   200ae:	881b      	ldrh	r3, [r3, #0]
   200b0:	b29a      	uxth	r2, r3
   200b2:	23fa      	movs	r3, #250	; 0xfa
   200b4:	005b      	lsls	r3, r3, #1
   200b6:	429a      	cmp	r2, r3
   200b8:	d80b      	bhi.n	200d2 <hif_send+0x192>
					M2M_INFO("Slowing down...\n");
   200ba:	4b7c      	ldr	r3, [pc, #496]	; (202ac <hif_send+0x36c>)
   200bc:	0018      	movs	r0, r3
   200be:	4b7c      	ldr	r3, [pc, #496]	; (202b0 <hif_send+0x370>)
   200c0:	4798      	blx	r3
   200c2:	4b7c      	ldr	r3, [pc, #496]	; (202b4 <hif_send+0x374>)
   200c4:	0018      	movs	r0, r3
   200c6:	4b7a      	ldr	r3, [pc, #488]	; (202b0 <hif_send+0x370>)
   200c8:	4798      	blx	r3
   200ca:	4b7b      	ldr	r3, [pc, #492]	; (202b8 <hif_send+0x378>)
   200cc:	0018      	movs	r0, r3
   200ce:	4b78      	ldr	r3, [pc, #480]	; (202b0 <hif_send+0x370>)
   200d0:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
   200d2:	2001      	movs	r0, #1
   200d4:	4b79      	ldr	r3, [pc, #484]	; (202bc <hif_send+0x37c>)
   200d6:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
   200d8:	697b      	ldr	r3, [r7, #20]
   200da:	2202      	movs	r2, #2
   200dc:	4013      	ands	r3, r2
   200de:	d113      	bne.n	20108 <hif_send+0x1c8>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
   200e0:	231f      	movs	r3, #31
   200e2:	18fc      	adds	r4, r7, r3
   200e4:	2310      	movs	r3, #16
   200e6:	18fb      	adds	r3, r7, r3
   200e8:	4a75      	ldr	r2, [pc, #468]	; (202c0 <hif_send+0x380>)
   200ea:	0019      	movs	r1, r3
   200ec:	0010      	movs	r0, r2
   200ee:	4b6e      	ldr	r3, [pc, #440]	; (202a8 <hif_send+0x368>)
   200f0:	4798      	blx	r3
   200f2:	0003      	movs	r3, r0
   200f4:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
   200f6:	231f      	movs	r3, #31
   200f8:	18fb      	adds	r3, r7, r3
   200fa:	781b      	ldrb	r3, [r3, #0]
   200fc:	b25b      	sxtb	r3, r3
   200fe:	2b00      	cmp	r3, #0
   20100:	d015      	beq.n	2012e <hif_send+0x1ee>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
   20102:	2300      	movs	r3, #0
   20104:	613b      	str	r3, [r7, #16]
					goto ERR1;
   20106:	e0bc      	b.n	20282 <hif_send+0x342>
		for(cnt = 0; cnt < 1000; cnt ++)
   20108:	230e      	movs	r3, #14
   2010a:	18fb      	adds	r3, r7, r3
   2010c:	881b      	ldrh	r3, [r3, #0]
   2010e:	b29b      	uxth	r3, r3
   20110:	3301      	adds	r3, #1
   20112:	b29a      	uxth	r2, r3
   20114:	230e      	movs	r3, #14
   20116:	18fb      	adds	r3, r7, r3
   20118:	801a      	strh	r2, [r3, #0]
   2011a:	230e      	movs	r3, #14
   2011c:	18fb      	adds	r3, r7, r3
   2011e:	881b      	ldrh	r3, [r3, #0]
   20120:	b29b      	uxth	r3, r3
   20122:	4a68      	ldr	r2, [pc, #416]	; (202c4 <hif_send+0x384>)
   20124:	4293      	cmp	r3, r2
   20126:	d9a7      	bls.n	20078 <hif_send+0x138>
   20128:	e002      	b.n	20130 <hif_send+0x1f0>
			if(ret != M2M_SUCCESS) break;
   2012a:	46c0      	nop			; (mov r8, r8)
   2012c:	e000      	b.n	20130 <hif_send+0x1f0>
				}
				/*in case of success break */
				break;
   2012e:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
   20130:	693b      	ldr	r3, [r7, #16]
   20132:	2b00      	cmp	r3, #0
   20134:	d100      	bne.n	20138 <hif_send+0x1f8>
   20136:	e074      	b.n	20222 <hif_send+0x2e2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
   20138:	693b      	ldr	r3, [r7, #16]
   2013a:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
   2013c:	2318      	movs	r3, #24
   2013e:	18fb      	adds	r3, r7, r3
   20140:	885b      	ldrh	r3, [r3, #2]
   20142:	b29a      	uxth	r2, r3
   20144:	2318      	movs	r3, #24
   20146:	18fb      	adds	r3, r7, r3
   20148:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
   2014a:	68bb      	ldr	r3, [r7, #8]
   2014c:	221f      	movs	r2, #31
   2014e:	18bc      	adds	r4, r7, r2
   20150:	2218      	movs	r2, #24
   20152:	18b9      	adds	r1, r7, r2
   20154:	2208      	movs	r2, #8
   20156:	0018      	movs	r0, r3
   20158:	4b5b      	ldr	r3, [pc, #364]	; (202c8 <hif_send+0x388>)
   2015a:	4798      	blx	r3
   2015c:	0003      	movs	r3, r0
   2015e:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   20160:	231f      	movs	r3, #31
   20162:	18fb      	adds	r3, r7, r3
   20164:	781b      	ldrb	r3, [r3, #0]
   20166:	b25b      	sxtb	r3, r3
   20168:	2b00      	cmp	r3, #0
   2016a:	d000      	beq.n	2016e <hif_send+0x22e>
   2016c:	e084      	b.n	20278 <hif_send+0x338>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
   2016e:	68bb      	ldr	r3, [r7, #8]
   20170:	3308      	adds	r3, #8
   20172:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
   20174:	683b      	ldr	r3, [r7, #0]
   20176:	2b00      	cmp	r3, #0
   20178:	d016      	beq.n	201a8 <hif_send+0x268>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
   2017a:	68b8      	ldr	r0, [r7, #8]
   2017c:	1d3b      	adds	r3, r7, #4
   2017e:	881a      	ldrh	r2, [r3, #0]
   20180:	231f      	movs	r3, #31
   20182:	18fc      	adds	r4, r7, r3
   20184:	683b      	ldr	r3, [r7, #0]
   20186:	0019      	movs	r1, r3
   20188:	4b4f      	ldr	r3, [pc, #316]	; (202c8 <hif_send+0x388>)
   2018a:	4798      	blx	r3
   2018c:	0003      	movs	r3, r0
   2018e:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   20190:	231f      	movs	r3, #31
   20192:	18fb      	adds	r3, r7, r3
   20194:	781b      	ldrb	r3, [r3, #0]
   20196:	b25b      	sxtb	r3, r3
   20198:	2b00      	cmp	r3, #0
   2019a:	d000      	beq.n	2019e <hif_send+0x25e>
   2019c:	e06e      	b.n	2027c <hif_send+0x33c>
				u32CurrAddr += u16CtrlBufSize;
   2019e:	1d3b      	adds	r3, r7, #4
   201a0:	881a      	ldrh	r2, [r3, #0]
   201a2:	68bb      	ldr	r3, [r7, #8]
   201a4:	18d3      	adds	r3, r2, r3
   201a6:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
   201a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   201aa:	2b00      	cmp	r3, #0
   201ac:	d021      	beq.n	201f2 <hif_send+0x2b2>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
   201ae:	2338      	movs	r3, #56	; 0x38
   201b0:	18fb      	adds	r3, r7, r3
   201b2:	881a      	ldrh	r2, [r3, #0]
   201b4:	1d3b      	adds	r3, r7, #4
   201b6:	881b      	ldrh	r3, [r3, #0]
   201b8:	1ad3      	subs	r3, r2, r3
   201ba:	001a      	movs	r2, r3
   201bc:	68bb      	ldr	r3, [r7, #8]
   201be:	18d3      	adds	r3, r2, r3
   201c0:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
   201c2:	68b8      	ldr	r0, [r7, #8]
   201c4:	2334      	movs	r3, #52	; 0x34
   201c6:	18fb      	adds	r3, r7, r3
   201c8:	881a      	ldrh	r2, [r3, #0]
   201ca:	231f      	movs	r3, #31
   201cc:	18fc      	adds	r4, r7, r3
   201ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   201d0:	0019      	movs	r1, r3
   201d2:	4b3d      	ldr	r3, [pc, #244]	; (202c8 <hif_send+0x388>)
   201d4:	4798      	blx	r3
   201d6:	0003      	movs	r3, r0
   201d8:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   201da:	231f      	movs	r3, #31
   201dc:	18fb      	adds	r3, r7, r3
   201de:	781b      	ldrb	r3, [r3, #0]
   201e0:	b25b      	sxtb	r3, r3
   201e2:	2b00      	cmp	r3, #0
   201e4:	d14c      	bne.n	20280 <hif_send+0x340>
				u32CurrAddr += u16DataSize;
   201e6:	2334      	movs	r3, #52	; 0x34
   201e8:	18fb      	adds	r3, r7, r3
   201ea:	881a      	ldrh	r2, [r3, #0]
   201ec:	68bb      	ldr	r3, [r7, #8]
   201ee:	18d3      	adds	r3, r2, r3
   201f0:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
   201f2:	693b      	ldr	r3, [r7, #16]
   201f4:	009b      	lsls	r3, r3, #2
   201f6:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
   201f8:	697b      	ldr	r3, [r7, #20]
   201fa:	2202      	movs	r2, #2
   201fc:	4313      	orrs	r3, r2
   201fe:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
   20200:	697b      	ldr	r3, [r7, #20]
   20202:	221f      	movs	r2, #31
   20204:	18bc      	adds	r4, r7, r2
   20206:	4a31      	ldr	r2, [pc, #196]	; (202cc <hif_send+0x38c>)
   20208:	0019      	movs	r1, r3
   2020a:	0010      	movs	r0, r2
   2020c:	4b24      	ldr	r3, [pc, #144]	; (202a0 <hif_send+0x360>)
   2020e:	4798      	blx	r3
   20210:	0003      	movs	r3, r0
   20212:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   20214:	231f      	movs	r3, #31
   20216:	18fb      	adds	r3, r7, r3
   20218:	781b      	ldrb	r3, [r3, #0]
   2021a:	b25b      	sxtb	r3, r3
   2021c:	2b00      	cmp	r3, #0
   2021e:	d01c      	beq.n	2025a <hif_send+0x31a>
   20220:	e02f      	b.n	20282 <hif_send+0x342>
		}
		else
		{
			ret = hif_chip_sleep();
   20222:	231f      	movs	r3, #31
   20224:	18fc      	adds	r4, r7, r3
   20226:	4b2a      	ldr	r3, [pc, #168]	; (202d0 <hif_send+0x390>)
   20228:	4798      	blx	r3
   2022a:	0003      	movs	r3, r0
   2022c:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
   2022e:	231f      	movs	r3, #31
   20230:	18fb      	adds	r3, r7, r3
   20232:	22fd      	movs	r2, #253	; 0xfd
   20234:	701a      	strb	r2, [r3, #0]
			goto ERR2;
   20236:	e026      	b.n	20286 <hif_send+0x346>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
   20238:	2398      	movs	r3, #152	; 0x98
   2023a:	33ff      	adds	r3, #255	; 0xff
   2023c:	001a      	movs	r2, r3
   2023e:	4925      	ldr	r1, [pc, #148]	; (202d4 <hif_send+0x394>)
   20240:	4b25      	ldr	r3, [pc, #148]	; (202d8 <hif_send+0x398>)
   20242:	0018      	movs	r0, r3
   20244:	4b1a      	ldr	r3, [pc, #104]	; (202b0 <hif_send+0x370>)
   20246:	4798      	blx	r3
   20248:	4b24      	ldr	r3, [pc, #144]	; (202dc <hif_send+0x39c>)
   2024a:	0018      	movs	r0, r3
   2024c:	4b18      	ldr	r3, [pc, #96]	; (202b0 <hif_send+0x370>)
   2024e:	4798      	blx	r3
   20250:	4b19      	ldr	r3, [pc, #100]	; (202b8 <hif_send+0x378>)
   20252:	0018      	movs	r0, r3
   20254:	4b16      	ldr	r3, [pc, #88]	; (202b0 <hif_send+0x370>)
   20256:	4798      	blx	r3
		goto ERR2;
   20258:	e015      	b.n	20286 <hif_send+0x346>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
   2025a:	231f      	movs	r3, #31
   2025c:	18fc      	adds	r4, r7, r3
   2025e:	4b1c      	ldr	r3, [pc, #112]	; (202d0 <hif_send+0x390>)
   20260:	4798      	blx	r3
   20262:	0003      	movs	r3, r0
   20264:	7023      	strb	r3, [r4, #0]
	return ret;
   20266:	231f      	movs	r3, #31
   20268:	18fb      	adds	r3, r7, r3
   2026a:	781b      	ldrb	r3, [r3, #0]
   2026c:	b25b      	sxtb	r3, r3
   2026e:	e00e      	b.n	2028e <hif_send+0x34e>
		if(M2M_SUCCESS != ret) goto ERR1;
   20270:	46c0      	nop			; (mov r8, r8)
   20272:	e006      	b.n	20282 <hif_send+0x342>
		if(M2M_SUCCESS != ret) goto ERR1;
   20274:	46c0      	nop			; (mov r8, r8)
   20276:	e004      	b.n	20282 <hif_send+0x342>
			if(M2M_SUCCESS != ret) goto ERR1;
   20278:	46c0      	nop			; (mov r8, r8)
   2027a:	e002      	b.n	20282 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   2027c:	46c0      	nop			; (mov r8, r8)
   2027e:	e000      	b.n	20282 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   20280:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
   20282:	4b17      	ldr	r3, [pc, #92]	; (202e0 <hif_send+0x3a0>)
   20284:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
   20286:	231f      	movs	r3, #31
   20288:	18fb      	adds	r3, r7, r3
   2028a:	781b      	ldrb	r3, [r3, #0]
   2028c:	b25b      	sxtb	r3, r3
}
   2028e:	0018      	movs	r0, r3
   20290:	46bd      	mov	sp, r7
   20292:	b009      	add	sp, #36	; 0x24
   20294:	bd90      	pop	{r4, r7, pc}
   20296:	46c0      	nop			; (mov r8, r8)
   20298:	0001fe09 	.word	0x0001fe09
   2029c:	0000108c 	.word	0x0000108c
   202a0:	00021d95 	.word	0x00021d95
   202a4:	00001078 	.word	0x00001078
   202a8:	00021d71 	.word	0x00021d71
   202ac:	00037e0c 	.word	0x00037e0c
   202b0:	0001cf49 	.word	0x0001cf49
   202b4:	00037e18 	.word	0x00037e18
   202b8:	00037e2c 	.word	0x00037e2c
   202bc:	0001f401 	.word	0x0001f401
   202c0:	00150400 	.word	0x00150400
   202c4:	000003e7 	.word	0x000003e7
   202c8:	00021edd 	.word	0x00021edd
   202cc:	0000106c 	.word	0x0000106c
   202d0:	0001fea1 	.word	0x0001fea1
   202d4:	00038134 	.word	0x00038134
   202d8:	00037e30 	.word	0x00037e30
   202dc:	00037e44 	.word	0x00037e44
   202e0:	0001fe79 	.word	0x0001fe79

000202e4 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
   202e4:	b590      	push	{r4, r7, lr}
   202e6:	b087      	sub	sp, #28
   202e8:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
   202ea:	230f      	movs	r3, #15
   202ec:	18fb      	adds	r3, r7, r3
   202ee:	2200      	movs	r2, #0
   202f0:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
   202f2:	230f      	movs	r3, #15
   202f4:	18fc      	adds	r4, r7, r3
   202f6:	2308      	movs	r3, #8
   202f8:	18fb      	adds	r3, r7, r3
   202fa:	4adc      	ldr	r2, [pc, #880]	; (2066c <hif_isr+0x388>)
   202fc:	0019      	movs	r1, r3
   202fe:	0010      	movs	r0, r2
   20300:	4bdb      	ldr	r3, [pc, #876]	; (20670 <hif_isr+0x38c>)
   20302:	4798      	blx	r3
   20304:	0003      	movs	r3, r0
   20306:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
   20308:	230f      	movs	r3, #15
   2030a:	18fb      	adds	r3, r7, r3
   2030c:	781b      	ldrb	r3, [r3, #0]
   2030e:	b25b      	sxtb	r3, r3
   20310:	2b00      	cmp	r3, #0
   20312:	d000      	beq.n	20316 <hif_isr+0x32>
   20314:	e21e      	b.n	20754 <hif_isr+0x470>
	{
		if(reg & 0x1)	/* New interrupt has been received */
   20316:	68bb      	ldr	r3, [r7, #8]
   20318:	2201      	movs	r2, #1
   2031a:	4013      	ands	r3, r2
   2031c:	d100      	bne.n	20320 <hif_isr+0x3c>
   2031e:	e204      	b.n	2072a <hif_isr+0x446>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
   20320:	2000      	movs	r0, #0
   20322:	4bd4      	ldr	r3, [pc, #848]	; (20674 <hif_isr+0x390>)
   20324:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
   20326:	68bb      	ldr	r3, [r7, #8]
   20328:	2201      	movs	r2, #1
   2032a:	4393      	bics	r3, r2
   2032c:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   2032e:	68bb      	ldr	r3, [r7, #8]
   20330:	220f      	movs	r2, #15
   20332:	18bc      	adds	r4, r7, r2
   20334:	4acd      	ldr	r2, [pc, #820]	; (2066c <hif_isr+0x388>)
   20336:	0019      	movs	r1, r3
   20338:	0010      	movs	r0, r2
   2033a:	4bcf      	ldr	r3, [pc, #828]	; (20678 <hif_isr+0x394>)
   2033c:	4798      	blx	r3
   2033e:	0003      	movs	r3, r0
   20340:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   20342:	230f      	movs	r3, #15
   20344:	18fb      	adds	r3, r7, r3
   20346:	781b      	ldrb	r3, [r3, #0]
   20348:	b25b      	sxtb	r3, r3
   2034a:	2b00      	cmp	r3, #0
   2034c:	d000      	beq.n	20350 <hif_isr+0x6c>
   2034e:	e210      	b.n	20772 <hif_isr+0x48e>
			gstrHifCxt.u8HifRXDone = 1;
   20350:	4bca      	ldr	r3, [pc, #808]	; (2067c <hif_isr+0x398>)
   20352:	2201      	movs	r2, #1
   20354:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
   20356:	68bb      	ldr	r3, [r7, #8]
   20358:	089b      	lsrs	r3, r3, #2
   2035a:	b29a      	uxth	r2, r3
   2035c:	230c      	movs	r3, #12
   2035e:	18fb      	adds	r3, r7, r3
   20360:	0512      	lsls	r2, r2, #20
   20362:	0d12      	lsrs	r2, r2, #20
   20364:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
   20366:	230c      	movs	r3, #12
   20368:	18fb      	adds	r3, r7, r3
   2036a:	881b      	ldrh	r3, [r3, #0]
   2036c:	2b00      	cmp	r3, #0
   2036e:	d100      	bne.n	20372 <hif_isr+0x8e>
   20370:	e1c8      	b.n	20704 <hif_isr+0x420>
				uint32 address = 0;
   20372:	2300      	movs	r3, #0
   20374:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
   20376:	230f      	movs	r3, #15
   20378:	18fc      	adds	r4, r7, r3
   2037a:	003b      	movs	r3, r7
   2037c:	4ac0      	ldr	r2, [pc, #768]	; (20680 <hif_isr+0x39c>)
   2037e:	0019      	movs	r1, r3
   20380:	0010      	movs	r0, r2
   20382:	4bbb      	ldr	r3, [pc, #748]	; (20670 <hif_isr+0x38c>)
   20384:	4798      	blx	r3
   20386:	0003      	movs	r3, r0
   20388:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
   2038a:	230f      	movs	r3, #15
   2038c:	18fb      	adds	r3, r7, r3
   2038e:	781b      	ldrb	r3, [r3, #0]
   20390:	b25b      	sxtb	r3, r3
   20392:	2b00      	cmp	r3, #0
   20394:	d012      	beq.n	203bc <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
   20396:	23e4      	movs	r3, #228	; 0xe4
   20398:	005a      	lsls	r2, r3, #1
   2039a:	49ba      	ldr	r1, [pc, #744]	; (20684 <hif_isr+0x3a0>)
   2039c:	4bba      	ldr	r3, [pc, #744]	; (20688 <hif_isr+0x3a4>)
   2039e:	0018      	movs	r0, r3
   203a0:	4bba      	ldr	r3, [pc, #744]	; (2068c <hif_isr+0x3a8>)
   203a2:	4798      	blx	r3
   203a4:	4bba      	ldr	r3, [pc, #744]	; (20690 <hif_isr+0x3ac>)
   203a6:	0018      	movs	r0, r3
   203a8:	4bb8      	ldr	r3, [pc, #736]	; (2068c <hif_isr+0x3a8>)
   203aa:	4798      	blx	r3
   203ac:	4bb9      	ldr	r3, [pc, #740]	; (20694 <hif_isr+0x3b0>)
   203ae:	0018      	movs	r0, r3
   203b0:	4bb6      	ldr	r3, [pc, #728]	; (2068c <hif_isr+0x3a8>)
   203b2:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   203b4:	2001      	movs	r0, #1
   203b6:	4baf      	ldr	r3, [pc, #700]	; (20674 <hif_isr+0x390>)
   203b8:	4798      	blx	r3
					goto ERR1;
   203ba:	e1db      	b.n	20774 <hif_isr+0x490>
				}
				gstrHifCxt.u32RxAddr = address;
   203bc:	683a      	ldr	r2, [r7, #0]
   203be:	4baf      	ldr	r3, [pc, #700]	; (2067c <hif_isr+0x398>)
   203c0:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
   203c2:	230c      	movs	r3, #12
   203c4:	18fb      	adds	r3, r7, r3
   203c6:	881a      	ldrh	r2, [r3, #0]
   203c8:	4bac      	ldr	r3, [pc, #688]	; (2067c <hif_isr+0x398>)
   203ca:	60da      	str	r2, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
   203cc:	683b      	ldr	r3, [r7, #0]
   203ce:	220f      	movs	r2, #15
   203d0:	18bc      	adds	r4, r7, r2
   203d2:	1d39      	adds	r1, r7, #4
   203d4:	2204      	movs	r2, #4
   203d6:	0018      	movs	r0, r3
   203d8:	4baf      	ldr	r3, [pc, #700]	; (20698 <hif_isr+0x3b4>)
   203da:	4798      	blx	r3
   203dc:	0003      	movs	r3, r0
   203de:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
   203e0:	1d3b      	adds	r3, r7, #4
   203e2:	885b      	ldrh	r3, [r3, #2]
   203e4:	b29a      	uxth	r2, r3
   203e6:	1d3b      	adds	r3, r7, #4
   203e8:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
   203ea:	230f      	movs	r3, #15
   203ec:	18fb      	adds	r3, r7, r3
   203ee:	781b      	ldrb	r3, [r3, #0]
   203f0:	b25b      	sxtb	r3, r3
   203f2:	2b00      	cmp	r3, #0
   203f4:	d012      	beq.n	2041c <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
   203f6:	23e9      	movs	r3, #233	; 0xe9
   203f8:	005a      	lsls	r2, r3, #1
   203fa:	49a2      	ldr	r1, [pc, #648]	; (20684 <hif_isr+0x3a0>)
   203fc:	4ba2      	ldr	r3, [pc, #648]	; (20688 <hif_isr+0x3a4>)
   203fe:	0018      	movs	r0, r3
   20400:	4ba2      	ldr	r3, [pc, #648]	; (2068c <hif_isr+0x3a8>)
   20402:	4798      	blx	r3
   20404:	4ba5      	ldr	r3, [pc, #660]	; (2069c <hif_isr+0x3b8>)
   20406:	0018      	movs	r0, r3
   20408:	4ba0      	ldr	r3, [pc, #640]	; (2068c <hif_isr+0x3a8>)
   2040a:	4798      	blx	r3
   2040c:	4ba1      	ldr	r3, [pc, #644]	; (20694 <hif_isr+0x3b0>)
   2040e:	0018      	movs	r0, r3
   20410:	4b9e      	ldr	r3, [pc, #632]	; (2068c <hif_isr+0x3a8>)
   20412:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   20414:	2001      	movs	r0, #1
   20416:	4b97      	ldr	r3, [pc, #604]	; (20674 <hif_isr+0x390>)
   20418:	4798      	blx	r3
					goto ERR1;
   2041a:	e1ab      	b.n	20774 <hif_isr+0x490>
				}
				if(strHif.u16Length != size)
   2041c:	1d3b      	adds	r3, r7, #4
   2041e:	885b      	ldrh	r3, [r3, #2]
   20420:	b29b      	uxth	r3, r3
   20422:	220c      	movs	r2, #12
   20424:	18ba      	adds	r2, r7, r2
   20426:	8812      	ldrh	r2, [r2, #0]
   20428:	429a      	cmp	r2, r3
   2042a:	d02f      	beq.n	2048c <hif_isr+0x1a8>
				{
					if((size - strHif.u16Length) > 4)
   2042c:	230c      	movs	r3, #12
   2042e:	18fb      	adds	r3, r7, r3
   20430:	881b      	ldrh	r3, [r3, #0]
   20432:	1d3a      	adds	r2, r7, #4
   20434:	8852      	ldrh	r2, [r2, #2]
   20436:	b292      	uxth	r2, r2
   20438:	1a9b      	subs	r3, r3, r2
   2043a:	2b04      	cmp	r3, #4
   2043c:	dd26      	ble.n	2048c <hif_isr+0x1a8>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
   2043e:	23dc      	movs	r3, #220	; 0xdc
   20440:	33ff      	adds	r3, #255	; 0xff
   20442:	001a      	movs	r2, r3
   20444:	498f      	ldr	r1, [pc, #572]	; (20684 <hif_isr+0x3a0>)
   20446:	4b90      	ldr	r3, [pc, #576]	; (20688 <hif_isr+0x3a4>)
   20448:	0018      	movs	r0, r3
   2044a:	4b90      	ldr	r3, [pc, #576]	; (2068c <hif_isr+0x3a8>)
   2044c:	4798      	blx	r3
   2044e:	230c      	movs	r3, #12
   20450:	18fb      	adds	r3, r7, r3
   20452:	8819      	ldrh	r1, [r3, #0]
   20454:	1d3b      	adds	r3, r7, #4
   20456:	885b      	ldrh	r3, [r3, #2]
   20458:	b29b      	uxth	r3, r3
   2045a:	001a      	movs	r2, r3
   2045c:	1d3b      	adds	r3, r7, #4
   2045e:	781b      	ldrb	r3, [r3, #0]
   20460:	b2db      	uxtb	r3, r3
   20462:	001c      	movs	r4, r3
   20464:	1d3b      	adds	r3, r7, #4
   20466:	785b      	ldrb	r3, [r3, #1]
   20468:	b2db      	uxtb	r3, r3
   2046a:	488d      	ldr	r0, [pc, #564]	; (206a0 <hif_isr+0x3bc>)
   2046c:	9300      	str	r3, [sp, #0]
   2046e:	0023      	movs	r3, r4
   20470:	4c86      	ldr	r4, [pc, #536]	; (2068c <hif_isr+0x3a8>)
   20472:	47a0      	blx	r4
   20474:	4b87      	ldr	r3, [pc, #540]	; (20694 <hif_isr+0x3b0>)
   20476:	0018      	movs	r0, r3
   20478:	4b84      	ldr	r3, [pc, #528]	; (2068c <hif_isr+0x3a8>)
   2047a:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
   2047c:	2001      	movs	r0, #1
   2047e:	4b7d      	ldr	r3, [pc, #500]	; (20674 <hif_isr+0x390>)
   20480:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
   20482:	230f      	movs	r3, #15
   20484:	18fb      	adds	r3, r7, r3
   20486:	22fa      	movs	r2, #250	; 0xfa
   20488:	701a      	strb	r2, [r3, #0]
						goto ERR1;
   2048a:	e173      	b.n	20774 <hif_isr+0x490>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
   2048c:	1d3b      	adds	r3, r7, #4
   2048e:	781b      	ldrb	r3, [r3, #0]
   20490:	b2db      	uxtb	r3, r3
   20492:	2b01      	cmp	r3, #1
   20494:	d122      	bne.n	204dc <hif_isr+0x1f8>
				{
					if(gstrHifCxt.pfWifiCb)
   20496:	4b79      	ldr	r3, [pc, #484]	; (2067c <hif_isr+0x398>)
   20498:	691b      	ldr	r3, [r3, #16]
   2049a:	2b00      	cmp	r3, #0
   2049c:	d00d      	beq.n	204ba <hif_isr+0x1d6>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   2049e:	4b77      	ldr	r3, [pc, #476]	; (2067c <hif_isr+0x398>)
   204a0:	691b      	ldr	r3, [r3, #16]
   204a2:	1d3a      	adds	r2, r7, #4
   204a4:	7852      	ldrb	r2, [r2, #1]
   204a6:	b2d0      	uxtb	r0, r2
   204a8:	1d3a      	adds	r2, r7, #4
   204aa:	8852      	ldrh	r2, [r2, #2]
   204ac:	b292      	uxth	r2, r2
   204ae:	3a08      	subs	r2, #8
   204b0:	b291      	uxth	r1, r2
   204b2:	683a      	ldr	r2, [r7, #0]
   204b4:	3208      	adds	r2, #8
   204b6:	4798      	blx	r3
   204b8:	e102      	b.n	206c0 <hif_isr+0x3dc>
					else
						M2M_ERR("WIFI callback is not registered\n");
   204ba:	23e8      	movs	r3, #232	; 0xe8
   204bc:	33ff      	adds	r3, #255	; 0xff
   204be:	001a      	movs	r2, r3
   204c0:	4970      	ldr	r1, [pc, #448]	; (20684 <hif_isr+0x3a0>)
   204c2:	4b71      	ldr	r3, [pc, #452]	; (20688 <hif_isr+0x3a4>)
   204c4:	0018      	movs	r0, r3
   204c6:	4b71      	ldr	r3, [pc, #452]	; (2068c <hif_isr+0x3a8>)
   204c8:	4798      	blx	r3
   204ca:	4b76      	ldr	r3, [pc, #472]	; (206a4 <hif_isr+0x3c0>)
   204cc:	0018      	movs	r0, r3
   204ce:	4b6f      	ldr	r3, [pc, #444]	; (2068c <hif_isr+0x3a8>)
   204d0:	4798      	blx	r3
   204d2:	4b70      	ldr	r3, [pc, #448]	; (20694 <hif_isr+0x3b0>)
   204d4:	0018      	movs	r0, r3
   204d6:	4b6d      	ldr	r3, [pc, #436]	; (2068c <hif_isr+0x3a8>)
   204d8:	4798      	blx	r3
   204da:	e0f1      	b.n	206c0 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
   204dc:	1d3b      	adds	r3, r7, #4
   204de:	781b      	ldrb	r3, [r3, #0]
   204e0:	b2db      	uxtb	r3, r3
   204e2:	2b02      	cmp	r3, #2
   204e4:	d122      	bne.n	2052c <hif_isr+0x248>
				{
					if(gstrHifCxt.pfIpCb)
   204e6:	4b65      	ldr	r3, [pc, #404]	; (2067c <hif_isr+0x398>)
   204e8:	695b      	ldr	r3, [r3, #20]
   204ea:	2b00      	cmp	r3, #0
   204ec:	d00d      	beq.n	2050a <hif_isr+0x226>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   204ee:	4b63      	ldr	r3, [pc, #396]	; (2067c <hif_isr+0x398>)
   204f0:	695b      	ldr	r3, [r3, #20]
   204f2:	1d3a      	adds	r2, r7, #4
   204f4:	7852      	ldrb	r2, [r2, #1]
   204f6:	b2d0      	uxtb	r0, r2
   204f8:	1d3a      	adds	r2, r7, #4
   204fa:	8852      	ldrh	r2, [r2, #2]
   204fc:	b292      	uxth	r2, r2
   204fe:	3a08      	subs	r2, #8
   20500:	b291      	uxth	r1, r2
   20502:	683a      	ldr	r2, [r7, #0]
   20504:	3208      	adds	r2, #8
   20506:	4798      	blx	r3
   20508:	e0da      	b.n	206c0 <hif_isr+0x3dc>
					else
						M2M_ERR("Scoket callback is not registered\n");
   2050a:	23f0      	movs	r3, #240	; 0xf0
   2050c:	33ff      	adds	r3, #255	; 0xff
   2050e:	001a      	movs	r2, r3
   20510:	495c      	ldr	r1, [pc, #368]	; (20684 <hif_isr+0x3a0>)
   20512:	4b5d      	ldr	r3, [pc, #372]	; (20688 <hif_isr+0x3a4>)
   20514:	0018      	movs	r0, r3
   20516:	4b5d      	ldr	r3, [pc, #372]	; (2068c <hif_isr+0x3a8>)
   20518:	4798      	blx	r3
   2051a:	4b63      	ldr	r3, [pc, #396]	; (206a8 <hif_isr+0x3c4>)
   2051c:	0018      	movs	r0, r3
   2051e:	4b5b      	ldr	r3, [pc, #364]	; (2068c <hif_isr+0x3a8>)
   20520:	4798      	blx	r3
   20522:	4b5c      	ldr	r3, [pc, #368]	; (20694 <hif_isr+0x3b0>)
   20524:	0018      	movs	r0, r3
   20526:	4b59      	ldr	r3, [pc, #356]	; (2068c <hif_isr+0x3a8>)
   20528:	4798      	blx	r3
   2052a:	e0c9      	b.n	206c0 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
   2052c:	1d3b      	adds	r3, r7, #4
   2052e:	781b      	ldrb	r3, [r3, #0]
   20530:	b2db      	uxtb	r3, r3
   20532:	2b04      	cmp	r3, #4
   20534:	d122      	bne.n	2057c <hif_isr+0x298>
				{
					if(gstrHifCxt.pfOtaCb)
   20536:	4b51      	ldr	r3, [pc, #324]	; (2067c <hif_isr+0x398>)
   20538:	699b      	ldr	r3, [r3, #24]
   2053a:	2b00      	cmp	r3, #0
   2053c:	d00d      	beq.n	2055a <hif_isr+0x276>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   2053e:	4b4f      	ldr	r3, [pc, #316]	; (2067c <hif_isr+0x398>)
   20540:	699b      	ldr	r3, [r3, #24]
   20542:	1d3a      	adds	r2, r7, #4
   20544:	7852      	ldrb	r2, [r2, #1]
   20546:	b2d0      	uxtb	r0, r2
   20548:	1d3a      	adds	r2, r7, #4
   2054a:	8852      	ldrh	r2, [r2, #2]
   2054c:	b292      	uxth	r2, r2
   2054e:	3a08      	subs	r2, #8
   20550:	b291      	uxth	r1, r2
   20552:	683a      	ldr	r2, [r7, #0]
   20554:	3208      	adds	r2, #8
   20556:	4798      	blx	r3
   20558:	e0b2      	b.n	206c0 <hif_isr+0x3dc>
					else
						M2M_ERR("Ota callback is not registered\n");
   2055a:	23f8      	movs	r3, #248	; 0xf8
   2055c:	33ff      	adds	r3, #255	; 0xff
   2055e:	001a      	movs	r2, r3
   20560:	4948      	ldr	r1, [pc, #288]	; (20684 <hif_isr+0x3a0>)
   20562:	4b49      	ldr	r3, [pc, #292]	; (20688 <hif_isr+0x3a4>)
   20564:	0018      	movs	r0, r3
   20566:	4b49      	ldr	r3, [pc, #292]	; (2068c <hif_isr+0x3a8>)
   20568:	4798      	blx	r3
   2056a:	4b50      	ldr	r3, [pc, #320]	; (206ac <hif_isr+0x3c8>)
   2056c:	0018      	movs	r0, r3
   2056e:	4b47      	ldr	r3, [pc, #284]	; (2068c <hif_isr+0x3a8>)
   20570:	4798      	blx	r3
   20572:	4b48      	ldr	r3, [pc, #288]	; (20694 <hif_isr+0x3b0>)
   20574:	0018      	movs	r0, r3
   20576:	4b45      	ldr	r3, [pc, #276]	; (2068c <hif_isr+0x3a8>)
   20578:	4798      	blx	r3
   2057a:	e0a1      	b.n	206c0 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
   2057c:	1d3b      	adds	r3, r7, #4
   2057e:	781b      	ldrb	r3, [r3, #0]
   20580:	b2db      	uxtb	r3, r3
   20582:	2b06      	cmp	r3, #6
   20584:	d121      	bne.n	205ca <hif_isr+0x2e6>
				{
					if(gstrHifCxt.pfCryptoCb)
   20586:	4b3d      	ldr	r3, [pc, #244]	; (2067c <hif_isr+0x398>)
   20588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2058a:	2b00      	cmp	r3, #0
   2058c:	d00d      	beq.n	205aa <hif_isr+0x2c6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   2058e:	4b3b      	ldr	r3, [pc, #236]	; (2067c <hif_isr+0x398>)
   20590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   20592:	1d3a      	adds	r2, r7, #4
   20594:	7852      	ldrb	r2, [r2, #1]
   20596:	b2d0      	uxtb	r0, r2
   20598:	1d3a      	adds	r2, r7, #4
   2059a:	8852      	ldrh	r2, [r2, #2]
   2059c:	b292      	uxth	r2, r2
   2059e:	3a08      	subs	r2, #8
   205a0:	b291      	uxth	r1, r2
   205a2:	683a      	ldr	r2, [r7, #0]
   205a4:	3208      	adds	r2, #8
   205a6:	4798      	blx	r3
   205a8:	e08a      	b.n	206c0 <hif_isr+0x3dc>

					else
						M2M_ERR("Crypto callback is not registered\n");
   205aa:	2380      	movs	r3, #128	; 0x80
   205ac:	009a      	lsls	r2, r3, #2
   205ae:	4935      	ldr	r1, [pc, #212]	; (20684 <hif_isr+0x3a0>)
   205b0:	4b35      	ldr	r3, [pc, #212]	; (20688 <hif_isr+0x3a4>)
   205b2:	0018      	movs	r0, r3
   205b4:	4b35      	ldr	r3, [pc, #212]	; (2068c <hif_isr+0x3a8>)
   205b6:	4798      	blx	r3
   205b8:	4b3d      	ldr	r3, [pc, #244]	; (206b0 <hif_isr+0x3cc>)
   205ba:	0018      	movs	r0, r3
   205bc:	4b33      	ldr	r3, [pc, #204]	; (2068c <hif_isr+0x3a8>)
   205be:	4798      	blx	r3
   205c0:	4b34      	ldr	r3, [pc, #208]	; (20694 <hif_isr+0x3b0>)
   205c2:	0018      	movs	r0, r3
   205c4:	4b31      	ldr	r3, [pc, #196]	; (2068c <hif_isr+0x3a8>)
   205c6:	4798      	blx	r3
   205c8:	e07a      	b.n	206c0 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
   205ca:	1d3b      	adds	r3, r7, #4
   205cc:	781b      	ldrb	r3, [r3, #0]
   205ce:	b2db      	uxtb	r3, r3
   205d0:	2b07      	cmp	r3, #7
   205d2:	d120      	bne.n	20616 <hif_isr+0x332>
				{
					if(gstrHifCxt.pfSigmaCb)
   205d4:	4b29      	ldr	r3, [pc, #164]	; (2067c <hif_isr+0x398>)
   205d6:	69db      	ldr	r3, [r3, #28]
   205d8:	2b00      	cmp	r3, #0
   205da:	d00d      	beq.n	205f8 <hif_isr+0x314>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   205dc:	4b27      	ldr	r3, [pc, #156]	; (2067c <hif_isr+0x398>)
   205de:	69db      	ldr	r3, [r3, #28]
   205e0:	1d3a      	adds	r2, r7, #4
   205e2:	7852      	ldrb	r2, [r2, #1]
   205e4:	b2d0      	uxtb	r0, r2
   205e6:	1d3a      	adds	r2, r7, #4
   205e8:	8852      	ldrh	r2, [r2, #2]
   205ea:	b292      	uxth	r2, r2
   205ec:	3a08      	subs	r2, #8
   205ee:	b291      	uxth	r1, r2
   205f0:	683a      	ldr	r2, [r7, #0]
   205f2:	3208      	adds	r2, #8
   205f4:	4798      	blx	r3
   205f6:	e063      	b.n	206c0 <hif_isr+0x3dc>
					else
						M2M_ERR("Sigma callback is not registered\n");
   205f8:	4a2e      	ldr	r2, [pc, #184]	; (206b4 <hif_isr+0x3d0>)
   205fa:	4922      	ldr	r1, [pc, #136]	; (20684 <hif_isr+0x3a0>)
   205fc:	4b22      	ldr	r3, [pc, #136]	; (20688 <hif_isr+0x3a4>)
   205fe:	0018      	movs	r0, r3
   20600:	4b22      	ldr	r3, [pc, #136]	; (2068c <hif_isr+0x3a8>)
   20602:	4798      	blx	r3
   20604:	4b2c      	ldr	r3, [pc, #176]	; (206b8 <hif_isr+0x3d4>)
   20606:	0018      	movs	r0, r3
   20608:	4b20      	ldr	r3, [pc, #128]	; (2068c <hif_isr+0x3a8>)
   2060a:	4798      	blx	r3
   2060c:	4b21      	ldr	r3, [pc, #132]	; (20694 <hif_isr+0x3b0>)
   2060e:	0018      	movs	r0, r3
   20610:	4b1e      	ldr	r3, [pc, #120]	; (2068c <hif_isr+0x3a8>)
   20612:	4798      	blx	r3
   20614:	e054      	b.n	206c0 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
   20616:	1d3b      	adds	r3, r7, #4
   20618:	781b      	ldrb	r3, [r3, #0]
   2061a:	b2db      	uxtb	r3, r3
   2061c:	2b05      	cmp	r3, #5
   2061e:	d111      	bne.n	20644 <hif_isr+0x360>
				{
				    if(gstrHifCxt.pfSslCb)
   20620:	4b16      	ldr	r3, [pc, #88]	; (2067c <hif_isr+0x398>)
   20622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20624:	2b00      	cmp	r3, #0
   20626:	d04b      	beq.n	206c0 <hif_isr+0x3dc>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   20628:	4b14      	ldr	r3, [pc, #80]	; (2067c <hif_isr+0x398>)
   2062a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2062c:	1d3a      	adds	r2, r7, #4
   2062e:	7852      	ldrb	r2, [r2, #1]
   20630:	b2d0      	uxtb	r0, r2
   20632:	1d3a      	adds	r2, r7, #4
   20634:	8852      	ldrh	r2, [r2, #2]
   20636:	b292      	uxth	r2, r2
   20638:	3a08      	subs	r2, #8
   2063a:	b291      	uxth	r1, r2
   2063c:	683a      	ldr	r2, [r7, #0]
   2063e:	3208      	adds	r2, #8
   20640:	4798      	blx	r3
   20642:	e03d      	b.n	206c0 <hif_isr+0x3dc>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
   20644:	2384      	movs	r3, #132	; 0x84
   20646:	009a      	lsls	r2, r3, #2
   20648:	490e      	ldr	r1, [pc, #56]	; (20684 <hif_isr+0x3a0>)
   2064a:	4b0f      	ldr	r3, [pc, #60]	; (20688 <hif_isr+0x3a4>)
   2064c:	0018      	movs	r0, r3
   2064e:	4b0f      	ldr	r3, [pc, #60]	; (2068c <hif_isr+0x3a8>)
   20650:	4798      	blx	r3
   20652:	4b1a      	ldr	r3, [pc, #104]	; (206bc <hif_isr+0x3d8>)
   20654:	0018      	movs	r0, r3
   20656:	4b0d      	ldr	r3, [pc, #52]	; (2068c <hif_isr+0x3a8>)
   20658:	4798      	blx	r3
   2065a:	4b0e      	ldr	r3, [pc, #56]	; (20694 <hif_isr+0x3b0>)
   2065c:	0018      	movs	r0, r3
   2065e:	4b0b      	ldr	r3, [pc, #44]	; (2068c <hif_isr+0x3a8>)
   20660:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
   20662:	230f      	movs	r3, #15
   20664:	18fb      	adds	r3, r7, r3
   20666:	22fa      	movs	r2, #250	; 0xfa
   20668:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   2066a:	e083      	b.n	20774 <hif_isr+0x490>
   2066c:	00001070 	.word	0x00001070
   20670:	00021d71 	.word	0x00021d71
   20674:	0001f495 	.word	0x0001f495
   20678:	00021d95 	.word	0x00021d95
   2067c:	20005a98 	.word	0x20005a98
   20680:	00001084 	.word	0x00001084
   20684:	00038140 	.word	0x00038140
   20688:	00037e30 	.word	0x00037e30
   2068c:	0001cf49 	.word	0x0001cf49
   20690:	00037e64 	.word	0x00037e64
   20694:	00037e2c 	.word	0x00037e2c
   20698:	00021de5 	.word	0x00021de5
   2069c:	00037e8c 	.word	0x00037e8c
   206a0:	00037ea4 	.word	0x00037ea4
   206a4:	00037ee4 	.word	0x00037ee4
   206a8:	00037f08 	.word	0x00037f08
   206ac:	00037f2c 	.word	0x00037f2c
   206b0:	00037f4c 	.word	0x00037f4c
   206b4:	00000207 	.word	0x00000207
   206b8:	00037f70 	.word	0x00037f70
   206bc:	00037f94 	.word	0x00037f94
				}
				if(gstrHifCxt.u8HifRXDone)
   206c0:	4b30      	ldr	r3, [pc, #192]	; (20784 <hif_isr+0x4a0>)
   206c2:	789b      	ldrb	r3, [r3, #2]
   206c4:	b2db      	uxtb	r3, r3
   206c6:	2b00      	cmp	r3, #0
   206c8:	d054      	beq.n	20774 <hif_isr+0x490>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
   206ca:	4a2f      	ldr	r2, [pc, #188]	; (20788 <hif_isr+0x4a4>)
   206cc:	492f      	ldr	r1, [pc, #188]	; (2078c <hif_isr+0x4a8>)
   206ce:	4b30      	ldr	r3, [pc, #192]	; (20790 <hif_isr+0x4ac>)
   206d0:	0018      	movs	r0, r3
   206d2:	4b30      	ldr	r3, [pc, #192]	; (20794 <hif_isr+0x4b0>)
   206d4:	4798      	blx	r3
   206d6:	1d3b      	adds	r3, r7, #4
   206d8:	781b      	ldrb	r3, [r3, #0]
   206da:	b2db      	uxtb	r3, r3
   206dc:	0019      	movs	r1, r3
   206de:	1d3b      	adds	r3, r7, #4
   206e0:	785b      	ldrb	r3, [r3, #1]
   206e2:	b2db      	uxtb	r3, r3
   206e4:	001a      	movs	r2, r3
   206e6:	4b2c      	ldr	r3, [pc, #176]	; (20798 <hif_isr+0x4b4>)
   206e8:	0018      	movs	r0, r3
   206ea:	4b2a      	ldr	r3, [pc, #168]	; (20794 <hif_isr+0x4b0>)
   206ec:	4798      	blx	r3
   206ee:	4b2b      	ldr	r3, [pc, #172]	; (2079c <hif_isr+0x4b8>)
   206f0:	0018      	movs	r0, r3
   206f2:	4b28      	ldr	r3, [pc, #160]	; (20794 <hif_isr+0x4b0>)
   206f4:	4798      	blx	r3
					ret = hif_set_rx_done();
   206f6:	230f      	movs	r3, #15
   206f8:	18fc      	adds	r4, r7, r3
   206fa:	4b29      	ldr	r3, [pc, #164]	; (207a0 <hif_isr+0x4bc>)
   206fc:	4798      	blx	r3
   206fe:	0003      	movs	r3, r0
   20700:	7023      	strb	r3, [r4, #0]
   20702:	e037      	b.n	20774 <hif_isr+0x490>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
   20704:	4a27      	ldr	r2, [pc, #156]	; (207a4 <hif_isr+0x4c0>)
   20706:	4921      	ldr	r1, [pc, #132]	; (2078c <hif_isr+0x4a8>)
   20708:	4b21      	ldr	r3, [pc, #132]	; (20790 <hif_isr+0x4ac>)
   2070a:	0018      	movs	r0, r3
   2070c:	4b21      	ldr	r3, [pc, #132]	; (20794 <hif_isr+0x4b0>)
   2070e:	4798      	blx	r3
   20710:	4b25      	ldr	r3, [pc, #148]	; (207a8 <hif_isr+0x4c4>)
   20712:	0018      	movs	r0, r3
   20714:	4b1f      	ldr	r3, [pc, #124]	; (20794 <hif_isr+0x4b0>)
   20716:	4798      	blx	r3
   20718:	4b20      	ldr	r3, [pc, #128]	; (2079c <hif_isr+0x4b8>)
   2071a:	0018      	movs	r0, r3
   2071c:	4b1d      	ldr	r3, [pc, #116]	; (20794 <hif_isr+0x4b0>)
   2071e:	4798      	blx	r3
				ret = M2M_ERR_RCV;
   20720:	230f      	movs	r3, #15
   20722:	18fb      	adds	r3, r7, r3
   20724:	22fe      	movs	r2, #254	; 0xfe
   20726:	701a      	strb	r2, [r3, #0]
				goto ERR1;
   20728:	e024      	b.n	20774 <hif_isr+0x490>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
   2072a:	4a20      	ldr	r2, [pc, #128]	; (207ac <hif_isr+0x4c8>)
   2072c:	4917      	ldr	r1, [pc, #92]	; (2078c <hif_isr+0x4a8>)
   2072e:	4b18      	ldr	r3, [pc, #96]	; (20790 <hif_isr+0x4ac>)
   20730:	0018      	movs	r0, r3
   20732:	4b18      	ldr	r3, [pc, #96]	; (20794 <hif_isr+0x4b0>)
   20734:	4798      	blx	r3
   20736:	68ba      	ldr	r2, [r7, #8]
   20738:	4b1d      	ldr	r3, [pc, #116]	; (207b0 <hif_isr+0x4cc>)
   2073a:	0011      	movs	r1, r2
   2073c:	0018      	movs	r0, r3
   2073e:	4b15      	ldr	r3, [pc, #84]	; (20794 <hif_isr+0x4b0>)
   20740:	4798      	blx	r3
   20742:	4b16      	ldr	r3, [pc, #88]	; (2079c <hif_isr+0x4b8>)
   20744:	0018      	movs	r0, r3
   20746:	4b13      	ldr	r3, [pc, #76]	; (20794 <hif_isr+0x4b0>)
   20748:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   2074a:	230f      	movs	r3, #15
   2074c:	18fb      	adds	r3, r7, r3
   2074e:	22f4      	movs	r2, #244	; 0xf4
   20750:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   20752:	e00f      	b.n	20774 <hif_isr+0x490>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
   20754:	4a17      	ldr	r2, [pc, #92]	; (207b4 <hif_isr+0x4d0>)
   20756:	490d      	ldr	r1, [pc, #52]	; (2078c <hif_isr+0x4a8>)
   20758:	4b0d      	ldr	r3, [pc, #52]	; (20790 <hif_isr+0x4ac>)
   2075a:	0018      	movs	r0, r3
   2075c:	4b0d      	ldr	r3, [pc, #52]	; (20794 <hif_isr+0x4b0>)
   2075e:	4798      	blx	r3
   20760:	4b15      	ldr	r3, [pc, #84]	; (207b8 <hif_isr+0x4d4>)
   20762:	0018      	movs	r0, r3
   20764:	4b0b      	ldr	r3, [pc, #44]	; (20794 <hif_isr+0x4b0>)
   20766:	4798      	blx	r3
   20768:	4b0c      	ldr	r3, [pc, #48]	; (2079c <hif_isr+0x4b8>)
   2076a:	0018      	movs	r0, r3
   2076c:	4b09      	ldr	r3, [pc, #36]	; (20794 <hif_isr+0x4b0>)
   2076e:	4798      	blx	r3
		goto ERR1;
   20770:	e000      	b.n	20774 <hif_isr+0x490>
			if(ret != M2M_SUCCESS)goto ERR1;
   20772:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   20774:	230f      	movs	r3, #15
   20776:	18fb      	adds	r3, r7, r3
   20778:	781b      	ldrb	r3, [r3, #0]
   2077a:	b25b      	sxtb	r3, r3
}
   2077c:	0018      	movs	r0, r3
   2077e:	46bd      	mov	sp, r7
   20780:	b005      	add	sp, #20
   20782:	bd90      	pop	{r4, r7, pc}
   20784:	20005a98 	.word	0x20005a98
   20788:	00000216 	.word	0x00000216
   2078c:	00038140 	.word	0x00038140
   20790:	00037e30 	.word	0x00037e30
   20794:	0001cf49 	.word	0x0001cf49
   20798:	00037fac 	.word	0x00037fac
   2079c:	00037e2c 	.word	0x00037e2c
   207a0:	0001fd79 	.word	0x0001fd79
   207a4:	0000021d 	.word	0x0000021d
   207a8:	00037fd8 	.word	0x00037fd8
   207ac:	00000225 	.word	0x00000225
   207b0:	00037fec 	.word	0x00037fec
   207b4:	0000022e 	.word	0x0000022e
   207b8:	00038008 	.word	0x00038008

000207bc <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
   207bc:	b590      	push	{r4, r7, lr}
   207be:	b083      	sub	sp, #12
   207c0:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
   207c2:	1dfb      	adds	r3, r7, #7
   207c4:	2200      	movs	r2, #0
   207c6:	701a      	strb	r2, [r3, #0]
	
	gstrHifCxt.u8Yield = 0;
   207c8:	4b1c      	ldr	r3, [pc, #112]	; (2083c <hif_handle_isr+0x80>)
   207ca:	2200      	movs	r2, #0
   207cc:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   207ce:	e024      	b.n	2081a <hif_handle_isr+0x5e>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
   207d0:	4b1a      	ldr	r3, [pc, #104]	; (2083c <hif_handle_isr+0x80>)
   207d2:	78db      	ldrb	r3, [r3, #3]
   207d4:	b2db      	uxtb	r3, r3
   207d6:	3b01      	subs	r3, #1
   207d8:	b2da      	uxtb	r2, r3
   207da:	4b18      	ldr	r3, [pc, #96]	; (2083c <hif_handle_isr+0x80>)
   207dc:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
   207de:	1dfc      	adds	r4, r7, #7
   207e0:	4b17      	ldr	r3, [pc, #92]	; (20840 <hif_handle_isr+0x84>)
   207e2:	4798      	blx	r3
   207e4:	0003      	movs	r3, r0
   207e6:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   207e8:	1dfb      	adds	r3, r7, #7
   207ea:	781b      	ldrb	r3, [r3, #0]
   207ec:	b25b      	sxtb	r3, r3
   207ee:	2b00      	cmp	r3, #0
   207f0:	d100      	bne.n	207f4 <hif_handle_isr+0x38>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
   207f2:	e012      	b.n	2081a <hif_handle_isr+0x5e>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
   207f4:	4a13      	ldr	r2, [pc, #76]	; (20844 <hif_handle_isr+0x88>)
   207f6:	4914      	ldr	r1, [pc, #80]	; (20848 <hif_handle_isr+0x8c>)
   207f8:	4b14      	ldr	r3, [pc, #80]	; (2084c <hif_handle_isr+0x90>)
   207fa:	0018      	movs	r0, r3
   207fc:	4b14      	ldr	r3, [pc, #80]	; (20850 <hif_handle_isr+0x94>)
   207fe:	4798      	blx	r3
   20800:	1dfb      	adds	r3, r7, #7
   20802:	2200      	movs	r2, #0
   20804:	569a      	ldrsb	r2, [r3, r2]
   20806:	4b13      	ldr	r3, [pc, #76]	; (20854 <hif_handle_isr+0x98>)
   20808:	0011      	movs	r1, r2
   2080a:	0018      	movs	r0, r3
   2080c:	4b10      	ldr	r3, [pc, #64]	; (20850 <hif_handle_isr+0x94>)
   2080e:	4798      	blx	r3
   20810:	4b11      	ldr	r3, [pc, #68]	; (20858 <hif_handle_isr+0x9c>)
   20812:	0018      	movs	r0, r3
   20814:	4b0e      	ldr	r3, [pc, #56]	; (20850 <hif_handle_isr+0x94>)
   20816:	4798      	blx	r3
			ret = hif_isr();
   20818:	e7e1      	b.n	207de <hif_handle_isr+0x22>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   2081a:	4b08      	ldr	r3, [pc, #32]	; (2083c <hif_handle_isr+0x80>)
   2081c:	78db      	ldrb	r3, [r3, #3]
   2081e:	b2db      	uxtb	r3, r3
   20820:	2b00      	cmp	r3, #0
   20822:	d004      	beq.n	2082e <hif_handle_isr+0x72>
   20824:	4b05      	ldr	r3, [pc, #20]	; (2083c <hif_handle_isr+0x80>)
   20826:	791b      	ldrb	r3, [r3, #4]
   20828:	b2db      	uxtb	r3, r3
   2082a:	2b00      	cmp	r3, #0
   2082c:	d0d0      	beq.n	207d0 <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
   2082e:	1dfb      	adds	r3, r7, #7
   20830:	781b      	ldrb	r3, [r3, #0]
   20832:	b25b      	sxtb	r3, r3
}
   20834:	0018      	movs	r0, r3
   20836:	46bd      	mov	sp, r7
   20838:	b003      	add	sp, #12
   2083a:	bd90      	pop	{r4, r7, pc}
   2083c:	20005a98 	.word	0x20005a98
   20840:	000202e5 	.word	0x000202e5
   20844:	00000257 	.word	0x00000257
   20848:	00038148 	.word	0x00038148
   2084c:	00037e30 	.word	0x00037e30
   20850:	0001cf49 	.word	0x0001cf49
   20854:	0003802c 	.word	0x0003802c
   20858:	00037e2c 	.word	0x00037e2c

0002085c <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
   2085c:	b590      	push	{r4, r7, lr}
   2085e:	b087      	sub	sp, #28
   20860:	af00      	add	r7, sp, #0
   20862:	60f8      	str	r0, [r7, #12]
   20864:	60b9      	str	r1, [r7, #8]
   20866:	0019      	movs	r1, r3
   20868:	1dbb      	adds	r3, r7, #6
   2086a:	801a      	strh	r2, [r3, #0]
   2086c:	1d7b      	adds	r3, r7, #5
   2086e:	1c0a      	adds	r2, r1, #0
   20870:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   20872:	2317      	movs	r3, #23
   20874:	18fb      	adds	r3, r7, r3
   20876:	2200      	movs	r2, #0
   20878:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
   2087a:	68fb      	ldr	r3, [r7, #12]
   2087c:	2b00      	cmp	r3, #0
   2087e:	d006      	beq.n	2088e <hif_receive+0x32>
   20880:	68bb      	ldr	r3, [r7, #8]
   20882:	2b00      	cmp	r3, #0
   20884:	d003      	beq.n	2088e <hif_receive+0x32>
   20886:	1dbb      	adds	r3, r7, #6
   20888:	881b      	ldrh	r3, [r3, #0]
   2088a:	2b00      	cmp	r3, #0
   2088c:	d11e      	bne.n	208cc <hif_receive+0x70>
	{
		if(isDone)
   2088e:	1d7b      	adds	r3, r7, #5
   20890:	781b      	ldrb	r3, [r3, #0]
   20892:	2b00      	cmp	r3, #0
   20894:	d006      	beq.n	208a4 <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
   20896:	2317      	movs	r3, #23
   20898:	18fc      	adds	r4, r7, r3
   2089a:	4b45      	ldr	r3, [pc, #276]	; (209b0 <hif_receive+0x154>)
   2089c:	4798      	blx	r3
   2089e:	0003      	movs	r3, r0
   208a0:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
   208a2:	e07c      	b.n	2099e <hif_receive+0x142>
			ret = M2M_ERR_FAIL;
   208a4:	2317      	movs	r3, #23
   208a6:	18fb      	adds	r3, r7, r3
   208a8:	22f4      	movs	r2, #244	; 0xf4
   208aa:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
   208ac:	239e      	movs	r3, #158	; 0x9e
   208ae:	009a      	lsls	r2, r3, #2
   208b0:	4940      	ldr	r1, [pc, #256]	; (209b4 <hif_receive+0x158>)
   208b2:	4b41      	ldr	r3, [pc, #260]	; (209b8 <hif_receive+0x15c>)
   208b4:	0018      	movs	r0, r3
   208b6:	4b41      	ldr	r3, [pc, #260]	; (209bc <hif_receive+0x160>)
   208b8:	4798      	blx	r3
   208ba:	4b41      	ldr	r3, [pc, #260]	; (209c0 <hif_receive+0x164>)
   208bc:	0018      	movs	r0, r3
   208be:	4b3f      	ldr	r3, [pc, #252]	; (209bc <hif_receive+0x160>)
   208c0:	4798      	blx	r3
   208c2:	4b40      	ldr	r3, [pc, #256]	; (209c4 <hif_receive+0x168>)
   208c4:	0018      	movs	r0, r3
   208c6:	4b3d      	ldr	r3, [pc, #244]	; (209bc <hif_receive+0x160>)
   208c8:	4798      	blx	r3
		goto ERR1;
   208ca:	e068      	b.n	2099e <hif_receive+0x142>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
   208cc:	1dbb      	adds	r3, r7, #6
   208ce:	881a      	ldrh	r2, [r3, #0]
   208d0:	4b3d      	ldr	r3, [pc, #244]	; (209c8 <hif_receive+0x16c>)
   208d2:	68db      	ldr	r3, [r3, #12]
   208d4:	429a      	cmp	r2, r3
   208d6:	d917      	bls.n	20908 <hif_receive+0xac>
	{
		ret = M2M_ERR_FAIL;
   208d8:	2317      	movs	r3, #23
   208da:	18fb      	adds	r3, r7, r3
   208dc:	22f4      	movs	r2, #244	; 0xf4
   208de:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
   208e0:	23a0      	movs	r3, #160	; 0xa0
   208e2:	009a      	lsls	r2, r3, #2
   208e4:	4933      	ldr	r1, [pc, #204]	; (209b4 <hif_receive+0x158>)
   208e6:	4b34      	ldr	r3, [pc, #208]	; (209b8 <hif_receive+0x15c>)
   208e8:	0018      	movs	r0, r3
   208ea:	4b34      	ldr	r3, [pc, #208]	; (209bc <hif_receive+0x160>)
   208ec:	4798      	blx	r3
   208ee:	1dbb      	adds	r3, r7, #6
   208f0:	8819      	ldrh	r1, [r3, #0]
   208f2:	4b35      	ldr	r3, [pc, #212]	; (209c8 <hif_receive+0x16c>)
   208f4:	68da      	ldr	r2, [r3, #12]
   208f6:	4b35      	ldr	r3, [pc, #212]	; (209cc <hif_receive+0x170>)
   208f8:	0018      	movs	r0, r3
   208fa:	4b30      	ldr	r3, [pc, #192]	; (209bc <hif_receive+0x160>)
   208fc:	4798      	blx	r3
   208fe:	4b31      	ldr	r3, [pc, #196]	; (209c4 <hif_receive+0x168>)
   20900:	0018      	movs	r0, r3
   20902:	4b2e      	ldr	r3, [pc, #184]	; (209bc <hif_receive+0x160>)
   20904:	4798      	blx	r3
		goto ERR1;
   20906:	e04a      	b.n	2099e <hif_receive+0x142>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
   20908:	4b2f      	ldr	r3, [pc, #188]	; (209c8 <hif_receive+0x16c>)
   2090a:	689a      	ldr	r2, [r3, #8]
   2090c:	68fb      	ldr	r3, [r7, #12]
   2090e:	429a      	cmp	r2, r3
   20910:	d80a      	bhi.n	20928 <hif_receive+0xcc>
   20912:	1dbb      	adds	r3, r7, #6
   20914:	881a      	ldrh	r2, [r3, #0]
   20916:	68fb      	ldr	r3, [r7, #12]
   20918:	18d2      	adds	r2, r2, r3
   2091a:	4b2b      	ldr	r3, [pc, #172]	; (209c8 <hif_receive+0x16c>)
   2091c:	6899      	ldr	r1, [r3, #8]
   2091e:	4b2a      	ldr	r3, [pc, #168]	; (209c8 <hif_receive+0x16c>)
   20920:	68db      	ldr	r3, [r3, #12]
   20922:	18cb      	adds	r3, r1, r3
   20924:	429a      	cmp	r2, r3
   20926:	d912      	bls.n	2094e <hif_receive+0xf2>
	{
		ret = M2M_ERR_FAIL;
   20928:	2317      	movs	r3, #23
   2092a:	18fb      	adds	r3, r7, r3
   2092c:	22f4      	movs	r2, #244	; 0xf4
   2092e:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
   20930:	4a27      	ldr	r2, [pc, #156]	; (209d0 <hif_receive+0x174>)
   20932:	4920      	ldr	r1, [pc, #128]	; (209b4 <hif_receive+0x158>)
   20934:	4b20      	ldr	r3, [pc, #128]	; (209b8 <hif_receive+0x15c>)
   20936:	0018      	movs	r0, r3
   20938:	4b20      	ldr	r3, [pc, #128]	; (209bc <hif_receive+0x160>)
   2093a:	4798      	blx	r3
   2093c:	4b25      	ldr	r3, [pc, #148]	; (209d4 <hif_receive+0x178>)
   2093e:	0018      	movs	r0, r3
   20940:	4b1e      	ldr	r3, [pc, #120]	; (209bc <hif_receive+0x160>)
   20942:	4798      	blx	r3
   20944:	4b1f      	ldr	r3, [pc, #124]	; (209c4 <hif_receive+0x168>)
   20946:	0018      	movs	r0, r3
   20948:	4b1c      	ldr	r3, [pc, #112]	; (209bc <hif_receive+0x160>)
   2094a:	4798      	blx	r3
		goto ERR1;
   2094c:	e027      	b.n	2099e <hif_receive+0x142>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
   2094e:	1dbb      	adds	r3, r7, #6
   20950:	881a      	ldrh	r2, [r3, #0]
   20952:	2317      	movs	r3, #23
   20954:	18fc      	adds	r4, r7, r3
   20956:	68b9      	ldr	r1, [r7, #8]
   20958:	68fb      	ldr	r3, [r7, #12]
   2095a:	0018      	movs	r0, r3
   2095c:	4b1e      	ldr	r3, [pc, #120]	; (209d8 <hif_receive+0x17c>)
   2095e:	4798      	blx	r3
   20960:	0003      	movs	r3, r0
   20962:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   20964:	2317      	movs	r3, #23
   20966:	18fb      	adds	r3, r7, r3
   20968:	781b      	ldrb	r3, [r3, #0]
   2096a:	b25b      	sxtb	r3, r3
   2096c:	2b00      	cmp	r3, #0
   2096e:	d115      	bne.n	2099c <hif_receive+0x140>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
   20970:	4b15      	ldr	r3, [pc, #84]	; (209c8 <hif_receive+0x16c>)
   20972:	689a      	ldr	r2, [r3, #8]
   20974:	4b14      	ldr	r3, [pc, #80]	; (209c8 <hif_receive+0x16c>)
   20976:	68db      	ldr	r3, [r3, #12]
   20978:	18d2      	adds	r2, r2, r3
   2097a:	1dbb      	adds	r3, r7, #6
   2097c:	8819      	ldrh	r1, [r3, #0]
   2097e:	68fb      	ldr	r3, [r7, #12]
   20980:	18cb      	adds	r3, r1, r3
   20982:	429a      	cmp	r2, r3
   20984:	d003      	beq.n	2098e <hif_receive+0x132>
   20986:	1d7b      	adds	r3, r7, #5
   20988:	781b      	ldrb	r3, [r3, #0]
   2098a:	2b00      	cmp	r3, #0
   2098c:	d007      	beq.n	2099e <hif_receive+0x142>
	{
		/* set RX done */
		ret = hif_set_rx_done();
   2098e:	2317      	movs	r3, #23
   20990:	18fc      	adds	r4, r7, r3
   20992:	4b07      	ldr	r3, [pc, #28]	; (209b0 <hif_receive+0x154>)
   20994:	4798      	blx	r3
   20996:	0003      	movs	r3, r0
   20998:	7023      	strb	r3, [r4, #0]
   2099a:	e000      	b.n	2099e <hif_receive+0x142>
	if(ret != M2M_SUCCESS)goto ERR1;
   2099c:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   2099e:	2317      	movs	r3, #23
   209a0:	18fb      	adds	r3, r7, r3
   209a2:	781b      	ldrb	r3, [r3, #0]
   209a4:	b25b      	sxtb	r3, r3
}
   209a6:	0018      	movs	r0, r3
   209a8:	46bd      	mov	sp, r7
   209aa:	b007      	add	sp, #28
   209ac:	bd90      	pop	{r4, r7, pc}
   209ae:	46c0      	nop			; (mov r8, r8)
   209b0:	0001fd79 	.word	0x0001fd79
   209b4:	00038158 	.word	0x00038158
   209b8:	00037e30 	.word	0x00037e30
   209bc:	0001cf49 	.word	0x0001cf49
   209c0:	0003805c 	.word	0x0003805c
   209c4:	00037e2c 	.word	0x00037e2c
   209c8:	20005a98 	.word	0x20005a98
   209cc:	0003807c 	.word	0x0003807c
   209d0:	00000286 	.word	0x00000286
   209d4:	000380c4 	.word	0x000380c4
   209d8:	00021de5 	.word	0x00021de5

000209dc <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
   209dc:	b580      	push	{r7, lr}
   209de:	b084      	sub	sp, #16
   209e0:	af00      	add	r7, sp, #0
   209e2:	0002      	movs	r2, r0
   209e4:	6039      	str	r1, [r7, #0]
   209e6:	1dfb      	adds	r3, r7, #7
   209e8:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   209ea:	230f      	movs	r3, #15
   209ec:	18fb      	adds	r3, r7, r3
   209ee:	2200      	movs	r2, #0
   209f0:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
   209f2:	1dfb      	adds	r3, r7, #7
   209f4:	781b      	ldrb	r3, [r3, #0]
   209f6:	2b07      	cmp	r3, #7
   209f8:	d820      	bhi.n	20a3c <hif_register_cb+0x60>
   209fa:	009a      	lsls	r2, r3, #2
   209fc:	4b1e      	ldr	r3, [pc, #120]	; (20a78 <hif_register_cb+0x9c>)
   209fe:	18d3      	adds	r3, r2, r3
   20a00:	681b      	ldr	r3, [r3, #0]
   20a02:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
   20a04:	4b1d      	ldr	r3, [pc, #116]	; (20a7c <hif_register_cb+0xa0>)
   20a06:	683a      	ldr	r2, [r7, #0]
   20a08:	615a      	str	r2, [r3, #20]
			break;
   20a0a:	e02d      	b.n	20a68 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
   20a0c:	4b1b      	ldr	r3, [pc, #108]	; (20a7c <hif_register_cb+0xa0>)
   20a0e:	683a      	ldr	r2, [r7, #0]
   20a10:	611a      	str	r2, [r3, #16]
			break;
   20a12:	e029      	b.n	20a68 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
   20a14:	4b19      	ldr	r3, [pc, #100]	; (20a7c <hif_register_cb+0xa0>)
   20a16:	683a      	ldr	r2, [r7, #0]
   20a18:	619a      	str	r2, [r3, #24]
			break;
   20a1a:	e025      	b.n	20a68 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
   20a1c:	4b17      	ldr	r3, [pc, #92]	; (20a7c <hif_register_cb+0xa0>)
   20a1e:	683a      	ldr	r2, [r7, #0]
   20a20:	621a      	str	r2, [r3, #32]
			break;
   20a22:	e021      	b.n	20a68 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
   20a24:	4b15      	ldr	r3, [pc, #84]	; (20a7c <hif_register_cb+0xa0>)
   20a26:	683a      	ldr	r2, [r7, #0]
   20a28:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   20a2a:	e01d      	b.n	20a68 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
   20a2c:	4b13      	ldr	r3, [pc, #76]	; (20a7c <hif_register_cb+0xa0>)
   20a2e:	683a      	ldr	r2, [r7, #0]
   20a30:	61da      	str	r2, [r3, #28]
			break;
   20a32:	e019      	b.n	20a68 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
   20a34:	4b11      	ldr	r3, [pc, #68]	; (20a7c <hif_register_cb+0xa0>)
   20a36:	683a      	ldr	r2, [r7, #0]
   20a38:	629a      	str	r2, [r3, #40]	; 0x28
			break;
   20a3a:	e015      	b.n	20a68 <hif_register_cb+0x8c>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
   20a3c:	4a10      	ldr	r2, [pc, #64]	; (20a80 <hif_register_cb+0xa4>)
   20a3e:	4911      	ldr	r1, [pc, #68]	; (20a84 <hif_register_cb+0xa8>)
   20a40:	4b11      	ldr	r3, [pc, #68]	; (20a88 <hif_register_cb+0xac>)
   20a42:	0018      	movs	r0, r3
   20a44:	4b11      	ldr	r3, [pc, #68]	; (20a8c <hif_register_cb+0xb0>)
   20a46:	4798      	blx	r3
   20a48:	1dfb      	adds	r3, r7, #7
   20a4a:	781a      	ldrb	r2, [r3, #0]
   20a4c:	4b10      	ldr	r3, [pc, #64]	; (20a90 <hif_register_cb+0xb4>)
   20a4e:	0011      	movs	r1, r2
   20a50:	0018      	movs	r0, r3
   20a52:	4b0e      	ldr	r3, [pc, #56]	; (20a8c <hif_register_cb+0xb0>)
   20a54:	4798      	blx	r3
   20a56:	4b0f      	ldr	r3, [pc, #60]	; (20a94 <hif_register_cb+0xb8>)
   20a58:	0018      	movs	r0, r3
   20a5a:	4b0c      	ldr	r3, [pc, #48]	; (20a8c <hif_register_cb+0xb0>)
   20a5c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   20a5e:	230f      	movs	r3, #15
   20a60:	18fb      	adds	r3, r7, r3
   20a62:	22f4      	movs	r2, #244	; 0xf4
   20a64:	701a      	strb	r2, [r3, #0]
			break;
   20a66:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
   20a68:	230f      	movs	r3, #15
   20a6a:	18fb      	adds	r3, r7, r3
   20a6c:	781b      	ldrb	r3, [r3, #0]
   20a6e:	b25b      	sxtb	r3, r3
}
   20a70:	0018      	movs	r0, r3
   20a72:	46bd      	mov	sp, r7
   20a74:	b004      	add	sp, #16
   20a76:	bd80      	pop	{r7, pc}
   20a78:	00038114 	.word	0x00038114
   20a7c:	20005a98 	.word	0x20005a98
   20a80:	000002be 	.word	0x000002be
   20a84:	00038164 	.word	0x00038164
   20a88:	00037e30 	.word	0x00037e30
   20a8c:	0001cf49 	.word	0x0001cf49
   20a90:	00038108 	.word	0x00038108
   20a94:	00037e2c 	.word	0x00037e2c

00020a98 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   20a98:	b590      	push	{r4, r7, lr}
   20a9a:	b0af      	sub	sp, #188	; 0xbc
   20a9c:	af02      	add	r7, sp, #8
   20a9e:	603a      	str	r2, [r7, #0]
   20aa0:	1dfb      	adds	r3, r7, #7
   20aa2:	1c02      	adds	r2, r0, #0
   20aa4:	701a      	strb	r2, [r3, #0]
   20aa6:	1d3b      	adds	r3, r7, #4
   20aa8:	1c0a      	adds	r2, r1, #0
   20aaa:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
   20aac:	1dfb      	adds	r3, r7, #7
   20aae:	781b      	ldrb	r3, [r3, #0]
   20ab0:	2b2c      	cmp	r3, #44	; 0x2c
   20ab2:	d116      	bne.n	20ae2 <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
   20ab4:	23a4      	movs	r3, #164	; 0xa4
   20ab6:	18f9      	adds	r1, r7, r3
   20ab8:	6838      	ldr	r0, [r7, #0]
   20aba:	2300      	movs	r3, #0
   20abc:	2204      	movs	r2, #4
   20abe:	4cca      	ldr	r4, [pc, #808]	; (20de8 <m2m_wifi_cb+0x350>)
   20ac0:	47a0      	blx	r4
   20ac2:	1e03      	subs	r3, r0, #0
   20ac4:	d000      	beq.n	20ac8 <m2m_wifi_cb+0x30>
   20ac6:	e1b4      	b.n	20e32 <m2m_wifi_cb+0x39a>
		{
			if (gpfAppWifiCb)
   20ac8:	4bc8      	ldr	r3, [pc, #800]	; (20dec <m2m_wifi_cb+0x354>)
   20aca:	681b      	ldr	r3, [r3, #0]
   20acc:	2b00      	cmp	r3, #0
   20ace:	d100      	bne.n	20ad2 <m2m_wifi_cb+0x3a>
   20ad0:	e1af      	b.n	20e32 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
   20ad2:	4bc6      	ldr	r3, [pc, #792]	; (20dec <m2m_wifi_cb+0x354>)
   20ad4:	681b      	ldr	r3, [r3, #0]
   20ad6:	22a4      	movs	r2, #164	; 0xa4
   20ad8:	18ba      	adds	r2, r7, r2
   20ada:	0011      	movs	r1, r2
   20adc:	202c      	movs	r0, #44	; 0x2c
   20ade:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
   20ae0:	e1a7      	b.n	20e32 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
   20ae2:	1dfb      	adds	r3, r7, #7
   20ae4:	781b      	ldrb	r3, [r3, #0]
   20ae6:	2b1b      	cmp	r3, #27
   20ae8:	d116      	bne.n	20b18 <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
   20aea:	239c      	movs	r3, #156	; 0x9c
   20aec:	18f9      	adds	r1, r7, r3
   20aee:	6838      	ldr	r0, [r7, #0]
   20af0:	2300      	movs	r3, #0
   20af2:	2208      	movs	r2, #8
   20af4:	4cbc      	ldr	r4, [pc, #752]	; (20de8 <m2m_wifi_cb+0x350>)
   20af6:	47a0      	blx	r4
   20af8:	1e03      	subs	r3, r0, #0
   20afa:	d000      	beq.n	20afe <m2m_wifi_cb+0x66>
   20afc:	e199      	b.n	20e32 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   20afe:	4bbb      	ldr	r3, [pc, #748]	; (20dec <m2m_wifi_cb+0x354>)
   20b00:	681b      	ldr	r3, [r3, #0]
   20b02:	2b00      	cmp	r3, #0
   20b04:	d100      	bne.n	20b08 <m2m_wifi_cb+0x70>
   20b06:	e194      	b.n	20e32 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
   20b08:	4bb8      	ldr	r3, [pc, #736]	; (20dec <m2m_wifi_cb+0x354>)
   20b0a:	681b      	ldr	r3, [r3, #0]
   20b0c:	229c      	movs	r2, #156	; 0x9c
   20b0e:	18ba      	adds	r2, r7, r2
   20b10:	0011      	movs	r1, r2
   20b12:	201b      	movs	r0, #27
   20b14:	4798      	blx	r3
}
   20b16:	e18c      	b.n	20e32 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
   20b18:	1dfb      	adds	r3, r7, #7
   20b1a:	781b      	ldrb	r3, [r3, #0]
   20b1c:	2b06      	cmp	r3, #6
   20b1e:	d116      	bne.n	20b4e <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
   20b20:	230c      	movs	r3, #12
   20b22:	18f9      	adds	r1, r7, r3
   20b24:	6838      	ldr	r0, [r7, #0]
   20b26:	2301      	movs	r3, #1
   20b28:	2230      	movs	r2, #48	; 0x30
   20b2a:	4caf      	ldr	r4, [pc, #700]	; (20de8 <m2m_wifi_cb+0x350>)
   20b2c:	47a0      	blx	r4
   20b2e:	1e03      	subs	r3, r0, #0
   20b30:	d000      	beq.n	20b34 <m2m_wifi_cb+0x9c>
   20b32:	e17e      	b.n	20e32 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   20b34:	4bad      	ldr	r3, [pc, #692]	; (20dec <m2m_wifi_cb+0x354>)
   20b36:	681b      	ldr	r3, [r3, #0]
   20b38:	2b00      	cmp	r3, #0
   20b3a:	d100      	bne.n	20b3e <m2m_wifi_cb+0xa6>
   20b3c:	e179      	b.n	20e32 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
   20b3e:	4bab      	ldr	r3, [pc, #684]	; (20dec <m2m_wifi_cb+0x354>)
   20b40:	681b      	ldr	r3, [r3, #0]
   20b42:	220c      	movs	r2, #12
   20b44:	18ba      	adds	r2, r7, r2
   20b46:	0011      	movs	r1, r2
   20b48:	2006      	movs	r0, #6
   20b4a:	4798      	blx	r3
}
   20b4c:	e171      	b.n	20e32 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
   20b4e:	1dfb      	adds	r3, r7, #7
   20b50:	781b      	ldrb	r3, [r3, #0]
   20b52:	2b0e      	cmp	r3, #14
   20b54:	d100      	bne.n	20b58 <m2m_wifi_cb+0xc0>
   20b56:	e16c      	b.n	20e32 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
   20b58:	1dfb      	adds	r3, r7, #7
   20b5a:	781b      	ldrb	r3, [r3, #0]
   20b5c:	2b32      	cmp	r3, #50	; 0x32
   20b5e:	d116      	bne.n	20b8e <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
   20b60:	2384      	movs	r3, #132	; 0x84
   20b62:	18f9      	adds	r1, r7, r3
   20b64:	6838      	ldr	r0, [r7, #0]
   20b66:	2300      	movs	r3, #0
   20b68:	2218      	movs	r2, #24
   20b6a:	4c9f      	ldr	r4, [pc, #636]	; (20de8 <m2m_wifi_cb+0x350>)
   20b6c:	47a0      	blx	r4
   20b6e:	1e03      	subs	r3, r0, #0
   20b70:	d000      	beq.n	20b74 <m2m_wifi_cb+0xdc>
   20b72:	e15e      	b.n	20e32 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   20b74:	4b9d      	ldr	r3, [pc, #628]	; (20dec <m2m_wifi_cb+0x354>)
   20b76:	681b      	ldr	r3, [r3, #0]
   20b78:	2b00      	cmp	r3, #0
   20b7a:	d100      	bne.n	20b7e <m2m_wifi_cb+0xe6>
   20b7c:	e159      	b.n	20e32 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
   20b7e:	4b9b      	ldr	r3, [pc, #620]	; (20dec <m2m_wifi_cb+0x354>)
   20b80:	681b      	ldr	r3, [r3, #0]
   20b82:	2284      	movs	r2, #132	; 0x84
   20b84:	18ba      	adds	r2, r7, r2
   20b86:	0011      	movs	r1, r2
   20b88:	2032      	movs	r0, #50	; 0x32
   20b8a:	4798      	blx	r3
}
   20b8c:	e151      	b.n	20e32 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
   20b8e:	1dfb      	adds	r3, r7, #7
   20b90:	781b      	ldrb	r3, [r3, #0]
   20b92:	2b2f      	cmp	r3, #47	; 0x2f
   20b94:	d11d      	bne.n	20bd2 <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
   20b96:	230c      	movs	r3, #12
   20b98:	18fb      	adds	r3, r7, r3
   20b9a:	2264      	movs	r2, #100	; 0x64
   20b9c:	2100      	movs	r1, #0
   20b9e:	0018      	movs	r0, r3
   20ba0:	4b93      	ldr	r3, [pc, #588]	; (20df0 <m2m_wifi_cb+0x358>)
   20ba2:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
   20ba4:	230c      	movs	r3, #12
   20ba6:	18f9      	adds	r1, r7, r3
   20ba8:	6838      	ldr	r0, [r7, #0]
   20baa:	2300      	movs	r3, #0
   20bac:	2264      	movs	r2, #100	; 0x64
   20bae:	4c8e      	ldr	r4, [pc, #568]	; (20de8 <m2m_wifi_cb+0x350>)
   20bb0:	47a0      	blx	r4
   20bb2:	1e03      	subs	r3, r0, #0
   20bb4:	d000      	beq.n	20bb8 <m2m_wifi_cb+0x120>
   20bb6:	e13c      	b.n	20e32 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   20bb8:	4b8c      	ldr	r3, [pc, #560]	; (20dec <m2m_wifi_cb+0x354>)
   20bba:	681b      	ldr	r3, [r3, #0]
   20bbc:	2b00      	cmp	r3, #0
   20bbe:	d100      	bne.n	20bc2 <m2m_wifi_cb+0x12a>
   20bc0:	e137      	b.n	20e32 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
   20bc2:	4b8a      	ldr	r3, [pc, #552]	; (20dec <m2m_wifi_cb+0x354>)
   20bc4:	681b      	ldr	r3, [r3, #0]
   20bc6:	220c      	movs	r2, #12
   20bc8:	18ba      	adds	r2, r7, r2
   20bca:	0011      	movs	r1, r2
   20bcc:	202f      	movs	r0, #47	; 0x2f
   20bce:	4798      	blx	r3
}
   20bd0:	e12f      	b.n	20e32 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
   20bd2:	1dfb      	adds	r3, r7, #7
   20bd4:	781b      	ldrb	r3, [r3, #0]
   20bd6:	2b34      	cmp	r3, #52	; 0x34
   20bd8:	d137      	bne.n	20c4a <m2m_wifi_cb+0x1b2>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
   20bda:	2380      	movs	r3, #128	; 0x80
   20bdc:	18f9      	adds	r1, r7, r3
   20bde:	6838      	ldr	r0, [r7, #0]
   20be0:	2300      	movs	r3, #0
   20be2:	2204      	movs	r2, #4
   20be4:	4c80      	ldr	r4, [pc, #512]	; (20de8 <m2m_wifi_cb+0x350>)
   20be6:	47a0      	blx	r4
   20be8:	1e03      	subs	r3, r0, #0
   20bea:	d000      	beq.n	20bee <m2m_wifi_cb+0x156>
   20bec:	e121      	b.n	20e32 <m2m_wifi_cb+0x39a>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
   20bee:	4b81      	ldr	r3, [pc, #516]	; (20df4 <m2m_wifi_cb+0x35c>)
   20bf0:	0018      	movs	r0, r3
   20bf2:	4b81      	ldr	r3, [pc, #516]	; (20df8 <m2m_wifi_cb+0x360>)
   20bf4:	4798      	blx	r3
   20bf6:	2380      	movs	r3, #128	; 0x80
   20bf8:	18fb      	adds	r3, r7, r3
   20bfa:	681b      	ldr	r3, [r3, #0]
   20bfc:	0e1b      	lsrs	r3, r3, #24
   20bfe:	b2db      	uxtb	r3, r3
   20c00:	0019      	movs	r1, r3
   20c02:	2380      	movs	r3, #128	; 0x80
   20c04:	18fb      	adds	r3, r7, r3
   20c06:	681b      	ldr	r3, [r3, #0]
   20c08:	0c1b      	lsrs	r3, r3, #16
   20c0a:	b2db      	uxtb	r3, r3
   20c0c:	001a      	movs	r2, r3
   20c0e:	2380      	movs	r3, #128	; 0x80
   20c10:	18fb      	adds	r3, r7, r3
   20c12:	681b      	ldr	r3, [r3, #0]
   20c14:	0a1b      	lsrs	r3, r3, #8
   20c16:	b2db      	uxtb	r3, r3
   20c18:	001c      	movs	r4, r3
   20c1a:	2380      	movs	r3, #128	; 0x80
   20c1c:	18fb      	adds	r3, r7, r3
   20c1e:	681b      	ldr	r3, [r3, #0]
   20c20:	b2db      	uxtb	r3, r3
   20c22:	4876      	ldr	r0, [pc, #472]	; (20dfc <m2m_wifi_cb+0x364>)
   20c24:	9300      	str	r3, [sp, #0]
   20c26:	0023      	movs	r3, r4
   20c28:	4c73      	ldr	r4, [pc, #460]	; (20df8 <m2m_wifi_cb+0x360>)
   20c2a:	47a0      	blx	r4
   20c2c:	4b74      	ldr	r3, [pc, #464]	; (20e00 <m2m_wifi_cb+0x368>)
   20c2e:	0018      	movs	r0, r3
   20c30:	4b71      	ldr	r3, [pc, #452]	; (20df8 <m2m_wifi_cb+0x360>)
   20c32:	4798      	blx	r3
			if (gpfAppWifiCb)
   20c34:	4b6d      	ldr	r3, [pc, #436]	; (20dec <m2m_wifi_cb+0x354>)
   20c36:	681b      	ldr	r3, [r3, #0]
   20c38:	2b00      	cmp	r3, #0
   20c3a:	d100      	bne.n	20c3e <m2m_wifi_cb+0x1a6>
   20c3c:	e0f9      	b.n	20e32 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
   20c3e:	4b6b      	ldr	r3, [pc, #428]	; (20dec <m2m_wifi_cb+0x354>)
   20c40:	681b      	ldr	r3, [r3, #0]
   20c42:	2100      	movs	r1, #0
   20c44:	2034      	movs	r0, #52	; 0x34
   20c46:	4798      	blx	r3
}
   20c48:	e0f3      	b.n	20e32 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
   20c4a:	1dfb      	adds	r3, r7, #7
   20c4c:	781b      	ldrb	r3, [r3, #0]
   20c4e:	2b11      	cmp	r3, #17
   20c50:	d11e      	bne.n	20c90 <m2m_wifi_cb+0x1f8>
		gu8scanInProgress = 0;
   20c52:	4b6c      	ldr	r3, [pc, #432]	; (20e04 <m2m_wifi_cb+0x36c>)
   20c54:	2200      	movs	r2, #0
   20c56:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
   20c58:	237c      	movs	r3, #124	; 0x7c
   20c5a:	18f9      	adds	r1, r7, r3
   20c5c:	6838      	ldr	r0, [r7, #0]
   20c5e:	2300      	movs	r3, #0
   20c60:	2204      	movs	r2, #4
   20c62:	4c61      	ldr	r4, [pc, #388]	; (20de8 <m2m_wifi_cb+0x350>)
   20c64:	47a0      	blx	r4
   20c66:	1e03      	subs	r3, r0, #0
   20c68:	d000      	beq.n	20c6c <m2m_wifi_cb+0x1d4>
   20c6a:	e0e2      	b.n	20e32 <m2m_wifi_cb+0x39a>
			gu8ChNum = strState.u8NumofCh;
   20c6c:	237c      	movs	r3, #124	; 0x7c
   20c6e:	18fb      	adds	r3, r7, r3
   20c70:	781a      	ldrb	r2, [r3, #0]
   20c72:	4b65      	ldr	r3, [pc, #404]	; (20e08 <m2m_wifi_cb+0x370>)
   20c74:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
   20c76:	4b5d      	ldr	r3, [pc, #372]	; (20dec <m2m_wifi_cb+0x354>)
   20c78:	681b      	ldr	r3, [r3, #0]
   20c7a:	2b00      	cmp	r3, #0
   20c7c:	d100      	bne.n	20c80 <m2m_wifi_cb+0x1e8>
   20c7e:	e0d8      	b.n	20e32 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
   20c80:	4b5a      	ldr	r3, [pc, #360]	; (20dec <m2m_wifi_cb+0x354>)
   20c82:	681b      	ldr	r3, [r3, #0]
   20c84:	227c      	movs	r2, #124	; 0x7c
   20c86:	18ba      	adds	r2, r7, r2
   20c88:	0011      	movs	r1, r2
   20c8a:	2011      	movs	r0, #17
   20c8c:	4798      	blx	r3
}
   20c8e:	e0d0      	b.n	20e32 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
   20c90:	1dfb      	adds	r3, r7, #7
   20c92:	781b      	ldrb	r3, [r3, #0]
   20c94:	2b13      	cmp	r3, #19
   20c96:	d116      	bne.n	20cc6 <m2m_wifi_cb+0x22e>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
   20c98:	230c      	movs	r3, #12
   20c9a:	18f9      	adds	r1, r7, r3
   20c9c:	6838      	ldr	r0, [r7, #0]
   20c9e:	2300      	movs	r3, #0
   20ca0:	222c      	movs	r2, #44	; 0x2c
   20ca2:	4c51      	ldr	r4, [pc, #324]	; (20de8 <m2m_wifi_cb+0x350>)
   20ca4:	47a0      	blx	r4
   20ca6:	1e03      	subs	r3, r0, #0
   20ca8:	d000      	beq.n	20cac <m2m_wifi_cb+0x214>
   20caa:	e0c2      	b.n	20e32 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   20cac:	4b4f      	ldr	r3, [pc, #316]	; (20dec <m2m_wifi_cb+0x354>)
   20cae:	681b      	ldr	r3, [r3, #0]
   20cb0:	2b00      	cmp	r3, #0
   20cb2:	d100      	bne.n	20cb6 <m2m_wifi_cb+0x21e>
   20cb4:	e0bd      	b.n	20e32 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
   20cb6:	4b4d      	ldr	r3, [pc, #308]	; (20dec <m2m_wifi_cb+0x354>)
   20cb8:	681b      	ldr	r3, [r3, #0]
   20cba:	220c      	movs	r2, #12
   20cbc:	18ba      	adds	r2, r7, r2
   20cbe:	0011      	movs	r1, r2
   20cc0:	2013      	movs	r0, #19
   20cc2:	4798      	blx	r3
}
   20cc4:	e0b5      	b.n	20e32 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
   20cc6:	1dfb      	adds	r3, r7, #7
   20cc8:	781b      	ldrb	r3, [r3, #0]
   20cca:	2b04      	cmp	r3, #4
   20ccc:	d116      	bne.n	20cfc <m2m_wifi_cb+0x264>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   20cce:	23a8      	movs	r3, #168	; 0xa8
   20cd0:	18f9      	adds	r1, r7, r3
   20cd2:	6838      	ldr	r0, [r7, #0]
   20cd4:	2300      	movs	r3, #0
   20cd6:	2204      	movs	r2, #4
   20cd8:	4c43      	ldr	r4, [pc, #268]	; (20de8 <m2m_wifi_cb+0x350>)
   20cda:	47a0      	blx	r4
   20cdc:	1e03      	subs	r3, r0, #0
   20cde:	d000      	beq.n	20ce2 <m2m_wifi_cb+0x24a>
   20ce0:	e0a7      	b.n	20e32 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   20ce2:	4b42      	ldr	r3, [pc, #264]	; (20dec <m2m_wifi_cb+0x354>)
   20ce4:	681b      	ldr	r3, [r3, #0]
   20ce6:	2b00      	cmp	r3, #0
   20ce8:	d100      	bne.n	20cec <m2m_wifi_cb+0x254>
   20cea:	e0a2      	b.n	20e32 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
   20cec:	4b3f      	ldr	r3, [pc, #252]	; (20dec <m2m_wifi_cb+0x354>)
   20cee:	681b      	ldr	r3, [r3, #0]
   20cf0:	22a8      	movs	r2, #168	; 0xa8
   20cf2:	18ba      	adds	r2, r7, r2
   20cf4:	0011      	movs	r1, r2
   20cf6:	2004      	movs	r0, #4
   20cf8:	4798      	blx	r3
}
   20cfa:	e09a      	b.n	20e32 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
   20cfc:	1dfb      	adds	r3, r7, #7
   20cfe:	781b      	ldrb	r3, [r3, #0]
   20d00:	2b65      	cmp	r3, #101	; 0x65
   20d02:	d116      	bne.n	20d32 <m2m_wifi_cb+0x29a>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   20d04:	23a8      	movs	r3, #168	; 0xa8
   20d06:	18f9      	adds	r1, r7, r3
   20d08:	6838      	ldr	r0, [r7, #0]
   20d0a:	2300      	movs	r3, #0
   20d0c:	2204      	movs	r2, #4
   20d0e:	4c36      	ldr	r4, [pc, #216]	; (20de8 <m2m_wifi_cb+0x350>)
   20d10:	47a0      	blx	r4
   20d12:	1e03      	subs	r3, r0, #0
   20d14:	d000      	beq.n	20d18 <m2m_wifi_cb+0x280>
   20d16:	e08c      	b.n	20e32 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   20d18:	4b34      	ldr	r3, [pc, #208]	; (20dec <m2m_wifi_cb+0x354>)
   20d1a:	681b      	ldr	r3, [r3, #0]
   20d1c:	2b00      	cmp	r3, #0
   20d1e:	d100      	bne.n	20d22 <m2m_wifi_cb+0x28a>
   20d20:	e087      	b.n	20e32 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
   20d22:	4b32      	ldr	r3, [pc, #200]	; (20dec <m2m_wifi_cb+0x354>)
   20d24:	681b      	ldr	r3, [r3, #0]
   20d26:	22a8      	movs	r2, #168	; 0xa8
   20d28:	18ba      	adds	r2, r7, r2
   20d2a:	0011      	movs	r1, r2
   20d2c:	2065      	movs	r0, #101	; 0x65
   20d2e:	4798      	blx	r3
}
   20d30:	e07f      	b.n	20e32 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
   20d32:	1dfb      	adds	r3, r7, #7
   20d34:	781b      	ldrb	r3, [r3, #0]
   20d36:	2b09      	cmp	r3, #9
   20d38:	d116      	bne.n	20d68 <m2m_wifi_cb+0x2d0>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
   20d3a:	230c      	movs	r3, #12
   20d3c:	18f9      	adds	r1, r7, r3
   20d3e:	6838      	ldr	r0, [r7, #0]
   20d40:	2301      	movs	r3, #1
   20d42:	2264      	movs	r2, #100	; 0x64
   20d44:	4c28      	ldr	r4, [pc, #160]	; (20de8 <m2m_wifi_cb+0x350>)
   20d46:	47a0      	blx	r4
   20d48:	1e03      	subs	r3, r0, #0
   20d4a:	d000      	beq.n	20d4e <m2m_wifi_cb+0x2b6>
   20d4c:	e071      	b.n	20e32 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   20d4e:	4b27      	ldr	r3, [pc, #156]	; (20dec <m2m_wifi_cb+0x354>)
   20d50:	681b      	ldr	r3, [r3, #0]
   20d52:	2b00      	cmp	r3, #0
   20d54:	d100      	bne.n	20d58 <m2m_wifi_cb+0x2c0>
   20d56:	e06c      	b.n	20e32 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
   20d58:	4b24      	ldr	r3, [pc, #144]	; (20dec <m2m_wifi_cb+0x354>)
   20d5a:	681b      	ldr	r3, [r3, #0]
   20d5c:	220c      	movs	r2, #12
   20d5e:	18ba      	adds	r2, r7, r2
   20d60:	0011      	movs	r1, r2
   20d62:	2009      	movs	r0, #9
   20d64:	4798      	blx	r3
}
   20d66:	e064      	b.n	20e32 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
   20d68:	1dfb      	adds	r3, r7, #7
   20d6a:	781b      	ldrb	r3, [r3, #0]
   20d6c:	2b2a      	cmp	r3, #42	; 0x2a
   20d6e:	d114      	bne.n	20d9a <m2m_wifi_cb+0x302>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
   20d70:	2378      	movs	r3, #120	; 0x78
   20d72:	18f9      	adds	r1, r7, r3
   20d74:	6838      	ldr	r0, [r7, #0]
   20d76:	2301      	movs	r3, #1
   20d78:	2204      	movs	r2, #4
   20d7a:	4c1b      	ldr	r4, [pc, #108]	; (20de8 <m2m_wifi_cb+0x350>)
   20d7c:	47a0      	blx	r4
   20d7e:	1e03      	subs	r3, r0, #0
   20d80:	d157      	bne.n	20e32 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   20d82:	4b1a      	ldr	r3, [pc, #104]	; (20dec <m2m_wifi_cb+0x354>)
   20d84:	681b      	ldr	r3, [r3, #0]
   20d86:	2b00      	cmp	r3, #0
   20d88:	d053      	beq.n	20e32 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
   20d8a:	4b18      	ldr	r3, [pc, #96]	; (20dec <m2m_wifi_cb+0x354>)
   20d8c:	681b      	ldr	r3, [r3, #0]
   20d8e:	2278      	movs	r2, #120	; 0x78
   20d90:	18ba      	adds	r2, r7, r2
   20d92:	0011      	movs	r1, r2
   20d94:	202a      	movs	r0, #42	; 0x2a
   20d96:	4798      	blx	r3
}
   20d98:	e04b      	b.n	20e32 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
   20d9a:	1dfb      	adds	r3, r7, #7
   20d9c:	781b      	ldrb	r3, [r3, #0]
   20d9e:	2b20      	cmp	r3, #32
   20da0:	d134      	bne.n	20e0c <m2m_wifi_cb+0x374>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
   20da2:	2370      	movs	r3, #112	; 0x70
   20da4:	18f9      	adds	r1, r7, r3
   20da6:	6838      	ldr	r0, [r7, #0]
   20da8:	2300      	movs	r3, #0
   20daa:	2208      	movs	r2, #8
   20dac:	4c0e      	ldr	r4, [pc, #56]	; (20de8 <m2m_wifi_cb+0x350>)
   20dae:	47a0      	blx	r4
   20db0:	1e03      	subs	r3, r0, #0
   20db2:	d13e      	bne.n	20e32 <m2m_wifi_cb+0x39a>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
   20db4:	683b      	ldr	r3, [r7, #0]
   20db6:	3308      	adds	r3, #8
   20db8:	0018      	movs	r0, r3
   20dba:	2370      	movs	r3, #112	; 0x70
   20dbc:	18fb      	adds	r3, r7, r3
   20dbe:	6819      	ldr	r1, [r3, #0]
   20dc0:	2370      	movs	r3, #112	; 0x70
   20dc2:	18fb      	adds	r3, r7, r3
   20dc4:	889a      	ldrh	r2, [r3, #4]
   20dc6:	2301      	movs	r3, #1
   20dc8:	4c07      	ldr	r4, [pc, #28]	; (20de8 <m2m_wifi_cb+0x350>)
   20dca:	47a0      	blx	r4
   20dcc:	1e03      	subs	r3, r0, #0
   20dce:	d130      	bne.n	20e32 <m2m_wifi_cb+0x39a>
				if(gpfAppWifiCb)
   20dd0:	4b06      	ldr	r3, [pc, #24]	; (20dec <m2m_wifi_cb+0x354>)
   20dd2:	681b      	ldr	r3, [r3, #0]
   20dd4:	2b00      	cmp	r3, #0
   20dd6:	d02c      	beq.n	20e32 <m2m_wifi_cb+0x39a>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
   20dd8:	4b04      	ldr	r3, [pc, #16]	; (20dec <m2m_wifi_cb+0x354>)
   20dda:	681b      	ldr	r3, [r3, #0]
   20ddc:	2270      	movs	r2, #112	; 0x70
   20dde:	18ba      	adds	r2, r7, r2
   20de0:	0011      	movs	r1, r2
   20de2:	2020      	movs	r0, #32
   20de4:	4798      	blx	r3
}
   20de6:	e024      	b.n	20e32 <m2m_wifi_cb+0x39a>
   20de8:	0002085d 	.word	0x0002085d
   20dec:	20004274 	.word	0x20004274
   20df0:	0001fce1 	.word	0x0001fce1
   20df4:	00038174 	.word	0x00038174
   20df8:	0001cf49 	.word	0x0001cf49
   20dfc:	00038180 	.word	0x00038180
   20e00:	000381a0 	.word	0x000381a0
   20e04:	20004271 	.word	0x20004271
   20e08:	20004270 	.word	0x20004270
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
   20e0c:	2324      	movs	r3, #36	; 0x24
   20e0e:	33ff      	adds	r3, #255	; 0xff
   20e10:	001a      	movs	r2, r3
   20e12:	490a      	ldr	r1, [pc, #40]	; (20e3c <m2m_wifi_cb+0x3a4>)
   20e14:	4b0a      	ldr	r3, [pc, #40]	; (20e40 <m2m_wifi_cb+0x3a8>)
   20e16:	0018      	movs	r0, r3
   20e18:	4b0a      	ldr	r3, [pc, #40]	; (20e44 <m2m_wifi_cb+0x3ac>)
   20e1a:	4798      	blx	r3
   20e1c:	1dfb      	adds	r3, r7, #7
   20e1e:	781a      	ldrb	r2, [r3, #0]
   20e20:	4b09      	ldr	r3, [pc, #36]	; (20e48 <m2m_wifi_cb+0x3b0>)
   20e22:	0011      	movs	r1, r2
   20e24:	0018      	movs	r0, r3
   20e26:	4b07      	ldr	r3, [pc, #28]	; (20e44 <m2m_wifi_cb+0x3ac>)
   20e28:	4798      	blx	r3
   20e2a:	4b08      	ldr	r3, [pc, #32]	; (20e4c <m2m_wifi_cb+0x3b4>)
   20e2c:	0018      	movs	r0, r3
   20e2e:	4b05      	ldr	r3, [pc, #20]	; (20e44 <m2m_wifi_cb+0x3ac>)
   20e30:	4798      	blx	r3
}
   20e32:	46c0      	nop			; (mov r8, r8)
   20e34:	46bd      	mov	sp, r7
   20e36:	b02d      	add	sp, #180	; 0xb4
   20e38:	bd90      	pop	{r4, r7, pc}
   20e3a:	46c0      	nop			; (mov r8, r8)
   20e3c:	00038540 	.word	0x00038540
   20e40:	000381a4 	.word	0x000381a4
   20e44:	0001cf49 	.word	0x0001cf49
   20e48:	000381b8 	.word	0x000381b8
   20e4c:	000381a0 	.word	0x000381a0

00020e50 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
   20e50:	b590      	push	{r4, r7, lr}
   20e52:	b091      	sub	sp, #68	; 0x44
   20e54:	af02      	add	r7, sp, #8
   20e56:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
   20e58:	2337      	movs	r3, #55	; 0x37
   20e5a:	18fb      	adds	r3, r7, r3
   20e5c:	2200      	movs	r2, #0
   20e5e:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
   20e60:	230b      	movs	r3, #11
   20e62:	18fb      	adds	r3, r7, r3
   20e64:	2201      	movs	r2, #1
   20e66:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
   20e68:	687b      	ldr	r3, [r7, #4]
   20e6a:	2b00      	cmp	r3, #0
   20e6c:	d104      	bne.n	20e78 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
   20e6e:	2337      	movs	r3, #55	; 0x37
   20e70:	18fb      	adds	r3, r7, r3
   20e72:	22f4      	movs	r2, #244	; 0xf4
   20e74:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
   20e76:	e0b3      	b.n	20fe0 <m2m_wifi_init+0x190>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
   20e78:	687b      	ldr	r3, [r7, #4]
   20e7a:	681a      	ldr	r2, [r3, #0]
   20e7c:	4b5c      	ldr	r3, [pc, #368]	; (20ff0 <m2m_wifi_init+0x1a0>)
   20e7e:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
   20e80:	4b5c      	ldr	r3, [pc, #368]	; (20ff4 <m2m_wifi_init+0x1a4>)
   20e82:	2200      	movs	r2, #0
   20e84:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
   20e86:	2337      	movs	r3, #55	; 0x37
   20e88:	18fc      	adds	r4, r7, r3
   20e8a:	230b      	movs	r3, #11
   20e8c:	18fb      	adds	r3, r7, r3
   20e8e:	0018      	movs	r0, r3
   20e90:	4b59      	ldr	r3, [pc, #356]	; (20ff8 <m2m_wifi_init+0x1a8>)
   20e92:	4798      	blx	r3
   20e94:	0003      	movs	r3, r0
   20e96:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   20e98:	2337      	movs	r3, #55	; 0x37
   20e9a:	18fb      	adds	r3, r7, r3
   20e9c:	781b      	ldrb	r3, [r3, #0]
   20e9e:	b25b      	sxtb	r3, r3
   20ea0:	2b00      	cmp	r3, #0
   20ea2:	d000      	beq.n	20ea6 <m2m_wifi_init+0x56>
   20ea4:	e099      	b.n	20fda <m2m_wifi_init+0x18a>
	/* Initialize host interface module */
	ret = hif_init(NULL);
   20ea6:	2337      	movs	r3, #55	; 0x37
   20ea8:	18fc      	adds	r4, r7, r3
   20eaa:	2000      	movs	r0, #0
   20eac:	4b53      	ldr	r3, [pc, #332]	; (20ffc <m2m_wifi_init+0x1ac>)
   20eae:	4798      	blx	r3
   20eb0:	0003      	movs	r3, r0
   20eb2:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   20eb4:	2337      	movs	r3, #55	; 0x37
   20eb6:	18fb      	adds	r3, r7, r3
   20eb8:	781b      	ldrb	r3, [r3, #0]
   20eba:	b25b      	sxtb	r3, r3
   20ebc:	2b00      	cmp	r3, #0
   20ebe:	d000      	beq.n	20ec2 <m2m_wifi_init+0x72>
   20ec0:	e086      	b.n	20fd0 <m2m_wifi_init+0x180>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
   20ec2:	4b4f      	ldr	r3, [pc, #316]	; (21000 <m2m_wifi_init+0x1b0>)
   20ec4:	0019      	movs	r1, r3
   20ec6:	2001      	movs	r0, #1
   20ec8:	4b4e      	ldr	r3, [pc, #312]	; (21004 <m2m_wifi_init+0x1b4>)
   20eca:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
   20ecc:	2337      	movs	r3, #55	; 0x37
   20ece:	18fc      	adds	r4, r7, r3
   20ed0:	230c      	movs	r3, #12
   20ed2:	18fb      	adds	r3, r7, r3
   20ed4:	0018      	movs	r0, r3
   20ed6:	4b4c      	ldr	r3, [pc, #304]	; (21008 <m2m_wifi_init+0x1b8>)
   20ed8:	4798      	blx	r3
   20eda:	0003      	movs	r3, r0
   20edc:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
   20ede:	4b4b      	ldr	r3, [pc, #300]	; (2100c <m2m_wifi_init+0x1bc>)
   20ee0:	0018      	movs	r0, r3
   20ee2:	4b4b      	ldr	r3, [pc, #300]	; (21010 <m2m_wifi_init+0x1c0>)
   20ee4:	4798      	blx	r3
   20ee6:	230c      	movs	r3, #12
   20ee8:	18fb      	adds	r3, r7, r3
   20eea:	791b      	ldrb	r3, [r3, #4]
   20eec:	0019      	movs	r1, r3
   20eee:	230c      	movs	r3, #12
   20ef0:	18fb      	adds	r3, r7, r3
   20ef2:	795b      	ldrb	r3, [r3, #5]
   20ef4:	001a      	movs	r2, r3
   20ef6:	230c      	movs	r3, #12
   20ef8:	18fb      	adds	r3, r7, r3
   20efa:	799b      	ldrb	r3, [r3, #6]
   20efc:	001c      	movs	r4, r3
   20efe:	230c      	movs	r3, #12
   20f00:	18fb      	adds	r3, r7, r3
   20f02:	8c1b      	ldrh	r3, [r3, #32]
   20f04:	4843      	ldr	r0, [pc, #268]	; (21014 <m2m_wifi_init+0x1c4>)
   20f06:	9300      	str	r3, [sp, #0]
   20f08:	0023      	movs	r3, r4
   20f0a:	4c41      	ldr	r4, [pc, #260]	; (21010 <m2m_wifi_init+0x1c0>)
   20f0c:	47a0      	blx	r4
   20f0e:	4b42      	ldr	r3, [pc, #264]	; (21018 <m2m_wifi_init+0x1c8>)
   20f10:	0018      	movs	r0, r3
   20f12:	4b3f      	ldr	r3, [pc, #252]	; (21010 <m2m_wifi_init+0x1c0>)
   20f14:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
   20f16:	4b3d      	ldr	r3, [pc, #244]	; (2100c <m2m_wifi_init+0x1bc>)
   20f18:	0018      	movs	r0, r3
   20f1a:	4b3d      	ldr	r3, [pc, #244]	; (21010 <m2m_wifi_init+0x1c0>)
   20f1c:	4798      	blx	r3
   20f1e:	230c      	movs	r3, #12
   20f20:	18fb      	adds	r3, r7, r3
   20f22:	3316      	adds	r3, #22
   20f24:	001a      	movs	r2, r3
   20f26:	230c      	movs	r3, #12
   20f28:	18fb      	adds	r3, r7, r3
   20f2a:	330a      	adds	r3, #10
   20f2c:	0019      	movs	r1, r3
   20f2e:	4b3b      	ldr	r3, [pc, #236]	; (2101c <m2m_wifi_init+0x1cc>)
   20f30:	0018      	movs	r0, r3
   20f32:	4b37      	ldr	r3, [pc, #220]	; (21010 <m2m_wifi_init+0x1c0>)
   20f34:	4798      	blx	r3
   20f36:	4b38      	ldr	r3, [pc, #224]	; (21018 <m2m_wifi_init+0x1c8>)
   20f38:	0018      	movs	r0, r3
   20f3a:	4b35      	ldr	r3, [pc, #212]	; (21010 <m2m_wifi_init+0x1c0>)
   20f3c:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
   20f3e:	4b33      	ldr	r3, [pc, #204]	; (2100c <m2m_wifi_init+0x1bc>)
   20f40:	0018      	movs	r0, r3
   20f42:	4b33      	ldr	r3, [pc, #204]	; (21010 <m2m_wifi_init+0x1c0>)
   20f44:	4798      	blx	r3
   20f46:	230c      	movs	r3, #12
   20f48:	18fb      	adds	r3, r7, r3
   20f4a:	79db      	ldrb	r3, [r3, #7]
   20f4c:	0019      	movs	r1, r3
   20f4e:	230c      	movs	r3, #12
   20f50:	18fb      	adds	r3, r7, r3
   20f52:	7a1b      	ldrb	r3, [r3, #8]
   20f54:	001a      	movs	r2, r3
   20f56:	230c      	movs	r3, #12
   20f58:	18fb      	adds	r3, r7, r3
   20f5a:	7a5b      	ldrb	r3, [r3, #9]
   20f5c:	4830      	ldr	r0, [pc, #192]	; (21020 <m2m_wifi_init+0x1d0>)
   20f5e:	4c2c      	ldr	r4, [pc, #176]	; (21010 <m2m_wifi_init+0x1c0>)
   20f60:	47a0      	blx	r4
   20f62:	4b2d      	ldr	r3, [pc, #180]	; (21018 <m2m_wifi_init+0x1c8>)
   20f64:	0018      	movs	r0, r3
   20f66:	4b2a      	ldr	r3, [pc, #168]	; (21010 <m2m_wifi_init+0x1c0>)
   20f68:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   20f6a:	4b28      	ldr	r3, [pc, #160]	; (2100c <m2m_wifi_init+0x1bc>)
   20f6c:	0018      	movs	r0, r3
   20f6e:	4b28      	ldr	r3, [pc, #160]	; (21010 <m2m_wifi_init+0x1c0>)
   20f70:	4798      	blx	r3
   20f72:	482c      	ldr	r0, [pc, #176]	; (21024 <m2m_wifi_init+0x1d4>)
   20f74:	2304      	movs	r3, #4
   20f76:	2205      	movs	r2, #5
   20f78:	2113      	movs	r1, #19
   20f7a:	4c25      	ldr	r4, [pc, #148]	; (21010 <m2m_wifi_init+0x1c0>)
   20f7c:	47a0      	blx	r4
   20f7e:	4b26      	ldr	r3, [pc, #152]	; (21018 <m2m_wifi_init+0x1c8>)
   20f80:	0018      	movs	r0, r3
   20f82:	4b23      	ldr	r3, [pc, #140]	; (21010 <m2m_wifi_init+0x1c0>)
   20f84:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
   20f86:	4b21      	ldr	r3, [pc, #132]	; (2100c <m2m_wifi_init+0x1bc>)
   20f88:	0018      	movs	r0, r3
   20f8a:	4b21      	ldr	r3, [pc, #132]	; (21010 <m2m_wifi_init+0x1c0>)
   20f8c:	4798      	blx	r3
   20f8e:	4a26      	ldr	r2, [pc, #152]	; (21028 <m2m_wifi_init+0x1d8>)
   20f90:	4926      	ldr	r1, [pc, #152]	; (2102c <m2m_wifi_init+0x1dc>)
   20f92:	4b27      	ldr	r3, [pc, #156]	; (21030 <m2m_wifi_init+0x1e0>)
   20f94:	0018      	movs	r0, r3
   20f96:	4b1e      	ldr	r3, [pc, #120]	; (21010 <m2m_wifi_init+0x1c0>)
   20f98:	4798      	blx	r3
   20f9a:	4b1f      	ldr	r3, [pc, #124]	; (21018 <m2m_wifi_init+0x1c8>)
   20f9c:	0018      	movs	r0, r3
   20f9e:	4b1c      	ldr	r3, [pc, #112]	; (21010 <m2m_wifi_init+0x1c0>)
   20fa0:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
   20fa2:	2337      	movs	r3, #55	; 0x37
   20fa4:	18fb      	adds	r3, r7, r3
   20fa6:	781b      	ldrb	r3, [r3, #0]
   20fa8:	b25b      	sxtb	r3, r3
   20faa:	330d      	adds	r3, #13
   20fac:	d117      	bne.n	20fde <m2m_wifi_init+0x18e>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
   20fae:	23e8      	movs	r3, #232	; 0xe8
   20fb0:	33ff      	adds	r3, #255	; 0xff
   20fb2:	001a      	movs	r2, r3
   20fb4:	491f      	ldr	r1, [pc, #124]	; (21034 <m2m_wifi_init+0x1e4>)
   20fb6:	4b20      	ldr	r3, [pc, #128]	; (21038 <m2m_wifi_init+0x1e8>)
   20fb8:	0018      	movs	r0, r3
   20fba:	4b15      	ldr	r3, [pc, #84]	; (21010 <m2m_wifi_init+0x1c0>)
   20fbc:	4798      	blx	r3
   20fbe:	4b1f      	ldr	r3, [pc, #124]	; (2103c <m2m_wifi_init+0x1ec>)
   20fc0:	0018      	movs	r0, r3
   20fc2:	4b13      	ldr	r3, [pc, #76]	; (21010 <m2m_wifi_init+0x1c0>)
   20fc4:	4798      	blx	r3
   20fc6:	4b14      	ldr	r3, [pc, #80]	; (21018 <m2m_wifi_init+0x1c8>)
   20fc8:	0018      	movs	r0, r3
   20fca:	4b11      	ldr	r3, [pc, #68]	; (21010 <m2m_wifi_init+0x1c0>)
   20fcc:	4798      	blx	r3
	}

	goto _EXIT0;
   20fce:	e006      	b.n	20fde <m2m_wifi_init+0x18e>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   20fd0:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
   20fd2:	2000      	movs	r0, #0
   20fd4:	4b1a      	ldr	r3, [pc, #104]	; (21040 <m2m_wifi_init+0x1f0>)
   20fd6:	4798      	blx	r3
   20fd8:	e002      	b.n	20fe0 <m2m_wifi_init+0x190>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   20fda:	46c0      	nop			; (mov r8, r8)
   20fdc:	e000      	b.n	20fe0 <m2m_wifi_init+0x190>
	goto _EXIT0;
   20fde:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
   20fe0:	2337      	movs	r3, #55	; 0x37
   20fe2:	18fb      	adds	r3, r7, r3
   20fe4:	781b      	ldrb	r3, [r3, #0]
   20fe6:	b25b      	sxtb	r3, r3
}
   20fe8:	0018      	movs	r0, r3
   20fea:	46bd      	mov	sp, r7
   20fec:	b00f      	add	sp, #60	; 0x3c
   20fee:	bd90      	pop	{r4, r7, pc}
   20ff0:	20004274 	.word	0x20004274
   20ff4:	20004271 	.word	0x20004271
   20ff8:	00022175 	.word	0x00022175
   20ffc:	0001fef9 	.word	0x0001fef9
   21000:	00020a99 	.word	0x00020a99
   21004:	000209dd 	.word	0x000209dd
   21008:	00021fa9 	.word	0x00021fa9
   2100c:	00038174 	.word	0x00038174
   21010:	0001cf49 	.word	0x0001cf49
   21014:	00038318 	.word	0x00038318
   21018:	000381a0 	.word	0x000381a0
   2101c:	00038340 	.word	0x00038340
   21020:	0003835c 	.word	0x0003835c
   21024:	00038380 	.word	0x00038380
   21028:	00038398 	.word	0x00038398
   2102c:	000383a4 	.word	0x000383a4
   21030:	000383b0 	.word	0x000383b0
   21034:	0003854c 	.word	0x0003854c
   21038:	000381a4 	.word	0x000381a4
   2103c:	000383c8 	.word	0x000383c8
   21040:	00022305 	.word	0x00022305

00021044 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
   21044:	b580      	push	{r7, lr}
   21046:	b082      	sub	sp, #8
   21048:	af00      	add	r7, sp, #0
   2104a:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
   2104c:	4b03      	ldr	r3, [pc, #12]	; (2105c <m2m_wifi_handle_events+0x18>)
   2104e:	4798      	blx	r3
   21050:	0003      	movs	r3, r0
}
   21052:	0018      	movs	r0, r3
   21054:	46bd      	mov	sp, r7
   21056:	b002      	add	sp, #8
   21058:	bd80      	pop	{r7, pc}
   2105a:	46c0      	nop			; (mov r8, r8)
   2105c:	000207bd 	.word	0x000207bd

00021060 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
   21060:	b590      	push	{r4, r7, lr}
   21062:	b087      	sub	sp, #28
   21064:	af02      	add	r7, sp, #8
   21066:	60f8      	str	r0, [r7, #12]
   21068:	0008      	movs	r0, r1
   2106a:	0011      	movs	r1, r2
   2106c:	607b      	str	r3, [r7, #4]
   2106e:	230b      	movs	r3, #11
   21070:	18fb      	adds	r3, r7, r3
   21072:	1c02      	adds	r2, r0, #0
   21074:	701a      	strb	r2, [r3, #0]
   21076:	230a      	movs	r3, #10
   21078:	18fb      	adds	r3, r7, r3
   2107a:	1c0a      	adds	r2, r1, #0
   2107c:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
   2107e:	687c      	ldr	r4, [r7, #4]
   21080:	230a      	movs	r3, #10
   21082:	18fb      	adds	r3, r7, r3
   21084:	781a      	ldrb	r2, [r3, #0]
   21086:	230b      	movs	r3, #11
   21088:	18fb      	adds	r3, r7, r3
   2108a:	7819      	ldrb	r1, [r3, #0]
   2108c:	68f8      	ldr	r0, [r7, #12]
   2108e:	2300      	movs	r3, #0
   21090:	9301      	str	r3, [sp, #4]
   21092:	2320      	movs	r3, #32
   21094:	18fb      	adds	r3, r7, r3
   21096:	881b      	ldrh	r3, [r3, #0]
   21098:	9300      	str	r3, [sp, #0]
   2109a:	0023      	movs	r3, r4
   2109c:	4c03      	ldr	r4, [pc, #12]	; (210ac <m2m_wifi_connect+0x4c>)
   2109e:	47a0      	blx	r4
   210a0:	0003      	movs	r3, r0
}
   210a2:	0018      	movs	r0, r3
   210a4:	46bd      	mov	sp, r7
   210a6:	b005      	add	sp, #20
   210a8:	bd90      	pop	{r4, r7, pc}
   210aa:	46c0      	nop			; (mov r8, r8)
   210ac:	000210b1 	.word	0x000210b1

000210b0 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
   210b0:	b5b0      	push	{r4, r5, r7, lr}
   210b2:	b0aa      	sub	sp, #168	; 0xa8
   210b4:	af04      	add	r7, sp, #16
   210b6:	60f8      	str	r0, [r7, #12]
   210b8:	0008      	movs	r0, r1
   210ba:	0011      	movs	r1, r2
   210bc:	607b      	str	r3, [r7, #4]
   210be:	230b      	movs	r3, #11
   210c0:	18fb      	adds	r3, r7, r3
   210c2:	1c02      	adds	r2, r0, #0
   210c4:	701a      	strb	r2, [r3, #0]
   210c6:	230a      	movs	r3, #10
   210c8:	18fb      	adds	r3, r7, r3
   210ca:	1c0a      	adds	r2, r1, #0
   210cc:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
   210ce:	2397      	movs	r3, #151	; 0x97
   210d0:	18fb      	adds	r3, r7, r3
   210d2:	2200      	movs	r2, #0
   210d4:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
   210d6:	230a      	movs	r3, #10
   210d8:	18fb      	adds	r3, r7, r3
   210da:	781b      	ldrb	r3, [r3, #0]
   210dc:	2b01      	cmp	r3, #1
   210de:	d100      	bne.n	210e2 <m2m_wifi_connect_sc+0x32>
   210e0:	e085      	b.n	211ee <m2m_wifi_connect_sc+0x13e>
	{
		if(pvAuthInfo == NULL)
   210e2:	687b      	ldr	r3, [r7, #4]
   210e4:	2b00      	cmp	r3, #0
   210e6:	d112      	bne.n	2110e <m2m_wifi_connect_sc+0x5e>
		{
			M2M_ERR("Key is not valid\n");
   210e8:	4ad8      	ldr	r2, [pc, #864]	; (2144c <m2m_wifi_connect_sc+0x39c>)
   210ea:	49d9      	ldr	r1, [pc, #868]	; (21450 <m2m_wifi_connect_sc+0x3a0>)
   210ec:	4bd9      	ldr	r3, [pc, #868]	; (21454 <m2m_wifi_connect_sc+0x3a4>)
   210ee:	0018      	movs	r0, r3
   210f0:	4bd9      	ldr	r3, [pc, #868]	; (21458 <m2m_wifi_connect_sc+0x3a8>)
   210f2:	4798      	blx	r3
   210f4:	4bd9      	ldr	r3, [pc, #868]	; (2145c <m2m_wifi_connect_sc+0x3ac>)
   210f6:	0018      	movs	r0, r3
   210f8:	4bd7      	ldr	r3, [pc, #860]	; (21458 <m2m_wifi_connect_sc+0x3a8>)
   210fa:	4798      	blx	r3
   210fc:	4bd8      	ldr	r3, [pc, #864]	; (21460 <m2m_wifi_connect_sc+0x3b0>)
   210fe:	0018      	movs	r0, r3
   21100:	4bd5      	ldr	r3, [pc, #852]	; (21458 <m2m_wifi_connect_sc+0x3a8>)
   21102:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   21104:	2397      	movs	r3, #151	; 0x97
   21106:	18fb      	adds	r3, r7, r3
   21108:	22f4      	movs	r2, #244	; 0xf4
   2110a:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   2110c:	e1f9      	b.n	21502 <m2m_wifi_connect_sc+0x452>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
   2110e:	230a      	movs	r3, #10
   21110:	18fb      	adds	r3, r7, r3
   21112:	781b      	ldrb	r3, [r3, #0]
   21114:	2b02      	cmp	r3, #2
   21116:	d16a      	bne.n	211ee <m2m_wifi_connect_sc+0x13e>
   21118:	687b      	ldr	r3, [r7, #4]
   2111a:	0018      	movs	r0, r3
   2111c:	4bd1      	ldr	r3, [pc, #836]	; (21464 <m2m_wifi_connect_sc+0x3b4>)
   2111e:	4798      	blx	r3
   21120:	0003      	movs	r3, r0
   21122:	2b40      	cmp	r3, #64	; 0x40
   21124:	d163      	bne.n	211ee <m2m_wifi_connect_sc+0x13e>
		{
			uint8 i = 0;
   21126:	2396      	movs	r3, #150	; 0x96
   21128:	18fb      	adds	r3, r7, r3
   2112a:	2200      	movs	r2, #0
   2112c:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
   2112e:	687b      	ldr	r3, [r7, #4]
   21130:	2290      	movs	r2, #144	; 0x90
   21132:	18ba      	adds	r2, r7, r2
   21134:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   21136:	e055      	b.n	211e4 <m2m_wifi_connect_sc+0x134>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
   21138:	2396      	movs	r3, #150	; 0x96
   2113a:	18fb      	adds	r3, r7, r3
   2113c:	781b      	ldrb	r3, [r3, #0]
   2113e:	2290      	movs	r2, #144	; 0x90
   21140:	18ba      	adds	r2, r7, r2
   21142:	6812      	ldr	r2, [r2, #0]
   21144:	18d3      	adds	r3, r2, r3
   21146:	781b      	ldrb	r3, [r3, #0]
   21148:	2b2f      	cmp	r3, #47	; 0x2f
   2114a:	d931      	bls.n	211b0 <m2m_wifi_connect_sc+0x100>
   2114c:	2396      	movs	r3, #150	; 0x96
   2114e:	18fb      	adds	r3, r7, r3
   21150:	781b      	ldrb	r3, [r3, #0]
   21152:	2290      	movs	r2, #144	; 0x90
   21154:	18ba      	adds	r2, r7, r2
   21156:	6812      	ldr	r2, [r2, #0]
   21158:	18d3      	adds	r3, r2, r3
   2115a:	781b      	ldrb	r3, [r3, #0]
   2115c:	2b39      	cmp	r3, #57	; 0x39
   2115e:	d909      	bls.n	21174 <m2m_wifi_connect_sc+0xc4>
   21160:	2396      	movs	r3, #150	; 0x96
   21162:	18fb      	adds	r3, r7, r3
   21164:	781b      	ldrb	r3, [r3, #0]
   21166:	2290      	movs	r2, #144	; 0x90
   21168:	18ba      	adds	r2, r7, r2
   2116a:	6812      	ldr	r2, [r2, #0]
   2116c:	18d3      	adds	r3, r2, r3
   2116e:	781b      	ldrb	r3, [r3, #0]
   21170:	2b40      	cmp	r3, #64	; 0x40
   21172:	d91d      	bls.n	211b0 <m2m_wifi_connect_sc+0x100>
   21174:	2396      	movs	r3, #150	; 0x96
   21176:	18fb      	adds	r3, r7, r3
   21178:	781b      	ldrb	r3, [r3, #0]
   2117a:	2290      	movs	r2, #144	; 0x90
   2117c:	18ba      	adds	r2, r7, r2
   2117e:	6812      	ldr	r2, [r2, #0]
   21180:	18d3      	adds	r3, r2, r3
   21182:	781b      	ldrb	r3, [r3, #0]
   21184:	2b46      	cmp	r3, #70	; 0x46
   21186:	d909      	bls.n	2119c <m2m_wifi_connect_sc+0xec>
   21188:	2396      	movs	r3, #150	; 0x96
   2118a:	18fb      	adds	r3, r7, r3
   2118c:	781b      	ldrb	r3, [r3, #0]
   2118e:	2290      	movs	r2, #144	; 0x90
   21190:	18ba      	adds	r2, r7, r2
   21192:	6812      	ldr	r2, [r2, #0]
   21194:	18d3      	adds	r3, r2, r3
   21196:	781b      	ldrb	r3, [r3, #0]
   21198:	2b60      	cmp	r3, #96	; 0x60
   2119a:	d909      	bls.n	211b0 <m2m_wifi_connect_sc+0x100>
   2119c:	2396      	movs	r3, #150	; 0x96
   2119e:	18fb      	adds	r3, r7, r3
   211a0:	781b      	ldrb	r3, [r3, #0]
   211a2:	2290      	movs	r2, #144	; 0x90
   211a4:	18ba      	adds	r2, r7, r2
   211a6:	6812      	ldr	r2, [r2, #0]
   211a8:	18d3      	adds	r3, r2, r3
   211aa:	781b      	ldrb	r3, [r3, #0]
   211ac:	2b66      	cmp	r3, #102	; 0x66
   211ae:	d912      	bls.n	211d6 <m2m_wifi_connect_sc+0x126>
				{
					M2M_ERR("Invalid Key\n");
   211b0:	4aad      	ldr	r2, [pc, #692]	; (21468 <m2m_wifi_connect_sc+0x3b8>)
   211b2:	49a7      	ldr	r1, [pc, #668]	; (21450 <m2m_wifi_connect_sc+0x3a0>)
   211b4:	4ba7      	ldr	r3, [pc, #668]	; (21454 <m2m_wifi_connect_sc+0x3a4>)
   211b6:	0018      	movs	r0, r3
   211b8:	4ba7      	ldr	r3, [pc, #668]	; (21458 <m2m_wifi_connect_sc+0x3a8>)
   211ba:	4798      	blx	r3
   211bc:	4bab      	ldr	r3, [pc, #684]	; (2146c <m2m_wifi_connect_sc+0x3bc>)
   211be:	0018      	movs	r0, r3
   211c0:	4ba5      	ldr	r3, [pc, #660]	; (21458 <m2m_wifi_connect_sc+0x3a8>)
   211c2:	4798      	blx	r3
   211c4:	4ba6      	ldr	r3, [pc, #664]	; (21460 <m2m_wifi_connect_sc+0x3b0>)
   211c6:	0018      	movs	r0, r3
   211c8:	4ba3      	ldr	r3, [pc, #652]	; (21458 <m2m_wifi_connect_sc+0x3a8>)
   211ca:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
   211cc:	2397      	movs	r3, #151	; 0x97
   211ce:	18fb      	adds	r3, r7, r3
   211d0:	22f4      	movs	r2, #244	; 0xf4
   211d2:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   211d4:	e195      	b.n	21502 <m2m_wifi_connect_sc+0x452>
				}
				i++;
   211d6:	2396      	movs	r3, #150	; 0x96
   211d8:	18fb      	adds	r3, r7, r3
   211da:	781a      	ldrb	r2, [r3, #0]
   211dc:	2396      	movs	r3, #150	; 0x96
   211de:	18fb      	adds	r3, r7, r3
   211e0:	3201      	adds	r2, #1
   211e2:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   211e4:	2396      	movs	r3, #150	; 0x96
   211e6:	18fb      	adds	r3, r7, r3
   211e8:	781b      	ldrb	r3, [r3, #0]
   211ea:	2b3f      	cmp	r3, #63	; 0x3f
   211ec:	d9a4      	bls.n	21138 <m2m_wifi_connect_sc+0x88>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
   211ee:	230b      	movs	r3, #11
   211f0:	18fb      	adds	r3, r7, r3
   211f2:	781b      	ldrb	r3, [r3, #0]
   211f4:	2b00      	cmp	r3, #0
   211f6:	d004      	beq.n	21202 <m2m_wifi_connect_sc+0x152>
   211f8:	230b      	movs	r3, #11
   211fa:	18fb      	adds	r3, r7, r3
   211fc:	781b      	ldrb	r3, [r3, #0]
   211fe:	2b20      	cmp	r3, #32
   21200:	d913      	bls.n	2122a <m2m_wifi_connect_sc+0x17a>
	{
		M2M_ERR("SSID LEN INVALID\n");
   21202:	238c      	movs	r3, #140	; 0x8c
   21204:	009a      	lsls	r2, r3, #2
   21206:	4992      	ldr	r1, [pc, #584]	; (21450 <m2m_wifi_connect_sc+0x3a0>)
   21208:	4b92      	ldr	r3, [pc, #584]	; (21454 <m2m_wifi_connect_sc+0x3a4>)
   2120a:	0018      	movs	r0, r3
   2120c:	4b92      	ldr	r3, [pc, #584]	; (21458 <m2m_wifi_connect_sc+0x3a8>)
   2120e:	4798      	blx	r3
   21210:	4b97      	ldr	r3, [pc, #604]	; (21470 <m2m_wifi_connect_sc+0x3c0>)
   21212:	0018      	movs	r0, r3
   21214:	4b90      	ldr	r3, [pc, #576]	; (21458 <m2m_wifi_connect_sc+0x3a8>)
   21216:	4798      	blx	r3
   21218:	4b91      	ldr	r3, [pc, #580]	; (21460 <m2m_wifi_connect_sc+0x3b0>)
   2121a:	0018      	movs	r0, r3
   2121c:	4b8e      	ldr	r3, [pc, #568]	; (21458 <m2m_wifi_connect_sc+0x3a8>)
   2121e:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   21220:	2397      	movs	r3, #151	; 0x97
   21222:	18fb      	adds	r3, r7, r3
   21224:	22f4      	movs	r2, #244	; 0xf4
   21226:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   21228:	e16b      	b.n	21502 <m2m_wifi_connect_sc+0x452>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
   2122a:	23a8      	movs	r3, #168	; 0xa8
   2122c:	18fb      	adds	r3, r7, r3
   2122e:	881b      	ldrh	r3, [r3, #0]
   21230:	2b00      	cmp	r3, #0
   21232:	d004      	beq.n	2123e <m2m_wifi_connect_sc+0x18e>
   21234:	23a8      	movs	r3, #168	; 0xa8
   21236:	18fb      	adds	r3, r7, r3
   21238:	881b      	ldrh	r3, [r3, #0]
   2123a:	2b0e      	cmp	r3, #14
   2123c:	d917      	bls.n	2126e <m2m_wifi_connect_sc+0x1be>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
   2123e:	23a8      	movs	r3, #168	; 0xa8
   21240:	18fb      	adds	r3, r7, r3
   21242:	881b      	ldrh	r3, [r3, #0]
   21244:	2bff      	cmp	r3, #255	; 0xff
   21246:	d012      	beq.n	2126e <m2m_wifi_connect_sc+0x1be>
		{
			M2M_ERR("CH INVALID\n");
   21248:	4a8a      	ldr	r2, [pc, #552]	; (21474 <m2m_wifi_connect_sc+0x3c4>)
   2124a:	4981      	ldr	r1, [pc, #516]	; (21450 <m2m_wifi_connect_sc+0x3a0>)
   2124c:	4b81      	ldr	r3, [pc, #516]	; (21454 <m2m_wifi_connect_sc+0x3a4>)
   2124e:	0018      	movs	r0, r3
   21250:	4b81      	ldr	r3, [pc, #516]	; (21458 <m2m_wifi_connect_sc+0x3a8>)
   21252:	4798      	blx	r3
   21254:	4b88      	ldr	r3, [pc, #544]	; (21478 <m2m_wifi_connect_sc+0x3c8>)
   21256:	0018      	movs	r0, r3
   21258:	4b7f      	ldr	r3, [pc, #508]	; (21458 <m2m_wifi_connect_sc+0x3a8>)
   2125a:	4798      	blx	r3
   2125c:	4b80      	ldr	r3, [pc, #512]	; (21460 <m2m_wifi_connect_sc+0x3b0>)
   2125e:	0018      	movs	r0, r3
   21260:	4b7d      	ldr	r3, [pc, #500]	; (21458 <m2m_wifi_connect_sc+0x3a8>)
   21262:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   21264:	2397      	movs	r3, #151	; 0x97
   21266:	18fb      	adds	r3, r7, r3
   21268:	22f4      	movs	r2, #244	; 0xf4
   2126a:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   2126c:	e149      	b.n	21502 <m2m_wifi_connect_sc+0x452>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
   2126e:	230b      	movs	r3, #11
   21270:	18fb      	adds	r3, r7, r3
   21272:	781a      	ldrb	r2, [r3, #0]
   21274:	68f9      	ldr	r1, [r7, #12]
   21276:	2314      	movs	r3, #20
   21278:	18fb      	adds	r3, r7, r3
   2127a:	3346      	adds	r3, #70	; 0x46
   2127c:	0018      	movs	r0, r3
   2127e:	4b7f      	ldr	r3, [pc, #508]	; (2147c <m2m_wifi_connect_sc+0x3cc>)
   21280:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
   21282:	230b      	movs	r3, #11
   21284:	18fb      	adds	r3, r7, r3
   21286:	781b      	ldrb	r3, [r3, #0]
   21288:	2214      	movs	r2, #20
   2128a:	18ba      	adds	r2, r7, r2
   2128c:	2146      	movs	r1, #70	; 0x46
   2128e:	18d3      	adds	r3, r2, r3
   21290:	185b      	adds	r3, r3, r1
   21292:	2200      	movs	r2, #0
   21294:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
   21296:	2314      	movs	r3, #20
   21298:	18fb      	adds	r3, r7, r3
   2129a:	22a8      	movs	r2, #168	; 0xa8
   2129c:	18ba      	adds	r2, r7, r2
   2129e:	2144      	movs	r1, #68	; 0x44
   212a0:	8812      	ldrh	r2, [r2, #0]
   212a2:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
   212a4:	23ac      	movs	r3, #172	; 0xac
   212a6:	18fb      	adds	r3, r7, r3
   212a8:	781b      	ldrb	r3, [r3, #0]
   212aa:	1e5a      	subs	r2, r3, #1
   212ac:	4193      	sbcs	r3, r2
   212ae:	b2db      	uxtb	r3, r3
   212b0:	0019      	movs	r1, r3
   212b2:	2314      	movs	r3, #20
   212b4:	18fb      	adds	r3, r7, r3
   212b6:	2267      	movs	r2, #103	; 0x67
   212b8:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
   212ba:	2314      	movs	r3, #20
   212bc:	18fb      	adds	r3, r7, r3
   212be:	228c      	movs	r2, #140	; 0x8c
   212c0:	18ba      	adds	r2, r7, r2
   212c2:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
   212c4:	238c      	movs	r3, #140	; 0x8c
   212c6:	18fb      	adds	r3, r7, r3
   212c8:	681b      	ldr	r3, [r3, #0]
   212ca:	220a      	movs	r2, #10
   212cc:	18ba      	adds	r2, r7, r2
   212ce:	2141      	movs	r1, #65	; 0x41
   212d0:	7812      	ldrb	r2, [r2, #0]
   212d2:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
   212d4:	230a      	movs	r3, #10
   212d6:	18fb      	adds	r3, r7, r3
   212d8:	781b      	ldrb	r3, [r3, #0]
   212da:	2b03      	cmp	r3, #3
   212dc:	d000      	beq.n	212e0 <m2m_wifi_connect_sc+0x230>
   212de:	e07d      	b.n	213dc <m2m_wifi_connect_sc+0x32c>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
   212e0:	687b      	ldr	r3, [r7, #4]
   212e2:	2288      	movs	r2, #136	; 0x88
   212e4:	18ba      	adds	r2, r7, r2
   212e6:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
   212e8:	238c      	movs	r3, #140	; 0x8c
   212ea:	18fb      	adds	r3, r7, r3
   212ec:	681b      	ldr	r3, [r3, #0]
   212ee:	2284      	movs	r2, #132	; 0x84
   212f0:	18ba      	adds	r2, r7, r2
   212f2:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
   212f4:	2388      	movs	r3, #136	; 0x88
   212f6:	18fb      	adds	r3, r7, r3
   212f8:	681b      	ldr	r3, [r3, #0]
   212fa:	781b      	ldrb	r3, [r3, #0]
   212fc:	3b01      	subs	r3, #1
   212fe:	b2da      	uxtb	r2, r3
   21300:	2384      	movs	r3, #132	; 0x84
   21302:	18fb      	adds	r3, r7, r3
   21304:	681b      	ldr	r3, [r3, #0]
   21306:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
   21308:	2384      	movs	r3, #132	; 0x84
   2130a:	18fb      	adds	r3, r7, r3
   2130c:	681b      	ldr	r3, [r3, #0]
   2130e:	781b      	ldrb	r3, [r3, #0]
   21310:	2b03      	cmp	r3, #3
   21312:	d919      	bls.n	21348 <m2m_wifi_connect_sc+0x298>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
   21314:	2394      	movs	r3, #148	; 0x94
   21316:	009a      	lsls	r2, r3, #2
   21318:	494d      	ldr	r1, [pc, #308]	; (21450 <m2m_wifi_connect_sc+0x3a0>)
   2131a:	4b4e      	ldr	r3, [pc, #312]	; (21454 <m2m_wifi_connect_sc+0x3a4>)
   2131c:	0018      	movs	r0, r3
   2131e:	4b4e      	ldr	r3, [pc, #312]	; (21458 <m2m_wifi_connect_sc+0x3a8>)
   21320:	4798      	blx	r3
   21322:	2384      	movs	r3, #132	; 0x84
   21324:	18fb      	adds	r3, r7, r3
   21326:	681b      	ldr	r3, [r3, #0]
   21328:	781b      	ldrb	r3, [r3, #0]
   2132a:	001a      	movs	r2, r3
   2132c:	4b54      	ldr	r3, [pc, #336]	; (21480 <m2m_wifi_connect_sc+0x3d0>)
   2132e:	0011      	movs	r1, r2
   21330:	0018      	movs	r0, r3
   21332:	4b49      	ldr	r3, [pc, #292]	; (21458 <m2m_wifi_connect_sc+0x3a8>)
   21334:	4798      	blx	r3
   21336:	4b4a      	ldr	r3, [pc, #296]	; (21460 <m2m_wifi_connect_sc+0x3b0>)
   21338:	0018      	movs	r0, r3
   2133a:	4b47      	ldr	r3, [pc, #284]	; (21458 <m2m_wifi_connect_sc+0x3a8>)
   2133c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   2133e:	2397      	movs	r3, #151	; 0x97
   21340:	18fb      	adds	r3, r7, r3
   21342:	22f4      	movs	r2, #244	; 0xf4
   21344:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   21346:	e0dc      	b.n	21502 <m2m_wifi_connect_sc+0x452>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
   21348:	2388      	movs	r3, #136	; 0x88
   2134a:	18fb      	adds	r3, r7, r3
   2134c:	681b      	ldr	r3, [r3, #0]
   2134e:	785b      	ldrb	r3, [r3, #1]
   21350:	3b01      	subs	r3, #1
   21352:	b2da      	uxtb	r2, r3
   21354:	2384      	movs	r3, #132	; 0x84
   21356:	18fb      	adds	r3, r7, r3
   21358:	681b      	ldr	r3, [r3, #0]
   2135a:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
   2135c:	2384      	movs	r3, #132	; 0x84
   2135e:	18fb      	adds	r3, r7, r3
   21360:	681b      	ldr	r3, [r3, #0]
   21362:	785b      	ldrb	r3, [r3, #1]
   21364:	2b0a      	cmp	r3, #10
   21366:	d01e      	beq.n	213a6 <m2m_wifi_connect_sc+0x2f6>
   21368:	2384      	movs	r3, #132	; 0x84
   2136a:	18fb      	adds	r3, r7, r3
   2136c:	681b      	ldr	r3, [r3, #0]
   2136e:	785b      	ldrb	r3, [r3, #1]
   21370:	2b1a      	cmp	r3, #26
   21372:	d018      	beq.n	213a6 <m2m_wifi_connect_sc+0x2f6>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
   21374:	4a43      	ldr	r2, [pc, #268]	; (21484 <m2m_wifi_connect_sc+0x3d4>)
   21376:	4936      	ldr	r1, [pc, #216]	; (21450 <m2m_wifi_connect_sc+0x3a0>)
   21378:	4b36      	ldr	r3, [pc, #216]	; (21454 <m2m_wifi_connect_sc+0x3a4>)
   2137a:	0018      	movs	r0, r3
   2137c:	4b36      	ldr	r3, [pc, #216]	; (21458 <m2m_wifi_connect_sc+0x3a8>)
   2137e:	4798      	blx	r3
   21380:	2384      	movs	r3, #132	; 0x84
   21382:	18fb      	adds	r3, r7, r3
   21384:	681b      	ldr	r3, [r3, #0]
   21386:	785b      	ldrb	r3, [r3, #1]
   21388:	001a      	movs	r2, r3
   2138a:	4b3f      	ldr	r3, [pc, #252]	; (21488 <m2m_wifi_connect_sc+0x3d8>)
   2138c:	0011      	movs	r1, r2
   2138e:	0018      	movs	r0, r3
   21390:	4b31      	ldr	r3, [pc, #196]	; (21458 <m2m_wifi_connect_sc+0x3a8>)
   21392:	4798      	blx	r3
   21394:	4b32      	ldr	r3, [pc, #200]	; (21460 <m2m_wifi_connect_sc+0x3b0>)
   21396:	0018      	movs	r0, r3
   21398:	4b2f      	ldr	r3, [pc, #188]	; (21458 <m2m_wifi_connect_sc+0x3a8>)
   2139a:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   2139c:	2397      	movs	r3, #151	; 0x97
   2139e:	18fb      	adds	r3, r7, r3
   213a0:	22f4      	movs	r2, #244	; 0xf4
   213a2:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   213a4:	e0ad      	b.n	21502 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
   213a6:	2384      	movs	r3, #132	; 0x84
   213a8:	18fb      	adds	r3, r7, r3
   213aa:	681b      	ldr	r3, [r3, #0]
   213ac:	1c98      	adds	r0, r3, #2
   213ae:	2388      	movs	r3, #136	; 0x88
   213b0:	18fb      	adds	r3, r7, r3
   213b2:	681b      	ldr	r3, [r3, #0]
   213b4:	1c99      	adds	r1, r3, #2
   213b6:	2388      	movs	r3, #136	; 0x88
   213b8:	18fb      	adds	r3, r7, r3
   213ba:	681b      	ldr	r3, [r3, #0]
   213bc:	785b      	ldrb	r3, [r3, #1]
   213be:	001a      	movs	r2, r3
   213c0:	4b2e      	ldr	r3, [pc, #184]	; (2147c <m2m_wifi_connect_sc+0x3cc>)
   213c2:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
   213c4:	2388      	movs	r3, #136	; 0x88
   213c6:	18fb      	adds	r3, r7, r3
   213c8:	681b      	ldr	r3, [r3, #0]
   213ca:	785b      	ldrb	r3, [r3, #1]
   213cc:	001a      	movs	r2, r3
   213ce:	2384      	movs	r3, #132	; 0x84
   213d0:	18fb      	adds	r3, r7, r3
   213d2:	681b      	ldr	r3, [r3, #0]
   213d4:	189b      	adds	r3, r3, r2
   213d6:	2200      	movs	r2, #0
   213d8:	709a      	strb	r2, [r3, #2]
   213da:	e081      	b.n	214e0 <m2m_wifi_connect_sc+0x430>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
   213dc:	230a      	movs	r3, #10
   213de:	18fb      	adds	r3, r7, r3
   213e0:	781b      	ldrb	r3, [r3, #0]
   213e2:	2b02      	cmp	r3, #2
   213e4:	d156      	bne.n	21494 <m2m_wifi_connect_sc+0x3e4>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
   213e6:	2382      	movs	r3, #130	; 0x82
   213e8:	18fc      	adds	r4, r7, r3
   213ea:	687b      	ldr	r3, [r7, #4]
   213ec:	0018      	movs	r0, r3
   213ee:	4b1d      	ldr	r3, [pc, #116]	; (21464 <m2m_wifi_connect_sc+0x3b4>)
   213f0:	4798      	blx	r3
   213f2:	0003      	movs	r3, r0
   213f4:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
   213f6:	2382      	movs	r3, #130	; 0x82
   213f8:	18fb      	adds	r3, r7, r3
   213fa:	881b      	ldrh	r3, [r3, #0]
   213fc:	2b00      	cmp	r3, #0
   213fe:	d004      	beq.n	2140a <m2m_wifi_connect_sc+0x35a>
   21400:	2382      	movs	r3, #130	; 0x82
   21402:	18fb      	adds	r3, r7, r3
   21404:	881b      	ldrh	r3, [r3, #0]
   21406:	2b40      	cmp	r3, #64	; 0x40
   21408:	d912      	bls.n	21430 <m2m_wifi_connect_sc+0x380>
		{
			M2M_ERR("Incorrect PSK key length\n");
   2140a:	4a20      	ldr	r2, [pc, #128]	; (2148c <m2m_wifi_connect_sc+0x3dc>)
   2140c:	4910      	ldr	r1, [pc, #64]	; (21450 <m2m_wifi_connect_sc+0x3a0>)
   2140e:	4b11      	ldr	r3, [pc, #68]	; (21454 <m2m_wifi_connect_sc+0x3a4>)
   21410:	0018      	movs	r0, r3
   21412:	4b11      	ldr	r3, [pc, #68]	; (21458 <m2m_wifi_connect_sc+0x3a8>)
   21414:	4798      	blx	r3
   21416:	4b1e      	ldr	r3, [pc, #120]	; (21490 <m2m_wifi_connect_sc+0x3e0>)
   21418:	0018      	movs	r0, r3
   2141a:	4b0f      	ldr	r3, [pc, #60]	; (21458 <m2m_wifi_connect_sc+0x3a8>)
   2141c:	4798      	blx	r3
   2141e:	4b10      	ldr	r3, [pc, #64]	; (21460 <m2m_wifi_connect_sc+0x3b0>)
   21420:	0018      	movs	r0, r3
   21422:	4b0d      	ldr	r3, [pc, #52]	; (21458 <m2m_wifi_connect_sc+0x3a8>)
   21424:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   21426:	2397      	movs	r3, #151	; 0x97
   21428:	18fb      	adds	r3, r7, r3
   2142a:	22f4      	movs	r2, #244	; 0xf4
   2142c:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   2142e:	e068      	b.n	21502 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
   21430:	238c      	movs	r3, #140	; 0x8c
   21432:	18fb      	adds	r3, r7, r3
   21434:	6818      	ldr	r0, [r3, #0]
   21436:	2382      	movs	r3, #130	; 0x82
   21438:	18fb      	adds	r3, r7, r3
   2143a:	881b      	ldrh	r3, [r3, #0]
   2143c:	3301      	adds	r3, #1
   2143e:	001a      	movs	r2, r3
   21440:	687b      	ldr	r3, [r7, #4]
   21442:	0019      	movs	r1, r3
   21444:	4b0d      	ldr	r3, [pc, #52]	; (2147c <m2m_wifi_connect_sc+0x3cc>)
   21446:	4798      	blx	r3
   21448:	e04a      	b.n	214e0 <m2m_wifi_connect_sc+0x430>
   2144a:	46c0      	nop			; (mov r8, r8)
   2144c:	0000021a 	.word	0x0000021a
   21450:	0003855c 	.word	0x0003855c
   21454:	000381a4 	.word	0x000381a4
   21458:	0001cf49 	.word	0x0001cf49
   2145c:	000383e4 	.word	0x000383e4
   21460:	000381a0 	.word	0x000381a0
   21464:	0001fd1f 	.word	0x0001fd1f
   21468:	00000226 	.word	0x00000226
   2146c:	000383f8 	.word	0x000383f8
   21470:	00038408 	.word	0x00038408
   21474:	00000239 	.word	0x00000239
   21478:	0003841c 	.word	0x0003841c
   2147c:	0001fca5 	.word	0x0001fca5
   21480:	00038428 	.word	0x00038428
   21484:	00000257 	.word	0x00000257
   21488:	00038444 	.word	0x00038444
   2148c:	00000266 	.word	0x00000266
   21490:	00038460 	.word	0x00038460
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
   21494:	230a      	movs	r3, #10
   21496:	18fb      	adds	r3, r7, r3
   21498:	781b      	ldrb	r3, [r3, #0]
   2149a:	2b04      	cmp	r3, #4
   2149c:	d108      	bne.n	214b0 <m2m_wifi_connect_sc+0x400>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
   2149e:	238c      	movs	r3, #140	; 0x8c
   214a0:	18fb      	adds	r3, r7, r3
   214a2:	681b      	ldr	r3, [r3, #0]
   214a4:	6879      	ldr	r1, [r7, #4]
   214a6:	223e      	movs	r2, #62	; 0x3e
   214a8:	0018      	movs	r0, r3
   214aa:	4b1a      	ldr	r3, [pc, #104]	; (21514 <m2m_wifi_connect_sc+0x464>)
   214ac:	4798      	blx	r3
   214ae:	e017      	b.n	214e0 <m2m_wifi_connect_sc+0x430>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
   214b0:	230a      	movs	r3, #10
   214b2:	18fb      	adds	r3, r7, r3
   214b4:	781b      	ldrb	r3, [r3, #0]
   214b6:	2b01      	cmp	r3, #1
   214b8:	d012      	beq.n	214e0 <m2m_wifi_connect_sc+0x430>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
   214ba:	4a17      	ldr	r2, [pc, #92]	; (21518 <m2m_wifi_connect_sc+0x468>)
   214bc:	4917      	ldr	r1, [pc, #92]	; (2151c <m2m_wifi_connect_sc+0x46c>)
   214be:	4b18      	ldr	r3, [pc, #96]	; (21520 <m2m_wifi_connect_sc+0x470>)
   214c0:	0018      	movs	r0, r3
   214c2:	4b18      	ldr	r3, [pc, #96]	; (21524 <m2m_wifi_connect_sc+0x474>)
   214c4:	4798      	blx	r3
   214c6:	4b18      	ldr	r3, [pc, #96]	; (21528 <m2m_wifi_connect_sc+0x478>)
   214c8:	0018      	movs	r0, r3
   214ca:	4b16      	ldr	r3, [pc, #88]	; (21524 <m2m_wifi_connect_sc+0x474>)
   214cc:	4798      	blx	r3
   214ce:	4b17      	ldr	r3, [pc, #92]	; (2152c <m2m_wifi_connect_sc+0x47c>)
   214d0:	0018      	movs	r0, r3
   214d2:	4b14      	ldr	r3, [pc, #80]	; (21524 <m2m_wifi_connect_sc+0x474>)
   214d4:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   214d6:	2397      	movs	r3, #151	; 0x97
   214d8:	18fb      	adds	r3, r7, r3
   214da:	22f4      	movs	r2, #244	; 0xf4
   214dc:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   214de:	e010      	b.n	21502 <m2m_wifi_connect_sc+0x452>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
   214e0:	2397      	movs	r3, #151	; 0x97
   214e2:	18fc      	adds	r4, r7, r3
   214e4:	2314      	movs	r3, #20
   214e6:	18fa      	adds	r2, r7, r3
   214e8:	2300      	movs	r3, #0
   214ea:	9302      	str	r3, [sp, #8]
   214ec:	2300      	movs	r3, #0
   214ee:	9301      	str	r3, [sp, #4]
   214f0:	2300      	movs	r3, #0
   214f2:	9300      	str	r3, [sp, #0]
   214f4:	236c      	movs	r3, #108	; 0x6c
   214f6:	2128      	movs	r1, #40	; 0x28
   214f8:	2001      	movs	r0, #1
   214fa:	4d0d      	ldr	r5, [pc, #52]	; (21530 <m2m_wifi_connect_sc+0x480>)
   214fc:	47a8      	blx	r5
   214fe:	0003      	movs	r3, r0
   21500:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
   21502:	2397      	movs	r3, #151	; 0x97
   21504:	18fb      	adds	r3, r7, r3
   21506:	781b      	ldrb	r3, [r3, #0]
   21508:	b25b      	sxtb	r3, r3
}
   2150a:	0018      	movs	r0, r3
   2150c:	46bd      	mov	sp, r7
   2150e:	b026      	add	sp, #152	; 0x98
   21510:	bdb0      	pop	{r4, r5, r7, pc}
   21512:	46c0      	nop			; (mov r8, r8)
   21514:	0001fca5 	.word	0x0001fca5
   21518:	00000276 	.word	0x00000276
   2151c:	0003855c 	.word	0x0003855c
   21520:	000381a4 	.word	0x000381a4
   21524:	0001cf49 	.word	0x0001cf49
   21528:	0003847c 	.word	0x0003847c
   2152c:	000381a0 	.word	0x000381a0
   21530:	0001ff41 	.word	0x0001ff41

00021534 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
   21534:	b580      	push	{r7, lr}
   21536:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
   21538:	2300      	movs	r3, #0
}
   2153a:	0018      	movs	r0, r3
   2153c:	46bd      	mov	sp, r7
   2153e:	bd80      	pop	{r7, pc}

00021540 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
   21540:	b590      	push	{r4, r7, lr}
   21542:	b087      	sub	sp, #28
   21544:	af00      	add	r7, sp, #0
   21546:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   21548:	2317      	movs	r3, #23
   2154a:	18fb      	adds	r3, r7, r3
   2154c:	2200      	movs	r2, #0
   2154e:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
   21550:	687b      	ldr	r3, [r7, #4]
   21552:	613b      	str	r3, [r7, #16]
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
   21554:	693b      	ldr	r3, [r7, #16]
   21556:	2280      	movs	r2, #128	; 0x80
   21558:	0052      	lsls	r2, r2, #1
   2155a:	4313      	orrs	r3, r2
   2155c:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
   2155e:	693a      	ldr	r2, [r7, #16]
   21560:	23a5      	movs	r3, #165	; 0xa5
   21562:	015b      	lsls	r3, r3, #5
   21564:	0011      	movs	r1, r2
   21566:	0018      	movs	r0, r3
   21568:	4b12      	ldr	r3, [pc, #72]	; (215b4 <chip_apply_conf+0x74>)
   2156a:	4798      	blx	r3
		if(val32 != 0) {		
   2156c:	693b      	ldr	r3, [r7, #16]
   2156e:	2b00      	cmp	r3, #0
   21570:	d018      	beq.n	215a4 <chip_apply_conf+0x64>
			uint32 reg = 0;
   21572:	2300      	movs	r3, #0
   21574:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
   21576:	2317      	movs	r3, #23
   21578:	18fc      	adds	r4, r7, r3
   2157a:	230c      	movs	r3, #12
   2157c:	18fa      	adds	r2, r7, r3
   2157e:	23a5      	movs	r3, #165	; 0xa5
   21580:	015b      	lsls	r3, r3, #5
   21582:	0011      	movs	r1, r2
   21584:	0018      	movs	r0, r3
   21586:	4b0c      	ldr	r3, [pc, #48]	; (215b8 <chip_apply_conf+0x78>)
   21588:	4798      	blx	r3
   2158a:	0003      	movs	r3, r0
   2158c:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   2158e:	2317      	movs	r3, #23
   21590:	18fb      	adds	r3, r7, r3
   21592:	781b      	ldrb	r3, [r3, #0]
   21594:	b25b      	sxtb	r3, r3
   21596:	2b00      	cmp	r3, #0
   21598:	d1e1      	bne.n	2155e <chip_apply_conf+0x1e>
				if(reg == val32)
   2159a:	68fa      	ldr	r2, [r7, #12]
   2159c:	693b      	ldr	r3, [r7, #16]
   2159e:	429a      	cmp	r2, r3
   215a0:	d002      	beq.n	215a8 <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
   215a2:	e7dc      	b.n	2155e <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
   215a4:	46c0      	nop			; (mov r8, r8)
   215a6:	e000      	b.n	215aa <chip_apply_conf+0x6a>
					break;
   215a8:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
   215aa:	2300      	movs	r3, #0
}
   215ac:	0018      	movs	r0, r3
   215ae:	46bd      	mov	sp, r7
   215b0:	b007      	add	sp, #28
   215b2:	bd90      	pop	{r4, r7, pc}
   215b4:	00021d95 	.word	0x00021d95
   215b8:	00021d71 	.word	0x00021d71

000215bc <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
   215bc:	b590      	push	{r4, r7, lr}
   215be:	b083      	sub	sp, #12
   215c0:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   215c2:	2300      	movs	r3, #0
   215c4:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
   215c6:	1dfb      	adds	r3, r7, #7
   215c8:	2200      	movs	r2, #0
   215ca:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
   215cc:	1dfc      	adds	r4, r7, #7
   215ce:	003b      	movs	r3, r7
   215d0:	4a24      	ldr	r2, [pc, #144]	; (21664 <enable_interrupts+0xa8>)
   215d2:	0019      	movs	r1, r3
   215d4:	0010      	movs	r0, r2
   215d6:	4b24      	ldr	r3, [pc, #144]	; (21668 <enable_interrupts+0xac>)
   215d8:	4798      	blx	r3
   215da:	0003      	movs	r3, r0
   215dc:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   215de:	1dfb      	adds	r3, r7, #7
   215e0:	781b      	ldrb	r3, [r3, #0]
   215e2:	b25b      	sxtb	r3, r3
   215e4:	2b00      	cmp	r3, #0
   215e6:	d131      	bne.n	2164c <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
   215e8:	683b      	ldr	r3, [r7, #0]
   215ea:	2280      	movs	r2, #128	; 0x80
   215ec:	0052      	lsls	r2, r2, #1
   215ee:	4313      	orrs	r3, r2
   215f0:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
   215f2:	683b      	ldr	r3, [r7, #0]
   215f4:	1dfc      	adds	r4, r7, #7
   215f6:	4a1b      	ldr	r2, [pc, #108]	; (21664 <enable_interrupts+0xa8>)
   215f8:	0019      	movs	r1, r3
   215fa:	0010      	movs	r0, r2
   215fc:	4b1b      	ldr	r3, [pc, #108]	; (2166c <enable_interrupts+0xb0>)
   215fe:	4798      	blx	r3
   21600:	0003      	movs	r3, r0
   21602:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   21604:	1dfb      	adds	r3, r7, #7
   21606:	781b      	ldrb	r3, [r3, #0]
   21608:	b25b      	sxtb	r3, r3
   2160a:	2b00      	cmp	r3, #0
   2160c:	d120      	bne.n	21650 <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
   2160e:	1dfc      	adds	r4, r7, #7
   21610:	003a      	movs	r2, r7
   21612:	23d0      	movs	r3, #208	; 0xd0
   21614:	015b      	lsls	r3, r3, #5
   21616:	0011      	movs	r1, r2
   21618:	0018      	movs	r0, r3
   2161a:	4b13      	ldr	r3, [pc, #76]	; (21668 <enable_interrupts+0xac>)
   2161c:	4798      	blx	r3
   2161e:	0003      	movs	r3, r0
   21620:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   21622:	1dfb      	adds	r3, r7, #7
   21624:	781b      	ldrb	r3, [r3, #0]
   21626:	b25b      	sxtb	r3, r3
   21628:	2b00      	cmp	r3, #0
   2162a:	d113      	bne.n	21654 <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
   2162c:	683b      	ldr	r3, [r7, #0]
   2162e:	2280      	movs	r2, #128	; 0x80
   21630:	0252      	lsls	r2, r2, #9
   21632:	4313      	orrs	r3, r2
   21634:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
   21636:	683a      	ldr	r2, [r7, #0]
   21638:	1dfc      	adds	r4, r7, #7
   2163a:	23d0      	movs	r3, #208	; 0xd0
   2163c:	015b      	lsls	r3, r3, #5
   2163e:	0011      	movs	r1, r2
   21640:	0018      	movs	r0, r3
   21642:	4b0a      	ldr	r3, [pc, #40]	; (2166c <enable_interrupts+0xb0>)
   21644:	4798      	blx	r3
   21646:	0003      	movs	r3, r0
   21648:	7023      	strb	r3, [r4, #0]
   2164a:	e004      	b.n	21656 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   2164c:	46c0      	nop			; (mov r8, r8)
   2164e:	e002      	b.n	21656 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   21650:	46c0      	nop			; (mov r8, r8)
   21652:	e000      	b.n	21656 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   21654:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
   21656:	1dfb      	adds	r3, r7, #7
   21658:	781b      	ldrb	r3, [r3, #0]
   2165a:	b25b      	sxtb	r3, r3
}
   2165c:	0018      	movs	r0, r3
   2165e:	46bd      	mov	sp, r7
   21660:	b003      	add	sp, #12
   21662:	bd90      	pop	{r4, r7, pc}
   21664:	00001408 	.word	0x00001408
   21668:	00021d71 	.word	0x00021d71
   2166c:	00021d95 	.word	0x00021d95

00021670 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
   21670:	b580      	push	{r7, lr}
   21672:	b082      	sub	sp, #8
   21674:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
   21676:	4b32      	ldr	r3, [pc, #200]	; (21740 <nmi_get_chipid+0xd0>)
   21678:	681b      	ldr	r3, [r3, #0]
   2167a:	2b00      	cmp	r3, #0
   2167c:	d159      	bne.n	21732 <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
   2167e:	4a30      	ldr	r2, [pc, #192]	; (21740 <nmi_get_chipid+0xd0>)
   21680:	2380      	movs	r3, #128	; 0x80
   21682:	015b      	lsls	r3, r3, #5
   21684:	0011      	movs	r1, r2
   21686:	0018      	movs	r0, r3
   21688:	4b2e      	ldr	r3, [pc, #184]	; (21744 <nmi_get_chipid+0xd4>)
   2168a:	4798      	blx	r3
   2168c:	1e03      	subs	r3, r0, #0
   2168e:	d004      	beq.n	2169a <nmi_get_chipid+0x2a>
			chipid = 0;
   21690:	4b2b      	ldr	r3, [pc, #172]	; (21740 <nmi_get_chipid+0xd0>)
   21692:	2200      	movs	r2, #0
   21694:	601a      	str	r2, [r3, #0]
			return 0;
   21696:	2300      	movs	r3, #0
   21698:	e04d      	b.n	21736 <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
   2169a:	1d3b      	adds	r3, r7, #4
   2169c:	4a2a      	ldr	r2, [pc, #168]	; (21748 <nmi_get_chipid+0xd8>)
   2169e:	0019      	movs	r1, r3
   216a0:	0010      	movs	r0, r2
   216a2:	4b28      	ldr	r3, [pc, #160]	; (21744 <nmi_get_chipid+0xd4>)
   216a4:	4798      	blx	r3
   216a6:	1e03      	subs	r3, r0, #0
   216a8:	d004      	beq.n	216b4 <nmi_get_chipid+0x44>
			chipid = 0;
   216aa:	4b25      	ldr	r3, [pc, #148]	; (21740 <nmi_get_chipid+0xd0>)
   216ac:	2200      	movs	r2, #0
   216ae:	601a      	str	r2, [r3, #0]
			return 0;
   216b0:	2300      	movs	r3, #0
   216b2:	e040      	b.n	21736 <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
   216b4:	4b22      	ldr	r3, [pc, #136]	; (21740 <nmi_get_chipid+0xd0>)
   216b6:	681b      	ldr	r3, [r3, #0]
   216b8:	4a24      	ldr	r2, [pc, #144]	; (2174c <nmi_get_chipid+0xdc>)
   216ba:	4293      	cmp	r3, r2
   216bc:	d106      	bne.n	216cc <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
   216be:	687b      	ldr	r3, [r7, #4]
   216c0:	2b01      	cmp	r3, #1
   216c2:	d029      	beq.n	21718 <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
   216c4:	4b1e      	ldr	r3, [pc, #120]	; (21740 <nmi_get_chipid+0xd0>)
   216c6:	4a22      	ldr	r2, [pc, #136]	; (21750 <nmi_get_chipid+0xe0>)
   216c8:	601a      	str	r2, [r3, #0]
   216ca:	e025      	b.n	21718 <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
   216cc:	4b1c      	ldr	r3, [pc, #112]	; (21740 <nmi_get_chipid+0xd0>)
   216ce:	681b      	ldr	r3, [r3, #0]
   216d0:	4a20      	ldr	r2, [pc, #128]	; (21754 <nmi_get_chipid+0xe4>)
   216d2:	4293      	cmp	r3, r2
   216d4:	d10d      	bne.n	216f2 <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
   216d6:	687b      	ldr	r3, [r7, #4]
   216d8:	2b03      	cmp	r3, #3
   216da:	d01d      	beq.n	21718 <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
   216dc:	687b      	ldr	r3, [r7, #4]
   216de:	2b04      	cmp	r3, #4
   216e0:	d103      	bne.n	216ea <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
   216e2:	4b17      	ldr	r3, [pc, #92]	; (21740 <nmi_get_chipid+0xd0>)
   216e4:	4a1c      	ldr	r2, [pc, #112]	; (21758 <nmi_get_chipid+0xe8>)
   216e6:	601a      	str	r2, [r3, #0]
   216e8:	e016      	b.n	21718 <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
   216ea:	4b15      	ldr	r3, [pc, #84]	; (21740 <nmi_get_chipid+0xd0>)
   216ec:	4a1b      	ldr	r2, [pc, #108]	; (2175c <nmi_get_chipid+0xec>)
   216ee:	601a      	str	r2, [r3, #0]
   216f0:	e012      	b.n	21718 <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
   216f2:	4b13      	ldr	r3, [pc, #76]	; (21740 <nmi_get_chipid+0xd0>)
   216f4:	681b      	ldr	r3, [r3, #0]
   216f6:	4a1a      	ldr	r2, [pc, #104]	; (21760 <nmi_get_chipid+0xf0>)
   216f8:	4293      	cmp	r3, r2
   216fa:	d10d      	bne.n	21718 <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
   216fc:	4a10      	ldr	r2, [pc, #64]	; (21740 <nmi_get_chipid+0xd0>)
   216fe:	23ec      	movs	r3, #236	; 0xec
   21700:	039b      	lsls	r3, r3, #14
   21702:	0011      	movs	r1, r2
   21704:	0018      	movs	r0, r3
   21706:	4b0f      	ldr	r3, [pc, #60]	; (21744 <nmi_get_chipid+0xd4>)
   21708:	4798      	blx	r3
   2170a:	1e03      	subs	r3, r0, #0
   2170c:	d004      	beq.n	21718 <nmi_get_chipid+0xa8>
			chipid = 0;
   2170e:	4b0c      	ldr	r3, [pc, #48]	; (21740 <nmi_get_chipid+0xd0>)
   21710:	2200      	movs	r2, #0
   21712:	601a      	str	r2, [r3, #0]
			return 0;
   21714:	2300      	movs	r3, #0
   21716:	e00e      	b.n	21736 <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
   21718:	4b09      	ldr	r3, [pc, #36]	; (21740 <nmi_get_chipid+0xd0>)
   2171a:	681b      	ldr	r3, [r3, #0]
   2171c:	4a11      	ldr	r2, [pc, #68]	; (21764 <nmi_get_chipid+0xf4>)
   2171e:	401a      	ands	r2, r3
   21720:	4b07      	ldr	r3, [pc, #28]	; (21740 <nmi_get_chipid+0xd0>)
   21722:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
   21724:	4b06      	ldr	r3, [pc, #24]	; (21740 <nmi_get_chipid+0xd0>)
   21726:	681b      	ldr	r3, [r3, #0]
   21728:	22a0      	movs	r2, #160	; 0xa0
   2172a:	02d2      	lsls	r2, r2, #11
   2172c:	431a      	orrs	r2, r3
   2172e:	4b04      	ldr	r3, [pc, #16]	; (21740 <nmi_get_chipid+0xd0>)
   21730:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
   21732:	4b03      	ldr	r3, [pc, #12]	; (21740 <nmi_get_chipid+0xd0>)
   21734:	681b      	ldr	r3, [r3, #0]
}
   21736:	0018      	movs	r0, r3
   21738:	46bd      	mov	sp, r7
   2173a:	b002      	add	sp, #8
   2173c:	bd80      	pop	{r7, pc}
   2173e:	46c0      	nop			; (mov r8, r8)
   21740:	20004278 	.word	0x20004278
   21744:	00021d71 	.word	0x00021d71
   21748:	000013f4 	.word	0x000013f4
   2174c:	001002a0 	.word	0x001002a0
   21750:	001002a1 	.word	0x001002a1
   21754:	001002b0 	.word	0x001002b0
   21758:	001002b1 	.word	0x001002b1
   2175c:	001002b2 	.word	0x001002b2
   21760:	001000f0 	.word	0x001000f0
   21764:	fff0ffff 	.word	0xfff0ffff

00021768 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
   21768:	b590      	push	{r4, r7, lr}
   2176a:	b083      	sub	sp, #12
   2176c:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   2176e:	1dfb      	adds	r3, r7, #7
   21770:	2200      	movs	r2, #0
   21772:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   21774:	1dfc      	adds	r4, r7, #7
   21776:	003b      	movs	r3, r7
   21778:	0019      	movs	r1, r3
   2177a:	2010      	movs	r0, #16
   2177c:	4b2e      	ldr	r3, [pc, #184]	; (21838 <chip_sleep+0xd0>)
   2177e:	4798      	blx	r3
   21780:	0003      	movs	r3, r0
   21782:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
   21784:	1dfb      	adds	r3, r7, #7
   21786:	781b      	ldrb	r3, [r3, #0]
   21788:	b25b      	sxtb	r3, r3
   2178a:	2b00      	cmp	r3, #0
   2178c:	d145      	bne.n	2181a <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
   2178e:	683b      	ldr	r3, [r7, #0]
   21790:	2201      	movs	r2, #1
   21792:	4013      	ands	r3, r2
   21794:	d000      	beq.n	21798 <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   21796:	e7ed      	b.n	21774 <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
   21798:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   2179a:	1dfc      	adds	r4, r7, #7
   2179c:	003b      	movs	r3, r7
   2179e:	0019      	movs	r1, r3
   217a0:	2001      	movs	r0, #1
   217a2:	4b25      	ldr	r3, [pc, #148]	; (21838 <chip_sleep+0xd0>)
   217a4:	4798      	blx	r3
   217a6:	0003      	movs	r3, r0
   217a8:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   217aa:	1dfb      	adds	r3, r7, #7
   217ac:	781b      	ldrb	r3, [r3, #0]
   217ae:	b25b      	sxtb	r3, r3
   217b0:	2b00      	cmp	r3, #0
   217b2:	d134      	bne.n	2181e <chip_sleep+0xb6>
	if(reg & NBIT1)
   217b4:	683b      	ldr	r3, [r7, #0]
   217b6:	2202      	movs	r2, #2
   217b8:	4013      	ands	r3, r2
   217ba:	d010      	beq.n	217de <chip_sleep+0x76>
	{
		reg &=~NBIT1;
   217bc:	683b      	ldr	r3, [r7, #0]
   217be:	2202      	movs	r2, #2
   217c0:	4393      	bics	r3, r2
   217c2:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
   217c4:	683b      	ldr	r3, [r7, #0]
   217c6:	1dfc      	adds	r4, r7, #7
   217c8:	0019      	movs	r1, r3
   217ca:	2001      	movs	r0, #1
   217cc:	4b1b      	ldr	r3, [pc, #108]	; (2183c <chip_sleep+0xd4>)
   217ce:	4798      	blx	r3
   217d0:	0003      	movs	r3, r0
   217d2:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
   217d4:	1dfb      	adds	r3, r7, #7
   217d6:	781b      	ldrb	r3, [r3, #0]
   217d8:	b25b      	sxtb	r3, r3
   217da:	2b00      	cmp	r3, #0
   217dc:	d121      	bne.n	21822 <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   217de:	1dfc      	adds	r4, r7, #7
   217e0:	003b      	movs	r3, r7
   217e2:	0019      	movs	r1, r3
   217e4:	200b      	movs	r0, #11
   217e6:	4b14      	ldr	r3, [pc, #80]	; (21838 <chip_sleep+0xd0>)
   217e8:	4798      	blx	r3
   217ea:	0003      	movs	r3, r0
   217ec:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   217ee:	1dfb      	adds	r3, r7, #7
   217f0:	781b      	ldrb	r3, [r3, #0]
   217f2:	b25b      	sxtb	r3, r3
   217f4:	2b00      	cmp	r3, #0
   217f6:	d116      	bne.n	21826 <chip_sleep+0xbe>
	if(reg & NBIT0)
   217f8:	683b      	ldr	r3, [r7, #0]
   217fa:	2201      	movs	r2, #1
   217fc:	4013      	ands	r3, r2
   217fe:	d013      	beq.n	21828 <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
   21800:	683b      	ldr	r3, [r7, #0]
   21802:	2201      	movs	r2, #1
   21804:	4393      	bics	r3, r2
   21806:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
   21808:	683b      	ldr	r3, [r7, #0]
   2180a:	1dfc      	adds	r4, r7, #7
   2180c:	0019      	movs	r1, r3
   2180e:	200b      	movs	r0, #11
   21810:	4b0a      	ldr	r3, [pc, #40]	; (2183c <chip_sleep+0xd4>)
   21812:	4798      	blx	r3
   21814:	0003      	movs	r3, r0
   21816:	7023      	strb	r3, [r4, #0]
   21818:	e006      	b.n	21828 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
   2181a:	46c0      	nop			; (mov r8, r8)
   2181c:	e004      	b.n	21828 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   2181e:	46c0      	nop			; (mov r8, r8)
   21820:	e002      	b.n	21828 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
   21822:	46c0      	nop			; (mov r8, r8)
   21824:	e000      	b.n	21828 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   21826:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
   21828:	1dfb      	adds	r3, r7, #7
   2182a:	781b      	ldrb	r3, [r3, #0]
   2182c:	b25b      	sxtb	r3, r3
}
   2182e:	0018      	movs	r0, r3
   21830:	46bd      	mov	sp, r7
   21832:	b003      	add	sp, #12
   21834:	bd90      	pop	{r4, r7, pc}
   21836:	46c0      	nop			; (mov r8, r8)
   21838:	00021d71 	.word	0x00021d71
   2183c:	00021d95 	.word	0x00021d95

00021840 <chip_wake>:
sint8 chip_wake(void)
{
   21840:	b590      	push	{r4, r7, lr}
   21842:	b085      	sub	sp, #20
   21844:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   21846:	230f      	movs	r3, #15
   21848:	18fb      	adds	r3, r7, r3
   2184a:	2200      	movs	r2, #0
   2184c:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
   2184e:	2300      	movs	r3, #0
   21850:	607b      	str	r3, [r7, #4]
   21852:	2300      	movs	r3, #0
   21854:	603b      	str	r3, [r7, #0]
   21856:	2300      	movs	r3, #0
   21858:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   2185a:	230f      	movs	r3, #15
   2185c:	18fc      	adds	r4, r7, r3
   2185e:	1d3b      	adds	r3, r7, #4
   21860:	0019      	movs	r1, r3
   21862:	200b      	movs	r0, #11
   21864:	4b4e      	ldr	r3, [pc, #312]	; (219a0 <chip_wake+0x160>)
   21866:	4798      	blx	r3
   21868:	0003      	movs	r3, r0
   2186a:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   2186c:	230f      	movs	r3, #15
   2186e:	18fb      	adds	r3, r7, r3
   21870:	781b      	ldrb	r3, [r3, #0]
   21872:	b25b      	sxtb	r3, r3
   21874:	2b00      	cmp	r3, #0
   21876:	d000      	beq.n	2187a <chip_wake+0x3a>
   21878:	e082      	b.n	21980 <chip_wake+0x140>
	
	if(!(reg & NBIT0))
   2187a:	687b      	ldr	r3, [r7, #4]
   2187c:	2201      	movs	r2, #1
   2187e:	4013      	ands	r3, r2
   21880:	d111      	bne.n	218a6 <chip_wake+0x66>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
   21882:	687b      	ldr	r3, [r7, #4]
   21884:	2201      	movs	r2, #1
   21886:	4313      	orrs	r3, r2
   21888:	220f      	movs	r2, #15
   2188a:	18bc      	adds	r4, r7, r2
   2188c:	0019      	movs	r1, r3
   2188e:	200b      	movs	r0, #11
   21890:	4b44      	ldr	r3, [pc, #272]	; (219a4 <chip_wake+0x164>)
   21892:	4798      	blx	r3
   21894:	0003      	movs	r3, r0
   21896:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   21898:	230f      	movs	r3, #15
   2189a:	18fb      	adds	r3, r7, r3
   2189c:	781b      	ldrb	r3, [r3, #0]
   2189e:	b25b      	sxtb	r3, r3
   218a0:	2b00      	cmp	r3, #0
   218a2:	d000      	beq.n	218a6 <chip_wake+0x66>
   218a4:	e06e      	b.n	21984 <chip_wake+0x144>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   218a6:	230f      	movs	r3, #15
   218a8:	18fc      	adds	r4, r7, r3
   218aa:	1d3b      	adds	r3, r7, #4
   218ac:	0019      	movs	r1, r3
   218ae:	2001      	movs	r0, #1
   218b0:	4b3b      	ldr	r3, [pc, #236]	; (219a0 <chip_wake+0x160>)
   218b2:	4798      	blx	r3
   218b4:	0003      	movs	r3, r0
   218b6:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   218b8:	230f      	movs	r3, #15
   218ba:	18fb      	adds	r3, r7, r3
   218bc:	781b      	ldrb	r3, [r3, #0]
   218be:	b25b      	sxtb	r3, r3
   218c0:	2b00      	cmp	r3, #0
   218c2:	d161      	bne.n	21988 <chip_wake+0x148>
	/* Set bit 1 */
	if(!(reg & NBIT1))
   218c4:	687b      	ldr	r3, [r7, #4]
   218c6:	2202      	movs	r2, #2
   218c8:	4013      	ands	r3, r2
   218ca:	d110      	bne.n	218ee <chip_wake+0xae>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
   218cc:	687b      	ldr	r3, [r7, #4]
   218ce:	2202      	movs	r2, #2
   218d0:	4313      	orrs	r3, r2
   218d2:	220f      	movs	r2, #15
   218d4:	18bc      	adds	r4, r7, r2
   218d6:	0019      	movs	r1, r3
   218d8:	2001      	movs	r0, #1
   218da:	4b32      	ldr	r3, [pc, #200]	; (219a4 <chip_wake+0x164>)
   218dc:	4798      	blx	r3
   218de:	0003      	movs	r3, r0
   218e0:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   218e2:	230f      	movs	r3, #15
   218e4:	18fb      	adds	r3, r7, r3
   218e6:	781b      	ldrb	r3, [r3, #0]
   218e8:	b25b      	sxtb	r3, r3
   218ea:	2b00      	cmp	r3, #0
   218ec:	d14e      	bne.n	2198c <chip_wake+0x14c>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
   218ee:	230f      	movs	r3, #15
   218f0:	18fc      	adds	r4, r7, r3
   218f2:	003b      	movs	r3, r7
   218f4:	0019      	movs	r1, r3
   218f6:	200f      	movs	r0, #15
   218f8:	4b29      	ldr	r3, [pc, #164]	; (219a0 <chip_wake+0x160>)
   218fa:	4798      	blx	r3
   218fc:	0003      	movs	r3, r0
   218fe:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
   21900:	230f      	movs	r3, #15
   21902:	18fb      	adds	r3, r7, r3
   21904:	781b      	ldrb	r3, [r3, #0]
   21906:	b25b      	sxtb	r3, r3
   21908:	2b00      	cmp	r3, #0
   2190a:	d014      	beq.n	21936 <chip_wake+0xf6>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
   2190c:	23a8      	movs	r3, #168	; 0xa8
   2190e:	005a      	lsls	r2, r3, #1
   21910:	4925      	ldr	r1, [pc, #148]	; (219a8 <chip_wake+0x168>)
   21912:	4b26      	ldr	r3, [pc, #152]	; (219ac <chip_wake+0x16c>)
   21914:	0018      	movs	r0, r3
   21916:	4b26      	ldr	r3, [pc, #152]	; (219b0 <chip_wake+0x170>)
   21918:	4798      	blx	r3
   2191a:	230f      	movs	r3, #15
   2191c:	18fb      	adds	r3, r7, r3
   2191e:	2100      	movs	r1, #0
   21920:	5659      	ldrsb	r1, [r3, r1]
   21922:	683a      	ldr	r2, [r7, #0]
   21924:	4b23      	ldr	r3, [pc, #140]	; (219b4 <chip_wake+0x174>)
   21926:	0018      	movs	r0, r3
   21928:	4b21      	ldr	r3, [pc, #132]	; (219b0 <chip_wake+0x170>)
   2192a:	4798      	blx	r3
   2192c:	4b22      	ldr	r3, [pc, #136]	; (219b8 <chip_wake+0x178>)
   2192e:	0018      	movs	r0, r3
   21930:	4b1f      	ldr	r3, [pc, #124]	; (219b0 <chip_wake+0x170>)
   21932:	4798      	blx	r3
			goto _WAKE_EXIT;
   21934:	e02b      	b.n	2198e <chip_wake+0x14e>
		}
		if(clk_status_reg & NBIT2) {
   21936:	683b      	ldr	r3, [r7, #0]
   21938:	2204      	movs	r2, #4
   2193a:	4013      	ands	r3, r2
   2193c:	d11c      	bne.n	21978 <chip_wake+0x138>
			break;
		}
		nm_bsp_sleep(2);
   2193e:	2002      	movs	r0, #2
   21940:	4b1e      	ldr	r3, [pc, #120]	; (219bc <chip_wake+0x17c>)
   21942:	4798      	blx	r3
		trials++;
   21944:	68bb      	ldr	r3, [r7, #8]
   21946:	3301      	adds	r3, #1
   21948:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
   2194a:	68bb      	ldr	r3, [r7, #8]
   2194c:	2b04      	cmp	r3, #4
   2194e:	d9ce      	bls.n	218ee <chip_wake+0xae>
		{
			M2M_ERR("Failed to wakup the chip\n");
   21950:	23ad      	movs	r3, #173	; 0xad
   21952:	005a      	lsls	r2, r3, #1
   21954:	4914      	ldr	r1, [pc, #80]	; (219a8 <chip_wake+0x168>)
   21956:	4b15      	ldr	r3, [pc, #84]	; (219ac <chip_wake+0x16c>)
   21958:	0018      	movs	r0, r3
   2195a:	4b15      	ldr	r3, [pc, #84]	; (219b0 <chip_wake+0x170>)
   2195c:	4798      	blx	r3
   2195e:	4b18      	ldr	r3, [pc, #96]	; (219c0 <chip_wake+0x180>)
   21960:	0018      	movs	r0, r3
   21962:	4b13      	ldr	r3, [pc, #76]	; (219b0 <chip_wake+0x170>)
   21964:	4798      	blx	r3
   21966:	4b14      	ldr	r3, [pc, #80]	; (219b8 <chip_wake+0x178>)
   21968:	0018      	movs	r0, r3
   2196a:	4b11      	ldr	r3, [pc, #68]	; (219b0 <chip_wake+0x170>)
   2196c:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
   2196e:	230f      	movs	r3, #15
   21970:	18fb      	adds	r3, r7, r3
   21972:	22fc      	movs	r2, #252	; 0xfc
   21974:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
   21976:	e00a      	b.n	2198e <chip_wake+0x14e>
			break;
   21978:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
   2197a:	4b12      	ldr	r3, [pc, #72]	; (219c4 <chip_wake+0x184>)
   2197c:	4798      	blx	r3
   2197e:	e006      	b.n	2198e <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   21980:	46c0      	nop			; (mov r8, r8)
   21982:	e004      	b.n	2198e <chip_wake+0x14e>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   21984:	46c0      	nop			; (mov r8, r8)
   21986:	e002      	b.n	2198e <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   21988:	46c0      	nop			; (mov r8, r8)
   2198a:	e000      	b.n	2198e <chip_wake+0x14e>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   2198c:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
   2198e:	230f      	movs	r3, #15
   21990:	18fb      	adds	r3, r7, r3
   21992:	781b      	ldrb	r3, [r3, #0]
   21994:	b25b      	sxtb	r3, r3
}
   21996:	0018      	movs	r0, r3
   21998:	46bd      	mov	sp, r7
   2199a:	b005      	add	sp, #20
   2199c:	bd90      	pop	{r4, r7, pc}
   2199e:	46c0      	nop			; (mov r8, r8)
   219a0:	00021d71 	.word	0x00021d71
   219a4:	00021d95 	.word	0x00021d95
   219a8:	000385fc 	.word	0x000385fc
   219ac:	00038570 	.word	0x00038570
   219b0:	0001cf49 	.word	0x0001cf49
   219b4:	00038584 	.word	0x00038584
   219b8:	0003859c 	.word	0x0003859c
   219bc:	0001f401 	.word	0x0001f401
   219c0:	000385a0 	.word	0x000385a0
   219c4:	00021d31 	.word	0x00021d31

000219c8 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
   219c8:	b580      	push	{r7, lr}
   219ca:	b088      	sub	sp, #32
   219cc:	af00      	add	r7, sp, #0
   219ce:	0002      	movs	r2, r0
   219d0:	1dfb      	adds	r3, r7, #7
   219d2:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   219d4:	2313      	movs	r3, #19
   219d6:	18fb      	adds	r3, r7, r3
   219d8:	2200      	movs	r2, #0
   219da:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   219dc:	2300      	movs	r3, #0
   219de:	61fb      	str	r3, [r7, #28]
   219e0:	2300      	movs	r3, #0
   219e2:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
   219e4:	2300      	movs	r3, #0
   219e6:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
   219e8:	4b4a      	ldr	r3, [pc, #296]	; (21b14 <wait_for_bootrom+0x14c>)
   219ea:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_MIN_REQ_DRV_VERSION_MAJOR_NO, M2M_MIN_REQ_DRV_VERSION_MINOR_NO,\
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
   219ec:	2300      	movs	r3, #0
   219ee:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   219f0:	4b49      	ldr	r3, [pc, #292]	; (21b18 <wait_for_bootrom+0x150>)
   219f2:	0018      	movs	r0, r3
   219f4:	4b49      	ldr	r3, [pc, #292]	; (21b1c <wait_for_bootrom+0x154>)
   219f6:	4798      	blx	r3
   219f8:	0003      	movs	r3, r0
   219fa:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
   219fc:	69fb      	ldr	r3, [r7, #28]
   219fe:	2b00      	cmp	r3, #0
   21a00:	db03      	blt.n	21a0a <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
   21a02:	2001      	movs	r0, #1
   21a04:	4b46      	ldr	r3, [pc, #280]	; (21b20 <wait_for_bootrom+0x158>)
   21a06:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   21a08:	e7f2      	b.n	219f0 <wait_for_bootrom+0x28>
			break;
   21a0a:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
   21a0c:	4b45      	ldr	r3, [pc, #276]	; (21b24 <wait_for_bootrom+0x15c>)
   21a0e:	0018      	movs	r0, r3
   21a10:	4b42      	ldr	r3, [pc, #264]	; (21b1c <wait_for_bootrom+0x154>)
   21a12:	4798      	blx	r3
   21a14:	0003      	movs	r3, r0
   21a16:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
   21a18:	69fb      	ldr	r3, [r7, #28]
   21a1a:	2201      	movs	r2, #1
   21a1c:	4013      	ands	r3, r2
   21a1e:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
   21a20:	69fb      	ldr	r3, [r7, #28]
   21a22:	2b00      	cmp	r3, #0
   21a24:	d112      	bne.n	21a4c <wait_for_bootrom+0x84>
	{
		reg = 0;
   21a26:	2300      	movs	r3, #0
   21a28:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
   21a2a:	e00b      	b.n	21a44 <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
   21a2c:	2001      	movs	r0, #1
   21a2e:	4b3c      	ldr	r3, [pc, #240]	; (21b20 <wait_for_bootrom+0x158>)
   21a30:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
   21a32:	4b3d      	ldr	r3, [pc, #244]	; (21b28 <wait_for_bootrom+0x160>)
   21a34:	0018      	movs	r0, r3
   21a36:	4b39      	ldr	r3, [pc, #228]	; (21b1c <wait_for_bootrom+0x154>)
   21a38:	4798      	blx	r3
   21a3a:	0003      	movs	r3, r0
   21a3c:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
   21a3e:	69bb      	ldr	r3, [r7, #24]
   21a40:	3301      	adds	r3, #1
   21a42:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
   21a44:	69fb      	ldr	r3, [r7, #28]
   21a46:	4a39      	ldr	r2, [pc, #228]	; (21b2c <wait_for_bootrom+0x164>)
   21a48:	4293      	cmp	r3, r2
   21a4a:	d1ef      	bne.n	21a2c <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
   21a4c:	1dfb      	adds	r3, r7, #7
   21a4e:	781b      	ldrb	r3, [r3, #0]
   21a50:	2b02      	cmp	r3, #2
   21a52:	d10d      	bne.n	21a70 <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   21a54:	4a36      	ldr	r2, [pc, #216]	; (21b30 <wait_for_bootrom+0x168>)
   21a56:	4b37      	ldr	r3, [pc, #220]	; (21b34 <wait_for_bootrom+0x16c>)
   21a58:	0011      	movs	r1, r2
   21a5a:	0018      	movs	r0, r3
   21a5c:	4b36      	ldr	r3, [pc, #216]	; (21b38 <wait_for_bootrom+0x170>)
   21a5e:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
   21a60:	2380      	movs	r3, #128	; 0x80
   21a62:	035b      	lsls	r3, r3, #13
   21a64:	4a35      	ldr	r2, [pc, #212]	; (21b3c <wait_for_bootrom+0x174>)
   21a66:	0019      	movs	r1, r3
   21a68:	0010      	movs	r0, r2
   21a6a:	4b33      	ldr	r3, [pc, #204]	; (21b38 <wait_for_bootrom+0x170>)
   21a6c:	4798      	blx	r3
   21a6e:	e022      	b.n	21ab6 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
   21a70:	1dfb      	adds	r3, r7, #7
   21a72:	781b      	ldrb	r3, [r3, #0]
   21a74:	2b03      	cmp	r3, #3
   21a76:	d10b      	bne.n	21a90 <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   21a78:	4a2d      	ldr	r2, [pc, #180]	; (21b30 <wait_for_bootrom+0x168>)
   21a7a:	4b2e      	ldr	r3, [pc, #184]	; (21b34 <wait_for_bootrom+0x16c>)
   21a7c:	0011      	movs	r1, r2
   21a7e:	0018      	movs	r0, r3
   21a80:	4b2d      	ldr	r3, [pc, #180]	; (21b38 <wait_for_bootrom+0x170>)
   21a82:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
   21a84:	4b2d      	ldr	r3, [pc, #180]	; (21b3c <wait_for_bootrom+0x174>)
   21a86:	2100      	movs	r1, #0
   21a88:	0018      	movs	r0, r3
   21a8a:	4b2b      	ldr	r3, [pc, #172]	; (21b38 <wait_for_bootrom+0x170>)
   21a8c:	4798      	blx	r3
   21a8e:	e012      	b.n	21ab6 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
   21a90:	1dfb      	adds	r3, r7, #7
   21a92:	781b      	ldrb	r3, [r3, #0]
   21a94:	2b04      	cmp	r3, #4
   21a96:	d108      	bne.n	21aaa <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
   21a98:	2380      	movs	r3, #128	; 0x80
   21a9a:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   21a9c:	68fb      	ldr	r3, [r7, #12]
   21a9e:	4a27      	ldr	r2, [pc, #156]	; (21b3c <wait_for_bootrom+0x174>)
   21aa0:	0019      	movs	r1, r3
   21aa2:	0010      	movs	r0, r2
   21aa4:	4b24      	ldr	r3, [pc, #144]	; (21b38 <wait_for_bootrom+0x170>)
   21aa6:	4798      	blx	r3
   21aa8:	e005      	b.n	21ab6 <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   21aaa:	68fb      	ldr	r3, [r7, #12]
   21aac:	4a23      	ldr	r2, [pc, #140]	; (21b3c <wait_for_bootrom+0x174>)
   21aae:	0019      	movs	r1, r3
   21ab0:	0010      	movs	r0, r2
   21ab2:	4b21      	ldr	r3, [pc, #132]	; (21b38 <wait_for_bootrom+0x170>)
   21ab4:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
   21ab6:	4b22      	ldr	r3, [pc, #136]	; (21b40 <wait_for_bootrom+0x178>)
   21ab8:	4798      	blx	r3
   21aba:	0003      	movs	r3, r0
   21abc:	051b      	lsls	r3, r3, #20
   21abe:	0d1b      	lsrs	r3, r3, #20
   21ac0:	4a20      	ldr	r2, [pc, #128]	; (21b44 <wait_for_bootrom+0x17c>)
   21ac2:	4293      	cmp	r3, r2
   21ac4:	d906      	bls.n	21ad4 <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
   21ac6:	697b      	ldr	r3, [r7, #20]
   21ac8:	2202      	movs	r2, #2
   21aca:	4313      	orrs	r3, r2
   21acc:	0018      	movs	r0, r3
   21ace:	4b1e      	ldr	r3, [pc, #120]	; (21b48 <wait_for_bootrom+0x180>)
   21ad0:	4798      	blx	r3
   21ad2:	e003      	b.n	21adc <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
   21ad4:	697b      	ldr	r3, [r7, #20]
   21ad6:	0018      	movs	r0, r3
   21ad8:	4b1b      	ldr	r3, [pc, #108]	; (21b48 <wait_for_bootrom+0x180>)
   21ada:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
   21adc:	4b1b      	ldr	r3, [pc, #108]	; (21b4c <wait_for_bootrom+0x184>)
   21ade:	0018      	movs	r0, r3
   21ae0:	4b1b      	ldr	r3, [pc, #108]	; (21b50 <wait_for_bootrom+0x188>)
   21ae2:	4798      	blx	r3
   21ae4:	68fa      	ldr	r2, [r7, #12]
   21ae6:	4b1b      	ldr	r3, [pc, #108]	; (21b54 <wait_for_bootrom+0x18c>)
   21ae8:	0011      	movs	r1, r2
   21aea:	0018      	movs	r0, r3
   21aec:	4b18      	ldr	r3, [pc, #96]	; (21b50 <wait_for_bootrom+0x188>)
   21aee:	4798      	blx	r3
   21af0:	4b19      	ldr	r3, [pc, #100]	; (21b58 <wait_for_bootrom+0x190>)
   21af2:	0018      	movs	r0, r3
   21af4:	4b16      	ldr	r3, [pc, #88]	; (21b50 <wait_for_bootrom+0x188>)
   21af6:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
   21af8:	4a18      	ldr	r2, [pc, #96]	; (21b5c <wait_for_bootrom+0x194>)
   21afa:	4b0b      	ldr	r3, [pc, #44]	; (21b28 <wait_for_bootrom+0x160>)
   21afc:	0011      	movs	r1, r2
   21afe:	0018      	movs	r0, r3
   21b00:	4b0d      	ldr	r3, [pc, #52]	; (21b38 <wait_for_bootrom+0x170>)
   21b02:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
   21b04:	2313      	movs	r3, #19
   21b06:	18fb      	adds	r3, r7, r3
   21b08:	781b      	ldrb	r3, [r3, #0]
   21b0a:	b25b      	sxtb	r3, r3
}
   21b0c:	0018      	movs	r0, r3
   21b0e:	46bd      	mov	sp, r7
   21b10:	b008      	add	sp, #32
   21b12:	bd80      	pop	{r7, pc}
   21b14:	13301354 	.word	0x13301354
   21b18:	00001014 	.word	0x00001014
   21b1c:	00021d51 	.word	0x00021d51
   21b20:	0001f401 	.word	0x0001f401
   21b24:	000207bc 	.word	0x000207bc
   21b28:	000c000c 	.word	0x000c000c
   21b2c:	10add09e 	.word	0x10add09e
   21b30:	3c1cd57d 	.word	0x3c1cd57d
   21b34:	000207ac 	.word	0x000207ac
   21b38:	00021d95 	.word	0x00021d95
   21b3c:	0000108c 	.word	0x0000108c
   21b40:	00021671 	.word	0x00021671
   21b44:	0000039f 	.word	0x0000039f
   21b48:	00021541 	.word	0x00021541
   21b4c:	000385bc 	.word	0x000385bc
   21b50:	0001cf49 	.word	0x0001cf49
   21b54:	000385c8 	.word	0x000385c8
   21b58:	0003859c 	.word	0x0003859c
   21b5c:	ef522f61 	.word	0xef522f61

00021b60 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
   21b60:	b580      	push	{r7, lr}
   21b62:	b088      	sub	sp, #32
   21b64:	af00      	add	r7, sp, #0
   21b66:	0002      	movs	r2, r0
   21b68:	1dfb      	adds	r3, r7, #7
   21b6a:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   21b6c:	231f      	movs	r3, #31
   21b6e:	18fb      	adds	r3, r7, r3
   21b70:	2200      	movs	r2, #0
   21b72:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   21b74:	2300      	movs	r3, #0
   21b76:	61bb      	str	r3, [r7, #24]
   21b78:	2300      	movs	r3, #0
   21b7a:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
   21b7c:	2301      	movs	r3, #1
   21b7e:	425b      	negs	r3, r3
   21b80:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
   21b82:	4b1d      	ldr	r3, [pc, #116]	; (21bf8 <wait_for_firmware_start+0x98>)
   21b84:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
   21b86:	4b1d      	ldr	r3, [pc, #116]	; (21bfc <wait_for_firmware_start+0x9c>)
   21b88:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
   21b8a:	1dfb      	adds	r3, r7, #7
   21b8c:	781b      	ldrb	r3, [r3, #0]
   21b8e:	2b02      	cmp	r3, #2
   21b90:	d003      	beq.n	21b9a <wait_for_firmware_start+0x3a>
   21b92:	1dfb      	adds	r3, r7, #7
   21b94:	781b      	ldrb	r3, [r3, #0]
   21b96:	2b03      	cmp	r3, #3
   21b98:	d119      	bne.n	21bce <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
   21b9a:	4b19      	ldr	r3, [pc, #100]	; (21c00 <wait_for_firmware_start+0xa0>)
   21b9c:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
   21b9e:	4b19      	ldr	r3, [pc, #100]	; (21c04 <wait_for_firmware_start+0xa4>)
   21ba0:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
   21ba2:	e014      	b.n	21bce <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
   21ba4:	2002      	movs	r0, #2
   21ba6:	4b18      	ldr	r3, [pc, #96]	; (21c08 <wait_for_firmware_start+0xa8>)
   21ba8:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
   21baa:	68fb      	ldr	r3, [r7, #12]
   21bac:	0018      	movs	r0, r3
   21bae:	4b17      	ldr	r3, [pc, #92]	; (21c0c <wait_for_firmware_start+0xac>)
   21bb0:	4798      	blx	r3
   21bb2:	0003      	movs	r3, r0
   21bb4:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
   21bb6:	697b      	ldr	r3, [r7, #20]
   21bb8:	3301      	adds	r3, #1
   21bba:	617b      	str	r3, [r7, #20]
   21bbc:	697a      	ldr	r2, [r7, #20]
   21bbe:	693b      	ldr	r3, [r7, #16]
   21bc0:	429a      	cmp	r2, r3
   21bc2:	d304      	bcc.n	21bce <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
   21bc4:	231f      	movs	r3, #31
   21bc6:	18fb      	adds	r3, r7, r3
   21bc8:	22fb      	movs	r2, #251	; 0xfb
   21bca:	701a      	strb	r2, [r3, #0]
			goto ERR;
   21bcc:	e00c      	b.n	21be8 <wait_for_firmware_start+0x88>
	while (checkValue != reg)
   21bce:	68ba      	ldr	r2, [r7, #8]
   21bd0:	69bb      	ldr	r3, [r7, #24]
   21bd2:	429a      	cmp	r2, r3
   21bd4:	d1e6      	bne.n	21ba4 <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
   21bd6:	68bb      	ldr	r3, [r7, #8]
   21bd8:	4a08      	ldr	r2, [pc, #32]	; (21bfc <wait_for_firmware_start+0x9c>)
   21bda:	4293      	cmp	r3, r2
   21bdc:	d104      	bne.n	21be8 <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
   21bde:	4b06      	ldr	r3, [pc, #24]	; (21bf8 <wait_for_firmware_start+0x98>)
   21be0:	2100      	movs	r1, #0
   21be2:	0018      	movs	r0, r3
   21be4:	4b0a      	ldr	r3, [pc, #40]	; (21c10 <wait_for_firmware_start+0xb0>)
   21be6:	4798      	blx	r3
	}
ERR:
	return ret;
   21be8:	231f      	movs	r3, #31
   21bea:	18fb      	adds	r3, r7, r3
   21bec:	781b      	ldrb	r3, [r3, #0]
   21bee:	b25b      	sxtb	r3, r3
}
   21bf0:	0018      	movs	r0, r3
   21bf2:	46bd      	mov	sp, r7
   21bf4:	b008      	add	sp, #32
   21bf6:	bd80      	pop	{r7, pc}
   21bf8:	0000108c 	.word	0x0000108c
   21bfc:	02532636 	.word	0x02532636
   21c00:	000207ac 	.word	0x000207ac
   21c04:	d75dc1c3 	.word	0xd75dc1c3
   21c08:	0001f401 	.word	0x0001f401
   21c0c:	00021d51 	.word	0x00021d51
   21c10:	00021d95 	.word	0x00021d95

00021c14 <chip_deinit>:

sint8 chip_deinit(void)
{
   21c14:	b590      	push	{r4, r7, lr}
   21c16:	b083      	sub	sp, #12
   21c18:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   21c1a:	2300      	movs	r3, #0
   21c1c:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
   21c1e:	1dfc      	adds	r4, r7, #7
   21c20:	003a      	movs	r2, r7
   21c22:	23a0      	movs	r3, #160	; 0xa0
   21c24:	015b      	lsls	r3, r3, #5
   21c26:	0011      	movs	r1, r2
   21c28:	0018      	movs	r0, r3
   21c2a:	4b20      	ldr	r3, [pc, #128]	; (21cac <chip_deinit+0x98>)
   21c2c:	4798      	blx	r3
   21c2e:	0003      	movs	r3, r0
   21c30:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   21c32:	1dfb      	adds	r3, r7, #7
   21c34:	781b      	ldrb	r3, [r3, #0]
   21c36:	b25b      	sxtb	r3, r3
   21c38:	2b00      	cmp	r3, #0
   21c3a:	d00e      	beq.n	21c5a <chip_deinit+0x46>
		M2M_ERR("failed to de-initialize\n");
   21c3c:	4a1c      	ldr	r2, [pc, #112]	; (21cb0 <chip_deinit+0x9c>)
   21c3e:	491d      	ldr	r1, [pc, #116]	; (21cb4 <chip_deinit+0xa0>)
   21c40:	4b1d      	ldr	r3, [pc, #116]	; (21cb8 <chip_deinit+0xa4>)
   21c42:	0018      	movs	r0, r3
   21c44:	4b1d      	ldr	r3, [pc, #116]	; (21cbc <chip_deinit+0xa8>)
   21c46:	4798      	blx	r3
   21c48:	4b1d      	ldr	r3, [pc, #116]	; (21cc0 <chip_deinit+0xac>)
   21c4a:	0018      	movs	r0, r3
   21c4c:	4b1b      	ldr	r3, [pc, #108]	; (21cbc <chip_deinit+0xa8>)
   21c4e:	4798      	blx	r3
   21c50:	4b1c      	ldr	r3, [pc, #112]	; (21cc4 <chip_deinit+0xb0>)
   21c52:	0018      	movs	r0, r3
   21c54:	4b19      	ldr	r3, [pc, #100]	; (21cbc <chip_deinit+0xa8>)
   21c56:	4798      	blx	r3
		goto ERR1;
   21c58:	e021      	b.n	21c9e <chip_deinit+0x8a>
	}
	reg &= ~(1 << 10);
   21c5a:	683b      	ldr	r3, [r7, #0]
   21c5c:	4a1a      	ldr	r2, [pc, #104]	; (21cc8 <chip_deinit+0xb4>)
   21c5e:	4013      	ands	r3, r2
   21c60:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
   21c62:	683a      	ldr	r2, [r7, #0]
   21c64:	1dfc      	adds	r4, r7, #7
   21c66:	23a0      	movs	r3, #160	; 0xa0
   21c68:	015b      	lsls	r3, r3, #5
   21c6a:	0011      	movs	r1, r2
   21c6c:	0018      	movs	r0, r3
   21c6e:	4b17      	ldr	r3, [pc, #92]	; (21ccc <chip_deinit+0xb8>)
   21c70:	4798      	blx	r3
   21c72:	0003      	movs	r3, r0
   21c74:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   21c76:	1dfb      	adds	r3, r7, #7
   21c78:	781b      	ldrb	r3, [r3, #0]
   21c7a:	b25b      	sxtb	r3, r3
   21c7c:	2b00      	cmp	r3, #0
   21c7e:	d00e      	beq.n	21c9e <chip_deinit+0x8a>
		M2M_ERR("failed to de-initialize\n");
   21c80:	4a13      	ldr	r2, [pc, #76]	; (21cd0 <chip_deinit+0xbc>)
   21c82:	490c      	ldr	r1, [pc, #48]	; (21cb4 <chip_deinit+0xa0>)
   21c84:	4b0c      	ldr	r3, [pc, #48]	; (21cb8 <chip_deinit+0xa4>)
   21c86:	0018      	movs	r0, r3
   21c88:	4b0c      	ldr	r3, [pc, #48]	; (21cbc <chip_deinit+0xa8>)
   21c8a:	4798      	blx	r3
   21c8c:	4b0c      	ldr	r3, [pc, #48]	; (21cc0 <chip_deinit+0xac>)
   21c8e:	0018      	movs	r0, r3
   21c90:	4b0a      	ldr	r3, [pc, #40]	; (21cbc <chip_deinit+0xa8>)
   21c92:	4798      	blx	r3
   21c94:	4b0b      	ldr	r3, [pc, #44]	; (21cc4 <chip_deinit+0xb0>)
   21c96:	0018      	movs	r0, r3
   21c98:	4b08      	ldr	r3, [pc, #32]	; (21cbc <chip_deinit+0xa8>)
   21c9a:	4798      	blx	r3
		goto ERR1;
   21c9c:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   21c9e:	1dfb      	adds	r3, r7, #7
   21ca0:	781b      	ldrb	r3, [r3, #0]
   21ca2:	b25b      	sxtb	r3, r3
}
   21ca4:	0018      	movs	r0, r3
   21ca6:	46bd      	mov	sp, r7
   21ca8:	b003      	add	sp, #12
   21caa:	bd90      	pop	{r4, r7, pc}
   21cac:	00021d71 	.word	0x00021d71
   21cb0:	00000201 	.word	0x00000201
   21cb4:	00038608 	.word	0x00038608
   21cb8:	00038570 	.word	0x00038570
   21cbc:	0001cf49 	.word	0x0001cf49
   21cc0:	000385e0 	.word	0x000385e0
   21cc4:	0003859c 	.word	0x0003859c
   21cc8:	fffffbff 	.word	0xfffffbff
   21ccc:	00021d95 	.word	0x00021d95
   21cd0:	00000207 	.word	0x00000207

00021cd4 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
   21cd4:	b590      	push	{r4, r7, lr}
   21cd6:	b085      	sub	sp, #20
   21cd8:	af00      	add	r7, sp, #0
   21cda:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   21cdc:	230f      	movs	r3, #15
   21cde:	18fb      	adds	r3, r7, r3
   21ce0:	2200      	movs	r2, #0
   21ce2:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
   21ce4:	230f      	movs	r3, #15
   21ce6:	18fc      	adds	r4, r7, r3
   21ce8:	687b      	ldr	r3, [r7, #4]
   21cea:	0018      	movs	r0, r3
   21cec:	4b05      	ldr	r3, [pc, #20]	; (21d04 <nm_bus_iface_init+0x30>)
   21cee:	4798      	blx	r3
   21cf0:	0003      	movs	r3, r0
   21cf2:	7023      	strb	r3, [r4, #0]
	return ret;
   21cf4:	230f      	movs	r3, #15
   21cf6:	18fb      	adds	r3, r7, r3
   21cf8:	781b      	ldrb	r3, [r3, #0]
   21cfa:	b25b      	sxtb	r3, r3
}
   21cfc:	0018      	movs	r0, r3
   21cfe:	46bd      	mov	sp, r7
   21d00:	b005      	add	sp, #20
   21d02:	bd90      	pop	{r4, r7, pc}
   21d04:	0001fabd 	.word	0x0001fabd

00021d08 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
   21d08:	b590      	push	{r4, r7, lr}
   21d0a:	b083      	sub	sp, #12
   21d0c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   21d0e:	1dfb      	adds	r3, r7, #7
   21d10:	2200      	movs	r2, #0
   21d12:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
   21d14:	1dfc      	adds	r4, r7, #7
   21d16:	4b05      	ldr	r3, [pc, #20]	; (21d2c <nm_bus_iface_deinit+0x24>)
   21d18:	4798      	blx	r3
   21d1a:	0003      	movs	r3, r0
   21d1c:	7023      	strb	r3, [r4, #0]

	return ret;
   21d1e:	1dfb      	adds	r3, r7, #7
   21d20:	781b      	ldrb	r3, [r3, #0]
   21d22:	b25b      	sxtb	r3, r3
}
   21d24:	0018      	movs	r0, r3
   21d26:	46bd      	mov	sp, r7
   21d28:	b003      	add	sp, #12
   21d2a:	bd90      	pop	{r4, r7, pc}
   21d2c:	0001fc35 	.word	0x0001fc35

00021d30 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
   21d30:	b580      	push	{r7, lr}
   21d32:	b082      	sub	sp, #8
   21d34:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   21d36:	1dfb      	adds	r3, r7, #7
   21d38:	2200      	movs	r2, #0
   21d3a:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
   21d3c:	4b03      	ldr	r3, [pc, #12]	; (21d4c <nm_bus_reset+0x1c>)
   21d3e:	4798      	blx	r3
   21d40:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
   21d42:	0018      	movs	r0, r3
   21d44:	46bd      	mov	sp, r7
   21d46:	b002      	add	sp, #8
   21d48:	bd80      	pop	{r7, pc}
   21d4a:	46c0      	nop			; (mov r8, r8)
   21d4c:	00023b5d 	.word	0x00023b5d

00021d50 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
   21d50:	b580      	push	{r7, lr}
   21d52:	b082      	sub	sp, #8
   21d54:	af00      	add	r7, sp, #0
   21d56:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
   21d58:	687b      	ldr	r3, [r7, #4]
   21d5a:	0018      	movs	r0, r3
   21d5c:	4b03      	ldr	r3, [pc, #12]	; (21d6c <nm_read_reg+0x1c>)
   21d5e:	4798      	blx	r3
   21d60:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
   21d62:	0018      	movs	r0, r3
   21d64:	46bd      	mov	sp, r7
   21d66:	b002      	add	sp, #8
   21d68:	bd80      	pop	{r7, pc}
   21d6a:	46c0      	nop			; (mov r8, r8)
   21d6c:	00023cf1 	.word	0x00023cf1

00021d70 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   21d70:	b580      	push	{r7, lr}
   21d72:	b082      	sub	sp, #8
   21d74:	af00      	add	r7, sp, #0
   21d76:	6078      	str	r0, [r7, #4]
   21d78:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
   21d7a:	683a      	ldr	r2, [r7, #0]
   21d7c:	687b      	ldr	r3, [r7, #4]
   21d7e:	0011      	movs	r1, r2
   21d80:	0018      	movs	r0, r3
   21d82:	4b03      	ldr	r3, [pc, #12]	; (21d90 <nm_read_reg_with_ret+0x20>)
   21d84:	4798      	blx	r3
   21d86:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
   21d88:	0018      	movs	r0, r3
   21d8a:	46bd      	mov	sp, r7
   21d8c:	b002      	add	sp, #8
   21d8e:	bd80      	pop	{r7, pc}
   21d90:	00023d15 	.word	0x00023d15

00021d94 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
   21d94:	b580      	push	{r7, lr}
   21d96:	b082      	sub	sp, #8
   21d98:	af00      	add	r7, sp, #0
   21d9a:	6078      	str	r0, [r7, #4]
   21d9c:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
   21d9e:	683a      	ldr	r2, [r7, #0]
   21da0:	687b      	ldr	r3, [r7, #4]
   21da2:	0011      	movs	r1, r2
   21da4:	0018      	movs	r0, r3
   21da6:	4b03      	ldr	r3, [pc, #12]	; (21db4 <nm_write_reg+0x20>)
   21da8:	4798      	blx	r3
   21daa:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
   21dac:	0018      	movs	r0, r3
   21dae:	46bd      	mov	sp, r7
   21db0:	b002      	add	sp, #8
   21db2:	bd80      	pop	{r7, pc}
   21db4:	00023d65 	.word	0x00023d65

00021db8 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   21db8:	b580      	push	{r7, lr}
   21dba:	b084      	sub	sp, #16
   21dbc:	af00      	add	r7, sp, #0
   21dbe:	60f8      	str	r0, [r7, #12]
   21dc0:	60b9      	str	r1, [r7, #8]
   21dc2:	1dbb      	adds	r3, r7, #6
   21dc4:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   21dc6:	1dbb      	adds	r3, r7, #6
   21dc8:	881a      	ldrh	r2, [r3, #0]
   21dca:	68b9      	ldr	r1, [r7, #8]
   21dcc:	68fb      	ldr	r3, [r7, #12]
   21dce:	0018      	movs	r0, r3
   21dd0:	4b03      	ldr	r3, [pc, #12]	; (21de0 <p_nm_read_block+0x28>)
   21dd2:	4798      	blx	r3
   21dd4:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   21dd6:	0018      	movs	r0, r3
   21dd8:	46bd      	mov	sp, r7
   21dda:	b004      	add	sp, #16
   21ddc:	bd80      	pop	{r7, pc}
   21dde:	46c0      	nop			; (mov r8, r8)
   21de0:	00023db5 	.word	0x00023db5

00021de4 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   21de4:	b580      	push	{r7, lr}
   21de6:	b086      	sub	sp, #24
   21de8:	af00      	add	r7, sp, #0
   21dea:	60f8      	str	r0, [r7, #12]
   21dec:	60b9      	str	r1, [r7, #8]
   21dee:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   21df0:	4b2d      	ldr	r3, [pc, #180]	; (21ea8 <nm_read_block+0xc4>)
   21df2:	881a      	ldrh	r2, [r3, #0]
   21df4:	2310      	movs	r3, #16
   21df6:	18fb      	adds	r3, r7, r3
   21df8:	3a08      	subs	r2, #8
   21dfa:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   21dfc:	2300      	movs	r3, #0
   21dfe:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   21e00:	2313      	movs	r3, #19
   21e02:	18fb      	adds	r3, r7, r3
   21e04:	2200      	movs	r2, #0
   21e06:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   21e08:	2310      	movs	r3, #16
   21e0a:	18fb      	adds	r3, r7, r3
   21e0c:	881a      	ldrh	r2, [r3, #0]
   21e0e:	687b      	ldr	r3, [r7, #4]
   21e10:	429a      	cmp	r2, r3
   21e12:	d313      	bcc.n	21e3c <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   21e14:	68ba      	ldr	r2, [r7, #8]
   21e16:	697b      	ldr	r3, [r7, #20]
   21e18:	18d1      	adds	r1, r2, r3
   21e1a:	687b      	ldr	r3, [r7, #4]
   21e1c:	b29a      	uxth	r2, r3
   21e1e:	68fb      	ldr	r3, [r7, #12]
   21e20:	0018      	movs	r0, r3
   21e22:	4b22      	ldr	r3, [pc, #136]	; (21eac <nm_read_block+0xc8>)
   21e24:	4798      	blx	r3
   21e26:	0003      	movs	r3, r0
   21e28:	b2da      	uxtb	r2, r3
   21e2a:	2313      	movs	r3, #19
   21e2c:	18fb      	adds	r3, r7, r3
   21e2e:	781b      	ldrb	r3, [r3, #0]
   21e30:	18d3      	adds	r3, r2, r3
   21e32:	b2da      	uxtb	r2, r3
   21e34:	2313      	movs	r3, #19
   21e36:	18fb      	adds	r3, r7, r3
   21e38:	701a      	strb	r2, [r3, #0]
			break;
   21e3a:	e02d      	b.n	21e98 <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   21e3c:	68ba      	ldr	r2, [r7, #8]
   21e3e:	697b      	ldr	r3, [r7, #20]
   21e40:	18d1      	adds	r1, r2, r3
   21e42:	2310      	movs	r3, #16
   21e44:	18fb      	adds	r3, r7, r3
   21e46:	881a      	ldrh	r2, [r3, #0]
   21e48:	68fb      	ldr	r3, [r7, #12]
   21e4a:	0018      	movs	r0, r3
   21e4c:	4b17      	ldr	r3, [pc, #92]	; (21eac <nm_read_block+0xc8>)
   21e4e:	4798      	blx	r3
   21e50:	0003      	movs	r3, r0
   21e52:	b2da      	uxtb	r2, r3
   21e54:	2313      	movs	r3, #19
   21e56:	18fb      	adds	r3, r7, r3
   21e58:	781b      	ldrb	r3, [r3, #0]
   21e5a:	18d3      	adds	r3, r2, r3
   21e5c:	b2da      	uxtb	r2, r3
   21e5e:	2313      	movs	r3, #19
   21e60:	18fb      	adds	r3, r7, r3
   21e62:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   21e64:	2313      	movs	r3, #19
   21e66:	18fb      	adds	r3, r7, r3
   21e68:	781b      	ldrb	r3, [r3, #0]
   21e6a:	b25b      	sxtb	r3, r3
   21e6c:	2b00      	cmp	r3, #0
   21e6e:	d112      	bne.n	21e96 <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   21e70:	2310      	movs	r3, #16
   21e72:	18fb      	adds	r3, r7, r3
   21e74:	881b      	ldrh	r3, [r3, #0]
   21e76:	687a      	ldr	r2, [r7, #4]
   21e78:	1ad3      	subs	r3, r2, r3
   21e7a:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   21e7c:	2310      	movs	r3, #16
   21e7e:	18fb      	adds	r3, r7, r3
   21e80:	881b      	ldrh	r3, [r3, #0]
   21e82:	697a      	ldr	r2, [r7, #20]
   21e84:	18d3      	adds	r3, r2, r3
   21e86:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   21e88:	2310      	movs	r3, #16
   21e8a:	18fb      	adds	r3, r7, r3
   21e8c:	881b      	ldrh	r3, [r3, #0]
   21e8e:	68fa      	ldr	r2, [r7, #12]
   21e90:	18d3      	adds	r3, r2, r3
   21e92:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   21e94:	e7b8      	b.n	21e08 <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   21e96:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   21e98:	2313      	movs	r3, #19
   21e9a:	18fb      	adds	r3, r7, r3
   21e9c:	781b      	ldrb	r3, [r3, #0]
   21e9e:	b25b      	sxtb	r3, r3
}
   21ea0:	0018      	movs	r0, r3
   21ea2:	46bd      	mov	sp, r7
   21ea4:	b006      	add	sp, #24
   21ea6:	bd80      	pop	{r7, pc}
   21ea8:	20000114 	.word	0x20000114
   21eac:	00021db9 	.word	0x00021db9

00021eb0 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   21eb0:	b580      	push	{r7, lr}
   21eb2:	b084      	sub	sp, #16
   21eb4:	af00      	add	r7, sp, #0
   21eb6:	60f8      	str	r0, [r7, #12]
   21eb8:	60b9      	str	r1, [r7, #8]
   21eba:	1dbb      	adds	r3, r7, #6
   21ebc:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   21ebe:	1dbb      	adds	r3, r7, #6
   21ec0:	881a      	ldrh	r2, [r3, #0]
   21ec2:	68b9      	ldr	r1, [r7, #8]
   21ec4:	68fb      	ldr	r3, [r7, #12]
   21ec6:	0018      	movs	r0, r3
   21ec8:	4b03      	ldr	r3, [pc, #12]	; (21ed8 <p_nm_write_block+0x28>)
   21eca:	4798      	blx	r3
   21ecc:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   21ece:	0018      	movs	r0, r3
   21ed0:	46bd      	mov	sp, r7
   21ed2:	b004      	add	sp, #16
   21ed4:	bd80      	pop	{r7, pc}
   21ed6:	46c0      	nop			; (mov r8, r8)
   21ed8:	00023e0d 	.word	0x00023e0d

00021edc <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   21edc:	b580      	push	{r7, lr}
   21ede:	b086      	sub	sp, #24
   21ee0:	af00      	add	r7, sp, #0
   21ee2:	60f8      	str	r0, [r7, #12]
   21ee4:	60b9      	str	r1, [r7, #8]
   21ee6:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   21ee8:	4b2d      	ldr	r3, [pc, #180]	; (21fa0 <nm_write_block+0xc4>)
   21eea:	881a      	ldrh	r2, [r3, #0]
   21eec:	2310      	movs	r3, #16
   21eee:	18fb      	adds	r3, r7, r3
   21ef0:	3a08      	subs	r2, #8
   21ef2:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   21ef4:	2300      	movs	r3, #0
   21ef6:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   21ef8:	2313      	movs	r3, #19
   21efa:	18fb      	adds	r3, r7, r3
   21efc:	2200      	movs	r2, #0
   21efe:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   21f00:	2310      	movs	r3, #16
   21f02:	18fb      	adds	r3, r7, r3
   21f04:	881a      	ldrh	r2, [r3, #0]
   21f06:	687b      	ldr	r3, [r7, #4]
   21f08:	429a      	cmp	r2, r3
   21f0a:	d313      	bcc.n	21f34 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   21f0c:	68ba      	ldr	r2, [r7, #8]
   21f0e:	697b      	ldr	r3, [r7, #20]
   21f10:	18d1      	adds	r1, r2, r3
   21f12:	687b      	ldr	r3, [r7, #4]
   21f14:	b29a      	uxth	r2, r3
   21f16:	68fb      	ldr	r3, [r7, #12]
   21f18:	0018      	movs	r0, r3
   21f1a:	4b22      	ldr	r3, [pc, #136]	; (21fa4 <nm_write_block+0xc8>)
   21f1c:	4798      	blx	r3
   21f1e:	0003      	movs	r3, r0
   21f20:	b2da      	uxtb	r2, r3
   21f22:	2313      	movs	r3, #19
   21f24:	18fb      	adds	r3, r7, r3
   21f26:	781b      	ldrb	r3, [r3, #0]
   21f28:	18d3      	adds	r3, r2, r3
   21f2a:	b2da      	uxtb	r2, r3
   21f2c:	2313      	movs	r3, #19
   21f2e:	18fb      	adds	r3, r7, r3
   21f30:	701a      	strb	r2, [r3, #0]
			break;
   21f32:	e02d      	b.n	21f90 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   21f34:	68ba      	ldr	r2, [r7, #8]
   21f36:	697b      	ldr	r3, [r7, #20]
   21f38:	18d1      	adds	r1, r2, r3
   21f3a:	2310      	movs	r3, #16
   21f3c:	18fb      	adds	r3, r7, r3
   21f3e:	881a      	ldrh	r2, [r3, #0]
   21f40:	68fb      	ldr	r3, [r7, #12]
   21f42:	0018      	movs	r0, r3
   21f44:	4b17      	ldr	r3, [pc, #92]	; (21fa4 <nm_write_block+0xc8>)
   21f46:	4798      	blx	r3
   21f48:	0003      	movs	r3, r0
   21f4a:	b2da      	uxtb	r2, r3
   21f4c:	2313      	movs	r3, #19
   21f4e:	18fb      	adds	r3, r7, r3
   21f50:	781b      	ldrb	r3, [r3, #0]
   21f52:	18d3      	adds	r3, r2, r3
   21f54:	b2da      	uxtb	r2, r3
   21f56:	2313      	movs	r3, #19
   21f58:	18fb      	adds	r3, r7, r3
   21f5a:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   21f5c:	2313      	movs	r3, #19
   21f5e:	18fb      	adds	r3, r7, r3
   21f60:	781b      	ldrb	r3, [r3, #0]
   21f62:	b25b      	sxtb	r3, r3
   21f64:	2b00      	cmp	r3, #0
   21f66:	d112      	bne.n	21f8e <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   21f68:	2310      	movs	r3, #16
   21f6a:	18fb      	adds	r3, r7, r3
   21f6c:	881b      	ldrh	r3, [r3, #0]
   21f6e:	687a      	ldr	r2, [r7, #4]
   21f70:	1ad3      	subs	r3, r2, r3
   21f72:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   21f74:	2310      	movs	r3, #16
   21f76:	18fb      	adds	r3, r7, r3
   21f78:	881b      	ldrh	r3, [r3, #0]
   21f7a:	697a      	ldr	r2, [r7, #20]
   21f7c:	18d3      	adds	r3, r2, r3
   21f7e:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   21f80:	2310      	movs	r3, #16
   21f82:	18fb      	adds	r3, r7, r3
   21f84:	881b      	ldrh	r3, [r3, #0]
   21f86:	68fa      	ldr	r2, [r7, #12]
   21f88:	18d3      	adds	r3, r2, r3
   21f8a:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   21f8c:	e7b8      	b.n	21f00 <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   21f8e:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   21f90:	2313      	movs	r3, #19
   21f92:	18fb      	adds	r3, r7, r3
   21f94:	781b      	ldrb	r3, [r3, #0]
   21f96:	b25b      	sxtb	r3, r3
}
   21f98:	0018      	movs	r0, r3
   21f9a:	46bd      	mov	sp, r7
   21f9c:	b006      	add	sp, #24
   21f9e:	bd80      	pop	{r7, pc}
   21fa0:	20000114 	.word	0x20000114
   21fa4:	00021eb1 	.word	0x00021eb1

00021fa8 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
   21fa8:	b590      	push	{r4, r7, lr}
   21faa:	b089      	sub	sp, #36	; 0x24
   21fac:	af00      	add	r7, sp, #0
   21fae:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
   21fb0:	2300      	movs	r3, #0
   21fb2:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
   21fb4:	231f      	movs	r3, #31
   21fb6:	18fb      	adds	r3, r7, r3
   21fb8:	2200      	movs	r2, #0
   21fba:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
   21fbc:	230c      	movs	r3, #12
   21fbe:	18fb      	adds	r3, r7, r3
   21fc0:	0018      	movs	r0, r3
   21fc2:	2308      	movs	r3, #8
   21fc4:	001a      	movs	r2, r3
   21fc6:	2100      	movs	r1, #0
   21fc8:	4b64      	ldr	r3, [pc, #400]	; (2215c <nm_get_firmware_full_info+0x1b4>)
   21fca:	4798      	blx	r3
	if (pstrRev != NULL)
   21fcc:	687b      	ldr	r3, [r7, #4]
   21fce:	2b00      	cmp	r3, #0
   21fd0:	d100      	bne.n	21fd4 <nm_get_firmware_full_info+0x2c>
   21fd2:	e0ba      	b.n	2214a <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
   21fd4:	687b      	ldr	r3, [r7, #4]
   21fd6:	2228      	movs	r2, #40	; 0x28
   21fd8:	2100      	movs	r1, #0
   21fda:	0018      	movs	r0, r3
   21fdc:	4b60      	ldr	r3, [pc, #384]	; (22160 <nm_get_firmware_full_info+0x1b8>)
   21fde:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
   21fe0:	231f      	movs	r3, #31
   21fe2:	18fc      	adds	r4, r7, r3
   21fe4:	2314      	movs	r3, #20
   21fe6:	18fb      	adds	r3, r7, r3
   21fe8:	4a5e      	ldr	r2, [pc, #376]	; (22164 <nm_get_firmware_full_info+0x1bc>)
   21fea:	0019      	movs	r1, r3
   21fec:	0010      	movs	r0, r2
   21fee:	4b5e      	ldr	r3, [pc, #376]	; (22168 <nm_get_firmware_full_info+0x1c0>)
   21ff0:	4798      	blx	r3
   21ff2:	0003      	movs	r3, r0
   21ff4:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
   21ff6:	231f      	movs	r3, #31
   21ff8:	18fb      	adds	r3, r7, r3
   21ffa:	781b      	ldrb	r3, [r3, #0]
   21ffc:	b25b      	sxtb	r3, r3
   21ffe:	2b00      	cmp	r3, #0
   22000:	d000      	beq.n	22004 <nm_get_firmware_full_info+0x5c>
   22002:	e0a2      	b.n	2214a <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
   22004:	697b      	ldr	r3, [r7, #20]
   22006:	2b00      	cmp	r3, #0
   22008:	d100      	bne.n	2200c <nm_get_firmware_full_info+0x64>
   2200a:	e09a      	b.n	22142 <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
   2200c:	697b      	ldr	r3, [r7, #20]
   2200e:	22c0      	movs	r2, #192	; 0xc0
   22010:	0292      	lsls	r2, r2, #10
   22012:	4313      	orrs	r3, r2
   22014:	221f      	movs	r2, #31
   22016:	18bc      	adds	r4, r7, r2
   22018:	220c      	movs	r2, #12
   2201a:	18b9      	adds	r1, r7, r2
   2201c:	2208      	movs	r2, #8
   2201e:	0018      	movs	r0, r3
   22020:	4b52      	ldr	r3, [pc, #328]	; (2216c <nm_get_firmware_full_info+0x1c4>)
   22022:	4798      	blx	r3
   22024:	0003      	movs	r3, r0
   22026:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
   22028:	231f      	movs	r3, #31
   2202a:	18fb      	adds	r3, r7, r3
   2202c:	781b      	ldrb	r3, [r3, #0]
   2202e:	b25b      	sxtb	r3, r3
   22030:	2b00      	cmp	r3, #0
   22032:	d000      	beq.n	22036 <nm_get_firmware_full_info+0x8e>
   22034:	e089      	b.n	2214a <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
   22036:	230c      	movs	r3, #12
   22038:	18fb      	adds	r3, r7, r3
   2203a:	685b      	ldr	r3, [r3, #4]
   2203c:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
   2203e:	697b      	ldr	r3, [r7, #20]
   22040:	041b      	lsls	r3, r3, #16
   22042:	0c1b      	lsrs	r3, r3, #16
   22044:	617b      	str	r3, [r7, #20]
					if(reg != 0)
   22046:	697b      	ldr	r3, [r7, #20]
   22048:	2b00      	cmp	r3, #0
   2204a:	d100      	bne.n	2204e <nm_get_firmware_full_info+0xa6>
   2204c:	e074      	b.n	22138 <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
   2204e:	697b      	ldr	r3, [r7, #20]
   22050:	22c0      	movs	r2, #192	; 0xc0
   22052:	0292      	lsls	r2, r2, #10
   22054:	4313      	orrs	r3, r2
   22056:	221f      	movs	r2, #31
   22058:	18bc      	adds	r4, r7, r2
   2205a:	6879      	ldr	r1, [r7, #4]
   2205c:	2228      	movs	r2, #40	; 0x28
   2205e:	0018      	movs	r0, r3
   22060:	4b42      	ldr	r3, [pc, #264]	; (2216c <nm_get_firmware_full_info+0x1c4>)
   22062:	4798      	blx	r3
   22064:	0003      	movs	r3, r0
   22066:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
   22068:	231f      	movs	r3, #31
   2206a:	18fb      	adds	r3, r7, r3
   2206c:	781b      	ldrb	r3, [r3, #0]
   2206e:	b25b      	sxtb	r3, r3
   22070:	2b00      	cmp	r3, #0
   22072:	d16a      	bne.n	2214a <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
   22074:	687b      	ldr	r3, [r7, #4]
   22076:	791b      	ldrb	r3, [r3, #4]
   22078:	021b      	lsls	r3, r3, #8
   2207a:	b21a      	sxth	r2, r3
   2207c:	687b      	ldr	r3, [r7, #4]
   2207e:	795b      	ldrb	r3, [r3, #5]
   22080:	011b      	lsls	r3, r3, #4
   22082:	b21b      	sxth	r3, r3
   22084:	21ff      	movs	r1, #255	; 0xff
   22086:	400b      	ands	r3, r1
   22088:	b21b      	sxth	r3, r3
   2208a:	4313      	orrs	r3, r2
   2208c:	b21a      	sxth	r2, r3
   2208e:	687b      	ldr	r3, [r7, #4]
   22090:	799b      	ldrb	r3, [r3, #6]
   22092:	b21b      	sxth	r3, r3
   22094:	210f      	movs	r1, #15
   22096:	400b      	ands	r3, r1
   22098:	b21b      	sxth	r3, r3
   2209a:	4313      	orrs	r3, r2
   2209c:	b21a      	sxth	r2, r3
   2209e:	231c      	movs	r3, #28
   220a0:	18fb      	adds	r3, r7, r3
   220a2:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   220a4:	231a      	movs	r3, #26
   220a6:	18fb      	adds	r3, r7, r3
   220a8:	4a31      	ldr	r2, [pc, #196]	; (22170 <nm_get_firmware_full_info+0x1c8>)
   220aa:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
   220ac:	687b      	ldr	r3, [r7, #4]
   220ae:	79db      	ldrb	r3, [r3, #7]
   220b0:	021b      	lsls	r3, r3, #8
   220b2:	b21a      	sxth	r2, r3
   220b4:	687b      	ldr	r3, [r7, #4]
   220b6:	7a1b      	ldrb	r3, [r3, #8]
   220b8:	011b      	lsls	r3, r3, #4
   220ba:	b21b      	sxth	r3, r3
   220bc:	21ff      	movs	r1, #255	; 0xff
   220be:	400b      	ands	r3, r1
   220c0:	b21b      	sxth	r3, r3
   220c2:	4313      	orrs	r3, r2
   220c4:	b21a      	sxth	r2, r3
   220c6:	687b      	ldr	r3, [r7, #4]
   220c8:	7a5b      	ldrb	r3, [r3, #9]
   220ca:	b21b      	sxth	r3, r3
   220cc:	210f      	movs	r1, #15
   220ce:	400b      	ands	r3, r1
   220d0:	b21b      	sxth	r3, r3
   220d2:	4313      	orrs	r3, r2
   220d4:	b21a      	sxth	r2, r3
   220d6:	2318      	movs	r3, #24
   220d8:	18fb      	adds	r3, r7, r3
   220da:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
   220dc:	231c      	movs	r3, #28
   220de:	18fb      	adds	r3, r7, r3
   220e0:	881b      	ldrh	r3, [r3, #0]
   220e2:	2b00      	cmp	r3, #0
   220e4:	d009      	beq.n	220fa <nm_get_firmware_full_info+0x152>
   220e6:	2318      	movs	r3, #24
   220e8:	18fb      	adds	r3, r7, r3
   220ea:	881b      	ldrh	r3, [r3, #0]
   220ec:	2b00      	cmp	r3, #0
   220ee:	d004      	beq.n	220fa <nm_get_firmware_full_info+0x152>
   220f0:	2318      	movs	r3, #24
   220f2:	18fb      	adds	r3, r7, r3
   220f4:	881b      	ldrh	r3, [r3, #0]
   220f6:	2b00      	cmp	r3, #0
   220f8:	d104      	bne.n	22104 <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
   220fa:	231f      	movs	r3, #31
   220fc:	18fb      	adds	r3, r7, r3
   220fe:	22f4      	movs	r2, #244	; 0xf4
   22100:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   22102:	e022      	b.n	2214a <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
   22104:	231a      	movs	r3, #26
   22106:	18fa      	adds	r2, r7, r3
   22108:	2318      	movs	r3, #24
   2210a:	18fb      	adds	r3, r7, r3
   2210c:	8812      	ldrh	r2, [r2, #0]
   2210e:	881b      	ldrh	r3, [r3, #0]
   22110:	429a      	cmp	r2, r3
   22112:	d204      	bcs.n	2211e <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
   22114:	231f      	movs	r3, #31
   22116:	18fb      	adds	r3, r7, r3
   22118:	22f3      	movs	r2, #243	; 0xf3
   2211a:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   2211c:	e015      	b.n	2214a <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
   2211e:	231a      	movs	r3, #26
   22120:	18fa      	adds	r2, r7, r3
   22122:	231c      	movs	r3, #28
   22124:	18fb      	adds	r3, r7, r3
   22126:	8812      	ldrh	r2, [r2, #0]
   22128:	881b      	ldrh	r3, [r3, #0]
   2212a:	429a      	cmp	r2, r3
   2212c:	d90d      	bls.n	2214a <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
   2212e:	231f      	movs	r3, #31
   22130:	18fb      	adds	r3, r7, r3
   22132:	22f3      	movs	r2, #243	; 0xf3
   22134:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   22136:	e008      	b.n	2214a <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
   22138:	231f      	movs	r3, #31
   2213a:	18fb      	adds	r3, r7, r3
   2213c:	22f4      	movs	r2, #244	; 0xf4
   2213e:	701a      	strb	r2, [r3, #0]
   22140:	e003      	b.n	2214a <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
   22142:	231f      	movs	r3, #31
   22144:	18fb      	adds	r3, r7, r3
   22146:	22f4      	movs	r2, #244	; 0xf4
   22148:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
   2214a:	231f      	movs	r3, #31
   2214c:	18fb      	adds	r3, r7, r3
   2214e:	781b      	ldrb	r3, [r3, #0]
   22150:	b25b      	sxtb	r3, r3
}
   22152:	0018      	movs	r0, r3
   22154:	46bd      	mov	sp, r7
   22156:	b009      	add	sp, #36	; 0x24
   22158:	bd90      	pop	{r4, r7, pc}
   2215a:	46c0      	nop			; (mov r8, r8)
   2215c:	000345df 	.word	0x000345df
   22160:	0001fce1 	.word	0x0001fce1
   22164:	000c0008 	.word	0x000c0008
   22168:	00021d71 	.word	0x00021d71
   2216c:	00021de5 	.word	0x00021de5
   22170:	00001354 	.word	0x00001354

00022174 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
   22174:	b590      	push	{r4, r7, lr}
   22176:	b085      	sub	sp, #20
   22178:	af00      	add	r7, sp, #0
   2217a:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   2217c:	230f      	movs	r3, #15
   2217e:	18fb      	adds	r3, r7, r3
   22180:	2200      	movs	r2, #0
   22182:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
   22184:	687b      	ldr	r3, [r7, #4]
   22186:	2b00      	cmp	r3, #0
   22188:	d013      	beq.n	221b2 <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
   2218a:	230e      	movs	r3, #14
   2218c:	18fb      	adds	r3, r7, r3
   2218e:	687a      	ldr	r2, [r7, #4]
   22190:	7812      	ldrb	r2, [r2, #0]
   22192:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
   22194:	230e      	movs	r3, #14
   22196:	18fb      	adds	r3, r7, r3
   22198:	781b      	ldrb	r3, [r3, #0]
   2219a:	2b00      	cmp	r3, #0
   2219c:	d004      	beq.n	221a8 <nm_drv_init+0x34>
   2219e:	230e      	movs	r3, #14
   221a0:	18fb      	adds	r3, r7, r3
   221a2:	781b      	ldrb	r3, [r3, #0]
   221a4:	2b04      	cmp	r3, #4
   221a6:	d908      	bls.n	221ba <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
   221a8:	230e      	movs	r3, #14
   221aa:	18fb      	adds	r3, r7, r3
   221ac:	2201      	movs	r2, #1
   221ae:	701a      	strb	r2, [r3, #0]
   221b0:	e003      	b.n	221ba <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
   221b2:	230e      	movs	r3, #14
   221b4:	18fb      	adds	r3, r7, r3
   221b6:	2201      	movs	r2, #1
   221b8:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
   221ba:	230f      	movs	r3, #15
   221bc:	18fc      	adds	r4, r7, r3
   221be:	2000      	movs	r0, #0
   221c0:	4b41      	ldr	r3, [pc, #260]	; (222c8 <nm_drv_init+0x154>)
   221c2:	4798      	blx	r3
   221c4:	0003      	movs	r3, r0
   221c6:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   221c8:	230f      	movs	r3, #15
   221ca:	18fb      	adds	r3, r7, r3
   221cc:	781b      	ldrb	r3, [r3, #0]
   221ce:	b25b      	sxtb	r3, r3
   221d0:	2b00      	cmp	r3, #0
   221d2:	d00f      	beq.n	221f4 <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
   221d4:	2390      	movs	r3, #144	; 0x90
   221d6:	005a      	lsls	r2, r3, #1
   221d8:	493c      	ldr	r1, [pc, #240]	; (222cc <nm_drv_init+0x158>)
   221da:	4b3d      	ldr	r3, [pc, #244]	; (222d0 <nm_drv_init+0x15c>)
   221dc:	0018      	movs	r0, r3
   221de:	4b3d      	ldr	r3, [pc, #244]	; (222d4 <nm_drv_init+0x160>)
   221e0:	4798      	blx	r3
   221e2:	4b3d      	ldr	r3, [pc, #244]	; (222d8 <nm_drv_init+0x164>)
   221e4:	0018      	movs	r0, r3
   221e6:	4b3b      	ldr	r3, [pc, #236]	; (222d4 <nm_drv_init+0x160>)
   221e8:	4798      	blx	r3
   221ea:	4b3c      	ldr	r3, [pc, #240]	; (222dc <nm_drv_init+0x168>)
   221ec:	0018      	movs	r0, r3
   221ee:	4b39      	ldr	r3, [pc, #228]	; (222d4 <nm_drv_init+0x160>)
   221f0:	4798      	blx	r3
		goto ERR1;
   221f2:	e061      	b.n	222b8 <nm_drv_init+0x144>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
   221f4:	4b3a      	ldr	r3, [pc, #232]	; (222e0 <nm_drv_init+0x16c>)
   221f6:	0018      	movs	r0, r3
   221f8:	4b36      	ldr	r3, [pc, #216]	; (222d4 <nm_drv_init+0x160>)
   221fa:	4798      	blx	r3
   221fc:	4b39      	ldr	r3, [pc, #228]	; (222e4 <nm_drv_init+0x170>)
   221fe:	4798      	blx	r3
   22200:	0002      	movs	r2, r0
   22202:	4b39      	ldr	r3, [pc, #228]	; (222e8 <nm_drv_init+0x174>)
   22204:	0011      	movs	r1, r2
   22206:	0018      	movs	r0, r3
   22208:	4b32      	ldr	r3, [pc, #200]	; (222d4 <nm_drv_init+0x160>)
   2220a:	4798      	blx	r3
   2220c:	4b33      	ldr	r3, [pc, #204]	; (222dc <nm_drv_init+0x168>)
   2220e:	0018      	movs	r0, r3
   22210:	4b30      	ldr	r3, [pc, #192]	; (222d4 <nm_drv_init+0x160>)
   22212:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
   22214:	4b35      	ldr	r3, [pc, #212]	; (222ec <nm_drv_init+0x178>)
   22216:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
   22218:	230f      	movs	r3, #15
   2221a:	18fc      	adds	r4, r7, r3
   2221c:	230e      	movs	r3, #14
   2221e:	18fb      	adds	r3, r7, r3
   22220:	781b      	ldrb	r3, [r3, #0]
   22222:	0018      	movs	r0, r3
   22224:	4b32      	ldr	r3, [pc, #200]	; (222f0 <nm_drv_init+0x17c>)
   22226:	4798      	blx	r3
   22228:	0003      	movs	r3, r0
   2222a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   2222c:	230f      	movs	r3, #15
   2222e:	18fb      	adds	r3, r7, r3
   22230:	781b      	ldrb	r3, [r3, #0]
   22232:	b25b      	sxtb	r3, r3
   22234:	2b00      	cmp	r3, #0
   22236:	d13a      	bne.n	222ae <nm_drv_init+0x13a>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
   22238:	230f      	movs	r3, #15
   2223a:	18fc      	adds	r4, r7, r3
   2223c:	230e      	movs	r3, #14
   2223e:	18fb      	adds	r3, r7, r3
   22240:	781b      	ldrb	r3, [r3, #0]
   22242:	0018      	movs	r0, r3
   22244:	4b2b      	ldr	r3, [pc, #172]	; (222f4 <nm_drv_init+0x180>)
   22246:	4798      	blx	r3
   22248:	0003      	movs	r3, r0
   2224a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   2224c:	230f      	movs	r3, #15
   2224e:	18fb      	adds	r3, r7, r3
   22250:	781b      	ldrb	r3, [r3, #0]
   22252:	b25b      	sxtb	r3, r3
   22254:	2b00      	cmp	r3, #0
   22256:	d12c      	bne.n	222b2 <nm_drv_init+0x13e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
   22258:	230e      	movs	r3, #14
   2225a:	18fb      	adds	r3, r7, r3
   2225c:	781b      	ldrb	r3, [r3, #0]
   2225e:	2b02      	cmp	r3, #2
   22260:	d02a      	beq.n	222b8 <nm_drv_init+0x144>
   22262:	230e      	movs	r3, #14
   22264:	18fb      	adds	r3, r7, r3
   22266:	781b      	ldrb	r3, [r3, #0]
   22268:	2b03      	cmp	r3, #3
   2226a:	d025      	beq.n	222b8 <nm_drv_init+0x144>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
   2226c:	230f      	movs	r3, #15
   2226e:	18fc      	adds	r4, r7, r3
   22270:	4b21      	ldr	r3, [pc, #132]	; (222f8 <nm_drv_init+0x184>)
   22272:	4798      	blx	r3
   22274:	0003      	movs	r3, r0
   22276:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22278:	230f      	movs	r3, #15
   2227a:	18fb      	adds	r3, r7, r3
   2227c:	781b      	ldrb	r3, [r3, #0]
   2227e:	b25b      	sxtb	r3, r3
   22280:	2b00      	cmp	r3, #0
   22282:	d00f      	beq.n	222a4 <nm_drv_init+0x130>
		M2M_ERR("failed to enable interrupts..\n");
   22284:	23a7      	movs	r3, #167	; 0xa7
   22286:	005a      	lsls	r2, r3, #1
   22288:	4910      	ldr	r1, [pc, #64]	; (222cc <nm_drv_init+0x158>)
   2228a:	4b11      	ldr	r3, [pc, #68]	; (222d0 <nm_drv_init+0x15c>)
   2228c:	0018      	movs	r0, r3
   2228e:	4b11      	ldr	r3, [pc, #68]	; (222d4 <nm_drv_init+0x160>)
   22290:	4798      	blx	r3
   22292:	4b1a      	ldr	r3, [pc, #104]	; (222fc <nm_drv_init+0x188>)
   22294:	0018      	movs	r0, r3
   22296:	4b0f      	ldr	r3, [pc, #60]	; (222d4 <nm_drv_init+0x160>)
   22298:	4798      	blx	r3
   2229a:	4b10      	ldr	r3, [pc, #64]	; (222dc <nm_drv_init+0x168>)
   2229c:	0018      	movs	r0, r3
   2229e:	4b0d      	ldr	r3, [pc, #52]	; (222d4 <nm_drv_init+0x160>)
   222a0:	4798      	blx	r3
		goto ERR2;
   222a2:	e007      	b.n	222b4 <nm_drv_init+0x140>
	}
	return ret;
   222a4:	230f      	movs	r3, #15
   222a6:	18fb      	adds	r3, r7, r3
   222a8:	781b      	ldrb	r3, [r3, #0]
   222aa:	b25b      	sxtb	r3, r3
   222ac:	e008      	b.n	222c0 <nm_drv_init+0x14c>
		goto ERR2;
   222ae:	46c0      	nop			; (mov r8, r8)
   222b0:	e000      	b.n	222b4 <nm_drv_init+0x140>
		goto ERR2;
   222b2:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
   222b4:	4b12      	ldr	r3, [pc, #72]	; (22300 <nm_drv_init+0x18c>)
   222b6:	4798      	blx	r3
ERR1:
	return ret;
   222b8:	230f      	movs	r3, #15
   222ba:	18fb      	adds	r3, r7, r3
   222bc:	781b      	ldrb	r3, [r3, #0]
   222be:	b25b      	sxtb	r3, r3
}
   222c0:	0018      	movs	r0, r3
   222c2:	46bd      	mov	sp, r7
   222c4:	b005      	add	sp, #20
   222c6:	bd90      	pop	{r4, r7, pc}
   222c8:	00021cd5 	.word	0x00021cd5
   222cc:	000386e4 	.word	0x000386e4
   222d0:	00038614 	.word	0x00038614
   222d4:	0001cf49 	.word	0x0001cf49
   222d8:	00038628 	.word	0x00038628
   222dc:	00038644 	.word	0x00038644
   222e0:	00038648 	.word	0x00038648
   222e4:	00021671 	.word	0x00021671
   222e8:	00038654 	.word	0x00038654
   222ec:	00023b8d 	.word	0x00023b8d
   222f0:	000219c9 	.word	0x000219c9
   222f4:	00021b61 	.word	0x00021b61
   222f8:	000215bd 	.word	0x000215bd
   222fc:	00038664 	.word	0x00038664
   22300:	00021d09 	.word	0x00021d09

00022304 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
   22304:	b590      	push	{r4, r7, lr}
   22306:	b085      	sub	sp, #20
   22308:	af00      	add	r7, sp, #0
   2230a:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
   2230c:	230f      	movs	r3, #15
   2230e:	18fc      	adds	r4, r7, r3
   22310:	4b2e      	ldr	r3, [pc, #184]	; (223cc <nm_drv_deinit+0xc8>)
   22312:	4798      	blx	r3
   22314:	0003      	movs	r3, r0
   22316:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22318:	230f      	movs	r3, #15
   2231a:	18fb      	adds	r3, r7, r3
   2231c:	781b      	ldrb	r3, [r3, #0]
   2231e:	b25b      	sxtb	r3, r3
   22320:	2b00      	cmp	r3, #0
   22322:	d010      	beq.n	22346 <nm_drv_deinit+0x42>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
   22324:	2366      	movs	r3, #102	; 0x66
   22326:	33ff      	adds	r3, #255	; 0xff
   22328:	001a      	movs	r2, r3
   2232a:	4929      	ldr	r1, [pc, #164]	; (223d0 <nm_drv_deinit+0xcc>)
   2232c:	4b29      	ldr	r3, [pc, #164]	; (223d4 <nm_drv_deinit+0xd0>)
   2232e:	0018      	movs	r0, r3
   22330:	4b29      	ldr	r3, [pc, #164]	; (223d8 <nm_drv_deinit+0xd4>)
   22332:	4798      	blx	r3
   22334:	4b29      	ldr	r3, [pc, #164]	; (223dc <nm_drv_deinit+0xd8>)
   22336:	0018      	movs	r0, r3
   22338:	4b27      	ldr	r3, [pc, #156]	; (223d8 <nm_drv_deinit+0xd4>)
   2233a:	4798      	blx	r3
   2233c:	4b28      	ldr	r3, [pc, #160]	; (223e0 <nm_drv_deinit+0xdc>)
   2233e:	0018      	movs	r0, r3
   22340:	4b25      	ldr	r3, [pc, #148]	; (223d8 <nm_drv_deinit+0xd4>)
   22342:	4798      	blx	r3
		goto ERR1;
   22344:	e03a      	b.n	223bc <nm_drv_deinit+0xb8>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
   22346:	230f      	movs	r3, #15
   22348:	18fc      	adds	r4, r7, r3
   2234a:	2000      	movs	r0, #0
   2234c:	4b25      	ldr	r3, [pc, #148]	; (223e4 <nm_drv_deinit+0xe0>)
   2234e:	4798      	blx	r3
   22350:	0003      	movs	r3, r0
   22352:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22354:	230f      	movs	r3, #15
   22356:	18fb      	adds	r3, r7, r3
   22358:	781b      	ldrb	r3, [r3, #0]
   2235a:	b25b      	sxtb	r3, r3
   2235c:	2b00      	cmp	r3, #0
   2235e:	d00f      	beq.n	22380 <nm_drv_deinit+0x7c>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
   22360:	23b6      	movs	r3, #182	; 0xb6
   22362:	005a      	lsls	r2, r3, #1
   22364:	491a      	ldr	r1, [pc, #104]	; (223d0 <nm_drv_deinit+0xcc>)
   22366:	4b1b      	ldr	r3, [pc, #108]	; (223d4 <nm_drv_deinit+0xd0>)
   22368:	0018      	movs	r0, r3
   2236a:	4b1b      	ldr	r3, [pc, #108]	; (223d8 <nm_drv_deinit+0xd4>)
   2236c:	4798      	blx	r3
   2236e:	4b1e      	ldr	r3, [pc, #120]	; (223e8 <nm_drv_deinit+0xe4>)
   22370:	0018      	movs	r0, r3
   22372:	4b19      	ldr	r3, [pc, #100]	; (223d8 <nm_drv_deinit+0xd4>)
   22374:	4798      	blx	r3
   22376:	4b1a      	ldr	r3, [pc, #104]	; (223e0 <nm_drv_deinit+0xdc>)
   22378:	0018      	movs	r0, r3
   2237a:	4b17      	ldr	r3, [pc, #92]	; (223d8 <nm_drv_deinit+0xd4>)
   2237c:	4798      	blx	r3
		goto ERR1;
   2237e:	e01d      	b.n	223bc <nm_drv_deinit+0xb8>
	}

	ret = nm_bus_iface_deinit();
   22380:	230f      	movs	r3, #15
   22382:	18fc      	adds	r4, r7, r3
   22384:	4b19      	ldr	r3, [pc, #100]	; (223ec <nm_drv_deinit+0xe8>)
   22386:	4798      	blx	r3
   22388:	0003      	movs	r3, r0
   2238a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   2238c:	230f      	movs	r3, #15
   2238e:	18fb      	adds	r3, r7, r3
   22390:	781b      	ldrb	r3, [r3, #0]
   22392:	b25b      	sxtb	r3, r3
   22394:	2b00      	cmp	r3, #0
   22396:	d00f      	beq.n	223b8 <nm_drv_deinit+0xb4>
		M2M_ERR("[nmi stop]: fail init bus\n");
   22398:	23b9      	movs	r3, #185	; 0xb9
   2239a:	005a      	lsls	r2, r3, #1
   2239c:	490c      	ldr	r1, [pc, #48]	; (223d0 <nm_drv_deinit+0xcc>)
   2239e:	4b0d      	ldr	r3, [pc, #52]	; (223d4 <nm_drv_deinit+0xd0>)
   223a0:	0018      	movs	r0, r3
   223a2:	4b0d      	ldr	r3, [pc, #52]	; (223d8 <nm_drv_deinit+0xd4>)
   223a4:	4798      	blx	r3
   223a6:	4b12      	ldr	r3, [pc, #72]	; (223f0 <nm_drv_deinit+0xec>)
   223a8:	0018      	movs	r0, r3
   223aa:	4b0b      	ldr	r3, [pc, #44]	; (223d8 <nm_drv_deinit+0xd4>)
   223ac:	4798      	blx	r3
   223ae:	4b0c      	ldr	r3, [pc, #48]	; (223e0 <nm_drv_deinit+0xdc>)
   223b0:	0018      	movs	r0, r3
   223b2:	4b09      	ldr	r3, [pc, #36]	; (223d8 <nm_drv_deinit+0xd4>)
   223b4:	4798      	blx	r3
		goto ERR1;
   223b6:	e001      	b.n	223bc <nm_drv_deinit+0xb8>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
   223b8:	4b0e      	ldr	r3, [pc, #56]	; (223f4 <nm_drv_deinit+0xf0>)
   223ba:	4798      	blx	r3
#endif

ERR1:
	return ret;
   223bc:	230f      	movs	r3, #15
   223be:	18fb      	adds	r3, r7, r3
   223c0:	781b      	ldrb	r3, [r3, #0]
   223c2:	b25b      	sxtb	r3, r3
}
   223c4:	0018      	movs	r0, r3
   223c6:	46bd      	mov	sp, r7
   223c8:	b005      	add	sp, #20
   223ca:	bd90      	pop	{r4, r7, pc}
   223cc:	00021c15 	.word	0x00021c15
   223d0:	000386f0 	.word	0x000386f0
   223d4:	00038614 	.word	0x00038614
   223d8:	0001cf49 	.word	0x0001cf49
   223dc:	00038684 	.word	0x00038684
   223e0:	00038644 	.word	0x00038644
   223e4:	00025035 	.word	0x00025035
   223e8:	000386a4 	.word	0x000386a4
   223ec:	00021d09 	.word	0x00021d09
   223f0:	000386c8 	.word	0x000386c8
   223f4:	00023cd9 	.word	0x00023cd9

000223f8 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
   223f8:	b580      	push	{r7, lr}
   223fa:	b086      	sub	sp, #24
   223fc:	af00      	add	r7, sp, #0
   223fe:	6078      	str	r0, [r7, #4]
   22400:	000a      	movs	r2, r1
   22402:	1cbb      	adds	r3, r7, #2
   22404:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
   22406:	230c      	movs	r3, #12
   22408:	18fb      	adds	r3, r7, r3
   2240a:	2200      	movs	r2, #0
   2240c:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
   2240e:	230c      	movs	r3, #12
   22410:	18fb      	adds	r3, r7, r3
   22412:	687a      	ldr	r2, [r7, #4]
   22414:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   22416:	230c      	movs	r3, #12
   22418:	18fb      	adds	r3, r7, r3
   2241a:	1cba      	adds	r2, r7, #2
   2241c:	8812      	ldrh	r2, [r2, #0]
   2241e:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   22420:	230c      	movs	r3, #12
   22422:	18fb      	adds	r3, r7, r3
   22424:	0019      	movs	r1, r3
   22426:	2003      	movs	r0, #3
   22428:	4b03      	ldr	r3, [pc, #12]	; (22438 <nmi_spi_read+0x40>)
   2242a:	4798      	blx	r3
   2242c:	0003      	movs	r3, r0
}
   2242e:	0018      	movs	r0, r3
   22430:	46bd      	mov	sp, r7
   22432:	b006      	add	sp, #24
   22434:	bd80      	pop	{r7, pc}
   22436:	46c0      	nop			; (mov r8, r8)
   22438:	0001fba5 	.word	0x0001fba5

0002243c <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
   2243c:	b580      	push	{r7, lr}
   2243e:	b086      	sub	sp, #24
   22440:	af00      	add	r7, sp, #0
   22442:	6078      	str	r0, [r7, #4]
   22444:	000a      	movs	r2, r1
   22446:	1cbb      	adds	r3, r7, #2
   22448:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
   2244a:	230c      	movs	r3, #12
   2244c:	18fb      	adds	r3, r7, r3
   2244e:	687a      	ldr	r2, [r7, #4]
   22450:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
   22452:	230c      	movs	r3, #12
   22454:	18fb      	adds	r3, r7, r3
   22456:	2200      	movs	r2, #0
   22458:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   2245a:	230c      	movs	r3, #12
   2245c:	18fb      	adds	r3, r7, r3
   2245e:	1cba      	adds	r2, r7, #2
   22460:	8812      	ldrh	r2, [r2, #0]
   22462:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   22464:	230c      	movs	r3, #12
   22466:	18fb      	adds	r3, r7, r3
   22468:	0019      	movs	r1, r3
   2246a:	2003      	movs	r0, #3
   2246c:	4b03      	ldr	r3, [pc, #12]	; (2247c <nmi_spi_write+0x40>)
   2246e:	4798      	blx	r3
   22470:	0003      	movs	r3, r0
}
   22472:	0018      	movs	r0, r3
   22474:	46bd      	mov	sp, r7
   22476:	b006      	add	sp, #24
   22478:	bd80      	pop	{r7, pc}
   2247a:	46c0      	nop			; (mov r8, r8)
   2247c:	0001fba5 	.word	0x0001fba5

00022480 <nmi_spi_rw>:
#ifndef USE_OLD_SPI_SW
static sint8 nmi_spi_rw(uint8 *bin,uint8* bout,uint16 sz)
{
   22480:	b580      	push	{r7, lr}
   22482:	b088      	sub	sp, #32
   22484:	af00      	add	r7, sp, #0
   22486:	60f8      	str	r0, [r7, #12]
   22488:	60b9      	str	r1, [r7, #8]
   2248a:	1dbb      	adds	r3, r7, #6
   2248c:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = bin;
   2248e:	2314      	movs	r3, #20
   22490:	18fb      	adds	r3, r7, r3
   22492:	68fa      	ldr	r2, [r7, #12]
   22494:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = bout;
   22496:	2314      	movs	r3, #20
   22498:	18fb      	adds	r3, r7, r3
   2249a:	68ba      	ldr	r2, [r7, #8]
   2249c:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   2249e:	2314      	movs	r3, #20
   224a0:	18fb      	adds	r3, r7, r3
   224a2:	1dba      	adds	r2, r7, #6
   224a4:	8812      	ldrh	r2, [r2, #0]
   224a6:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);	
   224a8:	2314      	movs	r3, #20
   224aa:	18fb      	adds	r3, r7, r3
   224ac:	0019      	movs	r1, r3
   224ae:	2003      	movs	r0, #3
   224b0:	4b03      	ldr	r3, [pc, #12]	; (224c0 <nmi_spi_rw+0x40>)
   224b2:	4798      	blx	r3
   224b4:	0003      	movs	r3, r0
}
   224b6:	0018      	movs	r0, r3
   224b8:	46bd      	mov	sp, r7
   224ba:	b008      	add	sp, #32
   224bc:	bd80      	pop	{r7, pc}
   224be:	46c0      	nop			; (mov r8, r8)
   224c0:	0001fba5 	.word	0x0001fba5

000224c4 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
   224c4:	b580      	push	{r7, lr}
   224c6:	b082      	sub	sp, #8
   224c8:	af00      	add	r7, sp, #0
   224ca:	0002      	movs	r2, r0
   224cc:	1dfb      	adds	r3, r7, #7
   224ce:	701a      	strb	r2, [r3, #0]
   224d0:	1dbb      	adds	r3, r7, #6
   224d2:	1c0a      	adds	r2, r1, #0
   224d4:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
   224d6:	1dfb      	adds	r3, r7, #7
   224d8:	781b      	ldrb	r3, [r3, #0]
   224da:	005a      	lsls	r2, r3, #1
   224dc:	1dbb      	adds	r3, r7, #6
   224de:	781b      	ldrb	r3, [r3, #0]
   224e0:	4053      	eors	r3, r2
   224e2:	4a03      	ldr	r2, [pc, #12]	; (224f0 <crc7_byte+0x2c>)
   224e4:	5cd3      	ldrb	r3, [r2, r3]
}
   224e6:	0018      	movs	r0, r3
   224e8:	46bd      	mov	sp, r7
   224ea:	b002      	add	sp, #8
   224ec:	bd80      	pop	{r7, pc}
   224ee:	46c0      	nop			; (mov r8, r8)
   224f0:	00038700 	.word	0x00038700

000224f4 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
   224f4:	b590      	push	{r4, r7, lr}
   224f6:	b085      	sub	sp, #20
   224f8:	af00      	add	r7, sp, #0
   224fa:	60b9      	str	r1, [r7, #8]
   224fc:	607a      	str	r2, [r7, #4]
   224fe:	230f      	movs	r3, #15
   22500:	18fb      	adds	r3, r7, r3
   22502:	1c02      	adds	r2, r0, #0
   22504:	701a      	strb	r2, [r3, #0]
	while (len--)
   22506:	e00e      	b.n	22526 <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
   22508:	68bb      	ldr	r3, [r7, #8]
   2250a:	1c5a      	adds	r2, r3, #1
   2250c:	60ba      	str	r2, [r7, #8]
   2250e:	781a      	ldrb	r2, [r3, #0]
   22510:	230f      	movs	r3, #15
   22512:	18fc      	adds	r4, r7, r3
   22514:	230f      	movs	r3, #15
   22516:	18fb      	adds	r3, r7, r3
   22518:	781b      	ldrb	r3, [r3, #0]
   2251a:	0011      	movs	r1, r2
   2251c:	0018      	movs	r0, r3
   2251e:	4b08      	ldr	r3, [pc, #32]	; (22540 <crc7+0x4c>)
   22520:	4798      	blx	r3
   22522:	0003      	movs	r3, r0
   22524:	7023      	strb	r3, [r4, #0]
	while (len--)
   22526:	687b      	ldr	r3, [r7, #4]
   22528:	1e5a      	subs	r2, r3, #1
   2252a:	607a      	str	r2, [r7, #4]
   2252c:	2b00      	cmp	r3, #0
   2252e:	d1eb      	bne.n	22508 <crc7+0x14>
	return crc;
   22530:	230f      	movs	r3, #15
   22532:	18fb      	adds	r3, r7, r3
   22534:	781b      	ldrb	r3, [r3, #0]
}
   22536:	0018      	movs	r0, r3
   22538:	46bd      	mov	sp, r7
   2253a:	b005      	add	sp, #20
   2253c:	bd90      	pop	{r4, r7, pc}
   2253e:	46c0      	nop			; (mov r8, r8)
   22540:	000224c5 	.word	0x000224c5

00022544 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
   22544:	b590      	push	{r4, r7, lr}
   22546:	b089      	sub	sp, #36	; 0x24
   22548:	af00      	add	r7, sp, #0
   2254a:	60b9      	str	r1, [r7, #8]
   2254c:	607a      	str	r2, [r7, #4]
   2254e:	603b      	str	r3, [r7, #0]
   22550:	230f      	movs	r3, #15
   22552:	18fb      	adds	r3, r7, r3
   22554:	1c02      	adds	r2, r0, #0
   22556:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
   22558:	231f      	movs	r3, #31
   2255a:	18fb      	adds	r3, r7, r3
   2255c:	2205      	movs	r2, #5
   2255e:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   22560:	231e      	movs	r3, #30
   22562:	18fb      	adds	r3, r7, r3
   22564:	2201      	movs	r2, #1
   22566:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
   22568:	2314      	movs	r3, #20
   2256a:	18fb      	adds	r3, r7, r3
   2256c:	220f      	movs	r2, #15
   2256e:	18ba      	adds	r2, r7, r2
   22570:	7812      	ldrb	r2, [r2, #0]
   22572:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   22574:	230f      	movs	r3, #15
   22576:	18fb      	adds	r3, r7, r3
   22578:	781b      	ldrb	r3, [r3, #0]
   2257a:	3bc1      	subs	r3, #193	; 0xc1
   2257c:	2b0e      	cmp	r3, #14
   2257e:	d900      	bls.n	22582 <spi_cmd+0x3e>
   22580:	e11b      	b.n	227ba <spi_cmd+0x276>
   22582:	009a      	lsls	r2, r3, #2
   22584:	4bb6      	ldr	r3, [pc, #728]	; (22860 <spi_cmd+0x31c>)
   22586:	18d3      	adds	r3, r2, r3
   22588:	681b      	ldr	r3, [r3, #0]
   2258a:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
   2258c:	68bb      	ldr	r3, [r7, #8]
   2258e:	0c1b      	lsrs	r3, r3, #16
   22590:	b2da      	uxtb	r2, r3
   22592:	2314      	movs	r3, #20
   22594:	18fb      	adds	r3, r7, r3
   22596:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   22598:	68bb      	ldr	r3, [r7, #8]
   2259a:	0a1b      	lsrs	r3, r3, #8
   2259c:	b2da      	uxtb	r2, r3
   2259e:	2314      	movs	r3, #20
   225a0:	18fb      	adds	r3, r7, r3
   225a2:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   225a4:	68bb      	ldr	r3, [r7, #8]
   225a6:	b2da      	uxtb	r2, r3
   225a8:	2314      	movs	r3, #20
   225aa:	18fb      	adds	r3, r7, r3
   225ac:	70da      	strb	r2, [r3, #3]
		len = 5;
   225ae:	231f      	movs	r3, #31
   225b0:	18fb      	adds	r3, r7, r3
   225b2:	2205      	movs	r2, #5
   225b4:	701a      	strb	r2, [r3, #0]
		break;
   225b6:	e105      	b.n	227c4 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
   225b8:	68bb      	ldr	r3, [r7, #8]
   225ba:	0a1b      	lsrs	r3, r3, #8
   225bc:	b2da      	uxtb	r2, r3
   225be:	2314      	movs	r3, #20
   225c0:	18fb      	adds	r3, r7, r3
   225c2:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   225c4:	2330      	movs	r3, #48	; 0x30
   225c6:	18fb      	adds	r3, r7, r3
   225c8:	781b      	ldrb	r3, [r3, #0]
   225ca:	2b00      	cmp	r3, #0
   225cc:	d009      	beq.n	225e2 <spi_cmd+0x9e>
   225ce:	2314      	movs	r3, #20
   225d0:	18fb      	adds	r3, r7, r3
   225d2:	785b      	ldrb	r3, [r3, #1]
   225d4:	2280      	movs	r2, #128	; 0x80
   225d6:	4252      	negs	r2, r2
   225d8:	4313      	orrs	r3, r2
   225da:	b2da      	uxtb	r2, r3
   225dc:	2314      	movs	r3, #20
   225de:	18fb      	adds	r3, r7, r3
   225e0:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
   225e2:	68bb      	ldr	r3, [r7, #8]
   225e4:	b2da      	uxtb	r2, r3
   225e6:	2314      	movs	r3, #20
   225e8:	18fb      	adds	r3, r7, r3
   225ea:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   225ec:	2314      	movs	r3, #20
   225ee:	18fb      	adds	r3, r7, r3
   225f0:	2200      	movs	r2, #0
   225f2:	70da      	strb	r2, [r3, #3]
		len = 5;
   225f4:	231f      	movs	r3, #31
   225f6:	18fb      	adds	r3, r7, r3
   225f8:	2205      	movs	r2, #5
   225fa:	701a      	strb	r2, [r3, #0]
		break;
   225fc:	e0e2      	b.n	227c4 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
   225fe:	2314      	movs	r3, #20
   22600:	18fb      	adds	r3, r7, r3
   22602:	2200      	movs	r2, #0
   22604:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   22606:	2314      	movs	r3, #20
   22608:	18fb      	adds	r3, r7, r3
   2260a:	2200      	movs	r2, #0
   2260c:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   2260e:	2314      	movs	r3, #20
   22610:	18fb      	adds	r3, r7, r3
   22612:	2200      	movs	r2, #0
   22614:	70da      	strb	r2, [r3, #3]
		len = 5;
   22616:	231f      	movs	r3, #31
   22618:	18fb      	adds	r3, r7, r3
   2261a:	2205      	movs	r2, #5
   2261c:	701a      	strb	r2, [r3, #0]
		break;
   2261e:	e0d1      	b.n	227c4 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
   22620:	2314      	movs	r3, #20
   22622:	18fb      	adds	r3, r7, r3
   22624:	2200      	movs	r2, #0
   22626:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   22628:	2314      	movs	r3, #20
   2262a:	18fb      	adds	r3, r7, r3
   2262c:	2200      	movs	r2, #0
   2262e:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   22630:	2314      	movs	r3, #20
   22632:	18fb      	adds	r3, r7, r3
   22634:	2200      	movs	r2, #0
   22636:	70da      	strb	r2, [r3, #3]
		len = 5;
   22638:	231f      	movs	r3, #31
   2263a:	18fb      	adds	r3, r7, r3
   2263c:	2205      	movs	r2, #5
   2263e:	701a      	strb	r2, [r3, #0]
		break;
   22640:	e0c0      	b.n	227c4 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
   22642:	2314      	movs	r3, #20
   22644:	18fb      	adds	r3, r7, r3
   22646:	22ff      	movs	r2, #255	; 0xff
   22648:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
   2264a:	2314      	movs	r3, #20
   2264c:	18fb      	adds	r3, r7, r3
   2264e:	22ff      	movs	r2, #255	; 0xff
   22650:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
   22652:	2314      	movs	r3, #20
   22654:	18fb      	adds	r3, r7, r3
   22656:	22ff      	movs	r2, #255	; 0xff
   22658:	70da      	strb	r2, [r3, #3]
		len = 5;
   2265a:	231f      	movs	r3, #31
   2265c:	18fb      	adds	r3, r7, r3
   2265e:	2205      	movs	r2, #5
   22660:	701a      	strb	r2, [r3, #0]
		break;
   22662:	e0af      	b.n	227c4 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
   22664:	68bb      	ldr	r3, [r7, #8]
   22666:	0c1b      	lsrs	r3, r3, #16
   22668:	b2da      	uxtb	r2, r3
   2266a:	2314      	movs	r3, #20
   2266c:	18fb      	adds	r3, r7, r3
   2266e:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   22670:	68bb      	ldr	r3, [r7, #8]
   22672:	0a1b      	lsrs	r3, r3, #8
   22674:	b2da      	uxtb	r2, r3
   22676:	2314      	movs	r3, #20
   22678:	18fb      	adds	r3, r7, r3
   2267a:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   2267c:	68bb      	ldr	r3, [r7, #8]
   2267e:	b2da      	uxtb	r2, r3
   22680:	2314      	movs	r3, #20
   22682:	18fb      	adds	r3, r7, r3
   22684:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
   22686:	683b      	ldr	r3, [r7, #0]
   22688:	0a1b      	lsrs	r3, r3, #8
   2268a:	b2da      	uxtb	r2, r3
   2268c:	2314      	movs	r3, #20
   2268e:	18fb      	adds	r3, r7, r3
   22690:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
   22692:	683b      	ldr	r3, [r7, #0]
   22694:	b2da      	uxtb	r2, r3
   22696:	2314      	movs	r3, #20
   22698:	18fb      	adds	r3, r7, r3
   2269a:	715a      	strb	r2, [r3, #5]
		len = 7;
   2269c:	231f      	movs	r3, #31
   2269e:	18fb      	adds	r3, r7, r3
   226a0:	2207      	movs	r2, #7
   226a2:	701a      	strb	r2, [r3, #0]
		break;
   226a4:	e08e      	b.n	227c4 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
   226a6:	68bb      	ldr	r3, [r7, #8]
   226a8:	0c1b      	lsrs	r3, r3, #16
   226aa:	b2da      	uxtb	r2, r3
   226ac:	2314      	movs	r3, #20
   226ae:	18fb      	adds	r3, r7, r3
   226b0:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   226b2:	68bb      	ldr	r3, [r7, #8]
   226b4:	0a1b      	lsrs	r3, r3, #8
   226b6:	b2da      	uxtb	r2, r3
   226b8:	2314      	movs	r3, #20
   226ba:	18fb      	adds	r3, r7, r3
   226bc:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   226be:	68bb      	ldr	r3, [r7, #8]
   226c0:	b2da      	uxtb	r2, r3
   226c2:	2314      	movs	r3, #20
   226c4:	18fb      	adds	r3, r7, r3
   226c6:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
   226c8:	683b      	ldr	r3, [r7, #0]
   226ca:	0c1b      	lsrs	r3, r3, #16
   226cc:	b2da      	uxtb	r2, r3
   226ce:	2314      	movs	r3, #20
   226d0:	18fb      	adds	r3, r7, r3
   226d2:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
   226d4:	683b      	ldr	r3, [r7, #0]
   226d6:	0a1b      	lsrs	r3, r3, #8
   226d8:	b2da      	uxtb	r2, r3
   226da:	2314      	movs	r3, #20
   226dc:	18fb      	adds	r3, r7, r3
   226de:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
   226e0:	683b      	ldr	r3, [r7, #0]
   226e2:	b2da      	uxtb	r2, r3
   226e4:	2314      	movs	r3, #20
   226e6:	18fb      	adds	r3, r7, r3
   226e8:	719a      	strb	r2, [r3, #6]
		len = 8;
   226ea:	231f      	movs	r3, #31
   226ec:	18fb      	adds	r3, r7, r3
   226ee:	2208      	movs	r2, #8
   226f0:	701a      	strb	r2, [r3, #0]
		break;
   226f2:	e067      	b.n	227c4 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
   226f4:	68bb      	ldr	r3, [r7, #8]
   226f6:	0a1b      	lsrs	r3, r3, #8
   226f8:	b2da      	uxtb	r2, r3
   226fa:	2314      	movs	r3, #20
   226fc:	18fb      	adds	r3, r7, r3
   226fe:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   22700:	2330      	movs	r3, #48	; 0x30
   22702:	18fb      	adds	r3, r7, r3
   22704:	781b      	ldrb	r3, [r3, #0]
   22706:	2b00      	cmp	r3, #0
   22708:	d009      	beq.n	2271e <spi_cmd+0x1da>
   2270a:	2314      	movs	r3, #20
   2270c:	18fb      	adds	r3, r7, r3
   2270e:	785b      	ldrb	r3, [r3, #1]
   22710:	2280      	movs	r2, #128	; 0x80
   22712:	4252      	negs	r2, r2
   22714:	4313      	orrs	r3, r2
   22716:	b2da      	uxtb	r2, r3
   22718:	2314      	movs	r3, #20
   2271a:	18fb      	adds	r3, r7, r3
   2271c:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
   2271e:	68bb      	ldr	r3, [r7, #8]
   22720:	b2da      	uxtb	r2, r3
   22722:	2314      	movs	r3, #20
   22724:	18fb      	adds	r3, r7, r3
   22726:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
   22728:	687b      	ldr	r3, [r7, #4]
   2272a:	0e1b      	lsrs	r3, r3, #24
   2272c:	b2da      	uxtb	r2, r3
   2272e:	2314      	movs	r3, #20
   22730:	18fb      	adds	r3, r7, r3
   22732:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
   22734:	687b      	ldr	r3, [r7, #4]
   22736:	0c1b      	lsrs	r3, r3, #16
   22738:	b2da      	uxtb	r2, r3
   2273a:	2314      	movs	r3, #20
   2273c:	18fb      	adds	r3, r7, r3
   2273e:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
   22740:	687b      	ldr	r3, [r7, #4]
   22742:	0a1b      	lsrs	r3, r3, #8
   22744:	b2da      	uxtb	r2, r3
   22746:	2314      	movs	r3, #20
   22748:	18fb      	adds	r3, r7, r3
   2274a:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
   2274c:	687b      	ldr	r3, [r7, #4]
   2274e:	b2da      	uxtb	r2, r3
   22750:	2314      	movs	r3, #20
   22752:	18fb      	adds	r3, r7, r3
   22754:	719a      	strb	r2, [r3, #6]
		len = 8;
   22756:	231f      	movs	r3, #31
   22758:	18fb      	adds	r3, r7, r3
   2275a:	2208      	movs	r2, #8
   2275c:	701a      	strb	r2, [r3, #0]
		break;
   2275e:	e031      	b.n	227c4 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
   22760:	68bb      	ldr	r3, [r7, #8]
   22762:	0c1b      	lsrs	r3, r3, #16
   22764:	b2da      	uxtb	r2, r3
   22766:	2314      	movs	r3, #20
   22768:	18fb      	adds	r3, r7, r3
   2276a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   2276c:	68bb      	ldr	r3, [r7, #8]
   2276e:	0a1b      	lsrs	r3, r3, #8
   22770:	b2da      	uxtb	r2, r3
   22772:	2314      	movs	r3, #20
   22774:	18fb      	adds	r3, r7, r3
   22776:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
   22778:	68bb      	ldr	r3, [r7, #8]
   2277a:	b2da      	uxtb	r2, r3
   2277c:	2314      	movs	r3, #20
   2277e:	18fb      	adds	r3, r7, r3
   22780:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
   22782:	687b      	ldr	r3, [r7, #4]
   22784:	0e1b      	lsrs	r3, r3, #24
   22786:	b2da      	uxtb	r2, r3
   22788:	2314      	movs	r3, #20
   2278a:	18fb      	adds	r3, r7, r3
   2278c:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
   2278e:	687b      	ldr	r3, [r7, #4]
   22790:	0c1b      	lsrs	r3, r3, #16
   22792:	b2da      	uxtb	r2, r3
   22794:	2314      	movs	r3, #20
   22796:	18fb      	adds	r3, r7, r3
   22798:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
   2279a:	687b      	ldr	r3, [r7, #4]
   2279c:	0a1b      	lsrs	r3, r3, #8
   2279e:	b2da      	uxtb	r2, r3
   227a0:	2314      	movs	r3, #20
   227a2:	18fb      	adds	r3, r7, r3
   227a4:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
   227a6:	687b      	ldr	r3, [r7, #4]
   227a8:	b2da      	uxtb	r2, r3
   227aa:	2314      	movs	r3, #20
   227ac:	18fb      	adds	r3, r7, r3
   227ae:	71da      	strb	r2, [r3, #7]
		len = 9;
   227b0:	231f      	movs	r3, #31
   227b2:	18fb      	adds	r3, r7, r3
   227b4:	2209      	movs	r2, #9
   227b6:	701a      	strb	r2, [r3, #0]
		break;
   227b8:	e004      	b.n	227c4 <spi_cmd+0x280>
	default:
		result = N_FAIL;
   227ba:	231e      	movs	r3, #30
   227bc:	18fb      	adds	r3, r7, r3
   227be:	2200      	movs	r2, #0
   227c0:	701a      	strb	r2, [r3, #0]
		break;
   227c2:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
   227c4:	231e      	movs	r3, #30
   227c6:	18fb      	adds	r3, r7, r3
   227c8:	781b      	ldrb	r3, [r3, #0]
   227ca:	b25b      	sxtb	r3, r3
   227cc:	2b00      	cmp	r3, #0
   227ce:	d03f      	beq.n	22850 <spi_cmd+0x30c>
		if (!gu8Crc_off)
   227d0:	4b24      	ldr	r3, [pc, #144]	; (22864 <spi_cmd+0x320>)
   227d2:	781b      	ldrb	r3, [r3, #0]
   227d4:	2b00      	cmp	r3, #0
   227d6:	d115      	bne.n	22804 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
   227d8:	231f      	movs	r3, #31
   227da:	18fb      	adds	r3, r7, r3
   227dc:	781b      	ldrb	r3, [r3, #0]
   227de:	1e5c      	subs	r4, r3, #1
   227e0:	231f      	movs	r3, #31
   227e2:	18fb      	adds	r3, r7, r3
   227e4:	781b      	ldrb	r3, [r3, #0]
   227e6:	3b01      	subs	r3, #1
   227e8:	001a      	movs	r2, r3
   227ea:	2314      	movs	r3, #20
   227ec:	18fb      	adds	r3, r7, r3
   227ee:	0019      	movs	r1, r3
   227f0:	207f      	movs	r0, #127	; 0x7f
   227f2:	4b1d      	ldr	r3, [pc, #116]	; (22868 <spi_cmd+0x324>)
   227f4:	4798      	blx	r3
   227f6:	0003      	movs	r3, r0
   227f8:	18db      	adds	r3, r3, r3
   227fa:	b2da      	uxtb	r2, r3
   227fc:	2314      	movs	r3, #20
   227fe:	18fb      	adds	r3, r7, r3
   22800:	551a      	strb	r2, [r3, r4]
   22802:	e006      	b.n	22812 <spi_cmd+0x2ce>
		else
			len-=1;
   22804:	231f      	movs	r3, #31
   22806:	18fb      	adds	r3, r7, r3
   22808:	221f      	movs	r2, #31
   2280a:	18ba      	adds	r2, r7, r2
   2280c:	7812      	ldrb	r2, [r2, #0]
   2280e:	3a01      	subs	r2, #1
   22810:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
   22812:	231f      	movs	r3, #31
   22814:	18fb      	adds	r3, r7, r3
   22816:	781b      	ldrb	r3, [r3, #0]
   22818:	b29a      	uxth	r2, r3
   2281a:	2314      	movs	r3, #20
   2281c:	18fb      	adds	r3, r7, r3
   2281e:	0011      	movs	r1, r2
   22820:	0018      	movs	r0, r3
   22822:	4b12      	ldr	r3, [pc, #72]	; (2286c <spi_cmd+0x328>)
   22824:	4798      	blx	r3
   22826:	1e03      	subs	r3, r0, #0
   22828:	d012      	beq.n	22850 <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   2282a:	2390      	movs	r3, #144	; 0x90
   2282c:	005a      	lsls	r2, r3, #1
   2282e:	4910      	ldr	r1, [pc, #64]	; (22870 <spi_cmd+0x32c>)
   22830:	4b10      	ldr	r3, [pc, #64]	; (22874 <spi_cmd+0x330>)
   22832:	0018      	movs	r0, r3
   22834:	4b10      	ldr	r3, [pc, #64]	; (22878 <spi_cmd+0x334>)
   22836:	4798      	blx	r3
   22838:	4b10      	ldr	r3, [pc, #64]	; (2287c <spi_cmd+0x338>)
   2283a:	0018      	movs	r0, r3
   2283c:	4b0e      	ldr	r3, [pc, #56]	; (22878 <spi_cmd+0x334>)
   2283e:	4798      	blx	r3
   22840:	4b0f      	ldr	r3, [pc, #60]	; (22880 <spi_cmd+0x33c>)
   22842:	0018      	movs	r0, r3
   22844:	4b0c      	ldr	r3, [pc, #48]	; (22878 <spi_cmd+0x334>)
   22846:	4798      	blx	r3
			result = N_FAIL;
   22848:	231e      	movs	r3, #30
   2284a:	18fb      	adds	r3, r7, r3
   2284c:	2200      	movs	r2, #0
   2284e:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
   22850:	231e      	movs	r3, #30
   22852:	18fb      	adds	r3, r7, r3
   22854:	781b      	ldrb	r3, [r3, #0]
   22856:	b25b      	sxtb	r3, r3
}
   22858:	0018      	movs	r0, r3
   2285a:	46bd      	mov	sp, r7
   2285c:	b009      	add	sp, #36	; 0x24
   2285e:	bd90      	pop	{r4, r7, pc}
   22860:	00038d78 	.word	0x00038d78
   22864:	2000427c 	.word	0x2000427c
   22868:	000224f5 	.word	0x000224f5
   2286c:	0002243d 	.word	0x0002243d
   22870:	00038df0 	.word	0x00038df0
   22874:	00038800 	.word	0x00038800
   22878:	0001cf49 	.word	0x0001cf49
   2287c:	00038814 	.word	0x00038814
   22880:	00038840 	.word	0x00038840

00022884 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
   22884:	b590      	push	{r4, r7, lr}
   22886:	b085      	sub	sp, #20
   22888:	af00      	add	r7, sp, #0
   2288a:	0002      	movs	r2, r0
   2288c:	1dfb      	adds	r3, r7, #7
   2288e:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
   22890:	230e      	movs	r3, #14
   22892:	18fb      	adds	r3, r7, r3
   22894:	2201      	movs	r2, #1
   22896:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
   22898:	4b32      	ldr	r3, [pc, #200]	; (22964 <spi_data_rsp+0xe0>)
   2289a:	781b      	ldrb	r3, [r3, #0]
   2289c:	2b00      	cmp	r3, #0
   2289e:	d104      	bne.n	228aa <spi_data_rsp+0x26>
		len = 2;
   228a0:	230f      	movs	r3, #15
   228a2:	18fb      	adds	r3, r7, r3
   228a4:	2202      	movs	r2, #2
   228a6:	701a      	strb	r2, [r3, #0]
   228a8:	e003      	b.n	228b2 <spi_data_rsp+0x2e>
	else
		len = 3;
   228aa:	230f      	movs	r3, #15
   228ac:	18fb      	adds	r3, r7, r3
   228ae:	2203      	movs	r2, #3
   228b0:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
   228b2:	230f      	movs	r3, #15
   228b4:	18fb      	adds	r3, r7, r3
   228b6:	781b      	ldrb	r3, [r3, #0]
   228b8:	b29a      	uxth	r2, r3
   228ba:	2308      	movs	r3, #8
   228bc:	18fb      	adds	r3, r7, r3
   228be:	0011      	movs	r1, r2
   228c0:	0018      	movs	r0, r3
   228c2:	4b29      	ldr	r3, [pc, #164]	; (22968 <spi_data_rsp+0xe4>)
   228c4:	4798      	blx	r3
   228c6:	1e03      	subs	r3, r0, #0
   228c8:	d013      	beq.n	228f2 <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
   228ca:	239a      	movs	r3, #154	; 0x9a
   228cc:	005a      	lsls	r2, r3, #1
   228ce:	4927      	ldr	r1, [pc, #156]	; (2296c <spi_data_rsp+0xe8>)
   228d0:	4b27      	ldr	r3, [pc, #156]	; (22970 <spi_data_rsp+0xec>)
   228d2:	0018      	movs	r0, r3
   228d4:	4b27      	ldr	r3, [pc, #156]	; (22974 <spi_data_rsp+0xf0>)
   228d6:	4798      	blx	r3
   228d8:	4b27      	ldr	r3, [pc, #156]	; (22978 <spi_data_rsp+0xf4>)
   228da:	0018      	movs	r0, r3
   228dc:	4b25      	ldr	r3, [pc, #148]	; (22974 <spi_data_rsp+0xf0>)
   228de:	4798      	blx	r3
   228e0:	4b26      	ldr	r3, [pc, #152]	; (2297c <spi_data_rsp+0xf8>)
   228e2:	0018      	movs	r0, r3
   228e4:	4b23      	ldr	r3, [pc, #140]	; (22974 <spi_data_rsp+0xf0>)
   228e6:	4798      	blx	r3
		result = N_FAIL;
   228e8:	230e      	movs	r3, #14
   228ea:	18fb      	adds	r3, r7, r3
   228ec:	2200      	movs	r2, #0
   228ee:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   228f0:	e030      	b.n	22954 <spi_data_rsp+0xd0>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
   228f2:	230f      	movs	r3, #15
   228f4:	18fb      	adds	r3, r7, r3
   228f6:	781b      	ldrb	r3, [r3, #0]
   228f8:	3b01      	subs	r3, #1
   228fa:	2208      	movs	r2, #8
   228fc:	18ba      	adds	r2, r7, r2
   228fe:	5cd3      	ldrb	r3, [r2, r3]
   22900:	2b00      	cmp	r3, #0
   22902:	d108      	bne.n	22916 <spi_data_rsp+0x92>
   22904:	230f      	movs	r3, #15
   22906:	18fb      	adds	r3, r7, r3
   22908:	781b      	ldrb	r3, [r3, #0]
   2290a:	3b02      	subs	r3, #2
   2290c:	2208      	movs	r2, #8
   2290e:	18ba      	adds	r2, r7, r2
   22910:	5cd3      	ldrb	r3, [r2, r3]
   22912:	2bc3      	cmp	r3, #195	; 0xc3
   22914:	d01e      	beq.n	22954 <spi_data_rsp+0xd0>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
   22916:	233c      	movs	r3, #60	; 0x3c
   22918:	33ff      	adds	r3, #255	; 0xff
   2291a:	001a      	movs	r2, r3
   2291c:	4913      	ldr	r1, [pc, #76]	; (2296c <spi_data_rsp+0xe8>)
   2291e:	4b14      	ldr	r3, [pc, #80]	; (22970 <spi_data_rsp+0xec>)
   22920:	0018      	movs	r0, r3
   22922:	4b14      	ldr	r3, [pc, #80]	; (22974 <spi_data_rsp+0xf0>)
   22924:	4798      	blx	r3
   22926:	2308      	movs	r3, #8
   22928:	18fb      	adds	r3, r7, r3
   2292a:	781b      	ldrb	r3, [r3, #0]
   2292c:	0019      	movs	r1, r3
   2292e:	2308      	movs	r3, #8
   22930:	18fb      	adds	r3, r7, r3
   22932:	785b      	ldrb	r3, [r3, #1]
   22934:	001a      	movs	r2, r3
   22936:	2308      	movs	r3, #8
   22938:	18fb      	adds	r3, r7, r3
   2293a:	789b      	ldrb	r3, [r3, #2]
   2293c:	4810      	ldr	r0, [pc, #64]	; (22980 <spi_data_rsp+0xfc>)
   2293e:	4c0d      	ldr	r4, [pc, #52]	; (22974 <spi_data_rsp+0xf0>)
   22940:	47a0      	blx	r4
   22942:	4b0e      	ldr	r3, [pc, #56]	; (2297c <spi_data_rsp+0xf8>)
   22944:	0018      	movs	r0, r3
   22946:	4b0b      	ldr	r3, [pc, #44]	; (22974 <spi_data_rsp+0xf0>)
   22948:	4798      	blx	r3
		result = N_FAIL;
   2294a:	230e      	movs	r3, #14
   2294c:	18fb      	adds	r3, r7, r3
   2294e:	2200      	movs	r2, #0
   22950:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   22952:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
   22954:	230e      	movs	r3, #14
   22956:	18fb      	adds	r3, r7, r3
   22958:	781b      	ldrb	r3, [r3, #0]
   2295a:	b25b      	sxtb	r3, r3
}
   2295c:	0018      	movs	r0, r3
   2295e:	46bd      	mov	sp, r7
   22960:	b005      	add	sp, #20
   22962:	bd90      	pop	{r4, r7, pc}
   22964:	2000427c 	.word	0x2000427c
   22968:	000223f9 	.word	0x000223f9
   2296c:	00038df8 	.word	0x00038df8
   22970:	00038800 	.word	0x00038800
   22974:	0001cf49 	.word	0x0001cf49
   22978:	00038844 	.word	0x00038844
   2297c:	00038840 	.word	0x00038840
   22980:	00038864 	.word	0x00038864

00022984 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
   22984:	b580      	push	{r7, lr}
   22986:	b084      	sub	sp, #16
   22988:	af00      	add	r7, sp, #0
   2298a:	0002      	movs	r2, r0
   2298c:	1dfb      	adds	r3, r7, #7
   2298e:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
   22990:	230f      	movs	r3, #15
   22992:	18fb      	adds	r3, r7, r3
   22994:	2201      	movs	r2, #1
   22996:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   22998:	1dfb      	adds	r3, r7, #7
   2299a:	781b      	ldrb	r3, [r3, #0]
   2299c:	2bcf      	cmp	r3, #207	; 0xcf
   2299e:	d007      	beq.n	229b0 <spi_cmd_rsp+0x2c>
   229a0:	1dfb      	adds	r3, r7, #7
   229a2:	781b      	ldrb	r3, [r3, #0]
   229a4:	2bc5      	cmp	r3, #197	; 0xc5
   229a6:	d003      	beq.n	229b0 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
   229a8:	1dfb      	adds	r3, r7, #7
   229aa:	781b      	ldrb	r3, [r3, #0]
   229ac:	2bc6      	cmp	r3, #198	; 0xc6
   229ae:	d10c      	bne.n	229ca <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   229b0:	230d      	movs	r3, #13
   229b2:	18fb      	adds	r3, r7, r3
   229b4:	2101      	movs	r1, #1
   229b6:	0018      	movs	r0, r3
   229b8:	4b3b      	ldr	r3, [pc, #236]	; (22aa8 <spi_cmd_rsp+0x124>)
   229ba:	4798      	blx	r3
   229bc:	1e03      	subs	r3, r0, #0
   229be:	d004      	beq.n	229ca <spi_cmd_rsp+0x46>
			result = N_FAIL;
   229c0:	230f      	movs	r3, #15
   229c2:	18fb      	adds	r3, r7, r3
   229c4:	2200      	movs	r2, #0
   229c6:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   229c8:	e065      	b.n	22a96 <spi_cmd_rsp+0x112>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   229ca:	230e      	movs	r3, #14
   229cc:	18fb      	adds	r3, r7, r3
   229ce:	220a      	movs	r2, #10
   229d0:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   229d2:	230d      	movs	r3, #13
   229d4:	18fb      	adds	r3, r7, r3
   229d6:	2101      	movs	r1, #1
   229d8:	0018      	movs	r0, r3
   229da:	4b33      	ldr	r3, [pc, #204]	; (22aa8 <spi_cmd_rsp+0x124>)
   229dc:	4798      	blx	r3
   229de:	1e03      	subs	r3, r0, #0
   229e0:	d014      	beq.n	22a0c <spi_cmd_rsp+0x88>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   229e2:	235c      	movs	r3, #92	; 0x5c
   229e4:	33ff      	adds	r3, #255	; 0xff
   229e6:	001a      	movs	r2, r3
   229e8:	4930      	ldr	r1, [pc, #192]	; (22aac <spi_cmd_rsp+0x128>)
   229ea:	4b31      	ldr	r3, [pc, #196]	; (22ab0 <spi_cmd_rsp+0x12c>)
   229ec:	0018      	movs	r0, r3
   229ee:	4b31      	ldr	r3, [pc, #196]	; (22ab4 <spi_cmd_rsp+0x130>)
   229f0:	4798      	blx	r3
   229f2:	4b31      	ldr	r3, [pc, #196]	; (22ab8 <spi_cmd_rsp+0x134>)
   229f4:	0018      	movs	r0, r3
   229f6:	4b2f      	ldr	r3, [pc, #188]	; (22ab4 <spi_cmd_rsp+0x130>)
   229f8:	4798      	blx	r3
   229fa:	4b30      	ldr	r3, [pc, #192]	; (22abc <spi_cmd_rsp+0x138>)
   229fc:	0018      	movs	r0, r3
   229fe:	4b2d      	ldr	r3, [pc, #180]	; (22ab4 <spi_cmd_rsp+0x130>)
   22a00:	4798      	blx	r3
			result = N_FAIL;
   22a02:	230f      	movs	r3, #15
   22a04:	18fb      	adds	r3, r7, r3
   22a06:	2200      	movs	r2, #0
   22a08:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   22a0a:	e044      	b.n	22a96 <spi_cmd_rsp+0x112>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
   22a0c:	230d      	movs	r3, #13
   22a0e:	18fb      	adds	r3, r7, r3
   22a10:	781b      	ldrb	r3, [r3, #0]
   22a12:	1dfa      	adds	r2, r7, #7
   22a14:	7812      	ldrb	r2, [r2, #0]
   22a16:	429a      	cmp	r2, r3
   22a18:	d00b      	beq.n	22a32 <spi_cmd_rsp+0xae>
   22a1a:	230e      	movs	r3, #14
   22a1c:	18fb      	adds	r3, r7, r3
   22a1e:	781b      	ldrb	r3, [r3, #0]
   22a20:	b25b      	sxtb	r3, r3
   22a22:	b2da      	uxtb	r2, r3
   22a24:	3a01      	subs	r2, #1
   22a26:	b2d1      	uxtb	r1, r2
   22a28:	220e      	movs	r2, #14
   22a2a:	18ba      	adds	r2, r7, r2
   22a2c:	7011      	strb	r1, [r2, #0]
   22a2e:	2b00      	cmp	r3, #0
   22a30:	dccf      	bgt.n	229d2 <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   22a32:	230e      	movs	r3, #14
   22a34:	18fb      	adds	r3, r7, r3
   22a36:	220a      	movs	r2, #10
   22a38:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   22a3a:	230d      	movs	r3, #13
   22a3c:	18fb      	adds	r3, r7, r3
   22a3e:	2101      	movs	r1, #1
   22a40:	0018      	movs	r0, r3
   22a42:	4b19      	ldr	r3, [pc, #100]	; (22aa8 <spi_cmd_rsp+0x124>)
   22a44:	4798      	blx	r3
   22a46:	1e03      	subs	r3, r0, #0
   22a48:	d014      	beq.n	22a74 <spi_cmd_rsp+0xf0>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   22a4a:	236a      	movs	r3, #106	; 0x6a
   22a4c:	33ff      	adds	r3, #255	; 0xff
   22a4e:	001a      	movs	r2, r3
   22a50:	4916      	ldr	r1, [pc, #88]	; (22aac <spi_cmd_rsp+0x128>)
   22a52:	4b17      	ldr	r3, [pc, #92]	; (22ab0 <spi_cmd_rsp+0x12c>)
   22a54:	0018      	movs	r0, r3
   22a56:	4b17      	ldr	r3, [pc, #92]	; (22ab4 <spi_cmd_rsp+0x130>)
   22a58:	4798      	blx	r3
   22a5a:	4b17      	ldr	r3, [pc, #92]	; (22ab8 <spi_cmd_rsp+0x134>)
   22a5c:	0018      	movs	r0, r3
   22a5e:	4b15      	ldr	r3, [pc, #84]	; (22ab4 <spi_cmd_rsp+0x130>)
   22a60:	4798      	blx	r3
   22a62:	4b16      	ldr	r3, [pc, #88]	; (22abc <spi_cmd_rsp+0x138>)
   22a64:	0018      	movs	r0, r3
   22a66:	4b13      	ldr	r3, [pc, #76]	; (22ab4 <spi_cmd_rsp+0x130>)
   22a68:	4798      	blx	r3
			result = N_FAIL;
   22a6a:	230f      	movs	r3, #15
   22a6c:	18fb      	adds	r3, r7, r3
   22a6e:	2200      	movs	r2, #0
   22a70:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   22a72:	e010      	b.n	22a96 <spi_cmd_rsp+0x112>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
   22a74:	230d      	movs	r3, #13
   22a76:	18fb      	adds	r3, r7, r3
   22a78:	781b      	ldrb	r3, [r3, #0]
   22a7a:	2b00      	cmp	r3, #0
   22a7c:	d00b      	beq.n	22a96 <spi_cmd_rsp+0x112>
   22a7e:	230e      	movs	r3, #14
   22a80:	18fb      	adds	r3, r7, r3
   22a82:	781b      	ldrb	r3, [r3, #0]
   22a84:	b25b      	sxtb	r3, r3
   22a86:	b2da      	uxtb	r2, r3
   22a88:	3a01      	subs	r2, #1
   22a8a:	b2d1      	uxtb	r1, r2
   22a8c:	220e      	movs	r2, #14
   22a8e:	18ba      	adds	r2, r7, r2
   22a90:	7011      	strb	r1, [r2, #0]
   22a92:	2b00      	cmp	r3, #0
   22a94:	dcd1      	bgt.n	22a3a <spi_cmd_rsp+0xb6>

_fail_:

	return result;
   22a96:	230f      	movs	r3, #15
   22a98:	18fb      	adds	r3, r7, r3
   22a9a:	781b      	ldrb	r3, [r3, #0]
   22a9c:	b25b      	sxtb	r3, r3
}
   22a9e:	0018      	movs	r0, r3
   22aa0:	46bd      	mov	sp, r7
   22aa2:	b004      	add	sp, #16
   22aa4:	bd80      	pop	{r7, pc}
   22aa6:	46c0      	nop			; (mov r8, r8)
   22aa8:	000223f9 	.word	0x000223f9
   22aac:	00038e08 	.word	0x00038e08
   22ab0:	00038800 	.word	0x00038800
   22ab4:	0001cf49 	.word	0x0001cf49
   22ab8:	00038894 	.word	0x00038894
   22abc:	00038840 	.word	0x00038840

00022ac0 <spi_cmd_complete>:
#ifndef USE_OLD_SPI_SW
static int spi_cmd_complete(uint8_t cmd, uint32_t adr, uint8_t *b, uint32_t sz, uint8_t clockless)
{
   22ac0:	b590      	push	{r4, r7, lr}
   22ac2:	b09f      	sub	sp, #124	; 0x7c
   22ac4:	af00      	add	r7, sp, #0
   22ac6:	60b9      	str	r1, [r7, #8]
   22ac8:	607a      	str	r2, [r7, #4]
   22aca:	603b      	str	r3, [r7, #0]
   22acc:	230f      	movs	r3, #15
   22ace:	18fb      	adds	r3, r7, r3
   22ad0:	1c02      	adds	r2, r0, #0
   22ad2:	701a      	strb	r2, [r3, #0]
	uint8_t wb[32], rb[32];
	uint8_t wix, rix;
	uint32_t len2;
	uint8_t rsp;
	int len = 0;
   22ad4:	2300      	movs	r3, #0
   22ad6:	66fb      	str	r3, [r7, #108]	; 0x6c
	int result = N_OK;
   22ad8:	2301      	movs	r3, #1
   22ada:	66bb      	str	r3, [r7, #104]	; 0x68

	wb[0] = cmd;
   22adc:	2338      	movs	r3, #56	; 0x38
   22ade:	18fb      	adds	r3, r7, r3
   22ae0:	220f      	movs	r2, #15
   22ae2:	18ba      	adds	r2, r7, r2
   22ae4:	7812      	ldrb	r2, [r2, #0]
   22ae6:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   22ae8:	230f      	movs	r3, #15
   22aea:	18fb      	adds	r3, r7, r3
   22aec:	781b      	ldrb	r3, [r3, #0]
   22aee:	3bc1      	subs	r3, #193	; 0xc1
   22af0:	2b0e      	cmp	r3, #14
   22af2:	d900      	bls.n	22af6 <spi_cmd_complete+0x36>
   22af4:	e103      	b.n	22cfe <spi_cmd_complete+0x23e>
   22af6:	009a      	lsls	r2, r3, #2
   22af8:	4bd1      	ldr	r3, [pc, #836]	; (22e40 <spi_cmd_complete+0x380>)
   22afa:	18d3      	adds	r3, r2, r3
   22afc:	681b      	ldr	r3, [r3, #0]
   22afe:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		wb[1] = (uint8_t)(adr >> 16);
   22b00:	68bb      	ldr	r3, [r7, #8]
   22b02:	0c1b      	lsrs	r3, r3, #16
   22b04:	b2da      	uxtb	r2, r3
   22b06:	2338      	movs	r3, #56	; 0x38
   22b08:	18fb      	adds	r3, r7, r3
   22b0a:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   22b0c:	68bb      	ldr	r3, [r7, #8]
   22b0e:	0a1b      	lsrs	r3, r3, #8
   22b10:	b2da      	uxtb	r2, r3
   22b12:	2338      	movs	r3, #56	; 0x38
   22b14:	18fb      	adds	r3, r7, r3
   22b16:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   22b18:	68bb      	ldr	r3, [r7, #8]
   22b1a:	b2da      	uxtb	r2, r3
   22b1c:	2338      	movs	r3, #56	; 0x38
   22b1e:	18fb      	adds	r3, r7, r3
   22b20:	70da      	strb	r2, [r3, #3]
		len = 5;
   22b22:	2305      	movs	r3, #5
   22b24:	66fb      	str	r3, [r7, #108]	; 0x6c
		break; 
   22b26:	e0ed      	b.n	22d04 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_READ:			/* internal register read */ 
		wb[1] = (uint8_t)(adr >> 8);
   22b28:	68bb      	ldr	r3, [r7, #8]
   22b2a:	0a1b      	lsrs	r3, r3, #8
   22b2c:	b2da      	uxtb	r2, r3
   22b2e:	2338      	movs	r3, #56	; 0x38
   22b30:	18fb      	adds	r3, r7, r3
   22b32:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   22b34:	2388      	movs	r3, #136	; 0x88
   22b36:	18fb      	adds	r3, r7, r3
   22b38:	781b      	ldrb	r3, [r3, #0]
   22b3a:	2b01      	cmp	r3, #1
   22b3c:	d109      	bne.n	22b52 <spi_cmd_complete+0x92>
   22b3e:	2338      	movs	r3, #56	; 0x38
   22b40:	18fb      	adds	r3, r7, r3
   22b42:	785b      	ldrb	r3, [r3, #1]
   22b44:	2280      	movs	r2, #128	; 0x80
   22b46:	4252      	negs	r2, r2
   22b48:	4313      	orrs	r3, r2
   22b4a:	b2da      	uxtb	r2, r3
   22b4c:	2338      	movs	r3, #56	; 0x38
   22b4e:	18fb      	adds	r3, r7, r3
   22b50:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)adr;
   22b52:	68bb      	ldr	r3, [r7, #8]
   22b54:	b2da      	uxtb	r2, r3
   22b56:	2338      	movs	r3, #56	; 0x38
   22b58:	18fb      	adds	r3, r7, r3
   22b5a:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   22b5c:	2338      	movs	r3, #56	; 0x38
   22b5e:	18fb      	adds	r3, r7, r3
   22b60:	2200      	movs	r2, #0
   22b62:	70da      	strb	r2, [r3, #3]
		len = 5;
   22b64:	2305      	movs	r3, #5
   22b66:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   22b68:	e0cc      	b.n	22d04 <spi_cmd_complete+0x244>
	case CMD_TERMINATE:					/* termination */
		wb[1] = 0x00;
   22b6a:	2338      	movs	r3, #56	; 0x38
   22b6c:	18fb      	adds	r3, r7, r3
   22b6e:	2200      	movs	r2, #0
   22b70:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   22b72:	2338      	movs	r3, #56	; 0x38
   22b74:	18fb      	adds	r3, r7, r3
   22b76:	2200      	movs	r2, #0
   22b78:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   22b7a:	2338      	movs	r3, #56	; 0x38
   22b7c:	18fb      	adds	r3, r7, r3
   22b7e:	2200      	movs	r2, #0
   22b80:	70da      	strb	r2, [r3, #3]
		len = 5;
   22b82:	2305      	movs	r3, #5
   22b84:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   22b86:	e0bd      	b.n	22d04 <spi_cmd_complete+0x244>
	case CMD_REPEAT:						/* repeat */
		wb[1] = 0x00;
   22b88:	2338      	movs	r3, #56	; 0x38
   22b8a:	18fb      	adds	r3, r7, r3
   22b8c:	2200      	movs	r2, #0
   22b8e:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   22b90:	2338      	movs	r3, #56	; 0x38
   22b92:	18fb      	adds	r3, r7, r3
   22b94:	2200      	movs	r2, #0
   22b96:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   22b98:	2338      	movs	r3, #56	; 0x38
   22b9a:	18fb      	adds	r3, r7, r3
   22b9c:	2200      	movs	r2, #0
   22b9e:	70da      	strb	r2, [r3, #3]
		len = 5;
   22ba0:	2305      	movs	r3, #5
   22ba2:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   22ba4:	e0ae      	b.n	22d04 <spi_cmd_complete+0x244>
	case CMD_RESET:							/* reset */
		wb[1] = 0xff;
   22ba6:	2338      	movs	r3, #56	; 0x38
   22ba8:	18fb      	adds	r3, r7, r3
   22baa:	22ff      	movs	r2, #255	; 0xff
   22bac:	705a      	strb	r2, [r3, #1]
		wb[2] = 0xff;
   22bae:	2338      	movs	r3, #56	; 0x38
   22bb0:	18fb      	adds	r3, r7, r3
   22bb2:	22ff      	movs	r2, #255	; 0xff
   22bb4:	709a      	strb	r2, [r3, #2]
		wb[3] = 0xff;
   22bb6:	2338      	movs	r3, #56	; 0x38
   22bb8:	18fb      	adds	r3, r7, r3
   22bba:	22ff      	movs	r2, #255	; 0xff
   22bbc:	70da      	strb	r2, [r3, #3]
		len = 5;
   22bbe:	2305      	movs	r3, #5
   22bc0:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   22bc2:	e09f      	b.n	22d04 <spi_cmd_complete+0x244>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		wb[1] = (uint8_t)(adr >> 16);
   22bc4:	68bb      	ldr	r3, [r7, #8]
   22bc6:	0c1b      	lsrs	r3, r3, #16
   22bc8:	b2da      	uxtb	r2, r3
   22bca:	2338      	movs	r3, #56	; 0x38
   22bcc:	18fb      	adds	r3, r7, r3
   22bce:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   22bd0:	68bb      	ldr	r3, [r7, #8]
   22bd2:	0a1b      	lsrs	r3, r3, #8
   22bd4:	b2da      	uxtb	r2, r3
   22bd6:	2338      	movs	r3, #56	; 0x38
   22bd8:	18fb      	adds	r3, r7, r3
   22bda:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   22bdc:	68bb      	ldr	r3, [r7, #8]
   22bde:	b2da      	uxtb	r2, r3
   22be0:	2338      	movs	r3, #56	; 0x38
   22be2:	18fb      	adds	r3, r7, r3
   22be4:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 8);
   22be6:	683b      	ldr	r3, [r7, #0]
   22be8:	0a1b      	lsrs	r3, r3, #8
   22bea:	b2da      	uxtb	r2, r3
   22bec:	2338      	movs	r3, #56	; 0x38
   22bee:	18fb      	adds	r3, r7, r3
   22bf0:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz);
   22bf2:	683b      	ldr	r3, [r7, #0]
   22bf4:	b2da      	uxtb	r2, r3
   22bf6:	2338      	movs	r3, #56	; 0x38
   22bf8:	18fb      	adds	r3, r7, r3
   22bfa:	715a      	strb	r2, [r3, #5]
		len = 7;
   22bfc:	2307      	movs	r3, #7
   22bfe:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   22c00:	e080      	b.n	22d04 <spi_cmd_complete+0x244>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		wb[1] = (uint8_t)(adr >> 16);
   22c02:	68bb      	ldr	r3, [r7, #8]
   22c04:	0c1b      	lsrs	r3, r3, #16
   22c06:	b2da      	uxtb	r2, r3
   22c08:	2338      	movs	r3, #56	; 0x38
   22c0a:	18fb      	adds	r3, r7, r3
   22c0c:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   22c0e:	68bb      	ldr	r3, [r7, #8]
   22c10:	0a1b      	lsrs	r3, r3, #8
   22c12:	b2da      	uxtb	r2, r3
   22c14:	2338      	movs	r3, #56	; 0x38
   22c16:	18fb      	adds	r3, r7, r3
   22c18:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   22c1a:	68bb      	ldr	r3, [r7, #8]
   22c1c:	b2da      	uxtb	r2, r3
   22c1e:	2338      	movs	r3, #56	; 0x38
   22c20:	18fb      	adds	r3, r7, r3
   22c22:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 16);
   22c24:	683b      	ldr	r3, [r7, #0]
   22c26:	0c1b      	lsrs	r3, r3, #16
   22c28:	b2da      	uxtb	r2, r3
   22c2a:	2338      	movs	r3, #56	; 0x38
   22c2c:	18fb      	adds	r3, r7, r3
   22c2e:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz >> 8);
   22c30:	683b      	ldr	r3, [r7, #0]
   22c32:	0a1b      	lsrs	r3, r3, #8
   22c34:	b2da      	uxtb	r2, r3
   22c36:	2338      	movs	r3, #56	; 0x38
   22c38:	18fb      	adds	r3, r7, r3
   22c3a:	715a      	strb	r2, [r3, #5]
		wb[6] = (uint8_t)(sz);
   22c3c:	683b      	ldr	r3, [r7, #0]
   22c3e:	b2da      	uxtb	r2, r3
   22c40:	2338      	movs	r3, #56	; 0x38
   22c42:	18fb      	adds	r3, r7, r3
   22c44:	719a      	strb	r2, [r3, #6]
		len = 8;
   22c46:	2308      	movs	r3, #8
   22c48:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   22c4a:	e05b      	b.n	22d04 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		wb[1] = (uint8_t)(adr >> 8);
   22c4c:	68bb      	ldr	r3, [r7, #8]
   22c4e:	0a1b      	lsrs	r3, r3, #8
   22c50:	b2da      	uxtb	r2, r3
   22c52:	2338      	movs	r3, #56	; 0x38
   22c54:	18fb      	adds	r3, r7, r3
   22c56:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   22c58:	2388      	movs	r3, #136	; 0x88
   22c5a:	18fb      	adds	r3, r7, r3
   22c5c:	781b      	ldrb	r3, [r3, #0]
   22c5e:	2b01      	cmp	r3, #1
   22c60:	d109      	bne.n	22c76 <spi_cmd_complete+0x1b6>
   22c62:	2338      	movs	r3, #56	; 0x38
   22c64:	18fb      	adds	r3, r7, r3
   22c66:	785b      	ldrb	r3, [r3, #1]
   22c68:	2280      	movs	r2, #128	; 0x80
   22c6a:	4252      	negs	r2, r2
   22c6c:	4313      	orrs	r3, r2
   22c6e:	b2da      	uxtb	r2, r3
   22c70:	2338      	movs	r3, #56	; 0x38
   22c72:	18fb      	adds	r3, r7, r3
   22c74:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr);
   22c76:	68bb      	ldr	r3, [r7, #8]
   22c78:	b2da      	uxtb	r2, r3
   22c7a:	2338      	movs	r3, #56	; 0x38
   22c7c:	18fb      	adds	r3, r7, r3
   22c7e:	709a      	strb	r2, [r3, #2]
		wb[3] = b[3];
   22c80:	687b      	ldr	r3, [r7, #4]
   22c82:	78da      	ldrb	r2, [r3, #3]
   22c84:	2338      	movs	r3, #56	; 0x38
   22c86:	18fb      	adds	r3, r7, r3
   22c88:	70da      	strb	r2, [r3, #3]
		wb[4] = b[2];
   22c8a:	687b      	ldr	r3, [r7, #4]
   22c8c:	789a      	ldrb	r2, [r3, #2]
   22c8e:	2338      	movs	r3, #56	; 0x38
   22c90:	18fb      	adds	r3, r7, r3
   22c92:	711a      	strb	r2, [r3, #4]
		wb[5] = b[1];
   22c94:	687b      	ldr	r3, [r7, #4]
   22c96:	785a      	ldrb	r2, [r3, #1]
   22c98:	2338      	movs	r3, #56	; 0x38
   22c9a:	18fb      	adds	r3, r7, r3
   22c9c:	715a      	strb	r2, [r3, #5]
		wb[6] = b[0];
   22c9e:	687b      	ldr	r3, [r7, #4]
   22ca0:	781a      	ldrb	r2, [r3, #0]
   22ca2:	2338      	movs	r3, #56	; 0x38
   22ca4:	18fb      	adds	r3, r7, r3
   22ca6:	719a      	strb	r2, [r3, #6]
		len = 8;
   22ca8:	2308      	movs	r3, #8
   22caa:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   22cac:	e02a      	b.n	22d04 <spi_cmd_complete+0x244>
	case CMD_SINGLE_WRITE:			/* single word write */
		wb[1] = (uint8_t)(adr >> 16);
   22cae:	68bb      	ldr	r3, [r7, #8]
   22cb0:	0c1b      	lsrs	r3, r3, #16
   22cb2:	b2da      	uxtb	r2, r3
   22cb4:	2338      	movs	r3, #56	; 0x38
   22cb6:	18fb      	adds	r3, r7, r3
   22cb8:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   22cba:	68bb      	ldr	r3, [r7, #8]
   22cbc:	0a1b      	lsrs	r3, r3, #8
   22cbe:	b2da      	uxtb	r2, r3
   22cc0:	2338      	movs	r3, #56	; 0x38
   22cc2:	18fb      	adds	r3, r7, r3
   22cc4:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)(adr);
   22cc6:	68bb      	ldr	r3, [r7, #8]
   22cc8:	b2da      	uxtb	r2, r3
   22cca:	2338      	movs	r3, #56	; 0x38
   22ccc:	18fb      	adds	r3, r7, r3
   22cce:	70da      	strb	r2, [r3, #3]
		wb[4] = b[3];
   22cd0:	687b      	ldr	r3, [r7, #4]
   22cd2:	78da      	ldrb	r2, [r3, #3]
   22cd4:	2338      	movs	r3, #56	; 0x38
   22cd6:	18fb      	adds	r3, r7, r3
   22cd8:	711a      	strb	r2, [r3, #4]
		wb[5] = b[2];
   22cda:	687b      	ldr	r3, [r7, #4]
   22cdc:	789a      	ldrb	r2, [r3, #2]
   22cde:	2338      	movs	r3, #56	; 0x38
   22ce0:	18fb      	adds	r3, r7, r3
   22ce2:	715a      	strb	r2, [r3, #5]
		wb[6] = b[1];
   22ce4:	687b      	ldr	r3, [r7, #4]
   22ce6:	785a      	ldrb	r2, [r3, #1]
   22ce8:	2338      	movs	r3, #56	; 0x38
   22cea:	18fb      	adds	r3, r7, r3
   22cec:	719a      	strb	r2, [r3, #6]
		wb[7] = b[0];
   22cee:	687b      	ldr	r3, [r7, #4]
   22cf0:	781a      	ldrb	r2, [r3, #0]
   22cf2:	2338      	movs	r3, #56	; 0x38
   22cf4:	18fb      	adds	r3, r7, r3
   22cf6:	71da      	strb	r2, [r3, #7]
		len = 9;
   22cf8:	2309      	movs	r3, #9
   22cfa:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   22cfc:	e002      	b.n	22d04 <spi_cmd_complete+0x244>
	default:
		result = N_FAIL;
   22cfe:	2300      	movs	r3, #0
   22d00:	66bb      	str	r3, [r7, #104]	; 0x68
		break;
   22d02:	46c0      	nop			; (mov r8, r8)
	}

	if (result != N_OK) {
   22d04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   22d06:	2b01      	cmp	r3, #1
   22d08:	d001      	beq.n	22d0e <spi_cmd_complete+0x24e>
		return result;
   22d0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   22d0c:	e33a      	b.n	23384 <spi_cmd_complete+0x8c4>
	}

	if (!gu8Crc_off) {
   22d0e:	4b4d      	ldr	r3, [pc, #308]	; (22e44 <spi_cmd_complete+0x384>)
   22d10:	781b      	ldrb	r3, [r3, #0]
   22d12:	2b00      	cmp	r3, #0
   22d14:	d111      	bne.n	22d3a <spi_cmd_complete+0x27a>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
   22d16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   22d18:	1e5c      	subs	r4, r3, #1
   22d1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   22d1c:	3b01      	subs	r3, #1
   22d1e:	001a      	movs	r2, r3
   22d20:	2338      	movs	r3, #56	; 0x38
   22d22:	18fb      	adds	r3, r7, r3
   22d24:	0019      	movs	r1, r3
   22d26:	207f      	movs	r0, #127	; 0x7f
   22d28:	4b47      	ldr	r3, [pc, #284]	; (22e48 <spi_cmd_complete+0x388>)
   22d2a:	4798      	blx	r3
   22d2c:	0003      	movs	r3, r0
   22d2e:	18db      	adds	r3, r3, r3
   22d30:	b2da      	uxtb	r2, r3
   22d32:	2338      	movs	r3, #56	; 0x38
   22d34:	18fb      	adds	r3, r7, r3
   22d36:	551a      	strb	r2, [r3, r4]
   22d38:	e002      	b.n	22d40 <spi_cmd_complete+0x280>
	} else {
		len -=1;
   22d3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   22d3c:	3b01      	subs	r3, #1
   22d3e:	66fb      	str	r3, [r7, #108]	; 0x6c
#define NUM_DATA_HDR_BYTES (1)
#define NUM_DATA_BYTES (4)
#define NUM_CRC_BYTES (2)
#define NUM_DUMMY_BYTES (3)

	if ((cmd == CMD_RESET) ||
   22d40:	230f      	movs	r3, #15
   22d42:	18fb      	adds	r3, r7, r3
   22d44:	781b      	ldrb	r3, [r3, #0]
   22d46:	2bcf      	cmp	r3, #207	; 0xcf
   22d48:	d009      	beq.n	22d5e <spi_cmd_complete+0x29e>
   22d4a:	230f      	movs	r3, #15
   22d4c:	18fb      	adds	r3, r7, r3
   22d4e:	781b      	ldrb	r3, [r3, #0]
   22d50:	2bc5      	cmp	r3, #197	; 0xc5
   22d52:	d004      	beq.n	22d5e <spi_cmd_complete+0x29e>
		(cmd == CMD_TERMINATE) ||
   22d54:	230f      	movs	r3, #15
   22d56:	18fb      	adds	r3, r7, r3
   22d58:	781b      	ldrb	r3, [r3, #0]
   22d5a:	2bc6      	cmp	r3, #198	; 0xc6
   22d5c:	d103      	bne.n	22d66 <spi_cmd_complete+0x2a6>
		(cmd == CMD_REPEAT)) {
			len2 = len + (NUM_SKIP_BYTES + NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   22d5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   22d60:	3306      	adds	r3, #6
   22d62:	673b      	str	r3, [r7, #112]	; 0x70
   22d64:	e018      	b.n	22d98 <spi_cmd_complete+0x2d8>
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   22d66:	230f      	movs	r3, #15
   22d68:	18fb      	adds	r3, r7, r3
   22d6a:	781b      	ldrb	r3, [r3, #0]
   22d6c:	2bc4      	cmp	r3, #196	; 0xc4
   22d6e:	d004      	beq.n	22d7a <spi_cmd_complete+0x2ba>
   22d70:	230f      	movs	r3, #15
   22d72:	18fb      	adds	r3, r7, r3
   22d74:	781b      	ldrb	r3, [r3, #0]
   22d76:	2bca      	cmp	r3, #202	; 0xca
   22d78:	d10b      	bne.n	22d92 <spi_cmd_complete+0x2d2>
		if (!gu8Crc_off) {
   22d7a:	4b32      	ldr	r3, [pc, #200]	; (22e44 <spi_cmd_complete+0x384>)
   22d7c:	781b      	ldrb	r3, [r3, #0]
   22d7e:	2b00      	cmp	r3, #0
   22d80:	d103      	bne.n	22d8a <spi_cmd_complete+0x2ca>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   22d82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   22d84:	330c      	adds	r3, #12
   22d86:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   22d88:	e006      	b.n	22d98 <spi_cmd_complete+0x2d8>
			+ NUM_CRC_BYTES + NUM_DUMMY_BYTES);	
		} else {
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   22d8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   22d8c:	330a      	adds	r3, #10
   22d8e:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   22d90:	e002      	b.n	22d98 <spi_cmd_complete+0x2d8>
			+ NUM_DUMMY_BYTES);
		}
	} else {
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   22d92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   22d94:	3305      	adds	r3, #5
   22d96:	673b      	str	r3, [r7, #112]	; 0x70
	}
#undef NUM_DUMMY_BYTES

	if(len2 > (sizeof(wb)/sizeof(wb[0]))) {
   22d98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   22d9a:	2b20      	cmp	r3, #32
   22d9c:	d914      	bls.n	22dc8 <spi_cmd_complete+0x308>
		M2M_ERR("[nmi spi]: spi buffer size too small (%d) (%d)\n",
   22d9e:	23f7      	movs	r3, #247	; 0xf7
   22da0:	005a      	lsls	r2, r3, #1
   22da2:	492a      	ldr	r1, [pc, #168]	; (22e4c <spi_cmd_complete+0x38c>)
   22da4:	4b2a      	ldr	r3, [pc, #168]	; (22e50 <spi_cmd_complete+0x390>)
   22da6:	0018      	movs	r0, r3
   22da8:	4b2a      	ldr	r3, [pc, #168]	; (22e54 <spi_cmd_complete+0x394>)
   22daa:	4798      	blx	r3
   22dac:	6f39      	ldr	r1, [r7, #112]	; 0x70
   22dae:	4b2a      	ldr	r3, [pc, #168]	; (22e58 <spi_cmd_complete+0x398>)
   22db0:	2220      	movs	r2, #32
   22db2:	0018      	movs	r0, r3
   22db4:	4b27      	ldr	r3, [pc, #156]	; (22e54 <spi_cmd_complete+0x394>)
   22db6:	4798      	blx	r3
   22db8:	4b28      	ldr	r3, [pc, #160]	; (22e5c <spi_cmd_complete+0x39c>)
   22dba:	0018      	movs	r0, r3
   22dbc:	4b25      	ldr	r3, [pc, #148]	; (22e54 <spi_cmd_complete+0x394>)
   22dbe:	4798      	blx	r3
			len2, (sizeof(wb)/sizeof(wb[0])));
		result = N_FAIL;
   22dc0:	2300      	movs	r3, #0
   22dc2:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   22dc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   22dc6:	e2dd      	b.n	23384 <spi_cmd_complete+0x8c4>
	}
	/* zero spi write buffers. */
	for(wix = len; wix< len2; wix++) {
   22dc8:	2377      	movs	r3, #119	; 0x77
   22dca:	18fb      	adds	r3, r7, r3
   22dcc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   22dce:	701a      	strb	r2, [r3, #0]
   22dd0:	e00d      	b.n	22dee <spi_cmd_complete+0x32e>
		wb[wix] = 0;
   22dd2:	2377      	movs	r3, #119	; 0x77
   22dd4:	18fb      	adds	r3, r7, r3
   22dd6:	781b      	ldrb	r3, [r3, #0]
   22dd8:	2238      	movs	r2, #56	; 0x38
   22dda:	18ba      	adds	r2, r7, r2
   22ddc:	2100      	movs	r1, #0
   22dde:	54d1      	strb	r1, [r2, r3]
	for(wix = len; wix< len2; wix++) {
   22de0:	2377      	movs	r3, #119	; 0x77
   22de2:	18fb      	adds	r3, r7, r3
   22de4:	781a      	ldrb	r2, [r3, #0]
   22de6:	2377      	movs	r3, #119	; 0x77
   22de8:	18fb      	adds	r3, r7, r3
   22dea:	3201      	adds	r2, #1
   22dec:	701a      	strb	r2, [r3, #0]
   22dee:	2377      	movs	r3, #119	; 0x77
   22df0:	18fb      	adds	r3, r7, r3
   22df2:	781a      	ldrb	r2, [r3, #0]
   22df4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   22df6:	429a      	cmp	r2, r3
   22df8:	d3eb      	bcc.n	22dd2 <spi_cmd_complete+0x312>
	}
	rix = len;
   22dfa:	2376      	movs	r3, #118	; 0x76
   22dfc:	18fb      	adds	r3, r7, r3
   22dfe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   22e00:	701a      	strb	r2, [r3, #0]

	if (nmi_spi_rw(wb, rb, len2) != M2M_SUCCESS) {
   22e02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   22e04:	b29a      	uxth	r2, r3
   22e06:	2318      	movs	r3, #24
   22e08:	18f9      	adds	r1, r7, r3
   22e0a:	2338      	movs	r3, #56	; 0x38
   22e0c:	18fb      	adds	r3, r7, r3
   22e0e:	0018      	movs	r0, r3
   22e10:	4b13      	ldr	r3, [pc, #76]	; (22e60 <spi_cmd_complete+0x3a0>)
   22e12:	4798      	blx	r3
   22e14:	1e03      	subs	r3, r0, #0
   22e16:	d027      	beq.n	22e68 <spi_cmd_complete+0x3a8>
		M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   22e18:	23fa      	movs	r3, #250	; 0xfa
   22e1a:	33ff      	adds	r3, #255	; 0xff
   22e1c:	001a      	movs	r2, r3
   22e1e:	490b      	ldr	r1, [pc, #44]	; (22e4c <spi_cmd_complete+0x38c>)
   22e20:	4b0b      	ldr	r3, [pc, #44]	; (22e50 <spi_cmd_complete+0x390>)
   22e22:	0018      	movs	r0, r3
   22e24:	4b0b      	ldr	r3, [pc, #44]	; (22e54 <spi_cmd_complete+0x394>)
   22e26:	4798      	blx	r3
   22e28:	4b0e      	ldr	r3, [pc, #56]	; (22e64 <spi_cmd_complete+0x3a4>)
   22e2a:	0018      	movs	r0, r3
   22e2c:	4b09      	ldr	r3, [pc, #36]	; (22e54 <spi_cmd_complete+0x394>)
   22e2e:	4798      	blx	r3
   22e30:	4b0a      	ldr	r3, [pc, #40]	; (22e5c <spi_cmd_complete+0x39c>)
   22e32:	0018      	movs	r0, r3
   22e34:	4b07      	ldr	r3, [pc, #28]	; (22e54 <spi_cmd_complete+0x394>)
   22e36:	4798      	blx	r3
		result = N_FAIL;
   22e38:	2300      	movs	r3, #0
   22e3a:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   22e3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   22e3e:	e2a1      	b.n	23384 <spi_cmd_complete+0x8c4>
   22e40:	00038db4 	.word	0x00038db4
   22e44:	2000427c 	.word	0x2000427c
   22e48:	000224f5 	.word	0x000224f5
   22e4c:	00038e14 	.word	0x00038e14
   22e50:	00038800 	.word	0x00038800
   22e54:	0001cf49 	.word	0x0001cf49
   22e58:	000388c8 	.word	0x000388c8
   22e5c:	00038840 	.word	0x00038840
   22e60:	00022481 	.word	0x00022481
   22e64:	00038814 	.word	0x00038814
#endif

	/**
	Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   22e68:	230f      	movs	r3, #15
   22e6a:	18fb      	adds	r3, r7, r3
   22e6c:	781b      	ldrb	r3, [r3, #0]
   22e6e:	2bcf      	cmp	r3, #207	; 0xcf
   22e70:	d009      	beq.n	22e86 <spi_cmd_complete+0x3c6>
   22e72:	230f      	movs	r3, #15
   22e74:	18fb      	adds	r3, r7, r3
   22e76:	781b      	ldrb	r3, [r3, #0]
   22e78:	2bc5      	cmp	r3, #197	; 0xc5
   22e7a:	d004      	beq.n	22e86 <spi_cmd_complete+0x3c6>
		(cmd == CMD_TERMINATE) ||
   22e7c:	230f      	movs	r3, #15
   22e7e:	18fb      	adds	r3, r7, r3
   22e80:	781b      	ldrb	r3, [r3, #0]
   22e82:	2bc6      	cmp	r3, #198	; 0xc6
   22e84:	d106      	bne.n	22e94 <spi_cmd_complete+0x3d4>
		(cmd == CMD_REPEAT)) {
			rix++; /* skip 1 byte */
   22e86:	2376      	movs	r3, #118	; 0x76
   22e88:	18fb      	adds	r3, r7, r3
   22e8a:	781a      	ldrb	r2, [r3, #0]
   22e8c:	2376      	movs	r3, #118	; 0x76
   22e8e:	18fb      	adds	r3, r7, r3
   22e90:	3201      	adds	r2, #1
   22e92:	701a      	strb	r2, [r3, #0]
	}

	rsp = rb[rix++];
   22e94:	2376      	movs	r3, #118	; 0x76
   22e96:	18fb      	adds	r3, r7, r3
   22e98:	781b      	ldrb	r3, [r3, #0]
   22e9a:	2276      	movs	r2, #118	; 0x76
   22e9c:	18ba      	adds	r2, r7, r2
   22e9e:	1c59      	adds	r1, r3, #1
   22ea0:	7011      	strb	r1, [r2, #0]
   22ea2:	001a      	movs	r2, r3
   22ea4:	2318      	movs	r3, #24
   22ea6:	18fb      	adds	r3, r7, r3
   22ea8:	5c9a      	ldrb	r2, [r3, r2]
   22eaa:	2317      	movs	r3, #23
   22eac:	18fb      	adds	r3, r7, r3
   22eae:	701a      	strb	r2, [r3, #0]


	if (rsp != cmd) {
   22eb0:	2317      	movs	r3, #23
   22eb2:	18fb      	adds	r3, r7, r3
   22eb4:	781b      	ldrb	r3, [r3, #0]
   22eb6:	220f      	movs	r2, #15
   22eb8:	18ba      	adds	r2, r7, r2
   22eba:	7812      	ldrb	r2, [r2, #0]
   22ebc:	429a      	cmp	r2, r3
   22ebe:	d018      	beq.n	22ef2 <spi_cmd_complete+0x432>
		M2M_ERR("[nmi spi]: Failed cmd response, cmd (%02x), resp (%02x)\n", cmd, rsp);
   22ec0:	4add      	ldr	r2, [pc, #884]	; (23238 <spi_cmd_complete+0x778>)
   22ec2:	49de      	ldr	r1, [pc, #888]	; (2323c <spi_cmd_complete+0x77c>)
   22ec4:	4bde      	ldr	r3, [pc, #888]	; (23240 <spi_cmd_complete+0x780>)
   22ec6:	0018      	movs	r0, r3
   22ec8:	4bde      	ldr	r3, [pc, #888]	; (23244 <spi_cmd_complete+0x784>)
   22eca:	4798      	blx	r3
   22ecc:	230f      	movs	r3, #15
   22ece:	18fb      	adds	r3, r7, r3
   22ed0:	7819      	ldrb	r1, [r3, #0]
   22ed2:	2317      	movs	r3, #23
   22ed4:	18fb      	adds	r3, r7, r3
   22ed6:	781b      	ldrb	r3, [r3, #0]
   22ed8:	001a      	movs	r2, r3
   22eda:	4bdb      	ldr	r3, [pc, #876]	; (23248 <spi_cmd_complete+0x788>)
   22edc:	0018      	movs	r0, r3
   22ede:	4bd9      	ldr	r3, [pc, #868]	; (23244 <spi_cmd_complete+0x784>)
   22ee0:	4798      	blx	r3
   22ee2:	4bda      	ldr	r3, [pc, #872]	; (2324c <spi_cmd_complete+0x78c>)
   22ee4:	0018      	movs	r0, r3
   22ee6:	4bd7      	ldr	r3, [pc, #860]	; (23244 <spi_cmd_complete+0x784>)
   22ee8:	4798      	blx	r3
		result = N_FAIL;
   22eea:	2300      	movs	r3, #0
   22eec:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   22eee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   22ef0:	e248      	b.n	23384 <spi_cmd_complete+0x8c4>
	}

	/**
	State response
	**/
	rsp = rb[rix++];
   22ef2:	2376      	movs	r3, #118	; 0x76
   22ef4:	18fb      	adds	r3, r7, r3
   22ef6:	781b      	ldrb	r3, [r3, #0]
   22ef8:	2276      	movs	r2, #118	; 0x76
   22efa:	18ba      	adds	r2, r7, r2
   22efc:	1c59      	adds	r1, r3, #1
   22efe:	7011      	strb	r1, [r2, #0]
   22f00:	001a      	movs	r2, r3
   22f02:	2318      	movs	r3, #24
   22f04:	18fb      	adds	r3, r7, r3
   22f06:	5c9a      	ldrb	r2, [r3, r2]
   22f08:	2317      	movs	r3, #23
   22f0a:	18fb      	adds	r3, r7, r3
   22f0c:	701a      	strb	r2, [r3, #0]
	if (rsp != 0x00) {
   22f0e:	2317      	movs	r3, #23
   22f10:	18fb      	adds	r3, r7, r3
   22f12:	781b      	ldrb	r3, [r3, #0]
   22f14:	2b00      	cmp	r3, #0
   22f16:	d016      	beq.n	22f46 <spi_cmd_complete+0x486>
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
   22f18:	4acd      	ldr	r2, [pc, #820]	; (23250 <spi_cmd_complete+0x790>)
   22f1a:	49c8      	ldr	r1, [pc, #800]	; (2323c <spi_cmd_complete+0x77c>)
   22f1c:	4bc8      	ldr	r3, [pc, #800]	; (23240 <spi_cmd_complete+0x780>)
   22f1e:	0018      	movs	r0, r3
   22f20:	4bc8      	ldr	r3, [pc, #800]	; (23244 <spi_cmd_complete+0x784>)
   22f22:	4798      	blx	r3
   22f24:	2317      	movs	r3, #23
   22f26:	18fb      	adds	r3, r7, r3
   22f28:	781b      	ldrb	r3, [r3, #0]
   22f2a:	001a      	movs	r2, r3
   22f2c:	4bc9      	ldr	r3, [pc, #804]	; (23254 <spi_cmd_complete+0x794>)
   22f2e:	0011      	movs	r1, r2
   22f30:	0018      	movs	r0, r3
   22f32:	4bc4      	ldr	r3, [pc, #784]	; (23244 <spi_cmd_complete+0x784>)
   22f34:	4798      	blx	r3
   22f36:	4bc5      	ldr	r3, [pc, #788]	; (2324c <spi_cmd_complete+0x78c>)
   22f38:	0018      	movs	r0, r3
   22f3a:	4bc2      	ldr	r3, [pc, #776]	; (23244 <spi_cmd_complete+0x784>)
   22f3c:	4798      	blx	r3
		result = N_FAIL;
   22f3e:	2300      	movs	r3, #0
   22f40:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   22f42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   22f44:	e21e      	b.n	23384 <spi_cmd_complete+0x8c4>
	}

	if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)
   22f46:	230f      	movs	r3, #15
   22f48:	18fb      	adds	r3, r7, r3
   22f4a:	781b      	ldrb	r3, [r3, #0]
   22f4c:	2bc4      	cmp	r3, #196	; 0xc4
   22f4e:	d00f      	beq.n	22f70 <spi_cmd_complete+0x4b0>
   22f50:	230f      	movs	r3, #15
   22f52:	18fb      	adds	r3, r7, r3
   22f54:	781b      	ldrb	r3, [r3, #0]
   22f56:	2bca      	cmp	r3, #202	; 0xca
   22f58:	d00a      	beq.n	22f70 <spi_cmd_complete+0x4b0>
		|| (cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   22f5a:	230f      	movs	r3, #15
   22f5c:	18fb      	adds	r3, r7, r3
   22f5e:	781b      	ldrb	r3, [r3, #0]
   22f60:	2bc2      	cmp	r3, #194	; 0xc2
   22f62:	d005      	beq.n	22f70 <spi_cmd_complete+0x4b0>
   22f64:	230f      	movs	r3, #15
   22f66:	18fb      	adds	r3, r7, r3
   22f68:	781b      	ldrb	r3, [r3, #0]
   22f6a:	2bc8      	cmp	r3, #200	; 0xc8
   22f6c:	d000      	beq.n	22f70 <spi_cmd_complete+0x4b0>
   22f6e:	e208      	b.n	23382 <spi_cmd_complete+0x8c2>
			//uint16_t crc1, crc2;
			uint8_t crc[2];
			/**
			Data Respnose header
			**/
			retry = SPI_RESP_RETRY_COUNT;
   22f70:	230a      	movs	r3, #10
   22f72:	667b      	str	r3, [r7, #100]	; 0x64
			do {
				/* ensure there is room in buffer later to read data and crc */
				if(rix < len2) { 
   22f74:	2376      	movs	r3, #118	; 0x76
   22f76:	18fb      	adds	r3, r7, r3
   22f78:	781a      	ldrb	r2, [r3, #0]
   22f7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   22f7c:	429a      	cmp	r2, r3
   22f7e:	d218      	bcs.n	22fb2 <spi_cmd_complete+0x4f2>
					rsp = rb[rix++];
   22f80:	2376      	movs	r3, #118	; 0x76
   22f82:	18fb      	adds	r3, r7, r3
   22f84:	781b      	ldrb	r3, [r3, #0]
   22f86:	2276      	movs	r2, #118	; 0x76
   22f88:	18ba      	adds	r2, r7, r2
   22f8a:	1c59      	adds	r1, r3, #1
   22f8c:	7011      	strb	r1, [r2, #0]
   22f8e:	001a      	movs	r2, r3
   22f90:	2318      	movs	r3, #24
   22f92:	18fb      	adds	r3, r7, r3
   22f94:	5c9a      	ldrb	r2, [r3, r2]
   22f96:	2317      	movs	r3, #23
   22f98:	18fb      	adds	r3, r7, r3
   22f9a:	701a      	strb	r2, [r3, #0]
				} else {
					retry = 0;
					break;
				}
				if (((rsp >> 4) & 0xf) == 0xf)
   22f9c:	2317      	movs	r3, #23
   22f9e:	18fb      	adds	r3, r7, r3
   22fa0:	781b      	ldrb	r3, [r3, #0]
   22fa2:	091b      	lsrs	r3, r3, #4
   22fa4:	b2db      	uxtb	r3, r3
   22fa6:	001a      	movs	r2, r3
   22fa8:	230f      	movs	r3, #15
   22faa:	4013      	ands	r3, r2
   22fac:	2b0f      	cmp	r3, #15
   22fae:	d103      	bne.n	22fb8 <spi_cmd_complete+0x4f8>
					break;
   22fb0:	e007      	b.n	22fc2 <spi_cmd_complete+0x502>
					retry = 0;
   22fb2:	2300      	movs	r3, #0
   22fb4:	667b      	str	r3, [r7, #100]	; 0x64
					break;
   22fb6:	e004      	b.n	22fc2 <spi_cmd_complete+0x502>
			} while (retry--);
   22fb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   22fba:	1e5a      	subs	r2, r3, #1
   22fbc:	667a      	str	r2, [r7, #100]	; 0x64
   22fbe:	2b00      	cmp	r3, #0
   22fc0:	d1d8      	bne.n	22f74 <spi_cmd_complete+0x4b4>

			if (retry <= 0) {
   22fc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   22fc4:	2b00      	cmp	r3, #0
   22fc6:	dc18      	bgt.n	22ffa <spi_cmd_complete+0x53a>
				M2M_ERR("[nmi spi]: Error, data read response (%02x)\n", rsp);
   22fc8:	2395      	movs	r3, #149	; 0x95
   22fca:	009a      	lsls	r2, r3, #2
   22fcc:	499b      	ldr	r1, [pc, #620]	; (2323c <spi_cmd_complete+0x77c>)
   22fce:	4b9c      	ldr	r3, [pc, #624]	; (23240 <spi_cmd_complete+0x780>)
   22fd0:	0018      	movs	r0, r3
   22fd2:	4b9c      	ldr	r3, [pc, #624]	; (23244 <spi_cmd_complete+0x784>)
   22fd4:	4798      	blx	r3
   22fd6:	2317      	movs	r3, #23
   22fd8:	18fb      	adds	r3, r7, r3
   22fda:	781b      	ldrb	r3, [r3, #0]
   22fdc:	001a      	movs	r2, r3
   22fde:	4b9e      	ldr	r3, [pc, #632]	; (23258 <spi_cmd_complete+0x798>)
   22fe0:	0011      	movs	r1, r2
   22fe2:	0018      	movs	r0, r3
   22fe4:	4b97      	ldr	r3, [pc, #604]	; (23244 <spi_cmd_complete+0x784>)
   22fe6:	4798      	blx	r3
   22fe8:	4b98      	ldr	r3, [pc, #608]	; (2324c <spi_cmd_complete+0x78c>)
   22fea:	0018      	movs	r0, r3
   22fec:	4b95      	ldr	r3, [pc, #596]	; (23244 <spi_cmd_complete+0x784>)
   22fee:	4798      	blx	r3
				result = N_RESET;
   22ff0:	2301      	movs	r3, #1
   22ff2:	425b      	negs	r3, r3
   22ff4:	66bb      	str	r3, [r7, #104]	; 0x68
				return result;
   22ff6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   22ff8:	e1c4      	b.n	23384 <spi_cmd_complete+0x8c4>
			}

			if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   22ffa:	230f      	movs	r3, #15
   22ffc:	18fb      	adds	r3, r7, r3
   22ffe:	781b      	ldrb	r3, [r3, #0]
   23000:	2bc4      	cmp	r3, #196	; 0xc4
   23002:	d005      	beq.n	23010 <spi_cmd_complete+0x550>
   23004:	230f      	movs	r3, #15
   23006:	18fb      	adds	r3, r7, r3
   23008:	781b      	ldrb	r3, [r3, #0]
   2300a:	2bca      	cmp	r3, #202	; 0xca
   2300c:	d000      	beq.n	23010 <spi_cmd_complete+0x550>
   2300e:	e08e      	b.n	2312e <spi_cmd_complete+0x66e>
				/**
				Read bytes
				**/
				if((rix+3) < len2) { 
   23010:	2376      	movs	r3, #118	; 0x76
   23012:	18fb      	adds	r3, r7, r3
   23014:	781b      	ldrb	r3, [r3, #0]
   23016:	3303      	adds	r3, #3
   23018:	001a      	movs	r2, r3
   2301a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2301c:	429a      	cmp	r2, r3
   2301e:	d23c      	bcs.n	2309a <spi_cmd_complete+0x5da>
					b[0] = rb[rix++];
   23020:	2376      	movs	r3, #118	; 0x76
   23022:	18fb      	adds	r3, r7, r3
   23024:	781b      	ldrb	r3, [r3, #0]
   23026:	2276      	movs	r2, #118	; 0x76
   23028:	18ba      	adds	r2, r7, r2
   2302a:	1c59      	adds	r1, r3, #1
   2302c:	7011      	strb	r1, [r2, #0]
   2302e:	001a      	movs	r2, r3
   23030:	2318      	movs	r3, #24
   23032:	18fb      	adds	r3, r7, r3
   23034:	5c9a      	ldrb	r2, [r3, r2]
   23036:	687b      	ldr	r3, [r7, #4]
   23038:	701a      	strb	r2, [r3, #0]
					b[1] = rb[rix++];
   2303a:	687b      	ldr	r3, [r7, #4]
   2303c:	1c5a      	adds	r2, r3, #1
   2303e:	2376      	movs	r3, #118	; 0x76
   23040:	18fb      	adds	r3, r7, r3
   23042:	781b      	ldrb	r3, [r3, #0]
   23044:	2176      	movs	r1, #118	; 0x76
   23046:	1879      	adds	r1, r7, r1
   23048:	1c58      	adds	r0, r3, #1
   2304a:	7008      	strb	r0, [r1, #0]
   2304c:	0019      	movs	r1, r3
   2304e:	2318      	movs	r3, #24
   23050:	18fb      	adds	r3, r7, r3
   23052:	5c5b      	ldrb	r3, [r3, r1]
   23054:	7013      	strb	r3, [r2, #0]
					b[2] = rb[rix++];
   23056:	687b      	ldr	r3, [r7, #4]
   23058:	1c9a      	adds	r2, r3, #2
   2305a:	2376      	movs	r3, #118	; 0x76
   2305c:	18fb      	adds	r3, r7, r3
   2305e:	781b      	ldrb	r3, [r3, #0]
   23060:	2176      	movs	r1, #118	; 0x76
   23062:	1879      	adds	r1, r7, r1
   23064:	1c58      	adds	r0, r3, #1
   23066:	7008      	strb	r0, [r1, #0]
   23068:	0019      	movs	r1, r3
   2306a:	2318      	movs	r3, #24
   2306c:	18fb      	adds	r3, r7, r3
   2306e:	5c5b      	ldrb	r3, [r3, r1]
   23070:	7013      	strb	r3, [r2, #0]
					b[3] = rb[rix++];
   23072:	687b      	ldr	r3, [r7, #4]
   23074:	1cda      	adds	r2, r3, #3
   23076:	2376      	movs	r3, #118	; 0x76
   23078:	18fb      	adds	r3, r7, r3
   2307a:	781b      	ldrb	r3, [r3, #0]
   2307c:	2176      	movs	r1, #118	; 0x76
   2307e:	1879      	adds	r1, r7, r1
   23080:	1c58      	adds	r0, r3, #1
   23082:	7008      	strb	r0, [r1, #0]
   23084:	0019      	movs	r1, r3
   23086:	2318      	movs	r3, #24
   23088:	18fb      	adds	r3, r7, r3
   2308a:	5c5b      	ldrb	r3, [r3, r1]
   2308c:	7013      	strb	r3, [r2, #0]
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
					result = N_FAIL;
					return result;
				}

				if (!gu8Crc_off) {						
   2308e:	4b73      	ldr	r3, [pc, #460]	; (2325c <spi_cmd_complete+0x79c>)
   23090:	781b      	ldrb	r3, [r3, #0]
   23092:	2b00      	cmp	r3, #0
   23094:	d000      	beq.n	23098 <spi_cmd_complete+0x5d8>
   23096:	e174      	b.n	23382 <spi_cmd_complete+0x8c2>
   23098:	e011      	b.n	230be <spi_cmd_complete+0x5fe>
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
   2309a:	4a71      	ldr	r2, [pc, #452]	; (23260 <spi_cmd_complete+0x7a0>)
   2309c:	4967      	ldr	r1, [pc, #412]	; (2323c <spi_cmd_complete+0x77c>)
   2309e:	4b68      	ldr	r3, [pc, #416]	; (23240 <spi_cmd_complete+0x780>)
   230a0:	0018      	movs	r0, r3
   230a2:	4b68      	ldr	r3, [pc, #416]	; (23244 <spi_cmd_complete+0x784>)
   230a4:	4798      	blx	r3
   230a6:	4b6f      	ldr	r3, [pc, #444]	; (23264 <spi_cmd_complete+0x7a4>)
   230a8:	0018      	movs	r0, r3
   230aa:	4b66      	ldr	r3, [pc, #408]	; (23244 <spi_cmd_complete+0x784>)
   230ac:	4798      	blx	r3
   230ae:	4b67      	ldr	r3, [pc, #412]	; (2324c <spi_cmd_complete+0x78c>)
   230b0:	0018      	movs	r0, r3
   230b2:	4b64      	ldr	r3, [pc, #400]	; (23244 <spi_cmd_complete+0x784>)
   230b4:	4798      	blx	r3
					result = N_FAIL;
   230b6:	2300      	movs	r3, #0
   230b8:	66bb      	str	r3, [r7, #104]	; 0x68
					return result;
   230ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   230bc:	e162      	b.n	23384 <spi_cmd_complete+0x8c4>
					/**
					Read Crc
					**/
					if((rix+1) < len2) { 
   230be:	2376      	movs	r3, #118	; 0x76
   230c0:	18fb      	adds	r3, r7, r3
   230c2:	781b      	ldrb	r3, [r3, #0]
   230c4:	3301      	adds	r3, #1
   230c6:	001a      	movs	r2, r3
   230c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   230ca:	429a      	cmp	r2, r3
   230cc:	d21c      	bcs.n	23108 <spi_cmd_complete+0x648>
						crc[0] = rb[rix++];
   230ce:	2376      	movs	r3, #118	; 0x76
   230d0:	18fb      	adds	r3, r7, r3
   230d2:	781b      	ldrb	r3, [r3, #0]
   230d4:	2276      	movs	r2, #118	; 0x76
   230d6:	18ba      	adds	r2, r7, r2
   230d8:	1c59      	adds	r1, r3, #1
   230da:	7011      	strb	r1, [r2, #0]
   230dc:	001a      	movs	r2, r3
   230de:	2318      	movs	r3, #24
   230e0:	18fb      	adds	r3, r7, r3
   230e2:	5c9a      	ldrb	r2, [r3, r2]
   230e4:	2314      	movs	r3, #20
   230e6:	18fb      	adds	r3, r7, r3
   230e8:	701a      	strb	r2, [r3, #0]
						crc[1] = rb[rix++];
   230ea:	2376      	movs	r3, #118	; 0x76
   230ec:	18fb      	adds	r3, r7, r3
   230ee:	781b      	ldrb	r3, [r3, #0]
   230f0:	2276      	movs	r2, #118	; 0x76
   230f2:	18ba      	adds	r2, r7, r2
   230f4:	1c59      	adds	r1, r3, #1
   230f6:	7011      	strb	r1, [r2, #0]
   230f8:	001a      	movs	r2, r3
   230fa:	2318      	movs	r3, #24
   230fc:	18fb      	adds	r3, r7, r3
   230fe:	5c9a      	ldrb	r2, [r3, r2]
   23100:	2314      	movs	r3, #20
   23102:	18fb      	adds	r3, r7, r3
   23104:	705a      	strb	r2, [r3, #1]
				if (!gu8Crc_off) {						
   23106:	e13c      	b.n	23382 <spi_cmd_complete+0x8c2>
					} else {
						M2M_ERR("[nmi spi]: buffer overrun when reading crc.\n");
   23108:	239c      	movs	r3, #156	; 0x9c
   2310a:	009a      	lsls	r2, r3, #2
   2310c:	494b      	ldr	r1, [pc, #300]	; (2323c <spi_cmd_complete+0x77c>)
   2310e:	4b4c      	ldr	r3, [pc, #304]	; (23240 <spi_cmd_complete+0x780>)
   23110:	0018      	movs	r0, r3
   23112:	4b4c      	ldr	r3, [pc, #304]	; (23244 <spi_cmd_complete+0x784>)
   23114:	4798      	blx	r3
   23116:	4b54      	ldr	r3, [pc, #336]	; (23268 <spi_cmd_complete+0x7a8>)
   23118:	0018      	movs	r0, r3
   2311a:	4b4a      	ldr	r3, [pc, #296]	; (23244 <spi_cmd_complete+0x784>)
   2311c:	4798      	blx	r3
   2311e:	4b4b      	ldr	r3, [pc, #300]	; (2324c <spi_cmd_complete+0x78c>)
   23120:	0018      	movs	r0, r3
   23122:	4b48      	ldr	r3, [pc, #288]	; (23244 <spi_cmd_complete+0x784>)
   23124:	4798      	blx	r3
						result = N_FAIL;
   23126:	2300      	movs	r3, #0
   23128:	66bb      	str	r3, [r7, #104]	; 0x68
						return result;
   2312a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2312c:	e12a      	b.n	23384 <spi_cmd_complete+0x8c4>
					}
				}
			} else if((cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   2312e:	230f      	movs	r3, #15
   23130:	18fb      	adds	r3, r7, r3
   23132:	781b      	ldrb	r3, [r3, #0]
   23134:	2bc2      	cmp	r3, #194	; 0xc2
   23136:	d005      	beq.n	23144 <spi_cmd_complete+0x684>
   23138:	230f      	movs	r3, #15
   2313a:	18fb      	adds	r3, r7, r3
   2313c:	781b      	ldrb	r3, [r3, #0]
   2313e:	2bc8      	cmp	r3, #200	; 0xc8
   23140:	d000      	beq.n	23144 <spi_cmd_complete+0x684>
   23142:	e11e      	b.n	23382 <spi_cmd_complete+0x8c2>
				int ix;

				/* some data may be read in response to dummy bytes. */
				for(ix=0; (rix < len2) && (ix < sz);) {
   23144:	2300      	movs	r3, #0
   23146:	663b      	str	r3, [r7, #96]	; 0x60
   23148:	e011      	b.n	2316e <spi_cmd_complete+0x6ae>
					b[ix++] = rb[rix++];				
   2314a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   2314c:	1c5a      	adds	r2, r3, #1
   2314e:	663a      	str	r2, [r7, #96]	; 0x60
   23150:	001a      	movs	r2, r3
   23152:	687b      	ldr	r3, [r7, #4]
   23154:	189a      	adds	r2, r3, r2
   23156:	2376      	movs	r3, #118	; 0x76
   23158:	18fb      	adds	r3, r7, r3
   2315a:	781b      	ldrb	r3, [r3, #0]
   2315c:	2176      	movs	r1, #118	; 0x76
   2315e:	1879      	adds	r1, r7, r1
   23160:	1c58      	adds	r0, r3, #1
   23162:	7008      	strb	r0, [r1, #0]
   23164:	0019      	movs	r1, r3
   23166:	2318      	movs	r3, #24
   23168:	18fb      	adds	r3, r7, r3
   2316a:	5c5b      	ldrb	r3, [r3, r1]
   2316c:	7013      	strb	r3, [r2, #0]
				for(ix=0; (rix < len2) && (ix < sz);) {
   2316e:	2376      	movs	r3, #118	; 0x76
   23170:	18fb      	adds	r3, r7, r3
   23172:	781a      	ldrb	r2, [r3, #0]
   23174:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23176:	429a      	cmp	r2, r3
   23178:	d203      	bcs.n	23182 <spi_cmd_complete+0x6c2>
   2317a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   2317c:	683b      	ldr	r3, [r7, #0]
   2317e:	429a      	cmp	r2, r3
   23180:	d3e3      	bcc.n	2314a <spi_cmd_complete+0x68a>
				}
#if 0
				if(ix) M2M_INFO("ttt %d %d\n", sz, ix);
#endif
				sz -= ix;
   23182:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23184:	683a      	ldr	r2, [r7, #0]
   23186:	1ad3      	subs	r3, r2, r3
   23188:	603b      	str	r3, [r7, #0]

				if(sz > 0) {
   2318a:	683b      	ldr	r3, [r7, #0]
   2318c:	2b00      	cmp	r3, #0
   2318e:	d100      	bne.n	23192 <spi_cmd_complete+0x6d2>
   23190:	e0f1      	b.n	23376 <spi_cmd_complete+0x8b6>
					int nbytes;
					
					if (sz <= (DATA_PKT_SZ-ix)) {
   23192:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23194:	2280      	movs	r2, #128	; 0x80
   23196:	0192      	lsls	r2, r2, #6
   23198:	1ad3      	subs	r3, r2, r3
   2319a:	001a      	movs	r2, r3
   2319c:	683b      	ldr	r3, [r7, #0]
   2319e:	429a      	cmp	r2, r3
   231a0:	d302      	bcc.n	231a8 <spi_cmd_complete+0x6e8>
						nbytes = sz;
   231a2:	683b      	ldr	r3, [r7, #0]
   231a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   231a6:	e004      	b.n	231b2 <spi_cmd_complete+0x6f2>
					} else {
						nbytes = DATA_PKT_SZ-ix;
   231a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   231aa:	2280      	movs	r2, #128	; 0x80
   231ac:	0192      	lsls	r2, r2, #6
   231ae:	1ad3      	subs	r3, r2, r3
   231b0:	65fb      	str	r3, [r7, #92]	; 0x5c
					}

					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   231b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   231b4:	687a      	ldr	r2, [r7, #4]
   231b6:	18d3      	adds	r3, r2, r3
   231b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   231ba:	b292      	uxth	r2, r2
   231bc:	0011      	movs	r1, r2
   231be:	0018      	movs	r0, r3
   231c0:	4b2a      	ldr	r3, [pc, #168]	; (2326c <spi_cmd_complete+0x7ac>)
   231c2:	4798      	blx	r3
   231c4:	1e03      	subs	r3, r0, #0
   231c6:	d010      	beq.n	231ea <spi_cmd_complete+0x72a>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   231c8:	4a29      	ldr	r2, [pc, #164]	; (23270 <spi_cmd_complete+0x7b0>)
   231ca:	491c      	ldr	r1, [pc, #112]	; (2323c <spi_cmd_complete+0x77c>)
   231cc:	4b1c      	ldr	r3, [pc, #112]	; (23240 <spi_cmd_complete+0x780>)
   231ce:	0018      	movs	r0, r3
   231d0:	4b1c      	ldr	r3, [pc, #112]	; (23244 <spi_cmd_complete+0x784>)
   231d2:	4798      	blx	r3
   231d4:	4b27      	ldr	r3, [pc, #156]	; (23274 <spi_cmd_complete+0x7b4>)
   231d6:	0018      	movs	r0, r3
   231d8:	4b1a      	ldr	r3, [pc, #104]	; (23244 <spi_cmd_complete+0x784>)
   231da:	4798      	blx	r3
   231dc:	4b1b      	ldr	r3, [pc, #108]	; (2324c <spi_cmd_complete+0x78c>)
   231de:	0018      	movs	r0, r3
   231e0:	4b18      	ldr	r3, [pc, #96]	; (23244 <spi_cmd_complete+0x784>)
   231e2:	4798      	blx	r3
						result = N_FAIL;
   231e4:	2300      	movs	r3, #0
   231e6:	66bb      	str	r3, [r7, #104]	; 0x68
						goto _error_;
   231e8:	e0cb      	b.n	23382 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   231ea:	4b1c      	ldr	r3, [pc, #112]	; (2325c <spi_cmd_complete+0x79c>)
   231ec:	781b      	ldrb	r3, [r3, #0]
   231ee:	2b00      	cmp	r3, #0
   231f0:	d119      	bne.n	23226 <spi_cmd_complete+0x766>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   231f2:	2314      	movs	r3, #20
   231f4:	18fb      	adds	r3, r7, r3
   231f6:	2102      	movs	r1, #2
   231f8:	0018      	movs	r0, r3
   231fa:	4b1c      	ldr	r3, [pc, #112]	; (2326c <spi_cmd_complete+0x7ac>)
   231fc:	4798      	blx	r3
   231fe:	1e03      	subs	r3, r0, #0
   23200:	d011      	beq.n	23226 <spi_cmd_complete+0x766>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   23202:	23a6      	movs	r3, #166	; 0xa6
   23204:	009a      	lsls	r2, r3, #2
   23206:	490d      	ldr	r1, [pc, #52]	; (2323c <spi_cmd_complete+0x77c>)
   23208:	4b0d      	ldr	r3, [pc, #52]	; (23240 <spi_cmd_complete+0x780>)
   2320a:	0018      	movs	r0, r3
   2320c:	4b0d      	ldr	r3, [pc, #52]	; (23244 <spi_cmd_complete+0x784>)
   2320e:	4798      	blx	r3
   23210:	4b19      	ldr	r3, [pc, #100]	; (23278 <spi_cmd_complete+0x7b8>)
   23212:	0018      	movs	r0, r3
   23214:	4b0b      	ldr	r3, [pc, #44]	; (23244 <spi_cmd_complete+0x784>)
   23216:	4798      	blx	r3
   23218:	4b0c      	ldr	r3, [pc, #48]	; (2324c <spi_cmd_complete+0x78c>)
   2321a:	0018      	movs	r0, r3
   2321c:	4b09      	ldr	r3, [pc, #36]	; (23244 <spi_cmd_complete+0x784>)
   2321e:	4798      	blx	r3
							result = N_FAIL;
   23220:	2300      	movs	r3, #0
   23222:	66bb      	str	r3, [r7, #104]	; 0x68
							goto _error_;
   23224:	e0ad      	b.n	23382 <spi_cmd_complete+0x8c2>
						}
					}

					
					ix += nbytes;
   23226:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   23228:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   2322a:	18d3      	adds	r3, r2, r3
   2322c:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   2322e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   23230:	683a      	ldr	r2, [r7, #0]
   23232:	1ad3      	subs	r3, r2, r3
   23234:	603b      	str	r3, [r7, #0]
				}

				/*  if any data in left unread, then read the rest using normal DMA code.*/	
				while(sz > 0) {
   23236:	e09e      	b.n	23376 <spi_cmd_complete+0x8b6>
   23238:	0000022f 	.word	0x0000022f
   2323c:	00038e14 	.word	0x00038e14
   23240:	00038800 	.word	0x00038800
   23244:	0001cf49 	.word	0x0001cf49
   23248:	000388f8 	.word	0x000388f8
   2324c:	00038840 	.word	0x00038840
   23250:	00000239 	.word	0x00000239
   23254:	00038934 	.word	0x00038934
   23258:	00038968 	.word	0x00038968
   2325c:	2000427c 	.word	0x2000427c
   23260:	00000263 	.word	0x00000263
   23264:	00038998 	.word	0x00038998
   23268:	000389c8 	.word	0x000389c8
   2326c:	000223f9 	.word	0x000223f9
   23270:	0000028e 	.word	0x0000028e
   23274:	000389f8 	.word	0x000389f8
   23278:	00038a2c 	.word	0x00038a2c
					int nbytes;
			
					if (sz <= DATA_PKT_SZ) {
   2327c:	683a      	ldr	r2, [r7, #0]
   2327e:	2380      	movs	r3, #128	; 0x80
   23280:	019b      	lsls	r3, r3, #6
   23282:	429a      	cmp	r2, r3
   23284:	d802      	bhi.n	2328c <spi_cmd_complete+0x7cc>
						nbytes = sz;
   23286:	683b      	ldr	r3, [r7, #0]
   23288:	65bb      	str	r3, [r7, #88]	; 0x58
   2328a:	e002      	b.n	23292 <spi_cmd_complete+0x7d2>
					} else {
						nbytes = DATA_PKT_SZ;
   2328c:	2380      	movs	r3, #128	; 0x80
   2328e:	019b      	lsls	r3, r3, #6
   23290:	65bb      	str	r3, [r7, #88]	; 0x58
					handled above for the first DMA.
					**/
					/**
					Data Respnose header
					**/
					retry = SPI_RESP_RETRY_COUNT;
   23292:	230a      	movs	r3, #10
   23294:	667b      	str	r3, [r7, #100]	; 0x64
					do {
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
   23296:	2317      	movs	r3, #23
   23298:	18fb      	adds	r3, r7, r3
   2329a:	2101      	movs	r1, #1
   2329c:	0018      	movs	r0, r3
   2329e:	4b3b      	ldr	r3, [pc, #236]	; (2338c <spi_cmd_complete+0x8cc>)
   232a0:	4798      	blx	r3
   232a2:	1e03      	subs	r3, r0, #0
   232a4:	d011      	beq.n	232ca <spi_cmd_complete+0x80a>
							M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
   232a6:	23ae      	movs	r3, #174	; 0xae
   232a8:	009a      	lsls	r2, r3, #2
   232aa:	4939      	ldr	r1, [pc, #228]	; (23390 <spi_cmd_complete+0x8d0>)
   232ac:	4b39      	ldr	r3, [pc, #228]	; (23394 <spi_cmd_complete+0x8d4>)
   232ae:	0018      	movs	r0, r3
   232b0:	4b39      	ldr	r3, [pc, #228]	; (23398 <spi_cmd_complete+0x8d8>)
   232b2:	4798      	blx	r3
   232b4:	4b39      	ldr	r3, [pc, #228]	; (2339c <spi_cmd_complete+0x8dc>)
   232b6:	0018      	movs	r0, r3
   232b8:	4b37      	ldr	r3, [pc, #220]	; (23398 <spi_cmd_complete+0x8d8>)
   232ba:	4798      	blx	r3
   232bc:	4b38      	ldr	r3, [pc, #224]	; (233a0 <spi_cmd_complete+0x8e0>)
   232be:	0018      	movs	r0, r3
   232c0:	4b35      	ldr	r3, [pc, #212]	; (23398 <spi_cmd_complete+0x8d8>)
   232c2:	4798      	blx	r3
							result = N_FAIL;
   232c4:	2300      	movs	r3, #0
   232c6:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   232c8:	e010      	b.n	232ec <spi_cmd_complete+0x82c>
						}
						if (((rsp >> 4) & 0xf) == 0xf)
   232ca:	2317      	movs	r3, #23
   232cc:	18fb      	adds	r3, r7, r3
   232ce:	781b      	ldrb	r3, [r3, #0]
   232d0:	091b      	lsrs	r3, r3, #4
   232d2:	b2db      	uxtb	r3, r3
   232d4:	001a      	movs	r2, r3
   232d6:	230f      	movs	r3, #15
   232d8:	4013      	ands	r3, r2
   232da:	2b0f      	cmp	r3, #15
   232dc:	d005      	beq.n	232ea <spi_cmd_complete+0x82a>
							break;
					} while (retry--);
   232de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   232e0:	1e5a      	subs	r2, r3, #1
   232e2:	667a      	str	r2, [r7, #100]	; 0x64
   232e4:	2b00      	cmp	r3, #0
   232e6:	d1d6      	bne.n	23296 <spi_cmd_complete+0x7d6>
   232e8:	e000      	b.n	232ec <spi_cmd_complete+0x82c>
							break;
   232ea:	46c0      	nop			; (mov r8, r8)

					if (result == N_FAIL)
   232ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   232ee:	2b00      	cmp	r3, #0
   232f0:	d046      	beq.n	23380 <spi_cmd_complete+0x8c0>


					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   232f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   232f4:	687a      	ldr	r2, [r7, #4]
   232f6:	18d3      	adds	r3, r2, r3
   232f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
   232fa:	b292      	uxth	r2, r2
   232fc:	0011      	movs	r1, r2
   232fe:	0018      	movs	r0, r3
   23300:	4b22      	ldr	r3, [pc, #136]	; (2338c <spi_cmd_complete+0x8cc>)
   23302:	4798      	blx	r3
   23304:	1e03      	subs	r3, r0, #0
   23306:	d011      	beq.n	2332c <spi_cmd_complete+0x86c>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   23308:	23b2      	movs	r3, #178	; 0xb2
   2330a:	009a      	lsls	r2, r3, #2
   2330c:	4920      	ldr	r1, [pc, #128]	; (23390 <spi_cmd_complete+0x8d0>)
   2330e:	4b21      	ldr	r3, [pc, #132]	; (23394 <spi_cmd_complete+0x8d4>)
   23310:	0018      	movs	r0, r3
   23312:	4b21      	ldr	r3, [pc, #132]	; (23398 <spi_cmd_complete+0x8d8>)
   23314:	4798      	blx	r3
   23316:	4b23      	ldr	r3, [pc, #140]	; (233a4 <spi_cmd_complete+0x8e4>)
   23318:	0018      	movs	r0, r3
   2331a:	4b1f      	ldr	r3, [pc, #124]	; (23398 <spi_cmd_complete+0x8d8>)
   2331c:	4798      	blx	r3
   2331e:	4b20      	ldr	r3, [pc, #128]	; (233a0 <spi_cmd_complete+0x8e0>)
   23320:	0018      	movs	r0, r3
   23322:	4b1d      	ldr	r3, [pc, #116]	; (23398 <spi_cmd_complete+0x8d8>)
   23324:	4798      	blx	r3
						result = N_FAIL;
   23326:	2300      	movs	r3, #0
   23328:	66bb      	str	r3, [r7, #104]	; 0x68
						break;
   2332a:	e02a      	b.n	23382 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   2332c:	4b1e      	ldr	r3, [pc, #120]	; (233a8 <spi_cmd_complete+0x8e8>)
   2332e:	781b      	ldrb	r3, [r3, #0]
   23330:	2b00      	cmp	r3, #0
   23332:	d118      	bne.n	23366 <spi_cmd_complete+0x8a6>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   23334:	2314      	movs	r3, #20
   23336:	18fb      	adds	r3, r7, r3
   23338:	2102      	movs	r1, #2
   2333a:	0018      	movs	r0, r3
   2333c:	4b13      	ldr	r3, [pc, #76]	; (2338c <spi_cmd_complete+0x8cc>)
   2333e:	4798      	blx	r3
   23340:	1e03      	subs	r3, r0, #0
   23342:	d010      	beq.n	23366 <spi_cmd_complete+0x8a6>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   23344:	4a19      	ldr	r2, [pc, #100]	; (233ac <spi_cmd_complete+0x8ec>)
   23346:	4912      	ldr	r1, [pc, #72]	; (23390 <spi_cmd_complete+0x8d0>)
   23348:	4b12      	ldr	r3, [pc, #72]	; (23394 <spi_cmd_complete+0x8d4>)
   2334a:	0018      	movs	r0, r3
   2334c:	4b12      	ldr	r3, [pc, #72]	; (23398 <spi_cmd_complete+0x8d8>)
   2334e:	4798      	blx	r3
   23350:	4b17      	ldr	r3, [pc, #92]	; (233b0 <spi_cmd_complete+0x8f0>)
   23352:	0018      	movs	r0, r3
   23354:	4b10      	ldr	r3, [pc, #64]	; (23398 <spi_cmd_complete+0x8d8>)
   23356:	4798      	blx	r3
   23358:	4b11      	ldr	r3, [pc, #68]	; (233a0 <spi_cmd_complete+0x8e0>)
   2335a:	0018      	movs	r0, r3
   2335c:	4b0e      	ldr	r3, [pc, #56]	; (23398 <spi_cmd_complete+0x8d8>)
   2335e:	4798      	blx	r3
							result = N_FAIL;
   23360:	2300      	movs	r3, #0
   23362:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   23364:	e00d      	b.n	23382 <spi_cmd_complete+0x8c2>
						}
					}

					ix += nbytes;
   23366:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   23368:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   2336a:	18d3      	adds	r3, r2, r3
   2336c:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   2336e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   23370:	683a      	ldr	r2, [r7, #0]
   23372:	1ad3      	subs	r3, r2, r3
   23374:	603b      	str	r3, [r7, #0]
				while(sz > 0) {
   23376:	683b      	ldr	r3, [r7, #0]
   23378:	2b00      	cmp	r3, #0
   2337a:	d000      	beq.n	2337e <spi_cmd_complete+0x8be>
   2337c:	e77e      	b.n	2327c <spi_cmd_complete+0x7bc>
   2337e:	e000      	b.n	23382 <spi_cmd_complete+0x8c2>
						break;
   23380:	46c0      	nop			; (mov r8, r8)
				}
			}
	}
_error_:
	return result;
   23382:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
   23384:	0018      	movs	r0, r3
   23386:	46bd      	mov	sp, r7
   23388:	b01f      	add	sp, #124	; 0x7c
   2338a:	bd90      	pop	{r4, r7, pc}
   2338c:	000223f9 	.word	0x000223f9
   23390:	00038e14 	.word	0x00038e14
   23394:	00038800 	.word	0x00038800
   23398:	0001cf49 	.word	0x0001cf49
   2339c:	00038a64 	.word	0x00038a64
   233a0:	00038840 	.word	0x00038840
   233a4:	000389f8 	.word	0x000389f8
   233a8:	2000427c 	.word	0x2000427c
   233ac:	000002d2 	.word	0x000002d2
   233b0:	00038a2c 	.word	0x00038a2c

000233b4 <spi_data_write>:

	return result;
}

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
   233b4:	b580      	push	{r7, lr}
   233b6:	b086      	sub	sp, #24
   233b8:	af00      	add	r7, sp, #0
   233ba:	6078      	str	r0, [r7, #4]
   233bc:	000a      	movs	r2, r1
   233be:	1cbb      	adds	r3, r7, #2
   233c0:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
   233c2:	2313      	movs	r3, #19
   233c4:	18fb      	adds	r3, r7, r3
   233c6:	2201      	movs	r2, #1
   233c8:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
   233ca:	230c      	movs	r3, #12
   233cc:	18fb      	adds	r3, r7, r3
   233ce:	2200      	movs	r2, #0
   233d0:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
   233d2:	2316      	movs	r3, #22
   233d4:	18fb      	adds	r3, r7, r3
   233d6:	2200      	movs	r2, #0
   233d8:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
   233da:	1cbb      	adds	r3, r7, #2
   233dc:	881a      	ldrh	r2, [r3, #0]
   233de:	2380      	movs	r3, #128	; 0x80
   233e0:	019b      	lsls	r3, r3, #6
   233e2:	429a      	cmp	r2, r3
   233e4:	d805      	bhi.n	233f2 <spi_data_write+0x3e>
			nbytes = sz;
   233e6:	2314      	movs	r3, #20
   233e8:	18fb      	adds	r3, r7, r3
   233ea:	1cba      	adds	r2, r7, #2
   233ec:	8812      	ldrh	r2, [r2, #0]
   233ee:	801a      	strh	r2, [r3, #0]
   233f0:	e004      	b.n	233fc <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
   233f2:	2314      	movs	r3, #20
   233f4:	18fb      	adds	r3, r7, r3
   233f6:	2280      	movs	r2, #128	; 0x80
   233f8:	0192      	lsls	r2, r2, #6
   233fa:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
   233fc:	2311      	movs	r3, #17
   233fe:	18fb      	adds	r3, r7, r3
   23400:	22f0      	movs	r2, #240	; 0xf0
   23402:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
   23404:	2316      	movs	r3, #22
   23406:	18fb      	adds	r3, r7, r3
   23408:	2200      	movs	r2, #0
   2340a:	5e9b      	ldrsh	r3, [r3, r2]
   2340c:	2b00      	cmp	r3, #0
   2340e:	d10f      	bne.n	23430 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
   23410:	1cbb      	adds	r3, r7, #2
   23412:	881a      	ldrh	r2, [r3, #0]
   23414:	2380      	movs	r3, #128	; 0x80
   23416:	019b      	lsls	r3, r3, #6
   23418:	429a      	cmp	r2, r3
   2341a:	d804      	bhi.n	23426 <spi_data_write+0x72>
				order = 0x3;
   2341c:	2312      	movs	r3, #18
   2341e:	18fb      	adds	r3, r7, r3
   23420:	2203      	movs	r2, #3
   23422:	701a      	strb	r2, [r3, #0]
   23424:	e013      	b.n	2344e <spi_data_write+0x9a>
			else
				order = 0x1;
   23426:	2312      	movs	r3, #18
   23428:	18fb      	adds	r3, r7, r3
   2342a:	2201      	movs	r2, #1
   2342c:	701a      	strb	r2, [r3, #0]
   2342e:	e00e      	b.n	2344e <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
   23430:	1cbb      	adds	r3, r7, #2
   23432:	881a      	ldrh	r2, [r3, #0]
   23434:	2380      	movs	r3, #128	; 0x80
   23436:	019b      	lsls	r3, r3, #6
   23438:	429a      	cmp	r2, r3
   2343a:	d804      	bhi.n	23446 <spi_data_write+0x92>
				order = 0x3;
   2343c:	2312      	movs	r3, #18
   2343e:	18fb      	adds	r3, r7, r3
   23440:	2203      	movs	r2, #3
   23442:	701a      	strb	r2, [r3, #0]
   23444:	e003      	b.n	2344e <spi_data_write+0x9a>
			else
				order = 0x2;
   23446:	2312      	movs	r3, #18
   23448:	18fb      	adds	r3, r7, r3
   2344a:	2202      	movs	r2, #2
   2344c:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
   2344e:	2311      	movs	r3, #17
   23450:	18fb      	adds	r3, r7, r3
   23452:	781a      	ldrb	r2, [r3, #0]
   23454:	2312      	movs	r3, #18
   23456:	18fb      	adds	r3, r7, r3
   23458:	781b      	ldrb	r3, [r3, #0]
   2345a:	4313      	orrs	r3, r2
   2345c:	b2da      	uxtb	r2, r3
   2345e:	2311      	movs	r3, #17
   23460:	18fb      	adds	r3, r7, r3
   23462:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
   23464:	2311      	movs	r3, #17
   23466:	18fb      	adds	r3, r7, r3
   23468:	2101      	movs	r1, #1
   2346a:	0018      	movs	r0, r3
   2346c:	4b3c      	ldr	r3, [pc, #240]	; (23560 <spi_data_write+0x1ac>)
   2346e:	4798      	blx	r3
   23470:	1e03      	subs	r3, r0, #0
   23472:	d012      	beq.n	2349a <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
   23474:	4a3b      	ldr	r2, [pc, #236]	; (23564 <spi_data_write+0x1b0>)
   23476:	493c      	ldr	r1, [pc, #240]	; (23568 <spi_data_write+0x1b4>)
   23478:	4b3c      	ldr	r3, [pc, #240]	; (2356c <spi_data_write+0x1b8>)
   2347a:	0018      	movs	r0, r3
   2347c:	4b3c      	ldr	r3, [pc, #240]	; (23570 <spi_data_write+0x1bc>)
   2347e:	4798      	blx	r3
   23480:	4b3c      	ldr	r3, [pc, #240]	; (23574 <spi_data_write+0x1c0>)
   23482:	0018      	movs	r0, r3
   23484:	4b3a      	ldr	r3, [pc, #232]	; (23570 <spi_data_write+0x1bc>)
   23486:	4798      	blx	r3
   23488:	4b3b      	ldr	r3, [pc, #236]	; (23578 <spi_data_write+0x1c4>)
   2348a:	0018      	movs	r0, r3
   2348c:	4b38      	ldr	r3, [pc, #224]	; (23570 <spi_data_write+0x1bc>)
   2348e:	4798      	blx	r3
			result = N_FAIL;
   23490:	2313      	movs	r3, #19
   23492:	18fb      	adds	r3, r7, r3
   23494:	2200      	movs	r2, #0
   23496:	701a      	strb	r2, [r3, #0]
			break;
   23498:	e059      	b.n	2354e <spi_data_write+0x19a>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
   2349a:	2316      	movs	r3, #22
   2349c:	18fb      	adds	r3, r7, r3
   2349e:	2200      	movs	r2, #0
   234a0:	5e9b      	ldrsh	r3, [r3, r2]
   234a2:	687a      	ldr	r2, [r7, #4]
   234a4:	18d2      	adds	r2, r2, r3
   234a6:	2314      	movs	r3, #20
   234a8:	18fb      	adds	r3, r7, r3
   234aa:	881b      	ldrh	r3, [r3, #0]
   234ac:	0019      	movs	r1, r3
   234ae:	0010      	movs	r0, r2
   234b0:	4b2b      	ldr	r3, [pc, #172]	; (23560 <spi_data_write+0x1ac>)
   234b2:	4798      	blx	r3
   234b4:	1e03      	subs	r3, r0, #0
   234b6:	d012      	beq.n	234de <spi_data_write+0x12a>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
   234b8:	4a30      	ldr	r2, [pc, #192]	; (2357c <spi_data_write+0x1c8>)
   234ba:	492b      	ldr	r1, [pc, #172]	; (23568 <spi_data_write+0x1b4>)
   234bc:	4b2b      	ldr	r3, [pc, #172]	; (2356c <spi_data_write+0x1b8>)
   234be:	0018      	movs	r0, r3
   234c0:	4b2b      	ldr	r3, [pc, #172]	; (23570 <spi_data_write+0x1bc>)
   234c2:	4798      	blx	r3
   234c4:	4b2e      	ldr	r3, [pc, #184]	; (23580 <spi_data_write+0x1cc>)
   234c6:	0018      	movs	r0, r3
   234c8:	4b29      	ldr	r3, [pc, #164]	; (23570 <spi_data_write+0x1bc>)
   234ca:	4798      	blx	r3
   234cc:	4b2a      	ldr	r3, [pc, #168]	; (23578 <spi_data_write+0x1c4>)
   234ce:	0018      	movs	r0, r3
   234d0:	4b27      	ldr	r3, [pc, #156]	; (23570 <spi_data_write+0x1bc>)
   234d2:	4798      	blx	r3
			result = N_FAIL;
   234d4:	2313      	movs	r3, #19
   234d6:	18fb      	adds	r3, r7, r3
   234d8:	2200      	movs	r2, #0
   234da:	701a      	strb	r2, [r3, #0]
			break;
   234dc:	e037      	b.n	2354e <spi_data_write+0x19a>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
   234de:	4b29      	ldr	r3, [pc, #164]	; (23584 <spi_data_write+0x1d0>)
   234e0:	781b      	ldrb	r3, [r3, #0]
   234e2:	2b00      	cmp	r3, #0
   234e4:	d11b      	bne.n	2351e <spi_data_write+0x16a>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
   234e6:	230c      	movs	r3, #12
   234e8:	18fb      	adds	r3, r7, r3
   234ea:	2102      	movs	r1, #2
   234ec:	0018      	movs	r0, r3
   234ee:	4b1c      	ldr	r3, [pc, #112]	; (23560 <spi_data_write+0x1ac>)
   234f0:	4798      	blx	r3
   234f2:	1e03      	subs	r3, r0, #0
   234f4:	d013      	beq.n	2351e <spi_data_write+0x16a>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
   234f6:	23d7      	movs	r3, #215	; 0xd7
   234f8:	009a      	lsls	r2, r3, #2
   234fa:	491b      	ldr	r1, [pc, #108]	; (23568 <spi_data_write+0x1b4>)
   234fc:	4b1b      	ldr	r3, [pc, #108]	; (2356c <spi_data_write+0x1b8>)
   234fe:	0018      	movs	r0, r3
   23500:	4b1b      	ldr	r3, [pc, #108]	; (23570 <spi_data_write+0x1bc>)
   23502:	4798      	blx	r3
   23504:	4b20      	ldr	r3, [pc, #128]	; (23588 <spi_data_write+0x1d4>)
   23506:	0018      	movs	r0, r3
   23508:	4b19      	ldr	r3, [pc, #100]	; (23570 <spi_data_write+0x1bc>)
   2350a:	4798      	blx	r3
   2350c:	4b1a      	ldr	r3, [pc, #104]	; (23578 <spi_data_write+0x1c4>)
   2350e:	0018      	movs	r0, r3
   23510:	4b17      	ldr	r3, [pc, #92]	; (23570 <spi_data_write+0x1bc>)
   23512:	4798      	blx	r3
				result = N_FAIL;
   23514:	2313      	movs	r3, #19
   23516:	18fb      	adds	r3, r7, r3
   23518:	2200      	movs	r2, #0
   2351a:	701a      	strb	r2, [r3, #0]
				break;
   2351c:	e017      	b.n	2354e <spi_data_write+0x19a>
			}
		}

		ix += nbytes;
   2351e:	2316      	movs	r3, #22
   23520:	18fb      	adds	r3, r7, r3
   23522:	881a      	ldrh	r2, [r3, #0]
   23524:	2314      	movs	r3, #20
   23526:	18fb      	adds	r3, r7, r3
   23528:	881b      	ldrh	r3, [r3, #0]
   2352a:	18d3      	adds	r3, r2, r3
   2352c:	b29a      	uxth	r2, r3
   2352e:	2316      	movs	r3, #22
   23530:	18fb      	adds	r3, r7, r3
   23532:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
   23534:	1cbb      	adds	r3, r7, #2
   23536:	1cb9      	adds	r1, r7, #2
   23538:	2214      	movs	r2, #20
   2353a:	18ba      	adds	r2, r7, r2
   2353c:	8809      	ldrh	r1, [r1, #0]
   2353e:	8812      	ldrh	r2, [r2, #0]
   23540:	1a8a      	subs	r2, r1, r2
   23542:	801a      	strh	r2, [r3, #0]
	} while (sz);
   23544:	1cbb      	adds	r3, r7, #2
   23546:	881b      	ldrh	r3, [r3, #0]
   23548:	2b00      	cmp	r3, #0
   2354a:	d000      	beq.n	2354e <spi_data_write+0x19a>
   2354c:	e745      	b.n	233da <spi_data_write+0x26>


	return result;
   2354e:	2313      	movs	r3, #19
   23550:	18fb      	adds	r3, r7, r3
   23552:	781b      	ldrb	r3, [r3, #0]
   23554:	b25b      	sxtb	r3, r3
}
   23556:	0018      	movs	r0, r3
   23558:	46bd      	mov	sp, r7
   2355a:	b006      	add	sp, #24
   2355c:	bd80      	pop	{r7, pc}
   2355e:	46c0      	nop			; (mov r8, r8)
   23560:	0002243d 	.word	0x0002243d
   23564:	00000349 	.word	0x00000349
   23568:	00038e28 	.word	0x00038e28
   2356c:	00038800 	.word	0x00038800
   23570:	0001cf49 	.word	0x0001cf49
   23574:	00038ac8 	.word	0x00038ac8
   23578:	00038840 	.word	0x00038840
   2357c:	00000352 	.word	0x00000352
   23580:	00038b00 	.word	0x00038b00
   23584:	2000427c 	.word	0x2000427c
   23588:	00038b34 	.word	0x00038b34

0002358c <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
   2358c:	b590      	push	{r4, r7, lr}
   2358e:	b087      	sub	sp, #28
   23590:	af02      	add	r7, sp, #8
   23592:	6078      	str	r0, [r7, #4]
   23594:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   23596:	230f      	movs	r3, #15
   23598:	18fb      	adds	r3, r7, r3
   2359a:	220a      	movs	r2, #10
   2359c:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   2359e:	230c      	movs	r3, #12
   235a0:	18fb      	adds	r3, r7, r3
   235a2:	2201      	movs	r2, #1
   235a4:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
   235a6:	230e      	movs	r3, #14
   235a8:	18fb      	adds	r3, r7, r3
   235aa:	22c9      	movs	r2, #201	; 0xc9
   235ac:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
   235ae:	230d      	movs	r3, #13
   235b0:	18fb      	adds	r3, r7, r3
   235b2:	2200      	movs	r2, #0
   235b4:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
   235b6:	687b      	ldr	r3, [r7, #4]
   235b8:	2b30      	cmp	r3, #48	; 0x30
   235ba:	d808      	bhi.n	235ce <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
   235bc:	230e      	movs	r3, #14
   235be:	18fb      	adds	r3, r7, r3
   235c0:	22c3      	movs	r2, #195	; 0xc3
   235c2:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   235c4:	230d      	movs	r3, #13
   235c6:	18fb      	adds	r3, r7, r3
   235c8:	2201      	movs	r2, #1
   235ca:	701a      	strb	r2, [r3, #0]
   235cc:	e007      	b.n	235de <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
   235ce:	230e      	movs	r3, #14
   235d0:	18fb      	adds	r3, r7, r3
   235d2:	22c9      	movs	r2, #201	; 0xc9
   235d4:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   235d6:	230d      	movs	r3, #13
   235d8:	18fb      	adds	r3, r7, r3
   235da:	2200      	movs	r2, #0
   235dc:	701a      	strb	r2, [r3, #0]
		goto _FAIL_;
	}

#else

	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
   235de:	003a      	movs	r2, r7
   235e0:	6879      	ldr	r1, [r7, #4]
   235e2:	230e      	movs	r3, #14
   235e4:	18fb      	adds	r3, r7, r3
   235e6:	7818      	ldrb	r0, [r3, #0]
   235e8:	230d      	movs	r3, #13
   235ea:	18fb      	adds	r3, r7, r3
   235ec:	781b      	ldrb	r3, [r3, #0]
   235ee:	9300      	str	r3, [sp, #0]
   235f0:	2304      	movs	r3, #4
   235f2:	4c2e      	ldr	r4, [pc, #184]	; (236ac <spi_write_reg+0x120>)
   235f4:	47a0      	blx	r4
   235f6:	0002      	movs	r2, r0
   235f8:	230c      	movs	r3, #12
   235fa:	18fb      	adds	r3, r7, r3
   235fc:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   235fe:	230c      	movs	r3, #12
   23600:	18fb      	adds	r3, r7, r3
   23602:	781b      	ldrb	r3, [r3, #0]
   23604:	b25b      	sxtb	r3, r3
   23606:	2b01      	cmp	r3, #1
   23608:	d010      	beq.n	2362c <spi_write_reg+0xa0>
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
   2360a:	4a29      	ldr	r2, [pc, #164]	; (236b0 <spi_write_reg+0x124>)
   2360c:	4929      	ldr	r1, [pc, #164]	; (236b4 <spi_write_reg+0x128>)
   2360e:	4b2a      	ldr	r3, [pc, #168]	; (236b8 <spi_write_reg+0x12c>)
   23610:	0018      	movs	r0, r3
   23612:	4b2a      	ldr	r3, [pc, #168]	; (236bc <spi_write_reg+0x130>)
   23614:	4798      	blx	r3
   23616:	687a      	ldr	r2, [r7, #4]
   23618:	4b29      	ldr	r3, [pc, #164]	; (236c0 <spi_write_reg+0x134>)
   2361a:	0011      	movs	r1, r2
   2361c:	0018      	movs	r0, r3
   2361e:	4b27      	ldr	r3, [pc, #156]	; (236bc <spi_write_reg+0x130>)
   23620:	4798      	blx	r3
   23622:	4b28      	ldr	r3, [pc, #160]	; (236c4 <spi_write_reg+0x138>)
   23624:	0018      	movs	r0, r3
   23626:	4b25      	ldr	r3, [pc, #148]	; (236bc <spi_write_reg+0x130>)
   23628:	4798      	blx	r3
		goto _FAIL_;
   2362a:	46c0      	nop			; (mov r8, r8)
	}

#endif
_FAIL_:
	if(result != N_OK)
   2362c:	230c      	movs	r3, #12
   2362e:	18fb      	adds	r3, r7, r3
   23630:	781b      	ldrb	r3, [r3, #0]
   23632:	b25b      	sxtb	r3, r3
   23634:	2b01      	cmp	r3, #1
   23636:	d030      	beq.n	2369a <spi_write_reg+0x10e>
	{
		nm_bsp_sleep(1);
   23638:	2001      	movs	r0, #1
   2363a:	4b23      	ldr	r3, [pc, #140]	; (236c8 <spi_write_reg+0x13c>)
   2363c:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   2363e:	2300      	movs	r3, #0
   23640:	9300      	str	r3, [sp, #0]
   23642:	2300      	movs	r3, #0
   23644:	2200      	movs	r2, #0
   23646:	2100      	movs	r1, #0
   23648:	20cf      	movs	r0, #207	; 0xcf
   2364a:	4c20      	ldr	r4, [pc, #128]	; (236cc <spi_write_reg+0x140>)
   2364c:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   2364e:	20cf      	movs	r0, #207	; 0xcf
   23650:	4b1f      	ldr	r3, [pc, #124]	; (236d0 <spi_write_reg+0x144>)
   23652:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
   23654:	23ea      	movs	r3, #234	; 0xea
   23656:	009a      	lsls	r2, r3, #2
   23658:	4916      	ldr	r1, [pc, #88]	; (236b4 <spi_write_reg+0x128>)
   2365a:	4b17      	ldr	r3, [pc, #92]	; (236b8 <spi_write_reg+0x12c>)
   2365c:	0018      	movs	r0, r3
   2365e:	4b17      	ldr	r3, [pc, #92]	; (236bc <spi_write_reg+0x130>)
   23660:	4798      	blx	r3
   23662:	230f      	movs	r3, #15
   23664:	18fb      	adds	r3, r7, r3
   23666:	7819      	ldrb	r1, [r3, #0]
   23668:	683b      	ldr	r3, [r7, #0]
   2366a:	687a      	ldr	r2, [r7, #4]
   2366c:	4819      	ldr	r0, [pc, #100]	; (236d4 <spi_write_reg+0x148>)
   2366e:	4c13      	ldr	r4, [pc, #76]	; (236bc <spi_write_reg+0x130>)
   23670:	47a0      	blx	r4
   23672:	4b14      	ldr	r3, [pc, #80]	; (236c4 <spi_write_reg+0x138>)
   23674:	0018      	movs	r0, r3
   23676:	4b11      	ldr	r3, [pc, #68]	; (236bc <spi_write_reg+0x130>)
   23678:	4798      	blx	r3
		nm_bsp_sleep(1);
   2367a:	2001      	movs	r0, #1
   2367c:	4b12      	ldr	r3, [pc, #72]	; (236c8 <spi_write_reg+0x13c>)
   2367e:	4798      	blx	r3
		retry--;
   23680:	230f      	movs	r3, #15
   23682:	18fb      	adds	r3, r7, r3
   23684:	781a      	ldrb	r2, [r3, #0]
   23686:	230f      	movs	r3, #15
   23688:	18fb      	adds	r3, r7, r3
   2368a:	3a01      	subs	r2, #1
   2368c:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   2368e:	230f      	movs	r3, #15
   23690:	18fb      	adds	r3, r7, r3
   23692:	781b      	ldrb	r3, [r3, #0]
   23694:	2b00      	cmp	r3, #0
   23696:	d000      	beq.n	2369a <spi_write_reg+0x10e>
   23698:	e78d      	b.n	235b6 <spi_write_reg+0x2a>
	}

	return result;
   2369a:	230c      	movs	r3, #12
   2369c:	18fb      	adds	r3, r7, r3
   2369e:	781b      	ldrb	r3, [r3, #0]
   236a0:	b25b      	sxtb	r3, r3
}
   236a2:	0018      	movs	r0, r3
   236a4:	46bd      	mov	sp, r7
   236a6:	b005      	add	sp, #20
   236a8:	bd90      	pop	{r4, r7, pc}
   236aa:	46c0      	nop			; (mov r8, r8)
   236ac:	00022ac1 	.word	0x00022ac1
   236b0:	0000039d 	.word	0x0000039d
   236b4:	00038e38 	.word	0x00038e38
   236b8:	00038800 	.word	0x00038800
   236bc:	0001cf49 	.word	0x0001cf49
   236c0:	00038b6c 	.word	0x00038b6c
   236c4:	00038840 	.word	0x00038840
   236c8:	0001f401 	.word	0x0001f401
   236cc:	00022545 	.word	0x00022545
   236d0:	00022985 	.word	0x00022985
   236d4:	00038b98 	.word	0x00038b98

000236d8 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
   236d8:	b590      	push	{r4, r7, lr}
   236da:	b089      	sub	sp, #36	; 0x24
   236dc:	af02      	add	r7, sp, #8
   236de:	60f8      	str	r0, [r7, #12]
   236e0:	60b9      	str	r1, [r7, #8]
   236e2:	1dbb      	adds	r3, r7, #6
   236e4:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   236e6:	2316      	movs	r3, #22
   236e8:	18fb      	adds	r3, r7, r3
   236ea:	220a      	movs	r2, #10
   236ec:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
   236ee:	2315      	movs	r3, #21
   236f0:	18fb      	adds	r3, r7, r3
   236f2:	22c7      	movs	r2, #199	; 0xc7
   236f4:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, NULL, size, 0);
   236f6:	1dbb      	adds	r3, r7, #6
   236f8:	881a      	ldrh	r2, [r3, #0]
   236fa:	68f9      	ldr	r1, [r7, #12]
   236fc:	2315      	movs	r3, #21
   236fe:	18fb      	adds	r3, r7, r3
   23700:	7818      	ldrb	r0, [r3, #0]
   23702:	2300      	movs	r3, #0
   23704:	9300      	str	r3, [sp, #0]
   23706:	0013      	movs	r3, r2
   23708:	2200      	movs	r2, #0
   2370a:	4c4d      	ldr	r4, [pc, #308]	; (23840 <nm_spi_write+0x168>)
   2370c:	47a0      	blx	r4
   2370e:	0002      	movs	r2, r0
   23710:	2317      	movs	r3, #23
   23712:	18fb      	adds	r3, r7, r3
   23714:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   23716:	2317      	movs	r3, #23
   23718:	18fb      	adds	r3, r7, r3
   2371a:	781b      	ldrb	r3, [r3, #0]
   2371c:	b25b      	sxtb	r3, r3
   2371e:	2b01      	cmp	r3, #1
   23720:	d010      	beq.n	23744 <nm_spi_write+0x6c>
		M2M_ERR( "[nmi spi]: Failed cmd, write block (%08x)...\n", addr);
   23722:	4a48      	ldr	r2, [pc, #288]	; (23844 <nm_spi_write+0x16c>)
   23724:	4948      	ldr	r1, [pc, #288]	; (23848 <nm_spi_write+0x170>)
   23726:	4b49      	ldr	r3, [pc, #292]	; (2384c <nm_spi_write+0x174>)
   23728:	0018      	movs	r0, r3
   2372a:	4b49      	ldr	r3, [pc, #292]	; (23850 <nm_spi_write+0x178>)
   2372c:	4798      	blx	r3
   2372e:	68fa      	ldr	r2, [r7, #12]
   23730:	4b48      	ldr	r3, [pc, #288]	; (23854 <nm_spi_write+0x17c>)
   23732:	0011      	movs	r1, r2
   23734:	0018      	movs	r0, r3
   23736:	4b46      	ldr	r3, [pc, #280]	; (23850 <nm_spi_write+0x178>)
   23738:	4798      	blx	r3
   2373a:	4b47      	ldr	r3, [pc, #284]	; (23858 <nm_spi_write+0x180>)
   2373c:	0018      	movs	r0, r3
   2373e:	4b44      	ldr	r3, [pc, #272]	; (23850 <nm_spi_write+0x178>)
   23740:	4798      	blx	r3
		goto _FAIL_;
   23742:	e03e      	b.n	237c2 <nm_spi_write+0xea>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
   23744:	2317      	movs	r3, #23
   23746:	18fc      	adds	r4, r7, r3
   23748:	1dbb      	adds	r3, r7, #6
   2374a:	881a      	ldrh	r2, [r3, #0]
   2374c:	68bb      	ldr	r3, [r7, #8]
   2374e:	0011      	movs	r1, r2
   23750:	0018      	movs	r0, r3
   23752:	4b42      	ldr	r3, [pc, #264]	; (2385c <nm_spi_write+0x184>)
   23754:	4798      	blx	r3
   23756:	0003      	movs	r3, r0
   23758:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   2375a:	2317      	movs	r3, #23
   2375c:	18fb      	adds	r3, r7, r3
   2375e:	781b      	ldrb	r3, [r3, #0]
   23760:	b25b      	sxtb	r3, r3
   23762:	2b01      	cmp	r3, #1
   23764:	d00e      	beq.n	23784 <nm_spi_write+0xac>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   23766:	4a3e      	ldr	r2, [pc, #248]	; (23860 <nm_spi_write+0x188>)
   23768:	4937      	ldr	r1, [pc, #220]	; (23848 <nm_spi_write+0x170>)
   2376a:	4b38      	ldr	r3, [pc, #224]	; (2384c <nm_spi_write+0x174>)
   2376c:	0018      	movs	r0, r3
   2376e:	4b38      	ldr	r3, [pc, #224]	; (23850 <nm_spi_write+0x178>)
   23770:	4798      	blx	r3
   23772:	4b3c      	ldr	r3, [pc, #240]	; (23864 <nm_spi_write+0x18c>)
   23774:	0018      	movs	r0, r3
   23776:	4b36      	ldr	r3, [pc, #216]	; (23850 <nm_spi_write+0x178>)
   23778:	4798      	blx	r3
   2377a:	4b37      	ldr	r3, [pc, #220]	; (23858 <nm_spi_write+0x180>)
   2377c:	0018      	movs	r0, r3
   2377e:	4b34      	ldr	r3, [pc, #208]	; (23850 <nm_spi_write+0x178>)
   23780:	4798      	blx	r3
		goto _FAIL_;
   23782:	e01e      	b.n	237c2 <nm_spi_write+0xea>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
   23784:	2317      	movs	r3, #23
   23786:	18fc      	adds	r4, r7, r3
   23788:	2315      	movs	r3, #21
   2378a:	18fb      	adds	r3, r7, r3
   2378c:	781b      	ldrb	r3, [r3, #0]
   2378e:	0018      	movs	r0, r3
   23790:	4b35      	ldr	r3, [pc, #212]	; (23868 <nm_spi_write+0x190>)
   23792:	4798      	blx	r3
   23794:	0003      	movs	r3, r0
   23796:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   23798:	2317      	movs	r3, #23
   2379a:	18fb      	adds	r3, r7, r3
   2379c:	781b      	ldrb	r3, [r3, #0]
   2379e:	b25b      	sxtb	r3, r3
   237a0:	2b01      	cmp	r3, #1
   237a2:	d00e      	beq.n	237c2 <nm_spi_write+0xea>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   237a4:	4a31      	ldr	r2, [pc, #196]	; (2386c <nm_spi_write+0x194>)
   237a6:	4928      	ldr	r1, [pc, #160]	; (23848 <nm_spi_write+0x170>)
   237a8:	4b28      	ldr	r3, [pc, #160]	; (2384c <nm_spi_write+0x174>)
   237aa:	0018      	movs	r0, r3
   237ac:	4b28      	ldr	r3, [pc, #160]	; (23850 <nm_spi_write+0x178>)
   237ae:	4798      	blx	r3
   237b0:	4b2c      	ldr	r3, [pc, #176]	; (23864 <nm_spi_write+0x18c>)
   237b2:	0018      	movs	r0, r3
   237b4:	4b26      	ldr	r3, [pc, #152]	; (23850 <nm_spi_write+0x178>)
   237b6:	4798      	blx	r3
   237b8:	4b27      	ldr	r3, [pc, #156]	; (23858 <nm_spi_write+0x180>)
   237ba:	0018      	movs	r0, r3
   237bc:	4b24      	ldr	r3, [pc, #144]	; (23850 <nm_spi_write+0x178>)
   237be:	4798      	blx	r3
		goto _FAIL_;
   237c0:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
   237c2:	2317      	movs	r3, #23
   237c4:	18fb      	adds	r3, r7, r3
   237c6:	781b      	ldrb	r3, [r3, #0]
   237c8:	b25b      	sxtb	r3, r3
   237ca:	2b01      	cmp	r3, #1
   237cc:	d030      	beq.n	23830 <nm_spi_write+0x158>
	{
		nm_bsp_sleep(1);
   237ce:	2001      	movs	r0, #1
   237d0:	4b27      	ldr	r3, [pc, #156]	; (23870 <nm_spi_write+0x198>)
   237d2:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   237d4:	2300      	movs	r3, #0
   237d6:	9300      	str	r3, [sp, #0]
   237d8:	2300      	movs	r3, #0
   237da:	2200      	movs	r2, #0
   237dc:	2100      	movs	r1, #0
   237de:	20cf      	movs	r0, #207	; 0xcf
   237e0:	4c24      	ldr	r4, [pc, #144]	; (23874 <nm_spi_write+0x19c>)
   237e2:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   237e4:	20cf      	movs	r0, #207	; 0xcf
   237e6:	4b24      	ldr	r3, [pc, #144]	; (23878 <nm_spi_write+0x1a0>)
   237e8:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   237ea:	4a24      	ldr	r2, [pc, #144]	; (2387c <nm_spi_write+0x1a4>)
   237ec:	4916      	ldr	r1, [pc, #88]	; (23848 <nm_spi_write+0x170>)
   237ee:	4b17      	ldr	r3, [pc, #92]	; (2384c <nm_spi_write+0x174>)
   237f0:	0018      	movs	r0, r3
   237f2:	4b17      	ldr	r3, [pc, #92]	; (23850 <nm_spi_write+0x178>)
   237f4:	4798      	blx	r3
   237f6:	2316      	movs	r3, #22
   237f8:	18fb      	adds	r3, r7, r3
   237fa:	7819      	ldrb	r1, [r3, #0]
   237fc:	1dbb      	adds	r3, r7, #6
   237fe:	881b      	ldrh	r3, [r3, #0]
   23800:	68fa      	ldr	r2, [r7, #12]
   23802:	481f      	ldr	r0, [pc, #124]	; (23880 <nm_spi_write+0x1a8>)
   23804:	4c12      	ldr	r4, [pc, #72]	; (23850 <nm_spi_write+0x178>)
   23806:	47a0      	blx	r4
   23808:	4b13      	ldr	r3, [pc, #76]	; (23858 <nm_spi_write+0x180>)
   2380a:	0018      	movs	r0, r3
   2380c:	4b10      	ldr	r3, [pc, #64]	; (23850 <nm_spi_write+0x178>)
   2380e:	4798      	blx	r3
		nm_bsp_sleep(1);
   23810:	2001      	movs	r0, #1
   23812:	4b17      	ldr	r3, [pc, #92]	; (23870 <nm_spi_write+0x198>)
   23814:	4798      	blx	r3
		retry--;
   23816:	2316      	movs	r3, #22
   23818:	18fb      	adds	r3, r7, r3
   2381a:	781a      	ldrb	r2, [r3, #0]
   2381c:	2316      	movs	r3, #22
   2381e:	18fb      	adds	r3, r7, r3
   23820:	3a01      	subs	r2, #1
   23822:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   23824:	2316      	movs	r3, #22
   23826:	18fb      	adds	r3, r7, r3
   23828:	781b      	ldrb	r3, [r3, #0]
   2382a:	2b00      	cmp	r3, #0
   2382c:	d000      	beq.n	23830 <nm_spi_write+0x158>
   2382e:	e762      	b.n	236f6 <nm_spi_write+0x1e>
	}


	return result;
   23830:	2317      	movs	r3, #23
   23832:	18fb      	adds	r3, r7, r3
   23834:	781b      	ldrb	r3, [r3, #0]
   23836:	b25b      	sxtb	r3, r3
}
   23838:	0018      	movs	r0, r3
   2383a:	46bd      	mov	sp, r7
   2383c:	b007      	add	sp, #28
   2383e:	bd90      	pop	{r4, r7, pc}
   23840:	00022ac1 	.word	0x00022ac1
   23844:	000003cf 	.word	0x000003cf
   23848:	00038e48 	.word	0x00038e48
   2384c:	00038800 	.word	0x00038800
   23850:	0001cf49 	.word	0x0001cf49
   23854:	00038bb4 	.word	0x00038bb4
   23858:	00038840 	.word	0x00038840
   2385c:	000233b5 	.word	0x000233b5
   23860:	000003d9 	.word	0x000003d9
   23864:	00038be4 	.word	0x00038be4
   23868:	00022885 	.word	0x00022885
   2386c:	000003e1 	.word	0x000003e1
   23870:	0001f401 	.word	0x0001f401
   23874:	00022545 	.word	0x00022545
   23878:	00022985 	.word	0x00022985
   2387c:	000003eb 	.word	0x000003eb
   23880:	00038c0c 	.word	0x00038c0c

00023884 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
   23884:	b590      	push	{r4, r7, lr}
   23886:	b087      	sub	sp, #28
   23888:	af02      	add	r7, sp, #8
   2388a:	6078      	str	r0, [r7, #4]
   2388c:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   2388e:	230f      	movs	r3, #15
   23890:	18fb      	adds	r3, r7, r3
   23892:	220a      	movs	r2, #10
   23894:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   23896:	230c      	movs	r3, #12
   23898:	18fb      	adds	r3, r7, r3
   2389a:	2201      	movs	r2, #1
   2389c:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
   2389e:	230e      	movs	r3, #14
   238a0:	18fb      	adds	r3, r7, r3
   238a2:	22ca      	movs	r2, #202	; 0xca
   238a4:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
   238a6:	230d      	movs	r3, #13
   238a8:	18fb      	adds	r3, r7, r3
   238aa:	2200      	movs	r2, #0
   238ac:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
   238ae:	687b      	ldr	r3, [r7, #4]
   238b0:	2bff      	cmp	r3, #255	; 0xff
   238b2:	d808      	bhi.n	238c6 <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
   238b4:	230e      	movs	r3, #14
   238b6:	18fb      	adds	r3, r7, r3
   238b8:	22c4      	movs	r2, #196	; 0xc4
   238ba:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   238bc:	230d      	movs	r3, #13
   238be:	18fb      	adds	r3, r7, r3
   238c0:	2201      	movs	r2, #1
   238c2:	701a      	strb	r2, [r3, #0]
   238c4:	e007      	b.n	238d6 <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
   238c6:	230e      	movs	r3, #14
   238c8:	18fb      	adds	r3, r7, r3
   238ca:	22ca      	movs	r2, #202	; 0xca
   238cc:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   238ce:	230d      	movs	r3, #13
   238d0:	18fb      	adds	r3, r7, r3
   238d2:	2200      	movs	r2, #0
   238d4:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
   238d6:	2308      	movs	r3, #8
   238d8:	18fa      	adds	r2, r7, r3
   238da:	6879      	ldr	r1, [r7, #4]
   238dc:	230e      	movs	r3, #14
   238de:	18fb      	adds	r3, r7, r3
   238e0:	7818      	ldrb	r0, [r3, #0]
   238e2:	230d      	movs	r3, #13
   238e4:	18fb      	adds	r3, r7, r3
   238e6:	781b      	ldrb	r3, [r3, #0]
   238e8:	9300      	str	r3, [sp, #0]
   238ea:	2304      	movs	r3, #4
   238ec:	4c37      	ldr	r4, [pc, #220]	; (239cc <spi_read_reg+0x148>)
   238ee:	47a0      	blx	r4
   238f0:	0002      	movs	r2, r0
   238f2:	230c      	movs	r3, #12
   238f4:	18fb      	adds	r3, r7, r3
   238f6:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   238f8:	230c      	movs	r3, #12
   238fa:	18fb      	adds	r3, r7, r3
   238fc:	781b      	ldrb	r3, [r3, #0]
   238fe:	b25b      	sxtb	r3, r3
   23900:	2b01      	cmp	r3, #1
   23902:	d010      	beq.n	23926 <spi_read_reg+0xa2>
		M2M_ERR( "[nmi spi]: Failed cmd, read reg (%08x)...\n", addr);
   23904:	4a32      	ldr	r2, [pc, #200]	; (239d0 <spi_read_reg+0x14c>)
   23906:	4933      	ldr	r1, [pc, #204]	; (239d4 <spi_read_reg+0x150>)
   23908:	4b33      	ldr	r3, [pc, #204]	; (239d8 <spi_read_reg+0x154>)
   2390a:	0018      	movs	r0, r3
   2390c:	4b33      	ldr	r3, [pc, #204]	; (239dc <spi_read_reg+0x158>)
   2390e:	4798      	blx	r3
   23910:	687a      	ldr	r2, [r7, #4]
   23912:	4b33      	ldr	r3, [pc, #204]	; (239e0 <spi_read_reg+0x15c>)
   23914:	0011      	movs	r1, r2
   23916:	0018      	movs	r0, r3
   23918:	4b30      	ldr	r3, [pc, #192]	; (239dc <spi_read_reg+0x158>)
   2391a:	4798      	blx	r3
   2391c:	4b31      	ldr	r3, [pc, #196]	; (239e4 <spi_read_reg+0x160>)
   2391e:	0018      	movs	r0, r3
   23920:	4b2e      	ldr	r3, [pc, #184]	; (239dc <spi_read_reg+0x158>)
   23922:	4798      	blx	r3
		goto _FAIL_;
   23924:	e014      	b.n	23950 <spi_read_reg+0xcc>
	}

#endif

	*u32data = tmp[0] |
   23926:	2308      	movs	r3, #8
   23928:	18fb      	adds	r3, r7, r3
   2392a:	781b      	ldrb	r3, [r3, #0]
   2392c:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
   2392e:	2308      	movs	r3, #8
   23930:	18fb      	adds	r3, r7, r3
   23932:	785b      	ldrb	r3, [r3, #1]
   23934:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
   23936:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
   23938:	2308      	movs	r3, #8
   2393a:	18fb      	adds	r3, r7, r3
   2393c:	789b      	ldrb	r3, [r3, #2]
   2393e:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
   23940:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
   23942:	2308      	movs	r3, #8
   23944:	18fb      	adds	r3, r7, r3
   23946:	78db      	ldrb	r3, [r3, #3]
   23948:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
   2394a:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
   2394c:	683b      	ldr	r3, [r7, #0]
   2394e:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
   23950:	230c      	movs	r3, #12
   23952:	18fb      	adds	r3, r7, r3
   23954:	781b      	ldrb	r3, [r3, #0]
   23956:	b25b      	sxtb	r3, r3
   23958:	2b01      	cmp	r3, #1
   2395a:	d02f      	beq.n	239bc <spi_read_reg+0x138>
	{
		
		nm_bsp_sleep(1);
   2395c:	2001      	movs	r0, #1
   2395e:	4b22      	ldr	r3, [pc, #136]	; (239e8 <spi_read_reg+0x164>)
   23960:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   23962:	2300      	movs	r3, #0
   23964:	9300      	str	r3, [sp, #0]
   23966:	2300      	movs	r3, #0
   23968:	2200      	movs	r2, #0
   2396a:	2100      	movs	r1, #0
   2396c:	20cf      	movs	r0, #207	; 0xcf
   2396e:	4c1f      	ldr	r4, [pc, #124]	; (239ec <spi_read_reg+0x168>)
   23970:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   23972:	20cf      	movs	r0, #207	; 0xcf
   23974:	4b1e      	ldr	r3, [pc, #120]	; (239f0 <spi_read_reg+0x16c>)
   23976:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
   23978:	4a1e      	ldr	r2, [pc, #120]	; (239f4 <spi_read_reg+0x170>)
   2397a:	4916      	ldr	r1, [pc, #88]	; (239d4 <spi_read_reg+0x150>)
   2397c:	4b16      	ldr	r3, [pc, #88]	; (239d8 <spi_read_reg+0x154>)
   2397e:	0018      	movs	r0, r3
   23980:	4b16      	ldr	r3, [pc, #88]	; (239dc <spi_read_reg+0x158>)
   23982:	4798      	blx	r3
   23984:	230f      	movs	r3, #15
   23986:	18fb      	adds	r3, r7, r3
   23988:	7819      	ldrb	r1, [r3, #0]
   2398a:	687a      	ldr	r2, [r7, #4]
   2398c:	4b1a      	ldr	r3, [pc, #104]	; (239f8 <spi_read_reg+0x174>)
   2398e:	0018      	movs	r0, r3
   23990:	4b12      	ldr	r3, [pc, #72]	; (239dc <spi_read_reg+0x158>)
   23992:	4798      	blx	r3
   23994:	4b13      	ldr	r3, [pc, #76]	; (239e4 <spi_read_reg+0x160>)
   23996:	0018      	movs	r0, r3
   23998:	4b10      	ldr	r3, [pc, #64]	; (239dc <spi_read_reg+0x158>)
   2399a:	4798      	blx	r3
		nm_bsp_sleep(1);
   2399c:	2001      	movs	r0, #1
   2399e:	4b12      	ldr	r3, [pc, #72]	; (239e8 <spi_read_reg+0x164>)
   239a0:	4798      	blx	r3
		retry--;
   239a2:	230f      	movs	r3, #15
   239a4:	18fb      	adds	r3, r7, r3
   239a6:	781a      	ldrb	r2, [r3, #0]
   239a8:	230f      	movs	r3, #15
   239aa:	18fb      	adds	r3, r7, r3
   239ac:	3a01      	subs	r2, #1
   239ae:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   239b0:	230f      	movs	r3, #15
   239b2:	18fb      	adds	r3, r7, r3
   239b4:	781b      	ldrb	r3, [r3, #0]
   239b6:	2b00      	cmp	r3, #0
   239b8:	d000      	beq.n	239bc <spi_read_reg+0x138>
   239ba:	e778      	b.n	238ae <spi_read_reg+0x2a>
	}
		
	return result;
   239bc:	230c      	movs	r3, #12
   239be:	18fb      	adds	r3, r7, r3
   239c0:	781b      	ldrb	r3, [r3, #0]
   239c2:	b25b      	sxtb	r3, r3
}
   239c4:	0018      	movs	r0, r3
   239c6:	46bd      	mov	sp, r7
   239c8:	b005      	add	sp, #20
   239ca:	bd90      	pop	{r4, r7, pc}
   239cc:	00022ac1 	.word	0x00022ac1
   239d0:	00000423 	.word	0x00000423
   239d4:	00038e58 	.word	0x00038e58
   239d8:	00038800 	.word	0x00038800
   239dc:	0001cf49 	.word	0x0001cf49
   239e0:	00038c28 	.word	0x00038c28
   239e4:	00038840 	.word	0x00038840
   239e8:	0001f401 	.word	0x0001f401
   239ec:	00022545 	.word	0x00022545
   239f0:	00022985 	.word	0x00022985
   239f4:	00000435 	.word	0x00000435
   239f8:	00038c54 	.word	0x00038c54

000239fc <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
   239fc:	b590      	push	{r4, r7, lr}
   239fe:	b089      	sub	sp, #36	; 0x24
   23a00:	af02      	add	r7, sp, #8
   23a02:	60f8      	str	r0, [r7, #12]
   23a04:	60b9      	str	r1, [r7, #8]
   23a06:	1dbb      	adds	r3, r7, #6
   23a08:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
   23a0a:	2316      	movs	r3, #22
   23a0c:	18fb      	adds	r3, r7, r3
   23a0e:	22c8      	movs	r2, #200	; 0xc8
   23a10:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   23a12:	2317      	movs	r3, #23
   23a14:	18fb      	adds	r3, r7, r3
   23a16:	220a      	movs	r2, #10
   23a18:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
   23a1a:	1dbb      	adds	r3, r7, #6
   23a1c:	881c      	ldrh	r4, [r3, #0]
   23a1e:	68ba      	ldr	r2, [r7, #8]
   23a20:	68f9      	ldr	r1, [r7, #12]
   23a22:	2316      	movs	r3, #22
   23a24:	18fb      	adds	r3, r7, r3
   23a26:	7818      	ldrb	r0, [r3, #0]
   23a28:	2300      	movs	r3, #0
   23a2a:	9300      	str	r3, [sp, #0]
   23a2c:	0023      	movs	r3, r4
   23a2e:	4c2e      	ldr	r4, [pc, #184]	; (23ae8 <nm_spi_read+0xec>)
   23a30:	47a0      	blx	r4
   23a32:	0002      	movs	r2, r0
   23a34:	2315      	movs	r3, #21
   23a36:	18fb      	adds	r3, r7, r3
   23a38:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   23a3a:	2315      	movs	r3, #21
   23a3c:	18fb      	adds	r3, r7, r3
   23a3e:	781b      	ldrb	r3, [r3, #0]
   23a40:	b25b      	sxtb	r3, r3
   23a42:	2b01      	cmp	r3, #1
   23a44:	d010      	beq.n	23a68 <nm_spi_read+0x6c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
   23a46:	4a29      	ldr	r2, [pc, #164]	; (23aec <nm_spi_read+0xf0>)
   23a48:	4929      	ldr	r1, [pc, #164]	; (23af0 <nm_spi_read+0xf4>)
   23a4a:	4b2a      	ldr	r3, [pc, #168]	; (23af4 <nm_spi_read+0xf8>)
   23a4c:	0018      	movs	r0, r3
   23a4e:	4b2a      	ldr	r3, [pc, #168]	; (23af8 <nm_spi_read+0xfc>)
   23a50:	4798      	blx	r3
   23a52:	68fa      	ldr	r2, [r7, #12]
   23a54:	4b29      	ldr	r3, [pc, #164]	; (23afc <nm_spi_read+0x100>)
   23a56:	0011      	movs	r1, r2
   23a58:	0018      	movs	r0, r3
   23a5a:	4b27      	ldr	r3, [pc, #156]	; (23af8 <nm_spi_read+0xfc>)
   23a5c:	4798      	blx	r3
   23a5e:	4b28      	ldr	r3, [pc, #160]	; (23b00 <nm_spi_read+0x104>)
   23a60:	0018      	movs	r0, r3
   23a62:	4b25      	ldr	r3, [pc, #148]	; (23af8 <nm_spi_read+0xfc>)
   23a64:	4798      	blx	r3
		goto _FAIL_;
   23a66:	46c0      	nop			; (mov r8, r8)
	}
#endif

_FAIL_:
	if(result != N_OK)
   23a68:	2315      	movs	r3, #21
   23a6a:	18fb      	adds	r3, r7, r3
   23a6c:	781b      	ldrb	r3, [r3, #0]
   23a6e:	b25b      	sxtb	r3, r3
   23a70:	2b01      	cmp	r3, #1
   23a72:	d030      	beq.n	23ad6 <nm_spi_read+0xda>
	{
		nm_bsp_sleep(1);
   23a74:	2001      	movs	r0, #1
   23a76:	4b23      	ldr	r3, [pc, #140]	; (23b04 <nm_spi_read+0x108>)
   23a78:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   23a7a:	2300      	movs	r3, #0
   23a7c:	9300      	str	r3, [sp, #0]
   23a7e:	2300      	movs	r3, #0
   23a80:	2200      	movs	r2, #0
   23a82:	2100      	movs	r1, #0
   23a84:	20cf      	movs	r0, #207	; 0xcf
   23a86:	4c20      	ldr	r4, [pc, #128]	; (23b08 <nm_spi_read+0x10c>)
   23a88:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   23a8a:	20cf      	movs	r0, #207	; 0xcf
   23a8c:	4b1f      	ldr	r3, [pc, #124]	; (23b0c <nm_spi_read+0x110>)
   23a8e:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   23a90:	4a1f      	ldr	r2, [pc, #124]	; (23b10 <nm_spi_read+0x114>)
   23a92:	4917      	ldr	r1, [pc, #92]	; (23af0 <nm_spi_read+0xf4>)
   23a94:	4b17      	ldr	r3, [pc, #92]	; (23af4 <nm_spi_read+0xf8>)
   23a96:	0018      	movs	r0, r3
   23a98:	4b17      	ldr	r3, [pc, #92]	; (23af8 <nm_spi_read+0xfc>)
   23a9a:	4798      	blx	r3
   23a9c:	2317      	movs	r3, #23
   23a9e:	18fb      	adds	r3, r7, r3
   23aa0:	7819      	ldrb	r1, [r3, #0]
   23aa2:	1dbb      	adds	r3, r7, #6
   23aa4:	881b      	ldrh	r3, [r3, #0]
   23aa6:	68fa      	ldr	r2, [r7, #12]
   23aa8:	481a      	ldr	r0, [pc, #104]	; (23b14 <nm_spi_read+0x118>)
   23aaa:	4c13      	ldr	r4, [pc, #76]	; (23af8 <nm_spi_read+0xfc>)
   23aac:	47a0      	blx	r4
   23aae:	4b14      	ldr	r3, [pc, #80]	; (23b00 <nm_spi_read+0x104>)
   23ab0:	0018      	movs	r0, r3
   23ab2:	4b11      	ldr	r3, [pc, #68]	; (23af8 <nm_spi_read+0xfc>)
   23ab4:	4798      	blx	r3
		nm_bsp_sleep(1);
   23ab6:	2001      	movs	r0, #1
   23ab8:	4b12      	ldr	r3, [pc, #72]	; (23b04 <nm_spi_read+0x108>)
   23aba:	4798      	blx	r3
		retry--;
   23abc:	2317      	movs	r3, #23
   23abe:	18fb      	adds	r3, r7, r3
   23ac0:	781a      	ldrb	r2, [r3, #0]
   23ac2:	2317      	movs	r3, #23
   23ac4:	18fb      	adds	r3, r7, r3
   23ac6:	3a01      	subs	r2, #1
   23ac8:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   23aca:	2317      	movs	r3, #23
   23acc:	18fb      	adds	r3, r7, r3
   23ace:	781b      	ldrb	r3, [r3, #0]
   23ad0:	2b00      	cmp	r3, #0
   23ad2:	d000      	beq.n	23ad6 <nm_spi_read+0xda>
   23ad4:	e7a1      	b.n	23a1a <nm_spi_read+0x1e>
	}

	return result;
   23ad6:	2315      	movs	r3, #21
   23ad8:	18fb      	adds	r3, r7, r3
   23ada:	781b      	ldrb	r3, [r3, #0]
   23adc:	b25b      	sxtb	r3, r3
}
   23ade:	0018      	movs	r0, r3
   23ae0:	46bd      	mov	sp, r7
   23ae2:	b007      	add	sp, #28
   23ae4:	bd90      	pop	{r4, r7, pc}
   23ae6:	46c0      	nop			; (mov r8, r8)
   23ae8:	00022ac1 	.word	0x00022ac1
   23aec:	00000472 	.word	0x00000472
   23af0:	00038e68 	.word	0x00038e68
   23af4:	00038800 	.word	0x00038800
   23af8:	0001cf49 	.word	0x0001cf49
   23afc:	00038c6c 	.word	0x00038c6c
   23b00:	00038840 	.word	0x00038840
   23b04:	0001f401 	.word	0x0001f401
   23b08:	00022545 	.word	0x00022545
   23b0c:	00022985 	.word	0x00022985
   23b10:	0000047d 	.word	0x0000047d
   23b14:	00038c0c 	.word	0x00038c0c

00023b18 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
   23b18:	b580      	push	{r7, lr}
   23b1a:	b082      	sub	sp, #8
   23b1c:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
   23b1e:	4b0c      	ldr	r3, [pc, #48]	; (23b50 <spi_init_pkt_sz+0x38>)
   23b20:	0018      	movs	r0, r3
   23b22:	4b0c      	ldr	r3, [pc, #48]	; (23b54 <spi_init_pkt_sz+0x3c>)
   23b24:	4798      	blx	r3
   23b26:	0003      	movs	r3, r0
   23b28:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
   23b2a:	687b      	ldr	r3, [r7, #4]
   23b2c:	2270      	movs	r2, #112	; 0x70
   23b2e:	4393      	bics	r3, r2
   23b30:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
   23b32:	687b      	ldr	r3, [r7, #4]
   23b34:	2250      	movs	r2, #80	; 0x50
   23b36:	4313      	orrs	r3, r2
   23b38:	607b      	str	r3, [r7, #4]
   23b3a:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
   23b3c:	687b      	ldr	r3, [r7, #4]
   23b3e:	4a04      	ldr	r2, [pc, #16]	; (23b50 <spi_init_pkt_sz+0x38>)
   23b40:	0019      	movs	r1, r3
   23b42:	0010      	movs	r0, r2
   23b44:	4b04      	ldr	r3, [pc, #16]	; (23b58 <spi_init_pkt_sz+0x40>)
   23b46:	4798      	blx	r3
}
   23b48:	46c0      	nop			; (mov r8, r8)
   23b4a:	46bd      	mov	sp, r7
   23b4c:	b002      	add	sp, #8
   23b4e:	bd80      	pop	{r7, pc}
   23b50:	0000e824 	.word	0x0000e824
   23b54:	00023cf1 	.word	0x00023cf1
   23b58:	00023d65 	.word	0x00023d65

00023b5c <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
   23b5c:	b590      	push	{r4, r7, lr}
   23b5e:	b083      	sub	sp, #12
   23b60:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
   23b62:	2300      	movs	r3, #0
   23b64:	9300      	str	r3, [sp, #0]
   23b66:	2300      	movs	r3, #0
   23b68:	2200      	movs	r2, #0
   23b6a:	2100      	movs	r1, #0
   23b6c:	20cf      	movs	r0, #207	; 0xcf
   23b6e:	4c05      	ldr	r4, [pc, #20]	; (23b84 <nm_spi_reset+0x28>)
   23b70:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
   23b72:	20cf      	movs	r0, #207	; 0xcf
   23b74:	4b04      	ldr	r3, [pc, #16]	; (23b88 <nm_spi_reset+0x2c>)
   23b76:	4798      	blx	r3
	return M2M_SUCCESS;
   23b78:	2300      	movs	r3, #0
}
   23b7a:	0018      	movs	r0, r3
   23b7c:	46bd      	mov	sp, r7
   23b7e:	b001      	add	sp, #4
   23b80:	bd90      	pop	{r4, r7, pc}
   23b82:	46c0      	nop			; (mov r8, r8)
   23b84:	00022545 	.word	0x00022545
   23b88:	00022985 	.word	0x00022985

00023b8c <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
   23b8c:	b580      	push	{r7, lr}
   23b8e:	b082      	sub	sp, #8
   23b90:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
   23b92:	2300      	movs	r3, #0
   23b94:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
   23b96:	4b40      	ldr	r3, [pc, #256]	; (23c98 <nm_spi_init+0x10c>)
   23b98:	2200      	movs	r2, #0
   23b9a:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
   23b9c:	003b      	movs	r3, r7
   23b9e:	4a3f      	ldr	r2, [pc, #252]	; (23c9c <nm_spi_init+0x110>)
   23ba0:	0019      	movs	r1, r3
   23ba2:	0010      	movs	r0, r2
   23ba4:	4b3e      	ldr	r3, [pc, #248]	; (23ca0 <nm_spi_init+0x114>)
   23ba6:	4798      	blx	r3
   23ba8:	1e03      	subs	r3, r0, #0
   23baa:	d129      	bne.n	23c00 <nm_spi_init+0x74>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
   23bac:	4b3a      	ldr	r3, [pc, #232]	; (23c98 <nm_spi_init+0x10c>)
   23bae:	2201      	movs	r2, #1
   23bb0:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
   23bb2:	2398      	movs	r3, #152	; 0x98
   23bb4:	00da      	lsls	r2, r3, #3
   23bb6:	493b      	ldr	r1, [pc, #236]	; (23ca4 <nm_spi_init+0x118>)
   23bb8:	4b3b      	ldr	r3, [pc, #236]	; (23ca8 <nm_spi_init+0x11c>)
   23bba:	0018      	movs	r0, r3
   23bbc:	4b3b      	ldr	r3, [pc, #236]	; (23cac <nm_spi_init+0x120>)
   23bbe:	4798      	blx	r3
   23bc0:	4b3b      	ldr	r3, [pc, #236]	; (23cb0 <nm_spi_init+0x124>)
   23bc2:	0018      	movs	r0, r3
   23bc4:	4b39      	ldr	r3, [pc, #228]	; (23cac <nm_spi_init+0x120>)
   23bc6:	4798      	blx	r3
   23bc8:	4b3a      	ldr	r3, [pc, #232]	; (23cb4 <nm_spi_init+0x128>)
   23bca:	0018      	movs	r0, r3
   23bcc:	4b37      	ldr	r3, [pc, #220]	; (23cac <nm_spi_init+0x120>)
   23bce:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
   23bd0:	003b      	movs	r3, r7
   23bd2:	4a32      	ldr	r2, [pc, #200]	; (23c9c <nm_spi_init+0x110>)
   23bd4:	0019      	movs	r1, r3
   23bd6:	0010      	movs	r0, r2
   23bd8:	4b31      	ldr	r3, [pc, #196]	; (23ca0 <nm_spi_init+0x114>)
   23bda:	4798      	blx	r3
   23bdc:	1e03      	subs	r3, r0, #0
   23bde:	d10f      	bne.n	23c00 <nm_spi_init+0x74>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
   23be0:	4a35      	ldr	r2, [pc, #212]	; (23cb8 <nm_spi_init+0x12c>)
   23be2:	4930      	ldr	r1, [pc, #192]	; (23ca4 <nm_spi_init+0x118>)
   23be4:	4b30      	ldr	r3, [pc, #192]	; (23ca8 <nm_spi_init+0x11c>)
   23be6:	0018      	movs	r0, r3
   23be8:	4b30      	ldr	r3, [pc, #192]	; (23cac <nm_spi_init+0x120>)
   23bea:	4798      	blx	r3
   23bec:	4b33      	ldr	r3, [pc, #204]	; (23cbc <nm_spi_init+0x130>)
   23bee:	0018      	movs	r0, r3
   23bf0:	4b2e      	ldr	r3, [pc, #184]	; (23cac <nm_spi_init+0x120>)
   23bf2:	4798      	blx	r3
   23bf4:	4b2f      	ldr	r3, [pc, #188]	; (23cb4 <nm_spi_init+0x128>)
   23bf6:	0018      	movs	r0, r3
   23bf8:	4b2c      	ldr	r3, [pc, #176]	; (23cac <nm_spi_init+0x120>)
   23bfa:	4798      	blx	r3
			return 0;
   23bfc:	2300      	movs	r3, #0
   23bfe:	e047      	b.n	23c90 <nm_spi_init+0x104>
		}
	}
	if(gu8Crc_off == 0)
   23c00:	4b25      	ldr	r3, [pc, #148]	; (23c98 <nm_spi_init+0x10c>)
   23c02:	781b      	ldrb	r3, [r3, #0]
   23c04:	2b00      	cmp	r3, #0
   23c06:	d126      	bne.n	23c56 <nm_spi_init+0xca>
	{
		reg &= ~0xc;	/* disable crc checking */
   23c08:	683b      	ldr	r3, [r7, #0]
   23c0a:	220c      	movs	r2, #12
   23c0c:	4393      	bics	r3, r2
   23c0e:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
   23c10:	683b      	ldr	r3, [r7, #0]
   23c12:	2270      	movs	r2, #112	; 0x70
   23c14:	4393      	bics	r3, r2
   23c16:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
   23c18:	683b      	ldr	r3, [r7, #0]
   23c1a:	2250      	movs	r2, #80	; 0x50
   23c1c:	4313      	orrs	r3, r2
   23c1e:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
   23c20:	683b      	ldr	r3, [r7, #0]
   23c22:	4a1e      	ldr	r2, [pc, #120]	; (23c9c <nm_spi_init+0x110>)
   23c24:	0019      	movs	r1, r3
   23c26:	0010      	movs	r0, r2
   23c28:	4b25      	ldr	r3, [pc, #148]	; (23cc0 <nm_spi_init+0x134>)
   23c2a:	4798      	blx	r3
   23c2c:	1e03      	subs	r3, r0, #0
   23c2e:	d10f      	bne.n	23c50 <nm_spi_init+0xc4>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
   23c30:	4a24      	ldr	r2, [pc, #144]	; (23cc4 <nm_spi_init+0x138>)
   23c32:	491c      	ldr	r1, [pc, #112]	; (23ca4 <nm_spi_init+0x118>)
   23c34:	4b1c      	ldr	r3, [pc, #112]	; (23ca8 <nm_spi_init+0x11c>)
   23c36:	0018      	movs	r0, r3
   23c38:	4b1c      	ldr	r3, [pc, #112]	; (23cac <nm_spi_init+0x120>)
   23c3a:	4798      	blx	r3
   23c3c:	4b22      	ldr	r3, [pc, #136]	; (23cc8 <nm_spi_init+0x13c>)
   23c3e:	0018      	movs	r0, r3
   23c40:	4b1a      	ldr	r3, [pc, #104]	; (23cac <nm_spi_init+0x120>)
   23c42:	4798      	blx	r3
   23c44:	4b1b      	ldr	r3, [pc, #108]	; (23cb4 <nm_spi_init+0x128>)
   23c46:	0018      	movs	r0, r3
   23c48:	4b18      	ldr	r3, [pc, #96]	; (23cac <nm_spi_init+0x120>)
   23c4a:	4798      	blx	r3
			return 0;
   23c4c:	2300      	movs	r3, #0
   23c4e:	e01f      	b.n	23c90 <nm_spi_init+0x104>
		}
		gu8Crc_off = 1;
   23c50:	4b11      	ldr	r3, [pc, #68]	; (23c98 <nm_spi_init+0x10c>)
   23c52:	2201      	movs	r2, #1
   23c54:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
   23c56:	1d3a      	adds	r2, r7, #4
   23c58:	2380      	movs	r3, #128	; 0x80
   23c5a:	015b      	lsls	r3, r3, #5
   23c5c:	0011      	movs	r1, r2
   23c5e:	0018      	movs	r0, r3
   23c60:	4b0f      	ldr	r3, [pc, #60]	; (23ca0 <nm_spi_init+0x114>)
   23c62:	4798      	blx	r3
   23c64:	1e03      	subs	r3, r0, #0
   23c66:	d110      	bne.n	23c8a <nm_spi_init+0xfe>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
   23c68:	4a18      	ldr	r2, [pc, #96]	; (23ccc <nm_spi_init+0x140>)
   23c6a:	490e      	ldr	r1, [pc, #56]	; (23ca4 <nm_spi_init+0x118>)
   23c6c:	4b0e      	ldr	r3, [pc, #56]	; (23ca8 <nm_spi_init+0x11c>)
   23c6e:	0018      	movs	r0, r3
   23c70:	4b0e      	ldr	r3, [pc, #56]	; (23cac <nm_spi_init+0x120>)
   23c72:	4798      	blx	r3
   23c74:	4b16      	ldr	r3, [pc, #88]	; (23cd0 <nm_spi_init+0x144>)
   23c76:	0018      	movs	r0, r3
   23c78:	4b0c      	ldr	r3, [pc, #48]	; (23cac <nm_spi_init+0x120>)
   23c7a:	4798      	blx	r3
   23c7c:	4b0d      	ldr	r3, [pc, #52]	; (23cb4 <nm_spi_init+0x128>)
   23c7e:	0018      	movs	r0, r3
   23c80:	4b0a      	ldr	r3, [pc, #40]	; (23cac <nm_spi_init+0x120>)
   23c82:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
   23c84:	2306      	movs	r3, #6
   23c86:	425b      	negs	r3, r3
   23c88:	e002      	b.n	23c90 <nm_spi_init+0x104>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
   23c8a:	4b12      	ldr	r3, [pc, #72]	; (23cd4 <nm_spi_init+0x148>)
   23c8c:	4798      	blx	r3


	return M2M_SUCCESS;
   23c8e:	2300      	movs	r3, #0
}
   23c90:	0018      	movs	r0, r3
   23c92:	46bd      	mov	sp, r7
   23c94:	b002      	add	sp, #8
   23c96:	bd80      	pop	{r7, pc}
   23c98:	2000427c 	.word	0x2000427c
   23c9c:	0000e824 	.word	0x0000e824
   23ca0:	00023885 	.word	0x00023885
   23ca4:	00038e74 	.word	0x00038e74
   23ca8:	00038800 	.word	0x00038800
   23cac:	0001cf49 	.word	0x0001cf49
   23cb0:	00038c9c 	.word	0x00038c9c
   23cb4:	00038840 	.word	0x00038840
   23cb8:	000004c3 	.word	0x000004c3
   23cbc:	00038cec 	.word	0x00038cec
   23cc0:	0002358d 	.word	0x0002358d
   23cc4:	000004cd 	.word	0x000004cd
   23cc8:	00038d1c 	.word	0x00038d1c
   23ccc:	000004d7 	.word	0x000004d7
   23cd0:	00038d50 	.word	0x00038d50
   23cd4:	00023b19 	.word	0x00023b19

00023cd8 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
   23cd8:	b580      	push	{r7, lr}
   23cda:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
   23cdc:	4b03      	ldr	r3, [pc, #12]	; (23cec <nm_spi_deinit+0x14>)
   23cde:	2200      	movs	r2, #0
   23ce0:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
   23ce2:	2300      	movs	r3, #0
}
   23ce4:	0018      	movs	r0, r3
   23ce6:	46bd      	mov	sp, r7
   23ce8:	bd80      	pop	{r7, pc}
   23cea:	46c0      	nop			; (mov r8, r8)
   23cec:	2000427c 	.word	0x2000427c

00023cf0 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
   23cf0:	b580      	push	{r7, lr}
   23cf2:	b084      	sub	sp, #16
   23cf4:	af00      	add	r7, sp, #0
   23cf6:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
   23cf8:	230c      	movs	r3, #12
   23cfa:	18fa      	adds	r2, r7, r3
   23cfc:	687b      	ldr	r3, [r7, #4]
   23cfe:	0011      	movs	r1, r2
   23d00:	0018      	movs	r0, r3
   23d02:	4b03      	ldr	r3, [pc, #12]	; (23d10 <nm_spi_read_reg+0x20>)
   23d04:	4798      	blx	r3

	return u32Val;
   23d06:	68fb      	ldr	r3, [r7, #12]
}
   23d08:	0018      	movs	r0, r3
   23d0a:	46bd      	mov	sp, r7
   23d0c:	b004      	add	sp, #16
   23d0e:	bd80      	pop	{r7, pc}
   23d10:	00023885 	.word	0x00023885

00023d14 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   23d14:	b590      	push	{r4, r7, lr}
   23d16:	b085      	sub	sp, #20
   23d18:	af00      	add	r7, sp, #0
   23d1a:	6078      	str	r0, [r7, #4]
   23d1c:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
   23d1e:	230f      	movs	r3, #15
   23d20:	18fc      	adds	r4, r7, r3
   23d22:	683a      	ldr	r2, [r7, #0]
   23d24:	687b      	ldr	r3, [r7, #4]
   23d26:	0011      	movs	r1, r2
   23d28:	0018      	movs	r0, r3
   23d2a:	4b0d      	ldr	r3, [pc, #52]	; (23d60 <nm_spi_read_reg_with_ret+0x4c>)
   23d2c:	4798      	blx	r3
   23d2e:	0003      	movs	r3, r0
   23d30:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   23d32:	230f      	movs	r3, #15
   23d34:	18fb      	adds	r3, r7, r3
   23d36:	781b      	ldrb	r3, [r3, #0]
   23d38:	b25b      	sxtb	r3, r3
   23d3a:	2b01      	cmp	r3, #1
   23d3c:	d104      	bne.n	23d48 <nm_spi_read_reg_with_ret+0x34>
   23d3e:	230f      	movs	r3, #15
   23d40:	18fb      	adds	r3, r7, r3
   23d42:	2200      	movs	r2, #0
   23d44:	701a      	strb	r2, [r3, #0]
   23d46:	e003      	b.n	23d50 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   23d48:	230f      	movs	r3, #15
   23d4a:	18fb      	adds	r3, r7, r3
   23d4c:	22fa      	movs	r2, #250	; 0xfa
   23d4e:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   23d50:	230f      	movs	r3, #15
   23d52:	18fb      	adds	r3, r7, r3
   23d54:	781b      	ldrb	r3, [r3, #0]
   23d56:	b25b      	sxtb	r3, r3
}
   23d58:	0018      	movs	r0, r3
   23d5a:	46bd      	mov	sp, r7
   23d5c:	b005      	add	sp, #20
   23d5e:	bd90      	pop	{r4, r7, pc}
   23d60:	00023885 	.word	0x00023885

00023d64 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
   23d64:	b590      	push	{r4, r7, lr}
   23d66:	b085      	sub	sp, #20
   23d68:	af00      	add	r7, sp, #0
   23d6a:	6078      	str	r0, [r7, #4]
   23d6c:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
   23d6e:	230f      	movs	r3, #15
   23d70:	18fc      	adds	r4, r7, r3
   23d72:	683a      	ldr	r2, [r7, #0]
   23d74:	687b      	ldr	r3, [r7, #4]
   23d76:	0011      	movs	r1, r2
   23d78:	0018      	movs	r0, r3
   23d7a:	4b0d      	ldr	r3, [pc, #52]	; (23db0 <nm_spi_write_reg+0x4c>)
   23d7c:	4798      	blx	r3
   23d7e:	0003      	movs	r3, r0
   23d80:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   23d82:	230f      	movs	r3, #15
   23d84:	18fb      	adds	r3, r7, r3
   23d86:	781b      	ldrb	r3, [r3, #0]
   23d88:	b25b      	sxtb	r3, r3
   23d8a:	2b01      	cmp	r3, #1
   23d8c:	d104      	bne.n	23d98 <nm_spi_write_reg+0x34>
   23d8e:	230f      	movs	r3, #15
   23d90:	18fb      	adds	r3, r7, r3
   23d92:	2200      	movs	r2, #0
   23d94:	701a      	strb	r2, [r3, #0]
   23d96:	e003      	b.n	23da0 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   23d98:	230f      	movs	r3, #15
   23d9a:	18fb      	adds	r3, r7, r3
   23d9c:	22fa      	movs	r2, #250	; 0xfa
   23d9e:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   23da0:	230f      	movs	r3, #15
   23da2:	18fb      	adds	r3, r7, r3
   23da4:	781b      	ldrb	r3, [r3, #0]
   23da6:	b25b      	sxtb	r3, r3
}
   23da8:	0018      	movs	r0, r3
   23daa:	46bd      	mov	sp, r7
   23dac:	b005      	add	sp, #20
   23dae:	bd90      	pop	{r4, r7, pc}
   23db0:	0002358d 	.word	0x0002358d

00023db4 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   23db4:	b590      	push	{r4, r7, lr}
   23db6:	b087      	sub	sp, #28
   23db8:	af00      	add	r7, sp, #0
   23dba:	60f8      	str	r0, [r7, #12]
   23dbc:	60b9      	str	r1, [r7, #8]
   23dbe:	1dbb      	adds	r3, r7, #6
   23dc0:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
   23dc2:	2317      	movs	r3, #23
   23dc4:	18fc      	adds	r4, r7, r3
   23dc6:	1dbb      	adds	r3, r7, #6
   23dc8:	881a      	ldrh	r2, [r3, #0]
   23dca:	68b9      	ldr	r1, [r7, #8]
   23dcc:	68fb      	ldr	r3, [r7, #12]
   23dce:	0018      	movs	r0, r3
   23dd0:	4b0d      	ldr	r3, [pc, #52]	; (23e08 <nm_spi_read_block+0x54>)
   23dd2:	4798      	blx	r3
   23dd4:	0003      	movs	r3, r0
   23dd6:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   23dd8:	2317      	movs	r3, #23
   23dda:	18fb      	adds	r3, r7, r3
   23ddc:	781b      	ldrb	r3, [r3, #0]
   23dde:	b25b      	sxtb	r3, r3
   23de0:	2b01      	cmp	r3, #1
   23de2:	d104      	bne.n	23dee <nm_spi_read_block+0x3a>
   23de4:	2317      	movs	r3, #23
   23de6:	18fb      	adds	r3, r7, r3
   23de8:	2200      	movs	r2, #0
   23dea:	701a      	strb	r2, [r3, #0]
   23dec:	e003      	b.n	23df6 <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   23dee:	2317      	movs	r3, #23
   23df0:	18fb      	adds	r3, r7, r3
   23df2:	22fa      	movs	r2, #250	; 0xfa
   23df4:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   23df6:	2317      	movs	r3, #23
   23df8:	18fb      	adds	r3, r7, r3
   23dfa:	781b      	ldrb	r3, [r3, #0]
   23dfc:	b25b      	sxtb	r3, r3
}
   23dfe:	0018      	movs	r0, r3
   23e00:	46bd      	mov	sp, r7
   23e02:	b007      	add	sp, #28
   23e04:	bd90      	pop	{r4, r7, pc}
   23e06:	46c0      	nop			; (mov r8, r8)
   23e08:	000239fd 	.word	0x000239fd

00023e0c <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   23e0c:	b590      	push	{r4, r7, lr}
   23e0e:	b087      	sub	sp, #28
   23e10:	af00      	add	r7, sp, #0
   23e12:	60f8      	str	r0, [r7, #12]
   23e14:	60b9      	str	r1, [r7, #8]
   23e16:	1dbb      	adds	r3, r7, #6
   23e18:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
   23e1a:	2317      	movs	r3, #23
   23e1c:	18fc      	adds	r4, r7, r3
   23e1e:	1dbb      	adds	r3, r7, #6
   23e20:	881a      	ldrh	r2, [r3, #0]
   23e22:	68b9      	ldr	r1, [r7, #8]
   23e24:	68fb      	ldr	r3, [r7, #12]
   23e26:	0018      	movs	r0, r3
   23e28:	4b0d      	ldr	r3, [pc, #52]	; (23e60 <nm_spi_write_block+0x54>)
   23e2a:	4798      	blx	r3
   23e2c:	0003      	movs	r3, r0
   23e2e:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   23e30:	2317      	movs	r3, #23
   23e32:	18fb      	adds	r3, r7, r3
   23e34:	781b      	ldrb	r3, [r3, #0]
   23e36:	b25b      	sxtb	r3, r3
   23e38:	2b01      	cmp	r3, #1
   23e3a:	d104      	bne.n	23e46 <nm_spi_write_block+0x3a>
   23e3c:	2317      	movs	r3, #23
   23e3e:	18fb      	adds	r3, r7, r3
   23e40:	2200      	movs	r2, #0
   23e42:	701a      	strb	r2, [r3, #0]
   23e44:	e003      	b.n	23e4e <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   23e46:	2317      	movs	r3, #23
   23e48:	18fb      	adds	r3, r7, r3
   23e4a:	22fa      	movs	r2, #250	; 0xfa
   23e4c:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   23e4e:	2317      	movs	r3, #23
   23e50:	18fb      	adds	r3, r7, r3
   23e52:	781b      	ldrb	r3, [r3, #0]
   23e54:	b25b      	sxtb	r3, r3
}
   23e56:	0018      	movs	r0, r3
   23e58:	46bd      	mov	sp, r7
   23e5a:	b007      	add	sp, #28
   23e5c:	bd90      	pop	{r4, r7, pc}
   23e5e:	46c0      	nop			; (mov r8, r8)
   23e60:	000236d9 	.word	0x000236d9

00023e64 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
   23e64:	b590      	push	{r4, r7, lr}
   23e66:	b089      	sub	sp, #36	; 0x24
   23e68:	af00      	add	r7, sp, #0
   23e6a:	60b9      	str	r1, [r7, #8]
   23e6c:	0011      	movs	r1, r2
   23e6e:	607b      	str	r3, [r7, #4]
   23e70:	230f      	movs	r3, #15
   23e72:	18fb      	adds	r3, r7, r3
   23e74:	1c02      	adds	r2, r0, #0
   23e76:	701a      	strb	r2, [r3, #0]
   23e78:	230e      	movs	r3, #14
   23e7a:	18fb      	adds	r3, r7, r3
   23e7c:	1c0a      	adds	r2, r1, #0
   23e7e:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
   23e80:	2330      	movs	r3, #48	; 0x30
   23e82:	18fb      	adds	r3, r7, r3
   23e84:	881b      	ldrh	r3, [r3, #0]
   23e86:	2b00      	cmp	r3, #0
   23e88:	d100      	bne.n	23e8c <Socket_ReadSocketData+0x28>
   23e8a:	e0d7      	b.n	2403c <Socket_ReadSocketData+0x1d8>
   23e8c:	230f      	movs	r3, #15
   23e8e:	18fb      	adds	r3, r7, r3
   23e90:	2200      	movs	r2, #0
   23e92:	569a      	ldrsb	r2, [r3, r2]
   23e94:	4b6b      	ldr	r3, [pc, #428]	; (24044 <Socket_ReadSocketData+0x1e0>)
   23e96:	0112      	lsls	r2, r2, #4
   23e98:	58d3      	ldr	r3, [r2, r3]
   23e9a:	2b00      	cmp	r3, #0
   23e9c:	d100      	bne.n	23ea0 <Socket_ReadSocketData+0x3c>
   23e9e:	e0cd      	b.n	2403c <Socket_ReadSocketData+0x1d8>
   23ea0:	230f      	movs	r3, #15
   23ea2:	18fb      	adds	r3, r7, r3
   23ea4:	781b      	ldrb	r3, [r3, #0]
   23ea6:	b25b      	sxtb	r3, r3
   23ea8:	4a66      	ldr	r2, [pc, #408]	; (24044 <Socket_ReadSocketData+0x1e0>)
   23eaa:	011b      	lsls	r3, r3, #4
   23eac:	18d3      	adds	r3, r2, r3
   23eae:	3304      	adds	r3, #4
   23eb0:	881b      	ldrh	r3, [r3, #0]
   23eb2:	b29b      	uxth	r3, r3
   23eb4:	2b00      	cmp	r3, #0
   23eb6:	d100      	bne.n	23eba <Socket_ReadSocketData+0x56>
   23eb8:	e0c0      	b.n	2403c <Socket_ReadSocketData+0x1d8>
   23eba:	230f      	movs	r3, #15
   23ebc:	18fb      	adds	r3, r7, r3
   23ebe:	781b      	ldrb	r3, [r3, #0]
   23ec0:	b25b      	sxtb	r3, r3
   23ec2:	4a60      	ldr	r2, [pc, #384]	; (24044 <Socket_ReadSocketData+0x1e0>)
   23ec4:	011b      	lsls	r3, r3, #4
   23ec6:	18d3      	adds	r3, r2, r3
   23ec8:	330a      	adds	r3, #10
   23eca:	781b      	ldrb	r3, [r3, #0]
   23ecc:	b2db      	uxtb	r3, r3
   23ece:	2b01      	cmp	r3, #1
   23ed0:	d000      	beq.n	23ed4 <Socket_ReadSocketData+0x70>
   23ed2:	e0b3      	b.n	2403c <Socket_ReadSocketData+0x1d8>
	{
		uint32	u32Address = u32StartAddress;
   23ed4:	687b      	ldr	r3, [r7, #4]
   23ed6:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
   23ed8:	68bb      	ldr	r3, [r7, #8]
   23eda:	2230      	movs	r2, #48	; 0x30
   23edc:	18ba      	adds	r2, r7, r2
   23ede:	8812      	ldrh	r2, [r2, #0]
   23ee0:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
   23ee2:	2319      	movs	r3, #25
   23ee4:	18fb      	adds	r3, r7, r3
   23ee6:	2201      	movs	r2, #1
   23ee8:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
   23eea:	231a      	movs	r3, #26
   23eec:	18fb      	adds	r3, r7, r3
   23eee:	2230      	movs	r2, #48	; 0x30
   23ef0:	18ba      	adds	r2, r7, r2
   23ef2:	8812      	ldrh	r2, [r2, #0]
   23ef4:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
   23ef6:	230f      	movs	r3, #15
   23ef8:	18fb      	adds	r3, r7, r3
   23efa:	781b      	ldrb	r3, [r3, #0]
   23efc:	b25b      	sxtb	r3, r3
   23efe:	4a51      	ldr	r2, [pc, #324]	; (24044 <Socket_ReadSocketData+0x1e0>)
   23f00:	011b      	lsls	r3, r3, #4
   23f02:	18d3      	adds	r3, r2, r3
   23f04:	3304      	adds	r3, #4
   23f06:	881b      	ldrh	r3, [r3, #0]
   23f08:	b29b      	uxth	r3, r3
   23f0a:	221a      	movs	r2, #26
   23f0c:	18ba      	adds	r2, r7, r2
   23f0e:	8812      	ldrh	r2, [r2, #0]
   23f10:	1ad3      	subs	r3, r2, r3
   23f12:	b29a      	uxth	r2, r3
   23f14:	2316      	movs	r3, #22
   23f16:	18fb      	adds	r3, r7, r3
   23f18:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
   23f1a:	2316      	movs	r3, #22
   23f1c:	18fb      	adds	r3, r7, r3
   23f1e:	2200      	movs	r2, #0
   23f20:	5e9b      	ldrsh	r3, [r3, r2]
   23f22:	2b00      	cmp	r3, #0
   23f24:	dd0f      	ble.n	23f46 <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
   23f26:	2319      	movs	r3, #25
   23f28:	18fb      	adds	r3, r7, r3
   23f2a:	2200      	movs	r2, #0
   23f2c:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
   23f2e:	230f      	movs	r3, #15
   23f30:	18fb      	adds	r3, r7, r3
   23f32:	2200      	movs	r2, #0
   23f34:	569a      	ldrsb	r2, [r3, r2]
   23f36:	231a      	movs	r3, #26
   23f38:	18fb      	adds	r3, r7, r3
   23f3a:	4942      	ldr	r1, [pc, #264]	; (24044 <Socket_ReadSocketData+0x1e0>)
   23f3c:	0112      	lsls	r2, r2, #4
   23f3e:	188a      	adds	r2, r1, r2
   23f40:	3204      	adds	r2, #4
   23f42:	8812      	ldrh	r2, [r2, #0]
   23f44:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
   23f46:	230f      	movs	r3, #15
   23f48:	18fb      	adds	r3, r7, r3
   23f4a:	2200      	movs	r2, #0
   23f4c:	569a      	ldrsb	r2, [r3, r2]
   23f4e:	4b3d      	ldr	r3, [pc, #244]	; (24044 <Socket_ReadSocketData+0x1e0>)
   23f50:	0112      	lsls	r2, r2, #4
   23f52:	58d1      	ldr	r1, [r2, r3]
   23f54:	2319      	movs	r3, #25
   23f56:	18fb      	adds	r3, r7, r3
   23f58:	781c      	ldrb	r4, [r3, #0]
   23f5a:	231a      	movs	r3, #26
   23f5c:	18fb      	adds	r3, r7, r3
   23f5e:	881a      	ldrh	r2, [r3, #0]
   23f60:	69f8      	ldr	r0, [r7, #28]
   23f62:	0023      	movs	r3, r4
   23f64:	4c38      	ldr	r4, [pc, #224]	; (24048 <Socket_ReadSocketData+0x1e4>)
   23f66:	47a0      	blx	r4
   23f68:	1e03      	subs	r3, r0, #0
   23f6a:	d14f      	bne.n	2400c <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
   23f6c:	230f      	movs	r3, #15
   23f6e:	18fb      	adds	r3, r7, r3
   23f70:	2200      	movs	r2, #0
   23f72:	569a      	ldrsb	r2, [r3, r2]
   23f74:	4b33      	ldr	r3, [pc, #204]	; (24044 <Socket_ReadSocketData+0x1e0>)
   23f76:	0112      	lsls	r2, r2, #4
   23f78:	58d2      	ldr	r2, [r2, r3]
   23f7a:	68bb      	ldr	r3, [r7, #8]
   23f7c:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
   23f7e:	231a      	movs	r3, #26
   23f80:	18fb      	adds	r3, r7, r3
   23f82:	2200      	movs	r2, #0
   23f84:	5e9a      	ldrsh	r2, [r3, r2]
   23f86:	68bb      	ldr	r3, [r7, #8]
   23f88:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
   23f8a:	68bb      	ldr	r3, [r7, #8]
   23f8c:	88da      	ldrh	r2, [r3, #6]
   23f8e:	231a      	movs	r3, #26
   23f90:	18fb      	adds	r3, r7, r3
   23f92:	881b      	ldrh	r3, [r3, #0]
   23f94:	1ad3      	subs	r3, r2, r3
   23f96:	b29a      	uxth	r2, r3
   23f98:	68bb      	ldr	r3, [r7, #8]
   23f9a:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
   23f9c:	4b2b      	ldr	r3, [pc, #172]	; (2404c <Socket_ReadSocketData+0x1e8>)
   23f9e:	681b      	ldr	r3, [r3, #0]
   23fa0:	2b00      	cmp	r3, #0
   23fa2:	d00b      	beq.n	23fbc <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
   23fa4:	4b29      	ldr	r3, [pc, #164]	; (2404c <Socket_ReadSocketData+0x1e8>)
   23fa6:	681b      	ldr	r3, [r3, #0]
   23fa8:	68bc      	ldr	r4, [r7, #8]
   23faa:	220e      	movs	r2, #14
   23fac:	18ba      	adds	r2, r7, r2
   23fae:	7811      	ldrb	r1, [r2, #0]
   23fb0:	220f      	movs	r2, #15
   23fb2:	18ba      	adds	r2, r7, r2
   23fb4:	2000      	movs	r0, #0
   23fb6:	5610      	ldrsb	r0, [r2, r0]
   23fb8:	0022      	movs	r2, r4
   23fba:	4798      	blx	r3

				u16ReadCount -= u16Read;
   23fbc:	2330      	movs	r3, #48	; 0x30
   23fbe:	18f9      	adds	r1, r7, r3
   23fc0:	2330      	movs	r3, #48	; 0x30
   23fc2:	18fa      	adds	r2, r7, r3
   23fc4:	231a      	movs	r3, #26
   23fc6:	18fb      	adds	r3, r7, r3
   23fc8:	8812      	ldrh	r2, [r2, #0]
   23fca:	881b      	ldrh	r3, [r3, #0]
   23fcc:	1ad3      	subs	r3, r2, r3
   23fce:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
   23fd0:	231a      	movs	r3, #26
   23fd2:	18fb      	adds	r3, r7, r3
   23fd4:	881b      	ldrh	r3, [r3, #0]
   23fd6:	69fa      	ldr	r2, [r7, #28]
   23fd8:	18d3      	adds	r3, r2, r3
   23fda:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
   23fdc:	230f      	movs	r3, #15
   23fde:	18fb      	adds	r3, r7, r3
   23fe0:	781b      	ldrb	r3, [r3, #0]
   23fe2:	b25b      	sxtb	r3, r3
   23fe4:	4a17      	ldr	r2, [pc, #92]	; (24044 <Socket_ReadSocketData+0x1e0>)
   23fe6:	011b      	lsls	r3, r3, #4
   23fe8:	18d3      	adds	r3, r2, r3
   23fea:	330a      	adds	r3, #10
   23fec:	781b      	ldrb	r3, [r3, #0]
   23fee:	b2db      	uxtb	r3, r3
   23ff0:	2b00      	cmp	r3, #0
   23ff2:	d11c      	bne.n	2402e <Socket_ReadSocketData+0x1ca>
   23ff4:	2330      	movs	r3, #48	; 0x30
   23ff6:	18fb      	adds	r3, r7, r3
   23ff8:	881b      	ldrh	r3, [r3, #0]
   23ffa:	2b00      	cmp	r3, #0
   23ffc:	d017      	beq.n	2402e <Socket_ReadSocketData+0x1ca>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   23ffe:	2301      	movs	r3, #1
   24000:	2200      	movs	r2, #0
   24002:	2100      	movs	r1, #0
   24004:	2000      	movs	r0, #0
   24006:	4c10      	ldr	r4, [pc, #64]	; (24048 <Socket_ReadSocketData+0x1e4>)
   24008:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
   2400a:	e017      	b.n	2403c <Socket_ReadSocketData+0x1d8>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
   2400c:	4b10      	ldr	r3, [pc, #64]	; (24050 <Socket_ReadSocketData+0x1ec>)
   2400e:	0018      	movs	r0, r3
   24010:	4b10      	ldr	r3, [pc, #64]	; (24054 <Socket_ReadSocketData+0x1f0>)
   24012:	4798      	blx	r3
   24014:	2330      	movs	r3, #48	; 0x30
   24016:	18fb      	adds	r3, r7, r3
   24018:	881a      	ldrh	r2, [r3, #0]
   2401a:	4b0f      	ldr	r3, [pc, #60]	; (24058 <Socket_ReadSocketData+0x1f4>)
   2401c:	0011      	movs	r1, r2
   2401e:	0018      	movs	r0, r3
   24020:	4b0c      	ldr	r3, [pc, #48]	; (24054 <Socket_ReadSocketData+0x1f0>)
   24022:	4798      	blx	r3
   24024:	4b0d      	ldr	r3, [pc, #52]	; (2405c <Socket_ReadSocketData+0x1f8>)
   24026:	0018      	movs	r0, r3
   24028:	4b0a      	ldr	r3, [pc, #40]	; (24054 <Socket_ReadSocketData+0x1f0>)
   2402a:	4798      	blx	r3
				break;
   2402c:	e006      	b.n	2403c <Socket_ReadSocketData+0x1d8>
			}
		}while(u16ReadCount != 0);
   2402e:	2330      	movs	r3, #48	; 0x30
   24030:	18fb      	adds	r3, r7, r3
   24032:	881b      	ldrh	r3, [r3, #0]
   24034:	2b00      	cmp	r3, #0
   24036:	d000      	beq.n	2403a <Socket_ReadSocketData+0x1d6>
   24038:	e753      	b.n	23ee2 <Socket_ReadSocketData+0x7e>
	}
}
   2403a:	e7ff      	b.n	2403c <Socket_ReadSocketData+0x1d8>
   2403c:	46c0      	nop			; (mov r8, r8)
   2403e:	46bd      	mov	sp, r7
   24040:	b009      	add	sp, #36	; 0x24
   24042:	bd90      	pop	{r4, r7, pc}
   24044:	20005ac8 	.word	0x20005ac8
   24048:	0002085d 	.word	0x0002085d
   2404c:	20005b78 	.word	0x20005b78
   24050:	00038e80 	.word	0x00038e80
   24054:	0001cf49 	.word	0x0001cf49
   24058:	00038e8c 	.word	0x00038e8c
   2405c:	00038ea0 	.word	0x00038ea0

00024060 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
   24060:	b590      	push	{r4, r7, lr}
   24062:	b0bb      	sub	sp, #236	; 0xec
   24064:	af02      	add	r7, sp, #8
   24066:	603a      	str	r2, [r7, #0]
   24068:	1dfb      	adds	r3, r7, #7
   2406a:	1c02      	adds	r2, r0, #0
   2406c:	701a      	strb	r2, [r3, #0]
   2406e:	1d3b      	adds	r3, r7, #4
   24070:	1c0a      	adds	r2, r1, #0
   24072:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
   24074:	1dfb      	adds	r3, r7, #7
   24076:	781b      	ldrb	r3, [r3, #0]
   24078:	2b41      	cmp	r3, #65	; 0x41
   2407a:	d003      	beq.n	24084 <m2m_ip_cb+0x24>
   2407c:	1dfb      	adds	r3, r7, #7
   2407e:	781b      	ldrb	r3, [r3, #0]
   24080:	2b54      	cmp	r3, #84	; 0x54
   24082:	d120      	bne.n	240c6 <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
   24084:	23cc      	movs	r3, #204	; 0xcc
   24086:	18f9      	adds	r1, r7, r3
   24088:	6838      	ldr	r0, [r7, #0]
   2408a:	2300      	movs	r3, #0
   2408c:	2204      	movs	r2, #4
   2408e:	4c98      	ldr	r4, [pc, #608]	; (242f0 <m2m_ip_cb+0x290>)
   24090:	47a0      	blx	r4
   24092:	1e03      	subs	r3, r0, #0
   24094:	d000      	beq.n	24098 <m2m_ip_cb+0x38>
   24096:	e275      	b.n	24584 <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
   24098:	23cc      	movs	r3, #204	; 0xcc
   2409a:	18fb      	adds	r3, r7, r3
   2409c:	2201      	movs	r2, #1
   2409e:	569a      	ldrsb	r2, [r3, r2]
   240a0:	23c8      	movs	r3, #200	; 0xc8
   240a2:	18fb      	adds	r3, r7, r3
   240a4:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   240a6:	4b93      	ldr	r3, [pc, #588]	; (242f4 <m2m_ip_cb+0x294>)
   240a8:	681b      	ldr	r3, [r3, #0]
   240aa:	2b00      	cmp	r3, #0
   240ac:	d100      	bne.n	240b0 <m2m_ip_cb+0x50>
   240ae:	e269      	b.n	24584 <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
   240b0:	4b90      	ldr	r3, [pc, #576]	; (242f4 <m2m_ip_cb+0x294>)
   240b2:	681b      	ldr	r3, [r3, #0]
   240b4:	22cc      	movs	r2, #204	; 0xcc
   240b6:	18ba      	adds	r2, r7, r2
   240b8:	2000      	movs	r0, #0
   240ba:	5610      	ldrsb	r0, [r2, r0]
   240bc:	22c8      	movs	r2, #200	; 0xc8
   240be:	18ba      	adds	r2, r7, r2
   240c0:	2101      	movs	r1, #1
   240c2:	4798      	blx	r3
	{
   240c4:	e25e      	b.n	24584 <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
   240c6:	1dfb      	adds	r3, r7, #7
   240c8:	781b      	ldrb	r3, [r3, #0]
   240ca:	2b42      	cmp	r3, #66	; 0x42
   240cc:	d120      	bne.n	24110 <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
   240ce:	23c4      	movs	r3, #196	; 0xc4
   240d0:	18f9      	adds	r1, r7, r3
   240d2:	6838      	ldr	r0, [r7, #0]
   240d4:	2300      	movs	r3, #0
   240d6:	2204      	movs	r2, #4
   240d8:	4c85      	ldr	r4, [pc, #532]	; (242f0 <m2m_ip_cb+0x290>)
   240da:	47a0      	blx	r4
   240dc:	1e03      	subs	r3, r0, #0
   240de:	d000      	beq.n	240e2 <m2m_ip_cb+0x82>
   240e0:	e257      	b.n	24592 <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
   240e2:	23c4      	movs	r3, #196	; 0xc4
   240e4:	18fb      	adds	r3, r7, r3
   240e6:	2201      	movs	r2, #1
   240e8:	569a      	ldrsb	r2, [r3, r2]
   240ea:	23c0      	movs	r3, #192	; 0xc0
   240ec:	18fb      	adds	r3, r7, r3
   240ee:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   240f0:	4b80      	ldr	r3, [pc, #512]	; (242f4 <m2m_ip_cb+0x294>)
   240f2:	681b      	ldr	r3, [r3, #0]
   240f4:	2b00      	cmp	r3, #0
   240f6:	d100      	bne.n	240fa <m2m_ip_cb+0x9a>
   240f8:	e24b      	b.n	24592 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
   240fa:	4b7e      	ldr	r3, [pc, #504]	; (242f4 <m2m_ip_cb+0x294>)
   240fc:	681b      	ldr	r3, [r3, #0]
   240fe:	22c4      	movs	r2, #196	; 0xc4
   24100:	18ba      	adds	r2, r7, r2
   24102:	2000      	movs	r0, #0
   24104:	5610      	ldrsb	r0, [r2, r0]
   24106:	22c0      	movs	r2, #192	; 0xc0
   24108:	18ba      	adds	r2, r7, r2
   2410a:	2102      	movs	r1, #2
   2410c:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
   2410e:	e240      	b.n	24592 <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
   24110:	1dfb      	adds	r3, r7, #7
   24112:	781b      	ldrb	r3, [r3, #0]
   24114:	2b43      	cmp	r3, #67	; 0x43
   24116:	d000      	beq.n	2411a <m2m_ip_cb+0xba>
   24118:	e086      	b.n	24228 <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
   2411a:	23b4      	movs	r3, #180	; 0xb4
   2411c:	18f9      	adds	r1, r7, r3
   2411e:	6838      	ldr	r0, [r7, #0]
   24120:	2300      	movs	r3, #0
   24122:	220c      	movs	r2, #12
   24124:	4c72      	ldr	r4, [pc, #456]	; (242f0 <m2m_ip_cb+0x290>)
   24126:	47a0      	blx	r4
   24128:	1e03      	subs	r3, r0, #0
   2412a:	d000      	beq.n	2412e <m2m_ip_cb+0xce>
   2412c:	e231      	b.n	24592 <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
   2412e:	23b4      	movs	r3, #180	; 0xb4
   24130:	18fb      	adds	r3, r7, r3
   24132:	7a5b      	ldrb	r3, [r3, #9]
   24134:	b25b      	sxtb	r3, r3
   24136:	2b00      	cmp	r3, #0
   24138:	db4f      	blt.n	241da <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
   2413a:	23b4      	movs	r3, #180	; 0xb4
   2413c:	18fb      	adds	r3, r7, r3
   2413e:	7a5b      	ldrb	r3, [r3, #9]
   24140:	b25b      	sxtb	r3, r3
   24142:	0018      	movs	r0, r3
   24144:	23b4      	movs	r3, #180	; 0xb4
   24146:	18fb      	adds	r3, r7, r3
   24148:	7a1b      	ldrb	r3, [r3, #8]
   2414a:	b25b      	sxtb	r3, r3
   2414c:	4a6a      	ldr	r2, [pc, #424]	; (242f8 <m2m_ip_cb+0x298>)
   2414e:	011b      	lsls	r3, r3, #4
   24150:	18d3      	adds	r3, r2, r3
   24152:	330b      	adds	r3, #11
   24154:	781b      	ldrb	r3, [r3, #0]
   24156:	b2d9      	uxtb	r1, r3
   24158:	4a67      	ldr	r2, [pc, #412]	; (242f8 <m2m_ip_cb+0x298>)
   2415a:	0103      	lsls	r3, r0, #4
   2415c:	18d3      	adds	r3, r2, r3
   2415e:	330b      	adds	r3, #11
   24160:	1c0a      	adds	r2, r1, #0
   24162:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
   24164:	23b4      	movs	r3, #180	; 0xb4
   24166:	18fb      	adds	r3, r7, r3
   24168:	7a5b      	ldrb	r3, [r3, #9]
   2416a:	b25b      	sxtb	r3, r3
   2416c:	4a62      	ldr	r2, [pc, #392]	; (242f8 <m2m_ip_cb+0x298>)
   2416e:	011b      	lsls	r3, r3, #4
   24170:	18d3      	adds	r3, r2, r3
   24172:	330a      	adds	r3, #10
   24174:	2201      	movs	r2, #1
   24176:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   24178:	23b4      	movs	r3, #180	; 0xb4
   2417a:	18fb      	adds	r3, r7, r3
   2417c:	7a5b      	ldrb	r3, [r3, #9]
   2417e:	b25b      	sxtb	r3, r3
   24180:	0018      	movs	r0, r3
   24182:	23b4      	movs	r3, #180	; 0xb4
   24184:	18fb      	adds	r3, r7, r3
   24186:	895b      	ldrh	r3, [r3, #10]
   24188:	3b08      	subs	r3, #8
   2418a:	b299      	uxth	r1, r3
   2418c:	4a5a      	ldr	r2, [pc, #360]	; (242f8 <m2m_ip_cb+0x298>)
   2418e:	0103      	lsls	r3, r0, #4
   24190:	18d3      	adds	r3, r2, r3
   24192:	3308      	adds	r3, #8
   24194:	1c0a      	adds	r2, r1, #0
   24196:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
   24198:	4b58      	ldr	r3, [pc, #352]	; (242fc <m2m_ip_cb+0x29c>)
   2419a:	881b      	ldrh	r3, [r3, #0]
   2419c:	b29b      	uxth	r3, r3
   2419e:	3301      	adds	r3, #1
   241a0:	b29a      	uxth	r2, r3
   241a2:	4b56      	ldr	r3, [pc, #344]	; (242fc <m2m_ip_cb+0x29c>)
   241a4:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
   241a6:	4b55      	ldr	r3, [pc, #340]	; (242fc <m2m_ip_cb+0x29c>)
   241a8:	881b      	ldrh	r3, [r3, #0]
   241aa:	b29b      	uxth	r3, r3
   241ac:	2b00      	cmp	r3, #0
   241ae:	d106      	bne.n	241be <m2m_ip_cb+0x15e>
					++gu16SessionID;
   241b0:	4b52      	ldr	r3, [pc, #328]	; (242fc <m2m_ip_cb+0x29c>)
   241b2:	881b      	ldrh	r3, [r3, #0]
   241b4:	b29b      	uxth	r3, r3
   241b6:	3301      	adds	r3, #1
   241b8:	b29a      	uxth	r2, r3
   241ba:	4b50      	ldr	r3, [pc, #320]	; (242fc <m2m_ip_cb+0x29c>)
   241bc:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
   241be:	23b4      	movs	r3, #180	; 0xb4
   241c0:	18fb      	adds	r3, r7, r3
   241c2:	7a5b      	ldrb	r3, [r3, #9]
   241c4:	b25b      	sxtb	r3, r3
   241c6:	0018      	movs	r0, r3
   241c8:	4b4c      	ldr	r3, [pc, #304]	; (242fc <m2m_ip_cb+0x29c>)
   241ca:	881b      	ldrh	r3, [r3, #0]
   241cc:	b299      	uxth	r1, r3
   241ce:	4a4a      	ldr	r2, [pc, #296]	; (242f8 <m2m_ip_cb+0x298>)
   241d0:	0103      	lsls	r3, r0, #4
   241d2:	18d3      	adds	r3, r2, r3
   241d4:	3306      	adds	r3, #6
   241d6:	1c0a      	adds	r2, r1, #0
   241d8:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
   241da:	23b4      	movs	r3, #180	; 0xb4
   241dc:	18fb      	adds	r3, r7, r3
   241de:	2209      	movs	r2, #9
   241e0:	569a      	ldrsb	r2, [r3, r2]
   241e2:	23a0      	movs	r3, #160	; 0xa0
   241e4:	18fb      	adds	r3, r7, r3
   241e6:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
   241e8:	23a0      	movs	r3, #160	; 0xa0
   241ea:	18fb      	adds	r3, r7, r3
   241ec:	2202      	movs	r2, #2
   241ee:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
   241f0:	23b4      	movs	r3, #180	; 0xb4
   241f2:	18fb      	adds	r3, r7, r3
   241f4:	885a      	ldrh	r2, [r3, #2]
   241f6:	23a0      	movs	r3, #160	; 0xa0
   241f8:	18fb      	adds	r3, r7, r3
   241fa:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
   241fc:	23b4      	movs	r3, #180	; 0xb4
   241fe:	18fb      	adds	r3, r7, r3
   24200:	685a      	ldr	r2, [r3, #4]
   24202:	23a0      	movs	r3, #160	; 0xa0
   24204:	18fb      	adds	r3, r7, r3
   24206:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
   24208:	4b3a      	ldr	r3, [pc, #232]	; (242f4 <m2m_ip_cb+0x294>)
   2420a:	681b      	ldr	r3, [r3, #0]
   2420c:	2b00      	cmp	r3, #0
   2420e:	d100      	bne.n	24212 <m2m_ip_cb+0x1b2>
   24210:	e1bf      	b.n	24592 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
   24212:	4b38      	ldr	r3, [pc, #224]	; (242f4 <m2m_ip_cb+0x294>)
   24214:	681b      	ldr	r3, [r3, #0]
   24216:	22b4      	movs	r2, #180	; 0xb4
   24218:	18ba      	adds	r2, r7, r2
   2421a:	2008      	movs	r0, #8
   2421c:	5610      	ldrsb	r0, [r2, r0]
   2421e:	22a0      	movs	r2, #160	; 0xa0
   24220:	18ba      	adds	r2, r7, r2
   24222:	2104      	movs	r1, #4
   24224:	4798      	blx	r3
}
   24226:	e1b4      	b.n	24592 <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
   24228:	1dfb      	adds	r3, r7, #7
   2422a:	781b      	ldrb	r3, [r3, #0]
   2422c:	2b44      	cmp	r3, #68	; 0x44
   2422e:	d003      	beq.n	24238 <m2m_ip_cb+0x1d8>
   24230:	1dfb      	adds	r3, r7, #7
   24232:	781b      	ldrb	r3, [r3, #0]
   24234:	2b4b      	cmp	r3, #75	; 0x4b
   24236:	d13d      	bne.n	242b4 <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
   24238:	239c      	movs	r3, #156	; 0x9c
   2423a:	18f9      	adds	r1, r7, r3
   2423c:	6838      	ldr	r0, [r7, #0]
   2423e:	2300      	movs	r3, #0
   24240:	2204      	movs	r2, #4
   24242:	4c2b      	ldr	r4, [pc, #172]	; (242f0 <m2m_ip_cb+0x290>)
   24244:	47a0      	blx	r4
   24246:	1e03      	subs	r3, r0, #0
   24248:	d000      	beq.n	2424c <m2m_ip_cb+0x1ec>
   2424a:	e19d      	b.n	24588 <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
   2424c:	239c      	movs	r3, #156	; 0x9c
   2424e:	18fb      	adds	r3, r7, r3
   24250:	2200      	movs	r2, #0
   24252:	569a      	ldrsb	r2, [r3, r2]
   24254:	2398      	movs	r3, #152	; 0x98
   24256:	18fb      	adds	r3, r7, r3
   24258:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
   2425a:	239c      	movs	r3, #156	; 0x9c
   2425c:	18fb      	adds	r3, r7, r3
   2425e:	2201      	movs	r2, #1
   24260:	569a      	ldrsb	r2, [r3, r2]
   24262:	2398      	movs	r3, #152	; 0x98
   24264:	18fb      	adds	r3, r7, r3
   24266:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
   24268:	239c      	movs	r3, #156	; 0x9c
   2426a:	18fb      	adds	r3, r7, r3
   2426c:	785b      	ldrb	r3, [r3, #1]
   2426e:	b25b      	sxtb	r3, r3
   24270:	2b00      	cmp	r3, #0
   24272:	d10f      	bne.n	24294 <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   24274:	239c      	movs	r3, #156	; 0x9c
   24276:	18fb      	adds	r3, r7, r3
   24278:	781b      	ldrb	r3, [r3, #0]
   2427a:	b25b      	sxtb	r3, r3
   2427c:	0018      	movs	r0, r3
   2427e:	239c      	movs	r3, #156	; 0x9c
   24280:	18fb      	adds	r3, r7, r3
   24282:	885b      	ldrh	r3, [r3, #2]
   24284:	3b08      	subs	r3, #8
   24286:	b299      	uxth	r1, r3
   24288:	4a1b      	ldr	r2, [pc, #108]	; (242f8 <m2m_ip_cb+0x298>)
   2428a:	0103      	lsls	r3, r0, #4
   2428c:	18d3      	adds	r3, r2, r3
   2428e:	3308      	adds	r3, #8
   24290:	1c0a      	adds	r2, r1, #0
   24292:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
   24294:	4b17      	ldr	r3, [pc, #92]	; (242f4 <m2m_ip_cb+0x294>)
   24296:	681b      	ldr	r3, [r3, #0]
   24298:	2b00      	cmp	r3, #0
   2429a:	d100      	bne.n	2429e <m2m_ip_cb+0x23e>
   2429c:	e174      	b.n	24588 <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
   2429e:	4b15      	ldr	r3, [pc, #84]	; (242f4 <m2m_ip_cb+0x294>)
   242a0:	681b      	ldr	r3, [r3, #0]
   242a2:	229c      	movs	r2, #156	; 0x9c
   242a4:	18ba      	adds	r2, r7, r2
   242a6:	2000      	movs	r0, #0
   242a8:	5610      	ldrsb	r0, [r2, r0]
   242aa:	2298      	movs	r2, #152	; 0x98
   242ac:	18ba      	adds	r2, r7, r2
   242ae:	2105      	movs	r1, #5
   242b0:	4798      	blx	r3
	{
   242b2:	e169      	b.n	24588 <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
   242b4:	1dfb      	adds	r3, r7, #7
   242b6:	781b      	ldrb	r3, [r3, #0]
   242b8:	2b4a      	cmp	r3, #74	; 0x4a
   242ba:	d123      	bne.n	24304 <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
   242bc:	230c      	movs	r3, #12
   242be:	18f9      	adds	r1, r7, r3
   242c0:	6838      	ldr	r0, [r7, #0]
   242c2:	2300      	movs	r3, #0
   242c4:	2244      	movs	r2, #68	; 0x44
   242c6:	4c0a      	ldr	r4, [pc, #40]	; (242f0 <m2m_ip_cb+0x290>)
   242c8:	47a0      	blx	r4
   242ca:	1e03      	subs	r3, r0, #0
   242cc:	d000      	beq.n	242d0 <m2m_ip_cb+0x270>
   242ce:	e160      	b.n	24592 <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
   242d0:	4b0b      	ldr	r3, [pc, #44]	; (24300 <m2m_ip_cb+0x2a0>)
   242d2:	681b      	ldr	r3, [r3, #0]
   242d4:	2b00      	cmp	r3, #0
   242d6:	d100      	bne.n	242da <m2m_ip_cb+0x27a>
   242d8:	e15b      	b.n	24592 <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
   242da:	4b09      	ldr	r3, [pc, #36]	; (24300 <m2m_ip_cb+0x2a0>)
   242dc:	681a      	ldr	r2, [r3, #0]
   242de:	230c      	movs	r3, #12
   242e0:	18fb      	adds	r3, r7, r3
   242e2:	6c19      	ldr	r1, [r3, #64]	; 0x40
   242e4:	230c      	movs	r3, #12
   242e6:	18fb      	adds	r3, r7, r3
   242e8:	0018      	movs	r0, r3
   242ea:	4790      	blx	r2
}
   242ec:	e151      	b.n	24592 <m2m_ip_cb+0x532>
   242ee:	46c0      	nop			; (mov r8, r8)
   242f0:	0002085d 	.word	0x0002085d
   242f4:	20005b78 	.word	0x20005b78
   242f8:	20005ac8 	.word	0x20005ac8
   242fc:	2000427e 	.word	0x2000427e
   24300:	20005b80 	.word	0x20005b80
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
   24304:	1dfb      	adds	r3, r7, #7
   24306:	781b      	ldrb	r3, [r3, #0]
   24308:	2b46      	cmp	r3, #70	; 0x46
   2430a:	d008      	beq.n	2431e <m2m_ip_cb+0x2be>
   2430c:	1dfb      	adds	r3, r7, #7
   2430e:	781b      	ldrb	r3, [r3, #0]
   24310:	2b48      	cmp	r3, #72	; 0x48
   24312:	d004      	beq.n	2431e <m2m_ip_cb+0x2be>
   24314:	1dfb      	adds	r3, r7, #7
   24316:	781b      	ldrb	r3, [r3, #0]
   24318:	2b4d      	cmp	r3, #77	; 0x4d
   2431a:	d000      	beq.n	2431e <m2m_ip_cb+0x2be>
   2431c:	e0b4      	b.n	24488 <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
   2431e:	23df      	movs	r3, #223	; 0xdf
   24320:	18fb      	adds	r3, r7, r3
   24322:	2206      	movs	r2, #6
   24324:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
   24326:	1dfb      	adds	r3, r7, #7
   24328:	781b      	ldrb	r3, [r3, #0]
   2432a:	2b48      	cmp	r3, #72	; 0x48
   2432c:	d103      	bne.n	24336 <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
   2432e:	23df      	movs	r3, #223	; 0xdf
   24330:	18fb      	adds	r3, r7, r3
   24332:	2209      	movs	r2, #9
   24334:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
   24336:	23d8      	movs	r3, #216	; 0xd8
   24338:	18fb      	adds	r3, r7, r3
   2433a:	2210      	movs	r2, #16
   2433c:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
   2433e:	23d8      	movs	r3, #216	; 0xd8
   24340:	18fb      	adds	r3, r7, r3
   24342:	881a      	ldrh	r2, [r3, #0]
   24344:	2388      	movs	r3, #136	; 0x88
   24346:	18f9      	adds	r1, r7, r3
   24348:	6838      	ldr	r0, [r7, #0]
   2434a:	2300      	movs	r3, #0
   2434c:	4c93      	ldr	r4, [pc, #588]	; (2459c <m2m_ip_cb+0x53c>)
   2434e:	47a0      	blx	r4
   24350:	1e03      	subs	r3, r0, #0
   24352:	d000      	beq.n	24356 <m2m_ip_cb+0x2f6>
   24354:	e11a      	b.n	2458c <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
   24356:	23d6      	movs	r3, #214	; 0xd6
   24358:	18fb      	adds	r3, r7, r3
   2435a:	2200      	movs	r2, #0
   2435c:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
   2435e:	23d5      	movs	r3, #213	; 0xd5
   24360:	18fb      	adds	r3, r7, r3
   24362:	2288      	movs	r2, #136	; 0x88
   24364:	18ba      	adds	r2, r7, r2
   24366:	7b12      	ldrb	r2, [r2, #12]
   24368:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
   2436a:	23d6      	movs	r3, #214	; 0xd6
   2436c:	18fb      	adds	r3, r7, r3
   2436e:	2288      	movs	r2, #136	; 0x88
   24370:	18ba      	adds	r2, r7, r2
   24372:	89d2      	ldrh	r2, [r2, #14]
   24374:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
   24376:	23d5      	movs	r3, #213	; 0xd5
   24378:	18fb      	adds	r3, r7, r3
   2437a:	781b      	ldrb	r3, [r3, #0]
   2437c:	b25b      	sxtb	r3, r3
   2437e:	4a88      	ldr	r2, [pc, #544]	; (245a0 <m2m_ip_cb+0x540>)
   24380:	011b      	lsls	r3, r3, #4
   24382:	18d3      	adds	r3, r2, r3
   24384:	330c      	adds	r3, #12
   24386:	2200      	movs	r2, #0
   24388:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
   2438a:	23d2      	movs	r3, #210	; 0xd2
   2438c:	18fb      	adds	r3, r7, r3
   2438e:	2288      	movs	r2, #136	; 0x88
   24390:	18ba      	adds	r2, r7, r2
   24392:	8912      	ldrh	r2, [r2, #8]
   24394:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
   24396:	23d0      	movs	r3, #208	; 0xd0
   24398:	18fb      	adds	r3, r7, r3
   2439a:	2288      	movs	r2, #136	; 0x88
   2439c:	18ba      	adds	r2, r7, r2
   2439e:	8952      	ldrh	r2, [r2, #10]
   243a0:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
   243a2:	2388      	movs	r3, #136	; 0x88
   243a4:	18fb      	adds	r3, r7, r3
   243a6:	885a      	ldrh	r2, [r3, #2]
   243a8:	2370      	movs	r3, #112	; 0x70
   243aa:	18fb      	adds	r3, r7, r3
   243ac:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
   243ae:	2388      	movs	r3, #136	; 0x88
   243b0:	18fb      	adds	r3, r7, r3
   243b2:	685a      	ldr	r2, [r3, #4]
   243b4:	2370      	movs	r3, #112	; 0x70
   243b6:	18fb      	adds	r3, r7, r3
   243b8:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   243ba:	23d5      	movs	r3, #213	; 0xd5
   243bc:	18fb      	adds	r3, r7, r3
   243be:	781b      	ldrb	r3, [r3, #0]
   243c0:	b25b      	sxtb	r3, r3
   243c2:	4a77      	ldr	r2, [pc, #476]	; (245a0 <m2m_ip_cb+0x540>)
   243c4:	011b      	lsls	r3, r3, #4
   243c6:	18d3      	adds	r3, r2, r3
   243c8:	3306      	adds	r3, #6
   243ca:	881b      	ldrh	r3, [r3, #0]
   243cc:	b29b      	uxth	r3, r3
   243ce:	22d6      	movs	r2, #214	; 0xd6
   243d0:	18ba      	adds	r2, r7, r2
   243d2:	8812      	ldrh	r2, [r2, #0]
   243d4:	429a      	cmp	r2, r3
   243d6:	d148      	bne.n	2446a <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
   243d8:	23d2      	movs	r3, #210	; 0xd2
   243da:	18fb      	adds	r3, r7, r3
   243dc:	2200      	movs	r2, #0
   243de:	5e9b      	ldrsh	r3, [r3, r2]
   243e0:	2b00      	cmp	r3, #0
   243e2:	dd25      	ble.n	24430 <m2m_ip_cb+0x3d0>
   243e4:	23d2      	movs	r3, #210	; 0xd2
   243e6:	18fb      	adds	r3, r7, r3
   243e8:	2200      	movs	r2, #0
   243ea:	5e9a      	ldrsh	r2, [r3, r2]
   243ec:	1d3b      	adds	r3, r7, #4
   243ee:	881b      	ldrh	r3, [r3, #0]
   243f0:	429a      	cmp	r2, r3
   243f2:	da1d      	bge.n	24430 <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
   243f4:	23d0      	movs	r3, #208	; 0xd0
   243f6:	18fb      	adds	r3, r7, r3
   243f8:	881b      	ldrh	r3, [r3, #0]
   243fa:	683a      	ldr	r2, [r7, #0]
   243fc:	18d3      	adds	r3, r2, r3
   243fe:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
   24400:	23d8      	movs	r3, #216	; 0xd8
   24402:	18fb      	adds	r3, r7, r3
   24404:	22d2      	movs	r2, #210	; 0xd2
   24406:	18ba      	adds	r2, r7, r2
   24408:	8812      	ldrh	r2, [r2, #0]
   2440a:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
   2440c:	683c      	ldr	r4, [r7, #0]
   2440e:	23df      	movs	r3, #223	; 0xdf
   24410:	18fb      	adds	r3, r7, r3
   24412:	781a      	ldrb	r2, [r3, #0]
   24414:	2370      	movs	r3, #112	; 0x70
   24416:	18f9      	adds	r1, r7, r3
   24418:	23d5      	movs	r3, #213	; 0xd5
   2441a:	18fb      	adds	r3, r7, r3
   2441c:	2000      	movs	r0, #0
   2441e:	5618      	ldrsb	r0, [r3, r0]
   24420:	23d8      	movs	r3, #216	; 0xd8
   24422:	18fb      	adds	r3, r7, r3
   24424:	881b      	ldrh	r3, [r3, #0]
   24426:	9300      	str	r3, [sp, #0]
   24428:	0023      	movs	r3, r4
   2442a:	4c5e      	ldr	r4, [pc, #376]	; (245a4 <m2m_ip_cb+0x544>)
   2442c:	47a0      	blx	r4
	{
   2442e:	e0ad      	b.n	2458c <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
   24430:	2370      	movs	r3, #112	; 0x70
   24432:	18fb      	adds	r3, r7, r3
   24434:	22d2      	movs	r2, #210	; 0xd2
   24436:	18ba      	adds	r2, r7, r2
   24438:	8812      	ldrh	r2, [r2, #0]
   2443a:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
   2443c:	2370      	movs	r3, #112	; 0x70
   2443e:	18fb      	adds	r3, r7, r3
   24440:	2200      	movs	r2, #0
   24442:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
   24444:	4b58      	ldr	r3, [pc, #352]	; (245a8 <m2m_ip_cb+0x548>)
   24446:	681b      	ldr	r3, [r3, #0]
   24448:	2b00      	cmp	r3, #0
   2444a:	d100      	bne.n	2444e <m2m_ip_cb+0x3ee>
   2444c:	e09e      	b.n	2458c <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
   2444e:	4b56      	ldr	r3, [pc, #344]	; (245a8 <m2m_ip_cb+0x548>)
   24450:	681b      	ldr	r3, [r3, #0]
   24452:	2270      	movs	r2, #112	; 0x70
   24454:	18bc      	adds	r4, r7, r2
   24456:	22df      	movs	r2, #223	; 0xdf
   24458:	18ba      	adds	r2, r7, r2
   2445a:	7811      	ldrb	r1, [r2, #0]
   2445c:	22d5      	movs	r2, #213	; 0xd5
   2445e:	18ba      	adds	r2, r7, r2
   24460:	2000      	movs	r0, #0
   24462:	5610      	ldrsb	r0, [r2, r0]
   24464:	0022      	movs	r2, r4
   24466:	4798      	blx	r3
	{
   24468:	e090      	b.n	2458c <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
   2446a:	23d8      	movs	r3, #216	; 0xd8
   2446c:	18fa      	adds	r2, r7, r3
   2446e:	1d3b      	adds	r3, r7, #4
   24470:	8812      	ldrh	r2, [r2, #0]
   24472:	881b      	ldrh	r3, [r3, #0]
   24474:	429a      	cmp	r2, r3
   24476:	d300      	bcc.n	2447a <m2m_ip_cb+0x41a>
   24478:	e088      	b.n	2458c <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   2447a:	2301      	movs	r3, #1
   2447c:	2200      	movs	r2, #0
   2447e:	2100      	movs	r1, #0
   24480:	2000      	movs	r0, #0
   24482:	4c46      	ldr	r4, [pc, #280]	; (2459c <m2m_ip_cb+0x53c>)
   24484:	47a0      	blx	r4
	{
   24486:	e081      	b.n	2458c <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
   24488:	1dfb      	adds	r3, r7, #7
   2448a:	781b      	ldrb	r3, [r3, #0]
   2448c:	2b45      	cmp	r3, #69	; 0x45
   2448e:	d007      	beq.n	244a0 <m2m_ip_cb+0x440>
   24490:	1dfb      	adds	r3, r7, #7
   24492:	781b      	ldrb	r3, [r3, #0]
   24494:	2b47      	cmp	r3, #71	; 0x47
   24496:	d003      	beq.n	244a0 <m2m_ip_cb+0x440>
   24498:	1dfb      	adds	r3, r7, #7
   2449a:	781b      	ldrb	r3, [r3, #0]
   2449c:	2b4c      	cmp	r3, #76	; 0x4c
   2449e:	d14c      	bne.n	2453a <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
   244a0:	23de      	movs	r3, #222	; 0xde
   244a2:	18fb      	adds	r3, r7, r3
   244a4:	2207      	movs	r2, #7
   244a6:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
   244a8:	1dfb      	adds	r3, r7, #7
   244aa:	781b      	ldrb	r3, [r3, #0]
   244ac:	2b47      	cmp	r3, #71	; 0x47
   244ae:	d103      	bne.n	244b8 <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
   244b0:	23de      	movs	r3, #222	; 0xde
   244b2:	18fb      	adds	r3, r7, r3
   244b4:	2208      	movs	r2, #8
   244b6:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
   244b8:	2364      	movs	r3, #100	; 0x64
   244ba:	18f9      	adds	r1, r7, r3
   244bc:	6838      	ldr	r0, [r7, #0]
   244be:	2300      	movs	r3, #0
   244c0:	2208      	movs	r2, #8
   244c2:	4c36      	ldr	r4, [pc, #216]	; (2459c <m2m_ip_cb+0x53c>)
   244c4:	47a0      	blx	r4
   244c6:	1e03      	subs	r3, r0, #0
   244c8:	d162      	bne.n	24590 <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
   244ca:	23dc      	movs	r3, #220	; 0xdc
   244cc:	18fb      	adds	r3, r7, r3
   244ce:	2200      	movs	r2, #0
   244d0:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
   244d2:	23db      	movs	r3, #219	; 0xdb
   244d4:	18fb      	adds	r3, r7, r3
   244d6:	2264      	movs	r2, #100	; 0x64
   244d8:	18ba      	adds	r2, r7, r2
   244da:	7812      	ldrb	r2, [r2, #0]
   244dc:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
   244de:	23dc      	movs	r3, #220	; 0xdc
   244e0:	18fb      	adds	r3, r7, r3
   244e2:	2264      	movs	r2, #100	; 0x64
   244e4:	18ba      	adds	r2, r7, r2
   244e6:	8892      	ldrh	r2, [r2, #4]
   244e8:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
   244ea:	2364      	movs	r3, #100	; 0x64
   244ec:	18fb      	adds	r3, r7, r3
   244ee:	2202      	movs	r2, #2
   244f0:	5e9a      	ldrsh	r2, [r3, r2]
   244f2:	236e      	movs	r3, #110	; 0x6e
   244f4:	18fb      	adds	r3, r7, r3
   244f6:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   244f8:	23db      	movs	r3, #219	; 0xdb
   244fa:	18fb      	adds	r3, r7, r3
   244fc:	781b      	ldrb	r3, [r3, #0]
   244fe:	b25b      	sxtb	r3, r3
   24500:	4a27      	ldr	r2, [pc, #156]	; (245a0 <m2m_ip_cb+0x540>)
   24502:	011b      	lsls	r3, r3, #4
   24504:	18d3      	adds	r3, r2, r3
   24506:	3306      	adds	r3, #6
   24508:	881b      	ldrh	r3, [r3, #0]
   2450a:	b29b      	uxth	r3, r3
   2450c:	22dc      	movs	r2, #220	; 0xdc
   2450e:	18ba      	adds	r2, r7, r2
   24510:	8812      	ldrh	r2, [r2, #0]
   24512:	429a      	cmp	r2, r3
   24514:	d13c      	bne.n	24590 <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
   24516:	4b24      	ldr	r3, [pc, #144]	; (245a8 <m2m_ip_cb+0x548>)
   24518:	681b      	ldr	r3, [r3, #0]
   2451a:	2b00      	cmp	r3, #0
   2451c:	d038      	beq.n	24590 <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
   2451e:	4b22      	ldr	r3, [pc, #136]	; (245a8 <m2m_ip_cb+0x548>)
   24520:	681b      	ldr	r3, [r3, #0]
   24522:	226e      	movs	r2, #110	; 0x6e
   24524:	18bc      	adds	r4, r7, r2
   24526:	22de      	movs	r2, #222	; 0xde
   24528:	18ba      	adds	r2, r7, r2
   2452a:	7811      	ldrb	r1, [r2, #0]
   2452c:	22db      	movs	r2, #219	; 0xdb
   2452e:	18ba      	adds	r2, r7, r2
   24530:	2000      	movs	r0, #0
   24532:	5610      	ldrsb	r0, [r2, r0]
   24534:	0022      	movs	r2, r4
   24536:	4798      	blx	r3
	{
   24538:	e02a      	b.n	24590 <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
   2453a:	1dfb      	adds	r3, r7, #7
   2453c:	781b      	ldrb	r3, [r3, #0]
   2453e:	2b52      	cmp	r3, #82	; 0x52
   24540:	d127      	bne.n	24592 <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
   24542:	2350      	movs	r3, #80	; 0x50
   24544:	18f9      	adds	r1, r7, r3
   24546:	6838      	ldr	r0, [r7, #0]
   24548:	2301      	movs	r3, #1
   2454a:	2214      	movs	r2, #20
   2454c:	4c13      	ldr	r4, [pc, #76]	; (2459c <m2m_ip_cb+0x53c>)
   2454e:	47a0      	blx	r4
   24550:	1e03      	subs	r3, r0, #0
   24552:	d11e      	bne.n	24592 <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
   24554:	2350      	movs	r3, #80	; 0x50
   24556:	18fb      	adds	r3, r7, r3
   24558:	685b      	ldr	r3, [r3, #4]
   2455a:	001a      	movs	r2, r3
   2455c:	4b13      	ldr	r3, [pc, #76]	; (245ac <m2m_ip_cb+0x54c>)
   2455e:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
   24560:	4b12      	ldr	r3, [pc, #72]	; (245ac <m2m_ip_cb+0x54c>)
   24562:	681b      	ldr	r3, [r3, #0]
   24564:	2b00      	cmp	r3, #0
   24566:	d014      	beq.n	24592 <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
   24568:	4b10      	ldr	r3, [pc, #64]	; (245ac <m2m_ip_cb+0x54c>)
   2456a:	681c      	ldr	r4, [r3, #0]
   2456c:	2350      	movs	r3, #80	; 0x50
   2456e:	18fb      	adds	r3, r7, r3
   24570:	6818      	ldr	r0, [r3, #0]
   24572:	2350      	movs	r3, #80	; 0x50
   24574:	18fb      	adds	r3, r7, r3
   24576:	6899      	ldr	r1, [r3, #8]
   24578:	2350      	movs	r3, #80	; 0x50
   2457a:	18fb      	adds	r3, r7, r3
   2457c:	7c1b      	ldrb	r3, [r3, #16]
   2457e:	001a      	movs	r2, r3
   24580:	47a0      	blx	r4
}
   24582:	e006      	b.n	24592 <m2m_ip_cb+0x532>
	{
   24584:	46c0      	nop			; (mov r8, r8)
   24586:	e004      	b.n	24592 <m2m_ip_cb+0x532>
	{
   24588:	46c0      	nop			; (mov r8, r8)
   2458a:	e002      	b.n	24592 <m2m_ip_cb+0x532>
	{
   2458c:	46c0      	nop			; (mov r8, r8)
   2458e:	e000      	b.n	24592 <m2m_ip_cb+0x532>
	{
   24590:	46c0      	nop			; (mov r8, r8)
}
   24592:	46c0      	nop			; (mov r8, r8)
   24594:	46bd      	mov	sp, r7
   24596:	b039      	add	sp, #228	; 0xe4
   24598:	bd90      	pop	{r4, r7, pc}
   2459a:	46c0      	nop			; (mov r8, r8)
   2459c:	0002085d 	.word	0x0002085d
   245a0:	20005ac8 	.word	0x20005ac8
   245a4:	00023e65 	.word	0x00023e65
   245a8:	20005b78 	.word	0x20005b78
   245ac:	20005b7c 	.word	0x20005b7c

000245b0 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
   245b0:	b580      	push	{r7, lr}
   245b2:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
   245b4:	4b0c      	ldr	r3, [pc, #48]	; (245e8 <socketInit+0x38>)
   245b6:	781b      	ldrb	r3, [r3, #0]
   245b8:	b2db      	uxtb	r3, r3
   245ba:	2b00      	cmp	r3, #0
   245bc:	d110      	bne.n	245e0 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   245be:	4b0b      	ldr	r3, [pc, #44]	; (245ec <socketInit+0x3c>)
   245c0:	22b0      	movs	r2, #176	; 0xb0
   245c2:	2100      	movs	r1, #0
   245c4:	0018      	movs	r0, r3
   245c6:	4b0a      	ldr	r3, [pc, #40]	; (245f0 <socketInit+0x40>)
   245c8:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
   245ca:	4b0a      	ldr	r3, [pc, #40]	; (245f4 <socketInit+0x44>)
   245cc:	0019      	movs	r1, r3
   245ce:	2002      	movs	r0, #2
   245d0:	4b09      	ldr	r3, [pc, #36]	; (245f8 <socketInit+0x48>)
   245d2:	4798      	blx	r3
		gbSocketInit	= 1;
   245d4:	4b04      	ldr	r3, [pc, #16]	; (245e8 <socketInit+0x38>)
   245d6:	2201      	movs	r2, #1
   245d8:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
   245da:	4b08      	ldr	r3, [pc, #32]	; (245fc <socketInit+0x4c>)
   245dc:	2200      	movs	r2, #0
   245de:	801a      	strh	r2, [r3, #0]
	}
}
   245e0:	46c0      	nop			; (mov r8, r8)
   245e2:	46bd      	mov	sp, r7
   245e4:	bd80      	pop	{r7, pc}
   245e6:	46c0      	nop			; (mov r8, r8)
   245e8:	20004280 	.word	0x20004280
   245ec:	20005ac8 	.word	0x20005ac8
   245f0:	0001fce1 	.word	0x0001fce1
   245f4:	00024061 	.word	0x00024061
   245f8:	000209dd 	.word	0x000209dd
   245fc:	2000427e 	.word	0x2000427e

00024600 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
   24600:	b580      	push	{r7, lr}
   24602:	af00      	add	r7, sp, #0
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   24604:	4b0a      	ldr	r3, [pc, #40]	; (24630 <socketDeinit+0x30>)
   24606:	22b0      	movs	r2, #176	; 0xb0
   24608:	2100      	movs	r1, #0
   2460a:	0018      	movs	r0, r3
   2460c:	4b09      	ldr	r3, [pc, #36]	; (24634 <socketDeinit+0x34>)
   2460e:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
   24610:	2100      	movs	r1, #0
   24612:	2002      	movs	r0, #2
   24614:	4b08      	ldr	r3, [pc, #32]	; (24638 <socketDeinit+0x38>)
   24616:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
   24618:	4b08      	ldr	r3, [pc, #32]	; (2463c <socketDeinit+0x3c>)
   2461a:	2200      	movs	r2, #0
   2461c:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb	= NULL;
   2461e:	4b08      	ldr	r3, [pc, #32]	; (24640 <socketDeinit+0x40>)
   24620:	2200      	movs	r2, #0
   24622:	601a      	str	r2, [r3, #0]
	gbSocketInit	= 0;
   24624:	4b07      	ldr	r3, [pc, #28]	; (24644 <socketDeinit+0x44>)
   24626:	2200      	movs	r2, #0
   24628:	701a      	strb	r2, [r3, #0]
}
   2462a:	46c0      	nop			; (mov r8, r8)
   2462c:	46bd      	mov	sp, r7
   2462e:	bd80      	pop	{r7, pc}
   24630:	20005ac8 	.word	0x20005ac8
   24634:	0001fce1 	.word	0x0001fce1
   24638:	000209dd 	.word	0x000209dd
   2463c:	20005b78 	.word	0x20005b78
   24640:	20005b80 	.word	0x20005b80
   24644:	20004280 	.word	0x20004280

00024648 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
   24648:	b580      	push	{r7, lr}
   2464a:	b082      	sub	sp, #8
   2464c:	af00      	add	r7, sp, #0
   2464e:	6078      	str	r0, [r7, #4]
   24650:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
   24652:	4b05      	ldr	r3, [pc, #20]	; (24668 <registerSocketCallback+0x20>)
   24654:	687a      	ldr	r2, [r7, #4]
   24656:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
   24658:	4b04      	ldr	r3, [pc, #16]	; (2466c <registerSocketCallback+0x24>)
   2465a:	683a      	ldr	r2, [r7, #0]
   2465c:	601a      	str	r2, [r3, #0]
}
   2465e:	46c0      	nop			; (mov r8, r8)
   24660:	46bd      	mov	sp, r7
   24662:	b002      	add	sp, #8
   24664:	bd80      	pop	{r7, pc}
   24666:	46c0      	nop			; (mov r8, r8)
   24668:	20005b78 	.word	0x20005b78
   2466c:	20005b80 	.word	0x20005b80

00024670 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
   24670:	b590      	push	{r4, r7, lr}
   24672:	b08d      	sub	sp, #52	; 0x34
   24674:	af04      	add	r7, sp, #16
   24676:	0004      	movs	r4, r0
   24678:	0008      	movs	r0, r1
   2467a:	0011      	movs	r1, r2
   2467c:	1dbb      	adds	r3, r7, #6
   2467e:	1c22      	adds	r2, r4, #0
   24680:	801a      	strh	r2, [r3, #0]
   24682:	1d7b      	adds	r3, r7, #5
   24684:	1c02      	adds	r2, r0, #0
   24686:	701a      	strb	r2, [r3, #0]
   24688:	1d3b      	adds	r3, r7, #4
   2468a:	1c0a      	adds	r2, r1, #0
   2468c:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
   2468e:	231f      	movs	r3, #31
   24690:	18fb      	adds	r3, r7, r3
   24692:	22ff      	movs	r2, #255	; 0xff
   24694:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
   24696:	1dbb      	adds	r3, r7, #6
   24698:	881b      	ldrh	r3, [r3, #0]
   2469a:	2b02      	cmp	r3, #2
   2469c:	d000      	beq.n	246a0 <socket+0x30>
   2469e:	e0ce      	b.n	2483e <socket+0x1ce>
	{
		if(u8Type == SOCK_STREAM)
   246a0:	1d7b      	adds	r3, r7, #5
   246a2:	781b      	ldrb	r3, [r3, #0]
   246a4:	2b01      	cmp	r3, #1
   246a6:	d135      	bne.n	24714 <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   246a8:	231e      	movs	r3, #30
   246aa:	18fb      	adds	r3, r7, r3
   246ac:	2200      	movs	r2, #0
   246ae:	701a      	strb	r2, [r3, #0]
   246b0:	e02a      	b.n	24708 <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
   246b2:	2317      	movs	r3, #23
   246b4:	18fb      	adds	r3, r7, r3
   246b6:	4a66      	ldr	r2, [pc, #408]	; (24850 <socket+0x1e0>)
   246b8:	7812      	ldrb	r2, [r2, #0]
   246ba:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
   246bc:	4b64      	ldr	r3, [pc, #400]	; (24850 <socket+0x1e0>)
   246be:	781b      	ldrb	r3, [r3, #0]
   246c0:	b2db      	uxtb	r3, r3
   246c2:	011a      	lsls	r2, r3, #4
   246c4:	4b63      	ldr	r3, [pc, #396]	; (24854 <socket+0x1e4>)
   246c6:	18d3      	adds	r3, r2, r3
   246c8:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   246ca:	4b61      	ldr	r3, [pc, #388]	; (24850 <socket+0x1e0>)
   246cc:	781b      	ldrb	r3, [r3, #0]
   246ce:	b2db      	uxtb	r3, r3
   246d0:	1c5a      	adds	r2, r3, #1
   246d2:	4b61      	ldr	r3, [pc, #388]	; (24858 <socket+0x1e8>)
   246d4:	2107      	movs	r1, #7
   246d6:	0010      	movs	r0, r2
   246d8:	4798      	blx	r3
   246da:	000b      	movs	r3, r1
   246dc:	b2da      	uxtb	r2, r3
   246de:	4b5c      	ldr	r3, [pc, #368]	; (24850 <socket+0x1e0>)
   246e0:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   246e2:	69bb      	ldr	r3, [r7, #24]
   246e4:	7a9b      	ldrb	r3, [r3, #10]
   246e6:	b2db      	uxtb	r3, r3
   246e8:	2b00      	cmp	r3, #0
   246ea:	d106      	bne.n	246fa <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
   246ec:	231f      	movs	r3, #31
   246ee:	18fb      	adds	r3, r7, r3
   246f0:	2217      	movs	r2, #23
   246f2:	18ba      	adds	r2, r7, r2
   246f4:	7812      	ldrb	r2, [r2, #0]
   246f6:	701a      	strb	r2, [r3, #0]
					break;
   246f8:	e04c      	b.n	24794 <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   246fa:	231e      	movs	r3, #30
   246fc:	18fb      	adds	r3, r7, r3
   246fe:	781a      	ldrb	r2, [r3, #0]
   24700:	231e      	movs	r3, #30
   24702:	18fb      	adds	r3, r7, r3
   24704:	3201      	adds	r2, #1
   24706:	701a      	strb	r2, [r3, #0]
   24708:	231e      	movs	r3, #30
   2470a:	18fb      	adds	r3, r7, r3
   2470c:	781b      	ldrb	r3, [r3, #0]
   2470e:	2b06      	cmp	r3, #6
   24710:	d9cf      	bls.n	246b2 <socket+0x42>
   24712:	e03f      	b.n	24794 <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
   24714:	1d7b      	adds	r3, r7, #5
   24716:	781b      	ldrb	r3, [r3, #0]
   24718:	2b02      	cmp	r3, #2
   2471a:	d13b      	bne.n	24794 <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
   2471c:	4b4f      	ldr	r3, [pc, #316]	; (2485c <socket+0x1ec>)
   2471e:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   24720:	231e      	movs	r3, #30
   24722:	18fb      	adds	r3, r7, r3
   24724:	2200      	movs	r2, #0
   24726:	701a      	strb	r2, [r3, #0]
   24728:	e02f      	b.n	2478a <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
   2472a:	2317      	movs	r3, #23
   2472c:	18fb      	adds	r3, r7, r3
   2472e:	4a4c      	ldr	r2, [pc, #304]	; (24860 <socket+0x1f0>)
   24730:	7812      	ldrb	r2, [r2, #0]
   24732:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   24734:	4b4a      	ldr	r3, [pc, #296]	; (24860 <socket+0x1f0>)
   24736:	781b      	ldrb	r3, [r3, #0]
   24738:	b2db      	uxtb	r3, r3
   2473a:	011b      	lsls	r3, r3, #4
   2473c:	693a      	ldr	r2, [r7, #16]
   2473e:	18d3      	adds	r3, r2, r3
   24740:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   24742:	4b47      	ldr	r3, [pc, #284]	; (24860 <socket+0x1f0>)
   24744:	781b      	ldrb	r3, [r3, #0]
   24746:	b2db      	uxtb	r3, r3
   24748:	3301      	adds	r3, #1
   2474a:	4a46      	ldr	r2, [pc, #280]	; (24864 <socket+0x1f4>)
   2474c:	4013      	ands	r3, r2
   2474e:	d504      	bpl.n	2475a <socket+0xea>
   24750:	3b01      	subs	r3, #1
   24752:	2204      	movs	r2, #4
   24754:	4252      	negs	r2, r2
   24756:	4313      	orrs	r3, r2
   24758:	3301      	adds	r3, #1
   2475a:	b2da      	uxtb	r2, r3
   2475c:	4b40      	ldr	r3, [pc, #256]	; (24860 <socket+0x1f0>)
   2475e:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   24760:	69bb      	ldr	r3, [r7, #24]
   24762:	7a9b      	ldrb	r3, [r3, #10]
   24764:	b2db      	uxtb	r3, r3
   24766:	2b00      	cmp	r3, #0
   24768:	d108      	bne.n	2477c <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
   2476a:	2317      	movs	r3, #23
   2476c:	18fb      	adds	r3, r7, r3
   2476e:	781b      	ldrb	r3, [r3, #0]
   24770:	3307      	adds	r3, #7
   24772:	b2da      	uxtb	r2, r3
   24774:	231f      	movs	r3, #31
   24776:	18fb      	adds	r3, r7, r3
   24778:	701a      	strb	r2, [r3, #0]
					break;
   2477a:	e00b      	b.n	24794 <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   2477c:	231e      	movs	r3, #30
   2477e:	18fb      	adds	r3, r7, r3
   24780:	781a      	ldrb	r2, [r3, #0]
   24782:	231e      	movs	r3, #30
   24784:	18fb      	adds	r3, r7, r3
   24786:	3201      	adds	r2, #1
   24788:	701a      	strb	r2, [r3, #0]
   2478a:	231e      	movs	r3, #30
   2478c:	18fb      	adds	r3, r7, r3
   2478e:	781b      	ldrb	r3, [r3, #0]
   24790:	2b03      	cmp	r3, #3
   24792:	d9ca      	bls.n	2472a <socket+0xba>
				}
			}
		}

		if(sock >= 0)
   24794:	231f      	movs	r3, #31
   24796:	18fb      	adds	r3, r7, r3
   24798:	781b      	ldrb	r3, [r3, #0]
   2479a:	2b7f      	cmp	r3, #127	; 0x7f
   2479c:	d84f      	bhi.n	2483e <socket+0x1ce>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
   2479e:	69bb      	ldr	r3, [r7, #24]
   247a0:	2210      	movs	r2, #16
   247a2:	2100      	movs	r1, #0
   247a4:	0018      	movs	r0, r3
   247a6:	4b30      	ldr	r3, [pc, #192]	; (24868 <socket+0x1f8>)
   247a8:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
   247aa:	69bb      	ldr	r3, [r7, #24]
   247ac:	2201      	movs	r2, #1
   247ae:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
   247b0:	4b2e      	ldr	r3, [pc, #184]	; (2486c <socket+0x1fc>)
   247b2:	881b      	ldrh	r3, [r3, #0]
   247b4:	b29b      	uxth	r3, r3
   247b6:	3301      	adds	r3, #1
   247b8:	b29a      	uxth	r2, r3
   247ba:	4b2c      	ldr	r3, [pc, #176]	; (2486c <socket+0x1fc>)
   247bc:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
   247be:	4b2b      	ldr	r3, [pc, #172]	; (2486c <socket+0x1fc>)
   247c0:	881b      	ldrh	r3, [r3, #0]
   247c2:	b29b      	uxth	r3, r3
   247c4:	2b00      	cmp	r3, #0
   247c6:	d106      	bne.n	247d6 <socket+0x166>
				++gu16SessionID;
   247c8:	4b28      	ldr	r3, [pc, #160]	; (2486c <socket+0x1fc>)
   247ca:	881b      	ldrh	r3, [r3, #0]
   247cc:	b29b      	uxth	r3, r3
   247ce:	3301      	adds	r3, #1
   247d0:	b29a      	uxth	r2, r3
   247d2:	4b26      	ldr	r3, [pc, #152]	; (2486c <socket+0x1fc>)
   247d4:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
   247d6:	4b25      	ldr	r3, [pc, #148]	; (2486c <socket+0x1fc>)
   247d8:	881b      	ldrh	r3, [r3, #0]
   247da:	b29a      	uxth	r2, r3
   247dc:	69bb      	ldr	r3, [r7, #24]
   247de:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
   247e0:	4b23      	ldr	r3, [pc, #140]	; (24870 <socket+0x200>)
   247e2:	0018      	movs	r0, r3
   247e4:	4b23      	ldr	r3, [pc, #140]	; (24874 <socket+0x204>)
   247e6:	4798      	blx	r3
   247e8:	231f      	movs	r3, #31
   247ea:	18fb      	adds	r3, r7, r3
   247ec:	2100      	movs	r1, #0
   247ee:	5659      	ldrsb	r1, [r3, r1]
   247f0:	4b1e      	ldr	r3, [pc, #120]	; (2486c <socket+0x1fc>)
   247f2:	881b      	ldrh	r3, [r3, #0]
   247f4:	b29b      	uxth	r3, r3
   247f6:	001a      	movs	r2, r3
   247f8:	4b1f      	ldr	r3, [pc, #124]	; (24878 <socket+0x208>)
   247fa:	0018      	movs	r0, r3
   247fc:	4b1d      	ldr	r3, [pc, #116]	; (24874 <socket+0x204>)
   247fe:	4798      	blx	r3
   24800:	4b1e      	ldr	r3, [pc, #120]	; (2487c <socket+0x20c>)
   24802:	0018      	movs	r0, r3
   24804:	4b1b      	ldr	r3, [pc, #108]	; (24874 <socket+0x204>)
   24806:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
   24808:	1d3b      	adds	r3, r7, #4
   2480a:	781b      	ldrb	r3, [r3, #0]
   2480c:	2201      	movs	r2, #1
   2480e:	4013      	ands	r3, r2
   24810:	d015      	beq.n	2483e <socket+0x1ce>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
   24812:	230c      	movs	r3, #12
   24814:	18fb      	adds	r3, r7, r3
   24816:	221f      	movs	r2, #31
   24818:	18ba      	adds	r2, r7, r2
   2481a:	7812      	ldrb	r2, [r2, #0]
   2481c:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
   2481e:	69bb      	ldr	r3, [r7, #24]
   24820:	2221      	movs	r2, #33	; 0x21
   24822:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
   24824:	230c      	movs	r3, #12
   24826:	18fa      	adds	r2, r7, r3
   24828:	2300      	movs	r3, #0
   2482a:	9302      	str	r3, [sp, #8]
   2482c:	2300      	movs	r3, #0
   2482e:	9301      	str	r3, [sp, #4]
   24830:	2300      	movs	r3, #0
   24832:	9300      	str	r3, [sp, #0]
   24834:	2304      	movs	r3, #4
   24836:	2150      	movs	r1, #80	; 0x50
   24838:	2002      	movs	r0, #2
   2483a:	4c11      	ldr	r4, [pc, #68]	; (24880 <socket+0x210>)
   2483c:	47a0      	blx	r4
			}
		}
	}
	return sock;
   2483e:	231f      	movs	r3, #31
   24840:	18fb      	adds	r3, r7, r3
   24842:	781b      	ldrb	r3, [r3, #0]
   24844:	b25b      	sxtb	r3, r3
}
   24846:	0018      	movs	r0, r3
   24848:	46bd      	mov	sp, r7
   2484a:	b009      	add	sp, #36	; 0x24
   2484c:	bd90      	pop	{r4, r7, pc}
   2484e:	46c0      	nop			; (mov r8, r8)
   24850:	20004281 	.word	0x20004281
   24854:	20005ac8 	.word	0x20005ac8
   24858:	00031e05 	.word	0x00031e05
   2485c:	20005b38 	.word	0x20005b38
   24860:	20004282 	.word	0x20004282
   24864:	80000003 	.word	0x80000003
   24868:	0001fce1 	.word	0x0001fce1
   2486c:	2000427e 	.word	0x2000427e
   24870:	00038e80 	.word	0x00038e80
   24874:	0001cf49 	.word	0x0001cf49
   24878:	00038ea4 	.word	0x00038ea4
   2487c:	00038ea0 	.word	0x00038ea0
   24880:	0001ff41 	.word	0x0001ff41

00024884 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
   24884:	b5b0      	push	{r4, r5, r7, lr}
   24886:	b08a      	sub	sp, #40	; 0x28
   24888:	af04      	add	r7, sp, #16
   2488a:	6039      	str	r1, [r7, #0]
   2488c:	0011      	movs	r1, r2
   2488e:	1dfb      	adds	r3, r7, #7
   24890:	1c02      	adds	r2, r0, #0
   24892:	701a      	strb	r2, [r3, #0]
   24894:	1dbb      	adds	r3, r7, #6
   24896:	1c0a      	adds	r2, r1, #0
   24898:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   2489a:	2317      	movs	r3, #23
   2489c:	18fb      	adds	r3, r7, r3
   2489e:	22fa      	movs	r2, #250	; 0xfa
   248a0:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
   248a2:	1dfb      	adds	r3, r7, #7
   248a4:	781b      	ldrb	r3, [r3, #0]
   248a6:	2b7f      	cmp	r3, #127	; 0x7f
   248a8:	d867      	bhi.n	2497a <connect+0xf6>
   248aa:	683b      	ldr	r3, [r7, #0]
   248ac:	2b00      	cmp	r3, #0
   248ae:	d064      	beq.n	2497a <connect+0xf6>
   248b0:	1dfb      	adds	r3, r7, #7
   248b2:	781b      	ldrb	r3, [r3, #0]
   248b4:	b25b      	sxtb	r3, r3
   248b6:	4a35      	ldr	r2, [pc, #212]	; (2498c <connect+0x108>)
   248b8:	011b      	lsls	r3, r3, #4
   248ba:	18d3      	adds	r3, r2, r3
   248bc:	330a      	adds	r3, #10
   248be:	781b      	ldrb	r3, [r3, #0]
   248c0:	b2db      	uxtb	r3, r3
   248c2:	2b01      	cmp	r3, #1
   248c4:	d159      	bne.n	2497a <connect+0xf6>
   248c6:	1dbb      	adds	r3, r7, #6
   248c8:	781b      	ldrb	r3, [r3, #0]
   248ca:	2b00      	cmp	r3, #0
   248cc:	d055      	beq.n	2497a <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
   248ce:	2316      	movs	r3, #22
   248d0:	18fb      	adds	r3, r7, r3
   248d2:	2244      	movs	r2, #68	; 0x44
   248d4:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
   248d6:	1dfb      	adds	r3, r7, #7
   248d8:	781b      	ldrb	r3, [r3, #0]
   248da:	b25b      	sxtb	r3, r3
   248dc:	4a2b      	ldr	r2, [pc, #172]	; (2498c <connect+0x108>)
   248de:	011b      	lsls	r3, r3, #4
   248e0:	18d3      	adds	r3, r2, r3
   248e2:	330b      	adds	r3, #11
   248e4:	781b      	ldrb	r3, [r3, #0]
   248e6:	b2db      	uxtb	r3, r3
   248e8:	001a      	movs	r2, r3
   248ea:	2301      	movs	r3, #1
   248ec:	4013      	ands	r3, r2
   248ee:	d00f      	beq.n	24910 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
   248f0:	2316      	movs	r3, #22
   248f2:	18fb      	adds	r3, r7, r3
   248f4:	224b      	movs	r2, #75	; 0x4b
   248f6:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
   248f8:	1dfb      	adds	r3, r7, #7
   248fa:	781b      	ldrb	r3, [r3, #0]
   248fc:	b25b      	sxtb	r3, r3
   248fe:	4a23      	ldr	r2, [pc, #140]	; (2498c <connect+0x108>)
   24900:	011b      	lsls	r3, r3, #4
   24902:	18d3      	adds	r3, r2, r3
   24904:	330b      	adds	r3, #11
   24906:	781b      	ldrb	r3, [r3, #0]
   24908:	b2da      	uxtb	r2, r3
   2490a:	2308      	movs	r3, #8
   2490c:	18fb      	adds	r3, r7, r3
   2490e:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
   24910:	2308      	movs	r3, #8
   24912:	18fb      	adds	r3, r7, r3
   24914:	1dfa      	adds	r2, r7, #7
   24916:	7812      	ldrb	r2, [r2, #0]
   24918:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
   2491a:	6839      	ldr	r1, [r7, #0]
   2491c:	2308      	movs	r3, #8
   2491e:	18fb      	adds	r3, r7, r3
   24920:	2208      	movs	r2, #8
   24922:	0018      	movs	r0, r3
   24924:	4b1a      	ldr	r3, [pc, #104]	; (24990 <connect+0x10c>)
   24926:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
   24928:	1dfb      	adds	r3, r7, #7
   2492a:	781b      	ldrb	r3, [r3, #0]
   2492c:	b25b      	sxtb	r3, r3
   2492e:	4a17      	ldr	r2, [pc, #92]	; (2498c <connect+0x108>)
   24930:	011b      	lsls	r3, r3, #4
   24932:	18d3      	adds	r3, r2, r3
   24934:	3306      	adds	r3, #6
   24936:	881b      	ldrh	r3, [r3, #0]
   24938:	b29a      	uxth	r2, r3
   2493a:	2308      	movs	r3, #8
   2493c:	18fb      	adds	r3, r7, r3
   2493e:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
   24940:	2317      	movs	r3, #23
   24942:	18fc      	adds	r4, r7, r3
   24944:	2308      	movs	r3, #8
   24946:	18fa      	adds	r2, r7, r3
   24948:	2316      	movs	r3, #22
   2494a:	18fb      	adds	r3, r7, r3
   2494c:	7819      	ldrb	r1, [r3, #0]
   2494e:	2300      	movs	r3, #0
   24950:	9302      	str	r3, [sp, #8]
   24952:	2300      	movs	r3, #0
   24954:	9301      	str	r3, [sp, #4]
   24956:	2300      	movs	r3, #0
   24958:	9300      	str	r3, [sp, #0]
   2495a:	230c      	movs	r3, #12
   2495c:	2002      	movs	r0, #2
   2495e:	4d0d      	ldr	r5, [pc, #52]	; (24994 <connect+0x110>)
   24960:	47a8      	blx	r5
   24962:	0003      	movs	r3, r0
   24964:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   24966:	2317      	movs	r3, #23
   24968:	18fb      	adds	r3, r7, r3
   2496a:	781b      	ldrb	r3, [r3, #0]
   2496c:	b25b      	sxtb	r3, r3
   2496e:	2b00      	cmp	r3, #0
   24970:	d003      	beq.n	2497a <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
   24972:	2317      	movs	r3, #23
   24974:	18fb      	adds	r3, r7, r3
   24976:	22f7      	movs	r2, #247	; 0xf7
   24978:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
   2497a:	2317      	movs	r3, #23
   2497c:	18fb      	adds	r3, r7, r3
   2497e:	781b      	ldrb	r3, [r3, #0]
   24980:	b25b      	sxtb	r3, r3
}
   24982:	0018      	movs	r0, r3
   24984:	46bd      	mov	sp, r7
   24986:	b006      	add	sp, #24
   24988:	bdb0      	pop	{r4, r5, r7, pc}
   2498a:	46c0      	nop			; (mov r8, r8)
   2498c:	20005ac8 	.word	0x20005ac8
   24990:	0001fca5 	.word	0x0001fca5
   24994:	0001ff41 	.word	0x0001ff41

00024998 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
   24998:	b590      	push	{r4, r7, lr}
   2499a:	b08f      	sub	sp, #60	; 0x3c
   2499c:	af04      	add	r7, sp, #16
   2499e:	0004      	movs	r4, r0
   249a0:	60b9      	str	r1, [r7, #8]
   249a2:	0010      	movs	r0, r2
   249a4:	0019      	movs	r1, r3
   249a6:	230f      	movs	r3, #15
   249a8:	18fb      	adds	r3, r7, r3
   249aa:	1c22      	adds	r2, r4, #0
   249ac:	701a      	strb	r2, [r3, #0]
   249ae:	230c      	movs	r3, #12
   249b0:	18fb      	adds	r3, r7, r3
   249b2:	1c02      	adds	r2, r0, #0
   249b4:	801a      	strh	r2, [r3, #0]
   249b6:	1dbb      	adds	r3, r7, #6
   249b8:	1c0a      	adds	r2, r1, #0
   249ba:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   249bc:	2326      	movs	r3, #38	; 0x26
   249be:	18fb      	adds	r3, r7, r3
   249c0:	2206      	movs	r2, #6
   249c2:	4252      	negs	r2, r2
   249c4:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
   249c6:	230f      	movs	r3, #15
   249c8:	18fb      	adds	r3, r7, r3
   249ca:	781b      	ldrb	r3, [r3, #0]
   249cc:	2b7f      	cmp	r3, #127	; 0x7f
   249ce:	d900      	bls.n	249d2 <send+0x3a>
   249d0:	e087      	b.n	24ae2 <send+0x14a>
   249d2:	68bb      	ldr	r3, [r7, #8]
   249d4:	2b00      	cmp	r3, #0
   249d6:	d100      	bne.n	249da <send+0x42>
   249d8:	e083      	b.n	24ae2 <send+0x14a>
   249da:	230c      	movs	r3, #12
   249dc:	18fb      	adds	r3, r7, r3
   249de:	881a      	ldrh	r2, [r3, #0]
   249e0:	23af      	movs	r3, #175	; 0xaf
   249e2:	00db      	lsls	r3, r3, #3
   249e4:	429a      	cmp	r2, r3
   249e6:	d900      	bls.n	249ea <send+0x52>
   249e8:	e07b      	b.n	24ae2 <send+0x14a>
   249ea:	230f      	movs	r3, #15
   249ec:	18fb      	adds	r3, r7, r3
   249ee:	781b      	ldrb	r3, [r3, #0]
   249f0:	b25b      	sxtb	r3, r3
   249f2:	4a40      	ldr	r2, [pc, #256]	; (24af4 <send+0x15c>)
   249f4:	011b      	lsls	r3, r3, #4
   249f6:	18d3      	adds	r3, r2, r3
   249f8:	330a      	adds	r3, #10
   249fa:	781b      	ldrb	r3, [r3, #0]
   249fc:	b2db      	uxtb	r3, r3
   249fe:	2b01      	cmp	r3, #1
   24a00:	d16f      	bne.n	24ae2 <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
   24a02:	2323      	movs	r3, #35	; 0x23
   24a04:	18fb      	adds	r3, r7, r3
   24a06:	2245      	movs	r2, #69	; 0x45
   24a08:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
   24a0a:	2324      	movs	r3, #36	; 0x24
   24a0c:	18fb      	adds	r3, r7, r3
   24a0e:	2250      	movs	r2, #80	; 0x50
   24a10:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
   24a12:	2310      	movs	r3, #16
   24a14:	18fb      	adds	r3, r7, r3
   24a16:	220f      	movs	r2, #15
   24a18:	18ba      	adds	r2, r7, r2
   24a1a:	7812      	ldrb	r2, [r2, #0]
   24a1c:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
   24a1e:	2310      	movs	r3, #16
   24a20:	18fb      	adds	r3, r7, r3
   24a22:	220c      	movs	r2, #12
   24a24:	18ba      	adds	r2, r7, r2
   24a26:	8812      	ldrh	r2, [r2, #0]
   24a28:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
   24a2a:	230f      	movs	r3, #15
   24a2c:	18fb      	adds	r3, r7, r3
   24a2e:	781b      	ldrb	r3, [r3, #0]
   24a30:	b25b      	sxtb	r3, r3
   24a32:	4a30      	ldr	r2, [pc, #192]	; (24af4 <send+0x15c>)
   24a34:	011b      	lsls	r3, r3, #4
   24a36:	18d3      	adds	r3, r2, r3
   24a38:	3306      	adds	r3, #6
   24a3a:	881b      	ldrh	r3, [r3, #0]
   24a3c:	b29a      	uxth	r2, r3
   24a3e:	2310      	movs	r3, #16
   24a40:	18fb      	adds	r3, r7, r3
   24a42:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
   24a44:	230f      	movs	r3, #15
   24a46:	18fb      	adds	r3, r7, r3
   24a48:	781b      	ldrb	r3, [r3, #0]
   24a4a:	b25b      	sxtb	r3, r3
   24a4c:	2b06      	cmp	r3, #6
   24a4e:	dd03      	ble.n	24a58 <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
   24a50:	2324      	movs	r3, #36	; 0x24
   24a52:	18fb      	adds	r3, r7, r3
   24a54:	2244      	movs	r2, #68	; 0x44
   24a56:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   24a58:	230f      	movs	r3, #15
   24a5a:	18fb      	adds	r3, r7, r3
   24a5c:	781b      	ldrb	r3, [r3, #0]
   24a5e:	b25b      	sxtb	r3, r3
   24a60:	4a24      	ldr	r2, [pc, #144]	; (24af4 <send+0x15c>)
   24a62:	011b      	lsls	r3, r3, #4
   24a64:	18d3      	adds	r3, r2, r3
   24a66:	330b      	adds	r3, #11
   24a68:	781b      	ldrb	r3, [r3, #0]
   24a6a:	b2db      	uxtb	r3, r3
   24a6c:	001a      	movs	r2, r3
   24a6e:	2301      	movs	r3, #1
   24a70:	4013      	ands	r3, r2
   24a72:	d00f      	beq.n	24a94 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
   24a74:	2323      	movs	r3, #35	; 0x23
   24a76:	18fb      	adds	r3, r7, r3
   24a78:	224c      	movs	r2, #76	; 0x4c
   24a7a:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
   24a7c:	230f      	movs	r3, #15
   24a7e:	18fb      	adds	r3, r7, r3
   24a80:	2200      	movs	r2, #0
   24a82:	569a      	ldrsb	r2, [r3, r2]
   24a84:	2324      	movs	r3, #36	; 0x24
   24a86:	18fb      	adds	r3, r7, r3
   24a88:	491a      	ldr	r1, [pc, #104]	; (24af4 <send+0x15c>)
   24a8a:	0112      	lsls	r2, r2, #4
   24a8c:	188a      	adds	r2, r1, r2
   24a8e:	3208      	adds	r2, #8
   24a90:	8812      	ldrh	r2, [r2, #0]
   24a92:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
   24a94:	2323      	movs	r3, #35	; 0x23
   24a96:	18fb      	adds	r3, r7, r3
   24a98:	781b      	ldrb	r3, [r3, #0]
   24a9a:	2280      	movs	r2, #128	; 0x80
   24a9c:	4252      	negs	r2, r2
   24a9e:	4313      	orrs	r3, r2
   24aa0:	b2d9      	uxtb	r1, r3
   24aa2:	2310      	movs	r3, #16
   24aa4:	18fa      	adds	r2, r7, r3
   24aa6:	2324      	movs	r3, #36	; 0x24
   24aa8:	18fb      	adds	r3, r7, r3
   24aaa:	881b      	ldrh	r3, [r3, #0]
   24aac:	9302      	str	r3, [sp, #8]
   24aae:	230c      	movs	r3, #12
   24ab0:	18fb      	adds	r3, r7, r3
   24ab2:	881b      	ldrh	r3, [r3, #0]
   24ab4:	9301      	str	r3, [sp, #4]
   24ab6:	68bb      	ldr	r3, [r7, #8]
   24ab8:	9300      	str	r3, [sp, #0]
   24aba:	2310      	movs	r3, #16
   24abc:	2002      	movs	r0, #2
   24abe:	4c0e      	ldr	r4, [pc, #56]	; (24af8 <send+0x160>)
   24ac0:	47a0      	blx	r4
   24ac2:	0003      	movs	r3, r0
   24ac4:	001a      	movs	r2, r3
   24ac6:	2326      	movs	r3, #38	; 0x26
   24ac8:	18fb      	adds	r3, r7, r3
   24aca:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
   24acc:	2326      	movs	r3, #38	; 0x26
   24ace:	18fb      	adds	r3, r7, r3
   24ad0:	2200      	movs	r2, #0
   24ad2:	5e9b      	ldrsh	r3, [r3, r2]
   24ad4:	2b00      	cmp	r3, #0
   24ad6:	d004      	beq.n	24ae2 <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
   24ad8:	2326      	movs	r3, #38	; 0x26
   24ada:	18fb      	adds	r3, r7, r3
   24adc:	220e      	movs	r2, #14
   24ade:	4252      	negs	r2, r2
   24ae0:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
   24ae2:	2326      	movs	r3, #38	; 0x26
   24ae4:	18fb      	adds	r3, r7, r3
   24ae6:	2200      	movs	r2, #0
   24ae8:	5e9b      	ldrsh	r3, [r3, r2]
}
   24aea:	0018      	movs	r0, r3
   24aec:	46bd      	mov	sp, r7
   24aee:	b00b      	add	sp, #44	; 0x2c
   24af0:	bd90      	pop	{r4, r7, pc}
   24af2:	46c0      	nop			; (mov r8, r8)
   24af4:	20005ac8 	.word	0x20005ac8
   24af8:	0001ff41 	.word	0x0001ff41

00024afc <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
   24afc:	b590      	push	{r4, r7, lr}
   24afe:	b08d      	sub	sp, #52	; 0x34
   24b00:	af04      	add	r7, sp, #16
   24b02:	60b9      	str	r1, [r7, #8]
   24b04:	0011      	movs	r1, r2
   24b06:	607b      	str	r3, [r7, #4]
   24b08:	230f      	movs	r3, #15
   24b0a:	18fb      	adds	r3, r7, r3
   24b0c:	1c02      	adds	r2, r0, #0
   24b0e:	701a      	strb	r2, [r3, #0]
   24b10:	230c      	movs	r3, #12
   24b12:	18fb      	adds	r3, r7, r3
   24b14:	1c0a      	adds	r2, r1, #0
   24b16:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   24b18:	231e      	movs	r3, #30
   24b1a:	18fb      	adds	r3, r7, r3
   24b1c:	2206      	movs	r2, #6
   24b1e:	4252      	negs	r2, r2
   24b20:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
   24b22:	230f      	movs	r3, #15
   24b24:	18fb      	adds	r3, r7, r3
   24b26:	781b      	ldrb	r3, [r3, #0]
   24b28:	2b7f      	cmp	r3, #127	; 0x7f
   24b2a:	d900      	bls.n	24b2e <recv+0x32>
   24b2c:	e099      	b.n	24c62 <recv+0x166>
   24b2e:	68bb      	ldr	r3, [r7, #8]
   24b30:	2b00      	cmp	r3, #0
   24b32:	d100      	bne.n	24b36 <recv+0x3a>
   24b34:	e095      	b.n	24c62 <recv+0x166>
   24b36:	230c      	movs	r3, #12
   24b38:	18fb      	adds	r3, r7, r3
   24b3a:	881b      	ldrh	r3, [r3, #0]
   24b3c:	2b00      	cmp	r3, #0
   24b3e:	d100      	bne.n	24b42 <recv+0x46>
   24b40:	e08f      	b.n	24c62 <recv+0x166>
   24b42:	230f      	movs	r3, #15
   24b44:	18fb      	adds	r3, r7, r3
   24b46:	781b      	ldrb	r3, [r3, #0]
   24b48:	b25b      	sxtb	r3, r3
   24b4a:	4a4a      	ldr	r2, [pc, #296]	; (24c74 <recv+0x178>)
   24b4c:	011b      	lsls	r3, r3, #4
   24b4e:	18d3      	adds	r3, r2, r3
   24b50:	330a      	adds	r3, #10
   24b52:	781b      	ldrb	r3, [r3, #0]
   24b54:	b2db      	uxtb	r3, r3
   24b56:	2b01      	cmp	r3, #1
   24b58:	d000      	beq.n	24b5c <recv+0x60>
   24b5a:	e082      	b.n	24c62 <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
   24b5c:	231e      	movs	r3, #30
   24b5e:	18fb      	adds	r3, r7, r3
   24b60:	2200      	movs	r2, #0
   24b62:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
   24b64:	230f      	movs	r3, #15
   24b66:	18fb      	adds	r3, r7, r3
   24b68:	2200      	movs	r2, #0
   24b6a:	569a      	ldrsb	r2, [r3, r2]
   24b6c:	4b41      	ldr	r3, [pc, #260]	; (24c74 <recv+0x178>)
   24b6e:	0112      	lsls	r2, r2, #4
   24b70:	68b9      	ldr	r1, [r7, #8]
   24b72:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
   24b74:	230f      	movs	r3, #15
   24b76:	18fb      	adds	r3, r7, r3
   24b78:	781b      	ldrb	r3, [r3, #0]
   24b7a:	b25b      	sxtb	r3, r3
   24b7c:	4a3d      	ldr	r2, [pc, #244]	; (24c74 <recv+0x178>)
   24b7e:	011b      	lsls	r3, r3, #4
   24b80:	18d3      	adds	r3, r2, r3
   24b82:	3304      	adds	r3, #4
   24b84:	220c      	movs	r2, #12
   24b86:	18ba      	adds	r2, r7, r2
   24b88:	8812      	ldrh	r2, [r2, #0]
   24b8a:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
   24b8c:	230f      	movs	r3, #15
   24b8e:	18fb      	adds	r3, r7, r3
   24b90:	781b      	ldrb	r3, [r3, #0]
   24b92:	b25b      	sxtb	r3, r3
   24b94:	4a37      	ldr	r2, [pc, #220]	; (24c74 <recv+0x178>)
   24b96:	011b      	lsls	r3, r3, #4
   24b98:	18d3      	adds	r3, r2, r3
   24b9a:	330c      	adds	r3, #12
   24b9c:	781b      	ldrb	r3, [r3, #0]
   24b9e:	b2db      	uxtb	r3, r3
   24ba0:	2b00      	cmp	r3, #0
   24ba2:	d15e      	bne.n	24c62 <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
   24ba4:	231d      	movs	r3, #29
   24ba6:	18fb      	adds	r3, r7, r3
   24ba8:	2246      	movs	r2, #70	; 0x46
   24baa:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
   24bac:	230f      	movs	r3, #15
   24bae:	18fb      	adds	r3, r7, r3
   24bb0:	781b      	ldrb	r3, [r3, #0]
   24bb2:	b25b      	sxtb	r3, r3
   24bb4:	4a2f      	ldr	r2, [pc, #188]	; (24c74 <recv+0x178>)
   24bb6:	011b      	lsls	r3, r3, #4
   24bb8:	18d3      	adds	r3, r2, r3
   24bba:	330c      	adds	r3, #12
   24bbc:	2201      	movs	r2, #1
   24bbe:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   24bc0:	230f      	movs	r3, #15
   24bc2:	18fb      	adds	r3, r7, r3
   24bc4:	781b      	ldrb	r3, [r3, #0]
   24bc6:	b25b      	sxtb	r3, r3
   24bc8:	4a2a      	ldr	r2, [pc, #168]	; (24c74 <recv+0x178>)
   24bca:	011b      	lsls	r3, r3, #4
   24bcc:	18d3      	adds	r3, r2, r3
   24bce:	330b      	adds	r3, #11
   24bd0:	781b      	ldrb	r3, [r3, #0]
   24bd2:	b2db      	uxtb	r3, r3
   24bd4:	001a      	movs	r2, r3
   24bd6:	2301      	movs	r3, #1
   24bd8:	4013      	ands	r3, r2
   24bda:	d003      	beq.n	24be4 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
   24bdc:	231d      	movs	r3, #29
   24bde:	18fb      	adds	r3, r7, r3
   24be0:	224d      	movs	r2, #77	; 0x4d
   24be2:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
   24be4:	687b      	ldr	r3, [r7, #4]
   24be6:	2b00      	cmp	r3, #0
   24be8:	d105      	bne.n	24bf6 <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
   24bea:	2314      	movs	r3, #20
   24bec:	18fb      	adds	r3, r7, r3
   24bee:	2201      	movs	r2, #1
   24bf0:	4252      	negs	r2, r2
   24bf2:	601a      	str	r2, [r3, #0]
   24bf4:	e003      	b.n	24bfe <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
   24bf6:	2314      	movs	r3, #20
   24bf8:	18fb      	adds	r3, r7, r3
   24bfa:	687a      	ldr	r2, [r7, #4]
   24bfc:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
   24bfe:	2314      	movs	r3, #20
   24c00:	18fb      	adds	r3, r7, r3
   24c02:	220f      	movs	r2, #15
   24c04:	18ba      	adds	r2, r7, r2
   24c06:	7812      	ldrb	r2, [r2, #0]
   24c08:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
   24c0a:	230f      	movs	r3, #15
   24c0c:	18fb      	adds	r3, r7, r3
   24c0e:	781b      	ldrb	r3, [r3, #0]
   24c10:	b25b      	sxtb	r3, r3
   24c12:	4a18      	ldr	r2, [pc, #96]	; (24c74 <recv+0x178>)
   24c14:	011b      	lsls	r3, r3, #4
   24c16:	18d3      	adds	r3, r2, r3
   24c18:	3306      	adds	r3, #6
   24c1a:	881b      	ldrh	r3, [r3, #0]
   24c1c:	b29a      	uxth	r2, r3
   24c1e:	2314      	movs	r3, #20
   24c20:	18fb      	adds	r3, r7, r3
   24c22:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
   24c24:	2314      	movs	r3, #20
   24c26:	18fa      	adds	r2, r7, r3
   24c28:	231d      	movs	r3, #29
   24c2a:	18fb      	adds	r3, r7, r3
   24c2c:	7819      	ldrb	r1, [r3, #0]
   24c2e:	2300      	movs	r3, #0
   24c30:	9302      	str	r3, [sp, #8]
   24c32:	2300      	movs	r3, #0
   24c34:	9301      	str	r3, [sp, #4]
   24c36:	2300      	movs	r3, #0
   24c38:	9300      	str	r3, [sp, #0]
   24c3a:	2308      	movs	r3, #8
   24c3c:	2002      	movs	r0, #2
   24c3e:	4c0e      	ldr	r4, [pc, #56]	; (24c78 <recv+0x17c>)
   24c40:	47a0      	blx	r4
   24c42:	0003      	movs	r3, r0
   24c44:	001a      	movs	r2, r3
   24c46:	231e      	movs	r3, #30
   24c48:	18fb      	adds	r3, r7, r3
   24c4a:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
   24c4c:	231e      	movs	r3, #30
   24c4e:	18fb      	adds	r3, r7, r3
   24c50:	2200      	movs	r2, #0
   24c52:	5e9b      	ldrsh	r3, [r3, r2]
   24c54:	2b00      	cmp	r3, #0
   24c56:	d004      	beq.n	24c62 <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
   24c58:	231e      	movs	r3, #30
   24c5a:	18fb      	adds	r3, r7, r3
   24c5c:	220e      	movs	r2, #14
   24c5e:	4252      	negs	r2, r2
   24c60:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
   24c62:	231e      	movs	r3, #30
   24c64:	18fb      	adds	r3, r7, r3
   24c66:	2200      	movs	r2, #0
   24c68:	5e9b      	ldrsh	r3, [r3, r2]
}
   24c6a:	0018      	movs	r0, r3
   24c6c:	46bd      	mov	sp, r7
   24c6e:	b009      	add	sp, #36	; 0x24
   24c70:	bd90      	pop	{r4, r7, pc}
   24c72:	46c0      	nop			; (mov r8, r8)
   24c74:	20005ac8 	.word	0x20005ac8
   24c78:	0001ff41 	.word	0x0001ff41

00024c7c <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
   24c7c:	b5b0      	push	{r4, r5, r7, lr}
   24c7e:	b088      	sub	sp, #32
   24c80:	af04      	add	r7, sp, #16
   24c82:	0002      	movs	r2, r0
   24c84:	1dfb      	adds	r3, r7, #7
   24c86:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   24c88:	230f      	movs	r3, #15
   24c8a:	18fb      	adds	r3, r7, r3
   24c8c:	22fa      	movs	r2, #250	; 0xfa
   24c8e:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
   24c90:	4b43      	ldr	r3, [pc, #268]	; (24da0 <close+0x124>)
   24c92:	0018      	movs	r0, r3
   24c94:	4b43      	ldr	r3, [pc, #268]	; (24da4 <close+0x128>)
   24c96:	4798      	blx	r3
   24c98:	1dfb      	adds	r3, r7, #7
   24c9a:	2200      	movs	r2, #0
   24c9c:	569a      	ldrsb	r2, [r3, r2]
   24c9e:	4b42      	ldr	r3, [pc, #264]	; (24da8 <close+0x12c>)
   24ca0:	0011      	movs	r1, r2
   24ca2:	0018      	movs	r0, r3
   24ca4:	4b3f      	ldr	r3, [pc, #252]	; (24da4 <close+0x128>)
   24ca6:	4798      	blx	r3
   24ca8:	4b40      	ldr	r3, [pc, #256]	; (24dac <close+0x130>)
   24caa:	0018      	movs	r0, r3
   24cac:	4b3d      	ldr	r3, [pc, #244]	; (24da4 <close+0x128>)
   24cae:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
   24cb0:	1dfb      	adds	r3, r7, #7
   24cb2:	781b      	ldrb	r3, [r3, #0]
   24cb4:	2b7f      	cmp	r3, #127	; 0x7f
   24cb6:	d86a      	bhi.n	24d8e <close+0x112>
   24cb8:	1dfb      	adds	r3, r7, #7
   24cba:	781b      	ldrb	r3, [r3, #0]
   24cbc:	b25b      	sxtb	r3, r3
   24cbe:	4a3c      	ldr	r2, [pc, #240]	; (24db0 <close+0x134>)
   24cc0:	011b      	lsls	r3, r3, #4
   24cc2:	18d3      	adds	r3, r2, r3
   24cc4:	330a      	adds	r3, #10
   24cc6:	781b      	ldrb	r3, [r3, #0]
   24cc8:	b2db      	uxtb	r3, r3
   24cca:	2b01      	cmp	r3, #1
   24ccc:	d15f      	bne.n	24d8e <close+0x112>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
   24cce:	230e      	movs	r3, #14
   24cd0:	18fb      	adds	r3, r7, r3
   24cd2:	2249      	movs	r2, #73	; 0x49
   24cd4:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
   24cd6:	2308      	movs	r3, #8
   24cd8:	18fb      	adds	r3, r7, r3
   24cda:	1dfa      	adds	r2, r7, #7
   24cdc:	7812      	ldrb	r2, [r2, #0]
   24cde:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
   24ce0:	1dfb      	adds	r3, r7, #7
   24ce2:	781b      	ldrb	r3, [r3, #0]
   24ce4:	b25b      	sxtb	r3, r3
   24ce6:	4a32      	ldr	r2, [pc, #200]	; (24db0 <close+0x134>)
   24ce8:	011b      	lsls	r3, r3, #4
   24cea:	18d3      	adds	r3, r2, r3
   24cec:	3306      	adds	r3, #6
   24cee:	881b      	ldrh	r3, [r3, #0]
   24cf0:	b29a      	uxth	r2, r3
   24cf2:	2308      	movs	r3, #8
   24cf4:	18fb      	adds	r3, r7, r3
   24cf6:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
   24cf8:	1dfb      	adds	r3, r7, #7
   24cfa:	781b      	ldrb	r3, [r3, #0]
   24cfc:	b25b      	sxtb	r3, r3
   24cfe:	4a2c      	ldr	r2, [pc, #176]	; (24db0 <close+0x134>)
   24d00:	011b      	lsls	r3, r3, #4
   24d02:	18d3      	adds	r3, r2, r3
   24d04:	330a      	adds	r3, #10
   24d06:	2200      	movs	r2, #0
   24d08:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
   24d0a:	1dfb      	adds	r3, r7, #7
   24d0c:	781b      	ldrb	r3, [r3, #0]
   24d0e:	b25b      	sxtb	r3, r3
   24d10:	4a27      	ldr	r2, [pc, #156]	; (24db0 <close+0x134>)
   24d12:	011b      	lsls	r3, r3, #4
   24d14:	18d3      	adds	r3, r2, r3
   24d16:	3306      	adds	r3, #6
   24d18:	2200      	movs	r2, #0
   24d1a:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   24d1c:	1dfb      	adds	r3, r7, #7
   24d1e:	781b      	ldrb	r3, [r3, #0]
   24d20:	b25b      	sxtb	r3, r3
   24d22:	4a23      	ldr	r2, [pc, #140]	; (24db0 <close+0x134>)
   24d24:	011b      	lsls	r3, r3, #4
   24d26:	18d3      	adds	r3, r2, r3
   24d28:	330b      	adds	r3, #11
   24d2a:	781b      	ldrb	r3, [r3, #0]
   24d2c:	b2db      	uxtb	r3, r3
   24d2e:	001a      	movs	r2, r3
   24d30:	2301      	movs	r3, #1
   24d32:	4013      	ands	r3, r2
   24d34:	d003      	beq.n	24d3e <close+0xc2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
   24d36:	230e      	movs	r3, #14
   24d38:	18fb      	adds	r3, r7, r3
   24d3a:	224e      	movs	r2, #78	; 0x4e
   24d3c:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
   24d3e:	230f      	movs	r3, #15
   24d40:	18fc      	adds	r4, r7, r3
   24d42:	2308      	movs	r3, #8
   24d44:	18fa      	adds	r2, r7, r3
   24d46:	230e      	movs	r3, #14
   24d48:	18fb      	adds	r3, r7, r3
   24d4a:	7819      	ldrb	r1, [r3, #0]
   24d4c:	2300      	movs	r3, #0
   24d4e:	9302      	str	r3, [sp, #8]
   24d50:	2300      	movs	r3, #0
   24d52:	9301      	str	r3, [sp, #4]
   24d54:	2300      	movs	r3, #0
   24d56:	9300      	str	r3, [sp, #0]
   24d58:	2304      	movs	r3, #4
   24d5a:	2002      	movs	r0, #2
   24d5c:	4d15      	ldr	r5, [pc, #84]	; (24db4 <close+0x138>)
   24d5e:	47a8      	blx	r5
   24d60:	0003      	movs	r3, r0
   24d62:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   24d64:	230f      	movs	r3, #15
   24d66:	18fb      	adds	r3, r7, r3
   24d68:	781b      	ldrb	r3, [r3, #0]
   24d6a:	b25b      	sxtb	r3, r3
   24d6c:	2b00      	cmp	r3, #0
   24d6e:	d003      	beq.n	24d78 <close+0xfc>
		{
			s8Ret = SOCK_ERR_INVALID;
   24d70:	230f      	movs	r3, #15
   24d72:	18fb      	adds	r3, r7, r3
   24d74:	22f7      	movs	r2, #247	; 0xf7
   24d76:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
   24d78:	1dfb      	adds	r3, r7, #7
   24d7a:	781b      	ldrb	r3, [r3, #0]
   24d7c:	b25b      	sxtb	r3, r3
   24d7e:	011a      	lsls	r2, r3, #4
   24d80:	4b0b      	ldr	r3, [pc, #44]	; (24db0 <close+0x134>)
   24d82:	18d3      	adds	r3, r2, r3
   24d84:	2210      	movs	r2, #16
   24d86:	2100      	movs	r1, #0
   24d88:	0018      	movs	r0, r3
   24d8a:	4b0b      	ldr	r3, [pc, #44]	; (24db8 <close+0x13c>)
   24d8c:	4798      	blx	r3
	}
	return s8Ret;
   24d8e:	230f      	movs	r3, #15
   24d90:	18fb      	adds	r3, r7, r3
   24d92:	781b      	ldrb	r3, [r3, #0]
   24d94:	b25b      	sxtb	r3, r3
}
   24d96:	0018      	movs	r0, r3
   24d98:	46bd      	mov	sp, r7
   24d9a:	b004      	add	sp, #16
   24d9c:	bdb0      	pop	{r4, r5, r7, pc}
   24d9e:	46c0      	nop			; (mov r8, r8)
   24da0:	00038e80 	.word	0x00038e80
   24da4:	0001cf49 	.word	0x0001cf49
   24da8:	00038ec0 	.word	0x00038ec0
   24dac:	00038ea0 	.word	0x00038ea0
   24db0:	20005ac8 	.word	0x20005ac8
   24db4:	0001ff41 	.word	0x0001ff41
   24db8:	0001fce1 	.word	0x0001fce1

00024dbc <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
   24dbc:	b580      	push	{r7, lr}
   24dbe:	b086      	sub	sp, #24
   24dc0:	af00      	add	r7, sp, #0
   24dc2:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
   24dc4:	2300      	movs	r3, #0
   24dc6:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
   24dc8:	2317      	movs	r3, #23
   24dca:	18fb      	adds	r3, r7, r3
   24dcc:	2200      	movs	r2, #0
   24dce:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
   24dd0:	2316      	movs	r3, #22
   24dd2:	18fb      	adds	r3, r7, r3
   24dd4:	2200      	movs	r2, #0
   24dd6:	701a      	strb	r2, [r3, #0]
   24dd8:	e060      	b.n	24e9c <nmi_inet_addr+0xe0>
	{
		j = 0;
   24dda:	2315      	movs	r3, #21
   24ddc:	18fb      	adds	r3, r7, r3
   24dde:	2200      	movs	r2, #0
   24de0:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
   24de2:	2314      	movs	r3, #20
   24de4:	18fb      	adds	r3, r7, r3
   24de6:	687a      	ldr	r2, [r7, #4]
   24de8:	7812      	ldrb	r2, [r2, #0]
   24dea:	701a      	strb	r2, [r3, #0]
			++j;
   24dec:	2315      	movs	r3, #21
   24dee:	18fb      	adds	r3, r7, r3
   24df0:	2215      	movs	r2, #21
   24df2:	18ba      	adds	r2, r7, r2
   24df4:	7812      	ldrb	r2, [r2, #0]
   24df6:	3201      	adds	r2, #1
   24df8:	701a      	strb	r2, [r3, #0]
			if(j > 4)
   24dfa:	2315      	movs	r3, #21
   24dfc:	18fb      	adds	r3, r7, r3
   24dfe:	781b      	ldrb	r3, [r3, #0]
   24e00:	2b04      	cmp	r3, #4
   24e02:	d901      	bls.n	24e08 <nmi_inet_addr+0x4c>
			{
				return 0;
   24e04:	2300      	movs	r3, #0
   24e06:	e057      	b.n	24eb8 <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
   24e08:	2314      	movs	r3, #20
   24e0a:	18fb      	adds	r3, r7, r3
   24e0c:	781b      	ldrb	r3, [r3, #0]
   24e0e:	2b2e      	cmp	r3, #46	; 0x2e
   24e10:	d004      	beq.n	24e1c <nmi_inet_addr+0x60>
   24e12:	2314      	movs	r3, #20
   24e14:	18fb      	adds	r3, r7, r3
   24e16:	781b      	ldrb	r3, [r3, #0]
   24e18:	2b00      	cmp	r3, #0
   24e1a:	d10d      	bne.n	24e38 <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
   24e1c:	2316      	movs	r3, #22
   24e1e:	18fb      	adds	r3, r7, r3
   24e20:	781b      	ldrb	r3, [r3, #0]
   24e22:	220c      	movs	r2, #12
   24e24:	18ba      	adds	r2, r7, r2
   24e26:	2117      	movs	r1, #23
   24e28:	1879      	adds	r1, r7, r1
   24e2a:	7809      	ldrb	r1, [r1, #0]
   24e2c:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
   24e2e:	2317      	movs	r3, #23
   24e30:	18fb      	adds	r3, r7, r3
   24e32:	2200      	movs	r2, #0
   24e34:	701a      	strb	r2, [r3, #0]
   24e36:	e01d      	b.n	24e74 <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
   24e38:	2314      	movs	r3, #20
   24e3a:	18fb      	adds	r3, r7, r3
   24e3c:	781b      	ldrb	r3, [r3, #0]
   24e3e:	2b2f      	cmp	r3, #47	; 0x2f
   24e40:	d916      	bls.n	24e70 <nmi_inet_addr+0xb4>
   24e42:	2314      	movs	r3, #20
   24e44:	18fb      	adds	r3, r7, r3
   24e46:	781b      	ldrb	r3, [r3, #0]
   24e48:	2b39      	cmp	r3, #57	; 0x39
   24e4a:	d811      	bhi.n	24e70 <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
   24e4c:	2317      	movs	r3, #23
   24e4e:	18fb      	adds	r3, r7, r3
   24e50:	781b      	ldrb	r3, [r3, #0]
   24e52:	1c1a      	adds	r2, r3, #0
   24e54:	0092      	lsls	r2, r2, #2
   24e56:	18d3      	adds	r3, r2, r3
   24e58:	18db      	adds	r3, r3, r3
   24e5a:	b2da      	uxtb	r2, r3
   24e5c:	2314      	movs	r3, #20
   24e5e:	18fb      	adds	r3, r7, r3
   24e60:	781b      	ldrb	r3, [r3, #0]
   24e62:	18d3      	adds	r3, r2, r3
   24e64:	b2da      	uxtb	r2, r3
   24e66:	2317      	movs	r3, #23
   24e68:	18fb      	adds	r3, r7, r3
   24e6a:	3a30      	subs	r2, #48	; 0x30
   24e6c:	701a      	strb	r2, [r3, #0]
   24e6e:	e001      	b.n	24e74 <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
   24e70:	2300      	movs	r3, #0
   24e72:	e021      	b.n	24eb8 <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
   24e74:	687b      	ldr	r3, [r7, #4]
   24e76:	3301      	adds	r3, #1
   24e78:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
   24e7a:	2314      	movs	r3, #20
   24e7c:	18fb      	adds	r3, r7, r3
   24e7e:	781b      	ldrb	r3, [r3, #0]
   24e80:	2b2e      	cmp	r3, #46	; 0x2e
   24e82:	d004      	beq.n	24e8e <nmi_inet_addr+0xd2>
   24e84:	2314      	movs	r3, #20
   24e86:	18fb      	adds	r3, r7, r3
   24e88:	781b      	ldrb	r3, [r3, #0]
   24e8a:	2b00      	cmp	r3, #0
   24e8c:	d1a9      	bne.n	24de2 <nmi_inet_addr+0x26>
	for(i = 0; i < 4; ++i)
   24e8e:	2316      	movs	r3, #22
   24e90:	18fb      	adds	r3, r7, r3
   24e92:	2216      	movs	r2, #22
   24e94:	18ba      	adds	r2, r7, r2
   24e96:	7812      	ldrb	r2, [r2, #0]
   24e98:	3201      	adds	r2, #1
   24e9a:	701a      	strb	r2, [r3, #0]
   24e9c:	2316      	movs	r3, #22
   24e9e:	18fb      	adds	r3, r7, r3
   24ea0:	781b      	ldrb	r3, [r3, #0]
   24ea2:	2b03      	cmp	r3, #3
   24ea4:	d999      	bls.n	24dda <nmi_inet_addr+0x1e>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
   24ea6:	230c      	movs	r3, #12
   24ea8:	18f9      	adds	r1, r7, r3
   24eaa:	2310      	movs	r3, #16
   24eac:	18fb      	adds	r3, r7, r3
   24eae:	2204      	movs	r2, #4
   24eb0:	0018      	movs	r0, r3
   24eb2:	4b03      	ldr	r3, [pc, #12]	; (24ec0 <nmi_inet_addr+0x104>)
   24eb4:	4798      	blx	r3
	return u32IP;
   24eb6:	693b      	ldr	r3, [r7, #16]
}
   24eb8:	0018      	movs	r0, r3
   24eba:	46bd      	mov	sp, r7
   24ebc:	b006      	add	sp, #24
   24ebe:	bd80      	pop	{r7, pc}
   24ec0:	0001fca5 	.word	0x0001fca5

00024ec4 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
   24ec4:	b5b0      	push	{r4, r5, r7, lr}
   24ec6:	b088      	sub	sp, #32
   24ec8:	af04      	add	r7, sp, #16
   24eca:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
   24ecc:	230f      	movs	r3, #15
   24ece:	18fb      	adds	r3, r7, r3
   24ed0:	22fa      	movs	r2, #250	; 0xfa
   24ed2:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
   24ed4:	687b      	ldr	r3, [r7, #4]
   24ed6:	0018      	movs	r0, r3
   24ed8:	4b14      	ldr	r3, [pc, #80]	; (24f2c <gethostbyname+0x68>)
   24eda:	4798      	blx	r3
   24edc:	0003      	movs	r3, r0
   24ede:	001a      	movs	r2, r3
   24ee0:	230e      	movs	r3, #14
   24ee2:	18fb      	adds	r3, r7, r3
   24ee4:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
   24ee6:	230e      	movs	r3, #14
   24ee8:	18fb      	adds	r3, r7, r3
   24eea:	781b      	ldrb	r3, [r3, #0]
   24eec:	2b40      	cmp	r3, #64	; 0x40
   24eee:	d815      	bhi.n	24f1c <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
   24ef0:	230e      	movs	r3, #14
   24ef2:	18fb      	adds	r3, r7, r3
   24ef4:	781b      	ldrb	r3, [r3, #0]
   24ef6:	b29b      	uxth	r3, r3
   24ef8:	3301      	adds	r3, #1
   24efa:	b299      	uxth	r1, r3
   24efc:	230f      	movs	r3, #15
   24efe:	18fc      	adds	r4, r7, r3
   24f00:	687a      	ldr	r2, [r7, #4]
   24f02:	2300      	movs	r3, #0
   24f04:	9302      	str	r3, [sp, #8]
   24f06:	2300      	movs	r3, #0
   24f08:	9301      	str	r3, [sp, #4]
   24f0a:	2300      	movs	r3, #0
   24f0c:	9300      	str	r3, [sp, #0]
   24f0e:	000b      	movs	r3, r1
   24f10:	214a      	movs	r1, #74	; 0x4a
   24f12:	2002      	movs	r0, #2
   24f14:	4d06      	ldr	r5, [pc, #24]	; (24f30 <gethostbyname+0x6c>)
   24f16:	47a8      	blx	r5
   24f18:	0003      	movs	r3, r0
   24f1a:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
   24f1c:	230f      	movs	r3, #15
   24f1e:	18fb      	adds	r3, r7, r3
   24f20:	781b      	ldrb	r3, [r3, #0]
   24f22:	b25b      	sxtb	r3, r3
}
   24f24:	0018      	movs	r0, r3
   24f26:	46bd      	mov	sp, r7
   24f28:	b004      	add	sp, #16
   24f2a:	bdb0      	pop	{r4, r5, r7, pc}
   24f2c:	0001fd1f 	.word	0x0001fd1f
   24f30:	0001ff41 	.word	0x0001ff41

00024f34 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
   24f34:	b580      	push	{r7, lr}
   24f36:	b082      	sub	sp, #8
   24f38:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   24f3a:	003b      	movs	r3, r7
   24f3c:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
   24f3e:	687b      	ldr	r3, [r7, #4]
   24f40:	22b9      	movs	r2, #185	; 0xb9
   24f42:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   24f44:	4b13      	ldr	r3, [pc, #76]	; (24f94 <spi_flash_enter_low_power_mode+0x60>)
   24f46:	2100      	movs	r1, #0
   24f48:	0018      	movs	r0, r3
   24f4a:	4b13      	ldr	r3, [pc, #76]	; (24f98 <spi_flash_enter_low_power_mode+0x64>)
   24f4c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   24f4e:	687b      	ldr	r3, [r7, #4]
   24f50:	781b      	ldrb	r3, [r3, #0]
   24f52:	001a      	movs	r2, r3
   24f54:	4b11      	ldr	r3, [pc, #68]	; (24f9c <spi_flash_enter_low_power_mode+0x68>)
   24f56:	0011      	movs	r1, r2
   24f58:	0018      	movs	r0, r3
   24f5a:	4b0f      	ldr	r3, [pc, #60]	; (24f98 <spi_flash_enter_low_power_mode+0x64>)
   24f5c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   24f5e:	4b10      	ldr	r3, [pc, #64]	; (24fa0 <spi_flash_enter_low_power_mode+0x6c>)
   24f60:	2101      	movs	r1, #1
   24f62:	0018      	movs	r0, r3
   24f64:	4b0c      	ldr	r3, [pc, #48]	; (24f98 <spi_flash_enter_low_power_mode+0x64>)
   24f66:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   24f68:	4b0e      	ldr	r3, [pc, #56]	; (24fa4 <spi_flash_enter_low_power_mode+0x70>)
   24f6a:	2100      	movs	r1, #0
   24f6c:	0018      	movs	r0, r3
   24f6e:	4b0a      	ldr	r3, [pc, #40]	; (24f98 <spi_flash_enter_low_power_mode+0x64>)
   24f70:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
   24f72:	4b0d      	ldr	r3, [pc, #52]	; (24fa8 <spi_flash_enter_low_power_mode+0x74>)
   24f74:	2181      	movs	r1, #129	; 0x81
   24f76:	0018      	movs	r0, r3
   24f78:	4b07      	ldr	r3, [pc, #28]	; (24f98 <spi_flash_enter_low_power_mode+0x64>)
   24f7a:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   24f7c:	46c0      	nop			; (mov r8, r8)
   24f7e:	4b0b      	ldr	r3, [pc, #44]	; (24fac <spi_flash_enter_low_power_mode+0x78>)
   24f80:	0018      	movs	r0, r3
   24f82:	4b0b      	ldr	r3, [pc, #44]	; (24fb0 <spi_flash_enter_low_power_mode+0x7c>)
   24f84:	4798      	blx	r3
   24f86:	0003      	movs	r3, r0
   24f88:	2b01      	cmp	r3, #1
   24f8a:	d1f8      	bne.n	24f7e <spi_flash_enter_low_power_mode+0x4a>
}
   24f8c:	46c0      	nop			; (mov r8, r8)
   24f8e:	46bd      	mov	sp, r7
   24f90:	b002      	add	sp, #8
   24f92:	bd80      	pop	{r7, pc}
   24f94:	00010208 	.word	0x00010208
   24f98:	00021d95 	.word	0x00021d95
   24f9c:	0001020c 	.word	0x0001020c
   24fa0:	00010214 	.word	0x00010214
   24fa4:	0001021c 	.word	0x0001021c
   24fa8:	00010204 	.word	0x00010204
   24fac:	00010218 	.word	0x00010218
   24fb0:	00021d51 	.word	0x00021d51

00024fb4 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
   24fb4:	b580      	push	{r7, lr}
   24fb6:	b082      	sub	sp, #8
   24fb8:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   24fba:	003b      	movs	r3, r7
   24fbc:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
   24fbe:	687b      	ldr	r3, [r7, #4]
   24fc0:	22ab      	movs	r2, #171	; 0xab
   24fc2:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   24fc4:	4b13      	ldr	r3, [pc, #76]	; (25014 <spi_flash_leave_low_power_mode+0x60>)
   24fc6:	2100      	movs	r1, #0
   24fc8:	0018      	movs	r0, r3
   24fca:	4b13      	ldr	r3, [pc, #76]	; (25018 <spi_flash_leave_low_power_mode+0x64>)
   24fcc:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   24fce:	687b      	ldr	r3, [r7, #4]
   24fd0:	781b      	ldrb	r3, [r3, #0]
   24fd2:	001a      	movs	r2, r3
   24fd4:	4b11      	ldr	r3, [pc, #68]	; (2501c <spi_flash_leave_low_power_mode+0x68>)
   24fd6:	0011      	movs	r1, r2
   24fd8:	0018      	movs	r0, r3
   24fda:	4b0f      	ldr	r3, [pc, #60]	; (25018 <spi_flash_leave_low_power_mode+0x64>)
   24fdc:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   24fde:	4b10      	ldr	r3, [pc, #64]	; (25020 <spi_flash_leave_low_power_mode+0x6c>)
   24fe0:	2101      	movs	r1, #1
   24fe2:	0018      	movs	r0, r3
   24fe4:	4b0c      	ldr	r3, [pc, #48]	; (25018 <spi_flash_leave_low_power_mode+0x64>)
   24fe6:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   24fe8:	4b0e      	ldr	r3, [pc, #56]	; (25024 <spi_flash_leave_low_power_mode+0x70>)
   24fea:	2100      	movs	r1, #0
   24fec:	0018      	movs	r0, r3
   24fee:	4b0a      	ldr	r3, [pc, #40]	; (25018 <spi_flash_leave_low_power_mode+0x64>)
   24ff0:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
   24ff2:	4b0d      	ldr	r3, [pc, #52]	; (25028 <spi_flash_leave_low_power_mode+0x74>)
   24ff4:	2181      	movs	r1, #129	; 0x81
   24ff6:	0018      	movs	r0, r3
   24ff8:	4b07      	ldr	r3, [pc, #28]	; (25018 <spi_flash_leave_low_power_mode+0x64>)
   24ffa:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   24ffc:	46c0      	nop			; (mov r8, r8)
   24ffe:	4b0b      	ldr	r3, [pc, #44]	; (2502c <spi_flash_leave_low_power_mode+0x78>)
   25000:	0018      	movs	r0, r3
   25002:	4b0b      	ldr	r3, [pc, #44]	; (25030 <spi_flash_leave_low_power_mode+0x7c>)
   25004:	4798      	blx	r3
   25006:	0003      	movs	r3, r0
   25008:	2b01      	cmp	r3, #1
   2500a:	d1f8      	bne.n	24ffe <spi_flash_leave_low_power_mode+0x4a>
}
   2500c:	46c0      	nop			; (mov r8, r8)
   2500e:	46bd      	mov	sp, r7
   25010:	b002      	add	sp, #8
   25012:	bd80      	pop	{r7, pc}
   25014:	00010208 	.word	0x00010208
   25018:	00021d95 	.word	0x00021d95
   2501c:	0001020c 	.word	0x0001020c
   25020:	00010214 	.word	0x00010214
   25024:	0001021c 	.word	0x0001021c
   25028:	00010204 	.word	0x00010204
   2502c:	00010218 	.word	0x00010218
   25030:	00021d51 	.word	0x00021d51

00025034 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
   25034:	b590      	push	{r4, r7, lr}
   25036:	b085      	sub	sp, #20
   25038:	af00      	add	r7, sp, #0
   2503a:	0002      	movs	r2, r0
   2503c:	1dfb      	adds	r3, r7, #7
   2503e:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
   25040:	230f      	movs	r3, #15
   25042:	18fb      	adds	r3, r7, r3
   25044:	2200      	movs	r2, #0
   25046:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
   25048:	4b24      	ldr	r3, [pc, #144]	; (250dc <spi_flash_enable+0xa8>)
   2504a:	4798      	blx	r3
   2504c:	0003      	movs	r3, r0
   2504e:	051b      	lsls	r3, r3, #20
   25050:	0d1b      	lsrs	r3, r3, #20
   25052:	4a23      	ldr	r2, [pc, #140]	; (250e0 <spi_flash_enable+0xac>)
   25054:	4293      	cmp	r3, r2
   25056:	d938      	bls.n	250ca <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
   25058:	230f      	movs	r3, #15
   2505a:	18fc      	adds	r4, r7, r3
   2505c:	2308      	movs	r3, #8
   2505e:	18fb      	adds	r3, r7, r3
   25060:	4a20      	ldr	r2, [pc, #128]	; (250e4 <spi_flash_enable+0xb0>)
   25062:	0019      	movs	r1, r3
   25064:	0010      	movs	r0, r2
   25066:	4b20      	ldr	r3, [pc, #128]	; (250e8 <spi_flash_enable+0xb4>)
   25068:	4798      	blx	r3
   2506a:	0003      	movs	r3, r0
   2506c:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
   2506e:	230f      	movs	r3, #15
   25070:	18fb      	adds	r3, r7, r3
   25072:	781b      	ldrb	r3, [r3, #0]
   25074:	b25b      	sxtb	r3, r3
   25076:	2b00      	cmp	r3, #0
   25078:	d126      	bne.n	250c8 <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
   2507a:	68bb      	ldr	r3, [r7, #8]
   2507c:	4a1b      	ldr	r2, [pc, #108]	; (250ec <spi_flash_enable+0xb8>)
   2507e:	4013      	ands	r3, r2
   25080:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
   25082:	68bb      	ldr	r3, [r7, #8]
   25084:	4a1a      	ldr	r2, [pc, #104]	; (250f0 <spi_flash_enable+0xbc>)
   25086:	4313      	orrs	r3, r2
   25088:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   2508a:	68bb      	ldr	r3, [r7, #8]
   2508c:	4a15      	ldr	r2, [pc, #84]	; (250e4 <spi_flash_enable+0xb0>)
   2508e:	0019      	movs	r1, r3
   25090:	0010      	movs	r0, r2
   25092:	4b18      	ldr	r3, [pc, #96]	; (250f4 <spi_flash_enable+0xc0>)
   25094:	4798      	blx	r3
		if(enable) {
   25096:	1dfb      	adds	r3, r7, #7
   25098:	781b      	ldrb	r3, [r3, #0]
   2509a:	2b00      	cmp	r3, #0
   2509c:	d002      	beq.n	250a4 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
   2509e:	4b16      	ldr	r3, [pc, #88]	; (250f8 <spi_flash_enable+0xc4>)
   250a0:	4798      	blx	r3
   250a2:	e001      	b.n	250a8 <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
   250a4:	4b15      	ldr	r3, [pc, #84]	; (250fc <spi_flash_enable+0xc8>)
   250a6:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
   250a8:	68bb      	ldr	r3, [r7, #8]
   250aa:	4a10      	ldr	r2, [pc, #64]	; (250ec <spi_flash_enable+0xb8>)
   250ac:	4013      	ands	r3, r2
   250ae:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
   250b0:	68bb      	ldr	r3, [r7, #8]
   250b2:	2280      	movs	r2, #128	; 0x80
   250b4:	0252      	lsls	r2, r2, #9
   250b6:	4313      	orrs	r3, r2
   250b8:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   250ba:	68bb      	ldr	r3, [r7, #8]
   250bc:	4a09      	ldr	r2, [pc, #36]	; (250e4 <spi_flash_enable+0xb0>)
   250be:	0019      	movs	r1, r3
   250c0:	0010      	movs	r0, r2
   250c2:	4b0c      	ldr	r3, [pc, #48]	; (250f4 <spi_flash_enable+0xc0>)
   250c4:	4798      	blx	r3
   250c6:	e000      	b.n	250ca <spi_flash_enable+0x96>
			goto ERR1;
   250c8:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
   250ca:	230f      	movs	r3, #15
   250cc:	18fb      	adds	r3, r7, r3
   250ce:	781b      	ldrb	r3, [r3, #0]
   250d0:	b25b      	sxtb	r3, r3
}
   250d2:	0018      	movs	r0, r3
   250d4:	46bd      	mov	sp, r7
   250d6:	b005      	add	sp, #20
   250d8:	bd90      	pop	{r4, r7, pc}
   250da:	46c0      	nop			; (mov r8, r8)
   250dc:	00021671 	.word	0x00021671
   250e0:	0000039f 	.word	0x0000039f
   250e4:	00001410 	.word	0x00001410
   250e8:	00021d71 	.word	0x00021d71
   250ec:	f8888fff 	.word	0xf8888fff
   250f0:	01111000 	.word	0x01111000
   250f4:	00021d95 	.word	0x00021d95
   250f8:	00024fb5 	.word	0x00024fb5
   250fc:	00024f35 	.word	0x00024f35

00025100 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   25100:	b580      	push	{r7, lr}
   25102:	b084      	sub	sp, #16
   25104:	af00      	add	r7, sp, #0
   25106:	0002      	movs	r2, r0
   25108:	1dfb      	adds	r3, r7, #7
   2510a:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
   2510c:	1dfb      	adds	r3, r7, #7
   2510e:	781b      	ldrb	r3, [r3, #0]
   25110:	2b00      	cmp	r3, #0
   25112:	d108      	bne.n	25126 <mem_test_unit_ready+0x26>
   25114:	1dfb      	adds	r3, r7, #7
   25116:	781a      	ldrb	r2, [r3, #0]
   25118:	4b08      	ldr	r3, [pc, #32]	; (2513c <mem_test_unit_ready+0x3c>)
   2511a:	0152      	lsls	r2, r2, #5
   2511c:	58d3      	ldr	r3, [r2, r3]
   2511e:	4798      	blx	r3
   25120:	0003      	movs	r3, r0
   25122:	001a      	movs	r2, r3
   25124:	e000      	b.n	25128 <mem_test_unit_ready+0x28>
   25126:	2201      	movs	r2, #1
  status =
   25128:	230f      	movs	r3, #15
   2512a:	18fb      	adds	r3, r7, r3
   2512c:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   2512e:	230f      	movs	r3, #15
   25130:	18fb      	adds	r3, r7, r3
   25132:	781b      	ldrb	r3, [r3, #0]
}
   25134:	0018      	movs	r0, r3
   25136:	46bd      	mov	sp, r7
   25138:	b004      	add	sp, #16
   2513a:	bd80      	pop	{r7, pc}
   2513c:	00038f4c 	.word	0x00038f4c

00025140 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   25140:	b580      	push	{r7, lr}
   25142:	b084      	sub	sp, #16
   25144:	af00      	add	r7, sp, #0
   25146:	0002      	movs	r2, r0
   25148:	6039      	str	r1, [r7, #0]
   2514a:	1dfb      	adds	r3, r7, #7
   2514c:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
   2514e:	1dfb      	adds	r3, r7, #7
   25150:	781b      	ldrb	r3, [r3, #0]
   25152:	2b00      	cmp	r3, #0
   25154:	d10c      	bne.n	25170 <mem_read_capacity+0x30>
   25156:	1dfb      	adds	r3, r7, #7
   25158:	781b      	ldrb	r3, [r3, #0]
   2515a:	4a0b      	ldr	r2, [pc, #44]	; (25188 <mem_read_capacity+0x48>)
   2515c:	015b      	lsls	r3, r3, #5
   2515e:	18d3      	adds	r3, r2, r3
   25160:	3304      	adds	r3, #4
   25162:	681b      	ldr	r3, [r3, #0]
   25164:	683a      	ldr	r2, [r7, #0]
   25166:	0010      	movs	r0, r2
   25168:	4798      	blx	r3
   2516a:	0003      	movs	r3, r0
   2516c:	001a      	movs	r2, r3
   2516e:	e000      	b.n	25172 <mem_read_capacity+0x32>
   25170:	2201      	movs	r2, #1
  status =
   25172:	230f      	movs	r3, #15
   25174:	18fb      	adds	r3, r7, r3
   25176:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   25178:	230f      	movs	r3, #15
   2517a:	18fb      	adds	r3, r7, r3
   2517c:	781b      	ldrb	r3, [r3, #0]
}
   2517e:	0018      	movs	r0, r3
   25180:	46bd      	mov	sp, r7
   25182:	b004      	add	sp, #16
   25184:	bd80      	pop	{r7, pc}
   25186:	46c0      	nop			; (mov r8, r8)
   25188:	00038f4c 	.word	0x00038f4c

0002518c <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
   2518c:	b580      	push	{r7, lr}
   2518e:	b084      	sub	sp, #16
   25190:	af00      	add	r7, sp, #0
   25192:	0002      	movs	r2, r0
   25194:	1dfb      	adds	r3, r7, #7
   25196:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
   25198:	1dfb      	adds	r3, r7, #7
   2519a:	781b      	ldrb	r3, [r3, #0]
   2519c:	425a      	negs	r2, r3
   2519e:	4153      	adcs	r3, r2
   251a0:	b2da      	uxtb	r2, r3
  sector_size =
   251a2:	230f      	movs	r3, #15
   251a4:	18fb      	adds	r3, r7, r3
   251a6:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
   251a8:	230f      	movs	r3, #15
   251aa:	18fb      	adds	r3, r7, r3
   251ac:	781b      	ldrb	r3, [r3, #0]
}
   251ae:	0018      	movs	r0, r3
   251b0:	46bd      	mov	sp, r7
   251b2:	b004      	add	sp, #16
   251b4:	bd80      	pop	{r7, pc}
	...

000251b8 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
   251b8:	b580      	push	{r7, lr}
   251ba:	b084      	sub	sp, #16
   251bc:	af00      	add	r7, sp, #0
   251be:	0002      	movs	r2, r0
   251c0:	1dfb      	adds	r3, r7, #7
   251c2:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   251c4:	1dfb      	adds	r3, r7, #7
   251c6:	781b      	ldrb	r3, [r3, #0]
   251c8:	2b00      	cmp	r3, #0
   251ca:	d109      	bne.n	251e0 <mem_wr_protect+0x28>
   251cc:	1dfb      	adds	r3, r7, #7
   251ce:	781b      	ldrb	r3, [r3, #0]
   251d0:	4a0a      	ldr	r2, [pc, #40]	; (251fc <mem_wr_protect+0x44>)
   251d2:	015b      	lsls	r3, r3, #5
   251d4:	18d3      	adds	r3, r2, r3
   251d6:	330c      	adds	r3, #12
   251d8:	681b      	ldr	r3, [r3, #0]
   251da:	4798      	blx	r3
   251dc:	1e03      	subs	r3, r0, #0
   251de:	d001      	beq.n	251e4 <mem_wr_protect+0x2c>
   251e0:	2201      	movs	r2, #1
   251e2:	e000      	b.n	251e6 <mem_wr_protect+0x2e>
   251e4:	2200      	movs	r2, #0
  wr_protect =
   251e6:	230f      	movs	r3, #15
   251e8:	18fb      	adds	r3, r7, r3
   251ea:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
   251ec:	230f      	movs	r3, #15
   251ee:	18fb      	adds	r3, r7, r3
   251f0:	781b      	ldrb	r3, [r3, #0]
}
   251f2:	0018      	movs	r0, r3
   251f4:	46bd      	mov	sp, r7
   251f6:	b004      	add	sp, #16
   251f8:	bd80      	pop	{r7, pc}
   251fa:	46c0      	nop			; (mov r8, r8)
   251fc:	00038f4c 	.word	0x00038f4c

00025200 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
   25200:	b580      	push	{r7, lr}
   25202:	b086      	sub	sp, #24
   25204:	af00      	add	r7, sp, #0
   25206:	60b9      	str	r1, [r7, #8]
   25208:	607a      	str	r2, [r7, #4]
   2520a:	230f      	movs	r3, #15
   2520c:	18fb      	adds	r3, r7, r3
   2520e:	1c02      	adds	r2, r0, #0
   25210:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
   25212:	230f      	movs	r3, #15
   25214:	18fb      	adds	r3, r7, r3
   25216:	781b      	ldrb	r3, [r3, #0]
   25218:	2b00      	cmp	r3, #0
   2521a:	d10e      	bne.n	2523a <memory_2_ram+0x3a>
   2521c:	230f      	movs	r3, #15
   2521e:	18fb      	adds	r3, r7, r3
   25220:	781b      	ldrb	r3, [r3, #0]
   25222:	4a0b      	ldr	r2, [pc, #44]	; (25250 <memory_2_ram+0x50>)
   25224:	015b      	lsls	r3, r3, #5
   25226:	18d3      	adds	r3, r2, r3
   25228:	3314      	adds	r3, #20
   2522a:	681b      	ldr	r3, [r3, #0]
   2522c:	6879      	ldr	r1, [r7, #4]
   2522e:	68ba      	ldr	r2, [r7, #8]
   25230:	0010      	movs	r0, r2
   25232:	4798      	blx	r3
   25234:	0003      	movs	r3, r0
   25236:	001a      	movs	r2, r3
   25238:	e000      	b.n	2523c <memory_2_ram+0x3c>
   2523a:	2201      	movs	r2, #1
  status =
   2523c:	2317      	movs	r3, #23
   2523e:	18fb      	adds	r3, r7, r3
   25240:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
   25242:	2317      	movs	r3, #23
   25244:	18fb      	adds	r3, r7, r3
   25246:	781b      	ldrb	r3, [r3, #0]
}
   25248:	0018      	movs	r0, r3
   2524a:	46bd      	mov	sp, r7
   2524c:	b006      	add	sp, #24
   2524e:	bd80      	pop	{r7, pc}
   25250:	00038f4c 	.word	0x00038f4c

00025254 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
   25254:	b580      	push	{r7, lr}
   25256:	b086      	sub	sp, #24
   25258:	af00      	add	r7, sp, #0
   2525a:	60b9      	str	r1, [r7, #8]
   2525c:	607a      	str	r2, [r7, #4]
   2525e:	230f      	movs	r3, #15
   25260:	18fb      	adds	r3, r7, r3
   25262:	1c02      	adds	r2, r0, #0
   25264:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
   25266:	230f      	movs	r3, #15
   25268:	18fb      	adds	r3, r7, r3
   2526a:	781b      	ldrb	r3, [r3, #0]
   2526c:	2b00      	cmp	r3, #0
   2526e:	d10e      	bne.n	2528e <ram_2_memory+0x3a>
   25270:	230f      	movs	r3, #15
   25272:	18fb      	adds	r3, r7, r3
   25274:	781b      	ldrb	r3, [r3, #0]
   25276:	4a0b      	ldr	r2, [pc, #44]	; (252a4 <ram_2_memory+0x50>)
   25278:	015b      	lsls	r3, r3, #5
   2527a:	18d3      	adds	r3, r2, r3
   2527c:	3318      	adds	r3, #24
   2527e:	681b      	ldr	r3, [r3, #0]
   25280:	6879      	ldr	r1, [r7, #4]
   25282:	68ba      	ldr	r2, [r7, #8]
   25284:	0010      	movs	r0, r2
   25286:	4798      	blx	r3
   25288:	0003      	movs	r3, r0
   2528a:	001a      	movs	r2, r3
   2528c:	e000      	b.n	25290 <ram_2_memory+0x3c>
   2528e:	2201      	movs	r2, #1
  status =
   25290:	2317      	movs	r3, #23
   25292:	18fb      	adds	r3, r7, r3
   25294:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
   25296:	2317      	movs	r3, #23
   25298:	18fb      	adds	r3, r7, r3
   2529a:	781b      	ldrb	r3, [r3, #0]
}
   2529c:	0018      	movs	r0, r3
   2529e:	46bd      	mov	sp, r7
   252a0:	b006      	add	sp, #24
   252a2:	bd80      	pop	{r7, pc}
   252a4:	00038f4c 	.word	0x00038f4c

000252a8 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   252a8:	b580      	push	{r7, lr}
   252aa:	b082      	sub	sp, #8
   252ac:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   252ae:	4b10      	ldr	r3, [pc, #64]	; (252f0 <cpu_irq_enter_critical+0x48>)
   252b0:	681b      	ldr	r3, [r3, #0]
   252b2:	2b00      	cmp	r3, #0
   252b4:	d112      	bne.n	252dc <cpu_irq_enter_critical+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   252b6:	f3ef 8310 	mrs	r3, PRIMASK
   252ba:	607b      	str	r3, [r7, #4]
  return(result);
   252bc:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   252be:	2b00      	cmp	r3, #0
   252c0:	d109      	bne.n	252d6 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   252c2:	b672      	cpsid	i
   252c4:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   252c8:	4b0a      	ldr	r3, [pc, #40]	; (252f4 <cpu_irq_enter_critical+0x4c>)
   252ca:	2200      	movs	r2, #0
   252cc:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   252ce:	4b0a      	ldr	r3, [pc, #40]	; (252f8 <cpu_irq_enter_critical+0x50>)
   252d0:	2201      	movs	r2, #1
   252d2:	701a      	strb	r2, [r3, #0]
   252d4:	e002      	b.n	252dc <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   252d6:	4b08      	ldr	r3, [pc, #32]	; (252f8 <cpu_irq_enter_critical+0x50>)
   252d8:	2200      	movs	r2, #0
   252da:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   252dc:	4b04      	ldr	r3, [pc, #16]	; (252f0 <cpu_irq_enter_critical+0x48>)
   252de:	681b      	ldr	r3, [r3, #0]
   252e0:	1c5a      	adds	r2, r3, #1
   252e2:	4b03      	ldr	r3, [pc, #12]	; (252f0 <cpu_irq_enter_critical+0x48>)
   252e4:	601a      	str	r2, [r3, #0]
}
   252e6:	46c0      	nop			; (mov r8, r8)
   252e8:	46bd      	mov	sp, r7
   252ea:	b002      	add	sp, #8
   252ec:	bd80      	pop	{r7, pc}
   252ee:	46c0      	nop			; (mov r8, r8)
   252f0:	20004284 	.word	0x20004284
   252f4:	20000116 	.word	0x20000116
   252f8:	20004288 	.word	0x20004288

000252fc <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   252fc:	b580      	push	{r7, lr}
   252fe:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   25300:	4b0b      	ldr	r3, [pc, #44]	; (25330 <cpu_irq_leave_critical+0x34>)
   25302:	681b      	ldr	r3, [r3, #0]
   25304:	1e5a      	subs	r2, r3, #1
   25306:	4b0a      	ldr	r3, [pc, #40]	; (25330 <cpu_irq_leave_critical+0x34>)
   25308:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   2530a:	4b09      	ldr	r3, [pc, #36]	; (25330 <cpu_irq_leave_critical+0x34>)
   2530c:	681b      	ldr	r3, [r3, #0]
   2530e:	2b00      	cmp	r3, #0
   25310:	d10a      	bne.n	25328 <cpu_irq_leave_critical+0x2c>
   25312:	4b08      	ldr	r3, [pc, #32]	; (25334 <cpu_irq_leave_critical+0x38>)
   25314:	781b      	ldrb	r3, [r3, #0]
   25316:	b2db      	uxtb	r3, r3
   25318:	2b00      	cmp	r3, #0
   2531a:	d005      	beq.n	25328 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   2531c:	4b06      	ldr	r3, [pc, #24]	; (25338 <cpu_irq_leave_critical+0x3c>)
   2531e:	2201      	movs	r2, #1
   25320:	701a      	strb	r2, [r3, #0]
   25322:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   25326:	b662      	cpsie	i
	}
}
   25328:	46c0      	nop			; (mov r8, r8)
   2532a:	46bd      	mov	sp, r7
   2532c:	bd80      	pop	{r7, pc}
   2532e:	46c0      	nop			; (mov r8, r8)
   25330:	20004284 	.word	0x20004284
   25334:	20004288 	.word	0x20004288
   25338:	20000116 	.word	0x20000116

0002533c <system_pinmux_get_group_from_gpio_pin>:
{
   2533c:	b580      	push	{r7, lr}
   2533e:	b084      	sub	sp, #16
   25340:	af00      	add	r7, sp, #0
   25342:	0002      	movs	r2, r0
   25344:	1dfb      	adds	r3, r7, #7
   25346:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   25348:	230f      	movs	r3, #15
   2534a:	18fb      	adds	r3, r7, r3
   2534c:	1dfa      	adds	r2, r7, #7
   2534e:	7812      	ldrb	r2, [r2, #0]
   25350:	09d2      	lsrs	r2, r2, #7
   25352:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   25354:	230e      	movs	r3, #14
   25356:	18fb      	adds	r3, r7, r3
   25358:	1dfa      	adds	r2, r7, #7
   2535a:	7812      	ldrb	r2, [r2, #0]
   2535c:	0952      	lsrs	r2, r2, #5
   2535e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   25360:	4b0d      	ldr	r3, [pc, #52]	; (25398 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   25362:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   25364:	230f      	movs	r3, #15
   25366:	18fb      	adds	r3, r7, r3
   25368:	781b      	ldrb	r3, [r3, #0]
   2536a:	2b00      	cmp	r3, #0
   2536c:	d10f      	bne.n	2538e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   2536e:	230f      	movs	r3, #15
   25370:	18fb      	adds	r3, r7, r3
   25372:	781b      	ldrb	r3, [r3, #0]
   25374:	009b      	lsls	r3, r3, #2
   25376:	2210      	movs	r2, #16
   25378:	4694      	mov	ip, r2
   2537a:	44bc      	add	ip, r7
   2537c:	4463      	add	r3, ip
   2537e:	3b08      	subs	r3, #8
   25380:	681a      	ldr	r2, [r3, #0]
   25382:	230e      	movs	r3, #14
   25384:	18fb      	adds	r3, r7, r3
   25386:	781b      	ldrb	r3, [r3, #0]
   25388:	01db      	lsls	r3, r3, #7
   2538a:	18d3      	adds	r3, r2, r3
   2538c:	e000      	b.n	25390 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2538e:	2300      	movs	r3, #0
}
   25390:	0018      	movs	r0, r3
   25392:	46bd      	mov	sp, r7
   25394:	b004      	add	sp, #16
   25396:	bd80      	pop	{r7, pc}
   25398:	41004400 	.word	0x41004400

0002539c <port_get_group_from_gpio_pin>:
{
   2539c:	b580      	push	{r7, lr}
   2539e:	b082      	sub	sp, #8
   253a0:	af00      	add	r7, sp, #0
   253a2:	0002      	movs	r2, r0
   253a4:	1dfb      	adds	r3, r7, #7
   253a6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   253a8:	1dfb      	adds	r3, r7, #7
   253aa:	781b      	ldrb	r3, [r3, #0]
   253ac:	0018      	movs	r0, r3
   253ae:	4b03      	ldr	r3, [pc, #12]	; (253bc <port_get_group_from_gpio_pin+0x20>)
   253b0:	4798      	blx	r3
   253b2:	0003      	movs	r3, r0
}
   253b4:	0018      	movs	r0, r3
   253b6:	46bd      	mov	sp, r7
   253b8:	b002      	add	sp, #8
   253ba:	bd80      	pop	{r7, pc}
   253bc:	0002533d 	.word	0x0002533d

000253c0 <port_get_config_defaults>:
{
   253c0:	b580      	push	{r7, lr}
   253c2:	b082      	sub	sp, #8
   253c4:	af00      	add	r7, sp, #0
   253c6:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   253c8:	687b      	ldr	r3, [r7, #4]
   253ca:	2200      	movs	r2, #0
   253cc:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   253ce:	687b      	ldr	r3, [r7, #4]
   253d0:	2201      	movs	r2, #1
   253d2:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   253d4:	687b      	ldr	r3, [r7, #4]
   253d6:	2200      	movs	r2, #0
   253d8:	709a      	strb	r2, [r3, #2]
}
   253da:	46c0      	nop			; (mov r8, r8)
   253dc:	46bd      	mov	sp, r7
   253de:	b002      	add	sp, #8
   253e0:	bd80      	pop	{r7, pc}
	...

000253e4 <port_pin_set_output_level>:
{
   253e4:	b580      	push	{r7, lr}
   253e6:	b084      	sub	sp, #16
   253e8:	af00      	add	r7, sp, #0
   253ea:	0002      	movs	r2, r0
   253ec:	1dfb      	adds	r3, r7, #7
   253ee:	701a      	strb	r2, [r3, #0]
   253f0:	1dbb      	adds	r3, r7, #6
   253f2:	1c0a      	adds	r2, r1, #0
   253f4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   253f6:	1dfb      	adds	r3, r7, #7
   253f8:	781b      	ldrb	r3, [r3, #0]
   253fa:	0018      	movs	r0, r3
   253fc:	4b0d      	ldr	r3, [pc, #52]	; (25434 <port_pin_set_output_level+0x50>)
   253fe:	4798      	blx	r3
   25400:	0003      	movs	r3, r0
   25402:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   25404:	1dfb      	adds	r3, r7, #7
   25406:	781b      	ldrb	r3, [r3, #0]
   25408:	221f      	movs	r2, #31
   2540a:	4013      	ands	r3, r2
   2540c:	2201      	movs	r2, #1
   2540e:	409a      	lsls	r2, r3
   25410:	0013      	movs	r3, r2
   25412:	60bb      	str	r3, [r7, #8]
	if (level) {
   25414:	1dbb      	adds	r3, r7, #6
   25416:	781b      	ldrb	r3, [r3, #0]
   25418:	2b00      	cmp	r3, #0
   2541a:	d003      	beq.n	25424 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   2541c:	68fb      	ldr	r3, [r7, #12]
   2541e:	68ba      	ldr	r2, [r7, #8]
   25420:	619a      	str	r2, [r3, #24]
}
   25422:	e002      	b.n	2542a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   25424:	68fb      	ldr	r3, [r7, #12]
   25426:	68ba      	ldr	r2, [r7, #8]
   25428:	615a      	str	r2, [r3, #20]
}
   2542a:	46c0      	nop			; (mov r8, r8)
   2542c:	46bd      	mov	sp, r7
   2542e:	b004      	add	sp, #16
   25430:	bd80      	pop	{r7, pc}
   25432:	46c0      	nop			; (mov r8, r8)
   25434:	0002539d 	.word	0x0002539d

00025438 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   25438:	b580      	push	{r7, lr}
   2543a:	b082      	sub	sp, #8
   2543c:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   2543e:	1d3b      	adds	r3, r7, #4
   25440:	0018      	movs	r0, r3
   25442:	4b0e      	ldr	r3, [pc, #56]	; (2547c <system_board_init+0x44>)
   25444:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   25446:	1d3b      	adds	r3, r7, #4
   25448:	2201      	movs	r2, #1
   2544a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   2544c:	1d3b      	adds	r3, r7, #4
   2544e:	0019      	movs	r1, r3
   25450:	2017      	movs	r0, #23
   25452:	4b0b      	ldr	r3, [pc, #44]	; (25480 <system_board_init+0x48>)
   25454:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   25456:	2101      	movs	r1, #1
   25458:	2017      	movs	r0, #23
   2545a:	4b0a      	ldr	r3, [pc, #40]	; (25484 <system_board_init+0x4c>)
   2545c:	4798      	blx	r3
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   2545e:	1d3b      	adds	r3, r7, #4
   25460:	2200      	movs	r2, #0
   25462:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
   25464:	1d3b      	adds	r3, r7, #4
   25466:	2201      	movs	r2, #1
   25468:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   2546a:	1d3b      	adds	r3, r7, #4
   2546c:	0019      	movs	r1, r3
   2546e:	2037      	movs	r0, #55	; 0x37
   25470:	4b03      	ldr	r3, [pc, #12]	; (25480 <system_board_init+0x48>)
   25472:	4798      	blx	r3
}
   25474:	46c0      	nop			; (mov r8, r8)
   25476:	46bd      	mov	sp, r7
   25478:	b002      	add	sp, #8
   2547a:	bd80      	pop	{r7, pc}
   2547c:	000253c1 	.word	0x000253c1
   25480:	00025aad 	.word	0x00025aad
   25484:	000253e5 	.word	0x000253e5

00025488 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   25488:	b580      	push	{r7, lr}
   2548a:	b084      	sub	sp, #16
   2548c:	af00      	add	r7, sp, #0
   2548e:	0002      	movs	r2, r0
   25490:	1dfb      	adds	r3, r7, #7
   25492:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   25494:	230f      	movs	r3, #15
   25496:	18fb      	adds	r3, r7, r3
   25498:	1dfa      	adds	r2, r7, #7
   2549a:	7812      	ldrb	r2, [r2, #0]
   2549c:	0952      	lsrs	r2, r2, #5
   2549e:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   254a0:	230f      	movs	r3, #15
   254a2:	18fb      	adds	r3, r7, r3
   254a4:	781b      	ldrb	r3, [r3, #0]
   254a6:	2b00      	cmp	r3, #0
   254a8:	d10c      	bne.n	254c4 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   254aa:	4b09      	ldr	r3, [pc, #36]	; (254d0 <_extint_get_eic_from_channel+0x48>)
   254ac:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   254ae:	230f      	movs	r3, #15
   254b0:	18fb      	adds	r3, r7, r3
   254b2:	781b      	ldrb	r3, [r3, #0]
   254b4:	009b      	lsls	r3, r3, #2
   254b6:	2210      	movs	r2, #16
   254b8:	4694      	mov	ip, r2
   254ba:	44bc      	add	ip, r7
   254bc:	4463      	add	r3, ip
   254be:	3b08      	subs	r3, #8
   254c0:	681b      	ldr	r3, [r3, #0]
   254c2:	e000      	b.n	254c6 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   254c4:	2300      	movs	r3, #0
	}
}
   254c6:	0018      	movs	r0, r3
   254c8:	46bd      	mov	sp, r7
   254ca:	b004      	add	sp, #16
   254cc:	bd80      	pop	{r7, pc}
   254ce:	46c0      	nop			; (mov r8, r8)
   254d0:	40001800 	.word	0x40001800

000254d4 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
   254d4:	b580      	push	{r7, lr}
   254d6:	b084      	sub	sp, #16
   254d8:	af00      	add	r7, sp, #0
   254da:	0002      	movs	r2, r0
   254dc:	1dfb      	adds	r3, r7, #7
   254de:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   254e0:	1dfb      	adds	r3, r7, #7
   254e2:	781b      	ldrb	r3, [r3, #0]
   254e4:	0018      	movs	r0, r3
   254e6:	4b0b      	ldr	r3, [pc, #44]	; (25514 <extint_chan_is_detected+0x40>)
   254e8:	4798      	blx	r3
   254ea:	0003      	movs	r3, r0
   254ec:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   254ee:	1dfb      	adds	r3, r7, #7
   254f0:	781b      	ldrb	r3, [r3, #0]
   254f2:	221f      	movs	r2, #31
   254f4:	4013      	ands	r3, r2
   254f6:	2201      	movs	r2, #1
   254f8:	409a      	lsls	r2, r3
   254fa:	0013      	movs	r3, r2
   254fc:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
   254fe:	68fb      	ldr	r3, [r7, #12]
   25500:	691b      	ldr	r3, [r3, #16]
   25502:	68ba      	ldr	r2, [r7, #8]
   25504:	4013      	ands	r3, r2
   25506:	1e5a      	subs	r2, r3, #1
   25508:	4193      	sbcs	r3, r2
   2550a:	b2db      	uxtb	r3, r3
}
   2550c:	0018      	movs	r0, r3
   2550e:	46bd      	mov	sp, r7
   25510:	b004      	add	sp, #16
   25512:	bd80      	pop	{r7, pc}
   25514:	00025489 	.word	0x00025489

00025518 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   25518:	b580      	push	{r7, lr}
   2551a:	b084      	sub	sp, #16
   2551c:	af00      	add	r7, sp, #0
   2551e:	0002      	movs	r2, r0
   25520:	1dfb      	adds	r3, r7, #7
   25522:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   25524:	1dfb      	adds	r3, r7, #7
   25526:	781b      	ldrb	r3, [r3, #0]
   25528:	0018      	movs	r0, r3
   2552a:	4b09      	ldr	r3, [pc, #36]	; (25550 <extint_chan_clear_detected+0x38>)
   2552c:	4798      	blx	r3
   2552e:	0003      	movs	r3, r0
   25530:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   25532:	1dfb      	adds	r3, r7, #7
   25534:	781b      	ldrb	r3, [r3, #0]
   25536:	221f      	movs	r2, #31
   25538:	4013      	ands	r3, r2
   2553a:	2201      	movs	r2, #1
   2553c:	409a      	lsls	r2, r3
   2553e:	0013      	movs	r3, r2
   25540:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   25542:	68fb      	ldr	r3, [r7, #12]
   25544:	68ba      	ldr	r2, [r7, #8]
   25546:	611a      	str	r2, [r3, #16]
}
   25548:	46c0      	nop			; (mov r8, r8)
   2554a:	46bd      	mov	sp, r7
   2554c:	b004      	add	sp, #16
   2554e:	bd80      	pop	{r7, pc}
   25550:	00025489 	.word	0x00025489

00025554 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   25554:	b580      	push	{r7, lr}
   25556:	b082      	sub	sp, #8
   25558:	af00      	add	r7, sp, #0
   2555a:	6078      	str	r0, [r7, #4]
   2555c:	0008      	movs	r0, r1
   2555e:	0011      	movs	r1, r2
   25560:	1cfb      	adds	r3, r7, #3
   25562:	1c02      	adds	r2, r0, #0
   25564:	701a      	strb	r2, [r3, #0]
   25566:	1cbb      	adds	r3, r7, #2
   25568:	1c0a      	adds	r2, r1, #0
   2556a:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   2556c:	1cbb      	adds	r3, r7, #2
   2556e:	781b      	ldrb	r3, [r3, #0]
   25570:	2b00      	cmp	r3, #0
   25572:	d001      	beq.n	25578 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   25574:	2317      	movs	r3, #23
   25576:	e019      	b.n	255ac <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   25578:	1cfb      	adds	r3, r7, #3
   2557a:	781a      	ldrb	r2, [r3, #0]
   2557c:	4b0d      	ldr	r3, [pc, #52]	; (255b4 <extint_register_callback+0x60>)
   2557e:	0092      	lsls	r2, r2, #2
   25580:	58d3      	ldr	r3, [r2, r3]
   25582:	2b00      	cmp	r3, #0
   25584:	d107      	bne.n	25596 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   25586:	1cfb      	adds	r3, r7, #3
   25588:	781a      	ldrb	r2, [r3, #0]
   2558a:	4b0a      	ldr	r3, [pc, #40]	; (255b4 <extint_register_callback+0x60>)
   2558c:	0092      	lsls	r2, r2, #2
   2558e:	6879      	ldr	r1, [r7, #4]
   25590:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   25592:	2300      	movs	r3, #0
   25594:	e00a      	b.n	255ac <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   25596:	1cfb      	adds	r3, r7, #3
   25598:	781a      	ldrb	r2, [r3, #0]
   2559a:	4b06      	ldr	r3, [pc, #24]	; (255b4 <extint_register_callback+0x60>)
   2559c:	0092      	lsls	r2, r2, #2
   2559e:	58d2      	ldr	r2, [r2, r3]
   255a0:	687b      	ldr	r3, [r7, #4]
   255a2:	429a      	cmp	r2, r3
   255a4:	d101      	bne.n	255aa <extint_register_callback+0x56>
		return STATUS_OK;
   255a6:	2300      	movs	r3, #0
   255a8:	e000      	b.n	255ac <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   255aa:	231d      	movs	r3, #29
}
   255ac:	0018      	movs	r0, r3
   255ae:	46bd      	mov	sp, r7
   255b0:	b002      	add	sp, #8
   255b2:	bd80      	pop	{r7, pc}
   255b4:	20005b88 	.word	0x20005b88

000255b8 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   255b8:	b580      	push	{r7, lr}
   255ba:	b084      	sub	sp, #16
   255bc:	af00      	add	r7, sp, #0
   255be:	0002      	movs	r2, r0
   255c0:	1dfb      	adds	r3, r7, #7
   255c2:	701a      	strb	r2, [r3, #0]
   255c4:	1dbb      	adds	r3, r7, #6
   255c6:	1c0a      	adds	r2, r1, #0
   255c8:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   255ca:	1dbb      	adds	r3, r7, #6
   255cc:	781b      	ldrb	r3, [r3, #0]
   255ce:	2b00      	cmp	r3, #0
   255d0:	d10e      	bne.n	255f0 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   255d2:	1dfb      	adds	r3, r7, #7
   255d4:	781b      	ldrb	r3, [r3, #0]
   255d6:	0018      	movs	r0, r3
   255d8:	4b08      	ldr	r3, [pc, #32]	; (255fc <extint_chan_enable_callback+0x44>)
   255da:	4798      	blx	r3
   255dc:	0003      	movs	r3, r0
   255de:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   255e0:	1dfb      	adds	r3, r7, #7
   255e2:	781b      	ldrb	r3, [r3, #0]
   255e4:	2201      	movs	r2, #1
   255e6:	409a      	lsls	r2, r3
   255e8:	68fb      	ldr	r3, [r7, #12]
   255ea:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   255ec:	2300      	movs	r3, #0
   255ee:	e000      	b.n	255f2 <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   255f0:	2317      	movs	r3, #23
}
   255f2:	0018      	movs	r0, r3
   255f4:	46bd      	mov	sp, r7
   255f6:	b004      	add	sp, #16
   255f8:	bd80      	pop	{r7, pc}
   255fa:	46c0      	nop			; (mov r8, r8)
   255fc:	00025489 	.word	0x00025489

00025600 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   25600:	b580      	push	{r7, lr}
   25602:	b084      	sub	sp, #16
   25604:	af00      	add	r7, sp, #0
   25606:	0002      	movs	r2, r0
   25608:	1dfb      	adds	r3, r7, #7
   2560a:	701a      	strb	r2, [r3, #0]
   2560c:	1dbb      	adds	r3, r7, #6
   2560e:	1c0a      	adds	r2, r1, #0
   25610:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   25612:	1dbb      	adds	r3, r7, #6
   25614:	781b      	ldrb	r3, [r3, #0]
   25616:	2b00      	cmp	r3, #0
   25618:	d10e      	bne.n	25638 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   2561a:	1dfb      	adds	r3, r7, #7
   2561c:	781b      	ldrb	r3, [r3, #0]
   2561e:	0018      	movs	r0, r3
   25620:	4b08      	ldr	r3, [pc, #32]	; (25644 <extint_chan_disable_callback+0x44>)
   25622:	4798      	blx	r3
   25624:	0003      	movs	r3, r0
   25626:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
   25628:	1dfb      	adds	r3, r7, #7
   2562a:	781b      	ldrb	r3, [r3, #0]
   2562c:	2201      	movs	r2, #1
   2562e:	409a      	lsls	r2, r3
   25630:	68fb      	ldr	r3, [r7, #12]
   25632:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   25634:	2300      	movs	r3, #0
   25636:	e000      	b.n	2563a <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   25638:	2317      	movs	r3, #23
}
   2563a:	0018      	movs	r0, r3
   2563c:	46bd      	mov	sp, r7
   2563e:	b004      	add	sp, #16
   25640:	bd80      	pop	{r7, pc}
   25642:	46c0      	nop			; (mov r8, r8)
   25644:	00025489 	.word	0x00025489

00025648 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   25648:	b580      	push	{r7, lr}
   2564a:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   2564c:	4b15      	ldr	r3, [pc, #84]	; (256a4 <EIC_Handler+0x5c>)
   2564e:	2200      	movs	r2, #0
   25650:	701a      	strb	r2, [r3, #0]
   25652:	e020      	b.n	25696 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   25654:	4b13      	ldr	r3, [pc, #76]	; (256a4 <EIC_Handler+0x5c>)
   25656:	781b      	ldrb	r3, [r3, #0]
   25658:	0018      	movs	r0, r3
   2565a:	4b13      	ldr	r3, [pc, #76]	; (256a8 <EIC_Handler+0x60>)
   2565c:	4798      	blx	r3
   2565e:	1e03      	subs	r3, r0, #0
   25660:	d013      	beq.n	2568a <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   25662:	4b10      	ldr	r3, [pc, #64]	; (256a4 <EIC_Handler+0x5c>)
   25664:	781b      	ldrb	r3, [r3, #0]
   25666:	0018      	movs	r0, r3
   25668:	4b10      	ldr	r3, [pc, #64]	; (256ac <EIC_Handler+0x64>)
   2566a:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   2566c:	4b0d      	ldr	r3, [pc, #52]	; (256a4 <EIC_Handler+0x5c>)
   2566e:	781b      	ldrb	r3, [r3, #0]
   25670:	001a      	movs	r2, r3
   25672:	4b0f      	ldr	r3, [pc, #60]	; (256b0 <EIC_Handler+0x68>)
   25674:	0092      	lsls	r2, r2, #2
   25676:	58d3      	ldr	r3, [r2, r3]
   25678:	2b00      	cmp	r3, #0
   2567a:	d006      	beq.n	2568a <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   2567c:	4b09      	ldr	r3, [pc, #36]	; (256a4 <EIC_Handler+0x5c>)
   2567e:	781b      	ldrb	r3, [r3, #0]
   25680:	001a      	movs	r2, r3
   25682:	4b0b      	ldr	r3, [pc, #44]	; (256b0 <EIC_Handler+0x68>)
   25684:	0092      	lsls	r2, r2, #2
   25686:	58d3      	ldr	r3, [r2, r3]
   25688:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   2568a:	4b06      	ldr	r3, [pc, #24]	; (256a4 <EIC_Handler+0x5c>)
   2568c:	781b      	ldrb	r3, [r3, #0]
   2568e:	3301      	adds	r3, #1
   25690:	b2da      	uxtb	r2, r3
   25692:	4b04      	ldr	r3, [pc, #16]	; (256a4 <EIC_Handler+0x5c>)
   25694:	701a      	strb	r2, [r3, #0]
   25696:	4b03      	ldr	r3, [pc, #12]	; (256a4 <EIC_Handler+0x5c>)
   25698:	781b      	ldrb	r3, [r3, #0]
   2569a:	2b0f      	cmp	r3, #15
   2569c:	d9da      	bls.n	25654 <EIC_Handler+0xc>
			}
		}
	}
}
   2569e:	46c0      	nop			; (mov r8, r8)
   256a0:	46bd      	mov	sp, r7
   256a2:	bd80      	pop	{r7, pc}
   256a4:	20005b84 	.word	0x20005b84
   256a8:	000254d5 	.word	0x000254d5
   256ac:	00025519 	.word	0x00025519
   256b0:	20005b88 	.word	0x20005b88

000256b4 <system_gclk_chan_get_config_defaults>:
{
   256b4:	b580      	push	{r7, lr}
   256b6:	b082      	sub	sp, #8
   256b8:	af00      	add	r7, sp, #0
   256ba:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   256bc:	687b      	ldr	r3, [r7, #4]
   256be:	2200      	movs	r2, #0
   256c0:	701a      	strb	r2, [r3, #0]
}
   256c2:	46c0      	nop			; (mov r8, r8)
   256c4:	46bd      	mov	sp, r7
   256c6:	b002      	add	sp, #8
   256c8:	bd80      	pop	{r7, pc}
	...

000256cc <system_apb_clock_set_mask>:
{
   256cc:	b580      	push	{r7, lr}
   256ce:	b082      	sub	sp, #8
   256d0:	af00      	add	r7, sp, #0
   256d2:	0002      	movs	r2, r0
   256d4:	6039      	str	r1, [r7, #0]
   256d6:	1dfb      	adds	r3, r7, #7
   256d8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   256da:	1dfb      	adds	r3, r7, #7
   256dc:	781b      	ldrb	r3, [r3, #0]
   256de:	2b01      	cmp	r3, #1
   256e0:	d00a      	beq.n	256f8 <system_apb_clock_set_mask+0x2c>
   256e2:	2b02      	cmp	r3, #2
   256e4:	d00f      	beq.n	25706 <system_apb_clock_set_mask+0x3a>
   256e6:	2b00      	cmp	r3, #0
   256e8:	d114      	bne.n	25714 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   256ea:	4b0e      	ldr	r3, [pc, #56]	; (25724 <system_apb_clock_set_mask+0x58>)
   256ec:	4a0d      	ldr	r2, [pc, #52]	; (25724 <system_apb_clock_set_mask+0x58>)
   256ee:	6991      	ldr	r1, [r2, #24]
   256f0:	683a      	ldr	r2, [r7, #0]
   256f2:	430a      	orrs	r2, r1
   256f4:	619a      	str	r2, [r3, #24]
			break;
   256f6:	e00f      	b.n	25718 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   256f8:	4b0a      	ldr	r3, [pc, #40]	; (25724 <system_apb_clock_set_mask+0x58>)
   256fa:	4a0a      	ldr	r2, [pc, #40]	; (25724 <system_apb_clock_set_mask+0x58>)
   256fc:	69d1      	ldr	r1, [r2, #28]
   256fe:	683a      	ldr	r2, [r7, #0]
   25700:	430a      	orrs	r2, r1
   25702:	61da      	str	r2, [r3, #28]
			break;
   25704:	e008      	b.n	25718 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   25706:	4b07      	ldr	r3, [pc, #28]	; (25724 <system_apb_clock_set_mask+0x58>)
   25708:	4a06      	ldr	r2, [pc, #24]	; (25724 <system_apb_clock_set_mask+0x58>)
   2570a:	6a11      	ldr	r1, [r2, #32]
   2570c:	683a      	ldr	r2, [r7, #0]
   2570e:	430a      	orrs	r2, r1
   25710:	621a      	str	r2, [r3, #32]
			break;
   25712:	e001      	b.n	25718 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   25714:	2317      	movs	r3, #23
   25716:	e000      	b.n	2571a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   25718:	2300      	movs	r3, #0
}
   2571a:	0018      	movs	r0, r3
   2571c:	46bd      	mov	sp, r7
   2571e:	b002      	add	sp, #8
   25720:	bd80      	pop	{r7, pc}
   25722:	46c0      	nop			; (mov r8, r8)
   25724:	40000400 	.word	0x40000400

00025728 <system_pinmux_get_config_defaults>:
{
   25728:	b580      	push	{r7, lr}
   2572a:	b082      	sub	sp, #8
   2572c:	af00      	add	r7, sp, #0
   2572e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   25730:	687b      	ldr	r3, [r7, #4]
   25732:	2280      	movs	r2, #128	; 0x80
   25734:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   25736:	687b      	ldr	r3, [r7, #4]
   25738:	2200      	movs	r2, #0
   2573a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   2573c:	687b      	ldr	r3, [r7, #4]
   2573e:	2201      	movs	r2, #1
   25740:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   25742:	687b      	ldr	r3, [r7, #4]
   25744:	2200      	movs	r2, #0
   25746:	70da      	strb	r2, [r3, #3]
}
   25748:	46c0      	nop			; (mov r8, r8)
   2574a:	46bd      	mov	sp, r7
   2574c:	b002      	add	sp, #8
   2574e:	bd80      	pop	{r7, pc}

00025750 <system_interrupt_enable>:
{
   25750:	b580      	push	{r7, lr}
   25752:	b082      	sub	sp, #8
   25754:	af00      	add	r7, sp, #0
   25756:	0002      	movs	r2, r0
   25758:	1dfb      	adds	r3, r7, #7
   2575a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2575c:	4b06      	ldr	r3, [pc, #24]	; (25778 <system_interrupt_enable+0x28>)
   2575e:	1dfa      	adds	r2, r7, #7
   25760:	7812      	ldrb	r2, [r2, #0]
   25762:	0011      	movs	r1, r2
   25764:	221f      	movs	r2, #31
   25766:	400a      	ands	r2, r1
   25768:	2101      	movs	r1, #1
   2576a:	4091      	lsls	r1, r2
   2576c:	000a      	movs	r2, r1
   2576e:	601a      	str	r2, [r3, #0]
}
   25770:	46c0      	nop			; (mov r8, r8)
   25772:	46bd      	mov	sp, r7
   25774:	b002      	add	sp, #8
   25776:	bd80      	pop	{r7, pc}
   25778:	e000e100 	.word	0xe000e100

0002577c <_extint_get_eic_from_channel>:
{
   2577c:	b580      	push	{r7, lr}
   2577e:	b084      	sub	sp, #16
   25780:	af00      	add	r7, sp, #0
   25782:	0002      	movs	r2, r0
   25784:	1dfb      	adds	r3, r7, #7
   25786:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   25788:	230f      	movs	r3, #15
   2578a:	18fb      	adds	r3, r7, r3
   2578c:	1dfa      	adds	r2, r7, #7
   2578e:	7812      	ldrb	r2, [r2, #0]
   25790:	0952      	lsrs	r2, r2, #5
   25792:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   25794:	230f      	movs	r3, #15
   25796:	18fb      	adds	r3, r7, r3
   25798:	781b      	ldrb	r3, [r3, #0]
   2579a:	2b00      	cmp	r3, #0
   2579c:	d10c      	bne.n	257b8 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   2579e:	4b09      	ldr	r3, [pc, #36]	; (257c4 <_extint_get_eic_from_channel+0x48>)
   257a0:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   257a2:	230f      	movs	r3, #15
   257a4:	18fb      	adds	r3, r7, r3
   257a6:	781b      	ldrb	r3, [r3, #0]
   257a8:	009b      	lsls	r3, r3, #2
   257aa:	2210      	movs	r2, #16
   257ac:	4694      	mov	ip, r2
   257ae:	44bc      	add	ip, r7
   257b0:	4463      	add	r3, ip
   257b2:	3b08      	subs	r3, #8
   257b4:	681b      	ldr	r3, [r3, #0]
   257b6:	e000      	b.n	257ba <_extint_get_eic_from_channel+0x3e>
		return NULL;
   257b8:	2300      	movs	r3, #0
}
   257ba:	0018      	movs	r0, r3
   257bc:	46bd      	mov	sp, r7
   257be:	b004      	add	sp, #16
   257c0:	bd80      	pop	{r7, pc}
   257c2:	46c0      	nop			; (mov r8, r8)
   257c4:	40001800 	.word	0x40001800

000257c8 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   257c8:	b580      	push	{r7, lr}
   257ca:	b082      	sub	sp, #8
   257cc:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   257ce:	4b0f      	ldr	r3, [pc, #60]	; (2580c <extint_is_syncing+0x44>)
   257d0:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   257d2:	2300      	movs	r3, #0
   257d4:	607b      	str	r3, [r7, #4]
   257d6:	e011      	b.n	257fc <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   257d8:	687b      	ldr	r3, [r7, #4]
   257da:	009b      	lsls	r3, r3, #2
   257dc:	2208      	movs	r2, #8
   257de:	4694      	mov	ip, r2
   257e0:	44bc      	add	ip, r7
   257e2:	4463      	add	r3, ip
   257e4:	3b08      	subs	r3, #8
   257e6:	681b      	ldr	r3, [r3, #0]
   257e8:	785b      	ldrb	r3, [r3, #1]
   257ea:	b2db      	uxtb	r3, r3
   257ec:	b25b      	sxtb	r3, r3
   257ee:	2b00      	cmp	r3, #0
   257f0:	da01      	bge.n	257f6 <extint_is_syncing+0x2e>
			return true;
   257f2:	2301      	movs	r3, #1
   257f4:	e006      	b.n	25804 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   257f6:	687b      	ldr	r3, [r7, #4]
   257f8:	3301      	adds	r3, #1
   257fa:	607b      	str	r3, [r7, #4]
   257fc:	687b      	ldr	r3, [r7, #4]
   257fe:	2b00      	cmp	r3, #0
   25800:	d0ea      	beq.n	257d8 <extint_is_syncing+0x10>
		}
	}
	return false;
   25802:	2300      	movs	r3, #0
}
   25804:	0018      	movs	r0, r3
   25806:	46bd      	mov	sp, r7
   25808:	b002      	add	sp, #8
   2580a:	bd80      	pop	{r7, pc}
   2580c:	40001800 	.word	0x40001800

00025810 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   25810:	b580      	push	{r7, lr}
   25812:	b084      	sub	sp, #16
   25814:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   25816:	4b2d      	ldr	r3, [pc, #180]	; (258cc <_system_extint_init+0xbc>)
   25818:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
   2581a:	2140      	movs	r1, #64	; 0x40
   2581c:	2000      	movs	r0, #0
   2581e:	4b2c      	ldr	r3, [pc, #176]	; (258d0 <_system_extint_init+0xc0>)
   25820:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   25822:	003b      	movs	r3, r7
   25824:	0018      	movs	r0, r3
   25826:	4b2b      	ldr	r3, [pc, #172]	; (258d4 <_system_extint_init+0xc4>)
   25828:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   2582a:	003b      	movs	r3, r7
   2582c:	2200      	movs	r2, #0
   2582e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   25830:	003b      	movs	r3, r7
   25832:	0019      	movs	r1, r3
   25834:	2005      	movs	r0, #5
   25836:	4b28      	ldr	r3, [pc, #160]	; (258d8 <_system_extint_init+0xc8>)
   25838:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   2583a:	2005      	movs	r0, #5
   2583c:	4b27      	ldr	r3, [pc, #156]	; (258dc <_system_extint_init+0xcc>)
   2583e:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   25840:	2300      	movs	r3, #0
   25842:	60fb      	str	r3, [r7, #12]
   25844:	e018      	b.n	25878 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   25846:	68fb      	ldr	r3, [r7, #12]
   25848:	009b      	lsls	r3, r3, #2
   2584a:	2210      	movs	r2, #16
   2584c:	4694      	mov	ip, r2
   2584e:	44bc      	add	ip, r7
   25850:	4463      	add	r3, ip
   25852:	3b0c      	subs	r3, #12
   25854:	681a      	ldr	r2, [r3, #0]
   25856:	68fb      	ldr	r3, [r7, #12]
   25858:	009b      	lsls	r3, r3, #2
   2585a:	2110      	movs	r1, #16
   2585c:	468c      	mov	ip, r1
   2585e:	44bc      	add	ip, r7
   25860:	4463      	add	r3, ip
   25862:	3b0c      	subs	r3, #12
   25864:	681b      	ldr	r3, [r3, #0]
   25866:	781b      	ldrb	r3, [r3, #0]
   25868:	b2db      	uxtb	r3, r3
   2586a:	2101      	movs	r1, #1
   2586c:	430b      	orrs	r3, r1
   2586e:	b2db      	uxtb	r3, r3
   25870:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   25872:	68fb      	ldr	r3, [r7, #12]
   25874:	3301      	adds	r3, #1
   25876:	60fb      	str	r3, [r7, #12]
   25878:	68fb      	ldr	r3, [r7, #12]
   2587a:	2b00      	cmp	r3, #0
   2587c:	d0e3      	beq.n	25846 <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
   2587e:	46c0      	nop			; (mov r8, r8)
   25880:	4b17      	ldr	r3, [pc, #92]	; (258e0 <_system_extint_init+0xd0>)
   25882:	4798      	blx	r3
   25884:	1e03      	subs	r3, r0, #0
   25886:	d1fb      	bne.n	25880 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   25888:	230b      	movs	r3, #11
   2588a:	18fb      	adds	r3, r7, r3
   2588c:	2200      	movs	r2, #0
   2588e:	701a      	strb	r2, [r3, #0]
   25890:	e00d      	b.n	258ae <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
   25892:	230b      	movs	r3, #11
   25894:	18fb      	adds	r3, r7, r3
   25896:	781a      	ldrb	r2, [r3, #0]
   25898:	4b12      	ldr	r3, [pc, #72]	; (258e4 <_system_extint_init+0xd4>)
   2589a:	0092      	lsls	r2, r2, #2
   2589c:	2100      	movs	r1, #0
   2589e:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   258a0:	230b      	movs	r3, #11
   258a2:	18fb      	adds	r3, r7, r3
   258a4:	781a      	ldrb	r2, [r3, #0]
   258a6:	230b      	movs	r3, #11
   258a8:	18fb      	adds	r3, r7, r3
   258aa:	3201      	adds	r2, #1
   258ac:	701a      	strb	r2, [r3, #0]
   258ae:	230b      	movs	r3, #11
   258b0:	18fb      	adds	r3, r7, r3
   258b2:	781b      	ldrb	r3, [r3, #0]
   258b4:	2b0f      	cmp	r3, #15
   258b6:	d9ec      	bls.n	25892 <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   258b8:	2004      	movs	r0, #4
   258ba:	4b0b      	ldr	r3, [pc, #44]	; (258e8 <_system_extint_init+0xd8>)
   258bc:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   258be:	4b0b      	ldr	r3, [pc, #44]	; (258ec <_system_extint_init+0xdc>)
   258c0:	4798      	blx	r3
}
   258c2:	46c0      	nop			; (mov r8, r8)
   258c4:	46bd      	mov	sp, r7
   258c6:	b004      	add	sp, #16
   258c8:	bd80      	pop	{r7, pc}
   258ca:	46c0      	nop			; (mov r8, r8)
   258cc:	40001800 	.word	0x40001800
   258d0:	000256cd 	.word	0x000256cd
   258d4:	000256b5 	.word	0x000256b5
   258d8:	00028f3d 	.word	0x00028f3d
   258dc:	00028f81 	.word	0x00028f81
   258e0:	000257c9 	.word	0x000257c9
   258e4:	20005b88 	.word	0x20005b88
   258e8:	00025751 	.word	0x00025751
   258ec:	000258f1 	.word	0x000258f1

000258f0 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   258f0:	b580      	push	{r7, lr}
   258f2:	b082      	sub	sp, #8
   258f4:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   258f6:	4b15      	ldr	r3, [pc, #84]	; (2594c <_extint_enable+0x5c>)
   258f8:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   258fa:	2300      	movs	r3, #0
   258fc:	607b      	str	r3, [r7, #4]
   258fe:	e018      	b.n	25932 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   25900:	687b      	ldr	r3, [r7, #4]
   25902:	009b      	lsls	r3, r3, #2
   25904:	2208      	movs	r2, #8
   25906:	4694      	mov	ip, r2
   25908:	44bc      	add	ip, r7
   2590a:	4463      	add	r3, ip
   2590c:	3b08      	subs	r3, #8
   2590e:	681a      	ldr	r2, [r3, #0]
   25910:	687b      	ldr	r3, [r7, #4]
   25912:	009b      	lsls	r3, r3, #2
   25914:	2108      	movs	r1, #8
   25916:	468c      	mov	ip, r1
   25918:	44bc      	add	ip, r7
   2591a:	4463      	add	r3, ip
   2591c:	3b08      	subs	r3, #8
   2591e:	681b      	ldr	r3, [r3, #0]
   25920:	781b      	ldrb	r3, [r3, #0]
   25922:	b2db      	uxtb	r3, r3
   25924:	2102      	movs	r1, #2
   25926:	430b      	orrs	r3, r1
   25928:	b2db      	uxtb	r3, r3
   2592a:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   2592c:	687b      	ldr	r3, [r7, #4]
   2592e:	3301      	adds	r3, #1
   25930:	607b      	str	r3, [r7, #4]
   25932:	687b      	ldr	r3, [r7, #4]
   25934:	2b00      	cmp	r3, #0
   25936:	d0e3      	beq.n	25900 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   25938:	46c0      	nop			; (mov r8, r8)
   2593a:	4b05      	ldr	r3, [pc, #20]	; (25950 <_extint_enable+0x60>)
   2593c:	4798      	blx	r3
   2593e:	1e03      	subs	r3, r0, #0
   25940:	d1fb      	bne.n	2593a <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   25942:	46c0      	nop			; (mov r8, r8)
   25944:	46bd      	mov	sp, r7
   25946:	b002      	add	sp, #8
   25948:	bd80      	pop	{r7, pc}
   2594a:	46c0      	nop			; (mov r8, r8)
   2594c:	40001800 	.word	0x40001800
   25950:	000257c9 	.word	0x000257c9

00025954 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
   25954:	b580      	push	{r7, lr}
   25956:	b082      	sub	sp, #8
   25958:	af00      	add	r7, sp, #0
   2595a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   2595c:	687b      	ldr	r3, [r7, #4]
   2595e:	2200      	movs	r2, #0
   25960:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
   25962:	687b      	ldr	r3, [r7, #4]
   25964:	2200      	movs	r2, #0
   25966:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   25968:	687b      	ldr	r3, [r7, #4]
   2596a:	2201      	movs	r2, #1
   2596c:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
   2596e:	687b      	ldr	r3, [r7, #4]
   25970:	2201      	movs	r2, #1
   25972:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
   25974:	687b      	ldr	r3, [r7, #4]
   25976:	2200      	movs	r2, #0
   25978:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   2597a:	687b      	ldr	r3, [r7, #4]
   2597c:	2202      	movs	r2, #2
   2597e:	72da      	strb	r2, [r3, #11]
}
   25980:	46c0      	nop			; (mov r8, r8)
   25982:	46bd      	mov	sp, r7
   25984:	b002      	add	sp, #8
   25986:	bd80      	pop	{r7, pc}

00025988 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   25988:	b580      	push	{r7, lr}
   2598a:	b086      	sub	sp, #24
   2598c:	af00      	add	r7, sp, #0
   2598e:	0002      	movs	r2, r0
   25990:	6039      	str	r1, [r7, #0]
   25992:	1dfb      	adds	r3, r7, #7
   25994:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   25996:	2308      	movs	r3, #8
   25998:	18fb      	adds	r3, r7, r3
   2599a:	0018      	movs	r0, r3
   2599c:	4b36      	ldr	r3, [pc, #216]	; (25a78 <extint_chan_set_config+0xf0>)
   2599e:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
   259a0:	683b      	ldr	r3, [r7, #0]
   259a2:	685b      	ldr	r3, [r3, #4]
   259a4:	b2da      	uxtb	r2, r3
   259a6:	2308      	movs	r3, #8
   259a8:	18fb      	adds	r3, r7, r3
   259aa:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   259ac:	2308      	movs	r3, #8
   259ae:	18fb      	adds	r3, r7, r3
   259b0:	2200      	movs	r2, #0
   259b2:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   259b4:	683b      	ldr	r3, [r7, #0]
   259b6:	7a1a      	ldrb	r2, [r3, #8]
   259b8:	2308      	movs	r3, #8
   259ba:	18fb      	adds	r3, r7, r3
   259bc:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   259be:	683b      	ldr	r3, [r7, #0]
   259c0:	681b      	ldr	r3, [r3, #0]
   259c2:	b2db      	uxtb	r3, r3
   259c4:	2208      	movs	r2, #8
   259c6:	18ba      	adds	r2, r7, r2
   259c8:	0011      	movs	r1, r2
   259ca:	0018      	movs	r0, r3
   259cc:	4b2b      	ldr	r3, [pc, #172]	; (25a7c <extint_chan_set_config+0xf4>)
   259ce:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
   259d0:	1dfb      	adds	r3, r7, #7
   259d2:	781b      	ldrb	r3, [r3, #0]
   259d4:	0018      	movs	r0, r3
   259d6:	4b2a      	ldr	r3, [pc, #168]	; (25a80 <extint_chan_set_config+0xf8>)
   259d8:	4798      	blx	r3
   259da:	0003      	movs	r3, r0
   259dc:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
   259de:	1dfb      	adds	r3, r7, #7
   259e0:	781b      	ldrb	r3, [r3, #0]
   259e2:	2207      	movs	r2, #7
   259e4:	4013      	ands	r3, r2
   259e6:	009b      	lsls	r3, r3, #2
   259e8:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   259ea:	683b      	ldr	r3, [r7, #0]
   259ec:	7adb      	ldrb	r3, [r3, #11]
   259ee:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   259f0:	683b      	ldr	r3, [r7, #0]
   259f2:	7a9b      	ldrb	r3, [r3, #10]
   259f4:	2b00      	cmp	r3, #0
   259f6:	d003      	beq.n	25a00 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
   259f8:	697b      	ldr	r3, [r7, #20]
   259fa:	2208      	movs	r2, #8
   259fc:	4313      	orrs	r3, r2
   259fe:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
   25a00:	1dfb      	adds	r3, r7, #7
   25a02:	781b      	ldrb	r3, [r3, #0]
   25a04:	08db      	lsrs	r3, r3, #3
   25a06:	b2db      	uxtb	r3, r3
   25a08:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   25a0a:	1dfb      	adds	r3, r7, #7
   25a0c:	781b      	ldrb	r3, [r3, #0]
   25a0e:	08db      	lsrs	r3, r3, #3
   25a10:	b2db      	uxtb	r3, r3
   25a12:	001a      	movs	r2, r3
   25a14:	693b      	ldr	r3, [r7, #16]
   25a16:	3206      	adds	r2, #6
   25a18:	0092      	lsls	r2, r2, #2
   25a1a:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   25a1c:	210f      	movs	r1, #15
   25a1e:	68fa      	ldr	r2, [r7, #12]
   25a20:	4091      	lsls	r1, r2
   25a22:	000a      	movs	r2, r1
   25a24:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   25a26:	401a      	ands	r2, r3
			(new_config << config_pos);
   25a28:	6979      	ldr	r1, [r7, #20]
   25a2a:	68fb      	ldr	r3, [r7, #12]
   25a2c:	4099      	lsls	r1, r3
   25a2e:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   25a30:	431a      	orrs	r2, r3
   25a32:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   25a34:	693b      	ldr	r3, [r7, #16]
   25a36:	1d82      	adds	r2, r0, #6
   25a38:	0092      	lsls	r2, r2, #2
   25a3a:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   25a3c:	683b      	ldr	r3, [r7, #0]
   25a3e:	7a5b      	ldrb	r3, [r3, #9]
   25a40:	2b00      	cmp	r3, #0
   25a42:	d00a      	beq.n	25a5a <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   25a44:	693b      	ldr	r3, [r7, #16]
   25a46:	695a      	ldr	r2, [r3, #20]
   25a48:	1dfb      	adds	r3, r7, #7
   25a4a:	781b      	ldrb	r3, [r3, #0]
   25a4c:	2101      	movs	r1, #1
   25a4e:	4099      	lsls	r1, r3
   25a50:	000b      	movs	r3, r1
   25a52:	431a      	orrs	r2, r3
   25a54:	693b      	ldr	r3, [r7, #16]
   25a56:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
   25a58:	e00a      	b.n	25a70 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   25a5a:	693b      	ldr	r3, [r7, #16]
   25a5c:	695b      	ldr	r3, [r3, #20]
   25a5e:	1dfa      	adds	r2, r7, #7
   25a60:	7812      	ldrb	r2, [r2, #0]
   25a62:	2101      	movs	r1, #1
   25a64:	4091      	lsls	r1, r2
   25a66:	000a      	movs	r2, r1
   25a68:	43d2      	mvns	r2, r2
   25a6a:	401a      	ands	r2, r3
   25a6c:	693b      	ldr	r3, [r7, #16]
   25a6e:	615a      	str	r2, [r3, #20]
}
   25a70:	46c0      	nop			; (mov r8, r8)
   25a72:	46bd      	mov	sp, r7
   25a74:	b006      	add	sp, #24
   25a76:	bd80      	pop	{r7, pc}
   25a78:	00025729 	.word	0x00025729
   25a7c:	0002929d 	.word	0x0002929d
   25a80:	0002577d 	.word	0x0002577d

00025a84 <system_pinmux_get_config_defaults>:
{
   25a84:	b580      	push	{r7, lr}
   25a86:	b082      	sub	sp, #8
   25a88:	af00      	add	r7, sp, #0
   25a8a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   25a8c:	687b      	ldr	r3, [r7, #4]
   25a8e:	2280      	movs	r2, #128	; 0x80
   25a90:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   25a92:	687b      	ldr	r3, [r7, #4]
   25a94:	2200      	movs	r2, #0
   25a96:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   25a98:	687b      	ldr	r3, [r7, #4]
   25a9a:	2201      	movs	r2, #1
   25a9c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   25a9e:	687b      	ldr	r3, [r7, #4]
   25aa0:	2200      	movs	r2, #0
   25aa2:	70da      	strb	r2, [r3, #3]
}
   25aa4:	46c0      	nop			; (mov r8, r8)
   25aa6:	46bd      	mov	sp, r7
   25aa8:	b002      	add	sp, #8
   25aaa:	bd80      	pop	{r7, pc}

00025aac <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   25aac:	b580      	push	{r7, lr}
   25aae:	b084      	sub	sp, #16
   25ab0:	af00      	add	r7, sp, #0
   25ab2:	0002      	movs	r2, r0
   25ab4:	6039      	str	r1, [r7, #0]
   25ab6:	1dfb      	adds	r3, r7, #7
   25ab8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   25aba:	230c      	movs	r3, #12
   25abc:	18fb      	adds	r3, r7, r3
   25abe:	0018      	movs	r0, r3
   25ac0:	4b10      	ldr	r3, [pc, #64]	; (25b04 <port_pin_set_config+0x58>)
   25ac2:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   25ac4:	230c      	movs	r3, #12
   25ac6:	18fb      	adds	r3, r7, r3
   25ac8:	2280      	movs	r2, #128	; 0x80
   25aca:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   25acc:	683b      	ldr	r3, [r7, #0]
   25ace:	781a      	ldrb	r2, [r3, #0]
   25ad0:	230c      	movs	r3, #12
   25ad2:	18fb      	adds	r3, r7, r3
   25ad4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   25ad6:	683b      	ldr	r3, [r7, #0]
   25ad8:	785a      	ldrb	r2, [r3, #1]
   25ada:	230c      	movs	r3, #12
   25adc:	18fb      	adds	r3, r7, r3
   25ade:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   25ae0:	683b      	ldr	r3, [r7, #0]
   25ae2:	789a      	ldrb	r2, [r3, #2]
   25ae4:	230c      	movs	r3, #12
   25ae6:	18fb      	adds	r3, r7, r3
   25ae8:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   25aea:	230c      	movs	r3, #12
   25aec:	18fa      	adds	r2, r7, r3
   25aee:	1dfb      	adds	r3, r7, #7
   25af0:	781b      	ldrb	r3, [r3, #0]
   25af2:	0011      	movs	r1, r2
   25af4:	0018      	movs	r0, r3
   25af6:	4b04      	ldr	r3, [pc, #16]	; (25b08 <port_pin_set_config+0x5c>)
   25af8:	4798      	blx	r3
}
   25afa:	46c0      	nop			; (mov r8, r8)
   25afc:	46bd      	mov	sp, r7
   25afe:	b004      	add	sp, #16
   25b00:	bd80      	pop	{r7, pc}
   25b02:	46c0      	nop			; (mov r8, r8)
   25b04:	00025a85 	.word	0x00025a85
   25b08:	0002929d 	.word	0x0002929d

00025b0c <system_gclk_chan_get_config_defaults>:
{
   25b0c:	b580      	push	{r7, lr}
   25b0e:	b082      	sub	sp, #8
   25b10:	af00      	add	r7, sp, #0
   25b12:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   25b14:	687b      	ldr	r3, [r7, #4]
   25b16:	2200      	movs	r2, #0
   25b18:	701a      	strb	r2, [r3, #0]
}
   25b1a:	46c0      	nop			; (mov r8, r8)
   25b1c:	46bd      	mov	sp, r7
   25b1e:	b002      	add	sp, #8
   25b20:	bd80      	pop	{r7, pc}
	...

00025b24 <system_apb_clock_set_mask>:
{
   25b24:	b580      	push	{r7, lr}
   25b26:	b082      	sub	sp, #8
   25b28:	af00      	add	r7, sp, #0
   25b2a:	0002      	movs	r2, r0
   25b2c:	6039      	str	r1, [r7, #0]
   25b2e:	1dfb      	adds	r3, r7, #7
   25b30:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   25b32:	1dfb      	adds	r3, r7, #7
   25b34:	781b      	ldrb	r3, [r3, #0]
   25b36:	2b01      	cmp	r3, #1
   25b38:	d00a      	beq.n	25b50 <system_apb_clock_set_mask+0x2c>
   25b3a:	2b02      	cmp	r3, #2
   25b3c:	d00f      	beq.n	25b5e <system_apb_clock_set_mask+0x3a>
   25b3e:	2b00      	cmp	r3, #0
   25b40:	d114      	bne.n	25b6c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   25b42:	4b0e      	ldr	r3, [pc, #56]	; (25b7c <system_apb_clock_set_mask+0x58>)
   25b44:	4a0d      	ldr	r2, [pc, #52]	; (25b7c <system_apb_clock_set_mask+0x58>)
   25b46:	6991      	ldr	r1, [r2, #24]
   25b48:	683a      	ldr	r2, [r7, #0]
   25b4a:	430a      	orrs	r2, r1
   25b4c:	619a      	str	r2, [r3, #24]
			break;
   25b4e:	e00f      	b.n	25b70 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   25b50:	4b0a      	ldr	r3, [pc, #40]	; (25b7c <system_apb_clock_set_mask+0x58>)
   25b52:	4a0a      	ldr	r2, [pc, #40]	; (25b7c <system_apb_clock_set_mask+0x58>)
   25b54:	69d1      	ldr	r1, [r2, #28]
   25b56:	683a      	ldr	r2, [r7, #0]
   25b58:	430a      	orrs	r2, r1
   25b5a:	61da      	str	r2, [r3, #28]
			break;
   25b5c:	e008      	b.n	25b70 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   25b5e:	4b07      	ldr	r3, [pc, #28]	; (25b7c <system_apb_clock_set_mask+0x58>)
   25b60:	4a06      	ldr	r2, [pc, #24]	; (25b7c <system_apb_clock_set_mask+0x58>)
   25b62:	6a11      	ldr	r1, [r2, #32]
   25b64:	683a      	ldr	r2, [r7, #0]
   25b66:	430a      	orrs	r2, r1
   25b68:	621a      	str	r2, [r3, #32]
			break;
   25b6a:	e001      	b.n	25b70 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   25b6c:	2317      	movs	r3, #23
   25b6e:	e000      	b.n	25b72 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   25b70:	2300      	movs	r3, #0
}
   25b72:	0018      	movs	r0, r3
   25b74:	46bd      	mov	sp, r7
   25b76:	b002      	add	sp, #8
   25b78:	bd80      	pop	{r7, pc}
   25b7a:	46c0      	nop			; (mov r8, r8)
   25b7c:	40000400 	.word	0x40000400

00025b80 <system_interrupt_enable>:
{
   25b80:	b580      	push	{r7, lr}
   25b82:	b082      	sub	sp, #8
   25b84:	af00      	add	r7, sp, #0
   25b86:	0002      	movs	r2, r0
   25b88:	1dfb      	adds	r3, r7, #7
   25b8a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   25b8c:	4b06      	ldr	r3, [pc, #24]	; (25ba8 <system_interrupt_enable+0x28>)
   25b8e:	1dfa      	adds	r2, r7, #7
   25b90:	7812      	ldrb	r2, [r2, #0]
   25b92:	0011      	movs	r1, r2
   25b94:	221f      	movs	r2, #31
   25b96:	400a      	ands	r2, r1
   25b98:	2101      	movs	r1, #1
   25b9a:	4091      	lsls	r1, r2
   25b9c:	000a      	movs	r2, r1
   25b9e:	601a      	str	r2, [r3, #0]
}
   25ba0:	46c0      	nop			; (mov r8, r8)
   25ba2:	46bd      	mov	sp, r7
   25ba4:	b002      	add	sp, #8
   25ba6:	bd80      	pop	{r7, pc}
   25ba8:	e000e100 	.word	0xe000e100

00025bac <system_interrupt_disable>:
{
   25bac:	b580      	push	{r7, lr}
   25bae:	b082      	sub	sp, #8
   25bb0:	af00      	add	r7, sp, #0
   25bb2:	0002      	movs	r2, r0
   25bb4:	1dfb      	adds	r3, r7, #7
   25bb6:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   25bb8:	4a07      	ldr	r2, [pc, #28]	; (25bd8 <system_interrupt_disable+0x2c>)
   25bba:	1dfb      	adds	r3, r7, #7
   25bbc:	781b      	ldrb	r3, [r3, #0]
   25bbe:	0019      	movs	r1, r3
   25bc0:	231f      	movs	r3, #31
   25bc2:	400b      	ands	r3, r1
   25bc4:	2101      	movs	r1, #1
   25bc6:	4099      	lsls	r1, r3
   25bc8:	000b      	movs	r3, r1
   25bca:	0019      	movs	r1, r3
   25bcc:	2380      	movs	r3, #128	; 0x80
   25bce:	50d1      	str	r1, [r2, r3]
}
   25bd0:	46c0      	nop			; (mov r8, r8)
   25bd2:	46bd      	mov	sp, r7
   25bd4:	b002      	add	sp, #8
   25bd6:	bd80      	pop	{r7, pc}
   25bd8:	e000e100 	.word	0xe000e100

00025bdc <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
   25bdc:	b580      	push	{r7, lr}
   25bde:	b084      	sub	sp, #16
   25be0:	af00      	add	r7, sp, #0
   25be2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   25be4:	687b      	ldr	r3, [r7, #4]
   25be6:	681b      	ldr	r3, [r3, #0]
   25be8:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   25bea:	68fb      	ldr	r3, [r7, #12]
   25bec:	7a9b      	ldrb	r3, [r3, #10]
   25bee:	b2db      	uxtb	r3, r3
   25bf0:	b25b      	sxtb	r3, r3
   25bf2:	2b00      	cmp	r3, #0
   25bf4:	da01      	bge.n	25bfa <rtc_calendar_is_syncing+0x1e>
                return true;
   25bf6:	2301      	movs	r3, #1
   25bf8:	e000      	b.n	25bfc <rtc_calendar_is_syncing+0x20>
        }

        return false;
   25bfa:	2300      	movs	r3, #0
}
   25bfc:	0018      	movs	r0, r3
   25bfe:	46bd      	mov	sp, r7
   25c00:	b004      	add	sp, #16
   25c02:	bd80      	pop	{r7, pc}

00025c04 <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
   25c04:	b580      	push	{r7, lr}
   25c06:	b084      	sub	sp, #16
   25c08:	af00      	add	r7, sp, #0
   25c0a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   25c0c:	687b      	ldr	r3, [r7, #4]
   25c0e:	681b      	ldr	r3, [r3, #0]
   25c10:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
   25c12:	2003      	movs	r0, #3
   25c14:	4b0a      	ldr	r3, [pc, #40]	; (25c40 <rtc_calendar_enable+0x3c>)
   25c16:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   25c18:	46c0      	nop			; (mov r8, r8)
   25c1a:	687b      	ldr	r3, [r7, #4]
   25c1c:	0018      	movs	r0, r3
   25c1e:	4b09      	ldr	r3, [pc, #36]	; (25c44 <rtc_calendar_enable+0x40>)
   25c20:	4798      	blx	r3
   25c22:	1e03      	subs	r3, r0, #0
   25c24:	d1f9      	bne.n	25c1a <rtc_calendar_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
   25c26:	68fb      	ldr	r3, [r7, #12]
   25c28:	881b      	ldrh	r3, [r3, #0]
   25c2a:	b29b      	uxth	r3, r3
   25c2c:	2202      	movs	r2, #2
   25c2e:	4313      	orrs	r3, r2
   25c30:	b29a      	uxth	r2, r3
   25c32:	68fb      	ldr	r3, [r7, #12]
   25c34:	801a      	strh	r2, [r3, #0]
}
   25c36:	46c0      	nop			; (mov r8, r8)
   25c38:	46bd      	mov	sp, r7
   25c3a:	b004      	add	sp, #16
   25c3c:	bd80      	pop	{r7, pc}
   25c3e:	46c0      	nop			; (mov r8, r8)
   25c40:	00025b81 	.word	0x00025b81
   25c44:	00025bdd 	.word	0x00025bdd

00025c48 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
   25c48:	b580      	push	{r7, lr}
   25c4a:	b084      	sub	sp, #16
   25c4c:	af00      	add	r7, sp, #0
   25c4e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   25c50:	687b      	ldr	r3, [r7, #4]
   25c52:	681b      	ldr	r3, [r3, #0]
   25c54:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
   25c56:	2003      	movs	r0, #3
   25c58:	4b0d      	ldr	r3, [pc, #52]	; (25c90 <rtc_calendar_disable+0x48>)
   25c5a:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   25c5c:	46c0      	nop			; (mov r8, r8)
   25c5e:	687b      	ldr	r3, [r7, #4]
   25c60:	0018      	movs	r0, r3
   25c62:	4b0c      	ldr	r3, [pc, #48]	; (25c94 <rtc_calendar_disable+0x4c>)
   25c64:	4798      	blx	r3
   25c66:	1e03      	subs	r3, r0, #0
   25c68:	d1f9      	bne.n	25c5e <rtc_calendar_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
   25c6a:	68fb      	ldr	r3, [r7, #12]
   25c6c:	22c1      	movs	r2, #193	; 0xc1
   25c6e:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
   25c70:	68fb      	ldr	r3, [r7, #12]
   25c72:	22c1      	movs	r2, #193	; 0xc1
   25c74:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
   25c76:	68fb      	ldr	r3, [r7, #12]
   25c78:	881b      	ldrh	r3, [r3, #0]
   25c7a:	b29b      	uxth	r3, r3
   25c7c:	2202      	movs	r2, #2
   25c7e:	4393      	bics	r3, r2
   25c80:	b29a      	uxth	r2, r3
   25c82:	68fb      	ldr	r3, [r7, #12]
   25c84:	801a      	strh	r2, [r3, #0]
}
   25c86:	46c0      	nop			; (mov r8, r8)
   25c88:	46bd      	mov	sp, r7
   25c8a:	b004      	add	sp, #16
   25c8c:	bd80      	pop	{r7, pc}
   25c8e:	46c0      	nop			; (mov r8, r8)
   25c90:	00025bad 	.word	0x00025bad
   25c94:	00025bdd 	.word	0x00025bdd

00025c98 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
   25c98:	b580      	push	{r7, lr}
   25c9a:	b084      	sub	sp, #16
   25c9c:	af00      	add	r7, sp, #0
   25c9e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   25ca0:	687b      	ldr	r3, [r7, #4]
   25ca2:	681b      	ldr	r3, [r3, #0]
   25ca4:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
   25ca6:	687b      	ldr	r3, [r7, #4]
   25ca8:	0018      	movs	r0, r3
   25caa:	4b0d      	ldr	r3, [pc, #52]	; (25ce0 <rtc_calendar_reset+0x48>)
   25cac:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
   25cae:	687b      	ldr	r3, [r7, #4]
   25cb0:	2200      	movs	r2, #0
   25cb2:	821a      	strh	r2, [r3, #16]
	module->enabled_callback    = 0;
   25cb4:	687b      	ldr	r3, [r7, #4]
   25cb6:	2200      	movs	r2, #0
   25cb8:	825a      	strh	r2, [r3, #18]
#endif

	while (rtc_calendar_is_syncing(module)) {
   25cba:	46c0      	nop			; (mov r8, r8)
   25cbc:	687b      	ldr	r3, [r7, #4]
   25cbe:	0018      	movs	r0, r3
   25cc0:	4b08      	ldr	r3, [pc, #32]	; (25ce4 <rtc_calendar_reset+0x4c>)
   25cc2:	4798      	blx	r3
   25cc4:	1e03      	subs	r3, r0, #0
   25cc6:	d1f9      	bne.n	25cbc <rtc_calendar_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
   25cc8:	68fb      	ldr	r3, [r7, #12]
   25cca:	881b      	ldrh	r3, [r3, #0]
   25ccc:	b29b      	uxth	r3, r3
   25cce:	2201      	movs	r2, #1
   25cd0:	4313      	orrs	r3, r2
   25cd2:	b29a      	uxth	r2, r3
   25cd4:	68fb      	ldr	r3, [r7, #12]
   25cd6:	801a      	strh	r2, [r3, #0]
}
   25cd8:	46c0      	nop			; (mov r8, r8)
   25cda:	46bd      	mov	sp, r7
   25cdc:	b004      	add	sp, #16
   25cde:	bd80      	pop	{r7, pc}
   25ce0:	00025c49 	.word	0x00025c49
   25ce4:	00025bdd 	.word	0x00025bdd

00025ce8 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
   25ce8:	b580      	push	{r7, lr}
   25cea:	b084      	sub	sp, #16
   25cec:	af00      	add	r7, sp, #0
   25cee:	6078      	str	r0, [r7, #4]
   25cf0:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
   25cf2:	683b      	ldr	r3, [r7, #0]
   25cf4:	88db      	ldrh	r3, [r3, #6]
   25cf6:	001a      	movs	r2, r3
   25cf8:	687b      	ldr	r3, [r7, #4]
   25cfa:	88db      	ldrh	r3, [r3, #6]
   25cfc:	1ad3      	subs	r3, r2, r3
   25cfe:	069b      	lsls	r3, r3, #26
   25d00:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
   25d02:	683b      	ldr	r3, [r7, #0]
   25d04:	795b      	ldrb	r3, [r3, #5]
   25d06:	059b      	lsls	r3, r3, #22
   25d08:	001a      	movs	r2, r3
   25d0a:	68fb      	ldr	r3, [r7, #12]
   25d0c:	4313      	orrs	r3, r2
   25d0e:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
   25d10:	683b      	ldr	r3, [r7, #0]
   25d12:	791b      	ldrb	r3, [r3, #4]
   25d14:	045b      	lsls	r3, r3, #17
   25d16:	001a      	movs	r2, r3
   25d18:	68fb      	ldr	r3, [r7, #12]
   25d1a:	4313      	orrs	r3, r2
   25d1c:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
   25d1e:	683b      	ldr	r3, [r7, #0]
   25d20:	789b      	ldrb	r3, [r3, #2]
   25d22:	031b      	lsls	r3, r3, #12
   25d24:	001a      	movs	r2, r3
   25d26:	68fb      	ldr	r3, [r7, #12]
   25d28:	4313      	orrs	r3, r2
   25d2a:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
   25d2c:	687b      	ldr	r3, [r7, #4]
   25d2e:	791b      	ldrb	r3, [r3, #4]
   25d30:	2201      	movs	r2, #1
   25d32:	4053      	eors	r3, r2
   25d34:	b2db      	uxtb	r3, r3
   25d36:	2b00      	cmp	r3, #0
   25d38:	d008      	beq.n	25d4c <rtc_calendar_time_to_register_value+0x64>
   25d3a:	683b      	ldr	r3, [r7, #0]
   25d3c:	78db      	ldrb	r3, [r3, #3]
   25d3e:	2b00      	cmp	r3, #0
   25d40:	d004      	beq.n	25d4c <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
   25d42:	68fb      	ldr	r3, [r7, #12]
   25d44:	2280      	movs	r2, #128	; 0x80
   25d46:	0252      	lsls	r2, r2, #9
   25d48:	4313      	orrs	r3, r2
   25d4a:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
   25d4c:	683b      	ldr	r3, [r7, #0]
   25d4e:	785b      	ldrb	r3, [r3, #1]
   25d50:	019b      	lsls	r3, r3, #6
   25d52:	001a      	movs	r2, r3
   25d54:	68fb      	ldr	r3, [r7, #12]
   25d56:	4313      	orrs	r3, r2
   25d58:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
   25d5a:	683b      	ldr	r3, [r7, #0]
   25d5c:	781b      	ldrb	r3, [r3, #0]
   25d5e:	001a      	movs	r2, r3
   25d60:	68fb      	ldr	r3, [r7, #12]
   25d62:	4313      	orrs	r3, r2
   25d64:	60fb      	str	r3, [r7, #12]

	return register_value;
   25d66:	68fb      	ldr	r3, [r7, #12]
}
   25d68:	0018      	movs	r0, r3
   25d6a:	46bd      	mov	sp, r7
   25d6c:	b004      	add	sp, #16
   25d6e:	bd80      	pop	{r7, pc}

00025d70 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
   25d70:	b580      	push	{r7, lr}
   25d72:	b084      	sub	sp, #16
   25d74:	af00      	add	r7, sp, #0
   25d76:	60f8      	str	r0, [r7, #12]
   25d78:	60b9      	str	r1, [r7, #8]
   25d7a:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   25d7c:	68bb      	ldr	r3, [r7, #8]
   25d7e:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
   25d80:	b29a      	uxth	r2, r3
   25d82:	68fb      	ldr	r3, [r7, #12]
   25d84:	88db      	ldrh	r3, [r3, #6]
   25d86:	18d3      	adds	r3, r2, r3
   25d88:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   25d8a:	687b      	ldr	r3, [r7, #4]
   25d8c:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
   25d8e:	68bb      	ldr	r3, [r7, #8]
   25d90:	0d9b      	lsrs	r3, r3, #22
   25d92:	b2db      	uxtb	r3, r3
   25d94:	220f      	movs	r2, #15
   25d96:	4013      	ands	r3, r2
   25d98:	b2da      	uxtb	r2, r3
   25d9a:	687b      	ldr	r3, [r7, #4]
   25d9c:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
   25d9e:	68bb      	ldr	r3, [r7, #8]
   25da0:	0c5b      	lsrs	r3, r3, #17
   25da2:	b2db      	uxtb	r3, r3
   25da4:	221f      	movs	r2, #31
   25da6:	4013      	ands	r3, r2
   25da8:	b2da      	uxtb	r2, r3
   25daa:	687b      	ldr	r3, [r7, #4]
   25dac:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
   25dae:	68fb      	ldr	r3, [r7, #12]
   25db0:	791b      	ldrb	r3, [r3, #4]
   25db2:	2b00      	cmp	r3, #0
   25db4:	d008      	beq.n	25dc8 <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
   25db6:	68bb      	ldr	r3, [r7, #8]
   25db8:	0b1b      	lsrs	r3, r3, #12
   25dba:	b2db      	uxtb	r3, r3
   25dbc:	221f      	movs	r2, #31
   25dbe:	4013      	ands	r3, r2
   25dc0:	b2da      	uxtb	r2, r3
   25dc2:	687b      	ldr	r3, [r7, #4]
   25dc4:	709a      	strb	r2, [r3, #2]
   25dc6:	e010      	b.n	25dea <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
   25dc8:	68bb      	ldr	r3, [r7, #8]
   25dca:	0b1b      	lsrs	r3, r3, #12
   25dcc:	b2db      	uxtb	r3, r3
   25dce:	220f      	movs	r2, #15
   25dd0:	4013      	ands	r3, r2
   25dd2:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
   25dd4:	687b      	ldr	r3, [r7, #4]
   25dd6:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
   25dd8:	68ba      	ldr	r2, [r7, #8]
   25dda:	2380      	movs	r3, #128	; 0x80
   25ddc:	025b      	lsls	r3, r3, #9
   25dde:	4013      	ands	r3, r2
   25de0:	1e5a      	subs	r2, r3, #1
   25de2:	4193      	sbcs	r3, r2
   25de4:	b2da      	uxtb	r2, r3
   25de6:	687b      	ldr	r3, [r7, #4]
   25de8:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
   25dea:	68bb      	ldr	r3, [r7, #8]
   25dec:	099b      	lsrs	r3, r3, #6
   25dee:	b2db      	uxtb	r3, r3
   25df0:	223f      	movs	r2, #63	; 0x3f
   25df2:	4013      	ands	r3, r2
   25df4:	b2da      	uxtb	r2, r3
   25df6:	687b      	ldr	r3, [r7, #4]
   25df8:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
   25dfa:	68bb      	ldr	r3, [r7, #8]
   25dfc:	b2db      	uxtb	r3, r3
   25dfe:	223f      	movs	r2, #63	; 0x3f
   25e00:	4013      	ands	r3, r2
   25e02:	b2da      	uxtb	r2, r3
   25e04:	687b      	ldr	r3, [r7, #4]
   25e06:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
   25e08:	46c0      	nop			; (mov r8, r8)
   25e0a:	46bd      	mov	sp, r7
   25e0c:	b004      	add	sp, #16
   25e0e:	bd80      	pop	{r7, pc}

00025e10 <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
   25e10:	b580      	push	{r7, lr}
   25e12:	b084      	sub	sp, #16
   25e14:	af00      	add	r7, sp, #0
   25e16:	6078      	str	r0, [r7, #4]
   25e18:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   25e1a:	687b      	ldr	r3, [r7, #4]
   25e1c:	681b      	ldr	r3, [r3, #0]
   25e1e:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
   25e20:	683b      	ldr	r3, [r7, #0]
   25e22:	881a      	ldrh	r2, [r3, #0]
   25e24:	230e      	movs	r3, #14
   25e26:	18fb      	adds	r3, r7, r3
   25e28:	2108      	movs	r1, #8
   25e2a:	430a      	orrs	r2, r1
   25e2c:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
   25e2e:	683b      	ldr	r3, [r7, #0]
   25e30:	791b      	ldrb	r3, [r3, #4]
   25e32:	2201      	movs	r2, #1
   25e34:	4053      	eors	r3, r2
   25e36:	b2db      	uxtb	r3, r3
   25e38:	2b00      	cmp	r3, #0
   25e3a:	d007      	beq.n	25e4c <_rtc_calendar_set_config+0x3c>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
   25e3c:	230e      	movs	r3, #14
   25e3e:	18fb      	adds	r3, r7, r3
   25e40:	220e      	movs	r2, #14
   25e42:	18ba      	adds	r2, r7, r2
   25e44:	8812      	ldrh	r2, [r2, #0]
   25e46:	2140      	movs	r1, #64	; 0x40
   25e48:	430a      	orrs	r2, r1
   25e4a:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
   25e4c:	683b      	ldr	r3, [r7, #0]
   25e4e:	789b      	ldrb	r3, [r3, #2]
   25e50:	2b00      	cmp	r3, #0
   25e52:	d007      	beq.n	25e64 <_rtc_calendar_set_config+0x54>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
   25e54:	230e      	movs	r3, #14
   25e56:	18fb      	adds	r3, r7, r3
   25e58:	220e      	movs	r2, #14
   25e5a:	18ba      	adds	r2, r7, r2
   25e5c:	8812      	ldrh	r2, [r2, #0]
   25e5e:	2180      	movs	r1, #128	; 0x80
   25e60:	430a      	orrs	r2, r1
   25e62:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
   25e64:	68bb      	ldr	r3, [r7, #8]
   25e66:	220e      	movs	r2, #14
   25e68:	18ba      	adds	r2, r7, r2
   25e6a:	8812      	ldrh	r2, [r2, #0]
   25e6c:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
   25e6e:	683b      	ldr	r3, [r7, #0]
   25e70:	78db      	ldrb	r3, [r3, #3]
   25e72:	2b00      	cmp	r3, #0
   25e74:	d008      	beq.n	25e88 <_rtc_calendar_set_config+0x78>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
   25e76:	68bb      	ldr	r3, [r7, #8]
   25e78:	885b      	ldrh	r3, [r3, #2]
   25e7a:	b29b      	uxth	r3, r3
   25e7c:	2280      	movs	r2, #128	; 0x80
   25e7e:	01d2      	lsls	r2, r2, #7
   25e80:	4313      	orrs	r3, r2
   25e82:	b29a      	uxth	r2, r3
   25e84:	68bb      	ldr	r3, [r7, #8]
   25e86:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   25e88:	230d      	movs	r3, #13
   25e8a:	18fb      	adds	r3, r7, r3
   25e8c:	2200      	movs	r2, #0
   25e8e:	701a      	strb	r2, [r3, #0]
   25e90:	e017      	b.n	25ec2 <_rtc_calendar_set_config+0xb2>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
   25e92:	230d      	movs	r3, #13
   25e94:	18fb      	adds	r3, r7, r3
   25e96:	781a      	ldrb	r2, [r3, #0]
   25e98:	0013      	movs	r3, r2
   25e9a:	009b      	lsls	r3, r3, #2
   25e9c:	189b      	adds	r3, r3, r2
   25e9e:	005b      	lsls	r3, r3, #1
   25ea0:	3308      	adds	r3, #8
   25ea2:	683a      	ldr	r2, [r7, #0]
   25ea4:	18d1      	adds	r1, r2, r3
   25ea6:	230d      	movs	r3, #13
   25ea8:	18fb      	adds	r3, r7, r3
   25eaa:	781a      	ldrb	r2, [r3, #0]
   25eac:	687b      	ldr	r3, [r7, #4]
   25eae:	0018      	movs	r0, r3
   25eb0:	4b08      	ldr	r3, [pc, #32]	; (25ed4 <_rtc_calendar_set_config+0xc4>)
   25eb2:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   25eb4:	230d      	movs	r3, #13
   25eb6:	18fb      	adds	r3, r7, r3
   25eb8:	781a      	ldrb	r2, [r3, #0]
   25eba:	230d      	movs	r3, #13
   25ebc:	18fb      	adds	r3, r7, r3
   25ebe:	3201      	adds	r2, #1
   25ec0:	701a      	strb	r2, [r3, #0]
   25ec2:	230d      	movs	r3, #13
   25ec4:	18fb      	adds	r3, r7, r3
   25ec6:	781b      	ldrb	r3, [r3, #0]
   25ec8:	2b00      	cmp	r3, #0
   25eca:	d0e2      	beq.n	25e92 <_rtc_calendar_set_config+0x82>
	}
}
   25ecc:	46c0      	nop			; (mov r8, r8)
   25ece:	46bd      	mov	sp, r7
   25ed0:	b004      	add	sp, #16
   25ed2:	bd80      	pop	{r7, pc}
   25ed4:	00025ff9 	.word	0x00025ff9

00025ed8 <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
   25ed8:	b580      	push	{r7, lr}
   25eda:	b086      	sub	sp, #24
   25edc:	af00      	add	r7, sp, #0
   25ede:	60f8      	str	r0, [r7, #12]
   25ee0:	60b9      	str	r1, [r7, #8]
   25ee2:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   25ee4:	68fb      	ldr	r3, [r7, #12]
   25ee6:	68ba      	ldr	r2, [r7, #8]
   25ee8:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
   25eea:	2120      	movs	r1, #32
   25eec:	2000      	movs	r0, #0
   25eee:	4b18      	ldr	r3, [pc, #96]	; (25f50 <rtc_calendar_init+0x78>)
   25ef0:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   25ef2:	2314      	movs	r3, #20
   25ef4:	18fb      	adds	r3, r7, r3
   25ef6:	0018      	movs	r0, r3
   25ef8:	4b16      	ldr	r3, [pc, #88]	; (25f54 <rtc_calendar_init+0x7c>)
   25efa:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
   25efc:	2314      	movs	r3, #20
   25efe:	18fb      	adds	r3, r7, r3
   25f00:	2202      	movs	r2, #2
   25f02:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
   25f04:	2314      	movs	r3, #20
   25f06:	18fb      	adds	r3, r7, r3
   25f08:	0019      	movs	r1, r3
   25f0a:	2004      	movs	r0, #4
   25f0c:	4b12      	ldr	r3, [pc, #72]	; (25f58 <rtc_calendar_init+0x80>)
   25f0e:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
   25f10:	2004      	movs	r0, #4
   25f12:	4b12      	ldr	r3, [pc, #72]	; (25f5c <rtc_calendar_init+0x84>)
   25f14:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
   25f16:	68fb      	ldr	r3, [r7, #12]
   25f18:	0018      	movs	r0, r3
   25f1a:	4b11      	ldr	r3, [pc, #68]	; (25f60 <rtc_calendar_init+0x88>)
   25f1c:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
   25f1e:	687b      	ldr	r3, [r7, #4]
   25f20:	791a      	ldrb	r2, [r3, #4]
   25f22:	68fb      	ldr	r3, [r7, #12]
   25f24:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
   25f26:	687b      	ldr	r3, [r7, #4]
   25f28:	78da      	ldrb	r2, [r3, #3]
   25f2a:	68fb      	ldr	r3, [r7, #12]
   25f2c:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
   25f2e:	687b      	ldr	r3, [r7, #4]
   25f30:	88da      	ldrh	r2, [r3, #6]
   25f32:	68fb      	ldr	r3, [r7, #12]
   25f34:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
   25f36:	4b0b      	ldr	r3, [pc, #44]	; (25f64 <rtc_calendar_init+0x8c>)
   25f38:	68fa      	ldr	r2, [r7, #12]
   25f3a:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
   25f3c:	687a      	ldr	r2, [r7, #4]
   25f3e:	68fb      	ldr	r3, [r7, #12]
   25f40:	0011      	movs	r1, r2
   25f42:	0018      	movs	r0, r3
   25f44:	4b08      	ldr	r3, [pc, #32]	; (25f68 <rtc_calendar_init+0x90>)
   25f46:	4798      	blx	r3
}
   25f48:	46c0      	nop			; (mov r8, r8)
   25f4a:	46bd      	mov	sp, r7
   25f4c:	b006      	add	sp, #24
   25f4e:	bd80      	pop	{r7, pc}
   25f50:	00025b25 	.word	0x00025b25
   25f54:	00025b0d 	.word	0x00025b0d
   25f58:	00028f3d 	.word	0x00028f3d
   25f5c:	00028f81 	.word	0x00028f81
   25f60:	00025c99 	.word	0x00025c99
   25f64:	20005bc8 	.word	0x20005bc8
   25f68:	00025e11 	.word	0x00025e11

00025f6c <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
   25f6c:	b580      	push	{r7, lr}
   25f6e:	b084      	sub	sp, #16
   25f70:	af00      	add	r7, sp, #0
   25f72:	6078      	str	r0, [r7, #4]
   25f74:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   25f76:	687b      	ldr	r3, [r7, #4]
   25f78:	681b      	ldr	r3, [r3, #0]
   25f7a:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
   25f7c:	687b      	ldr	r3, [r7, #4]
   25f7e:	795b      	ldrb	r3, [r3, #5]
   25f80:	2201      	movs	r2, #1
   25f82:	4053      	eors	r3, r2
   25f84:	b2db      	uxtb	r3, r3
   25f86:	2b00      	cmp	r3, #0
   25f88:	d00a      	beq.n	25fa0 <rtc_calendar_get_time+0x34>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
   25f8a:	68fb      	ldr	r3, [r7, #12]
   25f8c:	4a16      	ldr	r2, [pc, #88]	; (25fe8 <rtc_calendar_get_time+0x7c>)
   25f8e:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
   25f90:	46c0      	nop			; (mov r8, r8)
   25f92:	687b      	ldr	r3, [r7, #4]
   25f94:	0018      	movs	r0, r3
   25f96:	4b15      	ldr	r3, [pc, #84]	; (25fec <rtc_calendar_get_time+0x80>)
   25f98:	4798      	blx	r3
   25f9a:	1e03      	subs	r3, r0, #0
   25f9c:	d1f9      	bne.n	25f92 <rtc_calendar_get_time+0x26>
   25f9e:	e016      	b.n	25fce <rtc_calendar_get_time+0x62>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
   25fa0:	68fb      	ldr	r3, [r7, #12]
   25fa2:	885b      	ldrh	r3, [r3, #2]
   25fa4:	b29b      	uxth	r3, r3
   25fa6:	001a      	movs	r2, r3
   25fa8:	2380      	movs	r3, #128	; 0x80
   25faa:	01db      	lsls	r3, r3, #7
   25fac:	4013      	ands	r3, r2
   25fae:	d10e      	bne.n	25fce <rtc_calendar_get_time+0x62>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
   25fb0:	68fb      	ldr	r3, [r7, #12]
   25fb2:	885b      	ldrh	r3, [r3, #2]
   25fb4:	b29b      	uxth	r3, r3
   25fb6:	4a0e      	ldr	r2, [pc, #56]	; (25ff0 <rtc_calendar_get_time+0x84>)
   25fb8:	4313      	orrs	r3, r2
   25fba:	b29a      	uxth	r2, r3
   25fbc:	68fb      	ldr	r3, [r7, #12]
   25fbe:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
   25fc0:	46c0      	nop			; (mov r8, r8)
   25fc2:	687b      	ldr	r3, [r7, #4]
   25fc4:	0018      	movs	r0, r3
   25fc6:	4b09      	ldr	r3, [pc, #36]	; (25fec <rtc_calendar_get_time+0x80>)
   25fc8:	4798      	blx	r3
   25fca:	1e03      	subs	r3, r0, #0
   25fcc:	d1f9      	bne.n	25fc2 <rtc_calendar_get_time+0x56>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
   25fce:	68fb      	ldr	r3, [r7, #12]
   25fd0:	691b      	ldr	r3, [r3, #16]
   25fd2:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
   25fd4:	683a      	ldr	r2, [r7, #0]
   25fd6:	68b9      	ldr	r1, [r7, #8]
   25fd8:	687b      	ldr	r3, [r7, #4]
   25fda:	0018      	movs	r0, r3
   25fdc:	4b05      	ldr	r3, [pc, #20]	; (25ff4 <rtc_calendar_get_time+0x88>)
   25fde:	4798      	blx	r3
}
   25fe0:	46c0      	nop			; (mov r8, r8)
   25fe2:	46bd      	mov	sp, r7
   25fe4:	b004      	add	sp, #16
   25fe6:	bd80      	pop	{r7, pc}
   25fe8:	ffff8000 	.word	0xffff8000
   25fec:	00025bdd 	.word	0x00025bdd
   25ff0:	ffffc000 	.word	0xffffc000
   25ff4:	00025d71 	.word	0x00025d71

00025ff8 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
   25ff8:	b580      	push	{r7, lr}
   25ffa:	b086      	sub	sp, #24
   25ffc:	af00      	add	r7, sp, #0
   25ffe:	60f8      	str	r0, [r7, #12]
   26000:	60b9      	str	r1, [r7, #8]
   26002:	1dfb      	adds	r3, r7, #7
   26004:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26006:	68fb      	ldr	r3, [r7, #12]
   26008:	681b      	ldr	r3, [r3, #0]
   2600a:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
   2600c:	1dfb      	adds	r3, r7, #7
   2600e:	781b      	ldrb	r3, [r3, #0]
   26010:	2b01      	cmp	r3, #1
   26012:	d901      	bls.n	26018 <rtc_calendar_set_alarm+0x20>
		return STATUS_ERR_INVALID_ARG;
   26014:	2317      	movs	r3, #23
   26016:	e021      	b.n	2605c <rtc_calendar_set_alarm+0x64>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
   26018:	68ba      	ldr	r2, [r7, #8]
   2601a:	68fb      	ldr	r3, [r7, #12]
   2601c:	0011      	movs	r1, r2
   2601e:	0018      	movs	r0, r3
   26020:	4b10      	ldr	r3, [pc, #64]	; (26064 <rtc_calendar_set_alarm+0x6c>)
   26022:	4798      	blx	r3
   26024:	0003      	movs	r3, r0
   26026:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
   26028:	46c0      	nop			; (mov r8, r8)
   2602a:	68fb      	ldr	r3, [r7, #12]
   2602c:	0018      	movs	r0, r3
   2602e:	4b0e      	ldr	r3, [pc, #56]	; (26068 <rtc_calendar_set_alarm+0x70>)
   26030:	4798      	blx	r3
   26032:	1e03      	subs	r3, r0, #0
   26034:	d1f9      	bne.n	2602a <rtc_calendar_set_alarm+0x32>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
   26036:	1dfb      	adds	r3, r7, #7
   26038:	781a      	ldrb	r2, [r3, #0]
   2603a:	697b      	ldr	r3, [r7, #20]
   2603c:	3203      	adds	r2, #3
   2603e:	00d2      	lsls	r2, r2, #3
   26040:	6939      	ldr	r1, [r7, #16]
   26042:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
   26044:	1dfb      	adds	r3, r7, #7
   26046:	781b      	ldrb	r3, [r3, #0]
   26048:	68ba      	ldr	r2, [r7, #8]
   2604a:	7a11      	ldrb	r1, [r2, #8]
   2604c:	697a      	ldr	r2, [r7, #20]
   2604e:	3303      	adds	r3, #3
   26050:	00db      	lsls	r3, r3, #3
   26052:	18d3      	adds	r3, r2, r3
   26054:	3304      	adds	r3, #4
   26056:	1c0a      	adds	r2, r1, #0
   26058:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   2605a:	2300      	movs	r3, #0
}
   2605c:	0018      	movs	r0, r3
   2605e:	46bd      	mov	sp, r7
   26060:	b006      	add	sp, #24
   26062:	bd80      	pop	{r7, pc}
   26064:	00025ce9 	.word	0x00025ce9
   26068:	00025bdd 	.word	0x00025bdd

0002606c <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
   2606c:	b580      	push	{r7, lr}
   2606e:	b086      	sub	sp, #24
   26070:	af00      	add	r7, sp, #0
   26072:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
   26074:	4b28      	ldr	r3, [pc, #160]	; (26118 <_rtc_interrupt_handler+0xac>)
   26076:	687a      	ldr	r2, [r7, #4]
   26078:	0092      	lsls	r2, r2, #2
   2607a:	58d3      	ldr	r3, [r2, r3]
   2607c:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
   2607e:	697b      	ldr	r3, [r7, #20]
   26080:	681b      	ldr	r3, [r3, #0]
   26082:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
   26084:	230e      	movs	r3, #14
   26086:	18fb      	adds	r3, r7, r3
   26088:	697a      	ldr	r2, [r7, #20]
   2608a:	8a52      	ldrh	r2, [r2, #18]
   2608c:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   2608e:	697b      	ldr	r3, [r7, #20]
   26090:	8a1b      	ldrh	r3, [r3, #16]
   26092:	b29a      	uxth	r2, r3
   26094:	230e      	movs	r3, #14
   26096:	18fb      	adds	r3, r7, r3
   26098:	210e      	movs	r1, #14
   2609a:	1879      	adds	r1, r7, r1
   2609c:	8809      	ldrh	r1, [r1, #0]
   2609e:	400a      	ands	r2, r1
   260a0:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
   260a2:	693b      	ldr	r3, [r7, #16]
   260a4:	7a1b      	ldrb	r3, [r3, #8]
   260a6:	b2da      	uxtb	r2, r3
   260a8:	230c      	movs	r3, #12
   260aa:	18fb      	adds	r3, r7, r3
   260ac:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
   260ae:	693b      	ldr	r3, [r7, #16]
   260b0:	79db      	ldrb	r3, [r3, #7]
   260b2:	b2db      	uxtb	r3, r3
   260b4:	b29a      	uxth	r2, r3
   260b6:	230c      	movs	r3, #12
   260b8:	18fb      	adds	r3, r7, r3
   260ba:	210c      	movs	r1, #12
   260bc:	1879      	adds	r1, r7, r1
   260be:	8809      	ldrh	r1, [r1, #0]
   260c0:	400a      	ands	r2, r1
   260c2:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
   260c4:	230c      	movs	r3, #12
   260c6:	18fb      	adds	r3, r7, r3
   260c8:	881b      	ldrh	r3, [r3, #0]
   260ca:	2280      	movs	r2, #128	; 0x80
   260cc:	4013      	ands	r3, r2
   260ce:	d00c      	beq.n	260ea <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
   260d0:	230e      	movs	r3, #14
   260d2:	18fb      	adds	r3, r7, r3
   260d4:	881b      	ldrh	r3, [r3, #0]
   260d6:	2202      	movs	r2, #2
   260d8:	4013      	ands	r3, r2
   260da:	d002      	beq.n	260e2 <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
   260dc:	697b      	ldr	r3, [r7, #20]
   260de:	68db      	ldr	r3, [r3, #12]
   260e0:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
   260e2:	693b      	ldr	r3, [r7, #16]
   260e4:	2280      	movs	r2, #128	; 0x80
   260e6:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
   260e8:	e011      	b.n	2610e <_rtc_interrupt_handler+0xa2>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
   260ea:	230c      	movs	r3, #12
   260ec:	18fb      	adds	r3, r7, r3
   260ee:	881b      	ldrh	r3, [r3, #0]
   260f0:	2201      	movs	r2, #1
   260f2:	4013      	ands	r3, r2
   260f4:	d00b      	beq.n	2610e <_rtc_interrupt_handler+0xa2>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
   260f6:	230e      	movs	r3, #14
   260f8:	18fb      	adds	r3, r7, r3
   260fa:	881b      	ldrh	r3, [r3, #0]
   260fc:	2201      	movs	r2, #1
   260fe:	4013      	ands	r3, r2
   26100:	d002      	beq.n	26108 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
   26102:	697b      	ldr	r3, [r7, #20]
   26104:	689b      	ldr	r3, [r3, #8]
   26106:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
   26108:	693b      	ldr	r3, [r7, #16]
   2610a:	2201      	movs	r2, #1
   2610c:	721a      	strb	r2, [r3, #8]
}
   2610e:	46c0      	nop			; (mov r8, r8)
   26110:	46bd      	mov	sp, r7
   26112:	b006      	add	sp, #24
   26114:	bd80      	pop	{r7, pc}
   26116:	46c0      	nop			; (mov r8, r8)
   26118:	20005bc8 	.word	0x20005bc8

0002611c <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   2611c:	b580      	push	{r7, lr}
   2611e:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
   26120:	2000      	movs	r0, #0
   26122:	4b02      	ldr	r3, [pc, #8]	; (2612c <RTC_Handler+0x10>)
   26124:	4798      	blx	r3
}
   26126:	46c0      	nop			; (mov r8, r8)
   26128:	46bd      	mov	sp, r7
   2612a:	bd80      	pop	{r7, pc}
   2612c:	0002606d 	.word	0x0002606d

00026130 <system_gclk_chan_get_config_defaults>:
{
   26130:	b580      	push	{r7, lr}
   26132:	b082      	sub	sp, #8
   26134:	af00      	add	r7, sp, #0
   26136:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   26138:	687b      	ldr	r3, [r7, #4]
   2613a:	2200      	movs	r2, #0
   2613c:	701a      	strb	r2, [r3, #0]
}
   2613e:	46c0      	nop			; (mov r8, r8)
   26140:	46bd      	mov	sp, r7
   26142:	b002      	add	sp, #8
   26144:	bd80      	pop	{r7, pc}

00026146 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   26146:	b5f0      	push	{r4, r5, r6, r7, lr}
   26148:	b08d      	sub	sp, #52	; 0x34
   2614a:	af00      	add	r7, sp, #0
   2614c:	60b8      	str	r0, [r7, #8]
   2614e:	60f9      	str	r1, [r7, #12]
   26150:	603a      	str	r2, [r7, #0]
   26152:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   26154:	2300      	movs	r3, #0
   26156:	2400      	movs	r4, #0
   26158:	623b      	str	r3, [r7, #32]
   2615a:	627c      	str	r4, [r7, #36]	; 0x24
   2615c:	2300      	movs	r3, #0
   2615e:	2400      	movs	r4, #0
   26160:	61bb      	str	r3, [r7, #24]
   26162:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   26164:	233f      	movs	r3, #63	; 0x3f
   26166:	62fb      	str	r3, [r7, #44]	; 0x2c
   26168:	e053      	b.n	26212 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   2616a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2616c:	3b20      	subs	r3, #32
   2616e:	2b00      	cmp	r3, #0
   26170:	db04      	blt.n	2617c <long_division+0x36>
   26172:	2201      	movs	r2, #1
   26174:	409a      	lsls	r2, r3
   26176:	0013      	movs	r3, r2
   26178:	617b      	str	r3, [r7, #20]
   2617a:	e00b      	b.n	26194 <long_division+0x4e>
   2617c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2617e:	2220      	movs	r2, #32
   26180:	1ad3      	subs	r3, r2, r3
   26182:	2201      	movs	r2, #1
   26184:	40da      	lsrs	r2, r3
   26186:	0013      	movs	r3, r2
   26188:	2100      	movs	r1, #0
   2618a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2618c:	4091      	lsls	r1, r2
   2618e:	000a      	movs	r2, r1
   26190:	4313      	orrs	r3, r2
   26192:	617b      	str	r3, [r7, #20]
   26194:	2201      	movs	r2, #1
   26196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26198:	409a      	lsls	r2, r3
   2619a:	0013      	movs	r3, r2
   2619c:	613b      	str	r3, [r7, #16]

		r = r << 1;
   2619e:	69bb      	ldr	r3, [r7, #24]
   261a0:	69fc      	ldr	r4, [r7, #28]
   261a2:	18db      	adds	r3, r3, r3
   261a4:	4164      	adcs	r4, r4
   261a6:	61bb      	str	r3, [r7, #24]
   261a8:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   261aa:	68bb      	ldr	r3, [r7, #8]
   261ac:	693a      	ldr	r2, [r7, #16]
   261ae:	401a      	ands	r2, r3
   261b0:	0015      	movs	r5, r2
   261b2:	68fb      	ldr	r3, [r7, #12]
   261b4:	697a      	ldr	r2, [r7, #20]
   261b6:	401a      	ands	r2, r3
   261b8:	0016      	movs	r6, r2
   261ba:	002b      	movs	r3, r5
   261bc:	4333      	orrs	r3, r6
   261be:	d007      	beq.n	261d0 <long_division+0x8a>
			r |= 0x01;
   261c0:	69bb      	ldr	r3, [r7, #24]
   261c2:	2201      	movs	r2, #1
   261c4:	4313      	orrs	r3, r2
   261c6:	61bb      	str	r3, [r7, #24]
   261c8:	69fb      	ldr	r3, [r7, #28]
   261ca:	2200      	movs	r2, #0
   261cc:	4313      	orrs	r3, r2
   261ce:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   261d0:	687a      	ldr	r2, [r7, #4]
   261d2:	69fb      	ldr	r3, [r7, #28]
   261d4:	429a      	cmp	r2, r3
   261d6:	d819      	bhi.n	2620c <long_division+0xc6>
   261d8:	687a      	ldr	r2, [r7, #4]
   261da:	69fb      	ldr	r3, [r7, #28]
   261dc:	429a      	cmp	r2, r3
   261de:	d103      	bne.n	261e8 <long_division+0xa2>
   261e0:	683a      	ldr	r2, [r7, #0]
   261e2:	69bb      	ldr	r3, [r7, #24]
   261e4:	429a      	cmp	r2, r3
   261e6:	d811      	bhi.n	2620c <long_division+0xc6>
			r = r - d;
   261e8:	69b9      	ldr	r1, [r7, #24]
   261ea:	69fa      	ldr	r2, [r7, #28]
   261ec:	683b      	ldr	r3, [r7, #0]
   261ee:	687c      	ldr	r4, [r7, #4]
   261f0:	1ac9      	subs	r1, r1, r3
   261f2:	41a2      	sbcs	r2, r4
   261f4:	000b      	movs	r3, r1
   261f6:	0014      	movs	r4, r2
   261f8:	61bb      	str	r3, [r7, #24]
   261fa:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   261fc:	6a3a      	ldr	r2, [r7, #32]
   261fe:	693b      	ldr	r3, [r7, #16]
   26200:	4313      	orrs	r3, r2
   26202:	623b      	str	r3, [r7, #32]
   26204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   26206:	697b      	ldr	r3, [r7, #20]
   26208:	4313      	orrs	r3, r2
   2620a:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   2620c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2620e:	3b01      	subs	r3, #1
   26210:	62fb      	str	r3, [r7, #44]	; 0x2c
   26212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26214:	2b00      	cmp	r3, #0
   26216:	daa8      	bge.n	2616a <long_division+0x24>
		}
	}

	return q;
   26218:	6a3b      	ldr	r3, [r7, #32]
   2621a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   2621c:	0018      	movs	r0, r3
   2621e:	0021      	movs	r1, r4
   26220:	46bd      	mov	sp, r7
   26222:	b00d      	add	sp, #52	; 0x34
   26224:	bdf0      	pop	{r4, r5, r6, r7, pc}

00026226 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   26226:	b580      	push	{r7, lr}
   26228:	b086      	sub	sp, #24
   2622a:	af00      	add	r7, sp, #0
   2622c:	60f8      	str	r0, [r7, #12]
   2622e:	60b9      	str	r1, [r7, #8]
   26230:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   26232:	2316      	movs	r3, #22
   26234:	18fb      	adds	r3, r7, r3
   26236:	2200      	movs	r2, #0
   26238:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   2623a:	68bb      	ldr	r3, [r7, #8]
   2623c:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   2623e:	68bb      	ldr	r3, [r7, #8]
   26240:	085a      	lsrs	r2, r3, #1
   26242:	68fb      	ldr	r3, [r7, #12]
   26244:	429a      	cmp	r2, r3
   26246:	d201      	bcs.n	2624c <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   26248:	2340      	movs	r3, #64	; 0x40
   2624a:	e026      	b.n	2629a <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   2624c:	68bb      	ldr	r3, [r7, #8]
   2624e:	085b      	lsrs	r3, r3, #1
   26250:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   26252:	e00a      	b.n	2626a <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   26254:	693a      	ldr	r2, [r7, #16]
   26256:	68fb      	ldr	r3, [r7, #12]
   26258:	1ad3      	subs	r3, r2, r3
   2625a:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   2625c:	2316      	movs	r3, #22
   2625e:	18fb      	adds	r3, r7, r3
   26260:	881a      	ldrh	r2, [r3, #0]
   26262:	2316      	movs	r3, #22
   26264:	18fb      	adds	r3, r7, r3
   26266:	3201      	adds	r2, #1
   26268:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   2626a:	693a      	ldr	r2, [r7, #16]
   2626c:	68fb      	ldr	r3, [r7, #12]
   2626e:	429a      	cmp	r2, r3
   26270:	d2f0      	bcs.n	26254 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   26272:	2316      	movs	r3, #22
   26274:	18fb      	adds	r3, r7, r3
   26276:	2216      	movs	r2, #22
   26278:	18ba      	adds	r2, r7, r2
   2627a:	8812      	ldrh	r2, [r2, #0]
   2627c:	3a01      	subs	r2, #1
   2627e:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   26280:	2316      	movs	r3, #22
   26282:	18fb      	adds	r3, r7, r3
   26284:	881b      	ldrh	r3, [r3, #0]
   26286:	2bff      	cmp	r3, #255	; 0xff
   26288:	d901      	bls.n	2628e <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   2628a:	2340      	movs	r3, #64	; 0x40
   2628c:	e005      	b.n	2629a <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   2628e:	687b      	ldr	r3, [r7, #4]
   26290:	2216      	movs	r2, #22
   26292:	18ba      	adds	r2, r7, r2
   26294:	8812      	ldrh	r2, [r2, #0]
   26296:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   26298:	2300      	movs	r3, #0
	}
}
   2629a:	0018      	movs	r0, r3
   2629c:	46bd      	mov	sp, r7
   2629e:	b006      	add	sp, #24
   262a0:	bd80      	pop	{r7, pc}
	...

000262a4 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   262a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   262a6:	b0a1      	sub	sp, #132	; 0x84
   262a8:	af00      	add	r7, sp, #0
   262aa:	64f8      	str	r0, [r7, #76]	; 0x4c
   262ac:	64b9      	str	r1, [r7, #72]	; 0x48
   262ae:	647a      	str	r2, [r7, #68]	; 0x44
   262b0:	2243      	movs	r2, #67	; 0x43
   262b2:	18ba      	adds	r2, r7, r2
   262b4:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   262b6:	2300      	movs	r3, #0
   262b8:	2400      	movs	r4, #0
   262ba:	673b      	str	r3, [r7, #112]	; 0x70
   262bc:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   262be:	2300      	movs	r3, #0
   262c0:	2400      	movs	r4, #0
   262c2:	66bb      	str	r3, [r7, #104]	; 0x68
   262c4:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   262c6:	2300      	movs	r3, #0
   262c8:	2400      	movs	r4, #0
   262ca:	67bb      	str	r3, [r7, #120]	; 0x78
   262cc:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   262ce:	2300      	movs	r3, #0
   262d0:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   262d2:	2358      	movs	r3, #88	; 0x58
   262d4:	2240      	movs	r2, #64	; 0x40
   262d6:	4694      	mov	ip, r2
   262d8:	44bc      	add	ip, r7
   262da:	4463      	add	r3, ip
   262dc:	781a      	ldrb	r2, [r3, #0]
   262de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   262e0:	435a      	muls	r2, r3
   262e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   262e4:	429a      	cmp	r2, r3
   262e6:	d901      	bls.n	262ec <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   262e8:	2340      	movs	r3, #64	; 0x40
   262ea:	e0b3      	b.n	26454 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   262ec:	2343      	movs	r3, #67	; 0x43
   262ee:	18fb      	adds	r3, r7, r3
   262f0:	781b      	ldrb	r3, [r3, #0]
   262f2:	2b00      	cmp	r3, #0
   262f4:	d13d      	bne.n	26372 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   262f6:	2358      	movs	r3, #88	; 0x58
   262f8:	2240      	movs	r2, #64	; 0x40
   262fa:	4694      	mov	ip, r2
   262fc:	44bc      	add	ip, r7
   262fe:	4463      	add	r3, ip
   26300:	781b      	ldrb	r3, [r3, #0]
   26302:	b2db      	uxtb	r3, r3
   26304:	613b      	str	r3, [r7, #16]
   26306:	2300      	movs	r3, #0
   26308:	617b      	str	r3, [r7, #20]
   2630a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   2630c:	60bb      	str	r3, [r7, #8]
   2630e:	2300      	movs	r3, #0
   26310:	60fb      	str	r3, [r7, #12]
   26312:	4c52      	ldr	r4, [pc, #328]	; (2645c <_sercom_get_async_baud_val+0x1b8>)
   26314:	68ba      	ldr	r2, [r7, #8]
   26316:	68fb      	ldr	r3, [r7, #12]
   26318:	6938      	ldr	r0, [r7, #16]
   2631a:	6979      	ldr	r1, [r7, #20]
   2631c:	47a0      	blx	r4
   2631e:	0003      	movs	r3, r0
   26320:	000c      	movs	r4, r1
   26322:	001b      	movs	r3, r3
   26324:	65fb      	str	r3, [r7, #92]	; 0x5c
   26326:	2300      	movs	r3, #0
   26328:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   2632a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2632c:	603b      	str	r3, [r7, #0]
   2632e:	2300      	movs	r3, #0
   26330:	607b      	str	r3, [r7, #4]
   26332:	6db8      	ldr	r0, [r7, #88]	; 0x58
   26334:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   26336:	683a      	ldr	r2, [r7, #0]
   26338:	687b      	ldr	r3, [r7, #4]
   2633a:	4c49      	ldr	r4, [pc, #292]	; (26460 <_sercom_get_async_baud_val+0x1bc>)
   2633c:	47a0      	blx	r4
   2633e:	0003      	movs	r3, r0
   26340:	000c      	movs	r4, r1
   26342:	673b      	str	r3, [r7, #112]	; 0x70
   26344:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   26346:	2100      	movs	r1, #0
   26348:	2201      	movs	r2, #1
   2634a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2634c:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   2634e:	1ac9      	subs	r1, r1, r3
   26350:	41a2      	sbcs	r2, r4
   26352:	000b      	movs	r3, r1
   26354:	0014      	movs	r4, r2
   26356:	66bb      	str	r3, [r7, #104]	; 0x68
   26358:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   2635a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2635c:	0c1b      	lsrs	r3, r3, #16
   2635e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   26360:	0416      	lsls	r6, r2, #16
   26362:	431e      	orrs	r6, r3
   26364:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   26366:	041d      	lsls	r5, r3, #16
   26368:	0033      	movs	r3, r6
   2636a:	67bb      	str	r3, [r7, #120]	; 0x78
   2636c:	2300      	movs	r3, #0
   2636e:	67fb      	str	r3, [r7, #124]	; 0x7c
   26370:	e06a      	b.n	26448 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   26372:	2343      	movs	r3, #67	; 0x43
   26374:	18fb      	adds	r3, r7, r3
   26376:	781b      	ldrb	r3, [r3, #0]
   26378:	2b01      	cmp	r3, #1
   2637a:	d165      	bne.n	26448 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   2637c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   2637e:	633b      	str	r3, [r7, #48]	; 0x30
   26380:	2300      	movs	r3, #0
   26382:	637b      	str	r3, [r7, #52]	; 0x34
   26384:	2358      	movs	r3, #88	; 0x58
   26386:	2240      	movs	r2, #64	; 0x40
   26388:	4694      	mov	ip, r2
   2638a:	44bc      	add	ip, r7
   2638c:	4463      	add	r3, ip
   2638e:	781b      	ldrb	r3, [r3, #0]
   26390:	b2db      	uxtb	r3, r3
   26392:	62bb      	str	r3, [r7, #40]	; 0x28
   26394:	2300      	movs	r3, #0
   26396:	62fb      	str	r3, [r7, #44]	; 0x2c
   26398:	4c30      	ldr	r4, [pc, #192]	; (2645c <_sercom_get_async_baud_val+0x1b8>)
   2639a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2639c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2639e:	6b38      	ldr	r0, [r7, #48]	; 0x30
   263a0:	6b79      	ldr	r1, [r7, #52]	; 0x34
   263a2:	47a0      	blx	r4
   263a4:	0003      	movs	r3, r0
   263a6:	000c      	movs	r4, r1
   263a8:	65bb      	str	r3, [r7, #88]	; 0x58
   263aa:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   263ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   263ae:	623b      	str	r3, [r7, #32]
   263b0:	2300      	movs	r3, #0
   263b2:	627b      	str	r3, [r7, #36]	; 0x24
   263b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   263b6:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   263b8:	001a      	movs	r2, r3
   263ba:	0023      	movs	r3, r4
   263bc:	6a38      	ldr	r0, [r7, #32]
   263be:	6a79      	ldr	r1, [r7, #36]	; 0x24
   263c0:	4c27      	ldr	r4, [pc, #156]	; (26460 <_sercom_get_async_baud_val+0x1bc>)
   263c2:	47a0      	blx	r4
   263c4:	0003      	movs	r3, r0
   263c6:	000c      	movs	r4, r1
   263c8:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   263ca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   263cc:	2380      	movs	r3, #128	; 0x80
   263ce:	019b      	lsls	r3, r3, #6
   263d0:	429a      	cmp	r2, r3
   263d2:	d901      	bls.n	263d8 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   263d4:	2340      	movs	r3, #64	; 0x40
   263d6:	e03d      	b.n	26454 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   263d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   263da:	61bb      	str	r3, [r7, #24]
   263dc:	2300      	movs	r3, #0
   263de:	61fb      	str	r3, [r7, #28]
   263e0:	69b9      	ldr	r1, [r7, #24]
   263e2:	69fa      	ldr	r2, [r7, #28]
   263e4:	000b      	movs	r3, r1
   263e6:	0f5b      	lsrs	r3, r3, #29
   263e8:	0010      	movs	r0, r2
   263ea:	00c0      	lsls	r0, r0, #3
   263ec:	63f8      	str	r0, [r7, #60]	; 0x3c
   263ee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   263f0:	4318      	orrs	r0, r3
   263f2:	63f8      	str	r0, [r7, #60]	; 0x3c
   263f4:	000b      	movs	r3, r1
   263f6:	00db      	lsls	r3, r3, #3
   263f8:	63bb      	str	r3, [r7, #56]	; 0x38
   263fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   263fc:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   263fe:	001a      	movs	r2, r3
   26400:	0023      	movs	r3, r4
   26402:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   26404:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   26406:	4c16      	ldr	r4, [pc, #88]	; (26460 <_sercom_get_async_baud_val+0x1bc>)
   26408:	47a0      	blx	r4
   2640a:	0003      	movs	r3, r0
   2640c:	000c      	movs	r4, r1
   2640e:	65bb      	str	r3, [r7, #88]	; 0x58
   26410:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   26412:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   26414:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   26416:	b2d9      	uxtb	r1, r3
   26418:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2641a:	b2db      	uxtb	r3, r3
   2641c:	00db      	lsls	r3, r3, #3
   2641e:	b2da      	uxtb	r2, r3
   26420:	2317      	movs	r3, #23
   26422:	2040      	movs	r0, #64	; 0x40
   26424:	4684      	mov	ip, r0
   26426:	44bc      	add	ip, r7
   26428:	4463      	add	r3, ip
   2642a:	1a8a      	subs	r2, r1, r2
   2642c:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   2642e:	2317      	movs	r3, #23
   26430:	2240      	movs	r2, #64	; 0x40
   26432:	4694      	mov	ip, r2
   26434:	44bc      	add	ip, r7
   26436:	4463      	add	r3, ip
   26438:	781b      	ldrb	r3, [r3, #0]
   2643a:	035b      	lsls	r3, r3, #13
   2643c:	001a      	movs	r2, r3
   2643e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   26440:	4313      	orrs	r3, r2
   26442:	67bb      	str	r3, [r7, #120]	; 0x78
   26444:	2300      	movs	r3, #0
   26446:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   26448:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   2644a:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   2644c:	b29a      	uxth	r2, r3
   2644e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   26450:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   26452:	2300      	movs	r3, #0
}
   26454:	0018      	movs	r0, r3
   26456:	46bd      	mov	sp, r7
   26458:	b021      	add	sp, #132	; 0x84
   2645a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2645c:	00031e11 	.word	0x00031e11
   26460:	00026147 	.word	0x00026147

00026464 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   26464:	b580      	push	{r7, lr}
   26466:	b084      	sub	sp, #16
   26468:	af00      	add	r7, sp, #0
   2646a:	0002      	movs	r2, r0
   2646c:	1dfb      	adds	r3, r7, #7
   2646e:	701a      	strb	r2, [r3, #0]
   26470:	1dbb      	adds	r3, r7, #6
   26472:	1c0a      	adds	r2, r1, #0
   26474:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   26476:	4b1a      	ldr	r3, [pc, #104]	; (264e0 <sercom_set_gclk_generator+0x7c>)
   26478:	781b      	ldrb	r3, [r3, #0]
   2647a:	2201      	movs	r2, #1
   2647c:	4053      	eors	r3, r2
   2647e:	b2db      	uxtb	r3, r3
   26480:	2b00      	cmp	r3, #0
   26482:	d103      	bne.n	2648c <sercom_set_gclk_generator+0x28>
   26484:	1dbb      	adds	r3, r7, #6
   26486:	781b      	ldrb	r3, [r3, #0]
   26488:	2b00      	cmp	r3, #0
   2648a:	d01b      	beq.n	264c4 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   2648c:	230c      	movs	r3, #12
   2648e:	18fb      	adds	r3, r7, r3
   26490:	0018      	movs	r0, r3
   26492:	4b14      	ldr	r3, [pc, #80]	; (264e4 <sercom_set_gclk_generator+0x80>)
   26494:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   26496:	230c      	movs	r3, #12
   26498:	18fb      	adds	r3, r7, r3
   2649a:	1dfa      	adds	r2, r7, #7
   2649c:	7812      	ldrb	r2, [r2, #0]
   2649e:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   264a0:	230c      	movs	r3, #12
   264a2:	18fb      	adds	r3, r7, r3
   264a4:	0019      	movs	r1, r3
   264a6:	2013      	movs	r0, #19
   264a8:	4b0f      	ldr	r3, [pc, #60]	; (264e8 <sercom_set_gclk_generator+0x84>)
   264aa:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   264ac:	2013      	movs	r0, #19
   264ae:	4b0f      	ldr	r3, [pc, #60]	; (264ec <sercom_set_gclk_generator+0x88>)
   264b0:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   264b2:	4b0b      	ldr	r3, [pc, #44]	; (264e0 <sercom_set_gclk_generator+0x7c>)
   264b4:	1dfa      	adds	r2, r7, #7
   264b6:	7812      	ldrb	r2, [r2, #0]
   264b8:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   264ba:	4b09      	ldr	r3, [pc, #36]	; (264e0 <sercom_set_gclk_generator+0x7c>)
   264bc:	2201      	movs	r2, #1
   264be:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   264c0:	2300      	movs	r3, #0
   264c2:	e008      	b.n	264d6 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   264c4:	4b06      	ldr	r3, [pc, #24]	; (264e0 <sercom_set_gclk_generator+0x7c>)
   264c6:	785b      	ldrb	r3, [r3, #1]
   264c8:	1dfa      	adds	r2, r7, #7
   264ca:	7812      	ldrb	r2, [r2, #0]
   264cc:	429a      	cmp	r2, r3
   264ce:	d101      	bne.n	264d4 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   264d0:	2300      	movs	r3, #0
   264d2:	e000      	b.n	264d6 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   264d4:	231d      	movs	r3, #29
}
   264d6:	0018      	movs	r0, r3
   264d8:	46bd      	mov	sp, r7
   264da:	b004      	add	sp, #16
   264dc:	bd80      	pop	{r7, pc}
   264de:	46c0      	nop			; (mov r8, r8)
   264e0:	2000428c 	.word	0x2000428c
   264e4:	00026131 	.word	0x00026131
   264e8:	00028f3d 	.word	0x00028f3d
   264ec:	00028f81 	.word	0x00028f81

000264f0 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   264f0:	b580      	push	{r7, lr}
   264f2:	b082      	sub	sp, #8
   264f4:	af00      	add	r7, sp, #0
   264f6:	6078      	str	r0, [r7, #4]
   264f8:	000a      	movs	r2, r1
   264fa:	1cfb      	adds	r3, r7, #3
   264fc:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   264fe:	687b      	ldr	r3, [r7, #4]
   26500:	4a4d      	ldr	r2, [pc, #308]	; (26638 <_sercom_get_default_pad+0x148>)
   26502:	4293      	cmp	r3, r2
   26504:	d03f      	beq.n	26586 <_sercom_get_default_pad+0x96>
   26506:	4a4c      	ldr	r2, [pc, #304]	; (26638 <_sercom_get_default_pad+0x148>)
   26508:	4293      	cmp	r3, r2
   2650a:	d806      	bhi.n	2651a <_sercom_get_default_pad+0x2a>
   2650c:	4a4b      	ldr	r2, [pc, #300]	; (2663c <_sercom_get_default_pad+0x14c>)
   2650e:	4293      	cmp	r3, r2
   26510:	d00f      	beq.n	26532 <_sercom_get_default_pad+0x42>
   26512:	4a4b      	ldr	r2, [pc, #300]	; (26640 <_sercom_get_default_pad+0x150>)
   26514:	4293      	cmp	r3, r2
   26516:	d021      	beq.n	2655c <_sercom_get_default_pad+0x6c>
   26518:	e089      	b.n	2662e <_sercom_get_default_pad+0x13e>
   2651a:	4a4a      	ldr	r2, [pc, #296]	; (26644 <_sercom_get_default_pad+0x154>)
   2651c:	4293      	cmp	r3, r2
   2651e:	d100      	bne.n	26522 <_sercom_get_default_pad+0x32>
   26520:	e05b      	b.n	265da <_sercom_get_default_pad+0xea>
   26522:	4a49      	ldr	r2, [pc, #292]	; (26648 <_sercom_get_default_pad+0x158>)
   26524:	4293      	cmp	r3, r2
   26526:	d100      	bne.n	2652a <_sercom_get_default_pad+0x3a>
   26528:	e06c      	b.n	26604 <_sercom_get_default_pad+0x114>
   2652a:	4a48      	ldr	r2, [pc, #288]	; (2664c <_sercom_get_default_pad+0x15c>)
   2652c:	4293      	cmp	r3, r2
   2652e:	d03f      	beq.n	265b0 <_sercom_get_default_pad+0xc0>
   26530:	e07d      	b.n	2662e <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   26532:	1cfb      	adds	r3, r7, #3
   26534:	781b      	ldrb	r3, [r3, #0]
   26536:	2b01      	cmp	r3, #1
   26538:	d00a      	beq.n	26550 <_sercom_get_default_pad+0x60>
   2653a:	dc02      	bgt.n	26542 <_sercom_get_default_pad+0x52>
   2653c:	2b00      	cmp	r3, #0
   2653e:	d005      	beq.n	2654c <_sercom_get_default_pad+0x5c>
   26540:	e075      	b.n	2662e <_sercom_get_default_pad+0x13e>
   26542:	2b02      	cmp	r3, #2
   26544:	d006      	beq.n	26554 <_sercom_get_default_pad+0x64>
   26546:	2b03      	cmp	r3, #3
   26548:	d006      	beq.n	26558 <_sercom_get_default_pad+0x68>
   2654a:	e070      	b.n	2662e <_sercom_get_default_pad+0x13e>
   2654c:	4b40      	ldr	r3, [pc, #256]	; (26650 <_sercom_get_default_pad+0x160>)
   2654e:	e06f      	b.n	26630 <_sercom_get_default_pad+0x140>
   26550:	4b40      	ldr	r3, [pc, #256]	; (26654 <_sercom_get_default_pad+0x164>)
   26552:	e06d      	b.n	26630 <_sercom_get_default_pad+0x140>
   26554:	4b40      	ldr	r3, [pc, #256]	; (26658 <_sercom_get_default_pad+0x168>)
   26556:	e06b      	b.n	26630 <_sercom_get_default_pad+0x140>
   26558:	4b40      	ldr	r3, [pc, #256]	; (2665c <_sercom_get_default_pad+0x16c>)
   2655a:	e069      	b.n	26630 <_sercom_get_default_pad+0x140>
   2655c:	1cfb      	adds	r3, r7, #3
   2655e:	781b      	ldrb	r3, [r3, #0]
   26560:	2b01      	cmp	r3, #1
   26562:	d00a      	beq.n	2657a <_sercom_get_default_pad+0x8a>
   26564:	dc02      	bgt.n	2656c <_sercom_get_default_pad+0x7c>
   26566:	2b00      	cmp	r3, #0
   26568:	d005      	beq.n	26576 <_sercom_get_default_pad+0x86>
   2656a:	e060      	b.n	2662e <_sercom_get_default_pad+0x13e>
   2656c:	2b02      	cmp	r3, #2
   2656e:	d006      	beq.n	2657e <_sercom_get_default_pad+0x8e>
   26570:	2b03      	cmp	r3, #3
   26572:	d006      	beq.n	26582 <_sercom_get_default_pad+0x92>
   26574:	e05b      	b.n	2662e <_sercom_get_default_pad+0x13e>
   26576:	2303      	movs	r3, #3
   26578:	e05a      	b.n	26630 <_sercom_get_default_pad+0x140>
   2657a:	4b39      	ldr	r3, [pc, #228]	; (26660 <_sercom_get_default_pad+0x170>)
   2657c:	e058      	b.n	26630 <_sercom_get_default_pad+0x140>
   2657e:	4b39      	ldr	r3, [pc, #228]	; (26664 <_sercom_get_default_pad+0x174>)
   26580:	e056      	b.n	26630 <_sercom_get_default_pad+0x140>
   26582:	4b39      	ldr	r3, [pc, #228]	; (26668 <_sercom_get_default_pad+0x178>)
   26584:	e054      	b.n	26630 <_sercom_get_default_pad+0x140>
   26586:	1cfb      	adds	r3, r7, #3
   26588:	781b      	ldrb	r3, [r3, #0]
   2658a:	2b01      	cmp	r3, #1
   2658c:	d00a      	beq.n	265a4 <_sercom_get_default_pad+0xb4>
   2658e:	dc02      	bgt.n	26596 <_sercom_get_default_pad+0xa6>
   26590:	2b00      	cmp	r3, #0
   26592:	d005      	beq.n	265a0 <_sercom_get_default_pad+0xb0>
   26594:	e04b      	b.n	2662e <_sercom_get_default_pad+0x13e>
   26596:	2b02      	cmp	r3, #2
   26598:	d006      	beq.n	265a8 <_sercom_get_default_pad+0xb8>
   2659a:	2b03      	cmp	r3, #3
   2659c:	d006      	beq.n	265ac <_sercom_get_default_pad+0xbc>
   2659e:	e046      	b.n	2662e <_sercom_get_default_pad+0x13e>
   265a0:	4b32      	ldr	r3, [pc, #200]	; (2666c <_sercom_get_default_pad+0x17c>)
   265a2:	e045      	b.n	26630 <_sercom_get_default_pad+0x140>
   265a4:	4b32      	ldr	r3, [pc, #200]	; (26670 <_sercom_get_default_pad+0x180>)
   265a6:	e043      	b.n	26630 <_sercom_get_default_pad+0x140>
   265a8:	4b32      	ldr	r3, [pc, #200]	; (26674 <_sercom_get_default_pad+0x184>)
   265aa:	e041      	b.n	26630 <_sercom_get_default_pad+0x140>
   265ac:	4b32      	ldr	r3, [pc, #200]	; (26678 <_sercom_get_default_pad+0x188>)
   265ae:	e03f      	b.n	26630 <_sercom_get_default_pad+0x140>
   265b0:	1cfb      	adds	r3, r7, #3
   265b2:	781b      	ldrb	r3, [r3, #0]
   265b4:	2b01      	cmp	r3, #1
   265b6:	d00a      	beq.n	265ce <_sercom_get_default_pad+0xde>
   265b8:	dc02      	bgt.n	265c0 <_sercom_get_default_pad+0xd0>
   265ba:	2b00      	cmp	r3, #0
   265bc:	d005      	beq.n	265ca <_sercom_get_default_pad+0xda>
   265be:	e036      	b.n	2662e <_sercom_get_default_pad+0x13e>
   265c0:	2b02      	cmp	r3, #2
   265c2:	d006      	beq.n	265d2 <_sercom_get_default_pad+0xe2>
   265c4:	2b03      	cmp	r3, #3
   265c6:	d006      	beq.n	265d6 <_sercom_get_default_pad+0xe6>
   265c8:	e031      	b.n	2662e <_sercom_get_default_pad+0x13e>
   265ca:	4b2c      	ldr	r3, [pc, #176]	; (2667c <_sercom_get_default_pad+0x18c>)
   265cc:	e030      	b.n	26630 <_sercom_get_default_pad+0x140>
   265ce:	4b2c      	ldr	r3, [pc, #176]	; (26680 <_sercom_get_default_pad+0x190>)
   265d0:	e02e      	b.n	26630 <_sercom_get_default_pad+0x140>
   265d2:	4b2c      	ldr	r3, [pc, #176]	; (26684 <_sercom_get_default_pad+0x194>)
   265d4:	e02c      	b.n	26630 <_sercom_get_default_pad+0x140>
   265d6:	4b2c      	ldr	r3, [pc, #176]	; (26688 <_sercom_get_default_pad+0x198>)
   265d8:	e02a      	b.n	26630 <_sercom_get_default_pad+0x140>
   265da:	1cfb      	adds	r3, r7, #3
   265dc:	781b      	ldrb	r3, [r3, #0]
   265de:	2b01      	cmp	r3, #1
   265e0:	d00a      	beq.n	265f8 <_sercom_get_default_pad+0x108>
   265e2:	dc02      	bgt.n	265ea <_sercom_get_default_pad+0xfa>
   265e4:	2b00      	cmp	r3, #0
   265e6:	d005      	beq.n	265f4 <_sercom_get_default_pad+0x104>
   265e8:	e021      	b.n	2662e <_sercom_get_default_pad+0x13e>
   265ea:	2b02      	cmp	r3, #2
   265ec:	d006      	beq.n	265fc <_sercom_get_default_pad+0x10c>
   265ee:	2b03      	cmp	r3, #3
   265f0:	d006      	beq.n	26600 <_sercom_get_default_pad+0x110>
   265f2:	e01c      	b.n	2662e <_sercom_get_default_pad+0x13e>
   265f4:	4b25      	ldr	r3, [pc, #148]	; (2668c <_sercom_get_default_pad+0x19c>)
   265f6:	e01b      	b.n	26630 <_sercom_get_default_pad+0x140>
   265f8:	4b25      	ldr	r3, [pc, #148]	; (26690 <_sercom_get_default_pad+0x1a0>)
   265fa:	e019      	b.n	26630 <_sercom_get_default_pad+0x140>
   265fc:	4b25      	ldr	r3, [pc, #148]	; (26694 <_sercom_get_default_pad+0x1a4>)
   265fe:	e017      	b.n	26630 <_sercom_get_default_pad+0x140>
   26600:	4b25      	ldr	r3, [pc, #148]	; (26698 <_sercom_get_default_pad+0x1a8>)
   26602:	e015      	b.n	26630 <_sercom_get_default_pad+0x140>
   26604:	1cfb      	adds	r3, r7, #3
   26606:	781b      	ldrb	r3, [r3, #0]
   26608:	2b01      	cmp	r3, #1
   2660a:	d00a      	beq.n	26622 <_sercom_get_default_pad+0x132>
   2660c:	dc02      	bgt.n	26614 <_sercom_get_default_pad+0x124>
   2660e:	2b00      	cmp	r3, #0
   26610:	d005      	beq.n	2661e <_sercom_get_default_pad+0x12e>
   26612:	e00c      	b.n	2662e <_sercom_get_default_pad+0x13e>
   26614:	2b02      	cmp	r3, #2
   26616:	d006      	beq.n	26626 <_sercom_get_default_pad+0x136>
   26618:	2b03      	cmp	r3, #3
   2661a:	d006      	beq.n	2662a <_sercom_get_default_pad+0x13a>
   2661c:	e007      	b.n	2662e <_sercom_get_default_pad+0x13e>
   2661e:	4b1f      	ldr	r3, [pc, #124]	; (2669c <_sercom_get_default_pad+0x1ac>)
   26620:	e006      	b.n	26630 <_sercom_get_default_pad+0x140>
   26622:	4b1f      	ldr	r3, [pc, #124]	; (266a0 <_sercom_get_default_pad+0x1b0>)
   26624:	e004      	b.n	26630 <_sercom_get_default_pad+0x140>
   26626:	4b1f      	ldr	r3, [pc, #124]	; (266a4 <_sercom_get_default_pad+0x1b4>)
   26628:	e002      	b.n	26630 <_sercom_get_default_pad+0x140>
   2662a:	4b1f      	ldr	r3, [pc, #124]	; (266a8 <_sercom_get_default_pad+0x1b8>)
   2662c:	e000      	b.n	26630 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   2662e:	2300      	movs	r3, #0
}
   26630:	0018      	movs	r0, r3
   26632:	46bd      	mov	sp, r7
   26634:	b002      	add	sp, #8
   26636:	bd80      	pop	{r7, pc}
   26638:	42001000 	.word	0x42001000
   2663c:	42000800 	.word	0x42000800
   26640:	42000c00 	.word	0x42000c00
   26644:	42001800 	.word	0x42001800
   26648:	42001c00 	.word	0x42001c00
   2664c:	42001400 	.word	0x42001400
   26650:	00040003 	.word	0x00040003
   26654:	00050003 	.word	0x00050003
   26658:	00060003 	.word	0x00060003
   2665c:	00070003 	.word	0x00070003
   26660:	00010003 	.word	0x00010003
   26664:	001e0003 	.word	0x001e0003
   26668:	001f0003 	.word	0x001f0003
   2666c:	00080003 	.word	0x00080003
   26670:	00090003 	.word	0x00090003
   26674:	000a0003 	.word	0x000a0003
   26678:	000b0003 	.word	0x000b0003
   2667c:	00100003 	.word	0x00100003
   26680:	00110003 	.word	0x00110003
   26684:	00120003 	.word	0x00120003
   26688:	00130003 	.word	0x00130003
   2668c:	000c0003 	.word	0x000c0003
   26690:	000d0003 	.word	0x000d0003
   26694:	000e0003 	.word	0x000e0003
   26698:	000f0003 	.word	0x000f0003
   2669c:	00160003 	.word	0x00160003
   266a0:	00170003 	.word	0x00170003
   266a4:	00180003 	.word	0x00180003
   266a8:	00190003 	.word	0x00190003

000266ac <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   266ac:	b590      	push	{r4, r7, lr}
   266ae:	b08b      	sub	sp, #44	; 0x2c
   266b0:	af00      	add	r7, sp, #0
   266b2:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   266b4:	230c      	movs	r3, #12
   266b6:	18fb      	adds	r3, r7, r3
   266b8:	4a0f      	ldr	r2, [pc, #60]	; (266f8 <_sercom_get_sercom_inst_index+0x4c>)
   266ba:	ca13      	ldmia	r2!, {r0, r1, r4}
   266bc:	c313      	stmia	r3!, {r0, r1, r4}
   266be:	ca13      	ldmia	r2!, {r0, r1, r4}
   266c0:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   266c2:	2300      	movs	r3, #0
   266c4:	627b      	str	r3, [r7, #36]	; 0x24
   266c6:	e00e      	b.n	266e6 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   266c8:	230c      	movs	r3, #12
   266ca:	18fb      	adds	r3, r7, r3
   266cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   266ce:	0092      	lsls	r2, r2, #2
   266d0:	58d3      	ldr	r3, [r2, r3]
   266d2:	001a      	movs	r2, r3
   266d4:	687b      	ldr	r3, [r7, #4]
   266d6:	429a      	cmp	r2, r3
   266d8:	d102      	bne.n	266e0 <_sercom_get_sercom_inst_index+0x34>
			return i;
   266da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   266dc:	b2db      	uxtb	r3, r3
   266de:	e006      	b.n	266ee <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   266e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   266e2:	3301      	adds	r3, #1
   266e4:	627b      	str	r3, [r7, #36]	; 0x24
   266e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   266e8:	2b05      	cmp	r3, #5
   266ea:	d9ed      	bls.n	266c8 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   266ec:	2300      	movs	r3, #0
}
   266ee:	0018      	movs	r0, r3
   266f0:	46bd      	mov	sp, r7
   266f2:	b00b      	add	sp, #44	; 0x2c
   266f4:	bd90      	pop	{r4, r7, pc}
   266f6:	46c0      	nop			; (mov r8, r8)
   266f8:	00038f6c 	.word	0x00038f6c

000266fc <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   266fc:	b580      	push	{r7, lr}
   266fe:	b082      	sub	sp, #8
   26700:	af00      	add	r7, sp, #0
   26702:	0002      	movs	r2, r0
   26704:	1dfb      	adds	r3, r7, #7
   26706:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   26708:	46c0      	nop			; (mov r8, r8)
   2670a:	46bd      	mov	sp, r7
   2670c:	b002      	add	sp, #8
   2670e:	bd80      	pop	{r7, pc}

00026710 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   26710:	b580      	push	{r7, lr}
   26712:	b084      	sub	sp, #16
   26714:	af00      	add	r7, sp, #0
   26716:	0002      	movs	r2, r0
   26718:	6039      	str	r1, [r7, #0]
   2671a:	1dfb      	adds	r3, r7, #7
   2671c:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   2671e:	4b13      	ldr	r3, [pc, #76]	; (2676c <_sercom_set_handler+0x5c>)
   26720:	781b      	ldrb	r3, [r3, #0]
   26722:	2201      	movs	r2, #1
   26724:	4053      	eors	r3, r2
   26726:	b2db      	uxtb	r3, r3
   26728:	2b00      	cmp	r3, #0
   2672a:	d015      	beq.n	26758 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   2672c:	2300      	movs	r3, #0
   2672e:	60fb      	str	r3, [r7, #12]
   26730:	e00c      	b.n	2674c <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   26732:	4b0f      	ldr	r3, [pc, #60]	; (26770 <_sercom_set_handler+0x60>)
   26734:	68fa      	ldr	r2, [r7, #12]
   26736:	0092      	lsls	r2, r2, #2
   26738:	490e      	ldr	r1, [pc, #56]	; (26774 <_sercom_set_handler+0x64>)
   2673a:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   2673c:	4b0e      	ldr	r3, [pc, #56]	; (26778 <_sercom_set_handler+0x68>)
   2673e:	68fa      	ldr	r2, [r7, #12]
   26740:	0092      	lsls	r2, r2, #2
   26742:	2100      	movs	r1, #0
   26744:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   26746:	68fb      	ldr	r3, [r7, #12]
   26748:	3301      	adds	r3, #1
   2674a:	60fb      	str	r3, [r7, #12]
   2674c:	68fb      	ldr	r3, [r7, #12]
   2674e:	2b05      	cmp	r3, #5
   26750:	d9ef      	bls.n	26732 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   26752:	4b06      	ldr	r3, [pc, #24]	; (2676c <_sercom_set_handler+0x5c>)
   26754:	2201      	movs	r2, #1
   26756:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   26758:	1dfb      	adds	r3, r7, #7
   2675a:	781a      	ldrb	r2, [r3, #0]
   2675c:	4b04      	ldr	r3, [pc, #16]	; (26770 <_sercom_set_handler+0x60>)
   2675e:	0092      	lsls	r2, r2, #2
   26760:	6839      	ldr	r1, [r7, #0]
   26762:	50d1      	str	r1, [r2, r3]
}
   26764:	46c0      	nop			; (mov r8, r8)
   26766:	46bd      	mov	sp, r7
   26768:	b004      	add	sp, #16
   2676a:	bd80      	pop	{r7, pc}
   2676c:	2000428e 	.word	0x2000428e
   26770:	20004290 	.word	0x20004290
   26774:	000266fd 	.word	0x000266fd
   26778:	20005bcc 	.word	0x20005bcc

0002677c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   2677c:	b590      	push	{r4, r7, lr}
   2677e:	b085      	sub	sp, #20
   26780:	af00      	add	r7, sp, #0
   26782:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   26784:	2308      	movs	r3, #8
   26786:	18fb      	adds	r3, r7, r3
   26788:	4a0b      	ldr	r2, [pc, #44]	; (267b8 <_sercom_get_interrupt_vector+0x3c>)
   2678a:	6811      	ldr	r1, [r2, #0]
   2678c:	6019      	str	r1, [r3, #0]
   2678e:	8892      	ldrh	r2, [r2, #4]
   26790:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   26792:	230f      	movs	r3, #15
   26794:	18fc      	adds	r4, r7, r3
   26796:	687b      	ldr	r3, [r7, #4]
   26798:	0018      	movs	r0, r3
   2679a:	4b08      	ldr	r3, [pc, #32]	; (267bc <_sercom_get_interrupt_vector+0x40>)
   2679c:	4798      	blx	r3
   2679e:	0003      	movs	r3, r0
   267a0:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   267a2:	230f      	movs	r3, #15
   267a4:	18fb      	adds	r3, r7, r3
   267a6:	781b      	ldrb	r3, [r3, #0]
   267a8:	2208      	movs	r2, #8
   267aa:	18ba      	adds	r2, r7, r2
   267ac:	5cd3      	ldrb	r3, [r2, r3]
   267ae:	b25b      	sxtb	r3, r3
}
   267b0:	0018      	movs	r0, r3
   267b2:	46bd      	mov	sp, r7
   267b4:	b005      	add	sp, #20
   267b6:	bd90      	pop	{r4, r7, pc}
   267b8:	00038f84 	.word	0x00038f84
   267bc:	000266ad 	.word	0x000266ad

000267c0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   267c0:	b580      	push	{r7, lr}
   267c2:	af00      	add	r7, sp, #0
   267c4:	4b03      	ldr	r3, [pc, #12]	; (267d4 <SERCOM0_Handler+0x14>)
   267c6:	681b      	ldr	r3, [r3, #0]
   267c8:	2000      	movs	r0, #0
   267ca:	4798      	blx	r3
   267cc:	46c0      	nop			; (mov r8, r8)
   267ce:	46bd      	mov	sp, r7
   267d0:	bd80      	pop	{r7, pc}
   267d2:	46c0      	nop			; (mov r8, r8)
   267d4:	20004290 	.word	0x20004290

000267d8 <SERCOM1_Handler>:
   267d8:	b580      	push	{r7, lr}
   267da:	af00      	add	r7, sp, #0
   267dc:	4b03      	ldr	r3, [pc, #12]	; (267ec <SERCOM1_Handler+0x14>)
   267de:	685b      	ldr	r3, [r3, #4]
   267e0:	2001      	movs	r0, #1
   267e2:	4798      	blx	r3
   267e4:	46c0      	nop			; (mov r8, r8)
   267e6:	46bd      	mov	sp, r7
   267e8:	bd80      	pop	{r7, pc}
   267ea:	46c0      	nop			; (mov r8, r8)
   267ec:	20004290 	.word	0x20004290

000267f0 <SERCOM2_Handler>:
   267f0:	b580      	push	{r7, lr}
   267f2:	af00      	add	r7, sp, #0
   267f4:	4b03      	ldr	r3, [pc, #12]	; (26804 <SERCOM2_Handler+0x14>)
   267f6:	689b      	ldr	r3, [r3, #8]
   267f8:	2002      	movs	r0, #2
   267fa:	4798      	blx	r3
   267fc:	46c0      	nop			; (mov r8, r8)
   267fe:	46bd      	mov	sp, r7
   26800:	bd80      	pop	{r7, pc}
   26802:	46c0      	nop			; (mov r8, r8)
   26804:	20004290 	.word	0x20004290

00026808 <SERCOM3_Handler>:
   26808:	b580      	push	{r7, lr}
   2680a:	af00      	add	r7, sp, #0
   2680c:	4b03      	ldr	r3, [pc, #12]	; (2681c <SERCOM3_Handler+0x14>)
   2680e:	68db      	ldr	r3, [r3, #12]
   26810:	2003      	movs	r0, #3
   26812:	4798      	blx	r3
   26814:	46c0      	nop			; (mov r8, r8)
   26816:	46bd      	mov	sp, r7
   26818:	bd80      	pop	{r7, pc}
   2681a:	46c0      	nop			; (mov r8, r8)
   2681c:	20004290 	.word	0x20004290

00026820 <SERCOM4_Handler>:
   26820:	b580      	push	{r7, lr}
   26822:	af00      	add	r7, sp, #0
   26824:	4b03      	ldr	r3, [pc, #12]	; (26834 <SERCOM4_Handler+0x14>)
   26826:	691b      	ldr	r3, [r3, #16]
   26828:	2004      	movs	r0, #4
   2682a:	4798      	blx	r3
   2682c:	46c0      	nop			; (mov r8, r8)
   2682e:	46bd      	mov	sp, r7
   26830:	bd80      	pop	{r7, pc}
   26832:	46c0      	nop			; (mov r8, r8)
   26834:	20004290 	.word	0x20004290

00026838 <SERCOM5_Handler>:
   26838:	b580      	push	{r7, lr}
   2683a:	af00      	add	r7, sp, #0
   2683c:	4b03      	ldr	r3, [pc, #12]	; (2684c <SERCOM5_Handler+0x14>)
   2683e:	695b      	ldr	r3, [r3, #20]
   26840:	2005      	movs	r0, #5
   26842:	4798      	blx	r3
   26844:	46c0      	nop			; (mov r8, r8)
   26846:	46bd      	mov	sp, r7
   26848:	bd80      	pop	{r7, pc}
   2684a:	46c0      	nop			; (mov r8, r8)
   2684c:	20004290 	.word	0x20004290

00026850 <system_pinmux_get_config_defaults>:
{
   26850:	b580      	push	{r7, lr}
   26852:	b082      	sub	sp, #8
   26854:	af00      	add	r7, sp, #0
   26856:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   26858:	687b      	ldr	r3, [r7, #4]
   2685a:	2280      	movs	r2, #128	; 0x80
   2685c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2685e:	687b      	ldr	r3, [r7, #4]
   26860:	2200      	movs	r2, #0
   26862:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   26864:	687b      	ldr	r3, [r7, #4]
   26866:	2201      	movs	r2, #1
   26868:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2686a:	687b      	ldr	r3, [r7, #4]
   2686c:	2200      	movs	r2, #0
   2686e:	70da      	strb	r2, [r3, #3]
}
   26870:	46c0      	nop			; (mov r8, r8)
   26872:	46bd      	mov	sp, r7
   26874:	b002      	add	sp, #8
   26876:	bd80      	pop	{r7, pc}

00026878 <system_pinmux_get_group_from_gpio_pin>:
{
   26878:	b580      	push	{r7, lr}
   2687a:	b084      	sub	sp, #16
   2687c:	af00      	add	r7, sp, #0
   2687e:	0002      	movs	r2, r0
   26880:	1dfb      	adds	r3, r7, #7
   26882:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   26884:	230f      	movs	r3, #15
   26886:	18fb      	adds	r3, r7, r3
   26888:	1dfa      	adds	r2, r7, #7
   2688a:	7812      	ldrb	r2, [r2, #0]
   2688c:	09d2      	lsrs	r2, r2, #7
   2688e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   26890:	230e      	movs	r3, #14
   26892:	18fb      	adds	r3, r7, r3
   26894:	1dfa      	adds	r2, r7, #7
   26896:	7812      	ldrb	r2, [r2, #0]
   26898:	0952      	lsrs	r2, r2, #5
   2689a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   2689c:	4b0d      	ldr	r3, [pc, #52]	; (268d4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2689e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   268a0:	230f      	movs	r3, #15
   268a2:	18fb      	adds	r3, r7, r3
   268a4:	781b      	ldrb	r3, [r3, #0]
   268a6:	2b00      	cmp	r3, #0
   268a8:	d10f      	bne.n	268ca <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   268aa:	230f      	movs	r3, #15
   268ac:	18fb      	adds	r3, r7, r3
   268ae:	781b      	ldrb	r3, [r3, #0]
   268b0:	009b      	lsls	r3, r3, #2
   268b2:	2210      	movs	r2, #16
   268b4:	4694      	mov	ip, r2
   268b6:	44bc      	add	ip, r7
   268b8:	4463      	add	r3, ip
   268ba:	3b08      	subs	r3, #8
   268bc:	681a      	ldr	r2, [r3, #0]
   268be:	230e      	movs	r3, #14
   268c0:	18fb      	adds	r3, r7, r3
   268c2:	781b      	ldrb	r3, [r3, #0]
   268c4:	01db      	lsls	r3, r3, #7
   268c6:	18d3      	adds	r3, r2, r3
   268c8:	e000      	b.n	268cc <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   268ca:	2300      	movs	r3, #0
}
   268cc:	0018      	movs	r0, r3
   268ce:	46bd      	mov	sp, r7
   268d0:	b004      	add	sp, #16
   268d2:	bd80      	pop	{r7, pc}
   268d4:	41004400 	.word	0x41004400

000268d8 <port_get_group_from_gpio_pin>:
{
   268d8:	b580      	push	{r7, lr}
   268da:	b082      	sub	sp, #8
   268dc:	af00      	add	r7, sp, #0
   268de:	0002      	movs	r2, r0
   268e0:	1dfb      	adds	r3, r7, #7
   268e2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   268e4:	1dfb      	adds	r3, r7, #7
   268e6:	781b      	ldrb	r3, [r3, #0]
   268e8:	0018      	movs	r0, r3
   268ea:	4b03      	ldr	r3, [pc, #12]	; (268f8 <port_get_group_from_gpio_pin+0x20>)
   268ec:	4798      	blx	r3
   268ee:	0003      	movs	r3, r0
}
   268f0:	0018      	movs	r0, r3
   268f2:	46bd      	mov	sp, r7
   268f4:	b002      	add	sp, #8
   268f6:	bd80      	pop	{r7, pc}
   268f8:	00026879 	.word	0x00026879

000268fc <port_pin_set_output_level>:
{
   268fc:	b580      	push	{r7, lr}
   268fe:	b084      	sub	sp, #16
   26900:	af00      	add	r7, sp, #0
   26902:	0002      	movs	r2, r0
   26904:	1dfb      	adds	r3, r7, #7
   26906:	701a      	strb	r2, [r3, #0]
   26908:	1dbb      	adds	r3, r7, #6
   2690a:	1c0a      	adds	r2, r1, #0
   2690c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   2690e:	1dfb      	adds	r3, r7, #7
   26910:	781b      	ldrb	r3, [r3, #0]
   26912:	0018      	movs	r0, r3
   26914:	4b0d      	ldr	r3, [pc, #52]	; (2694c <port_pin_set_output_level+0x50>)
   26916:	4798      	blx	r3
   26918:	0003      	movs	r3, r0
   2691a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   2691c:	1dfb      	adds	r3, r7, #7
   2691e:	781b      	ldrb	r3, [r3, #0]
   26920:	221f      	movs	r2, #31
   26922:	4013      	ands	r3, r2
   26924:	2201      	movs	r2, #1
   26926:	409a      	lsls	r2, r3
   26928:	0013      	movs	r3, r2
   2692a:	60bb      	str	r3, [r7, #8]
	if (level) {
   2692c:	1dbb      	adds	r3, r7, #6
   2692e:	781b      	ldrb	r3, [r3, #0]
   26930:	2b00      	cmp	r3, #0
   26932:	d003      	beq.n	2693c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   26934:	68fb      	ldr	r3, [r7, #12]
   26936:	68ba      	ldr	r2, [r7, #8]
   26938:	619a      	str	r2, [r3, #24]
}
   2693a:	e002      	b.n	26942 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   2693c:	68fb      	ldr	r3, [r7, #12]
   2693e:	68ba      	ldr	r2, [r7, #8]
   26940:	615a      	str	r2, [r3, #20]
}
   26942:	46c0      	nop			; (mov r8, r8)
   26944:	46bd      	mov	sp, r7
   26946:	b004      	add	sp, #16
   26948:	bd80      	pop	{r7, pc}
   2694a:	46c0      	nop			; (mov r8, r8)
   2694c:	000268d9 	.word	0x000268d9

00026950 <system_gclk_chan_get_config_defaults>:
{
   26950:	b580      	push	{r7, lr}
   26952:	b082      	sub	sp, #8
   26954:	af00      	add	r7, sp, #0
   26956:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   26958:	687b      	ldr	r3, [r7, #4]
   2695a:	2200      	movs	r2, #0
   2695c:	701a      	strb	r2, [r3, #0]
}
   2695e:	46c0      	nop			; (mov r8, r8)
   26960:	46bd      	mov	sp, r7
   26962:	b002      	add	sp, #8
   26964:	bd80      	pop	{r7, pc}
	...

00026968 <system_apb_clock_set_mask>:
{
   26968:	b580      	push	{r7, lr}
   2696a:	b082      	sub	sp, #8
   2696c:	af00      	add	r7, sp, #0
   2696e:	0002      	movs	r2, r0
   26970:	6039      	str	r1, [r7, #0]
   26972:	1dfb      	adds	r3, r7, #7
   26974:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   26976:	1dfb      	adds	r3, r7, #7
   26978:	781b      	ldrb	r3, [r3, #0]
   2697a:	2b01      	cmp	r3, #1
   2697c:	d00a      	beq.n	26994 <system_apb_clock_set_mask+0x2c>
   2697e:	2b02      	cmp	r3, #2
   26980:	d00f      	beq.n	269a2 <system_apb_clock_set_mask+0x3a>
   26982:	2b00      	cmp	r3, #0
   26984:	d114      	bne.n	269b0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   26986:	4b0e      	ldr	r3, [pc, #56]	; (269c0 <system_apb_clock_set_mask+0x58>)
   26988:	4a0d      	ldr	r2, [pc, #52]	; (269c0 <system_apb_clock_set_mask+0x58>)
   2698a:	6991      	ldr	r1, [r2, #24]
   2698c:	683a      	ldr	r2, [r7, #0]
   2698e:	430a      	orrs	r2, r1
   26990:	619a      	str	r2, [r3, #24]
			break;
   26992:	e00f      	b.n	269b4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   26994:	4b0a      	ldr	r3, [pc, #40]	; (269c0 <system_apb_clock_set_mask+0x58>)
   26996:	4a0a      	ldr	r2, [pc, #40]	; (269c0 <system_apb_clock_set_mask+0x58>)
   26998:	69d1      	ldr	r1, [r2, #28]
   2699a:	683a      	ldr	r2, [r7, #0]
   2699c:	430a      	orrs	r2, r1
   2699e:	61da      	str	r2, [r3, #28]
			break;
   269a0:	e008      	b.n	269b4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   269a2:	4b07      	ldr	r3, [pc, #28]	; (269c0 <system_apb_clock_set_mask+0x58>)
   269a4:	4a06      	ldr	r2, [pc, #24]	; (269c0 <system_apb_clock_set_mask+0x58>)
   269a6:	6a11      	ldr	r1, [r2, #32]
   269a8:	683a      	ldr	r2, [r7, #0]
   269aa:	430a      	orrs	r2, r1
   269ac:	621a      	str	r2, [r3, #32]
			break;
   269ae:	e001      	b.n	269b4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   269b0:	2317      	movs	r3, #23
   269b2:	e000      	b.n	269b6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   269b4:	2300      	movs	r3, #0
}
   269b6:	0018      	movs	r0, r3
   269b8:	46bd      	mov	sp, r7
   269ba:	b002      	add	sp, #8
   269bc:	bd80      	pop	{r7, pc}
   269be:	46c0      	nop			; (mov r8, r8)
   269c0:	40000400 	.word	0x40000400

000269c4 <system_is_debugger_present>:
{
   269c4:	b580      	push	{r7, lr}
   269c6:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   269c8:	4b05      	ldr	r3, [pc, #20]	; (269e0 <system_is_debugger_present+0x1c>)
   269ca:	789b      	ldrb	r3, [r3, #2]
   269cc:	b2db      	uxtb	r3, r3
   269ce:	001a      	movs	r2, r3
   269d0:	2302      	movs	r3, #2
   269d2:	4013      	ands	r3, r2
   269d4:	1e5a      	subs	r2, r3, #1
   269d6:	4193      	sbcs	r3, r2
   269d8:	b2db      	uxtb	r3, r3
}
   269da:	0018      	movs	r0, r3
   269dc:	46bd      	mov	sp, r7
   269de:	bd80      	pop	{r7, pc}
   269e0:	41002000 	.word	0x41002000

000269e4 <system_interrupt_enable>:
{
   269e4:	b580      	push	{r7, lr}
   269e6:	b082      	sub	sp, #8
   269e8:	af00      	add	r7, sp, #0
   269ea:	0002      	movs	r2, r0
   269ec:	1dfb      	adds	r3, r7, #7
   269ee:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   269f0:	4b06      	ldr	r3, [pc, #24]	; (26a0c <system_interrupt_enable+0x28>)
   269f2:	1dfa      	adds	r2, r7, #7
   269f4:	7812      	ldrb	r2, [r2, #0]
   269f6:	0011      	movs	r1, r2
   269f8:	221f      	movs	r2, #31
   269fa:	400a      	ands	r2, r1
   269fc:	2101      	movs	r1, #1
   269fe:	4091      	lsls	r1, r2
   26a00:	000a      	movs	r2, r1
   26a02:	601a      	str	r2, [r3, #0]
}
   26a04:	46c0      	nop			; (mov r8, r8)
   26a06:	46bd      	mov	sp, r7
   26a08:	b002      	add	sp, #8
   26a0a:	bd80      	pop	{r7, pc}
   26a0c:	e000e100 	.word	0xe000e100

00026a10 <system_interrupt_disable>:
{
   26a10:	b580      	push	{r7, lr}
   26a12:	b082      	sub	sp, #8
   26a14:	af00      	add	r7, sp, #0
   26a16:	0002      	movs	r2, r0
   26a18:	1dfb      	adds	r3, r7, #7
   26a1a:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   26a1c:	4a07      	ldr	r2, [pc, #28]	; (26a3c <system_interrupt_disable+0x2c>)
   26a1e:	1dfb      	adds	r3, r7, #7
   26a20:	781b      	ldrb	r3, [r3, #0]
   26a22:	0019      	movs	r1, r3
   26a24:	231f      	movs	r3, #31
   26a26:	400b      	ands	r3, r1
   26a28:	2101      	movs	r1, #1
   26a2a:	4099      	lsls	r1, r3
   26a2c:	000b      	movs	r3, r1
   26a2e:	0019      	movs	r1, r3
   26a30:	2380      	movs	r3, #128	; 0x80
   26a32:	50d1      	str	r1, [r2, r3]
}
   26a34:	46c0      	nop			; (mov r8, r8)
   26a36:	46bd      	mov	sp, r7
   26a38:	b002      	add	sp, #8
   26a3a:	bd80      	pop	{r7, pc}
   26a3c:	e000e100 	.word	0xe000e100

00026a40 <spi_is_syncing>:
{
   26a40:	b580      	push	{r7, lr}
   26a42:	b084      	sub	sp, #16
   26a44:	af00      	add	r7, sp, #0
   26a46:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   26a48:	687b      	ldr	r3, [r7, #4]
   26a4a:	681b      	ldr	r3, [r3, #0]
   26a4c:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   26a4e:	68fb      	ldr	r3, [r7, #12]
   26a50:	69db      	ldr	r3, [r3, #28]
   26a52:	1e5a      	subs	r2, r3, #1
   26a54:	4193      	sbcs	r3, r2
   26a56:	b2db      	uxtb	r3, r3
}
   26a58:	0018      	movs	r0, r3
   26a5a:	46bd      	mov	sp, r7
   26a5c:	b004      	add	sp, #16
   26a5e:	bd80      	pop	{r7, pc}

00026a60 <spi_enable>:
{
   26a60:	b580      	push	{r7, lr}
   26a62:	b084      	sub	sp, #16
   26a64:	af00      	add	r7, sp, #0
   26a66:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   26a68:	687b      	ldr	r3, [r7, #4]
   26a6a:	681b      	ldr	r3, [r3, #0]
   26a6c:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   26a6e:	687b      	ldr	r3, [r7, #4]
   26a70:	681b      	ldr	r3, [r3, #0]
   26a72:	0018      	movs	r0, r3
   26a74:	4b0b      	ldr	r3, [pc, #44]	; (26aa4 <spi_enable+0x44>)
   26a76:	4798      	blx	r3
   26a78:	0003      	movs	r3, r0
   26a7a:	0018      	movs	r0, r3
   26a7c:	4b0a      	ldr	r3, [pc, #40]	; (26aa8 <spi_enable+0x48>)
   26a7e:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   26a80:	46c0      	nop			; (mov r8, r8)
   26a82:	687b      	ldr	r3, [r7, #4]
   26a84:	0018      	movs	r0, r3
   26a86:	4b09      	ldr	r3, [pc, #36]	; (26aac <spi_enable+0x4c>)
   26a88:	4798      	blx	r3
   26a8a:	1e03      	subs	r3, r0, #0
   26a8c:	d1f9      	bne.n	26a82 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   26a8e:	68fb      	ldr	r3, [r7, #12]
   26a90:	681b      	ldr	r3, [r3, #0]
   26a92:	2202      	movs	r2, #2
   26a94:	431a      	orrs	r2, r3
   26a96:	68fb      	ldr	r3, [r7, #12]
   26a98:	601a      	str	r2, [r3, #0]
}
   26a9a:	46c0      	nop			; (mov r8, r8)
   26a9c:	46bd      	mov	sp, r7
   26a9e:	b004      	add	sp, #16
   26aa0:	bd80      	pop	{r7, pc}
   26aa2:	46c0      	nop			; (mov r8, r8)
   26aa4:	0002677d 	.word	0x0002677d
   26aa8:	000269e5 	.word	0x000269e5
   26aac:	00026a41 	.word	0x00026a41

00026ab0 <spi_disable>:
{
   26ab0:	b580      	push	{r7, lr}
   26ab2:	b084      	sub	sp, #16
   26ab4:	af00      	add	r7, sp, #0
   26ab6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   26ab8:	687b      	ldr	r3, [r7, #4]
   26aba:	681b      	ldr	r3, [r3, #0]
   26abc:	60fb      	str	r3, [r7, #12]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   26abe:	687b      	ldr	r3, [r7, #4]
   26ac0:	681b      	ldr	r3, [r3, #0]
   26ac2:	0018      	movs	r0, r3
   26ac4:	4b0e      	ldr	r3, [pc, #56]	; (26b00 <spi_disable+0x50>)
   26ac6:	4798      	blx	r3
   26ac8:	0003      	movs	r3, r0
   26aca:	0018      	movs	r0, r3
   26acc:	4b0d      	ldr	r3, [pc, #52]	; (26b04 <spi_disable+0x54>)
   26ace:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   26ad0:	46c0      	nop			; (mov r8, r8)
   26ad2:	687b      	ldr	r3, [r7, #4]
   26ad4:	0018      	movs	r0, r3
   26ad6:	4b0c      	ldr	r3, [pc, #48]	; (26b08 <spi_disable+0x58>)
   26ad8:	4798      	blx	r3
   26ada:	1e03      	subs	r3, r0, #0
   26adc:	d1f9      	bne.n	26ad2 <spi_disable+0x22>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   26ade:	68fb      	ldr	r3, [r7, #12]
   26ae0:	228f      	movs	r2, #143	; 0x8f
   26ae2:	751a      	strb	r2, [r3, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   26ae4:	68fb      	ldr	r3, [r7, #12]
   26ae6:	228f      	movs	r2, #143	; 0x8f
   26ae8:	761a      	strb	r2, [r3, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   26aea:	68fb      	ldr	r3, [r7, #12]
   26aec:	681b      	ldr	r3, [r3, #0]
   26aee:	2202      	movs	r2, #2
   26af0:	4393      	bics	r3, r2
   26af2:	001a      	movs	r2, r3
   26af4:	68fb      	ldr	r3, [r7, #12]
   26af6:	601a      	str	r2, [r3, #0]
}
   26af8:	46c0      	nop			; (mov r8, r8)
   26afa:	46bd      	mov	sp, r7
   26afc:	b004      	add	sp, #16
   26afe:	bd80      	pop	{r7, pc}
   26b00:	0002677d 	.word	0x0002677d
   26b04:	00026a11 	.word	0x00026a11
   26b08:	00026a41 	.word	0x00026a41

00026b0c <spi_is_write_complete>:
{
   26b0c:	b580      	push	{r7, lr}
   26b0e:	b084      	sub	sp, #16
   26b10:	af00      	add	r7, sp, #0
   26b12:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   26b14:	687b      	ldr	r3, [r7, #4]
   26b16:	681b      	ldr	r3, [r3, #0]
   26b18:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   26b1a:	68fb      	ldr	r3, [r7, #12]
   26b1c:	7e1b      	ldrb	r3, [r3, #24]
   26b1e:	b2db      	uxtb	r3, r3
   26b20:	001a      	movs	r2, r3
   26b22:	2302      	movs	r3, #2
   26b24:	4013      	ands	r3, r2
   26b26:	1e5a      	subs	r2, r3, #1
   26b28:	4193      	sbcs	r3, r2
   26b2a:	b2db      	uxtb	r3, r3
}
   26b2c:	0018      	movs	r0, r3
   26b2e:	46bd      	mov	sp, r7
   26b30:	b004      	add	sp, #16
   26b32:	bd80      	pop	{r7, pc}

00026b34 <spi_is_ready_to_write>:
{
   26b34:	b580      	push	{r7, lr}
   26b36:	b084      	sub	sp, #16
   26b38:	af00      	add	r7, sp, #0
   26b3a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   26b3c:	687b      	ldr	r3, [r7, #4]
   26b3e:	681b      	ldr	r3, [r3, #0]
   26b40:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   26b42:	68fb      	ldr	r3, [r7, #12]
   26b44:	7e1b      	ldrb	r3, [r3, #24]
   26b46:	b2db      	uxtb	r3, r3
   26b48:	001a      	movs	r2, r3
   26b4a:	2301      	movs	r3, #1
   26b4c:	4013      	ands	r3, r2
   26b4e:	1e5a      	subs	r2, r3, #1
   26b50:	4193      	sbcs	r3, r2
   26b52:	b2db      	uxtb	r3, r3
}
   26b54:	0018      	movs	r0, r3
   26b56:	46bd      	mov	sp, r7
   26b58:	b004      	add	sp, #16
   26b5a:	bd80      	pop	{r7, pc}

00026b5c <spi_is_ready_to_read>:
{
   26b5c:	b580      	push	{r7, lr}
   26b5e:	b084      	sub	sp, #16
   26b60:	af00      	add	r7, sp, #0
   26b62:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   26b64:	687b      	ldr	r3, [r7, #4]
   26b66:	681b      	ldr	r3, [r3, #0]
   26b68:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   26b6a:	68fb      	ldr	r3, [r7, #12]
   26b6c:	7e1b      	ldrb	r3, [r3, #24]
   26b6e:	b2db      	uxtb	r3, r3
   26b70:	001a      	movs	r2, r3
   26b72:	2304      	movs	r3, #4
   26b74:	4013      	ands	r3, r2
   26b76:	1e5a      	subs	r2, r3, #1
   26b78:	4193      	sbcs	r3, r2
   26b7a:	b2db      	uxtb	r3, r3
}
   26b7c:	0018      	movs	r0, r3
   26b7e:	46bd      	mov	sp, r7
   26b80:	b004      	add	sp, #16
   26b82:	bd80      	pop	{r7, pc}

00026b84 <spi_write>:
{
   26b84:	b580      	push	{r7, lr}
   26b86:	b084      	sub	sp, #16
   26b88:	af00      	add	r7, sp, #0
   26b8a:	6078      	str	r0, [r7, #4]
   26b8c:	000a      	movs	r2, r1
   26b8e:	1cbb      	adds	r3, r7, #2
   26b90:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   26b92:	687b      	ldr	r3, [r7, #4]
   26b94:	681b      	ldr	r3, [r3, #0]
   26b96:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
   26b98:	687b      	ldr	r3, [r7, #4]
   26b9a:	0018      	movs	r0, r3
   26b9c:	4b0a      	ldr	r3, [pc, #40]	; (26bc8 <spi_write+0x44>)
   26b9e:	4798      	blx	r3
   26ba0:	0003      	movs	r3, r0
   26ba2:	001a      	movs	r2, r3
   26ba4:	2301      	movs	r3, #1
   26ba6:	4053      	eors	r3, r2
   26ba8:	b2db      	uxtb	r3, r3
   26baa:	2b00      	cmp	r3, #0
   26bac:	d001      	beq.n	26bb2 <spi_write+0x2e>
		return STATUS_BUSY;
   26bae:	2305      	movs	r3, #5
   26bb0:	e006      	b.n	26bc0 <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   26bb2:	1cbb      	adds	r3, r7, #2
   26bb4:	881b      	ldrh	r3, [r3, #0]
   26bb6:	05db      	lsls	r3, r3, #23
   26bb8:	0dda      	lsrs	r2, r3, #23
   26bba:	68fb      	ldr	r3, [r7, #12]
   26bbc:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
   26bbe:	2300      	movs	r3, #0
}
   26bc0:	0018      	movs	r0, r3
   26bc2:	46bd      	mov	sp, r7
   26bc4:	b004      	add	sp, #16
   26bc6:	bd80      	pop	{r7, pc}
   26bc8:	00026b35 	.word	0x00026b35

00026bcc <spi_read>:
{
   26bcc:	b580      	push	{r7, lr}
   26bce:	b084      	sub	sp, #16
   26bd0:	af00      	add	r7, sp, #0
   26bd2:	6078      	str	r0, [r7, #4]
   26bd4:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   26bd6:	687b      	ldr	r3, [r7, #4]
   26bd8:	681b      	ldr	r3, [r3, #0]
   26bda:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
   26bdc:	687b      	ldr	r3, [r7, #4]
   26bde:	0018      	movs	r0, r3
   26be0:	4b1b      	ldr	r3, [pc, #108]	; (26c50 <spi_read+0x84>)
   26be2:	4798      	blx	r3
   26be4:	0003      	movs	r3, r0
   26be6:	001a      	movs	r2, r3
   26be8:	2301      	movs	r3, #1
   26bea:	4053      	eors	r3, r2
   26bec:	b2db      	uxtb	r3, r3
   26bee:	2b00      	cmp	r3, #0
   26bf0:	d001      	beq.n	26bf6 <spi_read+0x2a>
		return STATUS_ERR_IO;
   26bf2:	2310      	movs	r3, #16
   26bf4:	e027      	b.n	26c46 <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
   26bf6:	230f      	movs	r3, #15
   26bf8:	18fb      	adds	r3, r7, r3
   26bfa:	2200      	movs	r2, #0
   26bfc:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   26bfe:	68bb      	ldr	r3, [r7, #8]
   26c00:	8b5b      	ldrh	r3, [r3, #26]
   26c02:	b29b      	uxth	r3, r3
   26c04:	001a      	movs	r2, r3
   26c06:	2304      	movs	r3, #4
   26c08:	4013      	ands	r3, r2
   26c0a:	d006      	beq.n	26c1a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   26c0c:	230f      	movs	r3, #15
   26c0e:	18fb      	adds	r3, r7, r3
   26c10:	221e      	movs	r2, #30
   26c12:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   26c14:	68bb      	ldr	r3, [r7, #8]
   26c16:	2204      	movs	r2, #4
   26c18:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   26c1a:	687b      	ldr	r3, [r7, #4]
   26c1c:	799b      	ldrb	r3, [r3, #6]
   26c1e:	2b01      	cmp	r3, #1
   26c20:	d108      	bne.n	26c34 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   26c22:	68bb      	ldr	r3, [r7, #8]
   26c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26c26:	b29b      	uxth	r3, r3
   26c28:	05db      	lsls	r3, r3, #23
   26c2a:	0ddb      	lsrs	r3, r3, #23
   26c2c:	b29a      	uxth	r2, r3
   26c2e:	683b      	ldr	r3, [r7, #0]
   26c30:	801a      	strh	r2, [r3, #0]
   26c32:	e005      	b.n	26c40 <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   26c34:	68bb      	ldr	r3, [r7, #8]
   26c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26c38:	b2db      	uxtb	r3, r3
   26c3a:	b29a      	uxth	r2, r3
   26c3c:	683b      	ldr	r3, [r7, #0]
   26c3e:	801a      	strh	r2, [r3, #0]
	return retval;
   26c40:	230f      	movs	r3, #15
   26c42:	18fb      	adds	r3, r7, r3
   26c44:	781b      	ldrb	r3, [r3, #0]
}
   26c46:	0018      	movs	r0, r3
   26c48:	46bd      	mov	sp, r7
   26c4a:	b004      	add	sp, #16
   26c4c:	bd80      	pop	{r7, pc}
   26c4e:	46c0      	nop			; (mov r8, r8)
   26c50:	00026b5d 	.word	0x00026b5d

00026c54 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
   26c54:	b590      	push	{r4, r7, lr}
   26c56:	b089      	sub	sp, #36	; 0x24
   26c58:	af00      	add	r7, sp, #0
   26c5a:	6078      	str	r0, [r7, #4]
   26c5c:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
   26c5e:	230c      	movs	r3, #12
   26c60:	18fb      	adds	r3, r7, r3
   26c62:	2200      	movs	r2, #0
   26c64:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   26c66:	687b      	ldr	r3, [r7, #4]
   26c68:	681b      	ldr	r3, [r3, #0]
   26c6a:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
   26c6c:	687b      	ldr	r3, [r7, #4]
   26c6e:	0018      	movs	r0, r3
   26c70:	4b24      	ldr	r3, [pc, #144]	; (26d04 <spi_set_baudrate+0xb0>)
   26c72:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   26c74:	46c0      	nop			; (mov r8, r8)
   26c76:	687b      	ldr	r3, [r7, #4]
   26c78:	0018      	movs	r0, r3
   26c7a:	4b23      	ldr	r3, [pc, #140]	; (26d08 <spi_set_baudrate+0xb4>)
   26c7c:	4798      	blx	r3
   26c7e:	1e03      	subs	r3, r0, #0
   26c80:	d1f9      	bne.n	26c76 <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   26c82:	687b      	ldr	r3, [r7, #4]
   26c84:	681b      	ldr	r3, [r3, #0]
   26c86:	0018      	movs	r0, r3
   26c88:	4b20      	ldr	r3, [pc, #128]	; (26d0c <spi_set_baudrate+0xb8>)
   26c8a:	4798      	blx	r3
   26c8c:	0003      	movs	r3, r0
   26c8e:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   26c90:	69bb      	ldr	r3, [r7, #24]
   26c92:	3314      	adds	r3, #20
   26c94:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   26c96:	697b      	ldr	r3, [r7, #20]
   26c98:	b2db      	uxtb	r3, r3
   26c9a:	0018      	movs	r0, r3
   26c9c:	4b1c      	ldr	r3, [pc, #112]	; (26d10 <spi_set_baudrate+0xbc>)
   26c9e:	4798      	blx	r3
   26ca0:	0003      	movs	r3, r0
   26ca2:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
   26ca4:	230f      	movs	r3, #15
   26ca6:	18fc      	adds	r4, r7, r3
   26ca8:	230c      	movs	r3, #12
   26caa:	18fa      	adds	r2, r7, r3
   26cac:	6939      	ldr	r1, [r7, #16]
   26cae:	683b      	ldr	r3, [r7, #0]
   26cb0:	0018      	movs	r0, r3
   26cb2:	4b18      	ldr	r3, [pc, #96]	; (26d14 <spi_set_baudrate+0xc0>)
   26cb4:	4798      	blx	r3
   26cb6:	0003      	movs	r3, r0
   26cb8:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
   26cba:	230f      	movs	r3, #15
   26cbc:	18fb      	adds	r3, r7, r3
   26cbe:	781b      	ldrb	r3, [r3, #0]
   26cc0:	2b00      	cmp	r3, #0
   26cc2:	d001      	beq.n	26cc8 <spi_set_baudrate+0x74>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
   26cc4:	2317      	movs	r3, #23
   26cc6:	e018      	b.n	26cfa <spi_set_baudrate+0xa6>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
   26cc8:	230c      	movs	r3, #12
   26cca:	18fb      	adds	r3, r7, r3
   26ccc:	881b      	ldrh	r3, [r3, #0]
   26cce:	b2da      	uxtb	r2, r3
   26cd0:	69fb      	ldr	r3, [r7, #28]
   26cd2:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
   26cd4:	46c0      	nop			; (mov r8, r8)
   26cd6:	687b      	ldr	r3, [r7, #4]
   26cd8:	0018      	movs	r0, r3
   26cda:	4b0b      	ldr	r3, [pc, #44]	; (26d08 <spi_set_baudrate+0xb4>)
   26cdc:	4798      	blx	r3
   26cde:	1e03      	subs	r3, r0, #0
   26ce0:	d1f9      	bne.n	26cd6 <spi_set_baudrate+0x82>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
   26ce2:	687b      	ldr	r3, [r7, #4]
   26ce4:	0018      	movs	r0, r3
   26ce6:	4b0c      	ldr	r3, [pc, #48]	; (26d18 <spi_set_baudrate+0xc4>)
   26ce8:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   26cea:	46c0      	nop			; (mov r8, r8)
   26cec:	687b      	ldr	r3, [r7, #4]
   26cee:	0018      	movs	r0, r3
   26cf0:	4b05      	ldr	r3, [pc, #20]	; (26d08 <spi_set_baudrate+0xb4>)
   26cf2:	4798      	blx	r3
   26cf4:	1e03      	subs	r3, r0, #0
   26cf6:	d1f9      	bne.n	26cec <spi_set_baudrate+0x98>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
   26cf8:	2300      	movs	r3, #0
}
   26cfa:	0018      	movs	r0, r3
   26cfc:	46bd      	mov	sp, r7
   26cfe:	b009      	add	sp, #36	; 0x24
   26d00:	bd90      	pop	{r4, r7, pc}
   26d02:	46c0      	nop			; (mov r8, r8)
   26d04:	00026ab1 	.word	0x00026ab1
   26d08:	00026a41 	.word	0x00026a41
   26d0c:	000266ad 	.word	0x000266ad
   26d10:	00029061 	.word	0x00029061
   26d14:	00026227 	.word	0x00026227
   26d18:	00026a61 	.word	0x00026a61

00026d1c <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   26d1c:	b590      	push	{r4, r7, lr}
   26d1e:	b093      	sub	sp, #76	; 0x4c
   26d20:	af00      	add	r7, sp, #0
   26d22:	6078      	str	r0, [r7, #4]
   26d24:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   26d26:	687b      	ldr	r3, [r7, #4]
   26d28:	681b      	ldr	r3, [r3, #0]
   26d2a:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
   26d2c:	687b      	ldr	r3, [r7, #4]
   26d2e:	681b      	ldr	r3, [r3, #0]
   26d30:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   26d32:	231c      	movs	r3, #28
   26d34:	18fb      	adds	r3, r7, r3
   26d36:	0018      	movs	r0, r3
   26d38:	4b75      	ldr	r3, [pc, #468]	; (26f10 <_spi_set_config+0x1f4>)
   26d3a:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   26d3c:	231c      	movs	r3, #28
   26d3e:	18fb      	adds	r3, r7, r3
   26d40:	2200      	movs	r2, #0
   26d42:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
   26d44:	683b      	ldr	r3, [r7, #0]
   26d46:	781b      	ldrb	r3, [r3, #0]
   26d48:	2b00      	cmp	r3, #0
   26d4a:	d103      	bne.n	26d54 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   26d4c:	231c      	movs	r3, #28
   26d4e:	18fb      	adds	r3, r7, r3
   26d50:	2200      	movs	r2, #0
   26d52:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   26d54:	683b      	ldr	r3, [r7, #0]
   26d56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
   26d58:	230c      	movs	r3, #12
   26d5a:	18fb      	adds	r3, r7, r3
   26d5c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   26d5e:	683b      	ldr	r3, [r7, #0]
   26d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
   26d62:	230c      	movs	r3, #12
   26d64:	18fb      	adds	r3, r7, r3
   26d66:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   26d68:	683b      	ldr	r3, [r7, #0]
   26d6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   26d6c:	230c      	movs	r3, #12
   26d6e:	18fb      	adds	r3, r7, r3
   26d70:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   26d72:	683b      	ldr	r3, [r7, #0]
   26d74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   26d76:	230c      	movs	r3, #12
   26d78:	18fb      	adds	r3, r7, r3
   26d7a:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   26d7c:	2347      	movs	r3, #71	; 0x47
   26d7e:	18fb      	adds	r3, r7, r3
   26d80:	2200      	movs	r2, #0
   26d82:	701a      	strb	r2, [r3, #0]
   26d84:	e02c      	b.n	26de0 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   26d86:	2347      	movs	r3, #71	; 0x47
   26d88:	18fb      	adds	r3, r7, r3
   26d8a:	781a      	ldrb	r2, [r3, #0]
   26d8c:	230c      	movs	r3, #12
   26d8e:	18fb      	adds	r3, r7, r3
   26d90:	0092      	lsls	r2, r2, #2
   26d92:	58d3      	ldr	r3, [r2, r3]
   26d94:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   26d96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   26d98:	2b00      	cmp	r3, #0
   26d9a:	d109      	bne.n	26db0 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   26d9c:	2347      	movs	r3, #71	; 0x47
   26d9e:	18fb      	adds	r3, r7, r3
   26da0:	781a      	ldrb	r2, [r3, #0]
   26da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   26da4:	0011      	movs	r1, r2
   26da6:	0018      	movs	r0, r3
   26da8:	4b5a      	ldr	r3, [pc, #360]	; (26f14 <_spi_set_config+0x1f8>)
   26daa:	4798      	blx	r3
   26dac:	0003      	movs	r3, r0
   26dae:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   26db0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   26db2:	3301      	adds	r3, #1
   26db4:	d00d      	beq.n	26dd2 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   26db6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   26db8:	b2da      	uxtb	r2, r3
   26dba:	231c      	movs	r3, #28
   26dbc:	18fb      	adds	r3, r7, r3
   26dbe:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   26dc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   26dc2:	0c1b      	lsrs	r3, r3, #16
   26dc4:	b2db      	uxtb	r3, r3
   26dc6:	221c      	movs	r2, #28
   26dc8:	18ba      	adds	r2, r7, r2
   26dca:	0011      	movs	r1, r2
   26dcc:	0018      	movs	r0, r3
   26dce:	4b52      	ldr	r3, [pc, #328]	; (26f18 <_spi_set_config+0x1fc>)
   26dd0:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   26dd2:	2347      	movs	r3, #71	; 0x47
   26dd4:	18fb      	adds	r3, r7, r3
   26dd6:	781a      	ldrb	r2, [r3, #0]
   26dd8:	2347      	movs	r3, #71	; 0x47
   26dda:	18fb      	adds	r3, r7, r3
   26ddc:	3201      	adds	r2, #1
   26dde:	701a      	strb	r2, [r3, #0]
   26de0:	2347      	movs	r3, #71	; 0x47
   26de2:	18fb      	adds	r3, r7, r3
   26de4:	781b      	ldrb	r3, [r3, #0]
   26de6:	2b03      	cmp	r3, #3
   26de8:	d9cd      	bls.n	26d86 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
   26dea:	683b      	ldr	r3, [r7, #0]
   26dec:	781a      	ldrb	r2, [r3, #0]
   26dee:	687b      	ldr	r3, [r7, #4]
   26df0:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
   26df2:	683b      	ldr	r3, [r7, #0]
   26df4:	7c1a      	ldrb	r2, [r3, #16]
   26df6:	687b      	ldr	r3, [r7, #4]
   26df8:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
   26dfa:	683b      	ldr	r3, [r7, #0]
   26dfc:	7c9a      	ldrb	r2, [r3, #18]
   26dfe:	687b      	ldr	r3, [r7, #4]
   26e00:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
   26e02:	683b      	ldr	r3, [r7, #0]
   26e04:	7d1a      	ldrb	r2, [r3, #20]
   26e06:	687b      	ldr	r3, [r7, #4]
   26e08:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
   26e0a:	230a      	movs	r3, #10
   26e0c:	18fb      	adds	r3, r7, r3
   26e0e:	2200      	movs	r2, #0
   26e10:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
   26e12:	2300      	movs	r3, #0
   26e14:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
   26e16:	2300      	movs	r3, #0
   26e18:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
   26e1a:	683b      	ldr	r3, [r7, #0]
   26e1c:	781b      	ldrb	r3, [r3, #0]
   26e1e:	2b01      	cmp	r3, #1
   26e20:	d129      	bne.n	26e76 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   26e22:	687b      	ldr	r3, [r7, #4]
   26e24:	681b      	ldr	r3, [r3, #0]
   26e26:	0018      	movs	r0, r3
   26e28:	4b3c      	ldr	r3, [pc, #240]	; (26f1c <_spi_set_config+0x200>)
   26e2a:	4798      	blx	r3
   26e2c:	0003      	movs	r3, r0
   26e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   26e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26e32:	3314      	adds	r3, #20
   26e34:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   26e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
   26e38:	b2db      	uxtb	r3, r3
   26e3a:	0018      	movs	r0, r3
   26e3c:	4b38      	ldr	r3, [pc, #224]	; (26f20 <_spi_set_config+0x204>)
   26e3e:	4798      	blx	r3
   26e40:	0003      	movs	r3, r0
   26e42:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
   26e44:	683b      	ldr	r3, [r7, #0]
   26e46:	699b      	ldr	r3, [r3, #24]
   26e48:	2223      	movs	r2, #35	; 0x23
   26e4a:	18bc      	adds	r4, r7, r2
   26e4c:	220a      	movs	r2, #10
   26e4e:	18ba      	adds	r2, r7, r2
   26e50:	6a79      	ldr	r1, [r7, #36]	; 0x24
   26e52:	0018      	movs	r0, r3
   26e54:	4b33      	ldr	r3, [pc, #204]	; (26f24 <_spi_set_config+0x208>)
   26e56:	4798      	blx	r3
   26e58:	0003      	movs	r3, r0
   26e5a:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
   26e5c:	2323      	movs	r3, #35	; 0x23
   26e5e:	18fb      	adds	r3, r7, r3
   26e60:	781b      	ldrb	r3, [r3, #0]
   26e62:	2b00      	cmp	r3, #0
   26e64:	d001      	beq.n	26e6a <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   26e66:	2317      	movs	r3, #23
   26e68:	e04e      	b.n	26f08 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
   26e6a:	230a      	movs	r3, #10
   26e6c:	18fb      	adds	r3, r7, r3
   26e6e:	881b      	ldrh	r3, [r3, #0]
   26e70:	b2da      	uxtb	r2, r3
   26e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   26e74:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
   26e76:	683b      	ldr	r3, [r7, #0]
   26e78:	685b      	ldr	r3, [r3, #4]
   26e7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   26e7c:	4313      	orrs	r3, r2
   26e7e:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   26e80:	683b      	ldr	r3, [r7, #0]
   26e82:	689b      	ldr	r3, [r3, #8]
   26e84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   26e86:	4313      	orrs	r3, r2
   26e88:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
   26e8a:	683b      	ldr	r3, [r7, #0]
   26e8c:	68db      	ldr	r3, [r3, #12]
   26e8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   26e90:	4313      	orrs	r3, r2
   26e92:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
   26e94:	683b      	ldr	r3, [r7, #0]
   26e96:	7c1b      	ldrb	r3, [r3, #16]
   26e98:	001a      	movs	r2, r3
   26e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   26e9c:	4313      	orrs	r3, r2
   26e9e:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   26ea0:	683b      	ldr	r3, [r7, #0]
   26ea2:	7c5b      	ldrb	r3, [r3, #17]
   26ea4:	2b00      	cmp	r3, #0
   26ea6:	d103      	bne.n	26eb0 <_spi_set_config+0x194>
   26ea8:	4b1f      	ldr	r3, [pc, #124]	; (26f28 <_spi_set_config+0x20c>)
   26eaa:	4798      	blx	r3
   26eac:	1e03      	subs	r3, r0, #0
   26eae:	d003      	beq.n	26eb8 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   26eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   26eb2:	2280      	movs	r2, #128	; 0x80
   26eb4:	4313      	orrs	r3, r2
   26eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
   26eb8:	683b      	ldr	r3, [r7, #0]
   26eba:	7c9b      	ldrb	r3, [r3, #18]
   26ebc:	2b00      	cmp	r3, #0
   26ebe:	d004      	beq.n	26eca <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   26ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   26ec2:	2280      	movs	r2, #128	; 0x80
   26ec4:	0292      	lsls	r2, r2, #10
   26ec6:	4313      	orrs	r3, r2
   26ec8:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
   26eca:	683b      	ldr	r3, [r7, #0]
   26ecc:	7cdb      	ldrb	r3, [r3, #19]
   26ece:	2b00      	cmp	r3, #0
   26ed0:	d004      	beq.n	26edc <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   26ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   26ed4:	2280      	movs	r2, #128	; 0x80
   26ed6:	0092      	lsls	r2, r2, #2
   26ed8:	4313      	orrs	r3, r2
   26eda:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
   26edc:	683b      	ldr	r3, [r7, #0]
   26ede:	7d1b      	ldrb	r3, [r3, #20]
   26ee0:	2b00      	cmp	r3, #0
   26ee2:	d004      	beq.n	26eee <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   26ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   26ee6:	2280      	movs	r2, #128	; 0x80
   26ee8:	0192      	lsls	r2, r2, #6
   26eea:	4313      	orrs	r3, r2
   26eec:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
   26eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   26ef0:	681a      	ldr	r2, [r3, #0]
   26ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   26ef4:	431a      	orrs	r2, r3
   26ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   26ef8:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
   26efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   26efc:	685a      	ldr	r2, [r3, #4]
   26efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   26f00:	431a      	orrs	r2, r3
   26f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   26f04:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   26f06:	2300      	movs	r3, #0
}
   26f08:	0018      	movs	r0, r3
   26f0a:	46bd      	mov	sp, r7
   26f0c:	b013      	add	sp, #76	; 0x4c
   26f0e:	bd90      	pop	{r4, r7, pc}
   26f10:	00026851 	.word	0x00026851
   26f14:	000264f1 	.word	0x000264f1
   26f18:	0002929d 	.word	0x0002929d
   26f1c:	000266ad 	.word	0x000266ad
   26f20:	00029061 	.word	0x00029061
   26f24:	00026227 	.word	0x00026227
   26f28:	000269c5 	.word	0x000269c5

00026f2c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   26f2c:	b590      	push	{r4, r7, lr}
   26f2e:	b08b      	sub	sp, #44	; 0x2c
   26f30:	af00      	add	r7, sp, #0
   26f32:	60f8      	str	r0, [r7, #12]
   26f34:	60b9      	str	r1, [r7, #8]
   26f36:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   26f38:	68fb      	ldr	r3, [r7, #12]
   26f3a:	68ba      	ldr	r2, [r7, #8]
   26f3c:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   26f3e:	68fb      	ldr	r3, [r7, #12]
   26f40:	681b      	ldr	r3, [r3, #0]
   26f42:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   26f44:	6a3b      	ldr	r3, [r7, #32]
   26f46:	681b      	ldr	r3, [r3, #0]
   26f48:	2202      	movs	r2, #2
   26f4a:	4013      	ands	r3, r2
   26f4c:	d001      	beq.n	26f52 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
   26f4e:	231c      	movs	r3, #28
   26f50:	e09c      	b.n	2708c <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   26f52:	6a3b      	ldr	r3, [r7, #32]
   26f54:	681b      	ldr	r3, [r3, #0]
   26f56:	2201      	movs	r2, #1
   26f58:	4013      	ands	r3, r2
   26f5a:	d001      	beq.n	26f60 <spi_init+0x34>
		return STATUS_BUSY;
   26f5c:	2305      	movs	r3, #5
   26f5e:	e095      	b.n	2708c <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   26f60:	68fb      	ldr	r3, [r7, #12]
   26f62:	681b      	ldr	r3, [r3, #0]
   26f64:	0018      	movs	r0, r3
   26f66:	4b4b      	ldr	r3, [pc, #300]	; (27094 <spi_init+0x168>)
   26f68:	4798      	blx	r3
   26f6a:	0003      	movs	r3, r0
   26f6c:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   26f6e:	69fb      	ldr	r3, [r7, #28]
   26f70:	3302      	adds	r3, #2
   26f72:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   26f74:	69fb      	ldr	r3, [r7, #28]
   26f76:	3314      	adds	r3, #20
   26f78:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   26f7a:	2201      	movs	r2, #1
   26f7c:	69bb      	ldr	r3, [r7, #24]
   26f7e:	409a      	lsls	r2, r3
   26f80:	0013      	movs	r3, r2
   26f82:	0019      	movs	r1, r3
   26f84:	2002      	movs	r0, #2
   26f86:	4b44      	ldr	r3, [pc, #272]	; (27098 <spi_init+0x16c>)
   26f88:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   26f8a:	2310      	movs	r3, #16
   26f8c:	18fb      	adds	r3, r7, r3
   26f8e:	0018      	movs	r0, r3
   26f90:	4b42      	ldr	r3, [pc, #264]	; (2709c <spi_init+0x170>)
   26f92:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   26f94:	687b      	ldr	r3, [r7, #4]
   26f96:	2224      	movs	r2, #36	; 0x24
   26f98:	5c9a      	ldrb	r2, [r3, r2]
   26f9a:	2310      	movs	r3, #16
   26f9c:	18fb      	adds	r3, r7, r3
   26f9e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   26fa0:	697b      	ldr	r3, [r7, #20]
   26fa2:	b2db      	uxtb	r3, r3
   26fa4:	2210      	movs	r2, #16
   26fa6:	18ba      	adds	r2, r7, r2
   26fa8:	0011      	movs	r1, r2
   26faa:	0018      	movs	r0, r3
   26fac:	4b3c      	ldr	r3, [pc, #240]	; (270a0 <spi_init+0x174>)
   26fae:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   26fb0:	697b      	ldr	r3, [r7, #20]
   26fb2:	b2db      	uxtb	r3, r3
   26fb4:	0018      	movs	r0, r3
   26fb6:	4b3b      	ldr	r3, [pc, #236]	; (270a4 <spi_init+0x178>)
   26fb8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   26fba:	687b      	ldr	r3, [r7, #4]
   26fbc:	2224      	movs	r2, #36	; 0x24
   26fbe:	5c9b      	ldrb	r3, [r3, r2]
   26fc0:	2100      	movs	r1, #0
   26fc2:	0018      	movs	r0, r3
   26fc4:	4b38      	ldr	r3, [pc, #224]	; (270a8 <spi_init+0x17c>)
   26fc6:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
   26fc8:	687b      	ldr	r3, [r7, #4]
   26fca:	781b      	ldrb	r3, [r3, #0]
   26fcc:	2b01      	cmp	r3, #1
   26fce:	d105      	bne.n	26fdc <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   26fd0:	6a3b      	ldr	r3, [r7, #32]
   26fd2:	681b      	ldr	r3, [r3, #0]
   26fd4:	220c      	movs	r2, #12
   26fd6:	431a      	orrs	r2, r3
   26fd8:	6a3b      	ldr	r3, [r7, #32]
   26fda:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   26fdc:	2327      	movs	r3, #39	; 0x27
   26fde:	18fb      	adds	r3, r7, r3
   26fe0:	2200      	movs	r2, #0
   26fe2:	701a      	strb	r2, [r3, #0]
   26fe4:	e010      	b.n	27008 <spi_init+0xdc>
		module->callback[i]        = NULL;
   26fe6:	2327      	movs	r3, #39	; 0x27
   26fe8:	18fb      	adds	r3, r7, r3
   26fea:	781b      	ldrb	r3, [r3, #0]
   26fec:	68fa      	ldr	r2, [r7, #12]
   26fee:	3302      	adds	r3, #2
   26ff0:	009b      	lsls	r3, r3, #2
   26ff2:	18d3      	adds	r3, r2, r3
   26ff4:	3304      	adds	r3, #4
   26ff6:	2200      	movs	r2, #0
   26ff8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   26ffa:	2327      	movs	r3, #39	; 0x27
   26ffc:	18fb      	adds	r3, r7, r3
   26ffe:	781a      	ldrb	r2, [r3, #0]
   27000:	2327      	movs	r3, #39	; 0x27
   27002:	18fb      	adds	r3, r7, r3
   27004:	3201      	adds	r2, #1
   27006:	701a      	strb	r2, [r3, #0]
   27008:	2327      	movs	r3, #39	; 0x27
   2700a:	18fb      	adds	r3, r7, r3
   2700c:	781b      	ldrb	r3, [r3, #0]
   2700e:	2b06      	cmp	r3, #6
   27010:	d9e9      	bls.n	26fe6 <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
   27012:	68fb      	ldr	r3, [r7, #12]
   27014:	2200      	movs	r2, #0
   27016:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
   27018:	68fb      	ldr	r3, [r7, #12]
   2701a:	2200      	movs	r2, #0
   2701c:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
   2701e:	68fb      	ldr	r3, [r7, #12]
   27020:	2200      	movs	r2, #0
   27022:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
   27024:	68fb      	ldr	r3, [r7, #12]
   27026:	2200      	movs	r2, #0
   27028:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
   2702a:	68fb      	ldr	r3, [r7, #12]
   2702c:	2236      	movs	r2, #54	; 0x36
   2702e:	2100      	movs	r1, #0
   27030:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
   27032:	68fb      	ldr	r3, [r7, #12]
   27034:	2237      	movs	r2, #55	; 0x37
   27036:	2100      	movs	r1, #0
   27038:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
   2703a:	68fb      	ldr	r3, [r7, #12]
   2703c:	2238      	movs	r2, #56	; 0x38
   2703e:	2100      	movs	r1, #0
   27040:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
   27042:	68fb      	ldr	r3, [r7, #12]
   27044:	2203      	movs	r2, #3
   27046:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
   27048:	68fb      	ldr	r3, [r7, #12]
   2704a:	2200      	movs	r2, #0
   2704c:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
   2704e:	68fb      	ldr	r3, [r7, #12]
   27050:	681b      	ldr	r3, [r3, #0]
   27052:	2213      	movs	r2, #19
   27054:	18bc      	adds	r4, r7, r2
   27056:	0018      	movs	r0, r3
   27058:	4b0e      	ldr	r3, [pc, #56]	; (27094 <spi_init+0x168>)
   2705a:	4798      	blx	r3
   2705c:	0003      	movs	r3, r0
   2705e:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
   27060:	4a12      	ldr	r2, [pc, #72]	; (270ac <spi_init+0x180>)
   27062:	2313      	movs	r3, #19
   27064:	18fb      	adds	r3, r7, r3
   27066:	781b      	ldrb	r3, [r3, #0]
   27068:	0011      	movs	r1, r2
   2706a:	0018      	movs	r0, r3
   2706c:	4b10      	ldr	r3, [pc, #64]	; (270b0 <spi_init+0x184>)
   2706e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   27070:	2313      	movs	r3, #19
   27072:	18fb      	adds	r3, r7, r3
   27074:	781a      	ldrb	r2, [r3, #0]
   27076:	4b0f      	ldr	r3, [pc, #60]	; (270b4 <spi_init+0x188>)
   27078:	0092      	lsls	r2, r2, #2
   2707a:	68f9      	ldr	r1, [r7, #12]
   2707c:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
   2707e:	687a      	ldr	r2, [r7, #4]
   27080:	68fb      	ldr	r3, [r7, #12]
   27082:	0011      	movs	r1, r2
   27084:	0018      	movs	r0, r3
   27086:	4b0c      	ldr	r3, [pc, #48]	; (270b8 <spi_init+0x18c>)
   27088:	4798      	blx	r3
   2708a:	0003      	movs	r3, r0
}
   2708c:	0018      	movs	r0, r3
   2708e:	46bd      	mov	sp, r7
   27090:	b00b      	add	sp, #44	; 0x2c
   27092:	bd90      	pop	{r4, r7, pc}
   27094:	000266ad 	.word	0x000266ad
   27098:	00026969 	.word	0x00026969
   2709c:	00026951 	.word	0x00026951
   270a0:	00028f3d 	.word	0x00028f3d
   270a4:	00028f81 	.word	0x00028f81
   270a8:	00026465 	.word	0x00026465
   270ac:	00027585 	.word	0x00027585
   270b0:	00026711 	.word	0x00026711
   270b4:	20005bcc 	.word	0x20005bcc
   270b8:	00026d1d 	.word	0x00026d1d

000270bc <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   270bc:	b590      	push	{r4, r7, lr}
   270be:	b087      	sub	sp, #28
   270c0:	af00      	add	r7, sp, #0
   270c2:	60f8      	str	r0, [r7, #12]
   270c4:	60b9      	str	r1, [r7, #8]
   270c6:	0019      	movs	r1, r3
   270c8:	1dbb      	adds	r3, r7, #6
   270ca:	801a      	strh	r2, [r3, #0]
   270cc:	1d3b      	adds	r3, r7, #4
   270ce:	1c0a      	adds	r2, r1, #0
   270d0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   270d2:	68fb      	ldr	r3, [r7, #12]
   270d4:	2238      	movs	r2, #56	; 0x38
   270d6:	5c9b      	ldrb	r3, [r3, r2]
   270d8:	b2db      	uxtb	r3, r3
   270da:	2b05      	cmp	r3, #5
   270dc:	d101      	bne.n	270e2 <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   270de:	2305      	movs	r3, #5
   270e0:	e07a      	b.n	271d8 <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
   270e2:	1dbb      	adds	r3, r7, #6
   270e4:	881b      	ldrh	r3, [r3, #0]
   270e6:	2b00      	cmp	r3, #0
   270e8:	d101      	bne.n	270ee <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
   270ea:	2317      	movs	r3, #23
   270ec:	e074      	b.n	271d8 <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
   270ee:	68fb      	ldr	r3, [r7, #12]
   270f0:	79db      	ldrb	r3, [r3, #7]
   270f2:	2201      	movs	r2, #1
   270f4:	4053      	eors	r3, r2
   270f6:	b2db      	uxtb	r3, r3
   270f8:	2b00      	cmp	r3, #0
   270fa:	d001      	beq.n	27100 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
   270fc:	231c      	movs	r3, #28
   270fe:	e06b      	b.n	271d8 <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
   27100:	2316      	movs	r3, #22
   27102:	18fb      	adds	r3, r7, r3
   27104:	2200      	movs	r2, #0
   27106:	801a      	strh	r2, [r3, #0]

	while (length--) {
   27108:	e05e      	b.n	271c8 <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
   2710a:	68fb      	ldr	r3, [r7, #12]
   2710c:	795b      	ldrb	r3, [r3, #5]
   2710e:	2b01      	cmp	r3, #1
   27110:	d112      	bne.n	27138 <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
   27112:	46c0      	nop			; (mov r8, r8)
   27114:	68fb      	ldr	r3, [r7, #12]
   27116:	0018      	movs	r0, r3
   27118:	4b31      	ldr	r3, [pc, #196]	; (271e0 <spi_read_buffer_wait+0x124>)
   2711a:	4798      	blx	r3
   2711c:	0003      	movs	r3, r0
   2711e:	001a      	movs	r2, r3
   27120:	2301      	movs	r3, #1
   27122:	4053      	eors	r3, r2
   27124:	b2db      	uxtb	r3, r3
   27126:	2b00      	cmp	r3, #0
   27128:	d1f4      	bne.n	27114 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
   2712a:	1d3b      	adds	r3, r7, #4
   2712c:	881a      	ldrh	r2, [r3, #0]
   2712e:	68fb      	ldr	r3, [r7, #12]
   27130:	0011      	movs	r1, r2
   27132:	0018      	movs	r0, r3
   27134:	4b2b      	ldr	r3, [pc, #172]	; (271e4 <spi_read_buffer_wait+0x128>)
   27136:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
   27138:	46c0      	nop			; (mov r8, r8)
   2713a:	68fb      	ldr	r3, [r7, #12]
   2713c:	0018      	movs	r0, r3
   2713e:	4b2a      	ldr	r3, [pc, #168]	; (271e8 <spi_read_buffer_wait+0x12c>)
   27140:	4798      	blx	r3
   27142:	0003      	movs	r3, r0
   27144:	001a      	movs	r2, r3
   27146:	2301      	movs	r3, #1
   27148:	4053      	eors	r3, r2
   2714a:	b2db      	uxtb	r3, r3
   2714c:	2b00      	cmp	r3, #0
   2714e:	d1f4      	bne.n	2713a <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
   27150:	2312      	movs	r3, #18
   27152:	18fb      	adds	r3, r7, r3
   27154:	2200      	movs	r2, #0
   27156:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
   27158:	2315      	movs	r3, #21
   2715a:	18fc      	adds	r4, r7, r3
   2715c:	2312      	movs	r3, #18
   2715e:	18fa      	adds	r2, r7, r3
   27160:	68fb      	ldr	r3, [r7, #12]
   27162:	0011      	movs	r1, r2
   27164:	0018      	movs	r0, r3
   27166:	4b21      	ldr	r3, [pc, #132]	; (271ec <spi_read_buffer_wait+0x130>)
   27168:	4798      	blx	r3
   2716a:	0003      	movs	r3, r0
   2716c:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
   2716e:	2315      	movs	r3, #21
   27170:	18fb      	adds	r3, r7, r3
   27172:	781b      	ldrb	r3, [r3, #0]
   27174:	2b00      	cmp	r3, #0
   27176:	d003      	beq.n	27180 <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
   27178:	2315      	movs	r3, #21
   2717a:	18fb      	adds	r3, r7, r3
   2717c:	781b      	ldrb	r3, [r3, #0]
   2717e:	e02b      	b.n	271d8 <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
   27180:	2316      	movs	r3, #22
   27182:	18fb      	adds	r3, r7, r3
   27184:	881b      	ldrh	r3, [r3, #0]
   27186:	2216      	movs	r2, #22
   27188:	18ba      	adds	r2, r7, r2
   2718a:	1c59      	adds	r1, r3, #1
   2718c:	8011      	strh	r1, [r2, #0]
   2718e:	001a      	movs	r2, r3
   27190:	68bb      	ldr	r3, [r7, #8]
   27192:	189b      	adds	r3, r3, r2
   27194:	2212      	movs	r2, #18
   27196:	18ba      	adds	r2, r7, r2
   27198:	8812      	ldrh	r2, [r2, #0]
   2719a:	b2d2      	uxtb	r2, r2
   2719c:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   2719e:	68fb      	ldr	r3, [r7, #12]
   271a0:	799b      	ldrb	r3, [r3, #6]
   271a2:	2b01      	cmp	r3, #1
   271a4:	d110      	bne.n	271c8 <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
   271a6:	2316      	movs	r3, #22
   271a8:	18fb      	adds	r3, r7, r3
   271aa:	881b      	ldrh	r3, [r3, #0]
   271ac:	2216      	movs	r2, #22
   271ae:	18ba      	adds	r2, r7, r2
   271b0:	1c59      	adds	r1, r3, #1
   271b2:	8011      	strh	r1, [r2, #0]
   271b4:	001a      	movs	r2, r3
   271b6:	68bb      	ldr	r3, [r7, #8]
   271b8:	189b      	adds	r3, r3, r2
   271ba:	2212      	movs	r2, #18
   271bc:	18ba      	adds	r2, r7, r2
   271be:	8812      	ldrh	r2, [r2, #0]
   271c0:	0a12      	lsrs	r2, r2, #8
   271c2:	b292      	uxth	r2, r2
   271c4:	b2d2      	uxtb	r2, r2
   271c6:	701a      	strb	r2, [r3, #0]
	while (length--) {
   271c8:	1dbb      	adds	r3, r7, #6
   271ca:	881b      	ldrh	r3, [r3, #0]
   271cc:	1dba      	adds	r2, r7, #6
   271ce:	1e59      	subs	r1, r3, #1
   271d0:	8011      	strh	r1, [r2, #0]
   271d2:	2b00      	cmp	r3, #0
   271d4:	d199      	bne.n	2710a <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
   271d6:	2300      	movs	r3, #0
}
   271d8:	0018      	movs	r0, r3
   271da:	46bd      	mov	sp, r7
   271dc:	b007      	add	sp, #28
   271de:	bd90      	pop	{r4, r7, pc}
   271e0:	00026b35 	.word	0x00026b35
   271e4:	00026b85 	.word	0x00026b85
   271e8:	00026b5d 	.word	0x00026b5d
   271ec:	00026bcd 	.word	0x00026bcd

000271f0 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   271f0:	b580      	push	{r7, lr}
   271f2:	b086      	sub	sp, #24
   271f4:	af00      	add	r7, sp, #0
   271f6:	60f8      	str	r0, [r7, #12]
   271f8:	60b9      	str	r1, [r7, #8]
   271fa:	1dfb      	adds	r3, r7, #7
   271fc:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   271fe:	68fb      	ldr	r3, [r7, #12]
   27200:	795b      	ldrb	r3, [r3, #5]
   27202:	2b01      	cmp	r3, #1
   27204:	d001      	beq.n	2720a <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
   27206:	2315      	movs	r3, #21
   27208:	e05c      	b.n	272c4 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
   2720a:	68fb      	ldr	r3, [r7, #12]
   2720c:	7a1b      	ldrb	r3, [r3, #8]
   2720e:	2201      	movs	r2, #1
   27210:	4053      	eors	r3, r2
   27212:	b2db      	uxtb	r3, r3
   27214:	2b00      	cmp	r3, #0
   27216:	d054      	beq.n	272c2 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
   27218:	1dfb      	adds	r3, r7, #7
   2721a:	781b      	ldrb	r3, [r3, #0]
   2721c:	2b00      	cmp	r3, #0
   2721e:	d04a      	beq.n	272b6 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
   27220:	68bb      	ldr	r3, [r7, #8]
   27222:	785b      	ldrb	r3, [r3, #1]
   27224:	2b00      	cmp	r3, #0
   27226:	d03f      	beq.n	272a8 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
   27228:	68fb      	ldr	r3, [r7, #12]
   2722a:	0018      	movs	r0, r3
   2722c:	4b27      	ldr	r3, [pc, #156]	; (272cc <spi_select_slave+0xdc>)
   2722e:	4798      	blx	r3
   27230:	0003      	movs	r3, r0
   27232:	001a      	movs	r2, r3
   27234:	2301      	movs	r3, #1
   27236:	4053      	eors	r3, r2
   27238:	b2db      	uxtb	r3, r3
   2723a:	2b00      	cmp	r3, #0
   2723c:	d007      	beq.n	2724e <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
   2723e:	68bb      	ldr	r3, [r7, #8]
   27240:	781b      	ldrb	r3, [r3, #0]
   27242:	2101      	movs	r1, #1
   27244:	0018      	movs	r0, r3
   27246:	4b22      	ldr	r3, [pc, #136]	; (272d0 <spi_select_slave+0xe0>)
   27248:	4798      	blx	r3
					return STATUS_BUSY;
   2724a:	2305      	movs	r3, #5
   2724c:	e03a      	b.n	272c4 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   2724e:	68bb      	ldr	r3, [r7, #8]
   27250:	781b      	ldrb	r3, [r3, #0]
   27252:	2100      	movs	r1, #0
   27254:	0018      	movs	r0, r3
   27256:	4b1e      	ldr	r3, [pc, #120]	; (272d0 <spi_select_slave+0xe0>)
   27258:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
   2725a:	68bb      	ldr	r3, [r7, #8]
   2725c:	789b      	ldrb	r3, [r3, #2]
   2725e:	b29a      	uxth	r2, r3
   27260:	68fb      	ldr	r3, [r7, #12]
   27262:	0011      	movs	r1, r2
   27264:	0018      	movs	r0, r3
   27266:	4b1b      	ldr	r3, [pc, #108]	; (272d4 <spi_select_slave+0xe4>)
   27268:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
   2726a:	68fb      	ldr	r3, [r7, #12]
   2726c:	79db      	ldrb	r3, [r3, #7]
   2726e:	2201      	movs	r2, #1
   27270:	4053      	eors	r3, r2
   27272:	b2db      	uxtb	r3, r3
   27274:	2b00      	cmp	r3, #0
   27276:	d024      	beq.n	272c2 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
   27278:	46c0      	nop			; (mov r8, r8)
   2727a:	68fb      	ldr	r3, [r7, #12]
   2727c:	0018      	movs	r0, r3
   2727e:	4b16      	ldr	r3, [pc, #88]	; (272d8 <spi_select_slave+0xe8>)
   27280:	4798      	blx	r3
   27282:	0003      	movs	r3, r0
   27284:	001a      	movs	r2, r3
   27286:	2301      	movs	r3, #1
   27288:	4053      	eors	r3, r2
   2728a:	b2db      	uxtb	r3, r3
   2728c:	2b00      	cmp	r3, #0
   2728e:	d1f4      	bne.n	2727a <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
   27290:	2316      	movs	r3, #22
   27292:	18fb      	adds	r3, r7, r3
   27294:	2200      	movs	r2, #0
   27296:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
   27298:	2316      	movs	r3, #22
   2729a:	18fa      	adds	r2, r7, r3
   2729c:	68fb      	ldr	r3, [r7, #12]
   2729e:	0011      	movs	r1, r2
   272a0:	0018      	movs	r0, r3
   272a2:	4b0e      	ldr	r3, [pc, #56]	; (272dc <spi_select_slave+0xec>)
   272a4:	4798      	blx	r3
   272a6:	e00c      	b.n	272c2 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   272a8:	68bb      	ldr	r3, [r7, #8]
   272aa:	781b      	ldrb	r3, [r3, #0]
   272ac:	2100      	movs	r1, #0
   272ae:	0018      	movs	r0, r3
   272b0:	4b07      	ldr	r3, [pc, #28]	; (272d0 <spi_select_slave+0xe0>)
   272b2:	4798      	blx	r3
   272b4:	e005      	b.n	272c2 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
   272b6:	68bb      	ldr	r3, [r7, #8]
   272b8:	781b      	ldrb	r3, [r3, #0]
   272ba:	2101      	movs	r1, #1
   272bc:	0018      	movs	r0, r3
   272be:	4b04      	ldr	r3, [pc, #16]	; (272d0 <spi_select_slave+0xe0>)
   272c0:	4798      	blx	r3
		}
	}
	return STATUS_OK;
   272c2:	2300      	movs	r3, #0
}
   272c4:	0018      	movs	r0, r3
   272c6:	46bd      	mov	sp, r7
   272c8:	b006      	add	sp, #24
   272ca:	bd80      	pop	{r7, pc}
   272cc:	00026b35 	.word	0x00026b35
   272d0:	000268fd 	.word	0x000268fd
   272d4:	00026b85 	.word	0x00026b85
   272d8:	00026b5d 	.word	0x00026b5d
   272dc:	00026bcd 	.word	0x00026bcd

000272e0 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   272e0:	b580      	push	{r7, lr}
   272e2:	b086      	sub	sp, #24
   272e4:	af00      	add	r7, sp, #0
   272e6:	60f8      	str	r0, [r7, #12]
   272e8:	60b9      	str	r1, [r7, #8]
   272ea:	1dbb      	adds	r3, r7, #6
   272ec:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   272ee:	68fb      	ldr	r3, [r7, #12]
   272f0:	2238      	movs	r2, #56	; 0x38
   272f2:	5c9b      	ldrb	r3, [r3, r2]
   272f4:	b2db      	uxtb	r3, r3
   272f6:	2b05      	cmp	r3, #5
   272f8:	d101      	bne.n	272fe <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   272fa:	2305      	movs	r3, #5
   272fc:	e087      	b.n	2740e <spi_write_buffer_wait+0x12e>
	}
#  endif

	if (length == 0) {
   272fe:	1dbb      	adds	r3, r7, #6
   27300:	881b      	ldrh	r3, [r3, #0]
   27302:	2b00      	cmp	r3, #0
   27304:	d101      	bne.n	2730a <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
   27306:	2317      	movs	r3, #23
   27308:	e081      	b.n	2740e <spi_write_buffer_wait+0x12e>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
   2730a:	2316      	movs	r3, #22
   2730c:	18fb      	adds	r3, r7, r3
   2730e:	2200      	movs	r2, #0
   27310:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
   27312:	2314      	movs	r3, #20
   27314:	18fb      	adds	r3, r7, r3
   27316:	1dba      	adds	r2, r7, #6
   27318:	8812      	ldrh	r2, [r2, #0]
   2731a:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
   2731c:	e05f      	b.n	273de <spi_write_buffer_wait+0xfe>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
   2731e:	46c0      	nop			; (mov r8, r8)
   27320:	68fb      	ldr	r3, [r7, #12]
   27322:	0018      	movs	r0, r3
   27324:	4b3c      	ldr	r3, [pc, #240]	; (27418 <spi_write_buffer_wait+0x138>)
   27326:	4798      	blx	r3
   27328:	0003      	movs	r3, r0
   2732a:	001a      	movs	r2, r3
   2732c:	2301      	movs	r3, #1
   2732e:	4053      	eors	r3, r2
   27330:	b2db      	uxtb	r3, r3
   27332:	2b00      	cmp	r3, #0
   27334:	d1f4      	bne.n	27320 <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   27336:	2316      	movs	r3, #22
   27338:	18fb      	adds	r3, r7, r3
   2733a:	881b      	ldrh	r3, [r3, #0]
   2733c:	2216      	movs	r2, #22
   2733e:	18ba      	adds	r2, r7, r2
   27340:	1c59      	adds	r1, r3, #1
   27342:	8011      	strh	r1, [r2, #0]
   27344:	001a      	movs	r2, r3
   27346:	68bb      	ldr	r3, [r7, #8]
   27348:	189b      	adds	r3, r3, r2
   2734a:	781a      	ldrb	r2, [r3, #0]
   2734c:	2312      	movs	r3, #18
   2734e:	18fb      	adds	r3, r7, r3
   27350:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   27352:	68fb      	ldr	r3, [r7, #12]
   27354:	799b      	ldrb	r3, [r3, #6]
   27356:	2b01      	cmp	r3, #1
   27358:	d115      	bne.n	27386 <spi_write_buffer_wait+0xa6>
			data_to_send |= (tx_data[tx_pos++] << 8);
   2735a:	2316      	movs	r3, #22
   2735c:	18fb      	adds	r3, r7, r3
   2735e:	881b      	ldrh	r3, [r3, #0]
   27360:	2216      	movs	r2, #22
   27362:	18ba      	adds	r2, r7, r2
   27364:	1c59      	adds	r1, r3, #1
   27366:	8011      	strh	r1, [r2, #0]
   27368:	001a      	movs	r2, r3
   2736a:	68bb      	ldr	r3, [r7, #8]
   2736c:	189b      	adds	r3, r3, r2
   2736e:	781b      	ldrb	r3, [r3, #0]
   27370:	021b      	lsls	r3, r3, #8
   27372:	b21a      	sxth	r2, r3
   27374:	2312      	movs	r3, #18
   27376:	18fb      	adds	r3, r7, r3
   27378:	2100      	movs	r1, #0
   2737a:	5e5b      	ldrsh	r3, [r3, r1]
   2737c:	4313      	orrs	r3, r2
   2737e:	b21a      	sxth	r2, r3
   27380:	2312      	movs	r3, #18
   27382:	18fb      	adds	r3, r7, r3
   27384:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
   27386:	2312      	movs	r3, #18
   27388:	18fb      	adds	r3, r7, r3
   2738a:	881a      	ldrh	r2, [r3, #0]
   2738c:	68fb      	ldr	r3, [r7, #12]
   2738e:	0011      	movs	r1, r2
   27390:	0018      	movs	r0, r3
   27392:	4b22      	ldr	r3, [pc, #136]	; (2741c <spi_write_buffer_wait+0x13c>)
   27394:	4798      	blx	r3

		if (module->receiver_enabled) {
   27396:	68fb      	ldr	r3, [r7, #12]
   27398:	79db      	ldrb	r3, [r3, #7]
   2739a:	2214      	movs	r2, #20
   2739c:	18ba      	adds	r2, r7, r2
   2739e:	2114      	movs	r1, #20
   273a0:	1879      	adds	r1, r7, r1
   273a2:	8809      	ldrh	r1, [r1, #0]
   273a4:	8011      	strh	r1, [r2, #0]
   273a6:	2b00      	cmp	r3, #0
   273a8:	d019      	beq.n	273de <spi_write_buffer_wait+0xfe>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
   273aa:	46c0      	nop			; (mov r8, r8)
   273ac:	68fb      	ldr	r3, [r7, #12]
   273ae:	0018      	movs	r0, r3
   273b0:	4b1b      	ldr	r3, [pc, #108]	; (27420 <spi_write_buffer_wait+0x140>)
   273b2:	4798      	blx	r3
   273b4:	0003      	movs	r3, r0
   273b6:	001a      	movs	r2, r3
   273b8:	2301      	movs	r3, #1
   273ba:	4053      	eors	r3, r2
   273bc:	b2db      	uxtb	r3, r3
   273be:	2b00      	cmp	r3, #0
   273c0:	d1f4      	bne.n	273ac <spi_write_buffer_wait+0xcc>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
   273c2:	2310      	movs	r3, #16
   273c4:	18fa      	adds	r2, r7, r3
   273c6:	68fb      	ldr	r3, [r7, #12]
   273c8:	0011      	movs	r1, r2
   273ca:	0018      	movs	r0, r3
   273cc:	4b15      	ldr	r3, [pc, #84]	; (27424 <spi_write_buffer_wait+0x144>)
   273ce:	4798      	blx	r3
			flush_length--;
   273d0:	2314      	movs	r3, #20
   273d2:	18fb      	adds	r3, r7, r3
   273d4:	881a      	ldrh	r2, [r3, #0]
   273d6:	2314      	movs	r3, #20
   273d8:	18fb      	adds	r3, r7, r3
   273da:	3a01      	subs	r2, #1
   273dc:	801a      	strh	r2, [r3, #0]
	while (length--) {
   273de:	1dbb      	adds	r3, r7, #6
   273e0:	881b      	ldrh	r3, [r3, #0]
   273e2:	1dba      	adds	r2, r7, #6
   273e4:	1e59      	subs	r1, r3, #1
   273e6:	8011      	strh	r1, [r2, #0]
   273e8:	2b00      	cmp	r3, #0
   273ea:	d198      	bne.n	2731e <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
   273ec:	68fb      	ldr	r3, [r7, #12]
   273ee:	795b      	ldrb	r3, [r3, #5]
   273f0:	2b01      	cmp	r3, #1
   273f2:	d10b      	bne.n	2740c <spi_write_buffer_wait+0x12c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
   273f4:	46c0      	nop			; (mov r8, r8)
   273f6:	68fb      	ldr	r3, [r7, #12]
   273f8:	0018      	movs	r0, r3
   273fa:	4b0b      	ldr	r3, [pc, #44]	; (27428 <spi_write_buffer_wait+0x148>)
   273fc:	4798      	blx	r3
   273fe:	0003      	movs	r3, r0
   27400:	001a      	movs	r2, r3
   27402:	2301      	movs	r3, #1
   27404:	4053      	eors	r3, r2
   27406:	b2db      	uxtb	r3, r3
   27408:	2b00      	cmp	r3, #0
   2740a:	d1f4      	bne.n	273f6 <spi_write_buffer_wait+0x116>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
   2740c:	2300      	movs	r3, #0
}
   2740e:	0018      	movs	r0, r3
   27410:	46bd      	mov	sp, r7
   27412:	b006      	add	sp, #24
   27414:	bd80      	pop	{r7, pc}
   27416:	46c0      	nop			; (mov r8, r8)
   27418:	00026b35 	.word	0x00026b35
   2741c:	00026b85 	.word	0x00026b85
   27420:	00026b5d 	.word	0x00026b5d
   27424:	00026bcd 	.word	0x00026bcd
   27428:	00026b0d 	.word	0x00026b0d

0002742c <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
   2742c:	b580      	push	{r7, lr}
   2742e:	b084      	sub	sp, #16
   27430:	af00      	add	r7, sp, #0
   27432:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   27434:	687b      	ldr	r3, [r7, #4]
   27436:	681b      	ldr	r3, [r3, #0]
   27438:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   2743a:	687b      	ldr	r3, [r7, #4]
   2743c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2743e:	781b      	ldrb	r3, [r3, #0]
   27440:	b2da      	uxtb	r2, r3
   27442:	230e      	movs	r3, #14
   27444:	18fb      	adds	r3, r7, r3
   27446:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
   27448:	687b      	ldr	r3, [r7, #4]
   2744a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2744c:	1c5a      	adds	r2, r3, #1
   2744e:	687b      	ldr	r3, [r7, #4]
   27450:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   27452:	687b      	ldr	r3, [r7, #4]
   27454:	799b      	ldrb	r3, [r3, #6]
   27456:	2b01      	cmp	r3, #1
   27458:	d113      	bne.n	27482 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
   2745a:	687b      	ldr	r3, [r7, #4]
   2745c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2745e:	781b      	ldrb	r3, [r3, #0]
   27460:	b2db      	uxtb	r3, r3
   27462:	021b      	lsls	r3, r3, #8
   27464:	b21a      	sxth	r2, r3
   27466:	230e      	movs	r3, #14
   27468:	18fb      	adds	r3, r7, r3
   2746a:	2100      	movs	r1, #0
   2746c:	5e5b      	ldrsh	r3, [r3, r1]
   2746e:	4313      	orrs	r3, r2
   27470:	b21a      	sxth	r2, r3
   27472:	230e      	movs	r3, #14
   27474:	18fb      	adds	r3, r7, r3
   27476:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
   27478:	687b      	ldr	r3, [r7, #4]
   2747a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2747c:	1c5a      	adds	r2, r3, #1
   2747e:	687b      	ldr	r3, [r7, #4]
   27480:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
   27482:	230e      	movs	r3, #14
   27484:	18fb      	adds	r3, r7, r3
   27486:	881b      	ldrh	r3, [r3, #0]
   27488:	05db      	lsls	r3, r3, #23
   2748a:	0dda      	lsrs	r2, r3, #23
   2748c:	68bb      	ldr	r3, [r7, #8]
   2748e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
   27490:	687b      	ldr	r3, [r7, #4]
   27492:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   27494:	b29b      	uxth	r3, r3
   27496:	3b01      	subs	r3, #1
   27498:	b29a      	uxth	r2, r3
   2749a:	687b      	ldr	r3, [r7, #4]
   2749c:	869a      	strh	r2, [r3, #52]	; 0x34
}
   2749e:	46c0      	nop			; (mov r8, r8)
   274a0:	46bd      	mov	sp, r7
   274a2:	b004      	add	sp, #16
   274a4:	bd80      	pop	{r7, pc}
	...

000274a8 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
   274a8:	b580      	push	{r7, lr}
   274aa:	b084      	sub	sp, #16
   274ac:	af00      	add	r7, sp, #0
   274ae:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   274b0:	687b      	ldr	r3, [r7, #4]
   274b2:	681b      	ldr	r3, [r3, #0]
   274b4:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
   274b6:	4b08      	ldr	r3, [pc, #32]	; (274d8 <_spi_write_dummy+0x30>)
   274b8:	881b      	ldrh	r3, [r3, #0]
   274ba:	001a      	movs	r2, r3
   274bc:	68fb      	ldr	r3, [r7, #12]
   274be:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   274c0:	687b      	ldr	r3, [r7, #4]
   274c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   274c4:	b29b      	uxth	r3, r3
   274c6:	3b01      	subs	r3, #1
   274c8:	b29a      	uxth	r2, r3
   274ca:	687b      	ldr	r3, [r7, #4]
   274cc:	865a      	strh	r2, [r3, #50]	; 0x32
}
   274ce:	46c0      	nop			; (mov r8, r8)
   274d0:	46bd      	mov	sp, r7
   274d2:	b004      	add	sp, #16
   274d4:	bd80      	pop	{r7, pc}
   274d6:	46c0      	nop			; (mov r8, r8)
   274d8:	20005be4 	.word	0x20005be4

000274dc <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
   274dc:	b580      	push	{r7, lr}
   274de:	b084      	sub	sp, #16
   274e0:	af00      	add	r7, sp, #0
   274e2:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   274e4:	687b      	ldr	r3, [r7, #4]
   274e6:	681b      	ldr	r3, [r3, #0]
   274e8:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
   274ea:	230a      	movs	r3, #10
   274ec:	18fb      	adds	r3, r7, r3
   274ee:	2200      	movs	r2, #0
   274f0:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
   274f2:	68fb      	ldr	r3, [r7, #12]
   274f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   274f6:	230a      	movs	r3, #10
   274f8:	18fb      	adds	r3, r7, r3
   274fa:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   274fc:	687b      	ldr	r3, [r7, #4]
   274fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   27500:	b29b      	uxth	r3, r3
   27502:	3b01      	subs	r3, #1
   27504:	b29a      	uxth	r2, r3
   27506:	687b      	ldr	r3, [r7, #4]
   27508:	865a      	strh	r2, [r3, #50]	; 0x32
}
   2750a:	46c0      	nop			; (mov r8, r8)
   2750c:	46bd      	mov	sp, r7
   2750e:	b004      	add	sp, #16
   27510:	bd80      	pop	{r7, pc}

00027512 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
   27512:	b580      	push	{r7, lr}
   27514:	b084      	sub	sp, #16
   27516:	af00      	add	r7, sp, #0
   27518:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   2751a:	687b      	ldr	r3, [r7, #4]
   2751c:	681b      	ldr	r3, [r3, #0]
   2751e:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
   27520:	68fb      	ldr	r3, [r7, #12]
   27522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27524:	b29a      	uxth	r2, r3
   27526:	230a      	movs	r3, #10
   27528:	18fb      	adds	r3, r7, r3
   2752a:	05d2      	lsls	r2, r2, #23
   2752c:	0dd2      	lsrs	r2, r2, #23
   2752e:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
   27530:	687b      	ldr	r3, [r7, #4]
   27532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27534:	220a      	movs	r2, #10
   27536:	18ba      	adds	r2, r7, r2
   27538:	8812      	ldrh	r2, [r2, #0]
   2753a:	b2d2      	uxtb	r2, r2
   2753c:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
   2753e:	687b      	ldr	r3, [r7, #4]
   27540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27542:	1c5a      	adds	r2, r3, #1
   27544:	687b      	ldr	r3, [r7, #4]
   27546:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   27548:	687b      	ldr	r3, [r7, #4]
   2754a:	799b      	ldrb	r3, [r3, #6]
   2754c:	2b01      	cmp	r3, #1
   2754e:	d10d      	bne.n	2756c <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
   27550:	687b      	ldr	r3, [r7, #4]
   27552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27554:	220a      	movs	r2, #10
   27556:	18ba      	adds	r2, r7, r2
   27558:	8812      	ldrh	r2, [r2, #0]
   2755a:	0a12      	lsrs	r2, r2, #8
   2755c:	b292      	uxth	r2, r2
   2755e:	b2d2      	uxtb	r2, r2
   27560:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
   27562:	687b      	ldr	r3, [r7, #4]
   27564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27566:	1c5a      	adds	r2, r3, #1
   27568:	687b      	ldr	r3, [r7, #4]
   2756a:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
   2756c:	687b      	ldr	r3, [r7, #4]
   2756e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   27570:	b29b      	uxth	r3, r3
   27572:	3b01      	subs	r3, #1
   27574:	b29a      	uxth	r2, r3
   27576:	687b      	ldr	r3, [r7, #4]
   27578:	861a      	strh	r2, [r3, #48]	; 0x30
}
   2757a:	46c0      	nop			; (mov r8, r8)
   2757c:	46bd      	mov	sp, r7
   2757e:	b004      	add	sp, #16
   27580:	bd80      	pop	{r7, pc}
	...

00027584 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
   27584:	b580      	push	{r7, lr}
   27586:	b086      	sub	sp, #24
   27588:	af00      	add	r7, sp, #0
   2758a:	0002      	movs	r2, r0
   2758c:	1dfb      	adds	r3, r7, #7
   2758e:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
   27590:	1dfb      	adds	r3, r7, #7
   27592:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
   27594:	4b96      	ldr	r3, [pc, #600]	; (277f0 <_spi_interrupt_handler+0x26c>)
   27596:	0092      	lsls	r2, r2, #2
   27598:	58d3      	ldr	r3, [r2, r3]
   2759a:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   2759c:	697b      	ldr	r3, [r7, #20]
   2759e:	681b      	ldr	r3, [r3, #0]
   275a0:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
   275a2:	697b      	ldr	r3, [r7, #20]
   275a4:	2237      	movs	r2, #55	; 0x37
   275a6:	5c9a      	ldrb	r2, [r3, r2]
   275a8:	697b      	ldr	r3, [r7, #20]
   275aa:	2136      	movs	r1, #54	; 0x36
   275ac:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
   275ae:	230f      	movs	r3, #15
   275b0:	18fb      	adds	r3, r7, r3
   275b2:	400a      	ands	r2, r1
   275b4:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
   275b6:	693b      	ldr	r3, [r7, #16]
   275b8:	7e1b      	ldrb	r3, [r3, #24]
   275ba:	b2da      	uxtb	r2, r3
   275bc:	230c      	movs	r3, #12
   275be:	18fb      	adds	r3, r7, r3
   275c0:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
   275c2:	693b      	ldr	r3, [r7, #16]
   275c4:	7d9b      	ldrb	r3, [r3, #22]
   275c6:	b2db      	uxtb	r3, r3
   275c8:	b29a      	uxth	r2, r3
   275ca:	230c      	movs	r3, #12
   275cc:	18fb      	adds	r3, r7, r3
   275ce:	210c      	movs	r1, #12
   275d0:	1879      	adds	r1, r7, r1
   275d2:	8809      	ldrh	r1, [r1, #0]
   275d4:	400a      	ands	r2, r1
   275d6:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
   275d8:	230c      	movs	r3, #12
   275da:	18fb      	adds	r3, r7, r3
   275dc:	881b      	ldrh	r3, [r3, #0]
   275de:	2201      	movs	r2, #1
   275e0:	4013      	ands	r3, r2
   275e2:	d038      	beq.n	27656 <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   275e4:	697b      	ldr	r3, [r7, #20]
   275e6:	795b      	ldrb	r3, [r3, #5]
   275e8:	2b01      	cmp	r3, #1
   275ea:	d110      	bne.n	2760e <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
   275ec:	697b      	ldr	r3, [r7, #20]
   275ee:	7a5b      	ldrb	r3, [r3, #9]
   275f0:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   275f2:	2b00      	cmp	r3, #0
   275f4:	d10b      	bne.n	2760e <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
   275f6:	697b      	ldr	r3, [r7, #20]
   275f8:	0018      	movs	r0, r3
   275fa:	4b7e      	ldr	r3, [pc, #504]	; (277f4 <_spi_interrupt_handler+0x270>)
   275fc:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
   275fe:	697b      	ldr	r3, [r7, #20]
   27600:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   27602:	b29b      	uxth	r3, r3
   27604:	2b00      	cmp	r3, #0
   27606:	d102      	bne.n	2760e <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   27608:	693b      	ldr	r3, [r7, #16]
   2760a:	2201      	movs	r2, #1
   2760c:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
   2760e:	697b      	ldr	r3, [r7, #20]
   27610:	795b      	ldrb	r3, [r3, #5]
		if (0
   27612:	2b01      	cmp	r3, #1
   27614:	d11f      	bne.n	27656 <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
   27616:	697b      	ldr	r3, [r7, #20]
   27618:	7a5b      	ldrb	r3, [r3, #9]
   2761a:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
   2761c:	2b00      	cmp	r3, #0
   2761e:	d01a      	beq.n	27656 <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
   27620:	697b      	ldr	r3, [r7, #20]
   27622:	0018      	movs	r0, r3
   27624:	4b74      	ldr	r3, [pc, #464]	; (277f8 <_spi_interrupt_handler+0x274>)
   27626:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
   27628:	697b      	ldr	r3, [r7, #20]
   2762a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   2762c:	b29b      	uxth	r3, r3
   2762e:	2b00      	cmp	r3, #0
   27630:	d111      	bne.n	27656 <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   27632:	693b      	ldr	r3, [r7, #16]
   27634:	2201      	movs	r2, #1
   27636:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
   27638:	697b      	ldr	r3, [r7, #20]
   2763a:	7a5b      	ldrb	r3, [r3, #9]
   2763c:	b2db      	uxtb	r3, r3
   2763e:	2b01      	cmp	r3, #1
   27640:	d109      	bne.n	27656 <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
   27642:	697b      	ldr	r3, [r7, #20]
   27644:	79db      	ldrb	r3, [r3, #7]
   27646:	2201      	movs	r2, #1
   27648:	4053      	eors	r3, r2
   2764a:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
   2764c:	2b00      	cmp	r3, #0
   2764e:	d002      	beq.n	27656 <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   27650:	693b      	ldr	r3, [r7, #16]
   27652:	2202      	movs	r2, #2
   27654:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
   27656:	230c      	movs	r3, #12
   27658:	18fb      	adds	r3, r7, r3
   2765a:	881b      	ldrh	r3, [r3, #0]
   2765c:	2204      	movs	r2, #4
   2765e:	4013      	ands	r3, r2
   27660:	d100      	bne.n	27664 <_spi_interrupt_handler+0xe0>
   27662:	e07e      	b.n	27762 <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   27664:	693b      	ldr	r3, [r7, #16]
   27666:	8b5b      	ldrh	r3, [r3, #26]
   27668:	b29b      	uxth	r3, r3
   2766a:	001a      	movs	r2, r3
   2766c:	2304      	movs	r3, #4
   2766e:	4013      	ands	r3, r2
   27670:	d022      	beq.n	276b8 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
   27672:	697b      	ldr	r3, [r7, #20]
   27674:	7a5b      	ldrb	r3, [r3, #9]
   27676:	b2db      	uxtb	r3, r3
   27678:	2b01      	cmp	r3, #1
   2767a:	d014      	beq.n	276a6 <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
   2767c:	697b      	ldr	r3, [r7, #20]
   2767e:	2238      	movs	r2, #56	; 0x38
   27680:	211e      	movs	r1, #30
   27682:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
   27684:	697b      	ldr	r3, [r7, #20]
   27686:	2203      	movs	r2, #3
   27688:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
   2768a:	693b      	ldr	r3, [r7, #16]
   2768c:	2205      	movs	r2, #5
   2768e:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
   27690:	230f      	movs	r3, #15
   27692:	18fb      	adds	r3, r7, r3
   27694:	781b      	ldrb	r3, [r3, #0]
   27696:	2208      	movs	r2, #8
   27698:	4013      	ands	r3, r2
   2769a:	d004      	beq.n	276a6 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
   2769c:	697b      	ldr	r3, [r7, #20]
   2769e:	699b      	ldr	r3, [r3, #24]
   276a0:	697a      	ldr	r2, [r7, #20]
   276a2:	0010      	movs	r0, r2
   276a4:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
   276a6:	693b      	ldr	r3, [r7, #16]
   276a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   276aa:	230a      	movs	r3, #10
   276ac:	18fb      	adds	r3, r7, r3
   276ae:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   276b0:	693b      	ldr	r3, [r7, #16]
   276b2:	2204      	movs	r2, #4
   276b4:	835a      	strh	r2, [r3, #26]
   276b6:	e054      	b.n	27762 <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
   276b8:	697b      	ldr	r3, [r7, #20]
   276ba:	7a5b      	ldrb	r3, [r3, #9]
   276bc:	b2db      	uxtb	r3, r3
   276be:	2b01      	cmp	r3, #1
   276c0:	d11e      	bne.n	27700 <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
   276c2:	697b      	ldr	r3, [r7, #20]
   276c4:	0018      	movs	r0, r3
   276c6:	4b4d      	ldr	r3, [pc, #308]	; (277fc <_spi_interrupt_handler+0x278>)
   276c8:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
   276ca:	697b      	ldr	r3, [r7, #20]
   276cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   276ce:	b29b      	uxth	r3, r3
   276d0:	2b00      	cmp	r3, #0
   276d2:	d146      	bne.n	27762 <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   276d4:	693b      	ldr	r3, [r7, #16]
   276d6:	2204      	movs	r2, #4
   276d8:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
   276da:	697b      	ldr	r3, [r7, #20]
   276dc:	2238      	movs	r2, #56	; 0x38
   276de:	2100      	movs	r1, #0
   276e0:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
   276e2:	697b      	ldr	r3, [r7, #20]
   276e4:	2203      	movs	r2, #3
   276e6:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
   276e8:	230f      	movs	r3, #15
   276ea:	18fb      	adds	r3, r7, r3
   276ec:	781b      	ldrb	r3, [r3, #0]
   276ee:	2201      	movs	r2, #1
   276f0:	4013      	ands	r3, r2
   276f2:	d036      	beq.n	27762 <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
   276f4:	697b      	ldr	r3, [r7, #20]
   276f6:	68db      	ldr	r3, [r3, #12]
   276f8:	697a      	ldr	r2, [r7, #20]
   276fa:	0010      	movs	r0, r2
   276fc:	4798      	blx	r3
   276fe:	e030      	b.n	27762 <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
   27700:	697b      	ldr	r3, [r7, #20]
   27702:	0018      	movs	r0, r3
   27704:	4b3e      	ldr	r3, [pc, #248]	; (27800 <_spi_interrupt_handler+0x27c>)
   27706:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
   27708:	697b      	ldr	r3, [r7, #20]
   2770a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   2770c:	b29b      	uxth	r3, r3
   2770e:	2b00      	cmp	r3, #0
   27710:	d127      	bne.n	27762 <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
   27712:	697b      	ldr	r3, [r7, #20]
   27714:	2238      	movs	r2, #56	; 0x38
   27716:	2100      	movs	r1, #0
   27718:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   2771a:	693b      	ldr	r3, [r7, #16]
   2771c:	2204      	movs	r2, #4
   2771e:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
   27720:	697b      	ldr	r3, [r7, #20]
   27722:	7a5b      	ldrb	r3, [r3, #9]
   27724:	b2db      	uxtb	r3, r3
   27726:	2b02      	cmp	r3, #2
   27728:	d10b      	bne.n	27742 <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
   2772a:	230f      	movs	r3, #15
   2772c:	18fb      	adds	r3, r7, r3
   2772e:	781b      	ldrb	r3, [r3, #0]
   27730:	2204      	movs	r2, #4
   27732:	4013      	ands	r3, r2
   27734:	d015      	beq.n	27762 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
   27736:	697b      	ldr	r3, [r7, #20]
   27738:	695b      	ldr	r3, [r3, #20]
   2773a:	697a      	ldr	r2, [r7, #20]
   2773c:	0010      	movs	r0, r2
   2773e:	4798      	blx	r3
   27740:	e00f      	b.n	27762 <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
   27742:	697b      	ldr	r3, [r7, #20]
   27744:	7a5b      	ldrb	r3, [r3, #9]
   27746:	b2db      	uxtb	r3, r3
   27748:	2b00      	cmp	r3, #0
   2774a:	d10a      	bne.n	27762 <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
   2774c:	230f      	movs	r3, #15
   2774e:	18fb      	adds	r3, r7, r3
   27750:	781b      	ldrb	r3, [r3, #0]
   27752:	2202      	movs	r2, #2
   27754:	4013      	ands	r3, r2
   27756:	d004      	beq.n	27762 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
   27758:	697b      	ldr	r3, [r7, #20]
   2775a:	691b      	ldr	r3, [r3, #16]
   2775c:	697a      	ldr	r2, [r7, #20]
   2775e:	0010      	movs	r0, r2
   27760:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
   27762:	230c      	movs	r3, #12
   27764:	18fb      	adds	r3, r7, r3
   27766:	881b      	ldrh	r3, [r3, #0]
   27768:	2202      	movs	r2, #2
   2776a:	4013      	ands	r3, r2
   2776c:	d024      	beq.n	277b8 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   2776e:	697b      	ldr	r3, [r7, #20]
   27770:	795b      	ldrb	r3, [r3, #5]
   27772:	2b01      	cmp	r3, #1
   27774:	d120      	bne.n	277b8 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   27776:	697b      	ldr	r3, [r7, #20]
   27778:	7a5b      	ldrb	r3, [r3, #9]
   2777a:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   2777c:	2b01      	cmp	r3, #1
   2777e:	d11b      	bne.n	277b8 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   27780:	697b      	ldr	r3, [r7, #20]
   27782:	79db      	ldrb	r3, [r3, #7]
   27784:	2201      	movs	r2, #1
   27786:	4053      	eors	r3, r2
   27788:	b2db      	uxtb	r3, r3
   2778a:	2b00      	cmp	r3, #0
   2778c:	d014      	beq.n	277b8 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
   2778e:	693b      	ldr	r3, [r7, #16]
   27790:	2202      	movs	r2, #2
   27792:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
   27794:	697b      	ldr	r3, [r7, #20]
   27796:	2203      	movs	r2, #3
   27798:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
   2779a:	697b      	ldr	r3, [r7, #20]
   2779c:	2238      	movs	r2, #56	; 0x38
   2779e:	2100      	movs	r1, #0
   277a0:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
   277a2:	230f      	movs	r3, #15
   277a4:	18fb      	adds	r3, r7, r3
   277a6:	781b      	ldrb	r3, [r3, #0]
   277a8:	2201      	movs	r2, #1
   277aa:	4013      	ands	r3, r2
   277ac:	d004      	beq.n	277b8 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
   277ae:	697b      	ldr	r3, [r7, #20]
   277b0:	68db      	ldr	r3, [r3, #12]
   277b2:	697a      	ldr	r2, [r7, #20]
   277b4:	0010      	movs	r0, r2
   277b6:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
   277b8:	230c      	movs	r3, #12
   277ba:	18fb      	adds	r3, r7, r3
   277bc:	881b      	ldrh	r3, [r3, #0]
   277be:	2280      	movs	r2, #128	; 0x80
   277c0:	4013      	ands	r3, r2
   277c2:	d010      	beq.n	277e6 <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   277c4:	693b      	ldr	r3, [r7, #16]
   277c6:	2280      	movs	r2, #128	; 0x80
   277c8:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   277ca:	693b      	ldr	r3, [r7, #16]
   277cc:	2280      	movs	r2, #128	; 0x80
   277ce:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
   277d0:	230f      	movs	r3, #15
   277d2:	18fb      	adds	r3, r7, r3
   277d4:	781b      	ldrb	r3, [r3, #0]
   277d6:	2240      	movs	r2, #64	; 0x40
   277d8:	4013      	ands	r3, r2
   277da:	d004      	beq.n	277e6 <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
   277dc:	697b      	ldr	r3, [r7, #20]
   277de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   277e0:	697a      	ldr	r2, [r7, #20]
   277e2:	0010      	movs	r0, r2
   277e4:	4798      	blx	r3
		}
	}
#  endif
}
   277e6:	46c0      	nop			; (mov r8, r8)
   277e8:	46bd      	mov	sp, r7
   277ea:	b006      	add	sp, #24
   277ec:	bd80      	pop	{r7, pc}
   277ee:	46c0      	nop			; (mov r8, r8)
   277f0:	20005bcc 	.word	0x20005bcc
   277f4:	000274a9 	.word	0x000274a9
   277f8:	0002742d 	.word	0x0002742d
   277fc:	000274dd 	.word	0x000274dd
   27800:	00027513 	.word	0x00027513

00027804 <system_gclk_chan_get_config_defaults>:
{
   27804:	b580      	push	{r7, lr}
   27806:	b082      	sub	sp, #8
   27808:	af00      	add	r7, sp, #0
   2780a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2780c:	687b      	ldr	r3, [r7, #4]
   2780e:	2200      	movs	r2, #0
   27810:	701a      	strb	r2, [r3, #0]
}
   27812:	46c0      	nop			; (mov r8, r8)
   27814:	46bd      	mov	sp, r7
   27816:	b002      	add	sp, #8
   27818:	bd80      	pop	{r7, pc}
	...

0002781c <system_apb_clock_set_mask>:
{
   2781c:	b580      	push	{r7, lr}
   2781e:	b082      	sub	sp, #8
   27820:	af00      	add	r7, sp, #0
   27822:	0002      	movs	r2, r0
   27824:	6039      	str	r1, [r7, #0]
   27826:	1dfb      	adds	r3, r7, #7
   27828:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2782a:	1dfb      	adds	r3, r7, #7
   2782c:	781b      	ldrb	r3, [r3, #0]
   2782e:	2b01      	cmp	r3, #1
   27830:	d00a      	beq.n	27848 <system_apb_clock_set_mask+0x2c>
   27832:	2b02      	cmp	r3, #2
   27834:	d00f      	beq.n	27856 <system_apb_clock_set_mask+0x3a>
   27836:	2b00      	cmp	r3, #0
   27838:	d114      	bne.n	27864 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2783a:	4b0e      	ldr	r3, [pc, #56]	; (27874 <system_apb_clock_set_mask+0x58>)
   2783c:	4a0d      	ldr	r2, [pc, #52]	; (27874 <system_apb_clock_set_mask+0x58>)
   2783e:	6991      	ldr	r1, [r2, #24]
   27840:	683a      	ldr	r2, [r7, #0]
   27842:	430a      	orrs	r2, r1
   27844:	619a      	str	r2, [r3, #24]
			break;
   27846:	e00f      	b.n	27868 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   27848:	4b0a      	ldr	r3, [pc, #40]	; (27874 <system_apb_clock_set_mask+0x58>)
   2784a:	4a0a      	ldr	r2, [pc, #40]	; (27874 <system_apb_clock_set_mask+0x58>)
   2784c:	69d1      	ldr	r1, [r2, #28]
   2784e:	683a      	ldr	r2, [r7, #0]
   27850:	430a      	orrs	r2, r1
   27852:	61da      	str	r2, [r3, #28]
			break;
   27854:	e008      	b.n	27868 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   27856:	4b07      	ldr	r3, [pc, #28]	; (27874 <system_apb_clock_set_mask+0x58>)
   27858:	4a06      	ldr	r2, [pc, #24]	; (27874 <system_apb_clock_set_mask+0x58>)
   2785a:	6a11      	ldr	r1, [r2, #32]
   2785c:	683a      	ldr	r2, [r7, #0]
   2785e:	430a      	orrs	r2, r1
   27860:	621a      	str	r2, [r3, #32]
			break;
   27862:	e001      	b.n	27868 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   27864:	2317      	movs	r3, #23
   27866:	e000      	b.n	2786a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   27868:	2300      	movs	r3, #0
}
   2786a:	0018      	movs	r0, r3
   2786c:	46bd      	mov	sp, r7
   2786e:	b002      	add	sp, #8
   27870:	bd80      	pop	{r7, pc}
   27872:	46c0      	nop			; (mov r8, r8)
   27874:	40000400 	.word	0x40000400

00027878 <system_pinmux_get_config_defaults>:
{
   27878:	b580      	push	{r7, lr}
   2787a:	b082      	sub	sp, #8
   2787c:	af00      	add	r7, sp, #0
   2787e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   27880:	687b      	ldr	r3, [r7, #4]
   27882:	2280      	movs	r2, #128	; 0x80
   27884:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   27886:	687b      	ldr	r3, [r7, #4]
   27888:	2200      	movs	r2, #0
   2788a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   2788c:	687b      	ldr	r3, [r7, #4]
   2788e:	2201      	movs	r2, #1
   27890:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   27892:	687b      	ldr	r3, [r7, #4]
   27894:	2200      	movs	r2, #0
   27896:	70da      	strb	r2, [r3, #3]
}
   27898:	46c0      	nop			; (mov r8, r8)
   2789a:	46bd      	mov	sp, r7
   2789c:	b002      	add	sp, #8
   2789e:	bd80      	pop	{r7, pc}

000278a0 <system_is_debugger_present>:
{
   278a0:	b580      	push	{r7, lr}
   278a2:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   278a4:	4b05      	ldr	r3, [pc, #20]	; (278bc <system_is_debugger_present+0x1c>)
   278a6:	789b      	ldrb	r3, [r3, #2]
   278a8:	b2db      	uxtb	r3, r3
   278aa:	001a      	movs	r2, r3
   278ac:	2302      	movs	r3, #2
   278ae:	4013      	ands	r3, r2
   278b0:	1e5a      	subs	r2, r3, #1
   278b2:	4193      	sbcs	r3, r2
   278b4:	b2db      	uxtb	r3, r3
}
   278b6:	0018      	movs	r0, r3
   278b8:	46bd      	mov	sp, r7
   278ba:	bd80      	pop	{r7, pc}
   278bc:	41002000 	.word	0x41002000

000278c0 <usart_is_syncing>:
{
   278c0:	b580      	push	{r7, lr}
   278c2:	b084      	sub	sp, #16
   278c4:	af00      	add	r7, sp, #0
   278c6:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   278c8:	687b      	ldr	r3, [r7, #4]
   278ca:	681b      	ldr	r3, [r3, #0]
   278cc:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   278ce:	68fb      	ldr	r3, [r7, #12]
   278d0:	69db      	ldr	r3, [r3, #28]
   278d2:	1e5a      	subs	r2, r3, #1
   278d4:	4193      	sbcs	r3, r2
   278d6:	b2db      	uxtb	r3, r3
}
   278d8:	0018      	movs	r0, r3
   278da:	46bd      	mov	sp, r7
   278dc:	b004      	add	sp, #16
   278de:	bd80      	pop	{r7, pc}

000278e0 <_usart_wait_for_sync>:
{
   278e0:	b580      	push	{r7, lr}
   278e2:	b082      	sub	sp, #8
   278e4:	af00      	add	r7, sp, #0
   278e6:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   278e8:	46c0      	nop			; (mov r8, r8)
   278ea:	687b      	ldr	r3, [r7, #4]
   278ec:	0018      	movs	r0, r3
   278ee:	4b04      	ldr	r3, [pc, #16]	; (27900 <_usart_wait_for_sync+0x20>)
   278f0:	4798      	blx	r3
   278f2:	1e03      	subs	r3, r0, #0
   278f4:	d1f9      	bne.n	278ea <_usart_wait_for_sync+0xa>
}
   278f6:	46c0      	nop			; (mov r8, r8)
   278f8:	46bd      	mov	sp, r7
   278fa:	b002      	add	sp, #8
   278fc:	bd80      	pop	{r7, pc}
   278fe:	46c0      	nop			; (mov r8, r8)
   27900:	000278c1 	.word	0x000278c1

00027904 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   27904:	b5b0      	push	{r4, r5, r7, lr}
   27906:	b08c      	sub	sp, #48	; 0x30
   27908:	af02      	add	r7, sp, #8
   2790a:	6078      	str	r0, [r7, #4]
   2790c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2790e:	687b      	ldr	r3, [r7, #4]
   27910:	681b      	ldr	r3, [r3, #0]
   27912:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   27914:	687b      	ldr	r3, [r7, #4]
   27916:	681b      	ldr	r3, [r3, #0]
   27918:	0018      	movs	r0, r3
   2791a:	4bab      	ldr	r3, [pc, #684]	; (27bc8 <_usart_set_config+0x2c4>)
   2791c:	4798      	blx	r3
   2791e:	0003      	movs	r3, r0
   27920:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   27922:	697b      	ldr	r3, [r7, #20]
   27924:	3314      	adds	r3, #20
   27926:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   27928:	2300      	movs	r3, #0
   2792a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   2792c:	2300      	movs	r3, #0
   2792e:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   27930:	230a      	movs	r3, #10
   27932:	18fb      	adds	r3, r7, r3
   27934:	2200      	movs	r2, #0
   27936:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   27938:	231f      	movs	r3, #31
   2793a:	18fb      	adds	r3, r7, r3
   2793c:	2200      	movs	r2, #0
   2793e:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   27940:	231e      	movs	r3, #30
   27942:	18fb      	adds	r3, r7, r3
   27944:	2210      	movs	r2, #16
   27946:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   27948:	683b      	ldr	r3, [r7, #0]
   2794a:	8a1b      	ldrh	r3, [r3, #16]
   2794c:	2280      	movs	r2, #128	; 0x80
   2794e:	01d2      	lsls	r2, r2, #7
   27950:	4293      	cmp	r3, r2
   27952:	d01c      	beq.n	2798e <_usart_set_config+0x8a>
   27954:	2280      	movs	r2, #128	; 0x80
   27956:	01d2      	lsls	r2, r2, #7
   27958:	4293      	cmp	r3, r2
   2795a:	dc06      	bgt.n	2796a <_usart_set_config+0x66>
   2795c:	2b00      	cmp	r3, #0
   2795e:	d00d      	beq.n	2797c <_usart_set_config+0x78>
   27960:	2280      	movs	r2, #128	; 0x80
   27962:	0192      	lsls	r2, r2, #6
   27964:	4293      	cmp	r3, r2
   27966:	d024      	beq.n	279b2 <_usart_set_config+0xae>
   27968:	e035      	b.n	279d6 <_usart_set_config+0xd2>
   2796a:	22c0      	movs	r2, #192	; 0xc0
   2796c:	01d2      	lsls	r2, r2, #7
   2796e:	4293      	cmp	r3, r2
   27970:	d028      	beq.n	279c4 <_usart_set_config+0xc0>
   27972:	2280      	movs	r2, #128	; 0x80
   27974:	0212      	lsls	r2, r2, #8
   27976:	4293      	cmp	r3, r2
   27978:	d012      	beq.n	279a0 <_usart_set_config+0x9c>
   2797a:	e02c      	b.n	279d6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2797c:	231f      	movs	r3, #31
   2797e:	18fb      	adds	r3, r7, r3
   27980:	2200      	movs	r2, #0
   27982:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   27984:	231e      	movs	r3, #30
   27986:	18fb      	adds	r3, r7, r3
   27988:	2210      	movs	r2, #16
   2798a:	701a      	strb	r2, [r3, #0]
			break;
   2798c:	e023      	b.n	279d6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2798e:	231f      	movs	r3, #31
   27990:	18fb      	adds	r3, r7, r3
   27992:	2200      	movs	r2, #0
   27994:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   27996:	231e      	movs	r3, #30
   27998:	18fb      	adds	r3, r7, r3
   2799a:	2208      	movs	r2, #8
   2799c:	701a      	strb	r2, [r3, #0]
			break;
   2799e:	e01a      	b.n	279d6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   279a0:	231f      	movs	r3, #31
   279a2:	18fb      	adds	r3, r7, r3
   279a4:	2200      	movs	r2, #0
   279a6:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   279a8:	231e      	movs	r3, #30
   279aa:	18fb      	adds	r3, r7, r3
   279ac:	2203      	movs	r2, #3
   279ae:	701a      	strb	r2, [r3, #0]
			break;
   279b0:	e011      	b.n	279d6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   279b2:	231f      	movs	r3, #31
   279b4:	18fb      	adds	r3, r7, r3
   279b6:	2201      	movs	r2, #1
   279b8:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   279ba:	231e      	movs	r3, #30
   279bc:	18fb      	adds	r3, r7, r3
   279be:	2210      	movs	r2, #16
   279c0:	701a      	strb	r2, [r3, #0]
			break;
   279c2:	e008      	b.n	279d6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   279c4:	231f      	movs	r3, #31
   279c6:	18fb      	adds	r3, r7, r3
   279c8:	2201      	movs	r2, #1
   279ca:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   279cc:	231e      	movs	r3, #30
   279ce:	18fb      	adds	r3, r7, r3
   279d0:	2208      	movs	r2, #8
   279d2:	701a      	strb	r2, [r3, #0]
			break;
   279d4:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   279d6:	683b      	ldr	r3, [r7, #0]
   279d8:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   279da:	683b      	ldr	r3, [r7, #0]
   279dc:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   279de:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   279e0:	683b      	ldr	r3, [r7, #0]
   279e2:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   279e4:	4313      	orrs	r3, r2
		config->sample_rate |
   279e6:	683a      	ldr	r2, [r7, #0]
   279e8:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   279ea:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   279ec:	683a      	ldr	r2, [r7, #0]
   279ee:	7e12      	ldrb	r2, [r2, #24]
   279f0:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   279f2:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   279f4:	683a      	ldr	r2, [r7, #0]
   279f6:	2126      	movs	r1, #38	; 0x26
   279f8:	5c52      	ldrb	r2, [r2, r1]
   279fa:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   279fc:	4313      	orrs	r3, r2
   279fe:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   27a00:	231d      	movs	r3, #29
   27a02:	18fb      	adds	r3, r7, r3
   27a04:	2200      	movs	r2, #0
   27a06:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   27a08:	683b      	ldr	r3, [r7, #0]
   27a0a:	685b      	ldr	r3, [r3, #4]
   27a0c:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   27a0e:	68fb      	ldr	r3, [r7, #12]
   27a10:	2b00      	cmp	r3, #0
   27a12:	d01e      	beq.n	27a52 <_usart_set_config+0x14e>
   27a14:	2280      	movs	r2, #128	; 0x80
   27a16:	0552      	lsls	r2, r2, #21
   27a18:	4293      	cmp	r3, r2
   27a1a:	d14f      	bne.n	27abc <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   27a1c:	683b      	ldr	r3, [r7, #0]
   27a1e:	2227      	movs	r2, #39	; 0x27
   27a20:	5c9b      	ldrb	r3, [r3, r2]
   27a22:	2201      	movs	r2, #1
   27a24:	4053      	eors	r3, r2
   27a26:	b2db      	uxtb	r3, r3
   27a28:	2b00      	cmp	r3, #0
   27a2a:	d046      	beq.n	27aba <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   27a2c:	683b      	ldr	r3, [r7, #0]
   27a2e:	6a1d      	ldr	r5, [r3, #32]
   27a30:	693b      	ldr	r3, [r7, #16]
   27a32:	b2db      	uxtb	r3, r3
   27a34:	0018      	movs	r0, r3
   27a36:	4b65      	ldr	r3, [pc, #404]	; (27bcc <_usart_set_config+0x2c8>)
   27a38:	4798      	blx	r3
   27a3a:	0001      	movs	r1, r0
   27a3c:	231d      	movs	r3, #29
   27a3e:	18fc      	adds	r4, r7, r3
   27a40:	230a      	movs	r3, #10
   27a42:	18fb      	adds	r3, r7, r3
   27a44:	001a      	movs	r2, r3
   27a46:	0028      	movs	r0, r5
   27a48:	4b61      	ldr	r3, [pc, #388]	; (27bd0 <_usart_set_config+0x2cc>)
   27a4a:	4798      	blx	r3
   27a4c:	0003      	movs	r3, r0
   27a4e:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   27a50:	e033      	b.n	27aba <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   27a52:	683b      	ldr	r3, [r7, #0]
   27a54:	2227      	movs	r2, #39	; 0x27
   27a56:	5c9b      	ldrb	r3, [r3, r2]
   27a58:	2b00      	cmp	r3, #0
   27a5a:	d014      	beq.n	27a86 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   27a5c:	683b      	ldr	r3, [r7, #0]
   27a5e:	6a18      	ldr	r0, [r3, #32]
   27a60:	683b      	ldr	r3, [r7, #0]
   27a62:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   27a64:	231d      	movs	r3, #29
   27a66:	18fc      	adds	r4, r7, r3
   27a68:	231f      	movs	r3, #31
   27a6a:	18fb      	adds	r3, r7, r3
   27a6c:	781d      	ldrb	r5, [r3, #0]
   27a6e:	230a      	movs	r3, #10
   27a70:	18fa      	adds	r2, r7, r3
   27a72:	231e      	movs	r3, #30
   27a74:	18fb      	adds	r3, r7, r3
   27a76:	781b      	ldrb	r3, [r3, #0]
   27a78:	9300      	str	r3, [sp, #0]
   27a7a:	002b      	movs	r3, r5
   27a7c:	4d55      	ldr	r5, [pc, #340]	; (27bd4 <_usart_set_config+0x2d0>)
   27a7e:	47a8      	blx	r5
   27a80:	0003      	movs	r3, r0
   27a82:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   27a84:	e01a      	b.n	27abc <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   27a86:	683b      	ldr	r3, [r7, #0]
   27a88:	6a1d      	ldr	r5, [r3, #32]
   27a8a:	693b      	ldr	r3, [r7, #16]
   27a8c:	b2db      	uxtb	r3, r3
   27a8e:	0018      	movs	r0, r3
   27a90:	4b4e      	ldr	r3, [pc, #312]	; (27bcc <_usart_set_config+0x2c8>)
   27a92:	4798      	blx	r3
				status_code =
   27a94:	231d      	movs	r3, #29
   27a96:	18fc      	adds	r4, r7, r3
   27a98:	231f      	movs	r3, #31
   27a9a:	18fb      	adds	r3, r7, r3
   27a9c:	7819      	ldrb	r1, [r3, #0]
   27a9e:	230a      	movs	r3, #10
   27aa0:	18fa      	adds	r2, r7, r3
   27aa2:	231e      	movs	r3, #30
   27aa4:	18fb      	adds	r3, r7, r3
   27aa6:	781b      	ldrb	r3, [r3, #0]
   27aa8:	9300      	str	r3, [sp, #0]
   27aaa:	000b      	movs	r3, r1
   27aac:	0001      	movs	r1, r0
   27aae:	0028      	movs	r0, r5
   27ab0:	4d48      	ldr	r5, [pc, #288]	; (27bd4 <_usart_set_config+0x2d0>)
   27ab2:	47a8      	blx	r5
   27ab4:	0003      	movs	r3, r0
   27ab6:	7023      	strb	r3, [r4, #0]
			break;
   27ab8:	e000      	b.n	27abc <_usart_set_config+0x1b8>
			break;
   27aba:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   27abc:	231d      	movs	r3, #29
   27abe:	18fb      	adds	r3, r7, r3
   27ac0:	781b      	ldrb	r3, [r3, #0]
   27ac2:	2b00      	cmp	r3, #0
   27ac4:	d003      	beq.n	27ace <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   27ac6:	231d      	movs	r3, #29
   27ac8:	18fb      	adds	r3, r7, r3
   27aca:	781b      	ldrb	r3, [r3, #0]
   27acc:	e077      	b.n	27bbe <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   27ace:	683b      	ldr	r3, [r7, #0]
   27ad0:	7e5b      	ldrb	r3, [r3, #25]
   27ad2:	2b00      	cmp	r3, #0
   27ad4:	d003      	beq.n	27ade <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   27ad6:	683b      	ldr	r3, [r7, #0]
   27ad8:	7e9a      	ldrb	r2, [r3, #26]
   27ada:	69bb      	ldr	r3, [r7, #24]
   27adc:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   27ade:	687b      	ldr	r3, [r7, #4]
   27ae0:	0018      	movs	r0, r3
   27ae2:	4b3d      	ldr	r3, [pc, #244]	; (27bd8 <_usart_set_config+0x2d4>)
   27ae4:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   27ae6:	230a      	movs	r3, #10
   27ae8:	18fb      	adds	r3, r7, r3
   27aea:	881a      	ldrh	r2, [r3, #0]
   27aec:	69bb      	ldr	r3, [r7, #24]
   27aee:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   27af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   27af2:	68fb      	ldr	r3, [r7, #12]
   27af4:	4313      	orrs	r3, r2
   27af6:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   27af8:	683b      	ldr	r3, [r7, #0]
   27afa:	2227      	movs	r2, #39	; 0x27
   27afc:	5c9b      	ldrb	r3, [r3, r2]
   27afe:	2201      	movs	r2, #1
   27b00:	4053      	eors	r3, r2
   27b02:	b2db      	uxtb	r3, r3
   27b04:	2b00      	cmp	r3, #0
   27b06:	d003      	beq.n	27b10 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   27b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   27b0a:	2204      	movs	r2, #4
   27b0c:	4313      	orrs	r3, r2
   27b0e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   27b10:	683b      	ldr	r3, [r7, #0]
   27b12:	7e5b      	ldrb	r3, [r3, #25]
   27b14:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   27b16:	683b      	ldr	r3, [r7, #0]
   27b18:	7f1b      	ldrb	r3, [r3, #28]
   27b1a:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   27b1c:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   27b1e:	683b      	ldr	r3, [r7, #0]
   27b20:	7f5b      	ldrb	r3, [r3, #29]
   27b22:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   27b24:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   27b26:	683b      	ldr	r3, [r7, #0]
   27b28:	2124      	movs	r1, #36	; 0x24
   27b2a:	5c5b      	ldrb	r3, [r3, r1]
   27b2c:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   27b2e:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   27b30:	683b      	ldr	r3, [r7, #0]
   27b32:	2125      	movs	r1, #37	; 0x25
   27b34:	5c5b      	ldrb	r3, [r3, r1]
   27b36:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   27b38:	4313      	orrs	r3, r2
	ctrlb =  
   27b3a:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   27b3c:	683b      	ldr	r3, [r7, #0]
   27b3e:	7a9b      	ldrb	r3, [r3, #10]
   27b40:	001a      	movs	r2, r3
   27b42:	6a3b      	ldr	r3, [r7, #32]
   27b44:	4313      	orrs	r3, r2
   27b46:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   27b48:	683b      	ldr	r3, [r7, #0]
   27b4a:	7adb      	ldrb	r3, [r3, #11]
   27b4c:	001a      	movs	r2, r3
   27b4e:	6a3b      	ldr	r3, [r7, #32]
   27b50:	4313      	orrs	r3, r2
   27b52:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   27b54:	683b      	ldr	r3, [r7, #0]
   27b56:	891b      	ldrh	r3, [r3, #8]
   27b58:	2bff      	cmp	r3, #255	; 0xff
   27b5a:	d00b      	beq.n	27b74 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   27b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   27b5e:	2280      	movs	r2, #128	; 0x80
   27b60:	0452      	lsls	r2, r2, #17
   27b62:	4313      	orrs	r3, r2
   27b64:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   27b66:	683b      	ldr	r3, [r7, #0]
   27b68:	891b      	ldrh	r3, [r3, #8]
   27b6a:	001a      	movs	r2, r3
   27b6c:	6a3b      	ldr	r3, [r7, #32]
   27b6e:	4313      	orrs	r3, r2
   27b70:	623b      	str	r3, [r7, #32]
   27b72:	e008      	b.n	27b86 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   27b74:	683b      	ldr	r3, [r7, #0]
   27b76:	7edb      	ldrb	r3, [r3, #27]
   27b78:	2b00      	cmp	r3, #0
   27b7a:	d004      	beq.n	27b86 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   27b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   27b7e:	2280      	movs	r2, #128	; 0x80
   27b80:	04d2      	lsls	r2, r2, #19
   27b82:	4313      	orrs	r3, r2
   27b84:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   27b86:	683b      	ldr	r3, [r7, #0]
   27b88:	222c      	movs	r2, #44	; 0x2c
   27b8a:	5c9b      	ldrb	r3, [r3, r2]
   27b8c:	2b00      	cmp	r3, #0
   27b8e:	d103      	bne.n	27b98 <_usart_set_config+0x294>
   27b90:	4b12      	ldr	r3, [pc, #72]	; (27bdc <_usart_set_config+0x2d8>)
   27b92:	4798      	blx	r3
   27b94:	1e03      	subs	r3, r0, #0
   27b96:	d003      	beq.n	27ba0 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   27b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   27b9a:	2280      	movs	r2, #128	; 0x80
   27b9c:	4313      	orrs	r3, r2
   27b9e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   27ba0:	687b      	ldr	r3, [r7, #4]
   27ba2:	0018      	movs	r0, r3
   27ba4:	4b0c      	ldr	r3, [pc, #48]	; (27bd8 <_usart_set_config+0x2d4>)
   27ba6:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   27ba8:	69bb      	ldr	r3, [r7, #24]
   27baa:	6a3a      	ldr	r2, [r7, #32]
   27bac:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   27bae:	687b      	ldr	r3, [r7, #4]
   27bb0:	0018      	movs	r0, r3
   27bb2:	4b09      	ldr	r3, [pc, #36]	; (27bd8 <_usart_set_config+0x2d4>)
   27bb4:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   27bb6:	69bb      	ldr	r3, [r7, #24]
   27bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   27bba:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   27bbc:	2300      	movs	r3, #0
}
   27bbe:	0018      	movs	r0, r3
   27bc0:	46bd      	mov	sp, r7
   27bc2:	b00a      	add	sp, #40	; 0x28
   27bc4:	bdb0      	pop	{r4, r5, r7, pc}
   27bc6:	46c0      	nop			; (mov r8, r8)
   27bc8:	000266ad 	.word	0x000266ad
   27bcc:	00029061 	.word	0x00029061
   27bd0:	00026227 	.word	0x00026227
   27bd4:	000262a5 	.word	0x000262a5
   27bd8:	000278e1 	.word	0x000278e1
   27bdc:	000278a1 	.word	0x000278a1

00027be0 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   27be0:	b590      	push	{r4, r7, lr}
   27be2:	b093      	sub	sp, #76	; 0x4c
   27be4:	af00      	add	r7, sp, #0
   27be6:	60f8      	str	r0, [r7, #12]
   27be8:	60b9      	str	r1, [r7, #8]
   27bea:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   27bec:	233b      	movs	r3, #59	; 0x3b
   27bee:	18fb      	adds	r3, r7, r3
   27bf0:	2200      	movs	r2, #0
   27bf2:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   27bf4:	68fb      	ldr	r3, [r7, #12]
   27bf6:	68ba      	ldr	r2, [r7, #8]
   27bf8:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   27bfa:	68fb      	ldr	r3, [r7, #12]
   27bfc:	681b      	ldr	r3, [r3, #0]
   27bfe:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   27c00:	68fb      	ldr	r3, [r7, #12]
   27c02:	681b      	ldr	r3, [r3, #0]
   27c04:	0018      	movs	r0, r3
   27c06:	4b86      	ldr	r3, [pc, #536]	; (27e20 <usart_init+0x240>)
   27c08:	4798      	blx	r3
   27c0a:	0003      	movs	r3, r0
   27c0c:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   27c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   27c10:	3302      	adds	r3, #2
   27c12:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   27c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   27c16:	3314      	adds	r3, #20
   27c18:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   27c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27c1c:	681b      	ldr	r3, [r3, #0]
   27c1e:	2201      	movs	r2, #1
   27c20:	4013      	ands	r3, r2
   27c22:	d001      	beq.n	27c28 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   27c24:	2305      	movs	r3, #5
   27c26:	e0f6      	b.n	27e16 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   27c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27c2a:	681b      	ldr	r3, [r3, #0]
   27c2c:	2202      	movs	r2, #2
   27c2e:	4013      	ands	r3, r2
   27c30:	d001      	beq.n	27c36 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   27c32:	231c      	movs	r3, #28
   27c34:	e0ef      	b.n	27e16 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   27c36:	2201      	movs	r2, #1
   27c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27c3a:	409a      	lsls	r2, r3
   27c3c:	0013      	movs	r3, r2
   27c3e:	0019      	movs	r1, r3
   27c40:	2002      	movs	r0, #2
   27c42:	4b78      	ldr	r3, [pc, #480]	; (27e24 <usart_init+0x244>)
   27c44:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   27c46:	2324      	movs	r3, #36	; 0x24
   27c48:	18fb      	adds	r3, r7, r3
   27c4a:	0018      	movs	r0, r3
   27c4c:	4b76      	ldr	r3, [pc, #472]	; (27e28 <usart_init+0x248>)
   27c4e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   27c50:	687b      	ldr	r3, [r7, #4]
   27c52:	222d      	movs	r2, #45	; 0x2d
   27c54:	5c9a      	ldrb	r2, [r3, r2]
   27c56:	2324      	movs	r3, #36	; 0x24
   27c58:	18fb      	adds	r3, r7, r3
   27c5a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   27c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   27c5e:	b2db      	uxtb	r3, r3
   27c60:	2224      	movs	r2, #36	; 0x24
   27c62:	18ba      	adds	r2, r7, r2
   27c64:	0011      	movs	r1, r2
   27c66:	0018      	movs	r0, r3
   27c68:	4b70      	ldr	r3, [pc, #448]	; (27e2c <usart_init+0x24c>)
   27c6a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   27c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   27c6e:	b2db      	uxtb	r3, r3
   27c70:	0018      	movs	r0, r3
   27c72:	4b6f      	ldr	r3, [pc, #444]	; (27e30 <usart_init+0x250>)
   27c74:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   27c76:	687b      	ldr	r3, [r7, #4]
   27c78:	222d      	movs	r2, #45	; 0x2d
   27c7a:	5c9b      	ldrb	r3, [r3, r2]
   27c7c:	2100      	movs	r1, #0
   27c7e:	0018      	movs	r0, r3
   27c80:	4b6c      	ldr	r3, [pc, #432]	; (27e34 <usart_init+0x254>)
   27c82:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   27c84:	687b      	ldr	r3, [r7, #4]
   27c86:	7ada      	ldrb	r2, [r3, #11]
   27c88:	68fb      	ldr	r3, [r7, #12]
   27c8a:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   27c8c:	687b      	ldr	r3, [r7, #4]
   27c8e:	2224      	movs	r2, #36	; 0x24
   27c90:	5c9a      	ldrb	r2, [r3, r2]
   27c92:	68fb      	ldr	r3, [r7, #12]
   27c94:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   27c96:	687b      	ldr	r3, [r7, #4]
   27c98:	2225      	movs	r2, #37	; 0x25
   27c9a:	5c9a      	ldrb	r2, [r3, r2]
   27c9c:	68fb      	ldr	r3, [r7, #12]
   27c9e:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   27ca0:	687b      	ldr	r3, [r7, #4]
   27ca2:	7eda      	ldrb	r2, [r3, #27]
   27ca4:	68fb      	ldr	r3, [r7, #12]
   27ca6:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   27ca8:	687b      	ldr	r3, [r7, #4]
   27caa:	7f1a      	ldrb	r2, [r3, #28]
   27cac:	68fb      	ldr	r3, [r7, #12]
   27cae:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   27cb0:	233b      	movs	r3, #59	; 0x3b
   27cb2:	18fc      	adds	r4, r7, r3
   27cb4:	687a      	ldr	r2, [r7, #4]
   27cb6:	68fb      	ldr	r3, [r7, #12]
   27cb8:	0011      	movs	r1, r2
   27cba:	0018      	movs	r0, r3
   27cbc:	4b5e      	ldr	r3, [pc, #376]	; (27e38 <usart_init+0x258>)
   27cbe:	4798      	blx	r3
   27cc0:	0003      	movs	r3, r0
   27cc2:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   27cc4:	233b      	movs	r3, #59	; 0x3b
   27cc6:	18fb      	adds	r3, r7, r3
   27cc8:	781b      	ldrb	r3, [r3, #0]
   27cca:	2b00      	cmp	r3, #0
   27ccc:	d003      	beq.n	27cd6 <usart_init+0xf6>
		return status_code;
   27cce:	233b      	movs	r3, #59	; 0x3b
   27cd0:	18fb      	adds	r3, r7, r3
   27cd2:	781b      	ldrb	r3, [r3, #0]
   27cd4:	e09f      	b.n	27e16 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   27cd6:	2320      	movs	r3, #32
   27cd8:	18fb      	adds	r3, r7, r3
   27cda:	0018      	movs	r0, r3
   27cdc:	4b57      	ldr	r3, [pc, #348]	; (27e3c <usart_init+0x25c>)
   27cde:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   27ce0:	2320      	movs	r3, #32
   27ce2:	18fb      	adds	r3, r7, r3
   27ce4:	2200      	movs	r2, #0
   27ce6:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   27ce8:	2320      	movs	r3, #32
   27cea:	18fb      	adds	r3, r7, r3
   27cec:	2200      	movs	r2, #0
   27cee:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   27cf0:	687b      	ldr	r3, [r7, #4]
   27cf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   27cf4:	2310      	movs	r3, #16
   27cf6:	18fb      	adds	r3, r7, r3
   27cf8:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   27cfa:	687b      	ldr	r3, [r7, #4]
   27cfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   27cfe:	2310      	movs	r3, #16
   27d00:	18fb      	adds	r3, r7, r3
   27d02:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   27d04:	687b      	ldr	r3, [r7, #4]
   27d06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   27d08:	2310      	movs	r3, #16
   27d0a:	18fb      	adds	r3, r7, r3
   27d0c:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   27d0e:	687b      	ldr	r3, [r7, #4]
   27d10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   27d12:	2310      	movs	r3, #16
   27d14:	18fb      	adds	r3, r7, r3
   27d16:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   27d18:	2347      	movs	r3, #71	; 0x47
   27d1a:	18fb      	adds	r3, r7, r3
   27d1c:	2200      	movs	r2, #0
   27d1e:	701a      	strb	r2, [r3, #0]
   27d20:	e02c      	b.n	27d7c <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   27d22:	2347      	movs	r3, #71	; 0x47
   27d24:	18fb      	adds	r3, r7, r3
   27d26:	781a      	ldrb	r2, [r3, #0]
   27d28:	2310      	movs	r3, #16
   27d2a:	18fb      	adds	r3, r7, r3
   27d2c:	0092      	lsls	r2, r2, #2
   27d2e:	58d3      	ldr	r3, [r2, r3]
   27d30:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   27d32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   27d34:	2b00      	cmp	r3, #0
   27d36:	d109      	bne.n	27d4c <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   27d38:	2347      	movs	r3, #71	; 0x47
   27d3a:	18fb      	adds	r3, r7, r3
   27d3c:	781a      	ldrb	r2, [r3, #0]
   27d3e:	68bb      	ldr	r3, [r7, #8]
   27d40:	0011      	movs	r1, r2
   27d42:	0018      	movs	r0, r3
   27d44:	4b3e      	ldr	r3, [pc, #248]	; (27e40 <usart_init+0x260>)
   27d46:	4798      	blx	r3
   27d48:	0003      	movs	r3, r0
   27d4a:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   27d4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   27d4e:	3301      	adds	r3, #1
   27d50:	d00d      	beq.n	27d6e <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   27d52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   27d54:	b2da      	uxtb	r2, r3
   27d56:	2320      	movs	r3, #32
   27d58:	18fb      	adds	r3, r7, r3
   27d5a:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   27d5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   27d5e:	0c1b      	lsrs	r3, r3, #16
   27d60:	b2db      	uxtb	r3, r3
   27d62:	2220      	movs	r2, #32
   27d64:	18ba      	adds	r2, r7, r2
   27d66:	0011      	movs	r1, r2
   27d68:	0018      	movs	r0, r3
   27d6a:	4b36      	ldr	r3, [pc, #216]	; (27e44 <usart_init+0x264>)
   27d6c:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   27d6e:	2347      	movs	r3, #71	; 0x47
   27d70:	18fb      	adds	r3, r7, r3
   27d72:	781a      	ldrb	r2, [r3, #0]
   27d74:	2347      	movs	r3, #71	; 0x47
   27d76:	18fb      	adds	r3, r7, r3
   27d78:	3201      	adds	r2, #1
   27d7a:	701a      	strb	r2, [r3, #0]
   27d7c:	2347      	movs	r3, #71	; 0x47
   27d7e:	18fb      	adds	r3, r7, r3
   27d80:	781b      	ldrb	r3, [r3, #0]
   27d82:	2b03      	cmp	r3, #3
   27d84:	d9cd      	bls.n	27d22 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   27d86:	2300      	movs	r3, #0
   27d88:	63fb      	str	r3, [r7, #60]	; 0x3c
   27d8a:	e00a      	b.n	27da2 <usart_init+0x1c2>
		module->callback[i]            = NULL;
   27d8c:	68fa      	ldr	r2, [r7, #12]
   27d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   27d90:	3302      	adds	r3, #2
   27d92:	009b      	lsls	r3, r3, #2
   27d94:	18d3      	adds	r3, r2, r3
   27d96:	3304      	adds	r3, #4
   27d98:	2200      	movs	r2, #0
   27d9a:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   27d9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   27d9e:	3301      	adds	r3, #1
   27da0:	63fb      	str	r3, [r7, #60]	; 0x3c
   27da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   27da4:	2b05      	cmp	r3, #5
   27da6:	d9f1      	bls.n	27d8c <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   27da8:	68fb      	ldr	r3, [r7, #12]
   27daa:	2200      	movs	r2, #0
   27dac:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   27dae:	68fb      	ldr	r3, [r7, #12]
   27db0:	2200      	movs	r2, #0
   27db2:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   27db4:	68fb      	ldr	r3, [r7, #12]
   27db6:	2200      	movs	r2, #0
   27db8:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   27dba:	68fb      	ldr	r3, [r7, #12]
   27dbc:	2200      	movs	r2, #0
   27dbe:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   27dc0:	68fb      	ldr	r3, [r7, #12]
   27dc2:	2230      	movs	r2, #48	; 0x30
   27dc4:	2100      	movs	r1, #0
   27dc6:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   27dc8:	68fb      	ldr	r3, [r7, #12]
   27dca:	2231      	movs	r2, #49	; 0x31
   27dcc:	2100      	movs	r1, #0
   27dce:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   27dd0:	68fb      	ldr	r3, [r7, #12]
   27dd2:	2232      	movs	r2, #50	; 0x32
   27dd4:	2100      	movs	r1, #0
   27dd6:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   27dd8:	68fb      	ldr	r3, [r7, #12]
   27dda:	2233      	movs	r2, #51	; 0x33
   27ddc:	2100      	movs	r1, #0
   27dde:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   27de0:	68fb      	ldr	r3, [r7, #12]
   27de2:	681b      	ldr	r3, [r3, #0]
   27de4:	2227      	movs	r2, #39	; 0x27
   27de6:	18bc      	adds	r4, r7, r2
   27de8:	0018      	movs	r0, r3
   27dea:	4b0d      	ldr	r3, [pc, #52]	; (27e20 <usart_init+0x240>)
   27dec:	4798      	blx	r3
   27dee:	0003      	movs	r3, r0
   27df0:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   27df2:	4a15      	ldr	r2, [pc, #84]	; (27e48 <usart_init+0x268>)
   27df4:	2327      	movs	r3, #39	; 0x27
   27df6:	18fb      	adds	r3, r7, r3
   27df8:	781b      	ldrb	r3, [r3, #0]
   27dfa:	0011      	movs	r1, r2
   27dfc:	0018      	movs	r0, r3
   27dfe:	4b13      	ldr	r3, [pc, #76]	; (27e4c <usart_init+0x26c>)
   27e00:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   27e02:	2327      	movs	r3, #39	; 0x27
   27e04:	18fb      	adds	r3, r7, r3
   27e06:	781a      	ldrb	r2, [r3, #0]
   27e08:	4b11      	ldr	r3, [pc, #68]	; (27e50 <usart_init+0x270>)
   27e0a:	0092      	lsls	r2, r2, #2
   27e0c:	68f9      	ldr	r1, [r7, #12]
   27e0e:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   27e10:	233b      	movs	r3, #59	; 0x3b
   27e12:	18fb      	adds	r3, r7, r3
   27e14:	781b      	ldrb	r3, [r3, #0]
}
   27e16:	0018      	movs	r0, r3
   27e18:	46bd      	mov	sp, r7
   27e1a:	b013      	add	sp, #76	; 0x4c
   27e1c:	bd90      	pop	{r4, r7, pc}
   27e1e:	46c0      	nop			; (mov r8, r8)
   27e20:	000266ad 	.word	0x000266ad
   27e24:	0002781d 	.word	0x0002781d
   27e28:	00027805 	.word	0x00027805
   27e2c:	00028f3d 	.word	0x00028f3d
   27e30:	00028f81 	.word	0x00028f81
   27e34:	00026465 	.word	0x00026465
   27e38:	00027905 	.word	0x00027905
   27e3c:	00027879 	.word	0x00027879
   27e40:	000264f1 	.word	0x000264f1
   27e44:	0002929d 	.word	0x0002929d
   27e48:	000280bd 	.word	0x000280bd
   27e4c:	00026711 	.word	0x00026711
   27e50:	20005bcc 	.word	0x20005bcc

00027e54 <system_interrupt_enter_critical_section>:
{
   27e54:	b580      	push	{r7, lr}
   27e56:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   27e58:	4b02      	ldr	r3, [pc, #8]	; (27e64 <system_interrupt_enter_critical_section+0x10>)
   27e5a:	4798      	blx	r3
}
   27e5c:	46c0      	nop			; (mov r8, r8)
   27e5e:	46bd      	mov	sp, r7
   27e60:	bd80      	pop	{r7, pc}
   27e62:	46c0      	nop			; (mov r8, r8)
   27e64:	000252a9 	.word	0x000252a9

00027e68 <system_interrupt_leave_critical_section>:
{
   27e68:	b580      	push	{r7, lr}
   27e6a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   27e6c:	4b02      	ldr	r3, [pc, #8]	; (27e78 <system_interrupt_leave_critical_section+0x10>)
   27e6e:	4798      	blx	r3
}
   27e70:	46c0      	nop			; (mov r8, r8)
   27e72:	46bd      	mov	sp, r7
   27e74:	bd80      	pop	{r7, pc}
   27e76:	46c0      	nop			; (mov r8, r8)
   27e78:	000252fd 	.word	0x000252fd

00027e7c <usart_is_syncing>:
{
   27e7c:	b580      	push	{r7, lr}
   27e7e:	b084      	sub	sp, #16
   27e80:	af00      	add	r7, sp, #0
   27e82:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   27e84:	687b      	ldr	r3, [r7, #4]
   27e86:	681b      	ldr	r3, [r3, #0]
   27e88:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   27e8a:	68fb      	ldr	r3, [r7, #12]
   27e8c:	69db      	ldr	r3, [r3, #28]
   27e8e:	1e5a      	subs	r2, r3, #1
   27e90:	4193      	sbcs	r3, r2
   27e92:	b2db      	uxtb	r3, r3
}
   27e94:	0018      	movs	r0, r3
   27e96:	46bd      	mov	sp, r7
   27e98:	b004      	add	sp, #16
   27e9a:	bd80      	pop	{r7, pc}

00027e9c <_usart_wait_for_sync>:
{
   27e9c:	b580      	push	{r7, lr}
   27e9e:	b082      	sub	sp, #8
   27ea0:	af00      	add	r7, sp, #0
   27ea2:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   27ea4:	46c0      	nop			; (mov r8, r8)
   27ea6:	687b      	ldr	r3, [r7, #4]
   27ea8:	0018      	movs	r0, r3
   27eaa:	4b04      	ldr	r3, [pc, #16]	; (27ebc <_usart_wait_for_sync+0x20>)
   27eac:	4798      	blx	r3
   27eae:	1e03      	subs	r3, r0, #0
   27eb0:	d1f9      	bne.n	27ea6 <_usart_wait_for_sync+0xa>
}
   27eb2:	46c0      	nop			; (mov r8, r8)
   27eb4:	46bd      	mov	sp, r7
   27eb6:	b002      	add	sp, #8
   27eb8:	bd80      	pop	{r7, pc}
   27eba:	46c0      	nop			; (mov r8, r8)
   27ebc:	00027e7d 	.word	0x00027e7d

00027ec0 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   27ec0:	b580      	push	{r7, lr}
   27ec2:	b086      	sub	sp, #24
   27ec4:	af00      	add	r7, sp, #0
   27ec6:	60f8      	str	r0, [r7, #12]
   27ec8:	60b9      	str	r1, [r7, #8]
   27eca:	1dbb      	adds	r3, r7, #6
   27ecc:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   27ece:	68fb      	ldr	r3, [r7, #12]
   27ed0:	681b      	ldr	r3, [r3, #0]
   27ed2:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   27ed4:	4b0f      	ldr	r3, [pc, #60]	; (27f14 <_usart_write_buffer+0x54>)
   27ed6:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   27ed8:	68fb      	ldr	r3, [r7, #12]
   27eda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   27edc:	b29b      	uxth	r3, r3
   27ede:	2b00      	cmp	r3, #0
   27ee0:	d003      	beq.n	27eea <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
   27ee2:	4b0d      	ldr	r3, [pc, #52]	; (27f18 <_usart_write_buffer+0x58>)
   27ee4:	4798      	blx	r3
		return STATUS_BUSY;
   27ee6:	2305      	movs	r3, #5
   27ee8:	e010      	b.n	27f0c <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
   27eea:	68fb      	ldr	r3, [r7, #12]
   27eec:	1dba      	adds	r2, r7, #6
   27eee:	8812      	ldrh	r2, [r2, #0]
   27ef0:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
   27ef2:	4b09      	ldr	r3, [pc, #36]	; (27f18 <_usart_write_buffer+0x58>)
   27ef4:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
   27ef6:	68fb      	ldr	r3, [r7, #12]
   27ef8:	68ba      	ldr	r2, [r7, #8]
   27efa:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   27efc:	68fb      	ldr	r3, [r7, #12]
   27efe:	2233      	movs	r2, #51	; 0x33
   27f00:	2105      	movs	r1, #5
   27f02:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   27f04:	697b      	ldr	r3, [r7, #20]
   27f06:	2201      	movs	r2, #1
   27f08:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
   27f0a:	2300      	movs	r3, #0
}
   27f0c:	0018      	movs	r0, r3
   27f0e:	46bd      	mov	sp, r7
   27f10:	b006      	add	sp, #24
   27f12:	bd80      	pop	{r7, pc}
   27f14:	00027e55 	.word	0x00027e55
   27f18:	00027e69 	.word	0x00027e69

00027f1c <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   27f1c:	b580      	push	{r7, lr}
   27f1e:	b086      	sub	sp, #24
   27f20:	af00      	add	r7, sp, #0
   27f22:	60f8      	str	r0, [r7, #12]
   27f24:	60b9      	str	r1, [r7, #8]
   27f26:	1dbb      	adds	r3, r7, #6
   27f28:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   27f2a:	68fb      	ldr	r3, [r7, #12]
   27f2c:	681b      	ldr	r3, [r3, #0]
   27f2e:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   27f30:	4b16      	ldr	r3, [pc, #88]	; (27f8c <_usart_read_buffer+0x70>)
   27f32:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   27f34:	68fb      	ldr	r3, [r7, #12]
   27f36:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   27f38:	b29b      	uxth	r3, r3
   27f3a:	2b00      	cmp	r3, #0
   27f3c:	d003      	beq.n	27f46 <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
   27f3e:	4b14      	ldr	r3, [pc, #80]	; (27f90 <_usart_read_buffer+0x74>)
   27f40:	4798      	blx	r3
		return STATUS_BUSY;
   27f42:	2305      	movs	r3, #5
   27f44:	e01e      	b.n	27f84 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
   27f46:	68fb      	ldr	r3, [r7, #12]
   27f48:	1dba      	adds	r2, r7, #6
   27f4a:	8812      	ldrh	r2, [r2, #0]
   27f4c:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
   27f4e:	4b10      	ldr	r3, [pc, #64]	; (27f90 <_usart_read_buffer+0x74>)
   27f50:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
   27f52:	68fb      	ldr	r3, [r7, #12]
   27f54:	68ba      	ldr	r2, [r7, #8]
   27f56:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   27f58:	68fb      	ldr	r3, [r7, #12]
   27f5a:	2232      	movs	r2, #50	; 0x32
   27f5c:	2105      	movs	r1, #5
   27f5e:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   27f60:	697b      	ldr	r3, [r7, #20]
   27f62:	2204      	movs	r2, #4
   27f64:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
   27f66:	68fb      	ldr	r3, [r7, #12]
   27f68:	7a1b      	ldrb	r3, [r3, #8]
   27f6a:	2b00      	cmp	r3, #0
   27f6c:	d002      	beq.n	27f74 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   27f6e:	697b      	ldr	r3, [r7, #20]
   27f70:	2220      	movs	r2, #32
   27f72:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
   27f74:	68fb      	ldr	r3, [r7, #12]
   27f76:	7a5b      	ldrb	r3, [r3, #9]
   27f78:	2b00      	cmp	r3, #0
   27f7a:	d002      	beq.n	27f82 <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   27f7c:	697b      	ldr	r3, [r7, #20]
   27f7e:	2208      	movs	r2, #8
   27f80:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
   27f82:	2300      	movs	r3, #0
}
   27f84:	0018      	movs	r0, r3
   27f86:	46bd      	mov	sp, r7
   27f88:	b006      	add	sp, #24
   27f8a:	bd80      	pop	{r7, pc}
   27f8c:	00027e55 	.word	0x00027e55
   27f90:	00027e69 	.word	0x00027e69

00027f94 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
   27f94:	b580      	push	{r7, lr}
   27f96:	b084      	sub	sp, #16
   27f98:	af00      	add	r7, sp, #0
   27f9a:	60f8      	str	r0, [r7, #12]
   27f9c:	60b9      	str	r1, [r7, #8]
   27f9e:	1dfb      	adds	r3, r7, #7
   27fa0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   27fa2:	1dfb      	adds	r3, r7, #7
   27fa4:	781b      	ldrb	r3, [r3, #0]
   27fa6:	68fa      	ldr	r2, [r7, #12]
   27fa8:	3302      	adds	r3, #2
   27faa:	009b      	lsls	r3, r3, #2
   27fac:	18d3      	adds	r3, r2, r3
   27fae:	3304      	adds	r3, #4
   27fb0:	68ba      	ldr	r2, [r7, #8]
   27fb2:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   27fb4:	68fb      	ldr	r3, [r7, #12]
   27fb6:	2230      	movs	r2, #48	; 0x30
   27fb8:	5c9b      	ldrb	r3, [r3, r2]
   27fba:	b25a      	sxtb	r2, r3
   27fbc:	1dfb      	adds	r3, r7, #7
   27fbe:	781b      	ldrb	r3, [r3, #0]
   27fc0:	2101      	movs	r1, #1
   27fc2:	4099      	lsls	r1, r3
   27fc4:	000b      	movs	r3, r1
   27fc6:	b25b      	sxtb	r3, r3
   27fc8:	4313      	orrs	r3, r2
   27fca:	b25b      	sxtb	r3, r3
   27fcc:	b2d9      	uxtb	r1, r3
   27fce:	68fb      	ldr	r3, [r7, #12]
   27fd0:	2230      	movs	r2, #48	; 0x30
   27fd2:	5499      	strb	r1, [r3, r2]
}
   27fd4:	46c0      	nop			; (mov r8, r8)
   27fd6:	46bd      	mov	sp, r7
   27fd8:	b004      	add	sp, #16
   27fda:	bd80      	pop	{r7, pc}

00027fdc <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   27fdc:	b580      	push	{r7, lr}
   27fde:	b084      	sub	sp, #16
   27fe0:	af00      	add	r7, sp, #0
   27fe2:	60f8      	str	r0, [r7, #12]
   27fe4:	60b9      	str	r1, [r7, #8]
   27fe6:	1dbb      	adds	r3, r7, #6
   27fe8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
   27fea:	1dbb      	adds	r3, r7, #6
   27fec:	881b      	ldrh	r3, [r3, #0]
   27fee:	2b00      	cmp	r3, #0
   27ff0:	d101      	bne.n	27ff6 <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   27ff2:	2317      	movs	r3, #23
   27ff4:	e010      	b.n	28018 <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   27ff6:	68fb      	ldr	r3, [r7, #12]
   27ff8:	79db      	ldrb	r3, [r3, #7]
   27ffa:	2201      	movs	r2, #1
   27ffc:	4053      	eors	r3, r2
   27ffe:	b2db      	uxtb	r3, r3
   28000:	2b00      	cmp	r3, #0
   28002:	d001      	beq.n	28008 <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   28004:	231c      	movs	r3, #28
   28006:	e007      	b.n	28018 <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
   28008:	1dbb      	adds	r3, r7, #6
   2800a:	881a      	ldrh	r2, [r3, #0]
   2800c:	68b9      	ldr	r1, [r7, #8]
   2800e:	68fb      	ldr	r3, [r7, #12]
   28010:	0018      	movs	r0, r3
   28012:	4b03      	ldr	r3, [pc, #12]	; (28020 <usart_write_buffer_job+0x44>)
   28014:	4798      	blx	r3
   28016:	0003      	movs	r3, r0
}
   28018:	0018      	movs	r0, r3
   2801a:	46bd      	mov	sp, r7
   2801c:	b004      	add	sp, #16
   2801e:	bd80      	pop	{r7, pc}
   28020:	00027ec1 	.word	0x00027ec1

00028024 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   28024:	b580      	push	{r7, lr}
   28026:	b084      	sub	sp, #16
   28028:	af00      	add	r7, sp, #0
   2802a:	60f8      	str	r0, [r7, #12]
   2802c:	60b9      	str	r1, [r7, #8]
   2802e:	1dbb      	adds	r3, r7, #6
   28030:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
   28032:	1dbb      	adds	r3, r7, #6
   28034:	881b      	ldrh	r3, [r3, #0]
   28036:	2b00      	cmp	r3, #0
   28038:	d101      	bne.n	2803e <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   2803a:	2317      	movs	r3, #23
   2803c:	e010      	b.n	28060 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   2803e:	68fb      	ldr	r3, [r7, #12]
   28040:	799b      	ldrb	r3, [r3, #6]
   28042:	2201      	movs	r2, #1
   28044:	4053      	eors	r3, r2
   28046:	b2db      	uxtb	r3, r3
   28048:	2b00      	cmp	r3, #0
   2804a:	d001      	beq.n	28050 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   2804c:	231c      	movs	r3, #28
   2804e:	e007      	b.n	28060 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
   28050:	1dbb      	adds	r3, r7, #6
   28052:	881a      	ldrh	r2, [r3, #0]
   28054:	68b9      	ldr	r1, [r7, #8]
   28056:	68fb      	ldr	r3, [r7, #12]
   28058:	0018      	movs	r0, r3
   2805a:	4b03      	ldr	r3, [pc, #12]	; (28068 <usart_read_buffer_job+0x44>)
   2805c:	4798      	blx	r3
   2805e:	0003      	movs	r3, r0
}
   28060:	0018      	movs	r0, r3
   28062:	46bd      	mov	sp, r7
   28064:	b004      	add	sp, #16
   28066:	bd80      	pop	{r7, pc}
   28068:	00027f1d 	.word	0x00027f1d

0002806c <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
   2806c:	b580      	push	{r7, lr}
   2806e:	b084      	sub	sp, #16
   28070:	af00      	add	r7, sp, #0
   28072:	6078      	str	r0, [r7, #4]
   28074:	000a      	movs	r2, r1
   28076:	1cfb      	adds	r3, r7, #3
   28078:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   2807a:	1cfb      	adds	r3, r7, #3
   2807c:	781b      	ldrb	r3, [r3, #0]
   2807e:	2b00      	cmp	r3, #0
   28080:	d002      	beq.n	28088 <usart_get_job_status+0x1c>
   28082:	2b01      	cmp	r3, #1
   28084:	d007      	beq.n	28096 <usart_get_job_status+0x2a>
   28086:	e00d      	b.n	280a4 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
   28088:	230f      	movs	r3, #15
   2808a:	18fb      	adds	r3, r7, r3
   2808c:	687a      	ldr	r2, [r7, #4]
   2808e:	2132      	movs	r1, #50	; 0x32
   28090:	5c52      	ldrb	r2, [r2, r1]
   28092:	701a      	strb	r2, [r3, #0]
			break;
   28094:	e00b      	b.n	280ae <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
   28096:	230f      	movs	r3, #15
   28098:	18fb      	adds	r3, r7, r3
   2809a:	687a      	ldr	r2, [r7, #4]
   2809c:	2133      	movs	r1, #51	; 0x33
   2809e:	5c52      	ldrb	r2, [r2, r1]
   280a0:	701a      	strb	r2, [r3, #0]
			break;
   280a2:	e004      	b.n	280ae <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   280a4:	230f      	movs	r3, #15
   280a6:	18fb      	adds	r3, r7, r3
   280a8:	2217      	movs	r2, #23
   280aa:	701a      	strb	r2, [r3, #0]
			break;
   280ac:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
   280ae:	230f      	movs	r3, #15
   280b0:	18fb      	adds	r3, r7, r3
   280b2:	781b      	ldrb	r3, [r3, #0]
}
   280b4:	0018      	movs	r0, r3
   280b6:	46bd      	mov	sp, r7
   280b8:	b004      	add	sp, #16
   280ba:	bd80      	pop	{r7, pc}

000280bc <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   280bc:	b580      	push	{r7, lr}
   280be:	b088      	sub	sp, #32
   280c0:	af00      	add	r7, sp, #0
   280c2:	0002      	movs	r2, r0
   280c4:	1dfb      	adds	r3, r7, #7
   280c6:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   280c8:	1dfb      	adds	r3, r7, #7
   280ca:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   280cc:	4ba3      	ldr	r3, [pc, #652]	; (2835c <_usart_interrupt_handler+0x2a0>)
   280ce:	0092      	lsls	r2, r2, #2
   280d0:	58d3      	ldr	r3, [r2, r3]
   280d2:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   280d4:	69bb      	ldr	r3, [r7, #24]
   280d6:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   280d8:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   280da:	69bb      	ldr	r3, [r7, #24]
   280dc:	0018      	movs	r0, r3
   280de:	4ba0      	ldr	r3, [pc, #640]	; (28360 <_usart_interrupt_handler+0x2a4>)
   280e0:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   280e2:	697b      	ldr	r3, [r7, #20]
   280e4:	7e1b      	ldrb	r3, [r3, #24]
   280e6:	b2da      	uxtb	r2, r3
   280e8:	2312      	movs	r3, #18
   280ea:	18fb      	adds	r3, r7, r3
   280ec:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   280ee:	697b      	ldr	r3, [r7, #20]
   280f0:	7d9b      	ldrb	r3, [r3, #22]
   280f2:	b2db      	uxtb	r3, r3
   280f4:	b29a      	uxth	r2, r3
   280f6:	2312      	movs	r3, #18
   280f8:	18fb      	adds	r3, r7, r3
   280fa:	2112      	movs	r1, #18
   280fc:	1879      	adds	r1, r7, r1
   280fe:	8809      	ldrh	r1, [r1, #0]
   28100:	400a      	ands	r2, r1
   28102:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   28104:	69bb      	ldr	r3, [r7, #24]
   28106:	2230      	movs	r2, #48	; 0x30
   28108:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   2810a:	69ba      	ldr	r2, [r7, #24]
   2810c:	2131      	movs	r1, #49	; 0x31
   2810e:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   28110:	4013      	ands	r3, r2
   28112:	b2da      	uxtb	r2, r3
   28114:	2310      	movs	r3, #16
   28116:	18fb      	adds	r3, r7, r3
   28118:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   2811a:	2312      	movs	r3, #18
   2811c:	18fb      	adds	r3, r7, r3
   2811e:	881b      	ldrh	r3, [r3, #0]
   28120:	2201      	movs	r2, #1
   28122:	4013      	ands	r3, r2
   28124:	d044      	beq.n	281b0 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   28126:	69bb      	ldr	r3, [r7, #24]
   28128:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   2812a:	b29b      	uxth	r3, r3
   2812c:	2b00      	cmp	r3, #0
   2812e:	d03c      	beq.n	281aa <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   28130:	69bb      	ldr	r3, [r7, #24]
   28132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28134:	781b      	ldrb	r3, [r3, #0]
   28136:	b2da      	uxtb	r2, r3
   28138:	231c      	movs	r3, #28
   2813a:	18fb      	adds	r3, r7, r3
   2813c:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   2813e:	69bb      	ldr	r3, [r7, #24]
   28140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28142:	1c5a      	adds	r2, r3, #1
   28144:	69bb      	ldr	r3, [r7, #24]
   28146:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   28148:	69bb      	ldr	r3, [r7, #24]
   2814a:	795b      	ldrb	r3, [r3, #5]
   2814c:	2b01      	cmp	r3, #1
   2814e:	d113      	bne.n	28178 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   28150:	69bb      	ldr	r3, [r7, #24]
   28152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28154:	781b      	ldrb	r3, [r3, #0]
   28156:	b2db      	uxtb	r3, r3
   28158:	021b      	lsls	r3, r3, #8
   2815a:	b21a      	sxth	r2, r3
   2815c:	231c      	movs	r3, #28
   2815e:	18fb      	adds	r3, r7, r3
   28160:	2100      	movs	r1, #0
   28162:	5e5b      	ldrsh	r3, [r3, r1]
   28164:	4313      	orrs	r3, r2
   28166:	b21a      	sxth	r2, r3
   28168:	231c      	movs	r3, #28
   2816a:	18fb      	adds	r3, r7, r3
   2816c:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   2816e:	69bb      	ldr	r3, [r7, #24]
   28170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28172:	1c5a      	adds	r2, r3, #1
   28174:	69bb      	ldr	r3, [r7, #24]
   28176:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   28178:	231c      	movs	r3, #28
   2817a:	18fb      	adds	r3, r7, r3
   2817c:	881b      	ldrh	r3, [r3, #0]
   2817e:	05db      	lsls	r3, r3, #23
   28180:	0ddb      	lsrs	r3, r3, #23
   28182:	b29a      	uxth	r2, r3
   28184:	697b      	ldr	r3, [r7, #20]
   28186:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   28188:	69bb      	ldr	r3, [r7, #24]
   2818a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   2818c:	b29b      	uxth	r3, r3
   2818e:	3b01      	subs	r3, #1
   28190:	b29b      	uxth	r3, r3
   28192:	69ba      	ldr	r2, [r7, #24]
   28194:	1c19      	adds	r1, r3, #0
   28196:	85d1      	strh	r1, [r2, #46]	; 0x2e
   28198:	2b00      	cmp	r3, #0
   2819a:	d109      	bne.n	281b0 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   2819c:	697b      	ldr	r3, [r7, #20]
   2819e:	2201      	movs	r2, #1
   281a0:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   281a2:	697b      	ldr	r3, [r7, #20]
   281a4:	2202      	movs	r2, #2
   281a6:	759a      	strb	r2, [r3, #22]
   281a8:	e002      	b.n	281b0 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   281aa:	697b      	ldr	r3, [r7, #20]
   281ac:	2201      	movs	r2, #1
   281ae:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   281b0:	2312      	movs	r3, #18
   281b2:	18fb      	adds	r3, r7, r3
   281b4:	881b      	ldrh	r3, [r3, #0]
   281b6:	2202      	movs	r2, #2
   281b8:	4013      	ands	r3, r2
   281ba:	d011      	beq.n	281e0 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   281bc:	697b      	ldr	r3, [r7, #20]
   281be:	2202      	movs	r2, #2
   281c0:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   281c2:	69bb      	ldr	r3, [r7, #24]
   281c4:	2233      	movs	r2, #51	; 0x33
   281c6:	2100      	movs	r1, #0
   281c8:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   281ca:	2310      	movs	r3, #16
   281cc:	18fb      	adds	r3, r7, r3
   281ce:	881b      	ldrh	r3, [r3, #0]
   281d0:	2201      	movs	r2, #1
   281d2:	4013      	ands	r3, r2
   281d4:	d004      	beq.n	281e0 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   281d6:	69bb      	ldr	r3, [r7, #24]
   281d8:	68db      	ldr	r3, [r3, #12]
   281da:	69ba      	ldr	r2, [r7, #24]
   281dc:	0010      	movs	r0, r2
   281de:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   281e0:	2312      	movs	r3, #18
   281e2:	18fb      	adds	r3, r7, r3
   281e4:	881b      	ldrh	r3, [r3, #0]
   281e6:	2204      	movs	r2, #4
   281e8:	4013      	ands	r3, r2
   281ea:	d100      	bne.n	281ee <_usart_interrupt_handler+0x132>
   281ec:	e0bd      	b.n	2836a <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   281ee:	69bb      	ldr	r3, [r7, #24]
   281f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   281f2:	b29b      	uxth	r3, r3
   281f4:	2b00      	cmp	r3, #0
   281f6:	d100      	bne.n	281fa <_usart_interrupt_handler+0x13e>
   281f8:	e0b4      	b.n	28364 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   281fa:	697b      	ldr	r3, [r7, #20]
   281fc:	8b5b      	ldrh	r3, [r3, #26]
   281fe:	b29b      	uxth	r3, r3
   28200:	b2da      	uxtb	r2, r3
   28202:	231f      	movs	r3, #31
   28204:	18fb      	adds	r3, r7, r3
   28206:	213f      	movs	r1, #63	; 0x3f
   28208:	400a      	ands	r2, r1
   2820a:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   2820c:	231f      	movs	r3, #31
   2820e:	18fb      	adds	r3, r7, r3
   28210:	781b      	ldrb	r3, [r3, #0]
   28212:	2208      	movs	r2, #8
   28214:	4013      	ands	r3, r2
   28216:	d007      	beq.n	28228 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   28218:	231f      	movs	r3, #31
   2821a:	18fb      	adds	r3, r7, r3
   2821c:	221f      	movs	r2, #31
   2821e:	18ba      	adds	r2, r7, r2
   28220:	7812      	ldrb	r2, [r2, #0]
   28222:	2108      	movs	r1, #8
   28224:	438a      	bics	r2, r1
   28226:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   28228:	231f      	movs	r3, #31
   2822a:	18fb      	adds	r3, r7, r3
   2822c:	781b      	ldrb	r3, [r3, #0]
   2822e:	2b00      	cmp	r3, #0
   28230:	d050      	beq.n	282d4 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   28232:	231f      	movs	r3, #31
   28234:	18fb      	adds	r3, r7, r3
   28236:	781b      	ldrb	r3, [r3, #0]
   28238:	2202      	movs	r2, #2
   2823a:	4013      	ands	r3, r2
   2823c:	d007      	beq.n	2824e <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   2823e:	69bb      	ldr	r3, [r7, #24]
   28240:	2232      	movs	r2, #50	; 0x32
   28242:	211a      	movs	r1, #26
   28244:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   28246:	697b      	ldr	r3, [r7, #20]
   28248:	2202      	movs	r2, #2
   2824a:	835a      	strh	r2, [r3, #26]
   2824c:	e036      	b.n	282bc <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   2824e:	231f      	movs	r3, #31
   28250:	18fb      	adds	r3, r7, r3
   28252:	781b      	ldrb	r3, [r3, #0]
   28254:	2204      	movs	r2, #4
   28256:	4013      	ands	r3, r2
   28258:	d007      	beq.n	2826a <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   2825a:	69bb      	ldr	r3, [r7, #24]
   2825c:	2232      	movs	r2, #50	; 0x32
   2825e:	211e      	movs	r1, #30
   28260:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   28262:	697b      	ldr	r3, [r7, #20]
   28264:	2204      	movs	r2, #4
   28266:	835a      	strh	r2, [r3, #26]
   28268:	e028      	b.n	282bc <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   2826a:	231f      	movs	r3, #31
   2826c:	18fb      	adds	r3, r7, r3
   2826e:	781b      	ldrb	r3, [r3, #0]
   28270:	2201      	movs	r2, #1
   28272:	4013      	ands	r3, r2
   28274:	d007      	beq.n	28286 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   28276:	69bb      	ldr	r3, [r7, #24]
   28278:	2232      	movs	r2, #50	; 0x32
   2827a:	2113      	movs	r1, #19
   2827c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   2827e:	697b      	ldr	r3, [r7, #20]
   28280:	2201      	movs	r2, #1
   28282:	835a      	strh	r2, [r3, #26]
   28284:	e01a      	b.n	282bc <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   28286:	231f      	movs	r3, #31
   28288:	18fb      	adds	r3, r7, r3
   2828a:	781b      	ldrb	r3, [r3, #0]
   2828c:	2210      	movs	r2, #16
   2828e:	4013      	ands	r3, r2
   28290:	d007      	beq.n	282a2 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   28292:	69bb      	ldr	r3, [r7, #24]
   28294:	2232      	movs	r2, #50	; 0x32
   28296:	2142      	movs	r1, #66	; 0x42
   28298:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   2829a:	697b      	ldr	r3, [r7, #20]
   2829c:	2210      	movs	r2, #16
   2829e:	835a      	strh	r2, [r3, #26]
   282a0:	e00c      	b.n	282bc <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   282a2:	231f      	movs	r3, #31
   282a4:	18fb      	adds	r3, r7, r3
   282a6:	781b      	ldrb	r3, [r3, #0]
   282a8:	2220      	movs	r2, #32
   282aa:	4013      	ands	r3, r2
   282ac:	d006      	beq.n	282bc <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   282ae:	69bb      	ldr	r3, [r7, #24]
   282b0:	2232      	movs	r2, #50	; 0x32
   282b2:	2141      	movs	r1, #65	; 0x41
   282b4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   282b6:	697b      	ldr	r3, [r7, #20]
   282b8:	2220      	movs	r2, #32
   282ba:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   282bc:	2310      	movs	r3, #16
   282be:	18fb      	adds	r3, r7, r3
   282c0:	881b      	ldrh	r3, [r3, #0]
   282c2:	2204      	movs	r2, #4
   282c4:	4013      	ands	r3, r2
				if (callback_status
   282c6:	d050      	beq.n	2836a <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   282c8:	69bb      	ldr	r3, [r7, #24]
   282ca:	695b      	ldr	r3, [r3, #20]
   282cc:	69ba      	ldr	r2, [r7, #24]
   282ce:	0010      	movs	r0, r2
   282d0:	4798      	blx	r3
   282d2:	e04a      	b.n	2836a <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   282d4:	697b      	ldr	r3, [r7, #20]
   282d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   282d8:	b29a      	uxth	r2, r3
   282da:	230e      	movs	r3, #14
   282dc:	18fb      	adds	r3, r7, r3
   282de:	05d2      	lsls	r2, r2, #23
   282e0:	0dd2      	lsrs	r2, r2, #23
   282e2:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   282e4:	69bb      	ldr	r3, [r7, #24]
   282e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   282e8:	220e      	movs	r2, #14
   282ea:	18ba      	adds	r2, r7, r2
   282ec:	8812      	ldrh	r2, [r2, #0]
   282ee:	b2d2      	uxtb	r2, r2
   282f0:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   282f2:	69bb      	ldr	r3, [r7, #24]
   282f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   282f6:	1c5a      	adds	r2, r3, #1
   282f8:	69bb      	ldr	r3, [r7, #24]
   282fa:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   282fc:	69bb      	ldr	r3, [r7, #24]
   282fe:	795b      	ldrb	r3, [r3, #5]
   28300:	2b01      	cmp	r3, #1
   28302:	d10d      	bne.n	28320 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   28304:	69bb      	ldr	r3, [r7, #24]
   28306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   28308:	220e      	movs	r2, #14
   2830a:	18ba      	adds	r2, r7, r2
   2830c:	8812      	ldrh	r2, [r2, #0]
   2830e:	0a12      	lsrs	r2, r2, #8
   28310:	b292      	uxth	r2, r2
   28312:	b2d2      	uxtb	r2, r2
   28314:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   28316:	69bb      	ldr	r3, [r7, #24]
   28318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2831a:	1c5a      	adds	r2, r3, #1
   2831c:	69bb      	ldr	r3, [r7, #24]
   2831e:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   28320:	69bb      	ldr	r3, [r7, #24]
   28322:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   28324:	b29b      	uxth	r3, r3
   28326:	3b01      	subs	r3, #1
   28328:	b29b      	uxth	r3, r3
   2832a:	69ba      	ldr	r2, [r7, #24]
   2832c:	1c19      	adds	r1, r3, #0
   2832e:	8591      	strh	r1, [r2, #44]	; 0x2c
   28330:	2b00      	cmp	r3, #0
   28332:	d11a      	bne.n	2836a <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   28334:	697b      	ldr	r3, [r7, #20]
   28336:	2204      	movs	r2, #4
   28338:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   2833a:	69bb      	ldr	r3, [r7, #24]
   2833c:	2232      	movs	r2, #50	; 0x32
   2833e:	2100      	movs	r1, #0
   28340:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   28342:	2310      	movs	r3, #16
   28344:	18fb      	adds	r3, r7, r3
   28346:	881b      	ldrh	r3, [r3, #0]
   28348:	2202      	movs	r2, #2
   2834a:	4013      	ands	r3, r2
					if (callback_status
   2834c:	d00d      	beq.n	2836a <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   2834e:	69bb      	ldr	r3, [r7, #24]
   28350:	691b      	ldr	r3, [r3, #16]
   28352:	69ba      	ldr	r2, [r7, #24]
   28354:	0010      	movs	r0, r2
   28356:	4798      	blx	r3
   28358:	e007      	b.n	2836a <_usart_interrupt_handler+0x2ae>
   2835a:	46c0      	nop			; (mov r8, r8)
   2835c:	20005bcc 	.word	0x20005bcc
   28360:	00027e9d 	.word	0x00027e9d
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   28364:	697b      	ldr	r3, [r7, #20]
   28366:	2204      	movs	r2, #4
   28368:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   2836a:	2312      	movs	r3, #18
   2836c:	18fb      	adds	r3, r7, r3
   2836e:	881b      	ldrh	r3, [r3, #0]
   28370:	2210      	movs	r2, #16
   28372:	4013      	ands	r3, r2
   28374:	d010      	beq.n	28398 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   28376:	697b      	ldr	r3, [r7, #20]
   28378:	2210      	movs	r2, #16
   2837a:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   2837c:	697b      	ldr	r3, [r7, #20]
   2837e:	2210      	movs	r2, #16
   28380:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   28382:	2310      	movs	r3, #16
   28384:	18fb      	adds	r3, r7, r3
   28386:	881b      	ldrh	r3, [r3, #0]
   28388:	2210      	movs	r2, #16
   2838a:	4013      	ands	r3, r2
   2838c:	d004      	beq.n	28398 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   2838e:	69bb      	ldr	r3, [r7, #24]
   28390:	69db      	ldr	r3, [r3, #28]
   28392:	69ba      	ldr	r2, [r7, #24]
   28394:	0010      	movs	r0, r2
   28396:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   28398:	2312      	movs	r3, #18
   2839a:	18fb      	adds	r3, r7, r3
   2839c:	881b      	ldrh	r3, [r3, #0]
   2839e:	2220      	movs	r2, #32
   283a0:	4013      	ands	r3, r2
   283a2:	d010      	beq.n	283c6 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   283a4:	697b      	ldr	r3, [r7, #20]
   283a6:	2220      	movs	r2, #32
   283a8:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   283aa:	697b      	ldr	r3, [r7, #20]
   283ac:	2220      	movs	r2, #32
   283ae:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   283b0:	2310      	movs	r3, #16
   283b2:	18fb      	adds	r3, r7, r3
   283b4:	881b      	ldrh	r3, [r3, #0]
   283b6:	2208      	movs	r2, #8
   283b8:	4013      	ands	r3, r2
   283ba:	d004      	beq.n	283c6 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   283bc:	69bb      	ldr	r3, [r7, #24]
   283be:	699b      	ldr	r3, [r3, #24]
   283c0:	69ba      	ldr	r2, [r7, #24]
   283c2:	0010      	movs	r0, r2
   283c4:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   283c6:	2312      	movs	r3, #18
   283c8:	18fb      	adds	r3, r7, r3
   283ca:	881b      	ldrh	r3, [r3, #0]
   283cc:	2208      	movs	r2, #8
   283ce:	4013      	ands	r3, r2
   283d0:	d010      	beq.n	283f4 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   283d2:	697b      	ldr	r3, [r7, #20]
   283d4:	2208      	movs	r2, #8
   283d6:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   283d8:	697b      	ldr	r3, [r7, #20]
   283da:	2208      	movs	r2, #8
   283dc:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   283de:	2310      	movs	r3, #16
   283e0:	18fb      	adds	r3, r7, r3
   283e2:	881b      	ldrh	r3, [r3, #0]
   283e4:	2220      	movs	r2, #32
   283e6:	4013      	ands	r3, r2
   283e8:	d004      	beq.n	283f4 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   283ea:	69bb      	ldr	r3, [r7, #24]
   283ec:	6a1b      	ldr	r3, [r3, #32]
   283ee:	69ba      	ldr	r2, [r7, #24]
   283f0:	0010      	movs	r0, r2
   283f2:	4798      	blx	r3
		}
	}
#endif
}
   283f4:	46c0      	nop			; (mov r8, r8)
   283f6:	46bd      	mov	sp, r7
   283f8:	b008      	add	sp, #32
   283fa:	bd80      	pop	{r7, pc}

000283fc <system_gclk_gen_get_config_defaults>:
{
   283fc:	b580      	push	{r7, lr}
   283fe:	b082      	sub	sp, #8
   28400:	af00      	add	r7, sp, #0
   28402:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   28404:	687b      	ldr	r3, [r7, #4]
   28406:	2201      	movs	r2, #1
   28408:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   2840a:	687b      	ldr	r3, [r7, #4]
   2840c:	2200      	movs	r2, #0
   2840e:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   28410:	687b      	ldr	r3, [r7, #4]
   28412:	2206      	movs	r2, #6
   28414:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   28416:	687b      	ldr	r3, [r7, #4]
   28418:	2200      	movs	r2, #0
   2841a:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   2841c:	687b      	ldr	r3, [r7, #4]
   2841e:	2200      	movs	r2, #0
   28420:	725a      	strb	r2, [r3, #9]
}
   28422:	46c0      	nop			; (mov r8, r8)
   28424:	46bd      	mov	sp, r7
   28426:	b002      	add	sp, #8
   28428:	bd80      	pop	{r7, pc}

0002842a <system_gclk_chan_get_config_defaults>:
{
   2842a:	b580      	push	{r7, lr}
   2842c:	b082      	sub	sp, #8
   2842e:	af00      	add	r7, sp, #0
   28430:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   28432:	687b      	ldr	r3, [r7, #4]
   28434:	2200      	movs	r2, #0
   28436:	701a      	strb	r2, [r3, #0]
}
   28438:	46c0      	nop			; (mov r8, r8)
   2843a:	46bd      	mov	sp, r7
   2843c:	b002      	add	sp, #8
   2843e:	bd80      	pop	{r7, pc}

00028440 <system_clock_source_osc8m_get_config_defaults>:
{
   28440:	b580      	push	{r7, lr}
   28442:	b082      	sub	sp, #8
   28444:	af00      	add	r7, sp, #0
   28446:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   28448:	687b      	ldr	r3, [r7, #4]
   2844a:	2203      	movs	r2, #3
   2844c:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   2844e:	687b      	ldr	r3, [r7, #4]
   28450:	2200      	movs	r2, #0
   28452:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   28454:	687b      	ldr	r3, [r7, #4]
   28456:	2201      	movs	r2, #1
   28458:	709a      	strb	r2, [r3, #2]
}
   2845a:	46c0      	nop			; (mov r8, r8)
   2845c:	46bd      	mov	sp, r7
   2845e:	b002      	add	sp, #8
   28460:	bd80      	pop	{r7, pc}
	...

00028464 <system_cpu_clock_set_divider>:
{
   28464:	b580      	push	{r7, lr}
   28466:	b082      	sub	sp, #8
   28468:	af00      	add	r7, sp, #0
   2846a:	0002      	movs	r2, r0
   2846c:	1dfb      	adds	r3, r7, #7
   2846e:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   28470:	4a03      	ldr	r2, [pc, #12]	; (28480 <system_cpu_clock_set_divider+0x1c>)
   28472:	1dfb      	adds	r3, r7, #7
   28474:	781b      	ldrb	r3, [r3, #0]
   28476:	7213      	strb	r3, [r2, #8]
}
   28478:	46c0      	nop			; (mov r8, r8)
   2847a:	46bd      	mov	sp, r7
   2847c:	b002      	add	sp, #8
   2847e:	bd80      	pop	{r7, pc}
   28480:	40000400 	.word	0x40000400

00028484 <system_apb_clock_set_divider>:
{
   28484:	b580      	push	{r7, lr}
   28486:	b082      	sub	sp, #8
   28488:	af00      	add	r7, sp, #0
   2848a:	0002      	movs	r2, r0
   2848c:	1dfb      	adds	r3, r7, #7
   2848e:	701a      	strb	r2, [r3, #0]
   28490:	1dbb      	adds	r3, r7, #6
   28492:	1c0a      	adds	r2, r1, #0
   28494:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   28496:	1dfb      	adds	r3, r7, #7
   28498:	781b      	ldrb	r3, [r3, #0]
   2849a:	2b01      	cmp	r3, #1
   2849c:	d008      	beq.n	284b0 <system_apb_clock_set_divider+0x2c>
   2849e:	2b02      	cmp	r3, #2
   284a0:	d00b      	beq.n	284ba <system_apb_clock_set_divider+0x36>
   284a2:	2b00      	cmp	r3, #0
   284a4:	d10e      	bne.n	284c4 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   284a6:	4a0b      	ldr	r2, [pc, #44]	; (284d4 <system_apb_clock_set_divider+0x50>)
   284a8:	1dbb      	adds	r3, r7, #6
   284aa:	781b      	ldrb	r3, [r3, #0]
   284ac:	7253      	strb	r3, [r2, #9]
			break;
   284ae:	e00b      	b.n	284c8 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   284b0:	4a08      	ldr	r2, [pc, #32]	; (284d4 <system_apb_clock_set_divider+0x50>)
   284b2:	1dbb      	adds	r3, r7, #6
   284b4:	781b      	ldrb	r3, [r3, #0]
   284b6:	7293      	strb	r3, [r2, #10]
			break;
   284b8:	e006      	b.n	284c8 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   284ba:	4a06      	ldr	r2, [pc, #24]	; (284d4 <system_apb_clock_set_divider+0x50>)
   284bc:	1dbb      	adds	r3, r7, #6
   284be:	781b      	ldrb	r3, [r3, #0]
   284c0:	72d3      	strb	r3, [r2, #11]
			break;
   284c2:	e001      	b.n	284c8 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   284c4:	2317      	movs	r3, #23
   284c6:	e000      	b.n	284ca <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   284c8:	2300      	movs	r3, #0
}
   284ca:	0018      	movs	r0, r3
   284cc:	46bd      	mov	sp, r7
   284ce:	b002      	add	sp, #8
   284d0:	bd80      	pop	{r7, pc}
   284d2:	46c0      	nop			; (mov r8, r8)
   284d4:	40000400 	.word	0x40000400

000284d8 <system_clock_source_dpll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
   284d8:	b580      	push	{r7, lr}
   284da:	b082      	sub	sp, #8
   284dc:	af00      	add	r7, sp, #0
   284de:	6078      	str	r0, [r7, #4]
	config->on_demand           = true;
   284e0:	687b      	ldr	r3, [r7, #4]
   284e2:	2201      	movs	r2, #1
   284e4:	701a      	strb	r2, [r3, #0]
	config->run_in_standby      = false;
   284e6:	687b      	ldr	r3, [r7, #4]
   284e8:	2200      	movs	r2, #0
   284ea:	705a      	strb	r2, [r3, #1]
	config->lock_bypass         = false;
   284ec:	687b      	ldr	r3, [r7, #4]
   284ee:	2200      	movs	r2, #0
   284f0:	709a      	strb	r2, [r3, #2]
	config->wake_up_fast        = false;
   284f2:	687b      	ldr	r3, [r7, #4]
   284f4:	2200      	movs	r2, #0
   284f6:	70da      	strb	r2, [r3, #3]
	config->low_power_enable    = false;
   284f8:	687b      	ldr	r3, [r7, #4]
   284fa:	2200      	movs	r2, #0
   284fc:	711a      	strb	r2, [r3, #4]

	config->output_frequency    = 48000000;
   284fe:	687b      	ldr	r3, [r7, #4]
   28500:	4a0a      	ldr	r2, [pc, #40]	; (2852c <system_clock_source_dpll_get_config_defaults+0x54>)
   28502:	609a      	str	r2, [r3, #8]
	config->reference_frequency = 32768;
   28504:	687b      	ldr	r3, [r7, #4]
   28506:	2280      	movs	r2, #128	; 0x80
   28508:	0212      	lsls	r2, r2, #8
   2850a:	60da      	str	r2, [r3, #12]
	config->reference_divider   = 1;
   2850c:	687b      	ldr	r3, [r7, #4]
   2850e:	2201      	movs	r2, #1
   28510:	821a      	strh	r2, [r3, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
   28512:	687b      	ldr	r3, [r7, #4]
   28514:	2200      	movs	r2, #0
   28516:	751a      	strb	r2, [r3, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
   28518:	687b      	ldr	r3, [r7, #4]
   2851a:	2200      	movs	r2, #0
   2851c:	74da      	strb	r2, [r3, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
   2851e:	687b      	ldr	r3, [r7, #4]
   28520:	2200      	movs	r2, #0
   28522:	749a      	strb	r2, [r3, #18]
};
   28524:	46c0      	nop			; (mov r8, r8)
   28526:	46bd      	mov	sp, r7
   28528:	b002      	add	sp, #8
   2852a:	bd80      	pop	{r7, pc}
   2852c:	02dc6c00 	.word	0x02dc6c00

00028530 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   28530:	b580      	push	{r7, lr}
   28532:	b082      	sub	sp, #8
   28534:	af00      	add	r7, sp, #0
   28536:	0002      	movs	r2, r0
   28538:	1dfb      	adds	r3, r7, #7
   2853a:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   2853c:	4a08      	ldr	r2, [pc, #32]	; (28560 <system_flash_set_waitstates+0x30>)
   2853e:	1dfb      	adds	r3, r7, #7
   28540:	781b      	ldrb	r3, [r3, #0]
   28542:	210f      	movs	r1, #15
   28544:	400b      	ands	r3, r1
   28546:	b2d9      	uxtb	r1, r3
   28548:	6853      	ldr	r3, [r2, #4]
   2854a:	200f      	movs	r0, #15
   2854c:	4001      	ands	r1, r0
   2854e:	0049      	lsls	r1, r1, #1
   28550:	201e      	movs	r0, #30
   28552:	4383      	bics	r3, r0
   28554:	430b      	orrs	r3, r1
   28556:	6053      	str	r3, [r2, #4]
}
   28558:	46c0      	nop			; (mov r8, r8)
   2855a:	46bd      	mov	sp, r7
   2855c:	b002      	add	sp, #8
   2855e:	bd80      	pop	{r7, pc}
   28560:	41004000 	.word	0x41004000

00028564 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   28564:	b580      	push	{r7, lr}
   28566:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   28568:	46c0      	nop			; (mov r8, r8)
   2856a:	4b04      	ldr	r3, [pc, #16]	; (2857c <_system_dfll_wait_for_sync+0x18>)
   2856c:	68db      	ldr	r3, [r3, #12]
   2856e:	2210      	movs	r2, #16
   28570:	4013      	ands	r3, r2
   28572:	d0fa      	beq.n	2856a <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   28574:	46c0      	nop			; (mov r8, r8)
   28576:	46bd      	mov	sp, r7
   28578:	bd80      	pop	{r7, pc}
   2857a:	46c0      	nop			; (mov r8, r8)
   2857c:	40000800 	.word	0x40000800

00028580 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   28580:	b580      	push	{r7, lr}
   28582:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   28584:	4b0c      	ldr	r3, [pc, #48]	; (285b8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   28586:	2202      	movs	r2, #2
   28588:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   2858a:	4b0c      	ldr	r3, [pc, #48]	; (285bc <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   2858c:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   2858e:	4a0a      	ldr	r2, [pc, #40]	; (285b8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   28590:	4b0b      	ldr	r3, [pc, #44]	; (285c0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   28592:	689b      	ldr	r3, [r3, #8]
   28594:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   28596:	4a08      	ldr	r2, [pc, #32]	; (285b8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   28598:	4b09      	ldr	r3, [pc, #36]	; (285c0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   2859a:	685b      	ldr	r3, [r3, #4]
   2859c:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   2859e:	4b06      	ldr	r3, [pc, #24]	; (285b8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   285a0:	2200      	movs	r2, #0
   285a2:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   285a4:	4b05      	ldr	r3, [pc, #20]	; (285bc <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   285a6:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   285a8:	4a03      	ldr	r2, [pc, #12]	; (285b8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   285aa:	4b05      	ldr	r3, [pc, #20]	; (285c0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   285ac:	681b      	ldr	r3, [r3, #0]
   285ae:	b29b      	uxth	r3, r3
   285b0:	8493      	strh	r3, [r2, #36]	; 0x24
}
   285b2:	46c0      	nop			; (mov r8, r8)
   285b4:	46bd      	mov	sp, r7
   285b6:	bd80      	pop	{r7, pc}
   285b8:	40000800 	.word	0x40000800
   285bc:	00028565 	.word	0x00028565
   285c0:	200042a8 	.word	0x200042a8

000285c4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   285c4:	b580      	push	{r7, lr}
   285c6:	b082      	sub	sp, #8
   285c8:	af00      	add	r7, sp, #0
   285ca:	0002      	movs	r2, r0
   285cc:	1dfb      	adds	r3, r7, #7
   285ce:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   285d0:	1dfb      	adds	r3, r7, #7
   285d2:	781b      	ldrb	r3, [r3, #0]
   285d4:	2b08      	cmp	r3, #8
   285d6:	d841      	bhi.n	2865c <system_clock_source_get_hz+0x98>
   285d8:	009a      	lsls	r2, r3, #2
   285da:	4b23      	ldr	r3, [pc, #140]	; (28668 <system_clock_source_get_hz+0xa4>)
   285dc:	18d3      	adds	r3, r2, r3
   285de:	681b      	ldr	r3, [r3, #0]
   285e0:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   285e2:	4b22      	ldr	r3, [pc, #136]	; (2866c <system_clock_source_get_hz+0xa8>)
   285e4:	691b      	ldr	r3, [r3, #16]
   285e6:	e03a      	b.n	2865e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   285e8:	4b21      	ldr	r3, [pc, #132]	; (28670 <system_clock_source_get_hz+0xac>)
   285ea:	6a1b      	ldr	r3, [r3, #32]
   285ec:	059b      	lsls	r3, r3, #22
   285ee:	0f9b      	lsrs	r3, r3, #30
   285f0:	b2db      	uxtb	r3, r3
   285f2:	001a      	movs	r2, r3
   285f4:	4b1f      	ldr	r3, [pc, #124]	; (28674 <system_clock_source_get_hz+0xb0>)
   285f6:	40d3      	lsrs	r3, r2
   285f8:	e031      	b.n	2865e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   285fa:	2380      	movs	r3, #128	; 0x80
   285fc:	021b      	lsls	r3, r3, #8
   285fe:	e02e      	b.n	2865e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   28600:	2380      	movs	r3, #128	; 0x80
   28602:	021b      	lsls	r3, r3, #8
   28604:	e02b      	b.n	2865e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   28606:	4b19      	ldr	r3, [pc, #100]	; (2866c <system_clock_source_get_hz+0xa8>)
   28608:	695b      	ldr	r3, [r3, #20]
   2860a:	e028      	b.n	2865e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   2860c:	4b17      	ldr	r3, [pc, #92]	; (2866c <system_clock_source_get_hz+0xa8>)
   2860e:	681b      	ldr	r3, [r3, #0]
   28610:	2202      	movs	r2, #2
   28612:	4013      	ands	r3, r2
   28614:	d101      	bne.n	2861a <system_clock_source_get_hz+0x56>
			return 0;
   28616:	2300      	movs	r3, #0
   28618:	e021      	b.n	2865e <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   2861a:	4b17      	ldr	r3, [pc, #92]	; (28678 <system_clock_source_get_hz+0xb4>)
   2861c:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   2861e:	4b13      	ldr	r3, [pc, #76]	; (2866c <system_clock_source_get_hz+0xa8>)
   28620:	681b      	ldr	r3, [r3, #0]
   28622:	2224      	movs	r2, #36	; 0x24
   28624:	4013      	ands	r3, r2
   28626:	2b04      	cmp	r3, #4
   28628:	d109      	bne.n	2863e <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   2862a:	2000      	movs	r0, #0
   2862c:	4b13      	ldr	r3, [pc, #76]	; (2867c <system_clock_source_get_hz+0xb8>)
   2862e:	4798      	blx	r3
   28630:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   28632:	4b0e      	ldr	r3, [pc, #56]	; (2866c <system_clock_source_get_hz+0xa8>)
   28634:	689b      	ldr	r3, [r3, #8]
   28636:	041b      	lsls	r3, r3, #16
   28638:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   2863a:	4353      	muls	r3, r2
   2863c:	e00f      	b.n	2865e <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   2863e:	4b10      	ldr	r3, [pc, #64]	; (28680 <system_clock_source_get_hz+0xbc>)
   28640:	e00d      	b.n	2865e <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   28642:	4a0b      	ldr	r2, [pc, #44]	; (28670 <system_clock_source_get_hz+0xac>)
   28644:	2350      	movs	r3, #80	; 0x50
   28646:	5cd3      	ldrb	r3, [r2, r3]
   28648:	b2db      	uxtb	r3, r3
   2864a:	001a      	movs	r2, r3
   2864c:	2304      	movs	r3, #4
   2864e:	4013      	ands	r3, r2
   28650:	d101      	bne.n	28656 <system_clock_source_get_hz+0x92>
			return 0;
   28652:	2300      	movs	r3, #0
   28654:	e003      	b.n	2865e <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   28656:	4b05      	ldr	r3, [pc, #20]	; (2866c <system_clock_source_get_hz+0xa8>)
   28658:	68db      	ldr	r3, [r3, #12]
   2865a:	e000      	b.n	2865e <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   2865c:	2300      	movs	r3, #0
	}
}
   2865e:	0018      	movs	r0, r3
   28660:	46bd      	mov	sp, r7
   28662:	b002      	add	sp, #8
   28664:	bd80      	pop	{r7, pc}
   28666:	46c0      	nop			; (mov r8, r8)
   28668:	00038f8c 	.word	0x00038f8c
   2866c:	200042a8 	.word	0x200042a8
   28670:	40000800 	.word	0x40000800
   28674:	007a1200 	.word	0x007a1200
   28678:	00028565 	.word	0x00028565
   2867c:	00029061 	.word	0x00029061
   28680:	02dc6c00 	.word	0x02dc6c00

00028684 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   28684:	b580      	push	{r7, lr}
   28686:	b084      	sub	sp, #16
   28688:	af00      	add	r7, sp, #0
   2868a:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   2868c:	4b1a      	ldr	r3, [pc, #104]	; (286f8 <system_clock_source_osc8m_set_config+0x74>)
   2868e:	6a1b      	ldr	r3, [r3, #32]
   28690:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   28692:	687b      	ldr	r3, [r7, #4]
   28694:	781b      	ldrb	r3, [r3, #0]
   28696:	1c1a      	adds	r2, r3, #0
   28698:	2303      	movs	r3, #3
   2869a:	4013      	ands	r3, r2
   2869c:	b2da      	uxtb	r2, r3
   2869e:	230d      	movs	r3, #13
   286a0:	18fb      	adds	r3, r7, r3
   286a2:	2103      	movs	r1, #3
   286a4:	400a      	ands	r2, r1
   286a6:	0010      	movs	r0, r2
   286a8:	781a      	ldrb	r2, [r3, #0]
   286aa:	2103      	movs	r1, #3
   286ac:	438a      	bics	r2, r1
   286ae:	1c11      	adds	r1, r2, #0
   286b0:	1c02      	adds	r2, r0, #0
   286b2:	430a      	orrs	r2, r1
   286b4:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   286b6:	687b      	ldr	r3, [r7, #4]
   286b8:	789a      	ldrb	r2, [r3, #2]
   286ba:	230c      	movs	r3, #12
   286bc:	18fb      	adds	r3, r7, r3
   286be:	01d0      	lsls	r0, r2, #7
   286c0:	781a      	ldrb	r2, [r3, #0]
   286c2:	217f      	movs	r1, #127	; 0x7f
   286c4:	400a      	ands	r2, r1
   286c6:	1c11      	adds	r1, r2, #0
   286c8:	1c02      	adds	r2, r0, #0
   286ca:	430a      	orrs	r2, r1
   286cc:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   286ce:	687b      	ldr	r3, [r7, #4]
   286d0:	785a      	ldrb	r2, [r3, #1]
   286d2:	230c      	movs	r3, #12
   286d4:	18fb      	adds	r3, r7, r3
   286d6:	2101      	movs	r1, #1
   286d8:	400a      	ands	r2, r1
   286da:	0190      	lsls	r0, r2, #6
   286dc:	781a      	ldrb	r2, [r3, #0]
   286de:	2140      	movs	r1, #64	; 0x40
   286e0:	438a      	bics	r2, r1
   286e2:	1c11      	adds	r1, r2, #0
   286e4:	1c02      	adds	r2, r0, #0
   286e6:	430a      	orrs	r2, r1
   286e8:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   286ea:	4b03      	ldr	r3, [pc, #12]	; (286f8 <system_clock_source_osc8m_set_config+0x74>)
   286ec:	68fa      	ldr	r2, [r7, #12]
   286ee:	621a      	str	r2, [r3, #32]
}
   286f0:	46c0      	nop			; (mov r8, r8)
   286f2:	46bd      	mov	sp, r7
   286f4:	b004      	add	sp, #16
   286f6:	bd80      	pop	{r7, pc}
   286f8:	40000800 	.word	0x40000800

000286fc <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
   286fc:	b580      	push	{r7, lr}
   286fe:	b086      	sub	sp, #24
   28700:	af00      	add	r7, sp, #0
   28702:	6078      	str	r0, [r7, #4]

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
   28704:	687b      	ldr	r3, [r7, #4]
   28706:	68db      	ldr	r3, [r3, #12]
   28708:	617b      	str	r3, [r7, #20]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
   2870a:	687b      	ldr	r3, [r7, #4]
   2870c:	7d1b      	ldrb	r3, [r3, #20]
   2870e:	2b01      	cmp	r3, #1
   28710:	d10a      	bne.n	28728 <system_clock_source_dpll_set_config+0x2c>
		refclk = refclk / (2 * (config->reference_divider + 1));
   28712:	687b      	ldr	r3, [r7, #4]
   28714:	8a1b      	ldrh	r3, [r3, #16]
   28716:	3301      	adds	r3, #1
   28718:	005b      	lsls	r3, r3, #1
   2871a:	001a      	movs	r2, r3
   2871c:	4b36      	ldr	r3, [pc, #216]	; (287f8 <system_clock_source_dpll_set_config+0xfc>)
   2871e:	0011      	movs	r1, r2
   28720:	6978      	ldr	r0, [r7, #20]
   28722:	4798      	blx	r3
   28724:	0003      	movs	r3, r0
   28726:	617b      	str	r3, [r7, #20]
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
   28728:	687b      	ldr	r3, [r7, #4]
   2872a:	689b      	ldr	r3, [r3, #8]
   2872c:	011a      	lsls	r2, r3, #4
   2872e:	4b32      	ldr	r3, [pc, #200]	; (287f8 <system_clock_source_dpll_set_config+0xfc>)
   28730:	6979      	ldr	r1, [r7, #20]
   28732:	0010      	movs	r0, r2
   28734:	4798      	blx	r3
   28736:	0003      	movs	r3, r0
   28738:	613b      	str	r3, [r7, #16]
	tmpldrfrac = tmpldr & 0x0f;
   2873a:	693b      	ldr	r3, [r7, #16]
   2873c:	b2da      	uxtb	r2, r3
   2873e:	230f      	movs	r3, #15
   28740:	18fb      	adds	r3, r7, r3
   28742:	210f      	movs	r1, #15
   28744:	400a      	ands	r2, r1
   28746:	701a      	strb	r2, [r3, #0]
	tmpldr = (tmpldr >> 4) - 1;
   28748:	693b      	ldr	r3, [r7, #16]
   2874a:	091b      	lsrs	r3, r3, #4
   2874c:	3b01      	subs	r3, #1
   2874e:	613b      	str	r3, [r7, #16]

	SYSCTRL->DPLLCTRLA.reg =
   28750:	492a      	ldr	r1, [pc, #168]	; (287fc <system_clock_source_dpll_set_config+0x100>)
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   28752:	687b      	ldr	r3, [r7, #4]
   28754:	781b      	ldrb	r3, [r3, #0]
   28756:	01db      	lsls	r3, r3, #7
   28758:	b2da      	uxtb	r2, r3
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
   2875a:	687b      	ldr	r3, [r7, #4]
   2875c:	785b      	ldrb	r3, [r3, #1]
   2875e:	019b      	lsls	r3, r3, #6
   28760:	b2db      	uxtb	r3, r3
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   28762:	4313      	orrs	r3, r2
   28764:	b2da      	uxtb	r2, r3
	SYSCTRL->DPLLCTRLA.reg =
   28766:	2344      	movs	r3, #68	; 0x44
   28768:	54ca      	strb	r2, [r1, r3]

	SYSCTRL->DPLLRATIO.reg =
   2876a:	4b24      	ldr	r3, [pc, #144]	; (287fc <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   2876c:	220f      	movs	r2, #15
   2876e:	18ba      	adds	r2, r7, r2
   28770:	7812      	ldrb	r2, [r2, #0]
   28772:	0412      	lsls	r2, r2, #16
   28774:	0011      	movs	r1, r2
   28776:	22f0      	movs	r2, #240	; 0xf0
   28778:	0312      	lsls	r2, r2, #12
   2877a:	4011      	ands	r1, r2
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
   2877c:	693a      	ldr	r2, [r7, #16]
   2877e:	0512      	lsls	r2, r2, #20
   28780:	0d12      	lsrs	r2, r2, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   28782:	430a      	orrs	r2, r1
	SYSCTRL->DPLLRATIO.reg =
   28784:	649a      	str	r2, [r3, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
   28786:	4b1d      	ldr	r3, [pc, #116]	; (287fc <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   28788:	687a      	ldr	r2, [r7, #4]
   2878a:	8a12      	ldrh	r2, [r2, #16]
   2878c:	0412      	lsls	r2, r2, #16
   2878e:	0011      	movs	r1, r2
   28790:	4a1b      	ldr	r2, [pc, #108]	; (28800 <system_clock_source_dpll_set_config+0x104>)
   28792:	4011      	ands	r1, r2
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   28794:	687a      	ldr	r2, [r7, #4]
   28796:	7892      	ldrb	r2, [r2, #2]
   28798:	0312      	lsls	r2, r2, #12
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   2879a:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   2879c:	687a      	ldr	r2, [r7, #4]
   2879e:	7cd2      	ldrb	r2, [r2, #19]
   287a0:	0212      	lsls	r2, r2, #8
   287a2:	0010      	movs	r0, r2
   287a4:	22e0      	movs	r2, #224	; 0xe0
   287a6:	00d2      	lsls	r2, r2, #3
   287a8:	4002      	ands	r2, r0
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   287aa:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   287ac:	687a      	ldr	r2, [r7, #4]
   287ae:	7d12      	ldrb	r2, [r2, #20]
   287b0:	0112      	lsls	r2, r2, #4
   287b2:	0010      	movs	r0, r2
   287b4:	2230      	movs	r2, #48	; 0x30
   287b6:	4002      	ands	r2, r0
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   287b8:	4311      	orrs	r1, r2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   287ba:	687a      	ldr	r2, [r7, #4]
   287bc:	78d2      	ldrb	r2, [r2, #3]
   287be:	00d2      	lsls	r2, r2, #3
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   287c0:	4311      	orrs	r1, r2
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   287c2:	687a      	ldr	r2, [r7, #4]
   287c4:	7912      	ldrb	r2, [r2, #4]
   287c6:	0092      	lsls	r2, r2, #2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   287c8:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
   287ca:	687a      	ldr	r2, [r7, #4]
   287cc:	7c92      	ldrb	r2, [r2, #18]
   287ce:	0010      	movs	r0, r2
   287d0:	2203      	movs	r2, #3
   287d2:	4002      	ands	r2, r0
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   287d4:	430a      	orrs	r2, r1
	SYSCTRL->DPLLCTRLB.reg =
   287d6:	64da      	str	r2, [r3, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
   287d8:	693b      	ldr	r3, [r7, #16]
   287da:	3301      	adds	r3, #1
   287dc:	011a      	lsls	r2, r3, #4
   287de:	230f      	movs	r3, #15
   287e0:	18fb      	adds	r3, r7, r3
   287e2:	781b      	ldrb	r3, [r3, #0]
   287e4:	18d3      	adds	r3, r2, r3
   287e6:	697a      	ldr	r2, [r7, #20]
   287e8:	4353      	muls	r3, r2
   287ea:	091a      	lsrs	r2, r3, #4
	_system_clock_inst.dpll.frequency =
   287ec:	4b05      	ldr	r3, [pc, #20]	; (28804 <system_clock_source_dpll_set_config+0x108>)
   287ee:	60da      	str	r2, [r3, #12]
}
   287f0:	46c0      	nop			; (mov r8, r8)
   287f2:	46bd      	mov	sp, r7
   287f4:	b006      	add	sp, #24
   287f6:	bd80      	pop	{r7, pc}
   287f8:	00031b25 	.word	0x00031b25
   287fc:	40000800 	.word	0x40000800
   28800:	07ff0000 	.word	0x07ff0000
   28804:	200042a8 	.word	0x200042a8

00028808 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   28808:	b580      	push	{r7, lr}
   2880a:	b082      	sub	sp, #8
   2880c:	af00      	add	r7, sp, #0
   2880e:	0002      	movs	r2, r0
   28810:	1dfb      	adds	r3, r7, #7
   28812:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   28814:	1dfb      	adds	r3, r7, #7
   28816:	781b      	ldrb	r3, [r3, #0]
   28818:	2b08      	cmp	r3, #8
   2881a:	d83b      	bhi.n	28894 <system_clock_source_enable+0x8c>
   2881c:	009a      	lsls	r2, r3, #2
   2881e:	4b21      	ldr	r3, [pc, #132]	; (288a4 <system_clock_source_enable+0x9c>)
   28820:	18d3      	adds	r3, r2, r3
   28822:	681b      	ldr	r3, [r3, #0]
   28824:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   28826:	4b20      	ldr	r3, [pc, #128]	; (288a8 <system_clock_source_enable+0xa0>)
   28828:	4a1f      	ldr	r2, [pc, #124]	; (288a8 <system_clock_source_enable+0xa0>)
   2882a:	6a12      	ldr	r2, [r2, #32]
   2882c:	2102      	movs	r1, #2
   2882e:	430a      	orrs	r2, r1
   28830:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   28832:	2300      	movs	r3, #0
   28834:	e031      	b.n	2889a <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   28836:	4b1c      	ldr	r3, [pc, #112]	; (288a8 <system_clock_source_enable+0xa0>)
   28838:	4a1b      	ldr	r2, [pc, #108]	; (288a8 <system_clock_source_enable+0xa0>)
   2883a:	6992      	ldr	r2, [r2, #24]
   2883c:	2102      	movs	r1, #2
   2883e:	430a      	orrs	r2, r1
   28840:	619a      	str	r2, [r3, #24]
		break;
   28842:	e029      	b.n	28898 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   28844:	4a18      	ldr	r2, [pc, #96]	; (288a8 <system_clock_source_enable+0xa0>)
   28846:	4b18      	ldr	r3, [pc, #96]	; (288a8 <system_clock_source_enable+0xa0>)
   28848:	8a1b      	ldrh	r3, [r3, #16]
   2884a:	b29b      	uxth	r3, r3
   2884c:	2102      	movs	r1, #2
   2884e:	430b      	orrs	r3, r1
   28850:	b29b      	uxth	r3, r3
   28852:	8213      	strh	r3, [r2, #16]
		break;
   28854:	e020      	b.n	28898 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   28856:	4a14      	ldr	r2, [pc, #80]	; (288a8 <system_clock_source_enable+0xa0>)
   28858:	4b13      	ldr	r3, [pc, #76]	; (288a8 <system_clock_source_enable+0xa0>)
   2885a:	8a9b      	ldrh	r3, [r3, #20]
   2885c:	b29b      	uxth	r3, r3
   2885e:	2102      	movs	r1, #2
   28860:	430b      	orrs	r3, r1
   28862:	b29b      	uxth	r3, r3
   28864:	8293      	strh	r3, [r2, #20]
		break;
   28866:	e017      	b.n	28898 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   28868:	4b10      	ldr	r3, [pc, #64]	; (288ac <system_clock_source_enable+0xa4>)
   2886a:	681b      	ldr	r3, [r3, #0]
   2886c:	2202      	movs	r2, #2
   2886e:	431a      	orrs	r2, r3
   28870:	4b0e      	ldr	r3, [pc, #56]	; (288ac <system_clock_source_enable+0xa4>)
   28872:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   28874:	4b0e      	ldr	r3, [pc, #56]	; (288b0 <system_clock_source_enable+0xa8>)
   28876:	4798      	blx	r3
		break;
   28878:	e00e      	b.n	28898 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   2887a:	4a0b      	ldr	r2, [pc, #44]	; (288a8 <system_clock_source_enable+0xa0>)
   2887c:	490a      	ldr	r1, [pc, #40]	; (288a8 <system_clock_source_enable+0xa0>)
   2887e:	2344      	movs	r3, #68	; 0x44
   28880:	5ccb      	ldrb	r3, [r1, r3]
   28882:	b2db      	uxtb	r3, r3
   28884:	2102      	movs	r1, #2
   28886:	430b      	orrs	r3, r1
   28888:	b2d9      	uxtb	r1, r3
   2888a:	2344      	movs	r3, #68	; 0x44
   2888c:	54d1      	strb	r1, [r2, r3]
		break;
   2888e:	e003      	b.n	28898 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   28890:	2300      	movs	r3, #0
   28892:	e002      	b.n	2889a <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   28894:	2317      	movs	r3, #23
   28896:	e000      	b.n	2889a <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   28898:	2300      	movs	r3, #0
}
   2889a:	0018      	movs	r0, r3
   2889c:	46bd      	mov	sp, r7
   2889e:	b002      	add	sp, #8
   288a0:	bd80      	pop	{r7, pc}
   288a2:	46c0      	nop			; (mov r8, r8)
   288a4:	00038fb0 	.word	0x00038fb0
   288a8:	40000800 	.word	0x40000800
   288ac:	200042a8 	.word	0x200042a8
   288b0:	00028581 	.word	0x00028581

000288b4 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   288b4:	b580      	push	{r7, lr}
   288b6:	b084      	sub	sp, #16
   288b8:	af00      	add	r7, sp, #0
   288ba:	0002      	movs	r2, r0
   288bc:	1dfb      	adds	r3, r7, #7
   288be:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   288c0:	2300      	movs	r3, #0
   288c2:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   288c4:	1dfb      	adds	r3, r7, #7
   288c6:	781b      	ldrb	r3, [r3, #0]
   288c8:	2b08      	cmp	r3, #8
   288ca:	d821      	bhi.n	28910 <system_clock_source_is_ready+0x5c>
   288cc:	009a      	lsls	r2, r3, #2
   288ce:	4b18      	ldr	r3, [pc, #96]	; (28930 <system_clock_source_is_ready+0x7c>)
   288d0:	18d3      	adds	r3, r2, r3
   288d2:	681b      	ldr	r3, [r3, #0]
   288d4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   288d6:	2308      	movs	r3, #8
   288d8:	60fb      	str	r3, [r7, #12]
		break;
   288da:	e01b      	b.n	28914 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   288dc:	2304      	movs	r3, #4
   288de:	60fb      	str	r3, [r7, #12]
		break;
   288e0:	e018      	b.n	28914 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   288e2:	2301      	movs	r3, #1
   288e4:	60fb      	str	r3, [r7, #12]
		break;
   288e6:	e015      	b.n	28914 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   288e8:	2302      	movs	r3, #2
   288ea:	60fb      	str	r3, [r7, #12]
		break;
   288ec:	e012      	b.n	28914 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
   288ee:	2310      	movs	r3, #16
   288f0:	60fb      	str	r3, [r7, #12]
		}
		break;
   288f2:	e00f      	b.n	28914 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   288f4:	4a0f      	ldr	r2, [pc, #60]	; (28934 <system_clock_source_is_ready+0x80>)
   288f6:	2350      	movs	r3, #80	; 0x50
   288f8:	5cd3      	ldrb	r3, [r2, r3]
   288fa:	b2db      	uxtb	r3, r3
   288fc:	001a      	movs	r2, r3
   288fe:	2303      	movs	r3, #3
   28900:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   28902:	3b03      	subs	r3, #3
   28904:	425a      	negs	r2, r3
   28906:	4153      	adcs	r3, r2
   28908:	b2db      	uxtb	r3, r3
   2890a:	e00c      	b.n	28926 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   2890c:	2301      	movs	r3, #1
   2890e:	e00a      	b.n	28926 <system_clock_source_is_ready+0x72>

	default:
		return false;
   28910:	2300      	movs	r3, #0
   28912:	e008      	b.n	28926 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   28914:	4b07      	ldr	r3, [pc, #28]	; (28934 <system_clock_source_is_ready+0x80>)
   28916:	68db      	ldr	r3, [r3, #12]
   28918:	68fa      	ldr	r2, [r7, #12]
   2891a:	401a      	ands	r2, r3
   2891c:	68fb      	ldr	r3, [r7, #12]
   2891e:	1ad3      	subs	r3, r2, r3
   28920:	425a      	negs	r2, r3
   28922:	4153      	adcs	r3, r2
   28924:	b2db      	uxtb	r3, r3
}
   28926:	0018      	movs	r0, r3
   28928:	46bd      	mov	sp, r7
   2892a:	b004      	add	sp, #16
   2892c:	bd80      	pop	{r7, pc}
   2892e:	46c0      	nop			; (mov r8, r8)
   28930:	00038fd4 	.word	0x00038fd4
   28934:	40000800 	.word	0x40000800

00028938 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   28938:	b580      	push	{r7, lr}
   2893a:	b082      	sub	sp, #8
   2893c:	af00      	add	r7, sp, #0
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
   2893e:	003b      	movs	r3, r7
   28940:	2203      	movs	r2, #3
   28942:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   28944:	2300      	movs	r3, #0
   28946:	607b      	str	r3, [r7, #4]
   28948:	e009      	b.n	2895e <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   2894a:	687b      	ldr	r3, [r7, #4]
   2894c:	b2db      	uxtb	r3, r3
   2894e:	003a      	movs	r2, r7
   28950:	0011      	movs	r1, r2
   28952:	0018      	movs	r0, r3
   28954:	4b05      	ldr	r3, [pc, #20]	; (2896c <_switch_peripheral_gclk+0x34>)
   28956:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   28958:	687b      	ldr	r3, [r7, #4]
   2895a:	3301      	adds	r3, #1
   2895c:	607b      	str	r3, [r7, #4]
   2895e:	687b      	ldr	r3, [r7, #4]
   28960:	2b24      	cmp	r3, #36	; 0x24
   28962:	d9f2      	bls.n	2894a <_switch_peripheral_gclk+0x12>
	}
}
   28964:	46c0      	nop			; (mov r8, r8)
   28966:	46bd      	mov	sp, r7
   28968:	b002      	add	sp, #8
   2896a:	bd80      	pop	{r7, pc}
   2896c:	00028f3d 	.word	0x00028f3d

00028970 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   28970:	b580      	push	{r7, lr}
   28972:	b0a6      	sub	sp, #152	; 0x98
   28974:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   28976:	4b92      	ldr	r3, [pc, #584]	; (28bc0 <system_clock_init+0x250>)
   28978:	22c2      	movs	r2, #194	; 0xc2
   2897a:	00d2      	lsls	r2, r2, #3
   2897c:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   2897e:	2003      	movs	r0, #3
   28980:	4b90      	ldr	r3, [pc, #576]	; (28bc4 <system_clock_init+0x254>)
   28982:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   28984:	4b90      	ldr	r3, [pc, #576]	; (28bc8 <system_clock_init+0x258>)
   28986:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   28988:	2394      	movs	r3, #148	; 0x94
   2898a:	18fb      	adds	r3, r7, r3
   2898c:	0018      	movs	r0, r3
   2898e:	4b8f      	ldr	r3, [pc, #572]	; (28bcc <system_clock_init+0x25c>)
   28990:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   28992:	2394      	movs	r3, #148	; 0x94
   28994:	18fb      	adds	r3, r7, r3
   28996:	2200      	movs	r2, #0
   28998:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   2899a:	2394      	movs	r3, #148	; 0x94
   2899c:	18fb      	adds	r3, r7, r3
   2899e:	2201      	movs	r2, #1
   289a0:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   289a2:	2394      	movs	r3, #148	; 0x94
   289a4:	18fb      	adds	r3, r7, r3
   289a6:	2200      	movs	r2, #0
   289a8:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   289aa:	2394      	movs	r3, #148	; 0x94
   289ac:	18fb      	adds	r3, r7, r3
   289ae:	0018      	movs	r0, r3
   289b0:	4b87      	ldr	r3, [pc, #540]	; (28bd0 <system_clock_init+0x260>)
   289b2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   289b4:	2006      	movs	r0, #6
   289b6:	4b87      	ldr	r3, [pc, #540]	; (28bd4 <system_clock_init+0x264>)
   289b8:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   289ba:	4b87      	ldr	r3, [pc, #540]	; (28bd8 <system_clock_init+0x268>)
   289bc:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   289be:	2360      	movs	r3, #96	; 0x60
   289c0:	18fb      	adds	r3, r7, r3
   289c2:	0018      	movs	r0, r3
   289c4:	4b85      	ldr	r3, [pc, #532]	; (28bdc <system_clock_init+0x26c>)
   289c6:	4798      	blx	r3
   289c8:	2360      	movs	r3, #96	; 0x60
   289ca:	18fb      	adds	r3, r7, r3
   289cc:	2206      	movs	r2, #6
   289ce:	701a      	strb	r2, [r3, #0]
   289d0:	2360      	movs	r3, #96	; 0x60
   289d2:	18fb      	adds	r3, r7, r3
   289d4:	2208      	movs	r2, #8
   289d6:	605a      	str	r2, [r3, #4]
   289d8:	2360      	movs	r3, #96	; 0x60
   289da:	18fb      	adds	r3, r7, r3
   289dc:	2200      	movs	r2, #0
   289de:	721a      	strb	r2, [r3, #8]
   289e0:	2360      	movs	r3, #96	; 0x60
   289e2:	18fb      	adds	r3, r7, r3
   289e4:	2200      	movs	r2, #0
   289e6:	725a      	strb	r2, [r3, #9]
   289e8:	2360      	movs	r3, #96	; 0x60
   289ea:	18fb      	adds	r3, r7, r3
   289ec:	0019      	movs	r1, r3
   289ee:	2001      	movs	r0, #1
   289f0:	4b7b      	ldr	r3, [pc, #492]	; (28be0 <system_clock_init+0x270>)
   289f2:	4798      	blx	r3
   289f4:	2001      	movs	r0, #1
   289f6:	4b7b      	ldr	r3, [pc, #492]	; (28be4 <system_clock_init+0x274>)
   289f8:	4798      	blx	r3
   289fa:	2354      	movs	r3, #84	; 0x54
   289fc:	18fb      	adds	r3, r7, r3
   289fe:	0018      	movs	r0, r3
   28a00:	4b76      	ldr	r3, [pc, #472]	; (28bdc <system_clock_init+0x26c>)
   28a02:	4798      	blx	r3
   28a04:	2354      	movs	r3, #84	; 0x54
   28a06:	18fb      	adds	r3, r7, r3
   28a08:	2203      	movs	r2, #3
   28a0a:	701a      	strb	r2, [r3, #0]
   28a0c:	2354      	movs	r3, #84	; 0x54
   28a0e:	18fb      	adds	r3, r7, r3
   28a10:	2201      	movs	r2, #1
   28a12:	605a      	str	r2, [r3, #4]
   28a14:	2354      	movs	r3, #84	; 0x54
   28a16:	18fb      	adds	r3, r7, r3
   28a18:	2201      	movs	r2, #1
   28a1a:	721a      	strb	r2, [r3, #8]
   28a1c:	2354      	movs	r3, #84	; 0x54
   28a1e:	18fb      	adds	r3, r7, r3
   28a20:	2200      	movs	r2, #0
   28a22:	725a      	strb	r2, [r3, #9]
   28a24:	2354      	movs	r3, #84	; 0x54
   28a26:	18fb      	adds	r3, r7, r3
   28a28:	0019      	movs	r1, r3
   28a2a:	2002      	movs	r0, #2
   28a2c:	4b6c      	ldr	r3, [pc, #432]	; (28be0 <system_clock_init+0x270>)
   28a2e:	4798      	blx	r3
   28a30:	2002      	movs	r0, #2
   28a32:	4b6c      	ldr	r3, [pc, #432]	; (28be4 <system_clock_init+0x274>)
   28a34:	4798      	blx	r3
   28a36:	233c      	movs	r3, #60	; 0x3c
   28a38:	18fb      	adds	r3, r7, r3
   28a3a:	0018      	movs	r0, r3
   28a3c:	4b67      	ldr	r3, [pc, #412]	; (28bdc <system_clock_init+0x26c>)
   28a3e:	4798      	blx	r3
   28a40:	233c      	movs	r3, #60	; 0x3c
   28a42:	18fb      	adds	r3, r7, r3
   28a44:	2203      	movs	r2, #3
   28a46:	701a      	strb	r2, [r3, #0]
   28a48:	233c      	movs	r3, #60	; 0x3c
   28a4a:	18fb      	adds	r3, r7, r3
   28a4c:	2220      	movs	r2, #32
   28a4e:	605a      	str	r2, [r3, #4]
   28a50:	233c      	movs	r3, #60	; 0x3c
   28a52:	18fb      	adds	r3, r7, r3
   28a54:	2200      	movs	r2, #0
   28a56:	721a      	strb	r2, [r3, #8]
   28a58:	233c      	movs	r3, #60	; 0x3c
   28a5a:	18fb      	adds	r3, r7, r3
   28a5c:	2200      	movs	r2, #0
   28a5e:	725a      	strb	r2, [r3, #9]
   28a60:	233c      	movs	r3, #60	; 0x3c
   28a62:	18fb      	adds	r3, r7, r3
   28a64:	0019      	movs	r1, r3
   28a66:	2004      	movs	r0, #4
   28a68:	4b5d      	ldr	r3, [pc, #372]	; (28be0 <system_clock_init+0x270>)
   28a6a:	4798      	blx	r3
   28a6c:	2004      	movs	r0, #4
   28a6e:	4b5d      	ldr	r3, [pc, #372]	; (28be4 <system_clock_init+0x274>)
   28a70:	4798      	blx	r3
   28a72:	2330      	movs	r3, #48	; 0x30
   28a74:	18fb      	adds	r3, r7, r3
   28a76:	0018      	movs	r0, r3
   28a78:	4b58      	ldr	r3, [pc, #352]	; (28bdc <system_clock_init+0x26c>)
   28a7a:	4798      	blx	r3
   28a7c:	2330      	movs	r3, #48	; 0x30
   28a7e:	18fb      	adds	r3, r7, r3
   28a80:	2206      	movs	r2, #6
   28a82:	701a      	strb	r2, [r3, #0]
   28a84:	2330      	movs	r3, #48	; 0x30
   28a86:	18fb      	adds	r3, r7, r3
   28a88:	2201      	movs	r2, #1
   28a8a:	605a      	str	r2, [r3, #4]
   28a8c:	2330      	movs	r3, #48	; 0x30
   28a8e:	18fb      	adds	r3, r7, r3
   28a90:	2200      	movs	r2, #0
   28a92:	721a      	strb	r2, [r3, #8]
   28a94:	2330      	movs	r3, #48	; 0x30
   28a96:	18fb      	adds	r3, r7, r3
   28a98:	2200      	movs	r2, #0
   28a9a:	725a      	strb	r2, [r3, #9]
   28a9c:	2330      	movs	r3, #48	; 0x30
   28a9e:	18fb      	adds	r3, r7, r3
   28aa0:	0019      	movs	r1, r3
   28aa2:	2005      	movs	r0, #5
   28aa4:	4b4e      	ldr	r3, [pc, #312]	; (28be0 <system_clock_init+0x270>)
   28aa6:	4798      	blx	r3
   28aa8:	2005      	movs	r0, #5
   28aaa:	4b4e      	ldr	r3, [pc, #312]	; (28be4 <system_clock_init+0x274>)
   28aac:	4798      	blx	r3
#  endif

#  if CONF_CLOCK_DPLL_ENABLE == true
	/* Enable DPLL internal lock timer and reference clock */
	struct system_gclk_chan_config dpll_gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&dpll_gclk_chan_conf);
   28aae:	2390      	movs	r3, #144	; 0x90
   28ab0:	18fb      	adds	r3, r7, r3
   28ab2:	0018      	movs	r0, r3
   28ab4:	4b4c      	ldr	r3, [pc, #304]	; (28be8 <system_clock_init+0x278>)
   28ab6:	4798      	blx	r3
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
   28ab8:	2390      	movs	r3, #144	; 0x90
   28aba:	18fb      	adds	r3, r7, r3
   28abc:	2201      	movs	r2, #1
   28abe:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
   28ac0:	2390      	movs	r3, #144	; 0x90
   28ac2:	18fb      	adds	r3, r7, r3
   28ac4:	0019      	movs	r1, r3
   28ac6:	2001      	movs	r0, #1
   28ac8:	4b48      	ldr	r3, [pc, #288]	; (28bec <system_clock_init+0x27c>)
   28aca:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
   28acc:	2001      	movs	r0, #1
   28ace:	4b48      	ldr	r3, [pc, #288]	; (28bf0 <system_clock_init+0x280>)
   28ad0:	4798      	blx	r3
	else {
		Assert(false);
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);
   28ad2:	2378      	movs	r3, #120	; 0x78
   28ad4:	18fb      	adds	r3, r7, r3
   28ad6:	0018      	movs	r0, r3
   28ad8:	4b46      	ldr	r3, [pc, #280]	; (28bf4 <system_clock_init+0x284>)
   28ada:	4798      	blx	r3

	dpll_config.on_demand        = false;
   28adc:	2378      	movs	r3, #120	; 0x78
   28ade:	18fb      	adds	r3, r7, r3
   28ae0:	2200      	movs	r2, #0
   28ae2:	701a      	strb	r2, [r3, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
   28ae4:	2378      	movs	r3, #120	; 0x78
   28ae6:	18fb      	adds	r3, r7, r3
   28ae8:	2200      	movs	r2, #0
   28aea:	705a      	strb	r2, [r3, #1]
	dpll_config.lock_bypass      = CONF_CLOCK_DPLL_LOCK_BYPASS;
   28aec:	2378      	movs	r3, #120	; 0x78
   28aee:	18fb      	adds	r3, r7, r3
   28af0:	2200      	movs	r2, #0
   28af2:	709a      	strb	r2, [r3, #2]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
   28af4:	2378      	movs	r3, #120	; 0x78
   28af6:	18fb      	adds	r3, r7, r3
   28af8:	2200      	movs	r2, #0
   28afa:	70da      	strb	r2, [r3, #3]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;
   28afc:	2378      	movs	r3, #120	; 0x78
   28afe:	18fb      	adds	r3, r7, r3
   28b00:	2200      	movs	r2, #0
   28b02:	711a      	strb	r2, [r3, #4]

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
   28b04:	2378      	movs	r3, #120	; 0x78
   28b06:	18fb      	adds	r3, r7, r3
   28b08:	2200      	movs	r2, #0
   28b0a:	749a      	strb	r2, [r3, #18]
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;
   28b0c:	2378      	movs	r3, #120	; 0x78
   28b0e:	18fb      	adds	r3, r7, r3
   28b10:	2200      	movs	r2, #0
   28b12:	74da      	strb	r2, [r3, #19]

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
   28b14:	2378      	movs	r3, #120	; 0x78
   28b16:	18fb      	adds	r3, r7, r3
   28b18:	2202      	movs	r2, #2
   28b1a:	751a      	strb	r2, [r3, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
   28b1c:	2378      	movs	r3, #120	; 0x78
   28b1e:	18fb      	adds	r3, r7, r3
   28b20:	4a35      	ldr	r2, [pc, #212]	; (28bf8 <system_clock_init+0x288>)
   28b22:	60da      	str	r2, [r3, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
   28b24:	2378      	movs	r3, #120	; 0x78
   28b26:	18fb      	adds	r3, r7, r3
   28b28:	2201      	movs	r2, #1
   28b2a:	821a      	strh	r2, [r3, #16]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
   28b2c:	2378      	movs	r3, #120	; 0x78
   28b2e:	18fb      	adds	r3, r7, r3
   28b30:	4a32      	ldr	r2, [pc, #200]	; (28bfc <system_clock_init+0x28c>)
   28b32:	609a      	str	r2, [r3, #8]

	system_clock_source_dpll_set_config(&dpll_config);
   28b34:	2378      	movs	r3, #120	; 0x78
   28b36:	18fb      	adds	r3, r7, r3
   28b38:	0018      	movs	r0, r3
   28b3a:	4b31      	ldr	r3, [pc, #196]	; (28c00 <system_clock_init+0x290>)
   28b3c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
   28b3e:	2008      	movs	r0, #8
   28b40:	4b24      	ldr	r3, [pc, #144]	; (28bd4 <system_clock_init+0x264>)
   28b42:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   28b44:	46c0      	nop			; (mov r8, r8)
   28b46:	2008      	movs	r0, #8
   28b48:	4b2e      	ldr	r3, [pc, #184]	; (28c04 <system_clock_init+0x294>)
   28b4a:	4798      	blx	r3
   28b4c:	0003      	movs	r3, r0
   28b4e:	001a      	movs	r2, r3
   28b50:	2301      	movs	r3, #1
   28b52:	4053      	eors	r3, r2
   28b54:	b2db      	uxtb	r3, r3
   28b56:	2b00      	cmp	r3, #0
   28b58:	d1f5      	bne.n	28b46 <system_clock_init+0x1d6>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
   28b5a:	4919      	ldr	r1, [pc, #100]	; (28bc0 <system_clock_init+0x250>)
   28b5c:	2244      	movs	r2, #68	; 0x44
   28b5e:	5c8b      	ldrb	r3, [r1, r2]
   28b60:	2080      	movs	r0, #128	; 0x80
   28b62:	4240      	negs	r0, r0
   28b64:	4303      	orrs	r3, r0
   28b66:	548b      	strb	r3, [r1, r2]

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   28b68:	2000      	movs	r0, #0
   28b6a:	4b27      	ldr	r3, [pc, #156]	; (28c08 <system_clock_init+0x298>)
   28b6c:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   28b6e:	2100      	movs	r1, #0
   28b70:	2000      	movs	r0, #0
   28b72:	4b26      	ldr	r3, [pc, #152]	; (28c0c <system_clock_init+0x29c>)
   28b74:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   28b76:	2100      	movs	r1, #0
   28b78:	2001      	movs	r0, #1
   28b7a:	4b24      	ldr	r3, [pc, #144]	; (28c0c <system_clock_init+0x29c>)
   28b7c:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   28b7e:	2100      	movs	r1, #0
   28b80:	2002      	movs	r0, #2
   28b82:	4b22      	ldr	r3, [pc, #136]	; (28c0c <system_clock_init+0x29c>)
   28b84:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   28b86:	003b      	movs	r3, r7
   28b88:	0018      	movs	r0, r3
   28b8a:	4b14      	ldr	r3, [pc, #80]	; (28bdc <system_clock_init+0x26c>)
   28b8c:	4798      	blx	r3
   28b8e:	003b      	movs	r3, r7
   28b90:	2208      	movs	r2, #8
   28b92:	701a      	strb	r2, [r3, #0]
   28b94:	003b      	movs	r3, r7
   28b96:	2201      	movs	r2, #1
   28b98:	605a      	str	r2, [r3, #4]
   28b9a:	003b      	movs	r3, r7
   28b9c:	2200      	movs	r2, #0
   28b9e:	721a      	strb	r2, [r3, #8]
   28ba0:	003b      	movs	r3, r7
   28ba2:	2201      	movs	r2, #1
   28ba4:	725a      	strb	r2, [r3, #9]
   28ba6:	003b      	movs	r3, r7
   28ba8:	0019      	movs	r1, r3
   28baa:	2000      	movs	r0, #0
   28bac:	4b0c      	ldr	r3, [pc, #48]	; (28be0 <system_clock_init+0x270>)
   28bae:	4798      	blx	r3
   28bb0:	2000      	movs	r0, #0
   28bb2:	4b0c      	ldr	r3, [pc, #48]	; (28be4 <system_clock_init+0x274>)
   28bb4:	4798      	blx	r3
#endif
}
   28bb6:	46c0      	nop			; (mov r8, r8)
   28bb8:	46bd      	mov	sp, r7
   28bba:	b026      	add	sp, #152	; 0x98
   28bbc:	bd80      	pop	{r7, pc}
   28bbe:	46c0      	nop			; (mov r8, r8)
   28bc0:	40000800 	.word	0x40000800
   28bc4:	00028531 	.word	0x00028531
   28bc8:	00028939 	.word	0x00028939
   28bcc:	00028441 	.word	0x00028441
   28bd0:	00028685 	.word	0x00028685
   28bd4:	00028809 	.word	0x00028809
   28bd8:	00028cb5 	.word	0x00028cb5
   28bdc:	000283fd 	.word	0x000283fd
   28be0:	00028ce5 	.word	0x00028ce5
   28be4:	00028e09 	.word	0x00028e09
   28be8:	0002842b 	.word	0x0002842b
   28bec:	00028f3d 	.word	0x00028f3d
   28bf0:	00028f81 	.word	0x00028f81
   28bf4:	000284d9 	.word	0x000284d9
   28bf8:	000f4240 	.word	0x000f4240
   28bfc:	02dc6c00 	.word	0x02dc6c00
   28c00:	000286fd 	.word	0x000286fd
   28c04:	000288b5 	.word	0x000288b5
   28c08:	00028465 	.word	0x00028465
   28c0c:	00028485 	.word	0x00028485

00028c10 <system_apb_clock_set_mask>:
{
   28c10:	b580      	push	{r7, lr}
   28c12:	b082      	sub	sp, #8
   28c14:	af00      	add	r7, sp, #0
   28c16:	0002      	movs	r2, r0
   28c18:	6039      	str	r1, [r7, #0]
   28c1a:	1dfb      	adds	r3, r7, #7
   28c1c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   28c1e:	1dfb      	adds	r3, r7, #7
   28c20:	781b      	ldrb	r3, [r3, #0]
   28c22:	2b01      	cmp	r3, #1
   28c24:	d00a      	beq.n	28c3c <system_apb_clock_set_mask+0x2c>
   28c26:	2b02      	cmp	r3, #2
   28c28:	d00f      	beq.n	28c4a <system_apb_clock_set_mask+0x3a>
   28c2a:	2b00      	cmp	r3, #0
   28c2c:	d114      	bne.n	28c58 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   28c2e:	4b0e      	ldr	r3, [pc, #56]	; (28c68 <system_apb_clock_set_mask+0x58>)
   28c30:	4a0d      	ldr	r2, [pc, #52]	; (28c68 <system_apb_clock_set_mask+0x58>)
   28c32:	6991      	ldr	r1, [r2, #24]
   28c34:	683a      	ldr	r2, [r7, #0]
   28c36:	430a      	orrs	r2, r1
   28c38:	619a      	str	r2, [r3, #24]
			break;
   28c3a:	e00f      	b.n	28c5c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   28c3c:	4b0a      	ldr	r3, [pc, #40]	; (28c68 <system_apb_clock_set_mask+0x58>)
   28c3e:	4a0a      	ldr	r2, [pc, #40]	; (28c68 <system_apb_clock_set_mask+0x58>)
   28c40:	69d1      	ldr	r1, [r2, #28]
   28c42:	683a      	ldr	r2, [r7, #0]
   28c44:	430a      	orrs	r2, r1
   28c46:	61da      	str	r2, [r3, #28]
			break;
   28c48:	e008      	b.n	28c5c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   28c4a:	4b07      	ldr	r3, [pc, #28]	; (28c68 <system_apb_clock_set_mask+0x58>)
   28c4c:	4a06      	ldr	r2, [pc, #24]	; (28c68 <system_apb_clock_set_mask+0x58>)
   28c4e:	6a11      	ldr	r1, [r2, #32]
   28c50:	683a      	ldr	r2, [r7, #0]
   28c52:	430a      	orrs	r2, r1
   28c54:	621a      	str	r2, [r3, #32]
			break;
   28c56:	e001      	b.n	28c5c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   28c58:	2317      	movs	r3, #23
   28c5a:	e000      	b.n	28c5e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   28c5c:	2300      	movs	r3, #0
}
   28c5e:	0018      	movs	r0, r3
   28c60:	46bd      	mov	sp, r7
   28c62:	b002      	add	sp, #8
   28c64:	bd80      	pop	{r7, pc}
   28c66:	46c0      	nop			; (mov r8, r8)
   28c68:	40000400 	.word	0x40000400

00028c6c <system_interrupt_enter_critical_section>:
{
   28c6c:	b580      	push	{r7, lr}
   28c6e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   28c70:	4b02      	ldr	r3, [pc, #8]	; (28c7c <system_interrupt_enter_critical_section+0x10>)
   28c72:	4798      	blx	r3
}
   28c74:	46c0      	nop			; (mov r8, r8)
   28c76:	46bd      	mov	sp, r7
   28c78:	bd80      	pop	{r7, pc}
   28c7a:	46c0      	nop			; (mov r8, r8)
   28c7c:	000252a9 	.word	0x000252a9

00028c80 <system_interrupt_leave_critical_section>:
{
   28c80:	b580      	push	{r7, lr}
   28c82:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   28c84:	4b02      	ldr	r3, [pc, #8]	; (28c90 <system_interrupt_leave_critical_section+0x10>)
   28c86:	4798      	blx	r3
}
   28c88:	46c0      	nop			; (mov r8, r8)
   28c8a:	46bd      	mov	sp, r7
   28c8c:	bd80      	pop	{r7, pc}
   28c8e:	46c0      	nop			; (mov r8, r8)
   28c90:	000252fd 	.word	0x000252fd

00028c94 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   28c94:	b580      	push	{r7, lr}
   28c96:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   28c98:	4b05      	ldr	r3, [pc, #20]	; (28cb0 <system_gclk_is_syncing+0x1c>)
   28c9a:	785b      	ldrb	r3, [r3, #1]
   28c9c:	b2db      	uxtb	r3, r3
   28c9e:	b25b      	sxtb	r3, r3
   28ca0:	2b00      	cmp	r3, #0
   28ca2:	da01      	bge.n	28ca8 <system_gclk_is_syncing+0x14>
		return true;
   28ca4:	2301      	movs	r3, #1
   28ca6:	e000      	b.n	28caa <system_gclk_is_syncing+0x16>
	}

	return false;
   28ca8:	2300      	movs	r3, #0
}
   28caa:	0018      	movs	r0, r3
   28cac:	46bd      	mov	sp, r7
   28cae:	bd80      	pop	{r7, pc}
   28cb0:	40000c00 	.word	0x40000c00

00028cb4 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   28cb4:	b580      	push	{r7, lr}
   28cb6:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   28cb8:	2108      	movs	r1, #8
   28cba:	2000      	movs	r0, #0
   28cbc:	4b07      	ldr	r3, [pc, #28]	; (28cdc <system_gclk_init+0x28>)
   28cbe:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   28cc0:	4b07      	ldr	r3, [pc, #28]	; (28ce0 <system_gclk_init+0x2c>)
   28cc2:	2201      	movs	r2, #1
   28cc4:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   28cc6:	46c0      	nop			; (mov r8, r8)
   28cc8:	4b05      	ldr	r3, [pc, #20]	; (28ce0 <system_gclk_init+0x2c>)
   28cca:	781b      	ldrb	r3, [r3, #0]
   28ccc:	b2db      	uxtb	r3, r3
   28cce:	001a      	movs	r2, r3
   28cd0:	2301      	movs	r3, #1
   28cd2:	4013      	ands	r3, r2
   28cd4:	d1f8      	bne.n	28cc8 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   28cd6:	46c0      	nop			; (mov r8, r8)
   28cd8:	46bd      	mov	sp, r7
   28cda:	bd80      	pop	{r7, pc}
   28cdc:	00028c11 	.word	0x00028c11
   28ce0:	40000c00 	.word	0x40000c00

00028ce4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   28ce4:	b580      	push	{r7, lr}
   28ce6:	b086      	sub	sp, #24
   28ce8:	af00      	add	r7, sp, #0
   28cea:	0002      	movs	r2, r0
   28cec:	6039      	str	r1, [r7, #0]
   28cee:	1dfb      	adds	r3, r7, #7
   28cf0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   28cf2:	1dfb      	adds	r3, r7, #7
   28cf4:	781b      	ldrb	r3, [r3, #0]
   28cf6:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   28cf8:	1dfb      	adds	r3, r7, #7
   28cfa:	781b      	ldrb	r3, [r3, #0]
   28cfc:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   28cfe:	683b      	ldr	r3, [r7, #0]
   28d00:	781b      	ldrb	r3, [r3, #0]
   28d02:	021b      	lsls	r3, r3, #8
   28d04:	001a      	movs	r2, r3
   28d06:	697b      	ldr	r3, [r7, #20]
   28d08:	4313      	orrs	r3, r2
   28d0a:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   28d0c:	683b      	ldr	r3, [r7, #0]
   28d0e:	785b      	ldrb	r3, [r3, #1]
   28d10:	2b00      	cmp	r3, #0
   28d12:	d004      	beq.n	28d1e <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   28d14:	697b      	ldr	r3, [r7, #20]
   28d16:	2280      	movs	r2, #128	; 0x80
   28d18:	02d2      	lsls	r2, r2, #11
   28d1a:	4313      	orrs	r3, r2
   28d1c:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   28d1e:	683b      	ldr	r3, [r7, #0]
   28d20:	7a5b      	ldrb	r3, [r3, #9]
   28d22:	2b00      	cmp	r3, #0
   28d24:	d004      	beq.n	28d30 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   28d26:	697b      	ldr	r3, [r7, #20]
   28d28:	2280      	movs	r2, #128	; 0x80
   28d2a:	0312      	lsls	r2, r2, #12
   28d2c:	4313      	orrs	r3, r2
   28d2e:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   28d30:	683b      	ldr	r3, [r7, #0]
   28d32:	685b      	ldr	r3, [r3, #4]
   28d34:	2b01      	cmp	r3, #1
   28d36:	d92c      	bls.n	28d92 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   28d38:	683b      	ldr	r3, [r7, #0]
   28d3a:	685a      	ldr	r2, [r3, #4]
   28d3c:	683b      	ldr	r3, [r7, #0]
   28d3e:	685b      	ldr	r3, [r3, #4]
   28d40:	3b01      	subs	r3, #1
   28d42:	4013      	ands	r3, r2
   28d44:	d11a      	bne.n	28d7c <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   28d46:	2300      	movs	r3, #0
   28d48:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   28d4a:	2302      	movs	r3, #2
   28d4c:	60bb      	str	r3, [r7, #8]
   28d4e:	e005      	b.n	28d5c <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   28d50:	68fb      	ldr	r3, [r7, #12]
   28d52:	3301      	adds	r3, #1
   28d54:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   28d56:	68bb      	ldr	r3, [r7, #8]
   28d58:	005b      	lsls	r3, r3, #1
   28d5a:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   28d5c:	683b      	ldr	r3, [r7, #0]
   28d5e:	685a      	ldr	r2, [r3, #4]
   28d60:	68bb      	ldr	r3, [r7, #8]
   28d62:	429a      	cmp	r2, r3
   28d64:	d8f4      	bhi.n	28d50 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   28d66:	68fb      	ldr	r3, [r7, #12]
   28d68:	021b      	lsls	r3, r3, #8
   28d6a:	693a      	ldr	r2, [r7, #16]
   28d6c:	4313      	orrs	r3, r2
   28d6e:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   28d70:	697b      	ldr	r3, [r7, #20]
   28d72:	2280      	movs	r2, #128	; 0x80
   28d74:	0352      	lsls	r2, r2, #13
   28d76:	4313      	orrs	r3, r2
   28d78:	617b      	str	r3, [r7, #20]
   28d7a:	e00a      	b.n	28d92 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   28d7c:	683b      	ldr	r3, [r7, #0]
   28d7e:	685b      	ldr	r3, [r3, #4]
   28d80:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   28d82:	693a      	ldr	r2, [r7, #16]
   28d84:	4313      	orrs	r3, r2
   28d86:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   28d88:	697b      	ldr	r3, [r7, #20]
   28d8a:	2280      	movs	r2, #128	; 0x80
   28d8c:	0292      	lsls	r2, r2, #10
   28d8e:	4313      	orrs	r3, r2
   28d90:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   28d92:	683b      	ldr	r3, [r7, #0]
   28d94:	7a1b      	ldrb	r3, [r3, #8]
   28d96:	2b00      	cmp	r3, #0
   28d98:	d004      	beq.n	28da4 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   28d9a:	697b      	ldr	r3, [r7, #20]
   28d9c:	2280      	movs	r2, #128	; 0x80
   28d9e:	0392      	lsls	r2, r2, #14
   28da0:	4313      	orrs	r3, r2
   28da2:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   28da4:	46c0      	nop			; (mov r8, r8)
   28da6:	4b13      	ldr	r3, [pc, #76]	; (28df4 <system_gclk_gen_set_config+0x110>)
   28da8:	4798      	blx	r3
   28daa:	1e03      	subs	r3, r0, #0
   28dac:	d1fb      	bne.n	28da6 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   28dae:	4b12      	ldr	r3, [pc, #72]	; (28df8 <system_gclk_gen_set_config+0x114>)
   28db0:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   28db2:	4a12      	ldr	r2, [pc, #72]	; (28dfc <system_gclk_gen_set_config+0x118>)
   28db4:	1dfb      	adds	r3, r7, #7
   28db6:	781b      	ldrb	r3, [r3, #0]
   28db8:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   28dba:	46c0      	nop			; (mov r8, r8)
   28dbc:	4b0d      	ldr	r3, [pc, #52]	; (28df4 <system_gclk_gen_set_config+0x110>)
   28dbe:	4798      	blx	r3
   28dc0:	1e03      	subs	r3, r0, #0
   28dc2:	d1fb      	bne.n	28dbc <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   28dc4:	4b0e      	ldr	r3, [pc, #56]	; (28e00 <system_gclk_gen_set_config+0x11c>)
   28dc6:	693a      	ldr	r2, [r7, #16]
   28dc8:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   28dca:	46c0      	nop			; (mov r8, r8)
   28dcc:	4b09      	ldr	r3, [pc, #36]	; (28df4 <system_gclk_gen_set_config+0x110>)
   28dce:	4798      	blx	r3
   28dd0:	1e03      	subs	r3, r0, #0
   28dd2:	d1fb      	bne.n	28dcc <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   28dd4:	4b0a      	ldr	r3, [pc, #40]	; (28e00 <system_gclk_gen_set_config+0x11c>)
   28dd6:	4a0a      	ldr	r2, [pc, #40]	; (28e00 <system_gclk_gen_set_config+0x11c>)
   28dd8:	6851      	ldr	r1, [r2, #4]
   28dda:	2280      	movs	r2, #128	; 0x80
   28ddc:	0252      	lsls	r2, r2, #9
   28dde:	4011      	ands	r1, r2
   28de0:	697a      	ldr	r2, [r7, #20]
   28de2:	430a      	orrs	r2, r1
   28de4:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   28de6:	4b07      	ldr	r3, [pc, #28]	; (28e04 <system_gclk_gen_set_config+0x120>)
   28de8:	4798      	blx	r3
}
   28dea:	46c0      	nop			; (mov r8, r8)
   28dec:	46bd      	mov	sp, r7
   28dee:	b006      	add	sp, #24
   28df0:	bd80      	pop	{r7, pc}
   28df2:	46c0      	nop			; (mov r8, r8)
   28df4:	00028c95 	.word	0x00028c95
   28df8:	00028c6d 	.word	0x00028c6d
   28dfc:	40000c08 	.word	0x40000c08
   28e00:	40000c00 	.word	0x40000c00
   28e04:	00028c81 	.word	0x00028c81

00028e08 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   28e08:	b580      	push	{r7, lr}
   28e0a:	b082      	sub	sp, #8
   28e0c:	af00      	add	r7, sp, #0
   28e0e:	0002      	movs	r2, r0
   28e10:	1dfb      	adds	r3, r7, #7
   28e12:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   28e14:	46c0      	nop			; (mov r8, r8)
   28e16:	4b0e      	ldr	r3, [pc, #56]	; (28e50 <system_gclk_gen_enable+0x48>)
   28e18:	4798      	blx	r3
   28e1a:	1e03      	subs	r3, r0, #0
   28e1c:	d1fb      	bne.n	28e16 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   28e1e:	4b0d      	ldr	r3, [pc, #52]	; (28e54 <system_gclk_gen_enable+0x4c>)
   28e20:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   28e22:	4a0d      	ldr	r2, [pc, #52]	; (28e58 <system_gclk_gen_enable+0x50>)
   28e24:	1dfb      	adds	r3, r7, #7
   28e26:	781b      	ldrb	r3, [r3, #0]
   28e28:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   28e2a:	46c0      	nop			; (mov r8, r8)
   28e2c:	4b08      	ldr	r3, [pc, #32]	; (28e50 <system_gclk_gen_enable+0x48>)
   28e2e:	4798      	blx	r3
   28e30:	1e03      	subs	r3, r0, #0
   28e32:	d1fb      	bne.n	28e2c <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   28e34:	4b09      	ldr	r3, [pc, #36]	; (28e5c <system_gclk_gen_enable+0x54>)
   28e36:	4a09      	ldr	r2, [pc, #36]	; (28e5c <system_gclk_gen_enable+0x54>)
   28e38:	6852      	ldr	r2, [r2, #4]
   28e3a:	2180      	movs	r1, #128	; 0x80
   28e3c:	0249      	lsls	r1, r1, #9
   28e3e:	430a      	orrs	r2, r1
   28e40:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   28e42:	4b07      	ldr	r3, [pc, #28]	; (28e60 <system_gclk_gen_enable+0x58>)
   28e44:	4798      	blx	r3
}
   28e46:	46c0      	nop			; (mov r8, r8)
   28e48:	46bd      	mov	sp, r7
   28e4a:	b002      	add	sp, #8
   28e4c:	bd80      	pop	{r7, pc}
   28e4e:	46c0      	nop			; (mov r8, r8)
   28e50:	00028c95 	.word	0x00028c95
   28e54:	00028c6d 	.word	0x00028c6d
   28e58:	40000c04 	.word	0x40000c04
   28e5c:	40000c00 	.word	0x40000c00
   28e60:	00028c81 	.word	0x00028c81

00028e64 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   28e64:	b580      	push	{r7, lr}
   28e66:	b086      	sub	sp, #24
   28e68:	af00      	add	r7, sp, #0
   28e6a:	0002      	movs	r2, r0
   28e6c:	1dfb      	adds	r3, r7, #7
   28e6e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   28e70:	46c0      	nop			; (mov r8, r8)
   28e72:	4b2a      	ldr	r3, [pc, #168]	; (28f1c <system_gclk_gen_get_hz+0xb8>)
   28e74:	4798      	blx	r3
   28e76:	1e03      	subs	r3, r0, #0
   28e78:	d1fb      	bne.n	28e72 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   28e7a:	4b29      	ldr	r3, [pc, #164]	; (28f20 <system_gclk_gen_get_hz+0xbc>)
   28e7c:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   28e7e:	4a29      	ldr	r2, [pc, #164]	; (28f24 <system_gclk_gen_get_hz+0xc0>)
   28e80:	1dfb      	adds	r3, r7, #7
   28e82:	781b      	ldrb	r3, [r3, #0]
   28e84:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   28e86:	46c0      	nop			; (mov r8, r8)
   28e88:	4b24      	ldr	r3, [pc, #144]	; (28f1c <system_gclk_gen_get_hz+0xb8>)
   28e8a:	4798      	blx	r3
   28e8c:	1e03      	subs	r3, r0, #0
   28e8e:	d1fb      	bne.n	28e88 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   28e90:	4b25      	ldr	r3, [pc, #148]	; (28f28 <system_gclk_gen_get_hz+0xc4>)
   28e92:	685b      	ldr	r3, [r3, #4]
   28e94:	04db      	lsls	r3, r3, #19
   28e96:	0edb      	lsrs	r3, r3, #27
   28e98:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   28e9a:	0018      	movs	r0, r3
   28e9c:	4b23      	ldr	r3, [pc, #140]	; (28f2c <system_gclk_gen_get_hz+0xc8>)
   28e9e:	4798      	blx	r3
   28ea0:	0003      	movs	r3, r0
   28ea2:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   28ea4:	4a1f      	ldr	r2, [pc, #124]	; (28f24 <system_gclk_gen_get_hz+0xc0>)
   28ea6:	1dfb      	adds	r3, r7, #7
   28ea8:	781b      	ldrb	r3, [r3, #0]
   28eaa:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   28eac:	4b1e      	ldr	r3, [pc, #120]	; (28f28 <system_gclk_gen_get_hz+0xc4>)
   28eae:	685b      	ldr	r3, [r3, #4]
   28eb0:	02db      	lsls	r3, r3, #11
   28eb2:	0fdb      	lsrs	r3, r3, #31
   28eb4:	b2da      	uxtb	r2, r3
   28eb6:	2313      	movs	r3, #19
   28eb8:	18fb      	adds	r3, r7, r3
   28eba:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   28ebc:	4a1c      	ldr	r2, [pc, #112]	; (28f30 <system_gclk_gen_get_hz+0xcc>)
   28ebe:	1dfb      	adds	r3, r7, #7
   28ec0:	781b      	ldrb	r3, [r3, #0]
   28ec2:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   28ec4:	46c0      	nop			; (mov r8, r8)
   28ec6:	4b15      	ldr	r3, [pc, #84]	; (28f1c <system_gclk_gen_get_hz+0xb8>)
   28ec8:	4798      	blx	r3
   28eca:	1e03      	subs	r3, r0, #0
   28ecc:	d1fb      	bne.n	28ec6 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   28ece:	4b16      	ldr	r3, [pc, #88]	; (28f28 <system_gclk_gen_get_hz+0xc4>)
   28ed0:	689b      	ldr	r3, [r3, #8]
   28ed2:	021b      	lsls	r3, r3, #8
   28ed4:	0c1b      	lsrs	r3, r3, #16
   28ed6:	b29b      	uxth	r3, r3
   28ed8:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   28eda:	4b16      	ldr	r3, [pc, #88]	; (28f34 <system_gclk_gen_get_hz+0xd0>)
   28edc:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   28ede:	2313      	movs	r3, #19
   28ee0:	18fb      	adds	r3, r7, r3
   28ee2:	781b      	ldrb	r3, [r3, #0]
   28ee4:	2b00      	cmp	r3, #0
   28ee6:	d109      	bne.n	28efc <system_gclk_gen_get_hz+0x98>
   28ee8:	68fb      	ldr	r3, [r7, #12]
   28eea:	2b01      	cmp	r3, #1
   28eec:	d906      	bls.n	28efc <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   28eee:	4b12      	ldr	r3, [pc, #72]	; (28f38 <system_gclk_gen_get_hz+0xd4>)
   28ef0:	68f9      	ldr	r1, [r7, #12]
   28ef2:	6978      	ldr	r0, [r7, #20]
   28ef4:	4798      	blx	r3
   28ef6:	0003      	movs	r3, r0
   28ef8:	617b      	str	r3, [r7, #20]
   28efa:	e00a      	b.n	28f12 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   28efc:	2313      	movs	r3, #19
   28efe:	18fb      	adds	r3, r7, r3
   28f00:	781b      	ldrb	r3, [r3, #0]
   28f02:	2b00      	cmp	r3, #0
   28f04:	d005      	beq.n	28f12 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   28f06:	68fb      	ldr	r3, [r7, #12]
   28f08:	3301      	adds	r3, #1
   28f0a:	697a      	ldr	r2, [r7, #20]
   28f0c:	40da      	lsrs	r2, r3
   28f0e:	0013      	movs	r3, r2
   28f10:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   28f12:	697b      	ldr	r3, [r7, #20]
}
   28f14:	0018      	movs	r0, r3
   28f16:	46bd      	mov	sp, r7
   28f18:	b006      	add	sp, #24
   28f1a:	bd80      	pop	{r7, pc}
   28f1c:	00028c95 	.word	0x00028c95
   28f20:	00028c6d 	.word	0x00028c6d
   28f24:	40000c04 	.word	0x40000c04
   28f28:	40000c00 	.word	0x40000c00
   28f2c:	000285c5 	.word	0x000285c5
   28f30:	40000c08 	.word	0x40000c08
   28f34:	00028c81 	.word	0x00028c81
   28f38:	00031b25 	.word	0x00031b25

00028f3c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   28f3c:	b580      	push	{r7, lr}
   28f3e:	b084      	sub	sp, #16
   28f40:	af00      	add	r7, sp, #0
   28f42:	0002      	movs	r2, r0
   28f44:	6039      	str	r1, [r7, #0]
   28f46:	1dfb      	adds	r3, r7, #7
   28f48:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   28f4a:	1dfb      	adds	r3, r7, #7
   28f4c:	781b      	ldrb	r3, [r3, #0]
   28f4e:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   28f50:	683b      	ldr	r3, [r7, #0]
   28f52:	781b      	ldrb	r3, [r3, #0]
   28f54:	021b      	lsls	r3, r3, #8
   28f56:	001a      	movs	r2, r3
   28f58:	68fb      	ldr	r3, [r7, #12]
   28f5a:	4313      	orrs	r3, r2
   28f5c:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   28f5e:	1dfb      	adds	r3, r7, #7
   28f60:	781b      	ldrb	r3, [r3, #0]
   28f62:	0018      	movs	r0, r3
   28f64:	4b04      	ldr	r3, [pc, #16]	; (28f78 <system_gclk_chan_set_config+0x3c>)
   28f66:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   28f68:	4b04      	ldr	r3, [pc, #16]	; (28f7c <system_gclk_chan_set_config+0x40>)
   28f6a:	68fa      	ldr	r2, [r7, #12]
   28f6c:	b292      	uxth	r2, r2
   28f6e:	805a      	strh	r2, [r3, #2]
}
   28f70:	46c0      	nop			; (mov r8, r8)
   28f72:	46bd      	mov	sp, r7
   28f74:	b004      	add	sp, #16
   28f76:	bd80      	pop	{r7, pc}
   28f78:	00028fc9 	.word	0x00028fc9
   28f7c:	40000c00 	.word	0x40000c00

00028f80 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   28f80:	b580      	push	{r7, lr}
   28f82:	b082      	sub	sp, #8
   28f84:	af00      	add	r7, sp, #0
   28f86:	0002      	movs	r2, r0
   28f88:	1dfb      	adds	r3, r7, #7
   28f8a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   28f8c:	4b0a      	ldr	r3, [pc, #40]	; (28fb8 <system_gclk_chan_enable+0x38>)
   28f8e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   28f90:	4a0a      	ldr	r2, [pc, #40]	; (28fbc <system_gclk_chan_enable+0x3c>)
   28f92:	1dfb      	adds	r3, r7, #7
   28f94:	781b      	ldrb	r3, [r3, #0]
   28f96:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   28f98:	4909      	ldr	r1, [pc, #36]	; (28fc0 <system_gclk_chan_enable+0x40>)
   28f9a:	4b09      	ldr	r3, [pc, #36]	; (28fc0 <system_gclk_chan_enable+0x40>)
   28f9c:	885b      	ldrh	r3, [r3, #2]
   28f9e:	b29b      	uxth	r3, r3
   28fa0:	2280      	movs	r2, #128	; 0x80
   28fa2:	01d2      	lsls	r2, r2, #7
   28fa4:	4313      	orrs	r3, r2
   28fa6:	b29b      	uxth	r3, r3
   28fa8:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   28faa:	4b06      	ldr	r3, [pc, #24]	; (28fc4 <system_gclk_chan_enable+0x44>)
   28fac:	4798      	blx	r3
}
   28fae:	46c0      	nop			; (mov r8, r8)
   28fb0:	46bd      	mov	sp, r7
   28fb2:	b002      	add	sp, #8
   28fb4:	bd80      	pop	{r7, pc}
   28fb6:	46c0      	nop			; (mov r8, r8)
   28fb8:	00028c6d 	.word	0x00028c6d
   28fbc:	40000c02 	.word	0x40000c02
   28fc0:	40000c00 	.word	0x40000c00
   28fc4:	00028c81 	.word	0x00028c81

00028fc8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   28fc8:	b580      	push	{r7, lr}
   28fca:	b084      	sub	sp, #16
   28fcc:	af00      	add	r7, sp, #0
   28fce:	0002      	movs	r2, r0
   28fd0:	1dfb      	adds	r3, r7, #7
   28fd2:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   28fd4:	4b1c      	ldr	r3, [pc, #112]	; (29048 <system_gclk_chan_disable+0x80>)
   28fd6:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   28fd8:	4a1c      	ldr	r2, [pc, #112]	; (2904c <system_gclk_chan_disable+0x84>)
   28fda:	1dfb      	adds	r3, r7, #7
   28fdc:	781b      	ldrb	r3, [r3, #0]
   28fde:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   28fe0:	4b1b      	ldr	r3, [pc, #108]	; (29050 <system_gclk_chan_disable+0x88>)
   28fe2:	885b      	ldrh	r3, [r3, #2]
   28fe4:	051b      	lsls	r3, r3, #20
   28fe6:	0f1b      	lsrs	r3, r3, #28
   28fe8:	b2db      	uxtb	r3, r3
   28fea:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   28fec:	4a18      	ldr	r2, [pc, #96]	; (29050 <system_gclk_chan_disable+0x88>)
   28fee:	8853      	ldrh	r3, [r2, #2]
   28ff0:	4918      	ldr	r1, [pc, #96]	; (29054 <system_gclk_chan_disable+0x8c>)
   28ff2:	400b      	ands	r3, r1
   28ff4:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   28ff6:	4a16      	ldr	r2, [pc, #88]	; (29050 <system_gclk_chan_disable+0x88>)
   28ff8:	4b15      	ldr	r3, [pc, #84]	; (29050 <system_gclk_chan_disable+0x88>)
   28ffa:	885b      	ldrh	r3, [r3, #2]
   28ffc:	b29b      	uxth	r3, r3
   28ffe:	4916      	ldr	r1, [pc, #88]	; (29058 <system_gclk_chan_disable+0x90>)
   29000:	400b      	ands	r3, r1
   29002:	b29b      	uxth	r3, r3
   29004:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   29006:	46c0      	nop			; (mov r8, r8)
   29008:	4b11      	ldr	r3, [pc, #68]	; (29050 <system_gclk_chan_disable+0x88>)
   2900a:	885b      	ldrh	r3, [r3, #2]
   2900c:	b29b      	uxth	r3, r3
   2900e:	001a      	movs	r2, r3
   29010:	2380      	movs	r3, #128	; 0x80
   29012:	01db      	lsls	r3, r3, #7
   29014:	4013      	ands	r3, r2
   29016:	d1f7      	bne.n	29008 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   29018:	4a0d      	ldr	r2, [pc, #52]	; (29050 <system_gclk_chan_disable+0x88>)
   2901a:	68fb      	ldr	r3, [r7, #12]
   2901c:	b2db      	uxtb	r3, r3
   2901e:	1c19      	adds	r1, r3, #0
   29020:	230f      	movs	r3, #15
   29022:	400b      	ands	r3, r1
   29024:	b2d9      	uxtb	r1, r3
   29026:	8853      	ldrh	r3, [r2, #2]
   29028:	1c08      	adds	r0, r1, #0
   2902a:	210f      	movs	r1, #15
   2902c:	4001      	ands	r1, r0
   2902e:	0208      	lsls	r0, r1, #8
   29030:	4908      	ldr	r1, [pc, #32]	; (29054 <system_gclk_chan_disable+0x8c>)
   29032:	400b      	ands	r3, r1
   29034:	1c19      	adds	r1, r3, #0
   29036:	1c03      	adds	r3, r0, #0
   29038:	430b      	orrs	r3, r1
   2903a:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   2903c:	4b07      	ldr	r3, [pc, #28]	; (2905c <system_gclk_chan_disable+0x94>)
   2903e:	4798      	blx	r3
}
   29040:	46c0      	nop			; (mov r8, r8)
   29042:	46bd      	mov	sp, r7
   29044:	b004      	add	sp, #16
   29046:	bd80      	pop	{r7, pc}
   29048:	00028c6d 	.word	0x00028c6d
   2904c:	40000c02 	.word	0x40000c02
   29050:	40000c00 	.word	0x40000c00
   29054:	fffff0ff 	.word	0xfffff0ff
   29058:	ffffbfff 	.word	0xffffbfff
   2905c:	00028c81 	.word	0x00028c81

00029060 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   29060:	b580      	push	{r7, lr}
   29062:	b084      	sub	sp, #16
   29064:	af00      	add	r7, sp, #0
   29066:	0002      	movs	r2, r0
   29068:	1dfb      	adds	r3, r7, #7
   2906a:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   2906c:	4b0d      	ldr	r3, [pc, #52]	; (290a4 <system_gclk_chan_get_hz+0x44>)
   2906e:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   29070:	4a0d      	ldr	r2, [pc, #52]	; (290a8 <system_gclk_chan_get_hz+0x48>)
   29072:	1dfb      	adds	r3, r7, #7
   29074:	781b      	ldrb	r3, [r3, #0]
   29076:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   29078:	4b0c      	ldr	r3, [pc, #48]	; (290ac <system_gclk_chan_get_hz+0x4c>)
   2907a:	885b      	ldrh	r3, [r3, #2]
   2907c:	051b      	lsls	r3, r3, #20
   2907e:	0f1b      	lsrs	r3, r3, #28
   29080:	b2da      	uxtb	r2, r3
   29082:	230f      	movs	r3, #15
   29084:	18fb      	adds	r3, r7, r3
   29086:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   29088:	4b09      	ldr	r3, [pc, #36]	; (290b0 <system_gclk_chan_get_hz+0x50>)
   2908a:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   2908c:	230f      	movs	r3, #15
   2908e:	18fb      	adds	r3, r7, r3
   29090:	781b      	ldrb	r3, [r3, #0]
   29092:	0018      	movs	r0, r3
   29094:	4b07      	ldr	r3, [pc, #28]	; (290b4 <system_gclk_chan_get_hz+0x54>)
   29096:	4798      	blx	r3
   29098:	0003      	movs	r3, r0
}
   2909a:	0018      	movs	r0, r3
   2909c:	46bd      	mov	sp, r7
   2909e:	b004      	add	sp, #16
   290a0:	bd80      	pop	{r7, pc}
   290a2:	46c0      	nop			; (mov r8, r8)
   290a4:	00028c6d 	.word	0x00028c6d
   290a8:	40000c02 	.word	0x40000c02
   290ac:	40000c00 	.word	0x40000c00
   290b0:	00028c81 	.word	0x00028c81
   290b4:	00028e65 	.word	0x00028e65

000290b8 <system_interrupt_clear_pending>:
 * \retval STATUS_OK           If no error was detected
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
   290b8:	b580      	push	{r7, lr}
   290ba:	b084      	sub	sp, #16
   290bc:	af00      	add	r7, sp, #0
   290be:	0002      	movs	r2, r0
   290c0:	1dfb      	adds	r3, r7, #7
   290c2:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_OK;
   290c4:	230f      	movs	r3, #15
   290c6:	18fb      	adds	r3, r7, r3
   290c8:	2200      	movs	r2, #0
   290ca:	701a      	strb	r2, [r3, #0]

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
   290cc:	1dfb      	adds	r3, r7, #7
   290ce:	781b      	ldrb	r3, [r3, #0]
   290d0:	2b7f      	cmp	r3, #127	; 0x7f
   290d2:	d80b      	bhi.n	290ec <system_interrupt_clear_pending+0x34>
		NVIC->ICPR[0] = (1 << vector);
   290d4:	4a13      	ldr	r2, [pc, #76]	; (29124 <system_interrupt_clear_pending+0x6c>)
   290d6:	1dfb      	adds	r3, r7, #7
   290d8:	781b      	ldrb	r3, [r3, #0]
   290da:	b25b      	sxtb	r3, r3
   290dc:	2101      	movs	r1, #1
   290de:	4099      	lsls	r1, r3
   290e0:	000b      	movs	r3, r1
   290e2:	0019      	movs	r1, r3
   290e4:	23c0      	movs	r3, #192	; 0xc0
   290e6:	005b      	lsls	r3, r3, #1
   290e8:	50d1      	str	r1, [r2, r3]
   290ea:	e014      	b.n	29116 <system_interrupt_clear_pending+0x5e>
	} else if (vector == SYSTEM_INTERRUPT_NON_MASKABLE) {
   290ec:	1dfb      	adds	r3, r7, #7
   290ee:	781b      	ldrb	r3, [r3, #0]
   290f0:	b25b      	sxtb	r3, r3
   290f2:	330e      	adds	r3, #14
   290f4:	d101      	bne.n	290fa <system_interrupt_clear_pending+0x42>
		/* Note: Clearing of NMI pending interrupts does not make sense and is
		 * not supported by the device, as it has the highest priority and will
		 * always be executed at the moment it is set */
		return STATUS_ERR_INVALID_ARG;
   290f6:	2317      	movs	r3, #23
   290f8:	e010      	b.n	2911c <system_interrupt_clear_pending+0x64>
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
   290fa:	1dfb      	adds	r3, r7, #7
   290fc:	781b      	ldrb	r3, [r3, #0]
   290fe:	b25b      	sxtb	r3, r3
   29100:	3301      	adds	r3, #1
   29102:	d104      	bne.n	2910e <system_interrupt_clear_pending+0x56>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
   29104:	4b08      	ldr	r3, [pc, #32]	; (29128 <system_interrupt_clear_pending+0x70>)
   29106:	2280      	movs	r2, #128	; 0x80
   29108:	0492      	lsls	r2, r2, #18
   2910a:	605a      	str	r2, [r3, #4]
   2910c:	e003      	b.n	29116 <system_interrupt_clear_pending+0x5e>
	} else {
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
   2910e:	230f      	movs	r3, #15
   29110:	18fb      	adds	r3, r7, r3
   29112:	2217      	movs	r2, #23
   29114:	701a      	strb	r2, [r3, #0]
	}

	return status;
   29116:	230f      	movs	r3, #15
   29118:	18fb      	adds	r3, r7, r3
   2911a:	781b      	ldrb	r3, [r3, #0]
}
   2911c:	0018      	movs	r0, r3
   2911e:	46bd      	mov	sp, r7
   29120:	b004      	add	sp, #16
   29122:	bd80      	pop	{r7, pc}
   29124:	e000e100 	.word	0xe000e100
   29128:	e000ed00 	.word	0xe000ed00

0002912c <system_pinmux_get_group_from_gpio_pin>:
{
   2912c:	b580      	push	{r7, lr}
   2912e:	b084      	sub	sp, #16
   29130:	af00      	add	r7, sp, #0
   29132:	0002      	movs	r2, r0
   29134:	1dfb      	adds	r3, r7, #7
   29136:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   29138:	230f      	movs	r3, #15
   2913a:	18fb      	adds	r3, r7, r3
   2913c:	1dfa      	adds	r2, r7, #7
   2913e:	7812      	ldrb	r2, [r2, #0]
   29140:	09d2      	lsrs	r2, r2, #7
   29142:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   29144:	230e      	movs	r3, #14
   29146:	18fb      	adds	r3, r7, r3
   29148:	1dfa      	adds	r2, r7, #7
   2914a:	7812      	ldrb	r2, [r2, #0]
   2914c:	0952      	lsrs	r2, r2, #5
   2914e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   29150:	4b0d      	ldr	r3, [pc, #52]	; (29188 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   29152:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   29154:	230f      	movs	r3, #15
   29156:	18fb      	adds	r3, r7, r3
   29158:	781b      	ldrb	r3, [r3, #0]
   2915a:	2b00      	cmp	r3, #0
   2915c:	d10f      	bne.n	2917e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   2915e:	230f      	movs	r3, #15
   29160:	18fb      	adds	r3, r7, r3
   29162:	781b      	ldrb	r3, [r3, #0]
   29164:	009b      	lsls	r3, r3, #2
   29166:	2210      	movs	r2, #16
   29168:	4694      	mov	ip, r2
   2916a:	44bc      	add	ip, r7
   2916c:	4463      	add	r3, ip
   2916e:	3b08      	subs	r3, #8
   29170:	681a      	ldr	r2, [r3, #0]
   29172:	230e      	movs	r3, #14
   29174:	18fb      	adds	r3, r7, r3
   29176:	781b      	ldrb	r3, [r3, #0]
   29178:	01db      	lsls	r3, r3, #7
   2917a:	18d3      	adds	r3, r2, r3
   2917c:	e000      	b.n	29180 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2917e:	2300      	movs	r3, #0
}
   29180:	0018      	movs	r0, r3
   29182:	46bd      	mov	sp, r7
   29184:	b004      	add	sp, #16
   29186:	bd80      	pop	{r7, pc}
   29188:	41004400 	.word	0x41004400

0002918c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   2918c:	b580      	push	{r7, lr}
   2918e:	b088      	sub	sp, #32
   29190:	af00      	add	r7, sp, #0
   29192:	60f8      	str	r0, [r7, #12]
   29194:	60b9      	str	r1, [r7, #8]
   29196:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   29198:	2300      	movs	r3, #0
   2919a:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   2919c:	687b      	ldr	r3, [r7, #4]
   2919e:	78db      	ldrb	r3, [r3, #3]
   291a0:	2201      	movs	r2, #1
   291a2:	4053      	eors	r3, r2
   291a4:	b2db      	uxtb	r3, r3
   291a6:	2b00      	cmp	r3, #0
   291a8:	d035      	beq.n	29216 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   291aa:	687b      	ldr	r3, [r7, #4]
   291ac:	781b      	ldrb	r3, [r3, #0]
   291ae:	2b80      	cmp	r3, #128	; 0x80
   291b0:	d00b      	beq.n	291ca <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   291b2:	69fb      	ldr	r3, [r7, #28]
   291b4:	2280      	movs	r2, #128	; 0x80
   291b6:	0252      	lsls	r2, r2, #9
   291b8:	4313      	orrs	r3, r2
   291ba:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   291bc:	687b      	ldr	r3, [r7, #4]
   291be:	781b      	ldrb	r3, [r3, #0]
   291c0:	061b      	lsls	r3, r3, #24
   291c2:	001a      	movs	r2, r3
   291c4:	69fb      	ldr	r3, [r7, #28]
   291c6:	4313      	orrs	r3, r2
   291c8:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   291ca:	687b      	ldr	r3, [r7, #4]
   291cc:	785b      	ldrb	r3, [r3, #1]
   291ce:	2b00      	cmp	r3, #0
   291d0:	d003      	beq.n	291da <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   291d2:	687b      	ldr	r3, [r7, #4]
   291d4:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   291d6:	2b02      	cmp	r3, #2
   291d8:	d110      	bne.n	291fc <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   291da:	69fb      	ldr	r3, [r7, #28]
   291dc:	2280      	movs	r2, #128	; 0x80
   291de:	0292      	lsls	r2, r2, #10
   291e0:	4313      	orrs	r3, r2
   291e2:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   291e4:	687b      	ldr	r3, [r7, #4]
   291e6:	789b      	ldrb	r3, [r3, #2]
   291e8:	2b00      	cmp	r3, #0
   291ea:	d004      	beq.n	291f6 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   291ec:	69fb      	ldr	r3, [r7, #28]
   291ee:	2280      	movs	r2, #128	; 0x80
   291f0:	02d2      	lsls	r2, r2, #11
   291f2:	4313      	orrs	r3, r2
   291f4:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   291f6:	68fb      	ldr	r3, [r7, #12]
   291f8:	68ba      	ldr	r2, [r7, #8]
   291fa:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   291fc:	687b      	ldr	r3, [r7, #4]
   291fe:	785b      	ldrb	r3, [r3, #1]
   29200:	2b01      	cmp	r3, #1
   29202:	d003      	beq.n	2920c <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   29204:	687b      	ldr	r3, [r7, #4]
   29206:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   29208:	2b02      	cmp	r3, #2
   2920a:	d107      	bne.n	2921c <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   2920c:	69fb      	ldr	r3, [r7, #28]
   2920e:	4a22      	ldr	r2, [pc, #136]	; (29298 <_system_pinmux_config+0x10c>)
   29210:	4013      	ands	r3, r2
   29212:	61fb      	str	r3, [r7, #28]
   29214:	e002      	b.n	2921c <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   29216:	68fb      	ldr	r3, [r7, #12]
   29218:	68ba      	ldr	r2, [r7, #8]
   2921a:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   2921c:	68bb      	ldr	r3, [r7, #8]
   2921e:	041b      	lsls	r3, r3, #16
   29220:	0c1b      	lsrs	r3, r3, #16
   29222:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   29224:	68bb      	ldr	r3, [r7, #8]
   29226:	0c1b      	lsrs	r3, r3, #16
   29228:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2922a:	69ba      	ldr	r2, [r7, #24]
   2922c:	69fb      	ldr	r3, [r7, #28]
   2922e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   29230:	22a0      	movs	r2, #160	; 0xa0
   29232:	05d2      	lsls	r2, r2, #23
   29234:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   29236:	68fb      	ldr	r3, [r7, #12]
   29238:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2923a:	697a      	ldr	r2, [r7, #20]
   2923c:	69fb      	ldr	r3, [r7, #28]
   2923e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   29240:	22d0      	movs	r2, #208	; 0xd0
   29242:	0612      	lsls	r2, r2, #24
   29244:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   29246:	68fb      	ldr	r3, [r7, #12]
   29248:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   2924a:	687b      	ldr	r3, [r7, #4]
   2924c:	78db      	ldrb	r3, [r3, #3]
   2924e:	2201      	movs	r2, #1
   29250:	4053      	eors	r3, r2
   29252:	b2db      	uxtb	r3, r3
   29254:	2b00      	cmp	r3, #0
   29256:	d01a      	beq.n	2928e <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   29258:	69fa      	ldr	r2, [r7, #28]
   2925a:	2380      	movs	r3, #128	; 0x80
   2925c:	02db      	lsls	r3, r3, #11
   2925e:	4013      	ands	r3, r2
   29260:	d00a      	beq.n	29278 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   29262:	687b      	ldr	r3, [r7, #4]
   29264:	789b      	ldrb	r3, [r3, #2]
   29266:	2b01      	cmp	r3, #1
   29268:	d103      	bne.n	29272 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   2926a:	68fb      	ldr	r3, [r7, #12]
   2926c:	68ba      	ldr	r2, [r7, #8]
   2926e:	619a      	str	r2, [r3, #24]
   29270:	e002      	b.n	29278 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   29272:	68fb      	ldr	r3, [r7, #12]
   29274:	68ba      	ldr	r2, [r7, #8]
   29276:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   29278:	687b      	ldr	r3, [r7, #4]
   2927a:	785b      	ldrb	r3, [r3, #1]
   2927c:	2b01      	cmp	r3, #1
   2927e:	d003      	beq.n	29288 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   29280:	687b      	ldr	r3, [r7, #4]
   29282:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   29284:	2b02      	cmp	r3, #2
   29286:	d102      	bne.n	2928e <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   29288:	68fb      	ldr	r3, [r7, #12]
   2928a:	68ba      	ldr	r2, [r7, #8]
   2928c:	609a      	str	r2, [r3, #8]
		}
	}
}
   2928e:	46c0      	nop			; (mov r8, r8)
   29290:	46bd      	mov	sp, r7
   29292:	b008      	add	sp, #32
   29294:	bd80      	pop	{r7, pc}
   29296:	46c0      	nop			; (mov r8, r8)
   29298:	fffbffff 	.word	0xfffbffff

0002929c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   2929c:	b580      	push	{r7, lr}
   2929e:	b084      	sub	sp, #16
   292a0:	af00      	add	r7, sp, #0
   292a2:	0002      	movs	r2, r0
   292a4:	6039      	str	r1, [r7, #0]
   292a6:	1dfb      	adds	r3, r7, #7
   292a8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   292aa:	1dfb      	adds	r3, r7, #7
   292ac:	781b      	ldrb	r3, [r3, #0]
   292ae:	0018      	movs	r0, r3
   292b0:	4b0a      	ldr	r3, [pc, #40]	; (292dc <system_pinmux_pin_set_config+0x40>)
   292b2:	4798      	blx	r3
   292b4:	0003      	movs	r3, r0
   292b6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   292b8:	1dfb      	adds	r3, r7, #7
   292ba:	781b      	ldrb	r3, [r3, #0]
   292bc:	221f      	movs	r2, #31
   292be:	4013      	ands	r3, r2
   292c0:	2201      	movs	r2, #1
   292c2:	409a      	lsls	r2, r3
   292c4:	0013      	movs	r3, r2
   292c6:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   292c8:	683a      	ldr	r2, [r7, #0]
   292ca:	68b9      	ldr	r1, [r7, #8]
   292cc:	68fb      	ldr	r3, [r7, #12]
   292ce:	0018      	movs	r0, r3
   292d0:	4b03      	ldr	r3, [pc, #12]	; (292e0 <system_pinmux_pin_set_config+0x44>)
   292d2:	4798      	blx	r3
}
   292d4:	46c0      	nop			; (mov r8, r8)
   292d6:	46bd      	mov	sp, r7
   292d8:	b004      	add	sp, #16
   292da:	bd80      	pop	{r7, pc}
   292dc:	0002912d 	.word	0x0002912d
   292e0:	0002918d 	.word	0x0002918d

000292e4 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   292e4:	b580      	push	{r7, lr}
   292e6:	af00      	add	r7, sp, #0
	return;
   292e8:	46c0      	nop			; (mov r8, r8)
}
   292ea:	46bd      	mov	sp, r7
   292ec:	bd80      	pop	{r7, pc}
	...

000292f0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   292f0:	b580      	push	{r7, lr}
   292f2:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   292f4:	4b06      	ldr	r3, [pc, #24]	; (29310 <system_init+0x20>)
   292f6:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   292f8:	4b06      	ldr	r3, [pc, #24]	; (29314 <system_init+0x24>)
   292fa:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   292fc:	4b06      	ldr	r3, [pc, #24]	; (29318 <system_init+0x28>)
   292fe:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   29300:	4b06      	ldr	r3, [pc, #24]	; (2931c <system_init+0x2c>)
   29302:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   29304:	4b06      	ldr	r3, [pc, #24]	; (29320 <system_init+0x30>)
   29306:	4798      	blx	r3
}
   29308:	46c0      	nop			; (mov r8, r8)
   2930a:	46bd      	mov	sp, r7
   2930c:	bd80      	pop	{r7, pc}
   2930e:	46c0      	nop			; (mov r8, r8)
   29310:	00028971 	.word	0x00028971
   29314:	00025439 	.word	0x00025439
   29318:	00013011 	.word	0x00013011
   2931c:	00025811 	.word	0x00025811
   29320:	000292e5 	.word	0x000292e5

00029324 <system_gclk_chan_get_config_defaults>:
{
   29324:	b580      	push	{r7, lr}
   29326:	b082      	sub	sp, #8
   29328:	af00      	add	r7, sp, #0
   2932a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2932c:	687b      	ldr	r3, [r7, #4]
   2932e:	2200      	movs	r2, #0
   29330:	701a      	strb	r2, [r3, #0]
}
   29332:	46c0      	nop			; (mov r8, r8)
   29334:	46bd      	mov	sp, r7
   29336:	b002      	add	sp, #8
   29338:	bd80      	pop	{r7, pc}
	...

0002933c <system_apb_clock_set_mask>:
{
   2933c:	b580      	push	{r7, lr}
   2933e:	b082      	sub	sp, #8
   29340:	af00      	add	r7, sp, #0
   29342:	0002      	movs	r2, r0
   29344:	6039      	str	r1, [r7, #0]
   29346:	1dfb      	adds	r3, r7, #7
   29348:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2934a:	1dfb      	adds	r3, r7, #7
   2934c:	781b      	ldrb	r3, [r3, #0]
   2934e:	2b01      	cmp	r3, #1
   29350:	d00a      	beq.n	29368 <system_apb_clock_set_mask+0x2c>
   29352:	2b02      	cmp	r3, #2
   29354:	d00f      	beq.n	29376 <system_apb_clock_set_mask+0x3a>
   29356:	2b00      	cmp	r3, #0
   29358:	d114      	bne.n	29384 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2935a:	4b0e      	ldr	r3, [pc, #56]	; (29394 <system_apb_clock_set_mask+0x58>)
   2935c:	4a0d      	ldr	r2, [pc, #52]	; (29394 <system_apb_clock_set_mask+0x58>)
   2935e:	6991      	ldr	r1, [r2, #24]
   29360:	683a      	ldr	r2, [r7, #0]
   29362:	430a      	orrs	r2, r1
   29364:	619a      	str	r2, [r3, #24]
			break;
   29366:	e00f      	b.n	29388 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   29368:	4b0a      	ldr	r3, [pc, #40]	; (29394 <system_apb_clock_set_mask+0x58>)
   2936a:	4a0a      	ldr	r2, [pc, #40]	; (29394 <system_apb_clock_set_mask+0x58>)
   2936c:	69d1      	ldr	r1, [r2, #28]
   2936e:	683a      	ldr	r2, [r7, #0]
   29370:	430a      	orrs	r2, r1
   29372:	61da      	str	r2, [r3, #28]
			break;
   29374:	e008      	b.n	29388 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   29376:	4b07      	ldr	r3, [pc, #28]	; (29394 <system_apb_clock_set_mask+0x58>)
   29378:	4a06      	ldr	r2, [pc, #24]	; (29394 <system_apb_clock_set_mask+0x58>)
   2937a:	6a11      	ldr	r1, [r2, #32]
   2937c:	683a      	ldr	r2, [r7, #0]
   2937e:	430a      	orrs	r2, r1
   29380:	621a      	str	r2, [r3, #32]
			break;
   29382:	e001      	b.n	29388 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   29384:	2317      	movs	r3, #23
   29386:	e000      	b.n	2938a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   29388:	2300      	movs	r3, #0
}
   2938a:	0018      	movs	r0, r3
   2938c:	46bd      	mov	sp, r7
   2938e:	b002      	add	sp, #8
   29390:	bd80      	pop	{r7, pc}
   29392:	46c0      	nop			; (mov r8, r8)
   29394:	40000400 	.word	0x40000400

00029398 <system_pinmux_get_config_defaults>:
{
   29398:	b580      	push	{r7, lr}
   2939a:	b082      	sub	sp, #8
   2939c:	af00      	add	r7, sp, #0
   2939e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   293a0:	687b      	ldr	r3, [r7, #4]
   293a2:	2280      	movs	r2, #128	; 0x80
   293a4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   293a6:	687b      	ldr	r3, [r7, #4]
   293a8:	2200      	movs	r2, #0
   293aa:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   293ac:	687b      	ldr	r3, [r7, #4]
   293ae:	2201      	movs	r2, #1
   293b0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   293b2:	687b      	ldr	r3, [r7, #4]
   293b4:	2200      	movs	r2, #0
   293b6:	70da      	strb	r2, [r3, #3]
}
   293b8:	46c0      	nop			; (mov r8, r8)
   293ba:	46bd      	mov	sp, r7
   293bc:	b002      	add	sp, #8
   293be:	bd80      	pop	{r7, pc}

000293c0 <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
   293c0:	b580      	push	{r7, lr}
   293c2:	b084      	sub	sp, #16
   293c4:	af00      	add	r7, sp, #0
   293c6:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   293c8:	2300      	movs	r3, #0
   293ca:	60fb      	str	r3, [r7, #12]
   293cc:	e00c      	b.n	293e8 <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
   293ce:	4b0a      	ldr	r3, [pc, #40]	; (293f8 <_tcc_get_inst_index+0x38>)
   293d0:	68fa      	ldr	r2, [r7, #12]
   293d2:	0092      	lsls	r2, r2, #2
   293d4:	58d2      	ldr	r2, [r2, r3]
   293d6:	687b      	ldr	r3, [r7, #4]
   293d8:	429a      	cmp	r2, r3
   293da:	d102      	bne.n	293e2 <_tcc_get_inst_index+0x22>
			return i;
   293dc:	68fb      	ldr	r3, [r7, #12]
   293de:	b2db      	uxtb	r3, r3
   293e0:	e006      	b.n	293f0 <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   293e2:	68fb      	ldr	r3, [r7, #12]
   293e4:	3301      	adds	r3, #1
   293e6:	60fb      	str	r3, [r7, #12]
   293e8:	68fb      	ldr	r3, [r7, #12]
   293ea:	2b02      	cmp	r3, #2
   293ec:	d9ef      	bls.n	293ce <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   293ee:	2300      	movs	r3, #0
}
   293f0:	0018      	movs	r0, r3
   293f2:	46bd      	mov	sp, r7
   293f4:	b004      	add	sp, #16
   293f6:	bd80      	pop	{r7, pc}
   293f8:	00038ff8 	.word	0x00038ff8

000293fc <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
   293fc:	b590      	push	{r4, r7, lr}
   293fe:	b085      	sub	sp, #20
   29400:	af00      	add	r7, sp, #0
   29402:	6078      	str	r0, [r7, #4]
   29404:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   29406:	230f      	movs	r3, #15
   29408:	18fc      	adds	r4, r7, r3
   2940a:	683b      	ldr	r3, [r7, #0]
   2940c:	0018      	movs	r0, r3
   2940e:	4bad      	ldr	r3, [pc, #692]	; (296c4 <tcc_get_config_defaults+0x2c8>)
   29410:	4798      	blx	r3
   29412:	0003      	movs	r3, r0
   29414:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
   29416:	687b      	ldr	r3, [r7, #4]
   29418:	2200      	movs	r2, #0
   2941a:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
   2941c:	230f      	movs	r3, #15
   2941e:	18fb      	adds	r3, r7, r3
   29420:	781a      	ldrb	r2, [r3, #0]
   29422:	4ba9      	ldr	r3, [pc, #676]	; (296c8 <tcc_get_config_defaults+0x2cc>)
   29424:	0092      	lsls	r2, r2, #2
   29426:	58d2      	ldr	r2, [r2, r3]
   29428:	687b      	ldr	r3, [r7, #4]
   2942a:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
   2942c:	687b      	ldr	r3, [r7, #4]
   2942e:	2200      	movs	r2, #0
   29430:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
   29432:	687b      	ldr	r3, [r7, #4]
   29434:	2200      	movs	r2, #0
   29436:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
   29438:	687b      	ldr	r3, [r7, #4]
   2943a:	2200      	movs	r2, #0
   2943c:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
   2943e:	687b      	ldr	r3, [r7, #4]
   29440:	2200      	movs	r2, #0
   29442:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
   29444:	687b      	ldr	r3, [r7, #4]
   29446:	2200      	movs	r2, #0
   29448:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2944a:	687b      	ldr	r3, [r7, #4]
   2944c:	2200      	movs	r2, #0
   2944e:	61da      	str	r2, [r3, #28]
   29450:	687b      	ldr	r3, [r7, #4]
   29452:	2200      	movs	r2, #0
   29454:	621a      	str	r2, [r3, #32]
   29456:	687b      	ldr	r3, [r7, #4]
   29458:	2200      	movs	r2, #0
   2945a:	625a      	str	r2, [r3, #36]	; 0x24
   2945c:	687b      	ldr	r3, [r7, #4]
   2945e:	2200      	movs	r2, #0
   29460:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   29462:	687b      	ldr	r3, [r7, #4]
   29464:	2200      	movs	r2, #0
   29466:	751a      	strb	r2, [r3, #20]
   29468:	687b      	ldr	r3, [r7, #4]
   2946a:	2200      	movs	r2, #0
   2946c:	755a      	strb	r2, [r3, #21]
   2946e:	687b      	ldr	r3, [r7, #4]
   29470:	2200      	movs	r2, #0
   29472:	759a      	strb	r2, [r3, #22]
   29474:	687b      	ldr	r3, [r7, #4]
   29476:	2200      	movs	r2, #0
   29478:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
   2947a:	687b      	ldr	r3, [r7, #4]
   2947c:	2200      	movs	r2, #0
   2947e:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
   29480:	687b      	ldr	r3, [r7, #4]
   29482:	2200      	movs	r2, #0
   29484:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   29486:	687b      	ldr	r3, [r7, #4]
   29488:	2200      	movs	r2, #0
   2948a:	741a      	strb	r2, [r3, #16]
   2948c:	687b      	ldr	r3, [r7, #4]
   2948e:	2200      	movs	r2, #0
   29490:	745a      	strb	r2, [r3, #17]
   29492:	687b      	ldr	r3, [r7, #4]
   29494:	2200      	movs	r2, #0
   29496:	749a      	strb	r2, [r3, #18]
   29498:	687b      	ldr	r3, [r7, #4]
   2949a:	2200      	movs	r2, #0
   2949c:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
   2949e:	687b      	ldr	r3, [r7, #4]
   294a0:	222c      	movs	r2, #44	; 0x2c
   294a2:	2100      	movs	r1, #0
   294a4:	5499      	strb	r1, [r3, r2]
   294a6:	687b      	ldr	r3, [r7, #4]
   294a8:	222d      	movs	r2, #45	; 0x2d
   294aa:	2100      	movs	r1, #0
   294ac:	5499      	strb	r1, [r3, r2]
   294ae:	687b      	ldr	r3, [r7, #4]
   294b0:	222e      	movs	r2, #46	; 0x2e
   294b2:	2100      	movs	r1, #0
   294b4:	5499      	strb	r1, [r3, r2]
   294b6:	687b      	ldr	r3, [r7, #4]
   294b8:	222f      	movs	r2, #47	; 0x2f
   294ba:	2100      	movs	r1, #0
   294bc:	5499      	strb	r1, [r3, r2]
   294be:	687b      	ldr	r3, [r7, #4]
   294c0:	2230      	movs	r2, #48	; 0x30
   294c2:	2100      	movs	r1, #0
   294c4:	5499      	strb	r1, [r3, r2]
   294c6:	687b      	ldr	r3, [r7, #4]
   294c8:	2231      	movs	r2, #49	; 0x31
   294ca:	2100      	movs	r1, #0
   294cc:	5499      	strb	r1, [r3, r2]
   294ce:	687b      	ldr	r3, [r7, #4]
   294d0:	2232      	movs	r2, #50	; 0x32
   294d2:	2100      	movs	r1, #0
   294d4:	5499      	strb	r1, [r3, r2]
   294d6:	687b      	ldr	r3, [r7, #4]
   294d8:	2233      	movs	r2, #51	; 0x33
   294da:	2100      	movs	r1, #0
   294dc:	5499      	strb	r1, [r3, r2]
   294de:	687b      	ldr	r3, [r7, #4]
   294e0:	2234      	movs	r2, #52	; 0x34
   294e2:	2100      	movs	r1, #0
   294e4:	5499      	strb	r1, [r3, r2]
   294e6:	687b      	ldr	r3, [r7, #4]
   294e8:	2235      	movs	r2, #53	; 0x35
   294ea:	2100      	movs	r1, #0
   294ec:	5499      	strb	r1, [r3, r2]
   294ee:	687b      	ldr	r3, [r7, #4]
   294f0:	2236      	movs	r2, #54	; 0x36
   294f2:	2100      	movs	r1, #0
   294f4:	5499      	strb	r1, [r3, r2]
   294f6:	687b      	ldr	r3, [r7, #4]
   294f8:	2237      	movs	r2, #55	; 0x37
   294fa:	2100      	movs	r1, #0
   294fc:	5499      	strb	r1, [r3, r2]
   294fe:	687b      	ldr	r3, [r7, #4]
   29500:	2238      	movs	r2, #56	; 0x38
   29502:	2100      	movs	r1, #0
   29504:	5499      	strb	r1, [r3, r2]
   29506:	687b      	ldr	r3, [r7, #4]
   29508:	2239      	movs	r2, #57	; 0x39
   2950a:	2100      	movs	r1, #0
   2950c:	5499      	strb	r1, [r3, r2]
   2950e:	687b      	ldr	r3, [r7, #4]
   29510:	223a      	movs	r2, #58	; 0x3a
   29512:	2100      	movs	r1, #0
   29514:	5499      	strb	r1, [r3, r2]
   29516:	687b      	ldr	r3, [r7, #4]
   29518:	223b      	movs	r2, #59	; 0x3b
   2951a:	2100      	movs	r1, #0
   2951c:	5499      	strb	r1, [r3, r2]
   2951e:	687b      	ldr	r3, [r7, #4]
   29520:	223c      	movs	r2, #60	; 0x3c
   29522:	2100      	movs	r1, #0
   29524:	5499      	strb	r1, [r3, r2]
   29526:	687b      	ldr	r3, [r7, #4]
   29528:	223d      	movs	r2, #61	; 0x3d
   2952a:	2100      	movs	r1, #0
   2952c:	5499      	strb	r1, [r3, r2]
   2952e:	687b      	ldr	r3, [r7, #4]
   29530:	223e      	movs	r2, #62	; 0x3e
   29532:	2100      	movs	r1, #0
   29534:	5499      	strb	r1, [r3, r2]
   29536:	687b      	ldr	r3, [r7, #4]
   29538:	223f      	movs	r2, #63	; 0x3f
   2953a:	2100      	movs	r1, #0
   2953c:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
   2953e:	687b      	ldr	r3, [r7, #4]
   29540:	2240      	movs	r2, #64	; 0x40
   29542:	2100      	movs	r1, #0
   29544:	5499      	strb	r1, [r3, r2]
   29546:	687b      	ldr	r3, [r7, #4]
   29548:	2241      	movs	r2, #65	; 0x41
   2954a:	2100      	movs	r1, #0
   2954c:	5499      	strb	r1, [r3, r2]
   2954e:	687b      	ldr	r3, [r7, #4]
   29550:	2242      	movs	r2, #66	; 0x42
   29552:	2100      	movs	r1, #0
   29554:	5499      	strb	r1, [r3, r2]
   29556:	687b      	ldr	r3, [r7, #4]
   29558:	2243      	movs	r2, #67	; 0x43
   2955a:	2100      	movs	r1, #0
   2955c:	5499      	strb	r1, [r3, r2]
   2955e:	687b      	ldr	r3, [r7, #4]
   29560:	2244      	movs	r2, #68	; 0x44
   29562:	2100      	movs	r1, #0
   29564:	5499      	strb	r1, [r3, r2]
   29566:	687b      	ldr	r3, [r7, #4]
   29568:	2245      	movs	r2, #69	; 0x45
   2956a:	2100      	movs	r1, #0
   2956c:	5499      	strb	r1, [r3, r2]
   2956e:	687b      	ldr	r3, [r7, #4]
   29570:	2246      	movs	r2, #70	; 0x46
   29572:	2100      	movs	r1, #0
   29574:	5499      	strb	r1, [r3, r2]
   29576:	687b      	ldr	r3, [r7, #4]
   29578:	2247      	movs	r2, #71	; 0x47
   2957a:	2100      	movs	r1, #0
   2957c:	5499      	strb	r1, [r3, r2]
   2957e:	687b      	ldr	r3, [r7, #4]
   29580:	2248      	movs	r2, #72	; 0x48
   29582:	2100      	movs	r1, #0
   29584:	5499      	strb	r1, [r3, r2]
   29586:	687b      	ldr	r3, [r7, #4]
   29588:	2249      	movs	r2, #73	; 0x49
   2958a:	2100      	movs	r1, #0
   2958c:	5499      	strb	r1, [r3, r2]
   2958e:	687b      	ldr	r3, [r7, #4]
   29590:	224a      	movs	r2, #74	; 0x4a
   29592:	2100      	movs	r1, #0
   29594:	5499      	strb	r1, [r3, r2]
   29596:	687b      	ldr	r3, [r7, #4]
   29598:	224b      	movs	r2, #75	; 0x4b
   2959a:	2100      	movs	r1, #0
   2959c:	5499      	strb	r1, [r3, r2]
   2959e:	687b      	ldr	r3, [r7, #4]
   295a0:	224c      	movs	r2, #76	; 0x4c
   295a2:	2100      	movs	r1, #0
   295a4:	5499      	strb	r1, [r3, r2]
   295a6:	687b      	ldr	r3, [r7, #4]
   295a8:	224d      	movs	r2, #77	; 0x4d
   295aa:	2100      	movs	r1, #0
   295ac:	5499      	strb	r1, [r3, r2]
   295ae:	687b      	ldr	r3, [r7, #4]
   295b0:	224e      	movs	r2, #78	; 0x4e
   295b2:	2100      	movs	r1, #0
   295b4:	5499      	strb	r1, [r3, r2]
   295b6:	687b      	ldr	r3, [r7, #4]
   295b8:	224f      	movs	r2, #79	; 0x4f
   295ba:	2100      	movs	r1, #0
   295bc:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
   295be:	687b      	ldr	r3, [r7, #4]
   295c0:	2250      	movs	r2, #80	; 0x50
   295c2:	2100      	movs	r1, #0
   295c4:	5499      	strb	r1, [r3, r2]
   295c6:	687b      	ldr	r3, [r7, #4]
   295c8:	2251      	movs	r2, #81	; 0x51
   295ca:	2100      	movs	r1, #0
   295cc:	5499      	strb	r1, [r3, r2]
   295ce:	687b      	ldr	r3, [r7, #4]
   295d0:	2252      	movs	r2, #82	; 0x52
   295d2:	2100      	movs	r1, #0
   295d4:	5499      	strb	r1, [r3, r2]
   295d6:	687b      	ldr	r3, [r7, #4]
   295d8:	2253      	movs	r2, #83	; 0x53
   295da:	2100      	movs	r1, #0
   295dc:	5499      	strb	r1, [r3, r2]
   295de:	687b      	ldr	r3, [r7, #4]
   295e0:	2254      	movs	r2, #84	; 0x54
   295e2:	2100      	movs	r1, #0
   295e4:	5499      	strb	r1, [r3, r2]
   295e6:	687b      	ldr	r3, [r7, #4]
   295e8:	2255      	movs	r2, #85	; 0x55
   295ea:	2100      	movs	r1, #0
   295ec:	5499      	strb	r1, [r3, r2]
   295ee:	687b      	ldr	r3, [r7, #4]
   295f0:	2256      	movs	r2, #86	; 0x56
   295f2:	2100      	movs	r1, #0
   295f4:	5499      	strb	r1, [r3, r2]
   295f6:	687b      	ldr	r3, [r7, #4]
   295f8:	2257      	movs	r2, #87	; 0x57
   295fa:	2100      	movs	r1, #0
   295fc:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
   295fe:	687b      	ldr	r3, [r7, #4]
   29600:	2298      	movs	r2, #152	; 0x98
   29602:	2100      	movs	r1, #0
   29604:	5499      	strb	r1, [r3, r2]
   29606:	687b      	ldr	r3, [r7, #4]
   29608:	2200      	movs	r2, #0
   2960a:	659a      	str	r2, [r3, #88]	; 0x58
   2960c:	687b      	ldr	r3, [r7, #4]
   2960e:	2200      	movs	r2, #0
   29610:	679a      	str	r2, [r3, #120]	; 0x78
   29612:	687b      	ldr	r3, [r7, #4]
   29614:	2299      	movs	r2, #153	; 0x99
   29616:	2100      	movs	r1, #0
   29618:	5499      	strb	r1, [r3, r2]
   2961a:	687b      	ldr	r3, [r7, #4]
   2961c:	2200      	movs	r2, #0
   2961e:	65da      	str	r2, [r3, #92]	; 0x5c
   29620:	687b      	ldr	r3, [r7, #4]
   29622:	2200      	movs	r2, #0
   29624:	67da      	str	r2, [r3, #124]	; 0x7c
   29626:	687b      	ldr	r3, [r7, #4]
   29628:	229a      	movs	r2, #154	; 0x9a
   2962a:	2100      	movs	r1, #0
   2962c:	5499      	strb	r1, [r3, r2]
   2962e:	687b      	ldr	r3, [r7, #4]
   29630:	2200      	movs	r2, #0
   29632:	661a      	str	r2, [r3, #96]	; 0x60
   29634:	687b      	ldr	r3, [r7, #4]
   29636:	2280      	movs	r2, #128	; 0x80
   29638:	2100      	movs	r1, #0
   2963a:	5099      	str	r1, [r3, r2]
   2963c:	687b      	ldr	r3, [r7, #4]
   2963e:	229b      	movs	r2, #155	; 0x9b
   29640:	2100      	movs	r1, #0
   29642:	5499      	strb	r1, [r3, r2]
   29644:	687b      	ldr	r3, [r7, #4]
   29646:	2200      	movs	r2, #0
   29648:	665a      	str	r2, [r3, #100]	; 0x64
   2964a:	687b      	ldr	r3, [r7, #4]
   2964c:	2284      	movs	r2, #132	; 0x84
   2964e:	2100      	movs	r1, #0
   29650:	5099      	str	r1, [r3, r2]
   29652:	687b      	ldr	r3, [r7, #4]
   29654:	229c      	movs	r2, #156	; 0x9c
   29656:	2100      	movs	r1, #0
   29658:	5499      	strb	r1, [r3, r2]
   2965a:	687b      	ldr	r3, [r7, #4]
   2965c:	2200      	movs	r2, #0
   2965e:	669a      	str	r2, [r3, #104]	; 0x68
   29660:	687b      	ldr	r3, [r7, #4]
   29662:	2288      	movs	r2, #136	; 0x88
   29664:	2100      	movs	r1, #0
   29666:	5099      	str	r1, [r3, r2]
   29668:	687b      	ldr	r3, [r7, #4]
   2966a:	229d      	movs	r2, #157	; 0x9d
   2966c:	2100      	movs	r1, #0
   2966e:	5499      	strb	r1, [r3, r2]
   29670:	687b      	ldr	r3, [r7, #4]
   29672:	2200      	movs	r2, #0
   29674:	66da      	str	r2, [r3, #108]	; 0x6c
   29676:	687b      	ldr	r3, [r7, #4]
   29678:	228c      	movs	r2, #140	; 0x8c
   2967a:	2100      	movs	r1, #0
   2967c:	5099      	str	r1, [r3, r2]
   2967e:	687b      	ldr	r3, [r7, #4]
   29680:	229e      	movs	r2, #158	; 0x9e
   29682:	2100      	movs	r1, #0
   29684:	5499      	strb	r1, [r3, r2]
   29686:	687b      	ldr	r3, [r7, #4]
   29688:	2200      	movs	r2, #0
   2968a:	671a      	str	r2, [r3, #112]	; 0x70
   2968c:	687b      	ldr	r3, [r7, #4]
   2968e:	2290      	movs	r2, #144	; 0x90
   29690:	2100      	movs	r1, #0
   29692:	5099      	str	r1, [r3, r2]
   29694:	687b      	ldr	r3, [r7, #4]
   29696:	229f      	movs	r2, #159	; 0x9f
   29698:	2100      	movs	r1, #0
   2969a:	5499      	strb	r1, [r3, r2]
   2969c:	687b      	ldr	r3, [r7, #4]
   2969e:	2200      	movs	r2, #0
   296a0:	675a      	str	r2, [r3, #116]	; 0x74
   296a2:	687b      	ldr	r3, [r7, #4]
   296a4:	2294      	movs	r2, #148	; 0x94
   296a6:	2100      	movs	r1, #0
   296a8:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
   296aa:	687b      	ldr	r3, [r7, #4]
   296ac:	22a0      	movs	r2, #160	; 0xa0
   296ae:	2101      	movs	r1, #1
   296b0:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
   296b2:	687b      	ldr	r3, [r7, #4]
   296b4:	22a1      	movs	r2, #161	; 0xa1
   296b6:	2100      	movs	r1, #0
   296b8:	5499      	strb	r1, [r3, r2]
}
   296ba:	46c0      	nop			; (mov r8, r8)
   296bc:	46bd      	mov	sp, r7
   296be:	b005      	add	sp, #20
   296c0:	bd90      	pop	{r4, r7, pc}
   296c2:	46c0      	nop			; (mov r8, r8)
   296c4:	000293c1 	.word	0x000293c1
   296c8:	00039014 	.word	0x00039014

000296cc <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   296cc:	b580      	push	{r7, lr}
   296ce:	b086      	sub	sp, #24
   296d0:	af00      	add	r7, sp, #0
   296d2:	60b9      	str	r1, [r7, #8]
   296d4:	607a      	str	r2, [r7, #4]
   296d6:	230f      	movs	r3, #15
   296d8:	18fb      	adds	r3, r7, r3
   296da:	1c02      	adds	r2, r0, #0
   296dc:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
   296de:	2300      	movs	r3, #0
   296e0:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   296e2:	2300      	movs	r3, #0
   296e4:	613b      	str	r3, [r7, #16]
   296e6:	e01d      	b.n	29724 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
   296e8:	68ba      	ldr	r2, [r7, #8]
   296ea:	693b      	ldr	r3, [r7, #16]
   296ec:	18d3      	adds	r3, r2, r3
   296ee:	3310      	adds	r3, #16
   296f0:	781b      	ldrb	r3, [r3, #0]
   296f2:	2b01      	cmp	r3, #1
   296f4:	d113      	bne.n	2971e <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
   296f6:	230f      	movs	r3, #15
   296f8:	18fb      	adds	r3, r7, r3
   296fa:	781b      	ldrb	r3, [r3, #0]
   296fc:	4a1b      	ldr	r2, [pc, #108]	; (2976c <_tcc_build_ctrla+0xa0>)
   296fe:	5cd3      	ldrb	r3, [r2, r3]
   29700:	001a      	movs	r2, r3
   29702:	693b      	ldr	r3, [r7, #16]
   29704:	429a      	cmp	r2, r3
   29706:	da01      	bge.n	2970c <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
   29708:	2317      	movs	r3, #23
   2970a:	e02a      	b.n	29762 <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   2970c:	2380      	movs	r3, #128	; 0x80
   2970e:	045a      	lsls	r2, r3, #17
   29710:	693b      	ldr	r3, [r7, #16]
   29712:	409a      	lsls	r2, r3
   29714:	0013      	movs	r3, r2
   29716:	001a      	movs	r2, r3
   29718:	697b      	ldr	r3, [r7, #20]
   2971a:	4313      	orrs	r3, r2
   2971c:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2971e:	693b      	ldr	r3, [r7, #16]
   29720:	3301      	adds	r3, #1
   29722:	613b      	str	r3, [r7, #16]
   29724:	693b      	ldr	r3, [r7, #16]
   29726:	2b03      	cmp	r3, #3
   29728:	ddde      	ble.n	296e8 <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
   2972a:	68bb      	ldr	r3, [r7, #8]
   2972c:	22a1      	movs	r2, #161	; 0xa1
   2972e:	5c9b      	ldrb	r3, [r3, r2]
   29730:	2b00      	cmp	r3, #0
   29732:	d004      	beq.n	2973e <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
   29734:	697b      	ldr	r3, [r7, #20]
   29736:	2280      	movs	r2, #128	; 0x80
   29738:	0112      	lsls	r2, r2, #4
   2973a:	4313      	orrs	r3, r2
   2973c:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   2973e:	68bb      	ldr	r3, [r7, #8]
   29740:	7b1b      	ldrb	r3, [r3, #12]
   29742:	031b      	lsls	r3, r3, #12
   29744:	001a      	movs	r2, r3
   29746:	697b      	ldr	r3, [r7, #20]
   29748:	4313      	orrs	r3, r2
   2974a:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   2974c:	68bb      	ldr	r3, [r7, #8]
   2974e:	7adb      	ldrb	r3, [r3, #11]
   29750:	021b      	lsls	r3, r3, #8
   29752:	001a      	movs	r2, r3
   29754:	697b      	ldr	r3, [r7, #20]
   29756:	4313      	orrs	r3, r2
   29758:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
   2975a:	687b      	ldr	r3, [r7, #4]
   2975c:	697a      	ldr	r2, [r7, #20]
   2975e:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   29760:	2300      	movs	r3, #0
}
   29762:	0018      	movs	r0, r3
   29764:	46bd      	mov	sp, r7
   29766:	b006      	add	sp, #24
   29768:	bd80      	pop	{r7, pc}
   2976a:	46c0      	nop			; (mov r8, r8)
   2976c:	00039020 	.word	0x00039020

00029770 <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
   29770:	b580      	push	{r7, lr}
   29772:	b086      	sub	sp, #24
   29774:	af00      	add	r7, sp, #0
   29776:	60b9      	str	r1, [r7, #8]
   29778:	607a      	str	r2, [r7, #4]
   2977a:	230f      	movs	r3, #15
   2977c:	18fb      	adds	r3, r7, r3
   2977e:	1c02      	adds	r2, r0, #0
   29780:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
   29782:	2317      	movs	r3, #23
   29784:	18fb      	adds	r3, r7, r3
   29786:	2200      	movs	r2, #0
   29788:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
   2978a:	68bb      	ldr	r3, [r7, #8]
   2978c:	7a1b      	ldrb	r3, [r3, #8]
   2978e:	2b00      	cmp	r3, #0
   29790:	d007      	beq.n	297a2 <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
   29792:	2317      	movs	r3, #23
   29794:	18fb      	adds	r3, r7, r3
   29796:	2217      	movs	r2, #23
   29798:	18ba      	adds	r2, r7, r2
   2979a:	7812      	ldrb	r2, [r2, #0]
   2979c:	2104      	movs	r1, #4
   2979e:	430a      	orrs	r2, r1
   297a0:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
   297a2:	68bb      	ldr	r3, [r7, #8]
   297a4:	7a5b      	ldrb	r3, [r3, #9]
   297a6:	2b01      	cmp	r3, #1
   297a8:	d107      	bne.n	297ba <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
   297aa:	2317      	movs	r3, #23
   297ac:	18fb      	adds	r3, r7, r3
   297ae:	2217      	movs	r2, #23
   297b0:	18ba      	adds	r2, r7, r2
   297b2:	7812      	ldrb	r2, [r2, #0]
   297b4:	2101      	movs	r1, #1
   297b6:	430a      	orrs	r2, r1
   297b8:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
   297ba:	687b      	ldr	r3, [r7, #4]
   297bc:	2217      	movs	r2, #23
   297be:	18ba      	adds	r2, r7, r2
   297c0:	7812      	ldrb	r2, [r2, #0]
   297c2:	701a      	strb	r2, [r3, #0]
}
   297c4:	46c0      	nop			; (mov r8, r8)
   297c6:	46bd      	mov	sp, r7
   297c8:	b006      	add	sp, #24
   297ca:	bd80      	pop	{r7, pc}

000297cc <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   297cc:	b580      	push	{r7, lr}
   297ce:	b088      	sub	sp, #32
   297d0:	af00      	add	r7, sp, #0
   297d2:	60b9      	str	r1, [r7, #8]
   297d4:	607a      	str	r2, [r7, #4]
   297d6:	230f      	movs	r3, #15
   297d8:	18fb      	adds	r3, r7, r3
   297da:	1c02      	adds	r2, r0, #0
   297dc:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
   297de:	230f      	movs	r3, #15
   297e0:	18fb      	adds	r3, r7, r3
   297e2:	781a      	ldrb	r2, [r3, #0]
   297e4:	231b      	movs	r3, #27
   297e6:	18fb      	adds	r3, r7, r3
   297e8:	493e      	ldr	r1, [pc, #248]	; (298e4 <_tcc_build_faults+0x118>)
   297ea:	5c8a      	ldrb	r2, [r1, r2]
   297ec:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   297ee:	2300      	movs	r3, #0
   297f0:	61fb      	str	r3, [r7, #28]
   297f2:	e06e      	b.n	298d2 <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
   297f4:	69fa      	ldr	r2, [r7, #28]
   297f6:	0013      	movs	r3, r2
   297f8:	009b      	lsls	r3, r3, #2
   297fa:	189b      	adds	r3, r3, r2
   297fc:	005b      	lsls	r3, r3, #1
   297fe:	3328      	adds	r3, #40	; 0x28
   29800:	68ba      	ldr	r2, [r7, #8]
   29802:	18d3      	adds	r3, r2, r3
   29804:	3304      	adds	r3, #4
   29806:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
   29808:	697b      	ldr	r3, [r7, #20]
   2980a:	7a5b      	ldrb	r3, [r3, #9]
   2980c:	221b      	movs	r2, #27
   2980e:	18ba      	adds	r2, r7, r2
   29810:	7812      	ldrb	r2, [r2, #0]
   29812:	429a      	cmp	r2, r3
   29814:	d801      	bhi.n	2981a <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
   29816:	2317      	movs	r3, #23
   29818:	e05f      	b.n	298da <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
   2981a:	697b      	ldr	r3, [r7, #20]
   2981c:	781b      	ldrb	r3, [r3, #0]
   2981e:	2b0f      	cmp	r3, #15
   29820:	d901      	bls.n	29826 <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
   29822:	2317      	movs	r3, #23
   29824:	e059      	b.n	298da <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   29826:	697b      	ldr	r3, [r7, #20]
   29828:	781b      	ldrb	r3, [r3, #0]
   2982a:	061b      	lsls	r3, r3, #24
   2982c:	001a      	movs	r2, r3
   2982e:	23f0      	movs	r3, #240	; 0xf0
   29830:	051b      	lsls	r3, r3, #20
   29832:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
   29834:	697b      	ldr	r3, [r7, #20]
   29836:	785b      	ldrb	r3, [r3, #1]
   29838:	041b      	lsls	r3, r3, #16
   2983a:	0019      	movs	r1, r3
   2983c:	23ff      	movs	r3, #255	; 0xff
   2983e:	041b      	lsls	r3, r3, #16
   29840:	400b      	ands	r3, r1
   29842:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   29844:	697b      	ldr	r3, [r7, #20]
   29846:	789b      	ldrb	r3, [r3, #2]
   29848:	2b00      	cmp	r3, #0
   2984a:	d001      	beq.n	29850 <_tcc_build_faults+0x84>
   2984c:	2380      	movs	r3, #128	; 0x80
   2984e:	e000      	b.n	29852 <_tcc_build_faults+0x86>
   29850:	2300      	movs	r3, #0
   29852:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
   29854:	697b      	ldr	r3, [r7, #20]
   29856:	78db      	ldrb	r3, [r3, #3]
   29858:	2b00      	cmp	r3, #0
   2985a:	d001      	beq.n	29860 <_tcc_build_faults+0x94>
   2985c:	2308      	movs	r3, #8
   2985e:	e000      	b.n	29862 <_tcc_build_faults+0x96>
   29860:	2300      	movs	r3, #0
   29862:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
   29864:	697b      	ldr	r3, [r7, #20]
   29866:	791b      	ldrb	r3, [r3, #4]
   29868:	2b00      	cmp	r3, #0
   2986a:	d001      	beq.n	29870 <_tcc_build_faults+0xa4>
   2986c:	2310      	movs	r3, #16
   2986e:	e000      	b.n	29872 <_tcc_build_faults+0xa6>
   29870:	2300      	movs	r3, #0
   29872:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
   29874:	697b      	ldr	r3, [r7, #20]
   29876:	795b      	ldrb	r3, [r3, #5]
   29878:	0019      	movs	r1, r3
   2987a:	2303      	movs	r3, #3
   2987c:	400b      	ands	r3, r1
   2987e:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
   29880:	697b      	ldr	r3, [r7, #20]
   29882:	799b      	ldrb	r3, [r3, #6]
   29884:	015b      	lsls	r3, r3, #5
   29886:	0019      	movs	r1, r3
   29888:	2360      	movs	r3, #96	; 0x60
   2988a:	400b      	ands	r3, r1
   2988c:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
   2988e:	697b      	ldr	r3, [r7, #20]
   29890:	79db      	ldrb	r3, [r3, #7]
   29892:	021b      	lsls	r3, r3, #8
   29894:	0019      	movs	r1, r3
   29896:	23c0      	movs	r3, #192	; 0xc0
   29898:	009b      	lsls	r3, r3, #2
   2989a:	400b      	ands	r3, r1
   2989c:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
   2989e:	697b      	ldr	r3, [r7, #20]
   298a0:	7a1b      	ldrb	r3, [r3, #8]
   298a2:	031b      	lsls	r3, r3, #12
   298a4:	0019      	movs	r1, r3
   298a6:	23e0      	movs	r3, #224	; 0xe0
   298a8:	01db      	lsls	r3, r3, #7
   298aa:	400b      	ands	r3, r1
   298ac:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   298ae:	697b      	ldr	r3, [r7, #20]
   298b0:	7a5b      	ldrb	r3, [r3, #9]
   298b2:	029b      	lsls	r3, r3, #10
   298b4:	0019      	movs	r1, r3
   298b6:	23c0      	movs	r3, #192	; 0xc0
   298b8:	011b      	lsls	r3, r3, #4
   298ba:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   298bc:	4313      	orrs	r3, r2
   298be:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
   298c0:	69fb      	ldr	r3, [r7, #28]
   298c2:	009b      	lsls	r3, r3, #2
   298c4:	687a      	ldr	r2, [r7, #4]
   298c6:	18d3      	adds	r3, r2, r3
   298c8:	693a      	ldr	r2, [r7, #16]
   298ca:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   298cc:	69fb      	ldr	r3, [r7, #28]
   298ce:	3301      	adds	r3, #1
   298d0:	61fb      	str	r3, [r7, #28]
   298d2:	69fb      	ldr	r3, [r7, #28]
   298d4:	2b01      	cmp	r3, #1
   298d6:	dd8d      	ble.n	297f4 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
   298d8:	2300      	movs	r3, #0
}
   298da:	0018      	movs	r0, r3
   298dc:	46bd      	mov	sp, r7
   298de:	b008      	add	sp, #32
   298e0:	bd80      	pop	{r7, pc}
   298e2:	46c0      	nop			; (mov r8, r8)
   298e4:	00039020 	.word	0x00039020

000298e8 <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   298e8:	b580      	push	{r7, lr}
   298ea:	b088      	sub	sp, #32
   298ec:	af00      	add	r7, sp, #0
   298ee:	60b9      	str	r1, [r7, #8]
   298f0:	607a      	str	r2, [r7, #4]
   298f2:	230f      	movs	r3, #15
   298f4:	18fb      	adds	r3, r7, r3
   298f6:	1c02      	adds	r2, r0, #0
   298f8:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
   298fa:	230f      	movs	r3, #15
   298fc:	18fb      	adds	r3, r7, r3
   298fe:	781a      	ldrb	r2, [r3, #0]
   29900:	2317      	movs	r3, #23
   29902:	18fb      	adds	r3, r7, r3
   29904:	492d      	ldr	r1, [pc, #180]	; (299bc <_tcc_build_drvctrl+0xd4>)
   29906:	5c8a      	ldrb	r2, [r1, r2]
   29908:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
   2990a:	2300      	movs	r3, #0
   2990c:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2990e:	2300      	movs	r3, #0
   29910:	61fb      	str	r3, [r7, #28]
   29912:	e048      	b.n	299a6 <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
   29914:	68ba      	ldr	r2, [r7, #8]
   29916:	2150      	movs	r1, #80	; 0x50
   29918:	69fb      	ldr	r3, [r7, #28]
   2991a:	18d3      	adds	r3, r2, r3
   2991c:	185b      	adds	r3, r3, r1
   2991e:	781b      	ldrb	r3, [r3, #0]
   29920:	2b00      	cmp	r3, #0
   29922:	d010      	beq.n	29946 <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
   29924:	2317      	movs	r3, #23
   29926:	18fb      	adds	r3, r7, r3
   29928:	781a      	ldrb	r2, [r3, #0]
   2992a:	69fb      	ldr	r3, [r7, #28]
   2992c:	429a      	cmp	r2, r3
   2992e:	d801      	bhi.n	29934 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
   29930:	2317      	movs	r3, #23
   29932:	e03f      	b.n	299b4 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   29934:	2380      	movs	r3, #128	; 0x80
   29936:	025a      	lsls	r2, r3, #9
   29938:	69fb      	ldr	r3, [r7, #28]
   2993a:	409a      	lsls	r2, r3
   2993c:	0013      	movs	r3, r2
   2993e:	001a      	movs	r2, r3
   29940:	69bb      	ldr	r3, [r7, #24]
   29942:	4313      	orrs	r3, r2
   29944:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
   29946:	68ba      	ldr	r2, [r7, #8]
   29948:	69fb      	ldr	r3, [r7, #28]
   2994a:	331c      	adds	r3, #28
   2994c:	005b      	lsls	r3, r3, #1
   2994e:	18d3      	adds	r3, r2, r3
   29950:	3309      	adds	r3, #9
   29952:	781b      	ldrb	r3, [r3, #0]
   29954:	2b00      	cmp	r3, #0
   29956:	d023      	beq.n	299a0 <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
   29958:	2317      	movs	r3, #23
   2995a:	18fb      	adds	r3, r7, r3
   2995c:	781a      	ldrb	r2, [r3, #0]
   2995e:	69fb      	ldr	r3, [r7, #28]
   29960:	429a      	cmp	r2, r3
   29962:	d801      	bhi.n	29968 <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
   29964:	2317      	movs	r3, #23
   29966:	e025      	b.n	299b4 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
   29968:	68ba      	ldr	r2, [r7, #8]
   2996a:	69fb      	ldr	r3, [r7, #28]
   2996c:	331c      	adds	r3, #28
   2996e:	005b      	lsls	r3, r3, #1
   29970:	18d3      	adds	r3, r2, r3
   29972:	3309      	adds	r3, #9
   29974:	781b      	ldrb	r3, [r3, #0]
   29976:	2b02      	cmp	r3, #2
   29978:	d10a      	bne.n	29990 <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   2997a:	2302      	movs	r3, #2
   2997c:	33ff      	adds	r3, #255	; 0xff
   2997e:	001a      	movs	r2, r3
   29980:	69fb      	ldr	r3, [r7, #28]
   29982:	409a      	lsls	r2, r3
   29984:	0013      	movs	r3, r2
   29986:	001a      	movs	r2, r3
   29988:	69bb      	ldr	r3, [r7, #24]
   2998a:	4313      	orrs	r3, r2
   2998c:	61bb      	str	r3, [r7, #24]
   2998e:	e007      	b.n	299a0 <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   29990:	2201      	movs	r2, #1
   29992:	69fb      	ldr	r3, [r7, #28]
   29994:	409a      	lsls	r2, r3
   29996:	0013      	movs	r3, r2
   29998:	001a      	movs	r2, r3
   2999a:	69bb      	ldr	r3, [r7, #24]
   2999c:	4313      	orrs	r3, r2
   2999e:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   299a0:	69fb      	ldr	r3, [r7, #28]
   299a2:	3301      	adds	r3, #1
   299a4:	61fb      	str	r3, [r7, #28]
   299a6:	69fb      	ldr	r3, [r7, #28]
   299a8:	2b07      	cmp	r3, #7
   299aa:	d9b3      	bls.n	29914 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
   299ac:	687b      	ldr	r3, [r7, #4]
   299ae:	69ba      	ldr	r2, [r7, #24]
   299b0:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   299b2:	2300      	movs	r3, #0
}
   299b4:	0018      	movs	r0, r3
   299b6:	46bd      	mov	sp, r7
   299b8:	b008      	add	sp, #32
   299ba:	bd80      	pop	{r7, pc}
   299bc:	00039024 	.word	0x00039024

000299c0 <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   299c0:	b580      	push	{r7, lr}
   299c2:	b088      	sub	sp, #32
   299c4:	af00      	add	r7, sp, #0
   299c6:	60b9      	str	r1, [r7, #8]
   299c8:	607a      	str	r2, [r7, #4]
   299ca:	230f      	movs	r3, #15
   299cc:	18fb      	adds	r3, r7, r3
   299ce:	1c02      	adds	r2, r0, #0
   299d0:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
   299d2:	230f      	movs	r3, #15
   299d4:	18fb      	adds	r3, r7, r3
   299d6:	781a      	ldrb	r2, [r3, #0]
   299d8:	2317      	movs	r3, #23
   299da:	18fb      	adds	r3, r7, r3
   299dc:	491d      	ldr	r1, [pc, #116]	; (29a54 <_tcc_build_waves+0x94>)
   299de:	5c8a      	ldrb	r2, [r1, r2]
   299e0:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
   299e2:	68bb      	ldr	r3, [r7, #8]
   299e4:	3310      	adds	r3, #16
   299e6:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   299e8:	693b      	ldr	r3, [r7, #16]
   299ea:	7a5b      	ldrb	r3, [r3, #9]
   299ec:	011b      	lsls	r3, r3, #4
   299ee:	001a      	movs	r2, r3
   299f0:	2330      	movs	r3, #48	; 0x30
   299f2:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
   299f4:	693b      	ldr	r3, [r7, #16]
   299f6:	7a1b      	ldrb	r3, [r3, #8]
   299f8:	0019      	movs	r1, r3
   299fa:	2307      	movs	r3, #7
   299fc:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   299fe:	4313      	orrs	r3, r2
   29a00:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   29a02:	2300      	movs	r3, #0
   29a04:	61fb      	str	r3, [r7, #28]
   29a06:	e01a      	b.n	29a3e <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
   29a08:	693a      	ldr	r2, [r7, #16]
   29a0a:	69fb      	ldr	r3, [r7, #28]
   29a0c:	18d3      	adds	r3, r2, r3
   29a0e:	3304      	adds	r3, #4
   29a10:	781b      	ldrb	r3, [r3, #0]
   29a12:	2b00      	cmp	r3, #0
   29a14:	d010      	beq.n	29a38 <_tcc_build_waves+0x78>
			if (n >= cc_num) {
   29a16:	2317      	movs	r3, #23
   29a18:	18fb      	adds	r3, r7, r3
   29a1a:	781a      	ldrb	r2, [r3, #0]
   29a1c:	69fb      	ldr	r3, [r7, #28]
   29a1e:	429a      	cmp	r2, r3
   29a20:	dc01      	bgt.n	29a26 <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
   29a22:	2317      	movs	r3, #23
   29a24:	e012      	b.n	29a4c <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
   29a26:	2380      	movs	r3, #128	; 0x80
   29a28:	025a      	lsls	r2, r3, #9
   29a2a:	69fb      	ldr	r3, [r7, #28]
   29a2c:	409a      	lsls	r2, r3
   29a2e:	0013      	movs	r3, r2
   29a30:	001a      	movs	r2, r3
   29a32:	69bb      	ldr	r3, [r7, #24]
   29a34:	4313      	orrs	r3, r2
   29a36:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   29a38:	69fb      	ldr	r3, [r7, #28]
   29a3a:	3301      	adds	r3, #1
   29a3c:	61fb      	str	r3, [r7, #28]
   29a3e:	69fb      	ldr	r3, [r7, #28]
   29a40:	2b03      	cmp	r3, #3
   29a42:	dde1      	ble.n	29a08 <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
   29a44:	687b      	ldr	r3, [r7, #4]
   29a46:	69ba      	ldr	r2, [r7, #24]
   29a48:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
   29a4a:	2300      	movs	r3, #0
}
   29a4c:	0018      	movs	r0, r3
   29a4e:	46bd      	mov	sp, r7
   29a50:	b008      	add	sp, #32
   29a52:	bd80      	pop	{r7, pc}
   29a54:	00039020 	.word	0x00039020

00029a58 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
   29a58:	b590      	push	{r4, r7, lr}
   29a5a:	b091      	sub	sp, #68	; 0x44
   29a5c:	af00      	add	r7, sp, #0
   29a5e:	60f8      	str	r0, [r7, #12]
   29a60:	60b9      	str	r1, [r7, #8]
   29a62:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   29a64:	233b      	movs	r3, #59	; 0x3b
   29a66:	18fc      	adds	r4, r7, r3
   29a68:	68bb      	ldr	r3, [r7, #8]
   29a6a:	0018      	movs	r0, r3
   29a6c:	4bc4      	ldr	r3, [pc, #784]	; (29d80 <tcc_init+0x328>)
   29a6e:	4798      	blx	r3
   29a70:	0003      	movs	r3, r0
   29a72:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   29a74:	233b      	movs	r3, #59	; 0x3b
   29a76:	18fb      	adds	r3, r7, r3
   29a78:	781a      	ldrb	r2, [r3, #0]
   29a7a:	4bc2      	ldr	r3, [pc, #776]	; (29d84 <tcc_init+0x32c>)
   29a7c:	0092      	lsls	r2, r2, #2
   29a7e:	58d3      	ldr	r3, [r2, r3]
   29a80:	0019      	movs	r1, r3
   29a82:	2002      	movs	r0, #2
   29a84:	4bc0      	ldr	r3, [pc, #768]	; (29d88 <tcc_init+0x330>)
   29a86:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   29a88:	68bb      	ldr	r3, [r7, #8]
   29a8a:	681b      	ldr	r3, [r3, #0]
   29a8c:	2202      	movs	r2, #2
   29a8e:	4013      	ands	r3, r2
   29a90:	d001      	beq.n	29a96 <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
   29a92:	231c      	movs	r3, #28
   29a94:	e1be      	b.n	29e14 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
   29a96:	68bb      	ldr	r3, [r7, #8]
   29a98:	681b      	ldr	r3, [r3, #0]
   29a9a:	2201      	movs	r2, #1
   29a9c:	4013      	ands	r3, r2
   29a9e:	d001      	beq.n	29aa4 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
   29aa0:	231c      	movs	r3, #28
   29aa2:	e1b7      	b.n	29e14 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
   29aa4:	233b      	movs	r3, #59	; 0x3b
   29aa6:	18fb      	adds	r3, r7, r3
   29aa8:	781a      	ldrb	r2, [r3, #0]
   29aaa:	4bb8      	ldr	r3, [pc, #736]	; (29d8c <tcc_init+0x334>)
   29aac:	0092      	lsls	r2, r2, #2
   29aae:	58d3      	ldr	r3, [r2, r3]
   29ab0:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
   29ab2:	687b      	ldr	r3, [r7, #4]
   29ab4:	681a      	ldr	r2, [r3, #0]
   29ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   29ab8:	429a      	cmp	r2, r3
   29aba:	d804      	bhi.n	29ac6 <tcc_init+0x6e>
		|| (config->counter.period > count_max)
   29abc:	687b      	ldr	r3, [r7, #4]
   29abe:	685a      	ldr	r2, [r3, #4]
   29ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   29ac2:	429a      	cmp	r2, r3
   29ac4:	d901      	bls.n	29aca <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
   29ac6:	2317      	movs	r3, #23
   29ac8:	e1a4      	b.n	29e14 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   29aca:	2300      	movs	r3, #0
   29acc:	63fb      	str	r3, [r7, #60]	; 0x3c
   29ace:	e00e      	b.n	29aee <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
   29ad0:	687a      	ldr	r2, [r7, #4]
   29ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29ad4:	3306      	adds	r3, #6
   29ad6:	009b      	lsls	r3, r3, #2
   29ad8:	18d3      	adds	r3, r2, r3
   29ada:	3304      	adds	r3, #4
   29adc:	681a      	ldr	r2, [r3, #0]
   29ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   29ae0:	429a      	cmp	r2, r3
   29ae2:	d901      	bls.n	29ae8 <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
   29ae4:	2317      	movs	r3, #23
   29ae6:	e195      	b.n	29e14 <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   29ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29aea:	3301      	adds	r3, #1
   29aec:	63fb      	str	r3, [r7, #60]	; 0x3c
   29aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29af0:	2b03      	cmp	r3, #3
   29af2:	dded      	ble.n	29ad0 <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   29af4:	2300      	movs	r3, #0
   29af6:	63fb      	str	r3, [r7, #60]	; 0x3c
   29af8:	e019      	b.n	29b2e <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
   29afa:	687a      	ldr	r2, [r7, #4]
   29afc:	2198      	movs	r1, #152	; 0x98
   29afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29b00:	18d3      	adds	r3, r2, r3
   29b02:	185b      	adds	r3, r3, r1
   29b04:	781b      	ldrb	r3, [r3, #0]
   29b06:	2201      	movs	r2, #1
   29b08:	4053      	eors	r3, r2
   29b0a:	b2db      	uxtb	r3, r3
   29b0c:	2b00      	cmp	r3, #0
   29b0e:	d10a      	bne.n	29b26 <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
   29b10:	233b      	movs	r3, #59	; 0x3b
   29b12:	18fb      	adds	r3, r7, r3
   29b14:	781b      	ldrb	r3, [r3, #0]
   29b16:	4a9e      	ldr	r2, [pc, #632]	; (29d90 <tcc_init+0x338>)
   29b18:	5cd3      	ldrb	r3, [r2, r3]
   29b1a:	001a      	movs	r2, r3
   29b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29b1e:	429a      	cmp	r2, r3
   29b20:	dc02      	bgt.n	29b28 <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
   29b22:	2317      	movs	r3, #23
   29b24:	e176      	b.n	29e14 <tcc_init+0x3bc>
			continue;
   29b26:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   29b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29b2a:	3301      	adds	r3, #1
   29b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   29b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29b30:	2b07      	cmp	r3, #7
   29b32:	dde2      	ble.n	29afa <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
   29b34:	2300      	movs	r3, #0
   29b36:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
   29b38:	2333      	movs	r3, #51	; 0x33
   29b3a:	18fc      	adds	r4, r7, r3
   29b3c:	232c      	movs	r3, #44	; 0x2c
   29b3e:	18fa      	adds	r2, r7, r3
   29b40:	6879      	ldr	r1, [r7, #4]
   29b42:	233b      	movs	r3, #59	; 0x3b
   29b44:	18fb      	adds	r3, r7, r3
   29b46:	781b      	ldrb	r3, [r3, #0]
   29b48:	0018      	movs	r0, r3
   29b4a:	4b92      	ldr	r3, [pc, #584]	; (29d94 <tcc_init+0x33c>)
   29b4c:	4798      	blx	r3
   29b4e:	0003      	movs	r3, r0
   29b50:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   29b52:	2333      	movs	r3, #51	; 0x33
   29b54:	18fb      	adds	r3, r7, r3
   29b56:	781b      	ldrb	r3, [r3, #0]
   29b58:	2b00      	cmp	r3, #0
   29b5a:	d003      	beq.n	29b64 <tcc_init+0x10c>
		return status;
   29b5c:	2333      	movs	r3, #51	; 0x33
   29b5e:	18fb      	adds	r3, r7, r3
   29b60:	781b      	ldrb	r3, [r3, #0]
   29b62:	e157      	b.n	29e14 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
   29b64:	232b      	movs	r3, #43	; 0x2b
   29b66:	18fa      	adds	r2, r7, r3
   29b68:	6879      	ldr	r1, [r7, #4]
   29b6a:	233b      	movs	r3, #59	; 0x3b
   29b6c:	18fb      	adds	r3, r7, r3
   29b6e:	781b      	ldrb	r3, [r3, #0]
   29b70:	0018      	movs	r0, r3
   29b72:	4b89      	ldr	r3, [pc, #548]	; (29d98 <tcc_init+0x340>)
   29b74:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
   29b76:	2333      	movs	r3, #51	; 0x33
   29b78:	18fc      	adds	r4, r7, r3
   29b7a:	2320      	movs	r3, #32
   29b7c:	18fa      	adds	r2, r7, r3
   29b7e:	6879      	ldr	r1, [r7, #4]
   29b80:	233b      	movs	r3, #59	; 0x3b
   29b82:	18fb      	adds	r3, r7, r3
   29b84:	781b      	ldrb	r3, [r3, #0]
   29b86:	0018      	movs	r0, r3
   29b88:	4b84      	ldr	r3, [pc, #528]	; (29d9c <tcc_init+0x344>)
   29b8a:	4798      	blx	r3
   29b8c:	0003      	movs	r3, r0
   29b8e:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   29b90:	2333      	movs	r3, #51	; 0x33
   29b92:	18fb      	adds	r3, r7, r3
   29b94:	781b      	ldrb	r3, [r3, #0]
   29b96:	2b00      	cmp	r3, #0
   29b98:	d003      	beq.n	29ba2 <tcc_init+0x14a>
		return status;
   29b9a:	2333      	movs	r3, #51	; 0x33
   29b9c:	18fb      	adds	r3, r7, r3
   29b9e:	781b      	ldrb	r3, [r3, #0]
   29ba0:	e138      	b.n	29e14 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
   29ba2:	2300      	movs	r3, #0
   29ba4:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
   29ba6:	2333      	movs	r3, #51	; 0x33
   29ba8:	18fc      	adds	r4, r7, r3
   29baa:	231c      	movs	r3, #28
   29bac:	18fa      	adds	r2, r7, r3
   29bae:	6879      	ldr	r1, [r7, #4]
   29bb0:	233b      	movs	r3, #59	; 0x3b
   29bb2:	18fb      	adds	r3, r7, r3
   29bb4:	781b      	ldrb	r3, [r3, #0]
   29bb6:	0018      	movs	r0, r3
   29bb8:	4b79      	ldr	r3, [pc, #484]	; (29da0 <tcc_init+0x348>)
   29bba:	4798      	blx	r3
   29bbc:	0003      	movs	r3, r0
   29bbe:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   29bc0:	2333      	movs	r3, #51	; 0x33
   29bc2:	18fb      	adds	r3, r7, r3
   29bc4:	781b      	ldrb	r3, [r3, #0]
   29bc6:	2b00      	cmp	r3, #0
   29bc8:	d003      	beq.n	29bd2 <tcc_init+0x17a>
		return status;
   29bca:	2333      	movs	r3, #51	; 0x33
   29bcc:	18fb      	adds	r3, r7, r3
   29bce:	781b      	ldrb	r3, [r3, #0]
   29bd0:	e120      	b.n	29e14 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
   29bd2:	2333      	movs	r3, #51	; 0x33
   29bd4:	18fc      	adds	r4, r7, r3
   29bd6:	2318      	movs	r3, #24
   29bd8:	18fa      	adds	r2, r7, r3
   29bda:	6879      	ldr	r1, [r7, #4]
   29bdc:	233b      	movs	r3, #59	; 0x3b
   29bde:	18fb      	adds	r3, r7, r3
   29be0:	781b      	ldrb	r3, [r3, #0]
   29be2:	0018      	movs	r0, r3
   29be4:	4b6f      	ldr	r3, [pc, #444]	; (29da4 <tcc_init+0x34c>)
   29be6:	4798      	blx	r3
   29be8:	0003      	movs	r3, r0
   29bea:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   29bec:	2333      	movs	r3, #51	; 0x33
   29bee:	18fb      	adds	r3, r7, r3
   29bf0:	781b      	ldrb	r3, [r3, #0]
   29bf2:	2b00      	cmp	r3, #0
   29bf4:	d003      	beq.n	29bfe <tcc_init+0x1a6>
		return status;
   29bf6:	2333      	movs	r3, #51	; 0x33
   29bf8:	18fb      	adds	r3, r7, r3
   29bfa:	781b      	ldrb	r3, [r3, #0]
   29bfc:	e10a      	b.n	29e14 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   29bfe:	2300      	movs	r3, #0
   29c00:	63fb      	str	r3, [r7, #60]	; 0x3c
   29c02:	e009      	b.n	29c18 <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
   29c04:	68fa      	ldr	r2, [r7, #12]
   29c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29c08:	009b      	lsls	r3, r3, #2
   29c0a:	18d3      	adds	r3, r2, r3
   29c0c:	3304      	adds	r3, #4
   29c0e:	2200      	movs	r2, #0
   29c10:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   29c12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29c14:	3301      	adds	r3, #1
   29c16:	63fb      	str	r3, [r7, #60]	; 0x3c
   29c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29c1a:	2b0b      	cmp	r3, #11
   29c1c:	ddf2      	ble.n	29c04 <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
   29c1e:	68fb      	ldr	r3, [r7, #12]
   29c20:	2200      	movs	r2, #0
   29c22:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
   29c24:	68fb      	ldr	r3, [r7, #12]
   29c26:	2200      	movs	r2, #0
   29c28:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
   29c2a:	233b      	movs	r3, #59	; 0x3b
   29c2c:	18fb      	adds	r3, r7, r3
   29c2e:	781a      	ldrb	r2, [r3, #0]
   29c30:	4b5d      	ldr	r3, [pc, #372]	; (29da8 <tcc_init+0x350>)
   29c32:	0092      	lsls	r2, r2, #2
   29c34:	68f9      	ldr	r1, [r7, #12]
   29c36:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
   29c38:	68fb      	ldr	r3, [r7, #12]
   29c3a:	68ba      	ldr	r2, [r7, #8]
   29c3c:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   29c3e:	687b      	ldr	r3, [r7, #4]
   29c40:	22a0      	movs	r2, #160	; 0xa0
   29c42:	5c99      	ldrb	r1, [r3, r2]
   29c44:	68fb      	ldr	r3, [r7, #12]
   29c46:	223c      	movs	r2, #60	; 0x3c
   29c48:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
   29c4a:	2314      	movs	r3, #20
   29c4c:	18fb      	adds	r3, r7, r3
   29c4e:	0018      	movs	r0, r3
   29c50:	4b56      	ldr	r3, [pc, #344]	; (29dac <tcc_init+0x354>)
   29c52:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
   29c54:	687b      	ldr	r3, [r7, #4]
   29c56:	7a9a      	ldrb	r2, [r3, #10]
   29c58:	2314      	movs	r3, #20
   29c5a:	18fb      	adds	r3, r7, r3
   29c5c:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
   29c5e:	233b      	movs	r3, #59	; 0x3b
   29c60:	18fb      	adds	r3, r7, r3
   29c62:	781b      	ldrb	r3, [r3, #0]
   29c64:	4a52      	ldr	r2, [pc, #328]	; (29db0 <tcc_init+0x358>)
   29c66:	5cd3      	ldrb	r3, [r2, r3]
   29c68:	2214      	movs	r2, #20
   29c6a:	18ba      	adds	r2, r7, r2
   29c6c:	0011      	movs	r1, r2
   29c6e:	0018      	movs	r0, r3
   29c70:	4b50      	ldr	r3, [pc, #320]	; (29db4 <tcc_init+0x35c>)
   29c72:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
   29c74:	233b      	movs	r3, #59	; 0x3b
   29c76:	18fb      	adds	r3, r7, r3
   29c78:	781b      	ldrb	r3, [r3, #0]
   29c7a:	4a4d      	ldr	r2, [pc, #308]	; (29db0 <tcc_init+0x358>)
   29c7c:	5cd3      	ldrb	r3, [r2, r3]
   29c7e:	0018      	movs	r0, r3
   29c80:	4b4d      	ldr	r3, [pc, #308]	; (29db8 <tcc_init+0x360>)
   29c82:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   29c84:	2300      	movs	r3, #0
   29c86:	63fb      	str	r3, [r7, #60]	; 0x3c
   29c88:	e02d      	b.n	29ce6 <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
   29c8a:	687a      	ldr	r2, [r7, #4]
   29c8c:	2198      	movs	r1, #152	; 0x98
   29c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29c90:	18d3      	adds	r3, r2, r3
   29c92:	185b      	adds	r3, r3, r1
   29c94:	781b      	ldrb	r3, [r3, #0]
   29c96:	2201      	movs	r2, #1
   29c98:	4053      	eors	r3, r2
   29c9a:	b2db      	uxtb	r3, r3
   29c9c:	2b00      	cmp	r3, #0
   29c9e:	d11e      	bne.n	29cde <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
   29ca0:	2310      	movs	r3, #16
   29ca2:	18fb      	adds	r3, r7, r3
   29ca4:	0018      	movs	r0, r3
   29ca6:	4b45      	ldr	r3, [pc, #276]	; (29dbc <tcc_init+0x364>)
   29ca8:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
   29caa:	687b      	ldr	r3, [r7, #4]
   29cac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   29cae:	321e      	adds	r2, #30
   29cb0:	0092      	lsls	r2, r2, #2
   29cb2:	58d3      	ldr	r3, [r2, r3]
   29cb4:	b2da      	uxtb	r2, r3
   29cb6:	2310      	movs	r3, #16
   29cb8:	18fb      	adds	r3, r7, r3
   29cba:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   29cbc:	2310      	movs	r3, #16
   29cbe:	18fb      	adds	r3, r7, r3
   29cc0:	2201      	movs	r2, #1
   29cc2:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
   29cc4:	687b      	ldr	r3, [r7, #4]
   29cc6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   29cc8:	3216      	adds	r2, #22
   29cca:	0092      	lsls	r2, r2, #2
   29ccc:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
   29cce:	b2db      	uxtb	r3, r3
   29cd0:	2210      	movs	r2, #16
   29cd2:	18ba      	adds	r2, r7, r2
   29cd4:	0011      	movs	r1, r2
   29cd6:	0018      	movs	r0, r3
   29cd8:	4b39      	ldr	r3, [pc, #228]	; (29dc0 <tcc_init+0x368>)
   29cda:	4798      	blx	r3
   29cdc:	e000      	b.n	29ce0 <tcc_init+0x288>
			continue;
   29cde:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   29ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29ce2:	3301      	adds	r3, #1
   29ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
   29ce6:	233b      	movs	r3, #59	; 0x3b
   29ce8:	18fb      	adds	r3, r7, r3
   29cea:	781b      	ldrb	r3, [r3, #0]
   29cec:	4a28      	ldr	r2, [pc, #160]	; (29d90 <tcc_init+0x338>)
   29cee:	5cd3      	ldrb	r3, [r2, r3]
   29cf0:	001a      	movs	r2, r3
   29cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29cf4:	429a      	cmp	r2, r3
   29cf6:	dcc8      	bgt.n	29c8a <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
   29cf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   29cfa:	68bb      	ldr	r3, [r7, #8]
   29cfc:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   29cfe:	46c0      	nop			; (mov r8, r8)
   29d00:	68bb      	ldr	r3, [r7, #8]
   29d02:	689b      	ldr	r3, [r3, #8]
   29d04:	2204      	movs	r2, #4
   29d06:	4013      	ands	r3, r2
   29d08:	d1fa      	bne.n	29d00 <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
   29d0a:	68bb      	ldr	r3, [r7, #8]
   29d0c:	22ff      	movs	r2, #255	; 0xff
   29d0e:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   29d10:	46c0      	nop			; (mov r8, r8)
   29d12:	68bb      	ldr	r3, [r7, #8]
   29d14:	689b      	ldr	r3, [r3, #8]
   29d16:	2204      	movs	r2, #4
   29d18:	4013      	ands	r3, r2
   29d1a:	d1fa      	bne.n	29d12 <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
   29d1c:	232b      	movs	r3, #43	; 0x2b
   29d1e:	18fb      	adds	r3, r7, r3
   29d20:	781a      	ldrb	r2, [r3, #0]
   29d22:	68bb      	ldr	r3, [r7, #8]
   29d24:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
   29d26:	2320      	movs	r3, #32
   29d28:	18fb      	adds	r3, r7, r3
   29d2a:	681a      	ldr	r2, [r3, #0]
   29d2c:	68bb      	ldr	r3, [r7, #8]
   29d2e:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
   29d30:	2320      	movs	r3, #32
   29d32:	18fb      	adds	r3, r7, r3
   29d34:	685a      	ldr	r2, [r3, #4]
   29d36:	68bb      	ldr	r3, [r7, #8]
   29d38:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
   29d3a:	69fa      	ldr	r2, [r7, #28]
   29d3c:	68bb      	ldr	r3, [r7, #8]
   29d3e:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
   29d40:	46c0      	nop			; (mov r8, r8)
   29d42:	68bb      	ldr	r3, [r7, #8]
   29d44:	689b      	ldr	r3, [r3, #8]
   29d46:	4a1f      	ldr	r2, [pc, #124]	; (29dc4 <tcc_init+0x36c>)
   29d48:	4013      	ands	r3, r2
   29d4a:	d1fa      	bne.n	29d42 <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
   29d4c:	69ba      	ldr	r2, [r7, #24]
   29d4e:	68bb      	ldr	r3, [r7, #8]
   29d50:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
   29d52:	46c0      	nop			; (mov r8, r8)
   29d54:	68bb      	ldr	r3, [r7, #8]
   29d56:	689b      	ldr	r3, [r3, #8]
   29d58:	2210      	movs	r2, #16
   29d5a:	4013      	ands	r3, r2
   29d5c:	d1fa      	bne.n	29d54 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
   29d5e:	687b      	ldr	r3, [r7, #4]
   29d60:	681a      	ldr	r2, [r3, #0]
   29d62:	68bb      	ldr	r3, [r7, #8]
   29d64:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
   29d66:	46c0      	nop			; (mov r8, r8)
   29d68:	68bb      	ldr	r3, [r7, #8]
   29d6a:	689b      	ldr	r3, [r3, #8]
   29d6c:	4a16      	ldr	r2, [pc, #88]	; (29dc8 <tcc_init+0x370>)
   29d6e:	4013      	ands	r3, r2
   29d70:	d1fa      	bne.n	29d68 <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
   29d72:	687b      	ldr	r3, [r7, #4]
   29d74:	685a      	ldr	r2, [r3, #4]
   29d76:	68bb      	ldr	r3, [r7, #8]
   29d78:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   29d7a:	2300      	movs	r3, #0
   29d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   29d7e:	e03f      	b.n	29e00 <tcc_init+0x3a8>
   29d80:	000293c1 	.word	0x000293c1
   29d84:	00039008 	.word	0x00039008
   29d88:	0002933d 	.word	0x0002933d
   29d8c:	00039014 	.word	0x00039014
   29d90:	00039024 	.word	0x00039024
   29d94:	000296cd 	.word	0x000296cd
   29d98:	00029771 	.word	0x00029771
   29d9c:	000297cd 	.word	0x000297cd
   29da0:	000298e9 	.word	0x000298e9
   29da4:	000299c1 	.word	0x000299c1
   29da8:	20005be8 	.word	0x20005be8
   29dac:	00029325 	.word	0x00029325
   29db0:	00039004 	.word	0x00039004
   29db4:	00028f3d 	.word	0x00028f3d
   29db8:	00028f81 	.word	0x00028f81
   29dbc:	00029399 	.word	0x00029399
   29dc0:	0002929d 	.word	0x0002929d
   29dc4:	00020040 	.word	0x00020040
   29dc8:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
   29dcc:	46c0      	nop			; (mov r8, r8)
   29dce:	68bb      	ldr	r3, [r7, #8]
   29dd0:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
   29dd2:	4912      	ldr	r1, [pc, #72]	; (29e1c <tcc_init+0x3c4>)
   29dd4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   29dd6:	4091      	lsls	r1, r2
   29dd8:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
   29dda:	4013      	ands	r3, r2
   29ddc:	d1f7      	bne.n	29dce <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
   29dde:	687a      	ldr	r2, [r7, #4]
   29de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29de2:	3306      	adds	r3, #6
   29de4:	009b      	lsls	r3, r3, #2
   29de6:	18d3      	adds	r3, r2, r3
   29de8:	3304      	adds	r3, #4
   29dea:	681a      	ldr	r2, [r3, #0]
   29dec:	68b9      	ldr	r1, [r7, #8]
   29dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29df0:	3310      	adds	r3, #16
   29df2:	009b      	lsls	r3, r3, #2
   29df4:	18cb      	adds	r3, r1, r3
   29df6:	3304      	adds	r3, #4
   29df8:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   29dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29dfc:	3301      	adds	r3, #1
   29dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
   29e00:	233b      	movs	r3, #59	; 0x3b
   29e02:	18fb      	adds	r3, r7, r3
   29e04:	781b      	ldrb	r3, [r3, #0]
   29e06:	4a06      	ldr	r2, [pc, #24]	; (29e20 <tcc_init+0x3c8>)
   29e08:	5cd3      	ldrb	r3, [r2, r3]
   29e0a:	001a      	movs	r2, r3
   29e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29e0e:	429a      	cmp	r2, r3
   29e10:	dcdc      	bgt.n	29dcc <tcc_init+0x374>
	}

	return STATUS_OK;
   29e12:	2300      	movs	r3, #0
}
   29e14:	0018      	movs	r0, r3
   29e16:	46bd      	mov	sp, r7
   29e18:	b011      	add	sp, #68	; 0x44
   29e1a:	bd90      	pop	{r4, r7, pc}
   29e1c:	00080100 	.word	0x00080100
   29e20:	00039020 	.word	0x00039020

00029e24 <_tcc_set_compare_value>:
static enum status_code _tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare,
		const bool double_buffering_enabled)
{
   29e24:	b590      	push	{r4, r7, lr}
   29e26:	b089      	sub	sp, #36	; 0x24
   29e28:	af00      	add	r7, sp, #0
   29e2a:	60f8      	str	r0, [r7, #12]
   29e2c:	0008      	movs	r0, r1
   29e2e:	607a      	str	r2, [r7, #4]
   29e30:	0019      	movs	r1, r3
   29e32:	230b      	movs	r3, #11
   29e34:	18fb      	adds	r3, r7, r3
   29e36:	1c02      	adds	r2, r0, #0
   29e38:	701a      	strb	r2, [r3, #0]
   29e3a:	230a      	movs	r3, #10
   29e3c:	18fb      	adds	r3, r7, r3
   29e3e:	1c0a      	adds	r2, r1, #0
   29e40:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   29e42:	68fb      	ldr	r3, [r7, #12]
   29e44:	681b      	ldr	r3, [r3, #0]
   29e46:	61fb      	str	r3, [r7, #28]
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);
   29e48:	231b      	movs	r3, #27
   29e4a:	18fc      	adds	r4, r7, r3
   29e4c:	69fb      	ldr	r3, [r7, #28]
   29e4e:	0018      	movs	r0, r3
   29e50:	4b2e      	ldr	r3, [pc, #184]	; (29f0c <_tcc_set_compare_value+0xe8>)
   29e52:	4798      	blx	r3
   29e54:	0003      	movs	r3, r0
   29e56:	7023      	strb	r3, [r4, #0]

	/* Check index */
	if (channel_index >= _tcc_cc_nums[module_index]) {
   29e58:	231b      	movs	r3, #27
   29e5a:	18fb      	adds	r3, r7, r3
   29e5c:	781b      	ldrb	r3, [r3, #0]
   29e5e:	4a2c      	ldr	r2, [pc, #176]	; (29f10 <_tcc_set_compare_value+0xec>)
   29e60:	5cd3      	ldrb	r3, [r2, r3]
   29e62:	220b      	movs	r2, #11
   29e64:	18ba      	adds	r2, r7, r2
   29e66:	7812      	ldrb	r2, [r2, #0]
   29e68:	429a      	cmp	r2, r3
   29e6a:	d301      	bcc.n	29e70 <_tcc_set_compare_value+0x4c>
		return STATUS_ERR_INVALID_ARG;
   29e6c:	2317      	movs	r3, #23
   29e6e:	e049      	b.n	29f04 <_tcc_set_compare_value+0xe0>
	}

	uint32_t max_count = _tcc_maxs[module_index];
   29e70:	231b      	movs	r3, #27
   29e72:	18fb      	adds	r3, r7, r3
   29e74:	781a      	ldrb	r2, [r3, #0]
   29e76:	4b27      	ldr	r3, [pc, #156]	; (29f14 <_tcc_set_compare_value+0xf0>)
   29e78:	0092      	lsls	r2, r2, #2
   29e7a:	58d3      	ldr	r3, [r2, r3]
   29e7c:	617b      	str	r3, [r7, #20]

	/* Check compare value */
	if (compare > max_count) {
   29e7e:	687a      	ldr	r2, [r7, #4]
   29e80:	697b      	ldr	r3, [r7, #20]
   29e82:	429a      	cmp	r2, r3
   29e84:	d901      	bls.n	29e8a <_tcc_set_compare_value+0x66>
		return STATUS_ERR_INVALID_ARG;
   29e86:	2317      	movs	r3, #23
   29e88:	e03c      	b.n	29f04 <_tcc_set_compare_value+0xe0>
	}

	if (double_buffering_enabled) {
   29e8a:	230a      	movs	r3, #10
   29e8c:	18fb      	adds	r3, r7, r3
   29e8e:	781b      	ldrb	r3, [r3, #0]
   29e90:	2b00      	cmp	r3, #0
   29e92:	d020      	beq.n	29ed6 <_tcc_set_compare_value+0xb2>
#if (SAML21) || (SAMC20) || (SAMC21) || (SAML22) || (SAMR30)
		tcc_module->CCBUF[channel_index].reg = compare;
#else
		while(tcc_module->STATUS.reg  &
   29e94:	46c0      	nop			; (mov r8, r8)
   29e96:	69fb      	ldr	r3, [r7, #28]
   29e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				(TCC_STATUS_CCBV0 << channel_index)) {
   29e9a:	220b      	movs	r2, #11
   29e9c:	18ba      	adds	r2, r7, r2
   29e9e:	7812      	ldrb	r2, [r2, #0]
   29ea0:	2180      	movs	r1, #128	; 0x80
   29ea2:	0249      	lsls	r1, r1, #9
   29ea4:	4091      	lsls	r1, r2
   29ea6:	000a      	movs	r2, r1
		while(tcc_module->STATUS.reg  &
   29ea8:	4013      	ands	r3, r2
   29eaa:	d1f4      	bne.n	29e96 <_tcc_set_compare_value+0x72>
			/* Valid check */
		}
		while(tcc_module->SYNCBUSY.reg  &
   29eac:	46c0      	nop			; (mov r8, r8)
   29eae:	69fb      	ldr	r3, [r7, #28]
   29eb0:	689b      	ldr	r3, [r3, #8]
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
   29eb2:	220b      	movs	r2, #11
   29eb4:	18ba      	adds	r2, r7, r2
   29eb6:	7812      	ldrb	r2, [r2, #0]
   29eb8:	2180      	movs	r1, #128	; 0x80
   29eba:	0309      	lsls	r1, r1, #12
   29ebc:	4091      	lsls	r1, r2
   29ebe:	000a      	movs	r2, r1
		while(tcc_module->SYNCBUSY.reg  &
   29ec0:	4013      	ands	r3, r2
   29ec2:	d1f4      	bne.n	29eae <_tcc_set_compare_value+0x8a>
			/* Sync wait */
		}
		tcc_module->CCB[channel_index].reg = compare;
   29ec4:	230b      	movs	r3, #11
   29ec6:	18fb      	adds	r3, r7, r3
   29ec8:	781a      	ldrb	r2, [r3, #0]
   29eca:	69fb      	ldr	r3, [r7, #28]
   29ecc:	321c      	adds	r2, #28
   29ece:	0092      	lsls	r2, r2, #2
   29ed0:	6879      	ldr	r1, [r7, #4]
   29ed2:	50d1      	str	r1, [r2, r3]
   29ed4:	e015      	b.n	29f02 <_tcc_set_compare_value+0xde>
#endif
	} else {
		while(tcc_module->SYNCBUSY.reg  & (TCC_SYNCBUSY_CC0 << channel_index)) {
   29ed6:	46c0      	nop			; (mov r8, r8)
   29ed8:	69fb      	ldr	r3, [r7, #28]
   29eda:	689b      	ldr	r3, [r3, #8]
   29edc:	220b      	movs	r2, #11
   29ede:	18ba      	adds	r2, r7, r2
   29ee0:	7812      	ldrb	r2, [r2, #0]
   29ee2:	2180      	movs	r1, #128	; 0x80
   29ee4:	0049      	lsls	r1, r1, #1
   29ee6:	4091      	lsls	r1, r2
   29ee8:	000a      	movs	r2, r1
   29eea:	4013      	ands	r3, r2
   29eec:	d1f4      	bne.n	29ed8 <_tcc_set_compare_value+0xb4>
			/* Sync wait */
		}
		tcc_module->CC[channel_index].reg = compare;
   29eee:	230b      	movs	r3, #11
   29ef0:	18fb      	adds	r3, r7, r3
   29ef2:	781b      	ldrb	r3, [r3, #0]
   29ef4:	69fa      	ldr	r2, [r7, #28]
   29ef6:	3310      	adds	r3, #16
   29ef8:	009b      	lsls	r3, r3, #2
   29efa:	18d3      	adds	r3, r2, r3
   29efc:	3304      	adds	r3, #4
   29efe:	687a      	ldr	r2, [r7, #4]
   29f00:	601a      	str	r2, [r3, #0]
	}
	return STATUS_OK;
   29f02:	2300      	movs	r3, #0
}
   29f04:	0018      	movs	r0, r3
   29f06:	46bd      	mov	sp, r7
   29f08:	b009      	add	sp, #36	; 0x24
   29f0a:	bd90      	pop	{r4, r7, pc}
   29f0c:	000293c1 	.word	0x000293c1
   29f10:	00039020 	.word	0x00039020
   29f14:	00039014 	.word	0x00039014

00029f18 <tcc_set_compare_value>:
 */
enum status_code tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare)
{
   29f18:	b590      	push	{r4, r7, lr}
   29f1a:	b085      	sub	sp, #20
   29f1c:	af00      	add	r7, sp, #0
   29f1e:	60f8      	str	r0, [r7, #12]
   29f20:	607a      	str	r2, [r7, #4]
   29f22:	230b      	movs	r3, #11
   29f24:	18fb      	adds	r3, r7, r3
   29f26:	1c0a      	adds	r2, r1, #0
   29f28:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	return _tcc_set_compare_value(module_inst, channel_index, compare,
   29f2a:	68fb      	ldr	r3, [r7, #12]
   29f2c:	223c      	movs	r2, #60	; 0x3c
   29f2e:	5c9c      	ldrb	r4, [r3, r2]
   29f30:	687a      	ldr	r2, [r7, #4]
   29f32:	230b      	movs	r3, #11
   29f34:	18fb      	adds	r3, r7, r3
   29f36:	7819      	ldrb	r1, [r3, #0]
   29f38:	68f8      	ldr	r0, [r7, #12]
   29f3a:	0023      	movs	r3, r4
   29f3c:	4c03      	ldr	r4, [pc, #12]	; (29f4c <tcc_set_compare_value+0x34>)
   29f3e:	47a0      	blx	r4
   29f40:	0003      	movs	r3, r0
			module_inst->double_buffering_enabled);
}
   29f42:	0018      	movs	r0, r3
   29f44:	46bd      	mov	sp, r7
   29f46:	b005      	add	sp, #20
   29f48:	bd90      	pop	{r4, r7, pc}
   29f4a:	46c0      	nop			; (mov r8, r8)
   29f4c:	00029e25 	.word	0x00029e25

00029f50 <system_interrupt_enable>:
{
   29f50:	b580      	push	{r7, lr}
   29f52:	b082      	sub	sp, #8
   29f54:	af00      	add	r7, sp, #0
   29f56:	0002      	movs	r2, r0
   29f58:	1dfb      	adds	r3, r7, #7
   29f5a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   29f5c:	4b06      	ldr	r3, [pc, #24]	; (29f78 <system_interrupt_enable+0x28>)
   29f5e:	1dfa      	adds	r2, r7, #7
   29f60:	7812      	ldrb	r2, [r2, #0]
   29f62:	0011      	movs	r1, r2
   29f64:	221f      	movs	r2, #31
   29f66:	400a      	ands	r2, r1
   29f68:	2101      	movs	r1, #1
   29f6a:	4091      	lsls	r1, r2
   29f6c:	000a      	movs	r2, r1
   29f6e:	601a      	str	r2, [r3, #0]
}
   29f70:	46c0      	nop			; (mov r8, r8)
   29f72:	46bd      	mov	sp, r7
   29f74:	b002      	add	sp, #8
   29f76:	bd80      	pop	{r7, pc}
   29f78:	e000e100 	.word	0xe000e100

00029f7c <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
   29f7c:	b580      	push	{r7, lr}
   29f7e:	b082      	sub	sp, #8
   29f80:	af00      	add	r7, sp, #0
   29f82:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
   29f84:	4a04      	ldr	r2, [pc, #16]	; (29f98 <_tcc_interrupt_get_interrupt_vector+0x1c>)
   29f86:	687b      	ldr	r3, [r7, #4]
   29f88:	18d3      	adds	r3, r2, r3
   29f8a:	781b      	ldrb	r3, [r3, #0]
   29f8c:	b25b      	sxtb	r3, r3
}
   29f8e:	0018      	movs	r0, r3
   29f90:	46bd      	mov	sp, r7
   29f92:	b002      	add	sp, #8
   29f94:	bd80      	pop	{r7, pc}
   29f96:	46c0      	nop			; (mov r8, r8)
   29f98:	20000118 	.word	0x20000118

00029f9c <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
   29f9c:	b580      	push	{r7, lr}
   29f9e:	b084      	sub	sp, #16
   29fa0:	af00      	add	r7, sp, #0
   29fa2:	60f8      	str	r0, [r7, #12]
   29fa4:	60b9      	str	r1, [r7, #8]
   29fa6:	1dfb      	adds	r3, r7, #7
   29fa8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   29faa:	1dfb      	adds	r3, r7, #7
   29fac:	781b      	ldrb	r3, [r3, #0]
   29fae:	68fa      	ldr	r2, [r7, #12]
   29fb0:	009b      	lsls	r3, r3, #2
   29fb2:	18d3      	adds	r3, r2, r3
   29fb4:	3304      	adds	r3, #4
   29fb6:	68ba      	ldr	r2, [r7, #8]
   29fb8:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
   29fba:	68fb      	ldr	r3, [r7, #12]
   29fbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   29fbe:	1dfb      	adds	r3, r7, #7
   29fc0:	7819      	ldrb	r1, [r3, #0]
   29fc2:	4b05      	ldr	r3, [pc, #20]	; (29fd8 <tcc_register_callback+0x3c>)
   29fc4:	0089      	lsls	r1, r1, #2
   29fc6:	58cb      	ldr	r3, [r1, r3]
   29fc8:	431a      	orrs	r2, r3
   29fca:	68fb      	ldr	r3, [r7, #12]
   29fcc:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
   29fce:	2300      	movs	r3, #0
}
   29fd0:	0018      	movs	r0, r3
   29fd2:	46bd      	mov	sp, r7
   29fd4:	b004      	add	sp, #16
   29fd6:	bd80      	pop	{r7, pc}
   29fd8:	00039028 	.word	0x00039028

00029fdc <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
   29fdc:	b580      	push	{r7, lr}
   29fde:	b082      	sub	sp, #8
   29fe0:	af00      	add	r7, sp, #0
   29fe2:	6078      	str	r0, [r7, #4]
   29fe4:	000a      	movs	r2, r1
   29fe6:	1cfb      	adds	r3, r7, #3
   29fe8:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
   29fea:	687b      	ldr	r3, [r7, #4]
   29fec:	681b      	ldr	r3, [r3, #0]
   29fee:	0018      	movs	r0, r3
   29ff0:	4b0f      	ldr	r3, [pc, #60]	; (2a030 <tcc_enable_callback+0x54>)
   29ff2:	4798      	blx	r3
   29ff4:	0003      	movs	r3, r0
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
   29ff6:	0018      	movs	r0, r3
   29ff8:	4b0e      	ldr	r3, [pc, #56]	; (2a034 <tcc_enable_callback+0x58>)
   29ffa:	4798      	blx	r3
   29ffc:	0003      	movs	r3, r0
   29ffe:	0018      	movs	r0, r3
   2a000:	4b0d      	ldr	r3, [pc, #52]	; (2a038 <tcc_enable_callback+0x5c>)
   2a002:	4798      	blx	r3

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
   2a004:	687b      	ldr	r3, [r7, #4]
   2a006:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2a008:	1cfb      	adds	r3, r7, #3
   2a00a:	7819      	ldrb	r1, [r3, #0]
   2a00c:	4b0b      	ldr	r3, [pc, #44]	; (2a03c <tcc_enable_callback+0x60>)
   2a00e:	0089      	lsls	r1, r1, #2
   2a010:	58cb      	ldr	r3, [r1, r3]
   2a012:	431a      	orrs	r2, r3
   2a014:	687b      	ldr	r3, [r7, #4]
   2a016:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
   2a018:	687b      	ldr	r3, [r7, #4]
   2a01a:	681b      	ldr	r3, [r3, #0]
   2a01c:	1cfa      	adds	r2, r7, #3
   2a01e:	7811      	ldrb	r1, [r2, #0]
   2a020:	4a06      	ldr	r2, [pc, #24]	; (2a03c <tcc_enable_callback+0x60>)
   2a022:	0089      	lsls	r1, r1, #2
   2a024:	588a      	ldr	r2, [r1, r2]
   2a026:	629a      	str	r2, [r3, #40]	; 0x28
}
   2a028:	46c0      	nop			; (mov r8, r8)
   2a02a:	46bd      	mov	sp, r7
   2a02c:	b002      	add	sp, #8
   2a02e:	bd80      	pop	{r7, pc}
   2a030:	000293c1 	.word	0x000293c1
   2a034:	00029f7d 	.word	0x00029f7d
   2a038:	00029f51 	.word	0x00029f51
   2a03c:	00039028 	.word	0x00039028

0002a040 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   2a040:	b580      	push	{r7, lr}
   2a042:	af00      	add	r7, sp, #0
   2a044:	2000      	movs	r0, #0
   2a046:	4b02      	ldr	r3, [pc, #8]	; (2a050 <TCC0_Handler+0x10>)
   2a048:	4798      	blx	r3
   2a04a:	46c0      	nop			; (mov r8, r8)
   2a04c:	46bd      	mov	sp, r7
   2a04e:	bd80      	pop	{r7, pc}
   2a050:	0002a07d 	.word	0x0002a07d

0002a054 <TCC1_Handler>:
   2a054:	b580      	push	{r7, lr}
   2a056:	af00      	add	r7, sp, #0
   2a058:	2001      	movs	r0, #1
   2a05a:	4b02      	ldr	r3, [pc, #8]	; (2a064 <TCC1_Handler+0x10>)
   2a05c:	4798      	blx	r3
   2a05e:	46c0      	nop			; (mov r8, r8)
   2a060:	46bd      	mov	sp, r7
   2a062:	bd80      	pop	{r7, pc}
   2a064:	0002a07d 	.word	0x0002a07d

0002a068 <TCC2_Handler>:
   2a068:	b580      	push	{r7, lr}
   2a06a:	af00      	add	r7, sp, #0
   2a06c:	2002      	movs	r0, #2
   2a06e:	4b02      	ldr	r3, [pc, #8]	; (2a078 <TCC2_Handler+0x10>)
   2a070:	4798      	blx	r3
   2a072:	46c0      	nop			; (mov r8, r8)
   2a074:	46bd      	mov	sp, r7
   2a076:	bd80      	pop	{r7, pc}
   2a078:	0002a07d 	.word	0x0002a07d

0002a07c <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   2a07c:	b580      	push	{r7, lr}
   2a07e:	b086      	sub	sp, #24
   2a080:	af00      	add	r7, sp, #0
   2a082:	0002      	movs	r2, r0
   2a084:	1dfb      	adds	r3, r7, #7
   2a086:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   2a088:	1dfb      	adds	r3, r7, #7
   2a08a:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   2a08c:	4b18      	ldr	r3, [pc, #96]	; (2a0f0 <_tcc_interrupt_handler+0x74>)
   2a08e:	0092      	lsls	r2, r2, #2
   2a090:	58d3      	ldr	r3, [r2, r3]
   2a092:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2a094:	693b      	ldr	r3, [r7, #16]
   2a096:	681b      	ldr	r3, [r3, #0]
   2a098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   2a09a:	693b      	ldr	r3, [r7, #16]
   2a09c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2a09e:	401a      	ands	r2, r3
			module->enable_callback_mask);
   2a0a0:	693b      	ldr	r3, [r7, #16]
   2a0a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2a0a4:	4013      	ands	r3, r2
   2a0a6:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2a0a8:	2300      	movs	r3, #0
   2a0aa:	617b      	str	r3, [r7, #20]
   2a0ac:	e019      	b.n	2a0e2 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   2a0ae:	4b11      	ldr	r3, [pc, #68]	; (2a0f4 <_tcc_interrupt_handler+0x78>)
   2a0b0:	697a      	ldr	r2, [r7, #20]
   2a0b2:	0092      	lsls	r2, r2, #2
   2a0b4:	58d3      	ldr	r3, [r2, r3]
   2a0b6:	68fa      	ldr	r2, [r7, #12]
   2a0b8:	4013      	ands	r3, r2
   2a0ba:	d00f      	beq.n	2a0dc <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   2a0bc:	693a      	ldr	r2, [r7, #16]
   2a0be:	697b      	ldr	r3, [r7, #20]
   2a0c0:	009b      	lsls	r3, r3, #2
   2a0c2:	18d3      	adds	r3, r2, r3
   2a0c4:	3304      	adds	r3, #4
   2a0c6:	681b      	ldr	r3, [r3, #0]
   2a0c8:	693a      	ldr	r2, [r7, #16]
   2a0ca:	0010      	movs	r0, r2
   2a0cc:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   2a0ce:	693b      	ldr	r3, [r7, #16]
   2a0d0:	681b      	ldr	r3, [r3, #0]
   2a0d2:	4a08      	ldr	r2, [pc, #32]	; (2a0f4 <_tcc_interrupt_handler+0x78>)
   2a0d4:	6979      	ldr	r1, [r7, #20]
   2a0d6:	0089      	lsls	r1, r1, #2
   2a0d8:	588a      	ldr	r2, [r1, r2]
   2a0da:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2a0dc:	697b      	ldr	r3, [r7, #20]
   2a0de:	3301      	adds	r3, #1
   2a0e0:	617b      	str	r3, [r7, #20]
   2a0e2:	697b      	ldr	r3, [r7, #20]
   2a0e4:	2b0b      	cmp	r3, #11
   2a0e6:	dde2      	ble.n	2a0ae <_tcc_interrupt_handler+0x32>
		}
	}
}
   2a0e8:	46c0      	nop			; (mov r8, r8)
   2a0ea:	46bd      	mov	sp, r7
   2a0ec:	b006      	add	sp, #24
   2a0ee:	bd80      	pop	{r7, pc}
   2a0f0:	20005be8 	.word	0x20005be8
   2a0f4:	00039028 	.word	0x00039028

0002a0f8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   2a0f8:	b580      	push	{r7, lr}
   2a0fa:	b082      	sub	sp, #8
   2a0fc:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   2a0fe:	4b2f      	ldr	r3, [pc, #188]	; (2a1bc <Reset_Handler+0xc4>)
   2a100:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   2a102:	4b2f      	ldr	r3, [pc, #188]	; (2a1c0 <Reset_Handler+0xc8>)
   2a104:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   2a106:	687a      	ldr	r2, [r7, #4]
   2a108:	683b      	ldr	r3, [r7, #0]
   2a10a:	429a      	cmp	r2, r3
   2a10c:	d00c      	beq.n	2a128 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   2a10e:	e007      	b.n	2a120 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   2a110:	683b      	ldr	r3, [r7, #0]
   2a112:	1d1a      	adds	r2, r3, #4
   2a114:	603a      	str	r2, [r7, #0]
   2a116:	687a      	ldr	r2, [r7, #4]
   2a118:	1d11      	adds	r1, r2, #4
   2a11a:	6079      	str	r1, [r7, #4]
   2a11c:	6812      	ldr	r2, [r2, #0]
   2a11e:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   2a120:	683a      	ldr	r2, [r7, #0]
   2a122:	4b28      	ldr	r3, [pc, #160]	; (2a1c4 <Reset_Handler+0xcc>)
   2a124:	429a      	cmp	r2, r3
   2a126:	d3f3      	bcc.n	2a110 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   2a128:	4b27      	ldr	r3, [pc, #156]	; (2a1c8 <Reset_Handler+0xd0>)
   2a12a:	603b      	str	r3, [r7, #0]
   2a12c:	e004      	b.n	2a138 <Reset_Handler+0x40>
                *pDest++ = 0;
   2a12e:	683b      	ldr	r3, [r7, #0]
   2a130:	1d1a      	adds	r2, r3, #4
   2a132:	603a      	str	r2, [r7, #0]
   2a134:	2200      	movs	r2, #0
   2a136:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   2a138:	683a      	ldr	r2, [r7, #0]
   2a13a:	4b24      	ldr	r3, [pc, #144]	; (2a1cc <Reset_Handler+0xd4>)
   2a13c:	429a      	cmp	r2, r3
   2a13e:	d3f6      	bcc.n	2a12e <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   2a140:	4b23      	ldr	r3, [pc, #140]	; (2a1d0 <Reset_Handler+0xd8>)
   2a142:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   2a144:	4b23      	ldr	r3, [pc, #140]	; (2a1d4 <Reset_Handler+0xdc>)
   2a146:	687a      	ldr	r2, [r7, #4]
   2a148:	21ff      	movs	r1, #255	; 0xff
   2a14a:	438a      	bics	r2, r1
   2a14c:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   2a14e:	4a22      	ldr	r2, [pc, #136]	; (2a1d8 <Reset_Handler+0xe0>)
   2a150:	2390      	movs	r3, #144	; 0x90
   2a152:	005b      	lsls	r3, r3, #1
   2a154:	2102      	movs	r1, #2
   2a156:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   2a158:	4a20      	ldr	r2, [pc, #128]	; (2a1dc <Reset_Handler+0xe4>)
   2a15a:	78d3      	ldrb	r3, [r2, #3]
   2a15c:	2103      	movs	r1, #3
   2a15e:	438b      	bics	r3, r1
   2a160:	1c19      	adds	r1, r3, #0
   2a162:	2302      	movs	r3, #2
   2a164:	430b      	orrs	r3, r1
   2a166:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   2a168:	4a1c      	ldr	r2, [pc, #112]	; (2a1dc <Reset_Handler+0xe4>)
   2a16a:	78d3      	ldrb	r3, [r2, #3]
   2a16c:	210c      	movs	r1, #12
   2a16e:	438b      	bics	r3, r1
   2a170:	1c19      	adds	r1, r3, #0
   2a172:	2308      	movs	r3, #8
   2a174:	430b      	orrs	r3, r1
   2a176:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   2a178:	4a19      	ldr	r2, [pc, #100]	; (2a1e0 <Reset_Handler+0xe8>)
   2a17a:	7b93      	ldrb	r3, [r2, #14]
   2a17c:	2130      	movs	r1, #48	; 0x30
   2a17e:	438b      	bics	r3, r1
   2a180:	1c19      	adds	r1, r3, #0
   2a182:	2320      	movs	r3, #32
   2a184:	430b      	orrs	r3, r1
   2a186:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   2a188:	4a15      	ldr	r2, [pc, #84]	; (2a1e0 <Reset_Handler+0xe8>)
   2a18a:	7b93      	ldrb	r3, [r2, #14]
   2a18c:	210c      	movs	r1, #12
   2a18e:	438b      	bics	r3, r1
   2a190:	1c19      	adds	r1, r3, #0
   2a192:	2308      	movs	r3, #8
   2a194:	430b      	orrs	r3, r1
   2a196:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   2a198:	4a11      	ldr	r2, [pc, #68]	; (2a1e0 <Reset_Handler+0xe8>)
   2a19a:	7b93      	ldrb	r3, [r2, #14]
   2a19c:	2103      	movs	r1, #3
   2a19e:	438b      	bics	r3, r1
   2a1a0:	1c19      	adds	r1, r3, #0
   2a1a2:	2302      	movs	r3, #2
   2a1a4:	430b      	orrs	r3, r1
   2a1a6:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   2a1a8:	4a0e      	ldr	r2, [pc, #56]	; (2a1e4 <Reset_Handler+0xec>)
   2a1aa:	6853      	ldr	r3, [r2, #4]
   2a1ac:	2180      	movs	r1, #128	; 0x80
   2a1ae:	430b      	orrs	r3, r1
   2a1b0:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   2a1b2:	4b0d      	ldr	r3, [pc, #52]	; (2a1e8 <Reset_Handler+0xf0>)
   2a1b4:	4798      	blx	r3

        /* Branch to main function */
        main();
   2a1b6:	4b0d      	ldr	r3, [pc, #52]	; (2a1ec <Reset_Handler+0xf4>)
   2a1b8:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   2a1ba:	e7fe      	b.n	2a1ba <Reset_Handler+0xc2>
   2a1bc:	00039d6c 	.word	0x00039d6c
   2a1c0:	20000000 	.word	0x20000000
   2a1c4:	200002f0 	.word	0x200002f0
   2a1c8:	200002f0 	.word	0x200002f0
   2a1cc:	20005c58 	.word	0x20005c58
   2a1d0:	00012000 	.word	0x00012000
   2a1d4:	e000ed00 	.word	0xe000ed00
   2a1d8:	41007000 	.word	0x41007000
   2a1dc:	41005000 	.word	0x41005000
   2a1e0:	41004800 	.word	0x41004800
   2a1e4:	41004000 	.word	0x41004000
   2a1e8:	00034539 	.word	0x00034539
   2a1ec:	0003192d 	.word	0x0003192d

0002a1f0 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
   2a1f0:	b580      	push	{r7, lr}
   2a1f2:	af00      	add	r7, sp, #0
  __asm volatile (
   2a1f4:	2004      	movs	r0, #4
   2a1f6:	4671      	mov	r1, lr
   2a1f8:	4208      	tst	r0, r1
   2a1fa:	d002      	beq.n	2a202 <_MSP>
   2a1fc:	f3ef 8009 	mrs	r0, PSP
   2a200:	e001      	b.n	2a206 <_HALT>

0002a202 <_MSP>:
   2a202:	f3ef 8008 	mrs	r0, MSP

0002a206 <_HALT>:
   2a206:	6941      	ldr	r1, [r0, #20]
   2a208:	e004      	b.n	2a214 <HardFault_HandlerC>
   2a20a:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
   2a20c:	46c0      	nop			; (mov r8, r8)
   2a20e:	46bd      	mov	sp, r7
   2a210:	bd80      	pop	{r7, pc}
	...

0002a214 <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
   2a214:	b580      	push	{r7, lr}
   2a216:	b090      	sub	sp, #64	; 0x40
   2a218:	af00      	add	r7, sp, #0
   2a21a:	6078      	str	r0, [r7, #4]
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
   2a21c:	687b      	ldr	r3, [r7, #4]
   2a21e:	681b      	ldr	r3, [r3, #0]
   2a220:	63fb      	str	r3, [r7, #60]	; 0x3c
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
   2a222:	687b      	ldr	r3, [r7, #4]
   2a224:	685b      	ldr	r3, [r3, #4]
   2a226:	63bb      	str	r3, [r7, #56]	; 0x38
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
   2a228:	687b      	ldr	r3, [r7, #4]
   2a22a:	689b      	ldr	r3, [r3, #8]
   2a22c:	637b      	str	r3, [r7, #52]	; 0x34
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
   2a22e:	687b      	ldr	r3, [r7, #4]
   2a230:	68db      	ldr	r3, [r3, #12]
   2a232:	633b      	str	r3, [r7, #48]	; 0x30
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   2a234:	687b      	ldr	r3, [r7, #4]
   2a236:	691b      	ldr	r3, [r3, #16]
   2a238:	62fb      	str	r3, [r7, #44]	; 0x2c
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
   2a23a:	687b      	ldr	r3, [r7, #4]
   2a23c:	695b      	ldr	r3, [r3, #20]
   2a23e:	62bb      	str	r3, [r7, #40]	; 0x28
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
   2a240:	687b      	ldr	r3, [r7, #4]
   2a242:	699b      	ldr	r3, [r3, #24]
   2a244:	627b      	str	r3, [r7, #36]	; 0x24
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
   2a246:	687b      	ldr	r3, [r7, #4]
   2a248:	69db      	ldr	r3, [r3, #28]
   2a24a:	623b      	str	r3, [r7, #32]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
   2a24c:	4b0b      	ldr	r3, [pc, #44]	; (2a27c <HardFault_HandlerC+0x68>)
   2a24e:	681b      	ldr	r3, [r3, #0]
   2a250:	61fb      	str	r3, [r7, #28]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   2a252:	4b0b      	ldr	r3, [pc, #44]	; (2a280 <HardFault_HandlerC+0x6c>)
   2a254:	681b      	ldr	r3, [r3, #0]
   2a256:	61bb      	str	r3, [r7, #24]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   2a258:	4b0a      	ldr	r3, [pc, #40]	; (2a284 <HardFault_HandlerC+0x70>)
   2a25a:	681b      	ldr	r3, [r3, #0]
   2a25c:	617b      	str	r3, [r7, #20]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   2a25e:	4b0a      	ldr	r3, [pc, #40]	; (2a288 <HardFault_HandlerC+0x74>)
   2a260:	681b      	ldr	r3, [r3, #0]
   2a262:	613b      	str	r3, [r7, #16]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   2a264:	4b09      	ldr	r3, [pc, #36]	; (2a28c <HardFault_HandlerC+0x78>)
   2a266:	681b      	ldr	r3, [r3, #0]
   2a268:	60bb      	str	r3, [r7, #8]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   2a26a:	4b09      	ldr	r3, [pc, #36]	; (2a290 <HardFault_HandlerC+0x7c>)
   2a26c:	681b      	ldr	r3, [r3, #0]
   2a26e:	60fb      	str	r3, [r7, #12]
	
	__asm("BKPT #0\n") ; // Break into the debugger
   2a270:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
   2a272:	46c0      	nop			; (mov r8, r8)
   2a274:	46bd      	mov	sp, r7
   2a276:	b010      	add	sp, #64	; 0x40
   2a278:	bd80      	pop	{r7, pc}
   2a27a:	46c0      	nop			; (mov r8, r8)
   2a27c:	e000ed28 	.word	0xe000ed28
   2a280:	e000ed2c 	.word	0xe000ed2c
   2a284:	e000ed30 	.word	0xe000ed30
   2a288:	e000ed3c 	.word	0xe000ed3c
   2a28c:	e000ed34 	.word	0xe000ed34
   2a290:	e000ed38 	.word	0xe000ed38

0002a294 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   2a294:	b580      	push	{r7, lr}
   2a296:	b086      	sub	sp, #24
   2a298:	af00      	add	r7, sp, #0
   2a29a:	60f8      	str	r0, [r7, #12]
   2a29c:	60b9      	str	r1, [r7, #8]
   2a29e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2a2a0:	2300      	movs	r3, #0
   2a2a2:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   2a2a4:	68fb      	ldr	r3, [r7, #12]
   2a2a6:	2b00      	cmp	r3, #0
   2a2a8:	d012      	beq.n	2a2d0 <_read+0x3c>
		return -1;
   2a2aa:	2301      	movs	r3, #1
   2a2ac:	425b      	negs	r3, r3
   2a2ae:	e013      	b.n	2a2d8 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   2a2b0:	4b0b      	ldr	r3, [pc, #44]	; (2a2e0 <_read+0x4c>)
   2a2b2:	681a      	ldr	r2, [r3, #0]
   2a2b4:	4b0b      	ldr	r3, [pc, #44]	; (2a2e4 <_read+0x50>)
   2a2b6:	681b      	ldr	r3, [r3, #0]
   2a2b8:	68b9      	ldr	r1, [r7, #8]
   2a2ba:	0018      	movs	r0, r3
   2a2bc:	4790      	blx	r2
		ptr++;
   2a2be:	68bb      	ldr	r3, [r7, #8]
   2a2c0:	3301      	adds	r3, #1
   2a2c2:	60bb      	str	r3, [r7, #8]
		nChars++;
   2a2c4:	697b      	ldr	r3, [r7, #20]
   2a2c6:	3301      	adds	r3, #1
   2a2c8:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   2a2ca:	687b      	ldr	r3, [r7, #4]
   2a2cc:	3b01      	subs	r3, #1
   2a2ce:	607b      	str	r3, [r7, #4]
   2a2d0:	687b      	ldr	r3, [r7, #4]
   2a2d2:	2b00      	cmp	r3, #0
   2a2d4:	dcec      	bgt.n	2a2b0 <_read+0x1c>
	}
	return nChars;
   2a2d6:	697b      	ldr	r3, [r7, #20]
}
   2a2d8:	0018      	movs	r0, r3
   2a2da:	46bd      	mov	sp, r7
   2a2dc:	b006      	add	sp, #24
   2a2de:	bd80      	pop	{r7, pc}
   2a2e0:	20005bf4 	.word	0x20005bf4
   2a2e4:	20005bfc 	.word	0x20005bfc

0002a2e8 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   2a2e8:	b580      	push	{r7, lr}
   2a2ea:	b086      	sub	sp, #24
   2a2ec:	af00      	add	r7, sp, #0
   2a2ee:	60f8      	str	r0, [r7, #12]
   2a2f0:	60b9      	str	r1, [r7, #8]
   2a2f2:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2a2f4:	2300      	movs	r3, #0
   2a2f6:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   2a2f8:	68fb      	ldr	r3, [r7, #12]
   2a2fa:	2b01      	cmp	r3, #1
   2a2fc:	d01d      	beq.n	2a33a <_write+0x52>
   2a2fe:	68fb      	ldr	r3, [r7, #12]
   2a300:	2b02      	cmp	r3, #2
   2a302:	d01a      	beq.n	2a33a <_write+0x52>
   2a304:	68fb      	ldr	r3, [r7, #12]
   2a306:	2b03      	cmp	r3, #3
   2a308:	d017      	beq.n	2a33a <_write+0x52>
		return -1;
   2a30a:	2301      	movs	r3, #1
   2a30c:	425b      	negs	r3, r3
   2a30e:	e018      	b.n	2a342 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   2a310:	4b0e      	ldr	r3, [pc, #56]	; (2a34c <_write+0x64>)
   2a312:	681a      	ldr	r2, [r3, #0]
   2a314:	4b0e      	ldr	r3, [pc, #56]	; (2a350 <_write+0x68>)
   2a316:	6818      	ldr	r0, [r3, #0]
   2a318:	68bb      	ldr	r3, [r7, #8]
   2a31a:	1c59      	adds	r1, r3, #1
   2a31c:	60b9      	str	r1, [r7, #8]
   2a31e:	781b      	ldrb	r3, [r3, #0]
   2a320:	0019      	movs	r1, r3
   2a322:	4790      	blx	r2
   2a324:	1e03      	subs	r3, r0, #0
   2a326:	da02      	bge.n	2a32e <_write+0x46>
			return -1;
   2a328:	2301      	movs	r3, #1
   2a32a:	425b      	negs	r3, r3
   2a32c:	e009      	b.n	2a342 <_write+0x5a>
		}
		++nChars;
   2a32e:	697b      	ldr	r3, [r7, #20]
   2a330:	3301      	adds	r3, #1
   2a332:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   2a334:	687b      	ldr	r3, [r7, #4]
   2a336:	3b01      	subs	r3, #1
   2a338:	607b      	str	r3, [r7, #4]
   2a33a:	687b      	ldr	r3, [r7, #4]
   2a33c:	2b00      	cmp	r3, #0
   2a33e:	d1e7      	bne.n	2a310 <_write+0x28>
	}
	return nChars;
   2a340:	697b      	ldr	r3, [r7, #20]
}
   2a342:	0018      	movs	r0, r3
   2a344:	46bd      	mov	sp, r7
   2a346:	b006      	add	sp, #24
   2a348:	bd80      	pop	{r7, pc}
   2a34a:	46c0      	nop			; (mov r8, r8)
   2a34c:	20005bf8 	.word	0x20005bf8
   2a350:	20005bfc 	.word	0x20005bfc

0002a354 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   2a354:	b580      	push	{r7, lr}
   2a356:	b084      	sub	sp, #16
   2a358:	af00      	add	r7, sp, #0
   2a35a:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   2a35c:	4b0a      	ldr	r3, [pc, #40]	; (2a388 <_sbrk+0x34>)
   2a35e:	681b      	ldr	r3, [r3, #0]
   2a360:	2b00      	cmp	r3, #0
   2a362:	d102      	bne.n	2a36a <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   2a364:	4b08      	ldr	r3, [pc, #32]	; (2a388 <_sbrk+0x34>)
   2a366:	4a09      	ldr	r2, [pc, #36]	; (2a38c <_sbrk+0x38>)
   2a368:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   2a36a:	4b07      	ldr	r3, [pc, #28]	; (2a388 <_sbrk+0x34>)
   2a36c:	681b      	ldr	r3, [r3, #0]
   2a36e:	60fb      	str	r3, [r7, #12]

	heap += incr;
   2a370:	4b05      	ldr	r3, [pc, #20]	; (2a388 <_sbrk+0x34>)
   2a372:	681a      	ldr	r2, [r3, #0]
   2a374:	687b      	ldr	r3, [r7, #4]
   2a376:	18d2      	adds	r2, r2, r3
   2a378:	4b03      	ldr	r3, [pc, #12]	; (2a388 <_sbrk+0x34>)
   2a37a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   2a37c:	68fb      	ldr	r3, [r7, #12]
}
   2a37e:	0018      	movs	r0, r3
   2a380:	46bd      	mov	sp, r7
   2a382:	b004      	add	sp, #16
   2a384:	bd80      	pop	{r7, pc}
   2a386:	46c0      	nop			; (mov r8, r8)
   2a388:	200042c0 	.word	0x200042c0
   2a38c:	20007c58 	.word	0x20007c58

0002a390 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   2a390:	b580      	push	{r7, lr}
   2a392:	b082      	sub	sp, #8
   2a394:	af00      	add	r7, sp, #0
   2a396:	6078      	str	r0, [r7, #4]
	return -1;
   2a398:	2301      	movs	r3, #1
   2a39a:	425b      	negs	r3, r3
}
   2a39c:	0018      	movs	r0, r3
   2a39e:	46bd      	mov	sp, r7
   2a3a0:	b002      	add	sp, #8
   2a3a2:	bd80      	pop	{r7, pc}

0002a3a4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   2a3a4:	b580      	push	{r7, lr}
   2a3a6:	b082      	sub	sp, #8
   2a3a8:	af00      	add	r7, sp, #0
   2a3aa:	6078      	str	r0, [r7, #4]
   2a3ac:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   2a3ae:	683b      	ldr	r3, [r7, #0]
   2a3b0:	2280      	movs	r2, #128	; 0x80
   2a3b2:	0192      	lsls	r2, r2, #6
   2a3b4:	605a      	str	r2, [r3, #4]

	return 0;
   2a3b6:	2300      	movs	r3, #0
}
   2a3b8:	0018      	movs	r0, r3
   2a3ba:	46bd      	mov	sp, r7
   2a3bc:	b002      	add	sp, #8
   2a3be:	bd80      	pop	{r7, pc}

0002a3c0 <_isatty>:

extern int _isatty(int file)
{
   2a3c0:	b580      	push	{r7, lr}
   2a3c2:	b082      	sub	sp, #8
   2a3c4:	af00      	add	r7, sp, #0
   2a3c6:	6078      	str	r0, [r7, #4]
	return 1;
   2a3c8:	2301      	movs	r3, #1
}
   2a3ca:	0018      	movs	r0, r3
   2a3cc:	46bd      	mov	sp, r7
   2a3ce:	b002      	add	sp, #8
   2a3d0:	bd80      	pop	{r7, pc}

0002a3d2 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   2a3d2:	b580      	push	{r7, lr}
   2a3d4:	b084      	sub	sp, #16
   2a3d6:	af00      	add	r7, sp, #0
   2a3d8:	60f8      	str	r0, [r7, #12]
   2a3da:	60b9      	str	r1, [r7, #8]
   2a3dc:	607a      	str	r2, [r7, #4]
	return 0;
   2a3de:	2300      	movs	r3, #0
}
   2a3e0:	0018      	movs	r0, r3
   2a3e2:	46bd      	mov	sp, r7
   2a3e4:	b004      	add	sp, #16
   2a3e6:	bd80      	pop	{r7, pc}

0002a3e8 <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
   2a3e8:	b580      	push	{r7, lr}
   2a3ea:	b082      	sub	sp, #8
   2a3ec:	af00      	add	r7, sp, #0
   2a3ee:	6078      	str	r0, [r7, #4]
	time->second = 0;
   2a3f0:	687b      	ldr	r3, [r7, #4]
   2a3f2:	2200      	movs	r2, #0
   2a3f4:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
   2a3f6:	687b      	ldr	r3, [r7, #4]
   2a3f8:	2200      	movs	r2, #0
   2a3fa:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
   2a3fc:	687b      	ldr	r3, [r7, #4]
   2a3fe:	2200      	movs	r2, #0
   2a400:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
   2a402:	687b      	ldr	r3, [r7, #4]
   2a404:	2200      	movs	r2, #0
   2a406:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
   2a408:	687b      	ldr	r3, [r7, #4]
   2a40a:	2201      	movs	r2, #1
   2a40c:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
   2a40e:	687b      	ldr	r3, [r7, #4]
   2a410:	2201      	movs	r2, #1
   2a412:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
   2a414:	687b      	ldr	r3, [r7, #4]
   2a416:	22fa      	movs	r2, #250	; 0xfa
   2a418:	00d2      	lsls	r2, r2, #3
   2a41a:	80da      	strh	r2, [r3, #6]
}
   2a41c:	46c0      	nop			; (mov r8, r8)
   2a41e:	46bd      	mov	sp, r7
   2a420:	b002      	add	sp, #8
   2a422:	bd80      	pop	{r7, pc}

0002a424 <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
   2a424:	b580      	push	{r7, lr}
   2a426:	b086      	sub	sp, #24
   2a428:	af00      	add	r7, sp, #0
   2a42a:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
   2a42c:	230c      	movs	r3, #12
   2a42e:	18fb      	adds	r3, r7, r3
   2a430:	0018      	movs	r0, r3
   2a432:	4b23      	ldr	r3, [pc, #140]	; (2a4c0 <rtc_calendar_get_config_defaults+0x9c>)
   2a434:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   2a436:	687b      	ldr	r3, [r7, #4]
   2a438:	22a0      	movs	r2, #160	; 0xa0
   2a43a:	0112      	lsls	r2, r2, #4
   2a43c:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
   2a43e:	687b      	ldr	r3, [r7, #4]
   2a440:	2200      	movs	r2, #0
   2a442:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   2a444:	687b      	ldr	r3, [r7, #4]
   2a446:	2200      	movs	r2, #0
   2a448:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
   2a44a:	687b      	ldr	r3, [r7, #4]
   2a44c:	2200      	movs	r2, #0
   2a44e:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
   2a450:	687b      	ldr	r3, [r7, #4]
   2a452:	22fa      	movs	r2, #250	; 0xfa
   2a454:	00d2      	lsls	r2, r2, #3
   2a456:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2a458:	2317      	movs	r3, #23
   2a45a:	18fb      	adds	r3, r7, r3
   2a45c:	2200      	movs	r2, #0
   2a45e:	701a      	strb	r2, [r3, #0]
   2a460:	e025      	b.n	2a4ae <rtc_calendar_get_config_defaults+0x8a>
		config->alarm[i].time = time;
   2a462:	2317      	movs	r3, #23
   2a464:	18fb      	adds	r3, r7, r3
   2a466:	781a      	ldrb	r2, [r3, #0]
   2a468:	6879      	ldr	r1, [r7, #4]
   2a46a:	2008      	movs	r0, #8
   2a46c:	0013      	movs	r3, r2
   2a46e:	009b      	lsls	r3, r3, #2
   2a470:	189b      	adds	r3, r3, r2
   2a472:	005b      	lsls	r3, r3, #1
   2a474:	18cb      	adds	r3, r1, r3
   2a476:	181a      	adds	r2, r3, r0
   2a478:	230c      	movs	r3, #12
   2a47a:	18fb      	adds	r3, r7, r3
   2a47c:	0010      	movs	r0, r2
   2a47e:	0019      	movs	r1, r3
   2a480:	2308      	movs	r3, #8
   2a482:	001a      	movs	r2, r3
   2a484:	4b0f      	ldr	r3, [pc, #60]	; (2a4c4 <rtc_calendar_get_config_defaults+0xa0>)
   2a486:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2a488:	2317      	movs	r3, #23
   2a48a:	18fb      	adds	r3, r7, r3
   2a48c:	781a      	ldrb	r2, [r3, #0]
   2a48e:	6879      	ldr	r1, [r7, #4]
   2a490:	0013      	movs	r3, r2
   2a492:	009b      	lsls	r3, r3, #2
   2a494:	189b      	adds	r3, r3, r2
   2a496:	005b      	lsls	r3, r3, #1
   2a498:	18cb      	adds	r3, r1, r3
   2a49a:	3310      	adds	r3, #16
   2a49c:	2206      	movs	r2, #6
   2a49e:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2a4a0:	2317      	movs	r3, #23
   2a4a2:	18fb      	adds	r3, r7, r3
   2a4a4:	781a      	ldrb	r2, [r3, #0]
   2a4a6:	2317      	movs	r3, #23
   2a4a8:	18fb      	adds	r3, r7, r3
   2a4aa:	3201      	adds	r2, #1
   2a4ac:	701a      	strb	r2, [r3, #0]
   2a4ae:	2317      	movs	r3, #23
   2a4b0:	18fb      	adds	r3, r7, r3
   2a4b2:	781b      	ldrb	r3, [r3, #0]
   2a4b4:	2b00      	cmp	r3, #0
   2a4b6:	d0d4      	beq.n	2a462 <rtc_calendar_get_config_defaults+0x3e>
	}
}
   2a4b8:	46c0      	nop			; (mov r8, r8)
   2a4ba:	46bd      	mov	sp, r7
   2a4bc:	b006      	add	sp, #24
   2a4be:	bd80      	pop	{r7, pc}
   2a4c0:	0002a3e9 	.word	0x0002a3e9
   2a4c4:	000345a9 	.word	0x000345a9

0002a4c8 <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
   2a4c8:	b580      	push	{r7, lr}
   2a4ca:	b088      	sub	sp, #32
   2a4cc:	af00      	add	r7, sp, #0
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
   2a4ce:	230c      	movs	r3, #12
   2a4d0:	18fb      	adds	r3, r7, r3
   2a4d2:	0018      	movs	r0, r3
   2a4d4:	4b1a      	ldr	r3, [pc, #104]	; (2a540 <configure_rtc_calendar+0x78>)
   2a4d6:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
   2a4d8:	1d3b      	adds	r3, r7, #4
   2a4da:	0018      	movs	r0, r3
   2a4dc:	4b19      	ldr	r3, [pc, #100]	; (2a544 <configure_rtc_calendar+0x7c>)
   2a4de:	4798      	blx	r3
	init_time.year   = 2014;
   2a4e0:	1d3b      	adds	r3, r7, #4
   2a4e2:	4a19      	ldr	r2, [pc, #100]	; (2a548 <configure_rtc_calendar+0x80>)
   2a4e4:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
   2a4e6:	1d3b      	adds	r3, r7, #4
   2a4e8:	2201      	movs	r2, #1
   2a4ea:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
   2a4ec:	1d3b      	adds	r3, r7, #4
   2a4ee:	2201      	movs	r2, #1
   2a4f0:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
   2a4f2:	1d3b      	adds	r3, r7, #4
   2a4f4:	2200      	movs	r2, #0
   2a4f6:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
   2a4f8:	1d3b      	adds	r3, r7, #4
   2a4fa:	2200      	movs	r2, #0
   2a4fc:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
   2a4fe:	1d3b      	adds	r3, r7, #4
   2a500:	2204      	movs	r2, #4
   2a502:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
   2a504:	230c      	movs	r3, #12
   2a506:	18fb      	adds	r3, r7, r3
   2a508:	2201      	movs	r2, #1
   2a50a:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   2a50c:	230c      	movs	r3, #12
   2a50e:	18fb      	adds	r3, r7, r3
   2a510:	1d3a      	adds	r2, r7, #4
   2a512:	3308      	adds	r3, #8
   2a514:	ca03      	ldmia	r2!, {r0, r1}
   2a516:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2a518:	230c      	movs	r3, #12
   2a51a:	18fb      	adds	r3, r7, r3
   2a51c:	2206      	movs	r2, #6
   2a51e:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   2a520:	230c      	movs	r3, #12
   2a522:	18fa      	adds	r2, r7, r3
   2a524:	4909      	ldr	r1, [pc, #36]	; (2a54c <configure_rtc_calendar+0x84>)
   2a526:	4b0a      	ldr	r3, [pc, #40]	; (2a550 <configure_rtc_calendar+0x88>)
   2a528:	0018      	movs	r0, r3
   2a52a:	4b0a      	ldr	r3, [pc, #40]	; (2a554 <configure_rtc_calendar+0x8c>)
   2a52c:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
   2a52e:	4b08      	ldr	r3, [pc, #32]	; (2a550 <configure_rtc_calendar+0x88>)
   2a530:	0018      	movs	r0, r3
   2a532:	4b09      	ldr	r3, [pc, #36]	; (2a558 <configure_rtc_calendar+0x90>)
   2a534:	4798      	blx	r3
}
   2a536:	46c0      	nop			; (mov r8, r8)
   2a538:	46bd      	mov	sp, r7
   2a53a:	b008      	add	sp, #32
   2a53c:	bd80      	pop	{r7, pc}
   2a53e:	46c0      	nop			; (mov r8, r8)
   2a540:	0002a425 	.word	0x0002a425
   2a544:	0002a3e9 	.word	0x0002a3e9
   2a548:	000007de 	.word	0x000007de
   2a54c:	40001400 	.word	0x40001400
   2a550:	20005c00 	.word	0x20005c00
   2a554:	00025ed9 	.word	0x00025ed9
   2a558:	00025c05 	.word	0x00025c05

0002a55c <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   2a55c:	b590      	push	{r4, r7, lr}
   2a55e:	b085      	sub	sp, #20
   2a560:	af00      	add	r7, sp, #0
   2a562:	0002      	movs	r2, r0
   2a564:	1dfb      	adds	r3, r7, #7
   2a566:	701a      	strb	r2, [r3, #0]
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
   2a568:	4b1a      	ldr	r3, [pc, #104]	; (2a5d4 <disk_initialize+0x78>)
   2a56a:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
   2a56c:	1dfb      	adds	r3, r7, #7
   2a56e:	781b      	ldrb	r3, [r3, #0]
   2a570:	2b01      	cmp	r3, #1
   2a572:	d901      	bls.n	2a578 <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   2a574:	2301      	movs	r3, #1
   2a576:	e029      	b.n	2a5cc <disk_initialize+0x70>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
   2a578:	2300      	movs	r3, #0
   2a57a:	60fb      	str	r3, [r7, #12]
   2a57c:	e010      	b.n	2a5a0 <disk_initialize+0x44>
		mem_status = mem_test_unit_ready(drv);
   2a57e:	230b      	movs	r3, #11
   2a580:	18fc      	adds	r4, r7, r3
   2a582:	1dfb      	adds	r3, r7, #7
   2a584:	781b      	ldrb	r3, [r3, #0]
   2a586:	0018      	movs	r0, r3
   2a588:	4b13      	ldr	r3, [pc, #76]	; (2a5d8 <disk_initialize+0x7c>)
   2a58a:	4798      	blx	r3
   2a58c:	0003      	movs	r3, r0
   2a58e:	7023      	strb	r3, [r4, #0]
		if (CTRL_BUSY != mem_status) {
   2a590:	230b      	movs	r3, #11
   2a592:	18fb      	adds	r3, r7, r3
   2a594:	781b      	ldrb	r3, [r3, #0]
   2a596:	2b03      	cmp	r3, #3
   2a598:	d106      	bne.n	2a5a8 <disk_initialize+0x4c>
	for (i = 0; i < 2; i ++) {
   2a59a:	68fb      	ldr	r3, [r7, #12]
   2a59c:	3301      	adds	r3, #1
   2a59e:	60fb      	str	r3, [r7, #12]
   2a5a0:	68fb      	ldr	r3, [r7, #12]
   2a5a2:	2b01      	cmp	r3, #1
   2a5a4:	ddeb      	ble.n	2a57e <disk_initialize+0x22>
   2a5a6:	e000      	b.n	2a5aa <disk_initialize+0x4e>
			break;
   2a5a8:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
   2a5aa:	230b      	movs	r3, #11
   2a5ac:	18fb      	adds	r3, r7, r3
   2a5ae:	781b      	ldrb	r3, [r3, #0]
   2a5b0:	2b00      	cmp	r3, #0
   2a5b2:	d001      	beq.n	2a5b8 <disk_initialize+0x5c>
		return STA_NOINIT;
   2a5b4:	2301      	movs	r3, #1
   2a5b6:	e009      	b.n	2a5cc <disk_initialize+0x70>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
   2a5b8:	1dfb      	adds	r3, r7, #7
   2a5ba:	781b      	ldrb	r3, [r3, #0]
   2a5bc:	0018      	movs	r0, r3
   2a5be:	4b07      	ldr	r3, [pc, #28]	; (2a5dc <disk_initialize+0x80>)
   2a5c0:	4798      	blx	r3
   2a5c2:	1e03      	subs	r3, r0, #0
   2a5c4:	d001      	beq.n	2a5ca <disk_initialize+0x6e>
		return STA_PROTECT;
   2a5c6:	2304      	movs	r3, #4
   2a5c8:	e000      	b.n	2a5cc <disk_initialize+0x70>
	}

	/* The memory should already be initialized */
	return 0;
   2a5ca:	2300      	movs	r3, #0
}
   2a5cc:	0018      	movs	r0, r3
   2a5ce:	46bd      	mov	sp, r7
   2a5d0:	b005      	add	sp, #20
   2a5d2:	bd90      	pop	{r4, r7, pc}
   2a5d4:	0002a4c9 	.word	0x0002a4c9
   2a5d8:	00025101 	.word	0x00025101
   2a5dc:	000251b9 	.word	0x000251b9

0002a5e0 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   2a5e0:	b580      	push	{r7, lr}
   2a5e2:	b082      	sub	sp, #8
   2a5e4:	af00      	add	r7, sp, #0
   2a5e6:	0002      	movs	r2, r0
   2a5e8:	1dfb      	adds	r3, r7, #7
   2a5ea:	701a      	strb	r2, [r3, #0]
	switch (mem_test_unit_ready(drv)) {
   2a5ec:	1dfb      	adds	r3, r7, #7
   2a5ee:	781b      	ldrb	r3, [r3, #0]
   2a5f0:	0018      	movs	r0, r3
   2a5f2:	4b08      	ldr	r3, [pc, #32]	; (2a614 <disk_status+0x34>)
   2a5f4:	4798      	blx	r3
   2a5f6:	1e03      	subs	r3, r0, #0
   2a5f8:	d002      	beq.n	2a600 <disk_status+0x20>
   2a5fa:	2b02      	cmp	r3, #2
   2a5fc:	d002      	beq.n	2a604 <disk_status+0x24>
   2a5fe:	e003      	b.n	2a608 <disk_status+0x28>
	case CTRL_GOOD:
		return 0;
   2a600:	2300      	movs	r3, #0
   2a602:	e002      	b.n	2a60a <disk_status+0x2a>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   2a604:	2303      	movs	r3, #3
   2a606:	e000      	b.n	2a60a <disk_status+0x2a>
	default:
		return STA_NOINIT;
   2a608:	2301      	movs	r3, #1
	}
}
   2a60a:	0018      	movs	r0, r3
   2a60c:	46bd      	mov	sp, r7
   2a60e:	b002      	add	sp, #8
   2a610:	bd80      	pop	{r7, pc}
   2a612:	46c0      	nop			; (mov r8, r8)
   2a614:	00025101 	.word	0x00025101

0002a618 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   2a618:	b590      	push	{r4, r7, lr}
   2a61a:	b089      	sub	sp, #36	; 0x24
   2a61c:	af00      	add	r7, sp, #0
   2a61e:	60b9      	str	r1, [r7, #8]
   2a620:	607a      	str	r2, [r7, #4]
   2a622:	0019      	movs	r1, r3
   2a624:	230f      	movs	r3, #15
   2a626:	18fb      	adds	r3, r7, r3
   2a628:	1c02      	adds	r2, r0, #0
   2a62a:	701a      	strb	r2, [r3, #0]
   2a62c:	230e      	movs	r3, #14
   2a62e:	18fb      	adds	r3, r7, r3
   2a630:	1c0a      	adds	r2, r1, #0
   2a632:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2a634:	231b      	movs	r3, #27
   2a636:	18fc      	adds	r4, r7, r3
   2a638:	230f      	movs	r3, #15
   2a63a:	18fb      	adds	r3, r7, r3
   2a63c:	781b      	ldrb	r3, [r3, #0]
   2a63e:	0018      	movs	r0, r3
   2a640:	4b28      	ldr	r3, [pc, #160]	; (2a6e4 <disk_read+0xcc>)
   2a642:	4798      	blx	r3
   2a644:	0003      	movs	r3, r0
   2a646:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2a648:	231b      	movs	r3, #27
   2a64a:	18fb      	adds	r3, r7, r3
   2a64c:	781b      	ldrb	r3, [r3, #0]
   2a64e:	2b00      	cmp	r3, #0
   2a650:	d101      	bne.n	2a656 <disk_read+0x3e>
		return RES_ERROR;
   2a652:	2301      	movs	r3, #1
   2a654:	e042      	b.n	2a6dc <disk_read+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2a656:	2314      	movs	r3, #20
   2a658:	18fa      	adds	r2, r7, r3
   2a65a:	230f      	movs	r3, #15
   2a65c:	18fb      	adds	r3, r7, r3
   2a65e:	781b      	ldrb	r3, [r3, #0]
   2a660:	0011      	movs	r1, r2
   2a662:	0018      	movs	r0, r3
   2a664:	4b20      	ldr	r3, [pc, #128]	; (2a6e8 <disk_read+0xd0>)
   2a666:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2a668:	230e      	movs	r3, #14
   2a66a:	18fb      	adds	r3, r7, r3
   2a66c:	781b      	ldrb	r3, [r3, #0]
   2a66e:	221b      	movs	r2, #27
   2a670:	18ba      	adds	r2, r7, r2
   2a672:	7812      	ldrb	r2, [r2, #0]
   2a674:	4353      	muls	r3, r2
   2a676:	001a      	movs	r2, r3
   2a678:	687b      	ldr	r3, [r7, #4]
   2a67a:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2a67c:	697b      	ldr	r3, [r7, #20]
   2a67e:	3301      	adds	r3, #1
   2a680:	211b      	movs	r1, #27
   2a682:	1879      	adds	r1, r7, r1
   2a684:	7809      	ldrb	r1, [r1, #0]
   2a686:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2a688:	429a      	cmp	r2, r3
   2a68a:	d901      	bls.n	2a690 <disk_read+0x78>
		return RES_PARERR;
   2a68c:	2304      	movs	r3, #4
   2a68e:	e025      	b.n	2a6dc <disk_read+0xc4>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
   2a690:	2300      	movs	r3, #0
   2a692:	61fb      	str	r3, [r7, #28]
   2a694:	e01b      	b.n	2a6ce <disk_read+0xb6>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2a696:	231b      	movs	r3, #27
   2a698:	18fb      	adds	r3, r7, r3
   2a69a:	781b      	ldrb	r3, [r3, #0]
   2a69c:	69fa      	ldr	r2, [r7, #28]
   2a69e:	435a      	muls	r2, r3
   2a6a0:	687b      	ldr	r3, [r7, #4]
   2a6a2:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2a6a4:	231b      	movs	r3, #27
   2a6a6:	18fb      	adds	r3, r7, r3
   2a6a8:	781b      	ldrb	r3, [r3, #0]
   2a6aa:	69fa      	ldr	r2, [r7, #28]
   2a6ac:	4353      	muls	r3, r2
   2a6ae:	025b      	lsls	r3, r3, #9
   2a6b0:	68ba      	ldr	r2, [r7, #8]
   2a6b2:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2a6b4:	230f      	movs	r3, #15
   2a6b6:	18fb      	adds	r3, r7, r3
   2a6b8:	781b      	ldrb	r3, [r3, #0]
   2a6ba:	0018      	movs	r0, r3
   2a6bc:	4b0b      	ldr	r3, [pc, #44]	; (2a6ec <disk_read+0xd4>)
   2a6be:	4798      	blx	r3
   2a6c0:	1e03      	subs	r3, r0, #0
   2a6c2:	d001      	beq.n	2a6c8 <disk_read+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2a6c4:	2301      	movs	r3, #1
   2a6c6:	e009      	b.n	2a6dc <disk_read+0xc4>
	for (i = 0; i < count; i++) {
   2a6c8:	69fb      	ldr	r3, [r7, #28]
   2a6ca:	3301      	adds	r3, #1
   2a6cc:	61fb      	str	r3, [r7, #28]
   2a6ce:	230e      	movs	r3, #14
   2a6d0:	18fb      	adds	r3, r7, r3
   2a6d2:	781a      	ldrb	r2, [r3, #0]
   2a6d4:	69fb      	ldr	r3, [r7, #28]
   2a6d6:	429a      	cmp	r2, r3
   2a6d8:	d8dd      	bhi.n	2a696 <disk_read+0x7e>
		}
	}

	return RES_OK;
   2a6da:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2a6dc:	0018      	movs	r0, r3
   2a6de:	46bd      	mov	sp, r7
   2a6e0:	b009      	add	sp, #36	; 0x24
   2a6e2:	bd90      	pop	{r4, r7, pc}
   2a6e4:	0002518d 	.word	0x0002518d
   2a6e8:	00025141 	.word	0x00025141
   2a6ec:	00025201 	.word	0x00025201

0002a6f0 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   2a6f0:	b590      	push	{r4, r7, lr}
   2a6f2:	b089      	sub	sp, #36	; 0x24
   2a6f4:	af00      	add	r7, sp, #0
   2a6f6:	60b9      	str	r1, [r7, #8]
   2a6f8:	607a      	str	r2, [r7, #4]
   2a6fa:	0019      	movs	r1, r3
   2a6fc:	230f      	movs	r3, #15
   2a6fe:	18fb      	adds	r3, r7, r3
   2a700:	1c02      	adds	r2, r0, #0
   2a702:	701a      	strb	r2, [r3, #0]
   2a704:	230e      	movs	r3, #14
   2a706:	18fb      	adds	r3, r7, r3
   2a708:	1c0a      	adds	r2, r1, #0
   2a70a:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2a70c:	231b      	movs	r3, #27
   2a70e:	18fc      	adds	r4, r7, r3
   2a710:	230f      	movs	r3, #15
   2a712:	18fb      	adds	r3, r7, r3
   2a714:	781b      	ldrb	r3, [r3, #0]
   2a716:	0018      	movs	r0, r3
   2a718:	4b28      	ldr	r3, [pc, #160]	; (2a7bc <disk_write+0xcc>)
   2a71a:	4798      	blx	r3
   2a71c:	0003      	movs	r3, r0
   2a71e:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2a720:	231b      	movs	r3, #27
   2a722:	18fb      	adds	r3, r7, r3
   2a724:	781b      	ldrb	r3, [r3, #0]
   2a726:	2b00      	cmp	r3, #0
   2a728:	d101      	bne.n	2a72e <disk_write+0x3e>
		return RES_ERROR;
   2a72a:	2301      	movs	r3, #1
   2a72c:	e042      	b.n	2a7b4 <disk_write+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2a72e:	2314      	movs	r3, #20
   2a730:	18fa      	adds	r2, r7, r3
   2a732:	230f      	movs	r3, #15
   2a734:	18fb      	adds	r3, r7, r3
   2a736:	781b      	ldrb	r3, [r3, #0]
   2a738:	0011      	movs	r1, r2
   2a73a:	0018      	movs	r0, r3
   2a73c:	4b20      	ldr	r3, [pc, #128]	; (2a7c0 <disk_write+0xd0>)
   2a73e:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2a740:	230e      	movs	r3, #14
   2a742:	18fb      	adds	r3, r7, r3
   2a744:	781b      	ldrb	r3, [r3, #0]
   2a746:	221b      	movs	r2, #27
   2a748:	18ba      	adds	r2, r7, r2
   2a74a:	7812      	ldrb	r2, [r2, #0]
   2a74c:	4353      	muls	r3, r2
   2a74e:	001a      	movs	r2, r3
   2a750:	687b      	ldr	r3, [r7, #4]
   2a752:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2a754:	697b      	ldr	r3, [r7, #20]
   2a756:	3301      	adds	r3, #1
   2a758:	211b      	movs	r1, #27
   2a75a:	1879      	adds	r1, r7, r1
   2a75c:	7809      	ldrb	r1, [r1, #0]
   2a75e:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2a760:	429a      	cmp	r2, r3
   2a762:	d901      	bls.n	2a768 <disk_write+0x78>
		return RES_PARERR;
   2a764:	2304      	movs	r3, #4
   2a766:	e025      	b.n	2a7b4 <disk_write+0xc4>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
   2a768:	2300      	movs	r3, #0
   2a76a:	61fb      	str	r3, [r7, #28]
   2a76c:	e01b      	b.n	2a7a6 <disk_write+0xb6>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2a76e:	231b      	movs	r3, #27
   2a770:	18fb      	adds	r3, r7, r3
   2a772:	781b      	ldrb	r3, [r3, #0]
   2a774:	69fa      	ldr	r2, [r7, #28]
   2a776:	435a      	muls	r2, r3
   2a778:	687b      	ldr	r3, [r7, #4]
   2a77a:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2a77c:	231b      	movs	r3, #27
   2a77e:	18fb      	adds	r3, r7, r3
   2a780:	781b      	ldrb	r3, [r3, #0]
   2a782:	69fa      	ldr	r2, [r7, #28]
   2a784:	4353      	muls	r3, r2
   2a786:	025b      	lsls	r3, r3, #9
   2a788:	68ba      	ldr	r2, [r7, #8]
   2a78a:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2a78c:	230f      	movs	r3, #15
   2a78e:	18fb      	adds	r3, r7, r3
   2a790:	781b      	ldrb	r3, [r3, #0]
   2a792:	0018      	movs	r0, r3
   2a794:	4b0b      	ldr	r3, [pc, #44]	; (2a7c4 <disk_write+0xd4>)
   2a796:	4798      	blx	r3
   2a798:	1e03      	subs	r3, r0, #0
   2a79a:	d001      	beq.n	2a7a0 <disk_write+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2a79c:	2301      	movs	r3, #1
   2a79e:	e009      	b.n	2a7b4 <disk_write+0xc4>
	for (i = 0; i < count; i++) {
   2a7a0:	69fb      	ldr	r3, [r7, #28]
   2a7a2:	3301      	adds	r3, #1
   2a7a4:	61fb      	str	r3, [r7, #28]
   2a7a6:	230e      	movs	r3, #14
   2a7a8:	18fb      	adds	r3, r7, r3
   2a7aa:	781a      	ldrb	r2, [r3, #0]
   2a7ac:	69fb      	ldr	r3, [r7, #28]
   2a7ae:	429a      	cmp	r2, r3
   2a7b0:	d8dd      	bhi.n	2a76e <disk_write+0x7e>
		}
	}

	return RES_OK;
   2a7b2:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2a7b4:	0018      	movs	r0, r3
   2a7b6:	46bd      	mov	sp, r7
   2a7b8:	b009      	add	sp, #36	; 0x24
   2a7ba:	bd90      	pop	{r4, r7, pc}
   2a7bc:	0002518d 	.word	0x0002518d
   2a7c0:	00025141 	.word	0x00025141
   2a7c4:	00025255 	.word	0x00025255

0002a7c8 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   2a7c8:	b590      	push	{r4, r7, lr}
   2a7ca:	b085      	sub	sp, #20
   2a7cc:	af00      	add	r7, sp, #0
   2a7ce:	603a      	str	r2, [r7, #0]
   2a7d0:	1dfb      	adds	r3, r7, #7
   2a7d2:	1c02      	adds	r2, r0, #0
   2a7d4:	701a      	strb	r2, [r3, #0]
   2a7d6:	1dbb      	adds	r3, r7, #6
   2a7d8:	1c0a      	adds	r2, r1, #0
   2a7da:	701a      	strb	r2, [r3, #0]
	DRESULT res = RES_PARERR;
   2a7dc:	230f      	movs	r3, #15
   2a7de:	18fb      	adds	r3, r7, r3
   2a7e0:	2204      	movs	r2, #4
   2a7e2:	701a      	strb	r2, [r3, #0]

	switch (ctrl) {
   2a7e4:	1dbb      	adds	r3, r7, #6
   2a7e6:	781b      	ldrb	r3, [r3, #0]
   2a7e8:	2b01      	cmp	r3, #1
   2a7ea:	d00f      	beq.n	2a80c <disk_ioctl+0x44>
   2a7ec:	dc02      	bgt.n	2a7f4 <disk_ioctl+0x2c>
   2a7ee:	2b00      	cmp	r3, #0
   2a7f0:	d044      	beq.n	2a87c <disk_ioctl+0xb4>
   2a7f2:	e054      	b.n	2a89e <disk_ioctl+0xd6>
   2a7f4:	2b02      	cmp	r3, #2
   2a7f6:	d01a      	beq.n	2a82e <disk_ioctl+0x66>
   2a7f8:	2b03      	cmp	r3, #3
   2a7fa:	d150      	bne.n	2a89e <disk_ioctl+0xd6>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
   2a7fc:	683b      	ldr	r3, [r7, #0]
   2a7fe:	2201      	movs	r2, #1
   2a800:	601a      	str	r2, [r3, #0]
		res = RES_OK;
   2a802:	230f      	movs	r3, #15
   2a804:	18fb      	adds	r3, r7, r3
   2a806:	2200      	movs	r2, #0
   2a808:	701a      	strb	r2, [r3, #0]
		break;
   2a80a:	e04c      	b.n	2a8a6 <disk_ioctl+0xde>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
   2a80c:	2308      	movs	r3, #8
   2a80e:	18fa      	adds	r2, r7, r3
   2a810:	1dfb      	adds	r3, r7, #7
   2a812:	781b      	ldrb	r3, [r3, #0]
   2a814:	0011      	movs	r1, r2
   2a816:	0018      	movs	r0, r3
   2a818:	4b26      	ldr	r3, [pc, #152]	; (2a8b4 <disk_ioctl+0xec>)
   2a81a:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
   2a81c:	68bb      	ldr	r3, [r7, #8]
   2a81e:	1c5a      	adds	r2, r3, #1
   2a820:	683b      	ldr	r3, [r7, #0]
   2a822:	601a      	str	r2, [r3, #0]

		res = RES_OK;
   2a824:	230f      	movs	r3, #15
   2a826:	18fb      	adds	r3, r7, r3
   2a828:	2200      	movs	r2, #0
   2a82a:	701a      	strb	r2, [r3, #0]
	}
	break;
   2a82c:	e03b      	b.n	2a8a6 <disk_ioctl+0xde>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
   2a82e:	230e      	movs	r3, #14
   2a830:	18fc      	adds	r4, r7, r3
   2a832:	1dfb      	adds	r3, r7, #7
   2a834:	781b      	ldrb	r3, [r3, #0]
   2a836:	0018      	movs	r0, r3
   2a838:	4b1f      	ldr	r3, [pc, #124]	; (2a8b8 <disk_ioctl+0xf0>)
   2a83a:	4798      	blx	r3
   2a83c:	0003      	movs	r3, r0
   2a83e:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
   2a840:	230e      	movs	r3, #14
   2a842:	18fb      	adds	r3, r7, r3
   2a844:	781b      	ldrb	r3, [r3, #0]
   2a846:	2b01      	cmp	r3, #1
   2a848:	d010      	beq.n	2a86c <disk_ioctl+0xa4>
   2a84a:	230e      	movs	r3, #14
   2a84c:	18fb      	adds	r3, r7, r3
   2a84e:	781b      	ldrb	r3, [r3, #0]
   2a850:	2b02      	cmp	r3, #2
   2a852:	d00b      	beq.n	2a86c <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   2a854:	230e      	movs	r3, #14
   2a856:	18fb      	adds	r3, r7, r3
   2a858:	781b      	ldrb	r3, [r3, #0]
   2a85a:	2b04      	cmp	r3, #4
   2a85c:	d006      	beq.n	2a86c <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_2048) &&
   2a85e:	230e      	movs	r3, #14
   2a860:	18fb      	adds	r3, r7, r3
   2a862:	781b      	ldrb	r3, [r3, #0]
   2a864:	2b08      	cmp	r3, #8
   2a866:	d001      	beq.n	2a86c <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
   2a868:	2301      	movs	r3, #1
   2a86a:	e01f      	b.n	2a8ac <disk_ioctl+0xe4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   2a86c:	683b      	ldr	r3, [r7, #0]
   2a86e:	2200      	movs	r2, #0
   2a870:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
   2a872:	230f      	movs	r3, #15
   2a874:	18fb      	adds	r3, r7, r3
   2a876:	2200      	movs	r2, #0
   2a878:	701a      	strb	r2, [r3, #0]
	}
	break;
   2a87a:	e014      	b.n	2a8a6 <disk_ioctl+0xde>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   2a87c:	1dfb      	adds	r3, r7, #7
   2a87e:	781b      	ldrb	r3, [r3, #0]
   2a880:	0018      	movs	r0, r3
   2a882:	4b0e      	ldr	r3, [pc, #56]	; (2a8bc <disk_ioctl+0xf4>)
   2a884:	4798      	blx	r3
   2a886:	1e03      	subs	r3, r0, #0
   2a888:	d104      	bne.n	2a894 <disk_ioctl+0xcc>
			res = RES_OK;
   2a88a:	230f      	movs	r3, #15
   2a88c:	18fb      	adds	r3, r7, r3
   2a88e:	2200      	movs	r2, #0
   2a890:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
   2a892:	e008      	b.n	2a8a6 <disk_ioctl+0xde>
			res = RES_NOTRDY;
   2a894:	230f      	movs	r3, #15
   2a896:	18fb      	adds	r3, r7, r3
   2a898:	2203      	movs	r2, #3
   2a89a:	701a      	strb	r2, [r3, #0]
		break;
   2a89c:	e003      	b.n	2a8a6 <disk_ioctl+0xde>

	default:
		res = RES_PARERR;
   2a89e:	230f      	movs	r3, #15
   2a8a0:	18fb      	adds	r3, r7, r3
   2a8a2:	2204      	movs	r2, #4
   2a8a4:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2a8a6:	230f      	movs	r3, #15
   2a8a8:	18fb      	adds	r3, r7, r3
   2a8aa:	781b      	ldrb	r3, [r3, #0]
}
   2a8ac:	0018      	movs	r0, r3
   2a8ae:	46bd      	mov	sp, r7
   2a8b0:	b005      	add	sp, #20
   2a8b2:	bd90      	pop	{r4, r7, pc}
   2a8b4:	00025141 	.word	0x00025141
   2a8b8:	0002518d 	.word	0x0002518d
   2a8bc:	00025101 	.word	0x00025101

0002a8c0 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   2a8c0:	b580      	push	{r7, lr}
   2a8c2:	b084      	sub	sp, #16
   2a8c4:	af00      	add	r7, sp, #0
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   2a8c6:	1d3a      	adds	r2, r7, #4
   2a8c8:	4b12      	ldr	r3, [pc, #72]	; (2a914 <get_fattime+0x54>)
   2a8ca:	0011      	movs	r1, r2
   2a8cc:	0018      	movs	r0, r3
   2a8ce:	4b12      	ldr	r3, [pc, #72]	; (2a918 <get_fattime+0x58>)
   2a8d0:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
   2a8d2:	1d3b      	adds	r3, r7, #4
   2a8d4:	88db      	ldrh	r3, [r3, #6]
   2a8d6:	4a11      	ldr	r2, [pc, #68]	; (2a91c <get_fattime+0x5c>)
   2a8d8:	4694      	mov	ip, r2
   2a8da:	4463      	add	r3, ip
   2a8dc:	065a      	lsls	r2, r3, #25
			| (current_time.month << 21)
   2a8de:	1d3b      	adds	r3, r7, #4
   2a8e0:	795b      	ldrb	r3, [r3, #5]
   2a8e2:	055b      	lsls	r3, r3, #21
   2a8e4:	431a      	orrs	r2, r3
			| (current_time.day << 16)
   2a8e6:	1d3b      	adds	r3, r7, #4
   2a8e8:	791b      	ldrb	r3, [r3, #4]
   2a8ea:	041b      	lsls	r3, r3, #16
   2a8ec:	431a      	orrs	r2, r3
			| (current_time.hour << 11)
   2a8ee:	1d3b      	adds	r3, r7, #4
   2a8f0:	789b      	ldrb	r3, [r3, #2]
   2a8f2:	02db      	lsls	r3, r3, #11
   2a8f4:	431a      	orrs	r2, r3
			| (current_time.minute << 5)
   2a8f6:	1d3b      	adds	r3, r7, #4
   2a8f8:	785b      	ldrb	r3, [r3, #1]
   2a8fa:	015b      	lsls	r3, r3, #5
   2a8fc:	4313      	orrs	r3, r2
			| ((current_time.second >> 1) << 0);
   2a8fe:	1d3a      	adds	r2, r7, #4
   2a900:	7812      	ldrb	r2, [r2, #0]
   2a902:	0852      	lsrs	r2, r2, #1
   2a904:	b2d2      	uxtb	r2, r2
   2a906:	4313      	orrs	r3, r2
	ul_time = ((current_time.year - 1980) << 25)
   2a908:	60fb      	str	r3, [r7, #12]

	return ul_time;
   2a90a:	68fb      	ldr	r3, [r7, #12]
}
   2a90c:	0018      	movs	r0, r3
   2a90e:	46bd      	mov	sp, r7
   2a910:	b004      	add	sp, #16
   2a912:	bd80      	pop	{r7, pc}
   2a914:	20005c00 	.word	0x20005c00
   2a918:	00025f6d 	.word	0x00025f6d
   2a91c:	fffff844 	.word	0xfffff844

0002a920 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
   2a920:	b580      	push	{r7, lr}
   2a922:	b086      	sub	sp, #24
   2a924:	af00      	add	r7, sp, #0
   2a926:	60f8      	str	r0, [r7, #12]
   2a928:	60b9      	str	r1, [r7, #8]
   2a92a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2a92c:	68fb      	ldr	r3, [r7, #12]
   2a92e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
   2a930:	68bb      	ldr	r3, [r7, #8]
   2a932:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
   2a934:	e007      	b.n	2a946 <mem_cpy+0x26>
		*d++ = *s++;
   2a936:	697b      	ldr	r3, [r7, #20]
   2a938:	1c5a      	adds	r2, r3, #1
   2a93a:	617a      	str	r2, [r7, #20]
   2a93c:	693a      	ldr	r2, [r7, #16]
   2a93e:	1c51      	adds	r1, r2, #1
   2a940:	6139      	str	r1, [r7, #16]
   2a942:	7812      	ldrb	r2, [r2, #0]
   2a944:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2a946:	687b      	ldr	r3, [r7, #4]
   2a948:	1e5a      	subs	r2, r3, #1
   2a94a:	607a      	str	r2, [r7, #4]
   2a94c:	2b00      	cmp	r3, #0
   2a94e:	d1f2      	bne.n	2a936 <mem_cpy+0x16>
}
   2a950:	46c0      	nop			; (mov r8, r8)
   2a952:	46bd      	mov	sp, r7
   2a954:	b006      	add	sp, #24
   2a956:	bd80      	pop	{r7, pc}

0002a958 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
   2a958:	b580      	push	{r7, lr}
   2a95a:	b086      	sub	sp, #24
   2a95c:	af00      	add	r7, sp, #0
   2a95e:	60f8      	str	r0, [r7, #12]
   2a960:	60b9      	str	r1, [r7, #8]
   2a962:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2a964:	68fb      	ldr	r3, [r7, #12]
   2a966:	617b      	str	r3, [r7, #20]

	while (cnt--)
   2a968:	e005      	b.n	2a976 <mem_set+0x1e>
		*d++ = (BYTE)val;
   2a96a:	697b      	ldr	r3, [r7, #20]
   2a96c:	1c5a      	adds	r2, r3, #1
   2a96e:	617a      	str	r2, [r7, #20]
   2a970:	68ba      	ldr	r2, [r7, #8]
   2a972:	b2d2      	uxtb	r2, r2
   2a974:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2a976:	687b      	ldr	r3, [r7, #4]
   2a978:	1e5a      	subs	r2, r3, #1
   2a97a:	607a      	str	r2, [r7, #4]
   2a97c:	2b00      	cmp	r3, #0
   2a97e:	d1f4      	bne.n	2a96a <mem_set+0x12>
}
   2a980:	46c0      	nop			; (mov r8, r8)
   2a982:	46bd      	mov	sp, r7
   2a984:	b006      	add	sp, #24
   2a986:	bd80      	pop	{r7, pc}

0002a988 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
   2a988:	b580      	push	{r7, lr}
   2a98a:	b088      	sub	sp, #32
   2a98c:	af00      	add	r7, sp, #0
   2a98e:	60f8      	str	r0, [r7, #12]
   2a990:	60b9      	str	r1, [r7, #8]
   2a992:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
   2a994:	68fb      	ldr	r3, [r7, #12]
   2a996:	61fb      	str	r3, [r7, #28]
   2a998:	68bb      	ldr	r3, [r7, #8]
   2a99a:	61bb      	str	r3, [r7, #24]
	int r = 0;
   2a99c:	2300      	movs	r3, #0
   2a99e:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
   2a9a0:	46c0      	nop			; (mov r8, r8)
   2a9a2:	687b      	ldr	r3, [r7, #4]
   2a9a4:	1e5a      	subs	r2, r3, #1
   2a9a6:	607a      	str	r2, [r7, #4]
   2a9a8:	2b00      	cmp	r3, #0
   2a9aa:	d00d      	beq.n	2a9c8 <mem_cmp+0x40>
   2a9ac:	69fb      	ldr	r3, [r7, #28]
   2a9ae:	1c5a      	adds	r2, r3, #1
   2a9b0:	61fa      	str	r2, [r7, #28]
   2a9b2:	781b      	ldrb	r3, [r3, #0]
   2a9b4:	0019      	movs	r1, r3
   2a9b6:	69bb      	ldr	r3, [r7, #24]
   2a9b8:	1c5a      	adds	r2, r3, #1
   2a9ba:	61ba      	str	r2, [r7, #24]
   2a9bc:	781b      	ldrb	r3, [r3, #0]
   2a9be:	1acb      	subs	r3, r1, r3
   2a9c0:	617b      	str	r3, [r7, #20]
   2a9c2:	697b      	ldr	r3, [r7, #20]
   2a9c4:	2b00      	cmp	r3, #0
   2a9c6:	d0ec      	beq.n	2a9a2 <mem_cmp+0x1a>
	return r;
   2a9c8:	697b      	ldr	r3, [r7, #20]
}
   2a9ca:	0018      	movs	r0, r3
   2a9cc:	46bd      	mov	sp, r7
   2a9ce:	b008      	add	sp, #32
   2a9d0:	bd80      	pop	{r7, pc}

0002a9d2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
   2a9d2:	b580      	push	{r7, lr}
   2a9d4:	b082      	sub	sp, #8
   2a9d6:	af00      	add	r7, sp, #0
   2a9d8:	6078      	str	r0, [r7, #4]
   2a9da:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
   2a9dc:	e002      	b.n	2a9e4 <chk_chr+0x12>
   2a9de:	687b      	ldr	r3, [r7, #4]
   2a9e0:	3301      	adds	r3, #1
   2a9e2:	607b      	str	r3, [r7, #4]
   2a9e4:	687b      	ldr	r3, [r7, #4]
   2a9e6:	781b      	ldrb	r3, [r3, #0]
   2a9e8:	2b00      	cmp	r3, #0
   2a9ea:	d005      	beq.n	2a9f8 <chk_chr+0x26>
   2a9ec:	687b      	ldr	r3, [r7, #4]
   2a9ee:	781b      	ldrb	r3, [r3, #0]
   2a9f0:	001a      	movs	r2, r3
   2a9f2:	683b      	ldr	r3, [r7, #0]
   2a9f4:	429a      	cmp	r2, r3
   2a9f6:	d1f2      	bne.n	2a9de <chk_chr+0xc>
	return *str;
   2a9f8:	687b      	ldr	r3, [r7, #4]
   2a9fa:	781b      	ldrb	r3, [r3, #0]
}
   2a9fc:	0018      	movs	r0, r3
   2a9fe:	46bd      	mov	sp, r7
   2aa00:	b002      	add	sp, #8
   2aa02:	bd80      	pop	{r7, pc}

0002aa04 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
   2aa04:	b590      	push	{r4, r7, lr}
   2aa06:	b085      	sub	sp, #20
   2aa08:	af00      	add	r7, sp, #0
   2aa0a:	6078      	str	r0, [r7, #4]
   2aa0c:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
   2aa0e:	687b      	ldr	r3, [r7, #4]
   2aa10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2aa12:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
   2aa14:	68fa      	ldr	r2, [r7, #12]
   2aa16:	683b      	ldr	r3, [r7, #0]
   2aa18:	429a      	cmp	r2, r3
   2aa1a:	d04e      	beq.n	2aaba <move_window+0xb6>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
   2aa1c:	687b      	ldr	r3, [r7, #4]
   2aa1e:	791b      	ldrb	r3, [r3, #4]
   2aa20:	2b00      	cmp	r3, #0
   2aa22:	d037      	beq.n	2aa94 <move_window+0x90>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   2aa24:	687b      	ldr	r3, [r7, #4]
   2aa26:	7858      	ldrb	r0, [r3, #1]
   2aa28:	687b      	ldr	r3, [r7, #4]
   2aa2a:	3330      	adds	r3, #48	; 0x30
   2aa2c:	0019      	movs	r1, r3
   2aa2e:	68fa      	ldr	r2, [r7, #12]
   2aa30:	2301      	movs	r3, #1
   2aa32:	4c24      	ldr	r4, [pc, #144]	; (2aac4 <move_window+0xc0>)
   2aa34:	47a0      	blx	r4
   2aa36:	1e03      	subs	r3, r0, #0
   2aa38:	d001      	beq.n	2aa3e <move_window+0x3a>
				return FR_DISK_ERR;
   2aa3a:	2301      	movs	r3, #1
   2aa3c:	e03e      	b.n	2aabc <move_window+0xb8>
			fs->wflag = 0;
   2aa3e:	687b      	ldr	r3, [r7, #4]
   2aa40:	2200      	movs	r2, #0
   2aa42:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   2aa44:	687b      	ldr	r3, [r7, #4]
   2aa46:	6a1a      	ldr	r2, [r3, #32]
   2aa48:	687b      	ldr	r3, [r7, #4]
   2aa4a:	69db      	ldr	r3, [r3, #28]
   2aa4c:	18d2      	adds	r2, r2, r3
   2aa4e:	68fb      	ldr	r3, [r7, #12]
   2aa50:	429a      	cmp	r2, r3
   2aa52:	d91f      	bls.n	2aa94 <move_window+0x90>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2aa54:	230b      	movs	r3, #11
   2aa56:	18fb      	adds	r3, r7, r3
   2aa58:	687a      	ldr	r2, [r7, #4]
   2aa5a:	78d2      	ldrb	r2, [r2, #3]
   2aa5c:	701a      	strb	r2, [r3, #0]
   2aa5e:	e014      	b.n	2aa8a <move_window+0x86>
					wsect += fs->fsize;
   2aa60:	687b      	ldr	r3, [r7, #4]
   2aa62:	69db      	ldr	r3, [r3, #28]
   2aa64:	68fa      	ldr	r2, [r7, #12]
   2aa66:	18d3      	adds	r3, r2, r3
   2aa68:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
   2aa6a:	687b      	ldr	r3, [r7, #4]
   2aa6c:	7858      	ldrb	r0, [r3, #1]
   2aa6e:	687b      	ldr	r3, [r7, #4]
   2aa70:	3330      	adds	r3, #48	; 0x30
   2aa72:	0019      	movs	r1, r3
   2aa74:	68fa      	ldr	r2, [r7, #12]
   2aa76:	2301      	movs	r3, #1
   2aa78:	4c12      	ldr	r4, [pc, #72]	; (2aac4 <move_window+0xc0>)
   2aa7a:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2aa7c:	230b      	movs	r3, #11
   2aa7e:	18fb      	adds	r3, r7, r3
   2aa80:	781a      	ldrb	r2, [r3, #0]
   2aa82:	230b      	movs	r3, #11
   2aa84:	18fb      	adds	r3, r7, r3
   2aa86:	3a01      	subs	r2, #1
   2aa88:	701a      	strb	r2, [r3, #0]
   2aa8a:	230b      	movs	r3, #11
   2aa8c:	18fb      	adds	r3, r7, r3
   2aa8e:	781b      	ldrb	r3, [r3, #0]
   2aa90:	2b01      	cmp	r3, #1
   2aa92:	d8e5      	bhi.n	2aa60 <move_window+0x5c>
				}
			}
		}
#endif
		if (sector) {
   2aa94:	683b      	ldr	r3, [r7, #0]
   2aa96:	2b00      	cmp	r3, #0
   2aa98:	d00f      	beq.n	2aaba <move_window+0xb6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   2aa9a:	687b      	ldr	r3, [r7, #4]
   2aa9c:	7858      	ldrb	r0, [r3, #1]
   2aa9e:	687b      	ldr	r3, [r7, #4]
   2aaa0:	3330      	adds	r3, #48	; 0x30
   2aaa2:	0019      	movs	r1, r3
   2aaa4:	683a      	ldr	r2, [r7, #0]
   2aaa6:	2301      	movs	r3, #1
   2aaa8:	4c07      	ldr	r4, [pc, #28]	; (2aac8 <move_window+0xc4>)
   2aaaa:	47a0      	blx	r4
   2aaac:	1e03      	subs	r3, r0, #0
   2aaae:	d001      	beq.n	2aab4 <move_window+0xb0>
				return FR_DISK_ERR;
   2aab0:	2301      	movs	r3, #1
   2aab2:	e003      	b.n	2aabc <move_window+0xb8>
			fs->winsect = sector;
   2aab4:	687b      	ldr	r3, [r7, #4]
   2aab6:	683a      	ldr	r2, [r7, #0]
   2aab8:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
   2aaba:	2300      	movs	r3, #0
}
   2aabc:	0018      	movs	r0, r3
   2aabe:	46bd      	mov	sp, r7
   2aac0:	b005      	add	sp, #20
   2aac2:	bd90      	pop	{r4, r7, pc}
   2aac4:	0002a6f1 	.word	0x0002a6f1
   2aac8:	0002a619 	.word	0x0002a619

0002aacc <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
   2aacc:	b590      	push	{r4, r7, lr}
   2aace:	b085      	sub	sp, #20
   2aad0:	af00      	add	r7, sp, #0
   2aad2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
   2aad4:	230f      	movs	r3, #15
   2aad6:	18fc      	adds	r4, r7, r3
   2aad8:	687b      	ldr	r3, [r7, #4]
   2aada:	2100      	movs	r1, #0
   2aadc:	0018      	movs	r0, r3
   2aade:	4b52      	ldr	r3, [pc, #328]	; (2ac28 <sync+0x15c>)
   2aae0:	4798      	blx	r3
   2aae2:	0003      	movs	r3, r0
   2aae4:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2aae6:	230f      	movs	r3, #15
   2aae8:	18fb      	adds	r3, r7, r3
   2aaea:	781b      	ldrb	r3, [r3, #0]
   2aaec:	2b00      	cmp	r3, #0
   2aaee:	d000      	beq.n	2aaf2 <sync+0x26>
   2aaf0:	e093      	b.n	2ac1a <sync+0x14e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   2aaf2:	687b      	ldr	r3, [r7, #4]
   2aaf4:	781b      	ldrb	r3, [r3, #0]
   2aaf6:	2b03      	cmp	r3, #3
   2aaf8:	d000      	beq.n	2aafc <sync+0x30>
   2aafa:	e081      	b.n	2ac00 <sync+0x134>
   2aafc:	687b      	ldr	r3, [r7, #4]
   2aafe:	795b      	ldrb	r3, [r3, #5]
   2ab00:	2b00      	cmp	r3, #0
   2ab02:	d07d      	beq.n	2ac00 <sync+0x134>
			fs->winsect = 0;
   2ab04:	687b      	ldr	r3, [r7, #4]
   2ab06:	2200      	movs	r2, #0
   2ab08:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
   2ab0a:	687b      	ldr	r3, [r7, #4]
   2ab0c:	3330      	adds	r3, #48	; 0x30
   2ab0e:	0018      	movs	r0, r3
   2ab10:	2380      	movs	r3, #128	; 0x80
   2ab12:	009b      	lsls	r3, r3, #2
   2ab14:	001a      	movs	r2, r3
   2ab16:	2100      	movs	r1, #0
   2ab18:	4b44      	ldr	r3, [pc, #272]	; (2ac2c <sync+0x160>)
   2ab1a:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   2ab1c:	687b      	ldr	r3, [r7, #4]
   2ab1e:	4a44      	ldr	r2, [pc, #272]	; (2ac30 <sync+0x164>)
   2ab20:	2155      	movs	r1, #85	; 0x55
   2ab22:	5499      	strb	r1, [r3, r2]
   2ab24:	687b      	ldr	r3, [r7, #4]
   2ab26:	4a43      	ldr	r2, [pc, #268]	; (2ac34 <sync+0x168>)
   2ab28:	21aa      	movs	r1, #170	; 0xaa
   2ab2a:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   2ab2c:	687b      	ldr	r3, [r7, #4]
   2ab2e:	2230      	movs	r2, #48	; 0x30
   2ab30:	2152      	movs	r1, #82	; 0x52
   2ab32:	5499      	strb	r1, [r3, r2]
   2ab34:	687b      	ldr	r3, [r7, #4]
   2ab36:	2231      	movs	r2, #49	; 0x31
   2ab38:	2152      	movs	r1, #82	; 0x52
   2ab3a:	5499      	strb	r1, [r3, r2]
   2ab3c:	687b      	ldr	r3, [r7, #4]
   2ab3e:	2232      	movs	r2, #50	; 0x32
   2ab40:	2161      	movs	r1, #97	; 0x61
   2ab42:	5499      	strb	r1, [r3, r2]
   2ab44:	687b      	ldr	r3, [r7, #4]
   2ab46:	2233      	movs	r2, #51	; 0x33
   2ab48:	2141      	movs	r1, #65	; 0x41
   2ab4a:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   2ab4c:	687a      	ldr	r2, [r7, #4]
   2ab4e:	2385      	movs	r3, #133	; 0x85
   2ab50:	009b      	lsls	r3, r3, #2
   2ab52:	2172      	movs	r1, #114	; 0x72
   2ab54:	54d1      	strb	r1, [r2, r3]
   2ab56:	687b      	ldr	r3, [r7, #4]
   2ab58:	4a37      	ldr	r2, [pc, #220]	; (2ac38 <sync+0x16c>)
   2ab5a:	2172      	movs	r1, #114	; 0x72
   2ab5c:	5499      	strb	r1, [r3, r2]
   2ab5e:	687b      	ldr	r3, [r7, #4]
   2ab60:	4a36      	ldr	r2, [pc, #216]	; (2ac3c <sync+0x170>)
   2ab62:	2141      	movs	r1, #65	; 0x41
   2ab64:	5499      	strb	r1, [r3, r2]
   2ab66:	687b      	ldr	r3, [r7, #4]
   2ab68:	4a35      	ldr	r2, [pc, #212]	; (2ac40 <sync+0x174>)
   2ab6a:	2161      	movs	r1, #97	; 0x61
   2ab6c:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   2ab6e:	687b      	ldr	r3, [r7, #4]
   2ab70:	691b      	ldr	r3, [r3, #16]
   2ab72:	b2d9      	uxtb	r1, r3
   2ab74:	687a      	ldr	r2, [r7, #4]
   2ab76:	2386      	movs	r3, #134	; 0x86
   2ab78:	009b      	lsls	r3, r3, #2
   2ab7a:	54d1      	strb	r1, [r2, r3]
   2ab7c:	687b      	ldr	r3, [r7, #4]
   2ab7e:	691b      	ldr	r3, [r3, #16]
   2ab80:	b29b      	uxth	r3, r3
   2ab82:	0a1b      	lsrs	r3, r3, #8
   2ab84:	b29b      	uxth	r3, r3
   2ab86:	b2d9      	uxtb	r1, r3
   2ab88:	687b      	ldr	r3, [r7, #4]
   2ab8a:	4a2e      	ldr	r2, [pc, #184]	; (2ac44 <sync+0x178>)
   2ab8c:	5499      	strb	r1, [r3, r2]
   2ab8e:	687b      	ldr	r3, [r7, #4]
   2ab90:	691b      	ldr	r3, [r3, #16]
   2ab92:	0c1b      	lsrs	r3, r3, #16
   2ab94:	b2d9      	uxtb	r1, r3
   2ab96:	687b      	ldr	r3, [r7, #4]
   2ab98:	4a2b      	ldr	r2, [pc, #172]	; (2ac48 <sync+0x17c>)
   2ab9a:	5499      	strb	r1, [r3, r2]
   2ab9c:	687b      	ldr	r3, [r7, #4]
   2ab9e:	691b      	ldr	r3, [r3, #16]
   2aba0:	0e1b      	lsrs	r3, r3, #24
   2aba2:	b2d9      	uxtb	r1, r3
   2aba4:	687b      	ldr	r3, [r7, #4]
   2aba6:	4a29      	ldr	r2, [pc, #164]	; (2ac4c <sync+0x180>)
   2aba8:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   2abaa:	687b      	ldr	r3, [r7, #4]
   2abac:	68db      	ldr	r3, [r3, #12]
   2abae:	b2d9      	uxtb	r1, r3
   2abb0:	687a      	ldr	r2, [r7, #4]
   2abb2:	2387      	movs	r3, #135	; 0x87
   2abb4:	009b      	lsls	r3, r3, #2
   2abb6:	54d1      	strb	r1, [r2, r3]
   2abb8:	687b      	ldr	r3, [r7, #4]
   2abba:	68db      	ldr	r3, [r3, #12]
   2abbc:	b29b      	uxth	r3, r3
   2abbe:	0a1b      	lsrs	r3, r3, #8
   2abc0:	b29b      	uxth	r3, r3
   2abc2:	b2d9      	uxtb	r1, r3
   2abc4:	687b      	ldr	r3, [r7, #4]
   2abc6:	4a22      	ldr	r2, [pc, #136]	; (2ac50 <sync+0x184>)
   2abc8:	5499      	strb	r1, [r3, r2]
   2abca:	687b      	ldr	r3, [r7, #4]
   2abcc:	68db      	ldr	r3, [r3, #12]
   2abce:	0c1b      	lsrs	r3, r3, #16
   2abd0:	b2d9      	uxtb	r1, r3
   2abd2:	687b      	ldr	r3, [r7, #4]
   2abd4:	4a1f      	ldr	r2, [pc, #124]	; (2ac54 <sync+0x188>)
   2abd6:	5499      	strb	r1, [r3, r2]
   2abd8:	687b      	ldr	r3, [r7, #4]
   2abda:	68db      	ldr	r3, [r3, #12]
   2abdc:	0e1b      	lsrs	r3, r3, #24
   2abde:	b2d9      	uxtb	r1, r3
   2abe0:	687b      	ldr	r3, [r7, #4]
   2abe2:	4a1d      	ldr	r2, [pc, #116]	; (2ac58 <sync+0x18c>)
   2abe4:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   2abe6:	687b      	ldr	r3, [r7, #4]
   2abe8:	7858      	ldrb	r0, [r3, #1]
   2abea:	687b      	ldr	r3, [r7, #4]
   2abec:	3330      	adds	r3, #48	; 0x30
   2abee:	0019      	movs	r1, r3
   2abf0:	687b      	ldr	r3, [r7, #4]
   2abf2:	695a      	ldr	r2, [r3, #20]
   2abf4:	2301      	movs	r3, #1
   2abf6:	4c19      	ldr	r4, [pc, #100]	; (2ac5c <sync+0x190>)
   2abf8:	47a0      	blx	r4
			fs->fsi_flag = 0;
   2abfa:	687b      	ldr	r3, [r7, #4]
   2abfc:	2200      	movs	r2, #0
   2abfe:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   2ac00:	687b      	ldr	r3, [r7, #4]
   2ac02:	785b      	ldrb	r3, [r3, #1]
   2ac04:	2200      	movs	r2, #0
   2ac06:	2100      	movs	r1, #0
   2ac08:	0018      	movs	r0, r3
   2ac0a:	4b15      	ldr	r3, [pc, #84]	; (2ac60 <sync+0x194>)
   2ac0c:	4798      	blx	r3
   2ac0e:	1e03      	subs	r3, r0, #0
   2ac10:	d003      	beq.n	2ac1a <sync+0x14e>
			res = FR_DISK_ERR;
   2ac12:	230f      	movs	r3, #15
   2ac14:	18fb      	adds	r3, r7, r3
   2ac16:	2201      	movs	r2, #1
   2ac18:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2ac1a:	230f      	movs	r3, #15
   2ac1c:	18fb      	adds	r3, r7, r3
   2ac1e:	781b      	ldrb	r3, [r3, #0]
}
   2ac20:	0018      	movs	r0, r3
   2ac22:	46bd      	mov	sp, r7
   2ac24:	b005      	add	sp, #20
   2ac26:	bd90      	pop	{r4, r7, pc}
   2ac28:	0002aa05 	.word	0x0002aa05
   2ac2c:	0002a959 	.word	0x0002a959
   2ac30:	0000022e 	.word	0x0000022e
   2ac34:	0000022f 	.word	0x0000022f
   2ac38:	00000215 	.word	0x00000215
   2ac3c:	00000216 	.word	0x00000216
   2ac40:	00000217 	.word	0x00000217
   2ac44:	00000219 	.word	0x00000219
   2ac48:	0000021a 	.word	0x0000021a
   2ac4c:	0000021b 	.word	0x0000021b
   2ac50:	0000021d 	.word	0x0000021d
   2ac54:	0000021e 	.word	0x0000021e
   2ac58:	0000021f 	.word	0x0000021f
   2ac5c:	0002a6f1 	.word	0x0002a6f1
   2ac60:	0002a7c9 	.word	0x0002a7c9

0002ac64 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
   2ac64:	b580      	push	{r7, lr}
   2ac66:	b082      	sub	sp, #8
   2ac68:	af00      	add	r7, sp, #0
   2ac6a:	6078      	str	r0, [r7, #4]
   2ac6c:	6039      	str	r1, [r7, #0]
	clst -= 2;
   2ac6e:	683b      	ldr	r3, [r7, #0]
   2ac70:	3b02      	subs	r3, #2
   2ac72:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   2ac74:	687b      	ldr	r3, [r7, #4]
   2ac76:	699b      	ldr	r3, [r3, #24]
   2ac78:	1e9a      	subs	r2, r3, #2
   2ac7a:	683b      	ldr	r3, [r7, #0]
   2ac7c:	429a      	cmp	r2, r3
   2ac7e:	d801      	bhi.n	2ac84 <clust2sect+0x20>
   2ac80:	2300      	movs	r3, #0
   2ac82:	e007      	b.n	2ac94 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
   2ac84:	687b      	ldr	r3, [r7, #4]
   2ac86:	789b      	ldrb	r3, [r3, #2]
   2ac88:	001a      	movs	r2, r3
   2ac8a:	683b      	ldr	r3, [r7, #0]
   2ac8c:	435a      	muls	r2, r3
   2ac8e:	687b      	ldr	r3, [r7, #4]
   2ac90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2ac92:	18d3      	adds	r3, r2, r3
}
   2ac94:	0018      	movs	r0, r3
   2ac96:	46bd      	mov	sp, r7
   2ac98:	b002      	add	sp, #8
   2ac9a:	bd80      	pop	{r7, pc}

0002ac9c <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
   2ac9c:	b580      	push	{r7, lr}
   2ac9e:	b086      	sub	sp, #24
   2aca0:	af00      	add	r7, sp, #0
   2aca2:	6078      	str	r0, [r7, #4]
   2aca4:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   2aca6:	683b      	ldr	r3, [r7, #0]
   2aca8:	2b01      	cmp	r3, #1
   2acaa:	d904      	bls.n	2acb6 <get_fat+0x1a>
   2acac:	687b      	ldr	r3, [r7, #4]
   2acae:	699a      	ldr	r2, [r3, #24]
   2acb0:	683b      	ldr	r3, [r7, #0]
   2acb2:	429a      	cmp	r2, r3
   2acb4:	d801      	bhi.n	2acba <get_fat+0x1e>
		return 1;
   2acb6:	2301      	movs	r3, #1
   2acb8:	e09f      	b.n	2adfa <get_fat+0x15e>

	switch (fs->fs_type) {
   2acba:	687b      	ldr	r3, [r7, #4]
   2acbc:	781b      	ldrb	r3, [r3, #0]
   2acbe:	2b02      	cmp	r3, #2
   2acc0:	d048      	beq.n	2ad54 <get_fat+0xb8>
   2acc2:	2b03      	cmp	r3, #3
   2acc4:	d067      	beq.n	2ad96 <get_fat+0xfa>
   2acc6:	2b01      	cmp	r3, #1
   2acc8:	d000      	beq.n	2accc <get_fat+0x30>
   2acca:	e094      	b.n	2adf6 <get_fat+0x15a>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
   2accc:	683b      	ldr	r3, [r7, #0]
   2acce:	617b      	str	r3, [r7, #20]
   2acd0:	697b      	ldr	r3, [r7, #20]
   2acd2:	085b      	lsrs	r3, r3, #1
   2acd4:	697a      	ldr	r2, [r7, #20]
   2acd6:	18d3      	adds	r3, r2, r3
   2acd8:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2acda:	687b      	ldr	r3, [r7, #4]
   2acdc:	6a1a      	ldr	r2, [r3, #32]
   2acde:	697b      	ldr	r3, [r7, #20]
   2ace0:	0a5b      	lsrs	r3, r3, #9
   2ace2:	18d2      	adds	r2, r2, r3
   2ace4:	687b      	ldr	r3, [r7, #4]
   2ace6:	0011      	movs	r1, r2
   2ace8:	0018      	movs	r0, r3
   2acea:	4b46      	ldr	r3, [pc, #280]	; (2ae04 <get_fat+0x168>)
   2acec:	4798      	blx	r3
   2acee:	1e03      	subs	r3, r0, #0
   2acf0:	d000      	beq.n	2acf4 <get_fat+0x58>
   2acf2:	e079      	b.n	2ade8 <get_fat+0x14c>
		wc = fs->win[bc % SS(fs)]; bc++;
   2acf4:	697b      	ldr	r3, [r7, #20]
   2acf6:	05db      	lsls	r3, r3, #23
   2acf8:	0ddb      	lsrs	r3, r3, #23
   2acfa:	687a      	ldr	r2, [r7, #4]
   2acfc:	2130      	movs	r1, #48	; 0x30
   2acfe:	18d3      	adds	r3, r2, r3
   2ad00:	185b      	adds	r3, r3, r1
   2ad02:	781b      	ldrb	r3, [r3, #0]
   2ad04:	613b      	str	r3, [r7, #16]
   2ad06:	697b      	ldr	r3, [r7, #20]
   2ad08:	3301      	adds	r3, #1
   2ad0a:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2ad0c:	687b      	ldr	r3, [r7, #4]
   2ad0e:	6a1a      	ldr	r2, [r3, #32]
   2ad10:	697b      	ldr	r3, [r7, #20]
   2ad12:	0a5b      	lsrs	r3, r3, #9
   2ad14:	18d2      	adds	r2, r2, r3
   2ad16:	687b      	ldr	r3, [r7, #4]
   2ad18:	0011      	movs	r1, r2
   2ad1a:	0018      	movs	r0, r3
   2ad1c:	4b39      	ldr	r3, [pc, #228]	; (2ae04 <get_fat+0x168>)
   2ad1e:	4798      	blx	r3
   2ad20:	1e03      	subs	r3, r0, #0
   2ad22:	d163      	bne.n	2adec <get_fat+0x150>
		wc |= fs->win[bc % SS(fs)] << 8;
   2ad24:	697b      	ldr	r3, [r7, #20]
   2ad26:	05db      	lsls	r3, r3, #23
   2ad28:	0ddb      	lsrs	r3, r3, #23
   2ad2a:	687a      	ldr	r2, [r7, #4]
   2ad2c:	2130      	movs	r1, #48	; 0x30
   2ad2e:	18d3      	adds	r3, r2, r3
   2ad30:	185b      	adds	r3, r3, r1
   2ad32:	781b      	ldrb	r3, [r3, #0]
   2ad34:	021b      	lsls	r3, r3, #8
   2ad36:	001a      	movs	r2, r3
   2ad38:	693b      	ldr	r3, [r7, #16]
   2ad3a:	4313      	orrs	r3, r2
   2ad3c:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   2ad3e:	683b      	ldr	r3, [r7, #0]
   2ad40:	2201      	movs	r2, #1
   2ad42:	4013      	ands	r3, r2
   2ad44:	d002      	beq.n	2ad4c <get_fat+0xb0>
   2ad46:	693b      	ldr	r3, [r7, #16]
   2ad48:	091b      	lsrs	r3, r3, #4
   2ad4a:	e056      	b.n	2adfa <get_fat+0x15e>
   2ad4c:	693b      	ldr	r3, [r7, #16]
   2ad4e:	051b      	lsls	r3, r3, #20
   2ad50:	0d1b      	lsrs	r3, r3, #20
   2ad52:	e052      	b.n	2adfa <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2ad54:	687b      	ldr	r3, [r7, #4]
   2ad56:	6a1a      	ldr	r2, [r3, #32]
   2ad58:	683b      	ldr	r3, [r7, #0]
   2ad5a:	0a1b      	lsrs	r3, r3, #8
   2ad5c:	18d2      	adds	r2, r2, r3
   2ad5e:	687b      	ldr	r3, [r7, #4]
   2ad60:	0011      	movs	r1, r2
   2ad62:	0018      	movs	r0, r3
   2ad64:	4b27      	ldr	r3, [pc, #156]	; (2ae04 <get_fat+0x168>)
   2ad66:	4798      	blx	r3
   2ad68:	1e03      	subs	r3, r0, #0
   2ad6a:	d141      	bne.n	2adf0 <get_fat+0x154>
		p = &fs->win[clst * 2 % SS(fs)];
   2ad6c:	683b      	ldr	r3, [r7, #0]
   2ad6e:	005a      	lsls	r2, r3, #1
   2ad70:	23ff      	movs	r3, #255	; 0xff
   2ad72:	005b      	lsls	r3, r3, #1
   2ad74:	4013      	ands	r3, r2
   2ad76:	3330      	adds	r3, #48	; 0x30
   2ad78:	687a      	ldr	r2, [r7, #4]
   2ad7a:	18d3      	adds	r3, r2, r3
   2ad7c:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
   2ad7e:	68fb      	ldr	r3, [r7, #12]
   2ad80:	3301      	adds	r3, #1
   2ad82:	781b      	ldrb	r3, [r3, #0]
   2ad84:	021b      	lsls	r3, r3, #8
   2ad86:	b21a      	sxth	r2, r3
   2ad88:	68fb      	ldr	r3, [r7, #12]
   2ad8a:	781b      	ldrb	r3, [r3, #0]
   2ad8c:	b21b      	sxth	r3, r3
   2ad8e:	4313      	orrs	r3, r2
   2ad90:	b21b      	sxth	r3, r3
   2ad92:	b29b      	uxth	r3, r3
   2ad94:	e031      	b.n	2adfa <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2ad96:	687b      	ldr	r3, [r7, #4]
   2ad98:	6a1a      	ldr	r2, [r3, #32]
   2ad9a:	683b      	ldr	r3, [r7, #0]
   2ad9c:	09db      	lsrs	r3, r3, #7
   2ad9e:	18d2      	adds	r2, r2, r3
   2ada0:	687b      	ldr	r3, [r7, #4]
   2ada2:	0011      	movs	r1, r2
   2ada4:	0018      	movs	r0, r3
   2ada6:	4b17      	ldr	r3, [pc, #92]	; (2ae04 <get_fat+0x168>)
   2ada8:	4798      	blx	r3
   2adaa:	1e03      	subs	r3, r0, #0
   2adac:	d122      	bne.n	2adf4 <get_fat+0x158>
		p = &fs->win[clst * 4 % SS(fs)];
   2adae:	683b      	ldr	r3, [r7, #0]
   2adb0:	009a      	lsls	r2, r3, #2
   2adb2:	23fe      	movs	r3, #254	; 0xfe
   2adb4:	005b      	lsls	r3, r3, #1
   2adb6:	4013      	ands	r3, r2
   2adb8:	3330      	adds	r3, #48	; 0x30
   2adba:	687a      	ldr	r2, [r7, #4]
   2adbc:	18d3      	adds	r3, r2, r3
   2adbe:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
   2adc0:	68fb      	ldr	r3, [r7, #12]
   2adc2:	3303      	adds	r3, #3
   2adc4:	781b      	ldrb	r3, [r3, #0]
   2adc6:	061a      	lsls	r2, r3, #24
   2adc8:	68fb      	ldr	r3, [r7, #12]
   2adca:	3302      	adds	r3, #2
   2adcc:	781b      	ldrb	r3, [r3, #0]
   2adce:	041b      	lsls	r3, r3, #16
   2add0:	4313      	orrs	r3, r2
   2add2:	68fa      	ldr	r2, [r7, #12]
   2add4:	3201      	adds	r2, #1
   2add6:	7812      	ldrb	r2, [r2, #0]
   2add8:	0212      	lsls	r2, r2, #8
   2adda:	4313      	orrs	r3, r2
   2addc:	68fa      	ldr	r2, [r7, #12]
   2adde:	7812      	ldrb	r2, [r2, #0]
   2ade0:	4313      	orrs	r3, r2
   2ade2:	011b      	lsls	r3, r3, #4
   2ade4:	091b      	lsrs	r3, r3, #4
   2ade6:	e008      	b.n	2adfa <get_fat+0x15e>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2ade8:	46c0      	nop			; (mov r8, r8)
   2adea:	e004      	b.n	2adf6 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2adec:	46c0      	nop			; (mov r8, r8)
   2adee:	e002      	b.n	2adf6 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2adf0:	46c0      	nop			; (mov r8, r8)
   2adf2:	e000      	b.n	2adf6 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2adf4:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   2adf6:	2301      	movs	r3, #1
   2adf8:	425b      	negs	r3, r3
}
   2adfa:	0018      	movs	r0, r3
   2adfc:	46bd      	mov	sp, r7
   2adfe:	b006      	add	sp, #24
   2ae00:	bd80      	pop	{r7, pc}
   2ae02:	46c0      	nop			; (mov r8, r8)
   2ae04:	0002aa05 	.word	0x0002aa05

0002ae08 <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
   2ae08:	b590      	push	{r4, r7, lr}
   2ae0a:	b089      	sub	sp, #36	; 0x24
   2ae0c:	af00      	add	r7, sp, #0
   2ae0e:	60f8      	str	r0, [r7, #12]
   2ae10:	60b9      	str	r1, [r7, #8]
   2ae12:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2ae14:	68bb      	ldr	r3, [r7, #8]
   2ae16:	2b01      	cmp	r3, #1
   2ae18:	d904      	bls.n	2ae24 <put_fat+0x1c>
   2ae1a:	68fb      	ldr	r3, [r7, #12]
   2ae1c:	699a      	ldr	r2, [r3, #24]
   2ae1e:	68bb      	ldr	r3, [r7, #8]
   2ae20:	429a      	cmp	r2, r3
   2ae22:	d804      	bhi.n	2ae2e <put_fat+0x26>
		res = FR_INT_ERR;
   2ae24:	231f      	movs	r3, #31
   2ae26:	18fb      	adds	r3, r7, r3
   2ae28:	2202      	movs	r2, #2
   2ae2a:	701a      	strb	r2, [r3, #0]
   2ae2c:	e100      	b.n	2b030 <put_fat+0x228>

	} else {
		switch (fs->fs_type) {
   2ae2e:	68fb      	ldr	r3, [r7, #12]
   2ae30:	781b      	ldrb	r3, [r3, #0]
   2ae32:	2b02      	cmp	r3, #2
   2ae34:	d100      	bne.n	2ae38 <put_fat+0x30>
   2ae36:	e078      	b.n	2af2a <put_fat+0x122>
   2ae38:	2b03      	cmp	r3, #3
   2ae3a:	d100      	bne.n	2ae3e <put_fat+0x36>
   2ae3c:	e09e      	b.n	2af7c <put_fat+0x174>
   2ae3e:	2b01      	cmp	r3, #1
   2ae40:	d000      	beq.n	2ae44 <put_fat+0x3c>
   2ae42:	e0e6      	b.n	2b012 <put_fat+0x20a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
   2ae44:	68bb      	ldr	r3, [r7, #8]
   2ae46:	61bb      	str	r3, [r7, #24]
   2ae48:	69bb      	ldr	r3, [r7, #24]
   2ae4a:	085b      	lsrs	r3, r3, #1
   2ae4c:	69ba      	ldr	r2, [r7, #24]
   2ae4e:	18d3      	adds	r3, r2, r3
   2ae50:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2ae52:	68fb      	ldr	r3, [r7, #12]
   2ae54:	6a1a      	ldr	r2, [r3, #32]
   2ae56:	69bb      	ldr	r3, [r7, #24]
   2ae58:	0a5b      	lsrs	r3, r3, #9
   2ae5a:	18d2      	adds	r2, r2, r3
   2ae5c:	231f      	movs	r3, #31
   2ae5e:	18fc      	adds	r4, r7, r3
   2ae60:	68fb      	ldr	r3, [r7, #12]
   2ae62:	0011      	movs	r1, r2
   2ae64:	0018      	movs	r0, r3
   2ae66:	4b76      	ldr	r3, [pc, #472]	; (2b040 <put_fat+0x238>)
   2ae68:	4798      	blx	r3
   2ae6a:	0003      	movs	r3, r0
   2ae6c:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2ae6e:	231f      	movs	r3, #31
   2ae70:	18fb      	adds	r3, r7, r3
   2ae72:	781b      	ldrb	r3, [r3, #0]
   2ae74:	2b00      	cmp	r3, #0
   2ae76:	d000      	beq.n	2ae7a <put_fat+0x72>
   2ae78:	e0d0      	b.n	2b01c <put_fat+0x214>
			p = &fs->win[bc % SS(fs)];
   2ae7a:	69bb      	ldr	r3, [r7, #24]
   2ae7c:	05db      	lsls	r3, r3, #23
   2ae7e:	0ddb      	lsrs	r3, r3, #23
   2ae80:	3330      	adds	r3, #48	; 0x30
   2ae82:	68fa      	ldr	r2, [r7, #12]
   2ae84:	18d3      	adds	r3, r2, r3
   2ae86:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   2ae88:	68bb      	ldr	r3, [r7, #8]
   2ae8a:	2201      	movs	r2, #1
   2ae8c:	4013      	ands	r3, r2
   2ae8e:	d00d      	beq.n	2aeac <put_fat+0xa4>
   2ae90:	697b      	ldr	r3, [r7, #20]
   2ae92:	781b      	ldrb	r3, [r3, #0]
   2ae94:	b25b      	sxtb	r3, r3
   2ae96:	220f      	movs	r2, #15
   2ae98:	4013      	ands	r3, r2
   2ae9a:	b25a      	sxtb	r2, r3
   2ae9c:	687b      	ldr	r3, [r7, #4]
   2ae9e:	b2db      	uxtb	r3, r3
   2aea0:	011b      	lsls	r3, r3, #4
   2aea2:	b25b      	sxtb	r3, r3
   2aea4:	4313      	orrs	r3, r2
   2aea6:	b25b      	sxtb	r3, r3
   2aea8:	b2db      	uxtb	r3, r3
   2aeaa:	e001      	b.n	2aeb0 <put_fat+0xa8>
   2aeac:	687b      	ldr	r3, [r7, #4]
   2aeae:	b2db      	uxtb	r3, r3
   2aeb0:	697a      	ldr	r2, [r7, #20]
   2aeb2:	7013      	strb	r3, [r2, #0]
			bc++;
   2aeb4:	69bb      	ldr	r3, [r7, #24]
   2aeb6:	3301      	adds	r3, #1
   2aeb8:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
   2aeba:	68fb      	ldr	r3, [r7, #12]
   2aebc:	2201      	movs	r2, #1
   2aebe:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2aec0:	68fb      	ldr	r3, [r7, #12]
   2aec2:	6a1a      	ldr	r2, [r3, #32]
   2aec4:	69bb      	ldr	r3, [r7, #24]
   2aec6:	0a5b      	lsrs	r3, r3, #9
   2aec8:	18d2      	adds	r2, r2, r3
   2aeca:	231f      	movs	r3, #31
   2aecc:	18fc      	adds	r4, r7, r3
   2aece:	68fb      	ldr	r3, [r7, #12]
   2aed0:	0011      	movs	r1, r2
   2aed2:	0018      	movs	r0, r3
   2aed4:	4b5a      	ldr	r3, [pc, #360]	; (2b040 <put_fat+0x238>)
   2aed6:	4798      	blx	r3
   2aed8:	0003      	movs	r3, r0
   2aeda:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2aedc:	231f      	movs	r3, #31
   2aede:	18fb      	adds	r3, r7, r3
   2aee0:	781b      	ldrb	r3, [r3, #0]
   2aee2:	2b00      	cmp	r3, #0
   2aee4:	d000      	beq.n	2aee8 <put_fat+0xe0>
   2aee6:	e09b      	b.n	2b020 <put_fat+0x218>
			p = &fs->win[bc % SS(fs)];
   2aee8:	69bb      	ldr	r3, [r7, #24]
   2aeea:	05db      	lsls	r3, r3, #23
   2aeec:	0ddb      	lsrs	r3, r3, #23
   2aeee:	3330      	adds	r3, #48	; 0x30
   2aef0:	68fa      	ldr	r2, [r7, #12]
   2aef2:	18d3      	adds	r3, r2, r3
   2aef4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   2aef6:	68bb      	ldr	r3, [r7, #8]
   2aef8:	2201      	movs	r2, #1
   2aefa:	4013      	ands	r3, r2
   2aefc:	d003      	beq.n	2af06 <put_fat+0xfe>
   2aefe:	687b      	ldr	r3, [r7, #4]
   2af00:	091b      	lsrs	r3, r3, #4
   2af02:	b2db      	uxtb	r3, r3
   2af04:	e00e      	b.n	2af24 <put_fat+0x11c>
   2af06:	697b      	ldr	r3, [r7, #20]
   2af08:	781b      	ldrb	r3, [r3, #0]
   2af0a:	b25b      	sxtb	r3, r3
   2af0c:	220f      	movs	r2, #15
   2af0e:	4393      	bics	r3, r2
   2af10:	b25a      	sxtb	r2, r3
   2af12:	687b      	ldr	r3, [r7, #4]
   2af14:	0a1b      	lsrs	r3, r3, #8
   2af16:	b25b      	sxtb	r3, r3
   2af18:	210f      	movs	r1, #15
   2af1a:	400b      	ands	r3, r1
   2af1c:	b25b      	sxtb	r3, r3
   2af1e:	4313      	orrs	r3, r2
   2af20:	b25b      	sxtb	r3, r3
   2af22:	b2db      	uxtb	r3, r3
   2af24:	697a      	ldr	r2, [r7, #20]
   2af26:	7013      	strb	r3, [r2, #0]
			break;
   2af28:	e07f      	b.n	2b02a <put_fat+0x222>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   2af2a:	68fb      	ldr	r3, [r7, #12]
   2af2c:	6a1a      	ldr	r2, [r3, #32]
   2af2e:	68bb      	ldr	r3, [r7, #8]
   2af30:	0a1b      	lsrs	r3, r3, #8
   2af32:	18d2      	adds	r2, r2, r3
   2af34:	231f      	movs	r3, #31
   2af36:	18fc      	adds	r4, r7, r3
   2af38:	68fb      	ldr	r3, [r7, #12]
   2af3a:	0011      	movs	r1, r2
   2af3c:	0018      	movs	r0, r3
   2af3e:	4b40      	ldr	r3, [pc, #256]	; (2b040 <put_fat+0x238>)
   2af40:	4798      	blx	r3
   2af42:	0003      	movs	r3, r0
   2af44:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2af46:	231f      	movs	r3, #31
   2af48:	18fb      	adds	r3, r7, r3
   2af4a:	781b      	ldrb	r3, [r3, #0]
   2af4c:	2b00      	cmp	r3, #0
   2af4e:	d169      	bne.n	2b024 <put_fat+0x21c>
			p = &fs->win[clst * 2 % SS(fs)];
   2af50:	68bb      	ldr	r3, [r7, #8]
   2af52:	005a      	lsls	r2, r3, #1
   2af54:	23ff      	movs	r3, #255	; 0xff
   2af56:	005b      	lsls	r3, r3, #1
   2af58:	4013      	ands	r3, r2
   2af5a:	3330      	adds	r3, #48	; 0x30
   2af5c:	68fa      	ldr	r2, [r7, #12]
   2af5e:	18d3      	adds	r3, r2, r3
   2af60:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
   2af62:	687b      	ldr	r3, [r7, #4]
   2af64:	b2da      	uxtb	r2, r3
   2af66:	697b      	ldr	r3, [r7, #20]
   2af68:	701a      	strb	r2, [r3, #0]
   2af6a:	697b      	ldr	r3, [r7, #20]
   2af6c:	3301      	adds	r3, #1
   2af6e:	687a      	ldr	r2, [r7, #4]
   2af70:	b292      	uxth	r2, r2
   2af72:	0a12      	lsrs	r2, r2, #8
   2af74:	b292      	uxth	r2, r2
   2af76:	b2d2      	uxtb	r2, r2
   2af78:	701a      	strb	r2, [r3, #0]
			break;
   2af7a:	e056      	b.n	2b02a <put_fat+0x222>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   2af7c:	68fb      	ldr	r3, [r7, #12]
   2af7e:	6a1a      	ldr	r2, [r3, #32]
   2af80:	68bb      	ldr	r3, [r7, #8]
   2af82:	09db      	lsrs	r3, r3, #7
   2af84:	18d2      	adds	r2, r2, r3
   2af86:	231f      	movs	r3, #31
   2af88:	18fc      	adds	r4, r7, r3
   2af8a:	68fb      	ldr	r3, [r7, #12]
   2af8c:	0011      	movs	r1, r2
   2af8e:	0018      	movs	r0, r3
   2af90:	4b2b      	ldr	r3, [pc, #172]	; (2b040 <put_fat+0x238>)
   2af92:	4798      	blx	r3
   2af94:	0003      	movs	r3, r0
   2af96:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2af98:	231f      	movs	r3, #31
   2af9a:	18fb      	adds	r3, r7, r3
   2af9c:	781b      	ldrb	r3, [r3, #0]
   2af9e:	2b00      	cmp	r3, #0
   2afa0:	d142      	bne.n	2b028 <put_fat+0x220>
			p = &fs->win[clst * 4 % SS(fs)];
   2afa2:	68bb      	ldr	r3, [r7, #8]
   2afa4:	009a      	lsls	r2, r3, #2
   2afa6:	23fe      	movs	r3, #254	; 0xfe
   2afa8:	005b      	lsls	r3, r3, #1
   2afaa:	4013      	ands	r3, r2
   2afac:	3330      	adds	r3, #48	; 0x30
   2afae:	68fa      	ldr	r2, [r7, #12]
   2afb0:	18d3      	adds	r3, r2, r3
   2afb2:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
   2afb4:	697b      	ldr	r3, [r7, #20]
   2afb6:	3303      	adds	r3, #3
   2afb8:	781b      	ldrb	r3, [r3, #0]
   2afba:	061a      	lsls	r2, r3, #24
   2afbc:	697b      	ldr	r3, [r7, #20]
   2afbe:	3302      	adds	r3, #2
   2afc0:	781b      	ldrb	r3, [r3, #0]
   2afc2:	041b      	lsls	r3, r3, #16
   2afc4:	4313      	orrs	r3, r2
   2afc6:	697a      	ldr	r2, [r7, #20]
   2afc8:	3201      	adds	r2, #1
   2afca:	7812      	ldrb	r2, [r2, #0]
   2afcc:	0212      	lsls	r2, r2, #8
   2afce:	4313      	orrs	r3, r2
   2afd0:	697a      	ldr	r2, [r7, #20]
   2afd2:	7812      	ldrb	r2, [r2, #0]
   2afd4:	4313      	orrs	r3, r2
   2afd6:	0f1b      	lsrs	r3, r3, #28
   2afd8:	071b      	lsls	r3, r3, #28
   2afda:	687a      	ldr	r2, [r7, #4]
   2afdc:	4313      	orrs	r3, r2
   2afde:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
   2afe0:	687b      	ldr	r3, [r7, #4]
   2afe2:	b2da      	uxtb	r2, r3
   2afe4:	697b      	ldr	r3, [r7, #20]
   2afe6:	701a      	strb	r2, [r3, #0]
   2afe8:	697b      	ldr	r3, [r7, #20]
   2afea:	3301      	adds	r3, #1
   2afec:	687a      	ldr	r2, [r7, #4]
   2afee:	b292      	uxth	r2, r2
   2aff0:	0a12      	lsrs	r2, r2, #8
   2aff2:	b292      	uxth	r2, r2
   2aff4:	b2d2      	uxtb	r2, r2
   2aff6:	701a      	strb	r2, [r3, #0]
   2aff8:	697b      	ldr	r3, [r7, #20]
   2affa:	3302      	adds	r3, #2
   2affc:	687a      	ldr	r2, [r7, #4]
   2affe:	0c12      	lsrs	r2, r2, #16
   2b000:	b2d2      	uxtb	r2, r2
   2b002:	701a      	strb	r2, [r3, #0]
   2b004:	697b      	ldr	r3, [r7, #20]
   2b006:	3303      	adds	r3, #3
   2b008:	687a      	ldr	r2, [r7, #4]
   2b00a:	0e12      	lsrs	r2, r2, #24
   2b00c:	b2d2      	uxtb	r2, r2
   2b00e:	701a      	strb	r2, [r3, #0]
			break;
   2b010:	e00b      	b.n	2b02a <put_fat+0x222>

		default :
			res = FR_INT_ERR;
   2b012:	231f      	movs	r3, #31
   2b014:	18fb      	adds	r3, r7, r3
   2b016:	2202      	movs	r2, #2
   2b018:	701a      	strb	r2, [r3, #0]
   2b01a:	e006      	b.n	2b02a <put_fat+0x222>
			if (res != FR_OK) break;
   2b01c:	46c0      	nop			; (mov r8, r8)
   2b01e:	e004      	b.n	2b02a <put_fat+0x222>
			if (res != FR_OK) break;
   2b020:	46c0      	nop			; (mov r8, r8)
   2b022:	e002      	b.n	2b02a <put_fat+0x222>
			if (res != FR_OK) break;
   2b024:	46c0      	nop			; (mov r8, r8)
   2b026:	e000      	b.n	2b02a <put_fat+0x222>
			if (res != FR_OK) break;
   2b028:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
   2b02a:	68fb      	ldr	r3, [r7, #12]
   2b02c:	2201      	movs	r2, #1
   2b02e:	711a      	strb	r2, [r3, #4]
	}

	return res;
   2b030:	231f      	movs	r3, #31
   2b032:	18fb      	adds	r3, r7, r3
   2b034:	781b      	ldrb	r3, [r3, #0]
}
   2b036:	0018      	movs	r0, r3
   2b038:	46bd      	mov	sp, r7
   2b03a:	b009      	add	sp, #36	; 0x24
   2b03c:	bd90      	pop	{r4, r7, pc}
   2b03e:	46c0      	nop			; (mov r8, r8)
   2b040:	0002aa05 	.word	0x0002aa05

0002b044 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
   2b044:	b590      	push	{r4, r7, lr}
   2b046:	b085      	sub	sp, #20
   2b048:	af00      	add	r7, sp, #0
   2b04a:	6078      	str	r0, [r7, #4]
   2b04c:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2b04e:	683b      	ldr	r3, [r7, #0]
   2b050:	2b01      	cmp	r3, #1
   2b052:	d904      	bls.n	2b05e <remove_chain+0x1a>
   2b054:	687b      	ldr	r3, [r7, #4]
   2b056:	699a      	ldr	r2, [r3, #24]
   2b058:	683b      	ldr	r3, [r7, #0]
   2b05a:	429a      	cmp	r2, r3
   2b05c:	d804      	bhi.n	2b068 <remove_chain+0x24>
		res = FR_INT_ERR;
   2b05e:	230f      	movs	r3, #15
   2b060:	18fb      	adds	r3, r7, r3
   2b062:	2202      	movs	r2, #2
   2b064:	701a      	strb	r2, [r3, #0]
   2b066:	e045      	b.n	2b0f4 <remove_chain+0xb0>

	} else {
		res = FR_OK;
   2b068:	230f      	movs	r3, #15
   2b06a:	18fb      	adds	r3, r7, r3
   2b06c:	2200      	movs	r2, #0
   2b06e:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2b070:	e037      	b.n	2b0e2 <remove_chain+0x9e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   2b072:	683a      	ldr	r2, [r7, #0]
   2b074:	687b      	ldr	r3, [r7, #4]
   2b076:	0011      	movs	r1, r2
   2b078:	0018      	movs	r0, r3
   2b07a:	4b22      	ldr	r3, [pc, #136]	; (2b104 <remove_chain+0xc0>)
   2b07c:	4798      	blx	r3
   2b07e:	0003      	movs	r3, r0
   2b080:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
   2b082:	68bb      	ldr	r3, [r7, #8]
   2b084:	2b00      	cmp	r3, #0
   2b086:	d032      	beq.n	2b0ee <remove_chain+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   2b088:	68bb      	ldr	r3, [r7, #8]
   2b08a:	2b01      	cmp	r3, #1
   2b08c:	d104      	bne.n	2b098 <remove_chain+0x54>
   2b08e:	230f      	movs	r3, #15
   2b090:	18fb      	adds	r3, r7, r3
   2b092:	2202      	movs	r2, #2
   2b094:	701a      	strb	r2, [r3, #0]
   2b096:	e02d      	b.n	2b0f4 <remove_chain+0xb0>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   2b098:	68bb      	ldr	r3, [r7, #8]
   2b09a:	3301      	adds	r3, #1
   2b09c:	d104      	bne.n	2b0a8 <remove_chain+0x64>
   2b09e:	230f      	movs	r3, #15
   2b0a0:	18fb      	adds	r3, r7, r3
   2b0a2:	2201      	movs	r2, #1
   2b0a4:	701a      	strb	r2, [r3, #0]
   2b0a6:	e025      	b.n	2b0f4 <remove_chain+0xb0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   2b0a8:	230f      	movs	r3, #15
   2b0aa:	18fc      	adds	r4, r7, r3
   2b0ac:	6839      	ldr	r1, [r7, #0]
   2b0ae:	687b      	ldr	r3, [r7, #4]
   2b0b0:	2200      	movs	r2, #0
   2b0b2:	0018      	movs	r0, r3
   2b0b4:	4b14      	ldr	r3, [pc, #80]	; (2b108 <remove_chain+0xc4>)
   2b0b6:	4798      	blx	r3
   2b0b8:	0003      	movs	r3, r0
   2b0ba:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2b0bc:	230f      	movs	r3, #15
   2b0be:	18fb      	adds	r3, r7, r3
   2b0c0:	781b      	ldrb	r3, [r3, #0]
   2b0c2:	2b00      	cmp	r3, #0
   2b0c4:	d115      	bne.n	2b0f2 <remove_chain+0xae>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   2b0c6:	687b      	ldr	r3, [r7, #4]
   2b0c8:	691b      	ldr	r3, [r3, #16]
   2b0ca:	3301      	adds	r3, #1
   2b0cc:	d007      	beq.n	2b0de <remove_chain+0x9a>
				fs->free_clust++;
   2b0ce:	687b      	ldr	r3, [r7, #4]
   2b0d0:	691b      	ldr	r3, [r3, #16]
   2b0d2:	1c5a      	adds	r2, r3, #1
   2b0d4:	687b      	ldr	r3, [r7, #4]
   2b0d6:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
   2b0d8:	687b      	ldr	r3, [r7, #4]
   2b0da:	2201      	movs	r2, #1
   2b0dc:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
   2b0de:	68bb      	ldr	r3, [r7, #8]
   2b0e0:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2b0e2:	687b      	ldr	r3, [r7, #4]
   2b0e4:	699a      	ldr	r2, [r3, #24]
   2b0e6:	683b      	ldr	r3, [r7, #0]
   2b0e8:	429a      	cmp	r2, r3
   2b0ea:	d8c2      	bhi.n	2b072 <remove_chain+0x2e>
   2b0ec:	e002      	b.n	2b0f4 <remove_chain+0xb0>
			if (nxt == 0) break;				/* Empty cluster? */
   2b0ee:	46c0      	nop			; (mov r8, r8)
   2b0f0:	e000      	b.n	2b0f4 <remove_chain+0xb0>
			if (res != FR_OK) break;
   2b0f2:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2b0f4:	230f      	movs	r3, #15
   2b0f6:	18fb      	adds	r3, r7, r3
   2b0f8:	781b      	ldrb	r3, [r3, #0]
}
   2b0fa:	0018      	movs	r0, r3
   2b0fc:	46bd      	mov	sp, r7
   2b0fe:	b005      	add	sp, #20
   2b100:	bd90      	pop	{r4, r7, pc}
   2b102:	46c0      	nop			; (mov r8, r8)
   2b104:	0002ac9d 	.word	0x0002ac9d
   2b108:	0002ae09 	.word	0x0002ae09

0002b10c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
   2b10c:	b590      	push	{r4, r7, lr}
   2b10e:	b087      	sub	sp, #28
   2b110:	af00      	add	r7, sp, #0
   2b112:	6078      	str	r0, [r7, #4]
   2b114:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
   2b116:	683b      	ldr	r3, [r7, #0]
   2b118:	2b00      	cmp	r3, #0
   2b11a:	d10d      	bne.n	2b138 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
   2b11c:	687b      	ldr	r3, [r7, #4]
   2b11e:	68db      	ldr	r3, [r3, #12]
   2b120:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   2b122:	693b      	ldr	r3, [r7, #16]
   2b124:	2b00      	cmp	r3, #0
   2b126:	d004      	beq.n	2b132 <create_chain+0x26>
   2b128:	687b      	ldr	r3, [r7, #4]
   2b12a:	699a      	ldr	r2, [r3, #24]
   2b12c:	693b      	ldr	r3, [r7, #16]
   2b12e:	429a      	cmp	r2, r3
   2b130:	d818      	bhi.n	2b164 <create_chain+0x58>
   2b132:	2301      	movs	r3, #1
   2b134:	613b      	str	r3, [r7, #16]
   2b136:	e015      	b.n	2b164 <create_chain+0x58>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
   2b138:	683a      	ldr	r2, [r7, #0]
   2b13a:	687b      	ldr	r3, [r7, #4]
   2b13c:	0011      	movs	r1, r2
   2b13e:	0018      	movs	r0, r3
   2b140:	4b3e      	ldr	r3, [pc, #248]	; (2b23c <create_chain+0x130>)
   2b142:	4798      	blx	r3
   2b144:	0003      	movs	r3, r0
   2b146:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
   2b148:	68bb      	ldr	r3, [r7, #8]
   2b14a:	2b01      	cmp	r3, #1
   2b14c:	d801      	bhi.n	2b152 <create_chain+0x46>
   2b14e:	2301      	movs	r3, #1
   2b150:	e070      	b.n	2b234 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   2b152:	687b      	ldr	r3, [r7, #4]
   2b154:	699a      	ldr	r2, [r3, #24]
   2b156:	68bb      	ldr	r3, [r7, #8]
   2b158:	429a      	cmp	r2, r3
   2b15a:	d901      	bls.n	2b160 <create_chain+0x54>
   2b15c:	68bb      	ldr	r3, [r7, #8]
   2b15e:	e069      	b.n	2b234 <create_chain+0x128>
		scl = clst;
   2b160:	683b      	ldr	r3, [r7, #0]
   2b162:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
   2b164:	693b      	ldr	r3, [r7, #16]
   2b166:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
   2b168:	697b      	ldr	r3, [r7, #20]
   2b16a:	3301      	adds	r3, #1
   2b16c:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   2b16e:	687b      	ldr	r3, [r7, #4]
   2b170:	699a      	ldr	r2, [r3, #24]
   2b172:	697b      	ldr	r3, [r7, #20]
   2b174:	429a      	cmp	r2, r3
   2b176:	d807      	bhi.n	2b188 <create_chain+0x7c>
			ncl = 2;
   2b178:	2302      	movs	r3, #2
   2b17a:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
   2b17c:	697a      	ldr	r2, [r7, #20]
   2b17e:	693b      	ldr	r3, [r7, #16]
   2b180:	429a      	cmp	r2, r3
   2b182:	d901      	bls.n	2b188 <create_chain+0x7c>
   2b184:	2300      	movs	r3, #0
   2b186:	e055      	b.n	2b234 <create_chain+0x128>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   2b188:	697a      	ldr	r2, [r7, #20]
   2b18a:	687b      	ldr	r3, [r7, #4]
   2b18c:	0011      	movs	r1, r2
   2b18e:	0018      	movs	r0, r3
   2b190:	4b2a      	ldr	r3, [pc, #168]	; (2b23c <create_chain+0x130>)
   2b192:	4798      	blx	r3
   2b194:	0003      	movs	r3, r0
   2b196:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
   2b198:	68bb      	ldr	r3, [r7, #8]
   2b19a:	2b00      	cmp	r3, #0
   2b19c:	d00d      	beq.n	2b1ba <create_chain+0xae>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   2b19e:	68bb      	ldr	r3, [r7, #8]
   2b1a0:	3301      	adds	r3, #1
   2b1a2:	d002      	beq.n	2b1aa <create_chain+0x9e>
   2b1a4:	68bb      	ldr	r3, [r7, #8]
   2b1a6:	2b01      	cmp	r3, #1
   2b1a8:	d101      	bne.n	2b1ae <create_chain+0xa2>
			return cs;
   2b1aa:	68bb      	ldr	r3, [r7, #8]
   2b1ac:	e042      	b.n	2b234 <create_chain+0x128>
		if (ncl == scl) return 0;		/* No free cluster */
   2b1ae:	697a      	ldr	r2, [r7, #20]
   2b1b0:	693b      	ldr	r3, [r7, #16]
   2b1b2:	429a      	cmp	r2, r3
   2b1b4:	d1d8      	bne.n	2b168 <create_chain+0x5c>
   2b1b6:	2300      	movs	r3, #0
   2b1b8:	e03c      	b.n	2b234 <create_chain+0x128>
		if (cs == 0) break;				/* Found a free cluster */
   2b1ba:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   2b1bc:	230f      	movs	r3, #15
   2b1be:	18fc      	adds	r4, r7, r3
   2b1c0:	4a1f      	ldr	r2, [pc, #124]	; (2b240 <create_chain+0x134>)
   2b1c2:	6979      	ldr	r1, [r7, #20]
   2b1c4:	687b      	ldr	r3, [r7, #4]
   2b1c6:	0018      	movs	r0, r3
   2b1c8:	4b1e      	ldr	r3, [pc, #120]	; (2b244 <create_chain+0x138>)
   2b1ca:	4798      	blx	r3
   2b1cc:	0003      	movs	r3, r0
   2b1ce:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
   2b1d0:	230f      	movs	r3, #15
   2b1d2:	18fb      	adds	r3, r7, r3
   2b1d4:	781b      	ldrb	r3, [r3, #0]
   2b1d6:	2b00      	cmp	r3, #0
   2b1d8:	d10c      	bne.n	2b1f4 <create_chain+0xe8>
   2b1da:	683b      	ldr	r3, [r7, #0]
   2b1dc:	2b00      	cmp	r3, #0
   2b1de:	d009      	beq.n	2b1f4 <create_chain+0xe8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   2b1e0:	230f      	movs	r3, #15
   2b1e2:	18fc      	adds	r4, r7, r3
   2b1e4:	697a      	ldr	r2, [r7, #20]
   2b1e6:	6839      	ldr	r1, [r7, #0]
   2b1e8:	687b      	ldr	r3, [r7, #4]
   2b1ea:	0018      	movs	r0, r3
   2b1ec:	4b15      	ldr	r3, [pc, #84]	; (2b244 <create_chain+0x138>)
   2b1ee:	4798      	blx	r3
   2b1f0:	0003      	movs	r3, r0
   2b1f2:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
   2b1f4:	230f      	movs	r3, #15
   2b1f6:	18fb      	adds	r3, r7, r3
   2b1f8:	781b      	ldrb	r3, [r3, #0]
   2b1fa:	2b00      	cmp	r3, #0
   2b1fc:	d10f      	bne.n	2b21e <create_chain+0x112>
		fs->last_clust = ncl;			/* Update FSINFO */
   2b1fe:	687b      	ldr	r3, [r7, #4]
   2b200:	697a      	ldr	r2, [r7, #20]
   2b202:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   2b204:	687b      	ldr	r3, [r7, #4]
   2b206:	691b      	ldr	r3, [r3, #16]
   2b208:	3301      	adds	r3, #1
   2b20a:	d012      	beq.n	2b232 <create_chain+0x126>
			fs->free_clust--;
   2b20c:	687b      	ldr	r3, [r7, #4]
   2b20e:	691b      	ldr	r3, [r3, #16]
   2b210:	1e5a      	subs	r2, r3, #1
   2b212:	687b      	ldr	r3, [r7, #4]
   2b214:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
   2b216:	687b      	ldr	r3, [r7, #4]
   2b218:	2201      	movs	r2, #1
   2b21a:	715a      	strb	r2, [r3, #5]
   2b21c:	e009      	b.n	2b232 <create_chain+0x126>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   2b21e:	230f      	movs	r3, #15
   2b220:	18fb      	adds	r3, r7, r3
   2b222:	781b      	ldrb	r3, [r3, #0]
   2b224:	2b01      	cmp	r3, #1
   2b226:	d102      	bne.n	2b22e <create_chain+0x122>
   2b228:	2301      	movs	r3, #1
   2b22a:	425b      	negs	r3, r3
   2b22c:	e000      	b.n	2b230 <create_chain+0x124>
   2b22e:	2301      	movs	r3, #1
   2b230:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
   2b232:	697b      	ldr	r3, [r7, #20]
}
   2b234:	0018      	movs	r0, r3
   2b236:	46bd      	mov	sp, r7
   2b238:	b007      	add	sp, #28
   2b23a:	bd90      	pop	{r4, r7, pc}
   2b23c:	0002ac9d 	.word	0x0002ac9d
   2b240:	0fffffff 	.word	0x0fffffff
   2b244:	0002ae09 	.word	0x0002ae09

0002b248 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
   2b248:	b580      	push	{r7, lr}
   2b24a:	b084      	sub	sp, #16
   2b24c:	af00      	add	r7, sp, #0
   2b24e:	6078      	str	r0, [r7, #4]
   2b250:	000a      	movs	r2, r1
   2b252:	1cbb      	adds	r3, r7, #2
   2b254:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
   2b256:	687b      	ldr	r3, [r7, #4]
   2b258:	1cba      	adds	r2, r7, #2
   2b25a:	8812      	ldrh	r2, [r2, #0]
   2b25c:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
   2b25e:	687b      	ldr	r3, [r7, #4]
   2b260:	689b      	ldr	r3, [r3, #8]
   2b262:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   2b264:	68fb      	ldr	r3, [r7, #12]
   2b266:	2b01      	cmp	r3, #1
   2b268:	d005      	beq.n	2b276 <dir_sdi+0x2e>
   2b26a:	687b      	ldr	r3, [r7, #4]
   2b26c:	681b      	ldr	r3, [r3, #0]
   2b26e:	699a      	ldr	r2, [r3, #24]
   2b270:	68fb      	ldr	r3, [r7, #12]
   2b272:	429a      	cmp	r2, r3
   2b274:	d801      	bhi.n	2b27a <dir_sdi+0x32>
		return FR_INT_ERR;
   2b276:	2302      	movs	r3, #2
   2b278:	e075      	b.n	2b366 <dir_sdi+0x11e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   2b27a:	68fb      	ldr	r3, [r7, #12]
   2b27c:	2b00      	cmp	r3, #0
   2b27e:	d108      	bne.n	2b292 <dir_sdi+0x4a>
   2b280:	687b      	ldr	r3, [r7, #4]
   2b282:	681b      	ldr	r3, [r3, #0]
   2b284:	781b      	ldrb	r3, [r3, #0]
   2b286:	2b03      	cmp	r3, #3
   2b288:	d103      	bne.n	2b292 <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
   2b28a:	687b      	ldr	r3, [r7, #4]
   2b28c:	681b      	ldr	r3, [r3, #0]
   2b28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2b290:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   2b292:	68fb      	ldr	r3, [r7, #12]
   2b294:	2b00      	cmp	r3, #0
   2b296:	d116      	bne.n	2b2c6 <dir_sdi+0x7e>
		dj->clust = clst;
   2b298:	687b      	ldr	r3, [r7, #4]
   2b29a:	68fa      	ldr	r2, [r7, #12]
   2b29c:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   2b29e:	687b      	ldr	r3, [r7, #4]
   2b2a0:	681b      	ldr	r3, [r3, #0]
   2b2a2:	891b      	ldrh	r3, [r3, #8]
   2b2a4:	1cba      	adds	r2, r7, #2
   2b2a6:	8812      	ldrh	r2, [r2, #0]
   2b2a8:	429a      	cmp	r2, r3
   2b2aa:	d301      	bcc.n	2b2b0 <dir_sdi+0x68>
			return FR_INT_ERR;
   2b2ac:	2302      	movs	r3, #2
   2b2ae:	e05a      	b.n	2b366 <dir_sdi+0x11e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2b2b0:	687b      	ldr	r3, [r7, #4]
   2b2b2:	681b      	ldr	r3, [r3, #0]
   2b2b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2b2b6:	1cba      	adds	r2, r7, #2
   2b2b8:	8812      	ldrh	r2, [r2, #0]
   2b2ba:	0912      	lsrs	r2, r2, #4
   2b2bc:	b292      	uxth	r2, r2
   2b2be:	189a      	adds	r2, r3, r2
   2b2c0:	687b      	ldr	r3, [r7, #4]
   2b2c2:	611a      	str	r2, [r3, #16]
   2b2c4:	e042      	b.n	2b34c <dir_sdi+0x104>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   2b2c6:	687b      	ldr	r3, [r7, #4]
   2b2c8:	681b      	ldr	r3, [r3, #0]
   2b2ca:	789b      	ldrb	r3, [r3, #2]
   2b2cc:	b29a      	uxth	r2, r3
   2b2ce:	230a      	movs	r3, #10
   2b2d0:	18fb      	adds	r3, r7, r3
   2b2d2:	0112      	lsls	r2, r2, #4
   2b2d4:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2b2d6:	e020      	b.n	2b31a <dir_sdi+0xd2>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   2b2d8:	687b      	ldr	r3, [r7, #4]
   2b2da:	681b      	ldr	r3, [r3, #0]
   2b2dc:	68fa      	ldr	r2, [r7, #12]
   2b2de:	0011      	movs	r1, r2
   2b2e0:	0018      	movs	r0, r3
   2b2e2:	4b23      	ldr	r3, [pc, #140]	; (2b370 <dir_sdi+0x128>)
   2b2e4:	4798      	blx	r3
   2b2e6:	0003      	movs	r3, r0
   2b2e8:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   2b2ea:	68fb      	ldr	r3, [r7, #12]
   2b2ec:	3301      	adds	r3, #1
   2b2ee:	d101      	bne.n	2b2f4 <dir_sdi+0xac>
   2b2f0:	2301      	movs	r3, #1
   2b2f2:	e038      	b.n	2b366 <dir_sdi+0x11e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   2b2f4:	68fb      	ldr	r3, [r7, #12]
   2b2f6:	2b01      	cmp	r3, #1
   2b2f8:	d905      	bls.n	2b306 <dir_sdi+0xbe>
   2b2fa:	687b      	ldr	r3, [r7, #4]
   2b2fc:	681b      	ldr	r3, [r3, #0]
   2b2fe:	699a      	ldr	r2, [r3, #24]
   2b300:	68fb      	ldr	r3, [r7, #12]
   2b302:	429a      	cmp	r2, r3
   2b304:	d801      	bhi.n	2b30a <dir_sdi+0xc2>
				return FR_INT_ERR;
   2b306:	2302      	movs	r3, #2
   2b308:	e02d      	b.n	2b366 <dir_sdi+0x11e>
			idx -= ic;
   2b30a:	1cbb      	adds	r3, r7, #2
   2b30c:	1cb9      	adds	r1, r7, #2
   2b30e:	220a      	movs	r2, #10
   2b310:	18ba      	adds	r2, r7, r2
   2b312:	8809      	ldrh	r1, [r1, #0]
   2b314:	8812      	ldrh	r2, [r2, #0]
   2b316:	1a8a      	subs	r2, r1, r2
   2b318:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2b31a:	1cba      	adds	r2, r7, #2
   2b31c:	230a      	movs	r3, #10
   2b31e:	18fb      	adds	r3, r7, r3
   2b320:	8812      	ldrh	r2, [r2, #0]
   2b322:	881b      	ldrh	r3, [r3, #0]
   2b324:	429a      	cmp	r2, r3
   2b326:	d2d7      	bcs.n	2b2d8 <dir_sdi+0x90>
		}
		dj->clust = clst;
   2b328:	687b      	ldr	r3, [r7, #4]
   2b32a:	68fa      	ldr	r2, [r7, #12]
   2b32c:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2b32e:	687b      	ldr	r3, [r7, #4]
   2b330:	681b      	ldr	r3, [r3, #0]
   2b332:	68fa      	ldr	r2, [r7, #12]
   2b334:	0011      	movs	r1, r2
   2b336:	0018      	movs	r0, r3
   2b338:	4b0e      	ldr	r3, [pc, #56]	; (2b374 <dir_sdi+0x12c>)
   2b33a:	4798      	blx	r3
   2b33c:	0002      	movs	r2, r0
   2b33e:	1cbb      	adds	r3, r7, #2
   2b340:	881b      	ldrh	r3, [r3, #0]
   2b342:	091b      	lsrs	r3, r3, #4
   2b344:	b29b      	uxth	r3, r3
   2b346:	18d2      	adds	r2, r2, r3
   2b348:	687b      	ldr	r3, [r7, #4]
   2b34a:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   2b34c:	687b      	ldr	r3, [r7, #4]
   2b34e:	681b      	ldr	r3, [r3, #0]
   2b350:	3330      	adds	r3, #48	; 0x30
   2b352:	001a      	movs	r2, r3
   2b354:	1cbb      	adds	r3, r7, #2
   2b356:	881b      	ldrh	r3, [r3, #0]
   2b358:	210f      	movs	r1, #15
   2b35a:	400b      	ands	r3, r1
   2b35c:	015b      	lsls	r3, r3, #5
   2b35e:	18d2      	adds	r2, r2, r3
   2b360:	687b      	ldr	r3, [r7, #4]
   2b362:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
   2b364:	2300      	movs	r3, #0
}
   2b366:	0018      	movs	r0, r3
   2b368:	46bd      	mov	sp, r7
   2b36a:	b004      	add	sp, #16
   2b36c:	bd80      	pop	{r7, pc}
   2b36e:	46c0      	nop			; (mov r8, r8)
   2b370:	0002ac9d 	.word	0x0002ac9d
   2b374:	0002ac65 	.word	0x0002ac65

0002b378 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
   2b378:	b590      	push	{r4, r7, lr}
   2b37a:	b085      	sub	sp, #20
   2b37c:	af00      	add	r7, sp, #0
   2b37e:	6078      	str	r0, [r7, #4]
   2b380:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
   2b382:	687b      	ldr	r3, [r7, #4]
   2b384:	88da      	ldrh	r2, [r3, #6]
   2b386:	2308      	movs	r3, #8
   2b388:	18fb      	adds	r3, r7, r3
   2b38a:	3201      	adds	r2, #1
   2b38c:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   2b38e:	2308      	movs	r3, #8
   2b390:	18fb      	adds	r3, r7, r3
   2b392:	881b      	ldrh	r3, [r3, #0]
   2b394:	2b00      	cmp	r3, #0
   2b396:	d003      	beq.n	2b3a0 <dir_next+0x28>
   2b398:	687b      	ldr	r3, [r7, #4]
   2b39a:	691b      	ldr	r3, [r3, #16]
   2b39c:	2b00      	cmp	r3, #0
   2b39e:	d101      	bne.n	2b3a4 <dir_next+0x2c>
		return FR_NO_FILE;
   2b3a0:	2304      	movs	r3, #4
   2b3a2:	e0d2      	b.n	2b54a <dir_next+0x1d2>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   2b3a4:	2308      	movs	r3, #8
   2b3a6:	18fb      	adds	r3, r7, r3
   2b3a8:	881b      	ldrh	r3, [r3, #0]
   2b3aa:	220f      	movs	r2, #15
   2b3ac:	4013      	ands	r3, r2
   2b3ae:	b29b      	uxth	r3, r3
   2b3b0:	2b00      	cmp	r3, #0
   2b3b2:	d000      	beq.n	2b3b6 <dir_next+0x3e>
   2b3b4:	e0b6      	b.n	2b524 <dir_next+0x1ac>
		dj->sect++;					/* Next sector */
   2b3b6:	687b      	ldr	r3, [r7, #4]
   2b3b8:	691b      	ldr	r3, [r3, #16]
   2b3ba:	1c5a      	adds	r2, r3, #1
   2b3bc:	687b      	ldr	r3, [r7, #4]
   2b3be:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
   2b3c0:	687b      	ldr	r3, [r7, #4]
   2b3c2:	68db      	ldr	r3, [r3, #12]
   2b3c4:	2b00      	cmp	r3, #0
   2b3c6:	d10a      	bne.n	2b3de <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   2b3c8:	687b      	ldr	r3, [r7, #4]
   2b3ca:	681b      	ldr	r3, [r3, #0]
   2b3cc:	891b      	ldrh	r3, [r3, #8]
   2b3ce:	2208      	movs	r2, #8
   2b3d0:	18ba      	adds	r2, r7, r2
   2b3d2:	8812      	ldrh	r2, [r2, #0]
   2b3d4:	429a      	cmp	r2, r3
   2b3d6:	d200      	bcs.n	2b3da <dir_next+0x62>
   2b3d8:	e0a4      	b.n	2b524 <dir_next+0x1ac>
				return FR_NO_FILE;
   2b3da:	2304      	movs	r3, #4
   2b3dc:	e0b5      	b.n	2b54a <dir_next+0x1d2>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   2b3de:	2308      	movs	r3, #8
   2b3e0:	18fb      	adds	r3, r7, r3
   2b3e2:	881b      	ldrh	r3, [r3, #0]
   2b3e4:	091b      	lsrs	r3, r3, #4
   2b3e6:	b29b      	uxth	r3, r3
   2b3e8:	001a      	movs	r2, r3
   2b3ea:	687b      	ldr	r3, [r7, #4]
   2b3ec:	681b      	ldr	r3, [r3, #0]
   2b3ee:	789b      	ldrb	r3, [r3, #2]
   2b3f0:	3b01      	subs	r3, #1
   2b3f2:	4013      	ands	r3, r2
   2b3f4:	d000      	beq.n	2b3f8 <dir_next+0x80>
   2b3f6:	e095      	b.n	2b524 <dir_next+0x1ac>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   2b3f8:	687b      	ldr	r3, [r7, #4]
   2b3fa:	681a      	ldr	r2, [r3, #0]
   2b3fc:	687b      	ldr	r3, [r7, #4]
   2b3fe:	68db      	ldr	r3, [r3, #12]
   2b400:	0019      	movs	r1, r3
   2b402:	0010      	movs	r0, r2
   2b404:	4b53      	ldr	r3, [pc, #332]	; (2b554 <dir_next+0x1dc>)
   2b406:	4798      	blx	r3
   2b408:	0003      	movs	r3, r0
   2b40a:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
   2b40c:	68fb      	ldr	r3, [r7, #12]
   2b40e:	2b01      	cmp	r3, #1
   2b410:	d801      	bhi.n	2b416 <dir_next+0x9e>
   2b412:	2302      	movs	r3, #2
   2b414:	e099      	b.n	2b54a <dir_next+0x1d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2b416:	68fb      	ldr	r3, [r7, #12]
   2b418:	3301      	adds	r3, #1
   2b41a:	d101      	bne.n	2b420 <dir_next+0xa8>
   2b41c:	2301      	movs	r3, #1
   2b41e:	e094      	b.n	2b54a <dir_next+0x1d2>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   2b420:	687b      	ldr	r3, [r7, #4]
   2b422:	681b      	ldr	r3, [r3, #0]
   2b424:	699a      	ldr	r2, [r3, #24]
   2b426:	68fb      	ldr	r3, [r7, #12]
   2b428:	429a      	cmp	r2, r3
   2b42a:	d900      	bls.n	2b42e <dir_next+0xb6>
   2b42c:	e06d      	b.n	2b50a <dir_next+0x192>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   2b42e:	683b      	ldr	r3, [r7, #0]
   2b430:	2b00      	cmp	r3, #0
   2b432:	d101      	bne.n	2b438 <dir_next+0xc0>
   2b434:	2304      	movs	r3, #4
   2b436:	e088      	b.n	2b54a <dir_next+0x1d2>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   2b438:	687b      	ldr	r3, [r7, #4]
   2b43a:	681a      	ldr	r2, [r3, #0]
   2b43c:	687b      	ldr	r3, [r7, #4]
   2b43e:	68db      	ldr	r3, [r3, #12]
   2b440:	0019      	movs	r1, r3
   2b442:	0010      	movs	r0, r2
   2b444:	4b44      	ldr	r3, [pc, #272]	; (2b558 <dir_next+0x1e0>)
   2b446:	4798      	blx	r3
   2b448:	0003      	movs	r3, r0
   2b44a:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   2b44c:	68fb      	ldr	r3, [r7, #12]
   2b44e:	2b00      	cmp	r3, #0
   2b450:	d101      	bne.n	2b456 <dir_next+0xde>
   2b452:	2307      	movs	r3, #7
   2b454:	e079      	b.n	2b54a <dir_next+0x1d2>
					if (clst == 1) return FR_INT_ERR;
   2b456:	68fb      	ldr	r3, [r7, #12]
   2b458:	2b01      	cmp	r3, #1
   2b45a:	d101      	bne.n	2b460 <dir_next+0xe8>
   2b45c:	2302      	movs	r3, #2
   2b45e:	e074      	b.n	2b54a <dir_next+0x1d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2b460:	68fb      	ldr	r3, [r7, #12]
   2b462:	3301      	adds	r3, #1
   2b464:	d101      	bne.n	2b46a <dir_next+0xf2>
   2b466:	2301      	movs	r3, #1
   2b468:	e06f      	b.n	2b54a <dir_next+0x1d2>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   2b46a:	687b      	ldr	r3, [r7, #4]
   2b46c:	681b      	ldr	r3, [r3, #0]
   2b46e:	2100      	movs	r1, #0
   2b470:	0018      	movs	r0, r3
   2b472:	4b3a      	ldr	r3, [pc, #232]	; (2b55c <dir_next+0x1e4>)
   2b474:	4798      	blx	r3
   2b476:	1e03      	subs	r3, r0, #0
   2b478:	d001      	beq.n	2b47e <dir_next+0x106>
   2b47a:	2301      	movs	r3, #1
   2b47c:	e065      	b.n	2b54a <dir_next+0x1d2>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   2b47e:	687b      	ldr	r3, [r7, #4]
   2b480:	681b      	ldr	r3, [r3, #0]
   2b482:	3330      	adds	r3, #48	; 0x30
   2b484:	0018      	movs	r0, r3
   2b486:	2380      	movs	r3, #128	; 0x80
   2b488:	009b      	lsls	r3, r3, #2
   2b48a:	001a      	movs	r2, r3
   2b48c:	2100      	movs	r1, #0
   2b48e:	4b34      	ldr	r3, [pc, #208]	; (2b560 <dir_next+0x1e8>)
   2b490:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   2b492:	687b      	ldr	r3, [r7, #4]
   2b494:	681c      	ldr	r4, [r3, #0]
   2b496:	687b      	ldr	r3, [r7, #4]
   2b498:	681b      	ldr	r3, [r3, #0]
   2b49a:	68fa      	ldr	r2, [r7, #12]
   2b49c:	0011      	movs	r1, r2
   2b49e:	0018      	movs	r0, r3
   2b4a0:	4b30      	ldr	r3, [pc, #192]	; (2b564 <dir_next+0x1ec>)
   2b4a2:	4798      	blx	r3
   2b4a4:	0003      	movs	r3, r0
   2b4a6:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2b4a8:	230b      	movs	r3, #11
   2b4aa:	18fb      	adds	r3, r7, r3
   2b4ac:	2200      	movs	r2, #0
   2b4ae:	701a      	strb	r2, [r3, #0]
   2b4b0:	e019      	b.n	2b4e6 <dir_next+0x16e>
						dj->fs->wflag = 1;
   2b4b2:	687b      	ldr	r3, [r7, #4]
   2b4b4:	681b      	ldr	r3, [r3, #0]
   2b4b6:	2201      	movs	r2, #1
   2b4b8:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   2b4ba:	687b      	ldr	r3, [r7, #4]
   2b4bc:	681b      	ldr	r3, [r3, #0]
   2b4be:	2100      	movs	r1, #0
   2b4c0:	0018      	movs	r0, r3
   2b4c2:	4b26      	ldr	r3, [pc, #152]	; (2b55c <dir_next+0x1e4>)
   2b4c4:	4798      	blx	r3
   2b4c6:	1e03      	subs	r3, r0, #0
   2b4c8:	d001      	beq.n	2b4ce <dir_next+0x156>
   2b4ca:	2301      	movs	r3, #1
   2b4cc:	e03d      	b.n	2b54a <dir_next+0x1d2>
						dj->fs->winsect++;
   2b4ce:	687b      	ldr	r3, [r7, #4]
   2b4d0:	681b      	ldr	r3, [r3, #0]
   2b4d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2b4d4:	3201      	adds	r2, #1
   2b4d6:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2b4d8:	230b      	movs	r3, #11
   2b4da:	18fb      	adds	r3, r7, r3
   2b4dc:	781a      	ldrb	r2, [r3, #0]
   2b4de:	230b      	movs	r3, #11
   2b4e0:	18fb      	adds	r3, r7, r3
   2b4e2:	3201      	adds	r2, #1
   2b4e4:	701a      	strb	r2, [r3, #0]
   2b4e6:	687b      	ldr	r3, [r7, #4]
   2b4e8:	681b      	ldr	r3, [r3, #0]
   2b4ea:	789b      	ldrb	r3, [r3, #2]
   2b4ec:	220b      	movs	r2, #11
   2b4ee:	18ba      	adds	r2, r7, r2
   2b4f0:	7812      	ldrb	r2, [r2, #0]
   2b4f2:	429a      	cmp	r2, r3
   2b4f4:	d3dd      	bcc.n	2b4b2 <dir_next+0x13a>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
   2b4f6:	687b      	ldr	r3, [r7, #4]
   2b4f8:	681b      	ldr	r3, [r3, #0]
   2b4fa:	687a      	ldr	r2, [r7, #4]
   2b4fc:	6812      	ldr	r2, [r2, #0]
   2b4fe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   2b500:	220b      	movs	r2, #11
   2b502:	18ba      	adds	r2, r7, r2
   2b504:	7812      	ldrb	r2, [r2, #0]
   2b506:	1a8a      	subs	r2, r1, r2
   2b508:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
   2b50a:	687b      	ldr	r3, [r7, #4]
   2b50c:	68fa      	ldr	r2, [r7, #12]
   2b50e:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
   2b510:	687b      	ldr	r3, [r7, #4]
   2b512:	681b      	ldr	r3, [r3, #0]
   2b514:	68fa      	ldr	r2, [r7, #12]
   2b516:	0011      	movs	r1, r2
   2b518:	0018      	movs	r0, r3
   2b51a:	4b12      	ldr	r3, [pc, #72]	; (2b564 <dir_next+0x1ec>)
   2b51c:	4798      	blx	r3
   2b51e:	0002      	movs	r2, r0
   2b520:	687b      	ldr	r3, [r7, #4]
   2b522:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
   2b524:	687b      	ldr	r3, [r7, #4]
   2b526:	2208      	movs	r2, #8
   2b528:	18ba      	adds	r2, r7, r2
   2b52a:	8812      	ldrh	r2, [r2, #0]
   2b52c:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   2b52e:	687b      	ldr	r3, [r7, #4]
   2b530:	681b      	ldr	r3, [r3, #0]
   2b532:	3330      	adds	r3, #48	; 0x30
   2b534:	001a      	movs	r2, r3
   2b536:	2308      	movs	r3, #8
   2b538:	18fb      	adds	r3, r7, r3
   2b53a:	881b      	ldrh	r3, [r3, #0]
   2b53c:	210f      	movs	r1, #15
   2b53e:	400b      	ands	r3, r1
   2b540:	015b      	lsls	r3, r3, #5
   2b542:	18d2      	adds	r2, r2, r3
   2b544:	687b      	ldr	r3, [r7, #4]
   2b546:	615a      	str	r2, [r3, #20]

	return FR_OK;
   2b548:	2300      	movs	r3, #0
}
   2b54a:	0018      	movs	r0, r3
   2b54c:	46bd      	mov	sp, r7
   2b54e:	b005      	add	sp, #20
   2b550:	bd90      	pop	{r4, r7, pc}
   2b552:	46c0      	nop			; (mov r8, r8)
   2b554:	0002ac9d 	.word	0x0002ac9d
   2b558:	0002b10d 	.word	0x0002b10d
   2b55c:	0002aa05 	.word	0x0002aa05
   2b560:	0002a959 	.word	0x0002a959
   2b564:	0002ac65 	.word	0x0002ac65

0002b568 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
   2b568:	b590      	push	{r4, r7, lr}
   2b56a:	b087      	sub	sp, #28
   2b56c:	af00      	add	r7, sp, #0
   2b56e:	6078      	str	r0, [r7, #4]
   2b570:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   2b572:	683b      	ldr	r3, [r7, #0]
   2b574:	781b      	ldrb	r3, [r3, #0]
   2b576:	001a      	movs	r2, r3
   2b578:	2340      	movs	r3, #64	; 0x40
   2b57a:	439a      	bics	r2, r3
   2b57c:	0013      	movs	r3, r2
   2b57e:	1e5a      	subs	r2, r3, #1
   2b580:	0013      	movs	r3, r2
   2b582:	005b      	lsls	r3, r3, #1
   2b584:	189b      	adds	r3, r3, r2
   2b586:	009b      	lsls	r3, r3, #2
   2b588:	189b      	adds	r3, r3, r2
   2b58a:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
   2b58c:	2300      	movs	r3, #0
   2b58e:	613b      	str	r3, [r7, #16]
   2b590:	230e      	movs	r3, #14
   2b592:	18fb      	adds	r3, r7, r3
   2b594:	2201      	movs	r2, #1
   2b596:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   2b598:	4a31      	ldr	r2, [pc, #196]	; (2b660 <cmp_lfn+0xf8>)
   2b59a:	693b      	ldr	r3, [r7, #16]
   2b59c:	18d3      	adds	r3, r2, r3
   2b59e:	781b      	ldrb	r3, [r3, #0]
   2b5a0:	3301      	adds	r3, #1
   2b5a2:	683a      	ldr	r2, [r7, #0]
   2b5a4:	18d3      	adds	r3, r2, r3
   2b5a6:	781b      	ldrb	r3, [r3, #0]
   2b5a8:	021b      	lsls	r3, r3, #8
   2b5aa:	b21a      	sxth	r2, r3
   2b5ac:	492c      	ldr	r1, [pc, #176]	; (2b660 <cmp_lfn+0xf8>)
   2b5ae:	693b      	ldr	r3, [r7, #16]
   2b5b0:	18cb      	adds	r3, r1, r3
   2b5b2:	781b      	ldrb	r3, [r3, #0]
   2b5b4:	0019      	movs	r1, r3
   2b5b6:	683b      	ldr	r3, [r7, #0]
   2b5b8:	185b      	adds	r3, r3, r1
   2b5ba:	781b      	ldrb	r3, [r3, #0]
   2b5bc:	b21b      	sxth	r3, r3
   2b5be:	4313      	orrs	r3, r2
   2b5c0:	b21a      	sxth	r2, r3
   2b5c2:	230c      	movs	r3, #12
   2b5c4:	18fb      	adds	r3, r7, r3
   2b5c6:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
   2b5c8:	230e      	movs	r3, #14
   2b5ca:	18fb      	adds	r3, r7, r3
   2b5cc:	881b      	ldrh	r3, [r3, #0]
   2b5ce:	2b00      	cmp	r3, #0
   2b5d0:	d01f      	beq.n	2b612 <cmp_lfn+0xaa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   2b5d2:	230e      	movs	r3, #14
   2b5d4:	18fc      	adds	r4, r7, r3
   2b5d6:	230c      	movs	r3, #12
   2b5d8:	18fb      	adds	r3, r7, r3
   2b5da:	881b      	ldrh	r3, [r3, #0]
   2b5dc:	0018      	movs	r0, r3
   2b5de:	4b21      	ldr	r3, [pc, #132]	; (2b664 <cmp_lfn+0xfc>)
   2b5e0:	4798      	blx	r3
   2b5e2:	0003      	movs	r3, r0
   2b5e4:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   2b5e6:	697b      	ldr	r3, [r7, #20]
   2b5e8:	2bfe      	cmp	r3, #254	; 0xfe
   2b5ea:	d810      	bhi.n	2b60e <cmp_lfn+0xa6>
   2b5ec:	697b      	ldr	r3, [r7, #20]
   2b5ee:	1c5a      	adds	r2, r3, #1
   2b5f0:	617a      	str	r2, [r7, #20]
   2b5f2:	005b      	lsls	r3, r3, #1
   2b5f4:	687a      	ldr	r2, [r7, #4]
   2b5f6:	18d3      	adds	r3, r2, r3
   2b5f8:	881b      	ldrh	r3, [r3, #0]
   2b5fa:	0018      	movs	r0, r3
   2b5fc:	4b19      	ldr	r3, [pc, #100]	; (2b664 <cmp_lfn+0xfc>)
   2b5fe:	4798      	blx	r3
   2b600:	0003      	movs	r3, r0
   2b602:	001a      	movs	r2, r3
   2b604:	230e      	movs	r3, #14
   2b606:	18fb      	adds	r3, r7, r3
   2b608:	881b      	ldrh	r3, [r3, #0]
   2b60a:	4293      	cmp	r3, r2
   2b60c:	d009      	beq.n	2b622 <cmp_lfn+0xba>
				return 0;				/* Not matched */
   2b60e:	2300      	movs	r3, #0
   2b610:	e022      	b.n	2b658 <cmp_lfn+0xf0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
   2b612:	230c      	movs	r3, #12
   2b614:	18fb      	adds	r3, r7, r3
   2b616:	881b      	ldrh	r3, [r3, #0]
   2b618:	4a13      	ldr	r2, [pc, #76]	; (2b668 <cmp_lfn+0x100>)
   2b61a:	4293      	cmp	r3, r2
   2b61c:	d001      	beq.n	2b622 <cmp_lfn+0xba>
   2b61e:	2300      	movs	r3, #0
   2b620:	e01a      	b.n	2b658 <cmp_lfn+0xf0>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   2b622:	693b      	ldr	r3, [r7, #16]
   2b624:	3301      	adds	r3, #1
   2b626:	613b      	str	r3, [r7, #16]
   2b628:	693b      	ldr	r3, [r7, #16]
   2b62a:	2b0c      	cmp	r3, #12
   2b62c:	d9b4      	bls.n	2b598 <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   2b62e:	683b      	ldr	r3, [r7, #0]
   2b630:	781b      	ldrb	r3, [r3, #0]
   2b632:	001a      	movs	r2, r3
   2b634:	2340      	movs	r3, #64	; 0x40
   2b636:	4013      	ands	r3, r2
   2b638:	d00d      	beq.n	2b656 <cmp_lfn+0xee>
   2b63a:	230e      	movs	r3, #14
   2b63c:	18fb      	adds	r3, r7, r3
   2b63e:	881b      	ldrh	r3, [r3, #0]
   2b640:	2b00      	cmp	r3, #0
   2b642:	d008      	beq.n	2b656 <cmp_lfn+0xee>
   2b644:	697b      	ldr	r3, [r7, #20]
   2b646:	005b      	lsls	r3, r3, #1
   2b648:	687a      	ldr	r2, [r7, #4]
   2b64a:	18d3      	adds	r3, r2, r3
   2b64c:	881b      	ldrh	r3, [r3, #0]
   2b64e:	2b00      	cmp	r3, #0
   2b650:	d001      	beq.n	2b656 <cmp_lfn+0xee>
		return 0;
   2b652:	2300      	movs	r3, #0
   2b654:	e000      	b.n	2b658 <cmp_lfn+0xf0>

	return 1;						/* The part of LFN matched */
   2b656:	2301      	movs	r3, #1
}
   2b658:	0018      	movs	r0, r3
   2b65a:	46bd      	mov	sp, r7
   2b65c:	b007      	add	sp, #28
   2b65e:	bd90      	pop	{r4, r7, pc}
   2b660:	00039058 	.word	0x00039058
   2b664:	0002d615 	.word	0x0002d615
   2b668:	0000ffff 	.word	0x0000ffff

0002b66c <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
   2b66c:	b580      	push	{r7, lr}
   2b66e:	b088      	sub	sp, #32
   2b670:	af00      	add	r7, sp, #0
   2b672:	60f8      	str	r0, [r7, #12]
   2b674:	60b9      	str	r1, [r7, #8]
   2b676:	0019      	movs	r1, r3
   2b678:	1dfb      	adds	r3, r7, #7
   2b67a:	701a      	strb	r2, [r3, #0]
   2b67c:	1dbb      	adds	r3, r7, #6
   2b67e:	1c0a      	adds	r2, r1, #0
   2b680:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
   2b682:	68bb      	ldr	r3, [r7, #8]
   2b684:	330d      	adds	r3, #13
   2b686:	1dba      	adds	r2, r7, #6
   2b688:	7812      	ldrb	r2, [r2, #0]
   2b68a:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   2b68c:	68bb      	ldr	r3, [r7, #8]
   2b68e:	330b      	adds	r3, #11
   2b690:	220f      	movs	r2, #15
   2b692:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
   2b694:	68bb      	ldr	r3, [r7, #8]
   2b696:	330c      	adds	r3, #12
   2b698:	2200      	movs	r2, #0
   2b69a:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   2b69c:	68bb      	ldr	r3, [r7, #8]
   2b69e:	331a      	adds	r3, #26
   2b6a0:	2200      	movs	r2, #0
   2b6a2:	701a      	strb	r2, [r3, #0]
   2b6a4:	68bb      	ldr	r3, [r7, #8]
   2b6a6:	331b      	adds	r3, #27
   2b6a8:	2200      	movs	r2, #0
   2b6aa:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   2b6ac:	1dfb      	adds	r3, r7, #7
   2b6ae:	781b      	ldrb	r3, [r3, #0]
   2b6b0:	1e5a      	subs	r2, r3, #1
   2b6b2:	0013      	movs	r3, r2
   2b6b4:	005b      	lsls	r3, r3, #1
   2b6b6:	189b      	adds	r3, r3, r2
   2b6b8:	009b      	lsls	r3, r3, #2
   2b6ba:	189b      	adds	r3, r3, r2
   2b6bc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
   2b6be:	2316      	movs	r3, #22
   2b6c0:	18fb      	adds	r3, r7, r3
   2b6c2:	2200      	movs	r2, #0
   2b6c4:	801a      	strh	r2, [r3, #0]
   2b6c6:	2300      	movs	r3, #0
   2b6c8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   2b6ca:	2316      	movs	r3, #22
   2b6cc:	18fb      	adds	r3, r7, r3
   2b6ce:	881b      	ldrh	r3, [r3, #0]
   2b6d0:	4a28      	ldr	r2, [pc, #160]	; (2b774 <fit_lfn+0x108>)
   2b6d2:	4293      	cmp	r3, r2
   2b6d4:	d009      	beq.n	2b6ea <fit_lfn+0x7e>
   2b6d6:	69fb      	ldr	r3, [r7, #28]
   2b6d8:	1c5a      	adds	r2, r3, #1
   2b6da:	61fa      	str	r2, [r7, #28]
   2b6dc:	005b      	lsls	r3, r3, #1
   2b6de:	68fa      	ldr	r2, [r7, #12]
   2b6e0:	18d2      	adds	r2, r2, r3
   2b6e2:	2316      	movs	r3, #22
   2b6e4:	18fb      	adds	r3, r7, r3
   2b6e6:	8812      	ldrh	r2, [r2, #0]
   2b6e8:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   2b6ea:	4a23      	ldr	r2, [pc, #140]	; (2b778 <fit_lfn+0x10c>)
   2b6ec:	69bb      	ldr	r3, [r7, #24]
   2b6ee:	18d3      	adds	r3, r2, r3
   2b6f0:	781b      	ldrb	r3, [r3, #0]
   2b6f2:	001a      	movs	r2, r3
   2b6f4:	68bb      	ldr	r3, [r7, #8]
   2b6f6:	189b      	adds	r3, r3, r2
   2b6f8:	2216      	movs	r2, #22
   2b6fa:	18ba      	adds	r2, r7, r2
   2b6fc:	8812      	ldrh	r2, [r2, #0]
   2b6fe:	b2d2      	uxtb	r2, r2
   2b700:	701a      	strb	r2, [r3, #0]
   2b702:	4a1d      	ldr	r2, [pc, #116]	; (2b778 <fit_lfn+0x10c>)
   2b704:	69bb      	ldr	r3, [r7, #24]
   2b706:	18d3      	adds	r3, r2, r3
   2b708:	781b      	ldrb	r3, [r3, #0]
   2b70a:	3301      	adds	r3, #1
   2b70c:	68ba      	ldr	r2, [r7, #8]
   2b70e:	18d3      	adds	r3, r2, r3
   2b710:	2216      	movs	r2, #22
   2b712:	18ba      	adds	r2, r7, r2
   2b714:	8812      	ldrh	r2, [r2, #0]
   2b716:	0a12      	lsrs	r2, r2, #8
   2b718:	b292      	uxth	r2, r2
   2b71a:	b2d2      	uxtb	r2, r2
   2b71c:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   2b71e:	2316      	movs	r3, #22
   2b720:	18fb      	adds	r3, r7, r3
   2b722:	881b      	ldrh	r3, [r3, #0]
   2b724:	2b00      	cmp	r3, #0
   2b726:	d104      	bne.n	2b732 <fit_lfn+0xc6>
   2b728:	2316      	movs	r3, #22
   2b72a:	18fb      	adds	r3, r7, r3
   2b72c:	2201      	movs	r2, #1
   2b72e:	4252      	negs	r2, r2
   2b730:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
   2b732:	69bb      	ldr	r3, [r7, #24]
   2b734:	3301      	adds	r3, #1
   2b736:	61bb      	str	r3, [r7, #24]
   2b738:	69bb      	ldr	r3, [r7, #24]
   2b73a:	2b0c      	cmp	r3, #12
   2b73c:	d9c5      	bls.n	2b6ca <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   2b73e:	2316      	movs	r3, #22
   2b740:	18fb      	adds	r3, r7, r3
   2b742:	881b      	ldrh	r3, [r3, #0]
   2b744:	4a0b      	ldr	r2, [pc, #44]	; (2b774 <fit_lfn+0x108>)
   2b746:	4293      	cmp	r3, r2
   2b748:	d006      	beq.n	2b758 <fit_lfn+0xec>
   2b74a:	69fb      	ldr	r3, [r7, #28]
   2b74c:	005b      	lsls	r3, r3, #1
   2b74e:	68fa      	ldr	r2, [r7, #12]
   2b750:	18d3      	adds	r3, r2, r3
   2b752:	881b      	ldrh	r3, [r3, #0]
   2b754:	2b00      	cmp	r3, #0
   2b756:	d105      	bne.n	2b764 <fit_lfn+0xf8>
   2b758:	1dfb      	adds	r3, r7, #7
   2b75a:	1dfa      	adds	r2, r7, #7
   2b75c:	7812      	ldrb	r2, [r2, #0]
   2b75e:	2140      	movs	r1, #64	; 0x40
   2b760:	430a      	orrs	r2, r1
   2b762:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   2b764:	68bb      	ldr	r3, [r7, #8]
   2b766:	1dfa      	adds	r2, r7, #7
   2b768:	7812      	ldrb	r2, [r2, #0]
   2b76a:	701a      	strb	r2, [r3, #0]
}
   2b76c:	46c0      	nop			; (mov r8, r8)
   2b76e:	46bd      	mov	sp, r7
   2b770:	b008      	add	sp, #32
   2b772:	bd80      	pop	{r7, pc}
   2b774:	0000ffff 	.word	0x0000ffff
   2b778:	00039058 	.word	0x00039058

0002b77c <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
   2b77c:	b580      	push	{r7, lr}
   2b77e:	b08a      	sub	sp, #40	; 0x28
   2b780:	af00      	add	r7, sp, #0
   2b782:	60f8      	str	r0, [r7, #12]
   2b784:	60b9      	str	r1, [r7, #8]
   2b786:	607a      	str	r2, [r7, #4]
   2b788:	001a      	movs	r2, r3
   2b78a:	1cbb      	adds	r3, r7, #2
   2b78c:	801a      	strh	r2, [r3, #0]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
   2b78e:	68b9      	ldr	r1, [r7, #8]
   2b790:	68fb      	ldr	r3, [r7, #12]
   2b792:	220b      	movs	r2, #11
   2b794:	0018      	movs	r0, r3
   2b796:	4b38      	ldr	r3, [pc, #224]	; (2b878 <gen_numname+0xfc>)
   2b798:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   2b79a:	1cbb      	adds	r3, r7, #2
   2b79c:	881b      	ldrh	r3, [r3, #0]
   2b79e:	2b05      	cmp	r3, #5
   2b7a0:	d911      	bls.n	2b7c6 <gen_numname+0x4a>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   2b7a2:	1cbb      	adds	r3, r7, #2
   2b7a4:	881b      	ldrh	r3, [r3, #0]
   2b7a6:	b29a      	uxth	r2, r3
   2b7a8:	0852      	lsrs	r2, r2, #1
   2b7aa:	03db      	lsls	r3, r3, #15
   2b7ac:	4313      	orrs	r3, r2
   2b7ae:	b299      	uxth	r1, r3
   2b7b0:	687b      	ldr	r3, [r7, #4]
   2b7b2:	1c9a      	adds	r2, r3, #2
   2b7b4:	607a      	str	r2, [r7, #4]
   2b7b6:	881a      	ldrh	r2, [r3, #0]
   2b7b8:	1cbb      	adds	r3, r7, #2
   2b7ba:	188a      	adds	r2, r1, r2
   2b7bc:	801a      	strh	r2, [r3, #0]
   2b7be:	687b      	ldr	r3, [r7, #4]
   2b7c0:	881b      	ldrh	r3, [r3, #0]
   2b7c2:	2b00      	cmp	r3, #0
   2b7c4:	d1ed      	bne.n	2b7a2 <gen_numname+0x26>
	}

	/* itoa (hexdecimal) */
	i = 7;
   2b7c6:	2307      	movs	r3, #7
   2b7c8:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
   2b7ca:	1cbb      	adds	r3, r7, #2
   2b7cc:	881b      	ldrh	r3, [r3, #0]
   2b7ce:	b2db      	uxtb	r3, r3
   2b7d0:	220f      	movs	r2, #15
   2b7d2:	4013      	ands	r3, r2
   2b7d4:	b2da      	uxtb	r2, r3
   2b7d6:	2327      	movs	r3, #39	; 0x27
   2b7d8:	18fb      	adds	r3, r7, r3
   2b7da:	3230      	adds	r2, #48	; 0x30
   2b7dc:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
   2b7de:	2327      	movs	r3, #39	; 0x27
   2b7e0:	18fb      	adds	r3, r7, r3
   2b7e2:	781b      	ldrb	r3, [r3, #0]
   2b7e4:	2b39      	cmp	r3, #57	; 0x39
   2b7e6:	d906      	bls.n	2b7f6 <gen_numname+0x7a>
   2b7e8:	2327      	movs	r3, #39	; 0x27
   2b7ea:	18fb      	adds	r3, r7, r3
   2b7ec:	2227      	movs	r2, #39	; 0x27
   2b7ee:	18ba      	adds	r2, r7, r2
   2b7f0:	7812      	ldrb	r2, [r2, #0]
   2b7f2:	3207      	adds	r2, #7
   2b7f4:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
   2b7f6:	6a3b      	ldr	r3, [r7, #32]
   2b7f8:	1e5a      	subs	r2, r3, #1
   2b7fa:	623a      	str	r2, [r7, #32]
   2b7fc:	2214      	movs	r2, #20
   2b7fe:	18ba      	adds	r2, r7, r2
   2b800:	2127      	movs	r1, #39	; 0x27
   2b802:	1879      	adds	r1, r7, r1
   2b804:	7809      	ldrb	r1, [r1, #0]
   2b806:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
   2b808:	1cbb      	adds	r3, r7, #2
   2b80a:	1cba      	adds	r2, r7, #2
   2b80c:	8812      	ldrh	r2, [r2, #0]
   2b80e:	0912      	lsrs	r2, r2, #4
   2b810:	801a      	strh	r2, [r3, #0]
	} while (seq);
   2b812:	1cbb      	adds	r3, r7, #2
   2b814:	881b      	ldrh	r3, [r3, #0]
   2b816:	2b00      	cmp	r3, #0
   2b818:	d1d7      	bne.n	2b7ca <gen_numname+0x4e>
	ns[i] = '~';
   2b81a:	2314      	movs	r3, #20
   2b81c:	18fa      	adds	r2, r7, r3
   2b81e:	6a3b      	ldr	r3, [r7, #32]
   2b820:	18d3      	adds	r3, r2, r3
   2b822:	227e      	movs	r2, #126	; 0x7e
   2b824:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
   2b826:	2300      	movs	r3, #0
   2b828:	61fb      	str	r3, [r7, #28]
   2b82a:	e002      	b.n	2b832 <gen_numname+0xb6>
   2b82c:	69fb      	ldr	r3, [r7, #28]
   2b82e:	3301      	adds	r3, #1
   2b830:	61fb      	str	r3, [r7, #28]
   2b832:	69fa      	ldr	r2, [r7, #28]
   2b834:	6a3b      	ldr	r3, [r7, #32]
   2b836:	429a      	cmp	r2, r3
   2b838:	d205      	bcs.n	2b846 <gen_numname+0xca>
   2b83a:	68fa      	ldr	r2, [r7, #12]
   2b83c:	69fb      	ldr	r3, [r7, #28]
   2b83e:	18d3      	adds	r3, r2, r3
   2b840:	781b      	ldrb	r3, [r3, #0]
   2b842:	2b20      	cmp	r3, #32
   2b844:	d1f2      	bne.n	2b82c <gen_numname+0xb0>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   2b846:	69fb      	ldr	r3, [r7, #28]
   2b848:	1c5a      	adds	r2, r3, #1
   2b84a:	61fa      	str	r2, [r7, #28]
   2b84c:	68fa      	ldr	r2, [r7, #12]
   2b84e:	18d2      	adds	r2, r2, r3
   2b850:	6a3b      	ldr	r3, [r7, #32]
   2b852:	2b07      	cmp	r3, #7
   2b854:	d806      	bhi.n	2b864 <gen_numname+0xe8>
   2b856:	6a3b      	ldr	r3, [r7, #32]
   2b858:	1c59      	adds	r1, r3, #1
   2b85a:	6239      	str	r1, [r7, #32]
   2b85c:	2114      	movs	r1, #20
   2b85e:	1879      	adds	r1, r7, r1
   2b860:	5ccb      	ldrb	r3, [r1, r3]
   2b862:	e000      	b.n	2b866 <gen_numname+0xea>
   2b864:	2320      	movs	r3, #32
   2b866:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
   2b868:	69fb      	ldr	r3, [r7, #28]
   2b86a:	2b07      	cmp	r3, #7
   2b86c:	d9eb      	bls.n	2b846 <gen_numname+0xca>
}
   2b86e:	46c0      	nop			; (mov r8, r8)
   2b870:	46bd      	mov	sp, r7
   2b872:	b00a      	add	sp, #40	; 0x28
   2b874:	bd80      	pop	{r7, pc}
   2b876:	46c0      	nop			; (mov r8, r8)
   2b878:	0002a921 	.word	0x0002a921

0002b87c <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
   2b87c:	b580      	push	{r7, lr}
   2b87e:	b084      	sub	sp, #16
   2b880:	af00      	add	r7, sp, #0
   2b882:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
   2b884:	230f      	movs	r3, #15
   2b886:	18fb      	adds	r3, r7, r3
   2b888:	2200      	movs	r2, #0
   2b88a:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
   2b88c:	230b      	movs	r3, #11
   2b88e:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   2b890:	230f      	movs	r3, #15
   2b892:	18fb      	adds	r3, r7, r3
   2b894:	781b      	ldrb	r3, [r3, #0]
   2b896:	b2da      	uxtb	r2, r3
   2b898:	0852      	lsrs	r2, r2, #1
   2b89a:	01db      	lsls	r3, r3, #7
   2b89c:	4313      	orrs	r3, r2
   2b89e:	b2d9      	uxtb	r1, r3
   2b8a0:	687b      	ldr	r3, [r7, #4]
   2b8a2:	1c5a      	adds	r2, r3, #1
   2b8a4:	607a      	str	r2, [r7, #4]
   2b8a6:	781a      	ldrb	r2, [r3, #0]
   2b8a8:	230f      	movs	r3, #15
   2b8aa:	18fb      	adds	r3, r7, r3
   2b8ac:	188a      	adds	r2, r1, r2
   2b8ae:	701a      	strb	r2, [r3, #0]
   2b8b0:	68bb      	ldr	r3, [r7, #8]
   2b8b2:	3b01      	subs	r3, #1
   2b8b4:	60bb      	str	r3, [r7, #8]
   2b8b6:	68bb      	ldr	r3, [r7, #8]
   2b8b8:	2b00      	cmp	r3, #0
   2b8ba:	d1e9      	bne.n	2b890 <sum_sfn+0x14>
	return sum;
   2b8bc:	230f      	movs	r3, #15
   2b8be:	18fb      	adds	r3, r7, r3
   2b8c0:	781b      	ldrb	r3, [r3, #0]
}
   2b8c2:	0018      	movs	r0, r3
   2b8c4:	46bd      	mov	sp, r7
   2b8c6:	b004      	add	sp, #16
   2b8c8:	bd80      	pop	{r7, pc}
	...

0002b8cc <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
   2b8cc:	b590      	push	{r4, r7, lr}
   2b8ce:	b087      	sub	sp, #28
   2b8d0:	af00      	add	r7, sp, #0
   2b8d2:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
   2b8d4:	2317      	movs	r3, #23
   2b8d6:	18fc      	adds	r4, r7, r3
   2b8d8:	687b      	ldr	r3, [r7, #4]
   2b8da:	2100      	movs	r1, #0
   2b8dc:	0018      	movs	r0, r3
   2b8de:	4b74      	ldr	r3, [pc, #464]	; (2bab0 <dir_find+0x1e4>)
   2b8e0:	4798      	blx	r3
   2b8e2:	0003      	movs	r3, r0
   2b8e4:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2b8e6:	2317      	movs	r3, #23
   2b8e8:	18fb      	adds	r3, r7, r3
   2b8ea:	781b      	ldrb	r3, [r3, #0]
   2b8ec:	2b00      	cmp	r3, #0
   2b8ee:	d003      	beq.n	2b8f8 <dir_find+0x2c>
   2b8f0:	2317      	movs	r3, #23
   2b8f2:	18fb      	adds	r3, r7, r3
   2b8f4:	781b      	ldrb	r3, [r3, #0]
   2b8f6:	e0d6      	b.n	2baa6 <dir_find+0x1da>

#if _USE_LFN
	ord = sum = 0xFF;
   2b8f8:	2314      	movs	r3, #20
   2b8fa:	18fb      	adds	r3, r7, r3
   2b8fc:	22ff      	movs	r2, #255	; 0xff
   2b8fe:	701a      	strb	r2, [r3, #0]
   2b900:	2315      	movs	r3, #21
   2b902:	18fb      	adds	r3, r7, r3
   2b904:	2214      	movs	r2, #20
   2b906:	18ba      	adds	r2, r7, r2
   2b908:	7812      	ldrb	r2, [r2, #0]
   2b90a:	701a      	strb	r2, [r3, #0]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
   2b90c:	687b      	ldr	r3, [r7, #4]
   2b90e:	681a      	ldr	r2, [r3, #0]
   2b910:	687b      	ldr	r3, [r7, #4]
   2b912:	691b      	ldr	r3, [r3, #16]
   2b914:	2117      	movs	r1, #23
   2b916:	187c      	adds	r4, r7, r1
   2b918:	0019      	movs	r1, r3
   2b91a:	0010      	movs	r0, r2
   2b91c:	4b65      	ldr	r3, [pc, #404]	; (2bab4 <dir_find+0x1e8>)
   2b91e:	4798      	blx	r3
   2b920:	0003      	movs	r3, r0
   2b922:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2b924:	2317      	movs	r3, #23
   2b926:	18fb      	adds	r3, r7, r3
   2b928:	781b      	ldrb	r3, [r3, #0]
   2b92a:	2b00      	cmp	r3, #0
   2b92c:	d000      	beq.n	2b930 <dir_find+0x64>
   2b92e:	e0b2      	b.n	2ba96 <dir_find+0x1ca>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   2b930:	687b      	ldr	r3, [r7, #4]
   2b932:	695b      	ldr	r3, [r3, #20]
   2b934:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
   2b936:	2316      	movs	r3, #22
   2b938:	18fb      	adds	r3, r7, r3
   2b93a:	693a      	ldr	r2, [r7, #16]
   2b93c:	7812      	ldrb	r2, [r2, #0]
   2b93e:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   2b940:	2316      	movs	r3, #22
   2b942:	18fb      	adds	r3, r7, r3
   2b944:	781b      	ldrb	r3, [r3, #0]
   2b946:	2b00      	cmp	r3, #0
   2b948:	d104      	bne.n	2b954 <dir_find+0x88>
   2b94a:	2317      	movs	r3, #23
   2b94c:	18fb      	adds	r3, r7, r3
   2b94e:	2204      	movs	r2, #4
   2b950:	701a      	strb	r2, [r3, #0]
   2b952:	e0a5      	b.n	2baa0 <dir_find+0x1d4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
   2b954:	693b      	ldr	r3, [r7, #16]
   2b956:	330b      	adds	r3, #11
   2b958:	781a      	ldrb	r2, [r3, #0]
   2b95a:	230f      	movs	r3, #15
   2b95c:	18fb      	adds	r3, r7, r3
   2b95e:	213f      	movs	r1, #63	; 0x3f
   2b960:	400a      	ands	r2, r1
   2b962:	701a      	strb	r2, [r3, #0]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   2b964:	2316      	movs	r3, #22
   2b966:	18fb      	adds	r3, r7, r3
   2b968:	781b      	ldrb	r3, [r3, #0]
   2b96a:	2be5      	cmp	r3, #229	; 0xe5
   2b96c:	d00a      	beq.n	2b984 <dir_find+0xb8>
   2b96e:	230f      	movs	r3, #15
   2b970:	18fb      	adds	r3, r7, r3
   2b972:	781b      	ldrb	r3, [r3, #0]
   2b974:	2208      	movs	r2, #8
   2b976:	4013      	ands	r3, r2
   2b978:	d009      	beq.n	2b98e <dir_find+0xc2>
   2b97a:	230f      	movs	r3, #15
   2b97c:	18fb      	adds	r3, r7, r3
   2b97e:	781b      	ldrb	r3, [r3, #0]
   2b980:	2b0f      	cmp	r3, #15
   2b982:	d004      	beq.n	2b98e <dir_find+0xc2>
			ord = 0xFF;
   2b984:	2315      	movs	r3, #21
   2b986:	18fb      	adds	r3, r7, r3
   2b988:	22ff      	movs	r2, #255	; 0xff
   2b98a:	701a      	strb	r2, [r3, #0]
   2b98c:	e073      	b.n	2ba76 <dir_find+0x1aa>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
   2b98e:	230f      	movs	r3, #15
   2b990:	18fb      	adds	r3, r7, r3
   2b992:	781b      	ldrb	r3, [r3, #0]
   2b994:	2b0f      	cmp	r3, #15
   2b996:	d145      	bne.n	2ba24 <dir_find+0x158>
				if (dj->lfn) {
   2b998:	687b      	ldr	r3, [r7, #4]
   2b99a:	69db      	ldr	r3, [r3, #28]
   2b99c:	2b00      	cmp	r3, #0
   2b99e:	d100      	bne.n	2b9a2 <dir_find+0xd6>
   2b9a0:	e069      	b.n	2ba76 <dir_find+0x1aa>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   2b9a2:	2316      	movs	r3, #22
   2b9a4:	18fb      	adds	r3, r7, r3
   2b9a6:	781b      	ldrb	r3, [r3, #0]
   2b9a8:	2240      	movs	r2, #64	; 0x40
   2b9aa:	4013      	ands	r3, r2
   2b9ac:	d016      	beq.n	2b9dc <dir_find+0x110>
						sum = dir[LDIR_Chksum];
   2b9ae:	2314      	movs	r3, #20
   2b9b0:	18fb      	adds	r3, r7, r3
   2b9b2:	693a      	ldr	r2, [r7, #16]
   2b9b4:	7b52      	ldrb	r2, [r2, #13]
   2b9b6:	701a      	strb	r2, [r3, #0]
						c &= ~LLE; ord = c;	/* LFN start order */
   2b9b8:	2316      	movs	r3, #22
   2b9ba:	18fb      	adds	r3, r7, r3
   2b9bc:	2216      	movs	r2, #22
   2b9be:	18ba      	adds	r2, r7, r2
   2b9c0:	7812      	ldrb	r2, [r2, #0]
   2b9c2:	2140      	movs	r1, #64	; 0x40
   2b9c4:	438a      	bics	r2, r1
   2b9c6:	701a      	strb	r2, [r3, #0]
   2b9c8:	2315      	movs	r3, #21
   2b9ca:	18fb      	adds	r3, r7, r3
   2b9cc:	2216      	movs	r2, #22
   2b9ce:	18ba      	adds	r2, r7, r2
   2b9d0:	7812      	ldrb	r2, [r2, #0]
   2b9d2:	701a      	strb	r2, [r3, #0]
						dj->lfn_idx = dj->index;
   2b9d4:	687b      	ldr	r3, [r7, #4]
   2b9d6:	88da      	ldrh	r2, [r3, #6]
   2b9d8:	687b      	ldr	r3, [r7, #4]
   2b9da:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   2b9dc:	2316      	movs	r3, #22
   2b9de:	18fa      	adds	r2, r7, r3
   2b9e0:	2315      	movs	r3, #21
   2b9e2:	18fb      	adds	r3, r7, r3
   2b9e4:	7812      	ldrb	r2, [r2, #0]
   2b9e6:	781b      	ldrb	r3, [r3, #0]
   2b9e8:	429a      	cmp	r2, r3
   2b9ea:	d116      	bne.n	2ba1a <dir_find+0x14e>
   2b9ec:	693b      	ldr	r3, [r7, #16]
   2b9ee:	330d      	adds	r3, #13
   2b9f0:	781b      	ldrb	r3, [r3, #0]
   2b9f2:	2214      	movs	r2, #20
   2b9f4:	18ba      	adds	r2, r7, r2
   2b9f6:	7812      	ldrb	r2, [r2, #0]
   2b9f8:	429a      	cmp	r2, r3
   2b9fa:	d10e      	bne.n	2ba1a <dir_find+0x14e>
   2b9fc:	687b      	ldr	r3, [r7, #4]
   2b9fe:	69db      	ldr	r3, [r3, #28]
   2ba00:	693a      	ldr	r2, [r7, #16]
   2ba02:	0011      	movs	r1, r2
   2ba04:	0018      	movs	r0, r3
   2ba06:	4b2c      	ldr	r3, [pc, #176]	; (2bab8 <dir_find+0x1ec>)
   2ba08:	4798      	blx	r3
   2ba0a:	1e03      	subs	r3, r0, #0
   2ba0c:	d005      	beq.n	2ba1a <dir_find+0x14e>
   2ba0e:	2315      	movs	r3, #21
   2ba10:	18fb      	adds	r3, r7, r3
   2ba12:	781b      	ldrb	r3, [r3, #0]
   2ba14:	3b01      	subs	r3, #1
   2ba16:	b2da      	uxtb	r2, r3
   2ba18:	e000      	b.n	2ba1c <dir_find+0x150>
   2ba1a:	22ff      	movs	r2, #255	; 0xff
   2ba1c:	2315      	movs	r3, #21
   2ba1e:	18fb      	adds	r3, r7, r3
   2ba20:	701a      	strb	r2, [r3, #0]
   2ba22:	e028      	b.n	2ba76 <dir_find+0x1aa>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2ba24:	2315      	movs	r3, #21
   2ba26:	18fb      	adds	r3, r7, r3
   2ba28:	781b      	ldrb	r3, [r3, #0]
   2ba2a:	2b00      	cmp	r3, #0
   2ba2c:	d10a      	bne.n	2ba44 <dir_find+0x178>
   2ba2e:	693b      	ldr	r3, [r7, #16]
   2ba30:	0018      	movs	r0, r3
   2ba32:	4b22      	ldr	r3, [pc, #136]	; (2babc <dir_find+0x1f0>)
   2ba34:	4798      	blx	r3
   2ba36:	0003      	movs	r3, r0
   2ba38:	001a      	movs	r2, r3
   2ba3a:	2314      	movs	r3, #20
   2ba3c:	18fb      	adds	r3, r7, r3
   2ba3e:	781b      	ldrb	r3, [r3, #0]
   2ba40:	4293      	cmp	r3, r2
   2ba42:	d02a      	beq.n	2ba9a <dir_find+0x1ce>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   2ba44:	2315      	movs	r3, #21
   2ba46:	18fb      	adds	r3, r7, r3
   2ba48:	22ff      	movs	r2, #255	; 0xff
   2ba4a:	701a      	strb	r2, [r3, #0]
   2ba4c:	687b      	ldr	r3, [r7, #4]
   2ba4e:	2201      	movs	r2, #1
   2ba50:	4252      	negs	r2, r2
   2ba52:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2ba54:	687b      	ldr	r3, [r7, #4]
   2ba56:	699b      	ldr	r3, [r3, #24]
   2ba58:	330b      	adds	r3, #11
   2ba5a:	781b      	ldrb	r3, [r3, #0]
   2ba5c:	001a      	movs	r2, r3
   2ba5e:	2301      	movs	r3, #1
   2ba60:	4013      	ands	r3, r2
   2ba62:	d108      	bne.n	2ba76 <dir_find+0x1aa>
   2ba64:	687b      	ldr	r3, [r7, #4]
   2ba66:	6999      	ldr	r1, [r3, #24]
   2ba68:	693b      	ldr	r3, [r7, #16]
   2ba6a:	220b      	movs	r2, #11
   2ba6c:	0018      	movs	r0, r3
   2ba6e:	4b14      	ldr	r3, [pc, #80]	; (2bac0 <dir_find+0x1f4>)
   2ba70:	4798      	blx	r3
   2ba72:	1e03      	subs	r3, r0, #0
   2ba74:	d013      	beq.n	2ba9e <dir_find+0x1d2>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
   2ba76:	2317      	movs	r3, #23
   2ba78:	18fc      	adds	r4, r7, r3
   2ba7a:	687b      	ldr	r3, [r7, #4]
   2ba7c:	2100      	movs	r1, #0
   2ba7e:	0018      	movs	r0, r3
   2ba80:	4b10      	ldr	r3, [pc, #64]	; (2bac4 <dir_find+0x1f8>)
   2ba82:	4798      	blx	r3
   2ba84:	0003      	movs	r3, r0
   2ba86:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2ba88:	2317      	movs	r3, #23
   2ba8a:	18fb      	adds	r3, r7, r3
   2ba8c:	781b      	ldrb	r3, [r3, #0]
   2ba8e:	2b00      	cmp	r3, #0
   2ba90:	d100      	bne.n	2ba94 <dir_find+0x1c8>
   2ba92:	e73b      	b.n	2b90c <dir_find+0x40>
   2ba94:	e004      	b.n	2baa0 <dir_find+0x1d4>
		if (res != FR_OK) break;
   2ba96:	46c0      	nop			; (mov r8, r8)
   2ba98:	e002      	b.n	2baa0 <dir_find+0x1d4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2ba9a:	46c0      	nop			; (mov r8, r8)
   2ba9c:	e000      	b.n	2baa0 <dir_find+0x1d4>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2ba9e:	46c0      	nop			; (mov r8, r8)

	return res;
   2baa0:	2317      	movs	r3, #23
   2baa2:	18fb      	adds	r3, r7, r3
   2baa4:	781b      	ldrb	r3, [r3, #0]
}
   2baa6:	0018      	movs	r0, r3
   2baa8:	46bd      	mov	sp, r7
   2baaa:	b007      	add	sp, #28
   2baac:	bd90      	pop	{r4, r7, pc}
   2baae:	46c0      	nop			; (mov r8, r8)
   2bab0:	0002b249 	.word	0x0002b249
   2bab4:	0002aa05 	.word	0x0002aa05
   2bab8:	0002b569 	.word	0x0002b569
   2babc:	0002b87d 	.word	0x0002b87d
   2bac0:	0002a989 	.word	0x0002a989
   2bac4:	0002b379 	.word	0x0002b379

0002bac8 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
   2bac8:	b590      	push	{r4, r7, lr}
   2baca:	b08d      	sub	sp, #52	; 0x34
   2bacc:	af00      	add	r7, sp, #0
   2bace:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
   2bad0:	687b      	ldr	r3, [r7, #4]
   2bad2:	699b      	ldr	r3, [r3, #24]
   2bad4:	627b      	str	r3, [r7, #36]	; 0x24
   2bad6:	687b      	ldr	r3, [r7, #4]
   2bad8:	69db      	ldr	r3, [r3, #28]
   2bada:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
   2badc:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2bade:	230c      	movs	r3, #12
   2bae0:	18fb      	adds	r3, r7, r3
   2bae2:	220c      	movs	r2, #12
   2bae4:	0018      	movs	r0, r3
   2bae6:	4bc8      	ldr	r3, [pc, #800]	; (2be08 <dir_register+0x340>)
   2bae8:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   2baea:	230c      	movs	r3, #12
   2baec:	18fb      	adds	r3, r7, r3
   2baee:	7adb      	ldrb	r3, [r3, #11]
   2baf0:	001a      	movs	r2, r3
   2baf2:	2301      	movs	r3, #1
   2baf4:	4013      	ands	r3, r2
   2baf6:	d048      	beq.n	2bb8a <dir_register+0xc2>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   2baf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2bafa:	330b      	adds	r3, #11
   2bafc:	2200      	movs	r2, #0
   2bafe:	701a      	strb	r2, [r3, #0]
   2bb00:	687b      	ldr	r3, [r7, #4]
   2bb02:	2200      	movs	r2, #0
   2bb04:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
   2bb06:	232c      	movs	r3, #44	; 0x2c
   2bb08:	18fb      	adds	r3, r7, r3
   2bb0a:	2201      	movs	r2, #1
   2bb0c:	801a      	strh	r2, [r3, #0]
   2bb0e:	e01c      	b.n	2bb4a <dir_register+0x82>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
   2bb10:	232c      	movs	r3, #44	; 0x2c
   2bb12:	18fb      	adds	r3, r7, r3
   2bb14:	881b      	ldrh	r3, [r3, #0]
   2bb16:	6a3a      	ldr	r2, [r7, #32]
   2bb18:	210c      	movs	r1, #12
   2bb1a:	1879      	adds	r1, r7, r1
   2bb1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
   2bb1e:	4cbb      	ldr	r4, [pc, #748]	; (2be0c <dir_register+0x344>)
   2bb20:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   2bb22:	232f      	movs	r3, #47	; 0x2f
   2bb24:	18fc      	adds	r4, r7, r3
   2bb26:	687b      	ldr	r3, [r7, #4]
   2bb28:	0018      	movs	r0, r3
   2bb2a:	4bb9      	ldr	r3, [pc, #740]	; (2be10 <dir_register+0x348>)
   2bb2c:	4798      	blx	r3
   2bb2e:	0003      	movs	r3, r0
   2bb30:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2bb32:	232f      	movs	r3, #47	; 0x2f
   2bb34:	18fb      	adds	r3, r7, r3
   2bb36:	781b      	ldrb	r3, [r3, #0]
   2bb38:	2b00      	cmp	r3, #0
   2bb3a:	d10c      	bne.n	2bb56 <dir_register+0x8e>
		for (n = 1; n < 100; n++) {
   2bb3c:	232c      	movs	r3, #44	; 0x2c
   2bb3e:	18fb      	adds	r3, r7, r3
   2bb40:	881a      	ldrh	r2, [r3, #0]
   2bb42:	232c      	movs	r3, #44	; 0x2c
   2bb44:	18fb      	adds	r3, r7, r3
   2bb46:	3201      	adds	r2, #1
   2bb48:	801a      	strh	r2, [r3, #0]
   2bb4a:	232c      	movs	r3, #44	; 0x2c
   2bb4c:	18fb      	adds	r3, r7, r3
   2bb4e:	881b      	ldrh	r3, [r3, #0]
   2bb50:	2b63      	cmp	r3, #99	; 0x63
   2bb52:	d9dd      	bls.n	2bb10 <dir_register+0x48>
   2bb54:	e000      	b.n	2bb58 <dir_register+0x90>
			if (res != FR_OK) break;
   2bb56:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   2bb58:	232c      	movs	r3, #44	; 0x2c
   2bb5a:	18fb      	adds	r3, r7, r3
   2bb5c:	881b      	ldrh	r3, [r3, #0]
   2bb5e:	2b64      	cmp	r3, #100	; 0x64
   2bb60:	d101      	bne.n	2bb66 <dir_register+0x9e>
   2bb62:	2307      	movs	r3, #7
   2bb64:	e14c      	b.n	2be00 <dir_register+0x338>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   2bb66:	232f      	movs	r3, #47	; 0x2f
   2bb68:	18fb      	adds	r3, r7, r3
   2bb6a:	781b      	ldrb	r3, [r3, #0]
   2bb6c:	2b04      	cmp	r3, #4
   2bb6e:	d003      	beq.n	2bb78 <dir_register+0xb0>
   2bb70:	232f      	movs	r3, #47	; 0x2f
   2bb72:	18fb      	adds	r3, r7, r3
   2bb74:	781b      	ldrb	r3, [r3, #0]
   2bb76:	e143      	b.n	2be00 <dir_register+0x338>
		fn[NS] = sn[NS]; dj->lfn = lfn;
   2bb78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2bb7a:	330b      	adds	r3, #11
   2bb7c:	220c      	movs	r2, #12
   2bb7e:	18ba      	adds	r2, r7, r2
   2bb80:	7ad2      	ldrb	r2, [r2, #11]
   2bb82:	701a      	strb	r2, [r3, #0]
   2bb84:	687b      	ldr	r3, [r7, #4]
   2bb86:	6a3a      	ldr	r2, [r7, #32]
   2bb88:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   2bb8a:	230c      	movs	r3, #12
   2bb8c:	18fb      	adds	r3, r7, r3
   2bb8e:	7adb      	ldrb	r3, [r3, #11]
   2bb90:	001a      	movs	r2, r3
   2bb92:	2302      	movs	r3, #2
   2bb94:	4013      	ands	r3, r2
   2bb96:	d023      	beq.n	2bbe0 <dir_register+0x118>
		for (ne = 0; lfn[ne]; ne++) ;
   2bb98:	232a      	movs	r3, #42	; 0x2a
   2bb9a:	18fb      	adds	r3, r7, r3
   2bb9c:	2200      	movs	r2, #0
   2bb9e:	801a      	strh	r2, [r3, #0]
   2bba0:	e006      	b.n	2bbb0 <dir_register+0xe8>
   2bba2:	232a      	movs	r3, #42	; 0x2a
   2bba4:	18fb      	adds	r3, r7, r3
   2bba6:	881a      	ldrh	r2, [r3, #0]
   2bba8:	232a      	movs	r3, #42	; 0x2a
   2bbaa:	18fb      	adds	r3, r7, r3
   2bbac:	3201      	adds	r2, #1
   2bbae:	801a      	strh	r2, [r3, #0]
   2bbb0:	232a      	movs	r3, #42	; 0x2a
   2bbb2:	18fb      	adds	r3, r7, r3
   2bbb4:	881b      	ldrh	r3, [r3, #0]
   2bbb6:	005b      	lsls	r3, r3, #1
   2bbb8:	6a3a      	ldr	r2, [r7, #32]
   2bbba:	18d3      	adds	r3, r2, r3
   2bbbc:	881b      	ldrh	r3, [r3, #0]
   2bbbe:	2b00      	cmp	r3, #0
   2bbc0:	d1ef      	bne.n	2bba2 <dir_register+0xda>
		ne = (ne + 25) / 13;
   2bbc2:	232a      	movs	r3, #42	; 0x2a
   2bbc4:	18fb      	adds	r3, r7, r3
   2bbc6:	881b      	ldrh	r3, [r3, #0]
   2bbc8:	3319      	adds	r3, #25
   2bbca:	001a      	movs	r2, r3
   2bbcc:	4b91      	ldr	r3, [pc, #580]	; (2be14 <dir_register+0x34c>)
   2bbce:	210d      	movs	r1, #13
   2bbd0:	0010      	movs	r0, r2
   2bbd2:	4798      	blx	r3
   2bbd4:	0003      	movs	r3, r0
   2bbd6:	001a      	movs	r2, r3
   2bbd8:	232a      	movs	r3, #42	; 0x2a
   2bbda:	18fb      	adds	r3, r7, r3
   2bbdc:	801a      	strh	r2, [r3, #0]
   2bbde:	e003      	b.n	2bbe8 <dir_register+0x120>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
   2bbe0:	232a      	movs	r3, #42	; 0x2a
   2bbe2:	18fb      	adds	r3, r7, r3
   2bbe4:	2201      	movs	r2, #1
   2bbe6:	801a      	strh	r2, [r3, #0]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
   2bbe8:	232f      	movs	r3, #47	; 0x2f
   2bbea:	18fc      	adds	r4, r7, r3
   2bbec:	687b      	ldr	r3, [r7, #4]
   2bbee:	2100      	movs	r1, #0
   2bbf0:	0018      	movs	r0, r3
   2bbf2:	4b89      	ldr	r3, [pc, #548]	; (2be18 <dir_register+0x350>)
   2bbf4:	4798      	blx	r3
   2bbf6:	0003      	movs	r3, r0
   2bbf8:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2bbfa:	232f      	movs	r3, #47	; 0x2f
   2bbfc:	18fb      	adds	r3, r7, r3
   2bbfe:	781b      	ldrb	r3, [r3, #0]
   2bc00:	2b00      	cmp	r3, #0
   2bc02:	d003      	beq.n	2bc0c <dir_register+0x144>
   2bc04:	232f      	movs	r3, #47	; 0x2f
   2bc06:	18fb      	adds	r3, r7, r3
   2bc08:	781b      	ldrb	r3, [r3, #0]
   2bc0a:	e0f9      	b.n	2be00 <dir_register+0x338>
	n = is = 0;
   2bc0c:	2328      	movs	r3, #40	; 0x28
   2bc0e:	18fb      	adds	r3, r7, r3
   2bc10:	2200      	movs	r2, #0
   2bc12:	801a      	strh	r2, [r3, #0]
   2bc14:	232c      	movs	r3, #44	; 0x2c
   2bc16:	18fb      	adds	r3, r7, r3
   2bc18:	2228      	movs	r2, #40	; 0x28
   2bc1a:	18ba      	adds	r2, r7, r2
   2bc1c:	8812      	ldrh	r2, [r2, #0]
   2bc1e:	801a      	strh	r2, [r3, #0]
	do {
		res = move_window(dj->fs, dj->sect);
   2bc20:	687b      	ldr	r3, [r7, #4]
   2bc22:	681a      	ldr	r2, [r3, #0]
   2bc24:	687b      	ldr	r3, [r7, #4]
   2bc26:	691b      	ldr	r3, [r3, #16]
   2bc28:	212f      	movs	r1, #47	; 0x2f
   2bc2a:	187c      	adds	r4, r7, r1
   2bc2c:	0019      	movs	r1, r3
   2bc2e:	0010      	movs	r0, r2
   2bc30:	4b7a      	ldr	r3, [pc, #488]	; (2be1c <dir_register+0x354>)
   2bc32:	4798      	blx	r3
   2bc34:	0003      	movs	r3, r0
   2bc36:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2bc38:	232f      	movs	r3, #47	; 0x2f
   2bc3a:	18fb      	adds	r3, r7, r3
   2bc3c:	781b      	ldrb	r3, [r3, #0]
   2bc3e:	2b00      	cmp	r3, #0
   2bc40:	d13c      	bne.n	2bcbc <dir_register+0x1f4>
		c = *dj->dir;				/* Check the entry status */
   2bc42:	687b      	ldr	r3, [r7, #4]
   2bc44:	695a      	ldr	r2, [r3, #20]
   2bc46:	231f      	movs	r3, #31
   2bc48:	18fb      	adds	r3, r7, r3
   2bc4a:	7812      	ldrb	r2, [r2, #0]
   2bc4c:	701a      	strb	r2, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   2bc4e:	231f      	movs	r3, #31
   2bc50:	18fb      	adds	r3, r7, r3
   2bc52:	781b      	ldrb	r3, [r3, #0]
   2bc54:	2be5      	cmp	r3, #229	; 0xe5
   2bc56:	d004      	beq.n	2bc62 <dir_register+0x19a>
   2bc58:	231f      	movs	r3, #31
   2bc5a:	18fb      	adds	r3, r7, r3
   2bc5c:	781b      	ldrb	r3, [r3, #0]
   2bc5e:	2b00      	cmp	r3, #0
   2bc60:	d119      	bne.n	2bc96 <dir_register+0x1ce>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   2bc62:	232c      	movs	r3, #44	; 0x2c
   2bc64:	18fb      	adds	r3, r7, r3
   2bc66:	881b      	ldrh	r3, [r3, #0]
   2bc68:	2b00      	cmp	r3, #0
   2bc6a:	d104      	bne.n	2bc76 <dir_register+0x1ae>
   2bc6c:	2328      	movs	r3, #40	; 0x28
   2bc6e:	18fb      	adds	r3, r7, r3
   2bc70:	687a      	ldr	r2, [r7, #4]
   2bc72:	88d2      	ldrh	r2, [r2, #6]
   2bc74:	801a      	strh	r2, [r3, #0]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   2bc76:	232c      	movs	r3, #44	; 0x2c
   2bc78:	18fb      	adds	r3, r7, r3
   2bc7a:	222c      	movs	r2, #44	; 0x2c
   2bc7c:	18ba      	adds	r2, r7, r2
   2bc7e:	8812      	ldrh	r2, [r2, #0]
   2bc80:	3201      	adds	r2, #1
   2bc82:	801a      	strh	r2, [r3, #0]
   2bc84:	232c      	movs	r3, #44	; 0x2c
   2bc86:	18fa      	adds	r2, r7, r3
   2bc88:	232a      	movs	r3, #42	; 0x2a
   2bc8a:	18fb      	adds	r3, r7, r3
   2bc8c:	8812      	ldrh	r2, [r2, #0]
   2bc8e:	881b      	ldrh	r3, [r3, #0]
   2bc90:	429a      	cmp	r2, r3
   2bc92:	d104      	bne.n	2bc9e <dir_register+0x1d6>
   2bc94:	e013      	b.n	2bcbe <dir_register+0x1f6>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
   2bc96:	232c      	movs	r3, #44	; 0x2c
   2bc98:	18fb      	adds	r3, r7, r3
   2bc9a:	2200      	movs	r2, #0
   2bc9c:	801a      	strh	r2, [r3, #0]
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   2bc9e:	232f      	movs	r3, #47	; 0x2f
   2bca0:	18fc      	adds	r4, r7, r3
   2bca2:	687b      	ldr	r3, [r7, #4]
   2bca4:	2101      	movs	r1, #1
   2bca6:	0018      	movs	r0, r3
   2bca8:	4b5d      	ldr	r3, [pc, #372]	; (2be20 <dir_register+0x358>)
   2bcaa:	4798      	blx	r3
   2bcac:	0003      	movs	r3, r0
   2bcae:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2bcb0:	232f      	movs	r3, #47	; 0x2f
   2bcb2:	18fb      	adds	r3, r7, r3
   2bcb4:	781b      	ldrb	r3, [r3, #0]
   2bcb6:	2b00      	cmp	r3, #0
   2bcb8:	d0b2      	beq.n	2bc20 <dir_register+0x158>
   2bcba:	e000      	b.n	2bcbe <dir_register+0x1f6>
		if (res != FR_OK) break;
   2bcbc:	46c0      	nop			; (mov r8, r8)

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   2bcbe:	232f      	movs	r3, #47	; 0x2f
   2bcc0:	18fb      	adds	r3, r7, r3
   2bcc2:	781b      	ldrb	r3, [r3, #0]
   2bcc4:	2b00      	cmp	r3, #0
   2bcc6:	d163      	bne.n	2bd90 <dir_register+0x2c8>
   2bcc8:	232a      	movs	r3, #42	; 0x2a
   2bcca:	18fb      	adds	r3, r7, r3
   2bccc:	881b      	ldrh	r3, [r3, #0]
   2bcce:	2b01      	cmp	r3, #1
   2bcd0:	d95e      	bls.n	2bd90 <dir_register+0x2c8>
		res = dir_sdi(dj, is);
   2bcd2:	232f      	movs	r3, #47	; 0x2f
   2bcd4:	18fc      	adds	r4, r7, r3
   2bcd6:	2328      	movs	r3, #40	; 0x28
   2bcd8:	18fb      	adds	r3, r7, r3
   2bcda:	881a      	ldrh	r2, [r3, #0]
   2bcdc:	687b      	ldr	r3, [r7, #4]
   2bcde:	0011      	movs	r1, r2
   2bce0:	0018      	movs	r0, r3
   2bce2:	4b4d      	ldr	r3, [pc, #308]	; (2be18 <dir_register+0x350>)
   2bce4:	4798      	blx	r3
   2bce6:	0003      	movs	r3, r0
   2bce8:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2bcea:	232f      	movs	r3, #47	; 0x2f
   2bcec:	18fb      	adds	r3, r7, r3
   2bcee:	781b      	ldrb	r3, [r3, #0]
   2bcf0:	2b00      	cmp	r3, #0
   2bcf2:	d14d      	bne.n	2bd90 <dir_register+0x2c8>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   2bcf4:	687b      	ldr	r3, [r7, #4]
   2bcf6:	699b      	ldr	r3, [r3, #24]
   2bcf8:	221e      	movs	r2, #30
   2bcfa:	18bc      	adds	r4, r7, r2
   2bcfc:	0018      	movs	r0, r3
   2bcfe:	4b49      	ldr	r3, [pc, #292]	; (2be24 <dir_register+0x35c>)
   2bd00:	4798      	blx	r3
   2bd02:	0003      	movs	r3, r0
   2bd04:	7023      	strb	r3, [r4, #0]
			ne--;
   2bd06:	232a      	movs	r3, #42	; 0x2a
   2bd08:	18fb      	adds	r3, r7, r3
   2bd0a:	881a      	ldrh	r2, [r3, #0]
   2bd0c:	232a      	movs	r3, #42	; 0x2a
   2bd0e:	18fb      	adds	r3, r7, r3
   2bd10:	3a01      	subs	r2, #1
   2bd12:	801a      	strh	r2, [r3, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
   2bd14:	687b      	ldr	r3, [r7, #4]
   2bd16:	681a      	ldr	r2, [r3, #0]
   2bd18:	687b      	ldr	r3, [r7, #4]
   2bd1a:	691b      	ldr	r3, [r3, #16]
   2bd1c:	212f      	movs	r1, #47	; 0x2f
   2bd1e:	187c      	adds	r4, r7, r1
   2bd20:	0019      	movs	r1, r3
   2bd22:	0010      	movs	r0, r2
   2bd24:	4b3d      	ldr	r3, [pc, #244]	; (2be1c <dir_register+0x354>)
   2bd26:	4798      	blx	r3
   2bd28:	0003      	movs	r3, r0
   2bd2a:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
   2bd2c:	232f      	movs	r3, #47	; 0x2f
   2bd2e:	18fb      	adds	r3, r7, r3
   2bd30:	781b      	ldrb	r3, [r3, #0]
   2bd32:	2b00      	cmp	r3, #0
   2bd34:	d12b      	bne.n	2bd8e <dir_register+0x2c6>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   2bd36:	687b      	ldr	r3, [r7, #4]
   2bd38:	69d8      	ldr	r0, [r3, #28]
   2bd3a:	687b      	ldr	r3, [r7, #4]
   2bd3c:	6959      	ldr	r1, [r3, #20]
   2bd3e:	232a      	movs	r3, #42	; 0x2a
   2bd40:	18fb      	adds	r3, r7, r3
   2bd42:	881b      	ldrh	r3, [r3, #0]
   2bd44:	b2da      	uxtb	r2, r3
   2bd46:	231e      	movs	r3, #30
   2bd48:	18fb      	adds	r3, r7, r3
   2bd4a:	781b      	ldrb	r3, [r3, #0]
   2bd4c:	4c36      	ldr	r4, [pc, #216]	; (2be28 <dir_register+0x360>)
   2bd4e:	47a0      	blx	r4
				dj->fs->wflag = 1;
   2bd50:	687b      	ldr	r3, [r7, #4]
   2bd52:	681b      	ldr	r3, [r3, #0]
   2bd54:	2201      	movs	r2, #1
   2bd56:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
   2bd58:	232f      	movs	r3, #47	; 0x2f
   2bd5a:	18fc      	adds	r4, r7, r3
   2bd5c:	687b      	ldr	r3, [r7, #4]
   2bd5e:	2100      	movs	r1, #0
   2bd60:	0018      	movs	r0, r3
   2bd62:	4b2f      	ldr	r3, [pc, #188]	; (2be20 <dir_register+0x358>)
   2bd64:	4798      	blx	r3
   2bd66:	0003      	movs	r3, r0
   2bd68:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --ne);
   2bd6a:	232f      	movs	r3, #47	; 0x2f
   2bd6c:	18fb      	adds	r3, r7, r3
   2bd6e:	781b      	ldrb	r3, [r3, #0]
   2bd70:	2b00      	cmp	r3, #0
   2bd72:	d10d      	bne.n	2bd90 <dir_register+0x2c8>
   2bd74:	232a      	movs	r3, #42	; 0x2a
   2bd76:	18fb      	adds	r3, r7, r3
   2bd78:	222a      	movs	r2, #42	; 0x2a
   2bd7a:	18ba      	adds	r2, r7, r2
   2bd7c:	8812      	ldrh	r2, [r2, #0]
   2bd7e:	3a01      	subs	r2, #1
   2bd80:	801a      	strh	r2, [r3, #0]
   2bd82:	232a      	movs	r3, #42	; 0x2a
   2bd84:	18fb      	adds	r3, r7, r3
   2bd86:	881b      	ldrh	r3, [r3, #0]
   2bd88:	2b00      	cmp	r3, #0
   2bd8a:	d1c3      	bne.n	2bd14 <dir_register+0x24c>
   2bd8c:	e000      	b.n	2bd90 <dir_register+0x2c8>
				if (res != FR_OK) break;
   2bd8e:	46c0      	nop			; (mov r8, r8)
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
   2bd90:	232f      	movs	r3, #47	; 0x2f
   2bd92:	18fb      	adds	r3, r7, r3
   2bd94:	781b      	ldrb	r3, [r3, #0]
   2bd96:	2b00      	cmp	r3, #0
   2bd98:	d12f      	bne.n	2bdfa <dir_register+0x332>
		res = move_window(dj->fs, dj->sect);
   2bd9a:	687b      	ldr	r3, [r7, #4]
   2bd9c:	681a      	ldr	r2, [r3, #0]
   2bd9e:	687b      	ldr	r3, [r7, #4]
   2bda0:	691b      	ldr	r3, [r3, #16]
   2bda2:	212f      	movs	r1, #47	; 0x2f
   2bda4:	187c      	adds	r4, r7, r1
   2bda6:	0019      	movs	r1, r3
   2bda8:	0010      	movs	r0, r2
   2bdaa:	4b1c      	ldr	r3, [pc, #112]	; (2be1c <dir_register+0x354>)
   2bdac:	4798      	blx	r3
   2bdae:	0003      	movs	r3, r0
   2bdb0:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2bdb2:	232f      	movs	r3, #47	; 0x2f
   2bdb4:	18fb      	adds	r3, r7, r3
   2bdb6:	781b      	ldrb	r3, [r3, #0]
   2bdb8:	2b00      	cmp	r3, #0
   2bdba:	d11e      	bne.n	2bdfa <dir_register+0x332>
			dir = dj->dir;
   2bdbc:	687b      	ldr	r3, [r7, #4]
   2bdbe:	695b      	ldr	r3, [r3, #20]
   2bdc0:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   2bdc2:	69bb      	ldr	r3, [r7, #24]
   2bdc4:	2220      	movs	r2, #32
   2bdc6:	2100      	movs	r1, #0
   2bdc8:	0018      	movs	r0, r3
   2bdca:	4b18      	ldr	r3, [pc, #96]	; (2be2c <dir_register+0x364>)
   2bdcc:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   2bdce:	687b      	ldr	r3, [r7, #4]
   2bdd0:	6999      	ldr	r1, [r3, #24]
   2bdd2:	69bb      	ldr	r3, [r7, #24]
   2bdd4:	220b      	movs	r2, #11
   2bdd6:	0018      	movs	r0, r3
   2bdd8:	4b0b      	ldr	r3, [pc, #44]	; (2be08 <dir_register+0x340>)
   2bdda:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   2bddc:	69bb      	ldr	r3, [r7, #24]
   2bdde:	330c      	adds	r3, #12
   2bde0:	001a      	movs	r2, r3
   2bde2:	687b      	ldr	r3, [r7, #4]
   2bde4:	699b      	ldr	r3, [r3, #24]
   2bde6:	330b      	adds	r3, #11
   2bde8:	781b      	ldrb	r3, [r3, #0]
   2bdea:	2118      	movs	r1, #24
   2bdec:	400b      	ands	r3, r1
   2bdee:	b2db      	uxtb	r3, r3
   2bdf0:	7013      	strb	r3, [r2, #0]
#endif
			dj->fs->wflag = 1;
   2bdf2:	687b      	ldr	r3, [r7, #4]
   2bdf4:	681b      	ldr	r3, [r3, #0]
   2bdf6:	2201      	movs	r2, #1
   2bdf8:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
   2bdfa:	232f      	movs	r3, #47	; 0x2f
   2bdfc:	18fb      	adds	r3, r7, r3
   2bdfe:	781b      	ldrb	r3, [r3, #0]
}
   2be00:	0018      	movs	r0, r3
   2be02:	46bd      	mov	sp, r7
   2be04:	b00d      	add	sp, #52	; 0x34
   2be06:	bd90      	pop	{r4, r7, pc}
   2be08:	0002a921 	.word	0x0002a921
   2be0c:	0002b77d 	.word	0x0002b77d
   2be10:	0002b8cd 	.word	0x0002b8cd
   2be14:	00031c39 	.word	0x00031c39
   2be18:	0002b249 	.word	0x0002b249
   2be1c:	0002aa05 	.word	0x0002aa05
   2be20:	0002b379 	.word	0x0002b379
   2be24:	0002b87d 	.word	0x0002b87d
   2be28:	0002b66d 	.word	0x0002b66d
   2be2c:	0002a959 	.word	0x0002a959

0002be30 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
   2be30:	b590      	push	{r4, r7, lr}
   2be32:	b08b      	sub	sp, #44	; 0x2c
   2be34:	af00      	add	r7, sp, #0
   2be36:	6078      	str	r0, [r7, #4]
   2be38:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   2be3a:	683b      	ldr	r3, [r7, #0]
   2be3c:	681b      	ldr	r3, [r3, #0]
   2be3e:	613b      	str	r3, [r7, #16]
   2be40:	e002      	b.n	2be48 <create_name+0x18>
   2be42:	693b      	ldr	r3, [r7, #16]
   2be44:	3301      	adds	r3, #1
   2be46:	613b      	str	r3, [r7, #16]
   2be48:	693b      	ldr	r3, [r7, #16]
   2be4a:	781b      	ldrb	r3, [r3, #0]
   2be4c:	2b2f      	cmp	r3, #47	; 0x2f
   2be4e:	d0f8      	beq.n	2be42 <create_name+0x12>
   2be50:	693b      	ldr	r3, [r7, #16]
   2be52:	781b      	ldrb	r3, [r3, #0]
   2be54:	2b5c      	cmp	r3, #92	; 0x5c
   2be56:	d0f4      	beq.n	2be42 <create_name+0x12>
	lfn = dj->lfn;
   2be58:	687b      	ldr	r3, [r7, #4]
   2be5a:	69db      	ldr	r3, [r3, #28]
   2be5c:	60fb      	str	r3, [r7, #12]
	si = di = 0;
   2be5e:	2300      	movs	r3, #0
   2be60:	617b      	str	r3, [r7, #20]
   2be62:	697b      	ldr	r3, [r7, #20]
   2be64:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
   2be66:	69bb      	ldr	r3, [r7, #24]
   2be68:	1c5a      	adds	r2, r3, #1
   2be6a:	61ba      	str	r2, [r7, #24]
   2be6c:	693a      	ldr	r2, [r7, #16]
   2be6e:	18d3      	adds	r3, r2, r3
   2be70:	781a      	ldrb	r2, [r3, #0]
   2be72:	2324      	movs	r3, #36	; 0x24
   2be74:	18fb      	adds	r3, r7, r3
   2be76:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   2be78:	2324      	movs	r3, #36	; 0x24
   2be7a:	18fb      	adds	r3, r7, r3
   2be7c:	881b      	ldrh	r3, [r3, #0]
   2be7e:	2b1f      	cmp	r3, #31
   2be80:	d944      	bls.n	2bf0c <create_name+0xdc>
   2be82:	2324      	movs	r3, #36	; 0x24
   2be84:	18fb      	adds	r3, r7, r3
   2be86:	881b      	ldrh	r3, [r3, #0]
   2be88:	2b2f      	cmp	r3, #47	; 0x2f
   2be8a:	d03f      	beq.n	2bf0c <create_name+0xdc>
   2be8c:	2324      	movs	r3, #36	; 0x24
   2be8e:	18fb      	adds	r3, r7, r3
   2be90:	881b      	ldrh	r3, [r3, #0]
   2be92:	2b5c      	cmp	r3, #92	; 0x5c
   2be94:	d03a      	beq.n	2bf0c <create_name+0xdc>
		if (di >= _MAX_LFN)				/* Reject too long name */
   2be96:	697b      	ldr	r3, [r7, #20]
   2be98:	2bfe      	cmp	r3, #254	; 0xfe
   2be9a:	d901      	bls.n	2bea0 <create_name+0x70>
			return FR_INVALID_NAME;
   2be9c:	2306      	movs	r3, #6
   2be9e:	e1e7      	b.n	2c270 <create_name+0x440>
#if !_LFN_UNICODE
		w &= 0xFF;
   2bea0:	2324      	movs	r3, #36	; 0x24
   2bea2:	18fb      	adds	r3, r7, r3
   2bea4:	2224      	movs	r2, #36	; 0x24
   2bea6:	18ba      	adds	r2, r7, r2
   2bea8:	8812      	ldrh	r2, [r2, #0]
   2beaa:	21ff      	movs	r1, #255	; 0xff
   2beac:	400a      	ands	r2, r1
   2beae:	801a      	strh	r2, [r3, #0]
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   2beb0:	2324      	movs	r3, #36	; 0x24
   2beb2:	18fc      	adds	r4, r7, r3
   2beb4:	2324      	movs	r3, #36	; 0x24
   2beb6:	18fb      	adds	r3, r7, r3
   2beb8:	881b      	ldrh	r3, [r3, #0]
   2beba:	2101      	movs	r1, #1
   2bebc:	0018      	movs	r0, r3
   2bebe:	4bba      	ldr	r3, [pc, #744]	; (2c1a8 <create_name+0x378>)
   2bec0:	4798      	blx	r3
   2bec2:	0003      	movs	r3, r0
   2bec4:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   2bec6:	2324      	movs	r3, #36	; 0x24
   2bec8:	18fb      	adds	r3, r7, r3
   2beca:	881b      	ldrh	r3, [r3, #0]
   2becc:	2b00      	cmp	r3, #0
   2bece:	d101      	bne.n	2bed4 <create_name+0xa4>
   2bed0:	2306      	movs	r3, #6
   2bed2:	e1cd      	b.n	2c270 <create_name+0x440>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   2bed4:	2324      	movs	r3, #36	; 0x24
   2bed6:	18fb      	adds	r3, r7, r3
   2bed8:	881b      	ldrh	r3, [r3, #0]
   2beda:	2b7f      	cmp	r3, #127	; 0x7f
   2bedc:	d80b      	bhi.n	2bef6 <create_name+0xc6>
   2bede:	2324      	movs	r3, #36	; 0x24
   2bee0:	18fb      	adds	r3, r7, r3
   2bee2:	881a      	ldrh	r2, [r3, #0]
   2bee4:	4bb1      	ldr	r3, [pc, #708]	; (2c1ac <create_name+0x37c>)
   2bee6:	0011      	movs	r1, r2
   2bee8:	0018      	movs	r0, r3
   2beea:	4bb1      	ldr	r3, [pc, #708]	; (2c1b0 <create_name+0x380>)
   2beec:	4798      	blx	r3
   2beee:	1e03      	subs	r3, r0, #0
   2bef0:	d001      	beq.n	2bef6 <create_name+0xc6>
			return FR_INVALID_NAME;
   2bef2:	2306      	movs	r3, #6
   2bef4:	e1bc      	b.n	2c270 <create_name+0x440>
		lfn[di++] = w;					/* Store the Unicode char */
   2bef6:	697b      	ldr	r3, [r7, #20]
   2bef8:	1c5a      	adds	r2, r3, #1
   2befa:	617a      	str	r2, [r7, #20]
   2befc:	005b      	lsls	r3, r3, #1
   2befe:	68fa      	ldr	r2, [r7, #12]
   2bf00:	18d3      	adds	r3, r2, r3
   2bf02:	2224      	movs	r2, #36	; 0x24
   2bf04:	18ba      	adds	r2, r7, r2
   2bf06:	8812      	ldrh	r2, [r2, #0]
   2bf08:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
   2bf0a:	e7ac      	b.n	2be66 <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
   2bf0c:	693a      	ldr	r2, [r7, #16]
   2bf0e:	69bb      	ldr	r3, [r7, #24]
   2bf10:	18d2      	adds	r2, r2, r3
   2bf12:	683b      	ldr	r3, [r7, #0]
   2bf14:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   2bf16:	2324      	movs	r3, #36	; 0x24
   2bf18:	18fb      	adds	r3, r7, r3
   2bf1a:	881b      	ldrh	r3, [r3, #0]
   2bf1c:	2b1f      	cmp	r3, #31
   2bf1e:	d801      	bhi.n	2bf24 <create_name+0xf4>
   2bf20:	2204      	movs	r2, #4
   2bf22:	e000      	b.n	2bf26 <create_name+0xf6>
   2bf24:	2200      	movs	r2, #0
   2bf26:	2326      	movs	r3, #38	; 0x26
   2bf28:	18fb      	adds	r3, r7, r3
   2bf2a:	701a      	strb	r2, [r3, #0]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
   2bf2c:	e017      	b.n	2bf5e <create_name+0x12e>
		w = lfn[di-1];
   2bf2e:	697b      	ldr	r3, [r7, #20]
   2bf30:	4aa0      	ldr	r2, [pc, #640]	; (2c1b4 <create_name+0x384>)
   2bf32:	4694      	mov	ip, r2
   2bf34:	4463      	add	r3, ip
   2bf36:	005b      	lsls	r3, r3, #1
   2bf38:	68fa      	ldr	r2, [r7, #12]
   2bf3a:	18d2      	adds	r2, r2, r3
   2bf3c:	2324      	movs	r3, #36	; 0x24
   2bf3e:	18fb      	adds	r3, r7, r3
   2bf40:	8812      	ldrh	r2, [r2, #0]
   2bf42:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
   2bf44:	2324      	movs	r3, #36	; 0x24
   2bf46:	18fb      	adds	r3, r7, r3
   2bf48:	881b      	ldrh	r3, [r3, #0]
   2bf4a:	2b20      	cmp	r3, #32
   2bf4c:	d004      	beq.n	2bf58 <create_name+0x128>
   2bf4e:	2324      	movs	r3, #36	; 0x24
   2bf50:	18fb      	adds	r3, r7, r3
   2bf52:	881b      	ldrh	r3, [r3, #0]
   2bf54:	2b2e      	cmp	r3, #46	; 0x2e
   2bf56:	d106      	bne.n	2bf66 <create_name+0x136>
		di--;
   2bf58:	697b      	ldr	r3, [r7, #20]
   2bf5a:	3b01      	subs	r3, #1
   2bf5c:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
   2bf5e:	697b      	ldr	r3, [r7, #20]
   2bf60:	2b00      	cmp	r3, #0
   2bf62:	d1e4      	bne.n	2bf2e <create_name+0xfe>
   2bf64:	e000      	b.n	2bf68 <create_name+0x138>
		if (w != ' ' && w != '.') break;
   2bf66:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   2bf68:	697b      	ldr	r3, [r7, #20]
   2bf6a:	2b00      	cmp	r3, #0
   2bf6c:	d101      	bne.n	2bf72 <create_name+0x142>
   2bf6e:	2306      	movs	r3, #6
   2bf70:	e17e      	b.n	2c270 <create_name+0x440>

	lfn[di] = 0;						/* LFN is created */
   2bf72:	697b      	ldr	r3, [r7, #20]
   2bf74:	005b      	lsls	r3, r3, #1
   2bf76:	68fa      	ldr	r2, [r7, #12]
   2bf78:	18d3      	adds	r3, r2, r3
   2bf7a:	2200      	movs	r2, #0
   2bf7c:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
   2bf7e:	687b      	ldr	r3, [r7, #4]
   2bf80:	699b      	ldr	r3, [r3, #24]
   2bf82:	220b      	movs	r2, #11
   2bf84:	2120      	movs	r1, #32
   2bf86:	0018      	movs	r0, r3
   2bf88:	4b8b      	ldr	r3, [pc, #556]	; (2c1b8 <create_name+0x388>)
   2bf8a:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   2bf8c:	2300      	movs	r3, #0
   2bf8e:	61bb      	str	r3, [r7, #24]
   2bf90:	e002      	b.n	2bf98 <create_name+0x168>
   2bf92:	69bb      	ldr	r3, [r7, #24]
   2bf94:	3301      	adds	r3, #1
   2bf96:	61bb      	str	r3, [r7, #24]
   2bf98:	69bb      	ldr	r3, [r7, #24]
   2bf9a:	005b      	lsls	r3, r3, #1
   2bf9c:	68fa      	ldr	r2, [r7, #12]
   2bf9e:	18d3      	adds	r3, r2, r3
   2bfa0:	881b      	ldrh	r3, [r3, #0]
   2bfa2:	2b20      	cmp	r3, #32
   2bfa4:	d0f5      	beq.n	2bf92 <create_name+0x162>
   2bfa6:	69bb      	ldr	r3, [r7, #24]
   2bfa8:	005b      	lsls	r3, r3, #1
   2bfaa:	68fa      	ldr	r2, [r7, #12]
   2bfac:	18d3      	adds	r3, r2, r3
   2bfae:	881b      	ldrh	r3, [r3, #0]
   2bfb0:	2b2e      	cmp	r3, #46	; 0x2e
   2bfb2:	d0ee      	beq.n	2bf92 <create_name+0x162>
	if (si) cf |= NS_LOSS | NS_LFN;
   2bfb4:	69bb      	ldr	r3, [r7, #24]
   2bfb6:	2b00      	cmp	r3, #0
   2bfb8:	d00b      	beq.n	2bfd2 <create_name+0x1a2>
   2bfba:	2326      	movs	r3, #38	; 0x26
   2bfbc:	18fb      	adds	r3, r7, r3
   2bfbe:	2226      	movs	r2, #38	; 0x26
   2bfc0:	18ba      	adds	r2, r7, r2
   2bfc2:	7812      	ldrb	r2, [r2, #0]
   2bfc4:	2103      	movs	r1, #3
   2bfc6:	430a      	orrs	r2, r1
   2bfc8:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   2bfca:	e002      	b.n	2bfd2 <create_name+0x1a2>
   2bfcc:	697b      	ldr	r3, [r7, #20]
   2bfce:	3b01      	subs	r3, #1
   2bfd0:	617b      	str	r3, [r7, #20]
   2bfd2:	697b      	ldr	r3, [r7, #20]
   2bfd4:	2b00      	cmp	r3, #0
   2bfd6:	d009      	beq.n	2bfec <create_name+0x1bc>
   2bfd8:	697b      	ldr	r3, [r7, #20]
   2bfda:	4a76      	ldr	r2, [pc, #472]	; (2c1b4 <create_name+0x384>)
   2bfdc:	4694      	mov	ip, r2
   2bfde:	4463      	add	r3, ip
   2bfe0:	005b      	lsls	r3, r3, #1
   2bfe2:	68fa      	ldr	r2, [r7, #12]
   2bfe4:	18d3      	adds	r3, r2, r3
   2bfe6:	881b      	ldrh	r3, [r3, #0]
   2bfe8:	2b2e      	cmp	r3, #46	; 0x2e
   2bfea:	d1ef      	bne.n	2bfcc <create_name+0x19c>

	b = i = 0; ni = 8;
   2bfec:	2300      	movs	r3, #0
   2bfee:	623b      	str	r3, [r7, #32]
   2bff0:	2327      	movs	r3, #39	; 0x27
   2bff2:	18fb      	adds	r3, r7, r3
   2bff4:	2200      	movs	r2, #0
   2bff6:	701a      	strb	r2, [r3, #0]
   2bff8:	2308      	movs	r3, #8
   2bffa:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
   2bffc:	69bb      	ldr	r3, [r7, #24]
   2bffe:	1c5a      	adds	r2, r3, #1
   2c000:	61ba      	str	r2, [r7, #24]
   2c002:	005b      	lsls	r3, r3, #1
   2c004:	68fa      	ldr	r2, [r7, #12]
   2c006:	18d2      	adds	r2, r2, r3
   2c008:	2324      	movs	r3, #36	; 0x24
   2c00a:	18fb      	adds	r3, r7, r3
   2c00c:	8812      	ldrh	r2, [r2, #0]
   2c00e:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
   2c010:	2324      	movs	r3, #36	; 0x24
   2c012:	18fb      	adds	r3, r7, r3
   2c014:	881b      	ldrh	r3, [r3, #0]
   2c016:	2b00      	cmp	r3, #0
   2c018:	d100      	bne.n	2c01c <create_name+0x1ec>
   2c01a:	e0c3      	b.n	2c1a4 <create_name+0x374>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   2c01c:	2324      	movs	r3, #36	; 0x24
   2c01e:	18fb      	adds	r3, r7, r3
   2c020:	881b      	ldrh	r3, [r3, #0]
   2c022:	2b20      	cmp	r3, #32
   2c024:	d008      	beq.n	2c038 <create_name+0x208>
   2c026:	2324      	movs	r3, #36	; 0x24
   2c028:	18fb      	adds	r3, r7, r3
   2c02a:	881b      	ldrh	r3, [r3, #0]
   2c02c:	2b2e      	cmp	r3, #46	; 0x2e
   2c02e:	d10c      	bne.n	2c04a <create_name+0x21a>
   2c030:	69ba      	ldr	r2, [r7, #24]
   2c032:	697b      	ldr	r3, [r7, #20]
   2c034:	429a      	cmp	r2, r3
   2c036:	d008      	beq.n	2c04a <create_name+0x21a>
			cf |= NS_LOSS | NS_LFN; continue;
   2c038:	2326      	movs	r3, #38	; 0x26
   2c03a:	18fb      	adds	r3, r7, r3
   2c03c:	2226      	movs	r2, #38	; 0x26
   2c03e:	18ba      	adds	r2, r7, r2
   2c040:	7812      	ldrb	r2, [r2, #0]
   2c042:	2103      	movs	r1, #3
   2c044:	430a      	orrs	r2, r1
   2c046:	701a      	strb	r2, [r3, #0]
   2c048:	e0ab      	b.n	2c1a2 <create_name+0x372>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
   2c04a:	6a3a      	ldr	r2, [r7, #32]
   2c04c:	69fb      	ldr	r3, [r7, #28]
   2c04e:	429a      	cmp	r2, r3
   2c050:	d203      	bcs.n	2c05a <create_name+0x22a>
   2c052:	69ba      	ldr	r2, [r7, #24]
   2c054:	697b      	ldr	r3, [r7, #20]
   2c056:	429a      	cmp	r2, r3
   2c058:	d12a      	bne.n	2c0b0 <create_name+0x280>
			if (ni == 11) {				/* Long extension */
   2c05a:	69fb      	ldr	r3, [r7, #28]
   2c05c:	2b0b      	cmp	r3, #11
   2c05e:	d108      	bne.n	2c072 <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
   2c060:	2326      	movs	r3, #38	; 0x26
   2c062:	18fb      	adds	r3, r7, r3
   2c064:	2226      	movs	r2, #38	; 0x26
   2c066:	18ba      	adds	r2, r7, r2
   2c068:	7812      	ldrb	r2, [r2, #0]
   2c06a:	2103      	movs	r1, #3
   2c06c:	430a      	orrs	r2, r1
   2c06e:	701a      	strb	r2, [r3, #0]
   2c070:	e0a9      	b.n	2c1c6 <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   2c072:	69ba      	ldr	r2, [r7, #24]
   2c074:	697b      	ldr	r3, [r7, #20]
   2c076:	429a      	cmp	r2, r3
   2c078:	d007      	beq.n	2c08a <create_name+0x25a>
   2c07a:	2326      	movs	r3, #38	; 0x26
   2c07c:	18fb      	adds	r3, r7, r3
   2c07e:	2226      	movs	r2, #38	; 0x26
   2c080:	18ba      	adds	r2, r7, r2
   2c082:	7812      	ldrb	r2, [r2, #0]
   2c084:	2103      	movs	r1, #3
   2c086:	430a      	orrs	r2, r1
   2c088:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
   2c08a:	69ba      	ldr	r2, [r7, #24]
   2c08c:	697b      	ldr	r3, [r7, #20]
   2c08e:	429a      	cmp	r2, r3
   2c090:	d900      	bls.n	2c094 <create_name+0x264>
   2c092:	e097      	b.n	2c1c4 <create_name+0x394>
			si = di; i = 8; ni = 11;	/* Enter extension section */
   2c094:	697b      	ldr	r3, [r7, #20]
   2c096:	61bb      	str	r3, [r7, #24]
   2c098:	2308      	movs	r3, #8
   2c09a:	623b      	str	r3, [r7, #32]
   2c09c:	230b      	movs	r3, #11
   2c09e:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
   2c0a0:	2327      	movs	r3, #39	; 0x27
   2c0a2:	18fb      	adds	r3, r7, r3
   2c0a4:	2227      	movs	r2, #39	; 0x27
   2c0a6:	18ba      	adds	r2, r7, r2
   2c0a8:	7812      	ldrb	r2, [r2, #0]
   2c0aa:	0092      	lsls	r2, r2, #2
   2c0ac:	701a      	strb	r2, [r3, #0]
   2c0ae:	e078      	b.n	2c1a2 <create_name+0x372>
		}

		if (w >= 0x80) {				/* Non ASCII char */
   2c0b0:	2324      	movs	r3, #36	; 0x24
   2c0b2:	18fb      	adds	r3, r7, r3
   2c0b4:	881b      	ldrh	r3, [r3, #0]
   2c0b6:	2b7f      	cmp	r3, #127	; 0x7f
   2c0b8:	d920      	bls.n	2c0fc <create_name+0x2cc>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   2c0ba:	2324      	movs	r3, #36	; 0x24
   2c0bc:	18fc      	adds	r4, r7, r3
   2c0be:	2324      	movs	r3, #36	; 0x24
   2c0c0:	18fb      	adds	r3, r7, r3
   2c0c2:	881b      	ldrh	r3, [r3, #0]
   2c0c4:	2100      	movs	r1, #0
   2c0c6:	0018      	movs	r0, r3
   2c0c8:	4b37      	ldr	r3, [pc, #220]	; (2c1a8 <create_name+0x378>)
   2c0ca:	4798      	blx	r3
   2c0cc:	0003      	movs	r3, r0
   2c0ce:	8023      	strh	r3, [r4, #0]
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   2c0d0:	2324      	movs	r3, #36	; 0x24
   2c0d2:	18fb      	adds	r3, r7, r3
   2c0d4:	881b      	ldrh	r3, [r3, #0]
   2c0d6:	2b00      	cmp	r3, #0
   2c0d8:	d008      	beq.n	2c0ec <create_name+0x2bc>
   2c0da:	2324      	movs	r3, #36	; 0x24
   2c0dc:	18fb      	adds	r3, r7, r3
   2c0de:	881b      	ldrh	r3, [r3, #0]
   2c0e0:	3b80      	subs	r3, #128	; 0x80
   2c0e2:	4a36      	ldr	r2, [pc, #216]	; (2c1bc <create_name+0x38c>)
   2c0e4:	5cd2      	ldrb	r2, [r2, r3]
   2c0e6:	2324      	movs	r3, #36	; 0x24
   2c0e8:	18fb      	adds	r3, r7, r3
   2c0ea:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
   2c0ec:	2326      	movs	r3, #38	; 0x26
   2c0ee:	18fb      	adds	r3, r7, r3
   2c0f0:	2226      	movs	r2, #38	; 0x26
   2c0f2:	18ba      	adds	r2, r7, r2
   2c0f4:	7812      	ldrb	r2, [r2, #0]
   2c0f6:	2102      	movs	r1, #2
   2c0f8:	430a      	orrs	r2, r1
   2c0fa:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   2c0fc:	2324      	movs	r3, #36	; 0x24
   2c0fe:	18fb      	adds	r3, r7, r3
   2c100:	881b      	ldrh	r3, [r3, #0]
   2c102:	2b00      	cmp	r3, #0
   2c104:	d009      	beq.n	2c11a <create_name+0x2ea>
   2c106:	2324      	movs	r3, #36	; 0x24
   2c108:	18fb      	adds	r3, r7, r3
   2c10a:	881a      	ldrh	r2, [r3, #0]
   2c10c:	4b2c      	ldr	r3, [pc, #176]	; (2c1c0 <create_name+0x390>)
   2c10e:	0011      	movs	r1, r2
   2c110:	0018      	movs	r0, r3
   2c112:	4b27      	ldr	r3, [pc, #156]	; (2c1b0 <create_name+0x380>)
   2c114:	4798      	blx	r3
   2c116:	1e03      	subs	r3, r0, #0
   2c118:	d00c      	beq.n	2c134 <create_name+0x304>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   2c11a:	2324      	movs	r3, #36	; 0x24
   2c11c:	18fb      	adds	r3, r7, r3
   2c11e:	225f      	movs	r2, #95	; 0x5f
   2c120:	801a      	strh	r2, [r3, #0]
   2c122:	2326      	movs	r3, #38	; 0x26
   2c124:	18fb      	adds	r3, r7, r3
   2c126:	2226      	movs	r2, #38	; 0x26
   2c128:	18ba      	adds	r2, r7, r2
   2c12a:	7812      	ldrb	r2, [r2, #0]
   2c12c:	2103      	movs	r1, #3
   2c12e:	430a      	orrs	r2, r1
   2c130:	701a      	strb	r2, [r3, #0]
   2c132:	e02b      	b.n	2c18c <create_name+0x35c>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
   2c134:	2324      	movs	r3, #36	; 0x24
   2c136:	18fb      	adds	r3, r7, r3
   2c138:	881b      	ldrh	r3, [r3, #0]
   2c13a:	2b40      	cmp	r3, #64	; 0x40
   2c13c:	d90d      	bls.n	2c15a <create_name+0x32a>
   2c13e:	2324      	movs	r3, #36	; 0x24
   2c140:	18fb      	adds	r3, r7, r3
   2c142:	881b      	ldrh	r3, [r3, #0]
   2c144:	2b5a      	cmp	r3, #90	; 0x5a
   2c146:	d808      	bhi.n	2c15a <create_name+0x32a>
					b |= 2;
   2c148:	2327      	movs	r3, #39	; 0x27
   2c14a:	18fb      	adds	r3, r7, r3
   2c14c:	2227      	movs	r2, #39	; 0x27
   2c14e:	18ba      	adds	r2, r7, r2
   2c150:	7812      	ldrb	r2, [r2, #0]
   2c152:	2102      	movs	r1, #2
   2c154:	430a      	orrs	r2, r1
   2c156:	701a      	strb	r2, [r3, #0]
   2c158:	e018      	b.n	2c18c <create_name+0x35c>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
   2c15a:	2324      	movs	r3, #36	; 0x24
   2c15c:	18fb      	adds	r3, r7, r3
   2c15e:	881b      	ldrh	r3, [r3, #0]
   2c160:	2b60      	cmp	r3, #96	; 0x60
   2c162:	d913      	bls.n	2c18c <create_name+0x35c>
   2c164:	2324      	movs	r3, #36	; 0x24
   2c166:	18fb      	adds	r3, r7, r3
   2c168:	881b      	ldrh	r3, [r3, #0]
   2c16a:	2b7a      	cmp	r3, #122	; 0x7a
   2c16c:	d80e      	bhi.n	2c18c <create_name+0x35c>
						b |= 1; w -= 0x20;
   2c16e:	2327      	movs	r3, #39	; 0x27
   2c170:	18fb      	adds	r3, r7, r3
   2c172:	2227      	movs	r2, #39	; 0x27
   2c174:	18ba      	adds	r2, r7, r2
   2c176:	7812      	ldrb	r2, [r2, #0]
   2c178:	2101      	movs	r1, #1
   2c17a:	430a      	orrs	r2, r1
   2c17c:	701a      	strb	r2, [r3, #0]
   2c17e:	2324      	movs	r3, #36	; 0x24
   2c180:	18fb      	adds	r3, r7, r3
   2c182:	2224      	movs	r2, #36	; 0x24
   2c184:	18ba      	adds	r2, r7, r2
   2c186:	8812      	ldrh	r2, [r2, #0]
   2c188:	3a20      	subs	r2, #32
   2c18a:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
   2c18c:	687b      	ldr	r3, [r7, #4]
   2c18e:	699a      	ldr	r2, [r3, #24]
   2c190:	6a3b      	ldr	r3, [r7, #32]
   2c192:	1c59      	adds	r1, r3, #1
   2c194:	6239      	str	r1, [r7, #32]
   2c196:	18d3      	adds	r3, r2, r3
   2c198:	2224      	movs	r2, #36	; 0x24
   2c19a:	18ba      	adds	r2, r7, r2
   2c19c:	8812      	ldrh	r2, [r2, #0]
   2c19e:	b2d2      	uxtb	r2, r2
   2c1a0:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
   2c1a2:	e72b      	b.n	2bffc <create_name+0x1cc>
		if (!w) break;					/* Break on end of the LFN */
   2c1a4:	46c0      	nop			; (mov r8, r8)
   2c1a6:	e00e      	b.n	2c1c6 <create_name+0x396>
   2c1a8:	0002d569 	.word	0x0002d569
   2c1ac:	00039068 	.word	0x00039068
   2c1b0:	0002a9d3 	.word	0x0002a9d3
   2c1b4:	7fffffff 	.word	0x7fffffff
   2c1b8:	0002a959 	.word	0x0002a959
   2c1bc:	000390b0 	.word	0x000390b0
   2c1c0:	00039074 	.word	0x00039074
			if (si > di) break;			/* No extension */
   2c1c4:	46c0      	nop			; (mov r8, r8)
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   2c1c6:	687b      	ldr	r3, [r7, #4]
   2c1c8:	699b      	ldr	r3, [r3, #24]
   2c1ca:	781b      	ldrb	r3, [r3, #0]
   2c1cc:	2be5      	cmp	r3, #229	; 0xe5
   2c1ce:	d103      	bne.n	2c1d8 <create_name+0x3a8>
   2c1d0:	687b      	ldr	r3, [r7, #4]
   2c1d2:	699b      	ldr	r3, [r3, #24]
   2c1d4:	2205      	movs	r2, #5
   2c1d6:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
   2c1d8:	69fb      	ldr	r3, [r7, #28]
   2c1da:	2b08      	cmp	r3, #8
   2c1dc:	d106      	bne.n	2c1ec <create_name+0x3bc>
   2c1de:	2327      	movs	r3, #39	; 0x27
   2c1e0:	18fb      	adds	r3, r7, r3
   2c1e2:	2227      	movs	r2, #39	; 0x27
   2c1e4:	18ba      	adds	r2, r7, r2
   2c1e6:	7812      	ldrb	r2, [r2, #0]
   2c1e8:	0092      	lsls	r2, r2, #2
   2c1ea:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   2c1ec:	2327      	movs	r3, #39	; 0x27
   2c1ee:	18fb      	adds	r3, r7, r3
   2c1f0:	781b      	ldrb	r3, [r3, #0]
   2c1f2:	220c      	movs	r2, #12
   2c1f4:	4013      	ands	r3, r2
   2c1f6:	2b0c      	cmp	r3, #12
   2c1f8:	d006      	beq.n	2c208 <create_name+0x3d8>
   2c1fa:	2327      	movs	r3, #39	; 0x27
   2c1fc:	18fb      	adds	r3, r7, r3
   2c1fe:	781b      	ldrb	r3, [r3, #0]
   2c200:	2203      	movs	r2, #3
   2c202:	4013      	ands	r3, r2
   2c204:	2b03      	cmp	r3, #3
   2c206:	d107      	bne.n	2c218 <create_name+0x3e8>
		cf |= NS_LFN;
   2c208:	2326      	movs	r3, #38	; 0x26
   2c20a:	18fb      	adds	r3, r7, r3
   2c20c:	2226      	movs	r2, #38	; 0x26
   2c20e:	18ba      	adds	r2, r7, r2
   2c210:	7812      	ldrb	r2, [r2, #0]
   2c212:	2102      	movs	r1, #2
   2c214:	430a      	orrs	r2, r1
   2c216:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   2c218:	2326      	movs	r3, #38	; 0x26
   2c21a:	18fb      	adds	r3, r7, r3
   2c21c:	781b      	ldrb	r3, [r3, #0]
   2c21e:	2202      	movs	r2, #2
   2c220:	4013      	ands	r3, r2
   2c222:	d11d      	bne.n	2c260 <create_name+0x430>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   2c224:	2327      	movs	r3, #39	; 0x27
   2c226:	18fb      	adds	r3, r7, r3
   2c228:	781b      	ldrb	r3, [r3, #0]
   2c22a:	2203      	movs	r2, #3
   2c22c:	4013      	ands	r3, r2
   2c22e:	2b01      	cmp	r3, #1
   2c230:	d107      	bne.n	2c242 <create_name+0x412>
   2c232:	2326      	movs	r3, #38	; 0x26
   2c234:	18fb      	adds	r3, r7, r3
   2c236:	2226      	movs	r2, #38	; 0x26
   2c238:	18ba      	adds	r2, r7, r2
   2c23a:	7812      	ldrb	r2, [r2, #0]
   2c23c:	2110      	movs	r1, #16
   2c23e:	430a      	orrs	r2, r1
   2c240:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   2c242:	2327      	movs	r3, #39	; 0x27
   2c244:	18fb      	adds	r3, r7, r3
   2c246:	781b      	ldrb	r3, [r3, #0]
   2c248:	220c      	movs	r2, #12
   2c24a:	4013      	ands	r3, r2
   2c24c:	2b04      	cmp	r3, #4
   2c24e:	d107      	bne.n	2c260 <create_name+0x430>
   2c250:	2326      	movs	r3, #38	; 0x26
   2c252:	18fb      	adds	r3, r7, r3
   2c254:	2226      	movs	r2, #38	; 0x26
   2c256:	18ba      	adds	r2, r7, r2
   2c258:	7812      	ldrb	r2, [r2, #0]
   2c25a:	2108      	movs	r1, #8
   2c25c:	430a      	orrs	r2, r1
   2c25e:	701a      	strb	r2, [r3, #0]
	}

	dj->fn[NS] = cf;	/* SFN is created */
   2c260:	687b      	ldr	r3, [r7, #4]
   2c262:	699b      	ldr	r3, [r3, #24]
   2c264:	330b      	adds	r3, #11
   2c266:	2226      	movs	r2, #38	; 0x26
   2c268:	18ba      	adds	r2, r7, r2
   2c26a:	7812      	ldrb	r2, [r2, #0]
   2c26c:	701a      	strb	r2, [r3, #0]

	return FR_OK;
   2c26e:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
   2c270:	0018      	movs	r0, r3
   2c272:	46bd      	mov	sp, r7
   2c274:	b00b      	add	sp, #44	; 0x2c
   2c276:	bd90      	pop	{r4, r7, pc}

0002c278 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
   2c278:	b590      	push	{r4, r7, lr}
   2c27a:	b085      	sub	sp, #20
   2c27c:	af00      	add	r7, sp, #0
   2c27e:	6078      	str	r0, [r7, #4]
   2c280:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   2c282:	683b      	ldr	r3, [r7, #0]
   2c284:	781b      	ldrb	r3, [r3, #0]
   2c286:	2b2f      	cmp	r3, #47	; 0x2f
   2c288:	d003      	beq.n	2c292 <follow_path+0x1a>
   2c28a:	683b      	ldr	r3, [r7, #0]
   2c28c:	781b      	ldrb	r3, [r3, #0]
   2c28e:	2b5c      	cmp	r3, #92	; 0x5c
   2c290:	d102      	bne.n	2c298 <follow_path+0x20>
		path++;
   2c292:	683b      	ldr	r3, [r7, #0]
   2c294:	3301      	adds	r3, #1
   2c296:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
   2c298:	687b      	ldr	r3, [r7, #4]
   2c29a:	2200      	movs	r2, #0
   2c29c:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   2c29e:	683b      	ldr	r3, [r7, #0]
   2c2a0:	781b      	ldrb	r3, [r3, #0]
   2c2a2:	2b1f      	cmp	r3, #31
   2c2a4:	d80c      	bhi.n	2c2c0 <follow_path+0x48>
		res = dir_sdi(dj, 0);
   2c2a6:	230f      	movs	r3, #15
   2c2a8:	18fc      	adds	r4, r7, r3
   2c2aa:	687b      	ldr	r3, [r7, #4]
   2c2ac:	2100      	movs	r1, #0
   2c2ae:	0018      	movs	r0, r3
   2c2b0:	4b3c      	ldr	r3, [pc, #240]	; (2c3a4 <follow_path+0x12c>)
   2c2b2:	4798      	blx	r3
   2c2b4:	0003      	movs	r3, r0
   2c2b6:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
   2c2b8:	687b      	ldr	r3, [r7, #4]
   2c2ba:	2200      	movs	r2, #0
   2c2bc:	615a      	str	r2, [r3, #20]
   2c2be:	e06a      	b.n	2c396 <follow_path+0x11e>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
   2c2c0:	230f      	movs	r3, #15
   2c2c2:	18fc      	adds	r4, r7, r3
   2c2c4:	003a      	movs	r2, r7
   2c2c6:	687b      	ldr	r3, [r7, #4]
   2c2c8:	0011      	movs	r1, r2
   2c2ca:	0018      	movs	r0, r3
   2c2cc:	4b36      	ldr	r3, [pc, #216]	; (2c3a8 <follow_path+0x130>)
   2c2ce:	4798      	blx	r3
   2c2d0:	0003      	movs	r3, r0
   2c2d2:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2c2d4:	230f      	movs	r3, #15
   2c2d6:	18fb      	adds	r3, r7, r3
   2c2d8:	781b      	ldrb	r3, [r3, #0]
   2c2da:	2b00      	cmp	r3, #0
   2c2dc:	d154      	bne.n	2c388 <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
   2c2de:	230f      	movs	r3, #15
   2c2e0:	18fc      	adds	r4, r7, r3
   2c2e2:	687b      	ldr	r3, [r7, #4]
   2c2e4:	0018      	movs	r0, r3
   2c2e6:	4b31      	ldr	r3, [pc, #196]	; (2c3ac <follow_path+0x134>)
   2c2e8:	4798      	blx	r3
   2c2ea:	0003      	movs	r3, r0
   2c2ec:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
   2c2ee:	687b      	ldr	r3, [r7, #4]
   2c2f0:	699a      	ldr	r2, [r3, #24]
   2c2f2:	230e      	movs	r3, #14
   2c2f4:	18fb      	adds	r3, r7, r3
   2c2f6:	7ad2      	ldrb	r2, [r2, #11]
   2c2f8:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
   2c2fa:	230f      	movs	r3, #15
   2c2fc:	18fb      	adds	r3, r7, r3
   2c2fe:	781b      	ldrb	r3, [r3, #0]
   2c300:	2b00      	cmp	r3, #0
   2c302:	d00f      	beq.n	2c324 <follow_path+0xac>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2c304:	230f      	movs	r3, #15
   2c306:	18fb      	adds	r3, r7, r3
   2c308:	781b      	ldrb	r3, [r3, #0]
   2c30a:	2b04      	cmp	r3, #4
   2c30c:	d13e      	bne.n	2c38c <follow_path+0x114>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   2c30e:	230e      	movs	r3, #14
   2c310:	18fb      	adds	r3, r7, r3
   2c312:	781b      	ldrb	r3, [r3, #0]
   2c314:	2204      	movs	r2, #4
   2c316:	4013      	ands	r3, r2
   2c318:	d13a      	bne.n	2c390 <follow_path+0x118>
   2c31a:	230f      	movs	r3, #15
   2c31c:	18fb      	adds	r3, r7, r3
   2c31e:	2205      	movs	r2, #5
   2c320:	701a      	strb	r2, [r3, #0]
				}
				break;
   2c322:	e035      	b.n	2c390 <follow_path+0x118>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2c324:	230e      	movs	r3, #14
   2c326:	18fb      	adds	r3, r7, r3
   2c328:	781b      	ldrb	r3, [r3, #0]
   2c32a:	2204      	movs	r2, #4
   2c32c:	4013      	ands	r3, r2
   2c32e:	d131      	bne.n	2c394 <follow_path+0x11c>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   2c330:	687b      	ldr	r3, [r7, #4]
   2c332:	695b      	ldr	r3, [r3, #20]
   2c334:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   2c336:	68bb      	ldr	r3, [r7, #8]
   2c338:	330b      	adds	r3, #11
   2c33a:	781b      	ldrb	r3, [r3, #0]
   2c33c:	001a      	movs	r2, r3
   2c33e:	2310      	movs	r3, #16
   2c340:	4013      	ands	r3, r2
   2c342:	d104      	bne.n	2c34e <follow_path+0xd6>
				res = FR_NO_PATH; break;
   2c344:	230f      	movs	r3, #15
   2c346:	18fb      	adds	r3, r7, r3
   2c348:	2205      	movs	r2, #5
   2c34a:	701a      	strb	r2, [r3, #0]
   2c34c:	e023      	b.n	2c396 <follow_path+0x11e>
			}
			dj->sclust = LD_CLUST(dir);
   2c34e:	68bb      	ldr	r3, [r7, #8]
   2c350:	3315      	adds	r3, #21
   2c352:	781b      	ldrb	r3, [r3, #0]
   2c354:	021b      	lsls	r3, r3, #8
   2c356:	b21a      	sxth	r2, r3
   2c358:	68bb      	ldr	r3, [r7, #8]
   2c35a:	3314      	adds	r3, #20
   2c35c:	781b      	ldrb	r3, [r3, #0]
   2c35e:	b21b      	sxth	r3, r3
   2c360:	4313      	orrs	r3, r2
   2c362:	b21b      	sxth	r3, r3
   2c364:	b29b      	uxth	r3, r3
   2c366:	041b      	lsls	r3, r3, #16
   2c368:	68ba      	ldr	r2, [r7, #8]
   2c36a:	321b      	adds	r2, #27
   2c36c:	7812      	ldrb	r2, [r2, #0]
   2c36e:	0212      	lsls	r2, r2, #8
   2c370:	b211      	sxth	r1, r2
   2c372:	68ba      	ldr	r2, [r7, #8]
   2c374:	321a      	adds	r2, #26
   2c376:	7812      	ldrb	r2, [r2, #0]
   2c378:	b212      	sxth	r2, r2
   2c37a:	430a      	orrs	r2, r1
   2c37c:	b212      	sxth	r2, r2
   2c37e:	b292      	uxth	r2, r2
   2c380:	431a      	orrs	r2, r3
   2c382:	687b      	ldr	r3, [r7, #4]
   2c384:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
   2c386:	e79b      	b.n	2c2c0 <follow_path+0x48>
			if (res != FR_OK) break;
   2c388:	46c0      	nop			; (mov r8, r8)
   2c38a:	e004      	b.n	2c396 <follow_path+0x11e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2c38c:	46c0      	nop			; (mov r8, r8)
   2c38e:	e002      	b.n	2c396 <follow_path+0x11e>
				break;
   2c390:	46c0      	nop			; (mov r8, r8)
   2c392:	e000      	b.n	2c396 <follow_path+0x11e>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2c394:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2c396:	230f      	movs	r3, #15
   2c398:	18fb      	adds	r3, r7, r3
   2c39a:	781b      	ldrb	r3, [r3, #0]
}
   2c39c:	0018      	movs	r0, r3
   2c39e:	46bd      	mov	sp, r7
   2c3a0:	b005      	add	sp, #20
   2c3a2:	bd90      	pop	{r4, r7, pc}
   2c3a4:	0002b249 	.word	0x0002b249
   2c3a8:	0002be31 	.word	0x0002be31
   2c3ac:	0002b8cd 	.word	0x0002b8cd

0002c3b0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
   2c3b0:	b590      	push	{r4, r7, lr}
   2c3b2:	b083      	sub	sp, #12
   2c3b4:	af00      	add	r7, sp, #0
   2c3b6:	6078      	str	r0, [r7, #4]
   2c3b8:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   2c3ba:	687b      	ldr	r3, [r7, #4]
   2c3bc:	7858      	ldrb	r0, [r3, #1]
   2c3be:	687b      	ldr	r3, [r7, #4]
   2c3c0:	3330      	adds	r3, #48	; 0x30
   2c3c2:	0019      	movs	r1, r3
   2c3c4:	683a      	ldr	r2, [r7, #0]
   2c3c6:	2301      	movs	r3, #1
   2c3c8:	4c2a      	ldr	r4, [pc, #168]	; (2c474 <check_fs+0xc4>)
   2c3ca:	47a0      	blx	r4
   2c3cc:	1e03      	subs	r3, r0, #0
   2c3ce:	d001      	beq.n	2c3d4 <check_fs+0x24>
		return 3;
   2c3d0:	2303      	movs	r3, #3
   2c3d2:	e04b      	b.n	2c46c <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   2c3d4:	687b      	ldr	r3, [r7, #4]
   2c3d6:	4a28      	ldr	r2, [pc, #160]	; (2c478 <check_fs+0xc8>)
   2c3d8:	4694      	mov	ip, r2
   2c3da:	4463      	add	r3, ip
   2c3dc:	3301      	adds	r3, #1
   2c3de:	781b      	ldrb	r3, [r3, #0]
   2c3e0:	021b      	lsls	r3, r3, #8
   2c3e2:	b21a      	sxth	r2, r3
   2c3e4:	687b      	ldr	r3, [r7, #4]
   2c3e6:	4924      	ldr	r1, [pc, #144]	; (2c478 <check_fs+0xc8>)
   2c3e8:	5c5b      	ldrb	r3, [r3, r1]
   2c3ea:	b21b      	sxth	r3, r3
   2c3ec:	4313      	orrs	r3, r2
   2c3ee:	b21b      	sxth	r3, r3
   2c3f0:	4a22      	ldr	r2, [pc, #136]	; (2c47c <check_fs+0xcc>)
   2c3f2:	4293      	cmp	r3, r2
   2c3f4:	d001      	beq.n	2c3fa <check_fs+0x4a>
		return 2;
   2c3f6:	2302      	movs	r3, #2
   2c3f8:	e038      	b.n	2c46c <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   2c3fa:	687b      	ldr	r3, [r7, #4]
   2c3fc:	3366      	adds	r3, #102	; 0x66
   2c3fe:	3303      	adds	r3, #3
   2c400:	781b      	ldrb	r3, [r3, #0]
   2c402:	061a      	lsls	r2, r3, #24
   2c404:	687b      	ldr	r3, [r7, #4]
   2c406:	3366      	adds	r3, #102	; 0x66
   2c408:	3302      	adds	r3, #2
   2c40a:	781b      	ldrb	r3, [r3, #0]
   2c40c:	041b      	lsls	r3, r3, #16
   2c40e:	4313      	orrs	r3, r2
   2c410:	687a      	ldr	r2, [r7, #4]
   2c412:	3266      	adds	r2, #102	; 0x66
   2c414:	3201      	adds	r2, #1
   2c416:	7812      	ldrb	r2, [r2, #0]
   2c418:	0212      	lsls	r2, r2, #8
   2c41a:	4313      	orrs	r3, r2
   2c41c:	687a      	ldr	r2, [r7, #4]
   2c41e:	2166      	movs	r1, #102	; 0x66
   2c420:	5c52      	ldrb	r2, [r2, r1]
   2c422:	4313      	orrs	r3, r2
   2c424:	021b      	lsls	r3, r3, #8
   2c426:	0a1b      	lsrs	r3, r3, #8
   2c428:	4a15      	ldr	r2, [pc, #84]	; (2c480 <check_fs+0xd0>)
   2c42a:	4293      	cmp	r3, r2
   2c42c:	d101      	bne.n	2c432 <check_fs+0x82>
		return 0;
   2c42e:	2300      	movs	r3, #0
   2c430:	e01c      	b.n	2c46c <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   2c432:	687b      	ldr	r3, [r7, #4]
   2c434:	3382      	adds	r3, #130	; 0x82
   2c436:	3303      	adds	r3, #3
   2c438:	781b      	ldrb	r3, [r3, #0]
   2c43a:	061a      	lsls	r2, r3, #24
   2c43c:	687b      	ldr	r3, [r7, #4]
   2c43e:	3382      	adds	r3, #130	; 0x82
   2c440:	3302      	adds	r3, #2
   2c442:	781b      	ldrb	r3, [r3, #0]
   2c444:	041b      	lsls	r3, r3, #16
   2c446:	4313      	orrs	r3, r2
   2c448:	687a      	ldr	r2, [r7, #4]
   2c44a:	3282      	adds	r2, #130	; 0x82
   2c44c:	3201      	adds	r2, #1
   2c44e:	7812      	ldrb	r2, [r2, #0]
   2c450:	0212      	lsls	r2, r2, #8
   2c452:	4313      	orrs	r3, r2
   2c454:	687a      	ldr	r2, [r7, #4]
   2c456:	2182      	movs	r1, #130	; 0x82
   2c458:	5c52      	ldrb	r2, [r2, r1]
   2c45a:	4313      	orrs	r3, r2
   2c45c:	021b      	lsls	r3, r3, #8
   2c45e:	0a1b      	lsrs	r3, r3, #8
   2c460:	4a07      	ldr	r2, [pc, #28]	; (2c480 <check_fs+0xd0>)
   2c462:	4293      	cmp	r3, r2
   2c464:	d101      	bne.n	2c46a <check_fs+0xba>
		return 0;
   2c466:	2300      	movs	r3, #0
   2c468:	e000      	b.n	2c46c <check_fs+0xbc>

	return 1;
   2c46a:	2301      	movs	r3, #1
}
   2c46c:	0018      	movs	r0, r3
   2c46e:	46bd      	mov	sp, r7
   2c470:	b003      	add	sp, #12
   2c472:	bd90      	pop	{r4, r7, pc}
   2c474:	0002a619 	.word	0x0002a619
   2c478:	0000022e 	.word	0x0000022e
   2c47c:	ffffaa55 	.word	0xffffaa55
   2c480:	00544146 	.word	0x00544146

0002c484 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
   2c484:	b590      	push	{r4, r7, lr}
   2c486:	b093      	sub	sp, #76	; 0x4c
   2c488:	af00      	add	r7, sp, #0
   2c48a:	60f8      	str	r0, [r7, #12]
   2c48c:	60b9      	str	r1, [r7, #8]
   2c48e:	1dfb      	adds	r3, r7, #7
   2c490:	701a      	strb	r2, [r3, #0]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
   2c492:	68fb      	ldr	r3, [r7, #12]
   2c494:	681b      	ldr	r3, [r3, #0]
   2c496:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
   2c498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2c49a:	781b      	ldrb	r3, [r3, #0]
   2c49c:	3b30      	subs	r3, #48	; 0x30
   2c49e:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   2c4a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2c4a2:	2b09      	cmp	r3, #9
   2c4a4:	d80b      	bhi.n	2c4be <chk_mounted+0x3a>
   2c4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2c4a8:	3301      	adds	r3, #1
   2c4aa:	781b      	ldrb	r3, [r3, #0]
   2c4ac:	2b3a      	cmp	r3, #58	; 0x3a
   2c4ae:	d106      	bne.n	2c4be <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
   2c4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2c4b2:	3302      	adds	r3, #2
   2c4b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   2c4b6:	68fb      	ldr	r3, [r7, #12]
   2c4b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2c4ba:	601a      	str	r2, [r3, #0]
   2c4bc:	e001      	b.n	2c4c2 <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
   2c4be:	2300      	movs	r3, #0
   2c4c0:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   2c4c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2c4c4:	2b07      	cmp	r3, #7
   2c4c6:	d901      	bls.n	2c4cc <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
   2c4c8:	230b      	movs	r3, #11
   2c4ca:	e2af      	b.n	2ca2c <chk_mounted+0x5a8>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   2c4cc:	4bc5      	ldr	r3, [pc, #788]	; (2c7e4 <chk_mounted+0x360>)
   2c4ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2c4d0:	0092      	lsls	r2, r2, #2
   2c4d2:	58d3      	ldr	r3, [r2, r3]
   2c4d4:	62bb      	str	r3, [r7, #40]	; 0x28
   2c4d6:	68bb      	ldr	r3, [r7, #8]
   2c4d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c4da:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   2c4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c4de:	2b00      	cmp	r3, #0
   2c4e0:	d101      	bne.n	2c4e6 <chk_mounted+0x62>
   2c4e2:	230c      	movs	r3, #12
   2c4e4:	e2a2      	b.n	2ca2c <chk_mounted+0x5a8>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
   2c4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c4e8:	781b      	ldrb	r3, [r3, #0]
   2c4ea:	2b00      	cmp	r3, #0
   2c4ec:	d01c      	beq.n	2c528 <chk_mounted+0xa4>
		stat = disk_status(fs->drv);
   2c4ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c4f0:	785b      	ldrb	r3, [r3, #1]
   2c4f2:	2227      	movs	r2, #39	; 0x27
   2c4f4:	18bc      	adds	r4, r7, r2
   2c4f6:	0018      	movs	r0, r3
   2c4f8:	4bbb      	ldr	r3, [pc, #748]	; (2c7e8 <chk_mounted+0x364>)
   2c4fa:	4798      	blx	r3
   2c4fc:	0003      	movs	r3, r0
   2c4fe:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   2c500:	2327      	movs	r3, #39	; 0x27
   2c502:	18fb      	adds	r3, r7, r3
   2c504:	781b      	ldrb	r3, [r3, #0]
   2c506:	2201      	movs	r2, #1
   2c508:	4013      	ands	r3, r2
   2c50a:	d10d      	bne.n	2c528 <chk_mounted+0xa4>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   2c50c:	1dfb      	adds	r3, r7, #7
   2c50e:	781b      	ldrb	r3, [r3, #0]
   2c510:	2b00      	cmp	r3, #0
   2c512:	d007      	beq.n	2c524 <chk_mounted+0xa0>
   2c514:	2327      	movs	r3, #39	; 0x27
   2c516:	18fb      	adds	r3, r7, r3
   2c518:	781b      	ldrb	r3, [r3, #0]
   2c51a:	2204      	movs	r2, #4
   2c51c:	4013      	ands	r3, r2
   2c51e:	d001      	beq.n	2c524 <chk_mounted+0xa0>
				return FR_WRITE_PROTECTED;
   2c520:	230a      	movs	r3, #10
   2c522:	e283      	b.n	2ca2c <chk_mounted+0x5a8>
			return FR_OK;				/* The file system object is valid */
   2c524:	2300      	movs	r3, #0
   2c526:	e281      	b.n	2ca2c <chk_mounted+0x5a8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
   2c528:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c52a:	2200      	movs	r2, #0
   2c52c:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   2c52e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2c530:	b2da      	uxtb	r2, r3
   2c532:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c534:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   2c536:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c538:	785b      	ldrb	r3, [r3, #1]
   2c53a:	2227      	movs	r2, #39	; 0x27
   2c53c:	18bc      	adds	r4, r7, r2
   2c53e:	0018      	movs	r0, r3
   2c540:	4baa      	ldr	r3, [pc, #680]	; (2c7ec <chk_mounted+0x368>)
   2c542:	4798      	blx	r3
   2c544:	0003      	movs	r3, r0
   2c546:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   2c548:	2327      	movs	r3, #39	; 0x27
   2c54a:	18fb      	adds	r3, r7, r3
   2c54c:	781b      	ldrb	r3, [r3, #0]
   2c54e:	2201      	movs	r2, #1
   2c550:	4013      	ands	r3, r2
   2c552:	d001      	beq.n	2c558 <chk_mounted+0xd4>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   2c554:	2303      	movs	r3, #3
   2c556:	e269      	b.n	2ca2c <chk_mounted+0x5a8>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   2c558:	1dfb      	adds	r3, r7, #7
   2c55a:	781b      	ldrb	r3, [r3, #0]
   2c55c:	2b00      	cmp	r3, #0
   2c55e:	d007      	beq.n	2c570 <chk_mounted+0xec>
   2c560:	2327      	movs	r3, #39	; 0x27
   2c562:	18fb      	adds	r3, r7, r3
   2c564:	781b      	ldrb	r3, [r3, #0]
   2c566:	2204      	movs	r2, #4
   2c568:	4013      	ands	r3, r2
   2c56a:	d001      	beq.n	2c570 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
   2c56c:	230a      	movs	r3, #10
   2c56e:	e25d      	b.n	2ca2c <chk_mounted+0x5a8>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   2c570:	2300      	movs	r3, #0
   2c572:	63fb      	str	r3, [r7, #60]	; 0x3c
   2c574:	2347      	movs	r3, #71	; 0x47
   2c576:	18fc      	adds	r4, r7, r3
   2c578:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2c57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c57c:	0011      	movs	r1, r2
   2c57e:	0018      	movs	r0, r3
   2c580:	4b9b      	ldr	r3, [pc, #620]	; (2c7f0 <chk_mounted+0x36c>)
   2c582:	4798      	blx	r3
   2c584:	0003      	movs	r3, r0
   2c586:	7023      	strb	r3, [r4, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   2c588:	2347      	movs	r3, #71	; 0x47
   2c58a:	18fb      	adds	r3, r7, r3
   2c58c:	781b      	ldrb	r3, [r3, #0]
   2c58e:	2b01      	cmp	r3, #1
   2c590:	d13b      	bne.n	2c60a <chk_mounted+0x186>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
   2c592:	2346      	movs	r3, #70	; 0x46
   2c594:	18fb      	adds	r3, r7, r3
   2c596:	2200      	movs	r2, #0
   2c598:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
   2c59a:	2346      	movs	r3, #70	; 0x46
   2c59c:	18fb      	adds	r3, r7, r3
   2c59e:	781b      	ldrb	r3, [r3, #0]
   2c5a0:	2b00      	cmp	r3, #0
   2c5a2:	d006      	beq.n	2c5b2 <chk_mounted+0x12e>
   2c5a4:	2346      	movs	r3, #70	; 0x46
   2c5a6:	18fb      	adds	r3, r7, r3
   2c5a8:	781a      	ldrb	r2, [r3, #0]
   2c5aa:	2346      	movs	r3, #70	; 0x46
   2c5ac:	18fb      	adds	r3, r7, r3
   2c5ae:	3a01      	subs	r2, #1
   2c5b0:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
   2c5b2:	2346      	movs	r3, #70	; 0x46
   2c5b4:	18fb      	adds	r3, r7, r3
   2c5b6:	781b      	ldrb	r3, [r3, #0]
   2c5b8:	011b      	lsls	r3, r3, #4
   2c5ba:	33bf      	adds	r3, #191	; 0xbf
   2c5bc:	33ff      	adds	r3, #255	; 0xff
   2c5be:	3330      	adds	r3, #48	; 0x30
   2c5c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c5c2:	18d3      	adds	r3, r2, r3
   2c5c4:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
   2c5c6:	6a3b      	ldr	r3, [r7, #32]
   2c5c8:	3304      	adds	r3, #4
   2c5ca:	781b      	ldrb	r3, [r3, #0]
   2c5cc:	2b00      	cmp	r3, #0
   2c5ce:	d01c      	beq.n	2c60a <chk_mounted+0x186>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   2c5d0:	6a3b      	ldr	r3, [r7, #32]
   2c5d2:	330b      	adds	r3, #11
   2c5d4:	781b      	ldrb	r3, [r3, #0]
   2c5d6:	061a      	lsls	r2, r3, #24
   2c5d8:	6a3b      	ldr	r3, [r7, #32]
   2c5da:	330a      	adds	r3, #10
   2c5dc:	781b      	ldrb	r3, [r3, #0]
   2c5de:	041b      	lsls	r3, r3, #16
   2c5e0:	4313      	orrs	r3, r2
   2c5e2:	6a3a      	ldr	r2, [r7, #32]
   2c5e4:	3209      	adds	r2, #9
   2c5e6:	7812      	ldrb	r2, [r2, #0]
   2c5e8:	0212      	lsls	r2, r2, #8
   2c5ea:	4313      	orrs	r3, r2
   2c5ec:	6a3a      	ldr	r2, [r7, #32]
   2c5ee:	3208      	adds	r2, #8
   2c5f0:	7812      	ldrb	r2, [r2, #0]
   2c5f2:	4313      	orrs	r3, r2
   2c5f4:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
   2c5f6:	2347      	movs	r3, #71	; 0x47
   2c5f8:	18fc      	adds	r4, r7, r3
   2c5fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2c5fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c5fe:	0011      	movs	r1, r2
   2c600:	0018      	movs	r0, r3
   2c602:	4b7b      	ldr	r3, [pc, #492]	; (2c7f0 <chk_mounted+0x36c>)
   2c604:	4798      	blx	r3
   2c606:	0003      	movs	r3, r0
   2c608:	7023      	strb	r3, [r4, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
   2c60a:	2347      	movs	r3, #71	; 0x47
   2c60c:	18fb      	adds	r3, r7, r3
   2c60e:	781b      	ldrb	r3, [r3, #0]
   2c610:	2b03      	cmp	r3, #3
   2c612:	d101      	bne.n	2c618 <chk_mounted+0x194>
   2c614:	2301      	movs	r3, #1
   2c616:	e209      	b.n	2ca2c <chk_mounted+0x5a8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   2c618:	2347      	movs	r3, #71	; 0x47
   2c61a:	18fb      	adds	r3, r7, r3
   2c61c:	781b      	ldrb	r3, [r3, #0]
   2c61e:	2b00      	cmp	r3, #0
   2c620:	d001      	beq.n	2c626 <chk_mounted+0x1a2>
   2c622:	230d      	movs	r3, #13
   2c624:	e202      	b.n	2ca2c <chk_mounted+0x5a8>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   2c626:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c628:	223c      	movs	r2, #60	; 0x3c
   2c62a:	5c9b      	ldrb	r3, [r3, r2]
   2c62c:	021b      	lsls	r3, r3, #8
   2c62e:	b21a      	sxth	r2, r3
   2c630:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c632:	213b      	movs	r1, #59	; 0x3b
   2c634:	5c5b      	ldrb	r3, [r3, r1]
   2c636:	b21b      	sxth	r3, r3
   2c638:	4313      	orrs	r3, r2
   2c63a:	b21a      	sxth	r2, r3
   2c63c:	2380      	movs	r3, #128	; 0x80
   2c63e:	009b      	lsls	r3, r3, #2
   2c640:	429a      	cmp	r2, r3
   2c642:	d001      	beq.n	2c648 <chk_mounted+0x1c4>
		return FR_NO_FILESYSTEM;
   2c644:	230d      	movs	r3, #13
   2c646:	e1f1      	b.n	2ca2c <chk_mounted+0x5a8>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   2c648:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c64a:	2247      	movs	r2, #71	; 0x47
   2c64c:	5c9b      	ldrb	r3, [r3, r2]
   2c64e:	021b      	lsls	r3, r3, #8
   2c650:	b21a      	sxth	r2, r3
   2c652:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c654:	2146      	movs	r1, #70	; 0x46
   2c656:	5c5b      	ldrb	r3, [r3, r1]
   2c658:	b21b      	sxth	r3, r3
   2c65a:	4313      	orrs	r3, r2
   2c65c:	b21b      	sxth	r3, r3
   2c65e:	b29b      	uxth	r3, r3
   2c660:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   2c662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2c664:	2b00      	cmp	r3, #0
   2c666:	d112      	bne.n	2c68e <chk_mounted+0x20a>
   2c668:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c66a:	2257      	movs	r2, #87	; 0x57
   2c66c:	5c9b      	ldrb	r3, [r3, r2]
   2c66e:	061a      	lsls	r2, r3, #24
   2c670:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c672:	2156      	movs	r1, #86	; 0x56
   2c674:	5c5b      	ldrb	r3, [r3, r1]
   2c676:	041b      	lsls	r3, r3, #16
   2c678:	4313      	orrs	r3, r2
   2c67a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c67c:	2155      	movs	r1, #85	; 0x55
   2c67e:	5c52      	ldrb	r2, [r2, r1]
   2c680:	0212      	lsls	r2, r2, #8
   2c682:	4313      	orrs	r3, r2
   2c684:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c686:	2154      	movs	r1, #84	; 0x54
   2c688:	5c52      	ldrb	r2, [r2, r1]
   2c68a:	4313      	orrs	r3, r2
   2c68c:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
   2c68e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c690:	6bba      	ldr	r2, [r7, #56]	; 0x38
   2c692:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   2c694:	231f      	movs	r3, #31
   2c696:	18fb      	adds	r3, r7, r3
   2c698:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c69a:	2140      	movs	r1, #64	; 0x40
   2c69c:	5c52      	ldrb	r2, [r2, r1]
   2c69e:	701a      	strb	r2, [r3, #0]
   2c6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c6a2:	221f      	movs	r2, #31
   2c6a4:	18ba      	adds	r2, r7, r2
   2c6a6:	7812      	ldrb	r2, [r2, #0]
   2c6a8:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   2c6aa:	231f      	movs	r3, #31
   2c6ac:	18fb      	adds	r3, r7, r3
   2c6ae:	781b      	ldrb	r3, [r3, #0]
   2c6b0:	2b01      	cmp	r3, #1
   2c6b2:	d006      	beq.n	2c6c2 <chk_mounted+0x23e>
   2c6b4:	231f      	movs	r3, #31
   2c6b6:	18fb      	adds	r3, r7, r3
   2c6b8:	781b      	ldrb	r3, [r3, #0]
   2c6ba:	2b02      	cmp	r3, #2
   2c6bc:	d001      	beq.n	2c6c2 <chk_mounted+0x23e>
   2c6be:	230d      	movs	r3, #13
   2c6c0:	e1b4      	b.n	2ca2c <chk_mounted+0x5a8>
	fasize *= b;										/* Number of sectors for FAT area */
   2c6c2:	231f      	movs	r3, #31
   2c6c4:	18fb      	adds	r3, r7, r3
   2c6c6:	781a      	ldrb	r2, [r3, #0]
   2c6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2c6ca:	4353      	muls	r3, r2
   2c6cc:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   2c6ce:	231f      	movs	r3, #31
   2c6d0:	18fb      	adds	r3, r7, r3
   2c6d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c6d4:	213d      	movs	r1, #61	; 0x3d
   2c6d6:	5c52      	ldrb	r2, [r2, r1]
   2c6d8:	701a      	strb	r2, [r3, #0]
   2c6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c6dc:	221f      	movs	r2, #31
   2c6de:	18ba      	adds	r2, r7, r2
   2c6e0:	7812      	ldrb	r2, [r2, #0]
   2c6e2:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   2c6e4:	231f      	movs	r3, #31
   2c6e6:	18fb      	adds	r3, r7, r3
   2c6e8:	781b      	ldrb	r3, [r3, #0]
   2c6ea:	2b00      	cmp	r3, #0
   2c6ec:	d008      	beq.n	2c700 <chk_mounted+0x27c>
   2c6ee:	231f      	movs	r3, #31
   2c6f0:	18fb      	adds	r3, r7, r3
   2c6f2:	781b      	ldrb	r3, [r3, #0]
   2c6f4:	221f      	movs	r2, #31
   2c6f6:	18ba      	adds	r2, r7, r2
   2c6f8:	7812      	ldrb	r2, [r2, #0]
   2c6fa:	3a01      	subs	r2, #1
   2c6fc:	4013      	ands	r3, r2
   2c6fe:	d001      	beq.n	2c704 <chk_mounted+0x280>
   2c700:	230d      	movs	r3, #13
   2c702:	e193      	b.n	2ca2c <chk_mounted+0x5a8>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   2c704:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c706:	2242      	movs	r2, #66	; 0x42
   2c708:	5c9b      	ldrb	r3, [r3, r2]
   2c70a:	021b      	lsls	r3, r3, #8
   2c70c:	b21a      	sxth	r2, r3
   2c70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c710:	2141      	movs	r1, #65	; 0x41
   2c712:	5c5b      	ldrb	r3, [r3, r1]
   2c714:	b21b      	sxth	r3, r3
   2c716:	4313      	orrs	r3, r2
   2c718:	b21b      	sxth	r3, r3
   2c71a:	b29a      	uxth	r2, r3
   2c71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c71e:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   2c720:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c722:	891b      	ldrh	r3, [r3, #8]
   2c724:	220f      	movs	r2, #15
   2c726:	4013      	ands	r3, r2
   2c728:	b29b      	uxth	r3, r3
   2c72a:	2b00      	cmp	r3, #0
   2c72c:	d001      	beq.n	2c732 <chk_mounted+0x2ae>
   2c72e:	230d      	movs	r3, #13
   2c730:	e17c      	b.n	2ca2c <chk_mounted+0x5a8>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   2c732:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c734:	2244      	movs	r2, #68	; 0x44
   2c736:	5c9b      	ldrb	r3, [r3, r2]
   2c738:	021b      	lsls	r3, r3, #8
   2c73a:	b21a      	sxth	r2, r3
   2c73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c73e:	2143      	movs	r1, #67	; 0x43
   2c740:	5c5b      	ldrb	r3, [r3, r1]
   2c742:	b21b      	sxth	r3, r3
   2c744:	4313      	orrs	r3, r2
   2c746:	b21b      	sxth	r3, r3
   2c748:	b29b      	uxth	r3, r3
   2c74a:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   2c74c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2c74e:	2b00      	cmp	r3, #0
   2c750:	d112      	bne.n	2c778 <chk_mounted+0x2f4>
   2c752:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c754:	2253      	movs	r2, #83	; 0x53
   2c756:	5c9b      	ldrb	r3, [r3, r2]
   2c758:	061a      	lsls	r2, r3, #24
   2c75a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c75c:	2152      	movs	r1, #82	; 0x52
   2c75e:	5c5b      	ldrb	r3, [r3, r1]
   2c760:	041b      	lsls	r3, r3, #16
   2c762:	4313      	orrs	r3, r2
   2c764:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c766:	2151      	movs	r1, #81	; 0x51
   2c768:	5c52      	ldrb	r2, [r2, r1]
   2c76a:	0212      	lsls	r2, r2, #8
   2c76c:	4313      	orrs	r3, r2
   2c76e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c770:	2150      	movs	r1, #80	; 0x50
   2c772:	5c52      	ldrb	r2, [r2, r1]
   2c774:	4313      	orrs	r3, r2
   2c776:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   2c778:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c77a:	223f      	movs	r2, #63	; 0x3f
   2c77c:	5c9b      	ldrb	r3, [r3, r2]
   2c77e:	021b      	lsls	r3, r3, #8
   2c780:	b21a      	sxth	r2, r3
   2c782:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c784:	213e      	movs	r1, #62	; 0x3e
   2c786:	5c5b      	ldrb	r3, [r3, r1]
   2c788:	b21b      	sxth	r3, r3
   2c78a:	4313      	orrs	r3, r2
   2c78c:	b21a      	sxth	r2, r3
   2c78e:	231c      	movs	r3, #28
   2c790:	18fb      	adds	r3, r7, r3
   2c792:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   2c794:	231c      	movs	r3, #28
   2c796:	18fb      	adds	r3, r7, r3
   2c798:	881b      	ldrh	r3, [r3, #0]
   2c79a:	2b00      	cmp	r3, #0
   2c79c:	d101      	bne.n	2c7a2 <chk_mounted+0x31e>
   2c79e:	230d      	movs	r3, #13
   2c7a0:	e144      	b.n	2ca2c <chk_mounted+0x5a8>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   2c7a2:	231c      	movs	r3, #28
   2c7a4:	18fb      	adds	r3, r7, r3
   2c7a6:	881a      	ldrh	r2, [r3, #0]
   2c7a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2c7aa:	18d3      	adds	r3, r2, r3
   2c7ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c7ae:	8912      	ldrh	r2, [r2, #8]
   2c7b0:	0912      	lsrs	r2, r2, #4
   2c7b2:	b292      	uxth	r2, r2
   2c7b4:	189b      	adds	r3, r3, r2
   2c7b6:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   2c7b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2c7ba:	69bb      	ldr	r3, [r7, #24]
   2c7bc:	429a      	cmp	r2, r3
   2c7be:	d201      	bcs.n	2c7c4 <chk_mounted+0x340>
   2c7c0:	230d      	movs	r3, #13
   2c7c2:	e133      	b.n	2ca2c <chk_mounted+0x5a8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   2c7c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2c7c6:	69bb      	ldr	r3, [r7, #24]
   2c7c8:	1ad2      	subs	r2, r2, r3
   2c7ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c7cc:	789b      	ldrb	r3, [r3, #2]
   2c7ce:	0019      	movs	r1, r3
   2c7d0:	4b08      	ldr	r3, [pc, #32]	; (2c7f4 <chk_mounted+0x370>)
   2c7d2:	0010      	movs	r0, r2
   2c7d4:	4798      	blx	r3
   2c7d6:	0003      	movs	r3, r0
   2c7d8:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   2c7da:	697b      	ldr	r3, [r7, #20]
   2c7dc:	2b00      	cmp	r3, #0
   2c7de:	d10b      	bne.n	2c7f8 <chk_mounted+0x374>
   2c7e0:	230d      	movs	r3, #13
   2c7e2:	e123      	b.n	2ca2c <chk_mounted+0x5a8>
   2c7e4:	200042c4 	.word	0x200042c4
   2c7e8:	0002a5e1 	.word	0x0002a5e1
   2c7ec:	0002a55d 	.word	0x0002a55d
   2c7f0:	0002c3b1 	.word	0x0002c3b1
   2c7f4:	00031b25 	.word	0x00031b25
	fmt = FS_FAT12;
   2c7f8:	2347      	movs	r3, #71	; 0x47
   2c7fa:	18fb      	adds	r3, r7, r3
   2c7fc:	2201      	movs	r2, #1
   2c7fe:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   2c800:	697b      	ldr	r3, [r7, #20]
   2c802:	4a8c      	ldr	r2, [pc, #560]	; (2ca34 <chk_mounted+0x5b0>)
   2c804:	4293      	cmp	r3, r2
   2c806:	d903      	bls.n	2c810 <chk_mounted+0x38c>
   2c808:	2347      	movs	r3, #71	; 0x47
   2c80a:	18fb      	adds	r3, r7, r3
   2c80c:	2202      	movs	r2, #2
   2c80e:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   2c810:	697b      	ldr	r3, [r7, #20]
   2c812:	4a89      	ldr	r2, [pc, #548]	; (2ca38 <chk_mounted+0x5b4>)
   2c814:	4293      	cmp	r3, r2
   2c816:	d903      	bls.n	2c820 <chk_mounted+0x39c>
   2c818:	2347      	movs	r3, #71	; 0x47
   2c81a:	18fb      	adds	r3, r7, r3
   2c81c:	2203      	movs	r2, #3
   2c81e:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   2c820:	697b      	ldr	r3, [r7, #20]
   2c822:	1c9a      	adds	r2, r3, #2
   2c824:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c826:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   2c828:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2c82a:	69bb      	ldr	r3, [r7, #24]
   2c82c:	18d2      	adds	r2, r2, r3
   2c82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c830:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   2c832:	231c      	movs	r3, #28
   2c834:	18fb      	adds	r3, r7, r3
   2c836:	881a      	ldrh	r2, [r3, #0]
   2c838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2c83a:	18d2      	adds	r2, r2, r3
   2c83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c83e:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
   2c840:	2347      	movs	r3, #71	; 0x47
   2c842:	18fb      	adds	r3, r7, r3
   2c844:	781b      	ldrb	r3, [r3, #0]
   2c846:	2b03      	cmp	r3, #3
   2c848:	d11e      	bne.n	2c888 <chk_mounted+0x404>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   2c84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c84c:	891b      	ldrh	r3, [r3, #8]
   2c84e:	2b00      	cmp	r3, #0
   2c850:	d001      	beq.n	2c856 <chk_mounted+0x3d2>
   2c852:	230d      	movs	r3, #13
   2c854:	e0ea      	b.n	2ca2c <chk_mounted+0x5a8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   2c856:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c858:	225f      	movs	r2, #95	; 0x5f
   2c85a:	5c9b      	ldrb	r3, [r3, r2]
   2c85c:	061a      	lsls	r2, r3, #24
   2c85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c860:	215e      	movs	r1, #94	; 0x5e
   2c862:	5c5b      	ldrb	r3, [r3, r1]
   2c864:	041b      	lsls	r3, r3, #16
   2c866:	4313      	orrs	r3, r2
   2c868:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c86a:	215d      	movs	r1, #93	; 0x5d
   2c86c:	5c52      	ldrb	r2, [r2, r1]
   2c86e:	0212      	lsls	r2, r2, #8
   2c870:	4313      	orrs	r3, r2
   2c872:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c874:	215c      	movs	r1, #92	; 0x5c
   2c876:	5c52      	ldrb	r2, [r2, r1]
   2c878:	431a      	orrs	r2, r3
   2c87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c87c:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   2c87e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c880:	699b      	ldr	r3, [r3, #24]
   2c882:	009b      	lsls	r3, r3, #2
   2c884:	633b      	str	r3, [r7, #48]	; 0x30
   2c886:	e020      	b.n	2c8ca <chk_mounted+0x446>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   2c888:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c88a:	891b      	ldrh	r3, [r3, #8]
   2c88c:	2b00      	cmp	r3, #0
   2c88e:	d101      	bne.n	2c894 <chk_mounted+0x410>
   2c890:	230d      	movs	r3, #13
   2c892:	e0cb      	b.n	2ca2c <chk_mounted+0x5a8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   2c894:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c896:	6a1a      	ldr	r2, [r3, #32]
   2c898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2c89a:	18d2      	adds	r2, r2, r3
   2c89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c89e:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   2c8a0:	2347      	movs	r3, #71	; 0x47
   2c8a2:	18fb      	adds	r3, r7, r3
   2c8a4:	781b      	ldrb	r3, [r3, #0]
   2c8a6:	2b02      	cmp	r3, #2
   2c8a8:	d103      	bne.n	2c8b2 <chk_mounted+0x42e>
   2c8aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c8ac:	699b      	ldr	r3, [r3, #24]
   2c8ae:	005b      	lsls	r3, r3, #1
   2c8b0:	e00a      	b.n	2c8c8 <chk_mounted+0x444>
   2c8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c8b4:	699a      	ldr	r2, [r3, #24]
   2c8b6:	0013      	movs	r3, r2
   2c8b8:	005b      	lsls	r3, r3, #1
   2c8ba:	189b      	adds	r3, r3, r2
   2c8bc:	085a      	lsrs	r2, r3, #1
   2c8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c8c0:	699b      	ldr	r3, [r3, #24]
   2c8c2:	2101      	movs	r1, #1
   2c8c4:	400b      	ands	r3, r1
   2c8c6:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
   2c8c8:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   2c8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c8cc:	69da      	ldr	r2, [r3, #28]
   2c8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2c8d0:	495a      	ldr	r1, [pc, #360]	; (2ca3c <chk_mounted+0x5b8>)
   2c8d2:	468c      	mov	ip, r1
   2c8d4:	4463      	add	r3, ip
   2c8d6:	0a5b      	lsrs	r3, r3, #9
   2c8d8:	429a      	cmp	r2, r3
   2c8da:	d201      	bcs.n	2c8e0 <chk_mounted+0x45c>
		return FR_NO_FILESYSTEM;
   2c8dc:	230d      	movs	r3, #13
   2c8de:	e0a5      	b.n	2ca2c <chk_mounted+0x5a8>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
   2c8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c8e2:	2201      	movs	r2, #1
   2c8e4:	4252      	negs	r2, r2
   2c8e6:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
   2c8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c8ea:	2200      	movs	r2, #0
   2c8ec:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
   2c8ee:	2347      	movs	r3, #71	; 0x47
   2c8f0:	18fb      	adds	r3, r7, r3
   2c8f2:	781b      	ldrb	r3, [r3, #0]
   2c8f4:	2b03      	cmp	r3, #3
   2c8f6:	d000      	beq.n	2c8fa <chk_mounted+0x476>
   2c8f8:	e082      	b.n	2ca00 <chk_mounted+0x57c>
	 	fs->fsi_flag = 0;
   2c8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c8fc:	2200      	movs	r2, #0
   2c8fe:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   2c900:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c902:	2261      	movs	r2, #97	; 0x61
   2c904:	5c9b      	ldrb	r3, [r3, r2]
   2c906:	021b      	lsls	r3, r3, #8
   2c908:	b21a      	sxth	r2, r3
   2c90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c90c:	2160      	movs	r1, #96	; 0x60
   2c90e:	5c5b      	ldrb	r3, [r3, r1]
   2c910:	b21b      	sxth	r3, r3
   2c912:	4313      	orrs	r3, r2
   2c914:	b21b      	sxth	r3, r3
   2c916:	b29b      	uxth	r3, r3
   2c918:	001a      	movs	r2, r3
   2c91a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2c91c:	18d2      	adds	r2, r2, r3
   2c91e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c920:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2c922:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c924:	7858      	ldrb	r0, [r3, #1]
   2c926:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c928:	3330      	adds	r3, #48	; 0x30
   2c92a:	0019      	movs	r1, r3
   2c92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c92e:	695a      	ldr	r2, [r3, #20]
   2c930:	2301      	movs	r3, #1
   2c932:	4c43      	ldr	r4, [pc, #268]	; (2ca40 <chk_mounted+0x5bc>)
   2c934:	47a0      	blx	r4
   2c936:	1e03      	subs	r3, r0, #0
   2c938:	d162      	bne.n	2ca00 <chk_mounted+0x57c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2c93a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c93c:	4a41      	ldr	r2, [pc, #260]	; (2ca44 <chk_mounted+0x5c0>)
   2c93e:	5c9b      	ldrb	r3, [r3, r2]
   2c940:	021b      	lsls	r3, r3, #8
   2c942:	b21a      	sxth	r2, r3
   2c944:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c946:	4940      	ldr	r1, [pc, #256]	; (2ca48 <chk_mounted+0x5c4>)
   2c948:	5c5b      	ldrb	r3, [r3, r1]
   2c94a:	b21b      	sxth	r3, r3
   2c94c:	4313      	orrs	r3, r2
   2c94e:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2c950:	4a3e      	ldr	r2, [pc, #248]	; (2ca4c <chk_mounted+0x5c8>)
   2c952:	4293      	cmp	r3, r2
   2c954:	d154      	bne.n	2ca00 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2c956:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c958:	2233      	movs	r2, #51	; 0x33
   2c95a:	5c9b      	ldrb	r3, [r3, r2]
   2c95c:	061a      	lsls	r2, r3, #24
   2c95e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c960:	2132      	movs	r1, #50	; 0x32
   2c962:	5c5b      	ldrb	r3, [r3, r1]
   2c964:	041b      	lsls	r3, r3, #16
   2c966:	4313      	orrs	r3, r2
   2c968:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c96a:	2131      	movs	r1, #49	; 0x31
   2c96c:	5c52      	ldrb	r2, [r2, r1]
   2c96e:	0212      	lsls	r2, r2, #8
   2c970:	4313      	orrs	r3, r2
   2c972:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c974:	2130      	movs	r1, #48	; 0x30
   2c976:	5c52      	ldrb	r2, [r2, r1]
   2c978:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2c97a:	4a35      	ldr	r2, [pc, #212]	; (2ca50 <chk_mounted+0x5cc>)
   2c97c:	4293      	cmp	r3, r2
   2c97e:	d13f      	bne.n	2ca00 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   2c980:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c982:	4a34      	ldr	r2, [pc, #208]	; (2ca54 <chk_mounted+0x5d0>)
   2c984:	5c9b      	ldrb	r3, [r3, r2]
   2c986:	061a      	lsls	r2, r3, #24
   2c988:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c98a:	4933      	ldr	r1, [pc, #204]	; (2ca58 <chk_mounted+0x5d4>)
   2c98c:	5c5b      	ldrb	r3, [r3, r1]
   2c98e:	041b      	lsls	r3, r3, #16
   2c990:	4313      	orrs	r3, r2
   2c992:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c994:	4931      	ldr	r1, [pc, #196]	; (2ca5c <chk_mounted+0x5d8>)
   2c996:	5c52      	ldrb	r2, [r2, r1]
   2c998:	0212      	lsls	r2, r2, #8
   2c99a:	4313      	orrs	r3, r2
   2c99c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2c99e:	2285      	movs	r2, #133	; 0x85
   2c9a0:	0092      	lsls	r2, r2, #2
   2c9a2:	5c8a      	ldrb	r2, [r1, r2]
   2c9a4:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2c9a6:	4a2e      	ldr	r2, [pc, #184]	; (2ca60 <chk_mounted+0x5dc>)
   2c9a8:	4293      	cmp	r3, r2
   2c9aa:	d129      	bne.n	2ca00 <chk_mounted+0x57c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   2c9ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c9ae:	4a2d      	ldr	r2, [pc, #180]	; (2ca64 <chk_mounted+0x5e0>)
   2c9b0:	5c9b      	ldrb	r3, [r3, r2]
   2c9b2:	061a      	lsls	r2, r3, #24
   2c9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c9b6:	492c      	ldr	r1, [pc, #176]	; (2ca68 <chk_mounted+0x5e4>)
   2c9b8:	5c5b      	ldrb	r3, [r3, r1]
   2c9ba:	041b      	lsls	r3, r3, #16
   2c9bc:	4313      	orrs	r3, r2
   2c9be:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c9c0:	492a      	ldr	r1, [pc, #168]	; (2ca6c <chk_mounted+0x5e8>)
   2c9c2:	5c52      	ldrb	r2, [r2, r1]
   2c9c4:	0212      	lsls	r2, r2, #8
   2c9c6:	4313      	orrs	r3, r2
   2c9c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2c9ca:	2287      	movs	r2, #135	; 0x87
   2c9cc:	0092      	lsls	r2, r2, #2
   2c9ce:	5c8a      	ldrb	r2, [r1, r2]
   2c9d0:	431a      	orrs	r2, r3
   2c9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c9d4:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   2c9d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c9d8:	4a25      	ldr	r2, [pc, #148]	; (2ca70 <chk_mounted+0x5ec>)
   2c9da:	5c9b      	ldrb	r3, [r3, r2]
   2c9dc:	061a      	lsls	r2, r3, #24
   2c9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c9e0:	4924      	ldr	r1, [pc, #144]	; (2ca74 <chk_mounted+0x5f0>)
   2c9e2:	5c5b      	ldrb	r3, [r3, r1]
   2c9e4:	041b      	lsls	r3, r3, #16
   2c9e6:	4313      	orrs	r3, r2
   2c9e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c9ea:	4923      	ldr	r1, [pc, #140]	; (2ca78 <chk_mounted+0x5f4>)
   2c9ec:	5c52      	ldrb	r2, [r2, r1]
   2c9ee:	0212      	lsls	r2, r2, #8
   2c9f0:	4313      	orrs	r3, r2
   2c9f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2c9f4:	2286      	movs	r2, #134	; 0x86
   2c9f6:	0092      	lsls	r2, r2, #2
   2c9f8:	5c8a      	ldrb	r2, [r1, r2]
   2c9fa:	431a      	orrs	r2, r3
   2c9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c9fe:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
   2ca00:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ca02:	2247      	movs	r2, #71	; 0x47
   2ca04:	18ba      	adds	r2, r7, r2
   2ca06:	7812      	ldrb	r2, [r2, #0]
   2ca08:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   2ca0a:	4b1c      	ldr	r3, [pc, #112]	; (2ca7c <chk_mounted+0x5f8>)
   2ca0c:	881b      	ldrh	r3, [r3, #0]
   2ca0e:	3301      	adds	r3, #1
   2ca10:	b29a      	uxth	r2, r3
   2ca12:	4b1a      	ldr	r3, [pc, #104]	; (2ca7c <chk_mounted+0x5f8>)
   2ca14:	801a      	strh	r2, [r3, #0]
   2ca16:	4b19      	ldr	r3, [pc, #100]	; (2ca7c <chk_mounted+0x5f8>)
   2ca18:	881a      	ldrh	r2, [r3, #0]
   2ca1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ca1c:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   2ca1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ca20:	2200      	movs	r2, #0
   2ca22:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
   2ca24:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ca26:	2200      	movs	r2, #0
   2ca28:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
   2ca2a:	2300      	movs	r3, #0
}
   2ca2c:	0018      	movs	r0, r3
   2ca2e:	46bd      	mov	sp, r7
   2ca30:	b013      	add	sp, #76	; 0x4c
   2ca32:	bd90      	pop	{r4, r7, pc}
   2ca34:	00000ff5 	.word	0x00000ff5
   2ca38:	0000fff5 	.word	0x0000fff5
   2ca3c:	000001ff 	.word	0x000001ff
   2ca40:	0002a619 	.word	0x0002a619
   2ca44:	0000022f 	.word	0x0000022f
   2ca48:	0000022e 	.word	0x0000022e
   2ca4c:	ffffaa55 	.word	0xffffaa55
   2ca50:	41615252 	.word	0x41615252
   2ca54:	00000217 	.word	0x00000217
   2ca58:	00000216 	.word	0x00000216
   2ca5c:	00000215 	.word	0x00000215
   2ca60:	61417272 	.word	0x61417272
   2ca64:	0000021f 	.word	0x0000021f
   2ca68:	0000021e 	.word	0x0000021e
   2ca6c:	0000021d 	.word	0x0000021d
   2ca70:	0000021b 	.word	0x0000021b
   2ca74:	0000021a 	.word	0x0000021a
   2ca78:	00000219 	.word	0x00000219
   2ca7c:	200042e4 	.word	0x200042e4

0002ca80 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   2ca80:	b580      	push	{r7, lr}
   2ca82:	b082      	sub	sp, #8
   2ca84:	af00      	add	r7, sp, #0
   2ca86:	6078      	str	r0, [r7, #4]
   2ca88:	000a      	movs	r2, r1
   2ca8a:	1cbb      	adds	r3, r7, #2
   2ca8c:	801a      	strh	r2, [r3, #0]
	if (!fs || !fs->fs_type || fs->id != id)
   2ca8e:	687b      	ldr	r3, [r7, #4]
   2ca90:	2b00      	cmp	r3, #0
   2ca92:	d009      	beq.n	2caa8 <validate+0x28>
   2ca94:	687b      	ldr	r3, [r7, #4]
   2ca96:	781b      	ldrb	r3, [r3, #0]
   2ca98:	2b00      	cmp	r3, #0
   2ca9a:	d005      	beq.n	2caa8 <validate+0x28>
   2ca9c:	687b      	ldr	r3, [r7, #4]
   2ca9e:	88db      	ldrh	r3, [r3, #6]
   2caa0:	1cba      	adds	r2, r7, #2
   2caa2:	8812      	ldrh	r2, [r2, #0]
   2caa4:	429a      	cmp	r2, r3
   2caa6:	d001      	beq.n	2caac <validate+0x2c>
		return FR_INVALID_OBJECT;
   2caa8:	2309      	movs	r3, #9
   2caaa:	e00c      	b.n	2cac6 <validate+0x46>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
   2caac:	687b      	ldr	r3, [r7, #4]
   2caae:	785b      	ldrb	r3, [r3, #1]
   2cab0:	0018      	movs	r0, r3
   2cab2:	4b07      	ldr	r3, [pc, #28]	; (2cad0 <validate+0x50>)
   2cab4:	4798      	blx	r3
   2cab6:	0003      	movs	r3, r0
   2cab8:	001a      	movs	r2, r3
   2caba:	2301      	movs	r3, #1
   2cabc:	4013      	ands	r3, r2
   2cabe:	d001      	beq.n	2cac4 <validate+0x44>
		return FR_NOT_READY;
   2cac0:	2303      	movs	r3, #3
   2cac2:	e000      	b.n	2cac6 <validate+0x46>

	return FR_OK;
   2cac4:	2300      	movs	r3, #0
}
   2cac6:	0018      	movs	r0, r3
   2cac8:	46bd      	mov	sp, r7
   2caca:	b002      	add	sp, #8
   2cacc:	bd80      	pop	{r7, pc}
   2cace:	46c0      	nop			; (mov r8, r8)
   2cad0:	0002a5e1 	.word	0x0002a5e1

0002cad4 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
   2cad4:	b580      	push	{r7, lr}
   2cad6:	b084      	sub	sp, #16
   2cad8:	af00      	add	r7, sp, #0
   2cada:	0002      	movs	r2, r0
   2cadc:	6039      	str	r1, [r7, #0]
   2cade:	1dfb      	adds	r3, r7, #7
   2cae0:	701a      	strb	r2, [r3, #0]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
   2cae2:	1dfb      	adds	r3, r7, #7
   2cae4:	781b      	ldrb	r3, [r3, #0]
   2cae6:	2b07      	cmp	r3, #7
   2cae8:	d901      	bls.n	2caee <f_mount+0x1a>
		return FR_INVALID_DRIVE;
   2caea:	230b      	movs	r3, #11
   2caec:	e018      	b.n	2cb20 <f_mount+0x4c>
	rfs = FatFs[vol];			/* Get current fs object */
   2caee:	1dfb      	adds	r3, r7, #7
   2caf0:	781a      	ldrb	r2, [r3, #0]
   2caf2:	4b0d      	ldr	r3, [pc, #52]	; (2cb28 <f_mount+0x54>)
   2caf4:	0092      	lsls	r2, r2, #2
   2caf6:	58d3      	ldr	r3, [r2, r3]
   2caf8:	60fb      	str	r3, [r7, #12]

	if (rfs) {
   2cafa:	68fb      	ldr	r3, [r7, #12]
   2cafc:	2b00      	cmp	r3, #0
   2cafe:	d002      	beq.n	2cb06 <f_mount+0x32>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
   2cb00:	68fb      	ldr	r3, [r7, #12]
   2cb02:	2200      	movs	r2, #0
   2cb04:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
   2cb06:	683b      	ldr	r3, [r7, #0]
   2cb08:	2b00      	cmp	r3, #0
   2cb0a:	d002      	beq.n	2cb12 <f_mount+0x3e>
		fs->fs_type = 0;		/* Clear new fs object */
   2cb0c:	683b      	ldr	r3, [r7, #0]
   2cb0e:	2200      	movs	r2, #0
   2cb10:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
   2cb12:	1dfb      	adds	r3, r7, #7
   2cb14:	781a      	ldrb	r2, [r3, #0]
   2cb16:	4b04      	ldr	r3, [pc, #16]	; (2cb28 <f_mount+0x54>)
   2cb18:	0092      	lsls	r2, r2, #2
   2cb1a:	6839      	ldr	r1, [r7, #0]
   2cb1c:	50d1      	str	r1, [r2, r3]

	return FR_OK;
   2cb1e:	2300      	movs	r3, #0
}
   2cb20:	0018      	movs	r0, r3
   2cb22:	46bd      	mov	sp, r7
   2cb24:	b004      	add	sp, #16
   2cb26:	bd80      	pop	{r7, pc}
   2cb28:	200042c4 	.word	0x200042c4

0002cb2c <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   2cb2c:	b590      	push	{r4, r7, lr}
   2cb2e:	4ce5      	ldr	r4, [pc, #916]	; (2cec4 <f_open+0x398>)
   2cb30:	44a5      	add	sp, r4
   2cb32:	af00      	add	r7, sp, #0
   2cb34:	60f8      	str	r0, [r7, #12]
   2cb36:	60b9      	str	r1, [r7, #8]
   2cb38:	4be3      	ldr	r3, [pc, #908]	; (2cec8 <f_open+0x39c>)
   2cb3a:	2194      	movs	r1, #148	; 0x94
   2cb3c:	0089      	lsls	r1, r1, #2
   2cb3e:	468c      	mov	ip, r1
   2cb40:	44bc      	add	ip, r7
   2cb42:	4463      	add	r3, ip
   2cb44:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   2cb46:	68fb      	ldr	r3, [r7, #12]
   2cb48:	2200      	movs	r2, #0
   2cb4a:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   2cb4c:	4bde      	ldr	r3, [pc, #888]	; (2cec8 <f_open+0x39c>)
   2cb4e:	2294      	movs	r2, #148	; 0x94
   2cb50:	0092      	lsls	r2, r2, #2
   2cb52:	4694      	mov	ip, r2
   2cb54:	44bc      	add	ip, r7
   2cb56:	4463      	add	r3, ip
   2cb58:	4adb      	ldr	r2, [pc, #876]	; (2cec8 <f_open+0x39c>)
   2cb5a:	2194      	movs	r1, #148	; 0x94
   2cb5c:	0089      	lsls	r1, r1, #2
   2cb5e:	468c      	mov	ip, r1
   2cb60:	44bc      	add	ip, r7
   2cb62:	4462      	add	r2, ip
   2cb64:	7812      	ldrb	r2, [r2, #0]
   2cb66:	211f      	movs	r1, #31
   2cb68:	400a      	ands	r2, r1
   2cb6a:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   2cb6c:	4bd6      	ldr	r3, [pc, #856]	; (2cec8 <f_open+0x39c>)
   2cb6e:	2294      	movs	r2, #148	; 0x94
   2cb70:	0092      	lsls	r2, r2, #2
   2cb72:	4694      	mov	ip, r2
   2cb74:	44bc      	add	ip, r7
   2cb76:	4463      	add	r3, ip
   2cb78:	781b      	ldrb	r3, [r3, #0]
   2cb7a:	2201      	movs	r2, #1
   2cb7c:	4393      	bics	r3, r2
   2cb7e:	b2da      	uxtb	r2, r3
   2cb80:	4bd2      	ldr	r3, [pc, #840]	; (2cecc <f_open+0x3a0>)
   2cb82:	18fc      	adds	r4, r7, r3
   2cb84:	2387      	movs	r3, #135	; 0x87
   2cb86:	009b      	lsls	r3, r3, #2
   2cb88:	18f9      	adds	r1, r7, r3
   2cb8a:	2308      	movs	r3, #8
   2cb8c:	18fb      	adds	r3, r7, r3
   2cb8e:	0018      	movs	r0, r3
   2cb90:	4bcf      	ldr	r3, [pc, #828]	; (2ced0 <f_open+0x3a4>)
   2cb92:	4798      	blx	r3
   2cb94:	0003      	movs	r3, r0
   2cb96:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   2cb98:	2387      	movs	r3, #135	; 0x87
   2cb9a:	009b      	lsls	r3, r3, #2
   2cb9c:	18fb      	adds	r3, r7, r3
   2cb9e:	2284      	movs	r2, #132	; 0x84
   2cba0:	0092      	lsls	r2, r2, #2
   2cba2:	18ba      	adds	r2, r7, r2
   2cba4:	619a      	str	r2, [r3, #24]
   2cba6:	2387      	movs	r3, #135	; 0x87
   2cba8:	009b      	lsls	r3, r3, #2
   2cbaa:	18fb      	adds	r3, r7, r3
   2cbac:	2210      	movs	r2, #16
   2cbae:	18ba      	adds	r2, r7, r2
   2cbb0:	61da      	str	r2, [r3, #28]
	if (res == FR_OK)
   2cbb2:	4bc6      	ldr	r3, [pc, #792]	; (2cecc <f_open+0x3a0>)
   2cbb4:	18fb      	adds	r3, r7, r3
   2cbb6:	781b      	ldrb	r3, [r3, #0]
   2cbb8:	2b00      	cmp	r3, #0
   2cbba:	d10b      	bne.n	2cbd4 <f_open+0xa8>
		res = follow_path(&dj, path);	/* Follow the file path */
   2cbbc:	68ba      	ldr	r2, [r7, #8]
   2cbbe:	4bc3      	ldr	r3, [pc, #780]	; (2cecc <f_open+0x3a0>)
   2cbc0:	18fc      	adds	r4, r7, r3
   2cbc2:	2387      	movs	r3, #135	; 0x87
   2cbc4:	009b      	lsls	r3, r3, #2
   2cbc6:	18fb      	adds	r3, r7, r3
   2cbc8:	0011      	movs	r1, r2
   2cbca:	0018      	movs	r0, r3
   2cbcc:	4bc1      	ldr	r3, [pc, #772]	; (2ced4 <f_open+0x3a8>)
   2cbce:	4798      	blx	r3
   2cbd0:	0003      	movs	r3, r0
   2cbd2:	7023      	strb	r3, [r4, #0]
	dir = dj.dir;
   2cbd4:	2387      	movs	r3, #135	; 0x87
   2cbd6:	009b      	lsls	r3, r3, #2
   2cbd8:	18fb      	adds	r3, r7, r3
   2cbda:	695b      	ldr	r3, [r3, #20]
   2cbdc:	2292      	movs	r2, #146	; 0x92
   2cbde:	0092      	lsls	r2, r2, #2
   2cbe0:	18ba      	adds	r2, r7, r2
   2cbe2:	6013      	str	r3, [r2, #0]

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
   2cbe4:	4bb9      	ldr	r3, [pc, #740]	; (2cecc <f_open+0x3a0>)
   2cbe6:	18fb      	adds	r3, r7, r3
   2cbe8:	781b      	ldrb	r3, [r3, #0]
   2cbea:	2b00      	cmp	r3, #0
   2cbec:	d109      	bne.n	2cc02 <f_open+0xd6>
		if (!dir)	/* Current dir itself */
   2cbee:	2392      	movs	r3, #146	; 0x92
   2cbf0:	009b      	lsls	r3, r3, #2
   2cbf2:	18fb      	adds	r3, r7, r3
   2cbf4:	681b      	ldr	r3, [r3, #0]
   2cbf6:	2b00      	cmp	r3, #0
   2cbf8:	d103      	bne.n	2cc02 <f_open+0xd6>
			res = FR_INVALID_NAME;
   2cbfa:	4bb4      	ldr	r3, [pc, #720]	; (2cecc <f_open+0x3a0>)
   2cbfc:	18fb      	adds	r3, r7, r3
   2cbfe:	2206      	movs	r2, #6
   2cc00:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   2cc02:	4bb1      	ldr	r3, [pc, #708]	; (2cec8 <f_open+0x39c>)
   2cc04:	2294      	movs	r2, #148	; 0x94
   2cc06:	0092      	lsls	r2, r2, #2
   2cc08:	4694      	mov	ip, r2
   2cc0a:	44bc      	add	ip, r7
   2cc0c:	4463      	add	r3, ip
   2cc0e:	781b      	ldrb	r3, [r3, #0]
   2cc10:	221c      	movs	r2, #28
   2cc12:	4013      	ands	r3, r2
   2cc14:	d100      	bne.n	2cc18 <f_open+0xec>
   2cc16:	e141      	b.n	2ce9c <f_open+0x370>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
   2cc18:	4bac      	ldr	r3, [pc, #688]	; (2cecc <f_open+0x3a0>)
   2cc1a:	18fb      	adds	r3, r7, r3
   2cc1c:	781b      	ldrb	r3, [r3, #0]
   2cc1e:	2b00      	cmp	r3, #0
   2cc20:	d027      	beq.n	2cc72 <f_open+0x146>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   2cc22:	4baa      	ldr	r3, [pc, #680]	; (2cecc <f_open+0x3a0>)
   2cc24:	18fb      	adds	r3, r7, r3
   2cc26:	781b      	ldrb	r3, [r3, #0]
   2cc28:	2b04      	cmp	r3, #4
   2cc2a:	d109      	bne.n	2cc40 <f_open+0x114>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
   2cc2c:	4ba7      	ldr	r3, [pc, #668]	; (2cecc <f_open+0x3a0>)
   2cc2e:	18fc      	adds	r4, r7, r3
   2cc30:	2387      	movs	r3, #135	; 0x87
   2cc32:	009b      	lsls	r3, r3, #2
   2cc34:	18fb      	adds	r3, r7, r3
   2cc36:	0018      	movs	r0, r3
   2cc38:	4ba7      	ldr	r3, [pc, #668]	; (2ced8 <f_open+0x3ac>)
   2cc3a:	4798      	blx	r3
   2cc3c:	0003      	movs	r3, r0
   2cc3e:	7023      	strb	r3, [r4, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   2cc40:	4ba1      	ldr	r3, [pc, #644]	; (2cec8 <f_open+0x39c>)
   2cc42:	2294      	movs	r2, #148	; 0x94
   2cc44:	0092      	lsls	r2, r2, #2
   2cc46:	4694      	mov	ip, r2
   2cc48:	44bc      	add	ip, r7
   2cc4a:	4463      	add	r3, ip
   2cc4c:	4a9e      	ldr	r2, [pc, #632]	; (2cec8 <f_open+0x39c>)
   2cc4e:	2194      	movs	r1, #148	; 0x94
   2cc50:	0089      	lsls	r1, r1, #2
   2cc52:	468c      	mov	ip, r1
   2cc54:	44bc      	add	ip, r7
   2cc56:	4462      	add	r2, ip
   2cc58:	7812      	ldrb	r2, [r2, #0]
   2cc5a:	2108      	movs	r1, #8
   2cc5c:	430a      	orrs	r2, r1
   2cc5e:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
   2cc60:	2387      	movs	r3, #135	; 0x87
   2cc62:	009b      	lsls	r3, r3, #2
   2cc64:	18fb      	adds	r3, r7, r3
   2cc66:	695b      	ldr	r3, [r3, #20]
   2cc68:	2292      	movs	r2, #146	; 0x92
   2cc6a:	0092      	lsls	r2, r2, #2
   2cc6c:	18ba      	adds	r2, r7, r2
   2cc6e:	6013      	str	r3, [r2, #0]
   2cc70:	e01c      	b.n	2ccac <f_open+0x180>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   2cc72:	2392      	movs	r3, #146	; 0x92
   2cc74:	009b      	lsls	r3, r3, #2
   2cc76:	18fb      	adds	r3, r7, r3
   2cc78:	681b      	ldr	r3, [r3, #0]
   2cc7a:	330b      	adds	r3, #11
   2cc7c:	781b      	ldrb	r3, [r3, #0]
   2cc7e:	001a      	movs	r2, r3
   2cc80:	2311      	movs	r3, #17
   2cc82:	4013      	ands	r3, r2
   2cc84:	d004      	beq.n	2cc90 <f_open+0x164>
				res = FR_DENIED;
   2cc86:	4b91      	ldr	r3, [pc, #580]	; (2cecc <f_open+0x3a0>)
   2cc88:	18fb      	adds	r3, r7, r3
   2cc8a:	2207      	movs	r2, #7
   2cc8c:	701a      	strb	r2, [r3, #0]
   2cc8e:	e00d      	b.n	2ccac <f_open+0x180>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   2cc90:	4b8d      	ldr	r3, [pc, #564]	; (2cec8 <f_open+0x39c>)
   2cc92:	2294      	movs	r2, #148	; 0x94
   2cc94:	0092      	lsls	r2, r2, #2
   2cc96:	4694      	mov	ip, r2
   2cc98:	44bc      	add	ip, r7
   2cc9a:	4463      	add	r3, ip
   2cc9c:	781b      	ldrb	r3, [r3, #0]
   2cc9e:	2204      	movs	r2, #4
   2cca0:	4013      	ands	r3, r2
   2cca2:	d003      	beq.n	2ccac <f_open+0x180>
					res = FR_EXIST;
   2cca4:	4b89      	ldr	r3, [pc, #548]	; (2cecc <f_open+0x3a0>)
   2cca6:	18fb      	adds	r3, r7, r3
   2cca8:	2208      	movs	r2, #8
   2ccaa:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   2ccac:	4b87      	ldr	r3, [pc, #540]	; (2cecc <f_open+0x3a0>)
   2ccae:	18fb      	adds	r3, r7, r3
   2ccb0:	781b      	ldrb	r3, [r3, #0]
   2ccb2:	2b00      	cmp	r3, #0
   2ccb4:	d000      	beq.n	2ccb8 <f_open+0x18c>
   2ccb6:	e12f      	b.n	2cf18 <f_open+0x3ec>
   2ccb8:	4b83      	ldr	r3, [pc, #524]	; (2cec8 <f_open+0x39c>)
   2ccba:	2294      	movs	r2, #148	; 0x94
   2ccbc:	0092      	lsls	r2, r2, #2
   2ccbe:	4694      	mov	ip, r2
   2ccc0:	44bc      	add	ip, r7
   2ccc2:	4463      	add	r3, ip
   2ccc4:	781b      	ldrb	r3, [r3, #0]
   2ccc6:	2208      	movs	r2, #8
   2ccc8:	4013      	ands	r3, r2
   2ccca:	d100      	bne.n	2ccce <f_open+0x1a2>
   2cccc:	e124      	b.n	2cf18 <f_open+0x3ec>
			dw = get_fattime();					/* Created time */
   2ccce:	4b83      	ldr	r3, [pc, #524]	; (2cedc <f_open+0x3b0>)
   2ccd0:	4798      	blx	r3
   2ccd2:	0003      	movs	r3, r0
   2ccd4:	2291      	movs	r2, #145	; 0x91
   2ccd6:	0092      	lsls	r2, r2, #2
   2ccd8:	18ba      	adds	r2, r7, r2
   2ccda:	6013      	str	r3, [r2, #0]
			ST_DWORD(dir+DIR_CrtTime, dw);
   2ccdc:	2392      	movs	r3, #146	; 0x92
   2ccde:	009b      	lsls	r3, r3, #2
   2cce0:	18fb      	adds	r3, r7, r3
   2cce2:	681b      	ldr	r3, [r3, #0]
   2cce4:	330e      	adds	r3, #14
   2cce6:	2291      	movs	r2, #145	; 0x91
   2cce8:	0092      	lsls	r2, r2, #2
   2ccea:	18ba      	adds	r2, r7, r2
   2ccec:	6812      	ldr	r2, [r2, #0]
   2ccee:	b2d2      	uxtb	r2, r2
   2ccf0:	701a      	strb	r2, [r3, #0]
   2ccf2:	2392      	movs	r3, #146	; 0x92
   2ccf4:	009b      	lsls	r3, r3, #2
   2ccf6:	18fb      	adds	r3, r7, r3
   2ccf8:	681b      	ldr	r3, [r3, #0]
   2ccfa:	330f      	adds	r3, #15
   2ccfc:	2291      	movs	r2, #145	; 0x91
   2ccfe:	0092      	lsls	r2, r2, #2
   2cd00:	18ba      	adds	r2, r7, r2
   2cd02:	6812      	ldr	r2, [r2, #0]
   2cd04:	b292      	uxth	r2, r2
   2cd06:	0a12      	lsrs	r2, r2, #8
   2cd08:	b292      	uxth	r2, r2
   2cd0a:	b2d2      	uxtb	r2, r2
   2cd0c:	701a      	strb	r2, [r3, #0]
   2cd0e:	2392      	movs	r3, #146	; 0x92
   2cd10:	009b      	lsls	r3, r3, #2
   2cd12:	18fb      	adds	r3, r7, r3
   2cd14:	681b      	ldr	r3, [r3, #0]
   2cd16:	3310      	adds	r3, #16
   2cd18:	2291      	movs	r2, #145	; 0x91
   2cd1a:	0092      	lsls	r2, r2, #2
   2cd1c:	18ba      	adds	r2, r7, r2
   2cd1e:	6812      	ldr	r2, [r2, #0]
   2cd20:	0c12      	lsrs	r2, r2, #16
   2cd22:	b2d2      	uxtb	r2, r2
   2cd24:	701a      	strb	r2, [r3, #0]
   2cd26:	2392      	movs	r3, #146	; 0x92
   2cd28:	009b      	lsls	r3, r3, #2
   2cd2a:	18fb      	adds	r3, r7, r3
   2cd2c:	681b      	ldr	r3, [r3, #0]
   2cd2e:	3311      	adds	r3, #17
   2cd30:	2291      	movs	r2, #145	; 0x91
   2cd32:	0092      	lsls	r2, r2, #2
   2cd34:	18ba      	adds	r2, r7, r2
   2cd36:	6812      	ldr	r2, [r2, #0]
   2cd38:	0e12      	lsrs	r2, r2, #24
   2cd3a:	b2d2      	uxtb	r2, r2
   2cd3c:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   2cd3e:	2392      	movs	r3, #146	; 0x92
   2cd40:	009b      	lsls	r3, r3, #2
   2cd42:	18fb      	adds	r3, r7, r3
   2cd44:	681b      	ldr	r3, [r3, #0]
   2cd46:	330b      	adds	r3, #11
   2cd48:	2200      	movs	r2, #0
   2cd4a:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   2cd4c:	2392      	movs	r3, #146	; 0x92
   2cd4e:	009b      	lsls	r3, r3, #2
   2cd50:	18fb      	adds	r3, r7, r3
   2cd52:	681b      	ldr	r3, [r3, #0]
   2cd54:	331c      	adds	r3, #28
   2cd56:	2200      	movs	r2, #0
   2cd58:	701a      	strb	r2, [r3, #0]
   2cd5a:	2392      	movs	r3, #146	; 0x92
   2cd5c:	009b      	lsls	r3, r3, #2
   2cd5e:	18fb      	adds	r3, r7, r3
   2cd60:	681b      	ldr	r3, [r3, #0]
   2cd62:	331d      	adds	r3, #29
   2cd64:	2200      	movs	r2, #0
   2cd66:	701a      	strb	r2, [r3, #0]
   2cd68:	2392      	movs	r3, #146	; 0x92
   2cd6a:	009b      	lsls	r3, r3, #2
   2cd6c:	18fb      	adds	r3, r7, r3
   2cd6e:	681b      	ldr	r3, [r3, #0]
   2cd70:	331e      	adds	r3, #30
   2cd72:	2200      	movs	r2, #0
   2cd74:	701a      	strb	r2, [r3, #0]
   2cd76:	2392      	movs	r3, #146	; 0x92
   2cd78:	009b      	lsls	r3, r3, #2
   2cd7a:	18fb      	adds	r3, r7, r3
   2cd7c:	681b      	ldr	r3, [r3, #0]
   2cd7e:	331f      	adds	r3, #31
   2cd80:	2200      	movs	r2, #0
   2cd82:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
   2cd84:	2392      	movs	r3, #146	; 0x92
   2cd86:	009b      	lsls	r3, r3, #2
   2cd88:	18fb      	adds	r3, r7, r3
   2cd8a:	681b      	ldr	r3, [r3, #0]
   2cd8c:	3315      	adds	r3, #21
   2cd8e:	781b      	ldrb	r3, [r3, #0]
   2cd90:	021b      	lsls	r3, r3, #8
   2cd92:	b21a      	sxth	r2, r3
   2cd94:	2392      	movs	r3, #146	; 0x92
   2cd96:	009b      	lsls	r3, r3, #2
   2cd98:	18fb      	adds	r3, r7, r3
   2cd9a:	681b      	ldr	r3, [r3, #0]
   2cd9c:	3314      	adds	r3, #20
   2cd9e:	781b      	ldrb	r3, [r3, #0]
   2cda0:	b21b      	sxth	r3, r3
   2cda2:	4313      	orrs	r3, r2
   2cda4:	b21b      	sxth	r3, r3
   2cda6:	b29b      	uxth	r3, r3
   2cda8:	041b      	lsls	r3, r3, #16
   2cdaa:	2292      	movs	r2, #146	; 0x92
   2cdac:	0092      	lsls	r2, r2, #2
   2cdae:	18ba      	adds	r2, r7, r2
   2cdb0:	6812      	ldr	r2, [r2, #0]
   2cdb2:	321b      	adds	r2, #27
   2cdb4:	7812      	ldrb	r2, [r2, #0]
   2cdb6:	0212      	lsls	r2, r2, #8
   2cdb8:	b211      	sxth	r1, r2
   2cdba:	2292      	movs	r2, #146	; 0x92
   2cdbc:	0092      	lsls	r2, r2, #2
   2cdbe:	18ba      	adds	r2, r7, r2
   2cdc0:	6812      	ldr	r2, [r2, #0]
   2cdc2:	321a      	adds	r2, #26
   2cdc4:	7812      	ldrb	r2, [r2, #0]
   2cdc6:	b212      	sxth	r2, r2
   2cdc8:	430a      	orrs	r2, r1
   2cdca:	b212      	sxth	r2, r2
   2cdcc:	b292      	uxth	r2, r2
   2cdce:	4313      	orrs	r3, r2
   2cdd0:	2290      	movs	r2, #144	; 0x90
   2cdd2:	0092      	lsls	r2, r2, #2
   2cdd4:	18ba      	adds	r2, r7, r2
   2cdd6:	6013      	str	r3, [r2, #0]
			ST_CLUST(dir, 0);					/* cluster = 0 */
   2cdd8:	2392      	movs	r3, #146	; 0x92
   2cdda:	009b      	lsls	r3, r3, #2
   2cddc:	18fb      	adds	r3, r7, r3
   2cdde:	681b      	ldr	r3, [r3, #0]
   2cde0:	331a      	adds	r3, #26
   2cde2:	2200      	movs	r2, #0
   2cde4:	701a      	strb	r2, [r3, #0]
   2cde6:	2392      	movs	r3, #146	; 0x92
   2cde8:	009b      	lsls	r3, r3, #2
   2cdea:	18fb      	adds	r3, r7, r3
   2cdec:	681b      	ldr	r3, [r3, #0]
   2cdee:	331b      	adds	r3, #27
   2cdf0:	2200      	movs	r2, #0
   2cdf2:	701a      	strb	r2, [r3, #0]
   2cdf4:	2392      	movs	r3, #146	; 0x92
   2cdf6:	009b      	lsls	r3, r3, #2
   2cdf8:	18fb      	adds	r3, r7, r3
   2cdfa:	681b      	ldr	r3, [r3, #0]
   2cdfc:	3314      	adds	r3, #20
   2cdfe:	2200      	movs	r2, #0
   2ce00:	701a      	strb	r2, [r3, #0]
   2ce02:	2392      	movs	r3, #146	; 0x92
   2ce04:	009b      	lsls	r3, r3, #2
   2ce06:	18fb      	adds	r3, r7, r3
   2ce08:	681b      	ldr	r3, [r3, #0]
   2ce0a:	3315      	adds	r3, #21
   2ce0c:	2200      	movs	r2, #0
   2ce0e:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
   2ce10:	2387      	movs	r3, #135	; 0x87
   2ce12:	009b      	lsls	r3, r3, #2
   2ce14:	18fb      	adds	r3, r7, r3
   2ce16:	681b      	ldr	r3, [r3, #0]
   2ce18:	2201      	movs	r2, #1
   2ce1a:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   2ce1c:	2390      	movs	r3, #144	; 0x90
   2ce1e:	009b      	lsls	r3, r3, #2
   2ce20:	18fb      	adds	r3, r7, r3
   2ce22:	681b      	ldr	r3, [r3, #0]
   2ce24:	2b00      	cmp	r3, #0
   2ce26:	d100      	bne.n	2ce2a <f_open+0x2fe>
   2ce28:	e076      	b.n	2cf18 <f_open+0x3ec>
				dw = dj.fs->winsect;
   2ce2a:	2387      	movs	r3, #135	; 0x87
   2ce2c:	009b      	lsls	r3, r3, #2
   2ce2e:	18fb      	adds	r3, r7, r3
   2ce30:	681b      	ldr	r3, [r3, #0]
   2ce32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2ce34:	2291      	movs	r2, #145	; 0x91
   2ce36:	0092      	lsls	r2, r2, #2
   2ce38:	18ba      	adds	r2, r7, r2
   2ce3a:	6013      	str	r3, [r2, #0]
				res = remove_chain(dj.fs, cl);
   2ce3c:	2387      	movs	r3, #135	; 0x87
   2ce3e:	009b      	lsls	r3, r3, #2
   2ce40:	18fb      	adds	r3, r7, r3
   2ce42:	681b      	ldr	r3, [r3, #0]
   2ce44:	4a21      	ldr	r2, [pc, #132]	; (2cecc <f_open+0x3a0>)
   2ce46:	18bc      	adds	r4, r7, r2
   2ce48:	2290      	movs	r2, #144	; 0x90
   2ce4a:	0092      	lsls	r2, r2, #2
   2ce4c:	18ba      	adds	r2, r7, r2
   2ce4e:	6812      	ldr	r2, [r2, #0]
   2ce50:	0011      	movs	r1, r2
   2ce52:	0018      	movs	r0, r3
   2ce54:	4b22      	ldr	r3, [pc, #136]	; (2cee0 <f_open+0x3b4>)
   2ce56:	4798      	blx	r3
   2ce58:	0003      	movs	r3, r0
   2ce5a:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
   2ce5c:	4b1b      	ldr	r3, [pc, #108]	; (2cecc <f_open+0x3a0>)
   2ce5e:	18fb      	adds	r3, r7, r3
   2ce60:	781b      	ldrb	r3, [r3, #0]
   2ce62:	2b00      	cmp	r3, #0
   2ce64:	d158      	bne.n	2cf18 <f_open+0x3ec>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   2ce66:	2387      	movs	r3, #135	; 0x87
   2ce68:	009b      	lsls	r3, r3, #2
   2ce6a:	18fb      	adds	r3, r7, r3
   2ce6c:	681b      	ldr	r3, [r3, #0]
   2ce6e:	2290      	movs	r2, #144	; 0x90
   2ce70:	0092      	lsls	r2, r2, #2
   2ce72:	18ba      	adds	r2, r7, r2
   2ce74:	6812      	ldr	r2, [r2, #0]
   2ce76:	3a01      	subs	r2, #1
   2ce78:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
   2ce7a:	2387      	movs	r3, #135	; 0x87
   2ce7c:	009b      	lsls	r3, r3, #2
   2ce7e:	18fb      	adds	r3, r7, r3
   2ce80:	681b      	ldr	r3, [r3, #0]
   2ce82:	4a12      	ldr	r2, [pc, #72]	; (2cecc <f_open+0x3a0>)
   2ce84:	18bc      	adds	r4, r7, r2
   2ce86:	2291      	movs	r2, #145	; 0x91
   2ce88:	0092      	lsls	r2, r2, #2
   2ce8a:	18ba      	adds	r2, r7, r2
   2ce8c:	6812      	ldr	r2, [r2, #0]
   2ce8e:	0011      	movs	r1, r2
   2ce90:	0018      	movs	r0, r3
   2ce92:	4b14      	ldr	r3, [pc, #80]	; (2cee4 <f_open+0x3b8>)
   2ce94:	4798      	blx	r3
   2ce96:	0003      	movs	r3, r0
   2ce98:	7023      	strb	r3, [r4, #0]
   2ce9a:	e03d      	b.n	2cf18 <f_open+0x3ec>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   2ce9c:	4b0b      	ldr	r3, [pc, #44]	; (2cecc <f_open+0x3a0>)
   2ce9e:	18fb      	adds	r3, r7, r3
   2cea0:	781b      	ldrb	r3, [r3, #0]
   2cea2:	2b00      	cmp	r3, #0
   2cea4:	d138      	bne.n	2cf18 <f_open+0x3ec>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   2cea6:	2392      	movs	r3, #146	; 0x92
   2cea8:	009b      	lsls	r3, r3, #2
   2ceaa:	18fb      	adds	r3, r7, r3
   2ceac:	681b      	ldr	r3, [r3, #0]
   2ceae:	330b      	adds	r3, #11
   2ceb0:	781b      	ldrb	r3, [r3, #0]
   2ceb2:	001a      	movs	r2, r3
   2ceb4:	2310      	movs	r3, #16
   2ceb6:	4013      	ands	r3, r2
   2ceb8:	d016      	beq.n	2cee8 <f_open+0x3bc>
				res = FR_NO_FILE;
   2ceba:	4b04      	ldr	r3, [pc, #16]	; (2cecc <f_open+0x3a0>)
   2cebc:	18fb      	adds	r3, r7, r3
   2cebe:	2204      	movs	r2, #4
   2cec0:	701a      	strb	r2, [r3, #0]
   2cec2:	e029      	b.n	2cf18 <f_open+0x3ec>
   2cec4:	fffffdac 	.word	0xfffffdac
   2cec8:	fffffdb7 	.word	0xfffffdb7
   2cecc:	0000024f 	.word	0x0000024f
   2ced0:	0002c485 	.word	0x0002c485
   2ced4:	0002c279 	.word	0x0002c279
   2ced8:	0002bac9 	.word	0x0002bac9
   2cedc:	0002a8c1 	.word	0x0002a8c1
   2cee0:	0002b045 	.word	0x0002b045
   2cee4:	0002aa05 	.word	0x0002aa05
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   2cee8:	4b5a      	ldr	r3, [pc, #360]	; (2d054 <f_open+0x528>)
   2ceea:	2294      	movs	r2, #148	; 0x94
   2ceec:	0092      	lsls	r2, r2, #2
   2ceee:	4694      	mov	ip, r2
   2cef0:	44bc      	add	ip, r7
   2cef2:	4463      	add	r3, ip
   2cef4:	781b      	ldrb	r3, [r3, #0]
   2cef6:	2202      	movs	r2, #2
   2cef8:	4013      	ands	r3, r2
   2cefa:	d00d      	beq.n	2cf18 <f_open+0x3ec>
   2cefc:	2392      	movs	r3, #146	; 0x92
   2cefe:	009b      	lsls	r3, r3, #2
   2cf00:	18fb      	adds	r3, r7, r3
   2cf02:	681b      	ldr	r3, [r3, #0]
   2cf04:	330b      	adds	r3, #11
   2cf06:	781b      	ldrb	r3, [r3, #0]
   2cf08:	001a      	movs	r2, r3
   2cf0a:	2301      	movs	r3, #1
   2cf0c:	4013      	ands	r3, r2
   2cf0e:	d003      	beq.n	2cf18 <f_open+0x3ec>
					res = FR_DENIED;
   2cf10:	4b51      	ldr	r3, [pc, #324]	; (2d058 <f_open+0x52c>)
   2cf12:	18fb      	adds	r3, r7, r3
   2cf14:	2207      	movs	r2, #7
   2cf16:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
   2cf18:	4b4f      	ldr	r3, [pc, #316]	; (2d058 <f_open+0x52c>)
   2cf1a:	18fb      	adds	r3, r7, r3
   2cf1c:	781b      	ldrb	r3, [r3, #0]
   2cf1e:	2b00      	cmp	r3, #0
   2cf20:	d126      	bne.n	2cf70 <f_open+0x444>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   2cf22:	4b4c      	ldr	r3, [pc, #304]	; (2d054 <f_open+0x528>)
   2cf24:	2294      	movs	r2, #148	; 0x94
   2cf26:	0092      	lsls	r2, r2, #2
   2cf28:	4694      	mov	ip, r2
   2cf2a:	44bc      	add	ip, r7
   2cf2c:	4463      	add	r3, ip
   2cf2e:	781b      	ldrb	r3, [r3, #0]
   2cf30:	2208      	movs	r2, #8
   2cf32:	4013      	ands	r3, r2
   2cf34:	d00f      	beq.n	2cf56 <f_open+0x42a>
			mode |= FA__WRITTEN;
   2cf36:	4b47      	ldr	r3, [pc, #284]	; (2d054 <f_open+0x528>)
   2cf38:	2294      	movs	r2, #148	; 0x94
   2cf3a:	0092      	lsls	r2, r2, #2
   2cf3c:	4694      	mov	ip, r2
   2cf3e:	44bc      	add	ip, r7
   2cf40:	4463      	add	r3, ip
   2cf42:	4a44      	ldr	r2, [pc, #272]	; (2d054 <f_open+0x528>)
   2cf44:	2194      	movs	r1, #148	; 0x94
   2cf46:	0089      	lsls	r1, r1, #2
   2cf48:	468c      	mov	ip, r1
   2cf4a:	44bc      	add	ip, r7
   2cf4c:	4462      	add	r2, ip
   2cf4e:	7812      	ldrb	r2, [r2, #0]
   2cf50:	2120      	movs	r1, #32
   2cf52:	430a      	orrs	r2, r1
   2cf54:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   2cf56:	2387      	movs	r3, #135	; 0x87
   2cf58:	009b      	lsls	r3, r3, #2
   2cf5a:	18fb      	adds	r3, r7, r3
   2cf5c:	681b      	ldr	r3, [r3, #0]
   2cf5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2cf60:	68fb      	ldr	r3, [r7, #12]
   2cf62:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
   2cf64:	68fb      	ldr	r3, [r7, #12]
   2cf66:	2292      	movs	r2, #146	; 0x92
   2cf68:	0092      	lsls	r2, r2, #2
   2cf6a:	18ba      	adds	r2, r7, r2
   2cf6c:	6812      	ldr	r2, [r2, #0]
   2cf6e:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
   2cf70:	4b39      	ldr	r3, [pc, #228]	; (2d058 <f_open+0x52c>)
   2cf72:	18fb      	adds	r3, r7, r3
   2cf74:	781b      	ldrb	r3, [r3, #0]
   2cf76:	2b00      	cmp	r3, #0
   2cf78:	d163      	bne.n	2d042 <f_open+0x516>
		fp->flag = mode;					/* File access mode */
   2cf7a:	68fb      	ldr	r3, [r7, #12]
   2cf7c:	4a35      	ldr	r2, [pc, #212]	; (2d054 <f_open+0x528>)
   2cf7e:	2194      	movs	r1, #148	; 0x94
   2cf80:	0089      	lsls	r1, r1, #2
   2cf82:	468c      	mov	ip, r1
   2cf84:	44bc      	add	ip, r7
   2cf86:	4462      	add	r2, ip
   2cf88:	7812      	ldrb	r2, [r2, #0]
   2cf8a:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   2cf8c:	2392      	movs	r3, #146	; 0x92
   2cf8e:	009b      	lsls	r3, r3, #2
   2cf90:	18fb      	adds	r3, r7, r3
   2cf92:	681b      	ldr	r3, [r3, #0]
   2cf94:	3315      	adds	r3, #21
   2cf96:	781b      	ldrb	r3, [r3, #0]
   2cf98:	021b      	lsls	r3, r3, #8
   2cf9a:	b21a      	sxth	r2, r3
   2cf9c:	2392      	movs	r3, #146	; 0x92
   2cf9e:	009b      	lsls	r3, r3, #2
   2cfa0:	18fb      	adds	r3, r7, r3
   2cfa2:	681b      	ldr	r3, [r3, #0]
   2cfa4:	3314      	adds	r3, #20
   2cfa6:	781b      	ldrb	r3, [r3, #0]
   2cfa8:	b21b      	sxth	r3, r3
   2cfaa:	4313      	orrs	r3, r2
   2cfac:	b21b      	sxth	r3, r3
   2cfae:	b29b      	uxth	r3, r3
   2cfb0:	041b      	lsls	r3, r3, #16
   2cfb2:	2292      	movs	r2, #146	; 0x92
   2cfb4:	0092      	lsls	r2, r2, #2
   2cfb6:	18ba      	adds	r2, r7, r2
   2cfb8:	6812      	ldr	r2, [r2, #0]
   2cfba:	321b      	adds	r2, #27
   2cfbc:	7812      	ldrb	r2, [r2, #0]
   2cfbe:	0212      	lsls	r2, r2, #8
   2cfc0:	b211      	sxth	r1, r2
   2cfc2:	2292      	movs	r2, #146	; 0x92
   2cfc4:	0092      	lsls	r2, r2, #2
   2cfc6:	18ba      	adds	r2, r7, r2
   2cfc8:	6812      	ldr	r2, [r2, #0]
   2cfca:	321a      	adds	r2, #26
   2cfcc:	7812      	ldrb	r2, [r2, #0]
   2cfce:	b212      	sxth	r2, r2
   2cfd0:	430a      	orrs	r2, r1
   2cfd2:	b212      	sxth	r2, r2
   2cfd4:	b292      	uxth	r2, r2
   2cfd6:	431a      	orrs	r2, r3
   2cfd8:	68fb      	ldr	r3, [r7, #12]
   2cfda:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   2cfdc:	2392      	movs	r3, #146	; 0x92
   2cfde:	009b      	lsls	r3, r3, #2
   2cfe0:	18fb      	adds	r3, r7, r3
   2cfe2:	681b      	ldr	r3, [r3, #0]
   2cfe4:	331f      	adds	r3, #31
   2cfe6:	781b      	ldrb	r3, [r3, #0]
   2cfe8:	061a      	lsls	r2, r3, #24
   2cfea:	2392      	movs	r3, #146	; 0x92
   2cfec:	009b      	lsls	r3, r3, #2
   2cfee:	18fb      	adds	r3, r7, r3
   2cff0:	681b      	ldr	r3, [r3, #0]
   2cff2:	331e      	adds	r3, #30
   2cff4:	781b      	ldrb	r3, [r3, #0]
   2cff6:	041b      	lsls	r3, r3, #16
   2cff8:	4313      	orrs	r3, r2
   2cffa:	2292      	movs	r2, #146	; 0x92
   2cffc:	0092      	lsls	r2, r2, #2
   2cffe:	18ba      	adds	r2, r7, r2
   2d000:	6812      	ldr	r2, [r2, #0]
   2d002:	321d      	adds	r2, #29
   2d004:	7812      	ldrb	r2, [r2, #0]
   2d006:	0212      	lsls	r2, r2, #8
   2d008:	4313      	orrs	r3, r2
   2d00a:	2292      	movs	r2, #146	; 0x92
   2d00c:	0092      	lsls	r2, r2, #2
   2d00e:	18ba      	adds	r2, r7, r2
   2d010:	6812      	ldr	r2, [r2, #0]
   2d012:	321c      	adds	r2, #28
   2d014:	7812      	ldrb	r2, [r2, #0]
   2d016:	431a      	orrs	r2, r3
   2d018:	68fb      	ldr	r3, [r7, #12]
   2d01a:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
   2d01c:	68fb      	ldr	r3, [r7, #12]
   2d01e:	2200      	movs	r2, #0
   2d020:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
   2d022:	68fb      	ldr	r3, [r7, #12]
   2d024:	2200      	movs	r2, #0
   2d026:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   2d028:	2387      	movs	r3, #135	; 0x87
   2d02a:	009b      	lsls	r3, r3, #2
   2d02c:	18fb      	adds	r3, r7, r3
   2d02e:	681a      	ldr	r2, [r3, #0]
   2d030:	68fb      	ldr	r3, [r7, #12]
   2d032:	601a      	str	r2, [r3, #0]
   2d034:	2387      	movs	r3, #135	; 0x87
   2d036:	009b      	lsls	r3, r3, #2
   2d038:	18fb      	adds	r3, r7, r3
   2d03a:	681b      	ldr	r3, [r3, #0]
   2d03c:	88da      	ldrh	r2, [r3, #6]
   2d03e:	68fb      	ldr	r3, [r7, #12]
   2d040:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
   2d042:	4b05      	ldr	r3, [pc, #20]	; (2d058 <f_open+0x52c>)
   2d044:	18fb      	adds	r3, r7, r3
   2d046:	781b      	ldrb	r3, [r3, #0]
}
   2d048:	0018      	movs	r0, r3
   2d04a:	46bd      	mov	sp, r7
   2d04c:	2395      	movs	r3, #149	; 0x95
   2d04e:	009b      	lsls	r3, r3, #2
   2d050:	449d      	add	sp, r3
   2d052:	bd90      	pop	{r4, r7, pc}
   2d054:	fffffdb7 	.word	0xfffffdb7
   2d058:	0000024f 	.word	0x0000024f

0002d05c <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   2d05c:	b590      	push	{r4, r7, lr}
   2d05e:	b08b      	sub	sp, #44	; 0x2c
   2d060:	af00      	add	r7, sp, #0
   2d062:	60f8      	str	r0, [r7, #12]
   2d064:	60b9      	str	r1, [r7, #8]
   2d066:	607a      	str	r2, [r7, #4]
   2d068:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
   2d06a:	68bb      	ldr	r3, [r7, #8]
   2d06c:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   2d06e:	683b      	ldr	r3, [r7, #0]
   2d070:	2200      	movs	r2, #0
   2d072:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   2d074:	68fb      	ldr	r3, [r7, #12]
   2d076:	681a      	ldr	r2, [r3, #0]
   2d078:	68fb      	ldr	r3, [r7, #12]
   2d07a:	889b      	ldrh	r3, [r3, #4]
   2d07c:	2117      	movs	r1, #23
   2d07e:	187c      	adds	r4, r7, r1
   2d080:	0019      	movs	r1, r3
   2d082:	0010      	movs	r0, r2
   2d084:	4bc3      	ldr	r3, [pc, #780]	; (2d394 <f_write+0x338>)
   2d086:	4798      	blx	r3
   2d088:	0003      	movs	r3, r0
   2d08a:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   2d08c:	2317      	movs	r3, #23
   2d08e:	18fb      	adds	r3, r7, r3
   2d090:	781b      	ldrb	r3, [r3, #0]
   2d092:	2b00      	cmp	r3, #0
   2d094:	d003      	beq.n	2d09e <f_write+0x42>
   2d096:	2317      	movs	r3, #23
   2d098:	18fb      	adds	r3, r7, r3
   2d09a:	781b      	ldrb	r3, [r3, #0]
   2d09c:	e176      	b.n	2d38c <f_write+0x330>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   2d09e:	68fb      	ldr	r3, [r7, #12]
   2d0a0:	799b      	ldrb	r3, [r3, #6]
   2d0a2:	b25b      	sxtb	r3, r3
   2d0a4:	2b00      	cmp	r3, #0
   2d0a6:	da01      	bge.n	2d0ac <f_write+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   2d0a8:	2302      	movs	r3, #2
   2d0aa:	e16f      	b.n	2d38c <f_write+0x330>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   2d0ac:	68fb      	ldr	r3, [r7, #12]
   2d0ae:	799b      	ldrb	r3, [r3, #6]
   2d0b0:	001a      	movs	r2, r3
   2d0b2:	2302      	movs	r3, #2
   2d0b4:	4013      	ands	r3, r2
   2d0b6:	d101      	bne.n	2d0bc <f_write+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
   2d0b8:	2307      	movs	r3, #7
   2d0ba:	e167      	b.n	2d38c <f_write+0x330>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   2d0bc:	68fb      	ldr	r3, [r7, #12]
   2d0be:	68da      	ldr	r2, [r3, #12]
   2d0c0:	687b      	ldr	r3, [r7, #4]
   2d0c2:	18d2      	adds	r2, r2, r3
   2d0c4:	68fb      	ldr	r3, [r7, #12]
   2d0c6:	68db      	ldr	r3, [r3, #12]
   2d0c8:	429a      	cmp	r2, r3
   2d0ca:	d300      	bcc.n	2d0ce <f_write+0x72>
   2d0cc:	e146      	b.n	2d35c <f_write+0x300>
   2d0ce:	2300      	movs	r3, #0
   2d0d0:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
   2d0d2:	e143      	b.n	2d35c <f_write+0x300>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   2d0d4:	68fb      	ldr	r3, [r7, #12]
   2d0d6:	689b      	ldr	r3, [r3, #8]
   2d0d8:	05db      	lsls	r3, r3, #23
   2d0da:	0ddb      	lsrs	r3, r3, #23
   2d0dc:	d000      	beq.n	2d0e0 <f_write+0x84>
   2d0de:	e0f6      	b.n	2d2ce <f_write+0x272>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   2d0e0:	68fb      	ldr	r3, [r7, #12]
   2d0e2:	689b      	ldr	r3, [r3, #8]
   2d0e4:	0a5b      	lsrs	r3, r3, #9
   2d0e6:	b2da      	uxtb	r2, r3
   2d0e8:	68fb      	ldr	r3, [r7, #12]
   2d0ea:	681b      	ldr	r3, [r3, #0]
   2d0ec:	789b      	ldrb	r3, [r3, #2]
   2d0ee:	3b01      	subs	r3, #1
   2d0f0:	b2d9      	uxtb	r1, r3
   2d0f2:	2316      	movs	r3, #22
   2d0f4:	18fb      	adds	r3, r7, r3
   2d0f6:	400a      	ands	r2, r1
   2d0f8:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
   2d0fa:	2316      	movs	r3, #22
   2d0fc:	18fb      	adds	r3, r7, r3
   2d0fe:	781b      	ldrb	r3, [r3, #0]
   2d100:	2b00      	cmp	r3, #0
   2d102:	d140      	bne.n	2d186 <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
   2d104:	68fb      	ldr	r3, [r7, #12]
   2d106:	689b      	ldr	r3, [r3, #8]
   2d108:	2b00      	cmp	r3, #0
   2d10a:	d111      	bne.n	2d130 <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
   2d10c:	68fb      	ldr	r3, [r7, #12]
   2d10e:	691b      	ldr	r3, [r3, #16]
   2d110:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
   2d112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d114:	2b00      	cmp	r3, #0
   2d116:	d115      	bne.n	2d144 <f_write+0xe8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   2d118:	68fb      	ldr	r3, [r7, #12]
   2d11a:	681b      	ldr	r3, [r3, #0]
   2d11c:	2100      	movs	r1, #0
   2d11e:	0018      	movs	r0, r3
   2d120:	4b9d      	ldr	r3, [pc, #628]	; (2d398 <f_write+0x33c>)
   2d122:	4798      	blx	r3
   2d124:	0003      	movs	r3, r0
   2d126:	627b      	str	r3, [r7, #36]	; 0x24
   2d128:	68fb      	ldr	r3, [r7, #12]
   2d12a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2d12c:	611a      	str	r2, [r3, #16]
   2d12e:	e009      	b.n	2d144 <f_write+0xe8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   2d130:	68fb      	ldr	r3, [r7, #12]
   2d132:	681a      	ldr	r2, [r3, #0]
   2d134:	68fb      	ldr	r3, [r7, #12]
   2d136:	695b      	ldr	r3, [r3, #20]
   2d138:	0019      	movs	r1, r3
   2d13a:	0010      	movs	r0, r2
   2d13c:	4b96      	ldr	r3, [pc, #600]	; (2d398 <f_write+0x33c>)
   2d13e:	4798      	blx	r3
   2d140:	0003      	movs	r3, r0
   2d142:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2d144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d146:	2b00      	cmp	r3, #0
   2d148:	d100      	bne.n	2d14c <f_write+0xf0>
   2d14a:	e10c      	b.n	2d366 <f_write+0x30a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   2d14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d14e:	2b01      	cmp	r3, #1
   2d150:	d109      	bne.n	2d166 <f_write+0x10a>
   2d152:	68fb      	ldr	r3, [r7, #12]
   2d154:	799b      	ldrb	r3, [r3, #6]
   2d156:	2280      	movs	r2, #128	; 0x80
   2d158:	4252      	negs	r2, r2
   2d15a:	4313      	orrs	r3, r2
   2d15c:	b2da      	uxtb	r2, r3
   2d15e:	68fb      	ldr	r3, [r7, #12]
   2d160:	719a      	strb	r2, [r3, #6]
   2d162:	2302      	movs	r3, #2
   2d164:	e112      	b.n	2d38c <f_write+0x330>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   2d166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d168:	3301      	adds	r3, #1
   2d16a:	d109      	bne.n	2d180 <f_write+0x124>
   2d16c:	68fb      	ldr	r3, [r7, #12]
   2d16e:	799b      	ldrb	r3, [r3, #6]
   2d170:	2280      	movs	r2, #128	; 0x80
   2d172:	4252      	negs	r2, r2
   2d174:	4313      	orrs	r3, r2
   2d176:	b2da      	uxtb	r2, r3
   2d178:	68fb      	ldr	r3, [r7, #12]
   2d17a:	719a      	strb	r2, [r3, #6]
   2d17c:	2301      	movs	r3, #1
   2d17e:	e105      	b.n	2d38c <f_write+0x330>
				fp->clust = clst;			/* Update current cluster */
   2d180:	68fb      	ldr	r3, [r7, #12]
   2d182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2d184:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   2d186:	68fb      	ldr	r3, [r7, #12]
   2d188:	681b      	ldr	r3, [r3, #0]
   2d18a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2d18c:	68fb      	ldr	r3, [r7, #12]
   2d18e:	699b      	ldr	r3, [r3, #24]
   2d190:	429a      	cmp	r2, r3
   2d192:	d111      	bne.n	2d1b8 <f_write+0x15c>
   2d194:	68fb      	ldr	r3, [r7, #12]
   2d196:	681b      	ldr	r3, [r3, #0]
   2d198:	2100      	movs	r1, #0
   2d19a:	0018      	movs	r0, r3
   2d19c:	4b7f      	ldr	r3, [pc, #508]	; (2d39c <f_write+0x340>)
   2d19e:	4798      	blx	r3
   2d1a0:	1e03      	subs	r3, r0, #0
   2d1a2:	d009      	beq.n	2d1b8 <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
   2d1a4:	68fb      	ldr	r3, [r7, #12]
   2d1a6:	799b      	ldrb	r3, [r3, #6]
   2d1a8:	2280      	movs	r2, #128	; 0x80
   2d1aa:	4252      	negs	r2, r2
   2d1ac:	4313      	orrs	r3, r2
   2d1ae:	b2da      	uxtb	r2, r3
   2d1b0:	68fb      	ldr	r3, [r7, #12]
   2d1b2:	719a      	strb	r2, [r3, #6]
   2d1b4:	2301      	movs	r3, #1
   2d1b6:	e0e9      	b.n	2d38c <f_write+0x330>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   2d1b8:	68fb      	ldr	r3, [r7, #12]
   2d1ba:	681a      	ldr	r2, [r3, #0]
   2d1bc:	68fb      	ldr	r3, [r7, #12]
   2d1be:	695b      	ldr	r3, [r3, #20]
   2d1c0:	0019      	movs	r1, r3
   2d1c2:	0010      	movs	r0, r2
   2d1c4:	4b76      	ldr	r3, [pc, #472]	; (2d3a0 <f_write+0x344>)
   2d1c6:	4798      	blx	r3
   2d1c8:	0003      	movs	r3, r0
   2d1ca:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   2d1cc:	693b      	ldr	r3, [r7, #16]
   2d1ce:	2b00      	cmp	r3, #0
   2d1d0:	d109      	bne.n	2d1e6 <f_write+0x18a>
   2d1d2:	68fb      	ldr	r3, [r7, #12]
   2d1d4:	799b      	ldrb	r3, [r3, #6]
   2d1d6:	2280      	movs	r2, #128	; 0x80
   2d1d8:	4252      	negs	r2, r2
   2d1da:	4313      	orrs	r3, r2
   2d1dc:	b2da      	uxtb	r2, r3
   2d1de:	68fb      	ldr	r3, [r7, #12]
   2d1e0:	719a      	strb	r2, [r3, #6]
   2d1e2:	2302      	movs	r3, #2
   2d1e4:	e0d2      	b.n	2d38c <f_write+0x330>
			sect += csect;
   2d1e6:	2316      	movs	r3, #22
   2d1e8:	18fb      	adds	r3, r7, r3
   2d1ea:	781b      	ldrb	r3, [r3, #0]
   2d1ec:	693a      	ldr	r2, [r7, #16]
   2d1ee:	18d3      	adds	r3, r2, r3
   2d1f0:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   2d1f2:	687b      	ldr	r3, [r7, #4]
   2d1f4:	0a5b      	lsrs	r3, r3, #9
   2d1f6:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
   2d1f8:	69fb      	ldr	r3, [r7, #28]
   2d1fa:	2b00      	cmp	r3, #0
   2d1fc:	d048      	beq.n	2d290 <f_write+0x234>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   2d1fe:	2316      	movs	r3, #22
   2d200:	18fb      	adds	r3, r7, r3
   2d202:	781a      	ldrb	r2, [r3, #0]
   2d204:	69fb      	ldr	r3, [r7, #28]
   2d206:	18d2      	adds	r2, r2, r3
   2d208:	68fb      	ldr	r3, [r7, #12]
   2d20a:	681b      	ldr	r3, [r3, #0]
   2d20c:	789b      	ldrb	r3, [r3, #2]
   2d20e:	429a      	cmp	r2, r3
   2d210:	d908      	bls.n	2d224 <f_write+0x1c8>
					cc = fp->fs->csize - csect;
   2d212:	68fb      	ldr	r3, [r7, #12]
   2d214:	681b      	ldr	r3, [r3, #0]
   2d216:	789b      	ldrb	r3, [r3, #2]
   2d218:	001a      	movs	r2, r3
   2d21a:	2316      	movs	r3, #22
   2d21c:	18fb      	adds	r3, r7, r3
   2d21e:	781b      	ldrb	r3, [r3, #0]
   2d220:	1ad3      	subs	r3, r2, r3
   2d222:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   2d224:	68fb      	ldr	r3, [r7, #12]
   2d226:	681b      	ldr	r3, [r3, #0]
   2d228:	7858      	ldrb	r0, [r3, #1]
   2d22a:	69fb      	ldr	r3, [r7, #28]
   2d22c:	b2db      	uxtb	r3, r3
   2d22e:	693a      	ldr	r2, [r7, #16]
   2d230:	69b9      	ldr	r1, [r7, #24]
   2d232:	4c5c      	ldr	r4, [pc, #368]	; (2d3a4 <f_write+0x348>)
   2d234:	47a0      	blx	r4
   2d236:	1e03      	subs	r3, r0, #0
   2d238:	d009      	beq.n	2d24e <f_write+0x1f2>
					ABORT(fp->fs, FR_DISK_ERR);
   2d23a:	68fb      	ldr	r3, [r7, #12]
   2d23c:	799b      	ldrb	r3, [r3, #6]
   2d23e:	2280      	movs	r2, #128	; 0x80
   2d240:	4252      	negs	r2, r2
   2d242:	4313      	orrs	r3, r2
   2d244:	b2da      	uxtb	r2, r3
   2d246:	68fb      	ldr	r3, [r7, #12]
   2d248:	719a      	strb	r2, [r3, #6]
   2d24a:	2301      	movs	r3, #1
   2d24c:	e09e      	b.n	2d38c <f_write+0x330>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   2d24e:	68fb      	ldr	r3, [r7, #12]
   2d250:	681b      	ldr	r3, [r3, #0]
   2d252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2d254:	693b      	ldr	r3, [r7, #16]
   2d256:	1ad2      	subs	r2, r2, r3
   2d258:	69fb      	ldr	r3, [r7, #28]
   2d25a:	429a      	cmp	r2, r3
   2d25c:	d214      	bcs.n	2d288 <f_write+0x22c>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   2d25e:	68fb      	ldr	r3, [r7, #12]
   2d260:	681b      	ldr	r3, [r3, #0]
   2d262:	3330      	adds	r3, #48	; 0x30
   2d264:	0018      	movs	r0, r3
   2d266:	68fb      	ldr	r3, [r7, #12]
   2d268:	681b      	ldr	r3, [r3, #0]
   2d26a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2d26c:	693b      	ldr	r3, [r7, #16]
   2d26e:	1ad3      	subs	r3, r2, r3
   2d270:	025b      	lsls	r3, r3, #9
   2d272:	69ba      	ldr	r2, [r7, #24]
   2d274:	18d1      	adds	r1, r2, r3
   2d276:	2380      	movs	r3, #128	; 0x80
   2d278:	009b      	lsls	r3, r3, #2
   2d27a:	001a      	movs	r2, r3
   2d27c:	4b4a      	ldr	r3, [pc, #296]	; (2d3a8 <f_write+0x34c>)
   2d27e:	4798      	blx	r3
					fp->fs->wflag = 0;
   2d280:	68fb      	ldr	r3, [r7, #12]
   2d282:	681b      	ldr	r3, [r3, #0]
   2d284:	2200      	movs	r2, #0
   2d286:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   2d288:	69fb      	ldr	r3, [r7, #28]
   2d28a:	025b      	lsls	r3, r3, #9
   2d28c:	623b      	str	r3, [r7, #32]
				continue;
   2d28e:	e051      	b.n	2d334 <f_write+0x2d8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   2d290:	68fb      	ldr	r3, [r7, #12]
   2d292:	689a      	ldr	r2, [r3, #8]
   2d294:	68fb      	ldr	r3, [r7, #12]
   2d296:	68db      	ldr	r3, [r3, #12]
   2d298:	429a      	cmp	r2, r3
   2d29a:	d315      	bcc.n	2d2c8 <f_write+0x26c>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   2d29c:	68fb      	ldr	r3, [r7, #12]
   2d29e:	681b      	ldr	r3, [r3, #0]
   2d2a0:	2100      	movs	r1, #0
   2d2a2:	0018      	movs	r0, r3
   2d2a4:	4b3d      	ldr	r3, [pc, #244]	; (2d39c <f_write+0x340>)
   2d2a6:	4798      	blx	r3
   2d2a8:	1e03      	subs	r3, r0, #0
   2d2aa:	d009      	beq.n	2d2c0 <f_write+0x264>
   2d2ac:	68fb      	ldr	r3, [r7, #12]
   2d2ae:	799b      	ldrb	r3, [r3, #6]
   2d2b0:	2280      	movs	r2, #128	; 0x80
   2d2b2:	4252      	negs	r2, r2
   2d2b4:	4313      	orrs	r3, r2
   2d2b6:	b2da      	uxtb	r2, r3
   2d2b8:	68fb      	ldr	r3, [r7, #12]
   2d2ba:	719a      	strb	r2, [r3, #6]
   2d2bc:	2301      	movs	r3, #1
   2d2be:	e065      	b.n	2d38c <f_write+0x330>
				fp->fs->winsect = sect;
   2d2c0:	68fb      	ldr	r3, [r7, #12]
   2d2c2:	681b      	ldr	r3, [r3, #0]
   2d2c4:	693a      	ldr	r2, [r7, #16]
   2d2c6:	62da      	str	r2, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
   2d2c8:	68fb      	ldr	r3, [r7, #12]
   2d2ca:	693a      	ldr	r2, [r7, #16]
   2d2cc:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   2d2ce:	68fb      	ldr	r3, [r7, #12]
   2d2d0:	689b      	ldr	r3, [r3, #8]
   2d2d2:	05db      	lsls	r3, r3, #23
   2d2d4:	0ddb      	lsrs	r3, r3, #23
   2d2d6:	2280      	movs	r2, #128	; 0x80
   2d2d8:	0092      	lsls	r2, r2, #2
   2d2da:	1ad3      	subs	r3, r2, r3
   2d2dc:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
   2d2de:	6a3a      	ldr	r2, [r7, #32]
   2d2e0:	687b      	ldr	r3, [r7, #4]
   2d2e2:	429a      	cmp	r2, r3
   2d2e4:	d901      	bls.n	2d2ea <f_write+0x28e>
   2d2e6:	687b      	ldr	r3, [r7, #4]
   2d2e8:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   2d2ea:	68fb      	ldr	r3, [r7, #12]
   2d2ec:	681a      	ldr	r2, [r3, #0]
   2d2ee:	68fb      	ldr	r3, [r7, #12]
   2d2f0:	699b      	ldr	r3, [r3, #24]
   2d2f2:	0019      	movs	r1, r3
   2d2f4:	0010      	movs	r0, r2
   2d2f6:	4b29      	ldr	r3, [pc, #164]	; (2d39c <f_write+0x340>)
   2d2f8:	4798      	blx	r3
   2d2fa:	1e03      	subs	r3, r0, #0
   2d2fc:	d009      	beq.n	2d312 <f_write+0x2b6>
			ABORT(fp->fs, FR_DISK_ERR);
   2d2fe:	68fb      	ldr	r3, [r7, #12]
   2d300:	799b      	ldrb	r3, [r3, #6]
   2d302:	2280      	movs	r2, #128	; 0x80
   2d304:	4252      	negs	r2, r2
   2d306:	4313      	orrs	r3, r2
   2d308:	b2da      	uxtb	r2, r3
   2d30a:	68fb      	ldr	r3, [r7, #12]
   2d30c:	719a      	strb	r2, [r3, #6]
   2d30e:	2301      	movs	r3, #1
   2d310:	e03c      	b.n	2d38c <f_write+0x330>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   2d312:	68fb      	ldr	r3, [r7, #12]
   2d314:	681a      	ldr	r2, [r3, #0]
   2d316:	68fb      	ldr	r3, [r7, #12]
   2d318:	689b      	ldr	r3, [r3, #8]
   2d31a:	05db      	lsls	r3, r3, #23
   2d31c:	0ddb      	lsrs	r3, r3, #23
   2d31e:	3330      	adds	r3, #48	; 0x30
   2d320:	18d3      	adds	r3, r2, r3
   2d322:	6a3a      	ldr	r2, [r7, #32]
   2d324:	69b9      	ldr	r1, [r7, #24]
   2d326:	0018      	movs	r0, r3
   2d328:	4b1f      	ldr	r3, [pc, #124]	; (2d3a8 <f_write+0x34c>)
   2d32a:	4798      	blx	r3
		fp->fs->wflag = 1;
   2d32c:	68fb      	ldr	r3, [r7, #12]
   2d32e:	681b      	ldr	r3, [r3, #0]
   2d330:	2201      	movs	r2, #1
   2d332:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   2d334:	69ba      	ldr	r2, [r7, #24]
   2d336:	6a3b      	ldr	r3, [r7, #32]
   2d338:	18d3      	adds	r3, r2, r3
   2d33a:	61bb      	str	r3, [r7, #24]
   2d33c:	68fb      	ldr	r3, [r7, #12]
   2d33e:	689a      	ldr	r2, [r3, #8]
   2d340:	6a3b      	ldr	r3, [r7, #32]
   2d342:	18d2      	adds	r2, r2, r3
   2d344:	68fb      	ldr	r3, [r7, #12]
   2d346:	609a      	str	r2, [r3, #8]
   2d348:	683b      	ldr	r3, [r7, #0]
   2d34a:	681a      	ldr	r2, [r3, #0]
   2d34c:	6a3b      	ldr	r3, [r7, #32]
   2d34e:	18d2      	adds	r2, r2, r3
   2d350:	683b      	ldr	r3, [r7, #0]
   2d352:	601a      	str	r2, [r3, #0]
   2d354:	687a      	ldr	r2, [r7, #4]
   2d356:	6a3b      	ldr	r3, [r7, #32]
   2d358:	1ad3      	subs	r3, r2, r3
   2d35a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
   2d35c:	687b      	ldr	r3, [r7, #4]
   2d35e:	2b00      	cmp	r3, #0
   2d360:	d000      	beq.n	2d364 <f_write+0x308>
   2d362:	e6b7      	b.n	2d0d4 <f_write+0x78>
   2d364:	e000      	b.n	2d368 <f_write+0x30c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2d366:	46c0      	nop			; (mov r8, r8)
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   2d368:	68fb      	ldr	r3, [r7, #12]
   2d36a:	689a      	ldr	r2, [r3, #8]
   2d36c:	68fb      	ldr	r3, [r7, #12]
   2d36e:	68db      	ldr	r3, [r3, #12]
   2d370:	429a      	cmp	r2, r3
   2d372:	d903      	bls.n	2d37c <f_write+0x320>
   2d374:	68fb      	ldr	r3, [r7, #12]
   2d376:	689a      	ldr	r2, [r3, #8]
   2d378:	68fb      	ldr	r3, [r7, #12]
   2d37a:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   2d37c:	68fb      	ldr	r3, [r7, #12]
   2d37e:	799b      	ldrb	r3, [r3, #6]
   2d380:	2220      	movs	r2, #32
   2d382:	4313      	orrs	r3, r2
   2d384:	b2da      	uxtb	r2, r3
   2d386:	68fb      	ldr	r3, [r7, #12]
   2d388:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
   2d38a:	2300      	movs	r3, #0
}
   2d38c:	0018      	movs	r0, r3
   2d38e:	46bd      	mov	sp, r7
   2d390:	b00b      	add	sp, #44	; 0x2c
   2d392:	bd90      	pop	{r4, r7, pc}
   2d394:	0002ca81 	.word	0x0002ca81
   2d398:	0002b10d 	.word	0x0002b10d
   2d39c:	0002aa05 	.word	0x0002aa05
   2d3a0:	0002ac65 	.word	0x0002ac65
   2d3a4:	0002a6f1 	.word	0x0002a6f1
   2d3a8:	0002a921 	.word	0x0002a921

0002d3ac <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   2d3ac:	b590      	push	{r4, r7, lr}
   2d3ae:	b087      	sub	sp, #28
   2d3b0:	af00      	add	r7, sp, #0
   2d3b2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   2d3b4:	687b      	ldr	r3, [r7, #4]
   2d3b6:	681a      	ldr	r2, [r3, #0]
   2d3b8:	687b      	ldr	r3, [r7, #4]
   2d3ba:	889b      	ldrh	r3, [r3, #4]
   2d3bc:	2117      	movs	r1, #23
   2d3be:	187c      	adds	r4, r7, r1
   2d3c0:	0019      	movs	r1, r3
   2d3c2:	0010      	movs	r0, r2
   2d3c4:	4b55      	ldr	r3, [pc, #340]	; (2d51c <f_sync+0x170>)
   2d3c6:	4798      	blx	r3
   2d3c8:	0003      	movs	r3, r0
   2d3ca:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2d3cc:	2317      	movs	r3, #23
   2d3ce:	18fb      	adds	r3, r7, r3
   2d3d0:	781b      	ldrb	r3, [r3, #0]
   2d3d2:	2b00      	cmp	r3, #0
   2d3d4:	d000      	beq.n	2d3d8 <f_sync+0x2c>
   2d3d6:	e09a      	b.n	2d50e <f_sync+0x162>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   2d3d8:	687b      	ldr	r3, [r7, #4]
   2d3da:	799b      	ldrb	r3, [r3, #6]
   2d3dc:	001a      	movs	r2, r3
   2d3de:	2320      	movs	r3, #32
   2d3e0:	4013      	ands	r3, r2
   2d3e2:	d100      	bne.n	2d3e6 <f_sync+0x3a>
   2d3e4:	e093      	b.n	2d50e <f_sync+0x162>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
   2d3e6:	687b      	ldr	r3, [r7, #4]
   2d3e8:	681a      	ldr	r2, [r3, #0]
   2d3ea:	687b      	ldr	r3, [r7, #4]
   2d3ec:	69db      	ldr	r3, [r3, #28]
   2d3ee:	2117      	movs	r1, #23
   2d3f0:	187c      	adds	r4, r7, r1
   2d3f2:	0019      	movs	r1, r3
   2d3f4:	0010      	movs	r0, r2
   2d3f6:	4b4a      	ldr	r3, [pc, #296]	; (2d520 <f_sync+0x174>)
   2d3f8:	4798      	blx	r3
   2d3fa:	0003      	movs	r3, r0
   2d3fc:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
   2d3fe:	2317      	movs	r3, #23
   2d400:	18fb      	adds	r3, r7, r3
   2d402:	781b      	ldrb	r3, [r3, #0]
   2d404:	2b00      	cmp	r3, #0
   2d406:	d000      	beq.n	2d40a <f_sync+0x5e>
   2d408:	e081      	b.n	2d50e <f_sync+0x162>
				dir = fp->dir_ptr;
   2d40a:	687b      	ldr	r3, [r7, #4]
   2d40c:	6a1b      	ldr	r3, [r3, #32]
   2d40e:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   2d410:	693b      	ldr	r3, [r7, #16]
   2d412:	330b      	adds	r3, #11
   2d414:	693a      	ldr	r2, [r7, #16]
   2d416:	320b      	adds	r2, #11
   2d418:	7812      	ldrb	r2, [r2, #0]
   2d41a:	2120      	movs	r1, #32
   2d41c:	430a      	orrs	r2, r1
   2d41e:	b2d2      	uxtb	r2, r2
   2d420:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   2d422:	693b      	ldr	r3, [r7, #16]
   2d424:	331c      	adds	r3, #28
   2d426:	001a      	movs	r2, r3
   2d428:	687b      	ldr	r3, [r7, #4]
   2d42a:	68db      	ldr	r3, [r3, #12]
   2d42c:	b2db      	uxtb	r3, r3
   2d42e:	7013      	strb	r3, [r2, #0]
   2d430:	693b      	ldr	r3, [r7, #16]
   2d432:	331d      	adds	r3, #29
   2d434:	001a      	movs	r2, r3
   2d436:	687b      	ldr	r3, [r7, #4]
   2d438:	68db      	ldr	r3, [r3, #12]
   2d43a:	b29b      	uxth	r3, r3
   2d43c:	0a1b      	lsrs	r3, r3, #8
   2d43e:	b29b      	uxth	r3, r3
   2d440:	b2db      	uxtb	r3, r3
   2d442:	7013      	strb	r3, [r2, #0]
   2d444:	693b      	ldr	r3, [r7, #16]
   2d446:	331e      	adds	r3, #30
   2d448:	001a      	movs	r2, r3
   2d44a:	687b      	ldr	r3, [r7, #4]
   2d44c:	68db      	ldr	r3, [r3, #12]
   2d44e:	0c1b      	lsrs	r3, r3, #16
   2d450:	b2db      	uxtb	r3, r3
   2d452:	7013      	strb	r3, [r2, #0]
   2d454:	693b      	ldr	r3, [r7, #16]
   2d456:	331f      	adds	r3, #31
   2d458:	001a      	movs	r2, r3
   2d45a:	687b      	ldr	r3, [r7, #4]
   2d45c:	68db      	ldr	r3, [r3, #12]
   2d45e:	0e1b      	lsrs	r3, r3, #24
   2d460:	b2db      	uxtb	r3, r3
   2d462:	7013      	strb	r3, [r2, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   2d464:	693b      	ldr	r3, [r7, #16]
   2d466:	331a      	adds	r3, #26
   2d468:	001a      	movs	r2, r3
   2d46a:	687b      	ldr	r3, [r7, #4]
   2d46c:	691b      	ldr	r3, [r3, #16]
   2d46e:	b2db      	uxtb	r3, r3
   2d470:	7013      	strb	r3, [r2, #0]
   2d472:	693b      	ldr	r3, [r7, #16]
   2d474:	331b      	adds	r3, #27
   2d476:	001a      	movs	r2, r3
   2d478:	687b      	ldr	r3, [r7, #4]
   2d47a:	691b      	ldr	r3, [r3, #16]
   2d47c:	b29b      	uxth	r3, r3
   2d47e:	0a1b      	lsrs	r3, r3, #8
   2d480:	b29b      	uxth	r3, r3
   2d482:	b2db      	uxtb	r3, r3
   2d484:	7013      	strb	r3, [r2, #0]
   2d486:	693b      	ldr	r3, [r7, #16]
   2d488:	3314      	adds	r3, #20
   2d48a:	001a      	movs	r2, r3
   2d48c:	687b      	ldr	r3, [r7, #4]
   2d48e:	691b      	ldr	r3, [r3, #16]
   2d490:	0c1b      	lsrs	r3, r3, #16
   2d492:	b2db      	uxtb	r3, r3
   2d494:	7013      	strb	r3, [r2, #0]
   2d496:	693b      	ldr	r3, [r7, #16]
   2d498:	3315      	adds	r3, #21
   2d49a:	001a      	movs	r2, r3
   2d49c:	687b      	ldr	r3, [r7, #4]
   2d49e:	691b      	ldr	r3, [r3, #16]
   2d4a0:	0c1b      	lsrs	r3, r3, #16
   2d4a2:	b29b      	uxth	r3, r3
   2d4a4:	0a1b      	lsrs	r3, r3, #8
   2d4a6:	b29b      	uxth	r3, r3
   2d4a8:	b2db      	uxtb	r3, r3
   2d4aa:	7013      	strb	r3, [r2, #0]
				tim = get_fattime();						/* Update updated time */
   2d4ac:	4b1d      	ldr	r3, [pc, #116]	; (2d524 <f_sync+0x178>)
   2d4ae:	4798      	blx	r3
   2d4b0:	0003      	movs	r3, r0
   2d4b2:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
   2d4b4:	693b      	ldr	r3, [r7, #16]
   2d4b6:	3316      	adds	r3, #22
   2d4b8:	68fa      	ldr	r2, [r7, #12]
   2d4ba:	b2d2      	uxtb	r2, r2
   2d4bc:	701a      	strb	r2, [r3, #0]
   2d4be:	693b      	ldr	r3, [r7, #16]
   2d4c0:	3317      	adds	r3, #23
   2d4c2:	68fa      	ldr	r2, [r7, #12]
   2d4c4:	b292      	uxth	r2, r2
   2d4c6:	0a12      	lsrs	r2, r2, #8
   2d4c8:	b292      	uxth	r2, r2
   2d4ca:	b2d2      	uxtb	r2, r2
   2d4cc:	701a      	strb	r2, [r3, #0]
   2d4ce:	693b      	ldr	r3, [r7, #16]
   2d4d0:	3318      	adds	r3, #24
   2d4d2:	68fa      	ldr	r2, [r7, #12]
   2d4d4:	0c12      	lsrs	r2, r2, #16
   2d4d6:	b2d2      	uxtb	r2, r2
   2d4d8:	701a      	strb	r2, [r3, #0]
   2d4da:	693b      	ldr	r3, [r7, #16]
   2d4dc:	3319      	adds	r3, #25
   2d4de:	68fa      	ldr	r2, [r7, #12]
   2d4e0:	0e12      	lsrs	r2, r2, #24
   2d4e2:	b2d2      	uxtb	r2, r2
   2d4e4:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
   2d4e6:	687b      	ldr	r3, [r7, #4]
   2d4e8:	799b      	ldrb	r3, [r3, #6]
   2d4ea:	2220      	movs	r2, #32
   2d4ec:	4393      	bics	r3, r2
   2d4ee:	b2da      	uxtb	r2, r3
   2d4f0:	687b      	ldr	r3, [r7, #4]
   2d4f2:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
   2d4f4:	687b      	ldr	r3, [r7, #4]
   2d4f6:	681b      	ldr	r3, [r3, #0]
   2d4f8:	2201      	movs	r2, #1
   2d4fa:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
   2d4fc:	687b      	ldr	r3, [r7, #4]
   2d4fe:	681b      	ldr	r3, [r3, #0]
   2d500:	2217      	movs	r2, #23
   2d502:	18bc      	adds	r4, r7, r2
   2d504:	0018      	movs	r0, r3
   2d506:	4b08      	ldr	r3, [pc, #32]	; (2d528 <f_sync+0x17c>)
   2d508:	4798      	blx	r3
   2d50a:	0003      	movs	r3, r0
   2d50c:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
   2d50e:	2317      	movs	r3, #23
   2d510:	18fb      	adds	r3, r7, r3
   2d512:	781b      	ldrb	r3, [r3, #0]
}
   2d514:	0018      	movs	r0, r3
   2d516:	46bd      	mov	sp, r7
   2d518:	b007      	add	sp, #28
   2d51a:	bd90      	pop	{r4, r7, pc}
   2d51c:	0002ca81 	.word	0x0002ca81
   2d520:	0002aa05 	.word	0x0002aa05
   2d524:	0002a8c1 	.word	0x0002a8c1
   2d528:	0002aacd 	.word	0x0002aacd

0002d52c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   2d52c:	b590      	push	{r4, r7, lr}
   2d52e:	b085      	sub	sp, #20
   2d530:	af00      	add	r7, sp, #0
   2d532:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   2d534:	230f      	movs	r3, #15
   2d536:	18fc      	adds	r4, r7, r3
   2d538:	687b      	ldr	r3, [r7, #4]
   2d53a:	0018      	movs	r0, r3
   2d53c:	4b09      	ldr	r3, [pc, #36]	; (2d564 <f_close+0x38>)
   2d53e:	4798      	blx	r3
   2d540:	0003      	movs	r3, r0
   2d542:	7023      	strb	r3, [r4, #0]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   2d544:	230f      	movs	r3, #15
   2d546:	18fb      	adds	r3, r7, r3
   2d548:	781b      	ldrb	r3, [r3, #0]
   2d54a:	2b00      	cmp	r3, #0
   2d54c:	d102      	bne.n	2d554 <f_close+0x28>
   2d54e:	687b      	ldr	r3, [r7, #4]
   2d550:	2200      	movs	r2, #0
   2d552:	601a      	str	r2, [r3, #0]
	return res;
   2d554:	230f      	movs	r3, #15
   2d556:	18fb      	adds	r3, r7, r3
   2d558:	781b      	ldrb	r3, [r3, #0]
#endif
}
   2d55a:	0018      	movs	r0, r3
   2d55c:	46bd      	mov	sp, r7
   2d55e:	b005      	add	sp, #20
   2d560:	bd90      	pop	{r4, r7, pc}
   2d562:	46c0      	nop			; (mov r8, r8)
   2d564:	0002d3ad 	.word	0x0002d3ad

0002d568 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
   2d568:	b580      	push	{r7, lr}
   2d56a:	b084      	sub	sp, #16
   2d56c:	af00      	add	r7, sp, #0
   2d56e:	0002      	movs	r2, r0
   2d570:	6039      	str	r1, [r7, #0]
   2d572:	1dbb      	adds	r3, r7, #6
   2d574:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
   2d576:	1dbb      	adds	r3, r7, #6
   2d578:	881b      	ldrh	r3, [r3, #0]
   2d57a:	2b7f      	cmp	r3, #127	; 0x7f
   2d57c:	d805      	bhi.n	2d58a <ff_convert+0x22>
		c = src;
   2d57e:	230e      	movs	r3, #14
   2d580:	18fb      	adds	r3, r7, r3
   2d582:	1dba      	adds	r2, r7, #6
   2d584:	8812      	ldrh	r2, [r2, #0]
   2d586:	801a      	strh	r2, [r3, #0]
   2d588:	e03a      	b.n	2d600 <ff_convert+0x98>

	} else {
		if (dir) {		/* OEMCP to Unicode */
   2d58a:	683b      	ldr	r3, [r7, #0]
   2d58c:	2b00      	cmp	r3, #0
   2d58e:	d010      	beq.n	2d5b2 <ff_convert+0x4a>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   2d590:	1dbb      	adds	r3, r7, #6
   2d592:	881b      	ldrh	r3, [r3, #0]
   2d594:	2bff      	cmp	r3, #255	; 0xff
   2d596:	d807      	bhi.n	2d5a8 <ff_convert+0x40>
   2d598:	1dbb      	adds	r3, r7, #6
   2d59a:	881b      	ldrh	r3, [r3, #0]
   2d59c:	3b80      	subs	r3, #128	; 0x80
   2d59e:	001a      	movs	r2, r3
   2d5a0:	4b1b      	ldr	r3, [pc, #108]	; (2d610 <ff_convert+0xa8>)
   2d5a2:	0052      	lsls	r2, r2, #1
   2d5a4:	5ad2      	ldrh	r2, [r2, r3]
   2d5a6:	e000      	b.n	2d5aa <ff_convert+0x42>
   2d5a8:	2200      	movs	r2, #0
   2d5aa:	230e      	movs	r3, #14
   2d5ac:	18fb      	adds	r3, r7, r3
   2d5ae:	801a      	strh	r2, [r3, #0]
   2d5b0:	e026      	b.n	2d600 <ff_convert+0x98>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
   2d5b2:	230e      	movs	r3, #14
   2d5b4:	18fb      	adds	r3, r7, r3
   2d5b6:	2200      	movs	r2, #0
   2d5b8:	801a      	strh	r2, [r3, #0]
   2d5ba:	e010      	b.n	2d5de <ff_convert+0x76>
				if (src == Tbl[c]) break;
   2d5bc:	230e      	movs	r3, #14
   2d5be:	18fb      	adds	r3, r7, r3
   2d5c0:	881a      	ldrh	r2, [r3, #0]
   2d5c2:	4b13      	ldr	r3, [pc, #76]	; (2d610 <ff_convert+0xa8>)
   2d5c4:	0052      	lsls	r2, r2, #1
   2d5c6:	5ad3      	ldrh	r3, [r2, r3]
   2d5c8:	1dba      	adds	r2, r7, #6
   2d5ca:	8812      	ldrh	r2, [r2, #0]
   2d5cc:	429a      	cmp	r2, r3
   2d5ce:	d00c      	beq.n	2d5ea <ff_convert+0x82>
			for (c = 0; c < 0x80; c++) {
   2d5d0:	230e      	movs	r3, #14
   2d5d2:	18fb      	adds	r3, r7, r3
   2d5d4:	881a      	ldrh	r2, [r3, #0]
   2d5d6:	230e      	movs	r3, #14
   2d5d8:	18fb      	adds	r3, r7, r3
   2d5da:	3201      	adds	r2, #1
   2d5dc:	801a      	strh	r2, [r3, #0]
   2d5de:	230e      	movs	r3, #14
   2d5e0:	18fb      	adds	r3, r7, r3
   2d5e2:	881b      	ldrh	r3, [r3, #0]
   2d5e4:	2b7f      	cmp	r3, #127	; 0x7f
   2d5e6:	d9e9      	bls.n	2d5bc <ff_convert+0x54>
   2d5e8:	e000      	b.n	2d5ec <ff_convert+0x84>
				if (src == Tbl[c]) break;
   2d5ea:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
   2d5ec:	230e      	movs	r3, #14
   2d5ee:	18fb      	adds	r3, r7, r3
   2d5f0:	881b      	ldrh	r3, [r3, #0]
   2d5f2:	3380      	adds	r3, #128	; 0x80
   2d5f4:	b29a      	uxth	r2, r3
   2d5f6:	230e      	movs	r3, #14
   2d5f8:	18fb      	adds	r3, r7, r3
   2d5fa:	21ff      	movs	r1, #255	; 0xff
   2d5fc:	400a      	ands	r2, r1
   2d5fe:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
   2d600:	230e      	movs	r3, #14
   2d602:	18fb      	adds	r3, r7, r3
   2d604:	881b      	ldrh	r3, [r3, #0]
}
   2d606:	0018      	movs	r0, r3
   2d608:	46bd      	mov	sp, r7
   2d60a:	b004      	add	sp, #16
   2d60c:	bd80      	pop	{r7, pc}
   2d60e:	46c0      	nop			; (mov r8, r8)
   2d610:	00039130 	.word	0x00039130

0002d614 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
   2d614:	b580      	push	{r7, lr}
   2d616:	b084      	sub	sp, #16
   2d618:	af00      	add	r7, sp, #0
   2d61a:	0002      	movs	r2, r0
   2d61c:	1dbb      	adds	r3, r7, #6
   2d61e:	801a      	strh	r2, [r3, #0]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   2d620:	2300      	movs	r3, #0
   2d622:	60fb      	str	r3, [r7, #12]
   2d624:	e002      	b.n	2d62c <ff_wtoupper+0x18>
   2d626:	68fb      	ldr	r3, [r7, #12]
   2d628:	3301      	adds	r3, #1
   2d62a:	60fb      	str	r3, [r7, #12]
   2d62c:	4b0f      	ldr	r3, [pc, #60]	; (2d66c <ff_wtoupper+0x58>)
   2d62e:	68fa      	ldr	r2, [r7, #12]
   2d630:	0052      	lsls	r2, r2, #1
   2d632:	5ad3      	ldrh	r3, [r2, r3]
   2d634:	2b00      	cmp	r3, #0
   2d636:	d007      	beq.n	2d648 <ff_wtoupper+0x34>
   2d638:	4b0c      	ldr	r3, [pc, #48]	; (2d66c <ff_wtoupper+0x58>)
   2d63a:	68fa      	ldr	r2, [r7, #12]
   2d63c:	0052      	lsls	r2, r2, #1
   2d63e:	5ad3      	ldrh	r3, [r2, r3]
   2d640:	1dba      	adds	r2, r7, #6
   2d642:	8812      	ldrh	r2, [r2, #0]
   2d644:	429a      	cmp	r2, r3
   2d646:	d1ee      	bne.n	2d626 <ff_wtoupper+0x12>

	return tbl_lower[i] ? tbl_upper[i] : chr;
   2d648:	4b08      	ldr	r3, [pc, #32]	; (2d66c <ff_wtoupper+0x58>)
   2d64a:	68fa      	ldr	r2, [r7, #12]
   2d64c:	0052      	lsls	r2, r2, #1
   2d64e:	5ad3      	ldrh	r3, [r2, r3]
   2d650:	2b00      	cmp	r3, #0
   2d652:	d004      	beq.n	2d65e <ff_wtoupper+0x4a>
   2d654:	4b06      	ldr	r3, [pc, #24]	; (2d670 <ff_wtoupper+0x5c>)
   2d656:	68fa      	ldr	r2, [r7, #12]
   2d658:	0052      	lsls	r2, r2, #1
   2d65a:	5ad3      	ldrh	r3, [r2, r3]
   2d65c:	e001      	b.n	2d662 <ff_wtoupper+0x4e>
   2d65e:	1dbb      	adds	r3, r7, #6
   2d660:	881b      	ldrh	r3, [r3, #0]
}
   2d662:	0018      	movs	r0, r3
   2d664:	46bd      	mov	sp, r7
   2d666:	b004      	add	sp, #16
   2d668:	bd80      	pop	{r7, pc}
   2d66a:	46c0      	nop			; (mov r8, r8)
   2d66c:	00039230 	.word	0x00039230
   2d670:	00039410 	.word	0x00039410

0002d674 <NewMessageData>:
int cycle(MQTTClient* c, Timer* timer);
void MQTTRun(void* parm);
int waitfor(MQTTClient* c, int packet_type, Timer* timer);


static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
   2d674:	b580      	push	{r7, lr}
   2d676:	b084      	sub	sp, #16
   2d678:	af00      	add	r7, sp, #0
   2d67a:	60f8      	str	r0, [r7, #12]
   2d67c:	60b9      	str	r1, [r7, #8]
   2d67e:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
   2d680:	68fb      	ldr	r3, [r7, #12]
   2d682:	68ba      	ldr	r2, [r7, #8]
   2d684:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
   2d686:	68fb      	ldr	r3, [r7, #12]
   2d688:	687a      	ldr	r2, [r7, #4]
   2d68a:	601a      	str	r2, [r3, #0]
}
   2d68c:	46c0      	nop			; (mov r8, r8)
   2d68e:	46bd      	mov	sp, r7
   2d690:	b004      	add	sp, #16
   2d692:	bd80      	pop	{r7, pc}

0002d694 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
   2d694:	b580      	push	{r7, lr}
   2d696:	b082      	sub	sp, #8
   2d698:	af00      	add	r7, sp, #0
   2d69a:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   2d69c:	687b      	ldr	r3, [r7, #4]
   2d69e:	681b      	ldr	r3, [r3, #0]
   2d6a0:	4a07      	ldr	r2, [pc, #28]	; (2d6c0 <getNextPacketId+0x2c>)
   2d6a2:	4293      	cmp	r3, r2
   2d6a4:	d003      	beq.n	2d6ae <getNextPacketId+0x1a>
   2d6a6:	687b      	ldr	r3, [r7, #4]
   2d6a8:	681b      	ldr	r3, [r3, #0]
   2d6aa:	1c5a      	adds	r2, r3, #1
   2d6ac:	e000      	b.n	2d6b0 <getNextPacketId+0x1c>
   2d6ae:	2201      	movs	r2, #1
   2d6b0:	687b      	ldr	r3, [r7, #4]
   2d6b2:	601a      	str	r2, [r3, #0]
   2d6b4:	687b      	ldr	r3, [r7, #4]
   2d6b6:	681b      	ldr	r3, [r3, #0]
}
   2d6b8:	0018      	movs	r0, r3
   2d6ba:	46bd      	mov	sp, r7
   2d6bc:	b002      	add	sp, #8
   2d6be:	bd80      	pop	{r7, pc}
   2d6c0:	0000ffff 	.word	0x0000ffff

0002d6c4 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   2d6c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d6c6:	b087      	sub	sp, #28
   2d6c8:	af00      	add	r7, sp, #0
   2d6ca:	60f8      	str	r0, [r7, #12]
   2d6cc:	60b9      	str	r1, [r7, #8]
   2d6ce:	607a      	str	r2, [r7, #4]
    int rc = FAILURE, 
   2d6d0:	2301      	movs	r3, #1
   2d6d2:	425b      	negs	r3, r3
   2d6d4:	617b      	str	r3, [r7, #20]
        sent = 0;
   2d6d6:	2300      	movs	r3, #0
   2d6d8:	613b      	str	r3, [r7, #16]
    
    while (sent < length && !TimerIsExpired(timer))
   2d6da:	e01a      	b.n	2d712 <sendPacket+0x4e>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   2d6dc:	68fb      	ldr	r3, [r7, #12]
   2d6de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2d6e0:	68dc      	ldr	r4, [r3, #12]
   2d6e2:	68fb      	ldr	r3, [r7, #12]
   2d6e4:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2d6e6:	68fb      	ldr	r3, [r7, #12]
   2d6e8:	691a      	ldr	r2, [r3, #16]
   2d6ea:	693b      	ldr	r3, [r7, #16]
   2d6ec:	18d6      	adds	r6, r2, r3
   2d6ee:	687b      	ldr	r3, [r7, #4]
   2d6f0:	0018      	movs	r0, r3
   2d6f2:	4b1a      	ldr	r3, [pc, #104]	; (2d75c <sendPacket+0x98>)
   2d6f4:	4798      	blx	r3
   2d6f6:	0003      	movs	r3, r0
   2d6f8:	68ba      	ldr	r2, [r7, #8]
   2d6fa:	0031      	movs	r1, r6
   2d6fc:	0028      	movs	r0, r5
   2d6fe:	47a0      	blx	r4
   2d700:	0003      	movs	r3, r0
   2d702:	617b      	str	r3, [r7, #20]
        if (rc < 0)  // there was an error writing the data
   2d704:	697b      	ldr	r3, [r7, #20]
   2d706:	2b00      	cmp	r3, #0
   2d708:	db0e      	blt.n	2d728 <sendPacket+0x64>
            break;
        sent += rc;
   2d70a:	693a      	ldr	r2, [r7, #16]
   2d70c:	697b      	ldr	r3, [r7, #20]
   2d70e:	18d3      	adds	r3, r2, r3
   2d710:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
   2d712:	693a      	ldr	r2, [r7, #16]
   2d714:	68bb      	ldr	r3, [r7, #8]
   2d716:	429a      	cmp	r2, r3
   2d718:	da07      	bge.n	2d72a <sendPacket+0x66>
   2d71a:	687b      	ldr	r3, [r7, #4]
   2d71c:	0018      	movs	r0, r3
   2d71e:	4b10      	ldr	r3, [pc, #64]	; (2d760 <sendPacket+0x9c>)
   2d720:	4798      	blx	r3
   2d722:	1e03      	subs	r3, r0, #0
   2d724:	d0da      	beq.n	2d6dc <sendPacket+0x18>
   2d726:	e000      	b.n	2d72a <sendPacket+0x66>
            break;
   2d728:	46c0      	nop			; (mov r8, r8)
    }
    if (sent == length)
   2d72a:	693a      	ldr	r2, [r7, #16]
   2d72c:	68bb      	ldr	r3, [r7, #8]
   2d72e:	429a      	cmp	r2, r3
   2d730:	d10b      	bne.n	2d74a <sendPacket+0x86>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   2d732:	68fb      	ldr	r3, [r7, #12]
   2d734:	3354      	adds	r3, #84	; 0x54
   2d736:	001a      	movs	r2, r3
   2d738:	68fb      	ldr	r3, [r7, #12]
   2d73a:	699b      	ldr	r3, [r3, #24]
   2d73c:	0019      	movs	r1, r3
   2d73e:	0010      	movs	r0, r2
   2d740:	4b08      	ldr	r3, [pc, #32]	; (2d764 <sendPacket+0xa0>)
   2d742:	4798      	blx	r3
        rc = SUCCESS;
   2d744:	2300      	movs	r3, #0
   2d746:	617b      	str	r3, [r7, #20]
   2d748:	e002      	b.n	2d750 <sendPacket+0x8c>
    }
    else
        rc = FAILURE;
   2d74a:	2301      	movs	r3, #1
   2d74c:	425b      	negs	r3, r3
   2d74e:	617b      	str	r3, [r7, #20]
    return rc;
   2d750:	697b      	ldr	r3, [r7, #20]
}
   2d752:	0018      	movs	r0, r3
   2d754:	46bd      	mov	sp, r7
   2d756:	b007      	add	sp, #28
   2d758:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2d75a:	46c0      	nop			; (mov r8, r8)
   2d75c:	0002e525 	.word	0x0002e525
   2d760:	0002e4a9 	.word	0x0002e4a9
   2d764:	0002e4fd 	.word	0x0002e4fd

0002d768 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   2d768:	b580      	push	{r7, lr}
   2d76a:	b086      	sub	sp, #24
   2d76c:	af00      	add	r7, sp, #0
   2d76e:	60f8      	str	r0, [r7, #12]
   2d770:	60b9      	str	r1, [r7, #8]
   2d772:	607a      	str	r2, [r7, #4]
   2d774:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
   2d776:	68fb      	ldr	r3, [r7, #12]
   2d778:	68ba      	ldr	r2, [r7, #8]
   2d77a:	651a      	str	r2, [r3, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2d77c:	2300      	movs	r3, #0
   2d77e:	617b      	str	r3, [r7, #20]
   2d780:	e00a      	b.n	2d798 <MQTTClientInit+0x30>
        c->messageHandlers[i].topicFilter = 0;
   2d782:	68fa      	ldr	r2, [r7, #12]
   2d784:	697b      	ldr	r3, [r7, #20]
   2d786:	3304      	adds	r3, #4
   2d788:	00db      	lsls	r3, r3, #3
   2d78a:	18d3      	adds	r3, r2, r3
   2d78c:	3304      	adds	r3, #4
   2d78e:	2200      	movs	r2, #0
   2d790:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2d792:	697b      	ldr	r3, [r7, #20]
   2d794:	3301      	adds	r3, #1
   2d796:	617b      	str	r3, [r7, #20]
   2d798:	697b      	ldr	r3, [r7, #20]
   2d79a:	2b04      	cmp	r3, #4
   2d79c:	ddf1      	ble.n	2d782 <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
   2d79e:	68fb      	ldr	r3, [r7, #12]
   2d7a0:	687a      	ldr	r2, [r7, #4]
   2d7a2:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
   2d7a4:	68fb      	ldr	r3, [r7, #12]
   2d7a6:	683a      	ldr	r2, [r7, #0]
   2d7a8:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
   2d7aa:	68fb      	ldr	r3, [r7, #12]
   2d7ac:	6a3a      	ldr	r2, [r7, #32]
   2d7ae:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
   2d7b0:	68fb      	ldr	r3, [r7, #12]
   2d7b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2d7b4:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
   2d7b6:	68fb      	ldr	r3, [r7, #12]
   2d7b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d7ba:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
   2d7bc:	68fb      	ldr	r3, [r7, #12]
   2d7be:	2200      	movs	r2, #0
   2d7c0:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
   2d7c2:	68fb      	ldr	r3, [r7, #12]
   2d7c4:	2200      	movs	r2, #0
   2d7c6:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
   2d7c8:	68fb      	ldr	r3, [r7, #12]
   2d7ca:	2200      	movs	r2, #0
   2d7cc:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
   2d7ce:	68fb      	ldr	r3, [r7, #12]
   2d7d0:	2201      	movs	r2, #1
   2d7d2:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
   2d7d4:	68fb      	ldr	r3, [r7, #12]
   2d7d6:	3354      	adds	r3, #84	; 0x54
   2d7d8:	0018      	movs	r0, r3
   2d7da:	4b03      	ldr	r3, [pc, #12]	; (2d7e8 <MQTTClientInit+0x80>)
   2d7dc:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   2d7de:	46c0      	nop			; (mov r8, r8)
   2d7e0:	46bd      	mov	sp, r7
   2d7e2:	b006      	add	sp, #24
   2d7e4:	bd80      	pop	{r7, pc}
   2d7e6:	46c0      	nop			; (mov r8, r8)
   2d7e8:	0002e54d 	.word	0x0002e54d

0002d7ec <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
   2d7ec:	b590      	push	{r4, r7, lr}
   2d7ee:	b08b      	sub	sp, #44	; 0x2c
   2d7f0:	af00      	add	r7, sp, #0
   2d7f2:	60f8      	str	r0, [r7, #12]
   2d7f4:	60b9      	str	r1, [r7, #8]
   2d7f6:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
   2d7f8:	2301      	movs	r3, #1
   2d7fa:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
   2d7fc:	2300      	movs	r3, #0
   2d7fe:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
   2d800:	2304      	movs	r3, #4
   2d802:	61fb      	str	r3, [r7, #28]

    *value = 0;
   2d804:	68bb      	ldr	r3, [r7, #8]
   2d806:	2200      	movs	r2, #0
   2d808:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
   2d80a:	2301      	movs	r3, #1
   2d80c:	425b      	negs	r3, r3
   2d80e:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   2d810:	6a3b      	ldr	r3, [r7, #32]
   2d812:	3301      	adds	r3, #1
   2d814:	623b      	str	r3, [r7, #32]
   2d816:	6a3a      	ldr	r2, [r7, #32]
   2d818:	69fb      	ldr	r3, [r7, #28]
   2d81a:	429a      	cmp	r2, r3
   2d81c:	dd03      	ble.n	2d826 <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
   2d81e:	2301      	movs	r3, #1
   2d820:	425b      	negs	r3, r3
   2d822:	61bb      	str	r3, [r7, #24]
            goto exit;
   2d824:	e026      	b.n	2d874 <decodePacket+0x88>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   2d826:	68fb      	ldr	r3, [r7, #12]
   2d828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2d82a:	689c      	ldr	r4, [r3, #8]
   2d82c:	68fb      	ldr	r3, [r7, #12]
   2d82e:	6d18      	ldr	r0, [r3, #80]	; 0x50
   2d830:	687b      	ldr	r3, [r7, #4]
   2d832:	2217      	movs	r2, #23
   2d834:	18b9      	adds	r1, r7, r2
   2d836:	2201      	movs	r2, #1
   2d838:	47a0      	blx	r4
   2d83a:	0003      	movs	r3, r0
   2d83c:	61bb      	str	r3, [r7, #24]
        if (rc != 1)
   2d83e:	69bb      	ldr	r3, [r7, #24]
   2d840:	2b01      	cmp	r3, #1
   2d842:	d116      	bne.n	2d872 <decodePacket+0x86>
            goto exit;
        *value += (i & 127) * multiplier;
   2d844:	68bb      	ldr	r3, [r7, #8]
   2d846:	681a      	ldr	r2, [r3, #0]
   2d848:	2317      	movs	r3, #23
   2d84a:	18fb      	adds	r3, r7, r3
   2d84c:	781b      	ldrb	r3, [r3, #0]
   2d84e:	0019      	movs	r1, r3
   2d850:	237f      	movs	r3, #127	; 0x7f
   2d852:	400b      	ands	r3, r1
   2d854:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2d856:	434b      	muls	r3, r1
   2d858:	18d2      	adds	r2, r2, r3
   2d85a:	68bb      	ldr	r3, [r7, #8]
   2d85c:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
   2d85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d860:	01db      	lsls	r3, r3, #7
   2d862:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
   2d864:	2317      	movs	r3, #23
   2d866:	18fb      	adds	r3, r7, r3
   2d868:	781b      	ldrb	r3, [r3, #0]
   2d86a:	b25b      	sxtb	r3, r3
   2d86c:	2b00      	cmp	r3, #0
   2d86e:	dbcc      	blt.n	2d80a <decodePacket+0x1e>
   2d870:	e000      	b.n	2d874 <decodePacket+0x88>
            goto exit;
   2d872:	46c0      	nop			; (mov r8, r8)
exit:
    return len;
   2d874:	6a3b      	ldr	r3, [r7, #32]
}
   2d876:	0018      	movs	r0, r3
   2d878:	46bd      	mov	sp, r7
   2d87a:	b00b      	add	sp, #44	; 0x2c
   2d87c:	bd90      	pop	{r4, r7, pc}
	...

0002d880 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
   2d880:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d882:	46c6      	mov	lr, r8
   2d884:	b500      	push	{lr}
   2d886:	b086      	sub	sp, #24
   2d888:	af00      	add	r7, sp, #0
   2d88a:	6078      	str	r0, [r7, #4]
   2d88c:	6039      	str	r1, [r7, #0]
    int rc = FAILURE;
   2d88e:	2301      	movs	r3, #1
   2d890:	425b      	negs	r3, r3
   2d892:	617b      	str	r3, [r7, #20]
    MQTTHeader header = {0};
   2d894:	2300      	movs	r3, #0
   2d896:	60fb      	str	r3, [r7, #12]
    int len = 0;
   2d898:	2300      	movs	r3, #0
   2d89a:	613b      	str	r3, [r7, #16]
    int rem_len = 0;
   2d89c:	2300      	movs	r3, #0
   2d89e:	60bb      	str	r3, [r7, #8]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   2d8a0:	687b      	ldr	r3, [r7, #4]
   2d8a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2d8a4:	689c      	ldr	r4, [r3, #8]
   2d8a6:	687b      	ldr	r3, [r7, #4]
   2d8a8:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2d8aa:	687b      	ldr	r3, [r7, #4]
   2d8ac:	695e      	ldr	r6, [r3, #20]
   2d8ae:	683b      	ldr	r3, [r7, #0]
   2d8b0:	0018      	movs	r0, r3
   2d8b2:	4b2b      	ldr	r3, [pc, #172]	; (2d960 <readPacket+0xe0>)
   2d8b4:	4798      	blx	r3
   2d8b6:	0003      	movs	r3, r0
   2d8b8:	2201      	movs	r2, #1
   2d8ba:	0031      	movs	r1, r6
   2d8bc:	0028      	movs	r0, r5
   2d8be:	47a0      	blx	r4
   2d8c0:	0003      	movs	r3, r0
   2d8c2:	2b01      	cmp	r3, #1
   2d8c4:	d141      	bne.n	2d94a <readPacket+0xca>
        goto exit;

    len = 1;
   2d8c6:	2301      	movs	r3, #1
   2d8c8:	613b      	str	r3, [r7, #16]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   2d8ca:	683b      	ldr	r3, [r7, #0]
   2d8cc:	0018      	movs	r0, r3
   2d8ce:	4b24      	ldr	r3, [pc, #144]	; (2d960 <readPacket+0xe0>)
   2d8d0:	4798      	blx	r3
   2d8d2:	0002      	movs	r2, r0
   2d8d4:	2308      	movs	r3, #8
   2d8d6:	18f9      	adds	r1, r7, r3
   2d8d8:	687b      	ldr	r3, [r7, #4]
   2d8da:	0018      	movs	r0, r3
   2d8dc:	4b21      	ldr	r3, [pc, #132]	; (2d964 <readPacket+0xe4>)
   2d8de:	4798      	blx	r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   2d8e0:	687b      	ldr	r3, [r7, #4]
   2d8e2:	695b      	ldr	r3, [r3, #20]
   2d8e4:	3301      	adds	r3, #1
   2d8e6:	68ba      	ldr	r2, [r7, #8]
   2d8e8:	0011      	movs	r1, r2
   2d8ea:	0018      	movs	r0, r3
   2d8ec:	4b1e      	ldr	r3, [pc, #120]	; (2d968 <readPacket+0xe8>)
   2d8ee:	4798      	blx	r3
   2d8f0:	0002      	movs	r2, r0
   2d8f2:	693b      	ldr	r3, [r7, #16]
   2d8f4:	189b      	adds	r3, r3, r2
   2d8f6:	613b      	str	r3, [r7, #16]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   2d8f8:	68bb      	ldr	r3, [r7, #8]
   2d8fa:	2b00      	cmp	r3, #0
   2d8fc:	dd17      	ble.n	2d92e <readPacket+0xae>
   2d8fe:	687b      	ldr	r3, [r7, #4]
   2d900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2d902:	689c      	ldr	r4, [r3, #8]
   2d904:	687b      	ldr	r3, [r7, #4]
   2d906:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2d908:	687b      	ldr	r3, [r7, #4]
   2d90a:	695a      	ldr	r2, [r3, #20]
   2d90c:	693b      	ldr	r3, [r7, #16]
   2d90e:	18d6      	adds	r6, r2, r3
   2d910:	68bb      	ldr	r3, [r7, #8]
   2d912:	4698      	mov	r8, r3
   2d914:	683b      	ldr	r3, [r7, #0]
   2d916:	0018      	movs	r0, r3
   2d918:	4b11      	ldr	r3, [pc, #68]	; (2d960 <readPacket+0xe0>)
   2d91a:	4798      	blx	r3
   2d91c:	0003      	movs	r3, r0
   2d91e:	4642      	mov	r2, r8
   2d920:	0031      	movs	r1, r6
   2d922:	0028      	movs	r0, r5
   2d924:	47a0      	blx	r4
   2d926:	0002      	movs	r2, r0
   2d928:	68bb      	ldr	r3, [r7, #8]
   2d92a:	429a      	cmp	r2, r3
   2d92c:	d10f      	bne.n	2d94e <readPacket+0xce>
        goto exit;

    header.byte = c->readbuf[0];
   2d92e:	687b      	ldr	r3, [r7, #4]
   2d930:	695b      	ldr	r3, [r3, #20]
   2d932:	781a      	ldrb	r2, [r3, #0]
   2d934:	230c      	movs	r3, #12
   2d936:	18fb      	adds	r3, r7, r3
   2d938:	701a      	strb	r2, [r3, #0]
    rc = header.bits.type;
   2d93a:	230c      	movs	r3, #12
   2d93c:	18fb      	adds	r3, r7, r3
   2d93e:	781b      	ldrb	r3, [r3, #0]
   2d940:	061b      	lsls	r3, r3, #24
   2d942:	0f1b      	lsrs	r3, r3, #28
   2d944:	b2db      	uxtb	r3, r3
   2d946:	617b      	str	r3, [r7, #20]
   2d948:	e002      	b.n	2d950 <readPacket+0xd0>
        goto exit;
   2d94a:	46c0      	nop			; (mov r8, r8)
   2d94c:	e000      	b.n	2d950 <readPacket+0xd0>
        goto exit;
   2d94e:	46c0      	nop			; (mov r8, r8)
exit:
    return rc;
   2d950:	697b      	ldr	r3, [r7, #20]
}
   2d952:	0018      	movs	r0, r3
   2d954:	46bd      	mov	sp, r7
   2d956:	b006      	add	sp, #24
   2d958:	bc04      	pop	{r2}
   2d95a:	4690      	mov	r8, r2
   2d95c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2d95e:	46c0      	nop			; (mov r8, r8)
   2d960:	0002e525 	.word	0x0002e525
   2d964:	0002d7ed 	.word	0x0002d7ed
   2d968:	0002f2fd 	.word	0x0002f2fd

0002d96c <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
   2d96c:	b580      	push	{r7, lr}
   2d96e:	b086      	sub	sp, #24
   2d970:	af00      	add	r7, sp, #0
   2d972:	6078      	str	r0, [r7, #4]
   2d974:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
   2d976:	687b      	ldr	r3, [r7, #4]
   2d978:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
   2d97a:	683b      	ldr	r3, [r7, #0]
   2d97c:	689b      	ldr	r3, [r3, #8]
   2d97e:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
   2d980:	683b      	ldr	r3, [r7, #0]
   2d982:	685b      	ldr	r3, [r3, #4]
   2d984:	001a      	movs	r2, r3
   2d986:	693b      	ldr	r3, [r7, #16]
   2d988:	189b      	adds	r3, r3, r2
   2d98a:	60bb      	str	r3, [r7, #8]
    
    while (*curf && curn < curn_end)
   2d98c:	e039      	b.n	2da02 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
   2d98e:	693b      	ldr	r3, [r7, #16]
   2d990:	781b      	ldrb	r3, [r3, #0]
   2d992:	2b2f      	cmp	r3, #47	; 0x2f
   2d994:	d103      	bne.n	2d99e <isTopicMatched+0x32>
   2d996:	697b      	ldr	r3, [r7, #20]
   2d998:	781b      	ldrb	r3, [r3, #0]
   2d99a:	2b2f      	cmp	r3, #47	; 0x2f
   2d99c:	d13a      	bne.n	2da14 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   2d99e:	697b      	ldr	r3, [r7, #20]
   2d9a0:	781b      	ldrb	r3, [r3, #0]
   2d9a2:	2b2b      	cmp	r3, #43	; 0x2b
   2d9a4:	d009      	beq.n	2d9ba <isTopicMatched+0x4e>
   2d9a6:	697b      	ldr	r3, [r7, #20]
   2d9a8:	781b      	ldrb	r3, [r3, #0]
   2d9aa:	2b23      	cmp	r3, #35	; 0x23
   2d9ac:	d005      	beq.n	2d9ba <isTopicMatched+0x4e>
   2d9ae:	697b      	ldr	r3, [r7, #20]
   2d9b0:	781a      	ldrb	r2, [r3, #0]
   2d9b2:	693b      	ldr	r3, [r7, #16]
   2d9b4:	781b      	ldrb	r3, [r3, #0]
   2d9b6:	429a      	cmp	r2, r3
   2d9b8:	d12e      	bne.n	2da18 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
   2d9ba:	697b      	ldr	r3, [r7, #20]
   2d9bc:	781b      	ldrb	r3, [r3, #0]
   2d9be:	2b2b      	cmp	r3, #43	; 0x2b
   2d9c0:	d112      	bne.n	2d9e8 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
   2d9c2:	693b      	ldr	r3, [r7, #16]
   2d9c4:	3301      	adds	r3, #1
   2d9c6:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2d9c8:	e005      	b.n	2d9d6 <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
   2d9ca:	693b      	ldr	r3, [r7, #16]
   2d9cc:	3301      	adds	r3, #1
   2d9ce:	613b      	str	r3, [r7, #16]
   2d9d0:	693b      	ldr	r3, [r7, #16]
   2d9d2:	3301      	adds	r3, #1
   2d9d4:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2d9d6:	68fa      	ldr	r2, [r7, #12]
   2d9d8:	68bb      	ldr	r3, [r7, #8]
   2d9da:	429a      	cmp	r2, r3
   2d9dc:	d20b      	bcs.n	2d9f6 <isTopicMatched+0x8a>
   2d9de:	68fb      	ldr	r3, [r7, #12]
   2d9e0:	781b      	ldrb	r3, [r3, #0]
   2d9e2:	2b2f      	cmp	r3, #47	; 0x2f
   2d9e4:	d1f1      	bne.n	2d9ca <isTopicMatched+0x5e>
   2d9e6:	e006      	b.n	2d9f6 <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
   2d9e8:	697b      	ldr	r3, [r7, #20]
   2d9ea:	781b      	ldrb	r3, [r3, #0]
   2d9ec:	2b23      	cmp	r3, #35	; 0x23
   2d9ee:	d102      	bne.n	2d9f6 <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
   2d9f0:	68bb      	ldr	r3, [r7, #8]
   2d9f2:	3b01      	subs	r3, #1
   2d9f4:	613b      	str	r3, [r7, #16]
        curf++;
   2d9f6:	697b      	ldr	r3, [r7, #20]
   2d9f8:	3301      	adds	r3, #1
   2d9fa:	617b      	str	r3, [r7, #20]
        curn++;
   2d9fc:	693b      	ldr	r3, [r7, #16]
   2d9fe:	3301      	adds	r3, #1
   2da00:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
   2da02:	697b      	ldr	r3, [r7, #20]
   2da04:	781b      	ldrb	r3, [r3, #0]
   2da06:	2b00      	cmp	r3, #0
   2da08:	d007      	beq.n	2da1a <isTopicMatched+0xae>
   2da0a:	693a      	ldr	r2, [r7, #16]
   2da0c:	68bb      	ldr	r3, [r7, #8]
   2da0e:	429a      	cmp	r2, r3
   2da10:	d3bd      	bcc.n	2d98e <isTopicMatched+0x22>
   2da12:	e002      	b.n	2da1a <isTopicMatched+0xae>
            break;
   2da14:	46c0      	nop			; (mov r8, r8)
   2da16:	e000      	b.n	2da1a <isTopicMatched+0xae>
            break;
   2da18:	46c0      	nop			; (mov r8, r8)
    };
    
    return (curn == curn_end) && (*curf == '\0');
   2da1a:	693a      	ldr	r2, [r7, #16]
   2da1c:	68bb      	ldr	r3, [r7, #8]
   2da1e:	429a      	cmp	r2, r3
   2da20:	d105      	bne.n	2da2e <isTopicMatched+0xc2>
   2da22:	697b      	ldr	r3, [r7, #20]
   2da24:	781b      	ldrb	r3, [r3, #0]
   2da26:	2b00      	cmp	r3, #0
   2da28:	d101      	bne.n	2da2e <isTopicMatched+0xc2>
   2da2a:	2301      	movs	r3, #1
   2da2c:	e000      	b.n	2da30 <isTopicMatched+0xc4>
   2da2e:	2300      	movs	r3, #0
   2da30:	b2db      	uxtb	r3, r3
}
   2da32:	0018      	movs	r0, r3
   2da34:	46bd      	mov	sp, r7
   2da36:	b006      	add	sp, #24
   2da38:	bd80      	pop	{r7, pc}
	...

0002da3c <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   2da3c:	b580      	push	{r7, lr}
   2da3e:	b08a      	sub	sp, #40	; 0x28
   2da40:	af00      	add	r7, sp, #0
   2da42:	60f8      	str	r0, [r7, #12]
   2da44:	60b9      	str	r1, [r7, #8]
   2da46:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
   2da48:	2301      	movs	r3, #1
   2da4a:	425b      	negs	r3, r3
   2da4c:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2da4e:	2300      	movs	r3, #0
   2da50:	627b      	str	r3, [r7, #36]	; 0x24
   2da52:	e044      	b.n	2dade <deliverMessage+0xa2>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2da54:	68fa      	ldr	r2, [r7, #12]
   2da56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2da58:	3304      	adds	r3, #4
   2da5a:	00db      	lsls	r3, r3, #3
   2da5c:	18d3      	adds	r3, r2, r3
   2da5e:	3304      	adds	r3, #4
   2da60:	681b      	ldr	r3, [r3, #0]
   2da62:	2b00      	cmp	r3, #0
   2da64:	d038      	beq.n	2dad8 <deliverMessage+0x9c>
   2da66:	68fa      	ldr	r2, [r7, #12]
   2da68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2da6a:	3304      	adds	r3, #4
   2da6c:	00db      	lsls	r3, r3, #3
   2da6e:	18d3      	adds	r3, r2, r3
   2da70:	3304      	adds	r3, #4
   2da72:	681a      	ldr	r2, [r3, #0]
   2da74:	68bb      	ldr	r3, [r7, #8]
   2da76:	0011      	movs	r1, r2
   2da78:	0018      	movs	r0, r3
   2da7a:	4b28      	ldr	r3, [pc, #160]	; (2db1c <deliverMessage+0xe0>)
   2da7c:	4798      	blx	r3
   2da7e:	1e03      	subs	r3, r0, #0
   2da80:	d10d      	bne.n	2da9e <deliverMessage+0x62>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   2da82:	68fa      	ldr	r2, [r7, #12]
   2da84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2da86:	3304      	adds	r3, #4
   2da88:	00db      	lsls	r3, r3, #3
   2da8a:	18d3      	adds	r3, r2, r3
   2da8c:	3304      	adds	r3, #4
   2da8e:	681b      	ldr	r3, [r3, #0]
   2da90:	68ba      	ldr	r2, [r7, #8]
   2da92:	0011      	movs	r1, r2
   2da94:	0018      	movs	r0, r3
   2da96:	4b22      	ldr	r3, [pc, #136]	; (2db20 <deliverMessage+0xe4>)
   2da98:	4798      	blx	r3
   2da9a:	1e03      	subs	r3, r0, #0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2da9c:	d01c      	beq.n	2dad8 <deliverMessage+0x9c>
        {
            if (c->messageHandlers[i].fp != NULL)
   2da9e:	68fa      	ldr	r2, [r7, #12]
   2daa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2daa2:	3304      	adds	r3, #4
   2daa4:	00db      	lsls	r3, r3, #3
   2daa6:	18d3      	adds	r3, r2, r3
   2daa8:	3308      	adds	r3, #8
   2daaa:	681b      	ldr	r3, [r3, #0]
   2daac:	2b00      	cmp	r3, #0
   2daae:	d013      	beq.n	2dad8 <deliverMessage+0x9c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
   2dab0:	687a      	ldr	r2, [r7, #4]
   2dab2:	68b9      	ldr	r1, [r7, #8]
   2dab4:	2318      	movs	r3, #24
   2dab6:	18fb      	adds	r3, r7, r3
   2dab8:	0018      	movs	r0, r3
   2daba:	4b1a      	ldr	r3, [pc, #104]	; (2db24 <deliverMessage+0xe8>)
   2dabc:	4798      	blx	r3
                c->messageHandlers[i].fp(&md);
   2dabe:	68fa      	ldr	r2, [r7, #12]
   2dac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2dac2:	3304      	adds	r3, #4
   2dac4:	00db      	lsls	r3, r3, #3
   2dac6:	18d3      	adds	r3, r2, r3
   2dac8:	3308      	adds	r3, #8
   2daca:	681b      	ldr	r3, [r3, #0]
   2dacc:	2218      	movs	r2, #24
   2dace:	18ba      	adds	r2, r7, r2
   2dad0:	0010      	movs	r0, r2
   2dad2:	4798      	blx	r3
                rc = SUCCESS;
   2dad4:	2300      	movs	r3, #0
   2dad6:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2dad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2dada:	3301      	adds	r3, #1
   2dadc:	627b      	str	r3, [r7, #36]	; 0x24
   2dade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2dae0:	2b04      	cmp	r3, #4
   2dae2:	ddb7      	ble.n	2da54 <deliverMessage+0x18>
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   2dae4:	6a3b      	ldr	r3, [r7, #32]
   2dae6:	3301      	adds	r3, #1
   2dae8:	d112      	bne.n	2db10 <deliverMessage+0xd4>
   2daea:	68fb      	ldr	r3, [r7, #12]
   2daec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2daee:	2b00      	cmp	r3, #0
   2daf0:	d00e      	beq.n	2db10 <deliverMessage+0xd4>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
   2daf2:	687a      	ldr	r2, [r7, #4]
   2daf4:	68b9      	ldr	r1, [r7, #8]
   2daf6:	2310      	movs	r3, #16
   2daf8:	18fb      	adds	r3, r7, r3
   2dafa:	0018      	movs	r0, r3
   2dafc:	4b09      	ldr	r3, [pc, #36]	; (2db24 <deliverMessage+0xe8>)
   2dafe:	4798      	blx	r3
        c->defaultMessageHandler(&md);
   2db00:	68fb      	ldr	r3, [r7, #12]
   2db02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2db04:	2210      	movs	r2, #16
   2db06:	18ba      	adds	r2, r7, r2
   2db08:	0010      	movs	r0, r2
   2db0a:	4798      	blx	r3
        rc = SUCCESS;
   2db0c:	2300      	movs	r3, #0
   2db0e:	623b      	str	r3, [r7, #32]
    }   
    
    return rc;
   2db10:	6a3b      	ldr	r3, [r7, #32]
}
   2db12:	0018      	movs	r0, r3
   2db14:	46bd      	mov	sp, r7
   2db16:	b00a      	add	sp, #40	; 0x28
   2db18:	bd80      	pop	{r7, pc}
   2db1a:	46c0      	nop			; (mov r8, r8)
   2db1c:	0002f711 	.word	0x0002f711
   2db20:	0002d96d 	.word	0x0002d96d
   2db24:	0002d675 	.word	0x0002d675

0002db28 <keepalive>:


int keepalive(MQTTClient* c)
{
   2db28:	b580      	push	{r7, lr}
   2db2a:	b088      	sub	sp, #32
   2db2c:	af00      	add	r7, sp, #0
   2db2e:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2db30:	2301      	movs	r3, #1
   2db32:	425b      	negs	r3, r3
   2db34:	61fb      	str	r3, [r7, #28]

    if (c->keepAliveInterval == 0)
   2db36:	687b      	ldr	r3, [r7, #4]
   2db38:	699b      	ldr	r3, [r3, #24]
   2db3a:	2b00      	cmp	r3, #0
   2db3c:	d102      	bne.n	2db44 <keepalive+0x1c>
    {
        rc = SUCCESS;
   2db3e:	2300      	movs	r3, #0
   2db40:	61fb      	str	r3, [r7, #28]
        goto exit;
   2db42:	e033      	b.n	2dbac <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
   2db44:	687b      	ldr	r3, [r7, #4]
   2db46:	3354      	adds	r3, #84	; 0x54
   2db48:	0018      	movs	r0, r3
   2db4a:	4b1b      	ldr	r3, [pc, #108]	; (2dbb8 <keepalive+0x90>)
   2db4c:	4798      	blx	r3
   2db4e:	1e03      	subs	r3, r0, #0
   2db50:	d02c      	beq.n	2dbac <keepalive+0x84>
    {
        if (!c->ping_outstanding)
   2db52:	687b      	ldr	r3, [r7, #4]
   2db54:	7f1b      	ldrb	r3, [r3, #28]
   2db56:	2b00      	cmp	r3, #0
   2db58:	d128      	bne.n	2dbac <keepalive+0x84>
        {
            Timer timer;
            TimerInit(&timer);
   2db5a:	230c      	movs	r3, #12
   2db5c:	18fb      	adds	r3, r7, r3
   2db5e:	0018      	movs	r0, r3
   2db60:	4b16      	ldr	r3, [pc, #88]	; (2dbbc <keepalive+0x94>)
   2db62:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   2db64:	23fa      	movs	r3, #250	; 0xfa
   2db66:	009a      	lsls	r2, r3, #2
   2db68:	230c      	movs	r3, #12
   2db6a:	18fb      	adds	r3, r7, r3
   2db6c:	0011      	movs	r1, r2
   2db6e:	0018      	movs	r0, r3
   2db70:	4b13      	ldr	r3, [pc, #76]	; (2dbc0 <keepalive+0x98>)
   2db72:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   2db74:	687b      	ldr	r3, [r7, #4]
   2db76:	691a      	ldr	r2, [r3, #16]
   2db78:	687b      	ldr	r3, [r7, #4]
   2db7a:	689b      	ldr	r3, [r3, #8]
   2db7c:	0019      	movs	r1, r3
   2db7e:	0010      	movs	r0, r2
   2db80:	4b10      	ldr	r3, [pc, #64]	; (2dbc4 <keepalive+0x9c>)
   2db82:	4798      	blx	r3
   2db84:	0003      	movs	r3, r0
   2db86:	61bb      	str	r3, [r7, #24]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   2db88:	69bb      	ldr	r3, [r7, #24]
   2db8a:	2b00      	cmp	r3, #0
   2db8c:	dd0e      	ble.n	2dbac <keepalive+0x84>
   2db8e:	230c      	movs	r3, #12
   2db90:	18fa      	adds	r2, r7, r3
   2db92:	69b9      	ldr	r1, [r7, #24]
   2db94:	687b      	ldr	r3, [r7, #4]
   2db96:	0018      	movs	r0, r3
   2db98:	4b0b      	ldr	r3, [pc, #44]	; (2dbc8 <keepalive+0xa0>)
   2db9a:	4798      	blx	r3
   2db9c:	0003      	movs	r3, r0
   2db9e:	61fb      	str	r3, [r7, #28]
   2dba0:	69fb      	ldr	r3, [r7, #28]
   2dba2:	2b00      	cmp	r3, #0
   2dba4:	d102      	bne.n	2dbac <keepalive+0x84>
                c->ping_outstanding = 1;
   2dba6:	687b      	ldr	r3, [r7, #4]
   2dba8:	2201      	movs	r2, #1
   2dbaa:	771a      	strb	r2, [r3, #28]
        }
    }

exit:
    return rc;
   2dbac:	69fb      	ldr	r3, [r7, #28]
}
   2dbae:	0018      	movs	r0, r3
   2dbb0:	46bd      	mov	sp, r7
   2dbb2:	b008      	add	sp, #32
   2dbb4:	bd80      	pop	{r7, pc}
   2dbb6:	46c0      	nop			; (mov r8, r8)
   2dbb8:	0002e4a9 	.word	0x0002e4a9
   2dbbc:	0002e54d 	.word	0x0002e54d
   2dbc0:	0002e4d5 	.word	0x0002e4d5
   2dbc4:	0002f121 	.word	0x0002f121
   2dbc8:	0002d6c5 	.word	0x0002d6c5

0002dbcc <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   2dbcc:	b5f0      	push	{r4, r5, r6, r7, lr}
   2dbce:	b095      	sub	sp, #84	; 0x54
   2dbd0:	af06      	add	r7, sp, #24
   2dbd2:	6078      	str	r0, [r7, #4]
   2dbd4:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
   2dbd6:	683a      	ldr	r2, [r7, #0]
   2dbd8:	687b      	ldr	r3, [r7, #4]
   2dbda:	0011      	movs	r1, r2
   2dbdc:	0018      	movs	r0, r3
   2dbde:	4b70      	ldr	r3, [pc, #448]	; (2dda0 <cycle+0x1d4>)
   2dbe0:	4798      	blx	r3
   2dbe2:	0002      	movs	r2, r0
   2dbe4:	232e      	movs	r3, #46	; 0x2e
   2dbe6:	18fb      	adds	r3, r7, r3
   2dbe8:	801a      	strh	r2, [r3, #0]
    
    int len = 0,
   2dbea:	2300      	movs	r3, #0
   2dbec:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESS;
   2dbee:	2300      	movs	r3, #0
   2dbf0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
   2dbf2:	232e      	movs	r3, #46	; 0x2e
   2dbf4:	18fb      	adds	r3, r7, r3
   2dbf6:	881b      	ldrh	r3, [r3, #0]
   2dbf8:	2b0d      	cmp	r3, #13
   2dbfa:	d900      	bls.n	2dbfe <cycle+0x32>
   2dbfc:	e0bd      	b.n	2dd7a <cycle+0x1ae>
   2dbfe:	009a      	lsls	r2, r3, #2
   2dc00:	4b68      	ldr	r3, [pc, #416]	; (2dda4 <cycle+0x1d8>)
   2dc02:	18d3      	adds	r3, r2, r3
   2dc04:	681b      	ldr	r3, [r3, #0]
   2dc06:	469f      	mov	pc, r3
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2dc08:	687b      	ldr	r3, [r7, #4]
   2dc0a:	695a      	ldr	r2, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
   2dc0c:	687b      	ldr	r3, [r7, #4]
   2dc0e:	68db      	ldr	r3, [r3, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2dc10:	001e      	movs	r6, r3
   2dc12:	2310      	movs	r3, #16
   2dc14:	18fb      	adds	r3, r7, r3
   2dc16:	1d1d      	adds	r5, r3, #4
   2dc18:	2310      	movs	r3, #16
   2dc1a:	18fb      	adds	r3, r7, r3
   2dc1c:	1c5c      	adds	r4, r3, #1
   2dc1e:	230c      	movs	r3, #12
   2dc20:	18f9      	adds	r1, r7, r3
   2dc22:	2310      	movs	r3, #16
   2dc24:	18fb      	adds	r3, r7, r3
   2dc26:	1c98      	adds	r0, r3, #2
   2dc28:	9604      	str	r6, [sp, #16]
   2dc2a:	9203      	str	r2, [sp, #12]
   2dc2c:	2310      	movs	r3, #16
   2dc2e:	18fb      	adds	r3, r7, r3
   2dc30:	330c      	adds	r3, #12
   2dc32:	9302      	str	r3, [sp, #8]
   2dc34:	2310      	movs	r3, #16
   2dc36:	18fb      	adds	r3, r7, r3
   2dc38:	3308      	adds	r3, #8
   2dc3a:	9301      	str	r3, [sp, #4]
   2dc3c:	2320      	movs	r3, #32
   2dc3e:	18fb      	adds	r3, r7, r3
   2dc40:	9300      	str	r3, [sp, #0]
   2dc42:	002b      	movs	r3, r5
   2dc44:	0022      	movs	r2, r4
   2dc46:	4c58      	ldr	r4, [pc, #352]	; (2dda8 <cycle+0x1dc>)
   2dc48:	47a0      	blx	r4
   2dc4a:	0003      	movs	r3, r0
   2dc4c:	2b01      	cmp	r3, #1
   2dc4e:	d000      	beq.n	2dc52 <cycle+0x86>
   2dc50:	e098      	b.n	2dd84 <cycle+0x1b8>
                goto exit;
            msg.qos = (enum QoS)intQoS;
   2dc52:	68fb      	ldr	r3, [r7, #12]
   2dc54:	b2da      	uxtb	r2, r3
   2dc56:	2310      	movs	r3, #16
   2dc58:	18fb      	adds	r3, r7, r3
   2dc5a:	701a      	strb	r2, [r3, #0]
            deliverMessage(c, &topicName, &msg);
   2dc5c:	2310      	movs	r3, #16
   2dc5e:	18fa      	adds	r2, r7, r3
   2dc60:	2320      	movs	r3, #32
   2dc62:	18f9      	adds	r1, r7, r3
   2dc64:	687b      	ldr	r3, [r7, #4]
   2dc66:	0018      	movs	r0, r3
   2dc68:	4b50      	ldr	r3, [pc, #320]	; (2ddac <cycle+0x1e0>)
   2dc6a:	4798      	blx	r3
            if (msg.qos != QOS0)
   2dc6c:	2310      	movs	r3, #16
   2dc6e:	18fb      	adds	r3, r7, r3
   2dc70:	781b      	ldrb	r3, [r3, #0]
   2dc72:	2b00      	cmp	r3, #0
   2dc74:	d100      	bne.n	2dc78 <cycle+0xac>
   2dc76:	e07d      	b.n	2dd74 <cycle+0x1a8>
            {
                if (msg.qos == QOS1)
   2dc78:	2310      	movs	r3, #16
   2dc7a:	18fb      	adds	r3, r7, r3
   2dc7c:	781b      	ldrb	r3, [r3, #0]
   2dc7e:	2b01      	cmp	r3, #1
   2dc80:	d10f      	bne.n	2dca2 <cycle+0xd6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   2dc82:	687b      	ldr	r3, [r7, #4]
   2dc84:	6918      	ldr	r0, [r3, #16]
   2dc86:	687b      	ldr	r3, [r7, #4]
   2dc88:	689b      	ldr	r3, [r3, #8]
   2dc8a:	0019      	movs	r1, r3
   2dc8c:	2310      	movs	r3, #16
   2dc8e:	18fb      	adds	r3, r7, r3
   2dc90:	889b      	ldrh	r3, [r3, #4]
   2dc92:	9300      	str	r3, [sp, #0]
   2dc94:	2300      	movs	r3, #0
   2dc96:	2204      	movs	r2, #4
   2dc98:	4c45      	ldr	r4, [pc, #276]	; (2ddb0 <cycle+0x1e4>)
   2dc9a:	47a0      	blx	r4
   2dc9c:	0003      	movs	r3, r0
   2dc9e:	637b      	str	r3, [r7, #52]	; 0x34
   2dca0:	e013      	b.n	2dcca <cycle+0xfe>
                else if (msg.qos == QOS2)
   2dca2:	2310      	movs	r3, #16
   2dca4:	18fb      	adds	r3, r7, r3
   2dca6:	781b      	ldrb	r3, [r3, #0]
   2dca8:	2b02      	cmp	r3, #2
   2dcaa:	d10e      	bne.n	2dcca <cycle+0xfe>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   2dcac:	687b      	ldr	r3, [r7, #4]
   2dcae:	6918      	ldr	r0, [r3, #16]
   2dcb0:	687b      	ldr	r3, [r7, #4]
   2dcb2:	689b      	ldr	r3, [r3, #8]
   2dcb4:	0019      	movs	r1, r3
   2dcb6:	2310      	movs	r3, #16
   2dcb8:	18fb      	adds	r3, r7, r3
   2dcba:	889b      	ldrh	r3, [r3, #4]
   2dcbc:	9300      	str	r3, [sp, #0]
   2dcbe:	2300      	movs	r3, #0
   2dcc0:	2205      	movs	r2, #5
   2dcc2:	4c3b      	ldr	r4, [pc, #236]	; (2ddb0 <cycle+0x1e4>)
   2dcc4:	47a0      	blx	r4
   2dcc6:	0003      	movs	r3, r0
   2dcc8:	637b      	str	r3, [r7, #52]	; 0x34
                if (len <= 0)
   2dcca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2dccc:	2b00      	cmp	r3, #0
   2dcce:	dc03      	bgt.n	2dcd8 <cycle+0x10c>
                    rc = FAILURE;
   2dcd0:	2301      	movs	r3, #1
   2dcd2:	425b      	negs	r3, r3
   2dcd4:	633b      	str	r3, [r7, #48]	; 0x30
   2dcd6:	e007      	b.n	2dce8 <cycle+0x11c>
                else
                    rc = sendPacket(c, len, timer);
   2dcd8:	683a      	ldr	r2, [r7, #0]
   2dcda:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2dcdc:	687b      	ldr	r3, [r7, #4]
   2dcde:	0018      	movs	r0, r3
   2dce0:	4b34      	ldr	r3, [pc, #208]	; (2ddb4 <cycle+0x1e8>)
   2dce2:	4798      	blx	r3
   2dce4:	0003      	movs	r3, r0
   2dce6:	633b      	str	r3, [r7, #48]	; 0x30
                if (rc == FAILURE)
   2dce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2dcea:	3301      	adds	r3, #1
   2dcec:	d142      	bne.n	2dd74 <cycle+0x1a8>
                    goto exit; // there was a problem
   2dcee:	46c0      	nop			; (mov r8, r8)
   2dcf0:	e049      	b.n	2dd86 <cycle+0x1ba>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2dcf2:	687b      	ldr	r3, [r7, #4]
   2dcf4:	695c      	ldr	r4, [r3, #20]
   2dcf6:	687b      	ldr	r3, [r7, #4]
   2dcf8:	68db      	ldr	r3, [r3, #12]
   2dcfa:	220a      	movs	r2, #10
   2dcfc:	18ba      	adds	r2, r7, r2
   2dcfe:	2109      	movs	r1, #9
   2dd00:	1879      	adds	r1, r7, r1
   2dd02:	2008      	movs	r0, #8
   2dd04:	1838      	adds	r0, r7, r0
   2dd06:	9300      	str	r3, [sp, #0]
   2dd08:	0023      	movs	r3, r4
   2dd0a:	4c2b      	ldr	r4, [pc, #172]	; (2ddb8 <cycle+0x1ec>)
   2dd0c:	47a0      	blx	r4
   2dd0e:	0003      	movs	r3, r0
   2dd10:	2b01      	cmp	r3, #1
   2dd12:	d003      	beq.n	2dd1c <cycle+0x150>
                rc = FAILURE;
   2dd14:	2301      	movs	r3, #1
   2dd16:	425b      	negs	r3, r3
   2dd18:	633b      	str	r3, [r7, #48]	; 0x30
   2dd1a:	e023      	b.n	2dd64 <cycle+0x198>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   2dd1c:	687b      	ldr	r3, [r7, #4]
   2dd1e:	6918      	ldr	r0, [r3, #16]
   2dd20:	687b      	ldr	r3, [r7, #4]
   2dd22:	689b      	ldr	r3, [r3, #8]
   2dd24:	0019      	movs	r1, r3
   2dd26:	230a      	movs	r3, #10
   2dd28:	18fb      	adds	r3, r7, r3
   2dd2a:	881b      	ldrh	r3, [r3, #0]
   2dd2c:	9300      	str	r3, [sp, #0]
   2dd2e:	2300      	movs	r3, #0
   2dd30:	2206      	movs	r2, #6
   2dd32:	4c1f      	ldr	r4, [pc, #124]	; (2ddb0 <cycle+0x1e4>)
   2dd34:	47a0      	blx	r4
   2dd36:	0003      	movs	r3, r0
   2dd38:	637b      	str	r3, [r7, #52]	; 0x34
   2dd3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2dd3c:	2b00      	cmp	r3, #0
   2dd3e:	dc03      	bgt.n	2dd48 <cycle+0x17c>
                rc = FAILURE;
   2dd40:	2301      	movs	r3, #1
   2dd42:	425b      	negs	r3, r3
   2dd44:	633b      	str	r3, [r7, #48]	; 0x30
   2dd46:	e00d      	b.n	2dd64 <cycle+0x198>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   2dd48:	683a      	ldr	r2, [r7, #0]
   2dd4a:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2dd4c:	687b      	ldr	r3, [r7, #4]
   2dd4e:	0018      	movs	r0, r3
   2dd50:	4b18      	ldr	r3, [pc, #96]	; (2ddb4 <cycle+0x1e8>)
   2dd52:	4798      	blx	r3
   2dd54:	0003      	movs	r3, r0
   2dd56:	633b      	str	r3, [r7, #48]	; 0x30
   2dd58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2dd5a:	2b00      	cmp	r3, #0
   2dd5c:	d002      	beq.n	2dd64 <cycle+0x198>
                rc = FAILURE; // there was a problem
   2dd5e:	2301      	movs	r3, #1
   2dd60:	425b      	negs	r3, r3
   2dd62:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
   2dd64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2dd66:	3301      	adds	r3, #1
   2dd68:	d106      	bne.n	2dd78 <cycle+0x1ac>
                goto exit; // there was a problem
   2dd6a:	e00c      	b.n	2dd86 <cycle+0x1ba>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   2dd6c:	687b      	ldr	r3, [r7, #4]
   2dd6e:	2200      	movs	r2, #0
   2dd70:	771a      	strb	r2, [r3, #28]
            break;
   2dd72:	e002      	b.n	2dd7a <cycle+0x1ae>
            break;
   2dd74:	46c0      	nop			; (mov r8, r8)
   2dd76:	e000      	b.n	2dd7a <cycle+0x1ae>
            break;
   2dd78:	46c0      	nop			; (mov r8, r8)
    }
    keepalive(c);
   2dd7a:	687b      	ldr	r3, [r7, #4]
   2dd7c:	0018      	movs	r0, r3
   2dd7e:	4b0f      	ldr	r3, [pc, #60]	; (2ddbc <cycle+0x1f0>)
   2dd80:	4798      	blx	r3
   2dd82:	e000      	b.n	2dd86 <cycle+0x1ba>
                goto exit;
   2dd84:	46c0      	nop			; (mov r8, r8)
exit:
    if (rc == SUCCESS)
   2dd86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2dd88:	2b00      	cmp	r3, #0
   2dd8a:	d103      	bne.n	2dd94 <cycle+0x1c8>
        rc = packet_type;
   2dd8c:	232e      	movs	r3, #46	; 0x2e
   2dd8e:	18fb      	adds	r3, r7, r3
   2dd90:	881b      	ldrh	r3, [r3, #0]
   2dd92:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
   2dd94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
   2dd96:	0018      	movs	r0, r3
   2dd98:	46bd      	mov	sp, r7
   2dd9a:	b00f      	add	sp, #60	; 0x3c
   2dd9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2dd9e:	46c0      	nop			; (mov r8, r8)
   2dda0:	0002d881 	.word	0x0002d881
   2dda4:	000395f0 	.word	0x000395f0
   2dda8:	0002f145 	.word	0x0002f145
   2ddac:	0002da3d 	.word	0x0002da3d
   2ddb0:	0002f93d 	.word	0x0002f93d
   2ddb4:	0002d6c5 	.word	0x0002d6c5
   2ddb8:	0002f249 	.word	0x0002f249
   2ddbc:	0002db29 	.word	0x0002db29

0002ddc0 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   2ddc0:	b580      	push	{r7, lr}
   2ddc2:	b086      	sub	sp, #24
   2ddc4:	af00      	add	r7, sp, #0
   2ddc6:	6078      	str	r0, [r7, #4]
   2ddc8:	6039      	str	r1, [r7, #0]
    int rc = SUCCESS;
   2ddca:	2300      	movs	r3, #0
   2ddcc:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
   2ddce:	2308      	movs	r3, #8
   2ddd0:	18fb      	adds	r3, r7, r3
   2ddd2:	0018      	movs	r0, r3
   2ddd4:	4b11      	ldr	r3, [pc, #68]	; (2de1c <MQTTYield+0x5c>)
   2ddd6:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   2ddd8:	683a      	ldr	r2, [r7, #0]
   2ddda:	2308      	movs	r3, #8
   2dddc:	18fb      	adds	r3, r7, r3
   2ddde:	0011      	movs	r1, r2
   2dde0:	0018      	movs	r0, r3
   2dde2:	4b0f      	ldr	r3, [pc, #60]	; (2de20 <MQTTYield+0x60>)
   2dde4:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   2dde6:	2308      	movs	r3, #8
   2dde8:	18fa      	adds	r2, r7, r3
   2ddea:	687b      	ldr	r3, [r7, #4]
   2ddec:	0011      	movs	r1, r2
   2ddee:	0018      	movs	r0, r3
   2ddf0:	4b0c      	ldr	r3, [pc, #48]	; (2de24 <MQTTYield+0x64>)
   2ddf2:	4798      	blx	r3
   2ddf4:	0003      	movs	r3, r0
   2ddf6:	3301      	adds	r3, #1
   2ddf8:	d103      	bne.n	2de02 <MQTTYield+0x42>
        {
            rc = FAILURE;
   2ddfa:	2301      	movs	r3, #1
   2ddfc:	425b      	negs	r3, r3
   2ddfe:	617b      	str	r3, [r7, #20]
            break;
   2de00:	e006      	b.n	2de10 <MQTTYield+0x50>
        }
	} while (!TimerIsExpired(&timer));
   2de02:	2308      	movs	r3, #8
   2de04:	18fb      	adds	r3, r7, r3
   2de06:	0018      	movs	r0, r3
   2de08:	4b07      	ldr	r3, [pc, #28]	; (2de28 <MQTTYield+0x68>)
   2de0a:	4798      	blx	r3
   2de0c:	1e03      	subs	r3, r0, #0
   2de0e:	d0ea      	beq.n	2dde6 <MQTTYield+0x26>
        
    return rc;
   2de10:	697b      	ldr	r3, [r7, #20]
}
   2de12:	0018      	movs	r0, r3
   2de14:	46bd      	mov	sp, r7
   2de16:	b006      	add	sp, #24
   2de18:	bd80      	pop	{r7, pc}
   2de1a:	46c0      	nop			; (mov r8, r8)
   2de1c:	0002e54d 	.word	0x0002e54d
   2de20:	0002e4d5 	.word	0x0002e4d5
   2de24:	0002dbcd 	.word	0x0002dbcd
   2de28:	0002e4a9 	.word	0x0002e4a9

0002de2c <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   2de2c:	b580      	push	{r7, lr}
   2de2e:	b086      	sub	sp, #24
   2de30:	af00      	add	r7, sp, #0
   2de32:	60f8      	str	r0, [r7, #12]
   2de34:	60b9      	str	r1, [r7, #8]
   2de36:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2de38:	2301      	movs	r3, #1
   2de3a:	425b      	negs	r3, r3
   2de3c:	617b      	str	r3, [r7, #20]
    
    do
    {
        if (TimerIsExpired(timer))
   2de3e:	687b      	ldr	r3, [r7, #4]
   2de40:	0018      	movs	r0, r3
   2de42:	4b0b      	ldr	r3, [pc, #44]	; (2de70 <waitfor+0x44>)
   2de44:	4798      	blx	r3
   2de46:	1e03      	subs	r3, r0, #0
   2de48:	d10c      	bne.n	2de64 <waitfor+0x38>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   2de4a:	687a      	ldr	r2, [r7, #4]
   2de4c:	68fb      	ldr	r3, [r7, #12]
   2de4e:	0011      	movs	r1, r2
   2de50:	0018      	movs	r0, r3
   2de52:	4b08      	ldr	r3, [pc, #32]	; (2de74 <waitfor+0x48>)
   2de54:	4798      	blx	r3
   2de56:	0003      	movs	r3, r0
   2de58:	617b      	str	r3, [r7, #20]
   2de5a:	697a      	ldr	r2, [r7, #20]
   2de5c:	68bb      	ldr	r3, [r7, #8]
   2de5e:	429a      	cmp	r2, r3
   2de60:	d1ed      	bne.n	2de3e <waitfor+0x12>
   2de62:	e000      	b.n	2de66 <waitfor+0x3a>
            break; // we timed out
   2de64:	46c0      	nop			; (mov r8, r8)
    
    return rc;
   2de66:	697b      	ldr	r3, [r7, #20]
}
   2de68:	0018      	movs	r0, r3
   2de6a:	46bd      	mov	sp, r7
   2de6c:	b006      	add	sp, #24
   2de6e:	bd80      	pop	{r7, pc}
   2de70:	0002e4a9 	.word	0x0002e4a9
   2de74:	0002dbcd 	.word	0x0002dbcd

0002de78 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   2de78:	b590      	push	{r4, r7, lr}
   2de7a:	b09f      	sub	sp, #124	; 0x7c
   2de7c:	af00      	add	r7, sp, #0
   2de7e:	6078      	str	r0, [r7, #4]
   2de80:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
   2de82:	2301      	movs	r3, #1
   2de84:	425b      	negs	r3, r3
   2de86:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   2de88:	230c      	movs	r3, #12
   2de8a:	18fa      	adds	r2, r7, r3
   2de8c:	4b41      	ldr	r3, [pc, #260]	; (2df94 <MQTTConnect+0x11c>)
   2de8e:	0010      	movs	r0, r2
   2de90:	0019      	movs	r1, r3
   2de92:	2358      	movs	r3, #88	; 0x58
   2de94:	001a      	movs	r2, r3
   2de96:	4b40      	ldr	r3, [pc, #256]	; (2df98 <MQTTConnect+0x120>)
   2de98:	4798      	blx	r3
    int len = 0;
   2de9a:	2300      	movs	r3, #0
   2de9c:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   2de9e:	687b      	ldr	r3, [r7, #4]
   2dea0:	6a1b      	ldr	r3, [r3, #32]
   2dea2:	2b00      	cmp	r3, #0
   2dea4:	d166      	bne.n	2df74 <MQTTConnect+0xfc>
		goto exit;
    
    TimerInit(&connect_timer);
   2dea6:	2364      	movs	r3, #100	; 0x64
   2dea8:	18fb      	adds	r3, r7, r3
   2deaa:	0018      	movs	r0, r3
   2deac:	4b3b      	ldr	r3, [pc, #236]	; (2df9c <MQTTConnect+0x124>)
   2deae:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   2deb0:	687b      	ldr	r3, [r7, #4]
   2deb2:	685a      	ldr	r2, [r3, #4]
   2deb4:	2364      	movs	r3, #100	; 0x64
   2deb6:	18fb      	adds	r3, r7, r3
   2deb8:	0011      	movs	r1, r2
   2deba:	0018      	movs	r0, r3
   2debc:	4b38      	ldr	r3, [pc, #224]	; (2dfa0 <MQTTConnect+0x128>)
   2debe:	4798      	blx	r3

    if (options == 0)
   2dec0:	683b      	ldr	r3, [r7, #0]
   2dec2:	2b00      	cmp	r3, #0
   2dec4:	d102      	bne.n	2decc <MQTTConnect+0x54>
        options = &default_options; /* set default options if none were supplied */
   2dec6:	230c      	movs	r3, #12
   2dec8:	18fb      	adds	r3, r7, r3
   2deca:	603b      	str	r3, [r7, #0]
    
    c->keepAliveInterval = options->keepAliveInterval;
   2decc:	683b      	ldr	r3, [r7, #0]
   2dece:	8b1b      	ldrh	r3, [r3, #24]
   2ded0:	001a      	movs	r2, r3
   2ded2:	687b      	ldr	r3, [r7, #4]
   2ded4:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   2ded6:	687b      	ldr	r3, [r7, #4]
   2ded8:	3354      	adds	r3, #84	; 0x54
   2deda:	001a      	movs	r2, r3
   2dedc:	687b      	ldr	r3, [r7, #4]
   2dede:	699b      	ldr	r3, [r3, #24]
   2dee0:	0019      	movs	r1, r3
   2dee2:	0010      	movs	r0, r2
   2dee4:	4b2f      	ldr	r3, [pc, #188]	; (2dfa4 <MQTTConnect+0x12c>)
   2dee6:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   2dee8:	687b      	ldr	r3, [r7, #4]
   2deea:	6918      	ldr	r0, [r3, #16]
   2deec:	687b      	ldr	r3, [r7, #4]
   2deee:	689b      	ldr	r3, [r3, #8]
   2def0:	0019      	movs	r1, r3
   2def2:	683b      	ldr	r3, [r7, #0]
   2def4:	001a      	movs	r2, r3
   2def6:	4b2c      	ldr	r3, [pc, #176]	; (2dfa8 <MQTTConnect+0x130>)
   2def8:	4798      	blx	r3
   2defa:	0003      	movs	r3, r0
   2defc:	673b      	str	r3, [r7, #112]	; 0x70
   2defe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2df00:	2b00      	cmp	r3, #0
   2df02:	dd39      	ble.n	2df78 <MQTTConnect+0x100>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   2df04:	2364      	movs	r3, #100	; 0x64
   2df06:	18fa      	adds	r2, r7, r3
   2df08:	6f39      	ldr	r1, [r7, #112]	; 0x70
   2df0a:	687b      	ldr	r3, [r7, #4]
   2df0c:	0018      	movs	r0, r3
   2df0e:	4b27      	ldr	r3, [pc, #156]	; (2dfac <MQTTConnect+0x134>)
   2df10:	4798      	blx	r3
   2df12:	0003      	movs	r3, r0
   2df14:	677b      	str	r3, [r7, #116]	; 0x74
   2df16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2df18:	2b00      	cmp	r3, #0
   2df1a:	d12f      	bne.n	2df7c <MQTTConnect+0x104>
        goto exit; // there was a problem
    
    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   2df1c:	2364      	movs	r3, #100	; 0x64
   2df1e:	18fa      	adds	r2, r7, r3
   2df20:	687b      	ldr	r3, [r7, #4]
   2df22:	2102      	movs	r1, #2
   2df24:	0018      	movs	r0, r3
   2df26:	4b22      	ldr	r3, [pc, #136]	; (2dfb0 <MQTTConnect+0x138>)
   2df28:	4798      	blx	r3
   2df2a:	0003      	movs	r3, r0
   2df2c:	2b02      	cmp	r3, #2
   2df2e:	d11d      	bne.n	2df6c <MQTTConnect+0xf4>
    {
        unsigned char connack_rc = 255;
   2df30:	230b      	movs	r3, #11
   2df32:	18fb      	adds	r3, r7, r3
   2df34:	22ff      	movs	r2, #255	; 0xff
   2df36:	701a      	strb	r2, [r3, #0]
        unsigned char sessionPresent = 0;
   2df38:	230a      	movs	r3, #10
   2df3a:	18fb      	adds	r3, r7, r3
   2df3c:	2200      	movs	r2, #0
   2df3e:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   2df40:	687b      	ldr	r3, [r7, #4]
   2df42:	695a      	ldr	r2, [r3, #20]
   2df44:	687b      	ldr	r3, [r7, #4]
   2df46:	68db      	ldr	r3, [r3, #12]
   2df48:	210b      	movs	r1, #11
   2df4a:	1879      	adds	r1, r7, r1
   2df4c:	200a      	movs	r0, #10
   2df4e:	1838      	adds	r0, r7, r0
   2df50:	4c18      	ldr	r4, [pc, #96]	; (2dfb4 <MQTTConnect+0x13c>)
   2df52:	47a0      	blx	r4
   2df54:	0003      	movs	r3, r0
   2df56:	2b01      	cmp	r3, #1
   2df58:	d104      	bne.n	2df64 <MQTTConnect+0xec>
            rc = connack_rc;
   2df5a:	230b      	movs	r3, #11
   2df5c:	18fb      	adds	r3, r7, r3
   2df5e:	781b      	ldrb	r3, [r3, #0]
   2df60:	677b      	str	r3, [r7, #116]	; 0x74
   2df62:	e00c      	b.n	2df7e <MQTTConnect+0x106>
        else
            rc = FAILURE;
   2df64:	2301      	movs	r3, #1
   2df66:	425b      	negs	r3, r3
   2df68:	677b      	str	r3, [r7, #116]	; 0x74
   2df6a:	e008      	b.n	2df7e <MQTTConnect+0x106>
    }
    else
        rc = FAILURE;
   2df6c:	2301      	movs	r3, #1
   2df6e:	425b      	negs	r3, r3
   2df70:	677b      	str	r3, [r7, #116]	; 0x74
   2df72:	e004      	b.n	2df7e <MQTTConnect+0x106>
		goto exit;
   2df74:	46c0      	nop			; (mov r8, r8)
   2df76:	e002      	b.n	2df7e <MQTTConnect+0x106>
        goto exit;
   2df78:	46c0      	nop			; (mov r8, r8)
   2df7a:	e000      	b.n	2df7e <MQTTConnect+0x106>
        goto exit; // there was a problem
   2df7c:	46c0      	nop			; (mov r8, r8)
    
exit:
    if (rc == SUCCESS)
   2df7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2df80:	2b00      	cmp	r3, #0
   2df82:	d102      	bne.n	2df8a <MQTTConnect+0x112>
        c->isconnected = 1;
   2df84:	687b      	ldr	r3, [r7, #4]
   2df86:	2201      	movs	r2, #1
   2df88:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
   2df8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   2df8c:	0018      	movs	r0, r3
   2df8e:	46bd      	mov	sp, r7
   2df90:	b01f      	add	sp, #124	; 0x7c
   2df92:	bd90      	pop	{r4, r7, pc}
   2df94:	00039628 	.word	0x00039628
   2df98:	000345a9 	.word	0x000345a9
   2df9c:	0002e54d 	.word	0x0002e54d
   2dfa0:	0002e4d5 	.word	0x0002e4d5
   2dfa4:	0002e4fd 	.word	0x0002e4fd
   2dfa8:	0002ed29 	.word	0x0002ed29
   2dfac:	0002d6c5 	.word	0x0002d6c5
   2dfb0:	0002de2d 	.word	0x0002de2d
   2dfb4:	0002efa5 	.word	0x0002efa5

0002dfb8 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   2dfb8:	b5b0      	push	{r4, r5, r7, lr}
   2dfba:	b096      	sub	sp, #88	; 0x58
   2dfbc:	af04      	add	r7, sp, #16
   2dfbe:	60f8      	str	r0, [r7, #12]
   2dfc0:	60b9      	str	r1, [r7, #8]
   2dfc2:	603b      	str	r3, [r7, #0]
   2dfc4:	1dfb      	adds	r3, r7, #7
   2dfc6:	701a      	strb	r2, [r3, #0]
    int rc = FAILURE;  
   2dfc8:	2301      	movs	r3, #1
   2dfca:	425b      	negs	r3, r3
   2dfcc:	647b      	str	r3, [r7, #68]	; 0x44
    Timer timer;
    int len = 0;
   2dfce:	2300      	movs	r3, #0
   2dfd0:	63fb      	str	r3, [r7, #60]	; 0x3c
    MQTTString topic = MQTTString_initializer;
   2dfd2:	2324      	movs	r3, #36	; 0x24
   2dfd4:	18fb      	adds	r3, r7, r3
   2dfd6:	2200      	movs	r2, #0
   2dfd8:	601a      	str	r2, [r3, #0]
   2dfda:	2324      	movs	r3, #36	; 0x24
   2dfdc:	18fb      	adds	r3, r7, r3
   2dfde:	2200      	movs	r2, #0
   2dfe0:	605a      	str	r2, [r3, #4]
   2dfe2:	2324      	movs	r3, #36	; 0x24
   2dfe4:	18fb      	adds	r3, r7, r3
   2dfe6:	2200      	movs	r2, #0
   2dfe8:	609a      	str	r2, [r3, #8]
	int Qoss = (int) qos;
   2dfea:	1dfb      	adds	r3, r7, #7
   2dfec:	781b      	ldrb	r3, [r3, #0]
   2dfee:	623b      	str	r3, [r7, #32]
    topic.cstring = (char *)topicFilter;
   2dff0:	2324      	movs	r3, #36	; 0x24
   2dff2:	18fb      	adds	r3, r7, r3
   2dff4:	68ba      	ldr	r2, [r7, #8]
   2dff6:	601a      	str	r2, [r3, #0]
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2dff8:	68fb      	ldr	r3, [r7, #12]
   2dffa:	6a1b      	ldr	r3, [r3, #32]
   2dffc:	2b00      	cmp	r3, #0
   2dffe:	d100      	bne.n	2e002 <MQTTSubscribe+0x4a>
   2e000:	e088      	b.n	2e114 <MQTTSubscribe+0x15c>
		goto exit;

    TimerInit(&timer);
   2e002:	2330      	movs	r3, #48	; 0x30
   2e004:	18fb      	adds	r3, r7, r3
   2e006:	0018      	movs	r0, r3
   2e008:	4b47      	ldr	r3, [pc, #284]	; (2e128 <MQTTSubscribe+0x170>)
   2e00a:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2e00c:	68fb      	ldr	r3, [r7, #12]
   2e00e:	685a      	ldr	r2, [r3, #4]
   2e010:	2330      	movs	r3, #48	; 0x30
   2e012:	18fb      	adds	r3, r7, r3
   2e014:	0011      	movs	r1, r2
   2e016:	0018      	movs	r0, r3
   2e018:	4b44      	ldr	r3, [pc, #272]	; (2e12c <MQTTSubscribe+0x174>)
   2e01a:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   2e01c:	68fb      	ldr	r3, [r7, #12]
   2e01e:	691c      	ldr	r4, [r3, #16]
   2e020:	68fb      	ldr	r3, [r7, #12]
   2e022:	689b      	ldr	r3, [r3, #8]
   2e024:	001d      	movs	r5, r3
   2e026:	68fb      	ldr	r3, [r7, #12]
   2e028:	0018      	movs	r0, r3
   2e02a:	4b41      	ldr	r3, [pc, #260]	; (2e130 <MQTTSubscribe+0x178>)
   2e02c:	4798      	blx	r3
   2e02e:	0003      	movs	r3, r0
   2e030:	b29a      	uxth	r2, r3
   2e032:	2320      	movs	r3, #32
   2e034:	18fb      	adds	r3, r7, r3
   2e036:	9302      	str	r3, [sp, #8]
   2e038:	2324      	movs	r3, #36	; 0x24
   2e03a:	18fb      	adds	r3, r7, r3
   2e03c:	9301      	str	r3, [sp, #4]
   2e03e:	2301      	movs	r3, #1
   2e040:	9300      	str	r3, [sp, #0]
   2e042:	0013      	movs	r3, r2
   2e044:	2200      	movs	r2, #0
   2e046:	0029      	movs	r1, r5
   2e048:	0020      	movs	r0, r4
   2e04a:	4c3a      	ldr	r4, [pc, #232]	; (2e134 <MQTTSubscribe+0x17c>)
   2e04c:	47a0      	blx	r4
   2e04e:	0003      	movs	r3, r0
   2e050:	63fb      	str	r3, [r7, #60]	; 0x3c
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   2e052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2e054:	2b00      	cmp	r3, #0
   2e056:	dd5f      	ble.n	2e118 <MQTTSubscribe+0x160>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2e058:	2330      	movs	r3, #48	; 0x30
   2e05a:	18fa      	adds	r2, r7, r3
   2e05c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   2e05e:	68fb      	ldr	r3, [r7, #12]
   2e060:	0018      	movs	r0, r3
   2e062:	4b35      	ldr	r3, [pc, #212]	; (2e138 <MQTTSubscribe+0x180>)
   2e064:	4798      	blx	r3
   2e066:	0003      	movs	r3, r0
   2e068:	647b      	str	r3, [r7, #68]	; 0x44
   2e06a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2e06c:	2b00      	cmp	r3, #0
   2e06e:	d155      	bne.n	2e11c <MQTTSubscribe+0x164>
        goto exit;             // there was a problem
    
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   2e070:	2330      	movs	r3, #48	; 0x30
   2e072:	18fa      	adds	r2, r7, r3
   2e074:	68fb      	ldr	r3, [r7, #12]
   2e076:	2109      	movs	r1, #9
   2e078:	0018      	movs	r0, r3
   2e07a:	4b30      	ldr	r3, [pc, #192]	; (2e13c <MQTTSubscribe+0x184>)
   2e07c:	4798      	blx	r3
   2e07e:	0003      	movs	r3, r0
   2e080:	2b09      	cmp	r3, #9
   2e082:	d143      	bne.n	2e10c <MQTTSubscribe+0x154>
    {
        int count = 0, grantedQoS = -1;
   2e084:	2300      	movs	r3, #0
   2e086:	61fb      	str	r3, [r7, #28]
   2e088:	2301      	movs	r3, #1
   2e08a:	425b      	negs	r3, r3
   2e08c:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   2e08e:	68fb      	ldr	r3, [r7, #12]
   2e090:	695a      	ldr	r2, [r3, #20]
   2e092:	68fb      	ldr	r3, [r7, #12]
   2e094:	68db      	ldr	r3, [r3, #12]
   2e096:	001c      	movs	r4, r3
   2e098:	2318      	movs	r3, #24
   2e09a:	18fb      	adds	r3, r7, r3
   2e09c:	211c      	movs	r1, #28
   2e09e:	1879      	adds	r1, r7, r1
   2e0a0:	2016      	movs	r0, #22
   2e0a2:	1838      	adds	r0, r7, r0
   2e0a4:	9401      	str	r4, [sp, #4]
   2e0a6:	9200      	str	r2, [sp, #0]
   2e0a8:	000a      	movs	r2, r1
   2e0aa:	2101      	movs	r1, #1
   2e0ac:	4c24      	ldr	r4, [pc, #144]	; (2e140 <MQTTSubscribe+0x188>)
   2e0ae:	47a0      	blx	r4
   2e0b0:	0003      	movs	r3, r0
   2e0b2:	2b01      	cmp	r3, #1
   2e0b4:	d101      	bne.n	2e0ba <MQTTSubscribe+0x102>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   2e0b6:	69bb      	ldr	r3, [r7, #24]
   2e0b8:	647b      	str	r3, [r7, #68]	; 0x44
        if (rc != 0x80)
   2e0ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2e0bc:	2b80      	cmp	r3, #128	; 0x80
   2e0be:	d02e      	beq.n	2e11e <MQTTSubscribe+0x166>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2e0c0:	2300      	movs	r3, #0
   2e0c2:	643b      	str	r3, [r7, #64]	; 0x40
   2e0c4:	e01e      	b.n	2e104 <MQTTSubscribe+0x14c>
            {
                if (c->messageHandlers[i].topicFilter == 0)
   2e0c6:	68fa      	ldr	r2, [r7, #12]
   2e0c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e0ca:	3304      	adds	r3, #4
   2e0cc:	00db      	lsls	r3, r3, #3
   2e0ce:	18d3      	adds	r3, r2, r3
   2e0d0:	3304      	adds	r3, #4
   2e0d2:	681b      	ldr	r3, [r3, #0]
   2e0d4:	2b00      	cmp	r3, #0
   2e0d6:	d112      	bne.n	2e0fe <MQTTSubscribe+0x146>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
   2e0d8:	68fa      	ldr	r2, [r7, #12]
   2e0da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e0dc:	3304      	adds	r3, #4
   2e0de:	00db      	lsls	r3, r3, #3
   2e0e0:	18d3      	adds	r3, r2, r3
   2e0e2:	3304      	adds	r3, #4
   2e0e4:	68ba      	ldr	r2, [r7, #8]
   2e0e6:	601a      	str	r2, [r3, #0]
                    c->messageHandlers[i].fp = msgHandler;
   2e0e8:	68fa      	ldr	r2, [r7, #12]
   2e0ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e0ec:	3304      	adds	r3, #4
   2e0ee:	00db      	lsls	r3, r3, #3
   2e0f0:	18d3      	adds	r3, r2, r3
   2e0f2:	3308      	adds	r3, #8
   2e0f4:	683a      	ldr	r2, [r7, #0]
   2e0f6:	601a      	str	r2, [r3, #0]
                    rc = 0;
   2e0f8:	2300      	movs	r3, #0
   2e0fa:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
   2e0fc:	e00f      	b.n	2e11e <MQTTSubscribe+0x166>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2e0fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e100:	3301      	adds	r3, #1
   2e102:	643b      	str	r3, [r7, #64]	; 0x40
   2e104:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e106:	2b04      	cmp	r3, #4
   2e108:	dddd      	ble.n	2e0c6 <MQTTSubscribe+0x10e>
   2e10a:	e008      	b.n	2e11e <MQTTSubscribe+0x166>
                }
            }
        }
    }
    else 
        rc = FAILURE;
   2e10c:	2301      	movs	r3, #1
   2e10e:	425b      	negs	r3, r3
   2e110:	647b      	str	r3, [r7, #68]	; 0x44
   2e112:	e004      	b.n	2e11e <MQTTSubscribe+0x166>
		goto exit;
   2e114:	46c0      	nop			; (mov r8, r8)
   2e116:	e002      	b.n	2e11e <MQTTSubscribe+0x166>
        goto exit;
   2e118:	46c0      	nop			; (mov r8, r8)
   2e11a:	e000      	b.n	2e11e <MQTTSubscribe+0x166>
        goto exit;             // there was a problem
   2e11c:	46c0      	nop			; (mov r8, r8)
        
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2e11e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   2e120:	0018      	movs	r0, r3
   2e122:	46bd      	mov	sp, r7
   2e124:	b012      	add	sp, #72	; 0x48
   2e126:	bdb0      	pop	{r4, r5, r7, pc}
   2e128:	0002e54d 	.word	0x0002e54d
   2e12c:	0002e4d5 	.word	0x0002e4d5
   2e130:	0002d695 	.word	0x0002d695
   2e134:	0002fa85 	.word	0x0002fa85
   2e138:	0002d6c5 	.word	0x0002d6c5
   2e13c:	0002de2d 	.word	0x0002de2d
   2e140:	0002fbd5 	.word	0x0002fbd5

0002e144 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   2e144:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e146:	46ce      	mov	lr, r9
   2e148:	4647      	mov	r7, r8
   2e14a:	b580      	push	{r7, lr}
   2e14c:	b097      	sub	sp, #92	; 0x5c
   2e14e:	af08      	add	r7, sp, #32
   2e150:	60f8      	str	r0, [r7, #12]
   2e152:	60b9      	str	r1, [r7, #8]
   2e154:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2e156:	2301      	movs	r3, #1
   2e158:	425b      	negs	r3, r3
   2e15a:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   2e15c:	2318      	movs	r3, #24
   2e15e:	18fb      	adds	r3, r7, r3
   2e160:	2200      	movs	r2, #0
   2e162:	601a      	str	r2, [r3, #0]
   2e164:	2318      	movs	r3, #24
   2e166:	18fb      	adds	r3, r7, r3
   2e168:	2200      	movs	r2, #0
   2e16a:	605a      	str	r2, [r3, #4]
   2e16c:	2318      	movs	r3, #24
   2e16e:	18fb      	adds	r3, r7, r3
   2e170:	2200      	movs	r2, #0
   2e172:	609a      	str	r2, [r3, #8]
    topic.cstring = (char *)topicName;
   2e174:	2318      	movs	r3, #24
   2e176:	18fb      	adds	r3, r7, r3
   2e178:	68ba      	ldr	r2, [r7, #8]
   2e17a:	601a      	str	r2, [r3, #0]
    int len = 0;
   2e17c:	2300      	movs	r3, #0
   2e17e:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2e180:	68fb      	ldr	r3, [r7, #12]
   2e182:	6a1b      	ldr	r3, [r3, #32]
   2e184:	2b00      	cmp	r3, #0
   2e186:	d100      	bne.n	2e18a <MQTTPublish+0x46>
   2e188:	e0a0      	b.n	2e2cc <MQTTPublish+0x188>
		goto exit;

    TimerInit(&timer);
   2e18a:	2324      	movs	r3, #36	; 0x24
   2e18c:	18fb      	adds	r3, r7, r3
   2e18e:	0018      	movs	r0, r3
   2e190:	4b55      	ldr	r3, [pc, #340]	; (2e2e8 <MQTTPublish+0x1a4>)
   2e192:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2e194:	68fb      	ldr	r3, [r7, #12]
   2e196:	685a      	ldr	r2, [r3, #4]
   2e198:	2324      	movs	r3, #36	; 0x24
   2e19a:	18fb      	adds	r3, r7, r3
   2e19c:	0011      	movs	r1, r2
   2e19e:	0018      	movs	r0, r3
   2e1a0:	4b52      	ldr	r3, [pc, #328]	; (2e2ec <MQTTPublish+0x1a8>)
   2e1a2:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   2e1a4:	687b      	ldr	r3, [r7, #4]
   2e1a6:	781b      	ldrb	r3, [r3, #0]
   2e1a8:	2b01      	cmp	r3, #1
   2e1aa:	d003      	beq.n	2e1b4 <MQTTPublish+0x70>
   2e1ac:	687b      	ldr	r3, [r7, #4]
   2e1ae:	781b      	ldrb	r3, [r3, #0]
   2e1b0:	2b02      	cmp	r3, #2
   2e1b2:	d107      	bne.n	2e1c4 <MQTTPublish+0x80>
        message->id = getNextPacketId(c);
   2e1b4:	68fb      	ldr	r3, [r7, #12]
   2e1b6:	0018      	movs	r0, r3
   2e1b8:	4b4d      	ldr	r3, [pc, #308]	; (2e2f0 <MQTTPublish+0x1ac>)
   2e1ba:	4798      	blx	r3
   2e1bc:	0003      	movs	r3, r0
   2e1be:	b29a      	uxth	r2, r3
   2e1c0:	687b      	ldr	r3, [r7, #4]
   2e1c2:	809a      	strh	r2, [r3, #4]
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2e1c4:	68fb      	ldr	r3, [r7, #12]
   2e1c6:	691b      	ldr	r3, [r3, #16]
   2e1c8:	469c      	mov	ip, r3
   2e1ca:	68fb      	ldr	r3, [r7, #12]
   2e1cc:	689b      	ldr	r3, [r3, #8]
   2e1ce:	001d      	movs	r5, r3
   2e1d0:	687b      	ldr	r3, [r7, #4]
   2e1d2:	781b      	ldrb	r3, [r3, #0]
   2e1d4:	001e      	movs	r6, r3
   2e1d6:	687b      	ldr	r3, [r7, #4]
   2e1d8:	785b      	ldrb	r3, [r3, #1]
   2e1da:	4698      	mov	r8, r3
   2e1dc:	687b      	ldr	r3, [r7, #4]
   2e1de:	889b      	ldrh	r3, [r3, #4]
   2e1e0:	4699      	mov	r9, r3
              topic, (unsigned char*)message->payload, message->payloadlen);
   2e1e2:	687b      	ldr	r3, [r7, #4]
   2e1e4:	689a      	ldr	r2, [r3, #8]
   2e1e6:	687b      	ldr	r3, [r7, #4]
   2e1e8:	68db      	ldr	r3, [r3, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2e1ea:	9306      	str	r3, [sp, #24]
   2e1ec:	9205      	str	r2, [sp, #20]
   2e1ee:	2318      	movs	r3, #24
   2e1f0:	18fa      	adds	r2, r7, r3
   2e1f2:	2308      	movs	r3, #8
   2e1f4:	446b      	add	r3, sp
   2e1f6:	ca13      	ldmia	r2!, {r0, r1, r4}
   2e1f8:	c313      	stmia	r3!, {r0, r1, r4}
   2e1fa:	464b      	mov	r3, r9
   2e1fc:	9301      	str	r3, [sp, #4]
   2e1fe:	4643      	mov	r3, r8
   2e200:	9300      	str	r3, [sp, #0]
   2e202:	0033      	movs	r3, r6
   2e204:	2200      	movs	r2, #0
   2e206:	0029      	movs	r1, r5
   2e208:	4660      	mov	r0, ip
   2e20a:	4c3a      	ldr	r4, [pc, #232]	; (2e2f4 <MQTTPublish+0x1b0>)
   2e20c:	47a0      	blx	r4
   2e20e:	0003      	movs	r3, r0
   2e210:	633b      	str	r3, [r7, #48]	; 0x30
    if (len <= 0)
   2e212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e214:	2b00      	cmp	r3, #0
   2e216:	dd5b      	ble.n	2e2d0 <MQTTPublish+0x18c>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2e218:	2324      	movs	r3, #36	; 0x24
   2e21a:	18fa      	adds	r2, r7, r3
   2e21c:	6b39      	ldr	r1, [r7, #48]	; 0x30
   2e21e:	68fb      	ldr	r3, [r7, #12]
   2e220:	0018      	movs	r0, r3
   2e222:	4b35      	ldr	r3, [pc, #212]	; (2e2f8 <MQTTPublish+0x1b4>)
   2e224:	4798      	blx	r3
   2e226:	0003      	movs	r3, r0
   2e228:	637b      	str	r3, [r7, #52]	; 0x34
   2e22a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2e22c:	2b00      	cmp	r3, #0
   2e22e:	d151      	bne.n	2e2d4 <MQTTPublish+0x190>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   2e230:	687b      	ldr	r3, [r7, #4]
   2e232:	781b      	ldrb	r3, [r3, #0]
   2e234:	2b01      	cmp	r3, #1
   2e236:	d122      	bne.n	2e27e <MQTTPublish+0x13a>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   2e238:	2324      	movs	r3, #36	; 0x24
   2e23a:	18fa      	adds	r2, r7, r3
   2e23c:	68fb      	ldr	r3, [r7, #12]
   2e23e:	2104      	movs	r1, #4
   2e240:	0018      	movs	r0, r3
   2e242:	4b2e      	ldr	r3, [pc, #184]	; (2e2fc <MQTTPublish+0x1b8>)
   2e244:	4798      	blx	r3
   2e246:	0003      	movs	r3, r0
   2e248:	2b04      	cmp	r3, #4
   2e24a:	d114      	bne.n	2e276 <MQTTPublish+0x132>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2e24c:	68fb      	ldr	r3, [r7, #12]
   2e24e:	695c      	ldr	r4, [r3, #20]
   2e250:	68fb      	ldr	r3, [r7, #12]
   2e252:	68db      	ldr	r3, [r3, #12]
   2e254:	2216      	movs	r2, #22
   2e256:	18ba      	adds	r2, r7, r2
   2e258:	2115      	movs	r1, #21
   2e25a:	1879      	adds	r1, r7, r1
   2e25c:	2014      	movs	r0, #20
   2e25e:	1838      	adds	r0, r7, r0
   2e260:	9300      	str	r3, [sp, #0]
   2e262:	0023      	movs	r3, r4
   2e264:	4c26      	ldr	r4, [pc, #152]	; (2e300 <MQTTPublish+0x1bc>)
   2e266:	47a0      	blx	r4
   2e268:	0003      	movs	r3, r0
   2e26a:	2b01      	cmp	r3, #1
   2e26c:	d033      	beq.n	2e2d6 <MQTTPublish+0x192>
                rc = FAILURE;
   2e26e:	2301      	movs	r3, #1
   2e270:	425b      	negs	r3, r3
   2e272:	637b      	str	r3, [r7, #52]	; 0x34
   2e274:	e02f      	b.n	2e2d6 <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2e276:	2301      	movs	r3, #1
   2e278:	425b      	negs	r3, r3
   2e27a:	637b      	str	r3, [r7, #52]	; 0x34
   2e27c:	e02b      	b.n	2e2d6 <MQTTPublish+0x192>
    }
    else if (message->qos == QOS2)
   2e27e:	687b      	ldr	r3, [r7, #4]
   2e280:	781b      	ldrb	r3, [r3, #0]
   2e282:	2b02      	cmp	r3, #2
   2e284:	d127      	bne.n	2e2d6 <MQTTPublish+0x192>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   2e286:	2324      	movs	r3, #36	; 0x24
   2e288:	18fa      	adds	r2, r7, r3
   2e28a:	68fb      	ldr	r3, [r7, #12]
   2e28c:	2107      	movs	r1, #7
   2e28e:	0018      	movs	r0, r3
   2e290:	4b1a      	ldr	r3, [pc, #104]	; (2e2fc <MQTTPublish+0x1b8>)
   2e292:	4798      	blx	r3
   2e294:	0003      	movs	r3, r0
   2e296:	2b07      	cmp	r3, #7
   2e298:	d114      	bne.n	2e2c4 <MQTTPublish+0x180>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2e29a:	68fb      	ldr	r3, [r7, #12]
   2e29c:	695c      	ldr	r4, [r3, #20]
   2e29e:	68fb      	ldr	r3, [r7, #12]
   2e2a0:	68db      	ldr	r3, [r3, #12]
   2e2a2:	2212      	movs	r2, #18
   2e2a4:	18ba      	adds	r2, r7, r2
   2e2a6:	2111      	movs	r1, #17
   2e2a8:	1879      	adds	r1, r7, r1
   2e2aa:	2010      	movs	r0, #16
   2e2ac:	1838      	adds	r0, r7, r0
   2e2ae:	9300      	str	r3, [sp, #0]
   2e2b0:	0023      	movs	r3, r4
   2e2b2:	4c13      	ldr	r4, [pc, #76]	; (2e300 <MQTTPublish+0x1bc>)
   2e2b4:	47a0      	blx	r4
   2e2b6:	0003      	movs	r3, r0
   2e2b8:	2b01      	cmp	r3, #1
   2e2ba:	d00c      	beq.n	2e2d6 <MQTTPublish+0x192>
                rc = FAILURE;
   2e2bc:	2301      	movs	r3, #1
   2e2be:	425b      	negs	r3, r3
   2e2c0:	637b      	str	r3, [r7, #52]	; 0x34
   2e2c2:	e008      	b.n	2e2d6 <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2e2c4:	2301      	movs	r3, #1
   2e2c6:	425b      	negs	r3, r3
   2e2c8:	637b      	str	r3, [r7, #52]	; 0x34
   2e2ca:	e004      	b.n	2e2d6 <MQTTPublish+0x192>
		goto exit;
   2e2cc:	46c0      	nop			; (mov r8, r8)
   2e2ce:	e002      	b.n	2e2d6 <MQTTPublish+0x192>
        goto exit;
   2e2d0:	46c0      	nop			; (mov r8, r8)
   2e2d2:	e000      	b.n	2e2d6 <MQTTPublish+0x192>
        goto exit; // there was a problem
   2e2d4:	46c0      	nop			; (mov r8, r8)
    
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2e2d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   2e2d8:	0018      	movs	r0, r3
   2e2da:	46bd      	mov	sp, r7
   2e2dc:	b00f      	add	sp, #60	; 0x3c
   2e2de:	bc0c      	pop	{r2, r3}
   2e2e0:	4690      	mov	r8, r2
   2e2e2:	4699      	mov	r9, r3
   2e2e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e2e6:	46c0      	nop			; (mov r8, r8)
   2e2e8:	0002e54d 	.word	0x0002e54d
   2e2ec:	0002e4d5 	.word	0x0002e4d5
   2e2f0:	0002d695 	.word	0x0002d695
   2e2f4:	0002f7d1 	.word	0x0002f7d1
   2e2f8:	0002d6c5 	.word	0x0002d6c5
   2e2fc:	0002de2d 	.word	0x0002de2d
   2e300:	0002f249 	.word	0x0002f249

0002e304 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   2e304:	b580      	push	{r7, lr}
   2e306:	b088      	sub	sp, #32
   2e308:	af00      	add	r7, sp, #0
   2e30a:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2e30c:	2301      	movs	r3, #1
   2e30e:	425b      	negs	r3, r3
   2e310:	61fb      	str	r3, [r7, #28]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
   2e312:	2300      	movs	r3, #0
   2e314:	61bb      	str	r3, [r7, #24]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   2e316:	230c      	movs	r3, #12
   2e318:	18fb      	adds	r3, r7, r3
   2e31a:	0018      	movs	r0, r3
   2e31c:	4b13      	ldr	r3, [pc, #76]	; (2e36c <MQTTDisconnect+0x68>)
   2e31e:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2e320:	687b      	ldr	r3, [r7, #4]
   2e322:	685a      	ldr	r2, [r3, #4]
   2e324:	230c      	movs	r3, #12
   2e326:	18fb      	adds	r3, r7, r3
   2e328:	0011      	movs	r1, r2
   2e32a:	0018      	movs	r0, r3
   2e32c:	4b10      	ldr	r3, [pc, #64]	; (2e370 <MQTTDisconnect+0x6c>)
   2e32e:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   2e330:	687b      	ldr	r3, [r7, #4]
   2e332:	691a      	ldr	r2, [r3, #16]
   2e334:	687b      	ldr	r3, [r7, #4]
   2e336:	689b      	ldr	r3, [r3, #8]
   2e338:	0019      	movs	r1, r3
   2e33a:	0010      	movs	r0, r2
   2e33c:	4b0d      	ldr	r3, [pc, #52]	; (2e374 <MQTTDisconnect+0x70>)
   2e33e:	4798      	blx	r3
   2e340:	0003      	movs	r3, r0
   2e342:	61bb      	str	r3, [r7, #24]
    if (len > 0)
   2e344:	69bb      	ldr	r3, [r7, #24]
   2e346:	2b00      	cmp	r3, #0
   2e348:	dd08      	ble.n	2e35c <MQTTDisconnect+0x58>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   2e34a:	230c      	movs	r3, #12
   2e34c:	18fa      	adds	r2, r7, r3
   2e34e:	69b9      	ldr	r1, [r7, #24]
   2e350:	687b      	ldr	r3, [r7, #4]
   2e352:	0018      	movs	r0, r3
   2e354:	4b08      	ldr	r3, [pc, #32]	; (2e378 <MQTTDisconnect+0x74>)
   2e356:	4798      	blx	r3
   2e358:	0003      	movs	r3, r0
   2e35a:	61fb      	str	r3, [r7, #28]
        
    c->isconnected = 0;
   2e35c:	687b      	ldr	r3, [r7, #4]
   2e35e:	2200      	movs	r2, #0
   2e360:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2e362:	69fb      	ldr	r3, [r7, #28]
}
   2e364:	0018      	movs	r0, r3
   2e366:	46bd      	mov	sp, r7
   2e368:	b008      	add	sp, #32
   2e36a:	bd80      	pop	{r7, pc}
   2e36c:	0002e54d 	.word	0x0002e54d
   2e370:	0002e4d5 	.word	0x0002e4d5
   2e374:	0002f0fd 	.word	0x0002f0fd
   2e378:	0002d6c5 	.word	0x0002d6c5

0002e37c <isMQTTSocket>:
static uint32_t gu32MQTTRxFIFOPtr=0;
static uint32_t gu32MQTTRxFIFOLen=0;
static char *gpcHostAddr;

static bool isMQTTSocket(SOCKET sock)
{
   2e37c:	b580      	push	{r7, lr}
   2e37e:	b084      	sub	sp, #16
   2e380:	af00      	add	r7, sp, #0
   2e382:	0002      	movs	r2, r0
   2e384:	1dfb      	adds	r3, r7, #7
   2e386:	701a      	strb	r2, [r3, #0]
	unsigned int cIdx;
	struct mqtt_module *mqttInstance;
	
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2e388:	2300      	movs	r3, #0
   2e38a:	60fb      	str	r3, [r7, #12]
   2e38c:	e01c      	b.n	2e3c8 <isMQTTSocket+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   2e38e:	4a12      	ldr	r2, [pc, #72]	; (2e3d8 <isMQTTSocket+0x5c>)
   2e390:	68fb      	ldr	r3, [r7, #12]
   2e392:	2164      	movs	r1, #100	; 0x64
   2e394:	434b      	muls	r3, r1
   2e396:	18d3      	adds	r3, r2, r3
   2e398:	3360      	adds	r3, #96	; 0x60
   2e39a:	681b      	ldr	r3, [r3, #0]
   2e39c:	2b00      	cmp	r3, #0
   2e39e:	d010      	beq.n	2e3c2 <isMQTTSocket+0x46>
		{
			mqttInstance = mqttClientPool[cIdx].mqtt_instance;
   2e3a0:	4a0d      	ldr	r2, [pc, #52]	; (2e3d8 <isMQTTSocket+0x5c>)
   2e3a2:	68fb      	ldr	r3, [r7, #12]
   2e3a4:	2164      	movs	r1, #100	; 0x64
   2e3a6:	434b      	muls	r3, r1
   2e3a8:	18d3      	adds	r3, r2, r3
   2e3aa:	3360      	adds	r3, #96	; 0x60
   2e3ac:	681b      	ldr	r3, [r3, #0]
   2e3ae:	60bb      	str	r3, [r7, #8]
			if(mqttInstance->network.socket == sock)
   2e3b0:	68bb      	ldr	r3, [r7, #8]
   2e3b2:	6a1a      	ldr	r2, [r3, #32]
   2e3b4:	1dfb      	adds	r3, r7, #7
   2e3b6:	781b      	ldrb	r3, [r3, #0]
   2e3b8:	b25b      	sxtb	r3, r3
   2e3ba:	429a      	cmp	r2, r3
   2e3bc:	d101      	bne.n	2e3c2 <isMQTTSocket+0x46>
				return true;
   2e3be:	2301      	movs	r3, #1
   2e3c0:	e006      	b.n	2e3d0 <isMQTTSocket+0x54>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2e3c2:	68fb      	ldr	r3, [r7, #12]
   2e3c4:	3301      	adds	r3, #1
   2e3c6:	60fb      	str	r3, [r7, #12]
   2e3c8:	68fb      	ldr	r3, [r7, #12]
   2e3ca:	2b06      	cmp	r3, #6
   2e3cc:	d9df      	bls.n	2e38e <isMQTTSocket+0x12>
		}
	}
	return false;
   2e3ce:	2300      	movs	r3, #0
}
   2e3d0:	0018      	movs	r0, r3
   2e3d2:	46bd      	mov	sp, r7
   2e3d4:	b004      	add	sp, #16
   2e3d6:	bd80      	pop	{r7, pc}
   2e3d8:	20004400 	.word	0x20004400

0002e3dc <dnsResolveCallback>:

void dnsResolveCallback(uint8_t *hostName, uint32_t hostIp)
{
   2e3dc:	b580      	push	{r7, lr}
   2e3de:	b082      	sub	sp, #8
   2e3e0:	af00      	add	r7, sp, #0
   2e3e2:	6078      	str	r0, [r7, #4]
   2e3e4:	6039      	str	r1, [r7, #0]
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   2e3e6:	4b0d      	ldr	r3, [pc, #52]	; (2e41c <dnsResolveCallback+0x40>)
   2e3e8:	781b      	ldrb	r3, [r3, #0]
   2e3ea:	2201      	movs	r2, #1
   2e3ec:	4053      	eors	r3, r2
   2e3ee:	b2db      	uxtb	r3, r3
   2e3f0:	2b00      	cmp	r3, #0
   2e3f2:	d00e      	beq.n	2e412 <dnsResolveCallback+0x36>
   2e3f4:	4b0a      	ldr	r3, [pc, #40]	; (2e420 <dnsResolveCallback+0x44>)
   2e3f6:	681b      	ldr	r3, [r3, #0]
   2e3f8:	687a      	ldr	r2, [r7, #4]
   2e3fa:	0011      	movs	r1, r2
   2e3fc:	0018      	movs	r0, r3
   2e3fe:	4b09      	ldr	r3, [pc, #36]	; (2e424 <dnsResolveCallback+0x48>)
   2e400:	4798      	blx	r3
   2e402:	1e03      	subs	r3, r0, #0
   2e404:	d105      	bne.n	2e412 <dnsResolveCallback+0x36>
	{
		gi32MQTTBrokerIp = hostIp;
   2e406:	683a      	ldr	r2, [r7, #0]
   2e408:	4b07      	ldr	r3, [pc, #28]	; (2e428 <dnsResolveCallback+0x4c>)
   2e40a:	601a      	str	r2, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   2e40c:	4b03      	ldr	r3, [pc, #12]	; (2e41c <dnsResolveCallback+0x40>)
   2e40e:	2201      	movs	r2, #1
   2e410:	701a      	strb	r2, [r3, #0]
		#ifdef MQTT_PLATFORM_DBG
		printf("INFO >> Host IP of %s is %d.%d.%d.%d\r\n", hostName, (int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
		(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
		#endif
	}
}
   2e412:	46c0      	nop			; (mov r8, r8)
   2e414:	46bd      	mov	sp, r7
   2e416:	b002      	add	sp, #8
   2e418:	bd80      	pop	{r7, pc}
   2e41a:	46c0      	nop			; (mov r8, r8)
   2e41c:	200042f0 	.word	0x200042f0
   2e420:	200043fc 	.word	0x200043fc
   2e424:	0003491d 	.word	0x0003491d
   2e428:	200042e8 	.word	0x200042e8

0002e42c <tcpClientSocketEventHandler>:

void tcpClientSocketEventHandler(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   2e42c:	b580      	push	{r7, lr}
   2e42e:	b084      	sub	sp, #16
   2e430:	af00      	add	r7, sp, #0
   2e432:	603a      	str	r2, [r7, #0]
   2e434:	1dfb      	adds	r3, r7, #7
   2e436:	1c02      	adds	r2, r0, #0
   2e438:	701a      	strb	r2, [r3, #0]
   2e43a:	1dbb      	adds	r3, r7, #6
   2e43c:	1c0a      	adds	r2, r1, #0
   2e43e:	701a      	strb	r2, [r3, #0]
	if(isMQTTSocket(sock)) { 
   2e440:	1dfb      	adds	r3, r7, #7
   2e442:	781b      	ldrb	r3, [r3, #0]
   2e444:	b25b      	sxtb	r3, r3
   2e446:	0018      	movs	r0, r3
   2e448:	4b12      	ldr	r3, [pc, #72]	; (2e494 <tcpClientSocketEventHandler+0x68>)
   2e44a:	4798      	blx	r3
   2e44c:	1e03      	subs	r3, r0, #0
   2e44e:	d01c      	beq.n	2e48a <tcpClientSocketEventHandler+0x5e>
		switch (u8Msg) {
   2e450:	1dbb      	adds	r3, r7, #6
   2e452:	781b      	ldrb	r3, [r3, #0]
   2e454:	2b06      	cmp	r3, #6
   2e456:	d00c      	beq.n	2e472 <tcpClientSocketEventHandler+0x46>
   2e458:	2b07      	cmp	r3, #7
   2e45a:	d006      	beq.n	2e46a <tcpClientSocketEventHandler+0x3e>
   2e45c:	2b05      	cmp	r3, #5
   2e45e:	d000      	beq.n	2e462 <tcpClientSocketEventHandler+0x36>
				printf("DEBUG >> Remaining data in Rx buffer of broker socket: %d\r\n",pstrRx->u16RemainingSize);
				#endif
				gbMQTTBrokerRecvDone=true;
			}
			break;
			default: break;
   2e460:	e013      	b.n	2e48a <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerConnected=true;
   2e462:	4b0d      	ldr	r3, [pc, #52]	; (2e498 <tcpClientSocketEventHandler+0x6c>)
   2e464:	2201      	movs	r2, #1
   2e466:	701a      	strb	r2, [r3, #0]
			break;
   2e468:	e00f      	b.n	2e48a <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerSendDone=true;
   2e46a:	4b0c      	ldr	r3, [pc, #48]	; (2e49c <tcpClientSocketEventHandler+0x70>)
   2e46c:	2201      	movs	r2, #1
   2e46e:	701a      	strb	r2, [r3, #0]
			break;
   2e470:	e00b      	b.n	2e48a <tcpClientSocketEventHandler+0x5e>
				tstrSocketRecvMsg* pstrRx = (tstrSocketRecvMsg*)pvMsg;
   2e472:	683b      	ldr	r3, [r7, #0]
   2e474:	60fb      	str	r3, [r7, #12]
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   2e476:	68fb      	ldr	r3, [r7, #12]
   2e478:	2204      	movs	r2, #4
   2e47a:	5e9b      	ldrsh	r3, [r3, r2]
   2e47c:	001a      	movs	r2, r3
   2e47e:	4b08      	ldr	r3, [pc, #32]	; (2e4a0 <tcpClientSocketEventHandler+0x74>)
   2e480:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   2e482:	4b08      	ldr	r3, [pc, #32]	; (2e4a4 <tcpClientSocketEventHandler+0x78>)
   2e484:	2201      	movs	r2, #1
   2e486:	701a      	strb	r2, [r3, #0]
			break;
   2e488:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   2e48a:	46c0      	nop			; (mov r8, r8)
   2e48c:	46bd      	mov	sp, r7
   2e48e:	b004      	add	sp, #16
   2e490:	bd80      	pop	{r7, pc}
   2e492:	46c0      	nop			; (mov r8, r8)
   2e494:	0002e37d 	.word	0x0002e37d
   2e498:	200042f1 	.word	0x200042f1
   2e49c:	200042f2 	.word	0x200042f2
   2e4a0:	200042ec 	.word	0x200042ec
   2e4a4:	200042f3 	.word	0x200042f3

0002e4a8 <TimerIsExpired>:

void SysTick_Handler_MQTT(void){
	MilliTimer++;
}

char TimerIsExpired(Timer* timer) {
   2e4a8:	b580      	push	{r7, lr}
   2e4aa:	b082      	sub	sp, #8
   2e4ac:	af00      	add	r7, sp, #0
   2e4ae:	6078      	str	r0, [r7, #4]
	return xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait) == pdTRUE;
   2e4b0:	687b      	ldr	r3, [r7, #4]
   2e4b2:	3304      	adds	r3, #4
   2e4b4:	687a      	ldr	r2, [r7, #4]
   2e4b6:	0011      	movs	r1, r2
   2e4b8:	0018      	movs	r0, r3
   2e4ba:	4b05      	ldr	r3, [pc, #20]	; (2e4d0 <TimerIsExpired+0x28>)
   2e4bc:	4798      	blx	r3
   2e4be:	0003      	movs	r3, r0
   2e4c0:	3b01      	subs	r3, #1
   2e4c2:	425a      	negs	r2, r3
   2e4c4:	4153      	adcs	r3, r2
   2e4c6:	b2db      	uxtb	r3, r3
}
   2e4c8:	0018      	movs	r0, r3
   2e4ca:	46bd      	mov	sp, r7
   2e4cc:	b002      	add	sp, #8
   2e4ce:	bd80      	pop	{r7, pc}
   2e4d0:	0001bbb1 	.word	0x0001bbb1

0002e4d4 <TimerCountdownMS>:


void TimerCountdownMS(Timer* timer, unsigned int timeout_ms) {
   2e4d4:	b580      	push	{r7, lr}
   2e4d6:	b082      	sub	sp, #8
   2e4d8:	af00      	add	r7, sp, #0
   2e4da:	6078      	str	r0, [r7, #4]
   2e4dc:	6039      	str	r1, [r7, #0]
	timer->xTicksToWait = timeout_ms / portTICK_PERIOD_MS; /* convert milliseconds to ticks */
   2e4de:	687b      	ldr	r3, [r7, #4]
   2e4e0:	683a      	ldr	r2, [r7, #0]
   2e4e2:	601a      	str	r2, [r3, #0]
	vTaskSetTimeOutState(&timer->xTimeOut); /* Record the time at which this function was entered. */
   2e4e4:	687b      	ldr	r3, [r7, #4]
   2e4e6:	3304      	adds	r3, #4
   2e4e8:	0018      	movs	r0, r3
   2e4ea:	4b03      	ldr	r3, [pc, #12]	; (2e4f8 <TimerCountdownMS+0x24>)
   2e4ec:	4798      	blx	r3
}
   2e4ee:	46c0      	nop			; (mov r8, r8)
   2e4f0:	46bd      	mov	sp, r7
   2e4f2:	b002      	add	sp, #8
   2e4f4:	bd80      	pop	{r7, pc}
   2e4f6:	46c0      	nop			; (mov r8, r8)
   2e4f8:	0001bb45 	.word	0x0001bb45

0002e4fc <TimerCountdown>:


void TimerCountdown(Timer* timer, unsigned int timeout) {
   2e4fc:	b580      	push	{r7, lr}
   2e4fe:	b082      	sub	sp, #8
   2e500:	af00      	add	r7, sp, #0
   2e502:	6078      	str	r0, [r7, #4]
   2e504:	6039      	str	r1, [r7, #0]
	TimerCountdownMS(timer, timeout * 1000);
   2e506:	683b      	ldr	r3, [r7, #0]
   2e508:	22fa      	movs	r2, #250	; 0xfa
   2e50a:	0092      	lsls	r2, r2, #2
   2e50c:	435a      	muls	r2, r3
   2e50e:	687b      	ldr	r3, [r7, #4]
   2e510:	0011      	movs	r1, r2
   2e512:	0018      	movs	r0, r3
   2e514:	4b02      	ldr	r3, [pc, #8]	; (2e520 <TimerCountdown+0x24>)
   2e516:	4798      	blx	r3
}
   2e518:	46c0      	nop			; (mov r8, r8)
   2e51a:	46bd      	mov	sp, r7
   2e51c:	b002      	add	sp, #8
   2e51e:	bd80      	pop	{r7, pc}
   2e520:	0002e4d5 	.word	0x0002e4d5

0002e524 <TimerLeftMS>:


int TimerLeftMS(Timer* timer) {
   2e524:	b580      	push	{r7, lr}
   2e526:	b082      	sub	sp, #8
   2e528:	af00      	add	r7, sp, #0
   2e52a:	6078      	str	r0, [r7, #4]
	xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait); /* updates xTicksToWait to the number left */
   2e52c:	687b      	ldr	r3, [r7, #4]
   2e52e:	3304      	adds	r3, #4
   2e530:	687a      	ldr	r2, [r7, #4]
   2e532:	0011      	movs	r1, r2
   2e534:	0018      	movs	r0, r3
   2e536:	4b04      	ldr	r3, [pc, #16]	; (2e548 <TimerLeftMS+0x24>)
   2e538:	4798      	blx	r3
	return (timer->xTicksToWait < 0) ? 0 : (timer->xTicksToWait * portTICK_PERIOD_MS);
   2e53a:	687b      	ldr	r3, [r7, #4]
   2e53c:	681b      	ldr	r3, [r3, #0]
}
   2e53e:	0018      	movs	r0, r3
   2e540:	46bd      	mov	sp, r7
   2e542:	b002      	add	sp, #8
   2e544:	bd80      	pop	{r7, pc}
   2e546:	46c0      	nop			; (mov r8, r8)
   2e548:	0001bbb1 	.word	0x0001bbb1

0002e54c <TimerInit>:


void TimerInit(Timer* timer) {
   2e54c:	b580      	push	{r7, lr}
   2e54e:	b082      	sub	sp, #8
   2e550:	af00      	add	r7, sp, #0
   2e552:	6078      	str	r0, [r7, #4]
	timer->xTicksToWait = 0;
   2e554:	687b      	ldr	r3, [r7, #4]
   2e556:	2200      	movs	r2, #0
   2e558:	601a      	str	r2, [r3, #0]
	memset(&timer->xTimeOut, '\0', sizeof(timer->xTimeOut));
   2e55a:	687b      	ldr	r3, [r7, #4]
   2e55c:	3304      	adds	r3, #4
   2e55e:	2208      	movs	r2, #8
   2e560:	2100      	movs	r1, #0
   2e562:	0018      	movs	r0, r3
   2e564:	4b02      	ldr	r3, [pc, #8]	; (2e570 <TimerInit+0x24>)
   2e566:	4798      	blx	r3
}
   2e568:	46c0      	nop			; (mov r8, r8)
   2e56a:	46bd      	mov	sp, r7
   2e56c:	b002      	add	sp, #8
   2e56e:	bd80      	pop	{r7, pc}
   2e570:	000345df 	.word	0x000345df

0002e574 <WINC1500_read>:

static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   2e574:	b590      	push	{r4, r7, lr}
   2e576:	b085      	sub	sp, #20
   2e578:	af00      	add	r7, sp, #0
   2e57a:	60f8      	str	r0, [r7, #12]
   2e57c:	60b9      	str	r1, [r7, #8]
   2e57e:	607a      	str	r2, [r7, #4]
   2e580:	603b      	str	r3, [r7, #0]
  //at times the upper layer requests for single byte of data, but network has more in rx buffer.
  //this results in callback being invoked multiple times with length 1 before returning. To prevent loss of
  //data in this process, pool data internally and give it to upper layer on request. 
  
  //temporary workaround for timer overrun 
  if(0==timeout_ms) timeout_ms=10;
   2e582:	683b      	ldr	r3, [r7, #0]
   2e584:	2b00      	cmp	r3, #0
   2e586:	d101      	bne.n	2e58c <WINC1500_read+0x18>
   2e588:	230a      	movs	r3, #10
   2e58a:	603b      	str	r3, [r7, #0]
  
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   2e58c:	4b2c      	ldr	r3, [pc, #176]	; (2e640 <WINC1500_read+0xcc>)
   2e58e:	681b      	ldr	r3, [r3, #0]
   2e590:	2b00      	cmp	r3, #0
   2e592:	d131      	bne.n	2e5f8 <WINC1500_read+0x84>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("DEBUG >> Requesting data from network\r\n");
	  #endif
	  gbMQTTBrokerRecvDone=false;
   2e594:	4b2b      	ldr	r3, [pc, #172]	; (2e644 <WINC1500_read+0xd0>)
   2e596:	2200      	movs	r2, #0
   2e598:	701a      	strb	r2, [r3, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   2e59a:	68fb      	ldr	r3, [r7, #12]
   2e59c:	681b      	ldr	r3, [r3, #0]
   2e59e:	b258      	sxtb	r0, r3
   2e5a0:	683c      	ldr	r4, [r7, #0]
   2e5a2:	2380      	movs	r3, #128	; 0x80
   2e5a4:	005a      	lsls	r2, r3, #1
   2e5a6:	4928      	ldr	r1, [pc, #160]	; (2e648 <WINC1500_read+0xd4>)
   2e5a8:	0023      	movs	r3, r4
   2e5aa:	4c28      	ldr	r4, [pc, #160]	; (2e64c <WINC1500_read+0xd8>)
   2e5ac:	47a0      	blx	r4
   2e5ae:	1e03      	subs	r3, r0, #0
   2e5b0:	d005      	beq.n	2e5be <WINC1500_read+0x4a>
		  #ifdef MQTT_PLATFORM_DBG
		  printf("ERROR >> recv failed\r\n");
		  #endif
		  return -1;
   2e5b2:	2301      	movs	r3, #1
   2e5b4:	425b      	negs	r3, r3
   2e5b6:	e03e      	b.n	2e636 <WINC1500_read+0xc2>
	  }
	  //call handle_events until we get rx callback 
	  while (false==gbMQTTBrokerRecvDone){
		  m2m_wifi_handle_events(NULL);
   2e5b8:	2000      	movs	r0, #0
   2e5ba:	4b25      	ldr	r3, [pc, #148]	; (2e650 <WINC1500_read+0xdc>)
   2e5bc:	4798      	blx	r3
	  while (false==gbMQTTBrokerRecvDone){
   2e5be:	4b21      	ldr	r3, [pc, #132]	; (2e644 <WINC1500_read+0xd0>)
   2e5c0:	781b      	ldrb	r3, [r3, #0]
   2e5c2:	2201      	movs	r2, #1
   2e5c4:	4053      	eors	r3, r2
   2e5c6:	b2db      	uxtb	r3, r3
   2e5c8:	2b00      	cmp	r3, #0
   2e5ca:	d1f5      	bne.n	2e5b8 <WINC1500_read+0x44>
	  }
	  
	  //update current FIFO length
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   2e5cc:	4b21      	ldr	r3, [pc, #132]	; (2e654 <WINC1500_read+0xe0>)
   2e5ce:	681b      	ldr	r3, [r3, #0]
   2e5d0:	2b00      	cmp	r3, #0
   2e5d2:	dd08      	ble.n	2e5e6 <WINC1500_read+0x72>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   2e5d4:	4b1f      	ldr	r3, [pc, #124]	; (2e654 <WINC1500_read+0xe0>)
   2e5d6:	681b      	ldr	r3, [r3, #0]
   2e5d8:	001a      	movs	r2, r3
   2e5da:	4b19      	ldr	r3, [pc, #100]	; (2e640 <WINC1500_read+0xcc>)
   2e5dc:	601a      	str	r2, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   2e5de:	4b1e      	ldr	r3, [pc, #120]	; (2e658 <WINC1500_read+0xe4>)
   2e5e0:	2200      	movs	r2, #0
   2e5e2:	601a      	str	r2, [r3, #0]
   2e5e4:	e008      	b.n	2e5f8 <WINC1500_read+0x84>
    	printf("0x%x, ",gcMQTTRxFIFO[i]);
    	printf("\r\n");
	  #endif
	  }
	  else{//mostly in case of timeout
		  gu32MQTTRxFIFOLen=0;
   2e5e6:	4b16      	ldr	r3, [pc, #88]	; (2e640 <WINC1500_read+0xcc>)
   2e5e8:	2200      	movs	r2, #0
   2e5ea:	601a      	str	r2, [r3, #0]
		  gu32MQTTRxFIFOPtr=0;
   2e5ec:	4b1a      	ldr	r3, [pc, #104]	; (2e658 <WINC1500_read+0xe4>)
   2e5ee:	2200      	movs	r2, #0
   2e5f0:	601a      	str	r2, [r3, #0]
		  #ifdef MQTT_PLATFORM_DBG
		  printf("DEBUG >> no data to send. returning error code (%d)\r\n",gi32MQTTBrokerRxLen);
		  #endif
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   2e5f2:	4b18      	ldr	r3, [pc, #96]	; (2e654 <WINC1500_read+0xe0>)
   2e5f4:	681b      	ldr	r3, [r3, #0]
   2e5f6:	e01e      	b.n	2e636 <WINC1500_read+0xc2>
	  }
  }
  //return data to client from data present in the FIFO from previous recv()
  if(len>(int)gu32MQTTRxFIFOLen){
   2e5f8:	4b11      	ldr	r3, [pc, #68]	; (2e640 <WINC1500_read+0xcc>)
   2e5fa:	681b      	ldr	r3, [r3, #0]
   2e5fc:	001a      	movs	r2, r3
   2e5fe:	687b      	ldr	r3, [r7, #4]
   2e600:	4293      	cmp	r3, r2
   2e602:	dd02      	ble.n	2e60a <WINC1500_read+0x96>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> unable to process read request since FIFO contains less data than requested\r\n");
	  #endif
	  return -1;
   2e604:	2301      	movs	r3, #1
   2e606:	425b      	negs	r3, r3
   2e608:	e015      	b.n	2e636 <WINC1500_read+0xc2>
  }
 
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   2e60a:	4b13      	ldr	r3, [pc, #76]	; (2e658 <WINC1500_read+0xe4>)
   2e60c:	681a      	ldr	r2, [r3, #0]
   2e60e:	4b0e      	ldr	r3, [pc, #56]	; (2e648 <WINC1500_read+0xd4>)
   2e610:	18d1      	adds	r1, r2, r3
   2e612:	687a      	ldr	r2, [r7, #4]
   2e614:	68bb      	ldr	r3, [r7, #8]
   2e616:	0018      	movs	r0, r3
   2e618:	4b10      	ldr	r3, [pc, #64]	; (2e65c <WINC1500_read+0xe8>)
   2e61a:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   2e61c:	4b08      	ldr	r3, [pc, #32]	; (2e640 <WINC1500_read+0xcc>)
   2e61e:	681a      	ldr	r2, [r3, #0]
   2e620:	687b      	ldr	r3, [r7, #4]
   2e622:	1ad2      	subs	r2, r2, r3
   2e624:	4b06      	ldr	r3, [pc, #24]	; (2e640 <WINC1500_read+0xcc>)
   2e626:	601a      	str	r2, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   2e628:	4b0b      	ldr	r3, [pc, #44]	; (2e658 <WINC1500_read+0xe4>)
   2e62a:	681a      	ldr	r2, [r3, #0]
   2e62c:	687b      	ldr	r3, [r7, #4]
   2e62e:	18d2      	adds	r2, r2, r3
   2e630:	4b09      	ldr	r3, [pc, #36]	; (2e658 <WINC1500_read+0xe4>)
   2e632:	601a      	str	r2, [r3, #0]
  
  return len;
   2e634:	687b      	ldr	r3, [r7, #4]
}
   2e636:	0018      	movs	r0, r3
   2e638:	46bd      	mov	sp, r7
   2e63a:	b005      	add	sp, #20
   2e63c:	bd90      	pop	{r4, r7, pc}
   2e63e:	46c0      	nop			; (mov r8, r8)
   2e640:	200043f8 	.word	0x200043f8
   2e644:	200042f3 	.word	0x200042f3
   2e648:	200042f4 	.word	0x200042f4
   2e64c:	00024afd 	.word	0x00024afd
   2e650:	00021045 	.word	0x00021045
   2e654:	200042ec 	.word	0x200042ec
   2e658:	200043f4 	.word	0x200043f4
   2e65c:	000345a9 	.word	0x000345a9

0002e660 <WINC1500_write>:


static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   2e660:	b590      	push	{r4, r7, lr}
   2e662:	b085      	sub	sp, #20
   2e664:	af00      	add	r7, sp, #0
   2e666:	60f8      	str	r0, [r7, #12]
   2e668:	60b9      	str	r1, [r7, #8]
   2e66a:	607a      	str	r2, [r7, #4]
   2e66c:	603b      	str	r3, [r7, #0]
  gbMQTTBrokerSendDone=false;
   2e66e:	4b10      	ldr	r3, [pc, #64]	; (2e6b0 <WINC1500_write+0x50>)
   2e670:	2200      	movs	r2, #0
   2e672:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   2e674:	68fb      	ldr	r3, [r7, #12]
   2e676:	681b      	ldr	r3, [r3, #0]
   2e678:	b258      	sxtb	r0, r3
   2e67a:	687b      	ldr	r3, [r7, #4]
   2e67c:	b29a      	uxth	r2, r3
   2e67e:	68b9      	ldr	r1, [r7, #8]
   2e680:	2300      	movs	r3, #0
   2e682:	4c0c      	ldr	r4, [pc, #48]	; (2e6b4 <WINC1500_write+0x54>)
   2e684:	47a0      	blx	r4
   2e686:	1e03      	subs	r3, r0, #0
   2e688:	d005      	beq.n	2e696 <WINC1500_write+0x36>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> send error");
	  #endif
	  return -1;
   2e68a:	2301      	movs	r3, #1
   2e68c:	425b      	negs	r3, r3
   2e68e:	e00a      	b.n	2e6a6 <WINC1500_write+0x46>
  }
  //wait for send callback
  while (false==gbMQTTBrokerSendDone){
	  m2m_wifi_handle_events(NULL);
   2e690:	2000      	movs	r0, #0
   2e692:	4b09      	ldr	r3, [pc, #36]	; (2e6b8 <WINC1500_write+0x58>)
   2e694:	4798      	blx	r3
  while (false==gbMQTTBrokerSendDone){
   2e696:	4b06      	ldr	r3, [pc, #24]	; (2e6b0 <WINC1500_write+0x50>)
   2e698:	781b      	ldrb	r3, [r3, #0]
   2e69a:	2201      	movs	r2, #1
   2e69c:	4053      	eors	r3, r2
   2e69e:	b2db      	uxtb	r3, r3
   2e6a0:	2b00      	cmp	r3, #0
   2e6a2:	d1f5      	bne.n	2e690 <WINC1500_write+0x30>
  #endif

  //TODO: figure out how to get actual send length from callback
  //this length will be updated in the callback
  //return gu32MQTTBrokerSendLen;
  return len;
   2e6a4:	687b      	ldr	r3, [r7, #4]
}
   2e6a6:	0018      	movs	r0, r3
   2e6a8:	46bd      	mov	sp, r7
   2e6aa:	b005      	add	sp, #20
   2e6ac:	bd90      	pop	{r4, r7, pc}
   2e6ae:	46c0      	nop			; (mov r8, r8)
   2e6b0:	200042f2 	.word	0x200042f2
   2e6b4:	00024999 	.word	0x00024999
   2e6b8:	00021045 	.word	0x00021045

0002e6bc <WINC1500_disconnect>:


static void WINC1500_disconnect(Network* n) {
   2e6bc:	b580      	push	{r7, lr}
   2e6be:	b082      	sub	sp, #8
   2e6c0:	af00      	add	r7, sp, #0
   2e6c2:	6078      	str	r0, [r7, #4]
	close(n->socket);
   2e6c4:	687b      	ldr	r3, [r7, #4]
   2e6c6:	681b      	ldr	r3, [r3, #0]
   2e6c8:	b25b      	sxtb	r3, r3
   2e6ca:	0018      	movs	r0, r3
   2e6cc:	4b06      	ldr	r3, [pc, #24]	; (2e6e8 <WINC1500_disconnect+0x2c>)
   2e6ce:	4798      	blx	r3
	n->socket=-1;
   2e6d0:	687b      	ldr	r3, [r7, #4]
   2e6d2:	2201      	movs	r2, #1
   2e6d4:	4252      	negs	r2, r2
   2e6d6:	601a      	str	r2, [r3, #0]
	gbMQTTBrokerConnected=false;
   2e6d8:	4b04      	ldr	r3, [pc, #16]	; (2e6ec <WINC1500_disconnect+0x30>)
   2e6da:	2200      	movs	r2, #0
   2e6dc:	701a      	strb	r2, [r3, #0]
}
   2e6de:	46c0      	nop			; (mov r8, r8)
   2e6e0:	46bd      	mov	sp, r7
   2e6e2:	b002      	add	sp, #8
   2e6e4:	bd80      	pop	{r7, pc}
   2e6e6:	46c0      	nop			; (mov r8, r8)
   2e6e8:	00024c7d 	.word	0x00024c7d
   2e6ec:	200042f1 	.word	0x200042f1

0002e6f0 <NetworkInit>:


void NetworkInit(Network* n) {
   2e6f0:	b580      	push	{r7, lr}
   2e6f2:	b082      	sub	sp, #8
   2e6f4:	af00      	add	r7, sp, #0
   2e6f6:	6078      	str	r0, [r7, #4]
	n->socket = -1;
   2e6f8:	687b      	ldr	r3, [r7, #4]
   2e6fa:	2201      	movs	r2, #1
   2e6fc:	4252      	negs	r2, r2
   2e6fe:	601a      	str	r2, [r3, #0]
	n->mqttread = WINC1500_read;
   2e700:	687b      	ldr	r3, [r7, #4]
   2e702:	4a06      	ldr	r2, [pc, #24]	; (2e71c <NetworkInit+0x2c>)
   2e704:	609a      	str	r2, [r3, #8]
	n->mqttwrite = WINC1500_write;
   2e706:	687b      	ldr	r3, [r7, #4]
   2e708:	4a05      	ldr	r2, [pc, #20]	; (2e720 <NetworkInit+0x30>)
   2e70a:	60da      	str	r2, [r3, #12]
	n->disconnect = WINC1500_disconnect;
   2e70c:	687b      	ldr	r3, [r7, #4]
   2e70e:	4a05      	ldr	r2, [pc, #20]	; (2e724 <NetworkInit+0x34>)
   2e710:	611a      	str	r2, [r3, #16]
}
   2e712:	46c0      	nop			; (mov r8, r8)
   2e714:	46bd      	mov	sp, r7
   2e716:	b002      	add	sp, #8
   2e718:	bd80      	pop	{r7, pc}
   2e71a:	46c0      	nop			; (mov r8, r8)
   2e71c:	0002e575 	.word	0x0002e575
   2e720:	0002e661 	.word	0x0002e661
   2e724:	0002e6bd 	.word	0x0002e6bd

0002e728 <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   2e728:	b580      	push	{r7, lr}
   2e72a:	b088      	sub	sp, #32
   2e72c:	af00      	add	r7, sp, #0
   2e72e:	60f8      	str	r0, [r7, #12]
   2e730:	60b9      	str	r1, [r7, #8]
   2e732:	607a      	str	r2, [r7, #4]
   2e734:	603b      	str	r3, [r7, #0]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   2e736:	4b37      	ldr	r3, [pc, #220]	; (2e814 <ConnectNetwork+0xec>)
   2e738:	2200      	movs	r2, #0
   2e73a:	701a      	strb	r2, [r3, #0]
  gpcHostAddr = addr;
   2e73c:	4b36      	ldr	r3, [pc, #216]	; (2e818 <ConnectNetwork+0xf0>)
   2e73e:	68ba      	ldr	r2, [r7, #8]
   2e740:	601a      	str	r2, [r3, #0]
  gethostbyname((uint8*)addr);
   2e742:	68bb      	ldr	r3, [r7, #8]
   2e744:	0018      	movs	r0, r3
   2e746:	4b35      	ldr	r3, [pc, #212]	; (2e81c <ConnectNetwork+0xf4>)
   2e748:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   2e74a:	e002      	b.n	2e752 <ConnectNetwork+0x2a>
	  m2m_wifi_handle_events(NULL);
   2e74c:	2000      	movs	r0, #0
   2e74e:	4b34      	ldr	r3, [pc, #208]	; (2e820 <ConnectNetwork+0xf8>)
   2e750:	4798      	blx	r3
  while (false==gbMQTTBrokerIpresolved){
   2e752:	4b30      	ldr	r3, [pc, #192]	; (2e814 <ConnectNetwork+0xec>)
   2e754:	781b      	ldrb	r3, [r3, #0]
   2e756:	2201      	movs	r2, #1
   2e758:	4053      	eors	r3, r2
   2e75a:	b2db      	uxtb	r3, r3
   2e75c:	2b00      	cmp	r3, #0
   2e75e:	d1f5      	bne.n	2e74c <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   2e760:	4b30      	ldr	r3, [pc, #192]	; (2e824 <ConnectNetwork+0xfc>)
   2e762:	681a      	ldr	r2, [r3, #0]
   2e764:	68fb      	ldr	r3, [r7, #12]
   2e766:	605a      	str	r2, [r3, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   2e768:	2310      	movs	r3, #16
   2e76a:	18fb      	adds	r3, r7, r3
   2e76c:	2202      	movs	r2, #2
   2e76e:	801a      	strh	r2, [r3, #0]
  addr_in.sin_port = _htons(port);
   2e770:	687b      	ldr	r3, [r7, #4]
   2e772:	b29b      	uxth	r3, r3
   2e774:	021b      	lsls	r3, r3, #8
   2e776:	b21a      	sxth	r2, r3
   2e778:	687b      	ldr	r3, [r7, #4]
   2e77a:	b29b      	uxth	r3, r3
   2e77c:	0a1b      	lsrs	r3, r3, #8
   2e77e:	b29b      	uxth	r3, r3
   2e780:	b21b      	sxth	r3, r3
   2e782:	4313      	orrs	r3, r2
   2e784:	b21b      	sxth	r3, r3
   2e786:	b29a      	uxth	r2, r3
   2e788:	2310      	movs	r3, #16
   2e78a:	18fb      	adds	r3, r7, r3
   2e78c:	805a      	strh	r2, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   2e78e:	4b25      	ldr	r3, [pc, #148]	; (2e824 <ConnectNetwork+0xfc>)
   2e790:	681b      	ldr	r3, [r3, #0]
   2e792:	001a      	movs	r2, r3
   2e794:	2310      	movs	r3, #16
   2e796:	18fb      	adds	r3, r7, r3
   2e798:	605a      	str	r2, [r3, #4]

  /* Create secure socket */ 
  if(n->socket < 0)
   2e79a:	68fb      	ldr	r3, [r7, #12]
   2e79c:	681b      	ldr	r3, [r3, #0]
   2e79e:	2b00      	cmp	r3, #0
   2e7a0:	da0a      	bge.n	2e7b8 <ConnectNetwork+0x90>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   2e7a2:	683b      	ldr	r3, [r7, #0]
   2e7a4:	b2db      	uxtb	r3, r3
   2e7a6:	001a      	movs	r2, r3
   2e7a8:	2101      	movs	r1, #1
   2e7aa:	2002      	movs	r0, #2
   2e7ac:	4b1e      	ldr	r3, [pc, #120]	; (2e828 <ConnectNetwork+0x100>)
   2e7ae:	4798      	blx	r3
   2e7b0:	0003      	movs	r3, r0
   2e7b2:	001a      	movs	r2, r3
   2e7b4:	68fb      	ldr	r3, [r7, #12]
   2e7b6:	601a      	str	r2, [r3, #0]
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   2e7b8:	68fb      	ldr	r3, [r7, #12]
   2e7ba:	681b      	ldr	r3, [r3, #0]
   2e7bc:	3301      	adds	r3, #1
   2e7be:	d108      	bne.n	2e7d2 <ConnectNetwork+0xaa>
   #ifdef MQTT_PLATFORM_DBG
   printf("ERROR >> socket error.\r\n");
   #endif
   close(n->socket);
   2e7c0:	68fb      	ldr	r3, [r7, #12]
   2e7c2:	681b      	ldr	r3, [r3, #0]
   2e7c4:	b25b      	sxtb	r3, r3
   2e7c6:	0018      	movs	r0, r3
   2e7c8:	4b18      	ldr	r3, [pc, #96]	; (2e82c <ConnectNetwork+0x104>)
   2e7ca:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   2e7cc:	2309      	movs	r3, #9
   2e7ce:	425b      	negs	r3, r3
   2e7d0:	e01c      	b.n	2e80c <ConnectNetwork+0xe4>
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   2e7d2:	68fb      	ldr	r3, [r7, #12]
   2e7d4:	681b      	ldr	r3, [r3, #0]
   2e7d6:	b25b      	sxtb	r3, r3
   2e7d8:	2210      	movs	r2, #16
   2e7da:	18b9      	adds	r1, r7, r2
   2e7dc:	2210      	movs	r2, #16
   2e7de:	0018      	movs	r0, r3
   2e7e0:	4b13      	ldr	r3, [pc, #76]	; (2e830 <ConnectNetwork+0x108>)
   2e7e2:	4798      	blx	r3
   2e7e4:	1e03      	subs	r3, r0, #0
   2e7e6:	d002      	beq.n	2e7ee <ConnectNetwork+0xc6>
   #ifdef MQTT_PLATFORM_DBG  
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
   2e7e8:	2309      	movs	r3, #9
   2e7ea:	425b      	negs	r3, r3
   2e7ec:	e00e      	b.n	2e80c <ConnectNetwork+0xe4>
  }
  
  gbMQTTBrokerConnected = false;
   2e7ee:	4b11      	ldr	r3, [pc, #68]	; (2e834 <ConnectNetwork+0x10c>)
   2e7f0:	2200      	movs	r2, #0
   2e7f2:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
   2e7f4:	e002      	b.n	2e7fc <ConnectNetwork+0xd4>
    m2m_wifi_handle_events(NULL);
   2e7f6:	2000      	movs	r0, #0
   2e7f8:	4b09      	ldr	r3, [pc, #36]	; (2e820 <ConnectNetwork+0xf8>)
   2e7fa:	4798      	blx	r3
  while(false==gbMQTTBrokerConnected){
   2e7fc:	4b0d      	ldr	r3, [pc, #52]	; (2e834 <ConnectNetwork+0x10c>)
   2e7fe:	781b      	ldrb	r3, [r3, #0]
   2e800:	2201      	movs	r2, #1
   2e802:	4053      	eors	r3, r2
   2e804:	b2db      	uxtb	r3, r3
   2e806:	2b00      	cmp	r3, #0
   2e808:	d1f5      	bne.n	2e7f6 <ConnectNetwork+0xce>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   2e80a:	2300      	movs	r3, #0
   2e80c:	0018      	movs	r0, r3
   2e80e:	46bd      	mov	sp, r7
   2e810:	b008      	add	sp, #32
   2e812:	bd80      	pop	{r7, pc}
   2e814:	200042f0 	.word	0x200042f0
   2e818:	200043fc 	.word	0x200043fc
   2e81c:	00024ec5 	.word	0x00024ec5
   2e820:	00021045 	.word	0x00021045
   2e824:	200042e8 	.word	0x200042e8
   2e828:	00024671 	.word	0x00024671
   2e82c:	00024c7d 	.word	0x00024c7d
   2e830:	00024885 	.word	0x00024885
   2e834:	200042f1 	.word	0x200042f1

0002e838 <allocateClient>:

static void allocateClient(struct mqtt_module *module);
static void deAllocateClient(struct mqtt_module *module);

static void allocateClient(struct mqtt_module *module)
{
   2e838:	b580      	push	{r7, lr}
   2e83a:	b084      	sub	sp, #16
   2e83c:	af00      	add	r7, sp, #0
   2e83e:	6078      	str	r0, [r7, #4]
	unsigned int cIdx;
	
	if(!module)
   2e840:	687b      	ldr	r3, [r7, #4]
   2e842:	2b00      	cmp	r3, #0
   2e844:	d022      	beq.n	2e88c <allocateClient+0x54>
		return;
		
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2e846:	2300      	movs	r3, #0
   2e848:	60fb      	str	r3, [r7, #12]
   2e84a:	e01b      	b.n	2e884 <allocateClient+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   2e84c:	4a11      	ldr	r2, [pc, #68]	; (2e894 <allocateClient+0x5c>)
   2e84e:	68fb      	ldr	r3, [r7, #12]
   2e850:	2164      	movs	r1, #100	; 0x64
   2e852:	434b      	muls	r3, r1
   2e854:	18d3      	adds	r3, r2, r3
   2e856:	3360      	adds	r3, #96	; 0x60
   2e858:	681b      	ldr	r3, [r3, #0]
   2e85a:	2b00      	cmp	r3, #0
   2e85c:	d10f      	bne.n	2e87e <allocateClient+0x46>
		{
			mqttClientPool[cIdx].mqtt_instance = module;
   2e85e:	4a0d      	ldr	r2, [pc, #52]	; (2e894 <allocateClient+0x5c>)
   2e860:	68fb      	ldr	r3, [r7, #12]
   2e862:	2164      	movs	r1, #100	; 0x64
   2e864:	434b      	muls	r3, r1
   2e866:	18d3      	adds	r3, r2, r3
   2e868:	3360      	adds	r3, #96	; 0x60
   2e86a:	687a      	ldr	r2, [r7, #4]
   2e86c:	601a      	str	r2, [r3, #0]
			module->client = &(mqttClientPool[cIdx].client);
   2e86e:	68fb      	ldr	r3, [r7, #12]
   2e870:	2264      	movs	r2, #100	; 0x64
   2e872:	435a      	muls	r2, r3
   2e874:	4b07      	ldr	r3, [pc, #28]	; (2e894 <allocateClient+0x5c>)
   2e876:	18d2      	adds	r2, r2, r3
   2e878:	687b      	ldr	r3, [r7, #4]
   2e87a:	61da      	str	r2, [r3, #28]
			return;
   2e87c:	e007      	b.n	2e88e <allocateClient+0x56>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2e87e:	68fb      	ldr	r3, [r7, #12]
   2e880:	3301      	adds	r3, #1
   2e882:	60fb      	str	r3, [r7, #12]
   2e884:	68fb      	ldr	r3, [r7, #12]
   2e886:	2b06      	cmp	r3, #6
   2e888:	d9e0      	bls.n	2e84c <allocateClient+0x14>
   2e88a:	e000      	b.n	2e88e <allocateClient+0x56>
		return;
   2e88c:	46c0      	nop			; (mov r8, r8)
		}
	}	
}
   2e88e:	46bd      	mov	sp, r7
   2e890:	b004      	add	sp, #16
   2e892:	bd80      	pop	{r7, pc}
   2e894:	20004400 	.word	0x20004400

0002e898 <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   2e898:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e89a:	b089      	sub	sp, #36	; 0x24
   2e89c:	af04      	add	r7, sp, #16
   2e89e:	6078      	str	r0, [r7, #4]
   2e8a0:	6039      	str	r1, [r7, #0]
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   2e8a2:	687b      	ldr	r3, [r7, #4]
   2e8a4:	2b00      	cmp	r3, #0
   2e8a6:	d00a      	beq.n	2e8be <mqtt_init+0x26>
   2e8a8:	683b      	ldr	r3, [r7, #0]
   2e8aa:	2b00      	cmp	r3, #0
   2e8ac:	d007      	beq.n	2e8be <mqtt_init+0x26>
   2e8ae:	683b      	ldr	r3, [r7, #0]
   2e8b0:	691b      	ldr	r3, [r3, #16]
   2e8b2:	2b00      	cmp	r3, #0
   2e8b4:	d003      	beq.n	2e8be <mqtt_init+0x26>
   2e8b6:	683b      	ldr	r3, [r7, #0]
   2e8b8:	689b      	ldr	r3, [r3, #8]
   2e8ba:	2b00      	cmp	r3, #0
   2e8bc:	d102      	bne.n	2e8c4 <mqtt_init+0x2c>
		return FAILURE;
   2e8be:	2301      	movs	r3, #1
   2e8c0:	425b      	negs	r3, r3
   2e8c2:	e034      	b.n	2e92e <mqtt_init+0x96>
		
	timeout_ms = config->keep_alive * 1000;
   2e8c4:	683b      	ldr	r3, [r7, #0]
   2e8c6:	889b      	ldrh	r3, [r3, #4]
   2e8c8:	001a      	movs	r2, r3
   2e8ca:	23fa      	movs	r3, #250	; 0xfa
   2e8cc:	009b      	lsls	r3, r3, #2
   2e8ce:	4353      	muls	r3, r2
   2e8d0:	60fb      	str	r3, [r7, #12]
	NetworkInit(&(module->network));
   2e8d2:	687b      	ldr	r3, [r7, #4]
   2e8d4:	3320      	adds	r3, #32
   2e8d6:	0018      	movs	r0, r3
   2e8d8:	4b17      	ldr	r3, [pc, #92]	; (2e938 <mqtt_init+0xa0>)
   2e8da:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   2e8dc:	687b      	ldr	r3, [r7, #4]
   2e8de:	3304      	adds	r3, #4
   2e8e0:	6839      	ldr	r1, [r7, #0]
   2e8e2:	2218      	movs	r2, #24
   2e8e4:	0018      	movs	r0, r3
   2e8e6:	4b15      	ldr	r3, [pc, #84]	; (2e93c <mqtt_init+0xa4>)
   2e8e8:	4798      	blx	r3
	allocateClient(module);
   2e8ea:	687b      	ldr	r3, [r7, #4]
   2e8ec:	0018      	movs	r0, r3
   2e8ee:	4b14      	ldr	r3, [pc, #80]	; (2e940 <mqtt_init+0xa8>)
   2e8f0:	4798      	blx	r3
	
	if(module->client)
   2e8f2:	687b      	ldr	r3, [r7, #4]
   2e8f4:	69db      	ldr	r3, [r3, #28]
   2e8f6:	2b00      	cmp	r3, #0
   2e8f8:	d017      	beq.n	2e92a <mqtt_init+0x92>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   2e8fa:	687b      	ldr	r3, [r7, #4]
   2e8fc:	69d8      	ldr	r0, [r3, #28]
   2e8fe:	687b      	ldr	r3, [r7, #4]
   2e900:	3320      	adds	r3, #32
   2e902:	001c      	movs	r4, r3
   2e904:	683b      	ldr	r3, [r7, #0]
   2e906:	691e      	ldr	r6, [r3, #16]
   2e908:	683b      	ldr	r3, [r7, #0]
   2e90a:	695a      	ldr	r2, [r3, #20]
   2e90c:	683b      	ldr	r3, [r7, #0]
   2e90e:	6899      	ldr	r1, [r3, #8]
   2e910:	683b      	ldr	r3, [r7, #0]
   2e912:	68db      	ldr	r3, [r3, #12]
   2e914:	68fd      	ldr	r5, [r7, #12]
   2e916:	9302      	str	r3, [sp, #8]
   2e918:	9101      	str	r1, [sp, #4]
   2e91a:	9200      	str	r2, [sp, #0]
   2e91c:	0033      	movs	r3, r6
   2e91e:	002a      	movs	r2, r5
   2e920:	0021      	movs	r1, r4
   2e922:	4c08      	ldr	r4, [pc, #32]	; (2e944 <mqtt_init+0xac>)
   2e924:	47a0      	blx	r4
		return SUCCESS;
   2e926:	2300      	movs	r3, #0
   2e928:	e001      	b.n	2e92e <mqtt_init+0x96>
	}
	else
		return FAILURE;
   2e92a:	2301      	movs	r3, #1
   2e92c:	425b      	negs	r3, r3
}
   2e92e:	0018      	movs	r0, r3
   2e930:	46bd      	mov	sp, r7
   2e932:	b005      	add	sp, #20
   2e934:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e936:	46c0      	nop			; (mov r8, r8)
   2e938:	0002e6f1 	.word	0x0002e6f1
   2e93c:	000345a9 	.word	0x000345a9
   2e940:	0002e839 	.word	0x0002e839
   2e944:	0002d769 	.word	0x0002d769

0002e948 <mqtt_get_config_defaults>:
	else
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
   2e948:	b580      	push	{r7, lr}
   2e94a:	b082      	sub	sp, #8
   2e94c:	af00      	add	r7, sp, #0
   2e94e:	6078      	str	r0, [r7, #4]
	config->port = 1883;
   2e950:	687b      	ldr	r3, [r7, #4]
   2e952:	4a0c      	ldr	r2, [pc, #48]	; (2e984 <mqtt_get_config_defaults+0x3c>)
   2e954:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   2e956:	687b      	ldr	r3, [r7, #4]
   2e958:	2200      	movs	r2, #0
   2e95a:	709a      	strb	r2, [r3, #2]
	config->keep_alive = 60;
   2e95c:	687b      	ldr	r3, [r7, #4]
   2e95e:	223c      	movs	r2, #60	; 0x3c
   2e960:	809a      	strh	r2, [r3, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   2e962:	687b      	ldr	r3, [r7, #4]
   2e964:	2200      	movs	r2, #0
   2e966:	609a      	str	r2, [r3, #8]
	config->send_buffer = NULL;
   2e968:	687b      	ldr	r3, [r7, #4]
   2e96a:	2200      	movs	r2, #0
   2e96c:	611a      	str	r2, [r3, #16]
	config->read_buffer_size = 0;
   2e96e:	687b      	ldr	r3, [r7, #4]
   2e970:	2200      	movs	r2, #0
   2e972:	60da      	str	r2, [r3, #12]
	config->send_buffer_size = 0;
   2e974:	687b      	ldr	r3, [r7, #4]
   2e976:	2200      	movs	r2, #0
   2e978:	615a      	str	r2, [r3, #20]
}
   2e97a:	46c0      	nop			; (mov r8, r8)
   2e97c:	46bd      	mov	sp, r7
   2e97e:	b002      	add	sp, #8
   2e980:	bd80      	pop	{r7, pc}
   2e982:	46c0      	nop			; (mov r8, r8)
   2e984:	0000075b 	.word	0x0000075b

0002e988 <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
   2e988:	b580      	push	{r7, lr}
   2e98a:	b082      	sub	sp, #8
   2e98c:	af00      	add	r7, sp, #0
   2e98e:	6078      	str	r0, [r7, #4]
   2e990:	6039      	str	r1, [r7, #0]
	if(module)
   2e992:	687b      	ldr	r3, [r7, #4]
   2e994:	2b00      	cmp	r3, #0
   2e996:	d004      	beq.n	2e9a2 <mqtt_register_callback+0x1a>
	{
		module->callback = callback;
   2e998:	687b      	ldr	r3, [r7, #4]
   2e99a:	683a      	ldr	r2, [r7, #0]
   2e99c:	601a      	str	r2, [r3, #0]
		return SUCCESS;
   2e99e:	2300      	movs	r3, #0
   2e9a0:	e001      	b.n	2e9a6 <mqtt_register_callback+0x1e>
	}
	else
		return FAILURE;
   2e9a2:	2301      	movs	r3, #1
   2e9a4:	425b      	negs	r3, r3
}
   2e9a6:	0018      	movs	r0, r3
   2e9a8:	46bd      	mov	sp, r7
   2e9aa:	b002      	add	sp, #8
   2e9ac:	bd80      	pop	{r7, pc}
	...

0002e9b0 <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   2e9b0:	b580      	push	{r7, lr}
   2e9b2:	b082      	sub	sp, #8
   2e9b4:	af00      	add	r7, sp, #0
   2e9b6:	603a      	str	r2, [r7, #0]
   2e9b8:	1dfb      	adds	r3, r7, #7
   2e9ba:	1c02      	adds	r2, r0, #0
   2e9bc:	701a      	strb	r2, [r3, #0]
   2e9be:	1dbb      	adds	r3, r7, #6
   2e9c0:	1c0a      	adds	r2, r1, #0
   2e9c2:	701a      	strb	r2, [r3, #0]
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   2e9c4:	683a      	ldr	r2, [r7, #0]
   2e9c6:	1dbb      	adds	r3, r7, #6
   2e9c8:	7819      	ldrb	r1, [r3, #0]
   2e9ca:	1dfb      	adds	r3, r7, #7
   2e9cc:	781b      	ldrb	r3, [r3, #0]
   2e9ce:	b25b      	sxtb	r3, r3
   2e9d0:	0018      	movs	r0, r3
   2e9d2:	4b03      	ldr	r3, [pc, #12]	; (2e9e0 <mqtt_socket_event_handler+0x30>)
   2e9d4:	4798      	blx	r3
}
   2e9d6:	46c0      	nop			; (mov r8, r8)
   2e9d8:	46bd      	mov	sp, r7
   2e9da:	b002      	add	sp, #8
   2e9dc:	bd80      	pop	{r7, pc}
   2e9de:	46c0      	nop			; (mov r8, r8)
   2e9e0:	0002e42d 	.word	0x0002e42d

0002e9e4 <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   2e9e4:	b580      	push	{r7, lr}
   2e9e6:	b082      	sub	sp, #8
   2e9e8:	af00      	add	r7, sp, #0
   2e9ea:	6078      	str	r0, [r7, #4]
   2e9ec:	6039      	str	r1, [r7, #0]
	dnsResolveCallback(domain_name, server_ip);
   2e9ee:	683a      	ldr	r2, [r7, #0]
   2e9f0:	687b      	ldr	r3, [r7, #4]
   2e9f2:	0011      	movs	r1, r2
   2e9f4:	0018      	movs	r0, r3
   2e9f6:	4b03      	ldr	r3, [pc, #12]	; (2ea04 <mqtt_socket_resolve_handler+0x20>)
   2e9f8:	4798      	blx	r3
}
   2e9fa:	46c0      	nop			; (mov r8, r8)
   2e9fc:	46bd      	mov	sp, r7
   2e9fe:	b002      	add	sp, #8
   2ea00:	bd80      	pop	{r7, pc}
   2ea02:	46c0      	nop			; (mov r8, r8)
   2ea04:	0002e3dd 	.word	0x0002e3dd

0002ea08 <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   2ea08:	b590      	push	{r4, r7, lr}
   2ea0a:	b085      	sub	sp, #20
   2ea0c:	af00      	add	r7, sp, #0
   2ea0e:	6078      	str	r0, [r7, #4]
   2ea10:	6039      	str	r1, [r7, #0]
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   2ea12:	687b      	ldr	r3, [r7, #4]
   2ea14:	3320      	adds	r3, #32
   2ea16:	0018      	movs	r0, r3
   2ea18:	687b      	ldr	r3, [r7, #4]
   2ea1a:	889b      	ldrh	r3, [r3, #4]
   2ea1c:	001a      	movs	r2, r3
   2ea1e:	687b      	ldr	r3, [r7, #4]
   2ea20:	799b      	ldrb	r3, [r3, #6]
   2ea22:	6839      	ldr	r1, [r7, #0]
   2ea24:	4c09      	ldr	r4, [pc, #36]	; (2ea4c <mqtt_connect+0x44>)
   2ea26:	47a0      	blx	r4
   2ea28:	0003      	movs	r3, r0
   2ea2a:	60fb      	str	r3, [r7, #12]
	if(module->callback)
   2ea2c:	687b      	ldr	r3, [r7, #4]
   2ea2e:	681b      	ldr	r3, [r3, #0]
   2ea30:	2b00      	cmp	r3, #0
   2ea32:	d006      	beq.n	2ea42 <mqtt_connect+0x3a>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   2ea34:	687b      	ldr	r3, [r7, #4]
   2ea36:	681b      	ldr	r3, [r3, #0]
   2ea38:	220c      	movs	r2, #12
   2ea3a:	18ba      	adds	r2, r7, r2
   2ea3c:	6878      	ldr	r0, [r7, #4]
   2ea3e:	2100      	movs	r1, #0
   2ea40:	4798      	blx	r3
	return connResult.sock_connected.result;
   2ea42:	68fb      	ldr	r3, [r7, #12]
}
   2ea44:	0018      	movs	r0, r3
   2ea46:	46bd      	mov	sp, r7
   2ea48:	b005      	add	sp, #20
   2ea4a:	bd90      	pop	{r4, r7, pc}
   2ea4c:	0002e729 	.word	0x0002e729

0002ea50 <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   2ea50:	b580      	push	{r7, lr}
   2ea52:	b09c      	sub	sp, #112	; 0x70
   2ea54:	af00      	add	r7, sp, #0
   2ea56:	60f8      	str	r0, [r7, #12]
   2ea58:	607a      	str	r2, [r7, #4]
   2ea5a:	603b      	str	r3, [r7, #0]
   2ea5c:	230b      	movs	r3, #11
   2ea5e:	18fb      	adds	r3, r7, r3
   2ea60:	1c0a      	adds	r2, r1, #0
   2ea62:	701a      	strb	r2, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   2ea64:	2310      	movs	r3, #16
   2ea66:	18fa      	adds	r2, r7, r3
   2ea68:	4b31      	ldr	r3, [pc, #196]	; (2eb30 <mqtt_connect_broker+0xe0>)
   2ea6a:	0010      	movs	r0, r2
   2ea6c:	0019      	movs	r1, r3
   2ea6e:	2358      	movs	r3, #88	; 0x58
   2ea70:	001a      	movs	r2, r3
   2ea72:	4b30      	ldr	r3, [pc, #192]	; (2eb34 <mqtt_connect_broker+0xe4>)
   2ea74:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
   2ea76:	2310      	movs	r3, #16
   2ea78:	18fb      	adds	r3, r7, r3
   2ea7a:	2204      	movs	r2, #4
   2ea7c:	721a      	strb	r2, [r3, #8]
	connectData.clientID.cstring = (char *)client_id;
   2ea7e:	2310      	movs	r3, #16
   2ea80:	18fb      	adds	r3, r7, r3
   2ea82:	6fba      	ldr	r2, [r7, #120]	; 0x78
   2ea84:	60da      	str	r2, [r3, #12]
	connectData.username.cstring = (char *)id;
   2ea86:	2310      	movs	r3, #16
   2ea88:	18fb      	adds	r3, r7, r3
   2ea8a:	687a      	ldr	r2, [r7, #4]
   2ea8c:	641a      	str	r2, [r3, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   2ea8e:	2310      	movs	r3, #16
   2ea90:	18fb      	adds	r3, r7, r3
   2ea92:	683a      	ldr	r2, [r7, #0]
   2ea94:	64da      	str	r2, [r3, #76]	; 0x4c
	connectData.cleansession = clean_session;
   2ea96:	2310      	movs	r3, #16
   2ea98:	18fb      	adds	r3, r7, r3
   2ea9a:	220b      	movs	r2, #11
   2ea9c:	18ba      	adds	r2, r7, r2
   2ea9e:	7812      	ldrb	r2, [r2, #0]
   2eaa0:	769a      	strb	r2, [r3, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   2eaa2:	2310      	movs	r3, #16
   2eaa4:	18fb      	adds	r3, r7, r3
   2eaa6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   2eaa8:	625a      	str	r2, [r3, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   2eaaa:	2310      	movs	r3, #16
   2eaac:	18fb      	adds	r3, r7, r3
   2eaae:	2280      	movs	r2, #128	; 0x80
   2eab0:	18ba      	adds	r2, r7, r2
   2eab2:	6812      	ldr	r2, [r2, #0]
   2eab4:	631a      	str	r2, [r3, #48]	; 0x30
	connectData.will.retained = will_retain;
   2eab6:	2310      	movs	r3, #16
   2eab8:	18fb      	adds	r3, r7, r3
   2eaba:	228c      	movs	r2, #140	; 0x8c
   2eabc:	18ba      	adds	r2, r7, r2
   2eabe:	213c      	movs	r1, #60	; 0x3c
   2eac0:	7812      	ldrb	r2, [r2, #0]
   2eac2:	545a      	strb	r2, [r3, r1]
	connectData.will.qos = will_qos;
   2eac4:	2310      	movs	r3, #16
   2eac6:	18fb      	adds	r3, r7, r3
   2eac8:	2288      	movs	r2, #136	; 0x88
   2eaca:	18ba      	adds	r2, r7, r2
   2eacc:	213d      	movs	r1, #61	; 0x3d
   2eace:	7812      	ldrb	r2, [r2, #0]
   2ead0:	545a      	strb	r2, [r3, r1]
	
	if(will_topic && will_msg)
   2ead2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   2ead4:	2b00      	cmp	r3, #0
   2ead6:	d008      	beq.n	2eaea <mqtt_connect_broker+0x9a>
   2ead8:	2380      	movs	r3, #128	; 0x80
   2eada:	18fb      	adds	r3, r7, r3
   2eadc:	681b      	ldr	r3, [r3, #0]
   2eade:	2b00      	cmp	r3, #0
   2eae0:	d003      	beq.n	2eaea <mqtt_connect_broker+0x9a>
		connectData.willFlag = 1;
   2eae2:	2310      	movs	r3, #16
   2eae4:	18fb      	adds	r3, r7, r3
   2eae6:	2201      	movs	r2, #1
   2eae8:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   2eaea:	68fb      	ldr	r3, [r7, #12]
   2eaec:	69db      	ldr	r3, [r3, #28]
   2eaee:	2210      	movs	r2, #16
   2eaf0:	18ba      	adds	r2, r7, r2
   2eaf2:	0011      	movs	r1, r2
   2eaf4:	0018      	movs	r0, r3
   2eaf6:	4b10      	ldr	r3, [pc, #64]	; (2eb38 <mqtt_connect_broker+0xe8>)
   2eaf8:	4798      	blx	r3
   2eafa:	0003      	movs	r3, r0
   2eafc:	66fb      	str	r3, [r7, #108]	; 0x6c
	
	connBrokerResult.connected.result = rc;
   2eafe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2eb00:	b2da      	uxtb	r2, r3
   2eb02:	2368      	movs	r3, #104	; 0x68
   2eb04:	18fb      	adds	r3, r7, r3
   2eb06:	701a      	strb	r2, [r3, #0]
	if(module->callback)
   2eb08:	68fb      	ldr	r3, [r7, #12]
   2eb0a:	681b      	ldr	r3, [r3, #0]
   2eb0c:	2b00      	cmp	r3, #0
   2eb0e:	d006      	beq.n	2eb1e <mqtt_connect_broker+0xce>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   2eb10:	68fb      	ldr	r3, [r7, #12]
   2eb12:	681b      	ldr	r3, [r3, #0]
   2eb14:	2268      	movs	r2, #104	; 0x68
   2eb16:	18ba      	adds	r2, r7, r2
   2eb18:	68f8      	ldr	r0, [r7, #12]
   2eb1a:	2101      	movs	r1, #1
   2eb1c:	4798      	blx	r3
	
	module->isConnected = true;
   2eb1e:	68fb      	ldr	r3, [r7, #12]
   2eb20:	2234      	movs	r2, #52	; 0x34
   2eb22:	2101      	movs	r1, #1
   2eb24:	5499      	strb	r1, [r3, r2]
	return rc;
   2eb26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
   2eb28:	0018      	movs	r0, r3
   2eb2a:	46bd      	mov	sp, r7
   2eb2c:	b01c      	add	sp, #112	; 0x70
   2eb2e:	bd80      	pop	{r7, pc}
   2eb30:	00039680 	.word	0x00039680
   2eb34:	000345a9 	.word	0x000345a9
   2eb38:	0002de79 	.word	0x0002de79

0002eb3c <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   2eb3c:	b580      	push	{r7, lr}
   2eb3e:	b084      	sub	sp, #16
   2eb40:	af00      	add	r7, sp, #0
   2eb42:	6078      	str	r0, [r7, #4]
   2eb44:	6039      	str	r1, [r7, #0]
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   2eb46:	687b      	ldr	r3, [r7, #4]
   2eb48:	69db      	ldr	r3, [r3, #28]
   2eb4a:	0018      	movs	r0, r3
   2eb4c:	4b0c      	ldr	r3, [pc, #48]	; (2eb80 <mqtt_disconnect+0x44>)
   2eb4e:	4798      	blx	r3
   2eb50:	0003      	movs	r3, r0
   2eb52:	60fb      	str	r3, [r7, #12]
	
	disconnectResult.disconnected.reason = rc;
   2eb54:	68fb      	ldr	r3, [r7, #12]
   2eb56:	60bb      	str	r3, [r7, #8]
	
	if(module->callback)
   2eb58:	687b      	ldr	r3, [r7, #4]
   2eb5a:	681b      	ldr	r3, [r3, #0]
   2eb5c:	2b00      	cmp	r3, #0
   2eb5e:	d006      	beq.n	2eb6e <mqtt_disconnect+0x32>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   2eb60:	687b      	ldr	r3, [r7, #4]
   2eb62:	681b      	ldr	r3, [r3, #0]
   2eb64:	2208      	movs	r2, #8
   2eb66:	18ba      	adds	r2, r7, r2
   2eb68:	6878      	ldr	r0, [r7, #4]
   2eb6a:	2105      	movs	r1, #5
   2eb6c:	4798      	blx	r3
	
	module->isConnected = false;
   2eb6e:	687b      	ldr	r3, [r7, #4]
   2eb70:	2234      	movs	r2, #52	; 0x34
   2eb72:	2100      	movs	r1, #0
   2eb74:	5499      	strb	r1, [r3, r2]
	return rc;
   2eb76:	68fb      	ldr	r3, [r7, #12]
}
   2eb78:	0018      	movs	r0, r3
   2eb7a:	46bd      	mov	sp, r7
   2eb7c:	b004      	add	sp, #16
   2eb7e:	bd80      	pop	{r7, pc}
   2eb80:	0002e305 	.word	0x0002e305

0002eb84 <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   2eb84:	b580      	push	{r7, lr}
   2eb86:	b08a      	sub	sp, #40	; 0x28
   2eb88:	af00      	add	r7, sp, #0
   2eb8a:	60f8      	str	r0, [r7, #12]
   2eb8c:	60b9      	str	r1, [r7, #8]
   2eb8e:	607a      	str	r2, [r7, #4]
   2eb90:	603b      	str	r3, [r7, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   2eb92:	2314      	movs	r3, #20
   2eb94:	18fb      	adds	r3, r7, r3
   2eb96:	2230      	movs	r2, #48	; 0x30
   2eb98:	18ba      	adds	r2, r7, r2
   2eb9a:	7812      	ldrb	r2, [r2, #0]
   2eb9c:	701a      	strb	r2, [r3, #0]
	mqttMsg.payload = (char *)msg;
   2eb9e:	2314      	movs	r3, #20
   2eba0:	18fb      	adds	r3, r7, r3
   2eba2:	687a      	ldr	r2, [r7, #4]
   2eba4:	609a      	str	r2, [r3, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   2eba6:	2314      	movs	r3, #20
   2eba8:	18fb      	adds	r3, r7, r3
   2ebaa:	683a      	ldr	r2, [r7, #0]
   2ebac:	60da      	str	r2, [r3, #12]
	mqttMsg.retained = retain;
   2ebae:	2314      	movs	r3, #20
   2ebb0:	18fb      	adds	r3, r7, r3
   2ebb2:	2234      	movs	r2, #52	; 0x34
   2ebb4:	18ba      	adds	r2, r7, r2
   2ebb6:	7812      	ldrb	r2, [r2, #0]
   2ebb8:	705a      	strb	r2, [r3, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   2ebba:	68fb      	ldr	r3, [r7, #12]
   2ebbc:	69db      	ldr	r3, [r3, #28]
   2ebbe:	2214      	movs	r2, #20
   2ebc0:	18ba      	adds	r2, r7, r2
   2ebc2:	68b9      	ldr	r1, [r7, #8]
   2ebc4:	0018      	movs	r0, r3
   2ebc6:	4b09      	ldr	r3, [pc, #36]	; (2ebec <mqtt_publish+0x68>)
   2ebc8:	4798      	blx	r3
   2ebca:	0003      	movs	r3, r0
   2ebcc:	627b      	str	r3, [r7, #36]	; 0x24
	
	if(module->callback)
   2ebce:	68fb      	ldr	r3, [r7, #12]
   2ebd0:	681b      	ldr	r3, [r3, #0]
   2ebd2:	2b00      	cmp	r3, #0
   2ebd4:	d005      	beq.n	2ebe2 <mqtt_publish+0x5e>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   2ebd6:	68fb      	ldr	r3, [r7, #12]
   2ebd8:	681b      	ldr	r3, [r3, #0]
   2ebda:	68f8      	ldr	r0, [r7, #12]
   2ebdc:	2200      	movs	r2, #0
   2ebde:	2102      	movs	r1, #2
   2ebe0:	4798      	blx	r3
	
	return rc;
   2ebe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2ebe4:	0018      	movs	r0, r3
   2ebe6:	46bd      	mov	sp, r7
   2ebe8:	b00a      	add	sp, #40	; 0x28
   2ebea:	bd80      	pop	{r7, pc}
   2ebec:	0002e145 	.word	0x0002e145

0002ebf0 <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   2ebf0:	b590      	push	{r4, r7, lr}
   2ebf2:	b087      	sub	sp, #28
   2ebf4:	af00      	add	r7, sp, #0
   2ebf6:	60f8      	str	r0, [r7, #12]
   2ebf8:	60b9      	str	r1, [r7, #8]
   2ebfa:	603b      	str	r3, [r7, #0]
   2ebfc:	1dfb      	adds	r3, r7, #7
   2ebfe:	701a      	strb	r2, [r3, #0]
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   2ec00:	68fb      	ldr	r3, [r7, #12]
   2ec02:	69d8      	ldr	r0, [r3, #28]
   2ec04:	683c      	ldr	r4, [r7, #0]
   2ec06:	1dfb      	adds	r3, r7, #7
   2ec08:	781a      	ldrb	r2, [r3, #0]
   2ec0a:	68b9      	ldr	r1, [r7, #8]
   2ec0c:	0023      	movs	r3, r4
   2ec0e:	4c09      	ldr	r4, [pc, #36]	; (2ec34 <mqtt_subscribe+0x44>)
   2ec10:	47a0      	blx	r4
   2ec12:	0003      	movs	r3, r0
   2ec14:	617b      	str	r3, [r7, #20]
	
	if(module->callback)
   2ec16:	68fb      	ldr	r3, [r7, #12]
   2ec18:	681b      	ldr	r3, [r3, #0]
   2ec1a:	2b00      	cmp	r3, #0
   2ec1c:	d005      	beq.n	2ec2a <mqtt_subscribe+0x3a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   2ec1e:	68fb      	ldr	r3, [r7, #12]
   2ec20:	681b      	ldr	r3, [r3, #0]
   2ec22:	68f8      	ldr	r0, [r7, #12]
   2ec24:	2200      	movs	r2, #0
   2ec26:	2103      	movs	r1, #3
   2ec28:	4798      	blx	r3
	
	return rc;
   2ec2a:	697b      	ldr	r3, [r7, #20]
}
   2ec2c:	0018      	movs	r0, r3
   2ec2e:	46bd      	mov	sp, r7
   2ec30:	b007      	add	sp, #28
   2ec32:	bd90      	pop	{r4, r7, pc}
   2ec34:	0002dfb9 	.word	0x0002dfb9

0002ec38 <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   2ec38:	b580      	push	{r7, lr}
   2ec3a:	b082      	sub	sp, #8
   2ec3c:	af00      	add	r7, sp, #0
   2ec3e:	6078      	str	r0, [r7, #4]
   2ec40:	6039      	str	r1, [r7, #0]
	return MQTTYield(module->client, timeout_ms);
   2ec42:	687b      	ldr	r3, [r7, #4]
   2ec44:	69db      	ldr	r3, [r3, #28]
   2ec46:	683a      	ldr	r2, [r7, #0]
   2ec48:	0011      	movs	r1, r2
   2ec4a:	0018      	movs	r0, r3
   2ec4c:	4b03      	ldr	r3, [pc, #12]	; (2ec5c <mqtt_yield+0x24>)
   2ec4e:	4798      	blx	r3
   2ec50:	0003      	movs	r3, r0
   2ec52:	0018      	movs	r0, r3
   2ec54:	46bd      	mov	sp, r7
   2ec56:	b002      	add	sp, #8
   2ec58:	bd80      	pop	{r7, pc}
   2ec5a:	46c0      	nop			; (mov r8, r8)
   2ec5c:	0002ddc1 	.word	0x0002ddc1

0002ec60 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   2ec60:	b590      	push	{r4, r7, lr}
   2ec62:	b085      	sub	sp, #20
   2ec64:	af00      	add	r7, sp, #0
   2ec66:	6078      	str	r0, [r7, #4]
	int len = 0;
   2ec68:	2300      	movs	r3, #0
   2ec6a:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   2ec6c:	687b      	ldr	r3, [r7, #4]
   2ec6e:	7a1b      	ldrb	r3, [r3, #8]
   2ec70:	2b03      	cmp	r3, #3
   2ec72:	d102      	bne.n	2ec7a <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
   2ec74:	230c      	movs	r3, #12
   2ec76:	60fb      	str	r3, [r7, #12]
   2ec78:	e005      	b.n	2ec86 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
   2ec7a:	687b      	ldr	r3, [r7, #4]
   2ec7c:	7a1b      	ldrb	r3, [r3, #8]
   2ec7e:	2b04      	cmp	r3, #4
   2ec80:	d101      	bne.n	2ec86 <MQTTSerialize_connectLength+0x26>
		len = 10;
   2ec82:	230a      	movs	r3, #10
   2ec84:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
   2ec86:	687b      	ldr	r3, [r7, #4]
   2ec88:	68d8      	ldr	r0, [r3, #12]
   2ec8a:	6919      	ldr	r1, [r3, #16]
   2ec8c:	695a      	ldr	r2, [r3, #20]
   2ec8e:	4b25      	ldr	r3, [pc, #148]	; (2ed24 <MQTTSerialize_connectLength+0xc4>)
   2ec90:	4798      	blx	r3
   2ec92:	0003      	movs	r3, r0
   2ec94:	3302      	adds	r3, #2
   2ec96:	68fa      	ldr	r2, [r7, #12]
   2ec98:	18d3      	adds	r3, r2, r3
   2ec9a:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
   2ec9c:	687b      	ldr	r3, [r7, #4]
   2ec9e:	7edb      	ldrb	r3, [r3, #27]
   2eca0:	2b00      	cmp	r3, #0
   2eca2:	d013      	beq.n	2eccc <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   2eca4:	687b      	ldr	r3, [r7, #4]
   2eca6:	6a58      	ldr	r0, [r3, #36]	; 0x24
   2eca8:	6a99      	ldr	r1, [r3, #40]	; 0x28
   2ecaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2ecac:	4b1d      	ldr	r3, [pc, #116]	; (2ed24 <MQTTSerialize_connectLength+0xc4>)
   2ecae:	4798      	blx	r3
   2ecb0:	0003      	movs	r3, r0
   2ecb2:	1c9c      	adds	r4, r3, #2
   2ecb4:	687b      	ldr	r3, [r7, #4]
   2ecb6:	6b18      	ldr	r0, [r3, #48]	; 0x30
   2ecb8:	6b59      	ldr	r1, [r3, #52]	; 0x34
   2ecba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2ecbc:	4b19      	ldr	r3, [pc, #100]	; (2ed24 <MQTTSerialize_connectLength+0xc4>)
   2ecbe:	4798      	blx	r3
   2ecc0:	0003      	movs	r3, r0
   2ecc2:	18e3      	adds	r3, r4, r3
   2ecc4:	3302      	adds	r3, #2
   2ecc6:	68fa      	ldr	r2, [r7, #12]
   2ecc8:	18d3      	adds	r3, r2, r3
   2ecca:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
   2eccc:	687b      	ldr	r3, [r7, #4]
   2ecce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2ecd0:	2b00      	cmp	r3, #0
   2ecd2:	d103      	bne.n	2ecdc <MQTTSerialize_connectLength+0x7c>
   2ecd4:	687b      	ldr	r3, [r7, #4]
   2ecd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2ecd8:	2b00      	cmp	r3, #0
   2ecda:	d00a      	beq.n	2ecf2 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
   2ecdc:	687b      	ldr	r3, [r7, #4]
   2ecde:	6c18      	ldr	r0, [r3, #64]	; 0x40
   2ece0:	6c59      	ldr	r1, [r3, #68]	; 0x44
   2ece2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   2ece4:	4b0f      	ldr	r3, [pc, #60]	; (2ed24 <MQTTSerialize_connectLength+0xc4>)
   2ece6:	4798      	blx	r3
   2ece8:	0003      	movs	r3, r0
   2ecea:	3302      	adds	r3, #2
   2ecec:	68fa      	ldr	r2, [r7, #12]
   2ecee:	18d3      	adds	r3, r2, r3
   2ecf0:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
   2ecf2:	687b      	ldr	r3, [r7, #4]
   2ecf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2ecf6:	2b00      	cmp	r3, #0
   2ecf8:	d103      	bne.n	2ed02 <MQTTSerialize_connectLength+0xa2>
   2ecfa:	687b      	ldr	r3, [r7, #4]
   2ecfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2ecfe:	2b00      	cmp	r3, #0
   2ed00:	d00a      	beq.n	2ed18 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
   2ed02:	687b      	ldr	r3, [r7, #4]
   2ed04:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   2ed06:	6d19      	ldr	r1, [r3, #80]	; 0x50
   2ed08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   2ed0a:	4b06      	ldr	r3, [pc, #24]	; (2ed24 <MQTTSerialize_connectLength+0xc4>)
   2ed0c:	4798      	blx	r3
   2ed0e:	0003      	movs	r3, r0
   2ed10:	3302      	adds	r3, #2
   2ed12:	68fa      	ldr	r2, [r7, #12]
   2ed14:	18d3      	adds	r3, r2, r3
   2ed16:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
   2ed18:	68fb      	ldr	r3, [r7, #12]
}
   2ed1a:	0018      	movs	r0, r3
   2ed1c:	46bd      	mov	sp, r7
   2ed1e:	b005      	add	sp, #20
   2ed20:	bd90      	pop	{r4, r7, pc}
   2ed22:	46c0      	nop			; (mov r8, r8)
   2ed24:	0002f6d1 	.word	0x0002f6d1

0002ed28 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   2ed28:	b590      	push	{r4, r7, lr}
   2ed2a:	b08b      	sub	sp, #44	; 0x2c
   2ed2c:	af00      	add	r7, sp, #0
   2ed2e:	60f8      	str	r0, [r7, #12]
   2ed30:	60b9      	str	r1, [r7, #8]
   2ed32:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
   2ed34:	68fb      	ldr	r3, [r7, #12]
   2ed36:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
   2ed38:	2300      	movs	r3, #0
   2ed3a:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
   2ed3c:	2300      	movs	r3, #0
   2ed3e:	617b      	str	r3, [r7, #20]
	int len = 0;
   2ed40:	2300      	movs	r3, #0
   2ed42:	623b      	str	r3, [r7, #32]
	int rc = -1;
   2ed44:	2301      	movs	r3, #1
   2ed46:	425b      	negs	r3, r3
   2ed48:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   2ed4a:	687b      	ldr	r3, [r7, #4]
   2ed4c:	0018      	movs	r0, r3
   2ed4e:	4b8c      	ldr	r3, [pc, #560]	; (2ef80 <MQTTSerialize_connect+0x258>)
   2ed50:	4798      	blx	r3
   2ed52:	0003      	movs	r3, r0
   2ed54:	623b      	str	r3, [r7, #32]
   2ed56:	6a3b      	ldr	r3, [r7, #32]
   2ed58:	0018      	movs	r0, r3
   2ed5a:	4b8a      	ldr	r3, [pc, #552]	; (2ef84 <MQTTSerialize_connect+0x25c>)
   2ed5c:	4798      	blx	r3
   2ed5e:	0002      	movs	r2, r0
   2ed60:	68bb      	ldr	r3, [r7, #8]
   2ed62:	429a      	cmp	r2, r3
   2ed64:	dd03      	ble.n	2ed6e <MQTTSerialize_connect+0x46>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2ed66:	2302      	movs	r3, #2
   2ed68:	425b      	negs	r3, r3
   2ed6a:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   2ed6c:	e103      	b.n	2ef76 <MQTTSerialize_connect+0x24e>
	}

	header.byte = 0;
   2ed6e:	2318      	movs	r3, #24
   2ed70:	18fb      	adds	r3, r7, r3
   2ed72:	2200      	movs	r2, #0
   2ed74:	701a      	strb	r2, [r3, #0]
	header.bits.type = CONNECT;
   2ed76:	2318      	movs	r3, #24
   2ed78:	18fb      	adds	r3, r7, r3
   2ed7a:	781a      	ldrb	r2, [r3, #0]
   2ed7c:	210f      	movs	r1, #15
   2ed7e:	400a      	ands	r2, r1
   2ed80:	1c11      	adds	r1, r2, #0
   2ed82:	2210      	movs	r2, #16
   2ed84:	430a      	orrs	r2, r1
   2ed86:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2ed88:	2318      	movs	r3, #24
   2ed8a:	18fb      	adds	r3, r7, r3
   2ed8c:	781a      	ldrb	r2, [r3, #0]
   2ed8e:	231c      	movs	r3, #28
   2ed90:	18fb      	adds	r3, r7, r3
   2ed92:	0011      	movs	r1, r2
   2ed94:	0018      	movs	r0, r3
   2ed96:	4b7c      	ldr	r3, [pc, #496]	; (2ef88 <MQTTSerialize_connect+0x260>)
   2ed98:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   2ed9a:	69fb      	ldr	r3, [r7, #28]
   2ed9c:	6a3a      	ldr	r2, [r7, #32]
   2ed9e:	0011      	movs	r1, r2
   2eda0:	0018      	movs	r0, r3
   2eda2:	4b7a      	ldr	r3, [pc, #488]	; (2ef8c <MQTTSerialize_connect+0x264>)
   2eda4:	4798      	blx	r3
   2eda6:	0002      	movs	r2, r0
   2eda8:	69fb      	ldr	r3, [r7, #28]
   2edaa:	189b      	adds	r3, r3, r2
   2edac:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
   2edae:	687b      	ldr	r3, [r7, #4]
   2edb0:	7a1b      	ldrb	r3, [r3, #8]
   2edb2:	2b04      	cmp	r3, #4
   2edb4:	d10d      	bne.n	2edd2 <MQTTSerialize_connect+0xaa>
	{
		writeCString(&ptr, "MQTT");
   2edb6:	4a76      	ldr	r2, [pc, #472]	; (2ef90 <MQTTSerialize_connect+0x268>)
   2edb8:	231c      	movs	r3, #28
   2edba:	18fb      	adds	r3, r7, r3
   2edbc:	0011      	movs	r1, r2
   2edbe:	0018      	movs	r0, r3
   2edc0:	4b74      	ldr	r3, [pc, #464]	; (2ef94 <MQTTSerialize_connect+0x26c>)
   2edc2:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   2edc4:	231c      	movs	r3, #28
   2edc6:	18fb      	adds	r3, r7, r3
   2edc8:	2104      	movs	r1, #4
   2edca:	0018      	movs	r0, r3
   2edcc:	4b6e      	ldr	r3, [pc, #440]	; (2ef88 <MQTTSerialize_connect+0x260>)
   2edce:	4798      	blx	r3
   2edd0:	e00c      	b.n	2edec <MQTTSerialize_connect+0xc4>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   2edd2:	4a71      	ldr	r2, [pc, #452]	; (2ef98 <MQTTSerialize_connect+0x270>)
   2edd4:	231c      	movs	r3, #28
   2edd6:	18fb      	adds	r3, r7, r3
   2edd8:	0011      	movs	r1, r2
   2edda:	0018      	movs	r0, r3
   2eddc:	4b6d      	ldr	r3, [pc, #436]	; (2ef94 <MQTTSerialize_connect+0x26c>)
   2edde:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   2ede0:	231c      	movs	r3, #28
   2ede2:	18fb      	adds	r3, r7, r3
   2ede4:	2103      	movs	r1, #3
   2ede6:	0018      	movs	r0, r3
   2ede8:	4b67      	ldr	r3, [pc, #412]	; (2ef88 <MQTTSerialize_connect+0x260>)
   2edea:	4798      	blx	r3
	}

	flags.all = 0;
   2edec:	2314      	movs	r3, #20
   2edee:	18fb      	adds	r3, r7, r3
   2edf0:	2200      	movs	r2, #0
   2edf2:	701a      	strb	r2, [r3, #0]
	flags.bits.cleansession = options->cleansession;
   2edf4:	687b      	ldr	r3, [r7, #4]
   2edf6:	7e9b      	ldrb	r3, [r3, #26]
   2edf8:	1c1a      	adds	r2, r3, #0
   2edfa:	2301      	movs	r3, #1
   2edfc:	4013      	ands	r3, r2
   2edfe:	b2da      	uxtb	r2, r3
   2ee00:	2314      	movs	r3, #20
   2ee02:	18fb      	adds	r3, r7, r3
   2ee04:	2101      	movs	r1, #1
   2ee06:	400a      	ands	r2, r1
   2ee08:	1890      	adds	r0, r2, r2
   2ee0a:	781a      	ldrb	r2, [r3, #0]
   2ee0c:	2102      	movs	r1, #2
   2ee0e:	438a      	bics	r2, r1
   2ee10:	1c11      	adds	r1, r2, #0
   2ee12:	1c02      	adds	r2, r0, #0
   2ee14:	430a      	orrs	r2, r1
   2ee16:	701a      	strb	r2, [r3, #0]
	flags.bits.will = (options->willFlag) ? 1 : 0;
   2ee18:	687b      	ldr	r3, [r7, #4]
   2ee1a:	7edb      	ldrb	r3, [r3, #27]
   2ee1c:	1e5a      	subs	r2, r3, #1
   2ee1e:	4193      	sbcs	r3, r2
   2ee20:	b2da      	uxtb	r2, r3
   2ee22:	2314      	movs	r3, #20
   2ee24:	18fb      	adds	r3, r7, r3
   2ee26:	2101      	movs	r1, #1
   2ee28:	400a      	ands	r2, r1
   2ee2a:	0090      	lsls	r0, r2, #2
   2ee2c:	781a      	ldrb	r2, [r3, #0]
   2ee2e:	2104      	movs	r1, #4
   2ee30:	438a      	bics	r2, r1
   2ee32:	1c11      	adds	r1, r2, #0
   2ee34:	1c02      	adds	r2, r0, #0
   2ee36:	430a      	orrs	r2, r1
   2ee38:	701a      	strb	r2, [r3, #0]
	if (flags.bits.will)
   2ee3a:	2314      	movs	r3, #20
   2ee3c:	18fb      	adds	r3, r7, r3
   2ee3e:	781b      	ldrb	r3, [r3, #0]
   2ee40:	2204      	movs	r2, #4
   2ee42:	4013      	ands	r3, r2
   2ee44:	b2db      	uxtb	r3, r3
   2ee46:	2b00      	cmp	r3, #0
   2ee48:	d025      	beq.n	2ee96 <MQTTSerialize_connect+0x16e>
	{
		flags.bits.willQoS = options->will.qos;
   2ee4a:	687b      	ldr	r3, [r7, #4]
   2ee4c:	223d      	movs	r2, #61	; 0x3d
   2ee4e:	5c9b      	ldrb	r3, [r3, r2]
   2ee50:	1c1a      	adds	r2, r3, #0
   2ee52:	2303      	movs	r3, #3
   2ee54:	4013      	ands	r3, r2
   2ee56:	b2da      	uxtb	r2, r3
   2ee58:	2314      	movs	r3, #20
   2ee5a:	18fb      	adds	r3, r7, r3
   2ee5c:	2103      	movs	r1, #3
   2ee5e:	400a      	ands	r2, r1
   2ee60:	00d0      	lsls	r0, r2, #3
   2ee62:	781a      	ldrb	r2, [r3, #0]
   2ee64:	2118      	movs	r1, #24
   2ee66:	438a      	bics	r2, r1
   2ee68:	1c11      	adds	r1, r2, #0
   2ee6a:	1c02      	adds	r2, r0, #0
   2ee6c:	430a      	orrs	r2, r1
   2ee6e:	701a      	strb	r2, [r3, #0]
		flags.bits.willRetain = options->will.retained;
   2ee70:	687b      	ldr	r3, [r7, #4]
   2ee72:	223c      	movs	r2, #60	; 0x3c
   2ee74:	5c9b      	ldrb	r3, [r3, r2]
   2ee76:	1c1a      	adds	r2, r3, #0
   2ee78:	2301      	movs	r3, #1
   2ee7a:	4013      	ands	r3, r2
   2ee7c:	b2da      	uxtb	r2, r3
   2ee7e:	2314      	movs	r3, #20
   2ee80:	18fb      	adds	r3, r7, r3
   2ee82:	2101      	movs	r1, #1
   2ee84:	400a      	ands	r2, r1
   2ee86:	0150      	lsls	r0, r2, #5
   2ee88:	781a      	ldrb	r2, [r3, #0]
   2ee8a:	2120      	movs	r1, #32
   2ee8c:	438a      	bics	r2, r1
   2ee8e:	1c11      	adds	r1, r2, #0
   2ee90:	1c02      	adds	r2, r0, #0
   2ee92:	430a      	orrs	r2, r1
   2ee94:	701a      	strb	r2, [r3, #0]
	}

	if (options->username.cstring || options->username.lenstring.data)
   2ee96:	687b      	ldr	r3, [r7, #4]
   2ee98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2ee9a:	2b00      	cmp	r3, #0
   2ee9c:	d103      	bne.n	2eea6 <MQTTSerialize_connect+0x17e>
   2ee9e:	687b      	ldr	r3, [r7, #4]
   2eea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2eea2:	2b00      	cmp	r3, #0
   2eea4:	d006      	beq.n	2eeb4 <MQTTSerialize_connect+0x18c>
		flags.bits.username = 1;
   2eea6:	2314      	movs	r3, #20
   2eea8:	18fb      	adds	r3, r7, r3
   2eeaa:	781a      	ldrb	r2, [r3, #0]
   2eeac:	2180      	movs	r1, #128	; 0x80
   2eeae:	4249      	negs	r1, r1
   2eeb0:	430a      	orrs	r2, r1
   2eeb2:	701a      	strb	r2, [r3, #0]
	if (options->password.cstring || options->password.lenstring.data)
   2eeb4:	687b      	ldr	r3, [r7, #4]
   2eeb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2eeb8:	2b00      	cmp	r3, #0
   2eeba:	d103      	bne.n	2eec4 <MQTTSerialize_connect+0x19c>
   2eebc:	687b      	ldr	r3, [r7, #4]
   2eebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2eec0:	2b00      	cmp	r3, #0
   2eec2:	d005      	beq.n	2eed0 <MQTTSerialize_connect+0x1a8>
		flags.bits.password = 1;
   2eec4:	2314      	movs	r3, #20
   2eec6:	18fb      	adds	r3, r7, r3
   2eec8:	781a      	ldrb	r2, [r3, #0]
   2eeca:	2140      	movs	r1, #64	; 0x40
   2eecc:	430a      	orrs	r2, r1
   2eece:	701a      	strb	r2, [r3, #0]

	writeChar(&ptr, flags.all);
   2eed0:	2314      	movs	r3, #20
   2eed2:	18fb      	adds	r3, r7, r3
   2eed4:	781a      	ldrb	r2, [r3, #0]
   2eed6:	231c      	movs	r3, #28
   2eed8:	18fb      	adds	r3, r7, r3
   2eeda:	0011      	movs	r1, r2
   2eedc:	0018      	movs	r0, r3
   2eede:	4b2a      	ldr	r3, [pc, #168]	; (2ef88 <MQTTSerialize_connect+0x260>)
   2eee0:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   2eee2:	687b      	ldr	r3, [r7, #4]
   2eee4:	8b1b      	ldrh	r3, [r3, #24]
   2eee6:	001a      	movs	r2, r3
   2eee8:	231c      	movs	r3, #28
   2eeea:	18fb      	adds	r3, r7, r3
   2eeec:	0011      	movs	r1, r2
   2eeee:	0018      	movs	r0, r3
   2eef0:	4b2a      	ldr	r3, [pc, #168]	; (2ef9c <MQTTSerialize_connect+0x274>)
   2eef2:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   2eef4:	687b      	ldr	r3, [r7, #4]
   2eef6:	221c      	movs	r2, #28
   2eef8:	18b8      	adds	r0, r7, r2
   2eefa:	68d9      	ldr	r1, [r3, #12]
   2eefc:	691a      	ldr	r2, [r3, #16]
   2eefe:	695b      	ldr	r3, [r3, #20]
   2ef00:	4c27      	ldr	r4, [pc, #156]	; (2efa0 <MQTTSerialize_connect+0x278>)
   2ef02:	47a0      	blx	r4
	if (options->willFlag)
   2ef04:	687b      	ldr	r3, [r7, #4]
   2ef06:	7edb      	ldrb	r3, [r3, #27]
   2ef08:	2b00      	cmp	r3, #0
   2ef0a:	d00f      	beq.n	2ef2c <MQTTSerialize_connect+0x204>
	{
		writeMQTTString(&ptr, options->will.topicName);
   2ef0c:	687b      	ldr	r3, [r7, #4]
   2ef0e:	221c      	movs	r2, #28
   2ef10:	18b8      	adds	r0, r7, r2
   2ef12:	6a59      	ldr	r1, [r3, #36]	; 0x24
   2ef14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2ef16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2ef18:	4c21      	ldr	r4, [pc, #132]	; (2efa0 <MQTTSerialize_connect+0x278>)
   2ef1a:	47a0      	blx	r4
		writeMQTTString(&ptr, options->will.message);
   2ef1c:	687b      	ldr	r3, [r7, #4]
   2ef1e:	221c      	movs	r2, #28
   2ef20:	18b8      	adds	r0, r7, r2
   2ef22:	6b19      	ldr	r1, [r3, #48]	; 0x30
   2ef24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2ef26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   2ef28:	4c1d      	ldr	r4, [pc, #116]	; (2efa0 <MQTTSerialize_connect+0x278>)
   2ef2a:	47a0      	blx	r4
	}
	if (flags.bits.username)
   2ef2c:	2314      	movs	r3, #20
   2ef2e:	18fb      	adds	r3, r7, r3
   2ef30:	781b      	ldrb	r3, [r3, #0]
   2ef32:	227f      	movs	r2, #127	; 0x7f
   2ef34:	4393      	bics	r3, r2
   2ef36:	b2db      	uxtb	r3, r3
   2ef38:	2b00      	cmp	r3, #0
   2ef3a:	d007      	beq.n	2ef4c <MQTTSerialize_connect+0x224>
		writeMQTTString(&ptr, options->username);
   2ef3c:	687b      	ldr	r3, [r7, #4]
   2ef3e:	221c      	movs	r2, #28
   2ef40:	18b8      	adds	r0, r7, r2
   2ef42:	6c19      	ldr	r1, [r3, #64]	; 0x40
   2ef44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   2ef46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2ef48:	4c15      	ldr	r4, [pc, #84]	; (2efa0 <MQTTSerialize_connect+0x278>)
   2ef4a:	47a0      	blx	r4
	if (flags.bits.password)
   2ef4c:	2314      	movs	r3, #20
   2ef4e:	18fb      	adds	r3, r7, r3
   2ef50:	781b      	ldrb	r3, [r3, #0]
   2ef52:	2240      	movs	r2, #64	; 0x40
   2ef54:	4013      	ands	r3, r2
   2ef56:	b2db      	uxtb	r3, r3
   2ef58:	2b00      	cmp	r3, #0
   2ef5a:	d007      	beq.n	2ef6c <MQTTSerialize_connect+0x244>
		writeMQTTString(&ptr, options->password);
   2ef5c:	687b      	ldr	r3, [r7, #4]
   2ef5e:	221c      	movs	r2, #28
   2ef60:	18b8      	adds	r0, r7, r2
   2ef62:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   2ef64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   2ef66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2ef68:	4c0d      	ldr	r4, [pc, #52]	; (2efa0 <MQTTSerialize_connect+0x278>)
   2ef6a:	47a0      	blx	r4

	rc = ptr - buf;
   2ef6c:	69fb      	ldr	r3, [r7, #28]
   2ef6e:	001a      	movs	r2, r3
   2ef70:	68fb      	ldr	r3, [r7, #12]
   2ef72:	1ad3      	subs	r3, r2, r3
   2ef74:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
   2ef76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2ef78:	0018      	movs	r0, r3
   2ef7a:	46bd      	mov	sp, r7
   2ef7c:	b00b      	add	sp, #44	; 0x2c
   2ef7e:	bd90      	pop	{r4, r7, pc}
   2ef80:	0002ec61 	.word	0x0002ec61
   2ef84:	0002f3f5 	.word	0x0002f3f5
   2ef88:	0002f517 	.word	0x0002f517
   2ef8c:	0002f2fd 	.word	0x0002f2fd
   2ef90:	000396d8 	.word	0x000396d8
   2ef94:	0002f599 	.word	0x0002f599
   2ef98:	000396e0 	.word	0x000396e0
   2ef9c:	0002f541 	.word	0x0002f541
   2efa0:	0002f5e9 	.word	0x0002f5e9

0002efa4 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   2efa4:	b580      	push	{r7, lr}
   2efa6:	b08a      	sub	sp, #40	; 0x28
   2efa8:	af00      	add	r7, sp, #0
   2efaa:	60f8      	str	r0, [r7, #12]
   2efac:	60b9      	str	r1, [r7, #8]
   2efae:	607a      	str	r2, [r7, #4]
   2efb0:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2efb2:	2300      	movs	r3, #0
   2efb4:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2efb6:	687b      	ldr	r3, [r7, #4]
   2efb8:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2efba:	2300      	movs	r3, #0
   2efbc:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2efbe:	2300      	movs	r3, #0
   2efc0:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
   2efc2:	2300      	movs	r3, #0
   2efc4:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2efc6:	2318      	movs	r3, #24
   2efc8:	18fb      	adds	r3, r7, r3
   2efca:	0018      	movs	r0, r3
   2efcc:	4b25      	ldr	r3, [pc, #148]	; (2f064 <MQTTDeserialize_connack+0xc0>)
   2efce:	4798      	blx	r3
   2efd0:	0003      	movs	r3, r0
   2efd2:	001a      	movs	r2, r3
   2efd4:	231c      	movs	r3, #28
   2efd6:	18fb      	adds	r3, r7, r3
   2efd8:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != CONNACK)
   2efda:	231c      	movs	r3, #28
   2efdc:	18fb      	adds	r3, r7, r3
   2efde:	781b      	ldrb	r3, [r3, #0]
   2efe0:	220f      	movs	r2, #15
   2efe2:	4393      	bics	r3, r2
   2efe4:	b2db      	uxtb	r3, r3
   2efe6:	2b20      	cmp	r3, #32
   2efe8:	d134      	bne.n	2f054 <MQTTDeserialize_connack+0xb0>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2efea:	69bb      	ldr	r3, [r7, #24]
   2efec:	2214      	movs	r2, #20
   2efee:	18ba      	adds	r2, r7, r2
   2eff0:	0011      	movs	r1, r2
   2eff2:	0018      	movs	r0, r3
   2eff4:	4b1c      	ldr	r3, [pc, #112]	; (2f068 <MQTTDeserialize_connack+0xc4>)
   2eff6:	4798      	blx	r3
   2eff8:	0003      	movs	r3, r0
   2effa:	627b      	str	r3, [r7, #36]	; 0x24
   2effc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2effe:	69bb      	ldr	r3, [r7, #24]
   2f000:	189b      	adds	r3, r3, r2
   2f002:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2f004:	69bb      	ldr	r3, [r7, #24]
   2f006:	697a      	ldr	r2, [r7, #20]
   2f008:	189b      	adds	r3, r3, r2
   2f00a:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   2f00c:	6a3b      	ldr	r3, [r7, #32]
   2f00e:	69ba      	ldr	r2, [r7, #24]
   2f010:	1a9b      	subs	r3, r3, r2
   2f012:	2b01      	cmp	r3, #1
   2f014:	dd20      	ble.n	2f058 <MQTTDeserialize_connack+0xb4>
		goto exit;

	flags.all = readChar(&curdata);
   2f016:	2318      	movs	r3, #24
   2f018:	18fb      	adds	r3, r7, r3
   2f01a:	0018      	movs	r0, r3
   2f01c:	4b11      	ldr	r3, [pc, #68]	; (2f064 <MQTTDeserialize_connack+0xc0>)
   2f01e:	4798      	blx	r3
   2f020:	0003      	movs	r3, r0
   2f022:	001a      	movs	r2, r3
   2f024:	2310      	movs	r3, #16
   2f026:	18fb      	adds	r3, r7, r3
   2f028:	701a      	strb	r2, [r3, #0]
	*sessionPresent = flags.bits.sessionpresent;
   2f02a:	2310      	movs	r3, #16
   2f02c:	18fb      	adds	r3, r7, r3
   2f02e:	781b      	ldrb	r3, [r3, #0]
   2f030:	061b      	lsls	r3, r3, #24
   2f032:	0fdb      	lsrs	r3, r3, #31
   2f034:	b2db      	uxtb	r3, r3
   2f036:	001a      	movs	r2, r3
   2f038:	68fb      	ldr	r3, [r7, #12]
   2f03a:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
   2f03c:	2318      	movs	r3, #24
   2f03e:	18fb      	adds	r3, r7, r3
   2f040:	0018      	movs	r0, r3
   2f042:	4b08      	ldr	r3, [pc, #32]	; (2f064 <MQTTDeserialize_connack+0xc0>)
   2f044:	4798      	blx	r3
   2f046:	0003      	movs	r3, r0
   2f048:	001a      	movs	r2, r3
   2f04a:	68bb      	ldr	r3, [r7, #8]
   2f04c:	701a      	strb	r2, [r3, #0]

	rc = 1;
   2f04e:	2301      	movs	r3, #1
   2f050:	627b      	str	r3, [r7, #36]	; 0x24
   2f052:	e002      	b.n	2f05a <MQTTDeserialize_connack+0xb6>
		goto exit;
   2f054:	46c0      	nop			; (mov r8, r8)
   2f056:	e000      	b.n	2f05a <MQTTDeserialize_connack+0xb6>
		goto exit;
   2f058:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2f05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2f05c:	0018      	movs	r0, r3
   2f05e:	46bd      	mov	sp, r7
   2f060:	b00a      	add	sp, #40	; 0x28
   2f062:	bd80      	pop	{r7, pc}
   2f064:	0002f4eb 	.word	0x0002f4eb
   2f068:	0002f485 	.word	0x0002f485

0002f06c <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   2f06c:	b580      	push	{r7, lr}
   2f06e:	b088      	sub	sp, #32
   2f070:	af00      	add	r7, sp, #0
   2f072:	60f8      	str	r0, [r7, #12]
   2f074:	60b9      	str	r1, [r7, #8]
   2f076:	1dfb      	adds	r3, r7, #7
   2f078:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   2f07a:	2300      	movs	r3, #0
   2f07c:	61bb      	str	r3, [r7, #24]
	int rc = -1;
   2f07e:	2301      	movs	r3, #1
   2f080:	425b      	negs	r3, r3
   2f082:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   2f084:	68fb      	ldr	r3, [r7, #12]
   2f086:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
   2f088:	68bb      	ldr	r3, [r7, #8]
   2f08a:	2b01      	cmp	r3, #1
   2f08c:	dc03      	bgt.n	2f096 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2f08e:	2302      	movs	r3, #2
   2f090:	425b      	negs	r3, r3
   2f092:	61fb      	str	r3, [r7, #28]
		goto exit;
   2f094:	e029      	b.n	2f0ea <MQTTSerialize_zero+0x7e>
	}
	header.byte = 0;
   2f096:	2318      	movs	r3, #24
   2f098:	18fb      	adds	r3, r7, r3
   2f09a:	2200      	movs	r2, #0
   2f09c:	701a      	strb	r2, [r3, #0]
	header.bits.type = packettype;
   2f09e:	1dfb      	adds	r3, r7, #7
   2f0a0:	781b      	ldrb	r3, [r3, #0]
   2f0a2:	220f      	movs	r2, #15
   2f0a4:	4013      	ands	r3, r2
   2f0a6:	b2da      	uxtb	r2, r3
   2f0a8:	2318      	movs	r3, #24
   2f0aa:	18fb      	adds	r3, r7, r3
   2f0ac:	0110      	lsls	r0, r2, #4
   2f0ae:	781a      	ldrb	r2, [r3, #0]
   2f0b0:	210f      	movs	r1, #15
   2f0b2:	400a      	ands	r2, r1
   2f0b4:	1c11      	adds	r1, r2, #0
   2f0b6:	1c02      	adds	r2, r0, #0
   2f0b8:	430a      	orrs	r2, r1
   2f0ba:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2f0bc:	2318      	movs	r3, #24
   2f0be:	18fb      	adds	r3, r7, r3
   2f0c0:	781a      	ldrb	r2, [r3, #0]
   2f0c2:	2314      	movs	r3, #20
   2f0c4:	18fb      	adds	r3, r7, r3
   2f0c6:	0011      	movs	r1, r2
   2f0c8:	0018      	movs	r0, r3
   2f0ca:	4b0a      	ldr	r3, [pc, #40]	; (2f0f4 <MQTTSerialize_zero+0x88>)
   2f0cc:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   2f0ce:	697b      	ldr	r3, [r7, #20]
   2f0d0:	2100      	movs	r1, #0
   2f0d2:	0018      	movs	r0, r3
   2f0d4:	4b08      	ldr	r3, [pc, #32]	; (2f0f8 <MQTTSerialize_zero+0x8c>)
   2f0d6:	4798      	blx	r3
   2f0d8:	0002      	movs	r2, r0
   2f0da:	697b      	ldr	r3, [r7, #20]
   2f0dc:	189b      	adds	r3, r3, r2
   2f0de:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
   2f0e0:	697b      	ldr	r3, [r7, #20]
   2f0e2:	001a      	movs	r2, r3
   2f0e4:	68fb      	ldr	r3, [r7, #12]
   2f0e6:	1ad3      	subs	r3, r2, r3
   2f0e8:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2f0ea:	69fb      	ldr	r3, [r7, #28]
}
   2f0ec:	0018      	movs	r0, r3
   2f0ee:	46bd      	mov	sp, r7
   2f0f0:	b008      	add	sp, #32
   2f0f2:	bd80      	pop	{r7, pc}
   2f0f4:	0002f517 	.word	0x0002f517
   2f0f8:	0002f2fd 	.word	0x0002f2fd

0002f0fc <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
   2f0fc:	b580      	push	{r7, lr}
   2f0fe:	b082      	sub	sp, #8
   2f100:	af00      	add	r7, sp, #0
   2f102:	6078      	str	r0, [r7, #4]
   2f104:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
   2f106:	6839      	ldr	r1, [r7, #0]
   2f108:	687b      	ldr	r3, [r7, #4]
   2f10a:	220e      	movs	r2, #14
   2f10c:	0018      	movs	r0, r3
   2f10e:	4b03      	ldr	r3, [pc, #12]	; (2f11c <MQTTSerialize_disconnect+0x20>)
   2f110:	4798      	blx	r3
   2f112:	0003      	movs	r3, r0
}
   2f114:	0018      	movs	r0, r3
   2f116:	46bd      	mov	sp, r7
   2f118:	b002      	add	sp, #8
   2f11a:	bd80      	pop	{r7, pc}
   2f11c:	0002f06d 	.word	0x0002f06d

0002f120 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   2f120:	b580      	push	{r7, lr}
   2f122:	b082      	sub	sp, #8
   2f124:	af00      	add	r7, sp, #0
   2f126:	6078      	str	r0, [r7, #4]
   2f128:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   2f12a:	6839      	ldr	r1, [r7, #0]
   2f12c:	687b      	ldr	r3, [r7, #4]
   2f12e:	220c      	movs	r2, #12
   2f130:	0018      	movs	r0, r3
   2f132:	4b03      	ldr	r3, [pc, #12]	; (2f140 <MQTTSerialize_pingreq+0x20>)
   2f134:	4798      	blx	r3
   2f136:	0003      	movs	r3, r0
}
   2f138:	0018      	movs	r0, r3
   2f13a:	46bd      	mov	sp, r7
   2f13c:	b002      	add	sp, #8
   2f13e:	bd80      	pop	{r7, pc}
   2f140:	0002f06d 	.word	0x0002f06d

0002f144 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   2f144:	b580      	push	{r7, lr}
   2f146:	b08a      	sub	sp, #40	; 0x28
   2f148:	af00      	add	r7, sp, #0
   2f14a:	60f8      	str	r0, [r7, #12]
   2f14c:	60b9      	str	r1, [r7, #8]
   2f14e:	607a      	str	r2, [r7, #4]
   2f150:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2f152:	2300      	movs	r3, #0
   2f154:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2f156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2f158:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2f15a:	2300      	movs	r3, #0
   2f15c:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2f15e:	2300      	movs	r3, #0
   2f160:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
   2f162:	2300      	movs	r3, #0
   2f164:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2f166:	2318      	movs	r3, #24
   2f168:	18fb      	adds	r3, r7, r3
   2f16a:	0018      	movs	r0, r3
   2f16c:	4b32      	ldr	r3, [pc, #200]	; (2f238 <MQTTDeserialize_publish+0xf4>)
   2f16e:	4798      	blx	r3
   2f170:	0003      	movs	r3, r0
   2f172:	001a      	movs	r2, r3
   2f174:	231c      	movs	r3, #28
   2f176:	18fb      	adds	r3, r7, r3
   2f178:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != PUBLISH)
   2f17a:	231c      	movs	r3, #28
   2f17c:	18fb      	adds	r3, r7, r3
   2f17e:	781b      	ldrb	r3, [r3, #0]
   2f180:	220f      	movs	r2, #15
   2f182:	4393      	bics	r3, r2
   2f184:	b2db      	uxtb	r3, r3
   2f186:	2b30      	cmp	r3, #48	; 0x30
   2f188:	d150      	bne.n	2f22c <MQTTDeserialize_publish+0xe8>
		goto exit;
	*dup = header.bits.dup;
   2f18a:	231c      	movs	r3, #28
   2f18c:	18fb      	adds	r3, r7, r3
   2f18e:	781b      	ldrb	r3, [r3, #0]
   2f190:	071b      	lsls	r3, r3, #28
   2f192:	0fdb      	lsrs	r3, r3, #31
   2f194:	b2db      	uxtb	r3, r3
   2f196:	001a      	movs	r2, r3
   2f198:	68fb      	ldr	r3, [r7, #12]
   2f19a:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
   2f19c:	231c      	movs	r3, #28
   2f19e:	18fb      	adds	r3, r7, r3
   2f1a0:	781b      	ldrb	r3, [r3, #0]
   2f1a2:	075b      	lsls	r3, r3, #29
   2f1a4:	0f9b      	lsrs	r3, r3, #30
   2f1a6:	b2db      	uxtb	r3, r3
   2f1a8:	001a      	movs	r2, r3
   2f1aa:	68bb      	ldr	r3, [r7, #8]
   2f1ac:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
   2f1ae:	231c      	movs	r3, #28
   2f1b0:	18fb      	adds	r3, r7, r3
   2f1b2:	781b      	ldrb	r3, [r3, #0]
   2f1b4:	07db      	lsls	r3, r3, #31
   2f1b6:	0fdb      	lsrs	r3, r3, #31
   2f1b8:	b2db      	uxtb	r3, r3
   2f1ba:	001a      	movs	r2, r3
   2f1bc:	687b      	ldr	r3, [r7, #4]
   2f1be:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2f1c0:	69bb      	ldr	r3, [r7, #24]
   2f1c2:	2214      	movs	r2, #20
   2f1c4:	18ba      	adds	r2, r7, r2
   2f1c6:	0011      	movs	r1, r2
   2f1c8:	0018      	movs	r0, r3
   2f1ca:	4b1c      	ldr	r3, [pc, #112]	; (2f23c <MQTTDeserialize_publish+0xf8>)
   2f1cc:	4798      	blx	r3
   2f1ce:	0003      	movs	r3, r0
   2f1d0:	627b      	str	r3, [r7, #36]	; 0x24
   2f1d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2f1d4:	69bb      	ldr	r3, [r7, #24]
   2f1d6:	189b      	adds	r3, r3, r2
   2f1d8:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2f1da:	69bb      	ldr	r3, [r7, #24]
   2f1dc:	697a      	ldr	r2, [r7, #20]
   2f1de:	189b      	adds	r3, r3, r2
   2f1e0:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   2f1e2:	6a3a      	ldr	r2, [r7, #32]
   2f1e4:	2318      	movs	r3, #24
   2f1e6:	18f9      	adds	r1, r7, r3
   2f1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f1ea:	0018      	movs	r0, r3
   2f1ec:	4b14      	ldr	r3, [pc, #80]	; (2f240 <MQTTDeserialize_publish+0xfc>)
   2f1ee:	4798      	blx	r3
   2f1f0:	1e03      	subs	r3, r0, #0
   2f1f2:	d01c      	beq.n	2f22e <MQTTDeserialize_publish+0xea>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   2f1f4:	6a3b      	ldr	r3, [r7, #32]
   2f1f6:	69ba      	ldr	r2, [r7, #24]
   2f1f8:	1a9b      	subs	r3, r3, r2
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   2f1fa:	d418      	bmi.n	2f22e <MQTTDeserialize_publish+0xea>
		goto exit;

	if (*qos > 0)
   2f1fc:	68bb      	ldr	r3, [r7, #8]
   2f1fe:	681b      	ldr	r3, [r3, #0]
   2f200:	2b00      	cmp	r3, #0
   2f202:	dd08      	ble.n	2f216 <MQTTDeserialize_publish+0xd2>
		*packetid = readInt(&curdata);
   2f204:	2318      	movs	r3, #24
   2f206:	18fb      	adds	r3, r7, r3
   2f208:	0018      	movs	r0, r3
   2f20a:	4b0e      	ldr	r3, [pc, #56]	; (2f244 <MQTTDeserialize_publish+0x100>)
   2f20c:	4798      	blx	r3
   2f20e:	0003      	movs	r3, r0
   2f210:	b29a      	uxth	r2, r3
   2f212:	683b      	ldr	r3, [r7, #0]
   2f214:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
   2f216:	6a3b      	ldr	r3, [r7, #32]
   2f218:	69ba      	ldr	r2, [r7, #24]
   2f21a:	1a9a      	subs	r2, r3, r2
   2f21c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2f21e:	601a      	str	r2, [r3, #0]
	*payload = curdata;
   2f220:	69ba      	ldr	r2, [r7, #24]
   2f222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2f224:	601a      	str	r2, [r3, #0]
	rc = 1;
   2f226:	2301      	movs	r3, #1
   2f228:	627b      	str	r3, [r7, #36]	; 0x24
   2f22a:	e000      	b.n	2f22e <MQTTDeserialize_publish+0xea>
		goto exit;
   2f22c:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2f22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2f230:	0018      	movs	r0, r3
   2f232:	46bd      	mov	sp, r7
   2f234:	b00a      	add	sp, #40	; 0x28
   2f236:	bd80      	pop	{r7, pc}
   2f238:	0002f4eb 	.word	0x0002f4eb
   2f23c:	0002f485 	.word	0x0002f485
   2f240:	0002f669 	.word	0x0002f669
   2f244:	0002f4b9 	.word	0x0002f4b9

0002f248 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   2f248:	b580      	push	{r7, lr}
   2f24a:	b08a      	sub	sp, #40	; 0x28
   2f24c:	af00      	add	r7, sp, #0
   2f24e:	60f8      	str	r0, [r7, #12]
   2f250:	60b9      	str	r1, [r7, #8]
   2f252:	607a      	str	r2, [r7, #4]
   2f254:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2f256:	2300      	movs	r3, #0
   2f258:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2f25a:	683b      	ldr	r3, [r7, #0]
   2f25c:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2f25e:	2300      	movs	r3, #0
   2f260:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2f262:	2300      	movs	r3, #0
   2f264:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2f266:	2318      	movs	r3, #24
   2f268:	18fb      	adds	r3, r7, r3
   2f26a:	0018      	movs	r0, r3
   2f26c:	4b20      	ldr	r3, [pc, #128]	; (2f2f0 <MQTTDeserialize_ack+0xa8>)
   2f26e:	4798      	blx	r3
   2f270:	0003      	movs	r3, r0
   2f272:	001a      	movs	r2, r3
   2f274:	231c      	movs	r3, #28
   2f276:	18fb      	adds	r3, r7, r3
   2f278:	701a      	strb	r2, [r3, #0]
	*dup = header.bits.dup;
   2f27a:	231c      	movs	r3, #28
   2f27c:	18fb      	adds	r3, r7, r3
   2f27e:	781b      	ldrb	r3, [r3, #0]
   2f280:	071b      	lsls	r3, r3, #28
   2f282:	0fdb      	lsrs	r3, r3, #31
   2f284:	b2db      	uxtb	r3, r3
   2f286:	001a      	movs	r2, r3
   2f288:	68bb      	ldr	r3, [r7, #8]
   2f28a:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
   2f28c:	231c      	movs	r3, #28
   2f28e:	18fb      	adds	r3, r7, r3
   2f290:	781b      	ldrb	r3, [r3, #0]
   2f292:	061b      	lsls	r3, r3, #24
   2f294:	0f1b      	lsrs	r3, r3, #28
   2f296:	b2db      	uxtb	r3, r3
   2f298:	001a      	movs	r2, r3
   2f29a:	68fb      	ldr	r3, [r7, #12]
   2f29c:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2f29e:	69bb      	ldr	r3, [r7, #24]
   2f2a0:	2214      	movs	r2, #20
   2f2a2:	18ba      	adds	r2, r7, r2
   2f2a4:	0011      	movs	r1, r2
   2f2a6:	0018      	movs	r0, r3
   2f2a8:	4b12      	ldr	r3, [pc, #72]	; (2f2f4 <MQTTDeserialize_ack+0xac>)
   2f2aa:	4798      	blx	r3
   2f2ac:	0003      	movs	r3, r0
   2f2ae:	627b      	str	r3, [r7, #36]	; 0x24
   2f2b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2f2b2:	69bb      	ldr	r3, [r7, #24]
   2f2b4:	189b      	adds	r3, r3, r2
   2f2b6:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2f2b8:	69bb      	ldr	r3, [r7, #24]
   2f2ba:	697a      	ldr	r2, [r7, #20]
   2f2bc:	189b      	adds	r3, r3, r2
   2f2be:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
   2f2c0:	6a3b      	ldr	r3, [r7, #32]
   2f2c2:	69ba      	ldr	r2, [r7, #24]
   2f2c4:	1a9b      	subs	r3, r3, r2
   2f2c6:	2b01      	cmp	r3, #1
   2f2c8:	dd0b      	ble.n	2f2e2 <MQTTDeserialize_ack+0x9a>
		goto exit;
	*packetid = readInt(&curdata);
   2f2ca:	2318      	movs	r3, #24
   2f2cc:	18fb      	adds	r3, r7, r3
   2f2ce:	0018      	movs	r0, r3
   2f2d0:	4b09      	ldr	r3, [pc, #36]	; (2f2f8 <MQTTDeserialize_ack+0xb0>)
   2f2d2:	4798      	blx	r3
   2f2d4:	0003      	movs	r3, r0
   2f2d6:	b29a      	uxth	r2, r3
   2f2d8:	687b      	ldr	r3, [r7, #4]
   2f2da:	801a      	strh	r2, [r3, #0]

	rc = 1;
   2f2dc:	2301      	movs	r3, #1
   2f2de:	627b      	str	r3, [r7, #36]	; 0x24
   2f2e0:	e000      	b.n	2f2e4 <MQTTDeserialize_ack+0x9c>
		goto exit;
   2f2e2:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2f2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2f2e6:	0018      	movs	r0, r3
   2f2e8:	46bd      	mov	sp, r7
   2f2ea:	b00a      	add	sp, #40	; 0x28
   2f2ec:	bd80      	pop	{r7, pc}
   2f2ee:	46c0      	nop			; (mov r8, r8)
   2f2f0:	0002f4eb 	.word	0x0002f4eb
   2f2f4:	0002f485 	.word	0x0002f485
   2f2f8:	0002f4b9 	.word	0x0002f4b9

0002f2fc <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
   2f2fc:	b580      	push	{r7, lr}
   2f2fe:	b084      	sub	sp, #16
   2f300:	af00      	add	r7, sp, #0
   2f302:	6078      	str	r0, [r7, #4]
   2f304:	6039      	str	r1, [r7, #0]
	int rc = 0;
   2f306:	2300      	movs	r3, #0
   2f308:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
   2f30a:	683b      	ldr	r3, [r7, #0]
   2f30c:	4a17      	ldr	r2, [pc, #92]	; (2f36c <MQTTPacket_encode+0x70>)
   2f30e:	4013      	ands	r3, r2
   2f310:	d504      	bpl.n	2f31c <MQTTPacket_encode+0x20>
   2f312:	3b01      	subs	r3, #1
   2f314:	2280      	movs	r2, #128	; 0x80
   2f316:	4252      	negs	r2, r2
   2f318:	4313      	orrs	r3, r2
   2f31a:	3301      	adds	r3, #1
   2f31c:	001a      	movs	r2, r3
   2f31e:	230b      	movs	r3, #11
   2f320:	18fb      	adds	r3, r7, r3
   2f322:	701a      	strb	r2, [r3, #0]
		length /= 128;
   2f324:	683b      	ldr	r3, [r7, #0]
   2f326:	2b00      	cmp	r3, #0
   2f328:	da00      	bge.n	2f32c <MQTTPacket_encode+0x30>
   2f32a:	337f      	adds	r3, #127	; 0x7f
   2f32c:	11db      	asrs	r3, r3, #7
   2f32e:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
   2f330:	683b      	ldr	r3, [r7, #0]
   2f332:	2b00      	cmp	r3, #0
   2f334:	dd08      	ble.n	2f348 <MQTTPacket_encode+0x4c>
			d |= 0x80;
   2f336:	230b      	movs	r3, #11
   2f338:	18fb      	adds	r3, r7, r3
   2f33a:	220b      	movs	r2, #11
   2f33c:	18ba      	adds	r2, r7, r2
   2f33e:	7812      	ldrb	r2, [r2, #0]
   2f340:	2180      	movs	r1, #128	; 0x80
   2f342:	4249      	negs	r1, r1
   2f344:	430a      	orrs	r2, r1
   2f346:	701a      	strb	r2, [r3, #0]
		buf[rc++] = d;
   2f348:	68fb      	ldr	r3, [r7, #12]
   2f34a:	1c5a      	adds	r2, r3, #1
   2f34c:	60fa      	str	r2, [r7, #12]
   2f34e:	001a      	movs	r2, r3
   2f350:	687b      	ldr	r3, [r7, #4]
   2f352:	189b      	adds	r3, r3, r2
   2f354:	220b      	movs	r2, #11
   2f356:	18ba      	adds	r2, r7, r2
   2f358:	7812      	ldrb	r2, [r2, #0]
   2f35a:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
   2f35c:	683b      	ldr	r3, [r7, #0]
   2f35e:	2b00      	cmp	r3, #0
   2f360:	dcd3      	bgt.n	2f30a <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
   2f362:	68fb      	ldr	r3, [r7, #12]
}
   2f364:	0018      	movs	r0, r3
   2f366:	46bd      	mov	sp, r7
   2f368:	b004      	add	sp, #16
   2f36a:	bd80      	pop	{r7, pc}
   2f36c:	8000007f 	.word	0x8000007f

0002f370 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
   2f370:	b580      	push	{r7, lr}
   2f372:	b086      	sub	sp, #24
   2f374:	af00      	add	r7, sp, #0
   2f376:	6078      	str	r0, [r7, #4]
   2f378:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
   2f37a:	2301      	movs	r3, #1
   2f37c:	617b      	str	r3, [r7, #20]
	int len = 0;
   2f37e:	2300      	movs	r3, #0
   2f380:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
   2f382:	683b      	ldr	r3, [r7, #0]
   2f384:	2200      	movs	r2, #0
   2f386:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
   2f388:	2301      	movs	r3, #1
   2f38a:	425b      	negs	r3, r3
   2f38c:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   2f38e:	693b      	ldr	r3, [r7, #16]
   2f390:	3301      	adds	r3, #1
   2f392:	613b      	str	r3, [r7, #16]
   2f394:	693b      	ldr	r3, [r7, #16]
   2f396:	2b04      	cmp	r3, #4
   2f398:	dd03      	ble.n	2f3a2 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
   2f39a:	2301      	movs	r3, #1
   2f39c:	425b      	negs	r3, r3
   2f39e:	60fb      	str	r3, [r7, #12]
			goto exit;
   2f3a0:	e022      	b.n	2f3e8 <MQTTPacket_decode+0x78>
		}
		rc = (*getcharfn)(&c, 1);
   2f3a2:	230b      	movs	r3, #11
   2f3a4:	18fa      	adds	r2, r7, r3
   2f3a6:	687b      	ldr	r3, [r7, #4]
   2f3a8:	2101      	movs	r1, #1
   2f3aa:	0010      	movs	r0, r2
   2f3ac:	4798      	blx	r3
   2f3ae:	0003      	movs	r3, r0
   2f3b0:	60fb      	str	r3, [r7, #12]
		if (rc != 1)
   2f3b2:	68fb      	ldr	r3, [r7, #12]
   2f3b4:	2b01      	cmp	r3, #1
   2f3b6:	d116      	bne.n	2f3e6 <MQTTPacket_decode+0x76>
			goto exit;
		*value += (c & 127) * multiplier;
   2f3b8:	683b      	ldr	r3, [r7, #0]
   2f3ba:	681a      	ldr	r2, [r3, #0]
   2f3bc:	230b      	movs	r3, #11
   2f3be:	18fb      	adds	r3, r7, r3
   2f3c0:	781b      	ldrb	r3, [r3, #0]
   2f3c2:	0019      	movs	r1, r3
   2f3c4:	237f      	movs	r3, #127	; 0x7f
   2f3c6:	400b      	ands	r3, r1
   2f3c8:	6979      	ldr	r1, [r7, #20]
   2f3ca:	434b      	muls	r3, r1
   2f3cc:	18d2      	adds	r2, r2, r3
   2f3ce:	683b      	ldr	r3, [r7, #0]
   2f3d0:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
   2f3d2:	697b      	ldr	r3, [r7, #20]
   2f3d4:	01db      	lsls	r3, r3, #7
   2f3d6:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
   2f3d8:	230b      	movs	r3, #11
   2f3da:	18fb      	adds	r3, r7, r3
   2f3dc:	781b      	ldrb	r3, [r3, #0]
   2f3de:	b25b      	sxtb	r3, r3
   2f3e0:	2b00      	cmp	r3, #0
   2f3e2:	dbd1      	blt.n	2f388 <MQTTPacket_decode+0x18>
   2f3e4:	e000      	b.n	2f3e8 <MQTTPacket_decode+0x78>
			goto exit;
   2f3e6:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(len);
	return len;
   2f3e8:	693b      	ldr	r3, [r7, #16]
}
   2f3ea:	0018      	movs	r0, r3
   2f3ec:	46bd      	mov	sp, r7
   2f3ee:	b006      	add	sp, #24
   2f3f0:	bd80      	pop	{r7, pc}
	...

0002f3f4 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
   2f3f4:	b580      	push	{r7, lr}
   2f3f6:	b082      	sub	sp, #8
   2f3f8:	af00      	add	r7, sp, #0
   2f3fa:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
   2f3fc:	687b      	ldr	r3, [r7, #4]
   2f3fe:	3301      	adds	r3, #1
   2f400:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
   2f402:	687b      	ldr	r3, [r7, #4]
   2f404:	2b7f      	cmp	r3, #127	; 0x7f
   2f406:	dc03      	bgt.n	2f410 <MQTTPacket_len+0x1c>
		rem_len += 1;
   2f408:	687b      	ldr	r3, [r7, #4]
   2f40a:	3301      	adds	r3, #1
   2f40c:	607b      	str	r3, [r7, #4]
   2f40e:	e012      	b.n	2f436 <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
   2f410:	687b      	ldr	r3, [r7, #4]
   2f412:	4a0b      	ldr	r2, [pc, #44]	; (2f440 <MQTTPacket_len+0x4c>)
   2f414:	4293      	cmp	r3, r2
   2f416:	dc03      	bgt.n	2f420 <MQTTPacket_len+0x2c>
		rem_len += 2;
   2f418:	687b      	ldr	r3, [r7, #4]
   2f41a:	3302      	adds	r3, #2
   2f41c:	607b      	str	r3, [r7, #4]
   2f41e:	e00a      	b.n	2f436 <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
   2f420:	687b      	ldr	r3, [r7, #4]
   2f422:	4a08      	ldr	r2, [pc, #32]	; (2f444 <MQTTPacket_len+0x50>)
   2f424:	4293      	cmp	r3, r2
   2f426:	dc03      	bgt.n	2f430 <MQTTPacket_len+0x3c>
		rem_len += 3;
   2f428:	687b      	ldr	r3, [r7, #4]
   2f42a:	3303      	adds	r3, #3
   2f42c:	607b      	str	r3, [r7, #4]
   2f42e:	e002      	b.n	2f436 <MQTTPacket_len+0x42>
	else
		rem_len += 4;
   2f430:	687b      	ldr	r3, [r7, #4]
   2f432:	3304      	adds	r3, #4
   2f434:	607b      	str	r3, [r7, #4]
	return rem_len;
   2f436:	687b      	ldr	r3, [r7, #4]
}
   2f438:	0018      	movs	r0, r3
   2f43a:	46bd      	mov	sp, r7
   2f43c:	b002      	add	sp, #8
   2f43e:	bd80      	pop	{r7, pc}
   2f440:	00003fff 	.word	0x00003fff
   2f444:	001ffffe 	.word	0x001ffffe

0002f448 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   2f448:	b580      	push	{r7, lr}
   2f44a:	b084      	sub	sp, #16
   2f44c:	af00      	add	r7, sp, #0
   2f44e:	6078      	str	r0, [r7, #4]
   2f450:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
   2f452:	2300      	movs	r3, #0
   2f454:	60fb      	str	r3, [r7, #12]
   2f456:	e00a      	b.n	2f46e <bufchar+0x26>
		*c = *bufptr++;
   2f458:	4b09      	ldr	r3, [pc, #36]	; (2f480 <bufchar+0x38>)
   2f45a:	681b      	ldr	r3, [r3, #0]
   2f45c:	1c59      	adds	r1, r3, #1
   2f45e:	4a08      	ldr	r2, [pc, #32]	; (2f480 <bufchar+0x38>)
   2f460:	6011      	str	r1, [r2, #0]
   2f462:	781a      	ldrb	r2, [r3, #0]
   2f464:	687b      	ldr	r3, [r7, #4]
   2f466:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
   2f468:	68fb      	ldr	r3, [r7, #12]
   2f46a:	3301      	adds	r3, #1
   2f46c:	60fb      	str	r3, [r7, #12]
   2f46e:	68fa      	ldr	r2, [r7, #12]
   2f470:	683b      	ldr	r3, [r7, #0]
   2f472:	429a      	cmp	r2, r3
   2f474:	dbf0      	blt.n	2f458 <bufchar+0x10>
	return count;
   2f476:	683b      	ldr	r3, [r7, #0]
}
   2f478:	0018      	movs	r0, r3
   2f47a:	46bd      	mov	sp, r7
   2f47c:	b004      	add	sp, #16
   2f47e:	bd80      	pop	{r7, pc}
   2f480:	200046bc 	.word	0x200046bc

0002f484 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   2f484:	b580      	push	{r7, lr}
   2f486:	b082      	sub	sp, #8
   2f488:	af00      	add	r7, sp, #0
   2f48a:	6078      	str	r0, [r7, #4]
   2f48c:	6039      	str	r1, [r7, #0]
	bufptr = buf;
   2f48e:	4b07      	ldr	r3, [pc, #28]	; (2f4ac <MQTTPacket_decodeBuf+0x28>)
   2f490:	687a      	ldr	r2, [r7, #4]
   2f492:	601a      	str	r2, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   2f494:	683a      	ldr	r2, [r7, #0]
   2f496:	4b06      	ldr	r3, [pc, #24]	; (2f4b0 <MQTTPacket_decodeBuf+0x2c>)
   2f498:	0011      	movs	r1, r2
   2f49a:	0018      	movs	r0, r3
   2f49c:	4b05      	ldr	r3, [pc, #20]	; (2f4b4 <MQTTPacket_decodeBuf+0x30>)
   2f49e:	4798      	blx	r3
   2f4a0:	0003      	movs	r3, r0
}
   2f4a2:	0018      	movs	r0, r3
   2f4a4:	46bd      	mov	sp, r7
   2f4a6:	b002      	add	sp, #8
   2f4a8:	bd80      	pop	{r7, pc}
   2f4aa:	46c0      	nop			; (mov r8, r8)
   2f4ac:	200046bc 	.word	0x200046bc
   2f4b0:	0002f449 	.word	0x0002f449
   2f4b4:	0002f371 	.word	0x0002f371

0002f4b8 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   2f4b8:	b580      	push	{r7, lr}
   2f4ba:	b084      	sub	sp, #16
   2f4bc:	af00      	add	r7, sp, #0
   2f4be:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
   2f4c0:	687b      	ldr	r3, [r7, #4]
   2f4c2:	681b      	ldr	r3, [r3, #0]
   2f4c4:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
   2f4c6:	68fb      	ldr	r3, [r7, #12]
   2f4c8:	781b      	ldrb	r3, [r3, #0]
   2f4ca:	021b      	lsls	r3, r3, #8
   2f4cc:	68fa      	ldr	r2, [r7, #12]
   2f4ce:	3201      	adds	r2, #1
   2f4d0:	7812      	ldrb	r2, [r2, #0]
   2f4d2:	189b      	adds	r3, r3, r2
   2f4d4:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
   2f4d6:	687b      	ldr	r3, [r7, #4]
   2f4d8:	681b      	ldr	r3, [r3, #0]
   2f4da:	1c9a      	adds	r2, r3, #2
   2f4dc:	687b      	ldr	r3, [r7, #4]
   2f4de:	601a      	str	r2, [r3, #0]
	return len;
   2f4e0:	68bb      	ldr	r3, [r7, #8]
}
   2f4e2:	0018      	movs	r0, r3
   2f4e4:	46bd      	mov	sp, r7
   2f4e6:	b004      	add	sp, #16
   2f4e8:	bd80      	pop	{r7, pc}

0002f4ea <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   2f4ea:	b580      	push	{r7, lr}
   2f4ec:	b084      	sub	sp, #16
   2f4ee:	af00      	add	r7, sp, #0
   2f4f0:	6078      	str	r0, [r7, #4]
	char c = **pptr;
   2f4f2:	687b      	ldr	r3, [r7, #4]
   2f4f4:	681a      	ldr	r2, [r3, #0]
   2f4f6:	230f      	movs	r3, #15
   2f4f8:	18fb      	adds	r3, r7, r3
   2f4fa:	7812      	ldrb	r2, [r2, #0]
   2f4fc:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   2f4fe:	687b      	ldr	r3, [r7, #4]
   2f500:	681b      	ldr	r3, [r3, #0]
   2f502:	1c5a      	adds	r2, r3, #1
   2f504:	687b      	ldr	r3, [r7, #4]
   2f506:	601a      	str	r2, [r3, #0]
	return c;
   2f508:	230f      	movs	r3, #15
   2f50a:	18fb      	adds	r3, r7, r3
   2f50c:	781b      	ldrb	r3, [r3, #0]
}
   2f50e:	0018      	movs	r0, r3
   2f510:	46bd      	mov	sp, r7
   2f512:	b004      	add	sp, #16
   2f514:	bd80      	pop	{r7, pc}

0002f516 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
   2f516:	b580      	push	{r7, lr}
   2f518:	b082      	sub	sp, #8
   2f51a:	af00      	add	r7, sp, #0
   2f51c:	6078      	str	r0, [r7, #4]
   2f51e:	000a      	movs	r2, r1
   2f520:	1cfb      	adds	r3, r7, #3
   2f522:	701a      	strb	r2, [r3, #0]
	**pptr = c;
   2f524:	687b      	ldr	r3, [r7, #4]
   2f526:	681b      	ldr	r3, [r3, #0]
   2f528:	1cfa      	adds	r2, r7, #3
   2f52a:	7812      	ldrb	r2, [r2, #0]
   2f52c:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   2f52e:	687b      	ldr	r3, [r7, #4]
   2f530:	681b      	ldr	r3, [r3, #0]
   2f532:	1c5a      	adds	r2, r3, #1
   2f534:	687b      	ldr	r3, [r7, #4]
   2f536:	601a      	str	r2, [r3, #0]
}
   2f538:	46c0      	nop			; (mov r8, r8)
   2f53a:	46bd      	mov	sp, r7
   2f53c:	b002      	add	sp, #8
   2f53e:	bd80      	pop	{r7, pc}

0002f540 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   2f540:	b580      	push	{r7, lr}
   2f542:	b082      	sub	sp, #8
   2f544:	af00      	add	r7, sp, #0
   2f546:	6078      	str	r0, [r7, #4]
   2f548:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
   2f54a:	687b      	ldr	r3, [r7, #4]
   2f54c:	681a      	ldr	r2, [r3, #0]
   2f54e:	683b      	ldr	r3, [r7, #0]
   2f550:	2b00      	cmp	r3, #0
   2f552:	da00      	bge.n	2f556 <writeInt+0x16>
   2f554:	33ff      	adds	r3, #255	; 0xff
   2f556:	121b      	asrs	r3, r3, #8
   2f558:	b2db      	uxtb	r3, r3
   2f55a:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   2f55c:	687b      	ldr	r3, [r7, #4]
   2f55e:	681b      	ldr	r3, [r3, #0]
   2f560:	1c5a      	adds	r2, r3, #1
   2f562:	687b      	ldr	r3, [r7, #4]
   2f564:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
   2f566:	687b      	ldr	r3, [r7, #4]
   2f568:	681a      	ldr	r2, [r3, #0]
   2f56a:	683b      	ldr	r3, [r7, #0]
   2f56c:	4908      	ldr	r1, [pc, #32]	; (2f590 <writeInt+0x50>)
   2f56e:	400b      	ands	r3, r1
   2f570:	d503      	bpl.n	2f57a <writeInt+0x3a>
   2f572:	3b01      	subs	r3, #1
   2f574:	4907      	ldr	r1, [pc, #28]	; (2f594 <writeInt+0x54>)
   2f576:	430b      	orrs	r3, r1
   2f578:	3301      	adds	r3, #1
   2f57a:	b2db      	uxtb	r3, r3
   2f57c:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   2f57e:	687b      	ldr	r3, [r7, #4]
   2f580:	681b      	ldr	r3, [r3, #0]
   2f582:	1c5a      	adds	r2, r3, #1
   2f584:	687b      	ldr	r3, [r7, #4]
   2f586:	601a      	str	r2, [r3, #0]
}
   2f588:	46c0      	nop			; (mov r8, r8)
   2f58a:	46bd      	mov	sp, r7
   2f58c:	b002      	add	sp, #8
   2f58e:	bd80      	pop	{r7, pc}
   2f590:	800000ff 	.word	0x800000ff
   2f594:	ffffff00 	.word	0xffffff00

0002f598 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   2f598:	b580      	push	{r7, lr}
   2f59a:	b084      	sub	sp, #16
   2f59c:	af00      	add	r7, sp, #0
   2f59e:	6078      	str	r0, [r7, #4]
   2f5a0:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
   2f5a2:	683b      	ldr	r3, [r7, #0]
   2f5a4:	0018      	movs	r0, r3
   2f5a6:	4b0d      	ldr	r3, [pc, #52]	; (2f5dc <writeCString+0x44>)
   2f5a8:	4798      	blx	r3
   2f5aa:	0003      	movs	r3, r0
   2f5ac:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
   2f5ae:	68fa      	ldr	r2, [r7, #12]
   2f5b0:	687b      	ldr	r3, [r7, #4]
   2f5b2:	0011      	movs	r1, r2
   2f5b4:	0018      	movs	r0, r3
   2f5b6:	4b0a      	ldr	r3, [pc, #40]	; (2f5e0 <writeCString+0x48>)
   2f5b8:	4798      	blx	r3
	memcpy(*pptr, string, len);
   2f5ba:	687b      	ldr	r3, [r7, #4]
   2f5bc:	681b      	ldr	r3, [r3, #0]
   2f5be:	68fa      	ldr	r2, [r7, #12]
   2f5c0:	6839      	ldr	r1, [r7, #0]
   2f5c2:	0018      	movs	r0, r3
   2f5c4:	4b07      	ldr	r3, [pc, #28]	; (2f5e4 <writeCString+0x4c>)
   2f5c6:	4798      	blx	r3
	*pptr += len;
   2f5c8:	687b      	ldr	r3, [r7, #4]
   2f5ca:	681a      	ldr	r2, [r3, #0]
   2f5cc:	68fb      	ldr	r3, [r7, #12]
   2f5ce:	18d2      	adds	r2, r2, r3
   2f5d0:	687b      	ldr	r3, [r7, #4]
   2f5d2:	601a      	str	r2, [r3, #0]
}
   2f5d4:	46c0      	nop			; (mov r8, r8)
   2f5d6:	46bd      	mov	sp, r7
   2f5d8:	b004      	add	sp, #16
   2f5da:	bd80      	pop	{r7, pc}
   2f5dc:	0003497b 	.word	0x0003497b
   2f5e0:	0002f541 	.word	0x0002f541
   2f5e4:	000345a9 	.word	0x000345a9

0002f5e8 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   2f5e8:	b580      	push	{r7, lr}
   2f5ea:	b084      	sub	sp, #16
   2f5ec:	af00      	add	r7, sp, #0
   2f5ee:	60f8      	str	r0, [r7, #12]
   2f5f0:	0038      	movs	r0, r7
   2f5f2:	6001      	str	r1, [r0, #0]
   2f5f4:	6042      	str	r2, [r0, #4]
   2f5f6:	6083      	str	r3, [r0, #8]
	if (mqttstring.lenstring.len > 0)
   2f5f8:	003b      	movs	r3, r7
   2f5fa:	685b      	ldr	r3, [r3, #4]
   2f5fc:	2b00      	cmp	r3, #0
   2f5fe:	dd17      	ble.n	2f630 <writeMQTTString+0x48>
	{
		writeInt(pptr, mqttstring.lenstring.len);
   2f600:	003b      	movs	r3, r7
   2f602:	685a      	ldr	r2, [r3, #4]
   2f604:	68fb      	ldr	r3, [r7, #12]
   2f606:	0011      	movs	r1, r2
   2f608:	0018      	movs	r0, r3
   2f60a:	4b14      	ldr	r3, [pc, #80]	; (2f65c <writeMQTTString+0x74>)
   2f60c:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   2f60e:	68fb      	ldr	r3, [r7, #12]
   2f610:	6818      	ldr	r0, [r3, #0]
   2f612:	003b      	movs	r3, r7
   2f614:	6899      	ldr	r1, [r3, #8]
   2f616:	003b      	movs	r3, r7
   2f618:	685b      	ldr	r3, [r3, #4]
   2f61a:	001a      	movs	r2, r3
   2f61c:	4b10      	ldr	r3, [pc, #64]	; (2f660 <writeMQTTString+0x78>)
   2f61e:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   2f620:	68fb      	ldr	r3, [r7, #12]
   2f622:	681a      	ldr	r2, [r3, #0]
   2f624:	003b      	movs	r3, r7
   2f626:	685b      	ldr	r3, [r3, #4]
   2f628:	18d2      	adds	r2, r2, r3
   2f62a:	68fb      	ldr	r3, [r7, #12]
   2f62c:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
   2f62e:	e010      	b.n	2f652 <writeMQTTString+0x6a>
	else if (mqttstring.cstring)
   2f630:	003b      	movs	r3, r7
   2f632:	681b      	ldr	r3, [r3, #0]
   2f634:	2b00      	cmp	r3, #0
   2f636:	d007      	beq.n	2f648 <writeMQTTString+0x60>
		writeCString(pptr, mqttstring.cstring);
   2f638:	003b      	movs	r3, r7
   2f63a:	681a      	ldr	r2, [r3, #0]
   2f63c:	68fb      	ldr	r3, [r7, #12]
   2f63e:	0011      	movs	r1, r2
   2f640:	0018      	movs	r0, r3
   2f642:	4b08      	ldr	r3, [pc, #32]	; (2f664 <writeMQTTString+0x7c>)
   2f644:	4798      	blx	r3
}
   2f646:	e004      	b.n	2f652 <writeMQTTString+0x6a>
		writeInt(pptr, 0);
   2f648:	68fb      	ldr	r3, [r7, #12]
   2f64a:	2100      	movs	r1, #0
   2f64c:	0018      	movs	r0, r3
   2f64e:	4b03      	ldr	r3, [pc, #12]	; (2f65c <writeMQTTString+0x74>)
   2f650:	4798      	blx	r3
}
   2f652:	46c0      	nop			; (mov r8, r8)
   2f654:	46bd      	mov	sp, r7
   2f656:	b004      	add	sp, #16
   2f658:	bd80      	pop	{r7, pc}
   2f65a:	46c0      	nop			; (mov r8, r8)
   2f65c:	0002f541 	.word	0x0002f541
   2f660:	000345a9 	.word	0x000345a9
   2f664:	0002f599 	.word	0x0002f599

0002f668 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   2f668:	b580      	push	{r7, lr}
   2f66a:	b086      	sub	sp, #24
   2f66c:	af00      	add	r7, sp, #0
   2f66e:	60f8      	str	r0, [r7, #12]
   2f670:	60b9      	str	r1, [r7, #8]
   2f672:	607a      	str	r2, [r7, #4]
	int rc = 0;
   2f674:	2300      	movs	r3, #0
   2f676:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   2f678:	687a      	ldr	r2, [r7, #4]
   2f67a:	68bb      	ldr	r3, [r7, #8]
   2f67c:	681b      	ldr	r3, [r3, #0]
   2f67e:	1ad3      	subs	r3, r2, r3
   2f680:	2b01      	cmp	r3, #1
   2f682:	dd1b      	ble.n	2f6bc <readMQTTLenString+0x54>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   2f684:	68bb      	ldr	r3, [r7, #8]
   2f686:	0018      	movs	r0, r3
   2f688:	4b10      	ldr	r3, [pc, #64]	; (2f6cc <readMQTTLenString+0x64>)
   2f68a:	4798      	blx	r3
   2f68c:	0002      	movs	r2, r0
   2f68e:	68fb      	ldr	r3, [r7, #12]
   2f690:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   2f692:	68bb      	ldr	r3, [r7, #8]
   2f694:	681a      	ldr	r2, [r3, #0]
   2f696:	68fb      	ldr	r3, [r7, #12]
   2f698:	685b      	ldr	r3, [r3, #4]
   2f69a:	18d2      	adds	r2, r2, r3
   2f69c:	687b      	ldr	r3, [r7, #4]
   2f69e:	429a      	cmp	r2, r3
   2f6a0:	d80c      	bhi.n	2f6bc <readMQTTLenString+0x54>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   2f6a2:	68bb      	ldr	r3, [r7, #8]
   2f6a4:	681a      	ldr	r2, [r3, #0]
   2f6a6:	68fb      	ldr	r3, [r7, #12]
   2f6a8:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
   2f6aa:	68bb      	ldr	r3, [r7, #8]
   2f6ac:	681a      	ldr	r2, [r3, #0]
   2f6ae:	68fb      	ldr	r3, [r7, #12]
   2f6b0:	685b      	ldr	r3, [r3, #4]
   2f6b2:	18d2      	adds	r2, r2, r3
   2f6b4:	68bb      	ldr	r3, [r7, #8]
   2f6b6:	601a      	str	r2, [r3, #0]
			rc = 1;
   2f6b8:	2301      	movs	r3, #1
   2f6ba:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
   2f6bc:	68fb      	ldr	r3, [r7, #12]
   2f6be:	2200      	movs	r2, #0
   2f6c0:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
   2f6c2:	697b      	ldr	r3, [r7, #20]
}
   2f6c4:	0018      	movs	r0, r3
   2f6c6:	46bd      	mov	sp, r7
   2f6c8:	b006      	add	sp, #24
   2f6ca:	bd80      	pop	{r7, pc}
   2f6cc:	0002f4b9 	.word	0x0002f4b9

0002f6d0 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   2f6d0:	b580      	push	{r7, lr}
   2f6d2:	b086      	sub	sp, #24
   2f6d4:	af00      	add	r7, sp, #0
   2f6d6:	1d3b      	adds	r3, r7, #4
   2f6d8:	6018      	str	r0, [r3, #0]
   2f6da:	6059      	str	r1, [r3, #4]
   2f6dc:	609a      	str	r2, [r3, #8]
	int rc = 0;
   2f6de:	2300      	movs	r3, #0
   2f6e0:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
   2f6e2:	1d3b      	adds	r3, r7, #4
   2f6e4:	681b      	ldr	r3, [r3, #0]
   2f6e6:	2b00      	cmp	r3, #0
   2f6e8:	d007      	beq.n	2f6fa <MQTTstrlen+0x2a>
		rc = strlen(mqttstring.cstring);
   2f6ea:	1d3b      	adds	r3, r7, #4
   2f6ec:	681b      	ldr	r3, [r3, #0]
   2f6ee:	0018      	movs	r0, r3
   2f6f0:	4b06      	ldr	r3, [pc, #24]	; (2f70c <MQTTstrlen+0x3c>)
   2f6f2:	4798      	blx	r3
   2f6f4:	0003      	movs	r3, r0
   2f6f6:	617b      	str	r3, [r7, #20]
   2f6f8:	e002      	b.n	2f700 <MQTTstrlen+0x30>
	else
		rc = mqttstring.lenstring.len;
   2f6fa:	1d3b      	adds	r3, r7, #4
   2f6fc:	685b      	ldr	r3, [r3, #4]
   2f6fe:	617b      	str	r3, [r7, #20]
	return rc;
   2f700:	697b      	ldr	r3, [r7, #20]
}
   2f702:	0018      	movs	r0, r3
   2f704:	46bd      	mov	sp, r7
   2f706:	b006      	add	sp, #24
   2f708:	bd80      	pop	{r7, pc}
   2f70a:	46c0      	nop			; (mov r8, r8)
   2f70c:	0003497b 	.word	0x0003497b

0002f710 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   2f710:	b580      	push	{r7, lr}
   2f712:	b086      	sub	sp, #24
   2f714:	af00      	add	r7, sp, #0
   2f716:	6078      	str	r0, [r7, #4]
   2f718:	6039      	str	r1, [r7, #0]
	int alen = 0,
   2f71a:	2300      	movs	r3, #0
   2f71c:	617b      	str	r3, [r7, #20]
		blen = 0;
   2f71e:	2300      	movs	r3, #0
   2f720:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
   2f722:	687b      	ldr	r3, [r7, #4]
   2f724:	681b      	ldr	r3, [r3, #0]
   2f726:	2b00      	cmp	r3, #0
   2f728:	d00a      	beq.n	2f740 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
   2f72a:	687b      	ldr	r3, [r7, #4]
   2f72c:	681b      	ldr	r3, [r3, #0]
   2f72e:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
   2f730:	687b      	ldr	r3, [r7, #4]
   2f732:	681b      	ldr	r3, [r3, #0]
   2f734:	0018      	movs	r0, r3
   2f736:	4b12      	ldr	r3, [pc, #72]	; (2f780 <MQTTPacket_equals+0x70>)
   2f738:	4798      	blx	r3
   2f73a:	0003      	movs	r3, r0
   2f73c:	617b      	str	r3, [r7, #20]
   2f73e:	e005      	b.n	2f74c <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
   2f740:	687b      	ldr	r3, [r7, #4]
   2f742:	689b      	ldr	r3, [r3, #8]
   2f744:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
   2f746:	687b      	ldr	r3, [r7, #4]
   2f748:	685b      	ldr	r3, [r3, #4]
   2f74a:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
   2f74c:	683b      	ldr	r3, [r7, #0]
   2f74e:	0018      	movs	r0, r3
   2f750:	4b0b      	ldr	r3, [pc, #44]	; (2f780 <MQTTPacket_equals+0x70>)
   2f752:	4798      	blx	r3
   2f754:	0003      	movs	r3, r0
   2f756:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   2f758:	697a      	ldr	r2, [r7, #20]
   2f75a:	68fb      	ldr	r3, [r7, #12]
   2f75c:	429a      	cmp	r2, r3
   2f75e:	d109      	bne.n	2f774 <MQTTPacket_equals+0x64>
   2f760:	697a      	ldr	r2, [r7, #20]
   2f762:	6839      	ldr	r1, [r7, #0]
   2f764:	693b      	ldr	r3, [r7, #16]
   2f766:	0018      	movs	r0, r3
   2f768:	4b06      	ldr	r3, [pc, #24]	; (2f784 <MQTTPacket_equals+0x74>)
   2f76a:	4798      	blx	r3
   2f76c:	1e03      	subs	r3, r0, #0
   2f76e:	d101      	bne.n	2f774 <MQTTPacket_equals+0x64>
   2f770:	2301      	movs	r3, #1
   2f772:	e000      	b.n	2f776 <MQTTPacket_equals+0x66>
   2f774:	2300      	movs	r3, #0
}
   2f776:	0018      	movs	r0, r3
   2f778:	46bd      	mov	sp, r7
   2f77a:	b006      	add	sp, #24
   2f77c:	bd80      	pop	{r7, pc}
   2f77e:	46c0      	nop			; (mov r8, r8)
   2f780:	0003497b 	.word	0x0003497b
   2f784:	00034989 	.word	0x00034989

0002f788 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   2f788:	b580      	push	{r7, lr}
   2f78a:	b086      	sub	sp, #24
   2f78c:	af00      	add	r7, sp, #0
   2f78e:	60f8      	str	r0, [r7, #12]
   2f790:	0038      	movs	r0, r7
   2f792:	6001      	str	r1, [r0, #0]
   2f794:	6042      	str	r2, [r0, #4]
   2f796:	6083      	str	r3, [r0, #8]
	int len = 0;
   2f798:	2300      	movs	r3, #0
   2f79a:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   2f79c:	003b      	movs	r3, r7
   2f79e:	6818      	ldr	r0, [r3, #0]
   2f7a0:	6859      	ldr	r1, [r3, #4]
   2f7a2:	689a      	ldr	r2, [r3, #8]
   2f7a4:	4b09      	ldr	r3, [pc, #36]	; (2f7cc <MQTTSerialize_publishLength+0x44>)
   2f7a6:	4798      	blx	r3
   2f7a8:	0003      	movs	r3, r0
   2f7aa:	1c9a      	adds	r2, r3, #2
   2f7ac:	6a3b      	ldr	r3, [r7, #32]
   2f7ae:	18d3      	adds	r3, r2, r3
   2f7b0:	697a      	ldr	r2, [r7, #20]
   2f7b2:	18d3      	adds	r3, r2, r3
   2f7b4:	617b      	str	r3, [r7, #20]
	if (qos > 0)
   2f7b6:	68fb      	ldr	r3, [r7, #12]
   2f7b8:	2b00      	cmp	r3, #0
   2f7ba:	dd02      	ble.n	2f7c2 <MQTTSerialize_publishLength+0x3a>
		len += 2; /* packetid */
   2f7bc:	697b      	ldr	r3, [r7, #20]
   2f7be:	3302      	adds	r3, #2
   2f7c0:	617b      	str	r3, [r7, #20]
	return len;
   2f7c2:	697b      	ldr	r3, [r7, #20]
}
   2f7c4:	0018      	movs	r0, r3
   2f7c6:	46bd      	mov	sp, r7
   2f7c8:	b006      	add	sp, #24
   2f7ca:	bd80      	pop	{r7, pc}
   2f7cc:	0002f6d1 	.word	0x0002f6d1

0002f7d0 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   2f7d0:	b590      	push	{r4, r7, lr}
   2f7d2:	b08b      	sub	sp, #44	; 0x2c
   2f7d4:	af02      	add	r7, sp, #8
   2f7d6:	60f8      	str	r0, [r7, #12]
   2f7d8:	60b9      	str	r1, [r7, #8]
   2f7da:	603b      	str	r3, [r7, #0]
   2f7dc:	1dfb      	adds	r3, r7, #7
   2f7de:	701a      	strb	r2, [r3, #0]
	unsigned char *ptr = buf;
   2f7e0:	68fb      	ldr	r3, [r7, #12]
   2f7e2:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
   2f7e4:	2300      	movs	r3, #0
   2f7e6:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
   2f7e8:	2300      	movs	r3, #0
   2f7ea:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   2f7ec:	2300      	movs	r3, #0
   2f7ee:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   2f7f0:	2308      	movs	r3, #8
   2f7f2:	2230      	movs	r2, #48	; 0x30
   2f7f4:	4694      	mov	ip, r2
   2f7f6:	44bc      	add	ip, r7
   2f7f8:	4463      	add	r3, ip
   2f7fa:	6838      	ldr	r0, [r7, #0]
   2f7fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
   2f7fe:	9200      	str	r2, [sp, #0]
   2f800:	6819      	ldr	r1, [r3, #0]
   2f802:	685a      	ldr	r2, [r3, #4]
   2f804:	689b      	ldr	r3, [r3, #8]
   2f806:	4c46      	ldr	r4, [pc, #280]	; (2f920 <MQTTSerialize_publish+0x150>)
   2f808:	47a0      	blx	r4
   2f80a:	0003      	movs	r3, r0
   2f80c:	61bb      	str	r3, [r7, #24]
   2f80e:	69bb      	ldr	r3, [r7, #24]
   2f810:	0018      	movs	r0, r3
   2f812:	4b44      	ldr	r3, [pc, #272]	; (2f924 <MQTTSerialize_publish+0x154>)
   2f814:	4798      	blx	r3
   2f816:	0002      	movs	r2, r0
   2f818:	68bb      	ldr	r3, [r7, #8]
   2f81a:	429a      	cmp	r2, r3
   2f81c:	dd03      	ble.n	2f826 <MQTTSerialize_publish+0x56>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2f81e:	2302      	movs	r3, #2
   2f820:	425b      	negs	r3, r3
   2f822:	61fb      	str	r3, [r7, #28]
		goto exit;
   2f824:	e077      	b.n	2f916 <MQTTSerialize_publish+0x146>
	}

	header.bits.type = PUBLISH;
   2f826:	2310      	movs	r3, #16
   2f828:	18fb      	adds	r3, r7, r3
   2f82a:	781a      	ldrb	r2, [r3, #0]
   2f82c:	210f      	movs	r1, #15
   2f82e:	400a      	ands	r2, r1
   2f830:	1c11      	adds	r1, r2, #0
   2f832:	2230      	movs	r2, #48	; 0x30
   2f834:	430a      	orrs	r2, r1
   2f836:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   2f838:	1dfb      	adds	r3, r7, #7
   2f83a:	781b      	ldrb	r3, [r3, #0]
   2f83c:	2201      	movs	r2, #1
   2f83e:	4013      	ands	r3, r2
   2f840:	b2da      	uxtb	r2, r3
   2f842:	2310      	movs	r3, #16
   2f844:	18fb      	adds	r3, r7, r3
   2f846:	2101      	movs	r1, #1
   2f848:	400a      	ands	r2, r1
   2f84a:	00d0      	lsls	r0, r2, #3
   2f84c:	781a      	ldrb	r2, [r3, #0]
   2f84e:	2108      	movs	r1, #8
   2f850:	438a      	bics	r2, r1
   2f852:	1c11      	adds	r1, r2, #0
   2f854:	1c02      	adds	r2, r0, #0
   2f856:	430a      	orrs	r2, r1
   2f858:	701a      	strb	r2, [r3, #0]
	header.bits.qos = qos;
   2f85a:	683b      	ldr	r3, [r7, #0]
   2f85c:	b2db      	uxtb	r3, r3
   2f85e:	1c1a      	adds	r2, r3, #0
   2f860:	2303      	movs	r3, #3
   2f862:	4013      	ands	r3, r2
   2f864:	b2da      	uxtb	r2, r3
   2f866:	2310      	movs	r3, #16
   2f868:	18fb      	adds	r3, r7, r3
   2f86a:	2103      	movs	r1, #3
   2f86c:	400a      	ands	r2, r1
   2f86e:	1890      	adds	r0, r2, r2
   2f870:	781a      	ldrb	r2, [r3, #0]
   2f872:	2106      	movs	r1, #6
   2f874:	438a      	bics	r2, r1
   2f876:	1c11      	adds	r1, r2, #0
   2f878:	1c02      	adds	r2, r0, #0
   2f87a:	430a      	orrs	r2, r1
   2f87c:	701a      	strb	r2, [r3, #0]
	header.bits.retain = retained;
   2f87e:	2330      	movs	r3, #48	; 0x30
   2f880:	18fb      	adds	r3, r7, r3
   2f882:	781b      	ldrb	r3, [r3, #0]
   2f884:	2201      	movs	r2, #1
   2f886:	4013      	ands	r3, r2
   2f888:	b2da      	uxtb	r2, r3
   2f88a:	2310      	movs	r3, #16
   2f88c:	18fb      	adds	r3, r7, r3
   2f88e:	2101      	movs	r1, #1
   2f890:	400a      	ands	r2, r1
   2f892:	0010      	movs	r0, r2
   2f894:	781a      	ldrb	r2, [r3, #0]
   2f896:	2101      	movs	r1, #1
   2f898:	438a      	bics	r2, r1
   2f89a:	1c11      	adds	r1, r2, #0
   2f89c:	1c02      	adds	r2, r0, #0
   2f89e:	430a      	orrs	r2, r1
   2f8a0:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2f8a2:	2310      	movs	r3, #16
   2f8a4:	18fb      	adds	r3, r7, r3
   2f8a6:	781a      	ldrb	r2, [r3, #0]
   2f8a8:	2314      	movs	r3, #20
   2f8aa:	18fb      	adds	r3, r7, r3
   2f8ac:	0011      	movs	r1, r2
   2f8ae:	0018      	movs	r0, r3
   2f8b0:	4b1d      	ldr	r3, [pc, #116]	; (2f928 <MQTTSerialize_publish+0x158>)
   2f8b2:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   2f8b4:	697b      	ldr	r3, [r7, #20]
   2f8b6:	69ba      	ldr	r2, [r7, #24]
   2f8b8:	0011      	movs	r1, r2
   2f8ba:	0018      	movs	r0, r3
   2f8bc:	4b1b      	ldr	r3, [pc, #108]	; (2f92c <MQTTSerialize_publish+0x15c>)
   2f8be:	4798      	blx	r3
   2f8c0:	0002      	movs	r2, r0
   2f8c2:	697b      	ldr	r3, [r7, #20]
   2f8c4:	189b      	adds	r3, r3, r2
   2f8c6:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
   2f8c8:	2308      	movs	r3, #8
   2f8ca:	2230      	movs	r2, #48	; 0x30
   2f8cc:	4694      	mov	ip, r2
   2f8ce:	44bc      	add	ip, r7
   2f8d0:	4463      	add	r3, ip
   2f8d2:	2214      	movs	r2, #20
   2f8d4:	18b8      	adds	r0, r7, r2
   2f8d6:	6819      	ldr	r1, [r3, #0]
   2f8d8:	685a      	ldr	r2, [r3, #4]
   2f8da:	689b      	ldr	r3, [r3, #8]
   2f8dc:	4c14      	ldr	r4, [pc, #80]	; (2f930 <MQTTSerialize_publish+0x160>)
   2f8de:	47a0      	blx	r4

	if (qos > 0)
   2f8e0:	683b      	ldr	r3, [r7, #0]
   2f8e2:	2b00      	cmp	r3, #0
   2f8e4:	dd08      	ble.n	2f8f8 <MQTTSerialize_publish+0x128>
		writeInt(&ptr, packetid);
   2f8e6:	2334      	movs	r3, #52	; 0x34
   2f8e8:	18fb      	adds	r3, r7, r3
   2f8ea:	881a      	ldrh	r2, [r3, #0]
   2f8ec:	2314      	movs	r3, #20
   2f8ee:	18fb      	adds	r3, r7, r3
   2f8f0:	0011      	movs	r1, r2
   2f8f2:	0018      	movs	r0, r3
   2f8f4:	4b0f      	ldr	r3, [pc, #60]	; (2f934 <MQTTSerialize_publish+0x164>)
   2f8f6:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   2f8f8:	697b      	ldr	r3, [r7, #20]
   2f8fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
   2f8fc:	6c79      	ldr	r1, [r7, #68]	; 0x44
   2f8fe:	0018      	movs	r0, r3
   2f900:	4b0d      	ldr	r3, [pc, #52]	; (2f938 <MQTTSerialize_publish+0x168>)
   2f902:	4798      	blx	r3
	ptr += payloadlen;
   2f904:	697a      	ldr	r2, [r7, #20]
   2f906:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2f908:	18d3      	adds	r3, r2, r3
   2f90a:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
   2f90c:	697b      	ldr	r3, [r7, #20]
   2f90e:	001a      	movs	r2, r3
   2f910:	68fb      	ldr	r3, [r7, #12]
   2f912:	1ad3      	subs	r3, r2, r3
   2f914:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2f916:	69fb      	ldr	r3, [r7, #28]
}
   2f918:	0018      	movs	r0, r3
   2f91a:	46bd      	mov	sp, r7
   2f91c:	b009      	add	sp, #36	; 0x24
   2f91e:	bd90      	pop	{r4, r7, pc}
   2f920:	0002f789 	.word	0x0002f789
   2f924:	0002f3f5 	.word	0x0002f3f5
   2f928:	0002f517 	.word	0x0002f517
   2f92c:	0002f2fd 	.word	0x0002f2fd
   2f930:	0002f5e9 	.word	0x0002f5e9
   2f934:	0002f541 	.word	0x0002f541
   2f938:	000345a9 	.word	0x000345a9

0002f93c <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   2f93c:	b580      	push	{r7, lr}
   2f93e:	b088      	sub	sp, #32
   2f940:	af00      	add	r7, sp, #0
   2f942:	60f8      	str	r0, [r7, #12]
   2f944:	60b9      	str	r1, [r7, #8]
   2f946:	0019      	movs	r1, r3
   2f948:	1dfb      	adds	r3, r7, #7
   2f94a:	701a      	strb	r2, [r3, #0]
   2f94c:	1dbb      	adds	r3, r7, #6
   2f94e:	1c0a      	adds	r2, r1, #0
   2f950:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   2f952:	2300      	movs	r3, #0
   2f954:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   2f956:	2300      	movs	r3, #0
   2f958:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   2f95a:	68fb      	ldr	r3, [r7, #12]
   2f95c:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
   2f95e:	68bb      	ldr	r3, [r7, #8]
   2f960:	2b03      	cmp	r3, #3
   2f962:	dc03      	bgt.n	2f96c <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2f964:	2302      	movs	r3, #2
   2f966:	425b      	negs	r3, r3
   2f968:	61fb      	str	r3, [r7, #28]
		goto exit;
   2f96a:	e055      	b.n	2fa18 <MQTTSerialize_ack+0xdc>
	}
	header.bits.type = packettype;
   2f96c:	1dfb      	adds	r3, r7, #7
   2f96e:	781b      	ldrb	r3, [r3, #0]
   2f970:	220f      	movs	r2, #15
   2f972:	4013      	ands	r3, r2
   2f974:	b2da      	uxtb	r2, r3
   2f976:	2318      	movs	r3, #24
   2f978:	18fb      	adds	r3, r7, r3
   2f97a:	0110      	lsls	r0, r2, #4
   2f97c:	781a      	ldrb	r2, [r3, #0]
   2f97e:	210f      	movs	r1, #15
   2f980:	400a      	ands	r2, r1
   2f982:	1c11      	adds	r1, r2, #0
   2f984:	1c02      	adds	r2, r0, #0
   2f986:	430a      	orrs	r2, r1
   2f988:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   2f98a:	1dbb      	adds	r3, r7, #6
   2f98c:	781b      	ldrb	r3, [r3, #0]
   2f98e:	2201      	movs	r2, #1
   2f990:	4013      	ands	r3, r2
   2f992:	b2da      	uxtb	r2, r3
   2f994:	2318      	movs	r3, #24
   2f996:	18fb      	adds	r3, r7, r3
   2f998:	2101      	movs	r1, #1
   2f99a:	400a      	ands	r2, r1
   2f99c:	00d0      	lsls	r0, r2, #3
   2f99e:	781a      	ldrb	r2, [r3, #0]
   2f9a0:	2108      	movs	r1, #8
   2f9a2:	438a      	bics	r2, r1
   2f9a4:	1c11      	adds	r1, r2, #0
   2f9a6:	1c02      	adds	r2, r0, #0
   2f9a8:	430a      	orrs	r2, r1
   2f9aa:	701a      	strb	r2, [r3, #0]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   2f9ac:	1dfb      	adds	r3, r7, #7
   2f9ae:	781b      	ldrb	r3, [r3, #0]
   2f9b0:	3b06      	subs	r3, #6
   2f9b2:	425a      	negs	r2, r3
   2f9b4:	4153      	adcs	r3, r2
   2f9b6:	b2db      	uxtb	r3, r3
   2f9b8:	1c1a      	adds	r2, r3, #0
   2f9ba:	2303      	movs	r3, #3
   2f9bc:	4013      	ands	r3, r2
   2f9be:	b2da      	uxtb	r2, r3
   2f9c0:	2318      	movs	r3, #24
   2f9c2:	18fb      	adds	r3, r7, r3
   2f9c4:	2103      	movs	r1, #3
   2f9c6:	400a      	ands	r2, r1
   2f9c8:	1890      	adds	r0, r2, r2
   2f9ca:	781a      	ldrb	r2, [r3, #0]
   2f9cc:	2106      	movs	r1, #6
   2f9ce:	438a      	bics	r2, r1
   2f9d0:	1c11      	adds	r1, r2, #0
   2f9d2:	1c02      	adds	r2, r0, #0
   2f9d4:	430a      	orrs	r2, r1
   2f9d6:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2f9d8:	2318      	movs	r3, #24
   2f9da:	18fb      	adds	r3, r7, r3
   2f9dc:	781a      	ldrb	r2, [r3, #0]
   2f9de:	2314      	movs	r3, #20
   2f9e0:	18fb      	adds	r3, r7, r3
   2f9e2:	0011      	movs	r1, r2
   2f9e4:	0018      	movs	r0, r3
   2f9e6:	4b0f      	ldr	r3, [pc, #60]	; (2fa24 <MQTTSerialize_ack+0xe8>)
   2f9e8:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   2f9ea:	697b      	ldr	r3, [r7, #20]
   2f9ec:	2102      	movs	r1, #2
   2f9ee:	0018      	movs	r0, r3
   2f9f0:	4b0d      	ldr	r3, [pc, #52]	; (2fa28 <MQTTSerialize_ack+0xec>)
   2f9f2:	4798      	blx	r3
   2f9f4:	0002      	movs	r2, r0
   2f9f6:	697b      	ldr	r3, [r7, #20]
   2f9f8:	189b      	adds	r3, r3, r2
   2f9fa:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
   2f9fc:	2328      	movs	r3, #40	; 0x28
   2f9fe:	18fb      	adds	r3, r7, r3
   2fa00:	881a      	ldrh	r2, [r3, #0]
   2fa02:	2314      	movs	r3, #20
   2fa04:	18fb      	adds	r3, r7, r3
   2fa06:	0011      	movs	r1, r2
   2fa08:	0018      	movs	r0, r3
   2fa0a:	4b08      	ldr	r3, [pc, #32]	; (2fa2c <MQTTSerialize_ack+0xf0>)
   2fa0c:	4798      	blx	r3
	rc = ptr - buf;
   2fa0e:	697b      	ldr	r3, [r7, #20]
   2fa10:	001a      	movs	r2, r3
   2fa12:	68fb      	ldr	r3, [r7, #12]
   2fa14:	1ad3      	subs	r3, r2, r3
   2fa16:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2fa18:	69fb      	ldr	r3, [r7, #28]
}
   2fa1a:	0018      	movs	r0, r3
   2fa1c:	46bd      	mov	sp, r7
   2fa1e:	b008      	add	sp, #32
   2fa20:	bd80      	pop	{r7, pc}
   2fa22:	46c0      	nop			; (mov r8, r8)
   2fa24:	0002f517 	.word	0x0002f517
   2fa28:	0002f2fd 	.word	0x0002f2fd
   2fa2c:	0002f541 	.word	0x0002f541

0002fa30 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   2fa30:	b580      	push	{r7, lr}
   2fa32:	b084      	sub	sp, #16
   2fa34:	af00      	add	r7, sp, #0
   2fa36:	6078      	str	r0, [r7, #4]
   2fa38:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
   2fa3a:	2302      	movs	r3, #2
   2fa3c:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
   2fa3e:	2300      	movs	r3, #0
   2fa40:	60fb      	str	r3, [r7, #12]
   2fa42:	e014      	b.n	2fa6e <MQTTSerialize_subscribeLength+0x3e>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   2fa44:	68fa      	ldr	r2, [r7, #12]
   2fa46:	0013      	movs	r3, r2
   2fa48:	005b      	lsls	r3, r3, #1
   2fa4a:	189b      	adds	r3, r3, r2
   2fa4c:	009b      	lsls	r3, r3, #2
   2fa4e:	001a      	movs	r2, r3
   2fa50:	683b      	ldr	r3, [r7, #0]
   2fa52:	189b      	adds	r3, r3, r2
   2fa54:	6818      	ldr	r0, [r3, #0]
   2fa56:	6859      	ldr	r1, [r3, #4]
   2fa58:	689a      	ldr	r2, [r3, #8]
   2fa5a:	4b09      	ldr	r3, [pc, #36]	; (2fa80 <MQTTSerialize_subscribeLength+0x50>)
   2fa5c:	4798      	blx	r3
   2fa5e:	0003      	movs	r3, r0
   2fa60:	3303      	adds	r3, #3
   2fa62:	68ba      	ldr	r2, [r7, #8]
   2fa64:	18d3      	adds	r3, r2, r3
   2fa66:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
   2fa68:	68fb      	ldr	r3, [r7, #12]
   2fa6a:	3301      	adds	r3, #1
   2fa6c:	60fb      	str	r3, [r7, #12]
   2fa6e:	68fa      	ldr	r2, [r7, #12]
   2fa70:	687b      	ldr	r3, [r7, #4]
   2fa72:	429a      	cmp	r2, r3
   2fa74:	dbe6      	blt.n	2fa44 <MQTTSerialize_subscribeLength+0x14>
	return len;
   2fa76:	68bb      	ldr	r3, [r7, #8]
}
   2fa78:	0018      	movs	r0, r3
   2fa7a:	46bd      	mov	sp, r7
   2fa7c:	b004      	add	sp, #16
   2fa7e:	bd80      	pop	{r7, pc}
   2fa80:	0002f6d1 	.word	0x0002f6d1

0002fa84 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   2fa84:	b590      	push	{r4, r7, lr}
   2fa86:	b08b      	sub	sp, #44	; 0x2c
   2fa88:	af00      	add	r7, sp, #0
   2fa8a:	60f8      	str	r0, [r7, #12]
   2fa8c:	60b9      	str	r1, [r7, #8]
   2fa8e:	0019      	movs	r1, r3
   2fa90:	1dfb      	adds	r3, r7, #7
   2fa92:	701a      	strb	r2, [r3, #0]
   2fa94:	1d3b      	adds	r3, r7, #4
   2fa96:	1c0a      	adds	r2, r1, #0
   2fa98:	801a      	strh	r2, [r3, #0]
	unsigned char *ptr = buf;
   2fa9a:	68fb      	ldr	r3, [r7, #12]
   2fa9c:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
   2fa9e:	2300      	movs	r3, #0
   2faa0:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
   2faa2:	2300      	movs	r3, #0
   2faa4:	61fb      	str	r3, [r7, #28]
	int rc = 0;
   2faa6:	2300      	movs	r3, #0
   2faa8:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
   2faaa:	2300      	movs	r3, #0
   2faac:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   2faae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2fab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2fab2:	0011      	movs	r1, r2
   2fab4:	0018      	movs	r0, r3
   2fab6:	4b41      	ldr	r3, [pc, #260]	; (2fbbc <MQTTSerialize_subscribe+0x138>)
   2fab8:	4798      	blx	r3
   2faba:	0003      	movs	r3, r0
   2fabc:	61fb      	str	r3, [r7, #28]
   2fabe:	69fb      	ldr	r3, [r7, #28]
   2fac0:	0018      	movs	r0, r3
   2fac2:	4b3f      	ldr	r3, [pc, #252]	; (2fbc0 <MQTTSerialize_subscribe+0x13c>)
   2fac4:	4798      	blx	r3
   2fac6:	0002      	movs	r2, r0
   2fac8:	68bb      	ldr	r3, [r7, #8]
   2faca:	429a      	cmp	r2, r3
   2facc:	dd03      	ble.n	2fad6 <MQTTSerialize_subscribe+0x52>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2face:	2302      	movs	r3, #2
   2fad0:	425b      	negs	r3, r3
   2fad2:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   2fad4:	e06c      	b.n	2fbb0 <MQTTSerialize_subscribe+0x12c>
	}

	header.byte = 0;
   2fad6:	2314      	movs	r3, #20
   2fad8:	18fb      	adds	r3, r7, r3
   2fada:	2200      	movs	r2, #0
   2fadc:	701a      	strb	r2, [r3, #0]
	header.bits.type = SUBSCRIBE;
   2fade:	2314      	movs	r3, #20
   2fae0:	18fb      	adds	r3, r7, r3
   2fae2:	781a      	ldrb	r2, [r3, #0]
   2fae4:	210f      	movs	r1, #15
   2fae6:	400a      	ands	r2, r1
   2fae8:	1c11      	adds	r1, r2, #0
   2faea:	2280      	movs	r2, #128	; 0x80
   2faec:	4252      	negs	r2, r2
   2faee:	430a      	orrs	r2, r1
   2faf0:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   2faf2:	1dfb      	adds	r3, r7, #7
   2faf4:	781b      	ldrb	r3, [r3, #0]
   2faf6:	2201      	movs	r2, #1
   2faf8:	4013      	ands	r3, r2
   2fafa:	b2da      	uxtb	r2, r3
   2fafc:	2314      	movs	r3, #20
   2fafe:	18fb      	adds	r3, r7, r3
   2fb00:	2101      	movs	r1, #1
   2fb02:	400a      	ands	r2, r1
   2fb04:	00d0      	lsls	r0, r2, #3
   2fb06:	781a      	ldrb	r2, [r3, #0]
   2fb08:	2108      	movs	r1, #8
   2fb0a:	438a      	bics	r2, r1
   2fb0c:	1c11      	adds	r1, r2, #0
   2fb0e:	1c02      	adds	r2, r0, #0
   2fb10:	430a      	orrs	r2, r1
   2fb12:	701a      	strb	r2, [r3, #0]
	header.bits.qos = 1;
   2fb14:	2314      	movs	r3, #20
   2fb16:	18fb      	adds	r3, r7, r3
   2fb18:	781a      	ldrb	r2, [r3, #0]
   2fb1a:	2106      	movs	r1, #6
   2fb1c:	438a      	bics	r2, r1
   2fb1e:	1c11      	adds	r1, r2, #0
   2fb20:	2202      	movs	r2, #2
   2fb22:	430a      	orrs	r2, r1
   2fb24:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2fb26:	2314      	movs	r3, #20
   2fb28:	18fb      	adds	r3, r7, r3
   2fb2a:	781a      	ldrb	r2, [r3, #0]
   2fb2c:	2318      	movs	r3, #24
   2fb2e:	18fb      	adds	r3, r7, r3
   2fb30:	0011      	movs	r1, r2
   2fb32:	0018      	movs	r0, r3
   2fb34:	4b23      	ldr	r3, [pc, #140]	; (2fbc4 <MQTTSerialize_subscribe+0x140>)
   2fb36:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   2fb38:	69bb      	ldr	r3, [r7, #24]
   2fb3a:	69fa      	ldr	r2, [r7, #28]
   2fb3c:	0011      	movs	r1, r2
   2fb3e:	0018      	movs	r0, r3
   2fb40:	4b21      	ldr	r3, [pc, #132]	; (2fbc8 <MQTTSerialize_subscribe+0x144>)
   2fb42:	4798      	blx	r3
   2fb44:	0002      	movs	r2, r0
   2fb46:	69bb      	ldr	r3, [r7, #24]
   2fb48:	189b      	adds	r3, r3, r2
   2fb4a:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
   2fb4c:	1d3b      	adds	r3, r7, #4
   2fb4e:	881a      	ldrh	r2, [r3, #0]
   2fb50:	2318      	movs	r3, #24
   2fb52:	18fb      	adds	r3, r7, r3
   2fb54:	0011      	movs	r1, r2
   2fb56:	0018      	movs	r0, r3
   2fb58:	4b1c      	ldr	r3, [pc, #112]	; (2fbcc <MQTTSerialize_subscribe+0x148>)
   2fb5a:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   2fb5c:	2300      	movs	r3, #0
   2fb5e:	623b      	str	r3, [r7, #32]
   2fb60:	e01d      	b.n	2fb9e <MQTTSerialize_subscribe+0x11a>
	{
		writeMQTTString(&ptr, topicFilters[i]);
   2fb62:	6a3a      	ldr	r2, [r7, #32]
   2fb64:	0013      	movs	r3, r2
   2fb66:	005b      	lsls	r3, r3, #1
   2fb68:	189b      	adds	r3, r3, r2
   2fb6a:	009b      	lsls	r3, r3, #2
   2fb6c:	001a      	movs	r2, r3
   2fb6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2fb70:	189b      	adds	r3, r3, r2
   2fb72:	2218      	movs	r2, #24
   2fb74:	18b8      	adds	r0, r7, r2
   2fb76:	6819      	ldr	r1, [r3, #0]
   2fb78:	685a      	ldr	r2, [r3, #4]
   2fb7a:	689b      	ldr	r3, [r3, #8]
   2fb7c:	4c14      	ldr	r4, [pc, #80]	; (2fbd0 <MQTTSerialize_subscribe+0x14c>)
   2fb7e:	47a0      	blx	r4
		writeChar(&ptr, requestedQoSs[i]);
   2fb80:	6a3b      	ldr	r3, [r7, #32]
   2fb82:	009b      	lsls	r3, r3, #2
   2fb84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2fb86:	18d3      	adds	r3, r2, r3
   2fb88:	681b      	ldr	r3, [r3, #0]
   2fb8a:	b2da      	uxtb	r2, r3
   2fb8c:	2318      	movs	r3, #24
   2fb8e:	18fb      	adds	r3, r7, r3
   2fb90:	0011      	movs	r1, r2
   2fb92:	0018      	movs	r0, r3
   2fb94:	4b0b      	ldr	r3, [pc, #44]	; (2fbc4 <MQTTSerialize_subscribe+0x140>)
   2fb96:	4798      	blx	r3
	for (i = 0; i < count; ++i)
   2fb98:	6a3b      	ldr	r3, [r7, #32]
   2fb9a:	3301      	adds	r3, #1
   2fb9c:	623b      	str	r3, [r7, #32]
   2fb9e:	6a3a      	ldr	r2, [r7, #32]
   2fba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2fba2:	429a      	cmp	r2, r3
   2fba4:	dbdd      	blt.n	2fb62 <MQTTSerialize_subscribe+0xde>
	}

	rc = ptr - buf;
   2fba6:	69bb      	ldr	r3, [r7, #24]
   2fba8:	001a      	movs	r2, r3
   2fbaa:	68fb      	ldr	r3, [r7, #12]
   2fbac:	1ad3      	subs	r3, r2, r3
   2fbae:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2fbb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2fbb2:	0018      	movs	r0, r3
   2fbb4:	46bd      	mov	sp, r7
   2fbb6:	b00b      	add	sp, #44	; 0x2c
   2fbb8:	bd90      	pop	{r4, r7, pc}
   2fbba:	46c0      	nop			; (mov r8, r8)
   2fbbc:	0002fa31 	.word	0x0002fa31
   2fbc0:	0002f3f5 	.word	0x0002f3f5
   2fbc4:	0002f517 	.word	0x0002f517
   2fbc8:	0002f2fd 	.word	0x0002f2fd
   2fbcc:	0002f541 	.word	0x0002f541
   2fbd0:	0002f5e9 	.word	0x0002f5e9

0002fbd4 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   2fbd4:	b590      	push	{r4, r7, lr}
   2fbd6:	b08b      	sub	sp, #44	; 0x2c
   2fbd8:	af00      	add	r7, sp, #0
   2fbda:	60f8      	str	r0, [r7, #12]
   2fbdc:	60b9      	str	r1, [r7, #8]
   2fbde:	607a      	str	r2, [r7, #4]
   2fbe0:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2fbe2:	2300      	movs	r3, #0
   2fbe4:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2fbe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2fbe8:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2fbea:	2300      	movs	r3, #0
   2fbec:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2fbee:	2300      	movs	r3, #0
   2fbf0:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2fbf2:	2318      	movs	r3, #24
   2fbf4:	18fb      	adds	r3, r7, r3
   2fbf6:	0018      	movs	r0, r3
   2fbf8:	4b2c      	ldr	r3, [pc, #176]	; (2fcac <MQTTDeserialize_suback+0xd8>)
   2fbfa:	4798      	blx	r3
   2fbfc:	0003      	movs	r3, r0
   2fbfe:	001a      	movs	r2, r3
   2fc00:	231c      	movs	r3, #28
   2fc02:	18fb      	adds	r3, r7, r3
   2fc04:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != SUBACK)
   2fc06:	231c      	movs	r3, #28
   2fc08:	18fb      	adds	r3, r7, r3
   2fc0a:	781b      	ldrb	r3, [r3, #0]
   2fc0c:	220f      	movs	r2, #15
   2fc0e:	4393      	bics	r3, r2
   2fc10:	b2db      	uxtb	r3, r3
   2fc12:	2b90      	cmp	r3, #144	; 0x90
   2fc14:	d142      	bne.n	2fc9c <MQTTDeserialize_suback+0xc8>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2fc16:	69bb      	ldr	r3, [r7, #24]
   2fc18:	2214      	movs	r2, #20
   2fc1a:	18ba      	adds	r2, r7, r2
   2fc1c:	0011      	movs	r1, r2
   2fc1e:	0018      	movs	r0, r3
   2fc20:	4b23      	ldr	r3, [pc, #140]	; (2fcb0 <MQTTDeserialize_suback+0xdc>)
   2fc22:	4798      	blx	r3
   2fc24:	0003      	movs	r3, r0
   2fc26:	627b      	str	r3, [r7, #36]	; 0x24
   2fc28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2fc2a:	69bb      	ldr	r3, [r7, #24]
   2fc2c:	189b      	adds	r3, r3, r2
   2fc2e:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2fc30:	69bb      	ldr	r3, [r7, #24]
   2fc32:	697a      	ldr	r2, [r7, #20]
   2fc34:	189b      	adds	r3, r3, r2
   2fc36:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   2fc38:	6a3b      	ldr	r3, [r7, #32]
   2fc3a:	69ba      	ldr	r2, [r7, #24]
   2fc3c:	1a9b      	subs	r3, r3, r2
   2fc3e:	2b01      	cmp	r3, #1
   2fc40:	dd2e      	ble.n	2fca0 <MQTTDeserialize_suback+0xcc>
		goto exit;

	*packetid = readInt(&curdata);
   2fc42:	2318      	movs	r3, #24
   2fc44:	18fb      	adds	r3, r7, r3
   2fc46:	0018      	movs	r0, r3
   2fc48:	4b1a      	ldr	r3, [pc, #104]	; (2fcb4 <MQTTDeserialize_suback+0xe0>)
   2fc4a:	4798      	blx	r3
   2fc4c:	0003      	movs	r3, r0
   2fc4e:	b29a      	uxth	r2, r3
   2fc50:	68fb      	ldr	r3, [r7, #12]
   2fc52:	801a      	strh	r2, [r3, #0]

	*count = 0;
   2fc54:	687b      	ldr	r3, [r7, #4]
   2fc56:	2200      	movs	r2, #0
   2fc58:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
   2fc5a:	e018      	b.n	2fc8e <MQTTDeserialize_suback+0xba>
	{
		if (*count > maxcount)
   2fc5c:	687b      	ldr	r3, [r7, #4]
   2fc5e:	681a      	ldr	r2, [r3, #0]
   2fc60:	68bb      	ldr	r3, [r7, #8]
   2fc62:	429a      	cmp	r2, r3
   2fc64:	dd03      	ble.n	2fc6e <MQTTDeserialize_suback+0x9a>
		{
			rc = -1;
   2fc66:	2301      	movs	r3, #1
   2fc68:	425b      	negs	r3, r3
   2fc6a:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
   2fc6c:	e019      	b.n	2fca2 <MQTTDeserialize_suback+0xce>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
   2fc6e:	687b      	ldr	r3, [r7, #4]
   2fc70:	681a      	ldr	r2, [r3, #0]
   2fc72:	1c51      	adds	r1, r2, #1
   2fc74:	687b      	ldr	r3, [r7, #4]
   2fc76:	6019      	str	r1, [r3, #0]
   2fc78:	0013      	movs	r3, r2
   2fc7a:	009b      	lsls	r3, r3, #2
   2fc7c:	683a      	ldr	r2, [r7, #0]
   2fc7e:	18d4      	adds	r4, r2, r3
   2fc80:	2318      	movs	r3, #24
   2fc82:	18fb      	adds	r3, r7, r3
   2fc84:	0018      	movs	r0, r3
   2fc86:	4b09      	ldr	r3, [pc, #36]	; (2fcac <MQTTDeserialize_suback+0xd8>)
   2fc88:	4798      	blx	r3
   2fc8a:	0003      	movs	r3, r0
   2fc8c:	6023      	str	r3, [r4, #0]
	while (curdata < enddata)
   2fc8e:	69ba      	ldr	r2, [r7, #24]
   2fc90:	6a3b      	ldr	r3, [r7, #32]
   2fc92:	429a      	cmp	r2, r3
   2fc94:	d3e2      	bcc.n	2fc5c <MQTTDeserialize_suback+0x88>
	}

	rc = 1;
   2fc96:	2301      	movs	r3, #1
   2fc98:	627b      	str	r3, [r7, #36]	; 0x24
   2fc9a:	e002      	b.n	2fca2 <MQTTDeserialize_suback+0xce>
		goto exit;
   2fc9c:	46c0      	nop			; (mov r8, r8)
   2fc9e:	e000      	b.n	2fca2 <MQTTDeserialize_suback+0xce>
		goto exit;
   2fca0:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2fca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2fca4:	0018      	movs	r0, r3
   2fca6:	46bd      	mov	sp, r7
   2fca8:	b00b      	add	sp, #44	; 0x2c
   2fcaa:	bd90      	pop	{r4, r7, pc}
   2fcac:	0002f4eb 	.word	0x0002f4eb
   2fcb0:	0002f485 	.word	0x0002f485
   2fcb4:	0002f4b9 	.word	0x0002f4b9

0002fcb8 <http_client_get_config_defaults>:
 * So it needed reference to HTTP client module instance.
 */
static struct http_client_module *module_ref_inst[TCP_SOCK_MAX] = {NULL,};

void http_client_get_config_defaults(struct http_client_config *const config)
{
   2fcb8:	b580      	push	{r7, lr}
   2fcba:	b082      	sub	sp, #8
   2fcbc:	af00      	add	r7, sp, #0
   2fcbe:	6078      	str	r0, [r7, #4]
	config->port = 80;
   2fcc0:	687b      	ldr	r3, [r7, #4]
   2fcc2:	2250      	movs	r2, #80	; 0x50
   2fcc4:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   2fcc6:	687b      	ldr	r3, [r7, #4]
   2fcc8:	2200      	movs	r2, #0
   2fcca:	709a      	strb	r2, [r3, #2]
	config->timeout = 20000;
   2fccc:	687b      	ldr	r3, [r7, #4]
   2fcce:	4a0b      	ldr	r2, [pc, #44]	; (2fcfc <http_client_get_config_defaults+0x44>)
   2fcd0:	811a      	strh	r2, [r3, #8]
	config->timer_inst = NULL;
   2fcd2:	687b      	ldr	r3, [r7, #4]
   2fcd4:	2200      	movs	r2, #0
   2fcd6:	605a      	str	r2, [r3, #4]
	config->recv_buffer = NULL;
   2fcd8:	687b      	ldr	r3, [r7, #4]
   2fcda:	2200      	movs	r2, #0
   2fcdc:	60da      	str	r2, [r3, #12]
	config->recv_buffer_size = 256;
   2fcde:	687b      	ldr	r3, [r7, #4]
   2fce0:	2280      	movs	r2, #128	; 0x80
   2fce2:	0052      	lsls	r2, r2, #1
   2fce4:	611a      	str	r2, [r3, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   2fce6:	687b      	ldr	r3, [r7, #4]
   2fce8:	2252      	movs	r2, #82	; 0x52
   2fcea:	615a      	str	r2, [r3, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   2fcec:	687b      	ldr	r3, [r7, #4]
   2fcee:	4a04      	ldr	r2, [pc, #16]	; (2fd00 <http_client_get_config_defaults+0x48>)
   2fcf0:	619a      	str	r2, [r3, #24]
}
   2fcf2:	46c0      	nop			; (mov r8, r8)
   2fcf4:	46bd      	mov	sp, r7
   2fcf6:	b002      	add	sp, #8
   2fcf8:	bd80      	pop	{r7, pc}
   2fcfa:	46c0      	nop			; (mov r8, r8)
   2fcfc:	00004e20 	.word	0x00004e20
   2fd00:	000396e8 	.word	0x000396e8

0002fd04 <http_client_init>:

int http_client_init(struct http_client_module *const module, struct http_client_config *config)
{
   2fd04:	b590      	push	{r4, r7, lr}
   2fd06:	b083      	sub	sp, #12
   2fd08:	af00      	add	r7, sp, #0
   2fd0a:	6078      	str	r0, [r7, #4]
   2fd0c:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL || config == NULL) {
   2fd0e:	687b      	ldr	r3, [r7, #4]
   2fd10:	2b00      	cmp	r3, #0
   2fd12:	d002      	beq.n	2fd1a <http_client_init+0x16>
   2fd14:	683b      	ldr	r3, [r7, #0]
   2fd16:	2b00      	cmp	r3, #0
   2fd18:	d102      	bne.n	2fd20 <http_client_init+0x1c>
		return -EINVAL;
   2fd1a:	2316      	movs	r3, #22
   2fd1c:	425b      	negs	r3, r3
   2fd1e:	e058      	b.n	2fdd2 <http_client_init+0xce>
	}

	if (config->recv_buffer_size == 0) {
   2fd20:	683b      	ldr	r3, [r7, #0]
   2fd22:	691b      	ldr	r3, [r3, #16]
   2fd24:	2b00      	cmp	r3, #0
   2fd26:	d102      	bne.n	2fd2e <http_client_init+0x2a>
		return -EINVAL;
   2fd28:	2316      	movs	r3, #22
   2fd2a:	425b      	negs	r3, r3
   2fd2c:	e051      	b.n	2fdd2 <http_client_init+0xce>
	}

	if (config->timer_inst == NULL) {
   2fd2e:	683b      	ldr	r3, [r7, #0]
   2fd30:	685b      	ldr	r3, [r3, #4]
   2fd32:	2b00      	cmp	r3, #0
   2fd34:	d102      	bne.n	2fd3c <http_client_init+0x38>
		return -EINVAL;
   2fd36:	2316      	movs	r3, #22
   2fd38:	425b      	negs	r3, r3
   2fd3a:	e04a      	b.n	2fdd2 <http_client_init+0xce>
	}

	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   2fd3c:	683b      	ldr	r3, [r7, #0]
   2fd3e:	695b      	ldr	r3, [r3, #20]
   2fd40:	2b51      	cmp	r3, #81	; 0x51
   2fd42:	d802      	bhi.n	2fd4a <http_client_init+0x46>
		return -EINVAL;
   2fd44:	2316      	movs	r3, #22
   2fd46:	425b      	negs	r3, r3
   2fd48:	e043      	b.n	2fdd2 <http_client_init+0xce>
	}

	memset(module, 0, sizeof(struct http_client_module));
   2fd4a:	687b      	ldr	r3, [r7, #4]
   2fd4c:	22e8      	movs	r2, #232	; 0xe8
   2fd4e:	2100      	movs	r1, #0
   2fd50:	0018      	movs	r0, r3
   2fd52:	4b22      	ldr	r3, [pc, #136]	; (2fddc <http_client_init+0xd8>)
   2fd54:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   2fd56:	687b      	ldr	r3, [r7, #4]
   2fd58:	3350      	adds	r3, #80	; 0x50
   2fd5a:	6839      	ldr	r1, [r7, #0]
   2fd5c:	221c      	movs	r2, #28
   2fd5e:	0018      	movs	r0, r3
   2fd60:	4b1f      	ldr	r3, [pc, #124]	; (2fde0 <http_client_init+0xdc>)
   2fd62:	4798      	blx	r3

	/* Allocate the buffer in the heap. */
	if (module->config.recv_buffer == NULL) {
   2fd64:	687b      	ldr	r3, [r7, #4]
   2fd66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   2fd68:	2b00      	cmp	r3, #0
   2fd6a:	d115      	bne.n	2fd98 <http_client_init+0x94>
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   2fd6c:	683b      	ldr	r3, [r7, #0]
   2fd6e:	691b      	ldr	r3, [r3, #16]
   2fd70:	0018      	movs	r0, r3
   2fd72:	4b1c      	ldr	r3, [pc, #112]	; (2fde4 <http_client_init+0xe0>)
   2fd74:	4798      	blx	r3
   2fd76:	0003      	movs	r3, r0
   2fd78:	001a      	movs	r2, r3
   2fd7a:	687b      	ldr	r3, [r7, #4]
   2fd7c:	65da      	str	r2, [r3, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   2fd7e:	687b      	ldr	r3, [r7, #4]
   2fd80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   2fd82:	2b00      	cmp	r3, #0
   2fd84:	d102      	bne.n	2fd8c <http_client_init+0x88>
			return -ENOMEM;
   2fd86:	230c      	movs	r3, #12
   2fd88:	425b      	negs	r3, r3
   2fd8a:	e022      	b.n	2fdd2 <http_client_init+0xce>
		}
		module->alloc_buffer = 1;
   2fd8c:	687b      	ldr	r3, [r7, #4]
   2fd8e:	2241      	movs	r2, #65	; 0x41
   2fd90:	5c99      	ldrb	r1, [r3, r2]
   2fd92:	2004      	movs	r0, #4
   2fd94:	4301      	orrs	r1, r0
   2fd96:	5499      	strb	r1, [r3, r2]
	}

	if (config->timeout > 0) {
   2fd98:	683b      	ldr	r3, [r7, #0]
   2fd9a:	891b      	ldrh	r3, [r3, #8]
   2fd9c:	2b00      	cmp	r3, #0
   2fd9e:	d010      	beq.n	2fdc2 <http_client_init+0xbe>
		/* Enable the timer. */
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   2fda0:	683b      	ldr	r3, [r7, #0]
   2fda2:	6858      	ldr	r0, [r3, #4]
   2fda4:	687a      	ldr	r2, [r7, #4]
   2fda6:	4910      	ldr	r1, [pc, #64]	; (2fde8 <http_client_init+0xe4>)
   2fda8:	2300      	movs	r3, #0
   2fdaa:	4c10      	ldr	r4, [pc, #64]	; (2fdec <http_client_init+0xe8>)
   2fdac:	47a0      	blx	r4
   2fdae:	0002      	movs	r2, r0
   2fdb0:	687b      	ldr	r3, [r7, #4]
   2fdb2:	649a      	str	r2, [r3, #72]	; 0x48

		if (module->timer_id < 0) {
   2fdb4:	687b      	ldr	r3, [r7, #4]
   2fdb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2fdb8:	2b00      	cmp	r3, #0
   2fdba:	da02      	bge.n	2fdc2 <http_client_init+0xbe>
			return -ENOSPC;
   2fdbc:	231c      	movs	r3, #28
   2fdbe:	425b      	negs	r3, r3
   2fdc0:	e007      	b.n	2fdd2 <http_client_init+0xce>
		}
	}

	module->req.state = STATE_INIT;
   2fdc2:	687b      	ldr	r3, [r7, #4]
   2fdc4:	2200      	movs	r2, #0
   2fdc6:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   2fdc8:	687b      	ldr	r3, [r7, #4]
   2fdca:	22d8      	movs	r2, #216	; 0xd8
   2fdcc:	2100      	movs	r1, #0
   2fdce:	5099      	str	r1, [r3, r2]

	return 0;
   2fdd0:	2300      	movs	r3, #0
}
   2fdd2:	0018      	movs	r0, r3
   2fdd4:	46bd      	mov	sp, r7
   2fdd6:	b003      	add	sp, #12
   2fdd8:	bd90      	pop	{r4, r7, pc}
   2fdda:	46c0      	nop			; (mov r8, r8)
   2fddc:	000345df 	.word	0x000345df
   2fde0:	000345a9 	.word	0x000345a9
   2fde4:	00034581 	.word	0x00034581
   2fde8:	000300b5 	.word	0x000300b5
   2fdec:	00031759 	.word	0x00031759

0002fdf0 <http_client_register_callback>:

	return 0;
}

int http_client_register_callback(struct http_client_module *const module, http_client_callback_t callback)
{
   2fdf0:	b580      	push	{r7, lr}
   2fdf2:	b082      	sub	sp, #8
   2fdf4:	af00      	add	r7, sp, #0
   2fdf6:	6078      	str	r0, [r7, #4]
   2fdf8:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL) {
   2fdfa:	687b      	ldr	r3, [r7, #4]
   2fdfc:	2b00      	cmp	r3, #0
   2fdfe:	d102      	bne.n	2fe06 <http_client_register_callback+0x16>
		return -EINVAL;
   2fe00:	2316      	movs	r3, #22
   2fe02:	425b      	negs	r3, r3
   2fe04:	e003      	b.n	2fe0e <http_client_register_callback+0x1e>
	}

	module->cb = callback;
   2fe06:	687b      	ldr	r3, [r7, #4]
   2fe08:	683a      	ldr	r2, [r7, #0]
   2fe0a:	64da      	str	r2, [r3, #76]	; 0x4c

	return 0;
   2fe0c:	2300      	movs	r3, #0
}
   2fe0e:	0018      	movs	r0, r3
   2fe10:	46bd      	mov	sp, r7
   2fe12:	b002      	add	sp, #8
   2fe14:	bd80      	pop	{r7, pc}
	...

0002fe18 <_hwerr_to_stderr>:

/**
 * \brief change HW error type to standard error.
 */
static inline int _hwerr_to_stderr(int err)
{
   2fe18:	b580      	push	{r7, lr}
   2fe1a:	b082      	sub	sp, #8
   2fe1c:	af00      	add	r7, sp, #0
   2fe1e:	6078      	str	r0, [r7, #4]
	switch (err) {
   2fe20:	687b      	ldr	r3, [r7, #4]
   2fe22:	330e      	adds	r3, #14
   2fe24:	2b0e      	cmp	r3, #14
   2fe26:	d825      	bhi.n	2fe74 <_hwerr_to_stderr+0x5c>
   2fe28:	009a      	lsls	r2, r3, #2
   2fe2a:	4b18      	ldr	r3, [pc, #96]	; (2fe8c <_hwerr_to_stderr+0x74>)
   2fe2c:	18d3      	adds	r3, r2, r3
   2fe2e:	681b      	ldr	r3, [r3, #0]
   2fe30:	469f      	mov	pc, r3
		case 0:
			return -EIO;
   2fe32:	2305      	movs	r3, #5
   2fe34:	425b      	negs	r3, r3
   2fe36:	e024      	b.n	2fe82 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ADDRESS:
			return -ENOENT;
   2fe38:	2302      	movs	r3, #2
   2fe3a:	425b      	negs	r3, r3
   2fe3c:	e021      	b.n	2fe82 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_ALREADY_IN_USE:
			return -EADDRINUSE;
   2fe3e:	2370      	movs	r3, #112	; 0x70
   2fe40:	425b      	negs	r3, r3
   2fe42:	e01e      	b.n	2fe82 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_TCP_SOCK:
		case SOCK_ERR_MAX_UDP_SOCK:
			return -ENOMEM;
   2fe44:	230c      	movs	r3, #12
   2fe46:	425b      	negs	r3, r3
   2fe48:	e01b      	b.n	2fe82 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ARG:
			return -EINVAL;
   2fe4a:	2316      	movs	r3, #22
   2fe4c:	425b      	negs	r3, r3
   2fe4e:	e018      	b.n	2fe82 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_LISTEN_SOCK:
			return -ENOMEM;
   2fe50:	230c      	movs	r3, #12
   2fe52:	425b      	negs	r3, r3
   2fe54:	e015      	b.n	2fe82 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID:
			return -EIO;
   2fe56:	2305      	movs	r3, #5
   2fe58:	425b      	negs	r3, r3
   2fe5a:	e012      	b.n	2fe82 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_IS_REQUIRED:
			return -EDESTADDRREQ;
   2fe5c:	2379      	movs	r3, #121	; 0x79
   2fe5e:	425b      	negs	r3, r3
   2fe60:	e00f      	b.n	2fe82 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_CONN_ABORTED:
			return -ECONNRESET;
   2fe62:	2368      	movs	r3, #104	; 0x68
   2fe64:	425b      	negs	r3, r3
   2fe66:	e00c      	b.n	2fe82 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_TIMEOUT:
			return -EAGAIN;
   2fe68:	230b      	movs	r3, #11
   2fe6a:	425b      	negs	r3, r3
   2fe6c:	e009      	b.n	2fe82 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
   2fe6e:	2310      	movs	r3, #16
   2fe70:	425b      	negs	r3, r3
   2fe72:	e006      	b.n	2fe82 <_hwerr_to_stderr+0x6a>
		default:
			if (err < 0) {
   2fe74:	687b      	ldr	r3, [r7, #4]
   2fe76:	2b00      	cmp	r3, #0
   2fe78:	da02      	bge.n	2fe80 <_hwerr_to_stderr+0x68>
				return -EIO;
   2fe7a:	2305      	movs	r3, #5
   2fe7c:	425b      	negs	r3, r3
   2fe7e:	e000      	b.n	2fe82 <_hwerr_to_stderr+0x6a>
			}
			return 0;
   2fe80:	2300      	movs	r3, #0
	}
}
   2fe82:	0018      	movs	r0, r3
   2fe84:	46bd      	mov	sp, r7
   2fe86:	b002      	add	sp, #8
   2fe88:	bd80      	pop	{r7, pc}
   2fe8a:	46c0      	nop			; (mov r8, r8)
   2fe8c:	00039824 	.word	0x00039824

0002fe90 <http_client_socket_event_handler>:

void http_client_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   2fe90:	b580      	push	{r7, lr}
   2fe92:	b08a      	sub	sp, #40	; 0x28
   2fe94:	af00      	add	r7, sp, #0
   2fe96:	603a      	str	r2, [r7, #0]
   2fe98:	1dfb      	adds	r3, r7, #7
   2fe9a:	1c02      	adds	r2, r0, #0
   2fe9c:	701a      	strb	r2, [r3, #0]
   2fe9e:	1dbb      	adds	r3, r7, #6
   2fea0:	1c0a      	adds	r2, r1, #0
   2fea2:	701a      	strb	r2, [r3, #0]
	tstrSocketRecvMsg *msg_recv;
	int16_t send_ret;
	union http_client_data data;

	/* Find instance using the socket descriptor. */
	struct http_client_module *module = module_ref_inst[sock];
   2fea4:	1dfb      	adds	r3, r7, #7
   2fea6:	2200      	movs	r2, #0
   2fea8:	569a      	ldrsb	r2, [r3, r2]
   2feaa:	4b4b      	ldr	r3, [pc, #300]	; (2ffd8 <http_client_socket_event_handler+0x148>)
   2feac:	0092      	lsls	r2, r2, #2
   2feae:	58d3      	ldr	r3, [r2, r3]
   2feb0:	627b      	str	r3, [r7, #36]	; 0x24
	/* If cannot found reference, This socket is not HTTP client socket. */
	if (module == NULL) {
   2feb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2feb4:	2b00      	cmp	r3, #0
   2feb6:	d100      	bne.n	2feba <http_client_socket_event_handler+0x2a>
   2feb8:	e08a      	b.n	2ffd0 <http_client_socket_event_handler+0x140>
		return;
	}

	switch (msg_type) {
   2feba:	1dbb      	adds	r3, r7, #6
   2febc:	781b      	ldrb	r3, [r3, #0]
   2febe:	2b06      	cmp	r3, #6
   2fec0:	d040      	beq.n	2ff44 <http_client_socket_event_handler+0xb4>
   2fec2:	2b07      	cmp	r3, #7
   2fec4:	d060      	beq.n	2ff88 <http_client_socket_event_handler+0xf8>
   2fec6:	2b05      	cmp	r3, #5
   2fec8:	d000      	beq.n	2fecc <http_client_socket_event_handler+0x3c>
		}
		/* Disable sending flag. */
		module->sending = 0;
    	break;
	default:
		break;
   2feca:	e082      	b.n	2ffd2 <http_client_socket_event_handler+0x142>
    	msg_connect = (tstrSocketConnectMsg*)msg_data;
   2fecc:	683b      	ldr	r3, [r7, #0]
   2fece:	623b      	str	r3, [r7, #32]
    	data.sock_connected.result = msg_connect->s8Error;
   2fed0:	6a3b      	ldr	r3, [r7, #32]
   2fed2:	785b      	ldrb	r3, [r3, #1]
   2fed4:	b25b      	sxtb	r3, r3
   2fed6:	001a      	movs	r2, r3
   2fed8:	230c      	movs	r3, #12
   2feda:	18fb      	adds	r3, r7, r3
   2fedc:	601a      	str	r2, [r3, #0]
    	if (msg_connect->s8Error < 0) {
   2fede:	6a3b      	ldr	r3, [r7, #32]
   2fee0:	785b      	ldrb	r3, [r3, #1]
   2fee2:	b25b      	sxtb	r3, r3
   2fee4:	2b00      	cmp	r3, #0
   2fee6:	da0c      	bge.n	2ff02 <http_client_socket_event_handler+0x72>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
   2fee8:	6a3b      	ldr	r3, [r7, #32]
   2feea:	785b      	ldrb	r3, [r3, #1]
   2feec:	b25b      	sxtb	r3, r3
   2feee:	0018      	movs	r0, r3
   2fef0:	4b3a      	ldr	r3, [pc, #232]	; (2ffdc <http_client_socket_event_handler+0x14c>)
   2fef2:	4798      	blx	r3
   2fef4:	0002      	movs	r2, r0
   2fef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2fef8:	0011      	movs	r1, r2
   2fefa:	0018      	movs	r0, r3
   2fefc:	4b38      	ldr	r3, [pc, #224]	; (2ffe0 <http_client_socket_event_handler+0x150>)
   2fefe:	4798      	blx	r3
    	break;
   2ff00:	e067      	b.n	2ffd2 <http_client_socket_event_handler+0x142>
			if (module->cb != NULL) {
   2ff02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ff04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2ff06:	2b00      	cmp	r3, #0
   2ff08:	d006      	beq.n	2ff18 <http_client_socket_event_handler+0x88>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
   2ff0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ff0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2ff0e:	220c      	movs	r2, #12
   2ff10:	18ba      	adds	r2, r7, r2
   2ff12:	6a78      	ldr	r0, [r7, #36]	; 0x24
   2ff14:	2100      	movs	r1, #0
   2ff16:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
   2ff18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ff1a:	2203      	movs	r2, #3
   2ff1c:	66da      	str	r2, [r3, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
   2ff1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ff20:	6d58      	ldr	r0, [r3, #84]	; 0x54
   2ff22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ff24:	6c99      	ldr	r1, [r3, #72]	; 0x48
   2ff26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ff28:	2258      	movs	r2, #88	; 0x58
   2ff2a:	5a9b      	ldrh	r3, [r3, r2]
   2ff2c:	001a      	movs	r2, r3
   2ff2e:	4b2d      	ldr	r3, [pc, #180]	; (2ffe4 <http_client_socket_event_handler+0x154>)
   2ff30:	4798      	blx	r3
    		_http_client_recv_packet(module);
   2ff32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ff34:	0018      	movs	r0, r3
   2ff36:	4b2c      	ldr	r3, [pc, #176]	; (2ffe8 <http_client_socket_event_handler+0x158>)
   2ff38:	4798      	blx	r3
			_http_client_request(module);
   2ff3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ff3c:	0018      	movs	r0, r3
   2ff3e:	4b2b      	ldr	r3, [pc, #172]	; (2ffec <http_client_socket_event_handler+0x15c>)
   2ff40:	4798      	blx	r3
    	break;
   2ff42:	e046      	b.n	2ffd2 <http_client_socket_event_handler+0x142>
    	msg_recv = (tstrSocketRecvMsg*)msg_data;
   2ff44:	683b      	ldr	r3, [r7, #0]
   2ff46:	61fb      	str	r3, [r7, #28]
    	if (msg_recv->s16BufferSize > 0) {
   2ff48:	69fb      	ldr	r3, [r7, #28]
   2ff4a:	2204      	movs	r2, #4
   2ff4c:	5e9b      	ldrsh	r3, [r3, r2]
   2ff4e:	2b00      	cmp	r3, #0
   2ff50:	dd09      	ble.n	2ff66 <http_client_socket_event_handler+0xd6>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
   2ff52:	69fb      	ldr	r3, [r7, #28]
   2ff54:	2204      	movs	r2, #4
   2ff56:	5e9b      	ldrsh	r3, [r3, r2]
   2ff58:	001a      	movs	r2, r3
   2ff5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ff5c:	0011      	movs	r1, r2
   2ff5e:	0018      	movs	r0, r3
   2ff60:	4b23      	ldr	r3, [pc, #140]	; (2fff0 <http_client_socket_event_handler+0x160>)
   2ff62:	4798      	blx	r3
   2ff64:	e00b      	b.n	2ff7e <http_client_socket_event_handler+0xee>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
   2ff66:	69fb      	ldr	r3, [r7, #28]
   2ff68:	2204      	movs	r2, #4
   2ff6a:	5e9b      	ldrsh	r3, [r3, r2]
   2ff6c:	0018      	movs	r0, r3
   2ff6e:	4b1b      	ldr	r3, [pc, #108]	; (2ffdc <http_client_socket_event_handler+0x14c>)
   2ff70:	4798      	blx	r3
   2ff72:	0002      	movs	r2, r0
   2ff74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ff76:	0011      	movs	r1, r2
   2ff78:	0018      	movs	r0, r3
   2ff7a:	4b19      	ldr	r3, [pc, #100]	; (2ffe0 <http_client_socket_event_handler+0x150>)
   2ff7c:	4798      	blx	r3
		_http_client_recv_packet(module);
   2ff7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ff80:	0018      	movs	r0, r3
   2ff82:	4b19      	ldr	r3, [pc, #100]	; (2ffe8 <http_client_socket_event_handler+0x158>)
   2ff84:	4798      	blx	r3
		break;
   2ff86:	e024      	b.n	2ffd2 <http_client_socket_event_handler+0x142>
		send_ret = *(int16_t*)msg_data;
   2ff88:	231a      	movs	r3, #26
   2ff8a:	18fb      	adds	r3, r7, r3
   2ff8c:	683a      	ldr	r2, [r7, #0]
   2ff8e:	8812      	ldrh	r2, [r2, #0]
   2ff90:	801a      	strh	r2, [r3, #0]
		if (send_ret < 0) {
   2ff92:	231a      	movs	r3, #26
   2ff94:	18fb      	adds	r3, r7, r3
   2ff96:	2200      	movs	r2, #0
   2ff98:	5e9b      	ldrsh	r3, [r3, r2]
   2ff9a:	2b00      	cmp	r3, #0
   2ff9c:	da0d      	bge.n	2ffba <http_client_socket_event_handler+0x12a>
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
   2ff9e:	231a      	movs	r3, #26
   2ffa0:	18fb      	adds	r3, r7, r3
   2ffa2:	2200      	movs	r2, #0
   2ffa4:	5e9b      	ldrsh	r3, [r3, r2]
   2ffa6:	0018      	movs	r0, r3
   2ffa8:	4b0c      	ldr	r3, [pc, #48]	; (2ffdc <http_client_socket_event_handler+0x14c>)
   2ffaa:	4798      	blx	r3
   2ffac:	0002      	movs	r2, r0
   2ffae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ffb0:	0011      	movs	r1, r2
   2ffb2:	0018      	movs	r0, r3
   2ffb4:	4b0a      	ldr	r3, [pc, #40]	; (2ffe0 <http_client_socket_event_handler+0x150>)
   2ffb6:	4798      	blx	r3
   2ffb8:	e003      	b.n	2ffc2 <http_client_socket_event_handler+0x132>
    		_http_client_request(module);
   2ffba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ffbc:	0018      	movs	r0, r3
   2ffbe:	4b0b      	ldr	r3, [pc, #44]	; (2ffec <http_client_socket_event_handler+0x15c>)
   2ffc0:	4798      	blx	r3
		module->sending = 0;
   2ffc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ffc4:	2241      	movs	r2, #65	; 0x41
   2ffc6:	5c99      	ldrb	r1, [r3, r2]
   2ffc8:	2001      	movs	r0, #1
   2ffca:	4381      	bics	r1, r0
   2ffcc:	5499      	strb	r1, [r3, r2]
    	break;
   2ffce:	e000      	b.n	2ffd2 <http_client_socket_event_handler+0x142>
		return;
   2ffd0:	46c0      	nop			; (mov r8, r8)
	}

}
   2ffd2:	46bd      	mov	sp, r7
   2ffd4:	b00a      	add	sp, #40	; 0x28
   2ffd6:	bd80      	pop	{r7, pc}
   2ffd8:	200046c0 	.word	0x200046c0
   2ffdc:	0002fe19 	.word	0x0002fe19
   2ffe0:	0003048d 	.word	0x0003048d
   2ffe4:	000317e9 	.word	0x000317e9
   2ffe8:	00030d19 	.word	0x00030d19
   2ffec:	000305e1 	.word	0x000305e1
   2fff0:	00030d7d 	.word	0x00030d7d

0002fff4 <http_client_socket_resolve_handler>:

void http_client_socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   2fff4:	b580      	push	{r7, lr}
   2fff6:	b088      	sub	sp, #32
   2fff8:	af00      	add	r7, sp, #0
   2fffa:	6078      	str	r0, [r7, #4]
   2fffc:	6039      	str	r1, [r7, #0]
	int i;
	struct http_client_module *module;
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
   2fffe:	2300      	movs	r3, #0
   30000:	61fb      	str	r3, [r7, #28]
   30002:	e048      	b.n	30096 <http_client_socket_resolve_handler+0xa2>
		if (module_ref_inst[i] != NULL) {
   30004:	4b27      	ldr	r3, [pc, #156]	; (300a4 <http_client_socket_resolve_handler+0xb0>)
   30006:	69fa      	ldr	r2, [r7, #28]
   30008:	0092      	lsls	r2, r2, #2
   3000a:	58d3      	ldr	r3, [r2, r3]
   3000c:	2b00      	cmp	r3, #0
   3000e:	d03f      	beq.n	30090 <http_client_socket_resolve_handler+0x9c>
			module = module_ref_inst[i];
   30010:	4b24      	ldr	r3, [pc, #144]	; (300a4 <http_client_socket_resolve_handler+0xb0>)
   30012:	69fa      	ldr	r2, [r7, #28]
   30014:	0092      	lsls	r2, r2, #2
   30016:	58d3      	ldr	r3, [r2, r3]
   30018:	61bb      	str	r3, [r7, #24]
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   3001a:	69bb      	ldr	r3, [r7, #24]
   3001c:	1c5a      	adds	r2, r3, #1
   3001e:	687b      	ldr	r3, [r7, #4]
   30020:	0011      	movs	r1, r2
   30022:	0018      	movs	r0, r3
   30024:	4b20      	ldr	r3, [pc, #128]	; (300a8 <http_client_socket_resolve_handler+0xb4>)
   30026:	4798      	blx	r3
   30028:	1e03      	subs	r3, r0, #0
   3002a:	d131      	bne.n	30090 <http_client_socket_resolve_handler+0x9c>
   3002c:	69bb      	ldr	r3, [r7, #24]
   3002e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   30030:	2b01      	cmp	r3, #1
   30032:	d12d      	bne.n	30090 <http_client_socket_resolve_handler+0x9c>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
   30034:	683b      	ldr	r3, [r7, #0]
   30036:	2b00      	cmp	r3, #0
   30038:	d107      	bne.n	3004a <http_client_socket_resolve_handler+0x56>
					_http_client_clear_conn(module, -EHOSTUNREACH);
   3003a:	2376      	movs	r3, #118	; 0x76
   3003c:	425a      	negs	r2, r3
   3003e:	69bb      	ldr	r3, [r7, #24]
   30040:	0011      	movs	r1, r2
   30042:	0018      	movs	r0, r3
   30044:	4b19      	ldr	r3, [pc, #100]	; (300ac <http_client_socket_resolve_handler+0xb8>)
   30046:	4798      	blx	r3
					return;
   30048:	e028      	b.n	3009c <http_client_socket_resolve_handler+0xa8>
				}
				addr_in.sin_family = AF_INET;
   3004a:	2308      	movs	r3, #8
   3004c:	18fb      	adds	r3, r7, r3
   3004e:	2202      	movs	r2, #2
   30050:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   30052:	69bb      	ldr	r3, [r7, #24]
   30054:	2250      	movs	r2, #80	; 0x50
   30056:	5a9b      	ldrh	r3, [r3, r2]
   30058:	021b      	lsls	r3, r3, #8
   3005a:	b21a      	sxth	r2, r3
   3005c:	69bb      	ldr	r3, [r7, #24]
   3005e:	2150      	movs	r1, #80	; 0x50
   30060:	5a5b      	ldrh	r3, [r3, r1]
   30062:	0a1b      	lsrs	r3, r3, #8
   30064:	b29b      	uxth	r3, r3
   30066:	b21b      	sxth	r3, r3
   30068:	4313      	orrs	r3, r2
   3006a:	b21b      	sxth	r3, r3
   3006c:	b29a      	uxth	r2, r3
   3006e:	2308      	movs	r3, #8
   30070:	18fb      	adds	r3, r7, r3
   30072:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = server_ip;
   30074:	2308      	movs	r3, #8
   30076:	18fb      	adds	r3, r7, r3
   30078:	683a      	ldr	r2, [r7, #0]
   3007a:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   3007c:	69bb      	ldr	r3, [r7, #24]
   3007e:	781b      	ldrb	r3, [r3, #0]
   30080:	b25b      	sxtb	r3, r3
   30082:	2208      	movs	r2, #8
   30084:	18b9      	adds	r1, r7, r2
   30086:	2210      	movs	r2, #16
   30088:	0018      	movs	r0, r3
   3008a:	4b09      	ldr	r3, [pc, #36]	; (300b0 <http_client_socket_resolve_handler+0xbc>)
   3008c:	4798      	blx	r3
				return;
   3008e:	e005      	b.n	3009c <http_client_socket_resolve_handler+0xa8>
	for (i = 0; i < TCP_SOCK_MAX; i++) {
   30090:	69fb      	ldr	r3, [r7, #28]
   30092:	3301      	adds	r3, #1
   30094:	61fb      	str	r3, [r7, #28]
   30096:	69fb      	ldr	r3, [r7, #28]
   30098:	2b06      	cmp	r3, #6
   3009a:	ddb3      	ble.n	30004 <http_client_socket_resolve_handler+0x10>
			}
		}
	}
}
   3009c:	46bd      	mov	sp, r7
   3009e:	b008      	add	sp, #32
   300a0:	bd80      	pop	{r7, pc}
   300a2:	46c0      	nop			; (mov r8, r8)
   300a4:	200046c0 	.word	0x200046c0
   300a8:	0003491d 	.word	0x0003491d
   300ac:	0003048d 	.word	0x0003048d
   300b0:	00024885 	.word	0x00024885

000300b4 <http_client_timer_callback>:

void http_client_timer_callback(struct sw_timer_module *const module, int timer_id, void *context, int period)
{
   300b4:	b580      	push	{r7, lr}
   300b6:	b086      	sub	sp, #24
   300b8:	af00      	add	r7, sp, #0
   300ba:	60f8      	str	r0, [r7, #12]
   300bc:	60b9      	str	r1, [r7, #8]
   300be:	607a      	str	r2, [r7, #4]
   300c0:	603b      	str	r3, [r7, #0]
	struct http_client_module *module_inst = (struct http_client_module *)context;
   300c2:	687b      	ldr	r3, [r7, #4]
   300c4:	617b      	str	r3, [r7, #20]

	/* Checks invalid arguments. */
	if (module_inst == NULL) {
   300c6:	697b      	ldr	r3, [r7, #20]
   300c8:	2b00      	cmp	r3, #0
   300ca:	d007      	beq.n	300dc <http_client_timer_callback+0x28>
		return;
	}

	_http_client_clear_conn(module_inst, -ETIME);
   300cc:	233e      	movs	r3, #62	; 0x3e
   300ce:	425a      	negs	r2, r3
   300d0:	697b      	ldr	r3, [r7, #20]
   300d2:	0011      	movs	r1, r2
   300d4:	0018      	movs	r0, r3
   300d6:	4b03      	ldr	r3, [pc, #12]	; (300e4 <http_client_timer_callback+0x30>)
   300d8:	4798      	blx	r3
   300da:	e000      	b.n	300de <http_client_timer_callback+0x2a>
		return;
   300dc:	46c0      	nop			; (mov r8, r8)
}
   300de:	46bd      	mov	sp, r7
   300e0:	b006      	add	sp, #24
   300e2:	bd80      	pop	{r7, pc}
   300e4:	0003048d 	.word	0x0003048d

000300e8 <_is_ip>:

static int _is_ip(const char *host)
{
   300e8:	b580      	push	{r7, lr}
   300ea:	b084      	sub	sp, #16
   300ec:	af00      	add	r7, sp, #0
   300ee:	6078      	str	r0, [r7, #4]
	uint32_t isv6 = 0;
   300f0:	2300      	movs	r3, #0
   300f2:	60fb      	str	r3, [r7, #12]
	char ch;

	while (*host != '\0') {
   300f4:	e03a      	b.n	3016c <_is_ip+0x84>
		ch = *host++;
   300f6:	687b      	ldr	r3, [r7, #4]
   300f8:	1c5a      	adds	r2, r3, #1
   300fa:	607a      	str	r2, [r7, #4]
   300fc:	220b      	movs	r2, #11
   300fe:	18ba      	adds	r2, r7, r2
   30100:	781b      	ldrb	r3, [r3, #0]
   30102:	7013      	strb	r3, [r2, #0]
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   30104:	230b      	movs	r3, #11
   30106:	18fb      	adds	r3, r7, r3
   30108:	781b      	ldrb	r3, [r3, #0]
   3010a:	2b60      	cmp	r3, #96	; 0x60
   3010c:	d904      	bls.n	30118 <_is_ip+0x30>
   3010e:	230b      	movs	r3, #11
   30110:	18fb      	adds	r3, r7, r3
   30112:	781b      	ldrb	r3, [r3, #0]
   30114:	2b66      	cmp	r3, #102	; 0x66
   30116:	d913      	bls.n	30140 <_is_ip+0x58>
   30118:	230b      	movs	r3, #11
   3011a:	18fb      	adds	r3, r7, r3
   3011c:	781b      	ldrb	r3, [r3, #0]
   3011e:	2b40      	cmp	r3, #64	; 0x40
   30120:	d904      	bls.n	3012c <_is_ip+0x44>
   30122:	230b      	movs	r3, #11
   30124:	18fb      	adds	r3, r7, r3
   30126:	781b      	ldrb	r3, [r3, #0]
   30128:	2b46      	cmp	r3, #70	; 0x46
   3012a:	d909      	bls.n	30140 <_is_ip+0x58>
   3012c:	230b      	movs	r3, #11
   3012e:	18fb      	adds	r3, r7, r3
   30130:	781b      	ldrb	r3, [r3, #0]
   30132:	2b3a      	cmp	r3, #58	; 0x3a
   30134:	d004      	beq.n	30140 <_is_ip+0x58>
   30136:	230b      	movs	r3, #11
   30138:	18fb      	adds	r3, r7, r3
   3013a:	781b      	ldrb	r3, [r3, #0]
   3013c:	2b2f      	cmp	r3, #47	; 0x2f
   3013e:	d102      	bne.n	30146 <_is_ip+0x5e>
			isv6 = 1;
   30140:	2301      	movs	r3, #1
   30142:	60fb      	str	r3, [r7, #12]
   30144:	e012      	b.n	3016c <_is_ip+0x84>
		} else if (ch == '.') {
   30146:	230b      	movs	r3, #11
   30148:	18fb      	adds	r3, r7, r3
   3014a:	781b      	ldrb	r3, [r3, #0]
   3014c:	2b2e      	cmp	r3, #46	; 0x2e
   3014e:	d104      	bne.n	3015a <_is_ip+0x72>
			if (isv6) {
   30150:	68fb      	ldr	r3, [r7, #12]
   30152:	2b00      	cmp	r3, #0
   30154:	d00a      	beq.n	3016c <_is_ip+0x84>
				return 0;
   30156:	2300      	movs	r3, #0
   30158:	e00d      	b.n	30176 <_is_ip+0x8e>
			}
		} else if ((ch & 0x30) != 0x30) {
   3015a:	230b      	movs	r3, #11
   3015c:	18fb      	adds	r3, r7, r3
   3015e:	781b      	ldrb	r3, [r3, #0]
   30160:	2230      	movs	r2, #48	; 0x30
   30162:	4013      	ands	r3, r2
   30164:	2b30      	cmp	r3, #48	; 0x30
   30166:	d001      	beq.n	3016c <_is_ip+0x84>
			return 0;
   30168:	2300      	movs	r3, #0
   3016a:	e004      	b.n	30176 <_is_ip+0x8e>
	while (*host != '\0') {
   3016c:	687b      	ldr	r3, [r7, #4]
   3016e:	781b      	ldrb	r3, [r3, #0]
   30170:	2b00      	cmp	r3, #0
   30172:	d1c0      	bne.n	300f6 <_is_ip+0xe>
		}
	}
	return 1;
   30174:	2301      	movs	r3, #1
}
   30176:	0018      	movs	r0, r3
   30178:	46bd      	mov	sp, r7
   3017a:	b004      	add	sp, #16
   3017c:	bd80      	pop	{r7, pc}
	...

00030180 <http_client_send_request>:

int http_client_send_request(struct http_client_module *const module, const char *url,
	enum http_method method, struct http_entity *const entity, const char *ext_header)
{
   30180:	b5b0      	push	{r4, r5, r7, lr}
   30182:	b08e      	sub	sp, #56	; 0x38
   30184:	af00      	add	r7, sp, #0
   30186:	60f8      	str	r0, [r7, #12]
   30188:	60b9      	str	r1, [r7, #8]
   3018a:	603b      	str	r3, [r7, #0]
   3018c:	1dfb      	adds	r3, r7, #7
   3018e:	701a      	strb	r2, [r3, #0]
	uint8_t flag = 0;
   30190:	2337      	movs	r3, #55	; 0x37
   30192:	18fb      	adds	r3, r7, r3
   30194:	2200      	movs	r2, #0
   30196:	701a      	strb	r2, [r3, #0]
	struct sockaddr_in addr_in;
	const char *uri = NULL;
   30198:	2300      	movs	r3, #0
   3019a:	62bb      	str	r3, [r7, #40]	; 0x28
	int i = 0, j = 0, reconnect = 0;
   3019c:	2300      	movs	r3, #0
   3019e:	633b      	str	r3, [r7, #48]	; 0x30
   301a0:	2300      	movs	r3, #0
   301a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   301a4:	2300      	movs	r3, #0
   301a6:	627b      	str	r3, [r7, #36]	; 0x24

	if (module == NULL) {
   301a8:	68fb      	ldr	r3, [r7, #12]
   301aa:	2b00      	cmp	r3, #0
   301ac:	d102      	bne.n	301b4 <http_client_send_request+0x34>
		return -EINVAL;
   301ae:	2316      	movs	r3, #22
   301b0:	425b      	negs	r3, r3
   301b2:	e145      	b.n	30440 <http_client_send_request+0x2c0>
	}

	if (module->req.state > STATE_SOCK_CONNECTED) {
   301b4:	68fb      	ldr	r3, [r7, #12]
   301b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   301b8:	2b02      	cmp	r3, #2
   301ba:	d902      	bls.n	301c2 <http_client_send_request+0x42>
		return -EBUSY;
   301bc:	2310      	movs	r3, #16
   301be:	425b      	negs	r3, r3
   301c0:	e13e      	b.n	30440 <http_client_send_request+0x2c0>
	}

	/* Separate host and uri */
	if (!strncmp(url, "http://", 7)) {
   301c2:	49a1      	ldr	r1, [pc, #644]	; (30448 <http_client_send_request+0x2c8>)
   301c4:	68bb      	ldr	r3, [r7, #8]
   301c6:	2207      	movs	r2, #7
   301c8:	0018      	movs	r0, r3
   301ca:	4ba0      	ldr	r3, [pc, #640]	; (3044c <http_client_send_request+0x2cc>)
   301cc:	4798      	blx	r3
   301ce:	1e03      	subs	r3, r0, #0
   301d0:	d102      	bne.n	301d8 <http_client_send_request+0x58>
		i = 7;
   301d2:	2307      	movs	r3, #7
   301d4:	633b      	str	r3, [r7, #48]	; 0x30
   301d6:	e009      	b.n	301ec <http_client_send_request+0x6c>
	} else if (!strncmp(url, "https://", 8)) {
   301d8:	499d      	ldr	r1, [pc, #628]	; (30450 <http_client_send_request+0x2d0>)
   301da:	68bb      	ldr	r3, [r7, #8]
   301dc:	2208      	movs	r2, #8
   301de:	0018      	movs	r0, r3
   301e0:	4b9a      	ldr	r3, [pc, #616]	; (3044c <http_client_send_request+0x2cc>)
   301e2:	4798      	blx	r3
   301e4:	1e03      	subs	r3, r0, #0
   301e6:	d101      	bne.n	301ec <http_client_send_request+0x6c>
		i = 8;
   301e8:	2308      	movs	r3, #8
   301ea:	633b      	str	r3, [r7, #48]	; 0x30
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   301ec:	68fb      	ldr	r3, [r7, #12]
   301ee:	1c5c      	adds	r4, r3, #1
   301f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   301f2:	68ba      	ldr	r2, [r7, #8]
   301f4:	18d5      	adds	r5, r2, r3
   301f6:	68fb      	ldr	r3, [r7, #12]
   301f8:	3301      	adds	r3, #1
   301fa:	0018      	movs	r0, r3
   301fc:	4b95      	ldr	r3, [pc, #596]	; (30454 <http_client_send_request+0x2d4>)
   301fe:	4798      	blx	r3
   30200:	0003      	movs	r3, r0
   30202:	001a      	movs	r2, r3
   30204:	0029      	movs	r1, r5
   30206:	0020      	movs	r0, r4
   30208:	4b90      	ldr	r3, [pc, #576]	; (3044c <http_client_send_request+0x2cc>)
   3020a:	4798      	blx	r3
   3020c:	0003      	movs	r3, r0
   3020e:	627b      	str	r3, [r7, #36]	; 0x24

	for (; url[i] != '\0' && url[i] != '/'; i++) {
   30210:	e00d      	b.n	3022e <http_client_send_request+0xae>
		module->host[j++] = url[i];
   30212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   30214:	1c5a      	adds	r2, r3, #1
   30216:	62fa      	str	r2, [r7, #44]	; 0x2c
   30218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   3021a:	68b9      	ldr	r1, [r7, #8]
   3021c:	188a      	adds	r2, r1, r2
   3021e:	7811      	ldrb	r1, [r2, #0]
   30220:	68fa      	ldr	r2, [r7, #12]
   30222:	18d3      	adds	r3, r2, r3
   30224:	1c0a      	adds	r2, r1, #0
   30226:	705a      	strb	r2, [r3, #1]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   30228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   3022a:	3301      	adds	r3, #1
   3022c:	633b      	str	r3, [r7, #48]	; 0x30
   3022e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30230:	68ba      	ldr	r2, [r7, #8]
   30232:	18d3      	adds	r3, r2, r3
   30234:	781b      	ldrb	r3, [r3, #0]
   30236:	2b00      	cmp	r3, #0
   30238:	d005      	beq.n	30246 <http_client_send_request+0xc6>
   3023a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   3023c:	68ba      	ldr	r2, [r7, #8]
   3023e:	18d3      	adds	r3, r2, r3
   30240:	781b      	ldrb	r3, [r3, #0]
   30242:	2b2f      	cmp	r3, #47	; 0x2f
   30244:	d1e5      	bne.n	30212 <http_client_send_request+0x92>
	}
	module->host[j] = '\0';
   30246:	68fa      	ldr	r2, [r7, #12]
   30248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   3024a:	18d3      	adds	r3, r2, r3
   3024c:	3301      	adds	r3, #1
   3024e:	2200      	movs	r2, #0
   30250:	701a      	strb	r2, [r3, #0]
	uri = url + i;
   30252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30254:	68ba      	ldr	r2, [r7, #8]
   30256:	18d3      	adds	r3, r2, r3
   30258:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Checks the parameters. */
	if (strlen(module->host) == 0) {
   3025a:	68fb      	ldr	r3, [r7, #12]
   3025c:	3301      	adds	r3, #1
   3025e:	781b      	ldrb	r3, [r3, #0]
   30260:	2b00      	cmp	r3, #0
   30262:	d102      	bne.n	3026a <http_client_send_request+0xea>
		return -EINVAL;
   30264:	2316      	movs	r3, #22
   30266:	425b      	negs	r3, r3
   30268:	e0ea      	b.n	30440 <http_client_send_request+0x2c0>
	}

	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   3026a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   3026c:	0018      	movs	r0, r3
   3026e:	4b79      	ldr	r3, [pc, #484]	; (30454 <http_client_send_request+0x2d4>)
   30270:	4798      	blx	r3
   30272:	0003      	movs	r3, r0
   30274:	2b3f      	cmp	r3, #63	; 0x3f
   30276:	d902      	bls.n	3027e <http_client_send_request+0xfe>
		return -ENAMETOOLONG;
   30278:	235b      	movs	r3, #91	; 0x5b
   3027a:	425b      	negs	r3, r3
   3027c:	e0e0      	b.n	30440 <http_client_send_request+0x2c0>
	}

	if (module->req.ext_header != NULL) {
   3027e:	68fb      	ldr	r3, [r7, #12]
   30280:	22d4      	movs	r2, #212	; 0xd4
   30282:	589b      	ldr	r3, [r3, r2]
   30284:	2b00      	cmp	r3, #0
   30286:	d005      	beq.n	30294 <http_client_send_request+0x114>
		free(module->req.ext_header);
   30288:	68fb      	ldr	r3, [r7, #12]
   3028a:	22d4      	movs	r2, #212	; 0xd4
   3028c:	589b      	ldr	r3, [r3, r2]
   3028e:	0018      	movs	r0, r3
   30290:	4b71      	ldr	r3, [pc, #452]	; (30458 <http_client_send_request+0x2d8>)
   30292:	4798      	blx	r3
	}
	if (ext_header != NULL) {
   30294:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   30296:	2b00      	cmp	r3, #0
   30298:	d010      	beq.n	302bc <http_client_send_request+0x13c>
		module->req.ext_header = strdup(ext_header);
   3029a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   3029c:	0018      	movs	r0, r3
   3029e:	4b6f      	ldr	r3, [pc, #444]	; (3045c <http_client_send_request+0x2dc>)
   302a0:	4798      	blx	r3
   302a2:	0003      	movs	r3, r0
   302a4:	0019      	movs	r1, r3
   302a6:	68fb      	ldr	r3, [r7, #12]
   302a8:	22d4      	movs	r2, #212	; 0xd4
   302aa:	5099      	str	r1, [r3, r2]
		if (module->req.ext_header == NULL) {
   302ac:	68fb      	ldr	r3, [r7, #12]
   302ae:	22d4      	movs	r2, #212	; 0xd4
   302b0:	589b      	ldr	r3, [r3, r2]
   302b2:	2b00      	cmp	r3, #0
   302b4:	d106      	bne.n	302c4 <http_client_send_request+0x144>
			return -ENOMEM;
   302b6:	230c      	movs	r3, #12
   302b8:	425b      	negs	r3, r3
   302ba:	e0c1      	b.n	30440 <http_client_send_request+0x2c0>
		}
	} else {
		module->req.ext_header = NULL;
   302bc:	68fb      	ldr	r3, [r7, #12]
   302be:	22d4      	movs	r2, #212	; 0xd4
   302c0:	2100      	movs	r1, #0
   302c2:	5099      	str	r1, [r3, r2]
	}

	module->sending = 0;
   302c4:	68fb      	ldr	r3, [r7, #12]
   302c6:	2241      	movs	r2, #65	; 0x41
   302c8:	5c99      	ldrb	r1, [r3, r2]
   302ca:	2001      	movs	r0, #1
   302cc:	4381      	bics	r1, r0
   302ce:	5499      	strb	r1, [r3, r2]
	module->recved_size = 0;
   302d0:	68fb      	ldr	r3, [r7, #12]
   302d2:	2200      	movs	r2, #0
   302d4:	645a      	str	r2, [r3, #68]	; 0x44
	if (uri[0] == '/') {
   302d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   302d8:	781b      	ldrb	r3, [r3, #0]
   302da:	2b2f      	cmp	r3, #47	; 0x2f
   302dc:	d107      	bne.n	302ee <http_client_send_request+0x16e>
		strcpy(module->req.uri, uri);
   302de:	68fb      	ldr	r3, [r7, #12]
   302e0:	3370      	adds	r3, #112	; 0x70
   302e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   302e4:	0011      	movs	r1, r2
   302e6:	0018      	movs	r0, r3
   302e8:	4b5d      	ldr	r3, [pc, #372]	; (30460 <http_client_send_request+0x2e0>)
   302ea:	4798      	blx	r3
   302ec:	e00f      	b.n	3030e <http_client_send_request+0x18e>
		} else {
		module->req.uri[0] = '/';
   302ee:	68fb      	ldr	r3, [r7, #12]
   302f0:	2270      	movs	r2, #112	; 0x70
   302f2:	212f      	movs	r1, #47	; 0x2f
   302f4:	5499      	strb	r1, [r3, r2]
		if (uri[0] != 0) {
   302f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   302f8:	781b      	ldrb	r3, [r3, #0]
   302fa:	2b00      	cmp	r3, #0
   302fc:	d007      	beq.n	3030e <http_client_send_request+0x18e>
			strcpy(module->req.uri + 1, uri);
   302fe:	68fb      	ldr	r3, [r7, #12]
   30300:	3370      	adds	r3, #112	; 0x70
   30302:	3301      	adds	r3, #1
   30304:	6aba      	ldr	r2, [r7, #40]	; 0x28
   30306:	0011      	movs	r1, r2
   30308:	0018      	movs	r0, r3
   3030a:	4b55      	ldr	r3, [pc, #340]	; (30460 <http_client_send_request+0x2e0>)
   3030c:	4798      	blx	r3
		}
	}

	if (entity != NULL) {
   3030e:	683b      	ldr	r3, [r7, #0]
   30310:	2b00      	cmp	r3, #0
   30312:	d007      	beq.n	30324 <http_client_send_request+0x1a4>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   30314:	68fb      	ldr	r3, [r7, #12]
   30316:	33b0      	adds	r3, #176	; 0xb0
   30318:	6839      	ldr	r1, [r7, #0]
   3031a:	2218      	movs	r2, #24
   3031c:	0018      	movs	r0, r3
   3031e:	4b51      	ldr	r3, [pc, #324]	; (30464 <http_client_send_request+0x2e4>)
   30320:	4798      	blx	r3
   30322:	e006      	b.n	30332 <http_client_send_request+0x1b2>
		} else {
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   30324:	68fb      	ldr	r3, [r7, #12]
   30326:	33b0      	adds	r3, #176	; 0xb0
   30328:	2218      	movs	r2, #24
   3032a:	2100      	movs	r1, #0
   3032c:	0018      	movs	r0, r3
   3032e:	4b4e      	ldr	r3, [pc, #312]	; (30468 <http_client_send_request+0x2e8>)
   30330:	4798      	blx	r3
	}

	module->req.method = method;
   30332:	68fb      	ldr	r3, [r7, #12]
   30334:	1dfa      	adds	r2, r7, #7
   30336:	21c8      	movs	r1, #200	; 0xc8
   30338:	7812      	ldrb	r2, [r2, #0]
   3033a:	545a      	strb	r2, [r3, r1]
	
	switch (module->req.state) {
   3033c:	68fb      	ldr	r3, [r7, #12]
   3033e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   30340:	2b01      	cmp	r3, #1
   30342:	d003      	beq.n	3034c <http_client_send_request+0x1cc>
   30344:	d316      	bcc.n	30374 <http_client_send_request+0x1f4>
   30346:	2b02      	cmp	r3, #2
   30348:	d004      	beq.n	30354 <http_client_send_request+0x1d4>
   3034a:	e074      	b.n	30436 <http_client_send_request+0x2b6>
	case STATE_TRY_SOCK_CONNECT:
		if (!reconnect) {
   3034c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3034e:	2b00      	cmp	r3, #0
   30350:	d100      	bne.n	30354 <http_client_send_request+0x1d4>
   30352:	e073      	b.n	3043c <http_client_send_request+0x2bc>
			break; /* Currently try to connect to the same server. */
		}
	case STATE_SOCK_CONNECTED:
		if (!reconnect) {
   30354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30356:	2b00      	cmp	r3, #0
   30358:	d107      	bne.n	3036a <http_client_send_request+0x1ea>
			module->req.state = STATE_REQ_SEND_HEADER;
   3035a:	68fb      	ldr	r3, [r7, #12]
   3035c:	2203      	movs	r2, #3
   3035e:	66da      	str	r2, [r3, #108]	; 0x6c
			/* Send request immediately. */
			_http_client_request(module);
   30360:	68fb      	ldr	r3, [r7, #12]
   30362:	0018      	movs	r0, r3
   30364:	4b41      	ldr	r3, [pc, #260]	; (3046c <http_client_send_request+0x2ec>)
   30366:	4798      	blx	r3
			break;
   30368:	e069      	b.n	3043e <http_client_send_request+0x2be>
		} else {
			/* Request to another peer. Disconnect and try connect again. */
			_http_client_clear_conn(module, 0);
   3036a:	68fb      	ldr	r3, [r7, #12]
   3036c:	2100      	movs	r1, #0
   3036e:	0018      	movs	r0, r3
   30370:	4b3f      	ldr	r3, [pc, #252]	; (30470 <http_client_send_request+0x2f0>)
   30372:	4798      	blx	r3
		}
	case STATE_INIT:
		if (module->config.tls) {
   30374:	68fb      	ldr	r3, [r7, #12]
   30376:	2252      	movs	r2, #82	; 0x52
   30378:	5c9b      	ldrb	r3, [r3, r2]
   3037a:	2b00      	cmp	r3, #0
   3037c:	d007      	beq.n	3038e <http_client_send_request+0x20e>
			flag |= SOCKET_FLAGS_SSL;
   3037e:	2337      	movs	r3, #55	; 0x37
   30380:	18fb      	adds	r3, r7, r3
   30382:	2237      	movs	r2, #55	; 0x37
   30384:	18ba      	adds	r2, r7, r2
   30386:	7812      	ldrb	r2, [r2, #0]
   30388:	2101      	movs	r1, #1
   3038a:	430a      	orrs	r2, r1
   3038c:	701a      	strb	r2, [r3, #0]
		}
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   3038e:	2337      	movs	r3, #55	; 0x37
   30390:	18fb      	adds	r3, r7, r3
   30392:	781b      	ldrb	r3, [r3, #0]
   30394:	001a      	movs	r2, r3
   30396:	2101      	movs	r1, #1
   30398:	2002      	movs	r0, #2
   3039a:	4b36      	ldr	r3, [pc, #216]	; (30474 <http_client_send_request+0x2f4>)
   3039c:	4798      	blx	r3
   3039e:	0003      	movs	r3, r0
   303a0:	001a      	movs	r2, r3
   303a2:	68fb      	ldr	r3, [r7, #12]
   303a4:	701a      	strb	r2, [r3, #0]
		if (module->sock >= 0) {
   303a6:	68fb      	ldr	r3, [r7, #12]
   303a8:	781b      	ldrb	r3, [r3, #0]
   303aa:	b25b      	sxtb	r3, r3
   303ac:	2b00      	cmp	r3, #0
   303ae:	db3f      	blt.n	30430 <http_client_send_request+0x2b0>
			module_ref_inst[module->sock] = module;
   303b0:	68fb      	ldr	r3, [r7, #12]
   303b2:	781b      	ldrb	r3, [r3, #0]
   303b4:	b25b      	sxtb	r3, r3
   303b6:	001a      	movs	r2, r3
   303b8:	4b2f      	ldr	r3, [pc, #188]	; (30478 <http_client_send_request+0x2f8>)
   303ba:	0092      	lsls	r2, r2, #2
   303bc:	68f9      	ldr	r1, [r7, #12]
   303be:	50d1      	str	r1, [r2, r3]
			if (_is_ip(module->host)) {
   303c0:	68fb      	ldr	r3, [r7, #12]
   303c2:	3301      	adds	r3, #1
   303c4:	0018      	movs	r0, r3
   303c6:	4b2d      	ldr	r3, [pc, #180]	; (3047c <http_client_send_request+0x2fc>)
   303c8:	4798      	blx	r3
   303ca:	1e03      	subs	r3, r0, #0
   303cc:	d027      	beq.n	3041e <http_client_send_request+0x29e>
				addr_in.sin_family = AF_INET;
   303ce:	2314      	movs	r3, #20
   303d0:	18fb      	adds	r3, r7, r3
   303d2:	2202      	movs	r2, #2
   303d4:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   303d6:	68fb      	ldr	r3, [r7, #12]
   303d8:	2250      	movs	r2, #80	; 0x50
   303da:	5a9b      	ldrh	r3, [r3, r2]
   303dc:	021b      	lsls	r3, r3, #8
   303de:	b21a      	sxth	r2, r3
   303e0:	68fb      	ldr	r3, [r7, #12]
   303e2:	2150      	movs	r1, #80	; 0x50
   303e4:	5a5b      	ldrh	r3, [r3, r1]
   303e6:	0a1b      	lsrs	r3, r3, #8
   303e8:	b29b      	uxth	r3, r3
   303ea:	b21b      	sxth	r3, r3
   303ec:	4313      	orrs	r3, r2
   303ee:	b21b      	sxth	r3, r3
   303f0:	b29a      	uxth	r2, r3
   303f2:	2314      	movs	r3, #20
   303f4:	18fb      	adds	r3, r7, r3
   303f6:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   303f8:	68fb      	ldr	r3, [r7, #12]
   303fa:	3301      	adds	r3, #1
   303fc:	0018      	movs	r0, r3
   303fe:	4b20      	ldr	r3, [pc, #128]	; (30480 <http_client_send_request+0x300>)
   30400:	4798      	blx	r3
   30402:	0002      	movs	r2, r0
   30404:	2314      	movs	r3, #20
   30406:	18fb      	adds	r3, r7, r3
   30408:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   3040a:	68fb      	ldr	r3, [r7, #12]
   3040c:	781b      	ldrb	r3, [r3, #0]
   3040e:	b25b      	sxtb	r3, r3
   30410:	2214      	movs	r2, #20
   30412:	18b9      	adds	r1, r7, r2
   30414:	2210      	movs	r2, #16
   30416:	0018      	movs	r0, r3
   30418:	4b1a      	ldr	r3, [pc, #104]	; (30484 <http_client_send_request+0x304>)
   3041a:	4798      	blx	r3
   3041c:	e004      	b.n	30428 <http_client_send_request+0x2a8>
			} else {
				gethostbyname((uint8*)module->host);
   3041e:	68fb      	ldr	r3, [r7, #12]
   30420:	3301      	adds	r3, #1
   30422:	0018      	movs	r0, r3
   30424:	4b18      	ldr	r3, [pc, #96]	; (30488 <http_client_send_request+0x308>)
   30426:	4798      	blx	r3
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
   30428:	68fb      	ldr	r3, [r7, #12]
   3042a:	2201      	movs	r2, #1
   3042c:	66da      	str	r2, [r3, #108]	; 0x6c
		} else {
			return -ENOSPC;
		}
		break;
   3042e:	e006      	b.n	3043e <http_client_send_request+0x2be>
			return -ENOSPC;
   30430:	231c      	movs	r3, #28
   30432:	425b      	negs	r3, r3
   30434:	e004      	b.n	30440 <http_client_send_request+0x2c0>
	default:
		/* STATE_TRY_REQ */
		/* STATE_WAIT_RESP */
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
   30436:	230b      	movs	r3, #11
   30438:	425b      	negs	r3, r3
   3043a:	e001      	b.n	30440 <http_client_send_request+0x2c0>
			break; /* Currently try to connect to the same server. */
   3043c:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
   3043e:	2300      	movs	r3, #0
}
   30440:	0018      	movs	r0, r3
   30442:	46bd      	mov	sp, r7
   30444:	b00e      	add	sp, #56	; 0x38
   30446:	bdb0      	pop	{r4, r5, r7, pc}
   30448:	000396f4 	.word	0x000396f4
   3044c:	00034989 	.word	0x00034989
   30450:	000396fc 	.word	0x000396fc
   30454:	0003497b 	.word	0x0003497b
   30458:	00034595 	.word	0x00034595
   3045c:	00034941 	.word	0x00034941
   30460:	00034931 	.word	0x00034931
   30464:	000345a9 	.word	0x000345a9
   30468:	000345df 	.word	0x000345df
   3046c:	000305e1 	.word	0x000305e1
   30470:	0003048d 	.word	0x0003048d
   30474:	00024671 	.word	0x00024671
   30478:	200046c0 	.word	0x200046c0
   3047c:	000300e9 	.word	0x000300e9
   30480:	00024dbd 	.word	0x00024dbd
   30484:	00024885 	.word	0x00024885
   30488:	00024ec5 	.word	0x00024ec5

0003048c <_http_client_clear_conn>:

	return 0;
}

void _http_client_clear_conn(struct http_client_module *const module, int reason)
{
   3048c:	b580      	push	{r7, lr}
   3048e:	b086      	sub	sp, #24
   30490:	af00      	add	r7, sp, #0
   30492:	6078      	str	r0, [r7, #4]
   30494:	6039      	str	r1, [r7, #0]
	union http_client_data data;

	if (module->req.entity.close) {
   30496:	687b      	ldr	r3, [r7, #4]
   30498:	22c0      	movs	r2, #192	; 0xc0
   3049a:	589b      	ldr	r3, [r3, r2]
   3049c:	2b00      	cmp	r3, #0
   3049e:	d007      	beq.n	304b0 <_http_client_clear_conn+0x24>
		module->req.entity.close(module->req.entity.priv_data);
   304a0:	687b      	ldr	r3, [r7, #4]
   304a2:	22c0      	movs	r2, #192	; 0xc0
   304a4:	589b      	ldr	r3, [r3, r2]
   304a6:	687a      	ldr	r2, [r7, #4]
   304a8:	21c4      	movs	r1, #196	; 0xc4
   304aa:	5852      	ldr	r2, [r2, r1]
   304ac:	0010      	movs	r0, r2
   304ae:	4798      	blx	r3
	}

	memset(&module->req.entity, 0, sizeof(struct http_entity));
   304b0:	687b      	ldr	r3, [r7, #4]
   304b2:	33b0      	adds	r3, #176	; 0xb0
   304b4:	2218      	movs	r2, #24
   304b6:	2100      	movs	r1, #0
   304b8:	0018      	movs	r0, r3
   304ba:	4b24      	ldr	r3, [pc, #144]	; (3054c <_http_client_clear_conn+0xc0>)
   304bc:	4798      	blx	r3

	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   304be:	687b      	ldr	r3, [r7, #4]
   304c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   304c2:	2b00      	cmp	r3, #0
   304c4:	d005      	beq.n	304d2 <_http_client_clear_conn+0x46>
		close(module->sock);
   304c6:	687b      	ldr	r3, [r7, #4]
   304c8:	781b      	ldrb	r3, [r3, #0]
   304ca:	b25b      	sxtb	r3, r3
   304cc:	0018      	movs	r0, r3
   304ce:	4b20      	ldr	r3, [pc, #128]	; (30550 <_http_client_clear_conn+0xc4>)
   304d0:	4798      	blx	r3
	}

	module_ref_inst[module->sock] = NULL;
   304d2:	687b      	ldr	r3, [r7, #4]
   304d4:	781b      	ldrb	r3, [r3, #0]
   304d6:	b25b      	sxtb	r3, r3
   304d8:	001a      	movs	r2, r3
   304da:	4b1e      	ldr	r3, [pc, #120]	; (30554 <_http_client_clear_conn+0xc8>)
   304dc:	0092      	lsls	r2, r2, #2
   304de:	2100      	movs	r1, #0
   304e0:	50d1      	str	r1, [r2, r3]
	memset(&module->req, 0, sizeof(struct http_client_req));
   304e2:	687b      	ldr	r3, [r7, #4]
   304e4:	336c      	adds	r3, #108	; 0x6c
   304e6:	226c      	movs	r2, #108	; 0x6c
   304e8:	2100      	movs	r1, #0
   304ea:	0018      	movs	r0, r3
   304ec:	4b17      	ldr	r3, [pc, #92]	; (3054c <_http_client_clear_conn+0xc0>)
   304ee:	4798      	blx	r3
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   304f0:	687b      	ldr	r3, [r7, #4]
   304f2:	33d8      	adds	r3, #216	; 0xd8
   304f4:	2210      	movs	r2, #16
   304f6:	2100      	movs	r1, #0
   304f8:	0018      	movs	r0, r3
   304fa:	4b14      	ldr	r3, [pc, #80]	; (3054c <_http_client_clear_conn+0xc0>)
   304fc:	4798      	blx	r3
	module->req.state = STATE_INIT;
   304fe:	687b      	ldr	r3, [r7, #4]
   30500:	2200      	movs	r2, #0
   30502:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   30504:	687b      	ldr	r3, [r7, #4]
   30506:	22d8      	movs	r2, #216	; 0xd8
   30508:	2100      	movs	r1, #0
   3050a:	5099      	str	r1, [r3, r2]

	module->sending = 0;
   3050c:	687b      	ldr	r3, [r7, #4]
   3050e:	2241      	movs	r2, #65	; 0x41
   30510:	5c99      	ldrb	r1, [r3, r2]
   30512:	2001      	movs	r0, #1
   30514:	4381      	bics	r1, r0
   30516:	5499      	strb	r1, [r3, r2]
	module->permanent = 0;
   30518:	687b      	ldr	r3, [r7, #4]
   3051a:	2241      	movs	r2, #65	; 0x41
   3051c:	5c99      	ldrb	r1, [r3, r2]
   3051e:	2002      	movs	r0, #2
   30520:	4381      	bics	r1, r0
   30522:	5499      	strb	r1, [r3, r2]
	data.disconnected.reason = reason;
   30524:	230c      	movs	r3, #12
   30526:	18fb      	adds	r3, r7, r3
   30528:	683a      	ldr	r2, [r7, #0]
   3052a:	601a      	str	r2, [r3, #0]
	if (module->cb) {
   3052c:	687b      	ldr	r3, [r7, #4]
   3052e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30530:	2b00      	cmp	r3, #0
   30532:	d006      	beq.n	30542 <_http_client_clear_conn+0xb6>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   30534:	687b      	ldr	r3, [r7, #4]
   30536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30538:	220c      	movs	r2, #12
   3053a:	18ba      	adds	r2, r7, r2
   3053c:	6878      	ldr	r0, [r7, #4]
   3053e:	2104      	movs	r1, #4
   30540:	4798      	blx	r3
	}
}
   30542:	46c0      	nop			; (mov r8, r8)
   30544:	46bd      	mov	sp, r7
   30546:	b006      	add	sp, #24
   30548:	bd80      	pop	{r7, pc}
   3054a:	46c0      	nop			; (mov r8, r8)
   3054c:	000345df 	.word	0x000345df
   30550:	00024c7d 	.word	0x00024c7d
   30554:	200046c0 	.word	0x200046c0

00030558 <_http_client_send_wait>:

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   30558:	b590      	push	{r4, r7, lr}
   3055a:	b087      	sub	sp, #28
   3055c:	af00      	add	r7, sp, #0
   3055e:	60f8      	str	r0, [r7, #12]
   30560:	60b9      	str	r1, [r7, #8]
   30562:	607a      	str	r2, [r7, #4]
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
   30564:	68fb      	ldr	r3, [r7, #12]
   30566:	617b      	str	r3, [r7, #20]
	
	module->sending = 1;
   30568:	697b      	ldr	r3, [r7, #20]
   3056a:	2241      	movs	r2, #65	; 0x41
   3056c:	5c99      	ldrb	r1, [r3, r2]
   3056e:	2001      	movs	r0, #1
   30570:	4301      	orrs	r1, r0
   30572:	5499      	strb	r1, [r3, r2]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   30574:	697b      	ldr	r3, [r7, #20]
   30576:	2000      	movs	r0, #0
   30578:	5618      	ldrsb	r0, [r3, r0]
   3057a:	687b      	ldr	r3, [r7, #4]
   3057c:	b29a      	uxth	r2, r3
   3057e:	68b9      	ldr	r1, [r7, #8]
   30580:	2300      	movs	r3, #0
   30582:	4c14      	ldr	r4, [pc, #80]	; (305d4 <_http_client_send_wait+0x7c>)
   30584:	47a0      	blx	r4
   30586:	0003      	movs	r3, r0
   30588:	613b      	str	r3, [r7, #16]
   3058a:	693b      	ldr	r3, [r7, #16]
   3058c:	2b00      	cmp	r3, #0
   3058e:	da0f      	bge.n	305b0 <_http_client_send_wait+0x58>
		module->sending = 0;
   30590:	697b      	ldr	r3, [r7, #20]
   30592:	2241      	movs	r2, #65	; 0x41
   30594:	5c99      	ldrb	r1, [r3, r2]
   30596:	2001      	movs	r0, #1
   30598:	4381      	bics	r1, r0
   3059a:	5499      	strb	r1, [r3, r2]
		return result;
   3059c:	693b      	ldr	r3, [r7, #16]
   3059e:	e014      	b.n	305ca <_http_client_send_wait+0x72>
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
		m2m_wifi_handle_events(NULL);
   305a0:	2000      	movs	r0, #0
   305a2:	4b0d      	ldr	r3, [pc, #52]	; (305d8 <_http_client_send_wait+0x80>)
   305a4:	4798      	blx	r3
		sw_timer_task(module->config.timer_inst);
   305a6:	697b      	ldr	r3, [r7, #20]
   305a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   305aa:	0018      	movs	r0, r3
   305ac:	4b0b      	ldr	r3, [pc, #44]	; (305dc <_http_client_send_wait+0x84>)
   305ae:	4798      	blx	r3
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   305b0:	697b      	ldr	r3, [r7, #20]
   305b2:	2241      	movs	r2, #65	; 0x41
   305b4:	5c9b      	ldrb	r3, [r3, r2]
   305b6:	2201      	movs	r2, #1
   305b8:	4013      	ands	r3, r2
   305ba:	b2db      	uxtb	r3, r3
   305bc:	2b00      	cmp	r3, #0
   305be:	d003      	beq.n	305c8 <_http_client_send_wait+0x70>
   305c0:	697b      	ldr	r3, [r7, #20]
   305c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   305c4:	2b02      	cmp	r3, #2
   305c6:	d8eb      	bhi.n	305a0 <_http_client_send_wait+0x48>
	}

	return 0;
   305c8:	2300      	movs	r3, #0
}
   305ca:	0018      	movs	r0, r3
   305cc:	46bd      	mov	sp, r7
   305ce:	b007      	add	sp, #28
   305d0:	bd90      	pop	{r4, r7, pc}
   305d2:	46c0      	nop			; (mov r8, r8)
   305d4:	00024999 	.word	0x00024999
   305d8:	00021045 	.word	0x00021045
   305dc:	00031865 	.word	0x00031865

000305e0 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   305e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   305e2:	46c6      	mov	lr, r8
   305e4:	b500      	push	{lr}
   305e6:	b0a0      	sub	sp, #128	; 0x80
   305e8:	af02      	add	r7, sp, #8
   305ea:	61f8      	str	r0, [r7, #28]
   305ec:	4668      	mov	r0, sp
   305ee:	61b8      	str	r0, [r7, #24]
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   305f0:	2318      	movs	r3, #24
   305f2:	2218      	movs	r2, #24
   305f4:	18ba      	adds	r2, r7, r2
   305f6:	18d0      	adds	r0, r2, r3
   305f8:	4bbd      	ldr	r3, [pc, #756]	; (308f0 <_http_client_request+0x310>)
   305fa:	469c      	mov	ip, r3
   305fc:	4663      	mov	r3, ip
   305fe:	cb16      	ldmia	r3!, {r1, r2, r4}
   30600:	c016      	stmia	r0!, {r1, r2, r4}
   30602:	469c      	mov	ip, r3
   30604:	4663      	mov	r3, ip
   30606:	681b      	ldr	r3, [r3, #0]
   30608:	469c      	mov	ip, r3
   3060a:	4663      	mov	r3, ip
   3060c:	6003      	str	r3, [r0, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   3060e:	69f8      	ldr	r0, [r7, #28]
   30610:	6e40      	ldr	r0, [r0, #100]	; 0x64
   30612:	4684      	mov	ip, r0
   30614:	2301      	movs	r3, #1
   30616:	425b      	negs	r3, r3
   30618:	4698      	mov	r8, r3
   3061a:	44c4      	add	ip, r8
   3061c:	4663      	mov	r3, ip
   3061e:	66fb      	str	r3, [r7, #108]	; 0x6c
   30620:	6038      	str	r0, [r7, #0]
   30622:	2300      	movs	r3, #0
   30624:	607b      	str	r3, [r7, #4]
   30626:	6839      	ldr	r1, [r7, #0]
   30628:	687a      	ldr	r2, [r7, #4]
   3062a:	000b      	movs	r3, r1
   3062c:	0f5b      	lsrs	r3, r3, #29
   3062e:	469c      	mov	ip, r3
   30630:	0013      	movs	r3, r2
   30632:	00db      	lsls	r3, r3, #3
   30634:	617b      	str	r3, [r7, #20]
   30636:	4663      	mov	r3, ip
   30638:	697c      	ldr	r4, [r7, #20]
   3063a:	431c      	orrs	r4, r3
   3063c:	617c      	str	r4, [r7, #20]
   3063e:	000b      	movs	r3, r1
   30640:	00db      	lsls	r3, r3, #3
   30642:	613b      	str	r3, [r7, #16]
   30644:	0005      	movs	r5, r0
   30646:	2200      	movs	r2, #0
   30648:	0016      	movs	r6, r2
   3064a:	0f6a      	lsrs	r2, r5, #29
   3064c:	00f3      	lsls	r3, r6, #3
   3064e:	60fb      	str	r3, [r7, #12]
   30650:	68fb      	ldr	r3, [r7, #12]
   30652:	4313      	orrs	r3, r2
   30654:	60fb      	str	r3, [r7, #12]
   30656:	00eb      	lsls	r3, r5, #3
   30658:	60bb      	str	r3, [r7, #8]
   3065a:	1dc3      	adds	r3, r0, #7
   3065c:	08db      	lsrs	r3, r3, #3
   3065e:	00db      	lsls	r3, r3, #3
   30660:	466a      	mov	r2, sp
   30662:	1ad3      	subs	r3, r2, r3
   30664:	469d      	mov	sp, r3
   30666:	ab02      	add	r3, sp, #8
   30668:	3300      	adds	r3, #0
   3066a:	66bb      	str	r3, [r7, #104]	; 0x68

	if (module == NULL) {
   3066c:	69fb      	ldr	r3, [r7, #28]
   3066e:	2b00      	cmp	r3, #0
   30670:	d100      	bne.n	30674 <_http_client_request+0x94>
   30672:	e346      	b.n	30d02 <_http_client_request+0x722>
		return;
	}

	if (module->sending != 0) {
   30674:	69fb      	ldr	r3, [r7, #28]
   30676:	2241      	movs	r2, #65	; 0x41
   30678:	5c9b      	ldrb	r3, [r3, r2]
   3067a:	2201      	movs	r2, #1
   3067c:	4013      	ands	r3, r2
   3067e:	b2db      	uxtb	r3, r3
   30680:	2b00      	cmp	r3, #0
   30682:	d000      	beq.n	30686 <_http_client_request+0xa6>
   30684:	e33f      	b.n	30d06 <_http_client_request+0x726>
		/* Device is busy. */
		return;
	}

	entity = &module->req.entity;
   30686:	69fb      	ldr	r3, [r7, #28]
   30688:	33b0      	adds	r3, #176	; 0xb0
   3068a:	667b      	str	r3, [r7, #100]	; 0x64

	switch (module->req.state) {
   3068c:	69fb      	ldr	r3, [r7, #28]
   3068e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   30690:	2b03      	cmp	r3, #3
   30692:	d003      	beq.n	3069c <_http_client_request+0xbc>
   30694:	2b04      	cmp	r3, #4
   30696:	d100      	bne.n	3069a <_http_client_request+0xba>
   30698:	e1b3      	b.n	30a02 <_http_client_request+0x422>
		}

		break;
	default:
		/* Invalid status. */
		break;
   3069a:	e32f      	b.n	30cfc <_http_client_request+0x71c>
		module->req.content_length = 0;
   3069c:	69fb      	ldr	r3, [r7, #28]
   3069e:	22cc      	movs	r2, #204	; 0xcc
   306a0:	2100      	movs	r1, #0
   306a2:	5099      	str	r1, [r3, r2]
		module->req.sent_length = 0;
   306a4:	69fb      	ldr	r3, [r7, #28]
   306a6:	22d0      	movs	r2, #208	; 0xd0
   306a8:	2100      	movs	r1, #0
   306aa:	5099      	str	r1, [r3, r2]
		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   306ac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   306ae:	69fb      	ldr	r3, [r7, #28]
   306b0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   306b2:	4c90      	ldr	r4, [pc, #576]	; (308f4 <_http_client_request+0x314>)
   306b4:	2334      	movs	r3, #52	; 0x34
   306b6:	2018      	movs	r0, #24
   306b8:	1838      	adds	r0, r7, r0
   306ba:	18c0      	adds	r0, r0, r3
   306bc:	69fb      	ldr	r3, [r7, #28]
   306be:	9300      	str	r3, [sp, #0]
   306c0:	0023      	movs	r3, r4
   306c2:	4c8d      	ldr	r4, [pc, #564]	; (308f8 <_http_client_request+0x318>)
   306c4:	47a0      	blx	r4
		if (module->req.method == HTTP_METHOD_GET) {
   306c6:	69fb      	ldr	r3, [r7, #28]
   306c8:	22c8      	movs	r2, #200	; 0xc8
   306ca:	5c9b      	ldrb	r3, [r3, r2]
   306cc:	2b01      	cmp	r3, #1
   306ce:	d10a      	bne.n	306e6 <_http_client_request+0x106>
			stream_writer_send_buffer(&writer, "GET ", 4);
   306d0:	498a      	ldr	r1, [pc, #552]	; (308fc <_http_client_request+0x31c>)
   306d2:	2334      	movs	r3, #52	; 0x34
   306d4:	2218      	movs	r2, #24
   306d6:	4694      	mov	ip, r2
   306d8:	44bc      	add	ip, r7
   306da:	4463      	add	r3, ip
   306dc:	2204      	movs	r2, #4
   306de:	0018      	movs	r0, r3
   306e0:	4b87      	ldr	r3, [pc, #540]	; (30900 <_http_client_request+0x320>)
   306e2:	4798      	blx	r3
   306e4:	e04e      	b.n	30784 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_POST) {
   306e6:	69fb      	ldr	r3, [r7, #28]
   306e8:	22c8      	movs	r2, #200	; 0xc8
   306ea:	5c9b      	ldrb	r3, [r3, r2]
   306ec:	2b02      	cmp	r3, #2
   306ee:	d10a      	bne.n	30706 <_http_client_request+0x126>
			stream_writer_send_buffer(&writer, "POST ", 5);
   306f0:	4984      	ldr	r1, [pc, #528]	; (30904 <_http_client_request+0x324>)
   306f2:	2334      	movs	r3, #52	; 0x34
   306f4:	2218      	movs	r2, #24
   306f6:	4694      	mov	ip, r2
   306f8:	44bc      	add	ip, r7
   306fa:	4463      	add	r3, ip
   306fc:	2205      	movs	r2, #5
   306fe:	0018      	movs	r0, r3
   30700:	4b7f      	ldr	r3, [pc, #508]	; (30900 <_http_client_request+0x320>)
   30702:	4798      	blx	r3
   30704:	e03e      	b.n	30784 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   30706:	69fb      	ldr	r3, [r7, #28]
   30708:	22c8      	movs	r2, #200	; 0xc8
   3070a:	5c9b      	ldrb	r3, [r3, r2]
   3070c:	2b03      	cmp	r3, #3
   3070e:	d10a      	bne.n	30726 <_http_client_request+0x146>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   30710:	497d      	ldr	r1, [pc, #500]	; (30908 <_http_client_request+0x328>)
   30712:	2334      	movs	r3, #52	; 0x34
   30714:	2218      	movs	r2, #24
   30716:	4694      	mov	ip, r2
   30718:	44bc      	add	ip, r7
   3071a:	4463      	add	r3, ip
   3071c:	2207      	movs	r2, #7
   3071e:	0018      	movs	r0, r3
   30720:	4b77      	ldr	r3, [pc, #476]	; (30900 <_http_client_request+0x320>)
   30722:	4798      	blx	r3
   30724:	e02e      	b.n	30784 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_PUT) {
   30726:	69fb      	ldr	r3, [r7, #28]
   30728:	22c8      	movs	r2, #200	; 0xc8
   3072a:	5c9b      	ldrb	r3, [r3, r2]
   3072c:	2b04      	cmp	r3, #4
   3072e:	d10a      	bne.n	30746 <_http_client_request+0x166>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   30730:	4976      	ldr	r1, [pc, #472]	; (3090c <_http_client_request+0x32c>)
   30732:	2334      	movs	r3, #52	; 0x34
   30734:	2218      	movs	r2, #24
   30736:	4694      	mov	ip, r2
   30738:	44bc      	add	ip, r7
   3073a:	4463      	add	r3, ip
   3073c:	2204      	movs	r2, #4
   3073e:	0018      	movs	r0, r3
   30740:	4b6f      	ldr	r3, [pc, #444]	; (30900 <_http_client_request+0x320>)
   30742:	4798      	blx	r3
   30744:	e01e      	b.n	30784 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   30746:	69fb      	ldr	r3, [r7, #28]
   30748:	22c8      	movs	r2, #200	; 0xc8
   3074a:	5c9b      	ldrb	r3, [r3, r2]
   3074c:	2b05      	cmp	r3, #5
   3074e:	d10a      	bne.n	30766 <_http_client_request+0x186>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   30750:	496f      	ldr	r1, [pc, #444]	; (30910 <_http_client_request+0x330>)
   30752:	2334      	movs	r3, #52	; 0x34
   30754:	2218      	movs	r2, #24
   30756:	4694      	mov	ip, r2
   30758:	44bc      	add	ip, r7
   3075a:	4463      	add	r3, ip
   3075c:	2208      	movs	r2, #8
   3075e:	0018      	movs	r0, r3
   30760:	4b67      	ldr	r3, [pc, #412]	; (30900 <_http_client_request+0x320>)
   30762:	4798      	blx	r3
   30764:	e00e      	b.n	30784 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   30766:	69fb      	ldr	r3, [r7, #28]
   30768:	22c8      	movs	r2, #200	; 0xc8
   3076a:	5c9b      	ldrb	r3, [r3, r2]
   3076c:	2b06      	cmp	r3, #6
   3076e:	d109      	bne.n	30784 <_http_client_request+0x1a4>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   30770:	4968      	ldr	r1, [pc, #416]	; (30914 <_http_client_request+0x334>)
   30772:	2334      	movs	r3, #52	; 0x34
   30774:	2218      	movs	r2, #24
   30776:	4694      	mov	ip, r2
   30778:	44bc      	add	ip, r7
   3077a:	4463      	add	r3, ip
   3077c:	2205      	movs	r2, #5
   3077e:	0018      	movs	r0, r3
   30780:	4b5f      	ldr	r3, [pc, #380]	; (30900 <_http_client_request+0x320>)
   30782:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   30784:	69fb      	ldr	r3, [r7, #28]
   30786:	3370      	adds	r3, #112	; 0x70
   30788:	001c      	movs	r4, r3
   3078a:	69fb      	ldr	r3, [r7, #28]
   3078c:	3370      	adds	r3, #112	; 0x70
   3078e:	0018      	movs	r0, r3
   30790:	4b61      	ldr	r3, [pc, #388]	; (30918 <_http_client_request+0x338>)
   30792:	4798      	blx	r3
   30794:	0002      	movs	r2, r0
   30796:	2334      	movs	r3, #52	; 0x34
   30798:	2118      	movs	r1, #24
   3079a:	468c      	mov	ip, r1
   3079c:	44bc      	add	ip, r7
   3079e:	4463      	add	r3, ip
   307a0:	0021      	movs	r1, r4
   307a2:	0018      	movs	r0, r3
   307a4:	4b56      	ldr	r3, [pc, #344]	; (30900 <_http_client_request+0x320>)
   307a6:	4798      	blx	r3
		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   307a8:	495c      	ldr	r1, [pc, #368]	; (3091c <_http_client_request+0x33c>)
   307aa:	2334      	movs	r3, #52	; 0x34
   307ac:	2218      	movs	r2, #24
   307ae:	4694      	mov	ip, r2
   307b0:	44bc      	add	ip, r7
   307b2:	4463      	add	r3, ip
   307b4:	220b      	movs	r2, #11
   307b6:	0018      	movs	r0, r3
   307b8:	4b51      	ldr	r3, [pc, #324]	; (30900 <_http_client_request+0x320>)
   307ba:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   307bc:	4958      	ldr	r1, [pc, #352]	; (30920 <_http_client_request+0x340>)
   307be:	2334      	movs	r3, #52	; 0x34
   307c0:	2218      	movs	r2, #24
   307c2:	4694      	mov	ip, r2
   307c4:	44bc      	add	ip, r7
   307c6:	4463      	add	r3, ip
   307c8:	220c      	movs	r2, #12
   307ca:	0018      	movs	r0, r3
   307cc:	4b4c      	ldr	r3, [pc, #304]	; (30900 <_http_client_request+0x320>)
   307ce:	4798      	blx	r3
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   307d0:	69fb      	ldr	r3, [r7, #28]
   307d2:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   307d4:	69fb      	ldr	r3, [r7, #28]
   307d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   307d8:	0018      	movs	r0, r3
   307da:	4b4f      	ldr	r3, [pc, #316]	; (30918 <_http_client_request+0x338>)
   307dc:	4798      	blx	r3
   307de:	0002      	movs	r2, r0
   307e0:	2334      	movs	r3, #52	; 0x34
   307e2:	2118      	movs	r1, #24
   307e4:	468c      	mov	ip, r1
   307e6:	44bc      	add	ip, r7
   307e8:	4463      	add	r3, ip
   307ea:	0021      	movs	r1, r4
   307ec:	0018      	movs	r0, r3
   307ee:	4b44      	ldr	r3, [pc, #272]	; (30900 <_http_client_request+0x320>)
   307f0:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   307f2:	494c      	ldr	r1, [pc, #304]	; (30924 <_http_client_request+0x344>)
   307f4:	2334      	movs	r3, #52	; 0x34
   307f6:	2218      	movs	r2, #24
   307f8:	4694      	mov	ip, r2
   307fa:	44bc      	add	ip, r7
   307fc:	4463      	add	r3, ip
   307fe:	2202      	movs	r2, #2
   30800:	0018      	movs	r0, r3
   30802:	4b3f      	ldr	r3, [pc, #252]	; (30900 <_http_client_request+0x320>)
   30804:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   30806:	4948      	ldr	r1, [pc, #288]	; (30928 <_http_client_request+0x348>)
   30808:	2334      	movs	r3, #52	; 0x34
   3080a:	2218      	movs	r2, #24
   3080c:	4694      	mov	ip, r2
   3080e:	44bc      	add	ip, r7
   30810:	4463      	add	r3, ip
   30812:	2206      	movs	r2, #6
   30814:	0018      	movs	r0, r3
   30816:	4b3a      	ldr	r3, [pc, #232]	; (30900 <_http_client_request+0x320>)
   30818:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   3081a:	69fb      	ldr	r3, [r7, #28]
   3081c:	1c5c      	adds	r4, r3, #1
   3081e:	69fb      	ldr	r3, [r7, #28]
   30820:	3301      	adds	r3, #1
   30822:	0018      	movs	r0, r3
   30824:	4b3c      	ldr	r3, [pc, #240]	; (30918 <_http_client_request+0x338>)
   30826:	4798      	blx	r3
   30828:	0002      	movs	r2, r0
   3082a:	2334      	movs	r3, #52	; 0x34
   3082c:	2118      	movs	r1, #24
   3082e:	468c      	mov	ip, r1
   30830:	44bc      	add	ip, r7
   30832:	4463      	add	r3, ip
   30834:	0021      	movs	r1, r4
   30836:	0018      	movs	r0, r3
   30838:	4b31      	ldr	r3, [pc, #196]	; (30900 <_http_client_request+0x320>)
   3083a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   3083c:	4939      	ldr	r1, [pc, #228]	; (30924 <_http_client_request+0x344>)
   3083e:	2334      	movs	r3, #52	; 0x34
   30840:	2218      	movs	r2, #24
   30842:	4694      	mov	ip, r2
   30844:	44bc      	add	ip, r7
   30846:	4463      	add	r3, ip
   30848:	2202      	movs	r2, #2
   3084a:	0018      	movs	r0, r3
   3084c:	4b2c      	ldr	r3, [pc, #176]	; (30900 <_http_client_request+0x320>)
   3084e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   30850:	4936      	ldr	r1, [pc, #216]	; (3092c <_http_client_request+0x34c>)
   30852:	2334      	movs	r3, #52	; 0x34
   30854:	2218      	movs	r2, #24
   30856:	4694      	mov	ip, r2
   30858:	44bc      	add	ip, r7
   3085a:	4463      	add	r3, ip
   3085c:	2218      	movs	r2, #24
   3085e:	0018      	movs	r0, r3
   30860:	4b27      	ldr	r3, [pc, #156]	; (30900 <_http_client_request+0x320>)
   30862:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   30864:	4932      	ldr	r1, [pc, #200]	; (30930 <_http_client_request+0x350>)
   30866:	2334      	movs	r3, #52	; 0x34
   30868:	2218      	movs	r2, #24
   3086a:	4694      	mov	ip, r2
   3086c:	44bc      	add	ip, r7
   3086e:	4463      	add	r3, ip
   30870:	2213      	movs	r2, #19
   30872:	0018      	movs	r0, r3
   30874:	4b22      	ldr	r3, [pc, #136]	; (30900 <_http_client_request+0x320>)
   30876:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   30878:	492e      	ldr	r1, [pc, #184]	; (30934 <_http_client_request+0x354>)
   3087a:	2334      	movs	r3, #52	; 0x34
   3087c:	2218      	movs	r2, #24
   3087e:	4694      	mov	ip, r2
   30880:	44bc      	add	ip, r7
   30882:	4463      	add	r3, ip
   30884:	2217      	movs	r2, #23
   30886:	0018      	movs	r0, r3
   30888:	4b1d      	ldr	r3, [pc, #116]	; (30900 <_http_client_request+0x320>)
   3088a:	4798      	blx	r3
		if (entity->read != NULL) {
   3088c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3088e:	68db      	ldr	r3, [r3, #12]
   30890:	2b00      	cmp	r3, #0
   30892:	d100      	bne.n	30896 <_http_client_request+0x2b6>
   30894:	e088      	b.n	309a8 <_http_client_request+0x3c8>
			if (entity->is_chunked) {
   30896:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30898:	781b      	ldrb	r3, [r3, #0]
   3089a:	2b00      	cmp	r3, #0
   3089c:	d00f      	beq.n	308be <_http_client_request+0x2de>
				module->req.content_length = -1;
   3089e:	69fb      	ldr	r3, [r7, #28]
   308a0:	21cc      	movs	r1, #204	; 0xcc
   308a2:	2201      	movs	r2, #1
   308a4:	4252      	negs	r2, r2
   308a6:	505a      	str	r2, [r3, r1]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   308a8:	4923      	ldr	r1, [pc, #140]	; (30938 <_http_client_request+0x358>)
   308aa:	2334      	movs	r3, #52	; 0x34
   308ac:	2218      	movs	r2, #24
   308ae:	4694      	mov	ip, r2
   308b0:	44bc      	add	ip, r7
   308b2:	4463      	add	r3, ip
   308b4:	221c      	movs	r2, #28
   308b6:	0018      	movs	r0, r3
   308b8:	4b11      	ldr	r3, [pc, #68]	; (30900 <_http_client_request+0x320>)
   308ba:	4798      	blx	r3
   308bc:	e074      	b.n	309a8 <_http_client_request+0x3c8>
			} else if(entity->get_contents_length) {
   308be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   308c0:	689b      	ldr	r3, [r3, #8]
   308c2:	2b00      	cmp	r3, #0
   308c4:	d070      	beq.n	309a8 <_http_client_request+0x3c8>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   308c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   308c8:	689a      	ldr	r2, [r3, #8]
   308ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   308cc:	695b      	ldr	r3, [r3, #20]
   308ce:	0018      	movs	r0, r3
   308d0:	4790      	blx	r2
   308d2:	0001      	movs	r1, r0
   308d4:	69fb      	ldr	r3, [r7, #28]
   308d6:	22cc      	movs	r2, #204	; 0xcc
   308d8:	5099      	str	r1, [r3, r2]
				if (module->req.content_length < 0) {
   308da:	69fb      	ldr	r3, [r7, #28]
   308dc:	22cc      	movs	r2, #204	; 0xcc
   308de:	589b      	ldr	r3, [r3, r2]
   308e0:	2b00      	cmp	r3, #0
   308e2:	da2b      	bge.n	3093c <_http_client_request+0x35c>
					module->req.content_length = 0;
   308e4:	69fb      	ldr	r3, [r7, #28]
   308e6:	22cc      	movs	r2, #204	; 0xcc
   308e8:	2100      	movs	r1, #0
   308ea:	5099      	str	r1, [r3, r2]
   308ec:	e05c      	b.n	309a8 <_http_client_request+0x3c8>
   308ee:	46c0      	nop			; (mov r8, r8)
   308f0:	000397e4 	.word	0x000397e4
   308f4:	00030559 	.word	0x00030559
   308f8:	000314c1 	.word	0x000314c1
   308fc:	00039708 	.word	0x00039708
   30900:	00031541 	.word	0x00031541
   30904:	00039710 	.word	0x00039710
   30908:	00039718 	.word	0x00039718
   3090c:	00039720 	.word	0x00039720
   30910:	00039728 	.word	0x00039728
   30914:	00039734 	.word	0x00039734
   30918:	0003497b 	.word	0x0003497b
   3091c:	0003973c 	.word	0x0003973c
   30920:	00039748 	.word	0x00039748
   30924:	00039758 	.word	0x00039758
   30928:	0003975c 	.word	0x0003975c
   3092c:	00039764 	.word	0x00039764
   30930:	00039780 	.word	0x00039780
   30934:	00039794 	.word	0x00039794
   30938:	000397ac 	.word	0x000397ac
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   3093c:	69fb      	ldr	r3, [r7, #28]
   3093e:	22cc      	movs	r2, #204	; 0xcc
   30940:	589b      	ldr	r3, [r3, r2]
   30942:	001a      	movs	r2, r3
   30944:	49e0      	ldr	r1, [pc, #896]	; (30cc8 <_http_client_request+0x6e8>)
   30946:	2328      	movs	r3, #40	; 0x28
   30948:	2018      	movs	r0, #24
   3094a:	4684      	mov	ip, r0
   3094c:	44bc      	add	ip, r7
   3094e:	4463      	add	r3, ip
   30950:	0018      	movs	r0, r3
   30952:	4bde      	ldr	r3, [pc, #888]	; (30ccc <_http_client_request+0x6ec>)
   30954:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   30956:	49de      	ldr	r1, [pc, #888]	; (30cd0 <_http_client_request+0x6f0>)
   30958:	2334      	movs	r3, #52	; 0x34
   3095a:	2218      	movs	r2, #24
   3095c:	4694      	mov	ip, r2
   3095e:	44bc      	add	ip, r7
   30960:	4463      	add	r3, ip
   30962:	2210      	movs	r2, #16
   30964:	0018      	movs	r0, r3
   30966:	4bdb      	ldr	r3, [pc, #876]	; (30cd4 <_http_client_request+0x6f4>)
   30968:	4798      	blx	r3
					stream_writer_send_buffer(&writer, length, strlen(length));
   3096a:	2328      	movs	r3, #40	; 0x28
   3096c:	2218      	movs	r2, #24
   3096e:	4694      	mov	ip, r2
   30970:	44bc      	add	ip, r7
   30972:	4463      	add	r3, ip
   30974:	0018      	movs	r0, r3
   30976:	4bd8      	ldr	r3, [pc, #864]	; (30cd8 <_http_client_request+0x6f8>)
   30978:	4798      	blx	r3
   3097a:	0002      	movs	r2, r0
   3097c:	2328      	movs	r3, #40	; 0x28
   3097e:	2118      	movs	r1, #24
   30980:	1879      	adds	r1, r7, r1
   30982:	18c9      	adds	r1, r1, r3
   30984:	2334      	movs	r3, #52	; 0x34
   30986:	2018      	movs	r0, #24
   30988:	4684      	mov	ip, r0
   3098a:	44bc      	add	ip, r7
   3098c:	4463      	add	r3, ip
   3098e:	0018      	movs	r0, r3
   30990:	4bd0      	ldr	r3, [pc, #832]	; (30cd4 <_http_client_request+0x6f4>)
   30992:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   30994:	49d1      	ldr	r1, [pc, #836]	; (30cdc <_http_client_request+0x6fc>)
   30996:	2334      	movs	r3, #52	; 0x34
   30998:	2218      	movs	r2, #24
   3099a:	4694      	mov	ip, r2
   3099c:	44bc      	add	ip, r7
   3099e:	4463      	add	r3, ip
   309a0:	2202      	movs	r2, #2
   309a2:	0018      	movs	r0, r3
   309a4:	4bcb      	ldr	r3, [pc, #812]	; (30cd4 <_http_client_request+0x6f4>)
   309a6:	4798      	blx	r3
		if (module->req.ext_header != NULL ) {
   309a8:	69fb      	ldr	r3, [r7, #28]
   309aa:	22d4      	movs	r2, #212	; 0xd4
   309ac:	589b      	ldr	r3, [r3, r2]
   309ae:	2b00      	cmp	r3, #0
   309b0:	d012      	beq.n	309d8 <_http_client_request+0x3f8>
				module->req.ext_header,
   309b2:	69fb      	ldr	r3, [r7, #28]
   309b4:	22d4      	movs	r2, #212	; 0xd4
   309b6:	589c      	ldr	r4, [r3, r2]
				strlen(module->req.ext_header));
   309b8:	69fb      	ldr	r3, [r7, #28]
   309ba:	22d4      	movs	r2, #212	; 0xd4
   309bc:	589b      	ldr	r3, [r3, r2]
			stream_writer_send_buffer(&writer,
   309be:	0018      	movs	r0, r3
   309c0:	4bc5      	ldr	r3, [pc, #788]	; (30cd8 <_http_client_request+0x6f8>)
   309c2:	4798      	blx	r3
   309c4:	0002      	movs	r2, r0
   309c6:	2334      	movs	r3, #52	; 0x34
   309c8:	2118      	movs	r1, #24
   309ca:	468c      	mov	ip, r1
   309cc:	44bc      	add	ip, r7
   309ce:	4463      	add	r3, ip
   309d0:	0021      	movs	r1, r4
   309d2:	0018      	movs	r0, r3
   309d4:	4bbf      	ldr	r3, [pc, #764]	; (30cd4 <_http_client_request+0x6f4>)
   309d6:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   309d8:	49c0      	ldr	r1, [pc, #768]	; (30cdc <_http_client_request+0x6fc>)
   309da:	2334      	movs	r3, #52	; 0x34
   309dc:	2218      	movs	r2, #24
   309de:	4694      	mov	ip, r2
   309e0:	44bc      	add	ip, r7
   309e2:	4463      	add	r3, ip
   309e4:	2202      	movs	r2, #2
   309e6:	0018      	movs	r0, r3
   309e8:	4bba      	ldr	r3, [pc, #744]	; (30cd4 <_http_client_request+0x6f4>)
   309ea:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   309ec:	2334      	movs	r3, #52	; 0x34
   309ee:	2218      	movs	r2, #24
   309f0:	4694      	mov	ip, r2
   309f2:	44bc      	add	ip, r7
   309f4:	4463      	add	r3, ip
   309f6:	0018      	movs	r0, r3
   309f8:	4bb9      	ldr	r3, [pc, #740]	; (30ce0 <_http_client_request+0x700>)
   309fa:	4798      	blx	r3
		module->req.state = STATE_REQ_SEND_ENTITY;
   309fc:	69fb      	ldr	r3, [r7, #28]
   309fe:	2204      	movs	r2, #4
   30a00:	66da      	str	r2, [r3, #108]	; 0x6c
		if (module->req.content_length < 0 && entity->read) {
   30a02:	69fb      	ldr	r3, [r7, #28]
   30a04:	22cc      	movs	r2, #204	; 0xcc
   30a06:	589b      	ldr	r3, [r3, r2]
   30a08:	2b00      	cmp	r3, #0
   30a0a:	db00      	blt.n	30a0e <_http_client_request+0x42e>
   30a0c:	e0c6      	b.n	30b9c <_http_client_request+0x5bc>
   30a0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30a10:	68db      	ldr	r3, [r3, #12]
   30a12:	2b00      	cmp	r3, #0
   30a14:	d100      	bne.n	30a18 <_http_client_request+0x438>
   30a16:	e0c1      	b.n	30b9c <_http_client_request+0x5bc>
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   30a18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30a1a:	68dc      	ldr	r4, [r3, #12]
   30a1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30a1e:	6958      	ldr	r0, [r3, #20]
   30a20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   30a22:	1d59      	adds	r1, r3, #5
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   30a24:	69fb      	ldr	r3, [r7, #28]
   30a26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   30a28:	1fdd      	subs	r5, r3, #7
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   30a2a:	69fb      	ldr	r3, [r7, #28]
   30a2c:	22d0      	movs	r2, #208	; 0xd0
   30a2e:	589b      	ldr	r3, [r3, r2]
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   30a30:	002a      	movs	r2, r5
   30a32:	47a0      	blx	r4
   30a34:	0003      	movs	r3, r0
   30a36:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   30a38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30a3a:	2b00      	cmp	r3, #0
   30a3c:	da01      	bge.n	30a42 <_http_client_request+0x462>
				size = 0;
   30a3e:	2300      	movs	r3, #0
   30a40:	677b      	str	r3, [r7, #116]	; 0x74
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   30a42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   30a44:	220a      	movs	r2, #10
   30a46:	711a      	strb	r2, [r3, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   30a48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   30a4a:	220d      	movs	r2, #13
   30a4c:	70da      	strb	r2, [r3, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   30a4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30a50:	3305      	adds	r3, #5
   30a52:	6eba      	ldr	r2, [r7, #104]	; 0x68
   30a54:	210d      	movs	r1, #13
   30a56:	54d1      	strb	r1, [r2, r3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   30a58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30a5a:	3306      	adds	r3, #6
   30a5c:	6eba      	ldr	r2, [r7, #104]	; 0x68
   30a5e:	210a      	movs	r1, #10
   30a60:	54d1      	strb	r1, [r2, r3]
			if (size >= 0) {
   30a62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30a64:	2b00      	cmp	r3, #0
   30a66:	db14      	blt.n	30a92 <_http_client_request+0x4b2>
				ptr = buffer + 2;
   30a68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   30a6a:	3302      	adds	r3, #2
   30a6c:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[size % 16];
   30a6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30a70:	4a9c      	ldr	r2, [pc, #624]	; (30ce4 <_http_client_request+0x704>)
   30a72:	4013      	ands	r3, r2
   30a74:	d504      	bpl.n	30a80 <_http_client_request+0x4a0>
   30a76:	3b01      	subs	r3, #1
   30a78:	2210      	movs	r2, #16
   30a7a:	4252      	negs	r2, r2
   30a7c:	4313      	orrs	r3, r2
   30a7e:	3301      	adds	r3, #1
   30a80:	001a      	movs	r2, r3
   30a82:	2318      	movs	r3, #24
   30a84:	2118      	movs	r1, #24
   30a86:	468c      	mov	ip, r1
   30a88:	44bc      	add	ip, r7
   30a8a:	4463      	add	r3, ip
   30a8c:	5c9a      	ldrb	r2, [r3, r2]
   30a8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   30a90:	701a      	strb	r2, [r3, #0]
			if (size >= 0x10) {
   30a92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30a94:	2b0f      	cmp	r3, #15
   30a96:	dd19      	ble.n	30acc <_http_client_request+0x4ec>
				ptr = buffer + 1;
   30a98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   30a9a:	3301      	adds	r3, #1
   30a9c:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x10) % 16];
   30a9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30aa0:	2b00      	cmp	r3, #0
   30aa2:	da00      	bge.n	30aa6 <_http_client_request+0x4c6>
   30aa4:	330f      	adds	r3, #15
   30aa6:	111b      	asrs	r3, r3, #4
   30aa8:	001a      	movs	r2, r3
   30aaa:	4b8e      	ldr	r3, [pc, #568]	; (30ce4 <_http_client_request+0x704>)
   30aac:	4013      	ands	r3, r2
   30aae:	d504      	bpl.n	30aba <_http_client_request+0x4da>
   30ab0:	3b01      	subs	r3, #1
   30ab2:	2210      	movs	r2, #16
   30ab4:	4252      	negs	r2, r2
   30ab6:	4313      	orrs	r3, r2
   30ab8:	3301      	adds	r3, #1
   30aba:	001a      	movs	r2, r3
   30abc:	2318      	movs	r3, #24
   30abe:	2118      	movs	r1, #24
   30ac0:	468c      	mov	ip, r1
   30ac2:	44bc      	add	ip, r7
   30ac4:	4463      	add	r3, ip
   30ac6:	5c9a      	ldrb	r2, [r3, r2]
   30ac8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   30aca:	701a      	strb	r2, [r3, #0]
			if (size >= 0x100) {
   30acc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30ace:	2bff      	cmp	r3, #255	; 0xff
   30ad0:	dd18      	ble.n	30b04 <_http_client_request+0x524>
				ptr = buffer;
   30ad2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   30ad4:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x100) % 16];
   30ad6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30ad8:	2b00      	cmp	r3, #0
   30ada:	da00      	bge.n	30ade <_http_client_request+0x4fe>
   30adc:	33ff      	adds	r3, #255	; 0xff
   30ade:	121b      	asrs	r3, r3, #8
   30ae0:	001a      	movs	r2, r3
   30ae2:	4b80      	ldr	r3, [pc, #512]	; (30ce4 <_http_client_request+0x704>)
   30ae4:	4013      	ands	r3, r2
   30ae6:	d504      	bpl.n	30af2 <_http_client_request+0x512>
   30ae8:	3b01      	subs	r3, #1
   30aea:	2210      	movs	r2, #16
   30aec:	4252      	negs	r2, r2
   30aee:	4313      	orrs	r3, r2
   30af0:	3301      	adds	r3, #1
   30af2:	001a      	movs	r2, r3
   30af4:	2318      	movs	r3, #24
   30af6:	2118      	movs	r1, #24
   30af8:	468c      	mov	ip, r1
   30afa:	44bc      	add	ip, r7
   30afc:	4463      	add	r3, ip
   30afe:	5c9a      	ldrb	r2, [r3, r2]
   30b00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   30b02:	701a      	strb	r2, [r3, #0]
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   30b04:	69fb      	ldr	r3, [r7, #28]
   30b06:	2000      	movs	r0, #0
   30b08:	5618      	ldrsb	r0, [r3, r0]
   30b0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   30b0c:	3303      	adds	r3, #3
   30b0e:	001a      	movs	r2, r3
   30b10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   30b12:	1ad3      	subs	r3, r2, r3
   30b14:	b29a      	uxth	r2, r3
   30b16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30b18:	b29b      	uxth	r3, r3
   30b1a:	18d3      	adds	r3, r2, r3
   30b1c:	b29b      	uxth	r3, r3
   30b1e:	3304      	adds	r3, #4
   30b20:	b29a      	uxth	r2, r3
   30b22:	6f39      	ldr	r1, [r7, #112]	; 0x70
   30b24:	2300      	movs	r3, #0
   30b26:	4c70      	ldr	r4, [pc, #448]	; (30ce8 <_http_client_request+0x708>)
   30b28:	47a0      	blx	r4
   30b2a:	0003      	movs	r3, r0
   30b2c:	663b      	str	r3, [r7, #96]	; 0x60
   30b2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   30b30:	2b00      	cmp	r3, #0
   30b32:	da07      	bge.n	30b44 <_http_client_request+0x564>
				_http_client_clear_conn(module, -EIO);
   30b34:	2305      	movs	r3, #5
   30b36:	425a      	negs	r2, r3
   30b38:	69fb      	ldr	r3, [r7, #28]
   30b3a:	0011      	movs	r1, r2
   30b3c:	0018      	movs	r0, r3
   30b3e:	4b6b      	ldr	r3, [pc, #428]	; (30cec <_http_client_request+0x70c>)
   30b40:	4798      	blx	r3
				return;
   30b42:	e0e1      	b.n	30d08 <_http_client_request+0x728>
			module->req.sent_length += size;
   30b44:	69fb      	ldr	r3, [r7, #28]
   30b46:	22d0      	movs	r2, #208	; 0xd0
   30b48:	589a      	ldr	r2, [r3, r2]
   30b4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30b4c:	18d2      	adds	r2, r2, r3
   30b4e:	69fb      	ldr	r3, [r7, #28]
   30b50:	21d0      	movs	r1, #208	; 0xd0
   30b52:	505a      	str	r2, [r3, r1]
			if(size == 0) {
   30b54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30b56:	2b00      	cmp	r3, #0
   30b58:	d000      	beq.n	30b5c <_http_client_request+0x57c>
   30b5a:	e0c9      	b.n	30cf0 <_http_client_request+0x710>
				if (module->req.entity.close) {
   30b5c:	69fb      	ldr	r3, [r7, #28]
   30b5e:	22c0      	movs	r2, #192	; 0xc0
   30b60:	589b      	ldr	r3, [r3, r2]
   30b62:	2b00      	cmp	r3, #0
   30b64:	d007      	beq.n	30b76 <_http_client_request+0x596>
					module->req.entity.close(module->req.entity.priv_data);
   30b66:	69fb      	ldr	r3, [r7, #28]
   30b68:	22c0      	movs	r2, #192	; 0xc0
   30b6a:	589b      	ldr	r3, [r3, r2]
   30b6c:	69fa      	ldr	r2, [r7, #28]
   30b6e:	21c4      	movs	r1, #196	; 0xc4
   30b70:	5852      	ldr	r2, [r2, r1]
   30b72:	0010      	movs	r0, r2
   30b74:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   30b76:	69fb      	ldr	r3, [r7, #28]
   30b78:	2202      	movs	r2, #2
   30b7a:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   30b7c:	69fb      	ldr	r3, [r7, #28]
   30b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30b80:	2b00      	cmp	r3, #0
   30b82:	d100      	bne.n	30b86 <_http_client_request+0x5a6>
   30b84:	e0b5      	b.n	30cf2 <_http_client_request+0x712>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   30b86:	69fb      	ldr	r3, [r7, #28]
   30b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30b8a:	220c      	movs	r2, #12
   30b8c:	2118      	movs	r1, #24
   30b8e:	468c      	mov	ip, r1
   30b90:	44bc      	add	ip, r7
   30b92:	4462      	add	r2, ip
   30b94:	69f8      	ldr	r0, [r7, #28]
   30b96:	2101      	movs	r1, #1
   30b98:	4798      	blx	r3
				break;
   30b9a:	e0aa      	b.n	30cf2 <_http_client_request+0x712>
		} else if (module->req.content_length > 0 && entity->read) {
   30b9c:	69fb      	ldr	r3, [r7, #28]
   30b9e:	22cc      	movs	r2, #204	; 0xcc
   30ba0:	589b      	ldr	r3, [r3, r2]
   30ba2:	2b00      	cmp	r3, #0
   30ba4:	dc00      	bgt.n	30ba8 <_http_client_request+0x5c8>
   30ba6:	e07c      	b.n	30ca2 <_http_client_request+0x6c2>
   30ba8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30baa:	68db      	ldr	r3, [r3, #12]
   30bac:	2b00      	cmp	r3, #0
   30bae:	d100      	bne.n	30bb2 <_http_client_request+0x5d2>
   30bb0:	e077      	b.n	30ca2 <_http_client_request+0x6c2>
			if (module->req.sent_length >= module->req.content_length) {
   30bb2:	69fb      	ldr	r3, [r7, #28]
   30bb4:	22d0      	movs	r2, #208	; 0xd0
   30bb6:	589a      	ldr	r2, [r3, r2]
   30bb8:	69fb      	ldr	r3, [r7, #28]
   30bba:	21cc      	movs	r1, #204	; 0xcc
   30bbc:	585b      	ldr	r3, [r3, r1]
   30bbe:	429a      	cmp	r2, r3
   30bc0:	db1f      	blt.n	30c02 <_http_client_request+0x622>
				if (module->req.entity.close) {
   30bc2:	69fb      	ldr	r3, [r7, #28]
   30bc4:	22c0      	movs	r2, #192	; 0xc0
   30bc6:	589b      	ldr	r3, [r3, r2]
   30bc8:	2b00      	cmp	r3, #0
   30bca:	d007      	beq.n	30bdc <_http_client_request+0x5fc>
					module->req.entity.close(module->req.entity.priv_data);
   30bcc:	69fb      	ldr	r3, [r7, #28]
   30bce:	22c0      	movs	r2, #192	; 0xc0
   30bd0:	589b      	ldr	r3, [r3, r2]
   30bd2:	69fa      	ldr	r2, [r7, #28]
   30bd4:	21c4      	movs	r1, #196	; 0xc4
   30bd6:	5852      	ldr	r2, [r2, r1]
   30bd8:	0010      	movs	r0, r2
   30bda:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   30bdc:	69fb      	ldr	r3, [r7, #28]
   30bde:	2202      	movs	r2, #2
   30be0:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   30be2:	69fb      	ldr	r3, [r7, #28]
   30be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30be6:	2b00      	cmp	r3, #0
   30be8:	d100      	bne.n	30bec <_http_client_request+0x60c>
   30bea:	e084      	b.n	30cf6 <_http_client_request+0x716>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   30bec:	69fb      	ldr	r3, [r7, #28]
   30bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30bf0:	220c      	movs	r2, #12
   30bf2:	2118      	movs	r1, #24
   30bf4:	468c      	mov	ip, r1
   30bf6:	44bc      	add	ip, r7
   30bf8:	4462      	add	r2, ip
   30bfa:	69f8      	ldr	r0, [r7, #28]
   30bfc:	2101      	movs	r1, #1
   30bfe:	4798      	blx	r3
				break;
   30c00:	e079      	b.n	30cf6 <_http_client_request+0x716>
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   30c02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30c04:	68dc      	ldr	r4, [r3, #12]
   30c06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30c08:	6958      	ldr	r0, [r3, #20]
   30c0a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   30c0c:	69fb      	ldr	r3, [r7, #28]
   30c0e:	6e5d      	ldr	r5, [r3, #100]	; 0x64
   30c10:	69fb      	ldr	r3, [r7, #28]
   30c12:	22d0      	movs	r2, #208	; 0xd0
   30c14:	589b      	ldr	r3, [r3, r2]
   30c16:	002a      	movs	r2, r5
   30c18:	47a0      	blx	r4
   30c1a:	0003      	movs	r3, r0
   30c1c:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   30c1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30c20:	2b00      	cmp	r3, #0
   30c22:	da0d      	bge.n	30c40 <_http_client_request+0x660>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   30c24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30c26:	2b00      	cmp	r3, #0
   30c28:	d102      	bne.n	30c30 <_http_client_request+0x650>
   30c2a:	234d      	movs	r3, #77	; 0x4d
   30c2c:	425b      	negs	r3, r3
   30c2e:	e001      	b.n	30c34 <_http_client_request+0x654>
   30c30:	2305      	movs	r3, #5
   30c32:	425b      	negs	r3, r3
   30c34:	69fa      	ldr	r2, [r7, #28]
   30c36:	0019      	movs	r1, r3
   30c38:	0010      	movs	r0, r2
   30c3a:	4b2c      	ldr	r3, [pc, #176]	; (30cec <_http_client_request+0x70c>)
   30c3c:	4798      	blx	r3
			if (size < 0) {
   30c3e:	e057      	b.n	30cf0 <_http_client_request+0x710>
				if (size > module->req.content_length - module->req.sent_length) {
   30c40:	69fb      	ldr	r3, [r7, #28]
   30c42:	22cc      	movs	r2, #204	; 0xcc
   30c44:	589a      	ldr	r2, [r3, r2]
   30c46:	69fb      	ldr	r3, [r7, #28]
   30c48:	21d0      	movs	r1, #208	; 0xd0
   30c4a:	585b      	ldr	r3, [r3, r1]
   30c4c:	1ad2      	subs	r2, r2, r3
   30c4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30c50:	429a      	cmp	r2, r3
   30c52:	da07      	bge.n	30c64 <_http_client_request+0x684>
					size = module->req.content_length - module->req.sent_length;
   30c54:	69fb      	ldr	r3, [r7, #28]
   30c56:	22cc      	movs	r2, #204	; 0xcc
   30c58:	589a      	ldr	r2, [r3, r2]
   30c5a:	69fb      	ldr	r3, [r7, #28]
   30c5c:	21d0      	movs	r1, #208	; 0xd0
   30c5e:	585b      	ldr	r3, [r3, r1]
   30c60:	1ad3      	subs	r3, r2, r3
   30c62:	677b      	str	r3, [r7, #116]	; 0x74
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   30c64:	69fb      	ldr	r3, [r7, #28]
   30c66:	2000      	movs	r0, #0
   30c68:	5618      	ldrsb	r0, [r3, r0]
   30c6a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   30c6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30c6e:	b29a      	uxth	r2, r3
   30c70:	2300      	movs	r3, #0
   30c72:	4c1d      	ldr	r4, [pc, #116]	; (30ce8 <_http_client_request+0x708>)
   30c74:	47a0      	blx	r4
   30c76:	0003      	movs	r3, r0
   30c78:	663b      	str	r3, [r7, #96]	; 0x60
   30c7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   30c7c:	2b00      	cmp	r3, #0
   30c7e:	da07      	bge.n	30c90 <_http_client_request+0x6b0>
					_http_client_clear_conn(module, -EIO);
   30c80:	2305      	movs	r3, #5
   30c82:	425a      	negs	r2, r3
   30c84:	69fb      	ldr	r3, [r7, #28]
   30c86:	0011      	movs	r1, r2
   30c88:	0018      	movs	r0, r3
   30c8a:	4b18      	ldr	r3, [pc, #96]	; (30cec <_http_client_request+0x70c>)
   30c8c:	4798      	blx	r3
					return;
   30c8e:	e03b      	b.n	30d08 <_http_client_request+0x728>
				module->req.sent_length += size;
   30c90:	69fb      	ldr	r3, [r7, #28]
   30c92:	22d0      	movs	r2, #208	; 0xd0
   30c94:	589a      	ldr	r2, [r3, r2]
   30c96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30c98:	18d2      	adds	r2, r2, r3
   30c9a:	69fb      	ldr	r3, [r7, #28]
   30c9c:	21d0      	movs	r1, #208	; 0xd0
   30c9e:	505a      	str	r2, [r3, r1]
			if (size < 0) {
   30ca0:	e026      	b.n	30cf0 <_http_client_request+0x710>
			module->req.state = STATE_SOCK_CONNECTED;
   30ca2:	69fb      	ldr	r3, [r7, #28]
   30ca4:	2202      	movs	r2, #2
   30ca6:	66da      	str	r2, [r3, #108]	; 0x6c
			if (module->cb) {
   30ca8:	69fb      	ldr	r3, [r7, #28]
   30caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30cac:	2b00      	cmp	r3, #0
   30cae:	d024      	beq.n	30cfa <_http_client_request+0x71a>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   30cb0:	69fb      	ldr	r3, [r7, #28]
   30cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30cb4:	220c      	movs	r2, #12
   30cb6:	2118      	movs	r1, #24
   30cb8:	468c      	mov	ip, r1
   30cba:	44bc      	add	ip, r7
   30cbc:	4462      	add	r2, ip
   30cbe:	69f8      	ldr	r0, [r7, #28]
   30cc0:	2101      	movs	r1, #1
   30cc2:	4798      	blx	r3
			break;
   30cc4:	e019      	b.n	30cfa <_http_client_request+0x71a>
   30cc6:	46c0      	nop			; (mov r8, r8)
   30cc8:	000397cc 	.word	0x000397cc
   30ccc:	0003489d 	.word	0x0003489d
   30cd0:	000397d0 	.word	0x000397d0
   30cd4:	00031541 	.word	0x00031541
   30cd8:	0003497b 	.word	0x0003497b
   30cdc:	00039758 	.word	0x00039758
   30ce0:	0003157d 	.word	0x0003157d
   30ce4:	8000000f 	.word	0x8000000f
   30ce8:	00024999 	.word	0x00024999
   30cec:	0003048d 	.word	0x0003048d
		break;
   30cf0:	e004      	b.n	30cfc <_http_client_request+0x71c>
				break;
   30cf2:	46c0      	nop			; (mov r8, r8)
   30cf4:	e002      	b.n	30cfc <_http_client_request+0x71c>
				break;
   30cf6:	46c0      	nop			; (mov r8, r8)
   30cf8:	e000      	b.n	30cfc <_http_client_request+0x71c>
			break;
   30cfa:	46c0      	nop			; (mov r8, r8)
   30cfc:	69bb      	ldr	r3, [r7, #24]
   30cfe:	469d      	mov	sp, r3
   30d00:	e004      	b.n	30d0c <_http_client_request+0x72c>
		return;
   30d02:	46c0      	nop			; (mov r8, r8)
   30d04:	e000      	b.n	30d08 <_http_client_request+0x728>
		return;
   30d06:	46c0      	nop			; (mov r8, r8)
   30d08:	69bb      	ldr	r3, [r7, #24]
   30d0a:	469d      	mov	sp, r3
	}
}
   30d0c:	46bd      	mov	sp, r7
   30d0e:	b01e      	add	sp, #120	; 0x78
   30d10:	bc04      	pop	{r2}
   30d12:	4690      	mov	r8, r2
   30d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
   30d16:	46c0      	nop			; (mov r8, r8)

00030d18 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   30d18:	b590      	push	{r4, r7, lr}
   30d1a:	b083      	sub	sp, #12
   30d1c:	af00      	add	r7, sp, #0
   30d1e:	6078      	str	r0, [r7, #4]
	if (module == NULL) {
   30d20:	687b      	ldr	r3, [r7, #4]
   30d22:	2b00      	cmp	r3, #0
   30d24:	d021      	beq.n	30d6a <_http_client_recv_packet+0x52>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   30d26:	687b      	ldr	r3, [r7, #4]
   30d28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   30d2a:	687b      	ldr	r3, [r7, #4]
   30d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   30d2e:	429a      	cmp	r2, r3
   30d30:	d307      	bcc.n	30d42 <_http_client_recv_packet+0x2a>
		/* Has not enough memory. */
		_http_client_clear_conn(module, -EOVERFLOW);
   30d32:	238b      	movs	r3, #139	; 0x8b
   30d34:	425a      	negs	r2, r3
   30d36:	687b      	ldr	r3, [r7, #4]
   30d38:	0011      	movs	r1, r2
   30d3a:	0018      	movs	r0, r3
   30d3c:	4b0d      	ldr	r3, [pc, #52]	; (30d74 <_http_client_recv_packet+0x5c>)
   30d3e:	4798      	blx	r3
		return;
   30d40:	e014      	b.n	30d6c <_http_client_recv_packet+0x54>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   30d42:	687b      	ldr	r3, [r7, #4]
   30d44:	2000      	movs	r0, #0
   30d46:	5618      	ldrsb	r0, [r3, r0]
		module->config.recv_buffer + module->recved_size,
   30d48:	687b      	ldr	r3, [r7, #4]
   30d4a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   30d4c:	687b      	ldr	r3, [r7, #4]
   30d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   30d50:	18d1      	adds	r1, r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   30d52:	687b      	ldr	r3, [r7, #4]
   30d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	recv(module->sock,
   30d56:	b29a      	uxth	r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   30d58:	687b      	ldr	r3, [r7, #4]
   30d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	recv(module->sock,
   30d5c:	b29b      	uxth	r3, r3
   30d5e:	1ad3      	subs	r3, r2, r3
   30d60:	b29a      	uxth	r2, r3
   30d62:	2300      	movs	r3, #0
   30d64:	4c04      	ldr	r4, [pc, #16]	; (30d78 <_http_client_recv_packet+0x60>)
   30d66:	47a0      	blx	r4
   30d68:	e000      	b.n	30d6c <_http_client_recv_packet+0x54>
		return;
   30d6a:	46c0      	nop			; (mov r8, r8)
}
   30d6c:	46bd      	mov	sp, r7
   30d6e:	b003      	add	sp, #12
   30d70:	bd90      	pop	{r4, r7, pc}
   30d72:	46c0      	nop			; (mov r8, r8)
   30d74:	0003048d 	.word	0x0003048d
   30d78:	00024afd 	.word	0x00024afd

00030d7c <_http_client_recved_packet>:

void _http_client_recved_packet(struct http_client_module *const module, int read_len)
{
   30d7c:	b580      	push	{r7, lr}
   30d7e:	b082      	sub	sp, #8
   30d80:	af00      	add	r7, sp, #0
   30d82:	6078      	str	r0, [r7, #4]
   30d84:	6039      	str	r1, [r7, #0]
	module->recved_size += read_len;
   30d86:	687b      	ldr	r3, [r7, #4]
   30d88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   30d8a:	683b      	ldr	r3, [r7, #0]
   30d8c:	18d2      	adds	r2, r2, r3
   30d8e:	687b      	ldr	r3, [r7, #4]
   30d90:	645a      	str	r2, [r3, #68]	; 0x44
	if (module->config.timeout > 0) {
   30d92:	687b      	ldr	r3, [r7, #4]
   30d94:	2258      	movs	r2, #88	; 0x58
   30d96:	5a9b      	ldrh	r3, [r3, r2]
   30d98:	2b00      	cmp	r3, #0
   30d9a:	d007      	beq.n	30dac <_http_client_recved_packet+0x30>
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   30d9c:	687b      	ldr	r3, [r7, #4]
   30d9e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   30da0:	687b      	ldr	r3, [r7, #4]
   30da2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   30da4:	0019      	movs	r1, r3
   30da6:	0010      	movs	r0, r2
   30da8:	4b06      	ldr	r3, [pc, #24]	; (30dc4 <_http_client_recved_packet+0x48>)
   30daa:	4798      	blx	r3
	}

	/* Recursive function call can be occurred overflow. */
	while(_http_client_handle_response(module) != 0);
   30dac:	46c0      	nop			; (mov r8, r8)
   30dae:	687b      	ldr	r3, [r7, #4]
   30db0:	0018      	movs	r0, r3
   30db2:	4b05      	ldr	r3, [pc, #20]	; (30dc8 <_http_client_recved_packet+0x4c>)
   30db4:	4798      	blx	r3
   30db6:	1e03      	subs	r3, r0, #0
   30db8:	d1f9      	bne.n	30dae <_http_client_recved_packet+0x32>
}
   30dba:	46c0      	nop			; (mov r8, r8)
   30dbc:	46bd      	mov	sp, r7
   30dbe:	b002      	add	sp, #8
   30dc0:	bd80      	pop	{r7, pc}
   30dc2:	46c0      	nop			; (mov r8, r8)
   30dc4:	00031839 	.word	0x00031839
   30dc8:	00030dcd 	.word	0x00030dcd

00030dcc <_http_client_handle_response>:

int _http_client_handle_response(struct http_client_module *const module)
{
   30dcc:	b580      	push	{r7, lr}
   30dce:	b082      	sub	sp, #8
   30dd0:	af00      	add	r7, sp, #0
   30dd2:	6078      	str	r0, [r7, #4]
	switch(module->resp.state) {
   30dd4:	687b      	ldr	r3, [r7, #4]
   30dd6:	22d8      	movs	r2, #216	; 0xd8
   30dd8:	589b      	ldr	r3, [r3, r2]
   30dda:	2b00      	cmp	r3, #0
   30ddc:	d002      	beq.n	30de4 <_http_client_handle_response+0x18>
   30dde:	2b01      	cmp	r3, #1
   30de0:	d006      	beq.n	30df0 <_http_client_handle_response+0x24>
   30de2:	e00b      	b.n	30dfc <_http_client_handle_response+0x30>
	case STATE_PARSE_HEADER:
		return _http_client_handle_header(module);
   30de4:	687b      	ldr	r3, [r7, #4]
   30de6:	0018      	movs	r0, r3
   30de8:	4b07      	ldr	r3, [pc, #28]	; (30e08 <_http_client_handle_response+0x3c>)
   30dea:	4798      	blx	r3
   30dec:	0003      	movs	r3, r0
   30dee:	e006      	b.n	30dfe <_http_client_handle_response+0x32>
	case STATE_PARSE_ENTITY:
		return _http_client_handle_entity(module);
   30df0:	687b      	ldr	r3, [r7, #4]
   30df2:	0018      	movs	r0, r3
   30df4:	4b05      	ldr	r3, [pc, #20]	; (30e0c <_http_client_handle_response+0x40>)
   30df6:	4798      	blx	r3
   30df8:	0003      	movs	r3, r0
   30dfa:	e000      	b.n	30dfe <_http_client_handle_response+0x32>
	}
	return 0;
   30dfc:	2300      	movs	r3, #0
}
   30dfe:	0018      	movs	r0, r3
   30e00:	46bd      	mov	sp, r7
   30e02:	b002      	add	sp, #8
   30e04:	bd80      	pop	{r7, pc}
   30e06:	46c0      	nop			; (mov r8, r8)
   30e08:	00030e11 	.word	0x00030e11
   30e0c:	000312c9 	.word	0x000312c9

00030e10 <_http_client_handle_header>:

int _http_client_handle_header(struct http_client_module *const module)
{
   30e10:	b590      	push	{r4, r7, lr}
   30e12:	b08b      	sub	sp, #44	; 0x2c
   30e14:	af00      	add	r7, sp, #0
   30e16:	6078      	str	r0, [r7, #4]
	/* New line character only used in this function. So variable registered in the code region. */
	static const char *new_line = "\r\n";

	//TODO : header filter

	for (ptr = module->config.recv_buffer ; ; ) {
   30e18:	687b      	ldr	r3, [r7, #4]
   30e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   30e1c:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   30e1e:	4b9a      	ldr	r3, [pc, #616]	; (31088 <_http_client_handle_header+0x278>)
   30e20:	681a      	ldr	r2, [r3, #0]
   30e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30e24:	0011      	movs	r1, r2
   30e26:	0018      	movs	r0, r3
   30e28:	4b98      	ldr	r3, [pc, #608]	; (3108c <_http_client_handle_header+0x27c>)
   30e2a:	4798      	blx	r3
   30e2c:	0003      	movs	r3, r0
   30e2e:	61bb      	str	r3, [r7, #24]
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   30e30:	69bb      	ldr	r3, [r7, #24]
   30e32:	2b00      	cmp	r3, #0
   30e34:	d007      	beq.n	30e46 <_http_client_handle_header+0x36>
   30e36:	687b      	ldr	r3, [r7, #4]
   30e38:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   30e3a:	687b      	ldr	r3, [r7, #4]
   30e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   30e3e:	18d2      	adds	r2, r2, r3
   30e40:	69bb      	ldr	r3, [r7, #24]
   30e42:	429a      	cmp	r2, r3
   30e44:	d807      	bhi.n	30e56 <_http_client_handle_header+0x46>
			/* not enough buffer. */
			_http_client_move_buffer(module, ptr);
   30e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   30e48:	687b      	ldr	r3, [r7, #4]
   30e4a:	0011      	movs	r1, r2
   30e4c:	0018      	movs	r0, r3
   30e4e:	4b90      	ldr	r3, [pc, #576]	; (31090 <_http_client_handle_header+0x280>)
   30e50:	4798      	blx	r3
			return 0;
   30e52:	2300      	movs	r3, #0
   30e54:	e114      	b.n	31080 <_http_client_handle_header+0x270>
		}

		if (!strncmp(ptr, new_line, strlen(new_line))) {
   30e56:	4b8c      	ldr	r3, [pc, #560]	; (31088 <_http_client_handle_header+0x278>)
   30e58:	681c      	ldr	r4, [r3, #0]
   30e5a:	4b8b      	ldr	r3, [pc, #556]	; (31088 <_http_client_handle_header+0x278>)
   30e5c:	681b      	ldr	r3, [r3, #0]
   30e5e:	0018      	movs	r0, r3
   30e60:	4b8c      	ldr	r3, [pc, #560]	; (31094 <_http_client_handle_header+0x284>)
   30e62:	4798      	blx	r3
   30e64:	0002      	movs	r2, r0
   30e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30e68:	0021      	movs	r1, r4
   30e6a:	0018      	movs	r0, r3
   30e6c:	4b8a      	ldr	r3, [pc, #552]	; (31098 <_http_client_handle_header+0x288>)
   30e6e:	4798      	blx	r3
   30e70:	1e03      	subs	r3, r0, #0
   30e72:	d15d      	bne.n	30f30 <_http_client_handle_header+0x120>
			/* Move remain data to forward part of buffer. */
			_http_client_move_buffer(module, ptr + strlen(new_line));
   30e74:	4b84      	ldr	r3, [pc, #528]	; (31088 <_http_client_handle_header+0x278>)
   30e76:	681b      	ldr	r3, [r3, #0]
   30e78:	0018      	movs	r0, r3
   30e7a:	4b86      	ldr	r3, [pc, #536]	; (31094 <_http_client_handle_header+0x284>)
   30e7c:	4798      	blx	r3
   30e7e:	0002      	movs	r2, r0
   30e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30e82:	189a      	adds	r2, r3, r2
   30e84:	687b      	ldr	r3, [r7, #4]
   30e86:	0011      	movs	r1, r2
   30e88:	0018      	movs	r0, r3
   30e8a:	4b81      	ldr	r3, [pc, #516]	; (31090 <_http_client_handle_header+0x280>)
   30e8c:	4798      	blx	r3

			/* Check validation first. */
			if (module->cb && module->resp.response_code) {
   30e8e:	687b      	ldr	r3, [r7, #4]
   30e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30e92:	2b00      	cmp	r3, #0
   30e94:	d046      	beq.n	30f24 <_http_client_handle_header+0x114>
   30e96:	687b      	ldr	r3, [r7, #4]
   30e98:	22e4      	movs	r2, #228	; 0xe4
   30e9a:	5a9b      	ldrh	r3, [r3, r2]
   30e9c:	2b00      	cmp	r3, #0
   30e9e:	d041      	beq.n	30f24 <_http_client_handle_header+0x114>
				/* Chunked transfer */
				if (module->resp.content_length < 0) {
   30ea0:	687b      	ldr	r3, [r7, #4]
   30ea2:	22dc      	movs	r2, #220	; 0xdc
   30ea4:	589b      	ldr	r3, [r3, r2]
   30ea6:	2b00      	cmp	r3, #0
   30ea8:	da19      	bge.n	30ede <_http_client_handle_header+0xce>
					data.recv_response.response_code = module->resp.response_code;
   30eaa:	687b      	ldr	r3, [r7, #4]
   30eac:	22e4      	movs	r2, #228	; 0xe4
   30eae:	5a9a      	ldrh	r2, [r3, r2]
   30eb0:	230c      	movs	r3, #12
   30eb2:	18fb      	adds	r3, r7, r3
   30eb4:	801a      	strh	r2, [r3, #0]
					data.recv_response.is_chunked = 1;
   30eb6:	230c      	movs	r3, #12
   30eb8:	18fb      	adds	r3, r7, r3
   30eba:	2201      	movs	r2, #1
   30ebc:	709a      	strb	r2, [r3, #2]
					module->resp.read_length = 0;
   30ebe:	687b      	ldr	r3, [r7, #4]
   30ec0:	22e0      	movs	r2, #224	; 0xe0
   30ec2:	2100      	movs	r1, #0
   30ec4:	5099      	str	r1, [r3, r2]
					data.recv_response.content = NULL;
   30ec6:	230c      	movs	r3, #12
   30ec8:	18fb      	adds	r3, r7, r3
   30eca:	2200      	movs	r2, #0
   30ecc:	609a      	str	r2, [r3, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   30ece:	687b      	ldr	r3, [r7, #4]
   30ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30ed2:	220c      	movs	r2, #12
   30ed4:	18ba      	adds	r2, r7, r2
   30ed6:	6878      	ldr	r0, [r7, #4]
   30ed8:	2102      	movs	r1, #2
   30eda:	4798      	blx	r3
   30edc:	e022      	b.n	30f24 <_http_client_handle_header+0x114>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   30ede:	687b      	ldr	r3, [r7, #4]
   30ee0:	22dc      	movs	r2, #220	; 0xdc
   30ee2:	589a      	ldr	r2, [r3, r2]
   30ee4:	687b      	ldr	r3, [r7, #4]
   30ee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   30ee8:	429a      	cmp	r2, r3
   30eea:	dd1b      	ble.n	30f24 <_http_client_handle_header+0x114>
					/* Entity is bigger than receive buffer. Sending the buffer to user like chunked transfer. */
					data.recv_response.response_code = module->resp.response_code;
   30eec:	687b      	ldr	r3, [r7, #4]
   30eee:	22e4      	movs	r2, #228	; 0xe4
   30ef0:	5a9a      	ldrh	r2, [r3, r2]
   30ef2:	230c      	movs	r3, #12
   30ef4:	18fb      	adds	r3, r7, r3
   30ef6:	801a      	strh	r2, [r3, #0]
					data.recv_response.content_length = module->resp.content_length;
   30ef8:	687b      	ldr	r3, [r7, #4]
   30efa:	22dc      	movs	r2, #220	; 0xdc
   30efc:	589b      	ldr	r3, [r3, r2]
   30efe:	001a      	movs	r2, r3
   30f00:	230c      	movs	r3, #12
   30f02:	18fb      	adds	r3, r7, r3
   30f04:	605a      	str	r2, [r3, #4]
					data.recv_response.content = NULL;
   30f06:	230c      	movs	r3, #12
   30f08:	18fb      	adds	r3, r7, r3
   30f0a:	2200      	movs	r2, #0
   30f0c:	609a      	str	r2, [r3, #8]
					module->resp.read_length = 0;
   30f0e:	687b      	ldr	r3, [r7, #4]
   30f10:	22e0      	movs	r2, #224	; 0xe0
   30f12:	2100      	movs	r1, #0
   30f14:	5099      	str	r1, [r3, r2]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   30f16:	687b      	ldr	r3, [r7, #4]
   30f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30f1a:	220c      	movs	r2, #12
   30f1c:	18ba      	adds	r2, r7, r2
   30f1e:	6878      	ldr	r0, [r7, #4]
   30f20:	2102      	movs	r1, #2
   30f22:	4798      	blx	r3
				}
			}

			module->resp.state = STATE_PARSE_ENTITY;
   30f24:	687b      	ldr	r3, [r7, #4]
   30f26:	22d8      	movs	r2, #216	; 0xd8
   30f28:	2101      	movs	r1, #1
   30f2a:	5099      	str	r1, [r3, r2]
			return 1;
   30f2c:	2301      	movs	r3, #1
   30f2e:	e0a7      	b.n	31080 <_http_client_handle_header+0x270>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   30f30:	495a      	ldr	r1, [pc, #360]	; (3109c <_http_client_handle_header+0x28c>)
   30f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30f34:	2210      	movs	r2, #16
   30f36:	0018      	movs	r0, r3
   30f38:	4b57      	ldr	r3, [pc, #348]	; (31098 <_http_client_handle_header+0x288>)
   30f3a:	4798      	blx	r3
   30f3c:	1e03      	subs	r3, r0, #0
   30f3e:	d109      	bne.n	30f54 <_http_client_handle_header+0x144>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   30f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30f42:	3310      	adds	r3, #16
   30f44:	0018      	movs	r0, r3
   30f46:	4b56      	ldr	r3, [pc, #344]	; (310a0 <_http_client_handle_header+0x290>)
   30f48:	4798      	blx	r3
   30f4a:	0001      	movs	r1, r0
   30f4c:	687b      	ldr	r3, [r7, #4]
   30f4e:	22dc      	movs	r2, #220	; 0xdc
   30f50:	5099      	str	r1, [r3, r2]
   30f52:	e08b      	b.n	3106c <_http_client_handle_header+0x25c>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   30f54:	4953      	ldr	r1, [pc, #332]	; (310a4 <_http_client_handle_header+0x294>)
   30f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30f58:	2213      	movs	r2, #19
   30f5a:	0018      	movs	r0, r3
   30f5c:	4b4e      	ldr	r3, [pc, #312]	; (31098 <_http_client_handle_header+0x288>)
   30f5e:	4798      	blx	r3
   30f60:	1e03      	subs	r3, r0, #0
   30f62:	d127      	bne.n	30fb4 <_http_client_handle_header+0x1a4>
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   30f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30f66:	3313      	adds	r3, #19
   30f68:	623b      	str	r3, [r7, #32]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   30f6a:	e01e      	b.n	30faa <_http_client_handle_header+0x19a>
				if (*type_ptr == ' ') {
   30f6c:	6a3b      	ldr	r3, [r7, #32]
   30f6e:	781b      	ldrb	r3, [r3, #0]
   30f70:	2b20      	cmp	r3, #32
   30f72:	d103      	bne.n	30f7c <_http_client_handle_header+0x16c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   30f74:	6a3b      	ldr	r3, [r7, #32]
   30f76:	3301      	adds	r3, #1
   30f78:	623b      	str	r3, [r7, #32]
   30f7a:	e016      	b.n	30faa <_http_client_handle_header+0x19a>
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   30f7c:	6a3b      	ldr	r3, [r7, #32]
   30f7e:	781b      	ldrb	r3, [r3, #0]
   30f80:	2b43      	cmp	r3, #67	; 0x43
   30f82:	d003      	beq.n	30f8c <_http_client_handle_header+0x17c>
   30f84:	6a3b      	ldr	r3, [r7, #32]
   30f86:	781b      	ldrb	r3, [r3, #0]
   30f88:	2b63      	cmp	r3, #99	; 0x63
   30f8a:	d105      	bne.n	30f98 <_http_client_handle_header+0x188>
					/* Chunked transfer */
					module->req.content_length = -1;
   30f8c:	687b      	ldr	r3, [r7, #4]
   30f8e:	21cc      	movs	r1, #204	; 0xcc
   30f90:	2201      	movs	r2, #1
   30f92:	4252      	negs	r2, r2
   30f94:	505a      	str	r2, [r3, r1]
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
					return 0;
				}
				break;
   30f96:	e069      	b.n	3106c <_http_client_handle_header+0x25c>
					_http_client_clear_conn(module, -ENOTSUP);
   30f98:	2386      	movs	r3, #134	; 0x86
   30f9a:	425a      	negs	r2, r3
   30f9c:	687b      	ldr	r3, [r7, #4]
   30f9e:	0011      	movs	r1, r2
   30fa0:	0018      	movs	r0, r3
   30fa2:	4b41      	ldr	r3, [pc, #260]	; (310a8 <_http_client_handle_header+0x298>)
   30fa4:	4798      	blx	r3
					return 0;
   30fa6:	2300      	movs	r3, #0
   30fa8:	e06a      	b.n	31080 <_http_client_handle_header+0x270>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   30faa:	69ba      	ldr	r2, [r7, #24]
   30fac:	6a3b      	ldr	r3, [r7, #32]
   30fae:	429a      	cmp	r2, r3
   30fb0:	d8dc      	bhi.n	30f6c <_http_client_handle_header+0x15c>
   30fb2:	e05b      	b.n	3106c <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   30fb4:	493d      	ldr	r1, [pc, #244]	; (310ac <_http_client_handle_header+0x29c>)
   30fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30fb8:	220c      	movs	r2, #12
   30fba:	0018      	movs	r0, r3
   30fbc:	4b36      	ldr	r3, [pc, #216]	; (31098 <_http_client_handle_header+0x288>)
   30fbe:	4798      	blx	r3
   30fc0:	1e03      	subs	r3, r0, #0
   30fc2:	d126      	bne.n	31012 <_http_client_handle_header+0x202>
			char *type_ptr = ptr + strlen("Connection: ");
   30fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30fc6:	330c      	adds	r3, #12
   30fc8:	61fb      	str	r3, [r7, #28]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   30fca:	e01d      	b.n	31008 <_http_client_handle_header+0x1f8>
				if (*type_ptr == ' ') {
   30fcc:	69fb      	ldr	r3, [r7, #28]
   30fce:	781b      	ldrb	r3, [r3, #0]
   30fd0:	2b20      	cmp	r3, #32
   30fd2:	d103      	bne.n	30fdc <_http_client_handle_header+0x1cc>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   30fd4:	69fb      	ldr	r3, [r7, #28]
   30fd6:	3301      	adds	r3, #1
   30fd8:	61fb      	str	r3, [r7, #28]
   30fda:	e015      	b.n	31008 <_http_client_handle_header+0x1f8>
					continue;
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   30fdc:	69fb      	ldr	r3, [r7, #28]
   30fde:	781b      	ldrb	r3, [r3, #0]
   30fe0:	2b4b      	cmp	r3, #75	; 0x4b
   30fe2:	d003      	beq.n	30fec <_http_client_handle_header+0x1dc>
   30fe4:	69fb      	ldr	r3, [r7, #28]
   30fe6:	781b      	ldrb	r3, [r3, #0]
   30fe8:	2b6b      	cmp	r3, #107	; 0x6b
   30fea:	d106      	bne.n	30ffa <_http_client_handle_header+0x1ea>
					module->permanent = 1;
   30fec:	687b      	ldr	r3, [r7, #4]
   30fee:	2241      	movs	r2, #65	; 0x41
   30ff0:	5c99      	ldrb	r1, [r3, r2]
   30ff2:	2002      	movs	r0, #2
   30ff4:	4301      	orrs	r1, r0
   30ff6:	5499      	strb	r1, [r3, r2]
				} else {
					module->permanent = 0;
				}
				break;
   30ff8:	e038      	b.n	3106c <_http_client_handle_header+0x25c>
					module->permanent = 0;
   30ffa:	687b      	ldr	r3, [r7, #4]
   30ffc:	2241      	movs	r2, #65	; 0x41
   30ffe:	5c99      	ldrb	r1, [r3, r2]
   31000:	2002      	movs	r0, #2
   31002:	4381      	bics	r1, r0
   31004:	5499      	strb	r1, [r3, r2]
				break;
   31006:	e031      	b.n	3106c <_http_client_handle_header+0x25c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   31008:	69ba      	ldr	r2, [r7, #24]
   3100a:	69fb      	ldr	r3, [r7, #28]
   3100c:	429a      	cmp	r2, r3
   3100e:	d8dd      	bhi.n	30fcc <_http_client_handle_header+0x1bc>
   31010:	e02c      	b.n	3106c <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   31012:	4927      	ldr	r1, [pc, #156]	; (310b0 <_http_client_handle_header+0x2a0>)
   31014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31016:	2205      	movs	r2, #5
   31018:	0018      	movs	r0, r3
   3101a:	4b1f      	ldr	r3, [pc, #124]	; (31098 <_http_client_handle_header+0x288>)
   3101c:	4798      	blx	r3
   3101e:	1e03      	subs	r3, r0, #0
   31020:	d124      	bne.n	3106c <_http_client_handle_header+0x25c>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   31022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31024:	3309      	adds	r3, #9
   31026:	0018      	movs	r0, r3
   31028:	4b1d      	ldr	r3, [pc, #116]	; (310a0 <_http_client_handle_header+0x290>)
   3102a:	4798      	blx	r3
   3102c:	0003      	movs	r3, r0
   3102e:	b299      	uxth	r1, r3
   31030:	687b      	ldr	r3, [r7, #4]
   31032:	22e4      	movs	r2, #228	; 0xe4
   31034:	5299      	strh	r1, [r3, r2]
			/* Initializing the variables */
			module->resp.content_length = 0;
   31036:	687b      	ldr	r3, [r7, #4]
   31038:	22dc      	movs	r2, #220	; 0xdc
   3103a:	2100      	movs	r1, #0
   3103c:	5099      	str	r1, [r3, r2]
			/* persistent connection is turn on in the HTTP 1.1 or above version of protocols. */  
			if (ptr [5] > '1' || ptr[7] > '0') {
   3103e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31040:	3305      	adds	r3, #5
   31042:	781b      	ldrb	r3, [r3, #0]
   31044:	2b31      	cmp	r3, #49	; 0x31
   31046:	d804      	bhi.n	31052 <_http_client_handle_header+0x242>
   31048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3104a:	3307      	adds	r3, #7
   3104c:	781b      	ldrb	r3, [r3, #0]
   3104e:	2b30      	cmp	r3, #48	; 0x30
   31050:	d906      	bls.n	31060 <_http_client_handle_header+0x250>
				module->permanent = 1;
   31052:	687b      	ldr	r3, [r7, #4]
   31054:	2241      	movs	r2, #65	; 0x41
   31056:	5c99      	ldrb	r1, [r3, r2]
   31058:	2002      	movs	r0, #2
   3105a:	4301      	orrs	r1, r0
   3105c:	5499      	strb	r1, [r3, r2]
   3105e:	e005      	b.n	3106c <_http_client_handle_header+0x25c>
			} else {
				module->permanent = 0;
   31060:	687b      	ldr	r3, [r7, #4]
   31062:	2241      	movs	r2, #65	; 0x41
   31064:	5c99      	ldrb	r1, [r3, r2]
   31066:	2002      	movs	r0, #2
   31068:	4381      	bics	r1, r0
   3106a:	5499      	strb	r1, [r3, r2]
			}
		}

		ptr = ptr_line_end + strlen(new_line);
   3106c:	4b06      	ldr	r3, [pc, #24]	; (31088 <_http_client_handle_header+0x278>)
   3106e:	681b      	ldr	r3, [r3, #0]
   31070:	0018      	movs	r0, r3
   31072:	4b08      	ldr	r3, [pc, #32]	; (31094 <_http_client_handle_header+0x284>)
   31074:	4798      	blx	r3
   31076:	0002      	movs	r2, r0
   31078:	69bb      	ldr	r3, [r7, #24]
   3107a:	189b      	adds	r3, r3, r2
   3107c:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   3107e:	e6ce      	b.n	30e1e <_http_client_handle_header+0xe>
	}
}
   31080:	0018      	movs	r0, r3
   31082:	46bd      	mov	sp, r7
   31084:	b00b      	add	sp, #44	; 0x2c
   31086:	bd90      	pop	{r4, r7, pc}
   31088:	2000011c 	.word	0x2000011c
   3108c:	000349f9 	.word	0x000349f9
   31090:	00031475 	.word	0x00031475
   31094:	0003497b 	.word	0x0003497b
   31098:	00034989 	.word	0x00034989
   3109c:	000397d0 	.word	0x000397d0
   310a0:	0003452d 	.word	0x0003452d
   310a4:	000397f4 	.word	0x000397f4
   310a8:	0003048d 	.word	0x0003048d
   310ac:	00039808 	.word	0x00039808
   310b0:	00039818 	.word	0x00039818

000310b4 <_http_client_read_chuked_entity>:

static void _http_client_read_chuked_entity(struct http_client_module *const module)
{
   310b4:	b580      	push	{r7, lr}
   310b6:	b088      	sub	sp, #32
   310b8:	af00      	add	r7, sp, #0
   310ba:	6078      	str	r0, [r7, #4]
	/* In chunked mode, read_length variable is means to remain data in the chunk. */
	union http_client_data data;
	int length = (int)module->recved_size;
   310bc:	687b      	ldr	r3, [r7, #4]
   310be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   310c0:	61fb      	str	r3, [r7, #28]
	int extension = 0;
   310c2:	2300      	movs	r3, #0
   310c4:	61bb      	str	r3, [r7, #24]
	char *buffer= module->config.recv_buffer;
   310c6:	687b      	ldr	r3, [r7, #4]
   310c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   310ca:	617b      	str	r3, [r7, #20]

	do {
		if (module->resp.read_length >= 0) {
   310cc:	687b      	ldr	r3, [r7, #4]
   310ce:	22e0      	movs	r2, #224	; 0xe0
   310d0:	589b      	ldr	r3, [r3, r2]
   310d2:	2b00      	cmp	r3, #0
   310d4:	db71      	blt.n	311ba <_http_client_read_chuked_entity+0x106>
			if (module->resp.read_length == 0) {
   310d6:	687b      	ldr	r3, [r7, #4]
   310d8:	22e0      	movs	r2, #224	; 0xe0
   310da:	589b      	ldr	r3, [r3, r2]
   310dc:	2b00      	cmp	r3, #0
   310de:	d134      	bne.n	3114a <_http_client_read_chuked_entity+0x96>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   310e0:	687b      	ldr	r3, [r7, #4]
   310e2:	22d8      	movs	r2, #216	; 0xd8
   310e4:	2100      	movs	r1, #0
   310e6:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   310e8:	687b      	ldr	r3, [r7, #4]
   310ea:	22e4      	movs	r2, #228	; 0xe4
   310ec:	2100      	movs	r1, #0
   310ee:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   310f0:	2308      	movs	r3, #8
   310f2:	18fb      	adds	r3, r7, r3
   310f4:	2201      	movs	r2, #1
   310f6:	721a      	strb	r2, [r3, #8]
				data.recv_chunked_data.length = 0;
   310f8:	2308      	movs	r3, #8
   310fa:	18fb      	adds	r3, r7, r3
   310fc:	2200      	movs	r2, #0
   310fe:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = NULL;
   31100:	2308      	movs	r3, #8
   31102:	18fb      	adds	r3, r7, r3
   31104:	2200      	movs	r2, #0
   31106:	605a      	str	r2, [r3, #4]
				if (module->cb) {
   31108:	687b      	ldr	r3, [r7, #4]
   3110a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3110c:	2b00      	cmp	r3, #0
   3110e:	d006      	beq.n	3111e <_http_client_read_chuked_entity+0x6a>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   31110:	687b      	ldr	r3, [r7, #4]
   31112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31114:	2208      	movs	r2, #8
   31116:	18ba      	adds	r2, r7, r2
   31118:	6878      	ldr	r0, [r7, #4]
   3111a:	2103      	movs	r1, #3
   3111c:	4798      	blx	r3
				}
				if (module->permanent == 0) {
   3111e:	687b      	ldr	r3, [r7, #4]
   31120:	2241      	movs	r2, #65	; 0x41
   31122:	5c9b      	ldrb	r3, [r3, r2]
   31124:	2202      	movs	r2, #2
   31126:	4013      	ands	r3, r2
   31128:	b2db      	uxtb	r3, r3
   3112a:	2b00      	cmp	r3, #0
   3112c:	d105      	bne.n	3113a <_http_client_read_chuked_entity+0x86>
					/* This server was not supported keep alive. */
					_http_client_clear_conn(module, 0);
   3112e:	687b      	ldr	r3, [r7, #4]
   31130:	2100      	movs	r1, #0
   31132:	0018      	movs	r0, r3
   31134:	4b62      	ldr	r3, [pc, #392]	; (312c0 <_http_client_read_chuked_entity+0x20c>)
   31136:	4798      	blx	r3
					return;
   31138:	e0bf      	b.n	312ba <_http_client_read_chuked_entity+0x206>
				}
				_http_client_move_buffer(module, buffer + 2);
   3113a:	697b      	ldr	r3, [r7, #20]
   3113c:	1c9a      	adds	r2, r3, #2
   3113e:	687b      	ldr	r3, [r7, #4]
   31140:	0011      	movs	r1, r2
   31142:	0018      	movs	r0, r3
   31144:	4b5f      	ldr	r3, [pc, #380]	; (312c4 <_http_client_read_chuked_entity+0x210>)
   31146:	4798      	blx	r3
   31148:	e0b2      	b.n	312b0 <_http_client_read_chuked_entity+0x1fc>
			} else if (module->resp.read_length <= length) {
   3114a:	687b      	ldr	r3, [r7, #4]
   3114c:	22e0      	movs	r2, #224	; 0xe0
   3114e:	589a      	ldr	r2, [r3, r2]
   31150:	69fb      	ldr	r3, [r7, #28]
   31152:	429a      	cmp	r2, r3
   31154:	dd00      	ble.n	31158 <_http_client_read_chuked_entity+0xa4>
   31156:	e0ab      	b.n	312b0 <_http_client_read_chuked_entity+0x1fc>
				data.recv_chunked_data.length = module->resp.read_length;
   31158:	687b      	ldr	r3, [r7, #4]
   3115a:	22e0      	movs	r2, #224	; 0xe0
   3115c:	589b      	ldr	r3, [r3, r2]
   3115e:	001a      	movs	r2, r3
   31160:	2308      	movs	r3, #8
   31162:	18fb      	adds	r3, r7, r3
   31164:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = buffer;
   31166:	2308      	movs	r3, #8
   31168:	18fb      	adds	r3, r7, r3
   3116a:	697a      	ldr	r2, [r7, #20]
   3116c:	605a      	str	r2, [r3, #4]
				data.recv_chunked_data.is_complete = 0;
   3116e:	2308      	movs	r3, #8
   31170:	18fb      	adds	r3, r7, r3
   31172:	2200      	movs	r2, #0
   31174:	721a      	strb	r2, [r3, #8]

				if (module->cb) {
   31176:	687b      	ldr	r3, [r7, #4]
   31178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3117a:	2b00      	cmp	r3, #0
   3117c:	d006      	beq.n	3118c <_http_client_read_chuked_entity+0xd8>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   3117e:	687b      	ldr	r3, [r7, #4]
   31180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31182:	2208      	movs	r2, #8
   31184:	18ba      	adds	r2, r7, r2
   31186:	6878      	ldr	r0, [r7, #4]
   31188:	2103      	movs	r1, #3
   3118a:	4798      	blx	r3
				}
				/* Last two character in the chunk is '\r\n'. */
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   3118c:	687b      	ldr	r3, [r7, #4]
   3118e:	22e0      	movs	r2, #224	; 0xe0
   31190:	589b      	ldr	r3, [r3, r2]
   31192:	3302      	adds	r3, #2
   31194:	697a      	ldr	r2, [r7, #20]
   31196:	18d2      	adds	r2, r2, r3
   31198:	687b      	ldr	r3, [r7, #4]
   3119a:	0011      	movs	r1, r2
   3119c:	0018      	movs	r0, r3
   3119e:	4b49      	ldr	r3, [pc, #292]	; (312c4 <_http_client_read_chuked_entity+0x210>)
   311a0:	4798      	blx	r3
				length = (int)module->recved_size;
   311a2:	687b      	ldr	r3, [r7, #4]
   311a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   311a6:	61fb      	str	r3, [r7, #28]
				buffer = module->config.recv_buffer;
   311a8:	687b      	ldr	r3, [r7, #4]
   311aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   311ac:	617b      	str	r3, [r7, #20]
				module->resp.read_length = -1;
   311ae:	687b      	ldr	r3, [r7, #4]
   311b0:	21e0      	movs	r1, #224	; 0xe0
   311b2:	2201      	movs	r2, #1
   311b4:	4252      	negs	r2, r2
   311b6:	505a      	str	r2, [r3, r1]
   311b8:	e07a      	b.n	312b0 <_http_client_read_chuked_entity+0x1fc>
			}
		} else {
			/* Read chunked length. */
			module->resp.read_length = 0;
   311ba:	687b      	ldr	r3, [r7, #4]
   311bc:	22e0      	movs	r2, #224	; 0xe0
   311be:	2100      	movs	r1, #0
   311c0:	5099      	str	r1, [r3, r2]
			for (; length > 0; buffer++, length--) {
   311c2:	e05a      	b.n	3127a <_http_client_read_chuked_entity+0x1c6>
				if (*buffer == '\n') {
   311c4:	697b      	ldr	r3, [r7, #20]
   311c6:	781b      	ldrb	r3, [r3, #0]
   311c8:	2b0a      	cmp	r3, #10
   311ca:	d106      	bne.n	311da <_http_client_read_chuked_entity+0x126>
					buffer++;
   311cc:	697b      	ldr	r3, [r7, #20]
   311ce:	3301      	adds	r3, #1
   311d0:	617b      	str	r3, [r7, #20]
					length--;
   311d2:	69fb      	ldr	r3, [r7, #28]
   311d4:	3b01      	subs	r3, #1
   311d6:	61fb      	str	r3, [r7, #28]
					break;
   311d8:	e052      	b.n	31280 <_http_client_read_chuked_entity+0x1cc>
				}
				if (extension != 0) {
   311da:	69bb      	ldr	r3, [r7, #24]
   311dc:	2b00      	cmp	r3, #0
   311de:	d145      	bne.n	3126c <_http_client_read_chuked_entity+0x1b8>
					continue;
				}
				if (*buffer >= '0' && *buffer <= '9') {
   311e0:	697b      	ldr	r3, [r7, #20]
   311e2:	781b      	ldrb	r3, [r3, #0]
   311e4:	2b2f      	cmp	r3, #47	; 0x2f
   311e6:	d910      	bls.n	3120a <_http_client_read_chuked_entity+0x156>
   311e8:	697b      	ldr	r3, [r7, #20]
   311ea:	781b      	ldrb	r3, [r3, #0]
   311ec:	2b39      	cmp	r3, #57	; 0x39
   311ee:	d80c      	bhi.n	3120a <_http_client_read_chuked_entity+0x156>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   311f0:	687b      	ldr	r3, [r7, #4]
   311f2:	22e0      	movs	r2, #224	; 0xe0
   311f4:	589b      	ldr	r3, [r3, r2]
   311f6:	011b      	lsls	r3, r3, #4
   311f8:	697a      	ldr	r2, [r7, #20]
   311fa:	7812      	ldrb	r2, [r2, #0]
   311fc:	189b      	adds	r3, r3, r2
   311fe:	3b30      	subs	r3, #48	; 0x30
   31200:	001a      	movs	r2, r3
   31202:	687b      	ldr	r3, [r7, #4]
   31204:	21e0      	movs	r1, #224	; 0xe0
   31206:	505a      	str	r2, [r3, r1]
   31208:	e031      	b.n	3126e <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   3120a:	697b      	ldr	r3, [r7, #20]
   3120c:	781b      	ldrb	r3, [r3, #0]
   3120e:	2b60      	cmp	r3, #96	; 0x60
   31210:	d910      	bls.n	31234 <_http_client_read_chuked_entity+0x180>
   31212:	697b      	ldr	r3, [r7, #20]
   31214:	781b      	ldrb	r3, [r3, #0]
   31216:	2b66      	cmp	r3, #102	; 0x66
   31218:	d80c      	bhi.n	31234 <_http_client_read_chuked_entity+0x180>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   3121a:	687b      	ldr	r3, [r7, #4]
   3121c:	22e0      	movs	r2, #224	; 0xe0
   3121e:	589b      	ldr	r3, [r3, r2]
   31220:	011b      	lsls	r3, r3, #4
   31222:	697a      	ldr	r2, [r7, #20]
   31224:	7812      	ldrb	r2, [r2, #0]
   31226:	189b      	adds	r3, r3, r2
   31228:	3b61      	subs	r3, #97	; 0x61
   3122a:	001a      	movs	r2, r3
   3122c:	687b      	ldr	r3, [r7, #4]
   3122e:	21e0      	movs	r1, #224	; 0xe0
   31230:	505a      	str	r2, [r3, r1]
   31232:	e01c      	b.n	3126e <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   31234:	697b      	ldr	r3, [r7, #20]
   31236:	781b      	ldrb	r3, [r3, #0]
   31238:	2b40      	cmp	r3, #64	; 0x40
   3123a:	d910      	bls.n	3125e <_http_client_read_chuked_entity+0x1aa>
   3123c:	697b      	ldr	r3, [r7, #20]
   3123e:	781b      	ldrb	r3, [r3, #0]
   31240:	2b46      	cmp	r3, #70	; 0x46
   31242:	d80c      	bhi.n	3125e <_http_client_read_chuked_entity+0x1aa>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   31244:	687b      	ldr	r3, [r7, #4]
   31246:	22e0      	movs	r2, #224	; 0xe0
   31248:	589b      	ldr	r3, [r3, r2]
   3124a:	011b      	lsls	r3, r3, #4
   3124c:	697a      	ldr	r2, [r7, #20]
   3124e:	7812      	ldrb	r2, [r2, #0]
   31250:	189b      	adds	r3, r3, r2
   31252:	3b41      	subs	r3, #65	; 0x41
   31254:	001a      	movs	r2, r3
   31256:	687b      	ldr	r3, [r7, #4]
   31258:	21e0      	movs	r1, #224	; 0xe0
   3125a:	505a      	str	r2, [r3, r1]
   3125c:	e007      	b.n	3126e <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer == ';') {
   3125e:	697b      	ldr	r3, [r7, #20]
   31260:	781b      	ldrb	r3, [r3, #0]
   31262:	2b3b      	cmp	r3, #59	; 0x3b
   31264:	d103      	bne.n	3126e <_http_client_read_chuked_entity+0x1ba>
					extension = 1;
   31266:	2301      	movs	r3, #1
   31268:	61bb      	str	r3, [r7, #24]
   3126a:	e000      	b.n	3126e <_http_client_read_chuked_entity+0x1ba>
					continue;
   3126c:	46c0      	nop			; (mov r8, r8)
			for (; length > 0; buffer++, length--) {
   3126e:	697b      	ldr	r3, [r7, #20]
   31270:	3301      	adds	r3, #1
   31272:	617b      	str	r3, [r7, #20]
   31274:	69fb      	ldr	r3, [r7, #28]
   31276:	3b01      	subs	r3, #1
   31278:	61fb      	str	r3, [r7, #28]
   3127a:	69fb      	ldr	r3, [r7, #28]
   3127c:	2b00      	cmp	r3, #0
   3127e:	dca1      	bgt.n	311c4 <_http_client_read_chuked_entity+0x110>
				}
			}

			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   31280:	687b      	ldr	r3, [r7, #4]
   31282:	22e0      	movs	r2, #224	; 0xe0
   31284:	589a      	ldr	r2, [r3, r2]
   31286:	687b      	ldr	r3, [r7, #4]
   31288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   3128a:	429a      	cmp	r2, r3
   3128c:	dd07      	ble.n	3129e <_http_client_read_chuked_entity+0x1ea>
				/* Chunked size is too big. */
				/* Through exception. */
				_http_client_clear_conn(module, -EOVERFLOW);
   3128e:	238b      	movs	r3, #139	; 0x8b
   31290:	425a      	negs	r2, r3
   31292:	687b      	ldr	r3, [r7, #4]
   31294:	0011      	movs	r1, r2
   31296:	0018      	movs	r0, r3
   31298:	4b09      	ldr	r3, [pc, #36]	; (312c0 <_http_client_read_chuked_entity+0x20c>)
   3129a:	4798      	blx	r3
				return;
   3129c:	e00d      	b.n	312ba <_http_client_read_chuked_entity+0x206>
			}

			if (length  == 0) {
   3129e:	69fb      	ldr	r3, [r7, #28]
   312a0:	2b00      	cmp	r3, #0
   312a2:	d105      	bne.n	312b0 <_http_client_read_chuked_entity+0x1fc>
				/* currently not received packet yet. */
				module->resp.read_length = -1;
   312a4:	687b      	ldr	r3, [r7, #4]
   312a6:	21e0      	movs	r1, #224	; 0xe0
   312a8:	2201      	movs	r2, #1
   312aa:	4252      	negs	r2, r2
   312ac:	505a      	str	r2, [r3, r1]
				return;
   312ae:	e004      	b.n	312ba <_http_client_read_chuked_entity+0x206>
			}
		}
	} while(module->recved_size > 0);
   312b0:	687b      	ldr	r3, [r7, #4]
   312b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   312b4:	2b00      	cmp	r3, #0
   312b6:	d000      	beq.n	312ba <_http_client_read_chuked_entity+0x206>
   312b8:	e708      	b.n	310cc <_http_client_read_chuked_entity+0x18>
}
   312ba:	46bd      	mov	sp, r7
   312bc:	b008      	add	sp, #32
   312be:	bd80      	pop	{r7, pc}
   312c0:	0003048d 	.word	0x0003048d
   312c4:	00031475 	.word	0x00031475

000312c8 <_http_client_handle_entity>:

int _http_client_handle_entity(struct http_client_module *const module)
{
   312c8:	b580      	push	{r7, lr}
   312ca:	b086      	sub	sp, #24
   312cc:	af00      	add	r7, sp, #0
   312ce:	6078      	str	r0, [r7, #4]
	union http_client_data data;
	char *buffer = module->config.recv_buffer;
   312d0:	687b      	ldr	r3, [r7, #4]
   312d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   312d4:	617b      	str	r3, [r7, #20]

	/* If data size is lesser than buffer size, read all buffer and retransmission it to application. */
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   312d6:	687b      	ldr	r3, [r7, #4]
   312d8:	22dc      	movs	r2, #220	; 0xdc
   312da:	589b      	ldr	r3, [r3, r2]
   312dc:	2b00      	cmp	r3, #0
   312de:	db58      	blt.n	31392 <_http_client_handle_entity+0xca>
   312e0:	687b      	ldr	r3, [r7, #4]
   312e2:	22dc      	movs	r2, #220	; 0xdc
   312e4:	589a      	ldr	r2, [r3, r2]
   312e6:	687b      	ldr	r3, [r7, #4]
   312e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   312ea:	429a      	cmp	r2, r3
   312ec:	dc51      	bgt.n	31392 <_http_client_handle_entity+0xca>
		if ((int)module->recved_size >= module->resp.content_length) {
   312ee:	687b      	ldr	r3, [r7, #4]
   312f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   312f2:	0019      	movs	r1, r3
   312f4:	687b      	ldr	r3, [r7, #4]
   312f6:	22dc      	movs	r2, #220	; 0xdc
   312f8:	589b      	ldr	r3, [r3, r2]
   312fa:	4299      	cmp	r1, r3
   312fc:	da00      	bge.n	31300 <_http_client_handle_entity+0x38>
   312fe:	e0a9      	b.n	31454 <_http_client_handle_entity+0x18c>
			if (module->cb && module->resp.response_code) {
   31300:	687b      	ldr	r3, [r7, #4]
   31302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31304:	2b00      	cmp	r3, #0
   31306:	d020      	beq.n	3134a <_http_client_handle_entity+0x82>
   31308:	687b      	ldr	r3, [r7, #4]
   3130a:	22e4      	movs	r2, #228	; 0xe4
   3130c:	5a9b      	ldrh	r3, [r3, r2]
   3130e:	2b00      	cmp	r3, #0
   31310:	d01b      	beq.n	3134a <_http_client_handle_entity+0x82>
				data.recv_response.response_code = module->resp.response_code;
   31312:	687b      	ldr	r3, [r7, #4]
   31314:	22e4      	movs	r2, #228	; 0xe4
   31316:	5a9a      	ldrh	r2, [r3, r2]
   31318:	2308      	movs	r3, #8
   3131a:	18fb      	adds	r3, r7, r3
   3131c:	801a      	strh	r2, [r3, #0]
				data.recv_response.is_chunked = 0;
   3131e:	2308      	movs	r3, #8
   31320:	18fb      	adds	r3, r7, r3
   31322:	2200      	movs	r2, #0
   31324:	709a      	strb	r2, [r3, #2]
				data.recv_response.content_length = module->resp.content_length;
   31326:	687b      	ldr	r3, [r7, #4]
   31328:	22dc      	movs	r2, #220	; 0xdc
   3132a:	589b      	ldr	r3, [r3, r2]
   3132c:	001a      	movs	r2, r3
   3132e:	2308      	movs	r3, #8
   31330:	18fb      	adds	r3, r7, r3
   31332:	605a      	str	r2, [r3, #4]
				data.recv_response.content = buffer;
   31334:	2308      	movs	r3, #8
   31336:	18fb      	adds	r3, r7, r3
   31338:	697a      	ldr	r2, [r7, #20]
   3133a:	609a      	str	r2, [r3, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   3133c:	687b      	ldr	r3, [r7, #4]
   3133e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31340:	2208      	movs	r2, #8
   31342:	18ba      	adds	r2, r7, r2
   31344:	6878      	ldr	r0, [r7, #4]
   31346:	2102      	movs	r1, #2
   31348:	4798      	blx	r3
			}
			module->resp.state = STATE_PARSE_HEADER;
   3134a:	687b      	ldr	r3, [r7, #4]
   3134c:	22d8      	movs	r2, #216	; 0xd8
   3134e:	2100      	movs	r1, #0
   31350:	5099      	str	r1, [r3, r2]
			module->resp.response_code = 0;
   31352:	687b      	ldr	r3, [r7, #4]
   31354:	22e4      	movs	r2, #228	; 0xe4
   31356:	2100      	movs	r1, #0
   31358:	5299      	strh	r1, [r3, r2]
			
			if (module->permanent == 0) {
   3135a:	687b      	ldr	r3, [r7, #4]
   3135c:	2241      	movs	r2, #65	; 0x41
   3135e:	5c9b      	ldrb	r3, [r3, r2]
   31360:	2202      	movs	r2, #2
   31362:	4013      	ands	r3, r2
   31364:	b2db      	uxtb	r3, r3
   31366:	2b00      	cmp	r3, #0
   31368:	d105      	bne.n	31376 <_http_client_handle_entity+0xae>
				/* This server was not supported keep alive. */
				_http_client_clear_conn(module, 0);
   3136a:	687b      	ldr	r3, [r7, #4]
   3136c:	2100      	movs	r1, #0
   3136e:	0018      	movs	r0, r3
   31370:	4b3b      	ldr	r3, [pc, #236]	; (31460 <_http_client_handle_entity+0x198>)
   31372:	4798      	blx	r3
		if ((int)module->recved_size >= module->resp.content_length) {
   31374:	e06e      	b.n	31454 <_http_client_handle_entity+0x18c>
			} else {
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   31376:	687b      	ldr	r3, [r7, #4]
   31378:	22dc      	movs	r2, #220	; 0xdc
   3137a:	589b      	ldr	r3, [r3, r2]
   3137c:	001a      	movs	r2, r3
   3137e:	697b      	ldr	r3, [r7, #20]
   31380:	189a      	adds	r2, r3, r2
   31382:	687b      	ldr	r3, [r7, #4]
   31384:	0011      	movs	r1, r2
   31386:	0018      	movs	r0, r3
   31388:	4b36      	ldr	r3, [pc, #216]	; (31464 <_http_client_handle_entity+0x19c>)
   3138a:	4798      	blx	r3
				return module->recved_size;
   3138c:	687b      	ldr	r3, [r7, #4]
   3138e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31390:	e061      	b.n	31456 <_http_client_handle_entity+0x18e>
			}
		}
		/* else, buffer was not received enough size yet. */
	} else {
		if (module->resp.content_length >= 0) {
   31392:	687b      	ldr	r3, [r7, #4]
   31394:	22dc      	movs	r2, #220	; 0xdc
   31396:	589b      	ldr	r3, [r3, r2]
   31398:	2b00      	cmp	r3, #0
   3139a:	db57      	blt.n	3144c <_http_client_handle_entity+0x184>
			data.recv_chunked_data.length = module->recved_size;
   3139c:	687b      	ldr	r3, [r7, #4]
   3139e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   313a0:	2308      	movs	r3, #8
   313a2:	18fb      	adds	r3, r7, r3
   313a4:	601a      	str	r2, [r3, #0]
			data.recv_chunked_data.data = buffer;
   313a6:	2308      	movs	r3, #8
   313a8:	18fb      	adds	r3, r7, r3
   313aa:	697a      	ldr	r2, [r7, #20]
   313ac:	605a      	str	r2, [r3, #4]
			module->resp.read_length += (int)module->recved_size;
   313ae:	687b      	ldr	r3, [r7, #4]
   313b0:	22e0      	movs	r2, #224	; 0xe0
   313b2:	589a      	ldr	r2, [r3, r2]
   313b4:	687b      	ldr	r3, [r7, #4]
   313b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   313b8:	18d2      	adds	r2, r2, r3
   313ba:	687b      	ldr	r3, [r7, #4]
   313bc:	21e0      	movs	r1, #224	; 0xe0
   313be:	505a      	str	r2, [r3, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   313c0:	687b      	ldr	r3, [r7, #4]
   313c2:	22dc      	movs	r2, #220	; 0xdc
   313c4:	589a      	ldr	r2, [r3, r2]
   313c6:	687b      	ldr	r3, [r7, #4]
   313c8:	21e0      	movs	r1, #224	; 0xe0
   313ca:	585b      	ldr	r3, [r3, r1]
   313cc:	429a      	cmp	r2, r3
   313ce:	dc0c      	bgt.n	313ea <_http_client_handle_entity+0x122>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   313d0:	687b      	ldr	r3, [r7, #4]
   313d2:	22d8      	movs	r2, #216	; 0xd8
   313d4:	2100      	movs	r1, #0
   313d6:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   313d8:	687b      	ldr	r3, [r7, #4]
   313da:	22e4      	movs	r2, #228	; 0xe4
   313dc:	2100      	movs	r1, #0
   313de:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   313e0:	2308      	movs	r3, #8
   313e2:	18fb      	adds	r3, r7, r3
   313e4:	2201      	movs	r2, #1
   313e6:	721a      	strb	r2, [r3, #8]
   313e8:	e003      	b.n	313f2 <_http_client_handle_entity+0x12a>
			} else {
				data.recv_chunked_data.is_complete = 0;
   313ea:	2308      	movs	r3, #8
   313ec:	18fb      	adds	r3, r7, r3
   313ee:	2200      	movs	r2, #0
   313f0:	721a      	strb	r2, [r3, #8]
			}

			if (module->cb) {
   313f2:	687b      	ldr	r3, [r7, #4]
   313f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   313f6:	2b00      	cmp	r3, #0
   313f8:	d006      	beq.n	31408 <_http_client_handle_entity+0x140>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   313fa:	687b      	ldr	r3, [r7, #4]
   313fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   313fe:	2208      	movs	r2, #8
   31400:	18ba      	adds	r2, r7, r2
   31402:	6878      	ldr	r0, [r7, #4]
   31404:	2103      	movs	r1, #3
   31406:	4798      	blx	r3
			}
			
			if (data.recv_chunked_data.is_complete == 1) {
   31408:	2308      	movs	r3, #8
   3140a:	18fb      	adds	r3, r7, r3
   3140c:	7a1b      	ldrb	r3, [r3, #8]
   3140e:	2b01      	cmp	r3, #1
   31410:	d112      	bne.n	31438 <_http_client_handle_entity+0x170>
				if (module->permanent == 0) {
   31412:	687b      	ldr	r3, [r7, #4]
   31414:	2241      	movs	r2, #65	; 0x41
   31416:	5c9b      	ldrb	r3, [r3, r2]
   31418:	2202      	movs	r2, #2
   3141a:	4013      	ands	r3, r2
   3141c:	b2db      	uxtb	r3, r3
   3141e:	2b00      	cmp	r3, #0
   31420:	d10a      	bne.n	31438 <_http_client_handle_entity+0x170>
					/* This server was not supported keep alive. */
					printf("1\r\n");
   31422:	4b11      	ldr	r3, [pc, #68]	; (31468 <_http_client_handle_entity+0x1a0>)
   31424:	0018      	movs	r0, r3
   31426:	4b11      	ldr	r3, [pc, #68]	; (3146c <_http_client_handle_entity+0x1a4>)
   31428:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   3142a:	687b      	ldr	r3, [r7, #4]
   3142c:	2100      	movs	r1, #0
   3142e:	0018      	movs	r0, r3
   31430:	4b0b      	ldr	r3, [pc, #44]	; (31460 <_http_client_handle_entity+0x198>)
   31432:	4798      	blx	r3
					return 0;
   31434:	2300      	movs	r3, #0
   31436:	e00e      	b.n	31456 <_http_client_handle_entity+0x18e>
				}
			}
			_http_client_move_buffer(module, buffer + module->recved_size);
   31438:	687b      	ldr	r3, [r7, #4]
   3143a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   3143c:	697a      	ldr	r2, [r7, #20]
   3143e:	18d2      	adds	r2, r2, r3
   31440:	687b      	ldr	r3, [r7, #4]
   31442:	0011      	movs	r1, r2
   31444:	0018      	movs	r0, r3
   31446:	4b07      	ldr	r3, [pc, #28]	; (31464 <_http_client_handle_entity+0x19c>)
   31448:	4798      	blx	r3
   3144a:	e003      	b.n	31454 <_http_client_handle_entity+0x18c>
		} else {
			_http_client_read_chuked_entity(module);
   3144c:	687b      	ldr	r3, [r7, #4]
   3144e:	0018      	movs	r0, r3
   31450:	4b07      	ldr	r3, [pc, #28]	; (31470 <_http_client_handle_entity+0x1a8>)
   31452:	4798      	blx	r3
		}
	}

	return 0;
   31454:	2300      	movs	r3, #0
}
   31456:	0018      	movs	r0, r3
   31458:	46bd      	mov	sp, r7
   3145a:	b006      	add	sp, #24
   3145c:	bd80      	pop	{r7, pc}
   3145e:	46c0      	nop			; (mov r8, r8)
   31460:	0003048d 	.word	0x0003048d
   31464:	00031475 	.word	0x00031475
   31468:	00039820 	.word	0x00039820
   3146c:	00034801 	.word	0x00034801
   31470:	000310b5 	.word	0x000310b5

00031474 <_http_client_move_buffer>:

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   31474:	b580      	push	{r7, lr}
   31476:	b084      	sub	sp, #16
   31478:	af00      	add	r7, sp, #0
   3147a:	6078      	str	r0, [r7, #4]
   3147c:	6039      	str	r1, [r7, #0]
	char *buffer = module->config.recv_buffer;
   3147e:	687b      	ldr	r3, [r7, #4]
   31480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   31482:	60fb      	str	r3, [r7, #12]
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   31484:	687b      	ldr	r3, [r7, #4]
   31486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31488:	001a      	movs	r2, r3
   3148a:	683b      	ldr	r3, [r7, #0]
   3148c:	1ad2      	subs	r2, r2, r3
   3148e:	68fb      	ldr	r3, [r7, #12]
   31490:	18d3      	adds	r3, r2, r3
   31492:	60bb      	str	r3, [r7, #8]

	if (remain > 0) {
   31494:	68bb      	ldr	r3, [r7, #8]
   31496:	2b00      	cmp	r3, #0
   31498:	dd09      	ble.n	314ae <_http_client_move_buffer+0x3a>
		memmove(buffer, base, remain);
   3149a:	68ba      	ldr	r2, [r7, #8]
   3149c:	6839      	ldr	r1, [r7, #0]
   3149e:	68fb      	ldr	r3, [r7, #12]
   314a0:	0018      	movs	r0, r3
   314a2:	4b06      	ldr	r3, [pc, #24]	; (314bc <_http_client_move_buffer+0x48>)
   314a4:	4798      	blx	r3
		module->recved_size = remain;
   314a6:	68ba      	ldr	r2, [r7, #8]
   314a8:	687b      	ldr	r3, [r7, #4]
   314aa:	645a      	str	r2, [r3, #68]	; 0x44
	} else {
		module->recved_size = 0;
	}
}
   314ac:	e002      	b.n	314b4 <_http_client_move_buffer+0x40>
		module->recved_size = 0;
   314ae:	687b      	ldr	r3, [r7, #4]
   314b0:	2200      	movs	r2, #0
   314b2:	645a      	str	r2, [r3, #68]	; 0x44
}
   314b4:	46c0      	nop			; (mov r8, r8)
   314b6:	46bd      	mov	sp, r7
   314b8:	b004      	add	sp, #16
   314ba:	bd80      	pop	{r7, pc}
   314bc:	000345bb 	.word	0x000345bb

000314c0 <stream_writer_init>:
#include <asf.h>
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
   314c0:	b580      	push	{r7, lr}
   314c2:	b084      	sub	sp, #16
   314c4:	af00      	add	r7, sp, #0
   314c6:	60f8      	str	r0, [r7, #12]
   314c8:	60b9      	str	r1, [r7, #8]
   314ca:	607a      	str	r2, [r7, #4]
   314cc:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
   314ce:	68fb      	ldr	r3, [r7, #12]
   314d0:	687a      	ldr	r2, [r7, #4]
   314d2:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
   314d4:	68fb      	ldr	r3, [r7, #12]
   314d6:	68ba      	ldr	r2, [r7, #8]
   314d8:	611a      	str	r2, [r3, #16]
	writer->written = 0;
   314da:	68fb      	ldr	r3, [r7, #12]
   314dc:	2200      	movs	r2, #0
   314de:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
   314e0:	68fb      	ldr	r3, [r7, #12]
   314e2:	683a      	ldr	r2, [r7, #0]
   314e4:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
   314e6:	68fb      	ldr	r3, [r7, #12]
   314e8:	69ba      	ldr	r2, [r7, #24]
   314ea:	60da      	str	r2, [r3, #12]
}
   314ec:	46c0      	nop			; (mov r8, r8)
   314ee:	46bd      	mov	sp, r7
   314f0:	b004      	add	sp, #16
   314f2:	bd80      	pop	{r7, pc}

000314f4 <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
   314f4:	b580      	push	{r7, lr}
   314f6:	b084      	sub	sp, #16
   314f8:	af00      	add	r7, sp, #0
   314fa:	6078      	str	r0, [r7, #4]
   314fc:	000a      	movs	r2, r1
   314fe:	1cfb      	adds	r3, r7, #3
   31500:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
   31502:	687b      	ldr	r3, [r7, #4]
   31504:	681a      	ldr	r2, [r3, #0]
   31506:	687b      	ldr	r3, [r7, #4]
   31508:	685b      	ldr	r3, [r3, #4]
   3150a:	1ad3      	subs	r3, r2, r3
   3150c:	60fb      	str	r3, [r7, #12]
	
	if (remain < 1) {
   3150e:	68fb      	ldr	r3, [r7, #12]
   31510:	2b00      	cmp	r3, #0
   31512:	dc03      	bgt.n	3151c <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
   31514:	687b      	ldr	r3, [r7, #4]
   31516:	0018      	movs	r0, r3
   31518:	4b08      	ldr	r3, [pc, #32]	; (3153c <stream_writer_send_8+0x48>)
   3151a:	4798      	blx	r3
	}
	
	writer->buffer[writer->written++] = (char)value;
   3151c:	687b      	ldr	r3, [r7, #4]
   3151e:	6919      	ldr	r1, [r3, #16]
   31520:	687b      	ldr	r3, [r7, #4]
   31522:	685b      	ldr	r3, [r3, #4]
   31524:	1c58      	adds	r0, r3, #1
   31526:	687a      	ldr	r2, [r7, #4]
   31528:	6050      	str	r0, [r2, #4]
   3152a:	18cb      	adds	r3, r1, r3
   3152c:	1cfa      	adds	r2, r7, #3
   3152e:	7812      	ldrb	r2, [r2, #0]
   31530:	701a      	strb	r2, [r3, #0]
}
   31532:	46c0      	nop			; (mov r8, r8)
   31534:	46bd      	mov	sp, r7
   31536:	b004      	add	sp, #16
   31538:	bd80      	pop	{r7, pc}
   3153a:	46c0      	nop			; (mov r8, r8)
   3153c:	0003157d 	.word	0x0003157d

00031540 <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, const char *buffer, size_t length)
{
   31540:	b580      	push	{r7, lr}
   31542:	b084      	sub	sp, #16
   31544:	af00      	add	r7, sp, #0
   31546:	60f8      	str	r0, [r7, #12]
   31548:	60b9      	str	r1, [r7, #8]
   3154a:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
   3154c:	e00d      	b.n	3156a <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
   3154e:	68bb      	ldr	r3, [r7, #8]
   31550:	781b      	ldrb	r3, [r3, #0]
   31552:	b25a      	sxtb	r2, r3
   31554:	68fb      	ldr	r3, [r7, #12]
   31556:	0011      	movs	r1, r2
   31558:	0018      	movs	r0, r3
   3155a:	4b07      	ldr	r3, [pc, #28]	; (31578 <stream_writer_send_buffer+0x38>)
   3155c:	4798      	blx	r3
	for (; length > 0; length--, buffer++) {
   3155e:	687b      	ldr	r3, [r7, #4]
   31560:	3b01      	subs	r3, #1
   31562:	607b      	str	r3, [r7, #4]
   31564:	68bb      	ldr	r3, [r7, #8]
   31566:	3301      	adds	r3, #1
   31568:	60bb      	str	r3, [r7, #8]
   3156a:	687b      	ldr	r3, [r7, #4]
   3156c:	2b00      	cmp	r3, #0
   3156e:	d1ee      	bne.n	3154e <stream_writer_send_buffer+0xe>
	}
}
   31570:	46c0      	nop			; (mov r8, r8)
   31572:	46bd      	mov	sp, r7
   31574:	b004      	add	sp, #16
   31576:	bd80      	pop	{r7, pc}
   31578:	000314f5 	.word	0x000314f5

0003157c <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
   3157c:	b590      	push	{r4, r7, lr}
   3157e:	b083      	sub	sp, #12
   31580:	af00      	add	r7, sp, #0
   31582:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
   31584:	687b      	ldr	r3, [r7, #4]
   31586:	685b      	ldr	r3, [r3, #4]
   31588:	2b00      	cmp	r3, #0
   3158a:	d00c      	beq.n	315a6 <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   3158c:	687b      	ldr	r3, [r7, #4]
   3158e:	689c      	ldr	r4, [r3, #8]
   31590:	687b      	ldr	r3, [r7, #4]
   31592:	68d8      	ldr	r0, [r3, #12]
   31594:	687b      	ldr	r3, [r7, #4]
   31596:	6919      	ldr	r1, [r3, #16]
   31598:	687b      	ldr	r3, [r7, #4]
   3159a:	685b      	ldr	r3, [r3, #4]
   3159c:	001a      	movs	r2, r3
   3159e:	47a0      	blx	r4
		writer->written = 0;
   315a0:	687b      	ldr	r3, [r7, #4]
   315a2:	2200      	movs	r2, #0
   315a4:	605a      	str	r2, [r3, #4]
	}
}
   315a6:	46c0      	nop			; (mov r8, r8)
   315a8:	46bd      	mov	sp, r7
   315aa:	b003      	add	sp, #12
   315ac:	bd90      	pop	{r4, r7, pc}
	...

000315b0 <system_cpu_clock_get_hz>:
{
   315b0:	b580      	push	{r7, lr}
   315b2:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   315b4:	2000      	movs	r0, #0
   315b6:	4b05      	ldr	r3, [pc, #20]	; (315cc <system_cpu_clock_get_hz+0x1c>)
   315b8:	4798      	blx	r3
   315ba:	0002      	movs	r2, r0
   315bc:	4b04      	ldr	r3, [pc, #16]	; (315d0 <system_cpu_clock_get_hz+0x20>)
   315be:	7a1b      	ldrb	r3, [r3, #8]
   315c0:	b2db      	uxtb	r3, r3
   315c2:	40da      	lsrs	r2, r3
   315c4:	0013      	movs	r3, r2
}
   315c6:	0018      	movs	r0, r3
   315c8:	46bd      	mov	sp, r7
   315ca:	bd80      	pop	{r7, pc}
   315cc:	00028e65 	.word	0x00028e65
   315d0:	40000400 	.word	0x40000400

000315d4 <tcc_enable>:
{
   315d4:	b580      	push	{r7, lr}
   315d6:	b084      	sub	sp, #16
   315d8:	af00      	add	r7, sp, #0
   315da:	6078      	str	r0, [r7, #4]
	Tcc *const tcc_module = module_inst->hw;
   315dc:	687b      	ldr	r3, [r7, #4]
   315de:	681b      	ldr	r3, [r3, #0]
   315e0:	60fb      	str	r3, [r7, #12]
	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   315e2:	46c0      	nop			; (mov r8, r8)
   315e4:	68fb      	ldr	r3, [r7, #12]
   315e6:	689b      	ldr	r3, [r3, #8]
   315e8:	2202      	movs	r2, #2
   315ea:	4013      	ands	r3, r2
   315ec:	d1fa      	bne.n	315e4 <tcc_enable+0x10>
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   315ee:	68fb      	ldr	r3, [r7, #12]
   315f0:	681b      	ldr	r3, [r3, #0]
   315f2:	2202      	movs	r2, #2
   315f4:	431a      	orrs	r2, r3
   315f6:	68fb      	ldr	r3, [r7, #12]
   315f8:	601a      	str	r2, [r3, #0]
}
   315fa:	46c0      	nop			; (mov r8, r8)
   315fc:	46bd      	mov	sp, r7
   315fe:	b004      	add	sp, #16
   31600:	bd80      	pop	{r7, pc}
	...

00031604 <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
   31604:	b580      	push	{r7, lr}
   31606:	b082      	sub	sp, #8
   31608:	af00      	add	r7, sp, #0
   3160a:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
   3160c:	4b04      	ldr	r3, [pc, #16]	; (31620 <sw_timer_tcc_callback+0x1c>)
   3160e:	681b      	ldr	r3, [r3, #0]
   31610:	1c5a      	adds	r2, r3, #1
   31612:	4b03      	ldr	r3, [pc, #12]	; (31620 <sw_timer_tcc_callback+0x1c>)
   31614:	601a      	str	r2, [r3, #0]
}
   31616:	46c0      	nop			; (mov r8, r8)
   31618:	46bd      	mov	sp, r7
   3161a:	b002      	add	sp, #8
   3161c:	bd80      	pop	{r7, pc}
   3161e:	46c0      	nop			; (mov r8, r8)
   31620:	200046dc 	.word	0x200046dc

00031624 <sw_timer_get_config_defaults>:
}

#endif

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
   31624:	b580      	push	{r7, lr}
   31626:	b082      	sub	sp, #8
   31628:	af00      	add	r7, sp, #0
   3162a:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
   3162c:	687b      	ldr	r3, [r7, #4]
   3162e:	2264      	movs	r2, #100	; 0x64
   31630:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
   31632:	687b      	ldr	r3, [r7, #4]
   31634:	2200      	movs	r2, #0
   31636:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
   31638:	687b      	ldr	r3, [r7, #4]
   3163a:	2200      	movs	r2, #0
   3163c:	705a      	strb	r2, [r3, #1]
}
   3163e:	46c0      	nop			; (mov r8, r8)
   31640:	46bd      	mov	sp, r7
   31642:	b002      	add	sp, #8
   31644:	bd80      	pop	{r7, pc}
	...

00031648 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   31648:	b590      	push	{r4, r7, lr}
   3164a:	b0b1      	sub	sp, #196	; 0xc4
   3164c:	af00      	add	r7, sp, #0
   3164e:	6078      	str	r0, [r7, #4]
   31650:	6039      	str	r1, [r7, #0]
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   31652:	230c      	movs	r3, #12
   31654:	18fb      	adds	r3, r7, r3
   31656:	4a2e      	ldr	r2, [pc, #184]	; (31710 <sw_timer_init+0xc8>)
   31658:	ca13      	ldmia	r2!, {r0, r1, r4}
   3165a:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   3165c:	683b      	ldr	r3, [r7, #0]
   3165e:	885b      	ldrh	r3, [r3, #2]
   31660:	001a      	movs	r2, r3
   31662:	687b      	ldr	r3, [r7, #4]
   31664:	655a      	str	r2, [r3, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   31666:	687b      	ldr	r3, [r7, #4]
   31668:	3314      	adds	r3, #20
   3166a:	22bc      	movs	r2, #188	; 0xbc
   3166c:	18ba      	adds	r2, r7, r2
   3166e:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   31670:	683b      	ldr	r3, [r7, #0]
   31672:	781b      	ldrb	r3, [r3, #0]
   31674:	001a      	movs	r2, r3
   31676:	230c      	movs	r3, #12
   31678:	18fb      	adds	r3, r7, r3
   3167a:	0092      	lsls	r2, r2, #2
   3167c:	58d2      	ldr	r2, [r2, r3]
   3167e:	2318      	movs	r3, #24
   31680:	18fb      	adds	r3, r7, r3
   31682:	0011      	movs	r1, r2
   31684:	0018      	movs	r0, r3
   31686:	4b23      	ldr	r3, [pc, #140]	; (31714 <sw_timer_init+0xcc>)
   31688:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   3168a:	4b23      	ldr	r3, [pc, #140]	; (31718 <sw_timer_init+0xd0>)
   3168c:	4798      	blx	r3
   3168e:	0004      	movs	r4, r0
   31690:	683b      	ldr	r3, [r7, #0]
   31692:	885b      	ldrh	r3, [r3, #2]
   31694:	001a      	movs	r2, r3
   31696:	4b21      	ldr	r3, [pc, #132]	; (3171c <sw_timer_init+0xd4>)
   31698:	0011      	movs	r1, r2
   3169a:	22fa      	movs	r2, #250	; 0xfa
   3169c:	0210      	lsls	r0, r2, #8
   3169e:	4798      	blx	r3
   316a0:	0003      	movs	r3, r0
   316a2:	001a      	movs	r2, r3
   316a4:	4b1e      	ldr	r3, [pc, #120]	; (31720 <sw_timer_init+0xd8>)
   316a6:	0011      	movs	r1, r2
   316a8:	0020      	movs	r0, r4
   316aa:	4798      	blx	r3
   316ac:	0003      	movs	r3, r0
   316ae:	001a      	movs	r2, r3
   316b0:	2318      	movs	r3, #24
   316b2:	18fb      	adds	r3, r7, r3
   316b4:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   316b6:	2318      	movs	r3, #24
   316b8:	18fb      	adds	r3, r7, r3
   316ba:	2205      	movs	r2, #5
   316bc:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   316be:	683b      	ldr	r3, [r7, #0]
   316c0:	781b      	ldrb	r3, [r3, #0]
   316c2:	001a      	movs	r2, r3
   316c4:	230c      	movs	r3, #12
   316c6:	18fb      	adds	r3, r7, r3
   316c8:	0092      	lsls	r2, r2, #2
   316ca:	58d1      	ldr	r1, [r2, r3]
   316cc:	2318      	movs	r3, #24
   316ce:	18fa      	adds	r2, r7, r3
   316d0:	23bc      	movs	r3, #188	; 0xbc
   316d2:	18fb      	adds	r3, r7, r3
   316d4:	681b      	ldr	r3, [r3, #0]
   316d6:	0018      	movs	r0, r3
   316d8:	4b12      	ldr	r3, [pc, #72]	; (31724 <sw_timer_init+0xdc>)
   316da:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   316dc:	683b      	ldr	r3, [r7, #0]
   316de:	785b      	ldrb	r3, [r3, #1]
   316e0:	3308      	adds	r3, #8
   316e2:	b2da      	uxtb	r2, r3
   316e4:	4910      	ldr	r1, [pc, #64]	; (31728 <sw_timer_init+0xe0>)
   316e6:	23bc      	movs	r3, #188	; 0xbc
   316e8:	18fb      	adds	r3, r7, r3
   316ea:	681b      	ldr	r3, [r3, #0]
   316ec:	0018      	movs	r0, r3
   316ee:	4b0f      	ldr	r3, [pc, #60]	; (3172c <sw_timer_init+0xe4>)
   316f0:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   316f2:	683b      	ldr	r3, [r7, #0]
   316f4:	785b      	ldrb	r3, [r3, #1]
   316f6:	3308      	adds	r3, #8
   316f8:	b2da      	uxtb	r2, r3
   316fa:	23bc      	movs	r3, #188	; 0xbc
   316fc:	18fb      	adds	r3, r7, r3
   316fe:	681b      	ldr	r3, [r3, #0]
   31700:	0011      	movs	r1, r2
   31702:	0018      	movs	r0, r3
   31704:	4b0a      	ldr	r3, [pc, #40]	; (31730 <sw_timer_init+0xe8>)
   31706:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   31708:	46c0      	nop			; (mov r8, r8)
   3170a:	46bd      	mov	sp, r7
   3170c:	b031      	add	sp, #196	; 0xc4
   3170e:	bd90      	pop	{r4, r7, pc}
   31710:	00039860 	.word	0x00039860
   31714:	000293fd 	.word	0x000293fd
   31718:	000315b1 	.word	0x000315b1
   3171c:	00031c39 	.word	0x00031c39
   31720:	00031b25 	.word	0x00031b25
   31724:	00029a59 	.word	0x00029a59
   31728:	00031605 	.word	0x00031605
   3172c:	00029f9d 	.word	0x00029f9d
   31730:	00029fdd 	.word	0x00029fdd

00031734 <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
   31734:	b580      	push	{r7, lr}
   31736:	b084      	sub	sp, #16
   31738:	af00      	add	r7, sp, #0
   3173a:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;
#endif

	Assert(module_inst);
#if (SAMD21)
	tcc_module = &module_inst->tcc_inst;
   3173c:	687b      	ldr	r3, [r7, #4]
   3173e:	3314      	adds	r3, #20
   31740:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
   31742:	68fb      	ldr	r3, [r7, #12]
   31744:	0018      	movs	r0, r3
   31746:	4b03      	ldr	r3, [pc, #12]	; (31754 <sw_timer_enable+0x20>)
   31748:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   3174a:	46c0      	nop			; (mov r8, r8)
   3174c:	46bd      	mov	sp, r7
   3174e:	b004      	add	sp, #16
   31750:	bd80      	pop	{r7, pc}
   31752:	46c0      	nop			; (mov r8, r8)
   31754:	000315d5 	.word	0x000315d5

00031758 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   31758:	b580      	push	{r7, lr}
   3175a:	b086      	sub	sp, #24
   3175c:	af00      	add	r7, sp, #0
   3175e:	60f8      	str	r0, [r7, #12]
   31760:	60b9      	str	r1, [r7, #8]
   31762:	607a      	str	r2, [r7, #4]
   31764:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   31766:	2300      	movs	r3, #0
   31768:	617b      	str	r3, [r7, #20]
   3176a:	e032      	b.n	317d2 <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
   3176c:	68f9      	ldr	r1, [r7, #12]
   3176e:	697a      	ldr	r2, [r7, #20]
   31770:	0013      	movs	r3, r2
   31772:	009b      	lsls	r3, r3, #2
   31774:	189b      	adds	r3, r3, r2
   31776:	009b      	lsls	r3, r3, #2
   31778:	5c5b      	ldrb	r3, [r3, r1]
   3177a:	07db      	lsls	r3, r3, #31
   3177c:	0fdb      	lsrs	r3, r3, #31
   3177e:	b2db      	uxtb	r3, r3
   31780:	2b00      	cmp	r3, #0
   31782:	d123      	bne.n	317cc <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
   31784:	697a      	ldr	r2, [r7, #20]
   31786:	0013      	movs	r3, r2
   31788:	009b      	lsls	r3, r3, #2
   3178a:	189b      	adds	r3, r3, r2
   3178c:	009b      	lsls	r3, r3, #2
   3178e:	68fa      	ldr	r2, [r7, #12]
   31790:	18d3      	adds	r3, r2, r3
   31792:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
   31794:	693b      	ldr	r3, [r7, #16]
   31796:	68ba      	ldr	r2, [r7, #8]
   31798:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
   3179a:	693b      	ldr	r3, [r7, #16]
   3179c:	781a      	ldrb	r2, [r3, #0]
   3179e:	2102      	movs	r1, #2
   317a0:	438a      	bics	r2, r1
   317a2:	701a      	strb	r2, [r3, #0]
			handler->context = context;
   317a4:	693b      	ldr	r3, [r7, #16]
   317a6:	687a      	ldr	r2, [r7, #4]
   317a8:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
   317aa:	68fb      	ldr	r3, [r7, #12]
   317ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   317ae:	4b0d      	ldr	r3, [pc, #52]	; (317e4 <sw_timer_register_callback+0x8c>)
   317b0:	0011      	movs	r1, r2
   317b2:	6838      	ldr	r0, [r7, #0]
   317b4:	4798      	blx	r3
   317b6:	0003      	movs	r3, r0
   317b8:	001a      	movs	r2, r3
   317ba:	693b      	ldr	r3, [r7, #16]
   317bc:	60da      	str	r2, [r3, #12]
			handler->used = 1;
   317be:	693b      	ldr	r3, [r7, #16]
   317c0:	781a      	ldrb	r2, [r3, #0]
   317c2:	2101      	movs	r1, #1
   317c4:	430a      	orrs	r2, r1
   317c6:	701a      	strb	r2, [r3, #0]
			return index;
   317c8:	697b      	ldr	r3, [r7, #20]
   317ca:	e007      	b.n	317dc <sw_timer_register_callback+0x84>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   317cc:	697b      	ldr	r3, [r7, #20]
   317ce:	3301      	adds	r3, #1
   317d0:	617b      	str	r3, [r7, #20]
   317d2:	697b      	ldr	r3, [r7, #20]
   317d4:	2b00      	cmp	r3, #0
   317d6:	ddc9      	ble.n	3176c <sw_timer_register_callback+0x14>
		}
	}
	return -1;
   317d8:	2301      	movs	r3, #1
   317da:	425b      	negs	r3, r3
}
   317dc:	0018      	movs	r0, r3
   317de:	46bd      	mov	sp, r7
   317e0:	b006      	add	sp, #24
   317e2:	bd80      	pop	{r7, pc}
   317e4:	00031b25 	.word	0x00031b25

000317e8 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   317e8:	b580      	push	{r7, lr}
   317ea:	b086      	sub	sp, #24
   317ec:	af00      	add	r7, sp, #0
   317ee:	60f8      	str	r0, [r7, #12]
   317f0:	60b9      	str	r1, [r7, #8]
   317f2:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   317f4:	68ba      	ldr	r2, [r7, #8]
   317f6:	0013      	movs	r3, r2
   317f8:	009b      	lsls	r3, r3, #2
   317fa:	189b      	adds	r3, r3, r2
   317fc:	009b      	lsls	r3, r3, #2
   317fe:	68fa      	ldr	r2, [r7, #12]
   31800:	18d3      	adds	r3, r2, r3
   31802:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
   31804:	697b      	ldr	r3, [r7, #20]
   31806:	781a      	ldrb	r2, [r3, #0]
   31808:	2102      	movs	r1, #2
   3180a:	430a      	orrs	r2, r1
   3180c:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   3180e:	68fb      	ldr	r3, [r7, #12]
   31810:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   31812:	4b07      	ldr	r3, [pc, #28]	; (31830 <sw_timer_enable_callback+0x48>)
   31814:	0011      	movs	r1, r2
   31816:	6878      	ldr	r0, [r7, #4]
   31818:	4798      	blx	r3
   3181a:	0003      	movs	r3, r0
   3181c:	001a      	movs	r2, r3
   3181e:	4b05      	ldr	r3, [pc, #20]	; (31834 <sw_timer_enable_callback+0x4c>)
   31820:	681b      	ldr	r3, [r3, #0]
   31822:	18d2      	adds	r2, r2, r3
   31824:	697b      	ldr	r3, [r7, #20]
   31826:	611a      	str	r2, [r3, #16]
}
   31828:	46c0      	nop			; (mov r8, r8)
   3182a:	46bd      	mov	sp, r7
   3182c:	b006      	add	sp, #24
   3182e:	bd80      	pop	{r7, pc}
   31830:	00031b25 	.word	0x00031b25
   31834:	200046dc 	.word	0x200046dc

00031838 <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
   31838:	b580      	push	{r7, lr}
   3183a:	b084      	sub	sp, #16
   3183c:	af00      	add	r7, sp, #0
   3183e:	6078      	str	r0, [r7, #4]
   31840:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   31842:	683a      	ldr	r2, [r7, #0]
   31844:	0013      	movs	r3, r2
   31846:	009b      	lsls	r3, r3, #2
   31848:	189b      	adds	r3, r3, r2
   3184a:	009b      	lsls	r3, r3, #2
   3184c:	687a      	ldr	r2, [r7, #4]
   3184e:	18d3      	adds	r3, r2, r3
   31850:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
   31852:	68fb      	ldr	r3, [r7, #12]
   31854:	781a      	ldrb	r2, [r3, #0]
   31856:	2102      	movs	r1, #2
   31858:	438a      	bics	r2, r1
   3185a:	701a      	strb	r2, [r3, #0]
}
   3185c:	46c0      	nop			; (mov r8, r8)
   3185e:	46bd      	mov	sp, r7
   31860:	b004      	add	sp, #16
   31862:	bd80      	pop	{r7, pc}

00031864 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   31864:	b590      	push	{r4, r7, lr}
   31866:	b085      	sub	sp, #20
   31868:	af00      	add	r7, sp, #0
   3186a:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   3186c:	2300      	movs	r3, #0
   3186e:	60fb      	str	r3, [r7, #12]
   31870:	e053      	b.n	3191a <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   31872:	6879      	ldr	r1, [r7, #4]
   31874:	68fa      	ldr	r2, [r7, #12]
   31876:	0013      	movs	r3, r2
   31878:	009b      	lsls	r3, r3, #2
   3187a:	189b      	adds	r3, r3, r2
   3187c:	009b      	lsls	r3, r3, #2
   3187e:	5c5b      	ldrb	r3, [r3, r1]
   31880:	07db      	lsls	r3, r3, #31
   31882:	0fdb      	lsrs	r3, r3, #31
   31884:	b2db      	uxtb	r3, r3
   31886:	2b00      	cmp	r3, #0
   31888:	d044      	beq.n	31914 <sw_timer_task+0xb0>
   3188a:	6879      	ldr	r1, [r7, #4]
   3188c:	68fa      	ldr	r2, [r7, #12]
   3188e:	0013      	movs	r3, r2
   31890:	009b      	lsls	r3, r3, #2
   31892:	189b      	adds	r3, r3, r2
   31894:	009b      	lsls	r3, r3, #2
   31896:	5c5b      	ldrb	r3, [r3, r1]
   31898:	079b      	lsls	r3, r3, #30
   3189a:	0fdb      	lsrs	r3, r3, #31
   3189c:	b2db      	uxtb	r3, r3
   3189e:	2b00      	cmp	r3, #0
   318a0:	d038      	beq.n	31914 <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
   318a2:	68fa      	ldr	r2, [r7, #12]
   318a4:	0013      	movs	r3, r2
   318a6:	009b      	lsls	r3, r3, #2
   318a8:	189b      	adds	r3, r3, r2
   318aa:	009b      	lsls	r3, r3, #2
   318ac:	687a      	ldr	r2, [r7, #4]
   318ae:	18d3      	adds	r3, r2, r3
   318b0:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   318b2:	68bb      	ldr	r3, [r7, #8]
   318b4:	691a      	ldr	r2, [r3, #16]
   318b6:	4b1c      	ldr	r3, [pc, #112]	; (31928 <sw_timer_task+0xc4>)
   318b8:	681b      	ldr	r3, [r3, #0]
   318ba:	1ad3      	subs	r3, r2, r3
   318bc:	d52a      	bpl.n	31914 <sw_timer_task+0xb0>
   318be:	68bb      	ldr	r3, [r7, #8]
   318c0:	781b      	ldrb	r3, [r3, #0]
   318c2:	2204      	movs	r2, #4
   318c4:	4013      	ands	r3, r2
   318c6:	b2db      	uxtb	r3, r3
   318c8:	2b00      	cmp	r3, #0
   318ca:	d123      	bne.n	31914 <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
   318cc:	68bb      	ldr	r3, [r7, #8]
   318ce:	781a      	ldrb	r2, [r3, #0]
   318d0:	2104      	movs	r1, #4
   318d2:	430a      	orrs	r2, r1
   318d4:	701a      	strb	r2, [r3, #0]
				/* Timer was expired. */
				if (handler->period > 0) {
   318d6:	68bb      	ldr	r3, [r7, #8]
   318d8:	68db      	ldr	r3, [r3, #12]
   318da:	2b00      	cmp	r3, #0
   318dc:	d007      	beq.n	318ee <sw_timer_task+0x8a>
					handler->expire_time = sw_timer_tick + handler->period;
   318de:	68bb      	ldr	r3, [r7, #8]
   318e0:	68da      	ldr	r2, [r3, #12]
   318e2:	4b11      	ldr	r3, [pc, #68]	; (31928 <sw_timer_task+0xc4>)
   318e4:	681b      	ldr	r3, [r3, #0]
   318e6:	18d2      	adds	r2, r2, r3
   318e8:	68bb      	ldr	r3, [r7, #8]
   318ea:	611a      	str	r2, [r3, #16]
   318ec:	e004      	b.n	318f8 <sw_timer_task+0x94>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
   318ee:	68bb      	ldr	r3, [r7, #8]
   318f0:	781a      	ldrb	r2, [r3, #0]
   318f2:	2102      	movs	r1, #2
   318f4:	438a      	bics	r2, r1
   318f6:	701a      	strb	r2, [r3, #0]
				}
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
   318f8:	68bb      	ldr	r3, [r7, #8]
   318fa:	685c      	ldr	r4, [r3, #4]
   318fc:	68bb      	ldr	r3, [r7, #8]
   318fe:	689a      	ldr	r2, [r3, #8]
   31900:	68bb      	ldr	r3, [r7, #8]
   31902:	68db      	ldr	r3, [r3, #12]
   31904:	68f9      	ldr	r1, [r7, #12]
   31906:	6878      	ldr	r0, [r7, #4]
   31908:	47a0      	blx	r4
				/* Leave critical section. */
				handler->busy = 0;
   3190a:	68bb      	ldr	r3, [r7, #8]
   3190c:	781a      	ldrb	r2, [r3, #0]
   3190e:	2104      	movs	r1, #4
   31910:	438a      	bics	r2, r1
   31912:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   31914:	68fb      	ldr	r3, [r7, #12]
   31916:	3301      	adds	r3, #1
   31918:	60fb      	str	r3, [r7, #12]
   3191a:	68fb      	ldr	r3, [r7, #12]
   3191c:	2b00      	cmp	r3, #0
   3191e:	dda8      	ble.n	31872 <sw_timer_task+0xe>
			}
		}
	}
}
   31920:	46c0      	nop			; (mov r8, r8)
   31922:	46bd      	mov	sp, r7
   31924:	b005      	add	sp, #20
   31926:	bd90      	pop	{r4, r7, pc}
   31928:	200046dc 	.word	0x200046dc

0003192c <main>:
 * @brief Main application function.
 * Application entry point.
 * @return int
 */
int main(void)
{
   3192c:	b580      	push	{r7, lr}
   3192e:	af00      	add	r7, sp, #0
    /* Initialize the board. */
    system_init();
   31930:	4b06      	ldr	r3, [pc, #24]	; (3194c <main+0x20>)
   31932:	4798      	blx	r3
		//delay_ms(2000);
		//servo_setDuty(3);
		//delay_ms(2000);
	//}
    /* Initialize the UART console. */
    InitializeSerialConsole();
   31934:	4b06      	ldr	r3, [pc, #24]	; (31950 <main+0x24>)
   31936:	4798      	blx	r3

    // Initialize trace capabilities
    vTraceEnable(TRC_START);
   31938:	2001      	movs	r0, #1
   3193a:	4b06      	ldr	r3, [pc, #24]	; (31954 <main+0x28>)
   3193c:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
   3193e:	4b06      	ldr	r3, [pc, #24]	; (31958 <main+0x2c>)
   31940:	4798      	blx	r3

    return 0;  // Will not get here
   31942:	2300      	movs	r3, #0
}
   31944:	0018      	movs	r0, r3
   31946:	46bd      	mov	sp, r7
   31948:	bd80      	pop	{r7, pc}
   3194a:	46c0      	nop			; (mov r8, r8)
   3194c:	000292f1 	.word	0x000292f1
   31950:	0001cd95 	.word	0x0001cd95
   31954:	00017469 	.word	0x00017469
   31958:	0001b3ed 	.word	0x0001b3ed

0003195c <vApplicationDaemonTaskStartupHook>:
 *					here will be called before other tasks are initilized.
 * @param[in]        None
 * @return           None
 */
void vApplicationDaemonTaskStartupHook(void)
{
   3195c:	b580      	push	{r7, lr}
   3195e:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("\r\n\r\n-----ESE516 Main Program-----\r\n");
   31960:	4b0f      	ldr	r3, [pc, #60]	; (319a0 <vApplicationDaemonTaskStartupHook+0x44>)
   31962:	0018      	movs	r0, r3
   31964:	4b0f      	ldr	r3, [pc, #60]	; (319a4 <vApplicationDaemonTaskStartupHook+0x48>)
   31966:	4798      	blx	r3

    // Initialize HW that needs FreeRTOS Initialization
    SerialConsoleWriteString("\r\n\r\nInitialize HW...\r\n");
   31968:	4b0f      	ldr	r3, [pc, #60]	; (319a8 <vApplicationDaemonTaskStartupHook+0x4c>)
   3196a:	0018      	movs	r0, r3
   3196c:	4b0d      	ldr	r3, [pc, #52]	; (319a4 <vApplicationDaemonTaskStartupHook+0x48>)
   3196e:	4798      	blx	r3
    if (I2cInitializeDriver() != STATUS_OK) {
   31970:	4b0e      	ldr	r3, [pc, #56]	; (319ac <vApplicationDaemonTaskStartupHook+0x50>)
   31972:	4798      	blx	r3
   31974:	1e03      	subs	r3, r0, #0
   31976:	d004      	beq.n	31982 <vApplicationDaemonTaskStartupHook+0x26>
        SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
   31978:	4b0d      	ldr	r3, [pc, #52]	; (319b0 <vApplicationDaemonTaskStartupHook+0x54>)
   3197a:	0018      	movs	r0, r3
   3197c:	4b09      	ldr	r3, [pc, #36]	; (319a4 <vApplicationDaemonTaskStartupHook+0x48>)
   3197e:	4798      	blx	r3
   31980:	e003      	b.n	3198a <vApplicationDaemonTaskStartupHook+0x2e>
    } else {
        SerialConsoleWriteString("Initialized I2C Driver!\r\n");
   31982:	4b0c      	ldr	r3, [pc, #48]	; (319b4 <vApplicationDaemonTaskStartupHook+0x58>)
   31984:	0018      	movs	r0, r3
   31986:	4b07      	ldr	r3, [pc, #28]	; (319a4 <vApplicationDaemonTaskStartupHook+0x48>)
   31988:	4798      	blx	r3
    }

    StartTasks();
   3198a:	4b0b      	ldr	r3, [pc, #44]	; (319b8 <vApplicationDaemonTaskStartupHook+0x5c>)
   3198c:	4798      	blx	r3

    vTaskSuspend(daemonTaskHandle);
   3198e:	4b0b      	ldr	r3, [pc, #44]	; (319bc <vApplicationDaemonTaskStartupHook+0x60>)
   31990:	681b      	ldr	r3, [r3, #0]
   31992:	0018      	movs	r0, r3
   31994:	4b0a      	ldr	r3, [pc, #40]	; (319c0 <vApplicationDaemonTaskStartupHook+0x64>)
   31996:	4798      	blx	r3
}
   31998:	46c0      	nop			; (mov r8, r8)
   3199a:	46bd      	mov	sp, r7
   3199c:	bd80      	pop	{r7, pc}
   3199e:	46c0      	nop			; (mov r8, r8)
   319a0:	0003986c 	.word	0x0003986c
   319a4:	0001ce05 	.word	0x0001ce05
   319a8:	00039890 	.word	0x00039890
   319ac:	000142c5 	.word	0x000142c5
   319b0:	000398a8 	.word	0x000398a8
   319b4:	000398cc 	.word	0x000398cc
   319b8:	000319c5 	.word	0x000319c5
   319bc:	200046e4 	.word	0x200046e4
   319c0:	0001b291 	.word	0x0001b291

000319c4 <StartTasks>:
 * @details
 * @param[in]        None
 * @return           None
 */
static void StartTasks(void)
{
   319c4:	b590      	push	{r4, r7, lr}
   319c6:	b083      	sub	sp, #12
   319c8:	af02      	add	r7, sp, #8
    snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
   319ca:	4b34      	ldr	r3, [pc, #208]	; (31a9c <StartTasks+0xd8>)
   319cc:	4798      	blx	r3
   319ce:	0003      	movs	r3, r0
   319d0:	4a33      	ldr	r2, [pc, #204]	; (31aa0 <StartTasks+0xdc>)
   319d2:	4834      	ldr	r0, [pc, #208]	; (31aa4 <StartTasks+0xe0>)
   319d4:	2140      	movs	r1, #64	; 0x40
   319d6:	4c34      	ldr	r4, [pc, #208]	; (31aa8 <StartTasks+0xe4>)
   319d8:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   319da:	4b32      	ldr	r3, [pc, #200]	; (31aa4 <StartTasks+0xe0>)
   319dc:	0018      	movs	r0, r3
   319de:	4b33      	ldr	r3, [pc, #204]	; (31aac <StartTasks+0xe8>)
   319e0:	4798      	blx	r3

    // Initialize Tasks here

    if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
   319e2:	23c8      	movs	r3, #200	; 0xc8
   319e4:	005a      	lsls	r2, r3, #1
   319e6:	4932      	ldr	r1, [pc, #200]	; (31ab0 <StartTasks+0xec>)
   319e8:	4832      	ldr	r0, [pc, #200]	; (31ab4 <StartTasks+0xf0>)
   319ea:	4b33      	ldr	r3, [pc, #204]	; (31ab8 <StartTasks+0xf4>)
   319ec:	9301      	str	r3, [sp, #4]
   319ee:	2304      	movs	r3, #4
   319f0:	9300      	str	r3, [sp, #0]
   319f2:	2300      	movs	r3, #0
   319f4:	4c31      	ldr	r4, [pc, #196]	; (31abc <StartTasks+0xf8>)
   319f6:	47a0      	blx	r4
   319f8:	0003      	movs	r3, r0
   319fa:	2b01      	cmp	r3, #1
   319fc:	d003      	beq.n	31a06 <StartTasks+0x42>
        SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   319fe:	4b30      	ldr	r3, [pc, #192]	; (31ac0 <StartTasks+0xfc>)
   31a00:	0018      	movs	r0, r3
   31a02:	4b2a      	ldr	r3, [pc, #168]	; (31aac <StartTasks+0xe8>)
   31a04:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
   31a06:	4b25      	ldr	r3, [pc, #148]	; (31a9c <StartTasks+0xd8>)
   31a08:	4798      	blx	r3
   31a0a:	0003      	movs	r3, r0
   31a0c:	4a2d      	ldr	r2, [pc, #180]	; (31ac4 <StartTasks+0x100>)
   31a0e:	4825      	ldr	r0, [pc, #148]	; (31aa4 <StartTasks+0xe0>)
   31a10:	2140      	movs	r1, #64	; 0x40
   31a12:	4c25      	ldr	r4, [pc, #148]	; (31aa8 <StartTasks+0xe4>)
   31a14:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   31a16:	4b23      	ldr	r3, [pc, #140]	; (31aa4 <StartTasks+0xe0>)
   31a18:	0018      	movs	r0, r3
   31a1a:	4b24      	ldr	r3, [pc, #144]	; (31aac <StartTasks+0xe8>)
   31a1c:	4798      	blx	r3

    if (xTaskCreate(vWifiTask, "WIFI_TASK", WIFI_TASK_SIZE, NULL, WIFI_PRIORITY, &wifiTaskHandle) != pdPASS) {
   31a1e:	4a2a      	ldr	r2, [pc, #168]	; (31ac8 <StartTasks+0x104>)
   31a20:	492a      	ldr	r1, [pc, #168]	; (31acc <StartTasks+0x108>)
   31a22:	482b      	ldr	r0, [pc, #172]	; (31ad0 <StartTasks+0x10c>)
   31a24:	4b2b      	ldr	r3, [pc, #172]	; (31ad4 <StartTasks+0x110>)
   31a26:	9301      	str	r3, [sp, #4]
   31a28:	2303      	movs	r3, #3
   31a2a:	9300      	str	r3, [sp, #0]
   31a2c:	2300      	movs	r3, #0
   31a2e:	4c23      	ldr	r4, [pc, #140]	; (31abc <StartTasks+0xf8>)
   31a30:	47a0      	blx	r4
   31a32:	0003      	movs	r3, r0
   31a34:	2b01      	cmp	r3, #1
   31a36:	d003      	beq.n	31a40 <StartTasks+0x7c>
	    SerialConsoleWriteString("ERR: WIFI task could not be initialized!\r\n");
   31a38:	4b27      	ldr	r3, [pc, #156]	; (31ad8 <StartTasks+0x114>)
   31a3a:	0018      	movs	r0, r3
   31a3c:	4b1b      	ldr	r3, [pc, #108]	; (31aac <StartTasks+0xe8>)
   31a3e:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting WIFI: %d\r\n", xPortGetFreeHeapSize());
   31a40:	4b16      	ldr	r3, [pc, #88]	; (31a9c <StartTasks+0xd8>)
   31a42:	4798      	blx	r3
   31a44:	0003      	movs	r3, r0
   31a46:	4a25      	ldr	r2, [pc, #148]	; (31adc <StartTasks+0x118>)
   31a48:	4816      	ldr	r0, [pc, #88]	; (31aa4 <StartTasks+0xe0>)
   31a4a:	2140      	movs	r1, #64	; 0x40
   31a4c:	4c16      	ldr	r4, [pc, #88]	; (31aa8 <StartTasks+0xe4>)
   31a4e:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   31a50:	4b14      	ldr	r3, [pc, #80]	; (31aa4 <StartTasks+0xe0>)
   31a52:	0018      	movs	r0, r3
   31a54:	4b15      	ldr	r3, [pc, #84]	; (31aac <StartTasks+0xe8>)
   31a56:	4798      	blx	r3

    if (xTaskCreate(vUiHandlerTask, "UI Task", UI_TASK_SIZE, NULL, UI_TASK_PRIORITY, &uiTaskHandle) != pdPASS) {
   31a58:	23c8      	movs	r3, #200	; 0xc8
   31a5a:	005a      	lsls	r2, r3, #1
   31a5c:	4920      	ldr	r1, [pc, #128]	; (31ae0 <StartTasks+0x11c>)
   31a5e:	4821      	ldr	r0, [pc, #132]	; (31ae4 <StartTasks+0x120>)
   31a60:	4b21      	ldr	r3, [pc, #132]	; (31ae8 <StartTasks+0x124>)
   31a62:	9301      	str	r3, [sp, #4]
   31a64:	2304      	movs	r3, #4
   31a66:	9300      	str	r3, [sp, #0]
   31a68:	2300      	movs	r3, #0
   31a6a:	4c14      	ldr	r4, [pc, #80]	; (31abc <StartTasks+0xf8>)
   31a6c:	47a0      	blx	r4
   31a6e:	0003      	movs	r3, r0
   31a70:	2b01      	cmp	r3, #1
   31a72:	d003      	beq.n	31a7c <StartTasks+0xb8>
        SerialConsoleWriteString("ERR: UI task could not be initialized!\r\n");
   31a74:	4b1d      	ldr	r3, [pc, #116]	; (31aec <StartTasks+0x128>)
   31a76:	0018      	movs	r0, r3
   31a78:	4b0c      	ldr	r3, [pc, #48]	; (31aac <StartTasks+0xe8>)
   31a7a:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting UI Task: %d\r\n", xPortGetFreeHeapSize());
   31a7c:	4b07      	ldr	r3, [pc, #28]	; (31a9c <StartTasks+0xd8>)
   31a7e:	4798      	blx	r3
   31a80:	0003      	movs	r3, r0
   31a82:	4a1b      	ldr	r2, [pc, #108]	; (31af0 <StartTasks+0x12c>)
   31a84:	4807      	ldr	r0, [pc, #28]	; (31aa4 <StartTasks+0xe0>)
   31a86:	2140      	movs	r1, #64	; 0x40
   31a88:	4c07      	ldr	r4, [pc, #28]	; (31aa8 <StartTasks+0xe4>)
   31a8a:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   31a8c:	4b05      	ldr	r3, [pc, #20]	; (31aa4 <StartTasks+0xe0>)
   31a8e:	0018      	movs	r0, r3
   31a90:	4b06      	ldr	r3, [pc, #24]	; (31aac <StartTasks+0xe8>)
   31a92:	4798      	blx	r3
    //if (xTaskCreate(vControlHandlerTask, "Control Task", CONTROL_TASK_SIZE, NULL, CONTROL_TASK_PRIORITY, &controlTaskHandle) != pdPASS) {
        //SerialConsoleWriteString("ERR: Control task could not be initialized!\r\n");
    //}
    //snprintf(bufferPrint, 64, "Heap after starting Control Task: %d\r\n", xPortGetFreeHeapSize());
    //SerialConsoleWriteString(bufferPrint);
}
   31a94:	46c0      	nop			; (mov r8, r8)
   31a96:	46bd      	mov	sp, r7
   31a98:	b001      	add	sp, #4
   31a9a:	bd90      	pop	{r4, r7, pc}
   31a9c:	000193d1 	.word	0x000193d1
   31aa0:	000398e8 	.word	0x000398e8
   31aa4:	20005c14 	.word	0x20005c14
   31aa8:	00034839 	.word	0x00034839
   31aac:	0001ce05 	.word	0x0001ce05
   31ab0:	0003990c 	.word	0x0003990c
   31ab4:	00013819 	.word	0x00013819
   31ab8:	200046e0 	.word	0x200046e0
   31abc:	0001ae15 	.word	0x0001ae15
   31ac0:	00039918 	.word	0x00039918
   31ac4:	00039944 	.word	0x00039944
   31ac8:	000005dc 	.word	0x000005dc
   31acc:	00039964 	.word	0x00039964
   31ad0:	00016265 	.word	0x00016265
   31ad4:	200046e8 	.word	0x200046e8
   31ad8:	00039970 	.word	0x00039970
   31adc:	0003999c 	.word	0x0003999c
   31ae0:	000399bc 	.word	0x000399bc
   31ae4:	00014d91 	.word	0x00014d91
   31ae8:	200046ec 	.word	0x200046ec
   31aec:	000399c4 	.word	0x000399c4
   31af0:	000399f0 	.word	0x000399f0

00031af4 <vApplicationMallocFailedHook>:



void vApplicationMallocFailedHook(void)
{
   31af4:	b580      	push	{r7, lr}
   31af6:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
   31af8:	4b02      	ldr	r3, [pc, #8]	; (31b04 <vApplicationMallocFailedHook+0x10>)
   31afa:	0018      	movs	r0, r3
   31afc:	4b02      	ldr	r3, [pc, #8]	; (31b08 <vApplicationMallocFailedHook+0x14>)
   31afe:	4798      	blx	r3
    while (1)
   31b00:	e7fe      	b.n	31b00 <vApplicationMallocFailedHook+0xc>
   31b02:	46c0      	nop			; (mov r8, r8)
   31b04:	00039a14 	.word	0x00039a14
   31b08:	0001ce05 	.word	0x0001ce05

00031b0c <vApplicationStackOverflowHook>:
        ;
}

void vApplicationStackOverflowHook(void)
{
   31b0c:	b580      	push	{r7, lr}
   31b0e:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
   31b10:	4b02      	ldr	r3, [pc, #8]	; (31b1c <vApplicationStackOverflowHook+0x10>)
   31b12:	0018      	movs	r0, r3
   31b14:	4b02      	ldr	r3, [pc, #8]	; (31b20 <vApplicationStackOverflowHook+0x14>)
   31b16:	4798      	blx	r3
    while (1)
   31b18:	e7fe      	b.n	31b18 <vApplicationStackOverflowHook+0xc>
   31b1a:	46c0      	nop			; (mov r8, r8)
   31b1c:	00039a40 	.word	0x00039a40
   31b20:	0001ce05 	.word	0x0001ce05

00031b24 <__udivsi3>:
   31b24:	2200      	movs	r2, #0
   31b26:	0843      	lsrs	r3, r0, #1
   31b28:	428b      	cmp	r3, r1
   31b2a:	d374      	bcc.n	31c16 <__udivsi3+0xf2>
   31b2c:	0903      	lsrs	r3, r0, #4
   31b2e:	428b      	cmp	r3, r1
   31b30:	d35f      	bcc.n	31bf2 <__udivsi3+0xce>
   31b32:	0a03      	lsrs	r3, r0, #8
   31b34:	428b      	cmp	r3, r1
   31b36:	d344      	bcc.n	31bc2 <__udivsi3+0x9e>
   31b38:	0b03      	lsrs	r3, r0, #12
   31b3a:	428b      	cmp	r3, r1
   31b3c:	d328      	bcc.n	31b90 <__udivsi3+0x6c>
   31b3e:	0c03      	lsrs	r3, r0, #16
   31b40:	428b      	cmp	r3, r1
   31b42:	d30d      	bcc.n	31b60 <__udivsi3+0x3c>
   31b44:	22ff      	movs	r2, #255	; 0xff
   31b46:	0209      	lsls	r1, r1, #8
   31b48:	ba12      	rev	r2, r2
   31b4a:	0c03      	lsrs	r3, r0, #16
   31b4c:	428b      	cmp	r3, r1
   31b4e:	d302      	bcc.n	31b56 <__udivsi3+0x32>
   31b50:	1212      	asrs	r2, r2, #8
   31b52:	0209      	lsls	r1, r1, #8
   31b54:	d065      	beq.n	31c22 <__udivsi3+0xfe>
   31b56:	0b03      	lsrs	r3, r0, #12
   31b58:	428b      	cmp	r3, r1
   31b5a:	d319      	bcc.n	31b90 <__udivsi3+0x6c>
   31b5c:	e000      	b.n	31b60 <__udivsi3+0x3c>
   31b5e:	0a09      	lsrs	r1, r1, #8
   31b60:	0bc3      	lsrs	r3, r0, #15
   31b62:	428b      	cmp	r3, r1
   31b64:	d301      	bcc.n	31b6a <__udivsi3+0x46>
   31b66:	03cb      	lsls	r3, r1, #15
   31b68:	1ac0      	subs	r0, r0, r3
   31b6a:	4152      	adcs	r2, r2
   31b6c:	0b83      	lsrs	r3, r0, #14
   31b6e:	428b      	cmp	r3, r1
   31b70:	d301      	bcc.n	31b76 <__udivsi3+0x52>
   31b72:	038b      	lsls	r3, r1, #14
   31b74:	1ac0      	subs	r0, r0, r3
   31b76:	4152      	adcs	r2, r2
   31b78:	0b43      	lsrs	r3, r0, #13
   31b7a:	428b      	cmp	r3, r1
   31b7c:	d301      	bcc.n	31b82 <__udivsi3+0x5e>
   31b7e:	034b      	lsls	r3, r1, #13
   31b80:	1ac0      	subs	r0, r0, r3
   31b82:	4152      	adcs	r2, r2
   31b84:	0b03      	lsrs	r3, r0, #12
   31b86:	428b      	cmp	r3, r1
   31b88:	d301      	bcc.n	31b8e <__udivsi3+0x6a>
   31b8a:	030b      	lsls	r3, r1, #12
   31b8c:	1ac0      	subs	r0, r0, r3
   31b8e:	4152      	adcs	r2, r2
   31b90:	0ac3      	lsrs	r3, r0, #11
   31b92:	428b      	cmp	r3, r1
   31b94:	d301      	bcc.n	31b9a <__udivsi3+0x76>
   31b96:	02cb      	lsls	r3, r1, #11
   31b98:	1ac0      	subs	r0, r0, r3
   31b9a:	4152      	adcs	r2, r2
   31b9c:	0a83      	lsrs	r3, r0, #10
   31b9e:	428b      	cmp	r3, r1
   31ba0:	d301      	bcc.n	31ba6 <__udivsi3+0x82>
   31ba2:	028b      	lsls	r3, r1, #10
   31ba4:	1ac0      	subs	r0, r0, r3
   31ba6:	4152      	adcs	r2, r2
   31ba8:	0a43      	lsrs	r3, r0, #9
   31baa:	428b      	cmp	r3, r1
   31bac:	d301      	bcc.n	31bb2 <__udivsi3+0x8e>
   31bae:	024b      	lsls	r3, r1, #9
   31bb0:	1ac0      	subs	r0, r0, r3
   31bb2:	4152      	adcs	r2, r2
   31bb4:	0a03      	lsrs	r3, r0, #8
   31bb6:	428b      	cmp	r3, r1
   31bb8:	d301      	bcc.n	31bbe <__udivsi3+0x9a>
   31bba:	020b      	lsls	r3, r1, #8
   31bbc:	1ac0      	subs	r0, r0, r3
   31bbe:	4152      	adcs	r2, r2
   31bc0:	d2cd      	bcs.n	31b5e <__udivsi3+0x3a>
   31bc2:	09c3      	lsrs	r3, r0, #7
   31bc4:	428b      	cmp	r3, r1
   31bc6:	d301      	bcc.n	31bcc <__udivsi3+0xa8>
   31bc8:	01cb      	lsls	r3, r1, #7
   31bca:	1ac0      	subs	r0, r0, r3
   31bcc:	4152      	adcs	r2, r2
   31bce:	0983      	lsrs	r3, r0, #6
   31bd0:	428b      	cmp	r3, r1
   31bd2:	d301      	bcc.n	31bd8 <__udivsi3+0xb4>
   31bd4:	018b      	lsls	r3, r1, #6
   31bd6:	1ac0      	subs	r0, r0, r3
   31bd8:	4152      	adcs	r2, r2
   31bda:	0943      	lsrs	r3, r0, #5
   31bdc:	428b      	cmp	r3, r1
   31bde:	d301      	bcc.n	31be4 <__udivsi3+0xc0>
   31be0:	014b      	lsls	r3, r1, #5
   31be2:	1ac0      	subs	r0, r0, r3
   31be4:	4152      	adcs	r2, r2
   31be6:	0903      	lsrs	r3, r0, #4
   31be8:	428b      	cmp	r3, r1
   31bea:	d301      	bcc.n	31bf0 <__udivsi3+0xcc>
   31bec:	010b      	lsls	r3, r1, #4
   31bee:	1ac0      	subs	r0, r0, r3
   31bf0:	4152      	adcs	r2, r2
   31bf2:	08c3      	lsrs	r3, r0, #3
   31bf4:	428b      	cmp	r3, r1
   31bf6:	d301      	bcc.n	31bfc <__udivsi3+0xd8>
   31bf8:	00cb      	lsls	r3, r1, #3
   31bfa:	1ac0      	subs	r0, r0, r3
   31bfc:	4152      	adcs	r2, r2
   31bfe:	0883      	lsrs	r3, r0, #2
   31c00:	428b      	cmp	r3, r1
   31c02:	d301      	bcc.n	31c08 <__udivsi3+0xe4>
   31c04:	008b      	lsls	r3, r1, #2
   31c06:	1ac0      	subs	r0, r0, r3
   31c08:	4152      	adcs	r2, r2
   31c0a:	0843      	lsrs	r3, r0, #1
   31c0c:	428b      	cmp	r3, r1
   31c0e:	d301      	bcc.n	31c14 <__udivsi3+0xf0>
   31c10:	004b      	lsls	r3, r1, #1
   31c12:	1ac0      	subs	r0, r0, r3
   31c14:	4152      	adcs	r2, r2
   31c16:	1a41      	subs	r1, r0, r1
   31c18:	d200      	bcs.n	31c1c <__udivsi3+0xf8>
   31c1a:	4601      	mov	r1, r0
   31c1c:	4152      	adcs	r2, r2
   31c1e:	4610      	mov	r0, r2
   31c20:	4770      	bx	lr
   31c22:	e7ff      	b.n	31c24 <__udivsi3+0x100>
   31c24:	b501      	push	{r0, lr}
   31c26:	2000      	movs	r0, #0
   31c28:	f000 f8f0 	bl	31e0c <__aeabi_idiv0>
   31c2c:	bd02      	pop	{r1, pc}
   31c2e:	46c0      	nop			; (mov r8, r8)

00031c30 <__aeabi_uidivmod>:
   31c30:	2900      	cmp	r1, #0
   31c32:	d0f7      	beq.n	31c24 <__udivsi3+0x100>
   31c34:	e776      	b.n	31b24 <__udivsi3>
   31c36:	4770      	bx	lr

00031c38 <__divsi3>:
   31c38:	4603      	mov	r3, r0
   31c3a:	430b      	orrs	r3, r1
   31c3c:	d47f      	bmi.n	31d3e <__divsi3+0x106>
   31c3e:	2200      	movs	r2, #0
   31c40:	0843      	lsrs	r3, r0, #1
   31c42:	428b      	cmp	r3, r1
   31c44:	d374      	bcc.n	31d30 <__divsi3+0xf8>
   31c46:	0903      	lsrs	r3, r0, #4
   31c48:	428b      	cmp	r3, r1
   31c4a:	d35f      	bcc.n	31d0c <__divsi3+0xd4>
   31c4c:	0a03      	lsrs	r3, r0, #8
   31c4e:	428b      	cmp	r3, r1
   31c50:	d344      	bcc.n	31cdc <__divsi3+0xa4>
   31c52:	0b03      	lsrs	r3, r0, #12
   31c54:	428b      	cmp	r3, r1
   31c56:	d328      	bcc.n	31caa <__divsi3+0x72>
   31c58:	0c03      	lsrs	r3, r0, #16
   31c5a:	428b      	cmp	r3, r1
   31c5c:	d30d      	bcc.n	31c7a <__divsi3+0x42>
   31c5e:	22ff      	movs	r2, #255	; 0xff
   31c60:	0209      	lsls	r1, r1, #8
   31c62:	ba12      	rev	r2, r2
   31c64:	0c03      	lsrs	r3, r0, #16
   31c66:	428b      	cmp	r3, r1
   31c68:	d302      	bcc.n	31c70 <__divsi3+0x38>
   31c6a:	1212      	asrs	r2, r2, #8
   31c6c:	0209      	lsls	r1, r1, #8
   31c6e:	d065      	beq.n	31d3c <__divsi3+0x104>
   31c70:	0b03      	lsrs	r3, r0, #12
   31c72:	428b      	cmp	r3, r1
   31c74:	d319      	bcc.n	31caa <__divsi3+0x72>
   31c76:	e000      	b.n	31c7a <__divsi3+0x42>
   31c78:	0a09      	lsrs	r1, r1, #8
   31c7a:	0bc3      	lsrs	r3, r0, #15
   31c7c:	428b      	cmp	r3, r1
   31c7e:	d301      	bcc.n	31c84 <__divsi3+0x4c>
   31c80:	03cb      	lsls	r3, r1, #15
   31c82:	1ac0      	subs	r0, r0, r3
   31c84:	4152      	adcs	r2, r2
   31c86:	0b83      	lsrs	r3, r0, #14
   31c88:	428b      	cmp	r3, r1
   31c8a:	d301      	bcc.n	31c90 <__divsi3+0x58>
   31c8c:	038b      	lsls	r3, r1, #14
   31c8e:	1ac0      	subs	r0, r0, r3
   31c90:	4152      	adcs	r2, r2
   31c92:	0b43      	lsrs	r3, r0, #13
   31c94:	428b      	cmp	r3, r1
   31c96:	d301      	bcc.n	31c9c <__divsi3+0x64>
   31c98:	034b      	lsls	r3, r1, #13
   31c9a:	1ac0      	subs	r0, r0, r3
   31c9c:	4152      	adcs	r2, r2
   31c9e:	0b03      	lsrs	r3, r0, #12
   31ca0:	428b      	cmp	r3, r1
   31ca2:	d301      	bcc.n	31ca8 <__divsi3+0x70>
   31ca4:	030b      	lsls	r3, r1, #12
   31ca6:	1ac0      	subs	r0, r0, r3
   31ca8:	4152      	adcs	r2, r2
   31caa:	0ac3      	lsrs	r3, r0, #11
   31cac:	428b      	cmp	r3, r1
   31cae:	d301      	bcc.n	31cb4 <__divsi3+0x7c>
   31cb0:	02cb      	lsls	r3, r1, #11
   31cb2:	1ac0      	subs	r0, r0, r3
   31cb4:	4152      	adcs	r2, r2
   31cb6:	0a83      	lsrs	r3, r0, #10
   31cb8:	428b      	cmp	r3, r1
   31cba:	d301      	bcc.n	31cc0 <__divsi3+0x88>
   31cbc:	028b      	lsls	r3, r1, #10
   31cbe:	1ac0      	subs	r0, r0, r3
   31cc0:	4152      	adcs	r2, r2
   31cc2:	0a43      	lsrs	r3, r0, #9
   31cc4:	428b      	cmp	r3, r1
   31cc6:	d301      	bcc.n	31ccc <__divsi3+0x94>
   31cc8:	024b      	lsls	r3, r1, #9
   31cca:	1ac0      	subs	r0, r0, r3
   31ccc:	4152      	adcs	r2, r2
   31cce:	0a03      	lsrs	r3, r0, #8
   31cd0:	428b      	cmp	r3, r1
   31cd2:	d301      	bcc.n	31cd8 <__divsi3+0xa0>
   31cd4:	020b      	lsls	r3, r1, #8
   31cd6:	1ac0      	subs	r0, r0, r3
   31cd8:	4152      	adcs	r2, r2
   31cda:	d2cd      	bcs.n	31c78 <__divsi3+0x40>
   31cdc:	09c3      	lsrs	r3, r0, #7
   31cde:	428b      	cmp	r3, r1
   31ce0:	d301      	bcc.n	31ce6 <__divsi3+0xae>
   31ce2:	01cb      	lsls	r3, r1, #7
   31ce4:	1ac0      	subs	r0, r0, r3
   31ce6:	4152      	adcs	r2, r2
   31ce8:	0983      	lsrs	r3, r0, #6
   31cea:	428b      	cmp	r3, r1
   31cec:	d301      	bcc.n	31cf2 <__divsi3+0xba>
   31cee:	018b      	lsls	r3, r1, #6
   31cf0:	1ac0      	subs	r0, r0, r3
   31cf2:	4152      	adcs	r2, r2
   31cf4:	0943      	lsrs	r3, r0, #5
   31cf6:	428b      	cmp	r3, r1
   31cf8:	d301      	bcc.n	31cfe <__divsi3+0xc6>
   31cfa:	014b      	lsls	r3, r1, #5
   31cfc:	1ac0      	subs	r0, r0, r3
   31cfe:	4152      	adcs	r2, r2
   31d00:	0903      	lsrs	r3, r0, #4
   31d02:	428b      	cmp	r3, r1
   31d04:	d301      	bcc.n	31d0a <__divsi3+0xd2>
   31d06:	010b      	lsls	r3, r1, #4
   31d08:	1ac0      	subs	r0, r0, r3
   31d0a:	4152      	adcs	r2, r2
   31d0c:	08c3      	lsrs	r3, r0, #3
   31d0e:	428b      	cmp	r3, r1
   31d10:	d301      	bcc.n	31d16 <__divsi3+0xde>
   31d12:	00cb      	lsls	r3, r1, #3
   31d14:	1ac0      	subs	r0, r0, r3
   31d16:	4152      	adcs	r2, r2
   31d18:	0883      	lsrs	r3, r0, #2
   31d1a:	428b      	cmp	r3, r1
   31d1c:	d301      	bcc.n	31d22 <__divsi3+0xea>
   31d1e:	008b      	lsls	r3, r1, #2
   31d20:	1ac0      	subs	r0, r0, r3
   31d22:	4152      	adcs	r2, r2
   31d24:	0843      	lsrs	r3, r0, #1
   31d26:	428b      	cmp	r3, r1
   31d28:	d301      	bcc.n	31d2e <__divsi3+0xf6>
   31d2a:	004b      	lsls	r3, r1, #1
   31d2c:	1ac0      	subs	r0, r0, r3
   31d2e:	4152      	adcs	r2, r2
   31d30:	1a41      	subs	r1, r0, r1
   31d32:	d200      	bcs.n	31d36 <__divsi3+0xfe>
   31d34:	4601      	mov	r1, r0
   31d36:	4152      	adcs	r2, r2
   31d38:	4610      	mov	r0, r2
   31d3a:	4770      	bx	lr
   31d3c:	e05d      	b.n	31dfa <__divsi3+0x1c2>
   31d3e:	0fca      	lsrs	r2, r1, #31
   31d40:	d000      	beq.n	31d44 <__divsi3+0x10c>
   31d42:	4249      	negs	r1, r1
   31d44:	1003      	asrs	r3, r0, #32
   31d46:	d300      	bcc.n	31d4a <__divsi3+0x112>
   31d48:	4240      	negs	r0, r0
   31d4a:	4053      	eors	r3, r2
   31d4c:	2200      	movs	r2, #0
   31d4e:	469c      	mov	ip, r3
   31d50:	0903      	lsrs	r3, r0, #4
   31d52:	428b      	cmp	r3, r1
   31d54:	d32d      	bcc.n	31db2 <__divsi3+0x17a>
   31d56:	0a03      	lsrs	r3, r0, #8
   31d58:	428b      	cmp	r3, r1
   31d5a:	d312      	bcc.n	31d82 <__divsi3+0x14a>
   31d5c:	22fc      	movs	r2, #252	; 0xfc
   31d5e:	0189      	lsls	r1, r1, #6
   31d60:	ba12      	rev	r2, r2
   31d62:	0a03      	lsrs	r3, r0, #8
   31d64:	428b      	cmp	r3, r1
   31d66:	d30c      	bcc.n	31d82 <__divsi3+0x14a>
   31d68:	0189      	lsls	r1, r1, #6
   31d6a:	1192      	asrs	r2, r2, #6
   31d6c:	428b      	cmp	r3, r1
   31d6e:	d308      	bcc.n	31d82 <__divsi3+0x14a>
   31d70:	0189      	lsls	r1, r1, #6
   31d72:	1192      	asrs	r2, r2, #6
   31d74:	428b      	cmp	r3, r1
   31d76:	d304      	bcc.n	31d82 <__divsi3+0x14a>
   31d78:	0189      	lsls	r1, r1, #6
   31d7a:	d03a      	beq.n	31df2 <__divsi3+0x1ba>
   31d7c:	1192      	asrs	r2, r2, #6
   31d7e:	e000      	b.n	31d82 <__divsi3+0x14a>
   31d80:	0989      	lsrs	r1, r1, #6
   31d82:	09c3      	lsrs	r3, r0, #7
   31d84:	428b      	cmp	r3, r1
   31d86:	d301      	bcc.n	31d8c <__divsi3+0x154>
   31d88:	01cb      	lsls	r3, r1, #7
   31d8a:	1ac0      	subs	r0, r0, r3
   31d8c:	4152      	adcs	r2, r2
   31d8e:	0983      	lsrs	r3, r0, #6
   31d90:	428b      	cmp	r3, r1
   31d92:	d301      	bcc.n	31d98 <__divsi3+0x160>
   31d94:	018b      	lsls	r3, r1, #6
   31d96:	1ac0      	subs	r0, r0, r3
   31d98:	4152      	adcs	r2, r2
   31d9a:	0943      	lsrs	r3, r0, #5
   31d9c:	428b      	cmp	r3, r1
   31d9e:	d301      	bcc.n	31da4 <__divsi3+0x16c>
   31da0:	014b      	lsls	r3, r1, #5
   31da2:	1ac0      	subs	r0, r0, r3
   31da4:	4152      	adcs	r2, r2
   31da6:	0903      	lsrs	r3, r0, #4
   31da8:	428b      	cmp	r3, r1
   31daa:	d301      	bcc.n	31db0 <__divsi3+0x178>
   31dac:	010b      	lsls	r3, r1, #4
   31dae:	1ac0      	subs	r0, r0, r3
   31db0:	4152      	adcs	r2, r2
   31db2:	08c3      	lsrs	r3, r0, #3
   31db4:	428b      	cmp	r3, r1
   31db6:	d301      	bcc.n	31dbc <__divsi3+0x184>
   31db8:	00cb      	lsls	r3, r1, #3
   31dba:	1ac0      	subs	r0, r0, r3
   31dbc:	4152      	adcs	r2, r2
   31dbe:	0883      	lsrs	r3, r0, #2
   31dc0:	428b      	cmp	r3, r1
   31dc2:	d301      	bcc.n	31dc8 <__divsi3+0x190>
   31dc4:	008b      	lsls	r3, r1, #2
   31dc6:	1ac0      	subs	r0, r0, r3
   31dc8:	4152      	adcs	r2, r2
   31dca:	d2d9      	bcs.n	31d80 <__divsi3+0x148>
   31dcc:	0843      	lsrs	r3, r0, #1
   31dce:	428b      	cmp	r3, r1
   31dd0:	d301      	bcc.n	31dd6 <__divsi3+0x19e>
   31dd2:	004b      	lsls	r3, r1, #1
   31dd4:	1ac0      	subs	r0, r0, r3
   31dd6:	4152      	adcs	r2, r2
   31dd8:	1a41      	subs	r1, r0, r1
   31dda:	d200      	bcs.n	31dde <__divsi3+0x1a6>
   31ddc:	4601      	mov	r1, r0
   31dde:	4663      	mov	r3, ip
   31de0:	4152      	adcs	r2, r2
   31de2:	105b      	asrs	r3, r3, #1
   31de4:	4610      	mov	r0, r2
   31de6:	d301      	bcc.n	31dec <__divsi3+0x1b4>
   31de8:	4240      	negs	r0, r0
   31dea:	2b00      	cmp	r3, #0
   31dec:	d500      	bpl.n	31df0 <__divsi3+0x1b8>
   31dee:	4249      	negs	r1, r1
   31df0:	4770      	bx	lr
   31df2:	4663      	mov	r3, ip
   31df4:	105b      	asrs	r3, r3, #1
   31df6:	d300      	bcc.n	31dfa <__divsi3+0x1c2>
   31df8:	4240      	negs	r0, r0
   31dfa:	b501      	push	{r0, lr}
   31dfc:	2000      	movs	r0, #0
   31dfe:	f000 f805 	bl	31e0c <__aeabi_idiv0>
   31e02:	bd02      	pop	{r1, pc}

00031e04 <__aeabi_idivmod>:
   31e04:	2900      	cmp	r1, #0
   31e06:	d0f8      	beq.n	31dfa <__divsi3+0x1c2>
   31e08:	e716      	b.n	31c38 <__divsi3>
   31e0a:	4770      	bx	lr

00031e0c <__aeabi_idiv0>:
   31e0c:	4770      	bx	lr
   31e0e:	46c0      	nop			; (mov r8, r8)

00031e10 <__aeabi_lmul>:
   31e10:	b5f0      	push	{r4, r5, r6, r7, lr}
   31e12:	46ce      	mov	lr, r9
   31e14:	4647      	mov	r7, r8
   31e16:	0415      	lsls	r5, r2, #16
   31e18:	0c2d      	lsrs	r5, r5, #16
   31e1a:	002e      	movs	r6, r5
   31e1c:	b580      	push	{r7, lr}
   31e1e:	0407      	lsls	r7, r0, #16
   31e20:	0c14      	lsrs	r4, r2, #16
   31e22:	0c3f      	lsrs	r7, r7, #16
   31e24:	4699      	mov	r9, r3
   31e26:	0c03      	lsrs	r3, r0, #16
   31e28:	437e      	muls	r6, r7
   31e2a:	435d      	muls	r5, r3
   31e2c:	4367      	muls	r7, r4
   31e2e:	4363      	muls	r3, r4
   31e30:	197f      	adds	r7, r7, r5
   31e32:	0c34      	lsrs	r4, r6, #16
   31e34:	19e4      	adds	r4, r4, r7
   31e36:	469c      	mov	ip, r3
   31e38:	42a5      	cmp	r5, r4
   31e3a:	d903      	bls.n	31e44 <__aeabi_lmul+0x34>
   31e3c:	2380      	movs	r3, #128	; 0x80
   31e3e:	025b      	lsls	r3, r3, #9
   31e40:	4698      	mov	r8, r3
   31e42:	44c4      	add	ip, r8
   31e44:	464b      	mov	r3, r9
   31e46:	4351      	muls	r1, r2
   31e48:	4343      	muls	r3, r0
   31e4a:	0436      	lsls	r6, r6, #16
   31e4c:	0c36      	lsrs	r6, r6, #16
   31e4e:	0c25      	lsrs	r5, r4, #16
   31e50:	0424      	lsls	r4, r4, #16
   31e52:	4465      	add	r5, ip
   31e54:	19a4      	adds	r4, r4, r6
   31e56:	1859      	adds	r1, r3, r1
   31e58:	1949      	adds	r1, r1, r5
   31e5a:	0020      	movs	r0, r4
   31e5c:	bc0c      	pop	{r2, r3}
   31e5e:	4690      	mov	r8, r2
   31e60:	4699      	mov	r9, r3
   31e62:	bdf0      	pop	{r4, r5, r6, r7, pc}

00031e64 <__aeabi_f2uiz>:
   31e64:	219e      	movs	r1, #158	; 0x9e
   31e66:	b510      	push	{r4, lr}
   31e68:	05c9      	lsls	r1, r1, #23
   31e6a:	1c04      	adds	r4, r0, #0
   31e6c:	f002 fa8e 	bl	3438c <__aeabi_fcmpge>
   31e70:	2800      	cmp	r0, #0
   31e72:	d103      	bne.n	31e7c <__aeabi_f2uiz+0x18>
   31e74:	1c20      	adds	r0, r4, #0
   31e76:	f000 fda3 	bl	329c0 <__aeabi_f2iz>
   31e7a:	bd10      	pop	{r4, pc}
   31e7c:	219e      	movs	r1, #158	; 0x9e
   31e7e:	1c20      	adds	r0, r4, #0
   31e80:	05c9      	lsls	r1, r1, #23
   31e82:	f000 fc01 	bl	32688 <__aeabi_fsub>
   31e86:	f000 fd9b 	bl	329c0 <__aeabi_f2iz>
   31e8a:	2380      	movs	r3, #128	; 0x80
   31e8c:	061b      	lsls	r3, r3, #24
   31e8e:	469c      	mov	ip, r3
   31e90:	4460      	add	r0, ip
   31e92:	e7f2      	b.n	31e7a <__aeabi_f2uiz+0x16>

00031e94 <__aeabi_fadd>:
   31e94:	b5f0      	push	{r4, r5, r6, r7, lr}
   31e96:	46c6      	mov	lr, r8
   31e98:	024e      	lsls	r6, r1, #9
   31e9a:	0247      	lsls	r7, r0, #9
   31e9c:	0a76      	lsrs	r6, r6, #9
   31e9e:	0a7b      	lsrs	r3, r7, #9
   31ea0:	0044      	lsls	r4, r0, #1
   31ea2:	0fc5      	lsrs	r5, r0, #31
   31ea4:	00f7      	lsls	r7, r6, #3
   31ea6:	0048      	lsls	r0, r1, #1
   31ea8:	4698      	mov	r8, r3
   31eaa:	b500      	push	{lr}
   31eac:	0e24      	lsrs	r4, r4, #24
   31eae:	002a      	movs	r2, r5
   31eb0:	00db      	lsls	r3, r3, #3
   31eb2:	0e00      	lsrs	r0, r0, #24
   31eb4:	0fc9      	lsrs	r1, r1, #31
   31eb6:	46bc      	mov	ip, r7
   31eb8:	428d      	cmp	r5, r1
   31eba:	d067      	beq.n	31f8c <__aeabi_fadd+0xf8>
   31ebc:	1a22      	subs	r2, r4, r0
   31ebe:	2a00      	cmp	r2, #0
   31ec0:	dc00      	bgt.n	31ec4 <__aeabi_fadd+0x30>
   31ec2:	e0a5      	b.n	32010 <__aeabi_fadd+0x17c>
   31ec4:	2800      	cmp	r0, #0
   31ec6:	d13a      	bne.n	31f3e <__aeabi_fadd+0xaa>
   31ec8:	2f00      	cmp	r7, #0
   31eca:	d100      	bne.n	31ece <__aeabi_fadd+0x3a>
   31ecc:	e093      	b.n	31ff6 <__aeabi_fadd+0x162>
   31ece:	1e51      	subs	r1, r2, #1
   31ed0:	2900      	cmp	r1, #0
   31ed2:	d000      	beq.n	31ed6 <__aeabi_fadd+0x42>
   31ed4:	e0bc      	b.n	32050 <__aeabi_fadd+0x1bc>
   31ed6:	2401      	movs	r4, #1
   31ed8:	1bdb      	subs	r3, r3, r7
   31eda:	015a      	lsls	r2, r3, #5
   31edc:	d546      	bpl.n	31f6c <__aeabi_fadd+0xd8>
   31ede:	019b      	lsls	r3, r3, #6
   31ee0:	099e      	lsrs	r6, r3, #6
   31ee2:	0030      	movs	r0, r6
   31ee4:	f002 fa5c 	bl	343a0 <__clzsi2>
   31ee8:	3805      	subs	r0, #5
   31eea:	4086      	lsls	r6, r0
   31eec:	4284      	cmp	r4, r0
   31eee:	dd00      	ble.n	31ef2 <__aeabi_fadd+0x5e>
   31ef0:	e09d      	b.n	3202e <__aeabi_fadd+0x19a>
   31ef2:	1b04      	subs	r4, r0, r4
   31ef4:	0032      	movs	r2, r6
   31ef6:	2020      	movs	r0, #32
   31ef8:	3401      	adds	r4, #1
   31efa:	40e2      	lsrs	r2, r4
   31efc:	1b04      	subs	r4, r0, r4
   31efe:	40a6      	lsls	r6, r4
   31f00:	0033      	movs	r3, r6
   31f02:	1e5e      	subs	r6, r3, #1
   31f04:	41b3      	sbcs	r3, r6
   31f06:	2400      	movs	r4, #0
   31f08:	4313      	orrs	r3, r2
   31f0a:	075a      	lsls	r2, r3, #29
   31f0c:	d004      	beq.n	31f18 <__aeabi_fadd+0x84>
   31f0e:	220f      	movs	r2, #15
   31f10:	401a      	ands	r2, r3
   31f12:	2a04      	cmp	r2, #4
   31f14:	d000      	beq.n	31f18 <__aeabi_fadd+0x84>
   31f16:	3304      	adds	r3, #4
   31f18:	015a      	lsls	r2, r3, #5
   31f1a:	d529      	bpl.n	31f70 <__aeabi_fadd+0xdc>
   31f1c:	3401      	adds	r4, #1
   31f1e:	2cff      	cmp	r4, #255	; 0xff
   31f20:	d100      	bne.n	31f24 <__aeabi_fadd+0x90>
   31f22:	e081      	b.n	32028 <__aeabi_fadd+0x194>
   31f24:	002a      	movs	r2, r5
   31f26:	019b      	lsls	r3, r3, #6
   31f28:	0a5b      	lsrs	r3, r3, #9
   31f2a:	b2e4      	uxtb	r4, r4
   31f2c:	025b      	lsls	r3, r3, #9
   31f2e:	05e4      	lsls	r4, r4, #23
   31f30:	0a58      	lsrs	r0, r3, #9
   31f32:	07d2      	lsls	r2, r2, #31
   31f34:	4320      	orrs	r0, r4
   31f36:	4310      	orrs	r0, r2
   31f38:	bc04      	pop	{r2}
   31f3a:	4690      	mov	r8, r2
   31f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   31f3e:	2cff      	cmp	r4, #255	; 0xff
   31f40:	d0e3      	beq.n	31f0a <__aeabi_fadd+0x76>
   31f42:	2180      	movs	r1, #128	; 0x80
   31f44:	0038      	movs	r0, r7
   31f46:	04c9      	lsls	r1, r1, #19
   31f48:	4308      	orrs	r0, r1
   31f4a:	4684      	mov	ip, r0
   31f4c:	2a1b      	cmp	r2, #27
   31f4e:	dd00      	ble.n	31f52 <__aeabi_fadd+0xbe>
   31f50:	e082      	b.n	32058 <__aeabi_fadd+0x1c4>
   31f52:	2020      	movs	r0, #32
   31f54:	4661      	mov	r1, ip
   31f56:	40d1      	lsrs	r1, r2
   31f58:	1a82      	subs	r2, r0, r2
   31f5a:	4660      	mov	r0, ip
   31f5c:	4090      	lsls	r0, r2
   31f5e:	0002      	movs	r2, r0
   31f60:	1e50      	subs	r0, r2, #1
   31f62:	4182      	sbcs	r2, r0
   31f64:	430a      	orrs	r2, r1
   31f66:	1a9b      	subs	r3, r3, r2
   31f68:	015a      	lsls	r2, r3, #5
   31f6a:	d4b8      	bmi.n	31ede <__aeabi_fadd+0x4a>
   31f6c:	075a      	lsls	r2, r3, #29
   31f6e:	d1ce      	bne.n	31f0e <__aeabi_fadd+0x7a>
   31f70:	08de      	lsrs	r6, r3, #3
   31f72:	002a      	movs	r2, r5
   31f74:	2cff      	cmp	r4, #255	; 0xff
   31f76:	d13a      	bne.n	31fee <__aeabi_fadd+0x15a>
   31f78:	2e00      	cmp	r6, #0
   31f7a:	d100      	bne.n	31f7e <__aeabi_fadd+0xea>
   31f7c:	e0ae      	b.n	320dc <__aeabi_fadd+0x248>
   31f7e:	2380      	movs	r3, #128	; 0x80
   31f80:	03db      	lsls	r3, r3, #15
   31f82:	4333      	orrs	r3, r6
   31f84:	025b      	lsls	r3, r3, #9
   31f86:	0a5b      	lsrs	r3, r3, #9
   31f88:	24ff      	movs	r4, #255	; 0xff
   31f8a:	e7cf      	b.n	31f2c <__aeabi_fadd+0x98>
   31f8c:	1a21      	subs	r1, r4, r0
   31f8e:	2900      	cmp	r1, #0
   31f90:	dd52      	ble.n	32038 <__aeabi_fadd+0x1a4>
   31f92:	2800      	cmp	r0, #0
   31f94:	d031      	beq.n	31ffa <__aeabi_fadd+0x166>
   31f96:	2cff      	cmp	r4, #255	; 0xff
   31f98:	d0b7      	beq.n	31f0a <__aeabi_fadd+0x76>
   31f9a:	2080      	movs	r0, #128	; 0x80
   31f9c:	003e      	movs	r6, r7
   31f9e:	04c0      	lsls	r0, r0, #19
   31fa0:	4306      	orrs	r6, r0
   31fa2:	46b4      	mov	ip, r6
   31fa4:	291b      	cmp	r1, #27
   31fa6:	dd00      	ble.n	31faa <__aeabi_fadd+0x116>
   31fa8:	e0aa      	b.n	32100 <__aeabi_fadd+0x26c>
   31faa:	2620      	movs	r6, #32
   31fac:	4660      	mov	r0, ip
   31fae:	40c8      	lsrs	r0, r1
   31fb0:	1a71      	subs	r1, r6, r1
   31fb2:	4666      	mov	r6, ip
   31fb4:	408e      	lsls	r6, r1
   31fb6:	0031      	movs	r1, r6
   31fb8:	1e4e      	subs	r6, r1, #1
   31fba:	41b1      	sbcs	r1, r6
   31fbc:	4301      	orrs	r1, r0
   31fbe:	185b      	adds	r3, r3, r1
   31fc0:	0159      	lsls	r1, r3, #5
   31fc2:	d5d3      	bpl.n	31f6c <__aeabi_fadd+0xd8>
   31fc4:	3401      	adds	r4, #1
   31fc6:	2cff      	cmp	r4, #255	; 0xff
   31fc8:	d100      	bne.n	31fcc <__aeabi_fadd+0x138>
   31fca:	e087      	b.n	320dc <__aeabi_fadd+0x248>
   31fcc:	2201      	movs	r2, #1
   31fce:	4978      	ldr	r1, [pc, #480]	; (321b0 <__aeabi_fadd+0x31c>)
   31fd0:	401a      	ands	r2, r3
   31fd2:	085b      	lsrs	r3, r3, #1
   31fd4:	400b      	ands	r3, r1
   31fd6:	4313      	orrs	r3, r2
   31fd8:	e797      	b.n	31f0a <__aeabi_fadd+0x76>
   31fda:	2c00      	cmp	r4, #0
   31fdc:	d000      	beq.n	31fe0 <__aeabi_fadd+0x14c>
   31fde:	e0a7      	b.n	32130 <__aeabi_fadd+0x29c>
   31fe0:	2b00      	cmp	r3, #0
   31fe2:	d000      	beq.n	31fe6 <__aeabi_fadd+0x152>
   31fe4:	e0b6      	b.n	32154 <__aeabi_fadd+0x2c0>
   31fe6:	1e3b      	subs	r3, r7, #0
   31fe8:	d162      	bne.n	320b0 <__aeabi_fadd+0x21c>
   31fea:	2600      	movs	r6, #0
   31fec:	2200      	movs	r2, #0
   31fee:	0273      	lsls	r3, r6, #9
   31ff0:	0a5b      	lsrs	r3, r3, #9
   31ff2:	b2e4      	uxtb	r4, r4
   31ff4:	e79a      	b.n	31f2c <__aeabi_fadd+0x98>
   31ff6:	0014      	movs	r4, r2
   31ff8:	e787      	b.n	31f0a <__aeabi_fadd+0x76>
   31ffa:	2f00      	cmp	r7, #0
   31ffc:	d04d      	beq.n	3209a <__aeabi_fadd+0x206>
   31ffe:	1e48      	subs	r0, r1, #1
   32000:	2800      	cmp	r0, #0
   32002:	d157      	bne.n	320b4 <__aeabi_fadd+0x220>
   32004:	4463      	add	r3, ip
   32006:	2401      	movs	r4, #1
   32008:	015a      	lsls	r2, r3, #5
   3200a:	d5af      	bpl.n	31f6c <__aeabi_fadd+0xd8>
   3200c:	2402      	movs	r4, #2
   3200e:	e7dd      	b.n	31fcc <__aeabi_fadd+0x138>
   32010:	2a00      	cmp	r2, #0
   32012:	d124      	bne.n	3205e <__aeabi_fadd+0x1ca>
   32014:	1c62      	adds	r2, r4, #1
   32016:	b2d2      	uxtb	r2, r2
   32018:	2a01      	cmp	r2, #1
   3201a:	ddde      	ble.n	31fda <__aeabi_fadd+0x146>
   3201c:	1bde      	subs	r6, r3, r7
   3201e:	0172      	lsls	r2, r6, #5
   32020:	d535      	bpl.n	3208e <__aeabi_fadd+0x1fa>
   32022:	1afe      	subs	r6, r7, r3
   32024:	000d      	movs	r5, r1
   32026:	e75c      	b.n	31ee2 <__aeabi_fadd+0x4e>
   32028:	002a      	movs	r2, r5
   3202a:	2300      	movs	r3, #0
   3202c:	e77e      	b.n	31f2c <__aeabi_fadd+0x98>
   3202e:	0033      	movs	r3, r6
   32030:	4a60      	ldr	r2, [pc, #384]	; (321b4 <__aeabi_fadd+0x320>)
   32032:	1a24      	subs	r4, r4, r0
   32034:	4013      	ands	r3, r2
   32036:	e768      	b.n	31f0a <__aeabi_fadd+0x76>
   32038:	2900      	cmp	r1, #0
   3203a:	d163      	bne.n	32104 <__aeabi_fadd+0x270>
   3203c:	1c61      	adds	r1, r4, #1
   3203e:	b2c8      	uxtb	r0, r1
   32040:	2801      	cmp	r0, #1
   32042:	dd4e      	ble.n	320e2 <__aeabi_fadd+0x24e>
   32044:	29ff      	cmp	r1, #255	; 0xff
   32046:	d049      	beq.n	320dc <__aeabi_fadd+0x248>
   32048:	4463      	add	r3, ip
   3204a:	085b      	lsrs	r3, r3, #1
   3204c:	000c      	movs	r4, r1
   3204e:	e75c      	b.n	31f0a <__aeabi_fadd+0x76>
   32050:	2aff      	cmp	r2, #255	; 0xff
   32052:	d041      	beq.n	320d8 <__aeabi_fadd+0x244>
   32054:	000a      	movs	r2, r1
   32056:	e779      	b.n	31f4c <__aeabi_fadd+0xb8>
   32058:	2201      	movs	r2, #1
   3205a:	1a9b      	subs	r3, r3, r2
   3205c:	e784      	b.n	31f68 <__aeabi_fadd+0xd4>
   3205e:	2c00      	cmp	r4, #0
   32060:	d01d      	beq.n	3209e <__aeabi_fadd+0x20a>
   32062:	28ff      	cmp	r0, #255	; 0xff
   32064:	d022      	beq.n	320ac <__aeabi_fadd+0x218>
   32066:	2480      	movs	r4, #128	; 0x80
   32068:	04e4      	lsls	r4, r4, #19
   3206a:	4252      	negs	r2, r2
   3206c:	4323      	orrs	r3, r4
   3206e:	2a1b      	cmp	r2, #27
   32070:	dd00      	ble.n	32074 <__aeabi_fadd+0x1e0>
   32072:	e08a      	b.n	3218a <__aeabi_fadd+0x2f6>
   32074:	001c      	movs	r4, r3
   32076:	2520      	movs	r5, #32
   32078:	40d4      	lsrs	r4, r2
   3207a:	1aaa      	subs	r2, r5, r2
   3207c:	4093      	lsls	r3, r2
   3207e:	1e5a      	subs	r2, r3, #1
   32080:	4193      	sbcs	r3, r2
   32082:	4323      	orrs	r3, r4
   32084:	4662      	mov	r2, ip
   32086:	0004      	movs	r4, r0
   32088:	1ad3      	subs	r3, r2, r3
   3208a:	000d      	movs	r5, r1
   3208c:	e725      	b.n	31eda <__aeabi_fadd+0x46>
   3208e:	2e00      	cmp	r6, #0
   32090:	d000      	beq.n	32094 <__aeabi_fadd+0x200>
   32092:	e726      	b.n	31ee2 <__aeabi_fadd+0x4e>
   32094:	2200      	movs	r2, #0
   32096:	2400      	movs	r4, #0
   32098:	e7a9      	b.n	31fee <__aeabi_fadd+0x15a>
   3209a:	000c      	movs	r4, r1
   3209c:	e735      	b.n	31f0a <__aeabi_fadd+0x76>
   3209e:	2b00      	cmp	r3, #0
   320a0:	d04d      	beq.n	3213e <__aeabi_fadd+0x2aa>
   320a2:	43d2      	mvns	r2, r2
   320a4:	2a00      	cmp	r2, #0
   320a6:	d0ed      	beq.n	32084 <__aeabi_fadd+0x1f0>
   320a8:	28ff      	cmp	r0, #255	; 0xff
   320aa:	d1e0      	bne.n	3206e <__aeabi_fadd+0x1da>
   320ac:	4663      	mov	r3, ip
   320ae:	24ff      	movs	r4, #255	; 0xff
   320b0:	000d      	movs	r5, r1
   320b2:	e72a      	b.n	31f0a <__aeabi_fadd+0x76>
   320b4:	29ff      	cmp	r1, #255	; 0xff
   320b6:	d00f      	beq.n	320d8 <__aeabi_fadd+0x244>
   320b8:	0001      	movs	r1, r0
   320ba:	e773      	b.n	31fa4 <__aeabi_fadd+0x110>
   320bc:	2b00      	cmp	r3, #0
   320be:	d061      	beq.n	32184 <__aeabi_fadd+0x2f0>
   320c0:	24ff      	movs	r4, #255	; 0xff
   320c2:	2f00      	cmp	r7, #0
   320c4:	d100      	bne.n	320c8 <__aeabi_fadd+0x234>
   320c6:	e720      	b.n	31f0a <__aeabi_fadd+0x76>
   320c8:	2280      	movs	r2, #128	; 0x80
   320ca:	4641      	mov	r1, r8
   320cc:	03d2      	lsls	r2, r2, #15
   320ce:	4211      	tst	r1, r2
   320d0:	d002      	beq.n	320d8 <__aeabi_fadd+0x244>
   320d2:	4216      	tst	r6, r2
   320d4:	d100      	bne.n	320d8 <__aeabi_fadd+0x244>
   320d6:	003b      	movs	r3, r7
   320d8:	24ff      	movs	r4, #255	; 0xff
   320da:	e716      	b.n	31f0a <__aeabi_fadd+0x76>
   320dc:	24ff      	movs	r4, #255	; 0xff
   320de:	2300      	movs	r3, #0
   320e0:	e724      	b.n	31f2c <__aeabi_fadd+0x98>
   320e2:	2c00      	cmp	r4, #0
   320e4:	d1ea      	bne.n	320bc <__aeabi_fadd+0x228>
   320e6:	2b00      	cmp	r3, #0
   320e8:	d058      	beq.n	3219c <__aeabi_fadd+0x308>
   320ea:	2f00      	cmp	r7, #0
   320ec:	d100      	bne.n	320f0 <__aeabi_fadd+0x25c>
   320ee:	e70c      	b.n	31f0a <__aeabi_fadd+0x76>
   320f0:	4463      	add	r3, ip
   320f2:	015a      	lsls	r2, r3, #5
   320f4:	d400      	bmi.n	320f8 <__aeabi_fadd+0x264>
   320f6:	e739      	b.n	31f6c <__aeabi_fadd+0xd8>
   320f8:	4a2e      	ldr	r2, [pc, #184]	; (321b4 <__aeabi_fadd+0x320>)
   320fa:	000c      	movs	r4, r1
   320fc:	4013      	ands	r3, r2
   320fe:	e704      	b.n	31f0a <__aeabi_fadd+0x76>
   32100:	2101      	movs	r1, #1
   32102:	e75c      	b.n	31fbe <__aeabi_fadd+0x12a>
   32104:	2c00      	cmp	r4, #0
   32106:	d11e      	bne.n	32146 <__aeabi_fadd+0x2b2>
   32108:	2b00      	cmp	r3, #0
   3210a:	d040      	beq.n	3218e <__aeabi_fadd+0x2fa>
   3210c:	43c9      	mvns	r1, r1
   3210e:	2900      	cmp	r1, #0
   32110:	d00b      	beq.n	3212a <__aeabi_fadd+0x296>
   32112:	28ff      	cmp	r0, #255	; 0xff
   32114:	d036      	beq.n	32184 <__aeabi_fadd+0x2f0>
   32116:	291b      	cmp	r1, #27
   32118:	dc47      	bgt.n	321aa <__aeabi_fadd+0x316>
   3211a:	001c      	movs	r4, r3
   3211c:	2620      	movs	r6, #32
   3211e:	40cc      	lsrs	r4, r1
   32120:	1a71      	subs	r1, r6, r1
   32122:	408b      	lsls	r3, r1
   32124:	1e59      	subs	r1, r3, #1
   32126:	418b      	sbcs	r3, r1
   32128:	4323      	orrs	r3, r4
   3212a:	4463      	add	r3, ip
   3212c:	0004      	movs	r4, r0
   3212e:	e747      	b.n	31fc0 <__aeabi_fadd+0x12c>
   32130:	2b00      	cmp	r3, #0
   32132:	d118      	bne.n	32166 <__aeabi_fadd+0x2d2>
   32134:	1e3b      	subs	r3, r7, #0
   32136:	d02d      	beq.n	32194 <__aeabi_fadd+0x300>
   32138:	000d      	movs	r5, r1
   3213a:	24ff      	movs	r4, #255	; 0xff
   3213c:	e6e5      	b.n	31f0a <__aeabi_fadd+0x76>
   3213e:	003b      	movs	r3, r7
   32140:	0004      	movs	r4, r0
   32142:	000d      	movs	r5, r1
   32144:	e6e1      	b.n	31f0a <__aeabi_fadd+0x76>
   32146:	28ff      	cmp	r0, #255	; 0xff
   32148:	d01c      	beq.n	32184 <__aeabi_fadd+0x2f0>
   3214a:	2480      	movs	r4, #128	; 0x80
   3214c:	04e4      	lsls	r4, r4, #19
   3214e:	4249      	negs	r1, r1
   32150:	4323      	orrs	r3, r4
   32152:	e7e0      	b.n	32116 <__aeabi_fadd+0x282>
   32154:	2f00      	cmp	r7, #0
   32156:	d100      	bne.n	3215a <__aeabi_fadd+0x2c6>
   32158:	e6d7      	b.n	31f0a <__aeabi_fadd+0x76>
   3215a:	1bde      	subs	r6, r3, r7
   3215c:	0172      	lsls	r2, r6, #5
   3215e:	d51f      	bpl.n	321a0 <__aeabi_fadd+0x30c>
   32160:	1afb      	subs	r3, r7, r3
   32162:	000d      	movs	r5, r1
   32164:	e6d1      	b.n	31f0a <__aeabi_fadd+0x76>
   32166:	24ff      	movs	r4, #255	; 0xff
   32168:	2f00      	cmp	r7, #0
   3216a:	d100      	bne.n	3216e <__aeabi_fadd+0x2da>
   3216c:	e6cd      	b.n	31f0a <__aeabi_fadd+0x76>
   3216e:	2280      	movs	r2, #128	; 0x80
   32170:	4640      	mov	r0, r8
   32172:	03d2      	lsls	r2, r2, #15
   32174:	4210      	tst	r0, r2
   32176:	d0af      	beq.n	320d8 <__aeabi_fadd+0x244>
   32178:	4216      	tst	r6, r2
   3217a:	d1ad      	bne.n	320d8 <__aeabi_fadd+0x244>
   3217c:	003b      	movs	r3, r7
   3217e:	000d      	movs	r5, r1
   32180:	24ff      	movs	r4, #255	; 0xff
   32182:	e6c2      	b.n	31f0a <__aeabi_fadd+0x76>
   32184:	4663      	mov	r3, ip
   32186:	24ff      	movs	r4, #255	; 0xff
   32188:	e6bf      	b.n	31f0a <__aeabi_fadd+0x76>
   3218a:	2301      	movs	r3, #1
   3218c:	e77a      	b.n	32084 <__aeabi_fadd+0x1f0>
   3218e:	003b      	movs	r3, r7
   32190:	0004      	movs	r4, r0
   32192:	e6ba      	b.n	31f0a <__aeabi_fadd+0x76>
   32194:	2680      	movs	r6, #128	; 0x80
   32196:	2200      	movs	r2, #0
   32198:	03f6      	lsls	r6, r6, #15
   3219a:	e6f0      	b.n	31f7e <__aeabi_fadd+0xea>
   3219c:	003b      	movs	r3, r7
   3219e:	e6b4      	b.n	31f0a <__aeabi_fadd+0x76>
   321a0:	1e33      	subs	r3, r6, #0
   321a2:	d000      	beq.n	321a6 <__aeabi_fadd+0x312>
   321a4:	e6e2      	b.n	31f6c <__aeabi_fadd+0xd8>
   321a6:	2200      	movs	r2, #0
   321a8:	e721      	b.n	31fee <__aeabi_fadd+0x15a>
   321aa:	2301      	movs	r3, #1
   321ac:	e7bd      	b.n	3212a <__aeabi_fadd+0x296>
   321ae:	46c0      	nop			; (mov r8, r8)
   321b0:	7dffffff 	.word	0x7dffffff
   321b4:	fbffffff 	.word	0xfbffffff

000321b8 <__aeabi_fdiv>:
   321b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   321ba:	4657      	mov	r7, sl
   321bc:	464e      	mov	r6, r9
   321be:	46de      	mov	lr, fp
   321c0:	4645      	mov	r5, r8
   321c2:	b5e0      	push	{r5, r6, r7, lr}
   321c4:	0244      	lsls	r4, r0, #9
   321c6:	0043      	lsls	r3, r0, #1
   321c8:	0fc6      	lsrs	r6, r0, #31
   321ca:	b083      	sub	sp, #12
   321cc:	1c0f      	adds	r7, r1, #0
   321ce:	0a64      	lsrs	r4, r4, #9
   321d0:	0e1b      	lsrs	r3, r3, #24
   321d2:	46b2      	mov	sl, r6
   321d4:	d053      	beq.n	3227e <__aeabi_fdiv+0xc6>
   321d6:	2bff      	cmp	r3, #255	; 0xff
   321d8:	d027      	beq.n	3222a <__aeabi_fdiv+0x72>
   321da:	2280      	movs	r2, #128	; 0x80
   321dc:	00e4      	lsls	r4, r4, #3
   321de:	04d2      	lsls	r2, r2, #19
   321e0:	4314      	orrs	r4, r2
   321e2:	227f      	movs	r2, #127	; 0x7f
   321e4:	4252      	negs	r2, r2
   321e6:	4690      	mov	r8, r2
   321e8:	4498      	add	r8, r3
   321ea:	2300      	movs	r3, #0
   321ec:	4699      	mov	r9, r3
   321ee:	469b      	mov	fp, r3
   321f0:	027d      	lsls	r5, r7, #9
   321f2:	0078      	lsls	r0, r7, #1
   321f4:	0ffb      	lsrs	r3, r7, #31
   321f6:	0a6d      	lsrs	r5, r5, #9
   321f8:	0e00      	lsrs	r0, r0, #24
   321fa:	9300      	str	r3, [sp, #0]
   321fc:	d024      	beq.n	32248 <__aeabi_fdiv+0x90>
   321fe:	28ff      	cmp	r0, #255	; 0xff
   32200:	d046      	beq.n	32290 <__aeabi_fdiv+0xd8>
   32202:	2380      	movs	r3, #128	; 0x80
   32204:	2100      	movs	r1, #0
   32206:	00ed      	lsls	r5, r5, #3
   32208:	04db      	lsls	r3, r3, #19
   3220a:	431d      	orrs	r5, r3
   3220c:	387f      	subs	r0, #127	; 0x7f
   3220e:	4647      	mov	r7, r8
   32210:	1a38      	subs	r0, r7, r0
   32212:	464f      	mov	r7, r9
   32214:	430f      	orrs	r7, r1
   32216:	00bf      	lsls	r7, r7, #2
   32218:	46b9      	mov	r9, r7
   3221a:	0033      	movs	r3, r6
   3221c:	9a00      	ldr	r2, [sp, #0]
   3221e:	4f87      	ldr	r7, [pc, #540]	; (3243c <__aeabi_fdiv+0x284>)
   32220:	4053      	eors	r3, r2
   32222:	464a      	mov	r2, r9
   32224:	58ba      	ldr	r2, [r7, r2]
   32226:	9301      	str	r3, [sp, #4]
   32228:	4697      	mov	pc, r2
   3222a:	2c00      	cmp	r4, #0
   3222c:	d14e      	bne.n	322cc <__aeabi_fdiv+0x114>
   3222e:	2308      	movs	r3, #8
   32230:	4699      	mov	r9, r3
   32232:	33f7      	adds	r3, #247	; 0xf7
   32234:	4698      	mov	r8, r3
   32236:	3bfd      	subs	r3, #253	; 0xfd
   32238:	469b      	mov	fp, r3
   3223a:	027d      	lsls	r5, r7, #9
   3223c:	0078      	lsls	r0, r7, #1
   3223e:	0ffb      	lsrs	r3, r7, #31
   32240:	0a6d      	lsrs	r5, r5, #9
   32242:	0e00      	lsrs	r0, r0, #24
   32244:	9300      	str	r3, [sp, #0]
   32246:	d1da      	bne.n	321fe <__aeabi_fdiv+0x46>
   32248:	2d00      	cmp	r5, #0
   3224a:	d126      	bne.n	3229a <__aeabi_fdiv+0xe2>
   3224c:	2000      	movs	r0, #0
   3224e:	2101      	movs	r1, #1
   32250:	0033      	movs	r3, r6
   32252:	9a00      	ldr	r2, [sp, #0]
   32254:	4f7a      	ldr	r7, [pc, #488]	; (32440 <__aeabi_fdiv+0x288>)
   32256:	4053      	eors	r3, r2
   32258:	4642      	mov	r2, r8
   3225a:	1a10      	subs	r0, r2, r0
   3225c:	464a      	mov	r2, r9
   3225e:	430a      	orrs	r2, r1
   32260:	0092      	lsls	r2, r2, #2
   32262:	58ba      	ldr	r2, [r7, r2]
   32264:	001d      	movs	r5, r3
   32266:	4697      	mov	pc, r2
   32268:	9b00      	ldr	r3, [sp, #0]
   3226a:	002c      	movs	r4, r5
   3226c:	469a      	mov	sl, r3
   3226e:	468b      	mov	fp, r1
   32270:	465b      	mov	r3, fp
   32272:	2b02      	cmp	r3, #2
   32274:	d131      	bne.n	322da <__aeabi_fdiv+0x122>
   32276:	4653      	mov	r3, sl
   32278:	21ff      	movs	r1, #255	; 0xff
   3227a:	2400      	movs	r4, #0
   3227c:	e038      	b.n	322f0 <__aeabi_fdiv+0x138>
   3227e:	2c00      	cmp	r4, #0
   32280:	d117      	bne.n	322b2 <__aeabi_fdiv+0xfa>
   32282:	2304      	movs	r3, #4
   32284:	4699      	mov	r9, r3
   32286:	2300      	movs	r3, #0
   32288:	4698      	mov	r8, r3
   3228a:	3301      	adds	r3, #1
   3228c:	469b      	mov	fp, r3
   3228e:	e7af      	b.n	321f0 <__aeabi_fdiv+0x38>
   32290:	20ff      	movs	r0, #255	; 0xff
   32292:	2d00      	cmp	r5, #0
   32294:	d10b      	bne.n	322ae <__aeabi_fdiv+0xf6>
   32296:	2102      	movs	r1, #2
   32298:	e7da      	b.n	32250 <__aeabi_fdiv+0x98>
   3229a:	0028      	movs	r0, r5
   3229c:	f002 f880 	bl	343a0 <__clzsi2>
   322a0:	1f43      	subs	r3, r0, #5
   322a2:	409d      	lsls	r5, r3
   322a4:	2376      	movs	r3, #118	; 0x76
   322a6:	425b      	negs	r3, r3
   322a8:	1a18      	subs	r0, r3, r0
   322aa:	2100      	movs	r1, #0
   322ac:	e7af      	b.n	3220e <__aeabi_fdiv+0x56>
   322ae:	2103      	movs	r1, #3
   322b0:	e7ad      	b.n	3220e <__aeabi_fdiv+0x56>
   322b2:	0020      	movs	r0, r4
   322b4:	f002 f874 	bl	343a0 <__clzsi2>
   322b8:	1f43      	subs	r3, r0, #5
   322ba:	409c      	lsls	r4, r3
   322bc:	2376      	movs	r3, #118	; 0x76
   322be:	425b      	negs	r3, r3
   322c0:	1a1b      	subs	r3, r3, r0
   322c2:	4698      	mov	r8, r3
   322c4:	2300      	movs	r3, #0
   322c6:	4699      	mov	r9, r3
   322c8:	469b      	mov	fp, r3
   322ca:	e791      	b.n	321f0 <__aeabi_fdiv+0x38>
   322cc:	230c      	movs	r3, #12
   322ce:	4699      	mov	r9, r3
   322d0:	33f3      	adds	r3, #243	; 0xf3
   322d2:	4698      	mov	r8, r3
   322d4:	3bfc      	subs	r3, #252	; 0xfc
   322d6:	469b      	mov	fp, r3
   322d8:	e78a      	b.n	321f0 <__aeabi_fdiv+0x38>
   322da:	2b03      	cmp	r3, #3
   322dc:	d100      	bne.n	322e0 <__aeabi_fdiv+0x128>
   322de:	e0a5      	b.n	3242c <__aeabi_fdiv+0x274>
   322e0:	4655      	mov	r5, sl
   322e2:	2b01      	cmp	r3, #1
   322e4:	d000      	beq.n	322e8 <__aeabi_fdiv+0x130>
   322e6:	e081      	b.n	323ec <__aeabi_fdiv+0x234>
   322e8:	2301      	movs	r3, #1
   322ea:	2100      	movs	r1, #0
   322ec:	2400      	movs	r4, #0
   322ee:	402b      	ands	r3, r5
   322f0:	0264      	lsls	r4, r4, #9
   322f2:	05c9      	lsls	r1, r1, #23
   322f4:	0a60      	lsrs	r0, r4, #9
   322f6:	07db      	lsls	r3, r3, #31
   322f8:	4308      	orrs	r0, r1
   322fa:	4318      	orrs	r0, r3
   322fc:	b003      	add	sp, #12
   322fe:	bc3c      	pop	{r2, r3, r4, r5}
   32300:	4690      	mov	r8, r2
   32302:	4699      	mov	r9, r3
   32304:	46a2      	mov	sl, r4
   32306:	46ab      	mov	fp, r5
   32308:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3230a:	2480      	movs	r4, #128	; 0x80
   3230c:	2300      	movs	r3, #0
   3230e:	03e4      	lsls	r4, r4, #15
   32310:	21ff      	movs	r1, #255	; 0xff
   32312:	e7ed      	b.n	322f0 <__aeabi_fdiv+0x138>
   32314:	21ff      	movs	r1, #255	; 0xff
   32316:	2400      	movs	r4, #0
   32318:	e7ea      	b.n	322f0 <__aeabi_fdiv+0x138>
   3231a:	2301      	movs	r3, #1
   3231c:	1a59      	subs	r1, r3, r1
   3231e:	291b      	cmp	r1, #27
   32320:	dd66      	ble.n	323f0 <__aeabi_fdiv+0x238>
   32322:	9a01      	ldr	r2, [sp, #4]
   32324:	4013      	ands	r3, r2
   32326:	2100      	movs	r1, #0
   32328:	2400      	movs	r4, #0
   3232a:	e7e1      	b.n	322f0 <__aeabi_fdiv+0x138>
   3232c:	2380      	movs	r3, #128	; 0x80
   3232e:	03db      	lsls	r3, r3, #15
   32330:	421c      	tst	r4, r3
   32332:	d038      	beq.n	323a6 <__aeabi_fdiv+0x1ee>
   32334:	421d      	tst	r5, r3
   32336:	d051      	beq.n	323dc <__aeabi_fdiv+0x224>
   32338:	431c      	orrs	r4, r3
   3233a:	0264      	lsls	r4, r4, #9
   3233c:	0a64      	lsrs	r4, r4, #9
   3233e:	0033      	movs	r3, r6
   32340:	21ff      	movs	r1, #255	; 0xff
   32342:	e7d5      	b.n	322f0 <__aeabi_fdiv+0x138>
   32344:	0163      	lsls	r3, r4, #5
   32346:	016c      	lsls	r4, r5, #5
   32348:	42a3      	cmp	r3, r4
   3234a:	d23b      	bcs.n	323c4 <__aeabi_fdiv+0x20c>
   3234c:	261b      	movs	r6, #27
   3234e:	2100      	movs	r1, #0
   32350:	3801      	subs	r0, #1
   32352:	2501      	movs	r5, #1
   32354:	001f      	movs	r7, r3
   32356:	0049      	lsls	r1, r1, #1
   32358:	005b      	lsls	r3, r3, #1
   3235a:	2f00      	cmp	r7, #0
   3235c:	db01      	blt.n	32362 <__aeabi_fdiv+0x1aa>
   3235e:	429c      	cmp	r4, r3
   32360:	d801      	bhi.n	32366 <__aeabi_fdiv+0x1ae>
   32362:	1b1b      	subs	r3, r3, r4
   32364:	4329      	orrs	r1, r5
   32366:	3e01      	subs	r6, #1
   32368:	2e00      	cmp	r6, #0
   3236a:	d1f3      	bne.n	32354 <__aeabi_fdiv+0x19c>
   3236c:	001c      	movs	r4, r3
   3236e:	1e63      	subs	r3, r4, #1
   32370:	419c      	sbcs	r4, r3
   32372:	430c      	orrs	r4, r1
   32374:	0001      	movs	r1, r0
   32376:	317f      	adds	r1, #127	; 0x7f
   32378:	2900      	cmp	r1, #0
   3237a:	ddce      	ble.n	3231a <__aeabi_fdiv+0x162>
   3237c:	0763      	lsls	r3, r4, #29
   3237e:	d004      	beq.n	3238a <__aeabi_fdiv+0x1d2>
   32380:	230f      	movs	r3, #15
   32382:	4023      	ands	r3, r4
   32384:	2b04      	cmp	r3, #4
   32386:	d000      	beq.n	3238a <__aeabi_fdiv+0x1d2>
   32388:	3404      	adds	r4, #4
   3238a:	0123      	lsls	r3, r4, #4
   3238c:	d503      	bpl.n	32396 <__aeabi_fdiv+0x1de>
   3238e:	0001      	movs	r1, r0
   32390:	4b2c      	ldr	r3, [pc, #176]	; (32444 <__aeabi_fdiv+0x28c>)
   32392:	3180      	adds	r1, #128	; 0x80
   32394:	401c      	ands	r4, r3
   32396:	29fe      	cmp	r1, #254	; 0xfe
   32398:	dd0d      	ble.n	323b6 <__aeabi_fdiv+0x1fe>
   3239a:	2301      	movs	r3, #1
   3239c:	9a01      	ldr	r2, [sp, #4]
   3239e:	21ff      	movs	r1, #255	; 0xff
   323a0:	4013      	ands	r3, r2
   323a2:	2400      	movs	r4, #0
   323a4:	e7a4      	b.n	322f0 <__aeabi_fdiv+0x138>
   323a6:	2380      	movs	r3, #128	; 0x80
   323a8:	03db      	lsls	r3, r3, #15
   323aa:	431c      	orrs	r4, r3
   323ac:	0264      	lsls	r4, r4, #9
   323ae:	0a64      	lsrs	r4, r4, #9
   323b0:	0033      	movs	r3, r6
   323b2:	21ff      	movs	r1, #255	; 0xff
   323b4:	e79c      	b.n	322f0 <__aeabi_fdiv+0x138>
   323b6:	2301      	movs	r3, #1
   323b8:	9a01      	ldr	r2, [sp, #4]
   323ba:	01a4      	lsls	r4, r4, #6
   323bc:	0a64      	lsrs	r4, r4, #9
   323be:	b2c9      	uxtb	r1, r1
   323c0:	4013      	ands	r3, r2
   323c2:	e795      	b.n	322f0 <__aeabi_fdiv+0x138>
   323c4:	1b1b      	subs	r3, r3, r4
   323c6:	261a      	movs	r6, #26
   323c8:	2101      	movs	r1, #1
   323ca:	e7c2      	b.n	32352 <__aeabi_fdiv+0x19a>
   323cc:	9b00      	ldr	r3, [sp, #0]
   323ce:	468b      	mov	fp, r1
   323d0:	469a      	mov	sl, r3
   323d2:	2400      	movs	r4, #0
   323d4:	e74c      	b.n	32270 <__aeabi_fdiv+0xb8>
   323d6:	0263      	lsls	r3, r4, #9
   323d8:	d5e5      	bpl.n	323a6 <__aeabi_fdiv+0x1ee>
   323da:	2500      	movs	r5, #0
   323dc:	2480      	movs	r4, #128	; 0x80
   323de:	03e4      	lsls	r4, r4, #15
   323e0:	432c      	orrs	r4, r5
   323e2:	0264      	lsls	r4, r4, #9
   323e4:	0a64      	lsrs	r4, r4, #9
   323e6:	9b00      	ldr	r3, [sp, #0]
   323e8:	21ff      	movs	r1, #255	; 0xff
   323ea:	e781      	b.n	322f0 <__aeabi_fdiv+0x138>
   323ec:	9501      	str	r5, [sp, #4]
   323ee:	e7c1      	b.n	32374 <__aeabi_fdiv+0x1bc>
   323f0:	0023      	movs	r3, r4
   323f2:	2020      	movs	r0, #32
   323f4:	40cb      	lsrs	r3, r1
   323f6:	1a41      	subs	r1, r0, r1
   323f8:	408c      	lsls	r4, r1
   323fa:	1e61      	subs	r1, r4, #1
   323fc:	418c      	sbcs	r4, r1
   323fe:	431c      	orrs	r4, r3
   32400:	0763      	lsls	r3, r4, #29
   32402:	d004      	beq.n	3240e <__aeabi_fdiv+0x256>
   32404:	230f      	movs	r3, #15
   32406:	4023      	ands	r3, r4
   32408:	2b04      	cmp	r3, #4
   3240a:	d000      	beq.n	3240e <__aeabi_fdiv+0x256>
   3240c:	3404      	adds	r4, #4
   3240e:	0163      	lsls	r3, r4, #5
   32410:	d505      	bpl.n	3241e <__aeabi_fdiv+0x266>
   32412:	2301      	movs	r3, #1
   32414:	9a01      	ldr	r2, [sp, #4]
   32416:	2101      	movs	r1, #1
   32418:	4013      	ands	r3, r2
   3241a:	2400      	movs	r4, #0
   3241c:	e768      	b.n	322f0 <__aeabi_fdiv+0x138>
   3241e:	2301      	movs	r3, #1
   32420:	9a01      	ldr	r2, [sp, #4]
   32422:	01a4      	lsls	r4, r4, #6
   32424:	0a64      	lsrs	r4, r4, #9
   32426:	4013      	ands	r3, r2
   32428:	2100      	movs	r1, #0
   3242a:	e761      	b.n	322f0 <__aeabi_fdiv+0x138>
   3242c:	2380      	movs	r3, #128	; 0x80
   3242e:	03db      	lsls	r3, r3, #15
   32430:	431c      	orrs	r4, r3
   32432:	0264      	lsls	r4, r4, #9
   32434:	0a64      	lsrs	r4, r4, #9
   32436:	4653      	mov	r3, sl
   32438:	21ff      	movs	r1, #255	; 0xff
   3243a:	e759      	b.n	322f0 <__aeabi_fdiv+0x138>
   3243c:	00039a68 	.word	0x00039a68
   32440:	00039aa8 	.word	0x00039aa8
   32444:	f7ffffff 	.word	0xf7ffffff

00032448 <__aeabi_fmul>:
   32448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3244a:	4657      	mov	r7, sl
   3244c:	464e      	mov	r6, r9
   3244e:	4645      	mov	r5, r8
   32450:	46de      	mov	lr, fp
   32452:	b5e0      	push	{r5, r6, r7, lr}
   32454:	0247      	lsls	r7, r0, #9
   32456:	0046      	lsls	r6, r0, #1
   32458:	4688      	mov	r8, r1
   3245a:	0a7f      	lsrs	r7, r7, #9
   3245c:	0e36      	lsrs	r6, r6, #24
   3245e:	0fc4      	lsrs	r4, r0, #31
   32460:	2e00      	cmp	r6, #0
   32462:	d047      	beq.n	324f4 <__aeabi_fmul+0xac>
   32464:	2eff      	cmp	r6, #255	; 0xff
   32466:	d024      	beq.n	324b2 <__aeabi_fmul+0x6a>
   32468:	00fb      	lsls	r3, r7, #3
   3246a:	2780      	movs	r7, #128	; 0x80
   3246c:	04ff      	lsls	r7, r7, #19
   3246e:	431f      	orrs	r7, r3
   32470:	2300      	movs	r3, #0
   32472:	4699      	mov	r9, r3
   32474:	469a      	mov	sl, r3
   32476:	3e7f      	subs	r6, #127	; 0x7f
   32478:	4643      	mov	r3, r8
   3247a:	025d      	lsls	r5, r3, #9
   3247c:	0058      	lsls	r0, r3, #1
   3247e:	0fdb      	lsrs	r3, r3, #31
   32480:	0a6d      	lsrs	r5, r5, #9
   32482:	0e00      	lsrs	r0, r0, #24
   32484:	4698      	mov	r8, r3
   32486:	d043      	beq.n	32510 <__aeabi_fmul+0xc8>
   32488:	28ff      	cmp	r0, #255	; 0xff
   3248a:	d03b      	beq.n	32504 <__aeabi_fmul+0xbc>
   3248c:	00eb      	lsls	r3, r5, #3
   3248e:	2580      	movs	r5, #128	; 0x80
   32490:	2200      	movs	r2, #0
   32492:	04ed      	lsls	r5, r5, #19
   32494:	431d      	orrs	r5, r3
   32496:	387f      	subs	r0, #127	; 0x7f
   32498:	1836      	adds	r6, r6, r0
   3249a:	1c73      	adds	r3, r6, #1
   3249c:	4641      	mov	r1, r8
   3249e:	469b      	mov	fp, r3
   324a0:	464b      	mov	r3, r9
   324a2:	4061      	eors	r1, r4
   324a4:	4313      	orrs	r3, r2
   324a6:	2b0f      	cmp	r3, #15
   324a8:	d864      	bhi.n	32574 <__aeabi_fmul+0x12c>
   324aa:	4875      	ldr	r0, [pc, #468]	; (32680 <__aeabi_fmul+0x238>)
   324ac:	009b      	lsls	r3, r3, #2
   324ae:	58c3      	ldr	r3, [r0, r3]
   324b0:	469f      	mov	pc, r3
   324b2:	2f00      	cmp	r7, #0
   324b4:	d142      	bne.n	3253c <__aeabi_fmul+0xf4>
   324b6:	2308      	movs	r3, #8
   324b8:	4699      	mov	r9, r3
   324ba:	3b06      	subs	r3, #6
   324bc:	26ff      	movs	r6, #255	; 0xff
   324be:	469a      	mov	sl, r3
   324c0:	e7da      	b.n	32478 <__aeabi_fmul+0x30>
   324c2:	4641      	mov	r1, r8
   324c4:	2a02      	cmp	r2, #2
   324c6:	d028      	beq.n	3251a <__aeabi_fmul+0xd2>
   324c8:	2a03      	cmp	r2, #3
   324ca:	d100      	bne.n	324ce <__aeabi_fmul+0x86>
   324cc:	e0ce      	b.n	3266c <__aeabi_fmul+0x224>
   324ce:	2a01      	cmp	r2, #1
   324d0:	d000      	beq.n	324d4 <__aeabi_fmul+0x8c>
   324d2:	e0ac      	b.n	3262e <__aeabi_fmul+0x1e6>
   324d4:	4011      	ands	r1, r2
   324d6:	2000      	movs	r0, #0
   324d8:	2200      	movs	r2, #0
   324da:	b2cc      	uxtb	r4, r1
   324dc:	0240      	lsls	r0, r0, #9
   324de:	05d2      	lsls	r2, r2, #23
   324e0:	0a40      	lsrs	r0, r0, #9
   324e2:	07e4      	lsls	r4, r4, #31
   324e4:	4310      	orrs	r0, r2
   324e6:	4320      	orrs	r0, r4
   324e8:	bc3c      	pop	{r2, r3, r4, r5}
   324ea:	4690      	mov	r8, r2
   324ec:	4699      	mov	r9, r3
   324ee:	46a2      	mov	sl, r4
   324f0:	46ab      	mov	fp, r5
   324f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   324f4:	2f00      	cmp	r7, #0
   324f6:	d115      	bne.n	32524 <__aeabi_fmul+0xdc>
   324f8:	2304      	movs	r3, #4
   324fa:	4699      	mov	r9, r3
   324fc:	3b03      	subs	r3, #3
   324fe:	2600      	movs	r6, #0
   32500:	469a      	mov	sl, r3
   32502:	e7b9      	b.n	32478 <__aeabi_fmul+0x30>
   32504:	20ff      	movs	r0, #255	; 0xff
   32506:	2202      	movs	r2, #2
   32508:	2d00      	cmp	r5, #0
   3250a:	d0c5      	beq.n	32498 <__aeabi_fmul+0x50>
   3250c:	2203      	movs	r2, #3
   3250e:	e7c3      	b.n	32498 <__aeabi_fmul+0x50>
   32510:	2d00      	cmp	r5, #0
   32512:	d119      	bne.n	32548 <__aeabi_fmul+0x100>
   32514:	2000      	movs	r0, #0
   32516:	2201      	movs	r2, #1
   32518:	e7be      	b.n	32498 <__aeabi_fmul+0x50>
   3251a:	2401      	movs	r4, #1
   3251c:	22ff      	movs	r2, #255	; 0xff
   3251e:	400c      	ands	r4, r1
   32520:	2000      	movs	r0, #0
   32522:	e7db      	b.n	324dc <__aeabi_fmul+0x94>
   32524:	0038      	movs	r0, r7
   32526:	f001 ff3b 	bl	343a0 <__clzsi2>
   3252a:	2676      	movs	r6, #118	; 0x76
   3252c:	1f43      	subs	r3, r0, #5
   3252e:	409f      	lsls	r7, r3
   32530:	2300      	movs	r3, #0
   32532:	4276      	negs	r6, r6
   32534:	1a36      	subs	r6, r6, r0
   32536:	4699      	mov	r9, r3
   32538:	469a      	mov	sl, r3
   3253a:	e79d      	b.n	32478 <__aeabi_fmul+0x30>
   3253c:	230c      	movs	r3, #12
   3253e:	4699      	mov	r9, r3
   32540:	3b09      	subs	r3, #9
   32542:	26ff      	movs	r6, #255	; 0xff
   32544:	469a      	mov	sl, r3
   32546:	e797      	b.n	32478 <__aeabi_fmul+0x30>
   32548:	0028      	movs	r0, r5
   3254a:	f001 ff29 	bl	343a0 <__clzsi2>
   3254e:	1f43      	subs	r3, r0, #5
   32550:	409d      	lsls	r5, r3
   32552:	2376      	movs	r3, #118	; 0x76
   32554:	425b      	negs	r3, r3
   32556:	1a18      	subs	r0, r3, r0
   32558:	2200      	movs	r2, #0
   3255a:	e79d      	b.n	32498 <__aeabi_fmul+0x50>
   3255c:	2080      	movs	r0, #128	; 0x80
   3255e:	2400      	movs	r4, #0
   32560:	03c0      	lsls	r0, r0, #15
   32562:	22ff      	movs	r2, #255	; 0xff
   32564:	e7ba      	b.n	324dc <__aeabi_fmul+0x94>
   32566:	003d      	movs	r5, r7
   32568:	4652      	mov	r2, sl
   3256a:	e7ab      	b.n	324c4 <__aeabi_fmul+0x7c>
   3256c:	003d      	movs	r5, r7
   3256e:	0021      	movs	r1, r4
   32570:	4652      	mov	r2, sl
   32572:	e7a7      	b.n	324c4 <__aeabi_fmul+0x7c>
   32574:	0c3b      	lsrs	r3, r7, #16
   32576:	469c      	mov	ip, r3
   32578:	042a      	lsls	r2, r5, #16
   3257a:	0c12      	lsrs	r2, r2, #16
   3257c:	0c2b      	lsrs	r3, r5, #16
   3257e:	0014      	movs	r4, r2
   32580:	4660      	mov	r0, ip
   32582:	4665      	mov	r5, ip
   32584:	043f      	lsls	r7, r7, #16
   32586:	0c3f      	lsrs	r7, r7, #16
   32588:	437c      	muls	r4, r7
   3258a:	4342      	muls	r2, r0
   3258c:	435d      	muls	r5, r3
   3258e:	437b      	muls	r3, r7
   32590:	0c27      	lsrs	r7, r4, #16
   32592:	189b      	adds	r3, r3, r2
   32594:	18ff      	adds	r7, r7, r3
   32596:	42ba      	cmp	r2, r7
   32598:	d903      	bls.n	325a2 <__aeabi_fmul+0x15a>
   3259a:	2380      	movs	r3, #128	; 0x80
   3259c:	025b      	lsls	r3, r3, #9
   3259e:	469c      	mov	ip, r3
   325a0:	4465      	add	r5, ip
   325a2:	0424      	lsls	r4, r4, #16
   325a4:	043a      	lsls	r2, r7, #16
   325a6:	0c24      	lsrs	r4, r4, #16
   325a8:	1912      	adds	r2, r2, r4
   325aa:	0193      	lsls	r3, r2, #6
   325ac:	1e5c      	subs	r4, r3, #1
   325ae:	41a3      	sbcs	r3, r4
   325b0:	0c3f      	lsrs	r7, r7, #16
   325b2:	0e92      	lsrs	r2, r2, #26
   325b4:	197d      	adds	r5, r7, r5
   325b6:	431a      	orrs	r2, r3
   325b8:	01ad      	lsls	r5, r5, #6
   325ba:	4315      	orrs	r5, r2
   325bc:	012b      	lsls	r3, r5, #4
   325be:	d504      	bpl.n	325ca <__aeabi_fmul+0x182>
   325c0:	2301      	movs	r3, #1
   325c2:	465e      	mov	r6, fp
   325c4:	086a      	lsrs	r2, r5, #1
   325c6:	401d      	ands	r5, r3
   325c8:	4315      	orrs	r5, r2
   325ca:	0032      	movs	r2, r6
   325cc:	327f      	adds	r2, #127	; 0x7f
   325ce:	2a00      	cmp	r2, #0
   325d0:	dd25      	ble.n	3261e <__aeabi_fmul+0x1d6>
   325d2:	076b      	lsls	r3, r5, #29
   325d4:	d004      	beq.n	325e0 <__aeabi_fmul+0x198>
   325d6:	230f      	movs	r3, #15
   325d8:	402b      	ands	r3, r5
   325da:	2b04      	cmp	r3, #4
   325dc:	d000      	beq.n	325e0 <__aeabi_fmul+0x198>
   325de:	3504      	adds	r5, #4
   325e0:	012b      	lsls	r3, r5, #4
   325e2:	d503      	bpl.n	325ec <__aeabi_fmul+0x1a4>
   325e4:	0032      	movs	r2, r6
   325e6:	4b27      	ldr	r3, [pc, #156]	; (32684 <__aeabi_fmul+0x23c>)
   325e8:	3280      	adds	r2, #128	; 0x80
   325ea:	401d      	ands	r5, r3
   325ec:	2afe      	cmp	r2, #254	; 0xfe
   325ee:	dc94      	bgt.n	3251a <__aeabi_fmul+0xd2>
   325f0:	2401      	movs	r4, #1
   325f2:	01a8      	lsls	r0, r5, #6
   325f4:	0a40      	lsrs	r0, r0, #9
   325f6:	b2d2      	uxtb	r2, r2
   325f8:	400c      	ands	r4, r1
   325fa:	e76f      	b.n	324dc <__aeabi_fmul+0x94>
   325fc:	2080      	movs	r0, #128	; 0x80
   325fe:	03c0      	lsls	r0, r0, #15
   32600:	4207      	tst	r7, r0
   32602:	d007      	beq.n	32614 <__aeabi_fmul+0x1cc>
   32604:	4205      	tst	r5, r0
   32606:	d105      	bne.n	32614 <__aeabi_fmul+0x1cc>
   32608:	4328      	orrs	r0, r5
   3260a:	0240      	lsls	r0, r0, #9
   3260c:	0a40      	lsrs	r0, r0, #9
   3260e:	4644      	mov	r4, r8
   32610:	22ff      	movs	r2, #255	; 0xff
   32612:	e763      	b.n	324dc <__aeabi_fmul+0x94>
   32614:	4338      	orrs	r0, r7
   32616:	0240      	lsls	r0, r0, #9
   32618:	0a40      	lsrs	r0, r0, #9
   3261a:	22ff      	movs	r2, #255	; 0xff
   3261c:	e75e      	b.n	324dc <__aeabi_fmul+0x94>
   3261e:	2401      	movs	r4, #1
   32620:	1aa3      	subs	r3, r4, r2
   32622:	2b1b      	cmp	r3, #27
   32624:	dd05      	ble.n	32632 <__aeabi_fmul+0x1ea>
   32626:	400c      	ands	r4, r1
   32628:	2200      	movs	r2, #0
   3262a:	2000      	movs	r0, #0
   3262c:	e756      	b.n	324dc <__aeabi_fmul+0x94>
   3262e:	465e      	mov	r6, fp
   32630:	e7cb      	b.n	325ca <__aeabi_fmul+0x182>
   32632:	002a      	movs	r2, r5
   32634:	2020      	movs	r0, #32
   32636:	40da      	lsrs	r2, r3
   32638:	1ac3      	subs	r3, r0, r3
   3263a:	409d      	lsls	r5, r3
   3263c:	002b      	movs	r3, r5
   3263e:	1e5d      	subs	r5, r3, #1
   32640:	41ab      	sbcs	r3, r5
   32642:	4313      	orrs	r3, r2
   32644:	075a      	lsls	r2, r3, #29
   32646:	d004      	beq.n	32652 <__aeabi_fmul+0x20a>
   32648:	220f      	movs	r2, #15
   3264a:	401a      	ands	r2, r3
   3264c:	2a04      	cmp	r2, #4
   3264e:	d000      	beq.n	32652 <__aeabi_fmul+0x20a>
   32650:	3304      	adds	r3, #4
   32652:	015a      	lsls	r2, r3, #5
   32654:	d504      	bpl.n	32660 <__aeabi_fmul+0x218>
   32656:	2401      	movs	r4, #1
   32658:	2201      	movs	r2, #1
   3265a:	400c      	ands	r4, r1
   3265c:	2000      	movs	r0, #0
   3265e:	e73d      	b.n	324dc <__aeabi_fmul+0x94>
   32660:	2401      	movs	r4, #1
   32662:	019b      	lsls	r3, r3, #6
   32664:	0a58      	lsrs	r0, r3, #9
   32666:	400c      	ands	r4, r1
   32668:	2200      	movs	r2, #0
   3266a:	e737      	b.n	324dc <__aeabi_fmul+0x94>
   3266c:	2080      	movs	r0, #128	; 0x80
   3266e:	2401      	movs	r4, #1
   32670:	03c0      	lsls	r0, r0, #15
   32672:	4328      	orrs	r0, r5
   32674:	0240      	lsls	r0, r0, #9
   32676:	0a40      	lsrs	r0, r0, #9
   32678:	400c      	ands	r4, r1
   3267a:	22ff      	movs	r2, #255	; 0xff
   3267c:	e72e      	b.n	324dc <__aeabi_fmul+0x94>
   3267e:	46c0      	nop			; (mov r8, r8)
   32680:	00039ae8 	.word	0x00039ae8
   32684:	f7ffffff 	.word	0xf7ffffff

00032688 <__aeabi_fsub>:
   32688:	b5f0      	push	{r4, r5, r6, r7, lr}
   3268a:	464f      	mov	r7, r9
   3268c:	46d6      	mov	lr, sl
   3268e:	4646      	mov	r6, r8
   32690:	0044      	lsls	r4, r0, #1
   32692:	b5c0      	push	{r6, r7, lr}
   32694:	0fc2      	lsrs	r2, r0, #31
   32696:	0247      	lsls	r7, r0, #9
   32698:	0248      	lsls	r0, r1, #9
   3269a:	0a40      	lsrs	r0, r0, #9
   3269c:	4684      	mov	ip, r0
   3269e:	4666      	mov	r6, ip
   326a0:	0a7b      	lsrs	r3, r7, #9
   326a2:	0048      	lsls	r0, r1, #1
   326a4:	0fc9      	lsrs	r1, r1, #31
   326a6:	469a      	mov	sl, r3
   326a8:	0e24      	lsrs	r4, r4, #24
   326aa:	0015      	movs	r5, r2
   326ac:	00db      	lsls	r3, r3, #3
   326ae:	0e00      	lsrs	r0, r0, #24
   326b0:	4689      	mov	r9, r1
   326b2:	00f6      	lsls	r6, r6, #3
   326b4:	28ff      	cmp	r0, #255	; 0xff
   326b6:	d100      	bne.n	326ba <__aeabi_fsub+0x32>
   326b8:	e08f      	b.n	327da <__aeabi_fsub+0x152>
   326ba:	2101      	movs	r1, #1
   326bc:	464f      	mov	r7, r9
   326be:	404f      	eors	r7, r1
   326c0:	0039      	movs	r1, r7
   326c2:	4291      	cmp	r1, r2
   326c4:	d066      	beq.n	32794 <__aeabi_fsub+0x10c>
   326c6:	1a22      	subs	r2, r4, r0
   326c8:	2a00      	cmp	r2, #0
   326ca:	dc00      	bgt.n	326ce <__aeabi_fsub+0x46>
   326cc:	e09d      	b.n	3280a <__aeabi_fsub+0x182>
   326ce:	2800      	cmp	r0, #0
   326d0:	d13d      	bne.n	3274e <__aeabi_fsub+0xc6>
   326d2:	2e00      	cmp	r6, #0
   326d4:	d100      	bne.n	326d8 <__aeabi_fsub+0x50>
   326d6:	e08b      	b.n	327f0 <__aeabi_fsub+0x168>
   326d8:	1e51      	subs	r1, r2, #1
   326da:	2900      	cmp	r1, #0
   326dc:	d000      	beq.n	326e0 <__aeabi_fsub+0x58>
   326de:	e0b5      	b.n	3284c <__aeabi_fsub+0x1c4>
   326e0:	2401      	movs	r4, #1
   326e2:	1b9b      	subs	r3, r3, r6
   326e4:	015a      	lsls	r2, r3, #5
   326e6:	d544      	bpl.n	32772 <__aeabi_fsub+0xea>
   326e8:	019b      	lsls	r3, r3, #6
   326ea:	099f      	lsrs	r7, r3, #6
   326ec:	0038      	movs	r0, r7
   326ee:	f001 fe57 	bl	343a0 <__clzsi2>
   326f2:	3805      	subs	r0, #5
   326f4:	4087      	lsls	r7, r0
   326f6:	4284      	cmp	r4, r0
   326f8:	dd00      	ble.n	326fc <__aeabi_fsub+0x74>
   326fa:	e096      	b.n	3282a <__aeabi_fsub+0x1a2>
   326fc:	1b04      	subs	r4, r0, r4
   326fe:	003a      	movs	r2, r7
   32700:	2020      	movs	r0, #32
   32702:	3401      	adds	r4, #1
   32704:	40e2      	lsrs	r2, r4
   32706:	1b04      	subs	r4, r0, r4
   32708:	40a7      	lsls	r7, r4
   3270a:	003b      	movs	r3, r7
   3270c:	1e5f      	subs	r7, r3, #1
   3270e:	41bb      	sbcs	r3, r7
   32710:	2400      	movs	r4, #0
   32712:	4313      	orrs	r3, r2
   32714:	075a      	lsls	r2, r3, #29
   32716:	d004      	beq.n	32722 <__aeabi_fsub+0x9a>
   32718:	220f      	movs	r2, #15
   3271a:	401a      	ands	r2, r3
   3271c:	2a04      	cmp	r2, #4
   3271e:	d000      	beq.n	32722 <__aeabi_fsub+0x9a>
   32720:	3304      	adds	r3, #4
   32722:	015a      	lsls	r2, r3, #5
   32724:	d527      	bpl.n	32776 <__aeabi_fsub+0xee>
   32726:	3401      	adds	r4, #1
   32728:	2cff      	cmp	r4, #255	; 0xff
   3272a:	d100      	bne.n	3272e <__aeabi_fsub+0xa6>
   3272c:	e079      	b.n	32822 <__aeabi_fsub+0x19a>
   3272e:	2201      	movs	r2, #1
   32730:	019b      	lsls	r3, r3, #6
   32732:	0a5b      	lsrs	r3, r3, #9
   32734:	b2e4      	uxtb	r4, r4
   32736:	402a      	ands	r2, r5
   32738:	025b      	lsls	r3, r3, #9
   3273a:	05e4      	lsls	r4, r4, #23
   3273c:	0a58      	lsrs	r0, r3, #9
   3273e:	07d2      	lsls	r2, r2, #31
   32740:	4320      	orrs	r0, r4
   32742:	4310      	orrs	r0, r2
   32744:	bc1c      	pop	{r2, r3, r4}
   32746:	4690      	mov	r8, r2
   32748:	4699      	mov	r9, r3
   3274a:	46a2      	mov	sl, r4
   3274c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3274e:	2cff      	cmp	r4, #255	; 0xff
   32750:	d0e0      	beq.n	32714 <__aeabi_fsub+0x8c>
   32752:	2180      	movs	r1, #128	; 0x80
   32754:	04c9      	lsls	r1, r1, #19
   32756:	430e      	orrs	r6, r1
   32758:	2a1b      	cmp	r2, #27
   3275a:	dc7b      	bgt.n	32854 <__aeabi_fsub+0x1cc>
   3275c:	0031      	movs	r1, r6
   3275e:	2020      	movs	r0, #32
   32760:	40d1      	lsrs	r1, r2
   32762:	1a82      	subs	r2, r0, r2
   32764:	4096      	lsls	r6, r2
   32766:	1e72      	subs	r2, r6, #1
   32768:	4196      	sbcs	r6, r2
   3276a:	430e      	orrs	r6, r1
   3276c:	1b9b      	subs	r3, r3, r6
   3276e:	015a      	lsls	r2, r3, #5
   32770:	d4ba      	bmi.n	326e8 <__aeabi_fsub+0x60>
   32772:	075a      	lsls	r2, r3, #29
   32774:	d1d0      	bne.n	32718 <__aeabi_fsub+0x90>
   32776:	2201      	movs	r2, #1
   32778:	08df      	lsrs	r7, r3, #3
   3277a:	402a      	ands	r2, r5
   3277c:	2cff      	cmp	r4, #255	; 0xff
   3277e:	d133      	bne.n	327e8 <__aeabi_fsub+0x160>
   32780:	2f00      	cmp	r7, #0
   32782:	d100      	bne.n	32786 <__aeabi_fsub+0xfe>
   32784:	e0a8      	b.n	328d8 <__aeabi_fsub+0x250>
   32786:	2380      	movs	r3, #128	; 0x80
   32788:	03db      	lsls	r3, r3, #15
   3278a:	433b      	orrs	r3, r7
   3278c:	025b      	lsls	r3, r3, #9
   3278e:	0a5b      	lsrs	r3, r3, #9
   32790:	24ff      	movs	r4, #255	; 0xff
   32792:	e7d1      	b.n	32738 <__aeabi_fsub+0xb0>
   32794:	1a21      	subs	r1, r4, r0
   32796:	2900      	cmp	r1, #0
   32798:	dd4c      	ble.n	32834 <__aeabi_fsub+0x1ac>
   3279a:	2800      	cmp	r0, #0
   3279c:	d02a      	beq.n	327f4 <__aeabi_fsub+0x16c>
   3279e:	2cff      	cmp	r4, #255	; 0xff
   327a0:	d0b8      	beq.n	32714 <__aeabi_fsub+0x8c>
   327a2:	2080      	movs	r0, #128	; 0x80
   327a4:	04c0      	lsls	r0, r0, #19
   327a6:	4306      	orrs	r6, r0
   327a8:	291b      	cmp	r1, #27
   327aa:	dd00      	ble.n	327ae <__aeabi_fsub+0x126>
   327ac:	e0af      	b.n	3290e <__aeabi_fsub+0x286>
   327ae:	0030      	movs	r0, r6
   327b0:	2720      	movs	r7, #32
   327b2:	40c8      	lsrs	r0, r1
   327b4:	1a79      	subs	r1, r7, r1
   327b6:	408e      	lsls	r6, r1
   327b8:	1e71      	subs	r1, r6, #1
   327ba:	418e      	sbcs	r6, r1
   327bc:	4306      	orrs	r6, r0
   327be:	199b      	adds	r3, r3, r6
   327c0:	0159      	lsls	r1, r3, #5
   327c2:	d5d6      	bpl.n	32772 <__aeabi_fsub+0xea>
   327c4:	3401      	adds	r4, #1
   327c6:	2cff      	cmp	r4, #255	; 0xff
   327c8:	d100      	bne.n	327cc <__aeabi_fsub+0x144>
   327ca:	e085      	b.n	328d8 <__aeabi_fsub+0x250>
   327cc:	2201      	movs	r2, #1
   327ce:	497a      	ldr	r1, [pc, #488]	; (329b8 <__aeabi_fsub+0x330>)
   327d0:	401a      	ands	r2, r3
   327d2:	085b      	lsrs	r3, r3, #1
   327d4:	400b      	ands	r3, r1
   327d6:	4313      	orrs	r3, r2
   327d8:	e79c      	b.n	32714 <__aeabi_fsub+0x8c>
   327da:	2e00      	cmp	r6, #0
   327dc:	d000      	beq.n	327e0 <__aeabi_fsub+0x158>
   327de:	e770      	b.n	326c2 <__aeabi_fsub+0x3a>
   327e0:	e76b      	b.n	326ba <__aeabi_fsub+0x32>
   327e2:	1e3b      	subs	r3, r7, #0
   327e4:	d1c5      	bne.n	32772 <__aeabi_fsub+0xea>
   327e6:	2200      	movs	r2, #0
   327e8:	027b      	lsls	r3, r7, #9
   327ea:	0a5b      	lsrs	r3, r3, #9
   327ec:	b2e4      	uxtb	r4, r4
   327ee:	e7a3      	b.n	32738 <__aeabi_fsub+0xb0>
   327f0:	0014      	movs	r4, r2
   327f2:	e78f      	b.n	32714 <__aeabi_fsub+0x8c>
   327f4:	2e00      	cmp	r6, #0
   327f6:	d04d      	beq.n	32894 <__aeabi_fsub+0x20c>
   327f8:	1e48      	subs	r0, r1, #1
   327fa:	2800      	cmp	r0, #0
   327fc:	d157      	bne.n	328ae <__aeabi_fsub+0x226>
   327fe:	199b      	adds	r3, r3, r6
   32800:	2401      	movs	r4, #1
   32802:	015a      	lsls	r2, r3, #5
   32804:	d5b5      	bpl.n	32772 <__aeabi_fsub+0xea>
   32806:	2402      	movs	r4, #2
   32808:	e7e0      	b.n	327cc <__aeabi_fsub+0x144>
   3280a:	2a00      	cmp	r2, #0
   3280c:	d125      	bne.n	3285a <__aeabi_fsub+0x1d2>
   3280e:	1c62      	adds	r2, r4, #1
   32810:	b2d2      	uxtb	r2, r2
   32812:	2a01      	cmp	r2, #1
   32814:	dd72      	ble.n	328fc <__aeabi_fsub+0x274>
   32816:	1b9f      	subs	r7, r3, r6
   32818:	017a      	lsls	r2, r7, #5
   3281a:	d535      	bpl.n	32888 <__aeabi_fsub+0x200>
   3281c:	1af7      	subs	r7, r6, r3
   3281e:	000d      	movs	r5, r1
   32820:	e764      	b.n	326ec <__aeabi_fsub+0x64>
   32822:	2201      	movs	r2, #1
   32824:	2300      	movs	r3, #0
   32826:	402a      	ands	r2, r5
   32828:	e786      	b.n	32738 <__aeabi_fsub+0xb0>
   3282a:	003b      	movs	r3, r7
   3282c:	4a63      	ldr	r2, [pc, #396]	; (329bc <__aeabi_fsub+0x334>)
   3282e:	1a24      	subs	r4, r4, r0
   32830:	4013      	ands	r3, r2
   32832:	e76f      	b.n	32714 <__aeabi_fsub+0x8c>
   32834:	2900      	cmp	r1, #0
   32836:	d16c      	bne.n	32912 <__aeabi_fsub+0x28a>
   32838:	1c61      	adds	r1, r4, #1
   3283a:	b2c8      	uxtb	r0, r1
   3283c:	2801      	cmp	r0, #1
   3283e:	dd4e      	ble.n	328de <__aeabi_fsub+0x256>
   32840:	29ff      	cmp	r1, #255	; 0xff
   32842:	d049      	beq.n	328d8 <__aeabi_fsub+0x250>
   32844:	199b      	adds	r3, r3, r6
   32846:	085b      	lsrs	r3, r3, #1
   32848:	000c      	movs	r4, r1
   3284a:	e763      	b.n	32714 <__aeabi_fsub+0x8c>
   3284c:	2aff      	cmp	r2, #255	; 0xff
   3284e:	d041      	beq.n	328d4 <__aeabi_fsub+0x24c>
   32850:	000a      	movs	r2, r1
   32852:	e781      	b.n	32758 <__aeabi_fsub+0xd0>
   32854:	2601      	movs	r6, #1
   32856:	1b9b      	subs	r3, r3, r6
   32858:	e789      	b.n	3276e <__aeabi_fsub+0xe6>
   3285a:	2c00      	cmp	r4, #0
   3285c:	d01c      	beq.n	32898 <__aeabi_fsub+0x210>
   3285e:	28ff      	cmp	r0, #255	; 0xff
   32860:	d021      	beq.n	328a6 <__aeabi_fsub+0x21e>
   32862:	2480      	movs	r4, #128	; 0x80
   32864:	04e4      	lsls	r4, r4, #19
   32866:	4252      	negs	r2, r2
   32868:	4323      	orrs	r3, r4
   3286a:	2a1b      	cmp	r2, #27
   3286c:	dd00      	ble.n	32870 <__aeabi_fsub+0x1e8>
   3286e:	e096      	b.n	3299e <__aeabi_fsub+0x316>
   32870:	001c      	movs	r4, r3
   32872:	2520      	movs	r5, #32
   32874:	40d4      	lsrs	r4, r2
   32876:	1aaa      	subs	r2, r5, r2
   32878:	4093      	lsls	r3, r2
   3287a:	1e5a      	subs	r2, r3, #1
   3287c:	4193      	sbcs	r3, r2
   3287e:	4323      	orrs	r3, r4
   32880:	1af3      	subs	r3, r6, r3
   32882:	0004      	movs	r4, r0
   32884:	000d      	movs	r5, r1
   32886:	e72d      	b.n	326e4 <__aeabi_fsub+0x5c>
   32888:	2f00      	cmp	r7, #0
   3288a:	d000      	beq.n	3288e <__aeabi_fsub+0x206>
   3288c:	e72e      	b.n	326ec <__aeabi_fsub+0x64>
   3288e:	2200      	movs	r2, #0
   32890:	2400      	movs	r4, #0
   32892:	e7a9      	b.n	327e8 <__aeabi_fsub+0x160>
   32894:	000c      	movs	r4, r1
   32896:	e73d      	b.n	32714 <__aeabi_fsub+0x8c>
   32898:	2b00      	cmp	r3, #0
   3289a:	d058      	beq.n	3294e <__aeabi_fsub+0x2c6>
   3289c:	43d2      	mvns	r2, r2
   3289e:	2a00      	cmp	r2, #0
   328a0:	d0ee      	beq.n	32880 <__aeabi_fsub+0x1f8>
   328a2:	28ff      	cmp	r0, #255	; 0xff
   328a4:	d1e1      	bne.n	3286a <__aeabi_fsub+0x1e2>
   328a6:	0033      	movs	r3, r6
   328a8:	24ff      	movs	r4, #255	; 0xff
   328aa:	000d      	movs	r5, r1
   328ac:	e732      	b.n	32714 <__aeabi_fsub+0x8c>
   328ae:	29ff      	cmp	r1, #255	; 0xff
   328b0:	d010      	beq.n	328d4 <__aeabi_fsub+0x24c>
   328b2:	0001      	movs	r1, r0
   328b4:	e778      	b.n	327a8 <__aeabi_fsub+0x120>
   328b6:	2b00      	cmp	r3, #0
   328b8:	d06e      	beq.n	32998 <__aeabi_fsub+0x310>
   328ba:	24ff      	movs	r4, #255	; 0xff
   328bc:	2e00      	cmp	r6, #0
   328be:	d100      	bne.n	328c2 <__aeabi_fsub+0x23a>
   328c0:	e728      	b.n	32714 <__aeabi_fsub+0x8c>
   328c2:	2280      	movs	r2, #128	; 0x80
   328c4:	4651      	mov	r1, sl
   328c6:	03d2      	lsls	r2, r2, #15
   328c8:	4211      	tst	r1, r2
   328ca:	d003      	beq.n	328d4 <__aeabi_fsub+0x24c>
   328cc:	4661      	mov	r1, ip
   328ce:	4211      	tst	r1, r2
   328d0:	d100      	bne.n	328d4 <__aeabi_fsub+0x24c>
   328d2:	0033      	movs	r3, r6
   328d4:	24ff      	movs	r4, #255	; 0xff
   328d6:	e71d      	b.n	32714 <__aeabi_fsub+0x8c>
   328d8:	24ff      	movs	r4, #255	; 0xff
   328da:	2300      	movs	r3, #0
   328dc:	e72c      	b.n	32738 <__aeabi_fsub+0xb0>
   328de:	2c00      	cmp	r4, #0
   328e0:	d1e9      	bne.n	328b6 <__aeabi_fsub+0x22e>
   328e2:	2b00      	cmp	r3, #0
   328e4:	d063      	beq.n	329ae <__aeabi_fsub+0x326>
   328e6:	2e00      	cmp	r6, #0
   328e8:	d100      	bne.n	328ec <__aeabi_fsub+0x264>
   328ea:	e713      	b.n	32714 <__aeabi_fsub+0x8c>
   328ec:	199b      	adds	r3, r3, r6
   328ee:	015a      	lsls	r2, r3, #5
   328f0:	d400      	bmi.n	328f4 <__aeabi_fsub+0x26c>
   328f2:	e73e      	b.n	32772 <__aeabi_fsub+0xea>
   328f4:	4a31      	ldr	r2, [pc, #196]	; (329bc <__aeabi_fsub+0x334>)
   328f6:	000c      	movs	r4, r1
   328f8:	4013      	ands	r3, r2
   328fa:	e70b      	b.n	32714 <__aeabi_fsub+0x8c>
   328fc:	2c00      	cmp	r4, #0
   328fe:	d11e      	bne.n	3293e <__aeabi_fsub+0x2b6>
   32900:	2b00      	cmp	r3, #0
   32902:	d12f      	bne.n	32964 <__aeabi_fsub+0x2dc>
   32904:	2e00      	cmp	r6, #0
   32906:	d04f      	beq.n	329a8 <__aeabi_fsub+0x320>
   32908:	0033      	movs	r3, r6
   3290a:	000d      	movs	r5, r1
   3290c:	e702      	b.n	32714 <__aeabi_fsub+0x8c>
   3290e:	2601      	movs	r6, #1
   32910:	e755      	b.n	327be <__aeabi_fsub+0x136>
   32912:	2c00      	cmp	r4, #0
   32914:	d11f      	bne.n	32956 <__aeabi_fsub+0x2ce>
   32916:	2b00      	cmp	r3, #0
   32918:	d043      	beq.n	329a2 <__aeabi_fsub+0x31a>
   3291a:	43c9      	mvns	r1, r1
   3291c:	2900      	cmp	r1, #0
   3291e:	d00b      	beq.n	32938 <__aeabi_fsub+0x2b0>
   32920:	28ff      	cmp	r0, #255	; 0xff
   32922:	d039      	beq.n	32998 <__aeabi_fsub+0x310>
   32924:	291b      	cmp	r1, #27
   32926:	dc44      	bgt.n	329b2 <__aeabi_fsub+0x32a>
   32928:	001c      	movs	r4, r3
   3292a:	2720      	movs	r7, #32
   3292c:	40cc      	lsrs	r4, r1
   3292e:	1a79      	subs	r1, r7, r1
   32930:	408b      	lsls	r3, r1
   32932:	1e59      	subs	r1, r3, #1
   32934:	418b      	sbcs	r3, r1
   32936:	4323      	orrs	r3, r4
   32938:	199b      	adds	r3, r3, r6
   3293a:	0004      	movs	r4, r0
   3293c:	e740      	b.n	327c0 <__aeabi_fsub+0x138>
   3293e:	2b00      	cmp	r3, #0
   32940:	d11a      	bne.n	32978 <__aeabi_fsub+0x2f0>
   32942:	2e00      	cmp	r6, #0
   32944:	d124      	bne.n	32990 <__aeabi_fsub+0x308>
   32946:	2780      	movs	r7, #128	; 0x80
   32948:	2200      	movs	r2, #0
   3294a:	03ff      	lsls	r7, r7, #15
   3294c:	e71b      	b.n	32786 <__aeabi_fsub+0xfe>
   3294e:	0033      	movs	r3, r6
   32950:	0004      	movs	r4, r0
   32952:	000d      	movs	r5, r1
   32954:	e6de      	b.n	32714 <__aeabi_fsub+0x8c>
   32956:	28ff      	cmp	r0, #255	; 0xff
   32958:	d01e      	beq.n	32998 <__aeabi_fsub+0x310>
   3295a:	2480      	movs	r4, #128	; 0x80
   3295c:	04e4      	lsls	r4, r4, #19
   3295e:	4249      	negs	r1, r1
   32960:	4323      	orrs	r3, r4
   32962:	e7df      	b.n	32924 <__aeabi_fsub+0x29c>
   32964:	2e00      	cmp	r6, #0
   32966:	d100      	bne.n	3296a <__aeabi_fsub+0x2e2>
   32968:	e6d4      	b.n	32714 <__aeabi_fsub+0x8c>
   3296a:	1b9f      	subs	r7, r3, r6
   3296c:	017a      	lsls	r2, r7, #5
   3296e:	d400      	bmi.n	32972 <__aeabi_fsub+0x2ea>
   32970:	e737      	b.n	327e2 <__aeabi_fsub+0x15a>
   32972:	1af3      	subs	r3, r6, r3
   32974:	000d      	movs	r5, r1
   32976:	e6cd      	b.n	32714 <__aeabi_fsub+0x8c>
   32978:	24ff      	movs	r4, #255	; 0xff
   3297a:	2e00      	cmp	r6, #0
   3297c:	d100      	bne.n	32980 <__aeabi_fsub+0x2f8>
   3297e:	e6c9      	b.n	32714 <__aeabi_fsub+0x8c>
   32980:	2280      	movs	r2, #128	; 0x80
   32982:	4650      	mov	r0, sl
   32984:	03d2      	lsls	r2, r2, #15
   32986:	4210      	tst	r0, r2
   32988:	d0a4      	beq.n	328d4 <__aeabi_fsub+0x24c>
   3298a:	4660      	mov	r0, ip
   3298c:	4210      	tst	r0, r2
   3298e:	d1a1      	bne.n	328d4 <__aeabi_fsub+0x24c>
   32990:	0033      	movs	r3, r6
   32992:	000d      	movs	r5, r1
   32994:	24ff      	movs	r4, #255	; 0xff
   32996:	e6bd      	b.n	32714 <__aeabi_fsub+0x8c>
   32998:	0033      	movs	r3, r6
   3299a:	24ff      	movs	r4, #255	; 0xff
   3299c:	e6ba      	b.n	32714 <__aeabi_fsub+0x8c>
   3299e:	2301      	movs	r3, #1
   329a0:	e76e      	b.n	32880 <__aeabi_fsub+0x1f8>
   329a2:	0033      	movs	r3, r6
   329a4:	0004      	movs	r4, r0
   329a6:	e6b5      	b.n	32714 <__aeabi_fsub+0x8c>
   329a8:	2700      	movs	r7, #0
   329aa:	2200      	movs	r2, #0
   329ac:	e71c      	b.n	327e8 <__aeabi_fsub+0x160>
   329ae:	0033      	movs	r3, r6
   329b0:	e6b0      	b.n	32714 <__aeabi_fsub+0x8c>
   329b2:	2301      	movs	r3, #1
   329b4:	e7c0      	b.n	32938 <__aeabi_fsub+0x2b0>
   329b6:	46c0      	nop			; (mov r8, r8)
   329b8:	7dffffff 	.word	0x7dffffff
   329bc:	fbffffff 	.word	0xfbffffff

000329c0 <__aeabi_f2iz>:
   329c0:	0241      	lsls	r1, r0, #9
   329c2:	0043      	lsls	r3, r0, #1
   329c4:	0fc2      	lsrs	r2, r0, #31
   329c6:	0a49      	lsrs	r1, r1, #9
   329c8:	0e1b      	lsrs	r3, r3, #24
   329ca:	2000      	movs	r0, #0
   329cc:	2b7e      	cmp	r3, #126	; 0x7e
   329ce:	dd0d      	ble.n	329ec <__aeabi_f2iz+0x2c>
   329d0:	2b9d      	cmp	r3, #157	; 0x9d
   329d2:	dc0c      	bgt.n	329ee <__aeabi_f2iz+0x2e>
   329d4:	2080      	movs	r0, #128	; 0x80
   329d6:	0400      	lsls	r0, r0, #16
   329d8:	4301      	orrs	r1, r0
   329da:	2b95      	cmp	r3, #149	; 0x95
   329dc:	dc0a      	bgt.n	329f4 <__aeabi_f2iz+0x34>
   329de:	2096      	movs	r0, #150	; 0x96
   329e0:	1ac3      	subs	r3, r0, r3
   329e2:	40d9      	lsrs	r1, r3
   329e4:	4248      	negs	r0, r1
   329e6:	2a00      	cmp	r2, #0
   329e8:	d100      	bne.n	329ec <__aeabi_f2iz+0x2c>
   329ea:	0008      	movs	r0, r1
   329ec:	4770      	bx	lr
   329ee:	4b03      	ldr	r3, [pc, #12]	; (329fc <__aeabi_f2iz+0x3c>)
   329f0:	18d0      	adds	r0, r2, r3
   329f2:	e7fb      	b.n	329ec <__aeabi_f2iz+0x2c>
   329f4:	3b96      	subs	r3, #150	; 0x96
   329f6:	4099      	lsls	r1, r3
   329f8:	e7f4      	b.n	329e4 <__aeabi_f2iz+0x24>
   329fa:	46c0      	nop			; (mov r8, r8)
   329fc:	7fffffff 	.word	0x7fffffff

00032a00 <__aeabi_i2f>:
   32a00:	b570      	push	{r4, r5, r6, lr}
   32a02:	2800      	cmp	r0, #0
   32a04:	d030      	beq.n	32a68 <__aeabi_i2f+0x68>
   32a06:	17c3      	asrs	r3, r0, #31
   32a08:	18c4      	adds	r4, r0, r3
   32a0a:	405c      	eors	r4, r3
   32a0c:	0fc5      	lsrs	r5, r0, #31
   32a0e:	0020      	movs	r0, r4
   32a10:	f001 fcc6 	bl	343a0 <__clzsi2>
   32a14:	239e      	movs	r3, #158	; 0x9e
   32a16:	1a1b      	subs	r3, r3, r0
   32a18:	2b96      	cmp	r3, #150	; 0x96
   32a1a:	dc0d      	bgt.n	32a38 <__aeabi_i2f+0x38>
   32a1c:	2296      	movs	r2, #150	; 0x96
   32a1e:	1ad2      	subs	r2, r2, r3
   32a20:	4094      	lsls	r4, r2
   32a22:	002a      	movs	r2, r5
   32a24:	0264      	lsls	r4, r4, #9
   32a26:	0a64      	lsrs	r4, r4, #9
   32a28:	b2db      	uxtb	r3, r3
   32a2a:	0264      	lsls	r4, r4, #9
   32a2c:	05db      	lsls	r3, r3, #23
   32a2e:	0a60      	lsrs	r0, r4, #9
   32a30:	07d2      	lsls	r2, r2, #31
   32a32:	4318      	orrs	r0, r3
   32a34:	4310      	orrs	r0, r2
   32a36:	bd70      	pop	{r4, r5, r6, pc}
   32a38:	2b99      	cmp	r3, #153	; 0x99
   32a3a:	dc19      	bgt.n	32a70 <__aeabi_i2f+0x70>
   32a3c:	2299      	movs	r2, #153	; 0x99
   32a3e:	1ad2      	subs	r2, r2, r3
   32a40:	2a00      	cmp	r2, #0
   32a42:	dd29      	ble.n	32a98 <__aeabi_i2f+0x98>
   32a44:	4094      	lsls	r4, r2
   32a46:	0022      	movs	r2, r4
   32a48:	4c14      	ldr	r4, [pc, #80]	; (32a9c <__aeabi_i2f+0x9c>)
   32a4a:	4014      	ands	r4, r2
   32a4c:	0751      	lsls	r1, r2, #29
   32a4e:	d004      	beq.n	32a5a <__aeabi_i2f+0x5a>
   32a50:	210f      	movs	r1, #15
   32a52:	400a      	ands	r2, r1
   32a54:	2a04      	cmp	r2, #4
   32a56:	d000      	beq.n	32a5a <__aeabi_i2f+0x5a>
   32a58:	3404      	adds	r4, #4
   32a5a:	0162      	lsls	r2, r4, #5
   32a5c:	d413      	bmi.n	32a86 <__aeabi_i2f+0x86>
   32a5e:	01a4      	lsls	r4, r4, #6
   32a60:	0a64      	lsrs	r4, r4, #9
   32a62:	b2db      	uxtb	r3, r3
   32a64:	002a      	movs	r2, r5
   32a66:	e7e0      	b.n	32a2a <__aeabi_i2f+0x2a>
   32a68:	2200      	movs	r2, #0
   32a6a:	2300      	movs	r3, #0
   32a6c:	2400      	movs	r4, #0
   32a6e:	e7dc      	b.n	32a2a <__aeabi_i2f+0x2a>
   32a70:	2205      	movs	r2, #5
   32a72:	0021      	movs	r1, r4
   32a74:	1a12      	subs	r2, r2, r0
   32a76:	40d1      	lsrs	r1, r2
   32a78:	22b9      	movs	r2, #185	; 0xb9
   32a7a:	1ad2      	subs	r2, r2, r3
   32a7c:	4094      	lsls	r4, r2
   32a7e:	1e62      	subs	r2, r4, #1
   32a80:	4194      	sbcs	r4, r2
   32a82:	430c      	orrs	r4, r1
   32a84:	e7da      	b.n	32a3c <__aeabi_i2f+0x3c>
   32a86:	4b05      	ldr	r3, [pc, #20]	; (32a9c <__aeabi_i2f+0x9c>)
   32a88:	002a      	movs	r2, r5
   32a8a:	401c      	ands	r4, r3
   32a8c:	239f      	movs	r3, #159	; 0x9f
   32a8e:	01a4      	lsls	r4, r4, #6
   32a90:	1a1b      	subs	r3, r3, r0
   32a92:	0a64      	lsrs	r4, r4, #9
   32a94:	b2db      	uxtb	r3, r3
   32a96:	e7c8      	b.n	32a2a <__aeabi_i2f+0x2a>
   32a98:	0022      	movs	r2, r4
   32a9a:	e7d5      	b.n	32a48 <__aeabi_i2f+0x48>
   32a9c:	fbffffff 	.word	0xfbffffff

00032aa0 <__aeabi_dadd>:
   32aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   32aa2:	4645      	mov	r5, r8
   32aa4:	46de      	mov	lr, fp
   32aa6:	4657      	mov	r7, sl
   32aa8:	464e      	mov	r6, r9
   32aaa:	030c      	lsls	r4, r1, #12
   32aac:	b5e0      	push	{r5, r6, r7, lr}
   32aae:	004e      	lsls	r6, r1, #1
   32ab0:	0fc9      	lsrs	r1, r1, #31
   32ab2:	4688      	mov	r8, r1
   32ab4:	000d      	movs	r5, r1
   32ab6:	0a61      	lsrs	r1, r4, #9
   32ab8:	0f44      	lsrs	r4, r0, #29
   32aba:	430c      	orrs	r4, r1
   32abc:	00c7      	lsls	r7, r0, #3
   32abe:	0319      	lsls	r1, r3, #12
   32ac0:	0058      	lsls	r0, r3, #1
   32ac2:	0fdb      	lsrs	r3, r3, #31
   32ac4:	469b      	mov	fp, r3
   32ac6:	0a4b      	lsrs	r3, r1, #9
   32ac8:	0f51      	lsrs	r1, r2, #29
   32aca:	430b      	orrs	r3, r1
   32acc:	0d76      	lsrs	r6, r6, #21
   32ace:	0d40      	lsrs	r0, r0, #21
   32ad0:	0019      	movs	r1, r3
   32ad2:	00d2      	lsls	r2, r2, #3
   32ad4:	45d8      	cmp	r8, fp
   32ad6:	d100      	bne.n	32ada <__aeabi_dadd+0x3a>
   32ad8:	e0ae      	b.n	32c38 <__aeabi_dadd+0x198>
   32ada:	1a35      	subs	r5, r6, r0
   32adc:	2d00      	cmp	r5, #0
   32ade:	dc00      	bgt.n	32ae2 <__aeabi_dadd+0x42>
   32ae0:	e0f6      	b.n	32cd0 <__aeabi_dadd+0x230>
   32ae2:	2800      	cmp	r0, #0
   32ae4:	d10f      	bne.n	32b06 <__aeabi_dadd+0x66>
   32ae6:	4313      	orrs	r3, r2
   32ae8:	d100      	bne.n	32aec <__aeabi_dadd+0x4c>
   32aea:	e0db      	b.n	32ca4 <__aeabi_dadd+0x204>
   32aec:	1e6b      	subs	r3, r5, #1
   32aee:	2b00      	cmp	r3, #0
   32af0:	d000      	beq.n	32af4 <__aeabi_dadd+0x54>
   32af2:	e137      	b.n	32d64 <__aeabi_dadd+0x2c4>
   32af4:	1aba      	subs	r2, r7, r2
   32af6:	4297      	cmp	r7, r2
   32af8:	41bf      	sbcs	r7, r7
   32afa:	1a64      	subs	r4, r4, r1
   32afc:	427f      	negs	r7, r7
   32afe:	1be4      	subs	r4, r4, r7
   32b00:	2601      	movs	r6, #1
   32b02:	0017      	movs	r7, r2
   32b04:	e024      	b.n	32b50 <__aeabi_dadd+0xb0>
   32b06:	4bc6      	ldr	r3, [pc, #792]	; (32e20 <__aeabi_dadd+0x380>)
   32b08:	429e      	cmp	r6, r3
   32b0a:	d04d      	beq.n	32ba8 <__aeabi_dadd+0x108>
   32b0c:	2380      	movs	r3, #128	; 0x80
   32b0e:	041b      	lsls	r3, r3, #16
   32b10:	4319      	orrs	r1, r3
   32b12:	2d38      	cmp	r5, #56	; 0x38
   32b14:	dd00      	ble.n	32b18 <__aeabi_dadd+0x78>
   32b16:	e107      	b.n	32d28 <__aeabi_dadd+0x288>
   32b18:	2d1f      	cmp	r5, #31
   32b1a:	dd00      	ble.n	32b1e <__aeabi_dadd+0x7e>
   32b1c:	e138      	b.n	32d90 <__aeabi_dadd+0x2f0>
   32b1e:	2020      	movs	r0, #32
   32b20:	1b43      	subs	r3, r0, r5
   32b22:	469a      	mov	sl, r3
   32b24:	000b      	movs	r3, r1
   32b26:	4650      	mov	r0, sl
   32b28:	4083      	lsls	r3, r0
   32b2a:	4699      	mov	r9, r3
   32b2c:	0013      	movs	r3, r2
   32b2e:	4648      	mov	r0, r9
   32b30:	40eb      	lsrs	r3, r5
   32b32:	4318      	orrs	r0, r3
   32b34:	0003      	movs	r3, r0
   32b36:	4650      	mov	r0, sl
   32b38:	4082      	lsls	r2, r0
   32b3a:	1e50      	subs	r0, r2, #1
   32b3c:	4182      	sbcs	r2, r0
   32b3e:	40e9      	lsrs	r1, r5
   32b40:	431a      	orrs	r2, r3
   32b42:	1aba      	subs	r2, r7, r2
   32b44:	1a61      	subs	r1, r4, r1
   32b46:	4297      	cmp	r7, r2
   32b48:	41a4      	sbcs	r4, r4
   32b4a:	0017      	movs	r7, r2
   32b4c:	4264      	negs	r4, r4
   32b4e:	1b0c      	subs	r4, r1, r4
   32b50:	0223      	lsls	r3, r4, #8
   32b52:	d562      	bpl.n	32c1a <__aeabi_dadd+0x17a>
   32b54:	0264      	lsls	r4, r4, #9
   32b56:	0a65      	lsrs	r5, r4, #9
   32b58:	2d00      	cmp	r5, #0
   32b5a:	d100      	bne.n	32b5e <__aeabi_dadd+0xbe>
   32b5c:	e0df      	b.n	32d1e <__aeabi_dadd+0x27e>
   32b5e:	0028      	movs	r0, r5
   32b60:	f001 fc1e 	bl	343a0 <__clzsi2>
   32b64:	0003      	movs	r3, r0
   32b66:	3b08      	subs	r3, #8
   32b68:	2b1f      	cmp	r3, #31
   32b6a:	dd00      	ble.n	32b6e <__aeabi_dadd+0xce>
   32b6c:	e0d2      	b.n	32d14 <__aeabi_dadd+0x274>
   32b6e:	2220      	movs	r2, #32
   32b70:	003c      	movs	r4, r7
   32b72:	1ad2      	subs	r2, r2, r3
   32b74:	409d      	lsls	r5, r3
   32b76:	40d4      	lsrs	r4, r2
   32b78:	409f      	lsls	r7, r3
   32b7a:	4325      	orrs	r5, r4
   32b7c:	429e      	cmp	r6, r3
   32b7e:	dd00      	ble.n	32b82 <__aeabi_dadd+0xe2>
   32b80:	e0c4      	b.n	32d0c <__aeabi_dadd+0x26c>
   32b82:	1b9e      	subs	r6, r3, r6
   32b84:	1c73      	adds	r3, r6, #1
   32b86:	2b1f      	cmp	r3, #31
   32b88:	dd00      	ble.n	32b8c <__aeabi_dadd+0xec>
   32b8a:	e0f1      	b.n	32d70 <__aeabi_dadd+0x2d0>
   32b8c:	2220      	movs	r2, #32
   32b8e:	0038      	movs	r0, r7
   32b90:	0029      	movs	r1, r5
   32b92:	1ad2      	subs	r2, r2, r3
   32b94:	40d8      	lsrs	r0, r3
   32b96:	4091      	lsls	r1, r2
   32b98:	4097      	lsls	r7, r2
   32b9a:	002c      	movs	r4, r5
   32b9c:	4301      	orrs	r1, r0
   32b9e:	1e78      	subs	r0, r7, #1
   32ba0:	4187      	sbcs	r7, r0
   32ba2:	40dc      	lsrs	r4, r3
   32ba4:	2600      	movs	r6, #0
   32ba6:	430f      	orrs	r7, r1
   32ba8:	077b      	lsls	r3, r7, #29
   32baa:	d009      	beq.n	32bc0 <__aeabi_dadd+0x120>
   32bac:	230f      	movs	r3, #15
   32bae:	403b      	ands	r3, r7
   32bb0:	2b04      	cmp	r3, #4
   32bb2:	d005      	beq.n	32bc0 <__aeabi_dadd+0x120>
   32bb4:	1d3b      	adds	r3, r7, #4
   32bb6:	42bb      	cmp	r3, r7
   32bb8:	41bf      	sbcs	r7, r7
   32bba:	427f      	negs	r7, r7
   32bbc:	19e4      	adds	r4, r4, r7
   32bbe:	001f      	movs	r7, r3
   32bc0:	0223      	lsls	r3, r4, #8
   32bc2:	d52c      	bpl.n	32c1e <__aeabi_dadd+0x17e>
   32bc4:	4b96      	ldr	r3, [pc, #600]	; (32e20 <__aeabi_dadd+0x380>)
   32bc6:	3601      	adds	r6, #1
   32bc8:	429e      	cmp	r6, r3
   32bca:	d100      	bne.n	32bce <__aeabi_dadd+0x12e>
   32bcc:	e09a      	b.n	32d04 <__aeabi_dadd+0x264>
   32bce:	4645      	mov	r5, r8
   32bd0:	4b94      	ldr	r3, [pc, #592]	; (32e24 <__aeabi_dadd+0x384>)
   32bd2:	08ff      	lsrs	r7, r7, #3
   32bd4:	401c      	ands	r4, r3
   32bd6:	0760      	lsls	r0, r4, #29
   32bd8:	0576      	lsls	r6, r6, #21
   32bda:	0264      	lsls	r4, r4, #9
   32bdc:	4307      	orrs	r7, r0
   32bde:	0b24      	lsrs	r4, r4, #12
   32be0:	0d76      	lsrs	r6, r6, #21
   32be2:	2100      	movs	r1, #0
   32be4:	0324      	lsls	r4, r4, #12
   32be6:	0b23      	lsrs	r3, r4, #12
   32be8:	0d0c      	lsrs	r4, r1, #20
   32bea:	4a8f      	ldr	r2, [pc, #572]	; (32e28 <__aeabi_dadd+0x388>)
   32bec:	0524      	lsls	r4, r4, #20
   32bee:	431c      	orrs	r4, r3
   32bf0:	4014      	ands	r4, r2
   32bf2:	0533      	lsls	r3, r6, #20
   32bf4:	4323      	orrs	r3, r4
   32bf6:	005b      	lsls	r3, r3, #1
   32bf8:	07ed      	lsls	r5, r5, #31
   32bfa:	085b      	lsrs	r3, r3, #1
   32bfc:	432b      	orrs	r3, r5
   32bfe:	0038      	movs	r0, r7
   32c00:	0019      	movs	r1, r3
   32c02:	bc3c      	pop	{r2, r3, r4, r5}
   32c04:	4690      	mov	r8, r2
   32c06:	4699      	mov	r9, r3
   32c08:	46a2      	mov	sl, r4
   32c0a:	46ab      	mov	fp, r5
   32c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   32c0e:	4664      	mov	r4, ip
   32c10:	4304      	orrs	r4, r0
   32c12:	d100      	bne.n	32c16 <__aeabi_dadd+0x176>
   32c14:	e211      	b.n	3303a <__aeabi_dadd+0x59a>
   32c16:	0004      	movs	r4, r0
   32c18:	4667      	mov	r7, ip
   32c1a:	077b      	lsls	r3, r7, #29
   32c1c:	d1c6      	bne.n	32bac <__aeabi_dadd+0x10c>
   32c1e:	4645      	mov	r5, r8
   32c20:	0760      	lsls	r0, r4, #29
   32c22:	08ff      	lsrs	r7, r7, #3
   32c24:	4307      	orrs	r7, r0
   32c26:	08e4      	lsrs	r4, r4, #3
   32c28:	4b7d      	ldr	r3, [pc, #500]	; (32e20 <__aeabi_dadd+0x380>)
   32c2a:	429e      	cmp	r6, r3
   32c2c:	d030      	beq.n	32c90 <__aeabi_dadd+0x1f0>
   32c2e:	0324      	lsls	r4, r4, #12
   32c30:	0576      	lsls	r6, r6, #21
   32c32:	0b24      	lsrs	r4, r4, #12
   32c34:	0d76      	lsrs	r6, r6, #21
   32c36:	e7d4      	b.n	32be2 <__aeabi_dadd+0x142>
   32c38:	1a33      	subs	r3, r6, r0
   32c3a:	469a      	mov	sl, r3
   32c3c:	2b00      	cmp	r3, #0
   32c3e:	dd78      	ble.n	32d32 <__aeabi_dadd+0x292>
   32c40:	2800      	cmp	r0, #0
   32c42:	d031      	beq.n	32ca8 <__aeabi_dadd+0x208>
   32c44:	4876      	ldr	r0, [pc, #472]	; (32e20 <__aeabi_dadd+0x380>)
   32c46:	4286      	cmp	r6, r0
   32c48:	d0ae      	beq.n	32ba8 <__aeabi_dadd+0x108>
   32c4a:	2080      	movs	r0, #128	; 0x80
   32c4c:	0400      	lsls	r0, r0, #16
   32c4e:	4301      	orrs	r1, r0
   32c50:	4653      	mov	r3, sl
   32c52:	2b38      	cmp	r3, #56	; 0x38
   32c54:	dc00      	bgt.n	32c58 <__aeabi_dadd+0x1b8>
   32c56:	e0e9      	b.n	32e2c <__aeabi_dadd+0x38c>
   32c58:	430a      	orrs	r2, r1
   32c5a:	1e51      	subs	r1, r2, #1
   32c5c:	418a      	sbcs	r2, r1
   32c5e:	2100      	movs	r1, #0
   32c60:	19d2      	adds	r2, r2, r7
   32c62:	42ba      	cmp	r2, r7
   32c64:	41bf      	sbcs	r7, r7
   32c66:	1909      	adds	r1, r1, r4
   32c68:	427c      	negs	r4, r7
   32c6a:	0017      	movs	r7, r2
   32c6c:	190c      	adds	r4, r1, r4
   32c6e:	0223      	lsls	r3, r4, #8
   32c70:	d5d3      	bpl.n	32c1a <__aeabi_dadd+0x17a>
   32c72:	4b6b      	ldr	r3, [pc, #428]	; (32e20 <__aeabi_dadd+0x380>)
   32c74:	3601      	adds	r6, #1
   32c76:	429e      	cmp	r6, r3
   32c78:	d100      	bne.n	32c7c <__aeabi_dadd+0x1dc>
   32c7a:	e13a      	b.n	32ef2 <__aeabi_dadd+0x452>
   32c7c:	2001      	movs	r0, #1
   32c7e:	4b69      	ldr	r3, [pc, #420]	; (32e24 <__aeabi_dadd+0x384>)
   32c80:	401c      	ands	r4, r3
   32c82:	087b      	lsrs	r3, r7, #1
   32c84:	4007      	ands	r7, r0
   32c86:	431f      	orrs	r7, r3
   32c88:	07e0      	lsls	r0, r4, #31
   32c8a:	4307      	orrs	r7, r0
   32c8c:	0864      	lsrs	r4, r4, #1
   32c8e:	e78b      	b.n	32ba8 <__aeabi_dadd+0x108>
   32c90:	0023      	movs	r3, r4
   32c92:	433b      	orrs	r3, r7
   32c94:	d100      	bne.n	32c98 <__aeabi_dadd+0x1f8>
   32c96:	e1cb      	b.n	33030 <__aeabi_dadd+0x590>
   32c98:	2280      	movs	r2, #128	; 0x80
   32c9a:	0312      	lsls	r2, r2, #12
   32c9c:	4314      	orrs	r4, r2
   32c9e:	0324      	lsls	r4, r4, #12
   32ca0:	0b24      	lsrs	r4, r4, #12
   32ca2:	e79e      	b.n	32be2 <__aeabi_dadd+0x142>
   32ca4:	002e      	movs	r6, r5
   32ca6:	e77f      	b.n	32ba8 <__aeabi_dadd+0x108>
   32ca8:	0008      	movs	r0, r1
   32caa:	4310      	orrs	r0, r2
   32cac:	d100      	bne.n	32cb0 <__aeabi_dadd+0x210>
   32cae:	e0b4      	b.n	32e1a <__aeabi_dadd+0x37a>
   32cb0:	1e58      	subs	r0, r3, #1
   32cb2:	2800      	cmp	r0, #0
   32cb4:	d000      	beq.n	32cb8 <__aeabi_dadd+0x218>
   32cb6:	e0de      	b.n	32e76 <__aeabi_dadd+0x3d6>
   32cb8:	18ba      	adds	r2, r7, r2
   32cba:	42ba      	cmp	r2, r7
   32cbc:	419b      	sbcs	r3, r3
   32cbe:	1864      	adds	r4, r4, r1
   32cc0:	425b      	negs	r3, r3
   32cc2:	18e4      	adds	r4, r4, r3
   32cc4:	0017      	movs	r7, r2
   32cc6:	2601      	movs	r6, #1
   32cc8:	0223      	lsls	r3, r4, #8
   32cca:	d5a6      	bpl.n	32c1a <__aeabi_dadd+0x17a>
   32ccc:	2602      	movs	r6, #2
   32cce:	e7d5      	b.n	32c7c <__aeabi_dadd+0x1dc>
   32cd0:	2d00      	cmp	r5, #0
   32cd2:	d16e      	bne.n	32db2 <__aeabi_dadd+0x312>
   32cd4:	1c70      	adds	r0, r6, #1
   32cd6:	0540      	lsls	r0, r0, #21
   32cd8:	0d40      	lsrs	r0, r0, #21
   32cda:	2801      	cmp	r0, #1
   32cdc:	dc00      	bgt.n	32ce0 <__aeabi_dadd+0x240>
   32cde:	e0f9      	b.n	32ed4 <__aeabi_dadd+0x434>
   32ce0:	1ab8      	subs	r0, r7, r2
   32ce2:	4684      	mov	ip, r0
   32ce4:	4287      	cmp	r7, r0
   32ce6:	4180      	sbcs	r0, r0
   32ce8:	1ae5      	subs	r5, r4, r3
   32cea:	4240      	negs	r0, r0
   32cec:	1a2d      	subs	r5, r5, r0
   32cee:	0228      	lsls	r0, r5, #8
   32cf0:	d400      	bmi.n	32cf4 <__aeabi_dadd+0x254>
   32cf2:	e089      	b.n	32e08 <__aeabi_dadd+0x368>
   32cf4:	1bd7      	subs	r7, r2, r7
   32cf6:	42ba      	cmp	r2, r7
   32cf8:	4192      	sbcs	r2, r2
   32cfa:	1b1c      	subs	r4, r3, r4
   32cfc:	4252      	negs	r2, r2
   32cfe:	1aa5      	subs	r5, r4, r2
   32d00:	46d8      	mov	r8, fp
   32d02:	e729      	b.n	32b58 <__aeabi_dadd+0xb8>
   32d04:	4645      	mov	r5, r8
   32d06:	2400      	movs	r4, #0
   32d08:	2700      	movs	r7, #0
   32d0a:	e76a      	b.n	32be2 <__aeabi_dadd+0x142>
   32d0c:	4c45      	ldr	r4, [pc, #276]	; (32e24 <__aeabi_dadd+0x384>)
   32d0e:	1af6      	subs	r6, r6, r3
   32d10:	402c      	ands	r4, r5
   32d12:	e749      	b.n	32ba8 <__aeabi_dadd+0x108>
   32d14:	003d      	movs	r5, r7
   32d16:	3828      	subs	r0, #40	; 0x28
   32d18:	4085      	lsls	r5, r0
   32d1a:	2700      	movs	r7, #0
   32d1c:	e72e      	b.n	32b7c <__aeabi_dadd+0xdc>
   32d1e:	0038      	movs	r0, r7
   32d20:	f001 fb3e 	bl	343a0 <__clzsi2>
   32d24:	3020      	adds	r0, #32
   32d26:	e71d      	b.n	32b64 <__aeabi_dadd+0xc4>
   32d28:	430a      	orrs	r2, r1
   32d2a:	1e51      	subs	r1, r2, #1
   32d2c:	418a      	sbcs	r2, r1
   32d2e:	2100      	movs	r1, #0
   32d30:	e707      	b.n	32b42 <__aeabi_dadd+0xa2>
   32d32:	2b00      	cmp	r3, #0
   32d34:	d000      	beq.n	32d38 <__aeabi_dadd+0x298>
   32d36:	e0f3      	b.n	32f20 <__aeabi_dadd+0x480>
   32d38:	1c70      	adds	r0, r6, #1
   32d3a:	0543      	lsls	r3, r0, #21
   32d3c:	0d5b      	lsrs	r3, r3, #21
   32d3e:	2b01      	cmp	r3, #1
   32d40:	dc00      	bgt.n	32d44 <__aeabi_dadd+0x2a4>
   32d42:	e0ad      	b.n	32ea0 <__aeabi_dadd+0x400>
   32d44:	4b36      	ldr	r3, [pc, #216]	; (32e20 <__aeabi_dadd+0x380>)
   32d46:	4298      	cmp	r0, r3
   32d48:	d100      	bne.n	32d4c <__aeabi_dadd+0x2ac>
   32d4a:	e0d1      	b.n	32ef0 <__aeabi_dadd+0x450>
   32d4c:	18ba      	adds	r2, r7, r2
   32d4e:	42ba      	cmp	r2, r7
   32d50:	41bf      	sbcs	r7, r7
   32d52:	1864      	adds	r4, r4, r1
   32d54:	427f      	negs	r7, r7
   32d56:	19e4      	adds	r4, r4, r7
   32d58:	07e7      	lsls	r7, r4, #31
   32d5a:	0852      	lsrs	r2, r2, #1
   32d5c:	4317      	orrs	r7, r2
   32d5e:	0864      	lsrs	r4, r4, #1
   32d60:	0006      	movs	r6, r0
   32d62:	e721      	b.n	32ba8 <__aeabi_dadd+0x108>
   32d64:	482e      	ldr	r0, [pc, #184]	; (32e20 <__aeabi_dadd+0x380>)
   32d66:	4285      	cmp	r5, r0
   32d68:	d100      	bne.n	32d6c <__aeabi_dadd+0x2cc>
   32d6a:	e093      	b.n	32e94 <__aeabi_dadd+0x3f4>
   32d6c:	001d      	movs	r5, r3
   32d6e:	e6d0      	b.n	32b12 <__aeabi_dadd+0x72>
   32d70:	0029      	movs	r1, r5
   32d72:	3e1f      	subs	r6, #31
   32d74:	40f1      	lsrs	r1, r6
   32d76:	2b20      	cmp	r3, #32
   32d78:	d100      	bne.n	32d7c <__aeabi_dadd+0x2dc>
   32d7a:	e08d      	b.n	32e98 <__aeabi_dadd+0x3f8>
   32d7c:	2240      	movs	r2, #64	; 0x40
   32d7e:	1ad3      	subs	r3, r2, r3
   32d80:	409d      	lsls	r5, r3
   32d82:	432f      	orrs	r7, r5
   32d84:	1e7d      	subs	r5, r7, #1
   32d86:	41af      	sbcs	r7, r5
   32d88:	2400      	movs	r4, #0
   32d8a:	430f      	orrs	r7, r1
   32d8c:	2600      	movs	r6, #0
   32d8e:	e744      	b.n	32c1a <__aeabi_dadd+0x17a>
   32d90:	002b      	movs	r3, r5
   32d92:	0008      	movs	r0, r1
   32d94:	3b20      	subs	r3, #32
   32d96:	40d8      	lsrs	r0, r3
   32d98:	0003      	movs	r3, r0
   32d9a:	2d20      	cmp	r5, #32
   32d9c:	d100      	bne.n	32da0 <__aeabi_dadd+0x300>
   32d9e:	e07d      	b.n	32e9c <__aeabi_dadd+0x3fc>
   32da0:	2040      	movs	r0, #64	; 0x40
   32da2:	1b45      	subs	r5, r0, r5
   32da4:	40a9      	lsls	r1, r5
   32da6:	430a      	orrs	r2, r1
   32da8:	1e51      	subs	r1, r2, #1
   32daa:	418a      	sbcs	r2, r1
   32dac:	2100      	movs	r1, #0
   32dae:	431a      	orrs	r2, r3
   32db0:	e6c7      	b.n	32b42 <__aeabi_dadd+0xa2>
   32db2:	2e00      	cmp	r6, #0
   32db4:	d050      	beq.n	32e58 <__aeabi_dadd+0x3b8>
   32db6:	4e1a      	ldr	r6, [pc, #104]	; (32e20 <__aeabi_dadd+0x380>)
   32db8:	42b0      	cmp	r0, r6
   32dba:	d057      	beq.n	32e6c <__aeabi_dadd+0x3cc>
   32dbc:	2680      	movs	r6, #128	; 0x80
   32dbe:	426b      	negs	r3, r5
   32dc0:	4699      	mov	r9, r3
   32dc2:	0436      	lsls	r6, r6, #16
   32dc4:	4334      	orrs	r4, r6
   32dc6:	464b      	mov	r3, r9
   32dc8:	2b38      	cmp	r3, #56	; 0x38
   32dca:	dd00      	ble.n	32dce <__aeabi_dadd+0x32e>
   32dcc:	e0d6      	b.n	32f7c <__aeabi_dadd+0x4dc>
   32dce:	2b1f      	cmp	r3, #31
   32dd0:	dd00      	ble.n	32dd4 <__aeabi_dadd+0x334>
   32dd2:	e135      	b.n	33040 <__aeabi_dadd+0x5a0>
   32dd4:	2620      	movs	r6, #32
   32dd6:	1af5      	subs	r5, r6, r3
   32dd8:	0026      	movs	r6, r4
   32dda:	40ae      	lsls	r6, r5
   32ddc:	46b2      	mov	sl, r6
   32dde:	003e      	movs	r6, r7
   32de0:	40de      	lsrs	r6, r3
   32de2:	46ac      	mov	ip, r5
   32de4:	0035      	movs	r5, r6
   32de6:	4656      	mov	r6, sl
   32de8:	432e      	orrs	r6, r5
   32dea:	4665      	mov	r5, ip
   32dec:	40af      	lsls	r7, r5
   32dee:	1e7d      	subs	r5, r7, #1
   32df0:	41af      	sbcs	r7, r5
   32df2:	40dc      	lsrs	r4, r3
   32df4:	4337      	orrs	r7, r6
   32df6:	1bd7      	subs	r7, r2, r7
   32df8:	42ba      	cmp	r2, r7
   32dfa:	4192      	sbcs	r2, r2
   32dfc:	1b0c      	subs	r4, r1, r4
   32dfe:	4252      	negs	r2, r2
   32e00:	1aa4      	subs	r4, r4, r2
   32e02:	0006      	movs	r6, r0
   32e04:	46d8      	mov	r8, fp
   32e06:	e6a3      	b.n	32b50 <__aeabi_dadd+0xb0>
   32e08:	4664      	mov	r4, ip
   32e0a:	4667      	mov	r7, ip
   32e0c:	432c      	orrs	r4, r5
   32e0e:	d000      	beq.n	32e12 <__aeabi_dadd+0x372>
   32e10:	e6a2      	b.n	32b58 <__aeabi_dadd+0xb8>
   32e12:	2500      	movs	r5, #0
   32e14:	2600      	movs	r6, #0
   32e16:	2700      	movs	r7, #0
   32e18:	e706      	b.n	32c28 <__aeabi_dadd+0x188>
   32e1a:	001e      	movs	r6, r3
   32e1c:	e6c4      	b.n	32ba8 <__aeabi_dadd+0x108>
   32e1e:	46c0      	nop			; (mov r8, r8)
   32e20:	000007ff 	.word	0x000007ff
   32e24:	ff7fffff 	.word	0xff7fffff
   32e28:	800fffff 	.word	0x800fffff
   32e2c:	2b1f      	cmp	r3, #31
   32e2e:	dc63      	bgt.n	32ef8 <__aeabi_dadd+0x458>
   32e30:	2020      	movs	r0, #32
   32e32:	1ac3      	subs	r3, r0, r3
   32e34:	0008      	movs	r0, r1
   32e36:	4098      	lsls	r0, r3
   32e38:	469c      	mov	ip, r3
   32e3a:	4683      	mov	fp, r0
   32e3c:	4653      	mov	r3, sl
   32e3e:	0010      	movs	r0, r2
   32e40:	40d8      	lsrs	r0, r3
   32e42:	0003      	movs	r3, r0
   32e44:	4658      	mov	r0, fp
   32e46:	4318      	orrs	r0, r3
   32e48:	4663      	mov	r3, ip
   32e4a:	409a      	lsls	r2, r3
   32e4c:	1e53      	subs	r3, r2, #1
   32e4e:	419a      	sbcs	r2, r3
   32e50:	4653      	mov	r3, sl
   32e52:	4302      	orrs	r2, r0
   32e54:	40d9      	lsrs	r1, r3
   32e56:	e703      	b.n	32c60 <__aeabi_dadd+0x1c0>
   32e58:	0026      	movs	r6, r4
   32e5a:	433e      	orrs	r6, r7
   32e5c:	d006      	beq.n	32e6c <__aeabi_dadd+0x3cc>
   32e5e:	43eb      	mvns	r3, r5
   32e60:	4699      	mov	r9, r3
   32e62:	2b00      	cmp	r3, #0
   32e64:	d0c7      	beq.n	32df6 <__aeabi_dadd+0x356>
   32e66:	4e94      	ldr	r6, [pc, #592]	; (330b8 <__aeabi_dadd+0x618>)
   32e68:	42b0      	cmp	r0, r6
   32e6a:	d1ac      	bne.n	32dc6 <__aeabi_dadd+0x326>
   32e6c:	000c      	movs	r4, r1
   32e6e:	0017      	movs	r7, r2
   32e70:	0006      	movs	r6, r0
   32e72:	46d8      	mov	r8, fp
   32e74:	e698      	b.n	32ba8 <__aeabi_dadd+0x108>
   32e76:	4b90      	ldr	r3, [pc, #576]	; (330b8 <__aeabi_dadd+0x618>)
   32e78:	459a      	cmp	sl, r3
   32e7a:	d00b      	beq.n	32e94 <__aeabi_dadd+0x3f4>
   32e7c:	4682      	mov	sl, r0
   32e7e:	e6e7      	b.n	32c50 <__aeabi_dadd+0x1b0>
   32e80:	2800      	cmp	r0, #0
   32e82:	d000      	beq.n	32e86 <__aeabi_dadd+0x3e6>
   32e84:	e09e      	b.n	32fc4 <__aeabi_dadd+0x524>
   32e86:	0018      	movs	r0, r3
   32e88:	4310      	orrs	r0, r2
   32e8a:	d100      	bne.n	32e8e <__aeabi_dadd+0x3ee>
   32e8c:	e0e9      	b.n	33062 <__aeabi_dadd+0x5c2>
   32e8e:	001c      	movs	r4, r3
   32e90:	0017      	movs	r7, r2
   32e92:	46d8      	mov	r8, fp
   32e94:	4e88      	ldr	r6, [pc, #544]	; (330b8 <__aeabi_dadd+0x618>)
   32e96:	e687      	b.n	32ba8 <__aeabi_dadd+0x108>
   32e98:	2500      	movs	r5, #0
   32e9a:	e772      	b.n	32d82 <__aeabi_dadd+0x2e2>
   32e9c:	2100      	movs	r1, #0
   32e9e:	e782      	b.n	32da6 <__aeabi_dadd+0x306>
   32ea0:	0023      	movs	r3, r4
   32ea2:	433b      	orrs	r3, r7
   32ea4:	2e00      	cmp	r6, #0
   32ea6:	d000      	beq.n	32eaa <__aeabi_dadd+0x40a>
   32ea8:	e0ab      	b.n	33002 <__aeabi_dadd+0x562>
   32eaa:	2b00      	cmp	r3, #0
   32eac:	d100      	bne.n	32eb0 <__aeabi_dadd+0x410>
   32eae:	e0e7      	b.n	33080 <__aeabi_dadd+0x5e0>
   32eb0:	000b      	movs	r3, r1
   32eb2:	4313      	orrs	r3, r2
   32eb4:	d100      	bne.n	32eb8 <__aeabi_dadd+0x418>
   32eb6:	e677      	b.n	32ba8 <__aeabi_dadd+0x108>
   32eb8:	18ba      	adds	r2, r7, r2
   32eba:	42ba      	cmp	r2, r7
   32ebc:	41bf      	sbcs	r7, r7
   32ebe:	1864      	adds	r4, r4, r1
   32ec0:	427f      	negs	r7, r7
   32ec2:	19e4      	adds	r4, r4, r7
   32ec4:	0223      	lsls	r3, r4, #8
   32ec6:	d400      	bmi.n	32eca <__aeabi_dadd+0x42a>
   32ec8:	e0f2      	b.n	330b0 <__aeabi_dadd+0x610>
   32eca:	4b7c      	ldr	r3, [pc, #496]	; (330bc <__aeabi_dadd+0x61c>)
   32ecc:	0017      	movs	r7, r2
   32ece:	401c      	ands	r4, r3
   32ed0:	0006      	movs	r6, r0
   32ed2:	e669      	b.n	32ba8 <__aeabi_dadd+0x108>
   32ed4:	0020      	movs	r0, r4
   32ed6:	4338      	orrs	r0, r7
   32ed8:	2e00      	cmp	r6, #0
   32eda:	d1d1      	bne.n	32e80 <__aeabi_dadd+0x3e0>
   32edc:	2800      	cmp	r0, #0
   32ede:	d15b      	bne.n	32f98 <__aeabi_dadd+0x4f8>
   32ee0:	001c      	movs	r4, r3
   32ee2:	4314      	orrs	r4, r2
   32ee4:	d100      	bne.n	32ee8 <__aeabi_dadd+0x448>
   32ee6:	e0a8      	b.n	3303a <__aeabi_dadd+0x59a>
   32ee8:	001c      	movs	r4, r3
   32eea:	0017      	movs	r7, r2
   32eec:	46d8      	mov	r8, fp
   32eee:	e65b      	b.n	32ba8 <__aeabi_dadd+0x108>
   32ef0:	0006      	movs	r6, r0
   32ef2:	2400      	movs	r4, #0
   32ef4:	2700      	movs	r7, #0
   32ef6:	e697      	b.n	32c28 <__aeabi_dadd+0x188>
   32ef8:	4650      	mov	r0, sl
   32efa:	000b      	movs	r3, r1
   32efc:	3820      	subs	r0, #32
   32efe:	40c3      	lsrs	r3, r0
   32f00:	4699      	mov	r9, r3
   32f02:	4653      	mov	r3, sl
   32f04:	2b20      	cmp	r3, #32
   32f06:	d100      	bne.n	32f0a <__aeabi_dadd+0x46a>
   32f08:	e095      	b.n	33036 <__aeabi_dadd+0x596>
   32f0a:	2340      	movs	r3, #64	; 0x40
   32f0c:	4650      	mov	r0, sl
   32f0e:	1a1b      	subs	r3, r3, r0
   32f10:	4099      	lsls	r1, r3
   32f12:	430a      	orrs	r2, r1
   32f14:	1e51      	subs	r1, r2, #1
   32f16:	418a      	sbcs	r2, r1
   32f18:	464b      	mov	r3, r9
   32f1a:	2100      	movs	r1, #0
   32f1c:	431a      	orrs	r2, r3
   32f1e:	e69f      	b.n	32c60 <__aeabi_dadd+0x1c0>
   32f20:	2e00      	cmp	r6, #0
   32f22:	d130      	bne.n	32f86 <__aeabi_dadd+0x4e6>
   32f24:	0026      	movs	r6, r4
   32f26:	433e      	orrs	r6, r7
   32f28:	d067      	beq.n	32ffa <__aeabi_dadd+0x55a>
   32f2a:	43db      	mvns	r3, r3
   32f2c:	469a      	mov	sl, r3
   32f2e:	2b00      	cmp	r3, #0
   32f30:	d01c      	beq.n	32f6c <__aeabi_dadd+0x4cc>
   32f32:	4e61      	ldr	r6, [pc, #388]	; (330b8 <__aeabi_dadd+0x618>)
   32f34:	42b0      	cmp	r0, r6
   32f36:	d060      	beq.n	32ffa <__aeabi_dadd+0x55a>
   32f38:	4653      	mov	r3, sl
   32f3a:	2b38      	cmp	r3, #56	; 0x38
   32f3c:	dd00      	ble.n	32f40 <__aeabi_dadd+0x4a0>
   32f3e:	e096      	b.n	3306e <__aeabi_dadd+0x5ce>
   32f40:	2b1f      	cmp	r3, #31
   32f42:	dd00      	ble.n	32f46 <__aeabi_dadd+0x4a6>
   32f44:	e09f      	b.n	33086 <__aeabi_dadd+0x5e6>
   32f46:	2620      	movs	r6, #32
   32f48:	1af3      	subs	r3, r6, r3
   32f4a:	0026      	movs	r6, r4
   32f4c:	409e      	lsls	r6, r3
   32f4e:	469c      	mov	ip, r3
   32f50:	46b3      	mov	fp, r6
   32f52:	4653      	mov	r3, sl
   32f54:	003e      	movs	r6, r7
   32f56:	40de      	lsrs	r6, r3
   32f58:	0033      	movs	r3, r6
   32f5a:	465e      	mov	r6, fp
   32f5c:	431e      	orrs	r6, r3
   32f5e:	4663      	mov	r3, ip
   32f60:	409f      	lsls	r7, r3
   32f62:	1e7b      	subs	r3, r7, #1
   32f64:	419f      	sbcs	r7, r3
   32f66:	4653      	mov	r3, sl
   32f68:	40dc      	lsrs	r4, r3
   32f6a:	4337      	orrs	r7, r6
   32f6c:	18bf      	adds	r7, r7, r2
   32f6e:	4297      	cmp	r7, r2
   32f70:	4192      	sbcs	r2, r2
   32f72:	1864      	adds	r4, r4, r1
   32f74:	4252      	negs	r2, r2
   32f76:	18a4      	adds	r4, r4, r2
   32f78:	0006      	movs	r6, r0
   32f7a:	e678      	b.n	32c6e <__aeabi_dadd+0x1ce>
   32f7c:	4327      	orrs	r7, r4
   32f7e:	1e7c      	subs	r4, r7, #1
   32f80:	41a7      	sbcs	r7, r4
   32f82:	2400      	movs	r4, #0
   32f84:	e737      	b.n	32df6 <__aeabi_dadd+0x356>
   32f86:	4e4c      	ldr	r6, [pc, #304]	; (330b8 <__aeabi_dadd+0x618>)
   32f88:	42b0      	cmp	r0, r6
   32f8a:	d036      	beq.n	32ffa <__aeabi_dadd+0x55a>
   32f8c:	2680      	movs	r6, #128	; 0x80
   32f8e:	425b      	negs	r3, r3
   32f90:	0436      	lsls	r6, r6, #16
   32f92:	469a      	mov	sl, r3
   32f94:	4334      	orrs	r4, r6
   32f96:	e7cf      	b.n	32f38 <__aeabi_dadd+0x498>
   32f98:	0018      	movs	r0, r3
   32f9a:	4310      	orrs	r0, r2
   32f9c:	d100      	bne.n	32fa0 <__aeabi_dadd+0x500>
   32f9e:	e603      	b.n	32ba8 <__aeabi_dadd+0x108>
   32fa0:	1ab8      	subs	r0, r7, r2
   32fa2:	4684      	mov	ip, r0
   32fa4:	4567      	cmp	r7, ip
   32fa6:	41ad      	sbcs	r5, r5
   32fa8:	1ae0      	subs	r0, r4, r3
   32faa:	426d      	negs	r5, r5
   32fac:	1b40      	subs	r0, r0, r5
   32fae:	0205      	lsls	r5, r0, #8
   32fb0:	d400      	bmi.n	32fb4 <__aeabi_dadd+0x514>
   32fb2:	e62c      	b.n	32c0e <__aeabi_dadd+0x16e>
   32fb4:	1bd7      	subs	r7, r2, r7
   32fb6:	42ba      	cmp	r2, r7
   32fb8:	4192      	sbcs	r2, r2
   32fba:	1b1c      	subs	r4, r3, r4
   32fbc:	4252      	negs	r2, r2
   32fbe:	1aa4      	subs	r4, r4, r2
   32fc0:	46d8      	mov	r8, fp
   32fc2:	e5f1      	b.n	32ba8 <__aeabi_dadd+0x108>
   32fc4:	0018      	movs	r0, r3
   32fc6:	4310      	orrs	r0, r2
   32fc8:	d100      	bne.n	32fcc <__aeabi_dadd+0x52c>
   32fca:	e763      	b.n	32e94 <__aeabi_dadd+0x3f4>
   32fcc:	08f8      	lsrs	r0, r7, #3
   32fce:	0767      	lsls	r7, r4, #29
   32fd0:	4307      	orrs	r7, r0
   32fd2:	2080      	movs	r0, #128	; 0x80
   32fd4:	08e4      	lsrs	r4, r4, #3
   32fd6:	0300      	lsls	r0, r0, #12
   32fd8:	4204      	tst	r4, r0
   32fda:	d008      	beq.n	32fee <__aeabi_dadd+0x54e>
   32fdc:	08dd      	lsrs	r5, r3, #3
   32fde:	4205      	tst	r5, r0
   32fe0:	d105      	bne.n	32fee <__aeabi_dadd+0x54e>
   32fe2:	08d2      	lsrs	r2, r2, #3
   32fe4:	0759      	lsls	r1, r3, #29
   32fe6:	4311      	orrs	r1, r2
   32fe8:	000f      	movs	r7, r1
   32fea:	002c      	movs	r4, r5
   32fec:	46d8      	mov	r8, fp
   32fee:	0f7b      	lsrs	r3, r7, #29
   32ff0:	00e4      	lsls	r4, r4, #3
   32ff2:	431c      	orrs	r4, r3
   32ff4:	00ff      	lsls	r7, r7, #3
   32ff6:	4e30      	ldr	r6, [pc, #192]	; (330b8 <__aeabi_dadd+0x618>)
   32ff8:	e5d6      	b.n	32ba8 <__aeabi_dadd+0x108>
   32ffa:	000c      	movs	r4, r1
   32ffc:	0017      	movs	r7, r2
   32ffe:	0006      	movs	r6, r0
   33000:	e5d2      	b.n	32ba8 <__aeabi_dadd+0x108>
   33002:	2b00      	cmp	r3, #0
   33004:	d038      	beq.n	33078 <__aeabi_dadd+0x5d8>
   33006:	000b      	movs	r3, r1
   33008:	4313      	orrs	r3, r2
   3300a:	d100      	bne.n	3300e <__aeabi_dadd+0x56e>
   3300c:	e742      	b.n	32e94 <__aeabi_dadd+0x3f4>
   3300e:	08f8      	lsrs	r0, r7, #3
   33010:	0767      	lsls	r7, r4, #29
   33012:	4307      	orrs	r7, r0
   33014:	2080      	movs	r0, #128	; 0x80
   33016:	08e4      	lsrs	r4, r4, #3
   33018:	0300      	lsls	r0, r0, #12
   3301a:	4204      	tst	r4, r0
   3301c:	d0e7      	beq.n	32fee <__aeabi_dadd+0x54e>
   3301e:	08cb      	lsrs	r3, r1, #3
   33020:	4203      	tst	r3, r0
   33022:	d1e4      	bne.n	32fee <__aeabi_dadd+0x54e>
   33024:	08d2      	lsrs	r2, r2, #3
   33026:	0749      	lsls	r1, r1, #29
   33028:	4311      	orrs	r1, r2
   3302a:	000f      	movs	r7, r1
   3302c:	001c      	movs	r4, r3
   3302e:	e7de      	b.n	32fee <__aeabi_dadd+0x54e>
   33030:	2700      	movs	r7, #0
   33032:	2400      	movs	r4, #0
   33034:	e5d5      	b.n	32be2 <__aeabi_dadd+0x142>
   33036:	2100      	movs	r1, #0
   33038:	e76b      	b.n	32f12 <__aeabi_dadd+0x472>
   3303a:	2500      	movs	r5, #0
   3303c:	2700      	movs	r7, #0
   3303e:	e5f3      	b.n	32c28 <__aeabi_dadd+0x188>
   33040:	464e      	mov	r6, r9
   33042:	0025      	movs	r5, r4
   33044:	3e20      	subs	r6, #32
   33046:	40f5      	lsrs	r5, r6
   33048:	464b      	mov	r3, r9
   3304a:	002e      	movs	r6, r5
   3304c:	2b20      	cmp	r3, #32
   3304e:	d02d      	beq.n	330ac <__aeabi_dadd+0x60c>
   33050:	2540      	movs	r5, #64	; 0x40
   33052:	1aed      	subs	r5, r5, r3
   33054:	40ac      	lsls	r4, r5
   33056:	4327      	orrs	r7, r4
   33058:	1e7c      	subs	r4, r7, #1
   3305a:	41a7      	sbcs	r7, r4
   3305c:	2400      	movs	r4, #0
   3305e:	4337      	orrs	r7, r6
   33060:	e6c9      	b.n	32df6 <__aeabi_dadd+0x356>
   33062:	2480      	movs	r4, #128	; 0x80
   33064:	2500      	movs	r5, #0
   33066:	0324      	lsls	r4, r4, #12
   33068:	4e13      	ldr	r6, [pc, #76]	; (330b8 <__aeabi_dadd+0x618>)
   3306a:	2700      	movs	r7, #0
   3306c:	e5dc      	b.n	32c28 <__aeabi_dadd+0x188>
   3306e:	4327      	orrs	r7, r4
   33070:	1e7c      	subs	r4, r7, #1
   33072:	41a7      	sbcs	r7, r4
   33074:	2400      	movs	r4, #0
   33076:	e779      	b.n	32f6c <__aeabi_dadd+0x4cc>
   33078:	000c      	movs	r4, r1
   3307a:	0017      	movs	r7, r2
   3307c:	4e0e      	ldr	r6, [pc, #56]	; (330b8 <__aeabi_dadd+0x618>)
   3307e:	e593      	b.n	32ba8 <__aeabi_dadd+0x108>
   33080:	000c      	movs	r4, r1
   33082:	0017      	movs	r7, r2
   33084:	e590      	b.n	32ba8 <__aeabi_dadd+0x108>
   33086:	4656      	mov	r6, sl
   33088:	0023      	movs	r3, r4
   3308a:	3e20      	subs	r6, #32
   3308c:	40f3      	lsrs	r3, r6
   3308e:	4699      	mov	r9, r3
   33090:	4653      	mov	r3, sl
   33092:	2b20      	cmp	r3, #32
   33094:	d00e      	beq.n	330b4 <__aeabi_dadd+0x614>
   33096:	2340      	movs	r3, #64	; 0x40
   33098:	4656      	mov	r6, sl
   3309a:	1b9b      	subs	r3, r3, r6
   3309c:	409c      	lsls	r4, r3
   3309e:	4327      	orrs	r7, r4
   330a0:	1e7c      	subs	r4, r7, #1
   330a2:	41a7      	sbcs	r7, r4
   330a4:	464b      	mov	r3, r9
   330a6:	2400      	movs	r4, #0
   330a8:	431f      	orrs	r7, r3
   330aa:	e75f      	b.n	32f6c <__aeabi_dadd+0x4cc>
   330ac:	2400      	movs	r4, #0
   330ae:	e7d2      	b.n	33056 <__aeabi_dadd+0x5b6>
   330b0:	0017      	movs	r7, r2
   330b2:	e5b2      	b.n	32c1a <__aeabi_dadd+0x17a>
   330b4:	2400      	movs	r4, #0
   330b6:	e7f2      	b.n	3309e <__aeabi_dadd+0x5fe>
   330b8:	000007ff 	.word	0x000007ff
   330bc:	ff7fffff 	.word	0xff7fffff

000330c0 <__aeabi_ddiv>:
   330c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   330c2:	4657      	mov	r7, sl
   330c4:	4645      	mov	r5, r8
   330c6:	46de      	mov	lr, fp
   330c8:	464e      	mov	r6, r9
   330ca:	b5e0      	push	{r5, r6, r7, lr}
   330cc:	004c      	lsls	r4, r1, #1
   330ce:	030e      	lsls	r6, r1, #12
   330d0:	b087      	sub	sp, #28
   330d2:	4683      	mov	fp, r0
   330d4:	4692      	mov	sl, r2
   330d6:	001d      	movs	r5, r3
   330d8:	4680      	mov	r8, r0
   330da:	0b36      	lsrs	r6, r6, #12
   330dc:	0d64      	lsrs	r4, r4, #21
   330de:	0fcf      	lsrs	r7, r1, #31
   330e0:	2c00      	cmp	r4, #0
   330e2:	d04f      	beq.n	33184 <__aeabi_ddiv+0xc4>
   330e4:	4b6f      	ldr	r3, [pc, #444]	; (332a4 <__aeabi_ddiv+0x1e4>)
   330e6:	429c      	cmp	r4, r3
   330e8:	d035      	beq.n	33156 <__aeabi_ddiv+0x96>
   330ea:	2380      	movs	r3, #128	; 0x80
   330ec:	0f42      	lsrs	r2, r0, #29
   330ee:	041b      	lsls	r3, r3, #16
   330f0:	00f6      	lsls	r6, r6, #3
   330f2:	4313      	orrs	r3, r2
   330f4:	4333      	orrs	r3, r6
   330f6:	4699      	mov	r9, r3
   330f8:	00c3      	lsls	r3, r0, #3
   330fa:	4698      	mov	r8, r3
   330fc:	4b6a      	ldr	r3, [pc, #424]	; (332a8 <__aeabi_ddiv+0x1e8>)
   330fe:	2600      	movs	r6, #0
   33100:	469c      	mov	ip, r3
   33102:	2300      	movs	r3, #0
   33104:	4464      	add	r4, ip
   33106:	9303      	str	r3, [sp, #12]
   33108:	032b      	lsls	r3, r5, #12
   3310a:	0b1b      	lsrs	r3, r3, #12
   3310c:	469b      	mov	fp, r3
   3310e:	006b      	lsls	r3, r5, #1
   33110:	0fed      	lsrs	r5, r5, #31
   33112:	4650      	mov	r0, sl
   33114:	0d5b      	lsrs	r3, r3, #21
   33116:	9501      	str	r5, [sp, #4]
   33118:	d05e      	beq.n	331d8 <__aeabi_ddiv+0x118>
   3311a:	4a62      	ldr	r2, [pc, #392]	; (332a4 <__aeabi_ddiv+0x1e4>)
   3311c:	4293      	cmp	r3, r2
   3311e:	d053      	beq.n	331c8 <__aeabi_ddiv+0x108>
   33120:	465a      	mov	r2, fp
   33122:	00d1      	lsls	r1, r2, #3
   33124:	2280      	movs	r2, #128	; 0x80
   33126:	0f40      	lsrs	r0, r0, #29
   33128:	0412      	lsls	r2, r2, #16
   3312a:	4302      	orrs	r2, r0
   3312c:	430a      	orrs	r2, r1
   3312e:	4693      	mov	fp, r2
   33130:	4652      	mov	r2, sl
   33132:	00d1      	lsls	r1, r2, #3
   33134:	4a5c      	ldr	r2, [pc, #368]	; (332a8 <__aeabi_ddiv+0x1e8>)
   33136:	4694      	mov	ip, r2
   33138:	2200      	movs	r2, #0
   3313a:	4463      	add	r3, ip
   3313c:	0038      	movs	r0, r7
   3313e:	4068      	eors	r0, r5
   33140:	4684      	mov	ip, r0
   33142:	9002      	str	r0, [sp, #8]
   33144:	1ae4      	subs	r4, r4, r3
   33146:	4316      	orrs	r6, r2
   33148:	2e0f      	cmp	r6, #15
   3314a:	d900      	bls.n	3314e <__aeabi_ddiv+0x8e>
   3314c:	e0b4      	b.n	332b8 <__aeabi_ddiv+0x1f8>
   3314e:	4b57      	ldr	r3, [pc, #348]	; (332ac <__aeabi_ddiv+0x1ec>)
   33150:	00b6      	lsls	r6, r6, #2
   33152:	599b      	ldr	r3, [r3, r6]
   33154:	469f      	mov	pc, r3
   33156:	0003      	movs	r3, r0
   33158:	4333      	orrs	r3, r6
   3315a:	4699      	mov	r9, r3
   3315c:	d16c      	bne.n	33238 <__aeabi_ddiv+0x178>
   3315e:	2300      	movs	r3, #0
   33160:	4698      	mov	r8, r3
   33162:	3302      	adds	r3, #2
   33164:	2608      	movs	r6, #8
   33166:	9303      	str	r3, [sp, #12]
   33168:	e7ce      	b.n	33108 <__aeabi_ddiv+0x48>
   3316a:	46cb      	mov	fp, r9
   3316c:	4641      	mov	r1, r8
   3316e:	9a03      	ldr	r2, [sp, #12]
   33170:	9701      	str	r7, [sp, #4]
   33172:	2a02      	cmp	r2, #2
   33174:	d165      	bne.n	33242 <__aeabi_ddiv+0x182>
   33176:	9b01      	ldr	r3, [sp, #4]
   33178:	4c4a      	ldr	r4, [pc, #296]	; (332a4 <__aeabi_ddiv+0x1e4>)
   3317a:	469c      	mov	ip, r3
   3317c:	2300      	movs	r3, #0
   3317e:	2200      	movs	r2, #0
   33180:	4698      	mov	r8, r3
   33182:	e06b      	b.n	3325c <__aeabi_ddiv+0x19c>
   33184:	0003      	movs	r3, r0
   33186:	4333      	orrs	r3, r6
   33188:	4699      	mov	r9, r3
   3318a:	d04e      	beq.n	3322a <__aeabi_ddiv+0x16a>
   3318c:	2e00      	cmp	r6, #0
   3318e:	d100      	bne.n	33192 <__aeabi_ddiv+0xd2>
   33190:	e1bc      	b.n	3350c <__aeabi_ddiv+0x44c>
   33192:	0030      	movs	r0, r6
   33194:	f001 f904 	bl	343a0 <__clzsi2>
   33198:	0003      	movs	r3, r0
   3319a:	3b0b      	subs	r3, #11
   3319c:	2b1c      	cmp	r3, #28
   3319e:	dd00      	ble.n	331a2 <__aeabi_ddiv+0xe2>
   331a0:	e1ac      	b.n	334fc <__aeabi_ddiv+0x43c>
   331a2:	221d      	movs	r2, #29
   331a4:	1ad3      	subs	r3, r2, r3
   331a6:	465a      	mov	r2, fp
   331a8:	0001      	movs	r1, r0
   331aa:	40da      	lsrs	r2, r3
   331ac:	3908      	subs	r1, #8
   331ae:	408e      	lsls	r6, r1
   331b0:	0013      	movs	r3, r2
   331b2:	4333      	orrs	r3, r6
   331b4:	4699      	mov	r9, r3
   331b6:	465b      	mov	r3, fp
   331b8:	408b      	lsls	r3, r1
   331ba:	4698      	mov	r8, r3
   331bc:	2300      	movs	r3, #0
   331be:	4c3c      	ldr	r4, [pc, #240]	; (332b0 <__aeabi_ddiv+0x1f0>)
   331c0:	2600      	movs	r6, #0
   331c2:	1a24      	subs	r4, r4, r0
   331c4:	9303      	str	r3, [sp, #12]
   331c6:	e79f      	b.n	33108 <__aeabi_ddiv+0x48>
   331c8:	4651      	mov	r1, sl
   331ca:	465a      	mov	r2, fp
   331cc:	4311      	orrs	r1, r2
   331ce:	d129      	bne.n	33224 <__aeabi_ddiv+0x164>
   331d0:	2200      	movs	r2, #0
   331d2:	4693      	mov	fp, r2
   331d4:	3202      	adds	r2, #2
   331d6:	e7b1      	b.n	3313c <__aeabi_ddiv+0x7c>
   331d8:	4659      	mov	r1, fp
   331da:	4301      	orrs	r1, r0
   331dc:	d01e      	beq.n	3321c <__aeabi_ddiv+0x15c>
   331de:	465b      	mov	r3, fp
   331e0:	2b00      	cmp	r3, #0
   331e2:	d100      	bne.n	331e6 <__aeabi_ddiv+0x126>
   331e4:	e19e      	b.n	33524 <__aeabi_ddiv+0x464>
   331e6:	4658      	mov	r0, fp
   331e8:	f001 f8da 	bl	343a0 <__clzsi2>
   331ec:	0003      	movs	r3, r0
   331ee:	3b0b      	subs	r3, #11
   331f0:	2b1c      	cmp	r3, #28
   331f2:	dd00      	ble.n	331f6 <__aeabi_ddiv+0x136>
   331f4:	e18f      	b.n	33516 <__aeabi_ddiv+0x456>
   331f6:	0002      	movs	r2, r0
   331f8:	4659      	mov	r1, fp
   331fa:	3a08      	subs	r2, #8
   331fc:	4091      	lsls	r1, r2
   331fe:	468b      	mov	fp, r1
   33200:	211d      	movs	r1, #29
   33202:	1acb      	subs	r3, r1, r3
   33204:	4651      	mov	r1, sl
   33206:	40d9      	lsrs	r1, r3
   33208:	000b      	movs	r3, r1
   3320a:	4659      	mov	r1, fp
   3320c:	430b      	orrs	r3, r1
   3320e:	4651      	mov	r1, sl
   33210:	469b      	mov	fp, r3
   33212:	4091      	lsls	r1, r2
   33214:	4b26      	ldr	r3, [pc, #152]	; (332b0 <__aeabi_ddiv+0x1f0>)
   33216:	2200      	movs	r2, #0
   33218:	1a1b      	subs	r3, r3, r0
   3321a:	e78f      	b.n	3313c <__aeabi_ddiv+0x7c>
   3321c:	2300      	movs	r3, #0
   3321e:	2201      	movs	r2, #1
   33220:	469b      	mov	fp, r3
   33222:	e78b      	b.n	3313c <__aeabi_ddiv+0x7c>
   33224:	4651      	mov	r1, sl
   33226:	2203      	movs	r2, #3
   33228:	e788      	b.n	3313c <__aeabi_ddiv+0x7c>
   3322a:	2300      	movs	r3, #0
   3322c:	4698      	mov	r8, r3
   3322e:	3301      	adds	r3, #1
   33230:	2604      	movs	r6, #4
   33232:	2400      	movs	r4, #0
   33234:	9303      	str	r3, [sp, #12]
   33236:	e767      	b.n	33108 <__aeabi_ddiv+0x48>
   33238:	2303      	movs	r3, #3
   3323a:	46b1      	mov	r9, r6
   3323c:	9303      	str	r3, [sp, #12]
   3323e:	260c      	movs	r6, #12
   33240:	e762      	b.n	33108 <__aeabi_ddiv+0x48>
   33242:	2a03      	cmp	r2, #3
   33244:	d100      	bne.n	33248 <__aeabi_ddiv+0x188>
   33246:	e25c      	b.n	33702 <__aeabi_ddiv+0x642>
   33248:	9b01      	ldr	r3, [sp, #4]
   3324a:	2a01      	cmp	r2, #1
   3324c:	d000      	beq.n	33250 <__aeabi_ddiv+0x190>
   3324e:	e1e4      	b.n	3361a <__aeabi_ddiv+0x55a>
   33250:	4013      	ands	r3, r2
   33252:	469c      	mov	ip, r3
   33254:	2300      	movs	r3, #0
   33256:	2400      	movs	r4, #0
   33258:	2200      	movs	r2, #0
   3325a:	4698      	mov	r8, r3
   3325c:	2100      	movs	r1, #0
   3325e:	0312      	lsls	r2, r2, #12
   33260:	0b13      	lsrs	r3, r2, #12
   33262:	0d0a      	lsrs	r2, r1, #20
   33264:	0512      	lsls	r2, r2, #20
   33266:	431a      	orrs	r2, r3
   33268:	0523      	lsls	r3, r4, #20
   3326a:	4c12      	ldr	r4, [pc, #72]	; (332b4 <__aeabi_ddiv+0x1f4>)
   3326c:	4640      	mov	r0, r8
   3326e:	4022      	ands	r2, r4
   33270:	4313      	orrs	r3, r2
   33272:	4662      	mov	r2, ip
   33274:	005b      	lsls	r3, r3, #1
   33276:	07d2      	lsls	r2, r2, #31
   33278:	085b      	lsrs	r3, r3, #1
   3327a:	4313      	orrs	r3, r2
   3327c:	0019      	movs	r1, r3
   3327e:	b007      	add	sp, #28
   33280:	bc3c      	pop	{r2, r3, r4, r5}
   33282:	4690      	mov	r8, r2
   33284:	4699      	mov	r9, r3
   33286:	46a2      	mov	sl, r4
   33288:	46ab      	mov	fp, r5
   3328a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3328c:	2300      	movs	r3, #0
   3328e:	2280      	movs	r2, #128	; 0x80
   33290:	469c      	mov	ip, r3
   33292:	0312      	lsls	r2, r2, #12
   33294:	4698      	mov	r8, r3
   33296:	4c03      	ldr	r4, [pc, #12]	; (332a4 <__aeabi_ddiv+0x1e4>)
   33298:	e7e0      	b.n	3325c <__aeabi_ddiv+0x19c>
   3329a:	2300      	movs	r3, #0
   3329c:	4c01      	ldr	r4, [pc, #4]	; (332a4 <__aeabi_ddiv+0x1e4>)
   3329e:	2200      	movs	r2, #0
   332a0:	4698      	mov	r8, r3
   332a2:	e7db      	b.n	3325c <__aeabi_ddiv+0x19c>
   332a4:	000007ff 	.word	0x000007ff
   332a8:	fffffc01 	.word	0xfffffc01
   332ac:	00039b28 	.word	0x00039b28
   332b0:	fffffc0d 	.word	0xfffffc0d
   332b4:	800fffff 	.word	0x800fffff
   332b8:	45d9      	cmp	r9, fp
   332ba:	d900      	bls.n	332be <__aeabi_ddiv+0x1fe>
   332bc:	e139      	b.n	33532 <__aeabi_ddiv+0x472>
   332be:	d100      	bne.n	332c2 <__aeabi_ddiv+0x202>
   332c0:	e134      	b.n	3352c <__aeabi_ddiv+0x46c>
   332c2:	2300      	movs	r3, #0
   332c4:	4646      	mov	r6, r8
   332c6:	464d      	mov	r5, r9
   332c8:	469a      	mov	sl, r3
   332ca:	3c01      	subs	r4, #1
   332cc:	465b      	mov	r3, fp
   332ce:	0e0a      	lsrs	r2, r1, #24
   332d0:	021b      	lsls	r3, r3, #8
   332d2:	431a      	orrs	r2, r3
   332d4:	020b      	lsls	r3, r1, #8
   332d6:	0c17      	lsrs	r7, r2, #16
   332d8:	9303      	str	r3, [sp, #12]
   332da:	0413      	lsls	r3, r2, #16
   332dc:	0c1b      	lsrs	r3, r3, #16
   332de:	0039      	movs	r1, r7
   332e0:	0028      	movs	r0, r5
   332e2:	4690      	mov	r8, r2
   332e4:	9301      	str	r3, [sp, #4]
   332e6:	f7fe fc1d 	bl	31b24 <__udivsi3>
   332ea:	0002      	movs	r2, r0
   332ec:	9b01      	ldr	r3, [sp, #4]
   332ee:	4683      	mov	fp, r0
   332f0:	435a      	muls	r2, r3
   332f2:	0028      	movs	r0, r5
   332f4:	0039      	movs	r1, r7
   332f6:	4691      	mov	r9, r2
   332f8:	f7fe fc9a 	bl	31c30 <__aeabi_uidivmod>
   332fc:	0c35      	lsrs	r5, r6, #16
   332fe:	0409      	lsls	r1, r1, #16
   33300:	430d      	orrs	r5, r1
   33302:	45a9      	cmp	r9, r5
   33304:	d90d      	bls.n	33322 <__aeabi_ddiv+0x262>
   33306:	465b      	mov	r3, fp
   33308:	4445      	add	r5, r8
   3330a:	3b01      	subs	r3, #1
   3330c:	45a8      	cmp	r8, r5
   3330e:	d900      	bls.n	33312 <__aeabi_ddiv+0x252>
   33310:	e13a      	b.n	33588 <__aeabi_ddiv+0x4c8>
   33312:	45a9      	cmp	r9, r5
   33314:	d800      	bhi.n	33318 <__aeabi_ddiv+0x258>
   33316:	e137      	b.n	33588 <__aeabi_ddiv+0x4c8>
   33318:	2302      	movs	r3, #2
   3331a:	425b      	negs	r3, r3
   3331c:	469c      	mov	ip, r3
   3331e:	4445      	add	r5, r8
   33320:	44e3      	add	fp, ip
   33322:	464b      	mov	r3, r9
   33324:	1aeb      	subs	r3, r5, r3
   33326:	0039      	movs	r1, r7
   33328:	0018      	movs	r0, r3
   3332a:	9304      	str	r3, [sp, #16]
   3332c:	f7fe fbfa 	bl	31b24 <__udivsi3>
   33330:	9b01      	ldr	r3, [sp, #4]
   33332:	0005      	movs	r5, r0
   33334:	4343      	muls	r3, r0
   33336:	0039      	movs	r1, r7
   33338:	9804      	ldr	r0, [sp, #16]
   3333a:	4699      	mov	r9, r3
   3333c:	f7fe fc78 	bl	31c30 <__aeabi_uidivmod>
   33340:	0433      	lsls	r3, r6, #16
   33342:	0409      	lsls	r1, r1, #16
   33344:	0c1b      	lsrs	r3, r3, #16
   33346:	430b      	orrs	r3, r1
   33348:	4599      	cmp	r9, r3
   3334a:	d909      	bls.n	33360 <__aeabi_ddiv+0x2a0>
   3334c:	4443      	add	r3, r8
   3334e:	1e6a      	subs	r2, r5, #1
   33350:	4598      	cmp	r8, r3
   33352:	d900      	bls.n	33356 <__aeabi_ddiv+0x296>
   33354:	e11a      	b.n	3358c <__aeabi_ddiv+0x4cc>
   33356:	4599      	cmp	r9, r3
   33358:	d800      	bhi.n	3335c <__aeabi_ddiv+0x29c>
   3335a:	e117      	b.n	3358c <__aeabi_ddiv+0x4cc>
   3335c:	3d02      	subs	r5, #2
   3335e:	4443      	add	r3, r8
   33360:	464a      	mov	r2, r9
   33362:	1a9b      	subs	r3, r3, r2
   33364:	465a      	mov	r2, fp
   33366:	0412      	lsls	r2, r2, #16
   33368:	432a      	orrs	r2, r5
   3336a:	9903      	ldr	r1, [sp, #12]
   3336c:	4693      	mov	fp, r2
   3336e:	0c10      	lsrs	r0, r2, #16
   33370:	0c0a      	lsrs	r2, r1, #16
   33372:	4691      	mov	r9, r2
   33374:	0409      	lsls	r1, r1, #16
   33376:	465a      	mov	r2, fp
   33378:	0c09      	lsrs	r1, r1, #16
   3337a:	464e      	mov	r6, r9
   3337c:	000d      	movs	r5, r1
   3337e:	0412      	lsls	r2, r2, #16
   33380:	0c12      	lsrs	r2, r2, #16
   33382:	4345      	muls	r5, r0
   33384:	9105      	str	r1, [sp, #20]
   33386:	4351      	muls	r1, r2
   33388:	4372      	muls	r2, r6
   3338a:	4370      	muls	r0, r6
   3338c:	1952      	adds	r2, r2, r5
   3338e:	0c0e      	lsrs	r6, r1, #16
   33390:	18b2      	adds	r2, r6, r2
   33392:	4295      	cmp	r5, r2
   33394:	d903      	bls.n	3339e <__aeabi_ddiv+0x2de>
   33396:	2580      	movs	r5, #128	; 0x80
   33398:	026d      	lsls	r5, r5, #9
   3339a:	46ac      	mov	ip, r5
   3339c:	4460      	add	r0, ip
   3339e:	0c15      	lsrs	r5, r2, #16
   333a0:	0409      	lsls	r1, r1, #16
   333a2:	0412      	lsls	r2, r2, #16
   333a4:	0c09      	lsrs	r1, r1, #16
   333a6:	1828      	adds	r0, r5, r0
   333a8:	1852      	adds	r2, r2, r1
   333aa:	4283      	cmp	r3, r0
   333ac:	d200      	bcs.n	333b0 <__aeabi_ddiv+0x2f0>
   333ae:	e0ce      	b.n	3354e <__aeabi_ddiv+0x48e>
   333b0:	d100      	bne.n	333b4 <__aeabi_ddiv+0x2f4>
   333b2:	e0c8      	b.n	33546 <__aeabi_ddiv+0x486>
   333b4:	1a1d      	subs	r5, r3, r0
   333b6:	4653      	mov	r3, sl
   333b8:	1a9e      	subs	r6, r3, r2
   333ba:	45b2      	cmp	sl, r6
   333bc:	4192      	sbcs	r2, r2
   333be:	4252      	negs	r2, r2
   333c0:	1aab      	subs	r3, r5, r2
   333c2:	469a      	mov	sl, r3
   333c4:	4598      	cmp	r8, r3
   333c6:	d100      	bne.n	333ca <__aeabi_ddiv+0x30a>
   333c8:	e117      	b.n	335fa <__aeabi_ddiv+0x53a>
   333ca:	0039      	movs	r1, r7
   333cc:	0018      	movs	r0, r3
   333ce:	f7fe fba9 	bl	31b24 <__udivsi3>
   333d2:	9b01      	ldr	r3, [sp, #4]
   333d4:	0005      	movs	r5, r0
   333d6:	4343      	muls	r3, r0
   333d8:	0039      	movs	r1, r7
   333da:	4650      	mov	r0, sl
   333dc:	9304      	str	r3, [sp, #16]
   333de:	f7fe fc27 	bl	31c30 <__aeabi_uidivmod>
   333e2:	9804      	ldr	r0, [sp, #16]
   333e4:	040b      	lsls	r3, r1, #16
   333e6:	0c31      	lsrs	r1, r6, #16
   333e8:	4319      	orrs	r1, r3
   333ea:	4288      	cmp	r0, r1
   333ec:	d909      	bls.n	33402 <__aeabi_ddiv+0x342>
   333ee:	4441      	add	r1, r8
   333f0:	1e6b      	subs	r3, r5, #1
   333f2:	4588      	cmp	r8, r1
   333f4:	d900      	bls.n	333f8 <__aeabi_ddiv+0x338>
   333f6:	e107      	b.n	33608 <__aeabi_ddiv+0x548>
   333f8:	4288      	cmp	r0, r1
   333fa:	d800      	bhi.n	333fe <__aeabi_ddiv+0x33e>
   333fc:	e104      	b.n	33608 <__aeabi_ddiv+0x548>
   333fe:	3d02      	subs	r5, #2
   33400:	4441      	add	r1, r8
   33402:	9b04      	ldr	r3, [sp, #16]
   33404:	1acb      	subs	r3, r1, r3
   33406:	0018      	movs	r0, r3
   33408:	0039      	movs	r1, r7
   3340a:	9304      	str	r3, [sp, #16]
   3340c:	f7fe fb8a 	bl	31b24 <__udivsi3>
   33410:	9b01      	ldr	r3, [sp, #4]
   33412:	4682      	mov	sl, r0
   33414:	4343      	muls	r3, r0
   33416:	0039      	movs	r1, r7
   33418:	9804      	ldr	r0, [sp, #16]
   3341a:	9301      	str	r3, [sp, #4]
   3341c:	f7fe fc08 	bl	31c30 <__aeabi_uidivmod>
   33420:	9801      	ldr	r0, [sp, #4]
   33422:	040b      	lsls	r3, r1, #16
   33424:	0431      	lsls	r1, r6, #16
   33426:	0c09      	lsrs	r1, r1, #16
   33428:	4319      	orrs	r1, r3
   3342a:	4288      	cmp	r0, r1
   3342c:	d90d      	bls.n	3344a <__aeabi_ddiv+0x38a>
   3342e:	4653      	mov	r3, sl
   33430:	4441      	add	r1, r8
   33432:	3b01      	subs	r3, #1
   33434:	4588      	cmp	r8, r1
   33436:	d900      	bls.n	3343a <__aeabi_ddiv+0x37a>
   33438:	e0e8      	b.n	3360c <__aeabi_ddiv+0x54c>
   3343a:	4288      	cmp	r0, r1
   3343c:	d800      	bhi.n	33440 <__aeabi_ddiv+0x380>
   3343e:	e0e5      	b.n	3360c <__aeabi_ddiv+0x54c>
   33440:	2302      	movs	r3, #2
   33442:	425b      	negs	r3, r3
   33444:	469c      	mov	ip, r3
   33446:	4441      	add	r1, r8
   33448:	44e2      	add	sl, ip
   3344a:	9b01      	ldr	r3, [sp, #4]
   3344c:	042d      	lsls	r5, r5, #16
   3344e:	1ace      	subs	r6, r1, r3
   33450:	4651      	mov	r1, sl
   33452:	4329      	orrs	r1, r5
   33454:	9d05      	ldr	r5, [sp, #20]
   33456:	464f      	mov	r7, r9
   33458:	002a      	movs	r2, r5
   3345a:	040b      	lsls	r3, r1, #16
   3345c:	0c08      	lsrs	r0, r1, #16
   3345e:	0c1b      	lsrs	r3, r3, #16
   33460:	435a      	muls	r2, r3
   33462:	4345      	muls	r5, r0
   33464:	437b      	muls	r3, r7
   33466:	4378      	muls	r0, r7
   33468:	195b      	adds	r3, r3, r5
   3346a:	0c17      	lsrs	r7, r2, #16
   3346c:	18fb      	adds	r3, r7, r3
   3346e:	429d      	cmp	r5, r3
   33470:	d903      	bls.n	3347a <__aeabi_ddiv+0x3ba>
   33472:	2580      	movs	r5, #128	; 0x80
   33474:	026d      	lsls	r5, r5, #9
   33476:	46ac      	mov	ip, r5
   33478:	4460      	add	r0, ip
   3347a:	0c1d      	lsrs	r5, r3, #16
   3347c:	0412      	lsls	r2, r2, #16
   3347e:	041b      	lsls	r3, r3, #16
   33480:	0c12      	lsrs	r2, r2, #16
   33482:	1828      	adds	r0, r5, r0
   33484:	189b      	adds	r3, r3, r2
   33486:	4286      	cmp	r6, r0
   33488:	d200      	bcs.n	3348c <__aeabi_ddiv+0x3cc>
   3348a:	e093      	b.n	335b4 <__aeabi_ddiv+0x4f4>
   3348c:	d100      	bne.n	33490 <__aeabi_ddiv+0x3d0>
   3348e:	e08e      	b.n	335ae <__aeabi_ddiv+0x4ee>
   33490:	2301      	movs	r3, #1
   33492:	4319      	orrs	r1, r3
   33494:	4ba0      	ldr	r3, [pc, #640]	; (33718 <__aeabi_ddiv+0x658>)
   33496:	18e3      	adds	r3, r4, r3
   33498:	2b00      	cmp	r3, #0
   3349a:	dc00      	bgt.n	3349e <__aeabi_ddiv+0x3de>
   3349c:	e099      	b.n	335d2 <__aeabi_ddiv+0x512>
   3349e:	074a      	lsls	r2, r1, #29
   334a0:	d000      	beq.n	334a4 <__aeabi_ddiv+0x3e4>
   334a2:	e09e      	b.n	335e2 <__aeabi_ddiv+0x522>
   334a4:	465a      	mov	r2, fp
   334a6:	01d2      	lsls	r2, r2, #7
   334a8:	d506      	bpl.n	334b8 <__aeabi_ddiv+0x3f8>
   334aa:	465a      	mov	r2, fp
   334ac:	4b9b      	ldr	r3, [pc, #620]	; (3371c <__aeabi_ddiv+0x65c>)
   334ae:	401a      	ands	r2, r3
   334b0:	2380      	movs	r3, #128	; 0x80
   334b2:	4693      	mov	fp, r2
   334b4:	00db      	lsls	r3, r3, #3
   334b6:	18e3      	adds	r3, r4, r3
   334b8:	4a99      	ldr	r2, [pc, #612]	; (33720 <__aeabi_ddiv+0x660>)
   334ba:	4293      	cmp	r3, r2
   334bc:	dd68      	ble.n	33590 <__aeabi_ddiv+0x4d0>
   334be:	2301      	movs	r3, #1
   334c0:	9a02      	ldr	r2, [sp, #8]
   334c2:	4c98      	ldr	r4, [pc, #608]	; (33724 <__aeabi_ddiv+0x664>)
   334c4:	401a      	ands	r2, r3
   334c6:	2300      	movs	r3, #0
   334c8:	4694      	mov	ip, r2
   334ca:	4698      	mov	r8, r3
   334cc:	2200      	movs	r2, #0
   334ce:	e6c5      	b.n	3325c <__aeabi_ddiv+0x19c>
   334d0:	2280      	movs	r2, #128	; 0x80
   334d2:	464b      	mov	r3, r9
   334d4:	0312      	lsls	r2, r2, #12
   334d6:	4213      	tst	r3, r2
   334d8:	d00a      	beq.n	334f0 <__aeabi_ddiv+0x430>
   334da:	465b      	mov	r3, fp
   334dc:	4213      	tst	r3, r2
   334de:	d106      	bne.n	334ee <__aeabi_ddiv+0x42e>
   334e0:	431a      	orrs	r2, r3
   334e2:	0312      	lsls	r2, r2, #12
   334e4:	0b12      	lsrs	r2, r2, #12
   334e6:	46ac      	mov	ip, r5
   334e8:	4688      	mov	r8, r1
   334ea:	4c8e      	ldr	r4, [pc, #568]	; (33724 <__aeabi_ddiv+0x664>)
   334ec:	e6b6      	b.n	3325c <__aeabi_ddiv+0x19c>
   334ee:	464b      	mov	r3, r9
   334f0:	431a      	orrs	r2, r3
   334f2:	0312      	lsls	r2, r2, #12
   334f4:	0b12      	lsrs	r2, r2, #12
   334f6:	46bc      	mov	ip, r7
   334f8:	4c8a      	ldr	r4, [pc, #552]	; (33724 <__aeabi_ddiv+0x664>)
   334fa:	e6af      	b.n	3325c <__aeabi_ddiv+0x19c>
   334fc:	0003      	movs	r3, r0
   334fe:	465a      	mov	r2, fp
   33500:	3b28      	subs	r3, #40	; 0x28
   33502:	409a      	lsls	r2, r3
   33504:	2300      	movs	r3, #0
   33506:	4691      	mov	r9, r2
   33508:	4698      	mov	r8, r3
   3350a:	e657      	b.n	331bc <__aeabi_ddiv+0xfc>
   3350c:	4658      	mov	r0, fp
   3350e:	f000 ff47 	bl	343a0 <__clzsi2>
   33512:	3020      	adds	r0, #32
   33514:	e640      	b.n	33198 <__aeabi_ddiv+0xd8>
   33516:	0003      	movs	r3, r0
   33518:	4652      	mov	r2, sl
   3351a:	3b28      	subs	r3, #40	; 0x28
   3351c:	409a      	lsls	r2, r3
   3351e:	2100      	movs	r1, #0
   33520:	4693      	mov	fp, r2
   33522:	e677      	b.n	33214 <__aeabi_ddiv+0x154>
   33524:	f000 ff3c 	bl	343a0 <__clzsi2>
   33528:	3020      	adds	r0, #32
   3352a:	e65f      	b.n	331ec <__aeabi_ddiv+0x12c>
   3352c:	4588      	cmp	r8, r1
   3352e:	d200      	bcs.n	33532 <__aeabi_ddiv+0x472>
   33530:	e6c7      	b.n	332c2 <__aeabi_ddiv+0x202>
   33532:	464b      	mov	r3, r9
   33534:	07de      	lsls	r6, r3, #31
   33536:	085d      	lsrs	r5, r3, #1
   33538:	4643      	mov	r3, r8
   3353a:	085b      	lsrs	r3, r3, #1
   3353c:	431e      	orrs	r6, r3
   3353e:	4643      	mov	r3, r8
   33540:	07db      	lsls	r3, r3, #31
   33542:	469a      	mov	sl, r3
   33544:	e6c2      	b.n	332cc <__aeabi_ddiv+0x20c>
   33546:	2500      	movs	r5, #0
   33548:	4592      	cmp	sl, r2
   3354a:	d300      	bcc.n	3354e <__aeabi_ddiv+0x48e>
   3354c:	e733      	b.n	333b6 <__aeabi_ddiv+0x2f6>
   3354e:	9e03      	ldr	r6, [sp, #12]
   33550:	4659      	mov	r1, fp
   33552:	46b4      	mov	ip, r6
   33554:	44e2      	add	sl, ip
   33556:	45b2      	cmp	sl, r6
   33558:	41ad      	sbcs	r5, r5
   3355a:	426d      	negs	r5, r5
   3355c:	4445      	add	r5, r8
   3355e:	18eb      	adds	r3, r5, r3
   33560:	3901      	subs	r1, #1
   33562:	4598      	cmp	r8, r3
   33564:	d207      	bcs.n	33576 <__aeabi_ddiv+0x4b6>
   33566:	4298      	cmp	r0, r3
   33568:	d900      	bls.n	3356c <__aeabi_ddiv+0x4ac>
   3356a:	e07f      	b.n	3366c <__aeabi_ddiv+0x5ac>
   3356c:	d100      	bne.n	33570 <__aeabi_ddiv+0x4b0>
   3356e:	e0bc      	b.n	336ea <__aeabi_ddiv+0x62a>
   33570:	1a1d      	subs	r5, r3, r0
   33572:	468b      	mov	fp, r1
   33574:	e71f      	b.n	333b6 <__aeabi_ddiv+0x2f6>
   33576:	4598      	cmp	r8, r3
   33578:	d1fa      	bne.n	33570 <__aeabi_ddiv+0x4b0>
   3357a:	9d03      	ldr	r5, [sp, #12]
   3357c:	4555      	cmp	r5, sl
   3357e:	d9f2      	bls.n	33566 <__aeabi_ddiv+0x4a6>
   33580:	4643      	mov	r3, r8
   33582:	468b      	mov	fp, r1
   33584:	1a1d      	subs	r5, r3, r0
   33586:	e716      	b.n	333b6 <__aeabi_ddiv+0x2f6>
   33588:	469b      	mov	fp, r3
   3358a:	e6ca      	b.n	33322 <__aeabi_ddiv+0x262>
   3358c:	0015      	movs	r5, r2
   3358e:	e6e7      	b.n	33360 <__aeabi_ddiv+0x2a0>
   33590:	465a      	mov	r2, fp
   33592:	08c9      	lsrs	r1, r1, #3
   33594:	0752      	lsls	r2, r2, #29
   33596:	430a      	orrs	r2, r1
   33598:	055b      	lsls	r3, r3, #21
   3359a:	4690      	mov	r8, r2
   3359c:	0d5c      	lsrs	r4, r3, #21
   3359e:	465a      	mov	r2, fp
   335a0:	2301      	movs	r3, #1
   335a2:	9902      	ldr	r1, [sp, #8]
   335a4:	0252      	lsls	r2, r2, #9
   335a6:	4019      	ands	r1, r3
   335a8:	0b12      	lsrs	r2, r2, #12
   335aa:	468c      	mov	ip, r1
   335ac:	e656      	b.n	3325c <__aeabi_ddiv+0x19c>
   335ae:	2b00      	cmp	r3, #0
   335b0:	d100      	bne.n	335b4 <__aeabi_ddiv+0x4f4>
   335b2:	e76f      	b.n	33494 <__aeabi_ddiv+0x3d4>
   335b4:	4446      	add	r6, r8
   335b6:	1e4a      	subs	r2, r1, #1
   335b8:	45b0      	cmp	r8, r6
   335ba:	d929      	bls.n	33610 <__aeabi_ddiv+0x550>
   335bc:	0011      	movs	r1, r2
   335be:	4286      	cmp	r6, r0
   335c0:	d000      	beq.n	335c4 <__aeabi_ddiv+0x504>
   335c2:	e765      	b.n	33490 <__aeabi_ddiv+0x3d0>
   335c4:	9a03      	ldr	r2, [sp, #12]
   335c6:	4293      	cmp	r3, r2
   335c8:	d000      	beq.n	335cc <__aeabi_ddiv+0x50c>
   335ca:	e761      	b.n	33490 <__aeabi_ddiv+0x3d0>
   335cc:	e762      	b.n	33494 <__aeabi_ddiv+0x3d4>
   335ce:	2101      	movs	r1, #1
   335d0:	4249      	negs	r1, r1
   335d2:	2001      	movs	r0, #1
   335d4:	1ac2      	subs	r2, r0, r3
   335d6:	2a38      	cmp	r2, #56	; 0x38
   335d8:	dd21      	ble.n	3361e <__aeabi_ddiv+0x55e>
   335da:	9b02      	ldr	r3, [sp, #8]
   335dc:	4003      	ands	r3, r0
   335de:	469c      	mov	ip, r3
   335e0:	e638      	b.n	33254 <__aeabi_ddiv+0x194>
   335e2:	220f      	movs	r2, #15
   335e4:	400a      	ands	r2, r1
   335e6:	2a04      	cmp	r2, #4
   335e8:	d100      	bne.n	335ec <__aeabi_ddiv+0x52c>
   335ea:	e75b      	b.n	334a4 <__aeabi_ddiv+0x3e4>
   335ec:	000a      	movs	r2, r1
   335ee:	1d11      	adds	r1, r2, #4
   335f0:	4291      	cmp	r1, r2
   335f2:	4192      	sbcs	r2, r2
   335f4:	4252      	negs	r2, r2
   335f6:	4493      	add	fp, r2
   335f8:	e754      	b.n	334a4 <__aeabi_ddiv+0x3e4>
   335fa:	4b47      	ldr	r3, [pc, #284]	; (33718 <__aeabi_ddiv+0x658>)
   335fc:	18e3      	adds	r3, r4, r3
   335fe:	2b00      	cmp	r3, #0
   33600:	dde5      	ble.n	335ce <__aeabi_ddiv+0x50e>
   33602:	2201      	movs	r2, #1
   33604:	4252      	negs	r2, r2
   33606:	e7f2      	b.n	335ee <__aeabi_ddiv+0x52e>
   33608:	001d      	movs	r5, r3
   3360a:	e6fa      	b.n	33402 <__aeabi_ddiv+0x342>
   3360c:	469a      	mov	sl, r3
   3360e:	e71c      	b.n	3344a <__aeabi_ddiv+0x38a>
   33610:	42b0      	cmp	r0, r6
   33612:	d839      	bhi.n	33688 <__aeabi_ddiv+0x5c8>
   33614:	d06e      	beq.n	336f4 <__aeabi_ddiv+0x634>
   33616:	0011      	movs	r1, r2
   33618:	e73a      	b.n	33490 <__aeabi_ddiv+0x3d0>
   3361a:	9302      	str	r3, [sp, #8]
   3361c:	e73a      	b.n	33494 <__aeabi_ddiv+0x3d4>
   3361e:	2a1f      	cmp	r2, #31
   33620:	dc3c      	bgt.n	3369c <__aeabi_ddiv+0x5dc>
   33622:	2320      	movs	r3, #32
   33624:	1a9b      	subs	r3, r3, r2
   33626:	000c      	movs	r4, r1
   33628:	4658      	mov	r0, fp
   3362a:	4099      	lsls	r1, r3
   3362c:	4098      	lsls	r0, r3
   3362e:	1e4b      	subs	r3, r1, #1
   33630:	4199      	sbcs	r1, r3
   33632:	465b      	mov	r3, fp
   33634:	40d4      	lsrs	r4, r2
   33636:	40d3      	lsrs	r3, r2
   33638:	4320      	orrs	r0, r4
   3363a:	4308      	orrs	r0, r1
   3363c:	001a      	movs	r2, r3
   3363e:	0743      	lsls	r3, r0, #29
   33640:	d009      	beq.n	33656 <__aeabi_ddiv+0x596>
   33642:	230f      	movs	r3, #15
   33644:	4003      	ands	r3, r0
   33646:	2b04      	cmp	r3, #4
   33648:	d005      	beq.n	33656 <__aeabi_ddiv+0x596>
   3364a:	0001      	movs	r1, r0
   3364c:	1d08      	adds	r0, r1, #4
   3364e:	4288      	cmp	r0, r1
   33650:	419b      	sbcs	r3, r3
   33652:	425b      	negs	r3, r3
   33654:	18d2      	adds	r2, r2, r3
   33656:	0213      	lsls	r3, r2, #8
   33658:	d53a      	bpl.n	336d0 <__aeabi_ddiv+0x610>
   3365a:	2301      	movs	r3, #1
   3365c:	9a02      	ldr	r2, [sp, #8]
   3365e:	2401      	movs	r4, #1
   33660:	401a      	ands	r2, r3
   33662:	2300      	movs	r3, #0
   33664:	4694      	mov	ip, r2
   33666:	4698      	mov	r8, r3
   33668:	2200      	movs	r2, #0
   3366a:	e5f7      	b.n	3325c <__aeabi_ddiv+0x19c>
   3366c:	2102      	movs	r1, #2
   3366e:	4249      	negs	r1, r1
   33670:	468c      	mov	ip, r1
   33672:	9d03      	ldr	r5, [sp, #12]
   33674:	44e3      	add	fp, ip
   33676:	46ac      	mov	ip, r5
   33678:	44e2      	add	sl, ip
   3367a:	45aa      	cmp	sl, r5
   3367c:	41ad      	sbcs	r5, r5
   3367e:	426d      	negs	r5, r5
   33680:	4445      	add	r5, r8
   33682:	18ed      	adds	r5, r5, r3
   33684:	1a2d      	subs	r5, r5, r0
   33686:	e696      	b.n	333b6 <__aeabi_ddiv+0x2f6>
   33688:	1e8a      	subs	r2, r1, #2
   3368a:	9903      	ldr	r1, [sp, #12]
   3368c:	004d      	lsls	r5, r1, #1
   3368e:	428d      	cmp	r5, r1
   33690:	4189      	sbcs	r1, r1
   33692:	4249      	negs	r1, r1
   33694:	4441      	add	r1, r8
   33696:	1876      	adds	r6, r6, r1
   33698:	9503      	str	r5, [sp, #12]
   3369a:	e78f      	b.n	335bc <__aeabi_ddiv+0x4fc>
   3369c:	201f      	movs	r0, #31
   3369e:	4240      	negs	r0, r0
   336a0:	1ac3      	subs	r3, r0, r3
   336a2:	4658      	mov	r0, fp
   336a4:	40d8      	lsrs	r0, r3
   336a6:	0003      	movs	r3, r0
   336a8:	2a20      	cmp	r2, #32
   336aa:	d028      	beq.n	336fe <__aeabi_ddiv+0x63e>
   336ac:	2040      	movs	r0, #64	; 0x40
   336ae:	465d      	mov	r5, fp
   336b0:	1a82      	subs	r2, r0, r2
   336b2:	4095      	lsls	r5, r2
   336b4:	4329      	orrs	r1, r5
   336b6:	1e4a      	subs	r2, r1, #1
   336b8:	4191      	sbcs	r1, r2
   336ba:	4319      	orrs	r1, r3
   336bc:	2307      	movs	r3, #7
   336be:	2200      	movs	r2, #0
   336c0:	400b      	ands	r3, r1
   336c2:	d009      	beq.n	336d8 <__aeabi_ddiv+0x618>
   336c4:	230f      	movs	r3, #15
   336c6:	2200      	movs	r2, #0
   336c8:	400b      	ands	r3, r1
   336ca:	0008      	movs	r0, r1
   336cc:	2b04      	cmp	r3, #4
   336ce:	d1bd      	bne.n	3364c <__aeabi_ddiv+0x58c>
   336d0:	0001      	movs	r1, r0
   336d2:	0753      	lsls	r3, r2, #29
   336d4:	0252      	lsls	r2, r2, #9
   336d6:	0b12      	lsrs	r2, r2, #12
   336d8:	08c9      	lsrs	r1, r1, #3
   336da:	4319      	orrs	r1, r3
   336dc:	2301      	movs	r3, #1
   336de:	4688      	mov	r8, r1
   336e0:	9902      	ldr	r1, [sp, #8]
   336e2:	2400      	movs	r4, #0
   336e4:	4019      	ands	r1, r3
   336e6:	468c      	mov	ip, r1
   336e8:	e5b8      	b.n	3325c <__aeabi_ddiv+0x19c>
   336ea:	4552      	cmp	r2, sl
   336ec:	d8be      	bhi.n	3366c <__aeabi_ddiv+0x5ac>
   336ee:	468b      	mov	fp, r1
   336f0:	2500      	movs	r5, #0
   336f2:	e660      	b.n	333b6 <__aeabi_ddiv+0x2f6>
   336f4:	9d03      	ldr	r5, [sp, #12]
   336f6:	429d      	cmp	r5, r3
   336f8:	d3c6      	bcc.n	33688 <__aeabi_ddiv+0x5c8>
   336fa:	0011      	movs	r1, r2
   336fc:	e762      	b.n	335c4 <__aeabi_ddiv+0x504>
   336fe:	2500      	movs	r5, #0
   33700:	e7d8      	b.n	336b4 <__aeabi_ddiv+0x5f4>
   33702:	2280      	movs	r2, #128	; 0x80
   33704:	465b      	mov	r3, fp
   33706:	0312      	lsls	r2, r2, #12
   33708:	431a      	orrs	r2, r3
   3370a:	9b01      	ldr	r3, [sp, #4]
   3370c:	0312      	lsls	r2, r2, #12
   3370e:	0b12      	lsrs	r2, r2, #12
   33710:	469c      	mov	ip, r3
   33712:	4688      	mov	r8, r1
   33714:	4c03      	ldr	r4, [pc, #12]	; (33724 <__aeabi_ddiv+0x664>)
   33716:	e5a1      	b.n	3325c <__aeabi_ddiv+0x19c>
   33718:	000003ff 	.word	0x000003ff
   3371c:	feffffff 	.word	0xfeffffff
   33720:	000007fe 	.word	0x000007fe
   33724:	000007ff 	.word	0x000007ff

00033728 <__aeabi_dmul>:
   33728:	b5f0      	push	{r4, r5, r6, r7, lr}
   3372a:	4657      	mov	r7, sl
   3372c:	4645      	mov	r5, r8
   3372e:	46de      	mov	lr, fp
   33730:	464e      	mov	r6, r9
   33732:	b5e0      	push	{r5, r6, r7, lr}
   33734:	030c      	lsls	r4, r1, #12
   33736:	4698      	mov	r8, r3
   33738:	004e      	lsls	r6, r1, #1
   3373a:	0b23      	lsrs	r3, r4, #12
   3373c:	b087      	sub	sp, #28
   3373e:	0007      	movs	r7, r0
   33740:	4692      	mov	sl, r2
   33742:	469b      	mov	fp, r3
   33744:	0d76      	lsrs	r6, r6, #21
   33746:	0fcd      	lsrs	r5, r1, #31
   33748:	2e00      	cmp	r6, #0
   3374a:	d06b      	beq.n	33824 <__aeabi_dmul+0xfc>
   3374c:	4b6d      	ldr	r3, [pc, #436]	; (33904 <__aeabi_dmul+0x1dc>)
   3374e:	429e      	cmp	r6, r3
   33750:	d035      	beq.n	337be <__aeabi_dmul+0x96>
   33752:	2480      	movs	r4, #128	; 0x80
   33754:	465b      	mov	r3, fp
   33756:	0f42      	lsrs	r2, r0, #29
   33758:	0424      	lsls	r4, r4, #16
   3375a:	00db      	lsls	r3, r3, #3
   3375c:	4314      	orrs	r4, r2
   3375e:	431c      	orrs	r4, r3
   33760:	00c3      	lsls	r3, r0, #3
   33762:	4699      	mov	r9, r3
   33764:	4b68      	ldr	r3, [pc, #416]	; (33908 <__aeabi_dmul+0x1e0>)
   33766:	46a3      	mov	fp, r4
   33768:	469c      	mov	ip, r3
   3376a:	2300      	movs	r3, #0
   3376c:	2700      	movs	r7, #0
   3376e:	4466      	add	r6, ip
   33770:	9302      	str	r3, [sp, #8]
   33772:	4643      	mov	r3, r8
   33774:	031c      	lsls	r4, r3, #12
   33776:	005a      	lsls	r2, r3, #1
   33778:	0fdb      	lsrs	r3, r3, #31
   3377a:	4650      	mov	r0, sl
   3377c:	0b24      	lsrs	r4, r4, #12
   3377e:	0d52      	lsrs	r2, r2, #21
   33780:	4698      	mov	r8, r3
   33782:	d100      	bne.n	33786 <__aeabi_dmul+0x5e>
   33784:	e076      	b.n	33874 <__aeabi_dmul+0x14c>
   33786:	4b5f      	ldr	r3, [pc, #380]	; (33904 <__aeabi_dmul+0x1dc>)
   33788:	429a      	cmp	r2, r3
   3378a:	d06d      	beq.n	33868 <__aeabi_dmul+0x140>
   3378c:	2380      	movs	r3, #128	; 0x80
   3378e:	0f41      	lsrs	r1, r0, #29
   33790:	041b      	lsls	r3, r3, #16
   33792:	430b      	orrs	r3, r1
   33794:	495c      	ldr	r1, [pc, #368]	; (33908 <__aeabi_dmul+0x1e0>)
   33796:	00e4      	lsls	r4, r4, #3
   33798:	468c      	mov	ip, r1
   3379a:	431c      	orrs	r4, r3
   3379c:	00c3      	lsls	r3, r0, #3
   3379e:	2000      	movs	r0, #0
   337a0:	4462      	add	r2, ip
   337a2:	4641      	mov	r1, r8
   337a4:	18b6      	adds	r6, r6, r2
   337a6:	4069      	eors	r1, r5
   337a8:	1c72      	adds	r2, r6, #1
   337aa:	9101      	str	r1, [sp, #4]
   337ac:	4694      	mov	ip, r2
   337ae:	4307      	orrs	r7, r0
   337b0:	2f0f      	cmp	r7, #15
   337b2:	d900      	bls.n	337b6 <__aeabi_dmul+0x8e>
   337b4:	e0b0      	b.n	33918 <__aeabi_dmul+0x1f0>
   337b6:	4a55      	ldr	r2, [pc, #340]	; (3390c <__aeabi_dmul+0x1e4>)
   337b8:	00bf      	lsls	r7, r7, #2
   337ba:	59d2      	ldr	r2, [r2, r7]
   337bc:	4697      	mov	pc, r2
   337be:	465b      	mov	r3, fp
   337c0:	4303      	orrs	r3, r0
   337c2:	4699      	mov	r9, r3
   337c4:	d000      	beq.n	337c8 <__aeabi_dmul+0xa0>
   337c6:	e087      	b.n	338d8 <__aeabi_dmul+0x1b0>
   337c8:	2300      	movs	r3, #0
   337ca:	469b      	mov	fp, r3
   337cc:	3302      	adds	r3, #2
   337ce:	2708      	movs	r7, #8
   337d0:	9302      	str	r3, [sp, #8]
   337d2:	e7ce      	b.n	33772 <__aeabi_dmul+0x4a>
   337d4:	4642      	mov	r2, r8
   337d6:	9201      	str	r2, [sp, #4]
   337d8:	2802      	cmp	r0, #2
   337da:	d067      	beq.n	338ac <__aeabi_dmul+0x184>
   337dc:	2803      	cmp	r0, #3
   337de:	d100      	bne.n	337e2 <__aeabi_dmul+0xba>
   337e0:	e20e      	b.n	33c00 <__aeabi_dmul+0x4d8>
   337e2:	2801      	cmp	r0, #1
   337e4:	d000      	beq.n	337e8 <__aeabi_dmul+0xc0>
   337e6:	e162      	b.n	33aae <__aeabi_dmul+0x386>
   337e8:	2300      	movs	r3, #0
   337ea:	2400      	movs	r4, #0
   337ec:	2200      	movs	r2, #0
   337ee:	4699      	mov	r9, r3
   337f0:	9901      	ldr	r1, [sp, #4]
   337f2:	4001      	ands	r1, r0
   337f4:	b2cd      	uxtb	r5, r1
   337f6:	2100      	movs	r1, #0
   337f8:	0312      	lsls	r2, r2, #12
   337fa:	0d0b      	lsrs	r3, r1, #20
   337fc:	0b12      	lsrs	r2, r2, #12
   337fe:	051b      	lsls	r3, r3, #20
   33800:	4313      	orrs	r3, r2
   33802:	4a43      	ldr	r2, [pc, #268]	; (33910 <__aeabi_dmul+0x1e8>)
   33804:	0524      	lsls	r4, r4, #20
   33806:	4013      	ands	r3, r2
   33808:	431c      	orrs	r4, r3
   3380a:	0064      	lsls	r4, r4, #1
   3380c:	07ed      	lsls	r5, r5, #31
   3380e:	0864      	lsrs	r4, r4, #1
   33810:	432c      	orrs	r4, r5
   33812:	4648      	mov	r0, r9
   33814:	0021      	movs	r1, r4
   33816:	b007      	add	sp, #28
   33818:	bc3c      	pop	{r2, r3, r4, r5}
   3381a:	4690      	mov	r8, r2
   3381c:	4699      	mov	r9, r3
   3381e:	46a2      	mov	sl, r4
   33820:	46ab      	mov	fp, r5
   33822:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33824:	4303      	orrs	r3, r0
   33826:	4699      	mov	r9, r3
   33828:	d04f      	beq.n	338ca <__aeabi_dmul+0x1a2>
   3382a:	465b      	mov	r3, fp
   3382c:	2b00      	cmp	r3, #0
   3382e:	d100      	bne.n	33832 <__aeabi_dmul+0x10a>
   33830:	e189      	b.n	33b46 <__aeabi_dmul+0x41e>
   33832:	4658      	mov	r0, fp
   33834:	f000 fdb4 	bl	343a0 <__clzsi2>
   33838:	0003      	movs	r3, r0
   3383a:	3b0b      	subs	r3, #11
   3383c:	2b1c      	cmp	r3, #28
   3383e:	dd00      	ble.n	33842 <__aeabi_dmul+0x11a>
   33840:	e17a      	b.n	33b38 <__aeabi_dmul+0x410>
   33842:	221d      	movs	r2, #29
   33844:	1ad3      	subs	r3, r2, r3
   33846:	003a      	movs	r2, r7
   33848:	0001      	movs	r1, r0
   3384a:	465c      	mov	r4, fp
   3384c:	40da      	lsrs	r2, r3
   3384e:	3908      	subs	r1, #8
   33850:	408c      	lsls	r4, r1
   33852:	0013      	movs	r3, r2
   33854:	408f      	lsls	r7, r1
   33856:	4323      	orrs	r3, r4
   33858:	469b      	mov	fp, r3
   3385a:	46b9      	mov	r9, r7
   3385c:	2300      	movs	r3, #0
   3385e:	4e2d      	ldr	r6, [pc, #180]	; (33914 <__aeabi_dmul+0x1ec>)
   33860:	2700      	movs	r7, #0
   33862:	1a36      	subs	r6, r6, r0
   33864:	9302      	str	r3, [sp, #8]
   33866:	e784      	b.n	33772 <__aeabi_dmul+0x4a>
   33868:	4653      	mov	r3, sl
   3386a:	4323      	orrs	r3, r4
   3386c:	d12a      	bne.n	338c4 <__aeabi_dmul+0x19c>
   3386e:	2400      	movs	r4, #0
   33870:	2002      	movs	r0, #2
   33872:	e796      	b.n	337a2 <__aeabi_dmul+0x7a>
   33874:	4653      	mov	r3, sl
   33876:	4323      	orrs	r3, r4
   33878:	d020      	beq.n	338bc <__aeabi_dmul+0x194>
   3387a:	2c00      	cmp	r4, #0
   3387c:	d100      	bne.n	33880 <__aeabi_dmul+0x158>
   3387e:	e157      	b.n	33b30 <__aeabi_dmul+0x408>
   33880:	0020      	movs	r0, r4
   33882:	f000 fd8d 	bl	343a0 <__clzsi2>
   33886:	0003      	movs	r3, r0
   33888:	3b0b      	subs	r3, #11
   3388a:	2b1c      	cmp	r3, #28
   3388c:	dd00      	ble.n	33890 <__aeabi_dmul+0x168>
   3388e:	e149      	b.n	33b24 <__aeabi_dmul+0x3fc>
   33890:	211d      	movs	r1, #29
   33892:	1acb      	subs	r3, r1, r3
   33894:	4651      	mov	r1, sl
   33896:	0002      	movs	r2, r0
   33898:	40d9      	lsrs	r1, r3
   3389a:	4653      	mov	r3, sl
   3389c:	3a08      	subs	r2, #8
   3389e:	4094      	lsls	r4, r2
   338a0:	4093      	lsls	r3, r2
   338a2:	430c      	orrs	r4, r1
   338a4:	4a1b      	ldr	r2, [pc, #108]	; (33914 <__aeabi_dmul+0x1ec>)
   338a6:	1a12      	subs	r2, r2, r0
   338a8:	2000      	movs	r0, #0
   338aa:	e77a      	b.n	337a2 <__aeabi_dmul+0x7a>
   338ac:	2501      	movs	r5, #1
   338ae:	9b01      	ldr	r3, [sp, #4]
   338b0:	4c14      	ldr	r4, [pc, #80]	; (33904 <__aeabi_dmul+0x1dc>)
   338b2:	401d      	ands	r5, r3
   338b4:	2300      	movs	r3, #0
   338b6:	2200      	movs	r2, #0
   338b8:	4699      	mov	r9, r3
   338ba:	e79c      	b.n	337f6 <__aeabi_dmul+0xce>
   338bc:	2400      	movs	r4, #0
   338be:	2200      	movs	r2, #0
   338c0:	2001      	movs	r0, #1
   338c2:	e76e      	b.n	337a2 <__aeabi_dmul+0x7a>
   338c4:	4653      	mov	r3, sl
   338c6:	2003      	movs	r0, #3
   338c8:	e76b      	b.n	337a2 <__aeabi_dmul+0x7a>
   338ca:	2300      	movs	r3, #0
   338cc:	469b      	mov	fp, r3
   338ce:	3301      	adds	r3, #1
   338d0:	2704      	movs	r7, #4
   338d2:	2600      	movs	r6, #0
   338d4:	9302      	str	r3, [sp, #8]
   338d6:	e74c      	b.n	33772 <__aeabi_dmul+0x4a>
   338d8:	2303      	movs	r3, #3
   338da:	4681      	mov	r9, r0
   338dc:	270c      	movs	r7, #12
   338de:	9302      	str	r3, [sp, #8]
   338e0:	e747      	b.n	33772 <__aeabi_dmul+0x4a>
   338e2:	2280      	movs	r2, #128	; 0x80
   338e4:	2300      	movs	r3, #0
   338e6:	2500      	movs	r5, #0
   338e8:	0312      	lsls	r2, r2, #12
   338ea:	4699      	mov	r9, r3
   338ec:	4c05      	ldr	r4, [pc, #20]	; (33904 <__aeabi_dmul+0x1dc>)
   338ee:	e782      	b.n	337f6 <__aeabi_dmul+0xce>
   338f0:	465c      	mov	r4, fp
   338f2:	464b      	mov	r3, r9
   338f4:	9802      	ldr	r0, [sp, #8]
   338f6:	e76f      	b.n	337d8 <__aeabi_dmul+0xb0>
   338f8:	465c      	mov	r4, fp
   338fa:	464b      	mov	r3, r9
   338fc:	9501      	str	r5, [sp, #4]
   338fe:	9802      	ldr	r0, [sp, #8]
   33900:	e76a      	b.n	337d8 <__aeabi_dmul+0xb0>
   33902:	46c0      	nop			; (mov r8, r8)
   33904:	000007ff 	.word	0x000007ff
   33908:	fffffc01 	.word	0xfffffc01
   3390c:	00039b68 	.word	0x00039b68
   33910:	800fffff 	.word	0x800fffff
   33914:	fffffc0d 	.word	0xfffffc0d
   33918:	464a      	mov	r2, r9
   3391a:	4649      	mov	r1, r9
   3391c:	0c17      	lsrs	r7, r2, #16
   3391e:	0c1a      	lsrs	r2, r3, #16
   33920:	041b      	lsls	r3, r3, #16
   33922:	0c1b      	lsrs	r3, r3, #16
   33924:	0408      	lsls	r0, r1, #16
   33926:	0019      	movs	r1, r3
   33928:	0c00      	lsrs	r0, r0, #16
   3392a:	4341      	muls	r1, r0
   3392c:	0015      	movs	r5, r2
   3392e:	4688      	mov	r8, r1
   33930:	0019      	movs	r1, r3
   33932:	437d      	muls	r5, r7
   33934:	4379      	muls	r1, r7
   33936:	9503      	str	r5, [sp, #12]
   33938:	4689      	mov	r9, r1
   3393a:	0029      	movs	r1, r5
   3393c:	0015      	movs	r5, r2
   3393e:	4345      	muls	r5, r0
   33940:	444d      	add	r5, r9
   33942:	9502      	str	r5, [sp, #8]
   33944:	4645      	mov	r5, r8
   33946:	0c2d      	lsrs	r5, r5, #16
   33948:	46aa      	mov	sl, r5
   3394a:	9d02      	ldr	r5, [sp, #8]
   3394c:	4455      	add	r5, sl
   3394e:	45a9      	cmp	r9, r5
   33950:	d906      	bls.n	33960 <__aeabi_dmul+0x238>
   33952:	468a      	mov	sl, r1
   33954:	2180      	movs	r1, #128	; 0x80
   33956:	0249      	lsls	r1, r1, #9
   33958:	4689      	mov	r9, r1
   3395a:	44ca      	add	sl, r9
   3395c:	4651      	mov	r1, sl
   3395e:	9103      	str	r1, [sp, #12]
   33960:	0c29      	lsrs	r1, r5, #16
   33962:	9104      	str	r1, [sp, #16]
   33964:	4641      	mov	r1, r8
   33966:	0409      	lsls	r1, r1, #16
   33968:	042d      	lsls	r5, r5, #16
   3396a:	0c09      	lsrs	r1, r1, #16
   3396c:	4688      	mov	r8, r1
   3396e:	0029      	movs	r1, r5
   33970:	0c25      	lsrs	r5, r4, #16
   33972:	0424      	lsls	r4, r4, #16
   33974:	4441      	add	r1, r8
   33976:	0c24      	lsrs	r4, r4, #16
   33978:	9105      	str	r1, [sp, #20]
   3397a:	0021      	movs	r1, r4
   3397c:	4341      	muls	r1, r0
   3397e:	4688      	mov	r8, r1
   33980:	0021      	movs	r1, r4
   33982:	4379      	muls	r1, r7
   33984:	468a      	mov	sl, r1
   33986:	4368      	muls	r0, r5
   33988:	4641      	mov	r1, r8
   3398a:	4450      	add	r0, sl
   3398c:	4681      	mov	r9, r0
   3398e:	0c08      	lsrs	r0, r1, #16
   33990:	4448      	add	r0, r9
   33992:	436f      	muls	r7, r5
   33994:	4582      	cmp	sl, r0
   33996:	d903      	bls.n	339a0 <__aeabi_dmul+0x278>
   33998:	2180      	movs	r1, #128	; 0x80
   3399a:	0249      	lsls	r1, r1, #9
   3399c:	4689      	mov	r9, r1
   3399e:	444f      	add	r7, r9
   339a0:	0c01      	lsrs	r1, r0, #16
   339a2:	4689      	mov	r9, r1
   339a4:	0039      	movs	r1, r7
   339a6:	4449      	add	r1, r9
   339a8:	9102      	str	r1, [sp, #8]
   339aa:	4641      	mov	r1, r8
   339ac:	040f      	lsls	r7, r1, #16
   339ae:	9904      	ldr	r1, [sp, #16]
   339b0:	0c3f      	lsrs	r7, r7, #16
   339b2:	4688      	mov	r8, r1
   339b4:	0400      	lsls	r0, r0, #16
   339b6:	19c0      	adds	r0, r0, r7
   339b8:	4480      	add	r8, r0
   339ba:	4641      	mov	r1, r8
   339bc:	9104      	str	r1, [sp, #16]
   339be:	4659      	mov	r1, fp
   339c0:	0c0f      	lsrs	r7, r1, #16
   339c2:	0409      	lsls	r1, r1, #16
   339c4:	0c09      	lsrs	r1, r1, #16
   339c6:	4688      	mov	r8, r1
   339c8:	4359      	muls	r1, r3
   339ca:	468a      	mov	sl, r1
   339cc:	0039      	movs	r1, r7
   339ce:	4351      	muls	r1, r2
   339d0:	4689      	mov	r9, r1
   339d2:	4641      	mov	r1, r8
   339d4:	434a      	muls	r2, r1
   339d6:	4651      	mov	r1, sl
   339d8:	0c09      	lsrs	r1, r1, #16
   339da:	468b      	mov	fp, r1
   339dc:	437b      	muls	r3, r7
   339de:	18d2      	adds	r2, r2, r3
   339e0:	445a      	add	r2, fp
   339e2:	4293      	cmp	r3, r2
   339e4:	d903      	bls.n	339ee <__aeabi_dmul+0x2c6>
   339e6:	2380      	movs	r3, #128	; 0x80
   339e8:	025b      	lsls	r3, r3, #9
   339ea:	469b      	mov	fp, r3
   339ec:	44d9      	add	r9, fp
   339ee:	4651      	mov	r1, sl
   339f0:	0409      	lsls	r1, r1, #16
   339f2:	0c09      	lsrs	r1, r1, #16
   339f4:	468a      	mov	sl, r1
   339f6:	4641      	mov	r1, r8
   339f8:	4361      	muls	r1, r4
   339fa:	437c      	muls	r4, r7
   339fc:	0c13      	lsrs	r3, r2, #16
   339fe:	0412      	lsls	r2, r2, #16
   33a00:	444b      	add	r3, r9
   33a02:	4452      	add	r2, sl
   33a04:	46a1      	mov	r9, r4
   33a06:	468a      	mov	sl, r1
   33a08:	003c      	movs	r4, r7
   33a0a:	4641      	mov	r1, r8
   33a0c:	436c      	muls	r4, r5
   33a0e:	434d      	muls	r5, r1
   33a10:	4651      	mov	r1, sl
   33a12:	444d      	add	r5, r9
   33a14:	0c0f      	lsrs	r7, r1, #16
   33a16:	197d      	adds	r5, r7, r5
   33a18:	45a9      	cmp	r9, r5
   33a1a:	d903      	bls.n	33a24 <__aeabi_dmul+0x2fc>
   33a1c:	2180      	movs	r1, #128	; 0x80
   33a1e:	0249      	lsls	r1, r1, #9
   33a20:	4688      	mov	r8, r1
   33a22:	4444      	add	r4, r8
   33a24:	9f04      	ldr	r7, [sp, #16]
   33a26:	9903      	ldr	r1, [sp, #12]
   33a28:	46b8      	mov	r8, r7
   33a2a:	4441      	add	r1, r8
   33a2c:	468b      	mov	fp, r1
   33a2e:	4583      	cmp	fp, r0
   33a30:	4180      	sbcs	r0, r0
   33a32:	4241      	negs	r1, r0
   33a34:	4688      	mov	r8, r1
   33a36:	4651      	mov	r1, sl
   33a38:	0408      	lsls	r0, r1, #16
   33a3a:	042f      	lsls	r7, r5, #16
   33a3c:	0c00      	lsrs	r0, r0, #16
   33a3e:	183f      	adds	r7, r7, r0
   33a40:	4658      	mov	r0, fp
   33a42:	9902      	ldr	r1, [sp, #8]
   33a44:	1810      	adds	r0, r2, r0
   33a46:	4689      	mov	r9, r1
   33a48:	4290      	cmp	r0, r2
   33a4a:	4192      	sbcs	r2, r2
   33a4c:	444f      	add	r7, r9
   33a4e:	46ba      	mov	sl, r7
   33a50:	4252      	negs	r2, r2
   33a52:	4699      	mov	r9, r3
   33a54:	4693      	mov	fp, r2
   33a56:	44c2      	add	sl, r8
   33a58:	44d1      	add	r9, sl
   33a5a:	44cb      	add	fp, r9
   33a5c:	428f      	cmp	r7, r1
   33a5e:	41bf      	sbcs	r7, r7
   33a60:	45c2      	cmp	sl, r8
   33a62:	4189      	sbcs	r1, r1
   33a64:	4599      	cmp	r9, r3
   33a66:	419b      	sbcs	r3, r3
   33a68:	4593      	cmp	fp, r2
   33a6a:	4192      	sbcs	r2, r2
   33a6c:	427f      	negs	r7, r7
   33a6e:	4249      	negs	r1, r1
   33a70:	0c2d      	lsrs	r5, r5, #16
   33a72:	4252      	negs	r2, r2
   33a74:	430f      	orrs	r7, r1
   33a76:	425b      	negs	r3, r3
   33a78:	4313      	orrs	r3, r2
   33a7a:	197f      	adds	r7, r7, r5
   33a7c:	18ff      	adds	r7, r7, r3
   33a7e:	465b      	mov	r3, fp
   33a80:	193c      	adds	r4, r7, r4
   33a82:	0ddb      	lsrs	r3, r3, #23
   33a84:	9a05      	ldr	r2, [sp, #20]
   33a86:	0264      	lsls	r4, r4, #9
   33a88:	431c      	orrs	r4, r3
   33a8a:	0243      	lsls	r3, r0, #9
   33a8c:	4313      	orrs	r3, r2
   33a8e:	1e5d      	subs	r5, r3, #1
   33a90:	41ab      	sbcs	r3, r5
   33a92:	465a      	mov	r2, fp
   33a94:	0dc0      	lsrs	r0, r0, #23
   33a96:	4303      	orrs	r3, r0
   33a98:	0252      	lsls	r2, r2, #9
   33a9a:	4313      	orrs	r3, r2
   33a9c:	01e2      	lsls	r2, r4, #7
   33a9e:	d556      	bpl.n	33b4e <__aeabi_dmul+0x426>
   33aa0:	2001      	movs	r0, #1
   33aa2:	085a      	lsrs	r2, r3, #1
   33aa4:	4003      	ands	r3, r0
   33aa6:	4313      	orrs	r3, r2
   33aa8:	07e2      	lsls	r2, r4, #31
   33aaa:	4313      	orrs	r3, r2
   33aac:	0864      	lsrs	r4, r4, #1
   33aae:	485a      	ldr	r0, [pc, #360]	; (33c18 <__aeabi_dmul+0x4f0>)
   33ab0:	4460      	add	r0, ip
   33ab2:	2800      	cmp	r0, #0
   33ab4:	dd4d      	ble.n	33b52 <__aeabi_dmul+0x42a>
   33ab6:	075a      	lsls	r2, r3, #29
   33ab8:	d009      	beq.n	33ace <__aeabi_dmul+0x3a6>
   33aba:	220f      	movs	r2, #15
   33abc:	401a      	ands	r2, r3
   33abe:	2a04      	cmp	r2, #4
   33ac0:	d005      	beq.n	33ace <__aeabi_dmul+0x3a6>
   33ac2:	1d1a      	adds	r2, r3, #4
   33ac4:	429a      	cmp	r2, r3
   33ac6:	419b      	sbcs	r3, r3
   33ac8:	425b      	negs	r3, r3
   33aca:	18e4      	adds	r4, r4, r3
   33acc:	0013      	movs	r3, r2
   33ace:	01e2      	lsls	r2, r4, #7
   33ad0:	d504      	bpl.n	33adc <__aeabi_dmul+0x3b4>
   33ad2:	2080      	movs	r0, #128	; 0x80
   33ad4:	4a51      	ldr	r2, [pc, #324]	; (33c1c <__aeabi_dmul+0x4f4>)
   33ad6:	00c0      	lsls	r0, r0, #3
   33ad8:	4014      	ands	r4, r2
   33ada:	4460      	add	r0, ip
   33adc:	4a50      	ldr	r2, [pc, #320]	; (33c20 <__aeabi_dmul+0x4f8>)
   33ade:	4290      	cmp	r0, r2
   33ae0:	dd00      	ble.n	33ae4 <__aeabi_dmul+0x3bc>
   33ae2:	e6e3      	b.n	338ac <__aeabi_dmul+0x184>
   33ae4:	2501      	movs	r5, #1
   33ae6:	08db      	lsrs	r3, r3, #3
   33ae8:	0762      	lsls	r2, r4, #29
   33aea:	431a      	orrs	r2, r3
   33aec:	0264      	lsls	r4, r4, #9
   33aee:	9b01      	ldr	r3, [sp, #4]
   33af0:	4691      	mov	r9, r2
   33af2:	0b22      	lsrs	r2, r4, #12
   33af4:	0544      	lsls	r4, r0, #21
   33af6:	0d64      	lsrs	r4, r4, #21
   33af8:	401d      	ands	r5, r3
   33afa:	e67c      	b.n	337f6 <__aeabi_dmul+0xce>
   33afc:	2280      	movs	r2, #128	; 0x80
   33afe:	4659      	mov	r1, fp
   33b00:	0312      	lsls	r2, r2, #12
   33b02:	4211      	tst	r1, r2
   33b04:	d008      	beq.n	33b18 <__aeabi_dmul+0x3f0>
   33b06:	4214      	tst	r4, r2
   33b08:	d106      	bne.n	33b18 <__aeabi_dmul+0x3f0>
   33b0a:	4322      	orrs	r2, r4
   33b0c:	0312      	lsls	r2, r2, #12
   33b0e:	0b12      	lsrs	r2, r2, #12
   33b10:	4645      	mov	r5, r8
   33b12:	4699      	mov	r9, r3
   33b14:	4c43      	ldr	r4, [pc, #268]	; (33c24 <__aeabi_dmul+0x4fc>)
   33b16:	e66e      	b.n	337f6 <__aeabi_dmul+0xce>
   33b18:	465b      	mov	r3, fp
   33b1a:	431a      	orrs	r2, r3
   33b1c:	0312      	lsls	r2, r2, #12
   33b1e:	0b12      	lsrs	r2, r2, #12
   33b20:	4c40      	ldr	r4, [pc, #256]	; (33c24 <__aeabi_dmul+0x4fc>)
   33b22:	e668      	b.n	337f6 <__aeabi_dmul+0xce>
   33b24:	0003      	movs	r3, r0
   33b26:	4654      	mov	r4, sl
   33b28:	3b28      	subs	r3, #40	; 0x28
   33b2a:	409c      	lsls	r4, r3
   33b2c:	2300      	movs	r3, #0
   33b2e:	e6b9      	b.n	338a4 <__aeabi_dmul+0x17c>
   33b30:	f000 fc36 	bl	343a0 <__clzsi2>
   33b34:	3020      	adds	r0, #32
   33b36:	e6a6      	b.n	33886 <__aeabi_dmul+0x15e>
   33b38:	0003      	movs	r3, r0
   33b3a:	3b28      	subs	r3, #40	; 0x28
   33b3c:	409f      	lsls	r7, r3
   33b3e:	2300      	movs	r3, #0
   33b40:	46bb      	mov	fp, r7
   33b42:	4699      	mov	r9, r3
   33b44:	e68a      	b.n	3385c <__aeabi_dmul+0x134>
   33b46:	f000 fc2b 	bl	343a0 <__clzsi2>
   33b4a:	3020      	adds	r0, #32
   33b4c:	e674      	b.n	33838 <__aeabi_dmul+0x110>
   33b4e:	46b4      	mov	ip, r6
   33b50:	e7ad      	b.n	33aae <__aeabi_dmul+0x386>
   33b52:	2501      	movs	r5, #1
   33b54:	1a2a      	subs	r2, r5, r0
   33b56:	2a38      	cmp	r2, #56	; 0x38
   33b58:	dd06      	ble.n	33b68 <__aeabi_dmul+0x440>
   33b5a:	9b01      	ldr	r3, [sp, #4]
   33b5c:	2400      	movs	r4, #0
   33b5e:	401d      	ands	r5, r3
   33b60:	2300      	movs	r3, #0
   33b62:	2200      	movs	r2, #0
   33b64:	4699      	mov	r9, r3
   33b66:	e646      	b.n	337f6 <__aeabi_dmul+0xce>
   33b68:	2a1f      	cmp	r2, #31
   33b6a:	dc21      	bgt.n	33bb0 <__aeabi_dmul+0x488>
   33b6c:	2520      	movs	r5, #32
   33b6e:	0020      	movs	r0, r4
   33b70:	1aad      	subs	r5, r5, r2
   33b72:	001e      	movs	r6, r3
   33b74:	40ab      	lsls	r3, r5
   33b76:	40a8      	lsls	r0, r5
   33b78:	40d6      	lsrs	r6, r2
   33b7a:	1e5d      	subs	r5, r3, #1
   33b7c:	41ab      	sbcs	r3, r5
   33b7e:	4330      	orrs	r0, r6
   33b80:	4318      	orrs	r0, r3
   33b82:	40d4      	lsrs	r4, r2
   33b84:	0743      	lsls	r3, r0, #29
   33b86:	d009      	beq.n	33b9c <__aeabi_dmul+0x474>
   33b88:	230f      	movs	r3, #15
   33b8a:	4003      	ands	r3, r0
   33b8c:	2b04      	cmp	r3, #4
   33b8e:	d005      	beq.n	33b9c <__aeabi_dmul+0x474>
   33b90:	0003      	movs	r3, r0
   33b92:	1d18      	adds	r0, r3, #4
   33b94:	4298      	cmp	r0, r3
   33b96:	419b      	sbcs	r3, r3
   33b98:	425b      	negs	r3, r3
   33b9a:	18e4      	adds	r4, r4, r3
   33b9c:	0223      	lsls	r3, r4, #8
   33b9e:	d521      	bpl.n	33be4 <__aeabi_dmul+0x4bc>
   33ba0:	2501      	movs	r5, #1
   33ba2:	9b01      	ldr	r3, [sp, #4]
   33ba4:	2401      	movs	r4, #1
   33ba6:	401d      	ands	r5, r3
   33ba8:	2300      	movs	r3, #0
   33baa:	2200      	movs	r2, #0
   33bac:	4699      	mov	r9, r3
   33bae:	e622      	b.n	337f6 <__aeabi_dmul+0xce>
   33bb0:	251f      	movs	r5, #31
   33bb2:	0021      	movs	r1, r4
   33bb4:	426d      	negs	r5, r5
   33bb6:	1a28      	subs	r0, r5, r0
   33bb8:	40c1      	lsrs	r1, r0
   33bba:	0008      	movs	r0, r1
   33bbc:	2a20      	cmp	r2, #32
   33bbe:	d01d      	beq.n	33bfc <__aeabi_dmul+0x4d4>
   33bc0:	355f      	adds	r5, #95	; 0x5f
   33bc2:	1aaa      	subs	r2, r5, r2
   33bc4:	4094      	lsls	r4, r2
   33bc6:	4323      	orrs	r3, r4
   33bc8:	1e5c      	subs	r4, r3, #1
   33bca:	41a3      	sbcs	r3, r4
   33bcc:	2507      	movs	r5, #7
   33bce:	4303      	orrs	r3, r0
   33bd0:	401d      	ands	r5, r3
   33bd2:	2200      	movs	r2, #0
   33bd4:	2d00      	cmp	r5, #0
   33bd6:	d009      	beq.n	33bec <__aeabi_dmul+0x4c4>
   33bd8:	220f      	movs	r2, #15
   33bda:	2400      	movs	r4, #0
   33bdc:	401a      	ands	r2, r3
   33bde:	0018      	movs	r0, r3
   33be0:	2a04      	cmp	r2, #4
   33be2:	d1d6      	bne.n	33b92 <__aeabi_dmul+0x46a>
   33be4:	0003      	movs	r3, r0
   33be6:	0765      	lsls	r5, r4, #29
   33be8:	0264      	lsls	r4, r4, #9
   33bea:	0b22      	lsrs	r2, r4, #12
   33bec:	08db      	lsrs	r3, r3, #3
   33bee:	432b      	orrs	r3, r5
   33bf0:	2501      	movs	r5, #1
   33bf2:	4699      	mov	r9, r3
   33bf4:	9b01      	ldr	r3, [sp, #4]
   33bf6:	2400      	movs	r4, #0
   33bf8:	401d      	ands	r5, r3
   33bfa:	e5fc      	b.n	337f6 <__aeabi_dmul+0xce>
   33bfc:	2400      	movs	r4, #0
   33bfe:	e7e2      	b.n	33bc6 <__aeabi_dmul+0x49e>
   33c00:	2280      	movs	r2, #128	; 0x80
   33c02:	2501      	movs	r5, #1
   33c04:	0312      	lsls	r2, r2, #12
   33c06:	4322      	orrs	r2, r4
   33c08:	9901      	ldr	r1, [sp, #4]
   33c0a:	0312      	lsls	r2, r2, #12
   33c0c:	0b12      	lsrs	r2, r2, #12
   33c0e:	400d      	ands	r5, r1
   33c10:	4699      	mov	r9, r3
   33c12:	4c04      	ldr	r4, [pc, #16]	; (33c24 <__aeabi_dmul+0x4fc>)
   33c14:	e5ef      	b.n	337f6 <__aeabi_dmul+0xce>
   33c16:	46c0      	nop			; (mov r8, r8)
   33c18:	000003ff 	.word	0x000003ff
   33c1c:	feffffff 	.word	0xfeffffff
   33c20:	000007fe 	.word	0x000007fe
   33c24:	000007ff 	.word	0x000007ff

00033c28 <__aeabi_dsub>:
   33c28:	b5f0      	push	{r4, r5, r6, r7, lr}
   33c2a:	4646      	mov	r6, r8
   33c2c:	46d6      	mov	lr, sl
   33c2e:	464f      	mov	r7, r9
   33c30:	030c      	lsls	r4, r1, #12
   33c32:	b5c0      	push	{r6, r7, lr}
   33c34:	0fcd      	lsrs	r5, r1, #31
   33c36:	004e      	lsls	r6, r1, #1
   33c38:	0a61      	lsrs	r1, r4, #9
   33c3a:	0f44      	lsrs	r4, r0, #29
   33c3c:	430c      	orrs	r4, r1
   33c3e:	00c1      	lsls	r1, r0, #3
   33c40:	0058      	lsls	r0, r3, #1
   33c42:	0d40      	lsrs	r0, r0, #21
   33c44:	4684      	mov	ip, r0
   33c46:	468a      	mov	sl, r1
   33c48:	000f      	movs	r7, r1
   33c4a:	0319      	lsls	r1, r3, #12
   33c4c:	0f50      	lsrs	r0, r2, #29
   33c4e:	0a49      	lsrs	r1, r1, #9
   33c50:	4301      	orrs	r1, r0
   33c52:	48c6      	ldr	r0, [pc, #792]	; (33f6c <__aeabi_dsub+0x344>)
   33c54:	0d76      	lsrs	r6, r6, #21
   33c56:	46a8      	mov	r8, r5
   33c58:	0fdb      	lsrs	r3, r3, #31
   33c5a:	00d2      	lsls	r2, r2, #3
   33c5c:	4584      	cmp	ip, r0
   33c5e:	d100      	bne.n	33c62 <__aeabi_dsub+0x3a>
   33c60:	e0d8      	b.n	33e14 <__aeabi_dsub+0x1ec>
   33c62:	2001      	movs	r0, #1
   33c64:	4043      	eors	r3, r0
   33c66:	42ab      	cmp	r3, r5
   33c68:	d100      	bne.n	33c6c <__aeabi_dsub+0x44>
   33c6a:	e0a6      	b.n	33dba <__aeabi_dsub+0x192>
   33c6c:	4660      	mov	r0, ip
   33c6e:	1a35      	subs	r5, r6, r0
   33c70:	2d00      	cmp	r5, #0
   33c72:	dc00      	bgt.n	33c76 <__aeabi_dsub+0x4e>
   33c74:	e105      	b.n	33e82 <__aeabi_dsub+0x25a>
   33c76:	2800      	cmp	r0, #0
   33c78:	d110      	bne.n	33c9c <__aeabi_dsub+0x74>
   33c7a:	000b      	movs	r3, r1
   33c7c:	4313      	orrs	r3, r2
   33c7e:	d100      	bne.n	33c82 <__aeabi_dsub+0x5a>
   33c80:	e0d7      	b.n	33e32 <__aeabi_dsub+0x20a>
   33c82:	1e6b      	subs	r3, r5, #1
   33c84:	2b00      	cmp	r3, #0
   33c86:	d000      	beq.n	33c8a <__aeabi_dsub+0x62>
   33c88:	e14b      	b.n	33f22 <__aeabi_dsub+0x2fa>
   33c8a:	4653      	mov	r3, sl
   33c8c:	1a9f      	subs	r7, r3, r2
   33c8e:	45ba      	cmp	sl, r7
   33c90:	4180      	sbcs	r0, r0
   33c92:	1a64      	subs	r4, r4, r1
   33c94:	4240      	negs	r0, r0
   33c96:	1a24      	subs	r4, r4, r0
   33c98:	2601      	movs	r6, #1
   33c9a:	e01e      	b.n	33cda <__aeabi_dsub+0xb2>
   33c9c:	4bb3      	ldr	r3, [pc, #716]	; (33f6c <__aeabi_dsub+0x344>)
   33c9e:	429e      	cmp	r6, r3
   33ca0:	d048      	beq.n	33d34 <__aeabi_dsub+0x10c>
   33ca2:	2380      	movs	r3, #128	; 0x80
   33ca4:	041b      	lsls	r3, r3, #16
   33ca6:	4319      	orrs	r1, r3
   33ca8:	2d38      	cmp	r5, #56	; 0x38
   33caa:	dd00      	ble.n	33cae <__aeabi_dsub+0x86>
   33cac:	e119      	b.n	33ee2 <__aeabi_dsub+0x2ba>
   33cae:	2d1f      	cmp	r5, #31
   33cb0:	dd00      	ble.n	33cb4 <__aeabi_dsub+0x8c>
   33cb2:	e14c      	b.n	33f4e <__aeabi_dsub+0x326>
   33cb4:	2320      	movs	r3, #32
   33cb6:	000f      	movs	r7, r1
   33cb8:	1b5b      	subs	r3, r3, r5
   33cba:	0010      	movs	r0, r2
   33cbc:	409a      	lsls	r2, r3
   33cbe:	409f      	lsls	r7, r3
   33cc0:	40e8      	lsrs	r0, r5
   33cc2:	1e53      	subs	r3, r2, #1
   33cc4:	419a      	sbcs	r2, r3
   33cc6:	40e9      	lsrs	r1, r5
   33cc8:	4307      	orrs	r7, r0
   33cca:	4317      	orrs	r7, r2
   33ccc:	4653      	mov	r3, sl
   33cce:	1bdf      	subs	r7, r3, r7
   33cd0:	1a61      	subs	r1, r4, r1
   33cd2:	45ba      	cmp	sl, r7
   33cd4:	41a4      	sbcs	r4, r4
   33cd6:	4264      	negs	r4, r4
   33cd8:	1b0c      	subs	r4, r1, r4
   33cda:	0223      	lsls	r3, r4, #8
   33cdc:	d400      	bmi.n	33ce0 <__aeabi_dsub+0xb8>
   33cde:	e0c5      	b.n	33e6c <__aeabi_dsub+0x244>
   33ce0:	0264      	lsls	r4, r4, #9
   33ce2:	0a65      	lsrs	r5, r4, #9
   33ce4:	2d00      	cmp	r5, #0
   33ce6:	d100      	bne.n	33cea <__aeabi_dsub+0xc2>
   33ce8:	e0f6      	b.n	33ed8 <__aeabi_dsub+0x2b0>
   33cea:	0028      	movs	r0, r5
   33cec:	f000 fb58 	bl	343a0 <__clzsi2>
   33cf0:	0003      	movs	r3, r0
   33cf2:	3b08      	subs	r3, #8
   33cf4:	2b1f      	cmp	r3, #31
   33cf6:	dd00      	ble.n	33cfa <__aeabi_dsub+0xd2>
   33cf8:	e0e9      	b.n	33ece <__aeabi_dsub+0x2a6>
   33cfa:	2220      	movs	r2, #32
   33cfc:	003c      	movs	r4, r7
   33cfe:	1ad2      	subs	r2, r2, r3
   33d00:	409d      	lsls	r5, r3
   33d02:	40d4      	lsrs	r4, r2
   33d04:	409f      	lsls	r7, r3
   33d06:	4325      	orrs	r5, r4
   33d08:	429e      	cmp	r6, r3
   33d0a:	dd00      	ble.n	33d0e <__aeabi_dsub+0xe6>
   33d0c:	e0db      	b.n	33ec6 <__aeabi_dsub+0x29e>
   33d0e:	1b9e      	subs	r6, r3, r6
   33d10:	1c73      	adds	r3, r6, #1
   33d12:	2b1f      	cmp	r3, #31
   33d14:	dd00      	ble.n	33d18 <__aeabi_dsub+0xf0>
   33d16:	e10a      	b.n	33f2e <__aeabi_dsub+0x306>
   33d18:	2220      	movs	r2, #32
   33d1a:	0038      	movs	r0, r7
   33d1c:	1ad2      	subs	r2, r2, r3
   33d1e:	0029      	movs	r1, r5
   33d20:	4097      	lsls	r7, r2
   33d22:	002c      	movs	r4, r5
   33d24:	4091      	lsls	r1, r2
   33d26:	40d8      	lsrs	r0, r3
   33d28:	1e7a      	subs	r2, r7, #1
   33d2a:	4197      	sbcs	r7, r2
   33d2c:	40dc      	lsrs	r4, r3
   33d2e:	2600      	movs	r6, #0
   33d30:	4301      	orrs	r1, r0
   33d32:	430f      	orrs	r7, r1
   33d34:	077b      	lsls	r3, r7, #29
   33d36:	d009      	beq.n	33d4c <__aeabi_dsub+0x124>
   33d38:	230f      	movs	r3, #15
   33d3a:	403b      	ands	r3, r7
   33d3c:	2b04      	cmp	r3, #4
   33d3e:	d005      	beq.n	33d4c <__aeabi_dsub+0x124>
   33d40:	1d3b      	adds	r3, r7, #4
   33d42:	42bb      	cmp	r3, r7
   33d44:	41bf      	sbcs	r7, r7
   33d46:	427f      	negs	r7, r7
   33d48:	19e4      	adds	r4, r4, r7
   33d4a:	001f      	movs	r7, r3
   33d4c:	0223      	lsls	r3, r4, #8
   33d4e:	d525      	bpl.n	33d9c <__aeabi_dsub+0x174>
   33d50:	4b86      	ldr	r3, [pc, #536]	; (33f6c <__aeabi_dsub+0x344>)
   33d52:	3601      	adds	r6, #1
   33d54:	429e      	cmp	r6, r3
   33d56:	d100      	bne.n	33d5a <__aeabi_dsub+0x132>
   33d58:	e0af      	b.n	33eba <__aeabi_dsub+0x292>
   33d5a:	4b85      	ldr	r3, [pc, #532]	; (33f70 <__aeabi_dsub+0x348>)
   33d5c:	2501      	movs	r5, #1
   33d5e:	401c      	ands	r4, r3
   33d60:	4643      	mov	r3, r8
   33d62:	0762      	lsls	r2, r4, #29
   33d64:	08ff      	lsrs	r7, r7, #3
   33d66:	0264      	lsls	r4, r4, #9
   33d68:	0576      	lsls	r6, r6, #21
   33d6a:	4317      	orrs	r7, r2
   33d6c:	0b24      	lsrs	r4, r4, #12
   33d6e:	0d76      	lsrs	r6, r6, #21
   33d70:	401d      	ands	r5, r3
   33d72:	2100      	movs	r1, #0
   33d74:	0324      	lsls	r4, r4, #12
   33d76:	0b23      	lsrs	r3, r4, #12
   33d78:	0d0c      	lsrs	r4, r1, #20
   33d7a:	4a7e      	ldr	r2, [pc, #504]	; (33f74 <__aeabi_dsub+0x34c>)
   33d7c:	0524      	lsls	r4, r4, #20
   33d7e:	431c      	orrs	r4, r3
   33d80:	4014      	ands	r4, r2
   33d82:	0533      	lsls	r3, r6, #20
   33d84:	4323      	orrs	r3, r4
   33d86:	005b      	lsls	r3, r3, #1
   33d88:	07ed      	lsls	r5, r5, #31
   33d8a:	085b      	lsrs	r3, r3, #1
   33d8c:	432b      	orrs	r3, r5
   33d8e:	0038      	movs	r0, r7
   33d90:	0019      	movs	r1, r3
   33d92:	bc1c      	pop	{r2, r3, r4}
   33d94:	4690      	mov	r8, r2
   33d96:	4699      	mov	r9, r3
   33d98:	46a2      	mov	sl, r4
   33d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33d9c:	2501      	movs	r5, #1
   33d9e:	4643      	mov	r3, r8
   33da0:	0762      	lsls	r2, r4, #29
   33da2:	08ff      	lsrs	r7, r7, #3
   33da4:	4317      	orrs	r7, r2
   33da6:	08e4      	lsrs	r4, r4, #3
   33da8:	401d      	ands	r5, r3
   33daa:	4b70      	ldr	r3, [pc, #448]	; (33f6c <__aeabi_dsub+0x344>)
   33dac:	429e      	cmp	r6, r3
   33dae:	d036      	beq.n	33e1e <__aeabi_dsub+0x1f6>
   33db0:	0324      	lsls	r4, r4, #12
   33db2:	0576      	lsls	r6, r6, #21
   33db4:	0b24      	lsrs	r4, r4, #12
   33db6:	0d76      	lsrs	r6, r6, #21
   33db8:	e7db      	b.n	33d72 <__aeabi_dsub+0x14a>
   33dba:	4663      	mov	r3, ip
   33dbc:	1af3      	subs	r3, r6, r3
   33dbe:	2b00      	cmp	r3, #0
   33dc0:	dc00      	bgt.n	33dc4 <__aeabi_dsub+0x19c>
   33dc2:	e094      	b.n	33eee <__aeabi_dsub+0x2c6>
   33dc4:	4660      	mov	r0, ip
   33dc6:	2800      	cmp	r0, #0
   33dc8:	d035      	beq.n	33e36 <__aeabi_dsub+0x20e>
   33dca:	4868      	ldr	r0, [pc, #416]	; (33f6c <__aeabi_dsub+0x344>)
   33dcc:	4286      	cmp	r6, r0
   33dce:	d0b1      	beq.n	33d34 <__aeabi_dsub+0x10c>
   33dd0:	2780      	movs	r7, #128	; 0x80
   33dd2:	043f      	lsls	r7, r7, #16
   33dd4:	4339      	orrs	r1, r7
   33dd6:	2b38      	cmp	r3, #56	; 0x38
   33dd8:	dc00      	bgt.n	33ddc <__aeabi_dsub+0x1b4>
   33dda:	e0fd      	b.n	33fd8 <__aeabi_dsub+0x3b0>
   33ddc:	430a      	orrs	r2, r1
   33dde:	0017      	movs	r7, r2
   33de0:	2100      	movs	r1, #0
   33de2:	1e7a      	subs	r2, r7, #1
   33de4:	4197      	sbcs	r7, r2
   33de6:	4457      	add	r7, sl
   33de8:	4557      	cmp	r7, sl
   33dea:	4180      	sbcs	r0, r0
   33dec:	1909      	adds	r1, r1, r4
   33dee:	4244      	negs	r4, r0
   33df0:	190c      	adds	r4, r1, r4
   33df2:	0223      	lsls	r3, r4, #8
   33df4:	d53a      	bpl.n	33e6c <__aeabi_dsub+0x244>
   33df6:	4b5d      	ldr	r3, [pc, #372]	; (33f6c <__aeabi_dsub+0x344>)
   33df8:	3601      	adds	r6, #1
   33dfa:	429e      	cmp	r6, r3
   33dfc:	d100      	bne.n	33e00 <__aeabi_dsub+0x1d8>
   33dfe:	e14b      	b.n	34098 <__aeabi_dsub+0x470>
   33e00:	2201      	movs	r2, #1
   33e02:	4b5b      	ldr	r3, [pc, #364]	; (33f70 <__aeabi_dsub+0x348>)
   33e04:	401c      	ands	r4, r3
   33e06:	087b      	lsrs	r3, r7, #1
   33e08:	4017      	ands	r7, r2
   33e0a:	431f      	orrs	r7, r3
   33e0c:	07e2      	lsls	r2, r4, #31
   33e0e:	4317      	orrs	r7, r2
   33e10:	0864      	lsrs	r4, r4, #1
   33e12:	e78f      	b.n	33d34 <__aeabi_dsub+0x10c>
   33e14:	0008      	movs	r0, r1
   33e16:	4310      	orrs	r0, r2
   33e18:	d000      	beq.n	33e1c <__aeabi_dsub+0x1f4>
   33e1a:	e724      	b.n	33c66 <__aeabi_dsub+0x3e>
   33e1c:	e721      	b.n	33c62 <__aeabi_dsub+0x3a>
   33e1e:	0023      	movs	r3, r4
   33e20:	433b      	orrs	r3, r7
   33e22:	d100      	bne.n	33e26 <__aeabi_dsub+0x1fe>
   33e24:	e1b9      	b.n	3419a <__aeabi_dsub+0x572>
   33e26:	2280      	movs	r2, #128	; 0x80
   33e28:	0312      	lsls	r2, r2, #12
   33e2a:	4314      	orrs	r4, r2
   33e2c:	0324      	lsls	r4, r4, #12
   33e2e:	0b24      	lsrs	r4, r4, #12
   33e30:	e79f      	b.n	33d72 <__aeabi_dsub+0x14a>
   33e32:	002e      	movs	r6, r5
   33e34:	e77e      	b.n	33d34 <__aeabi_dsub+0x10c>
   33e36:	0008      	movs	r0, r1
   33e38:	4310      	orrs	r0, r2
   33e3a:	d100      	bne.n	33e3e <__aeabi_dsub+0x216>
   33e3c:	e0ca      	b.n	33fd4 <__aeabi_dsub+0x3ac>
   33e3e:	1e58      	subs	r0, r3, #1
   33e40:	4684      	mov	ip, r0
   33e42:	2800      	cmp	r0, #0
   33e44:	d000      	beq.n	33e48 <__aeabi_dsub+0x220>
   33e46:	e0e7      	b.n	34018 <__aeabi_dsub+0x3f0>
   33e48:	4452      	add	r2, sl
   33e4a:	4552      	cmp	r2, sl
   33e4c:	4180      	sbcs	r0, r0
   33e4e:	1864      	adds	r4, r4, r1
   33e50:	4240      	negs	r0, r0
   33e52:	1824      	adds	r4, r4, r0
   33e54:	0017      	movs	r7, r2
   33e56:	2601      	movs	r6, #1
   33e58:	0223      	lsls	r3, r4, #8
   33e5a:	d507      	bpl.n	33e6c <__aeabi_dsub+0x244>
   33e5c:	2602      	movs	r6, #2
   33e5e:	e7cf      	b.n	33e00 <__aeabi_dsub+0x1d8>
   33e60:	4664      	mov	r4, ip
   33e62:	432c      	orrs	r4, r5
   33e64:	d100      	bne.n	33e68 <__aeabi_dsub+0x240>
   33e66:	e1b3      	b.n	341d0 <__aeabi_dsub+0x5a8>
   33e68:	002c      	movs	r4, r5
   33e6a:	4667      	mov	r7, ip
   33e6c:	077b      	lsls	r3, r7, #29
   33e6e:	d000      	beq.n	33e72 <__aeabi_dsub+0x24a>
   33e70:	e762      	b.n	33d38 <__aeabi_dsub+0x110>
   33e72:	0763      	lsls	r3, r4, #29
   33e74:	08ff      	lsrs	r7, r7, #3
   33e76:	431f      	orrs	r7, r3
   33e78:	2501      	movs	r5, #1
   33e7a:	4643      	mov	r3, r8
   33e7c:	08e4      	lsrs	r4, r4, #3
   33e7e:	401d      	ands	r5, r3
   33e80:	e793      	b.n	33daa <__aeabi_dsub+0x182>
   33e82:	2d00      	cmp	r5, #0
   33e84:	d178      	bne.n	33f78 <__aeabi_dsub+0x350>
   33e86:	1c75      	adds	r5, r6, #1
   33e88:	056d      	lsls	r5, r5, #21
   33e8a:	0d6d      	lsrs	r5, r5, #21
   33e8c:	2d01      	cmp	r5, #1
   33e8e:	dc00      	bgt.n	33e92 <__aeabi_dsub+0x26a>
   33e90:	e0f2      	b.n	34078 <__aeabi_dsub+0x450>
   33e92:	4650      	mov	r0, sl
   33e94:	1a80      	subs	r0, r0, r2
   33e96:	4582      	cmp	sl, r0
   33e98:	41bf      	sbcs	r7, r7
   33e9a:	1a65      	subs	r5, r4, r1
   33e9c:	427f      	negs	r7, r7
   33e9e:	1bed      	subs	r5, r5, r7
   33ea0:	4684      	mov	ip, r0
   33ea2:	0228      	lsls	r0, r5, #8
   33ea4:	d400      	bmi.n	33ea8 <__aeabi_dsub+0x280>
   33ea6:	e08c      	b.n	33fc2 <__aeabi_dsub+0x39a>
   33ea8:	4650      	mov	r0, sl
   33eaa:	1a17      	subs	r7, r2, r0
   33eac:	42ba      	cmp	r2, r7
   33eae:	4192      	sbcs	r2, r2
   33eb0:	1b0c      	subs	r4, r1, r4
   33eb2:	4255      	negs	r5, r2
   33eb4:	1b65      	subs	r5, r4, r5
   33eb6:	4698      	mov	r8, r3
   33eb8:	e714      	b.n	33ce4 <__aeabi_dsub+0xbc>
   33eba:	2501      	movs	r5, #1
   33ebc:	4643      	mov	r3, r8
   33ebe:	2400      	movs	r4, #0
   33ec0:	401d      	ands	r5, r3
   33ec2:	2700      	movs	r7, #0
   33ec4:	e755      	b.n	33d72 <__aeabi_dsub+0x14a>
   33ec6:	4c2a      	ldr	r4, [pc, #168]	; (33f70 <__aeabi_dsub+0x348>)
   33ec8:	1af6      	subs	r6, r6, r3
   33eca:	402c      	ands	r4, r5
   33ecc:	e732      	b.n	33d34 <__aeabi_dsub+0x10c>
   33ece:	003d      	movs	r5, r7
   33ed0:	3828      	subs	r0, #40	; 0x28
   33ed2:	4085      	lsls	r5, r0
   33ed4:	2700      	movs	r7, #0
   33ed6:	e717      	b.n	33d08 <__aeabi_dsub+0xe0>
   33ed8:	0038      	movs	r0, r7
   33eda:	f000 fa61 	bl	343a0 <__clzsi2>
   33ede:	3020      	adds	r0, #32
   33ee0:	e706      	b.n	33cf0 <__aeabi_dsub+0xc8>
   33ee2:	430a      	orrs	r2, r1
   33ee4:	0017      	movs	r7, r2
   33ee6:	2100      	movs	r1, #0
   33ee8:	1e7a      	subs	r2, r7, #1
   33eea:	4197      	sbcs	r7, r2
   33eec:	e6ee      	b.n	33ccc <__aeabi_dsub+0xa4>
   33eee:	2b00      	cmp	r3, #0
   33ef0:	d000      	beq.n	33ef4 <__aeabi_dsub+0x2cc>
   33ef2:	e0e5      	b.n	340c0 <__aeabi_dsub+0x498>
   33ef4:	1c73      	adds	r3, r6, #1
   33ef6:	469c      	mov	ip, r3
   33ef8:	055b      	lsls	r3, r3, #21
   33efa:	0d5b      	lsrs	r3, r3, #21
   33efc:	2b01      	cmp	r3, #1
   33efe:	dc00      	bgt.n	33f02 <__aeabi_dsub+0x2da>
   33f00:	e09f      	b.n	34042 <__aeabi_dsub+0x41a>
   33f02:	4b1a      	ldr	r3, [pc, #104]	; (33f6c <__aeabi_dsub+0x344>)
   33f04:	459c      	cmp	ip, r3
   33f06:	d100      	bne.n	33f0a <__aeabi_dsub+0x2e2>
   33f08:	e0c5      	b.n	34096 <__aeabi_dsub+0x46e>
   33f0a:	4452      	add	r2, sl
   33f0c:	4552      	cmp	r2, sl
   33f0e:	4180      	sbcs	r0, r0
   33f10:	1864      	adds	r4, r4, r1
   33f12:	4240      	negs	r0, r0
   33f14:	1824      	adds	r4, r4, r0
   33f16:	07e7      	lsls	r7, r4, #31
   33f18:	0852      	lsrs	r2, r2, #1
   33f1a:	4317      	orrs	r7, r2
   33f1c:	0864      	lsrs	r4, r4, #1
   33f1e:	4666      	mov	r6, ip
   33f20:	e708      	b.n	33d34 <__aeabi_dsub+0x10c>
   33f22:	4812      	ldr	r0, [pc, #72]	; (33f6c <__aeabi_dsub+0x344>)
   33f24:	4285      	cmp	r5, r0
   33f26:	d100      	bne.n	33f2a <__aeabi_dsub+0x302>
   33f28:	e085      	b.n	34036 <__aeabi_dsub+0x40e>
   33f2a:	001d      	movs	r5, r3
   33f2c:	e6bc      	b.n	33ca8 <__aeabi_dsub+0x80>
   33f2e:	0029      	movs	r1, r5
   33f30:	3e1f      	subs	r6, #31
   33f32:	40f1      	lsrs	r1, r6
   33f34:	2b20      	cmp	r3, #32
   33f36:	d100      	bne.n	33f3a <__aeabi_dsub+0x312>
   33f38:	e07f      	b.n	3403a <__aeabi_dsub+0x412>
   33f3a:	2240      	movs	r2, #64	; 0x40
   33f3c:	1ad3      	subs	r3, r2, r3
   33f3e:	409d      	lsls	r5, r3
   33f40:	432f      	orrs	r7, r5
   33f42:	1e7d      	subs	r5, r7, #1
   33f44:	41af      	sbcs	r7, r5
   33f46:	2400      	movs	r4, #0
   33f48:	430f      	orrs	r7, r1
   33f4a:	2600      	movs	r6, #0
   33f4c:	e78e      	b.n	33e6c <__aeabi_dsub+0x244>
   33f4e:	002b      	movs	r3, r5
   33f50:	000f      	movs	r7, r1
   33f52:	3b20      	subs	r3, #32
   33f54:	40df      	lsrs	r7, r3
   33f56:	2d20      	cmp	r5, #32
   33f58:	d071      	beq.n	3403e <__aeabi_dsub+0x416>
   33f5a:	2340      	movs	r3, #64	; 0x40
   33f5c:	1b5d      	subs	r5, r3, r5
   33f5e:	40a9      	lsls	r1, r5
   33f60:	430a      	orrs	r2, r1
   33f62:	1e51      	subs	r1, r2, #1
   33f64:	418a      	sbcs	r2, r1
   33f66:	2100      	movs	r1, #0
   33f68:	4317      	orrs	r7, r2
   33f6a:	e6af      	b.n	33ccc <__aeabi_dsub+0xa4>
   33f6c:	000007ff 	.word	0x000007ff
   33f70:	ff7fffff 	.word	0xff7fffff
   33f74:	800fffff 	.word	0x800fffff
   33f78:	2e00      	cmp	r6, #0
   33f7a:	d03e      	beq.n	33ffa <__aeabi_dsub+0x3d2>
   33f7c:	4eb3      	ldr	r6, [pc, #716]	; (3424c <__aeabi_dsub+0x624>)
   33f7e:	45b4      	cmp	ip, r6
   33f80:	d045      	beq.n	3400e <__aeabi_dsub+0x3e6>
   33f82:	2680      	movs	r6, #128	; 0x80
   33f84:	0436      	lsls	r6, r6, #16
   33f86:	426d      	negs	r5, r5
   33f88:	4334      	orrs	r4, r6
   33f8a:	2d38      	cmp	r5, #56	; 0x38
   33f8c:	dd00      	ble.n	33f90 <__aeabi_dsub+0x368>
   33f8e:	e0a8      	b.n	340e2 <__aeabi_dsub+0x4ba>
   33f90:	2d1f      	cmp	r5, #31
   33f92:	dd00      	ble.n	33f96 <__aeabi_dsub+0x36e>
   33f94:	e11f      	b.n	341d6 <__aeabi_dsub+0x5ae>
   33f96:	2620      	movs	r6, #32
   33f98:	0027      	movs	r7, r4
   33f9a:	4650      	mov	r0, sl
   33f9c:	1b76      	subs	r6, r6, r5
   33f9e:	40b7      	lsls	r7, r6
   33fa0:	40e8      	lsrs	r0, r5
   33fa2:	4307      	orrs	r7, r0
   33fa4:	4650      	mov	r0, sl
   33fa6:	40b0      	lsls	r0, r6
   33fa8:	1e46      	subs	r6, r0, #1
   33faa:	41b0      	sbcs	r0, r6
   33fac:	40ec      	lsrs	r4, r5
   33fae:	4338      	orrs	r0, r7
   33fb0:	1a17      	subs	r7, r2, r0
   33fb2:	42ba      	cmp	r2, r7
   33fb4:	4192      	sbcs	r2, r2
   33fb6:	1b0c      	subs	r4, r1, r4
   33fb8:	4252      	negs	r2, r2
   33fba:	1aa4      	subs	r4, r4, r2
   33fbc:	4666      	mov	r6, ip
   33fbe:	4698      	mov	r8, r3
   33fc0:	e68b      	b.n	33cda <__aeabi_dsub+0xb2>
   33fc2:	4664      	mov	r4, ip
   33fc4:	4667      	mov	r7, ip
   33fc6:	432c      	orrs	r4, r5
   33fc8:	d000      	beq.n	33fcc <__aeabi_dsub+0x3a4>
   33fca:	e68b      	b.n	33ce4 <__aeabi_dsub+0xbc>
   33fcc:	2500      	movs	r5, #0
   33fce:	2600      	movs	r6, #0
   33fd0:	2700      	movs	r7, #0
   33fd2:	e6ea      	b.n	33daa <__aeabi_dsub+0x182>
   33fd4:	001e      	movs	r6, r3
   33fd6:	e6ad      	b.n	33d34 <__aeabi_dsub+0x10c>
   33fd8:	2b1f      	cmp	r3, #31
   33fda:	dc60      	bgt.n	3409e <__aeabi_dsub+0x476>
   33fdc:	2720      	movs	r7, #32
   33fde:	1af8      	subs	r0, r7, r3
   33fe0:	000f      	movs	r7, r1
   33fe2:	4684      	mov	ip, r0
   33fe4:	4087      	lsls	r7, r0
   33fe6:	0010      	movs	r0, r2
   33fe8:	40d8      	lsrs	r0, r3
   33fea:	4307      	orrs	r7, r0
   33fec:	4660      	mov	r0, ip
   33fee:	4082      	lsls	r2, r0
   33ff0:	1e50      	subs	r0, r2, #1
   33ff2:	4182      	sbcs	r2, r0
   33ff4:	40d9      	lsrs	r1, r3
   33ff6:	4317      	orrs	r7, r2
   33ff8:	e6f5      	b.n	33de6 <__aeabi_dsub+0x1be>
   33ffa:	0026      	movs	r6, r4
   33ffc:	4650      	mov	r0, sl
   33ffe:	4306      	orrs	r6, r0
   34000:	d005      	beq.n	3400e <__aeabi_dsub+0x3e6>
   34002:	43ed      	mvns	r5, r5
   34004:	2d00      	cmp	r5, #0
   34006:	d0d3      	beq.n	33fb0 <__aeabi_dsub+0x388>
   34008:	4e90      	ldr	r6, [pc, #576]	; (3424c <__aeabi_dsub+0x624>)
   3400a:	45b4      	cmp	ip, r6
   3400c:	d1bd      	bne.n	33f8a <__aeabi_dsub+0x362>
   3400e:	000c      	movs	r4, r1
   34010:	0017      	movs	r7, r2
   34012:	4666      	mov	r6, ip
   34014:	4698      	mov	r8, r3
   34016:	e68d      	b.n	33d34 <__aeabi_dsub+0x10c>
   34018:	488c      	ldr	r0, [pc, #560]	; (3424c <__aeabi_dsub+0x624>)
   3401a:	4283      	cmp	r3, r0
   3401c:	d00b      	beq.n	34036 <__aeabi_dsub+0x40e>
   3401e:	4663      	mov	r3, ip
   34020:	e6d9      	b.n	33dd6 <__aeabi_dsub+0x1ae>
   34022:	2d00      	cmp	r5, #0
   34024:	d000      	beq.n	34028 <__aeabi_dsub+0x400>
   34026:	e096      	b.n	34156 <__aeabi_dsub+0x52e>
   34028:	0008      	movs	r0, r1
   3402a:	4310      	orrs	r0, r2
   3402c:	d100      	bne.n	34030 <__aeabi_dsub+0x408>
   3402e:	e0e2      	b.n	341f6 <__aeabi_dsub+0x5ce>
   34030:	000c      	movs	r4, r1
   34032:	0017      	movs	r7, r2
   34034:	4698      	mov	r8, r3
   34036:	4e85      	ldr	r6, [pc, #532]	; (3424c <__aeabi_dsub+0x624>)
   34038:	e67c      	b.n	33d34 <__aeabi_dsub+0x10c>
   3403a:	2500      	movs	r5, #0
   3403c:	e780      	b.n	33f40 <__aeabi_dsub+0x318>
   3403e:	2100      	movs	r1, #0
   34040:	e78e      	b.n	33f60 <__aeabi_dsub+0x338>
   34042:	0023      	movs	r3, r4
   34044:	4650      	mov	r0, sl
   34046:	4303      	orrs	r3, r0
   34048:	2e00      	cmp	r6, #0
   3404a:	d000      	beq.n	3404e <__aeabi_dsub+0x426>
   3404c:	e0a8      	b.n	341a0 <__aeabi_dsub+0x578>
   3404e:	2b00      	cmp	r3, #0
   34050:	d100      	bne.n	34054 <__aeabi_dsub+0x42c>
   34052:	e0de      	b.n	34212 <__aeabi_dsub+0x5ea>
   34054:	000b      	movs	r3, r1
   34056:	4313      	orrs	r3, r2
   34058:	d100      	bne.n	3405c <__aeabi_dsub+0x434>
   3405a:	e66b      	b.n	33d34 <__aeabi_dsub+0x10c>
   3405c:	4452      	add	r2, sl
   3405e:	4552      	cmp	r2, sl
   34060:	4180      	sbcs	r0, r0
   34062:	1864      	adds	r4, r4, r1
   34064:	4240      	negs	r0, r0
   34066:	1824      	adds	r4, r4, r0
   34068:	0017      	movs	r7, r2
   3406a:	0223      	lsls	r3, r4, #8
   3406c:	d400      	bmi.n	34070 <__aeabi_dsub+0x448>
   3406e:	e6fd      	b.n	33e6c <__aeabi_dsub+0x244>
   34070:	4b77      	ldr	r3, [pc, #476]	; (34250 <__aeabi_dsub+0x628>)
   34072:	4666      	mov	r6, ip
   34074:	401c      	ands	r4, r3
   34076:	e65d      	b.n	33d34 <__aeabi_dsub+0x10c>
   34078:	0025      	movs	r5, r4
   3407a:	4650      	mov	r0, sl
   3407c:	4305      	orrs	r5, r0
   3407e:	2e00      	cmp	r6, #0
   34080:	d1cf      	bne.n	34022 <__aeabi_dsub+0x3fa>
   34082:	2d00      	cmp	r5, #0
   34084:	d14f      	bne.n	34126 <__aeabi_dsub+0x4fe>
   34086:	000c      	movs	r4, r1
   34088:	4314      	orrs	r4, r2
   3408a:	d100      	bne.n	3408e <__aeabi_dsub+0x466>
   3408c:	e0a0      	b.n	341d0 <__aeabi_dsub+0x5a8>
   3408e:	000c      	movs	r4, r1
   34090:	0017      	movs	r7, r2
   34092:	4698      	mov	r8, r3
   34094:	e64e      	b.n	33d34 <__aeabi_dsub+0x10c>
   34096:	4666      	mov	r6, ip
   34098:	2400      	movs	r4, #0
   3409a:	2700      	movs	r7, #0
   3409c:	e685      	b.n	33daa <__aeabi_dsub+0x182>
   3409e:	001f      	movs	r7, r3
   340a0:	0008      	movs	r0, r1
   340a2:	3f20      	subs	r7, #32
   340a4:	40f8      	lsrs	r0, r7
   340a6:	0007      	movs	r7, r0
   340a8:	2b20      	cmp	r3, #32
   340aa:	d100      	bne.n	340ae <__aeabi_dsub+0x486>
   340ac:	e08e      	b.n	341cc <__aeabi_dsub+0x5a4>
   340ae:	2040      	movs	r0, #64	; 0x40
   340b0:	1ac3      	subs	r3, r0, r3
   340b2:	4099      	lsls	r1, r3
   340b4:	430a      	orrs	r2, r1
   340b6:	1e51      	subs	r1, r2, #1
   340b8:	418a      	sbcs	r2, r1
   340ba:	2100      	movs	r1, #0
   340bc:	4317      	orrs	r7, r2
   340be:	e692      	b.n	33de6 <__aeabi_dsub+0x1be>
   340c0:	2e00      	cmp	r6, #0
   340c2:	d114      	bne.n	340ee <__aeabi_dsub+0x4c6>
   340c4:	0026      	movs	r6, r4
   340c6:	4650      	mov	r0, sl
   340c8:	4306      	orrs	r6, r0
   340ca:	d062      	beq.n	34192 <__aeabi_dsub+0x56a>
   340cc:	43db      	mvns	r3, r3
   340ce:	2b00      	cmp	r3, #0
   340d0:	d15c      	bne.n	3418c <__aeabi_dsub+0x564>
   340d2:	1887      	adds	r7, r0, r2
   340d4:	4297      	cmp	r7, r2
   340d6:	4192      	sbcs	r2, r2
   340d8:	1864      	adds	r4, r4, r1
   340da:	4252      	negs	r2, r2
   340dc:	18a4      	adds	r4, r4, r2
   340de:	4666      	mov	r6, ip
   340e0:	e687      	b.n	33df2 <__aeabi_dsub+0x1ca>
   340e2:	4650      	mov	r0, sl
   340e4:	4320      	orrs	r0, r4
   340e6:	1e44      	subs	r4, r0, #1
   340e8:	41a0      	sbcs	r0, r4
   340ea:	2400      	movs	r4, #0
   340ec:	e760      	b.n	33fb0 <__aeabi_dsub+0x388>
   340ee:	4e57      	ldr	r6, [pc, #348]	; (3424c <__aeabi_dsub+0x624>)
   340f0:	45b4      	cmp	ip, r6
   340f2:	d04e      	beq.n	34192 <__aeabi_dsub+0x56a>
   340f4:	2680      	movs	r6, #128	; 0x80
   340f6:	0436      	lsls	r6, r6, #16
   340f8:	425b      	negs	r3, r3
   340fa:	4334      	orrs	r4, r6
   340fc:	2b38      	cmp	r3, #56	; 0x38
   340fe:	dd00      	ble.n	34102 <__aeabi_dsub+0x4da>
   34100:	e07f      	b.n	34202 <__aeabi_dsub+0x5da>
   34102:	2b1f      	cmp	r3, #31
   34104:	dd00      	ble.n	34108 <__aeabi_dsub+0x4e0>
   34106:	e08b      	b.n	34220 <__aeabi_dsub+0x5f8>
   34108:	2620      	movs	r6, #32
   3410a:	0027      	movs	r7, r4
   3410c:	4650      	mov	r0, sl
   3410e:	1af6      	subs	r6, r6, r3
   34110:	40b7      	lsls	r7, r6
   34112:	40d8      	lsrs	r0, r3
   34114:	4307      	orrs	r7, r0
   34116:	4650      	mov	r0, sl
   34118:	40b0      	lsls	r0, r6
   3411a:	1e46      	subs	r6, r0, #1
   3411c:	41b0      	sbcs	r0, r6
   3411e:	4307      	orrs	r7, r0
   34120:	40dc      	lsrs	r4, r3
   34122:	18bf      	adds	r7, r7, r2
   34124:	e7d6      	b.n	340d4 <__aeabi_dsub+0x4ac>
   34126:	000d      	movs	r5, r1
   34128:	4315      	orrs	r5, r2
   3412a:	d100      	bne.n	3412e <__aeabi_dsub+0x506>
   3412c:	e602      	b.n	33d34 <__aeabi_dsub+0x10c>
   3412e:	4650      	mov	r0, sl
   34130:	1a80      	subs	r0, r0, r2
   34132:	4582      	cmp	sl, r0
   34134:	41bf      	sbcs	r7, r7
   34136:	1a65      	subs	r5, r4, r1
   34138:	427f      	negs	r7, r7
   3413a:	1bed      	subs	r5, r5, r7
   3413c:	4684      	mov	ip, r0
   3413e:	0228      	lsls	r0, r5, #8
   34140:	d400      	bmi.n	34144 <__aeabi_dsub+0x51c>
   34142:	e68d      	b.n	33e60 <__aeabi_dsub+0x238>
   34144:	4650      	mov	r0, sl
   34146:	1a17      	subs	r7, r2, r0
   34148:	42ba      	cmp	r2, r7
   3414a:	4192      	sbcs	r2, r2
   3414c:	1b0c      	subs	r4, r1, r4
   3414e:	4252      	negs	r2, r2
   34150:	1aa4      	subs	r4, r4, r2
   34152:	4698      	mov	r8, r3
   34154:	e5ee      	b.n	33d34 <__aeabi_dsub+0x10c>
   34156:	000d      	movs	r5, r1
   34158:	4315      	orrs	r5, r2
   3415a:	d100      	bne.n	3415e <__aeabi_dsub+0x536>
   3415c:	e76b      	b.n	34036 <__aeabi_dsub+0x40e>
   3415e:	4650      	mov	r0, sl
   34160:	0767      	lsls	r7, r4, #29
   34162:	08c0      	lsrs	r0, r0, #3
   34164:	4307      	orrs	r7, r0
   34166:	2080      	movs	r0, #128	; 0x80
   34168:	08e4      	lsrs	r4, r4, #3
   3416a:	0300      	lsls	r0, r0, #12
   3416c:	4204      	tst	r4, r0
   3416e:	d007      	beq.n	34180 <__aeabi_dsub+0x558>
   34170:	08cd      	lsrs	r5, r1, #3
   34172:	4205      	tst	r5, r0
   34174:	d104      	bne.n	34180 <__aeabi_dsub+0x558>
   34176:	002c      	movs	r4, r5
   34178:	4698      	mov	r8, r3
   3417a:	08d7      	lsrs	r7, r2, #3
   3417c:	0749      	lsls	r1, r1, #29
   3417e:	430f      	orrs	r7, r1
   34180:	0f7b      	lsrs	r3, r7, #29
   34182:	00e4      	lsls	r4, r4, #3
   34184:	431c      	orrs	r4, r3
   34186:	00ff      	lsls	r7, r7, #3
   34188:	4e30      	ldr	r6, [pc, #192]	; (3424c <__aeabi_dsub+0x624>)
   3418a:	e5d3      	b.n	33d34 <__aeabi_dsub+0x10c>
   3418c:	4e2f      	ldr	r6, [pc, #188]	; (3424c <__aeabi_dsub+0x624>)
   3418e:	45b4      	cmp	ip, r6
   34190:	d1b4      	bne.n	340fc <__aeabi_dsub+0x4d4>
   34192:	000c      	movs	r4, r1
   34194:	0017      	movs	r7, r2
   34196:	4666      	mov	r6, ip
   34198:	e5cc      	b.n	33d34 <__aeabi_dsub+0x10c>
   3419a:	2700      	movs	r7, #0
   3419c:	2400      	movs	r4, #0
   3419e:	e5e8      	b.n	33d72 <__aeabi_dsub+0x14a>
   341a0:	2b00      	cmp	r3, #0
   341a2:	d039      	beq.n	34218 <__aeabi_dsub+0x5f0>
   341a4:	000b      	movs	r3, r1
   341a6:	4313      	orrs	r3, r2
   341a8:	d100      	bne.n	341ac <__aeabi_dsub+0x584>
   341aa:	e744      	b.n	34036 <__aeabi_dsub+0x40e>
   341ac:	08c0      	lsrs	r0, r0, #3
   341ae:	0767      	lsls	r7, r4, #29
   341b0:	4307      	orrs	r7, r0
   341b2:	2080      	movs	r0, #128	; 0x80
   341b4:	08e4      	lsrs	r4, r4, #3
   341b6:	0300      	lsls	r0, r0, #12
   341b8:	4204      	tst	r4, r0
   341ba:	d0e1      	beq.n	34180 <__aeabi_dsub+0x558>
   341bc:	08cb      	lsrs	r3, r1, #3
   341be:	4203      	tst	r3, r0
   341c0:	d1de      	bne.n	34180 <__aeabi_dsub+0x558>
   341c2:	08d7      	lsrs	r7, r2, #3
   341c4:	0749      	lsls	r1, r1, #29
   341c6:	430f      	orrs	r7, r1
   341c8:	001c      	movs	r4, r3
   341ca:	e7d9      	b.n	34180 <__aeabi_dsub+0x558>
   341cc:	2100      	movs	r1, #0
   341ce:	e771      	b.n	340b4 <__aeabi_dsub+0x48c>
   341d0:	2500      	movs	r5, #0
   341d2:	2700      	movs	r7, #0
   341d4:	e5e9      	b.n	33daa <__aeabi_dsub+0x182>
   341d6:	002e      	movs	r6, r5
   341d8:	0027      	movs	r7, r4
   341da:	3e20      	subs	r6, #32
   341dc:	40f7      	lsrs	r7, r6
   341de:	2d20      	cmp	r5, #32
   341e0:	d02f      	beq.n	34242 <__aeabi_dsub+0x61a>
   341e2:	2640      	movs	r6, #64	; 0x40
   341e4:	1b75      	subs	r5, r6, r5
   341e6:	40ac      	lsls	r4, r5
   341e8:	4650      	mov	r0, sl
   341ea:	4320      	orrs	r0, r4
   341ec:	1e44      	subs	r4, r0, #1
   341ee:	41a0      	sbcs	r0, r4
   341f0:	2400      	movs	r4, #0
   341f2:	4338      	orrs	r0, r7
   341f4:	e6dc      	b.n	33fb0 <__aeabi_dsub+0x388>
   341f6:	2480      	movs	r4, #128	; 0x80
   341f8:	2500      	movs	r5, #0
   341fa:	0324      	lsls	r4, r4, #12
   341fc:	4e13      	ldr	r6, [pc, #76]	; (3424c <__aeabi_dsub+0x624>)
   341fe:	2700      	movs	r7, #0
   34200:	e5d3      	b.n	33daa <__aeabi_dsub+0x182>
   34202:	4650      	mov	r0, sl
   34204:	4320      	orrs	r0, r4
   34206:	0007      	movs	r7, r0
   34208:	1e78      	subs	r0, r7, #1
   3420a:	4187      	sbcs	r7, r0
   3420c:	2400      	movs	r4, #0
   3420e:	18bf      	adds	r7, r7, r2
   34210:	e760      	b.n	340d4 <__aeabi_dsub+0x4ac>
   34212:	000c      	movs	r4, r1
   34214:	0017      	movs	r7, r2
   34216:	e58d      	b.n	33d34 <__aeabi_dsub+0x10c>
   34218:	000c      	movs	r4, r1
   3421a:	0017      	movs	r7, r2
   3421c:	4e0b      	ldr	r6, [pc, #44]	; (3424c <__aeabi_dsub+0x624>)
   3421e:	e589      	b.n	33d34 <__aeabi_dsub+0x10c>
   34220:	001e      	movs	r6, r3
   34222:	0027      	movs	r7, r4
   34224:	3e20      	subs	r6, #32
   34226:	40f7      	lsrs	r7, r6
   34228:	2b20      	cmp	r3, #32
   3422a:	d00c      	beq.n	34246 <__aeabi_dsub+0x61e>
   3422c:	2640      	movs	r6, #64	; 0x40
   3422e:	1af3      	subs	r3, r6, r3
   34230:	409c      	lsls	r4, r3
   34232:	4650      	mov	r0, sl
   34234:	4320      	orrs	r0, r4
   34236:	1e44      	subs	r4, r0, #1
   34238:	41a0      	sbcs	r0, r4
   3423a:	4307      	orrs	r7, r0
   3423c:	2400      	movs	r4, #0
   3423e:	18bf      	adds	r7, r7, r2
   34240:	e748      	b.n	340d4 <__aeabi_dsub+0x4ac>
   34242:	2400      	movs	r4, #0
   34244:	e7d0      	b.n	341e8 <__aeabi_dsub+0x5c0>
   34246:	2400      	movs	r4, #0
   34248:	e7f3      	b.n	34232 <__aeabi_dsub+0x60a>
   3424a:	46c0      	nop			; (mov r8, r8)
   3424c:	000007ff 	.word	0x000007ff
   34250:	ff7fffff 	.word	0xff7fffff

00034254 <__aeabi_d2iz>:
   34254:	b530      	push	{r4, r5, lr}
   34256:	4d13      	ldr	r5, [pc, #76]	; (342a4 <__aeabi_d2iz+0x50>)
   34258:	030a      	lsls	r2, r1, #12
   3425a:	004b      	lsls	r3, r1, #1
   3425c:	0b12      	lsrs	r2, r2, #12
   3425e:	0d5b      	lsrs	r3, r3, #21
   34260:	0fc9      	lsrs	r1, r1, #31
   34262:	2400      	movs	r4, #0
   34264:	42ab      	cmp	r3, r5
   34266:	dd10      	ble.n	3428a <__aeabi_d2iz+0x36>
   34268:	4c0f      	ldr	r4, [pc, #60]	; (342a8 <__aeabi_d2iz+0x54>)
   3426a:	42a3      	cmp	r3, r4
   3426c:	dc0f      	bgt.n	3428e <__aeabi_d2iz+0x3a>
   3426e:	2480      	movs	r4, #128	; 0x80
   34270:	4d0e      	ldr	r5, [pc, #56]	; (342ac <__aeabi_d2iz+0x58>)
   34272:	0364      	lsls	r4, r4, #13
   34274:	4322      	orrs	r2, r4
   34276:	1aed      	subs	r5, r5, r3
   34278:	2d1f      	cmp	r5, #31
   3427a:	dd0b      	ble.n	34294 <__aeabi_d2iz+0x40>
   3427c:	480c      	ldr	r0, [pc, #48]	; (342b0 <__aeabi_d2iz+0x5c>)
   3427e:	1ac3      	subs	r3, r0, r3
   34280:	40da      	lsrs	r2, r3
   34282:	4254      	negs	r4, r2
   34284:	2900      	cmp	r1, #0
   34286:	d100      	bne.n	3428a <__aeabi_d2iz+0x36>
   34288:	0014      	movs	r4, r2
   3428a:	0020      	movs	r0, r4
   3428c:	bd30      	pop	{r4, r5, pc}
   3428e:	4b09      	ldr	r3, [pc, #36]	; (342b4 <__aeabi_d2iz+0x60>)
   34290:	18cc      	adds	r4, r1, r3
   34292:	e7fa      	b.n	3428a <__aeabi_d2iz+0x36>
   34294:	4c08      	ldr	r4, [pc, #32]	; (342b8 <__aeabi_d2iz+0x64>)
   34296:	40e8      	lsrs	r0, r5
   34298:	46a4      	mov	ip, r4
   3429a:	4463      	add	r3, ip
   3429c:	409a      	lsls	r2, r3
   3429e:	4302      	orrs	r2, r0
   342a0:	e7ef      	b.n	34282 <__aeabi_d2iz+0x2e>
   342a2:	46c0      	nop			; (mov r8, r8)
   342a4:	000003fe 	.word	0x000003fe
   342a8:	0000041d 	.word	0x0000041d
   342ac:	00000433 	.word	0x00000433
   342b0:	00000413 	.word	0x00000413
   342b4:	7fffffff 	.word	0x7fffffff
   342b8:	fffffbed 	.word	0xfffffbed

000342bc <__aeabi_ui2d>:
   342bc:	b510      	push	{r4, lr}
   342be:	1e04      	subs	r4, r0, #0
   342c0:	d028      	beq.n	34314 <__aeabi_ui2d+0x58>
   342c2:	f000 f86d 	bl	343a0 <__clzsi2>
   342c6:	4b15      	ldr	r3, [pc, #84]	; (3431c <__aeabi_ui2d+0x60>)
   342c8:	4a15      	ldr	r2, [pc, #84]	; (34320 <__aeabi_ui2d+0x64>)
   342ca:	1a1b      	subs	r3, r3, r0
   342cc:	1ad2      	subs	r2, r2, r3
   342ce:	2a1f      	cmp	r2, #31
   342d0:	dd15      	ble.n	342fe <__aeabi_ui2d+0x42>
   342d2:	4a14      	ldr	r2, [pc, #80]	; (34324 <__aeabi_ui2d+0x68>)
   342d4:	1ad2      	subs	r2, r2, r3
   342d6:	4094      	lsls	r4, r2
   342d8:	2200      	movs	r2, #0
   342da:	0324      	lsls	r4, r4, #12
   342dc:	055b      	lsls	r3, r3, #21
   342de:	0b24      	lsrs	r4, r4, #12
   342e0:	0d5b      	lsrs	r3, r3, #21
   342e2:	2100      	movs	r1, #0
   342e4:	0010      	movs	r0, r2
   342e6:	0324      	lsls	r4, r4, #12
   342e8:	0d0a      	lsrs	r2, r1, #20
   342ea:	0b24      	lsrs	r4, r4, #12
   342ec:	0512      	lsls	r2, r2, #20
   342ee:	4322      	orrs	r2, r4
   342f0:	4c0d      	ldr	r4, [pc, #52]	; (34328 <__aeabi_ui2d+0x6c>)
   342f2:	051b      	lsls	r3, r3, #20
   342f4:	4022      	ands	r2, r4
   342f6:	4313      	orrs	r3, r2
   342f8:	005b      	lsls	r3, r3, #1
   342fa:	0859      	lsrs	r1, r3, #1
   342fc:	bd10      	pop	{r4, pc}
   342fe:	0021      	movs	r1, r4
   34300:	4091      	lsls	r1, r2
   34302:	000a      	movs	r2, r1
   34304:	210b      	movs	r1, #11
   34306:	1a08      	subs	r0, r1, r0
   34308:	40c4      	lsrs	r4, r0
   3430a:	055b      	lsls	r3, r3, #21
   3430c:	0324      	lsls	r4, r4, #12
   3430e:	0b24      	lsrs	r4, r4, #12
   34310:	0d5b      	lsrs	r3, r3, #21
   34312:	e7e6      	b.n	342e2 <__aeabi_ui2d+0x26>
   34314:	2300      	movs	r3, #0
   34316:	2400      	movs	r4, #0
   34318:	2200      	movs	r2, #0
   3431a:	e7e2      	b.n	342e2 <__aeabi_ui2d+0x26>
   3431c:	0000041e 	.word	0x0000041e
   34320:	00000433 	.word	0x00000433
   34324:	00000413 	.word	0x00000413
   34328:	800fffff 	.word	0x800fffff

0003432c <__aeabi_cfrcmple>:
   3432c:	4684      	mov	ip, r0
   3432e:	1c08      	adds	r0, r1, #0
   34330:	4661      	mov	r1, ip
   34332:	e7ff      	b.n	34334 <__aeabi_cfcmpeq>

00034334 <__aeabi_cfcmpeq>:
   34334:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   34336:	f000 f8b7 	bl	344a8 <__lesf2>
   3433a:	2800      	cmp	r0, #0
   3433c:	d401      	bmi.n	34342 <__aeabi_cfcmpeq+0xe>
   3433e:	2100      	movs	r1, #0
   34340:	42c8      	cmn	r0, r1
   34342:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00034344 <__aeabi_fcmpeq>:
   34344:	b510      	push	{r4, lr}
   34346:	f000 f849 	bl	343dc <__eqsf2>
   3434a:	4240      	negs	r0, r0
   3434c:	3001      	adds	r0, #1
   3434e:	bd10      	pop	{r4, pc}

00034350 <__aeabi_fcmplt>:
   34350:	b510      	push	{r4, lr}
   34352:	f000 f8a9 	bl	344a8 <__lesf2>
   34356:	2800      	cmp	r0, #0
   34358:	db01      	blt.n	3435e <__aeabi_fcmplt+0xe>
   3435a:	2000      	movs	r0, #0
   3435c:	bd10      	pop	{r4, pc}
   3435e:	2001      	movs	r0, #1
   34360:	bd10      	pop	{r4, pc}
   34362:	46c0      	nop			; (mov r8, r8)

00034364 <__aeabi_fcmple>:
   34364:	b510      	push	{r4, lr}
   34366:	f000 f89f 	bl	344a8 <__lesf2>
   3436a:	2800      	cmp	r0, #0
   3436c:	dd01      	ble.n	34372 <__aeabi_fcmple+0xe>
   3436e:	2000      	movs	r0, #0
   34370:	bd10      	pop	{r4, pc}
   34372:	2001      	movs	r0, #1
   34374:	bd10      	pop	{r4, pc}
   34376:	46c0      	nop			; (mov r8, r8)

00034378 <__aeabi_fcmpgt>:
   34378:	b510      	push	{r4, lr}
   3437a:	f000 f855 	bl	34428 <__gesf2>
   3437e:	2800      	cmp	r0, #0
   34380:	dc01      	bgt.n	34386 <__aeabi_fcmpgt+0xe>
   34382:	2000      	movs	r0, #0
   34384:	bd10      	pop	{r4, pc}
   34386:	2001      	movs	r0, #1
   34388:	bd10      	pop	{r4, pc}
   3438a:	46c0      	nop			; (mov r8, r8)

0003438c <__aeabi_fcmpge>:
   3438c:	b510      	push	{r4, lr}
   3438e:	f000 f84b 	bl	34428 <__gesf2>
   34392:	2800      	cmp	r0, #0
   34394:	da01      	bge.n	3439a <__aeabi_fcmpge+0xe>
   34396:	2000      	movs	r0, #0
   34398:	bd10      	pop	{r4, pc}
   3439a:	2001      	movs	r0, #1
   3439c:	bd10      	pop	{r4, pc}
   3439e:	46c0      	nop			; (mov r8, r8)

000343a0 <__clzsi2>:
   343a0:	211c      	movs	r1, #28
   343a2:	2301      	movs	r3, #1
   343a4:	041b      	lsls	r3, r3, #16
   343a6:	4298      	cmp	r0, r3
   343a8:	d301      	bcc.n	343ae <__clzsi2+0xe>
   343aa:	0c00      	lsrs	r0, r0, #16
   343ac:	3910      	subs	r1, #16
   343ae:	0a1b      	lsrs	r3, r3, #8
   343b0:	4298      	cmp	r0, r3
   343b2:	d301      	bcc.n	343b8 <__clzsi2+0x18>
   343b4:	0a00      	lsrs	r0, r0, #8
   343b6:	3908      	subs	r1, #8
   343b8:	091b      	lsrs	r3, r3, #4
   343ba:	4298      	cmp	r0, r3
   343bc:	d301      	bcc.n	343c2 <__clzsi2+0x22>
   343be:	0900      	lsrs	r0, r0, #4
   343c0:	3904      	subs	r1, #4
   343c2:	a202      	add	r2, pc, #8	; (adr r2, 343cc <__clzsi2+0x2c>)
   343c4:	5c10      	ldrb	r0, [r2, r0]
   343c6:	1840      	adds	r0, r0, r1
   343c8:	4770      	bx	lr
   343ca:	46c0      	nop			; (mov r8, r8)
   343cc:	02020304 	.word	0x02020304
   343d0:	01010101 	.word	0x01010101
	...

000343dc <__eqsf2>:
   343dc:	b570      	push	{r4, r5, r6, lr}
   343de:	0042      	lsls	r2, r0, #1
   343e0:	0245      	lsls	r5, r0, #9
   343e2:	024e      	lsls	r6, r1, #9
   343e4:	004c      	lsls	r4, r1, #1
   343e6:	0fc3      	lsrs	r3, r0, #31
   343e8:	0a6d      	lsrs	r5, r5, #9
   343ea:	0e12      	lsrs	r2, r2, #24
   343ec:	0a76      	lsrs	r6, r6, #9
   343ee:	0e24      	lsrs	r4, r4, #24
   343f0:	0fc9      	lsrs	r1, r1, #31
   343f2:	2001      	movs	r0, #1
   343f4:	2aff      	cmp	r2, #255	; 0xff
   343f6:	d006      	beq.n	34406 <__eqsf2+0x2a>
   343f8:	2cff      	cmp	r4, #255	; 0xff
   343fa:	d003      	beq.n	34404 <__eqsf2+0x28>
   343fc:	42a2      	cmp	r2, r4
   343fe:	d101      	bne.n	34404 <__eqsf2+0x28>
   34400:	42b5      	cmp	r5, r6
   34402:	d006      	beq.n	34412 <__eqsf2+0x36>
   34404:	bd70      	pop	{r4, r5, r6, pc}
   34406:	2d00      	cmp	r5, #0
   34408:	d1fc      	bne.n	34404 <__eqsf2+0x28>
   3440a:	2cff      	cmp	r4, #255	; 0xff
   3440c:	d1fa      	bne.n	34404 <__eqsf2+0x28>
   3440e:	2e00      	cmp	r6, #0
   34410:	d1f8      	bne.n	34404 <__eqsf2+0x28>
   34412:	428b      	cmp	r3, r1
   34414:	d006      	beq.n	34424 <__eqsf2+0x48>
   34416:	2001      	movs	r0, #1
   34418:	2a00      	cmp	r2, #0
   3441a:	d1f3      	bne.n	34404 <__eqsf2+0x28>
   3441c:	0028      	movs	r0, r5
   3441e:	1e45      	subs	r5, r0, #1
   34420:	41a8      	sbcs	r0, r5
   34422:	e7ef      	b.n	34404 <__eqsf2+0x28>
   34424:	2000      	movs	r0, #0
   34426:	e7ed      	b.n	34404 <__eqsf2+0x28>

00034428 <__gesf2>:
   34428:	b5f0      	push	{r4, r5, r6, r7, lr}
   3442a:	0042      	lsls	r2, r0, #1
   3442c:	0245      	lsls	r5, r0, #9
   3442e:	024c      	lsls	r4, r1, #9
   34430:	0fc3      	lsrs	r3, r0, #31
   34432:	0048      	lsls	r0, r1, #1
   34434:	0a6d      	lsrs	r5, r5, #9
   34436:	0e12      	lsrs	r2, r2, #24
   34438:	0a64      	lsrs	r4, r4, #9
   3443a:	0e00      	lsrs	r0, r0, #24
   3443c:	0fc9      	lsrs	r1, r1, #31
   3443e:	2aff      	cmp	r2, #255	; 0xff
   34440:	d01e      	beq.n	34480 <__gesf2+0x58>
   34442:	28ff      	cmp	r0, #255	; 0xff
   34444:	d021      	beq.n	3448a <__gesf2+0x62>
   34446:	2a00      	cmp	r2, #0
   34448:	d10a      	bne.n	34460 <__gesf2+0x38>
   3444a:	426e      	negs	r6, r5
   3444c:	416e      	adcs	r6, r5
   3444e:	b2f6      	uxtb	r6, r6
   34450:	2800      	cmp	r0, #0
   34452:	d10f      	bne.n	34474 <__gesf2+0x4c>
   34454:	2c00      	cmp	r4, #0
   34456:	d10d      	bne.n	34474 <__gesf2+0x4c>
   34458:	2000      	movs	r0, #0
   3445a:	2d00      	cmp	r5, #0
   3445c:	d009      	beq.n	34472 <__gesf2+0x4a>
   3445e:	e005      	b.n	3446c <__gesf2+0x44>
   34460:	2800      	cmp	r0, #0
   34462:	d101      	bne.n	34468 <__gesf2+0x40>
   34464:	2c00      	cmp	r4, #0
   34466:	d001      	beq.n	3446c <__gesf2+0x44>
   34468:	428b      	cmp	r3, r1
   3446a:	d011      	beq.n	34490 <__gesf2+0x68>
   3446c:	2101      	movs	r1, #1
   3446e:	4258      	negs	r0, r3
   34470:	4308      	orrs	r0, r1
   34472:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34474:	2e00      	cmp	r6, #0
   34476:	d0f7      	beq.n	34468 <__gesf2+0x40>
   34478:	2001      	movs	r0, #1
   3447a:	3901      	subs	r1, #1
   3447c:	4308      	orrs	r0, r1
   3447e:	e7f8      	b.n	34472 <__gesf2+0x4a>
   34480:	2d00      	cmp	r5, #0
   34482:	d0de      	beq.n	34442 <__gesf2+0x1a>
   34484:	2002      	movs	r0, #2
   34486:	4240      	negs	r0, r0
   34488:	e7f3      	b.n	34472 <__gesf2+0x4a>
   3448a:	2c00      	cmp	r4, #0
   3448c:	d0db      	beq.n	34446 <__gesf2+0x1e>
   3448e:	e7f9      	b.n	34484 <__gesf2+0x5c>
   34490:	4282      	cmp	r2, r0
   34492:	dceb      	bgt.n	3446c <__gesf2+0x44>
   34494:	db04      	blt.n	344a0 <__gesf2+0x78>
   34496:	42a5      	cmp	r5, r4
   34498:	d8e8      	bhi.n	3446c <__gesf2+0x44>
   3449a:	2000      	movs	r0, #0
   3449c:	42a5      	cmp	r5, r4
   3449e:	d2e8      	bcs.n	34472 <__gesf2+0x4a>
   344a0:	2101      	movs	r1, #1
   344a2:	1e58      	subs	r0, r3, #1
   344a4:	4308      	orrs	r0, r1
   344a6:	e7e4      	b.n	34472 <__gesf2+0x4a>

000344a8 <__lesf2>:
   344a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   344aa:	0042      	lsls	r2, r0, #1
   344ac:	024d      	lsls	r5, r1, #9
   344ae:	004c      	lsls	r4, r1, #1
   344b0:	0246      	lsls	r6, r0, #9
   344b2:	0a76      	lsrs	r6, r6, #9
   344b4:	0e12      	lsrs	r2, r2, #24
   344b6:	0fc3      	lsrs	r3, r0, #31
   344b8:	0a6d      	lsrs	r5, r5, #9
   344ba:	0e24      	lsrs	r4, r4, #24
   344bc:	0fc9      	lsrs	r1, r1, #31
   344be:	2aff      	cmp	r2, #255	; 0xff
   344c0:	d016      	beq.n	344f0 <__lesf2+0x48>
   344c2:	2cff      	cmp	r4, #255	; 0xff
   344c4:	d018      	beq.n	344f8 <__lesf2+0x50>
   344c6:	2a00      	cmp	r2, #0
   344c8:	d10a      	bne.n	344e0 <__lesf2+0x38>
   344ca:	4270      	negs	r0, r6
   344cc:	4170      	adcs	r0, r6
   344ce:	b2c0      	uxtb	r0, r0
   344d0:	2c00      	cmp	r4, #0
   344d2:	d015      	beq.n	34500 <__lesf2+0x58>
   344d4:	2800      	cmp	r0, #0
   344d6:	d005      	beq.n	344e4 <__lesf2+0x3c>
   344d8:	2001      	movs	r0, #1
   344da:	3901      	subs	r1, #1
   344dc:	4308      	orrs	r0, r1
   344de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   344e0:	2c00      	cmp	r4, #0
   344e2:	d013      	beq.n	3450c <__lesf2+0x64>
   344e4:	4299      	cmp	r1, r3
   344e6:	d014      	beq.n	34512 <__lesf2+0x6a>
   344e8:	2001      	movs	r0, #1
   344ea:	425b      	negs	r3, r3
   344ec:	4318      	orrs	r0, r3
   344ee:	e7f6      	b.n	344de <__lesf2+0x36>
   344f0:	2002      	movs	r0, #2
   344f2:	2e00      	cmp	r6, #0
   344f4:	d1f3      	bne.n	344de <__lesf2+0x36>
   344f6:	e7e4      	b.n	344c2 <__lesf2+0x1a>
   344f8:	2002      	movs	r0, #2
   344fa:	2d00      	cmp	r5, #0
   344fc:	d1ef      	bne.n	344de <__lesf2+0x36>
   344fe:	e7e2      	b.n	344c6 <__lesf2+0x1e>
   34500:	2d00      	cmp	r5, #0
   34502:	d1e7      	bne.n	344d4 <__lesf2+0x2c>
   34504:	2000      	movs	r0, #0
   34506:	2e00      	cmp	r6, #0
   34508:	d0e9      	beq.n	344de <__lesf2+0x36>
   3450a:	e7ed      	b.n	344e8 <__lesf2+0x40>
   3450c:	2d00      	cmp	r5, #0
   3450e:	d1e9      	bne.n	344e4 <__lesf2+0x3c>
   34510:	e7ea      	b.n	344e8 <__lesf2+0x40>
   34512:	42a2      	cmp	r2, r4
   34514:	dc06      	bgt.n	34524 <__lesf2+0x7c>
   34516:	dbdf      	blt.n	344d8 <__lesf2+0x30>
   34518:	42ae      	cmp	r6, r5
   3451a:	d803      	bhi.n	34524 <__lesf2+0x7c>
   3451c:	2000      	movs	r0, #0
   3451e:	42ae      	cmp	r6, r5
   34520:	d3da      	bcc.n	344d8 <__lesf2+0x30>
   34522:	e7dc      	b.n	344de <__lesf2+0x36>
   34524:	2001      	movs	r0, #1
   34526:	4249      	negs	r1, r1
   34528:	4308      	orrs	r0, r1
   3452a:	e7d8      	b.n	344de <__lesf2+0x36>

0003452c <atoi>:
   3452c:	b510      	push	{r4, lr}
   3452e:	220a      	movs	r2, #10
   34530:	2100      	movs	r1, #0
   34532:	f000 faff 	bl	34b34 <strtol>
   34536:	bd10      	pop	{r4, pc}

00034538 <__libc_init_array>:
   34538:	b570      	push	{r4, r5, r6, lr}
   3453a:	2600      	movs	r6, #0
   3453c:	4d0c      	ldr	r5, [pc, #48]	; (34570 <__libc_init_array+0x38>)
   3453e:	4c0d      	ldr	r4, [pc, #52]	; (34574 <__libc_init_array+0x3c>)
   34540:	1b64      	subs	r4, r4, r5
   34542:	10a4      	asrs	r4, r4, #2
   34544:	42a6      	cmp	r6, r4
   34546:	d109      	bne.n	3455c <__libc_init_array+0x24>
   34548:	2600      	movs	r6, #0
   3454a:	f005 fbff 	bl	39d4c <_init>
   3454e:	4d0a      	ldr	r5, [pc, #40]	; (34578 <__libc_init_array+0x40>)
   34550:	4c0a      	ldr	r4, [pc, #40]	; (3457c <__libc_init_array+0x44>)
   34552:	1b64      	subs	r4, r4, r5
   34554:	10a4      	asrs	r4, r4, #2
   34556:	42a6      	cmp	r6, r4
   34558:	d105      	bne.n	34566 <__libc_init_array+0x2e>
   3455a:	bd70      	pop	{r4, r5, r6, pc}
   3455c:	00b3      	lsls	r3, r6, #2
   3455e:	58eb      	ldr	r3, [r5, r3]
   34560:	4798      	blx	r3
   34562:	3601      	adds	r6, #1
   34564:	e7ee      	b.n	34544 <__libc_init_array+0xc>
   34566:	00b3      	lsls	r3, r6, #2
   34568:	58eb      	ldr	r3, [r5, r3]
   3456a:	4798      	blx	r3
   3456c:	3601      	adds	r6, #1
   3456e:	e7f2      	b.n	34556 <__libc_init_array+0x1e>
   34570:	00039d58 	.word	0x00039d58
   34574:	00039d58 	.word	0x00039d58
   34578:	00039d58 	.word	0x00039d58
   3457c:	00039d5c 	.word	0x00039d5c

00034580 <malloc>:
   34580:	b510      	push	{r4, lr}
   34582:	4b03      	ldr	r3, [pc, #12]	; (34590 <malloc+0x10>)
   34584:	0001      	movs	r1, r0
   34586:	6818      	ldr	r0, [r3, #0]
   34588:	f000 f87c 	bl	34684 <_malloc_r>
   3458c:	bd10      	pop	{r4, pc}
   3458e:	46c0      	nop			; (mov r8, r8)
   34590:	20000120 	.word	0x20000120

00034594 <free>:
   34594:	b510      	push	{r4, lr}
   34596:	4b03      	ldr	r3, [pc, #12]	; (345a4 <free+0x10>)
   34598:	0001      	movs	r1, r0
   3459a:	6818      	ldr	r0, [r3, #0]
   3459c:	f000 f828 	bl	345f0 <_free_r>
   345a0:	bd10      	pop	{r4, pc}
   345a2:	46c0      	nop			; (mov r8, r8)
   345a4:	20000120 	.word	0x20000120

000345a8 <memcpy>:
   345a8:	2300      	movs	r3, #0
   345aa:	b510      	push	{r4, lr}
   345ac:	429a      	cmp	r2, r3
   345ae:	d100      	bne.n	345b2 <memcpy+0xa>
   345b0:	bd10      	pop	{r4, pc}
   345b2:	5ccc      	ldrb	r4, [r1, r3]
   345b4:	54c4      	strb	r4, [r0, r3]
   345b6:	3301      	adds	r3, #1
   345b8:	e7f8      	b.n	345ac <memcpy+0x4>

000345ba <memmove>:
   345ba:	b510      	push	{r4, lr}
   345bc:	4288      	cmp	r0, r1
   345be:	d902      	bls.n	345c6 <memmove+0xc>
   345c0:	188b      	adds	r3, r1, r2
   345c2:	4298      	cmp	r0, r3
   345c4:	d308      	bcc.n	345d8 <memmove+0x1e>
   345c6:	2300      	movs	r3, #0
   345c8:	429a      	cmp	r2, r3
   345ca:	d007      	beq.n	345dc <memmove+0x22>
   345cc:	5ccc      	ldrb	r4, [r1, r3]
   345ce:	54c4      	strb	r4, [r0, r3]
   345d0:	3301      	adds	r3, #1
   345d2:	e7f9      	b.n	345c8 <memmove+0xe>
   345d4:	5c8b      	ldrb	r3, [r1, r2]
   345d6:	5483      	strb	r3, [r0, r2]
   345d8:	3a01      	subs	r2, #1
   345da:	d2fb      	bcs.n	345d4 <memmove+0x1a>
   345dc:	bd10      	pop	{r4, pc}

000345de <memset>:
   345de:	0003      	movs	r3, r0
   345e0:	1882      	adds	r2, r0, r2
   345e2:	4293      	cmp	r3, r2
   345e4:	d100      	bne.n	345e8 <memset+0xa>
   345e6:	4770      	bx	lr
   345e8:	7019      	strb	r1, [r3, #0]
   345ea:	3301      	adds	r3, #1
   345ec:	e7f9      	b.n	345e2 <memset+0x4>
	...

000345f0 <_free_r>:
   345f0:	b570      	push	{r4, r5, r6, lr}
   345f2:	0005      	movs	r5, r0
   345f4:	2900      	cmp	r1, #0
   345f6:	d010      	beq.n	3461a <_free_r+0x2a>
   345f8:	1f0c      	subs	r4, r1, #4
   345fa:	6823      	ldr	r3, [r4, #0]
   345fc:	2b00      	cmp	r3, #0
   345fe:	da00      	bge.n	34602 <_free_r+0x12>
   34600:	18e4      	adds	r4, r4, r3
   34602:	0028      	movs	r0, r5
   34604:	f000 fdca 	bl	3519c <__malloc_lock>
   34608:	4a1d      	ldr	r2, [pc, #116]	; (34680 <_free_r+0x90>)
   3460a:	6813      	ldr	r3, [r2, #0]
   3460c:	2b00      	cmp	r3, #0
   3460e:	d105      	bne.n	3461c <_free_r+0x2c>
   34610:	6063      	str	r3, [r4, #4]
   34612:	6014      	str	r4, [r2, #0]
   34614:	0028      	movs	r0, r5
   34616:	f000 fdc2 	bl	3519e <__malloc_unlock>
   3461a:	bd70      	pop	{r4, r5, r6, pc}
   3461c:	42a3      	cmp	r3, r4
   3461e:	d909      	bls.n	34634 <_free_r+0x44>
   34620:	6821      	ldr	r1, [r4, #0]
   34622:	1860      	adds	r0, r4, r1
   34624:	4283      	cmp	r3, r0
   34626:	d1f3      	bne.n	34610 <_free_r+0x20>
   34628:	6818      	ldr	r0, [r3, #0]
   3462a:	685b      	ldr	r3, [r3, #4]
   3462c:	1841      	adds	r1, r0, r1
   3462e:	6021      	str	r1, [r4, #0]
   34630:	e7ee      	b.n	34610 <_free_r+0x20>
   34632:	0013      	movs	r3, r2
   34634:	685a      	ldr	r2, [r3, #4]
   34636:	2a00      	cmp	r2, #0
   34638:	d001      	beq.n	3463e <_free_r+0x4e>
   3463a:	42a2      	cmp	r2, r4
   3463c:	d9f9      	bls.n	34632 <_free_r+0x42>
   3463e:	6819      	ldr	r1, [r3, #0]
   34640:	1858      	adds	r0, r3, r1
   34642:	42a0      	cmp	r0, r4
   34644:	d10b      	bne.n	3465e <_free_r+0x6e>
   34646:	6820      	ldr	r0, [r4, #0]
   34648:	1809      	adds	r1, r1, r0
   3464a:	1858      	adds	r0, r3, r1
   3464c:	6019      	str	r1, [r3, #0]
   3464e:	4282      	cmp	r2, r0
   34650:	d1e0      	bne.n	34614 <_free_r+0x24>
   34652:	6810      	ldr	r0, [r2, #0]
   34654:	6852      	ldr	r2, [r2, #4]
   34656:	1841      	adds	r1, r0, r1
   34658:	6019      	str	r1, [r3, #0]
   3465a:	605a      	str	r2, [r3, #4]
   3465c:	e7da      	b.n	34614 <_free_r+0x24>
   3465e:	42a0      	cmp	r0, r4
   34660:	d902      	bls.n	34668 <_free_r+0x78>
   34662:	230c      	movs	r3, #12
   34664:	602b      	str	r3, [r5, #0]
   34666:	e7d5      	b.n	34614 <_free_r+0x24>
   34668:	6821      	ldr	r1, [r4, #0]
   3466a:	1860      	adds	r0, r4, r1
   3466c:	4282      	cmp	r2, r0
   3466e:	d103      	bne.n	34678 <_free_r+0x88>
   34670:	6810      	ldr	r0, [r2, #0]
   34672:	6852      	ldr	r2, [r2, #4]
   34674:	1841      	adds	r1, r0, r1
   34676:	6021      	str	r1, [r4, #0]
   34678:	6062      	str	r2, [r4, #4]
   3467a:	605c      	str	r4, [r3, #4]
   3467c:	e7ca      	b.n	34614 <_free_r+0x24>
   3467e:	46c0      	nop			; (mov r8, r8)
   34680:	200046f0 	.word	0x200046f0

00034684 <_malloc_r>:
   34684:	2303      	movs	r3, #3
   34686:	b570      	push	{r4, r5, r6, lr}
   34688:	1ccd      	adds	r5, r1, #3
   3468a:	439d      	bics	r5, r3
   3468c:	3508      	adds	r5, #8
   3468e:	0006      	movs	r6, r0
   34690:	2d0c      	cmp	r5, #12
   34692:	d21e      	bcs.n	346d2 <_malloc_r+0x4e>
   34694:	250c      	movs	r5, #12
   34696:	42a9      	cmp	r1, r5
   34698:	d81d      	bhi.n	346d6 <_malloc_r+0x52>
   3469a:	0030      	movs	r0, r6
   3469c:	f000 fd7e 	bl	3519c <__malloc_lock>
   346a0:	4a25      	ldr	r2, [pc, #148]	; (34738 <_malloc_r+0xb4>)
   346a2:	6814      	ldr	r4, [r2, #0]
   346a4:	0021      	movs	r1, r4
   346a6:	2900      	cmp	r1, #0
   346a8:	d119      	bne.n	346de <_malloc_r+0x5a>
   346aa:	4c24      	ldr	r4, [pc, #144]	; (3473c <_malloc_r+0xb8>)
   346ac:	6823      	ldr	r3, [r4, #0]
   346ae:	2b00      	cmp	r3, #0
   346b0:	d103      	bne.n	346ba <_malloc_r+0x36>
   346b2:	0030      	movs	r0, r6
   346b4:	f000 f8ae 	bl	34814 <_sbrk_r>
   346b8:	6020      	str	r0, [r4, #0]
   346ba:	0029      	movs	r1, r5
   346bc:	0030      	movs	r0, r6
   346be:	f000 f8a9 	bl	34814 <_sbrk_r>
   346c2:	1c43      	adds	r3, r0, #1
   346c4:	d12c      	bne.n	34720 <_malloc_r+0x9c>
   346c6:	230c      	movs	r3, #12
   346c8:	0030      	movs	r0, r6
   346ca:	6033      	str	r3, [r6, #0]
   346cc:	f000 fd67 	bl	3519e <__malloc_unlock>
   346d0:	e003      	b.n	346da <_malloc_r+0x56>
   346d2:	2d00      	cmp	r5, #0
   346d4:	dadf      	bge.n	34696 <_malloc_r+0x12>
   346d6:	230c      	movs	r3, #12
   346d8:	6033      	str	r3, [r6, #0]
   346da:	2000      	movs	r0, #0
   346dc:	bd70      	pop	{r4, r5, r6, pc}
   346de:	680b      	ldr	r3, [r1, #0]
   346e0:	1b5b      	subs	r3, r3, r5
   346e2:	d41a      	bmi.n	3471a <_malloc_r+0x96>
   346e4:	2b0b      	cmp	r3, #11
   346e6:	d903      	bls.n	346f0 <_malloc_r+0x6c>
   346e8:	600b      	str	r3, [r1, #0]
   346ea:	18cc      	adds	r4, r1, r3
   346ec:	6025      	str	r5, [r4, #0]
   346ee:	e003      	b.n	346f8 <_malloc_r+0x74>
   346f0:	428c      	cmp	r4, r1
   346f2:	d10e      	bne.n	34712 <_malloc_r+0x8e>
   346f4:	6863      	ldr	r3, [r4, #4]
   346f6:	6013      	str	r3, [r2, #0]
   346f8:	0030      	movs	r0, r6
   346fa:	f000 fd50 	bl	3519e <__malloc_unlock>
   346fe:	0020      	movs	r0, r4
   34700:	2207      	movs	r2, #7
   34702:	300b      	adds	r0, #11
   34704:	1d23      	adds	r3, r4, #4
   34706:	4390      	bics	r0, r2
   34708:	1ac3      	subs	r3, r0, r3
   3470a:	d0e7      	beq.n	346dc <_malloc_r+0x58>
   3470c:	425a      	negs	r2, r3
   3470e:	50e2      	str	r2, [r4, r3]
   34710:	e7e4      	b.n	346dc <_malloc_r+0x58>
   34712:	684b      	ldr	r3, [r1, #4]
   34714:	6063      	str	r3, [r4, #4]
   34716:	000c      	movs	r4, r1
   34718:	e7ee      	b.n	346f8 <_malloc_r+0x74>
   3471a:	000c      	movs	r4, r1
   3471c:	6849      	ldr	r1, [r1, #4]
   3471e:	e7c2      	b.n	346a6 <_malloc_r+0x22>
   34720:	2303      	movs	r3, #3
   34722:	1cc4      	adds	r4, r0, #3
   34724:	439c      	bics	r4, r3
   34726:	42a0      	cmp	r0, r4
   34728:	d0e0      	beq.n	346ec <_malloc_r+0x68>
   3472a:	1a21      	subs	r1, r4, r0
   3472c:	0030      	movs	r0, r6
   3472e:	f000 f871 	bl	34814 <_sbrk_r>
   34732:	1c43      	adds	r3, r0, #1
   34734:	d1da      	bne.n	346ec <_malloc_r+0x68>
   34736:	e7c6      	b.n	346c6 <_malloc_r+0x42>
   34738:	200046f0 	.word	0x200046f0
   3473c:	200046f4 	.word	0x200046f4

00034740 <_puts_r>:
   34740:	b570      	push	{r4, r5, r6, lr}
   34742:	0005      	movs	r5, r0
   34744:	000e      	movs	r6, r1
   34746:	2800      	cmp	r0, #0
   34748:	d004      	beq.n	34754 <_puts_r+0x14>
   3474a:	6983      	ldr	r3, [r0, #24]
   3474c:	2b00      	cmp	r3, #0
   3474e:	d101      	bne.n	34754 <_puts_r+0x14>
   34750:	f000 fc00 	bl	34f54 <__sinit>
   34754:	69ab      	ldr	r3, [r5, #24]
   34756:	68ac      	ldr	r4, [r5, #8]
   34758:	2b00      	cmp	r3, #0
   3475a:	d102      	bne.n	34762 <_puts_r+0x22>
   3475c:	0028      	movs	r0, r5
   3475e:	f000 fbf9 	bl	34f54 <__sinit>
   34762:	4b24      	ldr	r3, [pc, #144]	; (347f4 <_puts_r+0xb4>)
   34764:	429c      	cmp	r4, r3
   34766:	d10f      	bne.n	34788 <_puts_r+0x48>
   34768:	686c      	ldr	r4, [r5, #4]
   3476a:	89a3      	ldrh	r3, [r4, #12]
   3476c:	071b      	lsls	r3, r3, #28
   3476e:	d502      	bpl.n	34776 <_puts_r+0x36>
   34770:	6923      	ldr	r3, [r4, #16]
   34772:	2b00      	cmp	r3, #0
   34774:	d120      	bne.n	347b8 <_puts_r+0x78>
   34776:	0021      	movs	r1, r4
   34778:	0028      	movs	r0, r5
   3477a:	f000 fa7d 	bl	34c78 <__swsetup_r>
   3477e:	2800      	cmp	r0, #0
   34780:	d01a      	beq.n	347b8 <_puts_r+0x78>
   34782:	2001      	movs	r0, #1
   34784:	4240      	negs	r0, r0
   34786:	bd70      	pop	{r4, r5, r6, pc}
   34788:	4b1b      	ldr	r3, [pc, #108]	; (347f8 <_puts_r+0xb8>)
   3478a:	429c      	cmp	r4, r3
   3478c:	d101      	bne.n	34792 <_puts_r+0x52>
   3478e:	68ac      	ldr	r4, [r5, #8]
   34790:	e7eb      	b.n	3476a <_puts_r+0x2a>
   34792:	4b1a      	ldr	r3, [pc, #104]	; (347fc <_puts_r+0xbc>)
   34794:	429c      	cmp	r4, r3
   34796:	d1e8      	bne.n	3476a <_puts_r+0x2a>
   34798:	68ec      	ldr	r4, [r5, #12]
   3479a:	e7e6      	b.n	3476a <_puts_r+0x2a>
   3479c:	3b01      	subs	r3, #1
   3479e:	3601      	adds	r6, #1
   347a0:	60a3      	str	r3, [r4, #8]
   347a2:	2b00      	cmp	r3, #0
   347a4:	da04      	bge.n	347b0 <_puts_r+0x70>
   347a6:	69a2      	ldr	r2, [r4, #24]
   347a8:	4293      	cmp	r3, r2
   347aa:	db16      	blt.n	347da <_puts_r+0x9a>
   347ac:	290a      	cmp	r1, #10
   347ae:	d014      	beq.n	347da <_puts_r+0x9a>
   347b0:	6823      	ldr	r3, [r4, #0]
   347b2:	1c5a      	adds	r2, r3, #1
   347b4:	6022      	str	r2, [r4, #0]
   347b6:	7019      	strb	r1, [r3, #0]
   347b8:	7831      	ldrb	r1, [r6, #0]
   347ba:	68a3      	ldr	r3, [r4, #8]
   347bc:	2900      	cmp	r1, #0
   347be:	d1ed      	bne.n	3479c <_puts_r+0x5c>
   347c0:	3b01      	subs	r3, #1
   347c2:	60a3      	str	r3, [r4, #8]
   347c4:	2b00      	cmp	r3, #0
   347c6:	da0f      	bge.n	347e8 <_puts_r+0xa8>
   347c8:	0022      	movs	r2, r4
   347ca:	310a      	adds	r1, #10
   347cc:	0028      	movs	r0, r5
   347ce:	f000 f9fd 	bl	34bcc <__swbuf_r>
   347d2:	1c43      	adds	r3, r0, #1
   347d4:	d0d5      	beq.n	34782 <_puts_r+0x42>
   347d6:	200a      	movs	r0, #10
   347d8:	e7d5      	b.n	34786 <_puts_r+0x46>
   347da:	0022      	movs	r2, r4
   347dc:	0028      	movs	r0, r5
   347de:	f000 f9f5 	bl	34bcc <__swbuf_r>
   347e2:	1c43      	adds	r3, r0, #1
   347e4:	d1e8      	bne.n	347b8 <_puts_r+0x78>
   347e6:	e7cc      	b.n	34782 <_puts_r+0x42>
   347e8:	200a      	movs	r0, #10
   347ea:	6823      	ldr	r3, [r4, #0]
   347ec:	1c5a      	adds	r2, r3, #1
   347ee:	6022      	str	r2, [r4, #0]
   347f0:	7018      	strb	r0, [r3, #0]
   347f2:	e7c8      	b.n	34786 <_puts_r+0x46>
   347f4:	00039bcc 	.word	0x00039bcc
   347f8:	00039bec 	.word	0x00039bec
   347fc:	00039bac 	.word	0x00039bac

00034800 <puts>:
   34800:	b510      	push	{r4, lr}
   34802:	4b03      	ldr	r3, [pc, #12]	; (34810 <puts+0x10>)
   34804:	0001      	movs	r1, r0
   34806:	6818      	ldr	r0, [r3, #0]
   34808:	f7ff ff9a 	bl	34740 <_puts_r>
   3480c:	bd10      	pop	{r4, pc}
   3480e:	46c0      	nop			; (mov r8, r8)
   34810:	20000120 	.word	0x20000120

00034814 <_sbrk_r>:
   34814:	2300      	movs	r3, #0
   34816:	b570      	push	{r4, r5, r6, lr}
   34818:	4c06      	ldr	r4, [pc, #24]	; (34834 <_sbrk_r+0x20>)
   3481a:	0005      	movs	r5, r0
   3481c:	0008      	movs	r0, r1
   3481e:	6023      	str	r3, [r4, #0]
   34820:	f7f5 fd98 	bl	2a354 <_sbrk>
   34824:	1c43      	adds	r3, r0, #1
   34826:	d103      	bne.n	34830 <_sbrk_r+0x1c>
   34828:	6823      	ldr	r3, [r4, #0]
   3482a:	2b00      	cmp	r3, #0
   3482c:	d000      	beq.n	34830 <_sbrk_r+0x1c>
   3482e:	602b      	str	r3, [r5, #0]
   34830:	bd70      	pop	{r4, r5, r6, pc}
   34832:	46c0      	nop			; (mov r8, r8)
   34834:	20005c54 	.word	0x20005c54

00034838 <sniprintf>:
   34838:	b40c      	push	{r2, r3}
   3483a:	b530      	push	{r4, r5, lr}
   3483c:	4b16      	ldr	r3, [pc, #88]	; (34898 <sniprintf+0x60>)
   3483e:	b09d      	sub	sp, #116	; 0x74
   34840:	1e0c      	subs	r4, r1, #0
   34842:	681d      	ldr	r5, [r3, #0]
   34844:	da08      	bge.n	34858 <sniprintf+0x20>
   34846:	238b      	movs	r3, #139	; 0x8b
   34848:	2001      	movs	r0, #1
   3484a:	602b      	str	r3, [r5, #0]
   3484c:	4240      	negs	r0, r0
   3484e:	b01d      	add	sp, #116	; 0x74
   34850:	bc30      	pop	{r4, r5}
   34852:	bc08      	pop	{r3}
   34854:	b002      	add	sp, #8
   34856:	4718      	bx	r3
   34858:	2382      	movs	r3, #130	; 0x82
   3485a:	a902      	add	r1, sp, #8
   3485c:	009b      	lsls	r3, r3, #2
   3485e:	818b      	strh	r3, [r1, #12]
   34860:	2300      	movs	r3, #0
   34862:	9002      	str	r0, [sp, #8]
   34864:	6108      	str	r0, [r1, #16]
   34866:	429c      	cmp	r4, r3
   34868:	d000      	beq.n	3486c <sniprintf+0x34>
   3486a:	1e63      	subs	r3, r4, #1
   3486c:	608b      	str	r3, [r1, #8]
   3486e:	614b      	str	r3, [r1, #20]
   34870:	2301      	movs	r3, #1
   34872:	425b      	negs	r3, r3
   34874:	81cb      	strh	r3, [r1, #14]
   34876:	9a20      	ldr	r2, [sp, #128]	; 0x80
   34878:	ab21      	add	r3, sp, #132	; 0x84
   3487a:	0028      	movs	r0, r5
   3487c:	9301      	str	r3, [sp, #4]
   3487e:	f000 fcf1 	bl	35264 <_svfiprintf_r>
   34882:	1c43      	adds	r3, r0, #1
   34884:	da01      	bge.n	3488a <sniprintf+0x52>
   34886:	238b      	movs	r3, #139	; 0x8b
   34888:	602b      	str	r3, [r5, #0]
   3488a:	2c00      	cmp	r4, #0
   3488c:	d0df      	beq.n	3484e <sniprintf+0x16>
   3488e:	2300      	movs	r3, #0
   34890:	9a02      	ldr	r2, [sp, #8]
   34892:	7013      	strb	r3, [r2, #0]
   34894:	e7db      	b.n	3484e <sniprintf+0x16>
   34896:	46c0      	nop			; (mov r8, r8)
   34898:	20000120 	.word	0x20000120

0003489c <siprintf>:
   3489c:	b40e      	push	{r1, r2, r3}
   3489e:	b510      	push	{r4, lr}
   348a0:	b09d      	sub	sp, #116	; 0x74
   348a2:	a902      	add	r1, sp, #8
   348a4:	9002      	str	r0, [sp, #8]
   348a6:	6108      	str	r0, [r1, #16]
   348a8:	480b      	ldr	r0, [pc, #44]	; (348d8 <siprintf+0x3c>)
   348aa:	2482      	movs	r4, #130	; 0x82
   348ac:	6088      	str	r0, [r1, #8]
   348ae:	6148      	str	r0, [r1, #20]
   348b0:	2001      	movs	r0, #1
   348b2:	4240      	negs	r0, r0
   348b4:	ab1f      	add	r3, sp, #124	; 0x7c
   348b6:	81c8      	strh	r0, [r1, #14]
   348b8:	4808      	ldr	r0, [pc, #32]	; (348dc <siprintf+0x40>)
   348ba:	cb04      	ldmia	r3!, {r2}
   348bc:	00a4      	lsls	r4, r4, #2
   348be:	6800      	ldr	r0, [r0, #0]
   348c0:	9301      	str	r3, [sp, #4]
   348c2:	818c      	strh	r4, [r1, #12]
   348c4:	f000 fcce 	bl	35264 <_svfiprintf_r>
   348c8:	2300      	movs	r3, #0
   348ca:	9a02      	ldr	r2, [sp, #8]
   348cc:	7013      	strb	r3, [r2, #0]
   348ce:	b01d      	add	sp, #116	; 0x74
   348d0:	bc10      	pop	{r4}
   348d2:	bc08      	pop	{r3}
   348d4:	b003      	add	sp, #12
   348d6:	4718      	bx	r3
   348d8:	7fffffff 	.word	0x7fffffff
   348dc:	20000120 	.word	0x20000120

000348e0 <strcasecmp>:
   348e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   348e2:	0007      	movs	r7, r0
   348e4:	000e      	movs	r6, r1
   348e6:	783c      	ldrb	r4, [r7, #0]
   348e8:	f000 fbcc 	bl	35084 <__locale_ctype_ptr>
   348ec:	2203      	movs	r2, #3
   348ee:	1900      	adds	r0, r0, r4
   348f0:	7843      	ldrb	r3, [r0, #1]
   348f2:	4013      	ands	r3, r2
   348f4:	2b01      	cmp	r3, #1
   348f6:	d100      	bne.n	348fa <strcasecmp+0x1a>
   348f8:	3420      	adds	r4, #32
   348fa:	7835      	ldrb	r5, [r6, #0]
   348fc:	f000 fbc2 	bl	35084 <__locale_ctype_ptr>
   34900:	2203      	movs	r2, #3
   34902:	1940      	adds	r0, r0, r5
   34904:	7843      	ldrb	r3, [r0, #1]
   34906:	4013      	ands	r3, r2
   34908:	2b01      	cmp	r3, #1
   3490a:	d100      	bne.n	3490e <strcasecmp+0x2e>
   3490c:	3520      	adds	r5, #32
   3490e:	1b60      	subs	r0, r4, r5
   34910:	d103      	bne.n	3491a <strcasecmp+0x3a>
   34912:	3701      	adds	r7, #1
   34914:	3601      	adds	r6, #1
   34916:	2d00      	cmp	r5, #0
   34918:	d1e5      	bne.n	348e6 <strcasecmp+0x6>
   3491a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0003491c <strcmp>:
   3491c:	7802      	ldrb	r2, [r0, #0]
   3491e:	780b      	ldrb	r3, [r1, #0]
   34920:	2a00      	cmp	r2, #0
   34922:	d003      	beq.n	3492c <strcmp+0x10>
   34924:	3001      	adds	r0, #1
   34926:	3101      	adds	r1, #1
   34928:	429a      	cmp	r2, r3
   3492a:	d0f7      	beq.n	3491c <strcmp>
   3492c:	1ad0      	subs	r0, r2, r3
   3492e:	4770      	bx	lr

00034930 <strcpy>:
   34930:	1c03      	adds	r3, r0, #0
   34932:	780a      	ldrb	r2, [r1, #0]
   34934:	3101      	adds	r1, #1
   34936:	701a      	strb	r2, [r3, #0]
   34938:	3301      	adds	r3, #1
   3493a:	2a00      	cmp	r2, #0
   3493c:	d1f9      	bne.n	34932 <strcpy+0x2>
   3493e:	4770      	bx	lr

00034940 <strdup>:
   34940:	b510      	push	{r4, lr}
   34942:	4b03      	ldr	r3, [pc, #12]	; (34950 <strdup+0x10>)
   34944:	0001      	movs	r1, r0
   34946:	6818      	ldr	r0, [r3, #0]
   34948:	f000 f804 	bl	34954 <_strdup_r>
   3494c:	bd10      	pop	{r4, pc}
   3494e:	46c0      	nop			; (mov r8, r8)
   34950:	20000120 	.word	0x20000120

00034954 <_strdup_r>:
   34954:	b570      	push	{r4, r5, r6, lr}
   34956:	0005      	movs	r5, r0
   34958:	0008      	movs	r0, r1
   3495a:	000e      	movs	r6, r1
   3495c:	f000 f80d 	bl	3497a <strlen>
   34960:	1c44      	adds	r4, r0, #1
   34962:	0021      	movs	r1, r4
   34964:	0028      	movs	r0, r5
   34966:	f7ff fe8d 	bl	34684 <_malloc_r>
   3496a:	1e05      	subs	r5, r0, #0
   3496c:	d003      	beq.n	34976 <_strdup_r+0x22>
   3496e:	0022      	movs	r2, r4
   34970:	0031      	movs	r1, r6
   34972:	f7ff fe19 	bl	345a8 <memcpy>
   34976:	0028      	movs	r0, r5
   34978:	bd70      	pop	{r4, r5, r6, pc}

0003497a <strlen>:
   3497a:	2300      	movs	r3, #0
   3497c:	5cc2      	ldrb	r2, [r0, r3]
   3497e:	3301      	adds	r3, #1
   34980:	2a00      	cmp	r2, #0
   34982:	d1fb      	bne.n	3497c <strlen+0x2>
   34984:	1e58      	subs	r0, r3, #1
   34986:	4770      	bx	lr

00034988 <strncmp>:
   34988:	2300      	movs	r3, #0
   3498a:	b530      	push	{r4, r5, lr}
   3498c:	429a      	cmp	r2, r3
   3498e:	d00a      	beq.n	349a6 <strncmp+0x1e>
   34990:	3a01      	subs	r2, #1
   34992:	5cc4      	ldrb	r4, [r0, r3]
   34994:	5ccd      	ldrb	r5, [r1, r3]
   34996:	42ac      	cmp	r4, r5
   34998:	d104      	bne.n	349a4 <strncmp+0x1c>
   3499a:	429a      	cmp	r2, r3
   3499c:	d002      	beq.n	349a4 <strncmp+0x1c>
   3499e:	3301      	adds	r3, #1
   349a0:	2c00      	cmp	r4, #0
   349a2:	d1f6      	bne.n	34992 <strncmp+0xa>
   349a4:	1b63      	subs	r3, r4, r5
   349a6:	0018      	movs	r0, r3
   349a8:	bd30      	pop	{r4, r5, pc}

000349aa <strncpy>:
   349aa:	b570      	push	{r4, r5, r6, lr}
   349ac:	0004      	movs	r4, r0
   349ae:	2a00      	cmp	r2, #0
   349b0:	d100      	bne.n	349b4 <strncpy+0xa>
   349b2:	bd70      	pop	{r4, r5, r6, pc}
   349b4:	780d      	ldrb	r5, [r1, #0]
   349b6:	1e56      	subs	r6, r2, #1
   349b8:	1c63      	adds	r3, r4, #1
   349ba:	7025      	strb	r5, [r4, #0]
   349bc:	3101      	adds	r1, #1
   349be:	2d00      	cmp	r5, #0
   349c0:	d105      	bne.n	349ce <strncpy+0x24>
   349c2:	18a4      	adds	r4, r4, r2
   349c4:	429c      	cmp	r4, r3
   349c6:	d0f4      	beq.n	349b2 <strncpy+0x8>
   349c8:	701d      	strb	r5, [r3, #0]
   349ca:	3301      	adds	r3, #1
   349cc:	e7fa      	b.n	349c4 <strncpy+0x1a>
   349ce:	001c      	movs	r4, r3
   349d0:	0032      	movs	r2, r6
   349d2:	e7ec      	b.n	349ae <strncpy+0x4>

000349d4 <strrchr>:
   349d4:	b570      	push	{r4, r5, r6, lr}
   349d6:	000d      	movs	r5, r1
   349d8:	2400      	movs	r4, #0
   349da:	2900      	cmp	r1, #0
   349dc:	d105      	bne.n	349ea <strrchr+0x16>
   349de:	f000 ff19 	bl	35814 <strchr>
   349e2:	0004      	movs	r4, r0
   349e4:	e006      	b.n	349f4 <strrchr+0x20>
   349e6:	001c      	movs	r4, r3
   349e8:	1c58      	adds	r0, r3, #1
   349ea:	0029      	movs	r1, r5
   349ec:	f000 ff12 	bl	35814 <strchr>
   349f0:	1e03      	subs	r3, r0, #0
   349f2:	d1f8      	bne.n	349e6 <strrchr+0x12>
   349f4:	0020      	movs	r0, r4
   349f6:	bd70      	pop	{r4, r5, r6, pc}

000349f8 <strstr>:
   349f8:	b510      	push	{r4, lr}
   349fa:	0002      	movs	r2, r0
   349fc:	7800      	ldrb	r0, [r0, #0]
   349fe:	2800      	cmp	r0, #0
   34a00:	d104      	bne.n	34a0c <strstr+0x14>
   34a02:	7809      	ldrb	r1, [r1, #0]
   34a04:	2900      	cmp	r1, #0
   34a06:	d00d      	beq.n	34a24 <strstr+0x2c>
   34a08:	bd10      	pop	{r4, pc}
   34a0a:	3201      	adds	r2, #1
   34a0c:	7810      	ldrb	r0, [r2, #0]
   34a0e:	2800      	cmp	r0, #0
   34a10:	d0fa      	beq.n	34a08 <strstr+0x10>
   34a12:	2300      	movs	r3, #0
   34a14:	5cc8      	ldrb	r0, [r1, r3]
   34a16:	2800      	cmp	r0, #0
   34a18:	d004      	beq.n	34a24 <strstr+0x2c>
   34a1a:	5cd4      	ldrb	r4, [r2, r3]
   34a1c:	4284      	cmp	r4, r0
   34a1e:	d1f4      	bne.n	34a0a <strstr+0x12>
   34a20:	3301      	adds	r3, #1
   34a22:	e7f7      	b.n	34a14 <strstr+0x1c>
   34a24:	0010      	movs	r0, r2
   34a26:	e7ef      	b.n	34a08 <strstr+0x10>

00034a28 <_strtol_l.isra.0>:
   34a28:	b5f0      	push	{r4, r5, r6, r7, lr}
   34a2a:	001f      	movs	r7, r3
   34a2c:	000e      	movs	r6, r1
   34a2e:	b087      	sub	sp, #28
   34a30:	9005      	str	r0, [sp, #20]
   34a32:	9103      	str	r1, [sp, #12]
   34a34:	9202      	str	r2, [sp, #8]
   34a36:	980c      	ldr	r0, [sp, #48]	; 0x30
   34a38:	7834      	ldrb	r4, [r6, #0]
   34a3a:	f000 fb20 	bl	3507e <__locale_ctype_ptr_l>
   34a3e:	2208      	movs	r2, #8
   34a40:	1900      	adds	r0, r0, r4
   34a42:	7843      	ldrb	r3, [r0, #1]
   34a44:	1c75      	adds	r5, r6, #1
   34a46:	4013      	ands	r3, r2
   34a48:	d10c      	bne.n	34a64 <_strtol_l.isra.0+0x3c>
   34a4a:	2c2d      	cmp	r4, #45	; 0x2d
   34a4c:	d10c      	bne.n	34a68 <_strtol_l.isra.0+0x40>
   34a4e:	3301      	adds	r3, #1
   34a50:	782c      	ldrb	r4, [r5, #0]
   34a52:	9301      	str	r3, [sp, #4]
   34a54:	1cb5      	adds	r5, r6, #2
   34a56:	2f00      	cmp	r7, #0
   34a58:	d00c      	beq.n	34a74 <_strtol_l.isra.0+0x4c>
   34a5a:	2f10      	cmp	r7, #16
   34a5c:	d114      	bne.n	34a88 <_strtol_l.isra.0+0x60>
   34a5e:	2c30      	cmp	r4, #48	; 0x30
   34a60:	d00a      	beq.n	34a78 <_strtol_l.isra.0+0x50>
   34a62:	e011      	b.n	34a88 <_strtol_l.isra.0+0x60>
   34a64:	002e      	movs	r6, r5
   34a66:	e7e6      	b.n	34a36 <_strtol_l.isra.0+0xe>
   34a68:	9301      	str	r3, [sp, #4]
   34a6a:	2c2b      	cmp	r4, #43	; 0x2b
   34a6c:	d1f3      	bne.n	34a56 <_strtol_l.isra.0+0x2e>
   34a6e:	782c      	ldrb	r4, [r5, #0]
   34a70:	1cb5      	adds	r5, r6, #2
   34a72:	e7f0      	b.n	34a56 <_strtol_l.isra.0+0x2e>
   34a74:	2c30      	cmp	r4, #48	; 0x30
   34a76:	d12f      	bne.n	34ad8 <_strtol_l.isra.0+0xb0>
   34a78:	2220      	movs	r2, #32
   34a7a:	782b      	ldrb	r3, [r5, #0]
   34a7c:	4393      	bics	r3, r2
   34a7e:	2b58      	cmp	r3, #88	; 0x58
   34a80:	d151      	bne.n	34b26 <_strtol_l.isra.0+0xfe>
   34a82:	2710      	movs	r7, #16
   34a84:	786c      	ldrb	r4, [r5, #1]
   34a86:	3502      	adds	r5, #2
   34a88:	9b01      	ldr	r3, [sp, #4]
   34a8a:	4a29      	ldr	r2, [pc, #164]	; (34b30 <_strtol_l.isra.0+0x108>)
   34a8c:	0039      	movs	r1, r7
   34a8e:	189e      	adds	r6, r3, r2
   34a90:	0030      	movs	r0, r6
   34a92:	f7fd f8cd 	bl	31c30 <__aeabi_uidivmod>
   34a96:	0030      	movs	r0, r6
   34a98:	9104      	str	r1, [sp, #16]
   34a9a:	0039      	movs	r1, r7
   34a9c:	f7fd f842 	bl	31b24 <__udivsi3>
   34aa0:	2101      	movs	r1, #1
   34aa2:	2300      	movs	r3, #0
   34aa4:	4249      	negs	r1, r1
   34aa6:	0002      	movs	r2, r0
   34aa8:	468c      	mov	ip, r1
   34aaa:	0018      	movs	r0, r3
   34aac:	0021      	movs	r1, r4
   34aae:	3930      	subs	r1, #48	; 0x30
   34ab0:	2909      	cmp	r1, #9
   34ab2:	d813      	bhi.n	34adc <_strtol_l.isra.0+0xb4>
   34ab4:	000c      	movs	r4, r1
   34ab6:	42a7      	cmp	r7, r4
   34ab8:	dd1c      	ble.n	34af4 <_strtol_l.isra.0+0xcc>
   34aba:	1c59      	adds	r1, r3, #1
   34abc:	d009      	beq.n	34ad2 <_strtol_l.isra.0+0xaa>
   34abe:	4663      	mov	r3, ip
   34ac0:	4282      	cmp	r2, r0
   34ac2:	d306      	bcc.n	34ad2 <_strtol_l.isra.0+0xaa>
   34ac4:	d102      	bne.n	34acc <_strtol_l.isra.0+0xa4>
   34ac6:	9904      	ldr	r1, [sp, #16]
   34ac8:	42a1      	cmp	r1, r4
   34aca:	db02      	blt.n	34ad2 <_strtol_l.isra.0+0xaa>
   34acc:	2301      	movs	r3, #1
   34ace:	4378      	muls	r0, r7
   34ad0:	1820      	adds	r0, r4, r0
   34ad2:	782c      	ldrb	r4, [r5, #0]
   34ad4:	3501      	adds	r5, #1
   34ad6:	e7e9      	b.n	34aac <_strtol_l.isra.0+0x84>
   34ad8:	270a      	movs	r7, #10
   34ada:	e7d5      	b.n	34a88 <_strtol_l.isra.0+0x60>
   34adc:	0021      	movs	r1, r4
   34ade:	3941      	subs	r1, #65	; 0x41
   34ae0:	2919      	cmp	r1, #25
   34ae2:	d801      	bhi.n	34ae8 <_strtol_l.isra.0+0xc0>
   34ae4:	3c37      	subs	r4, #55	; 0x37
   34ae6:	e7e6      	b.n	34ab6 <_strtol_l.isra.0+0x8e>
   34ae8:	0021      	movs	r1, r4
   34aea:	3961      	subs	r1, #97	; 0x61
   34aec:	2919      	cmp	r1, #25
   34aee:	d801      	bhi.n	34af4 <_strtol_l.isra.0+0xcc>
   34af0:	3c57      	subs	r4, #87	; 0x57
   34af2:	e7e0      	b.n	34ab6 <_strtol_l.isra.0+0x8e>
   34af4:	1c5a      	adds	r2, r3, #1
   34af6:	d108      	bne.n	34b0a <_strtol_l.isra.0+0xe2>
   34af8:	9a05      	ldr	r2, [sp, #20]
   34afa:	3323      	adds	r3, #35	; 0x23
   34afc:	6013      	str	r3, [r2, #0]
   34afe:	9b02      	ldr	r3, [sp, #8]
   34b00:	0030      	movs	r0, r6
   34b02:	2b00      	cmp	r3, #0
   34b04:	d10b      	bne.n	34b1e <_strtol_l.isra.0+0xf6>
   34b06:	b007      	add	sp, #28
   34b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34b0a:	9a01      	ldr	r2, [sp, #4]
   34b0c:	2a00      	cmp	r2, #0
   34b0e:	d000      	beq.n	34b12 <_strtol_l.isra.0+0xea>
   34b10:	4240      	negs	r0, r0
   34b12:	9a02      	ldr	r2, [sp, #8]
   34b14:	2a00      	cmp	r2, #0
   34b16:	d0f6      	beq.n	34b06 <_strtol_l.isra.0+0xde>
   34b18:	9a03      	ldr	r2, [sp, #12]
   34b1a:	2b00      	cmp	r3, #0
   34b1c:	d000      	beq.n	34b20 <_strtol_l.isra.0+0xf8>
   34b1e:	1e6a      	subs	r2, r5, #1
   34b20:	9b02      	ldr	r3, [sp, #8]
   34b22:	601a      	str	r2, [r3, #0]
   34b24:	e7ef      	b.n	34b06 <_strtol_l.isra.0+0xde>
   34b26:	2430      	movs	r4, #48	; 0x30
   34b28:	2f00      	cmp	r7, #0
   34b2a:	d1ad      	bne.n	34a88 <_strtol_l.isra.0+0x60>
   34b2c:	3708      	adds	r7, #8
   34b2e:	e7ab      	b.n	34a88 <_strtol_l.isra.0+0x60>
   34b30:	7fffffff 	.word	0x7fffffff

00034b34 <strtol>:
   34b34:	b537      	push	{r0, r1, r2, r4, r5, lr}
   34b36:	0013      	movs	r3, r2
   34b38:	4a06      	ldr	r2, [pc, #24]	; (34b54 <strtol+0x20>)
   34b3a:	0005      	movs	r5, r0
   34b3c:	6810      	ldr	r0, [r2, #0]
   34b3e:	6a04      	ldr	r4, [r0, #32]
   34b40:	2c00      	cmp	r4, #0
   34b42:	d100      	bne.n	34b46 <strtol+0x12>
   34b44:	4c04      	ldr	r4, [pc, #16]	; (34b58 <strtol+0x24>)
   34b46:	000a      	movs	r2, r1
   34b48:	9400      	str	r4, [sp, #0]
   34b4a:	0029      	movs	r1, r5
   34b4c:	f7ff ff6c 	bl	34a28 <_strtol_l.isra.0>
   34b50:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   34b52:	46c0      	nop			; (mov r8, r8)
   34b54:	20000120 	.word	0x20000120
   34b58:	20000184 	.word	0x20000184

00034b5c <_vsniprintf_r>:
   34b5c:	b530      	push	{r4, r5, lr}
   34b5e:	0014      	movs	r4, r2
   34b60:	b09b      	sub	sp, #108	; 0x6c
   34b62:	0005      	movs	r5, r0
   34b64:	001a      	movs	r2, r3
   34b66:	2c00      	cmp	r4, #0
   34b68:	da05      	bge.n	34b76 <_vsniprintf_r+0x1a>
   34b6a:	238b      	movs	r3, #139	; 0x8b
   34b6c:	6003      	str	r3, [r0, #0]
   34b6e:	2001      	movs	r0, #1
   34b70:	4240      	negs	r0, r0
   34b72:	b01b      	add	sp, #108	; 0x6c
   34b74:	bd30      	pop	{r4, r5, pc}
   34b76:	2382      	movs	r3, #130	; 0x82
   34b78:	4668      	mov	r0, sp
   34b7a:	009b      	lsls	r3, r3, #2
   34b7c:	8183      	strh	r3, [r0, #12]
   34b7e:	2300      	movs	r3, #0
   34b80:	9100      	str	r1, [sp, #0]
   34b82:	9104      	str	r1, [sp, #16]
   34b84:	429c      	cmp	r4, r3
   34b86:	d000      	beq.n	34b8a <_vsniprintf_r+0x2e>
   34b88:	1e63      	subs	r3, r4, #1
   34b8a:	9302      	str	r3, [sp, #8]
   34b8c:	9305      	str	r3, [sp, #20]
   34b8e:	2301      	movs	r3, #1
   34b90:	4669      	mov	r1, sp
   34b92:	425b      	negs	r3, r3
   34b94:	81cb      	strh	r3, [r1, #14]
   34b96:	0028      	movs	r0, r5
   34b98:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   34b9a:	f000 fb63 	bl	35264 <_svfiprintf_r>
   34b9e:	1c43      	adds	r3, r0, #1
   34ba0:	da01      	bge.n	34ba6 <_vsniprintf_r+0x4a>
   34ba2:	238b      	movs	r3, #139	; 0x8b
   34ba4:	602b      	str	r3, [r5, #0]
   34ba6:	2c00      	cmp	r4, #0
   34ba8:	d0e3      	beq.n	34b72 <_vsniprintf_r+0x16>
   34baa:	2300      	movs	r3, #0
   34bac:	9a00      	ldr	r2, [sp, #0]
   34bae:	7013      	strb	r3, [r2, #0]
   34bb0:	e7df      	b.n	34b72 <_vsniprintf_r+0x16>
	...

00034bb4 <vsniprintf>:
   34bb4:	b507      	push	{r0, r1, r2, lr}
   34bb6:	9300      	str	r3, [sp, #0]
   34bb8:	0013      	movs	r3, r2
   34bba:	000a      	movs	r2, r1
   34bbc:	0001      	movs	r1, r0
   34bbe:	4802      	ldr	r0, [pc, #8]	; (34bc8 <vsniprintf+0x14>)
   34bc0:	6800      	ldr	r0, [r0, #0]
   34bc2:	f7ff ffcb 	bl	34b5c <_vsniprintf_r>
   34bc6:	bd0e      	pop	{r1, r2, r3, pc}
   34bc8:	20000120 	.word	0x20000120

00034bcc <__swbuf_r>:
   34bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34bce:	0005      	movs	r5, r0
   34bd0:	000e      	movs	r6, r1
   34bd2:	0014      	movs	r4, r2
   34bd4:	2800      	cmp	r0, #0
   34bd6:	d004      	beq.n	34be2 <__swbuf_r+0x16>
   34bd8:	6983      	ldr	r3, [r0, #24]
   34bda:	2b00      	cmp	r3, #0
   34bdc:	d101      	bne.n	34be2 <__swbuf_r+0x16>
   34bde:	f000 f9b9 	bl	34f54 <__sinit>
   34be2:	4b22      	ldr	r3, [pc, #136]	; (34c6c <__swbuf_r+0xa0>)
   34be4:	429c      	cmp	r4, r3
   34be6:	d12d      	bne.n	34c44 <__swbuf_r+0x78>
   34be8:	686c      	ldr	r4, [r5, #4]
   34bea:	69a3      	ldr	r3, [r4, #24]
   34bec:	60a3      	str	r3, [r4, #8]
   34bee:	89a3      	ldrh	r3, [r4, #12]
   34bf0:	071b      	lsls	r3, r3, #28
   34bf2:	d531      	bpl.n	34c58 <__swbuf_r+0x8c>
   34bf4:	6923      	ldr	r3, [r4, #16]
   34bf6:	2b00      	cmp	r3, #0
   34bf8:	d02e      	beq.n	34c58 <__swbuf_r+0x8c>
   34bfa:	6823      	ldr	r3, [r4, #0]
   34bfc:	6922      	ldr	r2, [r4, #16]
   34bfe:	b2f7      	uxtb	r7, r6
   34c00:	1a98      	subs	r0, r3, r2
   34c02:	6963      	ldr	r3, [r4, #20]
   34c04:	b2f6      	uxtb	r6, r6
   34c06:	4298      	cmp	r0, r3
   34c08:	db05      	blt.n	34c16 <__swbuf_r+0x4a>
   34c0a:	0021      	movs	r1, r4
   34c0c:	0028      	movs	r0, r5
   34c0e:	f000 f933 	bl	34e78 <_fflush_r>
   34c12:	2800      	cmp	r0, #0
   34c14:	d126      	bne.n	34c64 <__swbuf_r+0x98>
   34c16:	68a3      	ldr	r3, [r4, #8]
   34c18:	3001      	adds	r0, #1
   34c1a:	3b01      	subs	r3, #1
   34c1c:	60a3      	str	r3, [r4, #8]
   34c1e:	6823      	ldr	r3, [r4, #0]
   34c20:	1c5a      	adds	r2, r3, #1
   34c22:	6022      	str	r2, [r4, #0]
   34c24:	701f      	strb	r7, [r3, #0]
   34c26:	6963      	ldr	r3, [r4, #20]
   34c28:	4298      	cmp	r0, r3
   34c2a:	d004      	beq.n	34c36 <__swbuf_r+0x6a>
   34c2c:	89a3      	ldrh	r3, [r4, #12]
   34c2e:	07db      	lsls	r3, r3, #31
   34c30:	d51a      	bpl.n	34c68 <__swbuf_r+0x9c>
   34c32:	2e0a      	cmp	r6, #10
   34c34:	d118      	bne.n	34c68 <__swbuf_r+0x9c>
   34c36:	0021      	movs	r1, r4
   34c38:	0028      	movs	r0, r5
   34c3a:	f000 f91d 	bl	34e78 <_fflush_r>
   34c3e:	2800      	cmp	r0, #0
   34c40:	d012      	beq.n	34c68 <__swbuf_r+0x9c>
   34c42:	e00f      	b.n	34c64 <__swbuf_r+0x98>
   34c44:	4b0a      	ldr	r3, [pc, #40]	; (34c70 <__swbuf_r+0xa4>)
   34c46:	429c      	cmp	r4, r3
   34c48:	d101      	bne.n	34c4e <__swbuf_r+0x82>
   34c4a:	68ac      	ldr	r4, [r5, #8]
   34c4c:	e7cd      	b.n	34bea <__swbuf_r+0x1e>
   34c4e:	4b09      	ldr	r3, [pc, #36]	; (34c74 <__swbuf_r+0xa8>)
   34c50:	429c      	cmp	r4, r3
   34c52:	d1ca      	bne.n	34bea <__swbuf_r+0x1e>
   34c54:	68ec      	ldr	r4, [r5, #12]
   34c56:	e7c8      	b.n	34bea <__swbuf_r+0x1e>
   34c58:	0021      	movs	r1, r4
   34c5a:	0028      	movs	r0, r5
   34c5c:	f000 f80c 	bl	34c78 <__swsetup_r>
   34c60:	2800      	cmp	r0, #0
   34c62:	d0ca      	beq.n	34bfa <__swbuf_r+0x2e>
   34c64:	2601      	movs	r6, #1
   34c66:	4276      	negs	r6, r6
   34c68:	0030      	movs	r0, r6
   34c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34c6c:	00039bcc 	.word	0x00039bcc
   34c70:	00039bec 	.word	0x00039bec
   34c74:	00039bac 	.word	0x00039bac

00034c78 <__swsetup_r>:
   34c78:	4b36      	ldr	r3, [pc, #216]	; (34d54 <__swsetup_r+0xdc>)
   34c7a:	b570      	push	{r4, r5, r6, lr}
   34c7c:	681d      	ldr	r5, [r3, #0]
   34c7e:	0006      	movs	r6, r0
   34c80:	000c      	movs	r4, r1
   34c82:	2d00      	cmp	r5, #0
   34c84:	d005      	beq.n	34c92 <__swsetup_r+0x1a>
   34c86:	69ab      	ldr	r3, [r5, #24]
   34c88:	2b00      	cmp	r3, #0
   34c8a:	d102      	bne.n	34c92 <__swsetup_r+0x1a>
   34c8c:	0028      	movs	r0, r5
   34c8e:	f000 f961 	bl	34f54 <__sinit>
   34c92:	4b31      	ldr	r3, [pc, #196]	; (34d58 <__swsetup_r+0xe0>)
   34c94:	429c      	cmp	r4, r3
   34c96:	d10f      	bne.n	34cb8 <__swsetup_r+0x40>
   34c98:	686c      	ldr	r4, [r5, #4]
   34c9a:	230c      	movs	r3, #12
   34c9c:	5ee2      	ldrsh	r2, [r4, r3]
   34c9e:	b293      	uxth	r3, r2
   34ca0:	0719      	lsls	r1, r3, #28
   34ca2:	d42d      	bmi.n	34d00 <__swsetup_r+0x88>
   34ca4:	06d9      	lsls	r1, r3, #27
   34ca6:	d411      	bmi.n	34ccc <__swsetup_r+0x54>
   34ca8:	2309      	movs	r3, #9
   34caa:	2001      	movs	r0, #1
   34cac:	6033      	str	r3, [r6, #0]
   34cae:	3337      	adds	r3, #55	; 0x37
   34cb0:	4313      	orrs	r3, r2
   34cb2:	81a3      	strh	r3, [r4, #12]
   34cb4:	4240      	negs	r0, r0
   34cb6:	bd70      	pop	{r4, r5, r6, pc}
   34cb8:	4b28      	ldr	r3, [pc, #160]	; (34d5c <__swsetup_r+0xe4>)
   34cba:	429c      	cmp	r4, r3
   34cbc:	d101      	bne.n	34cc2 <__swsetup_r+0x4a>
   34cbe:	68ac      	ldr	r4, [r5, #8]
   34cc0:	e7eb      	b.n	34c9a <__swsetup_r+0x22>
   34cc2:	4b27      	ldr	r3, [pc, #156]	; (34d60 <__swsetup_r+0xe8>)
   34cc4:	429c      	cmp	r4, r3
   34cc6:	d1e8      	bne.n	34c9a <__swsetup_r+0x22>
   34cc8:	68ec      	ldr	r4, [r5, #12]
   34cca:	e7e6      	b.n	34c9a <__swsetup_r+0x22>
   34ccc:	075b      	lsls	r3, r3, #29
   34cce:	d513      	bpl.n	34cf8 <__swsetup_r+0x80>
   34cd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
   34cd2:	2900      	cmp	r1, #0
   34cd4:	d008      	beq.n	34ce8 <__swsetup_r+0x70>
   34cd6:	0023      	movs	r3, r4
   34cd8:	3344      	adds	r3, #68	; 0x44
   34cda:	4299      	cmp	r1, r3
   34cdc:	d002      	beq.n	34ce4 <__swsetup_r+0x6c>
   34cde:	0030      	movs	r0, r6
   34ce0:	f7ff fc86 	bl	345f0 <_free_r>
   34ce4:	2300      	movs	r3, #0
   34ce6:	6363      	str	r3, [r4, #52]	; 0x34
   34ce8:	2224      	movs	r2, #36	; 0x24
   34cea:	89a3      	ldrh	r3, [r4, #12]
   34cec:	4393      	bics	r3, r2
   34cee:	81a3      	strh	r3, [r4, #12]
   34cf0:	2300      	movs	r3, #0
   34cf2:	6063      	str	r3, [r4, #4]
   34cf4:	6923      	ldr	r3, [r4, #16]
   34cf6:	6023      	str	r3, [r4, #0]
   34cf8:	2308      	movs	r3, #8
   34cfa:	89a2      	ldrh	r2, [r4, #12]
   34cfc:	4313      	orrs	r3, r2
   34cfe:	81a3      	strh	r3, [r4, #12]
   34d00:	6923      	ldr	r3, [r4, #16]
   34d02:	2b00      	cmp	r3, #0
   34d04:	d10b      	bne.n	34d1e <__swsetup_r+0xa6>
   34d06:	21a0      	movs	r1, #160	; 0xa0
   34d08:	2280      	movs	r2, #128	; 0x80
   34d0a:	89a3      	ldrh	r3, [r4, #12]
   34d0c:	0089      	lsls	r1, r1, #2
   34d0e:	0092      	lsls	r2, r2, #2
   34d10:	400b      	ands	r3, r1
   34d12:	4293      	cmp	r3, r2
   34d14:	d003      	beq.n	34d1e <__swsetup_r+0xa6>
   34d16:	0021      	movs	r1, r4
   34d18:	0030      	movs	r0, r6
   34d1a:	f000 f9e9 	bl	350f0 <__smakebuf_r>
   34d1e:	2301      	movs	r3, #1
   34d20:	89a2      	ldrh	r2, [r4, #12]
   34d22:	4013      	ands	r3, r2
   34d24:	d011      	beq.n	34d4a <__swsetup_r+0xd2>
   34d26:	2300      	movs	r3, #0
   34d28:	60a3      	str	r3, [r4, #8]
   34d2a:	6963      	ldr	r3, [r4, #20]
   34d2c:	425b      	negs	r3, r3
   34d2e:	61a3      	str	r3, [r4, #24]
   34d30:	2000      	movs	r0, #0
   34d32:	6923      	ldr	r3, [r4, #16]
   34d34:	4283      	cmp	r3, r0
   34d36:	d1be      	bne.n	34cb6 <__swsetup_r+0x3e>
   34d38:	230c      	movs	r3, #12
   34d3a:	5ee2      	ldrsh	r2, [r4, r3]
   34d3c:	0613      	lsls	r3, r2, #24
   34d3e:	d5ba      	bpl.n	34cb6 <__swsetup_r+0x3e>
   34d40:	2340      	movs	r3, #64	; 0x40
   34d42:	4313      	orrs	r3, r2
   34d44:	81a3      	strh	r3, [r4, #12]
   34d46:	3801      	subs	r0, #1
   34d48:	e7b5      	b.n	34cb6 <__swsetup_r+0x3e>
   34d4a:	0792      	lsls	r2, r2, #30
   34d4c:	d400      	bmi.n	34d50 <__swsetup_r+0xd8>
   34d4e:	6963      	ldr	r3, [r4, #20]
   34d50:	60a3      	str	r3, [r4, #8]
   34d52:	e7ed      	b.n	34d30 <__swsetup_r+0xb8>
   34d54:	20000120 	.word	0x20000120
   34d58:	00039bcc 	.word	0x00039bcc
   34d5c:	00039bec 	.word	0x00039bec
   34d60:	00039bac 	.word	0x00039bac

00034d64 <__sflush_r>:
   34d64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   34d66:	898a      	ldrh	r2, [r1, #12]
   34d68:	0005      	movs	r5, r0
   34d6a:	000c      	movs	r4, r1
   34d6c:	0713      	lsls	r3, r2, #28
   34d6e:	d460      	bmi.n	34e32 <__sflush_r+0xce>
   34d70:	684b      	ldr	r3, [r1, #4]
   34d72:	2b00      	cmp	r3, #0
   34d74:	dc04      	bgt.n	34d80 <__sflush_r+0x1c>
   34d76:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   34d78:	2b00      	cmp	r3, #0
   34d7a:	dc01      	bgt.n	34d80 <__sflush_r+0x1c>
   34d7c:	2000      	movs	r0, #0
   34d7e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   34d80:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   34d82:	2f00      	cmp	r7, #0
   34d84:	d0fa      	beq.n	34d7c <__sflush_r+0x18>
   34d86:	2300      	movs	r3, #0
   34d88:	682e      	ldr	r6, [r5, #0]
   34d8a:	602b      	str	r3, [r5, #0]
   34d8c:	2380      	movs	r3, #128	; 0x80
   34d8e:	015b      	lsls	r3, r3, #5
   34d90:	401a      	ands	r2, r3
   34d92:	d034      	beq.n	34dfe <__sflush_r+0x9a>
   34d94:	6d60      	ldr	r0, [r4, #84]	; 0x54
   34d96:	89a3      	ldrh	r3, [r4, #12]
   34d98:	075b      	lsls	r3, r3, #29
   34d9a:	d506      	bpl.n	34daa <__sflush_r+0x46>
   34d9c:	6863      	ldr	r3, [r4, #4]
   34d9e:	1ac0      	subs	r0, r0, r3
   34da0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   34da2:	2b00      	cmp	r3, #0
   34da4:	d001      	beq.n	34daa <__sflush_r+0x46>
   34da6:	6c23      	ldr	r3, [r4, #64]	; 0x40
   34da8:	1ac0      	subs	r0, r0, r3
   34daa:	0002      	movs	r2, r0
   34dac:	6a21      	ldr	r1, [r4, #32]
   34dae:	2300      	movs	r3, #0
   34db0:	0028      	movs	r0, r5
   34db2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   34db4:	47b8      	blx	r7
   34db6:	89a1      	ldrh	r1, [r4, #12]
   34db8:	1c43      	adds	r3, r0, #1
   34dba:	d106      	bne.n	34dca <__sflush_r+0x66>
   34dbc:	682b      	ldr	r3, [r5, #0]
   34dbe:	2b1d      	cmp	r3, #29
   34dc0:	d831      	bhi.n	34e26 <__sflush_r+0xc2>
   34dc2:	4a2c      	ldr	r2, [pc, #176]	; (34e74 <__sflush_r+0x110>)
   34dc4:	40da      	lsrs	r2, r3
   34dc6:	07d3      	lsls	r3, r2, #31
   34dc8:	d52d      	bpl.n	34e26 <__sflush_r+0xc2>
   34dca:	2300      	movs	r3, #0
   34dcc:	6063      	str	r3, [r4, #4]
   34dce:	6923      	ldr	r3, [r4, #16]
   34dd0:	6023      	str	r3, [r4, #0]
   34dd2:	04cb      	lsls	r3, r1, #19
   34dd4:	d505      	bpl.n	34de2 <__sflush_r+0x7e>
   34dd6:	1c43      	adds	r3, r0, #1
   34dd8:	d102      	bne.n	34de0 <__sflush_r+0x7c>
   34dda:	682b      	ldr	r3, [r5, #0]
   34ddc:	2b00      	cmp	r3, #0
   34dde:	d100      	bne.n	34de2 <__sflush_r+0x7e>
   34de0:	6560      	str	r0, [r4, #84]	; 0x54
   34de2:	6b61      	ldr	r1, [r4, #52]	; 0x34
   34de4:	602e      	str	r6, [r5, #0]
   34de6:	2900      	cmp	r1, #0
   34de8:	d0c8      	beq.n	34d7c <__sflush_r+0x18>
   34dea:	0023      	movs	r3, r4
   34dec:	3344      	adds	r3, #68	; 0x44
   34dee:	4299      	cmp	r1, r3
   34df0:	d002      	beq.n	34df8 <__sflush_r+0x94>
   34df2:	0028      	movs	r0, r5
   34df4:	f7ff fbfc 	bl	345f0 <_free_r>
   34df8:	2000      	movs	r0, #0
   34dfa:	6360      	str	r0, [r4, #52]	; 0x34
   34dfc:	e7bf      	b.n	34d7e <__sflush_r+0x1a>
   34dfe:	2301      	movs	r3, #1
   34e00:	6a21      	ldr	r1, [r4, #32]
   34e02:	0028      	movs	r0, r5
   34e04:	47b8      	blx	r7
   34e06:	1c43      	adds	r3, r0, #1
   34e08:	d1c5      	bne.n	34d96 <__sflush_r+0x32>
   34e0a:	682b      	ldr	r3, [r5, #0]
   34e0c:	2b00      	cmp	r3, #0
   34e0e:	d0c2      	beq.n	34d96 <__sflush_r+0x32>
   34e10:	2b1d      	cmp	r3, #29
   34e12:	d001      	beq.n	34e18 <__sflush_r+0xb4>
   34e14:	2b16      	cmp	r3, #22
   34e16:	d101      	bne.n	34e1c <__sflush_r+0xb8>
   34e18:	602e      	str	r6, [r5, #0]
   34e1a:	e7af      	b.n	34d7c <__sflush_r+0x18>
   34e1c:	2340      	movs	r3, #64	; 0x40
   34e1e:	89a2      	ldrh	r2, [r4, #12]
   34e20:	4313      	orrs	r3, r2
   34e22:	81a3      	strh	r3, [r4, #12]
   34e24:	e7ab      	b.n	34d7e <__sflush_r+0x1a>
   34e26:	2340      	movs	r3, #64	; 0x40
   34e28:	430b      	orrs	r3, r1
   34e2a:	2001      	movs	r0, #1
   34e2c:	81a3      	strh	r3, [r4, #12]
   34e2e:	4240      	negs	r0, r0
   34e30:	e7a5      	b.n	34d7e <__sflush_r+0x1a>
   34e32:	690f      	ldr	r7, [r1, #16]
   34e34:	2f00      	cmp	r7, #0
   34e36:	d0a1      	beq.n	34d7c <__sflush_r+0x18>
   34e38:	680b      	ldr	r3, [r1, #0]
   34e3a:	600f      	str	r7, [r1, #0]
   34e3c:	1bdb      	subs	r3, r3, r7
   34e3e:	9301      	str	r3, [sp, #4]
   34e40:	2300      	movs	r3, #0
   34e42:	0792      	lsls	r2, r2, #30
   34e44:	d100      	bne.n	34e48 <__sflush_r+0xe4>
   34e46:	694b      	ldr	r3, [r1, #20]
   34e48:	60a3      	str	r3, [r4, #8]
   34e4a:	9b01      	ldr	r3, [sp, #4]
   34e4c:	2b00      	cmp	r3, #0
   34e4e:	dc00      	bgt.n	34e52 <__sflush_r+0xee>
   34e50:	e794      	b.n	34d7c <__sflush_r+0x18>
   34e52:	9b01      	ldr	r3, [sp, #4]
   34e54:	003a      	movs	r2, r7
   34e56:	6a21      	ldr	r1, [r4, #32]
   34e58:	0028      	movs	r0, r5
   34e5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   34e5c:	47b0      	blx	r6
   34e5e:	2800      	cmp	r0, #0
   34e60:	dc03      	bgt.n	34e6a <__sflush_r+0x106>
   34e62:	2340      	movs	r3, #64	; 0x40
   34e64:	89a2      	ldrh	r2, [r4, #12]
   34e66:	4313      	orrs	r3, r2
   34e68:	e7df      	b.n	34e2a <__sflush_r+0xc6>
   34e6a:	9b01      	ldr	r3, [sp, #4]
   34e6c:	183f      	adds	r7, r7, r0
   34e6e:	1a1b      	subs	r3, r3, r0
   34e70:	9301      	str	r3, [sp, #4]
   34e72:	e7ea      	b.n	34e4a <__sflush_r+0xe6>
   34e74:	20400001 	.word	0x20400001

00034e78 <_fflush_r>:
   34e78:	690b      	ldr	r3, [r1, #16]
   34e7a:	b570      	push	{r4, r5, r6, lr}
   34e7c:	0005      	movs	r5, r0
   34e7e:	000c      	movs	r4, r1
   34e80:	2b00      	cmp	r3, #0
   34e82:	d101      	bne.n	34e88 <_fflush_r+0x10>
   34e84:	2000      	movs	r0, #0
   34e86:	bd70      	pop	{r4, r5, r6, pc}
   34e88:	2800      	cmp	r0, #0
   34e8a:	d004      	beq.n	34e96 <_fflush_r+0x1e>
   34e8c:	6983      	ldr	r3, [r0, #24]
   34e8e:	2b00      	cmp	r3, #0
   34e90:	d101      	bne.n	34e96 <_fflush_r+0x1e>
   34e92:	f000 f85f 	bl	34f54 <__sinit>
   34e96:	4b0b      	ldr	r3, [pc, #44]	; (34ec4 <_fflush_r+0x4c>)
   34e98:	429c      	cmp	r4, r3
   34e9a:	d109      	bne.n	34eb0 <_fflush_r+0x38>
   34e9c:	686c      	ldr	r4, [r5, #4]
   34e9e:	220c      	movs	r2, #12
   34ea0:	5ea3      	ldrsh	r3, [r4, r2]
   34ea2:	2b00      	cmp	r3, #0
   34ea4:	d0ee      	beq.n	34e84 <_fflush_r+0xc>
   34ea6:	0021      	movs	r1, r4
   34ea8:	0028      	movs	r0, r5
   34eaa:	f7ff ff5b 	bl	34d64 <__sflush_r>
   34eae:	e7ea      	b.n	34e86 <_fflush_r+0xe>
   34eb0:	4b05      	ldr	r3, [pc, #20]	; (34ec8 <_fflush_r+0x50>)
   34eb2:	429c      	cmp	r4, r3
   34eb4:	d101      	bne.n	34eba <_fflush_r+0x42>
   34eb6:	68ac      	ldr	r4, [r5, #8]
   34eb8:	e7f1      	b.n	34e9e <_fflush_r+0x26>
   34eba:	4b04      	ldr	r3, [pc, #16]	; (34ecc <_fflush_r+0x54>)
   34ebc:	429c      	cmp	r4, r3
   34ebe:	d1ee      	bne.n	34e9e <_fflush_r+0x26>
   34ec0:	68ec      	ldr	r4, [r5, #12]
   34ec2:	e7ec      	b.n	34e9e <_fflush_r+0x26>
   34ec4:	00039bcc 	.word	0x00039bcc
   34ec8:	00039bec 	.word	0x00039bec
   34ecc:	00039bac 	.word	0x00039bac

00034ed0 <_cleanup_r>:
   34ed0:	b510      	push	{r4, lr}
   34ed2:	4902      	ldr	r1, [pc, #8]	; (34edc <_cleanup_r+0xc>)
   34ed4:	f000 f8b2 	bl	3503c <_fwalk_reent>
   34ed8:	bd10      	pop	{r4, pc}
   34eda:	46c0      	nop			; (mov r8, r8)
   34edc:	00034e79 	.word	0x00034e79

00034ee0 <std.isra.0>:
   34ee0:	2300      	movs	r3, #0
   34ee2:	b510      	push	{r4, lr}
   34ee4:	0004      	movs	r4, r0
   34ee6:	6003      	str	r3, [r0, #0]
   34ee8:	6043      	str	r3, [r0, #4]
   34eea:	6083      	str	r3, [r0, #8]
   34eec:	8181      	strh	r1, [r0, #12]
   34eee:	6643      	str	r3, [r0, #100]	; 0x64
   34ef0:	81c2      	strh	r2, [r0, #14]
   34ef2:	6103      	str	r3, [r0, #16]
   34ef4:	6143      	str	r3, [r0, #20]
   34ef6:	6183      	str	r3, [r0, #24]
   34ef8:	0019      	movs	r1, r3
   34efa:	2208      	movs	r2, #8
   34efc:	305c      	adds	r0, #92	; 0x5c
   34efe:	f7ff fb6e 	bl	345de <memset>
   34f02:	4b05      	ldr	r3, [pc, #20]	; (34f18 <std.isra.0+0x38>)
   34f04:	6224      	str	r4, [r4, #32]
   34f06:	6263      	str	r3, [r4, #36]	; 0x24
   34f08:	4b04      	ldr	r3, [pc, #16]	; (34f1c <std.isra.0+0x3c>)
   34f0a:	62a3      	str	r3, [r4, #40]	; 0x28
   34f0c:	4b04      	ldr	r3, [pc, #16]	; (34f20 <std.isra.0+0x40>)
   34f0e:	62e3      	str	r3, [r4, #44]	; 0x2c
   34f10:	4b04      	ldr	r3, [pc, #16]	; (34f24 <std.isra.0+0x44>)
   34f12:	6323      	str	r3, [r4, #48]	; 0x30
   34f14:	bd10      	pop	{r4, pc}
   34f16:	46c0      	nop			; (mov r8, r8)
   34f18:	0003577d 	.word	0x0003577d
   34f1c:	000357a5 	.word	0x000357a5
   34f20:	000357dd 	.word	0x000357dd
   34f24:	00035809 	.word	0x00035809

00034f28 <__sfmoreglue>:
   34f28:	b570      	push	{r4, r5, r6, lr}
   34f2a:	2568      	movs	r5, #104	; 0x68
   34f2c:	1e4a      	subs	r2, r1, #1
   34f2e:	4355      	muls	r5, r2
   34f30:	000e      	movs	r6, r1
   34f32:	0029      	movs	r1, r5
   34f34:	3174      	adds	r1, #116	; 0x74
   34f36:	f7ff fba5 	bl	34684 <_malloc_r>
   34f3a:	1e04      	subs	r4, r0, #0
   34f3c:	d008      	beq.n	34f50 <__sfmoreglue+0x28>
   34f3e:	2100      	movs	r1, #0
   34f40:	002a      	movs	r2, r5
   34f42:	6001      	str	r1, [r0, #0]
   34f44:	6046      	str	r6, [r0, #4]
   34f46:	300c      	adds	r0, #12
   34f48:	60a0      	str	r0, [r4, #8]
   34f4a:	3268      	adds	r2, #104	; 0x68
   34f4c:	f7ff fb47 	bl	345de <memset>
   34f50:	0020      	movs	r0, r4
   34f52:	bd70      	pop	{r4, r5, r6, pc}

00034f54 <__sinit>:
   34f54:	6983      	ldr	r3, [r0, #24]
   34f56:	b513      	push	{r0, r1, r4, lr}
   34f58:	0004      	movs	r4, r0
   34f5a:	2b00      	cmp	r3, #0
   34f5c:	d128      	bne.n	34fb0 <__sinit+0x5c>
   34f5e:	6483      	str	r3, [r0, #72]	; 0x48
   34f60:	64c3      	str	r3, [r0, #76]	; 0x4c
   34f62:	6503      	str	r3, [r0, #80]	; 0x50
   34f64:	4b13      	ldr	r3, [pc, #76]	; (34fb4 <__sinit+0x60>)
   34f66:	4a14      	ldr	r2, [pc, #80]	; (34fb8 <__sinit+0x64>)
   34f68:	681b      	ldr	r3, [r3, #0]
   34f6a:	6282      	str	r2, [r0, #40]	; 0x28
   34f6c:	9301      	str	r3, [sp, #4]
   34f6e:	4298      	cmp	r0, r3
   34f70:	d101      	bne.n	34f76 <__sinit+0x22>
   34f72:	2301      	movs	r3, #1
   34f74:	6183      	str	r3, [r0, #24]
   34f76:	0020      	movs	r0, r4
   34f78:	f000 f820 	bl	34fbc <__sfp>
   34f7c:	6060      	str	r0, [r4, #4]
   34f7e:	0020      	movs	r0, r4
   34f80:	f000 f81c 	bl	34fbc <__sfp>
   34f84:	60a0      	str	r0, [r4, #8]
   34f86:	0020      	movs	r0, r4
   34f88:	f000 f818 	bl	34fbc <__sfp>
   34f8c:	2200      	movs	r2, #0
   34f8e:	60e0      	str	r0, [r4, #12]
   34f90:	2104      	movs	r1, #4
   34f92:	6860      	ldr	r0, [r4, #4]
   34f94:	f7ff ffa4 	bl	34ee0 <std.isra.0>
   34f98:	2201      	movs	r2, #1
   34f9a:	2109      	movs	r1, #9
   34f9c:	68a0      	ldr	r0, [r4, #8]
   34f9e:	f7ff ff9f 	bl	34ee0 <std.isra.0>
   34fa2:	2202      	movs	r2, #2
   34fa4:	2112      	movs	r1, #18
   34fa6:	68e0      	ldr	r0, [r4, #12]
   34fa8:	f7ff ff9a 	bl	34ee0 <std.isra.0>
   34fac:	2301      	movs	r3, #1
   34fae:	61a3      	str	r3, [r4, #24]
   34fb0:	bd13      	pop	{r0, r1, r4, pc}
   34fb2:	46c0      	nop			; (mov r8, r8)
   34fb4:	00039ba8 	.word	0x00039ba8
   34fb8:	00034ed1 	.word	0x00034ed1

00034fbc <__sfp>:
   34fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34fbe:	4b1e      	ldr	r3, [pc, #120]	; (35038 <__sfp+0x7c>)
   34fc0:	0007      	movs	r7, r0
   34fc2:	681e      	ldr	r6, [r3, #0]
   34fc4:	69b3      	ldr	r3, [r6, #24]
   34fc6:	2b00      	cmp	r3, #0
   34fc8:	d102      	bne.n	34fd0 <__sfp+0x14>
   34fca:	0030      	movs	r0, r6
   34fcc:	f7ff ffc2 	bl	34f54 <__sinit>
   34fd0:	3648      	adds	r6, #72	; 0x48
   34fd2:	68b4      	ldr	r4, [r6, #8]
   34fd4:	6873      	ldr	r3, [r6, #4]
   34fd6:	3b01      	subs	r3, #1
   34fd8:	d504      	bpl.n	34fe4 <__sfp+0x28>
   34fda:	6833      	ldr	r3, [r6, #0]
   34fdc:	2b00      	cmp	r3, #0
   34fde:	d007      	beq.n	34ff0 <__sfp+0x34>
   34fe0:	6836      	ldr	r6, [r6, #0]
   34fe2:	e7f6      	b.n	34fd2 <__sfp+0x16>
   34fe4:	220c      	movs	r2, #12
   34fe6:	5ea5      	ldrsh	r5, [r4, r2]
   34fe8:	2d00      	cmp	r5, #0
   34fea:	d00d      	beq.n	35008 <__sfp+0x4c>
   34fec:	3468      	adds	r4, #104	; 0x68
   34fee:	e7f2      	b.n	34fd6 <__sfp+0x1a>
   34ff0:	2104      	movs	r1, #4
   34ff2:	0038      	movs	r0, r7
   34ff4:	f7ff ff98 	bl	34f28 <__sfmoreglue>
   34ff8:	6030      	str	r0, [r6, #0]
   34ffa:	2800      	cmp	r0, #0
   34ffc:	d1f0      	bne.n	34fe0 <__sfp+0x24>
   34ffe:	230c      	movs	r3, #12
   35000:	0004      	movs	r4, r0
   35002:	603b      	str	r3, [r7, #0]
   35004:	0020      	movs	r0, r4
   35006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35008:	2301      	movs	r3, #1
   3500a:	0020      	movs	r0, r4
   3500c:	425b      	negs	r3, r3
   3500e:	81e3      	strh	r3, [r4, #14]
   35010:	3302      	adds	r3, #2
   35012:	81a3      	strh	r3, [r4, #12]
   35014:	6665      	str	r5, [r4, #100]	; 0x64
   35016:	6025      	str	r5, [r4, #0]
   35018:	60a5      	str	r5, [r4, #8]
   3501a:	6065      	str	r5, [r4, #4]
   3501c:	6125      	str	r5, [r4, #16]
   3501e:	6165      	str	r5, [r4, #20]
   35020:	61a5      	str	r5, [r4, #24]
   35022:	2208      	movs	r2, #8
   35024:	0029      	movs	r1, r5
   35026:	305c      	adds	r0, #92	; 0x5c
   35028:	f7ff fad9 	bl	345de <memset>
   3502c:	6365      	str	r5, [r4, #52]	; 0x34
   3502e:	63a5      	str	r5, [r4, #56]	; 0x38
   35030:	64a5      	str	r5, [r4, #72]	; 0x48
   35032:	64e5      	str	r5, [r4, #76]	; 0x4c
   35034:	e7e6      	b.n	35004 <__sfp+0x48>
   35036:	46c0      	nop			; (mov r8, r8)
   35038:	00039ba8 	.word	0x00039ba8

0003503c <_fwalk_reent>:
   3503c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3503e:	0004      	movs	r4, r0
   35040:	0007      	movs	r7, r0
   35042:	2600      	movs	r6, #0
   35044:	9101      	str	r1, [sp, #4]
   35046:	3448      	adds	r4, #72	; 0x48
   35048:	2c00      	cmp	r4, #0
   3504a:	d101      	bne.n	35050 <_fwalk_reent+0x14>
   3504c:	0030      	movs	r0, r6
   3504e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   35050:	6863      	ldr	r3, [r4, #4]
   35052:	68a5      	ldr	r5, [r4, #8]
   35054:	9300      	str	r3, [sp, #0]
   35056:	9b00      	ldr	r3, [sp, #0]
   35058:	3b01      	subs	r3, #1
   3505a:	9300      	str	r3, [sp, #0]
   3505c:	d501      	bpl.n	35062 <_fwalk_reent+0x26>
   3505e:	6824      	ldr	r4, [r4, #0]
   35060:	e7f2      	b.n	35048 <_fwalk_reent+0xc>
   35062:	89ab      	ldrh	r3, [r5, #12]
   35064:	2b01      	cmp	r3, #1
   35066:	d908      	bls.n	3507a <_fwalk_reent+0x3e>
   35068:	220e      	movs	r2, #14
   3506a:	5eab      	ldrsh	r3, [r5, r2]
   3506c:	3301      	adds	r3, #1
   3506e:	d004      	beq.n	3507a <_fwalk_reent+0x3e>
   35070:	0029      	movs	r1, r5
   35072:	0038      	movs	r0, r7
   35074:	9b01      	ldr	r3, [sp, #4]
   35076:	4798      	blx	r3
   35078:	4306      	orrs	r6, r0
   3507a:	3568      	adds	r5, #104	; 0x68
   3507c:	e7eb      	b.n	35056 <_fwalk_reent+0x1a>

0003507e <__locale_ctype_ptr_l>:
   3507e:	30ec      	adds	r0, #236	; 0xec
   35080:	6800      	ldr	r0, [r0, #0]
   35082:	4770      	bx	lr

00035084 <__locale_ctype_ptr>:
   35084:	4b04      	ldr	r3, [pc, #16]	; (35098 <__locale_ctype_ptr+0x14>)
   35086:	681b      	ldr	r3, [r3, #0]
   35088:	6a1b      	ldr	r3, [r3, #32]
   3508a:	2b00      	cmp	r3, #0
   3508c:	d100      	bne.n	35090 <__locale_ctype_ptr+0xc>
   3508e:	4b03      	ldr	r3, [pc, #12]	; (3509c <__locale_ctype_ptr+0x18>)
   35090:	33ec      	adds	r3, #236	; 0xec
   35092:	6818      	ldr	r0, [r3, #0]
   35094:	4770      	bx	lr
   35096:	46c0      	nop			; (mov r8, r8)
   35098:	20000120 	.word	0x20000120
   3509c:	20000184 	.word	0x20000184

000350a0 <__swhatbuf_r>:
   350a0:	b570      	push	{r4, r5, r6, lr}
   350a2:	000e      	movs	r6, r1
   350a4:	001d      	movs	r5, r3
   350a6:	230e      	movs	r3, #14
   350a8:	5ec9      	ldrsh	r1, [r1, r3]
   350aa:	b090      	sub	sp, #64	; 0x40
   350ac:	0014      	movs	r4, r2
   350ae:	2900      	cmp	r1, #0
   350b0:	da07      	bge.n	350c2 <__swhatbuf_r+0x22>
   350b2:	2300      	movs	r3, #0
   350b4:	602b      	str	r3, [r5, #0]
   350b6:	89b3      	ldrh	r3, [r6, #12]
   350b8:	061b      	lsls	r3, r3, #24
   350ba:	d411      	bmi.n	350e0 <__swhatbuf_r+0x40>
   350bc:	2380      	movs	r3, #128	; 0x80
   350be:	00db      	lsls	r3, r3, #3
   350c0:	e00f      	b.n	350e2 <__swhatbuf_r+0x42>
   350c2:	aa01      	add	r2, sp, #4
   350c4:	f000 fbe6 	bl	35894 <_fstat_r>
   350c8:	2800      	cmp	r0, #0
   350ca:	dbf2      	blt.n	350b2 <__swhatbuf_r+0x12>
   350cc:	22f0      	movs	r2, #240	; 0xf0
   350ce:	9b02      	ldr	r3, [sp, #8]
   350d0:	0212      	lsls	r2, r2, #8
   350d2:	4013      	ands	r3, r2
   350d4:	4a05      	ldr	r2, [pc, #20]	; (350ec <__swhatbuf_r+0x4c>)
   350d6:	189b      	adds	r3, r3, r2
   350d8:	425a      	negs	r2, r3
   350da:	4153      	adcs	r3, r2
   350dc:	602b      	str	r3, [r5, #0]
   350de:	e7ed      	b.n	350bc <__swhatbuf_r+0x1c>
   350e0:	2340      	movs	r3, #64	; 0x40
   350e2:	2000      	movs	r0, #0
   350e4:	6023      	str	r3, [r4, #0]
   350e6:	b010      	add	sp, #64	; 0x40
   350e8:	bd70      	pop	{r4, r5, r6, pc}
   350ea:	46c0      	nop			; (mov r8, r8)
   350ec:	ffffe000 	.word	0xffffe000

000350f0 <__smakebuf_r>:
   350f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   350f2:	2602      	movs	r6, #2
   350f4:	898b      	ldrh	r3, [r1, #12]
   350f6:	0005      	movs	r5, r0
   350f8:	000c      	movs	r4, r1
   350fa:	4233      	tst	r3, r6
   350fc:	d006      	beq.n	3510c <__smakebuf_r+0x1c>
   350fe:	0023      	movs	r3, r4
   35100:	3347      	adds	r3, #71	; 0x47
   35102:	6023      	str	r3, [r4, #0]
   35104:	6123      	str	r3, [r4, #16]
   35106:	2301      	movs	r3, #1
   35108:	6163      	str	r3, [r4, #20]
   3510a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   3510c:	ab01      	add	r3, sp, #4
   3510e:	466a      	mov	r2, sp
   35110:	f7ff ffc6 	bl	350a0 <__swhatbuf_r>
   35114:	9900      	ldr	r1, [sp, #0]
   35116:	0007      	movs	r7, r0
   35118:	0028      	movs	r0, r5
   3511a:	f7ff fab3 	bl	34684 <_malloc_r>
   3511e:	2800      	cmp	r0, #0
   35120:	d108      	bne.n	35134 <__smakebuf_r+0x44>
   35122:	220c      	movs	r2, #12
   35124:	5ea3      	ldrsh	r3, [r4, r2]
   35126:	059a      	lsls	r2, r3, #22
   35128:	d4ef      	bmi.n	3510a <__smakebuf_r+0x1a>
   3512a:	2203      	movs	r2, #3
   3512c:	4393      	bics	r3, r2
   3512e:	431e      	orrs	r6, r3
   35130:	81a6      	strh	r6, [r4, #12]
   35132:	e7e4      	b.n	350fe <__smakebuf_r+0xe>
   35134:	4b0f      	ldr	r3, [pc, #60]	; (35174 <__smakebuf_r+0x84>)
   35136:	62ab      	str	r3, [r5, #40]	; 0x28
   35138:	2380      	movs	r3, #128	; 0x80
   3513a:	89a2      	ldrh	r2, [r4, #12]
   3513c:	6020      	str	r0, [r4, #0]
   3513e:	4313      	orrs	r3, r2
   35140:	81a3      	strh	r3, [r4, #12]
   35142:	9b00      	ldr	r3, [sp, #0]
   35144:	6120      	str	r0, [r4, #16]
   35146:	6163      	str	r3, [r4, #20]
   35148:	9b01      	ldr	r3, [sp, #4]
   3514a:	2b00      	cmp	r3, #0
   3514c:	d00d      	beq.n	3516a <__smakebuf_r+0x7a>
   3514e:	230e      	movs	r3, #14
   35150:	5ee1      	ldrsh	r1, [r4, r3]
   35152:	0028      	movs	r0, r5
   35154:	f000 fbb0 	bl	358b8 <_isatty_r>
   35158:	2800      	cmp	r0, #0
   3515a:	d006      	beq.n	3516a <__smakebuf_r+0x7a>
   3515c:	2203      	movs	r2, #3
   3515e:	89a3      	ldrh	r3, [r4, #12]
   35160:	4393      	bics	r3, r2
   35162:	001a      	movs	r2, r3
   35164:	2301      	movs	r3, #1
   35166:	4313      	orrs	r3, r2
   35168:	81a3      	strh	r3, [r4, #12]
   3516a:	89a0      	ldrh	r0, [r4, #12]
   3516c:	4338      	orrs	r0, r7
   3516e:	81a0      	strh	r0, [r4, #12]
   35170:	e7cb      	b.n	3510a <__smakebuf_r+0x1a>
   35172:	46c0      	nop			; (mov r8, r8)
   35174:	00034ed1 	.word	0x00034ed1

00035178 <__ascii_mbtowc>:
   35178:	b082      	sub	sp, #8
   3517a:	2900      	cmp	r1, #0
   3517c:	d100      	bne.n	35180 <__ascii_mbtowc+0x8>
   3517e:	a901      	add	r1, sp, #4
   35180:	1e10      	subs	r0, r2, #0
   35182:	d006      	beq.n	35192 <__ascii_mbtowc+0x1a>
   35184:	2b00      	cmp	r3, #0
   35186:	d006      	beq.n	35196 <__ascii_mbtowc+0x1e>
   35188:	7813      	ldrb	r3, [r2, #0]
   3518a:	600b      	str	r3, [r1, #0]
   3518c:	7810      	ldrb	r0, [r2, #0]
   3518e:	1e43      	subs	r3, r0, #1
   35190:	4198      	sbcs	r0, r3
   35192:	b002      	add	sp, #8
   35194:	4770      	bx	lr
   35196:	2002      	movs	r0, #2
   35198:	4240      	negs	r0, r0
   3519a:	e7fa      	b.n	35192 <__ascii_mbtowc+0x1a>

0003519c <__malloc_lock>:
   3519c:	4770      	bx	lr

0003519e <__malloc_unlock>:
   3519e:	4770      	bx	lr

000351a0 <__ssputs_r>:
   351a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   351a2:	688e      	ldr	r6, [r1, #8]
   351a4:	b085      	sub	sp, #20
   351a6:	0007      	movs	r7, r0
   351a8:	000c      	movs	r4, r1
   351aa:	9203      	str	r2, [sp, #12]
   351ac:	9301      	str	r3, [sp, #4]
   351ae:	429e      	cmp	r6, r3
   351b0:	d839      	bhi.n	35226 <__ssputs_r+0x86>
   351b2:	2390      	movs	r3, #144	; 0x90
   351b4:	898a      	ldrh	r2, [r1, #12]
   351b6:	00db      	lsls	r3, r3, #3
   351b8:	421a      	tst	r2, r3
   351ba:	d034      	beq.n	35226 <__ssputs_r+0x86>
   351bc:	2503      	movs	r5, #3
   351be:	6909      	ldr	r1, [r1, #16]
   351c0:	6823      	ldr	r3, [r4, #0]
   351c2:	1a5b      	subs	r3, r3, r1
   351c4:	9302      	str	r3, [sp, #8]
   351c6:	6963      	ldr	r3, [r4, #20]
   351c8:	9802      	ldr	r0, [sp, #8]
   351ca:	435d      	muls	r5, r3
   351cc:	0feb      	lsrs	r3, r5, #31
   351ce:	195d      	adds	r5, r3, r5
   351d0:	9b01      	ldr	r3, [sp, #4]
   351d2:	106d      	asrs	r5, r5, #1
   351d4:	3301      	adds	r3, #1
   351d6:	181b      	adds	r3, r3, r0
   351d8:	42ab      	cmp	r3, r5
   351da:	d900      	bls.n	351de <__ssputs_r+0x3e>
   351dc:	001d      	movs	r5, r3
   351de:	0553      	lsls	r3, r2, #21
   351e0:	d532      	bpl.n	35248 <__ssputs_r+0xa8>
   351e2:	0029      	movs	r1, r5
   351e4:	0038      	movs	r0, r7
   351e6:	f7ff fa4d 	bl	34684 <_malloc_r>
   351ea:	1e06      	subs	r6, r0, #0
   351ec:	d109      	bne.n	35202 <__ssputs_r+0x62>
   351ee:	230c      	movs	r3, #12
   351f0:	603b      	str	r3, [r7, #0]
   351f2:	2340      	movs	r3, #64	; 0x40
   351f4:	2001      	movs	r0, #1
   351f6:	89a2      	ldrh	r2, [r4, #12]
   351f8:	4240      	negs	r0, r0
   351fa:	4313      	orrs	r3, r2
   351fc:	81a3      	strh	r3, [r4, #12]
   351fe:	b005      	add	sp, #20
   35200:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35202:	9a02      	ldr	r2, [sp, #8]
   35204:	6921      	ldr	r1, [r4, #16]
   35206:	f7ff f9cf 	bl	345a8 <memcpy>
   3520a:	89a3      	ldrh	r3, [r4, #12]
   3520c:	4a14      	ldr	r2, [pc, #80]	; (35260 <__ssputs_r+0xc0>)
   3520e:	401a      	ands	r2, r3
   35210:	2380      	movs	r3, #128	; 0x80
   35212:	4313      	orrs	r3, r2
   35214:	81a3      	strh	r3, [r4, #12]
   35216:	9b02      	ldr	r3, [sp, #8]
   35218:	6126      	str	r6, [r4, #16]
   3521a:	18f6      	adds	r6, r6, r3
   3521c:	6026      	str	r6, [r4, #0]
   3521e:	6165      	str	r5, [r4, #20]
   35220:	9e01      	ldr	r6, [sp, #4]
   35222:	1aed      	subs	r5, r5, r3
   35224:	60a5      	str	r5, [r4, #8]
   35226:	9b01      	ldr	r3, [sp, #4]
   35228:	42b3      	cmp	r3, r6
   3522a:	d200      	bcs.n	3522e <__ssputs_r+0x8e>
   3522c:	001e      	movs	r6, r3
   3522e:	0032      	movs	r2, r6
   35230:	9903      	ldr	r1, [sp, #12]
   35232:	6820      	ldr	r0, [r4, #0]
   35234:	f7ff f9c1 	bl	345ba <memmove>
   35238:	68a3      	ldr	r3, [r4, #8]
   3523a:	2000      	movs	r0, #0
   3523c:	1b9b      	subs	r3, r3, r6
   3523e:	60a3      	str	r3, [r4, #8]
   35240:	6823      	ldr	r3, [r4, #0]
   35242:	199e      	adds	r6, r3, r6
   35244:	6026      	str	r6, [r4, #0]
   35246:	e7da      	b.n	351fe <__ssputs_r+0x5e>
   35248:	002a      	movs	r2, r5
   3524a:	0038      	movs	r0, r7
   3524c:	f000 fb65 	bl	3591a <_realloc_r>
   35250:	1e06      	subs	r6, r0, #0
   35252:	d1e0      	bne.n	35216 <__ssputs_r+0x76>
   35254:	6921      	ldr	r1, [r4, #16]
   35256:	0038      	movs	r0, r7
   35258:	f7ff f9ca 	bl	345f0 <_free_r>
   3525c:	e7c7      	b.n	351ee <__ssputs_r+0x4e>
   3525e:	46c0      	nop			; (mov r8, r8)
   35260:	fffffb7f 	.word	0xfffffb7f

00035264 <_svfiprintf_r>:
   35264:	b5f0      	push	{r4, r5, r6, r7, lr}
   35266:	b09f      	sub	sp, #124	; 0x7c
   35268:	9002      	str	r0, [sp, #8]
   3526a:	9305      	str	r3, [sp, #20]
   3526c:	898b      	ldrh	r3, [r1, #12]
   3526e:	000f      	movs	r7, r1
   35270:	0016      	movs	r6, r2
   35272:	061b      	lsls	r3, r3, #24
   35274:	d511      	bpl.n	3529a <_svfiprintf_r+0x36>
   35276:	690b      	ldr	r3, [r1, #16]
   35278:	2b00      	cmp	r3, #0
   3527a:	d10e      	bne.n	3529a <_svfiprintf_r+0x36>
   3527c:	2140      	movs	r1, #64	; 0x40
   3527e:	f7ff fa01 	bl	34684 <_malloc_r>
   35282:	6038      	str	r0, [r7, #0]
   35284:	6138      	str	r0, [r7, #16]
   35286:	2800      	cmp	r0, #0
   35288:	d105      	bne.n	35296 <_svfiprintf_r+0x32>
   3528a:	230c      	movs	r3, #12
   3528c:	9a02      	ldr	r2, [sp, #8]
   3528e:	3801      	subs	r0, #1
   35290:	6013      	str	r3, [r2, #0]
   35292:	b01f      	add	sp, #124	; 0x7c
   35294:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35296:	2340      	movs	r3, #64	; 0x40
   35298:	617b      	str	r3, [r7, #20]
   3529a:	2300      	movs	r3, #0
   3529c:	ad06      	add	r5, sp, #24
   3529e:	616b      	str	r3, [r5, #20]
   352a0:	3320      	adds	r3, #32
   352a2:	766b      	strb	r3, [r5, #25]
   352a4:	3310      	adds	r3, #16
   352a6:	76ab      	strb	r3, [r5, #26]
   352a8:	0034      	movs	r4, r6
   352aa:	7823      	ldrb	r3, [r4, #0]
   352ac:	2b00      	cmp	r3, #0
   352ae:	d147      	bne.n	35340 <_svfiprintf_r+0xdc>
   352b0:	1ba3      	subs	r3, r4, r6
   352b2:	9304      	str	r3, [sp, #16]
   352b4:	d00d      	beq.n	352d2 <_svfiprintf_r+0x6e>
   352b6:	1ba3      	subs	r3, r4, r6
   352b8:	0032      	movs	r2, r6
   352ba:	0039      	movs	r1, r7
   352bc:	9802      	ldr	r0, [sp, #8]
   352be:	f7ff ff6f 	bl	351a0 <__ssputs_r>
   352c2:	1c43      	adds	r3, r0, #1
   352c4:	d100      	bne.n	352c8 <_svfiprintf_r+0x64>
   352c6:	e0b5      	b.n	35434 <_svfiprintf_r+0x1d0>
   352c8:	696a      	ldr	r2, [r5, #20]
   352ca:	9b04      	ldr	r3, [sp, #16]
   352cc:	4694      	mov	ip, r2
   352ce:	4463      	add	r3, ip
   352d0:	616b      	str	r3, [r5, #20]
   352d2:	7823      	ldrb	r3, [r4, #0]
   352d4:	2b00      	cmp	r3, #0
   352d6:	d100      	bne.n	352da <_svfiprintf_r+0x76>
   352d8:	e0ac      	b.n	35434 <_svfiprintf_r+0x1d0>
   352da:	2201      	movs	r2, #1
   352dc:	2300      	movs	r3, #0
   352de:	4252      	negs	r2, r2
   352e0:	606a      	str	r2, [r5, #4]
   352e2:	a902      	add	r1, sp, #8
   352e4:	3254      	adds	r2, #84	; 0x54
   352e6:	1852      	adds	r2, r2, r1
   352e8:	3401      	adds	r4, #1
   352ea:	602b      	str	r3, [r5, #0]
   352ec:	60eb      	str	r3, [r5, #12]
   352ee:	60ab      	str	r3, [r5, #8]
   352f0:	7013      	strb	r3, [r2, #0]
   352f2:	65ab      	str	r3, [r5, #88]	; 0x58
   352f4:	4e58      	ldr	r6, [pc, #352]	; (35458 <_svfiprintf_r+0x1f4>)
   352f6:	2205      	movs	r2, #5
   352f8:	7821      	ldrb	r1, [r4, #0]
   352fa:	0030      	movs	r0, r6
   352fc:	f000 fb02 	bl	35904 <memchr>
   35300:	1c62      	adds	r2, r4, #1
   35302:	2800      	cmp	r0, #0
   35304:	d120      	bne.n	35348 <_svfiprintf_r+0xe4>
   35306:	6829      	ldr	r1, [r5, #0]
   35308:	06cb      	lsls	r3, r1, #27
   3530a:	d504      	bpl.n	35316 <_svfiprintf_r+0xb2>
   3530c:	2353      	movs	r3, #83	; 0x53
   3530e:	ae02      	add	r6, sp, #8
   35310:	3020      	adds	r0, #32
   35312:	199b      	adds	r3, r3, r6
   35314:	7018      	strb	r0, [r3, #0]
   35316:	070b      	lsls	r3, r1, #28
   35318:	d504      	bpl.n	35324 <_svfiprintf_r+0xc0>
   3531a:	2353      	movs	r3, #83	; 0x53
   3531c:	202b      	movs	r0, #43	; 0x2b
   3531e:	ae02      	add	r6, sp, #8
   35320:	199b      	adds	r3, r3, r6
   35322:	7018      	strb	r0, [r3, #0]
   35324:	7823      	ldrb	r3, [r4, #0]
   35326:	2b2a      	cmp	r3, #42	; 0x2a
   35328:	d016      	beq.n	35358 <_svfiprintf_r+0xf4>
   3532a:	2000      	movs	r0, #0
   3532c:	210a      	movs	r1, #10
   3532e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   35330:	7822      	ldrb	r2, [r4, #0]
   35332:	3a30      	subs	r2, #48	; 0x30
   35334:	2a09      	cmp	r2, #9
   35336:	d955      	bls.n	353e4 <_svfiprintf_r+0x180>
   35338:	2800      	cmp	r0, #0
   3533a:	d015      	beq.n	35368 <_svfiprintf_r+0x104>
   3533c:	9309      	str	r3, [sp, #36]	; 0x24
   3533e:	e013      	b.n	35368 <_svfiprintf_r+0x104>
   35340:	2b25      	cmp	r3, #37	; 0x25
   35342:	d0b5      	beq.n	352b0 <_svfiprintf_r+0x4c>
   35344:	3401      	adds	r4, #1
   35346:	e7b0      	b.n	352aa <_svfiprintf_r+0x46>
   35348:	2301      	movs	r3, #1
   3534a:	1b80      	subs	r0, r0, r6
   3534c:	4083      	lsls	r3, r0
   3534e:	6829      	ldr	r1, [r5, #0]
   35350:	0014      	movs	r4, r2
   35352:	430b      	orrs	r3, r1
   35354:	602b      	str	r3, [r5, #0]
   35356:	e7cd      	b.n	352f4 <_svfiprintf_r+0x90>
   35358:	9b05      	ldr	r3, [sp, #20]
   3535a:	1d18      	adds	r0, r3, #4
   3535c:	681b      	ldr	r3, [r3, #0]
   3535e:	9005      	str	r0, [sp, #20]
   35360:	2b00      	cmp	r3, #0
   35362:	db39      	blt.n	353d8 <_svfiprintf_r+0x174>
   35364:	9309      	str	r3, [sp, #36]	; 0x24
   35366:	0014      	movs	r4, r2
   35368:	7823      	ldrb	r3, [r4, #0]
   3536a:	2b2e      	cmp	r3, #46	; 0x2e
   3536c:	d10b      	bne.n	35386 <_svfiprintf_r+0x122>
   3536e:	7863      	ldrb	r3, [r4, #1]
   35370:	1c62      	adds	r2, r4, #1
   35372:	2b2a      	cmp	r3, #42	; 0x2a
   35374:	d13e      	bne.n	353f4 <_svfiprintf_r+0x190>
   35376:	9b05      	ldr	r3, [sp, #20]
   35378:	3402      	adds	r4, #2
   3537a:	1d1a      	adds	r2, r3, #4
   3537c:	681b      	ldr	r3, [r3, #0]
   3537e:	9205      	str	r2, [sp, #20]
   35380:	2b00      	cmp	r3, #0
   35382:	db34      	blt.n	353ee <_svfiprintf_r+0x18a>
   35384:	9307      	str	r3, [sp, #28]
   35386:	4e35      	ldr	r6, [pc, #212]	; (3545c <_svfiprintf_r+0x1f8>)
   35388:	7821      	ldrb	r1, [r4, #0]
   3538a:	2203      	movs	r2, #3
   3538c:	0030      	movs	r0, r6
   3538e:	f000 fab9 	bl	35904 <memchr>
   35392:	2800      	cmp	r0, #0
   35394:	d006      	beq.n	353a4 <_svfiprintf_r+0x140>
   35396:	2340      	movs	r3, #64	; 0x40
   35398:	1b80      	subs	r0, r0, r6
   3539a:	4083      	lsls	r3, r0
   3539c:	682a      	ldr	r2, [r5, #0]
   3539e:	3401      	adds	r4, #1
   353a0:	4313      	orrs	r3, r2
   353a2:	602b      	str	r3, [r5, #0]
   353a4:	7821      	ldrb	r1, [r4, #0]
   353a6:	2206      	movs	r2, #6
   353a8:	482d      	ldr	r0, [pc, #180]	; (35460 <_svfiprintf_r+0x1fc>)
   353aa:	1c66      	adds	r6, r4, #1
   353ac:	7629      	strb	r1, [r5, #24]
   353ae:	f000 faa9 	bl	35904 <memchr>
   353b2:	2800      	cmp	r0, #0
   353b4:	d046      	beq.n	35444 <_svfiprintf_r+0x1e0>
   353b6:	4b2b      	ldr	r3, [pc, #172]	; (35464 <_svfiprintf_r+0x200>)
   353b8:	2b00      	cmp	r3, #0
   353ba:	d12f      	bne.n	3541c <_svfiprintf_r+0x1b8>
   353bc:	6829      	ldr	r1, [r5, #0]
   353be:	9b05      	ldr	r3, [sp, #20]
   353c0:	2207      	movs	r2, #7
   353c2:	05c9      	lsls	r1, r1, #23
   353c4:	d528      	bpl.n	35418 <_svfiprintf_r+0x1b4>
   353c6:	189b      	adds	r3, r3, r2
   353c8:	4393      	bics	r3, r2
   353ca:	3308      	adds	r3, #8
   353cc:	9305      	str	r3, [sp, #20]
   353ce:	696b      	ldr	r3, [r5, #20]
   353d0:	9a03      	ldr	r2, [sp, #12]
   353d2:	189b      	adds	r3, r3, r2
   353d4:	616b      	str	r3, [r5, #20]
   353d6:	e767      	b.n	352a8 <_svfiprintf_r+0x44>
   353d8:	425b      	negs	r3, r3
   353da:	60eb      	str	r3, [r5, #12]
   353dc:	2302      	movs	r3, #2
   353de:	430b      	orrs	r3, r1
   353e0:	602b      	str	r3, [r5, #0]
   353e2:	e7c0      	b.n	35366 <_svfiprintf_r+0x102>
   353e4:	434b      	muls	r3, r1
   353e6:	3401      	adds	r4, #1
   353e8:	189b      	adds	r3, r3, r2
   353ea:	2001      	movs	r0, #1
   353ec:	e7a0      	b.n	35330 <_svfiprintf_r+0xcc>
   353ee:	2301      	movs	r3, #1
   353f0:	425b      	negs	r3, r3
   353f2:	e7c7      	b.n	35384 <_svfiprintf_r+0x120>
   353f4:	2300      	movs	r3, #0
   353f6:	0014      	movs	r4, r2
   353f8:	200a      	movs	r0, #10
   353fa:	001a      	movs	r2, r3
   353fc:	606b      	str	r3, [r5, #4]
   353fe:	7821      	ldrb	r1, [r4, #0]
   35400:	3930      	subs	r1, #48	; 0x30
   35402:	2909      	cmp	r1, #9
   35404:	d903      	bls.n	3540e <_svfiprintf_r+0x1aa>
   35406:	2b00      	cmp	r3, #0
   35408:	d0bd      	beq.n	35386 <_svfiprintf_r+0x122>
   3540a:	9207      	str	r2, [sp, #28]
   3540c:	e7bb      	b.n	35386 <_svfiprintf_r+0x122>
   3540e:	4342      	muls	r2, r0
   35410:	3401      	adds	r4, #1
   35412:	1852      	adds	r2, r2, r1
   35414:	2301      	movs	r3, #1
   35416:	e7f2      	b.n	353fe <_svfiprintf_r+0x19a>
   35418:	3307      	adds	r3, #7
   3541a:	e7d5      	b.n	353c8 <_svfiprintf_r+0x164>
   3541c:	ab05      	add	r3, sp, #20
   3541e:	9300      	str	r3, [sp, #0]
   35420:	003a      	movs	r2, r7
   35422:	4b11      	ldr	r3, [pc, #68]	; (35468 <_svfiprintf_r+0x204>)
   35424:	0029      	movs	r1, r5
   35426:	9802      	ldr	r0, [sp, #8]
   35428:	e000      	b.n	3542c <_svfiprintf_r+0x1c8>
   3542a:	bf00      	nop
   3542c:	9003      	str	r0, [sp, #12]
   3542e:	9b03      	ldr	r3, [sp, #12]
   35430:	3301      	adds	r3, #1
   35432:	d1cc      	bne.n	353ce <_svfiprintf_r+0x16a>
   35434:	89bb      	ldrh	r3, [r7, #12]
   35436:	980b      	ldr	r0, [sp, #44]	; 0x2c
   35438:	065b      	lsls	r3, r3, #25
   3543a:	d400      	bmi.n	3543e <_svfiprintf_r+0x1da>
   3543c:	e729      	b.n	35292 <_svfiprintf_r+0x2e>
   3543e:	2001      	movs	r0, #1
   35440:	4240      	negs	r0, r0
   35442:	e726      	b.n	35292 <_svfiprintf_r+0x2e>
   35444:	ab05      	add	r3, sp, #20
   35446:	9300      	str	r3, [sp, #0]
   35448:	003a      	movs	r2, r7
   3544a:	4b07      	ldr	r3, [pc, #28]	; (35468 <_svfiprintf_r+0x204>)
   3544c:	0029      	movs	r1, r5
   3544e:	9802      	ldr	r0, [sp, #8]
   35450:	f000 f87a 	bl	35548 <_printf_i>
   35454:	e7ea      	b.n	3542c <_svfiprintf_r+0x1c8>
   35456:	46c0      	nop			; (mov r8, r8)
   35458:	00039c16 	.word	0x00039c16
   3545c:	00039c1c 	.word	0x00039c1c
   35460:	00039c20 	.word	0x00039c20
   35464:	00000000 	.word	0x00000000
   35468:	000351a1 	.word	0x000351a1

0003546c <_printf_common>:
   3546c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3546e:	0015      	movs	r5, r2
   35470:	9301      	str	r3, [sp, #4]
   35472:	688a      	ldr	r2, [r1, #8]
   35474:	690b      	ldr	r3, [r1, #16]
   35476:	9000      	str	r0, [sp, #0]
   35478:	000c      	movs	r4, r1
   3547a:	4293      	cmp	r3, r2
   3547c:	da00      	bge.n	35480 <_printf_common+0x14>
   3547e:	0013      	movs	r3, r2
   35480:	0022      	movs	r2, r4
   35482:	602b      	str	r3, [r5, #0]
   35484:	3243      	adds	r2, #67	; 0x43
   35486:	7812      	ldrb	r2, [r2, #0]
   35488:	2a00      	cmp	r2, #0
   3548a:	d001      	beq.n	35490 <_printf_common+0x24>
   3548c:	3301      	adds	r3, #1
   3548e:	602b      	str	r3, [r5, #0]
   35490:	6823      	ldr	r3, [r4, #0]
   35492:	069b      	lsls	r3, r3, #26
   35494:	d502      	bpl.n	3549c <_printf_common+0x30>
   35496:	682b      	ldr	r3, [r5, #0]
   35498:	3302      	adds	r3, #2
   3549a:	602b      	str	r3, [r5, #0]
   3549c:	2706      	movs	r7, #6
   3549e:	6823      	ldr	r3, [r4, #0]
   354a0:	401f      	ands	r7, r3
   354a2:	d027      	beq.n	354f4 <_printf_common+0x88>
   354a4:	0023      	movs	r3, r4
   354a6:	3343      	adds	r3, #67	; 0x43
   354a8:	781b      	ldrb	r3, [r3, #0]
   354aa:	1e5a      	subs	r2, r3, #1
   354ac:	4193      	sbcs	r3, r2
   354ae:	6822      	ldr	r2, [r4, #0]
   354b0:	0692      	lsls	r2, r2, #26
   354b2:	d430      	bmi.n	35516 <_printf_common+0xaa>
   354b4:	0022      	movs	r2, r4
   354b6:	9901      	ldr	r1, [sp, #4]
   354b8:	3243      	adds	r2, #67	; 0x43
   354ba:	9800      	ldr	r0, [sp, #0]
   354bc:	9e08      	ldr	r6, [sp, #32]
   354be:	47b0      	blx	r6
   354c0:	1c43      	adds	r3, r0, #1
   354c2:	d025      	beq.n	35510 <_printf_common+0xa4>
   354c4:	2306      	movs	r3, #6
   354c6:	6820      	ldr	r0, [r4, #0]
   354c8:	682a      	ldr	r2, [r5, #0]
   354ca:	68e1      	ldr	r1, [r4, #12]
   354cc:	4003      	ands	r3, r0
   354ce:	2500      	movs	r5, #0
   354d0:	2b04      	cmp	r3, #4
   354d2:	d103      	bne.n	354dc <_printf_common+0x70>
   354d4:	1a8d      	subs	r5, r1, r2
   354d6:	43eb      	mvns	r3, r5
   354d8:	17db      	asrs	r3, r3, #31
   354da:	401d      	ands	r5, r3
   354dc:	68a3      	ldr	r3, [r4, #8]
   354de:	6922      	ldr	r2, [r4, #16]
   354e0:	4293      	cmp	r3, r2
   354e2:	dd01      	ble.n	354e8 <_printf_common+0x7c>
   354e4:	1a9b      	subs	r3, r3, r2
   354e6:	18ed      	adds	r5, r5, r3
   354e8:	2700      	movs	r7, #0
   354ea:	42bd      	cmp	r5, r7
   354ec:	d120      	bne.n	35530 <_printf_common+0xc4>
   354ee:	2000      	movs	r0, #0
   354f0:	e010      	b.n	35514 <_printf_common+0xa8>
   354f2:	3701      	adds	r7, #1
   354f4:	68e3      	ldr	r3, [r4, #12]
   354f6:	682a      	ldr	r2, [r5, #0]
   354f8:	1a9b      	subs	r3, r3, r2
   354fa:	429f      	cmp	r7, r3
   354fc:	dad2      	bge.n	354a4 <_printf_common+0x38>
   354fe:	0022      	movs	r2, r4
   35500:	2301      	movs	r3, #1
   35502:	3219      	adds	r2, #25
   35504:	9901      	ldr	r1, [sp, #4]
   35506:	9800      	ldr	r0, [sp, #0]
   35508:	9e08      	ldr	r6, [sp, #32]
   3550a:	47b0      	blx	r6
   3550c:	1c43      	adds	r3, r0, #1
   3550e:	d1f0      	bne.n	354f2 <_printf_common+0x86>
   35510:	2001      	movs	r0, #1
   35512:	4240      	negs	r0, r0
   35514:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   35516:	2030      	movs	r0, #48	; 0x30
   35518:	18e1      	adds	r1, r4, r3
   3551a:	3143      	adds	r1, #67	; 0x43
   3551c:	7008      	strb	r0, [r1, #0]
   3551e:	0021      	movs	r1, r4
   35520:	1c5a      	adds	r2, r3, #1
   35522:	3145      	adds	r1, #69	; 0x45
   35524:	7809      	ldrb	r1, [r1, #0]
   35526:	18a2      	adds	r2, r4, r2
   35528:	3243      	adds	r2, #67	; 0x43
   3552a:	3302      	adds	r3, #2
   3552c:	7011      	strb	r1, [r2, #0]
   3552e:	e7c1      	b.n	354b4 <_printf_common+0x48>
   35530:	0022      	movs	r2, r4
   35532:	2301      	movs	r3, #1
   35534:	321a      	adds	r2, #26
   35536:	9901      	ldr	r1, [sp, #4]
   35538:	9800      	ldr	r0, [sp, #0]
   3553a:	9e08      	ldr	r6, [sp, #32]
   3553c:	47b0      	blx	r6
   3553e:	1c43      	adds	r3, r0, #1
   35540:	d0e6      	beq.n	35510 <_printf_common+0xa4>
   35542:	3701      	adds	r7, #1
   35544:	e7d1      	b.n	354ea <_printf_common+0x7e>
	...

00035548 <_printf_i>:
   35548:	b5f0      	push	{r4, r5, r6, r7, lr}
   3554a:	b08b      	sub	sp, #44	; 0x2c
   3554c:	9206      	str	r2, [sp, #24]
   3554e:	000a      	movs	r2, r1
   35550:	3243      	adds	r2, #67	; 0x43
   35552:	9307      	str	r3, [sp, #28]
   35554:	9005      	str	r0, [sp, #20]
   35556:	9204      	str	r2, [sp, #16]
   35558:	7e0a      	ldrb	r2, [r1, #24]
   3555a:	000c      	movs	r4, r1
   3555c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   3555e:	2a6e      	cmp	r2, #110	; 0x6e
   35560:	d100      	bne.n	35564 <_printf_i+0x1c>
   35562:	e08f      	b.n	35684 <_printf_i+0x13c>
   35564:	d817      	bhi.n	35596 <_printf_i+0x4e>
   35566:	2a63      	cmp	r2, #99	; 0x63
   35568:	d02c      	beq.n	355c4 <_printf_i+0x7c>
   3556a:	d808      	bhi.n	3557e <_printf_i+0x36>
   3556c:	2a00      	cmp	r2, #0
   3556e:	d100      	bne.n	35572 <_printf_i+0x2a>
   35570:	e099      	b.n	356a6 <_printf_i+0x15e>
   35572:	2a58      	cmp	r2, #88	; 0x58
   35574:	d054      	beq.n	35620 <_printf_i+0xd8>
   35576:	0026      	movs	r6, r4
   35578:	3642      	adds	r6, #66	; 0x42
   3557a:	7032      	strb	r2, [r6, #0]
   3557c:	e029      	b.n	355d2 <_printf_i+0x8a>
   3557e:	2a64      	cmp	r2, #100	; 0x64
   35580:	d001      	beq.n	35586 <_printf_i+0x3e>
   35582:	2a69      	cmp	r2, #105	; 0x69
   35584:	d1f7      	bne.n	35576 <_printf_i+0x2e>
   35586:	6821      	ldr	r1, [r4, #0]
   35588:	681a      	ldr	r2, [r3, #0]
   3558a:	0608      	lsls	r0, r1, #24
   3558c:	d523      	bpl.n	355d6 <_printf_i+0x8e>
   3558e:	1d11      	adds	r1, r2, #4
   35590:	6019      	str	r1, [r3, #0]
   35592:	6815      	ldr	r5, [r2, #0]
   35594:	e025      	b.n	355e2 <_printf_i+0x9a>
   35596:	2a73      	cmp	r2, #115	; 0x73
   35598:	d100      	bne.n	3559c <_printf_i+0x54>
   3559a:	e088      	b.n	356ae <_printf_i+0x166>
   3559c:	d808      	bhi.n	355b0 <_printf_i+0x68>
   3559e:	2a6f      	cmp	r2, #111	; 0x6f
   355a0:	d029      	beq.n	355f6 <_printf_i+0xae>
   355a2:	2a70      	cmp	r2, #112	; 0x70
   355a4:	d1e7      	bne.n	35576 <_printf_i+0x2e>
   355a6:	2220      	movs	r2, #32
   355a8:	6809      	ldr	r1, [r1, #0]
   355aa:	430a      	orrs	r2, r1
   355ac:	6022      	str	r2, [r4, #0]
   355ae:	e003      	b.n	355b8 <_printf_i+0x70>
   355b0:	2a75      	cmp	r2, #117	; 0x75
   355b2:	d020      	beq.n	355f6 <_printf_i+0xae>
   355b4:	2a78      	cmp	r2, #120	; 0x78
   355b6:	d1de      	bne.n	35576 <_printf_i+0x2e>
   355b8:	0022      	movs	r2, r4
   355ba:	2178      	movs	r1, #120	; 0x78
   355bc:	3245      	adds	r2, #69	; 0x45
   355be:	7011      	strb	r1, [r2, #0]
   355c0:	4a6c      	ldr	r2, [pc, #432]	; (35774 <_printf_i+0x22c>)
   355c2:	e030      	b.n	35626 <_printf_i+0xde>
   355c4:	000e      	movs	r6, r1
   355c6:	681a      	ldr	r2, [r3, #0]
   355c8:	3642      	adds	r6, #66	; 0x42
   355ca:	1d11      	adds	r1, r2, #4
   355cc:	6019      	str	r1, [r3, #0]
   355ce:	6813      	ldr	r3, [r2, #0]
   355d0:	7033      	strb	r3, [r6, #0]
   355d2:	2301      	movs	r3, #1
   355d4:	e079      	b.n	356ca <_printf_i+0x182>
   355d6:	0649      	lsls	r1, r1, #25
   355d8:	d5d9      	bpl.n	3558e <_printf_i+0x46>
   355da:	1d11      	adds	r1, r2, #4
   355dc:	6019      	str	r1, [r3, #0]
   355de:	2300      	movs	r3, #0
   355e0:	5ed5      	ldrsh	r5, [r2, r3]
   355e2:	2d00      	cmp	r5, #0
   355e4:	da03      	bge.n	355ee <_printf_i+0xa6>
   355e6:	232d      	movs	r3, #45	; 0x2d
   355e8:	9a04      	ldr	r2, [sp, #16]
   355ea:	426d      	negs	r5, r5
   355ec:	7013      	strb	r3, [r2, #0]
   355ee:	4b62      	ldr	r3, [pc, #392]	; (35778 <_printf_i+0x230>)
   355f0:	270a      	movs	r7, #10
   355f2:	9303      	str	r3, [sp, #12]
   355f4:	e02f      	b.n	35656 <_printf_i+0x10e>
   355f6:	6820      	ldr	r0, [r4, #0]
   355f8:	6819      	ldr	r1, [r3, #0]
   355fa:	0605      	lsls	r5, r0, #24
   355fc:	d503      	bpl.n	35606 <_printf_i+0xbe>
   355fe:	1d08      	adds	r0, r1, #4
   35600:	6018      	str	r0, [r3, #0]
   35602:	680d      	ldr	r5, [r1, #0]
   35604:	e005      	b.n	35612 <_printf_i+0xca>
   35606:	0640      	lsls	r0, r0, #25
   35608:	d5f9      	bpl.n	355fe <_printf_i+0xb6>
   3560a:	680d      	ldr	r5, [r1, #0]
   3560c:	1d08      	adds	r0, r1, #4
   3560e:	6018      	str	r0, [r3, #0]
   35610:	b2ad      	uxth	r5, r5
   35612:	4b59      	ldr	r3, [pc, #356]	; (35778 <_printf_i+0x230>)
   35614:	2708      	movs	r7, #8
   35616:	9303      	str	r3, [sp, #12]
   35618:	2a6f      	cmp	r2, #111	; 0x6f
   3561a:	d018      	beq.n	3564e <_printf_i+0x106>
   3561c:	270a      	movs	r7, #10
   3561e:	e016      	b.n	3564e <_printf_i+0x106>
   35620:	3145      	adds	r1, #69	; 0x45
   35622:	700a      	strb	r2, [r1, #0]
   35624:	4a54      	ldr	r2, [pc, #336]	; (35778 <_printf_i+0x230>)
   35626:	9203      	str	r2, [sp, #12]
   35628:	681a      	ldr	r2, [r3, #0]
   3562a:	6821      	ldr	r1, [r4, #0]
   3562c:	1d10      	adds	r0, r2, #4
   3562e:	6018      	str	r0, [r3, #0]
   35630:	6815      	ldr	r5, [r2, #0]
   35632:	0608      	lsls	r0, r1, #24
   35634:	d522      	bpl.n	3567c <_printf_i+0x134>
   35636:	07cb      	lsls	r3, r1, #31
   35638:	d502      	bpl.n	35640 <_printf_i+0xf8>
   3563a:	2320      	movs	r3, #32
   3563c:	4319      	orrs	r1, r3
   3563e:	6021      	str	r1, [r4, #0]
   35640:	2710      	movs	r7, #16
   35642:	2d00      	cmp	r5, #0
   35644:	d103      	bne.n	3564e <_printf_i+0x106>
   35646:	2320      	movs	r3, #32
   35648:	6822      	ldr	r2, [r4, #0]
   3564a:	439a      	bics	r2, r3
   3564c:	6022      	str	r2, [r4, #0]
   3564e:	0023      	movs	r3, r4
   35650:	2200      	movs	r2, #0
   35652:	3343      	adds	r3, #67	; 0x43
   35654:	701a      	strb	r2, [r3, #0]
   35656:	6863      	ldr	r3, [r4, #4]
   35658:	60a3      	str	r3, [r4, #8]
   3565a:	2b00      	cmp	r3, #0
   3565c:	db5c      	blt.n	35718 <_printf_i+0x1d0>
   3565e:	2204      	movs	r2, #4
   35660:	6821      	ldr	r1, [r4, #0]
   35662:	4391      	bics	r1, r2
   35664:	6021      	str	r1, [r4, #0]
   35666:	2d00      	cmp	r5, #0
   35668:	d158      	bne.n	3571c <_printf_i+0x1d4>
   3566a:	9e04      	ldr	r6, [sp, #16]
   3566c:	2b00      	cmp	r3, #0
   3566e:	d064      	beq.n	3573a <_printf_i+0x1f2>
   35670:	0026      	movs	r6, r4
   35672:	9b03      	ldr	r3, [sp, #12]
   35674:	3642      	adds	r6, #66	; 0x42
   35676:	781b      	ldrb	r3, [r3, #0]
   35678:	7033      	strb	r3, [r6, #0]
   3567a:	e05e      	b.n	3573a <_printf_i+0x1f2>
   3567c:	0648      	lsls	r0, r1, #25
   3567e:	d5da      	bpl.n	35636 <_printf_i+0xee>
   35680:	b2ad      	uxth	r5, r5
   35682:	e7d8      	b.n	35636 <_printf_i+0xee>
   35684:	6809      	ldr	r1, [r1, #0]
   35686:	681a      	ldr	r2, [r3, #0]
   35688:	0608      	lsls	r0, r1, #24
   3568a:	d505      	bpl.n	35698 <_printf_i+0x150>
   3568c:	1d11      	adds	r1, r2, #4
   3568e:	6019      	str	r1, [r3, #0]
   35690:	6813      	ldr	r3, [r2, #0]
   35692:	6962      	ldr	r2, [r4, #20]
   35694:	601a      	str	r2, [r3, #0]
   35696:	e006      	b.n	356a6 <_printf_i+0x15e>
   35698:	0649      	lsls	r1, r1, #25
   3569a:	d5f7      	bpl.n	3568c <_printf_i+0x144>
   3569c:	1d11      	adds	r1, r2, #4
   3569e:	6019      	str	r1, [r3, #0]
   356a0:	6813      	ldr	r3, [r2, #0]
   356a2:	8aa2      	ldrh	r2, [r4, #20]
   356a4:	801a      	strh	r2, [r3, #0]
   356a6:	2300      	movs	r3, #0
   356a8:	9e04      	ldr	r6, [sp, #16]
   356aa:	6123      	str	r3, [r4, #16]
   356ac:	e054      	b.n	35758 <_printf_i+0x210>
   356ae:	681a      	ldr	r2, [r3, #0]
   356b0:	1d11      	adds	r1, r2, #4
   356b2:	6019      	str	r1, [r3, #0]
   356b4:	6816      	ldr	r6, [r2, #0]
   356b6:	2100      	movs	r1, #0
   356b8:	6862      	ldr	r2, [r4, #4]
   356ba:	0030      	movs	r0, r6
   356bc:	f000 f922 	bl	35904 <memchr>
   356c0:	2800      	cmp	r0, #0
   356c2:	d001      	beq.n	356c8 <_printf_i+0x180>
   356c4:	1b80      	subs	r0, r0, r6
   356c6:	6060      	str	r0, [r4, #4]
   356c8:	6863      	ldr	r3, [r4, #4]
   356ca:	6123      	str	r3, [r4, #16]
   356cc:	2300      	movs	r3, #0
   356ce:	9a04      	ldr	r2, [sp, #16]
   356d0:	7013      	strb	r3, [r2, #0]
   356d2:	e041      	b.n	35758 <_printf_i+0x210>
   356d4:	6923      	ldr	r3, [r4, #16]
   356d6:	0032      	movs	r2, r6
   356d8:	9906      	ldr	r1, [sp, #24]
   356da:	9805      	ldr	r0, [sp, #20]
   356dc:	9d07      	ldr	r5, [sp, #28]
   356de:	47a8      	blx	r5
   356e0:	1c43      	adds	r3, r0, #1
   356e2:	d043      	beq.n	3576c <_printf_i+0x224>
   356e4:	6823      	ldr	r3, [r4, #0]
   356e6:	2500      	movs	r5, #0
   356e8:	079b      	lsls	r3, r3, #30
   356ea:	d40f      	bmi.n	3570c <_printf_i+0x1c4>
   356ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
   356ee:	68e0      	ldr	r0, [r4, #12]
   356f0:	4298      	cmp	r0, r3
   356f2:	da3d      	bge.n	35770 <_printf_i+0x228>
   356f4:	0018      	movs	r0, r3
   356f6:	e03b      	b.n	35770 <_printf_i+0x228>
   356f8:	0022      	movs	r2, r4
   356fa:	2301      	movs	r3, #1
   356fc:	3219      	adds	r2, #25
   356fe:	9906      	ldr	r1, [sp, #24]
   35700:	9805      	ldr	r0, [sp, #20]
   35702:	9e07      	ldr	r6, [sp, #28]
   35704:	47b0      	blx	r6
   35706:	1c43      	adds	r3, r0, #1
   35708:	d030      	beq.n	3576c <_printf_i+0x224>
   3570a:	3501      	adds	r5, #1
   3570c:	68e3      	ldr	r3, [r4, #12]
   3570e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   35710:	1a9b      	subs	r3, r3, r2
   35712:	429d      	cmp	r5, r3
   35714:	dbf0      	blt.n	356f8 <_printf_i+0x1b0>
   35716:	e7e9      	b.n	356ec <_printf_i+0x1a4>
   35718:	2d00      	cmp	r5, #0
   3571a:	d0a9      	beq.n	35670 <_printf_i+0x128>
   3571c:	9e04      	ldr	r6, [sp, #16]
   3571e:	0028      	movs	r0, r5
   35720:	0039      	movs	r1, r7
   35722:	f7fc fa85 	bl	31c30 <__aeabi_uidivmod>
   35726:	9b03      	ldr	r3, [sp, #12]
   35728:	3e01      	subs	r6, #1
   3572a:	5c5b      	ldrb	r3, [r3, r1]
   3572c:	0028      	movs	r0, r5
   3572e:	7033      	strb	r3, [r6, #0]
   35730:	0039      	movs	r1, r7
   35732:	f7fc f9f7 	bl	31b24 <__udivsi3>
   35736:	1e05      	subs	r5, r0, #0
   35738:	d1f1      	bne.n	3571e <_printf_i+0x1d6>
   3573a:	2f08      	cmp	r7, #8
   3573c:	d109      	bne.n	35752 <_printf_i+0x20a>
   3573e:	6823      	ldr	r3, [r4, #0]
   35740:	07db      	lsls	r3, r3, #31
   35742:	d506      	bpl.n	35752 <_printf_i+0x20a>
   35744:	6863      	ldr	r3, [r4, #4]
   35746:	6922      	ldr	r2, [r4, #16]
   35748:	4293      	cmp	r3, r2
   3574a:	dc02      	bgt.n	35752 <_printf_i+0x20a>
   3574c:	2330      	movs	r3, #48	; 0x30
   3574e:	3e01      	subs	r6, #1
   35750:	7033      	strb	r3, [r6, #0]
   35752:	9b04      	ldr	r3, [sp, #16]
   35754:	1b9b      	subs	r3, r3, r6
   35756:	6123      	str	r3, [r4, #16]
   35758:	9b07      	ldr	r3, [sp, #28]
   3575a:	aa09      	add	r2, sp, #36	; 0x24
   3575c:	9300      	str	r3, [sp, #0]
   3575e:	0021      	movs	r1, r4
   35760:	9b06      	ldr	r3, [sp, #24]
   35762:	9805      	ldr	r0, [sp, #20]
   35764:	f7ff fe82 	bl	3546c <_printf_common>
   35768:	1c43      	adds	r3, r0, #1
   3576a:	d1b3      	bne.n	356d4 <_printf_i+0x18c>
   3576c:	2001      	movs	r0, #1
   3576e:	4240      	negs	r0, r0
   35770:	b00b      	add	sp, #44	; 0x2c
   35772:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35774:	00039c38 	.word	0x00039c38
   35778:	00039c27 	.word	0x00039c27

0003577c <__sread>:
   3577c:	b570      	push	{r4, r5, r6, lr}
   3577e:	000c      	movs	r4, r1
   35780:	250e      	movs	r5, #14
   35782:	5f49      	ldrsh	r1, [r1, r5]
   35784:	f000 f8f0 	bl	35968 <_read_r>
   35788:	2800      	cmp	r0, #0
   3578a:	db03      	blt.n	35794 <__sread+0x18>
   3578c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   3578e:	181b      	adds	r3, r3, r0
   35790:	6563      	str	r3, [r4, #84]	; 0x54
   35792:	bd70      	pop	{r4, r5, r6, pc}
   35794:	89a3      	ldrh	r3, [r4, #12]
   35796:	4a02      	ldr	r2, [pc, #8]	; (357a0 <__sread+0x24>)
   35798:	4013      	ands	r3, r2
   3579a:	81a3      	strh	r3, [r4, #12]
   3579c:	e7f9      	b.n	35792 <__sread+0x16>
   3579e:	46c0      	nop			; (mov r8, r8)
   357a0:	ffffefff 	.word	0xffffefff

000357a4 <__swrite>:
   357a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   357a6:	001f      	movs	r7, r3
   357a8:	898b      	ldrh	r3, [r1, #12]
   357aa:	0005      	movs	r5, r0
   357ac:	000c      	movs	r4, r1
   357ae:	0016      	movs	r6, r2
   357b0:	05db      	lsls	r3, r3, #23
   357b2:	d505      	bpl.n	357c0 <__swrite+0x1c>
   357b4:	230e      	movs	r3, #14
   357b6:	5ec9      	ldrsh	r1, [r1, r3]
   357b8:	2200      	movs	r2, #0
   357ba:	2302      	movs	r3, #2
   357bc:	f000 f88e 	bl	358dc <_lseek_r>
   357c0:	89a3      	ldrh	r3, [r4, #12]
   357c2:	4a05      	ldr	r2, [pc, #20]	; (357d8 <__swrite+0x34>)
   357c4:	0028      	movs	r0, r5
   357c6:	4013      	ands	r3, r2
   357c8:	81a3      	strh	r3, [r4, #12]
   357ca:	0032      	movs	r2, r6
   357cc:	230e      	movs	r3, #14
   357ce:	5ee1      	ldrsh	r1, [r4, r3]
   357d0:	003b      	movs	r3, r7
   357d2:	f000 f839 	bl	35848 <_write_r>
   357d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   357d8:	ffffefff 	.word	0xffffefff

000357dc <__sseek>:
   357dc:	b570      	push	{r4, r5, r6, lr}
   357de:	000c      	movs	r4, r1
   357e0:	250e      	movs	r5, #14
   357e2:	5f49      	ldrsh	r1, [r1, r5]
   357e4:	f000 f87a 	bl	358dc <_lseek_r>
   357e8:	89a3      	ldrh	r3, [r4, #12]
   357ea:	1c42      	adds	r2, r0, #1
   357ec:	d103      	bne.n	357f6 <__sseek+0x1a>
   357ee:	4a05      	ldr	r2, [pc, #20]	; (35804 <__sseek+0x28>)
   357f0:	4013      	ands	r3, r2
   357f2:	81a3      	strh	r3, [r4, #12]
   357f4:	bd70      	pop	{r4, r5, r6, pc}
   357f6:	2280      	movs	r2, #128	; 0x80
   357f8:	0152      	lsls	r2, r2, #5
   357fa:	4313      	orrs	r3, r2
   357fc:	81a3      	strh	r3, [r4, #12]
   357fe:	6560      	str	r0, [r4, #84]	; 0x54
   35800:	e7f8      	b.n	357f4 <__sseek+0x18>
   35802:	46c0      	nop			; (mov r8, r8)
   35804:	ffffefff 	.word	0xffffefff

00035808 <__sclose>:
   35808:	b510      	push	{r4, lr}
   3580a:	230e      	movs	r3, #14
   3580c:	5ec9      	ldrsh	r1, [r1, r3]
   3580e:	f000 f82f 	bl	35870 <_close_r>
   35812:	bd10      	pop	{r4, pc}

00035814 <strchr>:
   35814:	b2c9      	uxtb	r1, r1
   35816:	7803      	ldrb	r3, [r0, #0]
   35818:	2b00      	cmp	r3, #0
   3581a:	d004      	beq.n	35826 <strchr+0x12>
   3581c:	4299      	cmp	r1, r3
   3581e:	d100      	bne.n	35822 <strchr+0xe>
   35820:	4770      	bx	lr
   35822:	3001      	adds	r0, #1
   35824:	e7f7      	b.n	35816 <strchr+0x2>
   35826:	424b      	negs	r3, r1
   35828:	4159      	adcs	r1, r3
   3582a:	4249      	negs	r1, r1
   3582c:	4008      	ands	r0, r1
   3582e:	e7f7      	b.n	35820 <strchr+0xc>

00035830 <__ascii_wctomb>:
   35830:	1e0b      	subs	r3, r1, #0
   35832:	d004      	beq.n	3583e <__ascii_wctomb+0xe>
   35834:	2aff      	cmp	r2, #255	; 0xff
   35836:	d904      	bls.n	35842 <__ascii_wctomb+0x12>
   35838:	238a      	movs	r3, #138	; 0x8a
   3583a:	6003      	str	r3, [r0, #0]
   3583c:	3b8b      	subs	r3, #139	; 0x8b
   3583e:	0018      	movs	r0, r3
   35840:	4770      	bx	lr
   35842:	700a      	strb	r2, [r1, #0]
   35844:	2301      	movs	r3, #1
   35846:	e7fa      	b.n	3583e <__ascii_wctomb+0xe>

00035848 <_write_r>:
   35848:	b570      	push	{r4, r5, r6, lr}
   3584a:	0005      	movs	r5, r0
   3584c:	0008      	movs	r0, r1
   3584e:	0011      	movs	r1, r2
   35850:	2200      	movs	r2, #0
   35852:	4c06      	ldr	r4, [pc, #24]	; (3586c <_write_r+0x24>)
   35854:	6022      	str	r2, [r4, #0]
   35856:	001a      	movs	r2, r3
   35858:	f7f4 fd46 	bl	2a2e8 <_write>
   3585c:	1c43      	adds	r3, r0, #1
   3585e:	d103      	bne.n	35868 <_write_r+0x20>
   35860:	6823      	ldr	r3, [r4, #0]
   35862:	2b00      	cmp	r3, #0
   35864:	d000      	beq.n	35868 <_write_r+0x20>
   35866:	602b      	str	r3, [r5, #0]
   35868:	bd70      	pop	{r4, r5, r6, pc}
   3586a:	46c0      	nop			; (mov r8, r8)
   3586c:	20005c54 	.word	0x20005c54

00035870 <_close_r>:
   35870:	2300      	movs	r3, #0
   35872:	b570      	push	{r4, r5, r6, lr}
   35874:	4c06      	ldr	r4, [pc, #24]	; (35890 <_close_r+0x20>)
   35876:	0005      	movs	r5, r0
   35878:	0008      	movs	r0, r1
   3587a:	6023      	str	r3, [r4, #0]
   3587c:	f7f4 fd88 	bl	2a390 <_close>
   35880:	1c43      	adds	r3, r0, #1
   35882:	d103      	bne.n	3588c <_close_r+0x1c>
   35884:	6823      	ldr	r3, [r4, #0]
   35886:	2b00      	cmp	r3, #0
   35888:	d000      	beq.n	3588c <_close_r+0x1c>
   3588a:	602b      	str	r3, [r5, #0]
   3588c:	bd70      	pop	{r4, r5, r6, pc}
   3588e:	46c0      	nop			; (mov r8, r8)
   35890:	20005c54 	.word	0x20005c54

00035894 <_fstat_r>:
   35894:	2300      	movs	r3, #0
   35896:	b570      	push	{r4, r5, r6, lr}
   35898:	4c06      	ldr	r4, [pc, #24]	; (358b4 <_fstat_r+0x20>)
   3589a:	0005      	movs	r5, r0
   3589c:	0008      	movs	r0, r1
   3589e:	0011      	movs	r1, r2
   358a0:	6023      	str	r3, [r4, #0]
   358a2:	f7f4 fd7f 	bl	2a3a4 <_fstat>
   358a6:	1c43      	adds	r3, r0, #1
   358a8:	d103      	bne.n	358b2 <_fstat_r+0x1e>
   358aa:	6823      	ldr	r3, [r4, #0]
   358ac:	2b00      	cmp	r3, #0
   358ae:	d000      	beq.n	358b2 <_fstat_r+0x1e>
   358b0:	602b      	str	r3, [r5, #0]
   358b2:	bd70      	pop	{r4, r5, r6, pc}
   358b4:	20005c54 	.word	0x20005c54

000358b8 <_isatty_r>:
   358b8:	2300      	movs	r3, #0
   358ba:	b570      	push	{r4, r5, r6, lr}
   358bc:	4c06      	ldr	r4, [pc, #24]	; (358d8 <_isatty_r+0x20>)
   358be:	0005      	movs	r5, r0
   358c0:	0008      	movs	r0, r1
   358c2:	6023      	str	r3, [r4, #0]
   358c4:	f7f4 fd7c 	bl	2a3c0 <_isatty>
   358c8:	1c43      	adds	r3, r0, #1
   358ca:	d103      	bne.n	358d4 <_isatty_r+0x1c>
   358cc:	6823      	ldr	r3, [r4, #0]
   358ce:	2b00      	cmp	r3, #0
   358d0:	d000      	beq.n	358d4 <_isatty_r+0x1c>
   358d2:	602b      	str	r3, [r5, #0]
   358d4:	bd70      	pop	{r4, r5, r6, pc}
   358d6:	46c0      	nop			; (mov r8, r8)
   358d8:	20005c54 	.word	0x20005c54

000358dc <_lseek_r>:
   358dc:	b570      	push	{r4, r5, r6, lr}
   358de:	0005      	movs	r5, r0
   358e0:	0008      	movs	r0, r1
   358e2:	0011      	movs	r1, r2
   358e4:	2200      	movs	r2, #0
   358e6:	4c06      	ldr	r4, [pc, #24]	; (35900 <_lseek_r+0x24>)
   358e8:	6022      	str	r2, [r4, #0]
   358ea:	001a      	movs	r2, r3
   358ec:	f7f4 fd71 	bl	2a3d2 <_lseek>
   358f0:	1c43      	adds	r3, r0, #1
   358f2:	d103      	bne.n	358fc <_lseek_r+0x20>
   358f4:	6823      	ldr	r3, [r4, #0]
   358f6:	2b00      	cmp	r3, #0
   358f8:	d000      	beq.n	358fc <_lseek_r+0x20>
   358fa:	602b      	str	r3, [r5, #0]
   358fc:	bd70      	pop	{r4, r5, r6, pc}
   358fe:	46c0      	nop			; (mov r8, r8)
   35900:	20005c54 	.word	0x20005c54

00035904 <memchr>:
   35904:	b2c9      	uxtb	r1, r1
   35906:	1882      	adds	r2, r0, r2
   35908:	4290      	cmp	r0, r2
   3590a:	d101      	bne.n	35910 <memchr+0xc>
   3590c:	2000      	movs	r0, #0
   3590e:	4770      	bx	lr
   35910:	7803      	ldrb	r3, [r0, #0]
   35912:	428b      	cmp	r3, r1
   35914:	d0fb      	beq.n	3590e <memchr+0xa>
   35916:	3001      	adds	r0, #1
   35918:	e7f6      	b.n	35908 <memchr+0x4>

0003591a <_realloc_r>:
   3591a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3591c:	0007      	movs	r7, r0
   3591e:	000d      	movs	r5, r1
   35920:	0016      	movs	r6, r2
   35922:	2900      	cmp	r1, #0
   35924:	d105      	bne.n	35932 <_realloc_r+0x18>
   35926:	0011      	movs	r1, r2
   35928:	f7fe feac 	bl	34684 <_malloc_r>
   3592c:	0004      	movs	r4, r0
   3592e:	0020      	movs	r0, r4
   35930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35932:	2a00      	cmp	r2, #0
   35934:	d103      	bne.n	3593e <_realloc_r+0x24>
   35936:	f7fe fe5b 	bl	345f0 <_free_r>
   3593a:	0034      	movs	r4, r6
   3593c:	e7f7      	b.n	3592e <_realloc_r+0x14>
   3593e:	f000 f827 	bl	35990 <_malloc_usable_size_r>
   35942:	002c      	movs	r4, r5
   35944:	4286      	cmp	r6, r0
   35946:	d9f2      	bls.n	3592e <_realloc_r+0x14>
   35948:	0031      	movs	r1, r6
   3594a:	0038      	movs	r0, r7
   3594c:	f7fe fe9a 	bl	34684 <_malloc_r>
   35950:	1e04      	subs	r4, r0, #0
   35952:	d0ec      	beq.n	3592e <_realloc_r+0x14>
   35954:	0029      	movs	r1, r5
   35956:	0032      	movs	r2, r6
   35958:	f7fe fe26 	bl	345a8 <memcpy>
   3595c:	0029      	movs	r1, r5
   3595e:	0038      	movs	r0, r7
   35960:	f7fe fe46 	bl	345f0 <_free_r>
   35964:	e7e3      	b.n	3592e <_realloc_r+0x14>
	...

00035968 <_read_r>:
   35968:	b570      	push	{r4, r5, r6, lr}
   3596a:	0005      	movs	r5, r0
   3596c:	0008      	movs	r0, r1
   3596e:	0011      	movs	r1, r2
   35970:	2200      	movs	r2, #0
   35972:	4c06      	ldr	r4, [pc, #24]	; (3598c <_read_r+0x24>)
   35974:	6022      	str	r2, [r4, #0]
   35976:	001a      	movs	r2, r3
   35978:	f7f4 fc8c 	bl	2a294 <_read>
   3597c:	1c43      	adds	r3, r0, #1
   3597e:	d103      	bne.n	35988 <_read_r+0x20>
   35980:	6823      	ldr	r3, [r4, #0]
   35982:	2b00      	cmp	r3, #0
   35984:	d000      	beq.n	35988 <_read_r+0x20>
   35986:	602b      	str	r3, [r5, #0]
   35988:	bd70      	pop	{r4, r5, r6, pc}
   3598a:	46c0      	nop			; (mov r8, r8)
   3598c:	20005c54 	.word	0x20005c54

00035990 <_malloc_usable_size_r>:
   35990:	1f0b      	subs	r3, r1, #4
   35992:	681b      	ldr	r3, [r3, #0]
   35994:	1f18      	subs	r0, r3, #4
   35996:	2b00      	cmp	r3, #0
   35998:	da01      	bge.n	3599e <_malloc_usable_size_r+0xe>
   3599a:	580b      	ldr	r3, [r1, r0]
   3599c:	18c0      	adds	r0, r0, r3
   3599e:	4770      	bx	lr

000359a0 <sysfont_glyphs>:
   359a0:	0000 0000 0000 2000 2020 2020 2000 5050     .......     . PP
   359b0:	0050 0000 5000 f850 f850 5050 7820 70a0     P....PP.P.PP x.p
   359c0:	f028 c020 10c8 4020 1898 9060 40a0 90a8     (. ... @..`..@..
   359d0:	6068 4020 0000 0000 2010 4040 2040 4010     h` @..... @@@ .@
   359e0:	1020 1010 4020 5000 f820 5020 0000 2020      ... @.P . P..  
   359f0:	20f8 0020 0000 0000 2060 0040 0000 00f8     .  .....` @.....
   35a00:	0000 0000 0000 6000 0060 1008 4020 0080     .......``... @..
   35a10:	8870 a898 88c8 2070 2060 2020 7020 8870     p.....p `    pp.
   35a20:	1008 4020 f8f8 2010 0810 7088 3010 9050     .. @... ...p.0P.
   35a30:	10f8 f810 f080 0808 7088 4030 f080 8888     .........p0@....
   35a40:	f870 1008 4020 4040 8870 7088 8888 7070     p... @@@p..p..pp
   35a50:	8888 0878 6010 6000 0060 6060 0000 6060     ..x..`.``.``..``
   35a60:	6000 4020 1008 4020 1020 0008 f800 f800     .` @.. @ .......
   35a70:	0000 4080 1020 4020 7080 0888 2010 2000     ...@ . @.p... . 
   35a80:	8870 6808 a8a8 7070 8888 f888 8888 88f0     p..h..pp........
   35a90:	f088 8888 70f0 8088 8080 7088 90e0 8888     .....p.....p....
   35aa0:	9088 f8e0 8080 80f0 f880 80f8 e080 8080     ................
   35ab0:	7080 8088 9880 7088 8888 f888 8888 7088     .p.....p.......p
   35ac0:	2020 2020 7020 1038 1010 9010 8860 a090          p8.....`...
   35ad0:	a0c0 8890 8080 8080 8080 88f8 a8d8 8888     ................
   35ae0:	8888 8888 a8c8 8898 7088 8888 8888 7088     .........p.....p
   35af0:	88f0 f088 8080 7080 8888 a888 6890 88f0     .......p.....h..
   35b00:	f088 90a0 7888 8080 0870 f008 20f8 2020     .....x..p....   
   35b10:	2020 8820 8888 8888 7088 8888 8888 5088        ......p.....P
   35b20:	8820 8888 a8a8 88d8 8888 2050 8850 8888      .........P P...
   35b30:	5088 2020 2020 08f8 2010 8040 38f8 2020     .P    ... @..8  
   35b40:	2020 3820 8000 2040 0810 e000 2020 2020        8..@ ....    
   35b50:	e020 5020 0088 0000 0000 0000 0000 f800      . P............
   35b60:	2040 0010 0000 0000 7000 7808 7888 8080     @ .......p.x.x..
   35b70:	c8b0 8888 00f0 7000 8080 7088 0808 9868     .......p...p..h.
   35b80:	8888 0078 7000 f888 7080 4830 e040 4040     ..x..p...p0H@.@@
   35b90:	0040 7800 7888 3008 8080 c8b0 8888 2088     @..x.x.0....... 
   35ba0:	6000 2020 7020 0010 1030 9010 4060 4840     .`   p..0...`@@H
   35bb0:	6050 4850 2060 2020 2020 0070 d000 a8a8     P`PH`     p.....
   35bc0:	8888 0000 c8b0 8888 0088 7000 8888 7088     ...........p...p
   35bd0:	0000 88f0 80f0 0080 6800 7898 0808 0000     .........h.x....
   35be0:	c8b0 8080 0080 7000 7080 f008 4040 40e0     .......p.p..@@.@
   35bf0:	4840 0030 8800 8888 6898 0000 8888 5088     @H0......h.....P
   35c00:	0020 8800 a888 50a8 0000 5088 5020 0088      ......P...P P..
   35c10:	8800 7888 7008 0000 10f8 4020 10f8 2020     ...x.p.... @..  
   35c20:	2040 1020 2020 2020 2020 4020 2020 2010     @  .       @  . 
   35c30:	4020 0000                                    @..

00035c34 <pcWelcomeMessage>:
   35c34:	7246 6565 5452 534f 4320 494c 0d2e 540a     FreeRTOS CLI...T
   35c44:	7079 2065 6548 706c 7420 206f 6976 7765     ype Help to view
   35c54:	6120 6c20 7369 2074 666f 7220 6765 7369      a list of regis
   35c64:	6574 6572 2064 6f63 6d6d 6e61 7364 0d2e     tered commands..
   35c74:	000a 0000 7766 0000 7766 203a 6f44 6e77     ....fw..fw: Down
   35c84:	6f6c 6461 6120 6620 6c69 2065 6e61 2064     load a file and 
   35c94:	6570 6672 726f 206d 6e61 4620 2057 7075     perform an FW up
   35ca4:	6164 6574 0a0d 0000 6572 6573 0074 0000     date....reset...
   35cb4:	6572 6573 3a74 5220 7365 7465 2073 6874     reset: Resets th
   35cc4:	2065 6564 6976 6563 0a0d 0000 3269 0063     e device....i2c.
   35cd4:	3269 3a63 5320 6163 736e 4920 4332 6220     i2c: Scans I2C b
   35ce4:	7375 0a0d 0000 0000 6574 7473 0000 0000     us......test....
   35cf4:	6574 7473 203a 6553 646e 2073 6574 7473     test: Sends test
   35d04:	6420 7461 0d61 000a 616e 0075 616e 3a75      data...nau.nau:
   35d14:	5320 6e65 7364 7720 6965 6867 2074 6164      Sends weight da
   35d24:	6174 0a0d 0000 0000 706f 6e65 0000 0000     ta......open....
   35d34:	6573 7672 3a6f 4f20 6570 0d6e 000a 0000     servo: Open.....
   35d44:	6c63 736f 0065 0000 6573 7672 3a6f 4320     close...servo: C
   35d54:	6f6c 6573 0a0d 0000 6c63 0073 6c63 3a73     lose....cls.cls:
   35d64:	4320 656c 7261 2073 6874 2065 6574 6d72      Clears the term
   35d74:	6e69 6c61 7320 7263 6565 0d6e 000a 0000     inal screen.....
   35d84:	6f43 6c75 2064 6f6e 2074 6c61 6f6c 6163     Could not alloca
   35d94:	6574 7320 6d65 7061 6f68 6572 0a0d 0000     te semaphore....
   35da4:	0a0d 0000 616f 0000 6325 325b 0d4b 003e     ....oa..%c[2K.>.
   35db4:	2008 0008 6325 325b 004a 0000 6554 7473     . ..%c[2J...Test
   35dc4:	4420 7461 2061 514d 5454 5020 736f 0d74      Data MQTT Post.
   35dd4:	000a 0000 6e69 7570 2074 6f76 206c 203d     ....input vol = 
   35de4:	4956 314e 2050 202d 4956 314e 204e 203d     VIN1P - VIN1N = 
   35df4:	6425 0a0d 0000 0000 614e 2075 6144 6174     %d......Nau Data
   35e04:	4d20 5451 2054 6f50 7473 0a0d 0000 0000      MQTT Post......
   35e14:	6425 0000 2030 3120 2020 2032 3320 2020     %d..0  1  2  3  
   35e24:	2034 3520 2020 2036 3720 2020 2038 3920     4  5  6  7  8  9
   35e34:	2020 2061 6220 2020 2063 6420 2020 2065       a  b  c  d  e 
   35e44:	6620 0a0d 0000 0000 3025 7832 203a 0000      f......%02x: ..
   35e54:	2058 0000                                   X ..

00035e58 <xOTAUCommand>:
   35e58:	5c78 0003 5c7c 0003 3bed 0001 0000 0000     x\..|\...;......

00035e68 <xResetCommand>:
   35e68:	5cac 0003 5cb4 0003 3c0d 0001 0000 0000     .\...\...<......

00035e78 <xI2cScan>:
   35e78:	5cd0 0003 5cd4 0003 3dd1 0001 0000 0000     .\...\...=......

00035e88 <xSendTestData>:
   35e88:	5cec 0003 5cf4 0003 3c2d 0001 0000 0000     .\...\..-<......

00035e98 <xSendWeightData>:
   35e98:	5d0c 0003 5d10 0003 3cb9 0001 0000 0000     .]...]...<......

00035ea8 <xServoOpen>:
   35ea8:	5d2c 0003 5d34 0003 3c79 0001 0000 0000     ,]..4]..y<......

00035eb8 <xServoClose>:
   35eb8:	5d44 0003 5d4c 0003 3c99 0001 0000 0000     D]..L]...<......

00035ec8 <xClearScreen>:
   35ec8:	5d5c 0003 5d60 0003 3ba5 0001 0000 0000     \]..`]...;......
   35ed8:	4955 5420 7361 206b 7453 7261 6574 2164     UI Task Started!
   35ee8:	0000 0000 5345 3545 3631 0000 4948 4847     ....ESE516..HIGH
   35ef8:	4157 0059 6e55 6564 6966 656e 2164 0000     WAY.Undefined!..
   35f08:	2024 6425 0000 0000                         $ %d....

00035f10 <main_mqtt_broker>:
   35f10:	7262 6b6f 7265 682e 7669 6d65 2e71 6f63     broker.hivemq.co
   35f20:	006d 0000 3025 6433 0000 0000 7473 7261     m...%03d....star
   35f30:	5f74 6f64 6e77 6f6c 6461 203a 4d4d 2043     t_download: MMC 
   35f40:	7473 726f 6761 2065 6f6e 2074 6572 6461     storage not read
   35f50:	2e79 0a0d 0000 0000 7473 7261 5f74 6f64     y.......start_do
   35f60:	6e77 6f6c 6461 203a 6957 462d 2069 7369     wnload: Wi-Fi is
   35f70:	6e20 746f 6320 6e6f 656e 7463 6465 0d2e      not connected..
   35f80:	000a 0000 7473 7261 5f74 6f64 6e77 6f6c     ....start_downlo
   35f90:	6461 203a 6572 7571 7365 2074 7369 7320     ad: request is s
   35fa0:	6e65 2074 6c61 6572 6461 2e79 0a0d 0000     ent already.....
   35fb0:	7473 7261 5f74 6f64 6e77 6f6c 6461 203a     start_download: 
   35fc0:	7572 6e6e 6e69 2067 6f64 6e77 6f6c 6461     running download
   35fd0:	6120 726c 6165 7964 0d2e 000a 7473 7261      already....star
   35fe0:	5f74 6f64 6e77 6f6c 6461 203a 6573 646e     t_download: send
   35ff0:	6e69 2067 5448 5054 7220 7165 6575 7473     ing HTTP request
   36000:	2e2e 0d2e 000a 0000 7468 7074 3a73 2f2f     ........https://
   36010:	3437 322e 3533 312e 3537 342e 2f31 6554     74.235.175.41/Te
   36020:	7473 2e42 6962 006e 7473 726f 5f65 6966     stB.bin.store_fi
   36030:	656c 705f 6361 656b 3a74 6520 706d 7974     le_packet: empty
   36040:	6420 7461 2e61 0a0d 0000 0000 7473 726f      data.......stor
   36050:	5f65 6966 656c 705f 6361 656b 3a74 6620     e_file_packet: f
   36060:	6c69 2065 616e 656d 6920 2073 6e69 6176     ile name is inva
   36070:	696c 2e64 4420 776f 6c6e 616f 2064 6163     lid. Download ca
   36080:	636e 6c65 6465 0d2e 000a 0000 7473 726f     nceled......stor
   36090:	5f65 6966 656c 705f 6361 656b 3a74 6320     e_file_packet: c
   360a0:	6572 7461 6e69 2067 6966 656c 5b20 7325     reating file [%s
   360b0:	0d5d 000a 7473 726f 5f65 6966 656c 705f     ]...store_file_p
   360c0:	6361 656b 3a74 6620 6c69 2065 7263 6165     acket: file crea
   360d0:	6974 6e6f 6520 7272 726f 2021 6572 3a74     tion error! ret:
   360e0:	6425 0a0d 0000 0000 7473 726f 5f65 6966     %d......store_fi
   360f0:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
   36100:	7277 7469 2065 7265 6f72 2c72 6420 776f     write error, dow
   36110:	6c6e 616f 2064 6163 636e 6c65 6465 0d2e     nload canceled..
   36120:	000a 0000 7473 726f 5f65 6966 656c 705f     ....store_file_p
   36130:	6361 656b 3a74 7220 6365 6965 6576 5b64     acket: received[
   36140:	6c25 5d75 202c 6966 656c 7320 7a69 5b65     %lu], file size[
   36150:	6c25 5d75 0a0d 0000 7473 726f 5f65 6966     %lu]....store_fi
   36160:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
   36170:	6f64 6e77 6f6c 6461 6465 7320 6375 6563     downloaded succe
   36180:	7373 7566 6c6c 2e79 0a0d 0000 7468 7074     ssfully.....http
   36190:	635f 696c 6e65 5f74 6163 6c6c 6162 6b63     _client_callback
   361a0:	203a 5448 5054 6320 696c 6e65 2074 6f73     : HTTP client so
   361b0:	6b63 7465 6320 6e6f 656e 7463 6465 0d2e     cket connected..
   361c0:	000a 0000 7468 7074 635f 696c 6e65 5f74     ....http_client_
   361d0:	6163 6c6c 6162 6b63 203a 6572 7571 7365     callback: reques
   361e0:	2074 6f63 706d 656c 6574 2e64 0a0d 0000     t completed.....
   361f0:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
   36200:	6162 6b63 203a 6572 6563 7669 6465 7220     back: received r
   36210:	7365 6f70 736e 2065 7525 6420 7461 2061     esponse %u data 
   36220:	6973 657a 2520 0d75 000a 0000 7468 7074     size %u.....http
   36230:	635f 696c 6e65 5f74 6163 6c6c 6162 6b63     _client_callback
   36240:	203a 6964 6373 6e6f 656e 7463 6f69 206e     : disconnection 
   36250:	6572 7361 6e6f 253a 0d64 000a 6572 6f73     reason:%d...reso
   36260:	766c 5f65 6263 203a 7325 4920 2050 6461     lve_cb: %s IP ad
   36270:	7264 7365 2073 7369 2520 2e64 6425 252e     dress is %d.%d.%
   36280:	2e64 6425 0a0d 0a0d 0000 0000 6977 6966     d.%d........wifi
   36290:	635f 3a62 4d20 4d32 575f 4649 5f49 4f43     _cb: M2M_WIFI_CO
   362a0:	4e4e 4345 4554 0d44 000a 0000 6977 6966     NNECTED.....wifi
   362b0:	635f 3a62 4d20 4d32 575f 4649 5f49 4944     _cb: M2M_WIFI_DI
   362c0:	4353 4e4f 454e 5443 4445 0a0d 0000 0000     SCONNECTED......
   362d0:	6570 6e6e 3731 3034 6977 6966 0000 0000     penn1740wifi....
   362e0:	6941 5072 6e65 4e6e 7465 442d 7665 6369     AirPennNet-Devic
   362f0:	0065 0000 6977 6966 635f 3a62 4920 2050     e...wifi_cb: IP 
   36300:	6461 7264 7365 2073 7369 2520 2e75 7525     address is %u.%u
   36310:	252e 2e75 7525 0a0d 0000 0000 7245 6f72     .%u.%u......Erro
   36320:	2072 6f63 6e6e 6365 6974 676e 7420 206f     r connecting to 
   36330:	514d 5454 4220 6f72 656b 2172 0a0d 0000     MQTT Broker!....
   36340:	6e69 7469 735f 6f74 6172 6567 203a 6c70     init_storage: pl
   36350:	6165 6573 7020 756c 2067 6e61 5320 2f44     ease plug an SD/
   36360:	4d4d 2043 6163 6472 6920 206e 6c73 746f     MMC card in slot
   36370:	2e2e 0d2e 000a 0000 6e69 7469 735f 6f74     ........init_sto
   36380:	6172 6567 203a 4453 4320 7261 2064 6e69     rage: SD Card in
   36390:	7473 6c61 206c 6166 6c69 6465 0d2e 000a     stall failed....
   363a0:	6e69 7469 735f 6f74 6172 6567 203a 7274     init_storage: tr
   363b0:	2079 6e75 6c70 6775 6120 646e 7220 2d65     y unplug and re-
   363c0:	6c70 6775 7420 6568 6320 7261 2e64 0a0d     plug the card...
   363d0:	0000 0000 6e69 7469 735f 6f74 6172 6567     ....init_storage
   363e0:	203a 6f6d 6e75 6974 676e 5320 2044 6163     : mounting SD ca
   363f0:	6472 2e2e 0d2e 000a 6e69 7469 735f 6f74     rd......init_sto
   36400:	6172 6567 203a 4453 6320 7261 2064 6f6d     rage: SD card mo
   36410:	6e75 2074 6166 6c69 6465 2021 7228 7365     unt failed! (res
   36420:	2520 2964 0a0d 0000 6e69 7469 735f 6f74      %d)....init_sto
   36430:	6172 6567 203a 4453 6320 7261 2064 6f6d     rage: SD card mo
   36440:	6e75 2074 4b4f 0d2e 000a 0000 6f63 666e     unt OK......conf
   36450:	6769 7275 5f65 7468 7074 635f 696c 6e65     igure_http_clien
   36460:	3a74 4820 5454 2050 6c63 6569 746e 6920     t: HTTP client i
   36470:	696e 6974 6c61 7a69 7461 6f69 206e 6166     nitialization fa
   36480:	6c69 6465 2021 7228 7365 2520 2964 0a0d     iled! (res %d)..
   36490:	0000 0000 0a0d 2520 2a2e 0073 3e20 203e     ...... %.*s. >> 
   364a0:	0000 0000 2e25 732a 0000 0000 3150 4c5f     ....%.*s....P1_L
   364b0:	4445 455f 4553 3135 5f36 3954 0000 0000     ED_ESE516_T9....
   364c0:	6166 736c 0065 0000 7274 6575 0000 0000     false...true....
   364d0:	4553 5652 5f4f 4f54 4950 5f43 3135 5f36     SERVO_TOPIC_516_
   364e0:	3954 0000 0a0d 6f43 6e6e 6365 6974 676e     T9....Connecting
   364f0:	7420 206f 7242 6b6f 7265 2e2e 002e 0000      to Broker......
   36500:	6968 6867 6177 3179 0035 0000 6948 6867     highway15...High
   36510:	6177 0079 514d 5454 2020 7245 6f72 2072     way.MQTT  Error 
   36520:	202d 4f4e 2054 6f43 6e6e 6365 6574 2064     - NOT Connected 
   36530:	6f74 6220 6f72 656b 0d72 000a 514d 5454     to broker...MQTT
   36540:	4320 6e6f 656e 7463 6465 7420 206f 7262      Connected to br
   36550:	6b6f 7265 0a0d 0000 6f43 6e6e 6365 2074     oker....Connect 
   36560:	6166 6c69 7420 206f 6573 7672 7265 2528     fail to server(%
   36570:	2973 2021 6572 7274 2079 7469 6120 7475     s)! retry it aut
   36580:	6d6f 7461 6369 6c61 796c 0d2e 000a 0000     omatically......
   36590:	514d 5454 4320 6e6f 656e 7463 6465 0a0d     MQTT Connected..
   365a0:	0000 0000 514d 5454 6220 6f72 656b 2072     ....MQTT broker 
   365b0:	6564 6c63 6e69 2065 6f79 7275 6120 6363     decline your acc
   365c0:	7365 2173 6520 7272 726f 6320 646f 2065     ess! error code 
   365d0:	6425 0a0d 0000 0000 514d 5454 6420 7369     %d......MQTT dis
   365e0:	6f63 6e6e 6365 6574 0d64 000a 514d 5454     connected...MQTT
   365f0:	6920 696e 6974 6c61 7a69 7461 6f69 206e      initialization 
   36600:	6166 6c69 6465 202e 7245 6f72 2072 6f63     failed. Error co
   36610:	6564 6920 2073 2528 2964 0a0d 0000 0000     de is (%d)......
   36620:	514d 5454 7220 6765 7369 6574 2072 6163     MQTT register ca
   36630:	6c6c 6162 6b63 6620 6961 656c 2e64 4520     llback failed. E
   36640:	7272 726f 6320 646f 2065 7369 2820 6425     rror code is (%d
   36650:	0d29 000a 227b 2264 7b3a 7422 6d65 2270     )...{"d":{"temp"
   36660:	253a 7d64 007d 0000 465b 4941 5d4c 7220     :%d}}...[FAIL] r
   36670:	7365 2520 0d64 000a 6c46 6761 2e41 7874     es %d...FlagA.tx
   36680:	2074 6461 6564 2164 0a0d 0000 3a30 6c46     t added!....0:Fl
   36690:	6761 2e41 7874 0074 6f43 6e6e 6365 6574     agA.txt.Connecte
   366a0:	2064 6f74 4d20 5451 2054 7242 6b6f 7265     d to MQTT Broker
   366b0:	0d21 000a 227b 6574 7473 3a22 6425 7d20     !...{"test":%d }
   366c0:	0000 0000 4554 5453 545f 504f 4349 355f     ....TEST_TOPIC_5
   366d0:	3631 545f 0039 0000 227b 616e 5f75 2269     16_T9...{"nau_i"
   366e0:	253a 2c64 2020 6e22 7561 665f 3a22 2520     :%d,  "nau_f": %
   366f0:	7d64 0000 414e 5f55 4f54 4950 5f43 3135     d}..NAU_TOPIC_51
   36700:	5f36 3954 0000 0000 414e 2055 4144 4154     6_T9....NAU DATA
   36710:	5020 534f 4554 0d44 000a 0000 5245 4f52      POSTED.....ERRO
   36720:	2052 6e49 7469 6169 696c 697a 676e 5720     R Initializing W
   36730:	6669 2069 6144 6174 7120 6575 6575 2173     ifi Data queues!
   36740:	0a0d 0000 5345 3545 3631 2d20 5720 6669     ....ESE516 - Wif
   36750:	2069 6e49 7469 4320 646f 0d65 000a 0000     i Init Code.....
   36760:	616d 6e69 203a 326d 5f6d 6977 6966 695f     main: m2m_wifi_i
   36770:	696e 2074 6163 6c6c 6520 7272 726f 2021     nit call error! 
   36780:	7228 7365 2520 2964 0a0d 0000 616d 6e69     (res %d)....main
   36790:	203a 6f63 6e6e 6365 6974 676e 7420 206f     : connecting to 
   367a0:	6957 6946 4120 2050 7325 2e2e 0d2e 000a     WiFi AP %s......
   367b0:	3150 545f 4d45 4550 4152 5554 4552 455f     P1_TEMPERATURE_E
   367c0:	4553 3135 5f36 3954 0000 0000 514d 5454     SE516_T9....MQTT
   367d0:	7320 6e65 2064 7325 0a0d 0000 56a0 0001      send %s.....V..
   367e0:	56ac 0001 56be 0001 5714 0001 5734 0001     .V...V...W..4W..
   367f0:	6568 706c 0000 0000 0a0d 6568 706c 0d3a     help......help:.
   36800:	200a 694c 7473 2073 6c61 206c 6874 2065     . Lists all the 
   36810:	6572 6967 7473 7265 6465 6320 6d6f 616d     registered comma
   36820:	646e 0d73 0d0a 000a 6e49 6f63 7272 6365     nds.....Incorrec
   36830:	2074 6f63 6d6d 6e61 2064 6170 6172 656d     t command parame
   36840:	6574 2872 2973 202e 4520 746e 7265 2220     ter(s).  Enter "
   36850:	6568 706c 2022 6f74 7620 6569 2077 2061     help" to view a 
   36860:	696c 7473 6f20 2066 7661 6961 616c 6c62     list of availabl
   36870:	2065 6f63 6d6d 6e61 7364 0d2e 0d0a 000a     e commands......
   36880:	6f43 6d6d 6e61 2064 6f6e 2074 6572 6f63     Command not reco
   36890:	6e67 7369 6465 202e 4520 746e 7265 2720     gnised.  Enter '
   368a0:	6568 706c 2027 6f74 7620 6569 2077 2061     help' to view a 
   368b0:	696c 7473 6f20 2066 7661 6961 616c 6c62     list of availabl
   368c0:	2065 6f63 6d6d 6e61 7364 0d2e 0d0a 000a     e commands......

000368d0 <xHelpCommand>:
   368d0:	67f0 0003 67f8 0003 707d 0001 0000 0000     .g...g..}p......
   368e0:	5476 6172 6563 6e45 6261 656c 5428 4352     vTraceEnable(TRC
   368f0:	535f 4154 5452 415f 4157 5449 485f 534f     _START_AWAIT_HOS
   36900:	2954 6e20 746f 6120 6c6c 776f 6465 6920     T) not allowed i
   36910:	206e 6e53 7061 6873 746f 6d20 646f 0065     n Snapshot mode.
   36920:	6e55 7865 6570 7463 6465 6120 6772 6d75     Unexpected argum
   36930:	6e65 2074 6f74 7620 7254 6361 4565 616e     ent to vTraceEna
   36940:	6c62 2065 7328 616e 7370 6f68 2074 6f6d     ble (snapshot mo
   36950:	6564 0029 7a54 7443 6c72 0000 6f4e 2074     de).TzCtrl..Not 
   36960:	6e65 756f 6867 5420 5341 204b 6168 646e     enough TASK hand
   36970:	656c 2073 202d 6e69 7263 6165 6573 5420     les - increase T
   36980:	4352 435f 4746 4e5f 4154 4b53 6920 206e     RC_CFG_NTASK in 
   36990:	7274 5363 616e 7370 6f68 4374 6e6f 6966     trcSnapshotConfi
   369a0:	2e67 0068 6f4e 2074 6e65 756f 6867 4920     g.h.Not enough I
   369b0:	5253 6820 6e61 6c64 7365 2d20 6920 636e     SR handles - inc
   369c0:	6572 7361 2065 5254 5f43 4643 5f47 494e     rease TRC_CFG_NI
   369d0:	5253 6920 206e 7274 5363 616e 7370 6f68     SR in trcSnapsho
   369e0:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   369f0:	6e65 756f 6867 5320 4d45 5041 4f48 4552     enough SEMAPHORE
   36a00:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   36a10:	7361 2065 5254 5f43 4643 5f47 534e 4d45     ase TRC_CFG_NSEM
   36a20:	5041 4f48 4552 6920 206e 7274 5363 616e     APHORE in trcSna
   36a30:	7370 6f68 4374 6e6f 6966 2e67 0068 0000     pshotConfig.h...
   36a40:	6f4e 2074 6e65 756f 6867 4d20 5455 5845     Not enough MUTEX
   36a50:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   36a60:	7361 2065 5254 5f43 4643 5f47 4d4e 5455     ase TRC_CFG_NMUT
   36a70:	5845 6920 206e 7274 5363 616e 7370 6f68     EX in trcSnapsho
   36a80:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   36a90:	6e65 756f 6867 5120 4555 4555 6820 6e61     enough QUEUE han
   36aa0:	6c64 7365 2d20 6920 636e 6572 7361 2065     dles - increase 
   36ab0:	5254 5f43 4643 5f47 514e 4555 4555 6920     TRC_CFG_NQUEUE i
   36ac0:	206e 7274 5363 616e 7370 6f68 4374 6e6f     n trcSnapshotCon
   36ad0:	6966 2e67 0068 0000 6f4e 2074 6e65 756f     fig.h...Not enou
   36ae0:	6867 5420 4d49 5245 6820 6e61 6c64 7365     gh TIMER handles
   36af0:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   36b00:	4643 5f47 544e 4d49 5245 6920 206e 7274     CFG_NTIMER in tr
   36b10:	5363 616e 7370 6f68 4374 6e6f 6966 2e67     cSnapshotConfig.
   36b20:	0068 0000 6f4e 2074 6e65 756f 6867 4520     h...Not enough E
   36b30:	4556 544e 5247 554f 2050 6168 646e 656c     VENTGROUP handle
   36b40:	2073 202d 6e69 7263 6165 6573 5420 4352     s - increase TRC
   36b50:	435f 4746 4e5f 5645 4e45 4754 4f52 5055     _CFG_NEVENTGROUP
   36b60:	6920 206e 7274 5363 616e 7370 6f68 4374      in trcSnapshotC
   36b70:	6e6f 6966 2e67 0068 6f4e 2074 6e65 756f     onfig.h.Not enou
   36b80:	6867 5320 5254 4145 424d 4655 4546 2052     gh STREAMBUFFER 
   36b90:	6168 646e 656c 2073 202d 6e69 7263 6165     handles - increa
   36ba0:	6573 5420 4352 435f 4746 4e5f 5453 4552     se TRC_CFG_NSTRE
   36bb0:	4d41 5542 4646 5245 6920 206e 7274 5363     AMBUFFER in trcS
   36bc0:	616e 7370 6f68 4374 6e6f 6966 2e67 0068     napshotConfig.h.
   36bd0:	6f4e 2074 6e65 756f 6867 4d20 5345 4153     Not enough MESSA
   36be0:	4547 5542 4646 5245 6820 6e61 6c64 7365     GEBUFFER handles
   36bf0:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   36c00:	4643 5f47 4d4e 5345 4153 4547 5542 4646     CFG_NMESSAGEBUFF
   36c10:	5245 6920 206e 7274 5363 616e 7370 6f68     ER in trcSnapsho
   36c20:	4374 6e6f 6966 2e67 0068 0000 7370 547a     tConfig.h...pszT
   36c30:	6172 6563 6547 4574 7272 726f 6148 646e     raceGetErrorHand
   36c40:	656c 3a73 4920 766e 6c61 6469 6f20 6a62     les: Invalid obj
   36c50:	6365 6374 616c 7373 0021 0000 77a2 0001     ectclass!....w..
   36c60:	779a 0001 779e 0001 7792 0001 7796 0001     .w...w...w...w..
   36c70:	77a6 0001 77aa 0001 77ae 0001 77b2 0001     .w...w...w...w..
   36c80:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   36c90:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   36ca0:	6c61 7a69 6465 202e 7355 2065 5476 6172     alized. Use vTra
   36cb0:	6563 6e45 6261 656c 2928 6920 736e 6574     ceEnable() inste
   36cc0:	6461 0021 7328 6174 7472 7075 0029 0000     ad!.(startup)...
   36cd0:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   36ce0:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   36cf0:	6c61 7a69 6465 202c 6163 6c6c 7620 7254     alized, call vTr
   36d00:	6361 4565 616e 6c62 2865 2029 6966 7372     aceEnable() firs
   36d10:	2174 0000 5254 4341 5f45 5341 4553 5452     t!..TRACE_ASSERT
   36d20:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   36d30:	706f 7265 6974 7365 203a 6e49 6176 696c     operties: Invali
   36d40:	2064 6176 756c 2065 6f66 2072 6168 646e     d value for hand
   36d50:	656c 0000 5254 4341 5f45 5341 4553 5452     le..TRACE_ASSERT
   36d60:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   36d70:	706f 7265 6974 7365 203a 616e 656d 3d20     operties: name =
   36d80:	203d 554e 4c4c 0000 5476 6172 6563 7453     = NULL..vTraceSt
   36d90:	726f 4965 5253 6542 6967 206e 202d 6572     oreISRBegin - re
   36da0:	6f63 6472 7265 6220 7375 2179 5320 6565     corder busy! See
   36db0:	6320 646f 2065 6f63 6d6d 6e65 2e74 0000      code comment...
   36dc0:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   36dd0:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   36de0:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   36df0:	6e61 6c64 2065 4e28 4c55 294c 0000 0000     andle (NULL)....
   36e00:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   36e10:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   36e20:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   36e30:	6e61 6c64 2065 3e28 4e20 5349 2952 0000     andle (> NISR)..
   36e40:	6f54 206f 616d 796e 6e20 7365 6574 2064     Too many nested 
   36e50:	6e69 6574 7272 7075 7374 0021 5476 6172     interrupts!.vTra
   36e60:	6563 7453 726f 4965 5253 6e45 2064 202d     ceStoreISREnd - 
   36e70:	6572 6f63 6472 7265 6220 7375 2179 5320     recorder busy! S
   36e80:	6565 6320 646f 2065 6f63 6d6d 6e65 2e74     ee code comment.
   36e90:	0000 0000 6e55 616d 6374 6568 2064 6163     ....Unmatched ca
   36ea0:	6c6c 7420 206f 5476 6172 6563 7453 726f     ll to vTraceStor
   36eb0:	4965 5253 6e45 2064 6e28 5349 6152 7463     eISREnd (nISRact
   36ec0:	7669 2065 3d3d 3020 202c 7865 6570 7463     ive == 0, expect
   36ed0:	6465 3e20 3020 0029 5254 4341 5f45 5341     ed > 0).TRACE_AS
   36ee0:	4553 5452 203a 7277 7469 4965 746e 3a38     SERT: writeInt8:
   36ef0:	6220 6675 6566 2072 3d3d 4e20 4c55 004c      buffer == NULL.
   36f00:	5254 4341 5f45 5341 4553 5452 203a 7277     TRACE_ASSERT: wr
   36f10:	7469 4965 746e 3631 203a 7562 6666 7265     iteInt16: buffer
   36f20:	3d20 203d 554e 4c4c 0000 0000 5254 4341      == NULL....TRAC
   36f30:	5f45 5341 4553 5452 203a 7277 7469 4965     E_ASSERT: writeI
   36f40:	746e 3233 203a 7562 6666 7265 3d20 203d     nt32: buffer == 
   36f50:	554e 4c4c 0000 0000 5476 6172 6563 7250     NULL....vTracePr
   36f60:	6e69 4674 2d20 5420 6f6f 6d20 6e61 2079     intF - Too many 
   36f70:	7261 7567 656d 746e 2c73 6d20 7861 3120     arguments, max 1
   36f80:	2035 6c61 6f6c 6577 2164 0000 5476 6172     5 allowed!..vTra
   36f90:	6563 7250 6e69 4674 2d20 5420 6f6f 6c20     cePrintF - Too l
   36fa0:	7261 6567 6120 6772 6d75 6e65 7374 202c     arge arguments, 
   36fb0:	616d 2078 3233 6220 7479 2065 6c61 6f6c     max 32 byte allo
   36fc0:	6577 2164 0000 0000 5254 4341 5f45 5341     wed!....TRACE_AS
   36fd0:	4553 5452 203a 5476 6172 6563 5056 6972     SERT: vTraceVPri
   36fe0:	746e 3a46 6620 726f 616d 5374 7274 3d20     ntF: formatStr =
   36ff0:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   37000:	4553 5452 203a 5478 6172 6563 6552 6967     SERT: xTraceRegi
   37010:	7473 7265 7453 6972 676e 203a 616c 6562     sterString: labe
   37020:	206c 3d3d 4e20 4c55 004c 0000 5254 4341     l == NULL...TRAC
   37030:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37040:	6563 7453 726f 5465 7361 526b 6165 7964     ceStoreTaskReady
   37050:	203a 6e49 6176 696c 2064 6176 756c 2065     : Invalid value 
   37060:	6f66 2072 6168 646e 656c 0000 6552 6f63     for handle..Reco
   37070:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   37080:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   37090:	6e69 2067 7973 6373 6c61 3f6c 2820 2931     ing syscall? (1)
   370a0:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   370b0:	203a 7270 5476 6172 6563 7453 726f 4c65     : prvTraceStoreL
   370c0:	776f 6f50 6577 3a72 4920 766e 6c61 6469     owPower: Invalid
   370d0:	6620 616c 2067 6176 756c 0065 5254 4341      flag value.TRAC
   370e0:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   370f0:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   37100:	3a6c 6520 6f63 6564 3e20 203d 7830 4646     l: ecode >= 0xFF
   37110:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   37120:	203a 7270 5476 6172 6563 7453 726f 4b65     : prvTraceStoreK
   37130:	7265 656e 436c 6c61 3a6c 6f20 6a62 6365     ernelCall: objec
   37140:	4374 616c 7373 3e20 203d 5254 4341 5f45     tClass >= TRACE_
   37150:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   37160:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37170:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   37180:	3a6c 4920 766e 6c61 6469 7620 6c61 6575     l: Invalid value
   37190:	6620 726f 6f20 6a62 6365 4e74 6d75 6562      for objectNumbe
   371a0:	0072 0000 6552 6f63 6472 7265 6220 7375     r...Recorder bus
   371b0:	2079 202d 6968 6867 7020 6972 726f 7469     y - high priorit
   371c0:	2079 5349 2052 7375 6e69 2067 7973 6373     y ISR using sysc
   371d0:	6c61 3f6c 2820 2932 0000 0000 5254 4341     all? (2)....TRAC
   371e0:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   371f0:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   37200:	576c 7469 5068 7261 6d61 203a 7665 6374     lWithParam: evtc
   37210:	646f 2065 3d3e 3020 4678 0046 5254 4341     ode >= 0xFF.TRAC
   37220:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37230:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   37240:	576c 7469 5068 7261 6d61 203a 626f 656a     lWithParam: obje
   37250:	7463 6c43 7361 2073 3d3e 5420 4152 4543     ctClass >= TRACE
   37260:	4e5f 4c43 5341 4553 0053 0000 5254 4341     _NCLASSES...TRAC
   37270:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37280:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   37290:	576c 7469 5068 7261 6d61 203a 6e49 6176     lWithParam: Inva
   372a0:	696c 2064 6176 756c 2065 6f66 2072 626f     lid value for ob
   372b0:	656a 7463 754e 626d 7265 0000 6552 6f63     jectNumber..Reco
   372c0:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   372d0:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   372e0:	6e69 2067 7973 6373 6c61 3f6c 2820 2933     ing syscall? (3)
   372f0:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   37300:	203a 7270 5476 6172 6563 6547 5074 7261     : prvTraceGetPar
   37310:	6d61 203a 6e49 6176 696c 2064 6176 756c     am: Invalid valu
   37320:	2065 6f66 2072 6170 6172 5f6d 616d 0078     e for param_max.
   37330:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37340:	5476 6172 6563 7453 726f 4b65 7265 656e     vTraceStoreKerne
   37350:	436c 6c61 576c 7469 4e68 6d75 7265 6369     lCallWithNumeric
   37360:	6150 6172 4f6d 6c6e 3a79 4920 766e 6c61     ParamOnly: Inval
   37370:	6469 7620 6c61 6575 6620 726f 6520 7476     id value for evt
   37380:	6f63 6564 0000 0000 6552 6f63 6472 7265     code....Recorder
   37390:	6220 7375 2079 202d 6968 6867 7020 6972      busy - high pri
   373a0:	726f 7469 2079 5349 2052 7375 6e69 2067     ority ISR using 
   373b0:	7973 6373 6c61 3f6c 2820 2934 0000 0000     syscall? (4)....
   373c0:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   373d0:	5476 6172 6563 7453 726f 5465 7361 736b     vTraceStoreTasks
   373e0:	6977 6374 3a68 4920 766e 6c61 6469 7620     witch: Invalid v
   373f0:	6c61 6575 6620 726f 7420 7361 5f6b 6168     alue for task_ha
   37400:	646e 656c 0000 0000 5254 4341 5f45 5341     ndle....TRACE_AS
   37410:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   37420:	726f 4f65 6a62 6365 4e74 6d61 4f65 436e     oreObjectNameOnC
   37430:	6f6c 6573 7645 6e65 3a74 6f20 6a62 6365     loseEvent: objec
   37440:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   37450:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   37460:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37470:	6563 7453 726f 4f65 6a62 6365 4e74 6d61     ceStoreObjectNam
   37480:	4f65 436e 6f6c 6573 7645 6e65 3a74 4920     eOnCloseEvent: I
   37490:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   374a0:	6820 6e61 6c64 0065 5254 4341 5f45 5341      handle.TRACE_AS
   374b0:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   374c0:	726f 4f65 6a62 6365 5074 6f72 6570 7472     oreObjectPropert
   374d0:	6569 4f73 436e 6f6c 6573 7645 6e65 3a74     iesOnCloseEvent:
   374e0:	6f20 6a62 6365 6374 616c 7373 3e20 203d      objectclass >= 
   374f0:	5254 4341 5f45 434e 414c 5353 5345 0000     TRACE_NCLASSES..
   37500:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37510:	5476 6172 6563 7453 726f 4f65 6a62 6365     vTraceStoreObjec
   37520:	5074 6f72 6570 7472 6569 4f73 436e 6f6c     tPropertiesOnClo
   37530:	6573 7645 6e65 3a74 4920 766e 6c61 6469     seEvent: Invalid
   37540:	7620 6c61 6575 6620 726f 6820 6e61 6c64      value for handl
   37550:	0065 0000 5254 4341 5f45 5341 4553 5452     e...TRACE_ASSERT
   37560:	203a 7270 5476 6172 6563 6553 5074 6972     : prvTraceSetPri
   37570:	726f 7469 5079 6f72 6570 7472 3a79 6f20     orityProperty: o
   37580:	6a62 6365 6374 616c 7373 3e20 203d 5254     bjectclass >= TR
   37590:	4341 5f45 434e 414c 5353 5345 0000 0000     ACE_NCLASSES....
   375a0:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   375b0:	5476 6172 6563 6553 5074 6972 726f 7469     vTraceSetPriorit
   375c0:	5079 6f72 6570 7472 3a79 4920 766e 6c61     yProperty: Inval
   375d0:	6469 7620 6c61 6575 6620 726f 6920 0064     id value for id.
   375e0:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   375f0:	5476 6172 6563 6547 5074 6972 726f 7469     vTraceGetPriorit
   37600:	5079 6f72 6570 7472 3a79 6f20 6a62 6365     yProperty: objec
   37610:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   37620:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   37630:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37640:	6563 6547 5074 6972 726f 7469 5079 6f72     ceGetPriorityPro
   37650:	6570 7472 3a79 4920 766e 6c61 6469 7620     perty: Invalid v
   37660:	6c61 6575 6620 726f 6920 0064 5254 4341     alue for id.TRAC
   37670:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37680:	6563 6553 4f74 6a62 6365 5374 6174 6574     ceSetObjectState
   37690:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   376a0:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   376b0:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   376c0:	5476 6172 6563 6553 4f74 6a62 6365 5374     vTraceSetObjectS
   376d0:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   376e0:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   376f0:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37700:	6563 6547 4f74 6a62 6365 5374 6174 6574     ceGetObjectState
   37710:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   37720:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   37730:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37740:	5476 6172 6563 6547 4f74 6a62 6365 5374     vTraceGetObjectS
   37750:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   37760:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   37770:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37780:	6563 6553 5474 7361 496b 736e 6174 636e     ceSetTaskInstanc
   37790:	4665 6e69 7369 6568 3a64 4920 766e 6c61     eFinished: Inval
   377a0:	6469 7620 6c61 6575 6620 726f 6820 6e61     id value for han
   377b0:	6c64 0065 7254 6361 2065 6552 6f63 6472     dle.Trace Record
   377c0:	7265 4420 6d65 006f 7441 6574 706d 2074     er Demo.Attempt 
   377d0:	6f74 6920 646e 7865 6f20 7475 6973 6564     to index outside
   377e0:	6520 6576 746e 6220 6675 6566 2172 0000      event buffer!..
   377f0:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   37800:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   37810:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   37820:	6f20 6a62 6365 6374 616c 7373 0000 0000      objectclass....
   37830:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   37840:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   37850:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   37860:	6f20 6a62 6365 6874 6e61 6c64 0065 0000      objecthandle...
   37870:	624f 656a 7463 7420 6261 656c 6c20 6f6f     Object table loo
   37880:	756b 2070 6977 6874 6920 766e 6c61 6469     kup with invalid
   37890:	6f20 6a62 6365 2074 6168 646e 656c 6f20      object handle o
   378a0:	2072 626f 656a 7463 6320 616c 7373 0021     r object class!.
   378b0:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   378c0:	5476 6172 6563 6547 4f74 6a62 6365 4874     vTraceGetObjectH
   378d0:	6e61 6c64 3a65 4920 766e 6c61 6469 7620     andle: Invalid v
   378e0:	6c61 6575 6620 726f 6f20 6a62 6365 6374     alue for objectc
   378f0:	616c 7373 0000 0000 5254 4341 5f45 5341     lass....TRACE_AS
   37900:	4553 5452 203a 7270 5476 6172 6563 7246     SERT: prvTraceFr
   37910:	6565 624f 656a 7463 6148 646e 656c 203a     eeObjectHandle: 
   37920:	6e49 6176 696c 2064 6176 756c 2065 6f66     Invalid value fo
   37930:	2072 626f 656a 7463 6c63 7361 0073 0000     r objectclass...
   37940:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37950:	5476 6172 6563 7246 6565 624f 656a 7463     vTraceFreeObject
   37960:	6148 646e 656c 203a 6e49 6176 696c 2064     Handle: Invalid 
   37970:	6176 756c 2065 6f66 2072 6168 646e 656c     value for handle
   37980:	0000 0000 7441 6574 706d 2074 6f74 6620     ....Attempt to f
   37990:	6572 2065 6f6d 6572 6820 6e61 6c64 7365     ree more handles
   379a0:	7420 6168 206e 6c61 6f6c 6163 6574 2164      than allocated!
   379b0:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   379c0:	203a 7270 5476 6172 6563 6553 4f74 6a62     : prvTraceSetObj
   379d0:	6365 4e74 6d61 3a65 6e20 6d61 2065 3d3d     ectName: name ==
   379e0:	4e20 4c55 004c 0000 6c49 656c 6167 206c      NULL...Illegal 
   379f0:	626f 656a 7463 6320 616c 7373 6920 206e     object class in 
   37a00:	7270 5476 6172 6563 6553 4f74 6a62 6365     prvTraceSetObjec
   37a10:	4e74 6d61 0065 0000 6c49 656c 6167 206c     tName...Illegal 
   37a20:	6168 646e 656c 2820 2930 6920 206e 7270     handle (0) in pr
   37a30:	5476 6172 6563 6553 4f74 6a62 6365 4e74     vTraceSetObjectN
   37a40:	6d61 2e65 0000 0000 5254 4341 5f45 5341     ame.....TRACE_AS
   37a50:	4553 5452 203a 7270 5476 6172 6563 704f     SERT: prvTraceOp
   37a60:	6e65 7953 626d 6c6f 203a 616e 656d 3d20     enSymbol: name =
   37a70:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   37a80:	4553 5452 203a 7270 4376 6568 6b63 6144     SERT: prvCheckDa
   37a90:	6174 6f54 6542 764f 7265 7277 7469 6574     taToBeOverwritte
   37aa0:	466e 726f 754d 746c 4569 746e 7972 7645     nForMultiEntryEv
   37ab0:	6e65 7374 203a 6f6e 4566 746e 6972 7365     ents: nofEntries
   37ac0:	6f54 6843 6365 206b 3d3d 3020 0000 0000     ToCheck == 0....
   37ad0:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37ae0:	5476 6172 6563 6547 4474 5354 203a 6e49     vTraceGetDTS: In
   37af0:	6176 696c 2064 6176 756c 2065 6f66 2072     valid value for 
   37b00:	6170 6172 5f6d 616d 4478 5354 0000 0000     param_maxDTS....
   37b10:	6142 2064 6170 6172 5f6d 616d 4478 5354     Bad param_maxDTS
   37b20:	6920 206e 7270 5476 6172 6563 6547 4474      in prvTraceGetD
   37b30:	5354 0000 5254 4341 5f45 5341 4553 5452     TS..TRACE_ASSERT
   37b40:	203a 7270 5476 6172 6563 6f4c 6b6f 7075     : prvTraceLookup
   37b50:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   37b60:	203a 616e 656d 3d20 203d 554e 4c4c 0000     : name == NULL..
   37b70:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37b80:	5476 6172 6563 6f4c 6b6f 7075 7953 626d     vTraceLookupSymb
   37b90:	6c6f 6154 6c62 4565 746e 7972 203a 656c     olTableEntry: le
   37ba0:	206e 3d3d 3020 0000 5254 4341 5f45 5341     n == 0..TRACE_AS
   37bb0:	4553 5452 203a 7270 5476 6172 6563 7243     SERT: prvTraceCr
   37bc0:	6165 6574 7953 626d 6c6f 6154 6c62 4565     eateSymbolTableE
   37bd0:	746e 7972 203a 616e 656d 3d20 203d 554e     ntry: name == NU
   37be0:	4c4c 0000 5254 4341 5f45 5341 4553 5452     LL..TRACE_ASSERT
   37bf0:	203a 7270 5476 6172 6563 7243 6165 6574     : prvTraceCreate
   37c00:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   37c10:	203a 656c 206e 3d3d 3020 0000 7953 626d     : len == 0..Symb
   37c20:	6c6f 7420 6261 656c 6620 6c75 2e6c 4920     ol table full. I
   37c30:	636e 6572 7361 2065 5254 5f43 4643 5f47     ncrease TRC_CFG_
   37c40:	5953 424d 4c4f 545f 4241 454c 535f 5a49     SYMBOL_TABLE_SIZ
   37c50:	2045 6e69 7420 6372 6f43 666e 6769 682e     E in trcConfig.h
   37c60:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   37c70:	203a 7270 5476 6172 6563 6547 4374 6568     : prvTraceGetChe
   37c80:	6b63 7573 3a6d 7020 616e 656d 3d20 203d     cksum: pname == 
   37c90:	554e 4c4c 0000 0000 5254 4341 5f45 5341     NULL....TRACE_AS
   37ca0:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   37cb0:	4374 6568 6b63 7573 3a6d 7020 7263 2063     tChecksum: pcrc 
   37cc0:	3d3d 4e20 4c55 004c 5254 4341 5f45 5341     == NULL.TRACE_AS
   37cd0:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   37ce0:	4374 6568 6b63 7573 3a6d 7020 656c 676e     tChecksum: pleng
   37cf0:	6874 3d20 203d 554e 4c4c 0000 4449 454c     th == NULL..IDLE
   37d00:	0000 0000 6d54 2072 7653 0063 c838 0001     ....Tmr Svc.8...
   37d10:	c838 0001 c838 0001 c8c6 0001 c890 0001     8...8...........
   37d20:	c8ba 0001 c838 0001 c838 0001 c8c6 0001     ....8...8.......
   37d30:	c890 0001                                   ....

00037d34 <sd_mmc_trans_units>:
   37d34:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

00037d50 <sd_trans_multipliers>:
   37d50:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   37d60:	000f 0000 0014 0000 0019 0000 001e 0000     ................
   37d70:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
   37d80:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

00037d90 <mmc_trans_multipliers>:
   37d90:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   37da0:	000f 0000 0014 0000 001a 0000 001e 0000     ................
   37db0:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
   37dc0:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...
   37dd0:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   37de0:	5d64 0000 6e69 6176 696c 6564 6920 636f     d]..invalide ioc
   37df0:	746c 6320 646d 000a 000d 0000               lt cmd......

00037dfc <__FUNCTION__.17099>:
   37dfc:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
   37e0c:	4128 5050 2829 4e49 4f46 0029 6c53 776f     (APP)(INFO).Slow
   37e1c:	6e69 2067 6f64 6e77 2e2e 0a2e 0000 0000     ing down........
   37e2c:	000d 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   37e3c:	5d73 255b 5d64 0000 4828 4649 4629 6961     s][%d]..(HIF)Fai
   37e4c:	206c 6f74 7720 6b61 7075 7420 6568 6320     l to wakup the c
   37e5c:	6968 0a70 0000 0000 6828 6669 2029 4957     hip.....(hif) WI
   37e6c:	4946 485f 534f 5f54 4352 5f56 5443 4c52     FI_HOST_RCV_CTRL
   37e7c:	315f 6220 7375 6620 6961 0a6c 0000 0000     _1 bus fail.....
   37e8c:	6828 6669 2029 6461 7264 7365 2073 7562     (hif) address bu
   37e9c:	2073 6166 6c69 000a 6828 6669 2029 6f43     s fail..(hif) Co
   37eac:	7272 7075 6574 2064 6170 6b63 7465 5320     rrupted packet S
   37ebc:	7a69 2065 203d 7525 3c20 204c 203d 7525     ize = %u <L = %u
   37ecc:	202c 2047 203d 7525 202c 504f 3d20 2520     , G = %u, OP = %
   37edc:	3230 3e58 000a 0000 4957 4946 6320 6c61     02X>....WIFI cal
   37eec:	626c 6361 206b 7369 6e20 746f 7220 6765     lback is not reg
   37efc:	7369 6574 6572 0a64 0000 0000 6353 6b6f     istered.....Scok
   37f0c:	7465 6320 6c61 626c 6361 206b 7369 6e20     et callback is n
   37f1c:	746f 7220 6765 7369 6574 6572 0a64 0000     ot registered...
   37f2c:	744f 2061 6163 6c6c 6162 6b63 6920 2073     Ota callback is 
   37f3c:	6f6e 2074 6572 6967 7473 7265 6465 000a     not registered..
   37f4c:	7243 7079 6f74 6320 6c61 626c 6361 206b     Crypto callback 
   37f5c:	7369 6e20 746f 7220 6765 7369 6574 6572     is not registere
   37f6c:	0a64 0000 6953 6d67 2061 6163 6c6c 6162     d...Sigma callba
   37f7c:	6b63 6920 2073 6f6e 2074 6572 6967 7473     ck is not regist
   37f8c:	7265 6465 000a 0000 6828 6669 2029 6e69     ered....(hif) in
   37f9c:	6176 696c 2064 7267 756f 2070 4449 000a     valid group ID..
   37fac:	6828 6669 2029 6f68 7473 6120 7070 6420     (hif) host app d
   37fbc:	6469 276e 2074 6573 2074 5852 4420 6e6f     idn't set RX Don
   37fcc:	2065 253c 3e75 253c 3e58 000a 6828 6669     e <%u><%X>..(hif
   37fdc:	2029 7257 6e6f 2067 6953 657a 000a 0000     ) Wrong Size....
   37fec:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
   37ffc:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
   3800c:	2029 6146 6c69 7420 206f 6552 6461 6920     ) Fail to Read i
   3801c:	746e 7265 7572 7470 7220 6765 000a 0000     nterrupt reg....
   3802c:	4828 4649 2029 6146 6c69 7420 206f 6168     (HIF) Fail to ha
   3803c:	646e 656c 6920 746e 7265 7572 7470 2520     ndle interrupt %
   3804c:	2064 7274 2079 6741 6961 2e6e 0a2e 0000     d try Again.....
   3805c:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
   3806c:	6176 696c 2064 7261 7567 656d 746e 000a     valid argument..
   3807c:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
   3808c:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
   3809c:	206e 6874 2065 6572 6963 6576 2064 7562     n the recived bu
   380ac:	6666 7265 7320 7a69 2065 253c 3e75 253c     ffer size <%u><%
   380bc:	756c 0a3e 0000 0000 5041 2050 6552 7571     lu>.....APP Requ
   380cc:	7365 6574 2064 6441 7264 7365 2073 6562     ested Address be
   380dc:	6f79 646e 7420 6568 7220 6365 7669 6465     yond the recived
   380ec:	6220 6675 6566 2072 6461 7264 7365 2073      buffer address 
   380fc:	6e61 2064 656c 676e 6874 000a 5247 2070     and length..GRp 
   3810c:	203f 6425 000a 0000 0a3c 0002 0a0c 0002     ? %d....<.......
   3811c:	0a04 0002 0a1c 0002 0a14 0002 0a34 0002     ............4...
   3812c:	0a24 0002 0a2c 0002                         $...,...

00038134 <__FUNCTION__.17967>:
   38134:	6968 5f66 6573 646e 0000 0000               hif_send....

00038140 <__FUNCTION__.17977>:
   38140:	6968 5f66 7369 0072                         hif_isr.

00038148 <__FUNCTION__.17986>:
   38148:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

00038158 <__FUNCTION__.17998>:
   38158:	6968 5f66 6572 6563 7669 0065               hif_receive.

00038164 <__FUNCTION__.18014>:
   38164:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
   38174:	4128 5050 2829 4e49 4f46 0029 6f43 666e     (APP)(INFO).Conf
   38184:	696c 7463 6465 4920 2050 2022 7525 252e     licted IP " %u.%
   38194:	2e75 7525 252e 2075 2022 000a 000d 0000     u.%u.%u " ......
   381a4:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   381b4:	5d64 0000 4552 2051 6f4e 2074 6564 6966     d]..REQ Not defi
   381c4:	656e 2064 6425 000a 4e49 4156 494c 2044     ned %d..INVALID 
   381d4:	4f50 4e49 4554 0a52 0000 0000 4e49 4156     POINTER.....INVA
   381e4:	494c 2044 5353 4449 000a 0000 4e49 4156     LID SSID....INVA
   381f4:	494c 2044 4843 000a 4e49 4156 494c 2044     LID CH..INVALID 
   38204:	4844 5043 5320 5245 4556 2052 5049 000a     DHCP SERVER IP..
   38214:	4e49 4156 494c 2044 454b 2059 4e49 4544     INVALID KEY INDE
   38224:	0a58 0000 4e49 4156 494c 2044 454b 2059     X...INVALID KEY 
   38234:	5453 4952 474e 5320 5a49 0a45 0000 0000     STRING SIZE.....
   38244:	4e49 4156 494c 2044 454b 2059 4953 455a     INVALID KEY SIZE
   38254:	000a 0000 4e49 4156 494c 2044 5057 2041     ....INVALID WPA 
   38264:	454b 2059 4953 455a 000a 0000 4e49 4156     KEY SIZE....INVA
   38274:	494c 2044 5541 4854 4e45 4954 4143 4954     LID AUTHENTICATI
   38284:	4e4f 4d20 444f 0a45 0000 0000 4e49 4156     ON MODE.....INVA
   38294:	494c 2044 6f4e 6f20 2066 6373 6e61 7320     LID No of scan s
   382a4:	6f6c 7374 2021 6425 000a 0000 4e49 4156     lots! %d....INVA
   382b4:	494c 2044 6373 6e61 7320 6f6c 2074 6974     LID scan slot ti
   382c4:	656d 2021 6425 000a 4e49 4156 494c 2044     me! %d..INVALID 
   382d4:	6f4e 6f20 2066 7270 626f 2065 6572 7571     No of probe requ
   382e4:	7365 7374 7020 7265 7320 6163 206e 6c73     ests per scan sl
   382f4:	746f 2520 0a64 0000 4e49 4156 494c 2044     ot %d...INVALID 
   38304:	5352 4953 7420 7268 7365 6f68 646c 2520     RSSI threshold %
   38314:	2064 000a 6946 6d72 6177 6572 7620 7265     d ..Firmware ver
   38324:	2020 3a20 2520 2e75 7525 252e 2075 7653        : %u.%u.%u Sv
   38334:	726e 7665 2520 0a75 0000 0000 6946 6d72     nrev %u.....Firm
   38344:	6177 6572 4220 6975 646c 2520 2073 6954     ware Build %s Ti
   38354:	656d 2520 0a73 0000 6946 6d72 6177 6572     me %s...Firmware
   38364:	4d20 6e69 6420 6972 6576 2072 6576 2072      Min driver ver 
   38374:	203a 7525 252e 2e75 7525 000a 7244 7669     : %u.%u.%u..Driv
   38384:	7265 7620 7265 203a 7525 252e 2e75 7525     er ver: %u.%u.%u
   38394:	000a 0000 3931 353a 3a37 3131 0000 0000     ....19:57:11....
   383a4:	7041 2072 3033 3220 3230 0033 7244 7669     Apr 30 2023.Driv
   383b4:	7265 6220 6975 746c 6120 2074 7325 2509     er built at %s.%
   383c4:	0a73 0000 694d 6d73 7461 6863 4620 7269     s...Mismatch Fir
   383d4:	616d 7277 2065 6556 7372 6f69 0a6e 0000     mawre Version...
   383e4:	654b 2079 7369 6e20 746f 7620 6c61 6469     Key is not valid
   383f4:	000a 0000 6e49 6176 696c 2064 654b 0a79     ....Invalid Key.
   38404:	0000 0000 5353 4449 4c20 4e45 4920 564e     ....SSID LEN INV
   38414:	4c41 4449 000a 0000 4843 4920 564e 4c41     ALID....CH INVAL
   38424:	4449 000a 6e49 6176 696c 2064 6557 2070     ID..Invalid Wep 
   38434:	656b 2079 6e69 6564 2078 6425 000a 0000     key index %d....
   38444:	6e49 6176 696c 2064 6557 2070 656b 2079     Invalid Wep key 
   38454:	656c 676e 6874 2520 0a64 0000 6e49 6f63     length %d...Inco
   38464:	7272 6365 2074 5350 204b 656b 2079 656c     rrect PSK key le
   38474:	676e 6874 000a 0000 6e75 6564 6966 656e     ngth....undefine
   38484:	2064 6573 2063 7974 6570 000a 505f 5f53     d sec type.._PS_
   38494:	4553 5652 5245 205f 7369 6e20 746f 6420     SERVER_ is not d
   384a4:	6665 6e69 6465 000a 694c 7473 6e65 6320     efined..Listen c
   384b4:	6168 6e6e 6c65 7320 6f68 6c75 2064 6e6f     hannel should on
   384c4:	796c 6220 2065 324d 5f4d 4957 4946 435f     ly be M2M_WIFI_C
   384d4:	5f48 2f31 2f36 3131 0a20 0000 4f50 4557     H_1/6/11 ...POWE
   384e4:	2052 4153 4556 2520 0a64 0000 4e49 4156     R SAVE %d...INVA
   384f4:	494c 2044 4f44 414d 4e49 4e20 4d41 0a45     LID DOMAIN NAME.
   38504:	0000 0000 5250 474e 4220 6675 6566 2072     ....PRNG Buffer 
   38514:	7865 6563 6465 6465 6d20 7861 6d69 6d75     exceeded maximum
   38524:	7320 7a69 2065 6425 6f20 2072 554e 4c4c      size %d or NULL
   38534:	4220 6675 6566 0a72 0000 0000                Buffer.....

00038540 <__FUNCTION__.17949>:
   38540:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

0003854c <__FUNCTION__.17978>:
   3854c:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

0003855c <__FUNCTION__.18009>:
   3855c:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
   3856c:	735f 0063 4128 5050 2829 5245 2952 255b     _sc.(APP)(ERR)[%
   3857c:	5d73 255b 5d64 0000 7542 2073 7265 6f72     s][%d]..Bus erro
   3858c:	2072 3528 2e29 6425 2520 786c 000a 0000     r (5).%d %lx....
   3859c:	000d 0000 6146 6c69 6465 7420 206f 6177     ....Failed to wa
   385ac:	756b 2070 6874 2065 6863 7069 000a 0000     kup the chip....
   385bc:	4128 5050 2829 4e49 4f46 0029 7244 7669     (APP)(INFO).Driv
   385cc:	7265 6556 4972 666e 3a6f 3020 2578 3830     erVerInfo: 0x%08
   385dc:	786c 000a 6166 6c69 6465 7420 206f 6564     lx..failed to de
   385ec:	692d 696e 6974 6c61 7a69 0a65 0000 0000     -initialize.....

000385fc <__FUNCTION__.17806>:
   385fc:	6863 7069 775f 6b61 0065 0000               chip_wake...

00038608 <__FUNCTION__.17855>:
   38608:	6863 7069 645f 6965 696e 0074 4128 5050     chip_deinit.(APP
   38618:	2829 5245 2952 255b 5d73 255b 5d64 0000     )(ERR)[%s][%d]..
   38628:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
   38638:	206c 6e69 7469 6220 7375 000a 000d 0000     l init bus......
   38648:	4128 5050 2829 4e49 4f46 0029 6843 7069     (APP)(INFO).Chip
   38658:	4920 2044 6c25 0a78 0000 0000 6166 6c69      ID %lx.....fail
   38668:	6465 7420 206f 6e65 6261 656c 6920 746e     ed to enable int
   38678:	7265 7572 7470 2e73 0a2e 0000 6e5b 696d     errupts.....[nmi
   38688:	7320 6f74 5d70 203a 6863 7069 645f 6965      stop]: chip_dei
   38698:	696e 2074 6166 6c69 000a 0000 6e5b 696d     nit fail....[nmi
   386a8:	7320 6f74 5d70 203a 5053 2049 6c66 7361      stop]: SPI flas
   386b8:	2068 6964 6173 6c62 2065 6166 6c69 000a     h disable fail..
   386c8:	6e5b 696d 7320 6f74 5d70 203a 6166 6c69     [nmi stop]: fail
   386d8:	6920 696e 2074 7562 0a73 0000                init bus...

000386e4 <__FUNCTION__.17853>:
   386e4:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

000386f0 <__FUNCTION__.17860>:
   386f0:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...

00038700 <crc7_syndrome_table>:
   38700:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
   38710:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
   38720:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
   38730:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
   38740:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
   38750:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
   38760:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
   38770:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
   38780:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
   38790:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
   387a0:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
   387b0:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
   387c0:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
   387d0:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
   387e0:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
   387f0:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
   38800:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   38810:	5d64 0000 6e5b 696d 7320 6970 3a5d 4620     d]..[nmi spi]: F
   38820:	6961 656c 2064 6d63 2064 7277 7469 2c65     ailed cmd write,
   38830:	6220 7375 6520 7272 726f 2e2e 0a2e 0000      bus error......
   38840:	000d 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   38850:	6961 656c 2064 7562 2073 7265 6f72 2e72     ailed bus error.
   38860:	2e2e 000a 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   38870:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   38880:	736e 2065 6572 6461 202c 7825 2520 2078     nse read, %x %x 
   38890:	7825 000a 6e5b 696d 7320 6970 3a5d 4620     %x..[nmi spi]: F
   388a0:	6961 656c 2064 6d63 2064 6572 7073 6e6f     ailed cmd respon
   388b0:	6573 7220 6165 2c64 6220 7375 6520 7272     se read, bus err
   388c0:	726f 2e2e 0a2e 0000 6e5b 696d 7320 6970     or......[nmi spi
   388d0:	3a5d 7320 6970 6220 6675 6566 2072 6973     ]: spi buffer si
   388e0:	657a 7420 6f6f 7320 616d 6c6c 2820 6425     ze too small (%d
   388f0:	2029 2528 2964 000a 6e5b 696d 7320 6970     ) (%d)..[nmi spi
   38900:	3a5d 4620 6961 656c 2064 6d63 2064 6572     ]: Failed cmd re
   38910:	7073 6e6f 6573 202c 6d63 2064 2528 3230     sponse, cmd (%02
   38920:	2978 202c 6572 7073 2820 3025 7832 0a29     x), resp (%02x).
   38930:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   38940:	6961 656c 2064 6d63 2064 7473 7461 2065     ailed cmd state 
   38950:	6572 7073 6e6f 6573 7320 6174 6574 2820     response state (
   38960:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   38970:	3a5d 4520 7272 726f 202c 6164 6174 7220     ]: Error, data r
   38980:	6165 2064 6572 7073 6e6f 6573 2820 3025     ead response (%0
   38990:	7832 0a29 0000 0000 6e5b 696d 7320 6970     2x).....[nmi spi
   389a0:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   389b0:	206e 6877 6e65 7220 6165 6964 676e 6420     n when reading d
   389c0:	7461 2e61 000a 0000 6e5b 696d 7320 6970     ata.....[nmi spi
   389d0:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   389e0:	206e 6877 6e65 7220 6165 6964 676e 6320     n when reading c
   389f0:	6372 0a2e 0000 0000 6e5b 696d 7320 6970     rc......[nmi spi
   38a00:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   38a10:	6f6c 6b63 7220 6165 2c64 6220 7375 6520     lock read, bus e
   38a20:	7272 726f 2e2e 0a2e 0000 0000 6e5b 696d     rror........[nmi
   38a30:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
   38a40:	6174 6220 6f6c 6b63 6320 6372 7220 6165     ta block crc rea
   38a50:	2c64 6220 7375 6520 7272 726f 2e2e 0a2e     d, bus error....
   38a60:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   38a70:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   38a80:	736e 2065 6572 6461 202c 7562 2073 7265     nse read, bus er
   38a90:	6f72 2e72 2e2e 000a 6e5b 696d 7320 6970     ror.....[nmi spi
   38aa0:	3a5d 4620 6961 656c 2064 6164 6174 7220     ]: Failed data r
   38ab0:	7365 6f70 736e 2065 6572 6461 2e2e 282e     esponse read...(
   38ac0:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   38ad0:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   38ae0:	6f6c 6b63 6320 646d 7720 6972 6574 202c     lock cmd write, 
   38af0:	7562 2073 7265 6f72 2e72 2e2e 000a 0000     bus error.......
   38b00:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   38b10:	2064 6164 6174 6220 6f6c 6b63 7720 6972     d data block wri
   38b20:	6574 202c 7562 2073 7265 6f72 2e72 2e2e     te, bus error...
   38b30:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   38b40:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
   38b50:	6320 6372 7720 6972 6574 202c 7562 2073      crc write, bus 
   38b60:	7265 6f72 2e72 2e2e 000a 0000 6e5b 696d     error.......[nmi
   38b70:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   38b80:	2c64 7720 6972 6574 7220 6765 2820 3025     d, write reg (%0
   38b90:	7838 2e29 2e2e 000a 6552 6573 2074 6e61     8x).....Reset an
   38ba0:	2064 6572 7274 2079 6425 2520 786c 2520     d retry %d %lx %
   38bb0:	786c 000a 6e5b 696d 7320 6970 3a5d 4620     lx..[nmi spi]: F
   38bc0:	6961 656c 2064 6d63 2c64 7720 6972 6574     ailed cmd, write
   38bd0:	6220 6f6c 6b63 2820 3025 7838 2e29 2e2e      block (%08x)...
   38be0:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   38bf0:	6961 656c 2064 6c62 636f 206b 6164 6174     ailed block data
   38c00:	7720 6972 6574 2e2e 0a2e 0000 6552 6573      write......Rese
   38c10:	2074 6e61 2064 6572 7274 2079 6425 2520     t and retry %d %
   38c20:	786c 2520 0a64 0000 6e5b 696d 7320 6970     lx %d...[nmi spi
   38c30:	3a5d 4620 6961 656c 2064 6d63 2c64 7220     ]: Failed cmd, r
   38c40:	6165 2064 6572 2067 2528 3830 2978 2e2e     ead reg (%08x)..
   38c50:	0a2e 0000 6552 6573 2074 6e61 2064 6572     ....Reset and re
   38c60:	7274 2079 6425 2520 786c 000a 6e5b 696d     try %d %lx..[nmi
   38c70:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   38c80:	2c64 7220 6165 2064 6c62 636f 206b 2528     d, read block (%
   38c90:	3830 2978 2e2e 0a2e 0000 0000 6e5b 696d     08x)........[nmi
   38ca0:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   38cb0:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   38cc0:	636f 6c6f 7720 7469 2068 5243 2043 6e6f     ocol with CRC on
   38cd0:	202c 6572 7974 6972 676e 7720 7469 2068     , retyring with 
   38ce0:	5243 2043 666f 2e66 2e2e 000a 6e5b 696d     CRC off.....[nmi
   38cf0:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   38d00:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   38d10:	636f 6c6f 2e2e 0a2e 0000 0000 6e5b 696d     ocol........[nmi
   38d20:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   38d30:	6574 6e72 6c61 7720 6972 6574 7020 6f72     ternal write pro
   38d40:	6f74 6f63 206c 6572 2e67 2e2e 000a 0000     tocol reg.......
   38d50:	6e5b 696d 7320 6970 3a5d 4620 6961 206c     [nmi spi]: Fail 
   38d60:	6d63 2064 6572 6461 6320 6968 2070 6469     cmd read chip id
   38d70:	2e2e 0a2e 0000 0000 2664 0002 2664 0002     ........d&..d&..
   38d80:	26f4 0002 25b8 0002 25fe 0002 2620 0002     .&...%...%.. &..
   38d90:	26a6 0002 26a6 0002 2760 0002 258c 0002     .&...&..`'...%..
   38da0:	27ba 0002 27ba 0002 27ba 0002 27ba 0002     .'...'...'...'..
   38db0:	2642 0002 2bc4 0002 2bc4 0002 2c4c 0002     B&...+...+..L,..
   38dc0:	2b28 0002 2b6a 0002 2b88 0002 2c02 0002     (+..j+...+...,..
   38dd0:	2c02 0002 2cae 0002 2b00 0002 2cfe 0002     .,...,...+...,..
   38de0:	2cfe 0002 2cfe 0002 2cfe 0002 2ba6 0002     .,...,...,...+..

00038df0 <__FUNCTION__.17128>:
   38df0:	7073 5f69 6d63 0064                         spi_cmd.

00038df8 <__FUNCTION__.17135>:
   38df8:	7073 5f69 6164 6174 725f 7073 0000 0000     spi_data_rsp....

00038e08 <__FUNCTION__.17144>:
   38e08:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

00038e14 <__FUNCTION__.17177>:
   38e14:	7073 5f69 6d63 5f64 6f63 706d 656c 6574     spi_cmd_complete
   38e24:	0000 0000                                   ....

00038e28 <__FUNCTION__.17223>:
   38e28:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

00038e38 <__FUNCTION__.17235>:
   38e38:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

00038e48 <__FUNCTION__.17246>:
   38e48:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

00038e58 <__FUNCTION__.17258>:
   38e58:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

00038e68 <__FUNCTION__.17269>:
   38e68:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

00038e74 <__FUNCTION__.17290>:
   38e74:	6d6e 735f 6970 695f 696e 0074 4128 5050     nm_spi_init.(APP
   38e84:	2829 4e49 4f46 0029 4528 5252 2952 7543     )(INFO).(ERRR)Cu
   38e94:	7272 6e65 2074 253c 3e64 000a 000d 0000     rrent <%d>......
   38ea4:	6f53 6b63 7465 2520 2064 6573 7373 6f69     Socket %d sessio
   38eb4:	206e 4449 3d20 2520 0d64 000a 6f53 6b63     n ID = %d...Sock
   38ec4:	7420 206f 6564 656c 6574 3c20 6425 0a3e      to delete <%d>.
   38ed4:	0000 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   38ee4:	5d73 255b 5d64 0000 4e53 2049 7845 6563     s][%d]..SNI Exce
   38ef4:	6465 2073 614d 2078 654c 676e 6874 000a     eds Max Length..
   38f04:	6e55 6e6b 776f 206e 5353 204c 6f53 6b63     Unknown SSL Sock
   38f14:	7465 4f20 7470 6f69 206e 6425 000a 0000     et Option %d....
   38f24:	6f4e 2074 5353 204c 6f53 6b63 7465 000a     Not SSL Socket..
   38f34:	5322 2f44 4d4d 2043 6143 6472 5320 6f6c     "SD/MMC Card Slo
   38f44:	2074 2230 0000 0000                         t 0"....

00038f4c <lun_desc>:
   38f4c:	e25d 0001 e2b5 0001 e301 0001 e34d 0001     ]...........M...
   38f5c:	e37d 0001 e401 0001 e491 0001 8f34 0003     }...........4...
   38f6c:	0800 4200 0c00 4200 1000 4200 1400 4200     ...B...B...B...B
   38f7c:	1800 4200 1c00 4200 0a09 0c0b 0e0d 0000     ...B...B........
   38f8c:	85e2 0002 865c 0002 865c 0002 8600 0002     ....\...\.......
   38f9c:	85fa 0002 8606 0002 85e8 0002 860c 0002     ................
   38fac:	8642 0002 8844 0002 8894 0002 8894 0002     B...D...........
   38fbc:	8890 0002 8836 0002 8856 0002 8826 0002     ....6...V...&...
   38fcc:	8868 0002 887a 0002 88e2 0002 8910 0002     h...z...........
   38fdc:	8910 0002 890c 0002 88dc 0002 88e8 0002     ................
   38fec:	88d6 0002 88ee 0002 88f4 0002               ............

00038ff8 <tcc_modules>:
   38ff8:	2000 4200 2400 4200 2800 4200               . .B.$.B.(.B

00039004 <_tcc_gclk_ids>:
   39004:	1a1a 001b                                   ....

00039008 <_tcc_apbcmasks>:
   39008:	0100 0000 0200 0000 0400 0000               ............

00039014 <_tcc_maxs>:
   39014:	ffff 00ff ffff 00ff ffff 0000               ............

00039020 <_tcc_cc_nums>:
   39020:	0204 0002                                   ....

00039024 <_tcc_ow_nums>:
   39024:	0408 0002                                   ....

00039028 <_tcc_intflag>:
   39028:	0001 0000 0002 0000 0004 0000 0008 0000     ................
   39038:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
   39048:	0000 0001 0000 0002 0000 0004 0000 0008     ................

00039058 <LfnOfs>:
   39058:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................
   39068:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
   39078:	5d5b 0000 feeb 4d90 4453 534f 2e35 0030     [].....MSDOS5.0.
   39088:	4f4e 4e20 4d41 2045 2020 4620 5441 3233     NO NAME    FAT32
   39098:	2020 0020 4f4e 4e20 4d41 2045 2020 4620        .NO NAME    F
   390a8:	5441 2020 2020 0020                         AT     .

000390b0 <excvt.4558>:
   390b0:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
   390c0:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
   390d0:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
   390e0:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
   390f0:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
   39100:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
   39110:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
   39120:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................

00039130 <Tbl>:
   39130:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
   39140:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
   39150:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
   39160:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
   39170:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
   39180:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
   39190:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
   391a0:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
   391b0:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
   391c0:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
   391d0:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
   391e0:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
   391f0:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
   39200:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
   39210:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
   39220:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

00039230 <tbl_lower.4308>:
   39230:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
   39240:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
   39250:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
   39260:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
   39270:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
   39280:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
   39290:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
   392a0:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
   392b0:	0103 0105 0107 0109 010b 010d 010f 0111     ................
   392c0:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
   392d0:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
   392e0:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
   392f0:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
   39300:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
   39310:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
   39320:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
   39330:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
   39340:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
   39350:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
   39360:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
   39370:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
   39380:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
   39390:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
   393a0:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
   393b0:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
   393c0:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
   393d0:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
   393e0:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
   393f0:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
   39400:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

00039410 <tbl_upper.4309>:
   39410:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
   39420:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
   39430:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
   39440:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
   39450:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
   39460:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
   39470:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
   39480:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
   39490:	0102 0104 0106 0108 010a 010c 010e 0110     ................
   394a0:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
   394b0:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
   394c0:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
   394d0:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
   394e0:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
   394f0:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
   39500:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
   39510:	0393 0394 0395 0396 0397 0398 0399 039a     ................
   39520:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
   39530:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
   39540:	0411 0412 0413 0414 0415 0416 0417 0418     ................
   39550:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
   39560:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
   39570:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
   39580:	0402 0403 0404 0405 0406 0407 0408 0409     ................
   39590:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
   395a0:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
   395b0:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
   395c0:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
   395d0:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
   395e0:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
   395f0:	dd7a 0002 dd7a 0002 dd7a 0002 dc08 0002     z...z...z.......
   39600:	dd7a 0002 dcf2 0002 dd7a 0002 dd7a 0002     z.......z...z...
   39610:	dd7a 0002 dd7a 0002 dd7a 0002 dd7a 0002     z...z...z...z...
   39620:	dd7a 0002 dd6c 0002 514d 4354 0000 0000     z...l...MQTC....
   39630:	0004 0000 0000 0000 0000 0000 0000 0000     ................
   39640:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   39680:	514d 4354 0000 0000 0004 0000 0000 0000     MQTC............
	...
   39698:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   396d8:	514d 5454 0000 0000 514d 7349 7064 0000     MQTT....MQIsdp..
   396e8:	7461 656d 2f6c 2e31 2e30 0032 7468 7074     atmel/1.0.2.http
   396f8:	2f3a 002f 7468 7074 3a73 2f2f 0000 0000     ://.https://....
   39708:	4547 2054 0000 0000 4f50 5453 0020 0000     GET ....POST ...
   39718:	4544 454c 4554 0020 5550 2054 0000 0000     DELETE .PUT ....
   39728:	504f 4954 4e4f 2053 0000 0000 4548 4441     OPTIONS ....HEAD
   39738:	0020 0000 4820 5454 2f50 2e31 0d31 000a      ... HTTP/1.1...
   39748:	7355 7265 412d 6567 746e 203a 0000 0000     User-Agent: ....
   39758:	0a0d 0000 6f48 7473 203a 0000 6f43 6e6e     ....Host: ..Conn
   39768:	6365 6974 6e6f 203a 654b 7065 412d 696c     ection: Keep-Ali
   39778:	6576 0a0d 0000 0000 6341 6563 7470 452d     ve......Accept-E
   39788:	636e 646f 6e69 3a67 0d20 000a 6341 6563     ncoding: ...Acce
   39798:	7470 432d 6168 7372 7465 203a 7475 2d66     pt-Charset: utf-
   397a8:	0d38 000a 7254 6e61 6673 7265 452d 636e     8...Transfer-Enc
   397b8:	646f 6e69 3a67 6320 7568 6b6e 6465 0a0d     oding: chunked..
   397c8:	0000 0000 7525 0000 6f43 746e 6e65 2d74     ....%u..Content-
   397d8:	654c 676e 6874 203a 0000 0000 3130 3332     Length: ....0123
   397e8:	3534 3736 3938 6261 6463 6665 7254 6e61     456789abcdefTran
   397f8:	6673 7265 452d 636e 646f 6e69 3a67 0020     sfer-Encoding: .
   39808:	6f43 6e6e 6365 6974 6e6f 203a 0000 0000     Connection: ....
   39818:	5448 5054 002f 0000 0d31 0000 fe6e 0002     HTTP/...1...n...
   39828:	fe68 0002 fe62 0002 fe5c 0002 fe74 0002     h...b...\...t...
   39838:	fe56 0002 fe74 0002 fe50 0002 fe4a 0002     V...t...P...J...
   39848:	fe74 0002 fe44 0002 fe44 0002 fe3e 0002     t...D...D...>...
   39858:	fe38 0002 fe32 0002 2000 4200 2400 4200     8...2.... .B.$.B
   39868:	2800 4200 0a0d 0a0d 2d2d 2d2d 452d 4553     .(.B....-----ESE
   39878:	3135 2036 614d 6e69 5020 6f72 7267 6d61     516 Main Program
   39888:	2d2d 2d2d 0d2d 000a 0a0d 0a0d 6e49 7469     -----.......Init
   39898:	6169 696c 657a 4820 2e57 2e2e 0a0d 0000     ialize HW.......
   398a8:	7245 6f72 2072 6e69 7469 6169 696c 697a     Error initializi
   398b8:	676e 4920 4332 4420 6972 6576 2172 0a0d     ng I2C Driver!..
   398c8:	0000 0000 6e49 7469 6169 696c 657a 2064     ....Initialized 
   398d8:	3249 2043 7244 7669 7265 0d21 000a 0000     I2C Driver!.....
   398e8:	6548 7061 6220 6665 726f 2065 7473 7261     Heap before star
   398f8:	6974 676e 7420 7361 736b 203a 6425 0a0d     ting tasks: %d..
   39908:	0000 0000 4c43 5f49 4154 4b53 0000 0000     ....CLI_TASK....
   39918:	5245 3a52 4320 494c 7420 7361 206b 6f63     ERR: CLI task co
   39928:	6c75 2064 6f6e 2074 6562 6920 696e 6974     uld not be initi
   39938:	6c61 7a69 6465 0d21 000a 0000 6548 7061     alized!.....Heap
   39948:	6120 7466 7265 7320 6174 7472 6e69 2067      after starting 
   39958:	4c43 3a49 2520 0d64 000a 0000 4957 4946     CLI: %d.....WIFI
   39968:	545f 5341 004b 0000 5245 3a52 5720 4649     _TASK...ERR: WIF
   39978:	2049 6174 6b73 6320 756f 646c 6e20 746f     I task could not
   39988:	6220 2065 6e69 7469 6169 696c 657a 2164      be initialized!
   39998:	0a0d 0000 6548 7061 6120 7466 7265 7320     ....Heap after s
   399a8:	6174 7472 6e69 2067 4957 4946 203a 6425     tarting WIFI: %d
   399b8:	0a0d 0000 4955 5420 7361 006b 5245 3a52     ....UI Task.ERR:
   399c8:	5520 2049 6174 6b73 6320 756f 646c 6e20      UI task could n
   399d8:	746f 6220 2065 6e69 7469 6169 696c 657a     ot be initialize
   399e8:	2164 0a0d 0000 0000 6548 7061 6120 7466     d!......Heap aft
   399f8:	7265 7320 6174 7472 6e69 2067 4955 5420     er starting UI T
   39a08:	7361 3a6b 2520 0d64 000a 0000 7245 6f72     ask: %d.....Erro
   39a18:	2072 6e6f 6d20 6d65 726f 2079 6c61 6f6c     r on memory allo
   39a28:	6163 6974 6e6f 6f20 206e 5246 4545 5452     cation on FREERT
   39a38:	534f 0d21 000a 0000 7245 6f72 2072 6e6f     OS!.....Error on
   39a48:	7320 6174 6b63 6f20 6576 6672 6f6c 2077      stack overflow 
   39a58:	6e6f 4620 4552 5245 4f54 2153 0a0d 0000     on FREERTOS!....
   39a68:	2344 0003 2314 0003 2326 0003 2268 0003     D#...#..&#..h"..
   39a78:	2326 0003 230a 0003 2326 0003 2268 0003     &#...#..&#..h"..
   39a88:	2314 0003 2314 0003 230a 0003 2268 0003     .#...#...#..h"..
   39a98:	2270 0003 2270 0003 2270 0003 232c 0003     p"..p"..p"..,#..
   39aa8:	2314 0003 2314 0003 22e8 0003 23cc 0003     .#...#..."...#..
   39ab8:	22e8 0003 230a 0003 22e8 0003 23cc 0003     ."...#..."...#..
   39ac8:	2314 0003 2314 0003 230a 0003 23cc 0003     .#...#...#...#..
   39ad8:	2270 0003 2270 0003 2270 0003 23d6 0003     p"..p"..p"...#..
   39ae8:	2574 0003 24c4 0003 24c4 0003 24c2 0003     t%...$...$...$..
   39af8:	2566 0003 2566 0003 255c 0003 24c2 0003     f%..f%..\%...$..
   39b08:	2566 0003 255c 0003 2566 0003 24c2 0003     f%..\%..f%...$..
   39b18:	256c 0003 256c 0003 256c 0003 25fc 0003     l%..l%..l%...%..
   39b28:	32b8 0003 329a 0003 3254 0003 3172 0003     .2...2..T2..r1..
   39b38:	3254 0003 328c 0003 3254 0003 3172 0003     T2...2..T2..r1..
   39b48:	329a 0003 329a 0003 328c 0003 3172 0003     .2...2...2..r1..
   39b58:	316a 0003 316a 0003 316a 0003 34d0 0003     j1..j1..j1...4..
   39b68:	3918 0003 37d8 0003 37d8 0003 37d4 0003     .9...7...7...7..
   39b78:	38f0 0003 38f0 0003 38e2 0003 37d4 0003     .8...8...8...7..
   39b88:	38f0 0003 38e2 0003 38f0 0003 37d4 0003     .8...8...8...7..
   39b98:	38f8 0003 38f8 0003 38f8 0003 3afc 0003     .8...8...8...:..

00039ba8 <_global_impure_ptr>:
   39ba8:	0124 2000                                   $.. 

00039bac <__sf_fake_stderr>:
	...

00039bcc <__sf_fake_stdin>:
	...

00039bec <__sf_fake_stdout>:
	...
   39c0c:	0043 4f50 4953 0058 002e 2d23 2b30 0020     C.POSIX...#-0+ .
   39c1c:	6c68 004c 6665 4567 4746 3000 3231 3433     hlL.efgEFG.01234
   39c2c:	3635 3837 4139 4342 4544 0046 3130 3332     56789ABCDEF.0123
   39c3c:	3534 3736 3938 6261 6463 6665 0000               456789abcdef.

00039c49 <_ctype_>:
   39c49:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   39c59:	2020 2020 2020 2020 2020 2020 2020 2020                     
   39c69:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   39c79:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   39c89:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   39c99:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   39ca9:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   39cb9:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   39cc9:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00039d4c <_init>:
   39d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   39d4e:	46c0      	nop			; (mov r8, r8)
   39d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
   39d52:	bc08      	pop	{r3}
   39d54:	469e      	mov	lr, r3
   39d56:	4770      	bx	lr

00039d58 <__init_array_start>:
   39d58:	000120dd 	.word	0x000120dd

00039d5c <_fini>:
   39d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   39d5e:	46c0      	nop			; (mov r8, r8)
   39d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
   39d62:	bc08      	pop	{r3}
   39d64:	469e      	mov	lr, r3
   39d66:	4770      	bx	lr

00039d68 <__fini_array_start>:
   39d68:	000120b5 	.word	0x000120b5
